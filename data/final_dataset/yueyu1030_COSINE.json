{"home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.InputExample.__init__": [[26, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "guid", ",", "text_a", ",", "label", ",", "true", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "guid", "=", "guid", "\n", "self", ".", "text_a", "=", "text_a", "\n", "self", ".", "label", "=", "label", "\n", "self", ".", "true", "=", "true", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.InputExample.__repr__": [[32, 34], ["str", "data_loader_new.InputExample.to_json_string"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.InputFeatures.to_json_string"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.InputExample.to_dict": [[35, 39], ["copy.deepcopy"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.InputExample.to_json_string": [[40, 43], ["json.dumps", "data_loader_new.InputExample.to_dict"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.InputFeatures.to_dict"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.ReInputExample.__init__": [[45, 52], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "guid", ",", "text_a", ",", "span_a", ",", "span_b", ",", "label", ",", "true", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "guid", "=", "guid", "\n", "self", ".", "text_a", "=", "text_a", "\n", "self", ".", "span_a", "=", "span_a", "\n", "self", ".", "span_b", "=", "span_b", "\n", "self", ".", "label", "=", "label", "\n", "self", ".", "true", "=", "true", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.WiCInputExample.__init__": [[54, 62], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "guid", ",", "text_a", ",", "text_b", ",", "span_a", ",", "span_b", ",", "label", ",", "true", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "guid", "=", "guid", "\n", "self", ".", "text_a", "=", "text_a", "\n", "self", ".", "span_a", "=", "span_a", "\n", "self", ".", "text_b", "=", "text_b", "\n", "self", ".", "span_b", "=", "span_b", "\n", "self", ".", "label", "=", "label", "\n", "self", ".", "true", "=", "true", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.MaskedLmInstance.__init__": [[75, 81], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "masked_token_id", ",", "masked_true_label", ",", "\n", ")", ":", "\n", "        ", "self", ".", "input_ids", "=", "input_ids", "\n", "self", ".", "masked_token_id", "=", "masked_token_id", "\n", "self", ".", "masked_true_label", "=", "masked_true_label", "\n", "self", ".", "attention_mask", "=", "attention_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.MaskedLmInstance.__repr__": [[82, 84], ["str", "data_loader_new.MaskedLmInstance.to_json_string"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.InputFeatures.to_json_string"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.MaskedLmInstance.to_dict": [[85, 89], ["copy.deepcopy"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.MaskedLmInstance.to_json_string": [[90, 93], ["json.dumps", "data_loader_new.MaskedLmInstance.to_dict"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.InputFeatures.to_dict"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.InputFeatures.__init__": [[105, 115], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "token_type_ids", ",", "label_id", ",", "true", "=", "-", "1", ",", "\n", "e1_mask", "=", "None", ",", "e2_mask", "=", "None", ",", "keys", "=", "None", ")", ":", "\n", "        ", "self", ".", "input_ids", "=", "input_ids", "\n", "self", ".", "attention_mask", "=", "attention_mask", "\n", "self", ".", "token_type_ids", "=", "token_type_ids", "\n", "self", ".", "label_id", "=", "label_id", "\n", "self", ".", "true", "=", "true", "\n", "self", ".", "e1_mask", "=", "e1_mask", "\n", "self", ".", "e2_mask", "=", "e2_mask", "\n", "self", ".", "keys", "=", "keys", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.InputFeatures.__repr__": [[116, 118], ["str", "data_loader_new.InputFeatures.to_json_string"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.InputFeatures.to_json_string"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.InputFeatures.to_dict": [[119, 123], ["copy.deepcopy"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.InputFeatures.to_json_string": [[124, 127], ["json.dumps", "data_loader_new.InputFeatures.to_dict"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.InputFeatures.to_dict"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.SemEvalProcessor.__init__": [[132, 135], ["utils.get_label"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.get_label"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "relation_labels", "=", "get_label", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.SemEvalProcessor._read_tsv": [[136, 145], ["open", "csv.reader", "lines.append"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_read_tsv", "(", "cls", ",", "input_file", ",", "quotechar", "=", "None", ")", ":", "\n", "        ", "\"\"\"Reads a tab separated value file.\"\"\"", "\n", "with", "open", "(", "input_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "reader", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "\"\\t\"", ",", "quotechar", "=", "quotechar", ")", "\n", "lines", "=", "[", "]", "\n", "for", "line", "in", "reader", ":", "\n", "                ", "lines", ".", "append", "(", "line", ")", "\n", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.SemEvalProcessor._create_examples": [[146, 157], ["enumerate", "data_loader_new.SemEvalProcessor.relation_labels.index", "examples.append", "logger.info", "data_loader_new.InputExample"], "methods", ["None"], ["", "", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "line", "[", "1", "]", "\n", "label", "=", "self", ".", "relation_labels", ".", "index", "(", "line", "[", "0", "]", ")", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "line", ")", "\n", "", "examples", ".", "append", "(", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.SemEvalProcessor.get_examples": [[158, 173], ["logger.info", "data_loader_new.SemEvalProcessor._create_examples", "data_loader_new.SemEvalProcessor._read_tsv", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.ChemprotProcessor._create_examples", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.YoutubeProcessor._read_tsv"], ["", "def", "get_examples", "(", "self", ",", "mode", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            mode: train, dev, test\n        \"\"\"", "\n", "file_to_read", "=", "None", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "file_to_read", "=", "self", ".", "args", ".", "train_file", "\n", "", "elif", "mode", "==", "'dev'", ":", "\n", "            ", "file_to_read", "=", "self", ".", "args", ".", "dev_file", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "file_to_read", "=", "self", ".", "args", ".", "test_file", "\n", "\n", "", "logger", ".", "info", "(", "\"LOOKING AT {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data_dir", ",", "file_to_read", ")", ")", ")", "\n", "return", "self", ".", "_create_examples", "(", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data_dir", ",", "file_to_read", ")", ")", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.YelpProcessor.__init__": [[177, 186], ["data_loader_new.YelpProcessor.load_info"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.YelpProcessor.load_info"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "#self.relation_labels = self.load_json(filename) # all possible labels", "\n", "filename", "=", "args", ".", "data_dir", "+", "'/'", "+", "'config.json'", "\n", "label", ",", "num_label", ",", "label2id", ",", "id2label", "=", "self", ".", "load_info", "(", "filename", ")", "\n", "self", ".", "relation_labels", "=", "label", "\n", "self", ".", "num_label", "=", "num_label", "\n", "self", ".", "label2id", "=", "label2id", "\n", "self", ".", "id2label", "=", "id2label", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.YelpProcessor._read_tsv": [[187, 196], ["open", "csv.reader", "lines.append"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_read_tsv", "(", "cls", ",", "input_file", ",", "quotechar", "=", "None", ")", ":", "\n", "        ", "\"\"\"Reads a tab separated value file.\"\"\"", "\n", "with", "open", "(", "input_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "reader", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "\"\\t\"", ",", "quotechar", "=", "quotechar", ")", "\n", "lines", "=", "[", "]", "\n", "for", "line", "in", "reader", ":", "\n", "                ", "lines", ".", "append", "(", "line", ")", "\n", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.YelpProcessor.read_data": [[197, 205], ["range", "open", "json.load", "len"], "methods", ["None"], ["", "", "def", "read_data", "(", "self", ",", "filename", ",", "mode", ")", ":", "\n", "        ", "path", "=", "filename", "+", "'/'", "+", "mode", "+", "'_data.json'", "\n", "path", "=", "filename", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "            ", "data", "[", "i", "]", "[", "\"labelid\"", "]", "=", "self", ".", "label2id", "[", "data", "[", "i", "]", "[", "\"label\"", "]", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.YelpProcessor.load_info": [[206, 214], ["open", "json.load", "range", "str", "int"], "methods", ["None"], ["", "def", "load_info", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "file", "=", "json", ".", "load", "(", "f", ")", "\n", "", "label2id", "=", "file", "[", "\"label2id\"", "]", "\n", "num_label", "=", "file", "[", "\"labels\"", "]", "\n", "id2label", "=", "file", "[", "\"id2label\"", "]", "\n", "label", "=", "[", "id2label", "[", "str", "(", "int", "(", "i", ")", ")", "]", "for", "i", "in", "range", "(", "num_label", ")", "]", "\n", "return", "label", ",", "num_label", ",", "label2id", ",", "id2label", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.YelpProcessor._create_examples": [[215, 225], ["enumerate", "examples.append", "logger.info", "data_loader_new.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "data", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "d", "[", "\"text\"", "]", "\n", "label", "=", "d", "[", "\"labelid\"", "]", "\n", "if", "i", "%", "2000", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "d", ")", "\n", "", "examples", ".", "append", "(", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.YelpProcessor._create_examples_raw": [[226, 237], ["enumerate", "data_loader_new.YelpProcessor.relation_labels.index", "examples.append", "logger.info", "data_loader_new.InputExample"], "methods", ["None"], ["", "def", "_create_examples_raw", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "line", "[", "1", "]", "\n", "label", "=", "self", ".", "relation_labels", ".", "index", "(", "line", "[", "0", "]", ")", "\n", "if", "i", "%", "2000", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "line", ")", "\n", "", "examples", ".", "append", "(", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.YelpProcessor.get_examples": [[238, 255], ["logger.info", "data_loader_new.YelpProcessor._create_examples", "data_loader_new.YelpProcessor.read_data", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.ChemprotProcessor._create_examples", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.ChemprotProcessor.read_data"], ["", "def", "get_examples", "(", "self", ",", "mode", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            mode: train, dev, test\n        \"\"\"", "\n", "file_to_read", "=", "None", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "file_to_read", "=", "self", ".", "args", ".", "train_file", "\n", "", "elif", "mode", "==", "'dev'", ":", "\n", "            ", "file_to_read", "=", "self", ".", "args", ".", "dev_file", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "file_to_read", "=", "self", ".", "args", ".", "test_file", "\n", "", "elif", "mode", "==", "'unlabeled'", ":", "\n", "            ", "file_to_read", "=", "self", ".", "args", ".", "unlabel_file", "\n", "\n", "", "logger", ".", "info", "(", "\"LOOKING AT {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data_dir", ",", "file_to_read", ")", ")", ")", "\n", "return", "self", ".", "_create_examples", "(", "self", ".", "read_data", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data_dir", ",", "file_to_read", ")", ",", "mode", ")", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.YoutubeProcessor.__init__": [[258, 278], ["range", "range", "range"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "#self.relation_labels = self.load_json(filename) # all possible labels", "\n", "#filename = args.data_dir + '/' + 'config.json'", "\n", "#label, num_label, label2id, id2label = self.load_info(filename)", "\n", "#self.relation_labels =", "\n", "#self.num_label = num_label", "\n", "#self.label2id = None", "\n", "#self.id2label = None", "\n", "self", ".", "rule", "=", "self", ".", "args", ".", "rule", "\n", "if", "'agnews'", "in", "self", ".", "args", ".", "task", ":", "\n", "            ", "self", ".", "num_label", "=", "4", "\n", "", "elif", "self", ".", "args", ".", "task", "==", "'TREC'", "or", "'trec'", "in", "self", ".", "args", ".", "task", ":", "\n", "            ", "self", ".", "num_label", "=", "6", "\n", "", "elif", "self", ".", "args", ".", "task", "in", "[", "'yelp'", ",", "'imdb'", ",", "'youtube'", "]", ":", "\n", "            ", "self", ".", "num_label", "=", "2", "\n", "#for i in range(self.num_label):", "\n", "", "self", ".", "relation_labels", "=", "[", "x", "for", "x", "in", "range", "(", "self", ".", "num_label", ")", "]", "\n", "self", ".", "label2id", "=", "{", "x", ":", "x", "for", "x", "in", "range", "(", "self", ".", "num_label", ")", "}", "\n", "self", ".", "id2label", "=", "{", "x", ":", "x", "for", "x", "in", "range", "(", "self", ".", "num_label", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.YoutubeProcessor._read_tsv": [[280, 289], ["open", "csv.reader", "lines.append"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_read_tsv", "(", "cls", ",", "input_file", ",", "quotechar", "=", "None", ")", ":", "\n", "        ", "\"\"\"Reads a tab separated value file.\"\"\"", "\n", "with", "open", "(", "input_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "reader", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "\"\\t\"", ",", "quotechar", "=", "quotechar", ")", "\n", "lines", "=", "[", "]", "\n", "for", "line", "in", "reader", ":", "\n", "                ", "lines", ".", "append", "(", "line", ")", "\n", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.YoutubeProcessor.read_data": [[290, 296], ["open", "json.load"], "methods", ["None"], ["", "", "def", "read_data", "(", "self", ",", "filename", ",", "mode", ")", ":", "\n", "        ", "path", "=", "filename", "+", "'/'", "+", "mode", "+", "'_data.json'", "\n", "path", "=", "filename", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.YoutubeProcessor._create_examples": [[297, 315], ["enumerate", "examples.append", "logger.info", "data_loader_new.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "data", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "d", "[", "\"text\"", "]", "\n", "label", "=", "d", "[", "\"label\"", "]", "if", "(", "self", ".", "rule", "==", "0", "and", "set_type", "!=", "'unlabeled'", ")", "else", "d", "[", "\"major\"", "]", "\n", "#print(text_a, label)", "\n", "#if i>10:", "\n", "#    assert 0", "\n", "if", "set_type", "not", "in", "[", "'train'", ",", "'unlabeled'", "]", ":", "\n", "                ", "label", "=", "d", "[", "\"label\"", "]", "\n", "", "if", "set_type", "==", "'unlabeled'", ":", "\n", "                ", "label", "=", "-", "1", "\n", "", "true", "=", "d", "[", "\"label\"", "]", "\n", "if", "i", "%", "2000", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "d", ")", "\n", "", "examples", ".", "append", "(", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "label", "=", "label", ",", "true", "=", "true", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.YoutubeProcessor.get_examples": [[316, 333], ["logger.info", "data_loader_new.YoutubeProcessor._create_examples", "data_loader_new.YoutubeProcessor.read_data", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.ChemprotProcessor._create_examples", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.ChemprotProcessor.read_data"], ["", "def", "get_examples", "(", "self", ",", "mode", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            mode: train, dev, test\n        \"\"\"", "\n", "file_to_read", "=", "None", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "file_to_read", "=", "self", ".", "args", ".", "train_file", "\n", "", "elif", "mode", "==", "'dev'", ":", "\n", "            ", "file_to_read", "=", "self", ".", "args", ".", "dev_file", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "file_to_read", "=", "self", ".", "args", ".", "test_file", "\n", "", "elif", "mode", "==", "'unlabeled'", ":", "\n", "            ", "file_to_read", "=", "self", ".", "args", ".", "unlabel_file", "\n", "\n", "", "logger", ".", "info", "(", "\"LOOKING AT {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data_dir", ",", "file_to_read", ")", ")", ")", "\n", "return", "self", ".", "_create_examples", "(", "self", ".", "read_data", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data_dir", ",", "file_to_read", ")", ",", "mode", ")", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.WiCProcessor.__init__": [[336, 343], ["range", "range", "range"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "rule", "=", "self", ".", "args", ".", "rule", "\n", "self", ".", "num_label", "=", "2", "\n", "self", ".", "relation_labels", "=", "[", "x", "for", "x", "in", "range", "(", "self", ".", "num_label", ")", "]", "\n", "self", ".", "label2id", "=", "{", "x", ":", "x", "for", "x", "in", "range", "(", "self", ".", "num_label", ")", "}", "\n", "self", ".", "id2label", "=", "{", "x", ":", "x", "for", "x", "in", "range", "(", "self", ".", "num_label", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.WiCProcessor.read_data": [[344, 349], ["open", "json.loads", "f.readlines"], "methods", ["None"], ["", "def", "read_data", "(", "self", ",", "filename", ",", "mode", ")", ":", "\n", "        ", "path", "=", "filename", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "data", "=", "[", "json", ".", "loads", "(", "l", ")", "for", "l", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.WiCProcessor._create_examples": [[350, 376], ["enumerate", "int", "int", "examples.append", "logger.info", "data_loader_new.WiCInputExample", "examples.append", "data_loader_new.WiCInputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "data", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "d", "[", "\"sentence1\"", "]", "\n", "text_b", "=", "d", "[", "\"sentence2\"", "]", "\n", "span_a", "=", "(", "d", "[", "\"start1\"", "]", ",", "d", "[", "\"end1\"", "]", ")", "\n", "span_b", "=", "(", "d", "[", "\"start2\"", "]", ",", "d", "[", "\"end2\"", "]", ")", "\n", "if", "set_type", "==", "'train'", "and", "self", ".", "rule", "==", "1", ":", "\n", "                ", "label", "=", "d", "[", "\"rule_label\"", "]", "\n", "", "elif", "set_type", "in", "[", "'unlabeled'", "]", ":", "\n", "                ", "label", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "label", "=", "d", "[", "'label'", "]", "\n", "", "label", "=", "int", "(", "label", ")", "\n", "true", "=", "int", "(", "d", "[", "\"label\"", "]", ")", "\n", "if", "i", "%", "2000", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "d", ")", "\n", "", "examples", ".", "append", "(", "WiCInputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "span_a", "=", "span_a", ",", "\n", "text_b", "=", "text_b", ",", "span_b", "=", "span_b", ",", "\n", "label", "=", "label", ",", "true", "=", "true", ")", ")", "\n", "if", "set_type", "==", "'train'", ":", "\n", "                ", "examples", ".", "append", "(", "WiCInputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_b", ",", "span_a", "=", "span_b", ",", "\n", "text_b", "=", "text_a", ",", "span_b", "=", "span_a", ",", "\n", "label", "=", "label", ",", "true", "=", "true", ")", ")", "\n", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.WiCProcessor.get_examples": [[377, 394], ["logger.info", "data_loader_new.WiCProcessor._create_examples", "data_loader_new.WiCProcessor.read_data", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.ChemprotProcessor._create_examples", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.ChemprotProcessor.read_data"], ["", "def", "get_examples", "(", "self", ",", "mode", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            mode: train, dev, test\n        \"\"\"", "\n", "file_to_read", "=", "None", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "file_to_read", "=", "self", ".", "args", ".", "train_file", "\n", "", "elif", "mode", "==", "'dev'", ":", "\n", "            ", "file_to_read", "=", "self", ".", "args", ".", "dev_file", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "file_to_read", "=", "self", ".", "args", ".", "test_file", "\n", "", "elif", "mode", "==", "'unlabeled'", ":", "\n", "            ", "file_to_read", "=", "self", ".", "args", ".", "unlabel_file", "\n", "\n", "", "logger", ".", "info", "(", "\"LOOKING AT {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data_dir", ",", "file_to_read", ")", ")", ")", "\n", "return", "self", ".", "_create_examples", "(", "self", ".", "read_data", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data_dir", ",", "file_to_read", ")", ",", "mode", ")", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.ChemprotProcessor.__init__": [[398, 405], ["range", "range", "range"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "rule", "=", "self", ".", "args", ".", "rule", "\n", "self", ".", "num_label", "=", "10", "\n", "self", ".", "relation_labels", "=", "[", "x", "for", "x", "in", "range", "(", "self", ".", "num_label", ")", "]", "\n", "self", ".", "label2id", "=", "{", "x", ":", "x", "for", "x", "in", "range", "(", "self", ".", "num_label", ")", "}", "\n", "self", ".", "id2label", "=", "{", "x", ":", "x", "for", "x", "in", "range", "(", "self", ".", "num_label", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.ChemprotProcessor.read_data": [[406, 411], ["open", "json.loads", "f.readlines"], "methods", ["None"], ["", "def", "read_data", "(", "self", ",", "filename", ",", "mode", ")", ":", "\n", "        ", "path", "=", "filename", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "data", "=", "[", "json", ".", "loads", "(", "l", ")", "for", "l", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.ChemprotProcessor._create_examples": [[412, 435], ["enumerate", "int", "max", "int", "max", "examples.append", "logger.info", "data_loader_new.ReInputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "data", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "d", "[", "\"text\"", "]", "\n", "span_a", "=", "(", "d", "[", "\"start1\"", "]", ",", "d", "[", "\"end1\"", "]", ")", "\n", "span_b", "=", "(", "d", "[", "\"start2\"", "]", ",", "d", "[", "\"end2\"", "]", ")", "\n", "assert", "d", "[", "\"start1\"", "]", ">=", "0", "and", "d", "[", "\"start2\"", "]", ">=", "0", "\n", "if", "set_type", "==", "'train'", "and", "self", ".", "rule", "==", "1", ":", "\n", "                ", "label", "=", "d", "[", "\"major\"", "]", "\n", "", "elif", "set_type", "in", "[", "'unlabeled'", "]", ":", "\n", "                ", "label", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "label", "=", "d", "[", "'label'", "]", "\n", "", "label", "=", "int", "(", "label", ")", "\n", "label", "=", "max", "(", "label", "-", "1", ",", "0", ")", "\n", "true", "=", "int", "(", "d", "[", "\"label\"", "]", ")", "\n", "true", "=", "max", "(", "true", "-", "1", ",", "0", ")", "\n", "if", "i", "%", "2000", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "d", ")", "\n", "", "examples", ".", "append", "(", "ReInputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "span_a", "=", "span_a", ",", "\n", "span_b", "=", "span_b", ",", "label", "=", "label", ",", "true", "=", "true", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.ChemprotProcessor.get_examples": [[436, 453], ["logger.info", "data_loader_new.ChemprotProcessor._create_examples", "data_loader_new.ChemprotProcessor.read_data", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.ChemprotProcessor._create_examples", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.ChemprotProcessor.read_data"], ["", "def", "get_examples", "(", "self", ",", "mode", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            mode: train, dev, test\n        \"\"\"", "\n", "file_to_read", "=", "None", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "file_to_read", "=", "self", ".", "args", ".", "train_file", "\n", "", "elif", "mode", "==", "'dev'", ":", "\n", "            ", "file_to_read", "=", "self", ".", "args", ".", "dev_file", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "file_to_read", "=", "self", ".", "args", ".", "test_file", "\n", "", "elif", "mode", "==", "'unlabeled'", ":", "\n", "            ", "file_to_read", "=", "self", ".", "args", ".", "unlabel_file", "\n", "\n", "", "logger", ".", "info", "(", "\"LOOKING AT {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data_dir", ",", "file_to_read", ")", ")", ")", "\n", "return", "self", ".", "_create_examples", "(", "self", ".", "read_data", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data_dir", ",", "file_to_read", ")", ",", "mode", ")", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.tokenize_with_span": [[467, 473], ["tokenizer.tokenize", "tokenizer.tokenize", "tokenizer.tokenize", "len", "len", "len"], "function", ["None"], ["def", "tokenize_with_span", "(", "tokenizer", ",", "sent", ",", "span", ")", ":", "\n", "    ", "_a", "=", "tokenizer", ".", "tokenize", "(", "sent", "[", ":", "span", "[", "0", "]", "]", ")", "\n", "_w", "=", "tokenizer", ".", "tokenize", "(", "sent", "[", "span", "[", "0", "]", ":", "span", "[", "1", "]", "]", ")", "\n", "_b", "=", "tokenizer", ".", "tokenize", "(", "sent", "[", "span", "[", "1", "]", ":", "]", ")", "\n", "\n", "return", "_a", "+", "_w", "+", "_b", ",", "len", "(", "_a", ")", ",", "len", "(", "_a", ")", "+", "len", "(", "_w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.tokenize_with_2span": [[474, 499], ["tokenizer.tokenize", "tokenizer.tokenize", "tokenizer.tokenize", "tokenizer.tokenize", "tokenizer.tokenize", "tokenizer.tokenize", "tokenizer.tokenize", "tokenizer.tokenize", "tokenizer.tokenize", "tokenizer.tokenize", "ipdb.set_trace", "len", "ipdb.set_trace", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "tokenize_with_2span", "(", "tokenizer", ",", "sent", ",", "span_a", ",", "span_b", ")", ":", "\n", "    ", "assert", "span_a", "[", "1", "]", "<=", "span_b", "[", "0", "]", "or", "span_a", "[", "0", "]", ">=", "span_b", "[", "1", "]", "\n", "\n", "if", "span_a", "[", "1", "]", "<=", "span_b", "[", "0", "]", ":", "\n", "        ", "_s0", "=", "tokenizer", ".", "tokenize", "(", "sent", "[", ":", "span_a", "[", "0", "]", "]", ")", "\n", "_wa", "=", "tokenizer", ".", "tokenize", "(", "sent", "[", "span_a", "[", "0", "]", ":", "span_a", "[", "1", "]", "]", ")", "\n", "_s1", "=", "tokenizer", ".", "tokenize", "(", "sent", "[", "span_a", "[", "1", "]", ":", "span_b", "[", "0", "]", "]", ")", "\n", "_wb", "=", "tokenizer", ".", "tokenize", "(", "sent", "[", "span_b", "[", "0", "]", ":", "span_b", "[", "1", "]", "]", ")", "\n", "_s2", "=", "tokenizer", ".", "tokenize", "(", "sent", "[", "span_b", "[", "1", "]", ":", "]", ")", "\n", "if", "not", "(", "len", "(", "_wa", ")", ">", "0", "and", "len", "(", "_wb", ")", ">", "0", ")", ":", "\n", "            ", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "", "return", "_s0", "+", "_wa", "+", "_s1", "+", "_wb", "+", "_s2", ",", "len", "(", "_s0", ")", ",", "len", "(", "_s0", ")", "+", "len", "(", "_wa", ")", ",", "len", "(", "_s0", ")", "+", "len", "(", "_wa", ")", "+", "len", "(", "_s1", ")", ",", "len", "(", "_s0", ")", "+", "len", "(", "_wa", ")", "+", "len", "(", "_s1", ")", "+", "len", "(", "_wb", ")", "\n", "", "else", ":", "\n", "        ", "_s0", "=", "tokenizer", ".", "tokenize", "(", "sent", "[", ":", "span_b", "[", "0", "]", "]", ")", "\n", "_wb", "=", "tokenizer", ".", "tokenize", "(", "sent", "[", "span_b", "[", "0", "]", ":", "span_b", "[", "1", "]", "]", ")", "\n", "_s1", "=", "tokenizer", ".", "tokenize", "(", "sent", "[", "span_b", "[", "1", "]", ":", "span_a", "[", "0", "]", "]", ")", "\n", "_wa", "=", "tokenizer", ".", "tokenize", "(", "sent", "[", "span_a", "[", "0", "]", ":", "span_a", "[", "1", "]", "]", ")", "\n", "_s2", "=", "tokenizer", ".", "tokenize", "(", "sent", "[", "span_a", "[", "1", "]", ":", "]", ")", "\n", "if", "not", "(", "len", "(", "_wa", ")", ">", "0", "and", "len", "(", "_wb", ")", ">", "0", ")", ":", "\n", "            ", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "", "return", "_s0", "+", "_wb", "+", "_s1", "+", "_wa", "+", "_s2", ",", "len", "(", "_s0", ")", "+", "len", "(", "_wb", ")", "+", "len", "(", "_s1", ")", ",", "len", "(", "_s0", ")", "+", "len", "(", "_wb", ")", "+", "len", "(", "_s1", ")", "+", "len", "(", "_wa", ")", ",", "len", "(", "_s0", ")", ",", "len", "(", "_s0", ")", "+", "len", "(", "_wb", ")", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.convert_examples_to_features_re": [[503, 587], ["enumerate", "data_loader_new.tokenize_with_2span", "tokenizer.convert_tokens_to_ids", "int", "int", "features.append", "logger.info", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "data_loader_new.InputFeatures", "logger.info", "logger.info", "len", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.tokenize_with_2span"], ["", "", "def", "convert_examples_to_features_re", "(", "examples", ",", "max_seq_len", ",", "tokenizer", ",", "\n", "cls_token", "=", "'[CLS]'", ",", "\n", "cls_token_segment_id", "=", "0", ",", "\n", "sep_token", "=", "'[SEP]'", ",", "\n", "pad_token", "=", "0", ",", "\n", "pad_token_segment_id", "=", "0", ",", "\n", "sequence_a_segment_id", "=", "0", ",", "\n", "sequence_b_segment_id", "=", "1", ",", "\n", "add_sep_token", "=", "False", ",", "\n", "mask_padding_with_zero", "=", "True", ",", "\n", "task", "=", "'re'", "\n", ")", ":", "\n", "    ", "features", "=", "[", "]", "\n", "sample_per_example", "=", "3", "\n", "for", "(", "ex_index", ",", "example", ")", "in", "enumerate", "(", "examples", "[", ":", "]", ")", ":", "\n", "        ", "if", "ex_index", "%", "5000", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Writing example %d of %d\"", "%", "(", "ex_index", ",", "len", "(", "examples", ")", ")", ")", "\n", "", "tokens_a", ",", "key_a_start", ",", "key_a_end", ",", "key_b_start", ",", "key_b_end", "=", "tokenize_with_2span", "(", "tokenizer", ",", "example", ".", "text_a", ",", "example", ".", "span_a", ",", "example", ".", "span_b", ")", "\n", "keys", "=", "[", "0", "]", "*", "len", "(", "tokens_a", ")", "\n", "keys", "[", "key_a_start", ":", "key_a_end", "]", "=", "[", "1", "]", "*", "(", "key_a_end", "-", "key_a_start", ")", "\n", "keys", "[", "key_b_start", ":", "key_b_end", "]", "=", "[", "2", "]", "*", "(", "key_b_end", "-", "key_b_start", ")", "\n", "\n", "if", "add_sep_token", ":", "\n", "            ", "tokens_a", "+=", "[", "sep_token", "]", "\n", "keys", "+=", "[", "0", "]", "\n", "", "token_type_ids_a", "=", "[", "sequence_a_segment_id", "]", "*", "len", "(", "tokens_a", ")", "\n", "\n", "tokens", "=", "[", "cls_token", "]", "+", "tokens_a", "\n", "keys", "=", "[", "0", "]", "+", "keys", "\n", "token_type_ids", "=", "[", "cls_token_segment_id", "]", "+", "token_type_ids_a", "\n", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n", "# The mask has 1 for real tokens and 0 for padding tokens. Only real", "\n", "# tokens are attended to.", "\n", "attention_mask", "=", "[", "1", "if", "mask_padding_with_zero", "else", "0", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "masked_lm_labels", "=", "[", "]", "\n", "\n", "\n", "# Zero-pad up to the sequence length.", "\n", "padding_length", "=", "max_seq_len", "-", "len", "(", "input_ids", ")", "\n", "input_ids", "=", "input_ids", "+", "(", "[", "pad_token", "]", "*", "padding_length", ")", "\n", "attention_mask", "=", "attention_mask", "+", "(", "[", "0", "if", "mask_padding_with_zero", "else", "1", "]", "*", "padding_length", ")", "\n", "token_type_ids", "=", "token_type_ids", "+", "(", "[", "pad_token_segment_id", "]", "*", "padding_length", ")", "\n", "keys", "=", "keys", "+", "(", "[", "0", "]", "*", "padding_length", ")", "\n", "\n", "assert", "len", "(", "input_ids", ")", "==", "max_seq_len", ",", "\"Error with input length {} vs {}\"", ".", "format", "(", "len", "(", "input_ids", ")", ",", "max_seq_len", ")", "\n", "assert", "len", "(", "keys", ")", "==", "max_seq_len", ",", "\"Error with input length {} vs {}\"", ".", "format", "(", "len", "(", "keys", ")", ",", "max_seq_len", ")", "\n", "assert", "len", "(", "attention_mask", ")", "==", "max_seq_len", ",", "\"Error with attention mask length {} vs {}\"", ".", "format", "(", "len", "(", "attention_mask", ")", ",", "max_seq_len", ")", "\n", "assert", "len", "(", "token_type_ids", ")", "==", "max_seq_len", ",", "\"Error with token type length {} vs {}\"", ".", "format", "(", "len", "(", "token_type_ids", ")", ",", "max_seq_len", ")", "\n", "\n", "\n", "label_id", "=", "int", "(", "example", ".", "label", ")", "\n", "true", "=", "int", "(", "example", ".", "true", ")", "\n", "e1_mask", "=", "[", "1", "if", "k", "==", "1", "else", "0", "for", "k", "in", "keys", "]", "\n", "e2_mask", "=", "[", "1", "if", "k", "==", "2", "else", "0", "for", "k", "in", "keys", "]", "\n", "\n", "if", "ex_index", "<", "1", ":", "\n", "            ", "logger", ".", "info", "(", "\"*** Example ***\"", ")", "\n", "logger", ".", "info", "(", "\"guid: %s\"", "%", "example", ".", "guid", ")", "\n", "logger", ".", "info", "(", "\"tokens: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "tokens", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"input_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "input_ids", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"attention_mask: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "attention_mask", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"token_type_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "token_type_ids", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"label: %s (id = %d)\"", "%", "(", "example", ".", "label", ",", "label_id", ")", ")", "\n", "if", "task", "==", "'re'", ":", "\n", "                ", "logger", ".", "info", "(", "\"e1_mask: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "e1_mask", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"e2_mask: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "e2_mask", "]", ")", ")", "\n", "#assert 0", "\n", "", "", "features", ".", "append", "(", "\n", "InputFeatures", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "e1_mask", "=", "e1_mask", ",", "\n", "e2_mask", "=", "e2_mask", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "label_id", "=", "label_id", ",", "\n", "true", "=", "true", ",", "\n", ")", "\n", ")", "\n", "\n", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.convert_examples_to_features_wic": [[588, 674], ["enumerate", "data_loader_new.tokenize_with_span", "data_loader_new.tokenize_with_span", "tokenizer.convert_tokens_to_ids", "int", "int", "features.append", "logger.info", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "data_loader_new.InputFeatures", "logger.info", "logger.info", "len", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.tokenize_with_span", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.tokenize_with_span"], ["", "def", "convert_examples_to_features_wic", "(", "examples", ",", "max_seq_len", ",", "tokenizer", ",", "\n", "cls_token", "=", "'[CLS]'", ",", "\n", "cls_token_segment_id", "=", "0", ",", "\n", "sep_token", "=", "'[SEP]'", ",", "\n", "pad_token", "=", "0", ",", "\n", "pad_token_segment_id", "=", "0", ",", "\n", "sequence_a_segment_id", "=", "0", ",", "\n", "sequence_b_segment_id", "=", "1", ",", "\n", "add_sep_token", "=", "False", ",", "\n", "mask_padding_with_zero", "=", "True", ",", "\n", "task", "=", "'re'", "\n", ")", ":", "\n", "    ", "features", "=", "[", "]", "\n", "sample_per_example", "=", "3", "\n", "for", "(", "ex_index", ",", "example", ")", "in", "enumerate", "(", "examples", "[", ":", "]", ")", ":", "\n", "        ", "if", "ex_index", "%", "5000", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Writing example %d of %d\"", "%", "(", "ex_index", ",", "len", "(", "examples", ")", ")", ")", "\n", "", "tokens_a", ",", "key_a_start", ",", "key_a_end", "=", "tokenize_with_span", "(", "tokenizer", ",", "example", ".", "text_a", ",", "example", ".", "span_a", ")", "\n", "tokens_b", ",", "key_b_start", ",", "key_b_end", "=", "tokenize_with_span", "(", "tokenizer", ",", "example", ".", "text_b", ",", "example", ".", "span_b", ")", "\n", "keys_a", "=", "[", "0", "]", "*", "len", "(", "tokens_a", ")", "\n", "keys_a", "[", "key_a_start", ":", "key_a_end", "]", "=", "[", "1", "]", "*", "(", "key_a_end", "-", "key_a_start", ")", "\n", "keys_b", "=", "[", "0", "]", "*", "len", "(", "tokens_b", ")", "\n", "keys_b", "[", "key_b_start", ":", "key_b_end", "]", "=", "[", "2", "]", "*", "(", "key_b_end", "-", "key_b_start", ")", "\n", "\n", "if", "add_sep_token", ":", "\n", "            ", "tokens_a", "+=", "[", "sep_token", "]", "\n", "keys_a", "+=", "[", "0", "]", "\n", "tokens_b", "+=", "[", "sep_token", "]", "\n", "keys_b", "+=", "[", "0", "]", "\n", "", "token_type_ids_a", "=", "[", "sequence_a_segment_id", "]", "*", "len", "(", "tokens_a", ")", "\n", "token_type_ids_b", "=", "[", "sequence_b_segment_id", "]", "*", "len", "(", "tokens_b", ")", "\n", "\n", "tokens", "=", "[", "cls_token", "]", "+", "tokens_a", "+", "tokens_b", "\n", "keys", "=", "[", "0", "]", "+", "keys_a", "+", "keys_b", "\n", "token_type_ids", "=", "[", "cls_token_segment_id", "]", "+", "token_type_ids_a", "+", "token_type_ids_b", "\n", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n", "# The mask has 1 for real tokens and 0 for padding tokens. Only real", "\n", "# tokens are attended to.", "\n", "attention_mask", "=", "[", "1", "if", "mask_padding_with_zero", "else", "0", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "masked_lm_labels", "=", "[", "]", "\n", "\n", "\n", "# Zero-pad up to the sequence length.", "\n", "padding_length", "=", "max_seq_len", "-", "len", "(", "input_ids", ")", "\n", "input_ids", "=", "input_ids", "+", "(", "[", "pad_token", "]", "*", "padding_length", ")", "\n", "attention_mask", "=", "attention_mask", "+", "(", "[", "0", "if", "mask_padding_with_zero", "else", "1", "]", "*", "padding_length", ")", "\n", "token_type_ids", "=", "token_type_ids", "+", "(", "[", "pad_token_segment_id", "]", "*", "padding_length", ")", "\n", "keys", "=", "keys", "+", "(", "[", "0", "]", "*", "padding_length", ")", "\n", "\n", "assert", "len", "(", "input_ids", ")", "==", "max_seq_len", ",", "\"Error with input length {} vs {}\"", ".", "format", "(", "len", "(", "input_ids", ")", ",", "max_seq_len", ")", "\n", "assert", "len", "(", "keys", ")", "==", "max_seq_len", ",", "\"Error with input length {} vs {}\"", ".", "format", "(", "len", "(", "keys", ")", ",", "max_seq_len", ")", "\n", "assert", "len", "(", "attention_mask", ")", "==", "max_seq_len", ",", "\"Error with attention mask length {} vs {}\"", ".", "format", "(", "len", "(", "attention_mask", ")", ",", "max_seq_len", ")", "\n", "assert", "len", "(", "token_type_ids", ")", "==", "max_seq_len", ",", "\"Error with token type length {} vs {}\"", ".", "format", "(", "len", "(", "token_type_ids", ")", ",", "max_seq_len", ")", "\n", "\n", "\n", "label_id", "=", "int", "(", "example", ".", "label", ")", "\n", "true", "=", "int", "(", "example", ".", "true", ")", "\n", "\n", "if", "ex_index", "<", "1", ":", "\n", "            ", "logger", ".", "info", "(", "\"*** Example ***\"", ")", "\n", "logger", ".", "info", "(", "\"guid: %s\"", "%", "example", ".", "guid", ")", "\n", "logger", ".", "info", "(", "\"tokens: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "tokens", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"input_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "input_ids", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"attention_mask: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "attention_mask", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"token_type_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "token_type_ids", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"label: %s (id = %d)\"", "%", "(", "example", ".", "label", ",", "label_id", ")", ")", "\n", "if", "task", "==", "'re'", ":", "\n", "                ", "logger", ".", "info", "(", "\"e1_mask: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "e1_mask", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"e2_mask: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "e2_mask", "]", ")", ")", "\n", "#assert 0", "\n", "\n", "", "", "features", ".", "append", "(", "\n", "InputFeatures", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "keys", "=", "keys", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "label_id", "=", "label_id", ",", "\n", "true", "=", "true", ",", "\n", ")", "\n", ")", "\n", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.convert_examples_to_features": [[675, 792], ["enumerate", "tokenizer.tokenize", "tokenizer.convert_tokens_to_ids", "int", "int", "features.append", "logger.info", "tokenizer.tokenize.index", "tokenizer.tokenize.index", "tokenizer.tokenize.index", "tokenizer.tokenize.index", "len", "len", "len", "len", "range", "range", "len", "len", "len", "len", "len", "len", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "data_loader_new.InputFeatures", "len", "len", "logger.info", "logger.info", "len", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "convert_examples_to_features", "(", "examples", ",", "max_seq_len", ",", "tokenizer", ",", "\n", "cls_token", "=", "'[CLS]'", ",", "\n", "cls_token_segment_id", "=", "0", ",", "\n", "sep_token", "=", "'[SEP]'", ",", "\n", "pad_token", "=", "0", ",", "\n", "pad_token_segment_id", "=", "0", ",", "\n", "sequence_a_segment_id", "=", "0", ",", "\n", "add_sep_token", "=", "False", ",", "\n", "mask_padding_with_zero", "=", "True", ",", "\n", "task", "=", "'re'", "\n", ")", ":", "\n", "    ", "features", "=", "[", "]", "\n", "sample_per_example", "=", "3", "\n", "for", "(", "ex_index", ",", "example", ")", "in", "enumerate", "(", "examples", "[", ":", "]", ")", ":", "\n", "        ", "if", "ex_index", "%", "5000", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Writing example %d of %d\"", "%", "(", "ex_index", ",", "len", "(", "examples", ")", ")", ")", "\n", "#print(example.text_a)", "\n", "", "tokens_a", "=", "tokenizer", ".", "tokenize", "(", "example", ".", "text_a", ")", "\n", "#print(tokens_a)", "\n", "if", "task", "==", "'re'", ":", "\n", "\n", "            ", "e11_p", "=", "tokens_a", ".", "index", "(", "\"<e1>\"", ")", "# the start position of entity1", "\n", "e12_p", "=", "tokens_a", ".", "index", "(", "\"</e1>\"", ")", "# the end position of entity1", "\n", "e21_p", "=", "tokens_a", ".", "index", "(", "\"<e2>\"", ")", "# the start position of entity2", "\n", "e22_p", "=", "tokens_a", ".", "index", "(", "\"</e2>\"", ")", "# the end position of entity2", "\n", "\n", "# Replace the token", "\n", "tokens_a", "[", "e11_p", "]", "=", "\"$\"", "\n", "tokens_a", "[", "e12_p", "]", "=", "\"$\"", "\n", "tokens_a", "[", "e21_p", "]", "=", "\"#\"", "\n", "tokens_a", "[", "e22_p", "]", "=", "\"#\"", "\n", "\n", "# Add 1 because of the [CLS] token", "\n", "e11_p", "+=", "1", "\n", "e12_p", "+=", "1", "\n", "e21_p", "+=", "1", "\n", "e22_p", "+=", "1", "\n", "\n", "# Account for [CLS] and [SEP] with \"- 2\" and with \"- 3\" for RoBERTa.", "\n", "", "if", "add_sep_token", ":", "\n", "            ", "special_tokens_count", "=", "2", "\n", "", "else", ":", "\n", "            ", "special_tokens_count", "=", "1", "\n", "", "if", "len", "(", "tokens_a", ")", ">", "max_seq_len", "-", "special_tokens_count", ":", "\n", "            ", "tokens_a", "=", "tokens_a", "[", ":", "(", "max_seq_len", "-", "special_tokens_count", ")", "]", "\n", "\n", "", "tokens", "=", "tokens_a", "\n", "if", "add_sep_token", ":", "\n", "            ", "tokens", "+=", "[", "sep_token", "]", "\n", "\n", "", "token_type_ids", "=", "[", "sequence_a_segment_id", "]", "*", "len", "(", "tokens", ")", "\n", "\n", "tokens", "=", "[", "cls_token", "]", "+", "tokens", "\n", "token_type_ids", "=", "[", "cls_token_segment_id", "]", "+", "token_type_ids", "\n", "#tokens[0] = \"$\"", "\n", "#tokens[1] = \"<e2>\"", "\n", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "masked_lm_labels", "=", "[", "]", "\n", "\n", "\n", "# The mask has 1 for real tokens and 0 for padding tokens. Only real", "\n", "# tokens are attended to.", "\n", "attention_mask", "=", "[", "1", "if", "mask_padding_with_zero", "else", "0", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "# Zero-pad up to the sequence length.", "\n", "padding_length", "=", "max_seq_len", "-", "len", "(", "input_ids", ")", "\n", "input_ids", "=", "input_ids", "+", "(", "[", "pad_token", "]", "*", "padding_length", ")", "\n", "attention_mask", "=", "attention_mask", "+", "(", "[", "0", "if", "mask_padding_with_zero", "else", "1", "]", "*", "padding_length", ")", "\n", "token_type_ids", "=", "token_type_ids", "+", "(", "[", "pad_token_segment_id", "]", "*", "padding_length", ")", "\n", "\n", "\n", "#assert 0", "\n", "if", "task", "==", "'re'", ":", "\n", "# e1 mask, e2 mask", "\n", "            ", "e1_mask", "=", "[", "0", "]", "*", "len", "(", "attention_mask", ")", "\n", "e2_mask", "=", "[", "0", "]", "*", "len", "(", "attention_mask", ")", "\n", "\n", "for", "i", "in", "range", "(", "e11_p", ",", "e12_p", "+", "1", ")", ":", "\n", "                ", "e1_mask", "[", "i", "]", "=", "1", "\n", "", "for", "i", "in", "range", "(", "e21_p", ",", "e22_p", "+", "1", ")", ":", "\n", "                ", "e2_mask", "[", "i", "]", "=", "1", "\n", "\n", "", "", "assert", "len", "(", "input_ids", ")", "==", "max_seq_len", ",", "\"Error with input length {} vs {}\"", ".", "format", "(", "len", "(", "input_ids", ")", ",", "max_seq_len", ")", "\n", "assert", "len", "(", "attention_mask", ")", "==", "max_seq_len", ",", "\"Error with attention mask length {} vs {}\"", ".", "format", "(", "len", "(", "attention_mask", ")", ",", "max_seq_len", ")", "\n", "assert", "len", "(", "token_type_ids", ")", "==", "max_seq_len", ",", "\"Error with token type length {} vs {}\"", ".", "format", "(", "len", "(", "token_type_ids", ")", ",", "max_seq_len", ")", "\n", "\n", "label_id", "=", "int", "(", "example", ".", "label", ")", "\n", "true", "=", "int", "(", "example", ".", "true", ")", "\n", "\n", "if", "ex_index", "<", "1", ":", "\n", "            ", "logger", ".", "info", "(", "\"*** Example ***\"", ")", "\n", "logger", ".", "info", "(", "\"guid: %s\"", "%", "example", ".", "guid", ")", "\n", "logger", ".", "info", "(", "\"tokens: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "tokens", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"input_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "input_ids", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"attention_mask: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "attention_mask", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"token_type_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "token_type_ids", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"label: %s (id = %d)\"", "%", "(", "example", ".", "label", ",", "label_id", ")", ")", "\n", "if", "task", "==", "'re'", ":", "\n", "                ", "logger", ".", "info", "(", "\"e1_mask: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "e1_mask", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"e2_mask: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "e2_mask", "]", ")", ")", "\n", "#assert 0", "\n", "\n", "", "", "features", ".", "append", "(", "\n", "InputFeatures", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "label_id", "=", "label_id", ",", "\n", "true", "=", "true", ",", "\n", "e1_mask", "=", "e1_mask", "if", "task", "==", "'re'", "else", "None", ",", "\n", "e2_mask", "=", "e2_mask", "if", "task", "==", "'re'", "else", "None", "\n", ")", "\n", ")", "\n", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.load_and_cache_examples": [[794, 860], ["os.path.join", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "os.path.exists", "logger.info", "torch.load", "logger.info", "logger.info", "torch.save", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "list().pop", "processor.get_examples", "data_loader_new.convert_examples_to_features_wic", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "processor.get_examples", "data_loader_new.convert_examples_to_features_re", "data_loader_new.convert_examples_to_features", "enumerate", "list", "processor.get_examples", "Exception", "filter", "args.model_name_or_path.split"], "function", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.ChemprotProcessor.get_examples", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.convert_examples_to_features_wic", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.ChemprotProcessor.get_examples", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.convert_examples_to_features_re", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.convert_examples_to_features", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.ChemprotProcessor.get_examples"], ["", "def", "load_and_cache_examples", "(", "args", ",", "tokenizer", ",", "mode", ")", ":", "\n", "    ", "if", "'imdb'", "in", "args", ".", "task", ":", "\n", "        ", "processor", "=", "processors", "[", "\"imdb\"", "]", "(", "args", ")", "\n", "", "elif", "'trec'", "in", "args", ".", "task", ":", "\n", "        ", "processor", "=", "processors", "[", "\"TREC\"", "]", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "processor", "=", "processors", "[", "args", ".", "task", "]", "(", "args", ")", "\n", "# Load data features from cache or dataset file", "\n", "", "cached_features_file", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "data_dir", ",", "\n", "'cached_{}_{}_{}_{}_{}'", ".", "format", "(", "\n", "mode", ",", "\n", "args", ".", "task", ",", "\n", "list", "(", "filter", "(", "None", ",", "args", ".", "model_name_or_path", ".", "split", "(", "\"/\"", ")", ")", ")", ".", "pop", "(", ")", ",", "\n", "args", ".", "max_seq_len", ",", "\n", "'dist'", "if", "args", ".", "rule", "==", "1", "else", "'clean'", "\n", ")", "\n", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "cached_features_file", ")", "and", "args", ".", "auto_load", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading features from cached file %s\"", ",", "cached_features_file", ")", "\n", "features", "=", "torch", ".", "load", "(", "cached_features_file", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"Creating features from dataset file at %s\"", ",", "args", ".", "data_dir", ")", "\n", "if", "mode", "==", "\"train\"", ":", "\n", "            ", "examples", "=", "processor", ".", "get_examples", "(", "\"train\"", ")", "\n", "", "elif", "mode", "==", "\"dev\"", ":", "\n", "            ", "examples", "=", "processor", ".", "get_examples", "(", "\"dev\"", ")", "\n", "", "elif", "mode", "==", "\"test\"", ":", "\n", "            ", "examples", "=", "processor", ".", "get_examples", "(", "\"test\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"For mode, Only train, dev, test is available\"", ")", "\n", "\n", "", "if", "args", ".", "task_type", "==", "'wic'", ":", "\n", "            ", "features", ",", "=", "convert_examples_to_features_wic", "(", "examples", ",", "args", ".", "max_seq_len", ",", "tokenizer", ",", "add_sep_token", "=", "args", ".", "add_sep_token", ",", "task", "=", "args", ".", "task_type", ")", "\n", "", "elif", "args", ".", "task_type", "==", "'re'", ":", "\n", "            ", "features", "=", "convert_examples_to_features_re", "(", "examples", ",", "args", ".", "max_seq_len", ",", "tokenizer", ",", "add_sep_token", "=", "args", ".", "add_sep_token", ",", "task", "=", "args", ".", "task_type", ")", "\n", "", "else", ":", "\n", "            ", "features", "=", "convert_examples_to_features", "(", "examples", ",", "args", ".", "max_seq_len", ",", "tokenizer", ",", "add_sep_token", "=", "args", ".", "add_sep_token", ",", "task", "=", "args", ".", "task_type", ")", "\n", "", "logger", ".", "info", "(", "\"Saving features into cached file %s\"", ",", "cached_features_file", ")", "\n", "torch", ".", "save", "(", "features", ",", "cached_features_file", ")", "\n", "\n", "# Convert to Tensors and build dataset", "\n", "", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_attention_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "attention_mask", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_token_type_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "token_type_ids", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_id", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_true_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "true", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_ids", "=", "torch", ".", "tensor", "(", "[", "_", "for", "_", ",", "f", "in", "enumerate", "(", "features", ")", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "size", "=", "len", "(", "features", ")", "\n", "\n", "\n", "if", "args", ".", "task_type", "==", "'re'", ":", "\n", "        ", "all_e1_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "e1_mask", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "# add e1 mask", "\n", "all_e2_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "e2_mask", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "# add e2 mask", "\n", "dataset", "=", "TensorDataset", "(", "all_input_ids", ",", "all_attention_mask", ",", "\n", "all_token_type_ids", ",", "all_label_ids", ",", "all_e1_mask", ",", "all_e2_mask", ")", "\n", "", "elif", "args", ".", "task_type", "==", "'wic'", ":", "\n", "        ", "all_keys", "=", "torch", ".", "tensor", "(", "[", "f", ".", "keys", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "dataset", "=", "TensorDataset", "(", "all_input_ids", ",", "all_attention_mask", ",", "\n", "all_token_type_ids", ",", "all_label_ids", ",", "all_ids", ",", "all_true_ids", ",", "all_keys", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "TensorDataset", "(", "all_input_ids", ",", "all_attention_mask", ",", "\n", "all_token_type_ids", ",", "all_label_ids", ",", "all_ids", ",", "all_true_ids", ")", "\n", "", "return", "dataset", ",", "processor", ".", "relation_labels", ",", "processor", ".", "num_label", ",", "processor", ".", "id2label", ",", "processor", ".", "label2id", ",", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.load_and_cache_unlabeled_examples": [[862, 923], ["os.path.join", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "os.path.exists", "logger.info", "torch.load", "logger.info", "processor.get_examples", "logger.info", "torch.save", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "len", "list().pop", "data_loader_new.convert_examples_to_features_wic", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "data_loader_new.convert_examples_to_features_re", "data_loader_new.convert_examples_to_features", "enumerate", "list", "filter", "args.model_name_or_path.split"], "function", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.ChemprotProcessor.get_examples", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.convert_examples_to_features_wic", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.convert_examples_to_features_re", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.convert_examples_to_features"], ["", "def", "load_and_cache_unlabeled_examples", "(", "args", ",", "tokenizer", ",", "mode", ",", "train_size", "=", "100", ")", ":", "\n", "    ", "if", "'imdb'", "in", "args", ".", "task", ":", "\n", "        ", "processor", "=", "processors", "[", "\"imdb\"", "]", "(", "args", ")", "\n", "", "elif", "'trec'", "in", "args", ".", "task", ":", "\n", "        ", "processor", "=", "processors", "[", "\"TREC\"", "]", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "processor", "=", "processors", "[", "args", ".", "task", "]", "(", "args", ")", "\n", "\n", "# Load data features from cache or dataset file", "\n", "", "cached_features_file", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "data_dir", ",", "\n", "'cached_{}_{}_{}_{}_unlabel_{}'", ".", "format", "(", "\n", "mode", ",", "\n", "args", ".", "task", ",", "\n", "list", "(", "filter", "(", "None", ",", "args", ".", "model_name_or_path", ".", "split", "(", "\"/\"", ")", ")", ")", ".", "pop", "(", ")", ",", "\n", "args", ".", "max_seq_len", ",", "\n", "'dist'", "if", "args", ".", "rule", "==", "1", "else", "'clean'", "\n", ")", "\n", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "cached_features_file", ")", "and", "args", ".", "auto_load", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading features from cached file %s\"", ",", "cached_features_file", ")", "\n", "features", "=", "torch", ".", "load", "(", "cached_features_file", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"Creating features from dataset file at %s\"", ",", "args", ".", "data_dir", ")", "\n", "\n", "assert", "mode", "==", "\"unlabeled\"", "\n", "examples", "=", "processor", ".", "get_examples", "(", "\"unlabeled\"", ")", "\n", "if", "args", ".", "task_type", "==", "'wic'", ":", "\n", "            ", "features", "=", "convert_examples_to_features_wic", "(", "examples", ",", "args", ".", "max_seq_len", ",", "tokenizer", ",", "add_sep_token", "=", "args", ".", "add_sep_token", ",", "task", "=", "args", ".", "task_type", ")", "\n", "", "elif", "args", ".", "task_type", "==", "'re'", ":", "\n", "            ", "features", "=", "convert_examples_to_features_re", "(", "examples", ",", "args", ".", "max_seq_len", ",", "tokenizer", ",", "add_sep_token", "=", "args", ".", "add_sep_token", ",", "task", "=", "args", ".", "task_type", ")", "\n", "", "else", ":", "\n", "            ", "features", "=", "convert_examples_to_features", "(", "examples", ",", "args", ".", "max_seq_len", ",", "tokenizer", ",", "add_sep_token", "=", "args", ".", "add_sep_token", ",", "task", "=", "args", ".", "task_type", ")", "\n", "", "logger", ".", "info", "(", "\"Saving features into cached file %s\"", ",", "cached_features_file", ")", "\n", "torch", ".", "save", "(", "features", ",", "cached_features_file", ")", "\n", "\n", "# Convert to Tensors and build dataset", "\n", "", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_attention_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "attention_mask", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_token_type_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "token_type_ids", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_id", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_true_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "true", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_ids", "=", "torch", ".", "tensor", "(", "[", "_", "+", "train_size", "for", "_", ",", "f", "in", "enumerate", "(", "features", ")", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "\n", "if", "args", ".", "task_type", "==", "'re'", ":", "\n", "        ", "all_e1_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "e1_mask", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "# add e1 mask", "\n", "all_e2_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "e2_mask", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "# add e2 mask", "\n", "dataset", "=", "TensorDataset", "(", "all_input_ids", ",", "all_attention_mask", ",", "\n", "all_token_type_ids", ",", "all_label_ids", ",", "all_e1_mask", ",", "all_e2_mask", ")", "\n", "", "elif", "args", ".", "task_type", "==", "'wic'", ":", "\n", "        ", "all_keys", "=", "torch", ".", "tensor", "(", "[", "f", ".", "keys", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "dataset", "=", "TensorDataset", "(", "all_input_ids", ",", "all_attention_mask", ",", "\n", "all_token_type_ids", ",", "all_label_ids", ",", "all_ids", ",", "all_true_ids", ",", "all_keys", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "TensorDataset", "(", "all_input_ids", ",", "all_attention_mask", ",", "\n", "all_token_type_ids", ",", "all_label_ids", ",", "all_ids", ",", "all_true_ids", ")", "\n", "\n", "", "return", "dataset", ",", "len", "(", "features", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.main.main": [[8, 45], ["utils.init_logger", "utils.load_tokenizer", "data_loader_new.load_and_cache_examples", "data_loader_new.load_and_cache_examples", "data_loader_new.load_and_cache_examples", "data_loader_new.load_and_cache_unlabeled_examples", "print", "print", "print", "print", "print", "time.sleep", "trainer.Trainer", "trainer.Trainer.evaluate", "trainer.Trainer.train", "trainer.Trainer.save_features", "trainer.Trainer.train", "trainer.Trainer.selftrain"], "function", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.init_logger", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.load_tokenizer", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.load_and_cache_examples", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.load_and_cache_examples", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.load_and_cache_examples", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.data_loader_new.load_and_cache_unlabeled_examples", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.selftrain"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "init_logger", "(", ")", "\n", "tokenizer", "=", "load_tokenizer", "(", "args", ")", "\n", "\n", "\n", "train_dataset", ",", "relation_labels", ",", "num_labels", ",", "id2label", ",", "label2id", ",", "train_size", "=", "load_and_cache_examples", "(", "args", ",", "tokenizer", ",", "mode", "=", "\"train\"", ")", "\n", "dev_dataset", ",", "relation_labels", ",", "num_labels", ",", "id2label", ",", "label2id", ",", "dev_size", "=", "load_and_cache_examples", "(", "args", ",", "tokenizer", ",", "mode", "=", "\"dev\"", ")", "\n", "test_dataset", ",", "relation_labels", ",", "num_labels", ",", "id2label", ",", "label2id", ",", "test_size", "=", "load_and_cache_examples", "(", "args", ",", "tokenizer", ",", "mode", "=", "\"test\"", ")", "\n", "unlabeled_dataset", ",", "unlabeled_size", "=", "load_and_cache_unlabeled_examples", "(", "args", ",", "tokenizer", ",", "mode", "=", "'unlabeled'", ",", "train_size", "=", "train_size", ")", "\n", "print", "(", "relation_labels", ",", "'number of labels:'", ",", "num_labels", ")", "\n", "print", "(", "'train_size:'", ",", "train_size", ")", "\n", "print", "(", "'dev_size:'", ",", "dev_size", ")", "\n", "print", "(", "'test_size:'", ",", "test_size", ")", "\n", "print", "(", "'unlabel_size:'", ",", "unlabeled_size", ")", "\n", "import", "time", "\n", "time", ".", "sleep", "(", "1.6", ")", "\n", "\n", "#assert 0", "\n", "trainer", "=", "Trainer", "(", "args", ",", "train_dataset", "=", "train_dataset", ",", "dev_dataset", "=", "dev_dataset", ",", "test_dataset", "=", "test_dataset", ",", "labelset", "=", "relation_labels", ",", "unlabeled", "=", "unlabeled_dataset", ",", "#masked_train_dataset = masked_train_dataset, masked_dev_dataset = masked_dev_dataset, \\", "\n", "#masked_test_dataset = masked_test_dataset, masked_unlabeled_dataset = masked_unlabeled_dataset, \\", "\n", "num_labels", "=", "num_labels", ",", "id2label", "=", "id2label", ",", "label2id", "=", "label2id", ",", "data_size", "=", "train_size", "\n", ")", "\n", "\n", "if", "args", ".", "do_train", ":", "\n", "#if args.pretrain:", "\n", "#    trainer.pretrain()", "\n", "        ", "if", "args", ".", "method", "in", "[", "'clean'", ",", "'noisy'", ",", "\"noise\"", "]", ":", "\n", "            ", "trainer", ".", "train", "(", ")", "\n", "trainer", ".", "save_features", "(", ")", "\n", "", "elif", "args", ".", "method", "==", "'selftrain'", ":", "\n", "            ", "trainer", ".", "train", "(", ")", "\n", "trainer", ".", "selftrain", "(", "soft", "=", "args", ".", "soft_label", ")", "#, adv = args.add_adv)", "\n", "\n", "", "", "if", "args", ".", "do_eval", ":", "\n", "        ", "trainer", ".", "evaluate", "(", "'test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.__init__": [[19, 48], ["trainer.Trainer.config_class.from_pretrained", "trainer.Trainer.model_class", "trainer.Trainer.init_model", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.init_model"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "train_dataset", "=", "None", ",", "dev_dataset", "=", "None", ",", "test_dataset", "=", "None", ",", "labelset", "=", "None", ",", "unlabeled", "=", "None", ",", "num_labels", "=", "10", ",", "id2label", "=", "None", ",", "label2id", "=", "None", ",", "data_size", "=", "100", ")", ":", "\n", "#masked_train_dataset = None, masked_dev_dataset = None,  masked_test_dataset = None, masked_unlabeled_dataset = None):", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "train_dataset", "=", "train_dataset", "\n", "self", ".", "dev_dataset", "=", "dev_dataset", "\n", "self", ".", "test_dataset", "=", "test_dataset", "\n", "self", ".", "unlabeled", "=", "unlabeled", "\n", "self", ".", "data_size", "=", "data_size", "\n", "\n", "self", ".", "label_lst", "=", "labelset", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "id2label", "=", "id2label", "\n", "self", ".", "label2id", "=", "label2id", "\n", "\n", "self", ".", "w", "=", "args", ".", "soft_label_weight", "\n", "self", ".", "k", "=", "(", "1", "-", "self", ".", "w", ")", "/", "(", "self", ".", "num_labels", "-", "1", ")", "\n", "self", ".", "label_matrix", "=", "torch", ".", "eye", "(", "self", ".", "num_labels", ")", "*", "(", "self", ".", "w", "-", "self", ".", "k", ")", "+", "self", ".", "k", "*", "torch", ".", "ones", "(", "self", ".", "num_labels", ")", "\n", "\n", "if", "args", ".", "task_type", "==", "'wic'", ":", "\n", "            ", "self", ".", "config_class", ",", "self", ".", "model_class", ",", "_", "=", "WiCMODEL_CLASSES", "[", "args", ".", "model_type", "]", "\n", "", "elif", "args", ".", "task_type", "==", "'re'", ":", "\n", "            ", "self", ".", "config_class", ",", "self", ".", "model_class", ",", "_", "=", "ReMODEL_CLASSES", "[", "args", ".", "model_type", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "config_class", ",", "self", ".", "model_class", ",", "_", "=", "MODEL_CLASSES", "[", "args", ".", "model_type", "]", "\n", "", "self", ".", "bert_config", "=", "self", ".", "config_class", ".", "from_pretrained", "(", "args", ".", "model_name_or_path", ",", "num_labels", "=", "self", ".", "num_labels", ",", "finetuning_task", "=", "args", ".", "task", ")", "\n", "\n", "self", ".", "model", "=", "self", ".", "model_class", "(", "self", ".", "bert_config", ",", "args", ")", "\n", "self", ".", "init_model", "(", ")", "\n", "#self.model.to(self.device)", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.init_model": [[50, 55], ["torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "trainer.Trainer.model.to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["None"], ["", "def", "init_model", "(", "self", ")", ":", "\n", "# GPU or CPU", "\n", "        ", "self", ".", "device", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "self", ".", "args", ".", "no_cuda", "else", "\"cpu\"", "\n", "self", ".", "model", "=", "nn", ".", "DataParallel", "(", "self", ".", "model", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.calc_loss": [[57, 77], ["torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax.view", "trainer.Trainer.soft_frequency", "loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.Softmax.", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "trainer.Trainer.view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().to.unsqueeze", "torch.FloatTensor().to.unsqueeze", "torch.FloatTensor().to.unsqueeze", "numpy.log", "numpy.log", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().to.unsqueeze", "torch.FloatTensor().to.unsqueeze", "torch.FloatTensor().to.unsqueeze", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum.size", "torch.sum.size", "torch.sum.size"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.soft_frequency"], ["", "def", "calc_loss", "(", "self", ",", "input", ",", "target", ",", "loss", ",", "thresh", "=", "0.95", ",", "soft", "=", "True", ",", "conf", "=", "'max'", ",", "confreg", "=", "0.1", ")", ":", "\n", "        ", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "target", "=", "softmax", "(", "target", ".", "view", "(", "-", "1", ",", "target", ".", "shape", "[", "-", "1", "]", ")", ")", ".", "view", "(", "target", ".", "shape", ")", "\n", "\n", "if", "conf", "==", "'max'", ":", "\n", "            ", "weight", "=", "torch", ".", "max", "(", "target", ",", "axis", "=", "1", ")", ".", "values", "\n", "w", "=", "torch", ".", "FloatTensor", "(", "[", "1", "if", "x", "==", "True", "else", "0", "for", "x", "in", "weight", ">", "thresh", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "conf", "==", "'entropy'", ":", "\n", "            ", "weight", "=", "torch", ".", "sum", "(", "-", "torch", ".", "log", "(", "target", "+", "1e-6", ")", "*", "target", ",", "dim", "=", "1", ")", "\n", "weight", "=", "1", "-", "weight", "/", "np", ".", "log", "(", "weight", ".", "size", "(", "-", "1", ")", ")", "\n", "w", "=", "torch", ".", "FloatTensor", "(", "[", "1", "if", "x", "==", "True", "else", "0", "for", "x", "in", "weight", ">", "thresh", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "target", "=", "self", ".", "soft_frequency", "(", "target", ",", "probs", "=", "True", ",", "soft", "=", "soft", ")", "\n", "\n", "loss_batch", "=", "loss", "(", "input", ",", "target", ")", "\n", "\n", "l", "=", "torch", ".", "sum", "(", "loss_batch", "*", "w", ".", "unsqueeze", "(", "1", ")", "*", "weight", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "n_classes_", "=", "input", ".", "shape", "[", "-", "1", "]", "\n", "l", "-=", "confreg", "*", "(", "torch", ".", "sum", "(", "input", "*", "w", ".", "unsqueeze", "(", "1", ")", ")", "+", "np", ".", "log", "(", "n_classes_", ")", "*", "n_classes_", ")", "\n", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.contrastive_loss": [[78, 105], ["torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax.view", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "utils.ContrastiveLoss", "utils.ContrastiveLoss.", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "input_x.size", "torch.Softmax.", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "nn.Softmax.view.view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.log", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum.size", "torch.sum.size", "torch.sum.size", "enumerate", "enumerate"], "methods", ["None"], ["", "def", "contrastive_loss", "(", "self", ",", "input", ",", "feat", ",", "target", ",", "conf", "=", "'none'", ",", "thresh", "=", "0.1", ",", "distmetric", "=", "'l2'", ")", ":", "\n", "        ", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "target", "=", "softmax", "(", "target", ".", "view", "(", "-", "1", ",", "target", ".", "shape", "[", "-", "1", "]", ")", ")", ".", "view", "(", "target", ".", "shape", ")", "\n", "if", "conf", "==", "'max'", ":", "\n", "            ", "weight", "=", "torch", ".", "max", "(", "target", ",", "axis", "=", "1", ")", ".", "values", "\n", "w", "=", "torch", ".", "tensor", "(", "[", "i", "for", "i", ",", "x", "in", "enumerate", "(", "weight", ")", "if", "x", ">", "thresh", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "conf", "==", "'entropy'", ":", "\n", "            ", "weight", "=", "torch", ".", "sum", "(", "-", "torch", ".", "log", "(", "target", "+", "1e-6", ")", "*", "target", ",", "dim", "=", "1", ")", "\n", "weight", "=", "1", "-", "weight", "/", "np", ".", "log", "(", "weight", ".", "size", "(", "-", "1", ")", ")", "\n", "w", "=", "torch", ".", "tensor", "(", "[", "i", "for", "i", ",", "x", "in", "enumerate", "(", "weight", ")", "if", "x", ">", "thresh", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "input_x", "=", "input", "[", "w", "]", "\n", "\n", "feat_x", "=", "feat", "[", "w", "]", "\n", "batch_size", "=", "input_x", ".", "size", "(", ")", "[", "0", "]", "\n", "if", "batch_size", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "index", "=", "torch", ".", "randperm", "(", "batch_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "input_y", "=", "input_x", "[", "index", ",", ":", "]", "\n", "feat_y", "=", "feat_x", "[", "index", ",", ":", "]", "\n", "argmax_x", "=", "torch", ".", "argmax", "(", "input_x", ",", "dim", "=", "1", ")", "\n", "argmax_y", "=", "torch", ".", "argmax", "(", "input_y", ",", "dim", "=", "1", ")", "\n", "agreement", "=", "torch", ".", "FloatTensor", "(", "[", "1", "if", "x", "==", "True", "else", "0", "for", "x", "in", "argmax_x", "==", "argmax_y", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "criterion", "=", "ContrastiveLoss", "(", "margin", "=", "1.0", ",", "metric", "=", "distmetric", ")", "\n", "loss", ",", "dist_sq", ",", "dist", "=", "criterion", "(", "feat_x", ",", "feat_y", ",", "agreement", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.soft_frequency": [[106, 123], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.Softmax.", "logits.view"], "methods", ["None"], ["", "def", "soft_frequency", "(", "self", ",", "logits", ",", "probs", "=", "False", ",", "soft", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Unsupervised Deep Embedding for Clustering Analysis\n        https://arxiv.org/abs/1511.06335\n        \"\"\"", "\n", "power", "=", "self", ".", "args", ".", "self_training_power", "\n", "if", "not", "probs", ":", "\n", "            ", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "y", "=", "softmax", "(", "logits", ".", "view", "(", "-", "1", ",", "logits", ".", "shape", "[", "-", "1", "]", ")", ")", ".", "view", "(", "logits", ".", "shape", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "logits", "\n", "", "f", "=", "torch", ".", "sum", "(", "y", ",", "dim", "=", "0", ")", "\n", "t", "=", "y", "**", "power", "/", "f", "\n", "#print('t', t)", "\n", "t", "=", "t", "+", "1e-10", "\n", "p", "=", "t", "/", "torch", ".", "sum", "(", "t", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "p", "if", "soft", "else", "torch", ".", "argmax", "(", "p", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.selftrain": [[126, 230], ["torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.RandomSampler", "torch.utils.data.RandomSampler", "torch.utils.data.RandomSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "transformers.AdamW", "transformers.get_linear_schedule_with_warmup", "torch.Softmax", "torch.Softmax", "torch.Softmax", "utils.set_seed", "range", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "tqdm.tqdm.tqdm", "enumerate", "int", "trainer.Trainer.model.train", "tuple", "trainer.Trainer.model", "copy.deepcopy.", "trainer.Trainer.calc_loss", "loss.mean.mean.item", "loss.mean.mean.backward", "len", "copy.deepcopy", "copy.deepcopy.eval", "copy.deepcopy.parameters", "trainer.Trainer.contrastive_loss", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "loss.mean.mean.mean", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "transformers.AdamW.step", "transformers.get_linear_schedule_with_warmup.step", "trainer.Trainer.model.zero_grad", "copy.deepcopy.zero_grad", "tqdm.tqdm.tqdm.set_description", "tqdm.tqdm.tqdm.close", "len", "trainer.Trainer.model.named_parameters", "trainer.Trainer.model.named_parameters", "any", "len", "t.to", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "trainer.Trainer.model.parameters", "trainer.Trainer.evaluate", "trainer.Trainer.evaluate", "trainer.Trainer.save_model", "any", "torch.Softmax.", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.Softmax."], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.set_seed", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.calc_loss", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.contrastive_loss", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.save_model"], ["", "def", "selftrain", "(", "self", ",", "soft", "=", "True", ")", ":", "\n", "        ", "selftrain_dataset", "=", "ConcatDataset", "(", "[", "self", ".", "train_dataset", ",", "self", ".", "unlabeled", "]", ")", "\n", "## generating pseudo_labels", "\n", "pseudo_labels", "=", "[", "]", "\n", "train_sampler", "=", "RandomSampler", "(", "selftrain_dataset", ")", "\n", "train_dataloader", "=", "DataLoader", "(", "selftrain_dataset", ",", "sampler", "=", "train_sampler", ",", "batch_size", "=", "self", ".", "args", ".", "batch_size", ")", "\n", "if", "self", ".", "args", ".", "self_training_max_step", ">", "0", ":", "\n", "            ", "t_total", "=", "self", ".", "args", ".", "self_training_max_step", "\n", "self", ".", "args", ".", "num_train_epochs", "=", "self", ".", "args", ".", "self_training_max_step", "//", "(", "len", "(", "train_dataloader", ")", "//", "self", ".", "args", ".", "gradient_accumulation_steps", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "t_total", "=", "len", "(", "train_dataloader", ")", "//", "self", ".", "args", ".", "gradient_accumulation_steps", "*", "self", ".", "args", ".", "num_train_epochs", "\n", "\n", "# Prepare optimizer and schedule (linear warmup and decay)", "\n", "", "no_decay", "=", "[", "'bias'", ",", "'LayerNorm.weight'", "]", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "'weight_decay'", ":", "self", ".", "args", ".", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "'weight_decay'", ":", "0.0", "}", "\n", "]", "\n", "optimizer", "=", "AdamW", "(", "optimizer_grouped_parameters", ",", "lr", "=", "self", ".", "args", ".", "learning_rate", ",", "eps", "=", "self", ".", "args", ".", "adam_epsilon", ")", "\n", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", "=", "self", ".", "args", ".", "warmup_steps", ",", "num_training_steps", "=", "t_total", ")", "\n", "self_training_loss", "=", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'none'", ")", "if", "soft", "else", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "update_step", "=", "0", "\n", "self_training_steps", "=", "self", ".", "args", ".", "self_training_max_step", "\n", "global_step", "=", "0", "\n", "selftrain_loss", "=", "0", "\n", "set_seed", "(", "self", ".", "args", ")", "\n", "#self.model.zero_grad()", "\n", "for", "t3", "in", "range", "(", "int", "(", "self_training_steps", "/", "len", "(", "train_dataloader", ")", ")", "+", "1", ")", ":", "\n", "            ", "epoch_iterator", "=", "tqdm", "(", "train_dataloader", ",", "desc", "=", "\"SelfTrain, Iteration\"", ")", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "epoch_iterator", ")", ":", "\n", "                ", "if", "global_step", "%", "self", ".", "args", ".", "self_training_update_period", "==", "0", ":", "\n", "                    ", "teacher_model", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "#.to(\"cuda\")", "\n", "teacher_model", ".", "eval", "(", ")", "\n", "for", "p", "in", "teacher_model", ".", "parameters", "(", ")", ":", "\n", "                        ", "p", ".", "requires_grad", "=", "False", "\n", "", "", "self", ".", "model", ".", "train", "(", ")", "\n", "batch", "=", "tuple", "(", "t", ".", "to", "(", "self", ".", "device", ")", "for", "t", "in", "batch", ")", "# GPU or CPU     ", "\n", "inputs", "=", "{", "\n", "'input_ids'", ":", "batch", "[", "0", "]", ",", "\n", "'attention_mask'", ":", "batch", "[", "1", "]", ",", "\n", "'token_type_ids'", ":", "batch", "[", "2", "]", ",", "\n", "\n", "}", "\n", "#self.model.eval()", "\n", "if", "self", ".", "args", ".", "task_type", "==", "'wic'", ":", "\n", "                    ", "inputs", "[", "'keys'", "]", "=", "batch", "[", "6", "]", "\n", "", "elif", "self", ".", "args", ".", "task_type", "==", "'re'", ":", "\n", "                    ", "inputs", "[", "'e1_mask'", "]", "=", "batch", "[", "4", "]", "\n", "inputs", "[", "'e2_mask'", "]", "=", "batch", "[", "5", "]", "\n", "", "outputs", "=", "self", ".", "model", "(", "**", "inputs", ")", "\n", "outputs_pseudo", "=", "teacher_model", "(", "**", "inputs", ")", "\n", "\n", "logits", "=", "outputs", "[", "0", "]", "\n", "true_labels", "=", "batch", "[", "-", "1", "]", "\n", "\n", "loss", "=", "self", ".", "calc_loss", "(", "input", "=", "torch", ".", "log", "(", "softmax", "(", "logits", ")", ")", ",", "target", "=", "outputs_pseudo", "[", "0", "]", ",", "loss", "=", "self_training_loss", ",", "thresh", "=", "self", ".", "args", ".", "self_training_eps", ",", "soft", "=", "soft", ",", "conf", "=", "'entropy'", ",", "confreg", "=", "self", ".", "args", ".", "self_training_confreg", ")", "\n", "\n", "if", "self", ".", "args", ".", "self_training_contrastive_weight", ">", "0", ":", "\n", "                    ", "contrastive_loss", "=", "self", ".", "contrastive_loss", "(", "input", "=", "torch", ".", "log", "(", "softmax", "(", "logits", ")", ")", ",", "feat", "=", "outputs_pseudo", "[", "-", "1", "]", ",", "target", "=", "outputs_pseudo", "[", "0", "]", ",", "conf", "=", "'entropy'", ",", "thresh", "=", "self", ".", "args", ".", "self_training_eps", ",", "distmetric", "=", "self", ".", "args", ".", "distmetric", ",", ")", "\n", "loss", "=", "loss", "+", "self", ".", "args", ".", "self_training_contrastive_weight", "*", "contrastive_loss", "\n", "\n", "", "if", "self", ".", "args", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "                    ", "loss", "=", "loss", "/", "self", ".", "args", ".", "gradient_accumulation_steps", "\n", "", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "                    ", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "", "selftrain_loss", "+=", "loss", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "(", "step", "+", "1", ")", "%", "self", ".", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "args", ".", "max_grad_norm", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "# Update learning rate schedule", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "teacher_model", ".", "zero_grad", "(", ")", "\n", "global_step", "+=", "1", "\n", "epoch_iterator", ".", "set_description", "(", "\"SelfTrain iter:%d Loss:%.3f\"", "%", "(", "step", ",", "selftrain_loss", "/", "global_step", ",", ")", ")", "\n", "if", "self", ".", "args", ".", "logging_steps", ">", "0", "and", "global_step", "%", "self", ".", "args", ".", "self_train_logging_steps", "==", "0", ":", "\n", "                        ", "self", ".", "evaluate", "(", "'dev'", ",", "global_step", ")", "\n", "self", ".", "evaluate", "(", "'test'", ",", "global_step", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "save_steps", ">", "0", "and", "global_step", "%", "self", ".", "args", ".", "save_steps", "==", "0", ":", "\n", "                        ", "self", ".", "save_model", "(", ")", "\n", "\n", "", "", "if", "0", "<", "self", ".", "args", ".", "self_training_max_step", "<", "global_step", ":", "\n", "                    ", "epoch_iterator", ".", "close", "(", ")", "\n", "break", "\n", "\n", "", "", "if", "0", "<", "self", ".", "args", ".", "self_training_max_step", "<", "global_step", ":", "\n", "                ", "break", "\n", "", "", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.train": [[232, 322], ["transformers.AdamW", "transformers.get_linear_schedule_with_warmup", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "trainer.Trainer.model.zero_grad", "tqdm.tqdm.trange", "utils.set_seed", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "print", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.RandomSampler", "torch.utils.data.RandomSampler", "torch.utils.data.RandomSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.RandomSampler", "torch.utils.data.RandomSampler", "torch.utils.data.RandomSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "int", "tqdm.tqdm.tqdm", "enumerate", "trainer.Trainer.model.train", "tuple", "trainer.Trainer.model", "torch.KLDivLoss.", "loss.mean.mean.backward", "loss.mean.mean.item", "tqdm.tqdm.trange.close", "len", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "loss.mean.mean.mean", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "transformers.AdamW.step", "transformers.get_linear_schedule_with_warmup.step", "trainer.Trainer.model.zero_grad", "tqdm.tqdm.tqdm.set_description", "tqdm.tqdm.tqdm.close", "len", "trainer.Trainer.model.named_parameters", "trainer.Trainer.model.named_parameters", "any", "t.to", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "trainer.Trainer.label_matrix[].to", "trainer.Trainer.model.parameters", "trainer.Trainer.evaluate", "trainer.Trainer.evaluate", "trainer.Trainer.save_model", "any"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.set_seed", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.save_model"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "method", "==", "'clean'", ":", "\n", "            ", "print", "(", "'clean data!'", ")", "\n", "concatdataset", "=", "ConcatDataset", "(", "[", "self", ".", "train_dataset", ",", "self", ".", "unlabeled", "]", ")", "\n", "train_sampler", "=", "RandomSampler", "(", "concatdataset", ")", "\n", "train_dataloader", "=", "DataLoader", "(", "concatdataset", ",", "sampler", "=", "train_sampler", ",", "batch_size", "=", "self", ".", "args", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "train_sampler", "=", "RandomSampler", "(", "self", ".", "train_dataset", ")", "\n", "train_dataloader", "=", "DataLoader", "(", "self", ".", "train_dataset", ",", "sampler", "=", "train_sampler", ",", "batch_size", "=", "self", ".", "args", ".", "batch_size", ")", "\n", "#assert 0", "\n", "", "if", "self", ".", "args", ".", "max_steps", ">", "0", ":", "\n", "            ", "t_total", "=", "self", ".", "args", ".", "max_steps", "\n", "self", ".", "args", ".", "num_train_epochs", "=", "self", ".", "args", ".", "max_steps", "//", "(", "len", "(", "train_dataloader", ")", "//", "self", ".", "args", ".", "gradient_accumulation_steps", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "t_total", "=", "len", "(", "train_dataloader", ")", "//", "self", ".", "args", ".", "gradient_accumulation_steps", "*", "self", ".", "args", ".", "num_train_epochs", "\n", "\n", "# Prepare optimizer and schedule (linear warmup and decay)", "\n", "", "no_decay", "=", "[", "'bias'", ",", "'LayerNorm.weight'", "]", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "'weight_decay'", ":", "self", ".", "args", ".", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "'weight_decay'", ":", "0.0", "}", "\n", "]", "\n", "optimizer", "=", "AdamW", "(", "optimizer_grouped_parameters", ",", "lr", "=", "self", ".", "args", ".", "learning_rate", ",", "eps", "=", "self", ".", "args", ".", "adam_epsilon", ")", "\n", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", "=", "self", ".", "args", ".", "warmup_steps", ",", "num_training_steps", "=", "t_total", ")", "\n", "\n", "# Train!", "\n", "logger", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "self", ".", "train_dataset", ")", ")", "\n", "logger", ".", "info", "(", "\"  Num Epochs = %d\"", ",", "self", ".", "args", ".", "num_train_epochs", ")", "\n", "logger", ".", "info", "(", "\"  Total train batch size = %d\"", ",", "self", ".", "args", ".", "batch_size", ")", "\n", "logger", ".", "info", "(", "\"  Gradient Accumulation steps = %d\"", ",", "self", ".", "args", ".", "gradient_accumulation_steps", ")", "\n", "logger", ".", "info", "(", "\"  Total optimization steps = %d\"", ",", "t_total", ")", "\n", "global_step", "=", "0", "\n", "tr_loss", "=", "0.0", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "\n", "train_iterator", "=", "trange", "(", "int", "(", "self", ".", "args", ".", "num_train_epochs", ")", ",", "desc", "=", "\"Epoch\"", ")", "\n", "set_seed", "(", "self", ".", "args", ")", "\n", "criterion", "=", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'batchmean'", ")", "\n", "\n", "for", "_", "in", "train_iterator", ":", "\n", "            ", "epoch_iterator", "=", "tqdm", "(", "train_dataloader", ",", "desc", "=", "\"Iteration\"", ")", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "epoch_iterator", ")", ":", "\n", "                ", "self", ".", "model", ".", "train", "(", ")", "\n", "batch", "=", "tuple", "(", "t", ".", "to", "(", "self", ".", "device", ")", "for", "t", "in", "batch", ")", "# GPU or CPU", "\n", "inputs", "=", "{", "\n", "'input_ids'", ":", "batch", "[", "0", "]", ",", "\n", "'attention_mask'", ":", "batch", "[", "1", "]", ",", "\n", "'token_type_ids'", ":", "batch", "[", "2", "]", ",", "\n", "'labels'", ":", "batch", "[", "3", "]", ",", "\n", "}", "\n", "if", "self", ".", "args", ".", "task_type", "==", "'wic'", ":", "\n", "                    ", "inputs", "[", "'keys'", "]", "=", "batch", "[", "6", "]", "\n", "", "elif", "self", ".", "args", ".", "task_type", "==", "'re'", ":", "\n", "                    ", "inputs", "[", "'e1_mask'", "]", "=", "batch", "[", "4", "]", "\n", "inputs", "[", "'e2_mask'", "]", "=", "batch", "[", "5", "]", "\n", "", "outputs", "=", "self", ".", "model", "(", "**", "inputs", ")", "\n", "loss1", "=", "outputs", "[", "0", "]", "\n", "logits", "=", "outputs", "[", "1", "]", "\n", "loss", "=", "criterion", "(", "input", "=", "F", ".", "log_softmax", "(", "logits", ")", ",", "target", "=", "self", ".", "label_matrix", "[", "batch", "[", "3", "]", "]", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "if", "self", ".", "args", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "                    ", "loss", "=", "loss", "/", "self", ".", "args", ".", "gradient_accumulation_steps", "\n", "", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "#print(loss.size(), torch.cuda.device_count())", "\n", "                    ", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "tr_loss", "+=", "loss", ".", "item", "(", ")", "\n", "if", "(", "step", "+", "1", ")", "%", "self", ".", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "args", ".", "max_grad_norm", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "# Update learning rate schedule", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "global_step", "+=", "1", "\n", "epoch_iterator", ".", "set_description", "(", "\"iteration:%d, w=%.1f, Loss:%.3f\"", "%", "(", "_", ",", "self", ".", "args", ".", "soft_label_weight", ",", "tr_loss", "/", "global_step", ")", ")", "\n", "if", "self", ".", "args", ".", "logging_steps", ">", "0", "and", "global_step", "%", "self", ".", "args", ".", "logging_steps", "==", "0", ":", "\n", "                        ", "self", ".", "evaluate", "(", "'dev'", ",", "global_step", ")", "\n", "self", ".", "evaluate", "(", "'test'", ",", "global_step", ")", "\n", "", "if", "self", ".", "args", ".", "save_steps", ">", "0", "and", "global_step", "%", "self", ".", "args", ".", "save_steps", "==", "0", ":", "\n", "                        ", "self", ".", "save_model", "(", ")", "\n", "\n", "", "", "if", "0", "<", "self", ".", "args", ".", "max_steps", "<", "global_step", ":", "\n", "                    ", "epoch_iterator", ".", "close", "(", ")", "\n", "break", "\n", "\n", "", "", "if", "0", "<", "self", ".", "args", ".", "max_steps", "<", "global_step", ":", "\n", "                ", "train_iterator", ".", "close", "(", ")", "\n", "break", "\n", "#assert 0", "\n", "", "", "return", "global_step", ",", "tr_loss", "/", "global_step", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.evaluate": [[323, 394], ["torch.utils.data.SequentialSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "logger.info", "logger.info", "logger.info", "trainer.Trainer.model.eval", "tqdm.tqdm.tqdm", "numpy.argmax", "utils.compute_metrics", "utils.compute_metrics.update", "logger.info", "print", "utils.write_f1_tc", "len", "tuple", "utils.write_prediction_re", "os.path.join", "Exception", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer.Trainer.model", "tmp_eval_loss.mean().item", "logits.detach().cpu().numpy", "inputs[].detach().cpu().numpy", "numpy.append", "numpy.append", "os.path.join", "utils.write_prediction_tc", "t.to", "logits.detach().cpu().numpy", "inputs[].detach().cpu().numpy", "os.path.join", "utils.write_prediction_wic", "tmp_eval_loss.mean", "logits.detach().cpu", "inputs[].detach().cpu", "os.path.join", "logits.detach().cpu", "inputs[].detach().cpu", "logits.detach", "inputs[].detach", "logits.detach", "inputs[].detach", "str"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.compute_metrics", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.write_f1_tc", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.write_prediction_re", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.write_prediction_tc", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.write_prediction_wic"], ["", "def", "evaluate", "(", "self", ",", "mode", ",", "global_step", "=", "-", "1", ")", ":", "\n", "# We use test dataset because semeval doesn't have dev dataset", "\n", "        ", "if", "mode", "==", "'test'", ":", "\n", "            ", "dataset", "=", "self", ".", "test_dataset", "\n", "", "elif", "mode", "==", "'dev'", ":", "\n", "            ", "dataset", "=", "self", ".", "dev_dataset", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Only dev and test dataset available\"", ")", "\n", "\n", "", "eval_sampler", "=", "SequentialSampler", "(", "dataset", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "dataset", ",", "sampler", "=", "eval_sampler", ",", "batch_size", "=", "self", ".", "args", ".", "batch_size", ")", "\n", "\n", "# Eval!", "\n", "logger", ".", "info", "(", "\"***** Running evaluation on %s dataset *****\"", ",", "mode", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "dataset", ")", ")", "\n", "logger", ".", "info", "(", "\"  Batch size = %d\"", ",", "self", ".", "args", ".", "batch_size", ")", "\n", "eval_loss", "=", "0.0", "\n", "nb_eval_steps", "=", "0", "\n", "preds", "=", "None", "\n", "out_label_ids", "=", "None", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "for", "batch", "in", "tqdm", "(", "eval_dataloader", ",", "desc", "=", "\"Evaluating\"", ")", ":", "\n", "            ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "self", ".", "device", ")", "for", "t", "in", "batch", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "inputs", "=", "{", "\n", "'input_ids'", ":", "batch", "[", "0", "]", ",", "\n", "'attention_mask'", ":", "batch", "[", "1", "]", ",", "\n", "'token_type_ids'", ":", "batch", "[", "2", "]", ",", "\n", "'labels'", ":", "batch", "[", "3", "]", ",", "\n", "}", "\n", "if", "self", ".", "args", ".", "task_type", "==", "'wic'", ":", "\n", "                    ", "inputs", "[", "'keys'", "]", "=", "batch", "[", "6", "]", "\n", "", "elif", "self", ".", "args", ".", "task_type", "==", "'re'", ":", "\n", "                    ", "inputs", "[", "'e1_mask'", "]", "=", "batch", "[", "4", "]", "\n", "inputs", "[", "'e2_mask'", "]", "=", "batch", "[", "5", "]", "\n", "", "outputs", "=", "self", ".", "model", "(", "**", "inputs", ")", "\n", "tmp_eval_loss", ",", "logits", "=", "outputs", "[", ":", "2", "]", "\n", "\n", "eval_loss", "+=", "tmp_eval_loss", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "nb_eval_steps", "+=", "1", "\n", "\n", "if", "preds", "is", "None", ":", "\n", "                ", "preds", "=", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "out_label_ids", "=", "inputs", "[", "'labels'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "preds", "=", "np", ".", "append", "(", "preds", ",", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "0", ")", "\n", "out_label_ids", "=", "np", ".", "append", "(", "\n", "out_label_ids", ",", "inputs", "[", "'labels'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "eval_loss", "=", "eval_loss", "/", "nb_eval_steps", "\n", "results", "=", "{", "\n", "\"loss\"", ":", "eval_loss", "\n", "}", "\n", "preds", "=", "np", ".", "argmax", "(", "preds", ",", "axis", "=", "1", ")", "\n", "if", "self", ".", "args", ".", "task_type", "==", "'re'", ":", "\n", "            ", "write_prediction_re", "(", "self", ".", "args", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "eval_dir", ",", "\"pred/proposed_answers.txt\"", ")", ",", "preds", ")", "\n", "", "elif", "self", ".", "args", ".", "task_type", "==", "'tc'", ":", "\n", "            ", "write_prediction_tc", "(", "self", ".", "args", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "eval_dir", ",", "\"pred/pred_%s_%s_%s_%d.txt\"", "%", "(", "self", ".", "args", ".", "task", ",", "mode", ",", "self", ".", "args", ".", "method", ",", "global_step", ")", ")", ",", "preds", ",", "self", ".", "id2label", ")", "\n", "", "elif", "self", ".", "args", ".", "task_type", "==", "'wic'", ":", "\n", "            ", "write_prediction_wic", "(", "self", ".", "args", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "eval_dir", ",", "\"pred/pred_%s_%s_%s_%s.txt\"", "%", "(", "self", ".", "args", ".", "task", ",", "mode", ",", "self", ".", "args", ".", "method", ",", "str", "(", "global_step", ")", ")", ")", ",", "preds", ",", "self", ".", "id2label", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "result", "=", "compute_metrics", "(", "preds", ",", "out_label_ids", ")", "\n", "result", ".", "update", "(", "result", ")", "\n", "\n", "logger", ".", "info", "(", "\"***** Eval results *****\"", ")", "\n", "\n", "print", "(", "'Macro F1: %.4f, Micro F1: %.4f, Accu: %.4f'", "%", "(", "result", "[", "\"macro-f1\"", "]", ",", "result", "[", "\"micro-f1\"", "]", ",", "result", "[", "\"acc\"", "]", ")", ")", "\n", "write_f1_tc", "(", "self", ".", "args", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "eval_dir", ",", "\"pred_%s_%s\"", "%", "(", "self", ".", "args", ".", "task", ",", "mode", ")", ")", ",", "result", "[", "\"macro-f1\"", "]", ",", "result", "[", "\"micro-f1\"", "]", ",", "result", "[", "\"acc\"", "]", ",", "global_step", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.save_model": [[395, 405], ["os.path.join", "model_to_save.save_pretrained", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "logger.info", "os.path.exists", "os.makedirs", "hasattr", "os.path.join"], "methods", ["None"], ["", "def", "save_model", "(", "self", ")", ":", "\n", "# Save model checkpoint (Overwrite)", "\n", "        ", "output_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "model_dir", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "model_to_save", "=", "self", ".", "model", ".", "module", "if", "hasattr", "(", "self", ".", "model", ",", "'module'", ")", "else", "self", ".", "model", "\n", "model_to_save", ".", "save_pretrained", "(", "output_dir", ")", "\n", "torch", ".", "save", "(", "self", ".", "args", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'training_config.bin'", ")", ")", "\n", "logger", ".", "info", "(", "\"Saving model checkpoint to %s\"", ",", "output_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.trainer.Trainer.load_model": [[406, 419], ["os.path.exists", "Exception", "trainer.Trainer.config_class.from_pretrained", "logger.info", "trainer.Trainer.model_class.from_pretrained", "trainer.Trainer.model.to", "logger.info", "Exception"], "methods", ["None"], ["", "def", "load_model", "(", "self", ")", ":", "\n", "# Check whether model exists", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "args", ".", "model_dir", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"Model doesn't exists! Train first!\"", ")", "\n", "\n", "", "try", ":", "\n", "            ", "self", ".", "bert_config", "=", "self", ".", "config_class", ".", "from_pretrained", "(", "self", ".", "args", ".", "model_dir", ")", "\n", "logger", ".", "info", "(", "\"***** Config loaded *****\"", ")", "\n", "self", ".", "model", "=", "self", ".", "model_class", ".", "from_pretrained", "(", "self", ".", "args", ".", "model_dir", ",", "config", "=", "self", ".", "bert_config", ",", "args", "=", "self", ".", "args", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "logger", ".", "info", "(", "\"***** Model Loaded *****\"", ")", "\n", "", "except", ":", "\n", "            ", "raise", "Exception", "(", "\"Some model files might be missing...\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.modeling_roberta.RobertaForSequenceClassification_v2.__init__": [[21, 27], ["transformers.BertPreTrainedModel.__init__", "transformers.RobertaModel", "transformers.modeling_roberta.RobertaClassificationHead"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.SoftContrastiveLoss.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "classifier", "=", "RobertaClassificationHead", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.modeling_roberta.RobertaForSequenceClassification_v2.get_embeddings": [[28, 30], ["modeling_roberta.RobertaForSequenceClassification_v2.roberta.get_input_embeddings"], "methods", ["None"], ["", "def", "get_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "roberta", ".", "get_input_embeddings", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.modeling_roberta.RobertaForSequenceClassification_v2.forward": [[31, 100], ["modeling_roberta.RobertaForSequenceClassification_v2.roberta", "modeling_roberta.RobertaForSequenceClassification_v2.classifier", "MSELoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "modeling_roberta.RobertaForSequenceClassification_v2.view", "labels.view", "modeling_roberta.RobertaForSequenceClassification_v2.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "input_ids", "=", "None", ",", "\n", "attention_mask", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "\n", "head_mask", "=", "None", ",", "\n", "inputs_embeds", "=", "None", ",", "\n", "labels", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        labels (:obj:`torch.LongTensor` of shape :obj:`(batch_size,)`, `optional`, defaults to :obj:`None`):\n            Labels for computing the sequence classification/regression loss.\n            Indices should be in :obj:`[0, ..., config.num_labels - 1]`.\n            If :obj:`config.num_labels == 1` a regression loss is computed (Mean-Square loss),\n            If :obj:`config.num_labels > 1` a classification loss is computed (Cross-Entropy).\n\n        Returns:\n            :obj:`tuple(torch.FloatTensor)` comprising various elements depending on the configuration (:class:`~transformers.RobertaConfig`) and inputs:\n            loss (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, returned when :obj:`label` is provided):\n                Classification (or regression if config.num_labels==1) loss.\n            logits (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, config.num_labels)`):\n                Classification (or regression if config.num_labels==1) scores (before SoftMax).\n            hidden_states (:obj:`tuple(torch.FloatTensor)`, `optional`, returned when ``config.output_hidden_states=True``):\n                Tuple of :obj:`torch.FloatTensor` (one for the output of the embeddings + one for the output of each layer)\n                of shape :obj:`(batch_size, sequence_length, hidden_size)`.\n\n                Hidden-states of the model at the output of each layer plus the initial embedding outputs.\n            attentions (:obj:`tuple(torch.FloatTensor)`, `optional`, returned when ``config.output_attentions=True``):\n                Tuple of :obj:`torch.FloatTensor` (one for each layer) of shape\n                :obj:`(batch_size, num_heads, sequence_length, sequence_length)`.\n\n                Attentions weights after the attention softmax, used to compute the weighted average in the self-attention\n                heads.\n\n        Examples::\n            from transformers import RobertaTokenizer, RobertaForSequenceClassification\n            import torch\n\n            tokenizer = RobertaTokenizer.from_pretrained('roberta-base')\n            model = RobertaForSequenceClassification.from_pretrained('roberta-base')\n            input_ids = torch.tensor(tokenizer.encode(\"Hello, my dog is cute\", add_special_tokens=True)).unsqueeze(0)  # Batch size 1\n            labels = torch.tensor([1]).unsqueeze(0)  # Batch size 1\n            outputs = model(input_ids, labels=labels)\n            loss, logits = outputs[:2]\n        \"\"\"", "\n", "outputs", "=", "self", ".", "roberta", "(", "\n", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ",", "\n", ")", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "#print(sequence_output)", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "+", "(", "sequence_output", "[", ":", ",", "0", ",", ":", "]", ",", ")", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "#  We are doing regression", "\n", "                ", "loss_fct", "=", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "#print(outputs)", "\n", "", "return", "outputs", "# (loss), logits, (hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.model.FCLayer.__init__": [[45, 51], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.SoftContrastiveLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "dropout_rate", "=", "0.", ",", "use_activation", "=", "True", ")", ":", "\n", "        ", "super", "(", "FCLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_activation", "=", "use_activation", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout_rate", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.model.FCLayer.forward": [[52, 57], ["model.FCLayer.dropout", "model.FCLayer.linear", "model.FCLayer.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "if", "self", ".", "use_activation", ":", "\n", "            ", "x", "=", "self", ".", "tanh", "(", "x", ")", "\n", "", "return", "self", ".", "linear", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.model.BERT_model.__init__": [[60, 69], ["transformers.BertPreTrainedModel.__init__", "PRETRAINED_MODEL_MAP_SeqClass[].from_pretrained", "PRETRAINED_MODEL_MAP_TokenClass[].from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.SoftContrastiveLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bert_config", ",", "args", ")", ":", "\n", "        ", "super", "(", "BERT_model", ",", "self", ")", ".", "__init__", "(", "bert_config", ")", "\n", "if", "args", ".", "task_type", "==", "'re'", "or", "'tc'", ":", "\n", "            ", "self", ".", "bert", "=", "PRETRAINED_MODEL_MAP_SeqClass", "[", "args", ".", "model_type", "]", ".", "from_pretrained", "(", "args", ".", "model_name_or_path", ",", "config", "=", "bert_config", ")", "# Load pretrained bert", "\n", "", "else", ":", "\n", "            ", "self", ".", "bert", "=", "PRETRAINED_MODEL_MAP_TokenClass", "[", "args", ".", "model_type", "]", ".", "from_pretrained", "(", "args", ".", "model_name_or_path", ",", "config", "=", "bert_config", ")", "# Load pretrained bert", "\n", "#self.fc_layer = FCLayer(bert_config.hidden_size, bert_config.num_labels, args.dropout_rate, use_activation=False)", "\n", "#self.lm_head = RobertaLMHead(config = bert_config)", "\n", "", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.model.BERT_model.forward": [[70, 107], ["model.BERT_model.bert", "model.BERT_model.bert", "model.BERT_model.bert"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "token_type_ids", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ",", "e1_mask", "=", "None", ",", "e2_mask", "=", "None", ")", ":", "\n", "#print(labels)", "\n", "        ", "if", "input_ids", "is", "None", ":", "\n", "            ", "outputs", "=", "self", ".", "bert", "(", "inputs_embeds", "=", "inputs_embeds", ",", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "labels", "=", "labels", ")", "# sequence_output, pooled_output, (hidden_states), (attentions)", "\n", "#sequence_output = outputs[0]", "\n", "\n", "", "elif", "labels", "is", "not", "None", ":", "\n", "            ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "labels", "=", "labels", ")", "# sequence_output, pooled_output, (hidden_states), (attentions)", "\n", "#sequence_output = outputs[0]", "\n", "#pooled_output = outputs[1]  # [CLS]", "\n", "if", "self", ".", "args", ".", "task_type", "==", "'re'", "or", "'tc'", ":", "\n", "                ", "'''\n                loss (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, returned when :obj:`label` is provided):\n                Classification (or regression if config.num_labels==1) loss.\n                logits (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, config.num_labels)`):\n                Classification (or regression if config.num_labels==1) scores (before SoftMax).\n                '''", "\n", "loss", ",", "logits", "=", "outputs", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "                ", "'''\n                loss (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, returned when ``labels`` is provided)\n                Classification loss.\n                scores (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, sequence_length, config.num_labels)`)\n                '''", "\n", "loss", ",", "scores", "=", "outputs", "[", ":", "2", "]", "\n", "", "", "else", ":", "\n", "            ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ")", "# sequence_output, pooled_output, (hidden_states), (attentions)", "\n", "#sequence_output = outputs[0]", "\n", "#pooled_output = outputs[1]  # [CLS]", "\n", "if", "self", ".", "args", ".", "task_type", "==", "'re'", "or", "'tc'", ":", "\n", "                ", "logits", "=", "outputs", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "scores", "=", "outputs", "[", "0", "]", "\n", "", "", "return", "outputs", "\n", "#logits = self.fc_layer(sequence_output)", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.model.BERT_model.forward_pretrain": [[109, 121], ["model.BERT_model.bert.roberta", "model.BERT_model.lm_head", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "model.BERT_model.view", "masked_lm_labels.view"], "methods", ["None"], ["", "def", "forward_pretrain", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "masked_lm_labels", ")", ":", "\n", "        ", "out", "=", "self", ".", "bert", ".", "roberta", "(", "input_ids", ",", "attention_mask", ")", "\n", "sequence_output", "=", "out", "[", "0", "]", "\n", "prediction_scores", "=", "self", ".", "lm_head", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", ")", "+", "out", "[", "2", ":", "]", "# Add hidden states and attention if they are here", "\n", "\n", "if", "masked_lm_labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "masked_lm_loss", ",", ")", "+", "outputs", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.model.RBERT.__init__": [[124, 147], ["transformers.BertPreTrainedModel.__init__", "PRETRAINED_MODEL_MAP[].from_pretrained", "pseudoclass", "torch.Embedding", "torch.Embedding", "torch.init.zeros_", "torch.init.zeros_", "range", "model.FCLayer", "model.FCLayer", "model.FCLayer", "model.FCLayer", "model.RBERT.base.get_input_embeddings"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.SoftContrastiveLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bert_config", ",", "args", ")", ":", "\n", "        ", "super", "(", "RBERT", ",", "self", ")", ".", "__init__", "(", "bert_config", ")", "\n", "self", ".", "bert", "=", "PRETRAINED_MODEL_MAP", "[", "args", ".", "model_type", "]", ".", "from_pretrained", "(", "args", ".", "model_name_or_path", ",", "config", "=", "bert_config", ")", "# Load pretrained bert", "\n", "class", "pseudoclass", "(", "object", ")", ":", "\n", "            ", "def", "__init__", "(", "self", ",", "base", ")", ":", "\n", "                ", "self", ".", "base", "=", "base", "\n", "", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "                ", "return", "self", ".", "base", ".", "get_input_embeddings", "(", ")", "\n", "", "", "self", ".", "bert", ".", "roberta", "=", "pseudoclass", "(", "self", ".", "bert", ")", "\n", "self", ".", "extended_token_type_embeddings", "=", "nn", ".", "Embedding", "(", "bert_config", ".", "type_vocab_size", "+", "20", ",", "bert_config", ".", "hidden_size", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "extended_token_type_embeddings", ".", "weight", ")", "\n", "for", "k", "in", "range", "(", "bert_config", ".", "type_vocab_size", "+", "20", ")", ":", "\n", "            ", "self", ".", "extended_token_type_embeddings", ".", "weight", ".", "data", "[", "k", ",", ":", "]", "=", "self", ".", "bert", ".", "embeddings", ".", "token_type_embeddings", ".", "weight", ".", "data", "[", "0", ",", ":", "]", "\n", "", "self", ".", "extended_token_type_embeddings", ".", "weight", ".", "data", "[", ":", "bert_config", ".", "type_vocab_size", ",", ":", "]", "=", "self", ".", "bert", ".", "embeddings", ".", "token_type_embeddings", ".", "weight", ".", "data", "\n", "self", ".", "extended_token_type_embeddings", ".", "weight", ".", "data", "[", "10", ":", "10", "+", "bert_config", ".", "type_vocab_size", ",", ":", "]", "=", "self", ".", "bert", ".", "embeddings", ".", "token_type_embeddings", ".", "weight", ".", "data", "\n", "self", ".", "bert", ".", "embeddings", ".", "token_type_embeddings", "=", "self", ".", "extended_token_type_embeddings", "\n", "\n", "self", ".", "num_labels", "=", "bert_config", ".", "num_labels", "\n", "\n", "self", ".", "cls_fc_layer", "=", "FCLayer", "(", "bert_config", ".", "hidden_size", ",", "bert_config", ".", "hidden_size", ",", "args", ".", "dropout_rate", ")", "\n", "self", ".", "e1_fc_layer", "=", "FCLayer", "(", "bert_config", ".", "hidden_size", ",", "bert_config", ".", "hidden_size", ",", "args", ".", "dropout_rate", ")", "\n", "self", ".", "e2_fc_layer", "=", "FCLayer", "(", "bert_config", ".", "hidden_size", ",", "bert_config", ".", "hidden_size", ",", "args", ".", "dropout_rate", ")", "\n", "self", ".", "label_classifier", "=", "FCLayer", "(", "bert_config", ".", "hidden_size", "*", "3", ",", "bert_config", ".", "num_labels", ",", "args", ".", "dropout_rate", ",", "use_activation", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.model.RBERT.entity_average": [[148, 163], ["e_mask.unsqueeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze.float", "torch.bmm().squeeze.float", "length_tensor.float", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "e_mask.unsqueeze.float"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "entity_average", "(", "hidden_output", ",", "e_mask", ")", ":", "\n", "        ", "\"\"\"\n        Average the entity hidden state vectors (H_i ~ H_j)\n        :param hidden_output: [batch_size, j-i+1, dim]\n        :param e_mask: [batch_size, max_seq_len]\n                e.g. e_mask[0] == [0, 0, 0, 1, 1, 1, 0, 0, ... 0]\n        :return: [batch_size, dim]\n        \"\"\"", "\n", "e_mask_unsqueeze", "=", "e_mask", ".", "unsqueeze", "(", "1", ")", "# [b, 1, j-i+1]", "\n", "length_tensor", "=", "(", "e_mask", "!=", "0", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "# [batch_size, 1]", "\n", "\n", "sum_vector", "=", "torch", ".", "bmm", "(", "e_mask_unsqueeze", ".", "float", "(", ")", ",", "hidden_output", ")", ".", "squeeze", "(", "1", ")", "# [b, 1, j-i+1] * [b, j-i+1, dim] = [b, 1, dim] -> [b, dim]", "\n", "avg_vector", "=", "sum_vector", ".", "float", "(", ")", "/", "length_tensor", ".", "float", "(", ")", "# broadcasting", "\n", "return", "avg_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.model.RBERT.forward": [[164, 203], ["model.RBERT.entity_average", "model.RBERT.entity_average", "model.RBERT.cls_fc_layer", "model.RBERT.e1_fc_layer", "model.RBERT.e2_fc_layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.RBERT.label_classifier", "model.RBERT.bert", "model.RBERT.bert", "torch.MSELoss", "torch.MSELoss", "torch.CrossEntropyLoss.", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "model.RBERT.view", "labels.view", "model.RBERT.view", "labels.view"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.model.RBERT.entity_average", "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.model.RBERT.entity_average"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "token_type_ids", ",", "labels", ",", "e1_mask", ",", "e2_mask", ",", "return_hidden", "=", "False", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "if", "input_ids", "is", "None", ":", "\n", "            ", "outputs", "=", "self", ".", "bert", "(", "inputs_embeds", "=", "inputs_embeds", ",", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ")", "# sequence_output, pooled_output, (hidden_states), (attentions)", "\n", "", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "# [CLS]", "\n", "\n", "# Average", "\n", "e1_h", "=", "self", ".", "entity_average", "(", "sequence_output", ",", "e1_mask", ")", "\n", "e2_h", "=", "self", ".", "entity_average", "(", "sequence_output", ",", "e2_mask", ")", "\n", "\n", "# Dropout -> tanh -> fc_layer", "\n", "pooled_output", "=", "self", ".", "cls_fc_layer", "(", "pooled_output", ")", "\n", "e1_h", "=", "self", ".", "e1_fc_layer", "(", "e1_h", ")", "\n", "e2_h", "=", "self", ".", "e2_fc_layer", "(", "e2_h", ")", "\n", "\n", "# Concat -> fc_layer", "\n", "concat_h", "=", "torch", ".", "cat", "(", "[", "pooled_output", ",", "e1_h", ",", "e2_h", "]", ",", "dim", "=", "-", "1", ")", "\n", "if", "return_hidden", ":", "\n", "            ", "return", "[", "concat_h", "]", "\n", "", "logits", "=", "self", ".", "label_classifier", "(", "concat_h", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "# Softmax", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "                ", "loss_fct", "=", "nn", ".", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.model.WiCBERT.forward": [[205, 211], ["model.RBERT.forward"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.SoftContrastiveLoss.forward"], ["    ", "def", "forward", "(", "self", ",", "input_ids", ",", "keys", ",", "attention_mask", ",", "token_type_ids", ",", "labels", "=", "None", ",", "return_hidden", "=", "False", ",", "**", "args", ")", ":", "\n", "        ", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "e1_mask", "=", "(", "keys", "==", "1", ")", ".", "long", "(", ")", "\n", "e2_mask", "=", "(", "keys", "==", "2", ")", ".", "long", "(", ")", "\n", "token_type_ids", "=", "token_type_ids", "+", "(", "keys", ">", "1", ")", ".", "long", "(", ")", "*", "10", "\n", "", "return", "super", "(", ")", ".", "forward", "(", "input_ids", ",", "attention_mask", ",", "token_type_ids", ",", "labels", ",", "e1_mask", ",", "e2_mask", ",", "return_hidden", "=", "return_hidden", ",", "**", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.model.ReBERT.forward": [[213, 217], ["model.RBERT.forward"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.SoftContrastiveLoss.forward"], ["    ", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "token_type_ids", ",", "labels", "=", "None", ",", "e1_mask", "=", "None", ",", "e2_mask", "=", "None", ",", "return_hidden", "=", "False", ",", "**", "args", ")", ":", "\n", "        ", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "token_type_ids", "=", "token_type_ids", "+", "e1_mask", "*", "1", "+", "e2_mask", "*", "2", "\n", "", "return", "super", "(", ")", ".", "forward", "(", "input_ids", ",", "attention_mask", ",", "token_type_ids", ",", "labels", ",", "e1_mask", ",", "e2_mask", ",", "return_hidden", "=", "return_hidden", ",", "**", "args", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.ContrastiveLoss.__init__": [[161, 165], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.SoftContrastiveLoss.__init__"], ["def", "__init__", "(", "self", ",", "margin", "=", "1.0", ",", "metric", "=", "'l2'", ")", ":", "\n", "        ", "super", "(", "ContrastiveLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "metric", "=", "metric", "\n", "# print('ContrastiveLoss, Metric:', self.metric)", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.ContrastiveLoss.check_type_forward": [[167, 177], ["len", "x0_type.size", "x0_type.dim", "x1_type.dim", "y_type.dim", "x1_type.size", "x1_type.size"], "methods", ["None"], ["", "def", "check_type_forward", "(", "self", ",", "in_types", ")", ":", "\n", "        ", "assert", "len", "(", "in_types", ")", "==", "3", "\n", "\n", "x0_type", ",", "x1_type", ",", "y_type", "=", "in_types", "\n", "assert", "x0_type", ".", "size", "(", ")", "==", "x1_type", ".", "shape", "\n", "assert", "x1_type", ".", "size", "(", ")", "[", "0", "]", "==", "y_type", ".", "shape", "[", "0", "]", "\n", "assert", "x1_type", ".", "size", "(", ")", "[", "0", "]", ">", "0", "\n", "assert", "x0_type", ".", "dim", "(", ")", "==", "2", "\n", "assert", "x1_type", ".", "dim", "(", ")", "==", "2", "\n", "assert", "y_type", ".", "dim", "(", ")", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.ContrastiveLoss.forward": [[178, 202], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "print", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "x0.size", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x0", ",", "x1", ",", "y", ")", ":", "\n", "#elf.check_type_forward((x0, x1, y))", "\n", "\n", "# euclidian distance", "\n", "        ", "if", "self", ".", "metric", "==", "'l2'", ":", "\n", "            ", "diff", "=", "x0", "-", "x1", "\n", "dist_sq", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "diff", ",", "2", ")", ",", "1", ")", "/", "x0", ".", "shape", "[", "-", "1", "]", "\n", "dist", "=", "torch", ".", "sqrt", "(", "dist_sq", ")", "\n", "", "elif", "self", ".", "metric", "==", "'cos'", ":", "\n", "            ", "prod", "=", "torch", ".", "sum", "(", "x0", "*", "x1", ",", "-", "1", ")", "\n", "dist", "=", "1", "-", "prod", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "x0", "**", "2", ",", "1", ")", "*", "torch", ".", "sum", "(", "x1", "**", "2", ",", "1", ")", ")", "\n", "dist_sq", "=", "dist", "**", "2", "\n", "#print(x0, x1, torch.sum(torch.pow(x0-x1, 2), 1) / x0.shape[-1], dist, dist_sq)", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Error Loss Metric!!\"", ")", "\n", "return", "0", "\n", "#dist = torch.sum( - x0 * x1 / np.sqrt(x0.shape[-1]), 1).exp()", "\n", "#dist_sq = dist ** 2", "\n", "\n", "", "mdist", "=", "self", ".", "margin", "-", "dist", "\n", "dist", "=", "torch", ".", "clamp", "(", "mdist", ",", "min", "=", "0.0", ")", "\n", "loss", "=", "y", "*", "dist_sq", "+", "(", "1", "-", "y", ")", "*", "torch", ".", "pow", "(", "dist", ",", "2", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "/", "2.0", "/", "x0", ".", "size", "(", ")", "[", "0", "]", "\n", "return", "loss", ",", "dist_sq", ",", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.SoftContrastiveLoss.__init__": [[209, 213], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.SoftContrastiveLoss.__init__"], ["def", "__init__", "(", "self", ",", "margin", "=", "1.0", ",", "metric", "=", "'l2'", ")", ":", "\n", "        ", "super", "(", "SoftContrastiveLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "metric", "=", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.SoftContrastiveLoss.check_type_forward": [[214, 224], ["len", "x0_type.size", "x0_type.dim", "x1_type.dim", "y_type.dim", "x1_type.size", "x1_type.size"], "methods", ["None"], ["", "def", "check_type_forward", "(", "self", ",", "in_types", ")", ":", "\n", "        ", "assert", "len", "(", "in_types", ")", "==", "3", "\n", "\n", "x0_type", ",", "x1_type", ",", "y_type", "=", "in_types", "\n", "assert", "x0_type", ".", "size", "(", ")", "==", "x1_type", ".", "shape", "\n", "assert", "x1_type", ".", "size", "(", ")", "[", "0", "]", "==", "y_type", ".", "shape", "[", "0", "]", "\n", "assert", "x1_type", ".", "size", "(", ")", "[", "0", "]", ">", "0", "\n", "assert", "x0_type", ".", "dim", "(", ")", "==", "2", "\n", "assert", "x1_type", ".", "dim", "(", ")", "==", "2", "\n", "assert", "y_type", ".", "dim", "(", ")", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.SoftContrastiveLoss.forward": [[225, 247], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "x0.size", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x0", ",", "x1", ",", "y", ",", "margin", ")", ":", "\n", "#elf.check_type_forward((x0, x1, y))", "\n", "\n", "# euclidian distance", "\n", "        ", "if", "self", ".", "metric", "==", "'l2'", ":", "\n", "            ", "diff", "=", "x0", "-", "x1", "\n", "dist_sq", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "diff", ",", "2", ")", ",", "1", ")", "/", "x0", ".", "shape", "[", "-", "1", "]", "\n", "dist", "=", "torch", ".", "sqrt", "(", "dist_sq", ")", "\n", "", "elif", "self", ".", "metric", "==", "'cos'", ":", "\n", "            ", "prod", "=", "torch", ".", "sum", "(", "x0", "*", "x1", ",", "-", "1", ")", "\n", "dist", "=", "1", "-", "prod", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "x0", "**", "2", ",", "1", ")", "*", "torch", ".", "sum", "(", "x1", "**", "2", ",", "1", ")", ")", "\n", "dist_sq", "=", "dist", "**", "2", "\n", "# diff = x0 - x1", "\n", "# dist_sq = torch.sum(torch.pow(diff, 2), 1) / x0.shape[-1]", "\n", "# dist = torch.sqrt(dist_sq)", "\n", "", "d_pos", "=", "dist", "-", "margin", "\n", "mdist", "=", "margin", "-", "dist", "\n", "dist_pos", "=", "torch", ".", "clamp", "(", "d_pos", ",", "min", "=", "0.0", ")", "\n", "dist_neg", "=", "torch", ".", "clamp", "(", "mdist", ",", "min", "=", "0.0", ")", "\n", "loss", "=", "y", "*", "torch", ".", "pow", "(", "dist_pos", ",", "2", ")", "+", "(", "1", "-", "y", ")", "*", "torch", ".", "pow", "(", "dist_neg", ",", "2", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "/", "2.0", "/", "x0", ".", "size", "(", ")", "[", "0", "]", "\n", "return", "loss", ",", "dist_sq", ",", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.get_label": [[40, 42], ["label.strip", "open", "os.path.join"], "function", ["None"], ["def", "get_label", "(", "args", ")", ":", "\n", "    ", "return", "[", "label", ".", "strip", "(", ")", "for", "label", "in", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "args", ".", "label_file", ")", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.load_tokenizer": [[44, 48], ["[].from_pretrained", "[].from_pretrained.add_special_tokens"], "function", ["None"], ["", "def", "load_tokenizer", "(", "args", ")", ":", "\n", "    ", "tokenizer", "=", "MODEL_CLASSES", "[", "args", ".", "model_type", "]", "[", "2", "]", ".", "from_pretrained", "(", "args", ".", "model_name_or_path", ")", "\n", "tokenizer", ".", "add_special_tokens", "(", "{", "\"additional_special_tokens\"", ":", "ADDITIONAL_SPECIAL_TOKENS", "}", ")", "\n", "return", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.write_prediction_re": [[74, 84], ["utils.get_label", "open", "enumerate", "f.write"], "function", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.get_label"], ["", "", "", "def", "write_prediction_re", "(", "args", ",", "output_file", ",", "preds", ")", ":", "\n", "    ", "\"\"\"\n    For official evaluation script\n    :param output_file: prediction_file_path (e.g. eval/proposed_answers.txt)\n    :param preds: [0,1,0,2,18,...]\n    \"\"\"", "\n", "relation_labels", "=", "get_label", "(", "args", ")", "\n", "with", "open", "(", "output_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "idx", ",", "pred", "in", "enumerate", "(", "preds", ")", ":", "\n", "            ", "f", ".", "write", "(", "\"{}\\t{}\\n\"", ".", "format", "(", "8001", "+", "idx", ",", "relation_labels", "[", "pred", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.write_prediction_tc": [[61, 73], ["open", "enumerate", "str", "int", "f.write"], "function", ["None"], ["", "", "", "def", "write_prediction_tc", "(", "args", ",", "output_file", ",", "preds", ",", "id2label", ")", ":", "\n", "    ", "\"\"\"\n    For official evaluation script\n    :param output_file: prediction_file_path (e.g. eval/proposed_answers.txt)\n    :param preds: [0,1,0,2,18,...]\n    \"\"\"", "\n", "#relation_labels = get_label(args)", "\n", "with", "open", "(", "output_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "idx", ",", "pred", "in", "enumerate", "(", "preds", ")", ":", "\n", "            ", "pred", "=", "str", "(", "pred", ")", "\n", "pred", "=", "int", "(", "pred", ")", "\n", "f", ".", "write", "(", "\"{}\\t{}\\n\"", ".", "format", "(", "8001", "+", "idx", ",", "id2label", "[", "pred", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.write_prediction_wic": [[86, 100], ["open", "enumerate", "f.write", "json.dumps"], "function", ["None"], ["", "", "", "def", "write_prediction_wic", "(", "args", ",", "output_file", ",", "preds", ",", "id2label", ")", ":", "\n", "    ", "\"\"\"\n    For official evaluation script\n    :param output_file: prediction_file_path (e.g. eval/proposed_answers.txt)\n    :param preds: [0,1,0,2,18,...]\n    \"\"\"", "\n", "#relation_labels = get_label(args)", "\n", "import", "json", "\n", "with", "open", "(", "output_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "idx", ",", "pred", "in", "enumerate", "(", "preds", ")", ":", "\n", "            ", "_e", "=", "{", "}", "\n", "_e", "[", "'idx'", "]", "=", "idx", "\n", "_e", "[", "'label'", "]", "=", "'true'", "if", "pred", "==", "1", "else", "'false'", "\n", "f", ".", "write", "(", "\"{}\\n\"", ".", "format", "(", "json", ".", "dumps", "(", "_e", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.write_f1_tc": [[101, 149], ["open", "f.write", "time.ctime", "time.ctime", "time.ctime", "time.ctime", "time.ctime", "time.ctime", "time.ctime", "time.ctime", "time.ctime", "time.ctime", "time.ctime", "time.ctime", "time.ctime"], "function", ["None"], ["", "", "", "def", "write_f1_tc", "(", "args", ",", "output_file", ",", "f1_macro", ",", "f1_micro", ",", "acc", ",", "global_step", ")", ":", "\n", "    ", "\"\"\"\n    For official evaluation script\n    :param output_file: prediction_file_path (e.g. eval/proposed_answers.txt)\n    :param preds: [0,1,0,2,18,...]\n    \"\"\"", "\n", "#relation_labels = get_label(args)", "\n", "import", "time", "\n", "with", "open", "(", "output_file", "+", "'_%d.txt'", "%", "(", "args", ".", "rule", ")", ",", "'a+'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "#for idx, pred in enumerate(preds):", "\n", "        ", "basic_str", "=", "'decay=%.1e Global Step:%d Macro_F1:%.4f, Micro_F1:%.4f\\n'", "%", "(", "args", ".", "weight_decay", ",", "global_step", ",", "f1_macro", ",", "f1_micro", ")", "\n", "if", "args", ".", "method", "==", "'mt'", ":", "\n", "            ", "pred", "=", "'%s beta:%.1e '", "%", "(", "time", ".", "ctime", "(", ")", ",", "args", ".", "mt_beta", ")", "+", "basic_str", "\n", "", "elif", "args", ".", "method", "==", "'vat'", ":", "\n", "            ", "pred", "=", "'%s eps:%.1e '", "%", "(", "time", ".", "ctime", "(", ")", ",", "args", ".", "vat_eps", ")", "+", "basic_str", "\n", "", "elif", "args", ".", "method", "==", "'mixup'", ":", "\n", "            ", "pred", "=", "'%s alpha:%.2f '", "%", "(", "time", ".", "ctime", "(", ")", ",", "args", ".", "mixup_alpha", ")", "+", "basic_str", "\n", "", "elif", "args", ".", "method", "in", "[", "'bond'", ",", "'ust'", "]", ":", "\n", "            ", "if", "args", ".", "self_training_addvat", "and", "args", ".", "self_training_addmt", ":", "\n", "                ", "pred", "=", "'%s vat_mt e:%.1e_b:%.1e eps:%.2f reg:%.2f g:%.1f cyc:%d '", "%", "(", "time", ".", "ctime", "(", ")", ",", "args", ".", "vat_eps", ",", "args", ".", "mt_beta", ",", "args", ".", "bond_eps", ",", "args", ".", "self_training_reg", ",", "args", ".", "self_training_graph_loss", ",", "args", ".", "self_training_update_period", ")", "+", "basic_str", "\n", "", "elif", "args", ".", "self_training_addvat", ":", "\n", "                ", "assert", "args", ".", "self_training_addmt", "==", "0", "\n", "pred", "=", "'%s vat_e:%.1e eps:%.2f reg:%.2f g:%.1f cyc:%d '", "%", "(", "time", ".", "ctime", "(", ")", ",", "args", ".", "vat_eps", ",", "args", ".", "bond_eps", ",", "args", ".", "self_training_reg", ",", "args", ".", "self_training_graph_loss", ",", "args", ".", "self_training_update_period", ")", "+", "basic_str", "\n", "", "elif", "args", ".", "self_training_addmt", ":", "\n", "                ", "assert", "args", ".", "self_training_addvat", "==", "0", "\n", "pred", "=", "'%s mt_b:%.1e eps:%.2f reg:%.2f g:%.1f cyc:%d '", "%", "(", "time", ".", "ctime", "(", ")", ",", "args", ".", "mt_beta", ",", "args", ".", "bond_eps", ",", "args", ".", "self_training_reg", ",", "args", ".", "self_training_graph_loss", ",", "args", ".", "self_training_update_period", ")", "+", "basic_str", "\n", "", "else", ":", "\n", "                ", "assert", "args", ".", "self_training_addmt", "==", "0", "and", "args", ".", "self_training_addmt", "==", "0", "\n", "pred", "=", "'%s eps:%.2f reg:%.2f g:%.1f cyc:%d '", "%", "(", "time", ".", "ctime", "(", ")", ",", "args", ".", "bond_eps", ",", "args", ".", "self_training_reg", ",", "args", ".", "self_training_graph_loss", ",", "args", ".", "self_training_update_period", ")", "+", "basic_str", "\n", "", "", "elif", "args", ".", "method", "in", "[", "'curr'", "]", ":", "\n", "            ", "if", "args", ".", "self_training_addvat", "and", "args", ".", "self_training_addmt", ":", "\n", "                ", "pred", "=", "'%s vat_mt e:%.1e_b:%.1e eps:%.2f reg:%.2f g:%.1f cyc:%d '", "%", "(", "time", ".", "ctime", "(", ")", ",", "args", ".", "vat_eps", ",", "args", ".", "mt_beta", ",", "args", ".", "bond_eps", ",", "args", ".", "self_training_reg", ",", "args", ".", "self_training_graph_loss", ",", "args", ".", "self_training_update_period", ")", "+", "basic_str", "\n", "", "elif", "args", ".", "self_training_addvat", ":", "\n", "                ", "assert", "args", ".", "self_training_addmt", "==", "0", "\n", "pred", "=", "'%s vat_e:%.1e eps:%.2f reg:%.2f g:%.1f cyc:%d '", "%", "(", "time", ".", "ctime", "(", ")", ",", "args", ".", "vat_eps", ",", "args", ".", "bond_eps", ",", "args", ".", "self_training_reg", ",", "args", ".", "self_training_graph_loss", ",", "args", ".", "self_training_update_period", ")", "+", "basic_str", "\n", "", "elif", "args", ".", "self_training_addmt", ":", "\n", "                ", "assert", "args", ".", "self_training_addvat", "==", "0", "\n", "pred", "=", "'%s mt_b:%.1e eps:%.2f reg:%.2f g:%.1f cyc:%d '", "%", "(", "time", ".", "ctime", "(", ")", ",", "args", ".", "mt_beta", ",", "args", ".", "bond_eps", ",", "args", ".", "self_training_reg", ",", "args", ".", "self_training_graph_loss", ",", "args", ".", "self_training_update_period", ")", "+", "basic_str", "\n", "", "else", ":", "\n", "                ", "assert", "args", ".", "self_training_addmt", "==", "0", "and", "args", ".", "self_training_addmt", "==", "0", "\n", "pred", "=", "'%s eps:%.2f reg:%.2f g:%.1f cyc:%d maxratio:%.1f'", "%", "(", "time", ".", "ctime", "(", ")", ",", "args", ".", "bond_eps", ",", "args", ".", "self_training_reg", ",", "args", ".", "self_training_graph_loss", ",", "args", ".", "self_training_update_period", ",", "args", ".", "curr_max_ratio", ")", "+", "basic_str", "\n", "\n", "", "", "elif", "args", ".", "method", "==", "'sat'", ":", "\n", "            ", "pred", "=", "'%s es:%d mom:%.1f a:%.1f b:%.1f '", "%", "(", "time", ".", "ctime", "(", ")", ",", "args", ".", "sat_es", ",", "args", ".", "sat_momentum", ",", "args", ".", "sat_alpha", ",", "args", ".", "sat_beta", ")", "+", "basic_str", "\n", "", "else", ":", "\n", "            ", "pred", "=", "'%s w:%.1f '", "%", "(", "time", ".", "ctime", "(", ")", ",", "args", ".", "soft_label_weight", ")", "+", "basic_str", "\n", "\n", "", "f", ".", "write", "(", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.init_logger": [[150, 154], ["logging.basicConfig"], "function", ["None"], ["", "", "def", "init_logger", "(", ")", ":", "\n", "    ", "logging", ".", "basicConfig", "(", "format", "=", "'%(asctime)s - %(levelname)s - %(name)s -   %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %H:%M:%S'", ",", "\n", "level", "=", "logging", ".", "INFO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.set_seed": [[248, 259], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["", "", "def", "set_seed", "(", "args", ")", ":", "\n", "    ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "if", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "# print('yes')", "\n", "# assert 0", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.compute_metrics": [[260, 263], ["utils.acc_and_f1", "len", "len"], "function", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.acc_and_f1"], ["", "def", "compute_metrics", "(", "preds", ",", "labels", ")", ":", "\n", "    ", "assert", "len", "(", "preds", ")", "==", "len", "(", "labels", ")", "\n", "return", "acc_and_f1", "(", "preds", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.simple_accuracy": [[265, 267], ["None"], "function", ["None"], ["", "def", "simple_accuracy", "(", "preds", ",", "labels", ")", ":", "\n", "    ", "return", "(", "preds", "==", "labels", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.acc_and_f1": [[269, 287], ["utils.simple_accuracy", "sklearn.metrics.precision_recall_fscore_support", "sklearn.metrics.precision_recall_fscore_support", "sklearn.metrics.precision_recall_fscore_support"], "function", ["home.repos.pwc.inspect_result.yueyu1030_COSINE.None.utils.simple_accuracy"], ["", "def", "acc_and_f1", "(", "preds", ",", "labels", ",", "average", "=", "'macro'", ")", ":", "\n", "    ", "acc", "=", "simple_accuracy", "(", "preds", ",", "labels", ")", "\n", "#macro_recall = recall_score(y_true=labels, y_pred = preds, average = 'macro')", "\n", "#micro_recall = recall_score(y_true=labels, y_pred = preds, average = 'micro')", "\n", "#print(acc, macro_recall, micro_recall)", "\n", "pr", ",", "re", ",", "f1cat", ",", "_", "=", "precision_recall_fscore_support", "(", "y_true", "=", "labels", ",", "y_pred", "=", "preds", ",", "average", "=", "None", ")", "\n", "#print(pr, re, f1cat)", "\n", "pr", ",", "re", ",", "f1", ",", "_", "=", "precision_recall_fscore_support", "(", "y_true", "=", "labels", ",", "y_pred", "=", "preds", ",", "average", "=", "'macro'", ")", "\n", "#print(pr, re, f1)", "\n", "p", ",", "r", ",", "f", ",", "_", "=", "precision_recall_fscore_support", "(", "y_true", "=", "labels", ",", "y_pred", "=", "preds", ",", "average", "=", "'micro'", ")", "\n", "#print(labels[:10], preds[:10])", "\n", "return", "{", "\n", "\"acc\"", ":", "acc", ",", "\n", "#\"f1\": official_f1(),", "\n", "\"recall\"", ":", "re", ",", "\n", "\"macro-f1\"", ":", "f1", ",", "\n", "\"micro-f1\"", ":", "f", ",", "\n", "\"f1-cat\"", ":", "f1cat", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.mitr.rules.rule0": [[23, 36], ["sentence.lower", "re.compile", "re.finditer", "match.start", "match.end", "sent_dict.keys", "range"], "function", ["None"], ["def", "rule0", "(", "sentence", ",", "sent_dict", ",", "rule_firing", ")", ":", "\n", "  ", "label", "=", "rule_dict", "[", "0", "]", "\n", "s", "=", "sentence", ".", "lower", "(", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "\"( |^)[^\\w]*(within|near|next|close|nearby|around|around)[^\\w]*([^\\s]+ ){0,2}(here|city|miles|mile)*[^\\w]*( |$)\"", ")", "\n", "r", "=", "re", ".", "finditer", "(", "pattern", ",", "s", ")", "\n", "for", "match", "in", "r", ":", "\n", "    ", "start", "=", "match", ".", "start", "(", ")", "\n", "end", "=", "match", ".", "end", "(", ")", "\n", "for", "key", "in", "sent_dict", ".", "keys", "(", ")", ":", "\n", "      ", "if", "key", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "        ", "if", "(", "rule_firing", "[", "sent_dict", "[", "key", "]", "]", "==", "0", ")", ":", "\n", "          ", "rule_firing", "[", "sent_dict", "[", "key", "]", "]", "=", "label", "\n", "", "", "", "", "return", "rule_firing", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.mitr.rules.rule1": [[38, 64], ["sentence.lower", "sentence.lower.strip().split", "range", "len", "sentence.lower.strip", "len"], "function", ["None"], ["", "def", "rule1", "(", "sentence", ",", "sent_dict", ",", "rule_firing", ")", ":", "\n", "  ", "label", "=", "rule_dict", "[", "1", "]", "\n", "s", "=", "sentence", ".", "lower", "(", ")", "\n", "#print(\"sentence : \",sentence)", "\n", "#print(\"sentence in lowercase\",s)", "\n", "words", "=", "s", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "#rule_firing=[0]*len(words)", "\n", "\n", "cuisine1a", "=", "[", "'italian'", ",", "'american'", ",", "'japanese'", ",", "'spanish'", ",", "'mexican'", ",", "'chinese'", ",", "'vietnamese'", ",", "'vegan'", "]", "\n", "cuisine1b", "=", "[", "'bistro'", ",", "'delis'", "]", "\n", "cuisine2", "=", "[", "'barbecue'", ",", "'halal'", ",", "'vegetarian'", ",", "'bakery'", "]", "\n", "#cuisine3=[('italian','bistro'),('japanese','delis')]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "words", ")", ")", ":", "\n", "    ", "if", "rule_firing", "[", "i", "]", "==", "0", ":", "#rule not fired yet", "\n", "      ", "if", "words", "[", "i", "]", "in", "cuisine2", ":", "\n", "        ", "rule_firing", "[", "i", "]", "=", "label", "\n", "", "elif", "words", "[", "i", "]", "in", "cuisine1a", ":", "\n", "        ", "rule_firing", "[", "i", "]", "=", "label", "\n", "if", "i", "<", "len", "(", "words", ")", "-", "1", ":", "\n", "          ", "if", "words", "[", "i", "+", "1", "]", "in", "cuisine1b", ":", "\n", "            ", "rule_firing", "[", "i", "+", "1", "]", "=", "label", "\n", "\n", "\n", "#print(rule_firing)", "\n", "", "", "", "", "", "return", "rule_firing", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.mitr.rules.rule2": [[68, 82], ["sentence.lower", "re.compile", "re.finditer", "match.start", "match.end", "sent_dict.keys", "range"], "function", ["None"], ["", "def", "rule2", "(", "sentence", ",", "sent_dict", ",", "firing_rule", ")", ":", "\n", "  ", "label", "=", "rule_dict", "[", "2", "]", "\n", "#firing_rule=[0]*len(sent_dict.keys())", "\n", "s", "=", "sentence", ".", "lower", "(", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "\"in the area\"", ")", "\n", "r", "=", "re", ".", "finditer", "(", "pattern", ",", "s", ")", "\n", "for", "match", "in", "r", ":", "\n", "    ", "start", "=", "match", ".", "start", "(", ")", "\n", "end", "=", "match", ".", "end", "(", ")", "\n", "for", "key", "in", "sent_dict", ".", "keys", "(", ")", ":", "\n", "      ", "if", "key", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "        ", "if", "(", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "==", "0", ")", ":", "\n", "          ", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "=", "label", "\n", "", "", "", "", "return", "firing_rule", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.mitr.rules.rule3": [[85, 99], ["sentence.lower", "re.compile", "re.finditer", "match.start", "match.end", "sent_dict.keys", "range"], "function", ["None"], ["", "def", "rule3", "(", "sentence", ",", "sent_dict", ",", "firing_rule", ")", ":", "\n", "  ", "label", "=", "rule_dict", "[", "3", "]", "\n", "#firing_rule=[0]*len(sent_dict.keys())", "\n", "s", "=", "sentence", ".", "lower", "(", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "\" ([0-9]+|few|under [0-9]+) dollar\"", ")", "\n", "r", "=", "re", ".", "finditer", "(", "pattern", ",", "s", ")", "\n", "for", "match", "in", "r", ":", "\n", "    ", "start", "=", "match", ".", "start", "(", ")", "\n", "end", "=", "match", ".", "end", "(", ")", "\n", "for", "key", "in", "sent_dict", ".", "keys", "(", ")", ":", "\n", "      ", "if", "key", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "        ", "if", "(", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "==", "0", ")", ":", "\n", "          ", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "=", "label", "\n", "", "", "", "", "return", "firing_rule", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.mitr.rules.rule4": [[101, 115], ["sentence.lower", "re.compile", "re.finditer", "match.start", "match.end", "sent_dict.keys", "range"], "function", ["None"], ["", "def", "rule4", "(", "sentence", ",", "sent_dict", ",", "firing_rule", ")", ":", "\n", "  ", "label", "=", "rule_dict", "[", "4", "]", "\n", "#firing_rule=[0]*len(sent_dict.keys())", "\n", "s", "=", "sentence", ".", "lower", "(", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "\"( (high|highly|good|best|top|well|highest|zagat) (rate|rating|rated))|((rated|rate|rating) [0-9]* star)|([0-9]+ star)\"", ")", "\n", "r", "=", "re", ".", "finditer", "(", "pattern", ",", "s", ")", "\n", "for", "match", "in", "r", ":", "\n", "    ", "start", "=", "match", ".", "start", "(", ")", "\n", "end", "=", "match", ".", "end", "(", ")", "\n", "for", "key", "in", "sent_dict", ".", "keys", "(", ")", ":", "\n", "      ", "if", "key", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "        ", "if", "(", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "==", "0", ")", ":", "\n", "          ", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "=", "label", "\n", "", "", "", "", "return", "firing_rule", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.mitr.rules.rule5": [[117, 131], ["sentence.lower", "re.compile", "re.finditer", "match.start", "match.end", "sent_dict.keys", "range"], "function", ["None"], ["", "def", "rule5", "(", "sentence", ",", "sent_dict", ",", "firing_rule", ")", ":", "\n", "  ", "label", "=", "rule_dict", "[", "5", "]", "\n", "#firing_rule=[0]*len(sent_dict.keys())", "\n", "s", "=", "sentence", ".", "lower", "(", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "\"((open|opened) (now|late))|(still (open|opened|closed|close))|(((open|close|opened|closed) \\w+([\\s]| \\w* | \\w* \\w* ))*[0-9]+ (am|pm|((a|p) m)|hours|hour))\"", ")", "\n", "r", "=", "re", ".", "finditer", "(", "pattern", ",", "s", ")", "\n", "for", "match", "in", "r", ":", "\n", "    ", "start", "=", "match", ".", "start", "(", ")", "\n", "end", "=", "match", ".", "end", "(", ")", "\n", "for", "key", "in", "sent_dict", ".", "keys", "(", ")", ":", "\n", "      ", "if", "key", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "        ", "if", "(", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "==", "0", ")", ":", "\n", "          ", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "=", "label", "\n", "", "", "", "", "return", "firing_rule", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.mitr.rules.rule6": [[133, 147], ["sentence.lower", "re.compile", "re.finditer", "match.start", "match.end", "sent_dict.keys", "range"], "function", ["None"], ["", "def", "rule6", "(", "sentence", ",", "sent_dict", ",", "firing_rule", ")", ":", "\n", "  ", "label", "=", "rule_dict", "[", "6", "]", "\n", "#firing_rule=[0]*len(sent_dict.keys())", "\n", "s", "=", "sentence", ".", "lower", "(", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "\"(open|close) (\\w* ){0,3}until (\\w* ){0,2}(([0-9]* (am|pm|((a|p) m)|hour|hours))|(late (night|hour))|(midnight))\"", ")", "\n", "r", "=", "re", ".", "finditer", "(", "pattern", ",", "s", ")", "\n", "for", "match", "in", "r", ":", "\n", "    ", "start", "=", "match", ".", "start", "(", ")", "\n", "end", "=", "match", ".", "end", "(", ")", "\n", "for", "key", "in", "sent_dict", ".", "keys", "(", ")", ":", "\n", "      ", "if", "key", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "        ", "if", "(", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "==", "0", ")", ":", "\n", "          ", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "=", "label", "\n", "", "", "", "", "return", "firing_rule", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.mitr.rules.rule7": [[149, 163], ["sentence.lower", "re.compile", "re.finditer", "match.start", "match.end", "sent_dict.keys", "range"], "function", ["None"], ["", "def", "rule7", "(", "sentence", ",", "sent_dict", ",", "firing_rule", ")", ":", "\n", "  ", "label", "=", "rule_dict", "[", "7", "]", "\n", "#firing_rule=[0]*len(sent_dict.keys())", "\n", "s", "=", "sentence", ".", "lower", "(", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "\"(outdoor|indoor|group|romantic|family|outside|inside|fine|waterfront|outside|private|business|formal|casual|rooftop|(special occasion))([\\s]| \\w+ | \\w+ \\w+ )dining\"", ")", "\n", "r", "=", "re", ".", "finditer", "(", "pattern", ",", "s", ")", "\n", "for", "match", "in", "r", ":", "\n", "    ", "start", "=", "match", ".", "start", "(", ")", "\n", "end", "=", "match", ".", "end", "(", ")", "\n", "for", "key", "in", "sent_dict", ".", "keys", "(", ")", ":", "\n", "      ", "if", "key", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "        ", "if", "(", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "==", "0", ")", ":", "\n", "          ", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "=", "label", "\n", "", "", "", "", "return", "firing_rule", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.mitr.rules.rule8": [[165, 179], ["sentence.lower", "re.compile", "re.finditer", "match.start", "match.end", "sent_dict.keys", "range"], "function", ["None"], ["", "def", "rule8", "(", "sentence", ",", "sent_dict", ",", "firing_rule", ")", ":", "\n", "  ", "label", "=", "rule_dict", "[", "8", "]", "\n", "#firing_rule=[0]*len(sent_dict.keys())", "\n", "s", "=", "sentence", ".", "lower", "(", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "\"(open |this |very ){0,2}late( night| dinner| lunch| dinning|( at night)){0,2}\"", ")", "\n", "r", "=", "re", ".", "finditer", "(", "pattern", ",", "s", ")", "\n", "for", "match", "in", "r", ":", "\n", "    ", "start", "=", "match", ".", "start", "(", ")", "\n", "end", "=", "match", ".", "end", "(", ")", "\n", "for", "key", "in", "sent_dict", ".", "keys", "(", ")", ":", "\n", "      ", "if", "key", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "        ", "if", "(", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "==", "0", ")", ":", "\n", "          ", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "=", "label", "\n", "", "", "", "", "return", "firing_rule", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.mitr.rules.rule9": [[182, 196], ["sentence.lower", "re.compile", "re.finditer", "match.start", "match.end", "sent_dict.keys", "range"], "function", ["None"], ["", "def", "rule9", "(", "sentence", ",", "sent_dict", ",", "firing_rule", ")", ":", "\n", "  ", "label", "=", "rule_dict", "[", "9", "]", "\n", "#firing_rule=[0]*len(sent_dict.keys())", "\n", "s", "=", "sentence", ".", "lower", "(", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "\"[\\w+ ]{0,2}(palace|cafe|bar|kitchen|outback|dominoes)\"", ")", "\n", "r", "=", "re", ".", "finditer", "(", "pattern", ",", "s", ")", "\n", "for", "match", "in", "r", ":", "\n", "    ", "start", "=", "match", ".", "start", "(", ")", "\n", "end", "=", "match", ".", "end", "(", ")", "\n", "for", "key", "in", "sent_dict", ".", "keys", "(", ")", ":", "\n", "      ", "if", "key", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "        ", "if", "sent_dict", "[", "key", "]", "!=", "'restaurants'", "and", "(", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "==", "0", ")", ":", "\n", "          ", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "=", "label", "\n", "", "", "", "", "return", "firing_rule", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.mitr.rules.rule10": [[198, 212], ["sentence.lower", "re.compile", "re.finditer", "match.start", "match.end", "sent_dict.keys", "range"], "function", ["None"], ["", "def", "rule10", "(", "sentence", ",", "sent_dict", ",", "firing_rule", ")", ":", "\n", "  ", "label", "=", "rule_dict", "[", "10", "]", "\n", "#firing_rule=[0]*len(sent_dict.keys())", "\n", "s", "=", "sentence", ".", "lower", "(", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "\"wine|sandwich|pasta|burger|peroggis|burrito|(chicken tikka masala)|appetizer|pizza|winec|upcake|(onion ring)|tapas\"", ")", "\n", "r", "=", "re", ".", "finditer", "(", "pattern", ",", "s", ")", "\n", "for", "match", "in", "r", ":", "\n", "    ", "start", "=", "match", ".", "start", "(", ")", "\n", "end", "=", "match", ".", "end", "(", ")", "\n", "for", "key", "in", "sent_dict", ".", "keys", "(", ")", ":", "\n", "      ", "if", "key", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "        ", "if", "(", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "==", "0", ")", ":", "\n", "          ", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "=", "label", "\n", "", "", "", "", "return", "firing_rule", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.mitr.rules.rule11": [[214, 237], ["sentence.lower", "re.compile", "re.finditer", "sentence.lower.strip().split", "range", "match.start", "match.end", "sent_dict.keys", "len", "sentence.lower.strip", "range"], "function", ["None"], ["", "def", "rule11", "(", "sentence", ",", "sent_dict", ",", "firing_rule", ")", ":", "\n", "  ", "label", "=", "rule_dict", "[", "11", "]", "\n", "#firing_rule=[0]*len(sent_dict.keys())", "\n", "s", "=", "sentence", ".", "lower", "(", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "\"(affordable|cheap|expensive|inexpensive)\"", ")", "\n", "r", "=", "re", ".", "finditer", "(", "pattern", ",", "s", ")", "\n", "for", "match", "in", "r", ":", "\n", "    ", "start", "=", "match", ".", "start", "(", ")", "\n", "end", "=", "match", ".", "end", "(", ")", "\n", "for", "key", "in", "sent_dict", ".", "keys", "(", ")", ":", "\n", "      ", "if", "key", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "        ", "if", "(", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "==", "0", ")", ":", "\n", "          ", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "=", "label", "\n", "\n", "", "", "", "", "bad_words", "=", "[", "'the'", ",", "'a'", ",", "'an'", ",", "'has'", ",", "'have'", ",", "'that'", ",", "'this'", ",", "'beef'", ",", "'for'", ",", "'with'", ",", "'if'", ",", "'at'", "]", "\n", "good_words", "=", "[", "'price'", ",", "'prices'", ",", "'pricing'", ",", "'priced'", "]", "\n", "words", "=", "s", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "words", ")", ")", ":", "\n", "    ", "if", "firing_rule", "[", "i", "-", "1", "]", "==", "0", ":", "\n", "      ", "if", "words", "[", "i", "]", "in", "good_words", ":", "\n", "        ", "if", "words", "[", "i", "-", "1", "]", "not", "in", "bad_words", ":", "\n", "          ", "firing_rule", "[", "i", "-", "1", "]", "=", "label", "\n", "", "", "", "", "return", "firing_rule", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.mitr.rules.rule12": [[239, 253], ["sentence.lower", "re.compile", "re.finditer", "match.start", "match.end", "sent_dict.keys", "range"], "function", ["None"], ["", "def", "rule12", "(", "sentence", ",", "sent_dict", ",", "firing_rule", ")", ":", "\n", "  ", "label", "=", "rule_dict", "[", "12", "]", "\n", "#firing_rule=[0]*len(sent_dict.keys())", "\n", "s", "=", "sentence", ".", "lower", "(", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "\"(([0-9]*)|very|most)* (good|great|best|bad|excellent|negative|star) (\\w* ){0,2}(review|reviews|rating|rated)\"", ")", "\n", "r", "=", "re", ".", "finditer", "(", "pattern", ",", "s", ")", "\n", "for", "match", "in", "r", ":", "\n", "    ", "start", "=", "match", ".", "start", "(", ")", "\n", "end", "=", "match", ".", "end", "(", ")", "\n", "for", "key", "in", "sent_dict", ".", "keys", "(", ")", ":", "\n", "      ", "if", "key", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "        ", "if", "(", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "==", "0", ")", ":", "\n", "          ", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "=", "label", "\n", "", "", "", "", "return", "firing_rule", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.mitr.rules.rule13": [[256, 270], ["sentence.lower", "re.compile", "re.finditer", "match.start", "match.end", "sent_dict.keys", "range"], "function", ["None"], ["", "def", "rule13", "(", "sentence", ",", "sent_dict", ",", "firing_rule", ")", ":", "\n", "  ", "label", "=", "rule_dict", "[", "7", "]", "\n", "#firing_rule=[0]*len(sent_dict.keys())", "\n", "s", "=", "sentence", ".", "lower", "(", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "\"(pet|kid|)(friendly|indoor|outdoor|date|dining|buffet|great|fine|good|friend|group|birthday|anniversary|family|historical|family friendly|friendly)([\\s]| \\w+ | \\w+ \\w+ )(spot|dining|parking|dinne|style|eatries|catering|drive throughs|allow|amenity|amenity)*\"", ")", "\n", "r", "=", "re", ".", "finditer", "(", "pattern", ",", "s", ")", "\n", "for", "match", "in", "r", ":", "\n", "    ", "start", "=", "match", ".", "start", "(", ")", "\n", "end", "=", "match", ".", "end", "(", ")", "\n", "for", "key", "in", "sent_dict", ".", "keys", "(", ")", ":", "\n", "      ", "if", "key", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "        ", "if", "(", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "==", "0", ")", ":", "\n", "          ", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "=", "label", "\n", "", "", "", "", "return", "firing_rule", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.mitr.rules.rule14": [[272, 286], ["sentence.lower", "re.compile", "re.finditer", "match.start", "match.end", "sent_dict.keys", "range"], "function", ["None"], ["", "def", "rule14", "(", "sentence", ",", "sent_dict", ",", "firing_rule", ")", ":", "\n", "  ", "label", "=", "rule_dict", "[", "9", "]", "\n", "#firing_rule=[0]*len(sent_dict.keys())", "\n", "s", "=", "sentence", ".", "lower", "(", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "\"(burger king|mcdonalds|taco bells|Mcdills|denneys|dennys|Mcdills)\"", ")", "\n", "r", "=", "re", ".", "finditer", "(", "pattern", ",", "s", ")", "\n", "for", "match", "in", "r", ":", "\n", "    ", "start", "=", "match", ".", "start", "(", ")", "\n", "end", "=", "match", ".", "end", "(", ")", "\n", "for", "key", "in", "sent_dict", ".", "keys", "(", ")", ":", "\n", "      ", "if", "key", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "        ", "if", "sent_dict", "[", "key", "]", "!=", "'restaurants'", "and", "(", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "==", "0", ")", ":", "\n", "          ", "firing_rule", "[", "sent_dict", "[", "key", "]", "]", "=", "label", "\n", "", "", "", "", "return", "firing_rule", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_amino_acid": [[9, 12], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["@", "labeling_function", "(", ")", "\n", "def", "lf_amino_acid", "(", "x", ")", ":", "\n", "    ", "return", "1", "if", "'amino acid'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_replace": [[13, 16], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_replace", "(", "x", ")", ":", "\n", "    ", "return", "1", "if", "'replace'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_mutant": [[17, 20], ["snorkel.labeling.labeling_function", "x.sentence.lower", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_mutant", "(", "x", ")", ":", "\n", "    ", "return", "1", "if", "'mutant'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "or", "'mutat'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_bind": [[23, 26], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_bind", "(", "x", ")", ":", "\n", "    ", "return", "2", "if", "'bind'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_interact": [[27, 30], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_interact", "(", "x", ")", ":", "\n", "    ", "return", "2", "if", "'interact'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_affinity": [[31, 34], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_affinity", "(", "x", ")", ":", "\n", "    ", "return", "2", "if", "'affinit'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_activate": [[38, 41], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_activate", "(", "x", ")", ":", "\n", "    ", "return", "3", "if", "'activat'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_increase": [[42, 45], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_increase", "(", "x", ")", ":", "\n", "    ", "return", "3", "if", "'increas'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_induce": [[46, 49], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_induce", "(", "x", ")", ":", "\n", "    ", "return", "3", "if", "'induc'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_stimulate": [[50, 53], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_stimulate", "(", "x", ")", ":", "\n", "    ", "return", "3", "if", "'stimulat'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_upregulate": [[54, 57], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_upregulate", "(", "x", ")", ":", "\n", "    ", "return", "3", "if", "'upregulat'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_downregulate": [[60, 63], ["snorkel.labeling.labeling_function", "x.sentence.lower", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_downregulate", "(", "x", ")", ":", "\n", "    ", "return", "4", "if", "'downregulat'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "or", "'down-regulat'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_reduce": [[64, 67], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_reduce", "(", "x", ")", ":", "\n", "    ", "return", "4", "if", "'reduc'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_inhibit": [[68, 71], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_inhibit", "(", "x", ")", ":", "\n", "    ", "return", "4", "if", "'inhibit'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_decrease": [[72, 75], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_decrease", "(", "x", ")", ":", "\n", "    ", "return", "4", "if", "'decreas'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_agonist": [[79, 82], ["snorkel.labeling.labeling_function", "x.sentence.lower", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_agonist", "(", "x", ")", ":", "\n", "    ", "return", "5", "if", "' agoni'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "or", "\"\\tagoni\"", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_antagonist": [[85, 88], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_antagonist", "(", "x", ")", ":", "\n", "    ", "return", "6", "if", "'antagon'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_modulate": [[91, 94], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_modulate", "(", "x", ")", ":", "\n", "    ", "return", "7", "if", "'modulat'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_allosteric": [[95, 98], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_allosteric", "(", "x", ")", ":", "\n", "    ", "return", "7", "if", "'allosteric'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_cofactor": [[100, 103], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_cofactor", "(", "x", ")", ":", "\n", "    ", "return", "8", "if", "'cofactor'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_substrate": [[106, 109], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_substrate", "(", "x", ")", ":", "\n", "    ", "return", "9", "if", "'substrate'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_transport": [[110, 113], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_transport", "(", "x", ")", ":", "\n", "    ", "return", "9", "if", "'transport'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_catalyze": [[114, 117], ["snorkel.labeling.labeling_function", "x.sentence.lower", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_catalyze", "(", "x", ")", ":", "\n", "    ", "return", "9", "if", "'catalyz'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "or", "'catalys'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_product": [[118, 121], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_product", "(", "x", ")", ":", "\n", "    ", "return", "9", "if", "\"produc\"", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_convert": [[122, 125], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_convert", "(", "x", ")", ":", "\n", "    ", "return", "9", "if", "\"conver\"", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.yueyu1030_COSINE.chemprot.chemprot_rules.lf_not": [[129, 132], ["snorkel.labeling.labeling_function", "x.sentence.lower"], "function", ["None"], ["", "@", "labeling_function", "(", ")", "\n", "def", "lf_not", "(", "x", ")", ":", "\n", "    ", "return", "10", "if", "'not'", "in", "x", ".", "sentence", ".", "lower", "(", ")", "else", "ABSTAIN", "\n", "\n"]]}