{"home.repos.pwc.inspect_result.czyssrs_finqa.utils.general_utils.remove_space": [[11, 19], ["text_in.split", "res.append"], "function", ["None"], ["def", "remove_space", "(", "text_in", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "\n", "for", "tmp", "in", "text_in", ".", "split", "(", "\" \"", ")", ":", "\n", "        ", "if", "tmp", "!=", "\"\"", ":", "\n", "            ", "res", ".", "append", "(", "tmp", ")", "\n", "\n", "", "", "return", "\" \"", ".", "join", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.utils.general_utils.table_row_to_text": [[21, 35], ["zip", "general_utils.remove_space", "remove_space.strip"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.utils.general_utils.remove_space"], ["", "def", "table_row_to_text", "(", "header", ",", "row", ")", ":", "\n", "    ", "'''\n    use templates to convert table row to text\n    '''", "\n", "res", "=", "\"\"", "\n", "\n", "if", "header", "[", "0", "]", ":", "\n", "        ", "res", "+=", "(", "header", "[", "0", "]", "+", "\" \"", ")", "\n", "\n", "", "for", "head", ",", "cell", "in", "zip", "(", "header", "[", "1", ":", "]", ",", "row", "[", "1", ":", "]", ")", ":", "\n", "        ", "res", "+=", "(", "\"the \"", "+", "row", "[", "0", "]", "+", "\" of \"", "+", "head", "+", "\" is \"", "+", "cell", "+", "\" ; \"", ")", "\n", "\n", "", "res", "=", "remove_space", "(", "res", ")", "\n", "return", "res", ".", "strip", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.czyssrs_finqa.evaluate.evaluate.str_to_num": [[27, 48], ["text.replace.replace", "float", "text.replace.replace", "float", "text.replace.replace", "float"], "function", ["None"], ["def", "str_to_num", "(", "text", ")", ":", "\n", "\n", "    ", "text", "=", "text", ".", "replace", "(", "\",\"", ",", "\"\"", ")", "\n", "try", ":", "\n", "        ", "num", "=", "float", "(", "text", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "if", "\"%\"", "in", "text", ":", "\n", "            ", "text", "=", "text", ".", "replace", "(", "\"%\"", ",", "\"\"", ")", "\n", "try", ":", "\n", "                ", "num", "=", "float", "(", "text", ")", "\n", "num", "=", "num", "/", "100.0", "\n", "", "except", "ValueError", ":", "\n", "                ", "num", "=", "\"n/a\"", "\n", "", "", "elif", "\"const\"", "in", "text", ":", "\n", "            ", "text", "=", "text", ".", "replace", "(", "\"const_\"", ",", "\"\"", ")", "\n", "if", "text", "==", "\"m1\"", ":", "\n", "                ", "text", "=", "\"-1\"", "\n", "", "num", "=", "float", "(", "text", ")", "\n", "", "else", ":", "\n", "            ", "num", "=", "\"n/a\"", "\n", "", "", "return", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.evaluate.evaluate.process_row": [[49, 70], ["str_to_num.replace().strip", "[].strip", "evaluate.str_to_num", "row_out.append", "str_to_num.replace", "str_to_num.split"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.str_to_num"], ["", "def", "process_row", "(", "row_in", ")", ":", "\n", "\n", "    ", "row_out", "=", "[", "]", "\n", "invalid_flag", "=", "0", "\n", "\n", "for", "num", "in", "row_in", ":", "\n", "        ", "num", "=", "num", ".", "replace", "(", "\"$\"", ",", "\"\"", ")", ".", "strip", "(", ")", "\n", "num", "=", "num", ".", "split", "(", "\"(\"", ")", "[", "0", "]", ".", "strip", "(", ")", "\n", "\n", "num", "=", "str_to_num", "(", "num", ")", "\n", "\n", "if", "num", "==", "\"n/a\"", ":", "\n", "            ", "invalid_flag", "=", "1", "\n", "break", "\n", "\n", "", "row_out", ".", "append", "(", "num", ")", "\n", "\n", "", "if", "invalid_flag", ":", "\n", "        ", "return", "\"n/a\"", "\n", "\n", "", "return", "row_out", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.evaluate.evaluate.eval_program": [[72, 195], ["enumerate", "enumerate", "program.split", "step.strip.strip", "[].strip().strip", "[].strip().strip", "[].strip", "[].strip", "round", "len", "token.strip", "step.strip.split", "[].strip", "[].strip", "evaluate.str_to_num", "evaluate.str_to_num", "[].strip().strip.split", "[].strip().strip.split", "evaluate.process_row", "max", "int", "int", "min", "step.strip.split", "step.strip.split", "str_to_num.replace", "str_to_num.replace", "int", "sum", "str_to_num.replace", "sum", "len"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.str_to_num", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.str_to_num", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.process_row"], ["", "def", "eval_program", "(", "program", ",", "table", ")", ":", "\n", "    ", "'''\n    calculate the numerical results of the program\n    '''", "\n", "\n", "invalid_flag", "=", "0", "\n", "this_res", "=", "\"n/a\"", "\n", "\n", "try", ":", "\n", "        ", "program", "=", "program", "[", ":", "-", "1", "]", "# remove EOF", "\n", "# check structure", "\n", "for", "ind", ",", "token", "in", "enumerate", "(", "program", ")", ":", "\n", "            ", "if", "ind", "%", "4", "==", "0", ":", "\n", "                ", "if", "token", ".", "strip", "(", "\"(\"", ")", "not", "in", "all_ops", ":", "\n", "                    ", "return", "1", ",", "\"n/a\"", "\n", "", "", "if", "(", "ind", "+", "1", ")", "%", "4", "==", "0", ":", "\n", "                ", "if", "token", "!=", "\")\"", ":", "\n", "                    ", "return", "1", ",", "\"n/a\"", "\n", "\n", "\n", "", "", "", "program", "=", "\"|\"", ".", "join", "(", "program", ")", "\n", "steps", "=", "program", ".", "split", "(", "\")\"", ")", "[", ":", "-", "1", "]", "\n", "\n", "\n", "res_dict", "=", "{", "}", "\n", "\n", "# print(program)", "\n", "\n", "for", "ind", ",", "step", "in", "enumerate", "(", "steps", ")", ":", "\n", "            ", "step", "=", "step", ".", "strip", "(", ")", "\n", "\n", "if", "len", "(", "step", ".", "split", "(", "\"(\"", ")", ")", ">", "2", ":", "\n", "                ", "invalid_flag", "=", "1", "\n", "break", "\n", "", "op", "=", "step", ".", "split", "(", "\"(\"", ")", "[", "0", "]", ".", "strip", "(", "\"|\"", ")", ".", "strip", "(", ")", "\n", "args", "=", "step", ".", "split", "(", "\"(\"", ")", "[", "1", "]", ".", "strip", "(", "\"|\"", ")", ".", "strip", "(", ")", "\n", "\n", "# print(args)", "\n", "# print(op)", "\n", "\n", "arg1", "=", "args", ".", "split", "(", "\"|\"", ")", "[", "0", "]", ".", "strip", "(", ")", "\n", "arg2", "=", "args", ".", "split", "(", "\"|\"", ")", "[", "1", "]", ".", "strip", "(", ")", "\n", "\n", "if", "op", "==", "\"add\"", "or", "op", "==", "\"subtract\"", "or", "op", "==", "\"multiply\"", "or", "op", "==", "\"divide\"", "or", "op", "==", "\"exp\"", "or", "op", "==", "\"greater\"", ":", "\n", "\n", "                ", "if", "\"#\"", "in", "arg1", ":", "\n", "                    ", "arg1", "=", "res_dict", "[", "int", "(", "arg1", ".", "replace", "(", "\"#\"", ",", "\"\"", ")", ")", "]", "\n", "", "else", ":", "\n", "# print(arg1)", "\n", "                    ", "arg1", "=", "str_to_num", "(", "arg1", ")", "\n", "if", "arg1", "==", "\"n/a\"", ":", "\n", "                        ", "invalid_flag", "=", "1", "\n", "break", "\n", "\n", "", "", "if", "\"#\"", "in", "arg2", ":", "\n", "                    ", "arg2", "=", "res_dict", "[", "int", "(", "arg2", ".", "replace", "(", "\"#\"", ",", "\"\"", ")", ")", "]", "\n", "", "else", ":", "\n", "                    ", "arg2", "=", "str_to_num", "(", "arg2", ")", "\n", "if", "arg2", "==", "\"n/a\"", ":", "\n", "                        ", "invalid_flag", "=", "1", "\n", "break", "\n", "\n", "", "", "if", "op", "==", "\"add\"", ":", "\n", "                    ", "this_res", "=", "arg1", "+", "arg2", "\n", "", "elif", "op", "==", "\"subtract\"", ":", "\n", "                    ", "this_res", "=", "arg1", "-", "arg2", "\n", "", "elif", "op", "==", "\"multiply\"", ":", "\n", "                    ", "this_res", "=", "arg1", "*", "arg2", "\n", "", "elif", "op", "==", "\"divide\"", ":", "\n", "                    ", "this_res", "=", "arg1", "/", "arg2", "\n", "", "elif", "op", "==", "\"exp\"", ":", "\n", "                    ", "this_res", "=", "arg1", "**", "arg2", "\n", "", "elif", "op", "==", "\"greater\"", ":", "\n", "                    ", "this_res", "=", "\"yes\"", "if", "arg1", ">", "arg2", "else", "\"no\"", "\n", "\n", "\n", "# print(\"ind: \", ind)", "\n", "# print(this_res)", "\n", "", "res_dict", "[", "ind", "]", "=", "this_res", "\n", "\n", "\n", "", "elif", "\"table\"", "in", "op", ":", "\n", "                ", "table_dict", "=", "{", "}", "\n", "for", "row", "in", "table", ":", "\n", "                    ", "table_dict", "[", "row", "[", "0", "]", "]", "=", "row", "[", "1", ":", "]", "\n", "\n", "", "if", "\"#\"", "in", "arg1", ":", "\n", "                    ", "arg1", "=", "res_dict", "[", "int", "(", "arg1", ".", "replace", "(", "\"#\"", ",", "\"\"", ")", ")", "]", "\n", "", "else", ":", "\n", "                    ", "if", "arg1", "not", "in", "table_dict", ":", "\n", "                        ", "invalid_flag", "=", "1", "\n", "break", "\n", "\n", "", "cal_row", "=", "table_dict", "[", "arg1", "]", "\n", "num_row", "=", "process_row", "(", "cal_row", ")", "\n", "\n", "", "if", "num_row", "==", "\"n/a\"", ":", "\n", "                    ", "invalid_flag", "=", "1", "\n", "break", "\n", "", "if", "op", "==", "\"table_max\"", ":", "\n", "                    ", "this_res", "=", "max", "(", "num_row", ")", "\n", "", "elif", "op", "==", "\"table_min\"", ":", "\n", "                    ", "this_res", "=", "min", "(", "num_row", ")", "\n", "", "elif", "op", "==", "\"table_sum\"", ":", "\n", "                    ", "this_res", "=", "sum", "(", "num_row", ")", "\n", "", "elif", "op", "==", "\"table_average\"", ":", "\n", "                    ", "this_res", "=", "sum", "(", "num_row", ")", "/", "len", "(", "num_row", ")", "\n", "\n", "# this_res = round(this_res, 5)", "\n", "\n", "", "res_dict", "[", "ind", "]", "=", "this_res", "\n", "\n", "# print(this_res)", "\n", "\n", "", "", "if", "this_res", "!=", "\"yes\"", "and", "this_res", "!=", "\"no\"", "and", "this_res", "!=", "\"n/a\"", ":", "\n", "# print(this_res)", "\n", "            ", "this_res", "=", "round", "(", "this_res", ",", "5", ")", "\n", "\n", "", "", "except", ":", "\n", "        ", "invalid_flag", "=", "1", "\n", "\n", "\n", "", "return", "invalid_flag", ",", "this_res", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.evaluate.evaluate.equal_program": [[197, 366], ["enumerate", "evaluate.equal_program.symbol_recur"], "function", ["None"], ["", "def", "equal_program", "(", "program1", ",", "program2", ")", ":", "\n", "    ", "'''\n    symbolic program if equal\n    program1: gold\n    program2: pred\n    '''", "\n", "\n", "sym_map", "=", "{", "}", "\n", "\n", "program1", "=", "program1", "[", ":", "-", "1", "]", "# remove EOF", "\n", "program1", "=", "\"|\"", ".", "join", "(", "program1", ")", "\n", "steps", "=", "program1", ".", "split", "(", "\")\"", ")", "[", ":", "-", "1", "]", "\n", "\n", "invalid_flag", "=", "0", "\n", "sym_ind", "=", "0", "\n", "step_dict_1", "=", "{", "}", "\n", "\n", "# symbolic map", "\n", "for", "ind", ",", "step", "in", "enumerate", "(", "steps", ")", ":", "\n", "\n", "        ", "step", "=", "step", ".", "strip", "(", ")", "\n", "\n", "assert", "len", "(", "step", ".", "split", "(", "\"(\"", ")", ")", "<=", "2", "\n", "\n", "op", "=", "step", ".", "split", "(", "\"(\"", ")", "[", "0", "]", ".", "strip", "(", "\"|\"", ")", ".", "strip", "(", ")", "\n", "args", "=", "step", ".", "split", "(", "\"(\"", ")", "[", "1", "]", ".", "strip", "(", "\"|\"", ")", ".", "strip", "(", ")", "\n", "\n", "arg1", "=", "args", ".", "split", "(", "\"|\"", ")", "[", "0", "]", ".", "strip", "(", ")", "\n", "arg2", "=", "args", ".", "split", "(", "\"|\"", ")", "[", "1", "]", ".", "strip", "(", ")", "\n", "\n", "step_dict_1", "[", "ind", "]", "=", "step", "\n", "\n", "if", "\"table\"", "in", "op", ":", "\n", "            ", "if", "step", "not", "in", "sym_map", ":", "\n", "                ", "sym_map", "[", "step", "]", "=", "\"a\"", "+", "str", "(", "sym_ind", ")", "\n", "sym_ind", "+=", "1", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "\"#\"", "not", "in", "arg1", ":", "\n", "                ", "if", "arg1", "not", "in", "sym_map", ":", "\n", "                    ", "sym_map", "[", "arg1", "]", "=", "\"a\"", "+", "str", "(", "sym_ind", ")", "\n", "sym_ind", "+=", "1", "\n", "\n", "", "", "if", "\"#\"", "not", "in", "arg2", ":", "\n", "                ", "if", "arg2", "not", "in", "sym_map", ":", "\n", "                    ", "sym_map", "[", "arg2", "]", "=", "\"a\"", "+", "str", "(", "sym_ind", ")", "\n", "sym_ind", "+=", "1", "\n", "\n", "\n", "# check program 2", "\n", "", "", "", "", "step_dict_2", "=", "{", "}", "\n", "try", ":", "\n", "        ", "program2", "=", "program2", "[", ":", "-", "1", "]", "# remove EOF", "\n", "# check structure", "\n", "for", "ind", ",", "token", "in", "enumerate", "(", "program2", ")", ":", "\n", "            ", "if", "ind", "%", "4", "==", "0", ":", "\n", "                ", "if", "token", ".", "strip", "(", "\"(\"", ")", "not", "in", "all_ops", ":", "\n", "                    ", "print", "(", "\"structure error\"", ")", "\n", "return", "False", "\n", "", "", "if", "(", "ind", "+", "1", ")", "%", "4", "==", "0", ":", "\n", "                ", "if", "token", "!=", "\")\"", ":", "\n", "                    ", "print", "(", "\"structure error\"", ")", "\n", "return", "False", "\n", "\n", "", "", "", "program2", "=", "\"|\"", ".", "join", "(", "program2", ")", "\n", "steps", "=", "program2", ".", "split", "(", "\")\"", ")", "[", ":", "-", "1", "]", "\n", "\n", "for", "ind", ",", "step", "in", "enumerate", "(", "steps", ")", ":", "\n", "            ", "step", "=", "step", ".", "strip", "(", ")", "\n", "\n", "if", "len", "(", "step", ".", "split", "(", "\"(\"", ")", ")", ">", "2", ":", "\n", "                ", "return", "False", "\n", "", "op", "=", "step", ".", "split", "(", "\"(\"", ")", "[", "0", "]", ".", "strip", "(", "\"|\"", ")", ".", "strip", "(", ")", "\n", "args", "=", "step", ".", "split", "(", "\"(\"", ")", "[", "1", "]", ".", "strip", "(", "\"|\"", ")", ".", "strip", "(", ")", "\n", "\n", "# print(args)", "\n", "# print(op)", "\n", "\n", "arg1", "=", "args", ".", "split", "(", "\"|\"", ")", "[", "0", "]", ".", "strip", "(", ")", "\n", "arg2", "=", "args", ".", "split", "(", "\"|\"", ")", "[", "1", "]", ".", "strip", "(", ")", "\n", "\n", "step_dict_2", "[", "ind", "]", "=", "step", "\n", "\n", "if", "\"table\"", "in", "op", ":", "\n", "                ", "if", "step", "not", "in", "sym_map", ":", "\n", "                    ", "return", "False", "\n", "\n", "", "", "else", ":", "\n", "                ", "if", "\"#\"", "not", "in", "arg1", ":", "\n", "                    ", "if", "arg1", "not", "in", "sym_map", ":", "\n", "                        ", "return", "False", "\n", "", "", "else", ":", "\n", "                    ", "if", "int", "(", "arg1", ".", "strip", "(", "\"#\"", ")", ")", ">=", "ind", ":", "\n", "                        ", "return", "False", "\n", "\n", "", "", "if", "\"#\"", "not", "in", "arg2", ":", "\n", "                    ", "if", "arg2", "not", "in", "sym_map", ":", "\n", "                        ", "return", "False", "\n", "", "", "else", ":", "\n", "                    ", "if", "int", "(", "arg2", ".", "strip", "(", "\"#\"", ")", ")", ">=", "ind", ":", "\n", "                        ", "return", "False", "\n", "", "", "", "", "", "except", ":", "\n", "        ", "return", "False", "\n", "\n", "", "def", "symbol_recur", "(", "step", ",", "step_dict", ")", ":", "\n", "\n", "        ", "step", "=", "step", ".", "strip", "(", ")", "\n", "op", "=", "step", ".", "split", "(", "\"(\"", ")", "[", "0", "]", ".", "strip", "(", "\"|\"", ")", ".", "strip", "(", ")", "\n", "args", "=", "step", ".", "split", "(", "\"(\"", ")", "[", "1", "]", ".", "strip", "(", "\"|\"", ")", ".", "strip", "(", ")", "\n", "\n", "arg1", "=", "args", ".", "split", "(", "\"|\"", ")", "[", "0", "]", ".", "strip", "(", ")", "\n", "arg2", "=", "args", ".", "split", "(", "\"|\"", ")", "[", "1", "]", ".", "strip", "(", ")", "\n", "\n", "# print(op)", "\n", "# print(arg1)", "\n", "# print(arg2)", "\n", "\n", "if", "\"table\"", "in", "op", ":", "\n", "# as var", "\n", "            ", "return", "sym_map", "[", "step", "]", "\n", "\n", "", "if", "\"#\"", "in", "arg1", ":", "\n", "            ", "arg1_ind", "=", "int", "(", "arg1", ".", "replace", "(", "\"#\"", ",", "\"\"", ")", ")", "\n", "arg1_part", "=", "symbol_recur", "(", "step_dict", "[", "arg1_ind", "]", ",", "step_dict", ")", "\n", "", "else", ":", "\n", "            ", "arg1_part", "=", "sym_map", "[", "arg1", "]", "\n", "\n", "\n", "", "if", "\"#\"", "in", "arg2", ":", "\n", "            ", "arg2_ind", "=", "int", "(", "arg2", ".", "replace", "(", "\"#\"", ",", "\"\"", ")", ")", "\n", "arg2_part", "=", "symbol_recur", "(", "step_dict", "[", "arg2_ind", "]", ",", "step_dict", ")", "\n", "", "else", ":", "\n", "            ", "arg2_part", "=", "sym_map", "[", "arg2", "]", "\n", "\n", "", "if", "op", "==", "\"add\"", ":", "\n", "            ", "return", "\"( \"", "+", "arg1_part", "+", "\" + \"", "+", "arg2_part", "+", "\" )\"", "\n", "", "elif", "op", "==", "\"subtract\"", ":", "\n", "            ", "return", "\"( \"", "+", "arg1_part", "+", "\" - \"", "+", "arg2_part", "+", "\" )\"", "\n", "", "elif", "op", "==", "\"multiply\"", ":", "\n", "            ", "return", "\"( \"", "+", "arg1_part", "+", "\" * \"", "+", "arg2_part", "+", "\" )\"", "\n", "", "elif", "op", "==", "\"divide\"", ":", "\n", "            ", "return", "\"( \"", "+", "arg1_part", "+", "\" / \"", "+", "arg2_part", "+", "\" )\"", "\n", "", "elif", "op", "==", "\"exp\"", ":", "\n", "            ", "return", "\"( \"", "+", "arg1_part", "+", "\" ** \"", "+", "arg2_part", "+", "\" )\"", "\n", "", "elif", "op", "==", "\"greater\"", ":", "\n", "            ", "return", "\"( \"", "+", "arg1_part", "+", "\" > \"", "+", "arg2_part", "+", "\" )\"", "\n", "\n", "\n", "# # derive symbolic program 1", "\n", "# print(program1)", "\n", "", "", "steps", "=", "program1", ".", "split", "(", "\")\"", ")", "[", ":", "-", "1", "]", "\n", "# print(steps)", "\n", "# print(steps)", "\n", "# print(sym_map)", "\n", "sym_prog1", "=", "symbol_recur", "(", "steps", "[", "-", "1", "]", ",", "step_dict_1", ")", "\n", "sym_prog1", "=", "simplify", "(", "sym_prog1", ",", "evaluate", "=", "False", ")", "\n", "# print(\"########\")", "\n", "# print(sym_prog1)", "\n", "\n", "try", ":", "\n", "# derive symbolic program 2", "\n", "        ", "steps", "=", "program2", ".", "split", "(", "\")\"", ")", "[", ":", "-", "1", "]", "\n", "sym_prog2", "=", "symbol_recur", "(", "steps", "[", "-", "1", "]", ",", "step_dict_2", ")", "\n", "sym_prog2", "=", "simplify", "(", "sym_prog2", ",", "evaluate", "=", "False", ")", "\n", "# print(sym_prog2)", "\n", "", "except", ":", "\n", "        ", "return", "False", "\n", "\n", "", "return", "sym_prog1", "==", "sym_prog2", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.evaluate.evaluate.program_tokenization": [[368, 386], ["original_program.split.split", "program.append", "program.append", "program.append", "program.append"], "function", ["None"], ["", "def", "program_tokenization", "(", "original_program", ")", ":", "\n", "    ", "original_program", "=", "original_program", ".", "split", "(", "', '", ")", "\n", "program", "=", "[", "]", "\n", "for", "tok", "in", "original_program", ":", "\n", "        ", "cur_tok", "=", "''", "\n", "for", "c", "in", "tok", ":", "\n", "            ", "if", "c", "==", "')'", ":", "\n", "                ", "if", "cur_tok", "!=", "''", ":", "\n", "                    ", "program", ".", "append", "(", "cur_tok", ")", "\n", "cur_tok", "=", "''", "\n", "", "", "cur_tok", "+=", "c", "\n", "if", "c", "in", "[", "'('", ",", "')'", "]", ":", "\n", "                ", "program", ".", "append", "(", "cur_tok", ")", "\n", "cur_tok", "=", "''", "\n", "", "", "if", "cur_tok", "!=", "''", ":", "\n", "            ", "program", ".", "append", "(", "cur_tok", ")", "\n", "", "", "program", ".", "append", "(", "'EOF'", ")", "\n", "return", "program", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.evaluate.evaluate.evaluate_result": [[389, 506], ["print", "print", "print", "open", "json.load", "open", "json.load", "evaluate.program_tokenization", "evaluate.eval_program", "evaluate.equal_program", "all_res_list.append", "float", "len", "float", "len", "len", "res_list.append", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.program_tokenization", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.eval_program", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.equal_program"], ["", "def", "evaluate_result", "(", "json_in", ",", "json_ori", ")", ":", "\n", "    ", "'''\n    execution acc\n    program acc\n    '''", "\n", "correct", "=", "0", "\n", "\n", "with", "open", "(", "json_in", ")", "as", "f_in", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f_in", ")", "\n", "\n", "", "with", "open", "(", "json_ori", ")", "as", "f_in", ":", "\n", "        ", "data_ori", "=", "json", ".", "load", "(", "f_in", ")", "\n", "\n", "", "data_dict", "=", "{", "}", "\n", "for", "each_data", "in", "data_ori", ":", "\n", "        ", "assert", "each_data", "[", "\"id\"", "]", "not", "in", "data_dict", "\n", "data_dict", "[", "each_data", "[", "\"id\"", "]", "]", "=", "each_data", "\n", "\n", "", "exe_correct", "=", "0", "\n", "prog_correct", "=", "0", "\n", "\n", "res_list", "=", "[", "]", "\n", "all_res_list", "=", "[", "]", "\n", "\n", "for", "each_data", "in", "data", ":", "\n", "        ", "each_id", "=", "each_data", "[", "\"id\"", "]", "\n", "each_ori_data", "=", "data_dict", "[", "each_id", "]", "\n", "\n", "table", "=", "each_ori_data", "[", "\"table\"", "]", "\n", "gold_res", "=", "each_ori_data", "[", "\"qa\"", "]", "[", "\"exe_ans\"", "]", "\n", "\n", "pred", "=", "each_data", "[", "\"predicted\"", "]", "\n", "gold", "=", "program_tokenization", "(", "each_ori_data", "[", "\"qa\"", "]", "[", "\"program\"", "]", ")", "\n", "\n", "# print(\"#########\")", "\n", "# print(pred)", "\n", "# print(gold)", "\n", "\n", "# if program_mode == \"nest\":", "\n", "#     if pred[-1] == \"EOF\":", "\n", "#         pred = pred[:-1]", "\n", "#     pred = reprog_to_seq(pred, is_gold=False)", "\n", "#     pred += [\"EOF\"]", "\n", "#     gold = gold[:-1]", "\n", "#     gold = reprog_to_seq(gold, is_gold=True)", "\n", "#     gold += [\"EOF\"]", "\n", "\n", "# print(\"\\n\")", "\n", "# print(\"########\")", "\n", "invalid_flag", ",", "exe_res", "=", "eval_program", "(", "pred", ",", "table", ")", "\n", "\n", "# print(invalid_flag)", "\n", "# print(exe_res)", "\n", "\n", "if", "invalid_flag", "==", "0", ":", "\n", "            ", "if", "exe_res", "==", "gold_res", ":", "\n", "                ", "exe_correct", "+=", "1", "\n", "\n", "# else:", "\n", "#     if \"\".join(gold) == \"\".join(pred):", "\n", "#         print(each_id)", "\n", "#         print(gold)", "\n", "#         print(pred)", "\n", "#         print(gold_res)", "\n", "#         print(exe_res)", "\n", "#         print(each_ori_data[\"id\"])", "\n", "\n", "\n", "", "", "if", "equal_program", "(", "gold", ",", "pred", ")", ":", "\n", "# assert exe_res == gold_res", "\n", "            ", "if", "exe_res", "!=", "gold_res", ":", "\n", "                ", "print", "(", "each_id", ")", "\n", "print", "(", "gold", ")", "\n", "print", "(", "pred", ")", "\n", "print", "(", "gold_res", ")", "\n", "print", "(", "exe_res", ")", "\n", "print", "(", "each_ori_data", "[", "\"id\"", "]", ")", "\n", "", "assert", "exe_res", "==", "gold_res", "\n", "prog_correct", "+=", "1", "\n", "if", "\"\"", ".", "join", "(", "gold", ")", "!=", "\"\"", ".", "join", "(", "pred", ")", ":", "\n", "                ", "print", "(", "each_id", ")", "\n", "print", "(", "gold", ")", "\n", "print", "(", "pred", ")", "\n", "print", "(", "gold_res", ")", "\n", "print", "(", "exe_res", ")", "\n", "print", "(", "each_ori_data", "[", "\"id\"", "]", ")", "\n", "\n", "# if \"\".join(gold) == \"\".join(pred):", "\n", "#     if not equal_program(gold, pred):", "\n", "#         print(each_id)", "\n", "#         print(gold)", "\n", "#         print(pred)", "\n", "#         print(gold_res)", "\n", "#         print(exe_res)", "\n", "#         print(each_ori_data[\"id\"])", "\n", "#     prog_correct += 1", "\n", "\n", "", "", "each_ori_data", "[", "\"qa\"", "]", "[", "\"predicted\"", "]", "=", "pred", "\n", "\n", "if", "exe_res", "!=", "gold_res", ":", "\n", "            ", "res_list", ".", "append", "(", "each_ori_data", ")", "\n", "", "all_res_list", ".", "append", "(", "each_ori_data", ")", "\n", "\n", "", "exe_acc", "=", "float", "(", "exe_correct", ")", "/", "len", "(", "data", ")", "\n", "prog_acc", "=", "float", "(", "prog_correct", ")", "/", "len", "(", "data", ")", "\n", "\n", "print", "(", "\"All: \"", ",", "len", "(", "data", ")", ")", "\n", "print", "(", "\"Exe acc: \"", ",", "exe_acc", ")", "\n", "print", "(", "\"Prog acc: \"", ",", "prog_acc", ")", "\n", "\n", "# with open(error_file, \"w\") as f:", "\n", "#     json.dump(res_list, f, indent=4)", "\n", "\n", "# with open(all_res_file, \"w\") as f:", "\n", "#     json.dump(all_res_list, f, indent=4)", "\n", "\n", "return", "exe_acc", ",", "prog_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.finqa_utils.MathQAExample.convert_single_example": [[86, 88], ["finqa_utils.convert_single_mathqa_example"], "methods", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.convert_single_mathqa_example"], ["    ", "def", "convert_single_example", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "convert_single_mathqa_example", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.finqa_utils.InputFeatures.__init__": [[93, 109], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "filename_id", ",", "\n", "retrieve_ind", ",", "\n", "tokens", ",", "\n", "input_ids", ",", "\n", "segment_ids", ",", "\n", "input_mask", ",", "\n", "label", ")", ":", "\n", "\n", "        ", "self", ".", "filename_id", "=", "filename_id", "\n", "self", ".", "retrieve_ind", "=", "retrieve_ind", "\n", "self", ".", "tokens", "=", "tokens", "\n", "self", ".", "input_ids", "=", "input_ids", "\n", "self", ".", "input_mask", "=", "input_mask", "\n", "self", ".", "segment_ids", "=", "segment_ids", "\n", "self", ".", "label", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.finqa_utils.str_to_num": [[26, 39], ["text.replace.replace", "int", "float"], "function", ["None"], ["def", "str_to_num", "(", "text", ")", ":", "\n", "    ", "text", "=", "text", ".", "replace", "(", "\",\"", ",", "\"\"", ")", "\n", "try", ":", "\n", "        ", "num", "=", "int", "(", "text", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "try", ":", "\n", "            ", "num", "=", "float", "(", "text", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "if", "text", "and", "text", "[", "-", "1", "]", "==", "\"%\"", ":", "\n", "                ", "num", "=", "text", "\n", "", "else", ":", "\n", "                ", "num", "=", "None", "\n", "", "", "", "return", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.finqa_utils.prog_token_to_indices": [[41, 63], ["enumerate", "prog_indices.append", "op_list.index", "prog_indices.append", "prog_indices.append", "numbers.index", "enumerate", "const_list.index", "finqa_utils.str_to_num", "finqa_utils.str_to_num"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.str_to_num", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.str_to_num"], ["", "def", "prog_token_to_indices", "(", "prog", ",", "numbers", ",", "number_indices", ",", "max_seq_length", ",", "\n", "op_list", ",", "op_list_size", ",", "const_list", ",", "\n", "const_list_size", ")", ":", "\n", "    ", "prog_indices", "=", "[", "]", "\n", "for", "i", ",", "token", "in", "enumerate", "(", "prog", ")", ":", "\n", "        ", "if", "token", "in", "op_list", ":", "\n", "            ", "prog_indices", ".", "append", "(", "op_list", ".", "index", "(", "token", ")", ")", "\n", "", "elif", "token", "in", "const_list", ":", "\n", "            ", "prog_indices", ".", "append", "(", "op_list_size", "+", "const_list", ".", "index", "(", "token", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "token", "in", "numbers", ":", "\n", "                ", "cur_num_idx", "=", "numbers", ".", "index", "(", "token", ")", "\n", "", "else", ":", "\n", "                ", "cur_num_idx", "=", "-", "1", "\n", "for", "num_idx", ",", "num", "in", "enumerate", "(", "numbers", ")", ":", "\n", "                    ", "if", "str_to_num", "(", "num", ")", "==", "str_to_num", "(", "token", ")", ":", "\n", "                        ", "cur_num_idx", "=", "num_idx", "\n", "break", "\n", "", "", "", "assert", "cur_num_idx", "!=", "-", "1", "\n", "prog_indices", ".", "append", "(", "op_list_size", "+", "const_list_size", "+", "\n", "number_indices", "[", "cur_num_idx", "]", ")", "\n", "", "", "return", "prog_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.finqa_utils.indices_to_prog": [[65, 77], ["enumerate", "prog.append", "prog.append", "prog.append", "number_indices.index"], "function", ["None"], ["", "def", "indices_to_prog", "(", "program_indices", ",", "numbers", ",", "number_indices", ",", "max_seq_length", ",", "\n", "op_list", ",", "op_list_size", ",", "const_list", ",", "const_list_size", ")", ":", "\n", "    ", "prog", "=", "[", "]", "\n", "for", "i", ",", "prog_id", "in", "enumerate", "(", "program_indices", ")", ":", "\n", "        ", "if", "prog_id", "<", "op_list_size", ":", "\n", "            ", "prog", ".", "append", "(", "op_list", "[", "prog_id", "]", ")", "\n", "", "elif", "prog_id", "<", "op_list_size", "+", "const_list_size", ":", "\n", "            ", "prog", ".", "append", "(", "const_list", "[", "prog_id", "-", "op_list_size", "]", ")", "\n", "", "else", ":", "\n", "            ", "prog", ".", "append", "(", "numbers", "[", "number_indices", ".", "index", "(", "prog_id", "-", "op_list_size", "\n", "-", "const_list_size", ")", "]", ")", "\n", "", "", "return", "prog", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.finqa_utils.tokenize": [[111, 148], ["text.split", "re.compile", "re.compile.match", "re.compile", "tokens.extend", "tokenizer.get_vocab", "tokens.append", "tokens.append", "tokenize_fn"], "function", ["None"], ["", "", "def", "tokenize", "(", "tokenizer", ",", "text", ",", "apply_basic_tokenization", "=", "False", ")", ":", "\n", "    ", "\"\"\"Tokenizes text, optionally looking up special tokens separately.\n\n    Args:\n      tokenizer: a tokenizer from bert.tokenization.FullTokenizer\n      text: text to tokenize\n      apply_basic_tokenization: If True, apply the basic tokenization. If False,\n        apply the full tokenization (basic + wordpiece).\n\n    Returns:\n      tokenized text.\n\n    A special token is any text with no spaces enclosed in square brackets with no\n    space, so we separate those out and look them up in the dictionary before\n    doing actual tokenization.\n    \"\"\"", "\n", "\n", "if", "conf", ".", "pretrained_model", "in", "[", "\"bert\"", ",", "\"finbert\"", "]", ":", "\n", "        ", "_SPECIAL_TOKENS_RE", "=", "re", ".", "compile", "(", "r\"^\\[[^ ]*\\]$\"", ",", "re", ".", "UNICODE", ")", "\n", "", "elif", "conf", ".", "pretrained_model", "in", "[", "\"roberta\"", ",", "\"longformer\"", "]", ":", "\n", "        ", "_SPECIAL_TOKENS_RE", "=", "re", ".", "compile", "(", "r\"^<[^ ]*>$\"", ",", "re", ".", "UNICODE", ")", "\n", "\n", "", "tokenize_fn", "=", "tokenizer", ".", "tokenize", "\n", "if", "apply_basic_tokenization", ":", "\n", "        ", "tokenize_fn", "=", "tokenizer", ".", "basic_tokenizer", ".", "tokenize", "\n", "\n", "", "tokens", "=", "[", "]", "\n", "for", "token", "in", "text", ".", "split", "(", "\" \"", ")", ":", "\n", "        ", "if", "_SPECIAL_TOKENS_RE", ".", "match", "(", "token", ")", ":", "\n", "            ", "if", "token", "in", "tokenizer", ".", "get_vocab", "(", ")", ":", "\n", "                ", "tokens", ".", "append", "(", "token", ")", "\n", "", "else", ":", "\n", "                ", "tokens", ".", "append", "(", "tokenizer", ".", "unk_token", ")", "\n", "", "", "else", ":", "\n", "            ", "tokens", ".", "extend", "(", "tokenize_fn", "(", "token", ")", ")", "\n", "\n", "", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.finqa_utils._detokenize": [[150, 159], ["text.strip.replace", "text.strip.replace", "text.strip.strip", "text.strip.split"], "function", ["None"], ["", "def", "_detokenize", "(", "tokens", ")", ":", "\n", "    ", "text", "=", "\" \"", ".", "join", "(", "tokens", ")", "\n", "\n", "text", "=", "text", ".", "replace", "(", "\" ##\"", ",", "\"\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"##\"", ",", "\"\"", ")", "\n", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "text", "=", "\" \"", ".", "join", "(", "text", ".", "split", "(", ")", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.finqa_utils.program_tokenization": [[161, 179], ["original_program.split.split", "program.append", "program.append", "program.append", "program.append"], "function", ["None"], ["", "def", "program_tokenization", "(", "original_program", ")", ":", "\n", "    ", "original_program", "=", "original_program", ".", "split", "(", "', '", ")", "\n", "program", "=", "[", "]", "\n", "for", "tok", "in", "original_program", ":", "\n", "        ", "cur_tok", "=", "''", "\n", "for", "c", "in", "tok", ":", "\n", "            ", "if", "c", "==", "')'", ":", "\n", "                ", "if", "cur_tok", "!=", "''", ":", "\n", "                    ", "program", ".", "append", "(", "cur_tok", ")", "\n", "cur_tok", "=", "''", "\n", "", "", "cur_tok", "+=", "c", "\n", "if", "c", "in", "[", "'('", ",", "')'", "]", ":", "\n", "                ", "program", ".", "append", "(", "cur_tok", ")", "\n", "cur_tok", "=", "''", "\n", "", "", "if", "cur_tok", "!=", "''", ":", "\n", "            ", "program", ".", "append", "(", "cur_tok", ")", "\n", "", "", "program", ".", "append", "(", "'EOF'", ")", "\n", "return", "program", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.finqa_utils.get_tf_idf_query_similarity": [[182, 201], ["TfidfVectorizer", "TfidfVectorizer.fit_transform", "TfidfVectorizer.transform", "cosine_similarity().flatten", "cosine_similarity"], "function", ["None"], ["", "def", "get_tf_idf_query_similarity", "(", "allDocs", ",", "query", ")", ":", "\n", "    ", "\"\"\"\n    vectorizer: TfIdfVectorizer model\n    docs_tfidf: tfidf vectors for all docs\n    query: query doc\n\n    return: cosine similarity between query and all docs\n    \"\"\"", "\n", "from", "sklearn", ".", "feature_extraction", ".", "text", "import", "TfidfVectorizer", "\n", "from", "sklearn", ".", "metrics", ".", "pairwise", "import", "cosine_similarity", "\n", "\n", "vectorizer", "=", "TfidfVectorizer", "(", "stop_words", "=", "'english'", ")", "\n", "docs_tfidf", "=", "vectorizer", ".", "fit_transform", "(", "allDocs", ")", "\n", "\n", "query_tfidf", "=", "vectorizer", ".", "transform", "(", "[", "query", "]", ")", "\n", "cosineSimilarities", "=", "cosine_similarity", "(", "query_tfidf", ",", "docs_tfidf", ")", ".", "flatten", "(", ")", "\n", "\n", "# print(cosineSimilarities)", "\n", "return", "cosineSimilarities", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.finqa_utils.wrap_single_pair": [[203, 245], ["finqa_utils.tokenize", "finqa_utils.tokenize", "segment_ids.extend", "tokenizer.convert_tokens_to_ids", "tokenizer.convert_tokens_to_ids.extend", "input_mask.extend", "segment_ids.extend", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.tokenize", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.tokenize"], ["", "def", "wrap_single_pair", "(", "tokenizer", ",", "question", ",", "context", ",", "label", ",", "max_seq_length", ",", "\n", "cls_token", ",", "sep_token", ")", ":", "\n", "    ", "'''\n    single pair of question, context, label feature\n    '''", "\n", "\n", "question_tokens", "=", "tokenize", "(", "tokenizer", ",", "question", ")", "\n", "this_gold_tokens", "=", "tokenize", "(", "tokenizer", ",", "context", ")", "\n", "\n", "tokens", "=", "[", "cls_token", "]", "+", "question_tokens", "+", "[", "sep_token", "]", "\n", "segment_ids", "=", "[", "0", "]", "*", "len", "(", "tokens", ")", "\n", "\n", "tokens", "+=", "this_gold_tokens", "\n", "segment_ids", ".", "extend", "(", "[", "0", "]", "*", "len", "(", "this_gold_tokens", ")", ")", "\n", "\n", "if", "len", "(", "tokens", ")", ">", "max_seq_length", ":", "\n", "        ", "tokens", "=", "tokens", "[", ":", "max_seq_length", "-", "1", "]", "\n", "tokens", "+=", "[", "sep_token", "]", "\n", "segment_ids", "=", "segment_ids", "[", ":", "max_seq_length", "]", "\n", "\n", "", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "padding", "=", "[", "0", "]", "*", "(", "max_seq_length", "-", "len", "(", "input_ids", ")", ")", "\n", "input_ids", ".", "extend", "(", "padding", ")", "\n", "input_mask", ".", "extend", "(", "padding", ")", "\n", "segment_ids", ".", "extend", "(", "padding", ")", "\n", "\n", "assert", "len", "(", "input_ids", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "input_mask", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "segment_ids", ")", "==", "max_seq_length", "\n", "\n", "this_input_feature", "=", "{", "\n", "\"context\"", ":", "context", ",", "\n", "\"tokens\"", ":", "tokens", ",", "\n", "\"input_ids\"", ":", "input_ids", ",", "\n", "\"input_mask\"", ":", "input_mask", ",", "\n", "\"segment_ids\"", ":", "segment_ids", ",", "\n", "\"label\"", ":", "label", "\n", "}", "\n", "\n", "return", "this_input_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.finqa_utils.convert_single_mathqa_example": [[246, 337], ["len", "six.moves.range", "six.moves.range", "six.moves.range", "six.moves.range", "six.moves.range", "six.moves.range", "finqa_utils.wrap_single_pair", "pos_features.append", "len", "len", "len", "len", "len", "finqa_utils.wrap_single_pair", "features_neg.append", "len", "general_utils.table_row_to_text", "finqa_utils.wrap_single_pair", "features_neg.append", "pos_text_ids.append", "len", "len", "len", "len", "finqa_utils.wrap_single_pair", "features_neg.append", "general_utils.table_row_to_text", "finqa_utils.wrap_single_pair", "features_neg.append", "str", "str", "int", "pos_table_ids.append", "str", "str", "gold_ind.replace", "int", "gold_ind.replace"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.retriever.finqa_utils.wrap_single_pair", "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.finqa_utils.wrap_single_pair", "home.repos.pwc.inspect_result.czyssrs_finqa.utils.general_utils.table_row_to_text", "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.finqa_utils.wrap_single_pair", "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.finqa_utils.wrap_single_pair", "home.repos.pwc.inspect_result.czyssrs_finqa.utils.general_utils.table_row_to_text", "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.finqa_utils.wrap_single_pair"], ["", "def", "convert_single_mathqa_example", "(", "example", ",", "option", ",", "is_training", ",", "tokenizer", ",", "max_seq_length", ",", "\n", "cls_token", ",", "sep_token", ")", ":", "\n", "    ", "\"\"\"Converts a single MathQAExample into Multiple Retriever Features.\"\"\"", "\n", "\"\"\" option: tf idf or all\"\"\"", "\n", "\"\"\"train: 1:3 pos neg. Test: all\"\"\"", "\n", "\n", "pos_features", "=", "[", "]", "\n", "features_neg", "=", "[", "]", "\n", "\n", "question", "=", "example", ".", "question", "\n", "all_text", "=", "example", ".", "pre_text", "+", "example", ".", "post_text", "\n", "\n", "if", "is_training", ":", "\n", "        ", "for", "gold_ind", "in", "example", ".", "all_positive", ":", "\n", "\n", "            ", "this_gold_sent", "=", "example", ".", "all_positive", "[", "gold_ind", "]", "\n", "this_input_feature", "=", "wrap_single_pair", "(", "\n", "tokenizer", ",", "question", ",", "this_gold_sent", ",", "1", ",", "max_seq_length", ",", "\n", "cls_token", ",", "sep_token", ")", "\n", "\n", "this_input_feature", "[", "\"filename_id\"", "]", "=", "example", ".", "filename_id", "\n", "this_input_feature", "[", "\"ind\"", "]", "=", "gold_ind", "\n", "pos_features", ".", "append", "(", "this_input_feature", ")", "\n", "\n", "", "num_pos_pair", "=", "len", "(", "example", ".", "all_positive", ")", "\n", "num_neg_pair", "=", "num_pos_pair", "*", "conf", ".", "neg_rate", "\n", "\n", "pos_text_ids", "=", "[", "]", "\n", "pos_table_ids", "=", "[", "]", "\n", "for", "gold_ind", "in", "example", ".", "all_positive", ":", "\n", "            ", "if", "\"text\"", "in", "gold_ind", ":", "\n", "                ", "pos_text_ids", ".", "append", "(", "int", "(", "gold_ind", ".", "replace", "(", "\"text_\"", ",", "\"\"", ")", ")", ")", "\n", "", "elif", "\"table\"", "in", "gold_ind", ":", "\n", "                ", "pos_table_ids", ".", "append", "(", "int", "(", "gold_ind", ".", "replace", "(", "\"table_\"", ",", "\"\"", ")", ")", ")", "\n", "\n", "", "", "all_text_ids", "=", "range", "(", "len", "(", "example", ".", "pre_text", ")", "+", "len", "(", "example", ".", "post_text", ")", ")", "\n", "all_table_ids", "=", "range", "(", "1", ",", "len", "(", "example", ".", "table", ")", ")", "\n", "\n", "all_negs_size", "=", "len", "(", "all_text", ")", "+", "len", "(", "example", ".", "table", ")", "-", "len", "(", "example", ".", "all_positive", ")", "\n", "if", "all_negs_size", "<", "0", ":", "\n", "            ", "all_negs_size", "=", "0", "\n", "\n", "# test: all negs", "\n", "# text", "\n", "", "for", "i", "in", "range", "(", "len", "(", "all_text", ")", ")", ":", "\n", "            ", "if", "i", "not", "in", "pos_text_ids", ":", "\n", "                ", "this_text", "=", "all_text", "[", "i", "]", "\n", "this_input_feature", "=", "wrap_single_pair", "(", "\n", "tokenizer", ",", "example", ".", "question", ",", "this_text", ",", "0", ",", "max_seq_length", ",", "\n", "cls_token", ",", "sep_token", ")", "\n", "this_input_feature", "[", "\"filename_id\"", "]", "=", "example", ".", "filename_id", "\n", "this_input_feature", "[", "\"ind\"", "]", "=", "\"text_\"", "+", "str", "(", "i", ")", "\n", "features_neg", ".", "append", "(", "this_input_feature", ")", "\n", "# table      ", "\n", "", "", "for", "this_table_id", "in", "range", "(", "len", "(", "example", ".", "table", ")", ")", ":", "\n", "            ", "if", "this_table_id", "not", "in", "pos_table_ids", ":", "\n", "                ", "this_table_row", "=", "example", ".", "table", "[", "this_table_id", "]", "\n", "this_table_line", "=", "table_row_to_text", "(", "example", ".", "table", "[", "0", "]", ",", "example", ".", "table", "[", "this_table_id", "]", ")", "\n", "this_input_feature", "=", "wrap_single_pair", "(", "\n", "tokenizer", ",", "example", ".", "question", ",", "this_table_line", ",", "0", ",", "max_seq_length", ",", "\n", "cls_token", ",", "sep_token", ")", "\n", "this_input_feature", "[", "\"filename_id\"", "]", "=", "example", ".", "filename_id", "\n", "this_input_feature", "[", "\"ind\"", "]", "=", "\"table_\"", "+", "str", "(", "this_table_id", ")", "\n", "features_neg", ".", "append", "(", "this_input_feature", ")", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "pos_features", "=", "[", "]", "\n", "features_neg", "=", "[", "]", "\n", "question", "=", "example", ".", "question", "\n", "\n", "### set label as -1 for test examples", "\n", "for", "i", "in", "range", "(", "len", "(", "all_text", ")", ")", ":", "\n", "            ", "this_text", "=", "all_text", "[", "i", "]", "\n", "this_input_feature", "=", "wrap_single_pair", "(", "\n", "tokenizer", ",", "example", ".", "question", ",", "this_text", ",", "-", "1", ",", "max_seq_length", ",", "\n", "cls_token", ",", "sep_token", ")", "\n", "this_input_feature", "[", "\"filename_id\"", "]", "=", "example", ".", "filename_id", "\n", "this_input_feature", "[", "\"ind\"", "]", "=", "\"text_\"", "+", "str", "(", "i", ")", "\n", "features_neg", ".", "append", "(", "this_input_feature", ")", "\n", "# table      ", "\n", "", "for", "this_table_id", "in", "range", "(", "len", "(", "example", ".", "table", ")", ")", ":", "\n", "            ", "this_table_row", "=", "example", ".", "table", "[", "this_table_id", "]", "\n", "this_table_line", "=", "table_row_to_text", "(", "example", ".", "table", "[", "0", "]", ",", "example", ".", "table", "[", "this_table_id", "]", ")", "\n", "this_input_feature", "=", "wrap_single_pair", "(", "\n", "tokenizer", ",", "example", ".", "question", ",", "this_table_line", ",", "-", "1", ",", "max_seq_length", ",", "\n", "cls_token", ",", "sep_token", ")", "\n", "this_input_feature", "[", "\"filename_id\"", "]", "=", "example", ".", "filename_id", "\n", "this_input_feature", "[", "\"ind\"", "]", "=", "\"table_\"", "+", "str", "(", "this_table_id", ")", "\n", "features_neg", ".", "append", "(", "this_input_feature", ")", "\n", "\n", "", "", "return", "pos_features", ",", "features_neg", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.finqa_utils.read_mathqa_entry": [[339, 359], ["finqa_utils.MathQAExample"], "function", ["None"], ["", "def", "read_mathqa_entry", "(", "entry", ",", "tokenizer", ")", ":", "\n", "\n", "    ", "filename_id", "=", "entry", "[", "\"id\"", "]", "\n", "question", "=", "entry", "[", "\"qa\"", "]", "[", "\"question\"", "]", "\n", "if", "\"gold_inds\"", "in", "entry", "[", "\"qa\"", "]", ":", "\n", "        ", "all_positive", "=", "entry", "[", "\"qa\"", "]", "[", "\"gold_inds\"", "]", "\n", "", "else", ":", "\n", "        ", "all_positive", "=", "[", "]", "\n", "\n", "", "pre_text", "=", "entry", "[", "\"pre_text\"", "]", "\n", "post_text", "=", "entry", "[", "\"post_text\"", "]", "\n", "table", "=", "entry", "[", "\"table\"", "]", "\n", "\n", "return", "MathQAExample", "(", "\n", "filename_id", "=", "filename_id", ",", "\n", "question", "=", "question", ",", "\n", "all_positive", "=", "all_positive", ",", "\n", "pre_text", "=", "pre_text", ",", "\n", "post_text", "=", "post_text", ",", "\n", "table", "=", "table", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.Test.generate": [[67, 127], ["os.path.join", "os.makedirs", "utils.DataLoader", "os.path.join", "utils.write_log", "print", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "utils.retrieve_evaluate", "len", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "model", "all_logits.extend", "all_filename_id.extend", "all_ind.extend", "utils.retrieve_evaluate", "utils.retrieve_evaluate_private", "model.tolist", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_log", "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.retrieve_evaluate", "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.retrieve_evaluate", "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.retrieve_evaluate_private"], ["def", "generate", "(", "data_ori", ",", "data", ",", "model", ",", "ksave_dir", ",", "mode", "=", "'valid'", ")", ":", "\n", "\n", "    ", "pred_list", "=", "[", "]", "\n", "pred_unk", "=", "[", "]", "\n", "\n", "ksave_dir_mode", "=", "os", ".", "path", ".", "join", "(", "ksave_dir", ",", "mode", ")", "\n", "os", ".", "makedirs", "(", "ksave_dir_mode", ",", "exist_ok", "=", "True", ")", "\n", "\n", "data_iterator", "=", "DataLoader", "(", "\n", "is_training", "=", "False", ",", "data", "=", "data", ",", "batch_size", "=", "conf", ".", "batch_size_test", ",", "shuffle", "=", "False", ")", "\n", "\n", "k", "=", "0", "\n", "all_logits", "=", "[", "]", "\n", "all_filename_id", "=", "[", "]", "\n", "all_ind", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "x", "in", "tqdm", "(", "data_iterator", ")", ":", "\n", "\n", "            ", "input_ids", "=", "x", "[", "'input_ids'", "]", "\n", "input_mask", "=", "x", "[", "'input_mask'", "]", "\n", "segment_ids", "=", "x", "[", "'segment_ids'", "]", "\n", "label", "=", "x", "[", "'label'", "]", "\n", "filename_id", "=", "x", "[", "\"filename_id\"", "]", "\n", "ind", "=", "x", "[", "\"ind\"", "]", "\n", "\n", "ori_len", "=", "len", "(", "input_ids", ")", "\n", "for", "each_item", "in", "[", "input_ids", ",", "input_mask", ",", "segment_ids", "]", ":", "\n", "                ", "if", "ori_len", "<", "conf", ".", "batch_size_test", ":", "\n", "                    ", "each_len", "=", "len", "(", "each_item", "[", "0", "]", ")", "\n", "pad_x", "=", "[", "0", "]", "*", "each_len", "\n", "each_item", "+=", "[", "pad_x", "]", "*", "(", "conf", ".", "batch_size_test", "-", "ori_len", ")", "\n", "\n", "", "", "input_ids", "=", "torch", ".", "tensor", "(", "input_ids", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "input_mask", "=", "torch", ".", "tensor", "(", "input_mask", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "segment_ids", "=", "torch", ".", "tensor", "(", "segment_ids", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "\n", "logits", "=", "model", "(", "True", ",", "input_ids", ",", "input_mask", ",", "\n", "segment_ids", ",", "device", "=", "conf", ".", "device", ")", "\n", "\n", "all_logits", ".", "extend", "(", "logits", ".", "tolist", "(", ")", ")", "\n", "all_filename_id", ".", "extend", "(", "filename_id", ")", "\n", "all_ind", ".", "extend", "(", "ind", ")", "\n", "\n", "", "", "output_prediction_file", "=", "os", ".", "path", ".", "join", "(", "ksave_dir_mode", ",", "\n", "\"predictions.json\"", ")", "\n", "\n", "if", "mode", "==", "\"valid\"", ":", "\n", "        ", "print_res", "=", "retrieve_evaluate", "(", "\n", "all_logits", ",", "all_filename_id", ",", "all_ind", ",", "output_prediction_file", ",", "conf", ".", "valid_file", ",", "topn", "=", "conf", ".", "topn", ")", "\n", "", "elif", "mode", "==", "\"test\"", ":", "\n", "        ", "print_res", "=", "retrieve_evaluate", "(", "\n", "all_logits", ",", "all_filename_id", ",", "all_ind", ",", "output_prediction_file", ",", "conf", ".", "test_file", ",", "topn", "=", "conf", ".", "topn", ")", "\n", "", "else", ":", "\n", "# private data mode", "\n", "        ", "print_res", "=", "retrieve_evaluate_private", "(", "\n", "all_logits", ",", "all_filename_id", ",", "all_ind", ",", "output_prediction_file", ",", "conf", ".", "test_file", ",", "topn", "=", "conf", ".", "topn", ")", "\n", "\n", "", "write_log", "(", "log_file", ",", "print_res", ")", "\n", "print", "(", "print_res", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.Test.generate_test": [[129, 138], ["Model.Bert_model", "torch.nn.DataParallel", "nn.DataParallel.to", "nn.DataParallel.load_state_dict", "nn.DataParallel.eval", "Test.generate", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.Test.generate"], ["", "def", "generate_test", "(", ")", ":", "\n", "    ", "model", "=", "Bert_model", "(", "hidden_size", "=", "model_config", ".", "hidden_size", ",", "\n", "dropout_rate", "=", "conf", ".", "dropout_rate", ",", ")", "\n", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", ".", "to", "(", "conf", ".", "device", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "conf", ".", "saved_model_path", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "generate", "(", "test_data", ",", "test_features", ",", "model", ",", "results_path", ",", "mode", "=", "'test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.Model.Bert_model.__init__": [[17, 34], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "BertModel.from_pretrained", "RobertaModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.DataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "dropout_rate", ")", ":", "\n", "\n", "        ", "super", "(", "Bert_model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "\n", "if", "conf", ".", "pretrained_model", "==", "\"bert\"", ":", "\n", "            ", "self", ".", "bert", "=", "BertModel", ".", "from_pretrained", "(", "\n", "conf", ".", "model_size", ",", "cache_dir", "=", "conf", ".", "cache_dir", ")", "\n", "", "elif", "conf", ".", "pretrained_model", "==", "\"roberta\"", ":", "\n", "            ", "self", ".", "bert", "=", "RobertaModel", ".", "from_pretrained", "(", "\n", "conf", ".", "model_size", ",", "cache_dir", "=", "conf", ".", "cache_dir", ")", "\n", "\n", "", "self", ".", "cls_prj", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "cls_dropout", "=", "nn", ".", "Dropout", "(", "dropout_rate", ")", "\n", "\n", "self", ".", "cls_final", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "2", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.Model.Bert_model.forward": [[35, 50], ["Model.Bert_model.bert", "Model.Bert_model.cls_prj", "Model.Bert_model.cls_dropout", "Model.Bert_model.cls_final"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "is_training", ",", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "device", ")", ":", "\n", "\n", "        ", "bert_outputs", "=", "self", ".", "bert", "(", "\n", "input_ids", "=", "input_ids", ",", "attention_mask", "=", "input_mask", ",", "token_type_ids", "=", "segment_ids", ")", "\n", "\n", "bert_sequence_output", "=", "bert_outputs", ".", "last_hidden_state", "\n", "\n", "bert_pooled_output", "=", "bert_sequence_output", "[", ":", ",", "0", ",", ":", "]", "\n", "\n", "pooled_output", "=", "self", ".", "cls_prj", "(", "bert_pooled_output", ")", "\n", "pooled_output", "=", "self", ".", "cls_dropout", "(", "pooled_output", ")", "\n", "\n", "logits", "=", "self", ".", "cls_final", "(", "pooled_output", ")", "\n", "\n", "return", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.Main.train": [[89, 171], ["utils.write_log", "utils.write_log", "Model.Bert_model", "torch.nn.DataParallel", "nn.DataParallel.to", "torch.Adam", "torch.nn.CrossEntropyLoss", "nn.DataParallel.train", "utils.DataLoader", "range", "utils.write_log", "nn.DataParallel.parameters", "time.time", "utils.DataLoader.reset", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "nn.DataParallel.zero_grad", "optim.Adam.zero_grad", "nn.DataParallel.", "nn.CrossEntropyLoss.", "this_loss.sum.sum", "this_loss.sum.backward", "optim.Adam.step", "str", "model.view", "torch.tensor().to.view", "this_loss.sum.item", "utils.write_log", "print", "nn.DataParallel.eval", "utils.write_log", "time.time", "nn.DataParallel.train", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "time.time", "print", "os.path.join", "os.makedirs", "torch.save", "torch.save", "os.path.join", "os.makedirs", "Main.evaluate", "str", "nn.DataParallel.state_dict", "str"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_log", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_log", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.Main.train", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_log", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.DataLoader.reset", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_log", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_log", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.Main.train", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.Main.evaluate"], ["def", "train", "(", ")", ":", "\n", "# keep track of all input parameters", "\n", "    ", "write_log", "(", "log_file", ",", "\"####################INPUT PARAMETERS###################\"", ")", "\n", "for", "attr", "in", "conf", ".", "__dict__", ":", "\n", "        ", "value", "=", "conf", ".", "__dict__", "[", "attr", "]", "\n", "write_log", "(", "log_file", ",", "attr", "+", "\" = \"", "+", "str", "(", "value", ")", ")", "\n", "", "write_log", "(", "log_file", ",", "\"#######################################################\"", ")", "\n", "\n", "model", "=", "Bert_model", "(", "hidden_size", "=", "model_config", ".", "hidden_size", ",", "\n", "dropout_rate", "=", "conf", ".", "dropout_rate", ",", ")", "\n", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", ".", "to", "(", "conf", ".", "device", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "conf", ".", "learning_rate", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ",", "ignore_index", "=", "-", "1", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "train_iterator", "=", "DataLoader", "(", "\n", "is_training", "=", "True", ",", "data", "=", "train_features", ",", "batch_size", "=", "conf", ".", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "k", "=", "0", "\n", "record_k", "=", "0", "\n", "record_loss_k", "=", "0", "\n", "loss", ",", "start_time", "=", "0.0", ",", "time", ".", "time", "(", ")", "\n", "record_loss", "=", "0.0", "\n", "\n", "for", "_", "in", "range", "(", "conf", ".", "epoch", ")", ":", "\n", "        ", "train_iterator", ".", "reset", "(", ")", "\n", "for", "x", "in", "train_iterator", ":", "\n", "\n", "            ", "input_ids", "=", "torch", ".", "tensor", "(", "x", "[", "'input_ids'", "]", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "input_mask", "=", "torch", ".", "tensor", "(", "x", "[", "'input_mask'", "]", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "segment_ids", "=", "torch", ".", "tensor", "(", "x", "[", "'segment_ids'", "]", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "x", "[", "'label'", "]", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "this_logits", "=", "model", "(", "True", ",", "input_ids", ",", "input_mask", ",", "\n", "segment_ids", ",", "device", "=", "conf", ".", "device", ")", "\n", "\n", "this_loss", "=", "criterion", "(", "\n", "this_logits", ".", "view", "(", "-", "1", ",", "this_logits", ".", "shape", "[", "-", "1", "]", ")", ",", "label", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "this_loss", "=", "this_loss", ".", "sum", "(", ")", "\n", "record_loss", "+=", "this_loss", ".", "item", "(", ")", "*", "100", "\n", "record_k", "+=", "1", "\n", "k", "+=", "1", "\n", "\n", "this_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "k", ">", "1", "and", "k", "%", "conf", ".", "report_loss", "==", "0", ":", "\n", "                ", "write_log", "(", "log_file", ",", "\"%d : loss = %.3f\"", "%", "\n", "(", "k", ",", "record_loss", "/", "record_k", ")", ")", "\n", "record_loss", "=", "0.0", "\n", "record_k", "=", "0", "\n", "\n", "", "if", "k", ">", "1", "and", "k", "%", "conf", ".", "report", "==", "0", ":", "\n", "                ", "print", "(", "\"Round: \"", ",", "k", "/", "conf", ".", "report", ")", "\n", "model", ".", "eval", "(", ")", "\n", "cost_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "write_log", "(", "log_file", ",", "\"%d : time = %.3f \"", "%", "\n", "(", "k", "//", "conf", ".", "report", ",", "cost_time", ")", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "k", "//", "conf", ".", "report", ">=", "1", ":", "\n", "                    ", "print", "(", "\"Val test\"", ")", "\n", "# save model", "\n", "saved_model_path_cnt", "=", "os", ".", "path", ".", "join", "(", "\n", "saved_model_path", ",", "'loads'", ",", "str", "(", "k", "//", "conf", ".", "report", ")", ")", "\n", "os", ".", "makedirs", "(", "saved_model_path_cnt", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "saved_model_path_cnt", "+", "\"/model.pt\"", ")", "\n", "\n", "results_path_cnt", "=", "os", ".", "path", ".", "join", "(", "\n", "results_path", ",", "'loads'", ",", "str", "(", "k", "//", "conf", ".", "report", ")", ")", "\n", "os", ".", "makedirs", "(", "results_path_cnt", ",", "exist_ok", "=", "True", ")", "\n", "validation_result", "=", "evaluate", "(", "\n", "valid_examples", ",", "valid_features", ",", "model", ",", "results_path_cnt", ",", "'valid'", ")", "\n", "# write_log(log_file, validation_result)", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.Main.evaluate": [[173, 229], ["os.path.join", "os.makedirs", "utils.DataLoader", "os.path.join", "utils.write_log", "print", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "utils.retrieve_evaluate", "utils.retrieve_evaluate", "len", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "model", "all_logits.extend", "all_filename_id.extend", "all_ind.extend", "model.tolist", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_log", "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.retrieve_evaluate", "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.retrieve_evaluate"], ["", "", "", "", "def", "evaluate", "(", "data_ori", ",", "data", ",", "model", ",", "ksave_dir", ",", "mode", "=", "'valid'", ")", ":", "\n", "\n", "    ", "pred_list", "=", "[", "]", "\n", "pred_unk", "=", "[", "]", "\n", "\n", "ksave_dir_mode", "=", "os", ".", "path", ".", "join", "(", "ksave_dir", ",", "mode", ")", "\n", "os", ".", "makedirs", "(", "ksave_dir_mode", ",", "exist_ok", "=", "True", ")", "\n", "\n", "data_iterator", "=", "DataLoader", "(", "\n", "is_training", "=", "False", ",", "data", "=", "data", ",", "batch_size", "=", "conf", ".", "batch_size_test", ",", "shuffle", "=", "False", ")", "\n", "\n", "k", "=", "0", "\n", "all_logits", "=", "[", "]", "\n", "all_filename_id", "=", "[", "]", "\n", "all_ind", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "x", "in", "tqdm", "(", "data_iterator", ")", ":", "\n", "\n", "            ", "input_ids", "=", "x", "[", "'input_ids'", "]", "\n", "input_mask", "=", "x", "[", "'input_mask'", "]", "\n", "segment_ids", "=", "x", "[", "'segment_ids'", "]", "\n", "label", "=", "x", "[", "'label'", "]", "\n", "filename_id", "=", "x", "[", "\"filename_id\"", "]", "\n", "ind", "=", "x", "[", "\"ind\"", "]", "\n", "\n", "ori_len", "=", "len", "(", "input_ids", ")", "\n", "for", "each_item", "in", "[", "input_ids", ",", "input_mask", ",", "segment_ids", "]", ":", "\n", "                ", "if", "ori_len", "<", "conf", ".", "batch_size_test", ":", "\n", "                    ", "each_len", "=", "len", "(", "each_item", "[", "0", "]", ")", "\n", "pad_x", "=", "[", "0", "]", "*", "each_len", "\n", "each_item", "+=", "[", "pad_x", "]", "*", "(", "conf", ".", "batch_size_test", "-", "ori_len", ")", "\n", "\n", "", "", "input_ids", "=", "torch", ".", "tensor", "(", "input_ids", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "input_mask", "=", "torch", ".", "tensor", "(", "input_mask", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "segment_ids", "=", "torch", ".", "tensor", "(", "segment_ids", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "\n", "logits", "=", "model", "(", "True", ",", "input_ids", ",", "input_mask", ",", "\n", "segment_ids", ",", "device", "=", "conf", ".", "device", ")", "\n", "\n", "all_logits", ".", "extend", "(", "logits", ".", "tolist", "(", ")", ")", "\n", "all_filename_id", ".", "extend", "(", "filename_id", ")", "\n", "all_ind", ".", "extend", "(", "ind", ")", "\n", "\n", "", "", "output_prediction_file", "=", "os", ".", "path", ".", "join", "(", "ksave_dir_mode", ",", "\n", "\"predictions.json\"", ")", "\n", "\n", "if", "mode", "==", "\"valid\"", ":", "\n", "        ", "print_res", "=", "retrieve_evaluate", "(", "\n", "all_logits", ",", "all_filename_id", ",", "all_ind", ",", "output_prediction_file", ",", "conf", ".", "valid_file", ",", "topn", "=", "conf", ".", "topn", ")", "\n", "", "else", ":", "\n", "        ", "print_res", "=", "retrieve_evaluate", "(", "\n", "all_logits", ",", "all_filename_id", ",", "all_ind", ",", "output_prediction_file", ",", "conf", ".", "test_file", ",", "topn", "=", "conf", ".", "topn", ")", "\n", "\n", "", "write_log", "(", "log_file", ",", "print_res", ")", "\n", "print", "(", "print_res", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.DataLoader.__init__": [[210, 236], ["len", "random.shuffle", "int", "int", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "is_training", ",", "data", ",", "batch_size", "=", "64", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Main dataloader\n        \"\"\"", "\n", "self", ".", "data_pos", "=", "data", "[", "0", "]", "\n", "self", ".", "data_neg", "=", "data", "[", "1", "]", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "is_training", "=", "is_training", "\n", "\n", "\n", "if", "self", ".", "is_training", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "data_neg", ")", "\n", "if", "conf", ".", "option", "==", "\"tfidf\"", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data_pos", "+", "self", ".", "data_neg", "\n", "", "else", ":", "\n", "                ", "num_neg", "=", "len", "(", "self", ".", "data_pos", ")", "*", "conf", ".", "neg_rate", "\n", "self", ".", "data", "=", "self", ".", "data_pos", "+", "self", ".", "data_neg", "[", ":", "num_neg", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "data_pos", "+", "self", ".", "data_neg", "\n", "\n", "\n", "", "self", ".", "data_size", "=", "len", "(", "self", ".", "data", ")", "\n", "self", ".", "num_batches", "=", "int", "(", "self", ".", "data_size", "/", "batch_size", ")", "if", "self", ".", "data_size", "%", "batch_size", "==", "0", "else", "int", "(", "self", ".", "data_size", "/", "batch_size", ")", "+", "1", "\n", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.DataLoader.__iter__": [[237, 239], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.DataLoader.__next__": [[240, 250], ["utils.DataLoader.get_batch"], "methods", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.DataLoader.get_batch"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "# drop last batch", "\n", "        ", "if", "self", ".", "is_training", ":", "\n", "            ", "bound", "=", "self", ".", "num_batches", "-", "1", "\n", "", "else", ":", "\n", "            ", "bound", "=", "self", ".", "num_batches", "\n", "", "if", "self", ".", "count", "<", "bound", ":", "\n", "            ", "return", "self", ".", "get_batch", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.DataLoader.__len__": [[251, 253], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.DataLoader.reset": [[254, 257], ["utils.DataLoader.shuffle_all_data"], "methods", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.DataLoader.shuffle_all_data"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "0", "\n", "self", ".", "shuffle_all_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.DataLoader.shuffle_all_data": [[258, 267], ["random.shuffle", "random.shuffle", "random.shuffle", "len"], "methods", ["None"], ["", "def", "shuffle_all_data", "(", "self", ")", ":", "\n", "        ", "if", "conf", ".", "option", "==", "\"tfidf\"", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "data", ")", "\n", "", "else", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "data_neg", ")", "\n", "num_neg", "=", "len", "(", "self", ".", "data_pos", ")", "*", "conf", ".", "neg_rate", "\n", "self", ".", "data", "=", "self", ".", "data_pos", "+", "self", ".", "data_neg", "[", ":", "num_neg", "]", "\n", "random", ".", "shuffle", "(", "self", ".", "data", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.DataLoader.get_batch": [[268, 294], ["min", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append"], "methods", ["None"], ["", "def", "get_batch", "(", "self", ")", ":", "\n", "        ", "start_index", "=", "self", ".", "count", "*", "self", ".", "batch_size", "\n", "end_index", "=", "min", "(", "(", "self", ".", "count", "+", "1", ")", "*", "self", ".", "batch_size", ",", "self", ".", "data_size", ")", "\n", "\n", "self", ".", "count", "+=", "1", "\n", "# print (self.count)", "\n", "\n", "\n", "batch_data", "=", "{", "\"input_ids\"", ":", "[", "]", ",", "\n", "\"input_mask\"", ":", "[", "]", ",", "\n", "\"segment_ids\"", ":", "[", "]", ",", "\n", "\"filename_id\"", ":", "[", "]", ",", "\n", "\"label\"", ":", "[", "]", ",", "\n", "\"ind\"", ":", "[", "]", "\n", "}", "\n", "for", "each_data", "in", "self", ".", "data", "[", "start_index", ":", "end_index", "]", ":", "\n", "\n", "            ", "batch_data", "[", "\"input_ids\"", "]", ".", "append", "(", "each_data", "[", "\"input_ids\"", "]", ")", "\n", "batch_data", "[", "\"input_mask\"", "]", ".", "append", "(", "each_data", "[", "\"input_mask\"", "]", ")", "\n", "batch_data", "[", "\"segment_ids\"", "]", ".", "append", "(", "each_data", "[", "\"segment_ids\"", "]", ")", "\n", "batch_data", "[", "\"filename_id\"", "]", ".", "append", "(", "each_data", "[", "\"filename_id\"", "]", ")", "\n", "batch_data", "[", "\"label\"", "]", ".", "append", "(", "each_data", "[", "\"label\"", "]", ")", "\n", "batch_data", "[", "\"ind\"", "]", ".", "append", "(", "each_data", "[", "\"ind\"", "]", ")", "\n", "\n", "\n", "", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.progress_bar": [[32, 74], ["int", "sys.stdout.write", "range", "sys.stdout.write", "range", "sys.stdout.write", "time.time", "L.append", "L.append", "sys.stdout.write", "range", "range", "sys.stdout.write", "sys.stdout.flush", "time.time", "int", "sys.stdout.write", "sys.stdout.write", "L.append", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "utils.format_time", "utils.format_time", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.format_time", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.format_time"], ["def", "progress_bar", "(", "current", ",", "total", ",", "msg", "=", "None", ")", ":", "\n", "    ", "global", "last_time", ",", "begin_time", "\n", "if", "current", "==", "0", ":", "\n", "        ", "begin_time", "=", "time", ".", "time", "(", ")", "# Reset for new bar.", "\n", "\n", "", "cur_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "*", "current", "/", "total", ")", "\n", "rest_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "-", "cur_len", ")", "-", "1", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "' ['", ")", "\n", "for", "i", "in", "range", "(", "cur_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'='", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'>'", ")", "\n", "for", "i", "in", "range", "(", "rest_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'.'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "']'", ")", "\n", "\n", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "cur_time", "-", "last_time", "\n", "last_time", "=", "cur_time", "\n", "tot_time", "=", "cur_time", "-", "begin_time", "\n", "\n", "L", "=", "[", "]", "\n", "L", ".", "append", "(", "'  Step: %s'", "%", "format_time", "(", "step_time", ")", ")", "\n", "L", ".", "append", "(", "' | Tot: %s'", "%", "format_time", "(", "tot_time", ")", ")", "\n", "if", "msg", ":", "\n", "        ", "L", ".", "append", "(", "' | '", "+", "msg", ")", "\n", "\n", "", "msg", "=", "''", ".", "join", "(", "L", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "msg", ")", "\n", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", ")", "-", "len", "(", "msg", ")", "-", "3", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "' '", ")", "\n", "\n", "# Go back to the center of the bar.", "\n", "", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", "/", "2", ")", "+", "2", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\b'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "' %d/%d '", "%", "(", "current", "+", "1", ",", "total", ")", ")", "\n", "\n", "if", "current", "<", "total", "-", "1", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.format_time": [[76, 107], ["int", "int", "int", "int", "int", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "format_time", "(", "seconds", ")", ":", "\n", "    ", "days", "=", "int", "(", "seconds", "/", "3600", "/", "24", ")", "\n", "seconds", "=", "seconds", "-", "days", "*", "3600", "*", "24", "\n", "hours", "=", "int", "(", "seconds", "/", "3600", ")", "\n", "seconds", "=", "seconds", "-", "hours", "*", "3600", "\n", "minutes", "=", "int", "(", "seconds", "/", "60", ")", "\n", "seconds", "=", "seconds", "-", "minutes", "*", "60", "\n", "secondsf", "=", "int", "(", "seconds", ")", "\n", "seconds", "=", "seconds", "-", "secondsf", "\n", "millis", "=", "int", "(", "seconds", "*", "1000", ")", "\n", "\n", "f", "=", "''", "\n", "i", "=", "1", "\n", "if", "days", ">", "0", ":", "\n", "        ", "f", "+=", "str", "(", "days", ")", "+", "'D'", "\n", "i", "+=", "1", "\n", "", "if", "hours", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "hours", ")", "+", "'h'", "\n", "i", "+=", "1", "\n", "", "if", "minutes", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "minutes", ")", "+", "'m'", "\n", "i", "+=", "1", "\n", "", "if", "secondsf", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "secondsf", ")", "+", "'s'", "\n", "i", "+=", "1", "\n", "", "if", "millis", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "millis", ")", "+", "'ms'", "\n", "i", "+=", "1", "\n", "", "if", "f", "==", "''", ":", "\n", "        ", "f", "=", "'0ms'", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.write_word": [[109, 113], ["open", "open.write"], "function", ["None"], ["", "def", "write_word", "(", "pred_list", ",", "save_dir", ",", "name", ")", ":", "\n", "    ", "ss", "=", "open", "(", "save_dir", "+", "name", ",", "\"w+\"", ")", "\n", "for", "item", "in", "pred_list", ":", "\n", "        ", "ss", ".", "write", "(", "\" \"", ".", "join", "(", "item", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.get_current_git_version": [[115, 120], ["git.Repo"], "function", ["None"], ["", "", "def", "get_current_git_version", "(", ")", ":", "\n", "    ", "import", "git", "\n", "repo", "=", "git", ".", "Repo", "(", "search_parent_directories", "=", "True", ")", "\n", "sha", "=", "repo", ".", "head", ".", "object", ".", "hexsha", "\n", "return", "sha", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.write_log": [[122, 126], ["print", "open", "f.write"], "function", ["None"], ["", "def", "write_log", "(", "log_file", ",", "s", ")", ":", "\n", "    ", "print", "(", "s", ")", "\n", "with", "open", "(", "log_file", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "s", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils._compute_softmax": [[128, 149], ["math.exp", "exp_scores.append", "probs.append"], "function", ["None"], ["", "", "def", "_compute_softmax", "(", "scores", ")", ":", "\n", "    ", "\"\"\"Compute softmax probability over raw logits.\"\"\"", "\n", "if", "not", "scores", ":", "\n", "        ", "return", "[", "]", "\n", "\n", "", "max_score", "=", "None", "\n", "for", "score", "in", "scores", ":", "\n", "        ", "if", "max_score", "is", "None", "or", "score", ">", "max_score", ":", "\n", "            ", "max_score", "=", "score", "\n", "\n", "", "", "exp_scores", "=", "[", "]", "\n", "total_sum", "=", "0.0", "\n", "for", "score", "in", "scores", ":", "\n", "        ", "x", "=", "math", ".", "exp", "(", "score", "-", "max_score", ")", "\n", "exp_scores", ".", "append", "(", "x", ")", "\n", "total_sum", "+=", "x", "\n", "\n", "", "probs", "=", "[", "]", "\n", "for", "score", "in", "exp_scores", ":", "\n", "        ", "probs", ".", "append", "(", "score", "/", "total_sum", ")", "\n", "", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.read_txt": [[151, 161], ["utils.write_log", "open", "input_file.readlines", "items.append", "line.strip"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_log"], ["", "def", "read_txt", "(", "input_path", ",", "log_file", ")", ":", "\n", "    ", "\"\"\"Read a txt file into a list.\"\"\"", "\n", "\n", "write_log", "(", "log_file", ",", "\"Reading: %s\"", "%", "input_path", ")", "\n", "with", "open", "(", "input_path", ")", "as", "input_file", ":", "\n", "        ", "input_data", "=", "input_file", ".", "readlines", "(", ")", "\n", "", "items", "=", "[", "]", "\n", "for", "line", "in", "input_data", ":", "\n", "        ", "items", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "return", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.read_examples": [[163, 175], ["utils.write_log", "open", "json.load", "examples.append", "finqa_utils.read_mathqa_entry"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_log", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.read_mathqa_entry"], ["", "def", "read_examples", "(", "input_path", ",", "tokenizer", ",", "op_list", ",", "const_list", ",", "log_file", ")", ":", "\n", "    ", "\"\"\"Read a json file into a list of examples.\"\"\"", "\n", "\n", "write_log", "(", "log_file", ",", "\"Reading \"", "+", "input_path", ")", "\n", "with", "open", "(", "input_path", ")", "as", "input_file", ":", "\n", "        ", "input_data", "=", "json", ".", "load", "(", "input_file", ")", "\n", "\n", "", "examples", "=", "[", "]", "\n", "for", "entry", "in", "input_data", ":", "\n", "        ", "examples", ".", "append", "(", "finqa_utils", ".", "read_mathqa_entry", "(", "entry", ",", "tokenizer", ")", ")", "\n", "\n", "", "return", "input_data", ",", "examples", ",", "op_list", ",", "const_list", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.convert_examples_to_features": [[177, 199], ["tqdm.tqdm", "enumerate", "example.convert_single_example", "res.extend", "res_neg.extend"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.MathQAExample.convert_single_example"], ["", "def", "convert_examples_to_features", "(", "examples", ",", "\n", "tokenizer", ",", "\n", "max_seq_length", ",", "\n", "option", ",", "\n", "is_training", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Converts a list of DropExamples into InputFeatures.\"\"\"", "\n", "res", "=", "[", "]", "\n", "res_neg", "=", "[", "]", "\n", "for", "(", "example_index", ",", "example", ")", "in", "tqdm", "(", "enumerate", "(", "examples", ")", ")", ":", "\n", "        ", "features", ",", "features_neg", "=", "example", ".", "convert_single_example", "(", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "max_seq_length", "=", "max_seq_length", ",", "\n", "option", "=", "option", ",", "\n", "is_training", "=", "is_training", ",", "\n", "cls_token", "=", "tokenizer", ".", "cls_token", ",", "\n", "sep_token", "=", "tokenizer", ".", "sep_token", ")", "\n", "\n", "res", ".", "extend", "(", "features", ")", "\n", "res_neg", ".", "extend", "(", "features_neg", ")", "\n", "\n", "", "return", "res", ",", "res_neg", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.write_predictions": [[202, 207], ["open", "writer.write", "json.dumps"], "function", ["None"], ["", "def", "write_predictions", "(", "all_predictions", ",", "output_prediction_file", ")", ":", "\n", "    ", "\"\"\"Writes final predictions in json format.\"\"\"", "\n", "\n", "with", "open", "(", "output_prediction_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "        ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "all_predictions", ",", "indent", "=", "4", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.cleanhtml": [[298, 302], ["re.compile", "re.sub"], "function", ["None"], ["", "", "def", "cleanhtml", "(", "raw_html", ")", ":", "\n", "    ", "cleanr", "=", "re", ".", "compile", "(", "'<.*?>'", ")", "\n", "cleantext", "=", "re", ".", "sub", "(", "cleanr", ",", "''", ",", "raw_html", ")", "\n", "return", "cleantext", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.retrieve_evaluate": [[305, 395], ["zip", "open", "json.load", "sorted", "open", "json.dump", "len", "len", "res_filename[].append", "res_filename_inds[].append", "float", "len", "float", "len", "str", "table_retrieved.append", "text_retrieved.append", "table_re_all.append", "text_re_all.append", "str"], "function", ["None"], ["", "def", "retrieve_evaluate", "(", "all_logits", ",", "all_filename_ids", ",", "all_inds", ",", "output_prediction_file", ",", "ori_file", ",", "topn", ")", ":", "\n", "    ", "'''\n    save results to file. calculate recall\n    '''", "\n", "\n", "res_filename", "=", "{", "}", "\n", "res_filename_inds", "=", "{", "}", "\n", "\n", "for", "this_logit", ",", "this_filename_id", ",", "this_ind", "in", "zip", "(", "all_logits", ",", "all_filename_ids", ",", "all_inds", ")", ":", "\n", "\n", "        ", "if", "this_filename_id", "not", "in", "res_filename", ":", "\n", "            ", "res_filename", "[", "this_filename_id", "]", "=", "[", "]", "\n", "res_filename_inds", "[", "this_filename_id", "]", "=", "[", "]", "\n", "", "if", "this_ind", "not", "in", "res_filename_inds", "[", "this_filename_id", "]", ":", "\n", "            ", "res_filename", "[", "this_filename_id", "]", ".", "append", "(", "{", "\n", "\"score\"", ":", "this_logit", "[", "1", "]", ",", "\n", "\"ind\"", ":", "this_ind", "\n", "}", ")", "\n", "res_filename_inds", "[", "this_filename_id", "]", ".", "append", "(", "this_ind", ")", "\n", "\n", "\n", "\n", "", "", "with", "open", "(", "ori_file", ")", "as", "f", ":", "\n", "        ", "data_all", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# take top ten", "\n", "", "all_recall", "=", "0.0", "\n", "all_recall_3", "=", "0.0", "\n", "\n", "for", "data", "in", "data_all", ":", "\n", "        ", "this_filename_id", "=", "data", "[", "\"id\"", "]", "\n", "\n", "this_res", "=", "res_filename", "[", "this_filename_id", "]", "\n", "\n", "sorted_dict", "=", "sorted", "(", "this_res", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "\"score\"", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "# sorted_dict = sorted_dict[:topn]", "\n", "\n", "gold_inds", "=", "data", "[", "\"qa\"", "]", "[", "\"gold_inds\"", "]", "\n", "\n", "# table rows", "\n", "table_retrieved", "=", "[", "]", "\n", "text_retrieved", "=", "[", "]", "\n", "\n", "# all retrieved", "\n", "table_re_all", "=", "[", "]", "\n", "text_re_all", "=", "[", "]", "\n", "\n", "correct", "=", "0", "\n", "correct_3", "=", "0", "\n", "\n", "for", "tmp", "in", "sorted_dict", "[", ":", "topn", "]", ":", "\n", "            ", "if", "\"table\"", "in", "tmp", "[", "\"ind\"", "]", ":", "\n", "                ", "table_retrieved", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                ", "text_retrieved", ".", "append", "(", "tmp", ")", "\n", "\n", "", "if", "tmp", "[", "\"ind\"", "]", "in", "gold_inds", ":", "\n", "                ", "correct", "+=", "1", "\n", "\n", "", "", "for", "tmp", "in", "sorted_dict", ":", "\n", "            ", "if", "\"table\"", "in", "tmp", "[", "\"ind\"", "]", ":", "\n", "                ", "table_re_all", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                ", "text_re_all", ".", "append", "(", "tmp", ")", "\n", "\n", "", "", "for", "tmp", "in", "sorted_dict", "[", ":", "3", "]", ":", "\n", "            ", "if", "tmp", "[", "\"ind\"", "]", "in", "gold_inds", ":", "\n", "                ", "correct_3", "+=", "1", "\n", "\n", "", "", "all_recall", "+=", "(", "float", "(", "correct", ")", "/", "len", "(", "gold_inds", ")", ")", "\n", "all_recall_3", "+=", "(", "float", "(", "correct_3", ")", "/", "len", "(", "gold_inds", ")", ")", "\n", "\n", "data", "[", "\"table_retrieved\"", "]", "=", "table_retrieved", "\n", "data", "[", "\"text_retrieved\"", "]", "=", "text_retrieved", "\n", "\n", "data", "[", "\"table_retrieved_all\"", "]", "=", "table_re_all", "\n", "data", "[", "\"text_retrieved_all\"", "]", "=", "text_re_all", "\n", "\n", "\n", "", "with", "open", "(", "output_prediction_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "data_all", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n", "", "res_3", "=", "all_recall_3", "/", "len", "(", "data_all", ")", "\n", "res", "=", "all_recall", "/", "len", "(", "data_all", ")", "\n", "\n", "res", "=", "\"Top 3: \"", "+", "str", "(", "res_3", ")", "+", "\"\\n\"", "+", "\"Top 5: \"", "+", "str", "(", "res", ")", "+", "\"\\n\"", "\n", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.retriever.utils.retrieve_evaluate_private": [[399, 461], ["zip", "open", "json.load", "sorted", "open", "json.dump", "res_filename[].append", "res_filename_inds[].append", "table_retrieved.append", "text_retrieved.append", "table_re_all.append", "text_re_all.append"], "function", ["None"], ["", "def", "retrieve_evaluate_private", "(", "all_logits", ",", "all_filename_ids", ",", "all_inds", ",", "output_prediction_file", ",", "ori_file", ",", "topn", ")", ":", "\n", "    ", "'''\n    save results to file. calculate recall\n    '''", "\n", "\n", "res_filename", "=", "{", "}", "\n", "res_filename_inds", "=", "{", "}", "\n", "\n", "for", "this_logit", ",", "this_filename_id", ",", "this_ind", "in", "zip", "(", "all_logits", ",", "all_filename_ids", ",", "all_inds", ")", ":", "\n", "\n", "        ", "if", "this_filename_id", "not", "in", "res_filename", ":", "\n", "            ", "res_filename", "[", "this_filename_id", "]", "=", "[", "]", "\n", "res_filename_inds", "[", "this_filename_id", "]", "=", "[", "]", "\n", "", "if", "this_ind", "not", "in", "res_filename_inds", "[", "this_filename_id", "]", ":", "\n", "            ", "res_filename", "[", "this_filename_id", "]", ".", "append", "(", "{", "\n", "\"score\"", ":", "this_logit", "[", "1", "]", ",", "\n", "\"ind\"", ":", "this_ind", "\n", "}", ")", "\n", "res_filename_inds", "[", "this_filename_id", "]", ".", "append", "(", "this_ind", ")", "\n", "\n", "", "", "with", "open", "(", "ori_file", ")", "as", "f", ":", "\n", "        ", "data_all", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "for", "data", "in", "data_all", ":", "\n", "        ", "this_filename_id", "=", "data", "[", "\"id\"", "]", "\n", "\n", "this_res", "=", "res_filename", "[", "this_filename_id", "]", "\n", "\n", "sorted_dict", "=", "sorted", "(", "this_res", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "\"score\"", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "# table rows", "\n", "table_retrieved", "=", "[", "]", "\n", "text_retrieved", "=", "[", "]", "\n", "\n", "# all retrieved", "\n", "table_re_all", "=", "[", "]", "\n", "text_re_all", "=", "[", "]", "\n", "\n", "for", "tmp", "in", "sorted_dict", "[", ":", "topn", "]", ":", "\n", "            ", "if", "\"table\"", "in", "tmp", "[", "\"ind\"", "]", ":", "\n", "                ", "table_retrieved", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                ", "text_retrieved", ".", "append", "(", "tmp", ")", "\n", "\n", "\n", "", "", "for", "tmp", "in", "sorted_dict", ":", "\n", "            ", "if", "\"table\"", "in", "tmp", "[", "\"ind\"", "]", ":", "\n", "                ", "table_re_all", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                ", "text_re_all", ".", "append", "(", "tmp", ")", "\n", "\n", "", "", "data", "[", "\"table_restrieved\"", "]", "=", "table_retrieved", "\n", "data", "[", "\"text_retrieved\"", "]", "=", "text_retrieved", "\n", "\n", "data", "[", "\"table_retrieved_all\"", "]", "=", "table_re_all", "\n", "data", "[", "\"text_retrieved_all\"", "]", "=", "text_re_all", "\n", "\n", "\n", "", "with", "open", "(", "output_prediction_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "data_all", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n", "", "return", "\"private, no res\"", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.MathQAExample.convert_single_example": [[86, 88], ["finqa_utils.convert_single_mathqa_example"], "methods", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.convert_single_mathqa_example"], ["    ", "def", "convert_single_example", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "convert_single_mathqa_example", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.InputFeatures.__init__": [[93, 122], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "filename_id", ",", "\n", "retrieve_ind", ",", "\n", "tokens", ",", "\n", "input_ids", ",", "\n", "segment_ids", ",", "\n", "input_mask", ",", "\n", "label", ")", ":", "\n", "\n", "        ", "self", ".", "filename_id", "=", "filename_id", "\n", "self", ".", "retrieve_ind", "=", "retrieve_ind", "\n", "self", ".", "tokens", "=", "tokens", "\n", "self", ".", "input_ids", "=", "input_ids", "\n", "self", ".", "input_mask", "=", "input_mask", "\n", "self", ".", "segment_ids", "=", "segment_ids", "\n", "self", ".", "label", "=", "label", "\n", "\n", "\n", "", "", "def", "tokenize", "(", "tokenizer", ",", "text", ",", "apply_basic_tokenization", "=", "False", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.str_to_num": [[26, 39], ["text.replace.replace", "int", "float"], "function", ["None"], ["def", "str_to_num", "(", "text", ")", ":", "\n", "    ", "text", "=", "text", ".", "replace", "(", "\",\"", ",", "\"\"", ")", "\n", "try", ":", "\n", "        ", "num", "=", "int", "(", "text", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "try", ":", "\n", "            ", "num", "=", "float", "(", "text", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "if", "text", "and", "text", "[", "-", "1", "]", "==", "\"%\"", ":", "\n", "                ", "num", "=", "text", "\n", "", "else", ":", "\n", "                ", "num", "=", "None", "\n", "", "", "", "return", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.prog_token_to_indices": [[41, 63], ["enumerate", "prog_indices.append", "op_list.index", "prog_indices.append", "prog_indices.append", "numbers.index", "enumerate", "const_list.index", "finqa_utils.str_to_num", "finqa_utils.str_to_num"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.str_to_num", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.str_to_num"], ["", "def", "prog_token_to_indices", "(", "prog", ",", "numbers", ",", "number_indices", ",", "max_seq_length", ",", "\n", "op_list", ",", "op_list_size", ",", "const_list", ",", "\n", "const_list_size", ")", ":", "\n", "    ", "prog_indices", "=", "[", "]", "\n", "for", "i", ",", "token", "in", "enumerate", "(", "prog", ")", ":", "\n", "        ", "if", "token", "in", "op_list", ":", "\n", "            ", "prog_indices", ".", "append", "(", "op_list", ".", "index", "(", "token", ")", ")", "\n", "", "elif", "token", "in", "const_list", ":", "\n", "            ", "prog_indices", ".", "append", "(", "op_list_size", "+", "const_list", ".", "index", "(", "token", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "token", "in", "numbers", ":", "\n", "                ", "cur_num_idx", "=", "numbers", ".", "index", "(", "token", ")", "\n", "", "else", ":", "\n", "                ", "cur_num_idx", "=", "-", "1", "\n", "for", "num_idx", ",", "num", "in", "enumerate", "(", "numbers", ")", ":", "\n", "                    ", "if", "str_to_num", "(", "num", ")", "==", "str_to_num", "(", "token", ")", ":", "\n", "                        ", "cur_num_idx", "=", "num_idx", "\n", "break", "\n", "", "", "", "assert", "cur_num_idx", "!=", "-", "1", "\n", "prog_indices", ".", "append", "(", "op_list_size", "+", "const_list_size", "+", "\n", "number_indices", "[", "cur_num_idx", "]", ")", "\n", "", "", "return", "prog_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.indices_to_prog": [[65, 77], ["enumerate", "prog.append", "prog.append", "prog.append", "number_indices.index"], "function", ["None"], ["", "def", "indices_to_prog", "(", "program_indices", ",", "numbers", ",", "number_indices", ",", "max_seq_length", ",", "\n", "op_list", ",", "op_list_size", ",", "const_list", ",", "const_list_size", ")", ":", "\n", "    ", "prog", "=", "[", "]", "\n", "for", "i", ",", "prog_id", "in", "enumerate", "(", "program_indices", ")", ":", "\n", "        ", "if", "prog_id", "<", "op_list_size", ":", "\n", "            ", "prog", ".", "append", "(", "op_list", "[", "prog_id", "]", ")", "\n", "", "elif", "prog_id", "<", "op_list_size", "+", "const_list_size", ":", "\n", "            ", "prog", ".", "append", "(", "const_list", "[", "prog_id", "-", "op_list_size", "]", ")", "\n", "", "else", ":", "\n", "            ", "prog", ".", "append", "(", "numbers", "[", "number_indices", ".", "index", "(", "prog_id", "-", "op_list_size", "\n", "-", "const_list_size", ")", "]", ")", "\n", "", "", "return", "prog", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.tokenize": [[124, 161], ["text.split", "re.compile", "re.compile.match", "re.compile", "tokens.extend", "tokenizer.get_vocab", "tokens.append", "tokens.append", "tokenize_fn"], "function", ["None"], ["\n", "\n", "if", "conf", ".", "pretrained_model", "in", "[", "\"bert\"", ",", "\"finbert\"", "]", ":", "\n", "        ", "_SPECIAL_TOKENS_RE", "=", "re", ".", "compile", "(", "r\"^\\[[^ ]*\\]$\"", ",", "re", ".", "UNICODE", ")", "\n", "", "elif", "conf", ".", "pretrained_model", "in", "[", "\"roberta\"", ",", "\"longformer\"", "]", ":", "\n", "        ", "_SPECIAL_TOKENS_RE", "=", "re", ".", "compile", "(", "r\"^<[^ ]*>$\"", ",", "re", ".", "UNICODE", ")", "\n", "\n", "", "tokenize_fn", "=", "tokenizer", ".", "tokenize", "\n", "if", "apply_basic_tokenization", ":", "\n", "        ", "tokenize_fn", "=", "tokenizer", ".", "basic_tokenizer", ".", "tokenize", "\n", "\n", "", "tokens", "=", "[", "]", "\n", "for", "token", "in", "text", ".", "split", "(", "\" \"", ")", ":", "\n", "        ", "if", "_SPECIAL_TOKENS_RE", ".", "match", "(", "token", ")", ":", "\n", "            ", "if", "token", "in", "tokenizer", ".", "get_vocab", "(", ")", ":", "\n", "                ", "tokens", ".", "append", "(", "token", ")", "\n", "", "else", ":", "\n", "                ", "tokens", ".", "append", "(", "tokenizer", ".", "unk_token", ")", "\n", "", "", "else", ":", "\n", "            ", "tokens", ".", "extend", "(", "tokenize_fn", "(", "token", ")", ")", "\n", "\n", "", "", "return", "tokens", "\n", "\n", "\n", "", "def", "_detokenize", "(", "tokens", ")", ":", "\n", "    ", "text", "=", "\" \"", ".", "join", "(", "tokens", ")", "\n", "\n", "text", "=", "text", ".", "replace", "(", "\" ##\"", ",", "\"\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"##\"", ",", "\"\"", ")", "\n", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "text", "=", "\" \"", ".", "join", "(", "text", ".", "split", "(", ")", ")", "\n", "return", "text", "\n", "\n", "\n", "", "def", "program_tokenization", "(", "original_program", ")", ":", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils._detokenize": [[163, 172], ["text.strip.replace", "text.strip.replace", "text.strip.strip", "text.strip.split"], "function", ["None"], ["program", "=", "[", "]", "\n", "for", "tok", "in", "original_program", ":", "\n", "        ", "cur_tok", "=", "''", "\n", "for", "c", "in", "tok", ":", "\n", "            ", "if", "c", "==", "')'", ":", "\n", "                ", "if", "cur_tok", "!=", "''", ":", "\n", "                    ", "program", ".", "append", "(", "cur_tok", ")", "\n", "cur_tok", "=", "''", "\n", "", "", "cur_tok", "+=", "c", "\n", "if", "c", "in", "[", "'('", ",", "')'", "]", ":", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.program_tokenization": [[174, 192], ["original_program.split.split", "program.append", "program.append", "program.append", "program.append"], "function", ["None"], ["cur_tok", "=", "''", "\n", "", "", "if", "cur_tok", "!=", "''", ":", "\n", "            ", "program", ".", "append", "(", "cur_tok", ")", "\n", "", "", "program", ".", "append", "(", "'EOF'", ")", "\n", "return", "program", "\n", "\n", "\n", "\n", "", "def", "get_tf_idf_query_similarity", "(", "allDocs", ",", "query", ")", ":", "\n", "    ", "\"\"\"\n    vectorizer: TfIdfVectorizer model\n    docs_tfidf: tfidf vectors for all docs\n    query: query doc\n\n    return: cosine similarity between query and all docs\n    \"\"\"", "\n", "from", "sklearn", ".", "feature_extraction", ".", "text", "import", "TfidfVectorizer", "\n", "from", "sklearn", ".", "metrics", ".", "pairwise", "import", "cosine_similarity", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.convert_single_mathqa_example": [[194, 291], ["tokenizer.convert_tokens_to_ids", "enumerate", "tokenizer.convert_tokens_to_ids.extend", "input_mask.extend", "segment_ids.extend", "six.moves.range", "six.moves.range", "features.append", "len", "print", "len", "len", "len", "len", "len", "len", "float", "len", "finqa_utils.prog_token_to_indices", "len", "len", "finqa_utils.InputFeatures", "len", "len", "len", "len", "prog_token_to_indices.extend", "program_mask.extend", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.prog_token_to_indices"], ["docs_tfidf", "=", "vectorizer", ".", "fit_transform", "(", "allDocs", ")", "\n", "\n", "query_tfidf", "=", "vectorizer", ".", "transform", "(", "[", "query", "]", ")", "\n", "cosineSimilarities", "=", "cosine_similarity", "(", "query_tfidf", ",", "docs_tfidf", ")", ".", "flatten", "(", ")", "\n", "\n", "# print(cosineSimilarities)", "\n", "return", "cosineSimilarities", "\n", "\n", "\n", "", "def", "wrap_single_pair", "(", "tokenizer", ",", "question", ",", "context", ",", "label", ",", "max_seq_length", ",", "\n", "cls_token", ",", "sep_token", ")", ":", "\n", "    ", "'''\n    single pair of question, context, label feature\n    '''", "\n", "\n", "question_tokens", "=", "tokenize", "(", "tokenizer", ",", "question", ")", "\n", "this_gold_tokens", "=", "tokenize", "(", "tokenizer", ",", "context", ")", "\n", "\n", "tokens", "=", "[", "cls_token", "]", "+", "question_tokens", "+", "[", "sep_token", "]", "\n", "segment_ids", "=", "[", "0", "]", "*", "len", "(", "tokens", ")", "\n", "\n", "tokens", "+=", "this_gold_tokens", "\n", "segment_ids", ".", "extend", "(", "[", "0", "]", "*", "len", "(", "this_gold_tokens", ")", ")", "\n", "\n", "if", "len", "(", "tokens", ")", ">", "max_seq_length", ":", "\n", "        ", "tokens", "=", "tokens", "[", ":", "max_seq_length", "-", "1", "]", "\n", "tokens", "+=", "[", "sep_token", "]", "\n", "segment_ids", "=", "segment_ids", "[", ":", "max_seq_length", "]", "\n", "\n", "", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "padding", "=", "[", "0", "]", "*", "(", "max_seq_length", "-", "len", "(", "input_ids", ")", ")", "\n", "input_ids", ".", "extend", "(", "padding", ")", "\n", "input_mask", ".", "extend", "(", "padding", ")", "\n", "segment_ids", ".", "extend", "(", "padding", ")", "\n", "\n", "assert", "len", "(", "input_ids", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "input_mask", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "segment_ids", ")", "==", "max_seq_length", "\n", "\n", "this_input_feature", "=", "{", "\n", "\"context\"", ":", "context", ",", "\n", "\"tokens\"", ":", "tokens", ",", "\n", "\"input_ids\"", ":", "input_ids", ",", "\n", "\"input_mask\"", ":", "input_mask", ",", "\n", "\"segment_ids\"", ":", "segment_ids", ",", "\n", "\"label\"", ":", "label", "\n", "}", "\n", "\n", "return", "this_input_feature", "\n", "\n", "", "def", "convert_single_mathqa_example", "(", "example", ",", "option", ",", "is_training", ",", "tokenizer", ",", "max_seq_length", ",", "\n", "cls_token", ",", "sep_token", ")", ":", "\n", "    ", "\"\"\"Converts a single MathQAExample into Multiple Retriever Features.\"\"\"", "\n", "\"\"\" option: tf idf or all\"\"\"", "\n", "\"\"\"train: 1:3 pos neg. Test: all\"\"\"", "\n", "\n", "pos_features", "=", "[", "]", "\n", "features_neg", "=", "[", "]", "\n", "\n", "question", "=", "example", ".", "question", "\n", "all_text", "=", "example", ".", "pre_text", "+", "example", ".", "post_text", "\n", "\n", "if", "is_training", ":", "\n", "        ", "for", "gold_ind", "in", "example", ".", "all_positive", ":", "\n", "\n", "            ", "this_gold_sent", "=", "example", ".", "all_positive", "[", "gold_ind", "]", "\n", "this_input_feature", "=", "wrap_single_pair", "(", "\n", "tokenizer", ",", "question", ",", "this_gold_sent", ",", "1", ",", "max_seq_length", ",", "\n", "cls_token", ",", "sep_token", ")", "\n", "\n", "this_input_feature", "[", "\"filename_id\"", "]", "=", "example", ".", "filename_id", "\n", "this_input_feature", "[", "\"ind\"", "]", "=", "gold_ind", "\n", "pos_features", ".", "append", "(", "this_input_feature", ")", "\n", "\n", "", "num_pos_pair", "=", "len", "(", "example", ".", "all_positive", ")", "\n", "num_neg_pair", "=", "num_pos_pair", "*", "conf", ".", "neg_rate", "\n", "\n", "pos_text_ids", "=", "[", "]", "\n", "pos_table_ids", "=", "[", "]", "\n", "for", "gold_ind", "in", "example", ".", "all_positive", ":", "\n", "            ", "if", "\"text\"", "in", "gold_ind", ":", "\n", "                ", "pos_text_ids", ".", "append", "(", "int", "(", "gold_ind", ".", "replace", "(", "\"text_\"", ",", "\"\"", ")", ")", ")", "\n", "", "elif", "\"table\"", "in", "gold_ind", ":", "\n", "                ", "pos_table_ids", ".", "append", "(", "int", "(", "gold_ind", ".", "replace", "(", "\"table_\"", ",", "\"\"", ")", ")", ")", "\n", "\n", "", "", "all_text_ids", "=", "range", "(", "len", "(", "example", ".", "pre_text", ")", "+", "len", "(", "example", ".", "post_text", ")", ")", "\n", "all_table_ids", "=", "range", "(", "1", ",", "len", "(", "example", ".", "table", ")", ")", "\n", "\n", "all_negs_size", "=", "len", "(", "all_text", ")", "+", "len", "(", "example", ".", "table", ")", "-", "len", "(", "example", ".", "all_positive", ")", "\n", "if", "all_negs_size", "<", "0", ":", "\n", "            ", "all_negs_size", "=", "0", "\n", "\n", "# test: all negs", "\n", "# text", "\n", "", "for", "i", "in", "range", "(", "len", "(", "all_text", ")", ")", ":", "\n", "            ", "if", "i", "not", "in", "pos_text_ids", ":", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.read_mathqa_entry": [[293, 396], ["context.replace.strip", "context.replace.replace", "context.replace.replace", "original_question.split", "enumerate", "finqa_utils.MathQAExample", "context.replace.strip", "finqa_utils.str_to_num", "finqa_utils.tokenize", "question_tokens.extend", "numbers.append", "number_indices.append", "numbers.append", "original_question.index", "number_indices.append", "finqa_utils.program_tokenization", "len", "len", "numbers.append", "number_indices.append", "finqa_utils.program_tokenization", "random.choice", "str", "len", "general_utils.table_row_to_text", "finqa_utils.str_to_num", "len", "finqa_utils.tokenize"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.str_to_num", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.tokenize", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.program_tokenization", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.program_tokenization", "home.repos.pwc.inspect_result.czyssrs_finqa.utils.general_utils.table_row_to_text", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.str_to_num", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.tokenize"], ["this_input_feature", "=", "wrap_single_pair", "(", "\n", "tokenizer", ",", "example", ".", "question", ",", "this_text", ",", "0", ",", "max_seq_length", ",", "\n", "cls_token", ",", "sep_token", ")", "\n", "this_input_feature", "[", "\"filename_id\"", "]", "=", "example", ".", "filename_id", "\n", "this_input_feature", "[", "\"ind\"", "]", "=", "\"text_\"", "+", "str", "(", "i", ")", "\n", "features_neg", ".", "append", "(", "this_input_feature", ")", "\n", "# table      ", "\n", "", "", "for", "this_table_id", "in", "range", "(", "len", "(", "example", ".", "table", ")", ")", ":", "\n", "            ", "if", "this_table_id", "not", "in", "pos_table_ids", ":", "\n", "                ", "this_table_row", "=", "example", ".", "table", "[", "this_table_id", "]", "\n", "this_table_line", "=", "table_row_to_text", "(", "example", ".", "table", "[", "0", "]", ",", "example", ".", "table", "[", "this_table_id", "]", ")", "\n", "this_input_feature", "=", "wrap_single_pair", "(", "\n", "tokenizer", ",", "example", ".", "question", ",", "this_table_line", ",", "0", ",", "max_seq_length", ",", "\n", "cls_token", ",", "sep_token", ")", "\n", "this_input_feature", "[", "\"filename_id\"", "]", "=", "example", ".", "filename_id", "\n", "this_input_feature", "[", "\"ind\"", "]", "=", "\"table_\"", "+", "str", "(", "this_table_id", ")", "\n", "features_neg", ".", "append", "(", "this_input_feature", ")", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "pos_features", "=", "[", "]", "\n", "features_neg", "=", "[", "]", "\n", "question", "=", "example", ".", "question", "\n", "\n", "### set label as -1 for test examples", "\n", "for", "i", "in", "range", "(", "len", "(", "all_text", ")", ")", ":", "\n", "            ", "this_text", "=", "all_text", "[", "i", "]", "\n", "this_input_feature", "=", "wrap_single_pair", "(", "\n", "tokenizer", ",", "example", ".", "question", ",", "this_text", ",", "-", "1", ",", "max_seq_length", ",", "\n", "cls_token", ",", "sep_token", ")", "\n", "this_input_feature", "[", "\"filename_id\"", "]", "=", "example", ".", "filename_id", "\n", "this_input_feature", "[", "\"ind\"", "]", "=", "\"text_\"", "+", "str", "(", "i", ")", "\n", "features_neg", ".", "append", "(", "this_input_feature", ")", "\n", "# table      ", "\n", "", "for", "this_table_id", "in", "range", "(", "len", "(", "example", ".", "table", ")", ")", ":", "\n", "            ", "this_table_row", "=", "example", ".", "table", "[", "this_table_id", "]", "\n", "this_table_line", "=", "table_row_to_text", "(", "example", ".", "table", "[", "0", "]", ",", "example", ".", "table", "[", "this_table_id", "]", ")", "\n", "this_input_feature", "=", "wrap_single_pair", "(", "\n", "tokenizer", ",", "example", ".", "question", ",", "this_table_line", ",", "-", "1", ",", "max_seq_length", ",", "\n", "cls_token", ",", "sep_token", ")", "\n", "this_input_feature", "[", "\"filename_id\"", "]", "=", "example", ".", "filename_id", "\n", "this_input_feature", "[", "\"ind\"", "]", "=", "\"table_\"", "+", "str", "(", "this_table_id", ")", "\n", "features_neg", ".", "append", "(", "this_input_feature", ")", "\n", "\n", "", "", "return", "pos_features", ",", "features_neg", "\n", "\n", "\n", "", "def", "read_mathqa_entry", "(", "entry", ",", "tokenizer", ")", ":", "\n", "\n", "    ", "filename_id", "=", "entry", "[", "\"id\"", "]", "\n", "question", "=", "entry", "[", "\"qa\"", "]", "[", "\"question\"", "]", "\n", "if", "\"gold_inds\"", "in", "entry", "[", "\"qa\"", "]", ":", "\n", "        ", "all_positive", "=", "entry", "[", "\"qa\"", "]", "[", "\"gold_inds\"", "]", "\n", "", "else", ":", "\n", "        ", "all_positive", "=", "[", "]", "\n", "\n", "", "pre_text", "=", "entry", "[", "\"pre_text\"", "]", "\n", "post_text", "=", "entry", "[", "\"post_text\"", "]", "\n", "table", "=", "entry", "[", "\"table\"", "]", "\n", "\n", "return", "MathQAExample", "(", "\n", "filename_id", "=", "filename_id", ",", "\n", "question", "=", "question", ",", "\n", "all_positive", "=", "all_positive", ",", "\n", "pre_text", "=", "pre_text", ",", "\n", "post_text", "=", "post_text", ",", "\n", "table", "=", "table", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.Model_new.Bert_model.__init__": [[21, 133], ["torch.nn.Module.__init__", "len", "len", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "range", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "all_tmp_list.index", "BertModel.from_pretrained", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "op_list.index", "op_list.index", "op_list.index", "RobertaModel.from_pretrained", "op_list.index", "op_list.index", "str", "BertModel.from_pretrained", "op_list.index", "LongformerModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.DataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_decoder_layers", ",", "hidden_size", ",", "dropout_rate", ",", "input_length", ",", "\n", "program_length", ",", "op_list", ",", "const_list", ")", ":", "\n", "\n", "        ", "super", "(", "Bert_model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "op_list_size", "=", "len", "(", "op_list", ")", "\n", "self", ".", "const_list_size", "=", "len", "(", "const_list", ")", "\n", "self", ".", "reserved_token_size", "=", "self", ".", "op_list_size", "+", "self", ".", "const_list_size", "\n", "self", ".", "program_length", "=", "program_length", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "const_list", "=", "const_list", "\n", "self", ".", "op_list", "=", "op_list", "\n", "self", ".", "input_length", "=", "input_length", "\n", "\n", "self", ".", "reserved_ind", "=", "nn", ".", "Parameter", "(", "torch", ".", "arange", "(", "\n", "0", ",", "self", ".", "reserved_token_size", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "reserved_go", "=", "nn", ".", "Parameter", "(", "torch", ".", "arange", "(", "op_list", ".", "index", "(", "\n", "'GO'", ")", ",", "op_list", ".", "index", "(", "'GO'", ")", "+", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "reserved_para", "=", "nn", ".", "Parameter", "(", "torch", ".", "arange", "(", "op_list", ".", "index", "(", "\n", "')'", ")", ",", "op_list", ".", "index", "(", "')'", ")", "+", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# masking for decoidng for test time", "\n", "op_ones", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "\n", "self", ".", "op_list_size", ")", ",", "requires_grad", "=", "False", ")", "\n", "op_zeros", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "\n", "self", ".", "op_list_size", ")", ",", "requires_grad", "=", "False", ")", "\n", "other_ones", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "\n", "input_length", "+", "self", ".", "const_list_size", ")", ",", "requires_grad", "=", "False", ")", "\n", "other_zeros", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "\n", "input_length", "+", "self", ".", "const_list_size", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "op_only_mask", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "cat", "(", "(", "op_ones", ",", "other_zeros", ")", ",", "0", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "seq_only_mask", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "cat", "(", "(", "op_zeros", ",", "other_ones", ")", ",", "0", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# for \")\"", "\n", "para_before_ones", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "\n", "op_list", ".", "index", "(", "')'", ")", ")", ",", "requires_grad", "=", "False", ")", "\n", "para_after_ones", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "\n", "input_length", "+", "self", ".", "reserved_token_size", "-", "op_list", ".", "index", "(", "')'", ")", "-", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "para_zero", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "para_mask", "=", "nn", ".", "Parameter", "(", "torch", ".", "cat", "(", "\n", "(", "para_before_ones", ",", "para_zero", ",", "para_after_ones", ")", ",", "0", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# for step embedding", "\n", "# self.step_masks = []", "\n", "all_tmp_list", "=", "self", ".", "op_list", "+", "self", ".", "const_list", "\n", "self", ".", "step_masks", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "\n", "conf", ".", "max_step_ind", ",", "input_length", "+", "self", ".", "reserved_token_size", ")", ",", "requires_grad", "=", "False", ")", "\n", "for", "i", "in", "range", "(", "conf", ".", "max_step_ind", ")", ":", "\n", "            ", "this_step_mask_ind", "=", "all_tmp_list", ".", "index", "(", "\"#\"", "+", "str", "(", "i", ")", ")", "\n", "self", ".", "step_masks", "[", "i", ",", "this_step_mask_ind", "]", "=", "1.0", "\n", "\n", "# self.step_mask_eye = torch.eye(conf.max_step_ind)", "\n", "\n", "", "if", "conf", ".", "pretrained_model", "==", "\"bert\"", ":", "\n", "            ", "self", ".", "bert", "=", "BertModel", ".", "from_pretrained", "(", "\n", "conf", ".", "model_size", ",", "cache_dir", "=", "conf", ".", "cache_dir", ")", "\n", "", "elif", "conf", ".", "pretrained_model", "==", "\"roberta\"", ":", "\n", "            ", "self", ".", "bert", "=", "RobertaModel", ".", "from_pretrained", "(", "\n", "conf", ".", "model_size", ",", "cache_dir", "=", "conf", ".", "cache_dir", ")", "\n", "", "elif", "conf", ".", "pretrained_model", "==", "\"finbert\"", ":", "\n", "            ", "self", ".", "bert", "=", "BertModel", ".", "from_pretrained", "(", "\n", "conf", ".", "model_size", ",", "cache_dir", "=", "conf", ".", "cache_dir", ")", "\n", "", "elif", "conf", ".", "pretrained_model", "==", "\"longformer\"", ":", "\n", "            ", "self", ".", "bert", "=", "LongformerModel", ".", "from_pretrained", "(", "\n", "conf", ".", "model_size", ",", "cache_dir", "=", "conf", ".", "cache_dir", ")", "\n", "\n", "", "self", ".", "cls_prj", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "cls_dropout", "=", "nn", ".", "Dropout", "(", "dropout_rate", ")", "\n", "\n", "self", ".", "seq_prj", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "seq_dropout", "=", "nn", ".", "Dropout", "(", "dropout_rate", ")", "\n", "\n", "self", ".", "reserved_token_embedding", "=", "nn", ".", "Embedding", "(", "\n", "self", ".", "reserved_token_size", ",", "hidden_size", ")", "\n", "\n", "# attentions", "\n", "self", ".", "decoder_history_attn_prj", "=", "nn", ".", "Linear", "(", "\n", "hidden_size", ",", "hidden_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "decoder_history_attn_dropout", "=", "nn", ".", "Dropout", "(", "dropout_rate", ")", "\n", "\n", "self", ".", "question_attn_prj", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "question_attn_dropout", "=", "nn", ".", "Dropout", "(", "dropout_rate", ")", "\n", "\n", "self", ".", "question_summary_attn_prj", "=", "nn", ".", "Linear", "(", "\n", "hidden_size", ",", "hidden_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "question_summary_attn_dropout", "=", "nn", ".", "Dropout", "(", "dropout_rate", ")", "\n", "\n", "if", "conf", ".", "sep_attention", ":", "\n", "            ", "self", ".", "input_embeddings_prj", "=", "nn", ".", "Linear", "(", "\n", "hidden_size", "*", "3", ",", "hidden_size", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_embeddings_prj", "=", "nn", ".", "Linear", "(", "\n", "hidden_size", "*", "2", ",", "hidden_size", ",", "bias", "=", "True", ")", "\n", "", "self", ".", "input_embeddings_layernorm", "=", "nn", ".", "LayerNorm", "(", "[", "1", ",", "hidden_size", "]", ")", "\n", "\n", "self", ".", "option_embeddings_prj", "=", "nn", ".", "Linear", "(", "\n", "hidden_size", "*", "2", ",", "hidden_size", ",", "bias", "=", "True", ")", "\n", "\n", "# decoder lstm", "\n", "self", ".", "rnn", "=", "torch", ".", "nn", ".", "LSTM", "(", "input_size", "=", "hidden_size", ",", "hidden_size", "=", "hidden_size", ",", "\n", "num_layers", "=", "conf", ".", "num_decoder_layers", ",", "batch_first", "=", "True", ")", "\n", "\n", "# step vector", "\n", "self", ".", "decoder_step_proj", "=", "nn", ".", "Linear", "(", "\n", "3", "*", "hidden_size", ",", "hidden_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "decoder_step_proj_dropout", "=", "nn", ".", "Dropout", "(", "dropout_rate", ")", "\n", "\n", "self", ".", "step_mix_proj", "=", "nn", ".", "Linear", "(", "\n", "hidden_size", "*", "2", ",", "hidden_size", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.Model_new.Bert_model.forward": [[134, 323], ["Model_new.Bert_model.bert", "list", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "Model_new.Bert_model.cls_prj", "Model_new.Bert_model.cls_dropout", "Model_new.Bert_model.seq_prj", "Model_new.Bert_model.seq_dropout", "Model_new.Bert_model.reserved_token_embedding", "op_embeddings.repeat.repeat.repeat", "Model_new.Bert_model.reserved_token_embedding", "Model_new.Bert_model.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "input_mask.float", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "bert_sequence_output.size", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "Model_new.Bert_model.decoder_history_attn_prj", "Model_new.Bert_model.decoder_history_attn_dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "Model_new.Bert_model.question_summary_attn_prj", "Model_new.Bert_model.question_summary_attn_dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "Model_new.Bert_model.input_embeddings_prj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Model_new.Bert_model.option_embeddings_prj", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "Model_new.Bert_model.rnn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "Model_new.Bert_model.question_attn_prj", "Model_new.Bert_model.question_attn_dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Model_new.Bert_model.input_embeddings_layernorm", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "Model_new.Bert_model.decoder_step_proj", "Model_new.Bert_model.decoder_step_proj_dropout", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "this_step_new_emb.repeat.repeat.repeat", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "this_step_mask.repeat.repeat.repeat", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "is_training", ",", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "option_mask", ",", "program_ids", ",", "program_mask", ",", "device", ")", ":", "\n", "\n", "        ", "bert_outputs", "=", "self", ".", "bert", "(", "\n", "input_ids", "=", "input_ids", ",", "attention_mask", "=", "input_mask", ",", "token_type_ids", "=", "segment_ids", ")", "\n", "\n", "bert_sequence_output", "=", "bert_outputs", ".", "last_hidden_state", "\n", "bert_pooled_output", "=", "bert_sequence_output", "[", ":", ",", "0", ",", ":", "]", "\n", "batch_size", ",", "seq_length", ",", "bert_dim", "=", "list", "(", "bert_sequence_output", ".", "size", "(", ")", ")", "\n", "\n", "split_program_ids", "=", "torch", ".", "split", "(", "program_ids", ",", "1", ",", "dim", "=", "1", ")", "\n", "# print(self.program_length)", "\n", "# print(program_ids.size())", "\n", "# print(split_program_ids[0].size())", "\n", "\n", "pooled_output", "=", "self", ".", "cls_prj", "(", "bert_pooled_output", ")", "\n", "pooled_output", "=", "self", ".", "cls_dropout", "(", "pooled_output", ")", "\n", "\n", "option_size", "=", "self", ".", "reserved_token_size", "+", "seq_length", "\n", "\n", "sequence_output", "=", "self", ".", "seq_prj", "(", "bert_sequence_output", ")", "\n", "sequence_output", "=", "self", ".", "seq_dropout", "(", "sequence_output", ")", "\n", "\n", "op_embeddings", "=", "self", ".", "reserved_token_embedding", "(", "self", ".", "reserved_ind", ")", "\n", "op_embeddings", "=", "op_embeddings", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "\n", "logits", "=", "[", "]", "\n", "\n", "init_decoder_output", "=", "self", ".", "reserved_token_embedding", "(", "self", ".", "reserved_go", ")", "\n", "decoder_output", "=", "init_decoder_output", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "\n", "# [batch, op + seq len, hidden]", "\n", "initial_option_embeddings", "=", "torch", ".", "cat", "(", "\n", "[", "op_embeddings", ",", "sequence_output", "]", ",", "dim", "=", "1", ")", "\n", "\n", "if", "conf", ".", "sep_attention", ":", "\n", "            ", "decoder_history", "=", "decoder_output", "\n", "", "else", ":", "\n", "            ", "decoder_history", "=", "torch", ".", "unsqueeze", "(", "pooled_output", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "decoder_state_h", "=", "torch", ".", "zeros", "(", "\n", "1", ",", "batch_size", ",", "self", ".", "hidden_size", ",", "device", "=", "device", ")", "\n", "decoder_state_c", "=", "torch", ".", "zeros", "(", "\n", "1", ",", "batch_size", ",", "self", ".", "hidden_size", ",", "device", "=", "device", ")", "\n", "\n", "float_input_mask", "=", "input_mask", ".", "float", "(", ")", "\n", "float_input_mask", "=", "torch", ".", "unsqueeze", "(", "float_input_mask", ",", "dim", "=", "-", "1", ")", "\n", "\n", "this_step_new_op_emb", "=", "initial_option_embeddings", "\n", "\n", "for", "cur_step", "in", "range", "(", "self", ".", "program_length", ")", ":", "\n", "\n", "# decoder history att", "\n", "            ", "decoder_history_attn_vec", "=", "self", ".", "decoder_history_attn_prj", "(", "\n", "decoder_output", ")", "\n", "decoder_history_attn_vec", "=", "self", ".", "decoder_history_attn_dropout", "(", "\n", "decoder_history_attn_vec", ")", "\n", "\n", "decoder_history_attn_w", "=", "torch", ".", "matmul", "(", "\n", "decoder_history", ",", "torch", ".", "transpose", "(", "decoder_history_attn_vec", ",", "1", ",", "2", ")", ")", "\n", "decoder_history_attn_w", "=", "F", ".", "softmax", "(", "decoder_history_attn_w", ",", "dim", "=", "1", ")", "\n", "\n", "decoder_history_ctx_embeddings", "=", "torch", ".", "matmul", "(", "\n", "torch", ".", "transpose", "(", "decoder_history_attn_w", ",", "1", ",", "2", ")", ",", "decoder_history", ")", "\n", "\n", "if", "conf", ".", "sep_attention", ":", "\n", "# input seq att", "\n", "                ", "question_attn_vec", "=", "self", ".", "question_attn_prj", "(", "decoder_output", ")", "\n", "question_attn_vec", "=", "self", ".", "question_attn_dropout", "(", "\n", "question_attn_vec", ")", "\n", "\n", "question_attn_w", "=", "torch", ".", "matmul", "(", "\n", "sequence_output", ",", "torch", ".", "transpose", "(", "question_attn_vec", ",", "1", ",", "2", ")", ")", "\n", "question_attn_w", "-=", "1e6", "*", "(", "1", "-", "float_input_mask", ")", "\n", "question_attn_w", "=", "F", ".", "softmax", "(", "question_attn_w", ",", "dim", "=", "1", ")", "\n", "\n", "question_ctx_embeddings", "=", "torch", ".", "matmul", "(", "\n", "torch", ".", "transpose", "(", "question_attn_w", ",", "1", ",", "2", ")", ",", "sequence_output", ")", "\n", "\n", "# another input seq att", "\n", "", "question_summary_vec", "=", "self", ".", "question_summary_attn_prj", "(", "\n", "decoder_output", ")", "\n", "question_summary_vec", "=", "self", ".", "question_summary_attn_dropout", "(", "\n", "question_summary_vec", ")", "\n", "\n", "question_summary_w", "=", "torch", ".", "matmul", "(", "\n", "sequence_output", ",", "torch", ".", "transpose", "(", "question_summary_vec", ",", "1", ",", "2", ")", ")", "\n", "question_summary_w", "-=", "1e6", "*", "(", "1", "-", "float_input_mask", ")", "\n", "question_summary_w", "=", "F", ".", "softmax", "(", "question_summary_w", ",", "dim", "=", "1", ")", "\n", "\n", "question_summary_embeddings", "=", "torch", ".", "matmul", "(", "\n", "torch", ".", "transpose", "(", "question_summary_w", ",", "1", ",", "2", ")", ",", "sequence_output", ")", "\n", "\n", "if", "conf", ".", "sep_attention", ":", "\n", "                ", "concat_input_embeddings", "=", "torch", ".", "cat", "(", "[", "decoder_history_ctx_embeddings", ",", "\n", "question_ctx_embeddings", ",", "\n", "decoder_output", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "concat_input_embeddings", "=", "torch", ".", "cat", "(", "[", "decoder_history_ctx_embeddings", ",", "\n", "decoder_output", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "input_embeddings", "=", "self", ".", "input_embeddings_prj", "(", "\n", "concat_input_embeddings", ")", "\n", "\n", "if", "conf", ".", "layer_norm", ":", "\n", "                ", "input_embeddings", "=", "self", ".", "input_embeddings_layernorm", "(", "\n", "input_embeddings", ")", "\n", "\n", "", "question_option_vec", "=", "this_step_new_op_emb", "*", "question_summary_embeddings", "\n", "option_embeddings", "=", "torch", ".", "cat", "(", "\n", "[", "this_step_new_op_emb", ",", "question_option_vec", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "option_embeddings", "=", "self", ".", "option_embeddings_prj", "(", "option_embeddings", ")", "\n", "option_logits", "=", "torch", ".", "matmul", "(", "\n", "option_embeddings", ",", "torch", ".", "transpose", "(", "input_embeddings", ",", "1", ",", "2", ")", ")", "\n", "option_logits", "=", "torch", ".", "squeeze", "(", "\n", "option_logits", ",", "dim", "=", "2", ")", "# [batch, op + seq_len]", "\n", "option_logits", "-=", "1e6", "*", "(", "1", "-", "option_mask", ")", "\n", "logits", ".", "append", "(", "option_logits", ")", "\n", "\n", "if", "is_training", ":", "\n", "                ", "program_index", "=", "torch", ".", "unsqueeze", "(", "\n", "split_program_ids", "[", "cur_step", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "# constrain decoding", "\n", "                ", "if", "cur_step", "%", "4", "==", "0", "or", "(", "cur_step", "+", "1", ")", "%", "4", "==", "0", ":", "\n", "# op round", "\n", "                    ", "option_logits", "-=", "1e6", "*", "self", ".", "seq_only_mask", "\n", "", "else", ":", "\n", "# number round", "\n", "                    ", "option_logits", "-=", "1e6", "*", "self", ".", "op_only_mask", "\n", "\n", "", "if", "(", "cur_step", "+", "1", ")", "%", "4", "==", "0", ":", "\n", "# \")\" round", "\n", "                    ", "option_logits", "-=", "1e6", "*", "self", ".", "para_mask", "\n", "# print(program_index)", "\n", "\n", "", "program_index", "=", "torch", ".", "argmax", "(", "\n", "option_logits", ",", "axis", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "program_index", "=", "torch", ".", "unsqueeze", "(", "\n", "program_index", ",", "dim", "=", "1", "\n", ")", "\n", "\n", "", "if", "(", "cur_step", "+", "1", ")", "%", "4", "==", "0", ":", "\n", "\n", "# update op embeddings", "\n", "                ", "this_step_index", "=", "cur_step", "//", "4", "\n", "this_step_list_index", "=", "(", "\n", "self", ".", "op_list", "+", "self", ".", "const_list", ")", ".", "index", "(", "\"#\"", "+", "str", "(", "this_step_index", ")", ")", "\n", "this_step_mask", "=", "self", ".", "step_masks", "[", "this_step_index", ",", ":", "]", "\n", "\n", "decoder_step_vec", "=", "self", ".", "decoder_step_proj", "(", "\n", "concat_input_embeddings", ")", "\n", "decoder_step_vec", "=", "self", ".", "decoder_step_proj_dropout", "(", "\n", "decoder_step_vec", ")", "\n", "decoder_step_vec", "=", "torch", ".", "squeeze", "(", "decoder_step_vec", ")", "\n", "\n", "this_step_new_emb", "=", "decoder_step_vec", "# [batch, hidden]", "\n", "\n", "this_step_new_emb", "=", "torch", ".", "unsqueeze", "(", "this_step_new_emb", ",", "1", ")", "\n", "this_step_new_emb", "=", "this_step_new_emb", ".", "repeat", "(", "\n", "1", ",", "self", ".", "reserved_token_size", "+", "self", ".", "input_length", ",", "1", ")", "# [batch, op seq, hidden]", "\n", "\n", "this_step_mask", "=", "torch", ".", "unsqueeze", "(", "\n", "this_step_mask", ",", "0", ")", "# [1, op seq]", "\n", "# print(this_step_mask)", "\n", "\n", "this_step_mask", "=", "torch", ".", "unsqueeze", "(", "\n", "this_step_mask", ",", "2", ")", "# [1, op seq, 1]", "\n", "this_step_mask", "=", "this_step_mask", ".", "repeat", "(", "\n", "batch_size", ",", "1", ",", "self", ".", "hidden_size", ")", "# [batch, op seq, hidden]", "\n", "\n", "this_step_new_op_emb", "=", "torch", ".", "where", "(", "\n", "this_step_mask", ">", "0", ",", "this_step_new_emb", ",", "initial_option_embeddings", ")", "\n", "\n", "# print(program_index.size())", "\n", "", "program_index", "=", "torch", ".", "repeat_interleave", "(", "\n", "program_index", ",", "self", ".", "hidden_size", ",", "dim", "=", "2", ")", "# [batch, 1, hidden]", "\n", "\n", "input_program_embeddings", "=", "torch", ".", "gather", "(", "\n", "option_embeddings", ",", "dim", "=", "1", ",", "index", "=", "program_index", ")", "\n", "\n", "decoder_output", ",", "(", "decoder_state_h", ",", "decoder_state_c", ")", "=", "self", ".", "rnn", "(", "\n", "input_program_embeddings", ",", "(", "decoder_state_h", ",", "decoder_state_c", ")", ")", "\n", "decoder_history", "=", "torch", ".", "cat", "(", "\n", "[", "decoder_history", ",", "input_program_embeddings", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "logits", "=", "torch", ".", "stack", "(", "logits", ",", "dim", "=", "1", ")", "\n", "return", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.Test.generate": [[87, 156], ["os.path.join", "os.makedirs", "utils.DataLoader", "os.path.join", "os.path.join", "os.path.join", "utils.compute_predictions", "utils.write_predictions", "utils.write_predictions", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "len", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "model", "zip", "len", "len", "model.tolist", "all_results.append", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "RawResult", "int"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.compute_predictions", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_predictions", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_predictions"], ["segment_ids", "=", "x", "[", "'segment_ids'", "]", "\n", "label", "=", "x", "[", "'label'", "]", "\n", "filename_id", "=", "x", "[", "\"filename_id\"", "]", "\n", "ind", "=", "x", "[", "\"ind\"", "]", "\n", "\n", "ori_len", "=", "len", "(", "input_ids", ")", "\n", "for", "each_item", "in", "[", "input_ids", ",", "input_mask", ",", "segment_ids", "]", ":", "\n", "                ", "if", "ori_len", "<", "conf", ".", "batch_size_test", ":", "\n", "                    ", "each_len", "=", "len", "(", "each_item", "[", "0", "]", ")", "\n", "pad_x", "=", "[", "0", "]", "*", "each_len", "\n", "each_item", "+=", "[", "pad_x", "]", "*", "(", "conf", ".", "batch_size_test", "-", "ori_len", ")", "\n", "\n", "", "", "input_ids", "=", "torch", ".", "tensor", "(", "input_ids", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "input_mask", "=", "torch", ".", "tensor", "(", "input_mask", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "segment_ids", "=", "torch", ".", "tensor", "(", "segment_ids", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "\n", "logits", "=", "model", "(", "True", ",", "input_ids", ",", "input_mask", ",", "\n", "segment_ids", ",", "device", "=", "conf", ".", "device", ")", "\n", "\n", "all_logits", ".", "extend", "(", "logits", ".", "tolist", "(", ")", ")", "\n", "all_filename_id", ".", "extend", "(", "filename_id", ")", "\n", "all_ind", ".", "extend", "(", "ind", ")", "\n", "\n", "", "", "output_prediction_file", "=", "os", ".", "path", ".", "join", "(", "ksave_dir_mode", ",", "\n", "\"predictions.json\"", ")", "\n", "\n", "if", "mode", "==", "\"valid\"", ":", "\n", "        ", "print_res", "=", "retrieve_evaluate", "(", "\n", "all_logits", ",", "all_filename_id", ",", "all_ind", ",", "output_prediction_file", ",", "conf", ".", "valid_file", ",", "topn", "=", "conf", ".", "topn", ")", "\n", "", "elif", "mode", "==", "\"test\"", ":", "\n", "        ", "print_res", "=", "retrieve_evaluate", "(", "\n", "all_logits", ",", "all_filename_id", ",", "all_ind", ",", "output_prediction_file", ",", "conf", ".", "test_file", ",", "topn", "=", "conf", ".", "topn", ")", "\n", "", "else", ":", "\n", "# private data mode", "\n", "        ", "print_res", "=", "retrieve_evaluate_private", "(", "\n", "all_logits", ",", "all_filename_id", ",", "all_ind", ",", "output_prediction_file", ",", "conf", ".", "test_file", ",", "topn", "=", "conf", ".", "topn", ")", "\n", "\n", "", "write_log", "(", "log_file", ",", "print_res", ")", "\n", "print", "(", "print_res", ")", "\n", "return", "\n", "\n", "\n", "", "def", "generate_test", "(", ")", ":", "\n", "    ", "model", "=", "Bert_model", "(", "hidden_size", "=", "model_config", ".", "hidden_size", ",", "\n", "dropout_rate", "=", "conf", ".", "dropout_rate", ",", ")", "\n", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", ".", "to", "(", "conf", ".", "device", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "conf", ".", "saved_model_path", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "generate", "(", "test_data", ",", "test_features", ",", "model", ",", "results_path", ",", "mode", "=", "'test'", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "\n", "    ", "generate_test", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.Test.generate_test": [[158, 177], ["Model_new.Bert_model", "torch.nn.DataParallel", "nn.DataParallel.to", "nn.DataParallel.load_state_dict", "nn.DataParallel.eval", "Test.generate", "torch.load", "torch.load", "Test.evaluate_score"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.Test.generate", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.Test.evaluate_score"], []], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.Test.evaluate_score": [[179, 186], ["utils.evaluate_result", "utils.write_log", "str", "str"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.evaluate_result", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_log"], []], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.Main.train": [[110, 202], ["utils.write_log", "utils.write_log", "Model_new.Bert_model", "torch.nn.DataParallel", "nn.DataParallel.to", "torch.Adam", "torch.nn.CrossEntropyLoss", "nn.DataParallel.train", "utils.DataLoader", "range", "utils.write_log", "nn.DataParallel.parameters", "time.time", "utils.DataLoader.reset", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "nn.DataParallel.zero_grad", "optim.Adam.zero_grad", "nn.DataParallel.", "nn.CrossEntropyLoss.", "criterion.item", "criterion.backward", "optim.Adam.step", "str", "model.view", "torch.tensor().to.view", "torch.tensor().to.view", "criterion.sum", "torch.tensor().to.sum", "utils.write_log", "print", "nn.DataParallel.eval", "utils.write_log", "time.time", "nn.DataParallel.train", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "time.time", "print", "os.path.join", "os.makedirs", "torch.save", "torch.save", "os.path.join", "os.makedirs", "Main.evaluate", "str", "nn.DataParallel.state_dict", "str"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_log", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_log", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.Main.train", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_log", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.DataLoader.reset", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_log", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_log", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.Main.train", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.Main.evaluate"], ["record_k", "=", "0", "\n", "record_loss_k", "=", "0", "\n", "loss", ",", "start_time", "=", "0.0", ",", "time", ".", "time", "(", ")", "\n", "record_loss", "=", "0.0", "\n", "\n", "for", "_", "in", "range", "(", "conf", ".", "epoch", ")", ":", "\n", "        ", "train_iterator", ".", "reset", "(", ")", "\n", "for", "x", "in", "train_iterator", ":", "\n", "\n", "            ", "input_ids", "=", "torch", ".", "tensor", "(", "x", "[", "'input_ids'", "]", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "input_mask", "=", "torch", ".", "tensor", "(", "x", "[", "'input_mask'", "]", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "segment_ids", "=", "torch", ".", "tensor", "(", "x", "[", "'segment_ids'", "]", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "x", "[", "'label'", "]", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "this_logits", "=", "model", "(", "True", ",", "input_ids", ",", "input_mask", ",", "\n", "segment_ids", ",", "device", "=", "conf", ".", "device", ")", "\n", "\n", "this_loss", "=", "criterion", "(", "\n", "this_logits", ".", "view", "(", "-", "1", ",", "this_logits", ".", "shape", "[", "-", "1", "]", ")", ",", "label", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "this_loss", "=", "this_loss", ".", "sum", "(", ")", "\n", "record_loss", "+=", "this_loss", ".", "item", "(", ")", "*", "100", "\n", "record_k", "+=", "1", "\n", "k", "+=", "1", "\n", "\n", "this_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "k", ">", "1", "and", "k", "%", "conf", ".", "report_loss", "==", "0", ":", "\n", "                ", "write_log", "(", "log_file", ",", "\"%d : loss = %.3f\"", "%", "\n", "(", "k", ",", "record_loss", "/", "record_k", ")", ")", "\n", "record_loss", "=", "0.0", "\n", "record_k", "=", "0", "\n", "\n", "", "if", "k", ">", "1", "and", "k", "%", "conf", ".", "report", "==", "0", ":", "\n", "                ", "print", "(", "\"Round: \"", ",", "k", "/", "conf", ".", "report", ")", "\n", "model", ".", "eval", "(", ")", "\n", "cost_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "write_log", "(", "log_file", ",", "\"%d : time = %.3f \"", "%", "\n", "(", "k", "//", "conf", ".", "report", ",", "cost_time", ")", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "k", "//", "conf", ".", "report", ">=", "1", ":", "\n", "                    ", "print", "(", "\"Val test\"", ")", "\n", "# save model", "\n", "saved_model_path_cnt", "=", "os", ".", "path", ".", "join", "(", "\n", "saved_model_path", ",", "'loads'", ",", "str", "(", "k", "//", "conf", ".", "report", ")", ")", "\n", "os", ".", "makedirs", "(", "saved_model_path_cnt", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "saved_model_path_cnt", "+", "\"/model.pt\"", ")", "\n", "\n", "results_path_cnt", "=", "os", ".", "path", ".", "join", "(", "\n", "results_path", ",", "'loads'", ",", "str", "(", "k", "//", "conf", ".", "report", ")", ")", "\n", "os", ".", "makedirs", "(", "results_path_cnt", ",", "exist_ok", "=", "True", ")", "\n", "validation_result", "=", "evaluate", "(", "\n", "valid_examples", ",", "valid_features", ",", "model", ",", "results_path_cnt", ",", "'valid'", ")", "\n", "# write_log(log_file, validation_result)", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "\n", "", "", "", "", "def", "evaluate", "(", "data_ori", ",", "data", ",", "model", ",", "ksave_dir", ",", "mode", "=", "'valid'", ")", ":", "\n", "\n", "    ", "pred_list", "=", "[", "]", "\n", "pred_unk", "=", "[", "]", "\n", "\n", "ksave_dir_mode", "=", "os", ".", "path", ".", "join", "(", "ksave_dir", ",", "mode", ")", "\n", "os", ".", "makedirs", "(", "ksave_dir_mode", ",", "exist_ok", "=", "True", ")", "\n", "\n", "data_iterator", "=", "DataLoader", "(", "\n", "is_training", "=", "False", ",", "data", "=", "data", ",", "batch_size", "=", "conf", ".", "batch_size_test", ",", "shuffle", "=", "False", ")", "\n", "\n", "k", "=", "0", "\n", "all_logits", "=", "[", "]", "\n", "all_filename_id", "=", "[", "]", "\n", "all_ind", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "x", "in", "tqdm", "(", "data_iterator", ")", ":", "\n", "\n", "            ", "input_ids", "=", "x", "[", "'input_ids'", "]", "\n", "input_mask", "=", "x", "[", "'input_mask'", "]", "\n", "segment_ids", "=", "x", "[", "'segment_ids'", "]", "\n", "label", "=", "x", "[", "'label'", "]", "\n", "filename_id", "=", "x", "[", "\"filename_id\"", "]", "\n", "ind", "=", "x", "[", "\"ind\"", "]", "\n", "\n", "ori_len", "=", "len", "(", "input_ids", ")", "\n", "for", "each_item", "in", "[", "input_ids", ",", "input_mask", ",", "segment_ids", "]", ":", "\n", "                ", "if", "ori_len", "<", "conf", ".", "batch_size_test", ":", "\n", "                    ", "each_len", "=", "len", "(", "each_item", "[", "0", "]", ")", "\n", "pad_x", "=", "[", "0", "]", "*", "each_len", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.Main.evaluate": [[204, 285], ["os.path.join", "os.makedirs", "utils.DataLoader", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "utils.compute_predictions", "utils.write_predictions", "utils.write_predictions", "utils.evaluate_result", "utils.write_log", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "str", "len", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "model", "zip", "len", "len", "model.tolist", "all_results.append", "str", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "RawResult", "int"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.compute_predictions", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_predictions", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_predictions", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.evaluate_result", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_log"], ["\n", "", "", "input_ids", "=", "torch", ".", "tensor", "(", "input_ids", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "input_mask", "=", "torch", ".", "tensor", "(", "input_mask", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "segment_ids", "=", "torch", ".", "tensor", "(", "segment_ids", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "\n", "logits", "=", "model", "(", "True", ",", "input_ids", ",", "input_mask", ",", "\n", "segment_ids", ",", "device", "=", "conf", ".", "device", ")", "\n", "\n", "all_logits", ".", "extend", "(", "logits", ".", "tolist", "(", ")", ")", "\n", "all_filename_id", ".", "extend", "(", "filename_id", ")", "\n", "all_ind", ".", "extend", "(", "ind", ")", "\n", "\n", "", "", "output_prediction_file", "=", "os", ".", "path", ".", "join", "(", "ksave_dir_mode", ",", "\n", "\"predictions.json\"", ")", "\n", "\n", "if", "mode", "==", "\"valid\"", ":", "\n", "        ", "print_res", "=", "retrieve_evaluate", "(", "\n", "all_logits", ",", "all_filename_id", ",", "all_ind", ",", "output_prediction_file", ",", "conf", ".", "valid_file", ",", "topn", "=", "conf", ".", "topn", ")", "\n", "", "else", ":", "\n", "        ", "print_res", "=", "retrieve_evaluate", "(", "\n", "all_logits", ",", "all_filename_id", ",", "all_ind", ",", "output_prediction_file", ",", "conf", ".", "test_file", ",", "topn", "=", "conf", ".", "topn", ")", "\n", "\n", "", "write_log", "(", "log_file", ",", "print_res", ")", "\n", "print", "(", "print_res", ")", "\n", "return", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "train", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.DataLoader.__init__": [[332, 346], ["len", "int", "utils.DataLoader.shuffle_all_data", "int"], "methods", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.DataLoader.shuffle_all_data"], ["all_recall_3", "=", "0.0", "\n", "\n", "for", "data", "in", "data_all", ":", "\n", "        ", "this_filename_id", "=", "data", "[", "\"id\"", "]", "\n", "\n", "this_res", "=", "res_filename", "[", "this_filename_id", "]", "\n", "\n", "sorted_dict", "=", "sorted", "(", "this_res", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "\"score\"", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "# sorted_dict = sorted_dict[:topn]", "\n", "\n", "gold_inds", "=", "data", "[", "\"qa\"", "]", "[", "\"gold_inds\"", "]", "\n", "\n", "# table rows", "\n", "table_retrieved", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.DataLoader.__iter__": [[347, 349], ["None"], "methods", ["None"], ["text_retrieved", "=", "[", "]", "\n", "\n", "# all retrieved", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.DataLoader.__next__": [[350, 360], ["utils.DataLoader.get_batch"], "methods", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.DataLoader.get_batch"], ["table_re_all", "=", "[", "]", "\n", "text_re_all", "=", "[", "]", "\n", "\n", "correct", "=", "0", "\n", "correct_3", "=", "0", "\n", "\n", "for", "tmp", "in", "sorted_dict", "[", ":", "topn", "]", ":", "\n", "            ", "if", "\"table\"", "in", "tmp", "[", "\"ind\"", "]", ":", "\n", "                ", "table_retrieved", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                ", "text_retrieved", ".", "append", "(", "tmp", ")", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.DataLoader.__len__": [[361, 363], ["None"], "methods", ["None"], ["\n", "", "if", "tmp", "[", "\"ind\"", "]", "in", "gold_inds", ":", "\n", "                ", "correct", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.DataLoader.reset": [[364, 367], ["utils.DataLoader.shuffle_all_data"], "methods", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.DataLoader.shuffle_all_data"], ["\n", "", "", "for", "tmp", "in", "sorted_dict", ":", "\n", "            ", "if", "\"table\"", "in", "tmp", "[", "\"ind\"", "]", ":", "\n", "                ", "table_re_all", ".", "append", "(", "tmp", ")", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.DataLoader.shuffle_all_data": [[368, 371], ["random.shuffle"], "methods", ["None"], ["", "else", ":", "\n", "                ", "text_re_all", ".", "append", "(", "tmp", ")", "\n", "\n", "", "", "for", "tmp", "in", "sorted_dict", "[", ":", "3", "]", ":", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.DataLoader.get_batch": [[372, 412], ["min", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append"], "methods", ["None"], ["            ", "if", "tmp", "[", "\"ind\"", "]", "in", "gold_inds", ":", "\n", "                ", "correct_3", "+=", "1", "\n", "\n", "", "", "all_recall", "+=", "(", "float", "(", "correct", ")", "/", "len", "(", "gold_inds", ")", ")", "\n", "all_recall_3", "+=", "(", "float", "(", "correct_3", ")", "/", "len", "(", "gold_inds", ")", ")", "\n", "\n", "data", "[", "\"table_retrieved\"", "]", "=", "table_retrieved", "\n", "data", "[", "\"text_retrieved\"", "]", "=", "text_retrieved", "\n", "\n", "data", "[", "\"table_retrieved_all\"", "]", "=", "table_re_all", "\n", "data", "[", "\"text_retrieved_all\"", "]", "=", "text_re_all", "\n", "\n", "\n", "", "with", "open", "(", "output_prediction_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "data_all", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n", "", "res_3", "=", "all_recall_3", "/", "len", "(", "data_all", ")", "\n", "res", "=", "all_recall", "/", "len", "(", "data_all", ")", "\n", "\n", "res", "=", "\"Top 3: \"", "+", "str", "(", "res_3", ")", "+", "\"\\n\"", "+", "\"Top 5: \"", "+", "str", "(", "res", ")", "+", "\"\\n\"", "\n", "\n", "\n", "return", "res", "\n", "\n", "\n", "\n", "\n", "", "def", "retrieve_evaluate_private", "(", "all_logits", ",", "all_filename_ids", ",", "all_inds", ",", "output_prediction_file", ",", "ori_file", ",", "topn", ")", ":", "\n", "    ", "'''\n    save results to file. calculate recall\n    '''", "\n", "\n", "res_filename", "=", "{", "}", "\n", "res_filename_inds", "=", "{", "}", "\n", "\n", "for", "this_logit", ",", "this_filename_id", ",", "this_ind", "in", "zip", "(", "all_logits", ",", "all_filename_ids", ",", "all_inds", ")", ":", "\n", "\n", "        ", "if", "this_filename_id", "not", "in", "res_filename", ":", "\n", "            ", "res_filename", "[", "this_filename_id", "]", "=", "[", "]", "\n", "res_filename_inds", "[", "this_filename_id", "]", "=", "[", "]", "\n", "", "if", "this_ind", "not", "in", "res_filename_inds", "[", "this_filename_id", "]", ":", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.progress_bar": [[37, 79], ["int", "sys.stdout.write", "range", "sys.stdout.write", "range", "sys.stdout.write", "time.time", "L.append", "L.append", "sys.stdout.write", "range", "range", "sys.stdout.write", "sys.stdout.flush", "time.time", "int", "sys.stdout.write", "sys.stdout.write", "L.append", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "utils.format_time", "utils.format_time", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.format_time", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.format_time"], ["", "cur_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "*", "current", "/", "total", ")", "\n", "rest_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "-", "cur_len", ")", "-", "1", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "' ['", ")", "\n", "for", "i", "in", "range", "(", "cur_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'='", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'>'", ")", "\n", "for", "i", "in", "range", "(", "rest_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'.'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "']'", ")", "\n", "\n", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "cur_time", "-", "last_time", "\n", "last_time", "=", "cur_time", "\n", "tot_time", "=", "cur_time", "-", "begin_time", "\n", "\n", "L", "=", "[", "]", "\n", "L", ".", "append", "(", "'  Step: %s'", "%", "format_time", "(", "step_time", ")", ")", "\n", "L", ".", "append", "(", "' | Tot: %s'", "%", "format_time", "(", "tot_time", ")", ")", "\n", "if", "msg", ":", "\n", "        ", "L", ".", "append", "(", "' | '", "+", "msg", ")", "\n", "\n", "", "msg", "=", "''", ".", "join", "(", "L", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "msg", ")", "\n", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", ")", "-", "len", "(", "msg", ")", "-", "3", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "' '", ")", "\n", "\n", "# Go back to the center of the bar.", "\n", "", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", "/", "2", ")", "+", "2", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\b'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "' %d/%d '", "%", "(", "current", "+", "1", ",", "total", ")", ")", "\n", "\n", "if", "current", "<", "total", "-", "1", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "\n", "", "def", "format_time", "(", "seconds", ")", ":", "\n", "    ", "days", "=", "int", "(", "seconds", "/", "3600", "/", "24", ")", "\n", "seconds", "=", "seconds", "-", "days", "*", "3600", "*", "24", "\n", "hours", "=", "int", "(", "seconds", "/", "3600", ")", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.format_time": [[81, 112], ["int", "int", "int", "int", "int", "str", "str", "str", "str", "str"], "function", ["None"], ["minutes", "=", "int", "(", "seconds", "/", "60", ")", "\n", "seconds", "=", "seconds", "-", "minutes", "*", "60", "\n", "secondsf", "=", "int", "(", "seconds", ")", "\n", "seconds", "=", "seconds", "-", "secondsf", "\n", "millis", "=", "int", "(", "seconds", "*", "1000", ")", "\n", "\n", "f", "=", "''", "\n", "i", "=", "1", "\n", "if", "days", ">", "0", ":", "\n", "        ", "f", "+=", "str", "(", "days", ")", "+", "'D'", "\n", "i", "+=", "1", "\n", "", "if", "hours", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "hours", ")", "+", "'h'", "\n", "i", "+=", "1", "\n", "", "if", "minutes", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "minutes", ")", "+", "'m'", "\n", "i", "+=", "1", "\n", "", "if", "secondsf", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "secondsf", ")", "+", "'s'", "\n", "i", "+=", "1", "\n", "", "if", "millis", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "millis", ")", "+", "'ms'", "\n", "i", "+=", "1", "\n", "", "if", "f", "==", "''", ":", "\n", "        ", "f", "=", "'0ms'", "\n", "", "return", "f", "\n", "\n", "\n", "", "def", "write_word", "(", "pred_list", ",", "save_dir", ",", "name", ")", ":", "\n", "    ", "ss", "=", "open", "(", "save_dir", "+", "name", ",", "\"w+\"", ")", "\n", "for", "item", "in", "pred_list", ":", "\n", "        ", "ss", ".", "write", "(", "\" \"", ".", "join", "(", "item", ")", "+", "'\\n'", ")", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_word": [[114, 118], ["open", "open.write"], "function", ["None"], ["\n", "", "", "def", "get_current_git_version", "(", ")", ":", "\n", "    ", "import", "git", "\n", "repo", "=", "git", ".", "Repo", "(", "search_parent_directories", "=", "True", ")", "\n", "sha", "=", "repo", ".", "head", ".", "object", ".", "hexsha", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.get_current_git_version": [[120, 125], ["git.Repo"], "function", ["None"], ["\n", "\n", "", "def", "write_log", "(", "log_file", ",", "s", ")", ":", "\n", "    ", "print", "(", "s", ")", "\n", "with", "open", "(", "log_file", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "s", "+", "'\\n'", ")", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_log": [[127, 131], ["print", "open", "f.write"], "function", ["None"], ["\n", "", "", "def", "_compute_softmax", "(", "scores", ")", ":", "\n", "    ", "\"\"\"Compute softmax probability over raw logits.\"\"\"", "\n", "if", "not", "scores", ":", "\n", "        ", "return", "[", "]", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils._compute_softmax": [[133, 154], ["math.exp", "exp_scores.append", "probs.append"], "function", ["None"], ["", "max_score", "=", "None", "\n", "for", "score", "in", "scores", ":", "\n", "        ", "if", "max_score", "is", "None", "or", "score", ">", "max_score", ":", "\n", "            ", "max_score", "=", "score", "\n", "\n", "", "", "exp_scores", "=", "[", "]", "\n", "total_sum", "=", "0.0", "\n", "for", "score", "in", "scores", ":", "\n", "        ", "x", "=", "math", ".", "exp", "(", "score", "-", "max_score", ")", "\n", "exp_scores", ".", "append", "(", "x", ")", "\n", "total_sum", "+=", "x", "\n", "\n", "", "probs", "=", "[", "]", "\n", "for", "score", "in", "exp_scores", ":", "\n", "        ", "probs", ".", "append", "(", "score", "/", "total_sum", ")", "\n", "", "return", "probs", "\n", "\n", "\n", "", "def", "read_txt", "(", "input_path", ",", "log_file", ")", ":", "\n", "    ", "\"\"\"Read a txt file into a list.\"\"\"", "\n", "\n", "write_log", "(", "log_file", ",", "\"Reading: %s\"", "%", "input_path", ")", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.read_txt": [[156, 166], ["utils.write_log", "open", "input_file.readlines", "items.append", "line.strip"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_log"], ["        ", "input_data", "=", "input_file", ".", "readlines", "(", ")", "\n", "", "items", "=", "[", "]", "\n", "for", "line", "in", "input_data", ":", "\n", "        ", "items", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "return", "items", "\n", "\n", "\n", "", "def", "read_examples", "(", "input_path", ",", "tokenizer", ",", "op_list", ",", "const_list", ",", "log_file", ")", ":", "\n", "    ", "\"\"\"Read a json file into a list of examples.\"\"\"", "\n", "\n", "write_log", "(", "log_file", ",", "\"Reading \"", "+", "input_path", ")", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.read_examples": [[168, 185], ["utils.write_log", "tqdm.tqdm", "open", "json.load", "examples.append", "finqa_utils.read_mathqa_entry"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_log", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.read_mathqa_entry"], ["        ", "input_data", "=", "json", ".", "load", "(", "input_file", ")", "\n", "\n", "", "examples", "=", "[", "]", "\n", "for", "entry", "in", "input_data", ":", "\n", "        ", "examples", ".", "append", "(", "finqa_utils", ".", "read_mathqa_entry", "(", "entry", ",", "tokenizer", ")", ")", "\n", "\n", "", "return", "input_data", ",", "examples", ",", "op_list", ",", "const_list", "\n", "\n", "\n", "", "def", "convert_examples_to_features", "(", "examples", ",", "\n", "tokenizer", ",", "\n", "max_seq_length", ",", "\n", "option", ",", "\n", "is_training", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Converts a list of DropExamples into InputFeatures.\"\"\"", "\n", "res", "=", "[", "]", "\n", "res_neg", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.convert_examples_to_features": [[187, 220], ["enumerate", "example.convert_single_example", "res.append"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.MathQAExample.convert_single_example"], ["        ", "features", ",", "features_neg", "=", "example", ".", "convert_single_example", "(", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "max_seq_length", "=", "max_seq_length", ",", "\n", "option", "=", "option", ",", "\n", "is_training", "=", "is_training", ",", "\n", "cls_token", "=", "tokenizer", ".", "cls_token", ",", "\n", "sep_token", "=", "tokenizer", ".", "sep_token", ")", "\n", "\n", "res", ".", "extend", "(", "features", ")", "\n", "res_neg", ".", "extend", "(", "features_neg", ")", "\n", "\n", "", "return", "res", ",", "res_neg", "\n", "\n", "\n", "\n", "", "def", "write_predictions", "(", "all_predictions", ",", "output_prediction_file", ")", ":", "\n", "    ", "\"\"\"Writes final predictions in json format.\"\"\"", "\n", "\n", "with", "open", "(", "output_prediction_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "        ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "all_predictions", ",", "indent", "=", "4", ")", "+", "\"\\n\"", ")", "\n", "\n", "\n", "", "", "class", "DataLoader", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "is_training", ",", "data", ",", "batch_size", "=", "64", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Main dataloader\n        \"\"\"", "\n", "self", ".", "data_pos", "=", "data", "[", "0", "]", "\n", "self", ".", "data_neg", "=", "data", "[", "1", "]", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "is_training", "=", "is_training", "\n", "\n", "\n", "if", "self", ".", "is_training", ":", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.compute_prog_from_logits": [[227, 241], ["range", "utils._compute_softmax", "numpy.argmax", "numpy.log", "pred_prog_ids.append"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils._compute_softmax"], ["", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "data_pos", "+", "self", ".", "data_neg", "\n", "\n", "\n", "", "self", ".", "data_size", "=", "len", "(", "self", ".", "data", ")", "\n", "self", ".", "num_batches", "=", "int", "(", "self", ".", "data_size", "/", "batch_size", ")", "if", "self", ".", "data_size", "%", "batch_size", "==", "0", "else", "int", "(", "self", ".", "data_size", "/", "batch_size", ")", "+", "1", "\n", "\n", "self", ".", "count", "=", "0", "\n", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n", "", "def", "__next__", "(", "self", ")", ":", "\n", "# drop last batch", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.compute_predictions": [[243, 322], ["collections.defaultdict", "collections.namedtuple", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "enumerate", "example_index_to_features[].append", "enumerate", "collections.namedtuple", "enumerate", "prelim_predictions.append", "utils.compute_prog_from_logits", "finqa_utils.indices_to_prog", "nbest.append", "len", "collections.OrderedDict", "nbest_json.append", "len", "collections.namedtuple.", "len", "collections.namedtuple.", "str"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.compute_prog_from_logits", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.finqa_utils.indices_to_prog"], ["            ", "bound", "=", "self", ".", "num_batches", "-", "1", "\n", "", "else", ":", "\n", "            ", "bound", "=", "self", ".", "num_batches", "\n", "", "if", "self", ".", "count", "<", "bound", ":", "\n", "            ", "return", "self", ".", "get_batch", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_batches", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "0", "\n", "self", ".", "shuffle_all_data", "(", ")", "\n", "\n", "", "def", "shuffle_all_data", "(", "self", ")", ":", "\n", "        ", "if", "conf", ".", "option", "==", "\"tfidf\"", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "data", ")", "\n", "", "else", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "data_neg", ")", "\n", "num_neg", "=", "len", "(", "self", ".", "data_pos", ")", "*", "conf", ".", "neg_rate", "\n", "self", ".", "data", "=", "self", ".", "data_pos", "+", "self", ".", "data_neg", "[", ":", "num_neg", "]", "\n", "random", ".", "shuffle", "(", "self", ".", "data", ")", "\n", "", "return", "\n", "\n", "", "def", "get_batch", "(", "self", ")", ":", "\n", "        ", "start_index", "=", "self", ".", "count", "*", "self", ".", "batch_size", "\n", "end_index", "=", "min", "(", "(", "self", ".", "count", "+", "1", ")", "*", "self", ".", "batch_size", ",", "self", ".", "data_size", ")", "\n", "\n", "self", ".", "count", "+=", "1", "\n", "# print (self.count)", "\n", "\n", "\n", "batch_data", "=", "{", "\"input_ids\"", ":", "[", "]", ",", "\n", "\"input_mask\"", ":", "[", "]", ",", "\n", "\"segment_ids\"", ":", "[", "]", ",", "\n", "\"filename_id\"", ":", "[", "]", ",", "\n", "\"label\"", ":", "[", "]", ",", "\n", "\"ind\"", ":", "[", "]", "\n", "}", "\n", "for", "each_data", "in", "self", ".", "data", "[", "start_index", ":", "end_index", "]", ":", "\n", "\n", "            ", "batch_data", "[", "\"input_ids\"", "]", ".", "append", "(", "each_data", "[", "\"input_ids\"", "]", ")", "\n", "batch_data", "[", "\"input_mask\"", "]", ".", "append", "(", "each_data", "[", "\"input_mask\"", "]", ")", "\n", "batch_data", "[", "\"segment_ids\"", "]", ".", "append", "(", "each_data", "[", "\"segment_ids\"", "]", ")", "\n", "batch_data", "[", "\"filename_id\"", "]", ".", "append", "(", "each_data", "[", "\"filename_id\"", "]", ")", "\n", "batch_data", "[", "\"label\"", "]", ".", "append", "(", "each_data", "[", "\"label\"", "]", ")", "\n", "batch_data", "[", "\"ind\"", "]", ".", "append", "(", "each_data", "[", "\"ind\"", "]", ")", "\n", "\n", "\n", "", "return", "batch_data", "\n", "\n", "\n", "\n", "\n", "", "", "def", "cleanhtml", "(", "raw_html", ")", ":", "\n", "    ", "cleanr", "=", "re", ".", "compile", "(", "'<.*?>'", ")", "\n", "cleantext", "=", "re", ".", "sub", "(", "cleanr", ",", "''", ",", "raw_html", ")", "\n", "return", "cleantext", "\n", "\n", "\n", "\n", "", "def", "retrieve_evaluate", "(", "all_logits", ",", "all_filename_ids", ",", "all_inds", ",", "output_prediction_file", ",", "ori_file", ",", "topn", ")", ":", "\n", "    ", "'''\n    save results to file. calculate recall\n    '''", "\n", "\n", "res_filename", "=", "{", "}", "\n", "res_filename_inds", "=", "{", "}", "\n", "\n", "for", "this_logit", ",", "this_filename_id", ",", "this_ind", "in", "zip", "(", "all_logits", ",", "all_filename_ids", ",", "all_inds", ")", ":", "\n", "\n", "        ", "if", "this_filename_id", "not", "in", "res_filename", ":", "\n", "            ", "res_filename", "[", "this_filename_id", "]", "=", "[", "]", "\n", "res_filename_inds", "[", "this_filename_id", "]", "=", "[", "]", "\n", "", "if", "this_ind", "not", "in", "res_filename_inds", "[", "this_filename_id", "]", ":", "\n", "            ", "res_filename", "[", "this_filename_id", "]", ".", "append", "(", "{", "\n", "\"score\"", ":", "this_logit", "[", "1", "]", ",", "\n", "\"ind\"", ":", "this_ind", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.write_predictions": [[324, 329], ["open", "writer.write", "json.dumps"], "function", ["None"], ["\n", "\n", "\n", "", "", "with", "open", "(", "ori_file", ")", "as", "f", ":", "\n", "        ", "data_all", "=", "json", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.cleanhtml": [[414, 418], ["re.compile", "re.sub"], "function", ["None"], ["\"score\"", ":", "this_logit", "[", "1", "]", ",", "\n", "\"ind\"", ":", "this_ind", "\n", "}", ")", "\n", "res_filename_inds", "[", "this_filename_id", "]", ".", "append", "(", "this_ind", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.str_to_num": [[420, 441], ["text.replace.replace", "float", "text.replace.replace", "float", "text.replace.replace", "float"], "function", ["None"], ["        ", "data_all", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "for", "data", "in", "data_all", ":", "\n", "        ", "this_filename_id", "=", "data", "[", "\"id\"", "]", "\n", "\n", "this_res", "=", "res_filename", "[", "this_filename_id", "]", "\n", "\n", "sorted_dict", "=", "sorted", "(", "this_res", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "\"score\"", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "# table rows", "\n", "table_retrieved", "=", "[", "]", "\n", "text_retrieved", "=", "[", "]", "\n", "\n", "# all retrieved", "\n", "table_re_all", "=", "[", "]", "\n", "text_re_all", "=", "[", "]", "\n", "\n", "for", "tmp", "in", "sorted_dict", "[", ":", "topn", "]", ":", "\n", "            ", "if", "\"table\"", "in", "tmp", "[", "\"ind\"", "]", ":", "\n", "                ", "table_retrieved", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                ", "text_retrieved", ".", "append", "(", "tmp", ")", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.process_row": [[443, 464], ["str_to_num.replace().strip", "[].strip", "utils.str_to_num", "row_out.append", "str_to_num.replace", "str_to_num.split"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.str_to_num"], ["\n", "", "", "for", "tmp", "in", "sorted_dict", ":", "\n", "            ", "if", "\"table\"", "in", "tmp", "[", "\"ind\"", "]", ":", "\n", "                ", "table_re_all", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                ", "text_re_all", ".", "append", "(", "tmp", ")", "\n", "\n", "", "", "data", "[", "\"table_restrieved\"", "]", "=", "table_retrieved", "\n", "data", "[", "\"text_retrieved\"", "]", "=", "text_retrieved", "\n", "\n", "data", "[", "\"table_retrieved_all\"", "]", "=", "table_re_all", "\n", "data", "[", "\"text_retrieved_all\"", "]", "=", "text_re_all", "\n", "\n", "\n", "", "with", "open", "(", "output_prediction_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "data_all", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n", "", "return", "\"private, no res\"", "\n", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.reprog_to_seq": [[466, 494], ["st.append", "range", "res.extend", "st.append", "this_step_vec.append", "str"], "function", ["None"], ["\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "\n", "# tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')", "\n", "\n", "# text = \"this is a -10\"", "\n", "# res = tokenize(tokenizer, text, apply_basic_tokenization=False)", "\n", "\n", "# text = \"<a>test test</a>\"", "\n", "# print(cleanhtml(text))", "\n", "\n", "    ", "root_path", "=", "\"/mnt/george_bhd/zhiyuchen/\"", "\n", "outputs", "=", "root_path", "+", "\"outputs/\"", "\n", "\n", "json_in", "=", "outputs", "+", "\"test_20210408011241/results/loads/1/valid/nbest_predictions.json\"", "\n", "retrieve_evaluate", "(", "json_in", ")", "\n", "\n", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.eval_program": [[496, 601], ["enumerate", "enumerate", "program.split", "step.strip.strip", "[].strip().strip", "[].strip().strip", "[].strip", "[].strip", "round", "len", "token.strip", "step.strip.split", "[].strip", "[].strip", "utils.str_to_num", "utils.str_to_num", "[].strip().strip.split", "[].strip().strip.split", "utils.process_row", "max", "int", "int", "min", "step.strip.split", "step.strip.split", "str_to_num.replace", "str_to_num.replace", "int", "sum", "str_to_num.replace", "sum", "len"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.str_to_num", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.str_to_num", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.process_row"], []], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.equal_program": [[603, 755], ["enumerate", "utils.equal_program.symbol_recur"], "function", ["None"], []], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.evaluate_result": [[757, 847], ["print", "print", "print", "print", "open", "json.load", "open", "json.load", "utils.eval_program", "all_res_list.append", "float", "len", "float", "len", "len", "open", "json.dump", "open", "json.dump", "utils.reprog_to_seq", "utils.reprog_to_seq", "utils.equal_program", "res_list.append", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.eval_program", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.reprog_to_seq", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.reprog_to_seq", "home.repos.pwc.inspect_result.czyssrs_finqa.generator.utils.equal_program"], []], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.Convert.convert_test": [[18, 91], ["print", "open", "json.load", "sorted", "sorted", "sorted", "open", "json.dump", "len", "int", "all_table_in.items", "all_text_in.items", "this_model_input.append", "general_utils.table_row_to_text", "len", "int", "len", "this_model_input.append", "int", "len", "this_model_input.append", "len", "len", "tmp[].split", "len", "general_utils.table_row_to_text.split", "int", "int", "general_utils.table_row_to_text.split", "tmp[].split", "tmp[].split", "kv[].split", "kv[].split"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.utils.general_utils.table_row_to_text"], ["def", "convert_test", "(", "json_in", ",", "json_out", ",", "topn", ",", "max_len", ")", ":", "\n", "\n", "    ", "with", "open", "(", "json_in", ")", "as", "f_in", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f_in", ")", "\n", "\n", "", "for", "each_data", "in", "data", ":", "\n", "        ", "table_retrieved", "=", "each_data", "[", "\"table_retrieved\"", "]", "\n", "text_retrieved", "=", "each_data", "[", "\"text_retrieved\"", "]", "\n", "\n", "pre_text", "=", "each_data", "[", "\"pre_text\"", "]", "\n", "post_text", "=", "each_data", "[", "\"post_text\"", "]", "\n", "all_text", "=", "pre_text", "+", "post_text", "\n", "\n", "table", "=", "each_data", "[", "\"table\"", "]", "\n", "\n", "all_retrieved", "=", "each_data", "[", "\"table_retrieved\"", "]", "+", "each_data", "[", "\"text_retrieved\"", "]", "\n", "\n", "sorted_dict", "=", "sorted", "(", "all_retrieved", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "\"score\"", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "acc_len", "=", "0", "\n", "all_text_in", "=", "{", "}", "\n", "all_table_in", "=", "{", "}", "\n", "\n", "for", "tmp", "in", "sorted_dict", ":", "\n", "            ", "if", "len", "(", "all_table_in", ")", "+", "len", "(", "all_text_in", ")", ">=", "topn", ":", "\n", "                ", "break", "\n", "", "this_sent_ind", "=", "int", "(", "tmp", "[", "\"ind\"", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", "\n", "\n", "if", "\"table\"", "in", "tmp", "[", "\"ind\"", "]", ":", "\n", "                ", "this_sent", "=", "table_row_to_text", "(", "table", "[", "0", "]", ",", "table", "[", "this_sent_ind", "]", ")", "\n", "", "else", ":", "\n", "                ", "this_sent", "=", "all_text", "[", "this_sent_ind", "]", "\n", "\n", "", "if", "acc_len", "+", "len", "(", "this_sent", ".", "split", "(", "\" \"", ")", ")", "<", "max_len", ":", "\n", "                ", "if", "\"table\"", "in", "tmp", "[", "\"ind\"", "]", ":", "\n", "                    ", "all_table_in", "[", "tmp", "[", "\"ind\"", "]", "]", "=", "this_sent", "\n", "", "else", ":", "\n", "                    ", "all_text_in", "[", "tmp", "[", "\"ind\"", "]", "]", "=", "this_sent", "\n", "\n", "", "acc_len", "+=", "len", "(", "this_sent", ".", "split", "(", "\" \"", ")", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "this_model_input", "=", "[", "]", "\n", "\n", "# sorted_dict = sorted(all_table_in.items(), key=lambda kv: int(kv[0].split(\"_\")[1]))", "\n", "# this_model_input.extend(sorted_dict)", "\n", "\n", "# sorted_dict = sorted(all_text_in.items(), key=lambda kv: int(kv[0].split(\"_\")[1]))", "\n", "# this_model_input.extend(sorted_dict)", "\n", "\n", "# original_order", "\n", "sorted_dict_table", "=", "sorted", "(", "all_table_in", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "int", "(", "kv", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", ")", "\n", "sorted_dict_text", "=", "sorted", "(", "all_text_in", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "int", "(", "kv", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", ")", "\n", "\n", "for", "tmp", "in", "sorted_dict_text", ":", "\n", "            ", "if", "int", "(", "tmp", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", "<", "len", "(", "pre_text", ")", ":", "\n", "                ", "this_model_input", ".", "append", "(", "tmp", ")", "\n", "\n", "", "", "for", "tmp", "in", "sorted_dict_table", ":", "\n", "            ", "this_model_input", ".", "append", "(", "tmp", ")", "\n", "\n", "", "for", "tmp", "in", "sorted_dict_text", ":", "\n", "            ", "if", "int", "(", "tmp", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", ">=", "len", "(", "pre_text", ")", ":", "\n", "                ", "this_model_input", ".", "append", "(", "tmp", ")", "\n", "\n", "", "", "each_data", "[", "\"qa\"", "]", "[", "\"model_input\"", "]", "=", "this_model_input", "\n", "\n", "\n", "", "with", "open", "(", "json_out", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "data", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n", "", "print", "(", "len", "(", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.Convert.convert_train": [[93, 184], ["open", "json.load", "sorted", "len", "sorted", "sorted", "open", "json.dump", "context.split", "int", "all_table_in.items", "all_text_in.items", "this_model_input.append", "false_retrieved.append", "general_utils.table_row_to_text", "len", "int", "len", "this_model_input.append", "int", "len", "this_model_input.append", "len", "len", "tmp[].split", "len", "general_utils.table_row_to_text.split", "int", "int", "general_utils.table_row_to_text.split", "tmp[].split", "tmp[].split", "kv[].split", "kv[].split"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.utils.general_utils.table_row_to_text"], ["", "def", "convert_train", "(", "json_in", ",", "json_out", ",", "topn", ",", "max_len", ")", ":", "\n", "\n", "    ", "with", "open", "(", "json_in", ")", "as", "f_in", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f_in", ")", "\n", "\n", "", "for", "each_data", "in", "data", ":", "\n", "        ", "table_retrieved", "=", "each_data", "[", "\"table_retrieved\"", "]", "\n", "text_retrieved", "=", "each_data", "[", "\"text_retrieved\"", "]", "\n", "\n", "pre_text", "=", "each_data", "[", "\"pre_text\"", "]", "\n", "post_text", "=", "each_data", "[", "\"post_text\"", "]", "\n", "all_text", "=", "pre_text", "+", "post_text", "\n", "\n", "gold_inds", "=", "each_data", "[", "\"qa\"", "]", "[", "\"gold_inds\"", "]", "\n", "\n", "table", "=", "each_data", "[", "\"table\"", "]", "\n", "\n", "all_retrieved", "=", "each_data", "[", "\"table_retrieved\"", "]", "+", "each_data", "[", "\"text_retrieved\"", "]", "\n", "\n", "false_retrieved", "=", "[", "]", "\n", "for", "tmp", "in", "all_retrieved", ":", "\n", "            ", "if", "tmp", "[", "\"ind\"", "]", "not", "in", "gold_inds", ":", "\n", "                ", "false_retrieved", ".", "append", "(", "tmp", ")", "\n", "\n", "", "", "sorted_dict", "=", "sorted", "(", "false_retrieved", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "\"score\"", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "acc_len", "=", "0", "\n", "all_text_in", "=", "{", "}", "\n", "all_table_in", "=", "{", "}", "\n", "\n", "for", "tmp", "in", "gold_inds", ":", "\n", "            ", "if", "\"table\"", "in", "tmp", ":", "\n", "                ", "all_table_in", "[", "tmp", "]", "=", "gold_inds", "[", "tmp", "]", "\n", "", "else", ":", "\n", "                ", "all_text_in", "[", "tmp", "]", "=", "gold_inds", "[", "tmp", "]", "\n", "\n", "", "", "context", "=", "\"\"", "\n", "for", "tmp", "in", "gold_inds", ":", "\n", "            ", "context", "+=", "gold_inds", "[", "tmp", "]", "\n", "\n", "", "acc_len", "=", "len", "(", "context", ".", "split", "(", "\" \"", ")", ")", "\n", "\n", "for", "tmp", "in", "sorted_dict", ":", "\n", "            ", "if", "len", "(", "all_table_in", ")", "+", "len", "(", "all_text_in", ")", ">=", "topn", ":", "\n", "                ", "break", "\n", "", "this_sent_ind", "=", "int", "(", "tmp", "[", "\"ind\"", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", "\n", "\n", "if", "\"table\"", "in", "tmp", "[", "\"ind\"", "]", ":", "\n", "                ", "this_sent", "=", "table_row_to_text", "(", "table", "[", "0", "]", ",", "table", "[", "this_sent_ind", "]", ")", "\n", "", "else", ":", "\n", "                ", "this_sent", "=", "all_text", "[", "this_sent_ind", "]", "\n", "\n", "", "if", "acc_len", "+", "len", "(", "this_sent", ".", "split", "(", "\" \"", ")", ")", "<", "max_len", ":", "\n", "                ", "if", "\"table\"", "in", "tmp", "[", "\"ind\"", "]", ":", "\n", "                    ", "all_table_in", "[", "tmp", "[", "\"ind\"", "]", "]", "=", "this_sent", "\n", "", "else", ":", "\n", "                    ", "all_text_in", "[", "tmp", "[", "\"ind\"", "]", "]", "=", "this_sent", "\n", "\n", "", "acc_len", "+=", "len", "(", "this_sent", ".", "split", "(", "\" \"", ")", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "this_model_input", "=", "[", "]", "\n", "\n", "# sorted_dict = sorted(all_table_in.items(), key=lambda kv: int(kv[0].split(\"_\")[1]))", "\n", "# this_model_input.extend(sorted_dict)", "\n", "\n", "# sorted_dict = sorted(all_text_in.items(), key=lambda kv: int(kv[0].split(\"_\")[1]))", "\n", "# this_model_input.extend(sorted_dict)", "\n", "\n", "# original_order", "\n", "sorted_dict_table", "=", "sorted", "(", "all_table_in", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "int", "(", "kv", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", ")", "\n", "sorted_dict_text", "=", "sorted", "(", "all_text_in", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "int", "(", "kv", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", ")", "\n", "\n", "for", "tmp", "in", "sorted_dict_text", ":", "\n", "            ", "if", "int", "(", "tmp", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", "<", "len", "(", "pre_text", ")", ":", "\n", "                ", "this_model_input", ".", "append", "(", "tmp", ")", "\n", "\n", "", "", "for", "tmp", "in", "sorted_dict_table", ":", "\n", "            ", "this_model_input", ".", "append", "(", "tmp", ")", "\n", "\n", "", "for", "tmp", "in", "sorted_dict_text", ":", "\n", "            ", "if", "int", "(", "tmp", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", ">=", "len", "(", "pre_text", ")", ":", "\n", "                ", "this_model_input", ".", "append", "(", "tmp", ")", "\n", "\n", "\n", "", "", "each_data", "[", "\"qa\"", "]", "[", "\"model_input\"", "]", "=", "this_model_input", "\n", "\n", "\n", "", "with", "open", "(", "json_out", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "data", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.Convert.convert_generator_sliding": [[187, 261], ["print", "print", "print", "open", "json.load", "table_text.strip.strip", "all_text.replace.replace", "all_text.replace.replace", "all_text.replace.split", "len", "open", "json.dump", "general_utils.table_row_to_text", "sorted", "len", "res.append", "float", "len", "len", "len", "pos_windows.append", "sorted.append", "res.append", "len"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.utils.general_utils.table_row_to_text"], ["", "", "def", "convert_generator_sliding", "(", "json_in", ",", "json_out", ",", "max_len", ",", "stride", ",", "mode", "=", "\"train\"", ")", ":", "\n", "    ", "'''\n    extract examples that can be covered by sliding windows\n    exclude others\n    '''", "\n", "\n", "with", "open", "(", "json_in", ")", "as", "f_in", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f_in", ")", "\n", "\n", "", "good_window", "=", "0", "\n", "res", "=", "[", "]", "\n", "for", "each_data", "in", "data", ":", "\n", "\n", "        ", "pre_text", "=", "each_data", "[", "\"pre_text\"", "]", "\n", "post_text", "=", "each_data", "[", "\"post_text\"", "]", "\n", "\n", "gold_inds", "=", "each_data", "[", "\"qa\"", "]", "[", "\"gold_inds\"", "]", "\n", "\n", "table", "=", "each_data", "[", "\"table\"", "]", "\n", "\n", "table_text", "=", "\"\"", "\n", "for", "row", "in", "table", "[", "1", ":", "]", ":", "\n", "            ", "this_row_text", "=", "table_row_to_text", "(", "table", "[", "0", "]", ",", "row", ")", "\n", "table_text", "+=", "(", "this_row_text", "+", "\" \"", ")", "\n", "\n", "", "table_text", "=", "table_text", ".", "strip", "(", ")", "\n", "\n", "pos_windows", "=", "[", "]", "\n", "neg_windows", "=", "[", "]", "\n", "\n", "all_text", "=", "\" \"", ".", "join", "(", "pre_text", ")", "+", "\" \"", "+", "table_text", "+", "\" \"", "+", "\" \"", ".", "join", "(", "post_text", ")", "\n", "all_text", "=", "all_text", ".", "replace", "(", "\". . . . . .\"", ",", "\"\"", ")", "\n", "all_text", "=", "all_text", ".", "replace", "(", "\"* * * * * *\"", ",", "\"\"", ")", "\n", "all_text_list", "=", "all_text", ".", "split", "(", "\" \"", ")", "\n", "\n", "start", "=", "0", "\n", "while", "start", "<", "len", "(", "all_text_list", ")", "-", "1", ":", "\n", "            ", "this_window", "=", "all_text_list", "[", "start", ":", "start", "+", "max_len", "]", "\n", "this_window_text", "=", "\" \"", ".", "join", "(", "this_window", ")", "\n", "\n", "# whether contains all evi", "\n", "num_gold", "=", "0", "\n", "for", "tmp", "in", "gold_inds", ":", "\n", "                ", "if", "gold_inds", "[", "tmp", "]", "in", "this_window_text", ":", "\n", "                    ", "num_gold", "+=", "1", "\n", "\n", "", "", "if", "num_gold", "==", "len", "(", "gold_inds", ")", ":", "\n", "                ", "pos_windows", ".", "append", "(", "[", "this_window_text", ",", "num_gold", "]", ")", "\n", "", "else", ":", "\n", "                ", "neg_windows", ".", "append", "(", "[", "this_window_text", ",", "num_gold", "]", ")", "\n", "\n", "", "neg_windows", "=", "sorted", "(", "neg_windows", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "start", "+=", "stride", "\n", "\n", "", "if", "len", "(", "pos_windows", ")", ">", "0", ":", "\n", "            ", "good_window", "+=", "1", "\n", "\n", "\n", "", "each_data", "[", "\"qa\"", "]", "[", "\"pos_windows\"", "]", "=", "pos_windows", "\n", "each_data", "[", "\"qa\"", "]", "[", "\"neg_windows\"", "]", "=", "neg_windows", "\n", "\n", "if", "mode", "==", "\"train\"", ":", "\n", "            ", "if", "len", "(", "pos_windows", ")", ">", "0", "and", "\"............\"", "not", "in", "all_text", ":", "\n", "                ", "res", ".", "append", "(", "each_data", ")", "\n", "", "", "else", ":", "\n", "            ", "res", ".", "append", "(", "each_data", ")", "\n", "\n", "\n", "", "", "print", "(", "\"All: \"", ",", "len", "(", "data", ")", ")", "\n", "print", "(", "\"Good windows: \"", ",", "good_window", ")", "\n", "print", "(", "float", "(", "good_window", ")", "/", "len", "(", "data", ")", ")", "\n", "\n", "with", "open", "(", "json_out", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "res", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.czyssrs_finqa.generator.Convert.convert_test_infer": [[263, 338], ["print", "open", "json.load", "sorted", "sorted", "sorted", "sorted", "open", "json.dump", "len", "int", "general_utils.table_row_to_text", "int", "all_table_in.items", "all_text_in.items", "this_model_input.append", "this_model_input.append", "tmp[].split", "tmp[].split", "int", "int", "kv[].split", "kv[].split"], "function", ["home.repos.pwc.inspect_result.czyssrs_finqa.utils.general_utils.table_row_to_text"], ["", "", "def", "convert_test_infer", "(", "json_in", ",", "json_out", ",", "topn", ",", "mode", ")", ":", "\n", "\n", "    ", "with", "open", "(", "json_in", ")", "as", "f_in", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f_in", ")", "\n", "\n", "", "for", "each_data", "in", "data", ":", "\n", "        ", "table_retrieved", "=", "each_data", "[", "\"table_retrieved_all\"", "]", "\n", "text_retrieved", "=", "each_data", "[", "\"text_retrieved_all\"", "]", "\n", "\n", "pre_text", "=", "each_data", "[", "\"pre_text\"", "]", "\n", "post_text", "=", "each_data", "[", "\"post_text\"", "]", "\n", "all_text", "=", "pre_text", "+", "post_text", "\n", "\n", "table", "=", "each_data", "[", "\"table\"", "]", "\n", "\n", "# all_retrieved = each_data[\"table_retrieved\"] + each_data[\"text_retrieved\"]", "\n", "# sorted_dict = sorted(all_retrieved, key=lambda kv: kv[\"score\"], reverse=True)", "\n", "\n", "sorted_dict_text", "=", "sorted", "(", "text_retrieved", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "\"score\"", "]", ",", "reverse", "=", "True", ")", "\n", "sorted_dict_table", "=", "sorted", "(", "table_retrieved", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "\"score\"", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "# print(sorted_dict_table)", "\n", "\n", "acc_len", "=", "0", "\n", "all_text_in", "=", "{", "}", "\n", "all_table_in", "=", "{", "}", "\n", "\n", "# if mode == \"table\":", "\n", "for", "tmp", "in", "sorted_dict_table", "[", ":", "topn", "]", ":", "\n", "            ", "this_sent_ind", "=", "int", "(", "tmp", "[", "\"ind\"", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", "\n", "this_sent", "=", "table_row_to_text", "(", "table", "[", "0", "]", ",", "table", "[", "this_sent_ind", "]", ")", "\n", "all_table_in", "[", "tmp", "[", "\"ind\"", "]", "]", "=", "this_sent", "\n", "\n", "", "for", "tmp", "in", "sorted_dict_text", "[", ":", "topn", "]", ":", "\n", "            ", "this_sent_ind", "=", "int", "(", "tmp", "[", "\"ind\"", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", "\n", "all_text_in", "[", "tmp", "[", "\"ind\"", "]", "]", "=", "all_text", "[", "this_sent_ind", "]", "\n", "\n", "\n", "", "this_model_input", "=", "[", "]", "\n", "\n", "# sorted_dict = sorted(all_table_in.items(), key=lambda kv: int(kv[0].split(\"_\")[1]))", "\n", "# this_model_input.extend(sorted_dict)", "\n", "\n", "# sorted_dict = sorted(all_text_in.items(), key=lambda kv: int(kv[0].split(\"_\")[1]))", "\n", "# this_model_input.extend(sorted_dict)", "\n", "\n", "# original_order", "\n", "sorted_dict_table", "=", "sorted", "(", "all_table_in", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "int", "(", "kv", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", ")", "\n", "sorted_dict_text", "=", "sorted", "(", "all_text_in", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "int", "(", "kv", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", ")", "\n", "\n", "# for tmp in sorted_dict_text:", "\n", "#     if int(tmp[0].split(\"_\")[1]) < len(pre_text):", "\n", "#         this_model_input.append(tmp)", "\n", "\n", "# for tmp in sorted_dict_table:", "\n", "#     this_model_input.append(tmp)", "\n", "\n", "# for tmp in sorted_dict_text:", "\n", "#     if int(tmp[0].split(\"_\")[1]) >= len(pre_text):", "\n", "#         this_model_input.append(tmp)", "\n", "\n", "if", "mode", "==", "\"table\"", ":", "\n", "            ", "for", "tmp", "in", "sorted_dict_table", ":", "\n", "                ", "this_model_input", ".", "append", "(", "tmp", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "tmp", "in", "sorted_dict_text", ":", "\n", "                ", "this_model_input", ".", "append", "(", "tmp", ")", "\n", "\n", "", "", "each_data", "[", "\"qa\"", "]", "[", "\"model_input\"", "]", "=", "this_model_input", "\n", "\n", "\n", "", "with", "open", "(", "json_out", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "data", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n", "", "print", "(", "len", "(", "data", ")", ")", "\n", "\n"]]}