{"home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.bdda.VideoRecord.__init__": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "row", ")", ":", "\n", "        ", "self", ".", "_data", "=", "row", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.bdda.VideoRecord.img_id": [[16, 19], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "img_id", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "_data", "[", "0", "]", ")", "# image index starts with 1", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.bdda.VideoRecord.grids": [[20, 26], ["grid.append", "float"], "methods", ["None"], ["", "@", "property", "\n", "def", "grids", "(", "self", ")", ":", "\n", "        ", "grid", "=", "[", "]", "\n", "for", "item", "in", "self", ".", "_data", "[", "1", ":", "]", ":", "\n", "            ", "grid", ".", "append", "(", "float", "(", "item", ")", ")", "\n", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.bdda.BDDA.__init__": [[32, 50], ["torch.zeros", "torch.ones", "bdda.BDDA._parse_list", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.bdda_otherModels.BDDA._parse_list"], ["def", "__init__", "(", "self", ",", "subset", ",", "file", ",", "feature_path", ",", "threshold", ",", "gazemap_path", ",", "lstm", ",", "seqlen", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n\n        \"\"\"", "\n", "self", ".", "subset", "=", "subset", "\n", "self", ".", "file", "=", "file", "\n", "self", ".", "feature_path", "=", "feature_path", "\n", "self", ".", "gazemap_path", "=", "gazemap_path", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "mean", "=", "torch", ".", "zeros", "(", "1024", ")", "\n", "self", ".", "std", "=", "torch", ".", "ones", "(", "1024", ")", "\n", "self", ".", "lstm", "=", "lstm", "\n", "self", ".", "seqlen", "=", "seqlen", "\n", "self", ".", "_parse_list", "(", ")", "\n", "self", ".", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "\n", "[", "torchvision", ".", "transforms", ".", "Resize", "(", "[", "36", ",", "64", "]", ")", ",", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.bdda.BDDA._parse_list": [[53, 100], ["print", "x.strip().split", "bdda.VideoRecord", "list", "print", "open", "set", "os.path.join", "bdda.BDDA.img_dict[].sort", "os.path.join", "x.strip", "item.img_id.split", "[].split", "[].split", "os.path.exists", "bdda.BDDA.img_list.append", "bdda.BDDA.img_dict[].append", "print", "item.img_id.split", "os.path.exists", "bdda.BDDA.img_list.append", "print", "len", "all", "len", "all", "x.split", "open", "item.img_id.split", "item.img_id.split", "math.isnan", "math.isnan"], "methods", ["None"], ["", "def", "_parse_list", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "img_list", "=", "[", "]", "\n", "\n", "tmp", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "for", "x", "in", "open", "(", "self", ".", "file", ")", "]", "\n", "img_list", "=", "[", "VideoRecord", "(", "item", ")", "for", "item", "in", "tmp", "]", "\n", "\n", "if", "self", ".", "lstm", ":", "\n", "            ", "self", ".", "img_dict", "=", "{", "}", "\n", "\n", "clips", "=", "list", "(", "set", "(", "[", "x", ".", "split", "(", "'_'", ")", "[", "0", "]", "for", "x", "in", "open", "(", "self", ".", "file", ")", "]", ")", ")", "\n", "\n", "for", "clip", "in", "clips", ":", "\n", "                ", "self", ".", "img_dict", "[", "clip", "]", "=", "[", "]", "\n", "\n", "", "for", "item", "in", "img_list", ":", "\n", "                ", "img_name", "=", "item", ".", "img_id", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "feature_name", "=", "img_name", "+", "\".pt\"", "\n", "clip", "=", "item", ".", "img_id", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "img_nr", "=", "item", ".", "img_id", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "1", "]", "\n", "grid", "=", "item", ".", "grids", "\n", "\n", "feature_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "feature_path", ",", "feature_name", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "feature_path", ")", "and", "not", "all", "(", "math", ".", "isnan", "(", "y", ")", "for", "y", "in", "grid", ")", ":", "\n", "                    ", "self", ".", "img_list", ".", "append", "(", "item", ")", "\n", "self", ".", "img_dict", "[", "clip", "]", ".", "append", "(", "img_nr", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'error loading feature:'", ",", "feature_path", ")", "\n", "\n", "", "", "for", "key", "in", "self", ".", "img_dict", ":", "\n", "                ", "self", ".", "img_dict", "[", "key", "]", ".", "sort", "(", ")", "\n", "", "print", "(", "'video number in %s: %d'", "%", "(", "self", ".", "subset", ",", "(", "len", "(", "self", ".", "img_list", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "for", "item", "in", "img_list", ":", "\n", "                ", "img_name", "=", "item", ".", "img_id", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "feature_name", "=", "img_name", "+", "\".pt\"", "\n", "grid", "=", "item", ".", "grids", "\n", "\n", "feature_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "feature_path", ",", "feature_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "feature_path", ")", "and", "not", "all", "(", "math", ".", "isnan", "(", "y", ")", "for", "y", "in", "grid", ")", ":", "\n", "                    ", "self", ".", "img_list", ".", "append", "(", "item", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'error loading feature:'", ",", "feature_path", ")", "\n", "\n", "\n", "", "", "", "print", "(", "'video number in %s: %d'", "%", "(", "self", ".", "subset", ",", "(", "len", "(", "self", ".", "img_list", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.bdda.BDDA._normalizeData": [[102, 104], ["torch.min", "torch.max", "torch.min"], "methods", ["None"], ["", "def", "_normalizeData", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "(", "data", "-", "torch", ".", "min", "(", "data", ")", ")", "/", "(", "torch", ".", "max", "(", "data", ")", "-", "torch", ".", "min", "(", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.bdda.BDDA.__len__": [[105, 107], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.bdda.BDDA.__getitem__": [[108, 168], ["numpy.array", "grid.astype.astype.astype", "bdda.BDDA.img_dict[].index", "os.path.join", "torch.load", "range", "torch.stack", "os.path.join", "torch.load", "record.img_id.split", "PIL.Image.open().convert().crop", "bdda.BDDA.transform", "bdda.BDDA._normalizeData", "record.img_id.split", "[].split", "[].split", "abs", "os.path.join", "torch.load", "feature_list.append", "range", "record.img_id.split", "torch.randn", "feature_list.append", "PIL.Image.open().convert", "record.img_id.split", "record.img_id.split", "PIL.Image.open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.bdda_otherModels.BDDA._normalizeData"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "\n", "if", "self", ".", "lstm", ":", "\n", "            ", "record", "=", "self", ".", "img_list", "[", "index", "]", "\n", "img_name", "=", "record", ".", "img_id", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "feature_name", "=", "img_name", "+", "\".pt\"", "\n", "\n", "clip", "=", "record", ".", "img_id", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "img_nr", "=", "record", ".", "img_id", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "1", "]", "\n", "dict_idx", "=", "self", ".", "img_dict", "[", "clip", "]", ".", "index", "(", "img_nr", ")", "\n", "\n", "feature_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "feature_path", ",", "feature_name", ")", "\n", "feature", "=", "torch", ".", "load", "(", "feature_path", ")", "\n", "\n", "# create list with previous features, last one is original", "\n", "feature_list", "=", "[", "]", "\n", "first", "=", "dict_idx", "-", "(", "self", ".", "seqlen", "-", "1", ")", "\n", "duplicate", "=", "0", "\n", "if", "first", "<", "0", ":", "\n", "                ", "duplicate", "=", "abs", "(", "first", ")", "# if there are not enough previous features, we duplicate original to get seqlen", "\n", "first", "=", "0", "\n", "", "for", "idx", "in", "range", "(", "first", ",", "dict_idx", "+", "1", ")", ":", "\n", "                ", "feature_name2", "=", "clip", "+", "'_'", "+", "self", ".", "img_dict", "[", "clip", "]", "[", "idx", "]", "+", "\".pt\"", "\n", "feature_path2", "=", "os", ".", "path", ".", "join", "(", "self", ".", "feature_path", ",", "feature_name2", ")", "\n", "feature2", "=", "torch", ".", "load", "(", "feature_path2", ")", "\n", "feature_list", ".", "append", "(", "feature2", ")", "\n", "", "if", "duplicate", ":", "\n", "                ", "for", "i", "in", "range", "(", "duplicate", ")", ":", "\n", "                    ", "feature_list", ".", "append", "(", "feature", ")", "\n", "", "", "feature", "=", "torch", ".", "stack", "(", "feature_list", ")", "\n", "", "else", ":", "\n", "            ", "record", "=", "self", ".", "img_list", "[", "index", "]", "\n", "img_name", "=", "record", ".", "img_id", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "feature_name", "=", "img_name", "+", "\".pt\"", "\n", "feature_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "feature_path", ",", "feature_name", ")", "\n", "feature", "=", "torch", ".", "load", "(", "feature_path", ")", "\n", "\n", "\n", "", "if", "self", ".", "subset", "==", "'training'", ":", "\n", "            ", "feature", "=", "feature", "+", "torch", ".", "randn", "(", "512", ",", "12", ",", "20", ")", "\n", "\n", "# set grid values <= 1/gridsize to 0, others to 1", "\n", "", "grid", "=", "np", ".", "array", "(", "record", ".", "grids", ")", "\n", "grid", "[", "grid", ">", "self", ".", "threshold", "]", "=", "1.0", "\n", "grid", "[", "grid", "<=", "self", ".", "threshold", "]", "=", "0.0", "\n", "grid", "=", "grid", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "\n", "if", "self", ".", "subset", "==", "'test'", ":", "\n", "            ", "name", "=", "record", ".", "img_id", ".", "split", "(", "'_'", ")", "\n", "gaze_file", "=", "name", "[", "0", "]", "+", "'_pure_hm_'", "+", "name", "[", "1", "]", "\n", "gaze_gt", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "gazemap_path", ",", "gaze_file", ")", ")", ".", "convert", "(", "'L'", ")", ".", "crop", "(", "(", "0", ",", "96", ",", "1024", ",", "672", ")", ")", "#left,top,right,bottom", "\n", "gaze_gt", "=", "self", ".", "transform", "(", "gaze_gt", ")", "\n", "gaze_gt", "=", "self", ".", "_normalizeData", "(", "gaze_gt", ")", "\n", "\n", "return", "feature", ",", "grid", ",", "gaze_gt", ",", "img_name", "\n", "", "else", ":", "\n", "            ", "return", "feature", ",", "grid", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.compute_grid.main": [[15, 36], ["parser.parse_args", "open", "os.walk", "print", "item.split", "entry.append", "numpy.array", "compute_grid.normalizeData", "compute_grid.grid_calculation", "entry.extend", "open.write", "PIL.Image.open().convert().crop", "map", "print", "PIL.Image.open().convert", "PIL.Image.open", "os.path.join"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.normalizeData", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.compute_grid.grid_calculation"], ["def", "main", "(", ")", ":", "\n", "\t", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "f", "=", "open", "(", "args", ".", "grids", ",", "\"a\"", ")", "\n", "count", "=", "0", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "args", ".", "gazemaps", ")", ":", "\n", "\t\t", "for", "item", "in", "files", ":", "\n", "\t\t\t", "entry", "=", "[", "]", "\n", "name", "=", "item", ".", "split", "(", "'_'", ")", "# we expect gaze map image names of form videoNr_frameNr", "\n", "nn", "=", "name", "[", "0", "]", "+", "'_'", "+", "name", "[", "-", "1", "]", "\n", "entry", ".", "append", "(", "nn", ")", "\n", "gt", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "gazemaps", ",", "item", ")", ")", ".", "convert", "(", "'L'", ")", ".", "crop", "(", "(", "0", ",", "96", ",", "1024", ",", "672", ")", ")", ")", "\n", "gt", "=", "normalizeData", "(", "gt", ")", "\n", "gt_grid", "=", "grid_calculation", "(", "gt", ",", "[", "args", ".", "gridheight", ",", "args", ".", "gridwidth", "]", ")", "\n", "entry", ".", "extend", "(", "gt_grid", ")", "\n", "s", "=", "','", ".", "join", "(", "map", "(", "str", ",", "entry", ")", ")", "\n", "f", ".", "write", "(", "s", "+", "'\\n'", ")", "# python will convert \\n to os.linesep", "\n", "count", "+=", "1", "\n", "if", "count", "%", "500", "==", "0", ":", "\n", "\t\t\t\t", "print", "(", "\"Count: %d\"", "%", "count", ")", "\n", "", "", "", "print", "(", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.compute_grid.grid_calculation": [[38, 59], ["numpy.zeros", "numpy.nonzero", "zip", "numpy.sum"], "function", ["None"], ["", "def", "grid_calculation", "(", "image_array", ",", "num_grid", ")", ":", "\n", "# num_grid = [h,w]", "\n", "\n", "# initialize grid", "\n", "\t", "grid", "=", "np", ".", "zeros", "(", "num_grid", "[", "0", "]", "*", "num_grid", "[", "1", "]", ",", "dtype", "=", "float", ")", "\n", "\n", "# filter gaze map pixel smaller 0.15", "\n", "Y", ",", "X", "=", "np", ".", "nonzero", "(", "image_array", ">", "0.15", ")", "\n", "\n", "image_size", "=", "image_array", ".", "shape", "\n", "\n", "x_grid", "=", "image_size", "[", "1", "]", "//", "num_grid", "[", "1", "]", "\n", "y_grid", "=", "image_size", "[", "0", "]", "//", "num_grid", "[", "0", "]", "\n", "\n", "# count pixel (>=0.15) in each grid cell and divide by overall sum", "\n", "for", "x", ",", "y", "in", "zip", "(", "X", ",", "Y", ")", ":", "\n", "\t\t", "idx", "=", "y", "//", "y_grid", "*", "num_grid", "[", "1", "]", "+", "x", "//", "x_grid", "\n", "grid", "[", "idx", "]", "+=", "1", "\n", "", "grid", "=", "grid", "/", "np", ".", "sum", "(", "grid", ")", "\n", "\n", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.compute_grid.normalizeData": [[61, 64], ["numpy.min", "numpy.max", "numpy.min"], "function", ["None"], ["", "def", "normalizeData", "(", "s_map", ")", ":", "\n", "\t", "norm_s_map", "=", "(", "s_map", "-", "np", ".", "min", "(", "s_map", ")", ")", "/", "(", "(", "np", ".", "max", "(", "s_map", ")", "-", "np", ".", "min", "(", "s_map", ")", ")", "*", "1.0", ")", "\n", "return", "norm_s_map", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.extract_features.SaveOutput.__init__": [[22, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "outputs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.extract_features.SaveOutput.__call__": [[25, 27], ["extract_features.SaveOutput.outputs.append"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "module", ",", "module_in", ",", "module_out", ")", ":", "\n", "        ", "self", ".", "outputs", ".", "append", "(", "module_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.extract_features.SaveOutput.clear": [[28, 30], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "outputs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.extract_features.get_activation": [[38, 42], ["output.detach"], "function", ["None"], ["def", "get_activation", "(", "name", ")", ":", "\n", "    ", "def", "hook", "(", "model", ",", "input", ",", "output", ")", ":", "\n", "        ", "activation", "[", "name", "]", "=", "output", ".", "detach", "(", ")", "\n", "", "return", "hook", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.extract_features.detect": [[43, 188], ["utils.general.increment_path", "utils.general.set_logging", "utils.torch_utils.select_device", "models.experimental.attempt_load", "int", "utils.general.check_img_size", "time.time", "print", "source.isnumeric", "source.endswith", "source.lower().startswith", "models.experimental.attempt_load.stride.max", "hasattr", "models.experimental.attempt_load.half", "utils.torch_utils.load_classifier", "utils.torch_utils.load_classifier.load_state_dict().to().eval", "utils.general.check_imshow", "utils.datasets.LoadStreams", "utils.datasets.LoadImages", "models.experimental.attempt_load.", "torch.from_numpy().to", "torch.from_numpy().to", "utils.torch_utils.time_synchronized", "models.experimental.attempt_load.model[].register_forward_hook", "activation[].data.cpu", "torch.save", "torch.save", "utils.general.non_max_suppression", "utils.torch_utils.time_synchronized", "enumerate", "print", "source.endswith", "pathlib.Path", "torch.zeros().to().type_as", "torch.zeros().to().type_as", "img.unsqueeze.half", "img.unsqueeze.float", "img.unsqueeze.ndimension", "img.unsqueeze.unsqueeze", "extract_features.get_activation", "models.experimental.attempt_load.", "[].split", "os.path.join", "utils.general.apply_classifier", "pathlib.Path", "str", "len", "print", "source.lower", "utils.torch_utils.load_classifier.load_state_dict().to", "next", "torch.from_numpy", "torch.from_numpy", "str", "torch.tensor", "torch.tensor", "im0.copy", "utils.general.scale_coords().round", "det[].unique", "reversed", "cv2.imshow", "cv2.waitKey", "torch.zeros().to", "torch.zeros().to", "models.experimental.attempt_load.parameters", "im0s[].copy", "im0s.copy", "getattr", "print", "str", "cv2.imwrite", "cv2.VideoWriter.write", "len", "time.time", "utils.torch_utils.load_classifier.load_state_dict", "path.split", "utils.general.scale_coords", "int", "utils.plots.plot_one_box", "isinstance", "cv2.VideoWriter", "list", "torch.zeros", "torch.zeros", "open", "f.write", "utils.general.save_one_box", "cv2.VideoWriter.release", "vid_cap.get", "int", "int", "cv2.VideoWriter_fourcc", "utils.general.increment_path.glob", "torch.load", "torch.load", "utils.plots.colors", "vid_cap.get", "vid_cap.get", "int", "utils.general.xyxy2xywh", "torch.tensor().view", "torch.tensor().view", "len", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.extract_features.get_activation"], ["", "def", "detect", "(", "opt", ")", ":", "\n", "    ", "source", ",", "weights", ",", "view_img", ",", "save_txt", ",", "imgsz", "=", "opt", ".", "source", ",", "opt", ".", "weights", ",", "opt", ".", "view_img", ",", "opt", ".", "save_txt", ",", "opt", ".", "img_size", "\n", "save_img", "=", "not", "opt", ".", "nosave", "and", "not", "source", ".", "endswith", "(", "'.txt'", ")", "# save inference images", "\n", "webcam", "=", "source", ".", "isnumeric", "(", ")", "or", "source", ".", "endswith", "(", "'.txt'", ")", "or", "source", ".", "lower", "(", ")", ".", "startswith", "(", "\n", "(", "'rtsp://'", ",", "'rtmp://'", ",", "'http://'", ",", "'https://'", ")", ")", "\n", "\n", "# Directories", "\n", "save_dir", "=", "increment_path", "(", "Path", "(", "opt", ".", "project", ")", "/", "opt", ".", "name", ",", "exist_ok", "=", "opt", ".", "exist_ok", ")", "# increment run", "\n", "(", "save_dir", "/", "'labels'", "if", "save_txt", "else", "save_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "# make dir", "\n", "\n", "# Initialize", "\n", "set_logging", "(", ")", "\n", "device", "=", "select_device", "(", "opt", ".", "device", ")", "\n", "half", "=", "device", ".", "type", "!=", "'cpu'", "# half precision only supported on CUDA", "\n", "\n", "# Load model", "\n", "model", "=", "attempt_load", "(", "weights", ",", "map_location", "=", "device", ")", "# load FP32 model", "\n", "stride", "=", "int", "(", "model", ".", "stride", ".", "max", "(", ")", ")", "# model stride", "\n", "imgsz", "=", "check_img_size", "(", "imgsz", ",", "s", "=", "stride", ")", "# check img_size", "\n", "names", "=", "model", ".", "module", ".", "names", "if", "hasattr", "(", "model", ",", "'module'", ")", "else", "model", ".", "names", "# get class names", "\n", "if", "half", ":", "\n", "        ", "model", ".", "half", "(", ")", "# to FP16", "\n", "\n", "# Second-stage classifier", "\n", "", "classify", "=", "False", "\n", "if", "classify", ":", "\n", "        ", "modelc", "=", "load_classifier", "(", "name", "=", "'resnet101'", ",", "n", "=", "2", ")", "# initialize", "\n", "modelc", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'weights/resnet101.pt'", ",", "map_location", "=", "device", ")", "[", "'model'", "]", ")", ".", "to", "(", "device", ")", ".", "eval", "(", ")", "\n", "\n", "# Set Dataloader", "\n", "", "vid_path", ",", "vid_writer", "=", "None", ",", "None", "\n", "if", "webcam", ":", "\n", "        ", "view_img", "=", "check_imshow", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "# set True to speed up constant image size inference", "\n", "dataset", "=", "LoadStreams", "(", "source", ",", "img_size", "=", "imgsz", ",", "stride", "=", "stride", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "LoadImages", "(", "source", ",", "img_size", "=", "imgsz", ",", "stride", "=", "stride", ")", "\n", "\n", "# Run inference", "\n", "", "if", "device", ".", "type", "!=", "'cpu'", ":", "\n", "        ", "model", "(", "torch", ".", "zeros", "(", "1", ",", "3", ",", "imgsz", ",", "imgsz", ")", ".", "to", "(", "device", ")", ".", "type_as", "(", "next", "(", "model", ".", "parameters", "(", ")", ")", ")", ")", "# run once", "\n", "", "t0", "=", "time", ".", "time", "(", ")", "\n", "for", "path", ",", "img", ",", "im0s", ",", "vid_cap", "in", "dataset", ":", "\n", "        ", "count", "=", "0", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "to", "(", "device", ")", "\n", "img", "=", "img", ".", "half", "(", ")", "if", "half", "else", "img", ".", "float", "(", ")", "# uint8 to fp16/32", "\n", "img", "/=", "255.0", "# 0 - 255 to 0.0 - 1.0", "\n", "if", "img", ".", "ndimension", "(", ")", "==", "3", ":", "\n", "            ", "img", "=", "img", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# Inference", "\n", "", "t1", "=", "time_synchronized", "(", ")", "\n", "\n", "# prepare feature extraction", "\n", "model", ".", "model", "[", "22", "]", ".", "register_forward_hook", "(", "get_activation", "(", "'after22'", ")", ")", "# 22 is before last BottleneckCSP", "\n", "\n", "pred", "=", "model", "(", "img", ",", "augment", "=", "opt", ".", "augment", ")", "[", "0", "]", "\n", "\n", "# save extracted features", "\n", "imagename", "=", "(", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "tensor", "=", "activation", "[", "'after22'", "]", ".", "data", ".", "cpu", "(", ")", "\n", "torch", ".", "save", "(", "tensor", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "features", ",", "imagename", "+", "'.pt'", ")", ")", "\n", "\n", "\n", "\n", "\n", "# Apply NMS", "\n", "pred", "=", "non_max_suppression", "(", "pred", ",", "opt", ".", "conf_thres", ",", "opt", ".", "iou_thres", ",", "opt", ".", "classes", ",", "opt", ".", "agnostic_nms", ",", "\n", "max_det", "=", "opt", ".", "max_det", ")", "\n", "t2", "=", "time_synchronized", "(", ")", "\n", "\n", "# Apply Classifier", "\n", "if", "classify", ":", "\n", "            ", "pred", "=", "apply_classifier", "(", "pred", ",", "modelc", ",", "img", ",", "im0s", ")", "\n", "\n", "# Process detections", "\n", "", "for", "i", ",", "det", "in", "enumerate", "(", "pred", ")", ":", "# detections per image", "\n", "            ", "if", "webcam", ":", "# batch_size >= 1", "\n", "                ", "p", ",", "s", ",", "im0", ",", "frame", "=", "path", "[", "i", "]", ",", "f'{i}: '", ",", "im0s", "[", "i", "]", ".", "copy", "(", ")", ",", "dataset", ".", "count", "\n", "", "else", ":", "\n", "                ", "p", ",", "s", ",", "im0", ",", "frame", "=", "path", ",", "''", ",", "im0s", ".", "copy", "(", ")", ",", "getattr", "(", "dataset", ",", "'frame'", ",", "0", ")", "\n", "\n", "", "p", "=", "Path", "(", "p", ")", "# to Path", "\n", "save_path", "=", "str", "(", "save_dir", "/", "p", ".", "name", ")", "# img.jpg", "\n", "txt_path", "=", "str", "(", "save_dir", "/", "'labels'", "/", "p", ".", "stem", ")", "+", "(", "''", "if", "dataset", ".", "mode", "==", "'image'", "else", "f'_{frame}'", ")", "# img.txt", "\n", "s", "+=", "'%gx%g '", "%", "img", ".", "shape", "[", "2", ":", "]", "# print string", "\n", "gn", "=", "torch", ".", "tensor", "(", "im0", ".", "shape", ")", "[", "[", "1", ",", "0", ",", "1", ",", "0", "]", "]", "# normalization gain whwh", "\n", "imc", "=", "im0", ".", "copy", "(", ")", "if", "opt", ".", "save_crop", "else", "im0", "# for opt.save_crop", "\n", "if", "len", "(", "det", ")", ":", "\n", "# Rescale boxes from img_size to im0 size", "\n", "                ", "det", "[", ":", ",", ":", "4", "]", "=", "scale_coords", "(", "img", ".", "shape", "[", "2", ":", "]", ",", "det", "[", ":", ",", ":", "4", "]", ",", "im0", ".", "shape", ")", ".", "round", "(", ")", "\n", "\n", "# Print results", "\n", "for", "c", "in", "det", "[", ":", ",", "-", "1", "]", ".", "unique", "(", ")", ":", "\n", "                    ", "n", "=", "(", "det", "[", ":", ",", "-", "1", "]", "==", "c", ")", ".", "sum", "(", ")", "# detections per class", "\n", "s", "+=", "f\"{n} {names[int(c)]}{'s' * (n > 1)}, \"", "# add to string", "\n", "print", "(", "'s'", ",", "s", ")", "\n", "\n", "# Write results", "\n", "", "for", "*", "xyxy", ",", "conf", ",", "cls", "in", "reversed", "(", "det", ")", ":", "\n", "                    ", "if", "save_txt", ":", "# Write to file", "\n", "                        ", "xywh", "=", "(", "xyxy2xywh", "(", "torch", ".", "tensor", "(", "xyxy", ")", ".", "view", "(", "1", ",", "4", ")", ")", "/", "gn", ")", ".", "view", "(", "-", "1", ")", ".", "tolist", "(", ")", "# normalized xywh", "\n", "line", "=", "(", "cls", ",", "*", "xywh", ",", "conf", ")", "if", "opt", ".", "save_conf", "else", "(", "cls", ",", "*", "xywh", ")", "# label format", "\n", "with", "open", "(", "txt_path", "+", "'.txt'", ",", "'a'", ")", "as", "f", ":", "\n", "                            ", "f", ".", "write", "(", "(", "'%g '", "*", "len", "(", "line", ")", ")", ".", "rstrip", "(", ")", "%", "line", "+", "'\\n'", ")", "\n", "\n", "", "", "if", "save_img", "or", "opt", ".", "save_crop", "or", "view_img", ":", "# Add bbox to image", "\n", "                        ", "c", "=", "int", "(", "cls", ")", "# integer class", "\n", "label", "=", "None", "if", "opt", ".", "hide_labels", "else", "(", "names", "[", "c", "]", "if", "opt", ".", "hide_conf", "else", "f'{names[c]} {conf:.2f}'", ")", "\n", "plot_one_box", "(", "xyxy", ",", "im0", ",", "label", "=", "label", ",", "color", "=", "colors", "(", "c", ",", "True", ")", ",", "line_thickness", "=", "opt", ".", "line_thickness", ")", "\n", "if", "opt", ".", "save_crop", ":", "\n", "                            ", "save_one_box", "(", "xyxy", ",", "imc", ",", "file", "=", "save_dir", "/", "'crops'", "/", "names", "[", "c", "]", "/", "f'{p.stem}.jpg'", ",", "BGR", "=", "True", ")", "\n", "\n", "# Print time (inference + NMS)", "\n", "", "", "", "", "print", "(", "f'{s}Done. ({t2 - t1:.3f}s)'", ")", "\n", "\n", "# Stream results", "\n", "if", "view_img", ":", "\n", "                ", "cv2", ".", "imshow", "(", "str", "(", "p", ")", ",", "im0", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "# 1 millisecond", "\n", "\n", "# Save results (image with detections)", "\n", "", "if", "save_img", ":", "\n", "                ", "if", "dataset", ".", "mode", "==", "'image'", ":", "\n", "                    ", "cv2", ".", "imwrite", "(", "save_path", ",", "im0", ")", "\n", "", "else", ":", "# 'video' or 'stream'", "\n", "                    ", "if", "vid_path", "!=", "save_path", ":", "# new video", "\n", "                        ", "vid_path", "=", "save_path", "\n", "if", "isinstance", "(", "vid_writer", ",", "cv2", ".", "VideoWriter", ")", ":", "\n", "                            ", "vid_writer", ".", "release", "(", ")", "# release previous video writer", "\n", "", "if", "vid_cap", ":", "# video", "\n", "                            ", "fps", "=", "vid_cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "w", "=", "int", "(", "vid_cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ")", ")", "\n", "h", "=", "int", "(", "vid_cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ")", ")", "\n", "", "else", ":", "# stream", "\n", "                            ", "fps", ",", "w", ",", "h", "=", "30", ",", "im0", ".", "shape", "[", "1", "]", ",", "im0", ".", "shape", "[", "0", "]", "\n", "save_path", "+=", "'.mp4'", "\n", "", "vid_writer", "=", "cv2", ".", "VideoWriter", "(", "save_path", ",", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'mp4v'", ")", ",", "fps", ",", "(", "w", ",", "h", ")", ")", "\n", "", "vid_writer", ".", "write", "(", "im0", ")", "\n", "\n", "", "", "", "", "if", "save_txt", "or", "save_img", ":", "\n", "        ", "s", "=", "f\"\\n{len(list(save_dir.glob('labels/*.txt')))} labels saved to {save_dir / 'labels'}\"", "if", "save_txt", "else", "''", "\n", "print", "(", "f\"Results saved to {save_dir}{s}\"", ")", "\n", "\n", "", "print", "(", "f'Done. ({time.time() - t0:.3f}s)'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.network.Net.__init__": [[14, 19], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gridwidth", ",", "gridheight", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "512", ",", "16", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "6", ",", "10", ")", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "960", ",", "gridheight", "*", "gridwidth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.network.Net.forward": [[20, 28], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "network.Net.float", "network.Net.conv1", "network.Net.pool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "network.Net.fc3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "torch", ".", "squeeze", "(", "x", ")", "\n", "x", "=", "x", ".", "float", "(", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.network.LstmNet.__init__": [[31, 44], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gridwidth", ",", "gridheight", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "512", ",", "16", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "6", ",", "10", ")", ")", "\n", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "\n", "input_size", "=", "16", "*", "6", "*", "10", ",", "\n", "hidden_size", "=", "256", ",", "\n", "num_layers", "=", "1", ",", "\n", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "256", ",", "gridheight", "*", "gridwidth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.network.LstmNet.forward": [[45, 54], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "x.float.float.float", "x.float.float.size", "x.float.float.view", "network.LstmNet.pool", "network.LstmNet.view", "network.LstmNet.lstm", "network.LstmNet.fc3", "network.LstmNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "torch", ".", "squeeze", "(", "x", ")", "\n", "x", "=", "x", ".", "float", "(", ")", "\n", "batch_size", ",", "timesteps", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "c_in", "=", "x", ".", "view", "(", "batch_size", "*", "timesteps", ",", "C", ",", "H", ",", "W", ")", "\n", "c_out", "=", "self", ".", "pool", "(", "self", ".", "conv1", "(", "c_in", ")", ")", "\n", "r_in", "=", "c_out", ".", "view", "(", "batch_size", ",", "timesteps", ",", "-", "1", ")", "\n", "r_out", ",", "(", "h_n", ",", "h_c", ")", "=", "self", ".", "lstm", "(", "r_in", ")", "\n", "return", "self", ".", "fc3", "(", "r_out", "[", ":", ",", "-", "1", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.network.ConvLSTMCell.__init__": [[58, 82], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "hidden_channels", ",", "kernel_size", ")", ":", "\n", "        ", "super", "(", "ConvLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "hidden_channels", "%", "2", "==", "0", "\n", "\n", "self", ".", "input_channels", "=", "input_channels", "\n", "self", ".", "hidden_channels", "=", "hidden_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "num_features", "=", "4", "\n", "\n", "self", ".", "padding", "=", "int", "(", "(", "kernel_size", "-", "1", ")", "/", "2", ")", "\n", "\n", "self", ".", "Wxi", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "True", ")", "\n", "self", ".", "Whi", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wxf", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "True", ")", "\n", "self", ".", "Whf", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wxc", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "True", ")", "\n", "self", ".", "Whc", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wxo", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "True", ")", "\n", "self", ".", "Who", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "Wci", "=", "None", "\n", "self", ".", "Wcf", "=", "None", "\n", "self", ".", "Wco", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.network.ConvLSTMCell.forward": [[83, 90], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "network.ConvLSTMCell.Wxi", "network.ConvLSTMCell.Whi", "network.ConvLSTMCell.Wxf", "network.ConvLSTMCell.Whf", "network.ConvLSTMCell.Wxo", "network.ConvLSTMCell.Who", "network.ConvLSTMCell.Wxc", "network.ConvLSTMCell.Whc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "h", ",", "c", ")", ":", "\n", "        ", "ci", "=", "torch", ".", "sigmoid", "(", "self", ".", "Wxi", "(", "x", ")", "+", "self", ".", "Whi", "(", "h", ")", "+", "c", "*", "self", ".", "Wci", ")", "\n", "cf", "=", "torch", ".", "sigmoid", "(", "self", ".", "Wxf", "(", "x", ")", "+", "self", ".", "Whf", "(", "h", ")", "+", "c", "*", "self", ".", "Wcf", ")", "\n", "cc", "=", "cf", "*", "c", "+", "ci", "*", "torch", ".", "tanh", "(", "self", ".", "Wxc", "(", "x", ")", "+", "self", ".", "Whc", "(", "h", ")", ")", "\n", "co", "=", "torch", ".", "sigmoid", "(", "self", ".", "Wxo", "(", "x", ")", "+", "self", ".", "Who", "(", "h", ")", "+", "cc", "*", "self", ".", "Wco", ")", "\n", "ch", "=", "co", "*", "torch", ".", "tanh", "(", "cc", ")", "\n", "return", "ch", ",", "cc", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.network.ConvLSTMCell.init_hidden": [[91, 101], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "network.ConvLSTMCell.Wci.size", "network.ConvLSTMCell.Wci.size"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ",", "hidden", ",", "shape", ")", ":", "\n", "        ", "if", "self", ".", "Wci", "is", "None", ":", "\n", "            ", "self", ".", "Wci", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", "\n", "self", ".", "Wcf", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", "\n", "self", ".", "Wco", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "shape", "[", "0", "]", "==", "self", ".", "Wci", ".", "size", "(", ")", "[", "2", "]", ",", "'Input Height Mismatched!'", "\n", "assert", "shape", "[", "1", "]", "==", "self", ".", "Wci", ".", "size", "(", ")", "[", "3", "]", ",", "'Input Width Mismatched!'", "\n", "", "return", "(", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.network.ConvLSTM.__init__": [[106, 120], ["torch.Module.__init__", "len", "range", "network.ConvLSTMCell", "setattr", "network.ConvLSTM._all_layers.append"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "hidden_channels", ",", "kernel_size", ",", "step", "=", "1", ",", "effective_step", "=", "[", "1", "]", ")", ":", "\n", "        ", "super", "(", "ConvLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_channels", "=", "[", "input_channels", "]", "+", "hidden_channels", "\n", "self", ".", "hidden_channels", "=", "hidden_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "num_layers", "=", "len", "(", "hidden_channels", ")", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "effective_step", "=", "effective_step", "\n", "self", ".", "_all_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "name", "=", "'cell{}'", ".", "format", "(", "i", ")", "\n", "cell", "=", "ConvLSTMCell", "(", "self", ".", "input_channels", "[", "i", "]", ",", "self", ".", "hidden_channels", "[", "i", "]", ",", "self", ".", "kernel_size", ")", "\n", "setattr", "(", "self", ",", "name", ",", "cell", ")", "\n", "self", ".", "_all_layers", ".", "append", "(", "cell", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.network.ConvLSTM.forward": [[121, 144], ["range", "range", "outputs.append", "x.size", "getattr().init_hidden", "internal_state.append", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.network.ConvLSTMCell.init_hidden"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "internal_state", "=", "[", "]", "\n", "outputs", "=", "[", "]", "\n", "for", "step", "in", "range", "(", "self", ".", "step", ")", ":", "\n", "            ", "x", "=", "input", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "# all cells are initialized in the first step", "\n", "                ", "name", "=", "'cell{}'", ".", "format", "(", "i", ")", "\n", "if", "step", "==", "0", ":", "\n", "                    ", "bsize", ",", "_", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "(", "h", ",", "c", ")", "=", "getattr", "(", "self", ",", "name", ")", ".", "init_hidden", "(", "batch_size", "=", "bsize", ",", "hidden", "=", "self", ".", "hidden_channels", "[", "i", "]", ",", "\n", "shape", "=", "(", "height", ",", "width", ")", ")", "\n", "internal_state", ".", "append", "(", "(", "h", ",", "c", ")", ")", "\n", "\n", "# do forward", "\n", "", "(", "h", ",", "c", ")", "=", "internal_state", "[", "i", "]", "\n", "x", ",", "new_c", "=", "getattr", "(", "self", ",", "name", ")", "(", "x", ",", "h", ",", "c", ")", "\n", "internal_state", "[", "i", "]", "=", "(", "x", ",", "new_c", ")", "\n", "# only record effective steps", "\n", "", "if", "step", "in", "self", ".", "effective_step", ":", "\n", "                ", "outputs", ".", "append", "(", "x", ")", "\n", "\n", "", "", "return", "outputs", ",", "(", "x", ",", "new_c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.network.ConvLSTMNet.__init__": [[146, 154], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "network.ConvLSTM", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gridheight", ",", "gridwidth", ",", "seqlen", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "6", ",", "10", ")", ")", "\n", "self", ".", "convlstm", "=", "ConvLSTM", "(", "input_channels", "=", "128", ",", "hidden_channels", "=", "[", "16", "]", ",", "kernel_size", "=", "3", ",", "step", "=", "seqlen", ",", "\n", "effective_step", "=", "[", "seqlen", "-", "1", "]", ")", "\n", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "960", ",", "gridheight", "*", "gridwidth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.network.ConvLSTMNet.forward": [[155, 167], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "network.ConvLSTMNet.float", "network.ConvLSTMNet.size", "network.ConvLSTMNet.view", "network.ConvLSTMNet.conv1", "network.ConvLSTMNet.pool", "network.ConvLSTMNet.convlstm", "network.ConvLSTMNet.view", "network.ConvLSTMNet.fc3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "torch", ".", "squeeze", "(", "x", ")", "\n", "x", "=", "x", ".", "float", "(", ")", "\n", "batch_size", ",", "timesteps", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "c_in", "=", "x", ".", "view", "(", "batch_size", "*", "timesteps", ",", "C", ",", "H", ",", "W", ")", "\n", "c_out", "=", "self", ".", "conv1", "(", "c_in", ")", "\n", "c_out", "=", "self", ".", "pool", "(", "c_out", ")", "\n", "output_convlstm", ",", "_", "=", "self", ".", "convlstm", "(", "c_out", ")", "\n", "x", "=", "output_convlstm", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "timesteps", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", "[", ":", ",", "-", "1", ",", ":", "]", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.AverageMeter.__init__": [[483, 485], ["gaze_prediction_and_evaluation.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.AverageMeter.reset": [[486, 491], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.AverageMeter.update": [[492, 497], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.GaussianSmoothing.__init__": [[529, 569], ["torch.nn.Module.__init__", "isinstance", "isinstance", "torch.meshgrid", "zip", "kernel.repeat.repeat.view", "kernel.repeat.repeat.repeat", "gaze_prediction_and_evaluation.GaussianSmoothing.register_buffer", "torch.sum", "torch.arange", "torch.exp", "kernel.repeat.repeat.size", "RuntimeError", "math.sqrt", "kernel.repeat.repeat.dim"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "kernel_size", ",", "sigma", ",", "dim", "=", "2", ")", ":", "\n", "        ", "super", "(", "GaussianSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "kernel_size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "kernel_size", "=", "[", "kernel_size", "]", "*", "dim", "\n", "", "if", "isinstance", "(", "sigma", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "sigma", "=", "[", "sigma", "]", "*", "dim", "\n", "\n", "# The gaussian kernel is the product of the", "\n", "# gaussian function of each dimension.", "\n", "", "kernel", "=", "1", "\n", "meshgrids", "=", "torch", ".", "meshgrid", "(", "\n", "[", "\n", "torch", ".", "arange", "(", "size", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "for", "size", "in", "kernel_size", "\n", "]", "\n", ")", "\n", "for", "size", ",", "std", ",", "mgrid", "in", "zip", "(", "kernel_size", ",", "sigma", ",", "meshgrids", ")", ":", "\n", "            ", "mean", "=", "(", "size", "-", "1", ")", "/", "2", "\n", "kernel", "*=", "1", "/", "(", "std", "*", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", ")", "*", "torch", ".", "exp", "(", "-", "(", "(", "mgrid", "-", "mean", ")", "/", "(", "2", "*", "std", ")", ")", "**", "2", ")", "\n", "\n", "# Make sure sum of values in gaussian kernel equals 1.", "\n", "", "kernel", "=", "kernel", "/", "torch", ".", "sum", "(", "kernel", ")", "\n", "\n", "# Reshape to depthwise convolutional weight", "\n", "kernel", "=", "kernel", ".", "view", "(", "1", ",", "1", ",", "*", "kernel", ".", "size", "(", ")", ")", "\n", "kernel", "=", "kernel", ".", "repeat", "(", "channels", ",", "*", "[", "1", "]", "*", "(", "kernel", ".", "dim", "(", ")", "-", "1", ")", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "kernel", ")", "\n", "self", ".", "groups", "=", "channels", "\n", "\n", "if", "dim", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "F", ".", "conv1d", "\n", "", "elif", "dim", "==", "2", ":", "\n", "            ", "self", ".", "conv", "=", "F", ".", "conv2d", "\n", "", "elif", "dim", "==", "3", ":", "\n", "            ", "self", ".", "conv", "=", "F", ".", "conv3d", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "'Only 1, 2 and 3 dimensions are supported. Received {}.'", ".", "format", "(", "dim", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.GaussianSmoothing.forward": [[571, 580], ["gaze_prediction_and_evaluation.GaussianSmoothing.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        Apply gaussian filter to input.\n        Arguments:\n            input (torch.Tensor): Input to apply gaussian filter on.\n        Returns:\n            filtered (torch.Tensor): Filtered output.\n        \"\"\"", "\n", "return", "self", ".", "conv", "(", "input", ",", "weight", "=", "self", ".", "weight", ",", "groups", "=", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.main": [[71, 168], ["parser.parse_args", "network.Net", "torch.nn.BCEWithLogitsLoss().cuda", "torch.optim.Adam", "os.path.join", "bdda.BDDA", "torch.utils.data.DataLoader", "gaze_prediction_and_evaluation.test", "print", "network.LstmNet", "network.ConvLSTMNet", "torch.cuda.set_device", "network.ConvLSTMNet.cuda", "network.ConvLSTMNet.parameters", "os.path.isfile", "os.path.join", "os.path.join", "bdda.BDDA", "bdda.BDDA", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "os.path.isfile", "torch.nn.BCEWithLogitsLoss", "print", "torch.load", "network.ConvLSTMNet.load_state_dict", "print", "print", "gaze_prediction_and_evaluation.adjust_learning_rate", "gaze_prediction_and_evaluation.train", "gaze_prediction_and_evaluation.validate", "min", "gaze_prediction_and_evaluation.save_checkpoint", "print", "torch.load", "network.ConvLSTMNet.load_state_dict", "print", "print", "network.ConvLSTMNet.state_dict"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.test", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.adjust_learning_rate", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.train", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.validate", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.save_checkpoint"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "dim", "=", "args", ".", "gridwidth", "*", "args", ".", "gridheight", "\n", "th", "=", "1", "/", "dim", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "model", "=", "network", ".", "Net", "(", "args", ".", "gridheight", ",", "args", ".", "gridwidth", ")", "\n", "\n", "if", "args", ".", "lstm", ":", "\n", "        ", "model", "=", "network", ".", "LstmNet", "(", "args", ".", "gridheight", ",", "args", ".", "gridwidth", ")", "\n", "\n", "", "if", "args", ".", "convlstm", ":", "\n", "        ", "model", "=", "network", ".", "ConvLSTMNet", "(", "args", ".", "gridheight", ",", "args", ".", "gridwidth", ",", "args", ".", "sequence", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-08", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "False", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "# Data loading code", "\n", "", "", "if", "not", "args", ".", "no_train", ":", "\n", "        ", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'training'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'validation'", ")", "\n", "\n", "train_dataset", "=", "BDDA", "(", "\"training\"", ",", "args", ".", "traingrid", ",", "traindir", ",", "th", ",", "args", ".", "gazemaps", ",", "(", "args", ".", "lstm", "or", "args", ".", "convlstm", ")", ",", "args", ".", "sequence", ")", "\n", "val_dataset", "=", "BDDA", "(", "\"validation\"", ",", "args", ".", "valgrid", ",", "valdir", ",", "th", ",", "args", ".", "gazemaps", ",", "(", "args", ".", "lstm", "or", "args", ".", "convlstm", ")", ",", "args", ".", "sequence", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "\n", "", "testdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'test'", ")", "\n", "test_dataset", "=", "BDDA", "(", "\"test\"", ",", "args", ".", "testgrid", ",", "testdir", ",", "th", ",", "args", ".", "gazemaps", ",", "(", "args", ".", "lstm", "or", "args", ".", "convlstm", ")", ",", "args", ".", "sequence", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "best_loss", "=", "1000000", "\n", "\n", "if", "not", "args", ".", "no_train", ":", "\n", "\n", "        ", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "\n", "            ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "# evaluate on validation set", "\n", "loss1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "is_best", "=", "loss1", "<", "best_loss", "\n", "best_loss", "=", "min", "(", "loss1", ",", "best_loss", ")", "\n", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ",", "args", ".", "best", ")", "\n", "\n", "", "", "if", "args", ".", "best", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "best", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "best", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "best", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "False", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "best", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "test", "(", "test_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.save_checkpoint": [[169, 172], ["torch.save"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "if", "is_best", ":", "\n", "        ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.train": [[174, 215], ["gaze_prediction_and_evaluation.AverageMeter", "gaze_prediction_and_evaluation.AverageMeter", "gaze_prediction_and_evaluation.AverageMeter", "model.train", "time.time", "enumerate", "gaze_prediction_and_evaluation.AverageMeter.update", "model", "criterion", "gaze_prediction_and_evaluation.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "gaze_prediction_and_evaluation.AverageMeter.update", "time.time", "input.cuda.cuda", "target.cuda.cuda", "criterion.item", "input.cuda.size", "print", "time.time", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.train", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.update", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.update", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.update"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "input", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.adjust_learning_rate": [[217, 222], ["None"], "function", ["None"], ["", "", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "10", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.validate": [[223, 253], ["gaze_prediction_and_evaluation.AverageMeter", "gaze_prediction_and_evaluation.AverageMeter", "model.eval", "torch.no_grad", "time.time", "enumerate", "model", "criterion", "gaze_prediction_and_evaluation.AverageMeter.update", "gaze_prediction_and_evaluation.AverageMeter.update", "time.time", "input.cuda.cuda", "target.cuda.cuda", "criterion.item", "input.cuda.size", "print", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.update", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.update"], ["", "", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "input", "=", "input", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "input", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Validation: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ")", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.test": [[255, 393], ["gaze_prediction_and_evaluation.AverageMeter", "gaze_prediction_and_evaluation.AverageMeter", "gaze_prediction_and_evaluation.AverageMeter", "gaze_prediction_and_evaluation.AverageMeter", "model.eval", "GaussianSmoothing().cuda", "torch.no_grad", "time.time", "enumerate", "print", "print", "print", "print", "print", "gaze_prediction_and_evaluation.GaussianSmoothing", "model", "criterion", "torch.sigmoid", "gaze_prediction_and_evaluation.grid2heatmap", "torch.nn.functional.interpolate", "GaussianSmoothing().cuda.", "torch.nn.functional.pad", "heatmap.view.view", "torch.nn.functional.softmax", "heatmap.view.view", "range", "gaze_prediction_and_evaluation.kl", "gaze_prediction_and_evaluation.cc", "gaze_prediction_and_evaluation.AverageMeter.update", "gaze_prediction_and_evaluation.AverageMeter.update", "gaze_prediction_and_evaluation.AverageMeter.update", "gaze_prediction_and_evaluation.AverageMeter.update", "time.time", "sklearn.metrics.roc_auc_score", "input.cuda.cuda", "target.cuda.cuda", "gaze_gt.cuda.cuda", "heatmap.view.size", "heatmap.view.min", "heatmap.view.max", "heatmap.view.size", "os.path.join", "os.path.exists", "criterion.item", "input.cuda.size", "input.cuda.size", "input.cuda.size", "print", "len", "time.time", "open", "gaze_prediction_and_evaluation.visualization", "len", "linestring.split", "float", "float", "float", "float", "gaze_prediction_and_evaluation.bb_mapping", "torch.max", "torch.max", "hm_max_values.append", "heatmap_img.cpu", "gt_img.cpu", "gt.append", "gt.append"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.grid2heatmap", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.kl", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.cc", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.update", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.update", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.update", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.update", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.visualization", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.bb_mapping"], ["", "def", "test", "(", "test_loader", ",", "model", ",", "criterion", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "kld_losses", "=", "AverageMeter", "(", ")", "\n", "cc_losses", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "tp", "=", "0", "\n", "fp", "=", "0", "\n", "fn", "=", "0", "\n", "all_count", "=", "0", "\n", "\n", "hm_max_values", "=", "[", "]", "\n", "gt", "=", "[", "]", "\n", "\n", "i", "=", "0", "\n", "\n", "heightfactor", "=", "576", "//", "args", ".", "gridheight", "\n", "widthfactor", "=", "1024", "//", "args", ".", "gridwidth", "\n", "\n", "smoothing", "=", "GaussianSmoothing", "(", "1", ",", "5", ",", "1", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ",", "gaze_gt", ",", "img_names", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "input", "=", "input", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "gaze_gt", "=", "gaze_gt", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "input", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "output", "=", "torch", ".", "sigmoid", "(", "output", ")", "\n", "\n", "heatmap", "=", "grid2heatmap", "(", "output", ",", "[", "heightfactor", ",", "widthfactor", "]", ",", "[", "args", ".", "gridheight", ",", "args", ".", "gridwidth", "]", ",", "args", ")", "\n", "heatmap", "=", "F", ".", "interpolate", "(", "heatmap", ",", "size", "=", "[", "36", ",", "64", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "heatmap", "=", "smoothing", "(", "heatmap", ")", "\n", "heatmap", "=", "F", ".", "pad", "(", "heatmap", ",", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "mode", "=", "'constant'", ")", "\n", "heatmap", "=", "heatmap", ".", "view", "(", "heatmap", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "heatmap", "=", "F", ".", "softmax", "(", "heatmap", ",", "dim", "=", "1", ")", "\n", "\n", "# normalize", "\n", "heatmap", "-=", "heatmap", ".", "min", "(", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "heatmap", "/=", "heatmap", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "heatmap", "=", "heatmap", ".", "view", "(", "-", "1", ",", "1", ",", "36", ",", "64", ")", "\n", "\n", "for", "j", "in", "range", "(", "heatmap", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "img_name", "=", "img_names", "[", "j", "]", "\n", "heatmap_img", "=", "heatmap", "[", "j", "]", "# predicted gaze map", "\n", "gt_img", "=", "gaze_gt", "[", "j", "]", "# original gaze map", "\n", "\n", "##### compute object-level metrics", "\n", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "yolo5bb", ",", "img_name", "+", "\".txt\"", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "                    ", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "\n", "                        ", "for", "linestring", "in", "f", ":", "\n", "                            ", "all_count", "+=", "1", "\n", "\n", "line", "=", "linestring", ".", "split", "(", ")", "\n", "\n", "width", "=", "float", "(", "line", "[", "3", "]", ")", "\n", "height", "=", "float", "(", "line", "[", "4", "]", ")", "\n", "x_center", "=", "float", "(", "line", "[", "1", "]", ")", "\n", "y_center", "=", "float", "(", "line", "[", "2", "]", ")", "\n", "\n", "x_min", ",", "x_max", ",", "y_min", ",", "y_max", "=", "bb_mapping", "(", "x_center", ",", "y_center", ",", "width", ",", "height", ")", "\n", "\n", "# find maximum pixel value within object bounding box", "\n", "gt_obj", "=", "gt_img", "[", "0", ",", "y_min", ":", "y_max", "+", "1", ",", "x_min", ":", "x_max", "+", "1", "]", "\n", "gt_obj_max", "=", "torch", ".", "max", "(", "gt_obj", ")", "\n", "heatmap_obj", "=", "heatmap_img", "[", "0", ",", "y_min", ":", "y_max", "+", "1", ",", "x_min", ":", "x_max", "+", "1", "]", "\n", "heatmap_obj_max", "=", "torch", ".", "max", "(", "heatmap_obj", ")", "\n", "\n", "# object is recognized if maximum pixel value is higher than th", "\n", "gt_obj_recogn", "=", "gt_obj_max", ">", "0.15", "\n", "hm_obj_recogn", "=", "heatmap_obj_max", ">", "args", ".", "threshhold", "\n", "\n", "hm_max_values", ".", "append", "(", "heatmap_obj_max", ")", "\n", "\n", "if", "gt_obj_recogn", ":", "\n", "                                ", "gt", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                                ", "gt", ".", "append", "(", "0", ")", "\n", "\n", "", "if", "(", "hm_obj_recogn", "and", "gt_obj_recogn", ")", ":", "\n", "                                ", "tp", "+=", "1", "\n", "", "elif", "(", "hm_obj_recogn", "and", "not", "gt_obj_recogn", ")", ":", "\n", "                                ", "fp", "+=", "1", "\n", "", "elif", "(", "not", "hm_obj_recogn", "and", "gt_obj_recogn", ")", ":", "\n", "                                ", "fn", "+=", "1", "\n", "\n", "", "", "visualization", "(", "heatmap_img", ".", "cpu", "(", ")", ",", "gt_img", ".", "cpu", "(", ")", ",", "args", ".", "visualizations", ",", "img_name", ")", "\n", "\n", "\n", "", "", "", "kld", "=", "kl", "(", "heatmap", ",", "gaze_gt", ")", "\n", "c", "=", "cc", "(", "heatmap", ",", "gaze_gt", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "kld_losses", ".", "update", "(", "kld", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "cc_losses", ".", "update", "(", "c", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'KL {kl.val:.4f} ({kl.avg:.4f})\\t'", "\n", "'CC {cc.val:.4f} ({cc.avg:.4f})\\t'", "\n", ".", "format", "(", "\n", "i", ",", "len", "(", "test_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "kl", "=", "kld_losses", ",", "cc", "=", "cc_losses", ")", ")", "\n", "\n", "", "", "print", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'KL {kl.val:.4f} ({kl.avg:.4f})\\t'", "\n", "'CC {cc.val:.4f} ({cc.avg:.4f})\\t'", "\n", ".", "format", "(", "\n", "i", ",", "len", "(", "test_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "kl", "=", "kld_losses", ",", "cc", "=", "cc_losses", ")", ")", "\n", "\n", "precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "tn", "=", "all_count", "-", "tp", "-", "fp", "-", "fn", "\n", "acc", "=", "(", "tp", "+", "tn", ")", "/", "all_count", "\n", "f1", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "print", "(", "'Object-level results:'", ")", "\n", "print", "(", "'tp:'", ",", "tp", ",", "'fp:'", ",", "fp", ",", "'tn:'", ",", "tn", ",", "'fn:'", ",", "fn", ",", "'sum:'", ",", "all_count", ")", "\n", "print", "(", "'prec:'", ",", "precision", ",", "'recall:'", ",", "recall", ",", "'f1'", ",", "f1", ",", "'acc'", ",", "acc", ")", "\n", "print", "(", "'AUC:'", ",", "roc_auc_score", "(", "gt", ",", "hm_max_values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.bb_mapping": [[394, 414], ["int", "int", "int", "int", "math.floor", "math.floor", "math.floor", "math.floor"], "function", ["None"], ["", "", "def", "bb_mapping", "(", "x_center_rel", ",", "y_center_rel", ",", "width_rel", ",", "height_rel", ",", "img_width", "=", "64", ",", "img_height", "=", "36", ")", ":", "\n", "    ", "\"\"\"\n    Compute absolute bounding boxes values for given image size and given relative parameters\n\n    :param x_center_rel: relative x value of bb center\n    :param y_center_rel: relative y value of bb center\n    :param width_rel: relative width\n    :param height_rel: relative height\n    :return: absolute values of bb borders\n    \"\"\"", "\n", "width_abs", "=", "width_rel", "*", "img_width", "\n", "height_abs", "=", "height_rel", "*", "img_height", "\n", "x_center_abs", "=", "x_center_rel", "*", "img_width", "\n", "y_center_abs", "=", "y_center_rel", "*", "img_height", "\n", "x_min", "=", "int", "(", "math", ".", "floor", "(", "x_center_abs", "-", "0.5", "*", "width_abs", ")", ")", "\n", "x_max", "=", "int", "(", "math", ".", "floor", "(", "x_center_abs", "+", "0.5", "*", "width_abs", ")", ")", "\n", "y_min", "=", "int", "(", "math", ".", "floor", "(", "y_center_abs", "-", "0.5", "*", "height_abs", ")", ")", "\n", "y_max", "=", "int", "(", "math", ".", "floor", "(", "y_center_abs", "+", "0.5", "*", "height_abs", ")", ")", "\n", "bb", "=", "[", "x", "if", "x", ">=", "0", "else", "0", "for", "x", "in", "[", "x_min", ",", "x_max", ",", "y_min", ",", "y_max", "]", "]", "\n", "return", "bb", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.grid2heatmap": [[415, 437], ["torch.zeros", "enumerate", "torch.zeros.unsqueeze().cuda", "grid.size", "torch.nonzero", "torch.nonzero.nelement", "print", "torch.zeros.unsqueeze"], "function", ["None"], ["", "def", "grid2heatmap", "(", "grid", ",", "size", ",", "num_grid", ",", "args", ")", ":", "\n", "    ", "\"\"\"\n    Rearrange and expand gridvector of size (gridheight*gridwidth) to size (576 x 1024) by duplicating values\n\n    :param grid: output vector\n    :param size: (H,W) of one expanded grid cell\n    :param num_grids: (H,W) = grid dimension\n    :param args: parser arguments\n    :return: 2D grid of size (576 x 1024)\n    \"\"\"", "\n", "new_heatmap", "=", "torch", ".", "zeros", "(", "grid", ".", "size", "(", "0", ")", ",", "size", "[", "0", "]", "*", "num_grid", "[", "0", "]", ",", "size", "[", "1", "]", "*", "num_grid", "[", "1", "]", ")", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "grid", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "nonzero", "(", "item", ")", "\n", "if", "idx", ".", "nelement", "(", ")", "==", "0", ":", "\n", "            ", "print", "(", "'Empty'", ")", "\n", "continue", "\n", "", "for", "x", "in", "idx", ":", "\n", "            ", "test", "=", "new_heatmap", "[", "i", ",", "x", "//", "num_grid", "[", "1", "]", "*", "size", "[", "0", "]", ":", "(", "x", "//", "num_grid", "[", "1", "]", "+", "1", ")", "*", "size", "[", "0", "]", ",", "x", "%", "num_grid", "[", "1", "]", "*", "size", "[", "1", "]", ":", "(", "x", "%", "num_grid", "[", "1", "]", "+", "1", ")", "*", "size", "[", "1", "]", "]", "\n", "new_heatmap", "[", "i", ",", "x", "//", "num_grid", "[", "1", "]", "*", "size", "[", "0", "]", ":", "(", "x", "//", "num_grid", "[", "1", "]", "+", "1", ")", "*", "size", "[", "0", "]", ",", "x", "%", "num_grid", "[", "1", "]", "*", "size", "[", "1", "]", ":", "(", "x", "%", "num_grid", "[", "1", "]", "+", "1", ")", "*", "size", "[", "1", "]", "]", "=", "item", "[", "x", "]", "\n", "", "", "output", "=", "new_heatmap", ".", "unsqueeze", "(", "1", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.cc": [[438, 451], ["range", "s_map_all.size", "s_map_all[].squeeze", "gt_all[].squeeze", "s_map_norm.cpu", "gt_norm.cpu", "torch.sum", "torch.mean", "torch.std", "torch.mean", "torch.std", "torch.sqrt", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "cc", "(", "s_map_all", ",", "gt_all", ")", ":", "\n", "\t", "eps", "=", "1e-07", "\n", "bs", "=", "s_map_all", ".", "size", "(", ")", "[", "0", "]", "\n", "r", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "bs", ")", ":", "\n", "\t\t", "s_map", "=", "s_map_all", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "squeeze", "(", ")", "\n", "gt", "=", "gt_all", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "squeeze", "(", ")", "\n", "s_map_norm", "=", "(", "s_map", "-", "torch", ".", "mean", "(", "s_map", ")", ")", "/", "(", "eps", "+", "torch", ".", "std", "(", "s_map", ")", ")", "\n", "gt_norm", "=", "(", "gt", "-", "torch", ".", "mean", "(", "gt", ")", ")", "/", "(", "eps", "+", "torch", ".", "std", "(", "gt", ")", ")", "\n", "a", "=", "s_map_norm", ".", "cpu", "(", ")", "\n", "b", "=", "gt_norm", ".", "cpu", "(", ")", "\n", "r", "+=", "torch", ".", "sum", "(", "a", "*", "b", ")", "/", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "a", "*", "a", ")", "*", "torch", ".", "sum", "(", "b", "*", "b", ")", ")", "+", "eps", ")", "\n", "", "return", "r", "/", "bs", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.kl": [[452, 468], ["len", "torch.tensor", "s_map_all.size", "s_map_all.size", "range", "s_map_all[].squeeze", "gt_all[].squeeze", "gt.to.to", "s_map.to.to", "torch.sum", "torch.log", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "kl", "(", "s_map_all", ",", "gt_all", ")", ":", "\n", "\t", "dims", "=", "len", "(", "s_map_all", ".", "size", "(", ")", ")", "\n", "bs", "=", "s_map_all", ".", "size", "(", ")", "[", "0", "]", "\n", "eps", "=", "torch", ".", "tensor", "(", "1e-07", ")", "\n", "kl", "=", "0", "\n", "\n", "if", "dims", ">", "3", ":", "\n", "\t\t", "for", "i", "in", "range", "(", "0", ",", "bs", ")", ":", "\n", "\t\t\t", "s_map", "=", "s_map_all", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "squeeze", "(", ")", "\n", "gt", "=", "gt_all", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "squeeze", "(", ")", "\n", "s_map", "=", "s_map", "/", "(", "torch", ".", "sum", "(", "s_map", ")", "*", "1.0", "+", "eps", ")", "\n", "gt", "=", "gt", "/", "(", "torch", ".", "sum", "(", "gt", ")", "*", "1.0", "+", "eps", ")", "\n", "gt", "=", "gt", ".", "to", "(", "'cpu'", ")", "\n", "s_map", "=", "s_map", ".", "to", "(", "'cpu'", ")", "\n", "kl", "+=", "torch", ".", "sum", "(", "gt", "*", "torch", ".", "log", "(", "eps", "+", "gt", "/", "(", "s_map", "+", "eps", ")", ")", ")", "\n", "", "return", "kl", "/", "bs", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.normalizeData": [[470, 472], ["torch.min", "torch.max", "torch.min"], "function", ["None"], ["", "", "def", "normalizeData", "(", "data", ")", ":", "\n", "    ", "return", "(", "data", "-", "torch", ".", "min", "(", "data", ")", ")", "/", "(", "torch", ".", "max", "(", "data", ")", "-", "torch", ".", "min", "(", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.visualization": [[473, 479], ["torchvision.transforms.functional.to_pil_image", "torchvision.transforms.functional.to_pil_image", "torchvision.transforms.functional.to_pil_image.save", "torchvision.transforms.functional.to_pil_image.save", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "visualization", "(", "heatmap", ",", "gt", ",", "path", ",", "nr", ")", ":", "\n", "    ", "heatmap", "=", "torchvision", ".", "transforms", ".", "functional", ".", "to_pil_image", "(", "heatmap", ")", "\n", "gt", "=", "torchvision", ".", "transforms", ".", "functional", ".", "to_pil_image", "(", "gt", ")", "\n", "\n", "heatmap", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'%s_pred.png'", "%", "nr", ")", ")", "\n", "gt", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'%s_gt.png'", "%", "nr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.None.gaze_prediction_and_evaluation.kullback_leibler_divergence": [[498, 515], ["torch.sum", "torch.sum", "torch.sum", "torch.log"], "function", ["None"], ["", "", "def", "kullback_leibler_divergence", "(", "y_true", ",", "y_pred", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "\"\"\"\n    Kullback-Leiber divergence (sec 4.2.3 of [1]). Assumes shape (b, 1, h, w) for all tensors.\n\n    :param y_true: groundtruth.\n    :param y_pred: prediction.\n    :param eps: regularization epsilon.\n    :return: loss value (one symbolic value per batch element).\n    \"\"\"", "\n", "P", "=", "y_pred", "\n", "P", "=", "P", "/", "(", "eps", "+", "torch", ".", "sum", "(", "P", ",", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", ")", "\n", "Q", "=", "y_true", "\n", "Q", "=", "Q", "/", "(", "eps", "+", "torch", ".", "sum", "(", "Q", ",", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", ")", "\n", "\n", "kld", "=", "torch", ".", "sum", "(", "Q", "*", "torch", ".", "log", "(", "eps", "+", "Q", "/", "(", "eps", "+", "P", ")", ")", ",", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "\n", "return", "kld", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.compute_BDDA_baseline.main": [[21, 49], ["torchvision.transforms.Compose", "parser.parse_args", "os.walk", "os.walk", "compute_BDDA_baseline.normalizeData", "open", "open.close", "numpy.savetxt", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "PIL.Image.open().convert().crop", "numpy.array", "compute_BDDA_baseline.normalizeData", "numpy.isnan", "torchvision.transforms.Compose.", "numpy.sum", "print", "PIL.Image.open().convert", "PIL.Image.open", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.normalizeData", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.normalizeData"], ["def", "main", "(", ")", ":", "\n", "\t", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "\n", "[", "torchvision", ".", "transforms", ".", "Resize", "(", "[", "36", ",", "64", "]", ")", ",", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "count", "=", "0", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "args", ".", "gazemaps", ")", ":", "\n", "\t\t", "for", "item", "in", "files", ":", "\n", "\t\t\t", "gt", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "gazemaps", ",", "item", ")", ")", ".", "convert", "(", "'L'", ")", ".", "crop", "(", "(", "0", ",", "96", ",", "1024", ",", "672", ")", ")", "#left,top,right,bottom", "\n", "gt", "=", "np", ".", "array", "(", "transform", "(", "gt", ")", ")", "\n", "gt", "=", "normalizeData", "(", "gt", ")", "\n", "if", "np", ".", "isnan", "(", "np", ".", "sum", "(", "gt", ")", ")", ":", "\n", "\t\t\t    ", "continue", "\n", "", "if", "count", "==", "0", ":", "\n", "\t\t\t    ", "sum", "=", "gt", "\n", "", "else", ":", "\n", "\t\t\t    ", "sum", "+=", "gt", "\n", "", "count", "+=", "1", "\n", "if", "count", "%", "500", "==", "0", ":", "\n", "\t\t\t\t", "print", "(", "\"Count: %d\"", "%", "count", ")", "\n", "", "", "", "sum", "=", "normalizeData", "(", "sum", ")", "\n", "\n", "a_file", "=", "open", "(", "\"avgBaseline.txt\"", ",", "\"w\"", ")", "\n", "for", "row", "in", "sum", ":", "\n", "\t\t", "np", ".", "savetxt", "(", "a_file", ",", "row", ")", "\n", "\n", "", "a_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.compute_BDDA_baseline.normalizeData": [[51, 54], ["numpy.min", "numpy.max", "numpy.min"], "function", ["None"], ["", "def", "normalizeData", "(", "s_map", ")", ":", "\n", "\t", "norm_s_map", "=", "(", "s_map", "-", "np", ".", "min", "(", "s_map", ")", ")", "/", "(", "(", "np", ".", "max", "(", "s_map", ")", "-", "np", ".", "min", "(", "s_map", ")", ")", "*", "1.0", ")", "\n", "return", "norm_s_map", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.bdda_otherModels.VideoRecord.__init__": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "row", ")", ":", "\n", "        ", "self", ".", "_data", "=", "row", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.bdda_otherModels.VideoRecord.img_id": [[16, 19], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "img_id", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "_data", "[", "0", "]", ")", "# image index starts with 1", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.bdda_otherModels.VideoRecord.grids": [[20, 26], ["grid.append", "float"], "methods", ["None"], ["", "@", "property", "\n", "def", "grids", "(", "self", ")", ":", "\n", "        ", "grid", "=", "[", "]", "\n", "for", "item", "in", "self", ".", "_data", "[", "1", ":", "]", ":", "\n", "            ", "grid", ".", "append", "(", "float", "(", "item", ")", ")", "\n", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.bdda_otherModels.BDDA.__init__": [[32, 46], ["torch.zeros", "torch.ones", "bdda_otherModels.BDDA._parse_list", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.bdda_otherModels.BDDA._parse_list"], ["def", "__init__", "(", "self", ",", "file", ",", "threshold", ",", "gazemap_path", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n\n        \"\"\"", "\n", "self", ".", "file", "=", "file", "\n", "self", ".", "gazemap_path", "=", "gazemap_path", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "mean", "=", "torch", ".", "zeros", "(", "1024", ")", "\n", "self", ".", "std", "=", "torch", ".", "ones", "(", "1024", ")", "\n", "self", ".", "_parse_list", "(", ")", "\n", "self", ".", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "\n", "[", "torchvision", ".", "transforms", ".", "Resize", "(", "[", "36", ",", "64", "]", ")", ",", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.bdda_otherModels.BDDA._parse_list": [[49, 56], ["x.strip().split", "bdda_otherModels.VideoRecord", "open", "x.strip"], "methods", ["None"], ["", "def", "_parse_list", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "img_list", "=", "[", "]", "\n", "\n", "tmp", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "for", "x", "in", "open", "(", "self", ".", "file", ")", "]", "\n", "img_list", "=", "[", "VideoRecord", "(", "item", ")", "for", "item", "in", "tmp", "]", "\n", "self", ".", "img_list", "=", "img_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.bdda_otherModels.BDDA._normalizeData": [[57, 59], ["torch.min", "torch.max", "torch.min"], "methods", ["None"], ["", "def", "_normalizeData", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "(", "data", "-", "torch", ".", "min", "(", "data", ")", ")", "/", "(", "torch", ".", "max", "(", "data", ")", "-", "torch", ".", "min", "(", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.bdda_otherModels.BDDA.__len__": [[60, 62], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.bdda_otherModels.BDDA.__getitem__": [[63, 75], ["record.img_id.split", "PIL.Image.open().convert().crop", "bdda_otherModels.BDDA.transform", "bdda_otherModels.BDDA._normalizeData", "record.img_id.split", "PIL.Image.open().convert", "PIL.Image.open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.bdda_otherModels.BDDA._normalizeData"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "record", "=", "self", ".", "img_list", "[", "index", "]", "\n", "img_name", "=", "record", ".", "img_id", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "name", "=", "record", ".", "img_id", ".", "split", "(", "'_'", ")", "\n", "gaze_file", "=", "name", "[", "0", "]", "+", "'_pure_hm_'", "+", "name", "[", "1", "]", "\n", "gaze_gt", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "gazemap_path", ",", "gaze_file", ")", ")", ".", "convert", "(", "'L'", ")", ".", "crop", "(", "(", "0", ",", "96", ",", "1024", ",", "672", ")", ")", "#left,top,right,bottom", "\n", "gaze_gt", "=", "self", ".", "transform", "(", "gaze_gt", ")", "\n", "gaze_gt", "=", "self", ".", "_normalizeData", "(", "gaze_gt", ")", "\n", "\n", "return", "gaze_gt", ",", "img_name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_otherModel.AverageMeter.__init__": [[262, 264], ["evaluation_otherModel.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_otherModel.AverageMeter.reset": [[265, 270], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_otherModel.AverageMeter.update": [[271, 276], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_otherModel.main": [[44, 61], ["parser.parse_args", "os.path.join", "bdda_otherModels.BDDA", "torch.utils.data.DataLoader", "evaluation_otherModel.test", "print"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.test"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "dim", "=", "256", "\n", "th", "=", "1", "/", "dim", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "testdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'test'", ")", "\n", "test_dataset", "=", "BDDA", "(", "\"test\"", ",", "testdir", ",", "th", ",", "args", ".", "gazemaps", ",", "(", "args", ".", "lstm", "or", "args", ".", "convlstm", ")", ",", "args", ".", "sequence", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "test", "(", "test_loader", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_otherModel.test": [[62, 194], ["evaluation_otherModel.AverageMeter", "evaluation_otherModel.AverageMeter", "evaluation_otherModel.AverageMeter", "evaluation_otherModel.AverageMeter", "torchvision.transforms.Compose", "torch.no_grad", "time.time", "enumerate", "print", "print", "print", "print", "print", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "range", "evaluation_otherModel.kl", "evaluation_otherModel.cc", "evaluation_otherModel.AverageMeter.update", "evaluation_otherModel.AverageMeter.update", "evaluation_otherModel.AverageMeter.update", "time.time", "sklearn.metrics.roc_auc_score", "gaze_gt.cuda.cuda", "PIL.Image.open", "torchvision.transforms.Compose.", "evaluation_otherModel.normalizeData", "normalizeData.size", "os.path.join", "os.path.exists", "input.size", "input.size", "print", "len", "os.path.join", "torch.cat", "time.time", "open", "evaluation_otherModel.visualization", "len", "linestring.split", "float", "float", "float", "float", "evaluation_otherModel.bb_mapping", "torch.max", "torch.max", "print", "hm_max_values.append", "heatmap_img.cpu", "gt_img.cpu", "gt.append", "gt.append"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.kl", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.cc", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.update", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.update", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.update", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.normalizeData", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.visualization", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.bb_mapping"], ["", "def", "test", "(", "test_loader", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "kld_losses", "=", "AverageMeter", "(", ")", "\n", "cc_losses", "=", "AverageMeter", "(", ")", "\n", "\n", "tp", "=", "0", "\n", "fp", "=", "0", "\n", "fn", "=", "0", "\n", "all_count", "=", "0", "\n", "\n", "hm_max_values", "=", "[", "]", "\n", "gt", "=", "[", "]", "\n", "\n", "i", "=", "0", "\n", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "\n", "[", "torchvision", ".", "transforms", ".", "Resize", "(", "[", "36", ",", "64", "]", ")", ",", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "gaze_gt", ",", "img_names", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "gaze_gt", "=", "gaze_gt", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "", "first", "=", "True", "\n", "\n", "for", "img", "in", "img_names", ":", "\n", "\n", "                ", "heatfile", "=", "img", "+", "'.jpg'", "\n", "\n", "heatmap", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "predictions", ",", "heatfile", ")", ")", "#.convert('L')#.crop((0,96,1024,672)) #left,top,right,bottom", "\n", "heatmap", "=", "transform", "(", "heatmap", ")", "\n", "heatmap", "=", "normalizeData", "(", "heatmap", ")", "\n", "\n", "if", "first", ":", "\n", "                    ", "heatmap_batch", "=", "heatmap", "[", "None", "]", "\n", "first", "=", "False", "\n", "", "else", ":", "\n", "                    ", "heatmap_batch", "=", "torch", ".", "cat", "(", "(", "heatmap_batch", ",", "heatmap", "[", "None", "]", ")", ",", "0", ")", "\n", "\n", "", "", "heatmap", "=", "heatmap_batch", "\n", "\n", "for", "j", "in", "range", "(", "heatmap", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "img_name", "=", "img_names", "[", "j", "]", "\n", "heatmap_img", "=", "heatmap", "[", "j", "]", "# predicted gaze map", "\n", "gt_img", "=", "gaze_gt", "[", "j", "]", "# original gaze map", "\n", "\n", "##### compute object-level metrics", "\n", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "yolo5bb", ",", "img_name", "+", "\".txt\"", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "                    ", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "\n", "                        ", "for", "linestring", "in", "f", ":", "\n", "                            ", "all_count", "+=", "1", "\n", "\n", "line", "=", "linestring", ".", "split", "(", ")", "\n", "\n", "width", "=", "float", "(", "line", "[", "3", "]", ")", "\n", "height", "=", "float", "(", "line", "[", "4", "]", ")", "\n", "x_center", "=", "float", "(", "line", "[", "1", "]", ")", "\n", "y_center", "=", "float", "(", "line", "[", "2", "]", ")", "\n", "\n", "x_min", ",", "x_max", ",", "y_min", ",", "y_max", "=", "bb_mapping", "(", "x_center", ",", "y_center", ",", "width", ",", "height", ")", "\n", "\n", "# find maximum pixel value within object bounding box", "\n", "gt_obj", "=", "gt_img", "[", "0", ",", "y_min", ":", "y_max", "+", "1", ",", "x_min", ":", "x_max", "+", "1", "]", "\n", "gt_obj_max", "=", "torch", ".", "max", "(", "gt_obj", ")", "\n", "heatmap_obj", "=", "heatmap_img", "[", "0", ",", "y_min", ":", "y_max", "+", "1", ",", "x_min", ":", "x_max", "+", "1", "]", "\n", "heatmap_obj_max", "=", "torch", ".", "max", "(", "heatmap_obj", ")", "\n", "print", "(", "heatmap_obj_max", ")", "\n", "\n", "# object is recognized if maximum pixel value is higher than th", "\n", "gt_obj_recogn", "=", "gt_obj_max", ">", "0.15", "\n", "hm_obj_recogn", "=", "heatmap_obj_max", ">", "args", ".", "threshhold", "\n", "\n", "hm_max_values", ".", "append", "(", "heatmap_obj_max", ")", "\n", "\n", "if", "gt_obj_recogn", ":", "\n", "                                ", "gt", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                                ", "gt", ".", "append", "(", "0", ")", "\n", "\n", "", "if", "(", "hm_obj_recogn", "and", "gt_obj_recogn", ")", ":", "\n", "                                ", "tp", "+=", "1", "\n", "", "elif", "(", "hm_obj_recogn", "and", "not", "gt_obj_recogn", ")", ":", "\n", "                                ", "fp", "+=", "1", "\n", "", "elif", "(", "not", "hm_obj_recogn", "and", "gt_obj_recogn", ")", ":", "\n", "                                ", "fn", "+=", "1", "\n", "\n", "", "", "visualization", "(", "heatmap_img", ".", "cpu", "(", ")", ",", "gt_img", ".", "cpu", "(", ")", ",", "args", ".", "visualizations", ",", "img_name", ")", "\n", "\n", "\n", "", "", "", "kld", "=", "kl", "(", "heatmap", ",", "gaze_gt", ")", "\n", "c", "=", "cc", "(", "heatmap", ",", "gaze_gt", ")", "\n", "\n", "kld_losses", ".", "update", "(", "kld", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "cc_losses", ".", "update", "(", "c", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'KL {kl.val:.4f} ({kl.avg:.4f})\\t'", "\n", "'CC {cc.val:.4f} ({cc.avg:.4f})\\t'", "\n", ".", "format", "(", "\n", "i", ",", "len", "(", "test_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "kl", "=", "kld_losses", ",", "cc", "=", "cc_losses", ")", ")", "\n", "\n", "", "", "print", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'KL {kl.val:.4f} ({kl.avg:.4f})\\t'", "\n", "'CC {cc.val:.4f} ({cc.avg:.4f})\\t'", "\n", ".", "format", "(", "\n", "i", ",", "len", "(", "test_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "kl", "=", "kld_losses", ",", "cc", "=", "cc_losses", ")", ")", "\n", "\n", "precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "tn", "=", "all_count", "-", "tp", "-", "fp", "-", "fn", "\n", "acc", "=", "(", "tp", "+", "tn", ")", "/", "all_count", "\n", "f1", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "print", "(", "'Object-level results:'", ")", "\n", "print", "(", "'tp:'", ",", "tp", ",", "'fp:'", ",", "fp", ",", "'tn:'", ",", "tn", ",", "'fn:'", ",", "fn", ",", "'sum:'", ",", "all_count", ")", "\n", "print", "(", "'prec:'", ",", "precision", ",", "'recall:'", ",", "recall", ",", "'f1'", ",", "f1", ",", "'acc'", ",", "acc", ")", "\n", "print", "(", "'AUC:'", ",", "roc_auc_score", "(", "gt", ",", "hm_max_values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_otherModel.bb_mapping": [[195, 215], ["int", "int", "int", "int", "math.floor", "math.floor", "math.floor", "math.floor"], "function", ["None"], ["", "", "def", "bb_mapping", "(", "x_center_rel", ",", "y_center_rel", ",", "width_rel", ",", "height_rel", ",", "img_width", "=", "64", ",", "img_height", "=", "36", ")", ":", "\n", "    ", "\"\"\"\n    Compute absolute bounding boxes values for given image size and given relative parameters\n\n    :param x_center_rel: relative x value of bb center\n    :param y_center_rel: relative y value of bb center\n    :param width_rel: relative width\n    :param height_rel: relative height\n    :return: absolute values of bb borders\n    \"\"\"", "\n", "width_abs", "=", "width_rel", "*", "img_width", "\n", "height_abs", "=", "height_rel", "*", "img_height", "\n", "x_center_abs", "=", "x_center_rel", "*", "img_width", "\n", "y_center_abs", "=", "y_center_rel", "*", "img_height", "\n", "x_min", "=", "int", "(", "math", ".", "floor", "(", "x_center_abs", "-", "0.5", "*", "width_abs", ")", ")", "\n", "x_max", "=", "int", "(", "math", ".", "floor", "(", "x_center_abs", "+", "0.5", "*", "width_abs", ")", ")", "\n", "y_min", "=", "int", "(", "math", ".", "floor", "(", "y_center_abs", "-", "0.5", "*", "height_abs", ")", ")", "\n", "y_max", "=", "int", "(", "math", ".", "floor", "(", "y_center_abs", "+", "0.5", "*", "height_abs", ")", ")", "\n", "bb", "=", "[", "x", "if", "x", ">=", "0", "else", "0", "for", "x", "in", "[", "x_min", ",", "x_max", ",", "y_min", ",", "y_max", "]", "]", "\n", "return", "bb", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_otherModel.cc": [[217, 230], ["range", "s_map_all.size", "s_map_all[].squeeze", "gt_all[].squeeze", "s_map_norm.cpu", "gt_norm.cpu", "torch.sum", "torch.mean", "torch.std", "torch.mean", "torch.std", "torch.sqrt", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "cc", "(", "s_map_all", ",", "gt_all", ")", ":", "\n", "\t", "eps", "=", "1e-07", "\n", "bs", "=", "s_map_all", ".", "size", "(", ")", "[", "0", "]", "\n", "r", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "bs", ")", ":", "\n", "\t\t", "s_map", "=", "s_map_all", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "squeeze", "(", ")", "\n", "gt", "=", "gt_all", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "squeeze", "(", ")", "\n", "s_map_norm", "=", "(", "s_map", "-", "torch", ".", "mean", "(", "s_map", ")", ")", "/", "(", "eps", "+", "torch", ".", "std", "(", "s_map", ")", ")", "\n", "gt_norm", "=", "(", "gt", "-", "torch", ".", "mean", "(", "gt", ")", ")", "/", "(", "eps", "+", "torch", ".", "std", "(", "gt", ")", ")", "\n", "a", "=", "s_map_norm", ".", "cpu", "(", ")", "\n", "b", "=", "gt_norm", ".", "cpu", "(", ")", "\n", "r", "+=", "torch", ".", "sum", "(", "a", "*", "b", ")", "/", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "a", "*", "a", ")", "*", "torch", ".", "sum", "(", "b", "*", "b", ")", ")", "+", "eps", ")", "\n", "", "return", "r", "/", "bs", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_otherModel.kl": [[231, 247], ["len", "torch.tensor", "s_map_all.size", "s_map_all.size", "range", "s_map_all[].squeeze", "gt_all[].squeeze", "gt.to.to", "s_map.to.to", "torch.sum", "torch.log", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "kl", "(", "s_map_all", ",", "gt_all", ")", ":", "\n", "\t", "dims", "=", "len", "(", "s_map_all", ".", "size", "(", ")", ")", "\n", "bs", "=", "s_map_all", ".", "size", "(", ")", "[", "0", "]", "\n", "eps", "=", "torch", ".", "tensor", "(", "1e-07", ")", "\n", "kl", "=", "0", "\n", "\n", "if", "dims", ">", "3", ":", "\n", "\t\t", "for", "i", "in", "range", "(", "0", ",", "bs", ")", ":", "\n", "\t\t\t", "s_map", "=", "s_map_all", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "squeeze", "(", ")", "\n", "gt", "=", "gt_all", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "squeeze", "(", ")", "\n", "s_map", "=", "s_map", "/", "(", "torch", ".", "sum", "(", "s_map", ")", "*", "1.0", "+", "eps", ")", "\n", "gt", "=", "gt", "/", "(", "torch", ".", "sum", "(", "gt", ")", "*", "1.0", "+", "eps", ")", "\n", "gt", "=", "gt", ".", "to", "(", "'cpu'", ")", "\n", "s_map", "=", "s_map", ".", "to", "(", "'cpu'", ")", "\n", "kl", "+=", "torch", ".", "sum", "(", "gt", "*", "torch", ".", "log", "(", "eps", "+", "gt", "/", "(", "s_map", "+", "eps", ")", ")", ")", "\n", "", "return", "kl", "/", "bs", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_otherModel.normalizeData": [[249, 251], ["torch.min", "torch.max", "torch.min"], "function", ["None"], ["", "", "def", "normalizeData", "(", "data", ")", ":", "\n", "    ", "return", "(", "data", "-", "torch", ".", "min", "(", "data", ")", ")", "/", "(", "torch", ".", "max", "(", "data", ")", "-", "torch", ".", "min", "(", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_otherModel.visualization": [[252, 258], ["torchvision.transforms.functional.to_pil_image", "torchvision.transforms.functional.to_pil_image", "torchvision.transforms.functional.to_pil_image.save", "torchvision.transforms.functional.to_pil_image.save", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "visualization", "(", "heatmap", ",", "gt", ",", "path", ",", "nr", ")", ":", "\n", "    ", "heatmap", "=", "torchvision", ".", "transforms", ".", "functional", ".", "to_pil_image", "(", "heatmap", ")", "\n", "gt", "=", "torchvision", ".", "transforms", ".", "functional", ".", "to_pil_image", "(", "gt", ")", "\n", "\n", "heatmap", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'%s_pred.png'", "%", "nr", ")", ")", "\n", "gt", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'%s_gt.png'", "%", "nr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.get_model_complexity_info": [[23, 55], ["flops_counter.add_flops_counting_methods", "add_flops_counting_methods.eval", "add_flops_counting_methods.start_flops_count", "add_flops_counting_methods.compute_average_flops_cost", "flops_counter.get_model_parameters_number", "add_flops_counting_methods.stop_flops_count", "type", "len", "input_constructor", "add_flops_counting_methods.", "add_flops_counting_methods.", "flops_counter.print_model_with_flops", "torch.ones().new_empty", "torch.ones().new_empty", "flops_counter.flops_to_string", "flops_counter.params_to_string", "torch.ones().new_empty", "torch.ones().new_empty", "torch.ones", "torch.ones", "next", "next", "torch.ones", "torch.ones", "add_flops_counting_methods.parameters", "add_flops_counting_methods.parameters"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.add_flops_counting_methods", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.start_flops_count", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.compute_average_flops_cost", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.get_model_parameters_number", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.stop_flops_count", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.print_model_with_flops", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.flops_to_string", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.params_to_string"], ["def", "get_model_complexity_info", "(", "model", ",", "input_res", ",", "\n", "print_per_layer_stat", "=", "True", ",", "\n", "as_strings", "=", "True", ",", "\n", "input_constructor", "=", "None", ",", "ost", "=", "sys", ".", "stdout", ")", ":", "\n", "    ", "assert", "type", "(", "input_res", ")", "is", "tuple", "\n", "assert", "len", "(", "input_res", ")", ">=", "2", "\n", "flops_model", "=", "add_flops_counting_methods", "(", "model", ")", "\n", "flops_model", ".", "eval", "(", ")", "\n", "flops_model", ".", "start_flops_count", "(", ")", "\n", "if", "input_constructor", ":", "\n", "        ", "input", "=", "input_constructor", "(", "input_res", ")", "\n", "_", "=", "flops_model", "(", "**", "input", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "batch", "=", "torch", ".", "ones", "(", "(", ")", ")", ".", "new_empty", "(", "(", "1", ",", "*", "input_res", ")", ",", "\n", "dtype", "=", "next", "(", "flops_model", ".", "parameters", "(", ")", ")", ".", "dtype", ",", "\n", "device", "=", "next", "(", "flops_model", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "batch", "=", "torch", ".", "ones", "(", "(", ")", ")", ".", "new_empty", "(", "(", "1", ",", "*", "input_res", ")", ")", "\n", "\n", "", "_", "=", "flops_model", "(", "batch", ")", "\n", "\n", "", "flops_count", "=", "flops_model", ".", "compute_average_flops_cost", "(", ")", "\n", "params_count", "=", "get_model_parameters_number", "(", "flops_model", ")", "\n", "if", "print_per_layer_stat", ":", "\n", "        ", "print_model_with_flops", "(", "flops_model", ",", "flops_count", ",", "params_count", ",", "ost", "=", "ost", ")", "\n", "", "flops_model", ".", "stop_flops_count", "(", ")", "\n", "\n", "if", "as_strings", ":", "\n", "        ", "return", "flops_to_string", "(", "flops_count", ")", ",", "params_to_string", "(", "params_count", ")", "\n", "\n", "", "return", "flops_count", ",", "params_count", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.flops_to_string": [[57, 76], ["str", "round", "str", "str", "round", "str", "str", "round", "str", "str", "round", "round", "str", "round"], "function", ["None"], ["", "def", "flops_to_string", "(", "flops", ",", "units", "=", "'GMac'", ",", "precision", "=", "2", ")", ":", "\n", "    ", "if", "units", "is", "None", ":", "\n", "        ", "if", "flops", "//", "10", "**", "9", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "9", ",", "precision", ")", ")", "+", "' GMac'", "\n", "", "elif", "flops", "//", "10", "**", "6", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "6", ",", "precision", ")", ")", "+", "' MMac'", "\n", "", "elif", "flops", "//", "10", "**", "3", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "3", ",", "precision", ")", ")", "+", "' KMac'", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "flops", ")", "+", "' Mac'", "\n", "", "", "else", ":", "\n", "        ", "if", "units", "==", "'GMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "9", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "elif", "units", "==", "'MMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "6", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "elif", "units", "==", "'KMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "3", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "flops", ")", "+", "' Mac'", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.params_to_string": [[78, 93], ["str", "str", "str", "round", "str", "str", "round", "round", "str", "round"], "function", ["None"], ["", "", "", "def", "params_to_string", "(", "params_num", ",", "units", "=", "None", ",", "precision", "=", "2", ")", ":", "\n", "    ", "if", "units", "is", "None", ":", "\n", "        ", "if", "params_num", "//", "10", "**", "6", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "params_num", "/", "10", "**", "6", ",", "2", ")", ")", "+", "' M'", "\n", "", "elif", "params_num", "//", "10", "**", "3", ":", "\n", "            ", "return", "str", "(", "round", "(", "params_num", "/", "10", "**", "3", ",", "2", ")", ")", "+", "' k'", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "params_num", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "units", "==", "'M'", ":", "\n", "            ", "return", "str", "(", "round", "(", "params_num", "/", "10.", "**", "6", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "elif", "units", "==", "'K'", ":", "\n", "            ", "return", "str", "(", "round", "(", "params_num", "/", "10.", "**", "3", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "params_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.print_model_with_flops": [[95, 145], ["model.apply", "print", "model.apply", "flops_counter.get_model_parameters_number", "flops_counter.is_supported_instance", "flops_counter..accumulate_params", "flops_counter..accumulate_flops", "accumulate_flops.__get__", "accumulate_params.__get__", "flops_repr.__get__", "hasattr", "hasattr", "flops_counter..children", "m.accumulate_flops", "flops_counter.params_to_string", "flops_counter.flops_to_string", "flops_counter..original_extra_repr", "flops_counter.params_to_string", "flops_counter.flops_to_string", "flops_counter..original_extra_repr"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.get_model_parameters_number", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.is_supported_instance", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.params_to_string", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.flops_to_string", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.params_to_string", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.flops_to_string"], ["", "", "", "def", "print_model_with_flops", "(", "model", ",", "total_flops", ",", "total_params", ",", "units", "=", "'GMac'", ",", "\n", "precision", "=", "3", ",", "ost", "=", "sys", ".", "stdout", ")", ":", "\n", "\n", "    ", "def", "accumulate_params", "(", "self", ")", ":", "\n", "        ", "return", "get_model_parameters_number", "(", "self", ")", "\n", "\n", "", "def", "accumulate_flops", "(", "self", ")", ":", "\n", "        ", "if", "is_supported_instance", "(", "self", ")", ":", "\n", "            ", "return", "self", ".", "__flops__", "/", "model", ".", "__batch_counter__", "\n", "", "else", ":", "\n", "            ", "sum", "=", "0", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "                ", "sum", "+=", "m", ".", "accumulate_flops", "(", ")", "\n", "", "return", "sum", "\n", "\n", "", "", "def", "flops_repr", "(", "self", ")", ":", "\n", "        ", "accumulated_params_num", "=", "self", ".", "accumulate_params", "(", ")", "\n", "accumulated_flops_cost", "=", "self", ".", "accumulate_flops", "(", ")", "\n", "if", "total_params", "==", "0", ":", "\n", "            ", "return", "', '", ".", "join", "(", "[", "params_to_string", "(", "accumulated_params_num", ",", "units", "=", "'M'", ",", "precision", "=", "precision", ")", ",", "\n", "'{:.3%} Params'", ".", "format", "(", "0", ")", ",", "\n", "flops_to_string", "(", "accumulated_flops_cost", ",", "units", "=", "units", ",", "precision", "=", "precision", ")", ",", "\n", "'{:.3%} MACs'", ".", "format", "(", "accumulated_flops_cost", "/", "total_flops", ")", ",", "\n", "self", ".", "original_extra_repr", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "', '", ".", "join", "(", "[", "params_to_string", "(", "accumulated_params_num", ",", "units", "=", "'M'", ",", "precision", "=", "precision", ")", ",", "\n", "'{:.3%} Params'", ".", "format", "(", "accumulated_params_num", "/", "total_params", ")", ",", "\n", "flops_to_string", "(", "accumulated_flops_cost", ",", "units", "=", "units", ",", "precision", "=", "precision", ")", ",", "\n", "'{:.3%} MACs'", ".", "format", "(", "accumulated_flops_cost", "/", "total_flops", ")", ",", "\n", "self", ".", "original_extra_repr", "(", ")", "]", ")", "\n", "\n", "", "", "def", "add_extra_repr", "(", "m", ")", ":", "\n", "        ", "m", ".", "accumulate_flops", "=", "accumulate_flops", ".", "__get__", "(", "m", ")", "\n", "m", ".", "accumulate_params", "=", "accumulate_params", ".", "__get__", "(", "m", ")", "\n", "flops_extra_repr", "=", "flops_repr", ".", "__get__", "(", "m", ")", "\n", "if", "m", ".", "extra_repr", "!=", "flops_extra_repr", ":", "\n", "            ", "m", ".", "original_extra_repr", "=", "m", ".", "extra_repr", "\n", "m", ".", "extra_repr", "=", "flops_extra_repr", "\n", "assert", "m", ".", "extra_repr", "!=", "m", ".", "original_extra_repr", "\n", "\n", "", "", "def", "del_extra_repr", "(", "m", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "'original_extra_repr'", ")", ":", "\n", "            ", "m", ".", "extra_repr", "=", "m", ".", "original_extra_repr", "\n", "del", "m", ".", "original_extra_repr", "\n", "", "if", "hasattr", "(", "m", ",", "'accumulate_flops'", ")", ":", "\n", "            ", "del", "m", ".", "accumulate_flops", "\n", "\n", "", "", "model", ".", "apply", "(", "add_extra_repr", ")", "\n", "print", "(", "model", ",", "file", "=", "ost", ")", "\n", "model", ".", "apply", "(", "del_extra_repr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.get_model_parameters_number": [[147, 150], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "get_model_parameters_number", "(", "model", ")", ":", "\n", "    ", "params_num", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", "# if p.requires_grad)", "\n", "return", "params_num", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.add_flops_counting_methods": [[152, 166], ["start_flops_count.__get__", "stop_flops_count.__get__", "reset_flops_count.__get__", "compute_average_flops_cost.__get__", "net_main_module.reset_flops_count", "net_main_module.apply"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.reset_flops_count"], ["", "def", "add_flops_counting_methods", "(", "net_main_module", ")", ":", "\n", "# adding additional methods to the existing module object,", "\n", "# this is done this way so that each function has access to self object", "\n", "    ", "net_main_module", ".", "start_flops_count", "=", "start_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "stop_flops_count", "=", "stop_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "reset_flops_count", "=", "reset_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "compute_average_flops_cost", "=", "compute_average_flops_cost", ".", "__get__", "(", "net_main_module", ")", "\n", "\n", "net_main_module", ".", "reset_flops_count", "(", ")", "\n", "\n", "# Adding variables necessary for masked flops computation", "\n", "net_main_module", ".", "apply", "(", "add_flops_mask_variable_or_reset", ")", "\n", "\n", "return", "net_main_module", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.compute_average_flops_cost": [[168, 182], ["flops_counter..modules", "flops_counter.is_supported_instance"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.is_supported_instance"], ["", "def", "compute_average_flops_cost", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n    Returns current mean flops consumption per image.\n    \"\"\"", "\n", "\n", "batches_count", "=", "self", ".", "__batch_counter__", "\n", "flops_sum", "=", "0", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "            ", "flops_sum", "+=", "module", ".", "__flops__", "\n", "\n", "", "", "return", "flops_sum", "/", "batches_count", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.start_flops_count": [[184, 193], ["flops_counter.add_batch_counter_hook_function", "flops_counter..apply"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.add_batch_counter_hook_function"], ["", "def", "start_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n    Activates the computation of mean flops consumption per image.\n    Call it before you run the network.\n    \"\"\"", "\n", "add_batch_counter_hook_function", "(", "self", ")", "\n", "self", ".", "apply", "(", "add_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.stop_flops_count": [[195, 204], ["flops_counter.remove_batch_counter_hook_function", "flops_counter..apply"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.remove_batch_counter_hook_function"], ["", "def", "stop_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n    Stops computing the mean flops consumption per image.\n    Call whenever you want to pause the computation.\n    \"\"\"", "\n", "remove_batch_counter_hook_function", "(", "self", ")", "\n", "self", ".", "apply", "(", "remove_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.reset_flops_count": [[206, 214], ["flops_counter.add_batch_counter_variables_or_reset", "flops_counter..apply"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.add_batch_counter_variables_or_reset"], ["", "def", "reset_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n    Resets statistics computed so far.\n    \"\"\"", "\n", "add_batch_counter_variables_or_reset", "(", "self", ")", "\n", "self", ".", "apply", "(", "add_flops_counter_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.add_flops_mask": [[216, 221], ["module.apply", "isinstance"], "function", ["None"], ["", "def", "add_flops_mask", "(", "module", ",", "mask", ")", ":", "\n", "    ", "def", "add_flops_mask_func", "(", "module", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "module", ".", "__mask__", "=", "mask", "\n", "", "", "module", ".", "apply", "(", "add_flops_mask_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.remove_flops_mask": [[223, 225], ["module.apply"], "function", ["None"], ["", "def", "remove_flops_mask", "(", "module", ")", ":", "\n", "    ", "module", ".", "apply", "(", "add_flops_mask_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.empty_flops_counter_hook": [[228, 230], ["None"], "function", ["None"], ["", "def", "empty_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "module", ".", "__flops__", "+=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.upsample_flops_counter_hook": [[232, 239], ["int"], "function", ["None"], ["", "def", "upsample_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "output_size", "=", "output", "[", "0", "]", "\n", "batch_size", "=", "output_size", ".", "shape", "[", "0", "]", "\n", "output_elements_count", "=", "batch_size", "\n", "for", "val", "in", "output_size", ".", "shape", "[", "1", ":", "]", ":", "\n", "        ", "output_elements_count", "*=", "val", "\n", "", "module", ".", "__flops__", "+=", "int", "(", "output_elements_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.relu_flops_counter_hook": [[241, 244], ["output.numel", "int"], "function", ["None"], ["", "def", "relu_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "active_elements_count", "=", "output", ".", "numel", "(", ")", "\n", "module", ".", "__flops__", "+=", "int", "(", "active_elements_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.linear_flops_counter_hook": [[246, 250], ["int", "numpy.prod"], "function", ["None"], ["", "def", "linear_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "output_last_dim", "=", "output", ".", "shape", "[", "-", "1", "]", "# pytorch checks dimensions, so here we don't care much", "\n", "module", ".", "__flops__", "+=", "int", "(", "np", ".", "prod", "(", "input", ".", "shape", ")", "*", "output_last_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.pool_flops_counter_hook": [[252, 255], ["int", "numpy.prod"], "function", ["None"], ["", "def", "pool_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "module", ".", "__flops__", "+=", "int", "(", "np", ".", "prod", "(", "input", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.bn_flops_counter_hook": [[257, 265], ["numpy.prod", "int"], "function", ["None"], ["", "def", "bn_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "module", ".", "affine", "\n", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_flops", "=", "np", ".", "prod", "(", "input", ".", "shape", ")", "\n", "if", "module", ".", "affine", ":", "\n", "        ", "batch_flops", "*=", "2", "\n", "", "module", ".", "__flops__", "+=", "int", "(", "batch_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.deconv_flops_counter_hook": [[267, 291], ["int"], "function", ["None"], ["", "def", "deconv_flops_counter_hook", "(", "conv_module", ",", "input", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "input_height", ",", "input_width", "=", "input", ".", "shape", "[", "2", ":", "]", "\n", "\n", "kernel_height", ",", "kernel_width", "=", "conv_module", ".", "kernel_size", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "\n", "filters_per_channel", "=", "out_channels", "//", "groups", "\n", "conv_per_position_flops", "=", "kernel_height", "*", "kernel_width", "*", "in_channels", "*", "filters_per_channel", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "input_height", "*", "input_width", "\n", "overall_conv_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "bias_flops", "=", "0", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "2", ":", "]", "\n", "bias_flops", "=", "out_channels", "*", "batch_size", "*", "output_height", "*", "output_height", "\n", "", "overall_flops", "=", "overall_conv_flops", "+", "bias_flops", "\n", "\n", "conv_module", ".", "__flops__", "+=", "int", "(", "overall_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.conv_flops_counter_hook": [[293, 326], ["list", "list", "int", "numpy.prod", "conv_module.__mask__.expand", "conv_module.__mask__.expand.sum", "numpy.prod"], "function", ["None"], ["", "def", "conv_flops_counter_hook", "(", "conv_module", ",", "input", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "output_dims", "=", "list", "(", "output", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "kernel_dims", "=", "list", "(", "conv_module", ".", "kernel_size", ")", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "\n", "filters_per_channel", "=", "out_channels", "//", "groups", "\n", "conv_per_position_flops", "=", "np", ".", "prod", "(", "kernel_dims", ")", "*", "in_channels", "*", "filters_per_channel", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "np", ".", "prod", "(", "output_dims", ")", "\n", "\n", "if", "conv_module", ".", "__mask__", "is", "not", "None", ":", "\n", "# (b, 1, h, w)", "\n", "        ", "flops_mask", "=", "conv_module", ".", "__mask__", ".", "expand", "(", "batch_size", ",", "1", ",", "output_height", ",", "output_width", ")", "\n", "active_elements_count", "=", "flops_mask", ".", "sum", "(", ")", "\n", "\n", "", "overall_conv_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "bias_flops", "=", "0", "\n", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "\n", "        ", "bias_flops", "=", "out_channels", "*", "active_elements_count", "\n", "\n", "", "overall_flops", "=", "overall_conv_flops", "+", "bias_flops", "\n", "\n", "conv_module", ".", "__flops__", "+=", "int", "(", "overall_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.batch_counter_hook": [[328, 338], ["len", "len", "print"], "function", ["None"], ["", "def", "batch_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "batch_size", "=", "1", "\n", "if", "len", "(", "input", ")", ">", "0", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "        ", "input", "=", "input", "[", "0", "]", "\n", "batch_size", "=", "len", "(", "input", ")", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "print", "(", "'Warning! No positional inputs found for a module, assuming batch size is 1.'", ")", "\n", "", "module", ".", "__batch_counter__", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.add_batch_counter_variables_or_reset": [[340, 343], ["None"], "function", ["None"], ["", "def", "add_batch_counter_variables_or_reset", "(", "module", ")", ":", "\n", "\n", "    ", "module", ".", "__batch_counter__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.add_batch_counter_hook_function": [[345, 351], ["hasattr", "module.register_forward_hook"], "function", ["None"], ["", "def", "add_batch_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "        ", "return", "\n", "\n", "", "handle", "=", "module", ".", "register_forward_hook", "(", "batch_counter_hook", ")", "\n", "module", ".", "__batch_counter_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.remove_batch_counter_hook_function": [[353, 357], ["hasattr", "module.__batch_counter_handle__.remove"], "function", ["None"], ["", "def", "remove_batch_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "        ", "module", ".", "__batch_counter_handle__", ".", "remove", "(", ")", "\n", "del", "module", ".", "__batch_counter_handle__", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.add_flops_counter_variable_or_reset": [[359, 362], ["flops_counter.is_supported_instance"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.is_supported_instance"], ["", "", "def", "add_flops_counter_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "module", ".", "__flops__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.is_supported_instance": [[402, 406], ["type"], "function", ["None"], ["def", "is_supported_instance", "(", "module", ")", ":", "\n", "    ", "if", "type", "(", "module", ")", "in", "MODULES_MAPPING", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.add_flops_counter_hook_function": [[408, 417], ["flops_counter.is_supported_instance", "hasattr", "module.register_forward_hook", "print", "type"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.is_supported_instance"], ["", "def", "add_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "return", "\n", "", "handle", "=", "module", ".", "register_forward_hook", "(", "MODULES_MAPPING", "[", "type", "(", "module", ")", "]", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "'missing module'", ",", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.remove_flops_counter_hook_function": [[419, 424], ["flops_counter.is_supported_instance", "hasattr", "module.__flops_handle__.remove"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.is_supported_instance"], ["", "", "def", "remove_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "module", ".", "__flops_handle__", ".", "remove", "(", ")", "\n", "del", "module", ".", "__flops_handle__", "\n", "# --- Masked flops counting", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.add_flops_mask_variable_or_reset": [[428, 431], ["flops_counter.is_supported_instance"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.flops_counter.is_supported_instance"], ["", "", "", "def", "add_flops_mask_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "module", ".", "__mask__", "=", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.__init__": [[228, 230], ["evaluation_BDDA_baseline.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.reset": [[231, 236], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.update": [[237, 242], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.main": [[43, 57], ["parser.parse_args", "os.path.join", "bdda_otherModels.BDDA", "torch.utils.data.DataLoader", "evaluation_BDDA_baseline.test"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.test"], ["def", "main", "(", ")", ":", "\n", "    ", "dim", "=", "256", "\n", "th", "=", "1", "/", "dim", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "testdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'test'", ")", "\n", "test_dataset", "=", "BDDA", "(", "\"test\"", ",", "args", ".", "testgrid", ",", "testdir", ",", "th", ",", "args", ".", "gazemaps", ",", "(", "args", ".", "lstm", "or", "args", ".", "convlstm", ")", ",", "args", ".", "sequence", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "\n", "test", "(", "test_loader", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.test": [[58, 161], ["evaluation_BDDA_baseline.AverageMeter", "evaluation_BDDA_baseline.AverageMeter", "evaluation_BDDA_baseline.AverageMeter", "evaluation_BDDA_baseline.AverageMeter", "torch.no_grad", "time.time", "enumerate", "print", "print", "print", "print", "print", "torch.from_numpy().unsqueeze", "heatmap.unsqueeze().repeat.unsqueeze().repeat", "range", "evaluation_BDDA_baseline.kl", "evaluation_BDDA_baseline.cc", "evaluation_BDDA_baseline.AverageMeter.update", "evaluation_BDDA_baseline.AverageMeter.update", "evaluation_BDDA_baseline.AverageMeter.update", "time.time", "sklearn.metrics.roc_auc_score", "gaze_gt.cuda.cuda", "gaze_gt.cuda.size", "heatmap.unsqueeze().repeat.size", "os.path.join", "os.path.exists", "heatmap.unsqueeze().repeat.size", "heatmap.unsqueeze().repeat.size", "len", "torch.from_numpy", "heatmap.unsqueeze().repeat.unsqueeze", "time.time", "numpy.loadtxt", "open", "evaluation_BDDA_baseline.visualization", "linestring.split", "float", "float", "float", "float", "evaluation_BDDA_baseline.bb_mapping", "torch.max", "torch.max", "hm_max_values.append", "heatmap_img.cpu", "gt_img.cpu", "gt.append", "gt.append"], "function", ["home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.kl", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.cc", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.update", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.update", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.AverageMeter.update", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.visualization", "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.bb_mapping"], ["", "def", "test", "(", "test_loader", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "kld_losses", "=", "AverageMeter", "(", ")", "\n", "cc_losses", "=", "AverageMeter", "(", ")", "\n", "\n", "tp", "=", "0", "\n", "fp", "=", "0", "\n", "fn", "=", "0", "\n", "all_count", "=", "0", "\n", "\n", "hm_max_values", "=", "[", "]", "\n", "gt", "=", "[", "]", "\n", "\n", "i", "=", "0", "\n", "\n", "#smoothing = GaussianSmoothing(1, 5, 1).cuda(args.gpu)", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "gaze_gt", ",", "img_names", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "gaze_gt", "=", "gaze_gt", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "\n", "", "heatmap", "=", "torch", ".", "from_numpy", "(", "np", ".", "loadtxt", "(", "args", ".", "baseline", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "heatmap", "=", "heatmap", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "gaze_gt", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "for", "j", "in", "range", "(", "heatmap", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "img_name", "=", "img_names", "[", "j", "]", "\n", "heatmap_img", "=", "heatmap", "[", "j", "]", "# predicted gaze map", "\n", "gt_img", "=", "gaze_gt", "[", "j", "]", "# original gaze map", "\n", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "yolo5bb", ",", "img_name", "+", "\".txt\"", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "                    ", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "\n", "                        ", "for", "linestring", "in", "f", ":", "\n", "                            ", "all_count", "+=", "1", "\n", "\n", "line", "=", "linestring", ".", "split", "(", ")", "\n", "\n", "width", "=", "float", "(", "line", "[", "3", "]", ")", "\n", "height", "=", "float", "(", "line", "[", "4", "]", ")", "\n", "x_center", "=", "float", "(", "line", "[", "1", "]", ")", "\n", "y_center", "=", "float", "(", "line", "[", "2", "]", ")", "\n", "\n", "x_min", ",", "x_max", ",", "y_min", ",", "y_max", "=", "bb_mapping", "(", "x_center", ",", "y_center", ",", "width", ",", "height", ")", "\n", "\n", "# find maximum pixel value within object bounding box", "\n", "gt_obj", "=", "gt_img", "[", "0", ",", "y_min", ":", "y_max", "+", "1", ",", "x_min", ":", "x_max", "+", "1", "]", "\n", "gt_obj_max", "=", "torch", ".", "max", "(", "gt_obj", ")", "\n", "heatmap_obj", "=", "heatmap_img", "[", "0", ",", "y_min", ":", "y_max", "+", "1", ",", "x_min", ":", "x_max", "+", "1", "]", "\n", "heatmap_obj_max", "=", "torch", ".", "max", "(", "heatmap_obj", ")", "\n", "\n", "# object is recognized if maximum pixel value is higher than th", "\n", "gt_obj_recogn", "=", "gt_obj_max", ">", "0.15", "\n", "hm_obj_recogn", "=", "heatmap_obj_max", ">", "args", ".", "threshhold", "\n", "\n", "hm_max_values", ".", "append", "(", "heatmap_obj_max", ")", "\n", "\n", "if", "gt_obj_recogn", ":", "\n", "                                ", "gt", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                                ", "gt", ".", "append", "(", "0", ")", "\n", "\n", "", "if", "(", "hm_obj_recogn", "and", "gt_obj_recogn", ")", ":", "\n", "                                ", "tp", "+=", "1", "\n", "", "elif", "(", "hm_obj_recogn", "and", "not", "gt_obj_recogn", ")", ":", "\n", "                                ", "fp", "+=", "1", "\n", "", "elif", "(", "not", "hm_obj_recogn", "and", "gt_obj_recogn", ")", ":", "\n", "                                ", "fn", "+=", "1", "\n", "\n", "", "", "visualization", "(", "heatmap_img", ".", "cpu", "(", ")", ",", "gt_img", ".", "cpu", "(", ")", ",", "args", ".", "visualizations", ",", "img_name", ")", "\n", "\n", "\n", "", "", "", "kld", "=", "kl", "(", "heatmap", ",", "gaze_gt", ")", "\n", "c", "=", "cc", "(", "heatmap", ",", "gaze_gt", ")", "\n", "\n", "kld_losses", ".", "update", "(", "kld", ",", "heatmap", ".", "size", "(", "0", ")", ")", "\n", "cc_losses", ".", "update", "(", "c", ",", "heatmap", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "print", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'KL {kl.val:.4f} ({kl.avg:.4f})\\t'", "\n", "'CC {cc.val:.4f} ({cc.avg:.4f})\\t'", "\n", ".", "format", "(", "\n", "i", ",", "len", "(", "test_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "kl", "=", "kld_losses", ",", "cc", "=", "cc_losses", ")", ")", "\n", "\n", "precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "tn", "=", "all_count", "-", "tp", "-", "fp", "-", "fn", "\n", "acc", "=", "(", "tp", "+", "tn", ")", "/", "all_count", "\n", "f1", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "print", "(", "'Object-level results:'", ")", "\n", "print", "(", "'tp:'", ",", "tp", ",", "'fp:'", ",", "fp", ",", "'tn:'", ",", "tn", ",", "'fn:'", ",", "fn", ",", "'sum:'", ",", "all_count", ")", "\n", "print", "(", "'prec:'", ",", "precision", ",", "'recall:'", ",", "recall", ",", "'f1'", ",", "f1", ",", "'acc'", ",", "acc", ")", "\n", "print", "(", "'AUC:'", ",", "roc_auc_score", "(", "gt", ",", "hm_max_values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.bb_mapping": [[162, 182], ["int", "int", "int", "int", "math.floor", "math.floor", "math.floor", "math.floor"], "function", ["None"], ["", "", "def", "bb_mapping", "(", "x_center_rel", ",", "y_center_rel", ",", "width_rel", ",", "height_rel", ",", "img_width", "=", "64", ",", "img_height", "=", "36", ")", ":", "\n", "    ", "\"\"\"\n    Compute absolute bounding boxes values for given image size and given relative parameters\n\n    :param x_center_rel: relative x value of bb center\n    :param y_center_rel: relative y value of bb center\n    :param width_rel: relative width\n    :param height_rel: relative height\n    :return: absolute values of bb borders\n    \"\"\"", "\n", "width_abs", "=", "width_rel", "*", "img_width", "\n", "height_abs", "=", "height_rel", "*", "img_height", "\n", "x_center_abs", "=", "x_center_rel", "*", "img_width", "\n", "y_center_abs", "=", "y_center_rel", "*", "img_height", "\n", "x_min", "=", "int", "(", "math", ".", "floor", "(", "x_center_abs", "-", "0.5", "*", "width_abs", ")", ")", "\n", "x_max", "=", "int", "(", "math", ".", "floor", "(", "x_center_abs", "+", "0.5", "*", "width_abs", ")", ")", "\n", "y_min", "=", "int", "(", "math", ".", "floor", "(", "y_center_abs", "-", "0.5", "*", "height_abs", ")", ")", "\n", "y_max", "=", "int", "(", "math", ".", "floor", "(", "y_center_abs", "+", "0.5", "*", "height_abs", ")", ")", "\n", "bb", "=", "[", "x", "if", "x", ">=", "0", "else", "0", "for", "x", "in", "[", "x_min", ",", "x_max", ",", "y_min", ",", "y_max", "]", "]", "\n", "return", "bb", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.cc": [[183, 196], ["range", "s_map_all.size", "s_map_all[].squeeze", "gt_all[].squeeze", "s_map_norm.cpu", "gt_norm.cpu", "torch.sum", "torch.mean", "torch.std", "torch.mean", "torch.std", "torch.sqrt", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "cc", "(", "s_map_all", ",", "gt_all", ")", ":", "\n", "\t", "eps", "=", "1e-07", "\n", "bs", "=", "s_map_all", ".", "size", "(", ")", "[", "0", "]", "\n", "r", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "bs", ")", ":", "\n", "\t\t", "s_map", "=", "s_map_all", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "squeeze", "(", ")", "\n", "gt", "=", "gt_all", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "squeeze", "(", ")", "\n", "s_map_norm", "=", "(", "s_map", "-", "torch", ".", "mean", "(", "s_map", ")", ")", "/", "(", "eps", "+", "torch", ".", "std", "(", "s_map", ")", ")", "\n", "gt_norm", "=", "(", "gt", "-", "torch", ".", "mean", "(", "gt", ")", ")", "/", "(", "eps", "+", "torch", ".", "std", "(", "gt", ")", ")", "\n", "a", "=", "s_map_norm", ".", "cpu", "(", ")", "\n", "b", "=", "gt_norm", ".", "cpu", "(", ")", "\n", "r", "+=", "torch", ".", "sum", "(", "a", "*", "b", ")", "/", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "a", "*", "a", ")", "*", "torch", ".", "sum", "(", "b", "*", "b", ")", ")", "+", "eps", ")", "\n", "", "return", "r", "/", "bs", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.kl": [[197, 213], ["len", "torch.tensor", "s_map_all.size", "s_map_all.size", "range", "s_map_all[].squeeze", "gt_all[].squeeze", "gt.to.to", "s_map.to.to", "torch.sum", "torch.log", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "kl", "(", "s_map_all", ",", "gt_all", ")", ":", "\n", "\t", "dims", "=", "len", "(", "s_map_all", ".", "size", "(", ")", ")", "\n", "bs", "=", "s_map_all", ".", "size", "(", ")", "[", "0", "]", "\n", "eps", "=", "torch", ".", "tensor", "(", "1e-07", ")", "\n", "kl", "=", "0", "\n", "\n", "if", "dims", ">", "3", ":", "\n", "\t\t", "for", "i", "in", "range", "(", "0", ",", "bs", ")", ":", "\n", "\t\t\t", "s_map", "=", "s_map_all", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "squeeze", "(", ")", "\n", "gt", "=", "gt_all", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "squeeze", "(", ")", "\n", "s_map", "=", "s_map", "/", "(", "torch", ".", "sum", "(", "s_map", ")", "*", "1.0", "+", "eps", ")", "\n", "gt", "=", "gt", "/", "(", "torch", ".", "sum", "(", "gt", ")", "*", "1.0", "+", "eps", ")", "\n", "gt", "=", "gt", ".", "to", "(", "'cpu'", ")", "\n", "s_map", "=", "s_map", ".", "to", "(", "'cpu'", ")", "\n", "kl", "+=", "torch", ".", "sum", "(", "gt", "*", "torch", ".", "log", "(", "eps", "+", "gt", "/", "(", "s_map", "+", "eps", ")", ")", ")", "\n", "", "return", "kl", "/", "bs", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.normalizeData": [[215, 217], ["torch.min", "torch.max", "torch.min"], "function", ["None"], ["", "", "def", "normalizeData", "(", "data", ")", ":", "\n", "    ", "return", "(", "data", "-", "torch", ".", "min", "(", "data", ")", ")", "/", "(", "torch", ".", "max", "(", "data", ")", "-", "torch", ".", "min", "(", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_driver-gaze-yolov5.More files.evaluation_BDDA_baseline.visualization": [[218, 224], ["torchvision.transforms.functional.to_pil_image", "torchvision.transforms.functional.to_pil_image", "torchvision.transforms.functional.to_pil_image.save", "torchvision.transforms.functional.to_pil_image.save", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "visualization", "(", "heatmap", ",", "gt", ",", "path", ",", "nr", ")", ":", "\n", "    ", "heatmap", "=", "torchvision", ".", "transforms", ".", "functional", ".", "to_pil_image", "(", "heatmap", ")", "\n", "gt", "=", "torchvision", ".", "transforms", ".", "functional", ".", "to_pil_image", "(", "gt", ")", "\n", "\n", "heatmap", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'%s_pred.png'", "%", "nr", ")", ")", "\n", "gt", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'%s_gt.png'", "%", "nr", ")", ")", "\n", "\n"]]}