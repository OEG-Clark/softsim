{"home.repos.pwc.inspect_result.adamian98_pulse.None.drive.is_url": [[14, 28], ["requests.compat.urlparse", "requests.compat.urlparse", "isinstance", "requests.compat.urljoin"], "function", ["None"], ["def", "is_url", "(", "obj", ":", "Any", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Determine whether the given object is a valid URL string.\"\"\"", "\n", "if", "not", "isinstance", "(", "obj", ",", "str", ")", "or", "not", "\"://\"", "in", "obj", ":", "\n", "        ", "return", "False", "\n", "", "try", ":", "\n", "        ", "res", "=", "requests", ".", "compat", ".", "urlparse", "(", "obj", ")", "\n", "if", "not", "res", ".", "scheme", "or", "not", "res", ".", "netloc", "or", "not", "\".\"", "in", "res", ".", "netloc", ":", "\n", "            ", "return", "False", "\n", "", "res", "=", "requests", ".", "compat", ".", "urlparse", "(", "requests", ".", "compat", ".", "urljoin", "(", "obj", ",", "\"/\"", ")", ")", "\n", "if", "not", "res", ".", "scheme", "or", "not", "res", ".", "netloc", "or", "not", "\".\"", "in", "res", ".", "netloc", ":", "\n", "            ", "return", "False", "\n", "", "", "except", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.drive.open_url": [[30, 95], ["drive.is_url", "hashlib.md5().hexdigest", "io.BytesIO", "glob.glob", "requests.Session", "reversed", "re.sub", "os.path.join", "os.path.join", "os.makedirs", "os.replace", "hashlib.md5", "os.path.join", "len", "print", "range", "open", "f.write", "requests.compat.urljoin.encode", "open", "session.get", "res.raise_for_status", "re.search", "len", "IOError", "len", "res.content.decode", "res.headers.get", "print", "print", "res.headers.get", "IOError", "print", "html.unescape", "len", "requests.compat.urljoin", "IOError", "res.content.decode.split", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.adamian98_pulse.None.drive.is_url"], ["", "def", "open_url", "(", "url", ":", "str", ",", "cache_dir", ":", "str", "=", "None", ",", "num_attempts", ":", "int", "=", "10", ",", "verbose", ":", "bool", "=", "True", ",", "return_path", ":", "bool", "=", "False", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Download the given URL and return a binary-mode file object to access the data.\"\"\"", "\n", "assert", "is_url", "(", "url", ")", "\n", "assert", "num_attempts", ">=", "1", "\n", "\n", "# Lookup from cache.", "\n", "url_md5", "=", "hashlib", ".", "md5", "(", "url", ".", "encode", "(", "\"utf-8\"", ")", ")", ".", "hexdigest", "(", ")", "\n", "if", "cache_dir", "is", "not", "None", ":", "\n", "        ", "cache_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "url_md5", "+", "\"_*\"", ")", ")", "\n", "if", "len", "(", "cache_files", ")", "==", "1", ":", "\n", "            ", "if", "(", "return_path", ")", ":", "\n", "                ", "return", "cache_files", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "return", "open", "(", "cache_files", "[", "0", "]", ",", "\"rb\"", ")", "\n", "\n", "# Download.", "\n", "", "", "", "url_name", "=", "None", "\n", "url_data", "=", "None", "\n", "with", "requests", ".", "Session", "(", ")", "as", "session", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Downloading %s ...\"", "%", "url", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "for", "attempts_left", "in", "reversed", "(", "range", "(", "num_attempts", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "with", "session", ".", "get", "(", "url", ")", "as", "res", ":", "\n", "                    ", "res", ".", "raise_for_status", "(", ")", "\n", "if", "len", "(", "res", ".", "content", ")", "==", "0", ":", "\n", "                        ", "raise", "IOError", "(", "\"No data received\"", ")", "\n", "\n", "", "if", "len", "(", "res", ".", "content", ")", "<", "8192", ":", "\n", "                        ", "content_str", "=", "res", ".", "content", ".", "decode", "(", "\"utf-8\"", ")", "\n", "if", "\"download_warning\"", "in", "res", ".", "headers", ".", "get", "(", "\"Set-Cookie\"", ",", "\"\"", ")", ":", "\n", "                            ", "links", "=", "[", "html", ".", "unescape", "(", "link", ")", "for", "link", "in", "content_str", ".", "split", "(", "'\"'", ")", "if", "\"export=download\"", "in", "link", "]", "\n", "if", "len", "(", "links", ")", "==", "1", ":", "\n", "                                ", "url", "=", "requests", ".", "compat", ".", "urljoin", "(", "url", ",", "links", "[", "0", "]", ")", "\n", "raise", "IOError", "(", "\"Google Drive virus checker nag\"", ")", "\n", "", "", "if", "\"Google Drive - Quota exceeded\"", "in", "content_str", ":", "\n", "                            ", "raise", "IOError", "(", "\"Google Drive quota exceeded\"", ")", "\n", "\n", "", "", "match", "=", "re", ".", "search", "(", "r'filename=\"([^\"]*)\"'", ",", "res", ".", "headers", ".", "get", "(", "\"Content-Disposition\"", ",", "\"\"", ")", ")", "\n", "url_name", "=", "match", "[", "1", "]", "if", "match", "else", "url", "\n", "url_data", "=", "res", ".", "content", "\n", "if", "verbose", ":", "\n", "                        ", "print", "(", "\" done\"", ")", "\n", "", "break", "\n", "", "", "except", ":", "\n", "                ", "if", "not", "attempts_left", ":", "\n", "                    ", "if", "verbose", ":", "\n", "                        ", "print", "(", "\" failed\"", ")", "\n", "", "raise", "\n", "", "if", "verbose", ":", "\n", "                    ", "print", "(", "\".\"", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "\n", "# Save to cache.", "\n", "", "", "", "", "if", "cache_dir", "is", "not", "None", ":", "\n", "        ", "safe_name", "=", "re", ".", "sub", "(", "r\"[^0-9a-zA-Z-._]\"", ",", "\"_\"", ",", "url_name", ")", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "url_md5", "+", "\"_\"", "+", "safe_name", ")", "\n", "temp_file", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "\"tmp_\"", "+", "uuid", ".", "uuid4", "(", ")", ".", "hex", "+", "\"_\"", "+", "url_md5", "+", "\"_\"", "+", "safe_name", ")", "\n", "os", ".", "makedirs", "(", "cache_dir", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "temp_file", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "url_data", ")", "\n", "", "os", ".", "replace", "(", "temp_file", ",", "cache_file", ")", "# atomic", "\n", "if", "(", "return_path", ")", ":", "return", "cache_file", "\n", "\n", "# Return data as file object.", "\n", "", "return", "io", ".", "BytesIO", "(", "url_data", ")", "", "", ""]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.MyLinear.__init__": [[16, 33], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.adamian98_pulse.None.PULSE.PULSE.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ",", "gain", "=", "2", "**", "(", "0.5", ")", ",", "use_wscale", "=", "False", ",", "lrmul", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "he_std", "=", "gain", "*", "input_size", "**", "(", "-", "0.5", ")", "# He init", "\n", "# Equalized learning rate and custom learning rate multiplier.", "\n", "if", "use_wscale", ":", "\n", "            ", "init_std", "=", "1.0", "/", "lrmul", "\n", "self", ".", "w_mul", "=", "he_std", "*", "lrmul", "\n", "", "else", ":", "\n", "            ", "init_std", "=", "he_std", "/", "lrmul", "\n", "self", ".", "w_mul", "=", "lrmul", "\n", "", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "output_size", ",", "input_size", ")", "*", "init_std", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "output_size", ")", ")", "\n", "self", ".", "b_mul", "=", "lrmul", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.MyLinear.forward": [[34, 39], ["torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bias", "=", "self", ".", "bias", "\n", "if", "bias", "is", "not", "None", ":", "\n", "            ", "bias", "=", "bias", "*", "self", ".", "b_mul", "\n", "", "return", "F", ".", "linear", "(", "x", ",", "self", ".", "weight", "*", "self", ".", "w_mul", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.MyConv2d.__init__": [[44, 68], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "stylegan.Upscale2d", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.adamian98_pulse.None.PULSE.PULSE.__init__"], ["def", "__init__", "(", "self", ",", "input_channels", ",", "output_channels", ",", "kernel_size", ",", "gain", "=", "2", "**", "(", "0.5", ")", ",", "use_wscale", "=", "False", ",", "lrmul", "=", "1", ",", "bias", "=", "True", ",", "\n", "intermediate", "=", "None", ",", "upscale", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "upscale", ":", "\n", "            ", "self", ".", "upscale", "=", "Upscale2d", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "upscale", "=", "None", "\n", "", "he_std", "=", "gain", "*", "(", "input_channels", "*", "kernel_size", "**", "\n", "2", ")", "**", "(", "-", "0.5", ")", "# He init", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "if", "use_wscale", ":", "\n", "            ", "init_std", "=", "1.0", "/", "lrmul", "\n", "self", ".", "w_mul", "=", "he_std", "*", "lrmul", "\n", "", "else", ":", "\n", "            ", "init_std", "=", "he_std", "/", "lrmul", "\n", "self", ".", "w_mul", "=", "lrmul", "\n", "", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "\n", "output_channels", ",", "input_channels", ",", "kernel_size", ",", "kernel_size", ")", "*", "init_std", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "output_channels", ")", ")", "\n", "self", ".", "b_mul", "=", "lrmul", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n", "", "self", ".", "intermediate", "=", "intermediate", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.MyConv2d.forward": [[69, 101], ["torch.pad.permute", "torch.pad", "torch.pad", "torch.pad", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "stylegan.MyConv2d.intermediate", "stylegan.MyConv2d.upscale", "torch.conv2d", "torch.conv2d", "torch.conv2d", "bias.view", "min", "int", "int", "int", "torch.pad.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bias", "=", "self", ".", "bias", "\n", "if", "bias", "is", "not", "None", ":", "\n", "            ", "bias", "=", "bias", "*", "self", ".", "b_mul", "\n", "\n", "", "have_convolution", "=", "False", "\n", "if", "self", ".", "upscale", "is", "not", "None", "and", "min", "(", "x", ".", "shape", "[", "2", ":", "]", ")", "*", "2", ">=", "128", ":", "\n", "# this is the fused upscale + conv from StyleGAN, sadly this seems incompatible with the non-fused way", "\n", "# this really needs to be cleaned up and go into the conv...", "\n", "            ", "w", "=", "self", ".", "weight", "*", "self", ".", "w_mul", "\n", "w", "=", "w", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "# probably applying a conv on w would be more efficient. also this quadruples the weight (average)?!", "\n", "w", "=", "F", ".", "pad", "(", "w", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "w", "=", "w", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", "+", "w", "[", ":", ",", ":", ",", ":", "-", "1", ",", "1", ":", "]", "+", "w", "[", ":", ",", ":", ",", "1", ":", ",", ":", "-", "1", "]", "+", "w", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "x", "=", "F", ".", "conv_transpose2d", "(", "\n", "x", ",", "w", ",", "stride", "=", "2", ",", "padding", "=", "int", "(", "(", "w", ".", "size", "(", "-", "1", ")", "-", "1", ")", "//", "2", ")", ")", "\n", "have_convolution", "=", "True", "\n", "", "elif", "self", ".", "upscale", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "upscale", "(", "x", ")", "\n", "\n", "", "if", "not", "have_convolution", "and", "self", ".", "intermediate", "is", "None", ":", "\n", "            ", "return", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", "*", "self", ".", "w_mul", ",", "bias", ",", "padding", "=", "int", "(", "self", ".", "kernel_size", "//", "2", ")", ")", "\n", "", "elif", "not", "have_convolution", ":", "\n", "            ", "x", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", "*", "self", ".", "w_mul", ",", "None", ",", "\n", "padding", "=", "int", "(", "self", ".", "kernel_size", "//", "2", ")", ")", "\n", "\n", "", "if", "self", ".", "intermediate", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "intermediate", "(", "x", ")", "\n", "", "if", "bias", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "+", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.NoiseLayer.__init__": [[106, 110], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.adamian98_pulse.None.PULSE.PULSE.__init__"], ["def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "channels", ")", ")", "\n", "self", ".", "noise", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.NoiseLayer.forward": [[111, 122], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "x.size", "x.size", "x.size", "stylegan.NoiseLayer.weight.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "noise", "=", "None", ")", ":", "\n", "        ", "if", "noise", "is", "None", "and", "self", ".", "noise", "is", "None", ":", "\n", "            ", "noise", "=", "torch", ".", "randn", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "x", ".", "size", "(", "\n", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "", "elif", "noise", "is", "None", ":", "\n", "# here is a little trick: if you get all the noiselayers and set each", "\n", "# modules .noise attribute, you can have pre-defined noise.", "\n", "# Very useful for analysis", "\n", "            ", "noise", "=", "self", ".", "noise", "\n", "", "x", "=", "x", "+", "self", ".", "weight", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "*", "noise", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.StyleMod.__init__": [[125, 130], ["torch.Module.__init__", "stylegan.MyLinear"], "methods", ["home.repos.pwc.inspect_result.adamian98_pulse.None.PULSE.PULSE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "latent_size", ",", "channels", ",", "use_wscale", ")", ":", "\n", "        ", "super", "(", "StyleMod", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lin", "=", "MyLinear", "(", "latent_size", ",", "\n", "channels", "*", "2", ",", "\n", "gain", "=", "1.0", ",", "use_wscale", "=", "use_wscale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.StyleMod.forward": [[131, 137], ["stylegan.StyleMod.lin", "style.view.view.view", "x.size", "x.dim"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "latent", ")", ":", "\n", "        ", "style", "=", "self", ".", "lin", "(", "latent", ")", "# style => [batch_size, n_channels*2]", "\n", "shape", "=", "[", "-", "1", ",", "2", ",", "x", ".", "size", "(", "1", ")", "]", "+", "(", "x", ".", "dim", "(", ")", "-", "2", ")", "*", "[", "1", "]", "\n", "style", "=", "style", ".", "view", "(", "shape", ")", "# [batch_size, 2, n_channels, ...]", "\n", "x", "=", "x", "*", "(", "style", "[", ":", ",", "0", "]", "+", "1.", ")", "+", "style", "[", ":", ",", "1", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.PixelNormLayer.__init__": [[140, 143], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.adamian98_pulse.None.PULSE.PULSE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.PixelNormLayer.forward": [[144, 146], ["torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "x", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "self", ".", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.BlurLayer.__init__": [[149, 161], ["torch.Module.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "stylegan.BlurLayer.register_buffer", "torch.tensor.sum", "torch.tensor.sum", "torch.tensor.sum"], "methods", ["home.repos.pwc.inspect_result.adamian98_pulse.None.PULSE.PULSE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel", "=", "[", "1", ",", "2", ",", "1", "]", ",", "normalize", "=", "True", ",", "flip", "=", "False", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BlurLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "kernel", "=", "[", "1", ",", "2", ",", "1", "]", "\n", "kernel", "=", "torch", ".", "tensor", "(", "kernel", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "kernel", "=", "kernel", "[", ":", ",", "None", "]", "*", "kernel", "[", "None", ",", ":", "]", "\n", "kernel", "=", "kernel", "[", "None", ",", "None", "]", "\n", "if", "normalize", ":", "\n", "            ", "kernel", "=", "kernel", "/", "kernel", ".", "sum", "(", ")", "\n", "", "if", "flip", ":", "\n", "            ", "kernel", "=", "kernel", "[", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", "\n", "", "self", ".", "register_buffer", "(", "'kernel'", ",", "kernel", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.BlurLayer.forward": [[162, 173], ["stylegan.BlurLayer.kernel.expand", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d.size", "int", "torch.conv2d.size", "stylegan.BlurLayer.kernel.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# expand kernel channels", "\n", "        ", "kernel", "=", "self", ".", "kernel", ".", "expand", "(", "x", ".", "size", "(", "1", ")", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "\n", "kernel", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "int", "(", "(", "self", ".", "kernel", ".", "size", "(", "2", ")", "-", "1", ")", "/", "2", ")", ",", "\n", "groups", "=", "x", ".", "size", "(", "1", ")", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.Upscale2d.__init__": [[189, 194], ["torch.Module.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.adamian98_pulse.None.PULSE.PULSE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "factor", "=", "2", ",", "gain", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "factor", ",", "int", ")", "and", "factor", ">=", "1", "\n", "self", ".", "gain", "=", "gain", "\n", "self", ".", "factor", "=", "factor", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.Upscale2d.forward": [[195, 197], ["stylegan.upscale2d"], "methods", ["home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.upscale2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "upscale2d", "(", "x", ",", "factor", "=", "self", ".", "factor", ",", "gain", "=", "self", ".", "gain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.G_mapping.__init__": [[200, 231], ["torch.Sequential.__init__", "collections.OrderedDict", "stylegan.PixelNormLayer", "stylegan.MyLinear", "stylegan.MyLinear", "stylegan.MyLinear", "stylegan.MyLinear", "stylegan.MyLinear", "stylegan.MyLinear", "stylegan.MyLinear", "stylegan.MyLinear", "numpy.sqrt", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.adamian98_pulse.None.PULSE.PULSE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nonlinearity", "=", "'lrelu'", ",", "use_wscale", "=", "True", ")", ":", "\n", "        ", "act", ",", "gain", "=", "{", "'relu'", ":", "(", "torch", ".", "relu", ",", "np", ".", "sqrt", "(", "2", ")", ")", ",", "\n", "'lrelu'", ":", "(", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ",", "np", ".", "sqrt", "(", "2", ")", ")", "}", "[", "nonlinearity", "]", "\n", "layers", "=", "[", "\n", "(", "'pixel_norm'", ",", "PixelNormLayer", "(", ")", ")", ",", "\n", "(", "'dense0'", ",", "MyLinear", "(", "512", ",", "512", ",", "gain", "=", "gain", ",", "\n", "lrmul", "=", "0.01", ",", "use_wscale", "=", "use_wscale", ")", ")", ",", "\n", "(", "'dense0_act'", ",", "act", ")", ",", "\n", "(", "'dense1'", ",", "MyLinear", "(", "512", ",", "512", ",", "gain", "=", "gain", ",", "\n", "lrmul", "=", "0.01", ",", "use_wscale", "=", "use_wscale", ")", ")", ",", "\n", "(", "'dense1_act'", ",", "act", ")", ",", "\n", "(", "'dense2'", ",", "MyLinear", "(", "512", ",", "512", ",", "gain", "=", "gain", ",", "\n", "lrmul", "=", "0.01", ",", "use_wscale", "=", "use_wscale", ")", ")", ",", "\n", "(", "'dense2_act'", ",", "act", ")", ",", "\n", "(", "'dense3'", ",", "MyLinear", "(", "512", ",", "512", ",", "gain", "=", "gain", ",", "\n", "lrmul", "=", "0.01", ",", "use_wscale", "=", "use_wscale", ")", ")", ",", "\n", "(", "'dense3_act'", ",", "act", ")", ",", "\n", "(", "'dense4'", ",", "MyLinear", "(", "512", ",", "512", ",", "gain", "=", "gain", ",", "\n", "lrmul", "=", "0.01", ",", "use_wscale", "=", "use_wscale", ")", ")", ",", "\n", "(", "'dense4_act'", ",", "act", ")", ",", "\n", "(", "'dense5'", ",", "MyLinear", "(", "512", ",", "512", ",", "gain", "=", "gain", ",", "\n", "lrmul", "=", "0.01", ",", "use_wscale", "=", "use_wscale", ")", ")", ",", "\n", "(", "'dense5_act'", ",", "act", ")", ",", "\n", "(", "'dense6'", ",", "MyLinear", "(", "512", ",", "512", ",", "gain", "=", "gain", ",", "\n", "lrmul", "=", "0.01", ",", "use_wscale", "=", "use_wscale", ")", ")", ",", "\n", "(", "'dense6_act'", ",", "act", ")", ",", "\n", "(", "'dense7'", ",", "MyLinear", "(", "512", ",", "512", ",", "gain", "=", "gain", ",", "\n", "lrmul", "=", "0.01", ",", "use_wscale", "=", "use_wscale", ")", ")", ",", "\n", "(", "'dense7_act'", ",", "act", ")", "\n", "]", "\n", "super", "(", ")", ".", "__init__", "(", "OrderedDict", "(", "layers", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.G_mapping.forward": [[232, 235], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.adamian98_pulse.None.PULSE.PULSE.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.Truncation.__init__": [[238, 243], ["torch.Module.__init__", "stylegan.Truncation.register_buffer"], "methods", ["home.repos.pwc.inspect_result.adamian98_pulse.None.PULSE.PULSE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "avg_latent", ",", "max_layer", "=", "8", ",", "threshold", "=", "0.7", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_layer", "=", "max_layer", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "register_buffer", "(", "'avg_latent'", ",", "avg_latent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.Truncation.forward": [[244, 249], ["torch.lerp", "torch.lerp", "torch.lerp", "torch.lerp", "torch.lerp", "torch.lerp", "torch.lerp", "torch.lerp", "torch.lerp", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "x.dim", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "dim", "(", ")", "==", "3", "\n", "interp", "=", "torch", ".", "lerp", "(", "self", ".", "avg_latent", ",", "x", ",", "self", ".", "threshold", ")", "\n", "do_trunc", "=", "(", "torch", ".", "arange", "(", "x", ".", "size", "(", "1", ")", ")", "<", "self", ".", "max_layer", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "return", "torch", ".", "where", "(", "do_trunc", ",", "interp", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.LayerEpilogue.__init__": [[254, 273], ["torch.Module.__init__", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "stylegan.NoiseLayer", "layers.append", "layers.append", "collections.OrderedDict", "stylegan.StyleMod", "stylegan.PixelNormLayer", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.adamian98_pulse.None.PULSE.PULSE.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "dlatent_size", ",", "use_wscale", ",", "use_noise", ",", "use_pixel_norm", ",", "use_instance_norm", ",", "use_styles", ",", "activation_layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "if", "use_noise", ":", "\n", "            ", "self", ".", "noise", "=", "NoiseLayer", "(", "channels", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "noise", "=", "None", "\n", "", "layers", ".", "append", "(", "(", "'activation'", ",", "activation_layer", ")", ")", "\n", "if", "use_pixel_norm", ":", "\n", "            ", "layers", ".", "append", "(", "(", "'pixel_norm'", ",", "PixelNormLayer", "(", ")", ")", ")", "\n", "", "if", "use_instance_norm", ":", "\n", "            ", "layers", ".", "append", "(", "(", "'instance_norm'", ",", "nn", ".", "InstanceNorm2d", "(", "channels", ")", ")", ")", "\n", "\n", "", "self", ".", "top_epi", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "layers", ")", ")", "\n", "if", "use_styles", ":", "\n", "            ", "self", ".", "style_mod", "=", "StyleMod", "(", "\n", "dlatent_size", ",", "channels", ",", "use_wscale", "=", "use_wscale", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "style_mod", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.LayerEpilogue.forward": [[274, 283], ["stylegan.LayerEpilogue.top_epi", "stylegan.LayerEpilogue.noise", "stylegan.LayerEpilogue.style_mod"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "dlatents_in_slice", "=", "None", ",", "noise_in_slice", "=", "None", ")", ":", "\n", "        ", "if", "(", "self", ".", "noise", "is", "not", "None", ")", ":", "\n", "            ", "x", "=", "self", ".", "noise", "(", "x", ",", "noise", "=", "noise_in_slice", ")", "\n", "", "x", "=", "self", ".", "top_epi", "(", "x", ")", "\n", "if", "self", ".", "style_mod", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "style_mod", "(", "x", ",", "dlatents_in_slice", ")", "\n", "", "else", ":", "\n", "            ", "assert", "dlatents_in_slice", "is", "None", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.InputBlock.__init__": [[286, 303], ["torch.Module.__init__", "stylegan.LayerEpilogue", "stylegan.MyConv2d", "stylegan.LayerEpilogue", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "stylegan.MyLinear", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.adamian98_pulse.None.PULSE.PULSE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", ",", "dlatent_size", ",", "const_input_layer", ",", "gain", ",", "use_wscale", ",", "use_noise", ",", "use_pixel_norm", ",", "use_instance_norm", ",", "use_styles", ",", "activation_layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "const_input_layer", "=", "const_input_layer", "\n", "self", ".", "nf", "=", "nf", "\n", "if", "self", ".", "const_input_layer", ":", "\n", "# called 'const' in tf", "\n", "            ", "self", ".", "const", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "nf", ",", "4", ",", "4", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "nf", ")", ")", "\n", "", "else", ":", "\n", "# tweak gain to match the official implementation of Progressing GAN", "\n", "            ", "self", ".", "dense", "=", "MyLinear", "(", "dlatent_size", ",", "nf", "*", "16", ",", "\n", "gain", "=", "gain", "/", "4", ",", "use_wscale", "=", "use_wscale", ")", "\n", "", "self", ".", "epi1", "=", "LayerEpilogue", "(", "nf", ",", "dlatent_size", ",", "use_wscale", ",", "use_noise", ",", "\n", "use_pixel_norm", ",", "use_instance_norm", ",", "use_styles", ",", "activation_layer", ")", "\n", "self", ".", "conv", "=", "MyConv2d", "(", "nf", ",", "nf", ",", "3", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", "\n", "self", ".", "epi2", "=", "LayerEpilogue", "(", "nf", ",", "dlatent_size", ",", "use_wscale", ",", "use_noise", ",", "\n", "use_pixel_norm", ",", "use_instance_norm", ",", "use_styles", ",", "activation_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.InputBlock.forward": [[304, 316], ["dlatents_in_range.size", "stylegan.InputBlock.epi1", "stylegan.InputBlock.conv", "stylegan.InputBlock.epi2", "stylegan.InputBlock.const.expand", "stylegan.InputBlock.dense().view", "stylegan.InputBlock.bias.view", "stylegan.InputBlock.dense"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dlatents_in_range", ",", "noise_in_range", ")", ":", "\n", "        ", "batch_size", "=", "dlatents_in_range", ".", "size", "(", "0", ")", "\n", "if", "self", ".", "const_input_layer", ":", "\n", "            ", "x", "=", "self", ".", "const", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "dense", "(", "dlatents_in_range", "[", ":", ",", "0", "]", ")", ".", "view", "(", "\n", "batch_size", ",", "self", ".", "nf", ",", "4", ",", "4", ")", "\n", "", "x", "=", "self", ".", "epi1", "(", "x", ",", "dlatents_in_range", "[", ":", ",", "0", "]", ",", "noise_in_range", "[", "0", "]", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "epi2", "(", "x", ",", "dlatents_in_range", "[", ":", ",", "1", "]", ",", "noise_in_range", "[", "1", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.GSynthesisBlock.__init__": [[319, 334], ["torch.Module.__init__", "stylegan.MyConv2d", "stylegan.LayerEpilogue", "stylegan.MyConv2d", "stylegan.LayerEpilogue", "stylegan.BlurLayer"], "methods", ["home.repos.pwc.inspect_result.adamian98_pulse.None.PULSE.PULSE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "blur_filter", ",", "dlatent_size", ",", "gain", ",", "use_wscale", ",", "use_noise", ",", "use_pixel_norm", ",", "use_instance_norm", ",", "use_styles", ",", "activation_layer", ")", ":", "\n", "# 2**res x 2**res # res = 3..resolution_log2", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "blur_filter", ":", "\n", "            ", "blur", "=", "BlurLayer", "(", "blur_filter", ")", "\n", "", "else", ":", "\n", "            ", "blur", "=", "None", "\n", "", "self", ".", "conv0_up", "=", "MyConv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ",", "\n", "intermediate", "=", "blur", ",", "upscale", "=", "True", ")", "\n", "self", ".", "epi1", "=", "LayerEpilogue", "(", "out_channels", ",", "dlatent_size", ",", "use_wscale", ",", "use_noise", ",", "\n", "use_pixel_norm", ",", "use_instance_norm", ",", "use_styles", ",", "activation_layer", ")", "\n", "self", ".", "conv1", "=", "MyConv2d", "(", "out_channels", ",", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", "\n", "self", ".", "epi2", "=", "LayerEpilogue", "(", "out_channels", ",", "dlatent_size", ",", "use_wscale", ",", "use_noise", ",", "\n", "use_pixel_norm", ",", "use_instance_norm", ",", "use_styles", ",", "activation_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.GSynthesisBlock.forward": [[335, 341], ["stylegan.GSynthesisBlock.conv0_up", "stylegan.GSynthesisBlock.epi1", "stylegan.GSynthesisBlock.conv1", "stylegan.GSynthesisBlock.epi2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "dlatents_in_range", ",", "noise_in_range", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv0_up", "(", "x", ")", "\n", "x", "=", "self", ".", "epi1", "(", "x", ",", "dlatents_in_range", "[", ":", ",", "0", "]", ",", "noise_in_range", "[", "0", "]", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "epi2", "(", "x", ",", "dlatents_in_range", "[", ":", ",", "1", "]", ",", "noise_in_range", "[", "1", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.G_synthesis.__init__": [[344, 399], ["torch.Module.__init__", "int", "range", "stylegan.MyConv2d", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "min", "numpy.log2", "stylegan.G_synthesis.__init__.nf"], "methods", ["home.repos.pwc.inspect_result.adamian98_pulse.None.PULSE.PULSE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "# Disentangled latent (W) dimensionality.", "\n", "dlatent_size", "=", "512", ",", "\n", "num_channels", "=", "3", ",", "# Number of output color channels.", "\n", "resolution", "=", "1024", ",", "# Output resolution.", "\n", "# Overall multiplier for the number of feature maps.", "\n", "fmap_base", "=", "8192", ",", "\n", "# log2 feature map reduction when doubling the resolution.", "\n", "fmap_decay", "=", "1.0", ",", "\n", "# Maximum number of feature maps in any layer.", "\n", "fmap_max", "=", "512", ",", "\n", "use_styles", "=", "True", ",", "# Enable style inputs?", "\n", "const_input_layer", "=", "True", ",", "# First layer is a learned constant?", "\n", "use_noise", "=", "True", ",", "# Enable noise inputs?", "\n", "# True = randomize noise inputs every time (non-deterministic), False = read noise inputs from variables.", "\n", "randomize_noise", "=", "True", ",", "\n", "nonlinearity", "=", "'lrelu'", ",", "# Activation function: 'relu', 'lrelu'", "\n", "use_wscale", "=", "True", ",", "# Enable equalized learning rate?", "\n", "use_pixel_norm", "=", "False", ",", "# Enable pixelwise feature vector normalization?", "\n", "use_instance_norm", "=", "True", ",", "# Enable instance normalization?", "\n", "# Data type to use for activations and outputs.", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "# Low-pass filter to apply when resampling activations. None = no filtering.", "\n", "blur_filter", "=", "[", "1", ",", "2", ",", "1", "]", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "def", "nf", "(", "stage", ")", ":", "\n", "            ", "return", "min", "(", "int", "(", "fmap_base", "/", "(", "2.0", "**", "(", "stage", "*", "fmap_decay", ")", ")", ")", ",", "fmap_max", ")", "\n", "", "self", ".", "dlatent_size", "=", "dlatent_size", "\n", "resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "resolution", ")", ")", "\n", "assert", "resolution", "==", "2", "**", "resolution_log2", "and", "resolution", ">=", "4", "\n", "\n", "act", ",", "gain", "=", "{", "'relu'", ":", "(", "torch", ".", "relu", ",", "np", ".", "sqrt", "(", "2", ")", ")", ",", "\n", "'lrelu'", ":", "(", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ",", "np", ".", "sqrt", "(", "2", ")", ")", "}", "[", "nonlinearity", "]", "\n", "num_layers", "=", "resolution_log2", "*", "2", "-", "2", "\n", "num_styles", "=", "num_layers", "if", "use_styles", "else", "1", "\n", "torgbs", "=", "[", "]", "\n", "blocks", "=", "[", "]", "\n", "for", "res", "in", "range", "(", "2", ",", "resolution_log2", "+", "1", ")", ":", "\n", "            ", "channels", "=", "nf", "(", "res", "-", "1", ")", "\n", "name", "=", "'{s}x{s}'", ".", "format", "(", "s", "=", "2", "**", "res", ")", "\n", "if", "res", "==", "2", ":", "\n", "                ", "blocks", ".", "append", "(", "(", "name", ",", "\n", "InputBlock", "(", "channels", ",", "dlatent_size", ",", "const_input_layer", ",", "gain", ",", "use_wscale", ",", "\n", "use_noise", ",", "use_pixel_norm", ",", "use_instance_norm", ",", "use_styles", ",", "act", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "blocks", ".", "append", "(", "(", "name", ",", "\n", "GSynthesisBlock", "(", "last_channels", ",", "channels", ",", "blur_filter", ",", "dlatent_size", ",", "gain", ",", "use_wscale", ",", "use_noise", ",", "use_pixel_norm", ",", "use_instance_norm", ",", "use_styles", ",", "act", ")", ")", ")", "\n", "", "last_channels", "=", "channels", "\n", "", "self", ".", "torgb", "=", "MyConv2d", "(", "channels", ",", "num_channels", ",", "1", ",", "\n", "gain", "=", "1", ",", "use_wscale", "=", "use_wscale", ")", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleDict", "(", "OrderedDict", "(", "blocks", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.G_synthesis.forward": [[400, 411], ["dlatents_in.size", "enumerate", "stylegan.G_synthesis.torgb", "stylegan.G_synthesis.blocks.values", "m", "m"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dlatents_in", ",", "noise_in", ")", ":", "\n", "# Input: Disentangled latents (W) [minibatch, num_layers, dlatent_size].", "\n", "# lod_in = tf.cast(tf.get_variable('lod', initializer=np.float32(0), trainable=False), dtype)", "\n", "        ", "batch_size", "=", "dlatents_in", ".", "size", "(", "0", ")", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "self", ".", "blocks", ".", "values", "(", ")", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "x", "=", "m", "(", "dlatents_in", "[", ":", ",", "2", "*", "i", ":", "2", "*", "i", "+", "2", "]", ",", "noise_in", "[", "2", "*", "i", ":", "2", "*", "i", "+", "2", "]", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "m", "(", "x", ",", "dlatents_in", "[", ":", ",", "2", "*", "i", ":", "2", "*", "i", "+", "2", "]", ",", "noise_in", "[", "2", "*", "i", ":", "2", "*", "i", "+", "2", "]", ")", "\n", "", "", "rgb", "=", "self", ".", "torgb", "(", "x", ")", "\n", "return", "rgb", "\n", "", "", ""]], "home.repos.pwc.inspect_result.adamian98_pulse.None.stylegan.upscale2d": [[175, 186], ["x.contiguous().view.dim", "x.contiguous().view.view().expand", "x.contiguous().view.contiguous().view", "x.contiguous().view.view", "x.contiguous().view.contiguous"], "function", ["None"], ["", "", "def", "upscale2d", "(", "x", ",", "factor", "=", "2", ",", "gain", "=", "1", ")", ":", "\n", "    ", "assert", "x", ".", "dim", "(", ")", "==", "4", "\n", "if", "gain", "!=", "1", ":", "\n", "        ", "x", "=", "x", "*", "gain", "\n", "", "if", "factor", "!=", "1", ":", "\n", "        ", "shape", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", ",", "1", ",", "shape", "[", "3", "]", ",", "\n", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "-", "1", ",", "factor", ",", "-", "1", ",", "factor", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "factor", "*", "shape", "[", "2", "]", ",", "factor", "*", "shape", "[", "3", "]", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.SphericalOptimizer.SphericalOptimizer.__init__": [[13, 18], ["optimizer", "torch.no_grad", "param.pow().sum", "tuple", "param.pow", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "params", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "opt", "=", "optimizer", "(", "params", ",", "**", "kwargs", ")", "\n", "self", ".", "params", "=", "params", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "radii", "=", "{", "param", ":", "(", "param", ".", "pow", "(", "2", ")", ".", "sum", "(", "tuple", "(", "range", "(", "2", ",", "param", ".", "ndim", ")", ")", ",", "keepdim", "=", "True", ")", "+", "1e-9", ")", ".", "sqrt", "(", ")", "for", "param", "in", "params", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.SphericalOptimizer.SphericalOptimizer.step": [[19, 27], ["torch.no_grad", "SphericalOptimizer.SphericalOptimizer.opt.step", "param.data.div_", "param.mul_", "param.pow().sum", "tuple", "param.pow", "range"], "methods", ["home.repos.pwc.inspect_result.adamian98_pulse.None.SphericalOptimizer.SphericalOptimizer.step"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "self", ".", "opt", ".", "step", "(", "closure", ")", "\n", "for", "param", "in", "self", ".", "params", ":", "\n", "            ", "param", ".", "data", ".", "div_", "(", "(", "param", ".", "pow", "(", "2", ")", ".", "sum", "(", "tuple", "(", "range", "(", "2", ",", "param", ".", "ndim", ")", ")", ",", "keepdim", "=", "True", ")", "+", "1e-9", ")", ".", "sqrt", "(", ")", ")", "\n", "param", ".", "mul_", "(", "self", ".", "radii", "[", "param", "]", ")", "\n", "\n", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.adamian98_pulse.None.loss.LossBuilder.__init__": [[5, 15], ["super().__init__", "bicubic.BicubicDownSample", "loss_term.split", "loss_str.split"], "methods", ["home.repos.pwc.inspect_result.adamian98_pulse.None.PULSE.PULSE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ref_im", ",", "loss_str", ",", "eps", ")", ":", "\n", "        ", "super", "(", "LossBuilder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "ref_im", ".", "shape", "[", "2", "]", "==", "ref_im", ".", "shape", "[", "3", "]", "\n", "im_size", "=", "ref_im", ".", "shape", "[", "2", "]", "\n", "factor", "=", "1024", "//", "im_size", "\n", "assert", "im_size", "*", "factor", "==", "1024", "\n", "self", ".", "D", "=", "BicubicDownSample", "(", "factor", "=", "factor", ")", "\n", "self", ".", "ref_im", "=", "ref_im", "\n", "self", ".", "parsed_loss", "=", "[", "loss_term", ".", "split", "(", "'*'", ")", "for", "loss_term", "in", "loss_str", ".", "split", "(", "'+'", ")", "]", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.loss.LossBuilder.flatcat": [[18, 21], ["torch.cat", "isinstance", "x.flatten"], "methods", ["None"], ["", "def", "flatcat", "(", "self", ",", "l", ")", ":", "\n", "        ", "l", "=", "l", "if", "(", "isinstance", "(", "l", ",", "list", ")", ")", "else", "[", "l", "]", "\n", "return", "torch", ".", "cat", "(", "[", "x", ".", "flatten", "(", ")", "for", "x", "in", "l", "]", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.loss.LossBuilder._loss_l2": [[22, 24], ["None"], "methods", ["None"], ["", "def", "_loss_l2", "(", "self", ",", "gen_im_lr", ",", "ref_im", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "(", "(", "gen_im_lr", "-", "ref_im", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "(", "1", ",", "2", ",", "3", ")", ")", ".", "clamp", "(", "min", "=", "self", ".", "eps", ")", ".", "sum", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.loss.LossBuilder._loss_l1": [[25, 27], ["None"], "methods", ["None"], ["", "def", "_loss_l1", "(", "self", ",", "gen_im_lr", ",", "ref_im", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "10", "*", "(", "(", "gen_im_lr", "-", "ref_im", ")", ".", "abs", "(", ")", ".", "mean", "(", "(", "1", ",", "2", ",", "3", ")", ")", ".", "clamp", "(", "min", "=", "self", ".", "eps", ")", ".", "sum", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.loss.LossBuilder._loss_geocross": [[29, 40], ["latent.view", "latent.view", "torch.atan2", "D.pow"], "methods", ["None"], ["", "def", "_loss_geocross", "(", "self", ",", "latent", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "(", "latent", ".", "shape", "[", "1", "]", "==", "1", ")", ":", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "            ", "X", "=", "latent", ".", "view", "(", "-", "1", ",", "1", ",", "18", ",", "512", ")", "\n", "Y", "=", "latent", ".", "view", "(", "-", "1", ",", "18", ",", "1", ",", "512", ")", "\n", "A", "=", "(", "(", "X", "-", "Y", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "-", "1", ")", "+", "1e-9", ")", ".", "sqrt", "(", ")", "\n", "B", "=", "(", "(", "X", "+", "Y", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "-", "1", ")", "+", "1e-9", ")", ".", "sqrt", "(", ")", "\n", "D", "=", "2", "*", "torch", ".", "atan2", "(", "A", ",", "B", ")", "\n", "D", "=", "(", "(", "D", ".", "pow", "(", "2", ")", "*", "512", ")", ".", "mean", "(", "(", "1", ",", "2", ")", ")", "/", "8.", ")", ".", "sum", "(", ")", "\n", "return", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.loss.LossBuilder.forward": [[41, 58], ["loss.LossBuilder.D", "float"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "latent", ",", "gen_im", ")", ":", "\n", "        ", "var_dict", "=", "{", "'latent'", ":", "latent", ",", "\n", "'gen_im_lr'", ":", "self", ".", "D", "(", "gen_im", ")", ",", "\n", "'ref_im'", ":", "self", ".", "ref_im", ",", "\n", "}", "\n", "loss", "=", "0", "\n", "loss_fun_dict", "=", "{", "\n", "'L2'", ":", "self", ".", "_loss_l2", ",", "\n", "'L1'", ":", "self", ".", "_loss_l1", ",", "\n", "'GEOCROSS'", ":", "self", ".", "_loss_geocross", ",", "\n", "}", "\n", "losses", "=", "{", "}", "\n", "for", "weight", ",", "loss_type", "in", "self", ".", "parsed_loss", ":", "\n", "            ", "tmp_loss", "=", "loss_fun_dict", "[", "loss_type", "]", "(", "**", "var_dict", ")", "\n", "losses", "[", "loss_type", "]", "=", "tmp_loss", "\n", "loss", "+=", "float", "(", "weight", ")", "*", "tmp_loss", "\n", "", "return", "loss", ",", "losses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.adamian98_pulse.None.bicubic.BicubicDownSample.bicubic_kernel": [[7, 19], ["torch.abs", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["    ", "def", "bicubic_kernel", "(", "self", ",", "x", ",", "a", "=", "-", "0.50", ")", ":", "\n", "        ", "\"\"\"\n        This equation is exactly copied from the website below:\n        https://clouard.users.greyc.fr/Pantheon/experiments/rescaling/index-en.html#bicubic\n        \"\"\"", "\n", "abs_x", "=", "torch", ".", "abs", "(", "x", ")", "\n", "if", "abs_x", "<=", "1.", ":", "\n", "            ", "return", "(", "a", "+", "2.", ")", "*", "torch", ".", "pow", "(", "abs_x", ",", "3.", ")", "-", "(", "a", "+", "3.", ")", "*", "torch", ".", "pow", "(", "abs_x", ",", "2.", ")", "+", "1", "\n", "", "elif", "1.", "<", "abs_x", "<", "2.", ":", "\n", "            ", "return", "a", "*", "torch", ".", "pow", "(", "abs_x", ",", "3", ")", "-", "5.", "*", "a", "*", "torch", ".", "pow", "(", "abs_x", ",", "2.", ")", "+", "8.", "*", "a", "*", "abs_x", "-", "4.", "*", "a", "\n", "", "else", ":", "\n", "            ", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.bicubic.BicubicDownSample.__init__": [[20, 36], ["torch.nn.Module.__init__", "torch.tensor", "torch.reshape", "torch.cat", "torch.reshape", "torch.cat", "bicubic.BicubicDownSample.parameters", "torch.sum", "bicubic.BicubicDownSample.bicubic_kernel", "range", "torch.floor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.adamian98_pulse.None.PULSE.PULSE.__init__", "home.repos.pwc.inspect_result.adamian98_pulse.None.bicubic.BicubicDownSample.bicubic_kernel"], ["", "", "def", "__init__", "(", "self", ",", "factor", "=", "4", ",", "cuda", "=", "True", ",", "padding", "=", "'reflect'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "factor", "=", "factor", "\n", "size", "=", "factor", "*", "4", "\n", "k", "=", "torch", ".", "tensor", "(", "[", "self", ".", "bicubic_kernel", "(", "(", "i", "-", "torch", ".", "floor", "(", "torch", ".", "tensor", "(", "size", "/", "2", ")", ")", "+", "0.5", ")", "/", "factor", ")", "\n", "for", "i", "in", "range", "(", "size", ")", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "k", "=", "k", "/", "torch", ".", "sum", "(", "k", ")", "\n", "# k = torch.einsum('i,j->ij', (k, k))", "\n", "k1", "=", "torch", ".", "reshape", "(", "k", ",", "shape", "=", "(", "1", ",", "1", ",", "size", ",", "1", ")", ")", "\n", "self", ".", "k1", "=", "torch", ".", "cat", "(", "[", "k1", ",", "k1", ",", "k1", "]", ",", "dim", "=", "0", ")", "\n", "k2", "=", "torch", ".", "reshape", "(", "k", ",", "shape", "=", "(", "1", ",", "1", ",", "1", ",", "size", ")", ")", "\n", "self", ".", "k2", "=", "torch", ".", "cat", "(", "[", "k2", ",", "k2", ",", "k2", "]", ",", "dim", "=", "0", ")", "\n", "self", ".", "cuda", "=", "'.cuda'", "if", "cuda", "else", "''", "\n", "self", ".", "padding", "=", "padding", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.bicubic.BicubicDownSample.forward": [[37, 76], ["max", "max", "bicubic.BicubicDownSample.k1.type", "bicubic.BicubicDownSample.k2.type", "torch.nn.functional.pad", "torch.nn.functional.conv2d", "torch.nn.functional.pad", "torch.nn.functional.conv2d", "torch.transpose", "torch.clamp", "torch.clamp", "torch.transpose", "torch.transpose.type", "torch.transpose", "torch.round", "torch.round", "torch.transpose"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "nhwc", "=", "False", ",", "clip_round", "=", "False", ",", "byte_output", "=", "False", ")", ":", "\n", "# x = torch.from_numpy(x).type('torch.FloatTensor')", "\n", "        ", "filter_height", "=", "self", ".", "factor", "*", "4", "\n", "filter_width", "=", "self", ".", "factor", "*", "4", "\n", "stride", "=", "self", ".", "factor", "\n", "\n", "pad_along_height", "=", "max", "(", "filter_height", "-", "stride", ",", "0", ")", "\n", "pad_along_width", "=", "max", "(", "filter_width", "-", "stride", ",", "0", ")", "\n", "filters1", "=", "self", ".", "k1", ".", "type", "(", "'torch{}.FloatTensor'", ".", "format", "(", "self", ".", "cuda", ")", ")", "\n", "filters2", "=", "self", ".", "k2", ".", "type", "(", "'torch{}.FloatTensor'", ".", "format", "(", "self", ".", "cuda", ")", ")", "\n", "\n", "# compute actual padding values for each side", "\n", "pad_top", "=", "pad_along_height", "//", "2", "\n", "pad_bottom", "=", "pad_along_height", "-", "pad_top", "\n", "pad_left", "=", "pad_along_width", "//", "2", "\n", "pad_right", "=", "pad_along_width", "-", "pad_left", "\n", "\n", "# apply mirror padding", "\n", "if", "nhwc", ":", "\n", "            ", "x", "=", "torch", ".", "transpose", "(", "torch", ".", "transpose", "(", "\n", "x", ",", "2", ",", "3", ")", ",", "1", ",", "2", ")", "# NHWC to NCHW", "\n", "\n", "# downscaling performed by 1-d convolution", "\n", "", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "pad_top", ",", "pad_bottom", ")", ",", "self", ".", "padding", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "filters1", ",", "stride", "=", "(", "stride", ",", "1", ")", ",", "groups", "=", "3", ")", "\n", "if", "clip_round", ":", "\n", "            ", "x", "=", "torch", ".", "clamp", "(", "torch", ".", "round", "(", "x", ")", ",", "0.0", ",", "255.", ")", "\n", "\n", "", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "pad_left", ",", "pad_right", ",", "0", ",", "0", ")", ",", "self", ".", "padding", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "filters2", ",", "stride", "=", "(", "1", ",", "stride", ")", ",", "groups", "=", "3", ")", "\n", "if", "clip_round", ":", "\n", "            ", "x", "=", "torch", ".", "clamp", "(", "torch", ".", "round", "(", "x", ")", ",", "0.0", ",", "255.", ")", "\n", "\n", "", "if", "nhwc", ":", "\n", "            ", "x", "=", "torch", ".", "transpose", "(", "torch", ".", "transpose", "(", "x", ",", "1", ",", "3", ")", ",", "1", ",", "2", ")", "\n", "", "if", "byte_output", ":", "\n", "            ", "return", "x", ".", "type", "(", "'torch.ByteTensor'", ".", "format", "(", "self", ".", "cuda", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.adamian98_pulse.None.shape_predictor.get_landmark": [[32, 47], ["dlib.get_frontal_face_detector", "dlib.load_rgb_image", "dlib.get_frontal_face_detector.", "pathlib.Path", "print", "predictor", "numpy.array", "enumerate", "len", "shape.parts"], "function", ["None"], ["def", "get_landmark", "(", "filepath", ",", "predictor", ")", ":", "\n", "    ", "\"\"\"get landmark with dlib\n    :return: np.array shape=(68, 2)\n    \"\"\"", "\n", "detector", "=", "dlib", ".", "get_frontal_face_detector", "(", ")", "\n", "\n", "img", "=", "dlib", ".", "load_rgb_image", "(", "filepath", ")", "\n", "dets", "=", "detector", "(", "img", ",", "1", ")", "\n", "filepath", "=", "Path", "(", "filepath", ")", "\n", "print", "(", "f\"{filepath.name}: Number of faces detected: {len(dets)}\"", ")", "\n", "shapes", "=", "[", "predictor", "(", "img", ",", "d", ")", "for", "k", ",", "d", "in", "enumerate", "(", "dets", ")", "]", "\n", "\n", "lms", "=", "[", "np", ".", "array", "(", "[", "[", "tt", ".", "x", ",", "tt", ".", "y", "]", "for", "tt", "in", "shape", ".", "parts", "(", ")", "]", ")", "for", "shape", "in", "shapes", "]", "\n", "\n", "return", "lms", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.shape_predictor.align_face": [[49, 139], ["shape_predictor.get_landmark", "numpy.mean", "numpy.mean", "numpy.hypot", "max", "numpy.stack", "PIL.Image.open", "PIL.Image.open", "int", "max", "img.resize.transform", "imgs.append", "numpy.flipud", "numpy.hypot", "numpy.floor", "img.resize.resize", "int", "int", "int", "int", "int", "max", "max", "min", "min", "img.resize.crop", "int", "int", "int", "int", "max", "max", "max", "max", "numpy.maximum", "numpy.pad", "numpy.maximum", "PIL.Image.fromarray", "PIL.Image.fromarray", "img.resize.resize", "numpy.flipud", "numpy.hypot", "numpy.hypot", "int", "int", "numpy.rint", "numpy.floor", "numpy.floor", "numpy.ceil", "numpy.ceil", "numpy.floor", "numpy.floor", "numpy.ceil", "numpy.ceil", "max", "int", "numpy.float32", "numpy.clip", "numpy.clip", "numpy.uint8", "numpy.rint", "numpy.rint", "min", "min", "max", "max", "min", "min", "max", "max", "numpy.rint", "numpy.minimum", "numpy.minimum", "scipy.ndimage.gaussian_filter", "scipy.ndimage.gaussian_filter", "numpy.median", "numpy.clip", "numpy.rint", "float", "float", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32"], "function", ["home.repos.pwc.inspect_result.adamian98_pulse.None.shape_predictor.get_landmark"], ["", "def", "align_face", "(", "filepath", ",", "predictor", ")", ":", "\n", "    ", "\"\"\"\n    :param filepath: str\n    :return: list of PIL Images\n    \"\"\"", "\n", "\n", "lms", "=", "get_landmark", "(", "filepath", ",", "predictor", ")", "\n", "imgs", "=", "[", "]", "\n", "for", "lm", "in", "lms", ":", "\n", "        ", "lm_chin", "=", "lm", "[", "0", ":", "17", "]", "# left-right", "\n", "lm_eyebrow_left", "=", "lm", "[", "17", ":", "22", "]", "# left-right", "\n", "lm_eyebrow_right", "=", "lm", "[", "22", ":", "27", "]", "# left-right", "\n", "lm_nose", "=", "lm", "[", "27", ":", "31", "]", "# top-down", "\n", "lm_nostrils", "=", "lm", "[", "31", ":", "36", "]", "# top-down", "\n", "lm_eye_left", "=", "lm", "[", "36", ":", "42", "]", "# left-clockwise", "\n", "lm_eye_right", "=", "lm", "[", "42", ":", "48", "]", "# left-clockwise", "\n", "lm_mouth_outer", "=", "lm", "[", "48", ":", "60", "]", "# left-clockwise", "\n", "lm_mouth_inner", "=", "lm", "[", "60", ":", "68", "]", "# left-clockwise", "\n", "\n", "# Calculate auxiliary vectors.", "\n", "eye_left", "=", "np", ".", "mean", "(", "lm_eye_left", ",", "axis", "=", "0", ")", "\n", "eye_right", "=", "np", ".", "mean", "(", "lm_eye_right", ",", "axis", "=", "0", ")", "\n", "eye_avg", "=", "(", "eye_left", "+", "eye_right", ")", "*", "0.5", "\n", "eye_to_eye", "=", "eye_right", "-", "eye_left", "\n", "mouth_left", "=", "lm_mouth_outer", "[", "0", "]", "\n", "mouth_right", "=", "lm_mouth_outer", "[", "6", "]", "\n", "mouth_avg", "=", "(", "mouth_left", "+", "mouth_right", ")", "*", "0.5", "\n", "eye_to_mouth", "=", "mouth_avg", "-", "eye_avg", "\n", "\n", "# Choose oriented crop rectangle.", "\n", "x", "=", "eye_to_eye", "-", "np", ".", "flipud", "(", "eye_to_mouth", ")", "*", "[", "-", "1", ",", "1", "]", "\n", "x", "/=", "np", ".", "hypot", "(", "*", "x", ")", "\n", "x", "*=", "max", "(", "np", ".", "hypot", "(", "*", "eye_to_eye", ")", "*", "2.0", ",", "np", ".", "hypot", "(", "*", "eye_to_mouth", ")", "*", "1.8", ")", "\n", "y", "=", "np", ".", "flipud", "(", "x", ")", "*", "[", "-", "1", ",", "1", "]", "\n", "c", "=", "eye_avg", "+", "eye_to_mouth", "*", "0.1", "\n", "quad", "=", "np", ".", "stack", "(", "[", "c", "-", "x", "-", "y", ",", "c", "-", "x", "+", "y", ",", "c", "+", "x", "+", "y", ",", "c", "+", "x", "-", "y", "]", ")", "\n", "qsize", "=", "np", ".", "hypot", "(", "*", "x", ")", "*", "2", "\n", "\n", "# read image", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "filepath", ")", "\n", "\n", "output_size", "=", "1024", "\n", "transform_size", "=", "4096", "\n", "enable_padding", "=", "True", "\n", "\n", "# Shrink.", "\n", "shrink", "=", "int", "(", "np", ".", "floor", "(", "qsize", "/", "output_size", "*", "0.5", ")", ")", "\n", "if", "shrink", ">", "1", ":", "\n", "            ", "rsize", "=", "(", "int", "(", "np", ".", "rint", "(", "float", "(", "img", ".", "size", "[", "0", "]", ")", "/", "shrink", ")", ")", ",", "int", "(", "np", ".", "rint", "(", "float", "(", "img", ".", "size", "[", "1", "]", ")", "/", "shrink", ")", ")", ")", "\n", "img", "=", "img", ".", "resize", "(", "rsize", ",", "PIL", ".", "Image", ".", "ANTIALIAS", ")", "\n", "quad", "/=", "shrink", "\n", "qsize", "/=", "shrink", "\n", "\n", "# Crop.", "\n", "", "border", "=", "max", "(", "int", "(", "np", ".", "rint", "(", "qsize", "*", "0.1", ")", ")", ",", "3", ")", "\n", "crop", "=", "(", "int", "(", "np", ".", "floor", "(", "min", "(", "quad", "[", ":", ",", "0", "]", ")", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "min", "(", "quad", "[", ":", ",", "1", "]", ")", ")", ")", ",", "int", "(", "np", ".", "ceil", "(", "max", "(", "quad", "[", ":", ",", "0", "]", ")", ")", ")", ",", "\n", "int", "(", "np", ".", "ceil", "(", "max", "(", "quad", "[", ":", ",", "1", "]", ")", ")", ")", ")", "\n", "crop", "=", "(", "max", "(", "crop", "[", "0", "]", "-", "border", ",", "0", ")", ",", "max", "(", "crop", "[", "1", "]", "-", "border", ",", "0", ")", ",", "min", "(", "crop", "[", "2", "]", "+", "border", ",", "img", ".", "size", "[", "0", "]", ")", ",", "\n", "min", "(", "crop", "[", "3", "]", "+", "border", ",", "img", ".", "size", "[", "1", "]", ")", ")", "\n", "if", "crop", "[", "2", "]", "-", "crop", "[", "0", "]", "<", "img", ".", "size", "[", "0", "]", "or", "crop", "[", "3", "]", "-", "crop", "[", "1", "]", "<", "img", ".", "size", "[", "1", "]", ":", "\n", "            ", "img", "=", "img", ".", "crop", "(", "crop", ")", "\n", "quad", "-=", "crop", "[", "0", ":", "2", "]", "\n", "\n", "# Pad.", "\n", "", "pad", "=", "(", "int", "(", "np", ".", "floor", "(", "min", "(", "quad", "[", ":", ",", "0", "]", ")", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "min", "(", "quad", "[", ":", ",", "1", "]", ")", ")", ")", ",", "int", "(", "np", ".", "ceil", "(", "max", "(", "quad", "[", ":", ",", "0", "]", ")", ")", ")", ",", "\n", "int", "(", "np", ".", "ceil", "(", "max", "(", "quad", "[", ":", ",", "1", "]", ")", ")", ")", ")", "\n", "pad", "=", "(", "max", "(", "-", "pad", "[", "0", "]", "+", "border", ",", "0", ")", ",", "max", "(", "-", "pad", "[", "1", "]", "+", "border", ",", "0", ")", ",", "max", "(", "pad", "[", "2", "]", "-", "img", ".", "size", "[", "0", "]", "+", "border", ",", "0", ")", ",", "\n", "max", "(", "pad", "[", "3", "]", "-", "img", ".", "size", "[", "1", "]", "+", "border", ",", "0", ")", ")", "\n", "if", "enable_padding", "and", "max", "(", "pad", ")", ">", "border", "-", "4", ":", "\n", "            ", "pad", "=", "np", ".", "maximum", "(", "pad", ",", "int", "(", "np", ".", "rint", "(", "qsize", "*", "0.3", ")", ")", ")", "\n", "img", "=", "np", ".", "pad", "(", "np", ".", "float32", "(", "img", ")", ",", "(", "(", "pad", "[", "1", "]", ",", "pad", "[", "3", "]", ")", ",", "(", "pad", "[", "0", "]", ",", "pad", "[", "2", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'reflect'", ")", "\n", "h", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "y", ",", "x", ",", "_", "=", "np", ".", "ogrid", "[", ":", "h", ",", ":", "w", ",", ":", "1", "]", "\n", "mask", "=", "np", ".", "maximum", "(", "1.0", "-", "np", ".", "minimum", "(", "np", ".", "float32", "(", "x", ")", "/", "pad", "[", "0", "]", ",", "np", ".", "float32", "(", "w", "-", "1", "-", "x", ")", "/", "pad", "[", "2", "]", ")", ",", "\n", "1.0", "-", "np", ".", "minimum", "(", "np", ".", "float32", "(", "y", ")", "/", "pad", "[", "1", "]", ",", "np", ".", "float32", "(", "h", "-", "1", "-", "y", ")", "/", "pad", "[", "3", "]", ")", ")", "\n", "blur", "=", "qsize", "*", "0.02", "\n", "img", "+=", "(", "scipy", ".", "ndimage", ".", "gaussian_filter", "(", "img", ",", "[", "blur", ",", "blur", ",", "0", "]", ")", "-", "img", ")", "*", "np", ".", "clip", "(", "mask", "*", "3.0", "+", "1.0", ",", "0.0", ",", "1.0", ")", "\n", "img", "+=", "(", "np", ".", "median", "(", "img", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "-", "img", ")", "*", "np", ".", "clip", "(", "mask", ",", "0.0", ",", "1.0", ")", "\n", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "np", ".", "clip", "(", "np", ".", "rint", "(", "img", ")", ",", "0", ",", "255", ")", ")", ",", "'RGB'", ")", "\n", "quad", "+=", "pad", "[", ":", "2", "]", "\n", "\n", "# Transform.", "\n", "", "img", "=", "img", ".", "transform", "(", "(", "transform_size", ",", "transform_size", ")", ",", "PIL", ".", "Image", ".", "QUAD", ",", "(", "quad", "+", "0.5", ")", ".", "flatten", "(", ")", ",", "\n", "PIL", ".", "Image", ".", "BILINEAR", ")", "\n", "if", "output_size", "<", "transform_size", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "(", "output_size", ",", "output_size", ")", ",", "PIL", ".", "Image", ".", "ANTIALIAS", ")", "\n", "\n", "# Save aligned image.", "\n", "", "imgs", ".", "append", "(", "img", ")", "\n", "", "return", "imgs", "", "", ""]], "home.repos.pwc.inspect_result.adamian98_pulse.None.run.Images.__init__": [[11, 15], ["pathlib.Path", "list", "run.Images.root_path.glob"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "duplicates", ")", ":", "\n", "        ", "self", ".", "root_path", "=", "Path", "(", "root_dir", ")", "\n", "self", ".", "image_list", "=", "list", "(", "self", ".", "root_path", ".", "glob", "(", "\"*.png\"", ")", ")", "\n", "self", ".", "duplicates", "=", "duplicates", "# Number of times to duplicate the image in the dataset to produce multiple HR images", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.run.Images.__len__": [[16, 18], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "duplicates", "*", "len", "(", "self", ".", "image_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.run.Images.__getitem__": [[19, 26], ["torchvision.transforms.ToTensor", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_path", "=", "self", ".", "image_list", "[", "idx", "//", "self", ".", "duplicates", "]", "\n", "image", "=", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "(", "Image", ".", "open", "(", "img_path", ")", ")", "\n", "if", "(", "self", ".", "duplicates", "==", "1", ")", ":", "\n", "            ", "return", "image", ",", "img_path", ".", "stem", "\n", "", "else", ":", "\n", "            ", "return", "image", ",", "img_path", ".", "stem", "+", "f\"_{(idx % self.duplicates)+1}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.PULSE.PULSE.__init__": [[14, 48], ["super().__init__", "stylegan.G_synthesis().cuda", "pathlib.Path", "pathlib.Path.mkdir", "PULSE.PULSE.synthesis.parameters", "torch.nn.LeakyReLU", "pathlib.Path().exists", "print", "drive.open_url", "PULSE.PULSE.synthesis.load_state_dict", "torch.load", "stylegan.G_mapping().cuda", "stylegan.G_synthesis", "torch.load", "pathlib.Path", "print", "drive.open_url", "stylegan.G_mapping().cuda.load_state_dict", "print", "torch.no_grad", "torch.manual_seed", "torch.randn", "torch.save", "stylegan.G_mapping", "torch.load", "torch.nn.LeakyReLU", "stylegan.G_mapping().cuda.", "latent_out.mean", "latent_out.std", "print"], "methods", ["home.repos.pwc.inspect_result.adamian98_pulse.None.PULSE.PULSE.__init__", "home.repos.pwc.inspect_result.adamian98_pulse.None.drive.open_url", "home.repos.pwc.inspect_result.adamian98_pulse.None.drive.open_url"], ["    ", "def", "__init__", "(", "self", ",", "cache_dir", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "super", "(", "PULSE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "synthesis", "=", "G_synthesis", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "cache_dir", "=", "Path", "(", "cache_dir", ")", "\n", "cache_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "if", "self", ".", "verbose", ":", "print", "(", "\"Loading Synthesis Network\"", ")", "\n", "with", "open_url", "(", "\"https://drive.google.com/uc?id=1TCViX1YpQyRsklTVYEJwdbmK91vklCo8\"", ",", "cache_dir", "=", "cache_dir", ",", "verbose", "=", "verbose", ")", "as", "f", ":", "\n", "            ", "self", ".", "synthesis", ".", "load_state_dict", "(", "torch", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "synthesis", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "lrelu", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", "\n", "\n", "if", "Path", "(", "\"gaussian_fit.pt\"", ")", ".", "exists", "(", ")", ":", "\n", "            ", "self", ".", "gaussian_fit", "=", "torch", ".", "load", "(", "\"gaussian_fit.pt\"", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "print", "(", "\"\\tLoading Mapping Network\"", ")", "\n", "mapping", "=", "G_mapping", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "with", "open_url", "(", "\"https://drive.google.com/uc?id=14R6iHGf5iuVx3DMNsACAl7eBr7Vdpd0k\"", ",", "cache_dir", "=", "cache_dir", ",", "verbose", "=", "verbose", ")", "as", "f", ":", "\n", "                    ", "mapping", ".", "load_state_dict", "(", "torch", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "if", "self", ".", "verbose", ":", "print", "(", "\"\\tRunning Mapping Network\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "torch", ".", "manual_seed", "(", "0", ")", "\n", "latent", "=", "torch", ".", "randn", "(", "(", "1000000", ",", "512", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cuda\"", ")", "\n", "latent_out", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "5", ")", "(", "mapping", "(", "latent", ")", ")", "\n", "self", ".", "gaussian_fit", "=", "{", "\"mean\"", ":", "latent_out", ".", "mean", "(", "0", ")", ",", "\"std\"", ":", "latent_out", ".", "std", "(", "0", ")", "}", "\n", "torch", ".", "save", "(", "self", ".", "gaussian_fit", ",", "\"gaussian_fit.pt\"", ")", "\n", "if", "self", ".", "verbose", ":", "print", "(", "\"\\tSaved \\\"gaussian_fit.pt\\\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adamian98_pulse.None.PULSE.PULSE.forward": [[49, 180], ["range", "SphericalOptimizer.SphericalOptimizer.SphericalOptimizer", "torch.optim.lr_scheduler.LambdaLR", "loss.LossBuilder().cuda", "time.time", "range", "torch.manual_seed", "torch.cuda.manual_seed", "torch.randn", "torch.randn", "noise.append", "functools.partial", "print", "SphericalOptimizer.SphericalOptimizer.SphericalOptimizer.opt.zero_grad", "PULSE.PULSE.lrelu", "loss.LossBuilder().cuda.", "loss.backward", "SphericalOptimizer.SphericalOptimizer.SphericalOptimizer.step", "torch.optim.lr_scheduler.LambdaLR.step", "time.time", "print", "print", "torch.zeros", "loss.LossBuilder", "torch.randn.expand", "gen_im.clone", "torch.randn", "PULSE.PULSE.synthesis", "gen_im.clone().cpu().detach().clamp", "loss.LossBuilder().cuda.D().cpu().detach().clamp", "int", "torch.randn", "Exception", "gen_im.clone.cpu().detach().clamp", "loss.LossBuilder().cuda.D().cpu().detach().clamp", "bad_noise_layers.split", "noise_vars.append", "gen_im.clone().cpu().detach", "loss.LossBuilder().cuda.D().cpu().detach", "loss_dict.items", "gen_im.clone.cpu().detach", "loss.LossBuilder().cuda.D().cpu().detach", "numpy.abs", "gen_im.clone().cpu", "loss.LossBuilder().cuda.D().cpu", "numpy.abs", "gen_im.clone.cpu", "loss.LossBuilder().cuda.D().cpu", "gen_im.clone", "loss.LossBuilder().cuda.D", "loss.LossBuilder().cuda.D"], "methods", ["home.repos.pwc.inspect_result.adamian98_pulse.None.SphericalOptimizer.SphericalOptimizer.step", "home.repos.pwc.inspect_result.adamian98_pulse.None.SphericalOptimizer.SphericalOptimizer.step"], ["", "", "", "def", "forward", "(", "self", ",", "ref_im", ",", "\n", "seed", ",", "\n", "loss_str", ",", "\n", "eps", ",", "\n", "noise_type", ",", "\n", "num_trainable_noise_layers", ",", "\n", "tile_latent", ",", "\n", "bad_noise_layers", ",", "\n", "opt_name", ",", "\n", "learning_rate", ",", "\n", "steps", ",", "\n", "lr_schedule", ",", "\n", "save_intermediate", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "seed", ":", "\n", "            ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "", "batch_size", "=", "ref_im", ".", "shape", "[", "0", "]", "\n", "\n", "# Generate latent tensor", "\n", "if", "(", "tile_latent", ")", ":", "\n", "            ", "latent", "=", "torch", ".", "randn", "(", "\n", "(", "batch_size", ",", "1", ",", "512", ")", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "True", ",", "device", "=", "'cuda'", ")", "\n", "", "else", ":", "\n", "            ", "latent", "=", "torch", ".", "randn", "(", "\n", "(", "batch_size", ",", "18", ",", "512", ")", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "True", ",", "device", "=", "'cuda'", ")", "\n", "\n", "# Generate list of noise tensors", "\n", "", "noise", "=", "[", "]", "# stores all of the noise tensors", "\n", "noise_vars", "=", "[", "]", "# stores the noise tensors that we want to optimize on", "\n", "\n", "for", "i", "in", "range", "(", "18", ")", ":", "\n", "# dimension of the ith noise tensor", "\n", "            ", "res", "=", "(", "batch_size", ",", "1", ",", "2", "**", "(", "i", "//", "2", "+", "2", ")", ",", "2", "**", "(", "i", "//", "2", "+", "2", ")", ")", "\n", "\n", "if", "(", "noise_type", "==", "'zero'", "or", "i", "in", "[", "int", "(", "layer", ")", "for", "layer", "in", "bad_noise_layers", ".", "split", "(", "'.'", ")", "]", ")", ":", "\n", "                ", "new_noise", "=", "torch", ".", "zeros", "(", "res", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "'cuda'", ")", "\n", "new_noise", ".", "requires_grad", "=", "False", "\n", "", "elif", "(", "noise_type", "==", "'fixed'", ")", ":", "\n", "                ", "new_noise", "=", "torch", ".", "randn", "(", "res", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "'cuda'", ")", "\n", "new_noise", ".", "requires_grad", "=", "False", "\n", "", "elif", "(", "noise_type", "==", "'trainable'", ")", ":", "\n", "                ", "new_noise", "=", "torch", ".", "randn", "(", "res", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "'cuda'", ")", "\n", "if", "(", "i", "<", "num_trainable_noise_layers", ")", ":", "\n", "                    ", "new_noise", ".", "requires_grad", "=", "True", "\n", "noise_vars", ".", "append", "(", "new_noise", ")", "\n", "", "else", ":", "\n", "                    ", "new_noise", ".", "requires_grad", "=", "False", "\n", "", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"unknown noise type\"", ")", "\n", "\n", "", "noise", ".", "append", "(", "new_noise", ")", "\n", "\n", "", "var_list", "=", "[", "latent", "]", "+", "noise_vars", "\n", "\n", "opt_dict", "=", "{", "\n", "'sgd'", ":", "torch", ".", "optim", ".", "SGD", ",", "\n", "'adam'", ":", "torch", ".", "optim", ".", "Adam", ",", "\n", "'sgdm'", ":", "partial", "(", "torch", ".", "optim", ".", "SGD", ",", "momentum", "=", "0.9", ")", ",", "\n", "'adamax'", ":", "torch", ".", "optim", ".", "Adamax", "\n", "}", "\n", "opt_func", "=", "opt_dict", "[", "opt_name", "]", "\n", "opt", "=", "SphericalOptimizer", "(", "opt_func", ",", "var_list", ",", "lr", "=", "learning_rate", ")", "\n", "\n", "schedule_dict", "=", "{", "\n", "'fixed'", ":", "lambda", "x", ":", "1", ",", "\n", "'linear1cycle'", ":", "lambda", "x", ":", "(", "9", "*", "(", "1", "-", "np", ".", "abs", "(", "x", "/", "steps", "-", "1", "/", "2", ")", "*", "2", ")", "+", "1", ")", "/", "10", ",", "\n", "'linear1cycledrop'", ":", "lambda", "x", ":", "(", "9", "*", "(", "1", "-", "np", ".", "abs", "(", "x", "/", "(", "0.9", "*", "steps", ")", "-", "1", "/", "2", ")", "*", "2", ")", "+", "1", ")", "/", "10", "if", "x", "<", "0.9", "*", "steps", "else", "1", "/", "10", "+", "(", "x", "-", "0.9", "*", "steps", ")", "/", "(", "0.1", "*", "steps", ")", "*", "(", "1", "/", "1000", "-", "1", "/", "10", ")", ",", "\n", "}", "\n", "schedule_func", "=", "schedule_dict", "[", "lr_schedule", "]", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "opt", ".", "opt", ",", "schedule_func", ")", "\n", "\n", "loss_builder", "=", "LossBuilder", "(", "ref_im", ",", "loss_str", ",", "eps", ")", ".", "cuda", "(", ")", "\n", "\n", "min_loss", "=", "np", ".", "inf", "\n", "min_l2", "=", "np", ".", "inf", "\n", "best_summary", "=", "\"\"", "\n", "start_t", "=", "time", ".", "time", "(", ")", "\n", "gen_im", "=", "None", "\n", "\n", "\n", "if", "self", ".", "verbose", ":", "print", "(", "\"Optimizing\"", ")", "\n", "for", "j", "in", "range", "(", "steps", ")", ":", "\n", "            ", "opt", ".", "opt", ".", "zero_grad", "(", ")", "\n", "\n", "# Duplicate latent in case tile_latent = True", "\n", "if", "(", "tile_latent", ")", ":", "\n", "                ", "latent_in", "=", "latent", ".", "expand", "(", "-", "1", ",", "18", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "latent_in", "=", "latent", "\n", "\n", "# Apply learned linear mapping to match latent distribution to that of the mapping network", "\n", "", "latent_in", "=", "self", ".", "lrelu", "(", "latent_in", "*", "self", ".", "gaussian_fit", "[", "\"std\"", "]", "+", "self", ".", "gaussian_fit", "[", "\"mean\"", "]", ")", "\n", "\n", "# Normalize image to [0,1] instead of [-1,1]", "\n", "gen_im", "=", "(", "self", ".", "synthesis", "(", "latent_in", ",", "noise", ")", "+", "1", ")", "/", "2", "\n", "\n", "# Calculate Losses", "\n", "loss", ",", "loss_dict", "=", "loss_builder", "(", "latent_in", ",", "gen_im", ")", "\n", "loss_dict", "[", "'TOTAL'", "]", "=", "loss", "\n", "\n", "# Save best summary for log", "\n", "if", "(", "loss", "<", "min_loss", ")", ":", "\n", "                ", "min_loss", "=", "loss", "\n", "best_summary", "=", "f'BEST ({j+1}) | '", "+", "' | '", ".", "join", "(", "\n", "[", "f'{x}: {y:.4f}'", "for", "x", ",", "y", "in", "loss_dict", ".", "items", "(", ")", "]", ")", "\n", "best_im", "=", "gen_im", ".", "clone", "(", ")", "\n", "\n", "", "loss_l2", "=", "loss_dict", "[", "'L2'", "]", "\n", "\n", "if", "(", "loss_l2", "<", "min_l2", ")", ":", "\n", "                ", "min_l2", "=", "loss_l2", "\n", "\n", "# Save intermediate HR and LR images", "\n", "", "if", "(", "save_intermediate", ")", ":", "\n", "                ", "yield", "(", "best_im", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "clamp", "(", "0", ",", "1", ")", ",", "loss_builder", ".", "D", "(", "best_im", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "clamp", "(", "0", ",", "1", ")", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "total_t", "=", "time", ".", "time", "(", ")", "-", "start_t", "\n", "current_info", "=", "f' | time: {total_t:.1f} | it/s: {(j+1)/total_t:.2f} | batchsize: {batch_size}'", "\n", "if", "self", ".", "verbose", ":", "print", "(", "best_summary", "+", "current_info", ")", "\n", "if", "(", "min_l2", "<=", "eps", ")", ":", "\n", "            ", "yield", "(", "gen_im", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "clamp", "(", "0", ",", "1", ")", ",", "loss_builder", ".", "D", "(", "best_im", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "clamp", "(", "0", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Could not find a face that downscales correctly within epsilon\"", ")", "\n", "", "", "", ""]]}