{"home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.train_mu_et.Tsharpen": [[23, 29], ["torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.div", "torch.div", "torch.div", "torch.div", "torch.sum.view"], "function", ["None"], ["def", "Tsharpen", "(", "input", ")", ":", "\n", "    ", "lamda", "=", "0.5", "\n", "sharp", "=", "torch", ".", "pow", "(", "input", ",", "1", "/", "lamda", ")", "\n", "sharp2", "=", "torch", ".", "sum", "(", "sharp", ",", "1", ")", "\n", "result", "=", "torch", ".", "div", "(", "sharp", ",", "sharp2", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.train_mu_et.train": [[30, 93], ["model.train", "len", "len", "range", "iter.next", "iter.next", "data_target.cuda.cuda", "optimizer.zero_grad", "optimizer_ad.zero_grad", "model", "loss_com.chosen_loss_c", "optimizer.step", "optimizer.zero_grad", "iter", "iter", "data_source.cuda", "label_source.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Softmax", "torch.sum.backward", "loss_func.DANN.backward", "optimizer.step", "optimizer_ad.step", "print", "output.narrow", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.min", "torch.min", "torch.min", "torch.min", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.backward", "torch.sum.backward", "train_mu_et.Tsharpen", "loss.Entropy", "loss.CDAN", "data_source.size", "network.calc_coeff", "loss.CDAN", "torch.sum.item", "torch.min", "torch.min", "torch.min", "torch.min", "loss_vector.view", "torch.zeros().view().to", "torch.zeros().view().to", "torch.zeros().view().to", "torch.zeros().view().to", "loss.DANN", "ValueError", "torch.zeros().view", "torch.zeros().view", "torch.zeros().view", "torch.zeros().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.train", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss_com.chosen_loss_c", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.train_um_et.Tsharpen", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.Entropy", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.CDAN", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.network.calc_coeff", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.CDAN", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.DANN"], ["", "def", "train", "(", "args", ",", "model", ",", "ad_net", ",", "random_layer", ",", "train_loader", ",", "train_loader1", ",", "optimizer", ",", "optimizer_ad", ",", "epoch", ",", "start_epoch", ",", "method", ",", "ccp", ")", ":", "\n", "    ", "cl_method", "=", "'ga'", "#choices=['ga', 'nn', 'free', 'pc', 'forward']", "\n", "meta_method", "=", "'free'", "if", "cl_method", "==", "'ga'", "else", "cl_method", "\n", "K", "=", "10", "\n", "\n", "model", ".", "train", "(", ")", "\n", "len_source", "=", "len", "(", "train_loader", ")", "\n", "len_target", "=", "len", "(", "train_loader1", ")", "\n", "if", "len_source", ">", "len_target", ":", "\n", "        ", "num_iter", "=", "len_source", "\n", "", "else", ":", "\n", "        ", "num_iter", "=", "len_target", "\n", "\n", "", "for", "batch_idx", "in", "range", "(", "num_iter", ")", ":", "\n", "        ", "if", "batch_idx", "%", "len_source", "==", "0", ":", "\n", "            ", "iter_source", "=", "iter", "(", "train_loader", ")", "\n", "", "if", "batch_idx", "%", "len_target", "==", "0", ":", "\n", "            ", "iter_target", "=", "iter", "(", "train_loader1", ")", "\n", "", "data_source", ",", "label_source", "=", "iter_source", ".", "next", "(", ")", "\n", "data_source", ",", "label_source", "=", "data_source", ".", "cuda", "(", ")", ",", "label_source", ".", "cuda", "(", ")", "\n", "data_target", ",", "label_target", "=", "iter_target", ".", "next", "(", ")", "\n", "data_target", "=", "data_target", ".", "cuda", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "optimizer_ad", ".", "zero_grad", "(", ")", "\n", "feature", ",", "output", "=", "model", "(", "torch", ".", "cat", "(", "(", "data_source", ",", "data_target", ")", ",", "0", ")", ")", "\n", "#err_s_label, loss_vector = non_negative_loss (f=output.narrow(0, 0, data_source.size(0)), K=10, labels=label_source, ccp=ccp,beta=0)", "\n", "loss", ",", "loss_vector", "=", "chosen_loss_c", "(", "f", "=", "output", ".", "narrow", "(", "0", ",", "0", ",", "data_source", ".", "size", "(", "0", ")", ")", ",", "K", "=", "K", ",", "labels", "=", "label_source", ",", "ccp", "=", "ccp", ",", "meta_method", "=", "meta_method", ")", "\n", "#loss = nn.CrossEntropyLoss()(output.narrow(0, 0, data_source.size(0)), label_source)", "\n", "softmax_output", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "output", ")", "\n", "if", "cl_method", "==", "'ga'", ":", "\n", "            ", "if", "torch", ".", "min", "(", "loss_vector", ")", ".", "item", "(", ")", "<", "0", ":", "\n", "                ", "loss_vector_with_zeros", "=", "torch", ".", "cat", "(", "(", "loss_vector", ".", "view", "(", "-", "1", ",", "1", ")", ",", "torch", ".", "zeros", "(", "K", ",", "requires_grad", "=", "True", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "to", "(", "device", ")", ")", ",", "1", ")", "\n", "min_loss_vector", ",", "_", "=", "torch", ".", "min", "(", "loss_vector_with_zeros", ",", "dim", "=", "1", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "min_loss_vector", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                        ", "p", ".", "grad", "=", "-", "1", "*", "p", ".", "grad", "\n", "", "", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "epoch", ">", "start_epoch", ":", "\n", "            ", "if", "method", "==", "'CDAN-E'", ":", "\n", "                ", "softmax_output", "=", "Tsharpen", "(", "softmax_output", ")", "\n", "entropy", "=", "loss_func", ".", "Entropy", "(", "softmax_output", ")", "\n", "loss2", "=", "loss_func", ".", "CDAN", "(", "[", "feature", ",", "softmax_output", "]", ",", "ad_net", ",", "entropy", ",", "network", ".", "calc_coeff", "(", "num_iter", "*", "(", "epoch", "-", "start_epoch", ")", "+", "batch_idx", ")", ",", "random_layer", ")", "\n", "", "elif", "method", "==", "'CDAN'", ":", "\n", "                ", "loss2", "=", "loss_func", ".", "CDAN", "(", "[", "feature", ",", "softmax_output", "]", ",", "ad_net", ",", "None", ",", "None", ",", "random_layer", ")", "\n", "", "elif", "method", "==", "'DANN'", ":", "\n", "                ", "loss2", "=", "loss_func", ".", "DANN", "(", "feature", ",", "ad_net", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Method cannot be recognized.'", ")", "\n", "", "", "if", "epoch", ">", "start_epoch", ":", "\n", "            ", "loss2", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer_ad", ".", "step", "(", ")", "\n", "", "if", "(", "batch_idx", "+", "epoch", "*", "num_iter", ")", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss1: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "args", ".", "batch_size", ",", "num_iter", "*", "args", ".", "batch_size", ",", "\n", "100.", "*", "batch_idx", "/", "num_iter", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.train_mu_et.test": [[94, 110], ["model.eval", "len", "print", "model", "pred.eq().sum().item", "len", "data.cuda", "target.cuda", "output.data.cpu().max", "len", "pred.eq().sum", "len", "torch.CrossEntropyLoss", "output.data.cpu", "pred.eq", "target.data.cpu().view_as", "target.data.cpu"], "function", ["None"], ["", "", "", "def", "test", "(", "args", ",", "model", ",", "test_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "feature", ",", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "output", ",", "target", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "data", ".", "cpu", "(", ")", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "data", ".", "cpu", "(", ")", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.3f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "return", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.train_mu_et.main": [[111, 181], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "network.LeNet", "model.cuda.cuda", "network.AdversarialNetwork.cuda", "torch.SGD", "torch.SGD", "numpy.zeros", "range", "numpy.savetxt", "data_loader.data_loader", "network.RandomLayer", "network.AdversarialNetwork", "network.RandomLayer.cuda", "network.AdversarialNetwork", "model.cuda.parameters", "network.AdversarialNetwork.parameters", "train_mu_et.train", "train_mu_et.test", "train_mu_et.test", "numpy.savetxt", "data_loader.data_loader", "Exception", "model.cuda.output_num", "model.cuda.output_num"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.data_loader", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.train", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.test", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.test", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.data_loader", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.output_num", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.output_num"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'CDAN USPS MNIST'", ")", "\n", "parser", ".", "add_argument", "(", "'--method'", ",", "type", "=", "str", ",", "default", "=", "'CDAN-E'", ",", "choices", "=", "[", "'CDAN'", ",", "'CDAN-E'", ",", "'DANN'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--task'", ",", "default", "=", "'MNIST2USPS'", ",", "help", "=", "'task to perform'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "550", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "5e-5", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr2'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "metavar", "=", "'LR2'", ",", "\n", "help", "=", "'learning rate2 (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'cuda device id'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "parser", ".", "add_argument", "(", "'--random'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use random'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpu_id", "\n", "\n", "if", "args", ".", "task", "==", "'USPS2MNIST'", ":", "\n", "        ", "source_list", ",", "ordinary_train_dataset", ",", "target_list", ",", "test_list", ",", "ccp", "=", "data_loader", "(", "task", "=", "'U2M'", ")", "\n", "start_epoch", "=", "50", "\n", "decay_epoch", "=", "600", "\n", "", "elif", "args", ".", "task", "==", "'MNIST2USPS'", ":", "\n", "        ", "source_list", ",", "ordinary_train_dataset", ",", "target_list", ",", "test_list", ",", "ccp", "=", "data_loader", "(", "task", "=", "'M2U'", ")", "\n", "start_epoch", "=", "50", "\n", "decay_epoch", "=", "600", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'task cannot be recognized!'", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "source_list", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ",", "drop_last", "=", "True", ")", "\n", "train_loader1", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "target_list", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ",", "drop_last", "=", "True", ")", "\n", "o_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "ordinary_train_dataset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "test_list", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "\n", "model", "=", "network", ".", "LeNet", "(", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "class_num", "=", "10", "\n", "\n", "if", "args", ".", "random", ":", "\n", "        ", "random_layer", "=", "network", ".", "RandomLayer", "(", "[", "model", ".", "output_num", "(", ")", ",", "class_num", "]", ",", "500", ")", "\n", "ad_net", "=", "network", ".", "AdversarialNetwork", "(", "500", ",", "500", ")", "\n", "random_layer", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "random_layer", "=", "None", "\n", "ad_net", "=", "network", ".", "AdversarialNetwork", "(", "model", ".", "output_num", "(", ")", "*", "class_num", ",", "500", ")", "\n", "", "ad_net", "=", "ad_net", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "0.0005", ",", "momentum", "=", "0.9", ")", "\n", "optimizer_ad", "=", "optim", ".", "SGD", "(", "ad_net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr2", ",", "weight_decay", "=", "0.0005", ",", "momentum", "=", "0.9", ")", "\n", "\n", "save_table", "=", "np", ".", "zeros", "(", "shape", "=", "(", "args", ".", "epochs", ",", "3", ")", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "if", "epoch", "%", "decay_epoch", "==", "0", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "param_group", "[", "\"lr\"", "]", "*", "0.5", "\n", "", "", "train", "(", "args", ",", "model", ",", "ad_net", ",", "random_layer", ",", "train_loader", ",", "train_loader1", ",", "optimizer", ",", "optimizer_ad", ",", "epoch", ",", "start_epoch", ",", "args", ".", "method", ",", "ccp", ")", "\n", "acc1", "=", "test", "(", "args", ",", "model", ",", "o_train_loader", ")", "\n", "acc2", "=", "test", "(", "args", ",", "model", ",", "test_loader", ")", "\n", "save_table", "[", "epoch", "-", "1", ",", ":", "]", "=", "epoch", "-", "50", ",", "acc1", ",", "acc2", "\n", "np", ".", "savetxt", "(", "args", ".", "task", "+", "'_.txt'", ",", "save_table", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%1.3f'", ")", "\n", "", "np", ".", "savetxt", "(", "args", ".", "task", "+", "'_.txt'", ",", "save_table", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%1.3f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.loss_com.assump_free_loss": [[16, 19], ["loss_com.non_negative_loss"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss_com.non_negative_loss"], ["def", "assump_free_loss", "(", "f", ",", "K", ",", "labels", ",", "ccp", ")", ":", "\n", "    ", "\"\"\"Assumption free loss (based on Thm 1) is equivalent to non_negative_loss if the max operator's threshold is negative inf.\"\"\"", "\n", "return", "non_negative_loss", "(", "f", "=", "f", ",", "K", "=", "K", ",", "labels", "=", "labels", ",", "ccp", "=", "ccp", ",", "beta", "=", "np", ".", "inf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.loss_com.non_negative_loss": [[20, 38], ["torch.from_numpy().float().to().requires_grad_", "torch.from_numpy().float().to().requires_grad_", "torch.from_numpy().float().to().requires_grad_", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "numpy.bincount().astype", "torch.cat", "torch.cat", "torch.cat", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.log_softmax", "len", "numpy.append", "torch.mul", "torch.mul", "torch.mul", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sum().item", "torch.sum().item", "torch.sum().item", "idx.byte().view().repeat", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "numpy.bincount", "torch.zeros().to.view", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.mul", "torch.mul", "torch.mul", "labels.data.cpu", "torch.zeros().view().to", "torch.zeros().view().to", "torch.zeros().view().to", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.sum", "torch.sum", "torch.sum", "idx.byte().view", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.mean", "torch.mean", "torch.mean", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.mean", "torch.mean", "torch.mean", "torch.zeros().view", "torch.zeros().view", "torch.zeros().view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "idx.byte", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "non_negative_loss", "(", "f", ",", "K", ",", "labels", ",", "ccp", ",", "beta", ")", ":", "\n", "    ", "ccp", "=", "torch", ".", "from_numpy", "(", "ccp", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ".", "requires_grad_", "(", ")", "\n", "neglog", "=", "-", "F", ".", "log_softmax", "(", "f", ",", "dim", "=", "1", ")", "\n", "loss_vector", "=", "torch", ".", "zeros", "(", "K", ",", "requires_grad", "=", "True", ")", ".", "to", "(", "device", ")", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "idx", "=", "labels", "==", "k", "\n", "if", "torch", ".", "sum", "(", "idx", ")", ".", "item", "(", ")", ">", "0", ":", "\n", "            ", "idxs", "=", "idx", ".", "byte", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "K", ")", "\n", "neglog_k", "=", "torch", ".", "masked_select", "(", "neglog", ",", "idxs", ")", ".", "view", "(", "-", "1", ",", "K", ")", "\n", "loss_vector", "[", "k", "]", "=", "loss_vector", "[", "k", "]", "-", "(", "K", "-", "1", ")", "*", "ccp", "[", "k", "]", "*", "torch", ".", "mean", "(", "neglog_k", ",", "dim", "=", "0", ")", "[", "k", "]", "# average of k-th class loss for k-th comp class samples", "\n", "loss_vector", "=", "loss_vector", "+", "torch", ".", "mul", "(", "ccp", ",", "torch", ".", "mean", "(", "neglog_k", ",", "dim", "=", "0", ")", ")", "# only k-th in the summation of the second term inside max ", "\n", "", "", "count", "=", "np", ".", "bincount", "(", "labels", ".", "data", ".", "cpu", "(", ")", ")", ".", "astype", "(", "'float'", ")", "\n", "while", "len", "(", "count", ")", "<", "K", ":", "\n", "        ", "count", "=", "np", ".", "append", "(", "count", ",", "0", ")", "# when largest label is below K, bincount will not take care of them", "\n", "", "loss_vector_with_zeros", "=", "torch", ".", "cat", "(", "(", "loss_vector", ".", "view", "(", "-", "1", ",", "1", ")", ",", "torch", ".", "zeros", "(", "K", ",", "requires_grad", "=", "True", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "to", "(", "device", ")", "-", "beta", ")", ",", "1", ")", "\n", "max_loss_vector", ",", "_", "=", "torch", ".", "max", "(", "loss_vector_with_zeros", ",", "dim", "=", "1", ")", "\n", "final_loss", "=", "torch", ".", "sum", "(", "max_loss_vector", ")", "\n", "return", "final_loss", ",", "torch", ".", "mul", "(", "torch", ".", "from_numpy", "(", "count", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "loss_vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.loss_com.forward_loss": [[39, 47], ["torch.CrossEntropyLoss", "Q.to.to", "range", "torch.mm", "torch.mm", "torch.mm", "nn.CrossEntropyLoss.", "labels.long", "torch.ones", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "forward_loss", "(", "f", ",", "K", ",", "labels", ")", ":", "\n", "    ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "Q", "=", "torch", ".", "ones", "(", "K", ",", "K", ")", "*", "1", "/", "(", "K", "-", "1", ")", "\n", "Q", "=", "Q", ".", "to", "(", "device", ")", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "Q", "[", "k", ",", "k", "]", "=", "0", "\n", "", "q", "=", "torch", ".", "mm", "(", "f", ",", "Q", ")", "\n", "return", "criterion", "(", "q", ",", "labels", ".", "long", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.loss_com.pc_loss": [[48, 55], ["torch.Sigmoid", "f.gather().repeat", "nn.Sigmoid.", "f.gather", "labels.long().view", "len", "torch.sum", "torch.sum", "torch.sum", "labels.long"], "function", ["None"], ["", "def", "pc_loss", "(", "f", ",", "K", ",", "labels", ")", ":", "\n", "    ", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "fbar", "=", "f", ".", "gather", "(", "1", ",", "labels", ".", "long", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "repeat", "(", "1", ",", "K", ")", "\n", "loss_matrix", "=", "sigmoid", "(", "-", "1.", "*", "(", "f", "-", "fbar", ")", ")", "# multiply -1 for \"complementary\"", "\n", "M1", ",", "M2", "=", "K", "*", "(", "K", "-", "1", ")", "/", "2", ",", "K", "-", "1", "\n", "pc_loss", "=", "torch", ".", "sum", "(", "loss_matrix", ")", "*", "(", "K", "-", "1", ")", "/", "len", "(", "labels", ")", "-", "M1", "+", "M2", "\n", "return", "pc_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.loss_com.accuracy_check": [[56, 67], ["model", "sm", "torch.max", "torch.max", "torch.max", "labels.size", "labels.to", "images.to"], "function", ["None"], ["", "def", "accuracy_check", "(", "loader", ",", "model", ")", ":", "\n", "    ", "sm", "=", "F", ".", "softmax", "\n", "total", ",", "num_samples", "=", "0", ",", "0", "\n", "for", "images", ",", "labels", "in", "loader", ":", "\n", "        ", "labels", ",", "images", "=", "labels", ".", "to", "(", "device", ")", ",", "images", ".", "to", "(", "device", ")", "\n", "outputs", "=", "model", "(", "images", ")", "\n", "sm_outputs", "=", "sm", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "sm_outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "(", "predicted", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "num_samples", "+=", "labels", ".", "size", "(", "0", ")", "\n", "", "return", "100", "*", "total", "/", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.loss_com.chosen_loss_c": [[68, 79], ["loss_com.assump_free_loss", "loss_com.non_negative_loss", "loss_com.forward_loss", "loss_com.pc_loss"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss_com.assump_free_loss", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss_com.non_negative_loss", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss_com.forward_loss", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss_com.pc_loss"], ["", "def", "chosen_loss_c", "(", "f", ",", "K", ",", "labels", ",", "ccp", ",", "meta_method", ")", ":", "\n", "    ", "class_loss_torch", "=", "None", "\n", "if", "meta_method", "==", "'free'", ":", "\n", "        ", "final_loss", ",", "class_loss_torch", "=", "assump_free_loss", "(", "f", "=", "f", ",", "K", "=", "K", ",", "labels", "=", "labels", ",", "ccp", "=", "ccp", ")", "\n", "", "elif", "meta_method", "==", "'nn'", ":", "\n", "        ", "final_loss", ",", "class_loss_torch", "=", "non_negative_loss", "(", "f", "=", "f", ",", "K", "=", "K", ",", "labels", "=", "labels", ",", "beta", "=", "0", ",", "ccp", "=", "ccp", ")", "\n", "", "elif", "meta_method", "==", "'forward'", ":", "\n", "        ", "final_loss", "=", "forward_loss", "(", "f", "=", "f", ",", "K", "=", "K", ",", "labels", "=", "labels", ")", "\n", "", "elif", "meta_method", "==", "'pc'", ":", "\n", "        ", "final_loss", "=", "pc_loss", "(", "f", "=", "f", ",", "K", "=", "K", ",", "labels", "=", "labels", ")", "\n", "", "return", "final_loss", ",", "class_loss_torch", "", "", ""]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.usps.USPS.__init__": [[41, 66], ["os.path.expanduser", "usps.USPS.load_samples", "numpy.squeeze().astype", "usps.USPS.download", "usps.USPS._check_exists", "RuntimeError", "numpy.arange", "numpy.squeeze"], "methods", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.usps.USPS.load_samples", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.usps.USPS.download", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.usps.USPS._check_exists"], ["def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "\"\"\"Init USPS dataset.\"\"\"", "\n", "# init params", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "filename", "=", "\"usps_28x28.pkl\"", "\n", "self", ".", "train", "=", "train", "\n", "# Num of Train = 7438, Num ot Test 1860", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "dataset_size", "=", "None", "\n", "\n", "# download dataset.", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "", "if", "not", "self", ".", "_check_exists", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Dataset not found.\"", "+", "\n", "\" You can use download=True to download it\"", ")", "\n", "\n", "", "self", ".", "train_data", ",", "self", ".", "train_labels", "=", "self", ".", "load_samples", "(", ")", "\n", "if", "self", ".", "train", ":", "\n", "            ", "total_num_samples", "=", "self", ".", "train_labels", ".", "shape", "[", "0", "]", "\n", "indices", "=", "np", ".", "arange", "(", "total_num_samples", ")", "\n", "self", ".", "train_data", "=", "self", ".", "train_data", "[", "indices", "[", "0", ":", "self", ".", "dataset_size", "]", ",", ":", ":", "]", "\n", "self", ".", "train_labels", "=", "self", ".", "train_labels", "[", "indices", "[", "0", ":", "self", ".", "dataset_size", "]", "]", "\n", "", "self", ".", "train_data", "*=", "255.0", "\n", "self", ".", "train_data", "=", "np", ".", "squeeze", "(", "self", ".", "train_data", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.usps.USPS.__getitem__": [[67, 80], ["PIL.Image.fromarray", "usps.USPS.copy", "usps.USPS.transform", "label.astype"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Get images and target for data loader.\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "label", "=", "self", ".", "train_data", "[", "index", "]", ",", "self", ".", "train_labels", "[", "index", "]", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "'L'", ")", "\n", "img", "=", "img", ".", "copy", "(", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "label", ".", "astype", "(", "\"int64\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.usps.USPS.__len__": [[81, 84], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return size of dataset.\"\"\"", "\n", "return", "len", "(", "self", ".", "train_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.usps.USPS._check_exists": [[85, 88], ["os.path.exists", "os.path.join"], "methods", ["None"], ["", "def", "_check_exists", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if dataset is download and in right place.\"\"\"", "\n", "return", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.usps.USPS.download": [[89, 101], ["os.path.join", "os.path.dirname", "os.path.isfile", "print", "urllib.request.urlretrieve", "print", "os.path.isdir", "os.makedirs", "os.path.abspath"], "methods", ["None"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "\"\"\"Download dataset.\"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", "\n", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dirname", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "            ", "return", "\n", "", "print", "(", "\"Download %s to %s\"", "%", "(", "self", ".", "url", ",", "os", ".", "path", ".", "abspath", "(", "filename", ")", ")", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "self", ".", "url", ",", "filename", ")", "\n", "print", "(", "\"[DONE]\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.usps.USPS.load_samples": [[102, 117], ["os.path.join", "gzip.open", "pickle.load", "gzip.open.close"], "methods", ["None"], ["", "def", "load_samples", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load sample images from dataset.\"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", "\n", "f", "=", "gzip", ".", "open", "(", "filename", ",", "\"rb\"", ")", "\n", "data_set", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "\"bytes\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "if", "self", ".", "train", ":", "\n", "            ", "images", "=", "data_set", "[", "0", "]", "[", "0", "]", "\n", "labels", "=", "data_set", "[", "0", "]", "[", "1", "]", "\n", "self", ".", "dataset_size", "=", "labels", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "images", "=", "data_set", "[", "1", "]", "[", "0", "]", "\n", "labels", "=", "data_set", "[", "1", "]", "[", "1", "]", "\n", "self", ".", "dataset_size", "=", "labels", ".", "shape", "[", "0", "]", "\n", "", "return", "images", ",", "labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.data_loader.GetLoader.__init__": [[47, 63], ["open", "open.readlines", "open.close", "len", "data_loader.GetLoader.img_paths.append", "data_loader.GetLoader.img_labels.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "data_list", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "data_root", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "f", "=", "open", "(", "data_list", ",", "'r'", ")", "\n", "data_list", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "self", ".", "n_data", "=", "len", "(", "data_list", ")", "\n", "\n", "self", ".", "img_paths", "=", "[", "]", "\n", "self", ".", "img_labels", "=", "[", "]", "\n", "\n", "for", "data", "in", "data_list", ":", "\n", "            ", "self", ".", "img_paths", ".", "append", "(", "data", "[", ":", "-", "3", "]", ")", "\n", "self", ".", "img_labels", ".", "append", "(", "data", "[", "-", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.data_loader.GetLoader.__getitem__": [[64, 73], ["PIL.Image.open().convert", "data_loader.GetLoader.transform", "int", "PIL.Image.open", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img_paths", ",", "labels", "=", "self", ".", "img_paths", "[", "item", "]", ",", "self", ".", "img_labels", "[", "item", "]", "\n", "imgs", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "img_paths", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "imgs", "=", "self", ".", "transform", "(", "imgs", ")", "\n", "labels", "=", "int", "(", "labels", ")", "\n", "\n", "", "return", "imgs", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.data_loader.GetLoader.__len__": [[74, 76], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.data_loader.generate_compl_labels": [[21, 32], ["numpy.arange", "numpy.repeat", "numpy.ones", "candidates[].reshape", "numpy.random.randint", "torch.max", "torch.max", "np.repeat.reshape", "len", "len", "len", "len", "range", "labels.numpy", "numpy.arange", "numpy.array", "len", "len"], "function", ["None"], ["def", "generate_compl_labels", "(", "labels", ")", ":", "\n", "# args, labels: ordinary labels", "\n", "    ", "K", "=", "torch", ".", "max", "(", "labels", ")", "+", "1", "\n", "candidates", "=", "np", ".", "arange", "(", "K", ")", "\n", "candidates", "=", "np", ".", "repeat", "(", "candidates", ".", "reshape", "(", "1", ",", "K", ")", ",", "len", "(", "labels", ")", ",", "0", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "len", "(", "labels", ")", ",", "K", ")", ",", "dtype", "=", "bool", ")", "\n", "mask", "[", "range", "(", "len", "(", "labels", ")", ")", ",", "labels", ".", "numpy", "(", ")", "]", "=", "False", "\n", "candidates_", "=", "candidates", "[", "mask", "]", ".", "reshape", "(", "len", "(", "labels", ")", ",", "K", "-", "1", ")", "# this is the candidates without true class", "\n", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "K", "-", "1", ",", "len", "(", "labels", ")", ")", "\n", "complementary_labels", "=", "candidates_", "[", "np", ".", "arange", "(", "len", "(", "labels", ")", ")", ",", "np", ".", "array", "(", "idx", ")", "]", "\n", "return", "complementary_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.data_loader.class_prior": [[33, 35], ["numpy.bincount", "len"], "function", ["None"], ["", "def", "class_prior", "(", "complementary_labels", ")", ":", "\n", "    ", "return", "np", ".", "bincount", "(", "complementary_labels", ")", "/", "len", "(", "complementary_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.data_loader.prepare_train_loaders": [[36, 45], ["enumerate", "data_loader.generate_compl_labels", "data_loader.class_prior", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.from_numpy().long", "torch.from_numpy().long", "torch.max", "torch.max", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.generate_compl_labels", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.class_prior"], ["", "def", "prepare_train_loaders", "(", "full_train_loader", ",", "batch_size", ",", "ordinary_train_dataset", ")", ":", "\n", "    ", "for", "i", ",", "(", "data", ",", "labels", ")", "in", "enumerate", "(", "full_train_loader", ")", ":", "\n", "            ", "K", "=", "torch", ".", "max", "(", "labels", ")", "+", "1", "# K is number of classes, full_train_loader is full batch", "\n", "", "complementary_labels", "=", "generate_compl_labels", "(", "labels", ")", "\n", "ccp", "=", "class_prior", "(", "complementary_labels", ")", "\n", "complementary_dataset", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "data", ",", "torch", ".", "from_numpy", "(", "complementary_labels", ")", ".", "long", "(", ")", ")", "\n", "ordinary_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "ordinary_train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "complementary_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "complementary_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "return", "complementary_dataset", ",", "ccp", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.data_loader.data_loader": [[77, 102], ["torchvision.Compose", "torchvision.MNIST", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data_loader.prepare_train_loaders", "torchvision.Compose", "usps.USPS", "usps.USPS", "torchvision.Compose", "usps.USPS", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data_loader.prepare_train_loaders", "torchvision.Compose", "torchvision.MNIST", "torchvision.MNIST", "print", "torchvision.ToTensor", "torchvision.Normalize", "len", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "len", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.prepare_train_loaders", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.prepare_train_loaders"], ["", "", "def", "data_loader", "(", "task", ")", ":", "\n", "    ", "if", "task", "==", "'M2U'", ":", "\n", "#M1U1", "\n", "        ", "M_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "ordinary_train_dataset", "=", "dsets", ".", "MNIST", "(", "root", "=", "'/data/menwu/data/MNIST'", ",", "train", "=", "True", ",", "transform", "=", "M_transform", ",", "download", "=", "True", ")", "\n", "full_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "ordinary_train_dataset", ",", "batch_size", "=", "len", "(", "ordinary_train_dataset", ")", ",", "shuffle", "=", "True", ")", "\n", "complementary_dataset", ",", "ccp", "=", "prepare_train_loaders", "(", "full_train_loader", ",", "128", ",", "ordinary_train_dataset", ")", "\n", "\n", "U_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "[", "28", ",", "28", "]", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "test_dataset", "=", "USPS", "(", "'/data/menwu/data/USPS2/Test'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "U_transform", ")", "\n", "ordinary_train_dataset2", "=", "USPS", "(", "'/data/menwu/data/USPS2/train'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "U_transform", ")", "\n", "", "elif", "task", "==", "'U2M'", ":", "\n", "#M1U1", "\n", "        ", "U_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "[", "28", ",", "28", "]", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "ordinary_train_dataset", "=", "USPS", "(", "'/data/menwu/data/USPS2/train'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "U_transform", ")", "\n", "full_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "ordinary_train_dataset", ",", "batch_size", "=", "len", "(", "ordinary_train_dataset", ")", ",", "shuffle", "=", "True", ")", "\n", "complementary_dataset", ",", "ccp", "=", "prepare_train_loaders", "(", "full_train_loader", ",", "128", ",", "ordinary_train_dataset", ")", "\n", "\n", "M_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "test_dataset", "=", "dsets", ".", "MNIST", "(", "root", "=", "'/data/menwu/data/MNIST'", ",", "train", "=", "False", ",", "transform", "=", "M_transform", ")", "\n", "ordinary_train_dataset2", "=", "dsets", ".", "MNIST", "(", "root", "=", "'/data/menwu/data/MNIST'", ",", "train", "=", "True", ",", "transform", "=", "M_transform", ",", "download", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Wrong task!'", ")", "\n", "\n", "", "return", "complementary_dataset", ",", "ordinary_train_dataset", ",", "ordinary_train_dataset2", ",", "test_dataset", ",", "ccp", "", "", ""]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.network.DTN.__init__": [[40, 66], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Dropout2d", "torch.Dropout2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Dropout2d", "torch.Dropout2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Dropout2d", "torch.Dropout2d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DTN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_params", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "0.1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "0.3", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "0.5", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "\n", "self", ".", "fc_params", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "256", "*", "4", "*", "4", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", "\n", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "10", ")", "\n", "self", ".", "__in_features", "=", "512", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.network.DTN.forward": [[67, 73], ["network.DTN.conv_params", "network.DTN.view", "network.DTN.fc_params", "network.DTN.classifier", "network.DTN.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_params", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc_params", "(", "x", ")", "\n", "y", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.network.DTN.output_num": [[74, 76], ["None"], "methods", ["None"], ["", "def", "output_num", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__in_features", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.network.LeNet.__init__": [[78, 93], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_params", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "20", ",", "kernel_size", "=", "5", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "20", ",", "50", ",", "kernel_size", "=", "5", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "fc_params", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "50", "*", "4", "*", "4", ",", "500", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "500", ",", "10", ")", "\n", "self", ".", "__in_features", "=", "500", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.network.LeNet.forward": [[95, 101], ["network.LeNet.conv_params", "network.LeNet.view", "network.LeNet.fc_params", "network.LeNet.classifier", "network.LeNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_params", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc_params", "(", "x", ")", "\n", "y", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.network.LeNet.output_num": [[102, 104], ["None"], "methods", ["None"], ["", "def", "output_num", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__in_features", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.network.AdversarialNetwork.__init__": [[106, 122], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sigmoid", "torch.Sigmoid", "network.AdversarialNetwork.apply"], "methods", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_feature", ",", "hidden_size", ")", ":", "\n", "    ", "super", "(", "AdversarialNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ad_layer1", "=", "nn", ".", "Linear", "(", "in_feature", ",", "hidden_size", ")", "\n", "self", ".", "ad_layer2", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "ad_layer3", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "iter_num", "=", "0", "\n", "self", ".", "alpha", "=", "10", "\n", "self", ".", "low", "=", "0.0", "\n", "self", ".", "high", "=", "1.0", "\n", "self", ".", "max_iter", "=", "10000.0", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.network.AdversarialNetwork.forward": [[123, 138], ["network.calc_coeff", "network.AdversarialNetwork.register_hook", "network.AdversarialNetwork.ad_layer1", "network.AdversarialNetwork.relu1", "network.AdversarialNetwork.dropout1", "network.AdversarialNetwork.ad_layer2", "network.AdversarialNetwork.relu2", "network.AdversarialNetwork.dropout2", "network.AdversarialNetwork.ad_layer3", "network.AdversarialNetwork.sigmoid", "network.grl_hook"], "methods", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.network.calc_coeff", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.grl_hook"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "training", ":", "\n", "        ", "self", ".", "iter_num", "+=", "1", "\n", "", "coeff", "=", "calc_coeff", "(", "self", ".", "iter_num", ",", "self", ".", "high", ",", "self", ".", "low", ",", "self", ".", "alpha", ",", "self", ".", "max_iter", ")", "\n", "x", "=", "x", "*", "1.0", "\n", "x", ".", "register_hook", "(", "grl_hook", "(", "coeff", ")", ")", "\n", "x", "=", "self", ".", "ad_layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout1", "(", "x", ")", "\n", "x", "=", "self", ".", "ad_layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout2", "(", "x", ")", "\n", "y", "=", "self", ".", "ad_layer3", "(", "x", ")", "\n", "y", "=", "self", ".", "sigmoid", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.network.AdversarialNetwork.output_num": [[139, 141], ["None"], "methods", ["None"], ["", "def", "output_num", "(", "self", ")", ":", "\n", "    ", "return", "1", "\n", "", "def", "get_parameters", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.network.AdversarialNetwork.get_parameters": [[141, 143], ["network.AdversarialNetwork.parameters"], "methods", ["None"], ["", "def", "get_parameters", "(", "self", ")", ":", "\n", "    ", "return", "[", "{", "\"params\"", ":", "self", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.network.calc_coeff": [[18, 20], ["numpy.float", "numpy.exp"], "function", ["None"], ["def", "calc_coeff", "(", "iter_num", ",", "high", "=", "1.0", ",", "low", "=", "0.0", ",", "alpha", "=", "10.0", ",", "max_iter", "=", "10000.0", ")", ":", "\n", "    ", "return", "np", ".", "float", "(", "2.0", "*", "(", "high", "-", "low", ")", "/", "(", "1.0", "+", "np", ".", "exp", "(", "-", "alpha", "*", "iter_num", "/", "max_iter", ")", ")", "-", "(", "high", "-", "low", ")", "+", "low", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.network.init_weights": [[21, 32], ["torch.init.kaiming_uniform_", "torch.init.zeros_", "classname.find", "classname.find", "classname.find", "torch.init.normal_", "torch.init.zeros_", "classname.find", "torch.init.xavier_normal_", "torch.init.zeros_"], "function", ["None"], ["", "def", "init_weights", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv2d'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'ConvTranspose2d'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "1.0", ",", "0.02", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.network.grl_hook": [[33, 37], ["grad.clone"], "function", ["None"], ["", "", "def", "grl_hook", "(", "coeff", ")", ":", "\n", "    ", "def", "fun1", "(", "grad", ")", ":", "\n", "        ", "return", "-", "coeff", "*", "grad", ".", "clone", "(", ")", "\n", "", "return", "fun1", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.loss.Entropy": [[17, 23], ["input_.size", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["def", "Entropy", "(", "input_", ")", ":", "\n", "    ", "bs", "=", "input_", ".", "size", "(", "0", ")", "\n", "epsilon", "=", "1e-5", "\n", "entropy", "=", "-", "input_", "*", "torch", ".", "log", "(", "input_", "+", "epsilon", ")", "\n", "entropy", "=", "torch", ".", "sum", "(", "entropy", ",", "dim", "=", "1", ")", "\n", "return", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.loss.grl_hook": [[24, 28], ["grad.clone"], "function", ["None"], ["", "def", "grl_hook", "(", "coeff", ")", ":", "\n", "    ", "def", "fun1", "(", "grad", ")", ":", "\n", "        ", "return", "-", "coeff", "*", "grad", ".", "clone", "(", ")", "\n", "", "return", "fun1", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.loss.CDAN": [[29, 54], ["input_list[].detach", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.bmm", "torch.bmm", "torch.bmm", "ad_net", "random_layer.forward", "ad_net", "input_list[].detach.size", "entropy.register_hook", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "input_list[].detach.unsqueeze", "feature.unsqueeze", "torch.bmm.view", "random_layer.forward.view", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "loss.grl_hook", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.BCELoss", "random_layer.forward.size", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "input_list[].detach.size", "feature.size", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "feature.size", "feature.size", "weight.view", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "numpy.array", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.BCELoss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.forward", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.grl_hook"], ["", "def", "CDAN", "(", "input_list", ",", "ad_net", ",", "entropy", "=", "None", ",", "coeff", "=", "None", ",", "random_layer", "=", "None", ")", ":", "\n", "    ", "softmax_output", "=", "input_list", "[", "1", "]", ".", "detach", "(", ")", "\n", "feature", "=", "input_list", "[", "0", "]", "\n", "if", "random_layer", "is", "None", ":", "\n", "        ", "op_out", "=", "torch", ".", "bmm", "(", "softmax_output", ".", "unsqueeze", "(", "2", ")", ",", "feature", ".", "unsqueeze", "(", "1", ")", ")", "\n", "ad_out", "=", "ad_net", "(", "op_out", ".", "view", "(", "-", "1", ",", "softmax_output", ".", "size", "(", "1", ")", "*", "feature", ".", "size", "(", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "random_out", "=", "random_layer", ".", "forward", "(", "[", "feature", ",", "softmax_output", "]", ")", "\n", "ad_out", "=", "ad_net", "(", "random_out", ".", "view", "(", "-", "1", ",", "random_out", ".", "size", "(", "1", ")", ")", ")", "\n", "", "batch_size", "=", "softmax_output", ".", "size", "(", "0", ")", "//", "2", "\n", "dc_target", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "[", "1", "]", "]", "*", "batch_size", "+", "[", "[", "0", "]", "]", "*", "batch_size", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "if", "entropy", "is", "not", "None", ":", "\n", "        ", "entropy", ".", "register_hook", "(", "grl_hook", "(", "coeff", ")", ")", "\n", "entropy", "=", "1.0", "+", "torch", ".", "exp", "(", "-", "entropy", ")", "\n", "source_mask", "=", "torch", ".", "ones_like", "(", "entropy", ")", "\n", "source_mask", "[", "feature", ".", "size", "(", "0", ")", "//", "2", ":", "]", "=", "0", "\n", "source_weight", "=", "entropy", "*", "source_mask", "\n", "target_mask", "=", "torch", ".", "ones_like", "(", "entropy", ")", "\n", "target_mask", "[", "0", ":", "feature", ".", "size", "(", "0", ")", "//", "2", "]", "=", "0", "\n", "target_weight", "=", "entropy", "*", "target_mask", "\n", "weight", "=", "source_weight", "/", "torch", ".", "sum", "(", "source_weight", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "+", "target_weight", "/", "torch", ".", "sum", "(", "target_weight", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "return", "torch", ".", "sum", "(", "weight", ".", "view", "(", "-", "1", ",", "1", ")", "*", "nn", ".", "BCELoss", "(", "reduction", "=", "'none'", ")", "(", "ad_out", ",", "dc_target", ")", ")", "/", "torch", ".", "sum", "(", "weight", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "BCELoss", "(", ")", "(", "ad_out", ",", "dc_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.loss.DANN": [[55, 60], ["ad_net", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "ad_net.size", "torch.BCELoss", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "function", ["None"], ["", "", "def", "DANN", "(", "features", ",", "ad_net", ")", ":", "\n", "    ", "ad_out", "=", "ad_net", "(", "features", ")", "\n", "batch_size", "=", "ad_out", ".", "size", "(", "0", ")", "//", "2", "\n", "dc_target", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "[", "1", "]", "]", "*", "batch_size", "+", "[", "[", "0", "]", "]", "*", "batch_size", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "return", "nn", ".", "BCELoss", "(", ")", "(", "ad_out", ",", "dc_target", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.train_um_et.Tsharpen": [[23, 29], ["torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.div", "torch.div", "torch.div", "torch.div", "torch.sum.view"], "function", ["None"], ["def", "Tsharpen", "(", "input", ")", ":", "\n", "    ", "lamda", "=", "0.5", "\n", "sharp", "=", "torch", ".", "pow", "(", "input", ",", "1", "/", "lamda", ")", "\n", "sharp2", "=", "torch", ".", "sum", "(", "sharp", ",", "1", ")", "\n", "result", "=", "torch", ".", "div", "(", "sharp", ",", "sharp2", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.train_um_et.train": [[31, 94], ["model.train", "len", "len", "range", "iter.next", "iter.next", "data_target.cuda.cuda", "optimizer.zero_grad", "optimizer_ad.zero_grad", "model", "loss_com.chosen_loss_c", "optimizer.step", "optimizer.zero_grad", "iter", "iter", "data_source.cuda", "label_source.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Softmax", "torch.sum.backward", "loss_func.DANN.backward", "optimizer.step", "optimizer_ad.step", "print", "output.narrow", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.min", "torch.min", "torch.min", "torch.min", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.backward", "torch.sum.backward", "train_um_et.Tsharpen", "loss.Entropy", "loss.CDAN", "data_source.size", "network.calc_coeff", "loss.CDAN", "torch.sum.item", "torch.min", "torch.min", "torch.min", "torch.min", "loss_vector.view", "torch.zeros().view().to", "torch.zeros().view().to", "torch.zeros().view().to", "torch.zeros().view().to", "loss.DANN", "ValueError", "torch.zeros().view", "torch.zeros().view", "torch.zeros().view", "torch.zeros().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.train", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss_com.chosen_loss_c", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.train_um_et.Tsharpen", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.Entropy", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.CDAN", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.network.calc_coeff", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.CDAN", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.DANN"], ["", "def", "train", "(", "args", ",", "model", ",", "ad_net", ",", "random_layer", ",", "train_loader", ",", "train_loader1", ",", "optimizer", ",", "optimizer_ad", ",", "epoch", ",", "start_epoch", ",", "method", ",", "ccp", ")", ":", "\n", "    ", "cl_method", "=", "'ga'", "#choices=['ga', 'nn', 'free', 'pc', 'forward']", "\n", "meta_method", "=", "'free'", "if", "cl_method", "==", "'ga'", "else", "cl_method", "\n", "K", "=", "10", "\n", "\n", "model", ".", "train", "(", ")", "\n", "len_source", "=", "len", "(", "train_loader", ")", "\n", "len_target", "=", "len", "(", "train_loader1", ")", "\n", "if", "len_source", ">", "len_target", ":", "\n", "        ", "num_iter", "=", "len_source", "\n", "", "else", ":", "\n", "        ", "num_iter", "=", "len_target", "\n", "\n", "", "for", "batch_idx", "in", "range", "(", "num_iter", ")", ":", "\n", "        ", "if", "batch_idx", "%", "len_source", "==", "0", ":", "\n", "            ", "iter_source", "=", "iter", "(", "train_loader", ")", "\n", "", "if", "batch_idx", "%", "len_target", "==", "0", ":", "\n", "            ", "iter_target", "=", "iter", "(", "train_loader1", ")", "\n", "", "data_source", ",", "label_source", "=", "iter_source", ".", "next", "(", ")", "\n", "data_source", ",", "label_source", "=", "data_source", ".", "cuda", "(", ")", ",", "label_source", ".", "cuda", "(", ")", "\n", "data_target", ",", "label_target", "=", "iter_target", ".", "next", "(", ")", "\n", "data_target", "=", "data_target", ".", "cuda", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "optimizer_ad", ".", "zero_grad", "(", ")", "\n", "feature", ",", "output", "=", "model", "(", "torch", ".", "cat", "(", "(", "data_source", ",", "data_target", ")", ",", "0", ")", ")", "\n", "#err_s_label, loss_vector = non_negative_loss (f=output.narrow(0, 0, data_source.size(0)), K=10, labels=label_source, ccp=ccp,beta=0)", "\n", "loss", ",", "loss_vector", "=", "chosen_loss_c", "(", "f", "=", "output", ".", "narrow", "(", "0", ",", "0", ",", "data_source", ".", "size", "(", "0", ")", ")", ",", "K", "=", "K", ",", "labels", "=", "label_source", ",", "ccp", "=", "ccp", ",", "meta_method", "=", "meta_method", ")", "\n", "#loss = nn.CrossEntropyLoss()(output.narrow(0, 0, data_source.size(0)), label_source)", "\n", "softmax_output", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "output", ")", "\n", "if", "cl_method", "==", "'ga'", ":", "\n", "            ", "if", "torch", ".", "min", "(", "loss_vector", ")", ".", "item", "(", ")", "<", "0", ":", "\n", "                ", "loss_vector_with_zeros", "=", "torch", ".", "cat", "(", "(", "loss_vector", ".", "view", "(", "-", "1", ",", "1", ")", ",", "torch", ".", "zeros", "(", "K", ",", "requires_grad", "=", "True", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "to", "(", "device", ")", ")", ",", "1", ")", "\n", "min_loss_vector", ",", "_", "=", "torch", ".", "min", "(", "loss_vector_with_zeros", ",", "dim", "=", "1", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "min_loss_vector", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                        ", "p", ".", "grad", "=", "-", "1", "*", "p", ".", "grad", "\n", "", "", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "epoch", ">", "start_epoch", ":", "\n", "            ", "if", "method", "==", "'CDAN-E'", ":", "\n", "                ", "softmax_output", "=", "Tsharpen", "(", "softmax_output", ")", "\n", "entropy", "=", "loss_func", ".", "Entropy", "(", "softmax_output", ")", "\n", "loss2", "=", "loss_func", ".", "CDAN", "(", "[", "feature", ",", "softmax_output", "]", ",", "ad_net", ",", "entropy", ",", "network", ".", "calc_coeff", "(", "num_iter", "*", "(", "epoch", "-", "start_epoch", ")", "+", "batch_idx", ")", ",", "random_layer", ")", "\n", "", "elif", "method", "==", "'CDAN'", ":", "\n", "                ", "loss2", "=", "loss_func", ".", "CDAN", "(", "[", "feature", ",", "softmax_output", "]", ",", "ad_net", ",", "None", ",", "None", ",", "random_layer", ")", "\n", "", "elif", "method", "==", "'DANN'", ":", "\n", "                ", "loss2", "=", "loss_func", ".", "DANN", "(", "feature", ",", "ad_net", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Method cannot be recognized.'", ")", "\n", "", "", "if", "epoch", ">", "start_epoch", ":", "\n", "            ", "loss2", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer_ad", ".", "step", "(", ")", "\n", "", "if", "(", "batch_idx", "+", "epoch", "*", "num_iter", ")", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss1: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "args", ".", "batch_size", ",", "num_iter", "*", "args", ".", "batch_size", ",", "\n", "100.", "*", "batch_idx", "/", "num_iter", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.train_um_et.test": [[95, 111], ["model.eval", "len", "print", "model", "pred.eq().sum().item", "len", "data.cuda", "target.cuda", "output.data.cpu().max", "len", "pred.eq().sum", "len", "torch.CrossEntropyLoss", "output.data.cpu", "pred.eq", "target.data.cpu().view_as", "target.data.cpu"], "function", ["None"], ["", "", "", "def", "test", "(", "args", ",", "model", ",", "test_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "feature", ",", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "output", ",", "target", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "data", ".", "cpu", "(", ")", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "data", ".", "cpu", "(", ")", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.3f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "return", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ours.train_um_et.main": [[112, 182], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "network.LeNet", "model.cuda.cuda", "network.AdversarialNetwork.cuda", "torch.SGD", "torch.SGD", "numpy.zeros", "range", "numpy.savetxt", "data_loader.data_loader", "network.RandomLayer", "network.AdversarialNetwork", "network.RandomLayer.cuda", "network.AdversarialNetwork", "model.cuda.parameters", "network.AdversarialNetwork.parameters", "train_um_et.train", "train_um_et.test", "train_um_et.test", "numpy.savetxt", "data_loader.data_loader", "Exception", "model.cuda.output_num", "model.cuda.output_num"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.data_loader", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.train", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.test", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.test", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.data_loader", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.output_num", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.output_num"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'CDAN USPS MNIST'", ")", "\n", "parser", ".", "add_argument", "(", "'--method'", ",", "type", "=", "str", ",", "default", "=", "'CDAN-E'", ",", "choices", "=", "[", "'CDAN'", ",", "'CDAN-E'", ",", "'DANN'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--task'", ",", "default", "=", "'USPS2MNIST'", ",", "help", "=", "'task to perform'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "550", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "5e-5", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr2'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "metavar", "=", "'LR2'", ",", "\n", "help", "=", "'learning rate2 (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'cuda device id'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "parser", ".", "add_argument", "(", "'--random'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use random'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpu_id", "\n", "\n", "if", "args", ".", "task", "==", "'USPS2MNIST'", ":", "\n", "        ", "source_list", ",", "ordinary_train_dataset", ",", "target_list", ",", "test_list", ",", "ccp", "=", "data_loader", "(", "task", "=", "'U2M'", ")", "\n", "start_epoch", "=", "50", "\n", "decay_epoch", "=", "600", "\n", "", "elif", "args", ".", "task", "==", "'MNIST2USPS'", ":", "\n", "        ", "source_list", ",", "ordinary_train_dataset", ",", "target_list", ",", "test_list", ",", "ccp", "=", "data_loader", "(", "task", "=", "'M2U'", ")", "\n", "start_epoch", "=", "50", "\n", "decay_epoch", "=", "600", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'task cannot be recognized!'", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "source_list", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ",", "drop_last", "=", "True", ")", "\n", "train_loader1", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "target_list", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ",", "drop_last", "=", "True", ")", "\n", "o_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "ordinary_train_dataset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "test_list", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "\n", "model", "=", "network", ".", "LeNet", "(", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "class_num", "=", "10", "\n", "\n", "if", "args", ".", "random", ":", "\n", "        ", "random_layer", "=", "network", ".", "RandomLayer", "(", "[", "model", ".", "output_num", "(", ")", ",", "class_num", "]", ",", "500", ")", "\n", "ad_net", "=", "network", ".", "AdversarialNetwork", "(", "500", ",", "500", ")", "\n", "random_layer", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "random_layer", "=", "None", "\n", "ad_net", "=", "network", ".", "AdversarialNetwork", "(", "model", ".", "output_num", "(", ")", "*", "class_num", ",", "500", ")", "\n", "", "ad_net", "=", "ad_net", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "0.0005", ",", "momentum", "=", "0.9", ")", "\n", "optimizer_ad", "=", "optim", ".", "SGD", "(", "ad_net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr2", ",", "weight_decay", "=", "0.0005", ",", "momentum", "=", "0.9", ")", "\n", "\n", "save_table", "=", "np", ".", "zeros", "(", "shape", "=", "(", "args", ".", "epochs", ",", "3", ")", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "if", "epoch", "%", "decay_epoch", "==", "0", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "param_group", "[", "\"lr\"", "]", "*", "0.5", "\n", "", "", "train", "(", "args", ",", "model", ",", "ad_net", ",", "random_layer", ",", "train_loader", ",", "train_loader1", ",", "optimizer", ",", "optimizer_ad", ",", "epoch", ",", "start_epoch", ",", "args", ".", "method", ",", "ccp", ")", "\n", "acc1", "=", "test", "(", "args", ",", "model", ",", "o_train_loader", ")", "\n", "acc2", "=", "test", "(", "args", ",", "model", ",", "test_loader", ")", "\n", "save_table", "[", "epoch", "-", "1", ",", ":", "]", "=", "epoch", "-", "50", ",", "acc1", ",", "acc2", "\n", "np", ".", "savetxt", "(", "args", ".", "task", "+", "'_.txt'", ",", "save_table", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%1.3f'", ")", "\n", "", "np", ".", "savetxt", "(", "args", ".", "task", "+", "'_.txt'", ",", "save_table", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%1.3f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss_com.assump_free_loss": [[16, 19], ["loss_com.non_negative_loss"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss_com.non_negative_loss"], ["def", "assump_free_loss", "(", "f", ",", "K", ",", "labels", ",", "ccp", ")", ":", "\n", "    ", "\"\"\"Assumption free loss (based on Thm 1) is equivalent to non_negative_loss if the max operator's threshold is negative inf.\"\"\"", "\n", "return", "non_negative_loss", "(", "f", "=", "f", ",", "K", "=", "K", ",", "labels", "=", "labels", ",", "ccp", "=", "ccp", ",", "beta", "=", "np", ".", "inf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss_com.non_negative_loss": [[20, 38], ["torch.from_numpy().float().to().requires_grad_", "torch.from_numpy().float().to().requires_grad_", "torch.from_numpy().float().to().requires_grad_", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "numpy.bincount().astype", "torch.cat", "torch.cat", "torch.cat", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.log_softmax", "len", "numpy.append", "torch.mul", "torch.mul", "torch.mul", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sum().item", "torch.sum().item", "torch.sum().item", "idx.byte().view().repeat", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "numpy.bincount", "torch.zeros().to.view", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.mul", "torch.mul", "torch.mul", "labels.data.cpu", "torch.zeros().view().to", "torch.zeros().view().to", "torch.zeros().view().to", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.sum", "torch.sum", "torch.sum", "idx.byte().view", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.mean", "torch.mean", "torch.mean", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.mean", "torch.mean", "torch.mean", "torch.zeros().view", "torch.zeros().view", "torch.zeros().view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "idx.byte", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "non_negative_loss", "(", "f", ",", "K", ",", "labels", ",", "ccp", ",", "beta", ")", ":", "\n", "    ", "ccp", "=", "torch", ".", "from_numpy", "(", "ccp", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ".", "requires_grad_", "(", ")", "\n", "neglog", "=", "-", "F", ".", "log_softmax", "(", "f", ",", "dim", "=", "1", ")", "\n", "loss_vector", "=", "torch", ".", "zeros", "(", "K", ",", "requires_grad", "=", "True", ")", ".", "to", "(", "device", ")", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "idx", "=", "labels", "==", "k", "\n", "if", "torch", ".", "sum", "(", "idx", ")", ".", "item", "(", ")", ">", "0", ":", "\n", "            ", "idxs", "=", "idx", ".", "byte", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "K", ")", "\n", "neglog_k", "=", "torch", ".", "masked_select", "(", "neglog", ",", "idxs", ")", ".", "view", "(", "-", "1", ",", "K", ")", "\n", "loss_vector", "[", "k", "]", "=", "loss_vector", "[", "k", "]", "-", "(", "K", "-", "1", ")", "*", "ccp", "[", "k", "]", "*", "torch", ".", "mean", "(", "neglog_k", ",", "dim", "=", "0", ")", "[", "k", "]", "# average of k-th class loss for k-th comp class samples", "\n", "loss_vector", "=", "loss_vector", "+", "torch", ".", "mul", "(", "ccp", ",", "torch", ".", "mean", "(", "neglog_k", ",", "dim", "=", "0", ")", ")", "# only k-th in the summation of the second term inside max ", "\n", "", "", "count", "=", "np", ".", "bincount", "(", "labels", ".", "data", ".", "cpu", "(", ")", ")", ".", "astype", "(", "'float'", ")", "\n", "while", "len", "(", "count", ")", "<", "K", ":", "\n", "        ", "count", "=", "np", ".", "append", "(", "count", ",", "0", ")", "# when largest label is below K, bincount will not take care of them", "\n", "", "loss_vector_with_zeros", "=", "torch", ".", "cat", "(", "(", "loss_vector", ".", "view", "(", "-", "1", ",", "1", ")", ",", "torch", ".", "zeros", "(", "K", ",", "requires_grad", "=", "True", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "to", "(", "device", ")", "-", "beta", ")", ",", "1", ")", "\n", "max_loss_vector", ",", "_", "=", "torch", ".", "max", "(", "loss_vector_with_zeros", ",", "dim", "=", "1", ")", "\n", "final_loss", "=", "torch", ".", "sum", "(", "max_loss_vector", ")", "\n", "return", "final_loss", ",", "torch", ".", "mul", "(", "torch", ".", "from_numpy", "(", "count", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "loss_vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss_com.forward_loss": [[39, 47], ["torch.CrossEntropyLoss", "Q.to.to", "range", "torch.mm", "torch.mm", "torch.mm", "nn.CrossEntropyLoss.", "labels.long", "torch.ones", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "forward_loss", "(", "f", ",", "K", ",", "labels", ")", ":", "\n", "    ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "Q", "=", "torch", ".", "ones", "(", "K", ",", "K", ")", "*", "1", "/", "(", "K", "-", "1", ")", "\n", "Q", "=", "Q", ".", "to", "(", "device", ")", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "Q", "[", "k", ",", "k", "]", "=", "0", "\n", "", "q", "=", "torch", ".", "mm", "(", "f", ",", "Q", ")", "\n", "return", "criterion", "(", "q", ",", "labels", ".", "long", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss_com.pc_loss": [[48, 55], ["torch.Sigmoid", "f.gather().repeat", "nn.Sigmoid.", "f.gather", "labels.long().view", "len", "torch.sum", "torch.sum", "torch.sum", "labels.long"], "function", ["None"], ["", "def", "pc_loss", "(", "f", ",", "K", ",", "labels", ")", ":", "\n", "    ", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "fbar", "=", "f", ".", "gather", "(", "1", ",", "labels", ".", "long", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "repeat", "(", "1", ",", "K", ")", "\n", "loss_matrix", "=", "sigmoid", "(", "-", "1.", "*", "(", "f", "-", "fbar", ")", ")", "# multiply -1 for \"complementary\"", "\n", "M1", ",", "M2", "=", "K", "*", "(", "K", "-", "1", ")", "/", "2", ",", "K", "-", "1", "\n", "pc_loss", "=", "torch", ".", "sum", "(", "loss_matrix", ")", "*", "(", "K", "-", "1", ")", "/", "len", "(", "labels", ")", "-", "M1", "+", "M2", "\n", "return", "pc_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss_com.accuracy_check": [[56, 67], ["model", "sm", "torch.max", "torch.max", "torch.max", "labels.size", "labels.to", "images.to"], "function", ["None"], ["", "def", "accuracy_check", "(", "loader", ",", "model", ")", ":", "\n", "    ", "sm", "=", "F", ".", "softmax", "\n", "total", ",", "num_samples", "=", "0", ",", "0", "\n", "for", "images", ",", "labels", "in", "loader", ":", "\n", "        ", "labels", ",", "images", "=", "labels", ".", "to", "(", "device", ")", ",", "images", ".", "to", "(", "device", ")", "\n", "outputs", "=", "model", "(", "images", ")", "\n", "sm_outputs", "=", "sm", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "sm_outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "(", "predicted", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "num_samples", "+=", "labels", ".", "size", "(", "0", ")", "\n", "", "return", "100", "*", "total", "/", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss_com.chosen_loss_c": [[68, 79], ["loss_com.assump_free_loss", "loss_com.non_negative_loss", "loss_com.forward_loss", "loss_com.pc_loss"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss_com.assump_free_loss", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss_com.non_negative_loss", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss_com.forward_loss", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss_com.pc_loss"], ["", "def", "chosen_loss_c", "(", "f", ",", "K", ",", "labels", ",", "ccp", ",", "meta_method", ")", ":", "\n", "    ", "class_loss_torch", "=", "None", "\n", "if", "meta_method", "==", "'free'", ":", "\n", "        ", "final_loss", ",", "class_loss_torch", "=", "assump_free_loss", "(", "f", "=", "f", ",", "K", "=", "K", ",", "labels", "=", "labels", ",", "ccp", "=", "ccp", ")", "\n", "", "elif", "meta_method", "==", "'nn'", ":", "\n", "        ", "final_loss", ",", "class_loss_torch", "=", "non_negative_loss", "(", "f", "=", "f", ",", "K", "=", "K", ",", "labels", "=", "labels", ",", "beta", "=", "0", ",", "ccp", "=", "ccp", ")", "\n", "", "elif", "meta_method", "==", "'forward'", ":", "\n", "        ", "final_loss", "=", "forward_loss", "(", "f", "=", "f", ",", "K", "=", "K", ",", "labels", "=", "labels", ")", "\n", "", "elif", "meta_method", "==", "'pc'", ":", "\n", "        ", "final_loss", "=", "pc_loss", "(", "f", "=", "f", ",", "K", "=", "K", ",", "labels", "=", "labels", ")", "\n", "", "return", "final_loss", ",", "class_loss_torch", "", "", ""]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.usps.USPS.__init__": [[41, 66], ["os.path.expanduser", "usps.USPS.load_samples", "numpy.squeeze().astype", "usps.USPS.download", "usps.USPS._check_exists", "RuntimeError", "numpy.arange", "numpy.squeeze"], "methods", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.usps.USPS.load_samples", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.usps.USPS.download", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.usps.USPS._check_exists"], ["def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "\"\"\"Init USPS dataset.\"\"\"", "\n", "# init params", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "filename", "=", "\"usps_28x28.pkl\"", "\n", "self", ".", "train", "=", "train", "\n", "# Num of Train = 7438, Num ot Test 1860", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "dataset_size", "=", "None", "\n", "\n", "# download dataset.", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "", "if", "not", "self", ".", "_check_exists", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Dataset not found.\"", "+", "\n", "\" You can use download=True to download it\"", ")", "\n", "\n", "", "self", ".", "train_data", ",", "self", ".", "train_labels", "=", "self", ".", "load_samples", "(", ")", "\n", "if", "self", ".", "train", ":", "\n", "            ", "total_num_samples", "=", "self", ".", "train_labels", ".", "shape", "[", "0", "]", "\n", "indices", "=", "np", ".", "arange", "(", "total_num_samples", ")", "\n", "self", ".", "train_data", "=", "self", ".", "train_data", "[", "indices", "[", "0", ":", "self", ".", "dataset_size", "]", ",", ":", ":", "]", "\n", "self", ".", "train_labels", "=", "self", ".", "train_labels", "[", "indices", "[", "0", ":", "self", ".", "dataset_size", "]", "]", "\n", "", "self", ".", "train_data", "*=", "255.0", "\n", "self", ".", "train_data", "=", "np", ".", "squeeze", "(", "self", ".", "train_data", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.usps.USPS.__getitem__": [[67, 80], ["PIL.Image.fromarray", "usps.USPS.copy", "usps.USPS.transform", "label.astype"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Get images and target for data loader.\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "label", "=", "self", ".", "train_data", "[", "index", "]", ",", "self", ".", "train_labels", "[", "index", "]", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "'L'", ")", "\n", "img", "=", "img", ".", "copy", "(", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "label", ".", "astype", "(", "\"int64\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.usps.USPS.__len__": [[81, 84], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return size of dataset.\"\"\"", "\n", "return", "len", "(", "self", ".", "train_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.usps.USPS._check_exists": [[85, 88], ["os.path.exists", "os.path.join"], "methods", ["None"], ["", "def", "_check_exists", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if dataset is download and in right place.\"\"\"", "\n", "return", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.usps.USPS.download": [[89, 101], ["os.path.join", "os.path.dirname", "os.path.isfile", "print", "urllib.request.urlretrieve", "print", "os.path.isdir", "os.makedirs", "os.path.abspath"], "methods", ["None"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "\"\"\"Download dataset.\"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", "\n", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dirname", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "            ", "return", "\n", "", "print", "(", "\"Download %s to %s\"", "%", "(", "self", ".", "url", ",", "os", ".", "path", ".", "abspath", "(", "filename", ")", ")", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "self", ".", "url", ",", "filename", ")", "\n", "print", "(", "\"[DONE]\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.usps.USPS.load_samples": [[102, 117], ["os.path.join", "gzip.open", "pickle.load", "gzip.open.close"], "methods", ["None"], ["", "def", "load_samples", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load sample images from dataset.\"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", "\n", "f", "=", "gzip", ".", "open", "(", "filename", ",", "\"rb\"", ")", "\n", "data_set", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "\"bytes\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "if", "self", ".", "train", ":", "\n", "            ", "images", "=", "data_set", "[", "0", "]", "[", "0", "]", "\n", "labels", "=", "data_set", "[", "0", "]", "[", "1", "]", "\n", "self", ".", "dataset_size", "=", "labels", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "images", "=", "data_set", "[", "1", "]", "[", "0", "]", "\n", "labels", "=", "data_set", "[", "1", "]", "[", "1", "]", "\n", "self", ".", "dataset_size", "=", "labels", ".", "shape", "[", "0", "]", "\n", "", "return", "images", ",", "labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.data_loader.GetLoader.__init__": [[47, 63], ["open", "open.readlines", "open.close", "len", "data_loader.GetLoader.img_paths.append", "data_loader.GetLoader.img_labels.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "data_list", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "data_root", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "f", "=", "open", "(", "data_list", ",", "'r'", ")", "\n", "data_list", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "self", ".", "n_data", "=", "len", "(", "data_list", ")", "\n", "\n", "self", ".", "img_paths", "=", "[", "]", "\n", "self", ".", "img_labels", "=", "[", "]", "\n", "\n", "for", "data", "in", "data_list", ":", "\n", "            ", "self", ".", "img_paths", ".", "append", "(", "data", "[", ":", "-", "3", "]", ")", "\n", "self", ".", "img_labels", ".", "append", "(", "data", "[", "-", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.data_loader.GetLoader.__getitem__": [[64, 73], ["PIL.Image.open().convert", "data_loader.GetLoader.transform", "int", "PIL.Image.open", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img_paths", ",", "labels", "=", "self", ".", "img_paths", "[", "item", "]", ",", "self", ".", "img_labels", "[", "item", "]", "\n", "imgs", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "img_paths", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "imgs", "=", "self", ".", "transform", "(", "imgs", ")", "\n", "labels", "=", "int", "(", "labels", ")", "\n", "\n", "", "return", "imgs", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.data_loader.GetLoader.__len__": [[74, 76], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.data_loader.generate_compl_labels": [[21, 32], ["numpy.arange", "numpy.repeat", "numpy.ones", "candidates[].reshape", "numpy.random.randint", "torch.max", "torch.max", "np.repeat.reshape", "len", "len", "len", "len", "range", "labels.numpy", "numpy.arange", "numpy.array", "len", "len"], "function", ["None"], ["def", "generate_compl_labels", "(", "labels", ")", ":", "\n", "# args, labels: ordinary labels", "\n", "    ", "K", "=", "torch", ".", "max", "(", "labels", ")", "+", "1", "\n", "candidates", "=", "np", ".", "arange", "(", "K", ")", "\n", "candidates", "=", "np", ".", "repeat", "(", "candidates", ".", "reshape", "(", "1", ",", "K", ")", ",", "len", "(", "labels", ")", ",", "0", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "len", "(", "labels", ")", ",", "K", ")", ",", "dtype", "=", "bool", ")", "\n", "mask", "[", "range", "(", "len", "(", "labels", ")", ")", ",", "labels", ".", "numpy", "(", ")", "]", "=", "False", "\n", "candidates_", "=", "candidates", "[", "mask", "]", ".", "reshape", "(", "len", "(", "labels", ")", ",", "K", "-", "1", ")", "# this is the candidates without true class", "\n", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "K", "-", "1", ",", "len", "(", "labels", ")", ")", "\n", "complementary_labels", "=", "candidates_", "[", "np", ".", "arange", "(", "len", "(", "labels", ")", ")", ",", "np", ".", "array", "(", "idx", ")", "]", "\n", "return", "complementary_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.data_loader.class_prior": [[33, 35], ["numpy.bincount", "len"], "function", ["None"], ["", "def", "class_prior", "(", "complementary_labels", ")", ":", "\n", "    ", "return", "np", ".", "bincount", "(", "complementary_labels", ")", "/", "len", "(", "complementary_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.data_loader.prepare_train_loaders": [[36, 45], ["enumerate", "data_loader.generate_compl_labels", "data_loader.class_prior", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.from_numpy().long", "torch.from_numpy().long", "torch.max", "torch.max", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.generate_compl_labels", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.class_prior"], ["", "def", "prepare_train_loaders", "(", "full_train_loader", ",", "batch_size", ",", "ordinary_train_dataset", ")", ":", "\n", "    ", "for", "i", ",", "(", "data", ",", "labels", ")", "in", "enumerate", "(", "full_train_loader", ")", ":", "\n", "            ", "K", "=", "torch", ".", "max", "(", "labels", ")", "+", "1", "# K is number of classes, full_train_loader is full batch", "\n", "", "complementary_labels", "=", "generate_compl_labels", "(", "labels", ")", "\n", "ccp", "=", "class_prior", "(", "complementary_labels", ")", "\n", "complementary_dataset", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "data", ",", "torch", ".", "from_numpy", "(", "complementary_labels", ")", ".", "long", "(", ")", ")", "\n", "ordinary_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "ordinary_train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "complementary_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "complementary_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "return", "complementary_dataset", ",", "ccp", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.data_loader.data_loader": [[77, 102], ["torchvision.Compose", "torchvision.MNIST", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data_loader.prepare_train_loaders", "torchvision.Compose", "usps.USPS", "usps.USPS", "torchvision.Compose", "usps.USPS", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data_loader.prepare_train_loaders", "torchvision.Compose", "torchvision.MNIST", "torchvision.MNIST", "print", "torchvision.ToTensor", "torchvision.Normalize", "len", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "len", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.prepare_train_loaders", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.prepare_train_loaders"], ["", "", "def", "data_loader", "(", "task", ")", ":", "\n", "    ", "if", "task", "==", "'M2U'", ":", "\n", "#M1U1", "\n", "        ", "M_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "ordinary_train_dataset", "=", "dsets", ".", "MNIST", "(", "root", "=", "'/data/menwu/data/MNIST'", ",", "train", "=", "True", ",", "transform", "=", "M_transform", ",", "download", "=", "True", ")", "\n", "full_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "ordinary_train_dataset", ",", "batch_size", "=", "len", "(", "ordinary_train_dataset", ")", ",", "shuffle", "=", "True", ")", "\n", "complementary_dataset", ",", "ccp", "=", "prepare_train_loaders", "(", "full_train_loader", ",", "128", ",", "ordinary_train_dataset", ")", "\n", "\n", "U_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "[", "28", ",", "28", "]", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "test_dataset", "=", "USPS", "(", "'/data/menwu/data/USPS2/Test'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "U_transform", ")", "\n", "ordinary_train_dataset2", "=", "USPS", "(", "'/data/menwu/data/USPS2/train'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "U_transform", ")", "\n", "", "elif", "task", "==", "'U2M'", ":", "\n", "#M1U1", "\n", "        ", "U_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "[", "28", ",", "28", "]", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "ordinary_train_dataset", "=", "USPS", "(", "'/data/menwu/data/USPS2/train'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "U_transform", ")", "\n", "full_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "ordinary_train_dataset", ",", "batch_size", "=", "len", "(", "ordinary_train_dataset", ")", ",", "shuffle", "=", "True", ")", "\n", "complementary_dataset", ",", "ccp", "=", "prepare_train_loaders", "(", "full_train_loader", ",", "128", ",", "ordinary_train_dataset", ")", "\n", "\n", "M_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "test_dataset", "=", "dsets", ".", "MNIST", "(", "root", "=", "'/data/menwu/data/MNIST'", ",", "train", "=", "False", ",", "transform", "=", "M_transform", ")", "\n", "ordinary_train_dataset2", "=", "dsets", ".", "MNIST", "(", "root", "=", "'/data/menwu/data/MNIST'", ",", "train", "=", "True", ",", "transform", "=", "M_transform", ",", "download", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Wrong task!'", ")", "\n", "\n", "", "return", "complementary_dataset", ",", "ordinary_train_dataset", ",", "ordinary_train_dataset2", ",", "test_dataset", ",", "ccp", "", "", ""]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.train_mu.train": [[23, 85], ["model.train", "len", "len", "range", "iter.next", "iter.next", "data_target.cuda.cuda", "optimizer.zero_grad", "optimizer_ad.zero_grad", "model", "loss_com.chosen_loss_c", "optimizer.step", "optimizer.zero_grad", "iter", "iter", "data_source.cuda", "label_source.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Softmax", "torch.sum.backward", "loss_func.DANN.backward", "optimizer.step", "optimizer_ad.step", "print", "output.narrow", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.min", "torch.min", "torch.min", "torch.min", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.backward", "torch.sum.backward", "loss.Entropy", "loss.CDAN", "data_source.size", "network.calc_coeff", "loss.CDAN", "torch.sum.item", "torch.min", "torch.min", "torch.min", "torch.min", "loss_vector.view", "torch.zeros().view().to", "torch.zeros().view().to", "torch.zeros().view().to", "torch.zeros().view().to", "loss.DANN", "ValueError", "torch.zeros().view", "torch.zeros().view", "torch.zeros().view", "torch.zeros().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.train", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss_com.chosen_loss_c", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.Entropy", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.CDAN", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.network.calc_coeff", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.CDAN", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.DANN"], ["def", "train", "(", "args", ",", "model", ",", "ad_net", ",", "random_layer", ",", "train_loader", ",", "train_loader1", ",", "optimizer", ",", "optimizer_ad", ",", "epoch", ",", "start_epoch", ",", "method", ",", "ccp", ")", ":", "\n", "    ", "cl_method", "=", "'ga'", "#choices=['ga', 'nn', 'free', 'pc', 'forward']", "\n", "meta_method", "=", "'free'", "if", "cl_method", "==", "'ga'", "else", "cl_method", "\n", "K", "=", "10", "\n", "\n", "model", ".", "train", "(", ")", "\n", "len_source", "=", "len", "(", "train_loader", ")", "\n", "len_target", "=", "len", "(", "train_loader1", ")", "\n", "if", "len_source", ">", "len_target", ":", "\n", "        ", "num_iter", "=", "len_source", "\n", "", "else", ":", "\n", "        ", "num_iter", "=", "len_target", "\n", "\n", "", "for", "batch_idx", "in", "range", "(", "num_iter", ")", ":", "\n", "        ", "if", "batch_idx", "%", "len_source", "==", "0", ":", "\n", "            ", "iter_source", "=", "iter", "(", "train_loader", ")", "\n", "", "if", "batch_idx", "%", "len_target", "==", "0", ":", "\n", "            ", "iter_target", "=", "iter", "(", "train_loader1", ")", "\n", "", "data_source", ",", "label_source", "=", "iter_source", ".", "next", "(", ")", "\n", "data_source", ",", "label_source", "=", "data_source", ".", "cuda", "(", ")", ",", "label_source", ".", "cuda", "(", ")", "\n", "data_target", ",", "label_target", "=", "iter_target", ".", "next", "(", ")", "\n", "data_target", "=", "data_target", ".", "cuda", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "optimizer_ad", ".", "zero_grad", "(", ")", "\n", "feature", ",", "output", "=", "model", "(", "torch", ".", "cat", "(", "(", "data_source", ",", "data_target", ")", ",", "0", ")", ")", "\n", "#err_s_label, loss_vector = non_negative_loss (f=output.narrow(0, 0, data_source.size(0)), K=10, labels=label_source, ccp=ccp,beta=0)", "\n", "loss", ",", "loss_vector", "=", "chosen_loss_c", "(", "f", "=", "output", ".", "narrow", "(", "0", ",", "0", ",", "data_source", ".", "size", "(", "0", ")", ")", ",", "K", "=", "K", ",", "labels", "=", "label_source", ",", "ccp", "=", "ccp", ",", "meta_method", "=", "meta_method", ")", "\n", "#loss = nn.CrossEntropyLoss()(output.narrow(0, 0, data_source.size(0)), label_source)", "\n", "softmax_output", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "output", ")", "\n", "if", "cl_method", "==", "'ga'", ":", "\n", "            ", "if", "torch", ".", "min", "(", "loss_vector", ")", ".", "item", "(", ")", "<", "0", ":", "\n", "                ", "loss_vector_with_zeros", "=", "torch", ".", "cat", "(", "(", "loss_vector", ".", "view", "(", "-", "1", ",", "1", ")", ",", "torch", ".", "zeros", "(", "K", ",", "requires_grad", "=", "True", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "to", "(", "device", ")", ")", ",", "1", ")", "\n", "min_loss_vector", ",", "_", "=", "torch", ".", "min", "(", "loss_vector_with_zeros", ",", "dim", "=", "1", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "min_loss_vector", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                        ", "p", ".", "grad", "=", "-", "1", "*", "p", ".", "grad", "\n", "", "", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "epoch", ">", "start_epoch", ":", "\n", "            ", "if", "method", "==", "'CDAN-E'", ":", "\n", "                ", "entropy", "=", "loss_func", ".", "Entropy", "(", "softmax_output", ")", "\n", "loss2", "=", "loss_func", ".", "CDAN", "(", "[", "feature", ",", "softmax_output", "]", ",", "ad_net", ",", "entropy", ",", "network", ".", "calc_coeff", "(", "num_iter", "*", "(", "epoch", "-", "start_epoch", ")", "+", "batch_idx", ")", ",", "random_layer", ")", "\n", "", "elif", "method", "==", "'CDAN'", ":", "\n", "                ", "loss2", "=", "loss_func", ".", "CDAN", "(", "[", "feature", ",", "softmax_output", "]", ",", "ad_net", ",", "None", ",", "None", ",", "random_layer", ")", "\n", "", "elif", "method", "==", "'DANN'", ":", "\n", "                ", "loss2", "=", "loss_func", ".", "DANN", "(", "feature", ",", "ad_net", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Method cannot be recognized.'", ")", "\n", "", "", "if", "epoch", ">", "start_epoch", ":", "\n", "            ", "loss2", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer_ad", ".", "step", "(", ")", "\n", "", "if", "(", "batch_idx", "+", "epoch", "*", "num_iter", ")", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss1: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "args", ".", "batch_size", ",", "num_iter", "*", "args", ".", "batch_size", ",", "\n", "100.", "*", "batch_idx", "/", "num_iter", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.train_mu.test": [[86, 102], ["model.eval", "len", "print", "model", "pred.eq().sum().item", "len", "data.cuda", "target.cuda", "output.data.cpu().max", "len", "pred.eq().sum", "len", "torch.CrossEntropyLoss", "output.data.cpu", "pred.eq", "target.data.cpu().view_as", "target.data.cpu"], "function", ["None"], ["", "", "", "def", "test", "(", "args", ",", "model", ",", "test_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "feature", ",", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "output", ",", "target", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "data", ".", "cpu", "(", ")", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "data", ".", "cpu", "(", ")", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.3f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "return", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.train_mu.main": [[103, 173], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "network.LeNet", "model.cuda.cuda", "network.AdversarialNetwork.cuda", "torch.SGD", "torch.SGD", "numpy.zeros", "range", "numpy.savetxt", "data_loader.data_loader", "network.RandomLayer", "network.AdversarialNetwork", "network.RandomLayer.cuda", "network.AdversarialNetwork", "model.cuda.parameters", "network.AdversarialNetwork.parameters", "train_mu.train", "train_mu.test", "train_mu.test", "numpy.savetxt", "data_loader.data_loader", "Exception", "model.cuda.output_num", "model.cuda.output_num"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.data_loader", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.train", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.test", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.test", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.data_loader", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.output_num", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.output_num"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'CDAN USPS MNIST'", ")", "\n", "parser", ".", "add_argument", "(", "'--method'", ",", "type", "=", "str", ",", "default", "=", "'CDAN-E'", ",", "choices", "=", "[", "'CDAN'", ",", "'CDAN-E'", ",", "'DANN'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--task'", ",", "default", "=", "'MNIST2USPS'", ",", "help", "=", "'task to perform'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "550", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "5e-5", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr2'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "metavar", "=", "'LR2'", ",", "\n", "help", "=", "'learning rate2 (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'cuda device id'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "parser", ".", "add_argument", "(", "'--random'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use random'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpu_id", "\n", "\n", "if", "args", ".", "task", "==", "'USPS2MNIST'", ":", "\n", "        ", "source_list", ",", "ordinary_train_dataset", ",", "target_list", ",", "test_list", ",", "ccp", "=", "data_loader", "(", "task", "=", "'U2M'", ")", "\n", "start_epoch", "=", "50", "\n", "decay_epoch", "=", "600", "\n", "", "elif", "args", ".", "task", "==", "'MNIST2USPS'", ":", "\n", "        ", "source_list", ",", "ordinary_train_dataset", ",", "target_list", ",", "test_list", ",", "ccp", "=", "data_loader", "(", "task", "=", "'M2U'", ")", "\n", "start_epoch", "=", "50", "\n", "decay_epoch", "=", "600", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'task cannot be recognized!'", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "source_list", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ",", "drop_last", "=", "True", ")", "\n", "train_loader1", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "target_list", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ",", "drop_last", "=", "True", ")", "\n", "o_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "ordinary_train_dataset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "test_list", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "\n", "model", "=", "network", ".", "LeNet", "(", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "class_num", "=", "10", "\n", "\n", "if", "args", ".", "random", ":", "\n", "        ", "random_layer", "=", "network", ".", "RandomLayer", "(", "[", "model", ".", "output_num", "(", ")", ",", "class_num", "]", ",", "500", ")", "\n", "ad_net", "=", "network", ".", "AdversarialNetwork", "(", "500", ",", "500", ")", "\n", "random_layer", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "random_layer", "=", "None", "\n", "ad_net", "=", "network", ".", "AdversarialNetwork", "(", "model", ".", "output_num", "(", ")", "*", "class_num", ",", "500", ")", "\n", "", "ad_net", "=", "ad_net", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "0.0005", ",", "momentum", "=", "0.9", ")", "\n", "optimizer_ad", "=", "optim", ".", "SGD", "(", "ad_net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr2", ",", "weight_decay", "=", "0.0005", ",", "momentum", "=", "0.9", ")", "\n", "\n", "save_table", "=", "np", ".", "zeros", "(", "shape", "=", "(", "args", ".", "epochs", ",", "3", ")", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "if", "epoch", "%", "decay_epoch", "==", "0", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "param_group", "[", "\"lr\"", "]", "*", "0.5", "\n", "", "", "train", "(", "args", ",", "model", ",", "ad_net", ",", "random_layer", ",", "train_loader", ",", "train_loader1", ",", "optimizer", ",", "optimizer_ad", ",", "epoch", ",", "start_epoch", ",", "args", ".", "method", ",", "ccp", ")", "\n", "acc1", "=", "test", "(", "args", ",", "model", ",", "o_train_loader", ")", "\n", "acc2", "=", "test", "(", "args", ",", "model", ",", "test_loader", ")", "\n", "save_table", "[", "epoch", "-", "1", ",", ":", "]", "=", "epoch", "-", "50", ",", "acc1", ",", "acc2", "\n", "np", ".", "savetxt", "(", "args", ".", "task", "+", "'_CDAN_E.txt'", ",", "save_table", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%1.3f'", ")", "\n", "", "np", ".", "savetxt", "(", "args", ".", "task", "+", "'_CDAN_E.txt'", ",", "save_table", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%1.3f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.train_um.train": [[23, 85], ["model.train", "len", "len", "range", "iter.next", "iter.next", "data_target.cuda.cuda", "optimizer.zero_grad", "optimizer_ad.zero_grad", "model", "loss_com.chosen_loss_c", "optimizer.step", "optimizer.zero_grad", "iter", "iter", "data_source.cuda", "label_source.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Softmax", "torch.sum.backward", "loss_func.DANN.backward", "optimizer.step", "optimizer_ad.step", "print", "output.narrow", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.min", "torch.min", "torch.min", "torch.min", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.backward", "torch.sum.backward", "loss.Entropy", "loss.CDAN", "data_source.size", "network.calc_coeff", "loss.CDAN", "torch.sum.item", "torch.min", "torch.min", "torch.min", "torch.min", "loss_vector.view", "torch.zeros().view().to", "torch.zeros().view().to", "torch.zeros().view().to", "torch.zeros().view().to", "loss.DANN", "ValueError", "torch.zeros().view", "torch.zeros().view", "torch.zeros().view", "torch.zeros().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.train", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss_com.chosen_loss_c", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.Entropy", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.CDAN", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.network.calc_coeff", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.CDAN", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.DANN"], ["def", "train", "(", "args", ",", "model", ",", "ad_net", ",", "random_layer", ",", "train_loader", ",", "train_loader1", ",", "optimizer", ",", "optimizer_ad", ",", "epoch", ",", "start_epoch", ",", "method", ",", "ccp", ")", ":", "\n", "    ", "cl_method", "=", "'ga'", "#choices=['ga', 'nn', 'free', 'pc', 'forward']", "\n", "meta_method", "=", "'free'", "if", "cl_method", "==", "'ga'", "else", "cl_method", "\n", "K", "=", "10", "\n", "\n", "model", ".", "train", "(", ")", "\n", "len_source", "=", "len", "(", "train_loader", ")", "\n", "len_target", "=", "len", "(", "train_loader1", ")", "\n", "if", "len_source", ">", "len_target", ":", "\n", "        ", "num_iter", "=", "len_source", "\n", "", "else", ":", "\n", "        ", "num_iter", "=", "len_target", "\n", "\n", "", "for", "batch_idx", "in", "range", "(", "num_iter", ")", ":", "\n", "        ", "if", "batch_idx", "%", "len_source", "==", "0", ":", "\n", "            ", "iter_source", "=", "iter", "(", "train_loader", ")", "\n", "", "if", "batch_idx", "%", "len_target", "==", "0", ":", "\n", "            ", "iter_target", "=", "iter", "(", "train_loader1", ")", "\n", "", "data_source", ",", "label_source", "=", "iter_source", ".", "next", "(", ")", "\n", "data_source", ",", "label_source", "=", "data_source", ".", "cuda", "(", ")", ",", "label_source", ".", "cuda", "(", ")", "\n", "data_target", ",", "label_target", "=", "iter_target", ".", "next", "(", ")", "\n", "data_target", "=", "data_target", ".", "cuda", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "optimizer_ad", ".", "zero_grad", "(", ")", "\n", "feature", ",", "output", "=", "model", "(", "torch", ".", "cat", "(", "(", "data_source", ",", "data_target", ")", ",", "0", ")", ")", "\n", "#err_s_label, loss_vector = non_negative_loss (f=output.narrow(0, 0, data_source.size(0)), K=10, labels=label_source, ccp=ccp,beta=0)", "\n", "loss", ",", "loss_vector", "=", "chosen_loss_c", "(", "f", "=", "output", ".", "narrow", "(", "0", ",", "0", ",", "data_source", ".", "size", "(", "0", ")", ")", ",", "K", "=", "K", ",", "labels", "=", "label_source", ",", "ccp", "=", "ccp", ",", "meta_method", "=", "meta_method", ")", "\n", "#loss = nn.CrossEntropyLoss()(output.narrow(0, 0, data_source.size(0)), label_source)", "\n", "softmax_output", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "output", ")", "\n", "if", "cl_method", "==", "'ga'", ":", "\n", "            ", "if", "torch", ".", "min", "(", "loss_vector", ")", ".", "item", "(", ")", "<", "0", ":", "\n", "                ", "loss_vector_with_zeros", "=", "torch", ".", "cat", "(", "(", "loss_vector", ".", "view", "(", "-", "1", ",", "1", ")", ",", "torch", ".", "zeros", "(", "K", ",", "requires_grad", "=", "True", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "to", "(", "device", ")", ")", ",", "1", ")", "\n", "min_loss_vector", ",", "_", "=", "torch", ".", "min", "(", "loss_vector_with_zeros", ",", "dim", "=", "1", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "min_loss_vector", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                        ", "p", ".", "grad", "=", "-", "1", "*", "p", ".", "grad", "\n", "", "", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "epoch", ">", "start_epoch", ":", "\n", "            ", "if", "method", "==", "'CDAN-E'", ":", "\n", "                ", "entropy", "=", "loss_func", ".", "Entropy", "(", "softmax_output", ")", "\n", "loss2", "=", "loss_func", ".", "CDAN", "(", "[", "feature", ",", "softmax_output", "]", ",", "ad_net", ",", "entropy", ",", "network", ".", "calc_coeff", "(", "num_iter", "*", "(", "epoch", "-", "start_epoch", ")", "+", "batch_idx", ")", ",", "random_layer", ")", "\n", "", "elif", "method", "==", "'CDAN'", ":", "\n", "                ", "loss2", "=", "loss_func", ".", "CDAN", "(", "[", "feature", ",", "softmax_output", "]", ",", "ad_net", ",", "None", ",", "None", ",", "random_layer", ")", "\n", "", "elif", "method", "==", "'DANN'", ":", "\n", "                ", "loss2", "=", "loss_func", ".", "DANN", "(", "feature", ",", "ad_net", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Method cannot be recognized.'", ")", "\n", "", "", "if", "epoch", ">", "start_epoch", ":", "\n", "            ", "loss2", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer_ad", ".", "step", "(", ")", "\n", "", "if", "(", "batch_idx", "+", "epoch", "*", "num_iter", ")", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss1: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "args", ".", "batch_size", ",", "num_iter", "*", "args", ".", "batch_size", ",", "\n", "100.", "*", "batch_idx", "/", "num_iter", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.train_um.test": [[86, 102], ["model.eval", "len", "print", "model", "pred.eq().sum().item", "len", "data.cuda", "target.cuda", "output.data.cpu().max", "len", "pred.eq().sum", "len", "torch.CrossEntropyLoss", "output.data.cpu", "pred.eq", "target.data.cpu().view_as", "target.data.cpu"], "function", ["None"], ["", "", "", "def", "test", "(", "args", ",", "model", ",", "test_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "feature", ",", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "output", ",", "target", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "data", ".", "cpu", "(", ")", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "data", ".", "cpu", "(", ")", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.3f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "return", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.train_um.main": [[103, 173], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "network.LeNet", "model.cuda.cuda", "network.AdversarialNetwork.cuda", "torch.SGD", "torch.SGD", "numpy.zeros", "range", "numpy.savetxt", "data_loader.data_loader", "network.RandomLayer", "network.AdversarialNetwork", "network.RandomLayer.cuda", "network.AdversarialNetwork", "model.cuda.parameters", "network.AdversarialNetwork.parameters", "train_um.train", "train_um.test", "train_um.test", "numpy.savetxt", "data_loader.data_loader", "Exception", "model.cuda.output_num", "model.cuda.output_num"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.data_loader", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.train", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.test", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.test", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.data_loader", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.output_num", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.output_num"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'CDAN USPS MNIST'", ")", "\n", "parser", ".", "add_argument", "(", "'--method'", ",", "type", "=", "str", ",", "default", "=", "'CDAN-E'", ",", "choices", "=", "[", "'CDAN'", ",", "'CDAN-E'", ",", "'DANN'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--task'", ",", "default", "=", "'USPS2MNIST'", ",", "help", "=", "'task to perform'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "550", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "5e-5", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr2'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "metavar", "=", "'LR2'", ",", "\n", "help", "=", "'learning rate2 (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'cuda device id'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "parser", ".", "add_argument", "(", "'--random'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use random'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpu_id", "\n", "\n", "if", "args", ".", "task", "==", "'USPS2MNIST'", ":", "\n", "        ", "source_list", ",", "ordinary_train_dataset", ",", "target_list", ",", "test_list", ",", "ccp", "=", "data_loader", "(", "task", "=", "'U2M'", ")", "\n", "start_epoch", "=", "50", "\n", "decay_epoch", "=", "600", "\n", "", "elif", "args", ".", "task", "==", "'MNIST2USPS'", ":", "\n", "        ", "source_list", ",", "ordinary_train_dataset", ",", "target_list", ",", "test_list", ",", "ccp", "=", "data_loader", "(", "task", "=", "'M2U'", ")", "\n", "start_epoch", "=", "50", "\n", "decay_epoch", "=", "600", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'task cannot be recognized!'", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "source_list", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ",", "drop_last", "=", "True", ")", "\n", "train_loader1", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "target_list", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ",", "drop_last", "=", "True", ")", "\n", "o_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "ordinary_train_dataset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "test_list", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "\n", "model", "=", "network", ".", "LeNet", "(", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "class_num", "=", "10", "\n", "\n", "if", "args", ".", "random", ":", "\n", "        ", "random_layer", "=", "network", ".", "RandomLayer", "(", "[", "model", ".", "output_num", "(", ")", ",", "class_num", "]", ",", "500", ")", "\n", "ad_net", "=", "network", ".", "AdversarialNetwork", "(", "500", ",", "500", ")", "\n", "random_layer", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "random_layer", "=", "None", "\n", "ad_net", "=", "network", ".", "AdversarialNetwork", "(", "model", ".", "output_num", "(", ")", "*", "class_num", ",", "500", ")", "\n", "", "ad_net", "=", "ad_net", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "0.0005", ",", "momentum", "=", "0.9", ")", "\n", "optimizer_ad", "=", "optim", ".", "SGD", "(", "ad_net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr2", ",", "weight_decay", "=", "0.0005", ",", "momentum", "=", "0.9", ")", "\n", "\n", "save_table", "=", "np", ".", "zeros", "(", "shape", "=", "(", "args", ".", "epochs", ",", "3", ")", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "if", "epoch", "%", "decay_epoch", "==", "0", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "param_group", "[", "\"lr\"", "]", "*", "0.5", "\n", "", "", "train", "(", "args", ",", "model", ",", "ad_net", ",", "random_layer", ",", "train_loader", ",", "train_loader1", ",", "optimizer", ",", "optimizer_ad", ",", "epoch", ",", "start_epoch", ",", "args", ".", "method", ",", "ccp", ")", "\n", "acc1", "=", "test", "(", "args", ",", "model", ",", "o_train_loader", ")", "\n", "acc2", "=", "test", "(", "args", ",", "model", ",", "test_loader", ")", "\n", "save_table", "[", "epoch", "-", "1", ",", ":", "]", "=", "epoch", "-", "50", ",", "acc1", ",", "acc2", "\n", "np", ".", "savetxt", "(", "args", ".", "task", "+", "'_CDAN_E.txt'", ",", "save_table", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%1.3f'", ")", "\n", "", "np", ".", "savetxt", "(", "args", ".", "task", "+", "'_CDAN_E.txt'", ",", "save_table", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%1.3f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.network.DTN.__init__": [[40, 66], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Dropout2d", "torch.Dropout2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Dropout2d", "torch.Dropout2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Dropout2d", "torch.Dropout2d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DTN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_params", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "0.1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "0.3", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "0.5", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "\n", "self", ".", "fc_params", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "256", "*", "4", "*", "4", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", "\n", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "10", ")", "\n", "self", ".", "__in_features", "=", "512", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.network.DTN.forward": [[67, 73], ["network.DTN.conv_params", "network.DTN.view", "network.DTN.fc_params", "network.DTN.classifier", "network.DTN.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_params", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc_params", "(", "x", ")", "\n", "y", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.network.DTN.output_num": [[74, 76], ["None"], "methods", ["None"], ["", "def", "output_num", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__in_features", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.network.LeNet.__init__": [[78, 93], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_params", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "20", ",", "kernel_size", "=", "5", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "20", ",", "50", ",", "kernel_size", "=", "5", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "fc_params", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "50", "*", "4", "*", "4", ",", "500", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "500", ",", "10", ")", "\n", "self", ".", "__in_features", "=", "500", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.network.LeNet.forward": [[95, 101], ["network.LeNet.conv_params", "network.LeNet.view", "network.LeNet.fc_params", "network.LeNet.classifier", "network.LeNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_params", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc_params", "(", "x", ")", "\n", "y", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.network.LeNet.output_num": [[102, 104], ["None"], "methods", ["None"], ["", "def", "output_num", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__in_features", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.network.AdversarialNetwork.__init__": [[106, 122], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sigmoid", "torch.Sigmoid", "network.AdversarialNetwork.apply"], "methods", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_feature", ",", "hidden_size", ")", ":", "\n", "    ", "super", "(", "AdversarialNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ad_layer1", "=", "nn", ".", "Linear", "(", "in_feature", ",", "hidden_size", ")", "\n", "self", ".", "ad_layer2", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "ad_layer3", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "iter_num", "=", "0", "\n", "self", ".", "alpha", "=", "10", "\n", "self", ".", "low", "=", "0.0", "\n", "self", ".", "high", "=", "1.0", "\n", "self", ".", "max_iter", "=", "10000.0", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.network.AdversarialNetwork.forward": [[123, 138], ["network.calc_coeff", "network.AdversarialNetwork.register_hook", "network.AdversarialNetwork.ad_layer1", "network.AdversarialNetwork.relu1", "network.AdversarialNetwork.dropout1", "network.AdversarialNetwork.ad_layer2", "network.AdversarialNetwork.relu2", "network.AdversarialNetwork.dropout2", "network.AdversarialNetwork.ad_layer3", "network.AdversarialNetwork.sigmoid", "network.grl_hook"], "methods", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.network.calc_coeff", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.grl_hook"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "training", ":", "\n", "        ", "self", ".", "iter_num", "+=", "1", "\n", "", "coeff", "=", "calc_coeff", "(", "self", ".", "iter_num", ",", "self", ".", "high", ",", "self", ".", "low", ",", "self", ".", "alpha", ",", "self", ".", "max_iter", ")", "\n", "x", "=", "x", "*", "1.0", "\n", "x", ".", "register_hook", "(", "grl_hook", "(", "coeff", ")", ")", "\n", "x", "=", "self", ".", "ad_layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout1", "(", "x", ")", "\n", "x", "=", "self", ".", "ad_layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout2", "(", "x", ")", "\n", "y", "=", "self", ".", "ad_layer3", "(", "x", ")", "\n", "y", "=", "self", ".", "sigmoid", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.network.AdversarialNetwork.output_num": [[139, 141], ["None"], "methods", ["None"], ["", "def", "output_num", "(", "self", ")", ":", "\n", "    ", "return", "1", "\n", "", "def", "get_parameters", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.network.AdversarialNetwork.get_parameters": [[141, 143], ["network.AdversarialNetwork.parameters"], "methods", ["None"], ["", "def", "get_parameters", "(", "self", ")", ":", "\n", "    ", "return", "[", "{", "\"params\"", ":", "self", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.network.calc_coeff": [[18, 20], ["numpy.float", "numpy.exp"], "function", ["None"], ["def", "calc_coeff", "(", "iter_num", ",", "high", "=", "1.0", ",", "low", "=", "0.0", ",", "alpha", "=", "10.0", ",", "max_iter", "=", "10000.0", ")", ":", "\n", "    ", "return", "np", ".", "float", "(", "2.0", "*", "(", "high", "-", "low", ")", "/", "(", "1.0", "+", "np", ".", "exp", "(", "-", "alpha", "*", "iter_num", "/", "max_iter", ")", ")", "-", "(", "high", "-", "low", ")", "+", "low", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.network.init_weights": [[21, 32], ["torch.init.kaiming_uniform_", "torch.init.zeros_", "classname.find", "classname.find", "classname.find", "torch.init.normal_", "torch.init.zeros_", "classname.find", "torch.init.xavier_normal_", "torch.init.zeros_"], "function", ["None"], ["", "def", "init_weights", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv2d'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'ConvTranspose2d'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "1.0", ",", "0.02", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.network.grl_hook": [[33, 37], ["grad.clone"], "function", ["None"], ["", "", "def", "grl_hook", "(", "coeff", ")", ":", "\n", "    ", "def", "fun1", "(", "grad", ")", ":", "\n", "        ", "return", "-", "coeff", "*", "grad", ".", "clone", "(", ")", "\n", "", "return", "fun1", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.Entropy": [[17, 23], ["input_.size", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["def", "Entropy", "(", "input_", ")", ":", "\n", "    ", "bs", "=", "input_", ".", "size", "(", "0", ")", "\n", "epsilon", "=", "1e-5", "\n", "entropy", "=", "-", "input_", "*", "torch", ".", "log", "(", "input_", "+", "epsilon", ")", "\n", "entropy", "=", "torch", ".", "sum", "(", "entropy", ",", "dim", "=", "1", ")", "\n", "return", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.grl_hook": [[24, 28], ["grad.clone"], "function", ["None"], ["", "def", "grl_hook", "(", "coeff", ")", ":", "\n", "    ", "def", "fun1", "(", "grad", ")", ":", "\n", "        ", "return", "-", "coeff", "*", "grad", ".", "clone", "(", ")", "\n", "", "return", "fun1", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.CDAN": [[29, 54], ["input_list[].detach", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.bmm", "torch.bmm", "torch.bmm", "ad_net", "random_layer.forward", "ad_net", "input_list[].detach.size", "entropy.register_hook", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "input_list[].detach.unsqueeze", "feature.unsqueeze", "torch.bmm.view", "random_layer.forward.view", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "loss.grl_hook", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.BCELoss", "random_layer.forward.size", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "input_list[].detach.size", "feature.size", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "feature.size", "feature.size", "weight.view", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "numpy.array", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.BCELoss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.forward", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.grl_hook"], ["", "def", "CDAN", "(", "input_list", ",", "ad_net", ",", "entropy", "=", "None", ",", "coeff", "=", "None", ",", "random_layer", "=", "None", ")", ":", "\n", "    ", "softmax_output", "=", "input_list", "[", "1", "]", ".", "detach", "(", ")", "\n", "feature", "=", "input_list", "[", "0", "]", "\n", "if", "random_layer", "is", "None", ":", "\n", "        ", "op_out", "=", "torch", ".", "bmm", "(", "softmax_output", ".", "unsqueeze", "(", "2", ")", ",", "feature", ".", "unsqueeze", "(", "1", ")", ")", "\n", "ad_out", "=", "ad_net", "(", "op_out", ".", "view", "(", "-", "1", ",", "softmax_output", ".", "size", "(", "1", ")", "*", "feature", ".", "size", "(", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "random_out", "=", "random_layer", ".", "forward", "(", "[", "feature", ",", "softmax_output", "]", ")", "\n", "ad_out", "=", "ad_net", "(", "random_out", ".", "view", "(", "-", "1", ",", "random_out", ".", "size", "(", "1", ")", ")", ")", "\n", "", "batch_size", "=", "softmax_output", ".", "size", "(", "0", ")", "//", "2", "\n", "dc_target", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "[", "1", "]", "]", "*", "batch_size", "+", "[", "[", "0", "]", "]", "*", "batch_size", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "if", "entropy", "is", "not", "None", ":", "\n", "        ", "entropy", ".", "register_hook", "(", "grl_hook", "(", "coeff", ")", ")", "\n", "entropy", "=", "1.0", "+", "torch", ".", "exp", "(", "-", "entropy", ")", "\n", "source_mask", "=", "torch", ".", "ones_like", "(", "entropy", ")", "\n", "source_mask", "[", "feature", ".", "size", "(", "0", ")", "//", "2", ":", "]", "=", "0", "\n", "source_weight", "=", "entropy", "*", "source_mask", "\n", "target_mask", "=", "torch", ".", "ones_like", "(", "entropy", ")", "\n", "target_mask", "[", "0", ":", "feature", ".", "size", "(", "0", ")", "//", "2", "]", "=", "0", "\n", "target_weight", "=", "entropy", "*", "target_mask", "\n", "weight", "=", "source_weight", "/", "torch", ".", "sum", "(", "source_weight", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "+", "target_weight", "/", "torch", ".", "sum", "(", "target_weight", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "return", "torch", ".", "sum", "(", "weight", ".", "view", "(", "-", "1", ",", "1", ")", "*", "nn", ".", "BCELoss", "(", "reduction", "=", "'none'", ")", "(", "ad_out", ",", "dc_target", ")", ")", "/", "torch", ".", "sum", "(", "weight", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "BCELoss", "(", ")", "(", "ad_out", ",", "dc_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.ablation.loss.DANN": [[55, 60], ["ad_net", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "ad_net.size", "torch.BCELoss", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "function", ["None"], ["", "", "def", "DANN", "(", "features", ",", "ad_net", ")", ":", "\n", "    ", "ad_out", "=", "ad_net", "(", "features", ")", "\n", "batch_size", "=", "ad_out", ".", "size", "(", "0", ")", "//", "2", "\n", "dc_target", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "[", "1", "]", "]", "*", "batch_size", "+", "[", "[", "0", "]", "]", "*", "batch_size", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "return", "nn", ".", "BCELoss", "(", ")", "(", "ad_out", ",", "dc_target", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_MU.train": [[24, 54], ["model.train", "len", "len", "range", "iter.next", "iter.next", "data_target.cuda.cuda", "optimizer.zero_grad", "loss.backward", "optimizer.step", "iter", "iter", "data_source.cuda", "label_source.cuda", "nn.CrossEntropyLoss", "print", "float", "numpy.exp", "loss.item"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.train"], ["def", "train", "(", "args", ",", "model", ",", "train_loader", ",", "train_loader1", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "len_source", "=", "len", "(", "train_loader", ")", "\n", "len_target", "=", "len", "(", "train_loader1", ")", "\n", "if", "len_source", ">", "len_target", ":", "\n", "        ", "num_iter", "=", "len_source", "\n", "", "else", ":", "\n", "        ", "num_iter", "=", "len_target", "\n", "\n", "", "for", "batch_idx", "in", "range", "(", "num_iter", ")", ":", "\n", "        ", "if", "batch_idx", "%", "len_source", "==", "0", ":", "\n", "            ", "iter_source", "=", "iter", "(", "train_loader", ")", "\n", "", "if", "batch_idx", "%", "len_target", "==", "0", ":", "\n", "            ", "iter_target", "=", "iter", "(", "train_loader1", ")", "\n", "", "data_source", ",", "label_source", "=", "iter_source", ".", "next", "(", ")", "\n", "data_source", ",", "label_source", "=", "data_source", ".", "cuda", "(", ")", ",", "label_source", ".", "cuda", "(", ")", "\n", "data_target", ",", "label_target", "=", "iter_target", ".", "next", "(", ")", "\n", "data_target", "=", "data_target", ".", "cuda", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "src_pred", ",", "mmd_loss", "=", "model", "(", "data_source", ",", "data_target", ")", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "src_pred", ",", "label_source", ")", "\n", "p", "=", "float", "(", "batch_idx", "+", "(", "epoch", "-", "1", ")", "*", "num_iter", ")", "/", "args", ".", "epochs", "/", "num_iter", "\n", "lamda", "=", "2.", "/", "(", "1.", "+", "np", ".", "exp", "(", "-", "10", "*", "p", ")", ")", "-", "1", "\n", "loss", "+=", "lamda", "*", "mmd_loss", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "(", "batch_idx", "+", "epoch", "*", "num_iter", ")", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "args", ".", "batch_size", ",", "num_iter", "*", "args", ".", "batch_size", ",", "\n", "100.", "*", "batch_idx", "/", "num_iter", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_MU.test": [[55, 71], ["model.eval", "len", "print", "pred.eq().sum().item", "len", "data.cuda", "target.cuda", "output.data.cpu().max", "len", "pred.eq().sum", "len", "nn.CrossEntropyLoss", "output.data.cpu", "pred.eq", "target.data.cpu().view_as", "target.data.cpu"], "function", ["None"], ["", "", "", "def", "test", "(", "args", ",", "model", ",", "test_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "output", ",", "mmd_loss", "=", "model", "(", "data", ",", "data", ")", "\n", "test_loss", "+=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "output", ",", "target", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "data", ".", "cpu", "(", ")", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "data", ".", "cpu", "(", ")", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.3f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "return", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_MU.main": [[72, 117], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ResNet.NUMNet", "model.cuda.cuda", "torch.SGD", "numpy.zeros", "range", "numpy.savetxt", "data_loader.data_loader", "model.cuda.parameters", "DAN_MU.train", "DAN_MU.test", "numpy.savetxt", "data_loader.data_loader", "Exception"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.data_loader", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.train", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.test", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.data_loader"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'DAN USPS MNIST'", ")", "\n", "parser", ".", "add_argument", "(", "'--task'", ",", "default", "=", "'MNIST2USPS'", ",", "help", "=", "'task to perform'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'cuda device id'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpu_id", "\n", "\n", "if", "args", ".", "task", "==", "'USPS2MNIST'", ":", "\n", "        ", "source_list", ",", "target_list", ",", "test_list", "=", "data_loader", "(", "task", "=", "'U2M'", ")", "\n", "", "elif", "args", ".", "task", "==", "'MNIST2USPS'", ":", "\n", "        ", "source_list", ",", "target_list", ",", "test_list", "=", "data_loader", "(", "task", "=", "'M2U'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'task cannot be recognized!'", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "source_list", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "train_loader1", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "target_list", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "test_list", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "model", "=", "models", ".", "NUMNet", "(", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "5e-4", ",", "momentum", "=", "0.9", ")", "\n", "\n", "save_table", "=", "np", ".", "zeros", "(", "shape", "=", "(", "args", ".", "epochs", ",", "2", ")", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "train", "(", "args", ",", "model", ",", "train_loader", ",", "train_loader1", ",", "optimizer", ",", "epoch", ")", "\n", "acc", "=", "test", "(", "args", ",", "model", ",", "test_loader", ")", "\n", "save_table", "[", "epoch", "-", "1", ",", ":", "]", "=", "epoch", ",", "acc", "\n", "np", ".", "savetxt", "(", "args", ".", "task", "+", "'_50m_128_0.005.txt'", ",", "save_table", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%1.3f'", ")", "\n", "", "np", ".", "savetxt", "(", "args", ".", "task", "+", "'_50m_128_0.005.txt'", ",", "save_table", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%1.3f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.usps.USPS.__init__": [[41, 66], ["os.path.expanduser", "usps.USPS.load_samples", "numpy.squeeze().astype", "usps.USPS.download", "usps.USPS._check_exists", "RuntimeError", "numpy.arange", "numpy.squeeze"], "methods", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.usps.USPS.load_samples", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.usps.USPS.download", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.usps.USPS._check_exists"], ["def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "\"\"\"Init USPS dataset.\"\"\"", "\n", "# init params", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "filename", "=", "\"usps_28x28.pkl\"", "\n", "self", ".", "train", "=", "train", "\n", "# Num of Train = 7438, Num ot Test 1860", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "dataset_size", "=", "None", "\n", "\n", "# download dataset.", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "", "if", "not", "self", ".", "_check_exists", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Dataset not found.\"", "+", "\n", "\" You can use download=True to download it\"", ")", "\n", "\n", "", "self", ".", "train_data", ",", "self", ".", "train_labels", "=", "self", ".", "load_samples", "(", ")", "\n", "if", "self", ".", "train", ":", "\n", "            ", "total_num_samples", "=", "self", ".", "train_labels", ".", "shape", "[", "0", "]", "\n", "indices", "=", "np", ".", "arange", "(", "total_num_samples", ")", "\n", "self", ".", "train_data", "=", "self", ".", "train_data", "[", "indices", "[", "0", ":", "self", ".", "dataset_size", "]", ",", ":", ":", "]", "\n", "self", ".", "train_labels", "=", "self", ".", "train_labels", "[", "indices", "[", "0", ":", "self", ".", "dataset_size", "]", "]", "\n", "", "self", ".", "train_data", "*=", "255.0", "\n", "self", ".", "train_data", "=", "np", ".", "squeeze", "(", "self", ".", "train_data", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.usps.USPS.__getitem__": [[67, 80], ["PIL.Image.fromarray", "usps.USPS.copy", "usps.USPS.transform", "label.astype"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Get images and target for data loader.\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "label", "=", "self", ".", "train_data", "[", "index", "]", ",", "self", ".", "train_labels", "[", "index", "]", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "'L'", ")", "\n", "img", "=", "img", ".", "copy", "(", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "label", ".", "astype", "(", "\"int64\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.usps.USPS.__len__": [[81, 84], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return size of dataset.\"\"\"", "\n", "return", "len", "(", "self", ".", "train_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.usps.USPS._check_exists": [[85, 88], ["os.path.exists", "os.path.join"], "methods", ["None"], ["", "def", "_check_exists", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if dataset is download and in right place.\"\"\"", "\n", "return", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.usps.USPS.download": [[89, 101], ["os.path.join", "os.path.dirname", "os.path.isfile", "print", "urllib.request.urlretrieve", "print", "os.path.isdir", "os.makedirs", "os.path.abspath"], "methods", ["None"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "\"\"\"Download dataset.\"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", "\n", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dirname", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "            ", "return", "\n", "", "print", "(", "\"Download %s to %s\"", "%", "(", "self", ".", "url", ",", "os", ".", "path", ".", "abspath", "(", "filename", ")", ")", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "self", ".", "url", ",", "filename", ")", "\n", "print", "(", "\"[DONE]\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.usps.USPS.load_samples": [[102, 117], ["os.path.join", "gzip.open", "pickle.load", "gzip.open.close"], "methods", ["None"], ["", "def", "load_samples", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load sample images from dataset.\"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", "\n", "f", "=", "gzip", ".", "open", "(", "filename", ",", "\"rb\"", ")", "\n", "data_set", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "\"bytes\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "if", "self", ".", "train", ":", "\n", "            ", "images", "=", "data_set", "[", "0", "]", "[", "0", "]", "\n", "labels", "=", "data_set", "[", "0", "]", "[", "1", "]", "\n", "self", ".", "dataset_size", "=", "labels", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "images", "=", "data_set", "[", "1", "]", "[", "0", "]", "\n", "labels", "=", "data_set", "[", "1", "]", "[", "1", "]", "\n", "self", ".", "dataset_size", "=", "labels", ".", "shape", "[", "0", "]", "\n", "", "return", "images", ",", "labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.ResNet.NUMNet.__init__": [[17, 32], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "NUMNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_params", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "20", ",", "kernel_size", "=", "5", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "20", ",", "50", ",", "kernel_size", "=", "5", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "fc_params", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "50", "*", "4", "*", "4", ",", "500", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "500", ",", "10", ")", "\n", "self", ".", "__in_features", "=", "500", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.ResNet.NUMNet.forward": [[34, 48], ["ResNet.NUMNet.conv_params", "ResNet.NUMNet.view", "ResNet.NUMNet.fc_params", "ResNet.NUMNet.classifier", "ResNet.NUMNet.size", "ResNet.NUMNet.conv_params", "ResNet.NUMNet.view", "ResNet.NUMNet.fc_params", "mmd.mmd_rbf_accelerate", "ResNet.NUMNet.size"], "methods", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.mmd.mmd_rbf_accelerate"], ["", "def", "forward", "(", "self", ",", "source", ",", "target", ")", ":", "\n", "        ", "loss", "=", "0", "\n", "source", "=", "self", ".", "conv_params", "(", "source", ")", "\n", "source", "=", "source", ".", "view", "(", "source", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "source", "=", "self", ".", "fc_params", "(", "source", ")", "\n", "if", "self", ".", "training", "==", "True", ":", "\n", "            ", "target", "=", "self", ".", "conv_params", "(", "target", ")", "\n", "target", "=", "target", ".", "view", "(", "target", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "target", "=", "self", ".", "fc_params", "(", "target", ")", "\n", "loss", "+=", "mmd", ".", "mmd_rbf_accelerate", "(", "source", ",", "target", ")", "\n", "#loss += mmd.mmd_rbf_noaccelerate(source, target)", "\n", "\n", "", "source", "=", "self", ".", "classifier", "(", "source", ")", "\n", "return", "source", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.GetLoader.__init__": [[52, 68], ["open", "open.readlines", "open.close", "len", "data_loader.GetLoader.img_paths.append", "data_loader.GetLoader.img_labels.append"], "methods", ["None"], ["data_list", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "self", ".", "n_data", "=", "len", "(", "data_list", ")", "\n", "\n", "self", ".", "img_paths", "=", "[", "]", "\n", "self", ".", "img_labels", "=", "[", "]", "\n", "\n", "for", "data", "in", "data_list", ":", "\n", "            ", "self", ".", "img_paths", ".", "append", "(", "data", "[", ":", "-", "3", "]", ")", "\n", "self", ".", "img_labels", ".", "append", "(", "data", "[", "-", "2", "]", ")", "\n", "\n", "", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img_paths", ",", "labels", "=", "self", ".", "img_paths", "[", "item", "]", ",", "self", ".", "img_labels", "[", "item", "]", "\n", "imgs", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "img_paths", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.GetLoader.__getitem__": [[69, 78], ["PIL.Image.open().convert", "data_loader.GetLoader.transform", "int", "PIL.Image.open", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["            ", "imgs", "=", "self", ".", "transform", "(", "imgs", ")", "\n", "labels", "=", "int", "(", "labels", ")", "\n", "\n", "", "return", "imgs", ",", "labels", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_data", "\n", "\n", "", "", "def", "data_loader", "(", "task", ")", ":", "\n", "    ", "if", "task", "==", "'M2U'", ":", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.GetLoader.__len__": [[79, 81], ["None"], "methods", ["None"], ["#M1U1", "\n", "        ", "M_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "ordinary_train_dataset", "=", "dsets", ".", "MNIST", "(", "root", "=", "'/data/menwu/data/MNIST'", ",", "train", "=", "True", ",", "transform", "=", "M_transform", ",", "download", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.generate_compl_labels": [[26, 37], ["numpy.arange", "numpy.repeat", "numpy.ones", "candidates[].reshape", "numpy.random.randint", "torch.max", "torch.max", "torch.max", "np.repeat.reshape", "len", "len", "len", "len", "range", "labels.numpy", "numpy.arange", "numpy.array", "len", "len"], "function", ["None"], ["mask", "=", "np", ".", "ones", "(", "(", "len", "(", "labels", ")", ",", "K", ")", ",", "dtype", "=", "bool", ")", "\n", "mask", "[", "range", "(", "len", "(", "labels", ")", ")", ",", "labels", ".", "numpy", "(", ")", "]", "=", "False", "\n", "candidates_", "=", "candidates", "[", "mask", "]", ".", "reshape", "(", "len", "(", "labels", ")", ",", "K", "-", "1", ")", "# this is the candidates without true class", "\n", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "K", "-", "1", ",", "len", "(", "labels", ")", ")", "\n", "complementary_labels", "=", "candidates_", "[", "np", ".", "arange", "(", "len", "(", "labels", ")", ")", ",", "np", ".", "array", "(", "idx", ")", "]", "\n", "return", "complementary_labels", "\n", "\n", "", "def", "class_prior", "(", "complementary_labels", ")", ":", "\n", "    ", "return", "np", ".", "bincount", "(", "complementary_labels", ")", "/", "len", "(", "complementary_labels", ")", "\n", "\n", "", "def", "prepare_train_loaders", "(", "full_train_loader", ",", "batch_size", ",", "ordinary_train_dataset", ")", ":", "\n", "    ", "for", "i", ",", "(", "data", ",", "labels", ")", "in", "enumerate", "(", "full_train_loader", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.class_prior": [[38, 40], ["numpy.bincount", "len"], "function", ["None"], ["            ", "K", "=", "torch", ".", "max", "(", "labels", ")", "+", "1", "# K is number of classes, full_train_loader is full batch", "\n", "", "complementary_labels", "=", "generate_compl_labels", "(", "labels", ")", "\n", "ccp", "=", "class_prior", "(", "complementary_labels", ")", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.prepare_train_loaders": [[41, 50], ["enumerate", "data_loader.generate_compl_labels", "data_loader.class_prior", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.max", "torch.max", "torch.max", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.generate_compl_labels", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.class_prior"], ["complementary_dataset", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "data", ",", "torch", ".", "from_numpy", "(", "complementary_labels", ")", ".", "long", "(", ")", ")", "\n", "ordinary_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "ordinary_train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "complementary_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "complementary_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "return", "complementary_dataset", ",", "ccp", "\n", "\n", "", "class", "GetLoader", "(", "data", ".", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "data_root", ",", "data_list", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "data_root", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.accu_check": [[82, 114], ["torch.randn().long", "torch.randn().long", "torch.randn().long", "torch.randn().long", "torch.randn().long", "torch.randn().long", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.narrow", "print", "torch.cat.narrow", "print", "torch.cat.narrow", "print", "print", "print", "print", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "model", "sm", "torch.max", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "labels.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.long", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "labels.cuda", "images.cuda"], "function", ["None"], ["full_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "ordinary_train_dataset", ",", "batch_size", "=", "len", "(", "ordinary_train_dataset", ")", ",", "shuffle", "=", "True", ")", "\n", "complementary_dataset", ",", "ccp", "=", "prepare_train_loaders", "(", "full_train_loader", ",", "128", ",", "ordinary_train_dataset", ")", "\n", "\n", "U_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "[", "28", ",", "28", "]", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "test_dataset", "=", "USPS", "(", "'/data/menwu/data/USPS2/Test'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "U_transform", ")", "\n", "ordinary_train_dataset2", "=", "USPS", "(", "'/data/menwu/data/USPS2/train'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "U_transform", ")", "\n", "", "elif", "task", "==", "'U2M'", ":", "\n", "#M1U1", "\n", "        ", "U_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "[", "28", ",", "28", "]", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "ordinary_train_dataset", "=", "USPS", "(", "'/data/menwu/data/USPS2/train'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "U_transform", ")", "\n", "full_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "ordinary_train_dataset", ",", "batch_size", "=", "len", "(", "ordinary_train_dataset", ")", ",", "shuffle", "=", "True", ")", "\n", "complementary_dataset", ",", "ccp", "=", "prepare_train_loaders", "(", "full_train_loader", ",", "128", ",", "ordinary_train_dataset", ")", "\n", "\n", "M_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "test_dataset", "=", "dsets", ".", "MNIST", "(", "root", "=", "'/data/menwu/data/MNIST'", ",", "train", "=", "False", ",", "transform", "=", "M_transform", ")", "\n", "ordinary_train_dataset2", "=", "dsets", ".", "MNIST", "(", "root", "=", "'/data/menwu/data/MNIST'", ",", "train", "=", "True", ",", "transform", "=", "M_transform", ",", "download", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Wrong task!'", ")", "\n", "\n", "", "return", "complementary_dataset", ",", "ordinary_train_dataset", ",", "ordinary_train_dataset2", ",", "test_dataset", ",", "ccp", "", "", ""]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.data_loader": [[115, 144], ["torchvision.Compose", "torchvision.MNIST", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.load", "torch.load", "torch.load", "torch.randn().float", "torch.randn().float", "torch.randn().float", "data_loader.accu_check", "torchvision.Compose", "usps.USPS", "usps.USPS", "os.path.join", "os.path.join", "torchvision.Compose", "usps.USPS", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.load", "torch.load", "torch.load", "torch.randn().float", "torch.randn().float", "torch.randn().float", "data_loader.accu_check", "torchvision.Compose", "torchvision.MNIST", "torchvision.MNIST", "print", "torchvision.ToTensor", "torchvision.Normalize", "torch.randn", "torch.randn", "torch.randn", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "os.path.join", "os.path.join", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "torch.randn", "torch.randn", "torch.randn", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.accu_check", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.accu_check"], []], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.train": [[24, 54], ["model.train", "len", "len", "range", "iter.next", "iter.next", "data_target.cuda.cuda", "optimizer.zero_grad", "loss.backward", "optimizer.step", "iter", "iter", "data_source.cuda", "label_source.cuda", "nn.CrossEntropyLoss", "print", "float", "numpy.exp", "loss.item"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.train"], ["def", "train", "(", "args", ",", "model", ",", "train_loader", ",", "train_loader1", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "len_source", "=", "len", "(", "train_loader", ")", "\n", "len_target", "=", "len", "(", "train_loader1", ")", "\n", "if", "len_source", ">", "len_target", ":", "\n", "        ", "num_iter", "=", "len_source", "\n", "", "else", ":", "\n", "        ", "num_iter", "=", "len_target", "\n", "\n", "", "for", "batch_idx", "in", "range", "(", "num_iter", ")", ":", "\n", "        ", "if", "batch_idx", "%", "len_source", "==", "0", ":", "\n", "            ", "iter_source", "=", "iter", "(", "train_loader", ")", "\n", "", "if", "batch_idx", "%", "len_target", "==", "0", ":", "\n", "            ", "iter_target", "=", "iter", "(", "train_loader1", ")", "\n", "", "data_source", ",", "label_source", "=", "iter_source", ".", "next", "(", ")", "\n", "data_source", ",", "label_source", "=", "data_source", ".", "cuda", "(", ")", ",", "label_source", ".", "cuda", "(", ")", "\n", "data_target", ",", "label_target", "=", "iter_target", ".", "next", "(", ")", "\n", "data_target", "=", "data_target", ".", "cuda", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "src_pred", ",", "mmd_loss", "=", "model", "(", "data_source", ",", "data_target", ")", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "src_pred", ",", "label_source", ")", "\n", "p", "=", "float", "(", "batch_idx", "+", "(", "epoch", "-", "1", ")", "*", "num_iter", ")", "/", "args", ".", "epochs", "/", "num_iter", "\n", "lamda", "=", "2.", "/", "(", "1.", "+", "np", ".", "exp", "(", "-", "10", "*", "p", ")", ")", "-", "1", "\n", "loss", "+=", "lamda", "*", "mmd_loss", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "(", "batch_idx", "+", "epoch", "*", "num_iter", ")", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "args", ".", "batch_size", ",", "num_iter", "*", "args", ".", "batch_size", ",", "\n", "100.", "*", "batch_idx", "/", "num_iter", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.test": [[55, 71], ["model.eval", "len", "print", "pred.eq().sum().item", "len", "data.cuda", "target.cuda", "output.data.cpu().max", "len", "pred.eq().sum", "len", "nn.CrossEntropyLoss", "output.data.cpu", "pred.eq", "target.data.cpu().view_as", "target.data.cpu"], "function", ["None"], ["", "", "", "def", "test", "(", "args", ",", "model", ",", "test_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "output", ",", "mmd_loss", "=", "model", "(", "data", ",", "data", ")", "\n", "test_loss", "+=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "output", ",", "target", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "data", ".", "cpu", "(", ")", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "data", ".", "cpu", "(", ")", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.3f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "return", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.main": [[72, 117], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ResNet.NUMNet", "model.cuda.cuda", "torch.SGD", "numpy.zeros", "range", "numpy.savetxt", "data_loader.data_loader", "model.cuda.parameters", "DAN_UM.train", "DAN_UM.test", "numpy.savetxt", "data_loader.data_loader", "Exception"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.data_loader", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.train", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.DAN_UM.test", "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.data_loader.data_loader"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'DAN USPS MNIST'", ")", "\n", "parser", ".", "add_argument", "(", "'--task'", ",", "default", "=", "'USPS2MNIST'", ",", "help", "=", "'task to perform'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'cuda device id'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpu_id", "\n", "\n", "if", "args", ".", "task", "==", "'USPS2MNIST'", ":", "\n", "        ", "source_list", ",", "target_list", ",", "test_list", "=", "data_loader", "(", "task", "=", "'U2M'", ")", "\n", "", "elif", "args", ".", "task", "==", "'MNIST2USPS'", ":", "\n", "        ", "source_list", ",", "target_list", ",", "test_list", "=", "data_loader", "(", "task", "=", "'M2U'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'task cannot be recognized!'", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "source_list", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "train_loader1", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "target_list", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "test_list", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "model", "=", "models", ".", "NUMNet", "(", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "5e-4", ",", "momentum", "=", "0.9", ")", "\n", "\n", "save_table", "=", "np", ".", "zeros", "(", "shape", "=", "(", "args", ".", "epochs", ",", "2", ")", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "train", "(", "args", ",", "model", ",", "train_loader", ",", "train_loader1", ",", "optimizer", ",", "epoch", ")", "\n", "acc", "=", "test", "(", "args", ",", "model", ",", "test_loader", ")", "\n", "save_table", "[", "epoch", "-", "1", ",", ":", "]", "=", "epoch", ",", "acc", "\n", "np", ".", "savetxt", "(", "args", ".", "task", "+", "'_50m_128_0.005.txt'", ",", "save_table", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%1.3f'", ")", "\n", "", "np", ".", "savetxt", "(", "args", ".", "task", "+", "'_50m_128_0.005.txt'", ",", "save_table", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%1.3f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.__init__": [[15, 30], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "UMNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_params", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "20", ",", "kernel_size", "=", "5", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "20", ",", "50", ",", "kernel_size", "=", "5", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "fc_params", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "50", "*", "4", "*", "4", ",", "500", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "500", ",", "10", ")", "\n", "self", ".", "__in_features", "=", "500", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.forward": [[32, 38], ["model.UMNet.conv_params", "model.UMNet.view", "model.UMNet.fc_params", "model.UMNet.classifier", "model.UMNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_params", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc_params", "(", "x", ")", "\n", "y", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.model.UMNet.output_num": [[39, 41], ["None"], "methods", ["None"], ["", "def", "output_num", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__in_features", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.mmd.guassian_kernel": [[15, 29], ["torch.cat", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "sum", "int", "int", "int", "int", "int", "int", "int", "int", "torch.exp", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.sum", "range", "source.size", "target.size"], "function", ["None"], ["def", "guassian_kernel", "(", "source", ",", "target", ",", "kernel_mul", "=", "2.0", ",", "kernel_num", "=", "5", ",", "fix_sigma", "=", "None", ")", ":", "\n", "    ", "n_samples", "=", "int", "(", "source", ".", "size", "(", ")", "[", "0", "]", ")", "+", "int", "(", "target", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "total", "=", "torch", ".", "cat", "(", "[", "source", ",", "target", "]", ",", "dim", "=", "0", ")", "\n", "total0", "=", "total", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "1", ")", ")", ")", "\n", "total1", "=", "total", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "1", ")", ")", ")", "\n", "L2_distance", "=", "(", "(", "total0", "-", "total1", ")", "**", "2", ")", ".", "sum", "(", "2", ")", "\n", "if", "fix_sigma", ":", "\n", "        ", "bandwidth", "=", "fix_sigma", "\n", "", "else", ":", "\n", "        ", "bandwidth", "=", "torch", ".", "sum", "(", "L2_distance", ".", "data", ")", "/", "(", "n_samples", "**", "2", "-", "n_samples", ")", "\n", "", "bandwidth", "/=", "kernel_mul", "**", "(", "kernel_num", "//", "2", ")", "\n", "bandwidth_list", "=", "[", "bandwidth", "*", "(", "kernel_mul", "**", "i", ")", "for", "i", "in", "range", "(", "kernel_num", ")", "]", "\n", "kernel_val", "=", "[", "torch", ".", "exp", "(", "-", "L2_distance", "/", "bandwidth_temp", ")", "for", "bandwidth_temp", "in", "bandwidth_list", "]", "\n", "return", "sum", "(", "kernel_val", ")", "#/len(kernel_val)", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.mmd.mmd_rbf_accelerate": [[31, 42], ["int", "mmd.guassian_kernel", "range", "float", "source.size"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.mmd.guassian_kernel"], ["", "def", "mmd_rbf_accelerate", "(", "source", ",", "target", ",", "kernel_mul", "=", "2.0", ",", "kernel_num", "=", "5", ",", "fix_sigma", "=", "None", ")", ":", "\n", "    ", "batch_size", "=", "int", "(", "source", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "kernels", "=", "guassian_kernel", "(", "source", ",", "target", ",", "\n", "kernel_mul", "=", "kernel_mul", ",", "kernel_num", "=", "kernel_num", ",", "fix_sigma", "=", "fix_sigma", ")", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "s1", ",", "s2", "=", "i", ",", "(", "i", "+", "1", ")", "%", "batch_size", "\n", "t1", ",", "t2", "=", "s1", "+", "batch_size", ",", "s2", "+", "batch_size", "\n", "loss", "+=", "kernels", "[", "s1", ",", "s2", "]", "+", "kernels", "[", "t1", ",", "t2", "]", "\n", "loss", "-=", "kernels", "[", "s1", ",", "t2", "]", "+", "kernels", "[", "s2", ",", "t1", "]", "\n", "", "return", "loss", "/", "float", "(", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.mmd.mmd_rbf_noaccelerate": [[43, 53], ["int", "mmd.guassian_kernel", "torch.mean", "source.size"], "function", ["home.repos.pwc.inspect_result.Yiyang98_BFUDA.two-step.mmd.guassian_kernel"], ["", "def", "mmd_rbf_noaccelerate", "(", "source", ",", "target", ",", "kernel_mul", "=", "2.0", ",", "kernel_num", "=", "5", ",", "fix_sigma", "=", "None", ")", ":", "\n", "    ", "batch_size", "=", "int", "(", "source", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "kernels", "=", "guassian_kernel", "(", "source", ",", "target", ",", "\n", "kernel_mul", "=", "kernel_mul", ",", "kernel_num", "=", "kernel_num", ",", "fix_sigma", "=", "fix_sigma", ")", "\n", "XX", "=", "kernels", "[", ":", "batch_size", ",", ":", "batch_size", "]", "\n", "YY", "=", "kernels", "[", "batch_size", ":", ",", "batch_size", ":", "]", "\n", "XY", "=", "kernels", "[", ":", "batch_size", ",", "batch_size", ":", "]", "\n", "YX", "=", "kernels", "[", "batch_size", ":", ",", ":", "batch_size", "]", "\n", "loss", "=", "torch", ".", "mean", "(", "XX", "+", "YY", "-", "XY", "-", "YX", ")", "\n", "return", "loss", "\n", "\n"]]}