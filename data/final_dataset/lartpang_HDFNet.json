{"home.repos.pwc.inspect_result.lartpang_HDFNet.None.train.Trainer.__init__": [[37, 93], ["super().__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torchvision.transforms.ToPILImage", "pprint.pprint.pprint", "utils.misc.construct_path_dict", "utils.misc.pre_mkdir", "shutil.copy", "shutil.copy", "utils.data.create_loader_imgs.create_loader", "train.Trainer.make_optim", "torch.nn.BCELoss().to", "torch.nn.BCELoss().to", "train.Trainer.loss_funcs.append", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "loss.HEL.HEL().to", "train.Trainer.resume_checkpoint", "getattr", "torch.nn.BCELoss", "torch.nn.BCELoss", "print", "train.Trainer.resume_checkpoint", "loss.HEL.HEL"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.__init__", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.misc.construct_path_dict", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.misc.pre_mkdir", "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_loader_imgs.create_loader", "home.repos.pwc.inspect_result.lartpang_HDFNet.None.train.Trainer.make_optim", "home.repos.pwc.inspect_result.lartpang_HDFNet.None.test.Tester.resume_checkpoint", "home.repos.pwc.inspect_result.lartpang_HDFNet.None.test.Tester.resume_checkpoint"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "dev", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "to_pil", "=", "transforms", ".", "ToPILImage", "(", ")", "\n", "pprint", "(", "self", ".", "args", ")", "\n", "\n", "self", ".", "data_mode", "=", "self", ".", "args", "[", "\"data_mode\"", "]", "\n", "if", "self", ".", "args", "[", "\"suffix\"", "]", ":", "\n", "            ", "self", ".", "model_name", "=", "self", ".", "args", "[", "\"model\"", "]", "+", "\"_\"", "+", "self", ".", "args", "[", "\"suffix\"", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "model_name", "=", "self", ".", "args", "[", "\"model\"", "]", "\n", "", "self", ".", "path", "=", "construct_path_dict", "(", "proj_root", "=", "proj_root", ",", "exp_name", "=", "self", ".", "model_name", ")", "\n", "\n", "pre_mkdir", "(", "path_config", "=", "self", ".", "path", ")", "\n", "shutil", ".", "copy", "(", "f\"{proj_root}/config.py\"", ",", "self", ".", "path", "[", "\"cfg_log\"", "]", ")", "\n", "shutil", ".", "copy", "(", "f\"{proj_root}/train.py\"", ",", "self", ".", "path", "[", "\"trainer_log\"", "]", ")", "\n", "\n", "if", "self", ".", "data_mode", "==", "\"RGBD\"", ":", "\n", "            ", "self", ".", "tr_data_path", "=", "self", ".", "args", "[", "\"rgbd_data\"", "]", "[", "\"tr_data_path\"", "]", "\n", "self", ".", "te_data_list", "=", "self", ".", "args", "[", "\"rgbd_data\"", "]", "[", "\"te_data_list\"", "]", "\n", "", "elif", "self", ".", "data_mode", "==", "\"RGB\"", ":", "\n", "            ", "self", ".", "tr_data_path", "=", "self", ".", "args", "[", "\"rgb_data\"", "]", "[", "\"tr_data_path\"", "]", "\n", "self", ".", "te_data_list", "=", "self", ".", "args", "[", "\"rgb_data\"", "]", "[", "\"te_data_list\"", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "save_path", "=", "self", ".", "path", "[", "\"save\"", "]", "\n", "self", ".", "save_pre", "=", "self", ".", "args", "[", "\"save_pre\"", "]", "\n", "\n", "self", ".", "tr_loader", "=", "create_loader", "(", "\n", "data_path", "=", "self", ".", "tr_data_path", ",", "mode", "=", "\"train\"", ",", "get_length", "=", "False", ",", "data_mode", "=", "self", ".", "data_mode", ",", "\n", ")", "\n", "\n", "self", ".", "net", "=", "getattr", "(", "network", ",", "self", ".", "args", "[", "\"model\"", "]", ")", "(", "pretrained", "=", "True", ")", ".", "to", "(", "self", ".", "dev", ")", "\n", "\n", "# \u635f\u5931\u51fd\u6570", "\n", "self", ".", "loss_funcs", "=", "[", "BCELoss", "(", "reduction", "=", "self", ".", "args", "[", "\"reduction\"", "]", ")", ".", "to", "(", "self", ".", "dev", ")", "]", "\n", "if", "self", ".", "args", "[", "\"use_aux_loss\"", "]", ":", "\n", "            ", "self", ".", "loss_funcs", ".", "append", "(", "HEL", "(", ")", ".", "to", "(", "self", ".", "dev", ")", ")", "\n", "\n", "# \u8bbe\u7f6e\u4f18\u5316\u5668", "\n", "", "self", ".", "opti", "=", "self", ".", "make_optim", "(", ")", "\n", "\n", "# \u8bad\u7ec3\u76f8\u5173", "\n", "self", ".", "end_epoch", "=", "self", ".", "args", "[", "\"epoch_num\"", "]", "\n", "if", "self", ".", "args", "[", "\"resume\"", "]", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "resume_checkpoint", "(", "load_path", "=", "self", ".", "path", "[", "\"final_full_net\"", "]", ",", "mode", "=", "\"all\"", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "f\"{self.path['final_full_net']} does not exist and we will load {self.path['final_state_net']}\"", ")", "\n", "self", ".", "resume_checkpoint", "(", "load_path", "=", "self", ".", "path", "[", "\"final_state_net\"", "]", ",", "mode", "=", "\"onlynet\"", ")", "\n", "self", ".", "start_epoch", "=", "self", ".", "end_epoch", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "start_epoch", "=", "0", "\n", "", "self", ".", "iter_num", "=", "self", ".", "end_epoch", "*", "len", "(", "self", ".", "tr_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.None.train.Trainer.total_loss": [[94, 106], ["sum", "len", "loss", "loss_list.append", "loss_item_list.append", "loss.item"], "methods", ["None"], ["", "def", "total_loss", "(", "self", ",", "train_preds", ",", "train_alphas", ")", ":", "\n", "        ", "loss_list", "=", "[", "]", "\n", "loss_item_list", "=", "[", "]", "\n", "\n", "assert", "len", "(", "self", ".", "loss_funcs", ")", "!=", "0", ",", "\"\u8bf7\u6307\u5b9a\u635f\u5931\u51fd\u6570`self.loss_funcs`\"", "\n", "for", "loss", "in", "self", ".", "loss_funcs", ":", "\n", "            ", "loss_out", "=", "loss", "(", "train_preds", ",", "train_alphas", ")", "\n", "loss_list", ".", "append", "(", "loss_out", ")", "\n", "loss_item_list", ".", "append", "(", "f\"{loss_out.item():.5f}\"", ")", "\n", "\n", "", "train_loss", "=", "sum", "(", "loss_list", ")", "\n", "return", "train_loss", ",", "loss_item_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.None.train.Trainer.train": [[107, 176], ["range", "print", "train.Trainer.te_data_list.items", "utils.misc.AvgMeter", "enumerate", "train.Trainer.save_checkpoint", "print", "utils.data.create_loader_imgs.create_loader", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "train.Trainer.test", "print", "utils.misc.make_log", "train.Trainer.change_lr", "train.Trainer.opti.zero_grad", "train_inputs.to.to.to", "train_masks.to.to.to", "train.Trainer.total_loss", "train_loss.backward", "train.Trainer.opti.step", "train_loss.item", "train_inputs.to.to.size", "utils.misc.AvgMeter.update", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "print", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "train_depths.to.to.to", "train.Trainer.net", "print", "utils.misc.make_log", "train.Trainer.items", "len", "train.Trainer.net"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.None.train.Trainer.save_checkpoint", "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_loader_imgs.create_loader", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.cal_fps.CPUFPSer.test", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.misc.make_log", "home.repos.pwc.inspect_result.lartpang_HDFNet.None.train.Trainer.change_lr", "home.repos.pwc.inspect_result.lartpang_HDFNet.None.train.Trainer.total_loss", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.update", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.misc.make_log"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "for", "curr_epoch", "in", "range", "(", "self", ".", "start_epoch", ",", "self", ".", "end_epoch", ")", ":", "\n", "            ", "train_loss_record", "=", "AvgMeter", "(", ")", "\n", "\n", "if", "self", ".", "args", "[", "\"lr_type\"", "]", "==", "\"poly\"", ":", "\n", "                ", "self", ".", "change_lr", "(", "curr_epoch", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "for", "train_batch_id", ",", "train_data", "in", "enumerate", "(", "self", ".", "tr_loader", ")", ":", "\n", "                ", "curr_iter", "=", "curr_epoch", "*", "len", "(", "self", ".", "tr_loader", ")", "+", "train_batch_id", "\n", "\n", "self", ".", "opti", ".", "zero_grad", "(", ")", "\n", "train_inputs", ",", "train_masks", ",", "*", "train_other_data", "=", "train_data", "\n", "train_inputs", "=", "train_inputs", ".", "to", "(", "self", ".", "dev", ",", "non_blocking", "=", "True", ")", "\n", "train_masks", "=", "train_masks", ".", "to", "(", "self", ".", "dev", ",", "non_blocking", "=", "True", ")", "\n", "if", "self", ".", "data_mode", "==", "\"RGBD\"", ":", "\n", "# train_other_data\u662f\u4e00\u4e2alist", "\n", "                    ", "train_depths", "=", "train_other_data", "[", "-", "1", "]", "\n", "train_depths", "=", "train_depths", ".", "to", "(", "self", ".", "dev", ",", "non_blocking", "=", "True", ")", "\n", "train_preds", "=", "self", ".", "net", "(", "train_inputs", ",", "train_depths", ")", "\n", "", "elif", "self", ".", "data_mode", "==", "\"RGB\"", ":", "\n", "                    ", "train_preds", "=", "self", ".", "net", "(", "train_inputs", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "", "train_loss", ",", "loss_item_list", "=", "self", ".", "total_loss", "(", "train_preds", ",", "train_masks", ")", "\n", "train_loss", ".", "backward", "(", ")", "\n", "self", ".", "opti", ".", "step", "(", ")", "\n", "\n", "# \u4ec5\u5728\u7d2f\u8ba1\u7684\u65f6\u5019\u4f7f\u7528item()\u83b7\u53d6\u6570\u636e", "\n", "train_iter_loss", "=", "train_loss", ".", "item", "(", ")", "\n", "train_batch_size", "=", "train_inputs", ".", "size", "(", "0", ")", "\n", "train_loss_record", ".", "update", "(", "train_iter_loss", ",", "train_batch_size", ")", "\n", "\n", "# \u8bb0\u5f55\u6bcf\u4e00\u6b21\u8fed\u4ee3\u7684\u6570\u636e", "\n", "if", "self", ".", "args", "[", "\"print_freq\"", "]", ">", "0", "and", "(", "curr_iter", "+", "1", ")", "%", "self", ".", "args", "[", "\"print_freq\"", "]", "==", "0", ":", "\n", "                    ", "log", "=", "(", "\n", "f\"[I:{curr_iter}/{self.iter_num}][E:{curr_epoch}:{self.end_epoch}]>\"", "\n", "f\"[{self.model_name}]\"", "\n", "f\"[Lr:{self.opti.param_groups[0]['lr']:.7f}]\"", "\n", "f\"[Avg:{train_loss_record.avg:.5f}|Cur:{train_iter_loss:.5f}|\"", "\n", "f\"{loss_item_list}]\"", "\n", ")", "\n", "print", "(", "log", ")", "\n", "make_log", "(", "self", ".", "path", "[", "\"tr_log\"", "]", ",", "log", ")", "\n", "\n", "# \u6bcf\u4e2a\u5468\u671f\u90fd\u8fdb\u884c\u4fdd\u5b58\u6d4b\u8bd5\uff0c\u4fdd\u5b58\u7684\u662f\u9488\u5bf9\u7b2ccurr_epoch+1\u5468\u671f\u7684\u53c2\u6570", "\n", "", "", "self", ".", "save_checkpoint", "(", "\n", "curr_epoch", "+", "1", ",", "full_net_path", "=", "self", ".", "path", "[", "\"final_full_net\"", "]", ",", "state_net_path", "=", "self", ".", "path", "[", "\"final_state_net\"", "]", ",", "\n", ")", "\n", "\n", "# \u8fdb\u884c\u6700\u7ec8\u7684\u6d4b\u8bd5\uff0c\u9996\u5148\u8f93\u51fa\u9a8c\u8bc1\u7ed3\u679c", "\n", "", "print", "(", "f\" ==>> \u8bad\u7ec3\u7ed3\u675f <<== \"", ")", "\n", "\n", "for", "data_name", ",", "data_path", "in", "self", ".", "te_data_list", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "f\" ==>> \u4f7f\u7528\u6d4b\u8bd5\u96c6{data_name}\u6d4b\u8bd5 <<== \"", ")", "\n", "self", ".", "te_loader", ",", "self", ".", "te_length", "=", "create_loader", "(", "\n", "data_path", "=", "data_path", ",", "mode", "=", "\"test\"", ",", "get_length", "=", "True", ",", "data_mode", "=", "self", ".", "data_mode", ",", "\n", ")", "\n", "self", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", "[", "\"save\"", "]", ",", "data_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "save_path", ")", ":", "\n", "                ", "print", "(", "f\" ==>> {self.save_path} \u4e0d\u5b58\u5728, \u8fd9\u91cc\u521b\u5efa\u4e00\u4e2a <<==\"", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "save_path", ")", "\n", "", "results", "=", "self", ".", "test", "(", "save_pre", "=", "self", ".", "save_pre", ")", "\n", "fixed_pre_results", "=", "{", "k", ":", "f\"{v:.3f}\"", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", "}", "\n", "msg", "=", "f\" ==>> \u5728{data_name}:'{data_path}'\u6d4b\u8bd5\u96c6\u4e0a\u7ed3\u679c\\n >> {fixed_pre_results}\"", "\n", "print", "(", "msg", ")", "\n", "make_log", "(", "self", ".", "path", "[", "\"te_log\"", "]", ",", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.None.train.Trainer.test": [[177, 224], ["train.Trainer.net.eval", "utils.metric.CalTotalMetric", "tqdm.tqdm.tqdm", "utils.metric.CalTotalMetric.show", "enumerate", "tqdm.tqdm.tqdm.set_description", "train.Trainer.cpu().detach", "enumerate", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "in_imgs.to.to.to", "os.join", "os.join", "PIL.Image.open().convert", "numpy.asarray", "numpy.where", "train.Trainer.to_pil().resize", "numpy.asarray", "numpy.asarray.max", "numpy.asarray.min", "utils.metric.CalTotalMetric.update", "in_depths.to.to.to", "train.Trainer.net", "train.Trainer.cpu", "os.join", "os.join", "train.Trainer.save", "train.Trainer.net", "PIL.Image.open", "numpy.where.max", "train.Trainer.to_pil"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.show", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.update"], ["", "", "def", "test", "(", "self", ",", "save_pre", ")", ":", "\n", "        ", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n", "cal_total_metrics", "=", "CalTotalMetric", "(", "num", "=", "self", ".", "te_length", ",", "beta_for_wfm", "=", "1", ")", "\n", "\n", "tqdm_iter", "=", "tqdm", "(", "enumerate", "(", "self", ".", "te_loader", ")", ",", "total", "=", "len", "(", "self", ".", "te_loader", ")", ",", "leave", "=", "False", ")", "\n", "for", "test_batch_id", ",", "test_data", "in", "tqdm_iter", ":", "\n", "            ", "tqdm_iter", ".", "set_description", "(", "f\"{self.model_name}:\"", "f\"te=>{test_batch_id + 1}\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "in_imgs", ",", "in_names", ",", "in_mask_paths", ",", "*", "in_depths", "=", "test_data", "\n", "in_imgs", "=", "in_imgs", ".", "to", "(", "self", ".", "dev", ",", "non_blocking", "=", "True", ")", "\n", "if", "self", ".", "data_mode", "==", "\"RGBD\"", ":", "\n", "                    ", "in_depths", "=", "in_depths", "[", "0", "]", "\n", "in_depths", "=", "in_depths", ".", "to", "(", "self", ".", "dev", ",", "non_blocking", "=", "True", ")", "\n", "outputs", "=", "self", ".", "net", "(", "in_imgs", ",", "in_depths", ")", "\n", "", "elif", "self", ".", "data_mode", "==", "\"RGB\"", ":", "\n", "                    ", "outputs", "=", "self", ".", "net", "(", "in_imgs", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "", "", "pred_array_tensor", "=", "outputs", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "\n", "for", "item_id", ",", "pred_tensor", "in", "enumerate", "(", "pred_array_tensor", ")", ":", "\n", "                ", "mask_path", "=", "osp", ".", "join", "(", "in_mask_paths", "[", "item_id", "]", ")", "\n", "mask_pil", "=", "Image", ".", "open", "(", "mask_path", ")", ".", "convert", "(", "\"L\"", ")", "\n", "original_size", "=", "mask_pil", ".", "size", "\n", "mask_array", "=", "np", ".", "asarray", "(", "mask_pil", ")", "\n", "mask_array", "=", "mask_array", "/", "(", "mask_array", ".", "max", "(", ")", "+", "1e-8", ")", "\n", "mask_array", "=", "np", ".", "where", "(", "mask_array", ">", "0.5", ",", "1", ",", "0", ")", "\n", "\n", "pred_pil", "=", "self", ".", "to_pil", "(", "pred_tensor", ")", ".", "resize", "(", "original_size", ",", "resample", "=", "Image", ".", "NEAREST", ")", "\n", "if", "save_pre", ":", "\n", "                    ", "pred_path", "=", "osp", ".", "join", "(", "self", ".", "save_path", ",", "in_names", "[", "item_id", "]", "+", "\".png\"", ")", "\n", "pred_pil", ".", "save", "(", "pred_path", ")", "\n", "\n", "", "pred_array", "=", "np", ".", "asarray", "(", "pred_pil", ")", "\n", "max_pred_array", "=", "pred_array", ".", "max", "(", ")", "\n", "min_pred_array", "=", "pred_array", ".", "min", "(", ")", "\n", "if", "max_pred_array", "==", "min_pred_array", ":", "\n", "                    ", "pred_array", "=", "pred_array", "/", "255", "\n", "", "else", ":", "\n", "                    ", "pred_array", "=", "(", "pred_array", "-", "min_pred_array", ")", "/", "(", "max_pred_array", "-", "min_pred_array", ")", "\n", "\n", "", "cal_total_metrics", ".", "update", "(", "pred_array", ",", "mask_array", ")", "\n", "\n", "", "", "results", "=", "cal_total_metrics", ".", "show", "(", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.None.train.Trainer.change_lr": [[225, 233], ["pow", "float"], "methods", ["None"], ["", "def", "change_lr", "(", "self", ",", "curr", ")", ":", "\n", "        ", "total_num", "=", "self", ".", "end_epoch", "\n", "if", "self", ".", "args", "[", "\"lr_type\"", "]", "==", "\"poly\"", ":", "\n", "            ", "ratio", "=", "pow", "(", "(", "1", "-", "float", "(", "curr", ")", "/", "total_num", ")", ",", "self", ".", "args", "[", "\"lr_decay\"", "]", ")", "\n", "self", ".", "opti", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "=", "self", ".", "opti", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "*", "ratio", "\n", "self", ".", "opti", ".", "param_groups", "[", "1", "]", "[", "\"lr\"", "]", "=", "self", ".", "opti", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.None.train.Trainer.make_optim": [[234, 276], ["print", "torch.optim.SGD", "torch.optim.SGD", "train.Trainer.net.named_parameters", "torch.optim.SGD", "torch.optim.SGD", "backbone.append", "head.append", "train.Trainer.net.named_parameters", "train.Trainer.net.named_parameters"], "methods", ["None"], ["", "", "def", "make_optim", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "args", "[", "\"optim\"", "]", "==", "\"sgd_trick\"", ":", "\n", "# https://github.com/implus/PytorchInsight/blob/master/classification/imagenet_tricks.py", "\n", "            ", "params", "=", "[", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "name", ",", "p", "in", "self", ".", "net", ".", "named_parameters", "(", ")", "if", "(", "\"bias\"", "in", "name", "or", "\"bn\"", "in", "name", ")", "]", ",", "\n", "\"weight_decay\"", ":", "0", ",", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "[", "\n", "p", "for", "name", ",", "p", "in", "self", ".", "net", ".", "named_parameters", "(", ")", "if", "(", "\"bias\"", "not", "in", "name", "and", "\"bn\"", "not", "in", "name", ")", "\n", "]", "\n", "}", ",", "\n", "]", "\n", "optimizer", "=", "SGD", "(", "\n", "params", ",", "\n", "lr", "=", "self", ".", "args", "[", "\"lr\"", "]", ",", "\n", "momentum", "=", "self", ".", "args", "[", "\"momentum\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "args", "[", "\"weight_decay\"", "]", ",", "\n", "nesterov", "=", "self", ".", "args", "[", "\"nesterov\"", "]", ",", "\n", ")", "\n", "", "elif", "self", ".", "args", "[", "\"optim\"", "]", "==", "\"f3_trick\"", ":", "\n", "            ", "backbone", ",", "head", "=", "[", "]", ",", "[", "]", "\n", "for", "name", ",", "params_tensor", "in", "self", ".", "net", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "\"encoder\"", "in", "name", ":", "\n", "                    ", "backbone", ".", "append", "(", "params_tensor", ")", "\n", "", "else", ":", "\n", "                    ", "head", ".", "append", "(", "params_tensor", ")", "\n", "", "", "params", "=", "[", "\n", "{", "\"params\"", ":", "backbone", ",", "\"lr\"", ":", "0.1", "*", "self", ".", "args", "[", "\"lr\"", "]", "}", ",", "\n", "{", "\"params\"", ":", "head", ",", "\"lr\"", ":", "self", ".", "args", "[", "\"lr\"", "]", "}", ",", "\n", "]", "\n", "optimizer", "=", "SGD", "(", "\n", "params", "=", "params", ",", "\n", "momentum", "=", "self", ".", "args", "[", "\"momentum\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "args", "[", "\"weight_decay\"", "]", ",", "\n", "nesterov", "=", "self", ".", "args", "[", "\"nesterov\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "print", "(", "\"optimizer = \"", ",", "optimizer", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.None.train.Trainer.save_checkpoint": [[277, 293], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "train.Trainer.net.state_dict", "train.Trainer.opti.state_dict", "train.Trainer.net.state_dict"], "methods", ["None"], ["", "def", "save_checkpoint", "(", "self", ",", "current_epoch", ",", "full_net_path", ",", "state_net_path", ")", ":", "\n", "        ", "\"\"\"\n        \u4fdd\u5b58\u5b8c\u6574\u53c2\u6570\u6a21\u578b\uff08\u5927\uff09\u548c\u72b6\u6001\u53c2\u6570\u6a21\u578b\uff08\u5c0f\uff09\n\n        Args:\n            current_epoch (int): \u5f53\u524d\u5468\u671f\n            full_net_path (str): \u4fdd\u5b58\u5b8c\u6574\u53c2\u6570\u6a21\u578b\u7684\u8def\u5f84\n            state_net_path (str): \u4fdd\u5b58\u6a21\u578b\u6743\u91cd\u53c2\u6570\u7684\u8def\u5f84\n        \"\"\"", "\n", "state_dict", "=", "{", "\n", "\"epoch\"", ":", "current_epoch", ",", "\n", "\"net_state\"", ":", "self", ".", "net", ".", "state_dict", "(", ")", ",", "\n", "\"opti_state\"", ":", "self", ".", "opti", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "state_dict", ",", "full_net_path", ")", "\n", "torch", ".", "save", "(", "self", ".", "net", ".", "state_dict", "(", ")", ",", "state_net_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.None.train.Trainer.resume_checkpoint": [[294, 317], ["os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "print", "torch.load", "torch.load", "torch.load", "torch.load", "Exception", "train.Trainer.net.load_state_dict", "train.Trainer.opti.load_state_dict", "print", "train.Trainer.net.load_state_dict", "print"], "methods", ["None"], ["", "def", "resume_checkpoint", "(", "self", ",", "load_path", ",", "mode", "=", "\"all\"", ")", ":", "\n", "        ", "\"\"\"\n        \u4ece\u4fdd\u5b58\u8282\u70b9\u6062\u590d\u6a21\u578b\n\n        Args:\n            load_path (str): \u6a21\u578b\u5b58\u653e\u8def\u5f84\n            mode (str): \u9009\u62e9\u54ea\u79cd\u6a21\u578b\u6062\u590d\u6a21\u5f0f\uff1a'all'\uff1a\u56de\u590d\u5b8c\u6574\u6a21\u578b\uff0c\u5305\u62ec\u8bad\u7ec3\u4e2d\u7684\u7684\u53c2\u6570\uff1b'onlynet'\uff1a\u4ec5\u6062\u590d\u6a21\u578b\u6743\u91cd\u53c2\u6570\n        \"\"\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "load_path", ")", "and", "os", ".", "path", ".", "isfile", "(", "load_path", ")", ":", "\n", "            ", "print", "(", "f\" =>> loading checkpoint '{load_path}' <<== \"", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "load_path", ",", "map_location", "=", "self", ".", "dev", ")", "\n", "if", "mode", "==", "\"all\"", ":", "\n", "                ", "self", ".", "start_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "self", ".", "net", ".", "load_state_dict", "(", "checkpoint", "[", "\"net_state\"", "]", ")", "\n", "self", ".", "opti", ".", "load_state_dict", "(", "checkpoint", "[", "\"opti_state\"", "]", ")", "\n", "print", "(", "f\" ==> loaded checkpoint '{load_path}' (epoch {checkpoint['epoch']})\"", ")", "\n", "", "elif", "mode", "==", "\"onlynet\"", ":", "\n", "                ", "self", ".", "net", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "print", "(", "f\" ==> loaded checkpoint '{load_path}' \"", "f\"(only has the net's weight params) <<== \"", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f\"{load_path}\u8def\u5f84\u4e0d\u6b63\u5e38\uff0c\u8bf7\u68c0\u67e5\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.None.test.Tester.__init__": [[50, 95], ["torchvision.transforms.ToPILImage", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "utils.misc.check_dir_path_valid", "test.Tester.resume_checkpoint", "test.Tester.net.eval", "torchvision.transforms.Compose", "torch.cuda.is_available", "torch.device", "torch.device", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.transforms.Compose", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "print", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "getattr", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.misc.check_dir_path_valid", "home.repos.pwc.inspect_result.lartpang_HDFNet.None.test.Tester.resume_checkpoint"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "if", "args", ".", "use_gpu", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "dev", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dev", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "", "self", ".", "to_pil", "=", "transforms", ".", "ToPILImage", "(", ")", "\n", "self", ".", "data_mode", "=", "args", ".", "data_mode", "\n", "self", ".", "model_name", "=", "args", ".", "model", "\n", "\n", "self", ".", "te_data_path", "=", "args", ".", "testset", "\n", "self", ".", "image_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "te_data_path", ",", "\"Image\"", ")", "\n", "if", "self", ".", "data_mode", "==", "\"RGBD\"", ":", "\n", "            ", "self", ".", "depth_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "te_data_path", ",", "\"Depth\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "depth_dir", "=", "\"\"", "\n", "\n", "", "self", ".", "has_masks", "=", "args", ".", "has_masks", "\n", "if", "self", ".", "has_masks", ":", "\n", "            ", "self", ".", "mask_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "te_data_path", ",", "\"Mask\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mask_dir", "=", "\"\"", "\n", "", "check_dir_path_valid", "(", "[", "self", ".", "te_data_path", ",", "self", ".", "image_dir", ",", "self", ".", "mask_dir", "]", ")", "\n", "\n", "self", ".", "save_pre", "=", "args", ".", "save_pre", "\n", "if", "self", ".", "save_pre", ":", "\n", "            ", "self", ".", "save_path", "=", "args", ".", "save_path", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "save_path", ")", ":", "\n", "                ", "print", "(", "f\" ==>> {self.save_path} \u4e0d\u5b58\u5728, \u8fd9\u91cc\u521b\u5efa\u4e00\u4e2a <<==\"", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "save_path", ")", "\n", "\n", "", "", "self", ".", "net", "=", "getattr", "(", "network", ",", "self", ".", "model_name", ")", "(", "pretrained", "=", "False", ")", ".", "to", "(", "self", ".", "dev", ")", "\n", "self", ".", "resume_checkpoint", "(", "load_path", "=", "args", ".", "param_path", ")", "\n", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n", "self", ".", "rgb_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "(", "320", ",", "320", ")", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", "\n", ")", "\n", "if", "self", ".", "data_mode", "==", "\"RGBD\"", ":", "\n", "            ", "self", ".", "depth_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "Resize", "(", "(", "320", ",", "320", ")", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.None.test.Tester.test": [[97, 156], ["os.listdir", "os.listdir", "os.listdir", "os.listdir", "utils.metric.CalTotalMetric", "tqdm.tqdm.tqdm", "enumerate", "tqdm.tqdm.tqdm.set_description", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "PIL.Image.open().convert", "test.Tester.rgb_transform().unsqueeze", "rgb_tensor.to.to.to", "test.Tester.squeeze().cpu().detach", "test.Tester.to_pil().resize", "utils.metric.CalTotalMetric.show", "print", "len", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "PIL.Image.open().convert", "test.Tester.depth_transform().unsqueeze", "depth_tensor.to.to.to", "test.Tester.save", "numpy.asarray", "numpy.asarray.max", "numpy.asarray.min", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "PIL.Image.open().convert", "numpy.asarray", "numpy.where", "utils.metric.CalTotalMetric.update", "PIL.Image.open", "test.Tester.rgb_transform", "torch.no_grad", "test.Tester.net", "torch.no_grad", "test.Tester.net", "test.Tester.squeeze().cpu", "test.Tester.to_pil", "os.join", "os.join", "utils.metric.CalTotalMetric.show.items", "PIL.Image.open", "test.Tester.depth_transform", "PIL.Image.open", "numpy.where.max", "test.Tester.squeeze"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.show", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.update"], ["", "", "def", "test", "(", "self", ")", ":", "\n", "        ", "rgb_name_list", "=", "os", ".", "listdir", "(", "self", ".", "image_dir", ")", "\n", "\n", "cal_total_metrics", "=", "CalTotalMetric", "(", "num", "=", "len", "(", "rgb_name_list", ")", ",", "beta_for_wfm", "=", "1", ")", "\n", "\n", "tqdm_iter", "=", "tqdm", "(", "enumerate", "(", "rgb_name_list", ")", ",", "total", "=", "len", "(", "rgb_name_list", ")", ",", "leave", "=", "False", ")", "\n", "for", "idx", ",", "rgb_name", "in", "tqdm_iter", ":", "\n", "            ", "tqdm_iter", ".", "set_description", "(", "f\"{self.model_name}:\"", "f\"te=>{idx + 1}\"", ")", "\n", "\n", "depth_mask_name", "=", "rgb_name", "[", ":", "-", "4", "]", "+", "\".png\"", "\n", "\n", "rgb_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "rgb_name", ")", "\n", "rgb_pil", "=", "Image", ".", "open", "(", "rgb_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "original_size", "=", "rgb_pil", ".", "size", "\n", "\n", "rgb_tensor", "=", "self", ".", "rgb_transform", "(", "rgb_pil", ")", ".", "unsqueeze", "(", "0", ")", "\n", "rgb_tensor", "=", "rgb_tensor", ".", "to", "(", "self", ".", "dev", ",", "non_blocking", "=", "True", ")", "\n", "\n", "if", "self", ".", "data_mode", "==", "\"RGBD\"", ":", "\n", "                ", "depth_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "depth_dir", ",", "depth_mask_name", ")", "\n", "depth_pil", "=", "Image", ".", "open", "(", "depth_path", ")", ".", "convert", "(", "\"L\"", ")", "\n", "\n", "depth_tensor", "=", "self", ".", "depth_transform", "(", "depth_pil", ")", ".", "unsqueeze", "(", "0", ")", "\n", "depth_tensor", "=", "depth_tensor", ".", "to", "(", "self", ".", "dev", ",", "non_blocking", "=", "True", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "pred_tensor", "=", "self", ".", "net", "(", "rgb_tensor", ",", "depth_tensor", ")", "\n", "", "", "else", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "pred_tensor", "=", "self", ".", "net", "(", "rgb_tensor", ")", "\n", "\n", "", "", "pred_tensor", "=", "pred_tensor", ".", "squeeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "\n", "pred_pil", "=", "self", ".", "to_pil", "(", "pred_tensor", ")", ".", "resize", "(", "original_size", ",", "resample", "=", "Image", ".", "NEAREST", ")", "\n", "if", "self", ".", "save_pre", ":", "\n", "                ", "pred_pil", ".", "save", "(", "osp", ".", "join", "(", "self", ".", "save_path", ",", "depth_mask_name", ")", ")", "\n", "\n", "", "if", "self", ".", "has_masks", ":", "\n", "                ", "pred_array", "=", "np", ".", "asarray", "(", "pred_pil", ")", "\n", "max_pred_array", "=", "pred_array", ".", "max", "(", ")", "\n", "min_pred_array", "=", "pred_array", ".", "min", "(", ")", "\n", "if", "max_pred_array", "==", "min_pred_array", ":", "\n", "                    ", "pred_array", "=", "pred_array", "/", "255", "\n", "", "else", ":", "\n", "                    ", "pred_array", "=", "(", "pred_array", "-", "min_pred_array", ")", "/", "(", "max_pred_array", "-", "min_pred_array", ")", "\n", "\n", "", "mask_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "mask_dir", ",", "depth_mask_name", ")", "\n", "mask_pil", "=", "Image", ".", "open", "(", "mask_path", ")", ".", "convert", "(", "\"L\"", ")", "\n", "mask_array", "=", "np", ".", "asarray", "(", "mask_pil", ")", "\n", "mask_array", "=", "mask_array", "/", "(", "mask_array", ".", "max", "(", ")", "+", "1e-8", ")", "\n", "mask_array", "=", "np", ".", "where", "(", "mask_array", ">", "0.5", ",", "1", ",", "0", ")", "\n", "\n", "cal_total_metrics", ".", "update", "(", "pred_array", ",", "mask_array", ")", "\n", "\n", "", "", "if", "self", ".", "has_masks", ":", "\n", "            ", "results", "=", "cal_total_metrics", ".", "show", "(", ")", "\n", "fixed_pre_results", "=", "{", "k", ":", "f\"{v:.3f}\"", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", "}", "\n", "print", "(", "f\" ==>> \u5728{self.te_data_path}\u4e0a\u7684\u6d4b\u8bd5\u7ed3\u679c\\n >> {fixed_pre_results}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.None.test.Tester.resume_checkpoint": [[157, 171], ["os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "print", "torch.load", "test.Tester.net.load_state_dict", "print", "Exception"], "methods", ["None"], ["", "", "def", "resume_checkpoint", "(", "self", ",", "load_path", ")", ":", "\n", "        ", "\"\"\"\n        \u4ece\u4fdd\u5b58\u8282\u70b9\u6062\u590d\u6a21\u578b\n\n        Args:\n            load_path (str): \u6a21\u578b\u5b58\u653e\u8def\u5f84\n        \"\"\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "load_path", ")", "and", "os", ".", "path", ".", "isfile", "(", "load_path", ")", ":", "\n", "            ", "print", "(", "f\" =>> loading checkpoint '{load_path}' <<== \"", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "load_path", ",", "map_location", "=", "self", ".", "dev", ")", "\n", "self", ".", "net", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "print", "(", "f\" ==> loaded checkpoint '{load_path}' \"", "f\"(only has the net's weight params) <<== \"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f\"{load_path}\u8def\u5f84\u4e0d\u6b63\u5e38\uff0c\u8bf7\u68c0\u67e5\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.tensor_ops.cus_sample": [[12, 19], ["torch.interpolate", "len", "kwargs.keys", "list", "kwargs.keys"], "function", ["None"], ["def", "cus_sample", "(", "feat", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    :param feat: \u8f93\u5165\u7279\u5f81\n    :param kwargs: size\u6216\u8005scale_factor\n    \"\"\"", "\n", "assert", "len", "(", "kwargs", ".", "keys", "(", ")", ")", "==", "1", "and", "list", "(", "kwargs", ".", "keys", "(", ")", ")", "[", "0", "]", "in", "[", "\"size\"", ",", "\"scale_factor\"", "]", "\n", "return", "F", ".", "interpolate", "(", "feat", ",", "**", "kwargs", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.tensor_ops.upsample_add": [[21, 26], ["torch.interpolate", "y.size"], "function", ["None"], ["", "def", "upsample_add", "(", "*", "xs", ")", ":", "\n", "    ", "y", "=", "xs", "[", "-", "1", "]", "\n", "for", "x", "in", "xs", "[", ":", "-", "1", "]", ":", "\n", "        ", "y", "=", "y", "+", "F", ".", "interpolate", "(", "x", ",", "size", "=", "y", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.tensor_ops.upsample_cat": [[28, 34], ["torch.cat", "torch.cat", "out.append", "torch.interpolate", "y.size"], "function", ["None"], ["", "def", "upsample_cat", "(", "*", "xs", ")", ":", "\n", "    ", "y", "=", "xs", "[", "-", "1", "]", "\n", "out", "=", "[", "]", "\n", "for", "x", "in", "xs", "[", ":", "-", "1", "]", ":", "\n", "        ", "out", ".", "append", "(", "F", ".", "interpolate", "(", "x", ",", "size", "=", "y", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "*", "out", ",", "y", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.tensor_ops.upsample_reduce": [[36, 47], ["F.interpolate.size", "a.reshape().mean.size", "torch.interpolate", "a.reshape().mean.reshape().mean", "a.reshape().mean.reshape"], "function", ["None"], ["", "def", "upsample_reduce", "(", "b", ",", "a", ")", ":", "\n", "    ", "\"\"\"\n    \u4e0a\u91c7\u6837\u6240\u6709\u7279\u5f81\u5230\u6700\u540e\u4e00\u4e2a\u7279\u5f81\u7684\u5c3a\u5ea6\u4ee5\u53ca\u524d\u4e00\u4e2a\u7279\u5f81\u7684\u901a\u9053\u6570\n    \"\"\"", "\n", "_", ",", "C", ",", "_", ",", "_", "=", "b", ".", "size", "(", ")", "\n", "N", ",", "_", ",", "H", ",", "W", "=", "a", ".", "size", "(", ")", "\n", "\n", "b", "=", "F", ".", "interpolate", "(", "b", ",", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "a", "=", "a", ".", "reshape", "(", "N", ",", "-", "1", ",", "C", ",", "H", ",", "W", ")", ".", "mean", "(", "1", ")", "\n", "\n", "return", "b", "+", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.tensor_ops.shuffle_channels": [[49, 58], ["x.reshape().permute.size", "x.reshape().permute.reshape().permute", "x.reshape().permute.reshape", "x.reshape().permute.reshape"], "function", ["None"], ["", "def", "shuffle_channels", "(", "x", ",", "groups", ")", ":", "\n", "    ", "\"\"\"\n    Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,W] -> [N,C,H,W]\n    \u4e00\u5171C\u4e2achannel\u8981\u5206\u6210g\u7ec4\u6df7\u5408\u7684channel\uff0c\u5148\u628aC reshape\u6210(g, C/g)\u7684\u5f62\u72b6\uff0c\n    \u7136\u540e\u8f6c\u7f6e\u6210(C/g, g)\u6700\u540e\u5e73\u5766\u6210C\u7ec4channel\n    \"\"\"", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "reshape", "(", "N", ",", "groups", ",", "C", "//", "groups", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", "\n", "return", "x", ".", "reshape", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.misc.AvgMeter.__init__": [[12, 14], ["misc.AvgMeter.reset"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.misc.AvgMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.misc.AvgMeter.reset": [[15, 20], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.misc.AvgMeter.update": [[21, 26], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.misc.pre_mkdir": [[28, 38], ["misc.check_mkdir", "misc.make_log", "misc.make_log", "misc.check_mkdir", "misc.check_mkdir", "misc.check_mkdir", "datetime.datetime.now", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.cal_fps.check_mkdir", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.misc.make_log", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.misc.make_log", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.cal_fps.check_mkdir", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.cal_fps.check_mkdir", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.cal_fps.check_mkdir"], ["", "", "def", "pre_mkdir", "(", "path_config", ")", ":", "\n", "# \u63d0\u524d\u521b\u5efa\u597d\u8bb0\u5f55\u6587\u4ef6\uff0c\u907f\u514d\u81ea\u52a8\u521b\u5efa\u7684\u65f6\u5019\u89e6\u53d1\u6587\u4ef6\u521b\u5efa\u4e8b\u4ef6", "\n", "    ", "check_mkdir", "(", "path_config", "[", "\"pth_log\"", "]", ")", "\n", "make_log", "(", "path_config", "[", "\"te_log\"", "]", ",", "f\"=== te_log {datetime.now()} ===\"", ")", "\n", "make_log", "(", "path_config", "[", "\"tr_log\"", "]", ",", "f\"=== tr_log {datetime.now()} ===\"", ")", "\n", "\n", "# \u63d0\u524d\u521b\u5efa\u597d\u5b58\u50a8\u9884\u6d4b\u7ed3\u679c\u548c\u5b58\u653e\u6a21\u578b\u4ee5\u53catensorboard\u7684\u6587\u4ef6\u5939", "\n", "check_mkdir", "(", "path_config", "[", "\"save\"", "]", ")", "\n", "check_mkdir", "(", "path_config", "[", "\"pth\"", "]", ")", "\n", "check_mkdir", "(", "path_config", "[", "\"tb\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.misc.check_mkdir": [[40, 43], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "check_mkdir", "(", "dir_name", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.misc.make_log": [[45, 48], ["open", "log.write"], "function", ["None"], ["", "", "def", "make_log", "(", "path", ",", "context", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "\"a\"", ")", "as", "log", ":", "\n", "        ", "log", ".", "write", "(", "f\"{context}\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.misc.check_dir_path_valid": [[50, 55], ["os.path.exists", "os.path.isdir"], "function", ["None"], ["", "", "def", "check_dir_path_valid", "(", "path", ":", "list", ")", ":", "\n", "    ", "for", "p", "in", "path", ":", "\n", "        ", "if", "p", ":", "\n", "            ", "assert", "os", ".", "path", ".", "exists", "(", "p", ")", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.misc.construct_path_dict": [[57, 89], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "str", "str", "str", "str", "datetime.datetime.now", "datetime.datetime.now", "datetime.datetime.now", "datetime.datetime.now"], "function", ["None"], ["", "", "", "def", "construct_path_dict", "(", "proj_root", ",", "exp_name", ")", ":", "\n", "    ", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "proj_root", ",", "\"output\"", ")", "\n", "\n", "pth_log_path", "=", "os", ".", "path", ".", "join", "(", "ckpt_path", ",", "exp_name", ")", "\n", "\n", "tb_path", "=", "os", ".", "path", ".", "join", "(", "pth_log_path", ",", "\"tb\"", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "pth_log_path", ",", "\"pre\"", ")", "\n", "pth_path", "=", "os", ".", "path", ".", "join", "(", "pth_log_path", ",", "\"pth\"", ")", "\n", "\n", "final_full_model_path", "=", "os", ".", "path", ".", "join", "(", "pth_path", ",", "\"checkpoint_final.pth.tar\"", ")", "\n", "final_state_path", "=", "os", ".", "path", ".", "join", "(", "pth_path", ",", "\"state_final.pth\"", ")", "\n", "\n", "tr_log_path", "=", "os", ".", "path", ".", "join", "(", "pth_log_path", ",", "f\"tr_{str(datetime.now())[:10]}.txt\"", ")", "\n", "te_log_path", "=", "os", ".", "path", ".", "join", "(", "pth_log_path", ",", "f\"te_{str(datetime.now())[:10]}.txt\"", ")", "\n", "cfg_log_path", "=", "os", ".", "path", ".", "join", "(", "pth_log_path", ",", "f\"cfg_{str(datetime.now())[:10]}.txt\"", ")", "\n", "trainer_log_path", "=", "os", ".", "path", ".", "join", "(", "pth_log_path", ",", "f\"trainer_{str(datetime.now())[:10]}.txt\"", ")", "\n", "\n", "path_config", "=", "{", "\n", "\"ckpt_path\"", ":", "ckpt_path", ",", "\n", "\"pth_log\"", ":", "pth_log_path", ",", "\n", "\"tb\"", ":", "tb_path", ",", "\n", "\"save\"", ":", "save_path", ",", "\n", "\"pth\"", ":", "pth_path", ",", "\n", "\"final_full_net\"", ":", "final_full_model_path", ",", "\n", "\"final_state_net\"", ":", "final_state_path", ",", "\n", "\"tr_log\"", ":", "tr_log_path", ",", "\n", "\"te_log\"", ":", "te_log_path", ",", "\n", "\"cfg_log\"", ":", "cfg_log_path", ",", "\n", "\"trainer_log\"", ":", "trainer_log_path", ",", "\n", "}", "\n", "\n", "return", "path_config", "\n", "", ""]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalFM.__init__": [[16, 22], ["numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num", ",", "thds", "=", "255", ")", ":", "\n", "        ", "self", ".", "precision", "=", "np", ".", "zeros", "(", "(", "num", ",", "thds", ")", ")", "\n", "self", ".", "recall", "=", "np", ".", "zeros", "(", "(", "num", ",", "thds", ")", ")", "\n", "self", ".", "meanF", "=", "np", ".", "zeros", "(", "num", ")", "\n", "self", ".", "idx", "=", "0", "\n", "self", ".", "num", "=", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalFM.update": [[23, 30], ["gt.max", "metric.CalFM.cal"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalWFM.cal"], ["", "def", "update", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "if", "gt", ".", "max", "(", ")", "!=", "0", ":", "\n", "            ", "prediction", ",", "recall", ",", "mfmeasure", "=", "self", ".", "cal", "(", "pred", ",", "gt", ")", "\n", "self", ".", "precision", "[", "self", ".", "idx", ",", ":", "]", "=", "prediction", "\n", "self", ".", "recall", "[", "self", ".", "idx", ",", ":", "]", "=", "recall", "\n", "self", ".", "meanF", "[", "self", ".", "idx", "]", "=", "mfmeasure", "\n", "", "self", ".", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalFM.cal": [[31, 59], ["numpy.zeros_like", "numpy.zeros_like", "numpy.uint8", "numpy.histogram", "numpy.histogram", "numpy.cumsum", "numpy.cumsum", "numpy.uint8.mean", "numpy.flip", "numpy.flip", "numpy.sum", "numpy.zeros_like.sum", "numpy.zeros_like.sum", "range", "range"], "methods", ["None"], ["", "def", "cal", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "########################meanF##############################", "\n", "        ", "th", "=", "2", "*", "pred", ".", "mean", "(", ")", "\n", "if", "th", ">", "1", ":", "\n", "            ", "th", "=", "1", "\n", "", "binary", "=", "np", ".", "zeros_like", "(", "pred", ")", "\n", "binary", "[", "pred", ">=", "th", "]", "=", "1", "\n", "hard_gt", "=", "np", ".", "zeros_like", "(", "gt", ")", "\n", "hard_gt", "[", "gt", ">", "0.5", "]", "=", "1", "\n", "tp", "=", "(", "binary", "*", "hard_gt", ")", ".", "sum", "(", ")", "\n", "if", "tp", "==", "0", ":", "\n", "            ", "mfmeasure", "=", "0", "\n", "", "else", ":", "\n", "            ", "pre", "=", "tp", "/", "binary", ".", "sum", "(", ")", "\n", "rec", "=", "tp", "/", "hard_gt", ".", "sum", "(", ")", "\n", "mfmeasure", "=", "1.3", "*", "pre", "*", "rec", "/", "(", "0.3", "*", "pre", "+", "rec", ")", "\n", "\n", "########################maxF##############################", "\n", "", "pred", "=", "np", ".", "uint8", "(", "pred", "*", "255", ")", "\n", "target", "=", "pred", "[", "gt", ">", "0.5", "]", "\n", "nontarget", "=", "pred", "[", "gt", "<=", "0.5", "]", "\n", "targetHist", ",", "_", "=", "np", ".", "histogram", "(", "target", ",", "bins", "=", "range", "(", "256", ")", ")", "\n", "nontargetHist", ",", "_", "=", "np", ".", "histogram", "(", "nontarget", ",", "bins", "=", "range", "(", "256", ")", ")", "\n", "targetHist", "=", "np", ".", "cumsum", "(", "np", ".", "flip", "(", "targetHist", ")", ",", "axis", "=", "0", ")", "\n", "nontargetHist", "=", "np", ".", "cumsum", "(", "np", ".", "flip", "(", "nontargetHist", ")", ",", "axis", "=", "0", ")", "\n", "precision", "=", "targetHist", "/", "(", "targetHist", "+", "nontargetHist", "+", "1e-8", ")", "\n", "recall", "=", "targetHist", "/", "np", ".", "sum", "(", "gt", ")", "\n", "return", "precision", ",", "recall", ",", "mfmeasure", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalFM.show": [[60, 67], ["metric.CalFM.precision.mean", "metric.CalFM.recall.mean", "metric.CalFM.meanF.mean", "fmeasure.max"], "methods", ["None"], ["", "def", "show", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "num", "==", "self", ".", "idx", ",", "f\"{self.num}, {self.idx}\"", "\n", "precision", "=", "self", ".", "precision", ".", "mean", "(", "axis", "=", "0", ")", "\n", "recall", "=", "self", ".", "recall", ".", "mean", "(", "axis", "=", "0", ")", "\n", "fmeasure", "=", "1.3", "*", "precision", "*", "recall", "/", "(", "0.3", "*", "precision", "+", "recall", "+", "1e-8", ")", "\n", "mmfmeasure", "=", "self", ".", "meanF", ".", "mean", "(", ")", "\n", "return", "fmeasure", ",", "fmeasure", ".", "max", "(", ")", ",", "mmfmeasure", ",", "precision", ",", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalMAE.__init__": [[71, 76], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num", ")", ":", "\n", "# self.prediction = []", "\n", "        ", "self", ".", "prediction", "=", "np", ".", "zeros", "(", "num", ")", "\n", "self", ".", "idx", "=", "0", "\n", "self", ".", "num", "=", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalMAE.update": [[77, 80], ["metric.CalMAE.cal"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalWFM.cal"], ["", "def", "update", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "self", ".", "prediction", "[", "self", ".", "idx", "]", "=", "self", ".", "cal", "(", "pred", ",", "gt", ")", "\n", "self", ".", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalMAE.cal": [[81, 83], ["numpy.mean", "numpy.abs"], "methods", ["None"], ["", "def", "cal", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "np", ".", "abs", "(", "pred", "-", "gt", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalMAE.show": [[84, 87], ["metric.CalMAE.prediction.mean"], "methods", ["None"], ["", "def", "show", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "num", "==", "self", ".", "idx", ",", "f\"{self.num}, {self.idx}\"", "\n", "return", "self", ".", "prediction", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalSM.__init__": [[91, 96], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num", ",", "alpha", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prediction", "=", "np", ".", "zeros", "(", "num", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "idx", "=", "0", "\n", "self", ".", "num", "=", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalSM.update": [[97, 101], ["metric.CalSM.cal"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalWFM.cal"], ["", "def", "update", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "gt", "=", "gt", ">", "0.5", "\n", "self", ".", "prediction", "[", "self", ".", "idx", "]", "=", "self", ".", "cal", "(", "pred", ",", "gt", ")", "\n", "self", ".", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalSM.show": [[102, 105], ["metric.CalSM.prediction.mean"], "methods", ["None"], ["", "def", "show", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "num", "==", "self", ".", "idx", ",", "f\"{self.num}, {self.idx}\"", "\n", "return", "self", ".", "prediction", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalSM.cal": [[106, 115], ["numpy.mean", "numpy.mean", "numpy.mean", "metric.CalSM.object", "metric.CalSM.region"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalSM.object", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalSM.region"], ["", "def", "cal", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "y", "=", "np", ".", "mean", "(", "gt", ")", "\n", "if", "y", "==", "0", ":", "\n", "            ", "score", "=", "1", "-", "np", ".", "mean", "(", "pred", ")", "\n", "", "elif", "y", "==", "1", ":", "\n", "            ", "score", "=", "np", ".", "mean", "(", "pred", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "self", ".", "alpha", "*", "self", ".", "object", "(", "pred", ",", "gt", ")", "+", "(", "1", "-", "self", ".", "alpha", ")", "*", "self", ".", "region", "(", "pred", ",", "gt", ")", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalSM.object": [[116, 122], ["numpy.mean", "metric.CalSM.s_object", "metric.CalSM.s_object", "numpy.logical_not"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalSM.s_object", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalSM.s_object"], ["", "def", "object", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "fg", "=", "pred", "*", "gt", "\n", "bg", "=", "(", "1", "-", "pred", ")", "*", "(", "1", "-", "gt", ")", "\n", "\n", "u", "=", "np", ".", "mean", "(", "gt", ")", "\n", "return", "u", "*", "self", ".", "s_object", "(", "fg", ",", "gt", ")", "+", "(", "1", "-", "u", ")", "*", "self", ".", "s_object", "(", "bg", ",", "np", ".", "logical_not", "(", "gt", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalSM.s_object": [[123, 127], ["numpy.mean", "numpy.std", "pow"], "methods", ["None"], ["", "def", "s_object", "(", "self", ",", "in1", ",", "in2", ")", ":", "\n", "        ", "x", "=", "np", ".", "mean", "(", "in1", "[", "in2", "]", ")", "\n", "sigma_x", "=", "np", ".", "std", "(", "in1", "[", "in2", "]", ")", "\n", "return", "2", "*", "x", "/", "(", "pow", "(", "x", ",", "2", ")", "+", "1", "+", "sigma_x", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalSM.region": [[128, 141], ["scipy.ndimage.center_of_mass", "metric.CalSM.divideGT", "metric.CalSM.dividePred", "metric.CalSM.ssim", "metric.CalSM.ssim", "metric.CalSM.ssim", "metric.CalSM.ssim", "int", "int", "round", "round"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalSM.divideGT", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalSM.dividePred", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalSM.ssim", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalSM.ssim", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalSM.ssim", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalSM.ssim"], ["", "def", "region", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "[", "y", ",", "x", "]", "=", "center_of_mass", "(", "gt", ")", "\n", "y", "=", "int", "(", "round", "(", "y", ")", ")", "+", "1", "\n", "x", "=", "int", "(", "round", "(", "x", ")", ")", "+", "1", "\n", "[", "gt1", ",", "gt2", ",", "gt3", ",", "gt4", ",", "w1", ",", "w2", ",", "w3", ",", "w4", "]", "=", "self", ".", "divideGT", "(", "gt", ",", "x", ",", "y", ")", "\n", "pred1", ",", "pred2", ",", "pred3", ",", "pred4", "=", "self", ".", "dividePred", "(", "pred", ",", "x", ",", "y", ")", "\n", "\n", "score1", "=", "self", ".", "ssim", "(", "pred1", ",", "gt1", ")", "\n", "score2", "=", "self", ".", "ssim", "(", "pred2", ",", "gt2", ")", "\n", "score3", "=", "self", ".", "ssim", "(", "pred3", ",", "gt3", ")", "\n", "score4", "=", "self", ".", "ssim", "(", "pred4", ",", "gt4", ")", "\n", "\n", "return", "w1", "*", "score1", "+", "w2", "*", "score2", "+", "w3", "*", "score3", "+", "w4", "*", "score4", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalSM.divideGT": [[142, 156], ["None"], "methods", ["None"], ["", "def", "divideGT", "(", "self", ",", "gt", ",", "x", ",", "y", ")", ":", "\n", "        ", "h", ",", "w", "=", "gt", ".", "shape", "\n", "area", "=", "h", "*", "w", "\n", "LT", "=", "gt", "[", "0", ":", "y", ",", "0", ":", "x", "]", "\n", "RT", "=", "gt", "[", "0", ":", "y", ",", "x", ":", "w", "]", "\n", "LB", "=", "gt", "[", "y", ":", "h", ",", "0", ":", "x", "]", "\n", "RB", "=", "gt", "[", "y", ":", "h", ",", "x", ":", "w", "]", "\n", "\n", "w1", "=", "x", "*", "y", "/", "area", "\n", "w2", "=", "y", "*", "(", "w", "-", "x", ")", "/", "area", "\n", "w3", "=", "(", "h", "-", "y", ")", "*", "x", "/", "area", "\n", "w4", "=", "(", "h", "-", "y", ")", "*", "(", "w", "-", "x", ")", "/", "area", "\n", "\n", "return", "LT", ",", "RT", ",", "LB", ",", "RB", ",", "w1", ",", "w2", ",", "w3", ",", "w4", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalSM.dividePred": [[157, 165], ["None"], "methods", ["None"], ["", "def", "dividePred", "(", "self", ",", "pred", ",", "x", ",", "y", ")", ":", "\n", "        ", "h", ",", "w", "=", "pred", ".", "shape", "\n", "LT", "=", "pred", "[", "0", ":", "y", ",", "0", ":", "x", "]", "\n", "RT", "=", "pred", "[", "0", ":", "y", ",", "x", ":", "w", "]", "\n", "LB", "=", "pred", "[", "y", ":", "h", ",", "0", ":", "x", "]", "\n", "RB", "=", "pred", "[", "y", ":", "h", ",", "x", ":", "w", "]", "\n", "\n", "return", "LT", ",", "RT", ",", "LB", ",", "RB", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalSM.ssim": [[166, 188], ["numpy.float32", "numpy.mean", "numpy.mean", "numpy.var", "numpy.var", "numpy.sum"], "methods", ["None"], ["", "def", "ssim", "(", "self", ",", "in1", ",", "in2", ")", ":", "\n", "        ", "in2", "=", "np", ".", "float32", "(", "in2", ")", "\n", "h", ",", "w", "=", "in1", ".", "shape", "\n", "N", "=", "h", "*", "w", "\n", "\n", "x", "=", "np", ".", "mean", "(", "in1", ")", "\n", "y", "=", "np", ".", "mean", "(", "in2", ")", "\n", "sigma_x", "=", "np", ".", "var", "(", "in1", ")", "\n", "sigma_y", "=", "np", ".", "var", "(", "in2", ")", "\n", "sigma_xy", "=", "np", ".", "sum", "(", "(", "in1", "-", "x", ")", "*", "(", "in2", "-", "y", ")", ")", "/", "(", "N", "-", "1", ")", "\n", "\n", "alpha", "=", "4", "*", "x", "*", "y", "*", "sigma_xy", "\n", "beta", "=", "(", "x", "*", "x", "+", "y", "*", "y", ")", "*", "(", "sigma_x", "+", "sigma_y", ")", "\n", "\n", "if", "alpha", "!=", "0", ":", "\n", "            ", "score", "=", "alpha", "/", "(", "beta", "+", "1e-8", ")", "\n", "", "elif", "alpha", "==", "0", "and", "beta", "==", "0", ":", "\n", "            ", "score", "=", "1", "\n", "", "else", ":", "\n", "            ", "score", "=", "0", "\n", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalEM.__init__": [[192, 196], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num", ")", ":", "\n", "        ", "self", ".", "prediction", "=", "np", ".", "zeros", "(", "num", ")", "\n", "self", ".", "idx", "=", "0", "\n", "self", ".", "num", "=", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalEM.update": [[197, 200], ["metric.CalEM.cal"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalWFM.cal"], ["", "def", "update", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "self", ".", "prediction", "[", "self", ".", "idx", "]", "=", "self", ".", "cal", "(", "pred", ",", "gt", ")", "\n", "self", ".", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalEM.cal": [[201, 221], ["numpy.zeros", "numpy.array", "numpy.array", "numpy.double", "numpy.shape", "pred.mean", "sum", "sum", "sum", "sum", "numpy.double", "metric.CalEM.AlignmentTerm", "metric.CalEM.EnhancedAlignmentTerm", "sum", "numpy.double", "sum", "numpy.double"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalEM.AlignmentTerm", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalEM.EnhancedAlignmentTerm"], ["", "def", "cal", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "th", "=", "2", "*", "pred", ".", "mean", "(", ")", "\n", "if", "th", ">", "1", ":", "\n", "            ", "th", "=", "1", "\n", "", "FM", "=", "np", ".", "zeros", "(", "gt", ".", "shape", ")", "\n", "FM", "[", "pred", ">=", "th", "]", "=", "1", "\n", "FM", "=", "np", ".", "array", "(", "FM", ",", "dtype", "=", "bool", ")", "\n", "GT", "=", "np", ".", "array", "(", "gt", ",", "dtype", "=", "bool", ")", "\n", "dFM", "=", "np", ".", "double", "(", "FM", ")", "\n", "if", "sum", "(", "sum", "(", "np", ".", "double", "(", "GT", ")", ")", ")", "==", "0", ":", "\n", "            ", "enhanced_matrix", "=", "1.0", "-", "dFM", "\n", "", "elif", "sum", "(", "sum", "(", "np", ".", "double", "(", "~", "GT", ")", ")", ")", "==", "0", ":", "\n", "            ", "enhanced_matrix", "=", "dFM", "\n", "", "else", ":", "\n", "            ", "dGT", "=", "np", ".", "double", "(", "GT", ")", "\n", "align_matrix", "=", "self", ".", "AlignmentTerm", "(", "dFM", ",", "dGT", ")", "\n", "enhanced_matrix", "=", "self", ".", "EnhancedAlignmentTerm", "(", "align_matrix", ")", "\n", "", "[", "w", ",", "h", "]", "=", "np", ".", "shape", "(", "GT", ")", "\n", "score", "=", "sum", "(", "sum", "(", "enhanced_matrix", ")", ")", "/", "(", "w", "*", "h", "-", "1", "+", "1e-8", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalEM.AlignmentTerm": [[222, 229], ["numpy.mean", "numpy.mean"], "methods", ["None"], ["", "def", "AlignmentTerm", "(", "self", ",", "dFM", ",", "dGT", ")", ":", "\n", "        ", "mu_FM", "=", "np", ".", "mean", "(", "dFM", ")", "\n", "mu_GT", "=", "np", ".", "mean", "(", "dGT", ")", "\n", "align_FM", "=", "dFM", "-", "mu_FM", "\n", "align_GT", "=", "dGT", "-", "mu_GT", "\n", "align_Matrix", "=", "2.0", "*", "(", "align_GT", "*", "align_FM", ")", "/", "(", "align_GT", "*", "align_GT", "+", "align_FM", "*", "align_FM", "+", "1e-8", ")", "\n", "return", "align_Matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalEM.EnhancedAlignmentTerm": [[230, 233], ["numpy.power"], "methods", ["None"], ["", "def", "EnhancedAlignmentTerm", "(", "self", ",", "align_Matrix", ")", ":", "\n", "        ", "enhanced", "=", "np", ".", "power", "(", "align_Matrix", "+", "1", ",", "2", ")", "/", "4", "\n", "return", "enhanced", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalEM.show": [[234, 237], ["metric.CalEM.prediction.mean"], "methods", ["None"], ["", "def", "show", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "num", "==", "self", ".", "idx", ",", "f\"{self.num}, {self.idx}\"", "\n", "return", "self", ".", "prediction", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalWFM.__init__": [[240, 246], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num", ",", "beta", "=", "1", ")", ":", "\n", "        ", "self", ".", "scores_list", "=", "np", ".", "zeros", "(", "num", ")", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "eps", "=", "1e-6", "\n", "self", ".", "idx", "=", "0", "\n", "self", ".", "num", "=", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalWFM.update": [[247, 251], ["metric.CalWFM.cal", "gt.max"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalWFM.cal"], ["", "def", "update", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "gt", "=", "gt", ">", "0.5", "\n", "self", ".", "scores_list", "[", "self", ".", "idx", "]", "=", "0", "if", "gt", ".", "max", "(", ")", "==", "0", "else", "self", ".", "cal", "(", "pred", ",", "gt", ")", "\n", "self", ".", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalWFM.matlab_style_gauss2D": [[252, 265], ["numpy.exp", "numpy.exp.sum", "numpy.exp.max", "numpy.finfo"], "methods", ["None"], ["", "def", "matlab_style_gauss2D", "(", "self", ",", "shape", "=", "(", "7", ",", "7", ")", ",", "sigma", "=", "5", ")", ":", "\n", "        ", "\"\"\"\n        2D gaussian mask - should give the same result as MATLAB's\n        fspecial('gaussian',[shape],[sigma])\n        \"\"\"", "\n", "m", ",", "n", "=", "[", "(", "ss", "-", "1.0", ")", "/", "2.0", "for", "ss", "in", "shape", "]", "\n", "y", ",", "x", "=", "np", ".", "ogrid", "[", "-", "m", ":", "m", "+", "1", ",", "-", "n", ":", "n", "+", "1", "]", "\n", "h", "=", "np", ".", "exp", "(", "-", "(", "x", "*", "x", "+", "y", "*", "y", ")", "/", "(", "2.0", "*", "sigma", "*", "sigma", ")", ")", "\n", "h", "[", "h", "<", "np", ".", "finfo", "(", "h", ".", "dtype", ")", ".", "eps", "*", "h", ".", "max", "(", ")", "]", "=", "0", "\n", "sumh", "=", "h", ".", "sum", "(", ")", "\n", "if", "sumh", "!=", "0", ":", "\n", "            ", "h", "/=", "sumh", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalWFM.cal": [[266, 306], ["scipy.ndimage.distance_transform_edt", "numpy.abs", "numpy.copy", "metric.CalWFM.matlab_style_gauss2D", "scipy.ndimage.convolve", "numpy.where", "numpy.where", "numpy.sum", "numpy.ones_like", "numpy.sum", "numpy.sum", "numpy.mean", "numpy.exp", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalWFM.matlab_style_gauss2D"], ["", "def", "cal", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "# [Dst,IDXT] = bwdist(dGT);", "\n", "        ", "Dst", ",", "Idxt", "=", "bwdist", "(", "gt", "==", "0", ",", "return_indices", "=", "True", ")", "\n", "\n", "# %Pixel dependency", "\n", "# E = abs(FG-dGT);", "\n", "E", "=", "np", ".", "abs", "(", "pred", "-", "gt", ")", "\n", "# Et = E;", "\n", "# Et(~GT)=Et(IDXT(~GT)); %To deal correctly with the edges of the foreground region", "\n", "Et", "=", "np", ".", "copy", "(", "E", ")", "\n", "Et", "[", "gt", "==", "0", "]", "=", "Et", "[", "Idxt", "[", "0", "]", "[", "gt", "==", "0", "]", ",", "Idxt", "[", "1", "]", "[", "gt", "==", "0", "]", "]", "\n", "\n", "# K = fspecial('gaussian',7,5);", "\n", "# EA = imfilter(Et,K);", "\n", "# MIN_E_EA(GT & EA<E) = EA(GT & EA<E);", "\n", "K", "=", "self", ".", "matlab_style_gauss2D", "(", "(", "7", ",", "7", ")", ",", "sigma", "=", "5", ")", "\n", "EA", "=", "convolve", "(", "Et", ",", "weights", "=", "K", ",", "mode", "=", "\"constant\"", ",", "cval", "=", "0", ")", "\n", "MIN_E_EA", "=", "np", ".", "where", "(", "gt", "&", "(", "EA", "<", "E", ")", ",", "EA", ",", "E", ")", "\n", "\n", "# %Pixel importance", "\n", "# B = ones(size(GT));", "\n", "# B(~GT) = 2-1*exp(log(1-0.5)/5.*Dst(~GT));", "\n", "# Ew = MIN_E_EA.*B;", "\n", "B", "=", "np", ".", "where", "(", "gt", "==", "0", ",", "2", "-", "np", ".", "exp", "(", "np", ".", "log", "(", "0.5", ")", "/", "5", "*", "Dst", ")", ",", "np", ".", "ones_like", "(", "gt", ")", ")", "\n", "Ew", "=", "MIN_E_EA", "*", "B", "\n", "\n", "# TPw = sum(dGT(:)) - sum(sum(Ew(GT)));", "\n", "# FPw = sum(sum(Ew(~GT)));", "\n", "TPw", "=", "np", ".", "sum", "(", "gt", ")", "-", "np", ".", "sum", "(", "Ew", "[", "gt", "==", "1", "]", ")", "\n", "FPw", "=", "np", ".", "sum", "(", "Ew", "[", "gt", "==", "0", "]", ")", "\n", "\n", "# R = 1- mean2(Ew(GT)); %Weighed Recall", "\n", "# P = TPw./(eps+TPw+FPw); %Weighted Precision", "\n", "R", "=", "1", "-", "np", ".", "mean", "(", "Ew", "[", "gt", "]", ")", "\n", "P", "=", "TPw", "/", "(", "self", ".", "eps", "+", "TPw", "+", "FPw", ")", "\n", "\n", "# % Q = (1+Beta^2)*(R*P)./(eps+R+(Beta.*P));", "\n", "Q", "=", "(", "1", "+", "self", ".", "beta", ")", "*", "R", "*", "P", "/", "(", "self", ".", "eps", "+", "R", "+", "self", ".", "beta", "*", "P", ")", "\n", "\n", "return", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalWFM.show": [[307, 310], ["metric.CalWFM.scores_list.mean"], "methods", ["None"], ["", "def", "show", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "num", "==", "self", ".", "idx", ",", "f\"{self.num}, {self.idx}\"", "\n", "return", "self", ".", "scores_list", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.__init__": [[313, 319], ["metric.CalMAE", "metric.CalFM", "metric.CalSM", "metric.CalEM", "metric.CalWFM"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num", ",", "beta_for_wfm", "=", "1", ")", ":", "\n", "        ", "self", ".", "cal_mae", "=", "CalMAE", "(", "num", "=", "num", ")", "\n", "self", ".", "cal_fm", "=", "CalFM", "(", "num", "=", "num", ")", "\n", "self", ".", "cal_sm", "=", "CalSM", "(", "num", "=", "num", ")", "\n", "self", ".", "cal_em", "=", "CalEM", "(", "num", "=", "num", ")", "\n", "self", ".", "cal_wfm", "=", "CalWFM", "(", "num", "=", "num", ",", "beta", "=", "beta_for_wfm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.update": [[320, 330], ["metric.CalTotalMetric.cal_mae.update", "metric.CalTotalMetric.cal_fm.update", "metric.CalTotalMetric.cal_sm.update", "metric.CalTotalMetric.cal_em.update", "metric.CalTotalMetric.cal_wfm.update", "pred.max", "pred.min", "gt.max", "gt.min"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.update", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.update", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.update", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.update", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.update"], ["", "def", "update", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "assert", "pred", ".", "ndim", "==", "gt", ".", "ndim", "and", "pred", ".", "shape", "==", "gt", ".", "shape", "\n", "assert", "pred", ".", "max", "(", ")", "<=", "1", "and", "pred", ".", "min", "(", ")", ">=", "0", "\n", "assert", "gt", ".", "max", "(", ")", "<=", "1", "and", "gt", ".", "min", "(", ")", ">=", "0", "\n", "\n", "self", ".", "cal_mae", ".", "update", "(", "pred", ",", "gt", ")", "\n", "self", ".", "cal_fm", ".", "update", "(", "pred", ",", "gt", ")", "\n", "self", ".", "cal_sm", ".", "update", "(", "pred", ",", "gt", ")", "\n", "self", ".", "cal_em", ".", "update", "(", "pred", ",", "gt", ")", "\n", "self", ".", "cal_wfm", ".", "update", "(", "pred", ",", "gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.show": [[331, 346], ["metric.CalTotalMetric.cal_mae.show", "metric.CalTotalMetric.cal_fm.show", "metric.CalTotalMetric.cal_sm.show", "metric.CalTotalMetric.cal_em.show", "metric.CalTotalMetric.cal_wfm.show"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.show", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.show", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.show", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.show", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.show"], ["", "def", "show", "(", "self", ")", ":", "\n", "        ", "MAE", "=", "self", ".", "cal_mae", ".", "show", "(", ")", "\n", "_", ",", "Maxf", ",", "Meanf", ",", "_", ",", "_", ",", "=", "self", ".", "cal_fm", ".", "show", "(", ")", "\n", "SM", "=", "self", ".", "cal_sm", ".", "show", "(", ")", "\n", "EM", "=", "self", ".", "cal_em", ".", "show", "(", ")", "\n", "WFM", "=", "self", ".", "cal_wfm", ".", "show", "(", ")", "\n", "results", "=", "{", "\n", "\"MaxF\"", ":", "Maxf", ",", "\n", "\"MeanF\"", ":", "Meanf", ",", "\n", "\"WFM\"", ":", "WFM", ",", "\n", "\"MAE\"", ":", "MAE", ",", "\n", "\"SM\"", ":", "SM", ",", "\n", "\"EM\"", ":", "EM", ",", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.cal_fps.GPUFPSer.__init__": [[26, 60], ["super().__init__", "torchvision.transforms.ToPILImage", "torch.device", "cal_fps.GPUFPSer.net.eval", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "print", "torch.load", "cal_fps.GPUFPSer.net.state_dict", "cal_fps.GPUFPSer.update", "cal_fps.GPUFPSer.net.load_state_dict", "print", "print", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torch.load.items"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.__init__", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.update"], ["    ", "def", "__init__", "(", "self", ",", "proj_name", ",", "args", ",", "pth_path", ")", ":", "\n", "        ", "super", "(", "GPUFPSer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "to_pil", "=", "transforms", ".", "ToPILImage", "(", ")", "\n", "self", ".", "proj_name", "=", "proj_name", "\n", "self", ".", "dev", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "self", ".", "net", "=", "self", ".", "args", "[", "proj_name", "]", "[", "\"net\"", "]", "(", "pretrained", "=", "False", ")", ".", "to", "(", "self", ".", "dev", ")", "\n", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n", "self", ".", "test_image_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "# \u8f93\u5165\u7684\u5982\u679c\u662f\u4e00\u4e2atuple\uff0c\u5219\u6309\u7167\u6570\u636e\u7f29\u653e\uff0c\u4f46\u662f\u5982\u679c\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u6309\u6bd4\u4f8b\u7f29\u653e\u5230\u77ed\u8fb9\u7b49\u4e8e\u8be5\u503c", "\n", "transforms", ".", "Resize", "(", "(", "self", ".", "args", "[", "\"new_size\"", "]", ",", "self", ".", "args", "[", "\"new_size\"", "]", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", "\n", ")", "\n", "self", ".", "test_depth_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "Resize", "(", "(", "self", ".", "args", "[", "\"new_size\"", "]", ",", "self", ".", "args", "[", "\"new_size\"", "]", ")", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "]", "\n", ")", "\n", "\n", "if", "pth_path", "!=", "None", ":", "\n", "            ", "print", "(", "f\"\u5bfc\u5165\u6a21\u578b...{pth_path}\"", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "pth_path", ")", "\n", "model_dict", "=", "self", ".", "net", ".", "state_dict", "(", ")", "\n", "# 1. filter out unnecessary keys", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "checkpoint", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "# 2. overwrite entries in the existing state dict", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "# 3. load the new state dict", "\n", "self", ".", "net", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "\"\u521d\u59cb\u5316\u5b8c\u6bd5...\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"\u4e0d\u52a0\u8f7d\u6743\u91cd\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.cal_fps.GPUFPSer.test": [[61, 108], ["print", "os.path.join", "os.path.join", "os.listdir", "tqdm.tqdm.tqdm", "print", "cal_fps.check_mkdir", "enumerate", "tqdm.tqdm.tqdm.set_description", "os.path.join", "PIL.Image.open().convert", "os.path.join", "PIL.Image.open().convert", "cal_fps.GPUFPSer.test_image_transform", "cal_fps.GPUFPSer.test_depth_transform", "test_image.to.to.unsqueeze", "test_depth.to.to.unsqueeze", "test_image.to.to.to", "test_depth.to.to.to", "len", "len", "torch.no_grad", "torch.cuda.synchronize", "time.time", "cal_fps.GPUFPSer.net", "torch.cuda.synchronize", "cal_fps.GPUFPSer.squeeze().cpu().detach", "cal_fps.GPUFPSer.to_pil().resize", "os.path.join", "cal_fps.GPUFPSer.save", "PIL.Image.open", "PIL.Image.open", "time.time", "cal_fps.GPUFPSer.squeeze().cpu", "cal_fps.GPUFPSer.to_pil", "cal_fps.GPUFPSer.squeeze"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.cal_fps.check_mkdir"], ["", "", "def", "test", "(", "self", ",", "data_path", ",", "save_path", ")", ":", "\n", "\n", "        ", "if", "save_path", ":", "\n", "            ", "print", "(", "f\"\u4fdd\u5b58\u8def\u5f84\u4e3a{save_path}\"", ")", "\n", "check_mkdir", "(", "save_path", ")", "\n", "\n", "", "print", "(", "f\"\u5f00\u59cb\u7edf\u8ba1...{data_path}\"", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"Image\"", ")", "\n", "dep_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"Depth\"", ")", "\n", "img_list", "=", "os", ".", "listdir", "(", "img_path", ")", "\n", "total_time", "=", "0", "\n", "\n", "tqdm_iter", "=", "tqdm", "(", "enumerate", "(", "img_list", ")", ",", "total", "=", "len", "(", "img_list", ")", ",", "leave", "=", "False", ")", "\n", "for", "idx", ",", "img_name", "in", "tqdm_iter", ":", "\n", "            ", "tqdm_iter", ".", "set_description", "(", "f\"{self.proj_name}:te=>{idx + 1}\"", ")", "\n", "\n", "img_fullpath", "=", "os", ".", "path", ".", "join", "(", "img_path", ",", "img_name", ")", "\n", "test_image", "=", "Image", ".", "open", "(", "img_fullpath", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "dep_fullpath", "=", "os", ".", "path", ".", "join", "(", "dep_path", ",", "img_name", "[", ":", "-", "3", "]", "+", "\"png\"", ")", "\n", "test_depth", "=", "Image", ".", "open", "(", "dep_fullpath", ")", ".", "convert", "(", "\"L\"", ")", "\n", "assert", "test_image", ".", "size", "==", "test_depth", ".", "size", "\n", "\n", "img_size", "=", "test_image", ".", "size", "\n", "test_image", "=", "self", ".", "test_image_transform", "(", "test_image", ")", "\n", "test_depth", "=", "self", ".", "test_depth_transform", "(", "test_depth", ")", "\n", "test_image", "=", "test_image", ".", "unsqueeze", "(", "0", ")", "\n", "test_depth", "=", "test_depth", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "test_image", "=", "test_image", ".", "to", "(", "self", ".", "dev", ")", "\n", "test_depth", "=", "test_depth", ".", "to", "(", "self", ".", "dev", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# https://discuss.pytorch.org/t/how-to-reduce-time-spent-by-torch-cuda-synchronize/29484", "\n", "# https://blog.csdn.net/u013548568/article/details/81368019", "\n", "                ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "outputs", "=", "self", ".", "net", "(", "test_image", ",", "test_depth", ")", "# \u6309\u7167\u5b9e\u9645\u60c5\u51b5\u6539\u5199", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "total_time", "+=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "", "if", "save_path", ":", "\n", "                ", "outputs_np", "=", "outputs", ".", "squeeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "out_img", "=", "self", ".", "to_pil", "(", "outputs_np", ")", ".", "resize", "(", "img_size", ")", "\n", "oimg_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "img_name", "[", ":", "-", "4", "]", "+", "\".png\"", ")", "\n", "out_img", ".", "save", "(", "oimg_path", ")", "\n", "\n", "", "", "fps", "=", "len", "(", "img_list", ")", "/", "total_time", "\n", "return", "fps", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.cal_fps.CPUFPSer.__init__": [[111, 145], ["super().__init__", "torchvision.transforms.ToPILImage", "torch.device", "cal_fps.CPUFPSer.net.eval", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "print", "torch.load", "cal_fps.CPUFPSer.net.state_dict", "cal_fps.CPUFPSer.update", "cal_fps.CPUFPSer.net.load_state_dict", "print", "print", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torch.load.items"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.__init__", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.update"], ["    ", "def", "__init__", "(", "self", ",", "proj_name", ",", "args", ",", "pth_path", ")", ":", "\n", "        ", "super", "(", "CPUFPSer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "to_pil", "=", "transforms", ".", "ToPILImage", "(", ")", "\n", "self", ".", "proj_name", "=", "proj_name", "\n", "self", ".", "dev", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "self", ".", "net", "=", "self", ".", "args", "[", "proj_name", "]", "[", "\"net\"", "]", "(", "pretrained", "=", "False", ")", ".", "to", "(", "self", ".", "dev", ")", "\n", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n", "self", ".", "test_image_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "# \u8f93\u5165\u7684\u5982\u679c\u662f\u4e00\u4e2atuple\uff0c\u5219\u6309\u7167\u6570\u636e\u7f29\u653e\uff0c\u4f46\u662f\u5982\u679c\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u6309\u6bd4\u4f8b\u7f29\u653e\u5230\u77ed\u8fb9\u7b49\u4e8e\u8be5\u503c", "\n", "transforms", ".", "Resize", "(", "(", "self", ".", "args", "[", "\"new_size\"", "]", ",", "self", ".", "args", "[", "\"new_size\"", "]", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", "\n", ")", "\n", "self", ".", "test_depth_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "Resize", "(", "(", "self", ".", "args", "[", "\"new_size\"", "]", ",", "self", ".", "args", "[", "\"new_size\"", "]", ")", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "]", "\n", ")", "\n", "\n", "if", "pth_path", "!=", "None", ":", "\n", "            ", "print", "(", "f\"\u5bfc\u5165\u6a21\u578b...{pth_path}\"", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "pth_path", ")", "\n", "model_dict", "=", "self", ".", "net", ".", "state_dict", "(", ")", "\n", "# 1. filter out unnecessary keys", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "checkpoint", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "# 2. overwrite entries in the existing state dict", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "# 3. load the new state dict", "\n", "self", ".", "net", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "\"\u521d\u59cb\u5316\u5b8c\u6bd5...\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"\u4e0d\u52a0\u8f7d\u6743\u91cd\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.cal_fps.CPUFPSer.test": [[146, 189], ["print", "cal_fps.check_mkdir", "print", "os.path.join", "os.path.join", "os.listdir", "tqdm.tqdm.tqdm", "enumerate", "tqdm.tqdm.tqdm.set_description", "os.path.join", "PIL.Image.open().convert", "os.path.join", "PIL.Image.open().convert", "cal_fps.CPUFPSer.test_image_transform", "cal_fps.CPUFPSer.test_depth_transform", "test_image.to.to.unsqueeze", "test_depth.to.to.unsqueeze", "test_image.to.to.to", "test_depth.to.to.to", "cal_fps.CPUFPSer.squeeze().detach", "cal_fps.CPUFPSer.to_pil().resize", "os.path.join", "cal_fps.CPUFPSer.save", "len", "len", "torch.no_grad", "time.time", "cal_fps.CPUFPSer.net", "PIL.Image.open", "PIL.Image.open", "time.time", "cal_fps.CPUFPSer.squeeze", "cal_fps.CPUFPSer.to_pil"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.cal_fps.check_mkdir"], ["", "", "def", "test", "(", "self", ",", "data_path", ",", "save_path", ")", ":", "\n", "        ", "assert", "save_path", "!=", "None", "\n", "\n", "print", "(", "f\"\u4fdd\u5b58\u8def\u5f84\u4e3a{save_path}\"", ")", "\n", "check_mkdir", "(", "save_path", ")", "\n", "\n", "print", "(", "f\"\u5f00\u59cb\u7edf\u8ba1...{data_path}\"", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"Image\"", ")", "\n", "dep_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"Depth\"", ")", "\n", "img_list", "=", "os", ".", "listdir", "(", "img_path", ")", "\n", "total_time", "=", "0", "\n", "\n", "tqdm_iter", "=", "tqdm", "(", "enumerate", "(", "img_list", ")", ",", "total", "=", "len", "(", "img_list", ")", ",", "leave", "=", "False", ")", "\n", "for", "idx", ",", "img_name", "in", "tqdm_iter", ":", "\n", "            ", "tqdm_iter", ".", "set_description", "(", "f\"{self.proj_name}:te=>{idx + 1}\"", ")", "\n", "\n", "img_fullpath", "=", "os", ".", "path", ".", "join", "(", "img_path", ",", "img_name", ")", "\n", "test_image", "=", "Image", ".", "open", "(", "img_fullpath", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "dep_fullpath", "=", "os", ".", "path", ".", "join", "(", "dep_path", ",", "img_name", "[", ":", "-", "3", "]", "+", "\"png\"", ")", "\n", "test_depth", "=", "Image", ".", "open", "(", "dep_fullpath", ")", ".", "convert", "(", "\"L\"", ")", "\n", "assert", "test_image", ".", "size", "==", "test_depth", ".", "size", "\n", "\n", "img_size", "=", "test_image", ".", "size", "\n", "test_image", "=", "self", ".", "test_image_transform", "(", "test_image", ")", "\n", "test_depth", "=", "self", ".", "test_depth_transform", "(", "test_depth", ")", "\n", "test_image", "=", "test_image", ".", "unsqueeze", "(", "0", ")", "\n", "test_depth", "=", "test_depth", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "test_image", "=", "test_image", ".", "to", "(", "self", ".", "dev", ")", "\n", "test_depth", "=", "test_depth", ".", "to", "(", "self", ".", "dev", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "outputs", "=", "self", ".", "net", "(", "test_image", ",", "test_depth", ")", "# \u6309\u7167\u5b9e\u9645\u60c5\u51b5\u6539\u5199", "\n", "total_time", "+=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "", "outputs_np", "=", "outputs", ".", "squeeze", "(", "0", ")", ".", "detach", "(", ")", "\n", "\n", "out_img", "=", "self", ".", "to_pil", "(", "outputs_np", ")", ".", "resize", "(", "img_size", ")", "\n", "oimg_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "img_name", "[", ":", "-", "4", "]", "+", "\".png\"", ")", "\n", "out_img", ".", "save", "(", "oimg_path", ")", "\n", "\n", "", "fps", "=", "len", "(", "img_list", ")", "/", "total_time", "\n", "return", "fps", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.cal_fps.check_mkdir": [[20, 23], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "check_mkdir", "(", "dir_name", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.joint_transforms.Compose.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.joint_transforms.Compose.__call__": [[19, 24], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", ",", "mask", "=", "t", "(", "img", ",", "mask", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.joint_transforms.RandomHorizontallyFlip.__call__": [[27, 31], ["random.random", "img.transpose", "mask.transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.joint_transforms.JointResize.__init__": [[34, 41], ["isinstance", "isinstance", "RuntimeError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "size", ",", "size", ")", "\n", "", "elif", "isinstance", "(", "size", ",", "tuple", ")", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"size\u53c2\u6570\u8bf7\u8bbe\u7f6e\u4e3aint\u6216\u8005tuple\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.joint_transforms.JointResize.__call__": [[42, 46], ["img.resize.resize.resize", "mask.resize.resize.resize"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "img", "=", "img", ".", "resize", "(", "self", ".", "size", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "self", ".", "size", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.joint_transforms.RandomRotate.__init__": [[49, 51], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degree", ")", ":", "\n", "        ", "self", ".", "degree", "=", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.joint_transforms.RandomRotate.__call__": [[52, 55], ["img.rotate", "mask.rotate", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "rotate_degree", "=", "random", ".", "random", "(", ")", "*", "2", "*", "self", ".", "degree", "-", "self", ".", "degree", "\n", "return", "img", ".", "rotate", "(", "rotate_degree", ",", "Image", ".", "BILINEAR", ")", ",", "mask", ".", "rotate", "(", "rotate_degree", ",", "Image", ".", "NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.joint_transforms.RandomScaleCrop.__init__": [[58, 65], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "scale_factor", ")", ":", "\n", "        ", "\"\"\"\n        \u5904\u7406\u7684\u662f\u957f\u5bbd\u76f8\u540c\u7684\u56fe\u50cf\u3002\u8fd9\u91cc\u4f1a\u8fdb\u884c\u6269\u5f20\u5230\u539f\u56fe\u7684\u968f\u673a\u500d\u6570\uff081\uff5escale_factor\uff09\uff0c\n        \u4e4b\u540e\u8fdb\u884c\u968f\u673a\u88c1\u526a\uff0c\u5f97\u5230\u8f93\u5165\u56fe\u50cf\u5927\u5c0f\u3002\n        \"\"\"", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.joint_transforms.RandomScaleCrop.__call__": [[66, 81], ["random.randint", "img.crop.crop.resize", "mask.crop.crop.resize", "random.randint", "random.randint", "img.crop.crop.crop", "mask.crop.crop.crop", "int", "int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "# random scale (short edge)", "\n", "        ", "assert", "img", ".", "size", "[", "0", "]", "==", "self", ".", "input_size", "\n", "\n", "o_size", "=", "random", ".", "randint", "(", "int", "(", "self", ".", "input_size", "*", "1", ")", ",", "int", "(", "self", ".", "input_size", "*", "self", ".", "scale_factor", ")", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "o_size", ",", "o_size", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "o_size", ",", "o_size", ")", ",", "Image", ".", "NEAREST", ")", "# mask\u7684\u653e\u7f29\u4f7f\u7528\u7684\u662f\u8fd1\u90bb\u5dee\u503c", "\n", "\n", "# random crop input_size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "o_size", "-", "self", ".", "input_size", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "o_size", "-", "self", ".", "input_size", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "self", ".", "input_size", ",", "y1", "+", "self", ".", "input_size", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "self", ".", "input_size", ",", "y1", "+", "self", ".", "input_size", ")", ")", "\n", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.joint_transforms.ScaleCenterCrop.__init__": [[84, 86], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ")", ":", "\n", "        ", "self", ".", "input_size", "=", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.joint_transforms.ScaleCenterCrop.__call__": [[87, 107], ["img.crop.crop.resize", "mask.crop.crop.resize", "int", "int", "img.crop.crop.crop", "mask.crop.crop.crop", "int", "int", "round", "round"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "# \u8ba9\u77ed\u8fb9\u7b49\u4e8e\u526a\u88c1\u7684\u5c3a\u5bf8", "\n", "if", "w", ">", "h", ":", "\n", "            ", "oh", "=", "self", ".", "input_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "", "else", ":", "\n", "            ", "ow", "=", "self", ".", "input_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "# \u4ece\u653e\u7f29\u540e\u7684\u7ed3\u679c\u4e2d\u8fdb\u884c\u4e2d\u5fc3\u526a\u88c1", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "self", ".", "input_size", ")", "/", "2.0", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "self", ".", "input_size", ")", "/", "2.0", ")", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "self", ".", "input_size", ",", "y1", "+", "self", ".", "input_size", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "self", ".", "input_size", ",", "y1", "+", "self", ".", "input_size", ")", ")", "\n", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.joint_transforms.RandomGaussianBlur.__call__": [[110, 115], ["random.random", "img.filter.filter.filter", "PIL.ImageFilter.GaussianBlur", "random.random"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "random", ".", "random", "(", ")", ")", ")", "\n", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.joint_transforms.PaddingSquare.__init__": [[122, 125], ["isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "pad_size", ")", ":", "\n", "        ", "assert", "isinstance", "(", "pad_size", ",", "int", ")", "\n", "self", ".", "pad_size", "=", "(", "pad_size", ",", "pad_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.joint_transforms.PaddingSquare.__call__": [[126, 144], ["numpy.asarray", "numpy.asarray", "max", "numpy.zeros", "numpy.zeros", "PIL.Image.fromarray().resize", "PIL.Image.fromarray().resize", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray().resize.astype", "PIL.Image.fromarray().resize.astype"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# array\u548casarray\u90fd\u53ef\u4ee5\u5c06\u7ed3\u6784\u6570\u636e\u8f6c\u5316\u4e3andarray", "\n", "# \u4f46\u662f\u4e3b\u8981\u533a\u522b\u5c31\u662f\u5f53\u6570\u636e\u6e90\u662fndarray\u65f6\uff0carray\u4ecd\u7136\u4f1acopy\u51fa\u4e00\u4e2a\u526f\u672c\uff0c\u5360\u7528\u65b0\u7684\u5185\u5b58\uff0c\u4f46asarray\u4e0d\u4f1a\uff0c\u4ecd\u4f1a\u53d7\u539f\u59cb\u7684\u6570\u636e\u7684\u5f71\u54cd\u3002", "\n", "        ", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "y", "=", "np", ".", "asarray", "(", "y", ")", "\n", "\n", "h", ",", "w", ",", "c", "=", "x", ".", "shape", "\n", "size", "=", "max", "(", "h", ",", "w", ")", "\n", "pad_h", "=", "(", "size", "-", "h", ")", "//", "2", "\n", "pad_w", "=", "(", "size", "-", "w", ")", "//", "2", "\n", "temp_x", "=", "np", ".", "zeros", "(", "(", "size", ",", "size", ",", "c", ")", ")", "\n", "temp_y", "=", "np", ".", "zeros", "(", "(", "size", ",", "size", ")", ")", "\n", "temp_x", "[", "pad_h", ":", "h", "+", "pad_h", ",", "pad_w", ":", "w", "+", "pad_w", ",", ":", "]", "=", "x", "\n", "temp_y", "[", "pad_h", ":", "h", "+", "pad_h", ",", "pad_w", ":", "w", "+", "pad_w", "]", "=", "y", "\n", "\n", "temp_x", "=", "Image", ".", "fromarray", "(", "temp_x", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "resize", "(", "self", ".", "pad_size", ")", "\n", "temp_y", "=", "Image", ".", "fromarray", "(", "temp_y", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "resize", "(", "self", ".", "pad_size", ")", "\n", "return", "temp_x", ",", "temp_y", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.triple_transforms.Compose.__init__": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.triple_transforms.Compose.__call__": [[16, 22], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "depth", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "assert", "img", ".", "size", "==", "depth", ".", "size", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", ",", "mask", ",", "depth", "=", "t", "(", "img", ",", "mask", ",", "depth", ")", "\n", "", "return", "img", ",", "mask", ",", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.triple_transforms.RandomHorizontallyFlip.__call__": [[25, 33], ["random.random", "img.transpose", "mask.transpose", "depth.transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "depth", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "return", "(", "\n", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "depth", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", ")", "\n", "", "return", "img", ",", "mask", ",", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.triple_transforms.JointResize.__init__": [[36, 43], ["isinstance", "isinstance", "RuntimeError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "size", ",", "size", ")", "\n", "", "elif", "isinstance", "(", "size", ",", "tuple", ")", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"size\u53c2\u6570\u8bf7\u8bbe\u7f6e\u4e3aint\u6216\u8005tuple\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.triple_transforms.JointResize.__call__": [[44, 49], ["img.resize.resize.resize", "mask.resize.resize.resize", "depth.resize.resize.resize"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "depth", ")", ":", "\n", "        ", "img", "=", "img", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", "\n", "depth", "=", "depth", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BILINEAR", ")", "\n", "return", "img", ",", "mask", ",", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.triple_transforms.RandomRotate.__init__": [[52, 54], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degree", ")", ":", "\n", "        ", "self", ".", "degree", "=", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.transforms.triple_transforms.RandomRotate.__call__": [[55, 61], ["img.rotate", "mask.rotate", "depth.rotate", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "depth", ")", ":", "\n", "        ", "rotate_degree", "=", "random", ".", "random", "(", ")", "*", "2", "*", "self", ".", "degree", "-", "self", ".", "degree", "\n", "return", "(", "\n", "img", ".", "rotate", "(", "rotate_degree", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "rotate", "(", "rotate_degree", ",", "Image", ".", "NEAREST", ")", ",", "\n", "depth", ".", "rotate", "(", "rotate_degree", ",", "Image", ".", "BILINEAR", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgbd_datasets_imgs.TestImageFolder.__init__": [[55, 74], ["os.path.isdir", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "print", "create_rgbd_datasets_imgs._make_test_dataset", "os.path.isfile", "print", "create_rgbd_datasets_imgs._make_test_dataset_from_list", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgbd_datasets_imgs._make_test_dataset", "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs._make_test_dataset_from_list"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "in_size", ",", "prefix", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "root", ")", ":", "\n", "            ", "print", "(", "f\" ==>> {root}\u662f\u56fe\u7247\u6587\u4ef6\u5939, \u5c06\u4f1a\u904d\u5386\u5176\u4e2d\u7684\u56fe\u7247\u8fdb\u884c\u6d4b\u8bd5 <<==\"", ")", "\n", "self", ".", "imgs", "=", "_make_test_dataset", "(", "root", ",", "prefix", "=", "prefix", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "root", ")", ":", "\n", "            ", "print", "(", "f\" ==>> {root}\u662f\u56fe\u7247\u5730\u5740\u5217\u8868, \u5c06\u4f1a\u904d\u5386\u5bf9\u5e94\u7684\u56fe\u7247\u8fdb\u884c\u6d4b\u8bd5 <<==\"", ")", "\n", "self", ".", "imgs", "=", "_make_test_dataset_from_list", "(", "root", ",", "prefix", "=", "prefix", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "test_img_trainsform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "# \u8f93\u5165\u7684\u5982\u679c\u662f\u4e00\u4e2atuple\uff0c\u5219\u6309\u7167\u6570\u636e\u7f29\u653e\uff0c\u4f46\u662f\u5982\u679c\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u6309\u6bd4\u4f8b\u7f29\u653e\u5230\u77ed\u8fb9\u7b49\u4e8e\u8be5\u503c", "\n", "transforms", ".", "Resize", "(", "(", "in_size", ",", "in_size", ")", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", "\n", ")", "\n", "self", ".", "test_depth_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "Resize", "(", "(", "in_size", ",", "in_size", ")", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgbd_datasets_imgs.TestImageFolder.__getitem__": [[76, 88], ["PIL.Image.open().convert", "PIL.Image.open().convert", "create_rgbd_datasets_imgs.TestImageFolder.test_img_trainsform", "create_rgbd_datasets_imgs.TestImageFolder.test_depth_transform", "depth.resize.resize.resize", "[].split", "PIL.Image.open", "PIL.Image.open", "img_path.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_path", ",", "mask_path", ",", "depth_path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "depth", "=", "Image", ".", "open", "(", "depth_path", ")", ".", "convert", "(", "\"L\"", ")", "\n", "if", "img", ".", "size", "!=", "depth", ".", "size", ":", "\n", "            ", "depth", "=", "depth", ".", "resize", "(", "img", ".", "size", ",", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "", "img_name", "=", "(", "img_path", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "\n", "img", "=", "self", ".", "test_img_trainsform", "(", "img", ")", "\n", "depth", "=", "self", ".", "test_depth_transform", "(", "depth", ")", "\n", "return", "img", ",", "img_name", ",", "mask_path", ",", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgbd_datasets_imgs.TestImageFolder.__len__": [[89, 91], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgbd_datasets_imgs.TrainImageFolder.__init__": [[122, 141], ["os.path.isdir", "utils.transforms.triple_transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "print", "create_rgbd_datasets_imgs._make_train_dataset", "os.path.isfile", "print", "create_rgbd_datasets_imgs._make_train_dataset_from_list", "utils.transforms.triple_transforms.JointResize", "utils.transforms.triple_transforms.RandomHorizontallyFlip", "utils.transforms.triple_transforms.RandomRotate", "torchvision.transforms.ColorJitter", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgbd_datasets_imgs._make_train_dataset", "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs._make_train_dataset_from_list"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "in_size", ",", "prefix", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "root", ")", ":", "\n", "            ", "print", "(", "f\" ==>> {root}\u662f\u56fe\u7247\u6587\u4ef6\u5939, \u5c06\u4f1a\u904d\u5386\u5176\u4e2d\u7684\u56fe\u7247\u8fdb\u884c\u8bad\u7ec3 <<==\"", ")", "\n", "self", ".", "imgs", "=", "_make_train_dataset", "(", "root", ",", "prefix", "=", "prefix", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "root", ")", ":", "\n", "            ", "print", "(", "f\" ==>> {root}\u662f\u56fe\u7247\u5730\u5740\u5217\u8868, \u5c06\u4f1a\u904d\u5386\u5bf9\u5e94\u7684\u56fe\u7247\u8fdb\u884c\u8bad\u7ec3 <<==\"", ")", "\n", "self", ".", "imgs", "=", "_make_train_dataset_from_list", "(", "root", ",", "prefix", "=", "prefix", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "train_triple_transform", "=", "Compose", "(", "[", "JointResize", "(", "in_size", ")", ",", "RandomHorizontallyFlip", "(", ")", ",", "RandomRotate", "(", "10", ")", "]", ")", "\n", "self", ".", "train_img_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ColorJitter", "(", "0.1", ",", "0.1", ",", "0.1", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "# \u5904\u7406\u7684\u662fTensor", "\n", "]", "\n", ")", "\n", "self", ".", "train_mask_transform", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "train_depth_transform", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgbd_datasets_imgs.TrainImageFolder.__getitem__": [[142, 166], ["PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "create_rgbd_datasets_imgs.TrainImageFolder.train_triple_transform", "create_rgbd_datasets_imgs.TrainImageFolder.train_mask_transform", "create_rgbd_datasets_imgs.TrainImageFolder.train_depth_transform", "create_rgbd_datasets_imgs.TrainImageFolder.train_img_transform", "len", "img.convert.convert.convert", "len", "mask.convert.convert.convert", "len", "depth.resize.resize.convert", "depth.resize.resize.resize", "[].split", "img.convert.convert.split", "mask.convert.convert.split", "depth.resize.resize.split", "img_path.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_path", ",", "mask_path", ",", "depth_path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "mask", "=", "Image", ".", "open", "(", "mask_path", ")", "\n", "depth", "=", "Image", ".", "open", "(", "depth_path", ")", "\n", "if", "len", "(", "img", ".", "split", "(", ")", ")", "!=", "3", ":", "\n", "            ", "img", "=", "img", ".", "convert", "(", "\"RGB\"", ")", "\n", "", "if", "len", "(", "mask", ".", "split", "(", ")", ")", "==", "3", ":", "\n", "            ", "mask", "=", "mask", ".", "convert", "(", "\"L\"", ")", "\n", "", "if", "len", "(", "depth", ".", "split", "(", ")", ")", "==", "3", ":", "\n", "            ", "depth", "=", "depth", ".", "convert", "(", "\"L\"", ")", "\n", "\n", "", "if", "img", ".", "size", "!=", "depth", ".", "size", ":", "\n", "            ", "depth", "=", "depth", ".", "resize", "(", "img", ".", "size", ",", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "\n", "", "img", ",", "mask", ",", "depth", "=", "self", ".", "train_triple_transform", "(", "img", ",", "mask", ",", "depth", ")", "\n", "mask", "=", "self", ".", "train_mask_transform", "(", "mask", ")", "\n", "depth", "=", "self", ".", "train_depth_transform", "(", "depth", ")", "\n", "img", "=", "self", ".", "train_img_transform", "(", "img", ")", "\n", "\n", "img_name", "=", "(", "img_path", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "\n", "return", "img", ",", "mask", ",", "img_name", ",", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgbd_datasets_imgs.TrainImageFolder.__len__": [[167, 169], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgbd_datasets_imgs.DataLoaderX.__iter__": [[172, 174], ["prefetch_generator.BackgroundGenerator", "torch.utils.data.DataLoader.__iter__"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_loader_imgs.DataLoaderX.__iter__"], ["    ", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "BackgroundGenerator", "(", "super", "(", "DataLoaderX", ",", "self", ")", ".", "__iter__", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgbd_datasets_imgs._read_list_from_file": [[17, 25], ["open", "openedfile.readline", "img_list.append", "openedfile.readline", "openedfile.readline.split"], "function", ["None"], ["def", "_read_list_from_file", "(", "list_filepath", ")", ":", "\n", "    ", "img_list", "=", "[", "]", "\n", "with", "open", "(", "list_filepath", ",", "mode", "=", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "openedfile", ":", "\n", "        ", "line", "=", "openedfile", ".", "readline", "(", ")", "\n", "while", "line", ":", "\n", "            ", "img_list", ".", "append", "(", "line", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "line", "=", "openedfile", ".", "readline", "(", ")", "\n", "", "", "return", "img_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgbd_datasets_imgs._make_test_dataset": [[27, 39], ["os.path.join", "os.path.join", "os.path.join", "os.path.splitext", "os.listdir", "f.endswith", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "_make_test_dataset", "(", "root", ",", "prefix", "=", "(", "\".jpg\"", ",", "\".png\"", ")", ")", ":", "\n", "    ", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"Image\"", ")", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"Mask\"", ")", "\n", "depth_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"Depth\"", ")", "\n", "img_list", "=", "[", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", "for", "f", "in", "os", ".", "listdir", "(", "mask_path", ")", "if", "f", ".", "endswith", "(", "prefix", "[", "1", "]", ")", "]", "\n", "return", "[", "\n", "(", "\n", "os", ".", "path", ".", "join", "(", "img_path", ",", "img_name", "+", "prefix", "[", "0", "]", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "mask_path", ",", "img_name", "+", "prefix", "[", "1", "]", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "depth_path", ",", "img_name", "+", "prefix", "[", "1", "]", ")", ",", "\n", ")", "\n", "for", "img_name", "in", "img_list", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgbd_datasets_imgs._make_test_dataset_from_list": [[42, 51], ["create_rgbd_datasets_imgs._read_list_from_file", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.dirname", "os.path.basename", "os.path.dirname", "os.path.basename", "os.path.dirname", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs._read_list_from_file"], ["", "def", "_make_test_dataset_from_list", "(", "list_filepath", ",", "prefix", "=", "(", "\".jpg\"", ",", "\".png\"", ")", ")", ":", "\n", "    ", "img_list", "=", "_read_list_from_file", "(", "list_filepath", ")", "\n", "return", "[", "\n", "(", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "img_path", ")", ",", "\"Image\"", ")", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", "+", "prefix", "[", "0", "]", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "img_path", ")", ",", "\"Mask\"", ")", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", "+", "prefix", "[", "1", "]", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "img_path", ")", ",", "\"Depth\"", ")", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", "+", "prefix", "[", "1", "]", ")", ",", "\n", ")", "\n", "for", "img_path", "in", "img_list", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgbd_datasets_imgs._make_train_dataset": [[93, 105], ["os.path.join", "os.path.join", "os.path.join", "os.path.splitext", "os.listdir", "f.endswith", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "def", "_make_train_dataset", "(", "root", ",", "prefix", "=", "(", "\".jpg\"", ",", "\".png\"", ")", ")", ":", "\n", "    ", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"Image\"", ")", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"Mask\"", ")", "\n", "depth_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"Depth\"", ")", "\n", "img_list", "=", "[", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", "for", "f", "in", "os", ".", "listdir", "(", "mask_path", ")", "if", "f", ".", "endswith", "(", "prefix", "[", "1", "]", ")", "]", "\n", "return", "[", "\n", "(", "\n", "os", ".", "path", ".", "join", "(", "img_path", ",", "img_name", "+", "prefix", "[", "0", "]", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "mask_path", ",", "img_name", "+", "prefix", "[", "1", "]", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "depth_path", ",", "img_name", "+", "prefix", "[", "1", "]", ")", ",", "\n", ")", "\n", "for", "img_name", "in", "img_list", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgbd_datasets_imgs._make_train_dataset_from_list": [[108, 118], ["create_rgbd_datasets_imgs._read_list_from_file", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.dirname", "os.path.basename", "os.path.dirname", "os.path.basename", "os.path.dirname", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs._read_list_from_file"], ["", "def", "_make_train_dataset_from_list", "(", "list_filepath", ",", "prefix", "=", "(", "\".jpg\"", ",", "\".png\"", ")", ")", ":", "\n", "# list_filepath = '/home/lart/Datasets/RGBDSaliency/FinalSet/rgbd_train_jw.lst'", "\n", "    ", "img_list", "=", "_read_list_from_file", "(", "list_filepath", ")", "\n", "return", "[", "\n", "(", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "img_path", ")", ",", "\"Image\"", ")", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", "+", "prefix", "[", "0", "]", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "img_path", ")", ",", "\"Mask\"", ")", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", "+", "prefix", "[", "1", "]", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "img_path", ")", ",", "\"Depth\"", ")", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", "+", "prefix", "[", "1", "]", ")", ",", "\n", ")", "\n", "for", "img_path", "in", "img_list", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_loader_imgs.DataLoaderX.__iter__": [[14, 16], ["prefetch_generator.BackgroundGenerator", "torch.utils.data.DataLoader.__iter__"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_loader_imgs.DataLoaderX.__iter__"], ["    ", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "BackgroundGenerator", "(", "super", "(", "DataLoaderX", ",", "self", ")", ".", "__iter__", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_loader_imgs._make_loader": [[18, 26], ["create_loader_imgs.DataLoaderX"], "function", ["None"], ["", "", "def", "_make_loader", "(", "dataset", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ")", ":", "\n", "    ", "return", "DataLoaderX", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "arg_config", "[", "\"batch_size\"", "]", ",", "\n", "num_workers", "=", "arg_config", "[", "\"num_workers\"", "]", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "drop_last", "=", "drop_last", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_loader_imgs.create_loader": [[29, 54], ["print", "TrainImageFolder", "create_loader_imgs._make_loader", "len", "print", "TestImageFolder", "create_loader_imgs._make_loader", "len"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_loader_imgs._make_loader", "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_loader_imgs._make_loader"], ["", "def", "create_loader", "(", "data_path", ",", "mode", ",", "get_length", "=", "False", ",", "data_mode", "=", "\"RGBD\"", ",", "prefix", "=", "(", "\".jpg\"", ",", "\".png\"", ")", ")", ":", "\n", "    ", "if", "data_mode", "==", "\"RGB\"", ":", "\n", "        ", "from", "utils", ".", "data", ".", "create_rgb_datasets_imgs", "import", "TestImageFolder", ",", "TrainImageFolder", "\n", "", "elif", "data_mode", "==", "\"RGBD\"", ":", "\n", "        ", "from", "utils", ".", "data", ".", "create_rgbd_datasets_imgs", "import", "TestImageFolder", ",", "TrainImageFolder", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "mode", "==", "\"train\"", ":", "\n", "        ", "print", "(", "f\" ==>> \u4f7f\u7528\u8bad\u7ec3\u96c6{data_path}\u8bad\u7ec3 <<== \"", ")", "\n", "train_set", "=", "TrainImageFolder", "(", "data_path", ",", "in_size", "=", "arg_config", "[", "\"input_size\"", "]", ",", "prefix", "=", "prefix", ")", "\n", "loader", "=", "_make_loader", "(", "train_set", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "length_of_dataset", "=", "len", "(", "train_set", ")", "\n", "", "elif", "mode", "==", "\"test\"", ":", "\n", "        ", "print", "(", "f\" ==>> \u4f7f\u7528\u6d4b\u8bd5\u96c6{data_path}\u6d4b\u8bd5 <<== \"", ")", "\n", "test_set", "=", "TestImageFolder", "(", "data_path", ",", "in_size", "=", "arg_config", "[", "\"input_size\"", "]", ",", "prefix", "=", "prefix", ")", "\n", "loader", "=", "_make_loader", "(", "test_set", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ")", "\n", "length_of_dataset", "=", "len", "(", "test_set", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "get_length", ":", "\n", "        ", "return", "loader", ",", "length_of_dataset", "\n", "", "else", ":", "\n", "        ", "return", "loader", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs.TestImageFolder.__init__": [[72, 87], ["os.path.isdir", "torchvision.transforms.Compose", "print", "create_rgb_datasets_imgs._make_dataset", "os.path.isfile", "print", "create_rgb_datasets_imgs._make_test_dataset_from_list", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs._make_dataset", "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs._make_test_dataset_from_list"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "in_size", ",", "prefix", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "root", ")", ":", "\n", "            ", "print", "(", "f\" ==>> {root}\u662f\u56fe\u7247\u6587\u4ef6\u5939, \u5c06\u4f1a\u904d\u5386\u5176\u4e2d\u7684\u56fe\u7247\u8fdb\u884c\u6d4b\u8bd5 <<==\"", ")", "\n", "self", ".", "imgs", "=", "_make_dataset", "(", "root", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "root", ")", ":", "\n", "            ", "print", "(", "f\" ==>> {root}\u662f\u56fe\u7247\u5730\u5740\u5217\u8868, \u5c06\u4f1a\u904d\u5386\u5bf9\u5e94\u7684\u56fe\u7247\u8fdb\u884c\u6d4b\u8bd5 <<==\"", ")", "\n", "self", ".", "imgs", "=", "_make_test_dataset_from_list", "(", "root", ",", "prefix", "=", "prefix", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "test_img_trainsform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "# \u8f93\u5165\u7684\u5982\u679c\u662f\u4e00\u4e2atuple\uff0c\u5219\u6309\u7167\u6570\u636e\u7f29\u653e\uff0c\u4f46\u662f\u5982\u679c\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u6309\u6bd4\u4f8b\u7f29\u653e\u5230\u77ed\u8fb9\u7b49\u4e8e\u8be5\u503c", "\n", "transforms", ".", "Resize", "(", "(", "in_size", ",", "in_size", ")", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs.TestImageFolder.__getitem__": [[90, 98], ["PIL.Image.open().convert", "create_rgb_datasets_imgs.TestImageFolder.test_img_trainsform", "[].split", "PIL.Image.open", "img_path.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_path", ",", "mask_path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "img_name", "=", "(", "img_path", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "\n", "img", "=", "self", ".", "test_img_trainsform", "(", "img", ")", "\n", "return", "img", ",", "img_name", ",", "mask_path", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs.TestImageFolder.__len__": [[99, 101], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs.TrainImageFolder.__init__": [[116, 134], ["os.path.isdir", "utils.transforms.joint_transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "print", "create_rgb_datasets_imgs._make_dataset", "os.path.isfile", "print", "create_rgb_datasets_imgs._make_train_dataset_from_list", "utils.transforms.joint_transforms.JointResize", "utils.transforms.joint_transforms.RandomHorizontallyFlip", "utils.transforms.joint_transforms.RandomRotate", "torchvision.transforms.ColorJitter", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs._make_dataset", "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs._make_train_dataset_from_list"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "in_size", ",", "prefix", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "root", ")", ":", "\n", "            ", "print", "(", "f\" ==>> {root}\u662f\u56fe\u7247\u6587\u4ef6\u5939, \u5c06\u4f1a\u904d\u5386\u5176\u4e2d\u7684\u56fe\u7247\u8fdb\u884c\u8bad\u7ec3 <<==\"", ")", "\n", "self", ".", "imgs", "=", "_make_dataset", "(", "root", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "root", ")", ":", "\n", "            ", "print", "(", "f\" ==>> {root}\u662f\u56fe\u7247\u5730\u5740\u5217\u8868, \u5c06\u4f1a\u904d\u5386\u5bf9\u5e94\u7684\u56fe\u7247\u8fdb\u884c\u8bad\u7ec3 <<==\"", ")", "\n", "self", ".", "imgs", "=", "_make_train_dataset_from_list", "(", "root", ",", "prefix", "=", "prefix", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "train_joint_transform", "=", "Compose", "(", "[", "JointResize", "(", "in_size", ")", ",", "RandomHorizontallyFlip", "(", ")", ",", "RandomRotate", "(", "10", ")", "]", ")", "\n", "self", ".", "train_img_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ColorJitter", "(", "0.1", ",", "0.1", ",", "0.1", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "# \u5904\u7406\u7684\u662fTensor", "\n", "]", "\n", ")", "\n", "self", ".", "train_mask_transform", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs.TrainImageFolder.__getitem__": [[135, 152], ["PIL.Image.open", "PIL.Image.open", "create_rgb_datasets_imgs.TrainImageFolder.train_joint_transform", "create_rgb_datasets_imgs.TrainImageFolder.train_mask_transform", "create_rgb_datasets_imgs.TrainImageFolder.train_img_transform", "len", "img.convert.convert.convert", "len", "mask.convert.convert.convert", "[].split", "img.convert.convert.split", "mask.convert.convert.split", "img_path.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_path", ",", "mask_path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "mask", "=", "Image", ".", "open", "(", "mask_path", ")", "\n", "if", "len", "(", "img", ".", "split", "(", ")", ")", "!=", "3", ":", "\n", "            ", "img", "=", "img", ".", "convert", "(", "\"RGB\"", ")", "\n", "", "if", "len", "(", "mask", ".", "split", "(", ")", ")", "==", "3", ":", "\n", "            ", "mask", "=", "mask", ".", "convert", "(", "\"L\"", ")", "\n", "\n", "", "img", ",", "mask", "=", "self", ".", "train_joint_transform", "(", "img", ",", "mask", ")", "\n", "mask", "=", "self", ".", "train_mask_transform", "(", "mask", ")", "\n", "img", "=", "self", ".", "train_img_transform", "(", "img", ")", "\n", "\n", "img_name", "=", "(", "img_path", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "\n", "return", "img", ",", "mask", ",", "img_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs.TrainImageFolder.__len__": [[153, 155], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs._get_ext": [[16, 31], ["list", "set", "len", "print", "os.path.splitext"], "function", ["None"], ["def", "_get_ext", "(", "path_list", ")", ":", "\n", "    ", "ext_list", "=", "list", "(", "set", "(", "[", "os", ".", "path", ".", "splitext", "(", "p", ")", "[", "1", "]", "for", "p", "in", "path_list", "]", ")", ")", "\n", "if", "len", "(", "ext_list", ")", "!=", "1", ":", "\n", "        ", "if", "\".png\"", "in", "ext_list", ":", "\n", "            ", "ext", "=", "\".png\"", "\n", "", "elif", "\".jpg\"", "in", "ext_list", ":", "\n", "            ", "ext", "=", "\".jpg\"", "\n", "", "elif", "\".bmp\"", "in", "ext_list", ":", "\n", "            ", "ext", "=", "\".bmp\"", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "print", "(", "f\" ==>> \u6570\u636e\u6587\u4ef6\u5939\u4e2d\u5305\u542b\u591a\u79cd\u6269\u5c55\u540d\uff0c\u8fd9\u91cc\u4ec5\u4f7f\u7528{ext} <<== \"", ")", "\n", "", "else", ":", "\n", "        ", "ext", "=", "ext_list", "[", "0", "]", "\n", "", "return", "ext", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs._make_dataset": [[33, 47], ["os.path.join", "os.path.join", "os.listdir", "os.listdir", "create_rgb_datasets_imgs._get_ext", "create_rgb_datasets_imgs._get_ext", "os.path.splitext", "f.endswith", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs._get_ext", "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs._get_ext"], ["", "def", "_make_dataset", "(", "root", ")", ":", "\n", "    ", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"Image\"", ")", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"Mask\"", ")", "\n", "\n", "img_list", "=", "os", ".", "listdir", "(", "img_path", ")", "\n", "mask_list", "=", "os", ".", "listdir", "(", "mask_path", ")", "\n", "\n", "img_ext", "=", "_get_ext", "(", "img_list", ")", "\n", "mask_ext", "=", "_get_ext", "(", "mask_list", ")", "\n", "\n", "img_list", "=", "[", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", "for", "f", "in", "mask_list", "if", "f", ".", "endswith", "(", "mask_ext", ")", "]", "\n", "return", "[", "\n", "(", "os", ".", "path", ".", "join", "(", "img_path", ",", "img_name", "+", "img_ext", ")", ",", "os", ".", "path", ".", "join", "(", "mask_path", ",", "img_name", "+", "mask_ext", ")", ")", "\n", "for", "img_name", "in", "img_list", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs._read_list_from_file": [[50, 58], ["open", "openedfile.readline", "img_list.append", "openedfile.readline", "openedfile.readline.split"], "function", ["None"], ["", "def", "_read_list_from_file", "(", "list_filepath", ")", ":", "\n", "    ", "img_list", "=", "[", "]", "\n", "with", "open", "(", "list_filepath", ",", "mode", "=", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "openedfile", ":", "\n", "        ", "line", "=", "openedfile", ".", "readline", "(", ")", "\n", "while", "line", ":", "\n", "            ", "img_list", ".", "append", "(", "line", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "line", "=", "openedfile", ".", "readline", "(", ")", "\n", "", "", "return", "img_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs._make_test_dataset_from_list": [[60, 68], ["create_rgb_datasets_imgs._read_list_from_file", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.dirname", "os.path.basename", "os.path.dirname", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs._read_list_from_file"], ["", "def", "_make_test_dataset_from_list", "(", "list_filepath", ",", "prefix", "=", "(", "\".jpg\"", ",", "\".png\"", ")", ")", ":", "\n", "    ", "img_list", "=", "_read_list_from_file", "(", "list_filepath", ")", "\n", "return", "[", "\n", "(", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "img_path", ")", ",", "\"Image\"", ")", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", "+", "prefix", "[", "0", "]", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "img_path", ")", ",", "\"Mask\"", ")", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", "+", "prefix", "[", "1", "]", ")", ",", "\n", ")", "\n", "for", "img_path", "in", "img_list", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs._make_train_dataset_from_list": [[103, 112], ["create_rgb_datasets_imgs._read_list_from_file", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.dirname", "os.path.basename", "os.path.dirname", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.data.create_rgb_datasets_imgs._read_list_from_file"], ["", "", "def", "_make_train_dataset_from_list", "(", "list_filepath", ",", "prefix", "=", "(", "\".jpg\"", ",", "\".png\"", ")", ")", ":", "\n", "# list_filepath = '/home/lart/Datasets/RGBDSaliency/FinalSet/rgbd_train_jw.lst'", "\n", "    ", "img_list", "=", "_read_list_from_file", "(", "list_filepath", ")", "\n", "return", "[", "\n", "(", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "img_path", ")", ",", "\"Image\"", ")", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", "+", "prefix", "[", "0", "]", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "img_path", ")", ",", "\"Mask\"", ")", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", "+", "prefix", "[", "1", "]", ")", ",", "\n", ")", "\n", "for", "img_path", "in", "img_list", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.module.BaseBlocks.BasicConv2d.__init__": [[11, 29], ["torch.Module.__init__", "torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "BasicConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "basicconv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.module.BaseBlocks.BasicConv2d.forward": [[31, 33], ["BaseBlocks.BasicConv2d.basicconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "basicconv", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lartpang_HDFNet.module.MyModules.DenseLayer.__init__": [[14, 30], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.ModuleList", "range", "module.BaseBlocks.BasicConv2d", "MyModules.DenseLayer.denseblock.append", "module.BaseBlocks.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_C", ",", "out_C", ",", "down_factor", "=", "4", ",", "k", "=", "4", ")", ":", "\n", "        ", "\"\"\"\n        \u66f4\u50cf\u662fDenseNet\u7684Block\uff0c\u4ece\u800c\u6784\u9020\u7279\u5f81\u5185\u7684\u5bc6\u96c6\u8fde\u63a5\n        \"\"\"", "\n", "super", "(", "DenseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "down_factor", "=", "down_factor", "\n", "mid_C", "=", "out_C", "//", "self", ".", "down_factor", "\n", "\n", "self", ".", "down", "=", "nn", ".", "Conv2d", "(", "in_C", ",", "mid_C", ",", "1", ")", "\n", "\n", "self", ".", "denseblock", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "k", "+", "1", ")", ":", "\n", "            ", "self", ".", "denseblock", ".", "append", "(", "BasicConv2d", "(", "mid_C", "*", "i", ",", "mid_C", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n", "", "self", ".", "fuse", "=", "BasicConv2d", "(", "in_C", "+", "mid_C", ",", "out_C", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.module.MyModules.DenseLayer.forward": [[31, 39], ["MyModules.DenseLayer.down", "torch.cat", "MyModules.DenseLayer.fuse", "denseblock", "out_feats.append", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_feat", ")", ":", "\n", "        ", "down_feats", "=", "self", ".", "down", "(", "in_feat", ")", "\n", "out_feats", "=", "[", "]", "\n", "for", "denseblock", "in", "self", ".", "denseblock", ":", "\n", "            ", "feats", "=", "denseblock", "(", "torch", ".", "cat", "(", "(", "*", "out_feats", ",", "down_feats", ")", ",", "dim", "=", "1", ")", ")", "\n", "out_feats", ".", "append", "(", "feats", ")", "\n", "", "feats", "=", "torch", ".", "cat", "(", "(", "in_feat", ",", "feats", ")", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "fuse", "(", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.module.MyModules.DenseTransLayer.__init__": [[42, 48], ["torch.nn.Module.__init__", "module.BaseBlocks.BasicConv2d", "MyModules.DenseLayer", "module.BaseBlocks.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_C", ",", "out_C", ")", ":", "\n", "        ", "super", "(", "DenseTransLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "down_factor", "=", "in_C", "//", "out_C", "\n", "self", ".", "fuse_down_mul", "=", "BasicConv2d", "(", "in_C", ",", "in_C", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "res_main", "=", "DenseLayer", "(", "in_C", ",", "in_C", ",", "down_factor", "=", "down_factor", ")", "\n", "self", ".", "fuse_main", "=", "BasicConv2d", "(", "in_C", ",", "out_C", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.module.MyModules.DenseTransLayer.forward": [[49, 53], ["MyModules.DenseTransLayer.fuse_down_mul", "MyModules.DenseTransLayer.fuse_main", "rgb.size", "depth.size", "MyModules.DenseTransLayer.res_main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "rgb", ",", "depth", ")", ":", "\n", "        ", "assert", "rgb", ".", "size", "(", ")", "==", "depth", ".", "size", "(", ")", "\n", "feat", "=", "self", ".", "fuse_down_mul", "(", "rgb", "+", "depth", ")", "\n", "return", "self", ".", "fuse_main", "(", "self", ".", "res_main", "(", "feat", ")", "+", "feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.module.MyModules.DDPM.__init__": [[56, 74], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "MyModules.DepthDC3x3_1", "MyModules.DepthDC3x3_3", "MyModules.DepthDC3x3_5", "module.BaseBlocks.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_xC", ",", "in_yC", ",", "out_C", ",", "kernel_size", "=", "3", ",", "down_factor", "=", "4", ")", ":", "\n", "        ", "\"\"\"DDPM\uff0c\u5229\u7528nn.Unfold\u5b9e\u73b0\u7684\u52a8\u6001\u5377\u79ef\u6a21\u5757\n\n        Args:\n            in_xC (int): \u7b2c\u4e00\u4e2a\u8f93\u5165\u7684\u901a\u9053\u6570\n            in_yC (int): \u7b2c\u4e8c\u4e2a\u8f93\u5165\u7684\u901a\u9053\u6570\n            out_C (int): \u6700\u7ec8\u8f93\u51fa\u7684\u901a\u9053\u6570\n            kernel_size (int): \u6307\u5b9a\u7684\u751f\u6210\u7684\u5377\u79ef\u6838\u7684\u5927\u5c0f\n            down_factor (int): \u7528\u6765\u964d\u4f4e\u5377\u79ef\u6838\u751f\u6210\u8fc7\u7a0b\u4e2d\u7684\u53c2\u6570\u91cf\u7684\u4e00\u4e2a\u964d\u4f4e\u901a\u9053\u6570\u7684\u53c2\u6570\n        \"\"\"", "\n", "super", "(", "DDPM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "mid_c", "=", "out_C", "//", "4", "\n", "self", ".", "down_input", "=", "nn", ".", "Conv2d", "(", "in_xC", ",", "self", ".", "mid_c", ",", "1", ")", "\n", "self", ".", "branch_1", "=", "DepthDC3x3_1", "(", "self", ".", "mid_c", ",", "in_yC", ",", "self", ".", "mid_c", ",", "down_factor", "=", "down_factor", ")", "\n", "self", ".", "branch_3", "=", "DepthDC3x3_3", "(", "self", ".", "mid_c", ",", "in_yC", ",", "self", ".", "mid_c", ",", "down_factor", "=", "down_factor", ")", "\n", "self", ".", "branch_5", "=", "DepthDC3x3_5", "(", "self", ".", "mid_c", ",", "in_yC", ",", "self", ".", "mid_c", ",", "down_factor", "=", "down_factor", ")", "\n", "self", ".", "fuse", "=", "BasicConv2d", "(", "4", "*", "self", ".", "mid_c", ",", "out_C", ",", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.module.MyModules.DDPM.forward": [[75, 81], ["MyModules.DDPM.down_input", "MyModules.DDPM.branch_1", "MyModules.DDPM.branch_3", "MyModules.DDPM.branch_5", "MyModules.DDPM.fuse", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x", "=", "self", ".", "down_input", "(", "x", ")", "\n", "result_1", "=", "self", ".", "branch_1", "(", "x", ",", "y", ")", "\n", "result_3", "=", "self", ".", "branch_3", "(", "x", ",", "y", ")", "\n", "result_5", "=", "self", ".", "branch_5", "(", "x", ",", "y", ")", "\n", "return", "self", ".", "fuse", "(", "torch", ".", "cat", "(", "(", "x", ",", "result_1", ",", "result_3", ",", "result_5", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.module.MyModules.DepthDC3x3_1.__init__": [[84, 102], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Unfold", "torch.nn.Conv2d", "MyModules.DenseLayer", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_xC", ",", "in_yC", ",", "out_C", ",", "down_factor", "=", "4", ")", ":", "\n", "        ", "\"\"\"DepthDC3x3_1\uff0c\u5229\u7528nn.Unfold\u5b9e\u73b0\u7684\u52a8\u6001\u5377\u79ef\u6a21\u5757\n\n        Args:\n            in_xC (int): \u7b2c\u4e00\u4e2a\u8f93\u5165\u7684\u901a\u9053\u6570\n            in_yC (int): \u7b2c\u4e8c\u4e2a\u8f93\u5165\u7684\u901a\u9053\u6570\n            out_C (int): \u6700\u7ec8\u8f93\u51fa\u7684\u901a\u9053\u6570\n            down_factor (int): \u7528\u6765\u964d\u4f4e\u5377\u79ef\u6838\u751f\u6210\u8fc7\u7a0b\u4e2d\u7684\u53c2\u6570\u91cf\u7684\u4e00\u4e2a\u964d\u4f4e\u901a\u9053\u6570\u7684\u53c2\u6570\n        \"\"\"", "\n", "super", "(", "DepthDC3x3_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "3", "\n", "self", ".", "fuse", "=", "nn", ".", "Conv2d", "(", "in_xC", ",", "out_C", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "gernerate_kernel", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_yC", ",", "in_yC", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "DenseLayer", "(", "in_yC", ",", "in_yC", ",", "k", "=", "down_factor", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_yC", ",", "in_xC", "*", "self", ".", "kernel_size", "**", "2", ",", "1", ")", ",", "\n", ")", "\n", "self", ".", "unfold", "=", "nn", ".", "Unfold", "(", "kernel_size", "=", "3", ",", "dilation", "=", "1", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.module.MyModules.DepthDC3x3_1.forward": [[103, 109], ["x.size", "MyModules.DepthDC3x3_1.gernerate_kernel().reshape", "MyModules.DepthDC3x3_1.unfold().reshape", "MyModules.DepthDC3x3_1.fuse", "MyModules.DepthDC3x3_1.gernerate_kernel", "MyModules.DepthDC3x3_1.unfold"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "N", ",", "xC", ",", "xH", ",", "xW", "=", "x", ".", "size", "(", ")", "\n", "kernel", "=", "self", ".", "gernerate_kernel", "(", "y", ")", ".", "reshape", "(", "[", "N", ",", "xC", ",", "self", ".", "kernel_size", "**", "2", ",", "xH", ",", "xW", "]", ")", "\n", "unfold_x", "=", "self", ".", "unfold", "(", "x", ")", ".", "reshape", "(", "[", "N", ",", "xC", ",", "-", "1", ",", "xH", ",", "xW", "]", ")", "\n", "result", "=", "(", "unfold_x", "*", "kernel", ")", ".", "sum", "(", "2", ")", "\n", "return", "self", ".", "fuse", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.module.MyModules.DepthDC3x3_3.__init__": [[112, 130], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Unfold", "torch.nn.Conv2d", "MyModules.DenseLayer", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_xC", ",", "in_yC", ",", "out_C", ",", "down_factor", "=", "4", ")", ":", "\n", "        ", "\"\"\"DepthDC3x3_3\uff0c\u5229\u7528nn.Unfold\u5b9e\u73b0\u7684\u52a8\u6001\u5377\u79ef\u6a21\u5757\n\n        Args:\n            in_xC (int): \u7b2c\u4e00\u4e2a\u8f93\u5165\u7684\u901a\u9053\u6570\n            in_yC (int): \u7b2c\u4e8c\u4e2a\u8f93\u5165\u7684\u901a\u9053\u6570\n            out_C (int): \u6700\u7ec8\u8f93\u51fa\u7684\u901a\u9053\u6570\n            down_factor (int): \u7528\u6765\u964d\u4f4e\u5377\u79ef\u6838\u751f\u6210\u8fc7\u7a0b\u4e2d\u7684\u53c2\u6570\u91cf\u7684\u4e00\u4e2a\u964d\u4f4e\u901a\u9053\u6570\u7684\u53c2\u6570\n        \"\"\"", "\n", "super", "(", "DepthDC3x3_3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fuse", "=", "nn", ".", "Conv2d", "(", "in_xC", ",", "out_C", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "kernel_size", "=", "3", "\n", "self", ".", "gernerate_kernel", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_yC", ",", "in_yC", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "DenseLayer", "(", "in_yC", ",", "in_yC", ",", "k", "=", "down_factor", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_yC", ",", "in_xC", "*", "self", ".", "kernel_size", "**", "2", ",", "1", ")", ",", "\n", ")", "\n", "self", ".", "unfold", "=", "nn", ".", "Unfold", "(", "kernel_size", "=", "3", ",", "dilation", "=", "3", ",", "padding", "=", "3", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.module.MyModules.DepthDC3x3_3.forward": [[131, 137], ["x.size", "MyModules.DepthDC3x3_3.gernerate_kernel().reshape", "MyModules.DepthDC3x3_3.unfold().reshape", "MyModules.DepthDC3x3_3.fuse", "MyModules.DepthDC3x3_3.gernerate_kernel", "MyModules.DepthDC3x3_3.unfold"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "N", ",", "xC", ",", "xH", ",", "xW", "=", "x", ".", "size", "(", ")", "\n", "kernel", "=", "self", ".", "gernerate_kernel", "(", "y", ")", ".", "reshape", "(", "[", "N", ",", "xC", ",", "self", ".", "kernel_size", "**", "2", ",", "xH", ",", "xW", "]", ")", "\n", "unfold_x", "=", "self", ".", "unfold", "(", "x", ")", ".", "reshape", "(", "[", "N", ",", "xC", ",", "-", "1", ",", "xH", ",", "xW", "]", ")", "\n", "result", "=", "(", "unfold_x", "*", "kernel", ")", ".", "sum", "(", "2", ")", "\n", "return", "self", ".", "fuse", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.module.MyModules.DepthDC3x3_5.__init__": [[140, 158], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Unfold", "torch.nn.Conv2d", "MyModules.DenseLayer", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_xC", ",", "in_yC", ",", "out_C", ",", "down_factor", "=", "4", ")", ":", "\n", "        ", "\"\"\"DepthDC3x3_5\uff0c\u5229\u7528nn.Unfold\u5b9e\u73b0\u7684\u52a8\u6001\u5377\u79ef\u6a21\u5757\n\n        Args:\n            in_xC (int): \u7b2c\u4e00\u4e2a\u8f93\u5165\u7684\u901a\u9053\u6570\n            in_yC (int): \u7b2c\u4e8c\u4e2a\u8f93\u5165\u7684\u901a\u9053\u6570\n            out_C (int): \u6700\u7ec8\u8f93\u51fa\u7684\u901a\u9053\u6570\n            down_factor (int): \u7528\u6765\u964d\u4f4e\u5377\u79ef\u6838\u751f\u6210\u8fc7\u7a0b\u4e2d\u7684\u53c2\u6570\u91cf\u7684\u4e00\u4e2a\u964d\u4f4e\u901a\u9053\u6570\u7684\u53c2\u6570\n        \"\"\"", "\n", "super", "(", "DepthDC3x3_5", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "3", "\n", "self", ".", "fuse", "=", "nn", ".", "Conv2d", "(", "in_xC", ",", "out_C", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "gernerate_kernel", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_yC", ",", "in_yC", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "DenseLayer", "(", "in_yC", ",", "in_yC", ",", "k", "=", "down_factor", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_yC", ",", "in_xC", "*", "self", ".", "kernel_size", "**", "2", ",", "1", ")", ",", "\n", ")", "\n", "self", ".", "unfold", "=", "nn", ".", "Unfold", "(", "kernel_size", "=", "3", ",", "dilation", "=", "5", ",", "padding", "=", "5", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.module.MyModules.DepthDC3x3_5.forward": [[159, 165], ["x.size", "MyModules.DepthDC3x3_5.gernerate_kernel().reshape", "MyModules.DepthDC3x3_5.unfold().reshape", "MyModules.DepthDC3x3_5.fuse", "MyModules.DepthDC3x3_5.gernerate_kernel", "MyModules.DepthDC3x3_5.unfold"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "N", ",", "xC", ",", "xH", ",", "xW", "=", "x", ".", "size", "(", ")", "\n", "kernel", "=", "self", ".", "gernerate_kernel", "(", "y", ")", ".", "reshape", "(", "[", "N", ",", "xC", ",", "self", ".", "kernel_size", "**", "2", ",", "xH", ",", "xW", "]", ")", "\n", "unfold_x", "=", "self", ".", "unfold", "(", "x", ")", ".", "reshape", "(", "[", "N", ",", "xC", ",", "-", "1", ",", "xH", ",", "xW", "]", ")", "\n", "result", "=", "(", "unfold_x", "*", "kernel", ")", ".", "sum", "(", "2", ")", "\n", "return", "self", ".", "fuse", "(", "result", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lartpang_HDFNet.network.HDFNet.HDFNet_VGG16.__init__": [[26, 63], ["torch.Module.__init__", "backbone.VGG.Backbone_VGG_in3", "backbone.VGG.Backbone_VGG_in1", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "module.MyModules.DenseTransLayer", "module.MyModules.DenseTransLayer", "module.MyModules.DenseTransLayer", "module.BaseBlocks.BasicConv2d", "module.BaseBlocks.BasicConv2d", "module.BaseBlocks.BasicConv2d", "module.BaseBlocks.BasicConv2d", "module.BaseBlocks.BasicConv2d", "module.MyModules.DDPM", "module.MyModules.DDPM", "module.MyModules.DDPM", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.__init__", "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.Backbone_VGG_in3", "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.Backbone_VGG_in1"], ["    ", "def", "__init__", "(", "self", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "HDFNet_VGG16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "upsample_add", "=", "upsample_add", "\n", "self", ".", "upsample", "=", "cus_sample", "\n", "\n", "self", ".", "encoder1", ",", "self", ".", "encoder2", ",", "self", ".", "encoder4", ",", "self", ".", "encoder8", ",", "self", ".", "encoder16", "=", "Backbone_VGG_in3", "(", "\n", "pretrained", "=", "pretrained", "\n", ")", "\n", "(", "\n", "self", ".", "depth_encoder1", ",", "\n", "self", ".", "depth_encoder2", ",", "\n", "self", ".", "depth_encoder4", ",", "\n", "self", ".", "depth_encoder8", ",", "\n", "self", ".", "depth_encoder16", ",", "\n", ")", "=", "Backbone_VGG_in1", "(", "pretrained", "=", "pretrained", ")", "\n", "\n", "self", ".", "trans16", "=", "nn", ".", "Conv2d", "(", "512", ",", "64", ",", "1", ")", "\n", "self", ".", "trans8", "=", "nn", ".", "Conv2d", "(", "512", ",", "64", ",", "1", ")", "\n", "self", ".", "trans4", "=", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "1", ")", "\n", "self", ".", "trans2", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "1", ")", "\n", "self", ".", "trans1", "=", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "1", ")", "\n", "\n", "self", ".", "depth_trans16", "=", "DenseTransLayer", "(", "512", ",", "64", ")", "\n", "self", ".", "depth_trans8", "=", "DenseTransLayer", "(", "512", ",", "64", ")", "\n", "self", ".", "depth_trans4", "=", "DenseTransLayer", "(", "256", ",", "64", ")", "\n", "\n", "self", ".", "upconv16", "=", "BasicConv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "upconv8", "=", "BasicConv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "upconv4", "=", "BasicConv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "upconv2", "=", "BasicConv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "upconv1", "=", "BasicConv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "selfdc_16", "=", "DDPM", "(", "64", ",", "64", ",", "64", ",", "3", ",", "4", ")", "\n", "self", ".", "selfdc_8", "=", "DDPM", "(", "64", ",", "64", ",", "64", ",", "3", ",", "4", ")", "\n", "self", ".", "selfdc_4", "=", "DDPM", "(", "64", ",", "64", ",", "64", ",", "3", ",", "4", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.network.HDFNet.HDFNet_VGG16.forward": [[64, 114], ["HDFNet.HDFNet_VGG16.encoder1", "HDFNet.HDFNet_VGG16.depth_encoder1", "HDFNet.HDFNet_VGG16.encoder2", "HDFNet.HDFNet_VGG16.depth_encoder2", "HDFNet.HDFNet_VGG16.encoder4", "HDFNet.HDFNet_VGG16.depth_encoder4", "HDFNet.HDFNet_VGG16.encoder8", "HDFNet.HDFNet_VGG16.depth_encoder8", "HDFNet.HDFNet_VGG16.encoder16", "HDFNet.HDFNet_VGG16.depth_encoder16", "HDFNet.HDFNet_VGG16.depth_trans4", "HDFNet.HDFNet_VGG16.depth_trans8", "HDFNet.HDFNet_VGG16.depth_trans16", "HDFNet.HDFNet_VGG16.trans1", "HDFNet.HDFNet_VGG16.trans2", "HDFNet.HDFNet_VGG16.trans4", "HDFNet.HDFNet_VGG16.trans8", "HDFNet.HDFNet_VGG16.trans16", "HDFNet.HDFNet_VGG16.upconv16", "HDFNet.HDFNet_VGG16.upsample_add", "HDFNet.HDFNet_VGG16.upconv8", "HDFNet.HDFNet_VGG16.upsample_add", "HDFNet.HDFNet_VGG16.upconv4", "HDFNet.HDFNet_VGG16.upsample_add", "HDFNet.HDFNet_VGG16.upconv2", "HDFNet.HDFNet_VGG16.upsample_add", "HDFNet.HDFNet_VGG16.upconv1", "HDFNet.HDFNet_VGG16.classifier", "HDFNet.HDFNet_VGG16.sigmoid", "HDFNet.HDFNet_VGG16.selfdc_16", "HDFNet.HDFNet_VGG16.selfdc_8", "HDFNet.HDFNet_VGG16.selfdc_4"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.tensor_ops.upsample_add", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.tensor_ops.upsample_add", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.tensor_ops.upsample_add", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.tensor_ops.upsample_add"], ["", "def", "forward", "(", "self", ",", "in_data", ",", "in_depth", ")", ":", "\n", "        ", "in_data_1", "=", "self", ".", "encoder1", "(", "in_data", ")", "\n", "del", "in_data", "\n", "in_data_1_d", "=", "self", ".", "depth_encoder1", "(", "in_depth", ")", "\n", "del", "in_depth", "\n", "\n", "in_data_2", "=", "self", ".", "encoder2", "(", "in_data_1", ")", "\n", "in_data_2_d", "=", "self", ".", "depth_encoder2", "(", "in_data_1_d", ")", "\n", "in_data_4", "=", "self", ".", "encoder4", "(", "in_data_2", ")", "\n", "in_data_4_d", "=", "self", ".", "depth_encoder4", "(", "in_data_2_d", ")", "\n", "del", "in_data_2_d", ",", "in_data_1_d", "\n", "\n", "in_data_8", "=", "self", ".", "encoder8", "(", "in_data_4", ")", "\n", "in_data_8_d", "=", "self", ".", "depth_encoder8", "(", "in_data_4_d", ")", "\n", "in_data_16", "=", "self", ".", "encoder16", "(", "in_data_8", ")", "\n", "in_data_16_d", "=", "self", ".", "depth_encoder16", "(", "in_data_8_d", ")", "\n", "\n", "in_data_4_aux", "=", "self", ".", "depth_trans4", "(", "in_data_4", ",", "in_data_4_d", ")", "\n", "in_data_8_aux", "=", "self", ".", "depth_trans8", "(", "in_data_8", ",", "in_data_8_d", ")", "\n", "in_data_16_aux", "=", "self", ".", "depth_trans16", "(", "in_data_16", ",", "in_data_16_d", ")", "\n", "del", "in_data_4_d", ",", "in_data_8_d", ",", "in_data_16_d", "\n", "\n", "in_data_1", "=", "self", ".", "trans1", "(", "in_data_1", ")", "\n", "in_data_2", "=", "self", ".", "trans2", "(", "in_data_2", ")", "\n", "in_data_4", "=", "self", ".", "trans4", "(", "in_data_4", ")", "\n", "in_data_8", "=", "self", ".", "trans8", "(", "in_data_8", ")", "\n", "in_data_16", "=", "self", ".", "trans16", "(", "in_data_16", ")", "\n", "\n", "out_data_16", "=", "in_data_16", "\n", "out_data_16", "=", "self", ".", "upconv16", "(", "out_data_16", ")", "# 1024", "\n", "out_data_8", "=", "self", ".", "upsample_add", "(", "self", ".", "selfdc_16", "(", "out_data_16", ",", "in_data_16_aux", ")", ",", "in_data_8", ")", "\n", "del", "out_data_16", ",", "in_data_16_aux", ",", "in_data_8", "\n", "\n", "out_data_8", "=", "self", ".", "upconv8", "(", "out_data_8", ")", "# 512", "\n", "out_data_4", "=", "self", ".", "upsample_add", "(", "self", ".", "selfdc_8", "(", "out_data_8", ",", "in_data_8_aux", ")", ",", "in_data_4", ")", "\n", "del", "out_data_8", ",", "in_data_8_aux", ",", "in_data_4", "\n", "\n", "out_data_4", "=", "self", ".", "upconv4", "(", "out_data_4", ")", "# 256", "\n", "out_data_2", "=", "self", ".", "upsample_add", "(", "self", ".", "selfdc_4", "(", "out_data_4", ",", "in_data_4_aux", ")", ",", "in_data_2", ")", "\n", "del", "out_data_4", ",", "in_data_4_aux", ",", "in_data_2", "\n", "\n", "out_data_2", "=", "self", ".", "upconv2", "(", "out_data_2", ")", "# 64", "\n", "out_data_1", "=", "self", ".", "upsample_add", "(", "out_data_2", ",", "in_data_1", ")", "\n", "del", "out_data_2", ",", "in_data_1", "\n", "\n", "out_data_1", "=", "self", ".", "upconv1", "(", "out_data_1", ")", "# 32", "\n", "\n", "out_data", "=", "self", ".", "classifier", "(", "out_data_1", ")", "\n", "\n", "return", "out_data", ".", "sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.network.HDFNet.HDFNet_VGG19.__init__": [[117, 154], ["torch.Module.__init__", "backbone.VGG.Backbone_VGG19_in3", "backbone.VGG.Backbone_VGG19_in1", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "module.MyModules.DenseTransLayer", "module.MyModules.DenseTransLayer", "module.MyModules.DenseTransLayer", "module.BaseBlocks.BasicConv2d", "module.BaseBlocks.BasicConv2d", "module.BaseBlocks.BasicConv2d", "module.BaseBlocks.BasicConv2d", "module.BaseBlocks.BasicConv2d", "module.MyModules.DDPM", "module.MyModules.DDPM", "module.MyModules.DDPM", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.__init__", "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.Backbone_VGG19_in3", "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.Backbone_VGG19_in1"], ["    ", "def", "__init__", "(", "self", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "HDFNet_VGG19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "upsample_add", "=", "upsample_add", "\n", "self", ".", "upsample", "=", "cus_sample", "\n", "\n", "self", ".", "encoder1", ",", "self", ".", "encoder2", ",", "self", ".", "encoder4", ",", "self", ".", "encoder8", ",", "self", ".", "encoder16", "=", "Backbone_VGG19_in3", "(", "\n", "pretrained", "=", "pretrained", "\n", ")", "\n", "(", "\n", "self", ".", "depth_encoder1", ",", "\n", "self", ".", "depth_encoder2", ",", "\n", "self", ".", "depth_encoder4", ",", "\n", "self", ".", "depth_encoder8", ",", "\n", "self", ".", "depth_encoder16", ",", "\n", ")", "=", "Backbone_VGG19_in1", "(", "pretrained", "=", "pretrained", ")", "\n", "\n", "self", ".", "trans16", "=", "nn", ".", "Conv2d", "(", "512", ",", "64", ",", "1", ")", "\n", "self", ".", "trans8", "=", "nn", ".", "Conv2d", "(", "512", ",", "64", ",", "1", ")", "\n", "self", ".", "trans4", "=", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "1", ")", "\n", "self", ".", "trans2", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "1", ")", "\n", "self", ".", "trans1", "=", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "1", ")", "\n", "\n", "self", ".", "depth_trans16", "=", "DenseTransLayer", "(", "512", ",", "64", ")", "\n", "self", ".", "depth_trans8", "=", "DenseTransLayer", "(", "512", ",", "64", ")", "\n", "self", ".", "depth_trans4", "=", "DenseTransLayer", "(", "256", ",", "64", ")", "\n", "\n", "self", ".", "upconv16", "=", "BasicConv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "upconv8", "=", "BasicConv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "upconv4", "=", "BasicConv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "upconv2", "=", "BasicConv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "upconv1", "=", "BasicConv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "selfdc_16", "=", "DDPM", "(", "64", ",", "64", ",", "64", ",", "3", ",", "4", ")", "\n", "self", ".", "selfdc_8", "=", "DDPM", "(", "64", ",", "64", ",", "64", ",", "3", ",", "4", ")", "\n", "self", ".", "selfdc_4", "=", "DDPM", "(", "64", ",", "64", ",", "64", ",", "3", ",", "4", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.network.HDFNet.HDFNet_VGG19.forward": [[155, 205], ["HDFNet.HDFNet_VGG19.encoder1", "HDFNet.HDFNet_VGG19.depth_encoder1", "HDFNet.HDFNet_VGG19.encoder2", "HDFNet.HDFNet_VGG19.depth_encoder2", "HDFNet.HDFNet_VGG19.encoder4", "HDFNet.HDFNet_VGG19.depth_encoder4", "HDFNet.HDFNet_VGG19.encoder8", "HDFNet.HDFNet_VGG19.depth_encoder8", "HDFNet.HDFNet_VGG19.encoder16", "HDFNet.HDFNet_VGG19.depth_encoder16", "HDFNet.HDFNet_VGG19.depth_trans4", "HDFNet.HDFNet_VGG19.depth_trans8", "HDFNet.HDFNet_VGG19.depth_trans16", "HDFNet.HDFNet_VGG19.trans1", "HDFNet.HDFNet_VGG19.trans2", "HDFNet.HDFNet_VGG19.trans4", "HDFNet.HDFNet_VGG19.trans8", "HDFNet.HDFNet_VGG19.trans16", "HDFNet.HDFNet_VGG19.upconv16", "HDFNet.HDFNet_VGG19.upsample_add", "HDFNet.HDFNet_VGG19.upconv8", "HDFNet.HDFNet_VGG19.upsample_add", "HDFNet.HDFNet_VGG19.upconv4", "HDFNet.HDFNet_VGG19.upsample_add", "HDFNet.HDFNet_VGG19.upconv2", "HDFNet.HDFNet_VGG19.upsample_add", "HDFNet.HDFNet_VGG19.upconv1", "HDFNet.HDFNet_VGG19.classifier", "HDFNet.HDFNet_VGG19.sigmoid", "HDFNet.HDFNet_VGG19.selfdc_16", "HDFNet.HDFNet_VGG19.selfdc_8", "HDFNet.HDFNet_VGG19.selfdc_4"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.tensor_ops.upsample_add", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.tensor_ops.upsample_add", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.tensor_ops.upsample_add", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.tensor_ops.upsample_add"], ["", "def", "forward", "(", "self", ",", "in_data", ",", "in_depth", ")", ":", "\n", "        ", "in_data_1", "=", "self", ".", "encoder1", "(", "in_data", ")", "\n", "del", "in_data", "\n", "in_data_1_d", "=", "self", ".", "depth_encoder1", "(", "in_depth", ")", "\n", "del", "in_depth", "\n", "\n", "in_data_2", "=", "self", ".", "encoder2", "(", "in_data_1", ")", "\n", "in_data_2_d", "=", "self", ".", "depth_encoder2", "(", "in_data_1_d", ")", "\n", "in_data_4", "=", "self", ".", "encoder4", "(", "in_data_2", ")", "\n", "in_data_4_d", "=", "self", ".", "depth_encoder4", "(", "in_data_2_d", ")", "\n", "del", "in_data_2_d", ",", "in_data_1_d", "\n", "\n", "in_data_8", "=", "self", ".", "encoder8", "(", "in_data_4", ")", "\n", "in_data_8_d", "=", "self", ".", "depth_encoder8", "(", "in_data_4_d", ")", "\n", "in_data_16", "=", "self", ".", "encoder16", "(", "in_data_8", ")", "\n", "in_data_16_d", "=", "self", ".", "depth_encoder16", "(", "in_data_8_d", ")", "\n", "\n", "in_data_4_aux", "=", "self", ".", "depth_trans4", "(", "in_data_4", ",", "in_data_4_d", ")", "\n", "in_data_8_aux", "=", "self", ".", "depth_trans8", "(", "in_data_8", ",", "in_data_8_d", ")", "\n", "in_data_16_aux", "=", "self", ".", "depth_trans16", "(", "in_data_16", ",", "in_data_16_d", ")", "\n", "del", "in_data_4_d", ",", "in_data_8_d", ",", "in_data_16_d", "\n", "\n", "in_data_1", "=", "self", ".", "trans1", "(", "in_data_1", ")", "\n", "in_data_2", "=", "self", ".", "trans2", "(", "in_data_2", ")", "\n", "in_data_4", "=", "self", ".", "trans4", "(", "in_data_4", ")", "\n", "in_data_8", "=", "self", ".", "trans8", "(", "in_data_8", ")", "\n", "in_data_16", "=", "self", ".", "trans16", "(", "in_data_16", ")", "\n", "\n", "out_data_16", "=", "in_data_16", "\n", "out_data_16", "=", "self", ".", "upconv16", "(", "out_data_16", ")", "# 1024", "\n", "out_data_8", "=", "self", ".", "upsample_add", "(", "self", ".", "selfdc_16", "(", "out_data_16", ",", "in_data_16_aux", ")", ",", "in_data_8", ")", "\n", "del", "out_data_16", ",", "in_data_16_aux", ",", "in_data_8", "\n", "\n", "out_data_8", "=", "self", ".", "upconv8", "(", "out_data_8", ")", "# 512", "\n", "out_data_4", "=", "self", ".", "upsample_add", "(", "self", ".", "selfdc_8", "(", "out_data_8", ",", "in_data_8_aux", ")", ",", "in_data_4", ")", "\n", "del", "out_data_8", ",", "in_data_8_aux", ",", "in_data_4", "\n", "\n", "out_data_4", "=", "self", ".", "upconv4", "(", "out_data_4", ")", "# 256", "\n", "out_data_2", "=", "self", ".", "upsample_add", "(", "self", ".", "selfdc_4", "(", "out_data_4", ",", "in_data_4_aux", ")", ",", "in_data_2", ")", "\n", "del", "out_data_4", ",", "in_data_4_aux", ",", "in_data_2", "\n", "\n", "out_data_2", "=", "self", ".", "upconv2", "(", "out_data_2", ")", "# 64", "\n", "out_data_1", "=", "self", ".", "upsample_add", "(", "out_data_2", ",", "in_data_1", ")", "\n", "del", "out_data_2", ",", "in_data_1", "\n", "\n", "out_data_1", "=", "self", ".", "upconv1", "(", "out_data_1", ")", "# 32", "\n", "\n", "out_data", "=", "self", ".", "classifier", "(", "out_data_1", ")", "\n", "\n", "return", "out_data", ".", "sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.network.HDFNet.HDFNet_Res50.__init__": [[208, 246], ["torch.Module.__init__", "backbone.ResNet.Backbone_ResNet50_in3", "backbone.ResNet.Backbone_ResNet50_in1", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "module.MyModules.DenseTransLayer", "module.MyModules.DenseTransLayer", "module.MyModules.DenseTransLayer", "module.BaseBlocks.BasicConv2d", "module.BaseBlocks.BasicConv2d", "module.BaseBlocks.BasicConv2d", "module.BaseBlocks.BasicConv2d", "module.BaseBlocks.BasicConv2d", "module.BaseBlocks.BasicConv2d", "module.MyModules.DDPM", "module.MyModules.DDPM", "module.MyModules.DDPM", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.__init__", "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.Backbone_ResNet50_in3", "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.Backbone_ResNet50_in1"], ["    ", "def", "__init__", "(", "self", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "HDFNet_Res50", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "upsample_add", "=", "upsample_add", "\n", "self", ".", "upsample", "=", "cus_sample", "\n", "\n", "self", ".", "encoder2", ",", "self", ".", "encoder4", ",", "self", ".", "encoder8", ",", "self", ".", "encoder16", ",", "self", ".", "encoder32", "=", "Backbone_ResNet50_in3", "(", "\n", "pretrained", "=", "pretrained", "\n", ")", "\n", "(", "\n", "self", ".", "depth_encoder2", ",", "\n", "self", ".", "depth_encoder4", ",", "\n", "self", ".", "depth_encoder8", ",", "\n", "self", ".", "depth_encoder16", ",", "\n", "self", ".", "depth_encoder32", ",", "\n", ")", "=", "Backbone_ResNet50_in1", "(", "pretrained", "=", "pretrained", ")", "\n", "\n", "self", ".", "trans32", "=", "nn", ".", "Conv2d", "(", "2048", ",", "64", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "trans16", "=", "nn", ".", "Conv2d", "(", "1024", ",", "64", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "trans8", "=", "nn", ".", "Conv2d", "(", "512", ",", "64", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "trans4", "=", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "trans2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "depth_trans32", "=", "DenseTransLayer", "(", "2048", ",", "64", ")", "\n", "self", ".", "depth_trans16", "=", "DenseTransLayer", "(", "1024", ",", "64", ")", "\n", "self", ".", "depth_trans8", "=", "DenseTransLayer", "(", "512", ",", "64", ")", "\n", "\n", "self", ".", "upconv32", "=", "BasicConv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "upconv16", "=", "BasicConv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "upconv8", "=", "BasicConv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "upconv4", "=", "BasicConv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "upconv2", "=", "BasicConv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "upconv1", "=", "BasicConv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "selfdc_32", "=", "DDPM", "(", "64", ",", "64", ",", "64", ",", "3", ",", "4", ")", "\n", "self", ".", "selfdc_16", "=", "DDPM", "(", "64", ",", "64", ",", "64", ",", "3", ",", "4", ")", "\n", "self", ".", "selfdc_8", "=", "DDPM", "(", "64", ",", "64", ",", "64", ",", "3", ",", "4", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.network.HDFNet.HDFNet_Res50.forward": [[247, 295], ["HDFNet.HDFNet_Res50.encoder2", "HDFNet.HDFNet_Res50.depth_encoder2", "HDFNet.HDFNet_Res50.encoder4", "HDFNet.HDFNet_Res50.depth_encoder4", "HDFNet.HDFNet_Res50.encoder8", "HDFNet.HDFNet_Res50.depth_encoder8", "HDFNet.HDFNet_Res50.encoder16", "HDFNet.HDFNet_Res50.depth_encoder16", "HDFNet.HDFNet_Res50.encoder32", "HDFNet.HDFNet_Res50.depth_encoder32", "HDFNet.HDFNet_Res50.depth_trans8", "HDFNet.HDFNet_Res50.depth_trans16", "HDFNet.HDFNet_Res50.depth_trans32", "HDFNet.HDFNet_Res50.trans2", "HDFNet.HDFNet_Res50.trans4", "HDFNet.HDFNet_Res50.trans8", "HDFNet.HDFNet_Res50.trans16", "HDFNet.HDFNet_Res50.trans32", "HDFNet.HDFNet_Res50.upconv32", "HDFNet.HDFNet_Res50.upsample_add", "HDFNet.HDFNet_Res50.upconv16", "HDFNet.HDFNet_Res50.upsample_add", "HDFNet.HDFNet_Res50.upconv8", "HDFNet.HDFNet_Res50.upsample_add", "HDFNet.HDFNet_Res50.upconv4", "HDFNet.HDFNet_Res50.upsample_add", "HDFNet.HDFNet_Res50.upconv2", "HDFNet.HDFNet_Res50.upconv1", "HDFNet.HDFNet_Res50.classifier", "HDFNet.HDFNet_Res50.sigmoid", "HDFNet.HDFNet_Res50.selfdc_32", "HDFNet.HDFNet_Res50.selfdc_16", "HDFNet.HDFNet_Res50.selfdc_8", "HDFNet.HDFNet_Res50.upsample"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.tensor_ops.upsample_add", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.tensor_ops.upsample_add", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.tensor_ops.upsample_add", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.tensor_ops.upsample_add"], ["", "def", "forward", "(", "self", ",", "in_data", ",", "in_depth", ")", ":", "\n", "        ", "in_data_2", "=", "self", ".", "encoder2", "(", "in_data", ")", "\n", "del", "in_data", "\n", "in_data_2_d", "=", "self", ".", "depth_encoder2", "(", "in_depth", ")", "\n", "del", "in_depth", "\n", "in_data_4", "=", "self", ".", "encoder4", "(", "in_data_2", ")", "\n", "in_data_4_d", "=", "self", ".", "depth_encoder4", "(", "in_data_2_d", ")", "\n", "del", "in_data_2_d", "\n", "in_data_8", "=", "self", ".", "encoder8", "(", "in_data_4", ")", "\n", "in_data_8_d", "=", "self", ".", "depth_encoder8", "(", "in_data_4_d", ")", "\n", "del", "in_data_4_d", "\n", "in_data_16", "=", "self", ".", "encoder16", "(", "in_data_8", ")", "\n", "in_data_16_d", "=", "self", ".", "depth_encoder16", "(", "in_data_8_d", ")", "\n", "in_data_32", "=", "self", ".", "encoder32", "(", "in_data_16", ")", "\n", "in_data_32_d", "=", "self", ".", "depth_encoder32", "(", "in_data_16_d", ")", "\n", "\n", "in_data_8_aux", "=", "self", ".", "depth_trans8", "(", "in_data_8", ",", "in_data_8_d", ")", "\n", "del", "in_data_8_d", "\n", "in_data_16_aux", "=", "self", ".", "depth_trans16", "(", "in_data_16", ",", "in_data_16_d", ")", "\n", "del", "in_data_16_d", "\n", "in_data_32_aux", "=", "self", ".", "depth_trans32", "(", "in_data_32", ",", "in_data_32_d", ")", "\n", "del", "in_data_32_d", "\n", "\n", "in_data_2", "=", "self", ".", "trans2", "(", "in_data_2", ")", "\n", "in_data_4", "=", "self", ".", "trans4", "(", "in_data_4", ")", "\n", "in_data_8", "=", "self", ".", "trans8", "(", "in_data_8", ")", "\n", "in_data_16", "=", "self", ".", "trans16", "(", "in_data_16", ")", "\n", "in_data_32", "=", "self", ".", "trans32", "(", "in_data_32", ")", "\n", "\n", "out_data_32", "=", "self", ".", "upconv32", "(", "in_data_32", ")", "# 1024", "\n", "del", "in_data_32", "\n", "out_data_16", "=", "self", ".", "upsample_add", "(", "self", ".", "selfdc_32", "(", "out_data_32", ",", "in_data_32_aux", ")", ",", "in_data_16", ")", "\n", "del", "out_data_32", ",", "in_data_32_aux", ",", "in_data_16", "\n", "out_data_16", "=", "self", ".", "upconv16", "(", "out_data_16", ")", "# 1024", "\n", "out_data_8", "=", "self", ".", "upsample_add", "(", "self", ".", "selfdc_16", "(", "out_data_16", ",", "in_data_16_aux", ")", ",", "in_data_8", ")", "\n", "del", "out_data_16", ",", "in_data_16_aux", ",", "in_data_8", "\n", "out_data_8", "=", "self", ".", "upconv8", "(", "out_data_8", ")", "# 512", "\n", "out_data_4", "=", "self", ".", "upsample_add", "(", "self", ".", "selfdc_8", "(", "out_data_8", ",", "in_data_8_aux", ")", ",", "in_data_4", ")", "\n", "del", "out_data_8", ",", "in_data_8_aux", ",", "in_data_4", "\n", "out_data_4", "=", "self", ".", "upconv4", "(", "out_data_4", ")", "# 256", "\n", "out_data_2", "=", "self", ".", "upsample_add", "(", "out_data_4", ",", "in_data_2", ")", "\n", "del", "out_data_4", ",", "in_data_2", "\n", "out_data_2", "=", "self", ".", "upconv2", "(", "out_data_2", ")", "# 64", "\n", "out_data_1", "=", "self", ".", "upconv1", "(", "self", ".", "upsample", "(", "out_data_2", ",", "scale_factor", "=", "2", ")", ")", "# 32", "\n", "del", "out_data_2", "\n", "out_data", "=", "self", ".", "classifier", "(", "out_data_1", ")", "\n", "del", "out_data_1", "\n", "return", "out_data", ".", "sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.BasicBlock.__init__": [[31, 40], ["torch.Module.__init__", "ResNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "ResNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.__init__", "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.conv3x3", "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.BasicBlock.forward": [[41, 58], ["ResNet.BasicBlock.conv1", "ResNet.BasicBlock.bn1", "ResNet.BasicBlock.relu", "ResNet.BasicBlock.conv2", "ResNet.BasicBlock.bn2", "ResNet.BasicBlock.relu", "ResNet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.Bottleneck.__init__": [[63, 74], ["torch.Module.__init__", "ResNet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "ResNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "ResNet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.__init__", "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.conv1x1", "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.conv3x3", "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.Bottleneck.forward": [[75, 96], ["ResNet.Bottleneck.conv1", "ResNet.Bottleneck.bn1", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.conv2", "ResNet.Bottleneck.bn2", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.conv3", "ResNet.Bottleneck.bn3", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.ResNet.__init__": [[99, 127], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "ResNet.ResNet.modules", "isinstance", "ResNet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.__init__", "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "zero_init_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "# 6", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "# 3", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.ResNet._make_layer": [[128, 142], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "ResNet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.ResNet.forward": [[143, 155], ["ResNet.ResNet.conv1", "ResNet.ResNet.bn1", "ResNet.ResNet.relu", "ResNet.ResNet.maxpool", "ResNet.ResNet.layer1", "ResNet.ResNet.layer2", "ResNet.ResNet.layer3", "ResNet.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.conv3x3": [[18, 21], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.conv1x1": [[23, 26], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.resnet18": [[157, 175], ["ResNet.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict", "model_zoo.load_url.items"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.update"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet18\"", "]", ")", "\n", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# 1. filter out unnecessary keys", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "# 2. overwrite entries in the existing state dict", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "# 3. load the new state dict", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.resnet34": [[177, 195], ["ResNet.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict", "model_zoo.load_url.items"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.update"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet34\"", "]", ")", "\n", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# 1. filter out unnecessary keys", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "# 2. overwrite entries in the existing state dict", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "# 3. load the new state dict", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.resnet50": [[197, 217], ["ResNet.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict", "model_zoo.load_url.items"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.update"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet50\"", "]", ")", "\n", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# 1. filter out unnecessary keys", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "# 2. overwrite entries in the existing state dict", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "# 3. load the new state dict", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.resnet101": [[219, 237], ["ResNet.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict", "model_zoo.load_url.items"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.update"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet101\"", "]", ")", "\n", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# 1. filter out unnecessary keys", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "# 2. overwrite entries in the existing state dict", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "# 3. load the new state dict", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.resnet152": [[239, 259], ["ResNet.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict", "model_zoo.load_url.items"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.update"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet152\"", "]", ")", "\n", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# 1. filter out unnecessary keys", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "# 2. overwrite entries in the existing state dict", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "# 3. load the new state dict", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.Backbone_ResNet50_in3": [[261, 272], ["ResNet.resnet50", "torch.Sequential", "torch.Sequential", "print", "list", "list", "resnet50.children", "resnet50.children"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.resnet50"], ["", "def", "Backbone_ResNet50_in3", "(", "pretrained", "=", "True", ")", ":", "\n", "    ", "if", "pretrained", ":", "\n", "        ", "print", "(", "\"The backbone model loads the pretrained parameters...\"", ")", "\n", "", "net", "=", "resnet50", "(", "pretrained", "=", "pretrained", ")", "\n", "div_2", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", ":", "3", "]", ")", "\n", "div_4", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "3", ":", "5", "]", ")", "\n", "div_8", "=", "net", ".", "layer2", "\n", "div_16", "=", "net", ".", "layer3", "\n", "div_32", "=", "net", ".", "layer4", "\n", "\n", "return", "div_2", ",", "div_4", ",", "div_8", ",", "div_16", ",", "div_32", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.Backbone_ResNet50_in1": [[274, 286], ["ResNet.resnet50", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "print", "list", "list", "resnet50.children", "resnet50.children"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.ResNet.resnet50"], ["", "def", "Backbone_ResNet50_in1", "(", "pretrained", "=", "True", ")", ":", "\n", "    ", "if", "pretrained", ":", "\n", "        ", "print", "(", "\"The backbone model loads the pretrained parameters...\"", ")", "\n", "", "net", "=", "resnet50", "(", "pretrained", "=", "pretrained", ")", "\n", "net", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "div_2", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", ":", "3", "]", ")", "\n", "div_4", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "3", ":", "5", "]", ")", "\n", "div_8", "=", "net", ".", "layer2", "\n", "div_16", "=", "net", ".", "layer3", "\n", "div_32", "=", "net", ".", "layer4", "\n", "\n", "return", "div_2", ",", "div_4", ",", "div_8", ",", "div_16", ",", "div_32", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.VGG.__init__": [[20, 26], ["torch.Module.__init__", "VGG.VGG._initialize_weights"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.__init__", "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.VGG._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "1000", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.VGG.forward": [[27, 30], ["VGG.VGG.features"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.VGG._initialize_weights": [[31, 43], ["VGG.VGG.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.make_layers": [[45, 59], ["torch.Sequential", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["", "", "", "", "def", "make_layers", "(", "cfg", ",", "batch_norm", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "\"M\"", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG._vgg": [[69, 83], ["VGG.VGG", "VGG.make_layers", "torchvision.models.utils.load_state_dict_from_url", "VGG.state_dict", "model.state_dict.update", "VGG.load_state_dict", "torchvision.models.utils.load_state_dict_from_url.items"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.make_layers", "home.repos.pwc.inspect_result.lartpang_HDFNet.utils.metric.CalTotalMetric.update"], ["def", "_vgg", "(", "arch", ",", "cfg", ",", "batch_norm", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "\"init_weights\"", "]", "=", "False", "\n", "", "model", "=", "VGG", "(", "make_layers", "(", "cfgs", "[", "cfg", "]", ",", "batch_norm", "=", "batch_norm", ")", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "progress", "=", "progress", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# 1. filter out unnecessary keys", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "# 2. overwrite entries in the existing state dict", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "# 3. load the new state dict", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.vgg16": [[85, 94], ["VGG._vgg"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG._vgg"], ["", "def", "vgg16", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 16-layer model (configuration \"D\")\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "\"vgg16\"", ",", "\"D\"", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.vgg16_bn": [[96, 105], ["VGG._vgg"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG._vgg"], ["", "def", "vgg16_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "\"vgg16_bn\"", ",", "\"D\"", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.vgg19": [[107, 116], ["VGG._vgg"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG._vgg"], ["", "def", "vgg19", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 19-layer model (configuration \"E\")\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "\"vgg19\"", ",", "\"E\"", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.vgg19_bn": [[118, 127], ["VGG._vgg"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG._vgg"], ["", "def", "vgg19_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "\"vgg19_bn\"", ",", "\"E\"", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.Backbone_VGG_in4": [[129, 137], ["VGG.vgg16_bn", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "list", "list", "list", "list", "list", "vgg16_bn.children", "vgg16_bn.children", "vgg16_bn.children", "vgg16_bn.children", "vgg16_bn.children"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.vgg16_bn"], ["", "def", "Backbone_VGG_in4", "(", ")", ":", "\n", "    ", "net", "=", "vgg16_bn", "(", "pretrained", "=", "True", ",", "progress", "=", "True", ")", "\n", "div_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "4", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "1", ":", "6", "]", ")", "\n", "div_2", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "6", ":", "13", "]", ")", "\n", "div_4", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "13", ":", "23", "]", ")", "\n", "div_8", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "23", ":", "33", "]", ")", "\n", "div_16", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "33", ":", "43", "]", ")", "\n", "return", "div_1", ",", "div_2", ",", "div_4", ",", "div_8", ",", "div_16", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.Backbone_VGG_in1": [[139, 149], ["VGG.vgg16_bn", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "print", "torch.Conv2d", "list", "list", "list", "list", "list", "vgg16_bn.children", "vgg16_bn.children", "vgg16_bn.children", "vgg16_bn.children", "vgg16_bn.children"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.vgg16_bn"], ["", "def", "Backbone_VGG_in1", "(", "pretrained", "=", "True", ")", ":", "\n", "    ", "if", "pretrained", ":", "\n", "        ", "print", "(", "\"The backbone model loads the pretrained parameters...\"", ")", "\n", "", "net", "=", "vgg16_bn", "(", "pretrained", "=", "pretrained", ",", "progress", "=", "True", ")", "\n", "div_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "1", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "1", ":", "6", "]", ")", "\n", "div_2", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "6", ":", "13", "]", ")", "\n", "div_4", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "13", ":", "23", "]", ")", "\n", "div_8", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "23", ":", "33", "]", ")", "\n", "div_16", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "33", ":", "43", "]", ")", "\n", "return", "div_1", ",", "div_2", ",", "div_4", ",", "div_8", ",", "div_16", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.Backbone_VGG_in3": [[151, 161], ["VGG.vgg16_bn", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "print", "list", "list", "list", "list", "list", "vgg16_bn.children", "vgg16_bn.children", "vgg16_bn.children", "vgg16_bn.children", "vgg16_bn.children"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.vgg16_bn"], ["", "def", "Backbone_VGG_in3", "(", "pretrained", "=", "True", ")", ":", "\n", "    ", "if", "pretrained", ":", "\n", "        ", "print", "(", "\"The backbone model loads the pretrained parameters...\"", ")", "\n", "", "net", "=", "vgg16_bn", "(", "pretrained", "=", "pretrained", ",", "progress", "=", "True", ")", "\n", "div_1", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "0", ":", "6", "]", ")", "\n", "div_2", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "6", ":", "13", "]", ")", "\n", "div_4", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "13", ":", "23", "]", ")", "\n", "div_8", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "23", ":", "33", "]", ")", "\n", "div_16", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "33", ":", "43", "]", ")", "\n", "return", "div_1", ",", "div_2", ",", "div_4", ",", "div_8", ",", "div_16", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.Backbone_VGG19_in1": [[163, 173], ["VGG.vgg19_bn", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "print", "torch.Conv2d", "list", "list", "list", "list", "list", "vgg19_bn.children", "vgg19_bn.children", "vgg19_bn.children", "vgg19_bn.children", "vgg19_bn.children"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.vgg19_bn"], ["", "def", "Backbone_VGG19_in1", "(", "pretrained", "=", "True", ")", ":", "\n", "    ", "if", "pretrained", ":", "\n", "        ", "print", "(", "\"The backbone model loads the pretrained parameters...\"", ")", "\n", "", "net", "=", "vgg19_bn", "(", "pretrained", "=", "pretrained", ",", "progress", "=", "True", ")", "\n", "div_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "1", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "1", ":", "6", "]", ")", "\n", "div_2", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "6", ":", "13", "]", ")", "\n", "div_4", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "13", ":", "26", "]", ")", "\n", "div_8", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "26", ":", "39", "]", ")", "\n", "div_16", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "39", ":", "52", "]", ")", "\n", "return", "div_1", ",", "div_2", ",", "div_4", ",", "div_8", ",", "div_16", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.Backbone_VGG19_in3": [[175, 185], ["VGG.vgg19_bn", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "print", "list", "list", "list", "list", "list", "vgg19_bn.children", "vgg19_bn.children", "vgg19_bn.children", "vgg19_bn.children", "vgg19_bn.children"], "function", ["home.repos.pwc.inspect_result.lartpang_HDFNet.backbone.VGG.vgg19_bn"], ["", "def", "Backbone_VGG19_in3", "(", "pretrained", "=", "True", ")", ":", "\n", "    ", "if", "pretrained", ":", "\n", "        ", "print", "(", "\"The backbone model loads the pretrained parameters...\"", ")", "\n", "", "net", "=", "vgg19_bn", "(", "pretrained", "=", "pretrained", ",", "progress", "=", "True", ")", "\n", "div_1", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "0", ":", "6", "]", ")", "\n", "div_2", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "6", ":", "13", "]", ")", "\n", "div_4", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "13", ":", "26", "]", ")", "\n", "div_8", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "26", ":", "39", "]", ")", "\n", "div_16", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "net", ".", "children", "(", ")", ")", "[", "0", "]", "[", "39", ":", "52", "]", ")", "\n", "return", "div_1", ",", "div_2", ",", "div_4", ",", "div_8", ",", "div_16", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.__init__": [[12, 16], ["torch.nn.Module.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "HEL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "\"You are using `HEL`!\"", ")", "\n", "self", ".", "eps", "=", "1e-6", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.edge_loss": [[17, 24], ["torch.avg_pool2d", "edge.sum"], "methods", ["None"], ["", "def", "edge_loss", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "edge", "=", "target", "-", "F", ".", "avg_pool2d", "(", "target", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "edge", "[", "edge", "!=", "0", "]", "=", "1", "\n", "# input, kernel_size, stride=None, padding=0", "\n", "numerator", "=", "(", "edge", "*", "(", "pred", "-", "target", ")", ".", "abs_", "(", ")", ")", ".", "sum", "(", "[", "2", ",", "3", "]", ")", "\n", "denominator", "=", "edge", ".", "sum", "(", "[", "2", ",", "3", "]", ")", "+", "self", ".", "eps", "\n", "return", "numerator", "/", "denominator", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.region_loss": [[25, 33], ["target.sum"], "methods", ["None"], ["", "def", "region_loss", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "# \u8be5\u90e8\u5206\u635f\u5931\u66f4\u5f3a\u8c03\u524d\u666f\u533a\u57df\u5185\u90e8\u6216\u8005\u80cc\u666f\u533a\u57df\u5185\u90e8\u7684\u9884\u6d4b\u4e00\u81f4\u6027", "\n", "        ", "numerator_fore", "=", "(", "target", "-", "target", "*", "pred", ")", ".", "sum", "(", "[", "2", ",", "3", "]", ")", "\n", "denominator_fore", "=", "target", ".", "sum", "(", "[", "2", ",", "3", "]", ")", "+", "self", ".", "eps", "\n", "\n", "numerator_back", "=", "(", "(", "1", "-", "target", ")", "*", "pred", ")", ".", "sum", "(", "[", "2", ",", "3", "]", ")", "\n", "denominator_back", "=", "(", "1", "-", "target", ")", ".", "sum", "(", "[", "2", ",", "3", "]", ")", "+", "self", ".", "eps", "\n", "return", "numerator_fore", "/", "denominator_fore", "+", "numerator_back", "/", "denominator_back", "\n", "\n"]], "home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.forward": [[34, 38], ["HEL.HEL.edge_loss", "HEL.HEL.region_loss"], "methods", ["home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.edge_loss", "home.repos.pwc.inspect_result.lartpang_HDFNet.loss.HEL.HEL.region_loss"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "edge_loss", "=", "self", ".", "edge_loss", "(", "pred", ",", "target", ")", "\n", "region_loss", "=", "self", ".", "region_loss", "(", "pred", ",", "target", ")", "\n", "return", "(", "edge_loss", "+", "region_loss", ")", ".", "mean", "(", ")", "\n", "", "", ""]]}