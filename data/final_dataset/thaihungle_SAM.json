{"home.repos.pwc.inspect_result.thaihungle_SAM.None.run_nar.compute": [[14, 26], ["torch.zeros", "torch.cuda.is_available", "model.emb", "model", "torch.reshape", "torch.reshape", "torch.reshape.size", "model.emb.cuda", "torch.reshape.cuda", "torch.reshape.cuda"], "function", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size"], ["def", "compute", "(", "data", ",", "model", ",", "bs", ")", ":", "\n", "    ", "input", ",", "target", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "out", "=", "torch", ".", "zeros", "(", "[", "1", ",", "target", ".", "size", "(", "0", ")", ",", "dataset", ".", "out_dim", "]", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "input", ",", "target", ",", "out", "=", "input", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", ",", "out", ".", "cuda", "(", ")", "\n", "\n", "", "input", "=", "model", ".", "emb", "(", "input", ")", "\n", "out", ",", "_", "=", "model", "(", "input", ")", "\n", "out", "=", "torch", ".", "reshape", "(", "out", ",", "[", "-", "1", ",", "out_dim", "]", ")", "\n", "target", "=", "torch", ".", "reshape", "(", "target", ",", "[", "-", "1", ",", "]", ")", "\n", "\n", "return", "out", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.None.run_all_babi.train": [[31, 235], ["pathlib.Path", "print", "tensorboardX.SummaryWriter", "print", "print", "print", "print", "len", "torch.device", "torch.device", "torch.device", "baselines.sam.qamodel.QAmodel().to", "print", "torch.Adam", "torch.CrossEntropyLoss", "optimizer_config.get", "baselines.sam.utils.WarmupScheduler", "range", "tensorboardX.SummaryWriter.close", "pathlib.Path.exists", "shutil.rmtree", "pathlib.Path.exists", "pathlib.Path.mkdir", "range", "babi.data_preprocess.preprocess.parse", "numpy.max", "max", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "len", "len", "qamodel.QAmodel().to.parameters", "config_path.open", "json.dump", "print", "qamodel.QAmodel().to.load_state_dict", "qamodel.QAmodel().to.eval", "print", "print", "logging.info", "baselines.sam.utils.WarmupScheduler.step", "qamodel.QAmodel().to.train", "tqdm.tqdm", "qamodel.QAmodel().to.eval", "tensorboardX.SummaryWriter.add_scalars", "tensorboardX.SummaryWriter.add_scalars", "logging.info", "str", "str", "iter", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "baselines.sam.qamodel.QAmodel", "torch.load", "torch.load", "torch.load", "torch.no_grad", "torch.no_grad", "torch.no_grad", "test_data_loaders.items", "range", "optim.Adam.zero_grad", "qamodel.QAmodel().to.", "answer.to.to", "correct_batch.item", "nn.CrossEntropyLoss.", "loss_fn.sum().item", "loss_fn.mean", "loss_fn.backward", "torch.utils.clip_grad_norm_", "optim.Adam.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "valid_data_loaders.items", "optimizer_config.get", "baselines.sam.utils.WarmupScheduler.decay_lr", "len", "model_path.absolute", "len", "tqdm.tqdm", "print", "random.randint", "next", "story.to", "query.to", "qamodel.QAmodel().to.parameters", "print", "print", "torch.save", "torch.save", "torch.save", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "model_path.absolute", "qamodel.QAmodel().to.", "answer.to.to", "correct_batch.item", "correct_batch.item", "nn.CrossEntropyLoss.", "loss_fn.sum().item", "numpy.mean", "iter", "next", "loss_fn.sum", "qamodel.QAmodel().to.", "answer.to.to", "correct_batch.item", "nn.CrossEntropyLoss.", "loss_fn.sum().item", "correct_batch.item", "qamodel.QAmodel().to.state_dict", "model_path.absolute", "story.to", "query.to", "len", "torch.argmax", "torch.argmax", "torch.argmax", "story.to", "query.to", "loss_fn.sum", "loss_fn.sum", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "function", ["home.repos.pwc.inspect_result.thaihungle_SAM.data_preprocess.preprocess.parse", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.step", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.train_sam.train", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.step", "home.repos.pwc.inspect_result.thaihungle_SAM.sam.utils.WarmupScheduler.decay_lr"], ["def", "train", "(", "config", ":", "Dict", "[", "str", ",", "Dict", "]", ",", "\n", "serialization_path", ":", "str", ",", "\n", "eval_test", ":", "bool", "=", "False", ",", "\n", "force", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "# Create serialization dir", "\n", "    ", "dir_path", "=", "Path", "(", "serialization_path", ")", "\n", "print", "(", "dir_path", ")", "\n", "if", "dir_path", ".", "exists", "(", ")", "and", "force", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "dir_path", ")", "\n", "", "if", "not", "dir_path", ".", "exists", "(", ")", ":", "\n", "        ", "dir_path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "False", ")", "\n", "", "model_path", "=", "dir_path", "/", "\"model.pt\"", "\n", "config_path", "=", "dir_path", "/", "\"config.json\"", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "str", "(", "dir_path", ")", ")", "\n", "\n", "# Read config", "\n", "data_config", "=", "config", "[", "\"data\"", "]", "\n", "trainer_config", "=", "config", "[", "\"trainer\"", "]", "\n", "model_config", "=", "config", "[", "\"model\"", "]", "\n", "optimizer_config", "=", "config", "[", "\"optimizer\"", "]", "\n", "# Load data", "\n", "if", "data_config", "[", "\"task-id\"", "]", "==", "\"all\"", ":", "\n", "        ", "task_ids", "=", "range", "(", "1", ",", "21", ")", "\n", "", "else", ":", "\n", "        ", "task_ids", "=", "[", "data_config", "[", "\"task-id\"", "]", "]", "\n", "# train_raw_data, valid_raw_data, test_raw_data, word2id = parse_all(data_config[\"data_path\"],list(range(1,21)))", "\n", "", "word2id", "=", "None", "\n", "train_data_loaders", "=", "{", "}", "\n", "valid_data_loaders", "=", "{", "}", "\n", "test_data_loaders", "=", "{", "}", "\n", "\n", "num_train_batches", "=", "num_valid_batches", "=", "num_test_batches", "=", "0", "\n", "max_seq", "=", "0", "\n", "for", "i", "in", "task_ids", ":", "\n", "        ", "train_raw_data", ",", "valid_raw_data", ",", "test_raw_data", ",", "word2id", "=", "parse", "(", "data_config", "[", "\"data_path\"", "]", ",", "\n", "str", "(", "i", ")", ",", "word2id", "=", "word2id", ",", "\n", "use_cache", "=", "True", ",", "cache_dir_ext", "=", "\"\"", ")", "\n", "train_epoch_size", "=", "train_raw_data", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "valid_epoch_size", "=", "valid_raw_data", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "test_epoch_size", "=", "test_raw_data", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "max_story_length", "=", "np", ".", "max", "(", "train_raw_data", "[", "1", "]", ")", "\n", "max_sentences", "=", "train_raw_data", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "max_seq", "=", "max", "(", "max_seq", ",", "train_raw_data", "[", "0", "]", ".", "shape", "[", "2", "]", ")", "\n", "max_q", "=", "train_raw_data", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "valid_batch_size", "=", "valid_epoch_size", "//", "73", "# like in the original implementation", "\n", "test_batch_size", "=", "test_epoch_size", "//", "73", "\n", "\n", "\n", "\n", "train_dataset", "=", "TensorDataset", "(", "*", "[", "torch", ".", "LongTensor", "(", "a", ")", "for", "a", "in", "train_raw_data", "[", ":", "-", "1", "]", "]", ")", "\n", "valid_dataset", "=", "TensorDataset", "(", "*", "[", "torch", ".", "LongTensor", "(", "a", ")", "for", "a", "in", "valid_raw_data", "[", ":", "-", "1", "]", "]", ")", "\n", "test_dataset", "=", "TensorDataset", "(", "*", "[", "torch", ".", "LongTensor", "(", "a", ")", "for", "a", "in", "test_raw_data", "[", ":", "-", "1", "]", "]", ")", "\n", "\n", "train_data_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "trainer_config", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "True", ")", "\n", "valid_data_loader", "=", "DataLoader", "(", "valid_dataset", ",", "batch_size", "=", "valid_batch_size", ")", "\n", "test_data_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "test_batch_size", ")", "\n", "\n", "train_data_loaders", "[", "i", "]", "=", "[", "iter", "(", "train_data_loader", ")", ",", "train_data_loader", "]", "\n", "valid_data_loaders", "[", "i", "]", "=", "valid_data_loader", "\n", "test_data_loaders", "[", "i", "]", "=", "test_data_loader", "\n", "\n", "num_train_batches", "+=", "len", "(", "train_data_loader", ")", "\n", "num_valid_batches", "+=", "len", "(", "valid_data_loader", ")", "\n", "num_test_batches", "+=", "len", "(", "test_data_loader", ")", "\n", "\n", "", "print", "(", "f\"total train data: {num_train_batches*trainer_config['batch_size']}\"", ")", "\n", "print", "(", "f\"total valid data: {num_valid_batches*valid_batch_size}\"", ")", "\n", "print", "(", "f\"total test data: {num_test_batches*test_batch_size}\"", ")", "\n", "print", "(", "f\"voca size {len(word2id)}\"", ")", "\n", "\n", "model_config", "[", "\"vocab_size\"", "]", "=", "len", "(", "word2id", ")", "\n", "model_config", "[", "\"max_seq\"", "]", "=", "max_seq", "\n", "model_config", "[", "\"symbol_size\"", "]", "=", "64", "\n", "# Create model", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "model", "=", "qamodel", ".", "QAmodel", "(", "model_config", ")", ".", "to", "(", "device", ")", "\n", "print", "(", "model", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "optimizer_config", "[", "\"lr\"", "]", ",", "betas", "=", "(", "optimizer_config", "[", "\"beta1\"", "]", ",", "optimizer_config", "[", "\"beta2\"", "]", ")", ")", "\n", "# optimizer = Nadam(model.parameters(),", "\n", "#                        lr=optimizer_config[\"lr\"], betas=(optimizer_config[\"beta1\"], optimizer_config[\"beta2\"]))", "\n", "\n", "# optimizer = optim.RMSprop(model.parameters(), lr=1e-4, momentum=0.9)", "\n", "\n", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "warm_up", "=", "optimizer_config", ".", "get", "(", "\"warm_up\"", ",", "False", ")", "\n", "\n", "scheduler", "=", "WarmupScheduler", "(", "optimizer", "=", "optimizer", ",", "\n", "steps", "=", "optimizer_config", "[", "\"warm_up_steps\"", "]", "if", "warm_up", "else", "0", ",", "\n", "multiplier", "=", "optimizer_config", "[", "\"warm_up_factor\"", "]", "if", "warm_up", "else", "1", ")", "\n", "\n", "decay_done", "=", "False", "\n", "max_acc", "=", "0", "\n", "\n", "with", "config_path", ".", "open", "(", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "config", ",", "fp", ",", "indent", "=", "4", ")", "\n", "", "if", "eval_test", ":", "\n", "        ", "print", "(", "f\"testing ... load {model_path.absolute()}\"", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ".", "absolute", "(", ")", ")", ")", "\n", "# Evaluation on test data", "\n", "model", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "test_loss", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "total_test_samples", "=", "0", "\n", "single_task_acc", "=", "[", "0", "]", "*", "len", "(", "test_data_loaders", ")", "\n", "for", "k", ",", "te", "in", "test_data_loaders", ".", "items", "(", ")", ":", "\n", "                ", "test_data_loader", "=", "te", "\n", "task_acc", "=", "0", "\n", "single_task_samples", "=", "0", "\n", "for", "story", ",", "story_length", ",", "query", ",", "answer", "in", "tqdm", "(", "test_data_loader", ")", ":", "\n", "                    ", "logits", "=", "model", "(", "story", ".", "to", "(", "device", ")", ",", "query", ".", "to", "(", "device", ")", ")", "\n", "answer", "=", "answer", ".", "to", "(", "device", ")", "\n", "correct_batch", "=", "(", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "==", "answer", ")", ".", "sum", "(", ")", "\n", "correct", "+=", "correct_batch", ".", "item", "(", ")", "\n", "task_acc", "+=", "correct_batch", ".", "item", "(", ")", "\n", "loss", "=", "loss_fn", "(", "logits", ",", "answer", ")", "\n", "test_loss", "+=", "loss", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total_test_samples", "+=", "story", ".", "shape", "[", "0", "]", "\n", "single_task_samples", "+=", "story", ".", "shape", "[", "0", "]", "\n", "", "print", "(", "f\"validate acc task {k}: {task_acc/single_task_samples}\"", ")", "\n", "single_task_acc", "[", "k", "-", "1", "]", "=", "task_acc", "/", "single_task_samples", "\n", "", "test_acc", "=", "correct", "/", "total_test_samples", "\n", "test_loss", "=", "test_loss", "/", "total_test_samples", "\n", "", "print", "(", "f\"Test accuracy: {test_acc:.3f}, loss: {test_loss:.3f}\"", ")", "\n", "print", "(", "f\"test avg: {np.mean(single_task_acc)}\"", ")", "\n", "raise", "True", "\n", "\n", "", "for", "i", "in", "range", "(", "trainer_config", "[", "\"epochs\"", "]", ")", ":", "\n", "        ", "logging", ".", "info", "(", "f\"##### EPOCH: {i} #####\"", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "# Train", "\n", "model", ".", "train", "(", ")", "\n", "correct", "=", "0", "\n", "train_loss", "=", "0", "\n", "for", "_", "in", "tqdm", "(", "range", "(", "num_train_batches", ")", ")", ":", "\n", "            ", "loader_i", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "train_data_loaders", ")", "-", "1", ")", "+", "1", "\n", "try", ":", "\n", "                ", "story", ",", "story_length", ",", "query", ",", "answer", "=", "next", "(", "train_data_loaders", "[", "loader_i", "]", "[", "0", "]", ")", "\n", "", "except", "StopIteration", ":", "\n", "                ", "train_data_loaders", "[", "loader_i", "]", "[", "0", "]", "=", "iter", "(", "train_data_loaders", "[", "loader_i", "]", "[", "1", "]", ")", "\n", "story", ",", "story_length", ",", "query", ",", "answer", "=", "next", "(", "train_data_loaders", "[", "loader_i", "]", "[", "0", "]", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "logits", "=", "model", "(", "story", ".", "to", "(", "device", ")", ",", "query", ".", "to", "(", "device", ")", ")", "\n", "answer", "=", "answer", ".", "to", "(", "device", ")", "\n", "correct_batch", "=", "(", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "==", "answer", ")", ".", "sum", "(", ")", "\n", "correct", "+=", "correct_batch", ".", "item", "(", ")", "\n", "\n", "loss", "=", "loss_fn", "(", "logits", ",", "answer", ")", "\n", "train_loss", "+=", "loss", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "optimizer_config", "[", "\"max_gradient_norm\"", "]", ")", "\n", "# nn.utils.clip_grad_value_(model.parameters(), 10)", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "train_acc", "=", "correct", "/", "(", "num_train_batches", "*", "trainer_config", "[", "\"batch_size\"", "]", ")", "\n", "train_loss", "=", "train_loss", "/", "(", "num_train_batches", "*", "trainer_config", "[", "\"batch_size\"", "]", ")", "\n", "\n", "# Validation", "\n", "model", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "valid_loss", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "total_valid_samples", "=", "0", "\n", "for", "k", ",", "va", "in", "valid_data_loaders", ".", "items", "(", ")", ":", "\n", "                ", "valid_data_loader", "=", "va", "\n", "task_acc", "=", "0", "\n", "single_valid_samples", "=", "0", "\n", "for", "story", ",", "story_length", ",", "query", ",", "answer", "in", "valid_data_loader", ":", "\n", "                    ", "logits", "=", "model", "(", "story", ".", "to", "(", "device", ")", ",", "query", ".", "to", "(", "device", ")", ")", "\n", "answer", "=", "answer", ".", "to", "(", "device", ")", "\n", "correct_batch", "=", "(", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "==", "answer", ")", ".", "sum", "(", ")", "\n", "correct", "+=", "correct_batch", ".", "item", "(", ")", "\n", "loss", "=", "loss_fn", "(", "logits", ",", "answer", ")", "\n", "valid_loss", "+=", "loss", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "task_acc", "+=", "correct_batch", ".", "item", "(", ")", "\n", "total_valid_samples", "+=", "story", ".", "shape", "[", "0", "]", "\n", "single_valid_samples", "+=", "story", ".", "shape", "[", "0", "]", "\n", "", "print", "(", "f\"validate acc task {k}: {task_acc/single_valid_samples}\"", ")", "\n", "", "valid_acc", "=", "correct", "/", "total_valid_samples", "\n", "valid_loss", "=", "valid_loss", "/", "total_valid_samples", "\n", "if", "valid_acc", ">", "max_acc", ":", "\n", "                ", "print", "(", "f\"saved model...{model_path}\"", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_path", ".", "absolute", "(", ")", ")", "\n", "max_acc", "=", "valid_acc", "\n", "\n", "", "", "writer", ".", "add_scalars", "(", "\"accuracy\"", ",", "{", "\"train\"", ":", "train_acc", ",", "\n", "\"validation\"", ":", "valid_acc", "}", ",", "i", ")", "\n", "writer", ".", "add_scalars", "(", "\"loss\"", ",", "{", "\"train\"", ":", "train_loss", ",", "\n", "\"validation\"", ":", "valid_loss", "}", ",", "i", ")", "\n", "\n", "logging", ".", "info", "(", "f\"\\nTrain accuracy: {train_acc:.3f}, loss: {train_loss:.3f}\"", "\n", "f\"\\nValid accuracy: {valid_acc:.3f}, loss: {valid_loss:.3f}\"", ")", "\n", "if", "optimizer_config", ".", "get", "(", "\"decay\"", ",", "False", ")", "and", "valid_loss", "<", "optimizer_config", "[", "\"decay_thr\"", "]", "and", "not", "decay_done", ":", "\n", "            ", "scheduler", ".", "decay_lr", "(", "optimizer_config", "[", "\"decay_factor\"", "]", ")", "\n", "decay_done", "=", "True", "\n", "\n", "\n", "\n", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.None.args.get_parser": [[4, 42], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-model_name'", ",", "default", "=", "'sam'", ",", "\n", "help", "=", "'the name of the model'", ")", "\n", "parser", ".", "add_argument", "(", "'-task_json'", ",", "type", "=", "str", ",", "default", "=", "'tasks/nar.json'", ",", "\n", "help", "=", "'path to json file with task specific parameters'", ")", "\n", "parser", ".", "add_argument", "(", "'-log_dir'", ",", "default", "=", "'logs/'", ",", "\n", "help", "=", "'path to log metrics'", ")", "\n", "parser", ".", "add_argument", "(", "'-save_dir'", ",", "default", "=", "'saved_models/'", ",", "\n", "help", "=", "'path to file with final model parameters'", ")", "\n", "parser", ".", "add_argument", "(", "'-batch_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'batch size of input sequence during training'", ")", "\n", "parser", ".", "add_argument", "(", "'-clip_grad'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'clip gradient'", ")", "\n", "parser", ".", "add_argument", "(", "'-num_iters'", ",", "type", "=", "int", ",", "default", "=", "50000", ",", "\n", "help", "=", "'number of iterations for training'", ")", "\n", "parser", ".", "add_argument", "(", "'-freq_val'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "\n", "help", "=", "'validation frequence'", ")", "\n", "parser", ".", "add_argument", "(", "'-num_eval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'number of evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "'-mode'", ",", "type", "=", "str", ",", "default", "=", "\"train\"", ",", "\n", "help", "=", "'train or test'", ")", "\n", "parser", ".", "add_argument", "(", "'-resume'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'resume path'", ")", "\n", "\n", "# todo: only rmsprop optimizer supported yet, support adam too", "\n", "parser", ".", "add_argument", "(", "'-lr'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "\n", "help", "=", "'learning rate for rmsprop optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'-momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "'momentum for rmsprop optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'-alpha'", ",", "type", "=", "float", ",", "default", "=", "0.95", ",", "\n", "help", "=", "'alpha for rmsprop optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'-beta1'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "'beta1 constant for adam optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'-beta2'", ",", "type", "=", "float", ",", "default", "=", "0.999", ",", "\n", "help", "=", "'beta2 constant for adam optimizer'", ")", "\n", "return", "parser", "\n", "", ""]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.convexhull.ConvexHullDataset.__init__": [[79, 103], ["convexhull.ConvexHullDataset.read_file", "convexhull.ConvexHullDataset.train_samples.items", "convexhull.ConvexHullDataset.read_file", "print", "print", "convexhull.ConvexHullDataset.train_samples.sort", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.datasets.tsp.TSPDataset.read_file", "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.tsp.TSPDataset.read_file"], ["    ", "def", "__init__", "(", "self", ",", "task_params", ",", "curriculum", "=", "False", ",", "mode", "=", "\"train\"", ")", ":", "\n", "        ", "\"\"\"Initialize a dataset instance for copy task.\n\n        Arguments\n        ---------\n        task_params : dict\n            A dict containing parameters relevant to copy task.\n        \"\"\"", "\n", "self", ".", "task_params", "=", "task_params", "\n", "self", ".", "cur_index", "=", "-", "1", "\n", "\n", "if", "mode", "==", "\"train\"", ":", "\n", "            ", "self", ".", "train_samples", "=", "self", ".", "read_file", "(", "task_params", "[", "'data_dir_train'", "]", ",", "same_len", "=", "True", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "train_samples", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "f\"num train of len {k} {len(v)}\"", ")", "\n", "", "if", "curriculum", ":", "\n", "                ", "self", ".", "cur_index", "=", "0", "\n", "self", ".", "train_samples", ".", "sort", "(", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "\"inputs\"", "]", ")", ")", "\n", "", "", "if", "mode", "==", "\"test\"", ":", "\n", "            ", "self", ".", "test_samples", "=", "self", ".", "read_file", "(", "task_params", "[", "'data_dir_test'", "]", ")", "\n", "# for k,v in self.test_samples.items():", "\n", "print", "(", "f\"num test of len {len(self.test_samples)}\"", ")", "\n", "", "self", ".", "out_dim", "=", "task_params", "[", "\"N_max\"", "]", "+", "2", "\n", "self", ".", "in_dim", "=", "2", "+", "self", ".", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.convexhull.ConvexHullDataset.read_file": [[105, 137], ["open", "tqdm.tqdm.tqdm", "line.strip().split", "len", "len", "line.strip", "ys.append", "all_data_blen[].append", "all_data_blen.append", "xs.append", "len", "len", "len"], "methods", ["None"], ["", "def", "read_file", "(", "self", ",", "filepath", ",", "same_len", "=", "False", ")", ":", "\n", "        ", "all_data_blen", "=", "[", "]", "\n", "if", "same_len", ":", "\n", "            ", "all_data_blen", "=", "{", "}", "\n", "", "with", "open", "(", "filepath", ")", "as", "fp", ":", "\n", "            ", "for", "line", "in", "tqdm", "(", "fp", ")", ":", "\n", "                ", "xs", "=", "[", "]", "\n", "ys", "=", "[", "]", "\n", "all_items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "after_output", "=", "False", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "all_items", ")", ":", "\n", "                    ", "if", "not", "after_output", ":", "\n", "                        ", "if", "all_items", "[", "i", "]", "==", "\"output\"", ":", "\n", "                            ", "after_output", "=", "True", "\n", "", "else", ":", "\n", "                            ", "xs", ".", "append", "(", "[", "all_items", "[", "i", "]", ",", "all_items", "[", "i", "+", "1", "]", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "else", ":", "\n", "                        ", "ys", ".", "append", "(", "all_items", "[", "i", "]", ")", "\n", "", "i", "+=", "1", "\n", "# if len(xs)==20:", "\n", "#     plot_geo.plot_points(xs, ys)", "\n", "", "if", "len", "(", "xs", ")", "<=", "self", ".", "task_params", "[", "\"N_max\"", "]", ":", "\n", "                    ", "if", "same_len", ":", "\n", "                        ", "if", "len", "(", "xs", ")", "not", "in", "all_data_blen", ":", "\n", "                            ", "all_data_blen", "[", "len", "(", "xs", ")", "]", "=", "[", "]", "\n", "", "all_data_blen", "[", "len", "(", "xs", ")", "]", ".", "append", "(", "{", "\"inputs\"", ":", "xs", ",", "\"outputs\"", ":", "ys", "}", ")", "\n", "", "else", ":", "\n", "                        ", "all_data_blen", ".", "append", "(", "{", "\"inputs\"", ":", "xs", ",", "\"outputs\"", ":", "ys", "}", ")", "\n", "\n", "", "", "", "return", "all_data_blen", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.convexhull.ConvexHullDataset.get_train_sample_wlen": [[151, 170], ["random.choice", "numpy.random.choice", "convexhull.prepare_sample_batch", "convexhull.prepare_sample_batch", "list", "len", "len", "convexhull.ConvexHullDataset.train_samples.keys"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.datasets.tsp.prepare_sample_batch", "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.tsp.prepare_sample_batch"], ["", "", "def", "get_train_sample_wlen", "(", "self", ",", "bs", "=", "1", ")", ":", "\n", "\n", "        ", "if", "self", ".", "cur_index", "<", "0", ":", "\n", "            ", "chosen_key", "=", "random", ".", "choice", "(", "list", "(", "self", ".", "train_samples", ".", "keys", "(", ")", ")", ")", "\n", "samples", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "train_samples", "[", "chosen_key", "]", ",", "bs", ")", "\n", "data", "=", "prepare_sample_batch", "(", "samples", ",", "end_token", "=", "self", ".", "out_dim", "-", "1", ",", "out_dim", "=", "self", ".", "out_dim", ")", "\n", "return", "data", "\n", "", "else", ":", "\n", "            ", "find", "=", "self", ".", "cur_index", "\n", "tind", "=", "self", ".", "cur_index", "+", "bs", "\n", "if", "tind", ">", "len", "(", "self", ".", "train_samples", ")", ":", "\n", "                ", "tind", "=", "len", "(", "self", ".", "train_samples", ")", "\n", "find", "=", "tind", "-", "bs", "\n", "self", ".", "cur_index", "=", "0", "\n", "", "else", ":", "\n", "                ", "self", ".", "cur_index", "+=", "bs", "\n", "", "samples", "=", "self", ".", "train_samples", "[", "find", ":", "tind", "]", "\n", "data", "=", "prepare_sample_batch", "(", "samples", ",", "end_token", "=", "self", ".", "out_dim", "-", "1", ",", "out_dim", "=", "self", ".", "out_dim", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.convexhull.ConvexHullDataset.get_test_sample_wlen": [[171, 185], ["convexhull.prepare_sample_batch", "len", "len"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.datasets.tsp.prepare_sample_batch"], ["", "", "def", "get_test_sample_wlen", "(", "self", ",", "bs", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "cur_index", "<", "0", ":", "\n", "            ", "self", ".", "cur_index", "=", "0", "\n", "", "find", "=", "self", ".", "cur_index", "\n", "tind", "=", "self", ".", "cur_index", "+", "bs", "\n", "if", "tind", ">", "len", "(", "self", ".", "test_samples", ")", ":", "\n", "            ", "tind", "=", "len", "(", "self", ".", "test_samples", ")", "\n", "find", "=", "tind", "-", "bs", "\n", "self", ".", "cur_index", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "cur_index", "+=", "bs", "\n", "", "samples", "=", "self", ".", "test_samples", "[", "find", ":", "tind", "]", "\n", "data", "=", "prepare_sample_batch", "(", "samples", ",", "end_token", "=", "self", ".", "out_dim", "-", "1", ",", "out_dim", "=", "self", ".", "out_dim", ",", "random_mode", "=", "False", ")", "\n", "return", "data", "", "", "", ""]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.convexhull.prepare_sample_batch": [[7, 75], ["range", "min", "range", "numpy.transpose", "numpy.transpose", "len", "max", "max", "min", "len", "numpy.zeros", "numpy.zeros", "enumerate", "enumerate", "np.transpose.append", "np.transpose.append", "numpy.asarray", "numpy.asarray", "torch.tensor", "torch.tensor", "len", "len", "min", "numpy.random.choice", "float", "float", "len", "int", "int"], "function", ["None"], ["def", "prepare_sample_batch", "(", "samples", ",", "end_token", ",", "out_dim", ",", "max_len", "=", "500", ",", "random_mode", "=", "True", ")", ":", "\n", "    ", "max_seq_len", "=", "0", "\n", "max_out_len", "=", "0", "\n", "for", "index", "in", "range", "(", "len", "(", "samples", ")", ")", ":", "\n", "# print(sample[index]['inputs'])", "\n", "# print(sample[index]['outputs'])", "\n", "        ", "max_seq_len", "=", "max", "(", "len", "(", "samples", "[", "index", "]", "[", "'inputs'", "]", ")", ",", "max_seq_len", ")", "\n", "max_out_len", "=", "max", "(", "len", "(", "samples", "[", "index", "]", "[", "'outputs'", "]", ")", ",", "max_out_len", ")", "\n", "\n", "", "max_seq_len", "=", "min", "(", "max_seq_len", ",", "max_len", ")", "\n", "max_out_len", "=", "min", "(", "max_out_len", ",", "max_len", ")", "+", "1", "\n", "total_seq_len", "=", "max_seq_len", "+", "1", "\n", "\n", "input_vecs", "=", "[", "]", "\n", "output_vecs", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "samples", ")", ")", ":", "\n", "# print('\\n{}'.format(index))", "\n", "        ", "ins", "=", "samples", "[", "index", "]", "[", "'inputs'", "]", "\n", "outs", "=", "samples", "[", "index", "]", "[", "'outputs'", "]", "\n", "input_vec", "=", "np", ".", "zeros", "(", "[", "total_seq_len", ",", "2", "+", "out_dim", "]", ")", "\n", "output_vec", "=", "np", ".", "zeros", "(", "max_out_len", ",", "dtype", "=", "np", ".", "long", ")", "\n", "# print(samples[index]['inputs'])", "\n", "# print(target_code)", "\n", "# print(samples[index]['outputs'])", "\n", "offset", "=", "max_seq_len", "-", "min", "(", "len", "(", "ins", ")", ",", "max_seq_len", ")", "\n", "if", "random_mode", ":", "\n", "            ", "labels", "=", "np", ".", "random", ".", "choice", "(", "max_seq_len", ",", "max_seq_len", ",", "replace", "=", "False", ")", "\n", "", "for", "iii", ",", "token", "in", "enumerate", "(", "ins", ")", ":", "\n", "            ", "if", "iii", "==", "max_seq_len", ":", "\n", "                ", "break", "\n", "", "input_vec", "[", "iii", "+", "offset", "]", "[", "0", "]", "=", "float", "(", "token", "[", "0", "]", ")", "\n", "input_vec", "[", "iii", "+", "offset", "]", "[", "1", "]", "=", "float", "(", "token", "[", "1", "]", ")", "\n", "\n", "if", "random_mode", ":", "\n", "                ", "pos", "=", "labels", "[", "iii", "]", "+", "1", "\n", "", "else", ":", "\n", "                ", "pos", "=", "iii", "+", "1", "\n", "", "input_vec", "[", "iii", "+", "offset", "]", "[", "2", "+", "pos", "]", "=", "1.0", "\n", "", "input_vec", "[", "iii", "+", "offset", "]", "[", "2", "]", "=", "1.0", "\n", "# for i in range(offset):", "\n", "#     input_vec[i][2] = 1", "\n", "# print(outs)", "\n", "for", "iii", ",", "token", "in", "enumerate", "(", "outs", ")", ":", "\n", "            ", "if", "iii", "==", "max_out_len", ":", "\n", "                ", "break", "\n", "", "if", "random_mode", ":", "\n", "                ", "out_value", "=", "labels", "[", "int", "(", "token", ")", "-", "1", "]", "+", "1", "\n", "", "else", ":", "\n", "                ", "out_value", "=", "int", "(", "token", ")", "\n", "", "output_vec", "[", "iii", "]", "=", "out_value", "\n", "\n", "", "output_vec", "[", "iii", "]", "=", "end_token", "\n", "# print(input_vec)", "\n", "# print(output_vec)", "\n", "# print(mask)", "\n", "# print('====')", "\n", "# input_vec = [onehot(code, word_space_size) for code in input_vec]", "\n", "# output_vec = [onehot(code, word_space_size) for code in output_vec]", "\n", "input_vecs", ".", "append", "(", "input_vec", ")", "\n", "output_vecs", ".", "append", "(", "output_vec", ")", "\n", "\n", "\n", "", "input_vecs", "=", "np", ".", "transpose", "(", "np", ".", "asarray", "(", "input_vecs", ")", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "output_vecs", "=", "np", ".", "transpose", "(", "np", ".", "asarray", "(", "output_vecs", ")", ",", "[", "1", ",", "0", "]", ")", "\n", "# raise False", "\n", "return", "torch", ".", "tensor", "(", "input_vecs", ",", "dtype", "=", "torch", ".", "float", ")", ",", "torch", ".", "tensor", "(", "output_vecs", ",", "dtype", "=", "torch", ".", "long", ")", ",", "total_seq_len", ",", "max_out_len", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.tsp.TSPDataset.__init__": [[78, 102], ["tsp.TSPDataset.read_file", "tsp.TSPDataset.train_samples.items", "tsp.TSPDataset.read_file", "print", "print", "tsp.TSPDataset.train_samples.sort", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.datasets.tsp.TSPDataset.read_file", "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.tsp.TSPDataset.read_file"], ["    ", "def", "__init__", "(", "self", ",", "task_params", ",", "curriculum", "=", "False", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "\"\"\"Initialize a dataset instance for copy task.\n\n        Arguments\n        ---------\n        task_params : dict\n            A dict containing parameters relevant to copy task.\n        \"\"\"", "\n", "self", ".", "task_params", "=", "task_params", "\n", "self", ".", "cur_index", "=", "0", "\n", "\n", "if", "mode", "==", "\"train\"", ":", "\n", "            ", "self", ".", "train_samples", "=", "self", ".", "read_file", "(", "task_params", "[", "'data_dir_train'", "]", ",", "same_len", "=", "True", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "train_samples", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "f\"num train of len {k} {len(v)}\"", ")", "\n", "", "if", "curriculum", ":", "\n", "                ", "self", ".", "train_samples", ".", "sort", "(", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "\"inputs\"", "]", ")", ")", "\n", "", "", "if", "mode", "==", "\"test\"", ":", "\n", "            ", "self", ".", "test_samples", "=", "self", ".", "read_file", "(", "task_params", "[", "'data_dir_test'", "]", ")", "\n", "# for k,v in self.test_samples.items():", "\n", "print", "(", "f\"num test of len {len(self.test_samples)}\"", ")", "\n", "", "self", ".", "out_dim", "=", "task_params", "[", "\"N_max\"", "]", "+", "2", "\n", "self", ".", "in_dim", "=", "2", "+", "self", ".", "out_dim", "\n", "self", ".", "cur_index", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.tsp.TSPDataset.get_path_len_naive": [[106, 128], ["enumerate", "len", "torch.norm", "torch.norm"], "methods", ["None"], ["def", "get_path_len_naive", "(", "self", ",", "inputs", ",", "pred", ")", ":", "\n", "        ", "total_dis", "=", "0", "\n", "num_p", "=", "len", "(", "inputs", ")", "-", "1", "\n", "for", "pi", ",", "pv", "in", "enumerate", "(", "pred", ")", ":", "\n", "            ", "if", "pi", "+", "1", "<=", "num_p", ":", "\n", "                ", "if", "pred", "[", "pi", "+", "1", "]", "==", "self", ".", "out_dim", "-", "1", ":", "\n", "                    ", "nexp", "=", "inputs", "[", "0", "]", "[", ":", "2", "]", "\n", "curp", "=", "inputs", "[", "pv", "-", "1", "]", "[", ":", "2", "]", "\n", "dis", "=", "torch", ".", "norm", "(", "curp", "-", "nexp", ",", "2", ")", "\n", "total_dis", "+=", "dis", "\n", "", "elif", "pred", "[", "pi", "+", "1", "]", "!=", "self", ".", "out_dim", "-", "1", ":", "\n", "                    ", "ni", "=", "pred", "[", "pi", "+", "1", "]", "-", "1", "\n", "if", "ni", "<", "0", "or", "ni", ">=", "num_p", ":", "\n", "                        ", "ni", "=", "0", "\n", "", "ci", "=", "pv", "-", "1", "\n", "if", "ci", "<", "0", "or", "ci", ">=", "num_p", ":", "\n", "                        ", "ci", "=", "num_p", "-", "1", "\n", "", "nexp", "=", "inputs", "[", "ni", "]", "[", ":", "2", "]", "\n", "curp", "=", "inputs", "[", "ci", "]", "[", ":", "2", "]", "\n", "dis", "=", "torch", ".", "norm", "(", "curp", "-", "nexp", ",", "2", ")", "\n", "total_dis", "+=", "dis", "\n", "", "", "", "return", "total_dis", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.tsp.TSPDataset.read_file": [[133, 166], ["print", "open", "tqdm.tqdm.tqdm", "line.strip().split", "len", "len", "line.strip", "ys.append", "all_data_blen[].append", "all_data_blen.append", "xs.append", "len", "len", "len"], "methods", ["None"], ["", "def", "read_file", "(", "self", ",", "filepaths", ",", "same_len", "=", "False", ")", ":", "\n", "        ", "all_data_blen", "=", "[", "]", "\n", "if", "same_len", ":", "\n", "            ", "all_data_blen", "=", "{", "}", "\n", "", "for", "filepath", "in", "filepaths", ":", "\n", "            ", "print", "(", "filepath", ")", "\n", "with", "open", "(", "filepath", ")", "as", "fp", ":", "\n", "                ", "for", "line", "in", "tqdm", "(", "fp", ")", ":", "\n", "                    ", "xs", "=", "[", "]", "\n", "ys", "=", "[", "]", "\n", "all_items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "after_output", "=", "False", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "all_items", ")", ":", "\n", "                        ", "if", "not", "after_output", ":", "\n", "                            ", "if", "all_items", "[", "i", "]", "==", "\"output\"", ":", "\n", "                                ", "after_output", "=", "True", "\n", "", "else", ":", "\n", "                                ", "xs", ".", "append", "(", "[", "all_items", "[", "i", "]", ",", "all_items", "[", "i", "+", "1", "]", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "else", ":", "\n", "                            ", "ys", ".", "append", "(", "all_items", "[", "i", "]", ")", "\n", "", "i", "+=", "1", "\n", "# if len(xs)==10:", "\n", "#     plot_geo.plot_points(xs, ys)", "\n", "", "if", "len", "(", "xs", ")", "<=", "self", ".", "task_params", "[", "\"N_max\"", "]", ":", "\n", "                        ", "if", "same_len", ":", "\n", "                            ", "if", "len", "(", "xs", ")", "not", "in", "all_data_blen", ":", "\n", "                                ", "all_data_blen", "[", "len", "(", "xs", ")", "]", "=", "[", "]", "\n", "", "all_data_blen", "[", "len", "(", "xs", ")", "]", ".", "append", "(", "{", "\"inputs\"", ":", "xs", ",", "\"outputs\"", ":", "ys", "}", ")", "\n", "", "else", ":", "\n", "                            ", "all_data_blen", ".", "append", "(", "{", "\"inputs\"", ":", "xs", ",", "\"outputs\"", ":", "ys", "}", ")", "\n", "", "", "", "", "", "return", "all_data_blen", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.tsp.TSPDataset.get_train_sample_wlen": [[180, 199], ["random.choice", "numpy.random.choice", "tsp.prepare_sample_batch", "tsp.prepare_sample_batch", "list", "len", "len", "tsp.TSPDataset.train_samples.keys"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.datasets.tsp.prepare_sample_batch", "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.tsp.prepare_sample_batch"], ["", "def", "get_train_sample_wlen", "(", "self", ",", "bs", "=", "1", ")", ":", "\n", "\n", "        ", "if", "self", ".", "cur_index", "<", "0", ":", "\n", "            ", "chosen_key", "=", "random", ".", "choice", "(", "list", "(", "self", ".", "train_samples", ".", "keys", "(", ")", ")", ")", "\n", "samples", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "train_samples", "[", "chosen_key", "]", ",", "bs", ")", "\n", "data", "=", "prepare_sample_batch", "(", "samples", ",", "end_token", "=", "self", ".", "out_dim", "-", "1", ",", "out_dim", "=", "self", ".", "out_dim", ")", "\n", "return", "data", "\n", "", "else", ":", "\n", "            ", "find", "=", "self", ".", "cur_index", "\n", "tind", "=", "self", ".", "cur_index", "+", "bs", "\n", "if", "tind", ">", "len", "(", "self", ".", "train_samples", ")", ":", "\n", "                ", "tind", "=", "len", "(", "self", ".", "train_samples", ")", "\n", "find", "=", "tind", "-", "bs", "\n", "self", ".", "cur_index", "=", "0", "\n", "", "else", ":", "\n", "                ", "self", ".", "cur_index", "+=", "bs", "\n", "", "samples", "=", "self", ".", "train_samples", "[", "find", ":", "tind", "]", "\n", "data", "=", "prepare_sample_batch", "(", "samples", ",", "end_token", "=", "self", ".", "out_dim", "-", "1", ",", "out_dim", "=", "self", ".", "out_dim", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.tsp.TSPDataset.get_test_sample_wlen": [[200, 214], ["tsp.prepare_sample_batch", "len", "len"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.datasets.tsp.prepare_sample_batch"], ["", "", "def", "get_test_sample_wlen", "(", "self", ",", "bs", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "cur_index", "<", "0", ":", "\n", "            ", "self", ".", "cur_index", "=", "0", "\n", "", "find", "=", "self", ".", "cur_index", "\n", "tind", "=", "self", ".", "cur_index", "+", "bs", "\n", "if", "tind", ">", "len", "(", "self", ".", "test_samples", ")", ":", "\n", "            ", "tind", "=", "len", "(", "self", ".", "test_samples", ")", "\n", "find", "=", "tind", "-", "bs", "\n", "self", ".", "cur_index", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "cur_index", "+=", "bs", "\n", "", "samples", "=", "self", ".", "test_samples", "[", "find", ":", "tind", "]", "\n", "data", "=", "prepare_sample_batch", "(", "samples", ",", "end_token", "=", "self", ".", "out_dim", "-", "1", ",", "out_dim", "=", "self", ".", "out_dim", ",", "random_mode", "=", "False", ")", "\n", "return", "data", "", "", "", ""]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.tsp.prepare_sample_batch": [[7, 74], ["range", "min", "range", "numpy.transpose", "numpy.transpose", "len", "max", "max", "min", "len", "numpy.zeros", "numpy.zeros", "enumerate", "enumerate", "np.transpose.append", "np.transpose.append", "numpy.asarray", "numpy.asarray", "torch.tensor", "torch.tensor", "len", "len", "min", "numpy.random.choice", "float", "float", "len", "int", "int"], "function", ["None"], ["def", "prepare_sample_batch", "(", "samples", ",", "end_token", ",", "out_dim", ",", "max_len", "=", "500", ",", "random_mode", "=", "True", ")", ":", "\n", "    ", "max_seq_len", "=", "0", "\n", "max_out_len", "=", "0", "\n", "for", "index", "in", "range", "(", "len", "(", "samples", ")", ")", ":", "\n", "# print(sample[index]['inputs'])", "\n", "# print(sample[index]['outputs'])", "\n", "        ", "max_seq_len", "=", "max", "(", "len", "(", "samples", "[", "index", "]", "[", "'inputs'", "]", ")", ",", "max_seq_len", ")", "\n", "max_out_len", "=", "max", "(", "len", "(", "samples", "[", "index", "]", "[", "'outputs'", "]", ")", ",", "max_out_len", ")", "\n", "\n", "", "max_seq_len", "=", "min", "(", "max_seq_len", ",", "max_len", ")", "\n", "max_out_len", "=", "min", "(", "max_out_len", ",", "max_len", ")", "+", "1", "\n", "total_seq_len", "=", "max_seq_len", "+", "1", "\n", "\n", "input_vecs", "=", "[", "]", "\n", "output_vecs", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "samples", ")", ")", ":", "\n", "# print('\\n{}'.format(index))", "\n", "        ", "ins", "=", "samples", "[", "index", "]", "[", "'inputs'", "]", "\n", "outs", "=", "samples", "[", "index", "]", "[", "'outputs'", "]", "\n", "input_vec", "=", "np", ".", "zeros", "(", "[", "total_seq_len", ",", "2", "+", "out_dim", "]", ")", "\n", "output_vec", "=", "np", ".", "zeros", "(", "max_out_len", ",", "dtype", "=", "np", ".", "long", ")", "\n", "# print(samples[index]['inputs'])", "\n", "# print(target_code)", "\n", "# print(samples[index]['outputs'])", "\n", "offset", "=", "max_seq_len", "-", "min", "(", "len", "(", "ins", ")", ",", "max_seq_len", ")", "\n", "if", "random_mode", ":", "\n", "            ", "labels", "=", "np", ".", "random", ".", "choice", "(", "max_seq_len", ",", "max_seq_len", ",", "replace", "=", "False", ")", "\n", "", "for", "iii", ",", "token", "in", "enumerate", "(", "ins", ")", ":", "\n", "            ", "if", "iii", "==", "max_seq_len", ":", "\n", "                ", "break", "\n", "", "input_vec", "[", "iii", "+", "offset", "]", "[", "0", "]", "=", "float", "(", "token", "[", "0", "]", ")", "\n", "input_vec", "[", "iii", "+", "offset", "]", "[", "1", "]", "=", "float", "(", "token", "[", "1", "]", ")", "\n", "\n", "if", "random_mode", ":", "\n", "                ", "pos", "=", "labels", "[", "iii", "]", "+", "1", "\n", "", "else", ":", "\n", "                ", "pos", "=", "iii", "+", "1", "\n", "", "input_vec", "[", "iii", "+", "offset", "]", "[", "2", "+", "pos", "]", "=", "1.0", "\n", "", "input_vec", "[", "iii", "+", "offset", "]", "[", "2", "]", "=", "1.0", "\n", "# for i in range(offset):", "\n", "#     input_vec[i][2] = 1", "\n", "# print(outs)", "\n", "for", "iii", ",", "token", "in", "enumerate", "(", "outs", ")", ":", "\n", "            ", "if", "iii", "==", "max_out_len", ":", "\n", "                ", "break", "\n", "", "if", "random_mode", ":", "\n", "                ", "out_value", "=", "labels", "[", "int", "(", "token", ")", "-", "1", "]", "+", "1", "\n", "", "else", ":", "\n", "                ", "out_value", "=", "int", "(", "token", ")", "\n", "", "output_vec", "[", "iii", "]", "=", "out_value", "\n", "", "output_vec", "[", "iii", "]", "=", "end_token", "\n", "# print(input_vec)", "\n", "# print(output_vec)", "\n", "# print(mask)", "\n", "# print('====')", "\n", "# input_vec = [onehot(code, word_space_size) for code in input_vec]", "\n", "# output_vec = [onehot(code, word_space_size) for code in output_vec]", "\n", "input_vecs", ".", "append", "(", "input_vec", ")", "\n", "output_vecs", ".", "append", "(", "output_vec", ")", "\n", "\n", "\n", "", "input_vecs", "=", "np", ".", "transpose", "(", "np", ".", "asarray", "(", "input_vecs", ")", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "output_vecs", "=", "np", ".", "transpose", "(", "np", ".", "asarray", "(", "output_vecs", ")", ",", "[", "1", ",", "0", "]", ")", "\n", "# raise False", "\n", "return", "torch", ".", "tensor", "(", "input_vecs", ",", "dtype", "=", "torch", ".", "float", ")", ",", "torch", ".", "tensor", "(", "output_vecs", ",", "dtype", "=", "torch", ".", "long", ")", ",", "total_seq_len", ",", "max_out_len", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.nfar.NFarDataset.__init__": [[85, 98], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "task_params", ")", ":", "\n", "        ", "\"\"\"Initialize a dataset instance for copy task.\n\n        Arguments\n        ---------\n        task_params : dict\n            A dict containing parameters relevant to copy task.\n        \"\"\"", "\n", "self", ".", "num_dims", "=", "task_params", "[", "'num_dims'", "]", "\n", "self", ".", "num_vectors", "=", "task_params", "[", "'num_vectors'", "]", "\n", "self", ".", "in_dim", "=", "self", ".", "num_dims", "+", "self", ".", "num_vectors", "*", "3", "\n", "\n", "self", ".", "out_dim", "=", "self", ".", "num_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.nfar.NFarDataset.__len__": [[99, 103], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "# sequences are generated randomly so this does not matter", "\n", "# set a sufficiently large size for data loader to sample mini-batches", "\n", "        ", "return", "65536", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.nfar.NFarDataset.__getitem__": [[104, 107], ["nfar.get_examples"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.datasets.nfar.get_examples"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "input_seq", ",", "target_seq", "=", "get_examples", "(", "1", ",", "self", ".", "num_vectors", ",", "self", ".", "num_dims", ",", "self", ".", "in_dim", ")", "\n", "return", "{", "'input'", ":", "input_seq", "[", ":", ",", "0", ",", ":", "]", ",", "'target'", ":", "target_seq", "[", ":", ",", "0", ",", ":", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.nfar.NFarDataset.get_sample_wlen": [[108, 111], ["nfar.get_examples"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.datasets.nfar.get_examples"], ["", "def", "get_sample_wlen", "(", "self", ",", "bs", "=", "1", ")", ":", "\n", "        ", "input_seq", ",", "target_seq", "=", "get_examples", "(", "bs", ",", "self", ".", "num_vectors", ",", "self", ".", "num_dims", ",", "self", ".", "in_dim", ")", "\n", "return", "{", "'input'", ":", "input_seq", ",", "'target'", ":", "target_seq", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.nfar.one_hot_encode": [[12, 17], ["numpy.zeros", "range", "len", "len"], "function", ["None"], ["def", "one_hot_encode", "(", "array", ",", "num_dims", "=", "8", ")", ":", "\n", "    ", "one_hot", "=", "np", ".", "zeros", "(", "(", "len", "(", "array", ")", ",", "num_dims", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "array", ")", ")", ":", "\n", "        ", "one_hot", "[", "i", ",", "array", "[", "i", "]", "]", "=", "1", "\n", "", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.nfar.get_example": [[19, 39], ["numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.linalg.norm", "numpy.zeros", "nfar.one_hot_encode", "numpy.reshape", "numpy.tile", "nfar.one_hot_encode", "numpy.random.rand", "numpy.argsort"], "function", ["home.repos.pwc.inspect_result.thaihungle_SAM.datasets.nfar.one_hot_encode", "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.nfar.one_hot_encode"], ["", "def", "get_example", "(", "num_vectors", ",", "num_dims", ")", ":", "\n", "    ", "input_size", "=", "num_dims", "+", "num_vectors", "*", "3", "\n", "n", "=", "np", ".", "random", ".", "choice", "(", "num_vectors", ",", "1", ")", "# nth farthest from target vector", "\n", "labels", "=", "np", ".", "random", ".", "choice", "(", "num_vectors", ",", "num_vectors", ",", "replace", "=", "False", ")", "\n", "m_index", "=", "np", ".", "random", ".", "choice", "(", "num_vectors", ",", "1", ")", "# m comes after the m_index-th vector", "\n", "m", "=", "labels", "[", "m_index", "]", "\n", "\n", "# Vectors sampled from U(-1,1)", "\n", "vectors", "=", "np", ".", "random", ".", "rand", "(", "num_vectors", ",", "num_dims", ")", "*", "2", "-", "1", "\n", "target_vector", "=", "vectors", "[", "m_index", "]", "\n", "dist_from_target", "=", "np", ".", "linalg", ".", "norm", "(", "vectors", "-", "target_vector", ",", "axis", "=", "1", ")", "\n", "X_single", "=", "np", ".", "zeros", "(", "(", "num_vectors", ",", "input_size", ")", ")", "\n", "X_single", "[", ":", ",", ":", "num_dims", "]", "=", "vectors", "\n", "labels_onehot", "=", "one_hot_encode", "(", "labels", ",", "num_dims", "=", "num_vectors", ")", "\n", "X_single", "[", ":", ",", "num_dims", ":", "num_dims", "+", "num_vectors", "]", "=", "labels_onehot", "\n", "nm_onehot", "=", "np", ".", "reshape", "(", "one_hot_encode", "(", "[", "n", ",", "m", "]", ",", "num_dims", "=", "num_vectors", ")", ",", "-", "1", ")", "\n", "X_single", "[", ":", ",", "num_dims", "+", "num_vectors", ":", "]", "=", "np", ".", "tile", "(", "nm_onehot", ",", "(", "num_vectors", ",", "1", ")", ")", "\n", "y_single", "=", "labels", "[", "np", ".", "argsort", "(", "dist_from_target", ")", "[", "-", "(", "n", "+", "1", ")", "]", "]", "\n", "\n", "return", "X_single", ",", "y_single", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.nfar.get_example2": [[40, 57], ["numpy.random.choice", "numpy.random.binomial", "numpy.linalg.norm", "numpy.zeros", "numpy.zeros", "numpy.concatenate", "numpy.ones", "numpy.argsort"], "function", ["None"], ["", "def", "get_example2", "(", "num_vectors", ",", "num_dims", ")", ":", "\n", "    ", "input_size", "=", "num_dims", "\n", "m_index", "=", "np", ".", "random", ".", "choice", "(", "num_vectors", ",", "1", ")", "# m comes after the m_index-th vector", "\n", "prob", "=", "0.5", "*", "np", ".", "ones", "(", "[", "num_vectors", ",", "num_dims", "]", ")", "\n", "vectors", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "prob", ")", "\n", "# Vectors sampled from U(-1,1)", "\n", "# vectors = np.random.rand(num_vectors, num_dims) * 2 - 1", "\n", "target_vector", "=", "vectors", "[", "m_index", "]", "\n", "dist_from_target", "=", "np", ".", "linalg", ".", "norm", "(", "vectors", "-", "target_vector", ",", "axis", "=", "1", ")", "\n", "X_single", "=", "np", ".", "zeros", "(", "(", "num_vectors", ",", "input_size", ")", ")", "\n", "X_single", "[", ":", ",", ":", "num_dims", "]", "=", "vectors", "\n", "\n", "y_index", "=", "np", ".", "argsort", "(", "dist_from_target", ")", "[", "1", "]", "\n", "y_single", "=", "vectors", "[", "y_index", "]", "\n", "pad", "=", "np", ".", "zeros", "(", "[", "num_vectors", ",", "num_dims", "]", ")", "\n", "X_single", "=", "np", ".", "concatenate", "(", "[", "X_single", ",", "target_vector", ",", "pad", "]", ",", "axis", "=", "0", ")", "\n", "return", "X_single", ",", "y_single", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.nfar.get_examples": [[59, 73], ["numpy.zeros", "numpy.zeros", "range", "numpy.transpose", "numpy.transpose", "torch.Tensor().to", "torch.LongTensor().to", "nfar.get_example", "torch.Tensor", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.thaihungle_SAM.datasets.nfar.get_example"], ["", "def", "get_examples", "(", "num_examples", ",", "num_vectors", ",", "num_dims", ",", "input_size", ",", "device", "=", "0", ")", ":", "\n", "    ", "X", "=", "np", ".", "zeros", "(", "(", "num_examples", ",", "num_vectors", ",", "input_size", ")", ")", "\n", "y", "=", "np", ".", "zeros", "(", "(", "num_examples", ",", "1", ",", "num_vectors", ")", ")", "\n", "for", "i", "in", "range", "(", "num_examples", ")", ":", "\n", "        ", "X_single", ",", "y_single", "=", "get_example", "(", "num_vectors", ",", "num_dims", ")", "\n", "X", "[", "i", ",", ":", "]", "=", "X_single", "\n", "y", "[", "i", "]", "[", "0", "]", "[", "y_single", "[", "0", "]", "]", "=", "1", "\n", "", "X", "=", "np", ".", "transpose", "(", "X", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "y", "=", "np", ".", "transpose", "(", "y", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "X", "=", "torch", ".", "Tensor", "(", "X", ")", ".", "to", "(", "device", ")", "\n", "y", "=", "torch", ".", "LongTensor", "(", "y", ")", ".", "to", "(", "device", ")", "\n", "\n", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.number_arecall.NARDataset.__init__": [[16, 31], ["number_arecall.read_data", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.datasets.number_arecall.read_data"], ["def", "__init__", "(", "self", ",", "task_params", ")", ":", "\n", "        ", "\"\"\"Initialize a dataset instance for copy task.\n\n        Arguments\n        ---------\n        task_params : dict\n            A dict containing parameters relevant to copy task.\n        \"\"\"", "\n", "self", ".", "ar_data", "=", "read_data", "(", "task_params", "[", "\"data_dir\"", "]", ")", "\n", "self", ".", "in_dim", "=", "26", "+", "10", "+", "1", "\n", "self", ".", "out_dim", "=", "10", "\n", "\n", "print", "(", "f\"num train {self.ar_data.train._num_examples}\"", ")", "\n", "print", "(", "f\"num valid {self.ar_data.val._num_examples}\"", ")", "\n", "print", "(", "f\"num test {self.ar_data.test._num_examples}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.number_arecall.NARDataset.__len__": [[33, 37], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "# sequences are generated randomly so this does not matter", "\n", "# set a sufficiently large size for data loader to sample mini-batches", "\n", "        ", "return", "65536", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.number_arecall.NARDataset.__getitem__": [[38, 41], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# idx only acts as a counter while generating batches.", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.number_arecall.NARDataset.get_sample_wlen": [[42, 52], ["number_arecall.NARDataset.ar_data.train.next_batch", "torch.tensor().permute().long", "torch.tensor().long", "number_arecall.NARDataset.ar_data.test.next_batch", "number_arecall.NARDataset.ar_data.val.next_batch", "torch.tensor().permute", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.datasets.number_arecall.Dataset.next_batch", "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.number_arecall.Dataset.next_batch", "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.number_arecall.Dataset.next_batch"], ["", "def", "get_sample_wlen", "(", "self", ",", "bs", "=", "1", ",", "type", "=", "\"train\"", ")", ":", "\n", "        ", "if", "type", "==", "\"train\"", ":", "\n", "            ", "bx", ",", "by", "=", "self", ".", "ar_data", ".", "train", ".", "next_batch", "(", "batch_size", "=", "bs", ")", "\n", "", "elif", "type", "==", "\"test\"", ":", "\n", "            ", "bx", ",", "by", "=", "self", ".", "ar_data", ".", "test", ".", "next_batch", "(", "batch_size", "=", "bs", ")", "\n", "", "else", ":", "\n", "            ", "bx", ",", "by", "=", "self", ".", "ar_data", ".", "val", ".", "next_batch", "(", "batch_size", "=", "bs", ")", "\n", "\n", "\n", "", "return", "torch", ".", "tensor", "(", "bx", ")", ".", "permute", "(", "1", ",", "0", ")", ".", "long", "(", ")", ",", "torch", ".", "tensor", "(", "by", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.number_arecall.Dataset.__init__": [[54, 61], ["numpy.random.permutation", "numpy.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "self", ".", "_x", "=", "x", "\n", "self", ".", "_y", "=", "y", "\n", "self", ".", "_epoch_completed", "=", "0", "\n", "self", ".", "_index_in_epoch", "=", "0", "\n", "self", ".", "_num_examples", "=", "self", ".", "x", ".", "shape", "[", "0", "]", "\n", "self", ".", "perm", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "self", ".", "_num_examples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.number_arecall.Dataset.x": [[62, 65], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "x", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_x", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.number_arecall.Dataset.y": [[66, 69], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "y", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_y", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.number_arecall.Dataset.num_examples": [[70, 73], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.number_arecall.Dataset.next_batch": [[74, 89], ["isinstance", "numpy.random.shuffle"], "methods", ["None"], ["", "def", "next_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "isinstance", "(", "batch_size", ",", "int", ")", ":", "\n", "            ", "assert", "batch_size", "<=", "self", ".", "_num_examples", "\n", "start", "=", "self", ".", "_index_in_epoch", "\n", "self", ".", "_index_in_epoch", "+=", "batch_size", "\n", "if", "self", ".", "_index_in_epoch", ">=", "self", ".", "num_examples", ":", "\n", "                ", "self", ".", "_epoch_completed", "+=", "1", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "perm", ")", "\n", "start", "=", "0", "\n", "self", ".", "_index_in_epoch", "=", "batch_size", "\n", "", "end", "=", "self", ".", "_index_in_epoch", "\n", "return", "self", ".", "_x", "[", "self", ".", "perm", "[", "start", ":", "end", "]", "]", ",", "self", ".", "_y", "[", "self", ".", "perm", "[", "start", ":", "end", "]", "]", "\n", "", "else", ":", "\n", "            ", "start", ",", "end", "=", "batch_size", "[", "0", "]", ",", "batch_size", "[", "1", "]", "\n", "return", "self", ".", "_x", "[", "self", ".", "perm", "[", "start", ":", "end", "]", "]", ",", "self", ".", "_y", "[", "self", ".", "perm", "[", "start", ":", "end", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.number_arecall.read_data": [[95, 108], ["number_arecall.Dataset", "number_arecall.Dataset", "number_arecall.Dataset", "Datasets", "open", "pickle.load"], "function", ["None"], ["def", "read_data", "(", "data_path", "=", "'./number_arecall/associative-retrieval.pkl'", ")", ":", "\n", "    ", "with", "open", "(", "data_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "d", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "x_train", "=", "d", "[", "'x_train'", "]", "\n", "x_val", "=", "d", "[", "'x_val'", "]", "\n", "x_test", "=", "d", "[", "'x_test'", "]", "\n", "y_train", "=", "d", "[", "'y_train'", "]", "\n", "y_val", "=", "d", "[", "'y_val'", "]", "\n", "y_test", "=", "d", "[", "'y_test'", "]", "\n", "train", "=", "Dataset", "(", "x_train", ",", "y_train", ")", "\n", "test", "=", "Dataset", "(", "x_test", ",", "y_test", ")", "\n", "val", "=", "Dataset", "(", "x_val", ",", "y_val", ")", "\n", "return", "Datasets", "(", "train", "=", "train", ",", "val", "=", "val", ",", "test", "=", "test", ")", "", "", ""]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.copy.CopyDataset.__init__": [[16, 29], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "task_params", ")", ":", "\n", "        ", "\"\"\"Initialize a dataset instance for copy task.\n\n        Arguments\n        ---------\n        task_params : dict\n            A dict containing parameters relevant to copy task.\n        \"\"\"", "\n", "self", ".", "seq_width", "=", "task_params", "[", "'seq_width'", "]", "\n", "self", ".", "min_seq_len", "=", "task_params", "[", "'min_seq_len'", "]", "\n", "self", ".", "max_seq_len", "=", "task_params", "[", "'max_seq_len'", "]", "\n", "self", ".", "in_dim", "=", "task_params", "[", "'seq_width'", "]", "+", "2", "\n", "self", ".", "out_dim", "=", "task_params", "[", "'seq_width'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.copy.CopyDataset.__len__": [[30, 34], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "# sequences are generated randomly so this does not matter", "\n", "# set a sufficiently large size for data loader to sample mini-batches", "\n", "        ", "return", "65536", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.copy.CopyDataset.__getitem__": [[35, 51], ["torch.randint().item", "torch.distributions.binomial.Binomial().sample", "torch.zeros", "torch.zeros", "torch.ones", "torch.randint", "torch.distributions.binomial.Binomial"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# idx only acts as a counter while generating batches.", "\n", "        ", "seq_len", "=", "torch", ".", "randint", "(", "\n", "self", ".", "min_seq_len", ",", "self", ".", "max_seq_len", ",", "(", "1", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "item", "(", ")", "\n", "prob", "=", "0.5", "*", "torch", ".", "ones", "(", "[", "seq_len", ",", "self", ".", "seq_width", "]", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "seq", "=", "Binomial", "(", "1", ",", "prob", ")", ".", "sample", "(", ")", "\n", "\n", "# fill in input sequence, two bit longer and wider than target", "\n", "input_seq", "=", "torch", ".", "zeros", "(", "[", "seq_len", "+", "2", ",", "self", ".", "seq_width", "+", "2", "]", ")", "\n", "input_seq", "[", "0", ",", "self", ".", "seq_width", "]", "=", "1.0", "# start delimiter", "\n", "input_seq", "[", "1", ":", "seq_len", "+", "1", ",", ":", "self", ".", "seq_width", "]", "=", "seq", "\n", "input_seq", "[", "seq_len", "+", "1", ",", "self", ".", "seq_width", "+", "1", "]", "=", "1.0", "# end delimiter", "\n", "\n", "target_seq", "=", "torch", ".", "zeros", "(", "[", "seq_len", ",", "self", ".", "seq_width", "]", ")", "\n", "target_seq", "[", ":", "seq_len", ",", ":", "self", ".", "seq_width", "]", "=", "seq", "\n", "return", "{", "'input'", ":", "input_seq", ",", "'target'", ":", "target_seq", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.copy.CopyDataset.get_sample_wlen": [[52, 66], ["torch.distributions.binomial.Binomial().sample", "torch.zeros", "torch.zeros", "torch.ones", "torch.distributions.binomial.Binomial"], "methods", ["None"], ["", "def", "get_sample_wlen", "(", "self", ",", "seq_len", ",", "bs", "=", "1", ")", ":", "\n", "# idx only acts as a counter while generating batches.", "\n", "        ", "prob", "=", "0.5", "*", "torch", ".", "ones", "(", "[", "seq_len", ",", "bs", ",", "self", ".", "seq_width", "]", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "seq", "=", "Binomial", "(", "1", ",", "prob", ")", ".", "sample", "(", ")", "\n", "\n", "# fill in input sequence, two bit longer and wider than target", "\n", "input_seq", "=", "torch", ".", "zeros", "(", "[", "seq_len", "+", "2", ",", "bs", ",", "self", ".", "seq_width", "+", "2", "]", ")", "\n", "input_seq", "[", "0", ",", ":", ",", "self", ".", "seq_width", "]", "=", "1.0", "# start delimiter", "\n", "input_seq", "[", "1", ":", "seq_len", "+", "1", ",", ":", ",", ":", "self", ".", "seq_width", "]", "=", "seq", "\n", "input_seq", "[", "seq_len", "+", "1", ",", ":", ",", "self", ".", "seq_width", "+", "1", "]", "=", "1.0", "# end delimiter", "\n", "\n", "target_seq", "=", "torch", ".", "zeros", "(", "[", "seq_len", ",", "bs", ",", "self", ".", "seq_width", "]", ")", "\n", "target_seq", "[", ":", "seq_len", ",", ":", ",", ":", "self", ".", "seq_width", "]", "=", "seq", "\n", "return", "{", "'input'", ":", "input_seq", ",", "'target'", ":", "target_seq", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.rar.RARDataset.__init__": [[17, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "task_params", ")", ":", "\n", "        ", "\"\"\"Initialize a dataset instance for Associative Recall task.\n\n        Arguments\n        ---------\n        task_params : dict\n            A dict containing parameters relevant to associative recall task.\n        \"\"\"", "\n", "self", ".", "seq_width", "=", "task_params", "[", "\"seq_width\"", "]", "\n", "self", ".", "seq_len", "=", "task_params", "[", "\"seq_len\"", "]", "\n", "self", ".", "min_item", "=", "task_params", "[", "\"min_item\"", "]", "\n", "self", ".", "max_item", "=", "task_params", "[", "\"max_item\"", "]", "\n", "self", ".", "in_dim", "=", "task_params", "[", "'seq_width'", "]", "+", "2", "\n", "self", ".", "out_dim", "=", "task_params", "[", "'seq_width'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.rar.RARDataset.__len__": [[32, 36], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "# sequences are generated randomly so this does not matter", "\n", "# set a sufficiently large size for data loader to sample mini-batches", "\n", "        ", "return", "65536", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.rar.RARDataset.__getitem__": [[37, 78], ["torch.randint().item", "torch.distributions.binomial.Binomial", "torch.zeros", "range", "torch.zeros", "torch.ones", "torch.distributions.binomial.Binomial.sample", "torch.randint().item", "torch.randint", "torch.randint"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# idx only acts as a counter while generating batches.", "\n", "        ", "num_item", "=", "torch", ".", "randint", "(", "\n", "self", ".", "min_item", ",", "self", ".", "max_item", ",", "(", "1", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "item", "(", ")", "\n", "prob", "=", "0.5", "*", "torch", ".", "ones", "(", "[", "self", ".", "seq_len", ",", "self", ".", "seq_width", "]", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "seq", "=", "Binomial", "(", "1", ",", "prob", ")", "\n", "\n", "# fill in input two bit wider than target to account for delimiter", "\n", "# flags.", "\n", "input_items", "=", "torch", ".", "zeros", "(", "\n", "[", "(", "self", ".", "seq_len", "+", "1", ")", "*", "(", "num_item", "+", "1", ")", "+", "1", ",", "self", ".", "seq_width", "+", "2", "]", ")", "\n", "for", "i", "in", "range", "(", "num_item", ")", ":", "\n", "            ", "input_items", "[", "(", "self", ".", "seq_len", "+", "1", ")", "*", "i", ",", "self", ".", "seq_width", "]", "=", "1.0", "\n", "input_items", "[", "(", "self", ".", "seq_len", "+", "1", ")", "*", "i", "+", "1", ":", "(", "self", ".", "seq_len", "+", "1", ")", "\n", "*", "(", "i", "+", "1", ")", ",", ":", "self", ".", "seq_width", "]", "=", "seq", ".", "sample", "(", ")", "\n", "\n", "# generate query item randomly", "\n", "# in case of only one item, torch.randint throws error as num_item-1=0", "\n", "", "query_item", "=", "0", "\n", "if", "num_item", "!=", "1", ":", "\n", "            ", "query_item", "=", "torch", ".", "randint", "(", "\n", "0", ",", "num_item", "-", "1", ",", "(", "1", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "item", "(", ")", "\n", "", "query_seq", "=", "input_items", "[", "(", "self", ".", "seq_len", "+", "1", ")", "*", "query_item", "+", "\n", "1", ":", "(", "self", ".", "seq_len", "+", "1", ")", "*", "(", "query_item", "+", "1", ")", ",", ":", "self", ".", "seq_width", "]", "\n", "input_items", "[", "(", "self", ".", "seq_len", "+", "1", ")", "*", "num_item", ",", "\n", "self", ".", "seq_width", "+", "1", "]", "=", "1.0", "# query delimiter", "\n", "input_items", "[", "(", "self", ".", "seq_len", "+", "1", ")", "*", "num_item", "+", "1", ":", "(", "self", ".", "seq_len", "+", "1", ")", "\n", "*", "(", "num_item", "+", "1", ")", ",", ":", "self", ".", "seq_width", "]", "=", "query_seq", "\n", "input_items", "[", "(", "self", ".", "seq_len", "+", "1", ")", "*", "(", "num_item", "+", "1", ")", ",", "\n", "self", ".", "seq_width", "+", "1", "]", "=", "1.0", "# query delimiter", "\n", "\n", "# generate target sequences(item next to query in the input list)", "\n", "target_item", "=", "torch", ".", "zeros", "(", "[", "self", ".", "seq_len", ",", "self", ".", "seq_width", "]", ")", "\n", "# in case of last item, target sequence is zero", "\n", "\n", "if", "query_item", "!=", "num_item", "-", "1", ":", "\n", "            ", "target_item", "[", ":", "self", ".", "seq_len", ",", ":", "self", ".", "seq_width", "]", "=", "input_items", "[", "\n", "(", "self", ".", "seq_len", "+", "1", ")", "*", "(", "query_item", "+", "1", ")", "+", "1", ":", "(", "self", ".", "seq_len", "+", "1", ")", "*", "(", "query_item", "+", "2", ")", ",", ":", "self", ".", "seq_width", "]", "\n", "\n", "", "return", "{", "'input'", ":", "input_items", ",", "'target'", ":", "target_item", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.rar.RARDataset.get_sample_wlen": [[79, 149], ["torch.distributions.binomial.Binomial", "torch.zeros", "range", "torch.zeros", "range", "torch.ones", "torch.distributions.binomial.Binomial.sample", "torch.randint().item", "range", "[].item", "torch.randint", "torch.norm", "qitem.contiguous().view", "qitem.contiguous().view", "cur_item.contiguous().view", "qitem.contiguous", "qitem.contiguous", "cur_item.contiguous"], "methods", ["None"], ["", "def", "get_sample_wlen", "(", "self", ",", "num_item", ",", "seq_len", ",", "bs", "=", "1", ")", ":", "\n", "\n", "        ", "prob", "=", "0.5", "*", "torch", ".", "ones", "(", "[", "seq_len", ",", "bs", ",", "self", ".", "seq_width", "]", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "seq", "=", "Binomial", "(", "1", ",", "prob", ")", "\n", "\n", "# fill in input two bit wider than target to account for delimiter", "\n", "# flags.", "\n", "input_items", "=", "torch", ".", "zeros", "(", "\n", "[", "(", "seq_len", "+", "1", ")", "*", "(", "num_item", "+", "1", ")", "+", "1", ",", "bs", ",", "self", ".", "seq_width", "+", "2", "]", ")", "\n", "for", "i", "in", "range", "(", "num_item", ")", ":", "\n", "            ", "input_items", "[", "(", "seq_len", "+", "1", ")", "*", "i", ",", ":", ",", "self", ".", "seq_width", "]", "=", "1.0", "\n", "input_items", "[", "(", "seq_len", "+", "1", ")", "*", "i", "+", "1", ":", "(", "seq_len", "+", "1", ")", "\n", "*", "(", "i", "+", "1", ")", ",", ":", ",", ":", "self", ".", "seq_width", "]", "=", "seq", ".", "sample", "(", ")", "\n", "\n", "# generate query item randomly", "\n", "# in case of only one item, torch.randint throws error as num_item-1=0", "\n", "", "query_item", "=", "0", "\n", "if", "num_item", "!=", "1", ":", "\n", "            ", "query_item", "=", "torch", ".", "randint", "(", "\n", "0", ",", "num_item", "-", "1", ",", "(", "1", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "item", "(", ")", "\n", "", "query_seq", "=", "input_items", "[", "(", "seq_len", "+", "1", ")", "*", "query_item", "+", "\n", "1", ":", "(", "seq_len", "+", "1", ")", "*", "(", "query_item", "+", "1", ")", ",", ":", ",", ":", "self", ".", "seq_width", "]", "\n", "input_items", "[", "(", "seq_len", "+", "1", ")", "*", "num_item", ",", ":", ",", "\n", "self", ".", "seq_width", "+", "1", "]", "=", "1.0", "# query delimiter", "\n", "input_items", "[", "(", "seq_len", "+", "1", ")", "*", "num_item", "+", "1", ":", "(", "seq_len", "+", "1", ")", "\n", "*", "(", "num_item", "+", "1", ")", ",", ":", ",", ":", "self", ".", "seq_width", "]", "=", "query_seq", "\n", "input_items", "[", "(", "seq_len", "+", "1", ")", "*", "(", "num_item", "+", "1", ")", ",", ":", ",", "\n", "self", ".", "seq_width", "+", "1", "]", "=", "1.0", "# query delimiter", "\n", "\n", "# generate target sequences(item next to query in the input list)", "\n", "target_item", "=", "torch", ".", "zeros", "(", "[", "seq_len", ",", "bs", ",", "self", ".", "seq_width", "]", ")", "\n", "# in case of last item, target sequence is zero", "\n", "for", "b", "in", "range", "(", "bs", ")", ":", "\n", "            ", "choose_max", "=", "False", "\n", "qitem", "=", "input_items", "[", "\n", "(", "seq_len", "+", "1", ")", "*", "query_item", "+", "1", ":", "(", "seq_len", "+", "1", ")", "*", "(", "query_item", "+", "1", ")", ",", "b", ",", ":", "self", ".", "seq_width", "]", "\n", "if", "qitem", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "[", "-", "1", "]", ".", "item", "(", ")", "==", "1", ":", "\n", "                ", "choose_max", "=", "True", "\n", "# print(\"max\")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "# print(\"min\")", "\n", "", "if", "choose_max", ":", "\n", "                ", "cd", "=", "0", "\n", "", "else", ":", "\n", "                ", "cd", "=", "10000000000000000", "\n", "", "titem", "=", "qitem", "\n", "for", "ii", "in", "range", "(", "num_item", ")", ":", "\n", "                ", "if", "ii", "!=", "query_item", ":", "\n", "                    ", "cur_item", "=", "input_items", "[", "\n", "(", "seq_len", "+", "1", ")", "*", "ii", "+", "1", ":", "(", "seq_len", "+", "1", ")", "*", "(", "ii", "+", "1", ")", ",", "b", ",", ":", "self", ".", "seq_width", "]", "\n", "curd", "=", "torch", ".", "norm", "(", "qitem", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "-", "cur_item", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "if", "choose_max", ":", "\n", "                        ", "if", "curd", ">", "cd", ":", "\n", "                            ", "titem", "=", "ii", "\n", "cd", "=", "curd", "\n", "", "", "else", ":", "\n", "                        ", "if", "curd", "<", "cd", ":", "\n", "                            ", "titem", "=", "ii", "\n", "cd", "=", "curd", "\n", "# print(num_item)", "\n", "# print(titem)", "\n", "# print(cd)", "\n", "\n", "\n", "", "", "", "", "target_item", "[", ":", "seq_len", ",", "b", ",", ":", "self", ".", "seq_width", "]", "=", "input_items", "[", "\n", "(", "seq_len", "+", "1", ")", "*", "titem", "+", "1", ":", "(", "seq_len", "+", "1", ")", "*", "(", "titem", "+", "1", ")", ",", "b", ",", ":", "self", ".", "seq_width", "]", "\n", "\n", "", "return", "{", "'input'", ":", "input_items", ",", "'target'", ":", "target_item", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.prioritysort.PrioritySortDataset.__init__": [[17, 30], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "task_params", ")", ":", "\n", "        ", "\"\"\" Initialize a dataset instance for the priority sort task.\n\n        Arguments\n        ---------\n        task_params : dict\n                A dict containing parameters relevant to priority sort task.\n        \"\"\"", "\n", "self", ".", "seq_width", "=", "task_params", "[", "\"seq_width\"", "]", "\n", "self", ".", "input_seq_len", "=", "task_params", "[", "\"input_seq_len\"", "]", "\n", "self", ".", "target_seq_len", "=", "task_params", "[", "\"target_seq_len\"", "]", "\n", "self", ".", "in_dim", "=", "task_params", "[", "'seq_width'", "]", "+", "2", "\n", "self", ".", "out_dim", "=", "task_params", "[", "'seq_width'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.prioritysort.PrioritySortDataset.__len__": [[31, 35], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "# sequences are generated randomly so this does not matter", "\n", "# set a sufficiently large size for data loader to sample mini-batches", "\n", "        ", "return", "65536", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.prioritysort.PrioritySortDataset.__getitem__": [[36, 58], ["torch.distributions.binomial.Binomial().sample", "torch.zeros", "torch.distributions.uniform.Uniform", "range", "torch.sort", "torch.ones", "torch.tensor", "torch.tensor", "torch.distributions.uniform.Uniform.sample", "torch.distributions.binomial.Binomial"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# idx only acts as a counter while generating batches.", "\n", "        ", "prob", "=", "0.5", "*", "torch", ".", "ones", "(", "[", "self", ".", "input_seq_len", ",", "\n", "self", ".", "seq_width", "]", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "seq", "=", "Binomial", "(", "1", ",", "prob", ")", ".", "sample", "(", ")", "\n", "# Extra input channel for providing priority value", "\n", "input_seq", "=", "torch", ".", "zeros", "(", "[", "self", ".", "input_seq_len", ",", "self", ".", "in_dim", "]", ")", "\n", "input_seq", "[", ":", "self", ".", "input_seq_len", ",", ":", "self", ".", "seq_width", "]", "=", "seq", "\n", "\n", "# torch's Uniform function draws samples from the half-open interval", "\n", "# [low, high) but in the paper the priorities are drawn from [-1,1].", "\n", "# This minor difference is being ignored here as supposedly it doesn't", "\n", "# affects the task.", "\n", "priority", "=", "Uniform", "(", "torch", ".", "tensor", "(", "[", "-", "1.0", "]", ")", ",", "torch", ".", "tensor", "(", "[", "1.0", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "input_seq_len", ")", ":", "\n", "            ", "input_seq", "[", "i", ",", "self", ".", "seq_width", "]", "=", "priority", ".", "sample", "(", ")", "\n", "\n", "", "sorted", ",", "ind", "=", "torch", ".", "sort", "(", "input_seq", "[", ":", ",", "self", ".", "seq_width", "]", ",", "0", ",", "descending", "=", "True", ")", "\n", "sorted", "=", "input_seq", "[", "ind", "]", "\n", "target_seq", "=", "sorted", "[", ":", "self", ".", "target_seq_len", ",", ":", "self", ".", "seq_width", "]", "\n", "\n", "return", "{", "'input'", ":", "input_seq", ",", "'target'", ":", "target_seq", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.datasets.prioritysort.PrioritySortDataset.get_sample_wlen": [[59, 83], ["torch.distributions.binomial.Binomial().sample", "torch.zeros", "torch.distributions.uniform.Uniform", "range", "range", "torch.cat", "torch.ones", "torch.tensor", "torch.tensor", "torch.distributions.uniform.Uniform.sample", "torch.sort", "torch.cat.append", "torch.distributions.binomial.Binomial", "sorted[].unsqueeze"], "methods", ["None"], ["", "def", "get_sample_wlen", "(", "self", ",", "bs", "=", "1", ")", ":", "\n", "# idx only acts as a counter while generating batches.", "\n", "        ", "prob", "=", "0.5", "*", "torch", ".", "ones", "(", "[", "self", ".", "input_seq_len", ",", "bs", ",", "\n", "self", ".", "seq_width", "]", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "seq", "=", "Binomial", "(", "1", ",", "prob", ")", ".", "sample", "(", ")", "\n", "# Extra input channel for providing priority value", "\n", "input_seq", "=", "torch", ".", "zeros", "(", "[", "self", ".", "input_seq_len", ",", "bs", ",", "self", ".", "in_dim", "]", ")", "\n", "input_seq", "[", ":", "self", ".", "input_seq_len", ",", ":", ",", ":", "self", ".", "seq_width", "]", "=", "seq", "\n", "\n", "# torch's Uniform function draws samples from the half-open interval", "\n", "# [low, high) but in the paper the priorities are drawn from [-1,1].", "\n", "# This minor difference is being ignored here as supposedly it doesn't", "\n", "# affects the task.", "\n", "priority", "=", "Uniform", "(", "torch", ".", "tensor", "(", "[", "-", "1.0", "]", "*", "bs", ")", ",", "torch", ".", "tensor", "(", "[", "1.0", "]", "*", "bs", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "input_seq_len", ")", ":", "\n", "            ", "input_seq", "[", "i", ",", ":", ",", "self", ".", "seq_width", "]", "=", "priority", ".", "sample", "(", ")", "\n", "\n", "", "target_seq", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "bs", ")", ":", "\n", "            ", "sorted", ",", "ind", "=", "torch", ".", "sort", "(", "input_seq", "[", ":", ",", "j", ",", "self", ".", "seq_width", "]", ",", "0", ",", "descending", "=", "True", ")", "\n", "sorted", "=", "input_seq", "[", "ind", ",", "j", "]", "\n", "target_seq", ".", "append", "(", "sorted", "[", ":", "self", ".", "target_seq_len", ",", ":", "self", ".", "seq_width", "]", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "target_seq", "=", "torch", ".", "cat", "(", "target_seq", ",", "1", ")", "\n", "return", "{", "'input'", ":", "input_seq", ",", "'target'", ":", "target_seq", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thaihungle_SAM.number_arecall.number_arecall.get_one_hot": [[21, 30], ["numpy.zeros", "ord", "ord", "ord", "ord", "ord", "ord", "ord", "ord", "ord", "ord"], "function", ["None"], ["\n", "self", ".", "ar_data", "=", "read_data", "(", "task_params", "[", "\"data_dir\"", "]", ")", "\n", "self", ".", "in_dim", "=", "26", "+", "10", "+", "1", "\n", "self", ".", "out_dim", "=", "10", "\n", "\n", "print", "(", "f\"num train {self.ar_data.train._num_examples}\"", ")", "\n", "print", "(", "f\"num valid {self.ar_data.val._num_examples}\"", ")", "\n", "print", "(", "f\"num test {self.ar_data.test._num_examples}\"", ")", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.number_arecall.number_arecall.get_one_hot2": [[31, 38], ["ord", "ord", "ord", "ord", "ord", "ord", "ord", "ord", "ord", "ord"], "function", ["None"], ["\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "# sequences are generated randomly so this does not matter", "\n", "# set a sufficiently large size for data loader to sample mini-batches", "\n", "        ", "return", "65536", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.number_arecall.number_arecall.generate_one": [[40, 65], ["numpy.zeros", "range", "random.choice", "chr", "chr", "number_arecall.get_one_hot", "number_arecall.get_one_hot", "number_arecall.get_one_hot", "number_arecall.get_one_hot", "random.randint", "random.randint", "number_arecall.get_one_hot", "number_arecall.get_one_hot", "list", "random.randint", "chr", "chr", "d.keys", "ord", "ord", "ord", "ord"], "function", ["home.repos.pwc.inspect_result.thaihungle_SAM.number_arecall.number_arecall.get_one_hot", "home.repos.pwc.inspect_result.thaihungle_SAM.number_arecall.number_arecall.get_one_hot", "home.repos.pwc.inspect_result.thaihungle_SAM.number_arecall.number_arecall.get_one_hot", "home.repos.pwc.inspect_result.thaihungle_SAM.number_arecall.number_arecall.get_one_hot", "home.repos.pwc.inspect_result.thaihungle_SAM.number_arecall.number_arecall.get_one_hot", "home.repos.pwc.inspect_result.thaihungle_SAM.number_arecall.number_arecall.get_one_hot"], ["        ", "pass", "\n", "\n", "", "def", "get_sample_wlen", "(", "self", ",", "bs", "=", "1", ",", "type", "=", "\"train\"", ")", ":", "\n", "        ", "if", "type", "==", "\"train\"", ":", "\n", "            ", "bx", ",", "by", "=", "self", ".", "ar_data", ".", "train", ".", "next_batch", "(", "batch_size", "=", "bs", ")", "\n", "", "elif", "type", "==", "\"test\"", ":", "\n", "            ", "bx", ",", "by", "=", "self", ".", "ar_data", ".", "test", ".", "next_batch", "(", "batch_size", "=", "bs", ")", "\n", "", "else", ":", "\n", "            ", "bx", ",", "by", "=", "self", ".", "ar_data", ".", "val", ".", "next_batch", "(", "batch_size", "=", "bs", ")", "\n", "\n", "\n", "", "return", "torch", ".", "tensor", "(", "bx", ")", ".", "permute", "(", "1", ",", "0", ")", ".", "long", "(", ")", ",", "torch", ".", "tensor", "(", "by", ")", ".", "long", "(", ")", "\n", "\n", "", "", "class", "Dataset", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "self", ".", "_x", "=", "x", "\n", "self", ".", "_y", "=", "y", "\n", "self", ".", "_epoch_completed", "=", "0", "\n", "self", ".", "_index_in_epoch", "=", "0", "\n", "self", ".", "_num_examples", "=", "self", ".", "x", ".", "shape", "[", "0", "]", "\n", "self", ".", "perm", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "self", ".", "_num_examples", ")", ")", "\n", "\n", "", "@", "property", "\n", "def", "x", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_x", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.number_arecall.number_arecall.generate_one2": [[66, 91], ["numpy.zeros", "range", "random.choice", "chr", "chr", "number_arecall.get_one_hot2", "number_arecall.get_one_hot2", "number_arecall.get_one_hot2", "number_arecall.get_one_hot2", "random.randint", "random.randint", "number_arecall.get_one_hot2", "number_arecall.get_one_hot2", "list", "random.randint", "chr", "chr", "d.keys", "ord", "ord", "ord", "ord"], "function", ["home.repos.pwc.inspect_result.thaihungle_SAM.number_arecall.number_arecall.get_one_hot2", "home.repos.pwc.inspect_result.thaihungle_SAM.number_arecall.number_arecall.get_one_hot2", "home.repos.pwc.inspect_result.thaihungle_SAM.number_arecall.number_arecall.get_one_hot2", "home.repos.pwc.inspect_result.thaihungle_SAM.number_arecall.number_arecall.get_one_hot2", "home.repos.pwc.inspect_result.thaihungle_SAM.number_arecall.number_arecall.get_one_hot2", "home.repos.pwc.inspect_result.thaihungle_SAM.number_arecall.number_arecall.get_one_hot2"], ["", "@", "property", "\n", "def", "y", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_y", "\n", "\n", "", "@", "property", "\n", "def", "num_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_examples", "\n", "\n", "", "def", "next_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "isinstance", "(", "batch_size", ",", "int", ")", ":", "\n", "            ", "assert", "batch_size", "<=", "self", ".", "_num_examples", "\n", "start", "=", "self", ".", "_index_in_epoch", "\n", "self", ".", "_index_in_epoch", "+=", "batch_size", "\n", "if", "self", ".", "_index_in_epoch", ">=", "self", ".", "num_examples", ":", "\n", "                ", "self", ".", "_epoch_completed", "+=", "1", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "perm", ")", "\n", "start", "=", "0", "\n", "self", ".", "_index_in_epoch", "=", "batch_size", "\n", "", "end", "=", "self", ".", "_index_in_epoch", "\n", "return", "self", ".", "_x", "[", "self", ".", "perm", "[", "start", ":", "end", "]", "]", ",", "self", ".", "_y", "[", "self", ".", "perm", "[", "start", ":", "end", "]", "]", "\n", "", "else", ":", "\n", "            ", "start", ",", "end", "=", "batch_size", "[", "0", "]", ",", "batch_size", "[", "1", "]", "\n", "return", "self", ".", "_x", "[", "self", ".", "perm", "[", "start", ":", "end", "]", "]", ",", "self", ".", "_y", "[", "self", ".", "perm", "[", "start", ":", "end", "]", "]", "\n", "\n", "", "", "", "import", "collections", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.data_preprocess.preprocess.parse_all": [[22, 66], ["print", "enumerate", "os.path.exists", "print", "print", "story_data.append", "print", "print", "preprocess.vectorize_stories", "int", "vectorized_data.append", "open", "vectorized_data.append", "print", "list", "preprocess.parse_stories", "astories.extend", "max", "max", "os.path.exists", "os.mkdir", "open", "pickle.dump", "FORMAT_STR.format", "pickle.load", "filter", "len", "print", "print", "os.path.join", "os.listdir", "len", "len", "FORMAT_STR.format", "FORMAT_STR.format"], "function", ["home.repos.pwc.inspect_result.thaihungle_SAM.data_preprocess.preprocess.vectorize_stories", "home.repos.pwc.inspect_result.thaihungle_SAM.data_preprocess.preprocess.parse_stories"], ["def", "parse_all", "(", "data_path", ",", "task_ids", ",", "word2id", "=", "None", ",", "bsz", "=", "32", ",", "DATA_TYPES", "=", "[", "'train'", ",", "'valid'", ",", "'test'", "]", ",", "global_sentence_max", "=", "0", ",", "\n", "use_cache", "=", "True", ")", ":", "\n", "    ", "vectorized_data", ",", "story_data", ",", "global_story_max", "=", "[", "]", ",", "[", "]", ",", "0", "\n", "for", "data_type", "in", "DATA_TYPES", ":", "\n", "        ", "print", "(", "\"read {} ...\"", ".", "format", "(", "data_type", ")", ")", "\n", "cache_path", "=", "data_path", "+", "\"-pik/\"", "+", "FORMAT_STR", ".", "format", "(", "\"all\"", ")", "+", "data_type", "+", "\".pik\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_path", ")", "and", "use_cache", ":", "\n", "            ", "print", "(", "\"accessing cache_path: \"", ",", "cache_path", ")", "\n", "with", "open", "(", "cache_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "vectorized_data", ".", "append", "(", "pickle", ".", "load", "(", "f", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "astories", "=", "[", "]", "\n", "for", "task_id", "in", "task_ids", ":", "\n", "                ", "print", "(", "f\"===========\\nload task {task_id}\"", ")", "\n", "filenames", "=", "list", "(", "\n", "filter", "(", "lambda", "x", ":", "FORMAT_STR", ".", "format", "(", "task_id", ")", "in", "x", "and", "data_type", "in", "x", ",", "os", ".", "listdir", "(", "data_path", ")", ")", ")", "\n", "if", "len", "(", "filenames", ")", "==", "0", ":", "\n", "                    ", "print", "(", "\"filename not found for in listdir for {} and {}\"", ".", "format", "(", "task_id", ",", "data_type", ")", ")", "\n", "print", "(", "\"skipping ... \"", ")", "\n", "continue", "\n", "", "stories", ",", "sentence_max", ",", "story_max", ",", "word2id", "=", "parse_stories", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "filenames", "[", "0", "]", ")", ",", "word2id", ")", "\n", "astories", ".", "extend", "(", "stories", ")", "\n", "global_sentence_max", "=", "max", "(", "global_sentence_max", ",", "sentence_max", ")", "\n", "global_story_max", "=", "max", "(", "global_story_max", ",", "story_max", ")", "\n", "", "print", "(", "f\"{data_type} len: {len(astories)}\"", ")", "\n", "story_data", ".", "append", "(", "astories", ")", "\n", "\n", "\n", "", "", "if", "vectorized_data", ":", "\n", "        ", "return", "vectorized_data", "+", "[", "vectorized_data", "[", "0", "]", "[", "4", "]", "]", "\n", "", "else", ":", "\n", "        ", "for", "i", ",", "data_type", "in", "enumerate", "(", "DATA_TYPES", ")", ":", "\n", "            ", "print", "(", "\"vectorize {} ...\"", ".", "format", "(", "data_type", ")", ")", "\n", "print", "(", "f\"len dic: {len(word2id)}\"", ")", "\n", "cache_dir", "=", "data_path", "+", "\"-pik/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_dir", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "cache_dir", ")", "\n", "", "cache_path", "=", "cache_dir", "+", "FORMAT_STR", ".", "format", "(", "\"all\"", ")", "+", "data_type", "+", "\".pik\"", "\n", "S", ",", "S_len", ",", "Q", ",", "A", "=", "vectorize_stories", "(", "story_data", "[", "i", "]", ",", "global_sentence_max", ",", "global_story_max", ",", "word2id", ",", "-", "1", ")", "\n", "n", "=", "int", "(", "(", "S", ".", "shape", "[", "0", "]", "/", "bsz", ")", "*", "bsz", ")", "\n", "with", "open", "(", "cache_path", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "(", "S", "[", ":", "n", "]", ",", "S_len", "[", ":", "n", "]", ",", "Q", "[", ":", "n", "]", ",", "A", "[", ":", "n", "]", ",", "word2id", ")", ",", "f", ")", "\n", "", "vectorized_data", ".", "append", "(", "(", "S", "[", ":", "n", "]", ",", "S_len", "[", ":", "n", "]", ",", "Q", "[", ":", "n", "]", ",", "A", "[", ":", "n", "]", ",", "word2id", ")", ")", "\n", "", "return", "vectorized_data", "+", "[", "word2id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.data_preprocess.preprocess.parse": [[67, 105], ["print", "enumerate", "os.path.exists", "print", "list", "preprocess.parse_stories", "story_data.append", "max", "max", "print", "preprocess.vectorize_stories", "int", "vectorized_data.append", "open", "vectorized_data.append", "filter", "len", "print", "print", "os.path.join", "os.path.exists", "os.mkdir", "open", "pickle.dump", "FORMAT_STR.format", "pickle.load", "os.listdir", "FORMAT_STR.format", "FORMAT_STR.format"], "function", ["home.repos.pwc.inspect_result.thaihungle_SAM.data_preprocess.preprocess.parse_stories", "home.repos.pwc.inspect_result.thaihungle_SAM.data_preprocess.preprocess.vectorize_stories"], ["", "", "def", "parse", "(", "data_path", ",", "task_id", ",", "word2id", "=", "None", ",", "bsz", "=", "32", ",", "DATA_TYPES", "=", "[", "'train'", ",", "'valid'", ",", "'test'", "]", ",", "global_sentence_max", "=", "0", ",", "\n", "use_cache", "=", "True", ",", "cache_dir_ext", "=", "\"\"", ")", ":", "\n", "\n", "    ", "vectorized_data", ",", "story_data", ",", "global_story_max", "=", "[", "]", ",", "[", "]", ",", "0", "\n", "for", "data_type", "in", "DATA_TYPES", ":", "\n", "        ", "print", "(", "\"read {} ...\"", ".", "format", "(", "data_type", ")", ")", "\n", "cache_path", "=", "data_path", "+", "f\"-pik{cache_dir_ext}/\"", "+", "FORMAT_STR", ".", "format", "(", "task_id", ")", "+", "data_type", "+", "\".pik\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_path", ")", "and", "use_cache", ":", "\n", "            ", "print", "(", "\"accessing cache_path: \"", ",", "cache_path", ")", "\n", "with", "open", "(", "cache_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "vectorized_data", ".", "append", "(", "pickle", ".", "load", "(", "f", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "filenames", "=", "list", "(", "\n", "filter", "(", "lambda", "x", ":", "FORMAT_STR", ".", "format", "(", "task_id", ")", "in", "x", "and", "data_type", "in", "x", ",", "os", ".", "listdir", "(", "data_path", ")", ")", ")", "\n", "if", "len", "(", "filenames", ")", "==", "0", ":", "\n", "                ", "print", "(", "\"filename not found for in listdir for {} and {}\"", ".", "format", "(", "task_id", ",", "data_type", ")", ")", "\n", "print", "(", "\"skipping ... \"", ")", "\n", "continue", "\n", "", "stories", ",", "sentence_max", ",", "story_max", ",", "word2id", "=", "parse_stories", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "filenames", "[", "0", "]", ")", ",", "word2id", ")", "\n", "story_data", ".", "append", "(", "stories", ")", "\n", "global_sentence_max", "=", "max", "(", "global_sentence_max", ",", "sentence_max", ")", "\n", "global_story_max", "=", "max", "(", "global_story_max", ",", "story_max", ")", "\n", "\n", "", "", "if", "vectorized_data", ":", "\n", "        ", "return", "vectorized_data", "+", "[", "vectorized_data", "[", "0", "]", "[", "4", "]", "]", "\n", "", "else", ":", "\n", "        ", "for", "i", ",", "data_type", "in", "enumerate", "(", "DATA_TYPES", ")", ":", "\n", "            ", "print", "(", "\"vectorize {} ...\"", ".", "format", "(", "data_type", ")", ")", "\n", "cache_dir", "=", "data_path", "+", "f\"-pik{cache_dir_ext}/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_dir", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "cache_dir", ")", "\n", "", "cache_path", "=", "cache_dir", "+", "FORMAT_STR", ".", "format", "(", "task_id", ")", "+", "data_type", "+", "\".pik\"", "\n", "S", ",", "S_len", ",", "Q", ",", "A", "=", "vectorize_stories", "(", "story_data", "[", "i", "]", ",", "global_sentence_max", ",", "global_story_max", ",", "word2id", ",", "task_id", ")", "\n", "n", "=", "int", "(", "(", "S", ".", "shape", "[", "0", "]", "/", "bsz", ")", "*", "bsz", ")", "\n", "with", "open", "(", "cache_path", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "(", "S", "[", ":", "n", "]", ",", "S_len", "[", ":", "n", "]", ",", "Q", "[", ":", "n", "]", ",", "A", "[", ":", "n", "]", ",", "word2id", ")", ",", "f", ")", "\n", "", "vectorized_data", ".", "append", "(", "(", "S", "[", ":", "n", "]", ",", "S_len", "[", ":", "n", "]", ",", "Q", "[", ":", "n", "]", ",", "A", "[", ":", "n", "]", ",", "word2id", ")", ")", "\n", "", "return", "vectorized_data", "+", "[", "word2id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.data_preprocess.preprocess.parse_stories": [[107, 170], ["print", "print", "print", "print", "open", "f.readlines", "line.strip.strip", "line.strip.split", "int", "print", "set", "print", "set", "print", "line.strip.split", "preprocess.tokenize", "stories.append", "story.append", "preprocess.tokenize", "story.append", "functools.reduce", "set.add", "list", "functools.reduce", "set.add", "list", "len", "len", "len", "len", "set.update", "enumerate", "set.update", "len", "len", "len", "answer.lower"], "function", ["home.repos.pwc.inspect_result.thaihungle_SAM.data_preprocess.preprocess.tokenize", "home.repos.pwc.inspect_result.thaihungle_SAM.data_preprocess.preprocess.tokenize"], ["", "", "def", "parse_stories", "(", "filename", ",", "word2id", "=", "None", ")", ":", "\n", "# Open file, get lines", "\n", "    ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "# Go through lines, building story sets", "\n", "", "print", "(", "\"go through lines\"", ")", "\n", "stories", ",", "story", "=", "[", "]", ",", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "nid", ",", "line", "=", "line", ".", "split", "(", "' '", ",", "1", ")", "\n", "nid", "=", "int", "(", "nid", ")", "\n", "if", "nid", "==", "1", ":", "\n", "            ", "story", "=", "[", "]", "\n", "", "if", "'\\t'", "in", "line", ":", "\n", "            ", "query", ",", "answer", ",", "supporting", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "query", "=", "tokenize", "(", "query", ")", "\n", "substory", "=", "[", "x", "for", "x", "in", "story", "if", "x", "]", "\n", "stories", ".", "append", "(", "(", "substory", ",", "query", ",", "answer", ".", "lower", "(", ")", ")", ")", "\n", "story", ".", "append", "(", "''", ")", "\n", "", "else", ":", "\n", "            ", "sentence", "=", "tokenize", "(", "line", ")", "\n", "story", ".", "append", "(", "sentence", ")", "\n", "", "", "print", "(", "filename", ")", "\n", "if", "'19'", "in", "filename", ":", "\n", "        ", "print", "(", "'ssss'", ")", "\n", "# Build Vocabulary", "\n", "", "print", "(", "\"build vocab\"", ")", "\n", "if", "not", "word2id", ":", "\n", "        ", "vocab", "=", "set", "(", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "[", "q", "for", "(", "_", ",", "q", ",", "_", ")", "in", "stories", "]", ")", ")", "\n", "print", "(", "\"reduce done!\"", ")", "\n", "for", "(", "s", ",", "_", ",", "_", ")", "in", "stories", ":", "\n", "            ", "for", "sentence", "in", "s", ":", "\n", "                ", "vocab", ".", "update", "(", "sentence", ")", "\n", "", "", "for", "(", "_", ",", "_", ",", "a", ")", "in", "stories", ":", "\n", "            ", "vocab", ".", "add", "(", "a", ")", "\n", "", "id2word", "=", "[", "'PAD_ID'", "]", "+", "list", "(", "vocab", ")", "\n", "word2id", "=", "{", "w", ":", "i", "for", "i", ",", "w", "in", "enumerate", "(", "id2word", ")", "}", "\n", "", "else", ":", "\n", "        ", "vocab", "=", "set", "(", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "[", "q", "for", "(", "_", ",", "q", ",", "_", ")", "in", "stories", "]", ")", ")", "\n", "print", "(", "\"reduce done!\"", ")", "\n", "for", "(", "s", ",", "_", ",", "_", ")", "in", "stories", ":", "\n", "            ", "for", "sentence", "in", "s", ":", "\n", "                ", "vocab", ".", "update", "(", "sentence", ")", "\n", "", "", "for", "(", "_", ",", "_", ",", "a", ")", "in", "stories", ":", "\n", "            ", "vocab", ".", "add", "(", "a", ")", "\n", "", "id2word", "=", "[", "'PAD_ID'", "]", "+", "list", "(", "vocab", ")", "\n", "for", "v", "in", "id2word", ":", "\n", "            ", "if", "v", "not", "in", "word2id", ":", "\n", "                ", "word2id", "[", "v", "]", "=", "len", "(", "word2id", ")", "\n", "# Get Maximum Lengths", "\n", "", "", "", "print", "(", "\"get max lengths\"", ")", "\n", "sentence_max", ",", "story_max", "=", "0", ",", "0", "\n", "for", "(", "s", ",", "q", ",", "_", ")", "in", "stories", ":", "\n", "        ", "if", "len", "(", "q", ")", ">", "sentence_max", ":", "\n", "            ", "sentence_max", "=", "len", "(", "q", ")", "\n", "", "if", "len", "(", "s", ")", ">", "story_max", ":", "\n", "            ", "story_max", "=", "len", "(", "s", ")", "\n", "", "for", "sentence", "in", "s", ":", "\n", "            ", "if", "len", "(", "sentence", ")", ">", "sentence_max", ":", "\n", "                ", "sentence_max", "=", "len", "(", "sentence", ")", "\n", "\n", "", "", "", "return", "stories", ",", "sentence_max", ",", "story_max", ",", "word2id", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.data_preprocess.preprocess.vectorize_stories": [[172, 208], ["numpy.zeros", "numpy.zeros", "enumerate", "min", "min", "numpy.zeros", "numpy.zeros", "range", "len", "range", "int", "len", "len", "len", "range", "len", "len", "len", "int", "len"], "function", ["None"], ["", "def", "vectorize_stories", "(", "stories", ",", "sentence_max", ",", "story_max", ",", "word2id", ",", "task_id", ")", ":", "\n", "# Check Story Max", "\n", "    ", "if", "task_id", "==", "3", "or", "int", "(", "task_id", ")", "<", "0", ":", "\n", "        ", "story_max", "=", "min", "(", "story_max", ",", "130", ")", "\n", "", "else", ":", "\n", "        ", "story_max", "=", "min", "(", "story_max", ",", "70", ")", "\n", "\n", "# Allocate Arrays", "\n", "", "S", "=", "np", ".", "zeros", "(", "[", "len", "(", "stories", ")", ",", "story_max", ",", "sentence_max", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "Q", "=", "np", ".", "zeros", "(", "[", "len", "(", "stories", ")", ",", "sentence_max", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "S_len", ",", "A", "=", "np", ".", "zeros", "(", "[", "len", "(", "stories", ")", "]", ",", "dtype", "=", "np", ".", "int32", ")", ",", "np", ".", "zeros", "(", "[", "len", "(", "stories", ")", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# Fill Arrays", "\n", "for", "i", ",", "(", "s", ",", "q", ",", "a", ")", "in", "enumerate", "(", "stories", ")", ":", "\n", "# Check S Length => All but Task 3 are limited to 70 sentences", "\n", "        ", "if", "task_id", "==", "3", "or", "int", "(", "task_id", ")", "<", "0", ":", "\n", "            ", "s", "=", "s", "[", "-", "130", ":", "]", "\n", "", "else", ":", "\n", "            ", "s", "=", "s", "[", "-", "70", ":", "]", "\n", "\n", "# Populate story", "\n", "", "for", "j", "in", "range", "(", "len", "(", "s", ")", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "len", "(", "s", "[", "j", "]", ")", ")", ":", "\n", "                ", "S", "[", "i", "]", "[", "j", "]", "[", "k", "]", "=", "word2id", "[", "s", "[", "j", "]", "[", "k", "]", "]", "\n", "\n", "# Populate story length", "\n", "", "", "S_len", "[", "i", "]", "=", "len", "(", "s", ")", "\n", "\n", "# Populate Question", "\n", "for", "j", "in", "range", "(", "len", "(", "q", ")", ")", ":", "\n", "            ", "Q", "[", "i", "]", "[", "j", "]", "=", "word2id", "[", "q", "[", "j", "]", "]", "\n", "\n", "# Populate Answer", "\n", "", "A", "[", "i", "]", "=", "word2id", "[", "a", "]", "\n", "\n", "", "return", "S", ",", "S_len", ",", "Q", ",", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.data_preprocess.preprocess.tokenize": [[210, 215], ["token.strip().lower", "re.split", "token.strip", "token.strip"], "function", ["None"], ["", "def", "tokenize", "(", "sentence", ")", ":", "\n", "    ", "\"\"\"\n    Tokenize a string by splitting on non-word characters and stripping whitespace.\n    \"\"\"", "\n", "return", "[", "token", ".", "strip", "(", ")", ".", "lower", "(", ")", "for", "token", "in", "re", ".", "split", "(", "SPLIT_RE", ",", "sentence", ")", "if", "token", ".", "strip", "(", ")", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.controller.LSTMController.__init__": [[10, 30], ["torch.nn.Module.__init__", "torch.nn.LSTM", "torch.cuda.is_available", "controller.LSTMController.reset_parameters", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn().cuda", "torch.randn().cuda", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm.NTM.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_inputs", ",", "num_outputs", ",", "num_layers", ")", ":", "\n", "        ", "super", "(", "LSTMController", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_inputs", "=", "num_inputs", "\n", "self", ".", "num_outputs", "=", "num_outputs", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "num_inputs", ",", "\n", "hidden_size", "=", "num_outputs", ",", "\n", "num_layers", "=", "num_layers", ")", "\n", "\n", "# The hidden state is a learned parameter", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "lstm_h_bias", "=", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_layers", ",", "1", ",", "self", ".", "num_outputs", ")", ".", "cuda", "(", ")", "*", "0.05", ")", "\n", "self", ".", "lstm_c_bias", "=", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_layers", ",", "1", ",", "self", ".", "num_outputs", ")", ".", "cuda", "(", ")", "*", "0.05", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "lstm_h_bias", "=", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_layers", ",", "1", ",", "self", ".", "num_outputs", ")", "*", "0.05", ")", "\n", "self", ".", "lstm_c_bias", "=", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_layers", ",", "1", ",", "self", ".", "num_outputs", ")", "*", "0.05", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.controller.LSTMController.create_new_state": [[31, 36], ["controller.LSTMController.lstm_h_bias.clone().repeat", "controller.LSTMController.lstm_c_bias.clone().repeat", "controller.LSTMController.lstm_h_bias.clone", "controller.LSTMController.lstm_c_bias.clone"], "methods", ["None"], ["", "def", "create_new_state", "(", "self", ",", "batch_size", ")", ":", "\n", "# Dimension: (num_layers * num_directions, batch, hidden_size)", "\n", "        ", "lstm_h", "=", "self", ".", "lstm_h_bias", ".", "clone", "(", ")", ".", "repeat", "(", "1", ",", "batch_size", ",", "1", ")", "\n", "lstm_c", "=", "self", ".", "lstm_c_bias", ".", "clone", "(", ")", ".", "repeat", "(", "1", ",", "batch_size", ",", "1", ")", "\n", "return", "lstm_h", ",", "lstm_c", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.controller.LSTMController.reset_parameters": [[37, 44], ["controller.LSTMController.lstm.parameters", "p.dim", "torch.nn.init.constant_", "torch.nn.init.uniform_", "numpy.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "lstm", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "p", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "stdev", "=", "5", "/", "(", "np", ".", "sqrt", "(", "self", ".", "num_inputs", "+", "self", ".", "num_outputs", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "p", ",", "-", "stdev", ",", "stdev", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.controller.LSTMController.size": [[45, 47], ["None"], "methods", ["None"], ["", "", "", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inputs", ",", "self", ".", "num_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.controller.LSTMController.forward": [[48, 52], ["x.unsqueeze.unsqueeze.unsqueeze", "controller.LSTMController.lstm", "outp.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "prev_state", ")", ":", "\n", "        ", "x", "=", "x", ".", "unsqueeze", "(", "0", ")", "\n", "outp", ",", "state", "=", "self", ".", "lstm", "(", "x", ",", "prev_state", ")", "\n", "return", "outp", ".", "squeeze", "(", "0", ")", ",", "state", "", "", "", ""]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem.NTMMemory.__init__": [[23, 45], ["torch.nn.Module.__init__", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "ntm_mem.NTMMemory.register_buffer", "ntm_mem.NTMMemory.register_buffer", "numpy.sqrt", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["def", "__init__", "(", "self", ",", "N", ",", "M", ")", ":", "\n", "        ", "\"\"\"Initialize the NTM Memory matrix.\n        The memory's dimensions are (batch_size x N x M).\n        Each batch has it's own memory matrix.\n        :param N: Number of rows in the memory.\n        :param M: Number of columns/features in the memory.\n        \"\"\"", "\n", "super", "(", "NTMMemory", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "N", "=", "N", "\n", "self", ".", "M", "=", "M", "\n", "\n", "# The memory bias allows the heads to learn how to initially address", "\n", "# memory locations by content", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'mem_bias'", ",", "torch", ".", "Tensor", "(", "N", ",", "M", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'mem_bias'", ",", "torch", ".", "Tensor", "(", "N", ",", "M", ")", ")", "\n", "\n", "# Initialize memory bias", "\n", "", "stdev", "=", "1", "/", "(", "np", ".", "sqrt", "(", "N", "+", "M", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "mem_bias", ",", "-", "stdev", ",", "stdev", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem.NTMMemory.reset": [[46, 50], ["ntm_mem.NTMMemory.mem_bias.clone().repeat", "ntm_mem.NTMMemory.mem_bias.clone"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"Initialize memory from bias, for start-of-sequence.\"\"\"", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "memory", "=", "self", ".", "mem_bias", ".", "clone", "(", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem.NTMMemory.size": [[51, 53], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "N", ",", "self", ".", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem.NTMMemory.read": [[54, 57], ["torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "w.unsqueeze"], "methods", ["None"], ["", "def", "read", "(", "self", ",", "w", ")", ":", "\n", "        ", "\"\"\"Read from memory (according to section 3.1).\"\"\"", "\n", "return", "torch", ".", "matmul", "(", "w", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "memory", ")", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem.NTMMemory.write": [[58, 68], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "w.unsqueeze", "e.unsqueeze", "w.unsqueeze", "a.unsqueeze", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "write", "(", "self", ",", "w", ",", "e", ",", "a", ")", ":", "\n", "        ", "\"\"\"write to memory (according to section 3.2).\"\"\"", "\n", "self", ".", "prev_mem", "=", "self", ".", "memory", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "memory", "=", "torch", ".", "Tensor", "(", "self", ".", "batch_size", ",", "self", ".", "N", ",", "self", ".", "M", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "memory", "=", "torch", ".", "Tensor", "(", "self", ".", "batch_size", ",", "self", ".", "N", ",", "self", ".", "M", ")", "\n", "", "erase", "=", "torch", ".", "matmul", "(", "w", ".", "unsqueeze", "(", "-", "1", ")", ",", "e", ".", "unsqueeze", "(", "1", ")", ")", "\n", "add", "=", "torch", ".", "matmul", "(", "w", ".", "unsqueeze", "(", "-", "1", ")", ",", "a", ".", "unsqueeze", "(", "1", ")", ")", "\n", "self", ".", "memory", "=", "self", ".", "prev_mem", "*", "(", "1", "-", "erase", ")", "+", "add", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem.NTMMemory.address": [[69, 88], ["ntm_mem.NTMMemory._similarity", "ntm_mem.NTMMemory._interpolate", "ntm_mem.NTMMemory._shift", "ntm_mem.NTMMemory._sharpen"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem.NTMMemory._similarity", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem.NTMMemory._interpolate", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem.NTMMemory._shift", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem.NTMMemory._sharpen"], ["", "def", "address", "(", "self", ",", "k", ",", "\u03b2", ",", "g", ",", "s", ",", "\u03b3", ",", "w_prev", ")", ":", "\n", "        ", "\"\"\"NTM Addressing (according to section 3.3).\n        Returns a softmax weighting over the rows of the memory matrix.\n        :param k: The key vector.\n        :param \u03b2: The key strength (focus).\n        :param g: Scalar interpolation gate (with previous weighting).\n        :param s: Shift weighting.\n        :param \u03b3: Sharpen weighting scalar.\n        :param w_prev: The weighting produced in the previous time step.\n        \"\"\"", "\n", "# Content focus", "\n", "wc", "=", "self", ".", "_similarity", "(", "k", ",", "\u03b2", ")", "\n", "\n", "# Location focus", "\n", "wg", "=", "self", ".", "_interpolate", "(", "w_prev", ",", "wc", ",", "g", ")", "\n", "\u0175", "=", "self", ".", "_shift", "(", "wg", ",", "s", ")", "\n", "w", "=", "self", ".", "_sharpen", "(", "\u0175", ",", "\u03b3", ")", "\n", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem.NTMMemory._similarity": [[89, 93], ["k.view.view.view", "torch.softmax", "torch.softmax", "torch.cosine_similarity", "torch.cosine_similarity"], "methods", ["None"], ["", "def", "_similarity", "(", "self", ",", "k", ",", "\u03b2", ")", ":", "\n", "        ", "k", "=", "k", ".", "view", "(", "self", ".", "batch_size", ",", "1", ",", "-", "1", ")", "\n", "w", "=", "F", ".", "softmax", "(", "\u03b2", "*", "F", ".", "cosine_similarity", "(", "self", ".", "memory", "+", "1e-16", ",", "k", "+", "1e-16", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem.NTMMemory._interpolate": [[94, 96], ["None"], "methods", ["None"], ["", "def", "_interpolate", "(", "self", ",", "w_prev", ",", "wc", ",", "g", ")", ":", "\n", "        ", "return", "g", "*", "wc", "+", "(", "1", "-", "g", ")", "*", "w_prev", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem.NTMMemory._shift": [[97, 100], ["ntm_mem._convolve", "wg.size"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem._convolve", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size"], ["", "def", "_shift", "(", "self", ",", "wg", ",", "s", ")", ":", "\n", "        ", "result", "=", "_convolve", "(", "wg", ",", "s", ",", "wg", ".", "size", "(", "0", ")", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem.NTMMemory._shift_slow": [[101, 109], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "range", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "wg.size", "ntm_mem._convolve_slow", "wg.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "wg.size"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem._convolve_slow", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size"], ["", "def", "_shift_slow", "(", "self", ",", "wg", ",", "s", ")", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "result", "=", "torch", ".", "zeros", "(", "wg", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "result", "=", "torch", ".", "zeros", "(", "wg", ".", "size", "(", ")", ")", "\n", "", "for", "b", "in", "range", "(", "wg", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "result", "[", "b", "]", "=", "_convolve_slow", "(", "wg", "[", "b", "]", ",", "s", "[", "b", "]", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem.NTMMemory._sharpen": [[110, 114], ["torch.div", "torch.div", "torch.div", "torch.div", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "_sharpen", "(", "self", ",", "\u0175", ",", "\u03b3", ")", ":", "\n", "        ", "w", "=", "\u0175", "**", "\u03b3", "\n", "w", "=", "torch", ".", "div", "(", "w", ",", "torch", ".", "sum", "(", "w", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "+", "1e-16", ")", "\n", "return", "w", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem._convolve": [[8, 13], ["torch.cat", "torch.cat", "torch.conv1d", "torch.cat.view", "s.view", "range", "range"], "function", ["None"], ["def", "_convolve", "(", "w", ",", "s", ",", "b", ")", ":", "\n", "    ", "\"\"\"Circular convolution implementation.\"\"\"", "\n", "t", "=", "torch", ".", "cat", "(", "[", "w", "[", ":", ",", "-", "1", ":", "]", ",", "w", ",", "w", "[", ":", ",", ":", "1", "]", "]", ",", "1", ")", "\n", "c", "=", "F", ".", "conv1d", "(", "t", ".", "view", "(", "b", ",", "1", ",", "-", "1", ")", ",", "s", ".", "view", "(", "b", ",", "1", ",", "-", "1", ")", ")", "[", "range", "(", "b", ")", ",", "range", "(", "b", ")", ",", ":", "]", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem._convolve_slow": [[14, 20], ["torch.cat", "torch.cat", "torch.conv1d().view", "s.size", "torch.conv1d", "torch.cat.view", "s.view"], "function", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size"], ["", "def", "_convolve_slow", "(", "w", ",", "s", ")", ":", "\n", "    ", "\"\"\"Circular convolution implementation.\"\"\"", "\n", "assert", "s", ".", "size", "(", "0", ")", "==", "3", "\n", "t", "=", "torch", ".", "cat", "(", "[", "w", "[", "-", "1", ":", "]", ",", "w", ",", "w", "[", ":", "1", "]", "]", ")", "\n", "c", "=", "F", ".", "conv1d", "(", "t", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", ",", "s", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_att_baseline.EncoderRNN.__init__": [[10, 19], ["torch.Module.__init__", "torch.GRU", "torch.GRU", "torch.GRU", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "emb", "=", "False", ")", ":", "\n", "        ", "super", "(", "EncoderRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "if", "emb", ":", "\n", "            ", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "input_size", ",", "hidden_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embedding", "=", "nn", ".", "Linear", "(", "input_size", ",", "hidden_size", ")", "\n", "\n", "", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "hidden_size", ",", "hidden_size", ",", "batch_first", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_att_baseline.EncoderRNN.forward": [[20, 25], ["lstm_att_baseline.EncoderRNN.embedding", "lstm_att_baseline.EncoderRNN.gru", "output.unsqueeze", "output.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "hidden", ")", ":", "\n", "        ", "embedded", "=", "self", ".", "embedding", "(", "input", ")", "\n", "output", "=", "embedded", "\n", "output", ",", "hidden", "=", "self", ".", "gru", "(", "output", ".", "unsqueeze", "(", "0", ")", ",", "hidden", ")", "\n", "return", "output", ".", "squeeze", "(", "0", ")", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_att_baseline.EncoderRNN.initHidden": [[26, 28], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "initHidden", "(", "self", ",", "bs", ")", ":", "\n", "        ", "return", "torch", ".", "zeros", "(", "1", ",", "bs", ",", "self", ".", "hidden_size", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_att_baseline.AttnDecoderRNN.__init__": [[31, 46], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.GRU", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ",", "hidden_size", ",", "dropout_p", "=", "0.1", ",", "emb", "=", "False", ",", "max_length", "=", "100", ")", ":", "\n", "        ", "super", "(", "AttnDecoderRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "dropout_p", "=", "dropout_p", "\n", "self", ".", "max_length", "=", "max_length", "\n", "if", "emb", ":", "\n", "            ", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "output_size", ",", "hidden_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embedding", "=", "nn", ".", "Linear", "(", "output_size", ",", "hidden_size", ")", "\n", "", "self", ".", "attn", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", "*", "2", ",", "self", ".", "max_length", ")", "\n", "self", ".", "attn_combine", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", "*", "2", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout_p", ")", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", ",", "batch_first", "=", "False", ")", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_att_baseline.AttnDecoderRNN.forward": [[47, 65], ["lstm_att_baseline.AttnDecoderRNN.embedding", "lstm_att_baseline.AttnDecoderRNN.dropout", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lstm_att_baseline.AttnDecoderRNN.attn_combine().unsqueeze", "torch.relu", "torch.relu", "torch.relu", "lstm_att_baseline.AttnDecoderRNN.gru", "lstm_att_baseline.AttnDecoderRNN.out", "lstm_att_baseline.AttnDecoderRNN.attn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "lstm_att_baseline.AttnDecoderRNN.attn_combine", "attn_weights[].unsqueeze", "encoder_outputs.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "hidden", ",", "encoder_outputs", ")", ":", "\n", "        ", "embedded", "=", "self", ".", "embedding", "(", "input", ")", "\n", "embedded", "=", "self", ".", "dropout", "(", "embedded", ")", "\n", "attn_weights", "=", "F", ".", "softmax", "(", "\n", "self", ".", "attn", "(", "torch", ".", "cat", "(", "(", "embedded", ",", "hidden", "[", "0", "]", ")", ",", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "# print(attn_weights.shape)", "\n", "# print(encoder_outputs.shape)", "\n", "attn_applied", "=", "torch", ".", "bmm", "(", "attn_weights", "[", ":", ",", ":", "encoder_outputs", ".", "shape", "[", "0", "]", "]", ".", "unsqueeze", "(", "1", ")", ",", "\n", "encoder_outputs", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "(", "embedded", ",", "attn_applied", ")", ",", "1", ")", "\n", "output", "=", "self", ".", "attn_combine", "(", "output", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "output", "=", "F", ".", "relu", "(", "output", ")", "\n", "output", ",", "hidden", "=", "self", ".", "gru", "(", "output", ",", "hidden", ")", "\n", "\n", "output", "=", "self", ".", "out", "(", "output", "[", "0", "]", ")", "\n", "return", "output", ",", "hidden", ",", "attn_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_att_baseline.AttnDecoderRNN.initHidden": [[66, 68], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "initHidden", "(", "self", ",", "bs", ")", ":", "\n", "        ", "return", "torch", ".", "zeros", "(", "1", ",", "bs", ",", "self", ".", "hidden_size", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_att_baseline.AttnEncoderDecoder.__init__": [[72, 77], ["torch.Module.__init__", "lstm_att_baseline.EncoderRNN", "lstm_att_baseline.AttnDecoderRNN"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "indim", ",", "odim", ",", "hidden_size", ",", "max_att_len", "=", "100", ",", "dropout_p", "=", "0.1", ",", "emb_enc", "=", "False", ",", "emb_dec", "=", "False", ")", ":", "\n", "        ", "super", "(", "AttnEncoderDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "EncoderRNN", "(", "indim", ",", "hidden_size", ",", "emb_enc", ")", "\n", "self", ".", "decoder", "=", "AttnDecoderRNN", "(", "odim", ",", "hidden_size", ",", "dropout_p", ",", "emb_dec", ",", "max_length", "=", "max_att_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_att_baseline.AttnEncoderDecoder.forward": [[79, 99], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "lstm_att_baseline.AttnEncoderDecoder.encoder", "range", "lstm_att_baseline.AttnEncoderDecoder.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "encode_inputs", ",", "target_length", ",", "constant_decode_input", "=", "True", ")", ":", "\n", "        ", "encoder_outputs", "=", "torch", ".", "zeros", "(", "encode_inputs", ".", "shape", "[", "0", "]", ",", "encode_inputs", ".", "shape", "[", "1", "]", ",", "self", ".", "encoder", ".", "hidden_size", ",", "device", "=", "device", ")", "\n", "\n", "for", "ei", "in", "range", "(", "encode_inputs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "encoder_output", ",", "self", ".", "previous_state", "=", "self", ".", "encoder", "(", "\n", "encode_inputs", "[", "ei", "]", ",", "self", ".", "previous_state", ")", "\n", "encoder_outputs", "[", "ei", "]", "=", "encoder_output", "\n", "\n", "", "decoder_input", "=", "torch", ".", "zeros", "(", "encode_inputs", ".", "shape", "[", "1", "]", ",", "self", ".", "decoder", ".", "output_size", ",", "device", "=", "device", ")", "\n", "\n", "decoder_hidden", "=", "self", ".", "previous_state", "\n", "\n", "decoder_outputs", "=", "torch", ".", "zeros", "(", "target_length", ",", "encode_inputs", ".", "shape", "[", "1", "]", ",", "self", ".", "decoder", ".", "output_size", ",", "device", "=", "device", ")", "\n", "\n", "if", "constant_decode_input", ":", "\n", "# Teacher forcing: Feed the target as the next input", "\n", "            ", "for", "di", "in", "range", "(", "target_length", ")", ":", "\n", "                ", "decoder_outputs", "[", "di", "]", ",", "decoder_hidden", ",", "decoder_attention", "=", "self", ".", "decoder", "(", "\n", "decoder_input", ",", "decoder_hidden", ",", "encoder_outputs", ")", "\n", "", "", "return", "decoder_outputs", ",", "decoder_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_att_baseline.AttnEncoderDecoder.create_new_state": [[100, 102], ["lstm_att_baseline.AttnEncoderDecoder.encoder.initHidden"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_att_baseline.AttnDecoderRNN.initHidden"], ["", "def", "create_new_state", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "return", "self", ".", "encoder", ".", "initHidden", "(", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_att_baseline.AttnEncoderDecoder.init_sequence": [[103, 106], ["lstm_att_baseline.AttnEncoderDecoder.create_new_state"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.create_new_state"], ["", "def", "init_sequence", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"Initializing the state.\"\"\"", "\n", "self", ".", "previous_state", "=", "self", ".", "create_new_state", "(", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_att_baseline.AttnEncoderDecoder.calculate_num_params": [[107, 113], ["lstm_att_baseline.AttnEncoderDecoder.parameters", "p.data.view().size", "p.data.view"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size"], ["", "def", "calculate_num_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the total number of parameters.\"\"\"", "\n", "num_params", "=", "0", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "num_params", "+=", "p", ".", "data", ".", "view", "(", "-", "1", ")", ".", "size", "(", "0", ")", "\n", "", "return", "num_params", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.__init__": [[10, 32], ["torch.nn.Module.__init__", "torch.nn.LSTM", "torch.nn.Linear", "torch.cuda.is_available", "lstm_baseline.LSTMBaseline.reset_parameters", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn().cuda", "torch.randn().cuda", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm.NTM.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_inputs", ",", "num_hidden", ",", "num_outputs", ",", "num_layers", ")", ":", "\n", "        ", "super", "(", "LSTMBaseline", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_inputs", "=", "num_inputs", "\n", "self", ".", "num_hidden", "=", "num_hidden", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "num_inputs", ",", "\n", "hidden_size", "=", "num_hidden", ",", "\n", "num_layers", "=", "num_layers", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "num_hidden", ",", "num_outputs", ")", "\n", "\n", "# The hidden state is a learned parameter", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "lstm_h_bias", "=", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_layers", ",", "1", ",", "self", ".", "num_hidden", ")", ".", "cuda", "(", ")", "*", "0.05", ")", "\n", "self", ".", "lstm_c_bias", "=", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_layers", ",", "1", ",", "self", ".", "num_hidden", ")", ".", "cuda", "(", ")", "*", "0.05", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "lstm_h_bias", "=", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_layers", ",", "1", ",", "self", ".", "num_hidden", ")", "*", "0.05", ")", "\n", "self", ".", "lstm_c_bias", "=", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_layers", ",", "1", ",", "self", ".", "num_hidden", ")", "*", "0.05", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.create_new_state": [[33, 38], ["lstm_baseline.LSTMBaseline.lstm_h_bias.clone().repeat", "lstm_baseline.LSTMBaseline.lstm_c_bias.clone().repeat", "lstm_baseline.LSTMBaseline.lstm_h_bias.clone", "lstm_baseline.LSTMBaseline.lstm_c_bias.clone"], "methods", ["None"], ["", "def", "create_new_state", "(", "self", ",", "batch_size", ")", ":", "\n", "# Dimension: (num_layers * num_directions, batch, hidden_size)", "\n", "        ", "lstm_h", "=", "self", ".", "lstm_h_bias", ".", "clone", "(", ")", ".", "repeat", "(", "1", ",", "batch_size", ",", "1", ")", "\n", "lstm_c", "=", "self", ".", "lstm_c_bias", ".", "clone", "(", ")", ".", "repeat", "(", "1", ",", "batch_size", ",", "1", ")", "\n", "return", "lstm_h", ",", "lstm_c", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.reset_parameters": [[39, 46], ["lstm_baseline.LSTMBaseline.lstm.parameters", "p.dim", "torch.nn.init.constant_", "torch.nn.init.uniform_", "numpy.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "lstm", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "p", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "stdev", "=", "5", "/", "(", "np", ".", "sqrt", "(", "self", ".", "num_inputs", "+", "self", ".", "num_hidden", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "p", ",", "-", "stdev", ",", "stdev", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.init_sequence": [[47, 50], ["lstm_baseline.LSTMBaseline.create_new_state"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.create_new_state"], ["", "", "", "def", "init_sequence", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"Initializing the state.\"\"\"", "\n", "self", ".", "previous_state", "=", "self", ".", "create_new_state", "(", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size": [[51, 53], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inputs", ",", "self", ".", "num_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.forward": [[54, 59], ["x.unsqueeze.unsqueeze.unsqueeze", "lstm_baseline.LSTMBaseline.lstm", "lstm_baseline.LSTMBaseline.out", "lstm_baseline.LSTMBaseline.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "unsqueeze", "(", "0", ")", "\n", "outp", ",", "self", ".", "previous_state", "=", "self", ".", "lstm", "(", "x", ",", "self", ".", "previous_state", ")", "\n", "outp", "=", "self", ".", "out", "(", "outp", ")", "\n", "return", "outp", ".", "squeeze", "(", "0", ")", ",", "self", ".", "previous_state", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.calculate_num_params": [[60, 66], ["lstm_baseline.LSTMBaseline.parameters", "p.data.view().size", "p.data.view"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size"], ["", "def", "calculate_num_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the total number of parameters.\"\"\"", "\n", "num_params", "=", "0", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "num_params", "+=", "p", ".", "data", ".", "view", "(", "-", "1", ")", ".", "size", "(", "0", ")", "\n", "", "return", "num_params", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMHeadBase.__init__": [[40, 56], ["nn.Module.__init__", "memory.size"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size"], ["def", "__init__", "(", "self", ",", "memory", ",", "controller_size", ")", ":", "\n", "        ", "\"\"\"Initilize the read/write head.\n        :param memory: The :class:`NTMMemory` to be addressed by the head.\n        :param controller_size: The size of the internal representation.\n        \"\"\"", "\n", "super", "(", "NTMHeadBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "memory", "=", "memory", "\n", "self", ".", "N", ",", "self", ".", "M", "=", "memory", ".", "size", "(", ")", "\n", "self", ".", "controller_size", "=", "controller_size", "\n", "self", ".", "cs", "=", "[", "]", "\n", "self", ".", "program_weights", "=", "[", "]", "\n", "self", ".", "query_keys", "=", "[", "]", "\n", "self", ".", "query_strengths", "=", "[", "]", "\n", "self", ".", "data_weights", "=", "[", "]", "\n", "self", ".", "att_mode", "=", "\"kv\"", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMHeadBase.create_new_state": [[58, 60], ["None"], "methods", ["None"], ["", "def", "create_new_state", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMHeadBase.register_parameters": [[61, 63], ["None"], "methods", ["None"], ["", "def", "register_parameters", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMHeadBase.is_read_head": [[64, 66], ["None"], "methods", ["None"], ["", "def", "is_read_head", "(", "self", ")", ":", "\n", "        ", "return", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMHeadBase._address_memory": [[67, 78], ["k.clone.clone.clone", "F.softplus", "F.sigmoid", "F.softmax", "head.NTMHeadBase.memory.address", "F.softplus"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem.NTMMemory.address"], ["", "def", "_address_memory", "(", "self", ",", "k", ",", "\u03b2", ",", "g", ",", "s", ",", "\u03b3", ",", "w_prev", ")", ":", "\n", "# Handle Activations", "\n", "        ", "k", "=", "k", ".", "clone", "(", ")", "\n", "\u03b2", "=", "F", ".", "softplus", "(", "\u03b2", ")", "\n", "g", "=", "F", ".", "sigmoid", "(", "g", ")", "\n", "s", "=", "F", ".", "softmax", "(", "s", ",", "dim", "=", "1", ")", "\n", "\u03b3", "=", "1", "+", "F", ".", "softplus", "(", "\u03b3", ")", "\n", "\n", "w", "=", "self", ".", "memory", ".", "address", "(", "k", ",", "\u03b2", ",", "g", ",", "s", ",", "\u03b3", ",", "w_prev", ")", "\n", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMHeadBase.read_mem": [[79, 81], ["torch.bmm"], "methods", ["None"], ["", "def", "read_mem", "(", "self", ",", "memory", ",", "read_weights", ",", "key_size", ")", ":", "\n", "        ", "return", "torch", ".", "bmm", "(", "read_weights", ",", "memory", "[", ":", ",", ":", ",", "key_size", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMHeadBase.content_weightings": [[82, 102], ["\u03c3", "\u03b8", "head.gumbel_softmax", "\u03b8", "strengths.unsqueeze", "F.tanh", "F.tanh"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.gumbel_softmax"], ["", "def", "content_weightings", "(", "self", ",", "memory", ",", "keys", ",", "strengths", ",", "key_size", ",", "program_mask", "=", "None", ")", ":", "\n", "        ", "if", "key_size", ">", "0", ":", "\n", "            ", "if", "self", ".", "att_mode", "==", "\"kv\"", ":", "\n", "                ", "d", "=", "\u03b8", "(", "F", ".", "tanh", "(", "memory", "[", ":", ",", ":", ",", ":", "key_size", "]", ")", ",", "F", ".", "tanh", "(", "keys", "[", ":", ",", ":", ",", ":", "key_size", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "d", "=", "keys", "\n", "", "", "else", ":", "\n", "            ", "d", "=", "\u03b8", "(", "memory", ",", "keys", ")", "\n", "# print(memory[:,:,:key_size])", "\n", "", "d", "=", "\u03c3", "(", "d", "*", "strengths", ".", "unsqueeze", "(", "2", ")", ",", "2", ")", "\n", "if", "program_mask", "is", "not", "None", ":", "\n", "#     # d = torch.abs(d*program_mask)", "\n", "#     # print(d)", "\n", "#     # d2 = torch.zeros(d.shape).cuda()", "\n", "#     # _, di = d.max(-1)", "\n", "#     # d2[:,:,di]=1", "\n", "#     # d=d2", "\n", "            ", "d", "=", "gumbel_softmax", "(", "d", ",", "10", ")", "\n", "#     # print(d)", "\n", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMReadHead.__init__": [[104, 125], ["head.NTMHeadBase.__init__", "nn.GroupNorm", "head.NTMReadHead.reset_parameters", "sum", "nn.Linear", "nn.Linear", "nn.Parameter", "nn.Linear", "torch.zeros", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm.NTM.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "memory", ",", "controller_size", ",", "program_size", "=", "2", ",", "pkey_dim", "=", "2", ")", ":", "\n", "        ", "super", "(", "NTMReadHead", ",", "self", ")", ".", "__init__", "(", "memory", ",", "controller_size", ")", "\n", "self", ".", "program_size", "=", "program_size", "\n", "self", ".", "program_mask", "=", "None", "\n", "self", ".", "pkey_dim", "=", "pkey_dim", "\n", "# Corresponding to k, \u03b2, g, s, \u03b3 sizes from the paper", "\n", "self", ".", "read_lengths", "=", "[", "self", ".", "M", ",", "1", ",", "1", ",", "3", ",", "1", "]", "\n", "self", ".", "layernorm", "=", "nn", ".", "GroupNorm", "(", "1", ",", "sum", "(", "self", ".", "read_lengths", ")", ")", "\n", "\n", "if", "self", ".", "program_size", ">", "0", ":", "\n", "            ", "self", ".", "program_key", "=", "nn", ".", "Linear", "(", "controller_size", ",", "self", ".", "pkey_dim", ")", "\n", "self", ".", "program_strength", "=", "nn", ".", "Linear", "(", "controller_size", ",", "1", ")", "\n", "\n", "self", ".", "instruction_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "program_size", ",", "\n", "self", ".", "pkey_dim", "+", "\n", "(", "self", ".", "controller_size", "+", "1", ")", "*", "sum", "(", "self", ".", "read_lengths", ")", ",", "\n", "requires_grad", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc_read", "=", "nn", ".", "Linear", "(", "controller_size", ",", "sum", "(", "self", ".", "read_lengths", ")", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMReadHead.create_new_state": [[126, 137], ["torch.cuda.is_available", "torch.zeros().cuda", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "create_new_state", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "cs", "=", "[", "]", "\n", "self", ".", "program_weights", "=", "[", "]", "\n", "self", ".", "query_keys", "=", "[", "]", "\n", "self", ".", "query_strengths", "=", "[", "]", "\n", "self", ".", "data_weights", "=", "[", "]", "\n", "# The state holds the previous time step address weightings", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "return", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "N", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMReadHead.reset_parameters": [[139, 150], ["nn.init.xavier_uniform_", "nn.init.xavier_uniform_", "nn.init.normal_", "nn.init.xavier_uniform_", "nn.init.normal_", "nn.init.xavier_uniform_", "nn.init.normal_"], "methods", ["None"], ["", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "# Initialize the linear layers", "\n", "        ", "if", "self", ".", "program_size", ">", "0", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "instruction_weight", ",", "gain", "=", "1.4", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "program_key", ".", "weight", ",", "gain", "=", "1.4", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "program_key", ".", "bias", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "program_strength", ".", "weight", ",", "gain", "=", "1.4", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "program_strength", ".", "bias", ",", "std", "=", "0.01", ")", "\n", "", "else", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc_read", ".", "weight", ",", "gain", "=", "1.4", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "fc_read", ".", "bias", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMReadHead.is_read_head": [[152, 154], ["None"], "methods", ["None"], ["", "", "def", "is_read_head", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMReadHead.forward": [[155, 191], ["head.NTMReadHead.cs.append", "head._split_cols", "head.NTMReadHead._address_memory", "head.NTMReadHead.memory.read", "head.NTMReadHead.data_weights.append", "head.NTMReadHead.program_key", "F.softplus", "head.NTMReadHead.content_weightings", "head.NTMReadHead.read_mem", "instruction[].view", "instruction[].view", "head.NTMReadHead.program_weights.append", "head.NTMReadHead.query_keys.append", "head.NTMReadHead.query_strengths.append", "head.NTMReadHead.fc_read", "head.NTMReadHead.program_strength", "head.NTMReadHead.instruction_weight.unsqueeze().repeat", "head.NTMReadHead.unsqueeze", "head.NTMReadHead.instruction_weight.unsqueeze().repeat", "sum", "sum", "head.NTMReadHead.instruction_weight.unsqueeze", "head.NTMReadHead.instruction_weight.unsqueeze", "torch.matmul", "embeddings.unsqueeze", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head._split_cols", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMHeadBase._address_memory", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem.NTMMemory.read", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMHeadBase.content_weightings", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMHeadBase.read_mem"], ["", "def", "forward", "(", "self", ",", "embeddings", ",", "w_prev", ")", ":", "\n", "        ", "\"\"\"NTMReadHead forward function.\n        :param embeddings: input representation of the controller.\n        :param w_prev: previous step state\n        \"\"\"", "\n", "self", ".", "cs", ".", "append", "(", "embeddings", "[", "0", "]", ")", "\n", "if", "self", ".", "program_size", ">", "0", ":", "\n", "# if len(self.query_keys)>0:", "\n", "#     read_keys = self.query_keys[0]", "\n", "#     read_strengths = self.query_strengths[0]", "\n", "# else:", "\n", "            ", "read_keys", "=", "self", ".", "program_key", "(", "embeddings", ")", "\n", "read_strengths", "=", "F", ".", "softplus", "(", "self", ".", "program_strength", "(", "embeddings", ")", ")", "\n", "content_weights", "=", "self", ".", "content_weightings", "(", "self", ".", "instruction_weight", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "read_keys", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ",", "\n", "read_keys", ".", "unsqueeze", "(", "1", ")", ",", "\n", "read_strengths", ",", "self", ".", "pkey_dim", ",", "self", ".", "program_mask", ")", "\n", "instruction", "=", "self", ".", "read_mem", "(", "self", ".", "instruction_weight", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "read_keys", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ",", "\n", "content_weights", ",", "self", ".", "pkey_dim", ")", "\n", "i_w", "=", "instruction", "[", ":", ",", ":", ",", ":", "self", ".", "controller_size", "*", "sum", "(", "self", ".", "read_lengths", ")", "]", ".", "view", "(", "-", "1", ",", "self", ".", "controller_size", ",", "sum", "(", "self", ".", "read_lengths", ")", ")", "\n", "i_b", "=", "instruction", "[", ":", ",", ":", ",", "self", ".", "controller_size", "*", "sum", "(", "self", ".", "read_lengths", ")", ":", "]", ".", "view", "(", "-", "1", ",", "1", ",", "sum", "(", "self", ".", "read_lengths", ")", ")", "\n", "\n", "o", "=", "(", "torch", ".", "matmul", "(", "embeddings", ".", "unsqueeze", "(", "1", ")", ",", "i_w", ")", "+", "i_b", ")", ".", "squeeze", "(", "1", ")", "\n", "self", ".", "program_weights", ".", "append", "(", "content_weights", ")", "\n", "# print(content_weights)", "\n", "self", ".", "query_keys", ".", "append", "(", "read_keys", ")", "\n", "self", ".", "query_strengths", ".", "append", "(", "read_strengths", ")", "\n", "", "else", ":", "\n", "            ", "o", "=", "self", ".", "fc_read", "(", "embeddings", ")", "\n", "# o = self.layernorm(o)", "\n", "", "k", ",", "\u03b2", ",", "g", ",", "s", ",", "\u03b3", "=", "_split_cols", "(", "o", ",", "self", ".", "read_lengths", ")", "\n", "\n", "# Read from memory", "\n", "w", "=", "self", ".", "_address_memory", "(", "k", ",", "\u03b2", ",", "g", ",", "s", ",", "\u03b3", ",", "w_prev", ")", "\n", "r", "=", "self", ".", "memory", ".", "read", "(", "w", ")", "\n", "self", ".", "data_weights", ".", "append", "(", "w", ")", "\n", "return", "r", ",", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMWriteHead.__init__": [[194, 215], ["head.NTMHeadBase.__init__", "nn.GroupNorm", "head.NTMWriteHead.reset_parameters", "sum", "nn.Linear", "nn.Linear", "nn.Parameter", "nn.Linear", "torch.zeros", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm.NTM.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "memory", ",", "controller_size", ",", "program_size", "=", "2", ",", "pkey_dim", "=", "2", ")", ":", "\n", "        ", "super", "(", "NTMWriteHead", ",", "self", ")", ".", "__init__", "(", "memory", ",", "controller_size", ")", "\n", "\n", "# Corresponding to k, \u03b2, g, s, \u03b3, e, a sizes from the paper", "\n", "self", ".", "write_lengths", "=", "[", "self", ".", "M", ",", "1", ",", "1", ",", "3", ",", "1", ",", "self", ".", "M", ",", "self", ".", "M", "]", "\n", "self", ".", "program_size", "=", "program_size", "\n", "self", ".", "program_mask", "=", "None", "\n", "self", ".", "pkey_dim", "=", "pkey_dim", "\n", "self", ".", "layernorm", "=", "nn", ".", "GroupNorm", "(", "1", ",", "sum", "(", "self", ".", "write_lengths", ")", ")", "\n", "\n", "if", "self", ".", "program_size", ">", "0", ":", "\n", "            ", "self", ".", "program_key", "=", "nn", ".", "Linear", "(", "controller_size", ",", "self", ".", "pkey_dim", ")", "\n", "self", ".", "program_strength", "=", "nn", ".", "Linear", "(", "controller_size", ",", "1", ")", "\n", "\n", "self", ".", "instruction_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "program_size", ",", "\n", "self", ".", "pkey_dim", "+", "\n", "(", "self", ".", "controller_size", "+", "1", ")", "*", "sum", "(", "self", ".", "write_lengths", ")", ",", "\n", "requires_grad", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc_write", "=", "nn", ".", "Linear", "(", "controller_size", ",", "sum", "(", "self", ".", "write_lengths", ")", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMWriteHead.create_new_state": [[216, 226], ["torch.cuda.is_available", "torch.zeros().cuda", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "create_new_state", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "cs", "=", "[", "]", "\n", "self", ".", "program_weights", "=", "[", "]", "\n", "self", ".", "query_keys", "=", "[", "]", "\n", "self", ".", "query_strengths", "=", "[", "]", "\n", "self", ".", "data_weights", "=", "[", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "return", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "N", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMWriteHead.reset_parameters": [[227, 238], ["nn.init.xavier_uniform_", "nn.init.xavier_uniform_", "nn.init.normal_", "nn.init.xavier_uniform_", "nn.init.normal_", "nn.init.xavier_uniform_", "nn.init.normal_"], "methods", ["None"], ["", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "# Initialize the linear layers", "\n", "        ", "if", "self", ".", "program_size", ">", "0", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "instruction_weight", ",", "gain", "=", "1.4", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "program_key", ".", "weight", ",", "gain", "=", "1.4", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "program_key", ".", "bias", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "program_strength", ".", "weight", ",", "gain", "=", "1.4", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "program_strength", ".", "bias", ",", "std", "=", "0.01", ")", "\n", "", "else", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc_write", ".", "weight", ",", "gain", "=", "1.4", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "fc_write", ".", "bias", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMWriteHead.is_read_head": [[240, 242], ["None"], "methods", ["None"], ["", "", "def", "is_read_head", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMWriteHead.forward": [[243, 289], ["head.NTMWriteHead.cs.append", "head._split_cols", "F.sigmoid", "head.NTMWriteHead._address_memory", "head.NTMWriteHead.memory.write", "head.NTMWriteHead.data_weights.append", "head.NTMWriteHead.program_key", "F.softplus", "head.NTMWriteHead.content_weightings", "head.NTMWriteHead.read_mem", "instruction[].view", "instruction[].view", "head.NTMWriteHead.program_weights.append", "head.NTMWriteHead.query_keys.append", "head.NTMWriteHead.query_strengths.append", "head.NTMWriteHead.fc_write", "head.NTMWriteHead.program_strength", "head.NTMWriteHead.instruction_weight.unsqueeze().repeat", "head.NTMWriteHead.unsqueeze", "head.NTMWriteHead.instruction_weight.unsqueeze().repeat", "sum", "sum", "head.NTMWriteHead.instruction_weight.unsqueeze", "head.NTMWriteHead.instruction_weight.unsqueeze", "torch.matmul", "embeddings.unsqueeze", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head._split_cols", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMHeadBase._address_memory", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_mem.NTMMemory.write", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMHeadBase.content_weightings", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMHeadBase.read_mem"], ["", "def", "forward", "(", "self", ",", "embeddings", ",", "w_prev", ")", ":", "\n", "        ", "\"\"\"NTMWriteHead forward function.\n        :param embeddings: input representation of the controller.\n        :param w_prev: previous step state\n        \"\"\"", "\n", "self", ".", "cs", ".", "append", "(", "embeddings", "[", "0", "]", ")", "\n", "if", "self", ".", "program_size", ">", "0", ":", "\n", "# if len(self.query_keys)>0:", "\n", "#     read_keys = self.query_keys[0]", "\n", "#     read_strengths = self.query_strengths[0]", "\n", "# else:", "\n", "            ", "read_keys", "=", "self", ".", "program_key", "(", "embeddings", ")", "\n", "read_strengths", "=", "F", ".", "softplus", "(", "self", ".", "program_strength", "(", "embeddings", ")", ")", "\n", "content_weights", "=", "self", ".", "content_weightings", "(", "self", ".", "instruction_weight", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "read_keys", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ",", "\n", "read_keys", ".", "unsqueeze", "(", "1", ")", ",", "\n", "read_strengths", ",", "self", ".", "pkey_dim", ",", "self", ".", "program_mask", ")", "\n", "instruction", "=", "self", ".", "read_mem", "(", "self", ".", "instruction_weight", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "read_keys", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ",", "\n", "content_weights", ",", "self", ".", "pkey_dim", ")", "\n", "\n", "i_w", "=", "instruction", "[", ":", ",", ":", ",", ":", "self", ".", "controller_size", "*", "sum", "(", "self", ".", "write_lengths", ")", "]", ".", "view", "(", "-", "1", ",", "self", ".", "controller_size", ",", "\n", "sum", "(", "self", ".", "write_lengths", ")", ")", "\n", "i_b", "=", "instruction", "[", ":", ",", ":", ",", "self", ".", "controller_size", "*", "sum", "(", "self", ".", "write_lengths", ")", ":", "]", ".", "view", "(", "-", "1", ",", "1", ",", "sum", "(", "self", ".", "write_lengths", ")", ")", "\n", "\n", "o", "=", "(", "torch", ".", "matmul", "(", "embeddings", ".", "unsqueeze", "(", "1", ")", ",", "i_w", ")", "+", "i_b", ")", ".", "squeeze", "(", "1", ")", "\n", "self", ".", "program_weights", ".", "append", "(", "content_weights", ")", "\n", "# print(content_weights)", "\n", "self", ".", "query_keys", ".", "append", "(", "read_keys", ")", "\n", "self", ".", "query_strengths", ".", "append", "(", "read_strengths", ")", "\n", "# u, s, d = torch.svd(instruction[0])", "\n", "# print(s[0])", "\n", "", "else", ":", "\n", "            ", "o", "=", "self", ".", "fc_write", "(", "embeddings", ")", "\n", "# u, s, d = torch.svd(self.fc_write.weight)", "\n", "# print(s[0])", "\n", "\n", "# o = self.layernorm(o)", "\n", "", "k", ",", "\u03b2", ",", "g", ",", "s", ",", "\u03b3", ",", "e", ",", "a", "=", "_split_cols", "(", "o", ",", "self", ".", "write_lengths", ")", "\n", "\n", "# e should be in [0, 1]", "\n", "e", "=", "F", ".", "sigmoid", "(", "e", ")", "\n", "\n", "# Write to memory", "\n", "w", "=", "self", ".", "_address_memory", "(", "k", ",", "\u03b2", ",", "g", ",", "s", ",", "\u03b3", ",", "w_prev", ")", "\n", "self", ".", "memory", ".", "write", "(", "w", ",", "e", ",", "a", ")", "\n", "self", ".", "data_weights", ".", "append", "(", "w", ")", "\n", "return", "w", "", "", "", ""]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.sample_gumbel": [[4, 7], ["torch.rand().cuda", "Variable", "torch.rand", "torch.log", "torch.log"], "function", ["None"], ["def", "sample_gumbel", "(", "shape", ",", "eps", "=", "1e-20", ")", ":", "\n", "    ", "U", "=", "torch", ".", "rand", "(", "shape", ")", ".", "cuda", "(", ")", "\n", "return", "-", "Variable", "(", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "U", "+", "eps", ")", "+", "eps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.gumbel_softmax_sample": [[8, 11], ["F.softmax", "head.sample_gumbel", "logits.size"], "function", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.sample_gumbel", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size"], ["", "def", "gumbel_softmax_sample", "(", "logits", ",", "temperature", ")", ":", "\n", "    ", "y", "=", "logits", "+", "sample_gumbel", "(", "logits", ".", "size", "(", ")", ")", "\n", "return", "F", ".", "softmax", "(", "y", "/", "temperature", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.gumbel_softmax": [[12, 26], ["head.gumbel_softmax_sample", "gumbel_softmax_sample.size", "gumbel_softmax_sample.max", "torch.zeros_like().view", "y_hard.view.scatter_", "y_hard.view.view", "ind.view", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.gumbel_softmax_sample", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size"], ["", "def", "gumbel_softmax", "(", "logits", ",", "temperature", ")", ":", "\n", "    ", "\"\"\"\n    ST-gumple-softmax\n    input: [*, n_class]\n    return: flatten --> [*, n_class] an one-hot vector\n    \"\"\"", "\n", "y", "=", "gumbel_softmax_sample", "(", "logits", ",", "temperature", ")", "\n", "shape", "=", "y", ".", "size", "(", ")", "\n", "_", ",", "ind", "=", "y", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "y_hard", "=", "torch", ".", "zeros_like", "(", "y", ")", ".", "view", "(", "-", "1", ",", "shape", "[", "-", "1", "]", ")", "\n", "y_hard", ".", "scatter_", "(", "1", ",", "ind", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "y_hard", "=", "y_hard", ".", "view", "(", "*", "shape", ")", "\n", "y_hard", "=", "(", "y_hard", "-", "y", ")", ".", "detach", "(", ")", "+", "y", "\n", "return", "y_hard", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head._split_cols": [[27, 35], ["np.cumsum", "zip", "sum", "mat.size"], "function", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size"], ["", "def", "_split_cols", "(", "mat", ",", "lengths", ")", ":", "\n", "    ", "\"\"\"Split a 2D matrix to variable length columns.\"\"\"", "\n", "assert", "mat", ".", "size", "(", ")", "[", "1", "]", "==", "sum", "(", "lengths", ")", ",", "\"Lengths must be summed to num columns\"", "\n", "l", "=", "np", ".", "cumsum", "(", "[", "0", "]", "+", "lengths", ")", "\n", "results", "=", "[", "]", "\n", "for", "s", ",", "e", "in", "zip", "(", "l", "[", ":", "-", "1", "]", ",", "l", "[", "1", ":", "]", ")", ":", "\n", "        ", "results", "+=", "[", "mat", "[", ":", ",", "s", ":", "e", "]", "]", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_warper.EncapsulatedNTM.__init__": [[14, 52], ["torch.nn.Module.__init__", "ntm_mem.NTMMemory", "controller.LSTMController.LSTMController", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "ntm.NTM", "head.NTMReadHead", "head.NTMWriteHead"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_outputs", ",", "\n", "controller_size", ",", "controller_layers", ",", "num_heads", ",", "N", ",", "M", ",", "\n", "program_size", "=", "0", ",", "pkey_dim", "=", "0", ")", ":", "\n", "        ", "\"\"\"Initialize an EncapsulatedNTM.\n        :param num_inputs: External number of inputs.\n        :param num_outputs: External number of outputs.\n        :param controller_size: The size of the internal representation.\n        :param controller_layers: Controller number of layers.\n        :param num_heads: Number of heads.\n        :param N: Number of rows in the memory bank.\n        :param M: Number of cols/features in the memory bank.\n        \"\"\"", "\n", "super", "(", "EncapsulatedNTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Save args", "\n", "self", ".", "num_inputs", "=", "num_inputs", "\n", "self", ".", "num_outputs", "=", "num_outputs", "\n", "self", ".", "controller_size", "=", "controller_size", "\n", "self", ".", "controller_layers", "=", "controller_layers", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "N", "=", "N", "\n", "self", ".", "M", "=", "M", "\n", "self", ".", "program_size", "=", "program_size", "\n", "self", ".", "pkey_dim", "=", "pkey_dim", "\n", "self", ".", "emb", "=", "None", "\n", "\n", "# Create the NTM components", "\n", "memory", "=", "NTMMemory", "(", "N", ",", "M", ")", "\n", "controller", "=", "LSTMController", "(", "num_inputs", "+", "M", "*", "num_heads", ",", "controller_size", ",", "controller_layers", ")", "\n", "self", ".", "heads", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "num_heads", ")", ":", "\n", "            ", "self", ".", "heads", "+=", "[", "\n", "NTMReadHead", "(", "memory", ",", "controller_size", ",", "self", ".", "program_size", ",", "self", ".", "pkey_dim", ")", ",", "\n", "NTMWriteHead", "(", "memory", ",", "controller_size", ",", "self", ".", "program_size", ",", "self", ".", "pkey_dim", ")", "\n", "]", "\n", "\n", "", "self", ".", "ntm", "=", "NTM", "(", "num_inputs", ",", "num_outputs", ",", "controller", ",", "memory", ",", "self", ".", "heads", ")", "\n", "self", ".", "memory", "=", "memory", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_warper.EncapsulatedNTM.init_sequence": [[53, 58], ["ntm_warper.EncapsulatedNTM.memory.reset", "ntm_warper.EncapsulatedNTM.ntm.create_new_state"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.reset", "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.create_new_state"], ["", "def", "init_sequence", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"Initializing the state.\"\"\"", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "memory", ".", "reset", "(", "batch_size", ")", "\n", "self", ".", "previous_state", "=", "self", ".", "ntm", ".", "create_new_state", "(", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_warper.EncapsulatedNTM.forward": [[59, 70], ["ntm_warper.EncapsulatedNTM.ntm", "ntm_warper.EncapsulatedNTM.emb().squeeze", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ntm_warper.EncapsulatedNTM.emb", "torch.zeros.long", "torch.zeros.long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "emb", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "emb", "(", "x", ".", "long", "(", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "if", "x", "is", "None", ":", "\n", "            ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "x", "=", "torch", ".", "zeros", "(", "self", ".", "batch_size", ",", "self", ".", "num_inputs", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "torch", ".", "zeros", "(", "self", ".", "batch_size", ",", "self", ".", "num_inputs", ")", "\n", "", "", "o", ",", "self", ".", "previous_state", "=", "self", ".", "ntm", "(", "x", ",", "self", ".", "previous_state", ")", "\n", "return", "o", ",", "self", ".", "previous_state", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_warper.EncapsulatedNTM.program_loss_pl1": [[71, 83], ["range", "range", "torch.cosine_similarity", "torch.cosine_similarity"], "methods", ["None"], ["", "def", "program_loss_pl1", "(", "self", ")", ":", "\n", "        ", "ploss", "=", "0", "\n", "count", "=", "0", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "program_size", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "self", ".", "program_size", ")", ":", "\n", "                    ", "ploss", "+=", "F", ".", "cosine_similarity", "(", "head", ".", "instruction_weight", "[", "i", ",", ":", "self", ".", "pkey_dim", "]", ",", "\n", "head", ".", "instruction_weight", "[", "j", ",", ":", "self", ".", "pkey_dim", "]", ",", "\n", "dim", "=", "0", ")", "\n", "count", "+=", "1", "\n", "", "", "", "return", "ploss", "/", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_warper.EncapsulatedNTM.set_program_mask": [[84, 87], ["None"], "methods", ["None"], ["", "def", "set_program_mask", "(", "self", ",", "pm", ")", ":", "\n", "        ", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "head", ".", "program_mask", "=", "pm", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_warper.EncapsulatedNTM.set_att_mode": [[88, 92], ["print"], "methods", ["None"], ["", "", "def", "set_att_mode", "(", "self", ",", "mode", "=", "\"kv\"", ")", ":", "\n", "        ", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "print", "(", "\"set att mode to: {}\"", ".", "format", "(", "mode", ")", ")", "\n", "head", ".", "att_mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_warper.EncapsulatedNTM.program_loss_pl2": [[93, 106], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.t", "torch.t", "torch.t", "torch.t"], "methods", ["None"], ["", "", "def", "program_loss_pl2", "(", "self", ")", ":", "\n", "        ", "ploss", "=", "0", "\n", "count", "=", "0", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "I", "=", "torch", ".", "eye", "(", "self", ".", "program_size", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "I", "=", "torch", ".", "eye", "(", "self", ".", "program_size", ")", "\n", "\n", "", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "W", "=", "head", ".", "instruction_weight", "[", ":", ",", ":", "self", ".", "pkey_dim", "]", "\n", "ploss", "+=", "torch", ".", "norm", "(", "torch", ".", "matmul", "(", "W", ",", "torch", ".", "t", "(", "W", ")", ")", "-", "I", ")", "\n", "count", "+=", "1", "\n", "", "return", "ploss", "/", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_warper.EncapsulatedNTM.get_read_meta_info": [[107, 144], ["meta.items", "meta[].append", "head.is_read_head", "enumerate", "meta[].append", "meta[].append", "isinstance", "meta[].append", "meta[].append", "meta[].append", "meta[].append", "meta[].append", "meta[].append", "enumerate", "numpy.asarray", "numpy.asarray", "vv[].detach().cpu", "v2.detach().cpu", "vv[].detach", "v2.detach"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMWriteHead.is_read_head"], ["", "def", "get_read_meta_info", "(", "self", ")", ":", "\n", "        ", "meta", "=", "{", "\"read_program_weights\"", ":", "[", "]", ",", "\n", "\"read_query_keys\"", ":", "[", "]", ",", "\n", "\"read_program_keys\"", ":", "[", "]", ",", "\n", "\"write_program_weights\"", ":", "[", "]", ",", "\n", "\"write_query_keys\"", ":", "[", "]", ",", "\n", "\"write_program_keys\"", ":", "[", "]", ",", "\n", "\"read_data_weights\"", ":", "[", "]", ",", "\n", "\"write_data_weights\"", ":", "[", "]", ",", "\n", "\"css\"", ":", "[", "]", "\n", "}", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "meta", "[", "\"css\"", "]", ".", "append", "(", "head", ".", "cs", ")", "\n", "if", "head", ".", "is_read_head", "(", ")", ":", "\n", "                ", "if", "self", ".", "program_size", ">", "0", ":", "\n", "                    ", "meta", "[", "\"read_program_weights\"", "]", ".", "append", "(", "head", ".", "program_weights", ")", "\n", "meta", "[", "\"read_program_keys\"", "]", ".", "append", "(", "head", ".", "instruction_weight", "[", ":", ",", ":", "self", ".", "pkey_dim", "]", ")", "\n", "meta", "[", "\"read_query_keys\"", "]", ".", "append", "(", "head", ".", "query_keys", ")", "\n", "\n", "", "meta", "[", "\"read_data_weights\"", "]", ".", "append", "(", "head", ".", "data_weights", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "program_size", ">", "0", ":", "\n", "                    ", "meta", "[", "\"write_program_weights\"", "]", ".", "append", "(", "head", ".", "program_weights", ")", "\n", "meta", "[", "\"write_program_keys\"", "]", ".", "append", "(", "head", ".", "instruction_weight", "[", ":", ",", ":", "self", ".", "pkey_dim", "]", ")", "\n", "meta", "[", "\"write_query_keys\"", "]", ".", "append", "(", "head", ".", "query_keys", ")", "\n", "\n", "", "meta", "[", "\"write_data_weights\"", "]", ".", "append", "(", "head", ".", "data_weights", ")", "\n", "\n", "", "", "for", "k", ",", "vv", "in", "meta", ".", "items", "(", ")", ":", "\n", "            ", "for", "i1", ",", "v", "in", "enumerate", "(", "vv", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "list", ")", ":", "\n", "                    ", "for", "i2", ",", "v2", "in", "enumerate", "(", "v", ")", ":", "\n", "                        ", "meta", "[", "k", "]", "[", "i1", "]", "[", "i2", "]", "=", "np", ".", "asarray", "(", "v2", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "meta", "[", "k", "]", "[", "i1", "]", "=", "np", ".", "asarray", "(", "vv", "[", "i1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "", "", "", "return", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm_warper.EncapsulatedNTM.calculate_num_params": [[145, 151], ["ntm_warper.EncapsulatedNTM.parameters", "p.data.view().size", "p.data.view"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size"], ["", "def", "calculate_num_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the total number of parameters.\"\"\"", "\n", "num_params", "=", "0", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "num_params", "+=", "p", ".", "data", ".", "view", "(", "-", "1", ")", ".", "size", "(", "0", ")", "\n", "", "return", "num_params", "", "", "", ""]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm.NTM.__init__": [[9, 51], ["torch.nn.Module.__init__", "memory.size", "controller.size", "torch.nn.Linear", "torch.nn.Linear", "ntm.NTM.reset_parameters", "head.is_read_head", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "ntm.NTM.register_buffer", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm.NTM.reset_parameters", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMWriteHead.is_read_head"], ["def", "__init__", "(", "self", ",", "num_inputs", ",", "num_outputs", ",", "controller", ",", "memory", ",", "heads", ")", ":", "\n", "        ", "\"\"\"Initialize the NTM.\n        :param num_inputs: External input size.\n        :param num_outputs: External output size.\n        :param controller: :class:`LSTMController`\n        :param memory: :class:`NTMMemory`\n        :param heads: list of :class:`NTMReadHead` or :class:`NTMWriteHead`\n        Note: This design allows the flexibility of using any number of read and\n              write heads independently, also, the order by which the heads are\n              called in controlled by the user (order in list)\n        \"\"\"", "\n", "super", "(", "NTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Save arguments", "\n", "self", ".", "num_inputs", "=", "num_inputs", "\n", "self", ".", "num_outputs", "=", "num_outputs", "\n", "self", ".", "controller", "=", "controller", "\n", "self", ".", "memory", "=", "memory", "\n", "self", ".", "heads", "=", "heads", "\n", "\n", "self", ".", "N", ",", "self", ".", "M", "=", "memory", ".", "size", "(", ")", "\n", "_", ",", "self", ".", "controller_size", "=", "controller", ".", "size", "(", ")", "\n", "\n", "# Initialize the initial previous read values to random biases", "\n", "self", ".", "num_read_heads", "=", "0", "\n", "self", ".", "init_r", "=", "[", "]", "\n", "for", "head", "in", "heads", ":", "\n", "            ", "if", "head", ".", "is_read_head", "(", ")", ":", "\n", "                ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "init_r_bias", "=", "torch", ".", "randn", "(", "1", ",", "self", ".", "M", ")", ".", "cuda", "(", ")", "*", "0.01", "\n", "", "else", ":", "\n", "                    ", "init_r_bias", "=", "torch", ".", "randn", "(", "1", ",", "self", ".", "M", ")", "*", "0.01", "\n", "", "self", ".", "register_buffer", "(", "\"read{}_bias\"", ".", "format", "(", "self", ".", "num_read_heads", ")", ",", "init_r_bias", ".", "data", ")", "\n", "self", ".", "init_r", "+=", "[", "init_r_bias", "]", "\n", "self", ".", "num_read_heads", "+=", "1", "\n", "\n", "", "", "assert", "self", ".", "num_read_heads", ">", "0", ",", "\"heads list must contain at least a single read head\"", "\n", "\n", "# Initialize a fully connected layer to produce the actual output:", "\n", "#   [controller_output; previous_reads ] -> output", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "controller_size", "+", "self", ".", "num_read_heads", "*", "self", ".", "M", ",", "num_outputs", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm.NTM.create_new_state": [[52, 58], ["ntm.NTM.controller.create_new_state", "r.clone().repeat", "head.create_new_state", "r.clone"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.create_new_state", "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.create_new_state"], ["", "def", "create_new_state", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "init_r", "=", "[", "r", ".", "clone", "(", ")", ".", "repeat", "(", "batch_size", ",", "1", ")", "for", "r", "in", "self", ".", "init_r", "]", "\n", "controller_state", "=", "self", ".", "controller", ".", "create_new_state", "(", "batch_size", ")", "\n", "heads_state", "=", "[", "head", ".", "create_new_state", "(", "batch_size", ")", "for", "head", "in", "self", ".", "heads", "]", "\n", "\n", "return", "init_r", ",", "controller_state", ",", "heads_state", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm.NTM.reset_parameters": [[59, 63], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.normal_", "torch.nn.init.normal_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "# Initialize the linear layer", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc", ".", "weight", ",", "gain", "=", "1", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "fc", ".", "bias", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.ntm.NTM.forward": [[64, 95], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "ntm.NTM.controller", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ntm.NTM.fc", "head.is_read_head", "head", "head"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.head.NTMWriteHead.is_read_head"], ["", "def", "forward", "(", "self", ",", "x", ",", "prev_state", ")", ":", "\n", "        ", "\"\"\"NTM forward function.\n        :param x: input vector (batch_size x num_inputs)\n        :param prev_state: The previous state of the NTM\n        \"\"\"", "\n", "# Unpack the previous state", "\n", "prev_reads", ",", "prev_controller_state", ",", "prev_heads_states", "=", "prev_state", "\n", "\n", "# Use the controller to get an embeddings", "\n", "inp", "=", "torch", ".", "cat", "(", "[", "x", "]", "+", "prev_reads", ",", "dim", "=", "1", ")", "\n", "controller_outp", ",", "controller_state", "=", "self", ".", "controller", "(", "inp", ",", "prev_controller_state", ")", "\n", "\n", "# Read/Write from the list of heads", "\n", "reads", "=", "[", "]", "\n", "heads_states", "=", "[", "]", "\n", "for", "head", ",", "prev_head_state", "in", "zip", "(", "self", ".", "heads", ",", "prev_heads_states", ")", ":", "\n", "            ", "if", "head", ".", "is_read_head", "(", ")", ":", "\n", "                ", "r", ",", "head_state", "=", "head", "(", "controller_outp", ",", "prev_head_state", ")", "\n", "reads", "+=", "[", "r", "]", "\n", "", "else", ":", "\n", "                ", "head_state", "=", "head", "(", "controller_outp", ",", "prev_head_state", ")", "\n", "", "heads_states", "+=", "[", "head_state", "]", "\n", "\n", "# Generate Output", "\n", "", "inp2", "=", "torch", ".", "cat", "(", "[", "controller_outp", "]", "+", "reads", ",", "dim", "=", "1", ")", "\n", "o", "=", "self", ".", "fc", "(", "inp2", ")", "\n", "\n", "# Pack the current state", "\n", "state", "=", "(", "reads", ",", "controller_state", ",", "heads_states", ")", "\n", "\n", "return", "o", ",", "state", "", "", "", ""]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_rl.MLP.__init__": [[26, 40], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "28", "*", "28", ",", "out_dim", "=", "10", ",", "hid_dim", "=", "-", "1", ",", "layers", "=", "1", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "layers", "\n", "if", "hid_dim", "<=", "0", ":", "\n", "            ", "self", ".", "layers", "=", "-", "1", "\n", "", "if", "self", ".", "layers", "<", "0", ":", "\n", "            ", "hid_dim", "=", "out_dim", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hid_dim", ")", "\n", "# linear layer (n_hidden -> hidden_2)", "\n", "if", "self", ".", "layers", ">", "0", ":", "\n", "            ", "self", ".", "fc2h", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "hid_dim", ",", "hid_dim", ")", "]", "*", "self", ".", "layers", ")", "\n", "# linear layer (n_hidden -> 10)", "\n", "", "if", "self", ".", "layers", ">=", "0", ":", "\n", "            ", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "hid_dim", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_rl.MLP.forward": [[42, 50], ["stm_rl.MLP.fc1", "range", "stm_rl.MLP.fc3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "o", "=", "self", ".", "fc1", "(", "x", ")", "\n", "if", "self", ".", "layers", ">", "0", ":", "\n", "            ", "for", "l", "in", "range", "(", "self", ".", "layers", ")", ":", "\n", "                ", "o", "=", "self", ".", "fc2h", "[", "l", "]", "(", "o", ")", "\n", "", "", "if", "self", ".", "layers", ">=", "0", ":", "\n", "            ", "o", "=", "self", ".", "fc3", "(", "o", ")", "\n", "", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_rl.STM.__init__": [[52, 136], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "stm_rl.MLP", "stm_rl.MLP", "stm_rl.MLP", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "enumerate", "enumerate", "enumerate", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "setattr", "setattr", "setattr", "stm_rl.STM.register_parameter", "stm_rl.STM.register_parameter", "stm_rl.STM.register_parameter", "stm_rl.STM.register_parameter", "numpy.sqrt", "numpy.sqrt", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "str", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "str", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "str", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ",", "step", "=", "1", ",", "num_slot", "=", "8", ",", "\n", "mlp_size", "=", "128", ",", "slot_size", "=", "96", ",", "rel_size", "=", "96", ",", "\n", "out_att_size", "=", "64", ",", "rd", "=", "True", ",", "\n", "init_alphas", "=", "[", "None", ",", "None", ",", "None", "]", ",", "\n", "learn_init_mem", "=", "True", ",", "mlp_hid", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "STM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp_size", "=", "mlp_size", "\n", "self", ".", "slot_size", "=", "slot_size", "\n", "self", ".", "rel_size", "=", "rel_size", "\n", "self", ".", "rnn_hid", "=", "slot_size", "\n", "self", ".", "num_slot", "=", "num_slot", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "rd", "=", "rd", "\n", "self", ".", "learn_init_mem", "=", "learn_init_mem", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "out_att_size", "=", "out_att_size", "\n", "\n", "self", ".", "qkv_projector", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "slot_size", ",", "num_slot", "*", "3", ")", "]", "*", "step", ")", "\n", "self", ".", "qkv_layernorm", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "LayerNorm", "(", "[", "num_slot", "*", "3", "]", ")", "]", "*", "step", ")", "\n", "\n", "if", "init_alphas", "[", "0", "]", "is", "None", ":", "\n", "            ", "self", ".", "alpha1", "=", "[", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "]", "*", "step", "\n", "for", "ia", ",", "a", "in", "enumerate", "(", "self", ".", "alpha1", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'alpha1'", "+", "str", "(", "ia", ")", ",", "self", ".", "alpha1", "[", "ia", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "alpha1", "=", "[", "init_alphas", "[", "0", "]", "]", "*", "step", "\n", "\n", "", "if", "init_alphas", "[", "1", "]", "is", "None", ":", "\n", "            ", "self", ".", "alpha2", "=", "[", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "]", "*", "step", "\n", "for", "ia", ",", "a", "in", "enumerate", "(", "self", ".", "alpha2", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'alpha2'", "+", "str", "(", "ia", ")", ",", "self", ".", "alpha2", "[", "ia", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "alpha2", "=", "[", "init_alphas", "[", "1", "]", "]", "*", "step", "\n", "\n", "", "if", "init_alphas", "[", "2", "]", "is", "None", ":", "\n", "            ", "self", ".", "alpha3", "=", "[", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "]", "*", "step", "\n", "for", "ia", ",", "a", "in", "enumerate", "(", "self", ".", "alpha3", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'alpha3'", "+", "str", "(", "ia", ")", ",", "self", ".", "alpha3", "[", "ia", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "alpha3", "=", "[", "init_alphas", "[", "2", "]", "]", "*", "step", "\n", "\n", "\n", "", "self", ".", "input_projector", "=", "MLP", "(", "input_size", ",", "slot_size", ",", "hid_dim", "=", "mlp_hid", ")", "\n", "self", ".", "input_projector2", "=", "MLP", "(", "input_size", ",", "slot_size", ",", "hid_dim", "=", "mlp_hid", ")", "\n", "self", ".", "input_projector3", "=", "MLP", "(", "input_size", ",", "num_slot", ",", "hid_dim", "=", "mlp_hid", ")", "\n", "\n", "\n", "self", ".", "input_gate_projector", "=", "nn", ".", "Linear", "(", "self", ".", "slot_size", ",", "self", ".", "slot_size", "*", "2", ")", "\n", "self", ".", "memory_gate_projector", "=", "nn", ".", "Linear", "(", "self", ".", "slot_size", ",", "self", ".", "slot_size", "*", "2", ")", "\n", "# trainable scalar gate bias tensors", "\n", "self", ".", "forget_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "1.", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "input_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "0.", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n", "self", ".", "rel_projector", "=", "nn", ".", "Linear", "(", "slot_size", "*", "slot_size", ",", "rel_size", ")", "\n", "self", ".", "rel_projector2", "=", "nn", ".", "Linear", "(", "num_slot", "*", "slot_size", ",", "slot_size", ")", "\n", "self", ".", "rel_projector3", "=", "nn", ".", "Linear", "(", "num_slot", "*", "rel_size", ",", "out_att_size", ")", "\n", "self", ".", "layernorm2", "=", "nn", ".", "LayerNorm", "(", "[", "out_att_size", "]", ")", "\n", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "out_att_size", ",", "self", ".", "mlp_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "mlp_size", ",", "self", ".", "mlp_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "mlp_size", ",", "output_size", ")", "\n", "\n", "if", "self", ".", "learn_init_mem", ":", "\n", "            ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "self", ".", "register_parameter", "(", "'item_memory_state_bias'", ",", "\n", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "slot_size", ",", "self", ".", "slot_size", ")", ".", "cuda", "(", ")", ")", ")", "\n", "self", ".", "register_parameter", "(", "'rel_memory_state_bias'", ",", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "self", ".", "num_slot", ",", "self", ".", "slot_size", ",", "self", ".", "slot_size", ")", ".", "cuda", "(", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "self", ".", "register_parameter", "(", "'item_memory_state_bias'", ",", "\n", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "slot_size", ",", "self", ".", "slot_size", ")", ")", ")", "\n", "self", ".", "register_parameter", "(", "'rel_memory_state_bias'", ",", "\n", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "num_slot", ",", "self", ".", "slot_size", ",", "self", ".", "slot_size", ")", ")", ")", "\n", "\n", "", "stdev", "=", "1", "/", "(", "np", ".", "sqrt", "(", "self", ".", "slot_size", "+", "self", ".", "slot_size", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "item_memory_state_bias", ",", "-", "stdev", ",", "stdev", ")", "\n", "stdev", "=", "1", "/", "(", "np", ".", "sqrt", "(", "self", ".", "slot_size", "+", "self", ".", "slot_size", "+", "self", ".", "num_slot", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "rel_memory_state_bias", ",", "-", "stdev", ",", "stdev", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_rl.STM.create_new_state": [[138, 156], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "stm_rl.STM.item_memory_state_bias.clone().repeat", "stm_rl.STM.rel_memory_state_bias.clone().repeat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "read_heads.cuda.cuda.cuda", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "item_memory_state.cuda.cuda.cuda", "read_heads.cuda.cuda.cuda", "rel_memory_state.cuda.cuda.cuda", "stm_rl.STM.item_memory_state_bias.clone", "stm_rl.STM.rel_memory_state_bias.clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range"], "methods", ["None"], ["", "", "def", "create_new_state", "(", "self", ",", "batch_size", ",", "gpu_id", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "learn_init_mem", ":", "\n", "            ", "read_heads", "=", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "output_size", ")", "\n", "item_memory_state", "=", "self", ".", "item_memory_state_bias", ".", "clone", "(", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "rel_memory_state", "=", "self", ".", "rel_memory_state_bias", ".", "clone", "(", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "gpu_id", ">=", "0", ":", "\n", "                ", "read_heads", "=", "read_heads", ".", "cuda", "(", ")", "\n", "", "", "else", ":", "\n", "\n", "            ", "item_memory_state", "=", "torch", ".", "stack", "(", "[", "torch", ".", "zeros", "(", "self", ".", "slot_size", ",", "self", ".", "slot_size", ")", "for", "_", "in", "range", "(", "batch_size", ")", "]", ")", "\n", "read_heads", "=", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "output_size", ")", "\n", "rel_memory_state", "=", "torch", ".", "stack", "(", "[", "torch", ".", "zeros", "(", "self", ".", "num_slot", ",", "self", ".", "slot_size", ",", "self", ".", "slot_size", ")", "for", "_", "in", "range", "(", "batch_size", ")", "]", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "gpu_id", ">=", "0", ":", "\n", "                ", "item_memory_state", "=", "item_memory_state", ".", "cuda", "(", ")", "\n", "read_heads", "=", "read_heads", ".", "cuda", "(", ")", "\n", "rel_memory_state", "=", "rel_memory_state", ".", "cuda", "(", ")", "\n", "\n", "", "", "return", "read_heads", ",", "item_memory_state", ",", "rel_memory_state", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_rl.STM.compute_gates": [[159, 183], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "len", "inputs.view.view.view", "stm_rl.STM.input_gate_projector", "gate_inputs.unsqueeze.unsqueeze.unsqueeze", "stm_rl.STM.memory_gate_projector", "ValueError", "ValueError", "int"], "methods", ["None"], ["", "def", "compute_gates", "(", "self", ",", "inputs", ",", "memory", ")", ":", "\n", "\n", "        ", "memory", "=", "torch", ".", "tanh", "(", "memory", ")", "\n", "if", "len", "(", "inputs", ".", "shape", ")", "==", "3", ":", "\n", "            ", "if", "inputs", ".", "shape", "[", "1", "]", ">", "1", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"input seq length is larger than 1. create_gate function is meant to be called for each step, with input seq length of 1\"", ")", "\n", "", "inputs", "=", "inputs", ".", "view", "(", "inputs", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "gate_inputs", "=", "self", ".", "input_gate_projector", "(", "inputs", ")", "\n", "gate_inputs", "=", "gate_inputs", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "gate_memory", "=", "self", ".", "memory_gate_projector", "(", "memory", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"input shape of create_gate function is 2, expects 3\"", ")", "\n", "\n", "", "gates", "=", "gate_memory", "+", "gate_inputs", "\n", "gates", "=", "torch", ".", "split", "(", "gates", ",", "split_size_or_sections", "=", "int", "(", "gates", ".", "shape", "[", "2", "]", "/", "2", ")", ",", "dim", "=", "2", ")", "\n", "input_gate", ",", "forget_gate", "=", "gates", "\n", "assert", "input_gate", ".", "shape", "[", "2", "]", "==", "forget_gate", ".", "shape", "[", "2", "]", "\n", "\n", "input_gate", "=", "torch", ".", "sigmoid", "(", "input_gate", "+", "self", ".", "input_bias", ")", "\n", "forget_gate", "=", "torch", ".", "sigmoid", "(", "forget_gate", "+", "self", ".", "forget_bias", ")", "\n", "\n", "return", "input_gate", ",", "forget_gate", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_rl.STM.compute": [[184, 248], ["stm_rl.STM.input_projector", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "stm_rl.STM.compute_gates", "range", "stm_rl.STM.rel_projector().view", "stm_rl.STM.rel_projector3", "stm_rl.STM.layernorm2", "stm_rl.STM.input_projector2", "stm_rl.STM.input_projector3", "torch.softmax", "torch.softmax", "torch.softmax", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "stm_rl.STM.unsqueeze", "stm_rl.STM.unsqueeze", "stm_rl.STM.unsqueeze", "qkv.permute.permute.permute", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "stm_rl.op_att", "stm_rl.STM.rel_projector2", "torch.tanh", "torch.tanh", "torch.tanh", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "op_att.view().permute", "stm_rl.STM.rel_projector", "stm_rl.STM.unsqueeze", "stm_rl.STM.unsqueeze", "rel_memory_state.view", "op_att.view"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.compute_gates", "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.op_att"], ["", "def", "compute", "(", "self", ",", "input_step", ",", "prev_state", ")", ":", "\n", "\n", "        ", "hid", "=", "prev_state", "[", "0", "]", "\n", "item_memory_state", "=", "prev_state", "[", "1", "]", "\n", "rel_memory_state", "=", "prev_state", "[", "2", "]", "\n", "\n", "# transform input", "\n", "controller_outp", "=", "self", ".", "input_projector", "(", "input_step", ")", "\n", "if", "rel_memory_state", ":", "\n", "            ", "controller_outp2", "=", "self", ".", "input_projector2", "(", "input_step", ")", "\n", "controller_outp3", "=", "self", ".", "input_projector3", "(", "input_step", ")", "\n", "\n", "\n", "# Mr read", "\n", "controller_outp3", "=", "F", ".", "softmax", "(", "controller_outp3", ",", "dim", "=", "-", "1", ")", "\n", "controller_outp4", "=", "torch", ".", "einsum", "(", "'bn,bd,bndf->bf'", ",", "controller_outp3", ",", "controller_outp2", ",", "rel_memory_state", ")", "\n", "X2", "=", "torch", ".", "einsum", "(", "'bd,bf->bdf'", ",", "controller_outp4", ",", "controller_outp2", ")", "\n", "\n", "# Mi write", "\n", "", "X", "=", "torch", ".", "matmul", "(", "controller_outp", ".", "unsqueeze", "(", "2", ")", ",", "controller_outp", ".", "unsqueeze", "(", "1", ")", ")", "# Bxdxd", "\n", "input_gate", ",", "forget_gate", "=", "self", ".", "compute_gates", "(", "controller_outp", ".", "unsqueeze", "(", "1", ")", ",", "item_memory_state", ")", "\n", "\n", "if", "self", ".", "rd", ":", "\n", "# Mi write gating", "\n", "            ", "R", "=", "input_gate", "*", "F", ".", "tanh", "(", "X", ")", "\n", "R", "+=", "forget_gate", "*", "item_memory_state", "\n", "", "else", ":", "\n", "# Mi write", "\n", "            ", "R", "=", "item_memory_state", "+", "torch", ".", "matmul", "(", "controller_outp", ".", "unsqueeze", "(", "2", ")", ",", "controller_outp", ".", "unsqueeze", "(", "1", ")", ")", "# Bxdxd", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "step", ")", ":", "\n", "#SAM", "\n", "            ", "if", "rel_memory_state", ":", "\n", "                ", "qkv", "=", "self", ".", "qkv_projector", "[", "i", "]", "(", "R", "+", "self", ".", "alpha2", "[", "i", "]", "*", "X2", ")", "\n", "", "else", ":", "\n", "                ", "qkv", "=", "self", ".", "qkv_projector", "[", "i", "]", "(", "R", ")", "\n", "\n", "", "qkv", "=", "self", ".", "qkv_layernorm", "[", "i", "]", "(", "qkv", ")", "\n", "qkv", "=", "qkv", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "#Bx3Nxd", "\n", "\n", "q", ",", "k", ",", "v", "=", "torch", ".", "split", "(", "qkv", ",", "[", "self", ".", "num_slot", "]", "*", "3", ",", "1", ")", "#BxNxd", "\n", "\n", "\n", "R0", "=", "op_att", "(", "q", ",", "k", ",", "v", ")", "#BxNxdxd", "\n", "\n", "#Mr transfer to Mi", "\n", "R2", "=", "self", ".", "rel_projector2", "(", "R0", ".", "view", "(", "R0", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "R0", ".", "shape", "[", "3", "]", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "R", "=", "R", "+", "self", ".", "alpha3", "[", "i", "]", "*", "R2", "\n", "\n", "#Mr write", "\n", "if", "rel_memory_state", ":", "\n", "                ", "rel_memory_state", "=", "self", ".", "alpha1", "[", "i", "]", "*", "rel_memory_state", "+", "R0", "\n", "", "else", ":", "\n", "                ", "rel_memory_state", "=", "R0", "\n", "\n", "#Mr transfer to output", "\n", "", "", "r_vec", "=", "self", ".", "rel_projector", "(", "rel_memory_state", ".", "view", "(", "rel_memory_state", ".", "shape", "[", "0", "]", ",", "\n", "rel_memory_state", ".", "shape", "[", "1", "]", ",", "\n", "-", "1", ")", ")", ".", "view", "(", "input_step", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "rel_projector3", "(", "r_vec", ")", "\n", "out", "=", "self", ".", "layernorm2", "(", "out", ")", "\n", "\n", "\n", "return", "out", ",", "(", "out", ",", "R", ",", "rel_memory_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_rl.STM.forward": [[249, 266], ["stm_rl.STM.mlp", "stm_rl.STM.out", "len", "stm_rl.STM.init_sequence", "range", "stm_rl.STM.compute", "stm_rl.STM.compute", "stm_rl.STM.compute"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.init_sequence", "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.compute", "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.compute", "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.compute"], ["", "def", "forward", "(", "self", ",", "input_step", ",", "hidden", "=", "None", ")", ":", "\n", "\n", "        ", "if", "len", "(", "input_step", ".", "shape", ")", "==", "3", ":", "\n", "            ", "self", ".", "init_sequence", "(", "input_step", ".", "shape", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "input_step", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "logit", ",", "self", ".", "previous_state", "=", "self", ".", "compute", "(", "input_step", "[", "i", "]", ",", "self", ".", "previous_state", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "hidden", "is", "not", "None", ":", "\n", "                ", "logit", ",", "self", ".", "previous_state", "=", "self", ".", "compute", "(", "input_step", ",", "hidden", ")", "\n", "", "else", ":", "\n", "                ", "logit", ",", "self", ".", "previous_state", "=", "self", ".", "compute", "(", "input_step", ",", "self", ".", "previous_state", ")", "\n", "", "", "mlp", "=", "self", ".", "mlp", "(", "logit", ")", "\n", "out", "=", "self", ".", "out", "(", "mlp", ")", "\n", "self", ".", "previous_state", "=", "(", "out", ",", "self", ".", "previous_state", "[", "1", "]", ",", "self", ".", "previous_state", "[", "2", "]", ")", "\n", "\n", "return", "out", ",", "self", ".", "previous_state", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_rl.STM.init_sequence": [[267, 271], ["stm_rl.STM.create_new_state"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.create_new_state"], ["", "def", "init_sequence", "(", "self", ",", "batch_size", ",", "gpu_id", "=", "0", ")", ":", "\n", "        ", "\"\"\"Initializing the state.\"\"\"", "\n", "self", ".", "previous_state", "=", "self", ".", "create_new_state", "(", "batch_size", ",", "gpu_id", ")", "\n", "return", "self", ".", "previous_state", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_rl.STM.calculate_num_params": [[272, 278], ["stm_rl.STM.parameters", "p.data.view().size", "p.data.view"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size"], ["", "def", "calculate_num_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the total number of parameters.\"\"\"", "\n", "num_params", "=", "0", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "num_params", "+=", "p", ".", "data", ".", "view", "(", "-", "1", ")", ".", "size", "(", "0", ")", "\n", "", "return", "num_params", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_rl.op_att": [[7, 15], ["q.unsqueeze().repeat", "k.unsqueeze().repeat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.sum", "torch.tanh().unsqueeze", "v.unsqueeze().repeat().unsqueeze", "q.unsqueeze", "k.unsqueeze", "torch.tanh", "v.unsqueeze().repeat", "v.unsqueeze"], "function", ["None"], ["def", "op_att", "(", "q", ",", "k", ",", "v", ")", ":", "\n", "    ", "qq", "=", "q", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "k", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "kk", "=", "k", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "q", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "output", "=", "torch", ".", "matmul", "(", "F", ".", "tanh", "(", "qq", "*", "kk", ")", ".", "unsqueeze", "(", "4", ")", ",", "v", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "q", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", ".", "unsqueeze", "(", "3", ")", ")", "# BxNXNxd_kq BxNxNxd_v --> BxNXNxd_kqxd_v", "\n", "# print(output.shape)", "\n", "output", "=", "torch", ".", "sum", "(", "output", ",", "dim", "=", "2", ")", "# BxNxd_kqxd_v", "\n", "# print(output.shape)", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_rl.sdp_att": [[16, 23], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "k.permute"], "function", ["None"], ["", "def", "sdp_att", "(", "q", ",", "k", ",", "v", ")", ":", "\n", "    ", "dot_product", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "weights", "=", "F", ".", "softmax", "(", "dot_product", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# output is [B, H, N, V]", "\n", "output", "=", "torch", ".", "matmul", "(", "weights", ",", "v", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.a3c.A3CSAM.__init__": [[9, 52], ["super().__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "stm_rl.STM", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "a3c.A3CSAM.lstm.bias_ih.data.fill_", "a3c.A3CSAM.lstm.bias_hh.data.fill_", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "a3c.A3CSAM.apply", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "a3c.A3CSAM.conv1.weight.data.mul_", "a3c.A3CSAM.conv2.weight.data.mul_", "a3c.A3CSAM.conv3.weight.data.mul_", "a3c.A3CSAM.conv4.weight.data.mul_", "utils.norm_col_init", "a3c.A3CSAM.actor_linear.bias.data.fill_", "utils.norm_col_init", "a3c.A3CSAM.critic_linear.bias.data.fill_", "a3c.A3CSAM.train"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__", "home.repos.pwc.inspect_result.thaihungle_SAM.sam.utils.norm_col_init", "home.repos.pwc.inspect_result.thaihungle_SAM.sam.utils.norm_col_init", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.train_sam.train"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "action_space", ")", ":", "\n", "        ", "super", "(", "A3CSAM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_shape", "=", "num_inputs", "\n", "self", ".", "num_channel", "=", "num_inputs", "[", "0", "]", "\n", "self", ".", "noise", "=", "nn", ".", "Dropout", "(", "0.9", ")", "\n", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "num_channel", ",", "32", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "maxp1", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "maxp2", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "maxp3", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "maxp4", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "sam", "=", "STM", "(", "256", ",", "256", ",", "\n", "num_slot", "=", "8", ",", "mlp_size", "=", "128", ",", "\n", "slot_size", "=", "96", ",", "out_att_size", "=", "64", ",", "step", "=", "1", ",", "\n", "rel_size", "=", "96", ",", "rd", "=", "True", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTMCell", "(", "1024", ",", "256", ")", "\n", "self", ".", "lstm", ".", "bias_ih", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "lstm", ".", "bias_hh", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "num_outputs", "=", "action_space", ".", "n", "\n", "self", ".", "critic_linear", "=", "nn", ".", "Linear", "(", "512", ",", "1", ")", "\n", "self", ".", "actor_linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_outputs", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init", ")", "\n", "relu_gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", "\n", "self", ".", "conv1", ".", "weight", ".", "data", ".", "mul_", "(", "relu_gain", ")", "\n", "self", ".", "conv2", ".", "weight", ".", "data", ".", "mul_", "(", "relu_gain", ")", "\n", "self", ".", "conv3", ".", "weight", ".", "data", ".", "mul_", "(", "relu_gain", ")", "\n", "self", ".", "conv4", ".", "weight", ".", "data", ".", "mul_", "(", "relu_gain", ")", "\n", "self", ".", "actor_linear", ".", "weight", ".", "data", "=", "norm_col_init", "(", "\n", "self", ".", "actor_linear", ".", "weight", ".", "data", ",", "0.01", ")", "\n", "self", ".", "actor_linear", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "critic_linear", ".", "weight", ".", "data", "=", "norm_col_init", "(", "\n", "self", ".", "critic_linear", ".", "weight", ".", "data", ",", "1.0", ")", "\n", "self", ".", "critic_linear", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "\n", "\n", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.a3c.A3CSAM.forward": [[53, 81], ["torch.relu.view", "a3c.A3CSAM.lstm", "a3c.A3CSAM.sam", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs.permute.permute.permute", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu.size", "a3c.A3CSAM.critic_linear", "a3c.A3CSAM.actor_linear", "a3c.A3CSAM.maxp3", "a3c.A3CSAM.maxp4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "a3c.A3CSAM.conv3", "a3c.A3CSAM.conv4", "a3c.A3CSAM.conv3", "a3c.A3CSAM.conv4", "a3c.A3CSAM.maxp1", "a3c.A3CSAM.maxp2", "a3c.A3CSAM.maxp3", "a3c.A3CSAM.maxp4", "a3c.A3CSAM.conv1", "a3c.A3CSAM.conv2", "a3c.A3CSAM.conv3", "a3c.A3CSAM.conv4"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "inputs", ",", "(", "hx", ",", "cx", ",", "h2", ",", "c2", ")", "=", "inputs", "\n", "if", "self", ".", "input_shape", "[", "0", "]", "==", "3", "and", "self", ".", "input_shape", "[", "1", "]", "==", "12", ":", "\n", "            ", "inputs", "=", "inputs", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "maxp3", "(", "self", ".", "conv3", "(", "inputs", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "maxp4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "", "elif", "self", ".", "input_shape", "[", "1", "]", "==", "19", ":", "\n", "# inputs = inputs.permute(0, 3, 1, 2)", "\n", "            ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "inputs", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv4", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "self", ".", "maxp1", "(", "self", ".", "conv1", "(", "inputs", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "maxp2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "maxp3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "maxp4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "#x = self.noise(x)", "\n", "\n", "# print(hx.shape)", "\n", "# print(cx.shape)", "\n", "h2", ",", "c2", "=", "self", ".", "lstm", "(", "x", ",", "(", "h2", ",", "c2", ")", ")", "\n", "out", ",", "(", "hx", ",", "cx", ",", "_", ")", "=", "self", ".", "sam", "(", "h2", ",", "(", "hx", ",", "cx", ",", "None", ")", ")", "\n", "# h2,c2 = self.lstm(torch.cat([x, out], dim=-1), (h2,c2))", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "out", ",", "h2", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "self", ".", "critic_linear", "(", "x", ")", ",", "self", ".", "actor_linear", "(", "x", ")", ",", "(", "hx", ",", "cx", ",", "h2", ",", "c2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.MLP.__init__": [[26, 40], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "28", "*", "28", ",", "out_dim", "=", "10", ",", "hid_dim", "=", "-", "1", ",", "layers", "=", "1", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "layers", "\n", "if", "hid_dim", "<=", "0", ":", "\n", "            ", "self", ".", "layers", "=", "-", "1", "\n", "", "if", "self", ".", "layers", "<", "0", ":", "\n", "            ", "hid_dim", "=", "out_dim", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hid_dim", ")", "\n", "# linear layer (n_hidden -> hidden_2)", "\n", "if", "self", ".", "layers", ">", "0", ":", "\n", "            ", "self", ".", "fc2h", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "hid_dim", ",", "hid_dim", ")", "]", "*", "self", ".", "layers", ")", "\n", "# linear layer (n_hidden -> 10)", "\n", "", "if", "self", ".", "layers", ">=", "0", ":", "\n", "            ", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "hid_dim", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.MLP.forward": [[42, 50], ["stm_basic.MLP.fc1", "range", "stm_basic.MLP.fc3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "o", "=", "self", ".", "fc1", "(", "x", ")", "\n", "if", "self", ".", "layers", ">", "0", ":", "\n", "            ", "for", "l", "in", "range", "(", "self", ".", "layers", ")", ":", "\n", "                ", "o", "=", "self", ".", "fc2h", "[", "l", "]", "(", "o", ")", "\n", "", "", "if", "self", ".", "layers", ">=", "0", ":", "\n", "            ", "o", "=", "self", ".", "fc3", "(", "o", ")", "\n", "", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.__init__": [[52, 135], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "stm_basic.MLP", "stm_basic.MLP", "stm_basic.MLP", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "enumerate", "enumerate", "enumerate", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "setattr", "setattr", "setattr", "stm_basic.STM.register_parameter", "stm_basic.STM.register_parameter", "stm_basic.STM.register_parameter", "stm_basic.STM.register_parameter", "numpy.sqrt", "numpy.sqrt", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "str", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "str", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "str", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ",", "step", "=", "1", ",", "num_slot", "=", "8", ",", "\n", "mlp_size", "=", "128", ",", "slot_size", "=", "96", ",", "rel_size", "=", "96", ",", "\n", "out_att_size", "=", "64", ",", "rd", "=", "True", ",", "\n", "init_alphas", "=", "[", "None", ",", "None", ",", "None", "]", ",", "\n", "learn_init_mem", "=", "True", ",", "mlp_hid", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "STM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp_size", "=", "mlp_size", "\n", "self", ".", "slot_size", "=", "slot_size", "\n", "self", ".", "rel_size", "=", "rel_size", "\n", "self", ".", "rnn_hid", "=", "slot_size", "\n", "self", ".", "num_slot", "=", "num_slot", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "rd", "=", "rd", "\n", "self", ".", "learn_init_mem", "=", "learn_init_mem", "\n", "\n", "self", ".", "out_att_size", "=", "out_att_size", "\n", "\n", "self", ".", "qkv_projector", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "slot_size", ",", "num_slot", "*", "3", ")", "]", "*", "step", ")", "\n", "self", ".", "qkv_layernorm", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "LayerNorm", "(", "[", "slot_size", ",", "num_slot", "*", "3", "]", ")", "]", "*", "step", ")", "\n", "\n", "if", "init_alphas", "[", "0", "]", "is", "None", ":", "\n", "            ", "self", ".", "alpha1", "=", "[", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "]", "*", "step", "\n", "for", "ia", ",", "a", "in", "enumerate", "(", "self", ".", "alpha1", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'alpha1'", "+", "str", "(", "ia", ")", ",", "self", ".", "alpha1", "[", "ia", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "alpha1", "=", "[", "init_alphas", "[", "0", "]", "]", "*", "step", "\n", "\n", "", "if", "init_alphas", "[", "1", "]", "is", "None", ":", "\n", "            ", "self", ".", "alpha2", "=", "[", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "]", "*", "step", "\n", "for", "ia", ",", "a", "in", "enumerate", "(", "self", ".", "alpha2", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'alpha2'", "+", "str", "(", "ia", ")", ",", "self", ".", "alpha2", "[", "ia", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "alpha2", "=", "[", "init_alphas", "[", "1", "]", "]", "*", "step", "\n", "\n", "", "if", "init_alphas", "[", "2", "]", "is", "None", ":", "\n", "            ", "self", ".", "alpha3", "=", "[", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "]", "*", "step", "\n", "for", "ia", ",", "a", "in", "enumerate", "(", "self", ".", "alpha3", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'alpha3'", "+", "str", "(", "ia", ")", ",", "self", ".", "alpha3", "[", "ia", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "alpha3", "=", "[", "init_alphas", "[", "2", "]", "]", "*", "step", "\n", "\n", "\n", "", "self", ".", "input_projector", "=", "MLP", "(", "input_size", ",", "slot_size", ",", "hid_dim", "=", "mlp_hid", ")", "\n", "self", ".", "input_projector2", "=", "MLP", "(", "input_size", ",", "slot_size", ",", "hid_dim", "=", "mlp_hid", ")", "\n", "self", ".", "input_projector3", "=", "MLP", "(", "input_size", ",", "num_slot", ",", "hid_dim", "=", "mlp_hid", ")", "\n", "\n", "\n", "self", ".", "input_gate_projector", "=", "nn", ".", "Linear", "(", "self", ".", "slot_size", ",", "self", ".", "slot_size", "*", "2", ")", "\n", "self", ".", "memory_gate_projector", "=", "nn", ".", "Linear", "(", "self", ".", "slot_size", ",", "self", ".", "slot_size", "*", "2", ")", "\n", "# trainable scalar gate bias tensors", "\n", "self", ".", "forget_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "1.", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "input_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "0.", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n", "self", ".", "rel_projector", "=", "nn", ".", "Linear", "(", "slot_size", "*", "slot_size", ",", "rel_size", ")", "\n", "self", ".", "rel_projector2", "=", "nn", ".", "Linear", "(", "num_slot", "*", "slot_size", ",", "slot_size", ")", "\n", "self", ".", "rel_projector3", "=", "nn", ".", "Linear", "(", "num_slot", "*", "rel_size", ",", "out_att_size", ")", "\n", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "out_att_size", ",", "self", ".", "mlp_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "mlp_size", ",", "self", ".", "mlp_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "mlp_size", ",", "output_size", ")", "\n", "\n", "if", "self", ".", "learn_init_mem", ":", "\n", "            ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "self", ".", "register_parameter", "(", "'item_memory_state_bias'", ",", "\n", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "slot_size", ",", "self", ".", "slot_size", ")", ".", "cuda", "(", ")", ")", ")", "\n", "self", ".", "register_parameter", "(", "'rel_memory_state_bias'", ",", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "self", ".", "num_slot", ",", "self", ".", "slot_size", ",", "self", ".", "slot_size", ")", ".", "cuda", "(", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "self", ".", "register_parameter", "(", "'item_memory_state_bias'", ",", "\n", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "slot_size", ",", "self", ".", "slot_size", ")", ")", ")", "\n", "self", ".", "register_parameter", "(", "'rel_memory_state_bias'", ",", "\n", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "num_slot", ",", "self", ".", "slot_size", ",", "self", ".", "slot_size", ")", ")", ")", "\n", "\n", "", "stdev", "=", "1", "/", "(", "np", ".", "sqrt", "(", "self", ".", "slot_size", "+", "self", ".", "slot_size", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "item_memory_state_bias", ",", "-", "stdev", ",", "stdev", ")", "\n", "stdev", "=", "1", "/", "(", "np", ".", "sqrt", "(", "self", ".", "slot_size", "+", "self", ".", "slot_size", "+", "self", ".", "num_slot", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "rel_memory_state_bias", ",", "-", "stdev", ",", "stdev", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.create_new_state": [[137, 154], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "stm_basic.STM.item_memory_state_bias.clone().repeat", "stm_basic.STM.rel_memory_state_bias.clone().repeat", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "read_heads.cuda.cuda.cuda", "item_memory_state.cuda.cuda.cuda", "read_heads.cuda.cuda.cuda", "rel_memory_state.cuda.cuda.cuda", "stm_basic.STM.item_memory_state_bias.clone", "stm_basic.STM.rel_memory_state_bias.clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range"], "methods", ["None"], ["", "", "def", "create_new_state", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "learn_init_mem", ":", "\n", "            ", "read_heads", "=", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "out_att_size", ")", "\n", "item_memory_state", "=", "self", ".", "item_memory_state_bias", ".", "clone", "(", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "rel_memory_state", "=", "self", ".", "rel_memory_state_bias", ".", "clone", "(", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "read_heads", "=", "read_heads", ".", "cuda", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "item_memory_state", "=", "torch", ".", "stack", "(", "[", "torch", ".", "zeros", "(", "self", ".", "slot_size", ",", "self", ".", "slot_size", ")", "for", "_", "in", "range", "(", "batch_size", ")", "]", ")", "\n", "read_heads", "=", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "out_att_size", ")", "\n", "rel_memory_state", "=", "torch", ".", "stack", "(", "[", "torch", ".", "zeros", "(", "self", ".", "num_slot", ",", "self", ".", "slot_size", ",", "self", ".", "slot_size", ")", "for", "_", "in", "range", "(", "batch_size", ")", "]", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "item_memory_state", "=", "item_memory_state", ".", "cuda", "(", ")", "\n", "read_heads", "=", "read_heads", ".", "cuda", "(", ")", "\n", "rel_memory_state", "=", "rel_memory_state", ".", "cuda", "(", ")", "\n", "\n", "", "", "return", "read_heads", ",", "item_memory_state", ",", "rel_memory_state", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.compute_gates": [[157, 181], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "len", "inputs.view.view.view", "stm_basic.STM.input_gate_projector", "gate_inputs.unsqueeze.unsqueeze.unsqueeze", "stm_basic.STM.memory_gate_projector", "ValueError", "ValueError", "int"], "methods", ["None"], ["", "def", "compute_gates", "(", "self", ",", "inputs", ",", "memory", ")", ":", "\n", "\n", "        ", "memory", "=", "torch", ".", "tanh", "(", "memory", ")", "\n", "if", "len", "(", "inputs", ".", "shape", ")", "==", "3", ":", "\n", "            ", "if", "inputs", ".", "shape", "[", "1", "]", ">", "1", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"input seq length is larger than 1. create_gate function is meant to be called for each step, with input seq length of 1\"", ")", "\n", "", "inputs", "=", "inputs", ".", "view", "(", "inputs", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "gate_inputs", "=", "self", ".", "input_gate_projector", "(", "inputs", ")", "\n", "gate_inputs", "=", "gate_inputs", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "gate_memory", "=", "self", ".", "memory_gate_projector", "(", "memory", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"input shape of create_gate function is 2, expects 3\"", ")", "\n", "\n", "", "gates", "=", "gate_memory", "+", "gate_inputs", "\n", "gates", "=", "torch", ".", "split", "(", "gates", ",", "split_size_or_sections", "=", "int", "(", "gates", ".", "shape", "[", "2", "]", "/", "2", ")", ",", "dim", "=", "2", ")", "\n", "input_gate", ",", "forget_gate", "=", "gates", "\n", "assert", "input_gate", ".", "shape", "[", "2", "]", "==", "forget_gate", ".", "shape", "[", "2", "]", "\n", "\n", "input_gate", "=", "torch", ".", "sigmoid", "(", "input_gate", "+", "self", ".", "input_bias", ")", "\n", "forget_gate", "=", "torch", ".", "sigmoid", "(", "forget_gate", "+", "self", ".", "forget_bias", ")", "\n", "\n", "return", "input_gate", ",", "forget_gate", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.compute": [[182, 244], ["stm_basic.STM.input_projector", "stm_basic.STM.input_projector2", "stm_basic.STM.input_projector3", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "stm_basic.STM.compute_gates", "torch.softmax", "torch.softmax", "torch.softmax", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "range", "stm_basic.STM.rel_projector().view", "stm_basic.STM.rel_projector3", "stm_basic.STM.unsqueeze", "stm_basic.STM.unsqueeze", "stm_basic.STM.unsqueeze", "qkv.permute.permute.permute", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "stm_basic.op_att", "stm_basic.STM.rel_projector2", "torch.tanh", "torch.tanh", "torch.tanh", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "op_att.view().permute", "stm_basic.STM.rel_projector", "stm_basic.STM.unsqueeze", "stm_basic.STM.unsqueeze", "rel_memory_state.view", "op_att.view"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.compute_gates", "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.op_att"], ["", "def", "compute", "(", "self", ",", "input_step", ",", "prev_state", ")", ":", "\n", "\n", "        ", "hid", "=", "prev_state", "[", "0", "]", "\n", "item_memory_state", "=", "prev_state", "[", "1", "]", "\n", "rel_memory_state", "=", "prev_state", "[", "2", "]", "\n", "\n", "#transform input", "\n", "controller_outp", "=", "self", ".", "input_projector", "(", "input_step", ")", "\n", "controller_outp2", "=", "self", ".", "input_projector2", "(", "input_step", ")", "\n", "controller_outp3", "=", "self", ".", "input_projector3", "(", "input_step", ")", "\n", "\n", "\n", "#Mi write", "\n", "X", "=", "torch", ".", "matmul", "(", "controller_outp", ".", "unsqueeze", "(", "2", ")", ",", "controller_outp", ".", "unsqueeze", "(", "1", ")", ")", "# Bxdxd", "\n", "input_gate", ",", "forget_gate", "=", "self", ".", "compute_gates", "(", "controller_outp", ".", "unsqueeze", "(", "1", ")", ",", "item_memory_state", ")", "\n", "\n", "\n", "#Mr read", "\n", "controller_outp3", "=", "F", ".", "softmax", "(", "controller_outp3", ",", "dim", "=", "-", "1", ")", "\n", "controller_outp4", "=", "torch", ".", "einsum", "(", "'bn,bd,bndf->bf'", ",", "controller_outp3", ",", "controller_outp2", ",", "rel_memory_state", ")", "\n", "X2", "=", "torch", ".", "einsum", "(", "'bd,bf->bdf'", ",", "controller_outp4", ",", "controller_outp2", ")", "\n", "\n", "if", "self", ".", "rd", ":", "\n", "# Mi write gating", "\n", "            ", "R", "=", "input_gate", "*", "F", ".", "tanh", "(", "X", ")", "\n", "R", "+=", "forget_gate", "*", "item_memory_state", "\n", "", "else", ":", "\n", "#Mi write", "\n", "            ", "R", "=", "item_memory_state", "+", "torch", ".", "matmul", "(", "controller_outp", ".", "unsqueeze", "(", "2", ")", ",", "controller_outp", ".", "unsqueeze", "(", "1", ")", ")", "#Bxdxd", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "step", ")", ":", "\n", "#SAM", "\n", "            ", "qkv", "=", "self", ".", "qkv_projector", "[", "i", "]", "(", "R", "+", "self", ".", "alpha2", "[", "i", "]", "*", "X2", ")", "\n", "qkv", "=", "self", ".", "qkv_layernorm", "[", "i", "]", "(", "qkv", ")", "\n", "qkv", "=", "qkv", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "#Bx3Nxd", "\n", "\n", "q", ",", "k", ",", "v", "=", "torch", ".", "split", "(", "qkv", ",", "[", "self", ".", "num_slot", "]", "*", "3", ",", "1", ")", "#BxNxd", "\n", "\n", "\n", "R0", "=", "op_att", "(", "q", ",", "k", ",", "v", ")", "#BxNxdxd", "\n", "\n", "#Mr transfer to Mi", "\n", "R2", "=", "self", ".", "rel_projector2", "(", "R0", ".", "view", "(", "R0", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "R0", ".", "shape", "[", "3", "]", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "R", "=", "R", "+", "self", ".", "alpha3", "[", "i", "]", "*", "R2", "\n", "\n", "#Mr write", "\n", "rel_memory_state", "=", "self", ".", "alpha1", "[", "i", "]", "*", "rel_memory_state", "+", "R0", "\n", "\n", "#Mr transfer to output", "\n", "", "r_vec", "=", "self", ".", "rel_projector", "(", "rel_memory_state", ".", "view", "(", "rel_memory_state", ".", "shape", "[", "0", "]", ",", "\n", "rel_memory_state", ".", "shape", "[", "1", "]", ",", "\n", "-", "1", ")", ")", ".", "view", "(", "input_step", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "rel_projector3", "(", "r_vec", ")", "\n", "\n", "# if self.gating_after:", "\n", "#     #Mi write gating", "\n", "#     input_gate, forget_gate = self.compute_gates(controller_outp.unsqueeze(1), R)", "\n", "#     if self.rd:", "\n", "#         R = input_gate * torch.tanh(R)", "\n", "#         R += forget_gate * item_memory_state", "\n", "\n", "return", "out", ",", "(", "out", ",", "R", ",", "rel_memory_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.forward": [[245, 260], ["stm_basic.STM.mlp", "stm_basic.STM.out", "len", "stm_basic.STM.init_sequence", "range", "stm_basic.STM.compute", "stm_basic.STM.compute", "stm_basic.STM.compute"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.init_sequence", "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.compute", "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.compute", "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.compute"], ["", "def", "forward", "(", "self", ",", "input_step", ",", "hidden", "=", "None", ")", ":", "\n", "\n", "        ", "if", "len", "(", "input_step", ".", "shape", ")", "==", "3", ":", "\n", "            ", "self", ".", "init_sequence", "(", "input_step", ".", "shape", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "input_step", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "logit", ",", "self", ".", "previous_state", "=", "self", ".", "compute", "(", "input_step", "[", "i", "]", ",", "self", ".", "previous_state", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "hidden", "is", "not", "None", ":", "\n", "                ", "logit", ",", "hidden", "=", "self", ".", "compute", "(", "input_step", ",", "hidden", ")", "\n", "", "else", ":", "\n", "                ", "logit", ",", "self", ".", "previous_state", "=", "self", ".", "compute", "(", "input_step", ",", "self", ".", "previous_state", ")", "\n", "", "", "mlp", "=", "self", ".", "mlp", "(", "logit", ")", "\n", "out", "=", "self", ".", "out", "(", "mlp", ")", "\n", "return", "out", ",", "self", ".", "previous_state", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.init_sequence": [[261, 264], ["stm_basic.STM.create_new_state"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.create_new_state"], ["", "def", "init_sequence", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"Initializing the state.\"\"\"", "\n", "self", ".", "previous_state", "=", "self", ".", "create_new_state", "(", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.calculate_num_params": [[265, 271], ["stm_basic.STM.parameters", "p.data.view().size", "p.data.view"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size"], ["", "def", "calculate_num_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the total number of parameters.\"\"\"", "\n", "num_params", "=", "0", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "num_params", "+=", "p", ".", "data", ".", "view", "(", "-", "1", ")", ".", "size", "(", "0", ")", "\n", "", "return", "num_params", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.op_att": [[7, 15], ["q.unsqueeze().repeat", "k.unsqueeze().repeat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.sum", "torch.tanh().unsqueeze", "v.unsqueeze().repeat().unsqueeze", "q.unsqueeze", "k.unsqueeze", "torch.tanh", "v.unsqueeze().repeat", "v.unsqueeze"], "function", ["None"], ["def", "op_att", "(", "q", ",", "k", ",", "v", ")", ":", "\n", "    ", "qq", "=", "q", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "k", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "kk", "=", "k", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "q", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "output", "=", "torch", ".", "matmul", "(", "F", ".", "tanh", "(", "qq", "*", "kk", ")", ".", "unsqueeze", "(", "4", ")", ",", "v", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "q", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", ".", "unsqueeze", "(", "3", ")", ")", "# BxNXNxd_kq BxNxNxd_v --> BxNXNxd_kqxd_v", "\n", "# print(output.shape)", "\n", "output", "=", "torch", ".", "sum", "(", "output", ",", "dim", "=", "2", ")", "# BxNxd_kqxd_v", "\n", "# print(output.shape)", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.sdp_att": [[16, 23], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "k.permute"], "function", ["None"], ["", "def", "sdp_att", "(", "q", ",", "k", ",", "v", ")", ":", "\n", "    ", "dot_product", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "weights", "=", "F", ".", "softmax", "(", "dot_product", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# output is [B, H, N, V]", "\n", "output", "=", "torch", ".", "matmul", "(", "weights", ",", "v", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.qamodel.QAmodel.__init__": [[16, 31], ["torch.Module.__init__", "qamodel.InputModule", "baselines.sam.stm_basic.STM", "qamodel.InferenceModule", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "Dict", "[", "str", ",", "Any", "]", ")", ":", "\n", "        ", "super", "(", "QAmodel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp_size", "=", "config", "[", "\"hidden_size\"", "]", "\n", "self", ".", "input_module", "=", "InputModule", "(", "config", ")", "\n", "self", ".", "update_module", "=", "STM", "(", "config", "[", "\"symbol_size\"", "]", ",", "output_size", "=", "config", "[", "\"symbol_size\"", "]", ",", "\n", "init_alphas", "=", "[", "1", ",", "None", ",", "0", "]", ",", "\n", "learn_init_mem", "=", "True", ",", "mlp_hid", "=", "config", "[", "'hidden_size'", "]", ",", "\n", "num_slot", "=", "config", "[", "\"role_size\"", "]", ",", "\n", "slot_size", "=", "config", "[", "\"entity_size\"", "]", ",", "\n", "rel_size", "=", "96", ")", "\n", "\n", "self", ".", "infer_module", "=", "InferenceModule", "(", "config", "=", "config", ")", "\n", "\n", "self", ".", "Z", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "config", "[", "\"entity_size\"", "]", ",", "config", "[", "\"vocab_size\"", "]", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "Z", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.qamodel.QAmodel.forward": [[32, 38], ["qamodel.QAmodel.input_module", "qamodel.QAmodel.update_module", "R.permute.permute.permute", "qamodel.QAmodel.infer_module", "story_embed.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "story", ":", "torch", ".", "Tensor", ",", "query", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "story_embed", ",", "query_embed", "=", "self", ".", "input_module", "(", "story", ",", "query", ")", "\n", "out", ",", "(", "_", ",", "_", ",", "R", ")", "=", "self", ".", "update_module", "(", "story_embed", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "R", "=", "R", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "logits", "=", "self", ".", "infer_module", "(", "query_embed", ",", "R", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.qamodel.InputModule.__init__": [[42, 51], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "Dict", "[", "str", ",", "Any", "]", ")", ":", "\n", "        ", "super", "(", "InputModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embed", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "config", "[", "\"vocab_size\"", "]", ",", "\n", "embedding_dim", "=", "config", "[", "\"symbol_size\"", "]", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "word_embed", ".", "weight", ",", "-", "config", "[", "\"init_limit\"", "]", ",", "config", "[", "\"init_limit\"", "]", ")", "\n", "# positional embeddings", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "config", "[", "\"max_seq\"", "]", ",", "config", "[", "\"symbol_size\"", "]", ")", ")", "\n", "nn", ".", "init", ".", "ones_", "(", "self", ".", "pos_embed", ".", "data", ")", "\n", "self", ".", "pos_embed", ".", "data", "/=", "config", "[", "\"max_seq\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.qamodel.InputModule.forward": [[52, 60], ["qamodel.InputModule.word_embed", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "qamodel.InputModule.word_embed", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "story", ":", "torch", ".", "Tensor", ",", "query", ":", "torch", ".", "Tensor", ")", ":", "\n", "# Sentence embedding", "\n", "        ", "sentence_embed", "=", "self", ".", "word_embed", "(", "story", ")", "# [b, s, w, e]", "\n", "sentence_sum", "=", "torch", ".", "einsum", "(", "'bswe,we->bse'", ",", "sentence_embed", ",", "self", ".", "pos_embed", "[", ":", "sentence_embed", ".", "shape", "[", "2", "]", "]", ")", "\n", "# Query embedding", "\n", "query_embed", "=", "self", ".", "word_embed", "(", "query", ")", "# [b, w, e]", "\n", "query_sum", "=", "torch", ".", "einsum", "(", "'bwe,we->be'", ",", "query_embed", ",", "self", ".", "pos_embed", "[", ":", "query_embed", ".", "shape", "[", "1", "]", "]", ")", "\n", "return", "sentence_sum", ",", "query_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.qamodel.InferenceModule.__init__": [[64, 81], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "baselines.sam.utils.OptionalLayer", "baselines.sam.utils.MLP", "baselines.sam.utils.MLP", "baselines.sam.utils.LayerNorm", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "Dict", "[", "str", ",", "Any", "]", ")", ":", "\n", "        ", "super", "(", "InferenceModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_size", "=", "config", "[", "\"hidden_size\"", "]", "\n", "self", ".", "ent_size", "=", "config", "[", "\"entity_size\"", "]", "\n", "self", ".", "role_size", "=", "config", "[", "\"role_size\"", "]", "\n", "self", ".", "symbol_size", "=", "config", "[", "\"symbol_size\"", "]", "\n", "# output embeddings", "\n", "self", ".", "Z", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "config", "[", "\"entity_size\"", "]", ",", "config", "[", "\"vocab_size\"", "]", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "Z", ".", "data", ")", "\n", "\n", "# TODO: remove unused entity head?", "\n", "self", ".", "e", "=", "nn", ".", "ModuleList", "(", "[", "MLP", "(", "equation", "=", "'be,er->br'", ",", "in_features", "=", "self", ".", "symbol_size", ",", "\n", "hidden_size", "=", "self", ".", "hidden_size", ",", "out_size", "=", "self", ".", "ent_size", ")", "for", "_", "in", "range", "(", "2", ")", "]", ")", "\n", "self", ".", "r", "=", "nn", ".", "ModuleList", "(", "[", "MLP", "(", "equation", "=", "'be,er->br'", ",", "in_features", "=", "self", ".", "symbol_size", ",", "\n", "hidden_size", "=", "self", ".", "hidden_size", ",", "out_size", "=", "self", ".", "role_size", ")", "for", "_", "in", "range", "(", "3", ")", "]", ")", "\n", "self", ".", "l1", ",", "self", ".", "l2", ",", "self", ".", "l3", "=", "[", "OptionalLayer", "(", "LayerNorm", "(", "hidden_size", "=", "self", ".", "ent_size", ")", ",", "active", "=", "config", "[", "\"LN\"", "]", ")", "\n", "for", "_", "in", "range", "(", "3", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.qamodel.InferenceModule.forward": [[82, 93], ["qamodel.InferenceModule.l1", "qamodel.InferenceModule.l2", "qamodel.InferenceModule.l3", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "module", "module", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "query_embed", ":", "torch", ".", "Tensor", ",", "TPR", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "e1", ",", "e2", "=", "[", "module", "(", "query_embed", ")", "for", "module", "in", "self", ".", "e", "]", "\n", "r1", ",", "r2", ",", "r3", "=", "[", "module", "(", "query_embed", ")", "for", "module", "in", "self", ".", "r", "]", "\n", "\n", "i1", "=", "self", ".", "l1", "(", "torch", ".", "einsum", "(", "'be,br,berf->bf'", ",", "e1", ",", "r1", ",", "TPR", ")", ")", "\n", "i2", "=", "self", ".", "l2", "(", "torch", ".", "einsum", "(", "'be,br,berf->bf'", ",", "i1", ",", "r2", ",", "TPR", ")", ")", "\n", "i3", "=", "self", ".", "l3", "(", "torch", ".", "einsum", "(", "'be,br,berf->bf'", ",", "i2", ",", "r3", ",", "TPR", ")", ")", "\n", "\n", "step_sum", "=", "i1", "+", "i2", "+", "i3", "\n", "logits", "=", "torch", ".", "einsum", "(", "'bf,fl->bl'", ",", "step_sum", ",", "self", ".", "Z", ".", "data", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.utils.MLP.__init__": [[10, 22], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "equation", ",", "in_features", ",", "hidden_size", ",", "out_size", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "equation", "=", "equation", "\n", "# Layers", "\n", "# 1", "\n", "self", ".", "W1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "in_features", ",", "hidden_size", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W1", ".", "data", ")", "\n", "self", ".", "b1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "hidden_size", ")", ")", "\n", "# 2", "\n", "self", ".", "W2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "hidden_size", ",", "out_size", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W2", ".", "data", ")", "\n", "self", ".", "b2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.utils.MLP.forward": [[23, 27], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "hidden", "=", "torch", ".", "tanh", "(", "torch", ".", "einsum", "(", "self", ".", "equation", ",", "x", ",", "self", ".", "W1", ")", "+", "self", ".", "b1", ")", "\n", "out", "=", "torch", ".", "tanh", "(", "torch", ".", "einsum", "(", "self", ".", "equation", ",", "hidden", ",", "self", ".", "W2", ")", "+", "self", ".", "b2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.utils.OptionalLayer.__init__": [[30, 34], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layer", ":", "nn", ".", "Module", ",", "active", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "OptionalLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "layer", "\n", "self", ".", "active", "=", "active", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.utils.OptionalLayer.forward": [[35, 39], ["utils.OptionalLayer.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "self", ".", "active", ":", "\n", "            ", "return", "self", ".", "layer", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.utils.LayerNorm.__init__": [[42, 48], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ":", "int", ",", "eps", ":", "float", "=", "1e-12", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "gain", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "hidden_size", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "hidden_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.utils.LayerNorm.forward": [[49, 54], ["x.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "mu", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "sigma", "=", "(", "x", "-", "mu", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "normalized", "=", "(", "x", "-", "mu", ")", "/", "(", "torch", ".", "sqrt", "(", "sigma", "+", "self", ".", "eps", ")", ")", "\n", "return", "normalized", "*", "self", ".", "gain", "+", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.utils.WarmupScheduler.__init__": [[57, 61], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ":", "optim", ".", "Optimizer", ",", "multiplier", ":", "float", ",", "steps", ":", "int", ")", ":", "\n", "        ", "self", ".", "multiplier", "=", "multiplier", "\n", "self", ".", "steps", "=", "steps", "\n", "super", "(", "WarmupScheduler", ",", "self", ")", ".", "__init__", "(", "optimizer", "=", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.utils.WarmupScheduler.get_lr": [[62, 66], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", "<", "self", ".", "steps", ":", "\n", "            ", "return", "[", "base_lr", "*", "self", ".", "multiplier", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "", "return", "self", ".", "base_lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.utils.WarmupScheduler.decay_lr": [[67, 69], ["None"], "methods", ["None"], ["", "def", "decay_lr", "(", "self", ",", "decay_factor", ":", "float", ")", ":", "\n", "        ", "self", ".", "base_lrs", "=", "[", "decay_factor", "*", "base_lr", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.utils.setup_logger": [[73, 84], ["logging.getLogger", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.setLevel", "logging.getLogger.addHandler", "logging.getLogger.addHandler"], "function", ["None"], ["", "", "def", "setup_logger", "(", "logger_name", ",", "log_file", ",", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "l", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s : %(message)s'", ")", "\n", "fileHandler", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "mode", "=", "'w'", ")", "\n", "fileHandler", ".", "setFormatter", "(", "formatter", ")", "\n", "streamHandler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "streamHandler", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "l", ".", "setLevel", "(", "level", ")", "\n", "l", ".", "addHandler", "(", "fileHandler", ")", "\n", "l", ".", "addHandler", "(", "streamHandler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.utils.read_config": [[86, 90], ["json.load", "open"], "function", ["None"], ["", "def", "read_config", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"Read JSON config.\"\"\"", "\n", "json_object", "=", "json", ".", "load", "(", "open", "(", "file_path", ",", "'r'", ")", ")", "\n", "return", "json_object", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.utils.norm_col_init": [[92, 96], ["torch.randn", "torch.randn", "torch.randn", "weights.size", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "function", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size"], ["", "def", "norm_col_init", "(", "weights", ",", "std", "=", "1.0", ")", ":", "\n", "    ", "x", "=", "torch", ".", "randn", "(", "weights", ".", "size", "(", ")", ")", "\n", "x", "*=", "std", "/", "torch", ".", "sqrt", "(", "(", "x", "**", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.utils.ensure_shared_grads": [[98, 108], ["zip", "model.to().parameters", "shared_model.parameters", "model.to", "param.grad.cpu"], "function", ["None"], ["", "def", "ensure_shared_grads", "(", "model", ",", "shared_model", ",", "gpu", "=", "False", ")", ":", "\n", "    ", "for", "param", ",", "shared_param", "in", "zip", "(", "model", ".", "to", "(", "\"cpu\"", ")", ".", "parameters", "(", ")", ",", "\n", "shared_model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "if", "shared_param", ".", "grad", "is", "not", "None", "and", "not", "gpu", ":", "\n", "            ", "return", "\n", "", "elif", "not", "gpu", ":", "\n", "            ", "shared_param", ".", "_grad", "=", "param", ".", "grad", "\n", "", "else", ":", "\n", "            ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "                ", "shared_param", ".", "_grad", "=", "param", ".", "grad", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.sam.utils.weights_init": [[110, 126], ["classname.find", "list", "numpy.prod", "numpy.sqrt", "m.weight.data.uniform_", "m.bias.data.fill_", "m.weight.data.size", "numpy.prod", "classname.find", "list", "numpy.sqrt", "m.weight.data.uniform_", "m.bias.data.fill_", "m.weight.data.size"], "function", ["home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size", "home.repos.pwc.inspect_result.thaihungle_SAM.nvm.lstm_baseline.LSTMBaseline.size"], ["", "", "", "", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "weight_shape", "=", "list", "(", "m", ".", "weight", ".", "data", ".", "size", "(", ")", ")", "\n", "fan_in", "=", "np", ".", "prod", "(", "weight_shape", "[", "1", ":", "4", "]", ")", "\n", "fan_out", "=", "np", ".", "prod", "(", "weight_shape", "[", "2", ":", "4", "]", ")", "*", "weight_shape", "[", "0", "]", "\n", "w_bound", "=", "np", ".", "sqrt", "(", "6.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "w_bound", ",", "w_bound", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "weight_shape", "=", "list", "(", "m", ".", "weight", ".", "data", ".", "size", "(", ")", ")", "\n", "fan_in", "=", "weight_shape", "[", "1", "]", "\n", "fan_out", "=", "weight_shape", "[", "0", "]", "\n", "w_bound", "=", "np", ".", "sqrt", "(", "6.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "w_bound", ",", "w_bound", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.test_sam.test": [[14, 114], ["print", "tensorboard_logger.configure", "setproctitle.setproctitle", "baselines.sam.utils.setup_logger", "logging.getLogger", "vars", "vars.keys", "torch.manual_seed", "environment.atari_env", "time.time", "player_util_sam.Agent", "baselines.sam.a3c.A3CSAM", "player_util_sam.Agent.env.reset", "torch.from_numpy().float", "log[].info", "torch.cuda.manual_seed", "player_util_sam.Agent.action_test", "torch.from_numpy", "torch.cuda.device", "player_util_sam.Agent.model.cuda", "player_util_sam.Agent.state.cuda", "player_util_sam.Agent.model.eval", "player_util_sam.Agent.env.reset", "torch.from_numpy().float", "player_util_sam.Agent.model.load_state_dict", "avg_reward.append", "log[].info", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "player_util_sam.Agent.env.reset", "time.sleep", "torch.from_numpy().float", "torch.cuda.device", "player_util_sam.Agent.model.load_state_dict", "shared_model.state_dict", "torch.from_numpy", "torch.cuda.device", "player_util_sam.Agent.state.cuda", "numpy.mean", "len", "avg_reward.pop", "shared_model.state_dict", "time.strftime", "numpy.mean", "player_util_sam.Agent.model.state_dict", "torch.save", "torch.from_numpy", "torch.cuda.device", "player_util_sam.Agent.state.cuda", "time.gmtime", "torch.cuda.device", "player_util_sam.Agent.model.state_dict", "torch.save", "time.time"], "function", ["home.repos.pwc.inspect_result.thaihungle_SAM.sam.utils.setup_logger", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.atari_env", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.reset", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.player_util_sam.Agent.action_test", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.reset", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.reset"], ["def", "test", "(", "args", ",", "shared_model", ",", "env_conf", ")", ":", "\n", "    ", "log_dir", "=", "args", ".", "log_dir", "+", "f\"/{args.env}-{args.skip_rate}\"", "\n", "print", "(", "log_dir", ")", "\n", "configure", "(", "log_dir", ")", "\n", "\n", "ptitle", "(", "'Test Agent'", ")", "\n", "gpu_id", "=", "args", ".", "gpu_ids", "[", "-", "1", "]", "\n", "log", "=", "{", "}", "\n", "setup_logger", "(", "'{}_log'", ".", "format", "(", "args", ".", "env", ")", ",", "r'{0}{1}_log'", ".", "format", "(", "\n", "log_dir", ",", "args", ".", "env", ")", ")", "\n", "log", "[", "'{}_log'", ".", "format", "(", "args", ".", "env", ")", "]", "=", "logging", ".", "getLogger", "(", "'{}_log'", ".", "format", "(", "\n", "args", ".", "env", ")", ")", "\n", "d_args", "=", "vars", "(", "args", ")", "\n", "for", "k", "in", "d_args", ".", "keys", "(", ")", ":", "\n", "        ", "log", "[", "'{}_log'", ".", "format", "(", "args", ".", "env", ")", "]", ".", "info", "(", "'{0}: {1}'", ".", "format", "(", "k", ",", "d_args", "[", "k", "]", ")", ")", "\n", "\n", "", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "", "env", "=", "atari_env", "(", "args", ".", "env", ",", "env_conf", ",", "args", ")", "\n", "reward_sum", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "num_tests", "=", "0", "\n", "num_steps", "=", "0", "\n", "reward_total_sum", "=", "0", "\n", "player", "=", "Agent", "(", "None", ",", "env", ",", "args", ",", "None", ")", "\n", "player", ".", "gpu_id", "=", "gpu_id", "\n", "player", ".", "model", "=", "A3CSAM", "(", "player", ".", "env", ".", "observation_space", ".", "shape", ",", "\n", "player", ".", "env", ".", "action_space", ")", "\n", "\n", "player", ".", "state", "=", "player", ".", "env", ".", "reset", "(", ")", "\n", "player", ".", "eps_len", "+=", "2", "\n", "player", ".", "state", "=", "torch", ".", "from_numpy", "(", "player", ".", "state", ")", ".", "float", "(", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "            ", "player", ".", "model", "=", "player", ".", "model", ".", "cuda", "(", ")", "\n", "player", ".", "state", "=", "player", ".", "state", ".", "cuda", "(", ")", "\n", "", "", "flag", "=", "True", "\n", "max_score", "=", "0", "\n", "avg_reward", "=", "[", "]", "\n", "while", "True", ":", "\n", "        ", "if", "flag", ":", "\n", "            ", "if", "gpu_id", ">=", "0", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "                    ", "player", ".", "model", ".", "load_state_dict", "(", "shared_model", ".", "state_dict", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "player", ".", "model", ".", "load_state_dict", "(", "shared_model", ".", "state_dict", "(", ")", ")", "\n", "", "player", ".", "model", ".", "eval", "(", ")", "\n", "flag", "=", "False", "\n", "\n", "", "player", ".", "action_test", "(", ")", "\n", "reward_sum", "+=", "player", ".", "reward", "\n", "if", "player", ".", "done", "and", "not", "player", ".", "info", ":", "\n", "            ", "state", "=", "player", ".", "env", ".", "reset", "(", ")", "\n", "player", ".", "eps_len", "+=", "2", "\n", "player", ".", "state", "=", "torch", ".", "from_numpy", "(", "state", ")", ".", "float", "(", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "                    ", "player", ".", "state", "=", "player", ".", "state", ".", "cuda", "(", ")", "\n", "", "", "", "elif", "player", ".", "info", ":", "\n", "            ", "avg_reward", ".", "append", "(", "reward_sum", ")", "\n", "flag", "=", "True", "\n", "num_tests", "+=", "1", "\n", "reward_total_sum", "+=", "reward_sum", "\n", "reward_mean", "=", "reward_total_sum", "/", "num_tests", "\n", "num_steps", "+=", "player", ".", "eps_len", "\n", "\n", "log", "[", "'{}_log'", ".", "format", "(", "args", ".", "env", ")", "]", ".", "info", "(", "\n", "\"Time {0}, episode reward {1}, episode length {2}, reward mean {3:.4f} episode {4}\"", ".", "\n", "format", "(", "\n", "time", ".", "strftime", "(", "\"%Hh %Mm %Ss\"", ",", "\n", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", ",", "\n", "reward_sum", ",", "player", ".", "eps_len", ",", "np", ".", "mean", "(", "avg_reward", ")", ",", "num_tests", ")", ")", "\n", "log_value", "(", "'accum_reward'", ",", "reward_mean", ",", "num_tests", ")", "\n", "log_value", "(", "'reward'", ",", "reward_sum", ",", "num_tests", ")", "\n", "log_value", "(", "'avg_reward'", ",", "np", ".", "mean", "(", "avg_reward", ")", ",", "num_steps", ")", "\n", "if", "len", "(", "avg_reward", ")", ">=", "100", ":", "\n", "                ", "avg_reward", ".", "pop", "(", "0", ")", "\n", "\n", "", "if", "args", ".", "save_max", "and", "reward_sum", ">=", "max_score", ":", "\n", "                ", "max_score", "=", "reward_sum", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "                    ", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "                        ", "state_to_save", "=", "player", ".", "model", ".", "state_dict", "(", ")", "\n", "torch", ".", "save", "(", "state_to_save", ",", "'{0}{1}.dat'", ".", "format", "(", "\n", "args", ".", "save_model_dir", ",", "args", ".", "env", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "state_to_save", "=", "player", ".", "model", ".", "state_dict", "(", ")", "\n", "torch", ".", "save", "(", "state_to_save", ",", "'{0}{1}.dat'", ".", "format", "(", "\n", "args", ".", "save_model_dir", ",", "args", ".", "env", ")", ")", "\n", "\n", "", "", "reward_sum", "=", "0", "\n", "player", ".", "eps_len", "=", "0", "\n", "state", "=", "player", ".", "env", ".", "reset", "(", ")", "\n", "player", ".", "eps_len", "+=", "2", "\n", "time", ".", "sleep", "(", "10", ")", "\n", "player", ".", "state", "=", "torch", ".", "from_numpy", "(", "state", ")", ".", "float", "(", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "                    ", "player", ".", "state", "=", "player", ".", "state", ".", "cuda", "(", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.shared_optim.SharedRMSprop.__init__": [[12, 37], ["collections.defaultdict", "torch.Optimizer.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "p.data.new().resize_as_().zero_", "p.data.new().resize_as_().zero_", "p.data.new().resize_as_().zero_", "p.data.new().resize_as_", "p.data.new().resize_as_", "p.data.new().resize_as_", "p.data.new", "p.data.new", "p.data.new"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["def", "__init__", "(", "self", ",", "\n", "params", ",", "\n", "lr", "=", "7e-4", ",", "\n", "alpha", "=", "0.99", ",", "\n", "eps", "=", "0.1", ",", "\n", "weight_decay", "=", "0", ",", "\n", "momentum", "=", "0", ",", "\n", "centered", "=", "False", ")", ":", "\n", "        ", "defaults", "=", "defaultdict", "(", "\n", "lr", "=", "lr", ",", "\n", "alpha", "=", "alpha", ",", "\n", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "momentum", "=", "momentum", ",", "\n", "centered", "=", "centered", ")", "\n", "super", "(", "SharedRMSprop", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "state", "[", "'step'", "]", "=", "torch", ".", "zeros", "(", "1", ")", "\n", "state", "[", "'grad_avg'", "]", "=", "p", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "p", ".", "data", ")", ".", "zero_", "(", ")", "\n", "state", "[", "'square_avg'", "]", "=", "p", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "p", ".", "data", ")", ".", "zero_", "(", ")", "\n", "state", "[", "'momentum_buffer'", "]", "=", "p", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "\n", "p", ".", "data", ")", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.shared_optim.SharedRMSprop.share_memory": [[38, 46], ["state[].share_memory_", "state[].share_memory_", "state[].share_memory_", "state[].share_memory_"], "methods", ["None"], ["", "", "", "def", "share_memory", "(", "self", ")", ":", "\n", "        ", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "state", "[", "'square_avg'", "]", ".", "share_memory_", "(", ")", "\n", "state", "[", "'step'", "]", ".", "share_memory_", "(", ")", "\n", "state", "[", "'grad_avg'", "]", ".", "share_memory_", "(", ")", "\n", "state", "[", "'momentum_buffer'", "]", ".", "share_memory_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.shared_optim.SharedRMSprop.step": [[47, 94], ["closure", "square_avg.mul_().addcmul_", "RuntimeError", "grad.add.add.add", "grad_avg.mul_().add_", "square_avg.addcmul().sqrt().add_", "square_avg.sqrt().add_", "buf.mul_().addcdiv_", "p.data.add_", "p.data.addcdiv_", "square_avg.mul_", "grad_avg.mul_", "square_avg.addcmul().sqrt", "square_avg.sqrt", "buf.mul_", "square_avg.addcmul"], "methods", ["None"], ["", "", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'RMSprop does not support sparse gradients'", ")", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "square_avg", "=", "state", "[", "'square_avg'", "]", "\n", "alpha", "=", "group", "[", "'alpha'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "grad", "=", "grad", ".", "add", "(", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "", "square_avg", ".", "mul_", "(", "alpha", ")", ".", "addcmul_", "(", "1", "-", "alpha", ",", "grad", ",", "grad", ")", "\n", "\n", "if", "group", "[", "'centered'", "]", ":", "\n", "                    ", "grad_avg", "=", "state", "[", "'grad_avg'", "]", "\n", "grad_avg", ".", "mul_", "(", "alpha", ")", ".", "add_", "(", "1", "-", "alpha", ",", "grad", ")", "\n", "avg", "=", "square_avg", ".", "addcmul", "(", "-", "1", ",", "grad_avg", ",", "\n", "grad_avg", ")", ".", "sqrt", "(", ")", ".", "add_", "(", "\n", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "avg", "=", "square_avg", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "if", "group", "[", "'momentum'", "]", ">", "0", ":", "\n", "                    ", "buf", "=", "state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "group", "[", "'momentum'", "]", ")", ".", "addcdiv_", "(", "grad", ",", "avg", ")", "\n", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "'lr'", "]", ",", "buf", ")", "\n", "", "else", ":", "\n", "                    ", "p", ".", "data", ".", "addcdiv_", "(", "-", "group", "[", "'lr'", "]", ",", "grad", ",", "avg", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.shared_optim.SharedAdam.__init__": [[100, 123], ["collections.defaultdict", "torch.Optimizer.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "p.data.new().resize_as_().zero_", "p.data.new().resize_as_().zero_", "p.data.new().resize_as_().zero_", "p.data.new().resize_as_", "p.data.new().resize_as_", "p.data.new().resize_as_", "p.data.new", "p.data.new", "p.data.new"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["def", "__init__", "(", "self", ",", "\n", "params", ",", "\n", "lr", "=", "1e-3", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "eps", "=", "1e-3", ",", "\n", "weight_decay", "=", "0", ",", "\n", "amsgrad", "=", "False", ")", ":", "\n", "        ", "defaults", "=", "defaultdict", "(", "\n", "lr", "=", "lr", ",", "\n", "betas", "=", "betas", ",", "\n", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "amsgrad", "=", "amsgrad", ")", "\n", "super", "(", "SharedAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "state", "[", "'step'", "]", "=", "torch", ".", "zeros", "(", "1", ")", "\n", "state", "[", "'exp_avg'", "]", "=", "p", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "p", ".", "data", ")", ".", "zero_", "(", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "p", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "p", ".", "data", ")", ".", "zero_", "(", ")", "\n", "state", "[", "'max_exp_avg_sq'", "]", "=", "p", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "\n", "p", ".", "data", ")", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.shared_optim.SharedAdam.share_memory": [[124, 132], ["state[].share_memory_", "state[].share_memory_", "state[].share_memory_", "state[].share_memory_"], "methods", ["None"], ["", "", "", "def", "share_memory", "(", "self", ")", ":", "\n", "        ", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "state", "[", "'step'", "]", ".", "share_memory_", "(", ")", "\n", "state", "[", "'exp_avg'", "]", ".", "share_memory_", "(", ")", "\n", "state", "[", "'exp_avg_sq'", "]", ".", "share_memory_", "(", ")", "\n", "state", "[", "'max_exp_avg_sq'", "]", ".", "share_memory_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.shared_optim.SharedAdam.step": [[133, 187], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "p.data.addcdiv_", "RuntimeError", "grad.add.add.add", "torch.max", "torch.max", "torch.max", "torch.max", "max_exp_avg_sq.sqrt().add_", "exp_avg_sq.sqrt().add_", "exp_avg.mul_", "exp_avg_sq.mul_", "state[].item", "state[].item", "math.sqrt", "max_exp_avg_sq.sqrt", "exp_avg_sq.sqrt"], "methods", ["None"], ["", "", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'Adam does not support sparse gradients, please consider SparseAdam instead'", "\n", ")", "\n", "", "amsgrad", "=", "group", "[", "'amsgrad'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsgrad", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "grad", "=", "grad", ".", "add", "(", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "\n", "if", "amsgrad", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till", "\n", "# now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "max_exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ".", "item", "(", ")", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", ".", "item", "(", ")", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "p", ".", "data", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.player_util_sam.Agent.__init__": [[8, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "env", ",", "args", ",", "state", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "env", "=", "env", "\n", "self", ".", "state", "=", "state", "\n", "self", ".", "hx", "=", "None", "\n", "self", ".", "cx", "=", "None", "\n", "self", ".", "h2", "=", "None", "\n", "self", ".", "c2", "=", "None", "\n", "self", ".", "eps_len", "=", "0", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "values", "=", "[", "]", "\n", "self", ".", "log_probs", "=", "[", "]", "\n", "self", ".", "rewards", "=", "[", "]", "\n", "self", ".", "entropies", "=", "[", "]", "\n", "self", ".", "done", "=", "True", "\n", "self", ".", "info", "=", "None", "\n", "self", ".", "reward", "=", "0", "\n", "self", ".", "gpu_id", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.player_util_sam.Agent.action_train": [[27, 47], ["player_util_sam.Agent.model", "torch.softmax", "torch.softmax", "torch.log_softmax", "torch.log_softmax", "player_util_sam.Agent.entropies.append", "log_prob.gather.gather.gather", "player_util_sam.Agent.env.step", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "max", "player_util_sam.Agent.values.append", "player_util_sam.Agent.log_probs.append", "player_util_sam.Agent.rewards.append", "torch.softmax.multinomial", "torch.autograd.Variable", "torch.autograd.Variable", "int", "min", "torch.autograd.Variable", "torch.autograd.Variable", "action.cpu().numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "player_util_sam.Agent.state.cuda", "player_util_sam.Agent.state.unsqueeze", "action.cpu"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.step"], ["", "def", "action_train", "(", "self", ")", ":", "\n", "        ", "value", ",", "logit", ",", "(", "self", ".", "hx", ",", "self", ".", "cx", ",", "self", ".", "h2", ",", "self", ".", "c2", ")", "=", "self", ".", "model", "(", "(", "Variable", "(", "\n", "self", ".", "state", ".", "unsqueeze", "(", "0", ")", ")", ",", "(", "self", ".", "hx", ",", "self", ".", "cx", ",", "self", ".", "h2", ",", "self", ".", "c2", ")", ")", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "log_prob", "=", "F", ".", "log_softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "entropy", "=", "-", "(", "log_prob", "*", "prob", ")", ".", "sum", "(", "1", ")", "\n", "self", ".", "entropies", ".", "append", "(", "entropy", ")", "\n", "action", "=", "prob", ".", "multinomial", "(", "1", ")", ".", "data", "\n", "log_prob", "=", "log_prob", ".", "gather", "(", "1", ",", "Variable", "(", "action", ")", ")", "\n", "state", ",", "self", ".", "reward", ",", "self", ".", "done", ",", "self", ".", "info", "=", "self", ".", "env", ".", "step", "(", "\n", "int", "(", "action", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "self", ".", "state", "=", "torch", ".", "from_numpy", "(", "state", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "gpu_id", ">=", "0", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "device", "(", "self", ".", "gpu_id", ")", ":", "\n", "                ", "self", ".", "state", "=", "self", ".", "state", ".", "cuda", "(", ")", "\n", "", "", "self", ".", "reward", "=", "max", "(", "min", "(", "self", ".", "reward", ",", "1", ")", ",", "-", "1", ")", "\n", "self", ".", "values", ".", "append", "(", "value", ")", "\n", "self", ".", "log_probs", ".", "append", "(", "log_prob", ")", "\n", "self", ".", "rewards", ".", "append", "(", "self", ".", "reward", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.player_util_sam.Agent.action_test": [[48, 80], ["torch.softmax", "torch.softmax", "[].data.cpu().numpy", "player_util_sam.Agent.env.step", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "player_util_sam.Agent.model", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "[].data.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "player_util_sam.Agent.state.cuda", "player_util_sam.Agent.model.sam.init_sequence", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "player_util_sam.Agent.model.sam.init_sequence", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "player_util_sam.Agent.state.unsqueeze", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.softmax.max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.step", "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.init_sequence", "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.init_sequence"], ["", "def", "action_test", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "done", ":", "\n", "                ", "if", "self", ".", "gpu_id", ">=", "0", ":", "\n", "                    ", "with", "torch", ".", "cuda", ".", "device", "(", "self", ".", "gpu_id", ")", ":", "\n", "                        ", "self", ".", "hx", ",", "self", ".", "cx", ",", "_", "=", "self", ".", "model", ".", "sam", ".", "init_sequence", "(", "1", ",", "self", ".", "gpu_id", ")", "\n", "self", ".", "c2", "=", "Variable", "(", "\n", "torch", ".", "zeros", "(", "1", ",", "256", ")", ".", "cuda", "(", ")", ")", "\n", "self", ".", "h2", "=", "Variable", "(", "\n", "torch", ".", "zeros", "(", "1", ",", "256", ")", ".", "cuda", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "self", ".", "hx", ",", "self", ".", "cx", ",", "_", "=", "self", ".", "model", ".", "sam", ".", "init_sequence", "(", "1", ",", "self", ".", "gpu_id", ")", "\n", "self", ".", "c2", "=", "Variable", "(", "\n", "torch", ".", "zeros", "(", "1", ",", "256", ")", ")", "\n", "self", ".", "h2", "=", "Variable", "(", "\n", "torch", ".", "zeros", "(", "1", ",", "256", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "cx", "=", "Variable", "(", "self", ".", "cx", ".", "data", ")", "\n", "self", ".", "hx", "=", "Variable", "(", "self", ".", "hx", ".", "data", ")", "\n", "self", ".", "c2", "=", "Variable", "(", "self", ".", "c2", ".", "data", ")", "\n", "self", ".", "h2", "=", "Variable", "(", "self", ".", "h2", ".", "data", ")", "\n", "", "value", ",", "logit", ",", "(", "self", ".", "hx", ",", "self", ".", "cx", ",", "self", ".", "h2", ",", "self", ".", "c2", ")", "=", "self", ".", "model", "(", "(", "Variable", "(", "\n", "self", ".", "state", ".", "unsqueeze", "(", "0", ")", ")", ",", "(", "self", ".", "hx", ",", "self", ".", "cx", ",", "self", ".", "h2", ",", "self", ".", "c2", ")", ")", ")", "\n", "", "prob", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "action", "=", "prob", ".", "max", "(", "1", ")", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "state", ",", "self", ".", "reward", ",", "self", ".", "done", ",", "self", ".", "info", "=", "self", ".", "env", ".", "step", "(", "action", "[", "0", "]", ")", "\n", "self", ".", "state", "=", "torch", ".", "from_numpy", "(", "state", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "gpu_id", ">=", "0", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "device", "(", "self", ".", "gpu_id", ")", ":", "\n", "                ", "self", ".", "state", "=", "self", ".", "state", ".", "cuda", "(", ")", "\n", "", "", "self", ".", "eps_len", "+=", "1", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.player_util_sam.Agent.clear_actions": [[81, 87], ["None"], "methods", ["None"], ["", "def", "clear_actions", "(", "self", ")", ":", "\n", "        ", "self", ".", "values", "=", "[", "]", "\n", "self", ".", "log_probs", "=", "[", "]", "\n", "self", ".", "rewards", "=", "[", "]", "\n", "self", ".", "entropies", "=", "[", "]", "\n", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.train_sam.train": [[12, 113], ["setproctitle.setproctitle", "torch.manual_seed", "torch.manual_seed", "environment.atari_env", "environment.atari_env.seed", "player_util_sam.Agent", "baselines.sam.a3c.A3CSAM", "player_util_sam.Agent.env.reset", "torch.from_numpy().float", "torch.from_numpy().float", "player_util_sam.Agent.model.train", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "range", "torch.zeros", "torch.zeros", "player_util_sam.Agent.values.append", "torch.zeros", "torch.zeros", "torch.autograd.Variable", "reversed", "player_util_sam.Agent.model.zero_grad", "baselines.sam.utils.ensure_shared_grads", "optim.Adam.step", "player_util_sam.Agent.clear_actions", "torch.RMSprop", "torch.Adam", "torch.from_numpy", "torch.from_numpy", "torch.cuda.device", "torch.cuda.device", "player_util_sam.Agent.state.cuda", "player_util_sam.Agent.model.cuda", "player_util_sam.Agent.model.load_state_dict", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "player_util_sam.Agent.action_train", "player_util_sam.Agent.env.reset", "torch.from_numpy().float", "torch.from_numpy().float", "player_util_sam.Agent.model", "torch.autograd.Variable", "range", "len", "shared_model.parameters", "shared_model.parameters", "torch.cuda.device", "torch.cuda.device", "player_util_sam.Agent.model.load_state_dict", "player_util_sam.Agent.model.cuda", "shared_model.state_dict", "player_util_sam.Agent.model.sam.init_sequence", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.device", "torch.cuda.device", "R.cuda.cuda", "torch.cuda.device", "torch.cuda.device", "gae.cuda.cuda", "len", "shared_model.state_dict", "torch.cuda.device", "torch.cuda.device", "player_util_sam.Agent.model.sam.init_sequence", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.from_numpy", "torch.from_numpy", "torch.cuda.device", "torch.cuda.device", "player_util_sam.Agent.state.cuda", "torch.autograd.Variable", "advantage.pow", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "player_util_sam.Agent.state.unsqueeze", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.atari_env", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.reset", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.train_sam.train", "home.repos.pwc.inspect_result.thaihungle_SAM.sam.utils.ensure_shared_grads", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.step", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.player_util_sam.Agent.clear_actions", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.player_util_sam.Agent.action_train", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.reset", "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.init_sequence", "home.repos.pwc.inspect_result.thaihungle_SAM.sam.stm_basic.STM.init_sequence"], ["def", "train", "(", "rank", ",", "args", ",", "shared_model", ",", "optimizer", ",", "env_conf", ")", ":", "\n", "    ", "ptitle", "(", "'Training Agent: {}'", ".", "format", "(", "rank", ")", ")", "\n", "gpu_id", "=", "args", ".", "gpu_ids", "[", "rank", "%", "len", "(", "args", ".", "gpu_ids", ")", "]", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", "+", "rank", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", "+", "rank", ")", "\n", "", "env", "=", "atari_env", "(", "args", ".", "env", ",", "env_conf", ",", "args", ")", "\n", "if", "optimizer", "is", "None", ":", "\n", "        ", "if", "args", ".", "optimizer", "==", "'RMSprop'", ":", "\n", "            ", "optimizer", "=", "optim", ".", "RMSprop", "(", "shared_model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "", "if", "args", ".", "optimizer", "==", "'Adam'", ":", "\n", "            ", "optimizer", "=", "optim", ".", "Adam", "(", "\n", "shared_model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "amsgrad", "=", "args", ".", "amsgrad", ")", "\n", "", "", "env", ".", "seed", "(", "args", ".", "seed", "+", "rank", ")", "\n", "player", "=", "Agent", "(", "None", ",", "env", ",", "args", ",", "None", ")", "\n", "player", ".", "gpu_id", "=", "gpu_id", "\n", "player", ".", "model", "=", "A3CSAM", "(", "player", ".", "env", ".", "observation_space", ".", "shape", ",", "\n", "player", ".", "env", ".", "action_space", ")", "\n", "\n", "player", ".", "state", "=", "player", ".", "env", ".", "reset", "(", ")", "\n", "player", ".", "state", "=", "torch", ".", "from_numpy", "(", "player", ".", "state", ")", ".", "float", "(", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "            ", "player", ".", "state", "=", "player", ".", "state", ".", "cuda", "(", ")", "\n", "player", ".", "model", "=", "player", ".", "model", ".", "cuda", "(", ")", "\n", "", "", "player", ".", "model", ".", "train", "(", ")", "\n", "player", ".", "eps_len", "+=", "2", "\n", "while", "True", ":", "\n", "        ", "if", "gpu_id", ">=", "0", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "                ", "player", ".", "model", ".", "load_state_dict", "(", "shared_model", ".", "state_dict", "(", ")", ")", "\n", "player", ".", "model", ".", "cuda", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "player", ".", "model", ".", "load_state_dict", "(", "shared_model", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "if", "player", ".", "done", ":", "\n", "            ", "if", "player", ".", "gpu_id", ">=", "0", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "device", "(", "player", ".", "gpu_id", ")", ":", "\n", "                    ", "player", ".", "hx", ",", "player", ".", "cx", ",", "_", "=", "player", ".", "model", ".", "sam", ".", "init_sequence", "(", "1", ",", "player", ".", "gpu_id", ")", "\n", "player", ".", "c2", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "256", ")", ".", "cuda", "(", ")", ")", "\n", "player", ".", "h2", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "256", ")", ".", "cuda", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "player", ".", "hx", ",", "player", ".", "cx", ",", "_", "=", "player", ".", "model", ".", "sam", ".", "init_sequence", "(", "1", ",", "player", ".", "gpu_id", ")", "\n", "player", ".", "c2", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "256", ")", ")", "\n", "player", ".", "h2", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "256", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "player", ".", "cx", "=", "Variable", "(", "player", ".", "cx", ".", "data", ")", "\n", "player", ".", "hx", "=", "Variable", "(", "player", ".", "hx", ".", "data", ")", "\n", "player", ".", "c2", "=", "Variable", "(", "player", ".", "c2", ".", "data", ")", "\n", "player", ".", "h2", "=", "Variable", "(", "player", ".", "h2", ".", "data", ")", "\n", "\n", "", "for", "step", "in", "range", "(", "args", ".", "num_steps", ")", ":", "\n", "            ", "player", ".", "action_train", "(", ")", "\n", "if", "player", ".", "done", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "player", ".", "done", ":", "\n", "            ", "state", "=", "player", ".", "env", ".", "reset", "(", ")", "\n", "player", ".", "state", "=", "torch", ".", "from_numpy", "(", "state", ")", ".", "float", "(", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "                    ", "player", ".", "state", "=", "player", ".", "state", ".", "cuda", "(", ")", "\n", "\n", "", "", "", "R", "=", "torch", ".", "zeros", "(", "1", ",", "1", ")", "\n", "if", "not", "player", ".", "done", ":", "\n", "            ", "value", ",", "_", ",", "_", "=", "player", ".", "model", "(", "(", "Variable", "(", "player", ".", "state", ".", "unsqueeze", "(", "0", ")", ")", ",", "\n", "(", "player", ".", "hx", ",", "player", ".", "cx", ",", "player", ".", "h2", ",", "player", ".", "c2", ")", ")", ")", "\n", "R", "=", "value", ".", "data", "\n", "\n", "", "if", "gpu_id", ">=", "0", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "                ", "R", "=", "R", ".", "cuda", "(", ")", "\n", "\n", "", "", "player", ".", "values", ".", "append", "(", "Variable", "(", "R", ")", ")", "\n", "policy_loss", "=", "0", "\n", "value_loss", "=", "0", "\n", "gae", "=", "torch", ".", "zeros", "(", "1", ",", "1", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "                ", "gae", "=", "gae", ".", "cuda", "(", ")", "\n", "", "", "R", "=", "Variable", "(", "R", ")", "\n", "for", "i", "in", "reversed", "(", "range", "(", "len", "(", "player", ".", "rewards", ")", ")", ")", ":", "\n", "            ", "R", "=", "args", ".", "gamma", "*", "R", "+", "player", ".", "rewards", "[", "i", "]", "\n", "advantage", "=", "R", "-", "player", ".", "values", "[", "i", "]", "\n", "value_loss", "=", "value_loss", "+", "0.5", "*", "advantage", ".", "pow", "(", "2", ")", "\n", "\n", "# Generalized Advantage Estimataion", "\n", "delta_t", "=", "player", ".", "rewards", "[", "i", "]", "+", "args", ".", "gamma", "*", "player", ".", "values", "[", "i", "+", "1", "]", ".", "data", "-", "player", ".", "values", "[", "i", "]", ".", "data", "\n", "\n", "gae", "=", "gae", "*", "args", ".", "gamma", "*", "args", ".", "tau", "+", "delta_t", "\n", "\n", "policy_loss", "=", "policy_loss", "-", "player", ".", "log_probs", "[", "i", "]", "*", "Variable", "(", "gae", ")", "-", "0.01", "*", "player", ".", "entropies", "[", "i", "]", "\n", "\n", "", "player", ".", "model", ".", "zero_grad", "(", ")", "\n", "(", "policy_loss", "+", "0.5", "*", "value_loss", ")", ".", "backward", "(", ")", "\n", "ensure_shared_grads", "(", "player", ".", "model", ",", "shared_model", ",", "gpu", "=", "gpu_id", ">=", "0", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "player", ".", "clear_actions", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.AtariRescale.__init__": [[46, 50], ["gym.ObservationWrapper.__init__", "gym.spaces.box.Box"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "env_conf", ")", ":", "\n", "        ", "gym", ".", "ObservationWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "observation_space", "=", "Box", "(", "0.0", ",", "1.0", ",", "[", "1", ",", "80", ",", "80", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "self", ".", "conf", "=", "env_conf", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.AtariRescale.observation": [[51, 53], ["environment.process_frame"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.process_frame"], ["", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "return", "process_frame", "(", "observation", ",", "self", ".", "conf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.NormalizedEnv.__init__": [[56, 62], ["gym.ObservationWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", "=", "None", ")", ":", "\n", "        ", "gym", ".", "ObservationWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "state_mean", "=", "0", "\n", "self", ".", "state_std", "=", "0", "\n", "self", ".", "alpha", "=", "0.9999", "\n", "self", ".", "num_steps", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.NormalizedEnv.observation": [[63, 74], ["observation.mean", "observation.std", "pow", "pow"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "self", ".", "num_steps", "+=", "1", "\n", "self", ".", "state_mean", "=", "self", ".", "state_mean", "*", "self", ".", "alpha", "+", "observation", ".", "mean", "(", ")", "*", "(", "1", "-", "self", ".", "alpha", ")", "\n", "self", ".", "state_std", "=", "self", ".", "state_std", "*", "self", ".", "alpha", "+", "observation", ".", "std", "(", ")", "*", "(", "1", "-", "self", ".", "alpha", ")", "\n", "\n", "unbiased_mean", "=", "self", ".", "state_mean", "/", "(", "1", "-", "pow", "(", "self", ".", "alpha", ",", "self", ".", "num_steps", ")", ")", "\n", "unbiased_std", "=", "self", ".", "state_std", "/", "(", "1", "-", "pow", "(", "self", ".", "alpha", ",", "self", ".", "num_steps", ")", ")", "\n", "\n", "return", "(", "observation", "-", "unbiased_mean", ")", "/", "(", "unbiased_std", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.NoopResetEnv.__init__": [[77, 86], ["gym.Wrapper.__init__", "env.unwrapped.get_action_meanings"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "noop_max", "=", "30", ")", ":", "\n", "        ", "\"\"\"Sample initial states by taking random number of no-ops on reset.\n        No-op is assumed to be action 0.\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "noop_max", "=", "noop_max", "\n", "self", ".", "override_num_noops", "=", "None", "\n", "self", ".", "noop_action", "=", "0", "\n", "assert", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", "[", "0", "]", "==", "'NOOP'", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.NoopResetEnv.reset": [[87, 101], ["environment.NoopResetEnv.env.reset", "range", "environment.NoopResetEnv.unwrapped.np_random.randint", "environment.NoopResetEnv.env.step", "environment.NoopResetEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.reset", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.step", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Do no-op action for a number of steps in [1, noop_max].\"\"\"", "\n", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "if", "self", ".", "override_num_noops", "is", "not", "None", ":", "\n", "            ", "noops", "=", "self", ".", "override_num_noops", "\n", "", "else", ":", "\n", "            ", "noops", "=", "self", ".", "unwrapped", ".", "np_random", ".", "randint", "(", "1", ",", "self", ".", "noop_max", "+", "1", ")", "#pylint: disable=E1101", "\n", "", "assert", "noops", ">", "0", "\n", "obs", "=", "None", "\n", "for", "_", "in", "range", "(", "noops", ")", ":", "\n", "            ", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "self", ".", "noop_action", ")", "\n", "if", "done", ":", "\n", "                ", "obs", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.NoopResetEnv.step": [[102, 104], ["environment.NoopResetEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.step"], ["", "def", "step", "(", "self", ",", "ac", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "ac", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.FireResetEnv.__init__": [[107, 112], ["gym.Wrapper.__init__", "len", "env.unwrapped.get_action_meanings", "env.unwrapped.get_action_meanings"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Take action on reset for environments that are fixed until firing.\"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "assert", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", "[", "1", "]", "==", "'FIRE'", "\n", "assert", "len", "(", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", ")", ">=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.FireResetEnv.reset": [[113, 122], ["environment.FireResetEnv.env.reset", "environment.FireResetEnv.env.step", "environment.FireResetEnv.env.step", "environment.FireResetEnv.env.reset", "environment.FireResetEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.reset", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.step", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.step", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.reset", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "1", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "2", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.FireResetEnv.step": [[123, 125], ["environment.FireResetEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.step"], ["", "def", "step", "(", "self", ",", "ac", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "ac", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.EpisodicLifeEnv.__init__": [[128, 135], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Make end-of-life == end-of-episode, but only reset on true game over.\n        Done by DeepMind for the DQN and co. since it helps value estimation.\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "lives", "=", "0", "\n", "self", ".", "was_real_done", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.EpisodicLifeEnv.step": [[136, 149], ["environment.EpisodicLifeEnv.env.step", "environment.EpisodicLifeEnv.env.unwrapped.ale.lives"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "was_real_done", "=", "done", "\n", "# check current lives, make loss of life terminal,", "\n", "# then update lives to handle bonus lives", "\n", "lives", "=", "self", ".", "env", ".", "unwrapped", ".", "ale", ".", "lives", "(", ")", "\n", "if", "lives", "<", "self", ".", "lives", "and", "lives", ">", "0", ":", "\n", "# for Qbert sometimes we stay in lives == 0 condtion for a few frames", "\n", "# so its important to keep lives > 0, so that we only reset once", "\n", "# the environment advertises done.", "\n", "            ", "done", "=", "True", "\n", "", "self", ".", "lives", "=", "lives", "\n", "return", "obs", ",", "reward", ",", "done", ",", "self", ".", "was_real_done", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.EpisodicLifeEnv.reset": [[150, 162], ["environment.EpisodicLifeEnv.env.unwrapped.ale.lives", "environment.EpisodicLifeEnv.env.reset", "environment.EpisodicLifeEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.reset", "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.step"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Reset only when lives are exhausted.\n        This way all states are still reachable even though lives are episodic,\n        and the learner need not know about any of this behind-the-scenes.\n        \"\"\"", "\n", "if", "self", ".", "was_real_done", ":", "\n", "            ", "obs", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "# no-op step to advance from terminal/lost life state", "\n", "            ", "obs", ",", "_", ",", "_", ",", "_", "=", "self", ".", "env", ".", "step", "(", "0", ")", "\n", "", "self", ".", "lives", "=", "self", ".", "env", ".", "unwrapped", ".", "ale", ".", "lives", "(", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__": [[165, 171], ["gym.Wrapper.__init__", "collections.deque"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", "=", "None", ",", "skip", "=", "4", ")", ":", "\n", "        ", "\"\"\"Return only every `skip`-th frame\"\"\"", "\n", "super", "(", "MaxAndSkipEnv", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "# most recent raw observations (for max pooling across time steps)", "\n", "self", ".", "_obs_buffer", "=", "deque", "(", "maxlen", "=", "3", ")", "\n", "self", ".", "_skip", "=", "skip", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.step": [[172, 185], ["range", "numpy.max", "environment.MaxAndSkipEnv.env.step", "environment.MaxAndSkipEnv._obs_buffer.append", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "total_reward", "=", "0.0", "\n", "done", "=", "None", "\n", "for", "_", "in", "range", "(", "self", ".", "_skip", ")", ":", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "_obs_buffer", ".", "append", "(", "obs", ")", "\n", "total_reward", "+=", "reward", "\n", "if", "done", ":", "\n", "                ", "break", "\n", "\n", "", "", "max_frame", "=", "np", ".", "max", "(", "np", ".", "stack", "(", "self", ".", "_obs_buffer", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "max_frame", ",", "total_reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.reset": [[186, 192], ["environment.MaxAndSkipEnv._obs_buffer.clear", "environment.MaxAndSkipEnv.env.reset", "environment.MaxAndSkipEnv._obs_buffer.append"], "methods", ["home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.MaxAndSkipEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Clear past frame buffer and init. to first obs. from inner env.\"\"\"", "\n", "self", ".", "_obs_buffer", ".", "clear", "(", ")", "\n", "obs", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "self", ".", "_obs_buffer", ".", "append", "(", "obs", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.atari_env": [[11, 32], ["gym.make", "environment.EpisodicLifeEnv", "environment.AtariRescale", "environment.NormalizedEnv", "environment.NoopResetEnv", "environment.MaxAndSkipEnv", "environment.NoopResetEnv", "environment.MaxAndSkipEnv", "FireResetEnv.unwrapped.get_action_meanings", "environment.FireResetEnv"], "function", ["None"], ["def", "atari_env", "(", "env_id", ",", "env_conf", ",", "args", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "if", "'Boxworld'", "in", "env_id", "or", "'MiniPacman'", "in", "env_id", ":", "\n", "        ", "return", "env", "\n", "", "if", "'NoFrameskip'", "in", "env_id", ":", "\n", "        ", "assert", "'NoFrameskip'", "in", "env", ".", "spec", ".", "id", "\n", "env", ".", "_max_episode_steps", "=", "args", ".", "max_episode_length", "*", "args", ".", "skip_rate", "\n", "env", "=", "NoopResetEnv", "(", "env", ",", "noop_max", "=", "30", ")", "\n", "env", "=", "MaxAndSkipEnv", "(", "env", ",", "skip", "=", "args", ".", "skip_rate", ")", "\n", "", "else", ":", "\n", "# env._max_episode_steps = args.max_episode_length", "\n", "        ", "env", ".", "_max_episode_steps", "=", "args", ".", "max_episode_length", "*", "args", ".", "skip_rate", "\n", "env", "=", "NoopResetEnv", "(", "env", ",", "noop_max", "=", "30", ")", "\n", "env", "=", "MaxAndSkipEnv", "(", "env", ",", "skip", "=", "args", ".", "skip_rate", ")", "\n", "", "env", "=", "EpisodicLifeEnv", "(", "env", ")", "\n", "if", "'FIRE'", "in", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", ":", "\n", "        ", "env", "=", "FireResetEnv", "(", "env", ")", "\n", "", "env", ".", "_max_episode_steps", "=", "args", ".", "max_episode_length", "\n", "env", "=", "AtariRescale", "(", "env", ",", "env_conf", ")", "\n", "env", "=", "NormalizedEnv", "(", "env", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.thaihungle_SAM.rl.environment.process_frame": [[34, 43], ["np.reshape.mean", "np.reshape.astype", "cv2.resize", "cv2.resize", "numpy.reshape"], "function", ["None"], ["", "def", "process_frame", "(", "frame", ",", "conf", ")", ":", "\n", "    ", "frame", "=", "frame", "[", "conf", "[", "\"crop1\"", "]", ":", "conf", "[", "\"crop2\"", "]", "+", "160", ",", ":", "160", "]", "\n", "frame", "=", "frame", ".", "mean", "(", "2", ")", "\n", "frame", "=", "frame", ".", "astype", "(", "np", ".", "float32", ")", "\n", "frame", "*=", "(", "1.0", "/", "255.0", ")", "\n", "frame", "=", "resize", "(", "frame", ",", "(", "80", ",", "conf", "[", "\"dimension2\"", "]", ")", ")", "\n", "frame", "=", "resize", "(", "frame", ",", "(", "80", ",", "80", ")", ")", "\n", "frame", "=", "np", ".", "reshape", "(", "frame", ",", "[", "1", ",", "80", ",", "80", "]", ")", "\n", "return", "frame", "\n", "\n"]]}