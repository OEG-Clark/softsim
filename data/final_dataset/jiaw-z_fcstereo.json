{"home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.demo.visualize_disp": [[12, 22], ["matplotlib.imshow", "matplotlib.show", "[].cpu().numpy", "dmb.visualization.stereo.vis.group_color", "[].cpu"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.group_color"], ["def", "visualize_disp", "(", "result_pkl", ")", ":", "\n", "    ", "ori_data", "=", "result_pkl", "[", "'OriginalData'", "]", "\n", "net_result", "=", "result_pkl", "[", "'Result'", "]", "\n", "if", "'disps'", "in", "net_result", ":", "\n", "        ", "disps", "=", "net_result", "[", "'disps'", "]", "\n", "best_disp", "=", "disps", "[", "0", "]", "[", "0", ",", "0", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "\n", "", "plt", ".", "imshow", "(", "group_color", "(", "best_disp", ",", "ori_data", "[", "'leftDisp'", "]", ",", "ori_data", "[", "'leftImage'", "]", ",", "ori_data", "[", "'rightImage'", "]", ")", ",", "cmap", "=", "'hot'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.train.parse_args": [[20, 50], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Training dense matching benchmark'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--work_dir'", ",", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume_from'", ",", "help", "=", "'the checkpoint file to resume from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--validate'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to evaluate the checkpoint during training'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'number of gpus to use (only applicable to non-distributed training)'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'pytorch'", ",", "\n", "help", "=", "'job launcher'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.train.main": [[52, 120], ["train.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "mmcv.mkdir_or_exist", "time.strftime", "os.join", "dmb.utils.env.get_root_logger", "dmb.utils.env.get_root_logger.info", "dmb.utils.env.get_root_logger.info", "dmb.utils.env.get_root_logger.info", "dmb.utils.env.get_root_logger.info", "dmb.utils.env.get_root_logger.info", "dmb.utils.env.get_root_logger.info", "dmb.utils.env.get_root_logger.info", "dmb.utils.env.get_root_logger.info", "dmb.modeling.build_model", "dmb.data.datasets.build_dataset", "dmb.data.datasets.build_dataset", "dmb.data.datasets.build_dataset", "dmb.apis.train.train_matcher", "dmb.utils.env.init_dist", "time.localtime", "dmb.utils.env.get_root_logger.info", "dmb.utils.env.set_random_seed", "dict", "dmb.utils.collect_env.collect_env_info"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.test.parse_args", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.env.get_root_logger", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.modeling.__init__.build_model", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.__init__.build_dataset", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.__init__.build_dataset", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.__init__.build_dataset", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.train.train_matcher", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.env.init_dist", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.env.set_random_seed", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.collect_env.collect_env_info"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "# update configs according to CLI args", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "resume_from", "=", "args", ".", "resume_from", "\n", "", "if", "args", ".", "validate", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "validate", "=", "args", ".", "validate", "\n", "", "if", "args", ".", "gpus", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "gpus", "=", "args", ".", "gpus", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "", "mkdir_or_exist", "(", "cfg", ".", "work_dir", ")", "\n", "# init logger before other step and setup training logger", "\n", "# init the logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "'{}_log.txt'", ".", "format", "(", "timestamp", ")", ")", "\n", "logger", "=", "get_root_logger", "(", "cfg", ".", "work_dir", ",", "cfg", ".", "log_level", ",", "filename", "=", "log_file", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUs\"", ".", "format", "(", "cfg", ".", "gpus", ")", ")", "\n", "logger", ".", "info", "(", "'Distributed training: {}'", ".", "format", "(", "distributed", ")", ")", "\n", "\n", "# log environment info", "\n", "logger", ".", "info", "(", "\"Collecting env info (might take some time)\"", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", ")", "\n", "logger", ".", "info", "(", "\"\\n\"", "+", "collect_env_info", "(", ")", ")", "\n", "logger", ".", "info", "(", "'\\n'", "+", "dash_line", ")", "\n", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ".", "text", ")", ")", "\n", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "'Set random seed to {}'", ".", "format", "(", "args", ".", "seed", ")", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "model", "=", "build_model", "(", "cfg", ")", "\n", "\n", "train_dataset", "=", "build_dataset", "(", "cfg", ",", "'train'", ")", "\n", "eval_dataset", "=", "build_dataset", "(", "cfg", ",", "'eval'", ")", "\n", "# all data here will be visualized as image on tensorboardX", "\n", "vis_dataset", "=", "build_dataset", "(", "cfg", ",", "'vis'", ")", "\n", "\n", "if", "cfg", ".", "checkpoint_config", "is", "not", "None", ":", "\n", "# save config file content in checkpoints as meta data", "\n", "        ", "cfg", ".", "checkpoint_config", ".", "meta", "=", "dict", "(", "\n", "config", "=", "cfg", ".", "text", ",", "\n", ")", "\n", "\n", "", "train_matcher", "(", "\n", "cfg", ",", "model", ",", "train_dataset", ",", "\n", "eval_dataset", ",", "vis_dataset", ",", "\n", "distributed", "=", "distributed", ",", "\n", "validate", "=", "args", ".", "validate", ",", "\n", "logger", "=", "logger", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.UI.Ui_CostView.setupUi": [[15, 92], ["CostView.setObjectName", "CostView.resize", "PyQt5.QtWidgets.QWidget", "UI.Ui_CostView.widget.setObjectName", "PyQt5.QtWidgets.QLabel", "UI.Ui_CostView.show_error_map.setGeometry", "PyQt5.QtGui.QFont", "PyQt5.QtGui.QFont.setFamily", "PyQt5.QtGui.QFont.setPointSize", "UI.Ui_CostView.show_error_map.setFont", "UI.Ui_CostView.show_error_map.setTextFormat", "UI.Ui_CostView.show_error_map.setAlignment", "UI.Ui_CostView.show_error_map.setObjectName", "PyQt5.QtWidgets.QPushButton", "UI.Ui_CostView.run.setGeometry", "PyQt5.QtGui.QFont", "PyQt5.QtGui.QFont.setFamily", "PyQt5.QtGui.QFont.setPointSize", "PyQt5.QtGui.QFont.setBold", "PyQt5.QtGui.QFont.setWeight", "UI.Ui_CostView.run.setFont", "UI.Ui_CostView.run.setIconSize", "UI.Ui_CostView.run.setObjectName", "PyQt5.QtWidgets.QLabel", "UI.Ui_CostView.x.setGeometry", "PyQt5.QtGui.QFont", "PyQt5.QtGui.QFont.setFamily", "PyQt5.QtGui.QFont.setPointSize", "UI.Ui_CostView.x.setFont", "UI.Ui_CostView.x.setAlignment", "UI.Ui_CostView.x.setObjectName", "PyQt5.QtWidgets.QLabel", "UI.Ui_CostView.y.setGeometry", "PyQt5.QtGui.QFont", "PyQt5.QtGui.QFont.setFamily", "PyQt5.QtGui.QFont.setPointSize", "UI.Ui_CostView.y.setFont", "UI.Ui_CostView.y.setAlignment", "UI.Ui_CostView.y.setObjectName", "PyQt5.QtWidgets.QSpinBox", "UI.Ui_CostView.x_num.setGeometry", "PyQt5.QtGui.QFont", "PyQt5.QtGui.QFont.setFamily", "PyQt5.QtGui.QFont.setPointSize", "UI.Ui_CostView.x_num.setFont", "UI.Ui_CostView.x_num.setMaximum", "UI.Ui_CostView.x_num.setObjectName", "PyQt5.QtWidgets.QSpinBox", "UI.Ui_CostView.y_num.setGeometry", "PyQt5.QtGui.QFont", "PyQt5.QtGui.QFont.setFamily", "PyQt5.QtGui.QFont.setPointSize", "UI.Ui_CostView.y_num.setFont", "UI.Ui_CostView.y_num.setMaximum", "UI.Ui_CostView.y_num.setObjectName", "PyQt5.QtWidgets.QLabel", "UI.Ui_CostView.showInfo.setGeometry", "PyQt5.QtGui.QFont", "PyQt5.QtGui.QFont.setFamily", "PyQt5.QtGui.QFont.setPointSize", "UI.Ui_CostView.showInfo.setFont", "UI.Ui_CostView.showInfo.setAlignment", "UI.Ui_CostView.showInfo.setObjectName", "PyQt5.QtWidgets.QPushButton", "UI.Ui_CostView.load_result.setGeometry", "PyQt5.QtGui.QFont", "PyQt5.QtGui.QFont.setFamily", "PyQt5.QtGui.QFont.setPointSize", "UI.Ui_CostView.load_result.setFont", "UI.Ui_CostView.load_result.setObjectName", "CostView.setCentralWidget", "UI.Ui_CostView.retranslateUi", "UI.Ui_CostView.load_result.clicked.connect", "UI.Ui_CostView.run.clicked.connect", "PyQt5.QtCore.QMetaObject.connectSlotsByName", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QSize", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QRect"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.windows.setCentralWidget", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.UI.Ui_CostView.retranslateUi"], ["    ", "def", "setupUi", "(", "self", ",", "CostView", ")", ":", "\n", "        ", "CostView", ".", "setObjectName", "(", "\"CostView\"", ")", "\n", "CostView", ".", "resize", "(", "1500", ",", "741", ")", "\n", "self", ".", "widget", "=", "QtWidgets", ".", "QWidget", "(", "CostView", ")", "\n", "self", ".", "widget", ".", "setObjectName", "(", "\"widget\"", ")", "\n", "self", ".", "show_error_map", "=", "QtWidgets", ".", "QLabel", "(", "self", ".", "widget", ")", "\n", "self", ".", "show_error_map", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "0", ",", "0", ",", "1500", ",", "600", ")", ")", "\n", "font", "=", "QtGui", ".", "QFont", "(", ")", "\n", "font", ".", "setFamily", "(", "\"Times New Roman\"", ")", "\n", "font", ".", "setPointSize", "(", "15", ")", "\n", "self", ".", "show_error_map", ".", "setFont", "(", "font", ")", "\n", "self", ".", "show_error_map", ".", "setTextFormat", "(", "QtCore", ".", "Qt", ".", "RichText", ")", "\n", "self", ".", "show_error_map", ".", "setAlignment", "(", "QtCore", ".", "Qt", ".", "AlignCenter", ")", "\n", "self", ".", "show_error_map", ".", "setObjectName", "(", "\"show_error_map\"", ")", "\n", "self", ".", "run", "=", "QtWidgets", ".", "QPushButton", "(", "self", ".", "widget", ")", "\n", "self", ".", "run", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "210", ",", "670", ",", "80", ",", "30", ")", ")", "\n", "font", "=", "QtGui", ".", "QFont", "(", ")", "\n", "font", ".", "setFamily", "(", "\"Times New Roman\"", ")", "\n", "font", ".", "setPointSize", "(", "15", ")", "\n", "font", ".", "setBold", "(", "False", ")", "\n", "font", ".", "setWeight", "(", "50", ")", "\n", "self", ".", "run", ".", "setFont", "(", "font", ")", "\n", "self", ".", "run", ".", "setIconSize", "(", "QtCore", ".", "QSize", "(", "20", ",", "20", ")", ")", "\n", "self", ".", "run", ".", "setObjectName", "(", "\"run\"", ")", "\n", "self", ".", "x", "=", "QtWidgets", ".", "QLabel", "(", "self", ".", "widget", ")", "\n", "self", ".", "x", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "100", ",", "660", ",", "20", ",", "20", ")", ")", "\n", "font", "=", "QtGui", ".", "QFont", "(", ")", "\n", "font", ".", "setFamily", "(", "\"Times New Roman\"", ")", "\n", "font", ".", "setPointSize", "(", "15", ")", "\n", "self", ".", "x", ".", "setFont", "(", "font", ")", "\n", "self", ".", "x", ".", "setAlignment", "(", "QtCore", ".", "Qt", ".", "AlignCenter", ")", "\n", "self", ".", "x", ".", "setObjectName", "(", "\"x\"", ")", "\n", "self", ".", "y", "=", "QtWidgets", ".", "QLabel", "(", "self", ".", "widget", ")", "\n", "self", ".", "y", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "100", ",", "690", ",", "20", ",", "20", ")", ")", "\n", "font", "=", "QtGui", ".", "QFont", "(", ")", "\n", "font", ".", "setFamily", "(", "\"Times New Roman\"", ")", "\n", "font", ".", "setPointSize", "(", "15", ")", "\n", "self", ".", "y", ".", "setFont", "(", "font", ")", "\n", "self", ".", "y", ".", "setAlignment", "(", "QtCore", ".", "Qt", ".", "AlignCenter", ")", "\n", "self", ".", "y", ".", "setObjectName", "(", "\"y\"", ")", "\n", "self", ".", "x_num", "=", "QtWidgets", ".", "QSpinBox", "(", "self", ".", "widget", ")", "\n", "self", ".", "x_num", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "135", ",", "660", ",", "60", ",", "20", ")", ")", "\n", "font", "=", "QtGui", ".", "QFont", "(", ")", "\n", "font", ".", "setFamily", "(", "\"Times New Roman\"", ")", "\n", "font", ".", "setPointSize", "(", "11", ")", "\n", "self", ".", "x_num", ".", "setFont", "(", "font", ")", "\n", "self", ".", "x_num", ".", "setMaximum", "(", "1500", ")", "\n", "self", ".", "x_num", ".", "setObjectName", "(", "\"x_num\"", ")", "\n", "self", ".", "y_num", "=", "QtWidgets", ".", "QSpinBox", "(", "self", ".", "widget", ")", "\n", "self", ".", "y_num", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "135", ",", "690", ",", "60", ",", "20", ")", ")", "\n", "font", "=", "QtGui", ".", "QFont", "(", ")", "\n", "font", ".", "setFamily", "(", "\"Times New Roman\"", ")", "\n", "font", ".", "setPointSize", "(", "11", ")", "\n", "self", ".", "y_num", ".", "setFont", "(", "font", ")", "\n", "self", ".", "y_num", ".", "setMaximum", "(", "600", ")", "\n", "self", ".", "y_num", ".", "setObjectName", "(", "\"y_num\"", ")", "\n", "self", ".", "showInfo", "=", "QtWidgets", ".", "QLabel", "(", "self", ".", "widget", ")", "\n", "self", ".", "showInfo", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "290", ",", "660", ",", "880", ",", "50", ")", ")", "\n", "font", "=", "QtGui", ".", "QFont", "(", ")", "\n", "font", ".", "setFamily", "(", "\"Times New Roman\"", ")", "\n", "font", ".", "setPointSize", "(", "15", ")", "\n", "self", ".", "showInfo", ".", "setFont", "(", "font", ")", "\n", "self", ".", "showInfo", ".", "setAlignment", "(", "QtCore", ".", "Qt", ".", "AlignCenter", ")", "\n", "self", ".", "showInfo", ".", "setObjectName", "(", "\"showInfo\"", ")", "\n", "self", ".", "load_result", "=", "QtWidgets", ".", "QPushButton", "(", "self", ".", "widget", ")", "\n", "self", ".", "load_result", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "100", ",", "620", ",", "190", ",", "30", ")", ")", "\n", "font", "=", "QtGui", ".", "QFont", "(", ")", "\n", "font", ".", "setFamily", "(", "\"Times New Roman\"", ")", "\n", "font", ".", "setPointSize", "(", "12", ")", "\n", "self", ".", "load_result", ".", "setFont", "(", "font", ")", "\n", "self", ".", "load_result", ".", "setObjectName", "(", "\"load_result\"", ")", "\n", "CostView", ".", "setCentralWidget", "(", "self", ".", "widget", ")", "\n", "\n", "self", ".", "retranslateUi", "(", "CostView", ")", "\n", "self", ".", "load_result", ".", "clicked", ".", "connect", "(", "CostView", ".", "openDiag", ")", "\n", "self", ".", "run", ".", "clicked", ".", "connect", "(", "CostView", ".", "setXY_andRun", ")", "\n", "QtCore", ".", "QMetaObject", ".", "connectSlotsByName", "(", "CostView", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.UI.Ui_CostView.retranslateUi": [[93, 102], ["CostView.setWindowTitle", "UI.Ui_CostView.show_error_map.setText", "UI.Ui_CostView.run.setText", "UI.Ui_CostView.x.setText", "UI.Ui_CostView.y.setText", "UI.Ui_CostView.showInfo.setText", "UI.Ui_CostView.load_result.setText", "_translate", "_translate", "_translate", "_translate", "_translate", "_translate", "_translate"], "methods", ["None"], ["", "def", "retranslateUi", "(", "self", ",", "CostView", ")", ":", "\n", "        ", "_translate", "=", "QtCore", ".", "QCoreApplication", ".", "translate", "\n", "CostView", ".", "setWindowTitle", "(", "_translate", "(", "\"CostView\"", ",", "\"MainWindow\"", ")", ")", "\n", "self", ".", "show_error_map", ".", "setText", "(", "_translate", "(", "\"CostView\"", ",", "\"<html><head/><body><p align=\\\"center\\\"><span style=\\\" font-weight:600;\\\">Disparity Error Map Display Window</span></p><p align=\\\"center\\\">Please press \\'LoadResult\\' button to load result. The result should be estimated by dmb/tools/demo.py.</p><p align=\\\"center\\\">Untill error map is loaded, click on error map to see the cost distribution on this point.</p></body></html>\"", ")", ")", "\n", "self", ".", "run", ".", "setText", "(", "_translate", "(", "\"CostView\"", ",", "\"Run\"", ")", ")", "\n", "self", ".", "x", ".", "setText", "(", "_translate", "(", "\"CostView\"", ",", "\"x:\"", ")", ")", "\n", "self", ".", "y", ".", "setText", "(", "_translate", "(", "\"CostView\"", ",", "\"y:\"", ")", ")", "\n", "self", ".", "showInfo", ".", "setText", "(", "_translate", "(", "\"CostView\"", ",", "\"It\\'s a valid position: (0, 0)\"", ")", ")", "\n", "self", ".", "load_result", ".", "setText", "(", "_translate", "(", "\"CostView\"", ",", "\"LoadResult\"", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.test.sparsification_eval": [[31, 48], ["hasattr", "all", "isinstance", "[].clone", "isinstance", "result[].clone", "isinstance", "[].clone", "dmb.visualization.stereo.sparsification_plot", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "isinstance"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.sparsification_plot.sparsification_plot"], ["def", "sparsification_eval", "(", "result", ",", "cfg", ",", "id", "=", "0", ")", ":", "\n", "    ", "estDisp", ",", "estConf", ",", "gtDisp", "=", "None", ",", "None", ",", "None", "\n", "if", "hasattr", "(", "cfg", ",", "'sparsification_plot'", ")", "and", "cfg", ".", "sparsification_plot", ".", "doing", ":", "\n", "        ", "if", "'Confidence'", "in", "result", "and", "isinstance", "(", "result", "[", "'Confidence'", "]", "[", "id", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "estConf", "=", "result", "[", "'Confidence'", "]", "[", "id", "]", ".", "clone", "(", ")", "\n", "", "if", "'GroundTruth'", "in", "result", "and", "isinstance", "(", "result", "[", "'GroundTruth'", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "gtDisp", "=", "result", "[", "'GroundTruth'", "]", ".", "clone", "(", ")", "\n", "", "if", "'Disparity'", "in", "result", "and", "isinstance", "(", "result", "[", "'Disparity'", "]", "[", "id", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "estDisp", "=", "result", "[", "'Disparity'", "]", "[", "id", "]", ".", "clone", "(", ")", "\n", "\n", "", "if", "all", "(", "[", "torch", ".", "is_tensor", "(", "estConf", ")", ",", "torch", ".", "is_tensor", "(", "gtDisp", ")", ",", "\n", "torch", ".", "is_tensor", "(", "estDisp", ")", ",", "isinstance", "(", "cfg", ".", "sparsification_plot", ".", "bins", ",", "int", ")", "]", ")", ":", "\n", "            ", "error_dict", "=", "sparsification_plot", "(", "\n", "estDisp", ",", "gtDisp", ",", "estConf", ",", "cfg", ".", "sparsification_plot", ".", "bins", ",", "\n", "cfg", ".", "model", ".", "eval", ".", "lower_bound", ",", "cfg", ".", "model", ".", "eval", ".", "upper_bound", ")", "\n", "\n", "return", "error_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.test.disp_": [[50, 76], ["remove_padding", "disp_evaluation", "hasattr", "cfg.copy", "remove_padding", "result.update"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.eval_hooks.disp_evaluation", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding"], ["", "", "", "def", "disp_", "(", "cfg", ",", "ori_result", ",", "data", ")", ":", "\n", "    ", "from", "dmb", ".", "data", ".", "datasets", ".", "evaluation", ".", "stereo", ".", "eval", "import", "remove_padding", "\n", "from", "dmb", ".", "data", ".", "datasets", ".", "evaluation", ".", "stereo", ".", "eval_hooks", "import", "disp_evaluation", "\n", "\n", "disps", "=", "ori_result", "[", "'disps'", "]", "\n", "# remove the padding when data augmentation", "\n", "ori_size", "=", "data", "[", "'original_size'", "]", "\n", "disps", "=", "remove_padding", "(", "disps", ",", "ori_size", ")", "\n", "\n", "# evaluation", "\n", "whole_error_dict", ",", "data", "=", "disp_evaluation", "(", "cfg", ".", "copy", "(", ")", ",", "disps", ",", "data", ")", "\n", "\n", "result", "=", "{", "\n", "'Disparity'", ":", "disps", ",", "\n", "'GroundTruth'", ":", "data", "[", "'leftDisp'", "]", ",", "\n", "'Error'", ":", "whole_error_dict", ",", "\n", "}", "\n", "\n", "if", "hasattr", "(", "cfg", ".", "model", ",", "'cmn'", ")", ":", "\n", "# confidence measurement network", "\n", "        ", "ori_size", "=", "data", "[", "'original_size'", "]", "\n", "confs", "=", "ori_result", "[", "'confs'", "]", "\n", "confs", "=", "remove_padding", "(", "confs", ",", "ori_size", ")", "\n", "result", ".", "update", "(", "Confidence", "=", "confs", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.test.flow_": [[78, 95], ["remove_padding", "flow_evaluation", "cfg.copy"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval_hooks.flow_evaluation"], ["", "def", "flow_", "(", "cfg", ",", "ori_result", ",", "data", ")", ":", "\n", "    ", "from", "dmb", ".", "data", ".", "datasets", ".", "evaluation", ".", "flow", ".", "eval_hooks", "import", "flow_evaluation", "\n", "from", "dmb", ".", "data", ".", "datasets", ".", "evaluation", ".", "flow", ".", "eval_hooks", "import", "remove_padding", "\n", "flows", "=", "ori_result", "[", "'flows'", "]", "\n", "ori_size", "=", "data", "[", "'original_size'", "]", "\n", "flows", "=", "remove_padding", "(", "flows", ",", "ori_size", ")", "\n", "\n", "# evaluation", "\n", "whole_error_dict", ",", "data", "=", "flow_evaluation", "(", "cfg", ".", "copy", "(", ")", ",", "flows", ",", "data", ")", "\n", "\n", "result", "=", "{", "\n", "'Flow'", ":", "flows", ",", "\n", "'GroundTruth'", ":", "data", "[", "'flow'", "]", ",", "\n", "'Error'", ":", "whole_error_dict", ",", "\n", "}", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.test.single_gpu_test": [[97, 99], ["None"], "function", ["None"], ["", "def", "single_gpu_test", "(", "model", ",", "dataset", ",", "cfg", ",", "show", "=", "False", ")", ":", "\n", "    ", "return", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.test.multi_gpu_test": [[101, 170], ["model.eval", "mmcv.runner.get_dist_info", "range", "test.collect_results", "mmcv.ProgressBar", "len", "zip", "data.update", "filter_result.update", "hasattr", "collect_results.append", "len", "len", "data.keys", "data.values", "mmcv.parallel.scatter", "torch.no_grad", "torch.no_grad", "model", "cfg.get", "imageio.imread().astype", "imageio.imread().astype", "dmb.visualization.SaveResultTool", "dmb.visualization.SaveResultTool.", "cfg.get", "filter_result[].update", "range", "mmcv.parallel.collate", "test.disp_", "item[].split", "test.sparsification_eval", "sparsification_eval.items", "mmcv.ProgressBar.update", "torch.cuda.current_device", "torch.cuda.current_device", "cfg.copy", "test.flow_", "TypeError", "imageio.imread", "imageio.imread", "cfg.copy", "os.join", "os.join"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.test.collect_results", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.visualization.__init__.SaveResultTool", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.test.disp_", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.test.sparsification_eval", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.test.flow_"], ["", "def", "multi_gpu_test", "(", "model", ",", "dataset", ",", "cfg", ",", "show", "=", "False", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "\n", "", "for", "idx", "in", "range", "(", "rank", ",", "len", "(", "dataset", ")", ",", "world_size", ")", ":", "\n", "        ", "data", "=", "dataset", "[", "idx", "]", "\n", "\n", "# None type data cannot be scatter, here we pick out the not None type data", "\n", "notNoneData", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "zip", "(", "data", ".", "keys", "(", ")", ",", "data", ".", "values", "(", ")", ")", ":", "\n", "            ", "if", "v", "is", "not", "None", ":", "\n", "                ", "notNoneData", "[", "k", "]", "=", "v", "\n", "", "", "notNoneData", "=", "scatter", "(", "\n", "collate", "(", "[", "notNoneData", "]", ",", "samples_per_gpu", "=", "1", ")", ",", "\n", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", "\n", ")", "[", "0", "]", "\n", "\n", "data", ".", "update", "(", "notNoneData", ")", "\n", "\n", "# TODO: evaluate after generate all predictions!", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "ori_result", ",", "_", "=", "model", "(", "data", ")", "\n", "\n", "task", "=", "cfg", ".", "get", "(", "'task'", ",", "'stereo'", ")", "\n", "if", "task", "==", "'stereo'", ":", "\n", "                ", "result", "=", "disp_", "(", "cfg", ".", "copy", "(", ")", ",", "ori_result", ",", "data", ")", "\n", "", "elif", "task", "==", "'flow'", ":", "\n", "                ", "result", "=", "flow_", "(", "cfg", ".", "copy", "(", ")", ",", "ori_result", ",", "data", ")", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "'Invalid task: {}. It must be in [stereo, flow]'", ".", "format", "(", "task", ")", ")", "\n", "\n", "", "", "filter_result", "=", "{", "}", "\n", "filter_result", ".", "update", "(", "Error", "=", "result", "[", "'Error'", "]", ")", "\n", "\n", "if", "show", ":", "\n", "            ", "item", "=", "dataset", ".", "data_list", "[", "idx", "]", "\n", "result", "[", "'leftImage'", "]", "=", "imread", "(", "\n", "osp", ".", "join", "(", "cfg", ".", "data", ".", "test", ".", "data_root", ",", "item", "[", "'left_image_path'", "]", ")", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "result", "[", "'rightImage'", "]", "=", "imread", "(", "\n", "osp", ".", "join", "(", "cfg", ".", "data", ".", "test", ".", "data_root", ",", "item", "[", "'right_image_path'", "]", ")", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "image_name", "=", "item", "[", "'left_image_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "save_result_tool", "=", "SaveResultTool", "(", "task", ")", "\n", "save_result_tool", "(", "result", ",", "cfg", ".", "out_dir", ",", "image_name", ")", "\n", "\n", "", "if", "hasattr", "(", "cfg", ",", "'sparsification_plot'", ")", ":", "\n", "            ", "eval_disparity_id", "=", "cfg", ".", "get", "(", "'eval_disparity_id'", ",", "[", "0", "]", ")", "\n", "whole_error_dict", "=", "{", "}", "\n", "for", "id", "in", "eval_disparity_id", ":", "\n", "                ", "sparsification_plot_dict", "=", "sparsification_eval", "(", "result", ",", "cfg", ",", "id", "=", "id", ")", "\n", "for", "key", ",", "val", "in", "sparsification_plot_dict", ".", "items", "(", ")", ":", "\n", "                    ", "whole_error_dict", "[", "'metric_confidence_{}/'", ".", "format", "(", "id", ")", "+", "key", "]", "=", "val", "\n", "", "", "filter_result", "[", "'Error'", "]", ".", "update", "(", "whole_error_dict", ")", "\n", "\n", "", "results", ".", "append", "(", "filter_result", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "batch_size", "=", "world_size", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "# collect results from all ranks", "\n", "", "", "", "results", "=", "collect_results", "(", "results", ",", "len", "(", "dataset", ")", ",", "tmpdir", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.test.collect_results": [[172, 209], ["mmcv.runner.get_dist_info", "mmcv.dump", "torch.barrier", "torch.full", "torch.full", "torch.broadcast", "torch.full.cpu().numpy().tobytes().decode().rstrip", "mmcv.mkdir_or_exist", "os.join", "range", "zip", "shutil.rmtree", "tempfile.mkdtemp", "torch.Tensor", "torch.Tensor", "os.join", "part_list.append", "ordered_results.extend", "bytearray", "torch.full.cpu().numpy().tobytes().decode", "mmcv.load", "list", "torch.Tensor.encode", "len", "torch.full.cpu().numpy().tobytes", "torch.full.cpu().numpy", "torch.full.cpu"], "function", ["None"], ["", "def", "collect_results", "(", "result_part", ",", "size", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# create a tmp dir if it is not specified", "\n", "if", "tmpdir", "is", "None", ":", "\n", "        ", "MAX_LEN", "=", "512", "\n", "# 32 is whitespace", "\n", "dir_tensor", "=", "torch", ".", "full", "(", "(", "MAX_LEN", ",", ")", ",", "32", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "tmpdir", "=", "torch", ".", "Tensor", "(", "bytearray", "(", "tmpdir", ".", "encode", "(", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "dir_tensor", "[", ":", "len", "(", "tmpdir", ")", "]", "=", "tmpdir", "\n", "", "dist", ".", "broadcast", "(", "dir_tensor", ",", "0", ")", "\n", "tmpdir", "=", "dir_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "", "else", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "tmpdir", ")", "\n", "\n", "# dump the part result to the dir", "\n", "", "mmcv", ".", "dump", "(", "result_part", ",", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "rank", ")", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "# collect all parts", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "# load results of all parts from tmp dir", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "            ", "part_file", "=", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "part_list", ".", "append", "(", "mmcv", ".", "load", "(", "part_file", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "# remove tmp dir", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "return", "ordered_results", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.test.parse_args": [[211, 233], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.test.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test dense matching benchmark'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "'--out_dir'", ",", "help", "=", "'output result directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "type", "=", "str", ",", "default", "=", "'False'", ",", "help", "=", "'show results in images'", ")", "\n", "parser", ".", "add_argument", "(", "'--validate'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether to evaluate the result'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpus'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'number of gpus to use (only applicable to non-distributed training)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'pytorch'", ",", "\n", "help", "=", "'job launcher'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.test.main": [[235, 330], ["test.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "mmcv.mkdir_or_exist", "time.strftime", "os.join", "dmb.utils.env.get_root_logger", "dmb.utils.env.get_root_logger.info", "dmb.utils.env.get_root_logger.info", "dmb.utils.env.get_root_logger.info", "dmb.utils.env.get_root_logger.info", "dmb.utils.env.get_root_logger.info", "dmb.utils.env.get_root_logger.info", "dmb.utils.env.get_root_logger.info", "dmb.utils.env.get_root_logger.info", "dmb.utils.env.get_root_logger.info", "dmb.data.datasets.build_dataset", "dmb.modeling.build_model", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "dmb.utils.env.init_dist", "time.localtime", "mmcv.parallel.MMDataParallel", "test.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "test.multi_gpu_test", "os.join", "dmb.utils.env.get_root_logger.info", "mmcv.dump", "dmb.utils.collect_env.collect_env_info", "mmcv.parallel.MMDistributedDataParallel.cuda", "mmcv.runner.LogBuffer", "mmcv.runner.LogBuffer.average", "mmcv.Config.fromfile.get", "dmb.data.datasets.evaluation.output_evaluation_in_pandas", "dmb.data.datasets.evaluation.output_evaluation_in_pandas.items", "dmb.utils.env.get_root_logger.info", "mmcv.runner.LogBuffer.clear", "os.join", "mmcv.runner.LogBuffer.update", "isinstance", "len", "log_items.append", "torch.cuda.current_device", "torch.cuda.current_device", "log_items.append", "isinstance", "log_items.append", "log_items.append"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.test.parse_args", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.env.get_root_logger", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.__init__.build_dataset", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.modeling.__init__.build_model", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.load_checkpoint", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.env.init_dist", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.test.single_gpu_test", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.test.multi_gpu_test", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.collect_env.collect_env_info", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.evaluation.__init__.output_evaluation_in_pandas"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "", "if", "args", ".", "checkpoint", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "checkpoint", "=", "args", ".", "checkpoint", "\n", "", "if", "args", ".", "out_dir", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "out_dir", "=", "args", ".", "out_dir", "\n", "", "if", "args", ".", "gpus", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "gpus", "=", "args", ".", "gpus", "\n", "", "cfg", ".", "show", "=", "True", "if", "args", ".", "show", "==", "'True'", "else", "False", "\n", "\n", "mkdir_or_exist", "(", "cfg", ".", "out_dir", ")", "\n", "\n", "# init logger before other step and setup training logger", "\n", "# init the logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "out_dir", ",", "'{}_test_log.txt'", ".", "format", "(", "timestamp", ")", ")", "\n", "logger", "=", "get_root_logger", "(", "cfg", ".", "out_dir", ",", "cfg", ".", "log_level", ",", "filename", "=", "log_file", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUs\"", ".", "format", "(", "cfg", ".", "gpus", ")", ")", "\n", "logger", ".", "info", "(", "'Distributed training: {}'", ".", "format", "(", "distributed", ")", ")", "\n", "logger", ".", "info", "(", "\"Whether the result will be saved to disk in image: {}\"", ".", "format", "(", "args", ".", "show", ")", ")", "\n", "\n", "# log environment info", "\n", "logger", ".", "info", "(", "\"Collecting env info (might take some time)\"", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", ")", "\n", "logger", ".", "info", "(", "\"\\n\"", "+", "collect_env_info", "(", ")", ")", "\n", "logger", ".", "info", "(", "'\\n'", "+", "dash_line", ")", "\n", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ".", "text", ")", ")", "\n", "\n", "# build the dataset", "\n", "test_dataset", "=", "build_dataset", "(", "cfg", ",", "'test'", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "model", "=", "build_model", "(", "cfg", ")", "\n", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "cfg", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "if", "not", "distributed", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "test_dataset", ",", "cfg", ",", "cfg", ".", "show", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "test_dataset", ",", "cfg", ",", "cfg", ".", "show", ",", "tmpdir", "=", "osp", ".", "join", "(", "cfg", ".", "out_dir", ",", "'temp'", ")", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "cfg", ".", "out_dir", "is", "not", "None", "and", "rank", "==", "0", ":", "\n", "        ", "result_path", "=", "osp", ".", "join", "(", "cfg", ".", "out_dir", ",", "'result.pkl'", ")", "\n", "logger", ".", "info", "(", "'\\nwriting results to {}'", ".", "format", "(", "result_path", ")", ")", "\n", "mmcv", ".", "dump", "(", "outputs", ",", "result_path", ")", "\n", "\n", "if", "args", ".", "validate", ":", "\n", "            ", "error_log_buffer", "=", "LogBuffer", "(", ")", "\n", "for", "result", "in", "outputs", ":", "\n", "                ", "error_log_buffer", ".", "update", "(", "result", "[", "'Error'", "]", ")", "\n", "", "error_log_buffer", ".", "average", "(", ")", "\n", "\n", "task", "=", "cfg", ".", "get", "(", "'task'", ",", "'stereo'", ")", "\n", "# for better visualization, format into pandas", "\n", "format_output_dict", "=", "output_evaluation_in_pandas", "(", "error_log_buffer", ".", "output", ",", "task", ")", "\n", "\n", "log_items", "=", "[", "]", "\n", "for", "key", ",", "val", "in", "format_output_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "val", ",", "pd", ".", "DataFrame", ")", ":", "\n", "                    ", "log_items", ".", "append", "(", "\"\\n{}:\\n{} \\n\"", ".", "format", "(", "key", ",", "val", ")", ")", "\n", "", "elif", "isinstance", "(", "val", ",", "float", ")", ":", "\n", "                    ", "val", "=", "\"{:.4f}\"", ".", "format", "(", "val", ")", "\n", "log_items", ".", "append", "(", "\"{}: {}\"", ".", "format", "(", "key", ",", "val", ")", ")", "\n", "", "else", ":", "\n", "                    ", "log_items", ".", "append", "(", "\"{}: {}\"", ".", "format", "(", "key", ",", "val", ")", ")", "\n", "\n", "", "", "if", "len", "(", "error_log_buffer", ".", "output", ")", "==", "0", ":", "\n", "                ", "log_items", ".", "append", "(", "'nothing to evaluate!'", ")", "\n", "\n", "", "log_str", "=", "'Evaluation Result: \\t'", "\n", "log_str", "+=", "\", \"", ".", "join", "(", "log_items", ")", "\n", "logger", ".", "info", "(", "log_str", ")", "\n", "error_log_buffer", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.windows.__init__": [[26, 36], ["super().__init__", "view_cost.windows.setupUi", "dict"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.UI.Ui_CostView.setupUi"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "windows", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "setupUi", "(", "self", ")", "\n", "self", ".", "_translate", "=", "QtCore", ".", "QCoreApplication", ".", "translate", "\n", "self", ".", "height", "=", "0", "\n", "self", ".", "width", "=", "0", "\n", "self", ".", "pad_size", "=", "[", "600", ",", "1500", "]", "\n", "self", ".", "result_path", "=", "None", "\n", "self", ".", "diag_path", "=", "'../'", "\n", "self", ".", "path", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.windows.setCentralWidget": [[37, 39], ["None"], "methods", ["None"], ["", "def", "setCentralWidget", "(", "self", ",", "widget", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.windows.openDiag": [[40, 51], ["PyQt5.QtWidgets.QFileDialog.getOpenFileName", "view_cost.windows.sender().text", "print", "os.path.join", "view_cost.windows.process", "view_cost.windows.sender"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.windows.process"], ["", "def", "openDiag", "(", "self", ")", ":", "\n", "        ", "FileName", ",", "FileType", "=", "QFileDialog", ".", "getOpenFileName", "(", "self", ",", "\n", "\"OpenFile\"", ",", "\n", "self", ".", "diag_path", ",", "\n", "\" All Files (*);;*.pkl;;\"", ")", "\n", "sender_info", "=", "self", ".", "sender", "(", ")", ".", "text", "(", ")", "\n", "print", "(", "'{}: {}'", ".", "format", "(", "sender_info", ",", "FileName", ")", ")", "\n", "self", ".", "path", "[", "sender_info", "]", "=", "FileName", "\n", "self", ".", "diag_path", "=", "os", ".", "path", ".", "join", "(", "FileName", ",", "'../'", ")", "\n", "\n", "self", ".", "process", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.windows.openDiagDirectory": [[52, 60], ["PyQt5.QtWidgets.QFileDialog.getExistingDirectory", "view_cost.windows.sender().text", "print", "view_cost.windows.sender"], "methods", ["None"], ["", "def", "openDiagDirectory", "(", "self", ")", ":", "\n", "        ", "directory", "=", "QFileDialog", ".", "getExistingDirectory", "(", "self", ",", "\n", "\"OpenDirectory\"", ",", "\n", "self", ".", "diag_path", ")", "\n", "sender_info", "=", "self", ".", "sender", "(", ")", ".", "text", "(", ")", "\n", "print", "(", "'{}: {}'", ".", "format", "(", "sender_info", ",", "directory", ")", ")", "\n", "self", ".", "path", "[", "sender_info", "]", "=", "directory", "\n", "self", ".", "diag_path", "=", "directory", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.windows.setXY_andRun": [[61, 70], ["view_cost.windows.x_num.value", "view_cost.windows.y_num.value", "view_cost.windows.isValid", "view_cost.windows.showInfo.setText", "view_cost.windows.plotCost", "view_cost.windows.showInfo.setText", "view_cost.windows._translate", "view_cost.windows._translate"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.windows.isValid", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.windows.plotCost"], ["", "def", "setXY_andRun", "(", "self", ")", ":", "\n", "        ", "h", "=", "self", ".", "x_num", ".", "value", "(", ")", "\n", "w", "=", "self", ".", "y_num", ".", "value", "(", ")", "\n", "if", "self", ".", "isValid", "(", "h", ",", "w", ")", ":", "\n", "            ", "self", ".", "showInfo", ".", "setText", "(", "self", ".", "_translate", "(", "\"CostView\"", ",", "\"It\\'s a valid position:({}, {})\"", ".", "format", "(", "h", ",", "w", ")", ")", ")", "\n", "self", ".", "plotCost", "(", "h", ",", "w", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "showInfo", ".", "setText", "(", "self", ".", "_translate", "(", "\"CostView\"", ",", "\"It\\'s not a valid position, press again\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.windows.process": [[71, 103], ["print", "[].cpu().numpy", "[].cpu().numpy", "print", "print", "numpy.abs", "dmb.visualization.stereo.vis.disp_err_to_color", "numpy.lib.pad", "view_cost.windows.path[].replace", "print", "PIL.Image.fromarray().save", "view_cost.windows.show_image", "print", "open", "pickle.load", "[].cpu", "[].cpu", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.vis.disp_err_to_color", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.windows.show_image"], ["", "", "def", "process", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Start Loading ... \"", ")", "\n", "with", "open", "(", "file", "=", "self", ".", "path", "[", "'LoadResult'", "]", ",", "mode", "=", "'rb'", ")", "as", "fp", ":", "\n", "            ", "result", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "ori_data", "=", "result", "[", "'OriginalData'", "]", "\n", "net_result", "=", "result", "[", "'Result'", "]", "\n", "self", ".", "leftImage", "=", "ori_data", "[", "'leftImage'", "]", "\n", "self", ".", "rightImage", "=", "ori_data", "[", "'rightImage'", "]", "\n", "self", ".", "gtDisp", "=", "ori_data", "[", "'leftDisp'", "]", "\n", "# [H, W]", "\n", "self", ".", "estDisp", "=", "net_result", "[", "'disps'", "]", "[", "0", "]", "[", "0", ",", "0", ",", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# [D, H, W]", "\n", "self", ".", "costVolume", "=", "net_result", "[", "'costs'", "]", "[", "0", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "print", "(", "\"Loaded!\"", ")", "\n", "\n", "print", "(", "\"Start Computing Error Map ...\"", ")", "\n", "err_map", "=", "np", ".", "abs", "(", "self", ".", "gtDisp", "-", "self", ".", "estDisp", ")", "\n", "img", "=", "disp_err_to_color", "(", "self", ".", "estDisp", ",", "self", ".", "gtDisp", ")", "\n", "\n", "self", ".", "height", "=", "img", ".", "shape", "[", "0", "]", "\n", "self", ".", "width", "=", "img", ".", "shape", "[", "1", "]", "\n", "\n", "# pad to pad_size", "\n", "down_pad", "=", "self", ".", "pad_size", "[", "0", "]", "-", "img", ".", "shape", "[", "0", "]", "\n", "right_pad", "=", "self", ".", "pad_size", "[", "1", "]", "-", "img", ".", "shape", "[", "1", "]", "\n", "img", "=", "np", ".", "lib", ".", "pad", "(", "img", ",", "(", "(", "0", ",", "down_pad", ")", ",", "(", "0", ",", "right_pad", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "255", ")", "\n", "\n", "pad_path", "=", "self", ".", "path", "[", "'LoadResult'", "]", ".", "replace", "(", "'.pkl'", ",", "'_pad_error.png'", ")", "\n", "print", "(", "\"Error Map is saved to \"", ",", "pad_path", ")", "\n", "Image", ".", "fromarray", "(", "img", ")", ".", "save", "(", "pad_path", ")", "\n", "self", ".", "show_image", "(", "self", ".", "show_error_map", ",", "pad_path", ")", "\n", "print", "(", "\"Data Prepared, Please Click on Error Map to See Cost Distribution!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.windows.show_image": [[104, 110], ["os.path.exists", "PyQt5.QtGui.QPixmap().scaled", "label.setPixmap", "label.setText", "label.width", "label.height", "view_cost.windows._translate", "PyQt5.QtGui.QPixmap"], "methods", ["None"], ["", "def", "show_image", "(", "self", ",", "label", ",", "path", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "png", "=", "QtGui", ".", "QPixmap", "(", "path", ")", ".", "scaled", "(", "label", ".", "width", "(", ")", ",", "label", ".", "height", "(", ")", ")", "\n", "label", ".", "setPixmap", "(", "png", ")", "\n", "", "else", ":", "\n", "            ", "label", ".", "setText", "(", "self", ".", "_translate", "(", "\"CostView\"", ",", "\"Disparity Error Map Display Window\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.windows.isValid": [[111, 117], ["None"], "methods", ["None"], ["", "", "def", "isValid", "(", "self", ",", "h", ",", "w", ")", ":", "\n", "        ", "if", "h", "<", "0", "or", "h", ">", "(", "self", ".", "height", ")", ":", "\n", "            ", "return", "False", "\n", "", "if", "w", "<", "0", "or", "w", ">", "(", "self", ".", "width", ")", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.windows.mousePressEvent": [[118, 131], ["e.x", "e.y", "view_cost.windows.show_error_map.pos().x", "view_cost.windows.show_error_map.pos().y", "view_cost.windows.isValid", "view_cost.windows.showInfo.setText", "view_cost.windows.plotCost", "view_cost.windows.showInfo.setText", "view_cost.windows.show_error_map.pos", "view_cost.windows.show_error_map.pos", "view_cost.windows._translate", "view_cost.windows._translate"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.windows.isValid", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.windows.plotCost"], ["", "def", "mousePressEvent", "(", "self", ",", "e", ")", ":", "\n", "        ", "w", "=", "e", ".", "x", "(", ")", "\n", "h", "=", "e", ".", "y", "(", ")", "\n", "w0", "=", "self", ".", "show_error_map", ".", "pos", "(", ")", ".", "x", "(", ")", "\n", "h0", "=", "self", ".", "show_error_map", ".", "pos", "(", ")", ".", "y", "(", ")", "\n", "w", "=", "w", "-", "w0", "\n", "h", "=", "h", "-", "h0", "\n", "if", "self", ".", "isValid", "(", "h", ",", "w", ")", ":", "\n", "            ", "self", ".", "showInfo", ".", "setText", "(", "self", ".", "_translate", "(", "\"CostView\"", ",", "\"It\\'s a valid position:({}, {})\"", ".", "format", "(", "h", ",", "w", ")", ")", ")", "\n", "self", ".", "plotCost", "(", "h", ",", "w", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "showInfo", ".", "setText", "(", "self", ".", "_translate", "(", "\"CostView\"", ",", "\"It\\'s not a valid position, press again\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.windows.plotCost": [[132, 197], ["view_cost.softmax", "print", "numpy.arange", "matplotlib.figure", "matplotlib.figure", "matplotlib.subplot", "matplotlib.subplot", "numpy.linspace", "numpy.linspace", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.title", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.plot", "matplotlib.plot", "numpy.linspace", "numpy.linspace", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.title", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.plot", "matplotlib.plot", "matplotlib.title", "matplotlib.title", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.title", "matplotlib.title", "matplotlib.show", "matplotlib.show", "probability[].max", "probability[].max", "cost[].min", "cost[].max", "cost[].min", "cost[].max", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "abs", "probability[].max", "probability[].min", "cost[].max", "cost[].min", "abs", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax"], ["", "", "def", "plotCost", "(", "self", ",", "h", ",", "w", ")", ":", "\n", "# [height, width]", "\n", "        ", "estDisp", "=", "self", ".", "estDisp", "\n", "\n", "# [height, width]", "\n", "gtDisp", "=", "self", ".", "gtDisp", "\n", "\n", "# [height, width, 3]", "\n", "leftImage", "=", "self", ".", "leftImage", "\n", "\n", "# [height, width, 3]", "\n", "rightImage", "=", "self", ".", "rightImage", "\n", "\n", "# [D, height, width]", "\n", "cost", "=", "self", ".", "costVolume", "\n", "\n", "# [192, height, width]", "\n", "probability", "=", "softmax", "(", "cost", ",", "dim", "=", "0", ")", "\n", "\n", "# calculate error", "\n", "gt", "=", "gtDisp", "[", "h", ",", "w", "]", "\n", "est", "=", "estDisp", "[", "h", ",", "w", "]", "\n", "print", "(", "'h:{}, w:{}, gt:{:.4f} pred:{:.4f} abs error:{:.4f}'", ".", "format", "(", "h", ",", "w", ",", "gt", ",", "est", ",", "abs", "(", "gt", "-", "est", ")", ")", ")", "\n", "\n", "x", "=", "np", ".", "arange", "(", "probability", ".", "shape", "[", "0", "]", ")", "\n", "num_bin", "=", "100", "\n", "# probability", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "80", ",", "60", ")", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "1", ")", "\n", "gt_y", "=", "np", ".", "linspace", "(", "0", ",", "probability", "[", ":", ",", "h", ",", "w", "]", ".", "max", "(", ")", ",", "num_bin", ")", "\n", "gt_x", "=", "[", "gt", "]", "*", "num_bin", "\n", "est_y", "=", "np", ".", "linspace", "(", "0", ",", "probability", "[", ":", ",", "h", ",", "w", "]", ".", "max", "(", ")", ",", "num_bin", ")", "\n", "est_x", "=", "[", "est", "]", "*", "num_bin", "\n", "plt", ".", "plot", "(", "gt_x", ",", "gt_y", ",", "'r-'", ")", "\n", "plt", ".", "plot", "(", "x", ",", "probability", "[", ":", ",", "h", ",", "w", "]", ",", "'b'", ")", "\n", "plt", ".", "plot", "(", "est_x", ",", "est_y", ",", "'y-.'", ")", "\n", "plt", ".", "ylabel", "(", "'Probability'", ")", "\n", "plt", ".", "title", "(", "'Probability    Max:{:.2f}, Min:{:.2f} \\n Red: GroundTruth, Yellow: Estimation'", ".", "format", "(", "probability", "[", ":", ",", "h", ",", "w", "]", ".", "max", "(", ")", ",", "probability", "[", ":", ",", "h", ",", "w", "]", ".", "min", "(", ")", ")", ")", "\n", "\n", "# cost", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "3", ")", "\n", "plt", ".", "plot", "(", "x", ",", "cost", "[", ":", ",", "h", ",", "w", "]", ",", "'b'", ")", "\n", "gt_y", "=", "np", ".", "linspace", "(", "cost", "[", ":", ",", "h", ",", "w", "]", ".", "min", "(", ")", ",", "cost", "[", ":", ",", "h", ",", "w", "]", ".", "max", "(", ")", ",", "num_bin", ")", "\n", "gt_x", "=", "[", "gt", "]", "*", "num_bin", "\n", "est_y", "=", "np", ".", "linspace", "(", "cost", "[", ":", ",", "h", ",", "w", "]", ".", "min", "(", ")", ",", "cost", "[", ":", ",", "h", ",", "w", "]", ".", "max", "(", ")", ",", "num_bin", ")", "\n", "est_x", "=", "[", "est", "]", "*", "num_bin", "\n", "plt", ".", "plot", "(", "gt_x", ",", "gt_y", ",", "'r-'", ")", "\n", "plt", ".", "plot", "(", "est_x", ",", "est_y", ",", "'y-.'", ")", "\n", "plt", ".", "ylabel", "(", "'Cost'", ")", "\n", "plt", ".", "title", "(", "'Cost    Max:{:.2f}, Min:{:.2f}'", ".", "format", "(", "cost", "[", ":", ",", "h", ",", "w", "]", ".", "max", "(", ")", ",", "cost", "[", ":", ",", "h", ",", "w", "]", ".", "min", "(", ")", ")", ")", "\n", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "leftImage", "/", "255.0", ")", "\n", "plt", ".", "plot", "(", "w", ",", "h", ",", "'w+'", ")", "\n", "plt", ".", "title", "(", "'Left Image, Position: ({}, {}) \\n White: GroundTruth, Yellow: Estimation'", ".", "format", "(", "h", ",", "w", ")", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "4", ")", "\n", "plt", ".", "imshow", "(", "rightImage", "/", "255.0", ")", "\n", "plt", ".", "title", "(", "'Right Image, GT:{:.4f} Pred:{:.4f} Abs Error:{:.4f}'", ".", "format", "(", "gt", ",", "est", ",", "abs", "(", "gt", "-", "est", ")", ")", ")", "\n", "if", "w", "-", "gt", ">", "0", ":", "\n", "            ", "plt", ".", "plot", "(", "int", "(", "w", "-", "gt", ")", ",", "h", ",", "'w+'", ")", "\n", "plt", ".", "plot", "(", "int", "(", "w", "-", "est", ")", ",", "h", ",", "'y+'", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "plot", "(", "int", "(", "w", "-", "gt", ")", ",", "h", ",", "'r+'", ")", "\n", "plt", ".", "plot", "(", "int", "(", "w", "-", "est", ")", ",", "h", ",", "'y+'", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax": [[20, 24], ["numpy.max", "numpy.exp", "np.exp.sum"], "function", ["None"], ["def", "softmax", "(", "x", ",", "dim", "=", "0", ")", ":", "\n", "    ", "mx", "=", "np", ".", "max", "(", "x", ",", "axis", "=", "dim", ")", "\n", "e_x", "=", "np", ".", "exp", "(", "x", "-", "mx", ")", "\n", "return", "e_x", "/", "e_x", ".", "sum", "(", "axis", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.gen_kitti2015_anns.is_image_file": [[15, 17], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.gen_kitti2015_anns.getKITTI2015Metas": [[19, 64], ["imageNames.sort", "dict", "Metas.append", "range", "os.listdir", "os.listdir", "os.join", "img.find", "os.join", "os.join", "subMetas.append", "subMetas.append", "os.join", "os.join"], "function", ["None"], ["", "def", "getKITTI2015Metas", "(", "root", ",", "Type", ",", "mode", ",", "is_full", "=", "True", ")", ":", "\n", "    ", "r\"\"\"\n    Arguments:\n        root, (str): the dataset root\n        Type, (str): data type: training, testing\n        mode, (str): phase: training, testing or evaluating\n        is_full, (bool): whether to set the whole dataset as training dataset, or split into training/evaluating\n    \"\"\"", "\n", "Metas", "=", "[", "]", "\n", "\n", "imageNames", "=", "[", "img", "for", "img", "in", "os", ".", "listdir", "(", "osp", ".", "join", "(", "root", ",", "Type", ",", "'image_2'", ")", ")", "if", "img", ".", "find", "(", "'_10'", ")", ">", "-", "1", "]", "\n", "imageNames", ".", "sort", "(", ")", "\n", "\n", "for", "imageName", "in", "imageNames", ":", "\n", "        ", "meta", "=", "dict", "(", "\n", "left_image_path", "=", "osp", ".", "join", "(", "\n", "Type", ",", "'image_2'", ",", "imageName", "\n", ")", ",", "\n", "right_image_path", "=", "osp", ".", "join", "(", "\n", "Type", ",", "'image_3'", ",", "imageName", "\n", ")", ",", "\n", "left_disp_map_path", "=", "osp", ".", "join", "(", "\n", "Type", ",", "'disp_occ_0'", ",", "imageName", "\n", ")", "if", "Type", "==", "'training'", "else", "None", ",", "# testing dataset has no ground truth left disparity map", "\n", "right_disp_map_path", "=", "osp", ".", "join", "(", "\n", "Type", ",", "'disp_occ_1'", ",", "imageName", "\n", ")", "if", "Type", "==", "'training'", "else", "None", ",", "# testing dataset has no ground truth left disparity map", "\n", ")", "\n", "Metas", ".", "append", "(", "meta", ")", "\n", "\n", "# if not is_full, split the 200 images into training and evaluating", "\n", "", "eval_list", "=", "[", "1", ",", "3", ",", "6", ",", "20", ",", "26", ",", "35", ",", "38", ",", "41", ",", "43", ",", "44", ",", "\n", "49", ",", "60", ",", "67", ",", "70", ",", "81", ",", "84", ",", "89", ",", "97", ",", "109", ",", "119", ",", "\n", "122", ",", "123", ",", "129", ",", "130", ",", "132", ",", "134", ",", "141", ",", "144", ",", "152", ",", "158", ",", "\n", "159", ",", "165", ",", "171", ",", "174", ",", "179", ",", "182", ",", "184", ",", "186", ",", "187", ",", "196", "]", "\n", "if", "not", "is_full", "and", "Type", "==", "'training'", ":", "\n", "        ", "subMetas", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "200", ")", ":", "\n", "            ", "if", "mode", "==", "'evaluating'", "and", "idx", "in", "eval_list", ":", "\n", "                ", "subMetas", ".", "append", "(", "Metas", "[", "idx", "]", ")", "\n", "", "if", "mode", "==", "'training'", "and", "idx", "not", "in", "eval_list", ":", "\n", "                ", "subMetas", ".", "append", "(", "Metas", "[", "idx", "]", ")", "\n", "", "", "Metas", "=", "subMetas", "\n", "\n", "", "return", "Metas", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.gen_kitti2015_anns.check": [[66, 72], ["tqdm.tqdm", "meta.items", "os.exists", "gen_kitti2015_anns.is_image_file", "os.join"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.is_image_file"], ["", "def", "check", "(", "root", ",", "Metas", ")", ":", "\n", "    ", "for", "meta", "in", "tqdm", "(", "Metas", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "meta", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", "is", "not", "None", ":", "\n", "                ", "assert", "osp", ".", "exists", "(", "osp", ".", "join", "(", "root", ",", "v", ")", ")", ",", "'trainMetas:{} not exists'", ".", "format", "(", "v", ")", "\n", "assert", "is_image_file", "(", "v", ")", ",", "'trainMetas:{} is not a image file'", ".", "format", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.gen_kitti2015_anns.build_annoFile": [[74, 108], ["os.exists", "mmcv.mkdir_or_exist", "gen_kitti2015_anns.getKITTI2015Metas", "gen_kitti2015_anns.getKITTI2015Metas", "gen_kitti2015_anns.getKITTI2015Metas", "gen_kitti2015_anns.check", "gen_kitti2015_anns.check", "gen_kitti2015_anns.check", "print", "gen_kitti2015_anns.build_annoFile.make_json"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.gen_kitti2015_anns.getKITTI2015Metas", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.gen_kitti2015_anns.getKITTI2015Metas", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.gen_kitti2015_anns.getKITTI2015Metas", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.gen_kitti2015_anns.check", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.gen_kitti2015_anns.check", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.gen_kitti2015_anns.check"], ["", "", "", "", "def", "build_annoFile", "(", "root", ",", "save_annotation_root", ",", "is_full", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Build annotation files for Scene Flow Dataset.\n    Args:\n        root:\n    \"\"\"", "\n", "# check existence", "\n", "assert", "osp", ".", "exists", "(", "root", ")", ",", "'Path: {} not exists!'", ".", "format", "(", "root", ")", "\n", "mkdir_or_exist", "(", "save_annotation_root", ")", "\n", "\n", "trainMetas", "=", "getKITTI2015Metas", "(", "root", ",", "'training'", ",", "mode", "=", "'training'", ",", "is_full", "=", "is_full", ")", "\n", "evalMetas", "=", "getKITTI2015Metas", "(", "root", ",", "'training'", ",", "mode", "=", "'evaluating'", ",", "is_full", "=", "is_full", ")", "\n", "testMetas", "=", "getKITTI2015Metas", "(", "root", ",", "'testing'", ",", "mode", "=", "'testing'", ",", "is_full", "=", "True", ")", "\n", "\n", "check", "(", "root", ",", "trainMetas", ")", "\n", "check", "(", "root", ",", "evalMetas", ")", "\n", "check", "(", "root", ",", "testMetas", ")", "\n", "\n", "info_str", "=", "'KITTI-2015 Dataset contains:\\n'", "'    {:5d}   training samples \\n'", "'    {:5d}   validation samples \\n'", "'    {:5d}   testing samples'", ".", "format", "(", "len", "(", "trainMetas", ")", ",", "len", "(", "evalMetas", ")", ",", "len", "(", "testMetas", ")", ")", "\n", "print", "(", "info_str", ")", "\n", "\n", "def", "make_json", "(", "name", ",", "metas", ")", ":", "\n", "        ", "filepath", "=", "osp", ".", "join", "(", "save_annotation_root", ",", "name", "+", "'.json'", ")", "\n", "print", "(", "'Save to {}'", ".", "format", "(", "filepath", ")", ")", "\n", "with", "open", "(", "file", "=", "filepath", ",", "mode", "=", "'w'", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "metas", ",", "fp", "=", "fp", ")", "\n", "\n", "", "", "prefix", "=", "'full_'", "if", "is_full", "else", "'split_'", "\n", "make_json", "(", "name", "=", "prefix", "+", "'train'", ",", "metas", "=", "trainMetas", ")", "\n", "make_json", "(", "name", "=", "prefix", "+", "'eval'", ",", "metas", "=", "evalMetas", ")", "\n", "make_json", "(", "name", "=", "prefix", "+", "'test'", ",", "metas", "=", "testMetas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.gen_sceneflow_anns.getFlying3dMetas": [[10, 40], ["os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "zip", "os.join", "dict", "Metas.append", "name.split", "os.join", "os.join", "os.join", "os.join"], "function", ["None"], ["def", "getFlying3dMetas", "(", "root", ",", "Type", ",", "data_type", "=", "'clean'", ")", ":", "\n", "    ", "Metas", "=", "[", "]", "\n", "\n", "imgDir", "=", "'flyingthings3d/frames_'", "+", "data_type", "+", "'pass'", "\n", "dispDir", "=", "'flyingthings3d/disparity'", "\n", "Parts", "=", "[", "'A'", ",", "'B'", ",", "'C'", "]", "\n", "\n", "for", "Part", "in", "Parts", ":", "\n", "        ", "partDir", "=", "osp", ".", "join", "(", "root", ",", "dispDir", ",", "Type", ",", "Part", ")", "\n", "idxDirs", "=", "os", ".", "listdir", "(", "partDir", ")", "\n", "for", "idxDir", "in", "idxDirs", ":", "\n", "            ", "dispNames", "=", "os", ".", "listdir", "(", "osp", ".", "join", "(", "partDir", ",", "idxDir", ",", "'left'", ")", ")", "\n", "imgNames", "=", "[", "\"{}.png\"", ".", "format", "(", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "for", "name", "in", "dispNames", "]", "\n", "for", "imgName", ",", "dispName", "in", "zip", "(", "imgNames", ",", "dispNames", ")", ":", "\n", "                ", "meta", "=", "dict", "(", "\n", "left_image_path", "=", "osp", ".", "join", "(", "\n", "imgDir", ",", "Type", ",", "Part", ",", "idxDir", ",", "'left'", ",", "imgName", "\n", ")", ",", "\n", "right_image_path", "=", "osp", ".", "join", "(", "\n", "imgDir", ",", "Type", ",", "Part", ",", "idxDir", ",", "'right'", ",", "imgName", "\n", ")", ",", "\n", "left_disp_map_path", "=", "osp", ".", "join", "(", "\n", "dispDir", ",", "Type", ",", "Part", ",", "idxDir", ",", "'left'", ",", "dispName", "\n", ")", ",", "\n", "right_disp_map_path", "=", "osp", ".", "join", "(", "\n", "dispDir", ",", "Type", ",", "Part", ",", "idxDir", ",", "'right'", ",", "dispName", "\n", ")", ",", "\n", ")", "\n", "Metas", ".", "append", "(", "meta", ")", "\n", "", "", "", "return", "Metas", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.gen_sceneflow_anns.getMonkaaMetas": [[42, 70], ["os.listdir", "os.listdir", "os.join", "os.listdir", "os.listdir", "zip", "os.join", "dict", "Metas.append", "name.split", "os.join", "os.join", "os.join", "os.join"], "function", ["None"], ["", "def", "getMonkaaMetas", "(", "root", ",", "data_type", "=", "'clean'", ")", ":", "\n", "    ", "Metas", "=", "[", "]", "\n", "\n", "imgDir", "=", "'Monkaa/frames_'", "+", "data_type", "+", "'pass'", "\n", "dispDir", "=", "'Monkaa/disparity'", "\n", "\n", "sceneDirs", "=", "os", ".", "listdir", "(", "osp", ".", "join", "(", "root", ",", "dispDir", ")", ")", "\n", "\n", "for", "sceneDir", "in", "sceneDirs", ":", "\n", "        ", "dispNames", "=", "os", ".", "listdir", "(", "osp", ".", "join", "(", "root", ",", "dispDir", ",", "sceneDir", ",", "'left'", ")", ")", "\n", "imgNames", "=", "[", "\"{}.png\"", ".", "format", "(", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "for", "name", "in", "dispNames", "]", "\n", "for", "imgName", ",", "dispName", "in", "zip", "(", "imgNames", ",", "dispNames", ")", ":", "\n", "            ", "meta", "=", "dict", "(", "\n", "left_image_path", "=", "osp", ".", "join", "(", "\n", "imgDir", ",", "sceneDir", ",", "'left'", ",", "imgName", "\n", ")", ",", "\n", "right_image_path", "=", "osp", ".", "join", "(", "\n", "imgDir", ",", "sceneDir", ",", "'right'", ",", "imgName", "\n", ")", ",", "\n", "left_disp_map_path", "=", "osp", ".", "join", "(", "\n", "dispDir", ",", "sceneDir", ",", "'left'", ",", "dispName", "\n", ")", ",", "\n", "right_disp_map_path", "=", "osp", ".", "join", "(", "\n", "dispDir", ",", "sceneDir", ",", "'right'", ",", "dispName", "\n", ")", ",", "\n", ")", "\n", "Metas", ".", "append", "(", "meta", ")", "\n", "", "", "return", "Metas", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.gen_sceneflow_anns.getDrivingMetas": [[72, 104], ["os.listdir", "os.listdir", "os.join", "os.listdir", "os.listdir", "os.join", "os.listdir", "os.listdir", "os.join", "os.listdir", "os.listdir", "zip", "os.join", "dict", "Metas.append", "name.split", "os.join", "os.join", "os.join", "os.join"], "function", ["None"], ["", "def", "getDrivingMetas", "(", "root", ",", "data_type", "=", "'clean'", ")", ":", "\n", "    ", "Metas", "=", "[", "]", "\n", "\n", "imgDir", "=", "'driving/frames_'", "+", "data_type", "+", "'pass'", "\n", "dispDir", "=", "'driving/disparity'", "\n", "\n", "focalLengthDirs", "=", "os", ".", "listdir", "(", "osp", ".", "join", "(", "root", ",", "dispDir", ")", ")", "\n", "\n", "for", "focalLengthDir", "in", "focalLengthDirs", ":", "\n", "        ", "wardDirs", "=", "os", ".", "listdir", "(", "osp", ".", "join", "(", "root", ",", "dispDir", ",", "focalLengthDir", ")", ")", "\n", "for", "wardDir", "in", "wardDirs", ":", "\n", "            ", "speedDirs", "=", "os", ".", "listdir", "(", "osp", ".", "join", "(", "root", ",", "dispDir", ",", "focalLengthDir", ",", "wardDir", ")", ")", "\n", "for", "speedDir", "in", "speedDirs", ":", "\n", "                ", "dispNames", "=", "os", ".", "listdir", "(", "osp", ".", "join", "(", "root", ",", "dispDir", ",", "focalLengthDir", ",", "wardDir", ",", "speedDir", ",", "'left'", ")", ")", "\n", "imgNames", "=", "[", "\"{}.png\"", ".", "format", "(", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "for", "name", "in", "dispNames", "]", "\n", "for", "imgName", ",", "dispName", "in", "zip", "(", "imgNames", ",", "dispNames", ")", ":", "\n", "                    ", "meta", "=", "dict", "(", "\n", "left_image_path", "=", "osp", ".", "join", "(", "\n", "imgDir", ",", "focalLengthDir", ",", "wardDir", ",", "speedDir", ",", "'left'", ",", "imgName", "\n", ")", ",", "\n", "right_image_path", "=", "osp", ".", "join", "(", "\n", "imgDir", ",", "focalLengthDir", ",", "wardDir", ",", "speedDir", ",", "'right'", ",", "imgName", "\n", ")", ",", "\n", "left_disp_map_path", "=", "osp", ".", "join", "(", "\n", "dispDir", ",", "focalLengthDir", ",", "wardDir", ",", "speedDir", ",", "'left'", ",", "dispName", "\n", ")", ",", "\n", "right_disp_map_path", "=", "osp", ".", "join", "(", "\n", "dispDir", ",", "focalLengthDir", ",", "wardDir", ",", "speedDir", ",", "'right'", ",", "dispName", "\n", ")", ",", "\n", ")", "\n", "Metas", ".", "append", "(", "meta", ")", "\n", "", "", "", "", "return", "Metas", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.gen_sceneflow_anns.build_annoFile": [[106, 143], ["os.exists", "mmcv.mkdir_or_exist", "gen_sceneflow_anns.getFlying3dMetas", "gen_sceneflow_anns.getFlying3dMetas", "getFlying3dMetas.extend", "getFlying3dMetas.extend", "tqdm.tqdm", "tqdm.tqdm", "print", "gen_sceneflow_anns.build_annoFile.make_json"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.gen_sceneflow_anns.getFlying3dMetas", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.gen_sceneflow_anns.getFlying3dMetas"], ["", "def", "build_annoFile", "(", "root", ",", "save_annotation_root", ",", "data_type", "=", "'clean'", ")", ":", "\n", "    ", "\"\"\"\n    Build annotation files for Scene Flow Dataset.\n    Args:\n        root:\n    \"\"\"", "\n", "# check existence", "\n", "assert", "osp", ".", "exists", "(", "root", ")", ",", "'Path: {} not exists!'", ".", "format", "(", "root", ")", "\n", "mkdir_or_exist", "(", "save_annotation_root", ")", "\n", "\n", "trainMetas", "=", "getFlying3dMetas", "(", "root", ",", "'TRAIN'", ",", "data_type", ")", "\n", "testMetas", "=", "getFlying3dMetas", "(", "root", ",", "'TEST'", ",", "data_type", ")", "\n", "\n", "trainMetas", ".", "extend", "(", "getMonkaaMetas", "(", "root", ",", "data_type", ")", ")", "\n", "trainMetas", ".", "extend", "(", "getDrivingMetas", "(", "root", ",", "data_type", ")", ")", "\n", "\n", "for", "meta", "in", "tqdm", "(", "trainMetas", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "meta", ".", "items", "(", ")", ":", "\n", "            ", "assert", "osp", ".", "exists", "(", "osp", ".", "join", "(", "root", ",", "v", ")", ")", ",", "'trainMetas:{} not exists'", ".", "format", "(", "v", ")", "\n", "\n", "", "", "for", "meta", "in", "tqdm", "(", "testMetas", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "meta", ".", "items", "(", ")", ":", "\n", "            ", "assert", "osp", ".", "exists", "(", "osp", ".", "join", "(", "root", ",", "v", ")", ")", ",", "'testMetas: {} not exists'", ".", "format", "(", "v", ")", "\n", "\n", "", "", "info_str", "=", "'SceneFlow Dataset contains:\\n'", "'    {:5d}   training samples \\n'", "'    {:5d} validation samples'", ".", "format", "(", "len", "(", "trainMetas", ")", ",", "len", "(", "testMetas", ")", ")", "\n", "print", "(", "info_str", ")", "\n", "\n", "def", "make_json", "(", "name", ",", "metas", ")", ":", "\n", "        ", "filepath", "=", "osp", ".", "join", "(", "save_annotation_root", ",", "data_type", "+", "'pass_'", "+", "name", "+", "'.json'", ")", "\n", "print", "(", "'Save to {}'", ".", "format", "(", "filepath", ")", ")", "\n", "with", "open", "(", "file", "=", "filepath", ",", "mode", "=", "'w'", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "metas", ",", "fp", "=", "fp", ")", "\n", "\n", "", "", "make_json", "(", "name", "=", "'train'", ",", "metas", "=", "trainMetas", ")", "\n", "make_json", "(", "name", "=", "'test'", ",", "metas", "=", "testMetas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.datasets.__init__.build_dataset": [[7, 13], ["cfg.get", "stereo.build_stereo_dataset", "flow.build_flow_dataset"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.builder.build_stereo_dataset", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.builder.build_flow_dataset"], []], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.tensorboard_logger.TensorboardLoggerHook.__init__": [[19, 31], ["mmcv.runner.LoggerHook.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "log_dir", "=", "None", ",", "\n", "interval", "=", "10", ",", "\n", "ignore_last", "=", "True", ",", "\n", "reset_flag", "=", "True", ",", "\n", "register_logWithIter_keyword", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "TensorboardLoggerHook", ",", "self", ")", ".", "__init__", "(", "interval", ",", "ignore_last", ",", "\n", "reset_flag", ")", "\n", "self", ".", "log_dir", "=", "log_dir", "\n", "self", ".", "register_logWithIter_keyword", "=", "register_logWithIter_keyword", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.tensorboard_logger.TensorboardLoggerHook.before_run": [[32, 43], ["SummaryWriter", "ImportError", "os.join"], "methods", ["None"], ["", "@", "master_only", "\n", "def", "before_run", "(", "self", ",", "runner", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "tensorboardX", "import", "SummaryWriter", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Please install tensorflow and tensorboardX '", "\n", "'to use TensorboardLoggerHook.'", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "log_dir", "is", "None", ":", "\n", "                ", "self", ".", "log_dir", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'tf_logs'", ")", "\n", "", "self", ".", "writer", "=", "SummaryWriter", "(", "self", ".", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.tensorboard_logger.TensorboardLoggerHook.single_log": [[44, 70], ["isinstance", "tag.split", "tensorboard_logger.TensorboardLoggerHook.writer.add_image", "tensorboard_logger.TensorboardLoggerHook.writer.add_figure", "tensorboard_logger.TensorboardLoggerHook.writer.add_histogram", "tensorboard_logger.TensorboardLoggerHook.writer.add_scalar", "tensorboard_logger.TensorboardLoggerHook.writer.add_text", "tensorboard_logger.TensorboardLoggerHook.writer.add_image", "tensorboard_logger.TensorboardLoggerHook.writer.add_scalar", "tag.split"], "methods", ["None"], ["", "", "@", "master_only", "\n", "def", "single_log", "(", "self", ",", "tag", ",", "record", ",", "global_step", ")", ":", "\n", "# self-defined, in format: prefix/suffix_tag", "\n", "        ", "prefix", "=", "tag", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "suffix_tag", "=", "'/'", ".", "join", "(", "tag", ".", "split", "(", "'/'", ")", "[", "1", ":", "]", ")", "\n", "if", "prefix", "==", "'image'", ":", "\n", "            ", "self", ".", "writer", ".", "add_image", "(", "suffix_tag", ",", "record", ",", "global_step", ")", "\n", "return", "\n", "", "if", "prefix", "==", "'figure'", ":", "\n", "            ", "self", ".", "writer", ".", "add_figure", "(", "suffix_tag", ",", "record", ",", "global_step", ")", "\n", "return", "\n", "", "if", "prefix", "==", "'histogram'", ":", "\n", "            ", "self", ".", "writer", ".", "add_histogram", "(", "suffix_tag", ",", "record", ",", "global_step", ")", "\n", "return", "\n", "", "if", "prefix", "==", "'scalar'", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "suffix_tag", ",", "record", ",", "global_step", ")", "\n", "return", "\n", "\n", "", "if", "isinstance", "(", "record", ",", "str", ")", ":", "\n", "            ", "self", ".", "writer", ".", "add_text", "(", "tag", ",", "record", ",", "global_step", ")", "\n", "return", "\n", "\n", "", "if", "torch", ".", "is_tensor", "(", "record", ")", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "tag", ",", "record", ",", "global_step", ")", "\n", "return", "\n", "\n", "", "if", "record", ".", "size", ">", "1", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.tensorboard_logger.TensorboardLoggerHook.log": [[71, 95], ["isinstance", "isinstance", "enumerate", "tensorboard_logger.TensorboardLoggerHook.single_log", "tensorboard_logger.TensorboardLoggerHook.single_log", "var.find"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.tensorboard_logger.TensorboardLoggerHook.single_log", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.tensorboard_logger.TensorboardLoggerHook.single_log"], ["            ", "self", ".", "writer", ".", "add_image", "(", "tag", ",", "record", ",", "global_step", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "tag", ",", "record", ",", "global_step", ")", "\n", "\n", "", "", "@", "master_only", "\n", "def", "log", "(", "self", ",", "runner", ")", ":", "\n", "        ", "for", "var", "in", "runner", ".", "log_buffer", ".", "output", ":", "\n", "            ", "if", "var", "in", "[", "'time'", ",", "'data_time'", "]", ":", "\n", "                ", "continue", "\n", "", "tag", "=", "var", "\n", "record", "=", "runner", ".", "log_buffer", ".", "output", "[", "var", "]", "\n", "\n", "global_step", "=", "runner", ".", "epoch", "\n", "\n", "# for example, loss will be log as iteration", "\n", "if", "isinstance", "(", "self", ".", "register_logWithIter_keyword", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                ", "for", "keyword", "in", "self", ".", "register_logWithIter_keyword", ":", "\n", "                    ", "if", "var", ".", "find", "(", "keyword", ")", ">", "-", "1", ":", "\n", "                        ", "global_step", "=", "runner", ".", "iter", "\n", "\n", "", "", "", "global_step", "=", "global_step", "+", "1", "\n", "\n", "if", "isinstance", "(", "record", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "for", "idx", ",", "rec", "in", "enumerate", "(", "record", ")", ":", "\n", "                    ", "tag", "=", "var", "+", "'/'", "+", "'{}'", ".", "format", "(", "idx", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.tensorboard_logger.TensorboardLoggerHook.after_run": [[96, 99], ["tensorboard_logger.TensorboardLoggerHook.writer.close"], "methods", ["None"], ["self", ".", "single_log", "(", "tag", ",", "rec", ",", "global_step", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "single_log", "(", "tag", ",", "record", ",", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.dist_utils.DistOptimizerHook.__init__": [[54, 59], ["mmcv.runner.OptimizerHook.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "grad_clip", "=", "None", ",", "coalesce", "=", "True", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "DistOptimizerHook", ",", "self", ")", ".", "__init__", "(", "grad_clip", ")", "\n", "self", ".", "grad_clip", "=", "grad_clip", "\n", "self", ".", "coalesce", "=", "coalesce", "\n", "self", ".", "bucket_size_mb", "=", "bucket_size_mb", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.dist_utils.DistOptimizerHook.after_train_iter": [[60, 67], ["runner.optimizer.zero_grad", "runner.outputs[].backward", "dist_utils.all_reduce_grads", "runner.optimizer.step", "dist_utils.DistOptimizerHook.clip_grads", "runner.model.parameters"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.functions.gaterecurrent2dnoind.GateRecurrent2dnoindFunction.backward", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.dist_utils.all_reduce_grads"], ["", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "runner", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "runner", ".", "outputs", "[", "'loss'", "]", ".", "backward", "(", ")", "\n", "all_reduce_grads", "(", "runner", ".", "model", ",", "self", ".", "coalesce", ",", "self", ".", "bucket_size_mb", ")", "\n", "if", "self", ".", "grad_clip", "is", "not", "None", ":", "\n", "            ", "self", ".", "clip_grads", "(", "runner", ".", "model", ".", "parameters", "(", ")", ")", "\n", "", "runner", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.dist_utils.DistApexOptimizerHook.__init__": [[71, 77], ["mmcv.runner.OptimizerHook.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "grad_clip", "=", "None", ",", "coalesce", "=", "True", ",", "bucket_size_mb", "=", "-", "1", ",", "use_apex", "=", "True", ")", ":", "\n", "        ", "super", "(", "DistApexOptimizerHook", ",", "self", ")", ".", "__init__", "(", "grad_clip", ")", "\n", "self", ".", "grad_clip", "=", "grad_clip", "\n", "self", ".", "coalesce", "=", "coalesce", "\n", "self", ".", "bucket_size_mb", "=", "bucket_size_mb", "\n", "self", ".", "use_apex", "=", "use_apex", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.dist_utils.DistApexOptimizerHook.after_train_iter": [[78, 89], ["runner.model.zero_grad", "runner.optimizer.zero_grad", "dist_utils.all_reduce_grads", "runner.optimizer.step", "amp.scale_loss", "scaled_losses.backward", "dist_utils.DistApexOptimizerHook.clip_grads", "runner.model.parameters"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.dist_utils.all_reduce_grads", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.functions.gaterecurrent2dnoind.GateRecurrent2dnoindFunction.backward"], ["", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "runner", ".", "model", ".", "zero_grad", "(", ")", "\n", "runner", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "# Note: If mixed precision is not used, this ends up doing nothing", "\n", "# Otherwise apply loss scaling for mixed-precision recipe", "\n", "with", "amp", ".", "scale_loss", "(", "runner", ".", "outputs", "[", "'loss'", "]", ",", "runner", ".", "optimizer", ")", "as", "scaled_losses", ":", "\n", "            ", "scaled_losses", ".", "backward", "(", ")", "\n", "", "all_reduce_grads", "(", "runner", ".", "model", ",", "self", ".", "coalesce", ",", "self", ".", "bucket_size_mb", ")", "\n", "if", "self", ".", "grad_clip", "is", "not", "None", ":", "\n", "            ", "self", ".", "clip_grads", "(", "runner", ".", "model", ".", "parameters", "(", ")", ")", "\n", "", "runner", ".", "optimizer", ".", "step", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.dist_utils._all_reduce_coalesced": [[16, 36], ["torch._utils._take_tensors", "collections.OrderedDict", "buckets.values.values", "torch._utils._flatten_dense_tensors", "torch.all_reduce", "torch._utils._flatten_dense_tensors.div_", "zip", "tensor.type", "buckets[].append", "torch._utils._unflatten_dense_tensors", "tensor.copy_"], "function", ["None"], ["", "def", "_all_reduce_coalesced", "(", "tensors", ",", "world_size", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "    ", "if", "bucket_size_mb", ">", "0", ":", "\n", "        ", "bucket_size_bytes", "=", "bucket_size_mb", "*", "1024", "*", "1024", "\n", "buckets", "=", "_take_tensors", "(", "tensors", ",", "bucket_size_bytes", ")", "\n", "", "else", ":", "\n", "        ", "buckets", "=", "OrderedDict", "(", ")", "\n", "for", "tensor", "in", "tensors", ":", "\n", "            ", "tp", "=", "tensor", ".", "type", "(", ")", "\n", "if", "tp", "not", "in", "buckets", ":", "\n", "                ", "buckets", "[", "tp", "]", "=", "[", "]", "\n", "", "buckets", "[", "tp", "]", ".", "append", "(", "tensor", ")", "\n", "", "buckets", "=", "buckets", ".", "values", "(", ")", "\n", "\n", "", "for", "bucket", "in", "buckets", ":", "\n", "        ", "flat_tensors", "=", "_flatten_dense_tensors", "(", "bucket", ")", "\n", "dist", ".", "all_reduce", "(", "flat_tensors", ")", "\n", "flat_tensors", ".", "div_", "(", "world_size", ")", "\n", "for", "tensor", ",", "synced", "in", "zip", "(", "\n", "bucket", ",", "_unflatten_dense_tensors", "(", "flat_tensors", ",", "bucket", ")", ")", ":", "\n", "            ", "tensor", ".", "copy_", "(", "synced", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.dist_utils.all_reduce_grads": [[38, 50], ["torch.get_world_size", "dist_utils._all_reduce_coalesced", "model.parameters", "torch.all_reduce", "tensor.div_"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.dist_utils._all_reduce_coalesced"], ["", "", "", "def", "all_reduce_grads", "(", "model", ",", "coalesce", "=", "True", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "    ", "grads", "=", "[", "\n", "param", ".", "grad", ".", "data", "for", "param", "in", "model", ".", "parameters", "(", ")", "\n", "if", "param", ".", "requires_grad", "and", "param", ".", "grad", "is", "not", "None", "\n", "]", "\n", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "coalesce", ":", "\n", "        ", "_all_reduce_coalesced", "(", "grads", ",", "world_size", ",", "bucket_size_mb", ")", "\n", "", "else", ":", "\n", "        ", "for", "tensor", "in", "grads", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "tensor", ".", "div_", "(", "world_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.__init__": [[38, 88], ["callable", "mmcv.is_str", "hasattr", "mmcv.runner.dist_utils.get_dist_info", "mmcv.runner.utils.get_time_str", "mmcv.runner.log_buffer.LogBuffer", "runner.Runner.init_optimizer", "os.abspath", "mmcv.mkdir_or_exist", "runner.Runner.init_logger", "isinstance", "TypeError"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.init_optimizer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.init_logger"], ["def", "__init__", "(", "self", ",", "\n", "model", ",", "\n", "batch_processor", ",", "\n", "optimizer", "=", "None", ",", "\n", "work_dir", "=", "None", ",", "\n", "log_level", "=", "logging", ".", "INFO", ",", "\n", "logger", "=", "None", ",", "\n", "meta", "=", "None", ")", ":", "\n", "        ", "assert", "callable", "(", "batch_processor", ")", "\n", "self", ".", "model", "=", "model", "\n", "if", "optimizer", "is", "not", "None", ":", "\n", "            ", "self", ".", "optimizer", "=", "self", ".", "init_optimizer", "(", "optimizer", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "None", "\n", "", "self", ".", "batch_processor", "=", "batch_processor", "\n", "\n", "# create work_dir", "\n", "if", "mmcv", ".", "is_str", "(", "work_dir", ")", ":", "\n", "            ", "self", ".", "work_dir", "=", "osp", ".", "abspath", "(", "work_dir", ")", "\n", "mmcv", ".", "mkdir_or_exist", "(", "self", ".", "work_dir", ")", "\n", "", "elif", "work_dir", "is", "None", ":", "\n", "            ", "self", ".", "work_dir", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'\"work_dir\" must be a str or None'", ")", "\n", "\n", "# get model name from the model class", "\n", "", "if", "hasattr", "(", "self", ".", "model", ",", "'module'", ")", ":", "\n", "            ", "self", ".", "_model_name", "=", "self", ".", "model", ".", "module", ".", "__class__", ".", "__name__", "\n", "", "else", ":", "\n", "            ", "self", ".", "_model_name", "=", "self", ".", "model", ".", "__class__", ".", "__name__", "\n", "\n", "", "self", ".", "_rank", ",", "self", ".", "_world_size", "=", "get_dist_info", "(", ")", "\n", "self", ".", "timestamp", "=", "get_time_str", "(", ")", "\n", "if", "logger", "is", "None", ":", "\n", "            ", "self", ".", "logger", "=", "self", ".", "init_logger", "(", "work_dir", ",", "log_level", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", "=", "logger", "\n", "", "self", ".", "log_buffer", "=", "LogBuffer", "(", ")", "\n", "\n", "if", "meta", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "meta", ",", "dict", ")", ",", "'\"meta\" must be a dict or None'", "\n", "", "self", ".", "meta", "=", "meta", "\n", "\n", "self", ".", "mode", "=", "None", "\n", "self", ".", "_hooks", "=", "[", "]", "\n", "self", ".", "_epoch", "=", "0", "\n", "self", ".", "_iter", "=", "0", "\n", "self", ".", "_inner_iter", "=", "0", "\n", "self", ".", "_max_epochs", "=", "0", "\n", "self", ".", "_max_iters", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.model_name": [[89, 93], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_name", "(", "self", ")", ":", "\n", "        ", "\"\"\"str: Name of the model, usually the module class name.\"\"\"", "\n", "return", "self", ".", "_model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.rank": [[94, 98], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "rank", "(", "self", ")", ":", "\n", "        ", "\"\"\"int: Rank of current process. (distributed training)\"\"\"", "\n", "return", "self", ".", "_rank", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.world_size": [[99, 104], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "world_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"int: Number of processes participating in the job.\n        (distributed training)\"\"\"", "\n", "return", "self", ".", "_world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.hooks": [[105, 109], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hooks", "(", "self", ")", ":", "\n", "        ", "\"\"\"list[:obj:`Hook`]: A list of registered hooks.\"\"\"", "\n", "return", "self", ".", "_hooks", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.epoch": [[110, 114], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\"int: Current epoch.\"\"\"", "\n", "return", "self", ".", "_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.iter": [[115, 119], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "iter", "(", "self", ")", ":", "\n", "        ", "\"\"\"int: Current iteration.\"\"\"", "\n", "return", "self", ".", "_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.inner_iter": [[120, 124], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "inner_iter", "(", "self", ")", ":", "\n", "        ", "\"\"\"int: Iteration in an epoch.\"\"\"", "\n", "return", "self", ".", "_inner_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.max_epochs": [[125, 129], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_epochs", "(", "self", ")", ":", "\n", "        ", "\"\"\"int: Maximum training epochs.\"\"\"", "\n", "return", "self", ".", "_max_epochs", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.max_iters": [[130, 134], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_iters", "(", "self", ")", ":", "\n", "        ", "\"\"\"int: Maximum training iterations.\"\"\"", "\n", "return", "self", ".", "_max_iters", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.init_optimizer": [[135, 158], ["isinstance", "mmcv.runner.utils.obj_from_dict", "dict", "isinstance", "TypeError", "runner.Runner.model.parameters", "type"], "methods", ["None"], ["", "def", "init_optimizer", "(", "self", ",", "optimizer", ")", ":", "\n", "        ", "\"\"\"Init the optimizer.\n\n        Args:\n            optimizer (dict or :obj:`~torch.optim.Optimizer`): Either an\n                optimizer object or a dict used for constructing the optimizer.\n\n        Returns:\n            :obj:`~torch.optim.Optimizer`: An optimizer object.\n\n        Examples:\n            >>> optimizer = dict(type='SGD', lr=0.01, momentum=0.9)\n            >>> type(runner.init_optimizer(optimizer))\n            <class 'torch.optim.sgd.SGD'>\n        \"\"\"", "\n", "if", "isinstance", "(", "optimizer", ",", "dict", ")", ":", "\n", "            ", "optimizer", "=", "obj_from_dict", "(", "optimizer", ",", "torch", ".", "optim", ",", "\n", "dict", "(", "params", "=", "self", ".", "model", ".", "parameters", "(", ")", ")", ")", "\n", "", "elif", "not", "isinstance", "(", "optimizer", ",", "torch", ".", "optim", ".", "Optimizer", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'optimizer must be either an Optimizer object or a dict, '", "\n", "'but got {}'", ".", "format", "(", "type", "(", "optimizer", ")", ")", ")", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner._add_file_handler": [[159, 171], ["logging.FileHandler", "logging.FileHandler.setFormatter", "logging.FileHandler.setLevel", "logger.addHandler", "logging.Formatter"], "methods", ["None"], ["", "def", "_add_file_handler", "(", "self", ",", "\n", "logger", ",", "\n", "filename", "=", "None", ",", "\n", "mode", "=", "'w'", ",", "\n", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "# TODO: move this method out of runner", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "filename", ",", "mode", ")", "\n", "file_handler", ".", "setFormatter", "(", "\n", "logging", ".", "Formatter", "(", "'%(asctime)s - %(levelname)s - %(message)s'", ")", ")", "\n", "# print('level', level)", "\n", "level", "=", "'INFO'", "\n", "file_handler", ".", "setLevel", "(", "level", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.init_logger": [[172, 191], ["logging.basicConfig", "logging.getLogger", "os.join", "runner.Runner._add_file_handler"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner._add_file_handler"], ["return", "logger", "\n", "\n", "", "def", "init_logger", "(", "self", ",", "log_dir", "=", "None", ",", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "        ", "\"\"\"Init the logger.\n\n        Args:\n            log_dir(str, optional): Log file directory. If not specified, no\n                log file will be used.\n            level (int or str): See the built-in python logging module.\n\n        Returns:\n            :obj:`~logging.Logger`: Python logger.\n        \"\"\"", "\n", "logging", ".", "basicConfig", "(", "\n", "format", "=", "'%(asctime)s - %(levelname)s - %(message)s'", ",", "level", "=", "level", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "if", "log_dir", "and", "self", ".", "rank", "==", "0", ":", "\n", "            ", "filename", "=", "'{}.log'", ".", "format", "(", "self", ".", "timestamp", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "log_dir", ",", "filename", ")", "\n", "self", ".", "_add_file_handler", "(", "logger", ",", "log_file", ",", "level", "=", "level", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.current_lr": [[192, 202], ["RuntimeError"], "methods", ["None"], ["", "return", "logger", "\n", "\n", "", "def", "current_lr", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get current learning rates.\n\n        Returns:\n            list: Current learning rate of all param groups.\n        \"\"\"", "\n", "if", "self", ".", "optimizer", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "'lr is not applicable because optimizer does not exist.'", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.current_momentum": [[203, 216], ["RuntimeError", "group.keys"], "methods", ["None"], ["", "return", "[", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n", "", "def", "current_momentum", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get current momentums.\n\n        Returns:\n            list: Current momentum of all param groups.\n        \"\"\"", "\n", "if", "self", ".", "optimizer", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "'lr is not applicable because optimizer does not exist.'", ")", "\n", "", "return", "[", "\n", "group", "[", "'momentum'", "]", "\n", "if", "'momentum'", "in", "group", ".", "keys", "(", ")", "else", "group", "[", "'betas'", "]", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_hook": [[218, 240], ["isinstance", "hasattr", "mmcv.runner.priority.get_priority", "range", "ValueError", "runner.Runner._hooks.insert", "len", "runner.Runner._hooks.insert"], "methods", ["None"], ["]", "\n", "\n", "", "def", "register_hook", "(", "self", ",", "hook", ",", "priority", "=", "'NORMAL'", ")", ":", "\n", "        ", "\"\"\"Register a hook into the hook list.\n\n        Args:\n            hook (:obj:`Hook`): The hook to be registered.\n            priority (int or str or :obj:`Priority`): Hook priority.\n                Lower value means higher priority.\n        \"\"\"", "\n", "assert", "isinstance", "(", "hook", ",", "Hook", ")", "\n", "if", "hasattr", "(", "hook", ",", "'priority'", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'\"priority\" is a reserved attribute for hooks'", ")", "\n", "", "priority", "=", "get_priority", "(", "priority", ")", "\n", "hook", ".", "priority", "=", "priority", "\n", "# insert the hook to a sorted list", "\n", "inserted", "=", "False", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_hooks", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "if", "priority", ">=", "self", ".", "_hooks", "[", "i", "]", ".", "priority", ":", "\n", "                ", "self", ".", "_hooks", ".", "insert", "(", "i", "+", "1", ",", "hook", ")", "\n", "inserted", "=", "True", "\n", "break", "\n", "", "", "if", "not", "inserted", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.call_hook": [[241, 244], ["getattr"], "methods", ["None"], ["            ", "self", ".", "_hooks", ".", "insert", "(", "0", ",", "hook", ")", "\n", "\n", "", "", "def", "call_hook", "(", "self", ",", "fn_name", ")", ":", "\n", "        ", "for", "hook", "in", "self", ".", "_hooks", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.load_checkpoint": [[245, 249], ["runner.Runner.logger.info", "mmcv.runner.checkpoint.load_checkpoint"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.load_checkpoint"], ["            ", "getattr", "(", "hook", ",", "fn_name", ")", "(", "self", ")", "\n", "\n", "", "", "def", "load_checkpoint", "(", "self", ",", "filename", ",", "map_location", "=", "'cpu'", ",", "strict", "=", "False", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'load checkpoint from %s'", ",", "filename", ")", "\n", "return", "load_checkpoint", "(", "self", ".", "model", ",", "filename", ",", "map_location", ",", "strict", ",", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.save_checkpoint": [[250, 269], ["filename_tmpl.format", "os.join", "mmcv.runner.checkpoint.save_checkpoint", "dict", "dict.update", "mmcv.symlink", "os.join"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.save_checkpoint"], ["self", ".", "logger", ")", "\n", "\n", "", "def", "save_checkpoint", "(", "self", ",", "\n", "out_dir", ",", "\n", "filename_tmpl", "=", "'epoch_{}.pth'", ",", "\n", "save_optimizer", "=", "True", ",", "\n", "meta", "=", "None", ",", "\n", "create_symlink", "=", "True", ")", ":", "\n", "        ", "if", "meta", "is", "None", ":", "\n", "            ", "meta", "=", "dict", "(", "epoch", "=", "self", ".", "epoch", "+", "1", ",", "iter", "=", "self", ".", "iter", ")", "\n", "", "else", ":", "\n", "            ", "meta", ".", "update", "(", "epoch", "=", "self", ".", "epoch", "+", "1", ",", "iter", "=", "self", ".", "iter", ")", "\n", "\n", "", "filename", "=", "filename_tmpl", ".", "format", "(", "self", ".", "epoch", "+", "1", ")", "\n", "filepath", "=", "osp", ".", "join", "(", "out_dir", ",", "filename", ")", "\n", "optimizer", "=", "self", ".", "optimizer", "if", "save_optimizer", "else", "None", "\n", "save_checkpoint", "(", "self", ".", "model", ",", "filepath", ",", "optimizer", "=", "optimizer", ",", "meta", "=", "meta", ")", "\n", "# in some environments, `os.symlink` is not supported, you may need to", "\n", "# set `create_symlink` to False", "\n", "if", "create_symlink", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.train": [[270, 330], ["runner.Runner.model.train", "runner.Runner.call_hook", "enumerate", "runner.Runner.call_hook", "enumerate", "runner.Runner.call_hook", "runner.Runner.batch_processor", "runner.Runner.call_hook", "print", "isinstance", "TypeError", "runner.Runner.log_buffer.update", "torch.no_grad", "runner.Runner.batch_processor", "range", "len", "torch.distributed.all_gather", "torch.cat", "torch.mean", "cov_list_gather.append", "torch.ones_like", "range", "torch.distributed.get_world_size"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.train", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.call_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.call_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.call_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.train.batch_processor", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.call_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.train.batch_processor"], ["            ", "mmcv", ".", "symlink", "(", "filename", ",", "osp", ".", "join", "(", "out_dir", ",", "'latest.pth'", ")", ")", "\n", "\n", "", "", "def", "train", "(", "self", ",", "data_loader", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "mode", "=", "'train'", "\n", "self", ".", "data_loader", "=", "data_loader", "\n", "\n", "self", ".", "call_hook", "(", "'before_train_epoch'", ")", "\n", "\n", "start_epoch", "=", "0", "\n", "if", "self", ".", "_epoch", "<=", "start_epoch", ":", "\n", "            ", "cov_list_gather", "=", "None", "\n", "self", ".", "cov_list_gather", "=", "cov_list_gather", "\n", "", "if", "self", ".", "_epoch", "==", "start_epoch", ":", "\n", "            ", "for", "i", ",", "data_batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "                ", "print", "(", "'i'", ",", "i", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "cov_list", "=", "self", ".", "batch_processor", "(", "\n", "self", ".", "model", ",", "data_batch", ",", "train_mode", "=", "True", ",", "epoch", "=", "self", ".", "_epoch", ",", "cal_cov", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "if", "cov_list", "is", "not", "None", ":", "\n", "                        ", "if", "cov_list_gather", "is", "None", ":", "\n", "                            ", "assert", "i", "==", "0", "\n", "", "else", ":", "\n", "                            ", "cov_list_last", "=", "cov_list_gather", "[", ":", "]", "\n", "", "cov_list_gather", "=", "[", "]", "\n", "for", "stg", "in", "range", "(", "len", "(", "cov_list", ")", ")", ":", "\n", "                            ", "cov", "=", "cov_list", "[", "stg", "]", "\n", "cov_gather", "=", "[", "torch", ".", "ones_like", "(", "cov", ")", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "cov_gather", ",", "cov", ",", "async_op", "=", "False", ")", "\n", "# print('mask_gather', mask_gather.shape)", "\n", "output", "=", "torch", ".", "cat", "(", "cov_gather", ",", "dim", "=", "0", ")", "\n", "output", "=", "torch", ".", "mean", "(", "output", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "if", "i", "!=", "0", ":", "\n", "                                ", "out_last", "=", "cov_list_last", "[", "stg", "]", "\n", "output", "=", "(", "output", "+", "out_last", "*", "i", ")", "/", "(", "i", "+", "1", ")", "\n", "", "cov_list_gather", ".", "append", "(", "output", ")", "\n", "", "", "else", ":", "\n", "                        ", "cov_list_gather", "=", "None", "\n", "\n", "# if i > 5000:", "\n", "#     break", "\n", "", "", "", "self", ".", "cov_list_gather", "=", "cov_list_gather", "\n", "\n", "\n", "\n", "", "for", "i", ",", "data_batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "self", ".", "_inner_iter", "=", "i", "\n", "self", ".", "call_hook", "(", "'before_train_iter'", ")", "\n", "outputs", "=", "self", ".", "batch_processor", "(", "\n", "self", ".", "model", ",", "data_batch", ",", "train_mode", "=", "True", ",", "epoch", "=", "self", ".", "_epoch", ",", "cal_cov", "=", "False", ",", "cov_list", "=", "self", ".", "cov_list_gather", ",", "**", "kwargs", ")", "\n", "if", "not", "isinstance", "(", "outputs", ",", "dict", ")", ":", "\n", "                ", "raise", "TypeError", "(", "'batch_processor() must return a dict'", ")", "\n", "", "if", "'log_vars'", "in", "outputs", ":", "\n", "                ", "self", ".", "log_buffer", ".", "update", "(", "outputs", "[", "'log_vars'", "]", ",", "\n", "outputs", "[", "'num_samples'", "]", ")", "\n", "", "self", ".", "outputs", "=", "outputs", "\n", "self", ".", "call_hook", "(", "'after_train_iter'", ")", "\n", "self", ".", "_iter", "+=", "1", "\n", "\n", "", "self", ".", "call_hook", "(", "'after_train_epoch'", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.val": [[331, 352], ["runner.Runner.model.eval", "runner.Runner.call_hook", "enumerate", "runner.Runner.call_hook", "runner.Runner.call_hook", "runner.Runner.call_hook", "torch.no_grad", "runner.Runner.batch_processor", "isinstance", "TypeError", "runner.Runner.log_buffer.update"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.call_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.call_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.call_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.call_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.train.batch_processor"], ["self", ".", "_epoch", "+=", "1", "\n", "\n", "", "def", "val", "(", "self", ",", "data_loader", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "mode", "=", "'val'", "\n", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "call_hook", "(", "'before_val_epoch'", ")", "\n", "\n", "for", "i", ",", "data_batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "self", ".", "_inner_iter", "=", "i", "\n", "self", ".", "call_hook", "(", "'before_val_iter'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "outputs", "=", "self", ".", "batch_processor", "(", "\n", "self", ".", "model", ",", "data_batch", ",", "train_mode", "=", "False", ",", "**", "kwargs", ")", "\n", "", "if", "not", "isinstance", "(", "outputs", ",", "dict", ")", ":", "\n", "                ", "raise", "TypeError", "(", "'batch_processor() must return a dict'", ")", "\n", "", "if", "'log_vars'", "in", "outputs", ":", "\n", "                ", "self", ".", "log_buffer", ".", "update", "(", "outputs", "[", "'log_vars'", "]", ",", "\n", "outputs", "[", "'num_samples'", "]", ")", "\n", "", "self", ".", "outputs", "=", "outputs", "\n", "self", ".", "call_hook", "(", "'after_val_iter'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.resume": [[353, 372], ["runner.Runner.logger.info", "torch.cuda.current_device", "runner.Runner.load_checkpoint", "runner.Runner.load_checkpoint", "runner.Runner.optimizer.load_state_dict", "storage.cuda"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.load_checkpoint", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.load_checkpoint"], ["", "self", ".", "call_hook", "(", "'after_val_epoch'", ")", "\n", "\n", "", "def", "resume", "(", "self", ",", "\n", "checkpoint", ",", "\n", "resume_optimizer", "=", "True", ",", "\n", "map_location", "=", "'default'", ")", ":", "\n", "        ", "if", "map_location", "==", "'default'", ":", "\n", "            ", "device_id", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "checkpoint", "=", "self", ".", "load_checkpoint", "(", "\n", "checkpoint", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ".", "cuda", "(", "device_id", ")", ")", "\n", "", "else", ":", "\n", "            ", "checkpoint", "=", "self", ".", "load_checkpoint", "(", "\n", "checkpoint", ",", "map_location", "=", "map_location", ")", "\n", "\n", "", "self", ".", "_epoch", "=", "checkpoint", "[", "'meta'", "]", "[", "'epoch'", "]", "\n", "self", ".", "_iter", "=", "checkpoint", "[", "'meta'", "]", "[", "'iter'", "]", "\n", "if", "'optimizer'", "in", "checkpoint", "and", "resume_optimizer", ":", "\n", "            ", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.run": [[373, 424], ["isinstance", "mmcv.is_list_of", "enumerate", "runner.Runner.logger.info", "runner.Runner.logger.info", "runner.Runner.call_hook", "time.sleep", "runner.Runner.call_hook", "len", "len", "mmcv.runner.utils.get_host_info", "enumerate", "isinstance", "range", "len", "getattr", "callable", "getattr.", "hasattr", "ValueError", "TypeError", "type"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.call_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.call_hook"], ["", "self", ".", "logger", ".", "info", "(", "'resumed epoch %d, iter %d'", ",", "self", ".", "epoch", ",", "self", ".", "iter", ")", "\n", "\n", "", "def", "run", "(", "self", ",", "data_loaders", ",", "workflow", ",", "max_epochs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Start running.\n\n        Args:\n            data_loaders (list[:obj:`DataLoader`]): Dataloaders for training\n                and validation.\n            workflow (list[tuple]): A list of (phase, epochs) to specify the\n                running order and epochs. E.g, [('train', 2), ('val', 1)] means\n                running 2 epochs for training and 1 epoch for validation,\n                iteratively.\n            max_epochs (int): Total training epochs.\n        \"\"\"", "\n", "assert", "isinstance", "(", "data_loaders", ",", "list", ")", "\n", "assert", "mmcv", ".", "is_list_of", "(", "workflow", ",", "tuple", ")", "\n", "assert", "len", "(", "data_loaders", ")", "==", "len", "(", "workflow", ")", "\n", "\n", "self", ".", "_max_epochs", "=", "max_epochs", "\n", "for", "i", ",", "flow", "in", "enumerate", "(", "workflow", ")", ":", "\n", "            ", "mode", ",", "epochs", "=", "flow", "\n", "if", "mode", "==", "'train'", ":", "\n", "                ", "self", ".", "_max_iters", "=", "self", ".", "_max_epochs", "*", "len", "(", "data_loaders", "[", "i", "]", ")", "\n", "break", "\n", "\n", "", "", "work_dir", "=", "self", ".", "work_dir", "if", "self", ".", "work_dir", "is", "not", "None", "else", "'NONE'", "\n", "self", ".", "logger", ".", "info", "(", "'Start running, host: %s, work_dir: %s'", ",", "\n", "get_host_info", "(", ")", ",", "work_dir", ")", "\n", "self", ".", "logger", ".", "info", "(", "'workflow: %s, max: %d epochs'", ",", "workflow", ",", "max_epochs", ")", "\n", "self", ".", "call_hook", "(", "'before_run'", ")", "\n", "\n", "while", "self", ".", "epoch", "<", "max_epochs", ":", "\n", "            ", "for", "i", ",", "flow", "in", "enumerate", "(", "workflow", ")", ":", "\n", "                ", "mode", ",", "epochs", "=", "flow", "\n", "if", "isinstance", "(", "mode", ",", "str", ")", ":", "# self.train()", "\n", "                    ", "if", "not", "hasattr", "(", "self", ",", "mode", ")", ":", "\n", "                        ", "raise", "ValueError", "(", "\n", "'runner has no method named \"{}\" to run an epoch'", ".", "\n", "format", "(", "mode", ")", ")", "\n", "", "epoch_runner", "=", "getattr", "(", "self", ",", "mode", ")", "\n", "", "elif", "callable", "(", "mode", ")", ":", "# custom train()", "\n", "                    ", "epoch_runner", "=", "mode", "\n", "", "else", ":", "\n", "                    ", "raise", "TypeError", "(", "'mode in workflow must be a str or '", "\n", "'callable function, not {}'", ".", "format", "(", "\n", "type", "(", "mode", ")", ")", ")", "\n", "", "for", "_", "in", "range", "(", "epochs", ")", ":", "\n", "                    ", "if", "mode", "==", "'train'", "and", "self", ".", "epoch", ">=", "max_epochs", ":", "\n", "                        ", "return", "\n", "", "epoch_runner", "(", "data_loaders", "[", "i", "]", ",", "**", "kwargs", ")", "\n", "\n", "", "", "", "time", ".", "sleep", "(", "1", ")", "# wait for some hooks like loggers to finish", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_lr_hook": [[425, 434], ["isinstance", "runner.Runner.register_hook", "mmcv.build_from_cfg", "lr_config.pop().title", "lr_config.pop"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_hook"], ["self", ".", "call_hook", "(", "'after_run'", ")", "\n", "\n", "", "def", "register_lr_hook", "(", "self", ",", "lr_config", ")", ":", "\n", "        ", "if", "isinstance", "(", "lr_config", ",", "dict", ")", ":", "\n", "            ", "assert", "'policy'", "in", "lr_config", "\n", "hook_type", "=", "lr_config", ".", "pop", "(", "'policy'", ")", ".", "title", "(", ")", "+", "'LrUpdaterHook'", "\n", "lr_config", "[", "'type'", "]", "=", "hook_type", "\n", "hook", "=", "mmcv", ".", "build_from_cfg", "(", "lr_config", ",", "HOOKS", ")", "\n", "", "else", ":", "\n", "            ", "hook", "=", "lr_config", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_optimizer_hook": [[435, 444], ["isinstance", "runner.Runner.register_hook", "optimizer_config.setdefault", "mmcv.build_from_cfg"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_hook"], ["", "self", ".", "register_hook", "(", "hook", ")", "\n", "\n", "", "def", "register_optimizer_hook", "(", "self", ",", "optimizer_config", ")", ":", "\n", "        ", "if", "optimizer_config", "is", "None", ":", "\n", "            ", "return", "\n", "", "if", "isinstance", "(", "optimizer_config", ",", "dict", ")", ":", "\n", "            ", "optimizer_config", ".", "setdefault", "(", "'type'", ",", "'OptimizerHook'", ")", "\n", "hook", "=", "mmcv", ".", "build_from_cfg", "(", "optimizer_config", ",", "HOOKS", ")", "\n", "", "else", ":", "\n", "            ", "hook", "=", "optimizer_config", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_checkpoint_hook": [[445, 454], ["isinstance", "runner.Runner.register_hook", "checkpoint_config.setdefault", "mmcv.build_from_cfg"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_hook"], ["", "self", ".", "register_hook", "(", "hook", ")", "\n", "\n", "", "def", "register_checkpoint_hook", "(", "self", ",", "checkpoint_config", ")", ":", "\n", "        ", "if", "checkpoint_config", "is", "None", ":", "\n", "            ", "return", "\n", "", "if", "isinstance", "(", "checkpoint_config", ",", "dict", ")", ":", "\n", "            ", "checkpoint_config", ".", "setdefault", "(", "'type'", ",", "'CheckpointHook'", ")", "\n", "hook", "=", "mmcv", ".", "build_from_cfg", "(", "checkpoint_config", ",", "HOOKS", ")", "\n", "", "else", ":", "\n", "            ", "hook", "=", "checkpoint_config", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_momentum_hooks": [[455, 467], ["isinstance", "runner.Runner.register_hook", "mmcv.build_from_cfg", "momentum_config.pop().title", "momentum_config.pop"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_hook"], ["", "self", ".", "register_hook", "(", "hook", ")", "\n", "\n", "", "def", "register_momentum_hooks", "(", "self", ",", "momentum_config", ")", ":", "\n", "        ", "if", "momentum_config", "is", "None", ":", "\n", "            ", "return", "\n", "", "if", "isinstance", "(", "momentum_config", ",", "dict", ")", ":", "\n", "            ", "assert", "'policy'", "in", "momentum_config", "\n", "hook_type", "=", "momentum_config", ".", "pop", "(", "\n", "'policy'", ")", ".", "title", "(", ")", "+", "'MomentumUpdaterHook'", "\n", "momentum_config", "[", "'type'", "]", "=", "hook_type", "\n", "hook", "=", "mmcv", ".", "build_from_cfg", "(", "momentum_config", ",", "HOOKS", ")", "\n", "", "else", ":", "\n", "            ", "hook", "=", "momentum_config", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_logger_hooks": [[468, 474], ["mmcv.build_from_cfg", "runner.Runner.register_hook", "dict"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_hook"], ["", "self", ".", "register_hook", "(", "hook", ")", "\n", "\n", "", "def", "register_logger_hooks", "(", "self", ",", "log_config", ")", ":", "\n", "        ", "log_interval", "=", "log_config", "[", "'interval'", "]", "\n", "for", "info", "in", "log_config", "[", "'hooks'", "]", ":", "\n", "            ", "logger_hook", "=", "mmcv", ".", "build_from_cfg", "(", "\n", "info", ",", "HOOKS", ",", "default_args", "=", "dict", "(", "interval", "=", "log_interval", ")", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_training_hooks": [[475, 498], ["runner.Runner.register_lr_hook", "runner.Runner.register_momentum_hooks", "runner.Runner.register_optimizer_hook", "runner.Runner.register_checkpoint_hook", "runner.Runner.register_hook", "runner.Runner.register_logger_hooks", "mmcv.runner.hooks.IterTimerHook"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_lr_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_momentum_hooks", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_optimizer_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_checkpoint_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_logger_hooks"], ["self", ".", "register_hook", "(", "logger_hook", ",", "priority", "=", "'VERY_LOW'", ")", "\n", "\n", "", "", "def", "register_training_hooks", "(", "self", ",", "\n", "lr_config", ",", "\n", "optimizer_config", "=", "None", ",", "\n", "checkpoint_config", "=", "None", ",", "\n", "log_config", "=", "None", ",", "\n", "momentum_config", "=", "None", ")", ":", "\n", "        ", "\"\"\"Register default hooks for training.\n\n        Default hooks include:\n\n        - LrUpdaterHook\n        - MomentumUpdaterHook\n        - OptimizerStepperHook\n        - CheckpointSaverHook\n        - IterTimerHook\n        - LoggerHook(s)\n        \"\"\"", "\n", "self", ".", "register_lr_hook", "(", "lr_config", ")", "\n", "self", ".", "register_momentum_hooks", "(", "momentum_config", ")", "\n", "self", ".", "register_optimizer_hook", "(", "optimizer_config", ")", "\n", "self", ".", "register_checkpoint_hook", "(", "checkpoint_config", ")", "\n", "self", ".", "register_hook", "(", "IterTimerHook", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.solver.build_optimizer": [[6, 71], ["hasattr", "optimizer_cfg.copy.copy", "optimizer_cfg.copy.pop", "mmcv.runner.obj_from_dict", "isinstance", "optimizer_cfg.copy.get", "optimizer_cfg.pop.get", "optimizer_cfg.pop.get", "optimizer_cfg.pop.get", "model.named_parameters", "getattr", "getattr.", "dict", "re.search", "params.append", "optimizer_cfg.copy.pop", "name.endswith", "model.parameters"], "function", ["None"], ["def", "build_optimizer", "(", "model", ",", "optimizer_cfg", ")", ":", "\n", "    ", "\"\"\"Build optimizer from configs.\n    Args:\n        model (:obj:`nn.Module`): The model with parameters to be optimized.\n        optimizer_cfg (dict): The config dict of the optimizer.\n            Positional fields are:\n                - type: class name of the optimizer.\n                - lr: base learning rate.\n            Optional fields are:\n                - any arguments of the corresponding optimizer type, e.g.,\n                  weight_decay, momentum, etc.\n                - paramwise_options: a dict with 3 accepted fileds\n                  (bias_lr_mult, bias_decay_mult, norm_decay_mult).\n                  `bias_lr_mult` and `bias_decay_mult` will be multiplied to\n                  the lr and weight decay respectively for all bias parameters\n                  (except for the normalization layers), and\n                  `norm_decay_mult` will be multiplied to the weight decay\n                  for all weight and bias parameters of normalization layers.\n    Returns:\n        torch.optim.Optimizer: The initialized optimizer.\n    \"\"\"", "\n", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "optimizer_cfg", "=", "optimizer_cfg", ".", "copy", "(", ")", "\n", "paramwise_options", "=", "optimizer_cfg", ".", "pop", "(", "'paramwise_options'", ",", "None", ")", "\n", "# if no paramwise option is specified, just use the global setting", "\n", "if", "paramwise_options", "is", "None", ":", "\n", "        ", "return", "obj_from_dict", "(", "optimizer_cfg", ",", "torch", ".", "optim", ",", "dict", "(", "params", "=", "model", ".", "parameters", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "paramwise_options", ",", "dict", ")", "\n", "# get base lr and weight decay", "\n", "base_lr", "=", "optimizer_cfg", "[", "'lr'", "]", "\n", "base_wd", "=", "optimizer_cfg", ".", "get", "(", "'weight_decay'", ",", "None", ")", "\n", "# weight_decay must be explicitly specified if mult is specified", "\n", "if", "(", "'bias_decay_mult'", "in", "paramwise_options", "or", "'norm_decay_mult'", "in", "paramwise_options", ")", ":", "\n", "            ", "assert", "base_wd", "is", "not", "None", "\n", "\n", "# get param-wise options", "\n", "", "bias_lr_mult", "=", "paramwise_options", ".", "get", "(", "'bias_lr_mult'", ",", "1.", ")", "\n", "bias_decay_mult", "=", "paramwise_options", ".", "get", "(", "'bias_decay_mult'", ",", "1.", ")", "\n", "norm_decay_mult", "=", "paramwise_options", ".", "get", "(", "'norm_decay_mult'", ",", "1.", ")", "\n", "# set param-wise lr and weight decay", "\n", "params", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "not", "param", ".", "requires_grad", ":", "\n", "                ", "continue", "\n", "\n", "", "param_group", "=", "{", "'params'", ":", "[", "param", "]", "}", "\n", "# for norm layers, overwrite the weight decay of weight and bias", "\n", "# TODO: obtain the norm layer prefixes dynamically", "\n", "if", "re", ".", "search", "(", "r'(bn|gn)(\\d+)?.(weight|bias)'", ",", "name", ")", ":", "\n", "                ", "if", "base_wd", "is", "not", "None", ":", "\n", "                    ", "param_group", "[", "'weight_decay'", "]", "=", "base_wd", "*", "norm_decay_mult", "\n", "# for other layers, overwrite both lr and weight decay of bias", "\n", "", "", "elif", "name", ".", "endswith", "(", "'.bias'", ")", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "base_lr", "*", "bias_lr_mult", "\n", "if", "base_wd", "is", "not", "None", ":", "\n", "                    ", "param_group", "[", "'weight_decay'", "]", "=", "base_wd", "*", "bias_decay_mult", "\n", "# otherwise use the global settings", "\n", "\n", "", "", "params", ".", "append", "(", "param_group", ")", "\n", "\n", "", "optimizer_cls", "=", "getattr", "(", "torch", ".", "optim", ",", "optimizer_cfg", ".", "pop", "(", "'type'", ")", ")", "\n", "return", "optimizer_cls", "(", "params", ",", "**", "optimizer_cfg", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.text_logger.TextLoggerHook.__init__": [[18, 21], ["mmcv.runner.LoggerHook.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "interval", "=", "10", ",", "ignore_last", "=", "True", ",", "reset_flag", "=", "False", ")", ":", "\n", "        ", "super", "(", "TextLoggerHook", ",", "self", ")", ".", "__init__", "(", "interval", ",", "ignore_last", ",", "reset_flag", ")", "\n", "self", ".", "time_sec_tot", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.text_logger.TextLoggerHook.before_run": [[22, 27], ["super().before_run", "os.join"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.hooks.Fp16OptimizerHook.before_run"], ["", "def", "before_run", "(", "self", ",", "runner", ")", ":", "\n", "        ", "super", "(", "TextLoggerHook", ",", "self", ")", ".", "before_run", "(", "runner", ")", "\n", "self", ".", "start_iter", "=", "runner", ".", "iter", "\n", "self", ".", "json_log_path", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "\n", "'{}.log.json'", ".", "format", "(", "runner", ".", "timestamp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.text_logger.TextLoggerHook._get_max_memory": [[28, 36], ["torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.item", "torch.tensor.item", "torch.reduce", "torch.reduce", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["", "def", "_get_max_memory", "(", "self", ",", "runner", ")", ":", "\n", "        ", "mem", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "\n", "mem_mb", "=", "torch", ".", "tensor", "(", "[", "mem", "/", "(", "1024", "*", "1024", ")", "]", ",", "\n", "dtype", "=", "torch", ".", "int", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", "\n", "if", "runner", ".", "world_size", ">", "1", ":", "\n", "            ", "dist", ".", "reduce", "(", "mem_mb", ",", "0", ",", "op", "=", "dist", ".", "ReduceOp", ".", "MAX", ")", "\n", "", "return", "mem_mb", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.text_logger.TextLoggerHook._log_info": [[37, 70], ["log_dict.items", "runner.logger.info", "isinstance", "log_items.append", "len", "log_dict.keys", "str", "datetime.timedelta", "int"], "methods", ["None"], ["", "def", "_log_info", "(", "self", ",", "log_dict", ",", "runner", ")", ":", "\n", "        ", "if", "runner", ".", "mode", "==", "'train'", ":", "\n", "            ", "log_str", "=", "'Epoch [{}][{}/{}]\\tlr: {:.5f}, '", ".", "format", "(", "\n", "log_dict", "[", "'epoch'", "]", ",", "log_dict", "[", "'iter'", "]", ",", "len", "(", "runner", ".", "data_loader", ")", ",", "\n", "log_dict", "[", "'lr'", "]", ")", "\n", "if", "'time'", "in", "log_dict", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "time_sec_tot", "+=", "(", "log_dict", "[", "'time'", "]", "*", "self", ".", "interval", ")", "\n", "time_sec_avg", "=", "self", ".", "time_sec_tot", "/", "(", "\n", "runner", ".", "iter", "-", "self", ".", "start_iter", "+", "1", ")", "\n", "eta_sec", "=", "time_sec_avg", "*", "(", "runner", ".", "max_iters", "-", "runner", ".", "iter", "-", "1", ")", "\n", "eta_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_sec", ")", ")", ")", "\n", "log_str", "+=", "'eta: {}, '", ".", "format", "(", "eta_str", ")", "\n", "log_str", "+=", "(", "'time: {:.3f}, data_time: {:.3f}, '", ".", "format", "(", "\n", "log_dict", "[", "'time'", "]", ",", "log_dict", "[", "'data_time'", "]", ")", ")", "\n", "log_str", "+=", "'memory: {}, '", ".", "format", "(", "log_dict", "[", "'memory'", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "log_str", "=", "'Epoch({}) [{}][{}]\\t'", ".", "format", "(", "\n", "log_dict", "[", "'mode'", "]", ",", "log_dict", "[", "'epoch'", "]", "-", "1", ",", "log_dict", "[", "'iter'", "]", ")", "\n", "", "log_items", "=", "[", "]", "\n", "for", "name", ",", "val", "in", "log_dict", ".", "items", "(", ")", ":", "\n", "# TODO: resolve this hack", "\n", "# these items have been in log_str", "\n", "            ", "if", "name", "in", "[", "\n", "'mode'", ",", "'Epoch'", ",", "'iter'", ",", "'lr'", ",", "'time'", ",", "'data_time'", ",", "\n", "'memory'", ",", "'epoch'", "\n", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "isinstance", "(", "val", ",", "float", ")", ":", "\n", "                ", "val", "=", "'{:.4f}'", ".", "format", "(", "val", ")", "\n", "", "log_items", ".", "append", "(", "'{}: {}'", ".", "format", "(", "name", ",", "val", ")", ")", "\n", "", "log_str", "+=", "', '", ".", "join", "(", "log_items", ")", "\n", "runner", ".", "logger", ".", "info", "(", "log_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.text_logger.TextLoggerHook._dump_log": [[71, 81], ["collections.OrderedDict", "log_dict.items", "text_logger.TextLoggerHook._round_float", "open", "mmcv.dump", "f.write"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.text_logger.TextLoggerHook._round_float"], ["", "def", "_dump_log", "(", "self", ",", "log_dict", ",", "runner", ")", ":", "\n", "# dump log in json format", "\n", "        ", "json_log", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "log_dict", ".", "items", "(", ")", ":", "\n", "            ", "json_log", "[", "k", "]", "=", "self", ".", "_round_float", "(", "v", ")", "\n", "# only append log at last line", "\n", "", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "with", "open", "(", "self", ".", "json_log_path", ",", "'a+'", ")", "as", "f", ":", "\n", "                ", "mmcv", ".", "dump", "(", "json_log", ",", "f", ",", "file_format", "=", "'json'", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.text_logger.TextLoggerHook._round_float": [[82, 89], ["isinstance", "isinstance", "text_logger.TextLoggerHook._round_float", "round"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.text_logger.TextLoggerHook._round_float"], ["", "", "", "def", "_round_float", "(", "self", ",", "items", ")", ":", "\n", "        ", "if", "isinstance", "(", "items", ",", "list", ")", ":", "\n", "            ", "return", "[", "self", ".", "_round_float", "(", "item", ")", "for", "item", "in", "items", "]", "\n", "", "elif", "isinstance", "(", "items", ",", "float", ")", ":", "\n", "            ", "return", "round", "(", "items", ",", "5", ")", "\n", "", "else", ":", "\n", "            ", "return", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.text_logger.TextLoggerHook._checkout": [[90, 110], ["isinstance", "isinstance", "isinstance", "isinstance", "item.keys", "text_logger.TextLoggerHook._checkout", "text_logger.TextLoggerHook._checkout"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.text_logger.TextLoggerHook._checkout", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.text_logger.TextLoggerHook._checkout"], ["", "", "def", "_checkout", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "container_abcs", ".", "Mapping", ")", ":", "\n", "            ", "flag", "=", "True", "\n", "for", "key", "in", "item", ".", "keys", "(", ")", ":", "\n", "                ", "flag", "=", "flag", "and", "self", ".", "_checkout", "(", "item", "[", "key", "]", ")", "\n", "", "return", "flag", "\n", "\n", "", "if", "isinstance", "(", "item", ",", "container_abcs", ".", "Sequence", ")", ":", "\n", "            ", "flag", "=", "True", "\n", "for", "val", "in", "item", ":", "\n", "                ", "flag", "=", "flag", "and", "self", ".", "_checkout", "(", "val", ")", "\n", "", "return", "flag", "\n", "\n", "", "if", "isinstance", "(", "item", ",", "(", "np", ".", "ndarray", ")", ")", ":", "\n", "            ", "if", "item", ".", "size", ">", "1", ":", "\n", "                ", "return", "False", "\n", "", "else", ":", "\n", "                ", "return", "True", "\n", "", "", "if", "isinstance", "(", "item", ",", "(", "numbers", ".", "Number", ")", ")", ":", "\n", "            ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.text_logger.TextLoggerHook.log": [[111, 137], ["collections.OrderedDict", "runner.log_buffer.output.items", "text_logger.TextLoggerHook._log_info", "text_logger.TextLoggerHook._dump_log", "runner.current_lr", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "text_logger.TextLoggerHook._get_max_memory", "text_logger.TextLoggerHook._checkout"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.text_logger.TextLoggerHook._log_info", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.text_logger.TextLoggerHook._dump_log", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.current_lr", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.text_logger.TextLoggerHook._get_max_memory", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.text_logger.TextLoggerHook._checkout"], ["", "", "def", "log", "(", "self", ",", "runner", ")", ":", "\n", "        ", "log_dict", "=", "OrderedDict", "(", ")", "\n", "# training mode if the output contains the key \"time\"", "\n", "mode", "=", "'train'", "if", "'time'", "in", "runner", ".", "log_buffer", ".", "output", "else", "'val'", "\n", "log_dict", "[", "'mode'", "]", "=", "mode", "\n", "log_dict", "[", "'epoch'", "]", "=", "runner", ".", "epoch", "+", "1", "\n", "log_dict", "[", "'iter'", "]", "=", "runner", ".", "inner_iter", "+", "1", "\n", "# only record lr of the first param group", "\n", "log_dict", "[", "'lr'", "]", "=", "runner", ".", "current_lr", "(", ")", "[", "0", "]", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "log_dict", "[", "'time'", "]", "=", "runner", ".", "log_buffer", ".", "output", "[", "'time'", "]", "\n", "log_dict", "[", "'data_time'", "]", "=", "runner", ".", "log_buffer", ".", "output", "[", "'data_time'", "]", "\n", "# statistic memory", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "log_dict", "[", "'memory'", "]", "=", "self", ".", "_get_max_memory", "(", "runner", ")", "\n", "", "", "for", "name", ",", "val", "in", "runner", ".", "log_buffer", ".", "output", ".", "items", "(", ")", ":", "\n", "            ", "if", "name", "in", "[", "'time'", ",", "'data_time'", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "not", "self", ".", "_checkout", "(", "val", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "log_dict", "[", "name", "]", "=", "val", "\n", "\n", "", "self", ".", "_log_info", "(", "log_dict", ",", "runner", ")", "\n", "self", ".", "_dump_log", "(", "log_dict", ",", "runner", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.registry.Registry.__init__": [[30, 32], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Registry", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.registry.Registry.register": [[33, 45], ["registry._register_generic", "registry._register_generic"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.registry._register_generic", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.registry._register_generic"], ["", "def", "register", "(", "self", ",", "module_name", ",", "module", "=", "None", ")", ":", "\n", "# used as function call", "\n", "        ", "if", "module", "is", "not", "None", ":", "\n", "            ", "_register_generic", "(", "self", ",", "module_name", ",", "module", ")", "\n", "return", "\n", "\n", "# used as decorator", "\n", "", "def", "register_fn", "(", "fn", ")", ":", "\n", "            ", "_register_generic", "(", "self", ",", "module_name", ",", "fn", ")", "\n", "return", "fn", "\n", "\n", "", "return", "register_fn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.registry._register_generic": [[5, 8], ["None"], "function", ["None"], ["def", "_register_generic", "(", "module_dict", ",", "module_name", ",", "module", ")", ":", "\n", "    ", "assert", "module_name", "not", "in", "module_dict", "\n", "module_dict", "[", "module_name", "]", "=", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.collect_env.get_pil_version": [[6, 8], ["None"], "function", ["None"], ["def", "get_pil_version", "(", ")", ":", "\n", "    ", "return", "\"\\n        Pillow ({})\"", ".", "format", "(", "PIL", ".", "__version__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.collect_env.collect_env_info": [[10, 14], ["torch.utils.collect_env.get_pretty_env_info", "collect_env.get_pil_version"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.collect_env.get_pil_version"], ["", "def", "collect_env_info", "(", ")", ":", "\n", "    ", "env_str", "=", "get_pretty_env_info", "(", ")", "\n", "env_str", "+=", "get_pil_version", "(", ")", "\n", "return", "env_str", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.env._init_dist_pytorch": [[16, 22], ["int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group"], "function", ["None"], ["def", "_init_dist_pytorch", "(", "backend", ",", "**", "kwargs", ")", ":", "\n", "# TODO: use local_rank instead of rank % num_gpus", "\n", "    ", "rank", "=", "int", "(", "os", ".", "environ", "[", "'RANK'", "]", ")", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "rank", "%", "num_gpus", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.env._init_dist_mpi": [[24, 26], ["None"], "function", ["None"], ["", "def", "_init_dist_mpi", "(", "backend", ",", "**", "kwargs", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.env._init_dist_slurm": [[28, 41], ["int", "int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "subprocess.getoutput", "str", "str", "str", "torch.init_process_group"], "function", ["None"], ["", "def", "_init_dist_slurm", "(", "backend", ",", "port", "=", "29500", ",", "**", "kwargs", ")", ":", "\n", "    ", "proc_id", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "ntasks", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_NTASKS'", "]", ")", "\n", "node_list", "=", "os", ".", "environ", "[", "'SLURM_NODELIST'", "]", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "proc_id", "%", "num_gpus", ")", "\n", "addr", "=", "subprocess", ".", "getoutput", "(", "\n", "'scontrol show hostname {} | head -n1'", ".", "format", "(", "node_list", ")", ")", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "str", "(", "port", ")", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "addr", "\n", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", "=", "str", "(", "ntasks", ")", "\n", "os", ".", "environ", "[", "'RANK'", "]", "=", "str", "(", "proc_id", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.env.init_dist": [[43, 54], ["torch.get_start_method", "torch.set_start_method", "env._init_dist_pytorch", "env._init_dist_mpi", "env._init_dist_slurm", "ValueError"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.env._init_dist_pytorch", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.env._init_dist_mpi", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.env._init_dist_slurm"], ["", "def", "init_dist", "(", "launcher", ",", "backend", "=", "'nccl'", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "mp", ".", "get_start_method", "(", "allow_none", "=", "True", ")", "is", "None", ":", "\n", "        ", "mp", ".", "set_start_method", "(", "'spawn'", ")", "\n", "", "if", "launcher", "==", "'pytorch'", ":", "\n", "        ", "_init_dist_pytorch", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "elif", "launcher", "==", "'mpi'", ":", "\n", "        ", "_init_dist_mpi", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "elif", "launcher", "==", "'slurm'", ":", "\n", "        ", "_init_dist_slurm", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid launcher type: {}'", ".", "format", "(", "launcher", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.env.set_random_seed": [[56, 61], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.env.get_root_logger": [[63, 82], ["logging.getLogger", "mmcv.runner.get_dist_info", "logging.getLogger.hasHandlers", "logging.basicConfig", "logging.getLogger.setLevel", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join", "logging.FileHandler.setLevel"], "function", ["None"], ["", "def", "get_root_logger", "(", "save_dir", ",", "log_level", "=", "logging", ".", "INFO", ",", "filename", "=", "\"log.txt\"", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "# print(logger.hasHandlers())", "\n", "if", "not", "logger", ".", "hasHandlers", "(", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "\n", "format", "=", "'%(asctime)s - %(levelname)s - %(message)s'", ",", "\n", "level", "=", "log_level", ")", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "logger", ".", "setLevel", "(", "'ERROR'", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "setLevel", "(", "'INFO'", ")", "\n", "", "if", "save_dir", ":", "\n", "# fh = logging.FileHandler(os.path.join(save_dir, filename))", "\n", "        ", "fh", "=", "logging", ".", "FileHandler", "(", "filename", ")", "\n", "fh", ".", "setLevel", "(", "log_level", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s - %(levelname)s: %(message)s\"", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "if", "rank", "!=", "0", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.correlation1d_cost.correlation1d_cost": [[7, 28], ["spatial_correlation_sampler.SpatialCorrelationSampler", "spatial_correlation_sampler.SpatialCorrelationSampler.", "out.squeeze.squeeze", "torch.leaky_relu"], "function", ["None"], ["def", "correlation1d_cost", "(", "reference_fm", ",", "target_fm", ",", "max_disp", "=", "192", ",", "start_disp", "=", "0", ",", "dilation", "=", "1", ",", "disp_sample", "=", "None", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation_patch", "=", "1", ",", ")", ":", "\n", "# for a pixel of left image at (x, y), it will calculates correlation cost volume", "\n", "# with pixel of right image at (xr, y), where xr in [x-max_disp, x+max_disp]", "\n", "# but we only need the left half part, i.e., [x-max_disp, 0]", "\n", "    ", "correlation_sampler", "=", "SpatialCorrelationSampler", "(", "patch_size", "=", "(", "1", ",", "max_disp", "*", "2", "-", "1", ")", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "\n", "dilation_patch", "=", "dilation_patch", ")", "\n", "# [B, 1, max_disp*2-1, H, W]", "\n", "out", "=", "correlation_sampler", "(", "reference_fm", ",", "target_fm", ")", "\n", "\n", "# [B, max_disp*2-1, H, W]", "\n", "out", "=", "out", ".", "squeeze", "(", "1", ")", "\n", "\n", "# [B, max_disp, H, W], grad the left half searching part", "\n", "out", "=", "out", "[", ":", ",", ":", "max_disp", ",", ":", ",", ":", "]", "\n", "\n", "cost", "=", "F", ".", "leaky_relu", "(", "out", ",", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "\n", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.cat_fms.cat_fms": [[7, 49], ["torch.linspace", "torch.linspace", "torch.zeros().to", "torch.zeros().to", "concat_fm.contiguous.contiguous", "int", "torch.zeros", "torch.zeros", "abs"], "function", ["None"], ["def", "cat_fms", "(", "reference_fm", ",", "target_fm", ",", "max_disp", "=", "192", ",", "start_disp", "=", "0", ",", "dilation", "=", "1", ",", "disp_sample", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Concat left and right in Channel dimension to form the raw cost volume.\n    Args:\n        max_disp, (int): under the scale of feature used,\n            often equals to (end disp - start disp + 1), the maximum searching range of disparity\n        start_disp (int): the start searching disparity index, usually be 0\n            dilation (int): the step between near disparity index\n        dilation (int): the step between near disparity index\n\n    Inputs:\n        reference_fm, (Tensor): reference feature, i.e. left image feature, in [BatchSize, Channel, Height, Width] layout\n        target_fm, (Tensor): target feature, i.e. right image feature, in [BatchSize, Channel, Height, Width] layout\n\n    Output:\n        concat_fm, (Tensor): the formed cost volume, in [BatchSize, Channel*2, disp_sample_number, Height, Width] layout\n\n    \"\"\"", "\n", "device", "=", "reference_fm", ".", "device", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "reference_fm", ".", "shape", "\n", "\n", "end_disp", "=", "start_disp", "+", "max_disp", "-", "1", "\n", "disp_sample_number", "=", "(", "max_disp", "+", "dilation", "-", "1", ")", "//", "dilation", "\n", "disp_index", "=", "torch", ".", "linspace", "(", "start_disp", ",", "end_disp", ",", "disp_sample_number", ")", "\n", "\n", "concat_fm", "=", "torch", ".", "zeros", "(", "N", ",", "C", "*", "2", ",", "disp_sample_number", ",", "H", ",", "W", ")", ".", "to", "(", "device", ")", "\n", "idx", "=", "0", "\n", "for", "i", "in", "disp_index", ":", "\n", "        ", "i", "=", "int", "(", "i", ")", "# convert torch.Tensor to int, so that it can be index", "\n", "if", "i", ">", "0", ":", "\n", "            ", "concat_fm", "[", ":", ",", ":", "C", ",", "idx", ",", ":", ",", "i", ":", "]", "=", "reference_fm", "[", ":", ",", ":", ",", ":", ",", "i", ":", "]", "\n", "concat_fm", "[", ":", ",", "C", ":", ",", "idx", ",", ":", ",", "i", ":", "]", "=", "target_fm", "[", ":", ",", ":", ",", ":", ",", ":", "-", "i", "]", "\n", "", "elif", "i", "==", "0", ":", "\n", "            ", "concat_fm", "[", ":", ",", ":", "C", ",", "idx", ",", ":", ",", ":", "]", "=", "reference_fm", "\n", "concat_fm", "[", ":", ",", "C", ":", ",", "idx", ",", ":", ",", ":", "]", "=", "target_fm", "\n", "", "else", ":", "\n", "            ", "concat_fm", "[", ":", ",", ":", "C", ",", "idx", ",", ":", ",", ":", "i", "]", "=", "reference_fm", "[", ":", ",", ":", ",", ":", ",", ":", "i", "]", "\n", "concat_fm", "[", ":", ",", "C", ":", ",", "idx", ",", ":", ",", ":", "i", "]", "=", "target_fm", "[", ":", ",", ":", ",", ":", ",", "abs", "(", "i", ")", ":", "]", "\n", "", "idx", "=", "idx", "+", "1", "\n", "\n", "", "concat_fm", "=", "concat_fm", ".", "contiguous", "(", ")", "\n", "return", "concat_fm", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.cat_fms.fast_cat_fms": [[51, 83], ["reference_fm.unsqueeze().expand", "target_fm.unsqueeze().expand", "dmb.modeling.stereo.layers.inverse_warp_3d.inverse_warp_3d", "torch.cat", "torch.cat", "torch.linspace", "torch.linspace", "disp_sample.view().expand().to().float.view().expand().to().float", "reference_fm.unsqueeze", "target_fm.unsqueeze", "disp_sample.view().expand().to().float.view().expand().to", "disp_sample.view().expand().to().float.view().expand", "disp_sample.view().expand().to().float.view"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.inverse_warp_3d.inverse_warp_3d"], ["", "def", "fast_cat_fms", "(", "reference_fm", ",", "target_fm", ",", "max_disp", "=", "192", ",", "start_disp", "=", "0", ",", "dilation", "=", "1", ",", "disp_sample", "=", "None", ")", ":", "\n", "    ", "device", "=", "reference_fm", ".", "device", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "reference_fm", ".", "shape", "\n", "\n", "if", "disp_sample", "is", "None", ":", "\n", "        ", "end_disp", "=", "start_disp", "+", "max_disp", "-", "1", "\n", "\n", "disp_sample_number", "=", "(", "max_disp", "+", "dilation", "-", "1", ")", "//", "dilation", "\n", "D", "=", "disp_sample_number", "\n", "\n", "# generate disparity samples, in [B,D, H, W] layout", "\n", "disp_sample", "=", "torch", ".", "linspace", "(", "start_disp", ",", "end_disp", ",", "D", ")", "\n", "disp_sample", "=", "disp_sample", ".", "view", "(", "1", ",", "D", ",", "1", ",", "1", ")", ".", "expand", "(", "B", ",", "D", ",", "H", ",", "W", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "", "else", ":", "# direct provide disparity samples", "\n", "# the number of disparity samples", "\n", "        ", "D", "=", "disp_sample", ".", "shape", "[", "1", "]", "\n", "\n", "# expand D dimension", "\n", "", "concat_reference_fm", "=", "reference_fm", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "B", ",", "C", ",", "D", ",", "H", ",", "W", ")", "\n", "concat_target_fm", "=", "target_fm", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "B", ",", "C", ",", "D", ",", "H", ",", "W", ")", "\n", "\n", "# shift target feature according to disparity samples", "\n", "concat_target_fm", "=", "inverse_warp_3d", "(", "concat_target_fm", ",", "-", "disp_sample", ",", "padding_mode", "=", "'zeros'", ")", "\n", "\n", "# mask out features in reference", "\n", "concat_reference_fm", "=", "concat_reference_fm", "*", "(", "concat_target_fm", ">", "0", ")", ".", "float", "(", ")", "\n", "\n", "# [B, 2C, D, H, W)", "\n", "concat_fm", "=", "torch", ".", "cat", "(", "(", "concat_reference_fm", ",", "concat_target_fm", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "concat_fm", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.dif_fms.dif_fms": [[7, 47], ["torch.linspace", "torch.linspace", "torch.zeros().to", "torch.zeros().to", "dif_fm.contiguous.contiguous", "int", "torch.zeros", "torch.zeros", "abs"], "function", ["None"], ["def", "dif_fms", "(", "reference_fm", ",", "target_fm", ",", "max_disp", "=", "192", ",", "start_disp", "=", "0", ",", "dilation", "=", "1", ",", "disp_sample", "=", "None", ",", "\n", "normalize", "=", "False", ",", "p", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n    Concat left and right in Channel dimension to form the raw cost volume.\n    Args:\n        max_disp, (int): under the scale of feature used,\n            often equals to (end disp - start disp + 1), the maximum searching range of disparity\n        start_disp (int): the start searching disparity index, usually be 0\n            dilation (int): the step between near disparity index\n        dilation (int): the step between near disparity index\n\n    Inputs:\n        reference_fm, (Tensor): reference feature, i.e. left image feature, in [BatchSize, Channel, Height, Width] layout\n        target_fm, (Tensor): target feature, i.e. right image feature, in [BatchSize, Channel, Height, Width] layout\n\n    Output:\n        dif_fm, (Tensor): the formed cost volume, in [BatchSize, Channel, disp_sample_number, Height, Width] layout\n\n    \"\"\"", "\n", "device", "=", "reference_fm", ".", "device", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "reference_fm", ".", "shape", "\n", "\n", "end_disp", "=", "start_disp", "+", "max_disp", "-", "1", "\n", "disp_sample_number", "=", "(", "max_disp", "+", "dilation", "-", "1", ")", "//", "dilation", "\n", "disp_index", "=", "torch", ".", "linspace", "(", "start_disp", ",", "end_disp", ",", "disp_sample_number", ")", "\n", "\n", "dif_fm", "=", "torch", ".", "zeros", "(", "N", ",", "C", ",", "disp_sample_number", ",", "H", ",", "W", ")", ".", "to", "(", "device", ")", "\n", "idx", "=", "0", "\n", "for", "i", "in", "disp_index", ":", "\n", "        ", "i", "=", "int", "(", "i", ")", "# convert torch.Tensor to int, so that it can be index", "\n", "if", "i", ">", "0", ":", "\n", "            ", "dif_fm", "[", ":", ",", ":", ",", "idx", ",", ":", ",", "i", ":", "]", "=", "reference_fm", "[", ":", ",", ":", ",", ":", ",", "i", ":", "]", "-", "target_fm", "[", ":", ",", ":", ",", ":", ",", ":", "-", "i", "]", "\n", "", "elif", "i", "==", "0", ":", "\n", "            ", "dif_fm", "[", ":", ",", ":", ",", "idx", ",", ":", ",", ":", "]", "=", "reference_fm", "-", "target_fm", "\n", "", "else", ":", "\n", "            ", "dif_fm", "[", ":", ",", ":", ",", "idx", ",", ":", ",", ":", "i", "]", "=", "reference_fm", "[", ":", ",", ":", ",", ":", ",", ":", "i", "]", "-", "target_fm", "[", ":", ",", ":", ",", ":", ",", "abs", "(", "i", ")", ":", "]", "\n", "", "idx", "=", "idx", "+", "1", "\n", "\n", "", "dif_fm", "=", "dif_fm", ".", "contiguous", "(", ")", "\n", "return", "dif_fm", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.dif_fms.fast_dif_fms": [[49, 87], ["reference_fm.unsqueeze().expand", "target_fm.unsqueeze().expand", "dmb.modeling.stereo.layers.inverse_warp_3d.inverse_warp_3d", "torch.linspace", "torch.linspace", "disp_sample.view().expand().to().float.view().expand().to().float", "torch.norm", "torch.norm", "reference_fm.unsqueeze", "target_fm.unsqueeze", "disp_sample.view().expand().to().float.view().expand().to", "disp_sample.view().expand().to().float.view().expand", "disp_sample.view().expand().to().float.view"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.inverse_warp_3d.inverse_warp_3d", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.sparsification_plot.norm", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.sparsification_plot.norm"], ["", "def", "fast_dif_fms", "(", "reference_fm", ",", "target_fm", ",", "max_disp", "=", "192", ",", "start_disp", "=", "0", ",", "dilation", "=", "1", ",", "disp_sample", "=", "None", ",", "\n", "normalize", "=", "False", ",", "p", "=", "1.0", ",", ")", ":", "\n", "    ", "device", "=", "reference_fm", ".", "device", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "reference_fm", ".", "shape", "\n", "\n", "if", "disp_sample", "is", "None", ":", "\n", "        ", "end_disp", "=", "start_disp", "+", "max_disp", "-", "1", "\n", "\n", "disp_sample_number", "=", "(", "max_disp", "+", "dilation", "-", "1", ")", "//", "dilation", "\n", "D", "=", "disp_sample_number", "\n", "\n", "# generate disparity samples, in [B,D, H, W] layout", "\n", "disp_sample", "=", "torch", ".", "linspace", "(", "start_disp", ",", "end_disp", ",", "D", ")", "\n", "disp_sample", "=", "disp_sample", ".", "view", "(", "1", ",", "D", ",", "1", ",", "1", ")", ".", "expand", "(", "B", ",", "D", ",", "H", ",", "W", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "", "else", ":", "# direct provide disparity samples", "\n", "# the number of disparity samples", "\n", "        ", "D", "=", "disp_sample", ".", "shape", "[", "1", "]", "\n", "\n", "# expand D dimension", "\n", "", "dif_reference_fm", "=", "reference_fm", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "B", ",", "C", ",", "D", ",", "H", ",", "W", ")", "\n", "dif_target_fm", "=", "target_fm", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "B", ",", "C", ",", "D", ",", "H", ",", "W", ")", "\n", "\n", "# shift reference feature map with disparity through grid sample", "\n", "# shift target feature according to disparity samples", "\n", "dif_target_fm", "=", "inverse_warp_3d", "(", "dif_target_fm", ",", "-", "disp_sample", ",", "padding_mode", "=", "'zeros'", ")", "\n", "\n", "# mask out features in reference", "\n", "dif_reference_fm", "=", "dif_reference_fm", "*", "(", "dif_target_fm", ">", "0", ")", ".", "type_as", "(", "dif_reference_fm", ")", "\n", "\n", "# [B, C, D, H, W)", "\n", "dif_fm", "=", "dif_reference_fm", "-", "dif_target_fm", "\n", "\n", "if", "normalize", ":", "\n", "# [B, D, H, W]", "\n", "        ", "dif_fm", "=", "torch", ".", "norm", "(", "dif_fm", ",", "p", "=", "p", ",", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "\n", "\n", "", "return", "dif_fm", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.hourglass_2d.Hourglass2D.__init__": [[31, 60], ["torch.Module.__init__", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv_bn", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.deconv_bn", "dmb.modeling.stereo.layers.basic_layers.deconv_bn"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.deconv_bn", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.deconv_bn"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "Hourglass2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "self", ".", "conv1", "=", "conv_bn_relu", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", ",", "in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "conv_bn", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", "*", "2", ",", "in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "conv3", "=", "conv_bn_relu", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", "*", "2", ",", "in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "conv4", "=", "conv_bn_relu", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", "*", "2", ",", "in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "conv5", "=", "deconv_bn", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", "*", "2", ",", "in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "conv6", "=", "deconv_bn", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", "*", "2", ",", "in_planes", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.hourglass_2d.Hourglass2D.forward": [[62, 87], ["hourglass_2d.Hourglass2D.conv1", "hourglass_2d.Hourglass2D.conv2", "hourglass_2d.Hourglass2D.conv3", "hourglass_2d.Hourglass2D.conv4", "hourglass_2d.Hourglass2D.conv6", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "hourglass_2d.Hourglass2D.conv5", "hourglass_2d.Hourglass2D.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "presqu", "=", "None", ",", "postsqu", "=", "None", ")", ":", "\n", "# in: [B, C, H, W], out: [B, 2C, H/2, W/2]", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "# in: [B, 2C, H/2, W/2], out: [B, 2C, H/2, W/2]", "\n", "pre", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "postsqu", "is", "not", "None", ":", "\n", "            ", "pre", "=", "F", ".", "relu", "(", "pre", "+", "postsqu", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "pre", "=", "F", ".", "relu", "(", "pre", ",", "inplace", "=", "True", ")", "\n", "\n", "# in: [B, 2C, H/2, W/2], out: [B, 2C, H/4, W/4]", "\n", "", "out", "=", "self", ".", "conv3", "(", "pre", ")", "\n", "# in: [B, 2C, H/4, W/4], out: [B, 2C, H/4, W/4]", "\n", "out", "=", "self", ".", "conv4", "(", "out", ")", "\n", "\n", "# in: [B, 2C, H/4, W/4], out: [B, 2C, H/2, W/2]", "\n", "if", "presqu", "is", "not", "None", ":", "\n", "            ", "post", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "out", ")", "+", "presqu", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "post", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "out", ")", "+", "pre", ",", "inplace", "=", "True", ")", "\n", "\n", "# in: [B, 2C, H/2, W/2], out: [B, C, H, W]", "\n", "", "out", "=", "self", ".", "conv6", "(", "post", ")", "\n", "\n", "return", "out", ",", "pre", ",", "post", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.hourglass.Hourglass.__init__": [[31, 60], ["torch.Module.__init__", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.deconv3d_bn", "dmb.modeling.stereo.layers.basic_layers.deconv3d_bn"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.deconv3d_bn", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.deconv3d_bn"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "Hourglass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "self", ".", "conv1", "=", "conv3d_bn_relu", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", ",", "in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "conv3d_bn", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", "*", "2", ",", "in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "conv3", "=", "conv3d_bn_relu", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", "*", "2", ",", "in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "conv4", "=", "conv3d_bn_relu", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", "*", "2", ",", "in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "conv5", "=", "deconv3d_bn", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", "*", "2", ",", "in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "conv6", "=", "deconv3d_bn", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", "*", "2", ",", "in_planes", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.hourglass.Hourglass.forward": [[62, 87], ["hourglass.Hourglass.conv1", "hourglass.Hourglass.conv2", "hourglass.Hourglass.conv3", "hourglass.Hourglass.conv4", "hourglass.Hourglass.conv6", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "hourglass.Hourglass.conv5", "hourglass.Hourglass.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "presqu", "=", "None", ",", "postsqu", "=", "None", ")", ":", "\n", "# in: [B, C, D, H, W], out: [B, 2C, D, H/2, W/2]", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "# in: [B, 2C, D, H/2, W/2], out: [B, 2C, D, H/2, W/2]", "\n", "pre", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "postsqu", "is", "not", "None", ":", "\n", "            ", "pre", "=", "F", ".", "relu", "(", "pre", "+", "postsqu", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "pre", "=", "F", ".", "relu", "(", "pre", ",", "inplace", "=", "True", ")", "\n", "\n", "# in: [B, 2C, D, H/2, W/2], out: [B, 2C, D, H/4, W/4]", "\n", "", "out", "=", "self", ".", "conv3", "(", "pre", ")", "\n", "# in: [B, 2C, D, H/4, W/4], out: [B, 2C, D, H/4, W/4]", "\n", "out", "=", "self", ".", "conv4", "(", "out", ")", "\n", "\n", "# in: [B, 2C, D, H/4, W/4], out: [B, 2C, D, H/2, W/2]", "\n", "if", "presqu", "is", "not", "None", ":", "\n", "            ", "post", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "out", ")", "+", "presqu", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "post", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "out", ")", "+", "pre", ",", "inplace", "=", "True", ")", "\n", "\n", "# in: [B, 2C, D, H/2, W/2], out: [B, C, D, H, W]", "\n", "", "out", "=", "self", ".", "conv6", "(", "post", ")", "\n", "\n", "return", "out", ",", "pre", ",", "post", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.cost_norm._CostVolumeNorm.__init__": [[20, 34], ["torch.Module.__init__", "cost_norm._CostVolumeNorm.weight.data.fill_", "cost_norm._CostVolumeNorm.bias.data.fill_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["def", "__init__", "(", "self", ",", "dim", "=", "1", ",", "affine", "=", "True", ",", "weight", "=", "1", ",", "bias", "=", "0", ")", ":", "\n", "        ", "super", "(", "_CostVolumeNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "affine", "=", "affine", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "data", "=", "torch", ".", "Tensor", "(", "1", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "data", "=", "torch", ".", "Tensor", "(", "1", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "data", "=", "torch", ".", "Tensor", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "data", "=", "torch", ".", "Tensor", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# init weight and bias", "\n", "", "self", ".", "weight", ".", "data", ".", "fill_", "(", "weight", ")", "\n", "self", ".", "bias", ".", "data", ".", "fill_", "(", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.cost_norm._CostVolumeNorm.forward": [[35, 37], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.cost_norm.RangeNorm.__init__": [[40, 42], ["cost_norm._CostVolumeNorm.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "1", ",", "affine", "=", "True", ",", "weight", "=", "1", ",", "bias", "=", "0", ")", ":", "\n", "        ", "super", "(", "RangeNorm", ",", "self", ")", ".", "__init__", "(", "dim", "=", "dim", ",", "affine", "=", "affine", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.cost_norm.RangeNorm.forward": [[43, 54], ["input.min", "input.max", "input.min"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# compute mean value", "\n", "        ", "mean", "=", "input", ".", "min", "(", "dim", "=", "self", ".", "dim", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "# compute margin", "\n", "var", "=", "input", ".", "max", "(", "dim", "=", "self", ".", "dim", ",", "keepdim", "=", "True", ")", "[", "0", "]", "-", "input", ".", "min", "(", "dim", "=", "self", ".", "dim", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "# normalize", "\n", "normalized_input", "=", "(", "input", "-", "mean", ")", "/", "(", "var", "+", "eps", ")", "\n", "# apply weight and bias", "\n", "output", "=", "normalized_input", "*", "self", ".", "weight", "+", "self", ".", "bias", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.cost_norm.VarNorm.__init__": [[57, 59], ["cost_norm._CostVolumeNorm.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "1", ",", "affine", "=", "True", ",", "weight", "=", "1", ",", "bias", "=", "0", ")", ":", "\n", "        ", "super", "(", "VarNorm", ",", "self", ")", ".", "__init__", "(", "dim", "=", "dim", ",", "affine", "=", "affine", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.cost_norm.VarNorm.forward": [[60, 71], ["input.mean", "input.var"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# compute mean value", "\n", "        ", "mean", "=", "input", ".", "mean", "(", "dim", "=", "self", ".", "dim", ",", "keepdim", "=", "True", ")", "\n", "# compute var value", "\n", "var", "=", "input", ".", "var", "(", "dim", "=", "self", ".", "dim", ",", "keepdim", "=", "True", ")", "\n", "# normalize", "\n", "normalized_input", "=", "(", "input", "-", "mean", ")", ".", "abs", "(", ")", "/", "(", "var", "+", "eps", ")", "\n", "# apply weight and bias", "\n", "output", "=", "normalized_input", "*", "self", ".", "weight", "+", "self", ".", "bias", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.cost_norm.StdNorm.__init__": [[74, 76], ["cost_norm._CostVolumeNorm.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "1", ",", "affine", "=", "True", ",", "weight", "=", "1", ",", "bias", "=", "0", ")", ":", "\n", "        ", "super", "(", "StdNorm", ",", "self", ")", ".", "__init__", "(", "dim", "=", "dim", ",", "affine", "=", "affine", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.cost_norm.StdNorm.forward": [[77, 88], ["input.mean", "input.std"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# compute mean value", "\n", "        ", "mean", "=", "input", ".", "mean", "(", "dim", "=", "self", ".", "dim", ",", "keepdim", "=", "True", ")", "\n", "# compute var value", "\n", "var", "=", "input", ".", "std", "(", "dim", "=", "self", ".", "dim", ",", "keepdim", "=", "True", ")", "\n", "# normalize", "\n", "normalized_input", "=", "(", "input", "-", "mean", ")", ".", "abs", "(", ")", "/", "(", "var", "+", "eps", ")", "\n", "# apply weight and bias", "\n", "output", "=", "normalized_input", "*", "self", ".", "weight", "+", "self", ".", "bias", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.cost_norm.SigmoidNorm.__init__": [[91, 93], ["cost_norm._CostVolumeNorm.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "1", ",", "affine", "=", "True", ",", "weight", "=", "1", ",", "bias", "=", "0", ")", ":", "\n", "        ", "super", "(", "SigmoidNorm", ",", "self", ")", ".", "__init__", "(", "dim", "=", "dim", ",", "affine", "=", "affine", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.cost_norm.SigmoidNorm.forward": [[94, 101], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# normalize", "\n", "        ", "normalized_input", "=", "torch", ".", "sigmoid", "(", "input", ")", "\n", "# apply weight and bias", "\n", "output", "=", "normalized_input", "*", "self", ".", "weight", "+", "self", ".", "bias", "\n", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.hw_hourglass.HWHourglass.__init__": [[27, 74], ["torch.Module.__init__", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.deconv3d_bn", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.deconv3d_bn", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.deconv3d_bn"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.deconv3d_bn", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.deconv3d_bn", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.deconv3d_bn"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "HWHourglass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "self", ".", "conv1_a", "=", "conv3d_bn_relu", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", ",", "in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "conv1_b", "=", "conv3d_bn_relu", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", "*", "2", ",", "in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "conv1_d", "=", "deconv3d_bn", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", "*", "2", ",", "in_planes", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "conv2_a", "=", "conv3d_bn_relu", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", "*", "2", ",", "in_planes", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "conv2_b", "=", "conv3d_bn_relu", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", "*", "4", ",", "in_planes", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "conv2_d", "=", "deconv3d_bn", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", "*", "4", ",", "in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "conv3_a", "=", "conv3d_bn_relu", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", "*", "4", ",", "in_planes", "*", "8", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "conv3_b", "=", "conv3d_bn_relu", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", "*", "8", ",", "in_planes", "*", "8", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "conv3_d", "=", "deconv3d_bn", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", "*", "8", ",", "in_planes", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.hw_hourglass.HWHourglass.forward": [[77, 106], ["hw_hourglass.HWHourglass.conv1_a", "hw_hourglass.HWHourglass.conv2_a", "hw_hourglass.HWHourglass.conv3_a", "hw_hourglass.HWHourglass.conv1_d", "hw_hourglass.HWHourglass.conv1_b", "hw_hourglass.HWHourglass.conv2_b", "hw_hourglass.HWHourglass.conv3_b", "hw_hourglass.HWHourglass.conv3_d", "hw_hourglass.HWHourglass.conv2_d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "raw_cost", ")", ":", "\n", "# in: [B, C, D, H, W], out: [B, 2C, D, H/2, W/2]", "\n", "        ", "out1_a", "=", "self", ".", "conv1_a", "(", "raw_cost", ")", "\n", "\n", "# in: [B, 2C, D, H/2, W/2], out: [B, 2C, D, H/2, W/2]", "\n", "out1_b", "=", "self", ".", "conv1_b", "(", "out1_a", ")", "+", "out1_a", "\n", "\n", "# in: [B, 2C, D, H/2, W/2], out: [B, 4C, D, H/4, W/4]", "\n", "out2_a", "=", "self", ".", "conv2_a", "(", "out1_b", ")", "\n", "\n", "# in: [B, 4C, D, H/4, W/4], out: [B, 4C, D, H/4, W/4]", "\n", "out2_b", "=", "self", ".", "conv2_b", "(", "out2_a", ")", "+", "out2_a", "\n", "\n", "# in: [B, 8C, D, H/8, W/8], out: [B, 8C, D, H/8, W/8]", "\n", "out3_a", "=", "self", ".", "conv3_a", "(", "out2_b", ")", "\n", "\n", "# in: [B, 8C, D, H/8, W/8], out: [B, 8C, D, H/8, W/8]", "\n", "out3_b", "=", "self", ".", "conv3_b", "(", "out3_a", ")", "+", "out3_a", "\n", "\n", "# in: [B, 8C, D, H/8, W/8], out: [B, 4C, D, H/4, W/4]", "\n", "cost", "=", "self", ".", "conv3_d", "(", "out3_b", ")", "+", "out2_b", "\n", "\n", "# in: [B, 4C, D, H/4, W/4], out: [B, 2C, D, H/2, W/2]", "\n", "cost", "=", "self", ".", "conv2_d", "(", "cost", ")", "+", "out1_b", "\n", "\n", "# in: [B, 2C, D, H/2, W/2], out: [B, C, D, H, W]", "\n", "cost", "=", "self", ".", "conv1_d", "(", "cost", ")", "\n", "\n", "return", "cost", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.DenseASPP._DenseAsppBlock.__init__": [[10, 27], ["torch.Sequential.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "mid_planes", ",", "out_planes", ",", "dilation_rate", ",", "dropout_rate", ",", "bn_start", "=", "True", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "_DenseAsppBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn_start", "=", "bn_start", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "if", "bn_start", ":", "\n", "            ", "self", ".", "bn0", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ",", "momentum", "=", "0.0003", ")", "\n", "", "self", ".", "relu0", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "mid_planes", ",", "kernel_size", "=", "1", ")", "\n", "if", "batch_norm", ":", "\n", "            ", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ",", "momentum", "=", "0.0003", ")", "\n", "", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "dilation_rate", ",", "dilation", "=", "dilation_rate", ")", "\n", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.DenseASPP._DenseAsppBlock.forward": [[28, 44], ["DenseASPP._DenseAsppBlock.relu0", "DenseASPP._DenseAsppBlock.conv1", "DenseASPP._DenseAsppBlock.relu1", "DenseASPP._DenseAsppBlock.conv2", "DenseASPP._DenseAsppBlock.bn0", "DenseASPP._DenseAsppBlock.bn1", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "bn_start", ":", "\n", "            ", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu0", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "if", "self", ".", "dropout_rate", ">", "0", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.DenseASPP.DenseAspp.__init__": [[47, 76], ["torch.Module.__init__", "int", "int", "int", "DenseASPP._DenseAsppBlock", "DenseASPP._DenseAsppBlock", "DenseASPP._DenseAsppBlock", "DenseASPP._DenseAsppBlock", "DenseASPP._DenseAsppBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "dropout_rate", "=", "0.", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "DenseAspp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "in_planes", "=", "int", "(", "in_planes", ")", "\n", "in_2_planes", "=", "int", "(", "in_planes", "/", "2", ")", "\n", "in_4_planes", "=", "int", "(", "in_planes", "/", "4", ")", "\n", "\n", "self", ".", "ASPP_3", "=", "_DenseAsppBlock", "(", "in_planes", "=", "in_planes", ",", "mid_planes", "=", "in_2_planes", ",", "out_planes", "=", "in_4_planes", ",", "\n", "dilation_rate", "=", "3", ",", "dropout_rate", "=", "dropout_rate", ",", "bn_start", "=", "False", ",", "batch_norm", "=", "batch_norm", ")", "\n", "\n", "self", ".", "ASPP_6", "=", "_DenseAsppBlock", "(", "in_planes", "=", "in_planes", "+", "in_4_planes", "*", "1", ",", "mid_planes", "=", "in_2_planes", ",", "\n", "out_planes", "=", "in_4_planes", ",", "\n", "dilation_rate", "=", "6", ",", "dropout_rate", "=", "dropout_rate", ",", "bn_start", "=", "batch_norm", ",", "batch_norm", "=", "batch_norm", ")", "\n", "\n", "self", ".", "ASPP_12", "=", "_DenseAsppBlock", "(", "in_planes", "=", "in_planes", "+", "in_4_planes", "*", "2", ",", "mid_planes", "=", "in_2_planes", ",", "\n", "out_planes", "=", "in_4_planes", ",", "\n", "dilation_rate", "=", "12", ",", "dropout_rate", "=", "dropout_rate", ",", "bn_start", "=", "batch_norm", ",", "batch_norm", "=", "batch_norm", ")", "\n", "\n", "self", ".", "ASPP_18", "=", "_DenseAsppBlock", "(", "in_planes", "=", "in_planes", "+", "in_4_planes", "*", "3", ",", "mid_planes", "=", "in_2_planes", ",", "\n", "out_planes", "=", "in_4_planes", ",", "\n", "dilation_rate", "=", "18", ",", "dropout_rate", "=", "dropout_rate", ",", "bn_start", "=", "batch_norm", ",", "batch_norm", "=", "batch_norm", ")", "\n", "\n", "self", ".", "ASPP_24", "=", "_DenseAsppBlock", "(", "in_planes", "=", "in_planes", "+", "in_4_planes", "*", "4", ",", "mid_planes", "=", "in_2_planes", ",", "\n", "out_planes", "=", "in_4_planes", ",", "\n", "dilation_rate", "=", "24", ",", "dropout_rate", "=", "dropout_rate", ",", "bn_start", "=", "batch_norm", ",", "batch_norm", "=", "batch_norm", ")", "\n", "\n", "self", ".", "fuse_conv", "=", "nn", ".", "Sequential", "(", "conv_bn_relu", "(", "batch_norm", ",", "in_planes", "+", "in_4_planes", "*", "5", ",", "in_planes", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.DenseASPP.DenseAspp.forward": [[77, 96], ["DenseASPP.DenseAspp.ASPP_3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DenseASPP.DenseAspp.ASPP_6", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DenseASPP.DenseAspp.ASPP_12", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DenseASPP.DenseAspp.ASPP_18", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DenseASPP.DenseAspp.ASPP_24", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DenseASPP.DenseAspp.fuse_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feature", ")", ":", "\n", "        ", "aspp3", "=", "self", ".", "ASPP_3", "(", "feature", ")", "\n", "feature", "=", "torch", ".", "cat", "(", "(", "aspp3", ",", "feature", ")", ",", "dim", "=", "1", ")", "\n", "\n", "aspp6", "=", "self", ".", "ASPP_6", "(", "feature", ")", "\n", "feature", "=", "torch", ".", "cat", "(", "(", "aspp6", ",", "feature", ")", ",", "dim", "=", "1", ")", "\n", "\n", "aspp12", "=", "self", ".", "ASPP_12", "(", "feature", ")", "\n", "feature", "=", "torch", ".", "cat", "(", "(", "aspp12", ",", "feature", ")", ",", "dim", "=", "1", ")", "\n", "\n", "aspp18", "=", "self", ".", "ASPP_18", "(", "feature", ")", "\n", "feature", "=", "torch", ".", "cat", "(", "(", "aspp18", ",", "feature", ")", ",", "dim", "=", "1", ")", "\n", "\n", "aspp24", "=", "self", ".", "ASPP_24", "(", "feature", ")", "\n", "feature", "=", "torch", ".", "cat", "(", "(", "aspp24", ",", "feature", ")", ",", "dim", "=", "1", ")", "\n", "\n", "feature", "=", "self", ".", "fuse_conv", "(", "feature", ")", "\n", "\n", "return", "feature", "", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.edge_aware.EdgeAwareRefinement.__init__": [[23, 42], ["torch.Module.__init__", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "edge_aware.EdgeAwareRefinement.residual_dilation_blocks.append", "dmb.modeling.stereo.layers.basic_layers.BasicBlock"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "EdgeAwareRefinement", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "self", ".", "conv_mix", "=", "conv_bn_relu", "(", "self", ".", "batch_norm", ",", "self", ".", "in_planes", ",", "32", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# Dilated residual module", "\n", "self", ".", "residual_dilation_blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "dilation_list", "=", "[", "1", ",", "2", ",", "4", ",", "8", ",", "1", ",", "1", "]", "\n", "for", "dilation", "in", "self", ".", "dilation_list", ":", "\n", "            ", "self", ".", "residual_dilation_blocks", ".", "append", "(", "\n", "BasicBlock", "(", "self", ".", "batch_norm", ",", "32", ",", "32", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "padding", "=", "1", ",", "dilation", "=", "dilation", ")", "\n", ")", "\n", "\n", "", "self", ".", "conv_res", "=", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.edge_aware.EdgeAwareRefinement.forward": [[43, 70], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "edge_aware.EdgeAwareRefinement.conv_mix", "edge_aware.EdgeAwareRefinement.conv_res", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "disp", ",", "leftImage", ")", ":", "\n", "        ", "h", ",", "w", "=", "leftImage", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "# the scale of downsample", "\n", "scale", "=", "w", "/", "disp", ".", "shape", "[", "-", "1", "]", "\n", "\n", "# upsample disparity map to image size, in [BatchSize, 1, Height, Width]", "\n", "up_disp", "=", "F", ".", "interpolate", "(", "disp", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "up_disp", "=", "up_disp", "*", "scale", "\n", "\n", "# residual refinement", "\n", "# mix the info inside the disparity map and left image", "\n", "mix_feat", "=", "self", ".", "conv_mix", "(", "torch", ".", "cat", "(", "(", "up_disp", ",", "leftImage", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "for", "block", "in", "self", ".", "residual_dilation_blocks", ":", "\n", "            ", "mix_feat", "=", "block", "(", "mix_feat", ")", "\n", "\n", "# get residual disparity map, in [BatchSize, 1, Height, Width]", "\n", "", "res_disp", "=", "self", ".", "conv_res", "(", "mix_feat", ")", "\n", "\n", "# refine the upsampled disparity map, in [BatchSize, 1, Height, Width]", "\n", "refine_disp", "=", "res_disp", "+", "up_disp", "\n", "\n", "# promise all disparity value larger than 0, in [BatchSize, 1, Height, Width]", "\n", "refine_disp", "=", "F", ".", "relu", "(", "refine_disp", ",", "inplace", "=", "True", ")", "\n", "\n", "return", "refine_disp", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.min_warp_error.WarpErrorRefinement.__init__": [[35, 53], ["torch.Module.__init__", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "min_warp_error.WarpErrorRefinement.residual_dilation_blocks.append", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "C", "=", "16", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "WarpErrorRefinement", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "C", "=", "C", "\n", "\n", "self", ".", "conv_mix", "=", "conv_bn_relu", "(", "batch_norm", ",", "in_planes", "*", "4", "+", "1", ",", "2", "*", "C", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "# Dilated residual module", "\n", "self", ".", "residual_dilation_blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "dilation_list", "=", "[", "1", ",", "2", ",", "4", ",", "8", ",", "1", ",", "1", "]", "\n", "for", "dilation", "in", "self", ".", "dilation_list", ":", "\n", "            ", "self", ".", "residual_dilation_blocks", ".", "append", "(", "\n", "conv_bn_relu", "(", "batch_norm", ",", "2", "*", "C", ",", "2", "*", "C", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "", "self", ".", "conv_res", "=", "nn", ".", "Conv2d", "(", "2", "*", "C", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.min_warp_error.WarpErrorRefinement.forward": [[54, 85], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "dmb.modeling.stereo.layers.inverse_warp.inverse_warp", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "min_warp_error.WarpErrorRefinement.conv_mix", "min_warp_error.WarpErrorRefinement.conv_res", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "block"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.inverse_warp.inverse_warp"], ["", "def", "forward", "(", "self", ",", "disp", ",", "left", ",", "right", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "left", ".", "shape", "\n", "\n", "# the scale of downsample", "\n", "scale", "=", "W", "/", "disp", ".", "shape", "[", "-", "1", "]", "\n", "\n", "# upsample disparity map to image size, in [BatchSize, 1, Height, Width]", "\n", "up_disp", "=", "F", ".", "interpolate", "(", "disp", ",", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "up_disp", "=", "up_disp", "*", "scale", "\n", "\n", "# calculate warp error", "\n", "warp_right", "=", "inverse_warp", "(", "right", ",", "-", "up_disp", ")", "\n", "error", "=", "torch", ".", "abs", "(", "left", "-", "warp_right", ")", "\n", "\n", "# residual refinement", "\n", "# mix the info inside the disparity map, left image, right image and warp error", "\n", "mix_feat", "=", "self", ".", "conv_mix", "(", "torch", ".", "cat", "(", "(", "left", ",", "right", ",", "warp_right", ",", "error", ",", "disp", ")", ",", "1", ")", ")", "\n", "\n", "for", "block", "in", "self", ".", "residual_dilation_blocks", ":", "\n", "            ", "mix_feat", "=", "block", "(", "mix_feat", ")", "\n", "\n", "# get residual disparity map, in [BatchSize, 1, Height, Width]", "\n", "", "res_disp", "=", "self", ".", "conv_res", "(", "mix_feat", ")", "\n", "\n", "# refine the upsampled disparity map, in [BatchSize, 1, Height, Width]", "\n", "refine_disp", "=", "res_disp", "+", "up_disp", "\n", "\n", "# promise all disparity value larger than 0, in [BatchSize, 1, Height, Width]", "\n", "refine_disp", "=", "F", ".", "relu", "(", "refine_disp", ",", "inplace", "=", "True", ")", "\n", "\n", "return", "refine_disp", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.patch_match.DisparityInitialization.__init__": [[50, 53], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["def", "__init__", "(", "self", ",", "disparity_sample_number", "=", "12", ")", ":", "\n", "        ", "super", "(", "DisparityInitialization", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "disparity_sample_number", "=", "disparity_sample_number", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.patch_match.DisparityInitialization.forward": [[55, 84], ["min_disparity.new_empty().uniform_", "index.view().to.view().to.view().to", "index.view().to.view().to.expand().type_as", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "min_disparity.new_empty", "index.view().to.view().to.view", "index.view().to.view().to.expand", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "min_disparity", ",", "max_disparity", ")", ":", "\n", "\n", "        ", "device", "=", "min_disparity", ".", "device", "\n", "\n", "B", "=", "min_disparity", ".", "shape", "[", "0", "]", "\n", "H", ",", "W", "=", "min_disparity", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "# to get 'disparity_sample_number' samples, and except the min, max disparity,", "\n", "# it means divide [min, max] into 'disparity_sample_number + 1' segments", "\n", "# disparity sample interval between near disparity samples", "\n", "disparity_sample_interval", "=", "1.0", "/", "(", "self", ".", "disparity_sample_number", "+", "1", ")", "\n", "\n", "# Generate noise ranged in [0, 1], which submits to standard normal distribution", "\n", "# As each pixel should have its own disparity particles, rather than uniform for each pixel.", "\n", "# In [B, disparity_sample_number, H, W] layout", "\n", "disparity_sample_noise", "=", "min_disparity", ".", "new_empty", "(", "size", "=", "(", "B", ",", "self", ".", "disparity_sample_number", ",", "H", ",", "W", ")", ",", "device", "=", "device", ")", ".", "uniform_", "(", "0", ",", "1", ")", "\n", "\n", "# the index for each sampled disparity candidates,", "\n", "# e.g., n = disparity_sample_number + 1, index = [1/n, 2/n, ..., (n-1)/n]", "\n", "# in [B, disparity_sample_number, H, W] layout", "\n", "index", "=", "torch", ".", "arange", "(", "1", ",", "(", "self", ".", "disparity_sample_number", "+", "1", ")", ",", "1", ")", ".", "float", "(", ")", "/", "(", "self", ".", "disparity_sample_number", "+", "1", ")", "\n", "index", "=", "index", ".", "view", "(", "1", ",", "self", ".", "disparity_sample_number", ",", "1", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "disparity_sample_index", "=", "index", ".", "expand", "(", "B", ",", "self", ".", "disparity_sample_number", ",", "H", ",", "W", ")", ".", "type_as", "(", "min_disparity", ")", "\n", "\n", "# the sampled disparity candidates, i.e., the minimum disparity in each interval", "\n", "# in [B, disparity_sample_number, H, W] layout", "\n", "interval_min_disparity", "=", "min_disparity", "+", "(", "max_disparity", "-", "min_disparity", ")", "*", "disparity_sample_index", "\n", "\n", "return", "disparity_sample_noise", ",", "interval_min_disparity", ",", "disparity_sample_interval", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.patch_match.Propagation.__init__": [[115, 118], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["def", "__init__", "(", "self", ",", "propagation_filter_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "Propagation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "propagation_filter_size", "=", "propagation_filter_size", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.patch_match.Propagation.forward": [[119, 175], ["disparity_samples.unsqueeze.unsqueeze.unsqueeze", "torch.conv3d.permute", "torch.conv3d.contiguous().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.zeros_like().scatter_().float", "torch.zeros_like().scatter_().float", "torch.zeros_like().scatter_().float", "torch.zeros_like().scatter_().float", "torch.zeros_like().scatter_().float", "torch.zeros_like().scatter_().float", "torch.zeros_like().scatter_().float", "torch.zeros_like().scatter_().float", "torch.zeros_like().scatter_().float", "torch.conv3d", "torch.conv3d", "torch.conv3d", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.zeros_like().scatter_().float", "torch.zeros_like().scatter_().float", "torch.zeros_like().scatter_().float", "torch.zeros_like().scatter_().float", "torch.zeros_like().scatter_().float", "torch.zeros_like().scatter_().float", "torch.zeros_like().scatter_().float", "torch.zeros_like().scatter_().float", "torch.zeros_like().scatter_().float", "torch.conv3d", "torch.conv3d", "torch.conv3d", "torch.conv3d.contiguous", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "disparity_samples", ",", "propagation_type", "=", "\"horizontal\"", ")", ":", "\n", "\n", "        ", "device", "=", "disparity_samples", ".", "device", "\n", "\n", "# [B, 1, disparity_sample_number, H, W]", "\n", "disparity_samples", "=", "disparity_samples", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# aggregate information from neighbours", "\n", "# by integrating neighbours' disparity samples as own,", "\n", "# the number of disparity samples per pixel", "\n", "# equal to (propagation_filter_size x disparity_sample_number)", "\n", "kernel_size", "=", "self", ".", "propagation_filter_size", "\n", "if", "propagation_type", "is", "\"horizontal\"", ":", "\n", "# when kernel_size=3, [0, 1, 2] -> [0, 1, 2, 0, 1, 2, 0, 1, 2]", "\n", "# [kernel_size, 1, 1, 1, kernel_size], in Height dimension", "\n", "            ", "index", "=", "torch", ".", "arange", "(", "0", ",", "kernel_size", ",", "device", "=", "device", ")", ".", "repeat", "(", "kernel_size", ")", ".", "view", "(", "kernel_size", ",", "1", ",", "1", ",", "1", ",", "kernel_size", ")", "\n", "\n", "\n", "# [kernel_size, 1, 1, 1, kernel_size], [1, 0, 0], [0, 1, 0], [0, 0, 1]", "\n", "one_hot_filter", "=", "torch", ".", "zeros_like", "(", "index", ")", ".", "scatter_", "(", "0", ",", "index", ",", "1", ")", ".", "float", "(", ")", "\n", "\n", "# weight of shape (out_channels, in_channels, kD, kH, kW), i.e. (3, 1, 1, 1, 3)", "\n", "# the effect is neighbors' disparity samples stored in Channels dimension", "\n", "# therefore, the shape extend from [B, 1, disparity_sample_number, H, W]", "\n", "# to [B, propagation_filter_size, disparity_sample_number, H, W]", "\n", "aggregated_disparity_samples", "=", "F", ".", "conv3d", "(", "disparity_samples", ",", "\n", "weight", "=", "one_hot_filter", ",", "\n", "padding", "=", "(", "0", ",", "0", ",", "kernel_size", "//", "2", ")", ")", "\n", "\n", "", "else", ":", "# 'vertical'", "\n", "# when kernel_size=3, [0, 1, 2] -> [0, 1, 2, 0, 1, 2, 0, 1, 2]", "\n", "# [kernel_size, 1, 1, kernel_size, 1], in Width dimension", "\n", "            ", "index", "=", "torch", ".", "arange", "(", "0", ",", "kernel_size", ",", "device", "=", "device", ")", ".", "repeat", "(", "kernel_size", ")", ".", "view", "(", "kernel_size", ",", "1", ",", "1", ",", "kernel_size", ",", "1", ")", "\n", "\n", "# [kernel_size, 1, 1, kernel_size, 1], [1, 0, 0], [0, 1, 0], [0, 0, 1]", "\n", "one_hot_filter", "=", "torch", ".", "zeros_like", "(", "index", ")", ".", "scatter_", "(", "0", ",", "index", ",", "1", ")", ".", "float", "(", ")", "\n", "\n", "# same as the situation in 'horizontal'", "\n", "# [B, propagation_filter_size, disparity_sample_number, H, W]", "\n", "aggregated_disparity_samples", "=", "F", ".", "conv3d", "(", "disparity_samples", ",", "\n", "weight", "=", "one_hot_filter", ",", "\n", "padding", "=", "(", "0", ",", "kernel_size", "//", "2", ",", "0", ")", ")", "\n", "\n", "# make pixel's sample in the same interval permute nearby each other", "\n", "# [s11, s12, s13, s21, s22, s23, s31, s32, s33] -> [s11, s21, s31, s12, s22, s32, ...]", "\n", "# [B, propagation_filter_size, disparity_sample_number, H, W] ->", "\n", "# [B, disparity_sample_number, propagation_filter_size, H, W]", "\n", "", "aggregated_disparity_samples", "=", "aggregated_disparity_samples", ".", "permute", "(", "[", "0", ",", "2", ",", "1", ",", "3", ",", "4", "]", ")", "\n", "B", ",", "C", ",", "D", ",", "H", ",", "W", "=", "aggregated_disparity_samples", ".", "shape", "\n", "\n", "# [B, disparity_sample_number * propagation_filter_size, H, W]", "\n", "aggregated_disparity_samples", "=", "aggregated_disparity_samples", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "C", "*", "D", ",", "H", ",", "W", ")", "\n", "\n", "return", "aggregated_disparity_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.patch_match.Evaluate.__init__": [[213, 217], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["def", "__init__", "(", "self", ",", "propagation_filter_size", "=", "3", ",", "temperature", "=", "7", ")", ":", "\n", "        ", "super", "(", "Evaluate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "propagation_filter_size", "=", "propagation_filter_size", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.patch_match.Evaluate.forward": [[218, 254], ["left.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "right.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "dmb.modeling.stereo.layers.inverse_warp_3d.inverse_warp_3d", "cost_volume.permute.permute.view", "cost_volume.permute.permute.permute", "torch.sum.view", "torch.sum.view", "torch.sum.view", "torch.sum.permute", "torch.sum.permute", "torch.sum.permute", "torch.sum.view", "torch.sum.view", "torch.sum.view", "torch.sum.permute", "torch.sum.permute", "torch.sum.permute", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "left.unsqueeze().expand.unsqueeze().expand.unsqueeze", "right.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.inverse_warp_3d.inverse_warp_3d", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax"], ["", "def", "forward", "(", "self", ",", "left", ",", "right", ",", "disparity_samples", ",", "disparity_sample_noise", ")", ":", "\n", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "left", ".", "shape", "\n", "# disparity_sample_number * propagation_filter_size", "\n", "D", "=", "disparity_samples", ".", "shape", "[", "1", "]", "\n", "\n", "# warp right image feature according to disparity samples", "\n", "# [B, C, disparity_sample_number * propagation_filter_size, H, W]", "\n", "left", "=", "left", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "B", ",", "C", ",", "D", ",", "H", ",", "W", ")", "\n", "right", "=", "right", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "B", ",", "C", ",", "D", ",", "H", ",", "W", ")", "\n", "warped_right", "=", "inverse_warp_3d", "(", "right", ",", "-", "disparity_samples", ")", "\n", "\n", "# matching scores are computed by taking the inner product", "\n", "cost_volume", "=", "torch", ".", "mean", "(", "left", "*", "warped_right", ",", "dim", "=", "1", ")", "*", "self", ".", "temperature", "\n", "cost_volume", "=", "cost_volume", ".", "view", "(", "B", ",", "D", "//", "self", ".", "propagation_filter_size", ",", "self", ".", "propagation_filter_size", ",", "H", ",", "W", ")", "\n", "# [B, propagation_filter_size, disparity_sample_number, H, W]", "\n", "cost_volume", "=", "cost_volume", ".", "permute", "(", "[", "0", ",", "2", ",", "1", ",", "3", ",", "4", "]", ")", "\n", "\n", "disparity_samples", "=", "disparity_samples", ".", "view", "(", "B", ",", "D", "//", "self", ".", "propagation_filter_size", ",", "self", ".", "propagation_filter_size", ",", "H", ",", "W", ")", "\n", "# [B, propagation_filter_size, disparity_sample_number, H, W]", "\n", "disparity_samples", "=", "disparity_samples", ".", "permute", "(", "[", "0", ",", "2", ",", "1", ",", "3", ",", "4", "]", ")", "\n", "\n", "disparity_sample_noise", "=", "disparity_sample_noise", ".", "view", "(", "B", ",", "D", "//", "self", ".", "propagation_filter_size", ",", "self", ".", "propagation_filter_size", ",", "H", ",", "W", ")", "\n", "# [B, propagation_filter_size, disparity_sample_number, H, W]", "\n", "disparity_sample_noise", "=", "disparity_sample_noise", ".", "permute", "(", "[", "0", ",", "2", ",", "1", ",", "3", ",", "4", "]", ")", "\n", "\n", "# pick the most possible matching disparity from neighbours", "\n", "# [B, 1, disparity_sample_number, H, W]", "\n", "prob_volume", "=", "F", ".", "softmax", "(", "cost_volume", ",", "dim", "=", "1", ")", "\n", "\n", "# [B, disparity_sample_number, H, W]", "\n", "disparity_samples", "=", "torch", ".", "sum", "(", "prob_volume", "*", "disparity_samples", ",", "dim", "=", "1", ")", "\n", "# [B, disparity_sample_number, H, W]", "\n", "disparity_sample_noise", "=", "torch", ".", "sum", "(", "prob_volume", "*", "disparity_sample_noise", ",", "dim", "=", "1", ")", "\n", "\n", "return", "disparity_samples", ",", "disparity_sample_noise", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.patch_match.PatchMatch.__init__": [[288, 304], ["torch.Module.__init__", "patch_match.DisparityInitialization", "patch_match.Propagation", "patch_match.Evaluate"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["def", "__init__", "(", "self", ",", "\n", "propagation_filter_size", "=", "3", ",", "\n", "disparity_sample_number", "=", "14", ",", "\n", "iterations", "=", "3", ",", "\n", "temperature", "=", "7", ")", ":", "\n", "        ", "super", "(", "PatchMatch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "propagation_filter_size", "=", "propagation_filter_size", "\n", "self", ".", "disparity_sample_number", "=", "disparity_sample_number", "\n", "self", ".", "iterations", "=", "iterations", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n", "# except the min and max disparity, there are 'disparity_sample_number-2' need to be generated", "\n", "self", ".", "disparity_initialization", "=", "DisparityInitialization", "(", "disparity_sample_number", "-", "2", ")", "\n", "self", ".", "propagation", "=", "Propagation", "(", "propagation_filter_size", "=", "propagation_filter_size", ")", "\n", "self", ".", "evaluate", "=", "Evaluate", "(", "propagation_filter_size", "=", "propagation_filter_size", ",", "\n", "temperature", "=", "temperature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.patch_match.PatchMatch.forward": [[305, 362], ["patch_match.PatchMatch.disparity_initialization", "interval_min_disparity.view.view.unsqueeze().repeat", "interval_min_disparity.view.view.view", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "patch_match.PatchMatch.propagation", "patch_match.PatchMatch.evaluate", "patch_match.PatchMatch.propagation", "patch_match.PatchMatch.evaluate", "interval_min_disparity.view.view.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval_hooks.DistFlowEvalHook.evaluate", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval_hooks.DistFlowEvalHook.evaluate"], ["", "def", "forward", "(", "self", ",", "left", ",", "right", ",", "min_disparity", ",", "max_disparity", ")", ":", "\n", "\n", "        ", "device", "=", "left", ".", "device", "\n", "B", "=", "min_disparity", ".", "shape", "[", "0", "]", "\n", "H", ",", "W", "=", "min_disparity", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "# Initialize patch match", "\n", "# disparity_sample_noise: random value between 0-1.", "\n", "#                         Represents offset of the from the interval_min_disparity,", "\n", "#                         in [B, disparity_sample_number, H, W] layout", "\n", "# interval_min_disparity: the minimum disparity in each interval,", "\n", "#                         in [B, disparity_sample_number, H, W] layout", "\n", "# disparity_sample_interval: 1.0 / disparity_sample_number, in [1] layout", "\n", "disparity_sample_noise", ",", "interval_min_disparity", ",", "disparity_sample_interval", "=", "self", ".", "disparity_initialization", "(", "\n", "min_disparity", ",", "max_disparity", "\n", ")", "\n", "\n", "# [B, disparity_sample_number, H, W] -> [B, disparity_sample_number, propagation_filter_size, H, W]", "\n", "interval_min_disparity", "=", "interval_min_disparity", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "propagation_filter_size", ",", "1", ",", "1", ")", "\n", "# [B, (disparity_sample_number-2) * propagation_filter_size, H, W], exclude min and max disparity sample", "\n", "interval_min_disparity", "=", "interval_min_disparity", ".", "view", "(", "B", ",", "(", "self", ".", "disparity_sample_number", "-", "2", ")", "*", "self", ".", "propagation_filter_size", ",", "H", ",", "W", ")", "\n", "\n", "# propagation -> evaluation", "\n", "disparity_samples", "=", "None", "\n", "for", "prop_iter", "in", "range", "(", "self", ".", "iterations", ")", ":", "\n", "# it's equal to propagate in disparity_sample_noise or real disparity_samples", "\n", "# integrate information from near pixels through horizontal propagation", "\n", "# [B, disparity_sample_number * propagation_filter_size, H, W]", "\n", "            ", "disparity_sample_noise", "=", "self", ".", "propagation", "(", "disparity_sample_noise", ",", "\n", "propagation_type", "=", "\"horizontal\"", ")", "\n", "\n", "# noise in [0, 1] * [(max -min) / sample number] + minimum in each interval", "\n", "# [B, disparity_sample_number * propagation_filter_size, H, W]", "\n", "disparity_samples", "=", "(", "max_disparity", "-", "min_disparity", ")", "*", "disparity_sample_interval", "*", "disparity_sample_noise", "+", "interval_min_disparity", "\n", "\n", "# [B, disparity_sample_number, H, W], [B, disparity_sample_number, H, W]", "\n", "disparity_samples", ",", "disparity_sample_noise", "=", "self", ".", "evaluate", "(", "left", ",", "right", ",", "disparity_samples", ",", "\n", "disparity_sample_noise", ")", "\n", "\n", "# integrate information from near pixels through vertical propagation", "\n", "# [B, disparity_sample_number * propagation_filter_size, H, W]", "\n", "disparity_sample_noise", "=", "self", ".", "propagation", "(", "disparity_sample_noise", ",", "\n", "propagation_type", "=", "\"vertical\"", ")", "\n", "\n", "# [B, disparity_sample_number * propagation_filter_size, H, W]", "\n", "disparity_samples", "=", "(", "max_disparity", "-", "min_disparity", ")", "*", "disparity_sample_interval", "*", "disparity_sample_noise", "+", "interval_min_disparity", "\n", "\n", "# [B, disparity_sample_number, H, W], [B, disparity_sample_number, H, W]", "\n", "disparity_samples", ",", "disparity_sample_noise", "=", "self", ".", "evaluate", "(", "left", ",", "right", ",", "disparity_samples", ",", "\n", "disparity_sample_noise", ")", "\n", "# not only the disparity samples generated in (min, max),", "\n", "# the min and max are also the disparity samples", "\n", "", "disparity_samples", "=", "torch", ".", "cat", "(", "(", "min_disparity", ",", "disparity_samples", ",", "max_disparity", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "disparity_samples", "", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.Disp2Prob.__init__": [[28, 65], ["isinstance", "TypeError", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "TypeError", "isinstance", "TypeError", "isinstance", "TypeError", "gtDisp.size", "gtDisp.size", "disp_sample.to.to.to", "isinstance", "TypeError", "type", "type", "type", "type", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "gtDisp", ",", "max_disp", ",", "start_disp", "=", "0", ",", "dilation", "=", "1", ",", "disp_sample", "=", "None", ")", ":", "\n", "\n", "        ", "if", "not", "isinstance", "(", "max_disp", ",", "int", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'int is expected, got {}'", ".", "format", "(", "type", "(", "max_disp", ")", ")", ")", "\n", "\n", "", "if", "not", "torch", ".", "is_tensor", "(", "gtDisp", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'torch.Tensor is expected, got {}'", ".", "format", "(", "type", "(", "gtDisp", ")", ")", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "start_disp", ",", "int", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'int is expected, got {}'", ".", "format", "(", "type", "(", "start_disp", ")", ")", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "dilation", ",", "int", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'int is expected, got {}'", ".", "format", "(", "type", "(", "dilation", ")", ")", ")", "\n", "\n", "\n", "#  B x 1 x H x W", "\n", "", "assert", "gtDisp", ".", "size", "(", "1", ")", "==", "1", ",", "'2nd dimension size should be 1, got {}'", ".", "format", "(", "gtDisp", ".", "size", "(", "1", ")", ")", "\n", "\n", "if", "disp_sample", "is", "not", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "disp_sample", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "raise", "TypeError", "(", "\"torch.Tensor expected, but got {}\"", ".", "format", "(", "type", "(", "disp_sample", ")", ")", ")", "\n", "\n", "", "disp_sample", "=", "disp_sample", ".", "to", "(", "gtDisp", ".", "device", ")", "\n", "\n", "idb", ",", "idc", ",", "idh", ",", "idw", "=", "disp_sample", ".", "shape", "\n", "gtb", ",", "gtc", ",", "gth", ",", "gtw", "=", "gtDisp", ".", "shape", "\n", "\n", "assert", "(", "idb", ",", "idh", ",", "idw", ")", "==", "(", "gtb", ",", "gth", ",", "gtw", ")", ",", "'The (B, H, W) should be same between '", "'ground truth disparity map and disparity index!'", "\n", "\n", "", "self", ".", "gtDisp", "=", "gtDisp", "\n", "self", ".", "max_disp", "=", "max_disp", "\n", "self", ".", "start_disp", "=", "start_disp", "\n", "self", ".", "end_disp", "=", "start_disp", "+", "max_disp", "-", "1", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "disp_sample", "=", "disp_sample", "\n", "self", ".", "eps", "=", "1e-40", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.Disp2Prob.getCost": [[66, 106], ["mask.detach().type_as.detach().type_as.detach().type_as", "disp2prob.Disp2Prob.calCost", "torch.linspace().to", "torch.linspace().to", "torch.linspace().to", "torch.linspace().to", "disp2prob.Disp2Prob.disp_sample.repeat().permute().contiguous", "disp2prob.isNaN", "disp2prob.isNaN", "print", "print", "print", "ValueError", "mask.detach().type_as.detach().type_as.detach", "disp2prob.Disp2Prob.min", "disp2prob.Disp2Prob.max", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "disp2prob.Disp2Prob.disp_sample.repeat().permute", "disp2prob.Disp2Prob.min", "disp2prob.Disp2Prob.max", "disp2prob.Disp2Prob.disp_sample.min", "disp2prob.Disp2Prob.disp_sample.max", "disp2prob.Disp2Prob.gtDisp.min", "disp2prob.Disp2Prob.gtDisp.max", "disp2prob.Disp2Prob.disp_sample.repeat"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.GaussianDisp2Prob.calCost", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.isNaN", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.isNaN"], ["", "def", "getCost", "(", "self", ")", ":", "\n", "# [BatchSize, 1, Height, Width]", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "self", ".", "gtDisp", ".", "shape", "\n", "assert", "c", "==", "1", "\n", "\n", "# if start_disp = 0, dilation = 1, then generate disparity candidates as [0, 1, 2, ... , maxDisp-1]", "\n", "if", "self", ".", "disp_sample", "is", "None", ":", "\n", "            ", "self", ".", "disp_sample_number", "=", "(", "self", ".", "max_disp", "+", "self", ".", "dilation", "-", "1", ")", "//", "self", ".", "dilation", "\n", "\n", "# [disp_sample_number]", "\n", "self", ".", "disp_sample", "=", "torch", ".", "linspace", "(", "\n", "self", ".", "start_disp", ",", "self", ".", "end_disp", ",", "self", ".", "disp_sample_number", "\n", ")", ".", "to", "(", "self", ".", "gtDisp", ".", "device", ")", "\n", "\n", "# [BatchSize, disp_sample_number, Height, Width]", "\n", "self", ".", "disp_sample", "=", "self", ".", "disp_sample", ".", "repeat", "(", "b", ",", "h", ",", "w", ",", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "\n", "# value of gtDisp must within (start_disp, end_disp), otherwise, we have to mask it out", "\n", "", "mask", "=", "(", "self", ".", "gtDisp", ">", "self", ".", "start_disp", ")", "&", "(", "self", ".", "gtDisp", "<", "self", ".", "end_disp", ")", "\n", "mask", "=", "mask", ".", "detach", "(", ")", ".", "type_as", "(", "self", ".", "gtDisp", ")", "\n", "self", ".", "gtDisp", "=", "self", ".", "gtDisp", "*", "mask", "\n", "\n", "# [BatchSize, disp_sample_number, Height, Width]", "\n", "cost", "=", "self", ".", "calCost", "(", ")", "\n", "\n", "# let the outliers' cost to be -inf", "\n", "# [BatchSize, disp_sample_number, Height, Width]", "\n", "cost", "=", "cost", "*", "mask", "-", "1e12", "\n", "\n", "# in case cost is NaN", "\n", "if", "isNaN", "(", "cost", ".", "min", "(", ")", ")", "or", "isNaN", "(", "cost", ".", "max", "(", ")", ")", ":", "\n", "            ", "print", "(", "'Cost ==> min: {:.4f}, max: {:.4f}'", ".", "format", "(", "cost", ".", "min", "(", ")", ",", "cost", ".", "max", "(", ")", ")", ")", "\n", "print", "(", "'Disparity Sample ==> min: {:.4f}, max: {:.4f}'", ".", "format", "(", "self", ".", "disp_sample", ".", "min", "(", ")", ",", "\n", "self", ".", "disp_sample", ".", "max", "(", ")", ")", ")", "\n", "print", "(", "'Disparity Ground Truth after mask out ==> min: {:.4f}, max: {:.4f}'", ".", "format", "(", "self", ".", "gtDisp", ".", "min", "(", ")", ",", "\n", "self", ".", "gtDisp", ".", "max", "(", ")", ")", ")", "\n", "raise", "ValueError", "(", "\" \\'cost contains NaN!\"", ")", "\n", "\n", "", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.Disp2Prob.getProb": [[107, 148], ["mask.detach().type_as.detach().type_as.detach().type_as", "disp2prob.Disp2Prob.calProb", "torch.linspace().to", "torch.linspace().to", "torch.linspace().to", "torch.linspace().to", "disp2prob.Disp2Prob.disp_sample.repeat().permute().contiguous", "disp2prob.isNaN", "disp2prob.isNaN", "print", "print", "print", "ValueError", "mask.detach().type_as.detach().type_as.detach", "disp2prob.Disp2Prob.min", "disp2prob.Disp2Prob.max", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "disp2prob.Disp2Prob.disp_sample.repeat().permute", "disp2prob.Disp2Prob.min", "disp2prob.Disp2Prob.max", "disp2prob.Disp2Prob.disp_sample.min", "disp2prob.Disp2Prob.disp_sample.max", "disp2prob.Disp2Prob.gtDisp.min", "disp2prob.Disp2Prob.gtDisp.max", "disp2prob.Disp2Prob.disp_sample.repeat"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.GaussianDisp2Prob.calProb", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.isNaN", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.isNaN"], ["", "def", "getProb", "(", "self", ")", ":", "\n", "# [BatchSize, 1, Height, Width]", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "self", ".", "gtDisp", ".", "shape", "\n", "assert", "c", "==", "1", "\n", "\n", "# if start_disp = 0, dilation = 1, then generate disparity candidates as [0, 1, 2, ... , maxDisp-1]", "\n", "if", "self", ".", "disp_sample", "is", "None", ":", "\n", "            ", "self", ".", "disp_sample_number", "=", "(", "self", ".", "max_disp", "+", "self", ".", "dilation", "-", "1", ")", "//", "self", ".", "dilation", "\n", "\n", "# [disp_sample_number]", "\n", "self", ".", "disp_sample", "=", "torch", ".", "linspace", "(", "\n", "self", ".", "start_disp", ",", "self", ".", "end_disp", ",", "self", ".", "disp_sample_number", "\n", ")", ".", "to", "(", "self", ".", "gtDisp", ".", "device", ")", "\n", "\n", "# [BatchSize, disp_sample_number, Height, Width]", "\n", "self", ".", "disp_sample", "=", "self", ".", "disp_sample", ".", "repeat", "(", "b", ",", "h", ",", "w", ",", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "\n", "# value of gtDisp must within (start_disp, end_disp), otherwise, we have to mask it out", "\n", "", "mask", "=", "(", "self", ".", "gtDisp", ">", "self", ".", "start_disp", ")", "&", "(", "self", ".", "gtDisp", "<", "self", ".", "end_disp", ")", "\n", "mask", "=", "mask", ".", "detach", "(", ")", ".", "type_as", "(", "self", ".", "gtDisp", ")", "\n", "self", ".", "gtDisp", "=", "self", ".", "gtDisp", "*", "mask", "\n", "\n", "# [BatchSize, disp_sample_number, Height, Width]", "\n", "probability", "=", "self", ".", "calProb", "(", ")", "\n", "\n", "# let the outliers' probability to be 0", "\n", "# in case divide or log 0, we plus a tiny constant value", "\n", "# [BatchSize, disp_sample_number, Height, Width]", "\n", "probability", "=", "probability", "*", "mask", "+", "self", ".", "eps", "\n", "\n", "# in case probability is NaN", "\n", "if", "isNaN", "(", "probability", ".", "min", "(", ")", ")", "or", "isNaN", "(", "probability", ".", "max", "(", ")", ")", ":", "\n", "            ", "print", "(", "'Probability ==> min: {:.4f}, max: {:.4f}'", ".", "format", "(", "probability", ".", "min", "(", ")", ",", "probability", ".", "max", "(", ")", ")", ")", "\n", "print", "(", "'Disparity Sample ==> min: {:.4f}, max: {:.4f}'", ".", "format", "(", "self", ".", "disp_sample", ".", "min", "(", ")", ",", "\n", "self", ".", "disp_sample", ".", "max", "(", ")", ")", ")", "\n", "print", "(", "'Disparity Ground Truth after mask out ==> min: {:.4f}, max: {:.4f}'", ".", "format", "(", "self", ".", "gtDisp", ".", "min", "(", ")", ",", "\n", "self", ".", "gtDisp", ".", "max", "(", ")", ")", ")", "\n", "raise", "ValueError", "(", "\" \\'probability contains NaN!\"", ")", "\n", "\n", "", "return", "probability", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.Disp2Prob.calProb": [[150, 152], ["None"], "methods", ["None"], ["", "def", "calProb", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.Disp2Prob.calCost": [[153, 155], ["None"], "methods", ["None"], ["", "def", "calCost", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.LaplaceDisp2Prob.__init__": [[159, 162], ["disp2prob.Disp2Prob.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gtDisp", ",", "max_disp", ",", "variance", "=", "1", ",", "start_disp", "=", "0", ",", "dilation", "=", "1", ",", "disp_sample", "=", "None", ")", ":", "\n", "        ", "super", "(", "LaplaceDisp2Prob", ",", "self", ")", ".", "__init__", "(", "gtDisp", ",", "max_disp", ",", "start_disp", ",", "dilation", ",", "disp_sample", ")", "\n", "self", ".", "variance", "=", "variance", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.LaplaceDisp2Prob.calCost": [[163, 168], ["torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "calCost", "(", "self", ")", ":", "\n", "# 1/N * exp( - (d - d{gt}) / var), N is normalization factor, [BatchSize, maxDisp, Height, Width]", "\n", "        ", "cost", "=", "(", "(", "-", "torch", ".", "abs", "(", "self", ".", "disp_sample", "-", "self", ".", "gtDisp", ")", ")", "/", "self", ".", "variance", ")", "\n", "\n", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.LaplaceDisp2Prob.calProb": [[169, 174], ["disp2prob.LaplaceDisp2Prob.calCost", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.GaussianDisp2Prob.calCost", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax"], ["", "def", "calProb", "(", "self", ")", ":", "\n", "        ", "cost", "=", "self", ".", "calCost", "(", ")", "\n", "probability", "=", "F", ".", "softmax", "(", "cost", ",", "dim", "=", "1", ")", "\n", "\n", "return", "probability", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.GaussianDisp2Prob.__init__": [[178, 181], ["disp2prob.Disp2Prob.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gtDisp", ",", "max_disp", ",", "variance", "=", "1", ",", "start_disp", "=", "0", ",", "dilation", "=", "1", ",", "disp_sample", "=", "None", ")", ":", "\n", "        ", "super", "(", "GaussianDisp2Prob", ",", "self", ")", ".", "__init__", "(", "gtDisp", ",", "max_disp", ",", "start_disp", ",", "dilation", ",", "disp_sample", ")", "\n", "self", ".", "variance", "=", "variance", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.GaussianDisp2Prob.calCost": [[182, 188], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs.pow", "torch.abs.pow"], "methods", ["None"], ["", "def", "calCost", "(", "self", ")", ":", "\n", "# 1/N * exp( - (d - d{gt})^2 / b), N is normalization factor, [BatchSize, maxDisp, Height, Width]", "\n", "        ", "distance", "=", "(", "torch", ".", "abs", "(", "self", ".", "disp_sample", "-", "self", ".", "gtDisp", ")", ")", "\n", "cost", "=", "(", "-", "distance", ".", "pow", "(", "2.0", ")", "/", "self", ".", "variance", ")", "\n", "\n", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.GaussianDisp2Prob.calProb": [[189, 194], ["disp2prob.GaussianDisp2Prob.calCost", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.GaussianDisp2Prob.calCost", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax"], ["", "def", "calProb", "(", "self", ")", ":", "\n", "        ", "cost", "=", "self", ".", "calCost", "(", ")", "\n", "probability", "=", "F", ".", "softmax", "(", "cost", ",", "dim", "=", "1", ")", "\n", "\n", "return", "probability", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.OneHotDisp2Prob.__init__": [[198, 201], ["disp2prob.Disp2Prob.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gtDisp", ",", "max_disp", ",", "variance", "=", "1", ",", "start_disp", "=", "0", ",", "dilation", "=", "1", ",", "disp_sample", "=", "None", ")", ":", "\n", "        ", "super", "(", "OneHotDisp2Prob", ",", "self", ")", ".", "__init__", "(", "gtDisp", ",", "max_disp", ",", "start_disp", ",", "dilation", ",", "disp_sample", ")", "\n", "self", ".", "variance", "=", "variance", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.OneHotDisp2Prob.getProb": [[202, 207], ["torch.lt().type_as", "torch.lt().type_as", "torch.lt().type_as", "torch.lt().type_as", "torch.lt", "torch.lt", "torch.lt", "torch.lt", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "getProb", "(", "self", ")", ":", "\n", "# |d - d{gt}| < variance, [BatchSize, maxDisp, Height, Width]", "\n", "        ", "probability", "=", "torch", ".", "lt", "(", "torch", ".", "abs", "(", "self", ".", "disp_sample", "-", "self", ".", "gtDisp", ")", ",", "self", ".", "variance", ")", ".", "type_as", "(", "self", ".", "gtDisp", ")", "\n", "\n", "return", "probability", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.isNaN": [[7, 9], ["None"], "function", ["None"], ["def", "isNaN", "(", "x", ")", ":", "\n", "    ", "return", "x", "!=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.quantile_loss.quantile_loss": [[5, 42], ["min_loss.mean.mean", "max_loss.mean.mean"], "function", ["None"], ["def", "quantile_loss", "(", "minEstDisp", ",", "maxEstDisp", ",", "gtDisp", ",", "max_disp", ",", "start_disp", "=", "0", ",", "weight", "=", "1.0", ",", "theta", "=", "0.05", ")", ":", "\n", "    ", "\"\"\"\n    An implementation of quantile loss proposed in DeepPruner\n    Details refer to: https://github.com/uber-research/DeepPruner/blob/master/deeppruner/loss_evaluation.py\n\n    Inputs:\n        minEstDisp, (Tensor): the estimated min disparity map, i.e. the lower bound of disparity samples,\n                              in [BatchSize, 1, Height, Width] layout.\n        maxEstDisp, (Tensor): the estimated max disparity map, i.e. the upper bound of disparity samples\n                              in [BatchSize, 1, Height, Width] layout.\n        gtDisp, (Tensor): the ground truth disparity map,\n                          in [BatchSize, 1, Height, Width] layout.\n        max_disp (int): the max of Disparity. default is 192\n        start_disp (int): the start searching disparity index, usually be 0\n        weight (int, float): the weight of quantile loss\n        theta (float): the balancing scalar, 0 < theta < 0.05\n\n\n    \"\"\"", "\n", "# get valid ground truth disparity", "\n", "mask", "=", "(", "gtDisp", ">", "start_disp", ")", "&", "(", "gtDisp", "<", "(", "start_disp", "+", "max_disp", ")", ")", "\n", "\n", "# forces min_disparity to be equal or slightly lower than the ground truth disparity", "\n", "min_mask", "=", "(", "(", "gtDisp", "[", "mask", "]", "-", "minEstDisp", "[", "mask", "]", ")", "<", "0", ")", ".", "float", "(", ")", "\n", "# if x < 0, x * (-0.95); if x > 0, x * 0.05", "\n", "min_loss", "=", "(", "gtDisp", "[", "mask", "]", "-", "minEstDisp", "[", "mask", "]", ")", "*", "(", "theta", "-", "min_mask", ")", "\n", "min_loss", "=", "min_loss", ".", "mean", "(", ")", "\n", "\n", "# forces max_disparity to be equal or slightly larger than the ground truth disparity", "\n", "max_mask", "=", "(", "(", "gtDisp", "[", "mask", "]", "-", "maxEstDisp", "[", "mask", "]", ")", "<", "0", ")", ".", "float", "(", ")", "\n", "# if x < 0, x * (-0.05); if x > 0, x * 0.95", "\n", "max_loss", "=", "(", "gtDisp", "[", "mask", "]", "-", "maxEstDisp", "[", "mask", "]", ")", "*", "(", "(", "1", "-", "theta", ")", "-", "max_mask", ")", "\n", "max_loss", "=", "max_loss", ".", "mean", "(", ")", "\n", "\n", "total_loss", "=", "(", "min_loss", "+", "max_loss", ")", "*", "weight", "\n", "\n", "return", "total_loss", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.ssim.SSIM": [[5, 38], ["torch.avg_pool2d", "torch.avg_pool2d", "F.avg_pool2d.pow", "F.avg_pool2d.pow", "torch.clamp().mean", "torch.clamp().mean", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.clamp", "torch.clamp"], "function", ["None"], ["def", "SSIM", "(", "x", ",", "y", ",", "mask", "=", "None", ",", "C1", "=", "0.01", "**", "2", ",", "C2", "=", "0.03", "**", "2", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the SSIM between two given tensor.\n    Details please refer to https://en.wikipedia.org/wiki/Structural_similarity\n    Args:\n        x (torch.Tensor): in [BatchSize, Channels, Height, Width] layout\n        y (torch.Tensor): in [BatchSize, Channels, Height, Width] layout\n        mask (None or torch.Tensor): the mask of valid index, in [BatchSize, Channels, Height, Width] layout\n        C1 (double or int): a variable to stabilize the division with weak denominator\n        C2 (double or int): a variable to stabilize the division with weak denominator\n    Outputs:\n        (double): the average difference between x and y, value ranges from [0, 1]\n    \"\"\"", "\n", "\n", "mu_x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "3", ",", "1", ",", "1", ")", "\n", "mu_y", "=", "F", ".", "avg_pool2d", "(", "y", ",", "3", ",", "1", ",", "1", ")", "\n", "mu_x_mu_y", "=", "mu_x", "*", "mu_y", "\n", "mu_x_sq", "=", "mu_x", ".", "pow", "(", "2", ")", "\n", "mu_y_sq", "=", "mu_y", ".", "pow", "(", "2", ")", "\n", "\n", "sigma_x", "=", "F", ".", "avg_pool2d", "(", "x", "**", "2", ",", "3", ",", "1", ",", "1", ")", "-", "mu_x_sq", "\n", "sigma_y", "=", "F", ".", "avg_pool2d", "(", "y", "**", "2", ",", "3", ",", "1", ",", "1", ")", "-", "mu_y_sq", "\n", "sigma_xy", "=", "F", ".", "avg_pool2d", "(", "x", "*", "y", ",", "3", ",", "1", ",", "1", ")", "-", "mu_x_mu_y", "\n", "\n", "SSIM_n", "=", "(", "2", "*", "mu_x_mu_y", "+", "C1", ")", "*", "(", "2", "*", "sigma_xy", "+", "C2", ")", "\n", "SSIM_d", "=", "(", "mu_x_sq", "+", "mu_y_sq", "+", "C1", ")", "*", "(", "sigma_x", "+", "sigma_y", "+", "C2", ")", "\n", "SSIM", "=", "SSIM_n", "/", "SSIM_d", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "SSIM", "=", "SSIM", "[", "mask", "]", "\n", "\n", "# Here, we calculate the difference between x and y, and limit its value in [0,1]", "\n", "", "return", "torch", ".", "clamp", "(", "(", "1", "-", "SSIM", ")", "/", "2", ",", "0", ",", "1", ")", ".", "mean", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.load_disp.load_pfm": [[5, 54], ["open", "fp.readline().rstrip", "re.match", "float", "numpy.fromfile", "numpy.reshape", "numpy.flipud", "fp.readline", "map", "Exception", "fp.readline().rstrip", "fp.readline", "Exception", "re.match.groups", "fp.readline"], "function", ["None"], ["def", "load_pfm", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"\n    load image in PFM type.\n    Args:\n        file_path string: file path(absolute)\n    Returns:\n        data (numpy.array): data of image in (Height, Width[, 3]) layout\n        scale (float): scale of image\n    \"\"\"", "\n", "with", "open", "(", "file_path", ",", "encoding", "=", "\"ISO-8859-1\"", ")", "as", "fp", ":", "\n", "        ", "color", "=", "None", "\n", "width", "=", "None", "\n", "height", "=", "None", "\n", "scale", "=", "None", "\n", "endian", "=", "None", "\n", "\n", "# load file header and grab channels, if is 'PF' 3 channels else 1 channel(gray scale)", "\n", "header", "=", "fp", ".", "readline", "(", ")", ".", "rstrip", "(", ")", "\n", "if", "header", "==", "'PF'", ":", "\n", "            ", "color", "=", "True", "\n", "", "elif", "header", "==", "'Pf'", ":", "\n", "            ", "color", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Not a PFM file.'", ")", "\n", "\n", "# grab image dimensions", "\n", "", "dim_match", "=", "re", ".", "match", "(", "r'^(\\d+)\\s(\\d+)\\s$'", ",", "fp", ".", "readline", "(", ")", ")", "\n", "if", "dim_match", ":", "\n", "            ", "width", ",", "height", "=", "map", "(", "int", ",", "dim_match", ".", "groups", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Malformed PFM header.'", ")", "\n", "\n", "# grab image scale", "\n", "", "scale", "=", "float", "(", "fp", ".", "readline", "(", ")", ".", "rstrip", "(", ")", ")", "\n", "if", "scale", "<", "0", ":", "# little-endian", "\n", "            ", "endian", "=", "'<'", "\n", "scale", "=", "-", "scale", "\n", "", "else", ":", "\n", "            ", "endian", "=", "'>'", "# big-endian", "\n", "\n", "# grab image data", "\n", "", "data", "=", "np", ".", "fromfile", "(", "fp", ",", "endian", "+", "'f'", ")", "\n", "shape", "=", "(", "height", ",", "width", ",", "3", ")", "if", "color", "else", "(", "height", ",", "width", ")", "\n", "\n", "# reshape data to [Height, Width, Channels]", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "shape", ")", "\n", "data", "=", "np", ".", "flipud", "(", "data", ")", "\n", "\n", "return", "data", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.load_disp.load_scene_flow_disp": [[57, 69], ["img_path.endswith", "load_disp.load_pfm"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.load_flow.load_pfm"], ["", "", "def", "load_scene_flow_disp", "(", "img_path", ")", ":", "\n", "    ", "\"\"\"load scene flow disparity image\n    Args:\n        img_path:\n    Returns:\n    \"\"\"", "\n", "assert", "img_path", ".", "endswith", "(", "'.pfm'", ")", ",", "\"scene flow disparity image must end with .pfm\"", "\"but got {}\"", ".", "format", "(", "img_path", ")", "\n", "\n", "disp_img", ",", "__", "=", "load_pfm", "(", "img_path", ")", "\n", "\n", "return", "disp_img", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.load_flow.load_pfm": [[6, 52], ["open", "fp.readline().rstrip().decode", "re.match", "float", "numpy.fromfile", "numpy.reshape", "numpy.flipud", "fp.readline().decode", "map", "Exception", "fp.readline().rstrip", "fp.readline().rstrip", "Exception", "re.match.groups", "fp.readline", "fp.readline", "fp.readline"], "function", ["None"], ["def", "load_pfm", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"\n    load image in PFM type.\n    Args:\n        file_path string: file path(absolute)\n    Returns:\n        data (numpy.array): data of image in (Height, Width[, 3]) layout\n        scale (float): scale of image\n    \"\"\"", "\n", "with", "open", "(", "file_path", ",", "encoding", "=", "\"ISO-8859-1\"", ")", "as", "fp", ":", "\n", "\n", "        ", "color", "=", "None", "\n", "width", "=", "None", "\n", "height", "=", "None", "\n", "scale", "=", "None", "\n", "endian", "=", "None", "\n", "\n", "# load file header and grab channels, if is 'PF' 3 channels else 1 channel(gray scale)", "\n", "header", "=", "fp", ".", "readline", "(", ")", ".", "rstrip", "(", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "if", "header", "==", "'PF'", ":", "\n", "            ", "color", "=", "True", "\n", "", "elif", "header", "==", "'Pf'", ":", "\n", "            ", "color", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Not a PFM file.'", ")", "\n", "\n", "", "dim_match", "=", "re", ".", "match", "(", "r'^(\\d+)\\s(\\d+)\\s$'", ",", "fp", ".", "readline", "(", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "if", "dim_match", ":", "\n", "            ", "width", ",", "height", "=", "map", "(", "int", ",", "dim_match", ".", "groups", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Malformed PFM header.'", ")", "\n", "\n", "", "scale", "=", "float", "(", "fp", ".", "readline", "(", ")", ".", "rstrip", "(", ")", ")", "\n", "if", "scale", "<", "0", ":", "# little-endian", "\n", "            ", "endian", "=", "'<'", "\n", "scale", "=", "-", "scale", "\n", "", "else", ":", "\n", "            ", "endian", "=", "'>'", "# big-endian", "\n", "\n", "", "data", "=", "np", ".", "fromfile", "(", "fp", ",", "endian", "+", "'f'", ")", "\n", "shape", "=", "(", "height", ",", "width", ",", "3", ")", "if", "color", "else", "(", "height", ",", "width", ")", "\n", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "shape", ")", "\n", "data", "=", "np", ".", "flipud", "(", "data", ")", "\n", "\n", "", "return", "data", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.load_flow.load_png": [[54, 79], ["png.Reader", "png.Reader.asDirect", "list", "numpy.zeros", "range", "np.zeros.astype", "len"], "function", ["None"], ["", "def", "load_png", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"\n    Read from KITTI .png file\n    Args:\n        file_path string: file path(absolute)\n    Returns:\n        data (numpy.array): data of image in (Height, Width, 3) layout\n    \"\"\"", "\n", "flow_object", "=", "png", ".", "Reader", "(", "filename", "=", "file_path", ")", "\n", "flow_direct", "=", "flow_object", ".", "asDirect", "(", ")", "\n", "flow_data", "=", "list", "(", "flow_direct", "[", "2", "]", ")", "\n", "(", "w", ",", "h", ")", "=", "flow_direct", "[", "3", "]", "[", "'size'", "]", "\n", "\n", "flow", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ",", "3", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "flow_data", ")", ")", ":", "\n", "        ", "flow", "[", "i", ",", ":", ",", "0", "]", "=", "flow_data", "[", "i", "]", "[", "0", ":", ":", "3", "]", "\n", "flow", "[", "i", ",", ":", ",", "1", "]", "=", "flow_data", "[", "i", "]", "[", "1", ":", ":", "3", "]", "\n", "flow", "[", "i", ",", ":", ",", "2", "]", "=", "flow_data", "[", "i", "]", "[", "2", ":", ":", "3", "]", "\n", "\n", "", "invalid_idx", "=", "(", "flow", "[", ":", ",", ":", ",", "2", "]", "==", "0", ")", "\n", "flow", "[", ":", ",", ":", ",", "0", ":", "2", "]", "=", "(", "flow", "[", ":", ",", ":", ",", "0", ":", "2", "]", "-", "2", "**", "15", ")", "/", "64.0", "\n", "flow", "[", "invalid_idx", ",", "0", "]", "=", "0", "\n", "flow", "[", "invalid_idx", ",", "1", "]", "=", "0", "\n", "\n", "return", "flow", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.load_flow.load_flo": [[81, 106], ["open", "numpy.fromfile", "int", "int", "numpy.fromfile", "numpy.resize", "numpy.fromfile", "numpy.fromfile"], "function", ["None"], ["", "def", "load_flo", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"\n    Read .flo file in MiddleBury format\n    Code adapted from:\n    http://stackoverflow.com/questions/28013200/reading-middlebury-flow-files-with-python-bytes-array-numpy\n\n    WARNING: this will work on little-endian architectures (eg Intel x86) only!\n    Args:\n        file_path string: file path(absolute)\n    Returns:\n        flow (numpy.array): data of image in (Height, Width, 2) layout\n    \"\"\"", "\n", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "magic", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", "=", "1", ")", "\n", "assert", "(", "magic", "==", "202021.25", ")", "\n", "w", "=", "int", "(", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "count", "=", "1", ")", ")", "\n", "h", "=", "int", "(", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "count", "=", "1", ")", ")", "\n", "# print('Reading %d x %d flo file\\n' % (w, h))", "\n", "flow", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", "=", "2", "*", "w", "*", "h", ")", "\n", "# Reshape data into 3D array (columns, rows, bands)", "\n", "# The reshape here is for visualization, the original code is (w,h,2)", "\n", "flow", "=", "np", ".", "resize", "(", "flow", ",", "(", "h", ",", "w", ",", "2", ")", ")", "\n", "\n", "", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.load_flow.write_flo": [[108, 139], ["open", "numpy.array().astype().tofile", "numpy.array().astype().tofile", "numpy.array().astype().tofile", "numpy.zeros", "np.zeros.astype().tofile", "open.close", "numpy.array().astype", "numpy.array().astype", "numpy.array().astype", "np.zeros.astype", "numpy.array", "numpy.array", "numpy.array", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "write_flo", "(", "file_path", ",", "uv", ",", "v", "=", "None", ")", ":", "\n", "    ", "\"\"\" Write optical flow to file.\n\n    If v is None, uv is assumed to contain both u and v channels,\n    stacked in depth.\n    Original code by Deqing Sun, adapted from Daniel Scharstein.\n    \"\"\"", "\n", "nBands", "=", "2", "\n", "\n", "if", "v", "is", "None", ":", "\n", "        ", "assert", "(", "uv", ".", "ndim", "==", "3", ")", "\n", "assert", "(", "uv", ".", "shape", "[", "2", "]", "==", "2", ")", "\n", "u", "=", "uv", "[", ":", ",", ":", ",", "0", "]", "\n", "v", "=", "uv", "[", ":", ",", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "        ", "u", "=", "uv", "\n", "\n", "", "assert", "(", "u", ".", "shape", "==", "v", ".", "shape", ")", "\n", "height", ",", "width", "=", "u", ".", "shape", "\n", "f", "=", "open", "(", "file_path", ",", "'wb'", ")", "\n", "# write the header", "\n", "np", ".", "array", "(", "[", "202021.25", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "tofile", "(", "f", ")", "\n", "np", ".", "array", "(", "width", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tofile", "(", "f", ")", "\n", "np", ".", "array", "(", "height", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tofile", "(", "f", ")", "\n", "# arrange into matrix form", "\n", "tmp", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", "*", "nBands", ")", ")", "\n", "tmp", "[", ":", ",", "np", ".", "arange", "(", "width", ")", "*", "2", "]", "=", "u", "\n", "tmp", "[", ":", ",", "np", ".", "arange", "(", "width", ")", "*", "2", "+", "1", "]", "=", "v", "\n", "tmp", ".", "astype", "(", "np", ".", "float32", ")", ".", "tofile", "(", "f", ")", "\n", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.load_flow.load_flying_chairs_flow": [[142, 154], ["img_path.endswith", "load_flow.load_flo"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.load_flow.load_flo"], ["", "def", "load_flying_chairs_flow", "(", "img_path", ")", ":", "\n", "    ", "\"\"\"load flying chairs flow image\n    Args:\n        img_path:\n    Returns:\n    \"\"\"", "\n", "assert", "img_path", ".", "endswith", "(", "'.flo'", ")", ",", "\"flying chairs flow image must end with .flo \"", "\"but got {}\"", ".", "format", "(", "img_path", ")", "\n", "\n", "flow_img", "=", "load_flo", "(", "img_path", ")", "\n", "\n", "return", "flow_img", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.load_flow.write_flying_chairs_flow": [[157, 167], ["img_path.endswith", "load_flow.write_flo"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.load_flow.write_flo"], ["", "def", "write_flying_chairs_flow", "(", "img_path", ",", "uv", ",", "v", "=", "None", ")", ":", "\n", "    ", "\"\"\"write flying chairs flow image\n    Args:\n        img_path:\n    Returns:\n    \"\"\"", "\n", "assert", "img_path", ".", "endswith", "(", "'.flo'", ")", ",", "\"flying chairs flow image must end with .flo \"", "\"but got {}\"", ".", "format", "(", "img_path", ")", "\n", "\n", "write_flo", "(", "img_path", ",", "uv", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.load_flow.load_flying_things_flow": [[170, 182], ["img_path.endswith", "load_flow.load_pfm"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.load_flow.load_pfm"], ["", "def", "load_flying_things_flow", "(", "img_path", ")", ":", "\n", "    ", "\"\"\"load flying things flow image\n    Args:\n        img_path:\n    Returns:\n    \"\"\"", "\n", "assert", "img_path", ".", "endswith", "(", "'.pfm'", ")", ",", "\"flying things flow image must end with .pfm \"", "\"but got {}\"", ".", "format", "(", "img_path", ")", "\n", "\n", "flow_img", ",", "__", "=", "load_pfm", "(", "img_path", ")", "\n", "\n", "return", "flow_img", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.load_flow.load_kitti_flow": [[185, 197], ["img_path.endswith", "load_flow.load_png"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.load_flow.load_png"], ["", "def", "load_kitti_flow", "(", "img_path", ")", ":", "\n", "    ", "\"\"\"load KITTI 2012/2015 flow image\n    Args:\n        img_path:\n    Returns:\n    \"\"\"", "\n", "assert", "img_path", ".", "endswith", "(", "'.png'", ")", ",", "\"KITTI 2012/2015 flow image must end with .png \"", "\"but got {}\"", ".", "format", "(", "img_path", ")", "\n", "\n", "flow_img", "=", "load_png", "(", "img_path", ")", "\n", "\n", "return", "flow_img", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.test_cat_fms.TestCostComputation.setUp": [[20, 23], ["torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:1'", ")", "\n", "self", ".", "iters", "=", "50", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.test_cat_fms.TestCostComputation.test_cat_fms": [[26, 81], ["print", "torch.linspace().reshape().to", "torch.linspace().reshape().to", "torch.linspace().reshape().to", "torch.linspace().reshape().to", "torch.linspace().reshape().to", "torch.linspace().reshape().to", "torch.linspace().reshape().to", "torch.linspace().reshape().to", "print", "print", "dmb.modeling.stereo.cost_processors.utils.cat_fms.cat_fms", "print", "range", "range", "print", "print", "dmb.modeling.stereo.cost_processors.utils.cat_fms.fast_cat_fms", "print", "range", "range", "print", "print", "torch.linspace().repeat().permute().contiguous().to", "torch.linspace().repeat().permute().contiguous().to", "torch.linspace().repeat().permute().contiguous().to", "torch.linspace().repeat().permute().contiguous().to", "dmb.modeling.stereo.cost_processors.utils.cat_fms.fast_cat_fms", "print", "range", "range", "print", "print", "print", "print", "print", "print", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().repeat().permute().contiguous", "torch.linspace().repeat().permute().contiguous", "torch.linspace().repeat().permute().contiguous", "torch.linspace().repeat().permute().contiguous", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.cat_fms.cat_fms", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.cat_fms.fast_cat_fms", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.cat_fms.fast_cat_fms"], ["", "def", "test_cat_fms", "(", "self", ")", ":", "\n", "\n", "        ", "print", "(", "'*'", "*", "40", ",", "'Test cat_fms'", ",", "'*'", "*", "40", ")", "\n", "\n", "H", ",", "W", "=", "3", ",", "4", "\n", "left", "=", "torch", ".", "linspace", "(", "1", ",", "H", "*", "W", ",", "H", "*", "W", ")", ".", "reshape", "(", "1", ",", "1", ",", "H", ",", "W", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "right", "=", "torch", ".", "linspace", "(", "H", "*", "W", "+", "1", ",", "H", "*", "W", "*", "2", ",", "H", "*", "W", ")", ".", "reshape", "(", "1", ",", "1", ",", "H", ",", "W", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "print", "(", "'left: \\n '", ",", "left", ")", "\n", "print", "(", "'right: \\n '", ",", "right", ")", "\n", "start_disp", "=", "-", "2", "\n", "max_disp", "=", "5", "\n", "dilation", "=", "2", "\n", "d", "=", "(", "max_disp", "+", "dilation", "-", "1", ")", "//", "dilation", "\n", "\n", "cost", "=", "cat_fms", "(", "left", ",", "right", ",", "max_disp", ",", "start_disp", ",", "dilation", ")", "\n", "print", "(", "'Cost in shape: '", ",", "cost", ".", "shape", ")", "\n", "idx", "=", "0", "\n", "for", "i", "in", "range", "(", "start_disp", ",", "max_disp", "+", "start_disp", ",", "dilation", ")", ":", "\n", "            ", "print", "(", "'Disparity {}:\\n {}'", ".", "format", "(", "i", ",", "cost", "[", ":", ",", ":", ",", "idx", ",", "]", ")", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "for", "i", "in", "range", "(", "cost", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "print", "(", "'Channel {}:\\n {}'", ".", "format", "(", "i", ",", "cost", "[", ":", ",", "i", ",", "]", ")", ")", "\n", "\n", "", "print", "(", "'*'", "*", "80", ")", "\n", "print", "(", "'Test fast_cat_fms'", ")", "\n", "\n", "cost", "=", "fast_cat_fms", "(", "left", ",", "right", ",", "max_disp", ",", "start_disp", ",", "dilation", ")", "\n", "print", "(", "'Cost in shape: '", ",", "cost", ".", "shape", ")", "\n", "idx", "=", "0", "\n", "for", "i", "in", "range", "(", "start_disp", ",", "max_disp", "+", "start_disp", ",", "dilation", ")", ":", "\n", "            ", "print", "(", "'Disparity {}:\\n {}'", ".", "format", "(", "i", ",", "cost", "[", ":", ",", ":", ",", "idx", ",", "]", ")", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "for", "i", "in", "range", "(", "cost", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "print", "(", "'Channel {}:\\n {}'", ".", "format", "(", "i", ",", "cost", "[", ":", ",", "i", ",", "]", ")", ")", "\n", "\n", "", "print", "(", "'*'", "*", "80", ")", "\n", "print", "(", "'Test fast_cat_fms with disparity samples'", ")", "\n", "\n", "end_disp", "=", "start_disp", "+", "max_disp", "-", "1", "\n", "\n", "# generate disparity samples", "\n", "disp_samples", "=", "torch", ".", "linspace", "(", "start_disp", ",", "end_disp", ",", "d", ")", ".", "repeat", "(", "1", ",", "H", ",", "W", ",", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "cost", "=", "fast_cat_fms", "(", "left", ",", "right", ",", "max_disp", ",", "start_disp", ",", "dilation", ",", "disp_samples", ")", "\n", "print", "(", "'Cost in shape: '", ",", "cost", ".", "shape", ")", "\n", "idx", "=", "0", "\n", "for", "i", "in", "range", "(", "start_disp", ",", "max_disp", "+", "start_disp", ",", "dilation", ")", ":", "\n", "            ", "print", "(", "'Disparity {}:\\n {}'", ".", "format", "(", "i", ",", "cost", "[", ":", ",", ":", ",", "idx", ",", "]", ")", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "for", "i", "in", "range", "(", "cost", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "print", "(", "'Channel {}:\\n {}'", ".", "format", "(", "i", ",", "cost", "[", ":", ",", "i", ",", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.test_cat_fms.TestCostComputation.timeTemplate": [[82, 103], ["isinstance", "time.time", "range", "time.time", "print", "isinstance", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "module.eval", "module.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "len", "module", "len", "module"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.train"], ["", "", "def", "timeTemplate", "(", "self", ",", "module", ",", "module_name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "device", "(", "self", ".", "device", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "module", ".", "eval", "(", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "iters", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "len", "(", "args", ")", ">", "0", ":", "\n", "                    ", "module", "(", "*", "args", ")", "\n", "", "if", "len", "(", "kwargs", ")", ">", "0", ":", "\n", "                    ", "module", "(", "**", "kwargs", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", "self", ".", "device", ")", "\n", "", "", "end_time", "=", "time", ".", "time", "(", ")", "\n", "avg_time", "=", "(", "end_time", "-", "start_time", ")", "/", "self", ".", "iters", "\n", "print", "(", "'{} reference forward once takes {:.4f}s, i.e. {:.2f}fps'", ".", "format", "(", "module_name", ",", "avg_time", ",", "(", "1", "/", "avg_time", ")", ")", ")", "\n", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "module", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.test_cat_fms.TestCostComputation.test_speed": [[105, 130], ["torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "test_cat_fms.TestCostComputation.timeTemplate", "test_cat_fms.TestCostComputation.timeTemplate", "print", "torch.linspace().repeat().permute().contiguous().to", "torch.linspace().repeat().permute().contiguous().to", "torch.linspace().repeat().permute().contiguous().to", "torch.linspace().repeat().permute().contiguous().to", "test_cat_fms.TestCostComputation.timeTemplate", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.linspace().repeat().permute().contiguous", "torch.linspace().repeat().permute().contiguous", "torch.linspace().repeat().permute().contiguous", "torch.linspace().repeat().permute().contiguous", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.test_backbones.testBackbones.timeTemplate", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.test_backbones.testBackbones.timeTemplate", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.test_backbones.testBackbones.timeTemplate"], ["", "", "def", "test_speed", "(", "self", ")", ":", "\n", "        ", "max_disp", "=", "192", "\n", "scale", "=", "4", "\n", "start_disp", "=", "0", "\n", "dilation", "=", "1", "\n", "SH", ",", "SW", "=", "540", ",", "960", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "1", ",", "32", ",", "SH", "//", "scale", ",", "SW", "//", "scale", "\n", "\n", "reference_fm", "=", "torch", ".", "rand", "(", "B", ",", "C", ",", "H", ",", "W", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "target_fm", "=", "torch", ".", "rand", "(", "B", ",", "C", ",", "H", ",", "W", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "timeTemplate", "(", "cat_fms", ",", "'CAT_FMS'", ",", "reference_fm", ",", "target_fm", ",", "max_disp", "//", "scale", ",", "start_disp", ",", "dilation", ")", "\n", "\n", "self", ".", "timeTemplate", "(", "fast_cat_fms", ",", "'FAST_CAT_FMS'", ",", "reference_fm", ",", "target_fm", ",", "max_disp", "//", "scale", ",", "start_disp", ",", "dilation", ")", "\n", "\n", "print", "(", "'Test fast_cat_fms with disparity samples'", ")", "\n", "\n", "d", "=", "(", "max_disp", "+", "dilation", "-", "1", ")", "//", "dilation", "\n", "end_disp", "=", "start_disp", "+", "max_disp", "-", "1", "\n", "\n", "# generate disparity samples", "\n", "disp_samples", "=", "torch", ".", "linspace", "(", "start_disp", ",", "end_disp", ",", "d", ")", ".", "repeat", "(", "1", ",", "H", ",", "W", ",", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "timeTemplate", "(", "fast_cat_fms", ",", "'FAST_CAT_FMS'", ",", "reference_fm", ",", "target_fm", ",", "max_disp", "//", "scale", ",", "start_disp", ",", "dilation", ",", "disp_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.test_disp2prob.testLosses.setUp": [[12, 14], ["torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:1\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.test_disp2prob.testLosses.testCase1Laplace": [[15, 43], ["gtDisp.to.to.to", "print", "print", "print", "print", "print", "dmb.modeling.stereo.losses.utils.disp2prob.LaplaceDisp2Prob().getProb", "range", "print", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "dmb.modeling.stereo.losses.utils.disp2prob.LaplaceDisp2Prob"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.OneHotDisp2Prob.getProb"], ["", "def", "testCase1Laplace", "(", "self", ")", ":", "\n", "        ", "max_disp", "=", "5", "\n", "start_disp", "=", "-", "2", "\n", "dilation", "=", "2", "\n", "disp_sample", "=", "None", "\n", "variance", "=", "2", "\n", "h", ",", "w", "=", "3", ",", "4", "\n", "\n", "gtDisp", "=", "torch", ".", "rand", "(", "1", ",", "1", ",", "h", ",", "w", ")", "*", "max_disp", "+", "start_disp", "\n", "\n", "gtDisp", "=", "gtDisp", ".", "to", "(", "self", ".", "device", ")", "\n", "gtDisp", ".", "requires_grad", "=", "True", "\n", "print", "(", "'*'", "*", "60", ")", "\n", "print", "(", "'Ground Truth Disparity:'", ")", "\n", "print", "(", "gtDisp", ")", "\n", "\n", "\n", "print", "(", "'*'", "*", "60", ")", "\n", "print", "(", "'Generated disparity probability volume:'", ")", "\n", "prob_volume", "=", "LaplaceDisp2Prob", "(", "\n", "gtDisp", ",", "max_disp", "=", "max_disp", ",", "variance", "=", "variance", ",", "\n", "start_disp", "=", "start_disp", ",", "dilation", "=", "dilation", ",", "disp_sample", "=", "disp_sample", "\n", ")", ".", "getProb", "(", ")", "\n", "\n", "idx", "=", "0", "\n", "for", "i", "in", "range", "(", "start_disp", ",", "max_disp", "+", "start_disp", ",", "dilation", ")", ":", "\n", "            ", "print", "(", "'Disparity {}:\\n {}'", ".", "format", "(", "i", ",", "prob_volume", "[", ":", ",", "idx", ",", "]", ")", ")", "\n", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.test_disp2prob.testLosses.testCase2Laplace": [[44, 70], ["torch.Tensor().repeat().permute().contiguous", "torch.Tensor().repeat().permute().contiguous", "torch.Tensor().repeat().permute().contiguous", "torch.Tensor().repeat().permute().contiguous", "gtDisp.to.to.to", "print", "print", "print", "print", "print", "dmb.modeling.stereo.losses.utils.disp2prob.LaplaceDisp2Prob().getProb", "range", "print", "torch.Tensor().repeat().permute", "torch.Tensor().repeat().permute", "torch.Tensor().repeat().permute", "torch.Tensor().repeat().permute", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "dmb.modeling.stereo.losses.utils.disp2prob.LaplaceDisp2Prob", "torch.Tensor().repeat", "torch.Tensor().repeat", "torch.Tensor().repeat", "torch.Tensor().repeat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.OneHotDisp2Prob.getProb"], ["", "", "def", "testCase2Laplace", "(", "self", ")", ":", "\n", "        ", "max_disp", "=", "5", "\n", "start_disp", "=", "-", "2", "\n", "variance", "=", "2", "\n", "h", ",", "w", "=", "3", ",", "4", "\n", "disp_sample", "=", "torch", ".", "Tensor", "(", "[", "-", "2", ",", "0", ",", "2", "]", ")", ".", "repeat", "(", "1", ",", "h", ",", "w", ",", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "\n", "gtDisp", "=", "torch", ".", "rand", "(", "1", ",", "1", ",", "h", ",", "w", ")", "*", "max_disp", "+", "start_disp", "\n", "\n", "gtDisp", "=", "gtDisp", ".", "to", "(", "self", ".", "device", ")", "\n", "gtDisp", ".", "requires_grad", "=", "True", "\n", "print", "(", "'*'", "*", "60", ")", "\n", "print", "(", "'Ground Truth Disparity:'", ")", "\n", "print", "(", "gtDisp", ")", "\n", "\n", "print", "(", "'*'", "*", "60", ")", "\n", "print", "(", "'Generated disparity probability volume:'", ")", "\n", "prob_volume", "=", "LaplaceDisp2Prob", "(", "\n", "gtDisp", ",", "max_disp", "=", "max_disp", ",", "start_disp", "=", "start_disp", ",", "variance", "=", "variance", ",", "disp_sample", "=", "disp_sample", "\n", ")", ".", "getProb", "(", ")", "\n", "\n", "idx", "=", "0", "\n", "for", "i", "in", "range", "(", "disp_sample", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "print", "(", "'Disparity {}:\\n {}'", ".", "format", "(", "i", ",", "prob_volume", "[", ":", ",", "idx", ",", "]", ")", ")", "\n", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.decorators.auto_fp16": [[9, 77], ["functools.wraps", "inspect.getfullargspec", "old_func", "isinstance", "TypeError", "old_func", "enumerate", "kwargs.items", "utils.cast_tensor_type", "hasattr", "len", "new_args.append", "new_args.append", "utils.cast_tensor_type", "utils.cast_tensor_type"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.utils.cast_tensor_type"], ["def", "auto_fp16", "(", "apply_to", "=", "None", ",", "out_fp32", "=", "False", ")", ":", "\n", "    ", "\"\"\"Decorator to enable fp16 training automatically.\n    This decorator is useful when you write custom modules and want to support\n    mixed precision training. If inputs arguments are fp32 tensors, they will\n    be converted to fp16 automatically. Arguments other than fp32 tensors are\n    ignored.\n    Args:\n        apply_to (Iterable, optional): The argument names to be converted.\n            `None` indicates all arguments.\n        out_fp32 (bool): Whether to convert the output back to fp32.\n    :Example:\n        class MyModule1(nn.Module)\n            # Convert x and y to fp16\n            @auto_fp16()\n            def forward(self, x, y):\n                pass\n        class MyModule2(nn.Module):\n            # convert pred to fp16\n            @auto_fp16(apply_to=('pred', ))\n            def do_something(self, pred, others):\n                pass\n    \"\"\"", "\n", "\n", "def", "auto_fp16_wrapper", "(", "old_func", ")", ":", "\n", "\n", "        ", "@", "functools", ".", "wraps", "(", "old_func", ")", "\n", "def", "new_func", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# check if the module has set the attribute `fp16_enabled`, if not,", "\n", "# just fallback to the original method.", "\n", "            ", "if", "not", "isinstance", "(", "args", "[", "0", "]", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "                ", "raise", "TypeError", "(", "'@auto_fp16 can only be used to decorate the '", "\n", "'method of nn.Module'", ")", "\n", "", "if", "not", "(", "hasattr", "(", "args", "[", "0", "]", ",", "'fp16_enabled'", ")", "and", "args", "[", "0", "]", ".", "fp16_enabled", ")", ":", "\n", "                ", "return", "old_func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# get the arg spec of the decorated method", "\n", "", "args_info", "=", "getfullargspec", "(", "old_func", ")", "\n", "# get the argument names to be casted", "\n", "args_to_cast", "=", "args_info", ".", "args", "if", "apply_to", "is", "None", "else", "apply_to", "\n", "# convert the args that need to be processed", "\n", "new_args", "=", "[", "]", "\n", "# NOTE: default args are not taken into consideration", "\n", "if", "args", ":", "\n", "                ", "arg_names", "=", "args_info", ".", "args", "[", ":", "len", "(", "args", ")", "]", "\n", "for", "i", ",", "arg_name", "in", "enumerate", "(", "arg_names", ")", ":", "\n", "                    ", "if", "arg_name", "in", "args_to_cast", ":", "\n", "                        ", "new_args", ".", "append", "(", "\n", "cast_tensor_type", "(", "args", "[", "i", "]", ",", "torch", ".", "float", ",", "torch", ".", "half", ")", ")", "\n", "", "else", ":", "\n", "                        ", "new_args", ".", "append", "(", "args", "[", "i", "]", ")", "\n", "# convert the kwargs that need to be processed", "\n", "", "", "", "new_kwargs", "=", "{", "}", "\n", "if", "kwargs", ":", "\n", "                ", "for", "arg_name", ",", "arg_value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                    ", "if", "arg_name", "in", "args_to_cast", ":", "\n", "                        ", "new_kwargs", "[", "arg_name", "]", "=", "cast_tensor_type", "(", "\n", "arg_value", ",", "torch", ".", "float", ",", "torch", ".", "half", ")", "\n", "", "else", ":", "\n", "                        ", "new_kwargs", "[", "arg_name", "]", "=", "arg_value", "\n", "# apply converted arguments to the decorated method", "\n", "", "", "", "output", "=", "old_func", "(", "*", "new_args", ",", "**", "new_kwargs", ")", "\n", "# cast the results back to fp32 if necessary", "\n", "if", "out_fp32", ":", "\n", "                ", "output", "=", "cast_tensor_type", "(", "output", ",", "torch", ".", "half", ",", "torch", ".", "float", ")", "\n", "", "return", "output", "\n", "\n", "", "return", "new_func", "\n", "\n", "", "return", "auto_fp16_wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.decorators.force_fp32": [[79, 147], ["functools.wraps", "inspect.getfullargspec", "dict", "old_func", "isinstance", "TypeError", "old_func", "enumerate", "kwargs.items", "utils.cast_tensor_type", "hasattr", "len", "new_args.append", "new_args.append", "utils.cast_tensor_type", "utils.cast_tensor_type"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.utils.cast_tensor_type"], ["", "def", "force_fp32", "(", "apply_to", "=", "None", ",", "out_fp16", "=", "False", ")", ":", "\n", "    ", "\"\"\"Decorator to convert input arguments to fp32 in force.\n    This decorator is useful when you write custom modules and want to support\n    mixed precision training. If there are some inputs that must be processed\n    in fp32 mode, then this decorator can handle it. If inputs arguments are\n    fp16 tensors, they will be converted to fp32 automatically. Arguments other\n    than fp16 tensors are ignored.\n    Args:\n        apply_to (Iterable, optional): The argument names to be converted.\n            `None` indicates all arguments.\n        out_fp16 (bool): Whether to convert the output back to fp16.\n    :Example:\n        class MyModule1(nn.Module)\n            # Convert x and y to fp32\n            @force_fp32()\n            def loss(self, x, y):\n                pass\n        class MyModule2(nn.Module):\n            # convert pred to fp32\n            @force_fp32(apply_to=('pred', ))\n            def post_process(self, pred, others):\n                pass\n    \"\"\"", "\n", "\n", "def", "force_fp32_wrapper", "(", "old_func", ")", ":", "\n", "\n", "        ", "@", "functools", ".", "wraps", "(", "old_func", ")", "\n", "def", "new_func", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# check if the module has set the attribute `fp16_enabled`, if not,", "\n", "# just fallback to the original method.", "\n", "            ", "if", "not", "isinstance", "(", "args", "[", "0", "]", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "                ", "raise", "TypeError", "(", "'@force_fp32 can only be used to decorate the '", "\n", "'method of nn.Module'", ")", "\n", "", "if", "not", "(", "hasattr", "(", "args", "[", "0", "]", ",", "'fp16_enabled'", ")", "and", "args", "[", "0", "]", ".", "fp16_enabled", ")", ":", "\n", "                ", "return", "old_func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# get the arg spec of the decorated method", "\n", "", "args_info", "=", "getfullargspec", "(", "old_func", ")", "\n", "# get the argument names to be casted", "\n", "args_to_cast", "=", "args_info", ".", "args", "if", "apply_to", "is", "None", "else", "apply_to", "\n", "# convert the args that need to be processed", "\n", "new_args", "=", "[", "]", "\n", "if", "args", ":", "\n", "                ", "arg_names", "=", "args_info", ".", "args", "[", ":", "len", "(", "args", ")", "]", "\n", "for", "i", ",", "arg_name", "in", "enumerate", "(", "arg_names", ")", ":", "\n", "                    ", "if", "arg_name", "in", "args_to_cast", ":", "\n", "                        ", "new_args", ".", "append", "(", "\n", "cast_tensor_type", "(", "args", "[", "i", "]", ",", "torch", ".", "half", ",", "torch", ".", "float", ")", ")", "\n", "", "else", ":", "\n", "                        ", "new_args", ".", "append", "(", "args", "[", "i", "]", ")", "\n", "# convert the kwargs that need to be processed", "\n", "", "", "", "new_kwargs", "=", "dict", "(", ")", "\n", "if", "kwargs", ":", "\n", "                ", "for", "arg_name", ",", "arg_value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                    ", "if", "arg_name", "in", "args_to_cast", ":", "\n", "                        ", "new_kwargs", "[", "arg_name", "]", "=", "cast_tensor_type", "(", "\n", "arg_value", ",", "torch", ".", "half", ",", "torch", ".", "float", ")", "\n", "", "else", ":", "\n", "                        ", "new_kwargs", "[", "arg_name", "]", "=", "arg_value", "\n", "# apply converted arguments to the decorated method", "\n", "", "", "", "output", "=", "old_func", "(", "*", "new_args", ",", "**", "new_kwargs", ")", "\n", "# cast the results back to fp32 if necessary", "\n", "if", "out_fp16", ":", "\n", "                ", "output", "=", "cast_tensor_type", "(", "output", ",", "torch", ".", "float", ",", "torch", ".", "half", ")", "\n", "", "return", "output", "\n", "\n", "", "return", "new_func", "\n", "\n", "", "return", "force_fp32_wrapper", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.hooks.Fp16OptimizerHook.__init__": [[23, 34], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "grad_clip", "=", "None", ",", "\n", "coalesce", "=", "True", ",", "\n", "bucket_size_mb", "=", "-", "1", ",", "\n", "loss_scale", "=", "512.", ",", "\n", "distributed", "=", "True", ")", ":", "\n", "        ", "self", ".", "grad_clip", "=", "grad_clip", "\n", "self", ".", "coalesce", "=", "coalesce", "\n", "self", ".", "bucket_size_mb", "=", "bucket_size_mb", "\n", "self", ".", "loss_scale", "=", "loss_scale", "\n", "self", ".", "distributed", "=", "distributed", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.hooks.Fp16OptimizerHook.before_run": [[35, 41], ["copy.deepcopy", "hooks.wrap_fp16_model"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.hooks.wrap_fp16_model"], ["", "def", "before_run", "(", "self", ",", "runner", ")", ":", "\n", "# keep a copy of fp32 weights", "\n", "        ", "runner", ".", "optimizer", ".", "param_groups", "=", "copy", ".", "deepcopy", "(", "\n", "runner", ".", "optimizer", ".", "param_groups", ")", "\n", "# convert model to fp16", "\n", "wrap_fp16_model", "(", "runner", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.hooks.Fp16OptimizerHook.copy_grads_to_fp32": [[42, 49], ["zip", "fp16_net.parameters", "fp32_param.grad.copy_", "fp32_param.data.new", "fp32_param.size"], "methods", ["None"], ["", "def", "copy_grads_to_fp32", "(", "self", ",", "fp16_net", ",", "fp32_weights", ")", ":", "\n", "        ", "\"\"\"Copy gradients from fp16 model to fp32 weight copy.\"\"\"", "\n", "for", "fp32_param", ",", "fp16_param", "in", "zip", "(", "fp32_weights", ",", "fp16_net", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "fp16_param", ".", "grad", "is", "not", "None", ":", "\n", "                ", "if", "fp32_param", ".", "grad", "is", "None", ":", "\n", "                    ", "fp32_param", ".", "grad", "=", "fp32_param", ".", "data", ".", "new", "(", "fp32_param", ".", "size", "(", ")", ")", "\n", "", "fp32_param", ".", "grad", ".", "copy_", "(", "fp16_param", ".", "grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.hooks.Fp16OptimizerHook.copy_params_to_fp16": [[50, 54], ["zip", "fp16_net.parameters", "fp16_param.data.copy_"], "methods", ["None"], ["", "", "", "def", "copy_params_to_fp16", "(", "self", ",", "fp16_net", ",", "fp32_weights", ")", ":", "\n", "        ", "\"\"\"Copy updated params from fp32 weight copy to fp16 model.\"\"\"", "\n", "for", "fp16_param", ",", "fp32_param", "in", "zip", "(", "fp16_net", ".", "parameters", "(", ")", ",", "fp32_weights", ")", ":", "\n", "            ", "fp16_param", ".", "data", ".", "copy_", "(", "fp32_param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.hooks.Fp16OptimizerHook.after_train_iter": [[55, 80], ["runner.model.zero_grad", "runner.optimizer.zero_grad", "scaled_loss.backward", "hooks.Fp16OptimizerHook.copy_grads_to_fp32", "runner.optimizer.step", "hooks.Fp16OptimizerHook.copy_params_to_fp16", "utils.dist_utils.all_reduce_grads", "hooks.Fp16OptimizerHook.clip_grads", "param.grad.div_"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.functions.gaterecurrent2dnoind.GateRecurrent2dnoindFunction.backward", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.hooks.Fp16OptimizerHook.copy_grads_to_fp32", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.hooks.Fp16OptimizerHook.copy_params_to_fp16", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.dist_utils.all_reduce_grads"], ["", "", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "# clear grads of last iteration", "\n", "        ", "runner", ".", "model", ".", "zero_grad", "(", ")", "\n", "runner", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "# scale the loss value", "\n", "scaled_loss", "=", "runner", ".", "outputs", "[", "'loss'", "]", "*", "self", ".", "loss_scale", "\n", "scaled_loss", ".", "backward", "(", ")", "\n", "# copy fp16 grads in the model to fp32 params in the optimizer", "\n", "fp32_weights", "=", "[", "]", "\n", "for", "param_group", "in", "runner", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "fp32_weights", "+=", "param_group", "[", "'params'", "]", "\n", "", "self", ".", "copy_grads_to_fp32", "(", "runner", ".", "model", ",", "fp32_weights", ")", "\n", "# allreduce grads", "\n", "if", "self", ".", "distributed", ":", "\n", "            ", "all_reduce_grads", "(", "fp32_weights", ",", "self", ".", "coalesce", ",", "self", ".", "bucket_size_mb", ")", "\n", "# scale the gradients back", "\n", "", "for", "param", "in", "fp32_weights", ":", "\n", "            ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "                ", "param", ".", "grad", ".", "div_", "(", "self", ".", "loss_scale", ")", "\n", "", "", "if", "self", ".", "grad_clip", "is", "not", "None", ":", "\n", "            ", "self", ".", "clip_grads", "(", "fp32_weights", ")", "\n", "# update fp32 params", "\n", "", "runner", ".", "optimizer", ".", "step", "(", ")", "\n", "# copy fp32 params to the fp16 model", "\n", "self", ".", "copy_params_to_fp16", "(", "runner", ".", "model", ",", "fp32_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.hooks.wrap_fp16_model": [[82, 91], ["model.half", "hooks.patch_norm_fp32", "model.modules", "hasattr"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.hooks.patch_norm_fp32"], ["", "", "def", "wrap_fp16_model", "(", "model", ")", ":", "\n", "# convert model to fp16", "\n", "    ", "model", ".", "half", "(", ")", "\n", "# patch the normalization layers to make it work in fp32 mode", "\n", "patch_norm_fp32", "(", "model", ")", "\n", "# set `fp16_enabled` flag", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "'fp16_enabled'", ")", ":", "\n", "            ", "m", ".", "fp16_enabled", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.hooks.patch_norm_fp32": [[93, 101], ["isinstance", "module.children", "module.float", "hooks.patch_forward_method", "hooks.patch_norm_fp32"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.hooks.patch_forward_method", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.hooks.patch_norm_fp32"], ["", "", "", "def", "patch_norm_fp32", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "        ", "module", ".", "float", "(", ")", "\n", "module", ".", "forward", "=", "patch_forward_method", "(", "module", ".", "forward", ",", "torch", ".", "half", ",", "\n", "torch", ".", "float", ")", "\n", "", "for", "child", "in", "module", ".", "children", "(", ")", ":", "\n", "        ", "patch_norm_fp32", "(", "child", ")", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.hooks.patch_forward_method": [[103, 122], ["func", "utils.cast_tensor_type", "utils.cast_tensor_type", "utils.cast_tensor_type", "torch.half", "torch.half", "torch.float", "torch.float"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.utils.cast_tensor_type"], ["", "def", "patch_forward_method", "(", "func", ",", "src_type", ",", "dst_type", ",", "convert_output", "=", "True", ")", ":", "\n", "    ", "\"\"\"Patch the forward method of a module.\n    Args:\n        func (callable): The original forward method.\n        src_type (torch.dtype): Type of input arguments to be converted from.\n        dst_type (torch.dtype): Type of input arguments to be converted to.\n        convert_output (bool): Whether to convert the output back to src_type.\n    Returns:\n        callable: The patched forward method.\n    \"\"\"", "\n", "\n", "def", "new_forward", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "output", "=", "func", "(", "*", "cast_tensor_type", "(", "args", ",", "src_type", ",", "dst_type", ")", ",", "\n", "**", "cast_tensor_type", "(", "kwargs", ",", "src_type", ",", "dst_type", ")", ")", "\n", "if", "convert_output", ":", "\n", "            ", "output", "=", "cast_tensor_type", "(", "output", ",", "dst_type", ",", "src_type", ")", "\n", "", "return", "output", "\n", "\n", "", "return", "new_forward", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.utils.cast_tensor_type": [[7, 24], ["isinstance", "inputs.to", "isinstance", "isinstance", "isinstance", "isinstance", "type", "utils.cast_tensor_type", "type", "inputs.items", "utils.cast_tensor_type"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.fp16.utils.cast_tensor_type"], ["def", "cast_tensor_type", "(", "inputs", ",", "src_type", ",", "dst_type", ")", ":", "\n", "    ", "if", "isinstance", "(", "inputs", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "inputs", ".", "to", "(", "dst_type", ")", "\n", "", "elif", "isinstance", "(", "inputs", ",", "str", ")", ":", "\n", "        ", "return", "inputs", "\n", "", "elif", "isinstance", "(", "inputs", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "inputs", "\n", "", "elif", "isinstance", "(", "inputs", ",", "abc", ".", "Mapping", ")", ":", "\n", "        ", "return", "type", "(", "inputs", ")", "(", "{", "\n", "k", ":", "cast_tensor_type", "(", "v", ",", "src_type", ",", "dst_type", ")", "\n", "for", "k", ",", "v", "in", "inputs", ".", "items", "(", ")", "\n", "}", ")", "\n", "", "elif", "isinstance", "(", "inputs", ",", "abc", ".", "Iterable", ")", ":", "\n", "        ", "return", "type", "(", "inputs", ")", "(", "\n", "cast_tensor_type", "(", "item", ",", "src_type", ",", "dst_type", ")", "for", "item", "in", "inputs", ")", "\n", "", "else", ":", "\n", "        ", "return", "inputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.visualization.__init__.SaveResultTool": [[4, 11], ["stereo.SaveResultTool", "flow.SaveResultTool"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.visualization.__init__.SaveResultTool", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.visualization.__init__.SaveResultTool"], []], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.visualization.__init__.ShowResultTool": [[16, 23], ["stereo.ShowResultTool", "flow.ShowResultTool"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.visualization.__init__.ShowResultTool", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.visualization.__init__.ShowResultTool"], []], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.save_result.SaveResultTool.__call__": [[13, 38], ["dmb.visualization.stereo.show_result.ShowResultTool", "dmb.visualization.stereo.show_result.ShowResultTool.", "dmb.visualization.stereo.show_result.ShowResultTool.keys", "os.join", "os.join", "mmcv.mkdir_or_exist", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "dmb.visualization.stereo.show_result.ShowResultTool.keys", "os.join", "os.join", "mmcv.mkdir_or_exist", "matplotlib.imsave", "dmb.visualization.stereo.show_result.ShowResultTool.keys", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "mmcv.mkdir_or_exist", "matplotlib.imsave", "dmb.visualization.stereo.show_result.ShowResultTool.keys", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "mmcv.mkdir_or_exist", "matplotlib.imsave", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.visualization.__init__.ShowResultTool"], ["    ", "def", "__call__", "(", "self", ",", "result", ",", "out_dir", ",", "image_name", ")", ":", "\n", "        ", "result_tool", "=", "ShowResultTool", "(", ")", "\n", "result", "=", "result_tool", "(", "result", ",", "color_map", "=", "'gray'", ",", "bins", "=", "100", ")", "\n", "\n", "if", "'GrayDisparity'", "in", "result", ".", "keys", "(", ")", ":", "\n", "            ", "grayEstDisp", "=", "result", "[", "'GrayDisparity'", "]", "\n", "gray_save_path", "=", "osp", ".", "join", "(", "out_dir", ",", "'disp_0'", ")", "\n", "mkdir_or_exist", "(", "gray_save_path", ")", "\n", "skimage", ".", "io", ".", "imsave", "(", "osp", ".", "join", "(", "gray_save_path", ",", "image_name", ")", ",", "(", "grayEstDisp", "*", "256", ")", ".", "astype", "(", "'uint16'", ")", ")", "\n", "\n", "", "if", "'ColorDisparity'", "in", "result", ".", "keys", "(", ")", ":", "\n", "            ", "colorEstDisp", "=", "result", "[", "'ColorDisparity'", "]", "\n", "color_save_path", "=", "osp", ".", "join", "(", "out_dir", ",", "'color_disp'", ")", "\n", "mkdir_or_exist", "(", "color_save_path", ")", "\n", "plt", ".", "imsave", "(", "osp", ".", "join", "(", "color_save_path", ",", "image_name", ")", ",", "colorEstDisp", ",", "cmap", "=", "plt", ".", "cm", ".", "hot", ")", "\n", "\n", "", "if", "'GroupColor'", "in", "result", ".", "keys", "(", ")", ":", "\n", "            ", "group_save_path", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'group_disp'", ")", "\n", "mkdir_or_exist", "(", "group_save_path", ")", "\n", "plt", ".", "imsave", "(", "osp", ".", "join", "(", "group_save_path", ",", "image_name", ")", ",", "result", "[", "'GroupColor'", "]", ",", "cmap", "=", "plt", ".", "cm", ".", "hot", ")", "\n", "\n", "", "if", "'ColorConfidence'", "in", "result", ".", "keys", "(", ")", ":", "\n", "            ", "conf_save_path", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'confidence'", ")", "\n", "mkdir_or_exist", "(", "conf_save_path", ")", "\n", "plt", ".", "imsave", "(", "osp", ".", "join", "(", "conf_save_path", ",", "image_name", ")", ",", "result", "[", "'ColorConfidence'", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowDisp.__call__": [[36, 59], ["show_result.ShowDisp.getItem", "show_result.ShowDisp.getFirstItem", "show_result.ShowDisp.vis_group_color", "show_result.ShowDisp.vis_per_disp", "process_result.update", "process_result.update", "show_result.ShowDisp.vis_per_disp", "process_result.update", "show_result.ShowDisp.get_gray_and_color_disp", "process_result.update", "process_result.update"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowFlow.getItem", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowFlow.getFirstItem", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowFlow.vis_group_color", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowDisp.vis_per_disp", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowDisp.vis_per_disp", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowDisp.get_gray_and_color_disp"], ["def", "__call__", "(", "self", ",", "result", ")", ":", "\n", "\n", "        ", "self", ".", "result", "=", "result", "\n", "self", ".", "getItem", "(", ")", "\n", "\n", "process_result", "=", "{", "}", "\n", "\n", "if", "self", ".", "estDisp", "is", "not", "None", ":", "\n", "            ", "firstDisp", "=", "self", ".", "getFirstItem", "(", "self", ".", "estDisp", ")", "\n", "if", "firstDisp", "is", "not", "None", ":", "\n", "                ", "grayDisp", ",", "colorDisp", "=", "self", ".", "get_gray_and_color_disp", "(", "firstDisp", ",", "self", ".", "max_disp", ")", "\n", "process_result", ".", "update", "(", "GrayDisparity", "=", "grayDisp", ")", "\n", "process_result", ".", "update", "(", "ColorDisparity", "=", "colorDisp", ")", "\n", "", "group", "=", "self", ".", "vis_group_color", "(", "self", ".", "estDisp", "[", "0", "]", ",", "self", ".", "gtDisp", ",", "self", ".", "leftImage", ",", "self", ".", "rightImage", ")", "\n", "estDispColor", "=", "self", ".", "vis_per_disp", "(", "self", ".", "estDisp", ",", "self", ".", "max_disp", ")", "\n", "process_result", ".", "update", "(", "Disparity", "=", "estDispColor", ")", "\n", "process_result", ".", "update", "(", "GroupColor", "=", "group", ")", "\n", "\n", "", "if", "self", ".", "gtDisp", "is", "not", "None", ":", "\n", "            ", "gtDispColor", "=", "self", ".", "vis_per_disp", "(", "self", ".", "gtDisp", ",", "self", ".", "max_disp", ")", "\n", "process_result", ".", "update", "(", "GroundTruth", "=", "gtDispColor", ")", "\n", "\n", "", "return", "process_result", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowDisp.getItem": [[60, 86], ["isinstance", "show_result.ShowDisp.result[].detach().cpu().numpy().max", "show_result.ShowDisp.result.keys", "isinstance", "show_result.ShowDisp.result.keys", "show_result.ShowDisp.result.keys", "show_result.ShowDisp.result.keys", "show_result.ShowDisp.result[].detach().cpu().numpy", "show_result.ShowDisp.result[].detach().cpu", "show_result.ShowDisp.result[].detach"], "methods", ["None"], ["", "def", "getItem", "(", "self", ")", ":", "\n", "        ", "if", "\"GroundTruth\"", "in", "self", ".", "result", ".", "keys", "(", ")", "and", "self", ".", "result", "[", "'GroundTruth'", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "gtDisp", "=", "self", ".", "result", "[", "'GroundTruth'", "]", "\n", "assert", "isinstance", "(", "self", ".", "gtDisp", ",", "torch", ".", "Tensor", ")", "\n", "self", ".", "max_disp", "=", "self", ".", "result", "[", "'GroundTruth'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "max", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_disp", "=", "None", "\n", "self", ".", "gtDisp", "=", "None", "\n", "\n", "", "if", "'Disparity'", "in", "self", ".", "result", ".", "keys", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "result", "[", "'Disparity'", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "self", ".", "estDisp", "=", "self", ".", "result", "[", "'Disparity'", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "estDisp", "=", "[", "self", ".", "result", "[", "'Disparity'", "]", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "estDisp", "=", "None", "\n", "\n", "", "if", "'leftImage'", "in", "self", ".", "result", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "leftImage", "=", "self", ".", "result", "[", "'leftImage'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "leftImage", "=", "None", "\n", "", "if", "'rightImage'", "in", "self", ".", "result", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "rightImage", "=", "self", ".", "result", "[", "'rightImage'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "rightImage", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowDisp.getFirstItem": [[87, 96], ["isinstance", "isinstance", "isinstance", "item.keys"], "methods", ["None"], ["", "", "def", "getFirstItem", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "container_abcs", ".", "Sequence", ")", ":", "\n", "            ", "return", "item", "[", "0", "]", "\n", "", "if", "isinstance", "(", "item", ",", "container_abcs", ".", "Mapping", ")", ":", "\n", "            ", "for", "key", "in", "item", ".", "keys", "(", ")", ":", "\n", "                ", "return", "item", "[", "key", "]", "\n", "", "", "if", "isinstance", "(", "item", ",", "(", "np", ".", "ndarray", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "            ", "return", "item", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowDisp.vis_per_disp": [[98, 109], ["isinstance", "TypeError", "dmb.visualization.stereo.vis.tensor_to_color", "isinstance", "error_msg.format", "Disp.clone", "isinstance", "type", "show_result.ShowDisp.vis_per_disp", "show_result.ShowDisp.vis_per_disp"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.tensor_to_color", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowDisp.vis_per_disp", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowDisp.vis_per_disp"], ["", "def", "vis_per_disp", "(", "self", ",", "Disp", ",", "max_disp", ")", ":", "\n", "# change every disparity map to color map", "\n", "        ", "error_msg", "=", "\"Disparity must contain tensors, dicts or lists; found {}\"", "\n", "if", "isinstance", "(", "Disp", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "tensor_to_color", "(", "Disp", ".", "clone", "(", ")", ",", "max_disp", ")", "\n", "", "elif", "isinstance", "(", "Disp", ",", "container_abcs", ".", "Mapping", ")", ":", "\n", "            ", "return", "{", "key", ":", "self", ".", "vis_per_disp", "(", "Disp", "[", "key", "]", ",", "max_disp", ")", "for", "key", "in", "Disp", "}", "\n", "", "elif", "isinstance", "(", "Disp", ",", "container_abcs", ".", "Sequence", ")", ":", "\n", "            ", "return", "[", "self", ".", "vis_per_disp", "(", "samples", ",", "max_disp", ")", "for", "samples", "in", "Disp", "]", "\n", "\n", "", "raise", "TypeError", "(", "(", "error_msg", ".", "format", "(", "type", "(", "Disp", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowDisp.get_gray_and_color_disp": [[111, 127], ["isinstance", "torch.is_tensor", "Disp.clone().detach().cpu().numpy.clone().detach().cpu().numpy.copy", "colorDisp.clip.clip.clip", "Disp.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone().detach().cpu().numpy", "dmb.visualization.stereo.vis.disp_to_color", "Disp.clone().detach().cpu().numpy.clone().detach().cpu().numpy.copy", "Disp.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone().detach().cpu", "Disp.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone().detach", "Disp.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.vis.disp_to_color"], ["", "def", "get_gray_and_color_disp", "(", "self", ",", "Disp", ",", "max_disp", "=", "None", ")", ":", "\n", "        ", "assert", "isinstance", "(", "Disp", ",", "(", "np", ".", "ndarray", ",", "torch", ".", "Tensor", ")", ")", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "Disp", ")", ":", "\n", "            ", "Disp", "=", "Disp", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "Disp", ".", "ndim", "==", "3", ":", "\n", "            ", "Disp", "=", "Disp", "[", "0", ",", ":", ",", ":", "]", "\n", "", "elif", "Disp", ".", "ndim", "==", "4", ":", "\n", "            ", "Disp", "=", "Disp", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "", "grayDisp", "=", "Disp", ".", "copy", "(", ")", "\n", "colorDisp", "=", "disp_to_color", "(", "Disp", ".", "copy", "(", ")", ",", "max_disp", "=", "max_disp", ")", "/", "255.0", "\n", "colorDisp", "=", "colorDisp", ".", "clip", "(", "0.", ",", "1.", ")", "\n", "\n", "return", "grayDisp", ",", "colorDisp", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowDisp.vis_group_color": [[128, 159], ["isinstance", "torch.is_tensor", "dmb.visualization.stereo.vis.group_color", "estDisp.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone().detach().cpu().numpy", "isinstance", "torch.is_tensor", "gtDisp.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone().detach().cpu().numpy", "estDisp.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone().detach().cpu", "gtDisp.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone().detach().cpu", "estDisp.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone().detach", "gtDisp.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone().detach", "estDisp.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone", "gtDisp.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.group_color"], ["", "def", "vis_group_color", "(", "self", ",", "estDisp", ",", "gtDisp", "=", "None", ",", "leftImage", "=", "None", ",", "rightImage", "=", "None", ",", "save_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            estDisp, (tensor or numpy.array): in (1, 1, Height, Width) or (1, Height, Width) or (Height, Width) layout\n            gtDisp, (None or tensor or numpy.array): in (1, 1, Height, Width) or (1, Height, Width) or (Height, Width) layout\n            leftImage, (None or numpy.array), in (Height, Width, 3) layout\n            rightImage, (None or numpy.array), in (Height, Width, 3) layout\n            save_path, (None or String)\n        Output:\n            details refer to dmb.visualization.group_color\n        \"\"\"", "\n", "assert", "isinstance", "(", "estDisp", ",", "(", "np", ".", "ndarray", ",", "torch", ".", "Tensor", ")", ")", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "estDisp", ")", ":", "\n", "            ", "estDisp", "=", "estDisp", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "estDisp", ".", "ndim", "==", "3", ":", "\n", "            ", "estDisp", "=", "estDisp", "[", "0", ",", ":", ",", ":", "]", "\n", "", "elif", "estDisp", ".", "ndim", "==", "4", ":", "\n", "            ", "estDisp", "=", "estDisp", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "", "if", "gtDisp", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "gtDisp", ",", "(", "np", ".", "ndarray", ",", "torch", ".", "Tensor", ")", ")", "\n", "if", "torch", ".", "is_tensor", "(", "gtDisp", ")", ":", "\n", "                ", "gtDisp", "=", "gtDisp", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "gtDisp", ".", "ndim", "==", "3", ":", "\n", "                ", "gtDisp", "=", "gtDisp", "[", "0", ",", ":", ",", ":", "]", "\n", "", "elif", "gtDisp", ".", "ndim", "==", "4", ":", "\n", "                ", "gtDisp", "=", "gtDisp", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "", "", "return", "group_color", "(", "estDisp", ",", "gtDisp", ",", "leftImage", ",", "rightImage", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.__init__": [[174, 176], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.__call__": [[177, 194], ["show_result.ShowConf.getItem", "show_result.ShowConf.getFirstItem", "show_result.ShowConf.vis_per_conf", "show_result.ShowConf.vis_per_conf_hist", "process_result.update", "process_result.update", "show_result.ShowConf.conf2color", "process_result.update"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowFlow.getItem", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowFlow.getFirstItem", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.vis_per_conf", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.vis_per_conf_hist", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.conf2color"], ["", "def", "__call__", "(", "self", ",", "result", ",", "color_map", "=", "'gray'", ",", "bins", "=", "100", ")", ":", "\n", "        ", "self", ".", "result", "=", "result", "\n", "self", ".", "getItem", "(", ")", "\n", "\n", "process_result", "=", "{", "}", "\n", "\n", "if", "self", ".", "conf", "is", "not", "None", ":", "\n", "            ", "firstConf", "=", "self", ".", "getFirstItem", "(", "self", ".", "conf", ")", "\n", "if", "firstConf", "is", "not", "None", ":", "\n", "                ", "colorConf", "=", "self", ".", "conf2color", "(", "firstConf", ",", "color_map", "=", "color_map", ")", "\n", "process_result", ".", "update", "(", "ColorConfidence", "=", "colorConf", ")", "\n", "", "estConfColor", "=", "self", ".", "vis_per_conf", "(", "self", ".", "conf", ",", "color_map", "=", "color_map", ")", "\n", "estConfHist", "=", "self", ".", "vis_per_conf_hist", "(", "self", ".", "conf", ",", "bins", "=", "bins", ")", "\n", "process_result", ".", "update", "(", "Confidence", "=", "estConfColor", ")", "\n", "process_result", ".", "update", "(", "ConfidenceHistogram", "=", "estConfHist", ")", "\n", "\n", "", "return", "process_result", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.getItem": [[195, 200], ["None"], "methods", ["None"], ["", "def", "getItem", "(", "self", ")", ":", "\n", "        ", "if", "'Confidence'", "in", "self", ".", "result", ":", "\n", "            ", "self", ".", "conf", "=", "self", ".", "result", "[", "'Confidence'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "conf", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.getFirstItem": [[201, 210], ["isinstance", "isinstance", "isinstance", "item.keys"], "methods", ["None"], ["", "", "def", "getFirstItem", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "container_abcs", ".", "Sequence", ")", ":", "\n", "            ", "return", "item", "[", "0", "]", "\n", "", "if", "isinstance", "(", "item", ",", "container_abcs", ".", "Mapping", ")", ":", "\n", "            ", "for", "key", "in", "item", ".", "keys", "(", ")", ":", "\n", "                ", "return", "item", "[", "key", "]", "\n", "", "", "if", "isinstance", "(", "item", ",", "(", "np", ".", "ndarray", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "            ", "return", "item", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.conf_to_color": [[211, 215], ["isinstance", "matplotlib.get_cmap", "matplotlib.get_cmap."], "methods", ["None"], ["", "def", "conf_to_color", "(", "self", ",", "conf", ",", "color_map", "=", "'gray'", ")", ":", "\n", "        ", "assert", "isinstance", "(", "conf", ",", "np", ".", "ndarray", ")", "\n", "cmap", "=", "plt", ".", "get_cmap", "(", "color_map", ")", "\n", "return", "cmap", "(", "conf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.conf2color": [[217, 232], ["isinstance", "len", "show_result.ShowConf.conf_to_color", "Conf.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone().detach().cpu().numpy", "Conf.clone().detach().cpu().numpy.clone().detach().cpu().numpy.min", "Conf.clone().detach().cpu().numpy.clone().detach().cpu().numpy.max", "Conf.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone().detach().cpu", "Conf.clone().detach().cpu().numpy.clone().detach().cpu().numpy.max", "Conf.clone().detach().cpu().numpy.clone().detach().cpu().numpy.min", "Conf.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone().detach", "Conf.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.conf_to_color"], ["", "def", "conf2color", "(", "self", ",", "Conf", ",", "color_map", ")", ":", "\n", "        ", "if", "isinstance", "(", "Conf", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "Conf", "=", "Conf", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "length", "=", "len", "(", "Conf", ".", "shape", ")", "\n", "assert", "length", ">=", "2", "\n", "if", "length", "==", "4", ":", "\n", "            ", "Conf", "=", "Conf", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "", "elif", "length", "==", "3", ":", "\n", "            ", "Conf", "=", "Conf", "[", "0", ",", ":", ",", ":", "]", "\n", "\n", "", "if", "Conf", ".", "min", "(", ")", "<", "0.0", "or", "Conf", ".", "max", "(", ")", ">", "1.0", ":", "\n", "            ", "Conf", "=", "Conf", "/", "(", "Conf", ".", "max", "(", ")", "-", "Conf", ".", "min", "(", ")", ")", "\n", "\n", "", "conf_color", "=", "self", ".", "conf_to_color", "(", "Conf", ",", "color_map", ")", "\n", "return", "conf_color", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.vis_per_conf": [[234, 246], ["isinstance", "TypeError", "show_result.ShowConf.conf2color().transpose", "isinstance", "error_msg.format", "show_result.ShowConf.conf2color().transpose", "isinstance", "type", "show_result.ShowConf.conf2color", "isinstance", "Conf.clone().detach().cpu().numpy", "show_result.ShowConf.conf2color", "show_result.ShowConf.vis_per_conf", "Conf.copy", "show_result.ShowConf.vis_per_conf", "Conf.clone().detach().cpu", "Conf.clone().detach", "Conf.clone"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.conf2color", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.conf2color", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.vis_per_conf", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.vis_per_conf"], ["", "def", "vis_per_conf", "(", "self", ",", "Conf", ",", "color_map", "=", "'gray'", ")", ":", "\n", "        ", "error_msg", "=", "\"Confidence must contain torch.Tensors or numpy.ndarray, dicts or lists; found {}\"", "\n", "if", "isinstance", "(", "Conf", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "self", ".", "conf2color", "(", "Conf", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "color_map", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "elif", "isinstance", "(", "Conf", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "self", ".", "conf2color", "(", "Conf", ".", "copy", "(", ")", ",", "color_map", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "elif", "isinstance", "(", "Conf", ",", "container_abcs", ".", "Mapping", ")", ":", "\n", "            ", "return", "{", "key", ":", "self", ".", "vis_per_conf", "(", "Conf", "[", "key", "]", ")", "for", "key", "in", "Conf", "}", "\n", "", "elif", "isinstance", "(", "Conf", ",", "container_abcs", ".", "Sequence", ")", ":", "\n", "            ", "return", "[", "self", ".", "vis_per_conf", "(", "samples", ")", "for", "samples", "in", "Conf", "]", "\n", "\n", "", "raise", "TypeError", "(", "(", "error_msg", ".", "format", "(", "type", "(", "Conf", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.conf2hist": [[247, 266], ["isinstance", "len", "numpy.histogram", "array.copy.copy.clone().detach().cpu().numpy", "isinstance", "array.copy.copy.copy", "TypeError", "array.copy.copy.clone().detach().cpu", "error_msg.format", "type", "array.copy.copy.clone().detach", "array.copy.copy.clone"], "methods", ["None"], ["", "def", "conf2hist", "(", "self", ",", "array", ",", "bins", "=", "100", ")", ":", "\n", "        ", "error_msg", "=", "\"Confidence must contain torch.Tensors or numpy.ndarray; found {}\"", "\n", "if", "isinstance", "(", "array", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "array", "=", "array", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "isinstance", "(", "array", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "array", "=", "array", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "(", "error_msg", ".", "format", "(", "type", "(", "array", ")", ")", ")", ")", "\n", "\n", "", "length", "=", "len", "(", "array", ".", "shape", ")", "\n", "assert", "length", ">=", "2", "\n", "if", "length", "==", "4", ":", "\n", "            ", "array", "=", "array", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "", "elif", "length", "==", "3", ":", "\n", "            ", "array", "=", "array", "[", "0", ",", ":", ",", ":", "]", "\n", "\n", "# for interval [bin_edges[i], bin_edges[i+1]], it has counts[i] numbers.", "\n", "", "counts", ",", "bin_edges", "=", "np", ".", "histogram", "(", "array", ",", "bins", "=", "bins", ")", "\n", "return", "counts", ",", "bin_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.hist2vis": [[268, 280], ["matplotlib.figure", "matplotlib.hist", "matplotlib.xlabel", "matplotlib.ylabel", "sum"], "methods", ["None"], ["", "def", "hist2vis", "(", "self", ",", "counts", ",", "bin_edges", ",", "color", "=", "(", "'blue'", ")", ",", "histtype", "=", "'bar'", ",", "cumulative", "=", "False", ")", ":", "\n", "        ", "counts", "=", "counts", "/", "sum", "(", "counts", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "# for each value in bin_edges, the statistic value is 1, weight by counts, result in percentage", "\n", "plt", ".", "hist", "(", "\n", "bin_edges", "[", ":", "-", "1", "]", ",", "bin_edges", ",", "weights", "=", "counts", ",", "color", "=", "color", ",", "histtype", "=", "histtype", ",", "\n", "range", "=", "None", ",", "density", "=", "None", ",", "cumulative", "=", "cumulative", ",", "log", "=", "False", ",", "label", "=", "None", "\n", ")", "\n", "plt", ".", "xlabel", "(", "'Confidence Value'", ")", "\n", "plt", ".", "ylabel", "(", "'Probability'", ")", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.vis_per_conf_hist": [[281, 296], ["isinstance", "TypeError", "show_result.ShowConf.conf2hist", "show_result.ShowConf.hist2vis", "show_result.ShowConf.vis_per_conf_hist.conf2hist2vis"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.conf2hist", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.hist2vis"], ["", "def", "vis_per_conf_hist", "(", "self", ",", "Conf", ",", "bins", "=", "100", ",", ")", ":", "\n", "        ", "def", "conf2hist2vis", "(", "array", ",", "bins", ")", ":", "\n", "            ", "counts", ",", "bin_edges", "=", "self", ".", "conf2hist", "(", "array", ",", "bins", ")", "\n", "fig", "=", "self", ".", "hist2vis", "(", "counts", ",", "bin_edges", ")", "\n", "return", "fig", "\n", "\n", "", "error_msg", "=", "\"Confidence must contain torch.Tensors or numpy.ndarray, dicts or lists; found {}\"", "\n", "if", "isinstance", "(", "Conf", ",", "(", "torch", ".", "Tensor", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "            ", "return", "conf2hist2vis", "(", "Conf", ",", "bins", ")", "\n", "", "elif", "isinstance", "(", "Conf", ",", "container_abcs", ".", "Mapping", ")", ":", "\n", "            ", "return", "{", "key", ":", "self", ".", "vis_per_conf_hist", "(", "Conf", "[", "key", "]", ")", "for", "key", "in", "Conf", "}", "\n", "", "elif", "isinstance", "(", "Conf", ",", "container_abcs", ".", "Sequence", ")", ":", "\n", "            ", "return", "[", "self", ".", "vis_per_conf_hist", "(", "samples", ")", "for", "samples", "in", "Conf", "]", "\n", "\n", "", "raise", "TypeError", "(", "(", "error_msg", ".", "format", "(", "type", "(", "Conf", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowResultTool.__init__": [[299, 302], ["show_result.ShowDisp", "show_result.ShowConf"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "show_disp_tool", "=", "ShowDisp", "(", ")", "\n", "self", ".", "show_conf_tool", "=", "ShowConf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowResultTool.__call__": [[303, 308], ["process_result.update", "process_result.update", "show_result.ShowResultTool.show_disp_tool", "show_result.ShowResultTool.show_conf_tool"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "result", ",", "color_map", "=", "'gray'", ",", "bins", "=", "100", ")", ":", "\n", "        ", "process_result", "=", "{", "}", "\n", "process_result", ".", "update", "(", "self", ".", "show_disp_tool", "(", "result", ")", ")", "\n", "process_result", ".", "update", "(", "self", ".", "show_conf_tool", "(", "result", ",", "color_map", "=", "color_map", ",", "bins", "=", "bins", ")", ")", "\n", "return", "process_result", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.sparsification_plot.mask_to_neg": [[8, 12], ["None"], "function", ["None"], ["def", "mask_to_neg", "(", "x", ",", "mask", ")", ":", "\n", "# if mask=1, keep x, if mask=0, convert x to -1", "\n", "    ", "x", "=", "x", "*", "mask", "+", "(", "mask", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.sparsification_plot.norm": [[14, 19], ["x.max", "x.min"], "function", ["None"], ["", "def", "norm", "(", "x", ")", ":", "\n", "    ", "x", "=", "x", "/", "(", "x", ".", "max", "(", ")", "-", "x", ".", "min", "(", ")", ")", "\n", "# scale x to [0.05, 0.9] for counting convenient, it doesn't influence the final result", "\n", "x", "=", "x", "*", "0.9", "+", "0.05", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.sparsification_plot.sparsification_plot": [[21, 137], ["range", "any", "any", "est_disp.clone().cpu.clone().cpu", "gt_disp.clone().cpu.clone().cpu", "mask_to_neg.clone().cpu", "torch.ones", "mask.float.detach_", "mask.float.sum", "mask.float.float", "torch.abs", "sparsification_plot.norm", "torch.rand_like", "sparsification_plot.norm", "sparsification_plot.mask_to_neg", "sparsification_plot.mask_to_neg", "sparsification_plot.mask_to_neg", "mask_to_neg.view().sort", "mask_to_neg.view().sort", "mask_to_neg.view().sort", "range", "isinstance", "type", "percentages.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "isinstance", "warnings.warn", "isinstance", "warnings.warn", "isinstance", "warnings.warn", "warnings.warn", "warnings.warn", "warnings.warn", "sparsification_plot.norm", "conf_edges.append", "error_edges.append", "rand_edges.append", "err_msg.format", "err_msg.format", "err_msg.format", "est_disp.clone().cpu.clone", "gt_disp.clone().cpu.clone", "mask_to_neg.clone", "mask_to_neg.view", "mask_to_neg.view", "mask_to_neg.view", "range", "conf_mask.sum", "error_mask.sum", "rand_mask.sum", "type", "type", "type", "isinstance", "isinstance", "isinstance"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.sparsification_plot.norm", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.sparsification_plot.norm", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.sparsification_plot.mask_to_neg", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.sparsification_plot.mask_to_neg", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.sparsification_plot.mask_to_neg", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.sparsification_plot.norm"], ["", "def", "sparsification_plot", "(", "est_disp", "=", "None", ",", "gt_disp", "=", "None", ",", "est_conf", "=", "None", ",", "bins", "=", "10", ",", "lb", "=", "None", ",", "ub", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Refer to paper: Uncertainty estimates and multi-hypotheses networks for optical flow\n    Args:\n        est_disp (Tensor): in (..., Height, Width) layout\n        gt_disp (Tensor): in (..., Height, Width) layout\n        est_conf (Tensor): in (..., Height, Width) layout, we will normalize it to [0,1] for convenient\n        bins (int): divide the all pixel into $bins factions, ie each fraction is (100/bins)%\n        lb (scaler): the lower bound of disparity you want to mask out\n        ub (scaler): the upper bound of disparity you want to mask out\n    Output:\n        dict: the average error epe when pixels with the lowest confidence are removed gradually\n              ideally, the error should monotonically decrease\n    \"\"\"", "\n", "assert", "isinstance", "(", "bins", ",", "int", ")", "and", "(", "100", "%", "bins", "==", "0", ")", ",", "\"bins must be divided by 100, and should be int, but get {} is type {}\"", ".", "format", "(", "bins", ",", "type", "(", "bins", ")", ")", "\n", "error_dict", "=", "{", "}", "\n", "percentages", "=", "[", "]", "\n", "\n", "part", "=", "100", "//", "bins", "\n", "for", "i", "in", "range", "(", "bins", "+", "1", ")", ":", "\n", "        ", "percentages", ".", "append", "(", "part", "*", "i", ")", "\n", "error_dict", "[", "'est_{}'", ".", "format", "(", "part", "*", "i", ")", "]", "=", "torch", ".", "Tensor", "(", "[", "0.", "]", ")", "\n", "error_dict", "[", "'oracle_{}'", ".", "format", "(", "part", "*", "i", ")", "]", "=", "torch", ".", "Tensor", "(", "[", "0.", "]", ")", "\n", "error_dict", "[", "'random_{}'", ".", "format", "(", "part", "*", "i", ")", "]", "=", "torch", ".", "Tensor", "(", "[", "0.", "]", ")", "\n", "\n", "", "err_msg", "=", "'{} is supposed to be torch.Tensor; find {}'", "\n", "if", "not", "isinstance", "(", "est_disp", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "err_msg", ".", "format", "(", "'Estimated disparity map'", ",", "type", "(", "est_disp", ")", ")", ")", "\n", "", "if", "not", "isinstance", "(", "gt_disp", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "err_msg", ".", "format", "(", "'Ground truth disparity map'", ",", "type", "(", "gt_disp", ")", ")", ")", "\n", "", "if", "not", "isinstance", "(", "est_conf", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "err_msg", ".", "format", "(", "'Estimated confidence map'", ",", "type", "(", "est_conf", ")", ")", ")", "\n", "", "if", "any", "(", "[", "not", "isinstance", "(", "est_disp", ",", "torch", ".", "Tensor", ")", ",", "not", "isinstance", "(", "gt_disp", ",", "torch", ".", "Tensor", ")", ",", "\n", "not", "isinstance", "(", "est_conf", ",", "torch", ".", "Tensor", ")", "]", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "'Input maps contains None, expected given torch.Tensor'", ")", "\n", "return", "error_dict", "\n", "", "if", "not", "est_disp", ".", "shape", "==", "gt_disp", ".", "shape", ":", "\n", "        ", "warnings", ".", "warn", "(", "'Estimated and ground truth disparity map should have same shape'", ")", "\n", "", "if", "not", "est_disp", ".", "shape", "==", "est_conf", ".", "shape", ":", "\n", "        ", "warnings", ".", "warn", "(", "'Estimated disparity and confidence map should have same shape'", ")", "\n", "\n", "", "if", "any", "(", "[", "not", "(", "est_disp", ".", "shape", "==", "gt_disp", ".", "shape", ")", ",", "not", "(", "est_disp", ".", "shape", "==", "est_conf", ".", "shape", ")", "]", ")", ":", "\n", "        ", "return", "error_dict", "\n", "\n", "", "est_disp", "=", "est_disp", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "gt_disp", "=", "gt_disp", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "est_conf", "=", "est_conf", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "mask", "=", "torch", ".", "ones", "(", "gt_disp", ".", "shape", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "if", "lb", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", "&", "(", "gt_disp", ">", "lb", ")", "\n", "", "if", "ub", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", "&", "(", "gt_disp", "<", "ub", ")", "\n", "\n", "", "mask", ".", "detach_", "(", ")", "\n", "\n", "total_valid_num", "=", "mask", ".", "sum", "(", ")", "\n", "if", "total_valid_num", "<", "bins", ":", "\n", "        ", "return", "error_dict", "\n", "\n", "", "mask", "=", "mask", ".", "float", "(", ")", "\n", "est_disp", "=", "est_disp", "*", "mask", "\n", "gt_disp", "=", "gt_disp", "*", "mask", "\n", "\n", "abs_error", "=", "torch", ".", "abs", "(", "gt_disp", "-", "est_disp", ")", "\n", "\n", "# normalize confidence map and error map", "\n", "est_conf", "=", "norm", "(", "est_conf", ")", "\n", "# error is lower the better, but confidence is bigger the better", "\n", "neg_norm_abs_error", "=", "1.0", "-", "norm", "(", "abs_error", ")", "\n", "\n", "# random remove map", "\n", "randRemove", "=", "torch", ".", "rand_like", "(", "est_conf", ")", "\n", "randRemove", "=", "norm", "(", "randRemove", ")", "\n", "\n", "# let invalid pixels to -1", "\n", "neg_norm_abs_error", "=", "mask_to_neg", "(", "neg_norm_abs_error", ",", "mask", ")", "\n", "est_conf", "=", "mask_to_neg", "(", "est_conf", ",", "mask", ")", "\n", "randRemove", "=", "mask_to_neg", "(", "randRemove", ",", "mask", ")", "\n", "\n", "# flatten", "\n", "flat_neg_norm_abs_error", ",", "_", "=", "neg_norm_abs_error", ".", "view", "(", "-", "1", ")", ".", "sort", "(", ")", "\n", "flat_est_conf", ",", "_", "=", "est_conf", ".", "view", "(", "-", "1", ")", ".", "sort", "(", ")", "\n", "flat_randRemove", ",", "_", "=", "randRemove", ".", "view", "(", "-", "1", ")", ".", "sort", "(", ")", "\n", "\n", "assert", "(", "flat_neg_norm_abs_error", "<=", "0", ")", ".", "sum", "(", ")", "==", "(", "flat_est_conf", "<=", "0", ")", ".", "sum", "(", ")", ",", "'The number of invalid confidence and disparity should be the same'", "\n", "assert", "(", "flat_neg_norm_abs_error", "<=", "0", ")", ".", "sum", "(", ")", "==", "(", "flat_randRemove", "<=", "0", ")", ".", "sum", "(", ")", ",", "'The number of invalid random map and disparity should be the same'", "\n", "\n", "start_pointer", "=", "(", "flat_neg_norm_abs_error", "<=", "0", ")", ".", "sum", "(", ")", "\n", "part", "=", "(", "total_valid_num", "-", "start_pointer", "-", "1", ")", "//", "bins", "\n", "pointer_edges", "=", "[", "start_pointer", "+", "part", "*", "i", "for", "i", "in", "range", "(", "bins", "+", "1", ")", "]", "\n", "conf_edges", "=", "[", "]", "\n", "error_edges", "=", "[", "]", "\n", "rand_edges", "=", "[", "]", "\n", "for", "pointer", "in", "pointer_edges", ":", "\n", "        ", "conf_edges", ".", "append", "(", "flat_est_conf", "[", "pointer", "]", ")", "\n", "error_edges", ".", "append", "(", "flat_neg_norm_abs_error", "[", "pointer", "]", ")", "\n", "rand_edges", ".", "append", "(", "flat_randRemove", "[", "pointer", "]", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "bins", ")", ":", "\n", "# kick out the lowest percentages[i]% confidence pixels, and evaluate the left", "\n", "        ", "conf_mask", "=", "(", "est_conf", ">=", "conf_edges", "[", "i", "]", ")", ".", "float", "(", ")", "\n", "# kick out the biggest percentages[i]% error pixels, and evaluate the left", "\n", "# absolute error is lower is better, it's different from confidence value", "\n", "error_mask", "=", "(", "neg_norm_abs_error", ">=", "error_edges", "[", "i", "]", ")", ".", "float", "(", ")", "\n", "# kick out percentages[i]% random generated value", "\n", "rand_mask", "=", "(", "randRemove", ">=", "rand_edges", "[", "i", "]", ")", ".", "float", "(", ")", "\n", "\n", "error_dict", "[", "'est_{}'", ".", "format", "(", "percentages", "[", "i", "]", ")", "]", "=", "(", "abs_error", "*", "conf_mask", ")", ".", "sum", "(", ")", "/", "(", "conf_mask", ".", "sum", "(", ")", ")", "\n", "error_dict", "[", "'oracle_{}'", ".", "format", "(", "percentages", "[", "i", "]", ")", "]", "=", "(", "abs_error", "*", "error_mask", ")", ".", "sum", "(", ")", "/", "(", "error_mask", ".", "sum", "(", ")", ")", "\n", "error_dict", "[", "'random_{}'", ".", "format", "(", "percentages", "[", "i", "]", ")", "]", "=", "(", "abs_error", "*", "rand_mask", ")", ".", "sum", "(", ")", "/", "(", "rand_mask", ".", "sum", "(", ")", ")", "\n", "\n", "", "return", "error_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.vis_hooks.DistVisHook.__init__": [[64, 71], ["cfg.copy", "isinstance", "TypeError", "type"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "cfg", ",", "interval", "=", "1", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", ".", "copy", "(", ")", "\n", "if", "isinstance", "(", "dataset", ",", "Dataset", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "dataset", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"dataset must be a Dataset object, not {}\"", ".", "format", "(", "type", "(", "dataset", ")", ")", ")", "\n", "", "self", ".", "interval", "=", "interval", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.vis_hooks.DistVisHook.after_train_epoch": [[72, 161], ["runner.logger.info", "runner.model.eval", "range", "torch.barrier", "torch.barrier", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "vis_hooks.DistVisHook.every_n_epochs", "mmcv.ProgressBar", "len", "imageio.imread().astype", "imageio.imread().astype", "vis_hooks.prepare_visualize", "print", "torch.barrier", "torch.barrier", "range", "vis_hooks.DistVisHook.visualize", "os.join", "os.join", "mmcv.dump", "torch.barrier", "torch.barrier", "len", "len", "range", "mmcv.parallel.scatter", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "runner.model", "dmb.data.datasets.evaluation.stereo.eval.remove_padding", "hasattr", "item[].split", "range", "min", "os.join", "os.join", "mmcv.load", "range", "os.remove", "os.remove", "os.remove", "os.remove", "len", "mmcv.parallel.collate", "dmb.data.datasets.evaluation.stereo.eval.remove_padding", "dmb.data.datasets.evaluation.stereo.eval.remove_padding", "prepare_visualize.update", "imageio.imread", "imageio.imread", "mmcv.ProgressBar.update", "len", "len", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "os.join", "os.join", "os.join", "os.join", "cost.cpu"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis_hooks.prepare_visualize", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis_hooks.DistFlowVisHook.visualize", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding"], ["", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "not", "self", ".", "every_n_epochs", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "\n", "", "runner", ".", "logger", ".", "info", "(", "\n", "\"Start Visualizing on {} dataset({} images).\"", ".", "format", "(", "self", ".", "dataset", ".", "name", ",", "len", "(", "self", ".", "dataset", ")", ")", "\n", ")", "\n", "\n", "# get prog bar", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "self", ".", "dataset", ")", ")", "\n", "", "else", ":", "\n", "            ", "prog_bar", "=", "None", "\n", "\n", "", "runner", ".", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", "]", "\n", "for", "idx", "in", "range", "(", "runner", ".", "rank", ",", "len", "(", "self", ".", "dataset", ")", ",", "runner", ".", "world_size", ")", ":", "\n", "            ", "data", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "data_gpu", "=", "scatter", "(", "\n", "collate", "(", "[", "data", "]", ",", "samples_per_gpu", "=", "1", ")", ",", "\n", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", "\n", ")", "[", "0", "]", "\n", "\n", "# compute output", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "ori_result", ",", "_", "=", "runner", ".", "model", "(", "data_gpu", ")", "\n", "\n", "# remove the padding when data augmentation", "\n", "disps", "=", "ori_result", "[", "'disps'", "]", "\n", "costs", "=", "ori_result", "[", "'costs'", "]", "\n", "\n", "ori_size", "=", "data_gpu", "[", "'original_size'", "]", "\n", "disps", "=", "remove_padding", "(", "disps", ",", "ori_size", ")", "\n", "target", "=", "data_gpu", "[", "'leftDisp'", "]", "if", "'leftDisp'", "in", "data_gpu", "else", "None", "\n", "if", "target", "is", "not", "None", ":", "\n", "                    ", "target", "=", "remove_padding", "(", "target", ",", "ori_size", ")", "\n", "\n", "", "result", "=", "{", "\n", "'Disparity'", ":", "disps", ",", "\n", "'GroundTruth'", ":", "target", ",", "\n", "}", "\n", "\n", "if", "hasattr", "(", "self", ".", "cfg", ".", "model", ",", "'cmn'", ")", ":", "\n", "# confidence measurement network", "\n", "                    ", "confs", "=", "ori_result", "[", "'confs'", "]", "\n", "confs", "=", "remove_padding", "(", "confs", ",", "ori_size", ")", "\n", "result", ".", "update", "(", "Confidence", "=", "confs", ")", "\n", "\n", "", "if", "self", ".", "cfg", ".", "model", ".", "eval", ".", "is_cost_return", ":", "\n", "                    ", "if", "self", ".", "cfg", ".", "model", ".", "eval", ".", "is_cost_to_cpu", ":", "\n", "                        ", "costs", "=", "[", "cost", ".", "cpu", "(", ")", "for", "cost", "in", "costs", "]", "\n", "", "result", "[", "'Cost'", "]", "=", "costs", "\n", "\n", "# convert result to suitable visualization image", "\n", "", "", "item", "=", "self", ".", "dataset", ".", "data_list", "[", "idx", "]", "\n", "result", "[", "'leftImage'", "]", "=", "imread", "(", "\n", "osp", ".", "join", "(", "self", ".", "cfg", ".", "data", ".", "vis", ".", "data_root", ",", "item", "[", "'left_image_path'", "]", ")", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "result", "[", "'rightImage'", "]", "=", "imread", "(", "\n", "osp", ".", "join", "(", "self", ".", "cfg", ".", "data", ".", "vis", ".", "data_root", ",", "item", "[", "'right_image_path'", "]", ")", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "image_name", "=", "item", "[", "'left_image_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "result", "=", "prepare_visualize", "(", "result", ",", "runner", ".", "epoch", "+", "1", ",", "self", ".", "cfg", ".", "work_dir", ",", "image_name", ")", "\n", "\n", "results", "[", "idx", "]", "=", "result", "\n", "\n", "batch_size", "=", "runner", ".", "world_size", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "                ", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "", "", "", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "'\\n'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "min", "(", "runner", ".", "world_size", ",", "len", "(", "self", ".", "dataset", ")", ")", ")", ":", "\n", "                ", "tmp_file", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'temp_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "tmp_results", "=", "mmcv", ".", "load", "(", "tmp_file", ")", "\n", "for", "idx", "in", "range", "(", "i", ",", "len", "(", "results", ")", ",", "runner", ".", "world_size", ")", ":", "\n", "                    ", "results", "[", "idx", "]", "=", "tmp_results", "[", "idx", "]", "\n", "", "os", ".", "remove", "(", "tmp_file", ")", "\n", "", "self", ".", "visualize", "(", "runner", ",", "results", ")", "\n", "", "else", ":", "\n", "            ", "tmp_file", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'temp_{}.pkl'", ".", "format", "(", "runner", ".", "rank", ")", ")", "\n", "mmcv", ".", "dump", "(", "results", ",", "tmp_file", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.vis_hooks.DistVisHook.visualize": [[162, 164], ["None"], "methods", ["None"], ["", "def", "visualize", "(", "self", ",", "runner", ",", "results", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.vis_hooks.DistStereoVisHook.visualize": [[169, 181], ["runner.logger.info", "result.keys"], "methods", ["None"], ["    ", "def", "visualize", "(", "self", ",", "runner", ",", "results", ")", ":", "\n", "        ", "for", "result", "in", "results", ":", "\n", "            ", "if", "result", "is", "None", ":", "\n", "                ", "continue", "\n", "", "for", "key", "in", "result", ".", "keys", "(", ")", ":", "\n", "                ", "runner", ".", "log_buffer", ".", "output", "[", "key", "]", "=", "result", "[", "key", "]", "\n", "\n", "# runner.epoch start at 0", "\n", "", "", "log_str", "=", "\"Epoch [{}] Visualization Finished!\"", ".", "format", "(", "runner", ".", "epoch", "+", "1", ")", "\n", "\n", "runner", ".", "logger", ".", "info", "(", "log_str", ")", "\n", "runner", ".", "log_buffer", ".", "ready", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.vis_hooks.to_cpu": [[22, 32], ["isinstance", "TypeError", "tensor.detach().cpu", "isinstance", "error_msg.format", "isinstance", "type", "tensor.detach", "vis_hooks.to_cpu", "vis_hooks.to_cpu"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.to_cpu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.to_cpu"], ["def", "to_cpu", "(", "tensor", ")", ":", "\n", "    ", "error_msg", "=", "\"Tensor must contain tensors, dicts or lists; found {}\"", "\n", "if", "isinstance", "(", "tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "elif", "isinstance", "(", "tensor", ",", "container_abcs", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "key", ":", "to_cpu", "(", "tensor", "[", "key", "]", ")", "for", "key", "in", "tensor", "}", "\n", "", "elif", "isinstance", "(", "tensor", ",", "container_abcs", ".", "Sequence", ")", ":", "\n", "        ", "return", "[", "to_cpu", "(", "samples", ")", "for", "samples", "in", "tensor", "]", "\n", "\n", "", "raise", "TypeError", "(", "(", "error_msg", ".", "format", "(", "type", "(", "tensor", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.vis_hooks.prepare_visualize": [[33, 60], ["dmb.visualization.stereo.show_result.ShowResultTool", "dmb.visualization.stereo.show_result.ShowResultTool.", "mmcv.mkdir_or_exist", "os.path.join", "os.path.join", "matplotlib.imsave", "result_tool.keys", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "matplotlib.imsave", "os.path.join", "os.path.join", "[].savefig", "[].transpose"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.visualization.__init__.ShowResultTool"], ["", "def", "prepare_visualize", "(", "result", ",", "epoch", ",", "work_dir", ",", "image_name", ")", ":", "\n", "    ", "result_tool", "=", "ShowResultTool", "(", ")", "\n", "result", "=", "result_tool", "(", "result", ",", "color_map", "=", "'gray'", ",", "bins", "=", "100", ")", "\n", "mkdir_or_exist", "(", "os", ".", "path", ".", "join", "(", "work_dir", ",", "image_name", ")", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "image_name", ",", "'{}.png'", ".", "format", "(", "epoch", ")", ")", "\n", "plt", ".", "imsave", "(", "save_path", ",", "result", "[", "'GroupColor'", "]", ",", "cmap", "=", "plt", ".", "cm", ".", "hot", ")", "\n", "\n", "log_result", "=", "{", "}", "\n", "for", "pred_item", "in", "result", ".", "keys", "(", ")", ":", "\n", "        ", "log_name", "=", "image_name", "+", "'/'", "+", "pred_item", "\n", "if", "pred_item", "==", "'Disparity'", ":", "\n", "            ", "log_result", "[", "'image/'", "+", "log_name", "]", "=", "result", "[", "pred_item", "]", "\n", "", "if", "pred_item", "==", "'GroundTruth'", ":", "\n", "            ", "log_result", "[", "'image/'", "+", "log_name", "]", "=", "result", "[", "pred_item", "]", "\n", "", "if", "pred_item", "==", "'Confidence'", ":", "\n", "            ", "log_result", "[", "'image/'", "+", "log_name", "]", "=", "result", "[", "pred_item", "]", "\n", "# save confidence map", "\n", "conf_save_path", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "image_name", ",", "'conf_{}.png'", ".", "format", "(", "epoch", ")", ")", "\n", "plt", ".", "imsave", "(", "conf_save_path", ",", "log_result", "[", "'image/'", "+", "log_name", "]", "[", "0", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "\n", "", "if", "pred_item", "==", "'ConfidenceHistogram'", ":", "\n", "            ", "log_result", "[", "'figure/'", "+", "log_name", "+", "'_histogram'", "]", "=", "result", "[", "'ConfidenceHistogram'", "]", "\n", "# save confidence histogram", "\n", "conf_save_path", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "image_name", ",", "'conf_hist_{}.png'", ".", "format", "(", "epoch", ")", ")", "\n", "log_result", "[", "'figure/'", "+", "log_name", "+", "'_histogram'", "]", "[", "0", "]", ".", "savefig", "(", "conf_save_path", ")", "\n", "\n", "", "", "return", "log_result", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.vis.disp_map": [[5, 67], ["numpy.array", "map[].astype", "bins.reshape.reshape", "numpy.cumsum", "np.zeros.reshape", "numpy.tile", "numpy.tile", "numpy.sum", "numpy.zeros", "numpy.tile", "numpy.tile"], "function", ["None"], ["def", "disp_map", "(", "disp", ")", ":", "\n", "    ", "\"\"\"\n    Based on color histogram, convert the gray disp into color disp map.\n    The histogram consists of 7 bins, value of each is e.g. [114.0, 185.0, 114.0, 174.0, 114.0, 185.0, 114.0]\n    Accumulate each bin, named cbins, and scale it to [0,1], e.g. [0.114, 0.299, 0.413, 0.587, 0.701, 0.886, 1.0]\n    For each value in disp, we have to find which bin it belongs to\n    Therefore, we have to compare it with every value in cbins\n    Finally, we have to get the ratio of it accounts for the bin, and then we can interpolate it with the histogram map\n    For example, 0.780 belongs to the 5th bin, the ratio is (0.780-0.701)/0.114,\n    then we can interpolate it into 3 channel with the 5th [0, 1, 0] and 6th [0, 1, 1] channel-map\n    Inputs:\n        disp: numpy array, disparity gray map in (Height * Width, 1) layout, value range [0,1]\n    Outputs:\n        disp: numpy array, disparity color map in (Height * Width, 3) layout, value range [0,1]\n    \"\"\"", "\n", "map", "=", "np", ".", "array", "(", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "114", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "185", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "114", "]", ",", "\n", "[", "1", ",", "0", ",", "1", ",", "174", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "114", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "185", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "114", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "0", "]", "\n", "]", ")", "\n", "# grab the last element of each column and convert into float type, e.g. 114 -> 114.0", "\n", "# the final result: [114.0, 185.0, 114.0, 174.0, 114.0, 185.0, 114.0]", "\n", "bins", "=", "map", "[", "0", ":", "map", ".", "shape", "[", "0", "]", "-", "1", ",", "map", ".", "shape", "[", "1", "]", "-", "1", "]", ".", "astype", "(", "float", ")", "\n", "\n", "# reshape the bins from [7] into [7,1]", "\n", "bins", "=", "bins", ".", "reshape", "(", "(", "bins", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n", "# accumulate element in bins, and get [114.0, 299.0, 413.0, 587.0, 701.0, 886.0, 1000.0]", "\n", "cbins", "=", "np", ".", "cumsum", "(", "bins", ")", "\n", "\n", "# divide the last element in cbins, e.g. 1000.0", "\n", "bins", "=", "bins", "/", "cbins", "[", "cbins", ".", "shape", "[", "0", "]", "-", "1", "]", "\n", "\n", "# divide the last element of cbins, e.g. 1000.0, and reshape it, final shape [6,1]", "\n", "cbins", "=", "cbins", "[", "0", ":", "cbins", ".", "shape", "[", "0", "]", "-", "1", "]", "/", "cbins", "[", "cbins", ".", "shape", "[", "0", "]", "-", "1", "]", "\n", "cbins", "=", "cbins", ".", "reshape", "(", "(", "cbins", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n", "# transpose disp array, and repeat disp 6 times in axis-0, 1 times in axis-1, final shape=[6, Height*Width]", "\n", "ind", "=", "np", ".", "tile", "(", "disp", ".", "T", ",", "(", "6", ",", "1", ")", ")", "\n", "tmp", "=", "np", ".", "tile", "(", "cbins", ",", "(", "1", ",", "disp", ".", "size", ")", ")", "\n", "\n", "# get the number of disp's elements bigger than  each value in cbins, and sum up the 6 numbers", "\n", "b", "=", "(", "ind", ">", "tmp", ")", ".", "astype", "(", "int", ")", "\n", "s", "=", "np", ".", "sum", "(", "b", ",", "axis", "=", "0", ")", "\n", "\n", "bins", "=", "1", "/", "bins", "\n", "\n", "# add an element 0 ahead of cbins, [0, cbins]", "\n", "t", "=", "cbins", "\n", "cbins", "=", "np", ".", "zeros", "(", "(", "cbins", ".", "size", "+", "1", ",", "1", ")", ")", "\n", "cbins", "[", "1", ":", "]", "=", "t", "\n", "\n", "# get the ratio and interpolate it", "\n", "disp", "=", "(", "disp", "-", "cbins", "[", "s", "]", ")", "*", "bins", "[", "s", "]", "\n", "disp", "=", "map", "[", "s", ",", "0", ":", "3", "]", "*", "np", ".", "tile", "(", "1", "-", "disp", ",", "(", "1", ",", "3", ")", ")", "+", "map", "[", "s", "+", "1", ",", "0", ":", "3", "]", "*", "np", ".", "tile", "(", "disp", ",", "(", "1", ",", "3", ")", ")", "\n", "\n", "return", "disp", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.vis.disp_to_color": [[69, 100], ["disp.reshape.reshape", "vis.disp_map", "disp.reshape.reshape", "numpy.max"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.vis.disp_map"], ["", "def", "disp_to_color", "(", "disp", ",", "max_disp", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Transfer disparity map to color map\n    Args:\n        disp (numpy.array): disparity map in (Height, Width) layout, value range [0, 255]\n        max_disp (int): max disparity, optionally specifies the scaling factor\n    Returns:\n        disparity color map (numpy.array): disparity map in (Height, Width, 3) layout,\n            range [0,255]\n    \"\"\"", "\n", "# grab the disp shape(Height, Width)", "\n", "h", ",", "w", "=", "disp", ".", "shape", "\n", "\n", "# if max_disp not provided, set as the max value in disp", "\n", "if", "max_disp", "is", "None", ":", "\n", "        ", "max_disp", "=", "np", ".", "max", "(", "disp", ")", "\n", "\n", "# scale the disp to [0,1] by max_disp", "\n", "", "disp", "=", "disp", "/", "max_disp", "\n", "\n", "# reshape the disparity to [Height*Width, 1]", "\n", "disp", "=", "disp", ".", "reshape", "(", "(", "h", "*", "w", ",", "1", ")", ")", "\n", "\n", "# convert to color map, with shape [Height*Width, 3]", "\n", "disp", "=", "disp_map", "(", "disp", ")", "\n", "\n", "# convert to RGB-mode", "\n", "disp", "=", "disp", ".", "reshape", "(", "(", "h", ",", "w", ",", "3", ")", ")", "\n", "disp", "=", "disp", "*", "255.0", "\n", "\n", "return", "disp", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.vis.tensor_to_color": [[102, 127], ["disp_tensor.detach().cpu.numpy", "disp_color.transpose.transpose", "disp_tensor.detach().cpu.ndimension", "disp_tensor[].detach().cpu", "vis.disp_to_color", "disp_tensor.detach().cpu.ndimension", "disp_tensor[].detach().cpu", "disp_tensor.detach().cpu.detach().cpu", "disp_tensor[].detach", "disp_tensor[].detach", "disp_tensor.detach().cpu.detach"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.vis.disp_to_color"], ["", "def", "tensor_to_color", "(", "disp_tensor", ",", "max_disp", "=", "192", ")", ":", "\n", "    ", "\"\"\"\n    The main target is to convert the tensor to image format\n      so that we can load it into tensor-board.add_image()\n    Args:\n        disp_tensor (Tensor): disparity map\n            in (BatchSize, Channel, Height, Width) or (BatchSize, Height, Width) layout\n        max_disp (int): the max disparity value\n    Returns:\n        tensor_color (numpy.array): the converted disparity color map\n            in (3, Height, Width) layout, value range [0,1]\n    \"\"\"", "\n", "if", "disp_tensor", ".", "ndimension", "(", ")", "==", "4", ":", "\n", "        ", "disp_tensor", "=", "disp_tensor", "[", "0", ",", "0", ",", ":", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "elif", "disp_tensor", ".", "ndimension", "(", ")", "==", "3", ":", "\n", "        ", "disp_tensor", "=", "disp_tensor", "[", "0", ",", ":", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "        ", "disp_tensor", "=", "disp_tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "", "disp", "=", "disp_tensor", ".", "numpy", "(", ")", "\n", "\n", "disp_color", "=", "disp_to_color", "(", "disp", ",", "max_disp", ")", "/", "255.0", "\n", "disp_color", "=", "disp_color", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "disp_color", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.vis.disp_err_to_color": [[129, 192], ["numpy.array", "numpy.abs", "numpy.zeros_like", "numpy.minimum", "numpy.zeros().astype", "numpy.zeros", "float"], "function", ["None"], ["", "def", "disp_err_to_color", "(", "disp_est", ",", "disp_gt", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the error map between disparity estimation and disparity ground-truth\n    hot color -> big error, cold color -> small error\n    Args:\n        disp_est (numpy.array): estimated disparity map\n            in (Height, Width) layout, range [0,255]\n        disp_gt (numpy.array): ground truth disparity map\n            in (Height, Width) layout, range [0,255]\n    Returns:\n        disp_err (numpy.array): disparity error map\n            in (Height, Width, 3) layout, range [0,255]\n    \"\"\"", "\n", "\"\"\" matlab\n    function D_err = disp_error_image (D_gt,D_est,tau,dilate_radius)\n    if nargin==3\n      dilate_radius = 1;\n    end\n    [E,D_val] = disp_error_map (D_gt,D_est);\n    E = min(E/tau(1),(E./abs(D_gt))/tau(2));\n    cols = error_colormap();\n    D_err = zeros([size(D_gt) 3]);\n    for i=1:size(cols,1)\n      [v,u] = find(D_val > 0 & E >= cols(i,1) & E <= cols(i,2));\n      D_err(sub2ind(size(D_err),v,u,1*ones(length(v),1))) = cols(i,3);\n      D_err(sub2ind(size(D_err),v,u,2*ones(length(v),1))) = cols(i,4);\n      D_err(sub2ind(size(D_err),v,u,3*ones(length(v),1))) = cols(i,5);\n    end\n    D_err = imdilate(D_err,strel('disk',dilate_radius));\n    \"\"\"", "\n", "# error color map with interval (0, 0.1875, 0.375, 0.75, 1.5, 3, 6, 12, 24, 48, inf)/3.0", "\n", "# different interval corresponds to different 3-channel projection", "\n", "cols", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "0", "/", "3.0", ",", "0.1875", "/", "3.0", ",", "49", ",", "54", ",", "149", "]", ",", "\n", "[", "0.1875", "/", "3.0", ",", "0.375", "/", "3.0", ",", "69", ",", "117", ",", "180", "]", ",", "\n", "[", "0.375", "/", "3.0", ",", "0.75", "/", "3.0", ",", "116", ",", "173", ",", "209", "]", ",", "\n", "[", "0.75", "/", "3.0", ",", "1.5", "/", "3.0", ",", "171", ",", "217", ",", "233", "]", ",", "\n", "[", "1.5", "/", "3.0", ",", "3", "/", "3.0", ",", "224", ",", "243", ",", "248", "]", ",", "\n", "[", "3", "/", "3.0", ",", "6", "/", "3.0", ",", "254", ",", "224", ",", "144", "]", ",", "\n", "[", "6", "/", "3.0", ",", "12", "/", "3.0", ",", "253", ",", "174", ",", "97", "]", ",", "\n", "[", "12", "/", "3.0", ",", "24", "/", "3.0", ",", "244", ",", "109", ",", "67", "]", ",", "\n", "[", "24", "/", "3.0", ",", "48", "/", "3.0", ",", "215", ",", "48", ",", "39", "]", ",", "\n", "[", "48", "/", "3.0", ",", "float", "(", "\"inf\"", ")", ",", "165", ",", "0", ",", "38", "]", "\n", "]", "\n", ")", "\n", "\n", "# get the error (<3px or <5%) map", "\n", "tau", "=", "[", "3.0", ",", "0.05", "]", "\n", "E", "=", "np", ".", "abs", "(", "disp_est", "-", "disp_gt", ")", "\n", "\n", "not_empty", "=", "disp_gt", ">", "0.0", "\n", "tmp", "=", "np", ".", "zeros_like", "(", "disp_gt", ")", "\n", "tmp", "[", "not_empty", "]", "=", "E", "[", "not_empty", "]", "/", "disp_gt", "[", "not_empty", "]", "/", "tau", "[", "1", "]", "\n", "E", "=", "np", ".", "minimum", "(", "E", "/", "tau", "[", "0", "]", ",", "tmp", ")", "\n", "\n", "h", ",", "w", "=", "disp_gt", ".", "shape", "\n", "err_im", "=", "np", ".", "zeros", "(", "shape", "=", "(", "h", ",", "w", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "for", "col", "in", "cols", ":", "\n", "        ", "y_x", "=", "not_empty", "&", "(", "E", ">=", "col", "[", "0", "]", ")", "&", "(", "E", "<=", "col", "[", "1", "]", ")", "\n", "err_im", "[", "y_x", "]", "=", "col", "[", "2", ":", "]", "\n", "\n", "", "return", "err_im", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.vis.group_color": [[194, 240], ["numpy.concatenate", "numpy.concatenate().clip", "numpy.concatenate().clip", "numpy.concatenate().clip", "matplotlib.imsave", "vis.disp_to_color", "vis.disp_err_to_color", "vis.disp_to_color", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.vis.disp_to_color", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.vis.disp_err_to_color", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.vis.disp_to_color"], ["", "def", "group_color", "(", "est_disp", ",", "gt_disp", "=", "None", ",", "left_image", "=", "None", ",", "right_image", "=", "None", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Combine the Left Image, Disparity Estimation, Disparity Ground-Truth, Disparity Error into one column\n    Args:\n        est_disp (numpy.array): estimated disparity map\n            in (Height, Width) layout, values range between [0, 255]\n        gt_disp (numpy.array): disparity ground-truth map\n            in (Height, Width) layout, values range between [0, 255]\n        left_image (numpy.array): left RGB image\n            in (Height, Width, 3) layout, values range between [0, 255]\n        right_image (numpy.array): left RGB image\n            in (Height, Width, 3) layout, values range between [0, 255]\n        save_path (str): the absolute/relative path you want to save the group image\n    Returns:\n        group (numpy.array): 4 maps grouped\n            in (Height*4, Width, 3) layout, values range between [0, 1]\n    \"\"\"", "\n", "# Notes: All inputs should have the same height and width", "\n", "# TODO: add shape assert", "\n", "\n", "# plt.imshow only convert the value [0,1] into color-map, so we scale all the value to [0,1] below", "\n", "# concatenate Disparity Estimation and Ground-Truth in axis=0, and convert it to color", "\n", "if", "gt_disp", "is", "not", "None", ":", "\n", "        ", "group_image", "=", "np", ".", "concatenate", "(", "(", "est_disp", ",", "gt_disp", ")", ",", "0", ")", "\n", "group_image", "=", "disp_to_color", "(", "group_image", ")", "/", "255.0", "\n", "\n", "# add error map", "\n", "err_disp", "=", "disp_err_to_color", "(", "est_disp", ",", "gt_disp", ")", "/", "255.0", "\n", "group_image", "=", "np", ".", "concatenate", "(", "(", "group_image", ",", "err_disp", ")", ",", "0", ")", ".", "clip", "(", "0.", ",", "1.", ")", "\n", "", "else", ":", "\n", "        ", "group_image", "=", "disp_to_color", "(", "est_disp", ")", "/", "255.0", "\n", "\n", "", "if", "right_image", "is", "not", "None", ":", "\n", "        ", "right_image", "=", "np", ".", "array", "(", "right_image", ",", "np", ".", "float32", ")", "/", "255.0", "\n", "# concatenate maps in order as [right_image, est_disp, gt_disp, err_disp]", "\n", "group_image", "=", "np", ".", "concatenate", "(", "(", "right_image", ",", "group_image", ")", ",", "0", ")", ".", "clip", "(", "0.", ",", "1.", ")", "\n", "\n", "", "if", "left_image", "is", "not", "None", ":", "\n", "        ", "left_image", "=", "np", ".", "array", "(", "left_image", ",", "np", ".", "float32", ")", "/", "255.0", "\n", "# concatenate maps in order as [left_image, right_image, est_disp, gt_disp, ErrDisp]", "\n", "group_image", "=", "np", ".", "concatenate", "(", "(", "left_image", ",", "group_image", ")", ",", "0", ")", ".", "clip", "(", "0.", ",", "1.", ")", "\n", "\n", "", "if", "save_path", "is", "not", "None", ":", "\n", "        ", "plt", ".", "imsave", "(", "save_path", ",", "group_image", ",", "cmap", "=", "plt", ".", "cm", ".", "hot", ")", "\n", "\n", "", "return", "group_image", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.base.StereoDatasetBase.__init__": [[9, 18], ["base.StereoDatasetBase.annLoader", "numpy.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.base.FlowDatasetBase.annLoader"], ["    ", "def", "__init__", "(", "self", ",", "annFile", ",", "root", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "annFile", "=", "annFile", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "data_list", "=", "self", ".", "annLoader", "(", ")", "\n", "\n", "# transforms for data augmentation", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "flag", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "data_list", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.base.StereoDatasetBase.annLoader": [[19, 24], ["open", "data_list.extend", "json.load"], "methods", ["None"], ["", "def", "annLoader", "(", "self", ")", ":", "\n", "        ", "data_list", "=", "[", "]", "\n", "with", "open", "(", "file", "=", "self", ".", "annFile", ",", "mode", "=", "'r'", ")", "as", "fp", ":", "\n", "            ", "data_list", ".", "extend", "(", "json", ".", "load", "(", "fp", ")", ")", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.base.StereoDatasetBase.Loader": [[25, 27], ["None"], "methods", ["None"], ["", "def", "Loader", "(", "self", ",", "item", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.base.StereoDatasetBase.__getitem__": [[28, 36], ["base.StereoDatasetBase.Loader", "base.StereoDatasetBase.transform"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flying_chairs.base.FlyingChairsDataset.Loader"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "item", "=", "self", ".", "data_list", "[", "idx", "]", "\n", "sample", "=", "self", ".", "Loader", "(", "item", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.base.StereoDatasetBase.__len__": [[37, 39], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.base.StereoDatasetBase.__repr__": [[40, 47], ["base.StereoDatasetBase.__len__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.loaders.samplers.DistributedGroupSampler.__len__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "'{}\\n'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Root: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'annFile: {}\\n'", ".", "format", "(", "self", ".", "annFile", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Length: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.base.StereoDatasetBase.name": [[48, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.builder.build_transforms": [[8, 33], ["dmb.data.transforms.Compose", "dmb.data.transforms.Compose", "dmb.data.transforms.stereo_trans.RandomCrop", "dmb.data.transforms.stereo_trans.RAW", "dmb.data.transforms.stereo_trans.ToTensor", "dmb.data.transforms.stereo_trans.Normalize", "dmb.data.transforms.stereo_trans.RAW", "dmb.data.transforms.stereo_trans.ToTensor", "dmb.data.transforms.stereo_trans.StereoPad", "dmb.data.transforms.stereo_trans.Normalize"], "function", ["None"], ["from", ".", "DeepPruner", "import", "DeepPrunerProcessor", "\n", "from", ".", "AnyNet", "import", "AnyNetProcessor", "\n", "\n", "\n", "class", "CostProcessor", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "# Concatenate left and right feature to form cost volume", "\n", "", "", "class", "CatCostProcessor", "(", "CostProcessor", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "CatCostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "cat_func", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "get", "(", "'type'", ",", "'default'", ")", "\n", "self", ".", "cat_func", "=", "CAT_FUNCS", "[", "cat_func", "]", "\n", "\n", "self", ".", "default_args", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "copy", "(", ")", "\n", "self", ".", "default_args", ".", "pop", "(", "'type'", ")", "\n", "\n", "self", ".", "aggregator", "=", "build_cost_aggregator", "(", "cfg", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "ref_fms", ",", "tgt_fms", ",", "disp_sample", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.builder.build_stereo_dataset": [[35, 59], ["builder.build_transforms", "dmb.data.datasets.stereo.scene_flow.SceneFlowDataset", "ValueError", "dmb.data.datasets.stereo.kitti.Kitti2012Dataset", "dmb.data.datasets.stereo.kitti.Kitti2015Dataset", "ValueError"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.builder.build_transforms"], ["        ", "cat_cost", "=", "self", ".", "cat_func", "(", "ref_fms", ",", "tgt_fms", ",", "disp_sample", "=", "disp_sample", ",", "**", "self", ".", "default_args", ")", "\n", "\n", "# 2. aggregate cost by 3D-hourglass", "\n", "costs", "=", "self", ".", "aggregator", "(", "cat_cost", ")", "\n", "\n", "return", "costs", "\n", "\n", "\n", "# Use the difference between left and right feature to form cost volume", "\n", "", "", "class", "DifCostProcessor", "(", "CostProcessor", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "DifCostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "dif_func", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "get", "(", "'type'", ",", "'default'", ")", "\n", "self", ".", "dif_func", "=", "DIF_FUNCS", "[", "dif_func", "]", "\n", "\n", "self", ".", "default_args", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "copy", "(", ")", "\n", "self", ".", "default_args", ".", "pop", "(", "'type'", ")", "\n", "\n", "self", ".", "aggregator", "=", "build_cost_aggregator", "(", "cfg", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "ref_fms", ",", "tgt_fms", ",", "disp_sample", "=", "None", ")", ":", "\n", "# 1. build raw cost by concat", "\n", "        ", "cat_cost", "=", "self", ".", "dif_func", "(", "ref_fms", ",", "tgt_fms", ",", "disp_sample", "=", "disp_sample", ",", "**", "self", ".", "default_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.eval.remove_padding": [[12, 38], ["isinstance", "TypeError", "isinstance", "error_msg.format", "isinstance", "type", "eval.remove_padding", "eval.remove_padding"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding"], ["def", "remove_padding", "(", "batch", ",", "size", ")", ":", "\n", "    ", "\"\"\"\n    Usually, the SceneFlow image size is [540, 960], and we often pad it to [544, 960] evaluation,\n    What's more, for KITTI, the image size is pad to [384, 1248]\n    Details refer to dmb.data.transforms.stereo_trans.Pad\n    Here, we mainly remove the padding from the estimated tensor, such as disparity map\n    Args:\n        batch (torch.Tensor): in [BatchSize, Channel, Height, Width] layout\n        size (list, tuple): the last two dimensions are desired [Height, Width]\n    \"\"\"", "\n", "error_msg", "=", "\"batch must contain tensors, dicts or lists; found {}\"", "\n", "if", "isinstance", "(", "batch", ",", "torch", ".", "Tensor", ")", ":", "\n", "# Crop batch to desired size", "\n", "# For stereo, we often pad top and right of the image", "\n", "        ", "pad_top", "=", "batch", ".", "shape", "[", "-", "2", "]", "-", "size", "[", "-", "2", "]", "\n", "# pad_right = batch.shape[-1] - size[-1]", "\n", "if", "pad_top", ">=", "0", ":", "\n", "            ", "batch", "=", "batch", "[", ":", ",", ":", ",", "pad_top", ":", ",", ":", "size", "[", "-", "1", "]", "]", "\n", "\n", "", "return", "batch", "\n", "", "elif", "isinstance", "(", "batch", ",", "container_abcs", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "key", ":", "remove_padding", "(", "batch", "[", "key", "]", ",", "size", ")", "for", "key", "in", "batch", "}", "\n", "", "elif", "isinstance", "(", "batch", ",", "container_abcs", ".", "Sequence", ")", ":", "\n", "        ", "return", "[", "remove_padding", "(", "samples", ",", "size", ")", "for", "samples", "in", "batch", "]", "\n", "\n", "", "raise", "TypeError", "(", "(", "error_msg", ".", "format", "(", "type", "(", "batch", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.eval.do_evaluation": [[40, 72], ["torch.is_tensor", "torch.is_tensor", "dmb.data.datasets.evaluation.stereo.pixel_error.calc_error", "warnings.warn", "warnings.warn", "est_disp.clone().cpu.clone().cpu", "gt_disp.clone().cpu.clone().cpu", "est_disp.clone().cpu.clone", "gt_disp.clone().cpu.clone"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.evaluation.__init__.calc_error"], ["", "def", "do_evaluation", "(", "est_disp", ",", "gt_disp", ",", "lb", ",", "ub", ")", ":", "\n", "    ", "\"\"\"\n    Do pixel error evaluation. (See KITTI evaluation protocols for details.)\n    Args:\n        est_disp, (Tensor): estimated disparity map, in [BatchSize, Channel, Height, Width] or\n            [BatchSize, Height, Width] or [Height, Width] layout\n        gt_disp, (Tensor): ground truth disparity map, in [BatchSize, Channel, Height, Width] or\n            [BatchSize, Height, Width] or [Height, Width] layout\n        lb, (scalar): the lower bound of disparity you want to mask out\n        ub, (scalar): the upper bound of disparity you want to mask out\n\n    Returns:\n        error_dict (dict): the error of 1px, 2px, 3px, 5px, in percent,\n            range [0,100] and average error epe\n    \"\"\"", "\n", "error_dict", "=", "{", "}", "\n", "if", "est_disp", "is", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'Estimated disparity map is None'", ")", "\n", "return", "error_dict", "\n", "", "if", "gt_disp", "is", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'Reference ground truth disparity map is None'", ")", "\n", "return", "error_dict", "\n", "\n", "", "if", "torch", ".", "is_tensor", "(", "est_disp", ")", ":", "\n", "        ", "est_disp", "=", "est_disp", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "", "if", "torch", ".", "is_tensor", "(", "gt_disp", ")", ":", "\n", "        ", "gt_disp", "=", "gt_disp", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "", "error_dict", "=", "calc_error", "(", "est_disp", ",", "gt_disp", ",", "lb", "=", "lb", ",", "ub", "=", "ub", ")", "\n", "\n", "return", "error_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.eval.do_occlusion_evaluation": [[74, 135], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "dmb.modeling.stereo.layers.inverse_warp.inverse_warp", "occlusion.clamp.clamp", "dmb.data.datasets.evaluation.stereo.pixel_error.calc_error", "dmb.data.datasets.evaluation.stereo.pixel_error.calc_error.keys", "dmb.data.datasets.evaluation.stereo.pixel_error.calc_error", "dmb.data.datasets.evaluation.stereo.pixel_error.calc_error.keys", "warnings.warn", "warnings.warn", "warnings.warn", "est_disp.clone().cpu.clone().cpu", "ref_gt_disp.clone().cpu.clone().cpu", "target_gt_disp.clone().cpu.clone().cpu", "target_gt_disp.clone().cpu.clone", "ref_gt_disp.clone().cpu.clone", "est_disp.clone().cpu.clone", "occlusion.clamp.clone", "ref_gt_disp.clone().cpu.clone", "occlusion.clamp.clone", "est_disp.clone().cpu.clone", "not_occlusion.clone", "ref_gt_disp.clone().cpu.clone", "not_occlusion.clone", "est_disp.clone().cpu.clone", "ref_gt_disp.clone().cpu.clone", "target_gt_disp.clone().cpu.clone", "torch.abs", "torch.abs", "dmb.modeling.stereo.layers.inverse_warp.inverse_warp.clone", "dmb.modeling.stereo.layers.inverse_warp.inverse_warp.clone", "ref_gt_disp.clone().cpu.clone"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.inverse_warp.inverse_warp", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.evaluation.__init__.calc_error", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.evaluation.__init__.calc_error"], ["", "def", "do_occlusion_evaluation", "(", "est_disp", ",", "ref_gt_disp", ",", "target_gt_disp", ",", "lb", ",", "ub", ")", ":", "\n", "    ", "\"\"\"\n    Do occlusoin evaluation.\n    Args:\n        est_disp: estimated disparity map, in [BatchSize, Channel, Height, Width] or\n            [BatchSize, Height, Width] or [Height, Width] layout\n        ref_gt_disp: reference(left) ground truth disparity map, in [BatchSize, Channel, Height, Width] or\n            [BatchSize, Height, Width] or [Height, Width] layout\n        target_gt_disp: target(right) ground truth disparity map, in [BatchSize, Channel, Height, Width] or\n            [BatchSize, Height, Width] or [Height, Width] layout\n        lb, (scalar): the lower bound of disparity you want to mask out\n        ub, (scalar): the upper bound of disparity you want to mask out\n\n    Returns:\n\n    \"\"\"", "\n", "error_dict", "=", "{", "}", "\n", "if", "est_disp", "is", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'Estimated disparity map is None, expected given'", ")", "\n", "return", "error_dict", "\n", "", "if", "ref_gt_disp", "is", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'Reference ground truth disparity map is None, expected given'", ")", "\n", "return", "error_dict", "\n", "", "if", "target_gt_disp", "is", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'Target ground truth disparity map is None, expected given'", ")", "\n", "return", "error_dict", "\n", "\n", "", "if", "torch", ".", "is_tensor", "(", "est_disp", ")", ":", "\n", "        ", "est_disp", "=", "est_disp", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "", "if", "torch", ".", "is_tensor", "(", "ref_gt_disp", ")", ":", "\n", "        ", "ref_gt_disp", "=", "ref_gt_disp", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "", "if", "torch", ".", "is_tensor", "(", "target_gt_disp", ")", ":", "\n", "        ", "target_gt_disp", "=", "target_gt_disp", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "", "warp_ref_gt_disp", "=", "inverse_warp", "(", "target_gt_disp", ".", "clone", "(", ")", ",", "-", "ref_gt_disp", ".", "clone", "(", ")", ")", "\n", "theta", "=", "1.0", "\n", "eps", "=", "1e-6", "\n", "occlusion", "=", "(", "\n", "(", "torch", ".", "abs", "(", "warp_ref_gt_disp", ".", "clone", "(", ")", "-", "ref_gt_disp", ".", "clone", "(", ")", ")", ">", "theta", ")", "|", "\n", "(", "torch", ".", "abs", "(", "warp_ref_gt_disp", ".", "clone", "(", ")", ")", "<", "eps", ")", "\n", ")", ".", "prod", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "type_as", "(", "ref_gt_disp", ")", "\n", "occlusion", "=", "occlusion", ".", "clamp", "(", "0", ",", "1", ")", "\n", "\n", "occlusion_error_dict", "=", "calc_error", "(", "\n", "est_disp", ".", "clone", "(", ")", "*", "occlusion", ".", "clone", "(", ")", ",", "\n", "ref_gt_disp", ".", "clone", "(", ")", "*", "occlusion", ".", "clone", "(", ")", ",", "\n", "lb", "=", "lb", ",", "ub", "=", "ub", "\n", ")", "\n", "for", "key", "in", "occlusion_error_dict", ".", "keys", "(", ")", ":", "\n", "        ", "error_dict", "[", "'occ_'", "+", "key", "]", "=", "occlusion_error_dict", "[", "key", "]", "\n", "\n", "", "not_occlusion", "=", "1.0", "-", "occlusion", "\n", "not_occlusion_error_dict", "=", "calc_error", "(", "\n", "est_disp", ".", "clone", "(", ")", "*", "not_occlusion", ".", "clone", "(", ")", ",", "\n", "ref_gt_disp", ".", "clone", "(", ")", "*", "not_occlusion", ".", "clone", "(", ")", ",", "\n", "lb", "=", "lb", ",", "ub", "=", "ub", "\n", ")", "\n", "for", "key", "in", "not_occlusion_error_dict", ".", "keys", "(", ")", ":", "\n", "        ", "error_dict", "[", "'noc_'", "+", "key", "]", "=", "not_occlusion_error_dict", "[", "key", "]", "\n", "\n", "", "return", "error_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.eval_hooks.DistEvalHook.__init__": [[119, 125], ["cfg.copy", "isinstance", "type"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "dataset", ",", "interval", "=", "1", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", ".", "copy", "(", ")", "\n", "assert", "isinstance", "(", "dataset", ",", "Dataset", ")", ",", "\"dataset must be a Dataset object, not {}\"", ".", "format", "(", "type", "(", "dataset", ")", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "interval", "=", "interval", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.eval_hooks.DistEvalHook.after_train_epoch": [[126, 200], ["runner.logger.info", "runner.model.eval", "range", "torch.barrier", "torch.barrier", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "eval_hooks.DistEvalHook.every_n_epochs", "mmcv.ProgressBar", "len", "eval_hooks.to_cpu", "dict", "print", "torch.barrier", "torch.barrier", "range", "eval_hooks.DistEvalHook.evaluate", "os.join", "os.join", "mmcv.dump", "torch.barrier", "torch.barrier", "len", "len", "range", "mmcv.parallel.scatter", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "runner.model", "eval_hooks.disp_evaluation", "eval_hooks.DistEvalHook.process_conf", "range", "min", "os.join", "os.join", "mmcv.load", "range", "os.remove", "os.remove", "os.remove", "os.remove", "len", "mmcv.parallel.collate", "mmcv.ProgressBar.update", "len", "len", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "cost.cpu"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.to_cpu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval_hooks.DistFlowEvalHook.evaluate", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.eval_hooks.disp_evaluation", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.eval_hooks.DistStereoEvalHook.process_conf"], ["", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "not", "self", ".", "every_n_epochs", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "\n", "", "runner", ".", "logger", ".", "info", "(", "\n", "\"Start evaluation on {} dataset({} images).\"", ".", "format", "(", "self", ".", "dataset", ".", "name", ",", "len", "(", "self", ".", "dataset", ")", ")", "\n", ")", "\n", "runner", ".", "model", ".", "eval", "(", ")", "\n", "\n", "# get prog bar", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "self", ".", "dataset", ")", ")", "\n", "", "else", ":", "\n", "            ", "prog_bar", "=", "None", "\n", "\n", "", "results", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", "]", "\n", "for", "idx", "in", "range", "(", "runner", ".", "rank", ",", "len", "(", "self", ".", "dataset", ")", ",", "runner", ".", "world_size", ")", ":", "\n", "            ", "data", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "data_gpu", "=", "scatter", "(", "\n", "collate", "(", "[", "data", "]", ",", "samples_per_gpu", "=", "1", ")", ",", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", "\n", ")", "[", "0", "]", "\n", "\n", "# compute output", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "result", ",", "_", "=", "runner", ".", "model", "(", "data_gpu", ")", "\n", "disps", "=", "result", "[", "'disps'", "]", "\n", "costs", "=", "result", "[", "'costs'", "]", "\n", "\n", "# evaluation", "\n", "whole_error_dict", ",", "data_gpu", "=", "disp_evaluation", "(", "self", ".", "cfg", ",", "disps", ",", "data_gpu", ")", "\n", "\n", "result", "=", "{", "\n", "'Disparity'", ":", "disps", ",", "\n", "'GroundTruth'", ":", "data_gpu", "[", "'leftDisp'", "]", ",", "\n", "'Error'", ":", "whole_error_dict", ",", "\n", "}", "\n", "\n", "if", "self", ".", "cfg", ".", "model", ".", "eval", ".", "is_cost_return", ":", "\n", "                    ", "if", "self", ".", "cfg", ".", "model", ".", "eval", ".", "is_cost_to_cpu", ":", "\n", "                        ", "costs", "=", "[", "cost", ".", "cpu", "(", ")", "for", "cost", "in", "costs", "]", "\n", "", "result", "[", "'Cost'", "]", "=", "costs", "\n", "\n", "# if result contains image, as the process advanced, the cuda cache explodes soon.", "\n", "", "", "result", "=", "to_cpu", "(", "result", ")", "\n", "\n", "filter_result", "=", "dict", "(", ")", "\n", "filter_result", "[", "'Error'", "]", "=", "result", "[", "'Error'", "]", "\n", "if", "'Confidence'", "in", "result", ":", "\n", "                ", "filter_result", "[", "'Confidence'", "]", "=", "self", ".", "process_conf", "(", "result", ",", "bins_number", "=", "100", ")", "\n", "\n", "", "results", "[", "idx", "]", "=", "filter_result", "\n", "\n", "batch_size", "=", "runner", ".", "world_size", "\n", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "                ", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "", "", "", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "'\\n'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "min", "(", "runner", ".", "world_size", ",", "len", "(", "self", ".", "dataset", ")", ")", ")", ":", "\n", "                ", "tmp_file", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "\"temp_{}.pkl\"", ".", "format", "(", "i", ")", ")", "\n", "tmp_results", "=", "mmcv", ".", "load", "(", "tmp_file", ")", "\n", "for", "idx", "in", "range", "(", "i", ",", "len", "(", "results", ")", ",", "runner", ".", "world_size", ")", ":", "\n", "                    ", "results", "[", "idx", "]", "=", "tmp_results", "[", "idx", "]", "\n", "", "os", ".", "remove", "(", "tmp_file", ")", "\n", "", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "", "else", ":", "\n", "            ", "tmp_file", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "\"temp_{}.pkl\"", ".", "format", "(", "runner", ".", "rank", ")", ")", "\n", "mmcv", ".", "dump", "(", "results", ",", "tmp_file", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.eval_hooks.DistEvalHook.evaluate": [[201, 203], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.eval_hooks.DistStereoEvalHook.__init__": [[207, 210], ["eval_hooks.DistEvalHook.__init__", "dmb.visualization.stereo.ShowConf"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "dataset", ",", "interval", "=", "1", ")", ":", "\n", "        ", "super", "(", "DistStereoEvalHook", ",", "self", ")", ".", "__init__", "(", "cfg", ",", "dataset", ",", "interval", ")", "\n", "self", ".", "conf_tool", "=", "ShowConf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.eval_hooks.DistStereoEvalHook.evaluate": [[211, 242], ["eval_hooks.DistStereoEvalHook.eval_conf", "mmcv.runner.LogBuffer", "mmcv.runner.LogBuffer.average", "mmcv.runner.LogBuffer.output.keys", "eval_hooks.disp_output_evaluation_in_pandas", "runner.logger.info", "disp_output_evaluation_in_pandas.items", "runner.logger.info", "mmcv.runner.LogBuffer.clear", "mmcv.runner.LogBuffer.update", "isinstance", "log_items.append", "isinstance", "log_items.append", "log_items.append"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.eval_hooks.DistStereoEvalHook.eval_conf", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.eval_hooks.disp_output_evaluation_in_pandas"], ["", "def", "evaluate", "(", "self", ",", "runner", ",", "results", ")", ":", "\n", "        ", "self", ".", "eval_conf", "(", "runner", ",", "results", ",", "bins_number", "=", "100", ")", "\n", "\n", "error_log_buffer", "=", "LogBuffer", "(", ")", "\n", "for", "result", "in", "results", ":", "\n", "            ", "error_log_buffer", ".", "update", "(", "result", "[", "'Error'", "]", ")", "\n", "", "error_log_buffer", ".", "average", "(", ")", "\n", "\n", "# import to tensor-board", "\n", "for", "key", "in", "error_log_buffer", ".", "output", ".", "keys", "(", ")", ":", "\n", "            ", "runner", ".", "log_buffer", ".", "output", "[", "key", "]", "=", "error_log_buffer", ".", "output", "[", "key", "]", "\n", "\n", "# for better visualization, format into pandas", "\n", "", "format_output_dict", "=", "disp_output_evaluation_in_pandas", "(", "error_log_buffer", ".", "output", ")", "\n", "\n", "runner", ".", "logger", ".", "info", "(", "\"Epoch [{}] Evaluation Result: \\t\"", ".", "format", "(", "runner", ".", "epoch", "+", "1", ")", ")", "\n", "\n", "log_items", "=", "[", "]", "\n", "for", "key", ",", "val", "in", "format_output_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "pd", ".", "DataFrame", ")", ":", "\n", "                ", "log_items", ".", "append", "(", "\"\\n{}:\\n{} \\n\"", ".", "format", "(", "key", ",", "val", ")", ")", "\n", "", "elif", "isinstance", "(", "val", ",", "float", ")", ":", "\n", "                ", "val", "=", "\"{:.4f}\"", ".", "format", "(", "val", ")", "\n", "log_items", ".", "append", "(", "\"{}: {}\"", ".", "format", "(", "key", ",", "val", ")", ")", "\n", "", "else", ":", "\n", "                ", "log_items", ".", "append", "(", "\"{}: {}\"", ".", "format", "(", "key", ",", "val", ")", ")", "\n", "\n", "", "", "log_str", "=", "\", \"", ".", "join", "(", "log_items", ")", "\n", "runner", ".", "logger", ".", "info", "(", "log_str", ")", "\n", "runner", ".", "log_buffer", ".", "ready", "=", "True", "\n", "error_log_buffer", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.eval_hooks.DistStereoEvalHook.process_conf": [[244, 260], ["enumerate", "eval_hooks.DistStereoEvalHook.conf_tool.conf2hist", "counts.append", "bin_edges.append"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.conf2hist"], ["", "def", "process_conf", "(", "self", ",", "result", ",", "bins_number", "=", "100", ")", ":", "\n", "        ", "if", "'Confidence'", "not", "in", "result", ":", "\n", "            ", "return", "\n", "\n", "", "counts", "=", "[", "]", "\n", "bin_edges", "=", "[", "]", "\n", "# for each confidence map, statistic its confidence distribution, and stored in a list", "\n", "for", "i", ",", "conf", "in", "enumerate", "(", "result", "[", "'Confidence'", "]", ")", ":", "\n", "# hist and bin_edges", "\n", "            ", "count", ",", "bin_edge", "=", "self", ".", "conf_tool", ".", "conf2hist", "(", "conf", ",", "bins", "=", "bins_number", ")", "\n", "counts", ".", "append", "(", "count", ")", "\n", "bin_edges", ".", "append", "(", "bin_edge", ")", "\n", "\n", "", "return", "{", "\n", "'counts'", ":", "counts", ",", "\n", "'bin_edges'", ":", "bin_edges", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.eval_hooks.DistStereoEvalHook.eval_conf": [[262, 293], ["len", "numpy.zeros", "numpy.zeros", "range", "runner.logger.info", "enumerate", "eval_hooks.DistStereoEvalHook.conf_tool.hist2vis", "sum"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.show_result.ShowConf.hist2vis"], ["", "def", "eval_conf", "(", "self", ",", "runner", ",", "results", ",", "bins_number", "=", "100", ")", ":", "\n", "# results is a list, corresponds to each test sample,", "\n", "# for each sample, the result are saved as dict", "\n", "# if the first sample contains the keyword 'Confidence'", "\n", "        ", "if", "'Confidence'", "not", "in", "results", "[", "0", "]", ":", "\n", "            ", "return", "\n", "\n", "# each sample has several confidence map, i.e. bin_edges is a list,", "\n", "# with length = confidence map number", "\n", "", "conf_number", "=", "len", "(", "results", "[", "0", "]", "[", "'Confidence'", "]", "[", "'bin_edges'", "]", ")", "\n", "\n", "# for each confidence map, statistic its confidence distribution among all samples", "\n", "total_counts", "=", "np", ".", "zeros", "(", "(", "conf_number", ",", "bins_number", ")", ")", "\n", "total_bin_edges", "=", "np", ".", "zeros", "(", "(", "conf_number", ",", "bins_number", "+", "1", ")", ")", "\n", "for", "result", "in", "results", ":", "\n", "# enumerate each sample's every confidence map, and i is the index of confidence map", "\n", "            ", "for", "i", ",", "conf", "in", "enumerate", "(", "result", "[", "'Confidence'", "]", "[", "'bin_edges'", "]", ")", ":", "\n", "                ", "counts", ",", "bin_edges", "=", "result", "[", "'Confidence'", "]", "[", "'counts'", "]", "[", "i", "]", ",", "result", "[", "'Confidence'", "]", "[", "'bin_edges'", "]", "[", "i", "]", "\n", "# accumulate each confidence map's counts for all samples", "\n", "total_counts", "[", "i", "]", "=", "total_counts", "[", "i", "]", "+", "counts", "\n", "# each confidence map's bin_edges are same", "\n", "total_bin_edges", "[", "i", "]", "=", "bin_edges", "\n", "\n", "", "", "for", "i", "in", "range", "(", "conf_number", ")", ":", "\n", "            ", "total_counts", "[", "i", "]", "=", "total_counts", "[", "i", "]", "/", "sum", "(", "total_counts", "[", "i", "]", ")", "\n", "name", "=", "\"figure/confidence_histogram/{}\"", ".", "format", "(", "i", ")", "\n", "conf_hist", "=", "self", ".", "conf_tool", ".", "hist2vis", "(", "total_counts", "[", "i", "]", ",", "total_bin_edges", "[", "i", "]", ")", "\n", "runner", ".", "log_buffer", ".", "output", "[", "name", "]", "=", "conf_hist", "\n", "\n", "", "runner", ".", "logger", ".", "info", "(", "\"Epoch [{}] Confidence evaluation done!\"", ".", "format", "(", "runner", ".", "epoch", "+", "1", ")", ")", "\n", "runner", ".", "log_buffer", ".", "ready", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.eval_hooks.to_cpu": [[22, 32], ["isinstance", "TypeError", "tensor.detach().cpu", "isinstance", "error_msg.format", "isinstance", "type", "tensor.detach", "eval_hooks.to_cpu", "eval_hooks.to_cpu"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.to_cpu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.to_cpu"], ["def", "to_cpu", "(", "tensor", ")", ":", "\n", "    ", "error_msg", "=", "\"Tensor must contain tensors, dicts or lists; found {}\"", "\n", "if", "isinstance", "(", "tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "elif", "isinstance", "(", "tensor", ",", "container_abcs", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "key", ":", "to_cpu", "(", "tensor", "[", "key", "]", ")", "for", "key", "in", "tensor", "}", "\n", "", "elif", "isinstance", "(", "tensor", ",", "container_abcs", ".", "Sequence", ")", ":", "\n", "        ", "return", "[", "to_cpu", "(", "samples", ")", "for", "samples", "in", "tensor", "]", "\n", "\n", "", "raise", "TypeError", "(", "(", "error_msg", ".", "format", "(", "type", "(", "tensor", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.eval_hooks.disp_evaluation": [[34, 73], ["eval.remove_padding", "cfg.get", "eval.remove_padding", "eval.remove_padding", "eval.do_evaluation", "eval.do_evaluation.keys", "eval.do_occlusion_evaluation", "eval.do_occlusion_evaluation.keys"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.do_evaluation", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.eval.do_occlusion_evaluation"], ["", "def", "disp_evaluation", "(", "cfg", ",", "disps", ",", "data_gpu", ")", ":", "\n", "\n", "# remove the padding when data augmentation", "\n", "    ", "ori_size", "=", "data_gpu", "[", "'original_size'", "]", "\n", "disps", "=", "remove_padding", "(", "disps", ",", "ori_size", ")", "\n", "\n", "# process the ground truth disparity map", "\n", "data_gpu", "[", "'leftDisp'", "]", "=", "data_gpu", "[", "'leftDisp'", "]", "if", "'leftDisp'", "in", "data_gpu", "else", "None", "\n", "if", "data_gpu", "[", "'leftDisp'", "]", "is", "not", "None", ":", "\n", "        ", "data_gpu", "[", "'leftDisp'", "]", "=", "remove_padding", "(", "data_gpu", "[", "'leftDisp'", "]", ",", "ori_size", ")", "\n", "", "data_gpu", "[", "'rightDisp'", "]", "=", "data_gpu", "[", "'rightDisp'", "]", "if", "'rightDisp'", "in", "data_gpu", "else", "None", "\n", "if", "data_gpu", "[", "'rightDisp'", "]", "is", "not", "None", ":", "\n", "        ", "data_gpu", "[", "'rightDisp'", "]", "=", "remove_padding", "(", "data_gpu", "[", "'rightDisp'", "]", ",", "ori_size", ")", "\n", "\n", "", "leftDisp", "=", "data_gpu", "[", "'leftDisp'", "]", "\n", "rightDisp", "=", "data_gpu", "[", "'rightDisp'", "]", "\n", "\n", "# default only evaluate the first disparity map", "\n", "eval_disparity_id", "=", "cfg", ".", "get", "(", "'eval_disparity_id'", ",", "[", "0", "]", ")", "\n", "whole_error_dict", "=", "{", "}", "\n", "\n", "# process disparity metric", "\n", "for", "id", "in", "eval_disparity_id", ":", "\n", "        ", "all_error_dict", "=", "do_evaluation", "(", "\n", "disps", "[", "id", "]", ",", "leftDisp", ",", "cfg", ".", "model", ".", "eval", ".", "lower_bound", ",", "cfg", ".", "model", ".", "eval", ".", "upper_bound", ")", "\n", "\n", "for", "key", "in", "all_error_dict", ".", "keys", "(", ")", ":", "\n", "            ", "whole_error_dict", "[", "'metric_disparity_{}/all_'", ".", "format", "(", "id", ")", "+", "key", "]", "=", "all_error_dict", "[", "key", "]", "\n", "\n", "", "if", "cfg", ".", "model", ".", "eval", ".", "eval_occlusion", "and", "(", "leftDisp", "is", "not", "None", ")", "and", "(", "rightDisp", "is", "not", "None", ")", ":", "\n", "\n", "            ", "noc_occ_error_dict", "=", "do_occlusion_evaluation", "(", "\n", "disps", "[", "id", "]", ",", "leftDisp", ",", "rightDisp", ",", "\n", "cfg", ".", "model", ".", "eval", ".", "lower_bound", ",", "cfg", ".", "model", ".", "eval", ".", "upper_bound", ")", "\n", "\n", "for", "key", "in", "noc_occ_error_dict", ".", "keys", "(", ")", ":", "\n", "                ", "whole_error_dict", "[", "'metric_disparity_{}/'", ".", "format", "(", "id", ")", "+", "key", "]", "=", "noc_occ_error_dict", "[", "key", "]", "\n", "\n", "", "", "", "return", "whole_error_dict", ",", "data_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.eval_hooks.disp_output_evaluation_in_pandas": [[75, 115], ["output_dict.keys", "isinstance", "pandas.DataFrame.from_dict", "[].split", "key.split", "pandas_dict.keys", "pandas_dict[].keys", "[].split", "key.split", "pandas_dict.keys", "pandas_dict[].keys", "key.split", "key.split"], "function", ["None"], ["", "def", "disp_output_evaluation_in_pandas", "(", "output_dict", ")", ":", "\n", "    ", "processed_dict", "=", "{", "}", "\n", "pandas_dict", "=", "{", "}", "\n", "for", "key", "in", "output_dict", ".", "keys", "(", ")", ":", "\n", "# format value", "\n", "        ", "val", "=", "output_dict", "[", "key", "]", "\n", "\n", "if", "isinstance", "(", "val", ",", "float", ")", ":", "\n", "            ", "val", "=", "\"{:.4f}\"", ".", "format", "(", "val", ")", "\n", "\n", "", "if", "'metric_disparity'", "in", "key", ":", "# e.g. 'metric_disparity_0/all_epe'", "\n", "            ", "disparity_id", "=", "key", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "area", ",", "metric", "=", "key", ".", "split", "(", "'/'", ")", "[", "1", "]", ".", "split", "(", "'_'", ")", "\n", "\n", "# each disparity contains one pd.DataFrame, area as index, metric as columns", "\n", "if", "disparity_id", "not", "in", "pandas_dict", ".", "keys", "(", ")", ":", "\n", "                ", "pandas_dict", "[", "disparity_id", "]", "=", "{", "}", "\n", "", "if", "area", "not", "in", "pandas_dict", "[", "disparity_id", "]", ".", "keys", "(", ")", ":", "\n", "                ", "pandas_dict", "[", "disparity_id", "]", "[", "area", "]", "=", "{", "}", "\n", "", "pandas_dict", "[", "disparity_id", "]", "[", "area", "]", "[", "metric", "]", "=", "val", "\n", "\n", "", "elif", "'metric_confidence'", "in", "key", ":", "# e.g. 'metric_confidence_0/est_0'", "\n", "            ", "confidence_id", "=", "key", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "sparse_type", ",", "percent", "=", "key", ".", "split", "(", "'/'", ")", "[", "1", "]", ".", "split", "(", "'_'", ")", "\n", "\n", "# each confidence contains one pd.DataFrame, sparse_type as index, percent as columns", "\n", "if", "confidence_id", "not", "in", "pandas_dict", ".", "keys", "(", ")", ":", "\n", "                ", "pandas_dict", "[", "confidence_id", "]", "=", "{", "}", "\n", "", "if", "sparse_type", "not", "in", "pandas_dict", "[", "confidence_id", "]", ".", "keys", "(", ")", ":", "\n", "                ", "pandas_dict", "[", "confidence_id", "]", "[", "sparse_type", "]", "=", "{", "}", "\n", "", "pandas_dict", "[", "confidence_id", "]", "[", "sparse_type", "]", "[", "percent", "]", "=", "val", "\n", "\n", "", "else", ":", "\n", "            ", "processed_dict", "[", "key", "]", "=", "val", "\n", "\n", "# generate pandas", "\n", "", "", "for", "key", "in", "pandas_dict", ":", "\n", "        ", "processed_dict", "[", "key", "]", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "pandas_dict", "[", "key", "]", ",", "orient", "=", "'index'", ")", "\n", "\n", "", "return", "processed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.pixel_error.calc_error": [[6, 73], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "est_disp.clone().cpu.clone().cpu", "gt_disp.clone().cpu.clone().cpu", "torch.ones", "torch.ones.detach_", "torch.abs", "torch.ones.float().sum", "torch.abs.float().mean", "torch.is_tensor", "torch.is_tensor", "abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.is_tensor", "torch.is_tensor", "est_disp.clone().cpu.clone", "gt_disp.clone().cpu.clone", "torch.ones.float().sum", "torch.ones.float", "torch.gt().float", "torch.gt().float", "torch.gt().float", "torch.gt().float", "torch.abs.float", "torch.ones.float", "torch.gt", "torch.gt", "torch.gt", "torch.gt"], "function", ["None"], ["def", "calc_error", "(", "est_disp", "=", "None", ",", "gt_disp", "=", "None", ",", "lb", "=", "None", ",", "ub", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        est_disp (Tensor): in [BatchSize, Channel, Height, Width] or\n            [BatchSize, Height, Width] or [Height, Width] layout\n        gt_disp (Tensor): in [BatchSize, Channel, Height, Width] or\n            [BatchSize, Height, Width] or [Height, Width] layout\n        lb (scalar): the lower bound of disparity you want to mask out\n        ub (scalar): the upper bound of disparity you want to mask out\n    Output:\n        dict: the error of 1px, 2px, 3px, 5px, in percent,\n            range [0,100] and average error epe\n    \"\"\"", "\n", "error1", "=", "torch", ".", "Tensor", "(", "[", "0.", "]", ")", "\n", "error2", "=", "torch", ".", "Tensor", "(", "[", "0.", "]", ")", "\n", "error3", "=", "torch", ".", "Tensor", "(", "[", "0.", "]", ")", "\n", "error5", "=", "torch", ".", "Tensor", "(", "[", "0.", "]", ")", "\n", "epe", "=", "torch", ".", "Tensor", "(", "[", "0.", "]", ")", "\n", "\n", "if", "(", "not", "torch", ".", "is_tensor", "(", "est_disp", ")", ")", "or", "(", "not", "torch", ".", "is_tensor", "(", "gt_disp", ")", ")", ":", "\n", "        ", "return", "{", "\n", "'1px'", ":", "error1", "*", "100", ",", "\n", "'2px'", ":", "error2", "*", "100", ",", "\n", "'3px'", ":", "error3", "*", "100", ",", "\n", "'5px'", ":", "error5", "*", "100", ",", "\n", "'epe'", ":", "epe", "\n", "}", "\n", "\n", "", "assert", "torch", ".", "is_tensor", "(", "est_disp", ")", "and", "torch", ".", "is_tensor", "(", "gt_disp", ")", "\n", "assert", "est_disp", ".", "shape", "==", "gt_disp", ".", "shape", "\n", "\n", "est_disp", "=", "est_disp", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "gt_disp", "=", "gt_disp", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "mask", "=", "torch", ".", "ones", "(", "gt_disp", ".", "shape", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "if", "lb", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", "&", "(", "gt_disp", ">", "lb", ")", "\n", "", "if", "ub", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", "&", "(", "gt_disp", "<", "ub", ")", "\n", "", "mask", ".", "detach_", "(", ")", "\n", "if", "abs", "(", "mask", ".", "float", "(", ")", ".", "sum", "(", ")", ")", "<", "1.0", ":", "\n", "        ", "return", "{", "\n", "'1px'", ":", "error1", "*", "100", ",", "\n", "'2px'", ":", "error2", "*", "100", ",", "\n", "'3px'", ":", "error3", "*", "100", ",", "\n", "'5px'", ":", "error5", "*", "100", ",", "\n", "'epe'", ":", "epe", "\n", "}", "\n", "\n", "", "gt_disp", "=", "gt_disp", "[", "mask", "]", "\n", "est_disp", "=", "est_disp", "[", "mask", "]", "\n", "\n", "abs_error", "=", "torch", ".", "abs", "(", "gt_disp", "-", "est_disp", ")", "\n", "total_num", "=", "mask", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "\n", "error1", "=", "torch", ".", "sum", "(", "torch", ".", "gt", "(", "abs_error", ",", "1", ")", ".", "float", "(", ")", ")", "/", "total_num", "\n", "error2", "=", "torch", ".", "sum", "(", "torch", ".", "gt", "(", "abs_error", ",", "2", ")", ".", "float", "(", ")", ")", "/", "total_num", "\n", "error3", "=", "torch", ".", "sum", "(", "torch", ".", "gt", "(", "abs_error", ",", "3", ")", ".", "float", "(", ")", ")", "/", "total_num", "\n", "error5", "=", "torch", ".", "sum", "(", "torch", ".", "gt", "(", "abs_error", ",", "5", ")", ".", "float", "(", ")", ")", "/", "total_num", "\n", "epe", "=", "abs_error", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "{", "\n", "'1px'", ":", "error1", "*", "100", ",", "\n", "'2px'", ":", "error2", "*", "100", ",", "\n", "'3px'", ":", "error3", "*", "100", ",", "\n", "'5px'", ":", "error5", "*", "100", ",", "\n", "'epe'", ":", "epe", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.test_scene_flow.TestSceneFlowDataset.setUp": [[12, 27], ["dict", "mmcv.Config", "dmb.data.datasets.stereo.builder.build_stereo_dataset", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.builder.build_stereo_dataset"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "config", "=", "dict", "(", "\n", "data", "=", "dict", "(", "\n", "train", "=", "dict", "(", "\n", "type", "=", "'SceneFlow'", ",", "\n", "data_root", "=", "'/home/youmin/data/StereoMatching/SceneFlow/'", ",", "\n", "annfile", "=", "'/home/youmin/data/annotations/SceneFlow/cleanpass_train.json'", ",", "\n", "input_shape", "=", "[", "256", ",", "512", "]", ",", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", "\n", ")", "\n", ")", "\n", ")", "\n", "cfg", "=", "Config", "(", "config", ")", "\n", "self", ".", "dataset", "=", "build_dataset", "(", "cfg", ",", "'train'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.test_scene_flow.TestSceneFlowDataset.test_anno_loader": [[28, 31], ["print", "print"], "methods", ["None"], ["", "def", "test_anno_loader", "(", "self", ")", ":", "\n", "        ", "print", "(", "self", ".", "dataset", ")", "\n", "print", "(", "self", ".", "dataset", ".", "data_list", "[", "111", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.test_scene_flow.TestSceneFlowDataset.test_get_item": [[32, 43], ["range", "isinstance", "zip", "sample.keys", "sample.values", "isinstance", "isinstance", "print", "print", "print"], "methods", ["None"], ["", "def", "test_get_item", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "sample", "=", "self", ".", "dataset", "[", "i", "]", "\n", "assert", "isinstance", "(", "sample", ",", "dict", ")", "\n", "for", "k", ",", "v", "in", "zip", "(", "sample", ".", "keys", "(", ")", ",", "sample", ".", "values", "(", ")", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "print", "(", "k", ",", "': with shape'", ",", "v", ".", "shape", ")", "\n", "", "if", "isinstance", "(", "v", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                    ", "print", "(", "k", ",", "': '", ",", "v", ")", "\n", "", "if", "v", "is", "None", ":", "\n", "                    ", "print", "(", "k", ",", "' is None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.test_scene_flow.TestSceneFlowDataset.test_all_data": [[44, 51], ["tqdm", "range", "len", "print"], "methods", ["None"], ["", "", "", "", "def", "test_all_data", "(", "self", ")", ":", "\n", "        ", "from", "tqdm", "import", "tqdm", "\n", "for", "idx", "in", "tqdm", "(", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "item", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "", "except", "ValueError", ":", "\n", "                ", "print", "(", "idx", ",", "self", ".", "dataset", ".", "data_list", "[", "idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.test_kitti.TestKITTIDataset.setUp": [[12, 31], ["dict", "mmcv.Config", "dmb.data.datasets.stereo.build_stereo_dataset", "pdb.set_trace", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.builder.build_stereo_dataset"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "config", "=", "dict", "(", "\n", "data", "=", "dict", "(", "\n", "test", "=", "dict", "(", "\n", "type", "=", "'KITTI-2015'", ",", "\n", "data_root", "=", "'datasets/KITTI-2015/'", ",", "\n", "annfile", "=", "'datasets/KITTI-2015/annotations/full_eval.json'", ",", "\n", "input_shape", "=", "[", "384", ",", "1248", "]", ",", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", "\n", "toRAM", "=", "False", ",", "\n", ")", "\n", ")", "\n", ")", "\n", "cfg", "=", "Config", "(", "config", ")", "\n", "self", ".", "dataset", "=", "build_dataset", "(", "cfg", ",", "'test'", ")", "\n", "\n", "import", "pdb", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.test_kitti.TestKITTIDataset.test_anno_loader": [[32, 36], ["print", "print", "print"], "methods", ["None"], ["", "def", "test_anno_loader", "(", "self", ")", ":", "\n", "        ", "print", "(", "self", ".", "dataset", ")", "\n", "print", "(", "'toRAM: '", ",", "self", ".", "dataset", ".", "toRAM", ")", "\n", "print", "(", "self", ".", "dataset", ".", "data_list", "[", "31", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.test_kitti.TestKITTIDataset.test_get_item": [[37, 51], ["range", "isinstance", "print", "print", "print", "zip", "sample.keys", "sample.values", "isinstance", "isinstance", "print", "print", "print"], "methods", ["None"], ["", "def", "test_get_item", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "sample", "=", "self", ".", "dataset", "[", "i", "]", "\n", "assert", "isinstance", "(", "sample", ",", "dict", ")", "\n", "print", "(", "\"*\"", "*", "20", ")", "\n", "print", "(", "\"Before scatter\"", ")", "\n", "print", "(", "\"*\"", "*", "20", ")", "\n", "for", "k", ",", "v", "in", "zip", "(", "sample", ".", "keys", "(", ")", ",", "sample", ".", "values", "(", ")", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "print", "(", "k", ",", "': with shape'", ",", "v", ".", "shape", ")", "\n", "", "if", "isinstance", "(", "v", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                    ", "print", "(", "k", ",", "': '", ",", "v", ")", "\n", "", "if", "v", "is", "None", ":", "\n", "                    ", "print", "(", "k", ",", "' is None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.save_result.SaveResultTool.__call__": [[13, 32], ["dmb.visualization.flow.show_result.ShowResultTool", "dmb.visualization.flow.show_result.ShowResultTool.", "dmb.visualization.flow.show_result.ShowResultTool.keys", "os.join", "os.join", "mmcv.mkdir_or_exist", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "dmb.visualization.flow.show_result.ShowResultTool.keys", "os.join", "os.join", "mmcv.mkdir_or_exist", "matplotlib.imsave", "dmb.visualization.flow.show_result.ShowResultTool.keys", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "mmcv.mkdir_or_exist", "matplotlib.imsave", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.visualization.__init__.ShowResultTool"], ["    ", "def", "__call__", "(", "self", ",", "result", ",", "out_dir", ",", "image_name", ")", ":", "\n", "        ", "result_tool", "=", "ShowResultTool", "(", ")", "\n", "result", "=", "result_tool", "(", "result", ",", "color_map", "=", "'gray'", ",", "bins", "=", "100", ")", "\n", "\n", "if", "'GrayDisparity'", "in", "result", ".", "keys", "(", ")", ":", "\n", "            ", "grayEstDisp", "=", "result", "[", "'GrayDisparity'", "]", "\n", "gray_save_path", "=", "osp", ".", "join", "(", "out_dir", ",", "'disp_0'", ")", "\n", "mkdir_or_exist", "(", "gray_save_path", ")", "\n", "skimage", ".", "io", ".", "imsave", "(", "osp", ".", "join", "(", "gray_save_path", ",", "image_name", ")", ",", "(", "grayEstDisp", "*", "256", ")", ".", "astype", "(", "'uint16'", ")", ")", "\n", "\n", "", "if", "'ColorDisparity'", "in", "result", ".", "keys", "(", ")", ":", "\n", "            ", "colorEstDisp", "=", "result", "[", "'ColorDisparity'", "]", "\n", "color_save_path", "=", "osp", ".", "join", "(", "out_dir", ",", "'color_disp'", ")", "\n", "mkdir_or_exist", "(", "color_save_path", ")", "\n", "plt", ".", "imsave", "(", "osp", ".", "join", "(", "color_save_path", ",", "image_name", ")", ",", "colorEstDisp", ",", "cmap", "=", "plt", ".", "cm", ".", "hot", ")", "\n", "\n", "", "if", "'GroupColor'", "in", "result", ".", "keys", "(", ")", ":", "\n", "            ", "group_save_path", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'group_disp'", ")", "\n", "mkdir_or_exist", "(", "group_save_path", ")", "\n", "plt", ".", "imsave", "(", "osp", ".", "join", "(", "group_save_path", ",", "image_name", ")", ",", "result", "[", "'GroupColor'", "]", ",", "cmap", "=", "plt", ".", "cm", ".", "hot", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowFlow.__call__": [[33, 60], ["show_result.ShowFlow.getItem", "show_result.ShowFlow.getFirstItem", "show_result.ShowFlow.vis_group_color", "show_result.ShowFlow.vis_per_flow", "process_result.update", "process_result.update", "show_result.ShowFlow.vis_per_flow", "process_result.update", "show_result.ShowFlow.get_gray_and_color_flow", "process_result.update", "process_result.update"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowFlow.getItem", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowFlow.getFirstItem", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowFlow.vis_group_color", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowFlow.vis_per_flow", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowFlow.vis_per_flow", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowFlow.get_gray_and_color_flow"], ["\n", "def", "__call__", "(", "self", ",", "result", ")", ":", "\n", "\n", "        ", "self", ".", "result", "=", "result", "\n", "self", ".", "getItem", "(", ")", "\n", "\n", "process_result", "=", "{", "}", "\n", "\n", "if", "self", ".", "estDisp", "is", "not", "None", ":", "\n", "            ", "firstDisp", "=", "self", ".", "getFirstItem", "(", "self", ".", "estDisp", ")", "\n", "if", "firstDisp", "is", "not", "None", ":", "\n", "                ", "grayDisp", ",", "colorDisp", "=", "self", ".", "get_gray_and_color_disp", "(", "firstDisp", ",", "self", ".", "max_disp", ")", "\n", "process_result", ".", "update", "(", "GrayDisparity", "=", "grayDisp", ")", "\n", "process_result", ".", "update", "(", "ColorDisparity", "=", "colorDisp", ")", "\n", "", "group", "=", "self", ".", "vis_group_color", "(", "self", ".", "estDisp", "[", "0", "]", ",", "self", ".", "gtDisp", ",", "self", ".", "leftImage", ",", "self", ".", "rightImage", ")", "\n", "estDispColor", "=", "self", ".", "vis_per_disp", "(", "self", ".", "estDisp", ",", "self", ".", "max_disp", ")", "\n", "process_result", ".", "update", "(", "Disparity", "=", "estDispColor", ")", "\n", "process_result", ".", "update", "(", "GroupColor", "=", "group", ")", "\n", "\n", "", "if", "self", ".", "gtDisp", "is", "not", "None", ":", "\n", "            ", "gtDispColor", "=", "self", ".", "vis_per_disp", "(", "self", ".", "gtDisp", ",", "self", ".", "max_disp", ")", "\n", "process_result", ".", "update", "(", "GroundTruth", "=", "gtDispColor", ")", "\n", "\n", "", "return", "process_result", "\n", "\n", "", "def", "getItem", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowFlow.getItem": [[61, 88], ["dmb.visualization.flow.vis.flow_max_rad", "show_result.ShowFlow.result.keys", "isinstance", "show_result.ShowFlow.result.keys", "show_result.ShowFlow.result.keys", "show_result.ShowFlow.result.keys", "dmb.visualization.flow.vis.chw_to_hwc"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.flow_max_rad", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.chw_to_hwc"], ["        ", "if", "\"GroundTruth\"", "in", "self", ".", "result", ".", "keys", "(", ")", "and", "self", ".", "result", "[", "'GroundTruth'", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "gtDisp", "=", "self", ".", "result", "[", "'GroundTruth'", "]", "\n", "assert", "isinstance", "(", "self", ".", "gtDisp", ",", "torch", ".", "Tensor", ")", "\n", "self", ".", "max_disp", "=", "self", ".", "result", "[", "'GroundTruth'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "max", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_disp", "=", "None", "\n", "self", ".", "gtDisp", "=", "None", "\n", "\n", "", "if", "'Disparity'", "in", "self", ".", "result", ".", "keys", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "result", "[", "'Disparity'", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "self", ".", "estDisp", "=", "self", ".", "result", "[", "'Disparity'", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "estDisp", "=", "[", "self", ".", "result", "[", "'Disparity'", "]", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "estDisp", "=", "None", "\n", "\n", "", "if", "'leftImage'", "in", "self", ".", "result", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "leftImage", "=", "self", ".", "result", "[", "'leftImage'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "leftImage", "=", "None", "\n", "", "if", "'rightImage'", "in", "self", ".", "result", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "rightImage", "=", "self", ".", "result", "[", "'rightImage'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "rightImage", "=", "None", "\n", "\n", "", "", "def", "getFirstItem", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "container_abcs", ".", "Sequence", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowFlow.getFirstItem": [[89, 98], ["isinstance", "isinstance", "isinstance", "item.keys"], "methods", ["None"], ["            ", "return", "item", "[", "0", "]", "\n", "", "if", "isinstance", "(", "item", ",", "container_abcs", ".", "Mapping", ")", ":", "\n", "            ", "for", "key", "in", "item", ".", "keys", "(", ")", ":", "\n", "                ", "return", "item", "[", "key", "]", "\n", "", "", "if", "isinstance", "(", "item", ",", "(", "np", ".", "ndarray", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "            ", "return", "item", "\n", "", "return", "None", "\n", "\n", "# For tensorboard log disparity map", "\n", "", "def", "vis_per_disp", "(", "self", ",", "Disp", ",", "max_disp", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowFlow.vis_per_flow": [[100, 111], ["isinstance", "TypeError", "dmb.visualization.flow.vis.tensor_to_color", "isinstance", "error_msg.format", "Flow.clone", "isinstance", "type", "show_result.ShowFlow.vis_per_flow", "show_result.ShowFlow.vis_per_flow"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.tensor_to_color", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowFlow.vis_per_flow", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowFlow.vis_per_flow"], ["        ", "error_msg", "=", "\"Disparity must contain tensors, dicts or lists; found {}\"", "\n", "if", "isinstance", "(", "Disp", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "tensor_to_color", "(", "Disp", ".", "clone", "(", ")", ",", "max_disp", ")", "\n", "", "elif", "isinstance", "(", "Disp", ",", "container_abcs", ".", "Mapping", ")", ":", "\n", "            ", "return", "{", "key", ":", "self", ".", "vis_per_disp", "(", "Disp", "[", "key", "]", ",", "max_disp", ")", "for", "key", "in", "Disp", "}", "\n", "", "elif", "isinstance", "(", "Disp", ",", "container_abcs", ".", "Sequence", ")", ":", "\n", "            ", "return", "[", "self", ".", "vis_per_disp", "(", "samples", ",", "max_disp", ")", "for", "samples", "in", "Disp", "]", "\n", "\n", "", "raise", "TypeError", "(", "(", "error_msg", ".", "format", "(", "type", "(", "Disp", ")", ")", ")", ")", "\n", "\n", "# For saving disparity map", "\n", "", "def", "get_gray_and_color_disp", "(", "self", ",", "Disp", ",", "max_disp", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowFlow.get_gray_and_color_flow": [[113, 130], ["isinstance", "torch.is_tensor", "dmb.visualization.flow.vis.chw_to_hwc", "Flow.clone().detach().cpu.clone().detach().cpu.copy", "dmb.visualization.flow.vis.flow_to_color", "Flow.clone().detach().cpu.clone().detach().cpu.clone().detach().cpu", "len", "Flow.clone().detach().cpu.clone().detach().cpu.copy", "Flow.clone().detach().cpu.clone().detach().cpu.clone().detach", "Flow.clone().detach().cpu.clone().detach().cpu.clone"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.chw_to_hwc", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.flow_to_color"], ["\n", "if", "torch", ".", "is_tensor", "(", "Disp", ")", ":", "\n", "            ", "Disp", "=", "Disp", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "Disp", ".", "ndim", "==", "3", ":", "\n", "            ", "Disp", "=", "Disp", "[", "0", ",", ":", ",", ":", "]", "\n", "", "elif", "Disp", ".", "ndim", "==", "4", ":", "\n", "            ", "Disp", "=", "Disp", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "", "grayDisp", "=", "Disp", ".", "copy", "(", ")", "\n", "colorDisp", "=", "disp_to_color", "(", "Disp", ".", "copy", "(", ")", ",", "max_disp", "=", "max_disp", ")", "/", "255.0", "\n", "colorDisp", "=", "colorDisp", ".", "clip", "(", "0.", ",", "1.", ")", "\n", "\n", "return", "grayDisp", ",", "colorDisp", "\n", "\n", "", "def", "vis_group_color", "(", "self", ",", "estDisp", ",", "gtDisp", "=", "None", ",", "leftImage", "=", "None", ",", "rightImage", "=", "None", ",", "save_path", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowFlow.vis_group_color": [[131, 162], ["isinstance", "torch.is_tensor", "dmb.visualization.flow.vis.chw_to_hwc", "dmb.visualization.flow.vis.chw_to_hwc", "dmb.visualization.flow.vis.group_color", "estFlow.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone().detach().cpu().numpy", "isinstance", "torch.is_tensor", "gtFlow.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone().detach().cpu().numpy", "estFlow.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone().detach().cpu", "gtFlow.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone().detach().cpu", "estFlow.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone().detach", "gtFlow.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone().detach", "estFlow.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone", "gtFlow.clone().detach().cpu().numpy.clone().detach().cpu().numpy.clone"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.chw_to_hwc", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.chw_to_hwc", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.group_color"], ["\n", "assert", "isinstance", "(", "estDisp", ",", "(", "np", ".", "ndarray", ",", "torch", ".", "Tensor", ")", ")", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "estDisp", ")", ":", "\n", "            ", "estDisp", "=", "estDisp", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "estDisp", ".", "ndim", "==", "3", ":", "\n", "            ", "estDisp", "=", "estDisp", "[", "0", ",", ":", ",", ":", "]", "\n", "", "elif", "estDisp", ".", "ndim", "==", "4", ":", "\n", "            ", "estDisp", "=", "estDisp", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "", "if", "gtDisp", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "gtDisp", ",", "(", "np", ".", "ndarray", ",", "torch", ".", "Tensor", ")", ")", "\n", "if", "torch", ".", "is_tensor", "(", "gtDisp", ")", ":", "\n", "                ", "gtDisp", "=", "gtDisp", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "gtDisp", ".", "ndim", "==", "3", ":", "\n", "                ", "gtDisp", "=", "gtDisp", "[", "0", ",", ":", ",", ":", "]", "\n", "", "elif", "gtDisp", ".", "ndim", "==", "4", ":", "\n", "                ", "gtDisp", "=", "gtDisp", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "", "", "return", "group_color", "(", "estDisp", ",", "gtDisp", ",", "leftImage", ",", "rightImage", ",", "save_path", ")", "\n", "\n", "\n", "", "", "class", "ShowConf", "(", "object", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowResultTool.__init__": [[166, 168], ["show_result.ShowFlow"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.show_result.ShowResultTool.__call__": [[169, 173], ["process_result.update", "show_result.ShowResultTool.show_flow_tool"], "methods", ["None"], ["\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis_hooks.DistVisHook.__init__": [[53, 60], ["cfg.copy", "isinstance", "TypeError", "type"], "methods", ["None"], ["", "if", "pred_item", "==", "'ConfidenceHistogram'", ":", "\n", "            ", "log_result", "[", "'figure/'", "+", "log_name", "+", "'_histogram'", "]", "=", "result", "[", "'ConfidenceHistogram'", "]", "\n", "# save confidence histogram", "\n", "conf_save_path", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "image_name", ",", "'conf_hist_{}.png'", ".", "format", "(", "epoch", ")", ")", "\n", "log_result", "[", "'figure/'", "+", "log_name", "+", "'_histogram'", "]", "[", "0", "]", ".", "savefig", "(", "conf_save_path", ")", "\n", "\n", "", "", "return", "log_result", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis_hooks.DistVisHook.after_train_epoch": [[61, 139], ["runner.logger.info", "runner.model.eval", "range", "torch.barrier", "torch.barrier", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "vis_hooks.DistVisHook.every_n_epochs", "mmcv.ProgressBar", "len", "imageio.imread().astype", "imageio.imread().astype", "vis_hooks.prepare_visualize", "print", "torch.barrier", "torch.barrier", "range", "vis_hooks.DistVisHook.visualize", "os.join", "os.join", "mmcv.dump", "torch.barrier", "torch.barrier", "len", "len", "range", "mmcv.parallel.scatter", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "runner.model", "dmb.data.datasets.evaluation.flow.eval.remove_padding", "item[].split", "range", "min", "os.join", "os.join", "mmcv.load", "range", "os.remove", "os.remove", "os.remove", "os.remove", "len", "mmcv.parallel.collate", "dmb.data.datasets.evaluation.flow.eval.remove_padding", "imageio.imread", "imageio.imread", "mmcv.ProgressBar.update", "len", "len", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "os.join", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis_hooks.prepare_visualize", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis_hooks.DistFlowVisHook.visualize", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding"], ["\n", "", "class", "DistVisHook", "(", "Hook", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "dataset", ",", "cfg", ",", "interval", "=", "1", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", ".", "copy", "(", ")", "\n", "if", "isinstance", "(", "dataset", ",", "Dataset", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "dataset", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"dataset must be a Dataset object, not {}\"", ".", "format", "(", "type", "(", "dataset", ")", ")", ")", "\n", "", "self", ".", "interval", "=", "interval", "\n", "\n", "", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "not", "self", ".", "every_n_epochs", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "\n", "", "runner", ".", "logger", ".", "info", "(", "\n", "\"Start Visualizing on {} dataset({} images).\"", ".", "format", "(", "self", ".", "dataset", ".", "name", ",", "len", "(", "self", ".", "dataset", ")", ")", "\n", ")", "\n", "\n", "# get prog bar", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "self", ".", "dataset", ")", ")", "\n", "", "else", ":", "\n", "            ", "prog_bar", "=", "None", "\n", "\n", "", "runner", ".", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", "]", "\n", "for", "idx", "in", "range", "(", "runner", ".", "rank", ",", "len", "(", "self", ".", "dataset", ")", ",", "runner", ".", "world_size", ")", ":", "\n", "            ", "data", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "data_gpu", "=", "scatter", "(", "\n", "collate", "(", "[", "data", "]", ",", "samples_per_gpu", "=", "1", ")", ",", "\n", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", "\n", ")", "[", "0", "]", "\n", "\n", "# compute output", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "ori_result", ",", "_", "=", "runner", ".", "model", "(", "data_gpu", ")", "\n", "\n", "# remove the padding when data augmentation", "\n", "disps", "=", "ori_result", "[", "'disps'", "]", "\n", "costs", "=", "ori_result", "[", "'costs'", "]", "\n", "\n", "ori_size", "=", "data_gpu", "[", "'original_size'", "]", "\n", "disps", "=", "remove_padding", "(", "disps", ",", "ori_size", ")", "\n", "target", "=", "data_gpu", "[", "'leftDisp'", "]", "if", "'leftDisp'", "in", "data_gpu", "else", "None", "\n", "if", "target", "is", "not", "None", ":", "\n", "                    ", "target", "=", "remove_padding", "(", "target", ",", "ori_size", ")", "\n", "\n", "", "result", "=", "{", "\n", "'Disparity'", ":", "disps", ",", "\n", "'GroundTruth'", ":", "target", ",", "\n", "}", "\n", "\n", "if", "hasattr", "(", "self", ".", "cfg", ".", "model", ",", "'cmn'", ")", ":", "\n", "# confidence measurement network", "\n", "                    ", "confs", "=", "ori_result", "[", "'confs'", "]", "\n", "confs", "=", "remove_padding", "(", "confs", ",", "ori_size", ")", "\n", "result", ".", "update", "(", "Confidence", "=", "confs", ")", "\n", "\n", "", "if", "self", ".", "cfg", ".", "model", ".", "eval", ".", "is_cost_return", ":", "\n", "                    ", "if", "self", ".", "cfg", ".", "model", ".", "eval", ".", "is_cost_to_cpu", ":", "\n", "                        ", "costs", "=", "[", "cost", ".", "cpu", "(", ")", "for", "cost", "in", "costs", "]", "\n", "", "result", "[", "'Cost'", "]", "=", "costs", "\n", "\n", "# convert result to suitable visualization image", "\n", "", "", "item", "=", "self", ".", "dataset", ".", "data_list", "[", "idx", "]", "\n", "result", "[", "'leftImage'", "]", "=", "imread", "(", "\n", "osp", ".", "join", "(", "self", ".", "cfg", ".", "data", ".", "vis", ".", "data_root", ",", "item", "[", "'left_image_path'", "]", ")", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "result", "[", "'rightImage'", "]", "=", "imread", "(", "\n", "osp", ".", "join", "(", "self", ".", "cfg", ".", "data", ".", "vis", ".", "data_root", ",", "item", "[", "'right_image_path'", "]", ")", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "image_name", "=", "item", "[", "'left_image_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "result", "=", "prepare_visualize", "(", "result", ",", "runner", ".", "epoch", "+", "1", ",", "self", ".", "cfg", ".", "work_dir", ",", "image_name", ")", "\n", "\n", "results", "[", "idx", "]", "=", "result", "\n", "\n", "batch_size", "=", "runner", ".", "world_size", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis_hooks.DistVisHook.visualize": [[140, 142], ["None"], "methods", ["None"], ["if", "runner", ".", "rank", "==", "0", ":", "\n", "                ", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "prog_bar", ".", "update", "(", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis_hooks.DistFlowVisHook.visualize": [[147, 159], ["runner.logger.info", "result.keys"], "methods", ["None"], ["for", "i", "in", "range", "(", "1", ",", "min", "(", "runner", ".", "world_size", ",", "len", "(", "self", ".", "dataset", ")", ")", ")", ":", "\n", "                ", "tmp_file", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'temp_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "tmp_results", "=", "mmcv", ".", "load", "(", "tmp_file", ")", "\n", "for", "idx", "in", "range", "(", "i", ",", "len", "(", "results", ")", ",", "runner", ".", "world_size", ")", ":", "\n", "                    ", "results", "[", "idx", "]", "=", "tmp_results", "[", "idx", "]", "\n", "", "os", ".", "remove", "(", "tmp_file", ")", "\n", "", "self", ".", "visualize", "(", "runner", ",", "results", ")", "\n", "", "else", ":", "\n", "            ", "tmp_file", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'temp_{}.pkl'", ".", "format", "(", "runner", ".", "rank", ")", ")", "\n", "mmcv", ".", "dump", "(", "results", ",", "tmp_file", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "\n", "", "dist", ".", "barrier", "(", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis_hooks.to_cpu": [[22, 32], ["isinstance", "TypeError", "tensor.detach().cpu", "isinstance", "error_msg.format", "isinstance", "type", "tensor.detach", "vis_hooks.to_cpu", "vis_hooks.to_cpu"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.to_cpu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.to_cpu"], ["def", "to_cpu", "(", "tensor", ")", ":", "\n", "    ", "error_msg", "=", "\"Tensor must contain tensors, dicts or lists; found {}\"", "\n", "if", "isinstance", "(", "tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "elif", "isinstance", "(", "tensor", ",", "container_abcs", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "key", ":", "to_cpu", "(", "tensor", "[", "key", "]", ")", "for", "key", "in", "tensor", "}", "\n", "", "elif", "isinstance", "(", "tensor", ",", "container_abcs", ".", "Sequence", ")", ":", "\n", "        ", "return", "[", "to_cpu", "(", "samples", ")", "for", "samples", "in", "tensor", "]", "\n", "\n", "", "raise", "TypeError", "(", "(", "error_msg", ".", "format", "(", "type", "(", "tensor", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis_hooks.prepare_visualize": [[33, 49], ["dmb.visualization.flow.show_result.ShowResultTool", "dmb.visualization.flow.show_result.ShowResultTool.", "mmcv.mkdir_or_exist", "os.path.join", "os.path.join", "matplotlib.imsave", "result_tool.keys", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.visualization.__init__.ShowResultTool"], ["", "def", "prepare_visualize", "(", "result", ",", "epoch", ",", "work_dir", ",", "image_name", ")", ":", "\n", "    ", "result_tool", "=", "ShowResultTool", "(", ")", "\n", "result", "=", "result_tool", "(", "result", ",", "color_map", "=", "'gray'", ",", "bins", "=", "100", ")", "\n", "mkdir_or_exist", "(", "os", ".", "path", ".", "join", "(", "work_dir", ",", "image_name", ")", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "image_name", ",", "'{}.png'", ".", "format", "(", "epoch", ")", ")", "\n", "plt", ".", "imsave", "(", "save_path", ",", "result", "[", "'GroupColor'", "]", ",", "cmap", "=", "plt", ".", "cm", ".", "hot", ")", "\n", "\n", "log_result", "=", "{", "}", "\n", "for", "pred_item", "in", "result", ".", "keys", "(", ")", ":", "\n", "        ", "log_name", "=", "image_name", "+", "'/'", "+", "pred_item", "\n", "if", "pred_item", "==", "'Disparity'", ":", "\n", "            ", "log_result", "[", "'image/'", "+", "log_name", "]", "=", "result", "[", "pred_item", "]", "\n", "", "if", "pred_item", "==", "'GroundTruth'", ":", "\n", "            ", "log_result", "[", "'image/'", "+", "log_name", "]", "=", "result", "[", "pred_item", "]", "\n", "", "if", "pred_item", "==", "'Confidence'", ":", "\n", "            ", "log_result", "[", "'image/'", "+", "log_name", "]", "=", "result", "[", "pred_item", "]", "\n", "# save confidence map", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.make_color_wheel": [[8, 57], ["numpy.zeros", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["\n", "map", "=", "np", ".", "array", "(", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "114", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "185", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "114", "]", ",", "\n", "[", "1", ",", "0", ",", "1", ",", "174", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "114", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "185", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "114", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "0", "]", "\n", "]", ")", "\n", "# grab the last element of each column and convert into float type, e.g. 114 -> 114.0", "\n", "# the final result: [114.0, 185.0, 114.0, 174.0, 114.0, 185.0, 114.0]", "\n", "bins", "=", "map", "[", "0", ":", "map", ".", "shape", "[", "0", "]", "-", "1", ",", "map", ".", "shape", "[", "1", "]", "-", "1", "]", ".", "astype", "(", "float", ")", "\n", "\n", "# reshape the bins from [7] into [7,1]", "\n", "bins", "=", "bins", ".", "reshape", "(", "(", "bins", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n", "# accumulate element in bins, and get [114.0, 299.0, 413.0, 587.0, 701.0, 886.0, 1000.0]", "\n", "cbins", "=", "np", ".", "cumsum", "(", "bins", ")", "\n", "\n", "# divide the last element in cbins, e.g. 1000.0", "\n", "bins", "=", "bins", "/", "cbins", "[", "cbins", ".", "shape", "[", "0", "]", "-", "1", "]", "\n", "\n", "# divide the last element of cbins, e.g. 1000.0, and reshape it, final shape [6,1]", "\n", "cbins", "=", "cbins", "[", "0", ":", "cbins", ".", "shape", "[", "0", "]", "-", "1", "]", "/", "cbins", "[", "cbins", ".", "shape", "[", "0", "]", "-", "1", "]", "\n", "cbins", "=", "cbins", ".", "reshape", "(", "(", "cbins", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n", "# transpose disp array, and repeat disp 6 times in axis-0, 1 times in axis-1, final shape=[6, Height*Width]", "\n", "ind", "=", "np", ".", "tile", "(", "disp", ".", "T", ",", "(", "6", ",", "1", ")", ")", "\n", "tmp", "=", "np", ".", "tile", "(", "cbins", ",", "(", "1", ",", "disp", ".", "size", ")", ")", "\n", "\n", "# get the number of disp's elements bigger than  each value in cbins, and sum up the 6 numbers", "\n", "b", "=", "(", "ind", ">", "tmp", ")", ".", "astype", "(", "int", ")", "\n", "s", "=", "np", ".", "sum", "(", "b", ",", "axis", "=", "0", ")", "\n", "\n", "bins", "=", "1", "/", "bins", "\n", "\n", "# add an element 0 ahead of cbins, [0, cbins]", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.flow_max_rad": [[59, 78], ["numpy.sqrt", "max", "numpy.isnan", "numpy.max", "numpy.isnan", "abs", "abs"], "function", ["None"], ["cbins", "=", "np", ".", "zeros", "(", "(", "cbins", ".", "size", "+", "1", ",", "1", ")", ")", "\n", "cbins", "[", "1", ":", "]", "=", "t", "\n", "\n", "# get the ratio and interpolate it", "\n", "disp", "=", "(", "disp", "-", "cbins", "[", "s", "]", ")", "*", "bins", "[", "s", "]", "\n", "disp", "=", "map", "[", "s", ",", "0", ":", "3", "]", "*", "np", ".", "tile", "(", "1", "-", "disp", ",", "(", "1", ",", "3", ")", ")", "+", "map", "[", "s", "+", "1", ",", "0", ":", "3", "]", "*", "np", ".", "tile", "(", "disp", ",", "(", "1", ",", "3", ")", ")", "\n", "\n", "return", "disp", "\n", "\n", "\n", "", "def", "disp_to_color", "(", "disp", ",", "max_disp", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Transfer disparity map to color map\n    Args:\n        disp (numpy.array): disparity map in (Height, Width) layout, value range [0, 255]\n        max_disp (int): max disparity, optionally specifies the scaling factor\n    Returns:\n        disparity color map (numpy.array): disparity map in (Height, Width, 3) layout,\n            range [0,255]\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.flow_color": [[80, 141], ["numpy.zeros", "vis.make_color_wheel", "numpy.size", "numpy.sqrt", "numpy.floor().astype", "range", "numpy.isnan", "numpy.sqrt", "max", "numpy.arctan2", "numpy.size", "numpy.logical_not", "numpy.uint8", "numpy.isnan", "numpy.max", "numpy.floor", "numpy.floor", "numpy.finfo", "numpy.finfo", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.make_color_wheel"], ["h", ",", "w", "=", "disp", ".", "shape", "\n", "\n", "# if max_disp not provided, set as the max value in disp", "\n", "if", "max_disp", "is", "None", ":", "\n", "        ", "max_disp", "=", "np", ".", "max", "(", "disp", ")", "\n", "\n", "# scale the disp to [0,1] by max_disp", "\n", "", "disp", "=", "disp", "/", "max_disp", "\n", "\n", "# reshape the disparity to [Height*Width, 1]", "\n", "disp", "=", "disp", ".", "reshape", "(", "(", "h", "*", "w", ",", "1", ")", ")", "\n", "\n", "# convert to color map, with shape [Height*Width, 3]", "\n", "disp", "=", "disp_map", "(", "disp", ")", "\n", "\n", "# convert to RGB-mode", "\n", "disp", "=", "disp", ".", "reshape", "(", "(", "h", ",", "w", ",", "3", ")", ")", "\n", "disp", "=", "disp", "*", "255.0", "\n", "\n", "return", "disp", "\n", "\n", "\n", "", "def", "tensor_to_color", "(", "disp_tensor", ",", "max_disp", "=", "192", ")", ":", "\n", "    ", "\"\"\"\n    The main target is to convert the tensor to image format\n      so that we can load it into tensor-board.add_image()\n    Args:\n        disp_tensor (Tensor): disparity map\n            in (BatchSize, Channel, Height, Width) or (BatchSize, Height, Width) layout\n        max_disp (int): the max disparity value\n    Returns:\n        tensor_color (numpy.array): the converted disparity color map\n            in (3, Height, Width) layout, value range [0,1]\n    \"\"\"", "\n", "if", "disp_tensor", ".", "ndimension", "(", ")", "==", "4", ":", "\n", "        ", "disp_tensor", "=", "disp_tensor", "[", "0", ",", "0", ",", ":", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "elif", "disp_tensor", ".", "ndimension", "(", ")", "==", "3", ":", "\n", "        ", "disp_tensor", "=", "disp_tensor", "[", "0", ",", ":", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "        ", "disp_tensor", "=", "disp_tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "", "disp", "=", "disp_tensor", ".", "numpy", "(", ")", "\n", "\n", "disp_color", "=", "disp_to_color", "(", "disp", ",", "max_disp", ")", "/", "255.0", "\n", "disp_color", "=", "disp_color", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "disp_color", "\n", "\n", "\n", "", "def", "disp_err_to_color", "(", "disp_est", ",", "disp_gt", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the error map between disparity estimation and disparity ground-truth\n    hot color -> big error, cold color -> small error\n    Args:\n        disp_est (numpy.array): estimated disparity map\n            in (Height, Width) layout, range [0,255]\n        disp_gt (numpy.array): ground truth disparity map\n            in (Height, Width) layout, range [0,255]\n    Returns:\n        disp_err (numpy.array): disparity error map\n            in (Height, Width, 3) layout, range [0,255]\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.flow_to_color": [[143, 171], ["vis.flow_color", "numpy.repeat", "numpy.uint8", "numpy.isnan", "numpy.isnan", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.flow_color"], ["\n", "# error color map with interval (0, 0.1875, 0.375, 0.75, 1.5, 3, 6, 12, 24, 48, inf)/3.0", "\n", "# different interval corresponds to different 3-channel projection", "\n", "cols", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "0", "/", "3.0", ",", "0.1875", "/", "3.0", ",", "49", ",", "54", ",", "149", "]", ",", "\n", "[", "0.1875", "/", "3.0", ",", "0.375", "/", "3.0", ",", "69", ",", "117", ",", "180", "]", ",", "\n", "[", "0.375", "/", "3.0", ",", "0.75", "/", "3.0", ",", "116", ",", "173", ",", "209", "]", ",", "\n", "[", "0.75", "/", "3.0", ",", "1.5", "/", "3.0", ",", "171", ",", "217", ",", "233", "]", ",", "\n", "[", "1.5", "/", "3.0", ",", "3", "/", "3.0", ",", "224", ",", "243", ",", "248", "]", ",", "\n", "[", "3", "/", "3.0", ",", "6", "/", "3.0", ",", "254", ",", "224", ",", "144", "]", ",", "\n", "[", "6", "/", "3.0", ",", "12", "/", "3.0", ",", "253", ",", "174", ",", "97", "]", ",", "\n", "[", "12", "/", "3.0", ",", "24", "/", "3.0", ",", "244", ",", "109", ",", "67", "]", ",", "\n", "[", "24", "/", "3.0", ",", "48", "/", "3.0", ",", "215", ",", "48", ",", "39", "]", ",", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.chw_to_hwc": [[173, 180], ["isinstance", "isinstance", "flow.clone().detach().cpu().numpy.transpose", "flow.clone().detach().cpu().numpy.clone().detach().cpu().numpy", "flow.clone().detach().cpu().numpy.clone().detach().cpu", "flow.clone().detach().cpu().numpy.clone().detach", "flow.clone().detach().cpu().numpy.clone"], "function", ["None"], ["]", "\n", ")", "\n", "\n", "# get the error (<3px or <5%) map", "\n", "tau", "=", "[", "3.0", ",", "0.05", "]", "\n", "E", "=", "np", ".", "abs", "(", "disp_est", "-", "disp_gt", ")", "\n", "\n", "not_empty", "=", "disp_gt", ">", "0.0", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.tensor_to_color": [[182, 212], ["vis.chw_to_hwc", "vis.flow_to_color", "flow_color.transpose.transpose", "flow_tensor.detach().cpu.ndimension", "flow_tensor[].detach().cpu", "flow_tensor.detach().cpu.detach().cpu", "flow_tensor[].detach", "flow_tensor.detach().cpu.detach"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.chw_to_hwc", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.flow_to_color"], ["tmp", "[", "not_empty", "]", "=", "E", "[", "not_empty", "]", "/", "disp_gt", "[", "not_empty", "]", "/", "tau", "[", "1", "]", "\n", "E", "=", "np", ".", "minimum", "(", "E", "/", "tau", "[", "0", "]", ",", "tmp", ")", "\n", "\n", "h", ",", "w", "=", "disp_gt", ".", "shape", "\n", "err_im", "=", "np", ".", "zeros", "(", "shape", "=", "(", "h", ",", "w", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "for", "col", "in", "cols", ":", "\n", "        ", "y_x", "=", "not_empty", "&", "(", "E", ">=", "col", "[", "0", "]", ")", "&", "(", "E", "<=", "col", "[", "1", "]", ")", "\n", "err_im", "[", "y_x", "]", "=", "col", "[", "2", ":", "]", "\n", "\n", "", "return", "err_im", "\n", "\n", "\n", "", "def", "group_color", "(", "est_disp", ",", "gt_disp", "=", "None", ",", "left_image", "=", "None", ",", "right_image", "=", "None", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Combine the Left Image, Disparity Estimation, Disparity Ground-Truth, Disparity Error into one column\n    Args:\n        est_disp (numpy.array): estimated disparity map\n            in (Height, Width) layout, values range between [0, 255]\n        gt_disp (numpy.array): disparity ground-truth map\n            in (Height, Width) layout, values range between [0, 255]\n        left_image (numpy.array): left RGB image\n            in (Height, Width, 3) layout, values range between [0, 255]\n        right_image (numpy.array): left RGB image\n            in (Height, Width, 3) layout, values range between [0, 255]\n        save_path (str): the absolute/relative path you want to save the group image\n    Returns:\n        group (numpy.array): 4 maps grouped\n            in (Height*4, Width, 3) layout, values range between [0, 1]\n    \"\"\"", "\n", "# Notes: All inputs should have the same height and width", "\n", "# TODO: add shape assert", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.flow_err_to_color": [[214, 263], ["numpy.array", "numpy.square", "numpy.sqrt", "numpy.zeros", "range", "numpy.ones", "numpy.where", "int", "int", "int", "float"], "function", ["None"], ["# plt.imshow only convert the value [0,1] into color-map, so we scale all the value to [0,1] below", "\n", "# concatenate Disparity Estimation and Ground-Truth in axis=0, and convert it to color", "\n", "if", "gt_disp", "is", "not", "None", ":", "\n", "        ", "group_image", "=", "np", ".", "concatenate", "(", "(", "est_disp", ",", "gt_disp", ")", ",", "0", ")", "\n", "group_image", "=", "disp_to_color", "(", "group_image", ")", "/", "255.0", "\n", "\n", "# add error map", "\n", "err_disp", "=", "disp_err_to_color", "(", "est_disp", ",", "gt_disp", ")", "/", "255.0", "\n", "group_image", "=", "np", ".", "concatenate", "(", "(", "group_image", ",", "err_disp", ")", ",", "0", ")", ".", "clip", "(", "0.", ",", "1.", ")", "\n", "", "else", ":", "\n", "        ", "group_image", "=", "disp_to_color", "(", "est_disp", ")", "/", "255.0", "\n", "\n", "", "if", "right_image", "is", "not", "None", ":", "\n", "        ", "right_image", "=", "np", ".", "array", "(", "right_image", ",", "np", ".", "float32", ")", "/", "255.0", "\n", "# concatenate maps in order as [right_image, est_disp, gt_disp, err_disp]", "\n", "group_image", "=", "np", ".", "concatenate", "(", "(", "right_image", ",", "group_image", ")", ",", "0", ")", ".", "clip", "(", "0.", ",", "1.", ")", "\n", "\n", "", "if", "left_image", "is", "not", "None", ":", "\n", "        ", "left_image", "=", "np", ".", "array", "(", "left_image", ",", "np", ".", "float32", ")", "/", "255.0", "\n", "# concatenate maps in order as [left_image, right_image, est_disp, gt_disp, ErrDisp]", "\n", "group_image", "=", "np", ".", "concatenate", "(", "(", "left_image", ",", "group_image", ")", ",", "0", ")", ".", "clip", "(", "0.", ",", "1.", ")", "\n", "\n", "", "if", "save_path", "is", "not", "None", ":", "\n", "        ", "plt", ".", "imsave", "(", "save_path", ",", "group_image", ",", "cmap", "=", "plt", ".", "cm", ".", "hot", ")", "\n", "\n", "", "return", "group_image", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.group_color": [[265, 311], ["numpy.concatenate", "numpy.concatenate().clip", "numpy.concatenate().clip", "numpy.concatenate().clip", "matplotlib.imsave", "vis.flow_to_color", "vis.flow_err_to_color", "vis.flow_to_color", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.flow_to_color", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.flow_err_to_color", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.vis.flow_to_color"], []], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.base.FlowDatasetBase.__init__": [[9, 18], ["base.FlowDatasetBase.annLoader", "numpy.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.base.FlowDatasetBase.annLoader"], ["    ", "def", "__init__", "(", "self", ",", "annFile", ",", "root", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "annFile", "=", "annFile", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "data_list", "=", "self", ".", "annLoader", "(", ")", "\n", "\n", "# transforms for data augmentation", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "flag", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "data_list", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.base.FlowDatasetBase.annLoader": [[19, 24], ["open", "data_list.extend", "yaml.load"], "methods", ["None"], ["", "def", "annLoader", "(", "self", ")", ":", "\n", "        ", "data_list", "=", "[", "]", "\n", "with", "open", "(", "file", "=", "self", ".", "annFile", ",", "mode", "=", "'r'", ")", "as", "fp", ":", "\n", "            ", "data_list", ".", "extend", "(", "json", ".", "load", "(", "fp", ")", ")", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.base.FlowDatasetBase.Loader": [[26, 28], ["None"], "methods", ["None"], ["        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.base.FlowDatasetBase.__getitem__": [[29, 37], ["base.FlowDatasetBase.Loader", "base.FlowDatasetBase.transform"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flying_chairs.base.FlyingChairsDataset.Loader"], ["        ", "item", "=", "self", ".", "data_list", "[", "idx", "]", "\n", "sample", "=", "self", ".", "Loader", "(", "item", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.base.FlowDatasetBase.__len__": [[38, 40], ["len"], "methods", ["None"], ["        ", "return", "len", "(", "self", ".", "data_list", ")", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.base.FlowDatasetBase.__repr__": [[41, 48], ["base.FlowDatasetBase.__len__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.loaders.samplers.DistributedGroupSampler.__len__"], ["        ", "repr_str", "=", "'{}\\n'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Root: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'annFile: {}\\n'", ".", "format", "(", "self", ".", "annFile", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Length: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "\n", "return", "repr_str", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.base.FlowDatasetBase.name": [[49, 52], ["None"], "methods", ["None"], ["def", "name", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.builder.build_transforms": [[7, 35], ["dmb.data.transforms.Compose", "dmb.data.transforms.Compose", "dmb.data.transforms.flow_trans.ToTensor", "dmb.data.transforms.flow_trans.RandomCrop", "dmb.data.transforms.flow_trans.Normalize", "dmb.data.transforms.flow_trans.ToTensor", "dmb.data.transforms.flow_trans.CenterCat", "dmb.data.transforms.flow_trans.Normalize"], "function", ["None"], ["\n", "from", ".", "DeepPruner", "import", "DeepPrunerProcessor", "\n", "from", ".", "AnyNet", "import", "AnyNetProcessor", "\n", "\n", "\n", "class", "CostProcessor", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "# Concatenate left and right feature to form cost volume", "\n", "", "", "class", "CatCostProcessor", "(", "CostProcessor", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "CatCostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "cat_func", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "get", "(", "'type'", ",", "'default'", ")", "\n", "self", ".", "cat_func", "=", "CAT_FUNCS", "[", "cat_func", "]", "\n", "\n", "self", ".", "default_args", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "copy", "(", ")", "\n", "self", ".", "default_args", ".", "pop", "(", "'type'", ")", "\n", "\n", "self", ".", "aggregator", "=", "build_cost_aggregator", "(", "cfg", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "ref_fms", ",", "tgt_fms", ",", "disp_sample", "=", "None", ")", ":", "\n", "# 1. build raw cost by concat", "\n", "        ", "cat_cost", "=", "self", ".", "cat_func", "(", "ref_fms", ",", "tgt_fms", ",", "disp_sample", "=", "disp_sample", ",", "**", "self", ".", "default_args", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.builder.build_flow_dataset": [[37, 54], ["builder.build_transforms", "dmb.data.datasets.flow.FlyingChairsDataset", "ValueError"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.builder.build_transforms"], ["# 2. aggregate cost by 3D-hourglass", "\n", "costs", "=", "self", ".", "aggregator", "(", "cat_cost", ")", "\n", "\n", "return", "costs", "\n", "\n", "\n", "# Use the difference between left and right feature to form cost volume", "\n", "", "", "class", "DifCostProcessor", "(", "CostProcessor", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "DifCostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "dif_func", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "get", "(", "'type'", ",", "'default'", ")", "\n", "self", ".", "dif_func", "=", "DIF_FUNCS", "[", "dif_func", "]", "\n", "\n", "self", ".", "default_args", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "copy", "(", ")", "\n", "self", ".", "default_args", ".", "pop", "(", "'type'", ")", "\n", "\n", "self", ".", "aggregator", "=", "build_cost_aggregator", "(", "cfg", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding": [[9, 36], ["isinstance", "TypeError", "isinstance", "error_msg.format", "isinstance", "type", "eval.remove_padding", "eval.remove_padding"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding"], ["from", "dmb", ".", "data", ".", "datasets", ".", "evaluation", ".", "stereo", ".", "pixel_error", "import", "calc_error", "\n", "\n", "\n", "def", "remove_padding", "(", "batch", ",", "size", ")", ":", "\n", "    ", "\"\"\"\n    Usually, the SceneFlow image size is [540, 960], and we often pad it to [544, 960] evaluation,\n    What's more, for KITTI, the image size is pad to [384, 1248]\n    Details refer to dmb.data.transforms.stereo_trans.Pad\n    Here, we mainly remove the padding from the estimated tensor, such as disparity map\n    Args:\n        batch (torch.Tensor): in [BatchSize, Channel, Height, Width] layout\n        size (list, tuple): the last two dimensions are desired [Height, Width]\n    \"\"\"", "\n", "error_msg", "=", "\"batch must contain tensors, dicts or lists; found {}\"", "\n", "if", "isinstance", "(", "batch", ",", "torch", ".", "Tensor", ")", ":", "\n", "# Crop batch to desired size", "\n", "# For stereo, we often pad top and right of the image", "\n", "        ", "pad_top", "=", "batch", ".", "shape", "[", "-", "2", "]", "-", "size", "[", "-", "2", "]", "\n", "# pad_right = batch.shape[-1] - size[-1]", "\n", "if", "pad_top", ">=", "0", ":", "\n", "            ", "batch", "=", "batch", "[", ":", ",", ":", ",", "pad_top", ":", ",", ":", "size", "[", "-", "1", "]", "]", "\n", "\n", "", "return", "batch", "\n", "", "elif", "isinstance", "(", "batch", ",", "container_abcs", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "key", ":", "remove_padding", "(", "batch", "[", "key", "]", ",", "size", ")", "for", "key", "in", "batch", "}", "\n", "", "elif", "isinstance", "(", "batch", ",", "container_abcs", ".", "Sequence", ")", ":", "\n", "        ", "return", "[", "remove_padding", "(", "samples", ",", "size", ")", "for", "samples", "in", "batch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.do_evaluation": [[38, 69], ["torch.is_tensor", "torch.is_tensor", "dmb.data.datasets.evaluation.flow.pixel_error.calc_error", "warnings.warn", "warnings.warn", "est_flow.clone().cpu.clone().cpu", "gt_flow.clone().cpu.clone().cpu", "est_flow.clone().cpu.clone", "gt_flow.clone().cpu.clone"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.evaluation.__init__.calc_error"], ["\n", "\n", "", "def", "do_evaluation", "(", "est_disp", ",", "gt_disp", ",", "lb", ",", "ub", ")", ":", "\n", "    ", "\"\"\"\n    Do pixel error evaluation. (See KITTI evaluation protocols for details.)\n    Args:\n        est_disp, (Tensor): estimated disparity map, in [BatchSize, Channel, Height, Width] or\n            [BatchSize, Height, Width] or [Height, Width] layout\n        gt_disp, (Tensor): ground truth disparity map, in [BatchSize, Channel, Height, Width] or\n            [BatchSize, Height, Width] or [Height, Width] layout\n        lb, (scalar): the lower bound of disparity you want to mask out\n        ub, (scalar): the upper bound of disparity you want to mask out\n\n    Returns:\n        error_dict (dict): the error of 1px, 2px, 3px, 5px, in percent,\n            range [0,100] and average error epe\n    \"\"\"", "\n", "error_dict", "=", "{", "}", "\n", "if", "est_disp", "is", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'Estimated disparity map is None'", ")", "\n", "return", "error_dict", "\n", "", "if", "gt_disp", "is", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'Reference ground truth disparity map is None'", ")", "\n", "return", "error_dict", "\n", "\n", "", "if", "torch", ".", "is_tensor", "(", "est_disp", ")", ":", "\n", "        ", "est_disp", "=", "est_disp", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "", "if", "torch", ".", "is_tensor", "(", "gt_disp", ")", ":", "\n", "        ", "gt_disp", "=", "gt_disp", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "", "error_dict", "=", "calc_error", "(", "est_disp", ",", "gt_disp", ",", "lb", "=", "lb", ",", "ub", "=", "ub", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval_hooks.DistEvalHook.__init__": [[93, 99], ["cfg.copy", "isinstance", "type"], "methods", ["None"], ["                ", "pandas_dict", "[", "disparity_id", "]", "[", "area", "]", "=", "{", "}", "\n", "", "pandas_dict", "[", "disparity_id", "]", "[", "area", "]", "[", "metric", "]", "=", "val", "\n", "\n", "", "elif", "'metric_confidence'", "in", "key", ":", "# e.g. 'metric_confidence_0/est_0'", "\n", "            ", "confidence_id", "=", "key", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "sparse_type", ",", "percent", "=", "key", ".", "split", "(", "'/'", ")", "[", "1", "]", ".", "split", "(", "'_'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval_hooks.DistEvalHook.after_train_epoch": [[100, 166], ["runner.logger.info", "runner.model.eval", "range", "torch.barrier", "torch.barrier", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "eval_hooks.DistEvalHook.every_n_epochs", "mmcv.ProgressBar", "len", "eval_hooks.to_cpu", "dict", "print", "torch.barrier", "torch.barrier", "range", "eval_hooks.DistEvalHook.evaluate", "os.join", "os.join", "mmcv.dump", "torch.barrier", "torch.barrier", "len", "len", "range", "mmcv.parallel.scatter", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "runner.model", "eval_hooks.flow_evaluation", "range", "min", "os.join", "os.join", "mmcv.load", "range", "os.remove", "os.remove", "os.remove", "os.remove", "len", "mmcv.parallel.collate", "mmcv.ProgressBar.update", "len", "len", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.to_cpu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval_hooks.DistFlowEvalHook.evaluate", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval_hooks.flow_evaluation"], ["# each confidence contains one pd.DataFrame, sparse_type as index, percent as columns", "\n", "if", "confidence_id", "not", "in", "pandas_dict", ".", "keys", "(", ")", ":", "\n", "                ", "pandas_dict", "[", "confidence_id", "]", "=", "{", "}", "\n", "", "if", "sparse_type", "not", "in", "pandas_dict", "[", "confidence_id", "]", ".", "keys", "(", ")", ":", "\n", "                ", "pandas_dict", "[", "confidence_id", "]", "[", "sparse_type", "]", "=", "{", "}", "\n", "", "pandas_dict", "[", "confidence_id", "]", "[", "sparse_type", "]", "[", "percent", "]", "=", "val", "\n", "\n", "", "else", ":", "\n", "            ", "processed_dict", "[", "key", "]", "=", "val", "\n", "\n", "# generate pandas", "\n", "", "", "for", "key", "in", "pandas_dict", ":", "\n", "        ", "processed_dict", "[", "key", "]", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "pandas_dict", "[", "key", "]", ",", "orient", "=", "'index'", ")", "\n", "\n", "", "return", "processed_dict", "\n", "\n", "\n", "", "class", "DistEvalHook", "(", "Hook", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "cfg", ",", "dataset", ",", "interval", "=", "1", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", ".", "copy", "(", ")", "\n", "assert", "isinstance", "(", "dataset", ",", "Dataset", ")", ",", "\"dataset must be a Dataset object, not {}\"", ".", "format", "(", "type", "(", "dataset", ")", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "interval", "=", "interval", "\n", "\n", "", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "not", "self", ".", "every_n_epochs", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "\n", "", "runner", ".", "logger", ".", "info", "(", "\n", "\"Start evaluation on {} dataset({} images).\"", ".", "format", "(", "self", ".", "dataset", ".", "name", ",", "len", "(", "self", ".", "dataset", ")", ")", "\n", ")", "\n", "runner", ".", "model", ".", "eval", "(", ")", "\n", "\n", "# get prog bar", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "self", ".", "dataset", ")", ")", "\n", "", "else", ":", "\n", "            ", "prog_bar", "=", "None", "\n", "\n", "", "results", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", "]", "\n", "for", "idx", "in", "range", "(", "runner", ".", "rank", ",", "len", "(", "self", ".", "dataset", ")", ",", "runner", ".", "world_size", ")", ":", "\n", "            ", "data", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "data_gpu", "=", "scatter", "(", "\n", "collate", "(", "[", "data", "]", ",", "samples_per_gpu", "=", "1", ")", ",", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", "\n", ")", "[", "0", "]", "\n", "\n", "# compute output", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "result", ",", "_", "=", "runner", ".", "model", "(", "data_gpu", ")", "\n", "disps", "=", "result", "[", "'disps'", "]", "\n", "costs", "=", "result", "[", "'costs'", "]", "\n", "\n", "# evaluation", "\n", "whole_error_dict", ",", "data_gpu", "=", "disp_evaluation", "(", "self", ".", "cfg", ",", "disps", ",", "data_gpu", ")", "\n", "\n", "result", "=", "{", "\n", "'Disparity'", ":", "disps", ",", "\n", "'GroundTruth'", ":", "data_gpu", "[", "'leftDisp'", "]", ",", "\n", "'Error'", ":", "whole_error_dict", ",", "\n", "}", "\n", "\n", "if", "self", ".", "cfg", ".", "model", ".", "eval", ".", "is_cost_return", ":", "\n", "                    ", "if", "self", ".", "cfg", ".", "model", ".", "eval", ".", "is_cost_to_cpu", ":", "\n", "                        ", "costs", "=", "[", "cost", ".", "cpu", "(", ")", "for", "cost", "in", "costs", "]", "\n", "", "result", "[", "'Cost'", "]", "=", "costs", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval_hooks.DistEvalHook.evaluate": [[167, 169], ["None"], "methods", ["None"], ["\n", "# if result contains image, as the process advanced, the cuda cache explodes soon.", "\n", "", "", "result", "=", "to_cpu", "(", "result", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval_hooks.DistFlowEvalHook.__init__": [[173, 175], ["eval_hooks.DistEvalHook.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["if", "'Confidence'", "in", "result", ":", "\n", "                ", "filter_result", "[", "'Confidence'", "]", "=", "self", ".", "process_conf", "(", "result", ",", "bins_number", "=", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval_hooks.DistFlowEvalHook.evaluate": [[176, 206], ["mmcv.runner.LogBuffer", "mmcv.runner.LogBuffer.average", "mmcv.runner.LogBuffer.output.keys", "eval_hooks.flow_output_evaluation_in_pandas", "runner.logger.info", "flow_output_evaluation_in_pandas.items", "runner.logger.info", "mmcv.runner.LogBuffer.clear", "mmcv.runner.LogBuffer.update", "isinstance", "log_items.append", "isinstance", "log_items.append", "log_items.append"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval_hooks.flow_output_evaluation_in_pandas"], ["", "results", "[", "idx", "]", "=", "filter_result", "\n", "\n", "batch_size", "=", "runner", ".", "world_size", "\n", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "                ", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "", "", "", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "'\\n'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "min", "(", "runner", ".", "world_size", ",", "len", "(", "self", ".", "dataset", ")", ")", ")", ":", "\n", "                ", "tmp_file", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "\"temp_{}.pkl\"", ".", "format", "(", "i", ")", ")", "\n", "tmp_results", "=", "mmcv", ".", "load", "(", "tmp_file", ")", "\n", "for", "idx", "in", "range", "(", "i", ",", "len", "(", "results", ")", ",", "runner", ".", "world_size", ")", ":", "\n", "                    ", "results", "[", "idx", "]", "=", "tmp_results", "[", "idx", "]", "\n", "", "os", ".", "remove", "(", "tmp_file", ")", "\n", "", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "", "else", ":", "\n", "            ", "tmp_file", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "\"temp_{}.pkl\"", ".", "format", "(", "runner", ".", "rank", ")", ")", "\n", "mmcv", ".", "dump", "(", "results", ",", "tmp_file", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "def", "evaluate", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "\n", "", "", "class", "DistStereoEvalHook", "(", "DistEvalHook", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval_hooks.to_cpu": [[22, 32], ["isinstance", "TypeError", "tensor.detach().cpu", "isinstance", "error_msg.format", "isinstance", "type", "tensor.detach", "eval_hooks.to_cpu", "eval_hooks.to_cpu"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.to_cpu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.to_cpu"], ["def", "to_cpu", "(", "tensor", ")", ":", "\n", "    ", "error_msg", "=", "\"Tensor must contain tensors, dicts or lists; found {}\"", "\n", "if", "isinstance", "(", "tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "elif", "isinstance", "(", "tensor", ",", "container_abcs", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "key", ":", "to_cpu", "(", "tensor", "[", "key", "]", ")", "for", "key", "in", "tensor", "}", "\n", "", "elif", "isinstance", "(", "tensor", ",", "container_abcs", ".", "Sequence", ")", ":", "\n", "        ", "return", "[", "to_cpu", "(", "samples", ")", "for", "samples", "in", "tensor", "]", "\n", "\n", "", "raise", "TypeError", "(", "(", "error_msg", ".", "format", "(", "type", "(", "tensor", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval_hooks.flow_evaluation": [[34, 58], ["eval.remove_padding", "cfg.get", "eval.remove_padding", "eval.do_evaluation", "eval.do_evaluation.keys"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.do_evaluation"], ["", "def", "disp_evaluation", "(", "cfg", ",", "disps", ",", "data_gpu", ")", ":", "\n", "\n", "# remove the padding when data augmentation", "\n", "    ", "ori_size", "=", "data_gpu", "[", "'original_size'", "]", "\n", "disps", "=", "remove_padding", "(", "disps", ",", "ori_size", ")", "\n", "\n", "# process the ground truth disparity map", "\n", "data_gpu", "[", "'leftDisp'", "]", "=", "data_gpu", "[", "'leftDisp'", "]", "if", "'leftDisp'", "in", "data_gpu", "else", "None", "\n", "if", "data_gpu", "[", "'leftDisp'", "]", "is", "not", "None", ":", "\n", "        ", "data_gpu", "[", "'leftDisp'", "]", "=", "remove_padding", "(", "data_gpu", "[", "'leftDisp'", "]", ",", "ori_size", ")", "\n", "", "data_gpu", "[", "'rightDisp'", "]", "=", "data_gpu", "[", "'rightDisp'", "]", "if", "'rightDisp'", "in", "data_gpu", "else", "None", "\n", "if", "data_gpu", "[", "'rightDisp'", "]", "is", "not", "None", ":", "\n", "        ", "data_gpu", "[", "'rightDisp'", "]", "=", "remove_padding", "(", "data_gpu", "[", "'rightDisp'", "]", ",", "ori_size", ")", "\n", "\n", "", "leftDisp", "=", "data_gpu", "[", "'leftDisp'", "]", "\n", "rightDisp", "=", "data_gpu", "[", "'rightDisp'", "]", "\n", "\n", "# default only evaluate the first disparity map", "\n", "eval_disparity_id", "=", "cfg", ".", "get", "(", "'eval_disparity_id'", ",", "[", "0", "]", ")", "\n", "whole_error_dict", "=", "{", "}", "\n", "\n", "# process disparity metric", "\n", "for", "id", "in", "eval_disparity_id", ":", "\n", "        ", "all_error_dict", "=", "do_evaluation", "(", "\n", "disps", "[", "id", "]", ",", "leftDisp", ",", "cfg", ".", "model", ".", "eval", ".", "lower_bound", ",", "cfg", ".", "model", ".", "eval", ".", "upper_bound", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval_hooks.flow_output_evaluation_in_pandas": [[60, 89], ["output_dict.keys", "isinstance", "pandas.DataFrame.from_dict", "[].split", "key.split", "pandas_dict.keys", "pandas_dict[].keys", "key.split"], "function", ["None"], ["for", "key", "in", "all_error_dict", ".", "keys", "(", ")", ":", "\n", "            ", "whole_error_dict", "[", "'metric_disparity_{}/all_'", ".", "format", "(", "id", ")", "+", "key", "]", "=", "all_error_dict", "[", "key", "]", "\n", "\n", "", "if", "cfg", ".", "model", ".", "eval", ".", "eval_occlusion", "and", "(", "leftDisp", "is", "not", "None", ")", "and", "(", "rightDisp", "is", "not", "None", ")", ":", "\n", "\n", "            ", "noc_occ_error_dict", "=", "do_occlusion_evaluation", "(", "\n", "disps", "[", "id", "]", ",", "leftDisp", ",", "rightDisp", ",", "\n", "cfg", ".", "model", ".", "eval", ".", "lower_bound", ",", "cfg", ".", "model", ".", "eval", ".", "upper_bound", ")", "\n", "\n", "for", "key", "in", "noc_occ_error_dict", ".", "keys", "(", ")", ":", "\n", "                ", "whole_error_dict", "[", "'metric_disparity_{}/'", ".", "format", "(", "id", ")", "+", "key", "]", "=", "noc_occ_error_dict", "[", "key", "]", "\n", "\n", "", "", "", "return", "whole_error_dict", ",", "data_gpu", "\n", "\n", "\n", "", "def", "disp_output_evaluation_in_pandas", "(", "output_dict", ")", ":", "\n", "    ", "processed_dict", "=", "{", "}", "\n", "pandas_dict", "=", "{", "}", "\n", "for", "key", "in", "output_dict", ".", "keys", "(", ")", ":", "\n", "# format value", "\n", "        ", "val", "=", "output_dict", "[", "key", "]", "\n", "\n", "if", "isinstance", "(", "val", ",", "float", ")", ":", "\n", "            ", "val", "=", "\"{:.4f}\"", ".", "format", "(", "val", ")", "\n", "\n", "", "if", "'metric_disparity'", "in", "key", ":", "# e.g. 'metric_disparity_0/all_epe'", "\n", "            ", "disparity_id", "=", "key", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "area", ",", "metric", "=", "key", ".", "split", "(", "'/'", ")", "[", "1", "]", ".", "split", "(", "'_'", ")", "\n", "\n", "# each disparity contains one pd.DataFrame, area as index, metric as columns", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.pixel_error.zero_mask": [[5, 8], ["abs"], "function", ["None"], ["\n", "def", "calc_error", "(", "est_disp", "=", "None", ",", "gt_disp", "=", "None", ",", "lb", "=", "None", ",", "ub", "=", "None", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.pixel_error.calc_error": [[9, 88], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "est_flow.unsqueeze.clone().cpu", "gt_flow.unsqueeze.clone().cpu", "torch.ones", "torch.ones.detach_", "torch.sqrt", "torch.ones.float().sum", "torch.sqrt.float().mean", "torch.is_tensor", "torch.is_tensor", "len", "gt_flow.unsqueeze.unsqueeze", "est_flow.unsqueeze.unsqueeze", "abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.is_tensor", "torch.is_tensor", "est_flow.unsqueeze.clone", "gt_flow.unsqueeze.clone", "torch.ones.float().sum", "torch.ones.float", "torch.gt().float", "torch.gt().float", "torch.gt().float", "torch.gt().float", "torch.sqrt.float", "torch.isnan", "torch.isnan", "pixel_error.zero_mask", "pixel_error.zero_mask", "torch.ones.float", "torch.gt", "torch.gt", "torch.gt", "torch.gt"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.pixel_error.zero_mask", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.pixel_error.zero_mask"], ["\n", "error1", "=", "torch", ".", "Tensor", "(", "[", "0.", "]", ")", "\n", "error2", "=", "torch", ".", "Tensor", "(", "[", "0.", "]", ")", "\n", "error3", "=", "torch", ".", "Tensor", "(", "[", "0.", "]", ")", "\n", "error5", "=", "torch", ".", "Tensor", "(", "[", "0.", "]", ")", "\n", "epe", "=", "torch", ".", "Tensor", "(", "[", "0.", "]", ")", "\n", "\n", "if", "(", "not", "torch", ".", "is_tensor", "(", "est_disp", ")", ")", "or", "(", "not", "torch", ".", "is_tensor", "(", "gt_disp", ")", ")", ":", "\n", "        ", "return", "{", "\n", "'1px'", ":", "error1", "*", "100", ",", "\n", "'2px'", ":", "error2", "*", "100", ",", "\n", "'3px'", ":", "error3", "*", "100", ",", "\n", "'5px'", ":", "error5", "*", "100", ",", "\n", "'epe'", ":", "epe", "\n", "}", "\n", "\n", "", "assert", "torch", ".", "is_tensor", "(", "est_disp", ")", "and", "torch", ".", "is_tensor", "(", "gt_disp", ")", "\n", "assert", "est_disp", ".", "shape", "==", "gt_disp", ".", "shape", "\n", "\n", "est_disp", "=", "est_disp", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "gt_disp", "=", "gt_disp", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "mask", "=", "torch", ".", "ones", "(", "gt_disp", ".", "shape", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "if", "lb", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", "&", "(", "gt_disp", ">", "lb", ")", "\n", "", "if", "ub", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", "&", "(", "gt_disp", "<", "ub", ")", "\n", "", "mask", ".", "detach_", "(", ")", "\n", "if", "abs", "(", "mask", ".", "float", "(", ")", ".", "sum", "(", ")", ")", "<", "1.0", ":", "\n", "        ", "return", "{", "\n", "'1px'", ":", "error1", "*", "100", ",", "\n", "'2px'", ":", "error2", "*", "100", ",", "\n", "'3px'", ":", "error3", "*", "100", ",", "\n", "'5px'", ":", "error5", "*", "100", ",", "\n", "'epe'", ":", "epe", "\n", "}", "\n", "\n", "", "gt_disp", "=", "gt_disp", "[", "mask", "]", "\n", "est_disp", "=", "est_disp", "[", "mask", "]", "\n", "\n", "abs_error", "=", "torch", ".", "abs", "(", "gt_disp", "-", "est_disp", ")", "\n", "total_num", "=", "mask", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "\n", "error1", "=", "torch", ".", "sum", "(", "torch", ".", "gt", "(", "abs_error", ",", "1", ")", ".", "float", "(", ")", ")", "/", "total_num", "\n", "error2", "=", "torch", ".", "sum", "(", "torch", ".", "gt", "(", "abs_error", ",", "2", ")", ".", "float", "(", ")", ")", "/", "total_num", "\n", "error3", "=", "torch", ".", "sum", "(", "torch", ".", "gt", "(", "abs_error", ",", "3", ")", ".", "float", "(", ")", ")", "/", "total_num", "\n", "error5", "=", "torch", ".", "sum", "(", "torch", ".", "gt", "(", "abs_error", ",", "5", ")", ".", "float", "(", ")", ")", "/", "total_num", "\n", "epe", "=", "abs_error", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "{", "\n", "'1px'", ":", "error1", "*", "100", ",", "\n", "'2px'", ":", "error2", "*", "100", ",", "\n", "'3px'", ":", "error3", "*", "100", ",", "\n", "'5px'", ":", "error5", "*", "100", ",", "\n", "'epe'", ":", "epe", "\n", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.test_flying_chairs.TestFlyingChairsDataset.setUp": [[12, 27], ["dict", "mmcv.Config", "dmb.data.datasets.flow.builder.build_flow_dataset", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.builder.build_flow_dataset"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "config", "=", "dict", "(", "\n", "data", "=", "dict", "(", "\n", "train", "=", "dict", "(", "\n", "type", "=", "'FlyingChairs'", ",", "\n", "data_root", "=", "'/home/youmin/data/OpticalFlow/FlyingChairs/'", ",", "\n", "annfile", "=", "'/home/youmin/data/annotations/FlyingChairs/test.json'", ",", "\n", "input_shape", "=", "[", "256", ",", "448", "]", ",", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", "\n", ")", "\n", ")", "\n", ")", "\n", "cfg", "=", "Config", "(", "config", ")", "\n", "self", ".", "dataset", "=", "build_dataset", "(", "cfg", ",", "'train'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.test_flying_chairs.TestFlyingChairsDataset.test_anno_loader": [[28, 31], ["print", "print"], "methods", ["None"], ["", "def", "test_anno_loader", "(", "self", ")", ":", "\n", "        ", "print", "(", "self", ".", "dataset", ")", "\n", "print", "(", "self", ".", "dataset", ".", "data_list", "[", "111", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.test_flying_chairs.TestFlyingChairsDataset.test_get_item": [[32, 43], ["range", "isinstance", "zip", "sample.keys", "sample.values", "isinstance", "isinstance", "print", "print", "print"], "methods", ["None"], ["", "def", "test_get_item", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "sample", "=", "self", ".", "dataset", "[", "i", "]", "\n", "assert", "isinstance", "(", "sample", ",", "dict", ")", "\n", "for", "k", ",", "v", "in", "zip", "(", "sample", ".", "keys", "(", ")", ",", "sample", ".", "values", "(", ")", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "print", "(", "k", ",", "': with shape'", ",", "v", ".", "shape", ")", "\n", "", "if", "isinstance", "(", "v", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                    ", "print", "(", "k", ",", "': '", ",", "v", ")", "\n", "", "if", "v", "is", "None", ":", "\n", "                    ", "print", "(", "k", ",", "' is None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.test_flying_chairs.TestFlyingChairsDataset.test_all_data": [[45, 52], ["tqdm", "range", "len", "print"], "methods", ["None"], ["", "", "", "", "def", "test_all_data", "(", "self", ")", ":", "\n", "        ", "from", "tqdm", "import", "tqdm", "\n", "for", "idx", "in", "tqdm", "(", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "item", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "", "except", "ValueError", ":", "\n", "                ", "print", "(", "'Cannot find: {} -> {}'", ".", "format", "(", "idx", ",", "self", ".", "dataset", ".", "data_list", "[", "idx", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.is_image_file": [[28, 30], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.is_pfm_file": [[32, 34], ["filename.endswith"], "function", ["None"], ["", "def", "is_pfm_file", "(", "filename", ")", ":", "\n", "    ", "return", "filename", ".", "endswith", "(", "'.pfm'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.load_disp": [[36, 47], ["inference.is_image_file", "item.keys", "inference.is_pfm_file", "imageio.imread().astype", "dmb.data.datasets.utils.load_scene_flow_disp().astype", "imageio.imread", "dmb.data.datasets.utils.load_scene_flow_disp"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.is_image_file", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.is_pfm_file", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.load_disp.load_scene_flow_disp"], ["", "def", "load_disp", "(", "item", ",", "filename", ",", "disp_div_factor", "=", "1.0", ")", ":", "\n", "    ", "Disp", "=", "None", "\n", "if", "filename", "in", "item", ".", "keys", "(", ")", "and", "item", "[", "filename", "]", "is", "not", "None", ":", "\n", "        ", "if", "is_image_file", "(", "item", "[", "filename", "]", ")", ":", "\n", "            ", "Disp", "=", "imread", "(", "item", "[", "filename", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "disp_div_factor", "\n", "", "elif", "is_pfm_file", "(", "item", "[", "filename", "]", ")", ":", "\n", "            ", "Disp", "=", "load_scene_flow_disp", "(", "item", "[", "filename", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "disp_div_factor", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "return", "Disp", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.to_cpu": [[49, 59], ["isinstance", "TypeError", "tensor.detach().cpu", "isinstance", "error_msg.format", "isinstance", "type", "tensor.detach", "inference.to_cpu", "inference.to_cpu"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.to_cpu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.to_cpu"], ["", "def", "to_cpu", "(", "tensor", ")", ":", "\n", "    ", "error_msg", "=", "\"Tensor must contain tensors, dicts or lists; found {}\"", "\n", "if", "isinstance", "(", "tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "elif", "isinstance", "(", "tensor", ",", "container_abcs", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "key", ":", "to_cpu", "(", "tensor", "[", "key", "]", ")", "for", "key", "in", "tensor", "}", "\n", "", "elif", "isinstance", "(", "tensor", ",", "container_abcs", ".", "Sequence", ")", ":", "\n", "        ", "return", "[", "to_cpu", "(", "samples", ")", "for", "samples", "in", "tensor", "]", "\n", "\n", "", "raise", "TypeError", "(", "(", "error_msg", ".", "format", "(", "type", "(", "tensor", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.init_model": [[61, 85], ["isinstance", "dmb.modeling.build_model", "dmb.modeling.build_model.to", "dmb.modeling.build_model.eval", "mmcv.Config.fromfile", "mmcv.runner.load_checkpoint", "isinstance", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.modeling.__init__.build_model", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.load_checkpoint"], ["", "def", "init_model", "(", "config", ",", "checkpoint", "=", "None", ",", "device", "=", "'cuda:0'", ")", ":", "\n", "    ", "\"\"\"\n    Initialize a stereo model from config file.\n    Args:\n        config (str or :obj:`mmcv.Config`): Config file path or the config\n            object.\n        checkpoint (str, optional): Checkpoint path. If left as None, the model\n            will not load any weights.\n    Returns:\n        nn.Module: The constructed stereo model.\n    \"\"\"", "\n", "if", "isinstance", "(", "config", ",", "str", ")", ":", "\n", "        ", "config", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "config", ")", "\n", "", "elif", "not", "isinstance", "(", "config", ",", "mmcv", ".", "Config", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'config must be a filename or Config object, '", "\n", "'but got {}'", ".", "format", "(", "type", "(", "config", ")", ")", ")", "\n", "\n", "", "model", "=", "build_model", "(", "config", ")", "\n", "if", "checkpoint", "is", "not", "None", ":", "\n", "        ", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "checkpoint", ")", "\n", "", "model", ".", "cfg", "=", "config", "# save the config in the model for convenience", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.inference_stereo": [[87, 144], ["dmb.data.transforms.transforms.Compose.append", "dmb.data.transforms.transforms.Compose.append", "dmb.data.transforms.transforms.Compose", "model.cfg.update", "dmb.data.transforms.stereo_trans.ToTensor", "dmb.data.transforms.transforms.Compose.append", "dmb.data.transforms.transforms.Compose.append", "dmb.data.transforms.stereo_trans.Normalize", "next", "inference._inference_single", "dmb.data.transforms.stereo_trans.StereoPad", "dmb.data.transforms.stereo_trans.CenterCrop", "model.parameters"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference._inference_single"], ["", "def", "inference_stereo", "(", "model", ",", "\n", "batchesDict", ",", "\n", "log_dir", ",", "\n", "pad_to_shape", "=", "None", ",", "\n", "crop_shape", "=", "None", ",", "\n", "scale_factor", "=", "1.0", ",", "\n", "disp_div_factor", "=", "1.0", ",", "\n", "device", "=", "'cuda:0'", ")", ":", "\n", "    ", "\"\"\"Inference image(s) with the stereo model.\n    Args:\n        model (nn.Module): The loaded model.\n        batchesDict (list of dict): a dict must contain: left_image_path, right_image_path;\n                                   optional contain: left_disp_map_path, right_disp_map_path\n        log_dir (str): result saving root directory\n        pad_to_shape (tuple): the shape of image after pad -- (H, W)\n        crop_shape (tuple): the shape of image after crop -- (H, W)\n        scale_factor (int, float): the down sample or up sample scale of images\n        disp_div_factor (int, float): if disparity map given, after reading the disparity map,\n                    often have to divide a scale to get the real disparity value, e.g. 256 in KITTI\n    Notes:\n        Given left and right image path,\n        1st: read images\n        2nd: pad or crop images to a given shape\n        3rd: down sample or up sample the images to the given shape\n        4th: model inference\n        5th: inversely down sample or up sample result\n        finally: if pad, retrieve to original shape; otherwise, nothing will be done\n    Returns:\n        If imgs is a str, a generator will be returned, otherwise return the\n        detection results directly.\n    \"\"\"", "\n", "mean", "=", "[", "123.675", ",", "116.28", ",", "103.53", "]", "\n", "std", "=", "[", "58.395", ",", "57.12", ",", "57.375", "]", "\n", "img_transform", "=", "[", "]", "\n", "img_transform", ".", "append", "(", "T", ".", "ToTensor", "(", ")", ")", "\n", "if", "pad_to_shape", "is", "not", "None", ":", "\n", "        ", "assert", "crop_shape", "is", "None", "\n", "img_transform", ".", "append", "(", "T", ".", "StereoPad", "(", "pad_to_shape", ")", ")", "\n", "", "if", "crop_shape", "is", "not", "None", ":", "\n", "        ", "assert", "pad_to_shape", "is", "None", "\n", "img_transform", ".", "append", "(", "T", ".", "CenterCrop", "(", "crop_shape", ")", ")", "\n", "", "img_transform", ".", "append", "(", "T", ".", "Normalize", "(", "mean", ",", "std", ")", ")", "\n", "img_transform", "=", "Compose", "(", "img_transform", ")", "\n", "\n", "model", ".", "cfg", ".", "update", "(", "\n", "{", "\n", "'log_dir'", ":", "log_dir", ",", "\n", "'pad_to_shape'", ":", "pad_to_shape", ",", "\n", "'crop_shape'", ":", "crop_shape", ",", "\n", "'scale_factor'", ":", "scale_factor", ",", "\n", "'disp_div_factor'", ":", "disp_div_factor", "\n", "}", "\n", ")", "\n", "\n", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "# model device", "\n", "for", "batchDict", "in", "batchesDict", ":", "\n", "        ", "_inference_single", "(", "model", ",", "batchDict", ",", "img_transform", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference._prepare_data": [[146, 189], ["[].astype", "[].astype", "inference.load_disp", "inference.load_disp", "[].astype.copy().transpose", "[].astype.copy().transpose", "img_transform", "img_transform.items", "torch.is_tensor", "torch.is_tensor", "[].astype.copy", "[].astype.copy", "load_disp.copy", "load_disp.copy", "F.interpolate.unsqueeze", "F.interpolate.to", "imageio.imread", "imageio.imread", "torch.interpolate", "torch.interpolate"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.load_disp", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.load_disp"], ["", "", "def", "_prepare_data", "(", "item", ",", "img_transform", ",", "cfg", ",", "device", ")", ":", "\n", "    ", "oriLeftImage", "=", "imread", "(", "item", "[", "'left_image_path'", "]", ")", "[", ":", ",", ":", ",", ":", "3", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "oriRightImage", "=", "imread", "(", "item", "[", "'right_image_path'", "]", ")", "[", ":", ",", ":", ",", ":", "3", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "oriLeftDisp", "=", "load_disp", "(", "item", ",", "'left_disp_map_path'", ",", "cfg", ".", "disp_div_factor", ")", "\n", "oriRightDisp", "=", "load_disp", "(", "item", ",", "'right_disp_map_path'", ",", "cfg", ".", "disp_div_factor", ")", "\n", "\n", "oriSample", "=", "{", "'leftImage'", ":", "oriLeftImage", ",", "\n", "'rightImage'", ":", "oriRightImage", ",", "\n", "'leftDisp'", ":", "oriLeftDisp", ",", "\n", "'rightDisp'", ":", "oriRightDisp", "}", "\n", "\n", "leftImage", "=", "oriLeftImage", ".", "copy", "(", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "rightImage", "=", "oriRightImage", ".", "copy", "(", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "leftDisp", "=", "None", "\n", "rightDisp", "=", "None", "\n", "if", "oriLeftDisp", "is", "not", "None", ":", "\n", "        ", "leftDisp", "=", "oriLeftDisp", ".", "copy", "(", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "", "if", "oriRightDisp", "is", "not", "None", ":", "\n", "        ", "rightDisp", "=", "oriRightDisp", ".", "copy", "(", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "\n", "", "h", ",", "w", "=", "leftImage", ".", "shape", "[", "1", "]", ",", "leftImage", ".", "shape", "[", "2", "]", "\n", "original_size", "=", "(", "h", ",", "w", ")", "\n", "\n", "procSample", "=", "{", "'leftImage'", ":", "leftImage", ",", "\n", "'rightImage'", ":", "rightImage", ",", "\n", "'leftDisp'", ":", "leftDisp", ",", "\n", "'rightDisp'", ":", "rightDisp", ",", "\n", "'original_size'", ":", "original_size", ",", "\n", "}", "\n", "\n", "procSample", "=", "img_transform", "(", "procSample", ")", "\n", "\n", "scale_factor", "=", "cfg", ".", "scale_factor", "\n", "for", "k", ",", "v", "in", "procSample", ".", "items", "(", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "v", ")", ":", "\n", "            ", "v", "=", "v", ".", "unsqueeze", "(", "0", ")", "\n", "if", "'Disp'", "in", "k", ":", "\n", "                ", "v", "=", "F", ".", "interpolate", "(", "v", "*", "scale_factor", ",", "scale_factor", "=", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "v", "=", "F", ".", "interpolate", "(", "v", ",", "scale_factor", "=", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "", "procSample", "[", "k", "]", "=", "v", ".", "to", "(", "device", ")", "\n", "\n", "", "", "return", "procSample", ",", "oriSample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference._inference_single": [[191, 226], ["model.cfg.copy", "inference._prepare_data", "inference.to_cpu", "isinstance", "to_cpu.items", "os.join", "mmcv.mkdir_or_exist", "os.join", "print", "mmcv.dump", "torch.no_grad", "torch.no_grad", "model", "isinstance", "range", "len", "torch.is_tensor", "torch.is_tensor", "[].split", "torch.interpolate", "batchDict[].split", "dmb.data.datasets.evaluation.stereo.eval.remove_padding", "batchDict[].split"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference._prepare_data", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.inference.to_cpu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding"], ["", "def", "_inference_single", "(", "model", ",", "batchDict", ",", "img_transform", ",", "device", ")", ":", "\n", "    ", "cfg", "=", "model", ".", "cfg", ".", "copy", "(", ")", "\n", "procData", ",", "oriData", "=", "_prepare_data", "(", "batchDict", ",", "img_transform", ",", "cfg", ",", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "result", ",", "_", "=", "model", "(", "procData", ")", "\n", "", "result", "=", "to_cpu", "(", "result", ")", "\n", "\n", "assert", "isinstance", "(", "result", ",", "dict", ")", "\n", "\n", "for", "k", ",", "v", "in", "result", ".", "items", "(", ")", ":", "\n", "        ", "assert", "isinstance", "(", "v", ",", "(", "tuple", ",", "list", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "v", ")", ")", ":", "\n", "            ", "vv", "=", "v", "[", "i", "]", "\n", "if", "torch", ".", "is_tensor", "(", "vv", ")", ":", "\n", "# inverse up/down sample", "\n", "                ", "vv", "=", "F", ".", "interpolate", "(", "vv", "*", "1.0", "/", "cfg", ".", "scale_factor", ",", "scale_factor", "=", "1.0", "/", "cfg", ".", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "ori_size", "=", "procData", "[", "'original_size'", "]", "\n", "if", "cfg", ".", "pad_to_shape", "is", "not", "None", ":", "\n", "                    ", "vv", "=", "remove_padding", "(", "vv", ",", "ori_size", ")", "\n", "", "v", "[", "i", "]", "=", "vv", "\n", "", "", "result", "[", "k", "]", "=", "v", "\n", "\n", "", "logData", "=", "{", "\n", "'Result'", ":", "result", ",", "\n", "'OriginalData'", ":", "oriData", ",", "\n", "}", "\n", "\n", "save_root", "=", "osp", ".", "join", "(", "cfg", ".", "log_dir", ",", "batchDict", "[", "'left_image_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "mkdir_or_exist", "(", "save_root", ")", "\n", "save_path", "=", "osp", ".", "join", "(", "save_root", ",", "'result.pkl'", ")", "\n", "print", "(", "'Result of {} will be saved to {}!'", ".", "format", "(", "batchDict", "[", "'left_image_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "save_path", ")", ")", "\n", "\n", "mmcv", ".", "dump", "(", "logData", ",", "save_path", ")", "\n", "\n", "return", "logData", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.train.batch_processor": [[31, 76], ["model", "train.batch_processor.parse_losses"], "function", ["None"], ["'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'number of gpus to use (only applicable to non-distributed training)'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'pytorch'", ",", "\n", "help", "=", "'job launcher'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "# update configs according to CLI args", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "resume_from", "=", "args", ".", "resume_from", "\n", "", "if", "args", ".", "validate", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "validate", "=", "args", ".", "validate", "\n", "", "if", "args", ".", "gpus", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "gpus", "=", "args", ".", "gpus", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "", "mkdir_or_exist", "(", "cfg", ".", "work_dir", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.train.train_matcher": [[78, 91], ["dmb.utils.env.get_root_logger", "train._dist_train", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.env.get_root_logger", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.train._dist_train"], ["# init the logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "'{}_log.txt'", ".", "format", "(", "timestamp", ")", ")", "\n", "logger", "=", "get_root_logger", "(", "cfg", ".", "work_dir", ",", "cfg", ".", "log_level", ",", "filename", "=", "log_file", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUs\"", ".", "format", "(", "cfg", ".", "gpus", ")", ")", "\n", "logger", ".", "info", "(", "'Distributed training: {}'", ".", "format", "(", "distributed", ")", ")", "\n", "\n", "# log environment info", "\n", "logger", ".", "info", "(", "\"Collecting env info (might take some time)\"", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", ")", "\n", "logger", ".", "info", "(", "\"\\n\"", "+", "collect_env_info", "(", ")", ")", "\n", "logger", ".", "info", "(", "'\\n'", "+", "dash_line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.train._dist_train": [[94, 194], ["apex.parallel.convert_syncbn_model.cuda", "dmb.utils.solver.build_optimizer", "cfg.get", "mmcv.parallel.MMDistributedDataParallel", "dmb.utils.runner.Runner", "logger.info", "dmb.utils.runner.Runner.register_training_hooks", "logger.info", "dmb.utils.runner.Runner.register_hook", "logger.info", "dmb.utils.runner.Runner.register_hook", "dmb.utils.runner.Runner.run", "dmb.data.loaders.build_data_loader", "apex.parallel.convert_syncbn_model", "amp.initialize", "apex.parallel.convert_syncbn_model.cuda", "dmb.utils.DistApexOptimizerHook", "dmb.utils.DistOptimizerHook", "mmcv.runner.DistSamplerSeedHook", "mmcv.runner.hooks.EmptyCacheHook", "cfg.get", "cfg.get", "dmb.utils.runner.Runner.resume", "isinstance", "logger.info", "dmb.utils.runner.Runner.register_hook", "logger.info", "dmb.utils.runner.Runner.register_hook", "logger.info", "logger.info", "dmb.utils.runner.Runner.load_checkpoint", "torch.cuda.current_device", "dmb.utils.TensorboardLoggerHook", "dmb.utils.TextLoggerHook", "dmb.utils.runner.Runner.register_hook", "dmb.utils.runner.Runner.register_hook", "dmb.data.datasets.evaluation.stereo.DistStereoEvalHook", "dmb.utils.runner.Runner.register_hook", "dmb.visualization.stereo.DistStereoVisHook", "dmb.utils.runner.Runner.register_hook", "dmb.data.datasets.evaluation.flow.DistFlowEvalHook", "dmb.visualization.flow.DistFlowVisHook"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.solver.build_optimizer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_training_hooks", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.run", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.loaders.builder.build_data_loader", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.resume", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.load_checkpoint", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_hook"], ["logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ".", "text", ")", ")", "\n", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "'Set random seed to {}'", ".", "format", "(", "args", ".", "seed", ")", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "model", "=", "build_model", "(", "cfg", ")", "\n", "\n", "train_dataset", "=", "build_dataset", "(", "cfg", ",", "'train'", ")", "\n", "eval_dataset", "=", "build_dataset", "(", "cfg", ",", "'eval'", ")", "\n", "# all data here will be visualized as image on tensorboardX", "\n", "vis_dataset", "=", "build_dataset", "(", "cfg", ",", "'vis'", ")", "\n", "\n", "if", "cfg", ".", "checkpoint_config", "is", "not", "None", ":", "\n", "# save config file content in checkpoints as meta data", "\n", "        ", "cfg", ".", "checkpoint_config", ".", "meta", "=", "dict", "(", "\n", "config", "=", "cfg", ".", "text", ",", "\n", ")", "\n", "\n", "", "train_matcher", "(", "\n", "cfg", ",", "model", ",", "train_dataset", ",", "\n", "eval_dataset", ",", "vis_dataset", ",", "\n", "distributed", "=", "distributed", ",", "\n", "validate", "=", "args", ".", "validate", ",", "\n", "logger", "=", "logger", "\n", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.apis.train._non_dist_train": [[196, 232], ["mmcv.parallel.MMDataParallel().cuda", "dmb.utils.solver.build_optimizer", "dmb.utils.runner.Runner", "logger.info", "dmb.utils.runner.Runner.register_training_hooks", "logger.info", "dmb.utils.runner.Runner.register_hook", "dmb.utils.runner.Runner.run", "dmb.data.loaders.build_data_loader", "mmcv.runner.hooks.EmptyCacheHook", "dmb.utils.runner.Runner.resume", "mmcv.parallel.MMDataParallel", "dmb.utils.runner.Runner.load_checkpoint", "range"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.solver.build_optimizer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_training_hooks", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.register_hook", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.run", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.loaders.builder.build_data_loader", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.resume", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.load_checkpoint"], []], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.modeling.__init__.build_model": [[10, 13], ["meta_arch"], "function", ["None"], []], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cmn.cmn.ConfHead.__init__": [[21, 31], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConfHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "sec_in_planes", "=", "int", "(", "self", ".", "in_planes", "//", "3", ")", "\n", "self", ".", "sec_in_planes", "=", "self", ".", "sec_in_planes", "if", "self", ".", "sec_in_planes", ">", "0", "else", "1", "\n", "\n", "self", ".", "conf_net", "=", "nn", ".", "Sequential", "(", "\n", "conv_bn_relu", "(", "batch_norm", ",", "self", ".", "in_planes", ",", "self", ".", "sec_in_planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "sec_in_planes", ",", "1", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cmn.cmn.ConfHead.forward": [[33, 36], ["cmn.ConfHead.conf_net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "cost", ")", ":", "\n", "        ", "conf", "=", "self", ".", "conf_net", "(", "cost", ")", "\n", "return", "conf", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cmn.cmn.Cmn.__init__": [[41, 56], ["torch.Module.__init__", "cfg.copy", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "loss.make_cmn_loss_evaluator", "cmn.ConfHead", "range"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cmn.loss.make_cmn_loss_evaluator"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_planes", ",", "num", ",", "alpha", ",", "beta", ")", ":", "\n", "        ", "super", "(", "Cmn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "batch_norm", "=", "self", ".", "cfg", ".", "model", ".", "batch_norm", "\n", "conf_heads", "=", "nn", ".", "ModuleList", "(", "\n", "[", "ConfHead", "(", "in_planes", ",", "batch_norm", ")", "for", "_", "in", "range", "(", "num", ")", "]", "\n", ")", "\n", "loss_evaluator", "=", "make_cmn_loss_evaluator", "(", "cfg", ")", "\n", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "\n", "self", ".", "conf_heads", "=", "conf_heads", "\n", "self", ".", "loss_evaluator", "=", "loss_evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cmn.cmn.Cmn.get_confidence": [[57, 70], ["len", "len", "len", "len", "conf_head", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "zip"], "methods", ["None"], ["", "def", "get_confidence", "(", "self", ",", "costs", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "conf_heads", ")", "==", "len", "(", "costs", ")", ",", "\"NUM of confidence heads({}) must be equal to NUM\"", "\"of cost volumes({})\"", ".", "format", "(", "len", "(", "self", ".", "conf_heads", ")", ",", "len", "(", "costs", ")", ")", "\n", "\n", "# for convenience to use log sigmoid when calculate loss,", "\n", "# we don't directly confidence cost to confidence by sigmoid", "\n", "conf_costs", "=", "[", "conf_head", "(", "cost", ")", "for", "cost", ",", "conf_head", "in", "zip", "(", "costs", ",", "self", ".", "conf_heads", ")", "]", "\n", "# convert to confidence", "\n", "confs", "=", "[", "torch", ".", "sigmoid", "(", "conf_cost", ")", "for", "conf_cost", "in", "conf_costs", "]", "\n", "# calculate variance modulated by confidence", "\n", "cost_vars", "=", "[", "self", ".", "alpha", "*", "(", "1", "-", "conf", ")", "+", "self", ".", "beta", "for", "conf", "in", "confs", "]", "\n", "\n", "return", "confs", ",", "cost_vars", ",", "conf_costs", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cmn.cmn.Cmn.get_loss": [[71, 75], ["cmn.Cmn.loss_evaluator"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "confs", ",", "target", "=", "None", ")", ":", "\n", "        ", "cm_losses", "=", "self", ".", "loss_evaluator", "(", "confs", ",", "target", ")", "\n", "\n", "return", "cm_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cmn.cmn.Cmn.forward": [[76, 84], ["cmn.Cmn.get_confidence", "cmn.Cmn.get_loss"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.cmn.cmn.Cmn.get_confidence", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cmn.cmn.Cmn.get_loss"], ["", "def", "forward", "(", "self", ",", "costs", ",", "target", "=", "None", ")", ":", "\n", "        ", "confs", ",", "cost_vars", ",", "conf_costs", "=", "self", ".", "get_confidence", "(", "costs", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "cm_losses", "=", "self", ".", "get_loss", "(", "conf_costs", ",", "target", ")", "\n", "return", "cost_vars", ",", "cm_losses", "\n", "", "else", ":", "\n", "            ", "return", "cost_vars", ",", "confs", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cmn.cmn.build_cmn": [[86, 93], ["cmn.Cmn"], "function", ["None"], ["", "", "", "def", "build_cmn", "(", "cfg", ")", ":", "\n", "    ", "in_planes", "=", "cfg", ".", "model", ".", "cmn", ".", "in_planes", "\n", "num", "=", "cfg", ".", "model", ".", "cmn", ".", "num", "\n", "alpha", "=", "cfg", ".", "model", ".", "cmn", ".", "alpha", "\n", "beta", "=", "cfg", ".", "model", ".", "cmn", ".", "beta", "\n", "\n", "return", "Cmn", "(", "cfg", ",", "in_planes", ",", "num", ",", "alpha", ",", "beta", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cmn.loss.CMNLossEvaluator.__init__": [[16, 20], ["cfg.copy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "loss_evaluators", ",", "loss_weights", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", ".", "copy", "(", ")", "\n", "self", ".", "loss_evaluators", "=", "loss_evaluators", "\n", "self", ".", "loss_weights", "=", "loss_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cmn.loss.CMNLossEvaluator.__call__": [[21, 34], ["dict", "loss.CMNLossEvaluator.loss_evaluators.items", "isinstance", "loss_evaluator", "dict.update", "ValueError", "loss_evaluator.items"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "confs", ",", "target", ")", ":", "\n", "        ", "loss_dict", "=", "dict", "(", ")", "\n", "\n", "for", "loss_name", ",", "loss_evaluator", "in", "self", ".", "loss_evaluators", ".", "items", "(", ")", ":", "\n", "            ", "weight", "=", "self", ".", "loss_weights", "[", "loss_name", "]", "\n", "if", "isinstance", "(", "loss_evaluator", ",", "ConfidenceNllLoss", ")", ":", "\n", "                ", "conf_nll_loss_dict", "=", "loss_evaluator", "(", "confs", ",", "target", ")", "\n", "conf_nll_loss_dict", "=", "{", "k", ":", "v", "*", "weight", "for", "k", ",", "v", "in", "conf_nll_loss_dict", ".", "items", "(", ")", "}", "\n", "loss_dict", ".", "update", "(", "conf_nll_loss_dict", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"{} not implemented.\"", ".", "format", "(", "loss_name", ")", ")", "\n", "\n", "", "", "return", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cmn.loss.make_conf_nll_loss_evaluator": [[7, 13], ["cfg.model.cmn.losses.nll_loss.copy", "cfg.model.cmn.losses.nll_loss.copy.update", "cfg.model.cmn.losses.nll_loss.copy.pop", "dmb.modeling.stereo.losses.conf_nll_loss.ConfidenceNllLoss"], "function", ["None"], ["def", "make_conf_nll_loss_evaluator", "(", "cfg", ")", ":", "\n", "    ", "default_args", "=", "cfg", ".", "model", ".", "cmn", ".", "losses", ".", "nll_loss", ".", "copy", "(", ")", "\n", "default_args", ".", "update", "(", "sparse", "=", "cfg", ".", "data", ".", "sparse", ")", "\n", "default_args", ".", "pop", "(", "'weight'", ")", "\n", "\n", "return", "ConfidenceNllLoss", "(", "**", "default_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cmn.loss.make_cmn_loss_evaluator": [[36, 47], ["dict", "dict", "loss.CMNLossEvaluator", "loss.make_conf_nll_loss_evaluator"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.cmn.loss.make_conf_nll_loss_evaluator"], ["", "", "def", "make_cmn_loss_evaluator", "(", "cfg", ")", ":", "\n", "    ", "loss_evaluators", "=", "dict", "(", ")", "\n", "loss_weights", "=", "dict", "(", ")", "\n", "\n", "if", "\"nll_loss\"", "in", "cfg", ".", "model", ".", "cmn", ".", "losses", ":", "\n", "        ", "conf_nll_loss_evaluator", "=", "make_conf_nll_loss_evaluator", "(", "cfg", ")", "\n", "loss_evaluators", "[", "\"conf_nll_loss\"", "]", "=", "conf_nll_loss_evaluator", "\n", "loss_weights", "[", "\"conf_nll_loss\"", "]", "=", "cfg", ".", "model", ".", "cmn", ".", "losses", ".", "nll_loss", ".", "weight", "\n", "\n", "", "return", "CMNLossEvaluator", "(", "\n", "cfg", ",", "loss_evaluators", ",", "loss_weights", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cost_processors.builder.CostProcessor.__init__": [[14, 16], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cost_processors.builder.CostProcessor.forward": [[17, 19], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cost_processors.builder.CatCostProcessor.__init__": [[23, 32], ["builder.CostProcessor.__init__", "cfg.model.cost_processor.cost_computation.get", "cfg.model.cost_processor.cost_computation.copy", "builder.CatCostProcessor.default_args.pop", "aggregators.build_cost_aggregator"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.builder.build_cost_aggregator"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "CatCostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "cat_func", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "get", "(", "'type'", ",", "'default'", ")", "\n", "self", ".", "cat_func", "=", "CAT_FUNCS", "[", "cat_func", "]", "\n", "\n", "self", ".", "default_args", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "copy", "(", ")", "\n", "self", ".", "default_args", ".", "pop", "(", "'type'", ")", "\n", "\n", "self", ".", "aggregator", "=", "build_cost_aggregator", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cost_processors.builder.CatCostProcessor.forward": [[33, 41], ["builder.CatCostProcessor.cat_func", "builder.CatCostProcessor.aggregator"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "ref_fms", ",", "tgt_fms", ",", "disp_sample", "=", "None", ")", ":", "\n", "# 1. build raw cost by concat", "\n", "        ", "cat_cost", "=", "self", ".", "cat_func", "(", "ref_fms", ",", "tgt_fms", ",", "disp_sample", "=", "disp_sample", ",", "**", "self", ".", "default_args", ")", "\n", "\n", "# 2. aggregate cost by 3D-hourglass", "\n", "costs", "=", "self", ".", "aggregator", "(", "cat_cost", ")", "\n", "\n", "return", "costs", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cost_processors.builder.DifCostProcessor.__init__": [[46, 55], ["builder.CostProcessor.__init__", "cfg.model.cost_processor.cost_computation.get", "cfg.model.cost_processor.cost_computation.copy", "builder.DifCostProcessor.default_args.pop", "aggregators.build_cost_aggregator"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.builder.build_cost_aggregator"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "DifCostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "dif_func", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "get", "(", "'type'", ",", "'default'", ")", "\n", "self", ".", "dif_func", "=", "DIF_FUNCS", "[", "dif_func", "]", "\n", "\n", "self", ".", "default_args", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "copy", "(", ")", "\n", "self", ".", "default_args", ".", "pop", "(", "'type'", ")", "\n", "\n", "self", ".", "aggregator", "=", "build_cost_aggregator", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cost_processors.builder.DifCostProcessor.forward": [[56, 64], ["builder.DifCostProcessor.dif_func", "builder.DifCostProcessor.aggregator"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "ref_fms", ",", "tgt_fms", ",", "disp_sample", "=", "None", ")", ":", "\n", "# 1. build raw cost by concat", "\n", "        ", "cat_cost", "=", "self", ".", "dif_func", "(", "ref_fms", ",", "tgt_fms", ",", "disp_sample", "=", "disp_sample", ",", "**", "self", ".", "default_args", ")", "\n", "\n", "# 2. aggregate cost by 3D-hourglass", "\n", "costs", "=", "self", ".", "aggregator", "(", "cat_cost", ")", "\n", "\n", "return", "costs", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cost_processors.builder.CorCostProcessor.__init__": [[69, 78], ["builder.CostProcessor.__init__", "cfg.model.cost_processor.cost_computation.get", "cfg.model.cost_processor.cost_computation.copy", "builder.CorCostProcessor.default_args.pop", "aggregators.build_cost_aggregator"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.builder.build_cost_aggregator"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "CorCostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "cor_func", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "get", "(", "'type'", ",", "'default'", ")", "\n", "self", ".", "cor_func", "=", "COR_FUNCS", "[", "cor_func", "]", "\n", "\n", "self", ".", "default_args", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "copy", "(", ")", "\n", "self", ".", "default_args", ".", "pop", "(", "'type'", ")", "\n", "\n", "self", ".", "aggregator", "=", "build_cost_aggregator", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cost_processors.builder.CorCostProcessor.forward": [[79, 87], ["builder.CorCostProcessor.cor_func", "builder.CorCostProcessor.aggregator"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "ref_fms", ",", "tgt_fms", ",", "disp_sample", "=", "None", ")", ":", "\n", "# 1. build raw cost by correlation", "\n", "        ", "cor_cost", "=", "self", ".", "cor_func", "(", "ref_fms", ",", "tgt_fms", ",", "disp_sample", "=", "disp_sample", ",", "**", "self", ".", "default_args", ")", "\n", "\n", "# 2. aggregate cost by 2D-hourglass", "\n", "costs", "=", "self", ".", "aggregator", "(", "cor_cost", ")", "\n", "\n", "return", "costs", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cost_processors.builder.build_cost_processor": [[97, 108], ["dict", "PROCESSORS.keys"], "function", ["None"], ["def", "build_cost_processor", "(", "cfg", ")", ":", "\n", "    ", "proc_type", "=", "cfg", ".", "model", ".", "cost_processor", ".", "type", "\n", "assert", "proc_type", "in", "PROCESSORS", ",", "\"cost_processor type not found, excepted: {},\"", "\"but got {}\"", ".", "format", "(", "PROCESSORS", ".", "keys", "(", ")", ",", "proc_type", ")", "\n", "\n", "args", "=", "dict", "(", "\n", "cfg", "=", "cfg", ",", "\n", ")", "\n", "processor", "=", "PROCESSORS", "[", "proc_type", "]", "(", "**", "args", ")", "\n", "\n", "return", "processor", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cost_processors.DeepPruner.ConfidenceRangePredictor.__init__": [[37, 85], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.cost_processors.utils.hw_hourglass.HWHourglass", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "dmb.modeling.stereo.cost_processors.utils.hw_hourglass.HWHourglass", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "hourglass_in_planes", ",", "disparity_sample_number", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConfidenceRangePredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "hourglass_in_planes", "=", "hourglass_in_planes", "\n", "self", ".", "disparity_sample_number", "=", "disparity_sample_number", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "self", ".", "dres0", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "in_planes", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dres1", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "hourglass_in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "\n", "self", ".", "min_disparity_predictor", "=", "nn", ".", "Sequential", "(", "\n", "HWHourglass", "(", "hourglass_in_planes", ",", "batch_norm", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "hourglass_in_planes", ",", "hourglass_in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv3d", "(", "hourglass_in_planes", "*", "2", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "self", ".", "max_disparity_predictor", "=", "nn", ".", "Sequential", "(", "\n", "HWHourglass", "(", "hourglass_in_planes", ",", "batch_norm", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "hourglass_in_planes", ",", "hourglass_in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv3d", "(", "hourglass_in_planes", "*", "2", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "# batch norm cannot be used here, as disparity map is the input and output", "\n", "self", ".", "min_disparity_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "# batch norm cannot be used here, as disparity map is the input and output", "\n", "self", ".", "max_disparity_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "min_disparity_feature_conv", "=", "conv_bn_relu", "(", "batch_norm", ",", "disparity_sample_number", ",", "disparity_sample_number", ",", "\n", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "max_disparity_feature_conv", "=", "conv_bn_relu", "(", "batch_norm", ",", "disparity_sample_number", ",", "disparity_sample_number", ",", "\n", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cost_processors.DeepPruner.ConfidenceRangePredictor.forward": [[86, 120], ["DeepPruner.ConfidenceRangePredictor.dres0", "DeepPruner.ConfidenceRangePredictor.dres1", "DeepPruner.ConfidenceRangePredictor.min_disparity_predictor().squeeze", "DeepPruner.ConfidenceRangePredictor.max_disparity_predictor().squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "DeepPruner.ConfidenceRangePredictor.min_disparity_conv", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "DeepPruner.ConfidenceRangePredictor.max_disparity_conv", "DeepPruner.ConfidenceRangePredictor.min_disparity_feature_conv", "DeepPruner.ConfidenceRangePredictor.max_disparity_feature_conv", "DeepPruner.ConfidenceRangePredictor.min_disparity_predictor", "DeepPruner.ConfidenceRangePredictor.max_disparity_predictor"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax"], ["", "def", "forward", "(", "self", ",", "raw_cost", ",", "disparity_sample", ")", ":", "\n", "# in: [B, in_planes, D, H, W], out: [B, 64, D, H, W]", "\n", "        ", "cost", "=", "self", ".", "dres0", "(", "raw_cost", ")", "\n", "# in: [B, 64, D, H, W], out: [B, hourglass_in_planes, D, H, W]", "\n", "cost", "=", "self", ".", "dres1", "(", "cost", ")", "\n", "\n", "# in: [B, hourglass_in_planes, D, H, W], mid: [B, 1, D, H, W], out: [B, D, H, W]", "\n", "cost_for_min", "=", "self", ".", "min_disparity_predictor", "(", "cost", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "# in: [B, hourglass_in_planes, D, H, W], mid: [B, 1, D, H, W], out: [B, D, H, W]", "\n", "cost_for_max", "=", "self", ".", "max_disparity_predictor", "(", "cost", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "# soft arg-min", "\n", "# in: [B, D, H, W], out: [B, D, H, W]", "\n", "prob_for_min", "=", "F", ".", "softmax", "(", "cost_for_min", ",", "dim", "=", "1", ")", "\n", "# in: [B, D, H, W] * [B, D, H, W], out: [B, 1, H, W]", "\n", "min_disparity", "=", "torch", ".", "sum", "(", "prob_for_min", "*", "disparity_sample", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "# in: [B, 1, H, W], out: [B, 1, H, W]", "\n", "min_disparity", "=", "self", ".", "min_disparity_conv", "(", "min_disparity", ")", "\n", "\n", "# soft arg-min", "\n", "# in: [B, D, H, W], out: [B, D, H, W]", "\n", "prob_for_max", "=", "F", ".", "softmax", "(", "cost_for_max", ",", "dim", "=", "1", ")", "\n", "# in: [B, D, H, W] * [B, D, H, W], out: [B, 1, H, W]", "\n", "max_disparity", "=", "torch", ".", "sum", "(", "prob_for_max", "*", "disparity_sample", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "# in: [B, 1, H, W], out: [B, 1, H, W]", "\n", "max_disparity", "=", "self", ".", "max_disparity_conv", "(", "max_disparity", ")", "\n", "\n", "# in: [B, D, H, W], out: [B, D, H, W]", "\n", "min_disparity_feature", "=", "self", ".", "min_disparity_feature_conv", "(", "cost_for_min", ")", "\n", "# in: [B, D, H, W], out: [B, D, H, W]", "\n", "max_disparity_feature", "=", "self", ".", "max_disparity_feature_conv", "(", "cost_for_max", ")", "\n", "\n", "return", "min_disparity", ",", "max_disparity", ",", "min_disparity_feature", ",", "max_disparity_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cost_processors.DeepPruner.DeepPrunerProcessor.__init__": [[158, 189], ["torch.Module.__init__", "cfg.copy", "DeepPruner.DeepPrunerProcessor.confidence_range_predictor_args.update", "DeepPruner.ConfidenceRangePredictor", "aggregators.build_cost_aggregator", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.builder.build_cost_aggregator", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "DeepPrunerProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "copy", "(", ")", "\n", "self", ".", "batch_norm", "=", "cfg", ".", "model", ".", "batch_norm", "\n", "\n", "self", ".", "patch_match_disparity_sample_number", "=", "cfg", ".", "model", ".", "cost_processor", ".", "patch_match_disparity_sample_number", "\n", "self", ".", "uniform_disparity_sample_number", "=", "cfg", ".", "model", ".", "cost_processor", ".", "uniform_disparity_sample_number", "\n", "\n", "# setting confidence range predictor", "\n", "self", ".", "confidence_range_predictor_args", "=", "cfg", ".", "model", ".", "cost_processor", ".", "confidence_range_predictor", "\n", "self", ".", "confidence_range_predictor_args", ".", "update", "(", "\n", "# besides the disparity samples generated by PatchMatch, it also includes min, max disparity", "\n", "disparity_sample_number", "=", "self", ".", "patch_match_disparity_sample_number", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", "\n", ")", "\n", "self", ".", "confidence_range_predictor", "=", "ConfidenceRangePredictor", "(", "\n", "**", "self", ".", "confidence_range_predictor_args", "\n", ")", "\n", "\n", "# setting cost aggregator", "\n", "self", ".", "cost_aggregator", "=", "build_cost_aggregator", "(", "cfg", ")", "\n", "# batch norm cannot be used here, as disparity map is the input and output", "\n", "self", ".", "disparity_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "disparity_feature_conv", "=", "conv_bn_relu", "(", "self", ".", "batch_norm", ",", "\n", "in_planes", "=", "self", ".", "uniform_disparity_sample_number", ",", "\n", "out_planes", "=", "self", ".", "uniform_disparity_sample_number", ",", "\n", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "\n", "dilation", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cost_processors.DeepPruner.DeepPrunerProcessor.forward": [[190, 235], ["utils.cat_fms.fast_cat_fms", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DeepPruner.DeepPrunerProcessor.confidence_range_predictor", "min_disparity_feature.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "max_disparity_feature.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "DeepPruner.DeepPrunerProcessor.disparity_conv", "DeepPruner.DeepPrunerProcessor.disparity_feature_conv", "disparity_sample.unsqueeze", "DeepPruner.DeepPrunerProcessor.cost_aggregator", "min_disparity_feature.unsqueeze().expand.unsqueeze().expand.unsqueeze", "max_disparity_feature.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.cat_fms.fast_cat_fms", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax"], ["", "def", "forward", "(", "self", ",", "stage", ",", "left", ",", "right", ",", "disparity_sample", ",", "min_disparity_feature", "=", "None", ",", "max_disparity_feature", "=", "None", ")", ":", "\n", "# [B, 2*C, D, H, W]", "\n", "        ", "raw_cost", "=", "fast_cat_fms", "(", "left", ",", "right", ",", "disp_sample", "=", "disparity_sample", ")", "\n", "\n", "# [B, 2*C+1, D, H, W]", "\n", "raw_cost", "=", "torch", ".", "cat", "(", "(", "raw_cost", ",", "disparity_sample", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "if", "stage", "==", "'pre'", ":", "# (Pre-PatchMatch) using patch match as sampler,", "\n", "            ", "output", "=", "self", ".", "confidence_range_predictor", "(", "raw_cost", ",", "disparity_sample", ")", "\n", "\n", "", "else", ":", "# 'post', (Post-ConfidenceRangePredictor) using uniform sampler", "\n", "# [B, path_match_disparity_sample_number, H, W] ->", "\n", "# [B, path_match_disparity_sample_number, 1, H, W] ->", "\n", "# [B, path_match_disparity_sample_number, uniform_disparity_sample_number, H, W]", "\n", "            ", "min_disparity_feature", "=", "min_disparity_feature", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "uniform_disparity_sample_number", ",", "-", "1", ",", "-", "1", ")", "\n", "max_disparity_feature", "=", "max_disparity_feature", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "uniform_disparity_sample_number", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "# [B, 2*C+2*path_match_disparity_sample_number+1, uniform_disparity_sample_number, H, W]", "\n", "raw_cost", "=", "torch", ".", "cat", "(", "(", "raw_cost", ",", "min_disparity_feature", ",", "max_disparity_feature", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# the returned cost after cost aggregation is in tuple", "\n", "# [B, uniform_disparity_sample_number, H, W]", "\n", "cost", "=", "self", ".", "cost_aggregator", "(", "raw_cost", ")", "[", "0", "]", "\n", "\n", "# soft arg-min", "\n", "# in: [B, D, H, W], out: [B, D, H, W]", "\n", "prob_volume", "=", "F", ".", "softmax", "(", "cost", ",", "dim", "=", "1", ")", "\n", "# in: [B, D, H, W] * [B, D, H, W], out: [B, 1, H, W]", "\n", "disparity", "=", "torch", ".", "sum", "(", "prob_volume", "*", "disparity_sample", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# in: [B, 1, H, W], out: [B, 1, H*2, W*2]", "\n", "disparity", "=", "F", ".", "interpolate", "(", "disparity", "*", "2", ",", "scale_factor", "=", "(", "2", ",", "2", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "# in: [B, D, H*2, W*2], out: [B, D, H*2, W*2]", "\n", "disparity_feature", "=", "F", ".", "interpolate", "(", "cost", ",", "scale_factor", "=", "(", "2", ",", "2", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "# in: [B, 1, H*2, W*2], out: [B, 1, H*2, W*2]", "\n", "disparity", "=", "self", ".", "disparity_conv", "(", "disparity", ")", "\n", "\n", "# in: [B, D, H*2, W*2], out: [B, D, H*2, W*2]", "\n", "disparity_feature", "=", "self", ".", "disparity_feature_conv", "(", "disparity_feature", ")", "\n", "\n", "output", "=", "[", "disparity", ",", "disparity_feature", "]", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cost_processors.AnyNet.AnyNetProcessor.__init__": [[26, 48], ["torch.Module.__init__", "cfg.copy", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "aggregators.AnyNet.AnyNetAggregator"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "AnyNetProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "copy", "(", ")", "\n", "self", ".", "batch_norm", "=", "cfg", ".", "model", ".", "batch_norm", "\n", "\n", "self", ".", "stage", "=", "self", ".", "cfg", ".", "model", ".", "stage", "\n", "\n", "# cost computation parameters, dict", "\n", "self", ".", "max_disp", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "max_disp", "\n", "self", ".", "start_disp", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "start_disp", "\n", "self", ".", "dilation", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "dilation", "\n", "\n", "\n", "# cost aggregation", "\n", "self", ".", "aggregator_type", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_aggregator", ".", "type", "\n", "self", ".", "aggregator", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "st", "in", "self", ".", "stage", ":", "\n", "            ", "self", ".", "aggregator", "[", "st", "]", "=", "AnyNetAggregator", "(", "\n", "in_planes", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_aggregator", ".", "in_planes", "[", "st", "]", ",", "\n", "agg_planes", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_aggregator", ".", "agg_planes", "[", "st", "]", ",", "\n", "num", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_aggregator", ".", "num", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cost_processors.AnyNet.AnyNetProcessor.forward": [[50, 79], ["torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "disp_sample.view().expand().to().float.view().expand().to().float.view().expand().to().float", "utils.dif_fms.fast_dif_fms", "torch.interpolate", "torch.interpolate", "torch.interpolate", "disp_sample.view().expand().to().float.view().expand().to().float.view().expand().to", "disp_sample.view().expand().to().float.view().expand().to().float.view().expand", "disp_sample.view().expand().to().float.view().expand().to().float.view"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.dif_fms.fast_dif_fms"], ["", "", "def", "forward", "(", "self", ",", "stage", ",", "left", ",", "right", ",", "disp", "=", "None", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "left", ".", "shape", "\n", "# construct the raw cost volume", "\n", "\n", "end_disp", "=", "self", ".", "start_disp", "[", "stage", "]", "+", "self", ".", "max_disp", "[", "stage", "]", "-", "1", "\n", "\n", "# disparity sample number", "\n", "D", "=", "(", "self", ".", "max_disp", "[", "stage", "]", "+", "self", ".", "dilation", "[", "stage", "]", "-", "1", ")", "//", "self", ".", "dilation", "[", "stage", "]", "\n", "\n", "# generate disparity samples, in [B, D, H, W] layout", "\n", "disp_sample", "=", "torch", ".", "linspace", "(", "self", ".", "start_disp", "[", "stage", "]", ",", "end_disp", ",", "D", ")", "\n", "disp_sample", "=", "disp_sample", ".", "view", "(", "1", ",", "D", ",", "1", ",", "1", ")", ".", "expand", "(", "B", ",", "D", ",", "H", ",", "W", ")", ".", "to", "(", "left", ".", "device", ")", ".", "float", "(", ")", "\n", "\n", "# if initial disparity guessed, used for warping", "\n", "if", "disp", "is", "not", "None", ":", "\n", "# up-sample disparity map to the size of left", "\n", "            ", "H", ",", "W", "=", "left", ".", "shape", "[", "-", "2", ":", "]", "\n", "scale", "=", "W", "/", "disp", ".", "shape", "[", "-", "1", "]", "\n", "disp", "=", "F", ".", "interpolate", "(", "disp", "*", "scale", ",", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "# shift the disparity sample to be centered at the given disparity map", "\n", "disp_sample", "=", "disp_sample", "+", "disp", "\n", "\n", "# [B, C, D, H, W]", "\n", "", "raw_cost", "=", "fast_dif_fms", "(", "left", ",", "right", ",", "disp_sample", "=", "disp_sample", ")", "\n", "\n", "# list [[B, D, H, W]]", "\n", "cost", "=", "self", ".", "aggregator", "[", "stage", "]", "(", "raw_cost", ")", "\n", "\n", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.GCNet.GCAggregator.__init__": [[21, 49], ["torch.Module.__init__", "GCNet.GCAggregator._make_layer", "GCNet.GCAggregator._make_layer", "GCNet.GCAggregator._make_layer", "GCNet.GCAggregator._make_layer", "GCNet.GCAggregator._make_layer", "GCNet.GCAggregator._make_layer", "GCNet.GCAggregator._make_layer", "GCNet.GCAggregator._make_layer", "GCNet.GCAggregator._make_layer", "GCNet.GCAggregator._make_layer", "GCNet.GCAggregator._make_layer", "GCNet.GCAggregator._make_layer", "GCNet.GCAggregator._make_layer", "GCNet.GCAggregator._make_layer", "GCNet.GCAggregator._make_tlayer", "GCNet.GCAggregator._make_tlayer", "GCNet.GCAggregator._make_tlayer", "GCNet.GCAggregator._make_tlayer", "GCNet.GCAggregator._make_tlayer"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.GCNet.GCAggregator._make_tlayer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.GCNet.GCAggregator._make_tlayer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.GCNet.GCAggregator._make_tlayer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.GCNet.GCAggregator._make_tlayer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.GCNet.GCAggregator._make_tlayer"], ["def", "__init__", "(", "self", ",", "max_disp", ",", "in_planes", "=", "64", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "GCAggregator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_disp", "=", "max_disp", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "F", "=", "self", ".", "in_planes", "//", "2", "\n", "\n", "self", ".", "layer19", "=", "self", ".", "_make_layer", "(", "self", ".", "in_planes", ",", "self", ".", "F", ")", "\n", "self", ".", "layer20", "=", "self", ".", "_make_layer", "(", "self", ".", "F", ",", "self", ".", "F", ")", "\n", "self", ".", "layer21", "=", "self", ".", "_make_layer", "(", "self", ".", "in_planes", "+", "self", ".", "F", ",", "self", ".", "F", "*", "2", ",", "2", ")", "\n", "self", ".", "layer22", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "2", ")", "\n", "self", ".", "layer23", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "2", ")", "\n", "self", ".", "layer24", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "2", "+", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "2", ",", "2", ")", "\n", "self", ".", "layer25", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "2", ")", "\n", "self", ".", "layer26", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "2", ")", "\n", "self", ".", "layer27", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "2", "+", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "2", ",", "2", ")", "\n", "self", ".", "layer28", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "2", ")", "\n", "self", ".", "layer29", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "2", ")", "\n", "self", ".", "layer30", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "2", "+", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "4", ",", "2", ")", "\n", "\n", "self", ".", "layer31", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "4", ",", "self", ".", "F", "*", "4", ")", "\n", "self", ".", "layer32", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "4", ",", "self", ".", "F", "*", "4", ")", "\n", "\n", "self", ".", "layer33", "=", "self", ".", "_make_tlayer", "(", "self", ".", "F", "*", "4", ",", "self", ".", "F", "*", "2", ")", "\n", "self", ".", "layer34", "=", "self", ".", "_make_tlayer", "(", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "2", ")", "\n", "self", ".", "layer35", "=", "self", ".", "_make_tlayer", "(", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "2", ")", "\n", "self", ".", "layer36", "=", "self", ".", "_make_tlayer", "(", "self", ".", "F", "*", "2", ",", "self", ".", "F", ")", "\n", "self", ".", "layer37", "=", "self", ".", "_make_tlayer", "(", "self", ".", "F", ",", "1", ",", "has_bn_relu", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.GCNet.GCAggregator._make_layer": [[50, 55], ["dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu"], ["", "def", "_make_layer", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "return", "conv3d_bn_relu", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", ",", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.GCNet.GCAggregator._make_tlayer": [[57, 69], ["dmb.modeling.stereo.layers.basic_layers.deconv3d_bn_relu", "torch.ConvTranspose3d", "torch.ConvTranspose3d"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.deconv3d_bn_relu"], ["", "def", "_make_tlayer", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "2", ",", "has_bn_relu", "=", "True", ")", ":", "\n", "        ", "if", "has_bn_relu", ":", "\n", "            ", "return", "deconv3d_bn_relu", "(", "\n", "self", ".", "batch_norm", ",", "in_planes", ",", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "\n", "output_padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "nn", ".", "ConvTranspose3d", "(", "\n", "in_planes", ",", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.GCNet.GCAggregator.forward": [[71, 121], ["GCNet.GCAggregator.layer19", "GCNet.GCAggregator.layer20", "GCNet.GCAggregator.layer21", "GCNet.GCAggregator.layer22", "GCNet.GCAggregator.layer23", "GCNet.GCAggregator.layer24", "GCNet.GCAggregator.layer25", "GCNet.GCAggregator.layer26", "GCNet.GCAggregator.layer27", "GCNet.GCAggregator.layer28", "GCNet.GCAggregator.layer29", "GCNet.GCAggregator.layer30", "GCNet.GCAggregator.layer31", "GCNet.GCAggregator.layer32", "GCNet.GCAggregator.layer33", "GCNet.GCAggregator.layer34", "GCNet.GCAggregator.layer35", "GCNet.GCAggregator.layer36", "GCNet.GCAggregator.layer37", "GCNet.GCAggregator.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "raw_cost", ")", ":", "\n", "# (BatchSize, Channels*2, max_disp/2, Height/2, Width/2), Channels = in_planes//2", "\n", "        ", "cost_volume18", "=", "raw_cost", "\n", "# (BatchSize, Channels, max_disp/2, Height/2, Width/2)", "\n", "cost_volume19", "=", "self", ".", "layer19", "(", "cost_volume18", ")", "\n", "# (BatchSize, Channels, max_disp/2, Height/2, Width/2)", "\n", "cost_volume20", "=", "self", ".", "layer20", "(", "cost_volume19", ")", "\n", "# (BatchSize, Channels*2, max_disp/4, Height/4, Width/4)", "\n", "cost_volume21", "=", "self", ".", "layer21", "(", "torch", ".", "cat", "(", "[", "cost_volume18", ",", "cost_volume20", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "# (BatchSize, Channels*2, max_disp/4, Height/4, Width/4)", "\n", "cost_volume22", "=", "self", ".", "layer22", "(", "cost_volume21", ")", "\n", "# (BatchSize, Channels*2, max_disp/4, Height/4, Width/4)", "\n", "cost_volume23", "=", "self", ".", "layer23", "(", "cost_volume22", ")", "\n", "# (BatchSize, Channels*2, max_disp/8, Height/8, Width/8)", "\n", "cost_volume24", "=", "self", ".", "layer24", "(", "torch", ".", "cat", "(", "[", "cost_volume21", ",", "cost_volume23", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "# (BatchSize, Channels*2, max_disp/8, Height/8, Width/8)", "\n", "cost_volume25", "=", "self", ".", "layer25", "(", "cost_volume24", ")", "\n", "# (BatchSize, Channels*2, max_disp/8, Height/8, Width/8)", "\n", "cost_volume26", "=", "self", ".", "layer26", "(", "cost_volume25", ")", "\n", "# (BatchSize, Channels*2, max_disp/16, Height/16, Width/16)", "\n", "cost_volume27", "=", "self", ".", "layer27", "(", "torch", ".", "cat", "(", "[", "cost_volume24", ",", "cost_volume26", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "# (BatchSize, Channels*2, max_disp/16, Height/16, Width/16)", "\n", "cost_volume28", "=", "self", ".", "layer28", "(", "cost_volume27", ")", "\n", "# (BatchSize, Channels*2, max_disp/16, Height/16, Width/16)", "\n", "cost_volume29", "=", "self", ".", "layer29", "(", "cost_volume28", ")", "\n", "# (BatchSize, Channels*4, max_disp/32, Height/32, Width/32)", "\n", "cost_volume30", "=", "self", ".", "layer30", "(", "torch", ".", "cat", "(", "[", "cost_volume27", ",", "cost_volume29", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "# (BatchSize, Channels*4, max_disp/32, Height/32, Width/32)", "\n", "cost_volume31", "=", "self", ".", "layer31", "(", "cost_volume30", ")", "\n", "# (BatchSize, Channels*4, max_disp/32, Height/32, Width/32)", "\n", "cost_volume32", "=", "self", ".", "layer32", "(", "cost_volume31", ")", "\n", "\n", "# (BatchSize, Channels*2, max_disp/16, Height/16, Width/16)", "\n", "cost_volume33", "=", "self", ".", "layer33", "(", "cost_volume32", ")", "\n", "# (BatchSize, Channels*2, max_disp/8, Height/8, Width/8)", "\n", "cost_volume34", "=", "self", ".", "layer34", "(", "cost_volume33", "+", "cost_volume29", ")", "\n", "# (BatchSize, Channels*2, max_disp/4, Height/4, Width/4)", "\n", "cost_volume35", "=", "self", ".", "layer35", "(", "cost_volume34", "+", "cost_volume26", ")", "\n", "# (BatchSize, Channels, max_disp/2, Height/2, Width/2)", "\n", "cost_volume36", "=", "self", ".", "layer36", "(", "cost_volume35", "+", "cost_volume23", ")", "\n", "# (BatchSize, 1, max_disp, Height, Width)", "\n", "cost_volume37", "=", "self", ".", "layer37", "(", "cost_volume36", "+", "cost_volume20", ")", "\n", "# (BatchSize, max_disp, Height, Width)", "\n", "cost_volume", "=", "cost_volume37", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "\n", "return", "[", "cost_volume", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.AcfNet.AcfAggregator.__init__": [[24, 58], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.cost_processors.utils.hourglass.Hourglass", "dmb.modeling.stereo.cost_processors.utils.hourglass.Hourglass", "dmb.modeling.stereo.cost_processors.utils.hourglass.Hourglass", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "torch.Conv3d", "torch.Conv3d", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "torch.Conv3d", "torch.Conv3d", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu"], ["def", "__init__", "(", "self", ",", "max_disp", ",", "in_planes", "=", "64", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "AcfAggregator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_disp", "=", "max_disp", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "self", ".", "dres0", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "self", ".", "in_planes", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", ")", "\n", "self", ".", "dres1", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "conv3d_bn", "(", "batch_norm", ",", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "dres2", "=", "Hourglass", "(", "in_planes", "=", "32", ",", "batch_norm", "=", "batch_norm", ")", "\n", "self", ".", "dres3", "=", "Hourglass", "(", "in_planes", "=", "32", ",", "batch_norm", "=", "batch_norm", ")", "\n", "self", ".", "dres4", "=", "Hourglass", "(", "in_planes", "=", "32", ",", "batch_norm", "=", "batch_norm", ")", "\n", "\n", "self", ".", "classif1", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "classif2", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "classif3", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose3d", "(", "1", ",", "1", ",", "8", ",", "4", ",", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose3d", "(", "1", ",", "1", ",", "8", ",", "4", ",", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose3d", "(", "1", ",", "1", ",", "8", ",", "4", ",", "2", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.AcfNet.AcfAggregator.forward": [[59, 91], ["AcfNet.AcfAggregator.dres0", "AcfNet.AcfAggregator.dres2", "AcfNet.AcfAggregator.dres3", "AcfNet.AcfAggregator.dres4", "AcfNet.AcfAggregator.classif1", "AcfNet.AcfAggregator.deconv1", "AcfNet.AcfAggregator.deconv2", "AcfNet.AcfAggregator.deconv3", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "AcfNet.AcfAggregator.dres1", "AcfNet.AcfAggregator.classif2", "AcfNet.AcfAggregator.classif3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "raw_cost", ")", ":", "\n", "        ", "B", ",", "C", ",", "D", ",", "H", ",", "W", "=", "raw_cost", ".", "shape", "\n", "# concat_fms: (BatchSize, Channels*2, MaxDisparity/4, Height/4, Width/4)", "\n", "cost0", "=", "self", ".", "dres0", "(", "raw_cost", ")", "\n", "cost0", "=", "self", ".", "dres1", "(", "cost0", ")", "+", "cost0", "\n", "\n", "out1", ",", "pre1", ",", "post1", "=", "self", ".", "dres2", "(", "cost0", ",", "None", ",", "None", ")", "\n", "out1", "=", "out1", "+", "cost0", "\n", "\n", "out2", ",", "pre2", ",", "post2", "=", "self", ".", "dres3", "(", "out1", ",", "pre1", ",", "post1", ")", "\n", "out2", "=", "out2", "+", "cost0", "\n", "\n", "out3", ",", "pre3", ",", "post3", "=", "self", ".", "dres4", "(", "out2", ",", "pre2", ",", "post2", ")", "\n", "out3", "=", "out3", "+", "cost0", "\n", "\n", "cost1", "=", "self", ".", "classif1", "(", "out1", ")", "\n", "cost2", "=", "self", ".", "classif2", "(", "out2", ")", "+", "cost1", "\n", "cost3", "=", "self", ".", "classif3", "(", "out3", ")", "+", "cost2", "\n", "\n", "# (BatchSize, 1, MaxDisparity, Height, Width)", "\n", "full_h", ",", "full_w", "=", "H", "*", "4", ",", "W", "*", "4", "\n", "\n", "cost1", "=", "self", ".", "deconv1", "(", "cost1", ",", "[", "self", ".", "max_disp", ",", "full_h", ",", "full_w", "]", ")", "\n", "cost2", "=", "self", ".", "deconv2", "(", "cost2", ",", "[", "self", ".", "max_disp", ",", "full_h", ",", "full_w", "]", ")", "\n", "cost3", "=", "self", ".", "deconv3", "(", "cost3", ",", "[", "self", ".", "max_disp", ",", "full_h", ",", "full_w", "]", ")", "\n", "\n", "# (BatchSize, MaxDisparity, Height, Width)", "\n", "cost1", "=", "torch", ".", "squeeze", "(", "cost1", ",", "1", ")", "\n", "cost2", "=", "torch", ".", "squeeze", "(", "cost2", ",", "1", ")", "\n", "cost3", "=", "torch", ".", "squeeze", "(", "cost3", ",", "1", ")", "\n", "\n", "return", "[", "cost3", ",", "cost2", ",", "cost1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.PSMNet.PSMAggregator.__init__": [[24, 53], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.cost_processors.utils.hourglass.Hourglass", "dmb.modeling.stereo.cost_processors.utils.hourglass.Hourglass", "dmb.modeling.stereo.cost_processors.utils.hourglass.Hourglass", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu"], ["def", "__init__", "(", "self", ",", "max_disp", ",", "in_planes", "=", "64", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "PSMAggregator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_disp", "=", "max_disp", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "self", ".", "dres0", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "self", ".", "in_planes", ",", "32", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "dres1", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "conv3d_bn", "(", "batch_norm", ",", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "self", ".", "dres2", "=", "Hourglass", "(", "in_planes", "=", "32", ",", "batch_norm", "=", "batch_norm", ")", "\n", "self", ".", "dres3", "=", "Hourglass", "(", "in_planes", "=", "32", ",", "batch_norm", "=", "batch_norm", ")", "\n", "self", ".", "dres4", "=", "Hourglass", "(", "in_planes", "=", "32", ",", "batch_norm", "=", "batch_norm", ")", "\n", "\n", "self", ".", "classif1", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "classif2", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "classif3", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.PSMNet.PSMAggregator.forward": [[55, 96], ["PSMNet.PSMAggregator.dres0", "PSMNet.PSMAggregator.dres2", "PSMNet.PSMAggregator.dres3", "PSMNet.PSMAggregator.dres4", "PSMNet.PSMAggregator.classif1", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "PSMNet.PSMAggregator.dres1", "PSMNet.PSMAggregator.classif2", "PSMNet.PSMAggregator.classif3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "raw_cost", ")", ":", "\n", "        ", "B", ",", "C", ",", "D", ",", "H", ",", "W", "=", "raw_cost", ".", "shape", "\n", "# raw_cost: (BatchSize, Channels*2, MaxDisparity/4, Height/4, Width/4)", "\n", "cost0", "=", "self", ".", "dres0", "(", "raw_cost", ")", "\n", "cost0", "=", "self", ".", "dres1", "(", "cost0", ")", "+", "cost0", "\n", "\n", "out1", ",", "pre1", ",", "post1", "=", "self", ".", "dres2", "(", "cost0", ",", "None", ",", "None", ")", "\n", "out1", "=", "out1", "+", "cost0", "\n", "\n", "out2", ",", "pre2", ",", "post2", "=", "self", ".", "dres3", "(", "out1", ",", "pre1", ",", "post1", ")", "\n", "out2", "=", "out2", "+", "cost0", "\n", "\n", "out3", ",", "pre3", ",", "post3", "=", "self", ".", "dres4", "(", "out2", ",", "pre2", ",", "post2", ")", "\n", "out3", "=", "out3", "+", "cost0", "\n", "\n", "cost1", "=", "self", ".", "classif1", "(", "out1", ")", "\n", "cost2", "=", "self", ".", "classif2", "(", "out2", ")", "+", "cost1", "\n", "cost3", "=", "self", ".", "classif3", "(", "out3", ")", "+", "cost2", "\n", "\n", "# (BatchSize, 1, max_disp, Height, Width)", "\n", "full_h", ",", "full_w", "=", "H", "*", "4", ",", "W", "*", "4", "\n", "align_corners", "=", "True", "\n", "cost1", "=", "F", ".", "interpolate", "(", "\n", "cost1", ",", "[", "self", ".", "max_disp", ",", "full_h", ",", "full_w", "]", ",", "\n", "mode", "=", "'trilinear'", ",", "align_corners", "=", "align_corners", "\n", ")", "\n", "cost2", "=", "F", ".", "interpolate", "(", "\n", "cost2", ",", "[", "self", ".", "max_disp", ",", "full_h", ",", "full_w", "]", ",", "\n", "mode", "=", "'trilinear'", ",", "align_corners", "=", "align_corners", "\n", ")", "\n", "cost3", "=", "F", ".", "interpolate", "(", "\n", "cost3", ",", "[", "self", ".", "max_disp", ",", "full_h", ",", "full_w", "]", ",", "\n", "mode", "=", "'trilinear'", ",", "align_corners", "=", "align_corners", "\n", ")", "\n", "\n", "# (BatchSize, max_disp, Height, Width)", "\n", "cost1", "=", "torch", ".", "squeeze", "(", "cost1", ",", "1", ")", "\n", "cost2", "=", "torch", ".", "squeeze", "(", "cost2", ",", "1", ")", "\n", "cost3", "=", "torch", ".", "squeeze", "(", "cost3", ",", "1", ")", "\n", "\n", "return", "[", "cost3", ",", "cost2", ",", "cost1", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.StereoNet.StereoNetAggregator.__init__": [[27, 40], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "range"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu"], ["def", "__init__", "(", "self", ",", "max_disp", ",", "in_planes", "=", "32", ",", "batch_norm", "=", "True", ",", "num", "=", "4", ")", ":", "\n", "        ", "super", "(", "StereoNetAggregator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_disp", "=", "max_disp", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "num", "=", "num", "\n", "\n", "self", ".", "classify", "=", "nn", ".", "ModuleList", "(", "[", "\n", "conv3d_bn_relu", "(", "self", ".", "batch_norm", ",", "in_planes", ",", "32", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", "for", "_", "in", "range", "(", "self", ".", "num", ")", "\n", "]", ")", "\n", "\n", "self", ".", "lastconv", "=", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.StereoNet.StereoNetAggregator.forward": [[42, 56], ["range", "StereoNet.StereoNetAggregator.lastconv", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "raw_cost", ")", ":", "\n", "# default down-sample to 1/8 resolution, it also can be 1/16", "\n", "# raw_cost: (BatchSize, Channels, MaxDisparity/8, Height/8, Width/8)", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "num", ")", ":", "\n", "            ", "raw_cost", "=", "self", ".", "classify", "[", "i", "]", "(", "raw_cost", ")", "\n", "\n", "# cost: (BatchSize, 1, MaxDisparity/8, Height/8, Width/8)", "\n", "", "cost", "=", "self", ".", "lastconv", "(", "raw_cost", ")", "\n", "\n", "# (BatchSize, MaxDisparity/8, Height/8, Width/8)", "\n", "cost", "=", "torch", ".", "squeeze", "(", "cost", ",", "1", ")", "\n", "\n", "\n", "return", "[", "cost", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.builder.build_cost_aggregator": [[18, 30], ["cfg.model.cost_processor.cost_aggregator.copy", "cfg.model.cost_processor.cost_aggregator.copy.pop", "cfg.model.cost_processor.cost_aggregator.copy.update", "AGGREGATORS.keys"], "function", ["None"], ["        ", "raise", "NotImplementedError", "\n", "\n", "# Concatenate left and right feature to form cost volume", "\n", "", "", "class", "CatCostProcessor", "(", "CostProcessor", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "CatCostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "cat_func", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "get", "(", "'type'", ",", "'default'", ")", "\n", "self", ".", "cat_func", "=", "CAT_FUNCS", "[", "cat_func", "]", "\n", "\n", "self", ".", "default_args", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "copy", "(", ")", "\n", "self", ".", "default_args", ".", "pop", "(", "'type'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.DeepPruner.DeepPrunerAggregator.__init__": [[23, 45], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.cost_processors.utils.hw_hourglass.HWHourglass", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu"], ["\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "hourglass_in_planes", ",", "disparity_sample_number", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConfidenceRangePredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "hourglass_in_planes", "=", "hourglass_in_planes", "\n", "self", ".", "disparity_sample_number", "=", "disparity_sample_number", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "self", ".", "dres0", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "in_planes", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.DeepPruner.DeepPrunerAggregator.forward": [[47, 60], ["DeepPruner.DeepPrunerAggregator.dres0", "DeepPruner.DeepPrunerAggregator.dres1", "DeepPruner.DeepPrunerAggregator.classify().squeeze", "DeepPruner.DeepPrunerAggregator.dres2", "DeepPruner.DeepPrunerAggregator.classify"], "methods", ["None"], [")", "\n", "\n", "self", ".", "dres1", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "hourglass_in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "\n", "self", ".", "min_disparity_predictor", "=", "nn", ".", "Sequential", "(", "\n", "HWHourglass", "(", "hourglass_in_planes", ",", "batch_norm", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "hourglass_in_planes", ",", "hourglass_in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv3d", "(", "hourglass_in_planes", "*", "2", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.AnyNet.AnyNetAggregator.__init__": [[24, 38], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.layers.basic_layers.bn_relu_conv3d", "dmb.modeling.stereo.layers.basic_layers.bn_relu_conv3d", "dmb.modeling.stereo.layers.basic_layers.bn_relu_conv3d", "range"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.bn_relu_conv3d", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.bn_relu_conv3d", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.bn_relu_conv3d"], ["\n", "\n", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "AnyNetProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "copy", "(", ")", "\n", "self", ".", "batch_norm", "=", "cfg", ".", "model", ".", "batch_norm", "\n", "\n", "self", ".", "stage", "=", "self", ".", "cfg", ".", "model", ".", "stage", "\n", "\n", "# cost computation parameters, dict", "\n", "self", ".", "max_disp", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "max_disp", "\n", "self", ".", "start_disp", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "start_disp", "\n", "self", ".", "dilation", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "dilation", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.aggregators.AnyNet.AnyNetAggregator.forward": [[39, 46], ["AnyNet.AnyNetAggregator.agg", "cost.squeeze.squeeze.squeeze"], "methods", ["None"], ["# cost aggregation", "\n", "self", ".", "aggregator_type", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_aggregator", ".", "type", "\n", "self", ".", "aggregator", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "st", "in", "self", ".", "stage", ":", "\n", "            ", "self", ".", "aggregator", "[", "st", "]", "=", "AnyNetAggregator", "(", "\n", "in_planes", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_aggregator", ".", "in_planes", "[", "st", "]", ",", "\n", "agg_planes", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_aggregator", ".", "agg_planes", "[", "st", "]", ",", "\n", "num", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_aggregator", ".", "num", ",", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.bilateral_filter.bilateralFilter.__init__": [[20, 40], ["torch.Module.__init__", "bilateral_filter.bilateralFilter.create_image_kernel", "range", "bilateral_filter.bilateralFilter.create_disparity_kernel", "range", "len", "bilateral_filter.bilateralFilter.image_conv.append", "len", "bilateral_filter.bilateralFilter.disp_conv.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.bilateral_filter.bilateralFilter.create_image_kernel", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.bilateral_filter.bilateralFilter.create_disparity_kernel"], ["def", "__init__", "(", "self", ",", "kernel_size", ",", "sigma_image", ",", "sigma_gaussian", ")", ":", "\n", "        ", "super", "(", "bilateralFilter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "sigma_image", "=", "sigma_image", "\n", "self", ".", "sigma_gaussian", "=", "sigma_gaussian", "\n", "self", ".", "image_conv", "=", "[", "]", "\n", "self", ".", "image_kernel", "=", "self", ".", "create_image_kernel", "(", "self", ".", "kernel_size", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "image_kernel", ")", ")", ":", "\n", "            ", "self", ".", "image_conv", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "kernel_size", "//", "2", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "image_conv", "[", "i", "]", ".", "weight", ".", "data", "=", "self", ".", "image_kernel", "[", "i", "]", "\n", "self", ".", "image_conv", "[", "i", "]", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "disp_conv", "=", "[", "]", "\n", "self", ".", "disp_kernel", "=", "self", ".", "create_disparity_kernel", "(", "self", ".", "kernel_size", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "disp_kernel", ")", ")", ":", "\n", "            ", "self", ".", "disp_conv", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "kernel_size", "//", "2", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "disp_conv", "[", "i", "]", ".", "weight", ".", "data", "=", "self", ".", "disp_kernel", "[", "i", "]", "\n", "self", ".", "disp_conv", "[", "i", "]", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.bilateral_filter.bilateralFilter.forward": [[41, 78], ["range", "range", "range", "len", "bilateral_filter.bilateralFilter.disp_conv[].to", "len", "bilateral_filter.bilateralFilter.image_conv[].to", "range", "math.exp", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "float", "float"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "leftImage", ",", "estDisp", ")", ":", "\n", "        ", "assert", "leftImage", ".", "shape", "==", "estDisp", ".", "shape", "\n", "assert", "estDisp", ".", "shape", "[", "1", "]", "==", "1", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "disp_conv", ")", ")", ":", "\n", "            ", "self", ".", "disp_conv", "[", "i", "]", "=", "self", ".", "disp_conv", "[", "i", "]", ".", "to", "(", "leftImage", ".", "device", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "image_conv", ")", ")", ":", "\n", "            ", "self", ".", "image_conv", "[", "i", "]", "=", "self", ".", "image_conv", "[", "i", "]", ".", "to", "(", "leftImage", ".", "device", ")", "\n", "\n", "", "index_image_conv", "=", "0", "\n", "index_disp_conv", "=", "0", "\n", "fineDisp", "=", "None", "\n", "weight", "=", "None", "\n", "for", "i", "in", "range", "(", "-", "(", "self", ".", "kernel_size", "//", "2", ")", ",", "(", "self", ".", "kernel_size", "//", "2", "+", "1", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "-", "(", "self", ".", "kernel_size", "//", "2", ")", ",", "(", "self", ".", "kernel_size", "//", "2", "+", "1", ")", ")", ":", "\n", "                ", "if", "i", "==", "0", "and", "j", "==", "0", ":", "\n", "                    ", "image_diff_weight", "=", "torch", ".", "ones_like", "(", "estDisp", ")", "\n", "", "else", ":", "\n", "                    ", "image_diff_weight", "=", "(", "\n", "(", "-", "self", ".", "image_conv", "[", "index_image_conv", "]", "(", "leftImage", ")", ".", "pow", "(", "2.0", ")", "/", "(", "2", "*", "self", ".", "sigma_image", "**", "2", ")", ")", ".", "exp", "(", ")", ")", "\n", "index_image_conv", "+=", "1", "\n", "\n", "", "dist", "=", "math", ".", "exp", "(", "-", "float", "(", "i", "**", "2", "+", "j", "**", "2", ")", "/", "float", "(", "2", "*", "self", ".", "sigma_gaussian", "**", "2", ")", ")", "\n", "dist_diff_weight", "=", "torch", ".", "full_like", "(", "estDisp", ",", "dist", ")", "\n", "\n", "disp", "=", "self", ".", "disp_conv", "[", "index_disp_conv", "]", "(", "estDisp", ")", "\n", "\n", "if", "index_disp_conv", "==", "0", ":", "\n", "                    ", "weight", "=", "dist_diff_weight", "*", "image_diff_weight", "\n", "fineDisp", "=", "disp", "*", "dist_diff_weight", "*", "image_diff_weight", "\n", "", "else", ":", "\n", "                    ", "weight", "+=", "dist_diff_weight", "*", "image_diff_weight", "\n", "fineDisp", "+=", "disp", "*", "dist_diff_weight", "*", "image_diff_weight", "\n", "\n", "", "", "", "fineDisp", "=", "(", "fineDisp", "+", "eps", ")", "/", "(", "weight", "+", "eps", ")", "\n", "\n", "return", "fineDisp", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.bilateral_filter.bilateralFilter.create_disparity_kernel": [[79, 88], ["range", "kernel.append", "kernel[].reshape", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "create_disparity_kernel", "(", "self", ",", "kernel_size", ")", ":", "\n", "        ", "total_direction", "=", "kernel_size", "*", "kernel_size", "\n", "kernel", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "total_direction", ")", ":", "\n", "            ", "kernel", ".", "append", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "total_direction", ")", ")", "\n", "kernel", "[", "i", "]", "[", ":", ",", ":", ",", "i", "]", "=", "1", "\n", "kernel", "[", "i", "]", "=", "kernel", "[", "i", "]", ".", "reshape", "(", "1", ",", "1", ",", "kernel_size", ",", "kernel_size", ")", "\n", "\n", "", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.bilateral_filter.bilateralFilter.create_image_kernel": [[89, 99], ["range", "kernel.append", "kernel[].reshape", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "create_image_kernel", "(", "self", ",", "kernel_size", ")", ":", "\n", "        ", "total_direction", "=", "kernel_size", "*", "kernel_size", "\n", "kernel", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "total_direction", ")", ":", "\n", "            ", "kernel", ".", "append", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "total_direction", ")", ")", "\n", "kernel", "[", "i", "]", "[", ":", ",", ":", ",", "i", "]", "=", "-", "1", "\n", "kernel", "[", "i", "]", "[", ":", ",", ":", ",", "total_direction", "//", "2", "]", "=", "1", "\n", "kernel", "[", "i", "]", "=", "kernel", "[", "i", "]", ".", "reshape", "(", "1", ",", "1", ",", "kernel_size", ",", "kernel_size", ")", "\n", "\n", "", "return", "kernel", "[", ":", "total_direction", "//", "2", "]", "+", "kernel", "[", "total_direction", "//", "2", "+", "1", ":", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.instance_whitening.InstanceWhitening.__init__": [[7, 10], ["torch.Module.__init__", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", "InstanceWhitening", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "instance_standardization", "=", "nn", ".", "InstanceNorm2d", "(", "dim", ",", "affine", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.instance_whitening.InstanceWhitening.forward": [[11, 15], ["instance_whitening.InstanceWhitening.instance_standardization", "instance_whitening.InstanceWhitening.clone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "instance_standardization", "(", "x", ")", "\n", "w", "=", "x", ".", "clone", "(", ")", "\n", "return", "x", ",", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.instance_whitening.instance_whitening_loss": [[17, 25], ["instance_whitening.get_covariance_matrix", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.div", "torch.div"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.instance_whitening.get_covariance_matrix"], ["", "", "def", "instance_whitening_loss", "(", "f_map", ",", "eye", ",", "mask_matrix", ",", "num_remove_cov", ")", ":", "\n", "    ", "f_cor", ",", "B", "=", "get_covariance_matrix", "(", "f_map", ",", "eye", "=", "eye", ")", "\n", "f_cor_masked", "=", "f_cor", "*", "mask_matrix", "\n", "off_diag_sum", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "f_cor_masked", ")", ",", "dim", "=", "(", "1", ",", "2", ")", ",", "keepdim", "=", "True", ")", "# B X 1 X 1", "\n", "loss", "=", "torch", ".", "clamp", "(", "torch", ".", "div", "(", "off_diag_sum", ",", "num_remove_cov", ")", ",", "min", "=", "0", ")", "# B X 1 X 1", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.instance_whitening.get_covariance_matrix": [[27, 37], ["f_map.contiguous().view.contiguous().view", "torch.eye().cuda", "torch.eye().cuda", "torch.bmm().div", "torch.bmm().div", "f_map.contiguous().view.contiguous", "torch.eye", "torch.eye", "torch.bmm", "torch.bmm", "f_map.contiguous().view.transpose"], "function", ["None"], ["", "def", "get_covariance_matrix", "(", "f_map", ",", "eye", "=", "None", ")", ":", "\n", "    ", "eps", "=", "1e-5", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "f_map", ".", "shape", "# i-th feature size (B X C X H X W)", "\n", "HW", "=", "H", "*", "W", "\n", "if", "eye", "is", "None", ":", "\n", "        ", "eye", "=", "torch", ".", "eye", "(", "C", ")", ".", "cuda", "(", ")", "\n", "", "f_map", "=", "f_map", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "C", ",", "-", "1", ")", "# B X C X H X W > B X C X (H X W)", "\n", "f_cor", "=", "torch", ".", "bmm", "(", "f_map", ",", "f_map", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "div", "(", "HW", "-", "1", ")", "+", "(", "eps", "*", "eye", ")", "# C X C / HW", "\n", "\n", "return", "f_cor", ",", "B", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.instance_whitening.make_cov_index_matrix": [[39, 46], ["torch.LongTensor", "torch.LongTensor", "range", "torch.cat", "torch.cat", "torch.cat.triu().transpose", "torch.cat.triu", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.cat.triu", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "make_cov_index_matrix", "(", "dim", ")", ":", "# make symmetric matrix for embedding index", "\n", "    ", "matrix", "=", "torch", ".", "LongTensor", "(", ")", "\n", "s_index", "=", "0", "\n", "for", "i", "in", "range", "(", "dim", ")", ":", "\n", "        ", "matrix", "=", "torch", ".", "cat", "(", "[", "matrix", ",", "torch", ".", "arange", "(", "s_index", ",", "s_index", "+", "dim", ")", ".", "unsqueeze", "(", "0", ")", "]", ",", "dim", "=", "0", ")", "\n", "s_index", "+=", "(", "dim", "-", "(", "2", "+", "i", ")", ")", "\n", "", "return", "matrix", ".", "triu", "(", "diagonal", "=", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "+", "matrix", ".", "triu", "(", "diagonal", "=", "1", ")", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.inverse_warp_3d.inverse_warp_3d": [[4, 53], ["torch.linspace().view().expand().to", "torch.linspace().view().expand().to", "torch.linspace().view().expand().to", "torch.linspace().view().expand().to", "torch.linspace().view().expand().to", "torch.linspace().view().expand().to", "grid_d.unsqueeze.unsqueeze", "grid_h.unsqueeze.unsqueeze", "grid_w.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.grid_sample", "img.unsqueeze().expand.dim", "img.unsqueeze().expand.unsqueeze().expand", "img.unsqueeze().expand.dim", "ValueError", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.linspace().view().expand", "img.unsqueeze().expand.unsqueeze", "img.unsqueeze().expand.dim", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "function", ["None"], ["def", "inverse_warp_3d", "(", "img", ",", "disp", ",", "padding_mode", "=", "'zeros'", ",", "disp_Y", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        img (Tensor): the source image (where to sample pixels) -- [B, C, H, W] or [B, C, D, H, W]\n        disp (Tensor): disparity map of the target image -- [B, D, H, W]\n        padding_mode (str): padding mode, default is zero padding\n        disp_Y (Tensor): disparity map of the target image along Y-axis -- [B, D, H, W]\n    Returns:\n        projected_img (Tensor): source image warped to the target image -- [B, C, D, H, W]\n    \"\"\"", "\n", "\n", "device", "=", "disp", ".", "device", "\n", "B", ",", "D", ",", "H", ",", "W", "=", "disp", ".", "shape", "\n", "C", "=", "img", ".", "shape", "[", "1", "]", "\n", "\n", "if", "disp_Y", "is", "not", "None", ":", "\n", "        ", "assert", "disp", ".", "shape", "==", "disp_Y", ".", "shape", ",", "'disparity map along x and y axis should have same shape!'", "\n", "", "if", "img", ".", "dim", "(", ")", "==", "4", ":", "\n", "        ", "img", "=", "img", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "B", ",", "C", ",", "D", ",", "H", ",", "W", ")", "\n", "", "elif", "img", ".", "dim", "(", ")", "==", "5", ":", "\n", "        ", "assert", "D", "==", "img", ".", "shape", "[", "2", "]", ",", "'The disparity number should be same between image and disparity map!'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'image is only allowed with 4 or 5 dimensions, '", "\n", "'but got {} dimensions!'", ".", "format", "(", "img", ".", "dim", "(", ")", ")", ")", "\n", "\n", "# get mesh grid for each dimension", "\n", "", "grid_d", "=", "torch", ".", "linspace", "(", "0", ",", "D", "-", "1", ",", "D", ")", ".", "view", "(", "1", ",", "D", ",", "1", ",", "1", ")", ".", "expand", "(", "B", ",", "D", ",", "H", ",", "W", ")", ".", "to", "(", "device", ")", "\n", "grid_h", "=", "torch", ".", "linspace", "(", "0", ",", "H", "-", "1", ",", "H", ")", ".", "view", "(", "1", ",", "1", ",", "H", ",", "1", ")", ".", "expand", "(", "B", ",", "D", ",", "H", ",", "W", ")", ".", "to", "(", "device", ")", "\n", "grid_w", "=", "torch", ".", "linspace", "(", "0", ",", "W", "-", "1", ",", "W", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "W", ")", ".", "expand", "(", "B", ",", "D", ",", "H", ",", "W", ")", ".", "to", "(", "device", ")", "\n", "\n", "# shift the index of W dimension with disparity", "\n", "grid_w", "=", "grid_w", "+", "disp", "\n", "if", "disp_Y", "is", "not", "None", ":", "\n", "        ", "grid_h", "=", "grid_h", "+", "disp_Y", "\n", "\n", "# normalize the grid value into [-1, 1]; (0, D-1), (0, H-1), (0, W-1)", "\n", "", "grid_d", "=", "(", "grid_d", "/", "(", "D", "-", "1", ")", "*", "2", ")", "-", "1", "\n", "grid_h", "=", "(", "grid_h", "/", "(", "H", "-", "1", ")", "*", "2", ")", "-", "1", "\n", "grid_w", "=", "(", "grid_w", "/", "(", "W", "-", "1", ")", "*", "2", ")", "-", "1", "\n", "\n", "# concatenate the grid_* to [B, D, H, W, 3]", "\n", "grid_d", "=", "grid_d", ".", "unsqueeze", "(", "4", ")", "\n", "grid_h", "=", "grid_h", ".", "unsqueeze", "(", "4", ")", "\n", "grid_w", "=", "grid_w", ".", "unsqueeze", "(", "4", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "(", "grid_w", ",", "grid_h", ",", "grid_d", ")", ",", "4", ")", "\n", "\n", "projected_img", "=", "F", ".", "grid_sample", "(", "img", ",", "grid", ",", "padding_mode", "=", "padding_mode", ")", "\n", "\n", "return", "projected_img", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.cspn.AffinityPropagate.__init__": [[57, 68], ["torch.Module.__init__", "cspn.AffinityPropagate.get_repeat_operation", "cspn.AffinityPropagate.repeat_op", "cspn.AffinityPropagate.repeat_op", "cspn.AffinityPropagate.repeat_op", "cspn.AffinityPropagate.repeat_op", "cspn.AffinityPropagate.get_pad_operation", "cspn.AffinityPropagate.get_pooling_operation"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.cspn.AffinityPropagate.get_repeat_operation", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.cspn.AffinityPropagate.get_pad_operation", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.cspn.AffinityPropagate.get_pooling_operation"], ["def", "__init__", "(", "self", ",", "op", "=", "'Conv2d'", ",", "iterations", "=", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "AffinityPropagate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "op", "\n", "self", ".", "iterations", "=", "iterations", "\n", "self", ".", "get_repeat_operation", "(", ")", "\n", "self", ".", "kernel_size", "=", "self", ".", "repeat_op", "(", "kernel_size", ")", "\n", "self", ".", "stride", "=", "self", ".", "repeat_op", "(", "stride", ")", "\n", "self", ".", "padding", "=", "self", ".", "repeat_op", "(", "padding", ")", "\n", "self", ".", "dilation", "=", "self", ".", "repeat_op", "(", "dilation", ")", "\n", "self", ".", "get_pad_operation", "(", ")", "\n", "self", ".", "get_pooling_operation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.cspn.AffinityPropagate.forward": [[69, 124], ["cspn.AffinityPropagate.checkout", "affinity.abs", "affinity.abs.sum", "torch.div", "torch.div", "torch.div", "torch.div", "range", "cspn.AffinityPropagate.pad_op", "cspn.AffinityPropagate.pooling_op", "range", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.cal_conf._calcConf.checkout"], ["", "def", "forward", "(", "self", ",", "affinity", ",", "feature", ")", ":", "\n", "# checkout wether affinity and feature satisfy our requiresments", "\n", "        ", "self", ".", "checkout", "(", "affinity", ",", "feature", ")", "\n", "\n", "# normalize affinity matrix", "\n", "affinity_abs", "=", "affinity", ".", "abs", "(", ")", "\n", "affinity_sum", "=", "affinity_abs", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "affinity_norm", "=", "torch", ".", "div", "(", "affinity_abs", ",", "affinity_sum", ")", "\n", "\n", "for", "it", "in", "range", "(", "self", ".", "iterations", ")", ":", "\n", "\n", "# through padding, we can move to correspond direction by index", "\n", "            ", "feature_pad", "=", "self", ".", "pad_op", "(", "feature", ")", "\n", "# index the affinity matrix", "\n", "index", "=", "0", "\n", "if", "self", ".", "op", "in", "[", "'Conv2d'", "]", ":", "\n", "                ", "h", ",", "w", "=", "feature", ".", "shape", "[", "2", ":", "]", "\n", "for", "k_h", "in", "range", "(", "self", ".", "kernel_size", "[", "0", "]", ")", ":", "\n", "                    ", "for", "k_w", "in", "range", "(", "self", ".", "kernel_size", "[", "1", "]", ")", ":", "\n", "                        ", "st_h", "=", "k_h", "*", "self", ".", "dilation", "[", "0", "]", "\n", "ed_h", "=", "st_h", "+", "h", "\n", "st_w", "=", "k_w", "*", "self", ".", "dilation", "[", "1", "]", "\n", "ed_w", "=", "st_w", "+", "w", "\n", "\n", "if", "index", "==", "0", ":", "\n", "                            ", "feature", "=", "feature_pad", "[", ":", ",", ":", ",", "st_h", ":", "ed_h", ",", "st_w", ":", "ed_w", "]", "*", "affinity_norm", "[", ":", ",", "index", ":", "index", "+", "1", "]", "\n", "", "else", ":", "\n", "                            ", "feature", "+=", "feature_pad", "[", ":", ",", ":", ",", "st_h", ":", "ed_h", ",", "st_w", ":", "ed_w", "]", "*", "affinity_norm", "[", ":", ",", "index", ":", "index", "+", "1", "]", "\n", "", "index", "+=", "1", "\n", "\n", "", "", "", "if", "self", ".", "op", "in", "[", "'Conv3d'", "]", ":", "\n", "                ", "d", ",", "h", ",", "w", "=", "feature", ".", "shape", "[", "2", ":", "]", "\n", "for", "k_d", "in", "range", "(", "self", ".", "kernel_size", "[", "0", "]", ")", ":", "\n", "                    ", "for", "k_h", "in", "range", "(", "self", ".", "kernel_size", "[", "1", "]", ")", ":", "\n", "                        ", "for", "k_w", "in", "range", "(", "self", ".", "kernel_size", "[", "2", "]", ")", ":", "\n", "                            ", "st_d", "=", "k_d", "*", "self", ".", "dilation", "[", "0", "]", "\n", "ed_d", "=", "st_d", "+", "d", "\n", "st_h", "=", "k_h", "*", "self", ".", "dilation", "[", "1", "]", "\n", "ed_h", "=", "st_h", "+", "h", "\n", "st_w", "=", "k_w", "*", "self", ".", "dilation", "[", "2", "]", "\n", "ed_w", "=", "st_w", "+", "w", "\n", "if", "index", "==", "0", ":", "\n", "                                ", "feature", "=", "feature_pad", "[", ":", ",", ":", ",", "st_d", ":", "ed_d", ",", "st_h", ":", "ed_h", ",", "st_w", ":", "ed_w", "]", "*", "affinity_norm", "[", ":", ",", "index", ":", "index", "+", "1", "]", "\n", "", "else", ":", "\n", "                                ", "feature", "+=", "feature_pad", "[", ":", ",", ":", ",", "st_d", ":", "ed_d", ",", "st_h", ":", "ed_h", ",", "st_w", ":", "ed_w", "]", "*", "affinity_norm", "[", ":", ",", "index", ":", "index", "+", "1", "]", "\n", "", "index", "+=", "1", "\n", "\n", "", "", "", "", "", "if", "self", ".", "pooling_op", "is", "not", "None", ":", "\n", "            ", "feature", "=", "self", ".", "pooling_op", "(", "feature", ")", "\n", "\n", "", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.cspn.AffinityPropagate.get_repeat_operation": [[125, 130], ["None"], "methods", ["None"], ["", "def", "get_repeat_operation", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "op", "in", "[", "'Conv2d'", "]", ":", "\n", "            ", "self", ".", "repeat_op", "=", "_pair", "\n", "", "if", "self", ".", "op", "in", "[", "'Conv3d'", "]", ":", "\n", "            ", "self", ".", "repeat_op", "=", "_triple", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.cspn.AffinityPropagate.get_pad_operation": [[131, 141], ["torch.ConstantPad2d", "torch.ConstantPad2d", "torch.ConstantPad3d", "torch.ConstantPad3d"], "methods", ["None"], ["", "", "def", "get_pad_operation", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "op", "in", "[", "'Conv2d'", "]", ":", "\n", "            ", "lr", "=", "(", "self", ".", "dilation", "[", "1", "]", ")", "*", "(", "self", ".", "kernel_size", "[", "1", "]", "//", "2", ")", "\n", "hw", "=", "(", "self", ".", "dilation", "[", "0", "]", ")", "*", "(", "self", ".", "kernel_size", "[", "0", "]", "//", "2", ")", "\n", "self", ".", "pad_op", "=", "nn", ".", "ConstantPad2d", "(", "(", "lr", ",", "lr", ",", "hw", ",", "hw", ")", ",", "0", ")", "\n", "", "if", "self", ".", "op", "in", "[", "'Conv3d'", "]", ":", "\n", "            ", "lr", "=", "(", "self", ".", "dilation", "[", "2", "]", ")", "*", "(", "self", ".", "kernel_size", "[", "2", "]", "//", "2", ")", "\n", "hw", "=", "(", "self", ".", "dilation", "[", "1", "]", ")", "*", "(", "self", ".", "kernel_size", "[", "1", "]", "//", "2", ")", "\n", "fb", "=", "(", "self", ".", "dilation", "[", "0", "]", ")", "*", "(", "self", ".", "kernel_size", "[", "0", "]", "//", "2", ")", "# (front, back) => depth dimension", "\n", "self", ".", "pad_op", "=", "nn", ".", "ConstantPad3d", "(", "(", "lr", ",", "lr", ",", "hw", ",", "hw", ",", "fb", ",", "fb", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.cspn.AffinityPropagate.get_pooling_operation": [[142, 150], ["torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool3d", "torch.AvgPool3d"], "methods", ["None"], ["", "", "def", "get_pooling_operation", "(", "self", ")", ":", "\n", "        ", "self", ".", "pooling_op", "=", "None", "\n", "if", "self", ".", "op", "in", "[", "'Conv2d'", "]", ":", "\n", "            ", "if", "self", ".", "stride", "[", "0", "]", ">", "1", "or", "self", ".", "stride", "[", "1", "]", ">", "1", ":", "\n", "                ", "self", ".", "pooling_op", "=", "nn", ".", "AvgPool2d", "(", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "", "", "if", "self", ".", "op", "in", "[", "'Conv3d'", "]", ":", "\n", "            ", "if", "self", ".", "stride", "[", "0", "]", ">", "1", "or", "self", ".", "stride", "[", "1", "]", ">", "1", "or", "self", ".", "stride", "[", "2", "]", ">", "1", ":", "\n", "                ", "self", ".", "pooling_op", "=", "nn", ".", "AvgPool3d", "(", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.cspn.AffinityPropagate.checkout": [[151, 186], ["affinity.dim", "feature.dim", "affinity.dim", "feature.dim"], "methods", ["None"], ["", "", "", "def", "checkout", "(", "self", ",", "affinity", ",", "feature", ")", ":", "\n", "        ", "assert", "affinity", ".", "dim", "(", ")", "==", "feature", ".", "dim", "(", ")", ",", "'affinity matrix should have same number of dimension as feature, '", "'but got affinity.dim()={} and feature.dim()={}'", ".", "format", "(", "affinity", ".", "dim", "(", ")", ",", "feature", ".", "dim", "(", ")", ")", "\n", "assert", "affinity", ".", "shape", "[", "0", "]", "==", "feature", ".", "shape", "[", "0", "]", ",", "'affinity matrix BatchSize should be same as feature, '", "'but got affinity BatchSize={} and feature BatchSize={}'", ".", "format", "(", "affinity", ".", "shape", "[", "0", "]", ",", "feature", ".", "shape", "[", "0", "]", ")", "\n", "\n", "if", "self", ".", "op", "in", "[", "'Conv2d'", "]", ":", "\n", "            ", "channels", "=", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", "\n", "assert", "affinity", ".", "shape", "[", "1", "]", "==", "channels", ",", "'affnity matrix should have {} channels, '", "'but got {}'", ".", "format", "(", "channels", ",", "affinity", ".", "shape", "[", "1", "]", ")", "\n", "assert", "affinity", ".", "shape", "[", "2", ":", "]", "==", "feature", ".", "shape", "[", "2", ":", "]", ",", "'affinity matrix Height and Width should be same as feature, '", "'but got affinity H,W={},{} and feature H,W={},{}'", ".", "format", "(", "affinity", ".", "shape", "[", "2", "]", ",", "affinity", ".", "shape", "[", "3", "]", ",", "feature", ".", "shape", "[", "2", "]", ",", "feature", ".", "shape", "[", "3", "]", ")", "\n", "assert", "self", ".", "dilation", "[", "0", "]", ">", "0", "and", "self", ".", "dilation", "[", "1", "]", ">", "0", ",", "'dilation should be larger than 0'", "\n", "\n", "", "if", "self", ".", "op", "in", "[", "'Conv3d'", "]", ":", "\n", "            ", "channels", "=", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", "*", "self", ".", "kernel_size", "[", "2", "]", "\n", "assert", "affinity", ".", "shape", "[", "1", "]", "==", "channels", ",", "'affnity matrix should have {} channels, '", "'but got {}'", ".", "format", "(", "channels", ",", "affinity", ".", "shape", "[", "1", "]", ")", "\n", "assert", "affinity", ".", "shape", "[", "2", ":", "]", "==", "feature", ".", "shape", "[", "2", ":", "]", ",", "'affinity matrix Depth, Height and Width should be same as feature, '", "'but got affinity D,H,W={},{},{} and feature D,H,W={},{},{}'", ".", "format", "(", "\n", "affinity", ".", "shape", "[", "2", "]", ",", "affinity", ".", "shape", "[", "3", "]", ",", "affinity", ".", "shape", "[", "4", "]", ",", "\n", "feature", ".", "shape", "[", "2", "]", ",", "feature", ".", "shape", "[", "3", "]", ",", "feature", ".", "shape", "[", "4", "]", "\n", ")", "\n", "assert", "self", ".", "dilation", "[", "0", "]", ">", "0", "and", "self", ".", "dilation", "[", "1", "]", ">", "0", "and", "self", ".", "dilation", "[", "2", "]", ">", "0", ",", "'dilation should be larger than 0'", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.BasicBlock.__init__": [[233, 245], ["torch.Module.__init__", "basic_layers.conv_bn_relu", "basic_layers.conv_bn"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn"], ["def", "__init__", "(", "self", ",", "batchNorm", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "downsample", ",", "padding", ",", "dilation", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv_bn_relu", "(", "\n", "batchNorm", "=", "batchNorm", ",", "in_planes", "=", "in_planes", ",", "out_planes", "=", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "conv2", "=", "conv_bn", "(", "\n", "batchNorm", "=", "batchNorm", ",", "in_planes", "=", "out_planes", ",", "out_planes", "=", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.BasicBlock.forward": [[246, 255], ["basic_layers.BasicBlock.conv1", "basic_layers.BasicBlock.conv2", "basic_layers.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "x", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.BasicBlock_IN.__init__": [[261, 274], ["torch.Module.__init__", "basic_layers.conv_bn_relu", "basic_layers.conv_bn", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn"], ["def", "__init__", "(", "self", ",", "batchNorm", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "downsample", ",", "padding", ",", "dilation", ")", ":", "\n", "        ", "super", "(", "BasicBlock_IN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv_bn_relu", "(", "\n", "batchNorm", "=", "batchNorm", ",", "in_planes", "=", "in_planes", ",", "out_planes", "=", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "conv2", "=", "conv_bn", "(", "\n", "batchNorm", "=", "batchNorm", ",", "in_planes", "=", "out_planes", ",", "out_planes", "=", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "out_planes", ",", "affine", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.BasicBlock_IN.forward": [[275, 284], ["basic_layers.BasicBlock_IN.conv1", "basic_layers.BasicBlock_IN.conv2", "basic_layers.BasicBlock_IN.norm", "basic_layers.BasicBlock_IN.downsample"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.sparsification_plot.norm"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "x", "\n", "out", "=", "self", ".", "norm", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.consistent_padding_with_dilation": [[15, 30], ["list", "range", "tuple", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple"], "function", ["None"], ["def", "consistent_padding_with_dilation", "(", "padding", ",", "dilation", ",", "dim", "=", "2", ")", ":", "\n", "    ", "assert", "dim", "==", "2", "or", "dim", "==", "3", ",", "'Convolution layer only support 2D and 3D'", "\n", "if", "dim", "==", "2", ":", "\n", "        ", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "", "else", ":", "# dim == 3", "\n", "        ", "padding", "=", "_triple", "(", "padding", ")", "\n", "dilation", "=", "_triple", "(", "dilation", ")", "\n", "\n", "", "padding", "=", "list", "(", "padding", ")", "\n", "for", "d", "in", "range", "(", "dim", ")", ":", "\n", "        ", "padding", "[", "d", "]", "=", "dilation", "[", "d", "]", "if", "dilation", "[", "d", "]", ">", "1", "else", "padding", "[", "d", "]", "\n", "", "padding", "=", "tuple", "(", "padding", ")", "\n", "\n", "return", "padding", ",", "dilation", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn": [[32, 47], ["basic_layers.consistent_padding_with_dilation", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.consistent_padding_with_dilation"], ["", "def", "conv_bn", "(", "batchNorm", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "padding", ",", "dilation", "=", "consistent_padding_with_dilation", "(", "padding", ",", "dilation", ",", "dim", "=", "2", ")", "\n", "if", "batchNorm", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "bias", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "bias", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.deconv_bn": [[51, 65], ["torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.ConvTranspose2d"], "function", ["None"], ["", "", "def", "deconv_bn", "(", "batchNorm", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ",", "bias", "=", "True", ")", ":", "\n", "    ", "if", "batchNorm", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "bias", "=", "bias", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "bias", "=", "bias", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn": [[69, 83], ["basic_layers.consistent_padding_with_dilation", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d", "torch.Conv3d"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.consistent_padding_with_dilation"], ["", "", "def", "conv3d_bn", "(", "batchNorm", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "padding", ",", "dilation", "=", "consistent_padding_with_dilation", "(", "padding", ",", "dilation", ",", "dim", "=", "3", ")", "\n", "if", "batchNorm", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_planes", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "bias", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.deconv3d_bn": [[87, 100], ["torch.Sequential", "torch.Sequential", "torch.ConvTranspose3d", "torch.BatchNorm3d", "torch.ConvTranspose3d"], "function", ["None"], ["", "", "def", "deconv3d_bn", "(", "batchNorm", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ",", "bias", "=", "True", ")", ":", "\n", "    ", "if", "batchNorm", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_planes", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "bias", "=", "bias", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu": [[104, 120], ["basic_layers.consistent_padding_with_dilation", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.ReLU"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.consistent_padding_with_dilation"], ["", "", "def", "conv_bn_relu", "(", "batchNorm", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "padding", ",", "dilation", "=", "consistent_padding_with_dilation", "(", "padding", ",", "dilation", ",", "dim", "=", "2", ")", "\n", "if", "batchNorm", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.bn_relu_conv": [[123, 139], ["basic_layers.consistent_padding_with_dilation", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.ReLU", "torch.Conv2d"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.consistent_padding_with_dilation"], ["", "", "def", "bn_relu_conv", "(", "batchNorm", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "padding", ",", "dilation", "=", "consistent_padding_with_dilation", "(", "padding", ",", "dilation", ",", "dim", "=", "2", ")", "\n", "if", "batchNorm", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "bias", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "bias", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.deconv_bn_relu": [[142, 158], ["torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ConvTranspose2d", "torch.ReLU"], "function", ["None"], ["", "", "def", "deconv_bn_relu", "(", "batchNorm", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ",", "bias", "=", "True", ")", ":", "\n", "    ", "if", "batchNorm", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "bias", "=", "bias", "\n", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu": [[161, 178], ["basic_layers.consistent_padding_with_dilation", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU", "torch.Conv3d", "torch.ReLU"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.consistent_padding_with_dilation"], ["", "", "def", "conv3d_bn_relu", "(", "batchNorm", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "padding", ",", "dilation", "=", "consistent_padding_with_dilation", "(", "padding", ",", "dilation", ",", "dim", "=", "3", ")", "\n", "if", "batchNorm", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "bias", "\n", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.bn_relu_conv3d": [[181, 197], ["basic_layers.consistent_padding_with_dilation", "torch.Sequential", "torch.Sequential", "torch.BatchNorm3d", "torch.ReLU", "torch.Conv3d", "torch.ReLU", "torch.Conv3d"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.consistent_padding_with_dilation"], ["", "", "def", "bn_relu_conv3d", "(", "batchNorm", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "padding", ",", "dilation", "=", "consistent_padding_with_dilation", "(", "padding", ",", "dilation", ",", "dim", "=", "3", ")", "\n", "if", "batchNorm", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm3d", "(", "in_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "bias", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "bias", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.deconv3d_bn_relu": [[201, 217], ["torch.Sequential", "torch.Sequential", "torch.ConvTranspose3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ConvTranspose3d", "torch.ReLU"], "function", ["None"], ["", "", "def", "deconv3d_bn_relu", "(", "batchNorm", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ",", "bias", "=", "True", ")", ":", "\n", "    ", "if", "batchNorm", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "bias", "=", "bias", "\n", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_in_relu": [[219, 227], ["basic_layers.consistent_padding_with_dilation", "torch.Sequential", "torch.Conv2d", "torch.InstanceNorm2d", "torch.ReLU"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.consistent_padding_with_dilation"], ["", "", "def", "conv_in_relu", "(", "batchNorm", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "padding", ",", "dilation", "=", "consistent_padding_with_dilation", "(", "padding", ",", "dilation", ",", "dim", "=", "2", ")", "\n", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_planes", ",", "affine", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.inverse_warp.inverse_warp": [[4, 43], ["disp.size", "torch.arange().view().expand().float", "torch.arange().view().expand().float", "torch.stack().float().to", "pixel_coords.view.expand().contiguous().view", "torch.stack", "pixel_coords.view.view", "torch.nn.functional.grid_sample", "disp.contiguous().view", "torch.arange().view().expand", "torch.arange().view().expand", "torch.stack().float", "pixel_coords.view.expand().contiguous", "disp.contiguous", "torch.arange().view", "torch.arange().view", "torch.stack", "pixel_coords.view.expand", "torch.arange", "torch.arange"], "function", ["None"], ["def", "inverse_warp", "(", "img", ",", "disp", ",", "padding_mode", "=", "'zeros'", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        img (Tensor): the source image (where to sample pixels) -- [B, C, H, W]\n        disp (Tensor): disparity map of the target image -- [B, 1, H, W]\n        padding_mode (str): padding mode, default is zero padding\n    Returns:\n        projected_img (Tensor): source image warped to the target image -- [B, C, H, W]\n    \"\"\"", "\n", "b", ",", "_", ",", "h", ",", "w", "=", "disp", ".", "size", "(", ")", "\n", "\n", "# [1, H, W]  copy 0-height for w times : y coord", "\n", "i_range", "=", "torch", ".", "arange", "(", "0", ",", "h", ")", ".", "view", "(", "1", ",", "h", ",", "1", ")", ".", "expand", "(", "1", ",", "h", ",", "w", ")", ".", "float", "(", ")", "\n", "# [1, H, W]  copy 0-width for h times  : x coord", "\n", "j_range", "=", "torch", ".", "arange", "(", "0", ",", "w", ")", ".", "view", "(", "1", ",", "1", ",", "w", ")", ".", "expand", "(", "1", ",", "h", ",", "w", ")", ".", "float", "(", ")", "\n", "\n", "pixel_coords", "=", "torch", ".", "stack", "(", "(", "j_range", ",", "i_range", ")", ",", "dim", "=", "1", ")", ".", "float", "(", ")", ".", "to", "(", "disp", ".", "device", ")", "# [1, 2, H, W]", "\n", "batch_pixel_coords", "=", "pixel_coords", ".", "expand", "(", "b", ",", "2", ",", "h", ",", "w", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "2", ",", "-", "1", ")", "# [B, 2, H*W]", "\n", "\n", "X", "=", "batch_pixel_coords", "[", ":", ",", "0", ",", ":", "]", "+", "disp", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "-", "1", ")", "# [B, H*W]", "\n", "Y", "=", "batch_pixel_coords", "[", ":", ",", "1", ",", ":", "]", "\n", "\n", "X_norm", "=", "2", "*", "X", "/", "(", "w", "-", "1", ")", "-", "1", "\n", "Y_norm", "=", "2", "*", "Y", "/", "(", "h", "-", "1", ")", "-", "1", "\n", "\n", "# If grid has values outside the range of [-1, 1], the corresponding outputs are handled as defined by padding_mode.", "\n", "# Details please refer to torch.nn.functional.grid_sample", "\n", "if", "padding_mode", "==", "'zeros'", ":", "\n", "        ", "X_mask", "=", "(", "(", "X_norm", ">", "1", ")", "+", "(", "X_norm", "<", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "X_norm", "[", "X_mask", "]", "=", "2", "\n", "Y_mask", "=", "(", "(", "Y_norm", ">", "1", ")", "+", "(", "Y_norm", "<", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "Y_norm", "[", "Y_mask", "]", "=", "2", "\n", "\n", "", "pixel_coords", "=", "torch", ".", "stack", "(", "[", "X_norm", ",", "Y_norm", "]", ",", "dim", "=", "2", ")", "# [B, H*W, 2]", "\n", "pixel_coords", "=", "pixel_coords", ".", "view", "(", "b", ",", "h", ",", "w", ",", "2", ")", "# [B, H, W, 2]", "\n", "\n", "projected_img", "=", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "img", ",", "pixel_coords", ",", "padding_mode", "=", "padding_mode", ")", "\n", "\n", "return", "projected_img", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.dilated_hourglass.Hourglass.__init__": [[9, 38], ["torch.Module.__init__", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv3d_bn_relu", "dmb.modeling.stereo.layers.basic_layers.deconv3d_bn", "dmb.modeling.stereo.layers.basic_layers.deconv3d_bn"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv3d_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.deconv3d_bn", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.deconv3d_bn"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "batchNorm", "=", "True", ")", ":", "\n", "        ", "super", "(", "Hourglass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batchNorm", "=", "batchNorm", "\n", "\n", "self", ".", "conv1", "=", "conv3d_bn_relu", "(", "\n", "self", ".", "batchNorm", ",", "in_planes", ",", "in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "conv3d_bn", "(", "\n", "self", ".", "batchNorm", ",", "in_planes", "*", "2", ",", "in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "conv3", "=", "conv3d_bn_relu", "(", "\n", "self", ".", "batchNorm", ",", "in_planes", "*", "2", ",", "in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "conv4", "=", "conv3d_bn_relu", "(", "\n", "self", ".", "batchNorm", ",", "in_planes", "*", "2", ",", "in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "conv5", "=", "deconv3d_bn", "(", "\n", "self", ".", "batchNorm", ",", "in_planes", "*", "2", ",", "in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "conv6", "=", "deconv3d_bn", "(", "\n", "self", ".", "batchNorm", ",", "in_planes", "*", "2", ",", "in_planes", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.dilated_hourglass.Hourglass.forward": [[40, 65], ["dilated_hourglass.Hourglass.conv1", "dilated_hourglass.Hourglass.conv2", "dilated_hourglass.Hourglass.conv3", "dilated_hourglass.Hourglass.conv4", "dilated_hourglass.Hourglass.conv6", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dilated_hourglass.Hourglass.conv5", "dilated_hourglass.Hourglass.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "presqu", ",", "postsqu", ")", ":", "\n", "# in:1/4, out:1/8", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "# in:1/8, out:1/8", "\n", "pre", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "postsqu", "is", "not", "None", ":", "\n", "            ", "pre", "=", "F", ".", "relu", "(", "pre", "+", "postsqu", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "pre", "=", "F", ".", "relu", "(", "pre", ",", "inplace", "=", "True", ")", "\n", "\n", "# in:1/8, out:1/16", "\n", "", "out", "=", "self", ".", "conv3", "(", "pre", ")", "\n", "# in:1/16, out:1/16", "\n", "out", "=", "self", ".", "conv4", "(", "out", ")", "\n", "\n", "# in:1/16, out:1/8", "\n", "if", "presqu", "is", "not", "None", ":", "\n", "            ", "post", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "out", ")", "+", "presqu", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "post", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "out", ")", "+", "pre", ",", "inplace", "=", "True", ")", "\n", "\n", "# in:1/8, out:1/4", "\n", "", "out", "=", "self", ".", "conv6", "(", "post", ")", "\n", "\n", "return", "out", ",", "pre", ",", "post", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.DeepPruner.DeepPruner.__init__": [[20, 35], ["torch.Module.__init__", "cfg.copy", "dmb.modeling.stereo.backbones.build_backbone", "dmb.modeling.stereo.disp_samplers.build_disp_sampler", "dmb.modeling.stereo.cost_processors.build_cost_processor", "dmb.modeling.stereo.disp_refinement.build_disp_refinement", "dmb.modeling.stereo.losses.make_gsm_loss_evaluator"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.backbones.build_backbone", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_samplers.builder.build_disp_sampler", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cost_processors.builder.build_cost_processor", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_refinement.builder.build_disp_refinement", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.builder.make_gsm_loss_evaluator"], []], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.DeepPruner.DeepPruner.forward": [[36, 123], ["DeepPruner.DeepPruner.backbone", "DeepPruner.DeepPruner.disp_sampler", "DeepPruner.DeepPruner.cost_processor", "DeepPruner.DeepPruner.disp_sampler", "DeepPruner.DeepPruner.cost_processor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DeepPruner.DeepPruner.disp_refinement", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "DeepPruner.DeepPruner.extend", "torch.interpolate", "torch.interpolate", "torch.interpolate", "dict", "dict", "DeepPruner.DeepPruner.loss_evaluator", "dict.update", "DeepPruner.DeepPruner.extend", "dict", "dmb.modeling.stereo.losses.utils.quantile_loss.quantile_loss", "abs", "abs", "DeepPruner.DeepPruner.cfg.model.losses.quantile_loss.copy"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.quantile_loss.quantile_loss"], ["\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "hourglass_in_planes", ",", "disparity_sample_number", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConfidenceRangePredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "hourglass_in_planes", "=", "hourglass_in_planes", "\n", "self", ".", "disparity_sample_number", "=", "disparity_sample_number", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "self", ".", "dres0", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "in_planes", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dres1", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "hourglass_in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "\n", "self", ".", "min_disparity_predictor", "=", "nn", ".", "Sequential", "(", "\n", "HWHourglass", "(", "hourglass_in_planes", ",", "batch_norm", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "hourglass_in_planes", ",", "hourglass_in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv3d", "(", "hourglass_in_planes", "*", "2", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "self", ".", "max_disparity_predictor", "=", "nn", ".", "Sequential", "(", "\n", "HWHourglass", "(", "hourglass_in_planes", ",", "batch_norm", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "hourglass_in_planes", ",", "hourglass_in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv3d", "(", "hourglass_in_planes", "*", "2", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "# batch norm cannot be used here, as disparity map is the input and output", "\n", "self", ".", "min_disparity_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "# batch norm cannot be used here, as disparity map is the input and output", "\n", "self", ".", "max_disparity_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "min_disparity_feature_conv", "=", "conv_bn_relu", "(", "batch_norm", ",", "disparity_sample_number", ",", "disparity_sample_number", ",", "\n", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "max_disparity_feature_conv", "=", "conv_bn_relu", "(", "batch_norm", ",", "disparity_sample_number", ",", "disparity_sample_number", ",", "\n", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "raw_cost", ",", "disparity_sample", ")", ":", "\n", "# in: [B, in_planes, D, H, W], out: [B, 64, D, H, W]", "\n", "        ", "cost", "=", "self", ".", "dres0", "(", "raw_cost", ")", "\n", "# in: [B, 64, D, H, W], out: [B, hourglass_in_planes, D, H, W]", "\n", "cost", "=", "self", ".", "dres1", "(", "cost", ")", "\n", "\n", "# in: [B, hourglass_in_planes, D, H, W], mid: [B, 1, D, H, W], out: [B, D, H, W]", "\n", "cost_for_min", "=", "self", ".", "min_disparity_predictor", "(", "cost", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "# in: [B, hourglass_in_planes, D, H, W], mid: [B, 1, D, H, W], out: [B, D, H, W]", "\n", "cost_for_max", "=", "self", ".", "max_disparity_predictor", "(", "cost", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "# soft arg-min", "\n", "# in: [B, D, H, W], out: [B, D, H, W]", "\n", "prob_for_min", "=", "F", ".", "softmax", "(", "cost_for_min", ",", "dim", "=", "1", ")", "\n", "# in: [B, D, H, W] * [B, D, H, W], out: [B, 1, H, W]", "\n", "min_disparity", "=", "torch", ".", "sum", "(", "prob_for_min", "*", "disparity_sample", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "# in: [B, 1, H, W], out: [B, 1, H, W]", "\n", "min_disparity", "=", "self", ".", "min_disparity_conv", "(", "min_disparity", ")", "\n", "\n", "# soft arg-min", "\n", "# in: [B, D, H, W], out: [B, D, H, W]", "\n", "prob_for_max", "=", "F", ".", "softmax", "(", "cost_for_max", ",", "dim", "=", "1", ")", "\n", "# in: [B, D, H, W] * [B, D, H, W], out: [B, 1, H, W]", "\n", "max_disparity", "=", "torch", ".", "sum", "(", "prob_for_max", "*", "disparity_sample", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "# in: [B, 1, H, W], out: [B, 1, H, W]", "\n", "max_disparity", "=", "self", ".", "max_disparity_conv", "(", "max_disparity", ")", "\n", "\n", "# in: [B, D, H, W], out: [B, D, H, W]", "\n", "min_disparity_feature", "=", "self", ".", "min_disparity_feature_conv", "(", "cost_for_min", ")", "\n", "# in: [B, D, H, W], out: [B, D, H, W]", "\n", "max_disparity_feature", "=", "self", ".", "max_disparity_feature_conv", "(", "cost_for_max", ")", "\n", "\n", "return", "min_disparity", ",", "max_disparity", ",", "min_disparity_feature", ",", "max_disparity_feature", "\n", "\n", "\n", "", "", "class", "DeepPrunerProcessor", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.fc_stereo_base.FCStereoBase.__init__": [[22, 53], ["torch.Module.__init__", "cfg.copy", "print", "dmb.modeling.stereo.backbones.build_backbone", "dmb.modeling.stereo.cost_processors.build_cost_processor", "dmb.modeling.stereo.disp_predictors.build_disp_predictor", "dmb.modeling.stereo.losses.make_gsm_loss_evaluator", "dmb.modeling.stereo.losses.contrastive_loss.StereoContrastiveLoss", "dmb.modeling.stereo.losses.ssw_loss.StereoWhiteningLoss", "dmb.modeling.stereo.cmn.build_cmn", "dmb.modeling.stereo.disp_refinement.build_disp_refinement"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.backbones.build_backbone", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cost_processors.builder.build_cost_processor", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.builder.build_disp_predictor", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.builder.make_gsm_loss_evaluator", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cmn.cmn.build_cmn", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_refinement.builder.build_disp_refinement"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "FCStereoBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "copy", "(", ")", "\n", "self", ".", "max_disp", "=", "cfg", ".", "model", ".", "max_disp", "\n", "\n", "self", ".", "whitening", "=", "False", "\n", "if", "'whitening'", "in", "cfg", ".", "model", ":", "\n", "            ", "self", ".", "whitening", "=", "cfg", ".", "model", ".", "whitening", "\n", "", "print", "(", "'whitening'", ",", "self", ".", "whitening", ")", "\n", "\n", "self", ".", "backbone", "=", "build_backbone", "(", "cfg", ")", "\n", "\n", "self", ".", "cost_processor", "=", "build_cost_processor", "(", "cfg", ")", "\n", "\n", "# confidence measurement network", "\n", "self", ".", "cmn", "=", "None", "\n", "if", "'cmn'", "in", "cfg", ".", "model", ":", "\n", "            ", "self", ".", "cmn", "=", "build_cmn", "(", "cfg", ")", "\n", "\n", "", "self", ".", "disp_predictor", "=", "build_disp_predictor", "(", "cfg", ")", "\n", "\n", "self", ".", "disp_refinement", "=", "None", "\n", "if", "'disp_refinement'", "in", "cfg", ".", "model", ":", "\n", "            ", "self", ".", "disp_refinement", "=", "build_disp_refinement", "(", "cfg", ")", "\n", "\n", "# make general stereo matching loss evaluator", "\n", "", "self", ".", "loss_evaluator", "=", "make_gsm_loss_evaluator", "(", "cfg", ")", "\n", "\n", "# loss for feature consistency", "\n", "self", ".", "loss_stereo_scf", "=", "StereoContrastiveLoss", "(", "dim", "=", "32", ")", "\n", "self", ".", "loss_stereo_ssw", "=", "StereoWhiteningLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.fc_stereo_base.FCStereoBase.forward": [[54, 131], ["ref_img.size", "fc_stereo_base.FCStereoBase.backbone", "isinstance", "fc_stereo_base.FCStereoBase.cost_processor", "fc_stereo_base.FCStereoBase.disp_predictor", "fc_stereo_base.FCStereoBase.disp_refinement", "dict", "hasattr", "dict", "fc_stereo_base.FCStereoBase.loss_evaluator", "dict.update", "dict", "fc_stereo_base.FCStereoBase.cfg.model.losses.focal_loss.get", "fc_stereo_base.FCStereoBase.cmn", "dict.update", "fc_stereo_base.FCStereoBase.loss_stereo_scf", "dict.update", "fc_stereo_base.FCStereoBase.loss_stereo_ssw", "dict.update", "fc_stereo_base.FCStereoBase.cmn", "dict.update"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ",", "epoch", "=", "-", "1", ",", "cov_list", "=", "None", ")", ":", "\n", "        ", "ref_img", ",", "tgt_img", "=", "batch", "[", "'leftImage'", "]", ",", "batch", "[", "'rightImage'", "]", "\n", "target_l", "=", "batch", "[", "'leftDisp'", "]", "if", "'leftDisp'", "in", "batch", "else", "None", "\n", "target_r", "=", "batch", "[", "'rightDisp'", "]", "if", "'rightDisp'", "in", "batch", "else", "None", "\n", "\n", "x_size", "=", "ref_img", ".", "size", "(", ")", "\n", "\n", "# extract image feature", "\n", "left_fms", ",", "right_fms", "=", "self", ".", "backbone", "(", "ref_img", ",", "tgt_img", ")", "\n", "\n", "if", "self", ".", "whitening", ":", "\n", "            ", "l_w_arr", ",", "r_w_arr", "=", "left_fms", "[", "-", "1", "]", ",", "right_fms", "[", "-", "1", "]", "\n", "left_fms", ",", "right_fms", "=", "left_fms", "[", "0", "]", ",", "right_fms", "[", "0", "]", "\n", "\n", "", "if", "isinstance", "(", "left_fms", ",", "list", ")", ":", "\n", "            ", "ref_fms", "=", "left_fms", "[", "0", "]", "\n", "tgt_fms", "=", "right_fms", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "ref_fms", ",", "tgt_fms", "=", "left_fms", ",", "right_fms", "\n", "\n", "# compute cost volume", "\n", "", "costs", "=", "self", ".", "cost_processor", "(", "ref_fms", ",", "tgt_fms", ")", "\n", "\n", "# disparity prediction", "\n", "disps", "=", "[", "self", ".", "disp_predictor", "(", "cost", ")", "for", "cost", "in", "costs", "]", "\n", "\n", "# disparity refinement", "\n", "if", "self", ".", "disp_refinement", "is", "not", "None", ":", "\n", "            ", "disps", "=", "self", ".", "disp_refinement", "(", "disps", ",", "ref_fms", ",", "tgt_fms", ",", "ref_img", ",", "tgt_img", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "loss_dict", "=", "dict", "(", ")", "\n", "variance", "=", "None", "\n", "if", "hasattr", "(", "self", ".", "cfg", ".", "model", ".", "losses", ",", "'focal_loss'", ")", ":", "\n", "                ", "variance", "=", "self", ".", "cfg", ".", "model", ".", "losses", ".", "focal_loss", ".", "get", "(", "'variance'", ",", "None", ")", "\n", "\n", "", "if", "self", ".", "cmn", "is", "not", "None", ":", "\n", "# confidence measurement network", "\n", "                ", "variance", ",", "cm_losses", "=", "self", ".", "cmn", "(", "costs", ",", "target_l", ")", "\n", "loss_dict", ".", "update", "(", "cm_losses", ")", "\n", "\n", "", "loss_args", "=", "dict", "(", "\n", "variance", "=", "variance", ",", "\n", ")", "\n", "\n", "\n", "gsm_loss_dict", "=", "self", ".", "loss_evaluator", "(", "disps", ",", "costs", ",", "target_l", ",", "**", "loss_args", ")", "\n", "\n", "loss_dict", ".", "update", "(", "gsm_loss_dict", ")", "\n", "\n", "if", "epoch", ">=", "0", ":", "\n", "                ", "contrast_loss", "=", "self", ".", "loss_stereo_scf", "(", "ref_fms", ",", "tgt_fms", ",", "target_l", ",", "target_r", ",", "weight", "=", "1.0", ")", "\n", "loss_dict", ".", "update", "(", "contrast_loss", ")", "\n", "\n", "", "if", "self", ".", "whitening", "and", "epoch", ">=", "10", ":", "\n", "                ", "assert", "cov_list", "is", "not", "None", "\n", "st_isw_loss", "=", "self", ".", "loss_stereo_ssw", "(", "l_w_arr", ",", "cov_list", "=", "cov_list", ",", "weight", "=", "10.0", ")", "\n", "loss_dict", ".", "update", "(", "st_isw_loss", ")", "\n", "\n", "", "return", "{", "}", ",", "loss_dict", "\n", "\n", "", "else", ":", "\n", "            ", "results", "=", "dict", "(", "\n", "ref_fms", "=", "[", "ref_fms", "]", ",", "\n", "tgt_fms", "=", "[", "tgt_fms", "]", ",", "\n", "disps", "=", "disps", ",", "\n", "costs", "=", "costs", ",", "\n", ")", "\n", "\n", "if", "self", ".", "cmn", "is", "not", "None", ":", "\n", "# confidence measurement network", "\n", "                ", "variance", ",", "confs", "=", "self", ".", "cmn", "(", "costs", ",", "target_l", ")", "\n", "results", ".", "update", "(", "confs", "=", "confs", ")", "\n", "\n", "", "return", "results", ",", "{", "}", "\n", "\n", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "raw_arr", "(", "self", ",", "batch", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.fc_stereo_base.FCStereoBase.raw_arr": [[132, 144], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "batch[].cuda", "batch[].cuda", "fc_stereo_base.FCStereoBase.backbone", "fc_stereo_base.FCStereoBase.loss_stereo_ssw.cal_cov"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.ssw_loss.StereoWhiteningLoss.cal_cov"], ["        ", "ref_img", "=", "batch", "[", "'raw_leftImage'", "]", ".", "cuda", "(", ")", "\n", "tgt_img", "=", "batch", "[", "'raw_rightImage'", "]", ".", "cuda", "(", ")", "\n", "\n", "left_fms", ",", "right_fms", "=", "self", ".", "backbone", "(", "ref_img", ",", "tgt_img", ")", "\n", "r_w_arr_l", "=", "left_fms", "[", "-", "1", "]", "\n", "r_w_arr_r", "=", "right_fms", "[", "-", "1", "]", "\n", "\n", "cov_list", "=", "self", ".", "loss_stereo_ssw", ".", "cal_cov", "(", "[", "r_w_arr_l", ",", "r_w_arr_r", "]", ")", "\n", "\n", "return", "cov_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.general_stereo_model.GeneralizedStereoModel.__init__": [[19, 41], ["torch.Module.__init__", "cfg.copy", "dmb.modeling.stereo.backbones.build_backbone", "dmb.modeling.stereo.cost_processors.build_cost_processor", "dmb.modeling.stereo.disp_predictors.build_disp_predictor", "dmb.modeling.stereo.losses.make_gsm_loss_evaluator", "dmb.modeling.stereo.cmn.build_cmn", "dmb.modeling.stereo.disp_refinement.build_disp_refinement"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.backbones.build_backbone", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cost_processors.builder.build_cost_processor", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.builder.build_disp_predictor", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.builder.make_gsm_loss_evaluator", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cmn.cmn.build_cmn", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_refinement.builder.build_disp_refinement"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "GeneralizedStereoModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "copy", "(", ")", "\n", "self", ".", "max_disp", "=", "cfg", ".", "model", ".", "max_disp", "\n", "\n", "self", ".", "backbone", "=", "build_backbone", "(", "cfg", ")", "\n", "\n", "self", ".", "cost_processor", "=", "build_cost_processor", "(", "cfg", ")", "\n", "\n", "# confidence measurement network", "\n", "self", ".", "cmn", "=", "None", "\n", "if", "'cmn'", "in", "cfg", ".", "model", ":", "\n", "            ", "self", ".", "cmn", "=", "build_cmn", "(", "cfg", ")", "\n", "\n", "", "self", ".", "disp_predictor", "=", "build_disp_predictor", "(", "cfg", ")", "\n", "\n", "self", ".", "disp_refinement", "=", "None", "\n", "if", "'disp_refinement'", "in", "cfg", ".", "model", ":", "\n", "            ", "self", ".", "disp_refinement", "=", "build_disp_refinement", "(", "cfg", ")", "\n", "\n", "# make general stereo matching loss evaluator", "\n", "", "self", ".", "loss_evaluator", "=", "make_gsm_loss_evaluator", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.general_stereo_model.GeneralizedStereoModel.forward": [[42, 93], ["general_stereo_model.GeneralizedStereoModel.backbone", "general_stereo_model.GeneralizedStereoModel.cost_processor", "general_stereo_model.GeneralizedStereoModel.disp_predictor", "general_stereo_model.GeneralizedStereoModel.disp_refinement", "dict", "hasattr", "dict", "general_stereo_model.GeneralizedStereoModel.loss_evaluator", "dict.update", "dict", "general_stereo_model.GeneralizedStereoModel.cfg.model.losses.focal_loss.get", "general_stereo_model.GeneralizedStereoModel.cmn", "dict.update", "general_stereo_model.GeneralizedStereoModel.cmn", "dict.update"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ",", "epoch", "=", "-", "1", ",", "cov_list", "=", "None", ")", ":", "\n", "# parse batch", "\n", "        ", "ref_img", ",", "tgt_img", "=", "batch", "[", "'leftImage'", "]", ",", "batch", "[", "'rightImage'", "]", "\n", "target", "=", "batch", "[", "'leftDisp'", "]", "if", "'leftDisp'", "in", "batch", "else", "None", "\n", "\n", "# extract image feature", "\n", "ref_fms", ",", "tgt_fms", "=", "self", ".", "backbone", "(", "ref_img", ",", "tgt_img", ")", "\n", "\n", "# compute cost volume", "\n", "costs", "=", "self", ".", "cost_processor", "(", "ref_fms", ",", "tgt_fms", ")", "\n", "\n", "# disparity prediction", "\n", "disps", "=", "[", "self", ".", "disp_predictor", "(", "cost", ")", "for", "cost", "in", "costs", "]", "\n", "\n", "# disparity refinement", "\n", "if", "self", ".", "disp_refinement", "is", "not", "None", ":", "\n", "            ", "disps", "=", "self", ".", "disp_refinement", "(", "disps", ",", "ref_fms", ",", "tgt_fms", ",", "ref_img", ",", "tgt_img", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "loss_dict", "=", "dict", "(", ")", "\n", "variance", "=", "None", "\n", "if", "hasattr", "(", "self", ".", "cfg", ".", "model", ".", "losses", ",", "'focal_loss'", ")", ":", "\n", "                ", "variance", "=", "self", ".", "cfg", ".", "model", ".", "losses", ".", "focal_loss", ".", "get", "(", "'variance'", ",", "None", ")", "\n", "\n", "", "if", "self", ".", "cmn", "is", "not", "None", ":", "\n", "# confidence measurement network", "\n", "                ", "variance", ",", "cm_losses", "=", "self", ".", "cmn", "(", "costs", ",", "target", ")", "\n", "loss_dict", ".", "update", "(", "cm_losses", ")", "\n", "\n", "", "loss_args", "=", "dict", "(", "\n", "variance", "=", "variance", ",", "\n", ")", "\n", "\n", "gsm_loss_dict", "=", "self", ".", "loss_evaluator", "(", "disps", ",", "costs", ",", "target", ",", "**", "loss_args", ")", "\n", "loss_dict", ".", "update", "(", "gsm_loss_dict", ")", "\n", "\n", "return", "{", "}", ",", "loss_dict", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "results", "=", "dict", "(", "\n", "disps", "=", "disps", ",", "\n", "costs", "=", "costs", ",", "\n", ")", "\n", "\n", "if", "self", ".", "cmn", "is", "not", "None", ":", "\n", "# confidence measurement network", "\n", "                ", "variance", ",", "confs", "=", "self", ".", "cmn", "(", "costs", ",", "target", ")", "\n", "results", ".", "update", "(", "confs", "=", "confs", ")", "\n", "\n", "", "return", "results", ",", "{", "}", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.__init__.build_stereo_model": [[14, 17], ["meta_arch"], "function", ["None"], []], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.AnyNet.AnyNet.__init__": [[18, 43], ["torch.Module.__init__", "cfg.copy", "dmb.modeling.stereo.backbones.build_backbone", "dmb.modeling.stereo.cost_processors.build_cost_processor", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "dmb.modeling.stereo.disp_refinement.build_disp_refinement", "dmb.modeling.stereo.losses.make_gsm_loss_evaluator", "dmb.modeling.stereo.disp_predictors.faster_soft_argmin.FasterSoftArgmin"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.backbones.build_backbone", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.cost_processors.builder.build_cost_processor", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_refinement.builder.build_disp_refinement", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.builder.make_gsm_loss_evaluator"], ["\n", "\n", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "AnyNetProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "copy", "(", ")", "\n", "self", ".", "batch_norm", "=", "cfg", ".", "model", ".", "batch_norm", "\n", "\n", "self", ".", "stage", "=", "self", ".", "cfg", ".", "model", ".", "stage", "\n", "\n", "# cost computation parameters, dict", "\n", "self", ".", "max_disp", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "max_disp", "\n", "self", ".", "start_disp", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "start_disp", "\n", "self", ".", "dilation", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "dilation", "\n", "\n", "\n", "# cost aggregation", "\n", "self", ".", "aggregator_type", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_aggregator", ".", "type", "\n", "self", ".", "aggregator", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "st", "in", "self", ".", "stage", ":", "\n", "            ", "self", ".", "aggregator", "[", "st", "]", "=", "AnyNetAggregator", "(", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.AnyNet.AnyNet.forward": [[44, 148], ["AnyNet.AnyNet.backbone", "AnyNet.AnyNet.cost_processor", "AnyNet.AnyNet.cost_processor", "torch.interpolate", "torch.interpolate", "torch.interpolate", "AnyNet.AnyNet.cost_processor", "torch.interpolate", "torch.interpolate", "torch.interpolate", "AnyNet.AnyNet.disp_refinement", "torch.interpolate", "torch.interpolate", "torch.interpolate", "dict", "AnyNet.AnyNet.loss_evaluator", "loss_dict.update", "range", "AnyNet.AnyNet.extend", "dict", "len", "res_disps.append"], "methods", ["None"], ["in_planes", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_aggregator", ".", "in_planes", "[", "st", "]", ",", "\n", "agg_planes", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_aggregator", ".", "agg_planes", "[", "st", "]", ",", "\n", "num", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_aggregator", ".", "num", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "stage", ",", "left", ",", "right", ",", "disp", "=", "None", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "left", ".", "shape", "\n", "# construct the raw cost volume", "\n", "\n", "end_disp", "=", "self", ".", "start_disp", "[", "stage", "]", "+", "self", ".", "max_disp", "[", "stage", "]", "-", "1", "\n", "\n", "# disparity sample number", "\n", "D", "=", "(", "self", ".", "max_disp", "[", "stage", "]", "+", "self", ".", "dilation", "[", "stage", "]", "-", "1", ")", "//", "self", ".", "dilation", "[", "stage", "]", "\n", "\n", "# generate disparity samples, in [B, D, H, W] layout", "\n", "disp_sample", "=", "torch", ".", "linspace", "(", "self", ".", "start_disp", "[", "stage", "]", ",", "end_disp", ",", "D", ")", "\n", "disp_sample", "=", "disp_sample", ".", "view", "(", "1", ",", "D", ",", "1", ",", "1", ")", ".", "expand", "(", "B", ",", "D", ",", "H", ",", "W", ")", ".", "to", "(", "left", ".", "device", ")", ".", "float", "(", ")", "\n", "\n", "# if initial disparity guessed, used for warping", "\n", "if", "disp", "is", "not", "None", ":", "\n", "# up-sample disparity map to the size of left", "\n", "            ", "H", ",", "W", "=", "left", ".", "shape", "[", "-", "2", ":", "]", "\n", "scale", "=", "W", "/", "disp", ".", "shape", "[", "-", "1", "]", "\n", "disp", "=", "F", ".", "interpolate", "(", "disp", "*", "scale", ",", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "# shift the disparity sample to be centered at the given disparity map", "\n", "disp_sample", "=", "disp_sample", "+", "disp", "\n", "\n", "# [B, C, D, H, W]", "\n", "", "raw_cost", "=", "fast_dif_fms", "(", "left", ",", "right", ",", "disp_sample", "=", "disp_sample", ")", "\n", "\n", "# list [[B, D, H, W]]", "\n", "cost", "=", "self", ".", "aggregator", "[", "stage", "]", "(", "raw_cost", ")", "\n", "\n", "return", "cost", "\n", "\n", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.__init__.build_flow_model": [[7, 10], ["meta_arch"], "function", ["None"], []], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.test_model.testModel.setUpClass": [[43, 54], ["torch.device", "torch.device", "torch.device", "torch.device", "mmcv.Config.fromfile", "dmb.modeling.build_model", "cls.model.to", "cls.setUpTimeTestingClass"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.modeling.__init__.build_model", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.test_backbones.testBackbones.setUpTimeTestingClass"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "device", "=", "torch", ".", "device", "(", "'cuda:2'", ")", "\n", "config_path", "=", "'/home/zhixiang/youmin/projects/depth/public/'", "'DenseMatchingBenchmark/configs/PSMNet/kitti_2015.py'", "\n", "cls", ".", "cfg", "=", "Config", ".", "fromfile", "(", "config_path", ")", "\n", "cls", ".", "model", "=", "build_model", "(", "cls", ".", "cfg", ")", "\n", "cls", ".", "model", ".", "to", "(", "cls", ".", "device", ")", "\n", "\n", "cls", ".", "setUpTimeTestingClass", "(", ")", "\n", "cls", ".", "avg_time", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.test_model.testModel.setUpTimeTestingClass": [[55, 72], ["torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "print", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "setUpTimeTestingClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "iters", "=", "50", "\n", "\n", "h", ",", "w", "=", "384", ",", "1248", "\n", "leftImage", "=", "torch", ".", "rand", "(", "1", ",", "3", ",", "h", ",", "w", ")", ".", "to", "(", "cls", ".", "device", ")", "\n", "rightImage", "=", "torch", ".", "rand", "(", "1", ",", "3", ",", "h", ",", "w", ")", ".", "to", "(", "cls", ".", "device", ")", "\n", "leftDisp", "=", "torch", ".", "rand", "(", "1", ",", "1", ",", "h", ",", "w", ")", ".", "to", "(", "cls", ".", "device", ")", "\n", "batch", "=", "{", "'leftImage'", ":", "leftImage", ",", "\n", "'rightImage'", ":", "rightImage", ",", "\n", "'leftDisp'", ":", "leftDisp", ",", "}", "\n", "\n", "cls", ".", "model_input", "=", "{", "\n", "'batch'", ":", "batch", "\n", "}", "\n", "\n", "print", "(", "'Input preparation successful!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.test_model.testModel.timeTemplate": [[73, 96], ["isinstance", "time.time", "range", "time.time", "print", "isinstance", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "module.eval", "module.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "len", "module", "len", "module"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.train"], ["", "def", "timeTemplate", "(", "self", ",", "module", ",", "module_name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "device", "(", "self", ".", "device", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "module", ".", "eval", "(", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "iters", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "len", "(", "args", ")", ">", "0", ":", "\n", "                    ", "module", "(", "*", "args", ")", "\n", "", "if", "len", "(", "kwargs", ")", ">", "0", ":", "\n", "                    ", "module", "(", "**", "kwargs", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", "self", ".", "device", ")", "\n", "", "", "end_time", "=", "time", ".", "time", "(", ")", "\n", "avg_time", "=", "(", "end_time", "-", "start_time", ")", "/", "self", ".", "iters", "\n", "print", "(", "'{} reference forward once takes {:.4f}ms, i.e. {:.2f}fps'", ".", "format", "(", "module_name", ",", "avg_time", "*", "1000", ",", "(", "1", "/", "avg_time", ")", ")", ")", "\n", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "module", ".", "train", "(", ")", "\n", "\n", "", "self", ".", "avg_time", "[", "module_name", "]", "=", "avg_time", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.test_model.testModel.test_2_OutputModel": [[98, 102], ["print", "print", "test_model.calcFlops"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.test_model.calcFlops"], ["", "def", "test_2_OutputModel", "(", "self", ")", ":", "\n", "        ", "print", "(", "'\\n'", ",", "'*'", "*", "40", ",", "'Model Configuration Result'", ",", "'*'", "*", "40", ")", "\n", "print", "(", "self", ".", "model", ")", "\n", "calcFlops", "(", "self", ".", "model", ",", "self", ".", "model_input", "[", "'batch'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.test_model.testModel.test_3_ModelTime": [[104, 107], ["print", "test_model.testModel.timeTemplate"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.test_backbones.testBackbones.timeTemplate"], ["", "def", "test_3_ModelTime", "(", "self", ")", ":", "\n", "        ", "print", "(", "'\\n'", ",", "'*'", "*", "40", ",", "'Runtime Test Result'", ",", "'*'", "*", "40", ")", "\n", "self", ".", "timeTemplate", "(", "self", ".", "model", ",", "'Model'", ",", "**", "self", ".", "model_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.test_model.testModel.test_0_TrainingPhase": [[109, 129], ["torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "test_model.testModel.model.train", "test_model.testModel.model", "print", "loss_dict.items", "print", "hasattr", "print", "print", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.train"], ["", "def", "test_0_TrainingPhase", "(", "self", ")", ":", "\n", "        ", "h", ",", "w", "=", "self", ".", "cfg", ".", "data", ".", "train", ".", "input_shape", "\n", "leftImage", "=", "torch", ".", "rand", "(", "1", ",", "3", ",", "h", ",", "w", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "rightImage", "=", "torch", ".", "rand", "(", "1", ",", "3", ",", "h", ",", "w", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "leftDisp", "=", "torch", ".", "rand", "(", "1", ",", "1", ",", "h", ",", "w", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch", "=", "{", "'leftImage'", ":", "leftImage", ",", "\n", "'rightImage'", ":", "rightImage", ",", "\n", "'leftDisp'", ":", "leftDisp", ",", "\n", "}", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "_", ",", "loss_dict", "=", "self", ".", "model", "(", "batch", ")", "\n", "\n", "print", "(", "'\\n'", ",", "'*'", "*", "40", ",", "'Train Result'", ",", "'*'", "*", "40", ")", "\n", "for", "k", ",", "v", "in", "loss_dict", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "k", ",", "v", ")", "\n", "\n", "", "print", "(", "self", ".", "model", ".", "loss_evaluator", ".", "loss_evaluators", ")", "\n", "if", "hasattr", "(", "self", ".", "cfg", ".", "model", ",", "'cmn'", ")", ":", "\n", "            ", "print", "(", "self", ".", "model", ".", "cmn", ".", "loss_evaluator", ".", "loss_evaluators", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.test_model.testModel.test_1_TestingPhase": [[131, 169], ["torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "test_model.testModel.model.eval", "print", "print", "print", "range", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "test_model.testModel.model", "len", "len", "print", "print", "print", "print", "range", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "print", "len", "print", "print", "len", "len", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "print"], "methods", ["None"], ["", "", "def", "test_1_TestingPhase", "(", "self", ")", ":", "\n", "        ", "h", ",", "w", "=", "self", ".", "cfg", ".", "data", ".", "test", ".", "input_shape", "\n", "leftImage", "=", "torch", ".", "rand", "(", "1", ",", "3", ",", "h", ",", "w", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "rightImage", "=", "torch", ".", "rand", "(", "1", ",", "3", ",", "h", ",", "w", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "leftDisp", "=", "torch", ".", "rand", "(", "1", ",", "1", ",", "h", ",", "w", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch", "=", "{", "'leftImage'", ":", "leftImage", ",", "\n", "'rightImage'", ":", "rightImage", ",", "\n", "'leftDisp'", ":", "leftDisp", ",", "\n", "}", "\n", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "self", ".", "device", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", ",", "_", "=", "self", ".", "model", "(", "batch", ")", "\n", "\n", "", "print", "(", "'\\n'", ",", "'*'", "*", "40", ",", "'Test Result'", ",", "'*'", "*", "40", ")", "\n", "print", "(", "'Result for disparity:'", ")", "\n", "print", "(", "'Length of disparity map list: '", ",", "len", "(", "result", "[", "'disps'", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "result", "[", "'disps'", "]", ")", ")", ":", "\n", "            ", "d", "=", "result", "[", "'disps'", "]", "[", "i", "]", "\n", "if", "d", "is", "not", "None", "and", "torch", ".", "is_tensor", "(", "d", ")", ":", "\n", "                ", "print", "(", "'Disparity {} with shape: '", ".", "format", "(", "i", ")", ",", "d", ".", "shape", ")", "\n", "\n", "", "", "if", "'costs'", "in", "result", ":", "\n", "            ", "print", "(", "'Result for Cost: '", ")", "\n", "print", "(", "'Length of cost list: '", ",", "len", "(", "result", "[", "'costs'", "]", ")", ")", "\n", "if", "result", "[", "'costs'", "]", "[", "0", "]", "is", "not", "None", ":", "\n", "                ", "print", "(", "result", "[", "'costs'", "]", "[", "0", "]", ".", "shape", ")", "\n", "print", "(", "'Device of cost: '", ",", "result", "[", "'costs'", "]", "[", "0", "]", ".", "device", ")", "\n", "\n", "", "", "if", "'confs'", "in", "result", ":", "\n", "            ", "print", "(", "'Result for Confidence map'", ")", "\n", "print", "(", "'Length of confidence list: '", ",", "len", "(", "result", "[", "'confs'", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "result", "[", "'confs'", "]", ")", ")", ":", "\n", "                ", "conf", "=", "result", "[", "'confs'", "]", "[", "i", "]", "\n", "if", "conf", "is", "not", "None", "and", "torch", ".", "is_tensor", "(", "conf", ")", ":", "\n", "                    ", "print", "(", "'Confidence {} with shape: '", ".", "format", "(", "i", ")", ",", "conf", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.test_model.clever_format": [[13, 33], ["isinstance", "clever_nums.append", "len", "clever_nums.append", "clever_nums.append", "clever_nums.append", "clever_nums.append"], "function", ["None"], ["def", "clever_format", "(", "nums", ",", "format", "=", "\"%.2f\"", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "nums", ",", "Iterable", ")", ":", "\n", "        ", "nums", "=", "[", "nums", "]", "\n", "", "clever_nums", "=", "[", "]", "\n", "\n", "for", "num", "in", "nums", ":", "\n", "        ", "if", "num", ">", "1e12", ":", "\n", "            ", "clever_nums", ".", "append", "(", "format", "%", "(", "num", "/", "1e12", ")", "+", "\"T\"", ")", "\n", "", "elif", "num", ">", "1e9", ":", "\n", "            ", "clever_nums", ".", "append", "(", "format", "%", "(", "num", "/", "1e9", ")", "+", "\"G\"", ")", "\n", "", "elif", "num", ">", "1e6", ":", "\n", "            ", "clever_nums", ".", "append", "(", "format", "%", "(", "num", "/", "1e6", ")", "+", "\"M\"", ")", "\n", "", "elif", "num", ">", "1e3", ":", "\n", "            ", "clever_nums", ".", "append", "(", "format", "%", "(", "num", "/", "1e3", ")", "+", "\"K\"", ")", "\n", "", "else", ":", "\n", "            ", "clever_nums", ".", "append", "(", "format", "%", "num", "+", "\"B\"", ")", "\n", "\n", "", "", "clever_nums", "=", "clever_nums", "[", "0", "]", "if", "len", "(", "clever_nums", ")", "==", "1", "else", "(", "*", "clever_nums", ",", ")", "\n", "\n", "return", "clever_nums", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.test_model.calcFlops": [[34, 39], ["thop.profile", "test_model.clever_format", "print"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.models.test_model.clever_format"], ["", "def", "calcFlops", "(", "model", ",", "input", ")", ":", "\n", "    ", "flops", ",", "params", "=", "profile", "(", "model", ",", "inputs", "=", "(", "input", ",", ")", ")", "\n", "flops", ",", "params", "=", "clever_format", "(", "[", "flops", ",", "params", "]", ",", "\"%.3f\"", ")", "\n", "print", "(", "'flops: {} \\nparameters: {}'", ".", "format", "(", "flops", ",", "params", ")", ")", "\n", "return", "flops", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.soft_argmin.SoftArgmin.__init__": [[28, 42], ["torch.Module.__init__", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["def", "__init__", "(", "self", ",", "max_disp", "=", "192", ",", "start_disp", "=", "0", ",", "dilation", "=", "1", ",", "alpha", "=", "1.0", ",", "normalize", "=", "True", ")", ":", "\n", "        ", "super", "(", "SoftArgmin", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_disp", "=", "max_disp", "\n", "self", ".", "start_disp", "=", "start_disp", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "end_disp", "=", "start_disp", "+", "max_disp", "-", "1", "\n", "self", ".", "disp_sample_number", "=", "(", "max_disp", "+", "dilation", "-", "1", ")", "//", "dilation", "\n", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n", "# generate disparity sample, in [disp_sample_number,] layout", "\n", "self", ".", "disp_sample", "=", "torch", ".", "linspace", "(", "\n", "self", ".", "start_disp", ",", "self", ".", "end_disp", ",", "self", ".", "disp_sample_number", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.soft_argmin.SoftArgmin.forward": [[44, 76], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "cost_volume.dim", "ValueError", "torch.softmax", "torch.softmax", "torch.softmax", "soft_argmin.SoftArgmin.disp_sample.repeat().permute().contiguous", "disp_sample.to.to.to", "cost_volume.dim", "soft_argmin.SoftArgmin.disp_sample.repeat().permute", "soft_argmin.SoftArgmin.disp_sample.repeat"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax"], ["", "def", "forward", "(", "self", ",", "cost_volume", ",", "disp_sample", "=", "None", ")", ":", "\n", "\n", "# note, cost volume direct represent similarity", "\n", "# 'c' or '-c' do not affect the performance because feature-based cost volume provided flexibility.", "\n", "\n", "        ", "if", "cost_volume", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "cost_volume", ".", "dim", "(", ")", ")", ")", "\n", "\n", "# scale cost volume with alpha", "\n", "", "cost_volume", "=", "cost_volume", "*", "self", ".", "alpha", "\n", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "prob_volume", "=", "F", ".", "softmax", "(", "cost_volume", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "prob_volume", "=", "cost_volume", "\n", "\n", "", "B", ",", "D", ",", "H", ",", "W", "=", "cost_volume", ".", "shape", "\n", "\n", "if", "disp_sample", "is", "None", ":", "\n", "            ", "assert", "D", "==", "self", ".", "disp_sample_number", ",", "'The number of disparity samples should be'", "' consistent!'", "\n", "disp_sample", "=", "self", ".", "disp_sample", ".", "repeat", "(", "B", ",", "H", ",", "W", ",", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "disp_sample", "=", "disp_sample", ".", "to", "(", "cost_volume", ".", "device", ")", "\n", "\n", "", "else", ":", "\n", "            ", "assert", "D", "==", "disp_sample", ".", "shape", "[", "1", "]", ",", "'The number of disparity samples should be'", "' consistent!'", "\n", "# compute disparity: (BatchSize, 1, Height, Width)", "\n", "", "disp_map", "=", "torch", ".", "sum", "(", "prob_volume", "*", "disp_sample", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "return", "disp_map", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.soft_argmin.SoftArgmin.__repr__": [[77, 86], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "'{}\\n'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Max Disparity: {}\\n'", ".", "format", "(", "self", ".", "max_disp", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Start disparity: {}\\n'", ".", "format", "(", "self", ".", "start_disp", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Dilation rate: {}\\n'", ".", "format", "(", "self", ".", "dilation", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Alpha: {}\\n'", ".", "format", "(", "self", ".", "alpha", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Normalize: {}\\n'", ".", "format", "(", "self", ".", "normalize", ")", "\n", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.soft_argmin.SoftArgmin.name": [[87, 90], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'SoftArgmin'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.faster_soft_argmin.FasterSoftArgmin.__init__": [[29, 50], ["torch.Module.__init__", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "disp_sample.repeat().permute().contiguous.repeat().permute().contiguous.repeat().permute().contiguous", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "disp_sample.repeat().permute().contiguous.repeat().permute().contiguous.repeat().permute", "disp_sample.repeat().permute().contiguous.repeat().permute().contiguous.repeat"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["def", "__init__", "(", "self", ",", "max_disp", ",", "start_disp", "=", "0", ",", "dilation", "=", "1", ",", "alpha", "=", "1.0", ",", "normalize", "=", "True", ")", ":", "\n", "        ", "super", "(", "FasterSoftArgmin", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_disp", "=", "max_disp", "\n", "self", ".", "start_disp", "=", "start_disp", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "end_disp", "=", "start_disp", "+", "max_disp", "-", "1", "\n", "self", ".", "disp_sample_number", "=", "(", "max_disp", "+", "dilation", "-", "1", ")", "//", "dilation", "\n", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n", "# compute disparity index: (1 ,1, disp_sample_number, 1, 1)", "\n", "disp_sample", "=", "torch", ".", "linspace", "(", "\n", "self", ".", "start_disp", ",", "self", ".", "end_disp", ",", "self", ".", "disp_sample_number", "\n", ")", "\n", "disp_sample", "=", "disp_sample", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n", "self", ".", "disp_regression", "=", "nn", ".", "Conv3d", "(", "1", ",", "1", ",", "(", "self", ".", "disp_sample_number", ",", "1", ",", "1", ")", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "disp_regression", ".", "weight", ".", "data", "=", "disp_sample", "\n", "self", ".", "disp_regression", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.faster_soft_argmin.FasterSoftArgmin.forward": [[51, 76], ["torch.softmax.unsqueeze", "faster_soft_argmin.FasterSoftArgmin.disp_regression", "disp_map.squeeze.squeeze.squeeze", "cost_volume.dim", "ValueError", "torch.softmax", "torch.softmax", "torch.softmax", "cost_volume.dim"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax"], ["", "def", "forward", "(", "self", ",", "cost_volume", ",", "disp_sample", "=", "None", ")", ":", "\n", "\n", "# note, cost volume direct represent similarity", "\n", "# 'c' or '-c' do not affect the performance because feature-based cost volume provided flexibility.", "\n", "\n", "        ", "if", "cost_volume", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "cost_volume", ".", "dim", "(", ")", ")", ")", "\n", "\n", "# scale cost volume with alpha", "\n", "", "cost_volume", "=", "cost_volume", "*", "self", ".", "alpha", "\n", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "prob_volume", "=", "F", ".", "softmax", "(", "cost_volume", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "prob_volume", "=", "cost_volume", "\n", "\n", "# [B, disp_sample_number, W, H] -> [B, 1, disp_sample_number, W, H]", "\n", "", "prob_volume", "=", "prob_volume", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "disp_map", "=", "self", ".", "disp_regression", "(", "prob_volume", ")", "\n", "# [B, 1, 1, W, H] -> [B, 1, W, H]", "\n", "disp_map", "=", "disp_map", ".", "squeeze", "(", "1", ")", "\n", "\n", "return", "disp_map", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.faster_soft_argmin.FasterSoftArgmin.__repr__": [[77, 86], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "'{}\\n'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Max Disparity: {}\\n'", ".", "format", "(", "self", ".", "max_disp", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Start disparity: {}\\n'", ".", "format", "(", "self", ".", "start_disp", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Dilation rate: {}\\n'", ".", "format", "(", "self", ".", "dilation", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Alpha: {}\\n'", ".", "format", "(", "self", ".", "alpha", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Normalize: {}\\n'", ".", "format", "(", "self", ".", "normalize", ")", "\n", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.faster_soft_argmin.FasterSoftArgmin.name": [[87, 90], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'FasterSoftArgmin'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.builder.build_disp_predictor": [[12, 24], ["cfg.model.disp_predictor.get", "cfg.model.disp_predictor.copy", "cfg.model.disp_predictor.copy.pop", "PREDICTORS.keys"], "function", ["None"], ["class", "CostProcessor", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "# Concatenate left and right feature to form cost volume", "\n", "", "", "class", "CatCostProcessor", "(", "CostProcessor", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "CatCostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.local_soft_argmin.LocalSoftArgmin.__init__": [[33, 45], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["def", "__init__", "(", "self", ",", "max_disp", ",", "radius", ",", "start_disp", "=", "0", ",", "dilation", "=", "1", ",", "radius_dilation", "=", "1", ",", "alpha", "=", "1.0", ",", "normalize", "=", "True", ")", ":", "\n", "        ", "super", "(", "LocalSoftArgmin", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_disp", "=", "max_disp", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "start_disp", "=", "start_disp", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "radius_dilation", "=", "radius_dilation", "\n", "self", ".", "end_disp", "=", "start_disp", "+", "max_disp", "-", "1", "\n", "self", ".", "disp_sample_number", "=", "(", "max_disp", "+", "dilation", "-", "1", ")", "//", "dilation", "\n", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.local_soft_argmin.LocalSoftArgmin.forward": [[47, 106], ["torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.linspace().long().to", "torch.linspace().long().to", "torch.linspace().long().to", "torch.linspace().long().to", "torch.linspace().long().to", "torch.linspace().long().to", "torch.linspace().long().to", "torch.linspace().long().to", "torch.linspace().long().to", "interval.repeat().permute().contiguous.repeat().permute().contiguous.repeat().permute().contiguous", "index_group.type_as.type_as.clamp", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "index_group.type_as.type_as.type_as", "torch.softmax", "torch.softmax", "torch.softmax", "cost_volume.size", "cost_volume.size", "cost_volume.size", "cost_volume.size", "torch.linspace().long", "torch.linspace().long", "torch.linspace().long", "torch.linspace().long", "torch.linspace().long", "torch.linspace().long", "torch.linspace().long", "torch.linspace().long", "torch.linspace().long", "interval.repeat().permute().contiguous.repeat().permute().contiguous.repeat().permute", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "interval.repeat().permute().contiguous.repeat().permute().contiguous.repeat"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.tools.view_cost.softmax"], ["", "def", "forward", "(", "self", ",", "cost_volume", ",", "disp_sample", "=", "None", ")", ":", "\n", "\n", "# note, cost volume direct represent similarity", "\n", "# 'c' or '-c' do not affect the performance because feature-based cost volume provided flexibility.", "\n", "\n", "# grab index with max similarity", "\n", "\n", "        ", "B", "=", "cost_volume", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "D", "=", "cost_volume", ".", "size", "(", ")", "[", "1", "]", "\n", "assert", "D", "==", "self", ".", "disp_sample_number", ",", "'Number of disparity sample should be same'", "'with predicted disparity number in cost volume!'", "\n", "\n", "H", "=", "cost_volume", ".", "size", "(", ")", "[", "2", "]", "\n", "W", "=", "cost_volume", ".", "size", "(", ")", "[", "3", "]", "\n", "\n", "# d':|d'-d|<=sigma, d' = argmax( C(d) for d in dim[1] ), (BatchSize, 1, Height, Width)", "\n", "# it's only the index for array, not real disparity index", "\n", "max_index", "=", "torch", ".", "argmax", "(", "cost_volume", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# sample near the index of max similarity, get [2 * radius + 1]", "\n", "# for example, if dilation=2, disp_sample_radius =2, we will get (-4, -2, 0, 2, 4)", "\n", "interval", "=", "torch", ".", "linspace", "(", "-", "self", ".", "radius", "*", "self", ".", "radius_dilation", ",", "\n", "self", ".", "radius", "*", "self", ".", "radius_dilation", ",", "\n", "2", "*", "self", ".", "radius", "+", "1", ")", ".", "long", "(", ")", ".", "to", "(", "cost_volume", ".", "device", ")", "\n", "# (BatchSize, 2 * radius + 1, Height, Width)", "\n", "interval", "=", "interval", ".", "repeat", "(", "B", ",", "H", ",", "W", ",", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "# (BatchSize, 2*radius+1, Height, Width)", "\n", "index_group", "=", "(", "max_index", "+", "interval", ")", "\n", "\n", "\n", "# get mask in [0, D-1],", "\n", "# (BatchSize, 2*radius+1, Height, Width)", "\n", "mask", "=", "(", "(", "index_group", ">=", "0", ")", "&", "(", "index_group", "<=", "D", "-", "1", ")", ")", ".", "detach", "(", ")", ".", "type_as", "(", "cost_volume", ")", "\n", "index_group", "=", "index_group", ".", "clamp", "(", "0", ",", "D", "-", "1", ")", "\n", "\n", "# gather values in cost_volume which index = index_group,", "\n", "# (BatchSize, 2*radius+1, Height, Width)", "\n", "gathered_cost_volume", "=", "torch", ".", "gather", "(", "cost_volume", ",", "dim", "=", "1", ",", "index", "=", "index_group", ")", "\n", "\n", "# convert index_group from torch.LongTensor to torch.FloatTensor", "\n", "index_group", "=", "index_group", ".", "type_as", "(", "cost_volume", ")", "\n", "\n", "# convert to real disparity sample index", "\n", "disp_sample", "=", "self", ".", "start_disp", "+", "index_group", "*", "self", ".", "dilation", "\n", "\n", "# d * P(d), and mask out index out of (start_disp, end_disp), (BatchSize, 1, Height, Width)", "\n", "# if index in (start_disp, end_disp), keep the original disparity value, otherwise -10000.0, as e(-10000.0) approximate 0.0", "\n", "# scale cost volume with alpha", "\n", "gathered_cost_volume", "=", "gathered_cost_volume", "*", "self", ".", "alpha", "\n", "\n", "# (BatchSize, 2 * radius + 1, Height, Width)", "\n", "gathered_prob_volume", "=", "F", ".", "softmax", "(", "(", "gathered_cost_volume", "*", "mask", "+", "(", "1", "-", "mask", ")", "*", "(", "-", "10000.0", "*", "self", ".", "alpha", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# (BatchSize, 1, Height, Width)", "\n", "disp_map", "=", "(", "gathered_prob_volume", "*", "disp_sample", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "return", "disp_map", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.local_soft_argmin.LocalSoftArgmin.__repr__": [[107, 118], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "'{}\\n'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Max Disparity: {}\\n'", ".", "format", "(", "self", ".", "max_disp", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Local disparity sample radius: {}\\n'", ".", "format", "(", "self", ".", "radius", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Start disparity: {}\\n'", ".", "format", "(", "self", ".", "start_disp", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Dilation rate: {}\\n'", ".", "format", "(", "self", ".", "dilation", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Local disparity sample dilation rate: {}\\n'", ".", "format", "(", "self", ".", "radius_dilation", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Alpha: {}\\n'", ".", "format", "(", "self", ".", "alpha", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Normalize: {}\\n'", ".", "format", "(", "self", ".", "normalize", ")", "\n", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.local_soft_argmin.LocalSoftArgmin.name": [[119, 122], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'LocalSoftArgmin'", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.test_disp_predictors.testDispPredictors.setUp": [[22, 41], ["torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:1\"", ")", "\n", "\n", "# FasterSoftArgmin", "\n", "self", ".", "pred_type", "=", "'FASTER'", "\n", "self", ".", "radius", "=", "None", "\n", "self", ".", "radius_dilation", "=", "None", "\n", "\n", "# LocalSoftArgmin", "\n", "# self.pred_type = 'LOCAL'", "\n", "# self.radius = 2", "\n", "# self.radius_dilation = 1", "\n", "\n", "# SoftArgmin", "\n", "# self.pred_type = 'DEFAULT'", "\n", "# self.radius = None", "\n", "# self.radius_dilation = None", "\n", "\n", "self", ".", "iters", "=", "50", "# used for speed test", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.test_disp_predictors.testDispPredictors.testCase1": [[42, 103], ["mmcv.Config", "mmcv.Config.model.update", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "print", "print", "print", "dmb.modeling.stereo.disp_predictors.build_disp_predictor().to", "print", "dmb.modeling.stereo.disp_predictors.build_disp_predictor().to.", "print", "print", "print", "dict", "print", "print", "torch.linspace().repeat().permute().contiguous().to", "torch.linspace().repeat().permute().contiguous().to", "torch.linspace().repeat().permute().contiguous().to", "torch.linspace().repeat().permute().contiguous().to", "dmb.modeling.stereo.disp_predictors.build_disp_predictor().to.", "print", "print", "test_disp_predictors.kick_out_none_keys", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "dmb.modeling.stereo.disp_predictors.build_disp_predictor", "dict", "torch.linspace().repeat().permute().contiguous", "torch.linspace().repeat().permute().contiguous", "torch.linspace().repeat().permute().contiguous", "torch.linspace().repeat().permute().contiguous", "dict", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.test_disp_predictors.kick_out_none_keys", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.builder.build_disp_predictor"], ["", "def", "testCase1", "(", "self", ")", ":", "\n", "        ", "start_disp", "=", "-", "4", "\n", "dilation", "=", "2", "\n", "alpha", "=", "1.0", "\n", "normalize", "=", "True", "\n", "max_disp", "=", "9", "\n", "h", ",", "w", "=", "2", ",", "2", "\n", "\n", "d", "=", "(", "max_disp", "+", "dilation", "-", "1", ")", "//", "dilation", "\n", "\n", "cfg", "=", "Config", "(", "dict", "(", "\n", "model", "=", "dict", "(", "\n", "disp_predictor", "=", "dict", "(", "\n", "type", "=", "self", ".", "pred_type", ",", "\n", "# the maximum disparity of disparity search range", "\n", "max_disp", "=", "max_disp", ",", "\n", "# disparity sample radius", "\n", "radius", "=", "self", ".", "radius", ",", "\n", "# the start disparity of disparity search range", "\n", "start_disp", "=", "start_disp", ",", "\n", "# the step between near disparity sample", "\n", "dilation", "=", "dilation", ",", "\n", "# the step between near disparity sample when local sampling", "\n", "radius_dilation", "=", "self", ".", "radius_dilation", ",", "\n", "# the temperature coefficient of soft argmin", "\n", "alpha", "=", "alpha", ",", "\n", "# whether normalize the estimated cost volume", "\n", "normalize", "=", "normalize", ",", "\n", "\n", ")", ",", "\n", ")", "\n", ")", ")", "\n", "\n", "cfg", ".", "model", ".", "update", "(", "disp_predictor", "=", "kick_out_none_keys", "(", "cfg", ".", "model", ".", "disp_predictor", ")", ")", "\n", "\n", "cost", "=", "torch", ".", "ones", "(", "1", ",", "d", ",", "h", ",", "w", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "cost", ".", "requires_grad", "=", "True", "\n", "print", "(", "'*'", "*", "60", ")", "\n", "print", "(", "'Cost volume:'", ")", "\n", "print", "(", "cost", ")", "\n", "\n", "disp_predictor", "=", "build_disp_predictor", "(", "cfg", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "print", "(", "disp_predictor", ")", "\n", "disp", "=", "disp_predictor", "(", "cost", ")", "\n", "print", "(", "'*'", "*", "60", ")", "\n", "print", "(", "'Regressed disparity map :'", ")", "\n", "print", "(", "disp", ")", "\n", "\n", "# soft argmin", "\n", "if", "self", ".", "pred_type", "==", "'DEFAULT'", ":", "\n", "            ", "print", "(", "'*'", "*", "60", ")", "\n", "print", "(", "'Test directly providing disparity samples'", ")", "\n", "\n", "end_disp", "=", "start_disp", "+", "max_disp", "-", "1", "\n", "\n", "# generate disparity samples", "\n", "disp_samples", "=", "torch", ".", "linspace", "(", "start_disp", ",", "end_disp", ",", "d", ")", ".", "repeat", "(", "1", ",", "h", ",", "w", ",", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "to", "(", "cost", ".", "device", ")", "\n", "disp", "=", "disp_predictor", "(", "cost", ",", "disp_samples", ")", "\n", "print", "(", "'Regressed disparity map :'", ")", "\n", "print", "(", "disp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.test_disp_predictors.testDispPredictors.timeTemplate": [[104, 125], ["isinstance", "time.time", "range", "time.time", "print", "isinstance", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "module.eval", "module.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "len", "module", "len", "module"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.train"], ["", "", "def", "timeTemplate", "(", "self", ",", "module", ",", "module_name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "device", "(", "self", ".", "device", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "module", ".", "eval", "(", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "iters", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "len", "(", "args", ")", ">", "0", ":", "\n", "                    ", "module", "(", "*", "args", ")", "\n", "", "if", "len", "(", "kwargs", ")", ">", "0", ":", "\n", "                    ", "module", "(", "**", "kwargs", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", "self", ".", "device", ")", "\n", "", "", "end_time", "=", "time", ".", "time", "(", ")", "\n", "avg_time", "=", "(", "end_time", "-", "start_time", ")", "/", "self", ".", "iters", "\n", "print", "(", "'{} reference forward once takes {:.4f}s, i.e. {:.2f}fps'", ".", "format", "(", "module_name", ",", "avg_time", ",", "(", "1", "/", "avg_time", ")", ")", ")", "\n", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "module", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.test_disp_predictors.testDispPredictors.testSpeed": [[127, 181], ["mmcv.Config", "mmcv.Config.model.update", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "print", "print", "dmb.modeling.stereo.disp_predictors.build_disp_predictor().to", "print", "test_disp_predictors.testDispPredictors.timeTemplate", "dict", "print", "print", "torch.linspace().repeat().permute().contiguous().to", "torch.linspace().repeat().permute().contiguous().to", "torch.linspace().repeat().permute().contiguous().to", "torch.linspace().repeat().permute().contiguous().to", "test_disp_predictors.testDispPredictors.timeTemplate", "test_disp_predictors.kick_out_none_keys", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "dmb.modeling.stereo.disp_predictors.build_disp_predictor", "dict", "torch.linspace().repeat().permute().contiguous", "torch.linspace().repeat().permute().contiguous", "torch.linspace().repeat().permute().contiguous", "torch.linspace().repeat().permute().contiguous", "dict", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.test_backbones.testBackbones.timeTemplate", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.test_backbones.testBackbones.timeTemplate", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.test_disp_predictors.kick_out_none_keys", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.builder.build_disp_predictor"], ["", "", "def", "testSpeed", "(", "self", ")", ":", "\n", "        ", "start_disp", "=", "0", "\n", "dilation", "=", "1", "\n", "alpha", "=", "1.0", "\n", "normalize", "=", "True", "\n", "max_disp", "=", "192", "\n", "h", ",", "w", "=", "544", ",", "960", "\n", "d", "=", "(", "max_disp", "+", "dilation", "-", "1", ")", "//", "dilation", "\n", "\n", "cfg", "=", "Config", "(", "dict", "(", "\n", "model", "=", "dict", "(", "\n", "disp_predictor", "=", "dict", "(", "\n", "type", "=", "self", ".", "pred_type", ",", "\n", "# the maximum disparity of disparity search range", "\n", "max_disp", "=", "max_disp", ",", "\n", "# disparity sample radius", "\n", "radius", "=", "self", ".", "radius", ",", "\n", "# the start disparity of disparity search range", "\n", "start_disp", "=", "start_disp", ",", "\n", "# the step between near disparity sample", "\n", "dilation", "=", "dilation", ",", "\n", "# the step between near disparity sample when local sampling", "\n", "radius_dilation", "=", "self", ".", "radius_dilation", ",", "\n", "# the temperature coefficient of soft argmin", "\n", "alpha", "=", "alpha", ",", "\n", "# whether normalize the estimated cost volume", "\n", "normalize", "=", "normalize", ",", "\n", "\n", ")", ",", "\n", ")", "\n", ")", ")", "\n", "\n", "cfg", ".", "model", ".", "update", "(", "disp_predictor", "=", "kick_out_none_keys", "(", "cfg", ".", "model", ".", "disp_predictor", ")", ")", "\n", "\n", "cost", "=", "torch", ".", "ones", "(", "1", ",", "d", ",", "h", ",", "w", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "cost", ".", "requires_grad", "=", "True", "\n", "print", "(", "'*'", "*", "60", ")", "\n", "print", "(", "'Speed Test!'", ")", "\n", "\n", "disp_predictor", "=", "build_disp_predictor", "(", "cfg", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "print", "(", "disp_predictor", ")", "\n", "self", ".", "timeTemplate", "(", "disp_predictor", ",", "self", ".", "pred_type", ",", "cost_volume", "=", "cost", ")", "\n", "\n", "# soft argmin", "\n", "if", "self", ".", "pred_type", "==", "'DEFAULT'", ":", "\n", "            ", "print", "(", "'*'", "*", "60", ")", "\n", "print", "(", "'Speed test directly providing disparity samples'", ")", "\n", "\n", "end_disp", "=", "start_disp", "+", "max_disp", "-", "1", "\n", "\n", "# generate disparity samples", "\n", "disp_samples", "=", "torch", ".", "linspace", "(", "start_disp", ",", "end_disp", ",", "d", ")", ".", "repeat", "(", "1", ",", "h", ",", "w", ",", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "to", "(", "cost", ".", "device", ")", "\n", "self", ".", "timeTemplate", "(", "disp_predictor", ",", "self", ".", "pred_type", ",", "cost_volume", "=", "cost", ",", "disp_sample", "=", "disp_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_predictors.test_disp_predictors.kick_out_none_keys": [[10, 19], ["cfg.items", "cfg.pop", "none_cfg.append"], "function", ["None"], ["def", "kick_out_none_keys", "(", "cfg", ")", ":", "\n", "    ", "none_cfg", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "cfg", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", "is", "None", ":", "\n", "            ", "none_cfg", ".", "append", "(", "k", ")", "\n", "", "", "for", "k", "in", "none_cfg", ":", "\n", "        ", "cfg", ".", "pop", "(", "k", ")", "\n", "\n", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.gen_conf.ConfGenerator.__init__": [[16, 23], ["torch.Module.__init__", "isinstance", "TypeError", "type"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["def", "__init__", "(", "self", ",", "theta", ")", ":", "\n", "        ", "super", "(", "ConfGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "isinstance", "(", "theta", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'(int,float) is expected, got {}'", ".", "format", "(", "type", "(", "theta", ")", ")", ")", "\n", "\n", "", "self", ".", "theta", "=", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.gen_conf.ConfGenerator.forward": [[24, 53], ["torch.lt().type_as", "torch.lt().type_as", "torch.lt().type_as", "torch.lt().type_as", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "TypeError", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "TypeError", "gtDisp.view.view.dim", "gtDisp.view.view.view", "estDisp.view.view.view", "gtDisp.view.view.dim", "gtDisp.view.view.view", "estDisp.view.view.view", "gtDisp.view.view.dim", "gtDisp.view.view.size", "gtDisp.view.view.size", "gtDisp.view.view.size", "gtDisp.view.view.size", "gtDisp.view.view.size", "gtDisp.view.view.size", "ValueError", "torch.lt", "torch.lt", "torch.lt", "torch.lt", "type", "type", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "gtDisp.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "estDisp", ",", "gtDisp", ")", ":", "\n", "\n", "        ", "if", "not", "torch", ".", "is_tensor", "(", "gtDisp", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'ground truth disparity map is expected to be tensor, got {}'", ".", "format", "(", "type", "(", "gtDisp", ")", ")", ")", "\n", "", "if", "not", "torch", ".", "is_tensor", "(", "estDisp", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'estimated disparity map is expected to be tensor, got {}'", ".", "format", "(", "type", "(", "estDisp", ")", ")", ")", "\n", "\n", "", "assert", "estDisp", ".", "shape", "==", "gtDisp", ".", "shape", "\n", "\n", "if", "gtDisp", ".", "dim", "(", ")", "==", "2", ":", "# single image H x W", "\n", "            ", "h", ",", "w", "=", "gtDisp", ".", "size", "(", "0", ")", ",", "gtDisp", ".", "size", "(", "1", ")", "\n", "gtDisp", "=", "gtDisp", ".", "view", "(", "1", ",", "1", ",", "h", ",", "w", ")", "\n", "estDisp", "=", "estDisp", ".", "view", "(", "1", ",", "1", ",", "h", ",", "w", ")", "\n", "\n", "", "if", "gtDisp", ".", "dim", "(", ")", "==", "3", ":", "# multi image B x H x W", "\n", "            ", "b", ",", "h", ",", "w", "=", "gtDisp", ".", "size", "(", "0", ")", ",", "gtDisp", ".", "size", "(", "1", ")", ",", "gtDisp", ".", "size", "(", "2", ")", "\n", "gtDisp", "=", "gtDisp", ".", "view", "(", "b", ",", "1", ",", "h", ",", "w", ")", "\n", "estDisp", "=", "estDisp", ".", "view", "(", "b", ",", "1", ",", "h", ",", "w", ")", "\n", "\n", "", "if", "gtDisp", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "if", "gtDisp", ".", "size", "(", "1", ")", "==", "1", ":", "# mult image B x 1 x H x W", "\n", "                ", "self", ".", "gtDisp", "=", "gtDisp", "\n", "self", ".", "estDisp", "=", "estDisp", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'2nd dimension size should be 1, got {}'", ".", "format", "(", "gtDisp", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "", "", "confidence_gt_label", "=", "torch", ".", "lt", "(", "torch", ".", "abs", "(", "self", ".", "estDisp", "-", "self", ".", "gtDisp", ")", ",", "self", ".", "theta", ")", ".", "type_as", "(", "self", ".", "gtDisp", ")", "\n", "\n", "return", "confidence_gt_label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.cal_conf._calcConf.__init__": [[19, 21], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "_calcConf", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.cal_conf._calcConf.forward": [[22, 24], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "cost_volume", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.cal_conf._calcConf.checkout": [[25, 28], ["cost_volume.dim", "ValueError", "cost_volume.dim"], "methods", ["None"], ["", "def", "checkout", "(", "self", ",", "cost_volume", ")", ":", "\n", "        ", "if", "cost_volume", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", ".", "format", "(", "cost_volume", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.cal_conf._calcConf.gradient": [[29, 32], ["None"], "methods", ["None"], ["", "", "def", "gradient", "(", "self", ",", "pred", ")", ":", "\n", "        ", "D_dz", "=", "pred", "[", ":", ",", "1", ":", ",", ":", ",", ":", ",", "]", "-", "pred", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "return", "D_dz", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.cal_conf._calcConf.get_c1_c2": [[33, 76], ["cal_conf._calcConf.checkout", "torch.pad", "torch.pad", "torch.pad", "cal_conf._calcConf.gradient", "torch.pad().type_as", "torch.pad().type_as", "torch.pad().type_as", "c1.repeat", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "local_max_index.type_as", "local_max_value.max", "local_max_value_mv_peak.max", "cost_volume.min", "torch.pad", "torch.pad", "torch.pad", "torch.ge.type_as", "torch.ge.type_as", "torch.ge.type_as"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.cal_conf._calcConf.checkout", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.cal_conf._calcConf.gradient"], ["", "def", "get_c1_c2", "(", "self", ",", "cost_volume", ")", ":", "\n", "        ", "self", ".", "checkout", "(", "cost_volume", ")", "\n", "\n", "# grab max disparity", "\n", "max_disp", "=", "cost_volume", ".", "shape", "[", "1", "]", "\n", "\n", "cost_volume", "=", "cost_volume", "-", "cost_volume", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "pad_cost_volume", "=", "F", ".", "pad", "(", "cost_volume", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ")", ",", "'constant'", ",", "0", ")", "\n", "cost_volume_grad", "=", "self", ".", "gradient", "(", "pad_cost_volume", ")", "\n", "\n", "# for example, a pixel with cost_volume = [1, 2, 3,  2,  1, 2, 3,  1]", "\n", "# it's gradient sign is                 = [1, 1, 1, -1, -1, 1, 1, -1]", "\n", "# correspond positive gradient is       = [1, 1, 1,  0,  0, 1, 1,  0]", "\n", "# correspond negative gradient is       = [0, 0, 0,  1,  1, 0, 0,  1]", "\n", "# shift negative gradient left 1        = [0, 0, 1,  1,  0, 0, 1,  1]", "\n", "# we append 1 at the end of shifted negative gradient", "\n", "# now we can use & with shift negative gradient, positive gradient", "\n", "# cost_volume:      [1, 2, 3,  2,  1, 2, 3,  1]", "\n", "# positive:         [1, 1, 1,  0,  0, 1, 1,  0]", "\n", "# shift negative:   [0, 0, 1,  1,  0, 0, 1,  1]", "\n", "# & result:         [0, 0, 1,  0,  0, 0, 1,  0]", "\n", "# the position of 1 in & result is correspond to the convex peak of cost_volume", "\n", "cost_volume_grad_pos", "=", "(", "cost_volume_grad", ">", "0", ")", "\n", "cost_volume_grad_neg", "=", "(", "cost_volume_grad", "<", "0", ")", "\n", "cost_volume_grad_neg_shift", "=", "cost_volume_grad_neg", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", "\n", "cost_volume_grad_neg_shift", "=", "F", ".", "pad", "(", "\n", "cost_volume_grad_neg_shift", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ")", ",", "'constant'", ",", "1", "\n", ")", ".", "type_as", "(", "cost_volume_grad_pos", ")", "\n", "local_max_index", "=", "cost_volume_grad_neg_shift", "&", "cost_volume_grad_pos", "\n", "\n", "# pick out local max", "\n", "local_max_value", "=", "cost_volume", "*", "local_max_index", ".", "type_as", "(", "cost_volume", ")", "\n", "\n", "# along local max, Maximum is correspond to c1", "\n", "c1", "=", "local_max_value", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "# in order to pick out c2, we have to remove c1 first", "\n", "max_value", "=", "c1", ".", "repeat", "(", "1", ",", "max_disp", ",", "1", ",", "1", ")", "\n", "max_value_mask", "=", "torch", ".", "ge", "(", "local_max_value", ",", "max_value", ")", "\n", "local_max_value_mv_peak", "=", "local_max_value", "*", "(", "1.0", "-", "max_value_mask", ".", "type_as", "(", "local_max_value", ")", ")", "\n", "c2", "=", "local_max_value_mv_peak", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "return", "c1", ",", "c2", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.cal_conf.pkrConf.__init__": [[81, 83], ["cal_conf._calcConf.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "pkrConf", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.cal_conf.pkrConf.forward": [[84, 95], ["cal_conf.pkrConf.get_c1_c2", "est_confidence.abs.abs.abs", "est_confidence.abs.abs.min", "est_confidence.abs.abs.max"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.cal_conf._calcConf.get_c1_c2"], ["", "def", "forward", "(", "self", ",", "cost_volume", ")", ":", "\n", "        ", "c1", ",", "c2", "=", "self", ".", "get_c1_c2", "(", "cost_volume", ")", "\n", "\n", "# Our cost_volume is exactly equal to (- real meaning CostVolume)", "\n", "est_confidence", "=", "(", "c2", "+", "eps", ")", "/", "(", "c1", "+", "eps", ")", "\n", "est_confidence", "=", "est_confidence", ".", "abs", "(", ")", "\n", "est_confidence", "=", "(", "1.0", "-", "est_confidence", ")", "\n", "\n", "assert", "(", "est_confidence", ".", "min", "(", ")", ">=", "0", "and", "est_confidence", ".", "max", "(", ")", "<=", "1.0", ")", "\n", "\n", "return", "est_confidence", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.cal_conf.apkrConf.__init__": [[100, 108], ["cal_conf._calcConf.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "cal_conf.apkrConf.conv.weight.data.fill_"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["def", "__init__", "(", "self", ",", "kernel_size", ")", ":", "\n", "        ", "super", "(", "apkrConf", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "1", ",", "1", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "(", "kernel_size", "//", "2", ")", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "conv", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", "/", "(", "kernel_size", "**", "2", ")", ")", "\n", "self", ".", "conv", ".", "weight", ".", "data", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.cal_conf.apkrConf.forward": [[109, 120], ["cal_conf.apkrConf.get_c1_c2", "cal_conf.apkrConf.abs", "cal_conf.apkrConf.conv().clamp", "cal_conf.apkrConf.conv"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.cal_conf._calcConf.get_c1_c2"], ["", "def", "forward", "(", "self", ",", "cost_volume", ")", ":", "\n", "        ", "c1", ",", "c2", "=", "self", ".", "get_c1_c2", "(", "cost_volume", ")", "\n", "\n", "# Our cost_volume is exactly equal to (- real meaning CostVolume)", "\n", "est_confidence", "=", "(", "c2", "-", "eps", ")", "/", "(", "c1", "+", "eps", ")", "\n", "est_confidence", "=", "est_confidence", ".", "abs", "(", ")", "\n", "est_confidence", "=", "1.0", "-", "est_confidence", "\n", "\n", "est_confidence", "=", "self", ".", "conv", "(", "est_confidence", ")", ".", "clamp", "(", "0.0", ",", "1.0", ")", "\n", "\n", "return", "est_confidence", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.cal_conf.nlmConf.__init__": [[125, 128], ["cal_conf._calcConf.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["def", "__init__", "(", "self", ",", "sigma", "=", "2.0", ")", ":", "\n", "        ", "super", "(", "nlmConf", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.cal_conf.nlmConf.forward": [[129, 134], ["cal_conf.nlmConf.get_c1_c2"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.cal_conf._calcConf.get_c1_c2"], ["", "def", "forward", "(", "self", ",", "cost_volume", ")", ":", "\n", "        ", "c1", ",", "c2", "=", "self", ".", "get_c1_c2", "(", "cost_volume", ")", "\n", "est_confidence", "=", "(", "-", "(", "c2", "-", "c1", ")", "/", "self", ".", "sigma", "**", "2", ")", ".", "exp", "(", ")", "\n", "\n", "return", "est_confidence", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.conf_net.ConfidenceEstimation.__init__": [[19, 29], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "batchNorm", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConfidenceEstimation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "sec_in_planes", "=", "int", "(", "self", ".", "in_planes", "//", "3", ")", "\n", "self", ".", "sec_in_planes", "=", "self", ".", "sec_in_planes", "if", "self", ".", "sec_in_planes", ">", "0", "else", "1", "\n", "\n", "self", ".", "conf_net", "=", "nn", ".", "Sequential", "(", "\n", "conv_bn_relu", "(", "batchNorm", ",", "self", ".", "in_planes", ",", "self", ".", "sec_in_planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "sec_in_planes", ",", "1", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.conf_measure.conf_net.ConfidenceEstimation.forward": [[31, 37], ["conf_net.ConfidenceEstimation.conf_net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "cost", ")", ":", "\n", "        ", "assert", "cost", ".", "shape", "[", "1", "]", "==", "self", ".", "in_planes", "\n", "\n", "confCost", "=", "self", ".", "conf_net", "(", "cost", ")", "\n", "\n", "return", "confCost", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.GCNet.GCNetBackbone.__init__": [[22, 37], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.BasicBlock", "dmb.modeling.stereo.layers.basic_layers.BasicBlock", "dmb.modeling.stereo.layers.basic_layers.BasicBlock", "dmb.modeling.stereo.layers.basic_layers.BasicBlock", "dmb.modeling.stereo.layers.basic_layers.BasicBlock", "dmb.modeling.stereo.layers.basic_layers.BasicBlock", "dmb.modeling.stereo.layers.basic_layers.BasicBlock", "dmb.modeling.stereo.layers.basic_layers.BasicBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu"], ["        ", "super", "(", "GCAggregator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_disp", "=", "max_disp", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "F", "=", "self", ".", "in_planes", "//", "2", "\n", "\n", "self", ".", "layer19", "=", "self", ".", "_make_layer", "(", "self", ".", "in_planes", ",", "self", ".", "F", ")", "\n", "self", ".", "layer20", "=", "self", ".", "_make_layer", "(", "self", ".", "F", ",", "self", ".", "F", ")", "\n", "self", ".", "layer21", "=", "self", ".", "_make_layer", "(", "self", ".", "in_planes", "+", "self", ".", "F", ",", "self", ".", "F", "*", "2", ",", "2", ")", "\n", "self", ".", "layer22", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "2", ")", "\n", "self", ".", "layer23", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "2", ")", "\n", "self", ".", "layer24", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "2", "+", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "2", ",", "2", ")", "\n", "self", ".", "layer25", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "2", ")", "\n", "self", ".", "layer26", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "2", ")", "\n", "self", ".", "layer27", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "2", "+", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "2", ",", "2", ")", "\n", "self", ".", "layer28", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "2", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.GCNet.GCNetBackbone.forward": [[39, 48], ["GCNet.GCNetBackbone.backbone", "GCNet.GCNetBackbone.backbone", "len", "ValueError", "len"], "methods", ["None"], ["self", ".", "layer30", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "2", "+", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "4", ",", "2", ")", "\n", "\n", "self", ".", "layer31", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "4", ",", "self", ".", "F", "*", "4", ")", "\n", "self", ".", "layer32", "=", "self", ".", "_make_layer", "(", "self", ".", "F", "*", "4", ",", "self", ".", "F", "*", "4", ")", "\n", "\n", "self", ".", "layer33", "=", "self", ".", "_make_tlayer", "(", "self", ".", "F", "*", "4", ",", "self", ".", "F", "*", "2", ")", "\n", "self", ".", "layer34", "=", "self", ".", "_make_tlayer", "(", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "2", ")", "\n", "self", ".", "layer35", "=", "self", ".", "_make_tlayer", "(", "self", ".", "F", "*", "2", ",", "self", ".", "F", "*", "2", ")", "\n", "self", ".", "layer36", "=", "self", ".", "_make_tlayer", "(", "self", ".", "F", "*", "2", ",", "self", ".", "F", ")", "\n", "self", ".", "layer37", "=", "self", ".", "_make_tlayer", "(", "self", ".", "F", ",", "1", ",", "has_bn_relu", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.PSMNet.PSMNetBackbone.__init__": [[23, 61], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "PSMNet.PSMNetBackbone._make_layer", "PSMNet.PSMNetBackbone._make_layer", "PSMNet.PSMNetBackbone._make_layer", "PSMNet.PSMNetBackbone._make_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu"], ["\n", "def", "__init__", "(", "self", ",", "max_disp", ",", "in_planes", "=", "64", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "PSMAggregator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_disp", "=", "max_disp", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "self", ".", "dres0", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "self", ".", "in_planes", ",", "32", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "dres1", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "conv3d_bn", "(", "batch_norm", ",", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "self", ".", "dres2", "=", "Hourglass", "(", "in_planes", "=", "32", ",", "batch_norm", "=", "batch_norm", ")", "\n", "self", ".", "dres3", "=", "Hourglass", "(", "in_planes", "=", "32", ",", "batch_norm", "=", "batch_norm", ")", "\n", "self", ".", "dres4", "=", "Hourglass", "(", "in_planes", "=", "32", ",", "batch_norm", "=", "batch_norm", ")", "\n", "\n", "self", ".", "classif1", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "classif2", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "classif3", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "raw_cost", ")", ":", "\n", "        ", "B", ",", "C", ",", "D", ",", "H", ",", "W", "=", "raw_cost", ".", "shape", "\n", "# raw_cost: (BatchSize, Channels*2, MaxDisparity/4, Height/4, Width/4)", "\n", "cost0", "=", "self", ".", "dres0", "(", "raw_cost", ")", "\n", "cost0", "=", "self", ".", "dres1", "(", "cost0", ")", "+", "cost0", "\n", "\n", "out1", ",", "pre1", ",", "post1", "=", "self", ".", "dres2", "(", "cost0", ",", "None", ",", "None", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.PSMNet.PSMNetBackbone._make_layer": [[63, 82], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.layers.basic_layers.conv_bn", "block", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn"], ["\n", "out2", ",", "pre2", ",", "post2", "=", "self", ".", "dres3", "(", "out1", ",", "pre1", ",", "post1", ")", "\n", "out2", "=", "out2", "+", "cost0", "\n", "\n", "out3", ",", "pre3", ",", "post3", "=", "self", ".", "dres4", "(", "out2", ",", "pre2", ",", "post2", ")", "\n", "out3", "=", "out3", "+", "cost0", "\n", "\n", "cost1", "=", "self", ".", "classif1", "(", "out1", ")", "\n", "cost2", "=", "self", ".", "classif2", "(", "out2", ")", "+", "cost1", "\n", "cost3", "=", "self", ".", "classif3", "(", "out3", ")", "+", "cost2", "\n", "\n", "# (BatchSize, 1, max_disp, Height, Width)", "\n", "full_h", ",", "full_w", "=", "H", "*", "4", ",", "W", "*", "4", "\n", "align_corners", "=", "True", "\n", "cost1", "=", "F", ".", "interpolate", "(", "\n", "cost1", ",", "[", "self", ".", "max_disp", ",", "full_h", ",", "full_w", "]", ",", "\n", "mode", "=", "'trilinear'", ",", "align_corners", "=", "align_corners", "\n", ")", "\n", "cost2", "=", "F", ".", "interpolate", "(", "\n", "cost2", ",", "[", "self", ".", "max_disp", ",", "full_h", ",", "full_w", "]", ",", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.PSMNet.PSMNetBackbone._forward": [[83, 119], ["PSMNet.PSMNetBackbone.firstconv", "PSMNet.PSMNetBackbone.layer1", "PSMNet.PSMNetBackbone.layer2", "PSMNet.PSMNetBackbone.layer3", "PSMNet.PSMNetBackbone.layer4", "PSMNet.PSMNetBackbone.branch1", "torch.interpolate", "torch.interpolate", "torch.interpolate", "PSMNet.PSMNetBackbone.branch2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "PSMNet.PSMNetBackbone.branch3", "torch.interpolate", "torch.interpolate", "torch.interpolate", "PSMNet.PSMNetBackbone.branch4", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PSMNet.PSMNetBackbone.lastconv", "PSMNet.PSMNetBackbone.size", "PSMNet.PSMNetBackbone.size", "PSMNet.PSMNetBackbone.size", "PSMNet.PSMNetBackbone.size", "PSMNet.PSMNetBackbone.size", "PSMNet.PSMNetBackbone.size", "PSMNet.PSMNetBackbone.size", "PSMNet.PSMNetBackbone.size"], "methods", ["None"], ["mode", "=", "'trilinear'", ",", "align_corners", "=", "align_corners", "\n", ")", "\n", "cost3", "=", "F", ".", "interpolate", "(", "\n", "cost3", ",", "[", "self", ".", "max_disp", ",", "full_h", ",", "full_w", "]", ",", "\n", "mode", "=", "'trilinear'", ",", "align_corners", "=", "align_corners", "\n", ")", "\n", "\n", "# (BatchSize, max_disp, Height, Width)", "\n", "cost1", "=", "torch", ".", "squeeze", "(", "cost1", ",", "1", ")", "\n", "cost2", "=", "torch", ".", "squeeze", "(", "cost2", ",", "1", ")", "\n", "cost3", "=", "torch", ".", "squeeze", "(", "cost3", ",", "1", ")", "\n", "\n", "return", "[", "cost3", ",", "cost2", ",", "cost1", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.PSMNet.PSMNetBackbone.forward": [[120, 130], ["PSMNet.PSMNetBackbone._forward", "PSMNet.PSMNetBackbone._forward", "len", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone._forward", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone._forward"], []], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.StereoNet.DownsampleHead.__init__": [[19, 28], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["\n", "\n", "def", "__init__", "(", "self", ",", "max_disp", ",", "in_planes", "=", "32", ",", "batch_norm", "=", "True", ",", "num", "=", "4", ")", ":", "\n", "        ", "super", "(", "StereoNetAggregator", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.StereoNet.DownsampleHead.forward": [[29, 32], ["StereoNet.DownsampleHead.downsample"], "methods", ["None"], ["self", ".", "max_disp", "=", "max_disp", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "num", "=", "num", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.StereoNet.StereoNetBackbone.__init__": [[51, 76], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "StereoNet.StereoNetBackbone.downsample.append", "StereoNet.StereoNetBackbone.residual_blocks.append", "StereoNet.DownsampleHead", "dmb.modeling.stereo.layers.basic_layers.BasicBlock"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["# (BatchSize, MaxDisparity/8, Height/8, Width/8)", "\n", "cost", "=", "torch", ".", "squeeze", "(", "cost", ",", "1", ")", "\n", "\n", "\n", "return", "[", "cost", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.StereoNet.StereoNetBackbone._forward": [[78, 89], ["range", "range", "StereoNet.StereoNetBackbone.lastconv"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.StereoNet.StereoNetBackbone.forward": [[90, 100], ["StereoNet.StereoNetBackbone._forward", "StereoNet.StereoNetBackbone._forward", "len", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone._forward", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone._forward"], []], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.FC_PSMNet.PSM_Encoder_Instance.__init__": [[23, 63], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "FC_PSMNet.PSM_Encoder_Instance._make_layer", "FC_PSMNet.PSM_Encoder_Instance._make_layer", "FC_PSMNet.PSM_Encoder_Instance._make_layer", "FC_PSMNet.PSM_Encoder_Instance._make_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.layers.basic_layers.conv_in_relu", "dmb.modeling.stereo.layers.basic_layers.conv_in_relu", "dmb.modeling.stereo.layers.basic_layers.conv_in_relu", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_in_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_in_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_in_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu"], ["def", "__init__", "(", "self", ",", "in_planes", "=", "3", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "PSM_Encoder_Instance", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "self", ".", "firstconv", "=", "nn", ".", "Sequential", "(", "\n", "conv_in_relu", "(", "batch_norm", ",", "self", ".", "in_planes", ",", "32", ",", "3", ",", "2", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "conv_in_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "conv_in_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "\n", "\n", "# For building Basic Block", "\n", "self", ".", "in_planes", "=", "32", "\n", "\n", "# BasicBlock_IN", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "batch_norm", ",", "BasicBlock_IN", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "batch_norm", ",", "BasicBlock", ",", "64", ",", "16", ",", "2", ",", "1", ",", "1", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "batch_norm", ",", "BasicBlock", ",", "128", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "batch_norm", ",", "BasicBlock", ",", "128", ",", "3", ",", "1", ",", "2", ",", "2", ")", "\n", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "(", "64", ",", "64", ")", ",", "stride", "=", "(", "64", ",", "64", ")", ")", ",", "\n", "conv_bn_relu", "(", "batch_norm", ",", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "(", "32", ",", "32", ")", ",", "stride", "=", "(", "32", ",", "32", ")", ")", ",", "\n", "conv_bn_relu", "(", "batch_norm", ",", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "branch3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "(", "16", ",", "16", ")", ",", "stride", "=", "(", "16", ",", "16", ")", ")", ",", "\n", "conv_bn_relu", "(", "batch_norm", ",", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "branch4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "(", "8", ",", "8", ")", ",", "stride", "=", "(", "8", ",", "8", ")", ")", ",", "\n", "conv_bn_relu", "(", "batch_norm", ",", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "lastconv", "=", "nn", ".", "Sequential", "(", "\n", "conv_bn_relu", "(", "batch_norm", ",", "320", ",", "128", ",", "3", ",", "1", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.FC_PSMNet.PSM_Encoder_Instance._make_layer": [[65, 84], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.layers.basic_layers.conv_bn", "block", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn"], ["", "def", "_make_layer", "(", "self", ",", "batch_norm", ",", "block", ",", "out_planes", ",", "blocks", ",", "stride", ",", "padding", ",", "dilation", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "in_planes", "!=", "out_planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "conv_bn", "(", "\n", "batch_norm", ",", "self", ".", "in_planes", ",", "out_planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "dilation", "=", "1", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "batch_norm", ",", "self", ".", "in_planes", ",", "out_planes", ",", "stride", ",", "downsample", ",", "padding", ",", "dilation", ")", "\n", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "batch_norm", ",", "self", ".", "in_planes", ",", "out_planes", ",", "1", ",", "None", ",", "padding", ",", "dilation", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.FC_PSMNet.PSM_Encoder_Instance._forward": [[85, 129], ["range", "range", "FC_PSMNet.PSM_Encoder_Instance.layer2", "FC_PSMNet.PSM_Encoder_Instance.layer3", "FC_PSMNet.PSM_Encoder_Instance.layer4", "FC_PSMNet.PSM_Encoder_Instance.branch1", "torch.interpolate", "torch.interpolate", "torch.interpolate", "FC_PSMNet.PSM_Encoder_Instance.branch2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "FC_PSMNet.PSM_Encoder_Instance.branch3", "torch.interpolate", "torch.interpolate", "torch.interpolate", "FC_PSMNet.PSM_Encoder_Instance.branch4", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "FC_PSMNet.PSM_Encoder_Instance.lastconv", "len", "w_arr.append", "len", "w_arr.append", "FC_PSMNet.PSM_Encoder_Instance.size", "FC_PSMNet.PSM_Encoder_Instance.size", "FC_PSMNet.PSM_Encoder_Instance.size", "FC_PSMNet.PSM_Encoder_Instance.size", "FC_PSMNet.PSM_Encoder_Instance.size", "FC_PSMNet.PSM_Encoder_Instance.size", "FC_PSMNet.PSM_Encoder_Instance.size", "FC_PSMNet.PSM_Encoder_Instance.size"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "w_arr", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "firstconv", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "firstconv", "[", "i", "]", "(", "x", ")", "\n", "w_arr", ".", "append", "(", "x", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "layer1", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "layer1", "[", "i", "]", "(", "x", ")", "\n", "w_arr", ".", "append", "(", "x", ")", "\n", "\n", "", "output_2_1", "=", "x", "\n", "output_4_0", "=", "self", ".", "layer2", "(", "output_2_1", ")", "\n", "output_4_1", "=", "self", ".", "layer3", "(", "output_4_0", ")", "\n", "output_8", "=", "self", ".", "layer4", "(", "output_4_1", ")", "\n", "\n", "output_branch1", "=", "self", ".", "branch1", "(", "output_8", ")", "\n", "output_branch1", "=", "F", ".", "interpolate", "(", "\n", "output_branch1", ",", "(", "output_8", ".", "size", "(", ")", "[", "2", "]", ",", "output_8", ".", "size", "(", ")", "[", "3", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", "\n", ")", "\n", "\n", "output_branch2", "=", "self", ".", "branch2", "(", "output_8", ")", "\n", "output_branch2", "=", "F", ".", "interpolate", "(", "\n", "output_branch2", ",", "(", "output_8", ".", "size", "(", ")", "[", "2", "]", ",", "output_8", ".", "size", "(", ")", "[", "3", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", "\n", ")", "\n", "\n", "output_branch3", "=", "self", ".", "branch3", "(", "output_8", ")", "\n", "output_branch3", "=", "F", ".", "interpolate", "(", "\n", "output_branch3", ",", "(", "output_8", ".", "size", "(", ")", "[", "2", "]", ",", "output_8", ".", "size", "(", ")", "[", "3", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", "\n", ")", "\n", "\n", "output_branch4", "=", "self", ".", "branch4", "(", "output_8", ")", "\n", "output_branch4", "=", "F", ".", "interpolate", "(", "\n", "output_branch4", ",", "(", "output_8", ".", "size", "(", ")", "[", "2", "]", ",", "output_8", ".", "size", "(", ")", "[", "3", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", "\n", ")", "\n", "\n", "output_feature", "=", "torch", ".", "cat", "(", "\n", "(", "output_4_0", ",", "output_8", ",", "output_branch4", ",", "output_branch3", ",", "output_branch2", ",", "output_branch1", ")", ",", "1", ")", "\n", "output_feature", "=", "self", ".", "lastconv", "(", "output_feature", ")", "\n", "\n", "return", "output_feature", ",", "w_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.FC_PSMNet.PSM_Encoder_Instance.forward": [[130, 134], ["FC_PSMNet.PSM_Encoder_Instance._forward"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone._forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "fms", ",", "w_arr", "=", "self", ".", "_forward", "(", "input", ")", "\n", "\n", "return", "[", "fms", ",", "w_arr", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.FC_PSMNet.FCPSMNetBackbone.__init__": [[153, 164], ["torch.Module.__init__", "print", "FC_PSMNet.PSM_Encoder_Instance", "FC_PSMNet.PSM_Encoder_Instance", "zip", "FC_PSMNet.FCPSMNetBackbone.encoder_q.parameters", "FC_PSMNet.FCPSMNetBackbone.encoder_k.parameters", "param_k.data.copy_"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", "=", "3", ",", "batch_norm", "=", "True", ",", "m", "=", "0.999", ")", ":", "\n", "        ", "super", "(", "FCPSMNetBackbone", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "m", "=", "m", "\n", "print", "(", "'m:{}'", ".", "format", "(", "m", ")", ")", "\n", "self", ".", "encoder_q", "=", "PSM_Encoder_Instance", "(", "in_planes", ",", "batch_norm", ")", "\n", "self", ".", "encoder_k", "=", "PSM_Encoder_Instance", "(", "in_planes", ",", "batch_norm", ")", "\n", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.FC_PSMNet.FCPSMNetBackbone._momentum_update_key_encoder": [[165, 172], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "FC_PSMNet.FCPSMNetBackbone.encoder_q.parameters", "FC_PSMNet.FCPSMNetBackbone.encoder_k.parameters"], "methods", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.FC_PSMNet.FCPSMNetBackbone.forward": [[173, 193], ["FC_PSMNet.FCPSMNetBackbone.encoder_q", "len", "ValueError", "FC_PSMNet.FCPSMNetBackbone.encoder_q", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "FC_PSMNet.FCPSMNetBackbone._momentum_update_key_encoder", "FC_PSMNet.FCPSMNetBackbone.encoder_k", "isinstance", "len", "r_fms[].detach", "r_fms.detach.detach.detach"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.contrastive_loss.StereoContrastiveLoss._momentum_update_key_encoder"], ["", "", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "if", "len", "(", "input", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "'expected input length 2 (got {} length input)'", ".", "format", "(", "len", "(", "input", ")", ")", ")", "\n", "\n", "", "l_img", ",", "r_img", "=", "input", "\n", "\n", "l_fms", ",", "l_w_arr", "=", "self", ".", "encoder_q", "(", "l_img", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "                ", "self", ".", "_momentum_update_key_encoder", "(", ")", "# update the key encoder", "\n", "r_fms", ",", "r_w_arr", "=", "self", ".", "encoder_k", "(", "r_img", ")", "\n", "if", "isinstance", "(", "r_fms", ",", "list", ")", ":", "\n", "                    ", "r_fms", "[", "0", "]", "=", "r_fms", "[", "0", "]", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                    ", "r_fms", "=", "r_fms", ".", "detach", "(", ")", "\n", "", "", "", "else", ":", "\n", "            ", "r_fms", ",", "r_w_arr", "=", "self", ".", "encoder_q", "(", "r_img", ")", "\n", "\n", "", "return", "[", "l_fms", ",", "l_w_arr", "]", ",", "[", "r_fms", ",", "r_w_arr", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerBestBackbone.__init__": [[27, 65], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "DeepPruner.DeepPrunerBestBackbone._make_layer", "DeepPruner.DeepPrunerBestBackbone._make_layer", "DeepPruner.DeepPrunerBestBackbone._make_layer", "DeepPruner.DeepPrunerBestBackbone._make_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu"], ["\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "hourglass_in_planes", ",", "disparity_sample_number", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConfidenceRangePredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "hourglass_in_planes", "=", "hourglass_in_planes", "\n", "self", ".", "disparity_sample_number", "=", "disparity_sample_number", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "self", ".", "dres0", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "in_planes", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dres1", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "hourglass_in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "\n", "self", ".", "min_disparity_predictor", "=", "nn", ".", "Sequential", "(", "\n", "HWHourglass", "(", "hourglass_in_planes", ",", "batch_norm", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "hourglass_in_planes", ",", "hourglass_in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv3d", "(", "hourglass_in_planes", "*", "2", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "self", ".", "max_disparity_predictor", "=", "nn", ".", "Sequential", "(", "\n", "HWHourglass", "(", "hourglass_in_planes", ",", "batch_norm", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "hourglass_in_planes", ",", "hourglass_in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv3d", "(", "hourglass_in_planes", "*", "2", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerBestBackbone._make_layer": [[67, 86], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.layers.basic_layers.conv_bn", "block", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn"], ["\n", "# batch norm cannot be used here, as disparity map is the input and output", "\n", "self", ".", "min_disparity_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "# batch norm cannot be used here, as disparity map is the input and output", "\n", "self", ".", "max_disparity_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "min_disparity_feature_conv", "=", "conv_bn_relu", "(", "batch_norm", ",", "disparity_sample_number", ",", "disparity_sample_number", ",", "\n", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "max_disparity_feature_conv", "=", "conv_bn_relu", "(", "batch_norm", ",", "disparity_sample_number", ",", "disparity_sample_number", ",", "\n", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "raw_cost", ",", "disparity_sample", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerBestBackbone._forward": [[87, 123], ["DeepPruner.DeepPrunerBestBackbone.firstconv", "DeepPruner.DeepPrunerBestBackbone.layer1", "DeepPruner.DeepPrunerBestBackbone.layer2", "DeepPruner.DeepPrunerBestBackbone.layer3", "DeepPruner.DeepPrunerBestBackbone.layer4", "DeepPruner.DeepPrunerBestBackbone.branch1", "torch.interpolate", "torch.interpolate", "torch.interpolate", "DeepPruner.DeepPrunerBestBackbone.branch2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "DeepPruner.DeepPrunerBestBackbone.branch3", "torch.interpolate", "torch.interpolate", "torch.interpolate", "DeepPruner.DeepPrunerBestBackbone.branch4", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DeepPruner.DeepPrunerBestBackbone.lastconv", "DeepPruner.DeepPrunerBestBackbone.size", "DeepPruner.DeepPrunerBestBackbone.size", "DeepPruner.DeepPrunerBestBackbone.size", "DeepPruner.DeepPrunerBestBackbone.size", "DeepPruner.DeepPrunerBestBackbone.size", "DeepPruner.DeepPrunerBestBackbone.size", "DeepPruner.DeepPrunerBestBackbone.size", "DeepPruner.DeepPrunerBestBackbone.size"], "methods", ["None"], ["# in: [B, in_planes, D, H, W], out: [B, 64, D, H, W]", "\n", "        ", "cost", "=", "self", ".", "dres0", "(", "raw_cost", ")", "\n", "# in: [B, 64, D, H, W], out: [B, hourglass_in_planes, D, H, W]", "\n", "cost", "=", "self", ".", "dres1", "(", "cost", ")", "\n", "\n", "# in: [B, hourglass_in_planes, D, H, W], mid: [B, 1, D, H, W], out: [B, D, H, W]", "\n", "cost_for_min", "=", "self", ".", "min_disparity_predictor", "(", "cost", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "# in: [B, hourglass_in_planes, D, H, W], mid: [B, 1, D, H, W], out: [B, D, H, W]", "\n", "cost_for_max", "=", "self", ".", "max_disparity_predictor", "(", "cost", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "# soft arg-min", "\n", "# in: [B, D, H, W], out: [B, D, H, W]", "\n", "prob_for_min", "=", "F", ".", "softmax", "(", "cost_for_min", ",", "dim", "=", "1", ")", "\n", "# in: [B, D, H, W] * [B, D, H, W], out: [B, 1, H, W]", "\n", "min_disparity", "=", "torch", ".", "sum", "(", "prob_for_min", "*", "disparity_sample", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "# in: [B, 1, H, W], out: [B, 1, H, W]", "\n", "min_disparity", "=", "self", ".", "min_disparity_conv", "(", "min_disparity", ")", "\n", "\n", "# soft arg-min", "\n", "# in: [B, D, H, W], out: [B, D, H, W]", "\n", "prob_for_max", "=", "F", ".", "softmax", "(", "cost_for_max", ",", "dim", "=", "1", ")", "\n", "# in: [B, D, H, W] * [B, D, H, W], out: [B, 1, H, W]", "\n", "max_disparity", "=", "torch", ".", "sum", "(", "prob_for_max", "*", "disparity_sample", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "# in: [B, 1, H, W], out: [B, 1, H, W]", "\n", "max_disparity", "=", "self", ".", "max_disparity_conv", "(", "max_disparity", ")", "\n", "\n", "# in: [B, D, H, W], out: [B, D, H, W]", "\n", "min_disparity_feature", "=", "self", ".", "min_disparity_feature_conv", "(", "cost_for_min", ")", "\n", "# in: [B, D, H, W], out: [B, D, H, W]", "\n", "max_disparity_feature", "=", "self", ".", "max_disparity_feature_conv", "(", "cost_for_max", ")", "\n", "\n", "return", "min_disparity", ",", "max_disparity", ",", "min_disparity_feature", ",", "max_disparity_feature", "\n", "\n", "\n", "", "", "class", "DeepPrunerProcessor", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerBestBackbone.forward": [[124, 134], ["DeepPruner.DeepPrunerBestBackbone._forward", "DeepPruner.DeepPrunerBestBackbone._forward", "len", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone._forward", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone._forward"], []], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone.__init__": [[157, 191], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "DeepPruner.DeepPrunerFastBackbone._make_layer", "DeepPruner.DeepPrunerFastBackbone._make_layer", "DeepPruner.DeepPrunerFastBackbone._make_layer", "DeepPruner.DeepPrunerFastBackbone._make_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu"], ["\n", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "DeepPrunerProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "copy", "(", ")", "\n", "self", ".", "batch_norm", "=", "cfg", ".", "model", ".", "batch_norm", "\n", "\n", "self", ".", "patch_match_disparity_sample_number", "=", "cfg", ".", "model", ".", "cost_processor", ".", "patch_match_disparity_sample_number", "\n", "self", ".", "uniform_disparity_sample_number", "=", "cfg", ".", "model", ".", "cost_processor", ".", "uniform_disparity_sample_number", "\n", "\n", "# setting confidence range predictor", "\n", "self", ".", "confidence_range_predictor_args", "=", "cfg", ".", "model", ".", "cost_processor", ".", "confidence_range_predictor", "\n", "self", ".", "confidence_range_predictor_args", ".", "update", "(", "\n", "# besides the disparity samples generated by PatchMatch, it also includes min, max disparity", "\n", "disparity_sample_number", "=", "self", ".", "patch_match_disparity_sample_number", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", "\n", ")", "\n", "self", ".", "confidence_range_predictor", "=", "ConfidenceRangePredictor", "(", "\n", "**", "self", ".", "confidence_range_predictor_args", "\n", ")", "\n", "\n", "# setting cost aggregator", "\n", "self", ".", "cost_aggregator", "=", "build_cost_aggregator", "(", "cfg", ")", "\n", "# batch norm cannot be used here, as disparity map is the input and output", "\n", "self", ".", "disparity_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "disparity_feature_conv", "=", "conv_bn_relu", "(", "self", ".", "batch_norm", ",", "\n", "in_planes", "=", "self", ".", "uniform_disparity_sample_number", ",", "\n", "out_planes", "=", "self", ".", "uniform_disparity_sample_number", ",", "\n", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "\n", "dilation", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "stage", ",", "left", ",", "right", ",", "disparity_sample", ",", "min_disparity_feature", "=", "None", ",", "max_disparity_feature", "=", "None", ")", ":", "\n", "# [B, 2*C, D, H, W]", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._make_layer": [[193, 212], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.layers.basic_layers.conv_bn", "block", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn"], ["\n", "# [B, 2*C+1, D, H, W]", "\n", "raw_cost", "=", "torch", ".", "cat", "(", "(", "raw_cost", ",", "disparity_sample", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "if", "stage", "==", "'pre'", ":", "# (Pre-PatchMatch) using patch match as sampler,", "\n", "            ", "output", "=", "self", ".", "confidence_range_predictor", "(", "raw_cost", ",", "disparity_sample", ")", "\n", "\n", "", "else", ":", "# 'post', (Post-ConfidenceRangePredictor) using uniform sampler", "\n", "# [B, path_match_disparity_sample_number, H, W] ->", "\n", "# [B, path_match_disparity_sample_number, 1, H, W] ->", "\n", "# [B, path_match_disparity_sample_number, uniform_disparity_sample_number, H, W]", "\n", "            ", "min_disparity_feature", "=", "min_disparity_feature", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "uniform_disparity_sample_number", ",", "-", "1", ",", "-", "1", ")", "\n", "max_disparity_feature", "=", "max_disparity_feature", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "uniform_disparity_sample_number", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "# [B, 2*C+2*path_match_disparity_sample_number+1, uniform_disparity_sample_number, H, W]", "\n", "raw_cost", "=", "torch", ".", "cat", "(", "(", "raw_cost", ",", "min_disparity_feature", ",", "max_disparity_feature", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# the returned cost after cost aggregation is in tuple", "\n", "# [B, uniform_disparity_sample_number, H, W]", "\n", "cost", "=", "self", ".", "cost_aggregator", "(", "raw_cost", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone._forward": [[213, 243], ["DeepPruner.DeepPrunerFastBackbone.firstconv", "DeepPruner.DeepPrunerFastBackbone.layer1", "DeepPruner.DeepPrunerFastBackbone.layer2", "DeepPruner.DeepPrunerFastBackbone.layer3", "DeepPruner.DeepPrunerFastBackbone.layer4", "DeepPruner.DeepPrunerFastBackbone.branch2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "DeepPruner.DeepPrunerFastBackbone.branch3", "torch.interpolate", "torch.interpolate", "torch.interpolate", "DeepPruner.DeepPrunerFastBackbone.branch4", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DeepPruner.DeepPrunerFastBackbone.lastconv", "DeepPruner.DeepPrunerFastBackbone.size", "DeepPruner.DeepPrunerFastBackbone.size", "DeepPruner.DeepPrunerFastBackbone.size", "DeepPruner.DeepPrunerFastBackbone.size", "DeepPruner.DeepPrunerFastBackbone.size", "DeepPruner.DeepPrunerFastBackbone.size"], "methods", ["None"], ["\n", "# soft arg-min", "\n", "# in: [B, D, H, W], out: [B, D, H, W]", "\n", "prob_volume", "=", "F", ".", "softmax", "(", "cost", ",", "dim", "=", "1", ")", "\n", "# in: [B, D, H, W] * [B, D, H, W], out: [B, 1, H, W]", "\n", "disparity", "=", "torch", ".", "sum", "(", "prob_volume", "*", "disparity_sample", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# in: [B, 1, H, W], out: [B, 1, H*2, W*2]", "\n", "disparity", "=", "F", ".", "interpolate", "(", "disparity", "*", "2", ",", "scale_factor", "=", "(", "2", ",", "2", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "# in: [B, D, H*2, W*2], out: [B, D, H*2, W*2]", "\n", "disparity_feature", "=", "F", ".", "interpolate", "(", "cost", ",", "scale_factor", "=", "(", "2", ",", "2", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "# in: [B, 1, H*2, W*2], out: [B, 1, H*2, W*2]", "\n", "disparity", "=", "self", ".", "disparity_conv", "(", "disparity", ")", "\n", "\n", "# in: [B, D, H*2, W*2], out: [B, D, H*2, W*2]", "\n", "disparity_feature", "=", "self", ".", "disparity_feature_conv", "(", "disparity_feature", ")", "\n", "\n", "output", "=", "[", "disparity", ",", "disparity_feature", "]", "\n", "\n", "", "return", "output", "\n", "\n", "\n", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.DeepPruner.DeepPrunerFastBackbone.forward": [[244, 254], ["DeepPruner.DeepPrunerFastBackbone._forward", "DeepPruner.DeepPrunerFastBackbone._forward", "len", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone._forward", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone._forward"], []], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.backbones.build_backbone": [[18, 32], ["cfg.model.backbone.copy", "cfg.model.backbone.copy.pop", "cfg.model.backbone.copy.update"], "function", ["None"], ["def", "build_backbone", "(", "cfg", ")", ":", "\n", "    ", "backbone_type", "=", "cfg", ".", "model", ".", "backbone", ".", "type", "\n", "\n", "assert", "backbone_type", "in", "BACKBONES", ",", "\"model backbone type not found, excepted: {},\"", "\"but got {}\"", ".", "format", "(", "BACKBONES", ".", "keys", ",", "backbone_type", ")", "\n", "\n", "default_args", "=", "cfg", ".", "model", ".", "backbone", ".", "copy", "(", ")", "\n", "default_args", ".", "pop", "(", "'type'", ")", "\n", "default_args", ".", "update", "(", "batch_norm", "=", "cfg", ".", "model", ".", "batch_norm", ")", "\n", "\n", "backbone", "=", "BACKBONES", "[", "backbone_type", "]", "(", "**", "default_args", ")", "\n", "\n", "return", "backbone", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone.__init__": [[31, 54], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "AnyNet.AnyNetBackbone._make_down_blocks", "AnyNet.AnyNetBackbone._make_down_blocks", "AnyNet.AnyNetBackbone._make_up_blocks", "AnyNet.AnyNetBackbone._make_up_blocks", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "dmb.modeling.stereo.layers.basic_layers.bn_relu_conv", "AnyNet.AnyNetBackbone._make_down_blocks"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone._make_down_blocks", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone._make_down_blocks", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone._make_up_blocks", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone._make_up_blocks", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.bn_relu_conv", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone._make_down_blocks"], ["self", ".", "stage", "=", "self", ".", "cfg", ".", "model", ".", "stage", "\n", "\n", "# cost computation parameters, dict", "\n", "self", ".", "max_disp", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "max_disp", "\n", "self", ".", "start_disp", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "start_disp", "\n", "self", ".", "dilation", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "dilation", "\n", "\n", "\n", "# cost aggregation", "\n", "self", ".", "aggregator_type", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_aggregator", ".", "type", "\n", "self", ".", "aggregator", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "st", "in", "self", ".", "stage", ":", "\n", "            ", "self", ".", "aggregator", "[", "st", "]", "=", "AnyNetAggregator", "(", "\n", "in_planes", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_aggregator", ".", "in_planes", "[", "st", "]", ",", "\n", "agg_planes", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_aggregator", ".", "agg_planes", "[", "st", "]", ",", "\n", "num", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_aggregator", ".", "num", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "stage", ",", "left", ",", "right", ",", "disp", "=", "None", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "left", ".", "shape", "\n", "# construct the raw cost volume", "\n", "\n", "end_disp", "=", "self", ".", "start_disp", "[", "stage", "]", "+", "self", ".", "max_disp", "[", "stage", "]", "-", "1", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone._make_down_blocks": [[56, 65], ["blocks.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "blocks.append", "dmb.modeling.stereo.layers.basic_layers.bn_relu_conv"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.bn_relu_conv"], ["# disparity sample number", "\n", "D", "=", "(", "self", ".", "max_disp", "[", "stage", "]", "+", "self", ".", "dilation", "[", "stage", "]", "-", "1", ")", "//", "self", ".", "dilation", "[", "stage", "]", "\n", "\n", "# generate disparity samples, in [B, D, H, W] layout", "\n", "disp_sample", "=", "torch", ".", "linspace", "(", "self", ".", "start_disp", "[", "stage", "]", ",", "end_disp", ",", "D", ")", "\n", "disp_sample", "=", "disp_sample", ".", "view", "(", "1", ",", "D", ",", "1", ",", "1", ")", ".", "expand", "(", "B", ",", "D", ",", "H", ",", "W", ")", ".", "to", "(", "left", ".", "device", ")", ".", "float", "(", ")", "\n", "\n", "# if initial disparity guessed, used for warping", "\n", "if", "disp", "is", "not", "None", ":", "\n", "# up-sample disparity map to the size of left", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone._make_up_blocks": [[66, 74], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "dmb.modeling.stereo.layers.basic_layers.bn_relu_conv", "dmb.modeling.stereo.layers.basic_layers.bn_relu_conv"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.bn_relu_conv", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.bn_relu_conv"], ["            ", "H", ",", "W", "=", "left", ".", "shape", "[", "-", "2", ":", "]", "\n", "scale", "=", "W", "/", "disp", ".", "shape", "[", "-", "1", "]", "\n", "disp", "=", "F", ".", "interpolate", "(", "disp", "*", "scale", ",", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "# shift the disparity sample to be centered at the given disparity map", "\n", "disp_sample", "=", "disp_sample", "+", "disp", "\n", "\n", "# [B, C, D, H, W]", "\n", "", "raw_cost", "=", "fast_dif_fms", "(", "left", ",", "right", ",", "disp_sample", "=", "disp_sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone._forward": [[75, 98], ["AnyNet.AnyNetBackbone.conv_4x", "AnyNet.AnyNetBackbone.conv_8x", "AnyNet.AnyNetBackbone.conv_16x", "torch.interpolate", "torch.interpolate", "torch.interpolate", "AnyNet.AnyNetBackbone.conv_mix_8x", "torch.interpolate", "torch.interpolate", "torch.interpolate", "AnyNet.AnyNetBackbone.conv_mix_4x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["# list [[B, D, H, W]]", "\n", "cost", "=", "self", ".", "aggregator", "[", "stage", "]", "(", "raw_cost", ")", "\n", "\n", "return", "cost", "\n", "\n", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone.forward": [[99, 109], ["AnyNet.AnyNetBackbone._forward", "AnyNet.AnyNetBackbone._forward", "len", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone._forward", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.AnyNet.AnyNetBackbone._forward"], []], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.test_backbones.testBackbones.setUpClass": [[17, 28], ["torch.device", "torch.device", "torch.device", "torch.device", "mmcv.Config.fromfile", "dmb.modeling.stereo.backbones.build_backbone", "cls.backbone.to", "cls.setUpTimeTestingClass"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.backbones.build_backbone", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.test_backbones.testBackbones.setUpTimeTestingClass"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "device", "=", "torch", ".", "device", "(", "'cuda:1'", ")", "\n", "config_path", "=", "'/home/zhixiang/youmin/projects/depth/public/'", "'DenseMatchingBenchmark/configs/AcfNet/scene_flow_uniform.py'", "\n", "cls", ".", "cfg", "=", "Config", ".", "fromfile", "(", "config_path", ")", "\n", "cls", ".", "backbone", "=", "build_backbone", "(", "cls", ".", "cfg", ")", "\n", "cls", ".", "backbone", ".", "to", "(", "cls", ".", "device", ")", "\n", "\n", "cls", ".", "setUpTimeTestingClass", "(", ")", "\n", "cls", ".", "avg_time", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.test_backbones.testBackbones.setUpTimeTestingClass": [[29, 40], ["torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "print", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "setUpTimeTestingClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "iters", "=", "50", "\n", "\n", "h", ",", "w", "=", "384", ",", "1248", "\n", "leftImage", "=", "torch", ".", "rand", "(", "1", ",", "3", ",", "h", ",", "w", ")", ".", "to", "(", "cls", ".", "device", ")", "\n", "rightImage", "=", "torch", ".", "rand", "(", "1", ",", "3", ",", "h", ",", "w", ")", ".", "to", "(", "cls", ".", "device", ")", "\n", "\n", "cls", ".", "backbone_input", "=", "[", "leftImage", ",", "rightImage", "]", "\n", "\n", "print", "(", "'Input preparation successful!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.test_backbones.testBackbones.timeTemplate": [[41, 64], ["isinstance", "time.time", "range", "time.time", "print", "isinstance", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "module.eval", "module.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "len", "module", "len", "module"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.train"], ["", "def", "timeTemplate", "(", "self", ",", "module", ",", "module_name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "device", "(", "self", ".", "device", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "module", ".", "eval", "(", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "iters", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "len", "(", "args", ")", ">", "0", ":", "\n", "                    ", "module", "(", "*", "args", ")", "\n", "", "if", "len", "(", "kwargs", ")", ">", "0", ":", "\n", "                    ", "module", "(", "**", "kwargs", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", "self", ".", "device", ")", "\n", "", "", "end_time", "=", "time", ".", "time", "(", ")", "\n", "avg_time", "=", "(", "end_time", "-", "start_time", ")", "/", "self", ".", "iters", "\n", "print", "(", "'{} reference forward once takes {:.4f}ms, i.e. {:.2f}fps'", ".", "format", "(", "module_name", ",", "avg_time", "*", "1000", ",", "(", "1", "/", "avg_time", ")", ")", ")", "\n", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "module", ".", "train", "(", ")", "\n", "\n", "", "self", ".", "avg_time", "[", "module_name", "]", "=", "avg_time", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.test_backbones.testBackbones.test_0_OutputModel": [[66, 68], ["print"], "methods", ["None"], ["", "def", "test_0_OutputModel", "(", "self", ")", ":", "\n", "        ", "print", "(", "self", ".", "backbone", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.test_backbones.testBackbones.test_1_ModelTime": [[70, 72], ["test_backbones.testBackbones.timeTemplate"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.backbones.test_backbones.testBackbones.timeTemplate"], ["", "def", "test_1_ModelTime", "(", "self", ")", ":", "\n", "        ", "self", ".", "timeTemplate", "(", "self", ".", "backbone", ",", "'Model'", ",", "*", "self", ".", "backbone_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_refinement.StereoNet.StereoNetRefinement.__init__": [[28, 37], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "utils.edge_aware.EdgeAwareRefinement", "range"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["        ", "super", "(", "StereoNetAggregator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_disp", "=", "max_disp", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "num", "=", "num", "\n", "\n", "self", ".", "classify", "=", "nn", ".", "ModuleList", "(", "[", "\n", "conv3d_bn_relu", "(", "self", ".", "batch_norm", ",", "in_planes", ",", "32", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", "for", "_", "in", "range", "(", "self", ".", "num", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_refinement.StereoNet.StereoNetRefinement.forward": [[39, 62], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "refine_disps.reverse", "refine_disps.append", "block"], "methods", ["None"], ["self", ".", "lastconv", "=", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "raw_cost", ")", ":", "\n", "# default down-sample to 1/8 resolution, it also can be 1/16", "\n", "# raw_cost: (BatchSize, Channels, MaxDisparity/8, Height/8, Width/8)", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "num", ")", ":", "\n", "            ", "raw_cost", "=", "self", ".", "classify", "[", "i", "]", "(", "raw_cost", ")", "\n", "\n", "# cost: (BatchSize, 1, MaxDisparity/8, Height/8, Width/8)", "\n", "", "cost", "=", "self", ".", "lastconv", "(", "raw_cost", ")", "\n", "\n", "# (BatchSize, MaxDisparity/8, Height/8, Width/8)", "\n", "cost", "=", "torch", ".", "squeeze", "(", "cost", ",", "1", ")", "\n", "\n", "\n", "return", "[", "cost", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_refinement.builder.build_disp_refinement": [[12, 24], ["cfg.model.disp_refinement.copy", "cfg.model.disp_refinement.copy.pop", "cfg.model.disp_refinement.copy.update", "REFINEMENTS.keys"], "function", ["None"], ["class", "CostProcessor", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "# Concatenate left and right feature to form cost volume", "\n", "", "", "class", "CatCostProcessor", "(", "CostProcessor", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "CatCostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_refinement.DeepPruner.RefinementHeand.__init__": [[22, 37], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu"], ["\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "hourglass_in_planes", ",", "disparity_sample_number", ",", "batch_norm", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_refinement.DeepPruner.RefinementHeand.forward": [[38, 45], ["DeepPruner.RefinementHeand.classify", "torch.relu", "torch.relu", "torch.relu", "DeepPruner.RefinementHeand.conv"], "methods", ["None"], ["        ", "super", "(", "ConfidenceRangePredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "hourglass_in_planes", "=", "hourglass_in_planes", "\n", "self", ".", "disparity_sample_number", "=", "disparity_sample_number", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "self", ".", "dres0", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "in_planes", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_refinement.DeepPruner.DeepPrunerRefinement.__init__": [[65, 74], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "DeepPruner.RefinementHeand", "range"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["nn", ".", "Conv3d", "(", "hourglass_in_planes", "*", "2", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "# batch norm cannot be used here, as disparity map is the input and output", "\n", "self", ".", "min_disparity_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "# batch norm cannot be used here, as disparity map is the input and output", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_refinement.DeepPruner.DeepPrunerRefinement.forward": [[77, 95], ["range", "disps.reverse", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.interpolate", "torch.interpolate", "torch.interpolate", "disps.append"], "methods", ["None"], ["nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "min_disparity_feature_conv", "=", "conv_bn_relu", "(", "batch_norm", ",", "disparity_sample_number", ",", "disparity_sample_number", ",", "\n", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "max_disparity_feature_conv", "=", "conv_bn_relu", "(", "batch_norm", ",", "disparity_sample_number", ",", "disparity_sample_number", ",", "\n", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "raw_cost", ",", "disparity_sample", ")", ":", "\n", "# in: [B, in_planes, D, H, W], out: [B, 64, D, H, W]", "\n", "        ", "cost", "=", "self", ".", "dres0", "(", "raw_cost", ")", "\n", "# in: [B, 64, D, H, W], out: [B, hourglass_in_planes, D, H, W]", "\n", "cost", "=", "self", ".", "dres1", "(", "cost", ")", "\n", "\n", "# in: [B, hourglass_in_planes, D, H, W], mid: [B, 1, D, H, W], out: [B, D, H, W]", "\n", "cost_for_min", "=", "self", ".", "min_disparity_predictor", "(", "cost", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "# in: [B, hourglass_in_planes, D, H, W], mid: [B, 1, D, H, W], out: [B, D, H, W]", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_refinement.AnyNet.AnyNetRefinement.__init__": [[30, 55], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "dmb.ops.GateRecurrent2dnoind", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "dmb.modeling.stereo.layers.basic_layers.conv_bn_relu", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.basic_layers.conv_bn_relu"], ["\n", "self", ".", "stage", "=", "self", ".", "cfg", ".", "model", ".", "stage", "\n", "\n", "# cost computation parameters, dict", "\n", "self", ".", "max_disp", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "max_disp", "\n", "self", ".", "start_disp", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "start_disp", "\n", "self", ".", "dilation", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "dilation", "\n", "\n", "\n", "# cost aggregation", "\n", "self", ".", "aggregator_type", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_aggregator", ".", "type", "\n", "self", ".", "aggregator", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "st", "in", "self", ".", "stage", ":", "\n", "            ", "self", ".", "aggregator", "[", "st", "]", "=", "AnyNetAggregator", "(", "\n", "in_planes", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_aggregator", ".", "in_planes", "[", "st", "]", ",", "\n", "agg_planes", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_aggregator", ".", "agg_planes", "[", "st", "]", ",", "\n", "num", "=", "self", ".", "cfg", ".", "model", ".", "cost_processor", ".", "cost_aggregator", ".", "num", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "stage", ",", "left", ",", "right", ",", "disp", "=", "None", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "left", ".", "shape", "\n", "# construct the raw cost volume", "\n", "\n", "end_disp", "=", "self", ".", "start_disp", "[", "stage", "]", "+", "self", ".", "max_disp", "[", "stage", "]", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_refinement.AnyNet.AnyNetRefinement.forward": [[57, 97], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "AnyNet.AnyNetRefinement.img_conv", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "AnyNet.AnyNetRefinement.disp_conv", "AnyNet.AnyNetRefinement.spn", "AnyNet.AnyNetRefinement.classify", "torch.relu", "torch.relu", "torch.relu", "disps.append", "disps.reverse", "torch.div.abs", "torch.div.abs", "torch.div.abs", "torch.div.abs", "torch.div.abs", "torch.div.abs", "torch.div.abs", "torch.div.abs", "torch.div.abs"], "methods", ["None"], ["D", "=", "(", "self", ".", "max_disp", "[", "stage", "]", "+", "self", ".", "dilation", "[", "stage", "]", "-", "1", ")", "//", "self", ".", "dilation", "[", "stage", "]", "\n", "\n", "# generate disparity samples, in [B, D, H, W] layout", "\n", "disp_sample", "=", "torch", ".", "linspace", "(", "self", ".", "start_disp", "[", "stage", "]", ",", "end_disp", ",", "D", ")", "\n", "disp_sample", "=", "disp_sample", ".", "view", "(", "1", ",", "D", ",", "1", ",", "1", ")", ".", "expand", "(", "B", ",", "D", ",", "H", ",", "W", ")", ".", "to", "(", "left", ".", "device", ")", ".", "float", "(", ")", "\n", "\n", "# if initial disparity guessed, used for warping", "\n", "if", "disp", "is", "not", "None", ":", "\n", "# up-sample disparity map to the size of left", "\n", "            ", "H", ",", "W", "=", "left", ".", "shape", "[", "-", "2", ":", "]", "\n", "scale", "=", "W", "/", "disp", ".", "shape", "[", "-", "1", "]", "\n", "disp", "=", "F", ".", "interpolate", "(", "disp", "*", "scale", ",", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "# shift the disparity sample to be centered at the given disparity map", "\n", "disp_sample", "=", "disp_sample", "+", "disp", "\n", "\n", "# [B, C, D, H, W]", "\n", "", "raw_cost", "=", "fast_dif_fms", "(", "left", ",", "right", ",", "disp_sample", "=", "disp_sample", ")", "\n", "\n", "# list [[B, D, H, W]]", "\n", "cost", "=", "self", ".", "aggregator", "[", "stage", "]", "(", "raw_cost", ")", "\n", "\n", "return", "cost", "\n", "\n", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_samplers.builder.build_disp_sampler": [[8, 20], ["cfg.model.disp_sampler.copy", "cfg.model.disp_sampler.copy.pop", "cfg.model.disp_sampler.copy.update", "SAMPLER.keys"], "function", ["None"], ["from", ".", "DeepPruner", "import", "DeepPrunerProcessor", "\n", "from", ".", "AnyNet", "import", "AnyNetProcessor", "\n", "\n", "\n", "class", "CostProcessor", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "# Concatenate left and right feature to form cost volume", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_samplers.DeepPruner.DisparitySampleRangeHead.__init__": [[36, 39], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "hourglass_in_planes", ",", "disparity_sample_number", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConfidenceRangePredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "in_planes", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_samplers.DeepPruner.DisparitySampleRangeHead.forward": [[40, 69], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["self", ".", "hourglass_in_planes", "=", "hourglass_in_planes", "\n", "self", ".", "disparity_sample_number", "=", "disparity_sample_number", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "self", ".", "dres0", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "in_planes", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dres1", "=", "nn", ".", "Sequential", "(", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "32", ",", "hourglass_in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "\n", "self", ".", "min_disparity_predictor", "=", "nn", ".", "Sequential", "(", "\n", "HWHourglass", "(", "hourglass_in_planes", ",", "batch_norm", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "hourglass_in_planes", ",", "hourglass_in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv3d", "(", "hourglass_in_planes", "*", "2", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "self", ".", "max_disparity_predictor", "=", "nn", ".", "Sequential", "(", "\n", "HWHourglass", "(", "hourglass_in_planes", ",", "batch_norm", ")", ",", "\n", "conv3d_bn_relu", "(", "batch_norm", ",", "hourglass_in_planes", ",", "hourglass_in_planes", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv3d", "(", "hourglass_in_planes", "*", "2", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "# batch norm cannot be used here, as disparity map is the input and output", "\n", "self", ".", "min_disparity_conv", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_samplers.DeepPruner.UniformSampler.__init__": [[95, 98], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["# in: [B, hourglass_in_planes, D, H, W], mid: [B, 1, D, H, W], out: [B, D, H, W]", "\n", "cost_for_max", "=", "self", ".", "max_disparity_predictor", "(", "cost", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "# soft arg-min", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_samplers.DeepPruner.UniformSampler.forward": [[99, 116], ["torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange().float.view", "torch.arange().float.view", "torch.arange().float.view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["# in: [B, D, H, W], out: [B, D, H, W]", "\n", "prob_for_min", "=", "F", ".", "softmax", "(", "cost_for_min", ",", "dim", "=", "1", ")", "\n", "# in: [B, D, H, W] * [B, D, H, W], out: [B, 1, H, W]", "\n", "min_disparity", "=", "torch", ".", "sum", "(", "prob_for_min", "*", "disparity_sample", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "# in: [B, 1, H, W], out: [B, 1, H, W]", "\n", "min_disparity", "=", "self", ".", "min_disparity_conv", "(", "min_disparity", ")", "\n", "\n", "# soft arg-min", "\n", "# in: [B, D, H, W], out: [B, D, H, W]", "\n", "prob_for_max", "=", "F", ".", "softmax", "(", "cost_for_max", ",", "dim", "=", "1", ")", "\n", "# in: [B, D, H, W] * [B, D, H, W], out: [B, 1, H, W]", "\n", "max_disparity", "=", "torch", ".", "sum", "(", "prob_for_max", "*", "disparity_sample", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "# in: [B, 1, H, W], out: [B, 1, H, W]", "\n", "max_disparity", "=", "self", ".", "max_disparity_conv", "(", "max_disparity", ")", "\n", "\n", "# in: [B, D, H, W], out: [B, D, H, W]", "\n", "min_disparity_feature", "=", "self", ".", "min_disparity_feature_conv", "(", "cost_for_min", ")", "\n", "# in: [B, D, H, W], out: [B, D, H, W]", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_samplers.DeepPruner.DeepPrunerSampler.__init__": [[152, 175], ["torch.Module.__init__", "DeepPruner.DisparitySampleRangeHead", "utils.patch_match.PatchMatch", "DeepPruner.UniformSampler"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["\n", "\n", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "DeepPrunerProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "copy", "(", ")", "\n", "self", ".", "batch_norm", "=", "cfg", ".", "model", ".", "batch_norm", "\n", "\n", "self", ".", "patch_match_disparity_sample_number", "=", "cfg", ".", "model", ".", "cost_processor", ".", "patch_match_disparity_sample_number", "\n", "self", ".", "uniform_disparity_sample_number", "=", "cfg", ".", "model", ".", "cost_processor", ".", "uniform_disparity_sample_number", "\n", "\n", "# setting confidence range predictor", "\n", "self", ".", "confidence_range_predictor_args", "=", "cfg", ".", "model", ".", "cost_processor", ".", "confidence_range_predictor", "\n", "self", ".", "confidence_range_predictor_args", ".", "update", "(", "\n", "# besides the disparity samples generated by PatchMatch, it also includes min, max disparity", "\n", "disparity_sample_number", "=", "self", ".", "patch_match_disparity_sample_number", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", "\n", ")", "\n", "self", ".", "confidence_range_predictor", "=", "ConfidenceRangePredictor", "(", "\n", "**", "self", ".", "confidence_range_predictor_args", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.disp_samplers.DeepPruner.DeepPrunerSampler.forward": [[176, 192], ["DeepPruner.DeepPrunerSampler.disparity_sample_range", "DeepPruner.DeepPrunerSampler.patch_match", "DeepPruner.DeepPrunerSampler.disparity_sample_range", "DeepPruner.DeepPrunerSampler.uniform_sampler"], "methods", ["None"], ["\n", "# setting cost aggregator", "\n", "self", ".", "cost_aggregator", "=", "build_cost_aggregator", "(", "cfg", ")", "\n", "# batch norm cannot be used here, as disparity map is the input and output", "\n", "self", ".", "disparity_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "disparity_feature_conv", "=", "conv_bn_relu", "(", "self", ".", "batch_norm", ",", "\n", "in_planes", "=", "self", ".", "uniform_disparity_sample_number", ",", "\n", "out_planes", "=", "self", ".", "uniform_disparity_sample_number", ",", "\n", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "\n", "dilation", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "stage", ",", "left", ",", "right", ",", "disparity_sample", ",", "min_disparity_feature", "=", "None", ",", "max_disparity_feature", "=", "None", ")", ":", "\n", "# [B, 2*C, D, H, W]", "\n", "        ", "raw_cost", "=", "fast_cat_fms", "(", "left", ",", "right", ",", "disp_sample", "=", "disparity_sample", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.gerf_loss.DispGERFLoss.__init__": [[26, 37], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_disp", ",", "start_disp", "=", "0", ",", "weights", "=", "None", ",", "sparse", "=", "False", ")", ":", "\n", "        ", "self", ".", "max_disp", "=", "max_disp", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "start_disp", "=", "start_disp", "\n", "self", ".", "sparse", "=", "sparse", "\n", "if", "sparse", ":", "\n", "# sparse disparity ==> max_pooling", "\n", "            ", "self", ".", "scale_func", "=", "F", ".", "adaptive_max_pool2d", "\n", "", "else", ":", "\n", "# dense disparity ==> avg_pooling", "\n", "            ", "self", ".", "scale_func", "=", "F", ".", "adaptive_avg_pool2d", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.gerf_loss.DispGERFLoss.loss_per_level": [[38, 65], ["mask.float().sum", "gerf_loss.DispGERFLoss.scale_func", "mask.sum", "print", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mask.float", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "mask.float"], "methods", ["None"], ["", "", "def", "loss_per_level", "(", "self", ",", "estDisp", ",", "gtDisp", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "estDisp", ".", "shape", "\n", "scaled_gtDisp", "=", "gtDisp", "\n", "scale", "=", "1.0", "\n", "if", "gtDisp", ".", "shape", "[", "-", "2", "]", "!=", "H", "or", "gtDisp", ".", "shape", "[", "-", "1", "]", "!=", "W", ":", "\n", "# compute scale per level and scale gtDisp", "\n", "            ", "scale", "=", "gtDisp", ".", "shape", "[", "-", "1", "]", "/", "(", "W", "*", "1.0", ")", "\n", "scaled_gtDisp", "=", "gtDisp", "/", "scale", "\n", "scaled_gtDisp", "=", "self", ".", "scale_func", "(", "scaled_gtDisp", ",", "(", "H", ",", "W", ")", ")", "\n", "\n", "# mask for valid disparity", "\n", "# (start disparity, max disparity / scale)", "\n", "# Attention: the invalid disparity of KITTI is set as 0, be sure to mask it out", "\n", "", "mask", "=", "(", "scaled_gtDisp", ">", "self", ".", "start_disp", ")", "&", "(", "scaled_gtDisp", "<", "(", "self", ".", "max_disp", "/", "scale", ")", ")", "\n", "if", "mask", ".", "sum", "(", ")", "<", "1.0", ":", "\n", "            ", "print", "(", "'GERF loss: there is no point\\'s disparity is in ({},{})!'", ".", "format", "(", "self", ".", "start_disp", ",", "\n", "self", ".", "max_disp", "/", "scale", ")", ")", "\n", "\n", "# GERF loss", "\n", "# sqrt([(GT - EST)^2 + 4]) / 2 -1", "\n", "", "valid_pixel_number", "=", "mask", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "if", "valid_pixel_number", "<", "1.0", ":", "\n", "            ", "valid_pixel_number", "=", "1.0", "\n", "", "loss", "=", "torch", ".", "sum", "(", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "scaled_gtDisp", "-", "estDisp", ",", "2", ")", "\n", "*", "mask", ".", "float", "(", ")", "+", "4", ")", "/", "2", "-", "1", ")", "/", "valid_pixel_number", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.gerf_loss.DispGERFLoss.__call__": [[66, 87], ["dict", "enumerate", "isinstance", "loss_all_level.append", "len", "gerf_loss.DispGERFLoss.loss_per_level"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.conf_nll_loss.ConfidenceNllLoss.loss_per_level"], ["", "def", "__call__", "(", "self", ",", "estDisp", ",", "gtDisp", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "estDisp", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "estDisp", "=", "[", "estDisp", "]", "\n", "\n", "", "if", "self", ".", "weights", "is", "None", ":", "\n", "            ", "self", ".", "weights", "=", "[", "1.0", "]", "*", "len", "(", "estDisp", ")", "\n", "\n", "# compute loss for per level", "\n", "", "loss_all_level", "=", "[", "]", "\n", "for", "est_disp_per_lvl", "in", "estDisp", ":", "\n", "            ", "loss_all_level", ".", "append", "(", "\n", "self", ".", "loss_per_level", "(", "est_disp_per_lvl", ",", "gtDisp", ")", "\n", ")", "\n", "\n", "# re-weight loss per level", "\n", "", "weighted_loss_all_level", "=", "dict", "(", ")", "\n", "for", "i", ",", "loss_per_level", "in", "enumerate", "(", "loss_all_level", ")", ":", "\n", "            ", "name", "=", "\"gerf_loss_lvl{}\"", ".", "format", "(", "i", ")", "\n", "weighted_loss_all_level", "[", "name", "]", "=", "self", ".", "weights", "[", "i", "]", "*", "loss_per_level", "\n", "\n", "", "return", "weighted_loss_all_level", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.gerf_loss.DispGERFLoss.__repr__": [[88, 96], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "'{}\\n'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Max Disparity: {}\\n'", ".", "format", "(", "self", ".", "max_disp", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Start disparity: {}\\n'", ".", "format", "(", "self", ".", "start_disp", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Loss weight: {}\\n'", ".", "format", "(", "self", ".", "weights", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Disparity is sparse: {}\\n'", ".", "format", "(", "self", ".", "sparse", ")", "\n", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.gerf_loss.DispGERFLoss.name": [[97, 100], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'GERFLoss'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.stereo_focal_loss.StereoFocalLoss.__init__": [[43, 62], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "max_disp", ",", "start_disp", "=", "0", ",", "\n", "dilation", "=", "1", ",", "weights", "=", "None", ",", "\n", "focal_coefficient", "=", "0.0", ",", "\n", "sparse", "=", "False", "\n", ")", ":", "\n", "        ", "self", ".", "max_disp", "=", "max_disp", "\n", "self", ".", "start_disp", "=", "start_disp", "\n", "self", ".", "end_disp", "=", "self", ".", "max_disp", "+", "self", ".", "start_disp", "-", "1", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "focal_coefficient", "=", "focal_coefficient", "\n", "self", ".", "sparse", "=", "sparse", "\n", "if", "sparse", ":", "\n", "# sparse disparity ==> max_pooling", "\n", "            ", "self", ".", "scale_func", "=", "F", ".", "adaptive_max_pool2d", "\n", "", "else", ":", "\n", "# dense disparity ==> avg_pooling", "\n", "            ", "self", ".", "scale_func", "=", "F", ".", "adaptive_avg_pool2d", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.stereo_focal_loss.StereoFocalLoss.loss_per_level": [[63, 102], ["gtDisp.clone", "mask.detach_().type_as.detach_().type_as.detach_().type_as", "mask.detach_().type_as.detach_().type_as.float().sum", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "stereo_focal_loss.StereoFocalLoss.scale_func", "int", "mask.detach_().type_as.detach_().type_as.sum", "print", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "dmb.modeling.stereo.losses.utils.LaplaceDisp2Prob().getProb", "gtDisp.clone", "mask.detach_().type_as.detach_().type_as.detach_", "mask.detach_().type_as.detach_().type_as.float", "dmb.modeling.stereo.losses.utils.LaplaceDisp2Prob", "int", "mask.detach_().type_as.detach_().type_as.float"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.disp2prob.OneHotDisp2Prob.getProb"], ["", "", "def", "loss_per_level", "(", "self", ",", "estCost", ",", "gtDisp", ",", "variance", ",", "dilation", ",", "disp_sample", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "estCost", ".", "shape", "\n", "scaled_gtDisp", "=", "gtDisp", ".", "clone", "(", ")", "\n", "scale", "=", "1.0", "\n", "if", "gtDisp", ".", "shape", "[", "-", "2", "]", "!=", "H", "or", "gtDisp", ".", "shape", "[", "-", "1", "]", "!=", "W", ":", "\n", "# compute scale factor for per level and scale gtDisp", "\n", "            ", "scale", "=", "gtDisp", ".", "shape", "[", "-", "1", "]", "/", "(", "W", "*", "1.0", ")", "\n", "scaled_gtDisp", "=", "gtDisp", ".", "clone", "(", ")", "/", "scale", "\n", "\n", "scaled_gtDisp", "=", "self", ".", "scale_func", "(", "scaled_gtDisp", ",", "(", "H", ",", "W", ")", ")", "\n", "\n", "# mask for valid disparity", "\n", "# (start_disp, max disparity / scale)", "\n", "# Attention: the invalid disparity of KITTI is set as 0, be sure to mask it out", "\n", "", "lower_bound", "=", "self", ".", "start_disp", "\n", "upper_bound", "=", "lower_bound", "+", "int", "(", "self", ".", "max_disp", "/", "scale", ")", "\n", "mask", "=", "(", "scaled_gtDisp", ">", "lower_bound", ")", "&", "(", "scaled_gtDisp", "<", "upper_bound", ")", "\n", "mask", "=", "mask", ".", "detach_", "(", ")", ".", "type_as", "(", "scaled_gtDisp", ")", "\n", "if", "mask", ".", "sum", "(", ")", "<", "1.0", ":", "\n", "            ", "print", "(", "'Stereo focal loss: there is no point\\'s '", "\n", "'disparity is within [{},{})!'", ".", "format", "(", "lower_bound", ",", "upper_bound", ")", ")", "\n", "scaled_gtProb", "=", "torch", ".", "zeros_like", "(", "estCost", ")", "# let this sample have loss with 0", "\n", "", "else", ":", "\n", "# transfer disparity map to probability map", "\n", "            ", "mask_scaled_gtDisp", "=", "scaled_gtDisp", "*", "mask", "\n", "scaled_gtProb", "=", "LaplaceDisp2Prob", "(", "\n", "mask_scaled_gtDisp", ",", "max_disp", "=", "int", "(", "self", ".", "max_disp", "/", "scale", ")", ",", "variance", "=", "variance", ",", "\n", "start_disp", "=", "self", ".", "start_disp", ",", "dilation", "=", "dilation", ",", "disp_sample", "=", "disp_sample", "\n", ")", ".", "getProb", "(", ")", "\n", "\n", "# stereo focal loss", "\n", "", "valid_pixel_number", "=", "mask", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "if", "valid_pixel_number", "<", "1.0", ":", "\n", "            ", "valid_pixel_number", "=", "1.0", "\n", "", "estLogProb", "=", "F", ".", "log_softmax", "(", "estCost", ",", "dim", "=", "1", ")", "\n", "weight", "=", "(", "1.0", "-", "scaled_gtProb", ")", ".", "pow", "(", "-", "self", ".", "focal_coefficient", ")", ".", "type_as", "(", "scaled_gtProb", ")", "\n", "loss", "=", "-", "(", "(", "scaled_gtProb", "*", "estLogProb", ")", "*", "weight", "*", "mask", ".", "float", "(", ")", ")", ".", "sum", "(", ")", "/", "valid_pixel_number", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.stereo_focal_loss.StereoFocalLoss.__call__": [[103, 139], ["zip", "dict", "enumerate", "isinstance", "isinstance", "isinstance", "isinstance", "loss_all_level.append", "len", "len", "len", "len", "isinstance", "stereo_focal_loss.StereoFocalLoss.loss_per_level", "len"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.conf_nll_loss.ConfidenceNllLoss.loss_per_level"], ["", "def", "__call__", "(", "self", ",", "estCost", ",", "gtDisp", ",", "variance", ",", "disp_sample", "=", "None", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "estCost", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "estCost", "=", "[", "estCost", "]", "\n", "\n", "", "if", "self", ".", "weights", "is", "None", ":", "\n", "            ", "self", ".", "weights", "=", "1.0", "\n", "\n", "", "if", "not", "isinstance", "(", "self", ".", "weights", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "self", ".", "weights", "=", "[", "self", ".", "weights", "]", "*", "len", "(", "estCost", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "self", ".", "dilation", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "self", ".", "dilation", "=", "[", "self", ".", "dilation", "]", "*", "len", "(", "estCost", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "variance", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "variance", "=", "[", "variance", "]", "*", "len", "(", "estCost", ")", "\n", "\n", "", "if", "disp_sample", "is", "None", ":", "\n", "            ", "disp_sample", "=", "[", "disp_sample", "]", "*", "len", "(", "estCost", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "isinstance", "(", "disp_sample", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "# Use same disparity samples for each estimated cost volume", "\n", "                ", "disp_sample", "=", "[", "disp_sample", "]", "*", "len", "(", "estCost", ")", "\n", "\n", "# compute loss for per level", "\n", "", "", "loss_all_level", "=", "[", "]", "\n", "for", "est_cost_per_lvl", ",", "var", ",", "dt", ",", "ds", "in", "zip", "(", "estCost", ",", "variance", ",", "self", ".", "dilation", ",", "disp_sample", ")", ":", "\n", "            ", "loss_all_level", ".", "append", "(", "\n", "self", ".", "loss_per_level", "(", "est_cost_per_lvl", ",", "gtDisp", ",", "var", ",", "dt", ",", "ds", ")", ")", "\n", "\n", "# re-weight loss per level", "\n", "", "weighted_loss_all_level", "=", "dict", "(", ")", "\n", "for", "i", ",", "loss_per_level", "in", "enumerate", "(", "loss_all_level", ")", ":", "\n", "            ", "name", "=", "\"stereo_focal_loss_lvl{}\"", ".", "format", "(", "i", ")", "\n", "weighted_loss_all_level", "[", "name", "]", "=", "self", ".", "weights", "[", "i", "]", "*", "loss_per_level", "\n", "\n", "", "return", "weighted_loss_all_level", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.stereo_focal_loss.StereoFocalLoss.__repr__": [[140, 150], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "'{}\\n'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Max Disparity: {}\\n'", ".", "format", "(", "self", ".", "max_disp", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Start disparity: {}\\n'", ".", "format", "(", "self", ".", "start_disp", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Dilation rate: {}\\n'", ".", "format", "(", "self", ".", "dilation", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Loss weight: {}\\n'", ".", "format", "(", "self", ".", "weights", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Focal coefficient: {}\\n'", ".", "format", "(", "self", ".", "focal_coefficient", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Disparity is sparse: {}\\n'", ".", "format", "(", "self", ".", "sparse", ")", "\n", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.stereo_focal_loss.StereoFocalLoss.name": [[151, 154], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'StereoFocalLoss'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.relative_loss.RelativeLoss.__init__": [[26, 37], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_disp", ",", "start_disp", "=", "0", ",", "weights", "=", "None", ",", "sparse", "=", "False", ")", ":", "\n", "        ", "self", ".", "max_disp", "=", "max_disp", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "start_disp", "=", "start_disp", "\n", "self", ".", "sparse", "=", "sparse", "\n", "if", "sparse", ":", "\n", "# sparse disparity ==> max_pooling", "\n", "            ", "self", ".", "scale_func", "=", "F", ".", "adaptive_max_pool2d", "\n", "", "else", ":", "\n", "# dense disparity ==> avg_pooling", "\n", "            ", "self", ".", "scale_func", "=", "F", ".", "adaptive_avg_pool2d", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.relative_loss.RelativeLoss.loss_per_level": [[38, 75], ["mask.float().sum", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "relative_loss.RelativeLoss.scale_func", "mask.sum", "print", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.soft_margin_loss", "torch.soft_margin_loss", "torch.soft_margin_loss", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "mask.float", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "mask.float"], "methods", ["None"], ["", "", "def", "loss_per_level", "(", "self", ",", "estDisp", ",", "gtDisp", ",", "label", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "estDisp", ".", "shape", "\n", "scaled_gtDisp", "=", "gtDisp", "\n", "scale", "=", "1.0", "\n", "if", "gtDisp", ".", "shape", "[", "-", "2", "]", "!=", "H", "or", "gtDisp", ".", "shape", "[", "-", "1", "]", "!=", "W", ":", "\n", "# compute scale per level and scale gtDisp", "\n", "            ", "scale", "=", "gtDisp", ".", "shape", "[", "-", "1", "]", "/", "(", "W", "*", "1.0", ")", "\n", "scaled_gtDisp", "=", "gtDisp", "/", "scale", "\n", "scaled_gtDisp", "=", "self", ".", "scale_func", "(", "scaled_gtDisp", ",", "(", "H", ",", "W", ")", ")", "\n", "\n", "# mask for valid disparity", "\n", "# (start disparity, max disparity / scale)", "\n", "# Attention: the invalid disparity of KITTI is set as 0, be sure to mask it out", "\n", "", "mask", "=", "(", "scaled_gtDisp", ">", "self", ".", "start_disp", ")", "&", "(", "scaled_gtDisp", "<", "(", "self", ".", "max_disp", "/", "scale", ")", ")", "\n", "if", "mask", ".", "sum", "(", ")", "<", "1.0", ":", "\n", "            ", "print", "(", "'Relative loss: there is no point\\'s disparity is in ({},{})!'", ".", "format", "(", "self", ".", "start_disp", ",", "\n", "self", ".", "max_disp", "/", "scale", ")", ")", "\n", "loss", "=", "(", "torch", ".", "abs", "(", "estDisp", "-", "scaled_gtDisp", ")", "*", "mask", ".", "float", "(", ")", ")", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n", "# relative loss", "\n", "", "valid_pixel_number", "=", "mask", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "diff", "=", "scaled_gtDisp", "[", "mask", "]", "-", "estDisp", "[", "mask", "]", "\n", "label", "=", "label", "[", "mask", "]", "\n", "# some value which is over large for torch.exp() is not suitable for soft margin loss", "\n", "# get absolute value great than 66", "\n", "over_large_mask", "=", "torch", ".", "gt", "(", "torch", ".", "abs", "(", "diff", ")", ",", "66", ")", "\n", "over_large_diff", "=", "diff", "[", "over_large_mask", "]", "\n", "# get absolute value smaller than 66", "\n", "proper_mask", "=", "torch", ".", "le", "(", "torch", ".", "abs", "(", "diff", ")", ",", "66", ")", "\n", "proper_diff", "=", "diff", "[", "proper_mask", "]", "\n", "# generate lable for soft margin loss", "\n", "label", "=", "label", "[", "proper_mask", "]", "\n", "loss", "=", "F", ".", "soft_margin_loss", "(", "proper_diff", ",", "label", ",", "reduction", "=", "'sum'", ")", "+", "torch", ".", "abs", "(", "over_large_diff", ")", ".", "sum", "(", ")", "\n", "loss", "=", "loss", "/", "valid_pixel_number", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.relative_loss.RelativeLoss.__call__": [[76, 100], ["zip", "dict", "enumerate", "isinstance", "isinstance", "loss_all_level.append", "len", "len", "relative_loss.RelativeLoss.loss_per_level"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.conf_nll_loss.ConfidenceNllLoss.loss_per_level"], ["", "def", "__call__", "(", "self", ",", "estDisp", ",", "gtDisp", ",", "label", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "estDisp", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "estDisp", "=", "[", "estDisp", "]", "\n", "\n", "", "if", "self", ".", "weights", "is", "None", ":", "\n", "            ", "self", ".", "weights", "=", "[", "1.0", "]", "*", "len", "(", "estDisp", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "label", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "label", "=", "[", "label", "]", "*", "len", "(", "estDisp", ")", "\n", "\n", "# compute loss for per level", "\n", "", "loss_all_level", "=", "[", "]", "\n", "for", "est_disp_per_lvl", ",", "label_per_lvl", "in", "zip", "(", "estDisp", ",", "label", ")", ":", "\n", "            ", "loss_all_level", ".", "append", "(", "\n", "self", ".", "loss_per_level", "(", "est_disp_per_lvl", ",", "gtDisp", ",", "label_per_lvl", ")", "\n", ")", "\n", "\n", "# re-weight loss per level", "\n", "", "weighted_loss_all_level", "=", "dict", "(", ")", "\n", "for", "i", ",", "loss_per_level", "in", "enumerate", "(", "loss_all_level", ")", ":", "\n", "            ", "name", "=", "\"relative_loss_lvl{}\"", ".", "format", "(", "i", ")", "\n", "weighted_loss_all_level", "[", "name", "]", "=", "self", ".", "weights", "[", "i", "]", "*", "loss_per_level", "\n", "\n", "", "return", "weighted_loss_all_level", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.relative_loss.RelativeLoss.__repr__": [[101, 109], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "'{}\\n'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Max Disparity: {}\\n'", ".", "format", "(", "self", ".", "max_disp", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Start disparity: {}\\n'", ".", "format", "(", "self", ".", "start_disp", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Loss weight: {}\\n'", ".", "format", "(", "self", ".", "weights", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Disparity is sparse: {}\\n'", ".", "format", "(", "self", ".", "sparse", ")", "\n", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.relative_loss.RelativeLoss.name": [[110, 113], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'RelativeLoss'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.builder.CombinedLossEvaluators.__init__": [[56, 60], ["cfg.copy"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "ref_fms", ",", "tgt_fms", ",", "disp_sample", "=", "None", ")", ":", "\n", "# 1. build raw cost by concat", "\n", "        ", "cat_cost", "=", "self", ".", "dif_func", "(", "ref_fms", ",", "tgt_fms", ",", "disp_sample", "=", "disp_sample", ",", "**", "self", ".", "default_args", ")", "\n", "\n", "# 2. aggregate cost by 3D-hourglass", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.builder.CombinedLossEvaluators.__call__": [[61, 82], ["dict", "builder.CombinedLossEvaluators.loss_evaluators.items", "isinstance", "dict.update", "loss_evaluator", "isinstance", "loss_evaluator", "isinstance", "loss_evaluator.items", "loss_evaluator", "isinstance", "loss_evaluator", "ValueError"], "methods", ["None"], ["costs", "=", "self", ".", "aggregator", "(", "cat_cost", ")", "\n", "\n", "return", "costs", "\n", "\n", "\n", "# Use the correlation between left and right feature to form cost volume", "\n", "", "", "class", "CorCostProcessor", "(", "CostProcessor", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "CorCostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "cor_func", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "get", "(", "'type'", ",", "'default'", ")", "\n", "self", ".", "cor_func", "=", "COR_FUNCS", "[", "cor_func", "]", "\n", "\n", "self", ".", "default_args", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "copy", "(", ")", "\n", "self", ".", "default_args", ".", "pop", "(", "'type'", ")", "\n", "\n", "self", ".", "aggregator", "=", "build_cost_aggregator", "(", "cfg", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "ref_fms", ",", "tgt_fms", ",", "disp_sample", "=", "None", ")", ":", "\n", "# 1. build raw cost by correlation", "\n", "        ", "cor_cost", "=", "self", ".", "cor_func", "(", "ref_fms", ",", "tgt_fms", ",", "disp_sample", "=", "disp_sample", ",", "**", "self", ".", "default_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.builder.make_sll_loss_evaluator": [[7, 15], ["cfg.model.losses.l1_loss.get", "smooth_l1_loss.DispSmoothL1Loss"], "function", ["None"], ["\n", "from", ".", "DeepPruner", "import", "DeepPrunerProcessor", "\n", "from", ".", "AnyNet", "import", "AnyNetProcessor", "\n", "\n", "\n", "class", "CostProcessor", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.builder.make_gerf_loss_evaluator": [[19, 27], ["cfg.model.losses.gerf_loss.get", "gerf_loss.DispGERFLoss"], "function", ["None"], ["\n", "# Concatenate left and right feature to form cost volume", "\n", "", "", "class", "CatCostProcessor", "(", "CostProcessor", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "CatCostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "cat_func", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "get", "(", "'type'", ",", "'default'", ")", "\n", "self", ".", "cat_func", "=", "CAT_FUNCS", "[", "cat_func", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.builder.make_focal_loss_evaluator": [[31, 42], ["cfg.model.losses.focal_loss.get", "cfg.model.losses.focal_loss.get", "cfg.model.losses.focal_loss.get", "cfg.model.losses.focal_loss.get", "cfg.model.losses.focal_loss.get", "stereo_focal_loss.StereoFocalLoss"], "function", ["None"], ["self", ".", "aggregator", "=", "build_cost_aggregator", "(", "cfg", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "ref_fms", ",", "tgt_fms", ",", "disp_sample", "=", "None", ")", ":", "\n", "# 1. build raw cost by concat", "\n", "        ", "cat_cost", "=", "self", ".", "cat_func", "(", "ref_fms", ",", "tgt_fms", ",", "disp_sample", "=", "disp_sample", ",", "**", "self", ".", "default_args", ")", "\n", "\n", "# 2. aggregate cost by 3D-hourglass", "\n", "costs", "=", "self", ".", "aggregator", "(", "cat_cost", ")", "\n", "\n", "return", "costs", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.builder.make_relative_loss_evaluator": [[45, 52], ["cfg.model.losses.relative_loss.get", "cfg.model.losses.relative_loss.get", "cfg.model.losses.relative_loss.get", "relative_loss.RelativeLoss"], "function", ["None"], ["\n", "    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "DifCostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "dif_func", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "get", "(", "'type'", ",", "'default'", ")", "\n", "self", ".", "dif_func", "=", "DIF_FUNCS", "[", "dif_func", "]", "\n", "\n", "self", ".", "default_args", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "copy", "(", ")", "\n", "self", ".", "default_args", ".", "pop", "(", "'type'", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.builder.make_gsm_loss_evaluator": [[85, 110], ["dict", "dict", "builder.CombinedLossEvaluators", "builder.make_sll_loss_evaluator", "builder.make_gerf_loss_evaluator", "builder.make_focal_loss_evaluator", "builder.make_relative_loss_evaluator"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.builder.make_sll_loss_evaluator", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.builder.make_gerf_loss_evaluator", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.builder.make_focal_loss_evaluator", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.builder.make_relative_loss_evaluator"], ["\n", "return", "costs", "\n", "\n", "\n", "", "", "PROCESSORS", "=", "{", "\n", "'Difference'", ":", "DifCostProcessor", ",", "\n", "'Concatenation'", ":", "CatCostProcessor", ",", "\n", "'Correlation'", ":", "CorCostProcessor", ",", "\n", "'DeepPruner'", ":", "DeepPrunerProcessor", ",", "\n", "'AnyNet'", ":", "AnyNetProcessor", ",", "\n", "}", "\n", "\n", "def", "build_cost_processor", "(", "cfg", ")", ":", "\n", "    ", "proc_type", "=", "cfg", ".", "model", ".", "cost_processor", ".", "type", "\n", "assert", "proc_type", "in", "PROCESSORS", ",", "\"cost_processor type not found, excepted: {},\"", "\"but got {}\"", ".", "format", "(", "PROCESSORS", ".", "keys", "(", ")", ",", "proc_type", ")", "\n", "\n", "args", "=", "dict", "(", "\n", "cfg", "=", "cfg", ",", "\n", ")", "\n", "processor", "=", "PROCESSORS", "[", "proc_type", "]", "(", "**", "args", ")", "\n", "\n", "return", "processor", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.contrastive_loss.StereoContrastiveLoss.__init__": [[8, 19], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "contrastive_loss.StereoContrastiveLoss.register_buffer", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "contrastive_loss.StereoContrastiveLoss.register_buffer", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["self", ".", "n_neg", "=", "n_neg", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "K", "=", "K", "\n", "# create the queue", "\n", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "dim", ",", "K", ")", ")", "\n", "self", ".", "queue", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.contrastive_loss.StereoContrastiveLoss._momentum_update_key_encoder": [[20, 27], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "contrastive_loss.StereoContrastiveLoss.projection_q.parameters", "contrastive_loss.StereoContrastiveLoss.projection_k.parameters"], "methods", ["None"], ["        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "projection_q", ".", "parameters", "(", ")", ",", "self", ".", "projection_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.contrastive_loss.StereoContrastiveLoss._dequeue_and_enqueue": [[28, 43], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "contrastive_loss.concat_all_gather", "keys.view.view.view", "int"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.contrastive_loss.concat_all_gather"], ["# gather keys before updating queue", "\n", "        ", "keys", "=", "concat_all_gather", "(", "keys", ")", "\n", "keys", "=", "keys", ".", "view", "(", "-", "1", ",", "self", ".", "dim", ")", "\n", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "assert", "self", ".", "K", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n", "", "def", "forward", "(", "self", ",", "ref_fms", ",", "tgt_fms", ",", "target_l", ",", "target_r", ",", "weight", "=", "1", ")", ":", "\n", "        ", "low_scale", "=", "target_l", ".", "shape", "[", "-", "1", "]", "/", "ref_fms", ".", "shape", "[", "-", "1", "]", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.contrastive_loss.StereoContrastiveLoss.forward": [[44, 90], ["dmb.visualization.stereo.vis.occ_mask().squeeze", "disps_lowr.size", "torch.linspace().repeat().type_as", "torch.linspace().repeat().type_as", "torch.linspace().repeat().type_as", "torch.linspace().repeat().type_as", "torch.linspace().repeat().type_as", "torch.linspace().repeat().type_as", "torch.linspace().repeat().type_as", "torch.linspace().repeat().type_as", "torch.linspace().repeat().type_as", "mask_cont.detach().bool.detach().bool.detach().bool", "torch.normalize", "torch.normalize", "torch.normalize", "dmb.visualization.stereo.vis.positive_sampler", "torch.normalize", "torch.normalize", "torch.normalize", "torch.einsum().reshape", "torch.einsum().reshape", "torch.einsum().reshape", "torch.einsum().reshape", "torch.einsum().reshape", "torch.einsum().reshape", "torch.einsum().reshape", "torch.einsum().reshape", "torch.einsum().reshape", "dmb.visualization.stereo.vis.negative_sampler", "torch.normalize", "torch.normalize", "torch.normalize", "torch.einsum().reshape", "torch.einsum().reshape", "torch.einsum().reshape", "torch.einsum().reshape", "torch.einsum().reshape", "torch.einsum().reshape", "torch.einsum().reshape", "torch.einsum().reshape", "torch.einsum().reshape", "torch.normalize", "torch.normalize", "torch.normalize", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "logits.permute().reshape.permute().reshape.permute().reshape", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "dict", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.normalize.permute", "contrastive_loss.StereoContrastiveLoss._dequeue_and_enqueue", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "contrastive_loss.StereoContrastiveLoss.criterion", "key[].squeeze", "dmb.visualization.stereo.vis.occ_mask", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "mask_cont.detach().bool.detach().bool.detach", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "contrastive_loss.StereoContrastiveLoss.queue.clone().detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "logits.permute().reshape.permute().reshape.permute", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "contrastive_loss.StereoContrastiveLoss.queue.clone"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.contrastive_loss.positive_sampler", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.contrastive_loss.negative_sampler", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.contrastive_loss.StereoContrastiveLoss._dequeue_and_enqueue", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.contrastive_loss.occ_mask"], ["disps_lowr", "=", "F", ".", "interpolate", "(", "target_l", ",", "scale_factor", "=", "1", "/", "low_scale", ")", "/", "low_scale", "\n", "disps_lowr_right", "=", "F", ".", "interpolate", "(", "target_r", ",", "scale_factor", "=", "1", "/", "low_scale", ")", "/", "low_scale", "\n", "mask_cont", "=", "occ_mask", "(", "disps_lowr", ",", "disps_lowr_right", ")", ".", "squeeze", "(", ")", "\n", "maskl", "=", "(", "disps_lowr", ">", "0.0", ")", ".", "float", "(", ")", ".", "squeeze", "(", ")", "\n", "b", ",", "_", ",", "h", ",", "w", "=", "disps_lowr", ".", "size", "(", ")", "\n", "x_base", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "w", ")", ".", "repeat", "(", "b", ",", "1", ",", "h", ",", "1", ")", ".", "type_as", "(", "disps_lowr", ")", "\n", "x_shifts", "=", "-", "disps_lowr", "[", ":", ",", ":", ",", ":", ",", ":", "]", "/", "w", "\n", "maskout", "=", "(", "(", "x_base", "+", "x_shifts", ")", ">=", "0", ")", ".", "squeeze", "(", ")", "\n", "\n", "maskl", "*=", "maskout", "\n", "mask_cont", "*=", "maskl", "\n", "mask_cont", "=", "mask_cont", ".", "detach", "(", ")", ".", "bool", "(", ")", "\n", "\n", "query", "=", "F", ".", "normalize", "(", "ref_fms", ",", "dim", "=", "1", ")", "\n", "\n", "positive", "=", "positive_sampler", "(", "ref_fms", ",", "tgt_fms", ",", "disps_lowr", ",", "disps_lowr_right", ")", "\n", "positive", "=", "F", ".", "normalize", "(", "positive", ",", "dim", "=", "1", ")", "\n", "l_pos", "=", "torch", ".", "einsum", "(", "'nchw,nchw->nhw'", ",", "[", "query", ",", "positive", "]", ")", ".", "reshape", "(", "b", ",", "h", ",", "w", ",", "1", ")", "\n", "\n", "negative", "=", "negative_sampler", "(", "ref_fms", ",", "tgt_fms", ",", "disps_lowr", ",", "disps_lowr_right", ",", "self", ".", "n_neg", ",", "low", "=", "1", ",", "high", "=", "25", ")", "\n", "negative", "=", "F", ".", "normalize", "(", "negative", ",", "dim", "=", "1", ")", "\n", "l_neg", "=", "torch", ".", "einsum", "(", "'nchw,nchwe->nhwe'", ",", "[", "query", ",", "negative", "]", ")", ".", "reshape", "(", "b", ",", "h", ",", "w", ",", "self", ".", "n_neg", ")", "\n", "\n", "self", ".", "queue", "=", "F", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "l_neg_queue", "=", "torch", ".", "einsum", "(", "'nchw,ck->nhwk'", ",", "[", "query", ",", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "\n", "l_neg", "=", "torch", ".", "cat", "(", "[", "l_neg", ",", "l_neg_queue", "]", ",", "dim", "=", "3", ")", "\n", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_neg", "]", ",", "dim", "=", "3", ")", ".", "permute", "(", "3", ",", "0", ",", "1", ",", "2", ")", "\n", "logits", "*=", "mask_cont", "\n", "logits", "=", "logits", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", ".", "reshape", "(", "b", "*", "h", "*", "w", ",", "1", "+", "self", ".", "n_neg", "+", "self", ".", "K", ")", "\n", "logits", "/=", "self", ".", "T", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "contrast_loss", "=", "dict", "(", ")", "\n", "contrast_loss", "[", "'loss_contrast'", "]", "=", "self", ".", "criterion", "(", "logits", ",", "labels", ")", "*", "weight", "\n", "\n", "sampler_h", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "h", ",", "size", "=", "(", "1", ",", ")", ")", "\n", "sampler_w", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "w", ",", "size", "=", "(", "1", ",", ")", ")", "\n", "sampler_neg", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "1", ",", "size", "=", "(", "1", ",", ")", ")", "\n", "key", "=", "negative", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", "\n", "self", ".", "_dequeue_and_enqueue", "(", "key", "[", ":", ",", "sampler_h", ",", "sampler_w", ",", "sampler_neg", ",", ":", ",", "]", ".", "squeeze", "(", ")", ")", "\n", "\n", "return", "contrast_loss", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.contrastive_loss.concat_all_gather": [[95, 107], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["None"], ["    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.contrastive_loss.occ_mask": [[110, 121], ["left_disp.size", "torch.arange().float().to", "torch.arange().float().to", "torch.arange().float().to", "index.repeat.repeat", "warp", "warp", "masko.float", "torch.abs", "torch.abs", "torch.abs", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.contrastive_loss.warp", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.contrastive_loss.warp"], ["device", "=", "left_disp", ".", "device", "\n", "index", "=", "torch", ".", "arange", "(", "w", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "index", "=", "index", ".", "repeat", "(", "b", ",", "1", ",", "h", ",", "1", ")", "\n", "index_l2r", "=", "warp", "(", "index", ",", "right_disp", ")", "\n", "index_l2r2l", "=", "warp", "(", "index_l2r", ",", "-", "left_disp", ")", "\n", "\n", "masko", "=", "torch", ".", "abs", "(", "index", "-", "index_l2r2l", ")", "<", "3.", "\n", "\n", "return", "masko", ".", "float", "(", ")", "\n", "\n", "\n", "", "def", "positive_sampler", "(", "left_feat", ",", "right_feat", ",", "left_disp", ",", "right_disp", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.contrastive_loss.positive_sampler": [[123, 134], ["left_disp.size", "torch.linspace().repeat().type_as", "torch.linspace().repeat().type_as", "torch.linspace().repeat().type_as", "torch.linspace().repeat().transpose().type_as", "torch.linspace().repeat().transpose().type_as", "torch.linspace().repeat().transpose().type_as", "torch.stack", "torch.stack", "torch.stack", "torch.grid_sample", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat().transpose", "torch.linspace().repeat().transpose", "torch.linspace().repeat().transpose", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace", "torch.linspace", "torch.linspace"], "function", ["None"], ["x_base", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "w", ")", ".", "repeat", "(", "b", ",", "h", ",", "1", ")", ".", "type_as", "(", "left_disp", ")", "\n", "y_base", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "h", ")", ".", "repeat", "(", "b", ",", "w", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "type_as", "(", "left_disp", ")", "\n", "\n", "x_shifts", "=", "-", "left_disp", "[", ":", ",", "0", ",", ":", ",", ":", "]", "/", "w", "\n", "flow_field", "=", "torch", ".", "stack", "(", "(", "x_base", "+", "x_shifts", ",", "y_base", ")", ",", "dim", "=", "3", ")", "\n", "\n", "output", "=", "F", ".", "grid_sample", "(", "right_feat", ",", "2", "*", "flow_field", "-", "1", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'border'", ")", "\n", "\n", "return", "output", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.contrastive_loss.negative_sampler": [[137, 175], ["left_feat.size", "torch.linspace().repeat().type_as", "torch.linspace().repeat().type_as", "torch.linspace().repeat().type_as", "torch.linspace().repeat().transpose().type_as", "torch.linspace().repeat().transpose().type_as", "torch.linspace().repeat().transpose().type_as", "x_right.unsqueeze().repeat.unsqueeze().repeat", "y_right.unsqueeze().repeat.unsqueeze().repeat", "int", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.sign().short", "torch.sign().short", "torch.sign().short", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.sign().short", "torch.sign().short", "torch.sign().short", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.sign().short", "torch.sign().short", "torch.sign().short", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.sign().short", "torch.sign().short", "torch.sign().short", "torch.stack", "torch.stack", "torch.stack", "torch.tensor", "torch.tensor", "torch.tensor", "contrastive_loss.extract_feature_field", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat().transpose", "torch.linspace().repeat().transpose", "torch.linspace().repeat().transpose", "x_right.unsqueeze().repeat.unsqueeze", "y_right.unsqueeze().repeat.unsqueeze", "int", "torch.sign", "torch.sign", "torch.sign", "int", "torch.sign", "torch.sign", "torch.sign", "int", "torch.sign", "torch.sign", "torch.sign", "int", "torch.sign", "torch.sign", "torch.sign", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.linspace", "torch.linspace", "torch.linspace"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.contrastive_loss.extract_feature_field"], ["x_base", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "w", ")", ".", "repeat", "(", "b", ",", "h", ",", "1", ")", ".", "type_as", "(", "left_feat", ")", "\n", "y_base", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "h", ")", ".", "repeat", "(", "b", ",", "w", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "type_as", "(", "left_feat", ")", "\n", "\n", "if", "left_disp", "!=", "None", ":", "\n", "        ", "x_shifts", "=", "-", "left_disp", "[", ":", ",", "0", ",", ":", ",", ":", "]", "/", "w", "\n", "x_right", "=", "(", "x_base", "+", "x_shifts", ")", "*", "w", "\n", "", "else", ":", "\n", "        ", "x_right", "=", "x_base", "*", "w", "\n", "", "y_right", "=", "y_base", "*", "h", "\n", "\n", "x_right", "=", "x_right", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "n_neg", ")", "\n", "y_right", "=", "y_right", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "n_neg", ")", "\n", "\n", "halfn", "=", "int", "(", "n_neg", "/", "2", ")", "\n", "# Generate random shift for each KeyPoint", "\n", "x_random_shift_1", "=", "torch", ".", "randint_like", "(", "x_right", "[", ":", ",", ":", ",", ":", ",", ":", "halfn", "]", ",", "low", "=", "int", "(", "low", ")", ",", "high", "=", "high", ")", "\n", "x_random_shift_1", "*=", "torch", ".", "sign", "(", "torch", ".", "rand_like", "(", "x_random_shift_1", ",", "dtype", "=", "torch", ".", "float", ")", "-", "0.5", ")", ".", "short", "(", ")", "# Random + or - shift", "\n", "y_random_shift_1", "=", "torch", ".", "randint_like", "(", "y_right", "[", ":", ",", ":", ",", ":", ",", ":", "halfn", "]", ",", "low", "=", "int", "(", "low", ")", ",", "high", "=", "high", ")", "\n", "y_random_shift_1", "*=", "torch", ".", "sign", "(", "torch", ".", "rand_like", "(", "y_random_shift_1", ",", "dtype", "=", "torch", ".", "float", ")", "-", "0.5", ")", ".", "short", "(", ")", "# Random + or - shift", "\n", "\n", "x_random_shift_2", "=", "torch", ".", "randint_like", "(", "x_right", "[", ":", ",", ":", ",", ":", ",", "halfn", ":", "]", ",", "low", "=", "int", "(", "low", ")", ",", "high", "=", "high", ")", "\n", "x_random_shift_2", "*=", "torch", ".", "sign", "(", "torch", ".", "rand_like", "(", "x_random_shift_2", ",", "dtype", "=", "torch", ".", "float", ")", "-", "0.5", ")", ".", "short", "(", ")", "# Random + or - shift", "\n", "y_random_shift_2", "=", "torch", ".", "randint_like", "(", "y_right", "[", ":", ",", ":", ",", ":", ",", "halfn", ":", "]", ",", "low", "=", "int", "(", "low", ")", ",", "high", "=", "high", ")", "\n", "y_random_shift_2", "*=", "torch", ".", "sign", "(", "torch", ".", "rand_like", "(", "y_random_shift_2", ",", "dtype", "=", "torch", ".", "float", ")", "-", "0.5", ")", ".", "short", "(", ")", "# Random + or - shift", "\n", "\n", "x_right_shifted", "=", "x_right", "+", "torch", ".", "cat", "(", "(", "x_random_shift_1", ",", "y_random_shift_1", ")", ",", "dim", "=", "-", "1", ")", "\n", "y_right_shifted", "=", "y_right", "+", "torch", ".", "cat", "(", "(", "x_random_shift_2", ",", "y_random_shift_2", ")", ",", "dim", "=", "-", "1", ")", "\n", "flow_field", "=", "torch", ".", "stack", "(", "(", "x_right_shifted", ",", "y_right_shifted", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "flow_field", "%=", "torch", ".", "tensor", "(", "(", "w", ",", "h", ")", ",", "dtype", "=", "torch", ".", "short", ",", "device", "=", "flow_field", ".", "device", ")", "\n", "flow_field", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", "=", "flow_field", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", "/", "w", "\n", "flow_field", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", "=", "flow_field", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", "/", "h", "\n", "\n", "output", "=", "extract_feature_field", "(", "right_feat", ",", "flow_field", ")", "\n", "\n", "return", "output", "\n", "\n", "\n", "", "def", "extract_feature_field", "(", "right_feat", ",", "flow_field", ",", "rand_batch", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.contrastive_loss.extract_feature_field": [[177, 187], ["flow_field.permute().reshape.size", "right_feat.permute().reshape.size", "flow_field.permute().reshape.permute().reshape", "right_feat.permute().reshape.unsqueeze().repeat", "right_feat.permute().reshape.permute().reshape", "torch.grid_sample", "output.reshape().permute.reshape().permute", "flow_field.permute().reshape.permute", "right_feat.permute().reshape.unsqueeze", "right_feat.permute().reshape.permute", "output.reshape().permute.reshape"], "function", ["None"], ["c", "=", "right_feat", ".", "size", "(", "1", ")", "\n", "flow_field", "=", "flow_field", ".", "permute", "(", "3", ",", "0", ",", "1", ",", "2", ",", "4", ")", ".", "reshape", "(", "n", "*", "b", ",", "h", ",", "w", ",", "2", ")", "\n", "right_feat", "=", "right_feat", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "1", ",", "n", ")", "\n", "right_feat", "=", "right_feat", ".", "permute", "(", "4", ",", "0", ",", "1", ",", "2", ",", "3", ")", ".", "reshape", "(", "n", "*", "b", ",", "c", ",", "h", ",", "w", ")", "\n", "output", "=", "F", ".", "grid_sample", "(", "right_feat", ",", "2", "*", "flow_field", "-", "1", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'border'", ")", "\n", "output", "=", "output", ".", "reshape", "(", "n", ",", "b", ",", "c", ",", "h", ",", "w", ")", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "4", ",", "0", ")", "\n", "\n", "return", "output", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.contrastive_loss.warp": [[188, 206], ["img.size", "torch.linspace().repeat().type_as().to", "torch.linspace().repeat().type_as().to", "torch.linspace().repeat().type_as().to", "torch.linspace().repeat().transpose().type_as().to", "torch.linspace().repeat().transpose().type_as().to", "torch.linspace().repeat().transpose().type_as().to", "torch.stack", "torch.stack", "torch.stack", "torch.grid_sample", "torch.linspace().repeat().type_as", "torch.linspace().repeat().type_as", "torch.linspace().repeat().type_as", "torch.linspace().repeat().transpose().type_as", "torch.linspace().repeat().transpose().type_as", "torch.linspace().repeat().transpose().type_as", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat().transpose", "torch.linspace().repeat().transpose", "torch.linspace().repeat().transpose", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace", "torch.linspace", "torch.linspace"], "function", ["None"], ["", "def", "warp", "(", "img", ",", "disp", ")", ":", "\n", "    ", "'''\n    Borrowed from: https://github.com/OniroAI/MonoDepth-PyTorch\n    '''", "\n", "b", ",", "_", ",", "h", ",", "w", "=", "img", ".", "size", "(", ")", "\n", "device", "=", "disp", ".", "device", "\n", "# Original coordinates of pixels", "\n", "x_base", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "w", ")", ".", "repeat", "(", "b", ",", "h", ",", "1", ")", ".", "type_as", "(", "img", ")", ".", "to", "(", "device", ")", "\n", "y_base", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "h", ")", ".", "repeat", "(", "b", ",", "w", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "type_as", "(", "img", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Apply shift in X direction", "\n", "x_shifts", "=", "(", "disp", "[", ":", ",", "0", ",", ":", ",", ":", "]", "/", "w", ")", ".", "to", "(", "device", ")", "\n", "flow_field", "=", "torch", ".", "stack", "(", "(", "x_base", "+", "x_shifts", ",", "y_base", ")", ",", "dim", "=", "3", ")", "\n", "\n", "# In grid_sample coordinates are assumed to be between -1 and 1", "\n", "output", "=", "F", ".", "grid_sample", "(", "img", ",", "2", "*", "flow_field", "-", "1", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'border'", ")", "\n", "\n", "return", "output", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.ssw_loss.StereoWhiteningLoss.__init__": [[8, 20], ["torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "dim", "=", "1", "\n", "self", ".", "dim", "=", "1", "\n", "self", ".", "eps", "=", "1e-5", "\n", "self", ".", "eye", "=", "torch", ".", "eye", "(", "dim", ",", "dim", ")", ".", "cuda", "(", ")", "\n", "\n", "# print(torch.ones(16, 16).triu(diagonal=1))", "\n", "self", ".", "reversal_eye", "=", "torch", ".", "ones", "(", "dim", ",", "dim", ")", ".", "triu", "(", "diagonal", "=", "1", ")", ".", "cuda", "(", ")", "\n", "self", ".", "relax_denom", "=", "1.5", "\n", "self", ".", "clusters", "=", "3", "\n", "self", ".", "num_off_diagonal", "=", "0", "\n", "self", ".", "margin", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.ssw_loss.StereoWhiteningLoss.__call__": [[22, 56], ["range", "dict", "len", "feats_l.size", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "cov_matrix.flatten", "kmeans1d.cluster", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "mask_matrix.view.view.view", "range", "mask_matrix.view.view.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "dmb.modeling.stereo.layers.instance_whitening.instance_whitening_loss", "len", "clusters.count", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "clusters.count", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "cov_matrix.flatten.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.instance_whitening.instance_whitening_loss"], ["", "def", "__call__", "(", "self", ",", "l_w_arr", ",", "cov_list", ",", "weight", "=", "0.6", ")", ":", "\n", "        ", "wt_loss", "=", "0", "\n", "for", "idx", "in", "range", "(", "len", "(", "l_w_arr", ")", ")", ":", "\n", "            ", "feats_l", "=", "l_w_arr", "[", "idx", "]", "\n", "\n", "B", ",", "c", ",", "h", ",", "w", "=", "feats_l", ".", "size", "(", ")", "\n", "self", ".", "dim", "=", "c", "\n", "\n", "self", ".", "eye", "=", "torch", ".", "eye", "(", "c", ",", "c", ")", ".", "cuda", "(", ")", "\n", "self", ".", "reversal_eye", "=", "torch", ".", "ones", "(", "c", ",", "c", ")", ".", "triu", "(", "diagonal", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "cov_matrix", "=", "cov_list", "[", "idx", "]", "\n", "\n", "var_flatten", "=", "cov_matrix", ".", "flatten", "(", ")", "\n", "clusters", ",", "centroids", "=", "kmeans1d", ".", "cluster", "(", "var_flatten", ",", "self", ".", "clusters", ")", "\n", "num_sensitive", "=", "var_flatten", ".", "size", "(", ")", "[", "0", "]", "-", "clusters", ".", "count", "(", "0", ")", "-", "clusters", ".", "count", "(", "1", ")", "\n", "values", ",", "indices", "=", "torch", ".", "topk", "(", "var_flatten", ",", "k", "=", "int", "(", "num_sensitive", ")", ")", "\n", "\n", "mask_matrix", "=", "torch", ".", "zeros", "(", "B", ",", "self", ".", "dim", ",", "self", ".", "dim", ")", ".", "cuda", "(", ")", "\n", "mask_matrix", "=", "mask_matrix", ".", "view", "(", "B", ",", "-", "1", ")", "\n", "for", "midx", "in", "range", "(", "B", ")", ":", "\n", "                ", "mask_matrix", "[", "midx", "]", "[", "indices", "]", "=", "1", "\n", "", "mask_matrix", "=", "mask_matrix", ".", "view", "(", "B", ",", "self", ".", "dim", ",", "self", ".", "dim", ")", "\n", "mask_matrix", "=", "mask_matrix", "*", "self", ".", "reversal_eye", "\n", "num_sensitive_sum", "=", "torch", ".", "sum", "(", "mask_matrix", ")", "\n", "f_map", "=", "l_w_arr", "[", "idx", "]", "\n", "loss", "=", "instance_whitening_loss", "(", "f_map", ",", "self", ".", "eye", ",", "mask_matrix", ",", "num_remove_cov", "=", "num_sensitive_sum", ")", "\n", "wt_loss", "+=", "loss", "\n", "\n", "", "wt_loss", "=", "wt_loss", "/", "len", "(", "l_w_arr", ")", "\n", "st_isw_loss", "=", "dict", "(", ")", "\n", "st_isw_loss", "[", "'loss_stereo_isw'", "]", "=", "weight", "*", "wt_loss", "\n", "\n", "return", "st_isw_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.ssw_loss.StereoWhiteningLoss.cal_cov": [[57, 82], ["range", "len", "mask_feats_l.size", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "f_map.contiguous().view.contiguous().view.contiguous().view", "off_diag_elements.view.view.view", "f_cor.view.view.view", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "cov_list.append", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "mask_feats_l.unsqueeze", "mask_feats_r.unsqueeze", "f_map.contiguous().view.contiguous().view.contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "f_map.contiguous().view.contiguous().view.transpose"], "methods", ["None"], ["", "def", "cal_cov", "(", "self", ",", "raw_w_arr", ")", ":", "\n", "        ", "cov_list", "=", "[", "]", "\n", "l_arr_mask", "=", "raw_w_arr", "[", "0", "]", "\n", "r_arr_mask", "=", "raw_w_arr", "[", "1", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "l_arr_mask", ")", ")", ":", "\n", "            ", "mask_feats_l", "=", "l_arr_mask", "[", "idx", "]", "\n", "mask_feats_r", "=", "r_arr_mask", "[", "idx", "]", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "mask_feats_l", ".", "size", "(", ")", "\n", "self", ".", "dim", "=", "c", "\n", "self", ".", "eye", "=", "torch", ".", "eye", "(", "c", ",", "c", ")", ".", "cuda", "(", ")", "\n", "self", ".", "reversal_eye", "=", "torch", ".", "ones", "(", "c", ",", "c", ")", ".", "triu", "(", "diagonal", "=", "1", ")", ".", "cuda", "(", ")", "\n", "f_map", "=", "torch", ".", "cat", "(", "[", "mask_feats_l", ".", "unsqueeze", "(", "0", ")", ",", "mask_feats_r", ".", "unsqueeze", "(", "0", ")", "]", ",", "dim", "=", "0", ")", "\n", "V", ",", "B", ",", "C", ",", "H", ",", "W", "=", "f_map", ".", "shape", "\n", "HW", "=", "H", "*", "W", "\n", "f_map", "=", "f_map", ".", "contiguous", "(", ")", ".", "view", "(", "V", "*", "B", ",", "C", ",", "-", "1", ")", "\n", "f_cor", "=", "torch", ".", "bmm", "(", "f_map", ",", "f_map", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "div", "(", "HW", "-", "1", ")", "+", "(", "self", ".", "eps", "*", "self", ".", "eye", ")", "# VB X C X C / HW", "\n", "off_diag_elements", "=", "f_cor", "\n", "off_diag_elements", "=", "off_diag_elements", ".", "view", "(", "V", ",", "B", ",", "C", ",", "-", "1", ")", "\n", "f_cor", "=", "f_cor", ".", "view", "(", "V", ",", "B", ",", "C", ",", "-", "1", ")", "\n", "assert", "V", "==", "2", "\n", "variance_of_covariance", "=", "torch", ".", "var", "(", "off_diag_elements", ",", "dim", "=", "0", ")", "\n", "\n", "cov_list", ".", "append", "(", "variance_of_covariance", ")", "\n", "\n", "", "return", "cov_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.smooth_l1_loss.DispSmoothL1Loss.__init__": [[23, 34], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_disp", ",", "start_disp", "=", "0", ",", "weights", "=", "None", ",", "sparse", "=", "False", ")", ":", "\n", "        ", "self", ".", "max_disp", "=", "max_disp", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "start_disp", "=", "start_disp", "\n", "self", ".", "sparse", "=", "sparse", "\n", "if", "sparse", ":", "\n", "# sparse disparity ==> max_pooling", "\n", "            ", "self", ".", "scale_func", "=", "F", ".", "adaptive_max_pool2d", "\n", "", "else", ":", "\n", "# dense disparity ==> avg_pooling", "\n", "            ", "self", ".", "scale_func", "=", "F", ".", "adaptive_avg_pool2d", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.smooth_l1_loss.DispSmoothL1Loss.loss_per_level": [[35, 59], ["torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "smooth_l1_loss.DispSmoothL1Loss.scale_func", "mask.sum", "print", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "mask.float"], "methods", ["None"], ["", "", "def", "loss_per_level", "(", "self", ",", "estDisp", ",", "gtDisp", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "estDisp", ".", "shape", "\n", "scaled_gtDisp", "=", "gtDisp", "\n", "scale", "=", "1.0", "\n", "if", "gtDisp", ".", "shape", "[", "-", "2", "]", "!=", "H", "or", "gtDisp", ".", "shape", "[", "-", "1", "]", "!=", "W", ":", "\n", "# compute scale per level and scale gtDisp", "\n", "            ", "scale", "=", "gtDisp", ".", "shape", "[", "-", "1", "]", "/", "(", "W", "*", "1.0", ")", "\n", "scaled_gtDisp", "=", "gtDisp", "/", "scale", "\n", "scaled_gtDisp", "=", "self", ".", "scale_func", "(", "scaled_gtDisp", ",", "(", "H", ",", "W", ")", ")", "\n", "\n", "# mask for valid disparity", "\n", "# (start disparity, max disparity / scale)", "\n", "# Attention: the invalid disparity of KITTI is set as 0, be sure to mask it out", "\n", "", "mask", "=", "(", "scaled_gtDisp", ">", "self", ".", "start_disp", ")", "&", "(", "scaled_gtDisp", "<", "(", "self", ".", "max_disp", "/", "scale", ")", ")", "\n", "if", "mask", ".", "sum", "(", ")", "<", "1.0", ":", "\n", "            ", "print", "(", "'SmoothL1 loss: there is no point\\'s disparity is in ({},{})!'", ".", "format", "(", "self", ".", "start_disp", ",", "\n", "self", ".", "max_disp", "/", "scale", ")", ")", "\n", "loss", "=", "(", "torch", ".", "abs", "(", "estDisp", "-", "scaled_gtDisp", ")", "*", "mask", ".", "float", "(", ")", ")", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n", "# smooth l1 loss", "\n", "", "loss", "=", "F", ".", "smooth_l1_loss", "(", "estDisp", "[", "mask", "]", ",", "scaled_gtDisp", "[", "mask", "]", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.smooth_l1_loss.DispSmoothL1Loss.__call__": [[60, 81], ["dict", "enumerate", "isinstance", "loss_all_level.append", "len", "smooth_l1_loss.DispSmoothL1Loss.loss_per_level"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.conf_nll_loss.ConfidenceNllLoss.loss_per_level"], ["", "def", "__call__", "(", "self", ",", "estDisp", ",", "gtDisp", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "estDisp", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "estDisp", "=", "[", "estDisp", "]", "\n", "\n", "", "if", "self", ".", "weights", "is", "None", ":", "\n", "            ", "self", ".", "weights", "=", "[", "1.0", "]", "*", "len", "(", "estDisp", ")", "\n", "\n", "# compute loss for per level", "\n", "", "loss_all_level", "=", "[", "]", "\n", "for", "est_disp_per_lvl", "in", "estDisp", ":", "\n", "            ", "loss_all_level", ".", "append", "(", "\n", "self", ".", "loss_per_level", "(", "est_disp_per_lvl", ",", "gtDisp", ")", "\n", ")", "\n", "\n", "# re-weight loss per level", "\n", "", "weighted_loss_all_level", "=", "dict", "(", ")", "\n", "for", "i", ",", "loss_per_level", "in", "enumerate", "(", "loss_all_level", ")", ":", "\n", "            ", "name", "=", "\"l1_loss_lvl{}\"", ".", "format", "(", "i", ")", "\n", "weighted_loss_all_level", "[", "name", "]", "=", "self", ".", "weights", "[", "i", "]", "*", "loss_per_level", "\n", "\n", "", "return", "weighted_loss_all_level", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.smooth_l1_loss.DispSmoothL1Loss.__repr__": [[82, 90], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "'{}\\n'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Max Disparity: {}\\n'", ".", "format", "(", "self", ".", "max_disp", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Start disparity: {}\\n'", ".", "format", "(", "self", ".", "start_disp", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Loss weight: {}\\n'", ".", "format", "(", "self", ".", "weights", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Disparity is sparse: {}\\n'", ".", "format", "(", "self", ".", "sparse", ")", "\n", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.smooth_l1_loss.DispSmoothL1Loss.name": [[91, 94], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'SmoothL1Loss'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.inverse_warp_loss.InverseWarpLoss.__init__": [[28, 34], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "weights", "=", "None", ",", "theta", "=", "1.0", ",", "eps", "=", "1e-6", ",", "ssim_weight", "=", "0.15", ",", "rms_weight", "=", "0.85", ")", ":", "\n", "        ", "self", ".", "weights", "=", "weights", "\n", "self", ".", "theta", "=", "theta", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "ssim_weight", "=", "ssim_weight", "\n", "self", ".", "rms_weight", "=", "rms_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.inverse_warp_loss.InverseWarpLoss.get_per_level_not_occlusion": [[35, 51], ["dmb.modeling.stereo.layers.inverse_warp.inverse_warp", "dmb.modeling.stereo.layers.inverse_warp.inverse_warp", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.inverse_warp.inverse_warp", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.inverse_warp.inverse_warp"], ["", "def", "get_per_level_not_occlusion", "(", "self", ",", "estLeftDisp", ",", "estRightDisp", ")", ":", "\n", "        ", "assert", "estLeftDisp", ".", "shape", "==", "estRightDisp", ".", "shape", "\n", "leftDisp_fromWarp", "=", "inverse_warp", "(", "estRightDisp", ",", "-", "estLeftDisp", ")", "\n", "rightDisp_fromWarp", "=", "inverse_warp", "(", "estLeftDisp", ",", "estRightDisp", ")", "\n", "\n", "# left and right consistency check", "\n", "leftOcclusion", "=", "(", "(", "torch", ".", "abs", "(", "leftDisp_fromWarp", "-", "estLeftDisp", ")", ">", "self", ".", "theta", ")", "|", "\n", "(", "torch", ".", "abs", "(", "leftDisp_fromWarp", ")", "<", "self", ".", "eps", ")", ")", "\n", "rightOcclusion", "=", "(", "(", "torch", ".", "abs", "(", "rightDisp_fromWarp", "-", "estRightDisp", ")", ">", "self", ".", "theta", ")", "|", "\n", "(", "torch", ".", "abs", "(", "rightDisp_fromWarp", ")", "<", "self", ".", "eps", ")", ")", "\n", "\n", "# get not occlusion mask", "\n", "leftNotOcclusion", "=", "(", "1", "-", "leftOcclusion", ")", ".", "type_as", "(", "leftOcclusion", ")", "\n", "rightNotOcclusion", "=", "(", "1", "-", "rightOcclusion", ")", ".", "type_as", "(", "rightOcclusion", ")", "\n", "\n", "return", "leftNotOcclusion", ",", "rightNotOcclusion", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.inverse_warp_loss.InverseWarpLoss.rms": [[52, 55], ["torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "rms", "(", "self", ",", "est", ",", "gt", ")", ":", "\n", "# root mean square", "\n", "        ", "return", "torch", ".", "sqrt", "(", "(", "est", "-", "gt", ")", "**", "2", "+", "self", ".", "eps", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.inverse_warp_loss.InverseWarpLoss.loss_per_level": [[56, 70], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "dmb.modeling.stereo.layers.inverse_warp.inverse_warp", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "inverse_warp_loss.InverseWarpLoss.rms", "SSIM"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.inverse_warp.inverse_warp", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.inverse_warp_loss.InverseWarpLoss.rms", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.ssim.SSIM"], ["", "def", "loss_per_level", "(", "self", ",", "estDisp", ",", "leftImage", ",", "rightImage", ",", "mask", "=", "None", ")", ":", "\n", "        ", "from", "dmb", ".", "modeling", ".", "stereo", ".", "losses", ".", "utils", "import", "SSIM", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "estDisp", ".", "shape", "\n", "leftImage", "=", "F", ".", "interpolate", "(", "leftImage", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'area'", ")", "\n", "rightImage", "=", "F", ".", "interpolate", "(", "rightImage", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'area'", ")", "\n", "\n", "leftImage_fromWarp", "=", "inverse_warp", "(", "rightImage", ",", "-", "estDisp", ")", "\n", "\n", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "torch", ".", "ones_like", "(", "leftImage", ">", "0", ")", "\n", "", "loss", "=", "self", ".", "rms_weight", "*", "self", ".", "rms", "(", "leftImage", "[", "mask", "]", ",", "leftImage_fromWarp", "[", "mask", "]", ")", "\n", "loss", "+=", "self", ".", "ssim_weight", "*", "SSIM", "(", "leftImage", ",", "leftImage_fromWarp", ",", "mask", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.inverse_warp_loss.InverseWarpLoss.lr_loss_per_level": [[71, 93], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "dmb.modeling.stereo.layers.inverse_warp.inverse_warp", "dmb.modeling.stereo.layers.inverse_warp.inverse_warp", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "inverse_warp_loss.InverseWarpLoss.rms", "SSIM", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "inverse_warp_loss.InverseWarpLoss.rms", "SSIM"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.inverse_warp.inverse_warp", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.layers.inverse_warp.inverse_warp", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.inverse_warp_loss.InverseWarpLoss.rms", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.ssim.SSIM", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.inverse_warp_loss.InverseWarpLoss.rms", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.ssim.SSIM"], ["", "def", "lr_loss_per_level", "(", "self", ",", "leftEstDisp", ",", "rightEstDisp", ",", "leftImage", ",", "rightImage", ",", "leftMask", "=", "None", ",", "rightMask", "=", "None", ")", ":", "\n", "        ", "from", "dmb", ".", "modeling", ".", "stereo", ".", "losses", ".", "utils", "import", "SSIM", "\n", "assert", "leftEstDisp", ".", "shape", "==", "rightEstDisp", ".", "shape", ",", "'The shape of left and right disparity map should be the same!'", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "leftEstDisp", ".", "shape", "\n", "leftImage", "=", "F", ".", "interpolate", "(", "leftImage", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'area'", ")", "\n", "rightImage", "=", "F", ".", "interpolate", "(", "rightImage", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'area'", ")", "\n", "\n", "leftImage_fromWarp", "=", "inverse_warp", "(", "rightImage", ",", "-", "leftEstDisp", ")", "\n", "rightImage_fromWarp", "=", "inverse_warp", "(", "leftImage", ",", "rightEstDisp", ")", "\n", "\n", "if", "leftMask", "is", "None", ":", "\n", "            ", "leftMask", "=", "torch", ".", "ones_like", "(", "leftImage", ">", "0", ")", "\n", "", "loss", "=", "self", ".", "rms_weight", "*", "self", ".", "rms", "(", "leftImage", "[", "leftMask", "]", ",", "leftImage_fromWarp", "[", "leftMask", "]", ")", "\n", "loss", "+=", "self", ".", "ssim_weight", "*", "SSIM", "(", "leftImage", ",", "leftImage_fromWarp", ",", "leftMask", ")", "\n", "\n", "if", "rightMask", "is", "None", ":", "\n", "            ", "rightMask", "=", "torch", ".", "ones_like", "(", "rightImage", ">", "0", ")", "\n", "", "loss", "+=", "self", ".", "rms_weight", "*", "self", ".", "rms", "(", "rightImage", "[", "rightMask", "]", ",", "rightImage_fromWarp", "[", "rightMask", "]", ")", "\n", "loss", "+=", "self", ".", "ssim_weight", "*", "SSIM", "(", "rightImage", ",", "rightImage_fromWarp", ",", "leftMask", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.inverse_warp_loss.InverseWarpLoss.__call__": [[94, 129], ["dict", "enumerate", "isinstance", "zip", "len", "isinstance", "len", "len", "loss_all_level.append", "inverse_warp_loss.InverseWarpLoss.get_per_level_not_occlusion", "loss_all_level.append", "inverse_warp_loss.InverseWarpLoss.loss_per_level", "leftMask.expand_as", "rightMask.expand_as", "inverse_warp_loss.InverseWarpLoss.lr_loss_per_level"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.inverse_warp_loss.InverseWarpLoss.get_per_level_not_occlusion", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.conf_nll_loss.ConfidenceNllLoss.loss_per_level", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.inverse_warp_loss.InverseWarpLoss.lr_loss_per_level"], ["", "def", "__call__", "(", "self", ",", "estLeftDisp", ",", "leftImage", ",", "rightImage", ",", "estRightDisp", "=", "None", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "estLeftDisp", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "estLeftDisp", "=", "[", "estLeftDisp", "]", "\n", "\n", "", "if", "self", ".", "weights", "is", "None", ":", "\n", "            ", "self", ".", "weights", "=", "[", "1.0", "]", "*", "len", "(", "estLeftDisp", ")", "\n", "\n", "", "if", "estRightDisp", "is", "not", "None", "and", "not", "isinstance", "(", "estRightDisp", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "estRightDisp", "=", "[", "estRightDisp", "]", "\n", "assert", "len", "(", "estLeftDisp", ")", "==", "len", "(", "estRightDisp", ")", ",", "'The number of left and right disparity maps should be same'", "\n", "\n", "# compute loss for per level", "\n", "", "loss_all_level", "=", "[", "]", "\n", "if", "estRightDisp", "is", "None", ":", "\n", "            ", "for", "est_disp_per_lvl", "in", "estLeftDisp", ":", "\n", "                ", "loss_all_level", ".", "append", "(", "\n", "self", ".", "loss_per_level", "(", "est_disp_per_lvl", ",", "leftImage", ",", "rightImage", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "est_left_disp_per_lvl", ",", "est_right_disp_per_lvl", "in", "zip", "(", "estRightDisp", ",", "estRightDisp", ")", ":", "\n", "                ", "leftMask", ",", "rightMask", "=", "self", ".", "get_per_level_not_occlusion", "(", "est_left_disp_per_lvl", ",", "est_right_disp_per_lvl", ")", "\n", "leftMask", ",", "rightMask", "=", "leftMask", ".", "expand_as", "(", "leftImage", ")", ",", "rightMask", ".", "expand_as", "(", "leftImage", ")", "\n", "loss_all_level", ".", "append", "(", "\n", "self", ".", "lr_loss_per_level", "(", "est_left_disp_per_lvl", ",", "est_right_disp_per_lvl", ",", "leftImage", ",", "rightImage", ",", "\n", "leftMask", ",", "rightMask", ")", "\n", ")", "\n", "\n", "# re-weight loss per level", "\n", "", "", "weighted_loss_all_level", "=", "dict", "(", ")", "\n", "for", "i", ",", "loss_per_level", "in", "enumerate", "(", "loss_all_level", ")", ":", "\n", "            ", "name", "=", "\"inverse_warp_loss_lvl{}\"", ".", "format", "(", "i", ")", "\n", "weighted_loss_all_level", "[", "name", "]", "=", "self", ".", "weights", "[", "i", "]", "*", "loss_per_level", "\n", "\n", "", "return", "weighted_loss_all_level", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.inverse_warp_loss.InverseWarpLoss.__repr__": [[130, 138], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "'{}\\n'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Loss weight: {}\\n'", ".", "format", "(", "self", ".", "weights", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Theta: {}\\n'", ".", "format", "(", "self", ".", "theta", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Epsilon: {}\\n'", ".", "format", "(", "self", ".", "eps", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'SSIM loss weight: {}\\n'", ".", "format", "(", "self", ".", "ssim_weight", ")", "\n", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.inverse_warp_loss.InverseWarpLoss.name": [[139, 142], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'InverseWarpLoss'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.conf_nll_loss.ConfidenceNllLoss.__init__": [[23, 34], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_disp", ",", "start_disp", "=", "0", ",", "weights", "=", "None", ",", "sparse", "=", "False", ")", ":", "\n", "        ", "self", ".", "max_disp", "=", "max_disp", "\n", "self", ".", "start_disp", "=", "start_disp", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "sparse", "=", "sparse", "\n", "if", "sparse", ":", "\n", "# sparse disparity ==> max_pooling", "\n", "            ", "self", ".", "scale_func", "=", "F", ".", "adaptive_max_pool2d", "\n", "", "else", ":", "\n", "# dense disparity ==> avg_pooling", "\n", "            ", "self", ".", "scale_func", "=", "F", ".", "adaptive_avg_pool2d", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.conf_nll_loss.ConfidenceNllLoss.loss_per_level": [[35, 57], ["mask.detach_().type_as.detach_().type_as.detach_().type_as", "mask.detach_().type_as.detach_().type_as.float().sum", "conf_nll_loss.ConfidenceNllLoss.scale_func", "mask.detach_().type_as.detach_().type_as.detach_", "mask.detach_().type_as.detach_().type_as.float", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid"], "methods", ["None"], ["", "", "def", "loss_per_level", "(", "self", ",", "estConf", ",", "gtDisp", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "estConf", ".", "shape", "\n", "scaled_gtDisp", "=", "gtDisp", "\n", "scale", "=", "1.0", "\n", "if", "gtDisp", ".", "shape", "[", "-", "2", "]", "!=", "H", "or", "gtDisp", ".", "shape", "[", "-", "1", "]", "!=", "W", ":", "\n", "# compute scale per level and scale gtDisp", "\n", "            ", "scale", "=", "gtDisp", ".", "shape", "[", "-", "1", "]", "/", "(", "W", "*", "1.0", ")", "\n", "scaled_gtDisp", "=", "gtDisp", "/", "scale", "\n", "scaled_gtDisp", "=", "self", ".", "scale_func", "(", "scaled_gtDisp", ",", "(", "H", ",", "W", ")", ")", "\n", "\n", "# mask for valid disparity", "\n", "# gt zero and lt max disparity", "\n", "", "mask", "=", "(", "scaled_gtDisp", ">", "self", ".", "start_disp", ")", "&", "(", "scaled_gtDisp", "<", "(", "self", ".", "max_disp", "/", "scale", ")", ")", "\n", "mask", "=", "mask", ".", "detach_", "(", ")", ".", "type_as", "(", "gtDisp", ")", "\n", "\n", "# NLL loss", "\n", "valid_pixel_number", "=", "mask", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "if", "valid_pixel_number", "<", "1.0", ":", "\n", "            ", "valid_pixel_number", "=", "1.0", "\n", "", "loss", "=", "(", "-", "1.0", "*", "F", ".", "logsigmoid", "(", "estConf", ")", "*", "mask", ")", ".", "sum", "(", ")", "/", "valid_pixel_number", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.conf_nll_loss.ConfidenceNllLoss.__call__": [[58, 78], ["dict", "enumerate", "isinstance", "conf_nll_loss.ConfidenceNllLoss.loss_per_level", "len"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.conf_nll_loss.ConfidenceNllLoss.loss_per_level"], ["", "def", "__call__", "(", "self", ",", "estConf", ",", "gtDisp", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "estConf", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "estConf", "=", "[", "estConf", "]", "\n", "\n", "", "if", "self", ".", "weights", "is", "None", ":", "\n", "            ", "self", ".", "weights", "=", "[", "1.0", "]", "*", "len", "(", "estConf", ")", "\n", "\n", "# compute loss for per level", "\n", "", "loss_all_level", "=", "[", "\n", "self", ".", "loss_per_level", "(", "est_conf_per_lvl", ",", "gtDisp", ")", "\n", "for", "est_conf_per_lvl", "in", "estConf", "\n", "]", "\n", "\n", "# re-weight loss per level", "\n", "weighted_loss_all_level", "=", "dict", "(", ")", "\n", "for", "i", ",", "loss_per_level", "in", "enumerate", "(", "loss_all_level", ")", ":", "\n", "            ", "name", "=", "\"conf_loss_lvl{}\"", ".", "format", "(", "i", ")", "\n", "weighted_loss_all_level", "[", "name", "]", "=", "self", ".", "weights", "[", "i", "]", "*", "loss_per_level", "\n", "\n", "", "return", "weighted_loss_all_level", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.conf_nll_loss.ConfidenceNllLoss.__repr__": [[79, 86], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "'{}\\n'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Max Disparity: {}\\n'", ".", "format", "(", "self", ".", "max_disp", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Loss weight: {}\\n'", ".", "format", "(", "self", ".", "weights", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Disparity is sparse: {}\\n'", ".", "format", "(", "self", ".", "sparse", ")", "\n", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.conf_nll_loss.ConfidenceNllLoss.name": [[87, 90], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'ConfidenceNLLLoss'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.test_stereo_focal_loss.testLosses.setUp": [[13, 15], ["torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:1\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.test_stereo_focal_loss.testLosses.testCase1": [[17, 64], ["gtDisp.to.to.to", "mmcv.Config", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "print", "print", "print", "print", "dmb.modeling.stereo.losses.builder.make_focal_loss_evaluator", "print", "print", "print", "dict", "dmb.modeling.stereo.losses.builder.make_focal_loss_evaluator.", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "dict", "dict", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.builder.make_focal_loss_evaluator"], ["", "def", "testCase1", "(", "self", ")", ":", "\n", "        ", "max_disp", "=", "5", "\n", "start_disp", "=", "-", "2", "\n", "dilation", "=", "2", "\n", "h", ",", "w", "=", "3", ",", "4", "\n", "d", "=", "(", "max_disp", "+", "dilation", "-", "1", ")", "//", "dilation", "\n", "variance", "=", "2", "\n", "\n", "gtDisp", "=", "torch", ".", "rand", "(", "1", ",", "1", ",", "h", ",", "w", ")", "*", "max_disp", "+", "start_disp", "\n", "\n", "gtDisp", "=", "gtDisp", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "cfg", "=", "Config", "(", "dict", "(", "\n", "data", "=", "dict", "(", "\n", "sparse", "=", "False", ",", "\n", ")", ",", "\n", "model", "=", "dict", "(", "\n", "losses", "=", "dict", "(", "\n", "focal_loss", "=", "dict", "(", "\n", "# the maximum disparity of disparity search range", "\n", "max_disp", "=", "max_disp", ",", "\n", "# the start disparity of disparity search range", "\n", "start_disp", "=", "start_disp", ",", "\n", "# the step between near disparity sample", "\n", "dilation", "=", "dilation", ",", "\n", "# weight for stereo focal loss with regard to other loss type", "\n", "weight", "=", "1.0", ",", "\n", "# weights for different scale loss", "\n", "weights", "=", "(", "1.0", ")", ",", "\n", "# stereo focal loss focal coefficient", "\n", "coefficient", "=", "5.0", ",", "\n", ")", "\n", ")", ",", "\n", ")", "\n", ")", ")", "\n", "\n", "estCost", "=", "torch", ".", "ones", "(", "1", ",", "d", ",", "h", ",", "w", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "estCost", ".", "requires_grad", "=", "True", "\n", "print", "(", "'\\n \\n Test Case 1:'", ")", "\n", "print", "(", "'*'", "*", "60", ")", "\n", "print", "(", "'Estimated Cost volume:'", ")", "\n", "print", "(", "estCost", ")", "\n", "\n", "stereo_focal_loss_evaluator", "=", "make_focal_loss_evaluator", "(", "cfg", ")", "\n", "print", "(", "stereo_focal_loss_evaluator", ")", "\n", "print", "(", "'*'", "*", "60", ")", "\n", "print", "(", "stereo_focal_loss_evaluator", "(", "estCost", "=", "estCost", ",", "gtDisp", "=", "gtDisp", ",", "variance", "=", "variance", ",", "disp_sample", "=", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.test_stereo_focal_loss.testLosses.testCase2": [[65, 119], ["torch.Tensor().repeat().permute().contiguous", "torch.Tensor().repeat().permute().contiguous", "torch.Tensor().repeat().permute().contiguous", "torch.Tensor().repeat().permute().contiguous", "gtDisp.to.to.to", "mmcv.Config", "print", "print", "print", "print", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "print", "print", "print", "dmb.modeling.stereo.losses.builder.make_focal_loss_evaluator", "print", "print", "print", "dict", "dmb.modeling.stereo.losses.builder.make_focal_loss_evaluator.", "torch.Tensor().repeat().permute", "torch.Tensor().repeat().permute", "torch.Tensor().repeat().permute", "torch.Tensor().repeat().permute", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "dict", "dict", "torch.Tensor().repeat", "torch.Tensor().repeat", "torch.Tensor().repeat", "torch.Tensor().repeat", "dict", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "dict"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.losses.builder.make_focal_loss_evaluator"], ["", "def", "testCase2", "(", "self", ")", ":", "\n", "        ", "max_disp", "=", "5", "\n", "start_disp", "=", "-", "2", "\n", "variance", "=", "2", "\n", "h", ",", "w", "=", "3", ",", "4", "\n", "disp_sample", "=", "torch", ".", "Tensor", "(", "[", "-", "2", ",", "0", ",", "2", "]", ")", ".", "repeat", "(", "1", ",", "h", ",", "w", ",", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "d", "=", "disp_sample", ".", "shape", "[", "1", "]", "\n", "\n", "gtDisp", "=", "torch", ".", "rand", "(", "1", ",", "1", ",", "h", ",", "w", ")", "*", "max_disp", "+", "start_disp", "\n", "\n", "gtDisp", "=", "gtDisp", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "gtDisp", ".", "requires_grad", "=", "True", "\n", "\n", "cfg", "=", "Config", "(", "dict", "(", "\n", "data", "=", "dict", "(", "\n", "sparse", "=", "False", ",", "\n", ")", ",", "\n", "model", "=", "dict", "(", "\n", "losses", "=", "dict", "(", "\n", "focal_loss", "=", "dict", "(", "\n", "# the maximum disparity of disparity search range", "\n", "max_disp", "=", "max_disp", ",", "\n", "# the start disparity of disparity search range", "\n", "start_disp", "=", "start_disp", ",", "\n", "# the step between near disparity sample", "\n", "# dilation=dilation,", "\n", "# weight for stereo focal loss with regard to other loss type", "\n", "weight", "=", "1.0", ",", "\n", "# weights for different scale loss", "\n", "weights", "=", "(", "1.0", ")", ",", "\n", "# stereo focal loss focal coefficient", "\n", "coefficient", "=", "5.0", ",", "\n", ")", "\n", ")", ",", "\n", ")", "\n", ")", ")", "\n", "\n", "print", "(", "'\\n \\n Test Case 2:'", ")", "\n", "print", "(", "'*'", "*", "60", ")", "\n", "print", "(", "'Ground Truth Disparity:'", ")", "\n", "print", "(", "gtDisp", ")", "\n", "\n", "estCost", "=", "torch", ".", "ones", "(", "1", ",", "d", ",", "h", ",", "w", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "estCost", ".", "requires_grad", "=", "True", "\n", "print", "(", "'*'", "*", "60", ")", "\n", "print", "(", "'Estimated Cost volume:'", ")", "\n", "print", "(", "estCost", ")", "\n", "\n", "stereo_focal_loss_evaluator", "=", "make_focal_loss_evaluator", "(", "cfg", ")", "\n", "print", "(", "stereo_focal_loss_evaluator", ")", "\n", "print", "(", "'*'", "*", "60", ")", "\n", "print", "(", "stereo_focal_loss_evaluator", "(", "estCost", "=", "estCost", ",", "gtDisp", "=", "gtDisp", ",", "variance", "=", "variance", ",", "disp_sample", "=", "disp_sample", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.functions.gaterecurrent2dnoind.GateRecurrent2dnoindFunction.forward": [[10, 25], ["X.size", "torch.zeros", "print", "gaterecurrent2d.forward", "ctx.save_for_backward", "X.size"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.modules.gaterecurrent2dnoind.GateRecurrent2dnoind.forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "X", ",", "G1", ",", "G2", ",", "G3", ",", "horizontal", ",", "reverse", ")", ":", "\n", "        ", "num", ",", "channels", ",", "height", ",", "width", "=", "X", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "zeros", "(", "num", ",", "channels", ",", "height", ",", "width", ",", "device", "=", "X", ".", "device", ")", "\n", "\n", "if", "not", "X", ".", "is_cuda", ":", "\n", "            ", "print", "(", "\"cpu version is not ready at this time\"", ")", "\n", "return", "0", "\n", "", "else", ":", "\n", "            ", "gaterecurrent2d", ".", "forward", "(", "horizontal", ",", "reverse", ",", "X", ",", "G1", ",", "G2", ",", "G3", ",", "output", ")", "\n", "ctx", ".", "save_for_backward", "(", "X", ",", "G1", ",", "G2", ",", "G3", ",", "output", ")", "\n", "ctx", ".", "hiddensize", "=", "X", ".", "size", "(", ")", "\n", "ctx", ".", "horizontal", "=", "horizontal", "\n", "ctx", ".", "reverse", "=", "reverse", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.functions.gaterecurrent2dnoind.GateRecurrent2dnoindFunction.backward": [[26, 40], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "gaterecurrent2d.backward"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.functions.gaterecurrent2dnoind.GateRecurrent2dnoindFunction.backward"], ["", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "assert", "(", "ctx", ".", "hiddensize", "is", "not", "None", "and", "grad_output", ".", "is_cuda", ")", "\n", "num", ",", "channels", ",", "height", ",", "width", "=", "ctx", ".", "hiddensize", "\n", "X", ",", "G1", ",", "G2", ",", "G3", ",", "output", "=", "ctx", ".", "saved_tensors", "\n", "\n", "grad_X", "=", "torch", ".", "zeros", "(", "num", ",", "channels", ",", "height", ",", "width", ",", "device", "=", "X", ".", "device", ")", "\n", "grad_G1", "=", "torch", ".", "zeros", "(", "num", ",", "channels", ",", "height", ",", "width", ",", "device", "=", "X", ".", "device", ")", "\n", "grad_G2", "=", "torch", ".", "zeros", "(", "num", ",", "channels", ",", "height", ",", "width", ",", "device", "=", "X", ".", "device", ")", "\n", "grad_G3", "=", "torch", ".", "zeros", "(", "num", ",", "channels", ",", "height", ",", "width", ",", "device", "=", "X", ".", "device", ")", "\n", "\n", "gaterecurrent2d", ".", "backward", "(", "ctx", ".", "horizontal", ",", "ctx", ".", "reverse", ",", "output", ",", "grad_output", ",", "X", ",", "G1", ",", "G2", ",", "G3", ",", "grad_X", ",", "grad_G1", ",", "grad_G2", ",", "grad_G3", ")", "\n", "\n", "return", "(", "grad_X", ",", "grad_G1", ",", "grad_G2", ",", "grad_G3", ")", "+", "(", "None", ",", ")", "*", "2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.modules.gaterecurrent2dnoind.GateRecurrent2dnoind.__init__": [[6, 10], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["    ", "import", "gaterecurrent2dnoind_cuda", "as", "gaterecurrent2d", "\n", "\n", "", "class", "GateRecurrent2dnoindFunction", "(", "Function", ")", ":", "\n", "\n", "    ", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.modules.gaterecurrent2dnoind.GateRecurrent2dnoind.forward": [[11, 13], ["functions.gaterecurrent2dnoind.GateRecurrent2dnoindFunction.apply"], "methods", ["None"], ["def", "forward", "(", "ctx", ",", "X", ",", "G1", ",", "G2", ",", "G3", ",", "horizontal", ",", "reverse", ")", ":", "\n", "        ", "num", ",", "channels", ",", "height", ",", "width", "=", "X", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "zeros", "(", "num", ",", "channels", ",", "height", ",", "width", ",", "device", "=", "X", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.kitti.base.KittiDatasetBase.__init__": [[11, 13], ["dmb.data.datasets.stereo.base.StereoDatasetBase.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["self", ".", "root", "=", "root", "\n", "self", ".", "data_list", "=", "self", ".", "annLoader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.kitti.base.KittiDatasetBase.Loader": [[14, 50], ["imageio.imread().transpose().astype", "imageio.imread().transpose().astype", "sample.update", "sample.update", "item.keys", "imageio.imread().astype", "item.keys", "imageio.imread().astype", "imageio.imread().transpose", "imageio.imread().transpose", "imageio.imread", "imageio.imread", "imageio.imread", "imageio.imread", "os.join", "os.join", "os.join", "os.join"], "methods", ["None"], ["# transforms for data augmentation", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "flag", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "data_list", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "", "def", "annLoader", "(", "self", ")", ":", "\n", "        ", "data_list", "=", "[", "]", "\n", "with", "open", "(", "file", "=", "self", ".", "annFile", ",", "mode", "=", "'r'", ")", "as", "fp", ":", "\n", "            ", "data_list", ".", "extend", "(", "json", ".", "load", "(", "fp", ")", ")", "\n", "", "return", "data_list", "\n", "\n", "", "def", "Loader", "(", "self", ",", "item", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "item", "=", "self", ".", "data_list", "[", "idx", "]", "\n", "sample", "=", "self", ".", "Loader", "(", "item", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_list", ")", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "'{}\\n'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Root: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'annFile: {}\\n'", ".", "format", "(", "self", ".", "annFile", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Length: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "\n", "return", "repr_str", "\n", "\n", "", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.kitti.base.KittiDatasetBase.name": [[51, 54], ["None"], "methods", ["None"], ["", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.kitti.kitti_2015.Kitti2015Dataset.__init__": [[10, 12], ["dmb.data.datasets.stereo.kitti.base.KittiDatasetBase.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "annFile", ",", "root", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Kitti2015Dataset", ",", "self", ")", ".", "__init__", "(", "annFile", ",", "root", ",", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.kitti.kitti_2015.Kitti2015Dataset.name": [[13, 16], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'KITTI-2015'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.kitti.kitti_2012.Kitti2012Dataset.__init__": [[10, 12], ["dmb.data.datasets.stereo.kitti.base.KittiDatasetBase.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "annFile", ",", "root", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Kitti2012Dataset", ",", "self", ")", ".", "__init__", "(", "annFile", ",", "root", ",", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.kitti.kitti_2012.Kitti2012Dataset.name": [[13, 16], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'KITTI-2012'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.scene_flow.base.SceneFlowDataset.__init__": [[11, 13], ["dmb.data.datasets.stereo.base.StereoDatasetBase.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["self", ".", "root", "=", "root", "\n", "self", ".", "data_list", "=", "self", ".", "annLoader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.scene_flow.base.SceneFlowDataset.Loader": [[14, 50], ["imageio.imread().transpose().astype", "imageio.imread().transpose().astype", "dmb.data.datasets.utils.load_scene_flow_disp", "dmb.data.datasets.utils.load_scene_flow_disp", "item.keys", "os.join", "item.keys", "os.join", "imageio.imread().transpose", "imageio.imread().transpose", "imageio.imread", "imageio.imread", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.load_disp.load_scene_flow_disp", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.load_disp.load_scene_flow_disp"], ["# transforms for data augmentation", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "flag", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "data_list", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "", "def", "annLoader", "(", "self", ")", ":", "\n", "        ", "data_list", "=", "[", "]", "\n", "with", "open", "(", "file", "=", "self", ".", "annFile", ",", "mode", "=", "'r'", ")", "as", "fp", ":", "\n", "            ", "data_list", ".", "extend", "(", "json", ".", "load", "(", "fp", ")", ")", "\n", "", "return", "data_list", "\n", "\n", "", "def", "Loader", "(", "self", ",", "item", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "item", "=", "self", ".", "data_list", "[", "idx", "]", "\n", "sample", "=", "self", ".", "Loader", "(", "item", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_list", ")", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "'{}\\n'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Root: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'annFile: {}\\n'", ".", "format", "(", "self", ".", "annFile", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Length: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "\n", "return", "repr_str", "\n", "\n", "", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.scene_flow.base.SceneFlowDataset.name": [[52, 55], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flying_chairs.base.FlyingChairsDataset.__init__": [[11, 13], ["dmb.data.datasets.flow.base.FlowDatasetBase.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["self", ".", "root", "=", "root", "\n", "self", ".", "data_list", "=", "self", ".", "annLoader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flying_chairs.base.FlyingChairsDataset.Loader": [[14, 40], ["imageio.imread().transpose().astype", "imageio.imread().transpose().astype", "dmb.data.datasets.utils.load_flying_chairs_flow().transpose().astype", "item.keys", "imageio.imread().transpose", "imageio.imread().transpose", "dmb.data.datasets.utils.load_flying_chairs_flow().transpose", "imageio.imread", "imageio.imread", "dmb.data.datasets.utils.load_flying_chairs_flow", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.load_flow.load_flying_chairs_flow"], ["# transforms for data augmentation", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "flag", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "data_list", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "", "def", "annLoader", "(", "self", ")", ":", "\n", "        ", "data_list", "=", "[", "]", "\n", "with", "open", "(", "file", "=", "self", ".", "annFile", ",", "mode", "=", "'r'", ")", "as", "fp", ":", "\n", "            ", "data_list", ".", "extend", "(", "json", ".", "load", "(", "fp", ")", ")", "\n", "", "return", "data_list", "\n", "\n", "", "def", "Loader", "(", "self", ",", "item", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "item", "=", "self", ".", "data_list", "[", "idx", "]", "\n", "sample", "=", "self", ".", "Loader", "(", "item", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_list", ")", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flying_chairs.base.FlyingChairsDataset.name": [[42, 45], ["None"], "methods", ["None"], ["repr_str", "+=", "' '", "*", "4", "+", "'Root: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'annFile: {}\\n'", ".", "format", "(", "self", ".", "annFile", ")", "\n", "repr_str", "+=", "' '", "*", "4", "+", "'Length: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.evaluation.__init__.output_evaluation_in_pandas": [[4, 11], ["stereo.disp_output_evaluation_in_pandas", "flow.flow_output_evaluation_in_pandas"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.stereo.eval_hooks.disp_output_evaluation_in_pandas", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval_hooks.flow_output_evaluation_in_pandas"], []], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.evaluation.__init__.calc_error": [[16, 23], ["stereo.remove_padding", "flow.remove_padding"], "function", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.flow.eval.remove_padding"], []], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.loaders.samplers.DistributedSampler.__init__": [[14, 17], ["torch.utils.data.DistributedSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ",", "num_replicas", "=", "num_replicas", ",", "rank", "=", "rank", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.loaders.samplers.DistributedSampler.__iter__": [[18, 36], ["iter", "torch.Generator", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.arange", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.iter"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "indices", "=", "indices", "[", "self", ".", "rank", ":", "self", ".", "total_size", ":", "self", ".", "num_replicas", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.loaders.samplers.GroupSampler.__init__": [[40, 50], ["hasattr", "dataset.flag.astype", "numpy.bincount", "enumerate", "int", "numpy.ceil"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "samples_per_gpu", "=", "1", ")", ":", "\n", "        ", "assert", "hasattr", "(", "dataset", ",", "'flag'", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "samples_per_gpu", "=", "samples_per_gpu", "\n", "self", ".", "flag", "=", "dataset", ".", "flag", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "self", ".", "num_samples", "=", "0", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "self", ".", "num_samples", "+=", "int", "(", "np", ".", "ceil", "(", "\n", "size", "/", "self", ".", "samples_per_gpu", ")", ")", "*", "self", ".", "samples_per_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.loaders.samplers.GroupSampler.__iter__": [[51, 73], ["enumerate", "numpy.concatenate", "numpy.concatenate", "torch.from_numpy().long", "iter", "numpy.random.shuffle", "numpy.concatenate", "torch.from_numpy().long.append", "len", "numpy.where", "len", "len", "numpy.random.permutation", "torch.from_numpy", "int", "range", "numpy.ceil", "len"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.iter"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "[", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "if", "size", "==", "0", ":", "\n", "                ", "continue", "\n", "", "indice", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "i", ")", "[", "0", "]", "\n", "assert", "len", "(", "indice", ")", "==", "size", "\n", "np", ".", "random", ".", "shuffle", "(", "indice", ")", "\n", "num_extra", "=", "int", "(", "np", ".", "ceil", "(", "size", "/", "self", ".", "samples_per_gpu", ")", "\n", ")", "*", "self", ".", "samples_per_gpu", "-", "len", "(", "indice", ")", "\n", "indice", "=", "np", ".", "concatenate", "(", "[", "indice", ",", "indice", "[", ":", "num_extra", "]", "]", ")", "\n", "indices", ".", "append", "(", "indice", ")", "\n", "", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "[", "\n", "indices", "[", "i", "*", "self", ".", "samples_per_gpu", ":", "(", "i", "+", "1", ")", "*", "self", ".", "samples_per_gpu", "]", "\n", "for", "i", "in", "np", ".", "random", ".", "permutation", "(", "\n", "range", "(", "len", "(", "indices", ")", "//", "self", ".", "samples_per_gpu", ")", ")", "\n", "]", "\n", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "indices", ")", ".", "long", "(", ")", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.loaders.samplers.GroupSampler.__len__": [[74, 76], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.loaders.samplers.DistributedGroupSampler.__init__": [[93, 118], ["hasattr", "numpy.bincount", "enumerate", "torch.distributed.get_world_size", "torch.distributed.get_rank", "int", "math.ceil"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "num_replicas", "=", "None", ",", "\n", "rank", "=", "None", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "num_replicas", "=", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "rank", "=", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "samples_per_gpu", "=", "samples_per_gpu", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "\n", "assert", "hasattr", "(", "self", ".", "dataset", ",", "'flag'", ")", "\n", "self", ".", "flag", "=", "self", ".", "dataset", ".", "flag", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "\n", "self", ".", "num_samples", "=", "0", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "self", ".", "num_samples", "+=", "int", "(", "\n", "math", ".", "ceil", "(", "self", ".", "group_sizes", "[", "i", "]", "*", "1.0", "/", "self", ".", "samples_per_gpu", "/", "\n", "self", ".", "num_replicas", ")", ")", "*", "self", ".", "samples_per_gpu", "\n", "", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.loaders.samplers.DistributedGroupSampler.__iter__": [[119, 154], ["torch.Generator", "torch.Generator.manual_seed", "enumerate", "iter", "len", "len", "indice[].tolist", "list", "range", "numpy.where", "len", "len", "torch.randperm", "int", "len", "list", "math.ceil", "torch.randperm", "int"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.utils.runner.Runner.iter"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "\n", "indices", "=", "[", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "if", "size", ">", "0", ":", "\n", "                ", "indice", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "i", ")", "[", "0", "]", "\n", "assert", "len", "(", "indice", ")", "==", "size", "\n", "indice", "=", "indice", "[", "list", "(", "torch", ".", "randperm", "(", "int", "(", "size", ")", ",", "\n", "generator", "=", "g", ")", ")", "]", ".", "tolist", "(", ")", "\n", "extra", "=", "int", "(", "\n", "math", ".", "ceil", "(", "\n", "size", "*", "1.0", "/", "self", ".", "samples_per_gpu", "/", "self", ".", "num_replicas", ")", "\n", ")", "*", "self", ".", "samples_per_gpu", "*", "self", ".", "num_replicas", "-", "len", "(", "indice", ")", "\n", "indice", "+=", "indice", "[", ":", "extra", "]", "\n", "indices", "+=", "indice", "\n", "\n", "", "", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "indices", "=", "[", "\n", "indices", "[", "j", "]", "for", "i", "in", "list", "(", "\n", "torch", ".", "randperm", "(", "\n", "len", "(", "indices", ")", "//", "self", ".", "samples_per_gpu", ",", "generator", "=", "g", ")", ")", "\n", "for", "j", "in", "range", "(", "i", "*", "self", ".", "samples_per_gpu", ",", "(", "i", "+", "1", ")", "*", "\n", "self", ".", "samples_per_gpu", ")", "\n", "]", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.loaders.samplers.DistributedGroupSampler.__len__": [[155, 157], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.loaders.samplers.DistributedGroupSampler.set_epoch": [[158, 160], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.loaders.builder.build_data_loader": [[17, 53], ["kwargs.get", "torch.utils.data.DataLoader", "mmcv.runner.get_dist_info", "samplers.DistributedGroupSampler", "samplers.DistributedSampler", "samplers.GroupSampler", "functools.partial"], "function", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "# Concatenate left and right feature to form cost volume", "\n", "", "", "class", "CatCostProcessor", "(", "CostProcessor", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "CatCostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "cat_func", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "get", "(", "'type'", ",", "'default'", ")", "\n", "self", ".", "cat_func", "=", "CAT_FUNCS", "[", "cat_func", "]", "\n", "\n", "self", ".", "default_args", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "copy", "(", ")", "\n", "self", ".", "default_args", ".", "pop", "(", "'type'", ")", "\n", "\n", "self", ".", "aggregator", "=", "build_cost_aggregator", "(", "cfg", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "ref_fms", ",", "tgt_fms", ",", "disp_sample", "=", "None", ")", ":", "\n", "# 1. build raw cost by concat", "\n", "        ", "cat_cost", "=", "self", ".", "cat_func", "(", "ref_fms", ",", "tgt_fms", ",", "disp_sample", "=", "disp_sample", ",", "**", "self", ".", "default_args", ")", "\n", "\n", "# 2. aggregate cost by 3D-hourglass", "\n", "costs", "=", "self", ".", "aggregator", "(", "cat_cost", ")", "\n", "\n", "return", "costs", "\n", "\n", "\n", "# Use the difference between left and right feature to form cost volume", "\n", "", "", "class", "DifCostProcessor", "(", "CostProcessor", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "DifCostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "dif_func", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "get", "(", "'type'", ",", "'default'", ")", "\n", "self", ".", "dif_func", "=", "DIF_FUNCS", "[", "dif_func", "]", "\n", "\n", "self", ".", "default_args", "=", "cfg", ".", "model", ".", "cost_processor", ".", "cost_computation", ".", "copy", "(", ")", "\n", "self", ".", "default_args", ".", "pop", "(", "'type'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.transforms.Compose.__init__": [[2, 4], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.transforms.Compose.__call__": [[5, 9], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "sample", "=", "t", "(", "sample", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.transforms.Compose.__repr__": [[10, 17], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "\"\\n\"", "\n", "format_string", "+=", "\"    {0}\"", ".", "format", "(", "t", ")", "\n", "", "format_string", "+=", "\"\\n)\"", "\n", "return", "format_string", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.RandomRotate.__init__": [[33, 38], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "angle", ",", "diff_angle", "=", "0", ",", "order", "=", "2", ",", "reshape", "=", "False", ")", ":", "\n", "        ", "self", ".", "angle", "=", "angle", "\n", "self", ".", "reshape", "=", "reshape", "\n", "self", ".", "order", "=", "order", "\n", "self", ".", "diff_angle", "=", "diff_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.RandomRotate.__call__": [[39, 66], ["random.uniform", "random.uniform", "numpy.fromfunction", "scipy.interpolation.rotate", "scipy.interpolation.rotate", "scipy.interpolation.rotate", "numpy.copy", "sample.keys", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "'flow'", "not", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "return", "sample", "\n", "\n", "", "applied_angle", "=", "random", ".", "uniform", "(", "-", "self", ".", "angle", ",", "self", ".", "angle", ")", "\n", "diff", "=", "random", ".", "uniform", "(", "-", "self", ".", "diff_angle", ",", "self", ".", "diff_angle", ")", "\n", "angle1", "=", "applied_angle", "-", "diff", "/", "2", "\n", "angle2", "=", "applied_angle", "+", "diff", "/", "2", "\n", "angle1_rad", "=", "angle1", "*", "np", ".", "pi", "/", "180", "\n", "\n", "h", ",", "w", "=", "sample", "[", "'leftImage'", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "def", "rotate_flow", "(", "k", ",", "i", ",", "j", ")", ":", "\n", "            ", "return", "-", "k", "*", "(", "j", "-", "w", "/", "2", ")", "*", "(", "diff", "*", "np", ".", "pi", "/", "180", ")", "+", "(", "1", "-", "k", ")", "*", "(", "i", "-", "h", "/", "2", ")", "*", "(", "diff", "*", "np", ".", "pi", "/", "180", ")", "\n", "\n", "", "rotate_flow_map", "=", "np", ".", "fromfunction", "(", "rotate_flow", ",", "sample", "[", "'flow'", "]", ".", "shape", ")", "\n", "sample", "[", "'flow'", "]", "+=", "rotate_flow_map", "\n", "\n", "sample", "[", "'leftImage'", "]", "=", "ndimage", ".", "interpolation", ".", "rotate", "(", "sample", "[", "'leftImage'", "]", ",", "angle1", ",", "axes", "=", "(", "-", "2", ",", "-", "1", ")", ",", "reshape", "=", "self", ".", "reshape", ",", "order", "=", "self", ".", "order", ")", "\n", "sample", "[", "'rightImage'", "]", "=", "ndimage", ".", "interpolation", ".", "rotate", "(", "sample", "[", "'rightImage'", "]", ",", "angle2", ",", "axes", "=", "(", "-", "2", ",", "-", "1", ")", ",", "reshape", "=", "self", ".", "reshape", ",", "order", "=", "self", ".", "order", ")", "\n", "sample", "[", "'flow'", "]", "=", "ndimage", ".", "interpolation", ".", "rotate", "(", "sample", "[", "'flow'", "]", ",", "angle1", ",", "axes", "=", "(", "-", "2", ",", "-", "1", ")", ",", "reshape", "=", "self", ".", "reshape", ",", "order", "=", "self", ".", "order", ")", "\n", "# flow vectors must be rotated too! careful about Y flow which is upside down, clockwise", "\n", "flow", "=", "np", ".", "copy", "(", "sample", "[", "'flow'", "]", ")", "\n", "sample", "[", "'flow'", "]", "[", "0", ",", ":", ",", ":", "]", "=", "np", ".", "cos", "(", "angle1_rad", ")", "*", "flow", "[", "0", ",", ":", ",", ":", "]", "+", "np", ".", "sin", "(", "angle1_rad", ")", "*", "flow", "[", "1", ",", ":", ",", ":", "]", "\n", "sample", "[", "'flow'", "]", "[", "1", ",", ":", ",", ":", "]", "=", "-", "np", ".", "sin", "(", "angle1_rad", ")", "*", "flow", "[", "0", ",", ":", ",", ":", "]", "+", "np", ".", "cos", "(", "angle1_rad", ")", "*", "flow", "[", "1", ",", ":", ",", ":", "]", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.ToTensor.__call__": [[81, 86], ["sample.keys", "isinstance", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "sample[].copy"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "for", "k", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "if", "sample", "[", "k", "]", "is", "not", "None", "and", "isinstance", "(", "sample", "[", "k", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "sample", "[", "k", "]", "=", "torch", ".", "from_numpy", "(", "sample", "[", "k", "]", ".", "copy", "(", ")", ")", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.CenterCrop.__init__": [[106, 111], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.CenterCrop.__call__": [[112, 126], ["sample.keys", "isinstance"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "h", ",", "w", "=", "sample", "[", "'leftImage'", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "sample", "\n", "\n", "", "x1", "=", "(", "w", "-", "tw", ")", "//", "2", "\n", "y1", "=", "(", "h", "-", "th", ")", "//", "2", "\n", "\n", "for", "k", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "if", "sample", "[", "k", "]", "is", "not", "None", "and", "isinstance", "(", "sample", "[", "k", "]", ",", "(", "np", ".", "ndarray", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "                ", "sample", "[", "k", "]", "=", "sample", "[", "k", "]", "[", ":", ",", "y1", ":", "y1", "+", "th", ",", "x1", ":", "x1", "+", "tw", "]", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.RandomCrop.__init__": [[144, 149], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.RandomCrop.__call__": [[150, 164], ["random.randint", "random.randint", "sample.keys", "isinstance"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "h", ",", "w", "=", "sample", "[", "'leftImage'", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "sample", "\n", "\n", "", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "\n", "for", "k", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "if", "sample", "[", "k", "]", "is", "not", "None", "and", "isinstance", "(", "sample", "[", "k", "]", ",", "(", "np", ".", "ndarray", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "                ", "sample", "[", "k", "]", "=", "sample", "[", "k", "]", "[", ":", ",", "y1", ":", "y1", "+", "th", ",", "x1", ":", "x1", "+", "tw", "]", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.RandomTranslate.__init__": [[179, 184], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "translation", ")", ":", "\n", "        ", "if", "isinstance", "(", "translation", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "translation", "=", "(", "int", "(", "translation", ")", ",", "int", "(", "translation", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "translation", "=", "translation", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.RandomTranslate.__call__": [[185, 204], ["random.randint", "random.randint", "max", "min", "max", "min", "max", "min", "max", "min", "isinstance"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "h", ",", "w", "=", "sample", "[", "'leftImage'", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "th", ",", "tw", "=", "self", ".", "translation", "\n", "tw", "=", "random", ".", "randint", "(", "-", "tw", ",", "tw", ")", "\n", "th", "=", "random", ".", "randint", "(", "-", "th", ",", "th", ")", "\n", "if", "tw", "==", "0", "and", "th", "==", "0", ":", "\n", "            ", "return", "sample", "\n", "# compute x1,x2,y1,y2 for img1 and target, and x3,x4,y3,y4 for img2", "\n", "", "x1", ",", "x2", ",", "x3", ",", "x4", "=", "max", "(", "0", ",", "tw", ")", ",", "min", "(", "w", "+", "tw", ",", "w", ")", ",", "max", "(", "0", ",", "-", "tw", ")", ",", "min", "(", "w", "-", "tw", ",", "w", ")", "\n", "y1", ",", "y2", ",", "y3", ",", "y4", "=", "max", "(", "0", ",", "th", ")", ",", "min", "(", "h", "+", "th", ",", "h", ")", ",", "max", "(", "0", ",", "-", "th", ")", ",", "min", "(", "h", "-", "th", ",", "h", ")", "\n", "\n", "sample", "[", "'leftImage'", "]", "=", "sample", "[", "'leftImage'", "]", "[", ":", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "\n", "sample", "[", "'rightImage'", "]", "=", "sample", "[", "'rightImage'", "]", "[", ":", ",", "y3", ":", "y4", ",", "x3", ":", "x4", "]", "\n", "\n", "if", "sample", "[", "'flow'", "]", "is", "not", "None", "and", "isinstance", "(", "sample", "[", "'flow'", "]", ",", "(", "np", ".", "ndarray", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "            ", "sample", "[", "'flow'", "]", "[", "0", ",", ":", ",", ":", "]", "+=", "tw", "\n", "sample", "[", "'flow'", "]", "[", "1", ",", ":", ",", ":", "]", "+=", "th", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.Normalize.__init__": [[221, 224], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.Normalize.__call__": [[225, 233], ["torchvision.normalize", "torchvision.normalize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "[", "'leftImage'", "]", "=", "F", ".", "normalize", "(", "\n", "sample", "[", "'leftImage'", "]", ",", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", "\n", ")", "\n", "sample", "[", "'rightImage'", "]", "=", "F", ".", "normalize", "(", "\n", "sample", "[", "'rightImage'", "]", ",", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", "\n", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.CenterCat.__init__": [[253, 258], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.CenterCat.__call__": [[259, 273], ["torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "h", ",", "w", "=", "sample", "[", "'leftImage'", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "H", ",", "W", "=", "self", ".", "size", "\n", "pad_top", "=", "(", "H", "-", "h", ")", "//", "2", "\n", "pad_bottom", "=", "(", "H", "-", "h", ")", "-", "pad_top", "\n", "pad_left", "=", "(", "W", "-", "w", ")", "//", "2", "\n", "pad_right", "=", "(", "W", "-", "w", ")", "-", "pad_left", "\n", "\n", "pad", "=", "[", "pad_top", ",", "pad_bottom", ",", "pad_left", ",", "pad_right", "]", "\n", "\n", "sample", "[", "'leftImage'", "]", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "sample", "[", "'leftImage'", "]", ",", "pad", "=", "pad", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "sample", "[", "'rightImage'", "]", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "sample", "[", "'rightImage'", "]", ",", "pad", "=", "pad", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.RandomHorizontalFlip.__call__": [[289, 299], ["random.random", "sample.keys", "isinstance", "torch.flip", "torch.flip", "torch.flip", "torch.flip"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "for", "k", "in", "sample", ".", "keys", "(", ")", ":", "\n", "                ", "if", "sample", "[", "k", "]", "is", "not", "None", "and", "isinstance", "(", "sample", "[", "k", "]", ",", "(", "torch", ".", "Tensor", ")", ")", ":", "\n", "                    ", "sample", "[", "k", "]", "=", "torch", ".", "flip", "(", "sample", "[", "k", "]", ",", "[", "-", "1", "]", ")", "\n", "# if flow flipped", "\n", "if", "'flow'", "in", "k", ":", "\n", "                        ", "sample", "[", "k", "]", "[", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "\n", "", "", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.RandomVerticalFlip.__call__": [[316, 326], ["random.random", "sample.keys", "isinstance", "torch.flip", "torch.flip", "torch.flip", "torch.flip"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "for", "k", "in", "sample", ".", "keys", "(", ")", ":", "\n", "                ", "if", "sample", "[", "k", "]", "is", "not", "None", "and", "isinstance", "(", "sample", "[", "k", "]", ",", "(", "torch", ".", "Tensor", ")", ")", ":", "\n", "                    ", "sample", "[", "k", "]", "=", "torch", ".", "flip", "(", "sample", "[", "k", "]", ",", "[", "-", "2", "]", ")", "\n", "# if flow flipped", "\n", "if", "'flow'", "in", "k", ":", "\n", "                        ", "sample", "[", "k", "]", "[", ":", ",", ":", ",", "1", "]", "*=", "-", "1", "\n", "\n", "", "", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.Grayscale.grayscale_img": [[333, 339], ["img.clone", "gs[].mul_().add_().add_", "gs[].copy_", "gs[].copy_", "gs[].mul_().add_", "gs[].mul_"], "methods", ["None"], ["    ", "def", "grayscale_img", "(", "self", ",", "img", ")", ":", "\n", "        ", "gs", "=", "img", ".", "clone", "(", ")", "\n", "gs", "[", "0", "]", ".", "mul_", "(", "0.299", ")", ".", "add_", "(", "0.587", ",", "gs", "[", "1", "]", ")", ".", "add_", "(", "0.114", ",", "gs", "[", "2", "]", ")", "\n", "gs", "[", "1", "]", ".", "copy_", "(", "gs", "[", "0", "]", ")", "\n", "gs", "[", "2", "]", ".", "copy_", "(", "gs", "[", "0", "]", ")", "\n", "return", "gs", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.Grayscale.__call__": [[340, 344], ["flow_trans.Grayscale.grayscale_img", "flow_trans.Grayscale.grayscale_img"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.Grayscale.grayscale_img", "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.Grayscale.grayscale_img"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "leftImage", "=", "self", ".", "grayscale_img", "(", "sample", "[", "'leftImage'", "]", ")", "\n", "rightImage", "=", "self", ".", "grayscale_img", "(", "sample", "[", "'rightImage'", "]", ")", "\n", "return", "leftImage", ",", "rightImage", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.Saturation.__init__": [[360, 362], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "var", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.Saturation.__call__": [[363, 370], ["random.uniform", "sample[].lerp", "sample[].lerp", "flow_trans.Grayscale"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "leftImage", ",", "rightImage", "=", "Grayscale", "(", ")", "(", "sample", ")", "\n", "alpha", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "var", ")", "\n", "sample", "[", "'leftImage'", "]", "=", "sample", "[", "'leftImage'", "]", ".", "lerp", "(", "leftImage", ",", "alpha", ")", "\n", "sample", "[", "'rightImage'", "]", "=", "sample", "[", "'rightImage'", "]", ".", "lerp", "(", "rightImage", ",", "alpha", ")", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.Brightness.__init__": [[386, 388], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "var", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.Brightness.__call__": [[389, 398], ["sample[].new().resize_as_().zero_", "sample[].new().resize_as_().zero_", "random.uniform", "sample[].lerp", "sample[].lerp", "sample[].new().resize_as_", "sample[].new().resize_as_", "sample[].new", "sample[].new"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "leftImage", "=", "sample", "[", "'leftImage'", "]", ".", "new", "(", ")", ".", "resize_as_", "(", "sample", "[", "'leftImage'", "]", ")", ".", "zero_", "(", ")", "\n", "rightImage", "=", "sample", "[", "'rightImage'", "]", ".", "new", "(", ")", ".", "resize_as_", "(", "sample", "[", "'rightImage'", "]", ")", ".", "zero_", "(", ")", "\n", "alpha", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "var", ")", "\n", "\n", "sample", "[", "'leftImage'", "]", "=", "sample", "[", "'leftImage'", "]", ".", "lerp", "(", "leftImage", ",", "alpha", ")", "\n", "sample", "[", "'rightImage'", "]", "=", "sample", "[", "'rightImage'", "]", ".", "lerp", "(", "rightImage", ",", "alpha", ")", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.Contrast.__init__": [[414, 416], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "var", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.Contrast.__call__": [[417, 427], ["leftImage.fill_.fill_.fill_", "rightImage.fill_.fill_.fill_", "random.uniform", "sample[].lerp", "sample[].lerp", "flow_trans.Grayscale", "leftImage.fill_.fill_.mean", "rightImage.fill_.fill_.mean"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "leftImage", ",", "rightImage", "=", "Grayscale", "(", ")", "(", "sample", ")", "\n", "leftImage", "=", "leftImage", ".", "fill_", "(", "leftImage", ".", "mean", "(", ")", ")", "\n", "rightImage", "=", "rightImage", ".", "fill_", "(", "rightImage", ".", "mean", "(", ")", ")", "\n", "alpha", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "var", ")", "\n", "\n", "sample", "[", "'leftImage'", "]", "=", "sample", "[", "'leftImage'", "]", ".", "lerp", "(", "leftImage", ",", "alpha", ")", "\n", "sample", "[", "'rightImage'", "]", "=", "sample", "[", "'rightImage'", "]", ".", "lerp", "(", "rightImage", ",", "alpha", ")", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.RandomOrder.__init__": [[445, 447], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.RandomOrder.__call__": [[448, 455], ["torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "self", ".", "transforms", "is", "None", ":", "\n", "            ", "return", "sample", "\n", "", "order", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "transforms", ")", ")", "\n", "for", "i", "in", "order", ":", "\n", "            ", "sample", "=", "self", ".", "transforms", "[", "i", "]", "(", "sample", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.flow_trans.ColorJitter.__init__": [[471, 481], ["flow_trans.RandomOrder.__init__", "transforms.append", "transforms.append", "transforms.append", "flow_trans.Brightness", "flow_trans.Contrast", "flow_trans.Saturation"], "methods", ["home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__"], ["def", "__init__", "(", "self", ",", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ":", "\n", "        ", "transforms", "=", "[", "]", "\n", "if", "brightness", "!=", "0", ":", "\n", "            ", "transforms", ".", "append", "(", "Brightness", "(", "brightness", ")", ")", "\n", "", "if", "contrast", "!=", "0", ":", "\n", "            ", "transforms", ".", "append", "(", "Contrast", "(", "contrast", ")", ")", "\n", "", "if", "saturation", "!=", "0", ":", "\n", "            ", "transforms", ".", "append", "(", "Saturation", "(", "saturation", ")", ")", "\n", "\n", "", "super", "(", "ColorJitter", ",", "self", ")", ".", "__init__", "(", "transforms", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.ToTensor.__call__": [[16, 21], ["sample.keys", "isinstance", "torch.from_numpy", "sample[].copy"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "for", "k", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "if", "sample", "[", "k", "]", "is", "not", "None", "and", "isinstance", "(", "sample", "[", "k", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "sample", "[", "k", "]", "=", "torch", ".", "from_numpy", "(", "sample", "[", "k", "]", ".", "copy", "(", ")", ")", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.ToArray.__call__": [[26, 31], ["sample.keys", "isinstance", "numpy.array"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "for", "k", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "if", "sample", "[", "k", "]", "is", "not", "None", "and", "isinstance", "(", "sample", "[", "k", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "sample", "[", "k", "]", "=", "np", ".", "array", "(", "sample", "[", "k", "]", ")", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.CenterCrop.__init__": [[39, 44], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.CenterCrop.__call__": [[45, 59], ["sample.keys", "isinstance"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "h", ",", "w", "=", "sample", "[", "'leftImage'", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "sample", "\n", "\n", "", "x1", "=", "(", "w", "-", "tw", ")", "//", "2", "\n", "y1", "=", "(", "h", "-", "th", ")", "//", "2", "\n", "\n", "for", "k", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "if", "sample", "[", "k", "]", "is", "not", "None", "and", "isinstance", "(", "sample", "[", "k", "]", ",", "(", "np", ".", "ndarray", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "                ", "sample", "[", "k", "]", "=", "sample", "[", "k", "]", "[", ":", ",", "y1", ":", "y1", "+", "th", ",", "x1", ":", "x1", "+", "tw", "]", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RandomCrop.__init__": [[67, 72], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RandomCrop.__call__": [[73, 87], ["random.randint", "random.randint", "sample.keys", "isinstance"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "h", ",", "w", "=", "sample", "[", "'leftImage'", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "sample", "\n", "\n", "", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "\n", "for", "k", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "if", "sample", "[", "k", "]", "is", "not", "None", "and", "isinstance", "(", "sample", "[", "k", "]", ",", "(", "np", ".", "ndarray", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "                ", "sample", "[", "k", "]", "=", "sample", "[", "k", "]", "[", ":", ",", "y1", ":", "y1", "+", "th", ",", "x1", ":", "x1", "+", "tw", "]", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.Normalize.__init__": [[90, 93], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.Normalize.__call__": [[94, 111], ["torchvision.normalize", "torchvision.normalize", "torchvision.normalize", "torchvision.normalize", "torchvision.normalize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "[", "'leftImage'", "]", "=", "F", ".", "normalize", "(", "\n", "sample", "[", "'leftImage'", "]", ",", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", "\n", ")", "\n", "sample", "[", "'rightImage'", "]", "=", "F", ".", "normalize", "(", "\n", "sample", "[", "'rightImage'", "]", ",", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", "\n", ")", "\n", "sample", "[", "'rightImage_c'", "]", "=", "F", ".", "normalize", "(", "\n", "sample", "[", "'rightImage_c'", "]", ",", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", "\n", ")", "\n", "sample", "[", "'raw_leftImage'", "]", "=", "F", ".", "normalize", "(", "\n", "sample", "[", "'raw_leftImage'", "]", ",", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", "\n", ")", "\n", "sample", "[", "'raw_rightImage'", "]", "=", "F", ".", "normalize", "(", "\n", "sample", "[", "'raw_rightImage'", "]", ",", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", "\n", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.StereoPad.__init__": [[114, 119], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.StereoPad.__call__": [[120, 152], ["torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "h", ",", "w", "=", "sample", "[", "'leftImage'", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "sample", "\n", "\n", "", "base", "=", "48", "\n", "\n", "if", "h", ">", "th", ":", "\n", "            ", "th", "=", "(", "(", "h", "//", "base", ")", "+", "1", ")", "*", "base", "\n", "", "if", "w", ">", "tw", ":", "\n", "            ", "tw", "=", "(", "(", "w", "//", "base", ")", "+", "1", ")", "*", "base", "\n", "\n", "", "pad_left", "=", "0", "\n", "pad_right", "=", "tw", "-", "w", "\n", "pad_top", "=", "th", "-", "h", "\n", "pad_bottom", "=", "0", "\n", "\n", "sample", "[", "'leftImage'", "]", "=", "pad", "(", "\n", "sample", "[", "'leftImage'", "]", ",", "[", "pad_left", ",", "pad_right", ",", "pad_top", ",", "pad_bottom", "]", ",", "\n", "mode", "=", "'constant'", ",", "value", "=", "0", "\n", ")", "\n", "sample", "[", "'rightImage'", "]", "=", "pad", "(", "\n", "sample", "[", "'rightImage'", "]", ",", "[", "pad_left", ",", "pad_right", ",", "pad_top", ",", "pad_bottom", "]", ",", "\n", "mode", "=", "'constant'", ",", "value", "=", "0", "\n", ")", "\n", "sample", "[", "'rightImage_c'", "]", "=", "pad", "(", "\n", "sample", "[", "'rightImage_c'", "]", ",", "[", "pad_left", ",", "pad_right", ",", "pad_top", ",", "pad_bottom", "]", ",", "\n", "mode", "=", "'constant'", ",", "value", "=", "0", "\n", ")", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__init__": [[156, 158], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "raw", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.stereo_trans.RAW.__call__": [[159, 165], ["sample[].copy", "sample[].copy", "sample[].copy"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "[", "'raw_leftImage'", "]", "=", "sample", "[", "'leftImage'", "]", ".", "copy", "(", ")", "\n", "sample", "[", "'raw_rightImage'", "]", "=", "sample", "[", "'rightImage'", "]", ".", "copy", "(", ")", "\n", "sample", "[", "'rightImage_c'", "]", "=", "sample", "[", "'rightImage'", "]", ".", "copy", "(", ")", "\n", "\n", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaw-z_fcstereo.transforms.builder.build_transforms": [[4, 6], ["None"], "function", ["None"], ["from", ".", "utils", ".", "dif_fms", "import", "DIF_FUNCS", "\n", "from", ".", "utils", ".", "correlation1d_cost", "import", "COR_FUNCS", "\n", "from", ".", "aggregators", "import", "build_cost_aggregator", "\n"]]}