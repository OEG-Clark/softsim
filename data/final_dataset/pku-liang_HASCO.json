{"home.repos.pwc.inspect_result.pku-liang_HASCO.utils.visualize_cc.normalize": [[6, 15], ["numpy.linalg.norm", "print", "print", "val.min", "val.max", "y.min", "y.max", "numpy.exp"], "function", ["None"], ["def", "normalize", "(", "x", ")", ":", "\n", "    ", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "x", ")", "\n", "if", "norm", "==", "0", ":", "\n", "        ", "return", "x", "\n", "", "val", "=", "x", "/", "(", "0.01", "*", "norm", ")", "\n", "print", "(", "val", ".", "min", "(", ")", ",", "val", ".", "max", "(", ")", ")", "\n", "y", "=", "1.0", "/", "(", "1", "+", "0.1", "*", "np", ".", "exp", "(", "-", "val", ")", ")", "\n", "print", "(", "y", ".", "min", "(", ")", ",", "y", ".", "max", "(", ")", ")", "\n", "return", "-", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.utils.visualize_cc.find_lpa": [[16, 42], ["print", "open", "f.readlines", "min", "min", "min", "visualize_cc.normalize", "visualize_cc.normalize", "visualize_cc.normalize", "re.search", "re.search", "eval", "print", "print", "re.search.group().split", "latency.append", "area.append", "power.append", "tags.append", "re.search.group", "re.search.group", "re.search.group"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.utils.visualize.normalize", "home.repos.pwc.inspect_result.pku-liang_HASCO.utils.visualize.normalize", "home.repos.pwc.inspect_result.pku-liang_HASCO.utils.visualize.normalize"], ["", "def", "find_lpa", "(", "log", ")", ":", "\n", "    ", "latency", "=", "[", "]", "\n", "power", "=", "[", "]", "\n", "area", "=", "[", "]", "\n", "tags", "=", "[", "]", "\n", "with", "open", "(", "log", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "lpa_pattern", "=", "r\"[']latency.*[)]\"", "\n", "result", "=", "re", ".", "search", "(", "lpa_pattern", ",", "line", ")", "\n", "tag_pattern", "=", "r\".*?\\s\"", "\n", "tag", "=", "re", ".", "search", "(", "tag_pattern", ",", "line", ")", "\n", "if", "result", "is", "not", "None", ":", "\n", "                ", "str_dict", "=", "eval", "(", "'{'", "+", "result", ".", "group", "(", ")", "+", "'}'", ")", "\n", "print", "(", "str_dict", ")", "\n", "print", "(", "tag", ")", "\n", "params", "=", "tag", ".", "group", "(", ")", ".", "split", "(", "'_'", ")", "\n", "if", "params", "[", "2", "]", "!=", "\"1024\"", ":", "\n", "                    ", "continue", "\n", "", "if", "str_dict", "[", "'latency'", "]", "==", "'100000000000'", ":", "\n", "                    ", "continue", "\n", "", "latency", ".", "append", "(", "str_dict", "[", "'latency'", "]", "[", "0", "]", ")", "\n", "area", ".", "append", "(", "str_dict", "[", "'area'", "]", "[", "0", "]", ")", "\n", "power", ".", "append", "(", "str_dict", "[", "'power'", "]", "[", "0", "]", ")", "\n", "tags", ".", "append", "(", "tag", ".", "group", "(", ")", ")", "\n", "", "", "", "print", "(", "min", "(", "latency", ")", ",", "\"~~~~\"", ",", "min", "(", "power", ")", ",", "\"~~~~~\"", ",", "min", "(", "area", ")", ")", "\n", "return", "tags", ",", "normalize", "(", "latency", ")", ",", "normalize", "(", "power", ")", ",", "normalize", "(", "area", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.utils.visualize_cc.parse_params": [[44, 58], ["tag.split", "eval", "param_list[].append", "eval", "param_list[].append", "range", "range", "param_list[].append", "eval"], "function", ["None"], ["", "def", "parse_params", "(", "tags", ")", ":", "\n", "    ", "param_list", "=", "[", "[", "]", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "count", "=", "0", "\n", "for", "tag", "in", "tags", ":", "\n", "        ", "params", "=", "tag", ".", "split", "(", "'_'", ")", "\n", "if", "params", "[", "2", "]", "!=", "\"1024\"", ":", "\n", "            ", "continue", "\n", "", "pes", "=", "eval", "(", "params", "[", "0", "]", ")", "\n", "param_list", "[", "0", "]", ".", "append", "(", "pes", ")", "\n", "buf_cap", "=", "eval", "(", "params", "[", "2", "]", ")", "\n", "param_list", "[", "1", "]", ".", "append", "(", "buf_cap", ")", "\n", "for", "i", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "param_list", "[", "i", "]", ".", "append", "(", "eval", "(", "params", "[", "i", "+", "1", "]", ")", ")", "\n", "", "", "return", "param_list", "[", "0", "]", ",", "param_list", "[", "1", "]", ",", "param_list", "[", "2", "]", ",", "param_list", "[", "3", "]", ",", "param_list", "[", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.utils.visualize_cc.draw_pareto_scatter": [[60, 103], ["matplotlib.rc", "matplotlib.rc", "matplotlib.rc", "matplotlib.rc", "matplotlib.rc", "matplotlib.rc", "matplotlib.rc", "matplotlib.subplots", "matplotlib.cm.get_cmap", "axes[].scatter", "axes[].set_xlabel", "axes[].set_ylabel", "axes[].tick_params", "axes[].text", "axes[].scatter", "axes[].set_xlabel", "axes[].set_ylabel", "axes[].tick_params", "axes[].text", "axes[].scatter", "axes[].set_xlabel", "axes[].set_ylabel", "axes[].tick_params", "axes[].text", "matplotlib.show"], "function", ["None"], ["", "def", "draw_pareto_scatter", "(", "latency", ",", "power", ",", "area", ")", ":", "\n", "\n", "    ", "SMALL_SIZE", "=", "20", "\n", "MEDIUM_SIZE", "=", "22", "\n", "BIGGER_SIZE", "=", "24", "\n", "\n", "plt", ".", "rc", "(", "'font'", ",", "size", "=", "SMALL_SIZE", ")", "# controls default text sizes", "\n", "plt", ".", "rc", "(", "'axes'", ",", "titlesize", "=", "SMALL_SIZE", ")", "# fontsize of the axes title", "\n", "plt", ".", "rc", "(", "'axes'", ",", "labelsize", "=", "MEDIUM_SIZE", ")", "# fontsize of the x and y labels", "\n", "plt", ".", "rc", "(", "'xtick'", ",", "labelsize", "=", "SMALL_SIZE", ")", "# fontsize of the tick labels", "\n", "plt", ".", "rc", "(", "'ytick'", ",", "labelsize", "=", "SMALL_SIZE", ")", "# fontsize of the tick labels", "\n", "plt", ".", "rc", "(", "'legend'", ",", "fontsize", "=", "SMALL_SIZE", ")", "# legend fontsize", "\n", "plt", ".", "rc", "(", "'figure'", ",", "titlesize", "=", "BIGGER_SIZE", ")", "# fontsize of the figure title", "\n", "\n", "\n", "figs", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "3", ",", "figsize", "=", "(", "19", ",", "7", ")", ")", "\n", "#figs.tight_layout(pad=1.5)    ", "\n", "\n", "cm", "=", "plt", ".", "cm", ".", "get_cmap", "(", "'viridis'", ")", "\n", "axes", "[", "0", "]", ".", "scatter", "(", "latency", ",", "power", ")", "\n", "axes", "[", "0", "]", ".", "set_xlabel", "(", "'normalized latency'", ")", "\n", "axes", "[", "0", "]", ".", "set_ylabel", "(", "'normalized power'", ")", "\n", "axes", "[", "0", "]", ".", "tick_params", "(", "axis", "=", "\"y\"", ",", "direction", "=", "\"in\"", ",", "pad", "=", "-", "50", ")", "\n", "axes", "[", "0", "]", ".", "text", "(", "0.1", ",", "-", "0.05", ",", "'(a) latency-power'", ",", "ha", "=", "\"center\"", ")", "\n", "# axes[0].set_xlim(0, 1e-7)", "\n", "# axes[0].set_ylim(0, 1e-2)", "\n", "\n", "axes", "[", "1", "]", ".", "scatter", "(", "latency", ",", "area", ")", "\n", "axes", "[", "1", "]", ".", "set_xlabel", "(", "'normalized latency'", ")", "\n", "axes", "[", "1", "]", ".", "set_ylabel", "(", "'normalized area'", ")", "\n", "axes", "[", "1", "]", ".", "tick_params", "(", "axis", "=", "\"y\"", ",", "direction", "=", "\"in\"", ",", "pad", "=", "-", "40", ")", "\n", "axes", "[", "1", "]", ".", "text", "(", "0.1", ",", "-", "0.06", ",", "'(b) latency-area'", ",", "ha", "=", "\"center\"", ")", "\n", "# axes[1].set_xlim(0, 1e-7)", "\n", "# axes[1].set_ylim(0, 1e-8)", "\n", "\n", "axes", "[", "2", "]", ".", "scatter", "(", "area", ",", "power", ")", "\n", "axes", "[", "2", "]", ".", "set_xlabel", "(", "'normalized area'", ")", "\n", "axes", "[", "2", "]", ".", "set_ylabel", "(", "'normalized power'", ")", "\n", "axes", "[", "2", "]", ".", "tick_params", "(", "axis", "=", "\"y\"", ",", "direction", "=", "\"in\"", ",", "pad", "=", "-", "50", ")", "\n", "axes", "[", "2", "]", ".", "text", "(", "0.1", ",", "-", "0.05", ",", "'(c) area-power'", ",", "ha", "=", "\"center\"", ")", "\n", "# axes[2].set_xlim(0, 5e-4)", "\n", "# axes[2].set_ylim(0, 1e-8)", "\n", "plt", ".", "show", "(", ")", "\n", "#figs.savefig(\"ppa.pdf\", bbox_inches='tight')", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.utils.visualize_cc.reorganize_data": [[106, 133], ["list", "list.sort", "list", "list.sort", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "range", "range", "set", "set", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "reorganize_data", "(", "x", ",", "y", ",", "latency", ",", "power", ",", "area", ")", ":", "\n", "    ", "x_set", "=", "list", "(", "set", "(", "x", ")", ")", "\n", "x_set", ".", "sort", "(", ")", "\n", "y_set", "=", "list", "(", "set", "(", "y", ")", ")", "\n", "y_set", ".", "sort", "(", ")", "\n", "latency2D", "=", "np", ".", "zeros", "(", "(", "len", "(", "x_set", ")", ",", "len", "(", "y_set", ")", ")", ")", "\n", "power2D", "=", "np", ".", "zeros", "(", "(", "len", "(", "x_set", ")", ",", "len", "(", "y_set", ")", ")", ")", "\n", "area2D", "=", "np", ".", "zeros", "(", "(", "len", "(", "x_set", ")", ",", "len", "(", "y_set", ")", ")", ")", "\n", "\n", "x_dict", "=", "{", "}", "\n", "y_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "x_set", ")", ")", ":", "\n", "        ", "tmp_x", "=", "x_set", "[", "i", "]", "\n", "x_dict", "[", "tmp_x", "]", "=", "i", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "y_set", ")", ")", ":", "\n", "        ", "tmp_y", "=", "y_set", "[", "i", "]", "\n", "y_dict", "[", "tmp_y", "]", "=", "i", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "latency", ")", ")", ":", "\n", "        ", "x_idx", "=", "x_dict", "[", "x", "[", "i", "]", "]", "\n", "y_idx", "=", "y_dict", "[", "y", "[", "i", "]", "]", "\n", "latency2D", "[", "x_idx", "]", "[", "y_idx", "]", "=", "latency", "[", "i", "]", "\n", "power2D", "[", "x_idx", "]", "[", "y_idx", "]", "=", "power", "[", "i", "]", "\n", "area2D", "[", "x_idx", "]", "[", "y_idx", "]", "=", "area", "[", "i", "]", "\n", "\n", "", "return", "x_set", ",", "y_set", ",", "latency2D", ",", "power2D", ",", "area2D", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.utils.visualize_cc.draw_isograph": [[136, 160], ["matplotlib.subplots", "figs.tight_layout", "numpy.meshgrid", "axes[].contourf", "axes[].text", "axes[].set_xlabel", "axes[].set_ylabel", "axes[].contourf", "axes[].text", "axes[].set_xlabel", "axes[].set_ylabel", "axes[].contourf", "axes[].text", "axes[].set_xlabel", "axes[].set_ylabel", "matplotlib.show"], "function", ["None"], ["", "def", "draw_isograph", "(", "pes", ",", "banks", ",", "latency", ",", "power", ",", "area", ")", ":", "\n", "\n", "    ", "figs", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "3", ",", "figsize", "=", "(", "17", ",", "5", ")", ")", "\n", "figs", ".", "tight_layout", "(", "pad", "=", "2", ")", "\n", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "banks", ",", "pes", ")", "\n", "\n", "axes", "[", "0", "]", ".", "contourf", "(", "X", ",", "Y", ",", "latency", ",", "levels", "=", "10", ",", "linestyles", "=", "'solid'", ")", "\n", "axes", "[", "0", "]", ".", "text", "(", "2.5", ",", "-", "0.05", ",", "'(a) Latency'", ")", "\n", "axes", "[", "0", "]", ".", "set_xlabel", "(", "'Banks'", ")", "\n", "axes", "[", "0", "]", ".", "set_ylabel", "(", "'PEs'", ")", "\n", "\n", "\n", "axes", "[", "1", "]", ".", "contourf", "(", "X", ",", "Y", ",", "power", ",", "levels", "=", "10", ",", "linestyles", "=", "'solid'", ")", "\n", "axes", "[", "1", "]", ".", "text", "(", "2.5", ",", "-", "0.05", ",", "'(b) Power'", ")", "\n", "axes", "[", "1", "]", ".", "set_xlabel", "(", "'Banks'", ")", "\n", "axes", "[", "1", "]", ".", "set_ylabel", "(", "'PEs'", ")", "\n", "\n", "axes", "[", "2", "]", ".", "contourf", "(", "X", ",", "Y", ",", "area", ",", "levels", "=", "10", ",", "linestyles", "=", "'solid'", ")", "\n", "axes", "[", "2", "]", ".", "text", "(", "2.5", ",", "-", "0.05", ",", "'(c) Area'", ")", "\n", "axes", "[", "2", "]", ".", "set_xlabel", "(", "'Banks'", ")", "\n", "axes", "[", "2", "]", ".", "set_ylabel", "(", "'PEs'", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.utils.postprocess.extract_lpa": [[6, 26], ["open", "open", "f.readlines", "re.search", "re.search", "print", "eval", "print", "nf.write", "nf.write", "nf.write", "re.search.group", "float", "re.search.group", "str", "re.search.group"], "function", ["None"], ["def", "extract_lpa", "(", "old_log", ",", "new_log", ")", ":", "\n", "\n", "    ", "with", "open", "(", "old_log", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "with", "open", "(", "new_log", ",", "'w'", ")", "as", "nf", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "pattern", "=", "r\"[']latency.*[)]\"", "\n", "result", "=", "re", ".", "search", "(", "pattern", ",", "line", ")", "\n", "tag_pattern", "=", "r\".*?\\s\"", "\n", "tag", "=", "re", ".", "search", "(", "tag_pattern", ",", "line", ")", "\n", "if", "result", "is", "not", "None", ":", "\n", "                    ", "print", "(", "tag", ".", "group", "(", ")", ")", "\n", "str_dict", "=", "eval", "(", "'{'", "+", "result", ".", "group", "(", ")", "+", "'}'", ")", "\n", "print", "(", "str_dict", ")", "\n", "if", "str_dict", "[", "'latency'", "]", "==", "'100000000000'", ":", "\n", "                        ", "continue", "\n", "", "power", "=", "float", "(", "str_dict", "[", "'power'", "]", "[", "0", "]", ")", "*", "6", "\n", "str_dict", "[", "'power'", "]", "=", "(", "power", ",", "0.0", ")", "\n", "nf", ".", "write", "(", "tag", ".", "group", "(", ")", ")", "\n", "nf", ".", "write", "(", "str", "(", "str_dict", ")", ")", "\n", "nf", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.utils.visualize.normalize": [[6, 11], ["numpy.linalg.norm"], "function", ["None"], ["def", "normalize", "(", "x", ")", ":", "\n", "    ", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "x", ")", "\n", "if", "norm", "==", "0", ":", "\n", "        ", "return", "x", "\n", "", "return", "x", "/", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.utils.visualize.find_lpa": [[12, 34], ["open", "f.readlines", "visualize.normalize", "visualize.normalize", "visualize.normalize", "re.search", "re.search", "eval", "print", "print", "latency.append", "area.append", "power.append", "tags.append", "re.search.group", "re.search.group"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.utils.visualize.normalize", "home.repos.pwc.inspect_result.pku-liang_HASCO.utils.visualize.normalize", "home.repos.pwc.inspect_result.pku-liang_HASCO.utils.visualize.normalize"], ["", "def", "find_lpa", "(", "log", ")", ":", "\n", "    ", "latency", "=", "[", "]", "\n", "power", "=", "[", "]", "\n", "area", "=", "[", "]", "\n", "tags", "=", "[", "]", "\n", "with", "open", "(", "log", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "lpa_pattern", "=", "r\"[']latency.*[)]\"", "\n", "result", "=", "re", ".", "search", "(", "lpa_pattern", ",", "line", ")", "\n", "tag_pattern", "=", "r\".*?\\s\"", "\n", "tag", "=", "re", ".", "search", "(", "tag_pattern", ",", "line", ")", "\n", "if", "result", "is", "not", "None", ":", "\n", "                ", "str_dict", "=", "eval", "(", "'{'", "+", "result", ".", "group", "(", ")", "+", "'}'", ")", "\n", "print", "(", "str_dict", ")", "\n", "print", "(", "tag", ")", "\n", "if", "str_dict", "[", "'latency'", "]", "==", "'100000000000'", ":", "\n", "                    ", "continue", "\n", "", "latency", ".", "append", "(", "str_dict", "[", "'latency'", "]", "[", "0", "]", ")", "\n", "area", ".", "append", "(", "str_dict", "[", "'area'", "]", "[", "0", "]", ")", "\n", "power", ".", "append", "(", "str_dict", "[", "'power'", "]", "[", "0", "]", ")", "\n", "tags", ".", "append", "(", "tag", ".", "group", "(", ")", ")", "\n", "", "", "", "return", "tags", ",", "normalize", "(", "latency", ")", ",", "normalize", "(", "power", ")", ",", "normalize", "(", "area", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.utils.visualize.parse_params": [[36, 47], ["tag.split", "eval", "param_list[].append", "eval", "param_list[].append", "range", "range", "param_list[].append"], "function", ["None"], ["", "def", "parse_params", "(", "tags", ")", ":", "\n", "    ", "param_list", "=", "[", "[", "]", "for", "i", "in", "range", "(", "6", ")", "]", "\n", "for", "tag", "in", "tags", ":", "\n", "        ", "params", "=", "tag", ".", "split", "(", "'_'", ")", "\n", "pes", "=", "eval", "(", "params", "[", "0", "]", "+", "'*'", "+", "params", "[", "1", "]", ")", "\n", "param_list", "[", "0", "]", ".", "append", "(", "pes", ")", "\n", "buf_cap", "=", "eval", "(", "params", "[", "2", "]", "+", "'+'", "+", "params", "[", "7", "]", ")", "\n", "param_list", "[", "1", "]", ".", "append", "(", "buf_cap", ")", "\n", "for", "i", "in", "range", "(", "2", ",", "6", ")", ":", "\n", "            ", "param_list", "[", "i", "]", ".", "append", "(", "params", "[", "i", "+", "1", "]", ")", "\n", "", "", "return", "param_list", "[", "0", "]", ",", "param_list", "[", "1", "]", ",", "param_list", "[", "2", "]", ",", "param_list", "[", "3", "]", ",", "param_list", "[", "4", "]", ",", "param_list", "[", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.utils.visualize.draw_pareto_scatter": [[50, 71], ["matplotlib.subplots", "matplotlib.cm.get_cmap", "axes[].scatter", "axes[].set_xlabel", "axes[].set_ylabel", "axes[].scatter", "axes[].set_xlabel", "axes[].set_ylabel", "axes[].scatter", "axes[].set_xlabel", "axes[].set_ylabel", "matplotlib.show"], "function", ["None"], ["", "def", "draw_pareto_scatter", "(", "latency", ",", "power", ",", "area", ")", ":", "\n", "    ", "figs", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "3", ",", "figsize", "=", "(", "17", ",", "5", ")", ")", "\n", "cm", "=", "plt", ".", "cm", ".", "get_cmap", "(", "'viridis'", ")", "\n", "axes", "[", "0", "]", ".", "scatter", "(", "latency", ",", "power", ")", "\n", "axes", "[", "0", "]", ".", "set_xlabel", "(", "'latency'", ")", "\n", "axes", "[", "0", "]", ".", "set_ylabel", "(", "'power'", ")", "\n", "# axes[0].set_xlim(0, 1e-7)", "\n", "# axes[0].set_ylim(0, 1e-2)", "\n", "\n", "axes", "[", "1", "]", ".", "scatter", "(", "latency", ",", "area", ")", "\n", "axes", "[", "1", "]", ".", "set_xlabel", "(", "'latency'", ")", "\n", "axes", "[", "1", "]", ".", "set_ylabel", "(", "'area'", ")", "\n", "# axes[1].set_xlim(0, 1e-7)", "\n", "# axes[1].set_ylim(0, 1e-8)", "\n", "\n", "axes", "[", "2", "]", ".", "scatter", "(", "area", ",", "power", ")", "\n", "axes", "[", "2", "]", ".", "set_xlabel", "(", "'area'", ")", "\n", "axes", "[", "2", "]", ".", "set_ylabel", "(", "'power'", ")", "\n", "# axes[2].set_xlim(0, 5e-4)", "\n", "# axes[2].set_ylim(0, 1e-8)", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.utils.visualize.reorganize_data": [[74, 101], ["list", "list.sort", "list", "list.sort", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "range", "range", "set", "set", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "reorganize_data", "(", "pes", ",", "buf_cap", ",", "latency", ",", "power", ",", "area", ")", ":", "\n", "    ", "pe_set", "=", "list", "(", "set", "(", "pes", ")", ")", "\n", "pe_set", ".", "sort", "(", ")", "\n", "buf_set", "=", "list", "(", "set", "(", "buf_cap", ")", ")", "\n", "buf_set", ".", "sort", "(", ")", "\n", "latency2D", "=", "np", ".", "zeros", "(", "(", "len", "(", "pe_set", ")", ",", "len", "(", "buf_set", ")", ")", ")", "\n", "power2D", "=", "np", ".", "zeros", "(", "(", "len", "(", "pe_set", ")", ",", "len", "(", "buf_set", ")", ")", ")", "\n", "area2D", "=", "np", ".", "zeros", "(", "(", "len", "(", "pe_set", ")", ",", "len", "(", "buf_set", ")", ")", ")", "\n", "\n", "pe_dict", "=", "{", "}", "\n", "buf_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "pe_set", ")", ")", ":", "\n", "        ", "pe", "=", "pe_set", "[", "i", "]", "\n", "pe_dict", "[", "pe", "]", "=", "i", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "buf_set", ")", ")", ":", "\n", "        ", "buf", "=", "buf_set", "[", "i", "]", "\n", "buf_dict", "[", "buf", "]", "=", "i", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "latency", ")", ")", ":", "\n", "        ", "pe_idx", "=", "pe_dict", "[", "pes", "[", "i", "]", "]", "\n", "buf_idx", "=", "buf_dict", "[", "buf_cap", "[", "i", "]", "]", "\n", "latency2D", "[", "pe_idx", "]", "[", "buf_idx", "]", "=", "latency", "[", "i", "]", "\n", "power2D", "[", "pe_idx", "]", "[", "buf_idx", "]", "=", "power", "[", "i", "]", "\n", "area2D", "[", "pe_idx", "]", "[", "buf_idx", "]", "=", "area", "[", "i", "]", "\n", "\n", "", "return", "pe_set", ",", "buf_set", ",", "latency2D", ",", "power2D", ",", "area2D", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.utils.visualize.draw_isograph": [[104, 126], ["matplotlib.subplots", "numpy.meshgrid", "axes[].contourf", "axes[].title.set_text", "axes[].set_xlabel", "axes[].set_ylabel", "axes[].contourf", "axes[].title.set_text", "axes[].set_xlabel", "axes[].set_ylabel", "axes[].contourf", "axes[].title.set_text", "axes[].set_xlabel", "axes[].set_ylabel", "matplotlib.show"], "function", ["None"], ["", "def", "draw_isograph", "(", "pes", ",", "buf_cap", ",", "latency", ",", "power", ",", "area", ")", ":", "\n", "    ", "pes", "=", "[", "16", ",", "32", "]", "\n", "figs", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "3", ",", "figsize", "=", "(", "17", ",", "5", ")", ")", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "buf_cap", ",", "pes", ")", "\n", "\n", "axes", "[", "0", "]", ".", "contourf", "(", "X", ",", "Y", ",", "latency", ",", "levels", "=", "15", ",", "linestyles", "=", "'solid'", ")", "\n", "axes", "[", "0", "]", ".", "title", ".", "set_text", "(", "'Latency'", ")", "\n", "axes", "[", "0", "]", ".", "set_xlabel", "(", "'Bufs'", ")", "\n", "axes", "[", "0", "]", ".", "set_ylabel", "(", "'PEs'", ")", "\n", "\n", "\n", "axes", "[", "1", "]", ".", "contourf", "(", "X", ",", "Y", ",", "power", ",", "levels", "=", "15", ",", "linestyles", "=", "'solid'", ")", "\n", "axes", "[", "1", "]", ".", "title", ".", "set_text", "(", "'Power'", ")", "\n", "axes", "[", "1", "]", ".", "set_xlabel", "(", "'Bufs'", ")", "\n", "axes", "[", "1", "]", ".", "set_ylabel", "(", "'PEs'", ")", "\n", "\n", "axes", "[", "2", "]", ".", "contourf", "(", "X", ",", "Y", ",", "area", ",", "levels", "=", "15", ",", "linestyles", "=", "'solid'", ")", "\n", "axes", "[", "2", "]", ".", "title", ".", "set_text", "(", "'Area'", ")", "\n", "axes", "[", "2", "]", ".", "set_xlabel", "(", "'Bufs'", ")", "\n", "axes", "[", "2", "]", ".", "set_ylabel", "(", "'PEs'", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.flextensor_extend.gen_schedules": [[17, 76], ["tqdm.tqdm", "range", "WORKLOAD_TABLE.get", "schedules.append", "all_tensors.append", "len", "schedules.append", "all_tensors.append", "benchmark.benchmark.Benchmark", "flextensor.micro_scheduler.gen_micro_schedule", "flextensor.task.Task", "flextensor_extend.gen_schedules.sw_eval"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.micro_scheduler.gen_micro_schedule"], ["def", "gen_schedules", "(", "benchmark", ",", "accelerator", ",", "model", ")", ":", "\n", "\n", "    ", "'''generate schedules for each workload. a schedule indicates the tensorize choice and sotware optimization'''", "\n", "\n", "\n", "'''use WORKLOAD_TABLE to avoid reduandant workloads'''", "\n", "WORKLOAD_TABLE", "=", "{", "}", "\n", "schedules", "=", "[", "]", "\n", "all_tensors", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "benchmark", ".", "workloads", ")", ")", ")", ":", "\n", "        ", "workload", "=", "benchmark", ".", "workloads", "[", "i", "]", "\n", "st_tuple", "=", "WORKLOAD_TABLE", ".", "get", "(", "workload", ".", "tag", ")", "\n", "if", "st_tuple", "!=", "None", ":", "\n", "            ", "'''skip exploration'''", "\n", "schedules", ".", "append", "(", "st_tuple", "[", "0", "]", ")", "\n", "all_tensors", ".", "append", "(", "st_tuple", "[", "1", "]", ")", "\n", "continue", "\n", "\n", "", "name", "=", "workload", ".", "name", "\n", "compute", "=", "workload", ".", "compute", "\n", "args", "=", "workload", ".", "args", "\n", "\n", "def", "sw_eval", "(", "workload", ",", "task", ",", "accelerator", ")", ":", "\n", "            ", "'''software evaluation'''", "\n", "tmp_benchmark", "=", "Benchmark", "(", "workload", ".", "name", ",", "[", "workload", "]", ")", "\n", "def", "model_func", "(", "schedule", ")", ":", "\n", "                ", "t", "=", "time", ".", "time", "(", ")", "\n", "pid", "=", "os", ".", "getpid", "(", ")", "\n", "\n", "mapping_file", "=", "\"{}{}_{}_{}_{}.m\"", ".", "format", "(", "mapping_dir", ",", "accelerator", ".", "type", ",", "tmp_benchmark", ".", "name", ",", "str", "(", "int", "(", "round", "(", "t", "*", "1000000", ")", ")", ")", ",", "str", "(", "pid", ")", ")", "\n", "l", ",", "t", ",", "p", ",", "e", ",", "a", "=", "model", ".", "evaluate", "(", "tmp_benchmark", ",", "schedule", ",", "accelerator", ",", "mapping_file", ")", "\n", "return", "l", "\n", "\n", "", "return", "gen_micro_schedule", "(", "task", ",", "accelerator", ".", "target", ",", "model_func", ")", "\n", "\n", "\n", "", "if", "workload", ".", "type", "==", "\"MTTKRP\"", ":", "\n", "            ", "workload", ".", "stage", "=", "1", "\n", "task1", "=", "Task", "(", "name", ",", "accelerator", ".", "name", "+", "name", "+", "\"_stage1\"", ",", "compute", ",", "args", "+", "(", "1", ",", ")", ",", "\"micro\"", ",", "0", ")", "\n", "schedule1", ",", "tensors1", "=", "sw_eval", "(", "workload", ",", "task1", ",", "accelerator", ")", "\n", "# print(schedule1)", "\n", "workload", ".", "stage", "=", "2", "\n", "task2", "=", "Task", "(", "name", ",", "accelerator", ".", "name", "+", "name", "+", "\"_stage2\"", ",", "compute", ",", "args", "+", "(", "2", ",", ")", ",", "\"micro\"", ",", "0", ")", "\n", "schedule2", ",", "tensors2", "=", "sw_eval", "(", "workload", ",", "task2", ",", "accelerator", ")", "\n", "# print(schedule2)", "\n", "schedule", "=", "(", "schedule1", ",", "schedule2", ")", "\n", "tensors", "=", "(", "tensors1", ",", "tensors2", ")", "\n", "workload", ".", "stage", "=", "0", "\n", "", "else", ":", "\n", "            ", "task", "=", "Task", "(", "name", ",", "accelerator", ".", "name", "+", "name", ",", "compute", ",", "args", ",", "\"micro\"", ",", "0", ")", "\n", "schedule", ",", "tensors", "=", "sw_eval", "(", "workload", ",", "task", ",", "accelerator", ")", "# TODO", "\n", "if", "schedule", "==", "None", ":", "\n", "                ", "return", "None", ",", "None", "\n", "# print(schedule)", "\n", "", "", "WORKLOAD_TABLE", "[", "workload", ".", "tag", "]", "=", "(", "schedule", ",", "tensors", ")", "\n", "schedules", ".", "append", "(", "schedule", ")", "\n", "all_tensors", ".", "append", "(", "tensors", ")", "\n", "\n", "", "return", "schedules", ",", "all_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.flextensor_extend.parse_schedule": [[78, 85], ["isinstance", "flextensor.utils.get_iter_info"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.get_iter_info"], ["", "def", "parse_schedule", "(", "schedule", ")", ":", "\n", "    ", "if", "isinstance", "(", "schedule", ",", "dict", ")", ":", "\n", "        ", "loop_info", "=", "schedule", "\n", "", "else", ":", "\n", "        ", "loop_info", "=", "get_iter_info", "(", "schedule", ")", "\n", "\n", "", "return", "loop_info", "", "", ""]], "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.explorer.build_hw_space": [[48, 128], ["ax.OptimizationConfig", "ax.Experiment", "ax.SearchSpace", "ax.SearchSpace", "ax.SearchSpace", "metrics.append", "metrics.append", "ax.core.objective.ScalarizedObjective", "ax.runners.synthetic.SyntheticRunner", "ax.Metric", "ax.Metric", "ax.ChoiceParameter", "ax.ChoiceParameter", "ax.ChoiceParameter", "ax.ChoiceParameter", "ax.RangeParameter", "ax.ChoiceParameter", "ax.ChoiceParameter", "ax.FixedParameter", "ax.ChoiceParameter", "ax.ChoiceParameter", "ax.ChoiceParameter", "ax.FixedParameter", "ax.RangeParameter", "ax.ChoiceParameter", "ax.ChoiceParameter", "ax.FixedParameter", "ax.RangeParameter", "ax.RangeParameter", "ax.ChoiceParameter", "ax.ChoiceParameter", "ax.RangeParameter", "ax.ChoiceParameter", "ax.ChoiceParameter", "ax.FixedParameter", "ax.FixedParameter"], "function", ["None"], ["def", "build_hw_space", "(", "generator", ",", "constraints", ",", "method", ")", ":", "\n", "    ", "\"\"\" Create hardware parameter search space. \n\n        Parameters\n        ----------\n        generator : generator\n            Generator info.\n        constraints : dict\n            constraint dictionary.\n        method : str\n            Measure method.\n        Returns\n        -------\n        Experiment\n            The experiment to be evaluated.\n\n        \"\"\"", "\n", "\n", "'''\n    memory capacity unit: KiB\n    buswidth unit: bits\n    '''", "\n", "\n", "if", "generator", ".", "type", "==", "\"GEMM\"", ":", "\n", "        ", "hw_design_space", "=", "SearchSpace", "(", "parameters", "=", "[", "\n", "ChoiceParameter", "(", "name", "=", "\"x\"", ",", "parameter_type", "=", "ParameterType", ".", "INT", ",", "values", "=", "[", "8", ",", "16", ",", "32", "]", ")", ",", "\n", "ChoiceParameter", "(", "name", "=", "\"sp_capacity\"", ",", "parameter_type", "=", "ParameterType", ".", "INT", ",", "values", "=", "[", "128", ",", "256", ",", "512", "]", ")", ",", "\n", "ChoiceParameter", "(", "name", "=", "\"local_capacity\"", ",", "parameter_type", "=", "ParameterType", ".", "INT", ",", "values", "=", "[", "64", ",", "128", ",", "256", "]", ")", ",", "\n", "ChoiceParameter", "(", "name", "=", "\"dataflow\"", ",", "parameter_type", "=", "ParameterType", ".", "STRING", ",", "values", "=", "[", "\"WS\"", ",", "\"OS\"", "]", ")", ",", "\n", "RangeParameter", "(", "name", "=", "\"sp_banks\"", ",", "parameter_type", "=", "ParameterType", ".", "INT", ",", "lower", "=", "1", ",", "upper", "=", "8", ")", ",", "\n", "ChoiceParameter", "(", "name", "=", "\"dma_buswidth\"", ",", "parameter_type", "=", "ParameterType", ".", "INT", ",", "values", "=", "[", "64", ",", "128", "]", ")", ",", "\n", "ChoiceParameter", "(", "name", "=", "\"dma_maxbytes\"", ",", "parameter_type", "=", "ParameterType", ".", "INT", ",", "values", "=", "[", "64", ",", "128", "]", ")", ",", "\n", "FixedParameter", "(", "name", "=", "\"dtype\"", ",", "parameter_type", "=", "ParameterType", ".", "STRING", ",", "value", "=", "generator", ".", "dtype", ")", ",", "\n", "]", ")", "# can be improved by constraining local_capacity < sp_capacity", "\n", "\n", "", "elif", "generator", ".", "type", "==", "\"GEMV\"", ":", "\n", "        ", "hw_design_space", "=", "SearchSpace", "(", "parameters", "=", "[", "\n", "ChoiceParameter", "(", "name", "=", "\"x\"", ",", "parameter_type", "=", "ParameterType", ".", "INT", ",", "values", "=", "[", "8", ",", "16", ",", "32", "]", ")", ",", "\n", "ChoiceParameter", "(", "name", "=", "\"sp_capacity\"", ",", "parameter_type", "=", "ParameterType", ".", "INT", ",", "values", "=", "[", "128", ",", "256", ",", "512", "]", ")", ",", "\n", "ChoiceParameter", "(", "name", "=", "\"local_capacity\"", ",", "parameter_type", "=", "ParameterType", ".", "INT", ",", "values", "=", "[", "64", ",", "128", ",", "256", "]", ")", ",", "\n", "FixedParameter", "(", "name", "=", "\"dataflow\"", ",", "parameter_type", "=", "ParameterType", ".", "STRING", ",", "value", "=", "\"FIXED\"", ")", ",", "\n", "RangeParameter", "(", "name", "=", "\"sp_banks\"", ",", "parameter_type", "=", "ParameterType", ".", "INT", ",", "lower", "=", "1", ",", "upper", "=", "8", ")", ",", "\n", "ChoiceParameter", "(", "name", "=", "\"dma_buswidth\"", ",", "parameter_type", "=", "ParameterType", ".", "INT", ",", "values", "=", "[", "64", ",", "128", "]", ")", ",", "\n", "ChoiceParameter", "(", "name", "=", "\"dma_maxbytes\"", ",", "parameter_type", "=", "ParameterType", ".", "INT", ",", "values", "=", "[", "64", ",", "128", "]", ")", ",", "\n", "FixedParameter", "(", "name", "=", "\"dtype\"", ",", "parameter_type", "=", "ParameterType", ".", "STRING", ",", "value", "=", "generator", ".", "dtype", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "# conv  dot ", "\n", "       ", "hw_design_space", "=", "SearchSpace", "(", "parameters", "=", "[", "\n", "RangeParameter", "(", "name", "=", "\"x\"", ",", "parameter_type", "=", "ParameterType", ".", "INT", ",", "lower", "=", "4", ",", "upper", "=", "32", ")", ",", "\n", "RangeParameter", "(", "name", "=", "\"y\"", ",", "parameter_type", "=", "ParameterType", ".", "INT", ",", "lower", "=", "4", ",", "upper", "=", "32", ")", ",", "\n", "ChoiceParameter", "(", "name", "=", "\"sp_capacity\"", ",", "parameter_type", "=", "ParameterType", ".", "INT", ",", "values", "=", "[", "128", ",", "256", ",", "512", ",", "1024", "]", ")", ",", "\n", "ChoiceParameter", "(", "name", "=", "\"local_capacity\"", ",", "parameter_type", "=", "ParameterType", ".", "INT", ",", "values", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", ")", ",", "\n", "RangeParameter", "(", "name", "=", "\"sp_banks\"", ",", "parameter_type", "=", "ParameterType", ".", "INT", ",", "lower", "=", "1", ",", "upper", "=", "8", ")", ",", "\n", "ChoiceParameter", "(", "name", "=", "\"dma_buswidth\"", ",", "parameter_type", "=", "ParameterType", ".", "INT", ",", "values", "=", "[", "64", ",", "128", ",", "256", "]", ")", ",", "\n", "ChoiceParameter", "(", "name", "=", "\"dma_maxbytes\"", ",", "parameter_type", "=", "ParameterType", ".", "INT", ",", "values", "=", "[", "64", ",", "128", ",", "256", "]", ")", ",", "\n", "FixedParameter", "(", "name", "=", "\"dataflow\"", ",", "parameter_type", "=", "ParameterType", ".", "STRING", ",", "value", "=", "\"FIXED\"", ")", ",", "\n", "FixedParameter", "(", "name", "=", "\"dtype\"", ",", "parameter_type", "=", "ParameterType", ".", "STRING", ",", "value", "=", "generator", ".", "dtype", ")", ",", "\n", "]", ")", "\n", "\n", "", "metrics", "=", "[", "]", "\n", "for", "key", "in", "constraints", ":", "\n", "        ", "if", "key", "!=", "\"throughput\"", ":", "\n", "            ", "metrics", ".", "append", "(", "Metric", "(", "name", "=", "key", ",", "lower_is_better", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "            ", "metrics", ".", "append", "(", "Metric", "(", "name", "=", "key", ",", "lower_is_better", "=", "False", ")", ")", "\n", "\n", "#create experiment", "\n", "", "", "optimization_config", "=", "OptimizationConfig", "(", "\n", "objective", "=", "ScalarizedObjective", "(", "metrics", "=", "metrics", ",", "minimize", "=", "True", ")", "\n", ")", "\n", "\n", "\n", "exp", "=", "Experiment", "(", "\n", "name", "=", "\"codesign_process\"", ",", "\n", "search_space", "=", "hw_design_space", ",", "\n", "runner", "=", "SyntheticRunner", "(", ")", ",", "\n", "optimization_config", "=", "optimization_config", "\n", ")", "\n", "\n", "return", "exp", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.explorer.codesign": [[132, 230], ["print", "print", "print", "print", "print", "explorer.build_hw_space", "ax.modelbridge.registry.Models.SOBOL", "codesign.ax_extend.get_size", "range", "print", "print", "print", "print", "print", "print", "print", "build_hw_space.new_batch_trial", "codesign.ax_extend.eval_exp", "print", "ax.modelbridge.factory.get_MOO_EHVI", "range", "codesign.ax_extend.get_non_dominated", "codesign.ax_extend.get_size", "codesign.hw_evaluation.gen_software", "tag.split", "generator.instantiate", "json.dumps", "open", "open.write", "open.close", "print", "build_hw_space.new_trial", "items.items", "codesign.ax_extend.get_size", "str", "Models.SOBOL.gen", "codesign.ax_extend.run_trial", "ax.Data.from_multiple_data", "tags[].append", "pareto_results[].append", "print", "ax.modelbridge.factory.get_MOO_EHVI.gen", "exp.new_trial.mark_abandoned"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.explorer.build_hw_space", "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ax_extend.get_size", "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ax_extend.eval_exp", "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ax_extend.get_non_dominated", "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ax_extend.get_size", "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.hw_evaluation.gen_software", "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_gemm.GEMMGenerator.instantiate", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items", "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ax_extend.get_size", "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ax_extend.run_trial"], ["", "def", "codesign", "(", "benchmark", ",", "generator", ",", "method", ",", "constraints", ",", "init_size", "=", "INIT_SIZE", ",", "trial_num", "=", "TRIAL_NUM", ",", "early_stop", "=", "EARLY_STOP", ")", ":", "\n", "\n", "    ", "print", "(", "\"#\"", "*", "50", ")", "\n", "assert", "generator", ".", "type", "in", "intrinsic_lib", ",", "\"unsupported generator\"", "\n", "assert", "method", "in", "eval_methods", ",", "\"measure method to be updated\"", "\n", "print", "(", "\"Generator Intrinsic: \"", "+", "generator", ".", "type", ")", "\n", "print", "(", "\"Evaluation Method: \"", "+", "method", ")", "\n", "print", "(", "\"Constraints: \"", ",", "end", "=", "''", ")", "\n", "for", "key", "in", "constraints", ":", "\n", "        ", "assert", "key", "in", "all_metrics", ",", "\"unsupported metric\"", "\n", "print", "(", "key", "+", "\"  \"", ",", "end", "=", "''", ")", "\n", "\n", "", "print", "(", "\"\\nStarting ...\"", "+", "\".\"", "*", "30", ")", "\n", "\n", "'''buidling hardware design space'''", "\n", "exp", "=", "build_hw_space", "(", "generator", ",", "constraints", ",", "method", ")", "\n", "\n", "pareto_results", "=", "{", "}", "\n", "tags", "=", "{", "}", "\n", "for", "key", "in", "constraints", ":", "\n", "        ", "pareto_results", "[", "key", "]", "=", "[", "]", "\n", "tags", "[", "key", "]", "=", "[", "]", "\n", "\n", "\n", "", "'''starting MOBO-based exploration'''", "\n", "'''MOBO: init the prior'''", "\n", "sobol", "=", "Models", ".", "SOBOL", "(", "exp", ".", "search_space", ")", "\n", "data", "=", "None", "\n", "while", "data", "==", "None", ":", "\n", "        ", "print", "(", "\"Running Sobol initialization trials...\"", ")", "\n", "exp", ".", "new_batch_trial", "(", "generator_run", "=", "sobol", ".", "gen", "(", "init_size", ")", ")", "\n", "data", "=", "eval_exp", "(", "exp", ",", "evaluation_function", ",", "benchmark", "=", "benchmark", ",", "generator", "=", "generator", ",", "method", "=", "method", ")", "\n", "\n", "", "data_size", "=", "get_size", "(", "data", ")", "\n", "same_cnt", "=", "0", "\n", "'''MOBO: iterative update'''", "\n", "for", "i", "in", "range", "(", "trial_num", ")", ":", "\n", "        ", "print", "(", "f\"Running GP+EHVI optimization trial {i+1}/{trial_num}...\"", ")", "\n", "\n", "'''Reinitialize GP+EHVI model at each step with updated data'''", "\n", "moo_model", "=", "get_MOO_EHVI", "(", "\n", "experiment", "=", "exp", ",", "\n", "data", "=", "data", ",", "\n", "ref_point", "=", "constraints", ",", "\n", "search_space", "=", "exp", ".", "search_space", "\n", ")", "\n", "\n", "for", "index", "in", "range", "(", "ABANDON_LIMITS", ")", ":", "\n", "            ", "trial", "=", "exp", ".", "new_trial", "(", "generator_run", "=", "moo_model", ".", "gen", "(", "1", ")", ")", "# can be improved", "\n", "try", ":", "\n", "                ", "new_data", "=", "run_trial", "(", "exp", ",", "trial", ",", "evaluation_function", ",", "benchmark", "=", "benchmark", ",", "generator", "=", "generator", ",", "method", "=", "method", ")", "\n", "data", "=", "Data", ".", "from_multiple_data", "(", "[", "data", ",", "new_data", "]", ")", "\n", "break", "\n", "", "except", "Exception", ":", "\n", "# print(\"Abandon this trail and start a new one...\")", "\n", "                ", "trial", ".", "mark_abandoned", "(", ")", "\n", "continue", "\n", "\n", "\n", "", "", "current_pareto", "=", "get_non_dominated", "(", "exp", ")", "\n", "for", "items", "in", "current_pareto", ":", "\n", "            ", "for", "(", "k", ",", "v", ")", "in", "items", ".", "items", "(", ")", ":", "\n", "                ", "tags", "[", "k", "]", ".", "append", "(", "v", "[", "0", "]", ")", "\n", "pareto_results", "[", "k", "]", ".", "append", "(", "v", "[", "1", "]", ")", "\n", "\n", "\n", "\n", "", "", "if", "get_size", "(", "data", ")", "==", "data_size", ":", "\n", "            ", "same_cnt", "+=", "1", "\n", "if", "same_cnt", ">=", "early_stop", ":", "\n", "                ", "print", "(", "f\"Early quit at the #{i+1} trial ...\"", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "same_cnt", "=", "0", "\n", "\n", "", "data_size", "=", "get_size", "(", "data", ")", "\n", "\n", "\n", "", "print", "(", "\"#\"", "*", "50", "+", "\"\\nReport:\"", ",", "end", "=", "''", ")", "\n", "print", "(", "pareto_results", ")", "\n", "print", "(", "tags", ")", "\n", "print", "(", "\"#\"", "*", "50", "+", "\"\\nSaving Results ...\"", ")", "\n", "\n", "\n", "'''saving software'''", "\n", "import", "json", "\n", "for", "key", "in", "constraints", ":", "\n", "        ", "tag", "=", "tags", "[", "key", "]", "[", "-", "1", "]", "\n", "acc_software", "=", "gen_software", "(", "tag", ")", "\n", "params", "=", "tag", ".", "split", "(", "'_'", ")", "\n", "acc", "=", "generator", ".", "instantiate", "(", "params", ",", "tag", ")", "\n", "jsonString", "=", "json", ".", "dumps", "(", "str", "(", "acc_software", ")", ")", "\n", "jsonFile", "=", "open", "(", "\"{}{}_{}_{}_software.json\"", ".", "format", "(", "sw_dir", ",", "benchmark", ".", "name", ",", "acc", ".", "name", ",", "key", ")", ",", "\"w\"", ")", "\n", "jsonFile", ".", "write", "(", "jsonString", ")", "\n", "jsonFile", ".", "close", "(", ")", "\n", "print", "(", "f\"{key} done!\"", ")", "\n", "\n", "", "print", "(", "\"All Done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ppa_model.PPAModel.__init__": [[40, 45], ["float", "float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lib_path", ",", "config_file", ")", ":", "\n", "        ", "self", ".", "func", "=", "lib_path", "\n", "self", ".", "config_file", "=", "config_file", "\n", "self", ".", "max_val", "=", "float", "(", "\"inf\"", ")", "# to avoid deviding by 0", "\n", "self", ".", "min_val", "=", "float", "(", "\"-inf\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ppa_model.PPAModel.generate_dsfl": [[48, 146], ["hw_generator.generator.parse_params", "str", "uninvolved_dims.discard", "int", "int", "idx[].upper", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "directives.append", "[].upper", "[].upper", "[].upper", "[].upper", "[].upper", "[].upper", "[].upper", "[].upper", "[].upper", "[].upper", "[].upper", "[].upper", "directives.append", "[].upper", "[].upper", "[].upper", "[].upper", "uninvolved_dims.pop", "[].upper", "[].upper"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator.parse_params"], ["", "def", "generate_dsfl", "(", "self", ",", "loop_info", ",", "acc", ",", "all_dims", ",", "directives", ")", ":", "\n", "\n", "        ", "px", ",", "py", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "dataflow", ",", "_", "=", "parse_params", "(", "acc", ".", "type", ",", "acc", ".", "params", ")", "\n", "pe", "=", "str", "(", "int", "(", "px", ")", "*", "int", "(", "py", ")", ")", "\n", "\n", "uninvolved_dims", "=", "all_dims", "\n", "\n", "for", "idx", "in", "loop_info", "[", "'inner'", "]", ":", "\n", "            ", "uninvolved_dims", ".", "discard", "(", "idx", "[", "'origin'", "]", ".", "upper", "(", ")", ")", "\n", "\n", "", "if", "acc", ".", "type", "==", "\"GEMM\"", ":", "\n", "            ", "'''handle GEMM accelerator dataflows'''", "\n", "# print(schedule)", "\n", "\n", "if", "dataflow", "==", "\"OS\"", ":", "\n", "                ", "'''OS dataflow'''", "\n", "\n", "for", "dim", "in", "uninvolved_dims", ":", "\n", "                    ", "directives", ".", "append", "(", "f\"TemporalMap(1, 1) {dim};\\n\"", ")", "\n", "\n", "", "directives", ".", "append", "(", "f\"TemporalMap({loop_info['inner'][1]['length']}, {py}) {loop_info['inner'][1]['origin'].upper()};\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"SpatialMap({loop_info['inner'][0]['length']}, {px}) {loop_info['inner'][0]['origin'].upper()};\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"TemporalMap({loop_info['inner'][2]['length']}, {loop_info['inner'][2]['length']}) {loop_info['inner'][2]['origin'].upper()};\\n\"", ")", "\n", "\n", "directives", ".", "append", "(", "f\"Cluster({pe}, P);\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"TemporalMap({loop_info['inner'][2]['length']}, {loop_info['inner'][2]['length']}) {loop_info['inner'][2]['origin'].upper()};\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"SpatialMap(1, 1) {loop_info['inner'][1]['origin'].upper()};\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"SpatialMap(1, 1) {loop_info['inner'][0]['origin'].upper()};\\n\"", ")", "\n", "\n", "return", "\n", "", "else", ":", "\n", "                ", "'''WS dataflow'''", "\n", "\n", "for", "dim", "in", "uninvolved_dims", ":", "\n", "                    ", "directives", ".", "append", "(", "f\"TemporalMap(1, 1) {dim};\\n\"", ")", "\n", "\n", "", "directives", ".", "append", "(", "f\"TemporalMap({loop_info['inner'][1]['length']}, {py}) {loop_info['inner'][1]['origin'].upper()};\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"SpatialMap({loop_info['inner'][0]['length']}, {px}) {loop_info['inner'][0]['origin'].upper()};\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"TemporalMap({loop_info['inner'][2]['length']}, {loop_info['inner'][2]['length']}) {loop_info['inner'][2]['origin'].upper()};\\n\"", ")", "\n", "\n", "directives", ".", "append", "(", "f\"Cluster({loop_info['inner'][2]['length']}, P);\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"TemporalMap({py}, {py}) {loop_info['inner'][1]['origin'].upper()};\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"TemporalMap({px}, {px}) {loop_info['inner'][0]['origin'].upper()};\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"SpatialMap(1, 1) {loop_info['inner'][2]['origin'].upper()};\\n\"", ")", "\n", "\n", "return", "\n", "\n", "\n", "", "", "elif", "acc", ".", "type", "==", "\"CONV\"", ":", "\n", "            ", "'''\n            NVDLA-style dataflow\n            Temporal_Map(3,3) R\n            Temporal_Map(3,3) S\n            Temporal_Map(64,64) C\n            Temporal_Map(1,1) X\n            Temporal_Map(1,1) Y\n            Cluster(64, PE)\n            Spatial_Map(1,1) K\n            '''", "\n", "\n", "directives", ".", "append", "(", "f\"SpatialMap(1 ,1) N;\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"TemporalMap(3 ,3) R;\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"TemporalMap(3, 3) S;\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"TemporalMap({pe}, {pe}) C;\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"TemporalMap(1, 1) X;\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"TemporalMap(1, 1) Y;\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"Cluster({pe}, P);\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"SpatialMap(1, 1) K;\\n\"", ")", "\n", "\n", "return", "\n", "\n", "", "elif", "acc", ".", "type", "==", "\"GEMV\"", ":", "\n", "\n", "            ", "for", "dim", "in", "uninvolved_dims", ":", "\n", "                ", "directives", ".", "append", "(", "f\"TemporalMap(1, 1) {dim};\\n\"", ")", "\n", "\n", "", "directives", ".", "append", "(", "f\"SpatialMap({loop_info['inner'][0]['length']}, {pe}) {loop_info['inner'][0]['origin'].upper()};\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"TemporalMap({loop_info['inner'][1]['length']}, {loop_info['inner'][1]['length']}) {loop_info['inner'][1]['origin'].upper()};\\n\"", ")", "\n", "\n", "directives", ".", "append", "(", "f\"Cluster({loop_info['inner'][1]['length']}, P);\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"TemporalMap({pe}, {pe}) {loop_info['inner'][0]['origin'].upper()};\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"SpatialMap(1, 1) {loop_info['inner'][1]['origin'].upper()};\\n\"", ")", "\n", "\n", "\n", "return", "\n", "\n", "", "elif", "acc", ".", "type", "==", "\"DOT\"", ":", "\n", "\n", "            ", "directives", ".", "append", "(", "f\"SpatialMap(1, 1) {uninvolved_dims.pop()};\\n\"", ")", "\n", "\n", "for", "dim", "in", "uninvolved_dims", ":", "\n", "                ", "directives", ".", "append", "(", "f\"TemporalMap(1, 1) {dim};\\n\"", ")", "\n", "\n", "", "directives", ".", "append", "(", "f\"TemporalMap({loop_info['inner'][1]['length']}, {loop_info['inner'][1]['length']}) {loop_info['inner'][1]['origin'].upper()};\\n\"", ")", "\n", "\n", "directives", ".", "append", "(", "f\"Cluster({loop_info['inner'][1]['length']}, P);\\n\"", ")", "\n", "directives", ".", "append", "(", "f\"SpatialMap(1, 1) {loop_info['inner'][1]['origin'].upper()};\\n\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ppa_model.PPAModel.generate_single_mapping": [[150, 193], ["codesign.flextensor_extend.parse_schedule", "directives.append", "directives.append", "set", "directives.append", "directives.append", "directives.append", "ppa_model.PPAModel.generate_dsfl", "directives.append", "directives.append", "directives.append", "zip", "directives.append", "inspect.signature", "directives.append", "str", "directives.append", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.flextensor_extend.parse_schedule", "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ppa_model.PPAModel.generate_dsfl"], ["", "", "def", "generate_single_mapping", "(", "self", ",", "workload", ",", "schedule", ",", "acc", ",", "directives", ")", ":", "\n", "\n", "        ", "loop_info", "=", "parse_schedule", "(", "schedule", ")", "\n", "\n", "directives", ".", "append", "(", "\"Layer \"", "+", "workload", ".", "name", "+", "\" {\\n\"", ")", "\n", "directives", ".", "append", "(", "\"Type: CONV \\n\"", ")", "# due to the model, all workloads expressed as conv", "\n", "dims", "=", "set", "(", "[", "'N'", ",", "'C'", ",", "'Y'", ",", "'X'", ",", "'K'", ",", "'R'", ",", "'S'", "]", ")", "\n", "\n", "if", "workload", ".", "type", "in", "[", "\"CONV\"", ",", "\"DWCONV\"", "]", ":", "\n", "            ", "directives", ".", "append", "(", "\"Stride { X: \"", "+", "str", "(", "workload", ".", "args", "[", "7", "]", ")", "+", "\", Y: \"", "+", "str", "(", "workload", ".", "args", "[", "7", "]", ")", "+", "\" }\\n\"", ")", "\n", "\n", "", "directives", ".", "append", "(", "\"Dimensions { \"", ")", "\n", "if", "workload", ".", "type", "in", "[", "\"CONV\"", ",", "\"DWCONV\"", "]", ":", "\n", "            ", "arg_names", "=", "signature", "(", "workload", ".", "compute", ")", ".", "parameters", "\n", "# print(type(arg_names))", "\n", "line", "=", "\"\"", "\n", "for", "(", "val", ",", "name", ")", "in", "zip", "(", "workload", ".", "args", "[", ":", "7", "]", ",", "arg_names", ")", ":", "\n", "                ", "line", "+=", "\" \"", "+", "name", "+", "\": \"", "+", "str", "(", "val", ")", "+", "\", \"", "\n", "", "directives", ".", "append", "(", "line", ")", "\n", "\n", "", "elif", "workload", ".", "type", "in", "[", "\"GEMM\"", ",", "\"GEMV\"", "]", ":", "\n", "            ", "line", "=", "\" K: \"", "+", "str", "(", "workload", ".", "args", "[", "0", "]", ")", "+", "\", Y: \"", "+", "str", "(", "workload", ".", "args", "[", "1", "]", ")", "+", "\", C: \"", "+", "str", "(", "workload", ".", "args", "[", "2", "]", ")", "\n", "for", "dim", "in", "[", "'N'", ",", "'X'", ",", "'R'", ",", "'S'", "]", ":", "\n", "                ", "line", "+=", "\" \"", "+", "dim", "+", "\": 1, \"", "\n", "", "directives", ".", "append", "(", "line", ")", "\n", "\n", "", "elif", "workload", ".", "type", "==", "\"TTM\"", ":", "\n", "            ", "line", "=", "\" K: \"", "+", "str", "(", "workload", ".", "args", "[", "2", "]", ")", "+", "\", Y: \"", "+", "str", "(", "workload", ".", "args", "[", "0", "]", ")", "+", "\", X: \"", "+", "str", "(", "workload", ".", "args", "[", "1", "]", ")", "+", "\", C: \"", "+", "str", "(", "workload", ".", "args", "[", "3", "]", ")", "\n", "for", "dim", "in", "[", "'N'", ",", "'X'", ",", "'R'", ",", "'S'", "]", ":", "\n", "                ", "line", "+=", "\" \"", "+", "dim", "+", "\": 1, \"", "\n", "", "directives", ".", "append", "(", "line", ")", "\n", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "", "directives", ".", "append", "(", "\" }\\n\"", ")", "\n", "\n", "directives", ".", "append", "(", "\"Dataflow {\\n\"", ")", "\n", "\n", "self", ".", "generate_dsfl", "(", "loop_info", ",", "acc", ",", "dims", ",", "directives", ")", "\n", "\n", "directives", ".", "append", "(", "\"}\\n\"", ")", "\n", "directives", ".", "append", "(", "\"}\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ppa_model.PPAModel.evaluate": [[197, 282], ["open", "open.write", "zip", "open.write", "open.close", "open", "subprocess.Popen", "subprocess.Popen.wait", "numpy.sum", "numpy.sum", "numpy.mean", "numpy.sum", "numpy.max", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "isinstance", "[].replace", "os.path.exists", "os.remove", "open", "list", "os.remove", "os.remove", "ppa_model.PPAModel.generate_single_mapping", "open.write", "csv.reader", "int", "latency.append", "energy.append", "ops.append", "area.append", "power.append", "benchmark.benchmark.Workload", "ppa_model.PPAModel.generate_single_mapping", "benchmark.benchmark.Workload", "ppa_model.PPAModel.generate_single_mapping", "float", "float", "float", "mapping_file.split", "float"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ppa_model.PPAModel.generate_single_mapping", "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ppa_model.PPAModel.generate_single_mapping", "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ppa_model.PPAModel.generate_single_mapping"], ["", "def", "evaluate", "(", "self", ",", "benchmark", ",", "schedules", ",", "acc", ",", "mapping_file", ")", ":", "\n", "        ", "if", "schedules", "==", "None", ":", "\n", "            ", "return", "self", ".", "max_val", ",", "self", ".", "min_val", ",", "self", ".", "max_val", ",", "self", ".", "max_val", ",", "self", ".", "max_val", "\n", "", "if", "not", "isinstance", "(", "schedules", ",", "list", ")", ":", "\n", "            ", "schedules", "=", "[", "schedules", "]", "\n", "\n", "", "'''generate mapping files'''", "\n", "mapping_fp", "=", "open", "(", "rst_dir", "+", "mapping_file", ",", "\"w+\"", ")", "\n", "mapping_fp", ".", "write", "(", "\"Network \"", "+", "benchmark", ".", "name", "+", "\" {\\n\"", ")", "\n", "for", "(", "wl", ",", "s", ")", "in", "zip", "(", "benchmark", ".", "workloads", ",", "schedules", ")", ":", "\n", "            ", "directives", "=", "[", "]", "\n", "if", "wl", ".", "type", "!=", "\"MTTKRP\"", ":", "\n", "                ", "self", ".", "generate_single_mapping", "(", "wl", ",", "s", ",", "acc", ",", "directives", ")", "\n", "", "else", ":", "# special process for mttkrp ", "\n", "                ", "m", ",", "n", ",", "k", ",", "l", ",", "dtype", ",", "layout", "=", "wl", ".", "args", "\n", "if", "wl", ".", "stage", "!=", "2", ":", "\n", "                    ", "s1", "=", "s", "[", "0", "]", "if", "wl", ".", "stage", "==", "0", "else", "s", "\n", "ttm_wl", "=", "Workload", "(", "wl", ".", "name", "+", "\"_stage1\"", ",", "\"TTM\"", ",", "ttm_compute", ",", "(", "m", ",", "l", ",", "n", ",", "k", ",", "dtype", ",", "layout", ")", ")", "\n", "self", ".", "generate_single_mapping", "(", "ttm_wl", ",", "s1", ",", "acc", ",", "directives", ")", "\n", "", "if", "wl", ".", "stage", "!=", "1", ":", "\n", "                    ", "s2", "=", "s", "[", "1", "]", "if", "wl", ".", "stage", "==", "0", "else", "s", "\n", "gemv_wl", "=", "Workload", "(", "wl", ".", "name", "+", "\"_stage2\"", ",", "\"GEMV\"", ",", "gemv_compute", ",", "(", "m", ",", "n", ",", "l", ",", "dtype", ",", "layout", ")", ")", "\n", "self", ".", "generate_single_mapping", "(", "gemv_wl", ",", "s2", ",", "acc", ",", "directives", ")", "\n", "\n", "", "", "for", "line", "in", "directives", ":", "\n", "                ", "mapping_fp", ".", "write", "(", "line", ")", "\n", "", "", "mapping_fp", ".", "write", "(", "\"}\\n\"", ")", "\n", "mapping_fp", ".", "close", "(", ")", "\n", "\n", "'''call extern model binary'''", "\n", "param_list", "=", "[", "\n", "self", ".", "func", ",", "\n", "\"--print_res=false\"", ",", "\n", "\"--print_res_csv_file=true\"", ",", "\n", "\"--print_log_file=false\"", ",", "\n", "\"--Mapping_file=\"", "+", "mapping_file", ",", "\n", "\"--HW_file=\"", "+", "self", ".", "config_file", ",", "\n", "\"--print_design_space=true\"", ",", "\n", "\"--msg_print_lv=0\"", "\n", "]", "\n", "\n", "devNull", "=", "open", "(", "os", ".", "devnull", ",", "'w'", ")", "\n", "p", "=", "subprocess", ".", "Popen", "(", "''", ".", "join", "(", "p", "+", "' '", "for", "p", "in", "param_list", ")", ",", "shell", "=", "True", ",", "cwd", "=", "rst_dir", ",", "stdout", "=", "devNull", ",", "stderr", "=", "devNull", ")", "\n", "p", ".", "wait", "(", ")", "\n", "\n", "\n", "result_csv", "=", "rst_dir", "+", "mapping_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "replace", "(", "\".m\"", ",", "\".csv\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "result_csv", ")", ":", "\n", "            ", "os", ".", "remove", "(", "rst_dir", "+", "mapping_file", ")", "\n", "return", "self", ".", "max_val", ",", "self", ".", "min_val", ",", "self", ".", "max_val", ",", "self", ".", "max_val", ",", "self", ".", "max_val", "\n", "\n", "", "'''read the CSV file to obtain ppa data'''", "\n", "latency", "=", "[", "]", "\n", "ops", "=", "[", "]", "\n", "power", "=", "[", "]", "\n", "energy", "=", "[", "]", "\n", "area", "=", "[", "]", "\n", "with", "open", "(", "result_csv", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "reader", "=", "list", "(", "csv", ".", "reader", "(", "f", ")", ")", "\n", "for", "row", "in", "reader", "[", "1", ":", "]", ":", "\n", "                ", "runtime", "=", "int", "(", "row", "[", "3", "]", ")", "\n", "latency", ".", "append", "(", "runtime", ")", "\n", "energy", ".", "append", "(", "float", "(", "row", "[", "4", "]", ")", ")", "\n", "ops", ".", "append", "(", "float", "(", "row", "[", "5", "]", ")", "*", "runtime", ")", "\n", "area", ".", "append", "(", "float", "(", "row", "[", "7", "]", ")", ")", "\n", "power", ".", "append", "(", "float", "(", "row", "[", "8", "]", ")", ")", "\n", "\n", "", "", "if", "not", "verbose", ":", "\n", "            ", "os", ".", "remove", "(", "rst_dir", "+", "mapping_file", ")", "\n", "os", ".", "remove", "(", "result_csv", ")", "\n", "\n", "", "total_runtime", "=", "np", ".", "sum", "(", "latency", ")", "\n", "total_ops", "=", "np", ".", "sum", "(", "ops", ")", "\n", "avg_pow", "=", "np", ".", "mean", "(", "power", ")", "\n", "total_energy", "=", "np", ".", "sum", "(", "energy", ")", "\n", "max_area", "=", "np", ".", "max", "(", "area", ")", "\n", "'''add some randomness'''", "\n", "rand_factor", "=", "0.03", "\n", "total_runtime", "+=", "random", ".", "uniform", "(", "0", ",", "rand_factor", "*", "total_runtime", ")", "\n", "total_ops", "+=", "random", ".", "uniform", "(", "0", ",", "rand_factor", "*", "total_ops", ")", "\n", "avg_pow", "+=", "random", ".", "uniform", "(", "0", ",", "rand_factor", "*", "avg_pow", ")", "\n", "total_energy", "+=", "random", ".", "uniform", "(", "0", ",", "rand_factor", "*", "total_energy", ")", "\n", "max_area", "+=", "random", ".", "uniform", "(", "0", ",", "rand_factor", "*", "max_area", ")", "\n", "return", "total_runtime", ",", "total_ops", "/", "total_runtime", ",", "avg_pow", ",", "total_energy", ",", "max_area", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ppa_model.gen_config": [[20, 35], ["hw_generator.generator.parse_params", "open", "open.write", "open.write", "open.write", "open.write", "open.close", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator.parse_params"], ["def", "gen_config", "(", "path", ",", "params", ",", "acc_type", ",", "tag", ")", ":", "\n", "\n", "    ", "x", ",", "y", ",", "sp_kb", ",", "sp_banks", ",", "_", ",", "_", ",", "local_kb", ",", "_", ",", "dtype", "=", "parse_params", "(", "acc_type", ",", "params", ")", "# off-chip memory are not modeled", "\n", "\n", "pes", "=", "x", "*", "y", "\n", "\n", "bw", "=", "2", "*", "sp_banks", "*", "bits_map", "[", "dtype", "]", "# dual ports ", "\n", "filename", "=", "path", "+", "\"accelerator_\"", "+", "tag", "+", "\".m\"", "\n", "fp", "=", "open", "(", "rst_dir", "+", "filename", ",", "\"w+\"", ")", "\n", "fp", ".", "write", "(", "\"NumPEs: \"", "+", "str", "(", "pes", ")", ")", "\n", "fp", ".", "write", "(", "\"\\nL1Size: \"", "+", "str", "(", "local_kb", "*", "1024", ")", ")", "# using bytes", "\n", "fp", ".", "write", "(", "\"\\nL2Size: \"", "+", "str", "(", "sp_kb", "*", "1024", ")", ")", "# using bytes", "\n", "fp", ".", "write", "(", "\"\\nNoC_BW: \"", "+", "str", "(", "bw", ")", ")", "\n", "fp", ".", "close", "(", ")", "\n", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.hw_evaluation.evaluation_function": [[14, 19], ["hw_evaluation.evaluation_function_model", "utils.logger.logger.error"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.hw_evaluation.evaluation_function_model"], ["def", "evaluation_function", "(", "parameterization", ",", "benchmark", ",", "generator", ",", "method", ")", ":", "\n", "    ", "if", "method", "==", "\"Model\"", ":", "\n", "        ", "return", "evaluation_function_model", "(", "parameterization", ",", "benchmark", ",", "generator", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "error", "(", "\"Unimplemented measure method yet.\"", ",", "exc_info", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.hw_evaluation.evaluation_function_model": [[21, 65], ["str", "codesign.ppa_model.gen_config", "codesign.ppa_model.PPAModel", "generator.instantiate", "parameterization.values", "Exception", "codesign.flextensor_extend.gen_schedules", "codesign.ppa_model.PPAModel.evaluate", "os.remove", "generator.instantiate.print_info", "utils.logger.logger.error", "list", "zip"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ppa_model.gen_config", "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_gemm.GEMMGenerator.instantiate", "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.flextensor_extend.gen_schedules", "home.repos.pwc.inspect_result.pku-liang_HASCO.optimize.optimize_conv2d_micro.evaluate", "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator.accelerator.print_info"], ["", "", "def", "evaluation_function_model", "(", "parameterization", ",", "benchmark", ",", "generator", ")", ":", "\n", "    ", "'''evaluating the holistic solution with models'''", "\n", "global", "PARAM_TABLE", "\n", "'''use tag and PARAM_TABLE to avoid reduandant evaluations'''", "\n", "arg_str", "=", "[", "str", "(", "i", ")", "for", "i", "in", "parameterization", ".", "values", "(", ")", "]", "\n", "tag", "=", "'_'", ".", "join", "(", "arg_str", ")", "\n", "\n", "if", "tag", "in", "PARAM_TABLE", ":", "\n", "        ", "return", "PARAM_TABLE", "[", "tag", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "'''a new evaluation'''", "\n", "\n", "config_file", "=", "gen_config", "(", "model_config_dir", ",", "parameterization", ",", "generator", ".", "type", ",", "tag", ")", "\n", "model", "=", "PPAModel", "(", "model_path", ",", "config_file", ")", "\n", "acc", "=", "generator", ".", "instantiate", "(", "parameterization", ",", "tag", ")", "\n", "\n", "\n", "if", "acc", "==", "None", ":", "\n", "            ", "PARAM_TABLE", "[", "tag", "]", "=", "None", "\n", "raise", "Exception", "(", "\"Invalid accelerator parameters.\"", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "verbose", ":", "\n", "                ", "acc", ".", "print_info", "(", ")", "\n", "\n", "", "'''software evaluations for generating software and interface'''", "\n", "schedules", ",", "all_tensors", "=", "gen_schedules", "(", "benchmark", ",", "acc", ",", "model", ")", "\n", "\n", "'''solution evaluations'''", "\n", "mapping_file", "=", "mapping_dir", "+", "generator", ".", "type", "+", "\"_\"", "+", "benchmark", ".", "name", "+", "\"_\"", "+", "tag", "+", "\".m\"", "\n", "l", ",", "t", ",", "p", ",", "_", ",", "a", "=", "model", ".", "evaluate", "(", "benchmark", ",", "schedules", ",", "acc", ",", "mapping_file", ")", "\n", "\n", "if", "l", "==", "model", ".", "max_val", ":", "\n", "                ", "PARAM_TABLE", "[", "tag", "]", "=", "None", "\n", "logger", ".", "error", "(", "\"Cannot find valid schedules.\"", ",", "exc_info", "=", "True", ")", "\n", "\n", "", "rst", "=", "{", "\"latency\"", ":", "(", "l", ",", "0.0", ")", ",", "\"throughput\"", ":", "(", "t", ",", "0.0", ")", ",", "\"power\"", ":", "(", "p", ",", "0.0", ")", ",", "\"area\"", ":", "(", "a", ",", "0.0", ")", "}", "\n", "\n", "PARAM_TABLE", "[", "tag", "]", "=", "(", "rst", ",", "list", "(", "zip", "(", "schedules", ",", "all_tensors", ")", ")", ")", "\n", "\n", "", "'''clean up'''", "\n", "if", "verbose", "==", "False", ":", "\n", "             ", "os", ".", "remove", "(", "rst_dir", "+", "config_file", ")", "\n", "", "return", "rst", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.hw_evaluation.gen_software": [[67, 84], ["zip", "isinstance", "tvm.lower", "all_software.append", "print"], "function", ["None"], ["", "", "def", "gen_software", "(", "tag", ",", "is_print", "=", "False", ")", ":", "\n", "    ", "global", "PARAM_TABLE", "\n", "st_list", "=", "PARAM_TABLE", "[", "tag", "]", "[", "1", "]", "\n", "all_software", "=", "[", "]", "\n", "for", "(", "schedule", ",", "tensors", ")", "in", "st_list", ":", "\n", "        ", "if", "not", "isinstance", "(", "schedule", ",", "tuple", ")", ":", "\n", "            ", "schedule", "=", "(", "schedule", ",", ")", "\n", "tensors", "=", "(", "tensors", ",", ")", "\n", "", "for", "s", ",", "t", "in", "zip", "(", "schedule", ",", "tensors", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "software", "=", "tvm", ".", "lower", "(", "s", ",", "t", ",", "simple_mode", "=", "True", ")", "\n", "all_software", ".", "append", "(", "software", ")", "\n", "if", "is_print", ":", "\n", "                    ", "print", "(", "software", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "continue", "\n", "", "", "", "return", "all_software", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.hw_evaluation.reset": [[85, 91], ["reset_intrin"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.intrinsic.reset_intrin"], ["", "def", "reset", "(", ")", ":", "\n", "    ", "'''must reset for each benchmark or intrinsic, otherwise errors are expected'''", "\n", "from", "flextensor", ".", "intrinsic", "import", "reset_intrin", "\n", "global", "PARAM_TABLE", "\n", "PARAM_TABLE", "=", "{", "}", "\n", "reset_intrin", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ax_extend.eval_trial": [[25, 67], ["isinstance", "trial.mark_completed", "exp.lookup_data_for_trial", "trial.mark_running", "ax_extend.evaluation_function_outer", "isinstance", "ax.core.data.Data.from_evaluations", "exp.attach_data", "ax.core.data.Data", "trial.mark_running", "trial.normalized_arm_weights().items", "print", "ax.core.data.Data", "ax.utils.common.typeutils.not_none", "ax.core.data.Data", "ax.utils.common.typeutils.not_none", "trial.normalized_arm_weights", "ax_extend.evaluation_function_outer", "print"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ax_extend.evaluation_function_outer", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items", "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ax_extend.evaluation_function_outer"], ["def", "eval_trial", "(", "exp", ",", "trial", ",", "func", ",", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate trial arms with the evaluation function of this\n        experiment.\n\n        kwargs:\n            trial: trial, whose arms to evaluate.\n        \"\"\"", "\n", "cached_data", "=", "exp", ".", "lookup_data_for_trial", "(", "trial", ".", "index", ")", "[", "0", "]", "\n", "if", "not", "cached_data", ".", "df", ".", "empty", ":", "\n", "            ", "return", "cached_data", "\n", "\n", "", "evaluations", "=", "{", "}", "\n", "trial", ".", "runner", "=", "exp", ".", "runner", "\n", "if", "isinstance", "(", "trial", ",", "Trial", ")", ":", "\n", "            ", "if", "not", "trial", ".", "arm", ":", "\n", "                ", "return", "Data", "(", ")", "# pragma: no cover", "\n", "", "trial", ".", "mark_running", "(", ")", "\n", "evaluations", "[", "not_none", "(", "trial", ".", "arm", ")", ".", "name", "]", "=", "evaluation_function_outer", "(", "exp", ",", "func", ",", "\n", "not_none", "(", "trial", ".", "arm", ")", ".", "parameters", ",", "kwargs", ",", "None", "\n", ")", "\n", "", "elif", "isinstance", "(", "trial", ",", "BatchTrial", ")", ":", "\n", "            ", "if", "not", "trial", ".", "arms", ":", "\n", "                ", "return", "Data", "(", ")", "# pragma: no cover", "\n", "", "trial", ".", "mark_running", "(", ")", "\n", "for", "arm", ",", "weight", "in", "trial", ".", "normalized_arm_weights", "(", ")", ".", "items", "(", ")", ":", "\n", "                ", "arm_parameters", ":", "TParameterization", "=", "arm", ".", "parameters", "\n", "try", ":", "\n", "                    ", "evaluations", "[", "arm", ".", "name", "]", "=", "evaluation_function_outer", "(", "exp", ",", "func", ",", "\n", "arm_parameters", ",", "kwargs", ",", "weight", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "print", "(", "e", ")", "\n", "continue", "\n", "\n", "", "", "", "trial", ".", "mark_completed", "(", ")", "\n", "try", ":", "\n", "            ", "data", "=", "Data", ".", "from_evaluations", "(", "evaluations", ",", "trial", ".", "index", ")", "\n", "exp", ".", "attach_data", "(", "data", ")", "\n", "return", "data", "\n", "", "except", "ValueError", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "return", "Data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ax_extend.evaluation_function_outer": [[70, 101], ["inspect.signature", "isinstance", "Exception", "len", "len", "func", "isinstance", "inspect.signature.parameters.items", "func", "ValueError", "isinstance", "isinstance", "ax.utils.common.typeutils.numpy_type_to_python_type"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items"], ["", "", "def", "evaluation_function_outer", "(", "\n", "exp", ",", "func", ",", "parameterization", ":", "TParameterization", ",", "kwargs", ",", "weight", ":", "Optional", "[", "float", "]", "=", "None", "\n", ")", "->", "TTrialEvaluation", ":", "\n", "        ", "signature", "=", "inspect", ".", "signature", "(", "func", ")", "\n", "num_evaluation_function_params", "=", "len", "(", "signature", ".", "parameters", ".", "items", "(", ")", ")", "-", "len", "(", "kwargs", ")", "\n", "if", "num_evaluation_function_params", "==", "1", ":", "\n", "# pyre-fixme[20]: Anonymous call expects argument `$1`. ", "\n", "            ", "evaluation", "=", "func", "(", "parameterization", ",", "kwargs", "[", "'benchmark'", "]", ",", "kwargs", "[", "'generator'", "]", ",", "kwargs", "[", "'method'", "]", ")", "\n", "", "elif", "num_evaluation_function_params", "==", "2", ":", "\n", "            ", "evaluation", "=", "func", "(", "parameterization", ",", "weight", ",", "kwargs", "[", "'benchmark'", "]", ",", "kwargs", "[", "'generator'", "]", ",", "kwargs", "[", "'method'", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "# pragma: no cover", "\n", "\"Evaluation function must take either one parameter \"", "\n", "\"(parameterization) or two parameters (parameterization and weight).\"", "\n", ")", "\n", "\n", "", "if", "isinstance", "(", "evaluation", ",", "dict", ")", ":", "\n", "            ", "return", "evaluation", "\n", "", "elif", "isinstance", "(", "evaluation", ",", "tuple", ")", ":", "\n", "            ", "return", "{", "exp", ".", "optimization_config", ".", "objective", ".", "metric", ".", "name", ":", "evaluation", "}", "\n", "", "elif", "isinstance", "(", "evaluation", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "            ", "return", "{", "exp", ".", "optimization_config", ".", "objective", ".", "metric", ".", "name", ":", "(", "evaluation", ",", "0.0", ")", "}", "\n", "", "elif", "isinstance", "(", "evaluation", ",", "(", "np", ".", "float32", ",", "np", ".", "float64", ",", "np", ".", "int32", ",", "np", ".", "int64", ")", ")", ":", "\n", "            ", "return", "{", "\n", "exp", ".", "optimization_config", ".", "objective", ".", "metric", ".", "name", ":", "(", "\n", "numpy_type_to_python_type", "(", "evaluation", ")", ",", "\n", "0.0", ",", "\n", ")", "\n", "}", "\n", "", "raise", "Exception", "(", "# pragma: no cover", "\n", "\"Evaluation function returned an invalid type. The function must \"", "\n", "\"either return a dictionary of metric names to mean, sem tuples \"", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ax_extend.run_trial": [[107, 110], ["ax_extend.eval_trial"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ax_extend.eval_trial"], ["", "def", "run_trial", "(", "exp", ",", "trial", ",", "func", ",", "**", "kwargs", ")", "->", "Data", ":", "\n", "    ", "assert", "trial", ".", "status", "!=", "TrialStatus", ".", "COMPLETED", ",", "\"already evaluated\"", "\n", "return", "eval_trial", "(", "exp", ",", "trial", ",", "func", ",", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ax_extend.eval_exp": [[113, 120], ["ax.core.data.Data.from_multiple_data", "ax_extend.eval_trial", "exp.trials.values"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ax_extend.eval_trial"], ["", "def", "eval_exp", "(", "exp", ",", "func", ",", "**", "kwargs", ")", "->", "Data", ":", "\n", "# return new data", "\n", "    ", "return", "Data", ".", "from_multiple_data", "(", "\n", "[", "\n", "eval_trial", "(", "exp", ",", "trial", ",", "func", ",", "kwargs", ")", "\n", "for", "trial", "in", "exp", ".", "trials", ".", "values", "(", ")", "\n", "if", "trial", ".", "status", "!=", "TrialStatus", ".", "COMPLETED", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ax_extend.get_size": [[124, 129], ["len"], "function", ["None"], ["", "def", "get_size", "(", "data", ")", ":", "\n", "    ", "if", "data", "!=", "None", ":", "\n", "        ", "return", "len", "(", "data", ".", "_df", ".", "index", ")", "# #key * #trial", "\n", "", "else", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ax_extend.get_non_dominated": [[133, 153], ["exp.fetch_data", "df.loc[].sort_values", "arms.get", "pareto_set.append", "str", "print", "arms.get.parameters.values"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get"], ["", "", "def", "get_non_dominated", "(", "exp", ")", ":", "\n", "\n", "    ", "df", "=", "exp", ".", "fetch_data", "(", ")", ".", "df", "\n", "arms", "=", "exp", ".", "arms_by_name", "\n", "\n", "pareto_set", "=", "[", "]", "\n", "for", "key", "in", "exp", ".", "metrics", ":", "\n", "        ", "tmp_df", "=", "df", ".", "loc", "[", "df", "[", "'metric_name'", "]", "==", "key", "]", ".", "sort_values", "(", "'mean'", ")", "\n", "# print(tmp_df)", "\n", "try", ":", "\n", "            ", "arm_name", "=", "tmp_df", ".", "values", "[", "0", "]", "[", "0", "]", "\n", "arm", "=", "arms", ".", "get", "(", "arm_name", ")", "\n", "arg_str", "=", "[", "str", "(", "i", ")", "for", "i", "in", "arm", ".", "parameters", ".", "values", "(", ")", "]", "\n", "tag", "=", "'_'", ".", "join", "(", "arg_str", ")", "\n", "val", "=", "(", "tag", ",", "tmp_df", ".", "values", "[", "0", "]", "[", "2", "]", ")", "\n", "pareto_set", ".", "append", "(", "{", "key", ":", "val", "}", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "break", "\n", "", "", "return", "pareto_set", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.codesign.ax_extend.draw_optimization_trace": [[155, 198], ["ValueError", "numpy.array", "ax.plot.trace.optimization_trace_single_method", "ax.utils.notebook.plotting.render", "ax.plot.helper._format_dict", "objective_name.capitalize", "ax.utils.common.typeutils.checked_cast().get_metric_mean", "ax.utils.common.typeutils.not_none", "list", "numpy.minimum.accumulate", "numpy.maximum.accumulate", "exp.trials.values", "ax.utils.common.typeutils.checked_cast", "list", "ax.utils.common.typeutils.checked_cast", "exp.trials.values"], "function", ["None"], ["", "def", "draw_optimization_trace", "(", "exp", ")", ":", "\n", "# not tested yet", "\n", "        ", "\"\"\"Retrieves the plot configuration for optimization trace, which shows\n        the evolution of the objective mean over iterations.\n\n        Args:\n            objective_optimum: Optimal objective, if known, for display in the\n                visualization.\n        \"\"\"", "\n", "if", "not", "exp", ".", "trials", ":", "\n", "            ", "raise", "ValueError", "(", "\"Cannot generate plot as there are no trials.\"", ")", "\n", "\n", "\n", "", "for", "metric", "in", "exp", ".", "optimization_config", ".", "objective", ".", "metrics", ":", "\n", "            ", "objective_name", "=", "metric", ".", "name", "\n", "best_objectives", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "\n", "checked_cast", "(", "Trial", ",", "trial", ")", ".", "get_metric_mean", "(", "objective_name", ")", "\n", "for", "trial", "in", "list", "(", "exp", ".", "trials", ".", "values", "(", ")", ")", "[", "1", ":", "]", "\n", "if", "trial", ".", "status", ".", "is_completed", "\n", "]", "\n", "]", "\n", ")", "\n", "hover_labels", "=", "[", "\n", "_format_dict", "(", "not_none", "(", "checked_cast", "(", "Trial", ",", "trial", ")", ".", "arm", ")", ".", "parameters", ")", "\n", "for", "trial", "in", "list", "(", "exp", ".", "trials", ".", "values", "(", ")", ")", "[", "1", ":", "]", "\n", "if", "trial", ".", "status", ".", "is_completed", "\n", "]", "\n", "\n", "config", "=", "optimization_trace_single_method", "(", "\n", "y", "=", "(", "\n", "np", ".", "minimum", ".", "accumulate", "(", "best_objectives", ",", "axis", "=", "1", ")", "\n", "if", "exp", ".", "optimization_config", ".", "objective", ".", "minimize", "\n", "else", "np", ".", "maximum", ".", "accumulate", "(", "best_objectives", ",", "axis", "=", "1", ")", "\n", ")", ",", "\n", "# optimum=objective_optimum,", "\n", "title", "=", "\"Model performance vs. # of iterations\"", ",", "\n", "ylabel", "=", "objective_name", ".", "capitalize", "(", ")", ",", "\n", "hover_labels", "=", "hover_labels", ",", "\n", ")", "\n", "\n", "render", "(", "config", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.__init__": [[49, 57], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "subspaces", "=", "{", "}", "\n", "self", ".", "types", "=", "{", "}", "\n", "self", ".", "valid_type_keys", "=", "[", "\n", "\"fuse\"", ",", "\"spatial\"", ",", "\"reduce\"", ",", "\"reorder\"", ",", "\"inline\"", ",", "\"unroll\"", ",", "\"merge\"", ",", "\"special\"", ",", "\"intrin\"", "]", "\n", "for", "type_key", "in", "self", ".", "valid_type_keys", ":", "\n", "            ", "self", ".", "types", "[", "type_key", "]", "=", "[", "]", "\n", "", "self", ".", "dim", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.add_subspace": [[58, 65], ["flextensor.utils.assert_print", "space.Space.types[].append", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.assert_print"], ["", "def", "add_subspace", "(", "self", ",", "name", ",", "subspace", ",", "type_key", ",", "override", "=", "False", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "subspaces", "and", "not", "override", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Same subspace name\"", ")", "\n", "", "assert_print", "(", "type_key", "in", "self", ".", "valid_type_keys", ")", "\n", "self", ".", "subspaces", "[", "name", "]", "=", "subspace", "\n", "self", ".", "types", "[", "type_key", "]", ".", "append", "(", "name", ")", "\n", "self", ".", "dim", "+=", "subspace", ".", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items": [[66, 68], ["space.Space.subspaces.items"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items"], ["", "def", "items", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "subspaces", ".", "items", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.__len__": [[69, 74], ["space.Space.subspaces.items", "len"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "ret", "=", "1", "\n", "for", "_", ",", "subspace", "in", "self", ".", "subspaces", ".", "items", "(", ")", ":", "\n", "            ", "ret", "*=", "len", "(", "subspace", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.length": [[75, 86], ["space.Space.subspaces.items", "len"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items"], ["", "def", "length", "(", "self", ")", ":", "\n", "        ", "ret", "=", "{", "}", "\n", "total", "=", "1", "\n", "added", "=", "0", "\n", "for", "name", ",", "subspace", "in", "self", ".", "subspaces", ".", "items", "(", ")", ":", "\n", "            ", "ret", "[", "name", "]", "=", "len", "(", "subspace", ")", "\n", "total", "*=", "ret", "[", "name", "]", "\n", "added", "+=", "ret", "[", "name", "]", "\n", "", "ret", "[", "\"total\"", "]", "=", "total", "\n", "ret", "[", "\"added\"", "]", "=", "added", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.SubSpace.__init__": [[93, 98], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "dim", "=", "0", "\n", "self", ".", "static_entities", "=", "[", "]", "\n", "self", ".", "size", "=", "0", "\n", "self", ".", "num_direction", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.SubSpace.random_entity": [[99, 101], ["numpy.random.choice"], "methods", ["None"], ["", "def", "random_entity", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "choice", "(", "self", ".", "static_entities", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.SubSpace.next_entity": [[102, 104], ["NotImplementedError"], "methods", ["None"], ["", "def", "next_entity", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.SubSpace.get_entity": [[105, 107], ["None"], "methods", ["None"], ["", "def", "get_entity", "(", "self", ",", "p", ")", ":", "\n", "        ", "return", "self", ".", "static_entities", "[", "p", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.SubSpace.get_direction": [[108, 110], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_direction", "(", "self", ",", "num", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.SubSpace.__len__": [[111, 113], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.SplitSpace.__init__": [[116, 130], ["space.SubSpace.__init__", "flextensor.utils.any_factor_split", "len", "range", "range", "space.SplitSpace.directions.append"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.BenchmarkCNN.__init__", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.any_factor_split"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "total", ",", "allow_non_divisible", "=", "'off'", ")", ":", "\n", "        ", "super", "(", "SplitSpace", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "total", "=", "total", "\n", "self", ".", "allow_non_divisible", "=", "allow_non_divisible", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "static_entities", "=", "any_factor_split", "(", "total", ",", "dim", ",", "allow_non_divisible", "=", "allow_non_divisible", ")", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "static_entities", ")", "\n", "self", ".", "num_direction", "=", "dim", "*", "(", "dim", "-", "1", ")", "\n", "self", ".", "directions", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "dim", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "dim", ")", ":", "\n", "                ", "if", "i", "!=", "j", ":", "\n", "                    ", "self", ".", "directions", ".", "append", "(", "(", "i", ",", "j", ")", ")", "\n", "", "", "", "self", ".", "type_key", "=", "\"split\"", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.SplitSpace.next_entity": [[131, 168], ["len", "len", "flextensor.utils.assert_print", "flextensor.utils.assert_print", "flextensor.utils.assert_print", "current.copy", "RuntimeError", "min", "math.ceil", "space.SplitSpace.static_entities.index", "flextensor.utils.is_power_of_x"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.assert_print", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.assert_print", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.assert_print", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.is_power_of_x"], ["", "def", "next_entity", "(", "self", ",", "pos", ",", "d", ")", ":", "\n", "# d is tuple", "\n", "        ", "if", "len", "(", "d", ")", "==", "1", ":", "\n", "            ", "next_pos", "=", "(", "pos", "+", "d", "[", "0", "]", ")", "%", "self", ".", "size", "\n", "return", "next_pos", "\n", "", "elif", "len", "(", "d", ")", "==", "2", ":", "\n", "            ", "asc_pos", ",", "dec_pos", "=", "d", "[", "0", "]", ",", "d", "[", "1", "]", "\n", "assert_print", "(", "0", "<=", "asc_pos", "<", "self", ".", "dim", ")", "\n", "assert_print", "(", "0", "<=", "dec_pos", "<", "self", ".", "dim", ")", "\n", "assert_print", "(", "asc_pos", "!=", "dec_pos", ")", "\n", "current", "=", "self", ".", "static_entities", "[", "pos", "]", "\n", "ret", "=", "current", ".", "copy", "(", ")", "\n", "left", "=", "current", "[", "asc_pos", "]", "*", "current", "[", "dec_pos", "]", "\n", "canout", "=", "False", "\n", "next_pos", "=", "-", "1", "\n", "while", "not", "canout", ":", "\n", "                ", "tmp", "=", "ret", "[", "asc_pos", "]", "+", "1", "\n", "while", "tmp", "<=", "left", ":", "\n", "                    ", "if", "self", ".", "allow_non_divisible", "==", "'continuous'", ":", "\n", "                        ", "break", "\n", "", "elif", "self", ".", "allow_non_divisible", "==", "'power2'", "and", "is_power_of_x", "(", "2", ",", "tmp", ")", ":", "\n", "                        ", "break", "\n", "", "elif", "left", "%", "tmp", "==", "0", ":", "\n", "                        ", "break", "\n", "", "tmp", "+=", "1", "\n", "", "tmp", "=", "min", "(", "tmp", ",", "left", ")", "\n", "ret", "[", "asc_pos", "]", "=", "tmp", "\n", "ret", "[", "dec_pos", "]", "=", "math", ".", "ceil", "(", "left", "/", "tmp", ")", "\n", "try", ":", "\n", "                    ", "next_pos", "=", "self", ".", "static_entities", ".", "index", "(", "ret", ")", "\n", "canout", "=", "True", "\n", "", "except", "ValueError", ":", "\n", "                    ", "canout", "=", "False", "\n", "", "", "return", "next_pos", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Not support for direction more than two dims: {}\"", ".", "format", "(", "d", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.SplitSpace.get_direction": [[169, 171], ["None"], "methods", ["None"], ["", "", "def", "get_direction", "(", "self", ",", "num", ")", ":", "\n", "        ", "return", "self", ".", "directions", "[", "num", "%", "self", ".", "num_direction", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.IntrinSplitSpace.gen_pow2_factors": [[174, 180], ["max", "map", "int", "range", "math.log2", "math.ceil", "int", "math.log2", "math.ceil"], "methods", ["None"], ["    ", "def", "gen_pow2_factors", "(", "self", ",", "dim", ")", ":", "\n", "        ", "DIM", "=", "4", "# TODO", "\n", "dim", "=", "max", "(", "dim", ",", "DIM", ")", "\n", "low", ",", "high", "=", "int", "(", "math", ".", "log2", "(", "DIM", ")", ")", ",", "math", ".", "ceil", "(", "math", ".", "log2", "(", "dim", ")", ")", "+", "1", "\n", "res", "=", "map", "(", "lambda", "i", ":", "2", "**", "i", ",", "range", "(", "low", ",", "high", ")", ")", "\n", "return", "[", "[", "int", "(", "math", ".", "ceil", "(", "dim", "/", "x", ")", ")", ",", "x", "]", "for", "x", "in", "res", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.IntrinSplitSpace.__init__": [[181, 189], ["space.SubSpace.__init__", "space.IntrinSplitSpace.gen_pow2_factors", "len"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.BenchmarkCNN.__init__", "home.repos.pwc.inspect_result.pku-liang_HASCO.conv-autotvm.conv2d_micro.gen_pow2_factors"], ["", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "super", "(", "IntrinSplitSpace", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "2", "\n", "self", ".", "static_entities", "=", "self", ".", "gen_pow2_factors", "(", "length", ")", "\n", "self", ".", "num_direction", "=", "2", "\n", "self", ".", "directions", "=", "[", "(", "1", ",", "0", ")", ",", "(", "0", ",", "1", ")", "]", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "static_entities", ")", "\n", "self", ".", "type_key", "=", "\"split\"", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.IntrinSplitSpace.next_entity": [[190, 197], ["len", "max", "min"], "methods", ["None"], ["", "def", "next_entity", "(", "self", ",", "pos", ",", "d", ")", ":", "\n", "        ", "if", "len", "(", "d", ")", "==", "1", ":", "\n", "            ", "next_pos", "=", "(", "pos", "+", "d", "[", "0", "]", ")", "%", "self", ".", "size", "\n", "return", "next_pos", "\n", "", "else", ":", "\n", "            ", "next_pos", "=", "max", "(", "0", ",", "min", "(", "self", ".", "size", "-", "1", ",", "pos", "+", "d", "[", "0", "]", "-", "d", "[", "1", "]", ")", ")", "\n", "return", "next_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.IntrinSplitSpace.get_direction": [[198, 200], ["None"], "methods", ["None"], ["", "", "def", "get_direction", "(", "self", ",", "num", ")", ":", "\n", "        ", "return", "self", ".", "directions", "[", "num", "%", "self", ".", "num_direction", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.FuseSpace.__init__": [[203, 210], ["flextensor.utils.gen_group", "len"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.gen_group"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "elements", ")", ":", "\n", "        ", "self", ".", "dim", "=", "dim", "\n", "self", ".", "static_entities", "=", "gen_group", "(", "elements", ",", "most_groups", "=", "self", ".", "dim", ")", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "static_entities", ")", "\n", "self", ".", "num_direction", "=", "2", "\n", "self", ".", "directions", "=", "[", "(", "-", "1", ",", ")", ",", "(", "1", ",", ")", "]", "\n", "self", ".", "type_key", "=", "\"fuse\"", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.FuseSpace.next_entity": [[211, 219], ["len", "RuntimeError"], "methods", ["None"], ["", "def", "next_entity", "(", "self", ",", "pos", ",", "d", ")", ":", "\n", "# d is tuple", "\n", "        ", "if", "len", "(", "d", ")", "==", "1", ":", "\n", "            ", "pos", "=", "(", "pos", "+", "d", "[", "0", "]", ")", "%", "self", ".", "size", "\n", "return", "pos", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Not support for direction more than one dim: {}\"", ".", "format", "(", "d", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.FuseSpace.get_direction": [[220, 222], ["None"], "methods", ["None"], ["", "", "def", "get_direction", "(", "self", ",", "num", ")", ":", "\n", "        ", "return", "self", ".", "directions", "[", "num", "%", "self", ".", "num_direction", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.ReorderSpace.__init__": [[225, 232], ["len", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_spatial_axis", ")", ":", "\n", "        ", "self", ".", "dim", "=", "1", "\n", "self", ".", "static_entities", "=", "[", "[", "i", "]", "for", "i", "in", "range", "(", "num_spatial_axis", ")", "]", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "static_entities", ")", "\n", "self", ".", "num_direction", "=", "2", "\n", "self", ".", "directions", "=", "[", "(", "-", "1", ",", ")", ",", "(", "1", ",", ")", "]", "\n", "self", ".", "type_key", "=", "\"reorder\"", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.ReorderSpace.next_entity": [[233, 241], ["len", "RuntimeError"], "methods", ["None"], ["", "def", "next_entity", "(", "self", ",", "pos", ",", "d", ")", ":", "\n", "# d is tuple", "\n", "        ", "if", "len", "(", "d", ")", "==", "1", ":", "\n", "            ", "pos", "=", "(", "pos", "+", "d", "[", "0", "]", ")", "%", "self", ".", "size", "\n", "return", "pos", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Not support for direction more than one dim: {}\"", ".", "format", "(", "d", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.ReorderSpace.get_direction": [[242, 244], ["None"], "methods", ["None"], ["", "", "def", "get_direction", "(", "self", ",", "num", ")", ":", "\n", "        ", "return", "self", ".", "directions", "[", "num", "%", "self", ".", "num_direction", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.UnrollSpace.__init__": [[247, 260], ["space.SubSpace.__init__", "len", "space.UnrollSpace.static_entities.append"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.BenchmarkCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "steps", ",", "explicit", "=", "False", ")", ":", "\n", "        ", "super", "(", "UnrollSpace", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "2", "\n", "self", ".", "static_entities", "=", "[", "]", "\n", "self", ".", "steps", "=", "steps", "\n", "explicits", "=", "[", "1", "]", "if", "explicit", "else", "[", "0", ",", "1", "]", "\n", "for", "step", "in", "steps", ":", "\n", "            ", "for", "_explicit", "in", "explicits", ":", "\n", "                ", "self", ".", "static_entities", ".", "append", "(", "[", "step", ",", "_explicit", "]", ")", "\n", "", "", "self", ".", "size", "=", "len", "(", "self", ".", "static_entities", ")", "\n", "self", ".", "num_direction", "=", "2", "\n", "self", ".", "directions", "=", "[", "(", "-", "1", ",", ")", ",", "(", "1", ",", ")", "]", "\n", "self", ".", "type_key", "=", "\"unroll\"", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.UnrollSpace.next_entity": [[261, 269], ["len", "RuntimeError"], "methods", ["None"], ["", "def", "next_entity", "(", "self", ",", "pos", ",", "d", ")", ":", "\n", "# d is tuple", "\n", "        ", "if", "len", "(", "d", ")", "==", "1", ":", "\n", "            ", "pos", "=", "(", "pos", "+", "d", "[", "0", "]", ")", "%", "self", ".", "size", "\n", "return", "pos", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Not support for direction more than one dim: {}\"", ".", "format", "(", "d", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.UnrollSpace.get_direction": [[270, 272], ["None"], "methods", ["None"], ["", "", "def", "get_direction", "(", "self", ",", "num", ")", ":", "\n", "        ", "return", "self", ".", "directions", "[", "num", "%", "self", ".", "num_direction", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.PosSpace.__init__": [[275, 287], ["range", "len", "range", "space.PosSpace.static_entities.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parts", ",", "num_axis", ")", ":", "\n", "        ", "self", ".", "dim", "=", "2", "\n", "self", ".", "static_entities", "=", "[", "]", "\n", "self", ".", "parts", "=", "parts", "\n", "self", ".", "num_axis", "=", "num_axis", "\n", "for", "i", "in", "range", "(", "parts", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "num_axis", ")", ":", "\n", "                ", "self", ".", "static_entities", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "", "", "self", ".", "size", "=", "len", "(", "self", ".", "static_entities", ")", "\n", "self", ".", "num_direction", "=", "2", "\n", "self", ".", "directions", "=", "[", "(", "-", "1", ",", ")", ",", "(", "1", ",", ")", "]", "\n", "self", ".", "type_key", "=", "\"local\"", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.PosSpace.next_entity": [[288, 296], ["len", "RuntimeError"], "methods", ["None"], ["", "def", "next_entity", "(", "self", ",", "pos", ",", "d", ")", ":", "\n", "# d is tuple", "\n", "        ", "if", "len", "(", "d", ")", "==", "1", ":", "\n", "            ", "pos", "=", "(", "pos", "+", "d", "[", "0", "]", ")", "%", "self", ".", "size", "\n", "return", "pos", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Not support for direction more than one dim: {}\"", ".", "format", "(", "d", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.PosSpace.get_direction": [[297, 299], ["None"], "methods", ["None"], ["", "", "def", "get_direction", "(", "self", ",", "num", ")", ":", "\n", "        ", "return", "self", ".", "directions", "[", "num", "%", "self", ".", "num_direction", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.InlineSpace.__init__": [[302, 323], ["len", "space.InlineSpace.static_entities.append", "len", "flextensor.utils.gen_enum", "range", "space.InlineSpace.static_entities.append"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.gen_enum"], ["    ", "def", "__init__", "(", "self", ",", "inline_op_pos", ",", "op_num", ",", "force_inline", "=", "False", ")", ":", "\n", "        ", "self", ".", "dim", "=", "op_num", "\n", "self", ".", "static_entities", "=", "[", "]", "\n", "self", ".", "able_inline_list", "=", "inline_op_pos", "\n", "if", "force_inline", ":", "\n", "            ", "entity", "=", "[", "0", "]", "*", "op_num", "\n", "for", "pos", "in", "inline_op_pos", ":", "\n", "                ", "entity", "[", "pos", "]", "=", "1", "\n", "", "self", ".", "static_entities", ".", "append", "(", "entity", ")", "\n", "", "else", ":", "\n", "            ", "num_inline_ops", "=", "len", "(", "inline_op_pos", ")", "\n", "enums", "=", "gen_enum", "(", "[", "1", ",", "0", "]", ",", "num_inline_ops", ")", "\n", "for", "enum", "in", "enums", ":", "\n", "                ", "entity", "=", "[", "0", "]", "*", "op_num", "\n", "for", "i", "in", "range", "(", "num_inline_ops", ")", ":", "\n", "                    ", "entity", "[", "inline_op_pos", "[", "i", "]", "]", "=", "enum", "[", "i", "]", "\n", "", "self", ".", "static_entities", ".", "append", "(", "entity", ")", "\n", "", "", "self", ".", "size", "=", "len", "(", "self", ".", "static_entities", ")", "\n", "self", ".", "num_direction", "=", "2", "\n", "self", ".", "directions", "=", "[", "(", "-", "1", ",", ")", ",", "(", "1", ",", ")", "]", "\n", "self", ".", "type_key", "=", "\"inline\"", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.InlineSpace.next_entity": [[324, 332], ["len", "RuntimeError"], "methods", ["None"], ["", "def", "next_entity", "(", "self", ",", "pos", ",", "d", ")", ":", "\n", "# d is tuple", "\n", "        ", "if", "len", "(", "d", ")", "==", "1", ":", "\n", "            ", "pos", "=", "(", "pos", "+", "d", "[", "0", "]", ")", "%", "self", ".", "size", "\n", "return", "pos", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Not support for direction more than one dim: {}\"", ".", "format", "(", "d", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.InlineSpace.get_direction": [[333, 335], ["None"], "methods", ["None"], ["", "", "def", "get_direction", "(", "self", ",", "num", ")", ":", "\n", "        ", "return", "self", ".", "directions", "[", "num", "%", "self", ".", "num_direction", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.InlineSpace.able_inline": [[336, 338], ["None"], "methods", ["None"], ["", "def", "able_inline", "(", "self", ",", "pos", ")", ":", "\n", "        ", "return", "pos", "in", "self", ".", "able_inline_list", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.MergeSpce.__init__": [[341, 362], ["len", "space.MergeSpce.static_entities.append", "len", "flextensor.utils.gen_enum", "range", "space.MergeSpce.static_entities.append"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.gen_enum"], ["    ", "def", "__init__", "(", "self", ",", "merge_op_pos", ",", "op_num", ",", "force_merge", "=", "False", ")", ":", "\n", "        ", "self", ".", "dim", "=", "op_num", "\n", "self", ".", "static_entities", "=", "[", "]", "\n", "self", ".", "able_merge_list", "=", "merge_op_pos", "\n", "if", "force_merge", ":", "\n", "            ", "entity", "=", "[", "0", "]", "*", "op_num", "\n", "for", "pos", "in", "merge_op_pos", ":", "\n", "                ", "entity", "[", "pos", "]", "=", "1", "\n", "", "self", ".", "static_entities", ".", "append", "(", "entity", ")", "\n", "", "else", ":", "\n", "            ", "num_merge_ops", "=", "len", "(", "merge_op_pos", ")", "\n", "enums", "=", "gen_enum", "(", "[", "1", ",", "0", "]", ",", "num_merge_ops", ")", "\n", "for", "enum", "in", "enums", ":", "\n", "                ", "entity", "=", "[", "0", "]", "*", "op_num", "\n", "for", "i", "in", "range", "(", "num_merge_ops", ")", ":", "\n", "                    ", "entity", "[", "merge_op_pos", "[", "i", "]", "]", "=", "enum", "[", "i", "]", "\n", "", "self", ".", "static_entities", ".", "append", "(", "entity", ")", "\n", "", "", "self", ".", "size", "=", "len", "(", "self", ".", "static_entities", ")", "\n", "self", ".", "num_direction", "=", "2", "\n", "self", ".", "directions", "=", "[", "(", "-", "1", ",", ")", ",", "(", "1", ",", ")", "]", "\n", "self", ".", "type_key", "=", "\"merge\"", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.MergeSpce.next_entity": [[363, 371], ["len", "RuntimeError"], "methods", ["None"], ["", "def", "next_entity", "(", "self", ",", "pos", ",", "d", ")", ":", "\n", "# d is tuple", "\n", "        ", "if", "len", "(", "d", ")", "==", "1", ":", "\n", "            ", "pos", "=", "(", "pos", "+", "d", "[", "0", "]", ")", "%", "self", ".", "size", "\n", "return", "pos", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Not support for direction more than one dim: {}\"", ".", "format", "(", "d", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.MergeSpce.get_direction": [[372, 374], ["None"], "methods", ["None"], ["", "", "def", "get_direction", "(", "self", ",", "num", ")", ":", "\n", "        ", "return", "self", ".", "directions", "[", "num", "%", "self", ".", "num_direction", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.MergeSpce.able_merge": [[375, 377], ["None"], "methods", ["None"], ["", "def", "able_merge", "(", "self", ",", "pos", ")", ":", "\n", "        ", "return", "pos", "in", "self", ".", "able_merge_list", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.EnumSpace.__init__": [[380, 386], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "knobs", ")", ":", "\n", "        ", "self", ".", "dim", "=", "2", "\n", "self", ".", "static_entities", "=", "knobs", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "static_entities", ")", "\n", "self", ".", "num_direction", "=", "2", "\n", "self", ".", "directions", "=", "[", "(", "-", "1", ",", ")", ",", "(", "1", ",", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.EnumSpace.next_entity": [[387, 395], ["len", "RuntimeError"], "methods", ["None"], ["", "def", "next_entity", "(", "self", ",", "pos", ",", "d", ")", ":", "\n", "# d is tuple", "\n", "        ", "if", "len", "(", "d", ")", "==", "1", ":", "\n", "            ", "pos", "=", "(", "pos", "+", "d", "[", "0", "]", ")", "%", "self", ".", "size", "\n", "return", "pos", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Not support for direction more than one dim: {}\"", ".", "format", "(", "d", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.EnumSpace.get_direction": [[396, 398], ["None"], "methods", ["None"], ["", "", "def", "get_direction", "(", "self", ",", "num", ")", ":", "\n", "        ", "return", "self", ".", "directions", "[", "num", "%", "self", ".", "num_direction", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.IntrinSpace.__init__": [[401, 407], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lst", ")", ":", "\n", "        ", "self", ".", "dim", "=", "1", "\n", "self", ".", "static_entities", "=", "lst", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "static_entities", ")", "\n", "self", ".", "num_direction", "=", "2", "\n", "self", ".", "directions", "=", "[", "(", "-", "1", ",", ")", ",", "(", "1", ",", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.IntrinSpace.next_entity": [[408, 416], ["len", "RuntimeError"], "methods", ["None"], ["", "def", "next_entity", "(", "self", ",", "pos", ",", "d", ")", ":", "\n", "# d is tuple", "\n", "        ", "if", "len", "(", "d", ")", "==", "1", ":", "\n", "            ", "pos", "=", "(", "pos", "+", "d", "[", "0", "]", ")", "%", "self", ".", "size", "\n", "return", "pos", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Not support for direction more than one dim: {}\"", ".", "format", "(", "d", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.IntrinSpace.get_direction": [[417, 419], ["None"], "methods", ["None"], ["", "", "def", "get_direction", "(", "self", ",", "num", ")", ":", "\n", "        ", "return", "self", ".", "directions", "[", "num", "%", "self", ".", "num_direction", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.able_inline": [[11, 20], ["isinstance", "range", "hasattr", "op.output"], "function", ["None"], ["def", "able_inline", "(", "op", ",", "down_graph", ")", ":", "\n", "    ", "is_compute", "=", "isinstance", "(", "op", ",", "tvm", ".", "tensor", ".", "ComputeOp", ")", "\n", "has_reduce", "=", "hasattr", "(", "op", ",", "\"reduce_axis\"", ")", "and", "op", ".", "reduce_axis", "\n", "is_output", "=", "False", "\n", "for", "i", "in", "range", "(", "op", ".", "num_outputs", ")", ":", "\n", "        ", "if", "op", ".", "output", "(", "i", ")", "not", "in", "down_graph", ":", "\n", "            ", "is_output", "=", "True", "\n", "break", "\n", "", "", "return", "is_compute", "and", "(", "not", "has_reduce", ")", "and", "(", "not", "is_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_inline_space": [[421, 427], ["enumerate", "space.InlineSpace", "space.able_inline", "len", "inline_op_pos.append"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.able_inline"], ["", "", "def", "generate_inline_space", "(", "op_lst", ",", "down_graph", ",", "force_inline", "=", "False", ")", ":", "\n", "    ", "inline_op_pos", "=", "[", "]", "\n", "for", "i", ",", "op", "in", "enumerate", "(", "op_lst", ")", ":", "\n", "        ", "if", "able_inline", "(", "op", ",", "down_graph", ")", ":", "\n", "            ", "inline_op_pos", ".", "append", "(", "i", ")", "\n", "", "", "return", "InlineSpace", "(", "inline_op_pos", ",", "len", "(", "op_lst", ")", ",", "force_inline", "=", "force_inline", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_merge_space": [[429, 432], ["list", "space.MergeSpce", "range", "len", "len"], "function", ["None"], ["", "def", "generate_merge_space", "(", "op_lst", ",", "down_graph", ",", "force_merge", "=", "False", ")", ":", "\n", "    ", "merge_ops", "=", "list", "(", "range", "(", "len", "(", "op_lst", ")", ")", ")", "\n", "return", "MergeSpce", "(", "merge_ops", ",", "len", "(", "op_lst", ")", ",", "force_merge", "=", "force_merge", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_fuse_space": [[434, 436], ["space.FuseSpace"], "function", ["None"], ["", "def", "generate_fuse_space", "(", "loops", ",", "groups", ")", ":", "\n", "    ", "return", "FuseSpace", "(", "groups", ",", "loops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_split_space": [[438, 440], ["space.SplitSpace"], "function", ["None"], ["", "def", "generate_split_space", "(", "extent", ",", "nparts", ",", "allow_non_divisible", "=", "'off'", ")", ":", "\n", "    ", "return", "SplitSpace", "(", "nparts", ",", "extent", ",", "allow_non_divisible", "=", "allow_non_divisible", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_reorder_space": [[442, 444], ["space.ReorderSpace"], "function", ["None"], ["", "def", "generate_reorder_space", "(", "num_spatial_axis", ")", ":", "\n", "    ", "return", "ReorderSpace", "(", "num_spatial_axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_unroll_space": [[446, 448], ["space.UnrollSpace"], "function", ["None"], ["", "def", "generate_unroll_space", "(", "explicit", "=", "False", ")", ":", "\n", "    ", "return", "UnrollSpace", "(", "[", "0", ",", "1", ",", "512", ",", "1500", "]", ",", "explicit", "=", "explicit", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_intrin_space": [[450, 522], ["flextensor.intrinsic.get_intrin_table", "tvm.expr.Reduce", "tvm._api_internal._ComputeOp", "tvm._api_internal._ComputeOp.output", "flextensor.intrinsic.get_intrin_table", "enumerate", "space.IntrinSpace", "RuntimeError", "tvm.api.convert", "intrin.func", "hasattr", "itertools.permutations", "hasattr", "itertools.product", "len", "RuntimeError", "tvm.reduce_axis", "new_axis.append", "new_axis.append", "range", "itertools.permutations", "tvm.ir_pass.intrinsic_match", "len", "len", "range", "candidates.append", "str", "len", "len"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.intrinsic.get_intrin_table", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.intrinsic.get_intrin_table"], ["", "def", "generate_intrin_space", "(", "op", ",", "target", ")", ":", "\n", "    ", "key", "=", "target_embedding", "[", "target", "]", "\n", "INTRIN_TABLE", "=", "get_intrin_table", "(", ")", "\n", "if", "key", "not", "in", "INTRIN_TABLE", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Can't find any pre-defined intrinsic for target %s.\"", "%", "target", ")", "\n", "", "assert", "op", ".", "num_outputs", "==", "1", ",", "\"Only support one output\"", "\n", "# out_t = op.output(0)", "\n", "expr", "=", "op", ".", "body", "[", "0", "]", "\n", "new_axis", "=", "[", "]", "\n", "for", "ax", "in", "expr", ".", "axis", ":", "\n", "        ", "var_name", "=", "ax", ".", "var", ".", "name", "\n", "ax_type", "=", "ax", ".", "iter_type", "\n", "if", "ax_type", "==", "2", ":", "# reduce axis", "\n", "            ", "new_ax", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "2", ")", ",", "name", "=", "var_name", ")", "\n", "new_axis", ".", "append", "(", "new_ax", ")", "\n", "", "else", ":", "\n", "            ", "new_axis", ".", "append", "(", "ax", ")", "\n", "\n", "", "", "new_expr", "=", "tvm", ".", "expr", ".", "Reduce", "(", "expr", ".", "combiner", ",", "expr", ".", "source", ",", "new_axis", ",", "tvm", ".", "api", ".", "convert", "(", "True", ")", ",", "expr", ".", "value_index", ")", "\n", "new_op", "=", "tvm", ".", "_api_internal", ".", "_ComputeOp", "(", "\n", "op", ".", "name", ",", "op", ".", "tag", ",", "op", ".", "attrs", ",", "op", ".", "axis", ",", "[", "new_expr", "]", ")", "\n", "out_t", "=", "new_op", ".", "output", "(", "0", ")", "\n", "\n", "candidates", "=", "[", "]", "\n", "# key = target_embedding[target]", "\n", "# print(\"?\"*15)", "\n", "INTRIN_TABLE", "=", "get_intrin_table", "(", ")", "\n", "for", "no", ",", "intrin", "in", "enumerate", "(", "INTRIN_TABLE", "[", "key", "]", ")", ":", "\n", "        ", "intrin_t", ",", "_", "=", "intrin", ".", "func", "(", "*", "intrin", ".", "args", ")", "\n", "# print(\"*\"*20)", "\n", "# print(no, intrin)", "\n", "intrin_axis", "=", "intrin_t", ".", "op", ".", "axis", "\n", "if", "hasattr", "(", "intrin_t", ".", "op", ",", "\"reduce_axis\"", ")", ":", "\n", "            ", "intrin_reduce_axis", "=", "intrin_t", ".", "op", ".", "reduce_axis", "\n", "", "else", ":", "\n", "            ", "intrin_reduce_axis", "=", "[", "]", "\n", "\n", "", "permute_axis", "=", "permutations", "(", "range", "(", "len", "(", "op", ".", "axis", ")", ")", ",", "r", "=", "len", "(", "intrin_axis", ")", ")", "\n", "if", "hasattr", "(", "op", ",", "\"reduce_axis\"", ")", ":", "\n", "            ", "op_reduce_axis", "=", "op", ".", "reduce_axis", "\n", "# for re in op.reduce_axis:", "\n", "#     var_name = re.var.name", "\n", "#     op_reduce_axis.append(tvm.reduce_axis((0, 2), name=var_name))", "\n", "# op.reduce_axis", "\n", "permute_reduce_axis", "=", "permutations", "(", "range", "(", "len", "(", "op_reduce_axis", ")", ")", ",", "r", "=", "len", "(", "intrin_reduce_axis", ")", ")", "\n", "", "else", ":", "\n", "            ", "op_reduce_axis", "=", "[", "]", "\n", "permute_reduce_axis", "=", "[", "]", "\n", "\n", "\n", "# print(\"~~~~~~~~~~~~~~~~~~~~~~~~\")", "\n", "# print(out_t.op.body)", "\n", "# print(intrin_t.op.body)", "\n", "# print(\"$$$$$$$$$$$$$$$$$$$$$$\")", "\n", "# print(op.axis)", "\n", "# print(\"1!!!!!!!!!!!!!!!\")", "\n", "# print(intrin_t.op.axis)", "\n", "", "for", "sp", ",", "re", "in", "product", "(", "permute_axis", ",", "permute_reduce_axis", ")", ":", "\n", "# sp = [1, 2, 3]", "\n", "# for re in permute_reduce_axis:", "\n", "            ", "axis", "=", "[", "op", ".", "axis", "[", "i", "]", ".", "var", "for", "i", "in", "sp", "]", "\n", "reduce_axis", "=", "[", "op_reduce_axis", "[", "i", "]", ".", "var", "for", "i", "in", "re", "]", "\n", "# print(axis)", "\n", "# print(type(reduce_axis))", "\n", "# print(type(reduce_axis[0]))", "\n", "match", "=", "tvm", ".", "ir_pass", ".", "intrinsic_match", "(", "out_t", ",", "intrin_t", ",", "axis", ",", "reduce_axis", ")", "\n", "if", "match", ":", "\n", "                ", "candidates", ".", "append", "(", "(", "key", ",", "no", ",", "sp", ",", "re", ")", ")", "\n", "# print(len(candidates))            ", "\n", "", "", "", "if", "len", "(", "candidates", ")", "==", "0", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Can't match any intrinsic for given compute %s.\"", "%", "(", "str", "(", "op", ".", "body", ")", ")", ")", "\n", "", "return", "IntrinSpace", "(", "candidates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_space_intra_op": [[524, 560], ["space.Space", "enumerate", "enumerate", "space.generate_unroll_space", "Space.add_subspace", "space.generate_fuse_space", "Space.add_subspace", "zip", "space.generate_split_space", "Space.add_subspace", "zip", "space.generate_split_space", "Space.add_subspace", "space.generate_reorder_space", "Space.add_subspace"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_unroll_space", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.add_subspace", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_fuse_space", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.add_subspace", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_split_space", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.add_subspace", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_split_space", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.add_subspace", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_reorder_space", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.add_subspace"], ["", "def", "generate_space_intra_op", "(", "op", ",", "down_graph", ",", "slevel", "=", "4", ",", "rlevel", "=", "3", ",", "groups", "=", "3", ",", "split_policy", "=", "\"off\"", ",", "\n", "unroll_policy", "=", "\"off\"", ",", "fuse_policy", "=", "\"fuse_spatial\"", ",", "reorder_policy", "=", "\"last\"", ")", ":", "\n", "    ", "spatial_axis_names", "=", "[", "x", ".", "var", ".", "name", "for", "x", "in", "op", ".", "axis", "]", "\n", "spatial_axis_extents", "=", "[", "x", ".", "dom", ".", "extent", ".", "value", "for", "x", "in", "op", ".", "axis", "]", "\n", "reduced_axis_names", "=", "[", "x", ".", "var", ".", "name", "for", "x", "in", "op", ".", "reduce_axis", "]", "\n", "reduced_axis_extents", "=", "[", "x", ".", "dom", ".", "extent", ".", "value", "for", "x", "in", "op", ".", "reduce_axis", "]", "\n", "\n", "##############################################################", "\n", "# generate space: ", "\n", "schedule_space", "=", "Space", "(", ")", "\n", "\n", "# - fuse space", "\n", "if", "fuse_policy", "==", "\"fuse_spatial\"", ":", "\n", "        ", "fuse_space", "=", "generate_fuse_space", "(", "spatial_axis_names", ",", "groups", ")", "\n", "schedule_space", ".", "add_subspace", "(", "\"fuse_spatial\"", ",", "fuse_space", ",", "\"fuse\"", ")", "\n", "\n", "# - split space", "\n", "", "for", "i", ",", "(", "name", ",", "extent", ")", "in", "enumerate", "(", "zip", "(", "spatial_axis_names", ",", "spatial_axis_extents", ")", ")", ":", "\n", "        ", "split_space", "=", "generate_split_space", "(", "extent", ",", "slevel", ",", "allow_non_divisible", "=", "split_policy", ")", "\n", "schedule_space", ".", "add_subspace", "(", "\"split_{}_{}\"", ".", "format", "(", "name", ",", "i", ")", ",", "split_space", ",", "\"spatial\"", ")", "\n", "", "for", "i", ",", "(", "name", ",", "extent", ")", "in", "enumerate", "(", "zip", "(", "reduced_axis_names", ",", "reduced_axis_extents", ")", ")", ":", "\n", "        ", "split_space", "=", "generate_split_space", "(", "extent", ",", "rlevel", ",", "allow_non_divisible", "=", "split_policy", ")", "\n", "schedule_space", ".", "add_subspace", "(", "\"split_{}_{}\"", ".", "format", "(", "name", ",", "i", ")", ",", "split_space", ",", "\"reduce\"", ")", "\n", "\n", "# - reorder space", "\n", "", "if", "reorder_policy", "==", "\"last\"", ":", "\n", "        ", "reorder_space", "=", "generate_reorder_space", "(", "groups", ")", "\n", "schedule_space", ".", "add_subspace", "(", "\"reorder\"", ",", "reorder_space", ",", "\"reorder\"", ")", "\n", "\n", "# -unroll space", "\n", "", "unroll_space", "=", "generate_unroll_space", "(", "explicit", "=", "(", "unroll_policy", "==", "\"explicit\"", ")", ")", "\n", "schedule_space", ".", "add_subspace", "(", "\"unroll\"", ",", "unroll_space", ",", "\"unroll\"", ")", "\n", "\n", "# - other special spaces can be added   ", "\n", "\n", "return", "schedule_space", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_op_space_with_intrin": [[562, 621], ["space.Space", "space.generate_intrin_space", "Space.add_subspace", "enumerate", "enumerate", "space.generate_reorder_space", "Space.add_subspace", "zip", "space.generate_split_space", "Space.add_subspace", "zip", "space.generate_split_space", "Space.add_subspace", "len", "len"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_intrin_space", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.add_subspace", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_reorder_space", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.add_subspace", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_split_space", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.add_subspace", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_split_space", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.add_subspace"], ["", "def", "generate_op_space_with_intrin", "(", "op", ",", "target", ",", "slevel", "=", "2", ",", "rlevel", "=", "2", ",", "split_policy", "=", "\"off\"", ")", ":", "\n", "\n", "#print(op.axis)", "\n", "    ", "spatial_axis_names", "=", "[", "x", ".", "var", ".", "name", "for", "x", "in", "op", ".", "axis", "]", "\n", "spatial_axis_extents", "=", "[", "x", ".", "dom", ".", "extent", ".", "value", "for", "x", "in", "op", ".", "axis", "]", "\n", "reduced_axis_names", "=", "[", "x", ".", "var", ".", "name", "for", "x", "in", "op", ".", "reduce_axis", "]", "\n", "reduced_axis_extents", "=", "[", "x", ".", "dom", ".", "extent", ".", "value", "for", "x", "in", "op", ".", "reduce_axis", "]", "\n", "\n", "##############################################################", "\n", "# generate space: ", "\n", "schedule_space", "=", "Space", "(", ")", "\n", "\n", "# - intrin space", "\n", "intrin_space", "=", "generate_intrin_space", "(", "op", ",", "target", ")", "\n", "schedule_space", ".", "add_subspace", "(", "\"intrinsic\"", ",", "intrin_space", ",", "\"intrin\"", ")", "\n", "\n", "\n", "# - split space", "\n", "for", "i", ",", "(", "name", ",", "extent", ")", "in", "enumerate", "(", "zip", "(", "spatial_axis_names", ",", "spatial_axis_extents", ")", ")", ":", "\n", "        ", "split_space", "=", "generate_split_space", "(", "extent", ",", "slevel", ",", "allow_non_divisible", "=", "split_policy", ")", "\n", "schedule_space", ".", "add_subspace", "(", "\"split_{}_{}\"", ".", "format", "(", "name", ",", "i", ")", ",", "split_space", ",", "\"spatial\"", ")", "\n", "", "for", "i", ",", "(", "name", ",", "extent", ")", "in", "enumerate", "(", "zip", "(", "reduced_axis_names", ",", "reduced_axis_extents", ")", ")", ":", "\n", "        ", "split_space", "=", "generate_split_space", "(", "extent", ",", "rlevel", ",", "allow_non_divisible", "=", "split_policy", ")", "\n", "# if i in re_intrin_idx_lst:", "\n", "#     split_space = IntrinSplitSpace(extent)", "\n", "# else:", "\n", "#     split_space = generate_split_space(extent, 1, allow_non_divisible=split_policy)", "\n", "schedule_space", ".", "add_subspace", "(", "\"split_{}_{}\"", ".", "format", "(", "name", ",", "i", ")", ",", "split_space", ",", "\"reduce\"", ")", "\n", "\n", "\n", "# print(intrin_space.static_entities)", "\n", "# sp_intrin_idx_lst = reduce(lambda a, b: a + b, [cfg[2] for cfg in intrin_space.static_entities])", "\n", "# re_intrin_idx_lst = reduce(lambda a, b: a + b, [cfg[3] for cfg in intrin_space.static_entities])", "\n", "\n", "# # - split space", "\n", "# for i, (name, extent) in enumerate(zip(spatial_axis_names, spatial_axis_extents)):", "\n", "#     split_space = generate_split_space(extent, slevel if i in sp_intrin_idx_lst else 1,", "\n", "#                                        allow_non_divisible=split_policy)", "\n", "#     # if i in sp_intrin_idx_lst:", "\n", "#     #     split_space = IntrinSplitSpace(extent)", "\n", "#     # else:", "\n", "#     #     split_space = generate_split_space(extent, 1, allow_non_divisible=split_policy)", "\n", "#     print(\"split_{}_{}\".format(name, i), extent, slevel if i in sp_intrin_idx_lst else 1)", "\n", "#     schedule_space.add_subspace(\"split_{}_{}\".format(name, i), split_space, \"spatial\")", "\n", "# for i, (name, extent) in enumerate(zip(reduced_axis_names, reduced_axis_extents)):", "\n", "#     split_space = generate_split_space(extent, rlevel if i in re_intrin_idx_lst else 1,", "\n", "#                                        allow_non_divisible=split_policy)", "\n", "#     # if i in re_intrin_idx_lst:", "\n", "#     #     split_space = IntrinSplitSpace(extent)", "\n", "#     # else:", "\n", "#     #     split_space = generate_split_space(extent, 1, allow_non_divisible=split_policy)", "\n", "#     schedule_space.add_subspace(\"split_{}_{}\".format(name, i), split_space, \"reduce\")", "\n", "\n", "# - reorder space", "\n", "", "reorder_space", "=", "generate_reorder_space", "(", "len", "(", "op", ".", "axis", ")", "+", "len", "(", "op", ".", "reduce_axis", ")", ")", "\n", "schedule_space", ".", "add_subspace", "(", "\"reorder\"", ",", "reorder_space", ",", "\"reorder\"", ")", "\n", "\n", "# - other special spaces can be added   ", "\n", "return", "schedule_space", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_space_inter_op": [[623, 640], ["space.Space", "space.generate_inline_space", "Space.add_subspace", "special_space.items", "Space.add_subspace"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_inline_space", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.add_subspace", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.add_subspace"], ["", "def", "generate_space_inter_op", "(", "op_lst", ",", "down_graph", ",", "force_inline", "=", "False", ",", "force_merge", "=", "False", ",", "special_space", "=", "None", ")", ":", "\n", "##############################################################", "\n", "# generate space:", "\n", "    ", "schedule_space", "=", "Space", "(", ")", "\n", "# - inline space", "\n", "inline_space", "=", "generate_inline_space", "(", "op_lst", ",", "down_graph", ",", "force_inline", "=", "force_inline", ")", "\n", "schedule_space", ".", "add_subspace", "(", "\"inline\"", ",", "inline_space", ",", "\"inline\"", ")", "\n", "# - merge space", "\n", "# merge_space = generate_merge_space(op_lst, down_graph, force_merge=force_merge)", "\n", "# schedule_space.add_subspace(\"merge\", merge_space, \"merge\")", "\n", "\n", "# - other special spaces can be added   ", "\n", "special_space", "=", "{", "}", "if", "special_space", "is", "None", "else", "special_space", "\n", "for", "key", ",", "sspace", "in", "special_space", ".", "items", "(", ")", ":", "\n", "        ", "schedule_space", ".", "add_subspace", "(", "key", ",", "sspace", ",", "\"special\"", ")", "\n", "\n", "", "return", "schedule_space", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_empty_space_inter_op": [[642, 648], ["space.Space"], "function", ["None"], ["", "def", "generate_empty_space_inter_op", "(", ")", ":", "\n", "##############################################################", "\n", "# generate space:", "\n", "    ", "schedule_space", "=", "Space", "(", ")", "\n", "\n", "return", "schedule_space", "\n", "", ""]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.micro_scheduler.gen_micro_schedule": [[7, 22], ["flextensor.task.register_task", "flextensor.utils.RpcInfo", "flextensor.scheduler.schedule"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.task.register_task", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.schedule"], ["def", "gen_micro_schedule", "(", "task", ",", "target", ",", "model_func", "=", "None", ")", ":", "\n", "    ", "register_task", "(", "task", ",", "override", "=", "True", ")", "\n", "# register_intrin(intrin, override=True)", "\n", "rpc_info", "=", "RpcInfo", "(", "None", ",", "None", ")", "\n", "rpc_info", ".", "target", "=", "target", "\n", "s", ",", "bufs", ",", "config", "=", "schedule", "(", "\n", "task", ".", "key", ",", "\n", "slevel", "=", "2", ",", "rlevel", "=", "2", ",", "\n", "parallel", "=", "8", ",", "\n", "op_trial", "=", "10", ",", "\n", "model_measurer", "=", "model_func", ",", "\n", "rpc_info", "=", "rpc_info", ",", "\n", "warm_up_epoch", "=", "2", ",", "warm_up_number", "=", "8", "\n", ")", "\n", "return", "s", ",", "bufs", "\n", "", ""]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.measure.kill_child_processes": [[13, 25], ["psutil.Process.children", "psutil.Process", "process.send_signal"], "function", ["None"], ["def", "kill_child_processes", "(", "parent_pid", ",", "sig", "=", "signal", ".", "SIGTERM", ")", ":", "\n", "    ", "\"\"\"kill all child processes recursively\"\"\"", "\n", "try", ":", "\n", "        ", "parent", "=", "psutil", ".", "Process", "(", "parent_pid", ")", "\n", "", "except", "psutil", ".", "NoSuchProcess", ":", "\n", "        ", "return", "\n", "", "children", "=", "parent", ".", "children", "(", "recursive", "=", "True", ")", "\n", "for", "process", "in", "children", ":", "\n", "        ", "try", ":", "\n", "            ", "process", ".", "send_signal", "(", "sig", ")", "\n", "", "except", "psutil", ".", "NoSuchProcess", ":", "\n", "            ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.measure.parallel_evaluate": [[27, 53], ["multi.Queue", "range", "time.time", "multi.Process", "multi.Process.start", "proc.append", "any", "multi.Queue.empty", "multi.Queue.get", "time.time", "time.sleep", "multi.Process.terminate", "multi.Process.join", "multi.Process.is_alive"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get"], ["", "", "", "def", "parallel_evaluate", "(", "s", ",", "bufs", ",", "target", ",", "dev_id", ",", "number", "=", "10", ",", "timeout", "=", "10.0", ")", ":", "\n", "    ", "proc", "=", "[", "]", "\n", "q", "=", "multi", ".", "Queue", "(", ")", "\n", "for", "i", "in", "range", "(", "number", ")", ":", "\n", "        ", "p", "=", "multi", ".", "Process", "(", "target", "=", "_evaluate", ",", "args", "=", "(", "s", ",", "bufs", ",", "target", ",", "dev_id", ",", "1", ",", "q", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "proc", ".", "append", "(", "p", ")", "\n", "", "beg", "=", "time", ".", "time", "(", ")", "\n", "while", "time", ".", "time", "(", ")", "-", "beg", "<", "timeout", ":", "\n", "        ", "if", "any", "(", "p", ".", "is_alive", "(", ")", "for", "p", "in", "proc", ")", ":", "\n", "            ", "time", ".", "sleep", "(", ".1", ")", "\n", "", "else", ":", "\n", "            ", "break", "\n", "", "", "else", ":", "\n", "        ", "for", "p", "in", "proc", ":", "\n", "            ", "p", ".", "terminate", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "", "", "count", "=", "0", "\n", "sum", "=", "0", "\n", "while", "not", "q", ".", "empty", "(", ")", ":", "\n", "        ", "sum", "+=", "q", ".", "get", "(", ")", "\n", "count", "+=", "1", "\n", "", "while", "count", "<", "number", ":", "\n", "        ", "sum", "+=", "timeout", "*", "1e3", "\n", "count", "+=", "1", "\n", "", "return", "sum", "/", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.measure.serial_evaluate": [[55, 81], ["multi.Queue", "multi.Process", "multi.Process.start", "time.time", "range", "q.put", "multi.Process.is_alive", "multi.Process.terminate", "multi.Process.join", "multi.Queue.empty", "numpy.mean", "measure._evaluate", "ret.append", "time.time", "time.sleep", "numpy.array", "multi.Queue.get"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.measure._evaluate", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get"], ["", "def", "serial_evaluate", "(", "s", ",", "bufs", ",", "target", ",", "dev_id", ",", "number", "=", "10", ",", "timeout", "=", "10.0", ")", ":", "\n", "    ", "que", "=", "multi", ".", "Queue", "(", ")", "\n", "total_timeout", "=", "timeout", "*", "number", "\n", "\n", "def", "_evaluate_loop", "(", "q", ")", ":", "\n", "        ", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "number", ")", ":", "\n", "            ", "cost", "=", "_evaluate", "(", "s", ",", "bufs", ",", "target", ",", "dev_id", ")", "\n", "ret", ".", "append", "(", "cost", ")", "\n", "", "q", ".", "put", "(", "ret", ")", "\n", "\n", "", "p", "=", "multi", ".", "Process", "(", "target", "=", "_evaluate_loop", ",", "args", "=", "(", "que", ",", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "beg", "=", "time", ".", "time", "(", ")", "\n", "while", "time", ".", "time", "(", ")", "-", "beg", "<", "total_timeout", ":", "\n", "        ", "if", "p", ".", "is_alive", "(", ")", ":", "\n", "            ", "time", ".", "sleep", "(", ".1", ")", "\n", "", "else", ":", "\n", "            ", "break", "\n", "", "", "else", ":", "\n", "        ", "p", ".", "terminate", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "", "mean_val", "=", "timeout", "*", "1e3", "\n", "if", "not", "que", ".", "empty", "(", ")", ":", "\n", "        ", "mean_val", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "que", ".", "get", "(", ")", ")", ")", "\n", "", "return", "mean_val", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.measure.batch_evaluate": [[83, 97], ["multi.Queue", "multi.Process", "multi.Process.start", "multi.Process.join", "measure.kill_child_processes", "multi.Process.terminate", "multi.Process.join", "multi.Queue.empty", "multi.Queue.get"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.kill_child_processes", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get"], ["", "def", "batch_evaluate", "(", "s", ",", "bufs", ",", "target", ",", "dev_id", ",", "number", "=", "10", ",", "timeout", "=", "10.0", ")", ":", "\n", "    ", "que", "=", "multi", ".", "Queue", "(", ")", "\n", "total_timeout", "=", "timeout", "*", "number", "\n", "\n", "p", "=", "multi", ".", "Process", "(", "target", "=", "_evaluate", ",", "args", "=", "(", "s", ",", "bufs", ",", "target", ",", "dev_id", ",", "number", ",", "que", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "p", ".", "join", "(", "timeout", "=", "total_timeout", ")", "\n", "kill_child_processes", "(", "p", ".", "pid", ")", "\n", "p", ".", "terminate", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "mean_val", "=", "timeout", "*", "1e3", "\n", "if", "not", "que", ".", "empty", "(", ")", ":", "\n", "        ", "mean_val", "=", "que", ".", "get", "(", "block", "=", "True", ")", "\n", "", "return", "mean_val", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.measure._evaluate": [[99, 123], ["tvm.context", "flextensor.utils.to_tuple", "numpy.random.uniform().astype", "tvm.nd.array", "tvm_arys.append", "tvm.build", "tvm.build.time_evaluator", "q.put", "numpy.random.uniform", "func.time_evaluator."], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.to_tuple", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model_measure.ModelBuilder.build"], ["", "def", "_evaluate", "(", "s", ",", "bufs", ",", "target", ",", "dev_id", ",", "number", "=", "1", ",", "q", "=", "None", ")", ":", "\n", "    ", "ctx", "=", "tvm", ".", "context", "(", "target", ",", "dev_id", ")", "\n", "tvm_arys", "=", "[", "]", "\n", "for", "arg", "in", "bufs", ":", "\n", "        ", "shape", "=", "to_tuple", "(", "arg", ".", "shape", ")", "\n", "tmp", "=", "np", ".", "random", ".", "uniform", "(", "-", "10", ",", "10", ",", "size", "=", "shape", ")", ".", "astype", "(", "arg", ".", "dtype", ")", "\n", "tmp", "=", "tvm", ".", "nd", ".", "array", "(", "tmp", ",", "ctx", ")", "\n", "tvm_arys", ".", "append", "(", "tmp", ")", "\n", "", "func", ",", "evaluator", "=", "None", ",", "None", "\n", "try", ":", "\n", "        ", "func", "=", "tvm", ".", "build", "(", "s", ",", "bufs", ",", "target", ")", "\n", "evaluator", "=", "func", ".", "time_evaluator", "(", "func", ".", "entry_name", ",", "ctx", ",", "number", "=", "number", ")", "\n", "time_cost", "=", "evaluator", "(", "*", "tvm_arys", ")", ".", "mean", "*", "1e3", "\n", "if", "q", ":", "\n", "            ", "q", ".", "put", "(", "time_cost", ")", "\n", "", "return", "time_cost", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "for", "item", "in", "tvm_arys", ":", "\n", "            ", "del", "item", "\n", "", "if", "func", "is", "not", "None", ":", "\n", "            ", "del", "func", "\n", "", "if", "evaluator", "is", "not", "None", ":", "\n", "            ", "del", "evaluator", "\n", "", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.measure.__evaluate": [[125, 146], ["time.time", "range", "time.time", "tvm.context", "q.put", "flextensor.utils.to_tuple", "numpy.random.uniform().astype", "tvm.nd.array", "tvm_arys.append", "tvm.build", "tvm.build.", "print", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.to_tuple", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model_measure.ModelBuilder.build"], ["", "", "def", "__evaluate", "(", "s", ",", "bufs", ",", "target", ",", "dev_id", ",", "number", "=", "1", ",", "q", "=", "None", ")", ":", "\n", "    ", "beg", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "number", ")", ":", "\n", "        ", "ctx", "=", "tvm", ".", "context", "(", "target", ",", "dev_id", ")", "\n", "tvm_arys", "=", "[", "]", "\n", "for", "arg", "in", "bufs", ":", "\n", "            ", "shape", "=", "to_tuple", "(", "arg", ".", "shape", ")", "\n", "tmp", "=", "np", ".", "random", ".", "uniform", "(", "-", "10", ",", "10", ",", "size", "=", "shape", ")", ".", "astype", "(", "arg", ".", "dtype", ")", "\n", "tmp", "=", "tvm", ".", "nd", ".", "array", "(", "tmp", ",", "ctx", ")", "\n", "tvm_arys", ".", "append", "(", "tmp", ")", "\n", "", "try", ":", "\n", "            ", "func", "=", "tvm", ".", "build", "(", "s", ",", "bufs", ",", "target", ")", "\n", "func", "(", "*", "tvm_arys", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "# print(\"Oops\")", "\n", "            ", "print", "(", "e", ")", "\n", "", "", "end", "=", "time", ".", "time", "(", ")", "\n", "time_cost", "=", "(", "end", "-", "beg", ")", "*", "1e3", "/", "number", "\n", "if", "q", ":", "\n", "        ", "q", ".", "put", "(", "time_cost", ")", "\n", "", "return", "time_cost", "\n", "", ""]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model_measure.ModelBuilder.__init__": [[9, 11], ["tvm.autotvm.measure.measure.Builder.__init__"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.BenchmarkCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ModelBuilder", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model_measure.ModelBuilder.build": [[12, 24], ["task.instantiate", "tvm.lower", "build_results.append", "flextensor.utils.get_iter_info", "print", "build_results.append"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_gemm.GEMMGenerator.instantiate", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.get_iter_info"], ["", "def", "build", "(", "self", ",", "measure_inputs", ")", ":", "\n", "        ", "build_results", "=", "[", "]", "\n", "for", "target", ",", "task", ",", "config", "in", "measure_inputs", ":", "\n", "            ", "with", "target", ":", "\n", "                ", "try", ":", "\n", "                    ", "s", ",", "bufs", "=", "task", ".", "instantiate", "(", "config", ")", "\n", "tvm", ".", "lower", "(", "s", ",", "bufs", ")", "\n", "build_results", ".", "append", "(", "get_iter_info", "(", "s", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "print", "(", "e", ")", "\n", "build_results", ".", "append", "(", "None", ")", "\n", "", "", "", "return", "build_results", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model_measure.ModelRunner.__init__": [[27, 29], ["tvm.autotvm.measure.measure.Runner.__init__"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.BenchmarkCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ModelRunner", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model_measure.ModelRunner.get_build_kwargs": [[30, 32], ["None"], "methods", ["None"], ["", "def", "get_build_kwargs", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model_measure.ModelRunner.run": [[33, 45], ["flextensor.ppa_model.measure_latency", "results.append", "results.append", "tvm.autotvm.measure.measure.MeasureResult", "tvm.autotvm.measure.measure.MeasureResult", "time.time", "float", "time.time", "float"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "measure_inputs", ",", "build_results", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "for", "info", "in", "build_results", ":", "\n", "            ", "l", "=", "measure_latency", "(", "info", ")", "\n", "if", "l", "is", "None", ":", "\n", "                ", "results", ".", "append", "(", "MeasureResult", "(", "\n", "[", "'inf'", "]", ",", "MeasureErrorNo", ".", "RUNTIME_DEVICE", ",", "'inf'", ",", "time", ".", "time", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "results", ".", "append", "(", "MeasureResult", "(", "\n", "[", "float", "(", "l", ")", "]", ",", "MeasureErrorNo", ".", "NO_ERROR", ",", "float", "(", "l", ")", ",", "time", ".", "time", "(", ")", ")", ")", "\n", "\n", "", "", "return", "results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.train.train_perf": [[13, 17], ["flextensor.model.WalkerGroup", "flextensor.model.WalkerGroup.prepare_performance_data", "flextensor.model.WalkerGroup.train_on_perf"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.prepare_performance_data", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.train_on_perf"], ["def", "train_perf", "(", "name", ",", "space", ")", ":", "\n", "    ", "walker_group", "=", "WalkerGroup", "(", "name", ",", "space", ")", "\n", "walker_group", ".", "prepare_performance_data", "(", ")", "\n", "walker_group", ".", "train_on_perf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.train.train_q": [[19, 23], ["flextensor.model.WalkerGroup", "flextensor.model.WalkerGroup.load_walker_data", "flextensor.model.WalkerGroup.train_walkers"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.load_walker_data", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.train_walkers"], ["", "def", "train_q", "(", "name", ",", "space", ")", ":", "\n", "    ", "walker_group", "=", "WalkerGroup", "(", "name", ",", "space", ")", "\n", "walker_group", ".", "load_walker_data", "(", ")", "\n", "walker_group", ".", "train_walkers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.train.train_for_schedule": [[25, 59], ["func", "flextensor.scheduler.flatten_graph", "enumerate", "flextensor.space.generate_space_inter_op", "train.train_q", "train.train_perf", "flextensor.space.generate_space_intra_op", "str", "train.train_q", "train.train_perf", "flextensor.space.generate_space_intra_op", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.flatten_graph", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_space_inter_op", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.train.train_q", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.train.train_perf", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_space_intra_op", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.train.train_q", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.train.train_perf", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_space_intra_op"], ["", "def", "train_for_schedule", "(", "task_key", ",", "q", "=", "False", ",", "perf", "=", "False", ")", ":", "\n", "    ", "\"\"\"Schedule a task\n\n    perform sequential schedule\n    \"\"\"", "\n", "task", "=", "TASK_TABLE", "[", "task_key", "]", "\n", "func", "=", "task", ".", "func", "\n", "args", "=", "task", ".", "args", "\n", "ops", ",", "bufs", "=", "func", "(", "*", "args", ")", "\n", "# sort the ops, so that we can distinguish each op", "\n", "op_lst", ",", "down_graph", "=", "flatten_graph", "(", "ops", ")", "\n", "##################################################", "\n", "# train op", "\n", "for", "pos", ",", "op", "in", "enumerate", "(", "op_lst", ")", ":", "\n", "        ", "if", "task", ".", "target", "==", "\"cuda\"", ":", "\n", "            ", "space", "=", "generate_space_intra_op", "(", "op", ",", "down_graph", ",", "slevel", "=", "4", ")", "\n", "", "elif", "task", ".", "target", "==", "\"llvm\"", ":", "\n", "            ", "space", "=", "generate_space_intra_op", "(", "op", ",", "down_graph", ",", "slevel", "=", "4", ",", "rlevel", "=", "3", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Currently no support for target %s\"", "%", "task", ".", "target", ")", "\n", "", "name", "=", "task", ".", "category", "+", "\"_op\"", "+", "str", "(", "pos", ")", "\n", "if", "q", ":", "\n", "            ", "train_q", "(", "name", ",", "space", ")", "\n", "", "if", "perf", ":", "\n", "            ", "train_perf", "(", "name", ",", "space", ")", "\n", "\n", "#################################################", "\n", "# train graph", "\n", "", "", "graph_space", "=", "generate_space_inter_op", "(", "op_lst", ",", "down_graph", ")", "\n", "name", "=", "task", ".", "category", "+", "\"_graph\"", "\n", "if", "q", ":", "\n", "        ", "train_q", "(", "name", ",", "graph_space", ")", "\n", "", "if", "perf", ":", "\n", "        ", "train_perf", "(", "name", ",", "graph_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.train.print_perf_data_info": [[61, 73], ["open", "fin.readline", "tuple", "len", "print", "json.loads", "len", "print", "len"], "function", ["None"], ["", "", "def", "print_perf_data_info", "(", "data_path", ")", ":", "\n", "    ", "with", "open", "(", "data_path", ",", "\"r\"", ")", "as", "fin", ":", "\n", "        ", "can_out", "=", "False", "\n", "while", "not", "can_out", ":", "\n", "            ", "line", "=", "fin", ".", "readline", "(", ")", "\n", "if", "len", "(", "line", ")", "<=", "0", ":", "\n", "                ", "print", "(", "\"The data set has no valid data\"", ")", "\n", "can_out", "=", "True", "\n", "", "data", "=", "tuple", "(", "json", ".", "loads", "(", "line", ")", ")", "\n", "if", "len", "(", "data", "[", "0", "]", ")", ">", "0", ":", "\n", "                ", "print", "(", "\"Data input length:\"", ",", "len", "(", "data", "[", "0", "]", "[", "0", "]", ")", ")", "\n", "can_out", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.train.query_perf_data_info": [[75, 83], ["len", "RuntimeError", "len", "len", "RuntimeError"], "function", ["None"], ["", "", "", "", "def", "query_perf_data_info", "(", "dataset", ")", ":", "\n", "    ", "if", "len", "(", "dataset", ")", "<=", "0", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Dataset size <= 0\"", ")", "\n", "", "else", ":", "\n", "        ", "data", "=", "dataset", "[", "0", "]", "\n", "if", "len", "(", "data", "[", "0", "]", ")", "<=", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"In valid data\"", ")", "\n", "", "return", "len", "(", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.train.normalize_perf_data": [[85, 121], ["float", "max", "range", "len", "len", "new_data.append", "new_data.append", "data_lst.append", "float", "copy.deepcopy", "copy.deepcopy", "float"], "function", ["None"], ["", "", "def", "normalize_perf_data", "(", "dataset", ")", ":", "\n", "    ", "data_lst", "=", "[", "]", "\n", "# normalize", "\n", "max_val", "=", "0.0", "\n", "min_val", "=", "float", "(", "\"inf\"", ")", "\n", "for", "data", "in", "dataset", "[", ":", "]", ":", "\n", "        ", "for", "val", "in", "data", "[", "1", "]", ":", "\n", "            ", "if", "val", "!=", "float", "(", "\"inf\"", ")", ":", "\n", "                ", "if", "val", ">", "max_val", ":", "\n", "                    ", "max_val", "=", "val", "\n", "", "elif", "val", "<", "min_val", ":", "\n", "                    ", "min_val", "=", "val", "\n", "", "", "", "", "interval", "=", "max", "(", "max_val", "-", "min_val", ",", "1e-5", ")", "\n", "for", "data", "in", "dataset", "[", ":", "]", ":", "\n", "# filter empty data", "\n", "        ", "if", "len", "(", "data", "[", "0", "]", ")", "<=", "0", ":", "\n", "            ", "continue", "\n", "# max_val = 0.0", "\n", "# min_val = float(\"inf\")", "\n", "# for i in range(len(data[1])):", "\n", "#     if data[1][i] != float(\"inf\"):", "\n", "#         if data[1][i] > max_val:", "\n", "#             max_val = data[1][i]", "\n", "#         elif data[1][i] < min_val:", "\n", "#             min_val = data[1][i]", "\n", "# interval = max(max_val - min_val, 1e-5)", "\n", "", "for", "i", "in", "range", "(", "len", "(", "data", "[", "1", "]", ")", ")", ":", "\n", "            ", "new_data", "=", "[", "]", "\n", "new_data", ".", "append", "(", "copy", ".", "deepcopy", "(", "data", "[", "0", "]", "[", "i", "]", ")", ")", "\n", "new_data", ".", "append", "(", "copy", ".", "deepcopy", "(", "data", "[", "1", "]", "[", "i", "]", ")", ")", "\n", "if", "data", "[", "1", "]", "[", "i", "]", "==", "float", "(", "\"inf\"", ")", ":", "\n", "                ", "new_data", "[", "1", "]", "=", "1000.0", "\n", "# else:", "\n", "#     new_data[1] = (data[1][i] - min_val) / interval", "\n", "", "data_lst", ".", "append", "(", "new_data", ")", "\n", "", "", "return", "data_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.train.train_performance_model": [[123, 296], ["train.normalize_perf_data", "len", "int", "print", "numpy.random.shuffle", "train.query_perf_data_info", "print", "flextensor.model.PerformanceModel", "torch.device", "flextensor.model.PerformanceModel.to", "torch.optim.Adadelta", "print", "range", "print", "print", "numpy.random.shuffle", "print", "flextensor.model.PerformanceModel.eval", "enumerate", "print", "print", "print", "open", "flextensor.model.PerformanceModel.parameters", "flextensor.model.PerformanceModel.train", "print", "numpy.random.shuffle", "print", "enumerate", "print", "torch.save", "print", "inputs.append", "targets.append", "tuple", "normalize_perf_data.append", "inputs.append", "targets.append", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "flextensor.model.PerformanceModel.reshape", "torch.nn.functional.mse_loss", "torch.optim.Adadelta.zero_grad", "torch.nn.functional.mse_loss.backward", "torch.optim.Adadelta.step", "flextensor.model.PerformanceModel.state_dict", "print", "numpy.random.shuffle", "print", "flextensor.model.PerformanceModel.eval", "enumerate", "print", "print", "torch.FloatTensor().cuda", "flextensor.model.PerformanceModel.", "list", "list", "sorted", "sorted", "zip", "json.loads", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "flextensor.model.PerformanceModel.reshape", "torch.nn.functional.mse_loss", "torch.optim.Adadelta.zero_grad", "torch.nn.functional.mse_loss.backward", "torch.optim.Adadelta.step", "float", "inputs.append", "targets.append", "enumerate", "enumerate", "float", "float", "float", "torch.FloatTensor", "torch.FloatTensor", "flextensor.model.PerformanceModel.", "torch.FloatTensor().cuda", "flextensor.model.PerformanceModel.", "list", "list", "sorted", "sorted", "zip", "torch.FloatTensor", "model.cpu().tolist", "torch.FloatTensor", "torch.FloatTensor", "flextensor.model.PerformanceModel.", "enumerate", "enumerate", "float", "float", "abs", "torch.FloatTensor", "model.cpu().tolist", "model.cpu", "abs", "model.cpu"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.train.normalize_perf_data", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.train.query_perf_data_info", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.train"], ["", "def", "train_performance_model", "(", "data_path", ",", "model_path", ",", "epoch", "=", "10", ",", "batch_size", "=", "1", ",", "lr", "=", "0.02", ",", "override", "=", "False", ",", "train_ratio", "=", "0.8", ")", ":", "\n", "# load data", "\n", "    ", "dataset", "=", "[", "]", "\n", "with", "open", "(", "data_path", ",", "\"r\"", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "data", "=", "tuple", "(", "json", ".", "loads", "(", "line", ")", ")", "\n", "dataset", ".", "append", "(", "data", ")", "\n", "# prepare dataset", "\n", "", "", "dataset", "=", "normalize_perf_data", "(", "dataset", ")", "\n", "data_size", "=", "len", "(", "dataset", ")", "\n", "train_size", "=", "int", "(", "0.8", "*", "data_size", ")", "\n", "test_size", "=", "data_size", "-", "train_size", "\n", "print", "(", "\"Train data size:\"", ",", "train_size", ",", "\"test data size:\"", ",", "test_size", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "dataset", ")", "\n", "train_data", "=", "dataset", "[", ":", "train_size", "]", "\n", "test_data", "=", "dataset", "[", "train_size", ":", "]", "\n", "\n", "# get input length", "\n", "input_len", "=", "query_perf_data_info", "(", "dataset", ")", "\n", "print", "(", "\"Input length is:\"", ",", "input_len", ")", "\n", "\n", "# load model", "\n", "model", "=", "PerformanceModel", "(", "input_len", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "# if os.path.exists(model_path) and not override and epoch > 0:", "\n", "#     raise RuntimeError(\"Existing model file %s\" % model_path)", "\n", "# elif os.path.exists(model_path):", "\n", "#     print(\"Warning: override existing model file %s\" % model_path)", "\n", "\n", "# train", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adadelta", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "print", "(", "\"Training begins...\"", ")", "\n", "for", "ep", "in", "range", "(", "epoch", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "print", "(", "\"Epoch\"", ",", "ep", "+", "1", ",", "\"begins:\"", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_data", ")", "\n", "print", "(", "\"Train data shuffled\"", ")", "\n", "count_batch", "=", "0", "\n", "acc_loss", "=", "0.0", "\n", "inputs", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "for", "count", ",", "data", "in", "enumerate", "(", "train_data", ")", ":", "\n", "            ", "x", ",", "t", "=", "data", "\n", "inputs", ".", "append", "(", "x", ")", "\n", "targets", ".", "append", "(", "t", ")", "\n", "if", "(", "count", "+", "1", ")", "%", "batch_size", "==", "0", ":", "\n", "                ", "count_batch", "+=", "1", "\n", "inputs_torch", "=", "torch", ".", "FloatTensor", "(", "inputs", ")", ".", "cuda", "(", ")", "\n", "# targets_torch = torch.softmax(torch.FloatTensor(targets).cuda(), dim=-1)", "\n", "# ys = torch.softmax(model(inputs_torch).reshape(-1), dim=-1)", "\n", "targets_torch", "=", "torch", ".", "FloatTensor", "(", "targets", ")", ".", "cuda", "(", ")", "\n", "ys", "=", "model", "(", "inputs_torch", ")", ".", "reshape", "(", "-", "1", ")", "\n", "# print(\"check ys=\", ys.cpu().tolist())", "\n", "# print(\"check targets=\", targets_torch.cpu().tolist())", "\n", "# print(\"check diff=\", (ys -targets_torch).cpu().tolist())", "\n", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "ys", ",", "targets_torch", ")", "\n", "# loss = rank_loss(ys, targets_torch)", "\n", "# loss = torch.nn.functional.binary_cross_entropy(ys, targets_torch)", "\n", "acc_loss", "=", "acc_loss", "+", "float", "(", "loss", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# for p in model.parameters():", "\n", "#     print(\"before\", p.grad)", "\n", "loss", ".", "backward", "(", ")", "\n", "# for p in model.parameters():", "\n", "#     print(\"after\", p.grad)", "\n", "optimizer", ".", "step", "(", ")", "\n", "# print(\"####| batch %d loss = %f\" % (count_batch, float(loss)))", "\n", "# clear inputs and targets", "\n", "inputs", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "", "", "if", "inputs", "and", "targets", ":", "\n", "# the remaining loss", "\n", "            ", "count_batch", "+=", "1", "\n", "inputs_torch", "=", "torch", ".", "FloatTensor", "(", "inputs", ")", ".", "cuda", "(", ")", "\n", "# targets_torch = torch.softmax(torch.FloatTensor(targets).cuda(), dim=-1)", "\n", "# ys = torch.softmax(model(inputs_torch).reshape(-1), dim=-1)", "\n", "targets_torch", "=", "torch", ".", "FloatTensor", "(", "targets", ")", ".", "cuda", "(", ")", "\n", "ys", "=", "model", "(", "inputs_torch", ")", ".", "reshape", "(", "-", "1", ")", "\n", "# print(\"check ys=\", ys.cpu().tolist())", "\n", "# print(\"check targets=\", targets_torch.cpu().tolist())", "\n", "# print(\"check diff=\", (ys -targets_torch).cpu().tolist())", "\n", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "ys", ",", "targets_torch", ")", "\n", "# loss = rank_loss(ys, targets_torch)", "\n", "# loss = torch.nn.functional.binary_cross_entropy(ys, targets_torch)", "\n", "acc_loss", "=", "acc_loss", "+", "float", "(", "loss", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "# print(\"####| the last batch %d loss = %f\" % (count_batch, float(loss)))", "\n", "", "print", "(", "\"Accumulated loss of the whole epoch:\"", ",", "acc_loss", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_path", ")", "\n", "print", "(", "\"Model saved\"", ")", "\n", "if", "(", "ep", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "# validation", "\n", "            ", "print", "(", "\"Validation:\"", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "test_data", ")", "\n", "print", "(", "\"Validation data shuffled\"", ")", "\n", "model", ".", "eval", "(", ")", "\n", "hits", "=", "0", "\n", "soft_hits", "=", "0", "\n", "inputs", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "count_batch", "=", "0", "\n", "for", "count", ",", "data", "in", "enumerate", "(", "test_data", ")", ":", "\n", "                ", "x", ",", "t", "=", "data", "\n", "inputs", ".", "append", "(", "x", ")", "\n", "targets", ".", "append", "(", "t", ")", "\n", "if", "(", "count", "+", "1", ")", "%", "2", "==", "0", ":", "\n", "                    ", "count_batch", "+=", "1", "\n", "inputs_torch", "=", "torch", ".", "FloatTensor", "(", "inputs", ")", ".", "cuda", "(", ")", "\n", "ys", "=", "model", "(", "inputs_torch", ")", "\n", "ys_lst", "=", "list", "(", "enumerate", "(", "ys", ".", "cpu", "(", ")", ".", "tolist", "(", ")", ")", ")", "\n", "targets_lst", "=", "list", "(", "enumerate", "(", "targets", ")", ")", "\n", "ys_sorted", "=", "sorted", "(", "ys_lst", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "targets_sorted", "=", "sorted", "(", "targets_lst", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "full_hit", "=", "True", "\n", "soft_hit", "=", "True", "\n", "# print(ys_sorted, targets_sorted)", "\n", "for", "y_item", ",", "t_item", "in", "zip", "(", "ys_sorted", ",", "targets_sorted", ")", ":", "\n", "                        ", "if", "y_item", "[", "0", "]", "!=", "t_item", "[", "0", "]", ":", "\n", "                            ", "full_hit", "=", "False", "\n", "", "elif", "abs", "(", "y_item", "[", "0", "]", "-", "t_item", "[", "0", "]", ")", ">", "1", ":", "\n", "                            ", "soft_hit", "=", "False", "\n", "", "", "if", "full_hit", ":", "\n", "                        ", "hits", "+=", "1", "\n", "", "if", "soft_hit", ":", "\n", "                        ", "soft_hits", "+=", "1", "\n", "", "inputs", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "\n", "", "", "print", "(", "\"Validation full accuracy:\"", ",", "float", "(", "hits", ")", "/", "count_batch", "*", "100", ",", "\"%\"", ")", "\n", "print", "(", "\"Validation soft accuracy:\"", ",", "float", "(", "soft_hits", ")", "/", "count_batch", "*", "100", ",", "\"%\"", ")", "\n", "", "", "print", "(", "\"Train done!\"", ")", "\n", "# test", "\n", "print", "(", "\"Testing begins...\"", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "test_data", ")", "\n", "print", "(", "\"Test data shuffled\"", ")", "\n", "model", ".", "eval", "(", ")", "\n", "hits", "=", "0", "\n", "soft_hits", "=", "0", "\n", "inputs", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "count_batch", "=", "0", "\n", "for", "count", ",", "data", "in", "enumerate", "(", "test_data", ")", ":", "\n", "        ", "x", ",", "t", "=", "data", "\n", "inputs", ".", "append", "(", "x", ")", "\n", "targets", ".", "append", "(", "t", ")", "\n", "if", "(", "count", "+", "1", ")", "%", "2", "==", "0", ":", "\n", "            ", "count_batch", "+=", "1", "\n", "inputs_torch", "=", "torch", ".", "FloatTensor", "(", "inputs", ")", ".", "cuda", "(", ")", "\n", "ys", "=", "model", "(", "inputs_torch", ")", "\n", "ys_lst", "=", "list", "(", "enumerate", "(", "ys", ".", "cpu", "(", ")", ".", "tolist", "(", ")", ")", ")", "\n", "targets_lst", "=", "list", "(", "enumerate", "(", "targets", ")", ")", "\n", "ys_sorted", "=", "sorted", "(", "ys_lst", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "targets_sorted", "=", "sorted", "(", "targets_lst", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "full_hit", "=", "True", "\n", "soft_hit", "=", "True", "\n", "for", "y_item", ",", "t_item", "in", "zip", "(", "ys_sorted", ",", "targets_sorted", ")", ":", "\n", "                ", "if", "y_item", "[", "0", "]", "!=", "t_item", "[", "0", "]", ":", "\n", "                    ", "full_hit", "=", "False", "\n", "", "elif", "abs", "(", "y_item", "[", "0", "]", "-", "t_item", "[", "0", "]", ")", ">", "1", ":", "\n", "                    ", "soft_hit", "=", "False", "\n", "", "", "if", "full_hit", ":", "\n", "                ", "hits", "+=", "1", "\n", "", "if", "soft_hit", ":", "\n", "                ", "soft_hits", "+=", "1", "\n", "", "inputs", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "\n", "", "", "print", "(", "\"Test full accuracy:\"", ",", "float", "(", "hits", ")", "/", "count_batch", "*", "100", ",", "\"%\"", ")", "\n", "print", "(", "\"Test soft accuracy:\"", ",", "float", "(", "soft_hits", ")", "/", "count_batch", "*", "100", ",", "\"%\"", ")", "\n", "print", "(", "\"Test done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Scheduler.__init__": [[264, 281], ["max", "WalkerGroup"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "task_key", ",", "space", ",", "parallel", "=", "2", ",", "timeout", "=", "4.0", ",", "trial", "=", "100", ",", "number", "=", "1", ",", "early_stop", "=", "30", ",", "\n", "rpc_info", "=", "None", ",", "rewrite", "=", "False", ",", "re_evalutate_number", "=", "10", ",", "warm_up_epoch", "=", "20", ",", "warm_up_number", "=", "20", ")", ":", "\n", "        ", "self", ".", "task_key", "=", "task_key", "\n", "self", ".", "space", "=", "space", "\n", "self", ".", "parallel", "=", "max", "(", "parallel", ",", "1", ")", "# at least 1", "\n", "self", ".", "timeout", "=", "timeout", "\n", "self", ".", "trial", "=", "trial", "\n", "self", ".", "number", "=", "number", "\n", "self", ".", "early_stop", "=", "early_stop", "\n", "self", ".", "task", "=", "TASK_TABLE", "[", "self", ".", "task_key", "]", "\n", "self", ".", "walker_group", "=", "WalkerGroup", "(", "self", ".", "task", ".", "category", "+", "\"_\"", "+", "name", ",", "self", ".", "space", ")", "\n", "self", ".", "rpc_info", "=", "rpc_info", "\n", "self", ".", "rewrite", "=", "rewrite", "\n", "\n", "self", ".", "re_evalutate_number", "=", "re_evalutate_number", "\n", "self", ".", "warm_up_epoch", "=", "warm_up_epoch", "\n", "self", ".", "warm_up_number", "=", "warm_up_number", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Scheduler._warm_up": [[282, 337], ["range", "scheduler.Scheduler.walker_group.forward", "range", "range", "scheduler.Scheduler.walker_group.top1", "min", "scheduler.Scheduler.walker_group.query_performance", "scheduler.Scheduler.parallel_evaluate", "scheduler.Scheduler.walker_group.add_perf_data", "print", "range", "range", "float", "scheduler.Scheduler.walker_group.record", "config[].append"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.forward", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.query_performance", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.GraphScheduler.parallel_evaluate", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.add_perf_data", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.record"], ["", "def", "_warm_up", "(", "self", ",", "warm_up_epoches", ",", "warm_up_trials", ",", "configs", ",", "type_keys", ",", "max_repeat", "=", "20", ",", "use_model", "=", "False", ")", ":", "\n", "# perform warmup", "\n", "        ", "warm_up_enough", "=", "False", "\n", "count_repeat", "=", "0", "\n", "old_timeout", "=", "self", ".", "timeout", "\n", "while", "not", "warm_up_enough", ":", "\n", "            ", "for", "ep", "in", "range", "(", "warm_up_epoches", ")", ":", "\n", "                ", "warm_up_ret", "=", "self", ".", "walker_group", ".", "forward", "(", "warm_up_trials", ",", "policy", "=", "\"random\"", ")", "\n", "warm_up_configs", "=", "[", "{", "}", "for", "i", "in", "range", "(", "warm_up_trials", ")", "]", "# empty configs", "\n", "warm_up_indices", "=", "[", "{", "}", "for", "i", "in", "range", "(", "warm_up_trials", ")", "]", "# the indices", "\n", "for", "count", "in", "range", "(", "warm_up_trials", ")", ":", "\n", "                    ", "config", "=", "warm_up_configs", "[", "count", "]", "\n", "for", "type_key", "in", "type_keys", ":", "\n", "                        ", "config", "[", "type_key", "]", "=", "[", "]", "\n", "for", "name", "in", "self", ".", "space", ".", "types", "[", "type_key", "]", ":", "\n", "                            ", "entity", "=", "warm_up_ret", "[", "name", "]", "[", "0", "]", "[", "count", "]", "\n", "warm_up_indices", "[", "count", "]", "[", "name", "]", "=", "warm_up_ret", "[", "name", "]", "[", "1", "]", "[", "count", "]", "\n", "config", "[", "type_key", "]", ".", "append", "(", "entity", ")", "\n", "# hack here", "\n", "# if self.op_pos == 1:", "\n", "#     warm_up_configs[count] = {", "\n", "#         \"spatial\": [[1, 1, 1, 1], [64, 2, 8, 1], [1, 1, 7, 1], [1, 1, 7, 1]],", "\n", "#         \"reduce\": [[64, 1, 16], [1, 3, 1], [1, 1, 3]],", "\n", "#         \"unroll\": [[1500, 1]]", "\n", "#     }", "\n", "# hack here", "\n", "# warm_up_configs[count] = {\"inline\": [[False, False]]}", "\n", "# print(warm_up_configs)", "\n", "", "", "", "if", "use_model", ":", "\n", "                    ", "warm_up_results", "=", "self", ".", "walker_group", ".", "query_performance", "(", "warm_up_indices", ")", "\n", "", "else", ":", "\n", "                    ", "warm_up_results", "=", "self", ".", "parallel_evaluate", "(", "configs", ",", "warm_up_configs", ",", "number", "=", "self", ".", "number", ")", "\n", "# the results are really measured", "\n", "self", ".", "walker_group", ".", "add_perf_data", "(", "warm_up_indices", ",", "warm_up_results", ")", "\n", "", "string", "=", "\"[ \"", "\n", "for", "res", "in", "warm_up_results", ":", "\n", "                    ", "string", "+=", "\"%.6f \"", "%", "res", "\n", "", "string", "+=", "\"]\"", "\n", "# print(\"warm up [%.6f] %s\" % (time.time(), string))", "\n", "for", "count", "in", "range", "(", "warm_up_trials", ")", ":", "\n", "                    ", "if", "warm_up_results", "[", "count", "]", "<", "float", "(", "\"inf\"", ")", ":", "\n", "                        ", "self", ".", "walker_group", ".", "record", "(", "warm_up_indices", "[", "count", "]", ",", "warm_up_results", "[", "count", "]", ")", "\n", "# if not found valid config", "\n", "", "", "", "if", "not", "self", ".", "walker_group", ".", "top1", "(", ")", ":", "\n", "# print(\"Warning: No valid schedule found in warm up process, please use more trials\")", "\n", "#qprint(\"Now automatically use more trials, increase %d\" % warm_up_trials)", "\n", "                ", "warm_up_epoches", "=", "1", "\n", "count_repeat", "+=", "1", "\n", "self", ".", "timeout", "=", "min", "(", "2", "*", "self", ".", "timeout", ",", "40", ")", "\n", "if", "count_repeat", ">=", "max_repeat", ":", "\n", "                    ", "print", "(", "\"Fail to find valid schedule, too many errors\"", ")", "\n", "warm_up_enough", "=", "True", "\n", "", "", "else", ":", "\n", "                ", "warm_up_enough", "=", "True", "\n", "", "", "self", ".", "timeout", "=", "old_timeout", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Scheduler._random_schedule": [[338, 348], ["range", "scheduler.Scheduler.walker_group.to_config", "scheduler.Scheduler.walker_group.load_or_create_model", "scheduler.Scheduler._warm_up", "scheduler.Scheduler.walker_group.top1"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.to_config", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.load_or_create_model", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Scheduler._warm_up", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1"], ["", "def", "_random_schedule", "(", "self", ",", "configs", ",", "type_keys", ",", "use_model", "=", "False", ")", ":", "\n", "# prepare model", "\n", "        ", "if", "use_model", ":", "\n", "            ", "self", ".", "walker_group", ".", "load_or_create_model", "(", ")", "\n", "# random by warm-up", "\n", "", "for", "trial", "in", "range", "(", "self", ".", "trial", ")", ":", "\n", "            ", "warm_up_epoches", "=", "1", "\n", "warm_up_trials", "=", "self", ".", "parallel", "\n", "self", ".", "_warm_up", "(", "warm_up_epoches", ",", "warm_up_trials", ",", "configs", ",", "type_keys", ",", "use_model", "=", "use_model", ")", "\n", "", "return", "self", ".", "walker_group", ".", "to_config", "(", "self", ".", "walker_group", ".", "top1", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Scheduler._searching_schedule": [[349, 491], ["scheduler.Scheduler._warm_up", "math.ceil", "scheduler.Scheduler.walker_group.top1_value", "range", "scheduler.Scheduler.walker_group.to_config", "scheduler.Scheduler.walker_group.load_or_create_model", "float", "scheduler.Scheduler.walker_group.top_random", "scheduler.Scheduler.walker_group.full_walk", "zip", "scheduler.Scheduler._warm_up", "scheduler.Scheduler.walker_group.top1_value", "scheduler.Scheduler.walker_group.top1", "scheduler.Scheduler.walker_group.top1_value", "scheduler.Scheduler._warm_up", "scheduler.Scheduler.walker_group.to_config", "len", "scheduler.Scheduler.walker_group.query_performance", "scheduler.Scheduler.parallel_evaluate", "scheduler.Scheduler.walker_group.add_perf_data", "numpy.tanh", "scheduler.Scheduler.walker_group.add_data", "scheduler.Scheduler.walker_group.record", "scheduler.Scheduler.walker_group.pop_top", "scheduler.Scheduler.walker_group.top1_value", "scheduler.Scheduler.walker_group.top1_value", "scheduler.Scheduler.walker_group.top1", "math.fabs", "scheduler.Scheduler.walker_group.clear_data", "scheduler.Scheduler.walker_group.has_more", "max", "scheduler.Scheduler.walker_group.top1_value", "retired_indices.append", "float", "scheduler.Scheduler.walker_group.topk", "scheduler.Scheduler.parallel_evaluate", "scheduler.Scheduler.walker_group.add_perf_data", "zip", "float", "retired_indices.append", "float", "scheduler.Scheduler.walker_group.record", "scheduler.Scheduler.walker_group.record", "scheduler.Scheduler.walker_group.to_config", "float", "scheduler.Scheduler.walker_group.record"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Scheduler._warm_up", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1_value", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.to_config", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.load_or_create_model", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top_random", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.full_walk", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Scheduler._warm_up", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1_value", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1_value", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Scheduler._warm_up", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.to_config", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.query_performance", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.GraphScheduler.parallel_evaluate", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.add_perf_data", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.add_data", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.record", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.pop_top", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1_value", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1_value", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.clear_data", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.has_more", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1_value", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.topk", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.GraphScheduler.parallel_evaluate", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.add_perf_data", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.record", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.record", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.to_config", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.record"], ["", "def", "_searching_schedule", "(", "self", ",", "configs", ",", "type_keys", ",", "use_model", "=", "False", ",", "early_stop", "=", "15", ")", ":", "\n", "# prepare model", "\n", "        ", "if", "use_model", ":", "\n", "            ", "self", ".", "walker_group", ".", "load_or_create_model", "(", ")", "\n", "# warm up", "\n", "", "warm_up_epoches", "=", "self", ".", "warm_up_number", "\n", "warm_up_trials", "=", "self", ".", "warm_up_number", "\n", "self", ".", "_warm_up", "(", "warm_up_epoches", ",", "warm_up_trials", ",", "configs", ",", "type_keys", ",", "use_model", "=", "use_model", ")", "\n", "\n", "# tune", "\n", "minimal", "=", "[", "{", "}", ",", "float", "(", "\"inf\"", ")", "]", "# the minimal point found before", "\n", "retired_indices", "=", "[", "]", "# list of local minimals", "\n", "\n", "part", "=", "math", ".", "ceil", "(", "self", ".", "trial", "/", "20", ")", "\n", "value_early_stop", "=", "self", ".", "walker_group", ".", "top1_value", "(", ")", "\n", "early_stop_count", "=", "0", "\n", "count_incessant_empty_trial", "=", "0", "\n", "for", "trial", "in", "range", "(", "self", ".", "trial", ")", ":", "\n", "            ", "if", "(", "not", "self", ".", "walker_group", ".", "has_more", "(", ")", ")", "and", "trial", "<", "early_stop", ":", "\n", "# nothing to tune, re-warm up", "\n", "                ", "warm_up_epoches", "=", "1", "\n", "warm_up_trials", "=", "self", ".", "parallel", "\n", "self", ".", "_warm_up", "(", "warm_up_epoches", ",", "warm_up_trials", ",", "configs", ",", "type_keys", ",", "use_model", "=", "use_model", ")", "\n", "continue", "\n", "", "elif", "trial", ">=", "early_stop", ":", "\n", "                ", "break", "\n", "\n", "", "from_indices", ",", "from_value", "=", "self", ".", "walker_group", ".", "top_random", "(", "with_value", "=", "True", ")", "\n", "# # print(\"check from\", from_indices)", "\n", "# get all directions", "\n", "next_indices_lst", ",", "action_lst", "=", "self", ".", "walker_group", ".", "full_walk", "(", "from_indices", ",", "no_repeat", "=", "True", ")", "\n", "# # print(\"check action\", action_lst)", "\n", "next_configs", "=", "[", "self", ".", "walker_group", ".", "to_config", "(", "indices", ")", "for", "indices", "in", "next_indices_lst", "]", "\n", "# if empty", "\n", "if", "len", "(", "next_configs", ")", "<", "1", ":", "\n", "                ", "count_incessant_empty_trial", "+=", "1", "\n", "", "else", ":", "\n", "                ", "count_incessant_empty_trial", "=", "0", "\n", "", "if", "use_model", ":", "\n", "                ", "results", "=", "self", ".", "walker_group", ".", "query_performance", "(", "next_indices_lst", ")", "\n", "", "else", ":", "\n", "                ", "results", "=", "self", ".", "parallel_evaluate", "(", "configs", ",", "next_configs", ",", "number", "=", "self", ".", "number", ")", "\n", "# the results are really measured", "\n", "self", ".", "walker_group", ".", "add_perf_data", "(", "next_indices_lst", ",", "results", ")", "\n", "", "string", "=", "\"[ \"", "\n", "for", "res", "in", "results", ":", "\n", "                ", "string", "+=", "\"%.6f \"", "%", "res", "\n", "", "string", "+=", "\"]\"", "\n", "#qprint(\"tune [%.6f] %s\" % (time.time(), string))", "\n", "rewards", "=", "[", "np", ".", "tanh", "(", "max", "(", "from_value", "-", "result", ",", "0.0", ")", ")", "for", "result", "in", "results", "]", "\n", "\n", "is_local_minimal", "=", "True", "\n", "for", "indices", ",", "action", ",", "reward", ",", "result", "in", "zip", "(", "next_indices_lst", ",", "action_lst", ",", "rewards", ",", "results", ")", ":", "\n", "                ", "self", ".", "walker_group", ".", "add_data", "(", "\n", "action", "[", "0", "]", ",", "# name", "\n", "from_indices", ",", "# pre_state", "\n", "action", "[", "1", "]", ",", "# action", "\n", "indices", ",", "# post_state", "\n", "reward", "# reward", "\n", ")", "\n", "self", ".", "walker_group", ".", "record", "(", "indices", ",", "result", ",", "random_reject", "=", "True", ")", "\n", "if", "result", "<", "self", ".", "walker_group", ".", "top1_value", "(", ")", ":", "\n", "                    ", "is_local_minimal", "=", "False", "\n", "# for local minimal value, remove OR no more exploration, remove", "\n", "", "", "if", "is_local_minimal", "or", "count_incessant_empty_trial", ">", "0", ":", "\n", "                ", "top", "=", "self", ".", "walker_group", ".", "pop_top", "(", ")", "\n", "if", "top", ".", "value", "<", "minimal", "[", "1", "]", ":", "\n", "                    ", "if", "minimal", "[", "1", "]", "<", "float", "(", "\"inf\"", ")", ":", "\n", "                        ", "retired_indices", ".", "append", "(", "minimal", ")", "\n", "", "minimal", "[", "1", "]", "=", "top", ".", "value", "\n", "minimal", "[", "0", "]", "=", "top", ".", "indices", "\n", "", "else", ":", "\n", "                    ", "retired_indices", ".", "append", "(", "[", "top", ".", "indices", ",", "top", ".", "value", "]", ")", "\n", "# report best", "\n", "", "", "if", "self", ".", "walker_group", ".", "top1_value", "(", ")", "<", "minimal", "[", "1", "]", ":", "\n", "                ", "cur_best_value", "=", "self", ".", "walker_group", ".", "top1_value", "(", ")", "\n", "cur_best", "=", "self", ".", "walker_group", ".", "top1", "(", ")", "\n", "", "else", ":", "\n", "                ", "cur_best_value", "=", "minimal", "[", "1", "]", "\n", "cur_best", "=", "minimal", "[", "0", "]", "\n", "#qprint(\"No. %d | [%.6f] The best currently %.6f\" % (trial, time.time(), cur_best_value), cur_best)", "\n", "# early stop becasue of lasting empty trials", "\n", "", "if", "count_incessant_empty_trial", ">=", "self", ".", "early_stop", ":", "\n", "#qprint(\"Early stop after continuous no trials %d times\" % (count_incessant_empty_trial))", "\n", "                ", "break", "\n", "# early stop because of repeating value", "\n", "", "if", "math", ".", "fabs", "(", "cur_best_value", "-", "value_early_stop", ")", "<", "0.02", ":", "\n", "                ", "early_stop_count", "+=", "1", "\n", "", "else", ":", "\n", "                ", "value_early_stop", "=", "cur_best_value", "\n", "early_stop_count", "=", "0", "\n", "", "if", "early_stop_count", ">=", "self", ".", "early_stop", ":", "\n", "#qprint(\"Early stop with value %f repeats %d times\" % (value_early_stop, early_stop_count))", "\n", "                ", "break", "\n", "# train and re-evaluate", "\n", "", "if", "(", "trial", "+", "1", ")", "%", "part", "==", "0", ":", "\n", "                ", "if", "not", "use_model", ":", "\n", "# re-evaluate", "\n", "                    ", "if", "minimal", "[", "1", "]", "<", "float", "(", "\"inf\"", ")", ":", "\n", "                        ", "self", ".", "walker_group", ".", "record", "(", "minimal", "[", "0", "]", ",", "minimal", "[", "1", "]", ",", "random_reject", "=", "False", ")", "\n", "", "for", "retired", "in", "retired_indices", ":", "\n", "                        ", "self", ".", "walker_group", ".", "record", "(", "retired", "[", "0", "]", ",", "retired", "[", "1", "]", ",", "random_reject", "=", "False", ")", "\n", "", "minimal", "[", "0", "]", "=", "{", "}", "\n", "minimal", "[", "1", "]", "=", "float", "(", "\"inf\"", ")", "\n", "\n", "indices_lst", "=", "self", ".", "walker_group", ".", "topk", "(", "self", ".", "re_evalutate_number", ",", "modify", "=", "True", ")", "\n", "next_configs", "=", "[", "self", ".", "walker_group", ".", "to_config", "(", "indices", ")", "for", "indices", "in", "indices_lst", "]", "\n", "# use serialized evaluation", "\n", "old_parallel", "=", "self", ".", "parallel", "\n", "if", "self", ".", "task", ".", "target", "==", "\"cuda\"", ":", "\n", "                        ", "self", ".", "parallel", "=", "1", "\n", "", "else", ":", "\n", "                        ", "self", ".", "parallel", "=", "1", "# min(self.parallel, os.cpu_count())", "\n", "", "results", "=", "self", ".", "parallel_evaluate", "(", "configs", ",", "next_configs", ",", "number", "=", "self", ".", "number", ")", "\n", "# recover parallel number", "\n", "self", ".", "parallel", "=", "old_parallel", "\n", "self", ".", "walker_group", ".", "add_perf_data", "(", "indices_lst", ",", "results", ")", "\n", "string", "=", "\"[ \"", "\n", "for", "res", "in", "results", ":", "\n", "                        ", "string", "+=", "\"%.6f \"", "%", "res", "\n", "", "string", "+=", "\"]\"", "\n", "#qprint(\"re-evaluate [%.6f] %s\" % (time.time(), string))", "\n", "for", "indices", ",", "result", "in", "zip", "(", "indices_lst", ",", "results", ")", ":", "\n", "                        ", "if", "result", "<", "float", "(", "\"inf\"", ")", ":", "\n", "# if inf, maybe this measure is wrong", "\n", "                            ", "self", ".", "walker_group", ".", "record", "(", "indices", ",", "result", ",", "random_reject", "=", "False", ")", "\n", "# dump data", "\n", "# self.walker_group.dump_data()", "\n", "", "", "", "self", ".", "walker_group", ".", "clear_data", "(", ")", "\n", "# re-warm up", "\n", "", "warm_up_epoches", "=", "1", "\n", "warm_up_trials", "=", "self", ".", "parallel", "\n", "self", ".", "_warm_up", "(", "warm_up_epoches", ",", "warm_up_trials", ",", "configs", ",", "type_keys", ",", "use_model", "=", "use_model", ")", "\n", "# the best", "\n", "", "if", "self", ".", "walker_group", ".", "top1_value", "(", ")", "<", "minimal", "[", "1", "]", ":", "\n", "            ", "best", "=", "self", ".", "walker_group", ".", "top1", "(", ")", "\n", "best_value", "=", "self", ".", "walker_group", ".", "top1_value", "(", ")", "\n", "", "else", ":", "\n", "            ", "best", "=", "minimal", "[", "0", "]", "\n", "best_value", "=", "minimal", "[", "1", "]", "\n", "# print(\"[%.6f] The best latency is %.6f\" % (time.time(), best_value))", "\n", "", "return", "self", ".", "walker_group", ".", "to_config", "(", "best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Scheduler._q_schedule": [[492, 585], ["scheduler.Scheduler.walker_group.load_walker_model", "scheduler.Scheduler._warm_up", "scheduler.Scheduler.walker_group.top1", "scheduler.Scheduler.walker_group.top1_value", "scheduler.Scheduler.walker_group.topk", "math.ceil", "range", "scheduler.Scheduler.walker_group.clear_data", "scheduler.Scheduler.walker_group.to_config", "scheduler.Scheduler.walker_group.load_or_create_model", "scheduler.Scheduler.walker_group.walk", "zip", "print", "retired_indices.extend", "scheduler.Scheduler.walker_group.topk", "scheduler.Scheduler.walker_group.query_performance", "scheduler.Scheduler.parallel_evaluate", "scheduler.Scheduler.walker_group.add_perf_data", "numpy.tanh", "scheduler.Scheduler.walker_group.add_data", "scheduler.Scheduler.walker_group.record", "scheduler.Scheduler.walker_group.top1_value", "scheduler.Scheduler.walker_group.top1_value", "scheduler.Scheduler.walker_group.top1", "math.fabs", "scheduler.Scheduler.walker_group.has_more", "scheduler.Scheduler.walker_group.train_walkers", "scheduler.Scheduler._warm_up", "scheduler.Scheduler.walker_group.to_config", "max", "scheduler.Scheduler.walker_group.topk", "scheduler.Scheduler.parallel_evaluate", "scheduler.Scheduler.walker_group.add_perf_data", "zip", "scheduler.Scheduler.walker_group.top1_value", "scheduler.Scheduler.walker_group.top1_value", "scheduler.Scheduler.walker_group.top1", "time.time", "float", "scheduler.Scheduler.walker_group.record", "float", "scheduler.Scheduler.walker_group.record", "scheduler.Scheduler.walker_group.to_config", "scheduler.Scheduler.walker_group.record"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.load_walker_model", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Scheduler._warm_up", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1_value", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.topk", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.clear_data", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.to_config", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.load_or_create_model", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.walk", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.topk", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.query_performance", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.GraphScheduler.parallel_evaluate", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.add_perf_data", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.add_data", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.record", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1_value", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1_value", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.has_more", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.train_walkers", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Scheduler._warm_up", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.to_config", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.topk", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.GraphScheduler.parallel_evaluate", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.add_perf_data", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1_value", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1_value", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.record", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.record", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.to_config", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.record"], ["", "def", "_q_schedule", "(", "self", ",", "configs", ",", "type_keys", ",", "use_model", "=", "False", ")", ":", "\n", "# prepare model", "\n", "        ", "self", ".", "walker_group", ".", "load_walker_model", "(", ")", "\n", "if", "use_model", ":", "\n", "            ", "self", ".", "walker_group", ".", "load_or_create_model", "(", ")", "\n", "# warm up", "\n", "", "warm_up_epoches", "=", "10", "\n", "warm_up_trials", "=", "20", "\n", "self", ".", "_warm_up", "(", "warm_up_epoches", ",", "warm_up_trials", ",", "configs", ",", "type_keys", ",", "use_model", "=", "use_model", ")", "\n", "\n", "# record best", "\n", "best", "=", "self", ".", "walker_group", ".", "top1", "(", ")", "\n", "best_value", "=", "self", ".", "walker_group", ".", "top1_value", "(", ")", "\n", "retired_indices", "=", "[", "]", "\n", "# early stop value", "\n", "value_early_stop", "=", "best_value", "\n", "early_stop_count", "=", "0", "\n", "# determine start points", "\n", "cur_lst", "=", "self", ".", "walker_group", ".", "topk", "(", "self", ".", "parallel", ",", "modify", "=", "True", ",", "with_value", "=", "True", ")", "\n", "part", "=", "math", ".", "ceil", "(", "self", ".", "trial", "/", "5", ")", "\n", "for", "trial", "in", "range", "(", "self", ".", "trial", ")", ":", "\n", "            ", "from_lst", ",", "next_points", ",", "action_lst", "=", "self", ".", "walker_group", ".", "walk", "(", "cur_lst", ",", "trial", ")", "\n", "if", "use_model", ":", "\n", "                ", "results", "=", "self", ".", "walker_group", ".", "query_performance", "(", "next_points", ")", "\n", "", "else", ":", "\n", "                ", "next_configs", "=", "[", "self", ".", "walker_group", ".", "to_config", "(", "indices", ")", "for", "indices", "in", "next_points", "]", "\n", "results", "=", "self", ".", "parallel_evaluate", "(", "configs", ",", "next_configs", ",", "number", "=", "self", ".", "number", ")", "\n", "self", ".", "walker_group", ".", "add_perf_data", "(", "next_points", ",", "results", ")", "\n", "", "for", "indices", ",", "action", ",", "(", "from_indices", ",", "from_value", ")", ",", "result", "in", "zip", "(", "next_points", ",", "action_lst", ",", "from_lst", ",", "results", ")", ":", "\n", "                ", "reward", "=", "np", ".", "tanh", "(", "max", "(", "from_value", "-", "result", ",", "0.0", ")", ")", "\n", "self", ".", "walker_group", ".", "add_data", "(", "\n", "action", "[", "0", "]", ",", "# name", "\n", "from_indices", ",", "# pre_state", "\n", "action", "[", "1", "]", ",", "# action", "\n", "indices", ",", "# post_state", "\n", "reward", "# reward", "\n", ")", "\n", "self", ".", "walker_group", ".", "record", "(", "indices", ",", "result", ",", "random_reject", "=", "True", ")", "\n", "# update best", "\n", "", "if", "self", ".", "walker_group", ".", "top1_value", "(", ")", "<", "best_value", ":", "\n", "                ", "best_value", "=", "self", ".", "walker_group", ".", "top1_value", "(", ")", "\n", "best", "=", "self", ".", "walker_group", ".", "top1", "(", ")", "\n", "", "print", "(", "\"No. %d | [%.6f] The best currently %.6f\"", "%", "(", "trial", ",", "time", ".", "time", "(", ")", ",", "best_value", ")", ",", "best", ")", "\n", "# early stop", "\n", "if", "math", ".", "fabs", "(", "best_value", "-", "value_early_stop", ")", "<", "0.02", ":", "\n", "                ", "early_stop_count", "+=", "1", "\n", "", "else", ":", "\n", "                ", "value_early_stop", "=", "best_value", "\n", "early_stop_count", "=", "0", "\n", "", "if", "early_stop_count", ">=", "self", ".", "early_stop", ":", "\n", "#qprint(\"Early stop with value %f repeats %d times\" % (value_early_stop, early_stop_count))", "\n", "                ", "break", "\n", "# empty, stop", "\n", "", "if", "not", "self", ".", "walker_group", ".", "has_more", "(", ")", ":", "\n", "#qprint(\"No more points, end of scheduling\")", "\n", "                ", "break", "\n", "# reload next points", "\n", "", "retired_indices", ".", "extend", "(", "cur_lst", ")", "\n", "cur_lst", "=", "self", ".", "walker_group", ".", "topk", "(", "self", ".", "parallel", ",", "modify", "=", "True", ",", "with_value", "=", "True", ")", "\n", "if", "(", "trial", "+", "1", ")", "%", "part", "==", "0", ":", "\n", "                ", "self", ".", "walker_group", ".", "train_walkers", "(", ")", "\n", "if", "not", "use_model", ":", "\n", "# re-evaluate", "\n", "                    ", "if", "best_value", "<", "float", "(", "\"inf\"", ")", ":", "\n", "                        ", "self", ".", "walker_group", ".", "record", "(", "best", ",", "best_value", ",", "random_reject", "=", "False", ")", "\n", "best", "=", "{", "}", "\n", "best_value", "=", "float", "(", "\"inf\"", ")", "\n", "", "for", "indices", ",", "value", "in", "retired_indices", "[", "-", "self", ".", "parallel", ":", "-", "1", "]", ":", "\n", "                        ", "self", ".", "walker_group", ".", "record", "(", "indices", ",", "value", ",", "random_reject", "=", "False", ")", "\n", "", "indices_lst", "=", "self", ".", "walker_group", ".", "topk", "(", "self", ".", "parallel", ",", "modify", "=", "True", ")", "\n", "#qprint(\"check next indices:\", indices_lst)", "\n", "next_configs", "=", "[", "self", ".", "walker_group", ".", "to_config", "(", "indices", ")", "for", "indices", "in", "indices_lst", "]", "\n", "results", "=", "self", ".", "parallel_evaluate", "(", "configs", ",", "next_configs", ",", "number", "=", "self", ".", "number", ")", "\n", "self", ".", "walker_group", ".", "add_perf_data", "(", "indices_lst", ",", "results", ")", "\n", "string", "=", "\"[ \"", "\n", "for", "res", "in", "results", ":", "\n", "                        ", "string", "+=", "\"%.6f \"", "%", "res", "\n", "", "string", "+=", "\"]\"", "\n", "#qprint(\"re-evaluate [%.6f] %s\" % (time.time(), string))", "\n", "for", "indices", ",", "result", "in", "zip", "(", "indices_lst", ",", "results", ")", ":", "\n", "                        ", "self", ".", "walker_group", ".", "record", "(", "indices", ",", "result", ",", "random_reject", "=", "False", ")", "\n", "# re-warm up", "\n", "", "", "warm_up_epoches", "=", "1", "\n", "warm_up_trials", "=", "self", ".", "parallel", "\n", "self", ".", "_warm_up", "(", "warm_up_epoches", ",", "warm_up_trials", ",", "configs", ",", "type_keys", ",", "use_model", "=", "use_model", ")", "\n", "# update best", "\n", "if", "self", ".", "walker_group", ".", "top1_value", "(", ")", "<", "best_value", ":", "\n", "                    ", "best_value", "=", "self", ".", "walker_group", ".", "top1_value", "(", ")", "\n", "best", "=", "self", ".", "walker_group", ".", "top1", "(", ")", "\n", "# dump data at last", "\n", "# self.walker_group.dump_data()", "\n", "", "", "", "self", ".", "walker_group", ".", "clear_data", "(", ")", "\n", "return", "self", ".", "walker_group", ".", "to_config", "(", "best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Scheduler.parallel_evaluate": [[586, 588], ["NotImplementedError"], "methods", ["None"], ["", "def", "parallel_evaluate", "(", "self", ",", "old_configs", ",", "new_configs", ",", "number", "=", "1", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Scheduler._parallel_evaluate": [[589, 719], ["len", "range", "os.mkdir", "math.ceil", "enumerate", "total_res_lst.extend", "shutil.rmtree", "func_name_lst.append", "scheduler.parallel_execute", "build_res_lst.append", "build_res.get", "isinstance", "isinstance", "print", "os.path.exists", "os.path.isdir", "print", "print", "exit", "time.time", "numpy.random.randint", "flextensor.utils.Config", "isinstance", "str", "print", "eval_res_lst.append", "scheduler.parallel_execute", "eval_res_lst.append", "ret_lst.append", "eval_res.get", "isinstance", "os.remove", "flextensor.utils.Config", "RuntimeError", "isinstance", "float", "isinstance", "str", "print", "ret_lst.append", "ret_lst.append", "os.path.join", "isinstance", "float", "str", "str.index", "str.index"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.parallel_execute", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.parallel_execute", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get"], ["", "def", "_parallel_evaluate", "(", "self", ",", "old_configs", ",", "new_configs", ",", "mode", "=", "\"op\"", ",", "number", "=", "1", ")", ":", "\n", "# # print(\"check config\", old_configs, new_configs)", "\n", "# print(\"parallel_evaluate begins...\")", "\n", "        ", "target", "=", "self", ".", "task", ".", "target", "\n", "if", "target", "==", "\"micro\"", ":", "\n", "            ", "assert", "self", ".", "rpc_info", "is", "not", "None", "\n", "target", "=", "self", ".", "rpc_info", ".", "target", "\n", "\n", "", "total_configs", "=", "len", "(", "new_configs", ")", "\n", "total_res_lst", "=", "[", "]", "\n", "try", ":", "\n", "            ", "os", ".", "mkdir", "(", "LIB_DIR", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "LIB_DIR", ")", "and", "os", ".", "path", ".", "isdir", "(", "LIB_DIR", ")", ":", "\n", "                ", "print", "(", "\"[Warning] Directory %s is not empty, but reusing it\"", "%", "LIB_DIR", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"[Error] Fail to create directory %s\\nReason: %s\"", "%", "(", "LIB_DIR", ",", "str", "(", "e", ")", ")", ")", "\n", "exit", "(", "1", ")", "\n", "", "", "for", "ep", "in", "range", "(", "math", ".", "ceil", "(", "total_configs", "/", "self", ".", "parallel", ")", ")", ":", "\n", "            ", "part_configs", "=", "new_configs", "[", "ep", "*", "self", ".", "parallel", ":", "(", "ep", "+", "1", ")", "*", "self", ".", "parallel", "]", "\n", "build_res_lst", "=", "[", "]", "\n", "func_name_lst", "=", "[", "]", "\n", "for", "config", "in", "part_configs", ":", "\n", "                ", "func_name", "=", "\"flextensor_built_function_{}_{}.tar\"", ".", "format", "(", "time", ".", "time", "(", ")", ",", "np", ".", "random", ".", "randint", "(", "1000", ",", "10000", ")", ")", "\n", "func_name_lst", ".", "append", "(", "func_name", ")", "\n", "if", "mode", "==", "\"op\"", ":", "\n", "                    ", "build_config", "=", "Config", "(", "old_configs", ".", "op_config_lst", "+", "[", "config", "]", ",", "old_configs", ".", "graph_config", ")", "\n", "op_pos", "=", "self", ".", "op_pos", "\n", "", "elif", "mode", "==", "\"graph\"", ":", "\n", "                    ", "build_config", "=", "Config", "(", "old_configs", ".", "op_config_lst", ",", "config", ")", "\n", "op_pos", "=", "None", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"Unknown mode %s\"", "%", "mode", ")", "\n", "", "res", "=", "parallel_execute", "(", "\n", "build_func", ",", "\n", "self", ".", "timeout", ",", "\n", "func_name", ",", "\n", "self", ".", "task_key", ",", "\n", "build_config", ",", "\n", "op_pos", ",", "\n", "rpc_info", "=", "self", ".", "rpc_info", ",", "\n", "rewrite", "=", "self", ".", "rewrite", "\n", ")", "\n", "build_res_lst", ".", "append", "(", "res", ")", "\n", "\n", "# time.sleep(self.timeout)", "\n", "", "eval_res_lst", "=", "[", "]", "\n", "for", "i", ",", "build_res", "in", "enumerate", "(", "build_res_lst", ")", ":", "\n", "# print(\"build result get begins...\")", "\n", "                ", "final_res", "=", "build_res", ".", "get", "(", "timeout", "=", "self", ".", "timeout", ")", "\n", "# print(\"build resutl get done.\")", "\n", "func_name", "=", "func_name_lst", "[", "i", "]", "\n", "if", "isinstance", "(", "final_res", ",", "Exception", ")", ":", "\n", "                    ", "msg", "=", "mode", "+", "\" build fail:\"", "\n", "# print(final_res.__class__)", "\n", "if", "isinstance", "(", "final_res", ",", "multi", ".", "TimeoutError", ")", ":", "\n", "                        ", "msg", "=", "msg", "+", "\"Timeout\"", "\n", "", "elif", "isinstance", "(", "final_res", ",", "tvm", ".", "_ffi", ".", "base", ".", "TVMError", ")", ":", "\n", "                        ", "msg", "=", "msg", "+", "\" TVMError \"", "\n", "", "error_str", "=", "str", "(", "final_res", ")", "\n", "found", "=", "False", "\n", "for", "key_word", "in", "[", "\"TVMError\"", ",", "\"Error\"", ",", "\"error\"", ",", "\"Fail\"", ",", "\"fail\"", ",", "\"Invalid\"", ",", "\"invalid\"", "]", ":", "\n", "                        ", "if", "key_word", "in", "error_str", ":", "\n", "                            ", "msg", "=", "msg", "+", "error_str", "[", "error_str", ".", "index", "(", "key_word", ")", ":", "1000", "]", "\n", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                        ", "msg", "=", "msg", "+", "error_str", "\n", "", "print", "(", "msg", ")", "\n", "eval_res_lst", ".", "append", "(", "float", "(", "\"inf\"", ")", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "res", "=", "parallel_execute", "(", "\n", "eval_func", ",", "\n", "self", ".", "timeout", ",", "\n", "func_name", ",", "\n", "final_res", "[", "0", "]", ",", "\n", "final_res", "[", "1", "]", ",", "\n", "target", ",", "\n", "number", "=", "number", ",", "\n", "dev_id", "=", "self", ".", "task", ".", "dev_id", ",", "\n", "rpc_info", "=", "self", ".", "rpc_info", "\n", ")", "\n", "eval_res_lst", ".", "append", "(", "res", ")", "\n", "\n", "# time.sleep(self.timeout)", "\n", "\n", "", "", "ret_lst", "=", "[", "]", "\n", "for", "eval_res", "in", "eval_res_lst", ":", "\n", "                ", "if", "isinstance", "(", "eval_res", ",", "float", ")", ":", "\n", "                    ", "ret_lst", ".", "append", "(", "eval_res", ")", "\n", "", "else", ":", "\n", "# print(\"evluate result getting...\")", "\n", "                    ", "final_res", "=", "eval_res", ".", "get", "(", "timeout", "=", "self", ".", "timeout", ")", "\n", "# print(\"evlaute result get done.\")", "\n", "if", "isinstance", "(", "final_res", ",", "Exception", ")", ":", "\n", "                        ", "msg", "=", "mode", "+", "\" run fail:\"", "\n", "# print(final_res.__class__)", "\n", "if", "isinstance", "(", "final_res", ",", "multi", ".", "TimeoutError", ")", ":", "\n", "                            ", "msg", "=", "msg", "+", "\" Timeout \"", "\n", "", "elif", "isinstance", "(", "final_res", ",", "tvm", ".", "_ffi", ".", "base", ".", "TVMError", ")", ":", "\n", "                            ", "msg", "=", "msg", "+", "\" TVMError \"", "\n", "", "error_str", "=", "str", "(", "final_res", ")", "\n", "found", "=", "False", "\n", "for", "key_word", "in", "[", "\"Error\"", ",", "\"error\"", ",", "\"Fail\"", ",", "\"fail\"", ",", "\"Invalid\"", ",", "\"invalid\"", "]", ":", "\n", "                            ", "if", "key_word", "in", "error_str", ":", "\n", "                                ", "msg", "=", "msg", "+", "error_str", "[", "error_str", ".", "index", "(", "key_word", ")", ":", "1000", "]", "\n", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                            ", "msg", "=", "msg", "+", "error_str", "\n", "", "print", "(", "msg", ")", "\n", "ret_lst", ".", "append", "(", "float", "(", "\"inf\"", ")", ")", "\n", "", "else", ":", "\n", "                        ", "ret_lst", ".", "append", "(", "final_res", ")", "\n", "\n", "", "", "", "total_res_lst", ".", "extend", "(", "ret_lst", ")", "\n", "\n", "for", "func_name", "in", "func_name_lst", ":", "\n", "                ", "try", ":", "\n", "                    ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "LIB_DIR", ",", "func_name", ")", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "                    ", "pass", "\n", "# print(\"File not found when deleting\")", "\n", "", "", "", "try", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "LIB_DIR", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "# print(\"parallel evaluate done.\")", "\n", "", "return", "total_res_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.OpScheduler.__init__": [[722, 729], ["scheduler.Scheduler.__init__", "str"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.BenchmarkCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_key", ",", "op_pos", ",", "space", ",", "decay", "=", "0.7", ",", "parallel", "=", "1", ",", "timeout", "=", "4.0", ",", "trial", "=", "100", ",", "number", "=", "1", ",", "early_stop", "=", "30", ",", "\n", "rpc_info", "=", "None", ",", "rewrite", "=", "False", ",", "model_measurer", "=", "None", ",", "re_evalutate_number", "=", "10", ",", "warm_up_epoch", "=", "20", ",", "warm_up_number", "=", "20", ")", ":", "\n", "        ", "super", "(", "OpScheduler", ",", "self", ")", ".", "__init__", "(", "\"op\"", "+", "str", "(", "op_pos", ")", ",", "task_key", ",", "space", ",", "parallel", ",", "timeout", ",", "trial", ",", "number", ",", "\n", "early_stop", ",", "rpc_info", ",", "rewrite", "=", "rewrite", ",", "re_evalutate_number", "=", "re_evalutate_number", ",", "\n", "warm_up_epoch", "=", "warm_up_epoch", ",", "warm_up_number", "=", "warm_up_number", ")", "\n", "self", ".", "op_pos", "=", "op_pos", "\n", "self", ".", "model_measurer", "=", "model_measurer", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.OpScheduler.schedule": [[730, 751], ["scheduler.OpScheduler._searching_schedule", "scheduler.OpScheduler._q_schedule", "scheduler.OpScheduler._random_schedule", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Scheduler._searching_schedule", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Scheduler._q_schedule", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Scheduler._random_schedule"], ["", "def", "schedule", "(", "self", ",", "configs", ",", "method", "=", "\"searching\"", ",", "use_model", "=", "False", ",", "perf_path", "=", "None", ")", ":", "\n", "# if hint == \"split_fuse\":", "\n", "#     wanted_types = [\"spatial\", \"reduce\", \"unroll\"]", "\n", "# elif hint == \"fuse_split\":", "\n", "#     wanted_types = [\"fuse\", \"reorder\", \"spatial\", \"reduce\", \"unroll\"]", "\n", "# else:", "\n", "#     raise RuntimeError(\"Unknown hint: %s\" % hint)", "\n", "        ", "if", "self", ".", "task", ".", "target", "==", "\"micro\"", ":", "\n", "            ", "wanted_types", "=", "[", "\"spatial\"", ",", "\"reduce\"", ",", "\"intrin\"", ",", "\"reorder\"", "]", "\n", "", "else", ":", "\n", "            ", "wanted_types", "=", "[", "\"fuse\"", ",", "\"reorder\"", ",", "\"spatial\"", ",", "\"reduce\"", ",", "\"unroll\"", "]", "\n", "", "if", "perf_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "walker_group", ".", "model_path", "=", "perf_path", "\n", "", "if", "method", "==", "\"searching\"", ":", "\n", "            ", "return", "self", ".", "_searching_schedule", "(", "configs", ",", "wanted_types", ",", "use_model", "=", "use_model", ")", "\n", "", "elif", "method", "==", "\"q\"", ":", "\n", "            ", "return", "self", ".", "_q_schedule", "(", "configs", ",", "wanted_types", ",", "use_model", "=", "use_model", ")", "\n", "", "elif", "method", "==", "\"random\"", ":", "\n", "            ", "return", "self", ".", "_random_schedule", "(", "configs", ",", "wanted_types", ",", "use_model", "=", "use_model", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Currently no support for method %s\"", "%", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.OpScheduler._parallel_evaluate": [[752, 771], ["flextensor.utils.Config", "scheduler.schedule_with_config", "flextensor.utils.get_iter_info", "scheduler.OpScheduler.model_measurer", "res_lst.append", "print", "res_lst.append", "float", "float"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.schedule_with_config", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.get_iter_info"], ["", "", "def", "_parallel_evaluate", "(", "self", ",", "old_configs", ",", "new_configs", ",", "mode", "=", "'op'", ",", "number", "=", "1", ")", ":", "\n", "        ", "target", "=", "self", ".", "task", ".", "target", "\n", "assert", "target", "==", "\"micro\"", "and", "mode", "==", "'op'", "\n", "\n", "res_lst", "=", "[", "]", "\n", "for", "cfg", "in", "new_configs", ":", "\n", "            ", "config", "=", "Config", "(", "old_configs", ".", "op_config_lst", "+", "[", "cfg", "]", ",", "old_configs", ".", "graph_config", ")", "\n", "try", ":", "\n", "                ", "s", ",", "bufs", "=", "schedule_with_config", "(", "self", ".", "task_key", ",", "config", ",", "self", ".", "op_pos", ",", "rewrite", "=", "self", ".", "rewrite", ")", "\n", "# stmt = tvm.lower(s, bufs, simple_mode=True)", "\n", "# print(str(stmt))", "\n", "info", "=", "get_iter_info", "(", "s", ")", "\n", "l", "=", "self", ".", "model_measurer", "(", "info", ")", "\n", "res_lst", ".", "append", "(", "l", "if", "l", "is", "not", "None", "else", "float", "(", "\"inf\"", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "res_lst", ".", "append", "(", "float", "(", "\"inf\"", ")", ")", "\n", "\n", "", "", "return", "res_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.OpScheduler.parallel_evaluate": [[772, 775], ["scheduler.OpScheduler._parallel_evaluate"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.OpScheduler._parallel_evaluate"], ["", "def", "parallel_evaluate", "(", "self", ",", "configs", ",", "next_op_configs", ",", "number", "=", "1", ",", "rpc_info", "=", "None", ")", ":", "\n", "# return self._parallel_evaluate(configs, next_op_configs, mode=\"op\", number=number)", "\n", "        ", "return", "self", ".", "_parallel_evaluate", "(", "configs", ",", "next_op_configs", ",", "mode", "=", "'op'", ",", "number", "=", "number", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.OpScheduler.generate_op_schedule": [[776, 2157], ["s.cache_write", "flextensor.utils.assert_print", "range", "s[].reorder", "len", "flextensor.utils.assert_print", "s[].compute_at", "s.cache_write", "range", "s[].reorder", "tvm.thread_axis", "tvm.thread_axis", "tvm.thread_axis", "tvm.thread_axis", "tvm.thread_axis", "tvm.thread_axis", "tvm.thread_axis", "tvm.thread_axis", "tvm.thread_axis", "len", "len", "s[].compute_at", "s.cache_write", "s[].split", "range", "s[].reorder", "tvm.thread_axis", "tvm.thread_axis", "tvm.thread_axis", "tvm.thread_axis", "tvm.thread_axis", "tvm.thread_axis", "tvm.thread_axis", "tvm.thread_axis", "tvm.thread_axis", "len", "zip", "s[].compute_at", "s.cache_write", "flextensor.utils.assert_print", "range", "s[].reorder", "len", "flextensor.utils.assert_print", "s[].parallel", "s[].compute_at", "s[].vectorize", "s.cache_write", "s[].split", "range", "s[].reorder", "s[].fuse", "s[].parallel", "len", "s[].compute_at", "s.cache_write", "flextensor.utils.assert_print", "len", "range", "list", "s[].reorder", "s[].parallel", "s[].compute_at", "len", "flextensor.utils.assert_print", "len", "len", "range", "list", "s[].reorder", "hasattr", "flextensor.intrinsic.get_intrin_table", "rearrange"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.assert_print", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.assert_print", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.assert_print", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.assert_print", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.assert_print", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.assert_print", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.intrinsic.get_intrin_table"], ["", "@", "staticmethod", "\n", "def", "generate_op_schedule", "(", "target", ",", "config", ")", ":", "\n", "        ", "def", "_cuda_schedule_split_fuse", "(", "s", ",", "op", ",", "op_state", ")", ":", "\n", "# assert_print(op in s)", "\n", "\n", "# always cache write here", "\n", "# if op.num_outputs > 1:", "\n", "#     raise RuntimeWarning(\"Too many outputs in one operation!\")", "\n", "            ", "write_cache", "=", "s", ".", "cache_write", "(", "op", ".", "output", "(", "0", ")", ",", "\"local\"", ")", "\n", "\n", "# always cache read here", "\n", "read_cache_share_lst", "=", "[", "]", "\n", "read_cache_local_lst", "=", "[", "]", "\n", "for", "t", "in", "op", ".", "input_tensors", ":", "\n", "                ", "share", "=", "s", ".", "cache_read", "(", "t", ",", "\"shared\"", ",", "[", "write_cache", "]", ")", "\n", "read_cache_share_lst", ".", "append", "(", "share", ")", "\n", "local", "=", "s", ".", "cache_read", "(", "share", ",", "\"local\"", ",", "[", "write_cache", "]", ")", "\n", "read_cache_local_lst", ".", "append", "(", "local", ")", "\n", "\n", "# spatial split", "\n", "", "spatial_axes", "=", "s", "[", "op", "]", ".", "op", ".", "axis", "\n", "splited_spatial_axes", "=", "[", "]", "\n", "if", "\"spatial\"", "in", "config", "and", "len", "(", "config", "[", "\"spatial\"", "]", ")", ">", "0", ":", "\n", "# to align each axis", "\n", "                ", "assert_print", "(", "len", "(", "config", "[", "\"spatial\"", "]", ")", "==", "len", "(", "spatial_axes", ")", ",", "\"align failed\"", ")", "\n", "for", "axis", ",", "nparts", "in", "zip", "(", "spatial_axes", ",", "config", "[", "\"spatial\"", "]", ")", ":", "\n", "                    ", "tmp_buffer", "=", "[", "]", "\n", "for", "count", "in", "range", "(", "len", "(", "nparts", ")", "-", "1", ")", ":", "\n", "                        ", "outer", ",", "axis", "=", "s", "[", "op", "]", ".", "split", "(", "axis", ",", "nparts", "=", "nparts", "[", "count", "]", ")", "\n", "tmp_buffer", ".", "append", "(", "outer", ")", "\n", "", "tmp_buffer", ".", "append", "(", "axis", ")", "\n", "splited_spatial_axes", ".", "append", "(", "tmp_buffer", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "axis", "in", "spatial_axes", ":", "\n", "                    ", "splited_spatial_axes", ".", "append", "(", "[", "axis", "]", ")", "\n", "", "", "assert_print", "(", "len", "(", "splited_spatial_axes", ")", ">", "0", ",", "\"empty spatial axes\"", ")", "# must be non-empty", "\n", "\n", "# always reorder and fuse here", "\n", "spatial_fuse_lsts", "=", "[", "]", "\n", "spatial_fuse_extents", "=", "[", "]", "\n", "reorder_lst", "=", "[", "]", "\n", "fused_spatial_axes", "=", "[", "]", "\n", "for", "count", "in", "range", "(", "len", "(", "splited_spatial_axes", "[", "0", "]", ")", ")", ":", "\n", "                ", "tmp_buffer", "=", "[", "x", "[", "count", "]", "for", "x", "in", "splited_spatial_axes", "]", "\n", "tmp_extent", "=", "reduce", "(", "lambda", "a", ",", "b", ":", "a", "*", "b", ",", "[", "x", "[", "count", "]", "for", "x", "in", "config", "[", "\"spatial\"", "]", "]", ")", "\n", "spatial_fuse_lsts", ".", "append", "(", "tmp_buffer", ")", "\n", "spatial_fuse_extents", ".", "append", "(", "tmp_extent", ")", "\n", "reorder_lst", ".", "extend", "(", "tmp_buffer", ")", "\n", "", "s", "[", "op", "]", ".", "reorder", "(", "*", "reorder_lst", ")", "\n", "for", "fuse_lst", "in", "spatial_fuse_lsts", ":", "\n", "                ", "fused", "=", "s", "[", "op", "]", ".", "fuse", "(", "*", "fuse_lst", ")", "\n", "fused_spatial_axes", ".", "append", "(", "fused", ")", "\n", "", "kernel_scope", "=", "fused_spatial_axes", "[", "0", "]", "\n", "\n", "# always bind here", "\n", "length", "=", "len", "(", "fused_spatial_axes", ")", "\n", "thread_extents", "=", "1", "\n", "assert_print", "(", "length", ">", "1", ",", "\"fused axes length <= 1\"", ")", "\n", "if", "2", "<=", "length", "<=", "3", ":", "\n", "                ", "s", "[", "op", "]", ".", "bind", "(", "fused_spatial_axes", "[", "0", "]", ",", "tvm", ".", "thread_axis", "(", "\"blockIdx.x\"", ")", ")", "\n", "s", "[", "op", "]", ".", "bind", "(", "fused_spatial_axes", "[", "1", "]", ",", "tvm", ".", "thread_axis", "(", "\"threadIdx.x\"", ")", ")", "\n", "thread_pos", "=", "fused_spatial_axes", "[", "1", "]", "\n", "thread_extents", "=", "spatial_fuse_extents", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "s", "[", "op", "]", ".", "bind", "(", "fused_spatial_axes", "[", "0", "]", ",", "tvm", ".", "thread_axis", "(", "\"blockIdx.x\"", ")", ")", "\n", "s", "[", "op", "]", ".", "bind", "(", "fused_spatial_axes", "[", "1", "]", ",", "tvm", ".", "thread_axis", "(", "\"vthread\"", ")", ")", "\n", "s", "[", "op", "]", ".", "bind", "(", "fused_spatial_axes", "[", "2", "]", ",", "tvm", ".", "thread_axis", "(", "\"threadIdx.x\"", ")", ")", "\n", "thread_pos", "=", "fused_spatial_axes", "[", "2", "]", "\n", "thread_extents", "=", "spatial_fuse_extents", "[", "2", "]", "\n", "\n", "# always compute at here", "\n", "", "s", "[", "write_cache", "]", ".", "compute_at", "(", "s", "[", "op", "]", ",", "thread_pos", ")", "\n", "\n", "# reduce_split", "\n", "reduced_axes", "=", "s", "[", "write_cache", "]", ".", "op", ".", "reduce_axis", "\n", "splited_reduced_axes", "=", "[", "]", "\n", "if", "\"reduce\"", "in", "config", "and", "len", "(", "config", "[", "\"reduce\"", "]", ")", ">", "0", ":", "\n", "# to align each axis", "\n", "                ", "assert_print", "(", "len", "(", "config", "[", "\"reduce\"", "]", ")", "==", "len", "(", "reduced_axes", ")", ",", "\"align reduce failed\"", ")", "\n", "for", "axis", ",", "nparts", "in", "zip", "(", "reduced_axes", ",", "config", "[", "\"reduce\"", "]", ")", ":", "\n", "                    ", "tmp_buffer", "=", "[", "]", "\n", "for", "count", "in", "range", "(", "len", "(", "nparts", ")", "-", "1", ")", ":", "\n", "                        ", "outer", ",", "axis", "=", "s", "[", "write_cache", "]", ".", "split", "(", "axis", ",", "nparts", "=", "nparts", "[", "count", "]", ")", "\n", "tmp_buffer", ".", "append", "(", "outer", ")", "\n", "", "tmp_buffer", ".", "append", "(", "axis", ")", "\n", "splited_reduced_axes", ".", "append", "(", "tmp_buffer", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "axis", "in", "reduced_axes", ":", "\n", "                    ", "splited_reduced_axes", ".", "append", "(", "[", "axis", "]", ")", "\n", "", "", "share_pos", "=", "None", "\n", "local_pos", "=", "None", "\n", "# if has reduce axes", "\n", "if", "len", "(", "splited_reduced_axes", ")", ">", "0", ":", "\n", "# always reorder here", "\n", "                ", "reduced_nonfuse_lsts", "=", "[", "]", "\n", "reorder_lst", "=", "[", "]", "\n", "length", "=", "len", "(", "splited_reduced_axes", "[", "0", "]", ")", "\n", "\n", "for", "count", "in", "range", "(", "length", ")", ":", "\n", "                    ", "tmp_buffer", "=", "[", "x", "[", "count", "]", "for", "x", "in", "splited_reduced_axes", "]", "\n", "reduced_nonfuse_lsts", ".", "append", "(", "tmp_buffer", ")", "\n", "reorder_lst", ".", "extend", "(", "tmp_buffer", ")", "\n", "# change the order of reduce axes and spatial axes", "\n", "", "reorder_lst", ".", "extend", "(", "s", "[", "write_cache", "]", ".", "op", ".", "axis", ")", "\n", "s", "[", "write_cache", "]", ".", "reorder", "(", "*", "reorder_lst", ")", "\n", "\n", "if", "length", "==", "1", ":", "\n", "                    ", "share_pos", "=", "reduced_nonfuse_lsts", "[", "-", "1", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "share_pos", "=", "reduced_nonfuse_lsts", "[", "-", "2", "]", "[", "0", "]", "\n", "local_pos", "=", "reduced_nonfuse_lsts", "[", "-", "1", "]", "[", "-", "1", "]", "\n", "\n", "# always cache read here", "\n", "", "", "if", "share_pos", "is", "not", "None", ":", "\n", "                ", "for", "share", "in", "read_cache_share_lst", ":", "\n", "                    ", "s", "[", "share", "]", ".", "compute_at", "(", "s", "[", "write_cache", "]", ",", "share_pos", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "share", "in", "read_cache_share_lst", ":", "\n", "                    ", "s", "[", "share", "]", ".", "compute_inline", "(", ")", "\n", "", "", "if", "local_pos", "is", "not", "None", ":", "\n", "                ", "for", "local", "in", "read_cache_local_lst", ":", "\n", "                    ", "s", "[", "local", "]", ".", "compute_at", "(", "s", "[", "write_cache", "]", ",", "local_pos", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "local", "in", "read_cache_local_lst", ":", "\n", "                    ", "s", "[", "local", "]", ".", "compute_inline", "(", ")", "\n", "\n", "# always cooperative fetching", "\n", "", "", "if", "share_pos", "is", "not", "None", ":", "\n", "                ", "for", "share", "in", "read_cache_share_lst", ":", "\n", "                    ", "fuse_lst", "=", "s", "[", "share", "]", ".", "op", ".", "axis", "\n", "fused", "=", "s", "[", "share", "]", ".", "fuse", "(", "*", "fuse_lst", ")", "\n", "outer", ",", "inner", "=", "s", "[", "share", "]", ".", "split", "(", "fused", ",", "nparts", "=", "thread_extents", ")", "\n", "s", "[", "share", "]", ".", "bind", "(", "outer", ",", "tvm", ".", "thread_axis", "(", "\"threadIdx.x\"", ")", ")", "\n", "\n", "# unroll", "\n", "", "", "if", "\"unroll\"", "in", "config", "and", "len", "(", "config", "[", "\"unroll\"", "]", ")", ">", "0", ":", "\n", "                ", "step", "=", "config", "[", "\"unroll\"", "]", "[", "0", "]", "[", "0", "]", "\n", "explicit", "=", "config", "[", "\"unroll\"", "]", "[", "0", "]", "[", "1", "]", "\n", "s", "[", "op", "]", ".", "pragma", "(", "kernel_scope", ",", "'auto_unroll_max_step'", ",", "step", ")", "\n", "s", "[", "op", "]", ".", "pragma", "(", "kernel_scope", ",", "'unroll_explicit'", ",", "explicit", ")", "\n", "\n", "", "", "def", "_cuda_schedule_fuse_split", "(", "s", ",", "op", ",", "op_state", ")", ":", "\n", "# assert_print(op in s)", "\n", "\n", "# always cache write here", "\n", "# if op.num_outputs > 1:", "\n", "#     raise RuntimeWarning(\"Too many outputs in one operation!\")", "\n", "            ", "write_cache", "=", "s", ".", "cache_write", "(", "op", ".", "output", "(", "0", ")", ",", "\"local\"", ")", "\n", "\n", "# always cache read here", "\n", "read_cache_share_lst", "=", "[", "]", "\n", "# read_cache_local_lst = []", "\n", "for", "t", "in", "op", ".", "input_tensors", ":", "\n", "                ", "share", "=", "s", ".", "cache_read", "(", "t", ",", "\"shared\"", ",", "[", "write_cache", "]", ")", "\n", "read_cache_share_lst", ".", "append", "(", "share", ")", "\n", "# local = s.cache_read(share, \"local\", [write_cache])", "\n", "# read_cache_local_lst.append(local)", "\n", "\n", "# spatial fuse", "\n", "", "spatial_axes", "=", "s", "[", "op", "]", ".", "op", ".", "axis", "\n", "fused_spatial_axes", "=", "[", "]", "\n", "if", "\"fuse\"", "in", "config", "and", "len", "(", "config", "[", "\"fuse\"", "]", ")", ">", "0", ":", "\n", "# fuse redundant axes", "\n", "                ", "beg", "=", "0", "\n", "for", "end", "in", "config", "[", "\"fuse\"", "]", "[", "0", "]", ":", "\n", "                    ", "fuse_lst", "=", "spatial_axes", "[", "beg", ":", "end", "]", "\n", "beg", "=", "end", "\n", "if", "len", "(", "fuse_lst", ")", ">", "0", ":", "\n", "                        ", "fused", "=", "s", "[", "op", "]", ".", "fuse", "(", "*", "fuse_lst", ")", "\n", "fused_spatial_axes", ".", "append", "(", "fused", ")", "\n", "", "", "", "else", ":", "\n", "                ", "fused_spatial_axes", "=", "spatial_axes", "\n", "\n", "# spatial split", "\n", "", "split_factor_lst", "=", "[", "]", "\n", "splited_spatial_axes", "=", "[", "]", "\n", "if", "\"spatial\"", "in", "config", "and", "len", "(", "config", "[", "\"spatial\"", "]", ")", ">", "0", ":", "\n", "# to align each axis", "\n", "                ", "assert", "len", "(", "config", "[", "\"spatial\"", "]", ")", "==", "len", "(", "spatial_axes", ")", ",", "\"align failed\"", "\n", "# compute split factors", "\n", "if", "\"fuse\"", "in", "config", "and", "len", "(", "config", "[", "\"fuse\"", "]", ")", ">", "0", ":", "\n", "                    ", "beg", "=", "0", "\n", "for", "end", "in", "config", "[", "\"fuse\"", "]", "[", "0", "]", ":", "\n", "                        ", "tmp_lst", "=", "[", "1", "]", "*", "len", "(", "config", "[", "\"spatial\"", "]", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "beg", ",", "end", ")", ":", "\n", "                            ", "for", "j", "in", "range", "(", "len", "(", "config", "[", "\"spatial\"", "]", "[", "i", "]", ")", ")", ":", "\n", "                                ", "tmp_lst", "[", "j", "]", "*=", "config", "[", "\"spatial\"", "]", "[", "i", "]", "[", "j", "]", "\n", "", "", "if", "beg", "<", "end", ":", "\n", "                            ", "split_factor_lst", ".", "append", "(", "tmp_lst", ")", "\n", "", "beg", "=", "end", "\n", "", "", "else", ":", "\n", "                    ", "split_factor_lst", "=", "config", "[", "\"spatial\"", "]", "\n", "", "assert", "len", "(", "fused_spatial_axes", ")", "==", "len", "(", "split_factor_lst", ")", ",", "\"align failed\"", "\n", "for", "axis", ",", "nparts", "in", "zip", "(", "fused_spatial_axes", ",", "split_factor_lst", ")", ":", "\n", "                    ", "tmp_buffer", "=", "[", "]", "\n", "for", "count", "in", "range", "(", "len", "(", "nparts", ")", "-", "1", ")", ":", "\n", "                        ", "outer", ",", "axis", "=", "s", "[", "op", "]", ".", "split", "(", "axis", ",", "nparts", "=", "nparts", "[", "count", "]", ")", "\n", "tmp_buffer", ".", "append", "(", "outer", ")", "\n", "", "tmp_buffer", ".", "append", "(", "axis", ")", "\n", "splited_spatial_axes", ".", "append", "(", "tmp_buffer", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "axis", "in", "fused_spatial_axes", ":", "\n", "                    ", "splited_spatial_axes", ".", "append", "(", "[", "axis", "]", ")", "\n", "", "", "assert", "len", "(", "splited_spatial_axes", ")", ">", "0", ",", "\"empty spatial axes\"", "# must be non-empty", "\n", "\n", "# always reorder here", "\n", "reorder_lst", "=", "[", "]", "\n", "for", "count", "in", "range", "(", "len", "(", "splited_spatial_axes", "[", "0", "]", ")", ")", ":", "\n", "                ", "tmp_buffer", "=", "[", "x", "[", "count", "]", "for", "x", "in", "splited_spatial_axes", "]", "\n", "reorder_lst", ".", "extend", "(", "tmp_buffer", ")", "\n", "", "s", "[", "op", "]", ".", "reorder", "(", "*", "reorder_lst", ")", "\n", "\n", "# fix kernel scope", "\n", "kernel_scope", "=", "reorder_lst", "[", "0", "]", "\n", "\n", "# always bind here", "\n", "# - prepare thread axis", "\n", "bx", "=", "tvm", ".", "thread_axis", "(", "\"blockIdx.x\"", ")", "\n", "by", "=", "tvm", ".", "thread_axis", "(", "\"blockIdx.y\"", ")", "\n", "bz", "=", "tvm", ".", "thread_axis", "(", "\"blockIdx.z\"", ")", "\n", "vx", "=", "tvm", ".", "thread_axis", "(", "\"vthread\"", ")", "\n", "vy", "=", "tvm", ".", "thread_axis", "(", "\"vthread\"", ")", "\n", "vz", "=", "tvm", ".", "thread_axis", "(", "\"vthread\"", ")", "\n", "tx", "=", "tvm", ".", "thread_axis", "(", "\"threadIdx.x\"", ")", "\n", "ty", "=", "tvm", ".", "thread_axis", "(", "\"threadIdx.y\"", ")", "\n", "tz", "=", "tvm", ".", "thread_axis", "(", "\"threadIdx.z\"", ")", "\n", "\n", "blocks", "=", "[", "bz", ",", "by", ",", "bx", "]", "\n", "threads", "=", "[", "tz", ",", "ty", ",", "tx", "]", "\n", "vthreads", "=", "[", "vz", ",", "vy", ",", "vx", "]", "\n", "\n", "block_extents", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", "# z, y, x", "\n", "virtual_extents", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", "\n", "thread_extents", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", "\n", "\n", "length", "=", "len", "(", "splited_spatial_axes", ")", "\n", "assert", "length", ">=", "1", "\n", "# - bind", "\n", "count", "=", "min", "(", "length", ",", "len", "(", "blocks", ")", ")", "-", "1", "\n", "while", "count", ">=", "0", ":", "\n", "                ", "parts", "=", "len", "(", "splited_spatial_axes", "[", "count", "]", ")", "\n", "assert", "parts", ">", "0", "\n", "if", "parts", "==", "1", ":", "\n", "                    ", "s", "[", "op", "]", ".", "bind", "(", "splited_spatial_axes", "[", "count", "]", "[", "0", "]", ",", "blocks", "[", "count", "]", ")", "\n", "block_extents", "[", "count", "]", "=", "split_factor_lst", "[", "count", "]", "[", "0", "]", "\n", "", "elif", "parts", "==", "2", ":", "\n", "                    ", "s", "[", "op", "]", ".", "bind", "(", "splited_spatial_axes", "[", "count", "]", "[", "0", "]", ",", "blocks", "[", "count", "]", ")", "\n", "block_extents", "[", "count", "]", "=", "split_factor_lst", "[", "count", "]", "[", "0", "]", "\n", "s", "[", "op", "]", ".", "bind", "(", "splited_spatial_axes", "[", "count", "]", "[", "1", "]", ",", "threads", "[", "count", "]", ")", "\n", "thread_extents", "[", "count", "]", "=", "split_factor_lst", "[", "count", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "                    ", "s", "[", "op", "]", ".", "bind", "(", "splited_spatial_axes", "[", "count", "]", "[", "0", "]", ",", "blocks", "[", "count", "]", ")", "\n", "block_extents", "[", "count", "]", "=", "split_factor_lst", "[", "count", "]", "[", "0", "]", "\n", "s", "[", "op", "]", ".", "bind", "(", "splited_spatial_axes", "[", "count", "]", "[", "1", "]", ",", "vthreads", "[", "count", "]", ")", "\n", "virtual_extents", "[", "count", "]", "=", "split_factor_lst", "[", "count", "]", "[", "1", "]", "\n", "s", "[", "op", "]", ".", "bind", "(", "splited_spatial_axes", "[", "count", "]", "[", "2", "]", ",", "threads", "[", "count", "]", ")", "\n", "thread_extents", "[", "count", "]", "=", "split_factor_lst", "[", "count", "]", "[", "2", "]", "\n", "", "count", "-=", "1", "\n", "# - compute at pos", "\n", "", "count", "=", "min", "(", "length", ",", "len", "(", "blocks", ")", ")", "-", "1", "\n", "parts", "=", "len", "(", "splited_spatial_axes", "[", "count", "]", ")", "\n", "thread_pos", "=", "splited_spatial_axes", "[", "count", "]", "[", "min", "(", "parts", "-", "1", ",", "2", ")", "]", "\n", "\n", "# always compute at here", "\n", "s", "[", "write_cache", "]", ".", "compute_at", "(", "s", "[", "op", "]", ",", "thread_pos", ")", "\n", "\n", "# reduce_split", "\n", "reduced_axes", "=", "s", "[", "write_cache", "]", ".", "op", ".", "reduce_axis", "\n", "splited_reduced_axes", "=", "[", "]", "\n", "if", "\"reduce\"", "in", "config", "and", "len", "(", "config", "[", "\"reduce\"", "]", ")", ">", "0", ":", "\n", "# to align each axis", "\n", "                ", "assert_print", "(", "len", "(", "config", "[", "\"reduce\"", "]", ")", "==", "len", "(", "reduced_axes", ")", ",", "\"align reduce failed\"", ")", "\n", "for", "axis", ",", "nparts", "in", "zip", "(", "reduced_axes", ",", "config", "[", "\"reduce\"", "]", ")", ":", "\n", "                    ", "tmp_buffer", "=", "[", "]", "\n", "for", "count", "in", "range", "(", "len", "(", "nparts", ")", "-", "1", ")", ":", "\n", "                        ", "outer", ",", "axis", "=", "s", "[", "write_cache", "]", ".", "split", "(", "axis", ",", "nparts", "=", "nparts", "[", "count", "]", ")", "\n", "tmp_buffer", ".", "append", "(", "outer", ")", "\n", "", "tmp_buffer", ".", "append", "(", "axis", ")", "\n", "splited_reduced_axes", ".", "append", "(", "tmp_buffer", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "axis", "in", "reduced_axes", ":", "\n", "                    ", "splited_reduced_axes", ".", "append", "(", "[", "axis", "]", ")", "\n", "", "", "share_pos", "=", "None", "\n", "# local_pos = None", "\n", "# if has reduce axes", "\n", "if", "len", "(", "splited_reduced_axes", ")", ">", "0", ":", "\n", "# always reorder here", "\n", "                ", "reduced_nonfuse_lsts", "=", "[", "]", "\n", "reorder_lst", "=", "[", "]", "\n", "length", "=", "len", "(", "splited_reduced_axes", "[", "0", "]", ")", "\n", "# leave the last part", "\n", "for", "count", "in", "range", "(", "length", "-", "1", ")", ":", "\n", "                    ", "tmp_buffer", "=", "[", "x", "[", "count", "]", "for", "x", "in", "splited_reduced_axes", "]", "\n", "reduced_nonfuse_lsts", ".", "append", "(", "tmp_buffer", ")", "\n", "reorder_lst", ".", "extend", "(", "tmp_buffer", ")", "\n", "# the last part", "\n", "", "last_part", "=", "[", "x", "[", "length", "-", "1", "]", "for", "x", "in", "splited_reduced_axes", "]", "\n", "spatial_remainder", "=", "s", "[", "write_cache", "]", ".", "op", ".", "axis", "\n", "# change the order of reduce axes and spatial axes", "\n", "if", "\"reorder\"", "in", "config", "and", "len", "(", "config", "[", "\"reorder\"", "]", ")", ">", "0", ":", "\n", "                    ", "pos", "=", "config", "[", "\"reorder\"", "]", "[", "0", "]", "[", "0", "]", "\n", "assert", "pos", "<", "len", "(", "spatial_remainder", ")", "\n", "tmp_buffer", "=", "[", "]", "\n", "count", "=", "len", "(", "spatial_remainder", ")", "-", "1", "\n", "while", "count", ">", "pos", ":", "\n", "                        ", "tmp_buffer", ".", "append", "(", "spatial_remainder", "[", "count", "]", ")", "\n", "count", "-=", "1", "\n", "", "p", "=", "pos", "\n", "q", "=", "len", "(", "last_part", ")", "-", "1", "\n", "while", "p", ">=", "0", "and", "q", ">=", "0", ":", "\n", "                        ", "tmp_buffer", ".", "append", "(", "spatial_remainder", "[", "p", "]", ")", "\n", "tmp_buffer", ".", "append", "(", "last_part", "[", "q", "]", ")", "\n", "p", "-=", "1", "\n", "q", "-=", "1", "\n", "", "while", "p", ">=", "0", ":", "\n", "                        ", "tmp_buffer", ".", "append", "(", "spatial_remainder", "[", "p", "]", ")", "\n", "p", "-=", "1", "\n", "", "while", "q", ">=", "0", ":", "\n", "                        ", "tmp_buffer", ".", "append", "(", "last_part", "[", "q", "]", ")", "\n", "q", "-=", "1", "\n", "", "tmp_buffer", "=", "list", "(", "reversed", "(", "tmp_buffer", ")", ")", "\n", "reorder_lst", ".", "extend", "(", "tmp_buffer", ")", "\n", "", "else", ":", "\n", "                    ", "reorder_lst", ".", "extend", "(", "last_part", ")", "\n", "reorder_lst", ".", "extend", "(", "spatial_remainder", ")", "\n", "", "s", "[", "write_cache", "]", ".", "reorder", "(", "*", "reorder_lst", ")", "\n", "# decide where to compute at", "\n", "if", "length", "==", "1", ":", "\n", "                    ", "share_pos", "=", "last_part", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "mid", "=", "math", ".", "ceil", "(", "length", "/", "2.0", ")", "-", "1", "\n", "share_pos", "=", "reduced_nonfuse_lsts", "[", "mid", "]", "[", "-", "1", "]", "\n", "# local_pos = last_part[-1]", "\n", "\n", "# always cache read here", "\n", "", "", "if", "share_pos", "is", "not", "None", ":", "\n", "                ", "for", "share", "in", "read_cache_share_lst", ":", "\n", "                    ", "s", "[", "share", "]", ".", "compute_at", "(", "s", "[", "write_cache", "]", ",", "share_pos", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "share", "in", "read_cache_share_lst", ":", "\n", "                    ", "s", "[", "share", "]", ".", "compute_inline", "(", ")", "\n", "# if local_pos is not None:", "\n", "#     for local in read_cache_local_lst:", "\n", "#         s[local].compute_at(s[write_cache], local_pos)", "\n", "# else:", "\n", "#     for local in read_cache_local_lst:", "\n", "#         s[local].compute_inline()", "\n", "\n", "# always cooperative fetching", "\n", "", "", "if", "share_pos", "is", "not", "None", ":", "\n", "                ", "for", "share", "in", "read_cache_share_lst", ":", "\n", "                    ", "fuse_lst", "=", "s", "[", "share", "]", ".", "op", ".", "axis", "\n", "fused", "=", "s", "[", "share", "]", ".", "fuse", "(", "*", "fuse_lst", ")", "\n", "count", "=", "2", "\n", "cur", "=", "1", "\n", "limit", "=", "1024", "\n", "while", "count", ">=", "0", ":", "\n", "                        ", "factor", "=", "thread_extents", "[", "count", "]", "\n", "if", "factor", "<", "0", ":", "\n", "                            ", "defined", "=", "False", "\n", "factor", "=", "16", "\n", "", "else", ":", "\n", "                            ", "defined", "=", "True", "\n", "", "cur", "*=", "factor", "\n", "if", "not", "defined", "and", "cur", ">", "limit", ":", "\n", "                            ", "break", "\n", "", "fused", ",", "inner", "=", "s", "[", "share", "]", ".", "split", "(", "fused", ",", "factor", "=", "factor", ")", "\n", "s", "[", "share", "]", ".", "bind", "(", "inner", ",", "threads", "[", "count", "]", ")", "\n", "count", "-=", "1", "\n", "\n", "# unroll", "\n", "", "", "", "if", "\"unroll\"", "in", "config", "and", "len", "(", "config", "[", "\"unroll\"", "]", ")", ">", "0", ":", "\n", "                ", "step", "=", "config", "[", "\"unroll\"", "]", "[", "0", "]", "[", "0", "]", "\n", "explicit", "=", "config", "[", "\"unroll\"", "]", "[", "0", "]", "[", "1", "]", "\n", "s", "[", "op", "]", ".", "pragma", "(", "kernel_scope", ",", "'auto_unroll_max_step'", ",", "step", ")", "\n", "s", "[", "op", "]", ".", "pragma", "(", "kernel_scope", ",", "'unroll_explicit'", ",", "explicit", ")", "\n", "\n", "", "", "def", "_cuda_schedule_split_reorder_fuse", "(", "s", ",", "op", ",", "op_state", ")", ":", "\n", "# assert_print(op in s)", "\n", "\n", "            ", "loop_lst", "=", "[", "]", "\n", "loop_idx", "=", "[", "]", "\n", "\n", "# always cache write here", "\n", "# if op.num_outputs > 1:", "\n", "#     raise RuntimeWarning(\"Too many outputs in one operation!\")", "\n", "write_cache", "=", "s", ".", "cache_write", "(", "op", ".", "output", "(", "0", ")", ",", "\"local\"", ")", "\n", "# always cache read here", "\n", "read_cache_share_lst", "=", "[", "]", "\n", "# read_cache_local_lst = []", "\n", "for", "t", "in", "op", ".", "input_tensors", ":", "\n", "                ", "share", "=", "s", ".", "cache_read", "(", "t", ",", "\"shared\"", ",", "[", "write_cache", "]", ")", "\n", "read_cache_share_lst", ".", "append", "(", "share", ")", "\n", "# local = s.cache_read(share, \"local\", [write_cache])", "\n", "# read_cache_local_lst.append(local)", "\n", "\n", "# spatial split", "\n", "", "spatial_axes", "=", "[", "axis", "for", "axis", "in", "s", "[", "op", "]", ".", "op", ".", "axis", "]", "\n", "assert", "len", "(", "spatial_axes", ")", ">", "0", ",", "\"empty spatial axes\"", "# must be non-empty", "\n", "n", "=", "spatial_axes", "[", "0", "]", "\n", "kernel_scope", ",", "n", "=", "s", "[", "op", "]", ".", "split", "(", "n", ",", "nparts", "=", "1", ")", "\n", "spatial_axes", "[", "0", "]", "=", "n", "\n", "splited_spatial_axes", "=", "[", "]", "\n", "splited_spatial_extents", "=", "[", "]", "\n", "if", "\"spatial\"", "in", "config", "and", "len", "(", "config", "[", "\"spatial\"", "]", ")", ">", "0", ":", "\n", "# to align each axis", "\n", "                ", "assert", "len", "(", "config", "[", "\"spatial\"", "]", ")", "==", "len", "(", "spatial_axes", ")", ",", "\"align failed\"", "\n", "for", "axis", ",", "nparts", "in", "zip", "(", "spatial_axes", ",", "config", "[", "\"spatial\"", "]", ")", ":", "\n", "                    ", "tmp_buffer", "=", "[", "]", "\n", "tmp_extents", "=", "[", "]", "\n", "for", "count", "in", "range", "(", "len", "(", "nparts", ")", "-", "1", ")", ":", "\n", "                        ", "outer", ",", "axis", "=", "s", "[", "op", "]", ".", "split", "(", "axis", ",", "nparts", "=", "nparts", "[", "count", "]", ")", "\n", "tmp_buffer", ".", "append", "(", "outer", ")", "\n", "tmp_extents", ".", "append", "(", "nparts", "[", "count", "]", ")", "\n", "", "tmp_buffer", ".", "append", "(", "axis", ")", "\n", "tmp_extents", ".", "append", "(", "nparts", "[", "-", "1", "]", ")", "\n", "splited_spatial_axes", ".", "append", "(", "tmp_buffer", ")", "\n", "splited_spatial_extents", ".", "append", "(", "tmp_extents", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "axis", "in", "spatial_axes", ":", "\n", "                    ", "splited_spatial_axes", ".", "append", "(", "[", "axis", "]", ")", "\n", "splited_spatial_extents", ".", "append", "(", "[", "axis", ".", "dom", ".", "extent", ".", "value", "]", ")", "\n", "\n", "# always reorder here", "\n", "", "", "reorder_lst", "=", "[", "]", "\n", "reorder_parts", "=", "[", "]", "\n", "reorder_part_extents", "=", "[", "]", "\n", "for", "count", "in", "range", "(", "len", "(", "splited_spatial_axes", "[", "0", "]", ")", ")", ":", "\n", "                ", "tmp_buffer", "=", "[", "x", "[", "count", "]", "for", "x", "in", "splited_spatial_axes", "]", "\n", "tmp_extents", "=", "[", "x", "[", "count", "]", "for", "x", "in", "splited_spatial_extents", "]", "\n", "reorder_lst", ".", "extend", "(", "tmp_buffer", ")", "\n", "reorder_parts", ".", "append", "(", "tmp_buffer", ")", "\n", "reorder_part_extents", ".", "append", "(", "tmp_extents", ")", "\n", "", "s", "[", "op", "]", ".", "reorder", "(", "*", "reorder_lst", ")", "\n", "# handle fuse request", "\n", "fused_parts", "=", "[", "]", "\n", "fused_part_extents", "=", "[", "]", "\n", "fused_part_idx", "=", "[", "]", "\n", "if", "\"fuse\"", "in", "config", "and", "len", "(", "config", "[", "\"fuse\"", "]", ")", ">", "0", ":", "\n", "                ", "base_id", "=", "0", "\n", "for", "part", ",", "extents", "in", "zip", "(", "reorder_parts", ",", "reorder_part_extents", ")", ":", "\n", "                    ", "tmp_part", "=", "[", "]", "\n", "tmp_extents", "=", "[", "]", "\n", "tmp_idx", "=", "[", "]", "\n", "idx", "=", "0", "\n", "beg", "=", "0", "\n", "for", "end", "in", "config", "[", "\"fuse\"", "]", "[", "0", "]", ":", "\n", "                        ", "if", "end", "-", "beg", ">", "1", ":", "\n", "                            ", "fuse_lst", "=", "part", "[", "beg", ":", "end", "]", "\n", "fused", "=", "s", "[", "op", "]", ".", "fuse", "(", "*", "fuse_lst", ")", "\n", "tmp_part", ".", "append", "(", "fused", ")", "\n", "extent", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "*", "y", ",", "extents", "[", "beg", ":", "end", "]", ",", "1", ")", "\n", "tmp_idx", ".", "extend", "(", "[", "idx", "]", "*", "(", "end", "-", "beg", ")", ")", "\n", "idx", "+=", "1", "\n", "tmp_extents", ".", "append", "(", "extent", ")", "\n", "", "elif", "end", "-", "beg", "==", "1", ":", "\n", "                            ", "tmp_part", ".", "append", "(", "part", "[", "beg", "]", ")", "\n", "tmp_extents", ".", "append", "(", "extents", "[", "beg", "]", ")", "\n", "tmp_idx", ".", "append", "(", "idx", ")", "\n", "idx", "+=", "1", "\n", "", "beg", "=", "end", "\n", "", "fused_parts", ".", "append", "(", "tmp_part", ")", "\n", "fused_part_extents", ".", "append", "(", "tmp_extents", ")", "\n", "fused_part_idx", ".", "append", "(", "tmp_idx", ")", "\n", "\n", "loop_lst", ".", "extend", "(", "tmp_part", ")", "\n", "loop_idx", ".", "extend", "(", "[", "x", "+", "base_id", "for", "x", "in", "tmp_idx", "]", ")", "\n", "base_id", "+=", "len", "(", "tmp_part", ")", "\n", "", "", "else", ":", "\n", "                ", "fused_parts", "=", "reorder_parts", "\n", "fused_part_extents", "=", "reorder_part_extents", "\n", "fused_part_idx", "=", "[", "list", "(", "range", "(", "len", "(", "x", ")", ")", ")", "for", "x", "in", "reorder_parts", "]", "\n", "\n", "loop_lst", "=", "reorder_lst", "\n", "loop_idx", "=", "list", "(", "range", "(", "len", "(", "reorder_lst", ")", ")", ")", "\n", "# record op state", "\n", "", "op_state", ".", "loop_lst", "=", "loop_lst", "\n", "op_state", ".", "loop_idx", "=", "loop_idx", "\n", "\n", "# always bind here", "\n", "# - prepare thread axis", "\n", "bx", "=", "tvm", ".", "thread_axis", "(", "\"blockIdx.x\"", ")", "\n", "by", "=", "tvm", ".", "thread_axis", "(", "\"blockIdx.y\"", ")", "\n", "bz", "=", "tvm", ".", "thread_axis", "(", "\"blockIdx.z\"", ")", "\n", "vx", "=", "tvm", ".", "thread_axis", "(", "\"vthread\"", ")", "\n", "vy", "=", "tvm", ".", "thread_axis", "(", "\"vthread\"", ")", "\n", "vz", "=", "tvm", ".", "thread_axis", "(", "\"vthread\"", ")", "\n", "tx", "=", "tvm", ".", "thread_axis", "(", "\"threadIdx.x\"", ")", "\n", "ty", "=", "tvm", ".", "thread_axis", "(", "\"threadIdx.y\"", ")", "\n", "tz", "=", "tvm", ".", "thread_axis", "(", "\"threadIdx.z\"", ")", "\n", "\n", "blocks", "=", "[", "bz", ",", "by", ",", "bx", "]", "\n", "threads", "=", "[", "tz", ",", "ty", ",", "tx", "]", "\n", "vthreads", "=", "[", "vz", ",", "vy", ",", "vx", "]", "\n", "\n", "block_extents", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", "# z, y, x", "\n", "virtual_extents", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", "\n", "thread_extents", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", "\n", "\n", "bind_option", "=", "[", "None", ",", "None", ",", "None", "]", "\n", "bind_candidate", "=", "[", "blocks", ",", "vthreads", ",", "threads", "]", "\n", "candiate_extents", "=", "[", "block_extents", ",", "virtual_extents", ",", "thread_extents", "]", "\n", "\n", "# - bind", "\n", "num_parts", "=", "len", "(", "fused_parts", ")", "\n", "if", "num_parts", "==", "1", ":", "\n", "                ", "bind_option", "[", "0", "]", "=", "(", "fused_parts", "[", "0", "]", ",", "fused_part_extents", "[", "0", "]", ")", "\n", "local_pos", "=", "fused_parts", "[", "0", "]", "[", ":", "len", "(", "bind_candidate", "[", "0", "]", ")", "]", "[", "-", "1", "]", "\n", "", "elif", "num_parts", "==", "2", ":", "\n", "                ", "bind_option", "[", "0", "]", "=", "(", "fused_parts", "[", "0", "]", ",", "fused_part_extents", "[", "0", "]", ")", "\n", "bind_option", "[", "2", "]", "=", "(", "fused_parts", "[", "1", "]", ",", "fused_part_extents", "[", "1", "]", ")", "\n", "local_pos", "=", "fused_parts", "[", "1", "]", "[", ":", "len", "(", "bind_candidate", "[", "2", "]", ")", "]", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "bind_option", "[", "0", "]", "=", "(", "fused_parts", "[", "0", "]", ",", "fused_part_extents", "[", "0", "]", ")", "\n", "bind_option", "[", "1", "]", "=", "(", "fused_parts", "[", "1", "]", ",", "fused_part_extents", "[", "1", "]", ")", "\n", "bind_option", "[", "2", "]", "=", "(", "fused_parts", "[", "2", "]", ",", "fused_part_extents", "[", "2", "]", ")", "\n", "local_pos", "=", "fused_parts", "[", "2", "]", "[", ":", "len", "(", "bind_candidate", "[", "2", "]", ")", "]", "[", "-", "1", "]", "\n", "", "for", "option", ",", "candidate", ",", "extents", "in", "zip", "(", "bind_option", ",", "bind_candidate", ",", "candiate_extents", ")", ":", "\n", "                ", "if", "option", "is", "not", "None", ":", "\n", "                    ", "for", "i", ",", "axis", "in", "enumerate", "(", "option", "[", "0", "]", "[", ":", "len", "(", "candidate", ")", "]", ")", ":", "\n", "                        ", "s", "[", "op", "]", ".", "bind", "(", "axis", ",", "candidate", "[", "i", "]", ")", "\n", "extents", "[", "i", "]", "=", "option", "[", "1", "]", "[", "i", "]", "\n", "# compute at", "\n", "", "", "", "if", "\"local_pos\"", "in", "config", "and", "len", "(", "config", "[", "\"local_pos\"", "]", ")", ">", "0", ":", "\n", "                ", "local_at_part", "=", "config", "[", "\"local_pos\"", "]", "[", "0", "]", "[", "0", "]", "\n", "local_at_idx", "=", "config", "[", "\"local_pos\"", "]", "[", "0", "]", "[", "1", "]", "\n", "# index changed because of fusion", "\n", "cur_idx", "=", "fused_part_idx", "[", "local_at_part", "]", "[", "local_at_idx", "]", "\n", "local_pos", "=", "fused_parts", "[", "local_at_part", "]", "[", "cur_idx", "]", "\n", "\n", "# always compute at here", "\n", "", "s", "[", "write_cache", "]", ".", "compute_at", "(", "s", "[", "op", "]", ",", "local_pos", ")", "\n", "\n", "# reduce_split", "\n", "reduced_axes", "=", "s", "[", "write_cache", "]", ".", "op", ".", "reduce_axis", "\n", "splited_reduced_axes", "=", "[", "]", "\n", "if", "\"reduce\"", "in", "config", "and", "len", "(", "config", "[", "\"reduce\"", "]", ")", ">", "0", ":", "\n", "# to align each axis", "\n", "                ", "assert_print", "(", "len", "(", "config", "[", "\"reduce\"", "]", ")", "==", "len", "(", "reduced_axes", ")", ",", "\"align reduce failed\"", ")", "\n", "for", "axis", ",", "nparts", "in", "zip", "(", "reduced_axes", ",", "config", "[", "\"reduce\"", "]", ")", ":", "\n", "                    ", "tmp_buffer", "=", "[", "]", "\n", "for", "count", "in", "range", "(", "len", "(", "nparts", ")", "-", "1", ")", ":", "\n", "                        ", "outer", ",", "axis", "=", "s", "[", "write_cache", "]", ".", "split", "(", "axis", ",", "nparts", "=", "nparts", "[", "count", "]", ")", "\n", "tmp_buffer", ".", "append", "(", "outer", ")", "\n", "", "tmp_buffer", ".", "append", "(", "axis", ")", "\n", "splited_reduced_axes", ".", "append", "(", "tmp_buffer", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "axis", "in", "reduced_axes", ":", "\n", "                    ", "splited_reduced_axes", ".", "append", "(", "[", "axis", "]", ")", "\n", "", "", "share_pos", "=", "None", "\n", "# local_pos = None", "\n", "# if has reduce axes", "\n", "if", "len", "(", "splited_reduced_axes", ")", ">", "0", ":", "\n", "# always reorder here", "\n", "                ", "reduced_nonfuse_lsts", "=", "[", "]", "\n", "reorder_lst", "=", "[", "]", "\n", "length", "=", "len", "(", "splited_reduced_axes", "[", "0", "]", ")", "\n", "# leave the last part", "\n", "for", "count", "in", "range", "(", "length", "-", "1", ")", ":", "\n", "                    ", "tmp_buffer", "=", "[", "x", "[", "count", "]", "for", "x", "in", "splited_reduced_axes", "]", "\n", "reduced_nonfuse_lsts", ".", "append", "(", "tmp_buffer", ")", "\n", "reorder_lst", ".", "extend", "(", "tmp_buffer", ")", "\n", "# the last part", "\n", "", "last_part", "=", "[", "x", "[", "length", "-", "1", "]", "for", "x", "in", "splited_reduced_axes", "]", "\n", "spatial_remainder", "=", "s", "[", "write_cache", "]", ".", "op", ".", "axis", "\n", "# change the order of reduce axes and spatial axes", "\n", "if", "\"reorder\"", "in", "config", "and", "len", "(", "config", "[", "\"reorder\"", "]", ")", ">", "0", ":", "\n", "                    ", "pos", "=", "config", "[", "\"reorder\"", "]", "[", "0", "]", "[", "0", "]", "\n", "assert", "pos", "<", "len", "(", "spatial_remainder", ")", "\n", "tmp_buffer", "=", "[", "]", "\n", "count", "=", "len", "(", "spatial_remainder", ")", "-", "1", "\n", "while", "count", ">", "pos", ":", "\n", "                        ", "tmp_buffer", ".", "append", "(", "spatial_remainder", "[", "count", "]", ")", "\n", "count", "-=", "1", "\n", "", "p", "=", "pos", "\n", "q", "=", "len", "(", "last_part", ")", "-", "1", "\n", "while", "p", ">=", "0", "and", "q", ">=", "0", ":", "\n", "                        ", "tmp_buffer", ".", "append", "(", "spatial_remainder", "[", "p", "]", ")", "\n", "tmp_buffer", ".", "append", "(", "last_part", "[", "q", "]", ")", "\n", "p", "-=", "1", "\n", "q", "-=", "1", "\n", "", "while", "p", ">=", "0", ":", "\n", "                        ", "tmp_buffer", ".", "append", "(", "spatial_remainder", "[", "p", "]", ")", "\n", "p", "-=", "1", "\n", "", "while", "q", ">=", "0", ":", "\n", "                        ", "tmp_buffer", ".", "append", "(", "last_part", "[", "q", "]", ")", "\n", "q", "-=", "1", "\n", "", "tmp_buffer", "=", "list", "(", "reversed", "(", "tmp_buffer", ")", ")", "\n", "reorder_lst", ".", "extend", "(", "tmp_buffer", ")", "\n", "", "else", ":", "\n", "                    ", "reorder_lst", ".", "extend", "(", "last_part", ")", "\n", "reorder_lst", ".", "extend", "(", "spatial_remainder", ")", "\n", "", "s", "[", "write_cache", "]", ".", "reorder", "(", "*", "reorder_lst", ")", "\n", "# decide where to compute at", "\n", "if", "\"share_pos\"", "in", "config", "and", "len", "(", "config", "[", "\"share_pos\"", "]", ")", ">", "0", ":", "\n", "                    ", "share_at", "=", "config", "[", "\"share_pos\"", "]", "[", "0", "]", "[", "0", "]", "\n", "share_idx", "=", "config", "[", "\"share_pos\"", "]", "[", "0", "]", "[", "1", "]", "\n", "reduced_nonfuse_lsts", ".", "append", "(", "last_part", ")", "\n", "share_pos", "=", "reduced_nonfuse_lsts", "[", "share_at", "]", "[", "share_idx", "]", "\n", "", "else", ":", "\n", "                    ", "if", "length", "==", "1", ":", "\n", "                        ", "share_pos", "=", "last_part", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                        ", "mid", "=", "math", ".", "ceil", "(", "length", "/", "2.0", ")", "-", "1", "\n", "share_pos", "=", "reduced_nonfuse_lsts", "[", "mid", "]", "[", "-", "1", "]", "\n", "# local_pos = last_part[-1]", "\n", "\n", "# always cache read here", "\n", "", "", "", "if", "share_pos", "is", "not", "None", ":", "\n", "                ", "for", "share", "in", "read_cache_share_lst", ":", "\n", "                    ", "s", "[", "share", "]", ".", "compute_at", "(", "s", "[", "write_cache", "]", ",", "share_pos", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "share", "in", "read_cache_share_lst", ":", "\n", "                    ", "s", "[", "share", "]", ".", "compute_inline", "(", ")", "\n", "# if local_pos is not None:", "\n", "#     for local in read_cache_local_lst:", "\n", "#         s[local].compute_at(s[write_cache], local_pos)", "\n", "# else:", "\n", "#     for local in read_cache_local_lst:", "\n", "#         s[local].compute_inline()", "\n", "\n", "# always cooperative fetching", "\n", "", "", "if", "share_pos", "is", "not", "None", ":", "\n", "                ", "for", "share", "in", "read_cache_share_lst", ":", "\n", "                    ", "fuse_lst", "=", "s", "[", "share", "]", ".", "op", ".", "axis", "\n", "fused", "=", "s", "[", "share", "]", ".", "fuse", "(", "*", "fuse_lst", ")", "\n", "count", "=", "2", "\n", "cur", "=", "1", "\n", "limit", "=", "1024", "\n", "while", "count", ">=", "0", ":", "\n", "                        ", "factor", "=", "thread_extents", "[", "count", "]", "\n", "if", "factor", "<", "0", ":", "\n", "                            ", "defined", "=", "False", "\n", "factor", "=", "16", "\n", "", "else", ":", "\n", "                            ", "defined", "=", "True", "\n", "", "cur", "*=", "factor", "\n", "if", "not", "defined", "and", "cur", ">", "limit", ":", "\n", "                            ", "break", "\n", "", "fused", ",", "inner", "=", "s", "[", "share", "]", ".", "split", "(", "fused", ",", "factor", "=", "factor", ")", "\n", "s", "[", "share", "]", ".", "bind", "(", "inner", ",", "threads", "[", "count", "]", ")", "\n", "count", "-=", "1", "\n", "\n", "# unroll", "\n", "", "", "", "if", "\"unroll\"", "in", "config", "and", "len", "(", "config", "[", "\"unroll\"", "]", ")", ">", "0", ":", "\n", "                ", "step", "=", "config", "[", "\"unroll\"", "]", "[", "0", "]", "[", "0", "]", "\n", "explicit", "=", "config", "[", "\"unroll\"", "]", "[", "0", "]", "[", "1", "]", "\n", "s", "[", "op", "]", ".", "pragma", "(", "kernel_scope", ",", "'auto_unroll_max_step'", ",", "step", ")", "\n", "s", "[", "op", "]", ".", "pragma", "(", "kernel_scope", ",", "'unroll_explicit'", ",", "explicit", ")", "\n", "\n", "", "", "def", "_cpu_schedule_split_fuse", "(", "s", ",", "op", ",", "op_state", ")", ":", "\n", "# always cache write here", "\n", "# if op.num_outputs > 1:", "\n", "#     raise RuntimeWarning(\"Too many outputs in one operation!\")", "\n", "            ", "write_cache", "=", "s", ".", "cache_write", "(", "op", ".", "output", "(", "0", ")", ",", "\"global\"", ")", "\n", "\n", "# spatial split", "\n", "spatial_axes", "=", "s", "[", "op", "]", ".", "op", ".", "axis", "\n", "splited_spatial_axes", "=", "[", "]", "\n", "if", "\"spatial\"", "in", "config", "and", "len", "(", "config", "[", "\"spatial\"", "]", ")", ">", "0", ":", "\n", "# to align each axis", "\n", "                ", "assert_print", "(", "len", "(", "config", "[", "\"spatial\"", "]", ")", "==", "len", "(", "spatial_axes", ")", ",", "\"align failed\"", ")", "\n", "for", "axis", ",", "nparts", "in", "zip", "(", "spatial_axes", ",", "config", "[", "\"spatial\"", "]", ")", ":", "\n", "                    ", "tmp_buffer", "=", "[", "]", "\n", "for", "count", "in", "range", "(", "len", "(", "nparts", ")", "-", "1", ")", ":", "\n", "                        ", "outer", ",", "axis", "=", "s", "[", "op", "]", ".", "split", "(", "axis", ",", "nparts", "=", "nparts", "[", "count", "]", ")", "\n", "tmp_buffer", ".", "append", "(", "outer", ")", "\n", "", "tmp_buffer", ".", "append", "(", "axis", ")", "\n", "splited_spatial_axes", ".", "append", "(", "tmp_buffer", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "axis", "in", "spatial_axes", ":", "\n", "                    ", "splited_spatial_axes", ".", "append", "(", "[", "axis", "]", ")", "\n", "", "", "assert_print", "(", "len", "(", "splited_spatial_axes", ")", ">", "0", ",", "\"empty spatial axes\"", ")", "# must be non-empty", "\n", "\n", "# always reorder and fuse here", "\n", "spatial_fuse_lsts", "=", "[", "]", "\n", "spatial_fuse_extents", "=", "[", "]", "\n", "reorder_lst", "=", "[", "]", "\n", "fused_spatial_axes", "=", "[", "]", "\n", "for", "count", "in", "range", "(", "len", "(", "splited_spatial_axes", "[", "0", "]", ")", ")", ":", "\n", "                ", "tmp_buffer", "=", "[", "x", "[", "count", "]", "for", "x", "in", "splited_spatial_axes", "]", "\n", "tmp_extent", "=", "reduce", "(", "lambda", "a", ",", "b", ":", "a", "*", "b", ",", "[", "x", "[", "count", "]", "for", "x", "in", "config", "[", "\"spatial\"", "]", "]", ")", "\n", "spatial_fuse_lsts", ".", "append", "(", "tmp_buffer", ")", "\n", "spatial_fuse_extents", ".", "append", "(", "tmp_extent", ")", "\n", "reorder_lst", ".", "extend", "(", "tmp_buffer", ")", "\n", "", "s", "[", "op", "]", ".", "reorder", "(", "*", "reorder_lst", ")", "\n", "for", "fuse_lst", "in", "spatial_fuse_lsts", ":", "\n", "                ", "fused", "=", "s", "[", "op", "]", ".", "fuse", "(", "*", "fuse_lst", ")", "\n", "fused_spatial_axes", ".", "append", "(", "fused", ")", "\n", "", "kernel_scope", "=", "fused_spatial_axes", "[", "0", "]", "\n", "\n", "# always parallel here", "\n", "length", "=", "len", "(", "fused_spatial_axes", ")", "\n", "assert_print", "(", "length", ">", "0", ",", "\"empty spatial axes!\"", ")", "\n", "s", "[", "op", "]", ".", "parallel", "(", "fused_spatial_axes", "[", "0", "]", ")", "\n", "if", "length", "==", "1", ":", "\n", "                ", "thread_pos", "=", "fused_spatial_axes", "[", "0", "]", "\n", "", "if", "2", "<=", "length", "<=", "3", ":", "\n", "                ", "thread_pos", "=", "fused_spatial_axes", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "thread_pos", "=", "fused_spatial_axes", "[", "2", "]", "\n", "\n", "# always compute at here", "\n", "", "s", "[", "write_cache", "]", ".", "compute_at", "(", "s", "[", "op", "]", ",", "thread_pos", ")", "\n", "\n", "# reduce_split", "\n", "reduced_axes", "=", "s", "[", "write_cache", "]", ".", "op", ".", "reduce_axis", "\n", "splited_reduced_axes", "=", "[", "]", "\n", "if", "\"reduce\"", "in", "config", "and", "len", "(", "config", "[", "\"reduce\"", "]", ")", ">", "0", ":", "\n", "# to align each axis", "\n", "                ", "assert_print", "(", "len", "(", "config", "[", "\"reduce\"", "]", ")", "==", "len", "(", "reduced_axes", ")", ",", "\"align reduce failed\"", ")", "\n", "for", "axis", ",", "nparts", "in", "zip", "(", "reduced_axes", ",", "config", "[", "\"reduce\"", "]", ")", ":", "\n", "                    ", "tmp_buffer", "=", "[", "]", "\n", "for", "count", "in", "range", "(", "len", "(", "nparts", ")", "-", "1", ")", ":", "\n", "                        ", "outer", ",", "axis", "=", "s", "[", "write_cache", "]", ".", "split", "(", "axis", ",", "nparts", "=", "nparts", "[", "count", "]", ")", "\n", "tmp_buffer", ".", "append", "(", "outer", ")", "\n", "", "tmp_buffer", ".", "append", "(", "axis", ")", "\n", "splited_reduced_axes", ".", "append", "(", "tmp_buffer", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "axis", "in", "reduced_axes", ":", "\n", "                    ", "splited_reduced_axes", ".", "append", "(", "[", "axis", "]", ")", "\n", "\n", "# if has reduce axes", "\n", "", "", "if", "len", "(", "splited_reduced_axes", ")", ">", "0", ":", "\n", "# always reorder here", "\n", "                ", "reduced_nonfuse_lsts", "=", "[", "]", "\n", "reorder_lst", "=", "[", "]", "\n", "length", "=", "len", "(", "splited_reduced_axes", "[", "0", "]", ")", "\n", "\n", "for", "count", "in", "range", "(", "length", ")", ":", "\n", "                    ", "tmp_buffer", "=", "[", "x", "[", "count", "]", "for", "x", "in", "splited_reduced_axes", "]", "\n", "reduced_nonfuse_lsts", ".", "append", "(", "tmp_buffer", ")", "\n", "reorder_lst", ".", "extend", "(", "tmp_buffer", ")", "\n", "# change the order of reduce axes and spatial axes", "\n", "", "rlength", "=", "len", "(", "splited_reduced_axes", ")", "\n", "if", "rlength", ">", "1", ":", "\n", "                    ", "reorder_lst", ".", "extend", "(", "s", "[", "write_cache", "]", ".", "op", ".", "axis", ")", "\n", "", "elif", "rlength", "==", "1", ":", "# in this case, have to interleave otherwise the reorder is of no use", "\n", "                    ", "tmp_order", "=", "[", "]", "\n", "p_spatial", "=", "len", "(", "s", "[", "write_cache", "]", ".", "op", ".", "axis", ")", "-", "1", "\n", "p_reduce", "=", "len", "(", "reorder_lst", ")", "-", "1", "\n", "while", "p_spatial", ">=", "0", "and", "p_reduce", ">=", "0", ":", "\n", "                        ", "tmp_order", ".", "append", "(", "s", "[", "write_cache", "]", ".", "op", ".", "axis", "[", "p_spatial", "]", ")", "\n", "tmp_order", ".", "append", "(", "reorder_lst", "[", "p_reduce", "]", ")", "\n", "p_spatial", "-=", "1", "\n", "p_reduce", "-=", "1", "\n", "", "while", "p_spatial", ">=", "0", ":", "\n", "                        ", "tmp_order", ".", "append", "(", "s", "[", "write_cache", "]", ".", "op", ".", "axis", "[", "p_spatial", "]", ")", "\n", "p_spatial", "-=", "1", "\n", "", "while", "p_reduce", ">=", "0", ":", "\n", "                        ", "tmp_order", ".", "append", "(", "reorder_lst", "[", "p_reduce", "]", ")", "\n", "p_reduce", "-=", "1", "\n", "", "tmp_order", "=", "list", "(", "reversed", "(", "tmp_order", ")", ")", "\n", "reorder_lst", "=", "tmp_order", "\n", "", "s", "[", "write_cache", "]", ".", "reorder", "(", "*", "reorder_lst", ")", "\n", "\n", "# unroll", "\n", "", "if", "\"unroll\"", "in", "config", "and", "len", "(", "config", "[", "\"unroll\"", "]", ")", ">", "0", ":", "\n", "                ", "step", "=", "config", "[", "\"unroll\"", "]", "[", "0", "]", "[", "0", "]", "\n", "s", "[", "op", "]", ".", "pragma", "(", "kernel_scope", ",", "'auto_unroll_max_step'", ",", "step", ")", "\n", "\n", "# always vectorize here", "\n", "", "s", "[", "write_cache", "]", ".", "vectorize", "(", "s", "[", "write_cache", "]", ".", "op", ".", "axis", "[", "-", "1", "]", ")", "\n", "\n", "", "def", "_cpu_schedule_split_reorder_fuse", "(", "s", ",", "op", ",", "op_state", ")", ":", "\n", "# assert_print(op in s)", "\n", "\n", "            ", "loop_idx", "=", "[", "]", "\n", "loop_lst", "=", "[", "]", "\n", "\n", "# always cache write here", "\n", "# if op.num_outputs > 1:", "\n", "#     raise RuntimeWarning(\"Too many outputs in one operation!\")", "\n", "write_cache", "=", "s", ".", "cache_write", "(", "op", ".", "output", "(", "0", ")", ",", "\"local\"", ")", "\n", "\n", "# spatial split", "\n", "spatial_axes", "=", "[", "axis", "for", "axis", "in", "s", "[", "op", "]", ".", "op", ".", "axis", "]", "\n", "assert", "len", "(", "spatial_axes", ")", ">", "0", ",", "\"empty spatial axes\"", "# must be non-empty", "\n", "n", "=", "spatial_axes", "[", "0", "]", "\n", "kernel_scope", ",", "n", "=", "s", "[", "op", "]", ".", "split", "(", "n", ",", "nparts", "=", "1", ")", "\n", "spatial_axes", "[", "0", "]", "=", "n", "\n", "\n", "splited_spatial_axes", "=", "[", "]", "\n", "splited_spatial_extents", "=", "[", "]", "\n", "if", "\"spatial\"", "in", "config", "and", "len", "(", "config", "[", "\"spatial\"", "]", ")", ">", "0", ":", "\n", "# to align each axis", "\n", "                ", "assert", "len", "(", "config", "[", "\"spatial\"", "]", ")", "==", "len", "(", "spatial_axes", ")", ",", "\"align failed\"", "\n", "for", "axis", ",", "nparts", "in", "zip", "(", "spatial_axes", ",", "config", "[", "\"spatial\"", "]", ")", ":", "\n", "                    ", "tmp_buffer", "=", "[", "]", "\n", "tmp_extents", "=", "[", "]", "\n", "for", "count", "in", "range", "(", "len", "(", "nparts", ")", "-", "1", ")", ":", "\n", "                        ", "outer", ",", "axis", "=", "s", "[", "op", "]", ".", "split", "(", "axis", ",", "nparts", "=", "nparts", "[", "count", "]", ")", "\n", "tmp_buffer", ".", "append", "(", "outer", ")", "\n", "tmp_extents", ".", "append", "(", "nparts", "[", "count", "]", ")", "\n", "", "tmp_buffer", ".", "append", "(", "axis", ")", "\n", "tmp_extents", ".", "append", "(", "nparts", "[", "-", "1", "]", ")", "\n", "splited_spatial_axes", ".", "append", "(", "tmp_buffer", ")", "\n", "splited_spatial_extents", ".", "append", "(", "tmp_extents", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "axis", "in", "spatial_axes", ":", "\n", "                    ", "splited_spatial_axes", ".", "append", "(", "[", "axis", "]", ")", "\n", "splited_spatial_extents", ".", "append", "(", "[", "axis", ".", "dom", ".", "extent", ".", "value", "]", ")", "\n", "\n", "# always reorder here", "\n", "", "", "reorder_lst", "=", "[", "]", "\n", "reorder_parts", "=", "[", "]", "\n", "reorder_part_extents", "=", "[", "]", "\n", "for", "count", "in", "range", "(", "len", "(", "splited_spatial_axes", "[", "0", "]", ")", ")", ":", "\n", "                ", "tmp_buffer", "=", "[", "x", "[", "count", "]", "for", "x", "in", "splited_spatial_axes", "]", "\n", "tmp_extents", "=", "[", "x", "[", "count", "]", "for", "x", "in", "splited_spatial_extents", "]", "\n", "reorder_lst", ".", "extend", "(", "tmp_buffer", ")", "\n", "reorder_parts", ".", "append", "(", "tmp_buffer", ")", "\n", "reorder_part_extents", ".", "append", "(", "tmp_extents", ")", "\n", "", "s", "[", "op", "]", ".", "reorder", "(", "*", "reorder_lst", ")", "\n", "\n", "# handle fuse request", "\n", "fused_parts", "=", "[", "]", "\n", "fused_part_extents", "=", "[", "]", "\n", "fused_part_idx", "=", "[", "]", "\n", "if", "\"fuse\"", "in", "config", "and", "len", "(", "config", "[", "\"fuse\"", "]", ")", ">", "0", ":", "\n", "                ", "base_id", "=", "0", "\n", "for", "part", ",", "extents", "in", "zip", "(", "reorder_parts", ",", "reorder_part_extents", ")", ":", "\n", "                    ", "tmp_part", "=", "[", "]", "\n", "tmp_extents", "=", "[", "]", "\n", "tmp_idx", "=", "[", "]", "\n", "idx", "=", "0", "\n", "beg", "=", "0", "\n", "for", "end", "in", "config", "[", "\"fuse\"", "]", "[", "0", "]", ":", "\n", "                        ", "if", "end", "-", "beg", ">", "1", ":", "\n", "                            ", "fuse_lst", "=", "part", "[", "beg", ":", "end", "]", "\n", "fused", "=", "s", "[", "op", "]", ".", "fuse", "(", "*", "fuse_lst", ")", "\n", "tmp_part", ".", "append", "(", "fused", ")", "\n", "extent", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "*", "y", ",", "extents", "[", "beg", ":", "end", "]", ",", "1", ")", "\n", "tmp_idx", ".", "extend", "(", "[", "idx", "]", "*", "(", "end", "-", "beg", ")", ")", "\n", "idx", "+=", "1", "\n", "tmp_extents", ".", "append", "(", "extent", ")", "\n", "", "elif", "end", "-", "beg", "==", "1", ":", "\n", "                            ", "tmp_part", ".", "append", "(", "part", "[", "beg", "]", ")", "\n", "tmp_extents", ".", "append", "(", "extents", "[", "beg", "]", ")", "\n", "tmp_idx", ".", "append", "(", "idx", ")", "\n", "idx", "+=", "1", "\n", "", "beg", "=", "end", "\n", "", "fused_parts", ".", "append", "(", "tmp_part", ")", "\n", "fused_part_extents", ".", "append", "(", "tmp_extents", ")", "\n", "fused_part_idx", ".", "append", "(", "tmp_idx", ")", "\n", "\n", "# for op state", "\n", "loop_lst", ".", "extend", "(", "tmp_part", ")", "\n", "loop_idx", ".", "extend", "(", "[", "x", "+", "base_id", "for", "x", "in", "tmp_idx", "]", ")", "\n", "base_id", "+=", "len", "(", "tmp_part", ")", "\n", "", "", "else", ":", "\n", "                ", "fused_parts", "=", "reorder_parts", "\n", "fused_part_extents", "=", "reorder_part_extents", "\n", "fused_part_idx", "=", "[", "list", "(", "range", "(", "len", "(", "x", ")", ")", ")", "for", "x", "in", "reorder_parts", "]", "\n", "\n", "# for op state", "\n", "loop_lst", "=", "reorder_lst", "\n", "loop_idx", "=", "list", "(", "range", "(", "len", "(", "reorder_lst", ")", ")", ")", "\n", "\n", "# record op state", "\n", "", "op_state", ".", "loop_lst", "=", "loop_lst", "\n", "op_state", ".", "loop_idx", "=", "loop_idx", "\n", "\n", "# parallel", "\n", "fused", "=", "s", "[", "op", "]", ".", "fuse", "(", "*", "fused_parts", "[", "0", "]", ")", "\n", "s", "[", "op", "]", ".", "parallel", "(", "fused", ")", "\n", "\n", "# compute at", "\n", "num_parts", "=", "len", "(", "fused_parts", ")", "\n", "if", "num_parts", "==", "1", ":", "\n", "                ", "local_pos", "=", "fused", "\n", "", "elif", "num_parts", "==", "2", ":", "\n", "                ", "local_pos", "=", "fused_parts", "[", "num_parts", "-", "1", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "local_pos", "=", "fused_parts", "[", "num_parts", "-", "2", "]", "[", "-", "1", "]", "\n", "\n", "", "if", "\"local_pos\"", "in", "config", "and", "len", "(", "config", "[", "\"local_pos\"", "]", ")", ">", "0", ":", "\n", "                ", "local_at_part", "=", "config", "[", "\"local_pos\"", "]", "[", "0", "]", "[", "0", "]", "\n", "local_at_idx", "=", "config", "[", "\"local_pos\"", "]", "[", "0", "]", "[", "1", "]", "\n", "# index changed because of fusion", "\n", "cur_idx", "=", "fused_part_idx", "[", "local_at_part", "]", "[", "local_at_idx", "]", "\n", "local_pos", "=", "fused_parts", "[", "local_at_part", "]", "[", "cur_idx", "]", "\n", "\n", "# always compute at here", "\n", "", "s", "[", "write_cache", "]", ".", "compute_at", "(", "s", "[", "op", "]", ",", "local_pos", ")", "\n", "\n", "# reduce_split", "\n", "reduced_axes", "=", "s", "[", "write_cache", "]", ".", "op", ".", "reduce_axis", "\n", "splited_reduced_axes", "=", "[", "]", "\n", "if", "\"reduce\"", "in", "config", "and", "len", "(", "config", "[", "\"reduce\"", "]", ")", ">", "0", ":", "\n", "# to align each axis", "\n", "                ", "assert_print", "(", "len", "(", "config", "[", "\"reduce\"", "]", ")", "==", "len", "(", "reduced_axes", ")", ",", "\"align reduce failed\"", ")", "\n", "for", "axis", ",", "nparts", "in", "zip", "(", "reduced_axes", ",", "config", "[", "\"reduce\"", "]", ")", ":", "\n", "                    ", "tmp_buffer", "=", "[", "]", "\n", "for", "count", "in", "range", "(", "len", "(", "nparts", ")", "-", "1", ")", ":", "\n", "                        ", "outer", ",", "axis", "=", "s", "[", "write_cache", "]", ".", "split", "(", "axis", ",", "nparts", "=", "nparts", "[", "count", "]", ")", "\n", "tmp_buffer", ".", "append", "(", "outer", ")", "\n", "", "tmp_buffer", ".", "append", "(", "axis", ")", "\n", "splited_reduced_axes", ".", "append", "(", "tmp_buffer", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "axis", "in", "reduced_axes", ":", "\n", "                    ", "splited_reduced_axes", ".", "append", "(", "[", "axis", "]", ")", "\n", "\n", "# if has reduce axes", "\n", "", "", "if", "len", "(", "splited_reduced_axes", ")", ">", "0", ":", "\n", "# always reorder here", "\n", "                ", "reduced_nonfuse_lsts", "=", "[", "]", "\n", "reorder_lst", "=", "[", "]", "\n", "length", "=", "len", "(", "splited_reduced_axes", "[", "0", "]", ")", "\n", "# leave the last part", "\n", "for", "count", "in", "range", "(", "length", "-", "1", ")", ":", "\n", "                    ", "tmp_buffer", "=", "[", "x", "[", "count", "]", "for", "x", "in", "splited_reduced_axes", "]", "\n", "reduced_nonfuse_lsts", ".", "append", "(", "tmp_buffer", ")", "\n", "reorder_lst", ".", "extend", "(", "tmp_buffer", ")", "\n", "# the last part", "\n", "", "last_part", "=", "[", "x", "[", "length", "-", "1", "]", "for", "x", "in", "splited_reduced_axes", "]", "\n", "spatial_remainder", "=", "s", "[", "write_cache", "]", ".", "op", ".", "axis", "\n", "# change the order of reduce axes and spatial axes", "\n", "if", "\"reorder\"", "in", "config", "and", "len", "(", "config", "[", "\"reorder\"", "]", ")", ">", "0", ":", "\n", "                    ", "pos", "=", "config", "[", "\"reorder\"", "]", "[", "0", "]", "[", "0", "]", "\n", "assert", "pos", "<", "len", "(", "spatial_remainder", ")", "\n", "tmp_buffer", "=", "[", "]", "\n", "count", "=", "len", "(", "spatial_remainder", ")", "-", "1", "\n", "while", "count", ">", "pos", ":", "\n", "                        ", "tmp_buffer", ".", "append", "(", "spatial_remainder", "[", "count", "]", ")", "\n", "count", "-=", "1", "\n", "", "p", "=", "pos", "\n", "q", "=", "len", "(", "last_part", ")", "-", "1", "\n", "while", "p", ">=", "0", "and", "q", ">=", "0", ":", "\n", "                        ", "tmp_buffer", ".", "append", "(", "spatial_remainder", "[", "p", "]", ")", "\n", "tmp_buffer", ".", "append", "(", "last_part", "[", "q", "]", ")", "\n", "p", "-=", "1", "\n", "q", "-=", "1", "\n", "", "while", "p", ">=", "0", ":", "\n", "                        ", "tmp_buffer", ".", "append", "(", "spatial_remainder", "[", "p", "]", ")", "\n", "p", "-=", "1", "\n", "", "while", "q", ">=", "0", ":", "\n", "                        ", "tmp_buffer", ".", "append", "(", "last_part", "[", "q", "]", ")", "\n", "q", "-=", "1", "\n", "", "tmp_buffer", "=", "list", "(", "reversed", "(", "tmp_buffer", ")", ")", "\n", "reorder_lst", ".", "extend", "(", "tmp_buffer", ")", "\n", "", "else", ":", "\n", "                    ", "reorder_lst", ".", "extend", "(", "last_part", ")", "\n", "reorder_lst", ".", "extend", "(", "spatial_remainder", ")", "\n", "", "s", "[", "write_cache", "]", ".", "reorder", "(", "*", "reorder_lst", ")", "\n", "\n", "# unroll", "\n", "", "if", "\"unroll\"", "in", "config", "and", "len", "(", "config", "[", "\"unroll\"", "]", ")", ">", "0", ":", "\n", "                ", "step", "=", "config", "[", "\"unroll\"", "]", "[", "0", "]", "[", "0", "]", "\n", "explicit", "=", "config", "[", "\"unroll\"", "]", "[", "0", "]", "[", "1", "]", "\n", "s", "[", "op", "]", ".", "pragma", "(", "kernel_scope", ",", "'auto_unroll_max_step'", ",", "step", ")", "\n", "s", "[", "op", "]", ".", "pragma", "(", "kernel_scope", ",", "'unroll_explicit'", ",", "explicit", ")", "\n", "\n", "", "", "def", "_cpu_schedule_simple", "(", "s", ",", "op", ",", "op_state", ")", ":", "\n", "# always cache write here", "\n", "# if op.num_outputs > 1:", "\n", "#     raise RuntimeWarning(\"Too many outputs in one operation!\")", "\n", "            ", "write_cache", "=", "s", ".", "cache_write", "(", "op", ".", "output", "(", "0", ")", ",", "\"global\"", ")", "\n", "\n", "# spatial split", "\n", "spatial_axes", "=", "s", "[", "op", "]", ".", "op", ".", "axis", "\n", "splited_spatial_axes", "=", "[", "]", "\n", "if", "\"spatial\"", "in", "config", "and", "len", "(", "config", "[", "\"spatial\"", "]", ")", ">", "0", ":", "\n", "# to align each axis", "\n", "                ", "assert_print", "(", "len", "(", "config", "[", "\"spatial\"", "]", ")", "==", "len", "(", "spatial_axes", ")", ",", "\"align failed\"", ")", "\n", "for", "axis", ",", "nparts", "in", "zip", "(", "spatial_axes", ",", "config", "[", "\"spatial\"", "]", ")", ":", "\n", "                    ", "nfactors", "=", "[", "1", "]", "\n", "count", "=", "len", "(", "nparts", ")", "-", "1", "\n", "while", "count", ">=", "0", ":", "\n", "                        ", "nfactors", ".", "append", "(", "nparts", "[", "count", "]", "*", "nfactors", "[", "-", "1", "]", ")", "\n", "count", "-=", "1", "\n", "", "tmp_buffer", "=", "[", "]", "\n", "num_factors", "=", "len", "(", "nfactors", ")", "\n", "for", "i", "in", "range", "(", "num_factors", "-", "2", ")", ":", "\n", "                        ", "factor", "=", "nfactors", "[", "num_factors", "-", "2", "-", "i", "]", "\n", "part", "=", "nparts", "[", "i", "]", "\n", "if", "factor", "==", "1", ":", "\n", "                            ", "tmp_buffer", ".", "append", "(", "axis", ")", "\n", "axis", "=", "None", "\n", "", "elif", "part", "==", "1", ":", "\n", "                            ", "tmp_buffer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                            ", "outer", ",", "axis", "=", "s", "[", "op", "]", ".", "split", "(", "axis", ",", "factor", "=", "factor", ")", "\n", "tmp_buffer", ".", "append", "(", "outer", ")", "\n", "", "", "tmp_buffer", ".", "append", "(", "axis", ")", "\n", "splited_spatial_axes", ".", "append", "(", "tmp_buffer", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "axis", "in", "spatial_axes", ":", "\n", "                    ", "splited_spatial_axes", ".", "append", "(", "[", "axis", "]", ")", "\n", "", "", "assert_print", "(", "len", "(", "splited_spatial_axes", ")", ">", "0", ",", "\"empty spatial axes\"", ")", "# must be non-empty", "\n", "\n", "# always reorder and fuse here", "\n", "# this part actually suppose there is \"spatial\" in config", "\n", "# which is avoidable", "\n", "spatial_fuse_lsts", "=", "[", "]", "\n", "spatial_fuse_extents", "=", "[", "]", "\n", "reorder_lst", "=", "[", "]", "\n", "fused_spatial_axes", "=", "[", "]", "\n", "spatial_split_num_parts", "=", "len", "(", "splited_spatial_axes", "[", "0", "]", ")", "\n", "for", "count", "in", "range", "(", "spatial_split_num_parts", ")", ":", "\n", "                ", "tmp_buffer", "=", "[", "x", "[", "count", "]", "for", "x", "in", "splited_spatial_axes", "]", "\n", "tmp_extent", "=", "reduce", "(", "lambda", "a", ",", "b", ":", "a", "*", "b", ",", "[", "x", "[", "count", "]", "for", "x", "in", "config", "[", "\"spatial\"", "]", "]", ")", "\n", "spatial_fuse_lsts", ".", "append", "(", "tmp_buffer", ")", "\n", "spatial_fuse_extents", ".", "append", "(", "tmp_extent", ")", "\n", "reorder_lst", ".", "extend", "(", "tmp_buffer", ")", "\n", "", "reorder_lst_without_none", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "reorder_lst", ")", ")", "\n", "# print(\"reorder op\", reorder_lst_without_none)", "\n", "s", "[", "op", "]", ".", "reorder", "(", "*", "reorder_lst_without_none", ")", "\n", "for", "fuse_lst", "in", "spatial_fuse_lsts", "[", ":", "1", "]", ":", "\n", "                ", "tmp_buffer", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "fuse_lst", ")", ")", "\n", "# print(\"fuse op\", tmp_buffer)", "\n", "fused", "=", "s", "[", "op", "]", ".", "fuse", "(", "*", "tmp_buffer", ")", "\n", "fused_spatial_axes", ".", "append", "(", "fused", ")", "\n", "", "kernel_scope", "=", "fused_spatial_axes", "[", "0", "]", "\n", "if", "len", "(", "spatial_fuse_lsts", ")", ">", "1", ":", "\n", "                ", "count", "=", "0", "\n", "while", "config", "[", "\"spatial\"", "]", "[", "count", "]", "[", "1", "]", "==", "1", ":", "\n", "                    ", "count", "+=", "1", "\n", "", "next_pos_for_comptue_at", "=", "spatial_fuse_lsts", "[", "1", "]", "[", "count", "]", "\n", "", "else", ":", "\n", "                ", "next_pos_for_comptue_at", "=", "kernel_scope", "\n", "\n", "# always parallel here", "\n", "", "s", "[", "op", "]", ".", "parallel", "(", "kernel_scope", ")", "\n", "\n", "# vectorize", "\n", "if", "len", "(", "spatial_fuse_lsts", ")", "==", "2", ":", "\n", "                ", "count", "=", "len", "(", "spatial_fuse_lsts", "[", "1", "]", ")", "-", "1", "\n", "while", "count", ">=", "1", ":", "\n", "                    ", "if", "spatial_fuse_lsts", "[", "1", "]", "[", "count", "]", "is", "not", "None", "and", "config", "[", "\"spatial\"", "]", "[", "1", "]", "[", "count", "]", ">", "1", ":", "\n", "# print(\"vectorize op\", spatial_fuse_lsts[1][count])", "\n", "                        ", "s", "[", "op", "]", ".", "vectorize", "(", "spatial_fuse_lsts", "[", "1", "]", "[", "count", "]", ")", "\n", "break", "\n", "", "count", "-=", "1", "\n", "", "", "elif", "len", "(", "spatial_fuse_lsts", ")", ">", "2", ":", "\n", "                ", "count", "=", "len", "(", "spatial_fuse_lsts", "[", "-", "1", "]", ")", "-", "1", "\n", "while", "count", ">=", "0", ":", "\n", "                    ", "if", "spatial_fuse_lsts", "[", "-", "1", "]", "[", "count", "]", "is", "not", "None", "and", "config", "[", "\"spatial\"", "]", "[", "count", "]", "[", "-", "1", "]", ">", "1", ":", "\n", "# print(\"vectorize op\", spatial_fuse_lsts[-1][count])", "\n", "                        ", "s", "[", "op", "]", ".", "vectorize", "(", "spatial_fuse_lsts", "[", "-", "1", "]", "[", "count", "]", ")", "\n", "break", "\n", "", "count", "-=", "1", "\n", "\n", "# always compute at here", "\n", "# print(\"compute at\", next_pos_for_comptue_at)", "\n", "", "", "s", "[", "write_cache", "]", ".", "compute_at", "(", "s", "[", "op", "]", ",", "next_pos_for_comptue_at", ")", "\n", "\n", "# spatial_split for write cache", "\n", "spatial_axes", "=", "s", "[", "write_cache", "]", ".", "op", ".", "axis", "\n", "num_spatial_axes", "=", "len", "(", "spatial_axes", ")", "\n", "splited_spatial_axes", "=", "[", "]", "\n", "if", "\"spatial\"", "in", "config", "and", "len", "(", "config", "[", "\"spatial\"", "]", ")", ">", "0", ":", "\n", "# to align each axis", "\n", "                ", "assert_print", "(", "len", "(", "config", "[", "\"spatial\"", "]", ")", "==", "len", "(", "spatial_axes", ")", ",", "\"align failed\"", ")", "\n", "for", "axis", ",", "nparts", "in", "zip", "(", "spatial_axes", ",", "config", "[", "\"spatial\"", "]", ")", ":", "\n", "                    ", "nfactors", "=", "[", "1", "]", "\n", "count", "=", "len", "(", "nparts", ")", "-", "1", "\n", "while", "count", ">=", "0", ":", "\n", "                        ", "nfactors", ".", "append", "(", "nparts", "[", "count", "]", "*", "nfactors", "[", "-", "1", "]", ")", "\n", "count", "-=", "1", "\n", "", "tmp_buffer", "=", "[", "]", "\n", "num_factors", "=", "len", "(", "nfactors", ")", "\n", "for", "i", "in", "range", "(", "num_factors", "-", "2", ")", ":", "\n", "                        ", "factor", "=", "nfactors", "[", "num_factors", "-", "2", "-", "i", "]", "\n", "part", "=", "nparts", "[", "i", "]", "\n", "if", "factor", "==", "1", ":", "\n", "                            ", "tmp_buffer", ".", "append", "(", "axis", ")", "\n", "axis", "=", "None", "\n", "", "elif", "part", "==", "1", ":", "\n", "                            ", "tmp_buffer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                            ", "outer", ",", "axis", "=", "s", "[", "write_cache", "]", ".", "split", "(", "axis", ",", "factor", "=", "factor", ")", "\n", "tmp_buffer", ".", "append", "(", "outer", ")", "\n", "", "", "tmp_buffer", ".", "append", "(", "axis", ")", "\n", "splited_spatial_axes", ".", "append", "(", "tmp_buffer", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "axis", "in", "spatial_axes", ":", "\n", "                    ", "splited_spatial_axes", ".", "append", "(", "[", "axis", "]", ")", "\n", "", "", "assert_print", "(", "len", "(", "splited_spatial_axes", ")", ">", "0", ",", "\"empty spatial axes\"", ")", "# must be non-empty", "\n", "\n", "# reduce_split for write cache", "\n", "reduced_axes", "=", "s", "[", "write_cache", "]", ".", "op", ".", "reduce_axis", "\n", "num_reduce_axes", "=", "len", "(", "reduced_axes", ")", "\n", "splited_reduced_axes", "=", "[", "]", "\n", "if", "\"reduce\"", "in", "config", "and", "len", "(", "config", "[", "\"reduce\"", "]", ")", ">", "0", ":", "\n", "# to align each axis", "\n", "                ", "assert_print", "(", "len", "(", "config", "[", "\"reduce\"", "]", ")", "==", "len", "(", "reduced_axes", ")", ",", "\"align reduce failed\"", ")", "\n", "for", "axis", ",", "nparts", "in", "zip", "(", "reduced_axes", ",", "config", "[", "\"reduce\"", "]", ")", ":", "\n", "                    ", "nfactors", "=", "[", "1", "]", "\n", "count", "=", "len", "(", "nparts", ")", "-", "1", "\n", "while", "count", ">=", "0", ":", "\n", "                        ", "nfactors", ".", "append", "(", "nparts", "[", "count", "]", "*", "nfactors", "[", "-", "1", "]", ")", "\n", "count", "-=", "1", "\n", "", "tmp_buffer", "=", "[", "]", "\n", "num_factors", "=", "len", "(", "nfactors", ")", "\n", "for", "i", "in", "range", "(", "num_factors", "-", "2", ")", ":", "\n", "                        ", "factor", "=", "nfactors", "[", "num_factors", "-", "2", "-", "i", "]", "\n", "part", "=", "nparts", "[", "i", "]", "\n", "if", "factor", "==", "1", ":", "\n", "                            ", "tmp_buffer", ".", "append", "(", "axis", ")", "\n", "axis", "=", "None", "\n", "", "elif", "part", "==", "1", ":", "\n", "                            ", "tmp_buffer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                            ", "outer", ",", "axis", "=", "s", "[", "write_cache", "]", ".", "split", "(", "axis", ",", "factor", "=", "factor", ")", "\n", "tmp_buffer", ".", "append", "(", "outer", ")", "\n", "", "", "tmp_buffer", ".", "append", "(", "axis", ")", "\n", "splited_reduced_axes", ".", "append", "(", "tmp_buffer", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "axis", "in", "reduced_axes", ":", "\n", "                    ", "splited_reduced_axes", ".", "append", "(", "[", "axis", "]", ")", "\n", "\n", "# for easy align", "\n", "", "", "reduce_split_num_parts", "=", "len", "(", "splited_reduced_axes", "[", "0", "]", ")", "\n", "assert", "reduce_split_num_parts", "==", "spatial_split_num_parts", "\n", "\n", "# reorder hybrid for spatial and reduce", "\n", "hybrid_axes", "=", "splited_spatial_axes", "+", "splited_reduced_axes", "\n", "hybrid_fuse_lsts", "=", "[", "]", "\n", "hybrid_reorder_lst", "=", "[", "]", "\n", "for", "count", "in", "range", "(", "spatial_split_num_parts", ")", ":", "\n", "                ", "tmp_buffer", "=", "[", "x", "[", "count", "]", "for", "x", "in", "hybrid_axes", "]", "\n", "hybrid_fuse_lsts", ".", "append", "(", "tmp_buffer", ")", "\n", "hybrid_reorder_lst", ".", "extend", "(", "tmp_buffer", ")", "\n", "", "if", "len", "(", "hybrid_fuse_lsts", ")", ">", "1", ":", "\n", "                ", "last_parts", "=", "hybrid_reorder_lst", "[", "-", "num_spatial_axes", "-", "num_reduce_axes", ":", "]", "\n", "hybrid_reorder_lst", "=", "hybrid_reorder_lst", "[", ":", "-", "num_spatial_axes", "-", "num_reduce_axes", "]", "\n", "tmp_buffer", "=", "last_parts", "[", "-", "num_reduce_axes", ":", "]", "\n", "tmp_buffer", ".", "extend", "(", "last_parts", "[", ":", "-", "num_reduce_axes", "]", ")", "\n", "hybrid_reorder_lst", ".", "extend", "(", "tmp_buffer", ")", "\n", "", "hybrid_reorder_lst_without_none", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "hybrid_reorder_lst", ")", ")", "\n", "# print(\"reorder cache write\", hybrid_reorder_lst_without_none)", "\n", "s", "[", "write_cache", "]", ".", "reorder", "(", "*", "hybrid_reorder_lst_without_none", ")", "\n", "\n", "# fuse without reduce axes", "\n", "# assert len(hybrid_fuse_lsts) > 0", "\n", "# s[write_cache].fuse(*hybrid_fuse_lsts[0][:-num_reduce_axes])", "\n", "\n", "# unroll and vectorize without reduce axes", "\n", "if", "len", "(", "hybrid_fuse_lsts", ")", ">", "1", ":", "\n", "                ", "rcount", "=", "num_spatial_axes", "-", "1", "\n", "while", "config", "[", "\"spatial\"", "]", "[", "rcount", "]", "[", "-", "1", "]", "==", "1", ":", "\n", "                    ", "rcount", "-=", "1", "\n", "", "if", "rcount", ">=", "0", ":", "\n", "# print(\"vectorize cache write\", hybrid_fuse_lsts[-1][rcount])", "\n", "                    ", "s", "[", "write_cache", "]", ".", "vectorize", "(", "hybrid_fuse_lsts", "[", "-", "1", "]", "[", "rcount", "]", ")", "\n", "", "for", "count", "in", "range", "(", "rcount", ")", ":", "\n", "                    ", "if", "config", "[", "\"spatial\"", "]", "[", "count", "]", "[", "-", "1", "]", ">", "1", ":", "\n", "# print(\"unroll cache write\", hybrid_fuse_lsts[-1][count])", "\n", "                        ", "s", "[", "write_cache", "]", ".", "unroll", "(", "hybrid_fuse_lsts", "[", "-", "1", "]", "[", "count", "]", ")", "\n", "", "", "", "if", "len", "(", "hybrid_fuse_lsts", ")", ">", "2", ":", "\n", "                ", "for", "count", "in", "range", "(", "num_spatial_axes", ")", ":", "\n", "                    ", "if", "config", "[", "\"spatial\"", "]", "[", "count", "]", "[", "-", "2", "]", ">", "1", ":", "\n", "# print(\"unroll cache write\", hybrid_fuse_lsts[-2][count])", "\n", "                        ", "s", "[", "write_cache", "]", ".", "unroll", "(", "hybrid_fuse_lsts", "[", "-", "2", "]", "[", "count", "]", ")", "\n", "# for count in range(num_reduce_axes):", "\n", "#     if config[\"reduce\"][count][-2] > 1:", "\n", "#         print(\"unroll cache write\", hybrid_fuse_lsts[-2][count + num_spatial_axes])", "\n", "#         s[write_cache].unroll(hybrid_fuse_lsts[-2][count + num_spatial_axes])", "\n", "\n", "", "", "", "", "def", "_micro_schedule_simple", "(", "s", ",", "op", ",", "op_state", ")", ":", "\n", "# prepare extents", "\n", "            ", "sp_extents", "=", "[", "to_int", "(", "x", ".", "dom", ".", "extent", ")", "for", "x", "in", "op", ".", "axis", "]", "\n", "if", "hasattr", "(", "op", ",", "\"reduce_axis\"", ")", ":", "\n", "                ", "re_extents", "=", "[", "to_int", "(", "x", ".", "dom", ".", "extent", ")", "for", "x", "in", "op", ".", "reduce_axis", "]", "\n", "", "else", ":", "\n", "                ", "re_extents", "=", "[", "]", "\n", "\n", "", "INTRIN_TABLE", "=", "get_intrin_table", "(", ")", "\n", "if", "\"intrin\"", "in", "config", ":", "\n", "                ", "target", ",", "ind", ",", "slist", ",", "rlist", "=", "config", "[", "\"intrin\"", "]", "[", "0", "]", "\n", "intrin", "=", "INTRIN_TABLE", "[", "target", "]", "[", "ind", "]", "\n", "", "else", ":", "\n", "                ", "intrin", "=", "None", "\n", "s_list", "=", "[", "]", "\n", "r_list", "=", "[", "]", "\n", "\n", "", "sp_factors", "=", "[", "]", "\n", "re_factors", "=", "[", "]", "\n", "# spatial split", "\n", "if", "\"spatial\"", "in", "config", ":", "\n", "                ", "sub_sp_axis_list", "=", "[", "]", "\n", "for", "axis", ",", "f_list", "in", "zip", "(", "s", "[", "op", "]", ".", "op", ".", "axis", ",", "config", "[", "\"spatial\"", "]", ")", ":", "\n", "                    ", "split_list", "=", "[", "]", "\n", "for", "factor", "in", "f_list", "[", ":", "-", "1", "]", ":", "\n", "                        ", "outer", ",", "axis", "=", "s", "[", "op", "]", ".", "split", "(", "axis", ",", "nparts", "=", "factor", ")", "\n", "split_list", ".", "append", "(", "outer", ")", "\n", "", "sp_factors", ".", "append", "(", "f_list", "[", "-", "1", "]", ")", "\n", "split_list", ".", "append", "(", "axis", ")", "\n", "sub_sp_axis_list", ".", "append", "(", "split_list", ")", "\n", "", "", "else", ":", "\n", "                ", "sub_sp_axis_list", "=", "[", "[", "axis", "]", "for", "axis", "in", "s", "[", "op", "]", ".", "op", ".", "axis", "]", "\n", "sp_factors", "=", "sp_extents", "\n", "# reduce split", "\n", "", "if", "\"reduce\"", "in", "config", "and", "hasattr", "(", "op", ",", "\"reduce_axis\"", ")", ":", "\n", "                ", "sub_re_axis_list", "=", "[", "]", "\n", "for", "axis", ",", "f_list", "in", "zip", "(", "s", "[", "op", "]", ".", "op", ".", "reduce_axis", ",", "config", "[", "\"reduce\"", "]", ")", ":", "\n", "                    ", "split_list", "=", "[", "]", "\n", "for", "factor", "in", "f_list", "[", ":", "-", "1", "]", ":", "\n", "                        ", "outer", ",", "axis", "=", "s", "[", "op", "]", ".", "split", "(", "axis", ",", "nparts", "=", "factor", ")", "\n", "split_list", ".", "append", "(", "outer", ")", "\n", "", "re_factors", ".", "append", "(", "f_list", "[", "-", "1", "]", ")", "\n", "split_list", ".", "append", "(", "axis", ")", "\n", "sub_re_axis_list", ".", "append", "(", "split_list", ")", "\n", "", "", "elif", "hasattr", "(", "op", ",", "\"reduce_axis\"", ")", ":", "\n", "                ", "sub_re_axis_list", "=", "[", "[", "axis", "]", "for", "axis", "in", "s", "[", "op", "]", ".", "op", ".", "reduce_axis", "]", "\n", "re_factors", "=", "re_extents", "\n", "", "else", ":", "\n", "                ", "sub_re_axis_list", "=", "[", "]", "\n", "\n", "# match intrinsic", "\n", "", "def", "rearrange", "(", "lst", ")", ":", "\n", "                ", "return", "list", "(", "zip", "(", "*", "lst", ")", ")", "\n", "\n", "", "sub_sp_axis_list", "=", "rearrange", "(", "sub_sp_axis_list", ")", "\n", "sub_re_axis_list", "=", "rearrange", "(", "sub_re_axis_list", ")", "\n", "\n", "num_sp", "=", "len", "(", "sub_sp_axis_list", ")", "-", "1", "\n", "num_re", "=", "len", "(", "sub_re_axis_list", ")", "-", "1", "\n", "\n", "# inner-most", "\n", "inner_most", "=", "[", "sub_sp_axis_list", "[", "num_sp", "]", "]", "\n", "if", "num_re", ">=", "0", ":", "\n", "                ", "inner_most", ".", "append", "(", "sub_re_axis_list", "[", "num_re", "]", ")", "\n", "# do intrinsic", "\n", "", "if", "intrin", "is", "not", "None", ":", "\n", "                ", "visit_sp", "=", "[", "False", "for", "x", "in", "inner_most", "[", "0", "]", "]", "\n", "if", "num_re", ">=", "0", ":", "\n", "                    ", "visit_re", "=", "[", "False", "for", "x", "in", "inner_most", "[", "1", "]", "]", "\n", "", "else", ":", "\n", "                    ", "visit_re", "=", "[", "]", "\n", "", "intrin_sp_list", "=", "[", "]", "\n", "intrin_re_list", "=", "[", "]", "\n", "intrin_sp_extents", "=", "[", "]", "\n", "intrin_re_extents", "=", "[", "]", "\n", "intrin_sp_factors", "=", "[", "]", "\n", "intrin_re_factors", "=", "[", "]", "\n", "\n", "for", "ind", "in", "slist", ":", "\n", "                    ", "intrin_sp_list", ".", "append", "(", "inner_most", "[", "0", "]", "[", "ind", "]", ")", "\n", "visit_sp", "[", "ind", "]", "=", "True", "\n", "intrin_sp_extents", ".", "append", "(", "sp_extents", "[", "ind", "]", ")", "\n", "intrin_sp_factors", ".", "append", "(", "sp_factors", "[", "ind", "]", ")", "\n", "", "for", "ind", "in", "rlist", ":", "\n", "                    ", "intrin_re_list", ".", "append", "(", "inner_most", "[", "1", "]", "[", "ind", "]", ")", "\n", "visit_re", "[", "ind", "]", "=", "True", "\n", "intrin_re_extents", ".", "append", "(", "re_extents", "[", "ind", "]", ")", "\n", "intrin_re_factors", ".", "append", "(", "re_factors", "[", "ind", "]", ")", "\n", "", "left_sp_axis_list", "=", "[", "]", "\n", "for", "i", ",", "val", "in", "enumerate", "(", "visit_sp", ")", ":", "\n", "                    ", "if", "not", "val", ":", "\n", "                        ", "left_sp_axis_list", ".", "append", "(", "inner_most", "[", "0", "]", "[", "i", "]", ")", "\n", "", "", "left_re_axis_list", "=", "[", "]", "\n", "for", "i", ",", "val", "in", "enumerate", "(", "visit_re", ")", ":", "\n", "                    ", "if", "not", "val", ":", "\n", "                        ", "left_re_axis_list", ".", "append", "(", "inner_most", "[", "1", "]", "[", "i", "]", ")", "\n", "\n", "# reorder", "\n", "# spatial must before reduce", "\n", "", "", "to_reorder", "=", "[", "]", "\n", "for", "parts", "in", "sub_sp_axis_list", "[", ":", "-", "1", "]", ":", "\n", "                    ", "to_reorder", ".", "extend", "(", "parts", ")", "\n", "", "to_reorder", ".", "extend", "(", "left_sp_axis_list", ")", "\n", "for", "parts", "in", "sub_re_axis_list", "[", ":", "-", "1", "]", ":", "\n", "                    ", "to_reorder", ".", "extend", "(", "parts", ")", "\n", "", "to_reorder", ".", "extend", "(", "left_re_axis_list", ")", "\n", "to_reorder", ".", "extend", "(", "intrin_sp_list", ")", "\n", "to_reorder", ".", "extend", "(", "intrin_re_list", ")", "\n", "s", "[", "op", "]", ".", "reorder", "(", "*", "to_reorder", ")", "\n", "\n", "# tensorize", "\n", "intrinsic", "=", "intrin", ".", "intrin", "(", "*", "(", "\n", "intrin_sp_extents", "+", "\n", "intrin_re_extents", "+", "\n", "intrin_sp_factors", "+", "\n", "intrin_re_factors", "+", "\n", "intrin_sp_list", "+", "\n", "intrin_re_list", ")", ")", "\n", "s", "[", "op", "]", ".", "tensorize", "(", "intrin_sp_list", "[", "0", "]", ",", "intrinsic", ")", "\n", "\n", "# do fence", "\n", "s", "[", "op", "]", ".", "pragma", "(", "to_reorder", "[", "0", "]", ",", "\"epilogue\"", ",", "\"do_fence\"", ")", "\n", "", "else", ":", "\n", "                ", "to_reorder", "=", "[", "]", "\n", "while", "num_sp", ">=", "0", "and", "num_re", ">=", "0", ":", "\n", "                    ", "to_reorder", ".", "append", "(", "sub_sp_axis_list", "[", "num_sp", "]", "+", "sub_re_axis_list", "[", "num_re", "]", ")", "\n", "num_sp", "-=", "1", "\n", "num_re", "-=", "1", "\n", "", "while", "num_sp", ">=", "0", ":", "\n", "                    ", "to_reorder", ".", "append", "(", "sub_sp_axis_list", "[", "num_sp", "]", ")", "\n", "num_sp", "-=", "1", "\n", "", "while", "num_re", ">=", "0", ":", "\n", "                    ", "to_reorder", ".", "append", "(", "sub_re_axis_list", "[", "num_re", "]", ")", "\n", "num_re", "-=", "1", "\n", "", "to_reorder", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "reversed", "(", "to_reorder", ")", ",", "[", "]", ")", "\n", "s", "[", "op", "]", ".", "reorder", "(", "*", "to_reorder", ")", "\n", "\n", "", "", "def", "_micro_schedule_split_reorder", "(", "s", ",", "op", ",", "op_state", ")", ":", "\n", "            ", "sp_exts", "=", "[", "int", "(", "x", ".", "dom", ".", "extent", ")", "for", "x", "in", "op", ".", "axis", "]", "\n", "re_exts", "=", "[", "int", "(", "x", ".", "dom", ".", "extent", ")", "for", "x", "in", "op", ".", "reduce_axis", "]", "\n", "\n", "intrin", "=", "None", "\n", "sp_intrin_idx_lst", ",", "re_intrin_idx_lst", "=", "[", "]", ",", "[", "]", "\n", "INTRIN_TABLE", "=", "get_intrin_table", "(", ")", "\n", "if", "\"intrin\"", "in", "config", ":", "\n", "                ", "target", ",", "ind", ",", "sp_intrin_idx_lst", ",", "re_intrin_idx_lst", "=", "config", "[", "\"intrin\"", "]", "[", "0", "]", "\n", "intrin", "=", "INTRIN_TABLE", "[", "target", "]", "[", "ind", "]", "\n", "\n", "", "def", "gen_split", "(", "cfg_key", ",", "axes", ")", ":", "\n", "                ", "sub_axes", "=", "[", "]", "\n", "inner_exts", "=", "[", "]", "\n", "if", "cfg_key", "in", "config", "and", "len", "(", "config", "[", "cfg_key", "]", ")", ">", "0", ":", "\n", "                    ", "for", "i", ",", "(", "axis", ",", "factors", ")", "in", "enumerate", "(", "zip", "(", "axes", ",", "config", "[", "cfg_key", "]", ")", ")", ":", "\n", "                        ", "splits", "=", "[", "]", "\n", "for", "f", "in", "factors", "[", ":", "-", "1", "]", ":", "\n", "                            ", "outer", ",", "axis", "=", "s", "[", "op", "]", ".", "split", "(", "axis", ",", "nparts", "=", "f", ")", "\n", "splits", ".", "append", "(", "outer", ")", "\n", "", "splits", ".", "append", "(", "axis", ")", "\n", "inner_exts", ".", "append", "(", "factors", "[", "-", "1", "]", ")", "\n", "sub_axes", ".", "append", "(", "splits", ")", "\n", "", "", "else", ":", "\n", "                    ", "sub_axes", "=", "[", "[", "x", "]", "for", "x", "in", "axes", "]", "\n", "inner_exts", "=", "[", "[", "x", ".", "dom", ".", "extent", "]", "for", "x", "in", "axes", "]", "\n", "\n", "", "return", "sub_axes", ",", "inner_exts", "\n", "\n", "", "def", "partition", "(", "sub_axes", ",", "intrin_idx_lst", ")", ":", "\n", "                ", "outer_axes", ",", "intrin_axes", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "axes", "in", "enumerate", "(", "sub_axes", ")", ":", "\n", "                    ", "if", "i", "in", "intrin_idx_lst", ":", "\n", "                        ", "outer_axes", ".", "extend", "(", "axes", "[", ":", "-", "1", "]", ")", "\n", "intrin_axes", ".", "append", "(", "axes", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                        ", "outer_axes", ".", "extend", "(", "axes", ")", "\n", "\n", "", "", "return", "outer_axes", ",", "intrin_axes", "\n", "\n", "", "sp_sub_axes", ",", "sp_inner_exts", "=", "gen_split", "(", "\"spatial\"", ",", "s", "[", "op", "]", ".", "op", ".", "axis", ")", "\n", "re_sub_axes", ",", "re_inner_exts", "=", "gen_split", "(", "\"reduce\"", ",", "s", "[", "op", "]", ".", "op", ".", "reduce_axis", ")", "\n", "\n", "sp_outer_axes", ",", "sp_intrin_axes", "=", "partition", "(", "sp_sub_axes", ",", "sp_intrin_idx_lst", ")", "\n", "re_outer_axes", ",", "re_intrin_axes", "=", "partition", "(", "re_sub_axes", ",", "re_intrin_idx_lst", ")", "\n", "\n", "outer_axes", "=", "sp_outer_axes", "+", "re_outer_axes", "\n", "intrin_axes", "=", "sp_intrin_axes", "+", "re_intrin_axes", "\n", "\n", "if", "\"reorder\"", "in", "config", "and", "len", "(", "config", "[", "\"reorder\"", "]", ")", ">", "0", ":", "\n", "                ", "shift_step", "=", "config", "[", "\"reorder\"", "]", "[", "0", "]", "[", "0", "]", "\n", "assert", "shift_step", "<", "len", "(", "outer_axes", ")", "\n", "outer_axes", "=", "shift", "(", "sp_outer_axes", ",", "re_outer_axes", ",", "shift_step", ")", "\n", "\n", "", "s", "[", "op", "]", ".", "reorder", "(", "*", "outer_axes", ",", "*", "intrin_axes", ")", "\n", "\n", "intrinsic", "=", "intrin", ".", "intrin", "(", "\n", "*", "[", "sp_exts", "[", "i", "]", "for", "i", "in", "sp_intrin_idx_lst", "]", ",", "\n", "*", "[", "re_exts", "[", "i", "]", "for", "i", "in", "re_intrin_idx_lst", "]", ",", "\n", "*", "[", "sp_inner_exts", "[", "i", "]", "for", "i", "in", "sp_intrin_idx_lst", "]", ",", "\n", "*", "[", "re_inner_exts", "[", "i", "]", "for", "i", "in", "re_intrin_idx_lst", "]", ",", "\n", "*", "[", "sp_outer_axes", "[", "i", "]", "for", "i", "in", "sp_intrin_idx_lst", "]", ",", "\n", "*", "[", "re_outer_axes", "[", "i", "]", "for", "i", "in", "re_intrin_idx_lst", "]", "\n", ")", "\n", "s", "[", "op", "]", ".", "tensorize", "(", "intrin_axes", "[", "0", "]", ",", "intrinsic", ")", "\n", "s", "[", "op", "]", ".", "pragma", "(", "outer_axes", "[", "0", "]", ",", "\"epilogue\"", ",", "\"do_fence\"", ")", "\n", "\n", "", "if", "target", "==", "\"cuda\"", ":", "\n", "# if hint == \"split_fuse\":", "\n", "#     print(hint)", "\n", "#     return _cuda_schedule_split_fuse", "\n", "# elif hint == \"fuse_split\":", "\n", "#     print(hint)", "\n", "#     return _cuda_schedule_fuse_split", "\n", "# else:", "\n", "#     raise RuntimeError(\"Unknown hint: %s\" % hint)", "\n", "            ", "return", "_cuda_schedule_split_reorder_fuse", "\n", "", "elif", "target", "==", "\"llvm\"", ":", "\n", "            ", "return", "_cpu_schedule_simple", "\n", "", "elif", "target", "==", "\"micro\"", ":", "\n", "# return _micro_schedule_simple", "\n", "            ", "return", "_micro_schedule_split_reorder", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Currently no support for target %s\"", "%", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Rewriter.__init__": [[2160, 2163], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "self", ".", "graph_config", "=", "configs", ".", "graph_config", "\n", "self", ".", "op_config_lst", "=", "configs", ".", "op_config_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Rewriter.rewrite": [[2164, 2195], ["copy.deepcopy", "copy.deepcopy", "new_config[].append", "new_config[].insert", "conv2d_nchwc_layout", "len", "len"], "methods", ["None"], ["", "def", "rewrite", "(", "self", ",", "task", ")", ":", "\n", "        ", "\"\"\"\n        this is a hard code manner,\n        we don't know how to generalize this change\n        because it even need compute rewrite and schedule rewrite\n        \"\"\"", "\n", "assert", "task", ".", "target", "==", "\"llvm\"", ",", "\"Only rewrite for CPU\"", "\n", "assert", "task", ".", "category", "==", "\"conv2d\"", "\n", "# schedule rewrite", "\n", "import", "copy", "\n", "new_graph_config", "=", "copy", ".", "deepcopy", "(", "self", ".", "graph_config", ")", "\n", "new_op_config_lst", "=", "copy", ".", "deepcopy", "(", "self", ".", "op_config_lst", ")", "\n", "# must compute inline as original config may split channel differently", "\n", "new_graph_config", "[", "\"inline\"", "]", "=", "[", "[", "1", ",", "0", "]", "]", "\n", "# fetch conv config", "\n", "conv_config", "=", "self", ".", "op_config_lst", "[", "1", "]", "\n", "new_config", "=", "new_op_config_lst", "[", "1", "]", "\n", "# change out_channel config", "\n", "vlen1", "=", "conv_config", "[", "\"reduce\"", "]", "[", "0", "]", "[", "-", "1", "]", "\n", "vlen2", "=", "conv_config", "[", "\"spatial\"", "]", "[", "1", "]", "[", "-", "1", "]", "\n", "new_config", "[", "\"spatial\"", "]", ".", "append", "(", "[", "1", "]", "*", "len", "(", "new_config", "[", "\"spatial\"", "]", "[", "0", "]", ")", ")", "\n", "new_config", "[", "\"spatial\"", "]", "[", "-", "1", "]", "[", "-", "1", "]", "=", "vlen2", "\n", "new_config", "[", "\"spatial\"", "]", "[", "1", "]", "[", "-", "1", "]", "=", "1", "\n", "new_config", "[", "\"reduce\"", "]", "[", "0", "]", "[", "-", "1", "]", "=", "1", "\n", "new_config", "[", "\"reduce\"", "]", ".", "insert", "(", "1", ",", "[", "1", "]", "*", "len", "(", "new_config", "[", "\"reduce\"", "]", "[", "0", "]", ")", ")", "\n", "new_config", "[", "\"reduce\"", "]", "[", "1", "]", "[", "-", "1", "]", "=", "vlen1", "\n", "# compute rewrite", "\n", "from", "flextensor", ".", "task", "import", "conv2d_nchwc_layout", "\n", "kwargs", "=", "{", "\"vlen1\"", ":", "vlen1", ",", "\"vlen2\"", ":", "vlen2", "}", "\n", "ops", ",", "bufs", "=", "conv2d_nchwc_layout", "(", "*", "task", ".", "args", ",", "**", "kwargs", ")", "\n", "return", "ops", ",", "bufs", ",", "new_graph_config", ",", "new_op_config_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.GraphScheduler.__init__": [[2198, 2202], ["scheduler.Scheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.BenchmarkCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_key", ",", "space", ",", "decay", "=", "0.7", ",", "parallel", "=", "10", ",", "timeout", "=", "4.0", ",", "trial", "=", "100", ",", "number", "=", "1", ",", "early_stop", "=", "30", ",", "\n", "rpc_info", "=", "None", ",", "rewrite", "=", "False", ")", ":", "\n", "        ", "super", "(", "GraphScheduler", ",", "self", ")", ".", "__init__", "(", "\"graph\"", ",", "task_key", ",", "space", ",", "parallel", ",", "timeout", ",", "trial", ",", "number", ",", "early_stop", ",", "\n", "rpc_info", ",", "rewrite", "=", "rewrite", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.GraphScheduler.schedule": [[2203, 2214], ["scheduler.GraphScheduler._searching_schedule", "scheduler.GraphScheduler._q_schedule", "scheduler.GraphScheduler._random_schedule", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Scheduler._searching_schedule", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Scheduler._q_schedule", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Scheduler._random_schedule"], ["", "def", "schedule", "(", "self", ",", "configs", ",", "method", "=", "\"searching\"", ",", "use_model", "=", "False", ",", "perf_path", "=", "None", ")", ":", "\n", "        ", "if", "perf_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "walker_group", ".", "model_path", "=", "perf_path", "\n", "", "if", "method", "==", "\"searching\"", ":", "\n", "            ", "return", "self", ".", "_searching_schedule", "(", "configs", ",", "[", "\"inline\"", ",", "\"merge\"", "]", ",", "use_model", "=", "use_model", ")", "\n", "", "elif", "method", "==", "\"q\"", ":", "\n", "            ", "return", "self", ".", "_q_schedule", "(", "configs", ",", "[", "\"inline\"", ",", "\"merge\"", "]", ",", "use_model", "=", "use_model", ")", "\n", "", "elif", "method", "==", "\"random\"", ":", "\n", "            ", "return", "self", ".", "_random_schedule", "(", "configs", ",", "[", "\"inline\"", ",", "\"merge\"", "]", ",", "use_model", "=", "use_model", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Currently no support for method %s\"", "%", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.GraphScheduler.parallel_evaluate": [[2215, 2217], ["scheduler.GraphScheduler._parallel_evaluate"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.OpScheduler._parallel_evaluate"], ["", "", "def", "parallel_evaluate", "(", "self", ",", "configs", ",", "graph_configs", ",", "number", "=", "1", ")", ":", "\n", "        ", "return", "self", ".", "_parallel_evaluate", "(", "configs", ",", "graph_configs", ",", "mode", "=", "\"graph\"", ",", "number", "=", "number", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.GraphScheduler.generate_graph_schedule": [[2218, 2253], ["range", "range", "RuntimeError", "len", "len", "len", "len", "s[].compute_inline", "len", "s[].compute_at"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "generate_graph_schedule", "(", "config", ",", "phase", "=", "\"inline\"", ")", ":", "\n", "        ", "def", "_inline_schedule", "(", "s", ",", "op_lst", ",", "op_states", ")", ":", "\n", "            ", "if", "\"inline\"", "in", "config", "and", "len", "(", "config", "[", "\"inline\"", "]", ")", ">", "0", ":", "\n", "                ", "entity", "=", "config", "[", "\"inline\"", "]", "[", "0", "]", "\n", "for", "count", "in", "range", "(", "len", "(", "op_lst", ")", ")", ":", "\n", "                    ", "if", "entity", "[", "count", "]", ":", "\n", "                        ", "s", "[", "op_lst", "[", "count", "]", "]", ".", "compute_inline", "(", ")", "\n", "op_states", "[", "count", "]", ".", "inline", "=", "True", "\n", "\n", "", "", "", "", "def", "_at_schedule", "(", "s", ",", "op_lst", ",", "op_states", ")", ":", "\n", "            ", "return", "\n", "if", "\"merge\"", "in", "config", "and", "len", "(", "config", "[", "\"merge\"", "]", ")", ">", "0", ":", "\n", "                ", "entity", "=", "config", "[", "\"merge\"", "]", "[", "0", "]", "\n", "for", "count", "in", "range", "(", "len", "(", "op_lst", ")", ")", ":", "\n", "                    ", "if", "entity", "[", "count", "]", ">=", "0", ":", "\n", "                        ", "num_consumers", "=", "len", "(", "op_states", "[", "count", "]", ".", "consumer_lst", ")", "\n", "if", "num_consumers", "!=", "1", "or", "op_states", "[", "count", "]", ".", "inline", ":", "\n", "                            ", "continue", "\n", "", "else", ":", "\n", "                            ", "consumer_id", "=", "op_states", "[", "count", "]", ".", "consumer_lst", "[", "0", "]", "\n", "consumer_state", "=", "op_states", "[", "consumer_id", "]", "\n", "if", "consumer_state", ".", "inline", ":", "\n", "                                ", "continue", "# do not compute at inlined ops", "\n", "", "consumer_loop_idx", "=", "consumer_state", ".", "loop_idx", "\n", "at_pos", "=", "consumer_state", ".", "loop_lst", "[", "consumer_loop_idx", "[", "entity", "[", "count", "]", "]", "]", "\n", "s", "[", "op_lst", "[", "count", "]", "]", ".", "compute_at", "(", "s", "[", "op_lst", "[", "consumer_id", "]", "]", ",", "at_pos", ")", "\n", "op_states", "[", "count", "]", ".", "compute_at", "=", "True", "\n", "\n", "", "", "", "", "", "if", "phase", "==", "\"inline\"", ":", "\n", "            ", "return", "_inline_schedule", "\n", "", "elif", "phase", "==", "\"at\"", ":", "\n", "            ", "return", "_at_schedule", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Currently no support for phase %s\"", "%", "phase", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.SerialResult.__init__": [[2256, 2258], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "res", ")", ":", "\n", "        ", "self", ".", "res", "=", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.SerialResult.get": [[2259, 2261], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "timeout", "=", "1", ")", ":", "\n", "        ", "return", "self", ".", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.__init__": [[2264, 2267], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", ",", "q", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get": [[2268, 2298], ["scheduler.Result.p.is_alive", "scheduler.Result.p.join", "scheduler.Result.q.close", "scheduler.Result.q.join_thread", "scheduler.Result.q.get", "scheduler.kill_child_processes", "scheduler.Result.p.terminate", "RuntimeError", "str"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.kill_child_processes"], ["", "def", "get", "(", "self", ",", "timeout", "=", "1", ")", ":", "\n", "# beg = time.time()", "\n", "# while time.time() - beg < timeout:", "\n", "#     if self.q.empty():", "\n", "#         time.sleep(.1)", "\n", "#     else:", "\n", "#         break", "\n", "        ", "try", ":", "\n", "# print(\"getting...\")", "\n", "# while self.q.empty():", "\n", "#     pass", "\n", "# print(\"queue is empty? \", self.q.empty())", "\n", "            ", "res", "=", "self", ".", "q", ".", "get", "(", "block", "=", "True", ",", "timeout", "=", "timeout", ")", "\n", "# print(\"done\")", "\n", "# while not self.q.empty():", "\n", "#     _ = self.q.get(block=True)", "\n", "", "except", "Exception", "as", "e", ":", "\n", "# print(e.__class__)", "\n", "            ", "res", "=", "RuntimeError", "(", "str", "(", "e", ")", ")", "\n", "", "if", "self", ".", "p", ".", "is_alive", "(", ")", ":", "\n", "            ", "kill_child_processes", "(", "self", ".", "p", ".", "pid", ")", "\n", "self", ".", "p", ".", "terminate", "(", ")", "\n", "", "self", ".", "p", ".", "join", "(", ")", "\n", "self", ".", "q", ".", "close", "(", ")", "\n", "# print(\"queue joining...\")", "\n", "self", ".", "q", ".", "join_thread", "(", ")", "\n", "# print(\"queue joined\")", "\n", "del", "self", ".", "p", "\n", "del", "self", ".", "q", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.OpState.__init__": [[2301, 2307], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "inline", "=", "False", "\n", "self", ".", "loop_lst", "=", "[", "]", "\n", "self", ".", "loop_idx", "=", "[", "]", "\n", "self", ".", "compute_at", "=", "False", "\n", "self", ".", "consumer_lst", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.flatten_graph": [[47, 67], ["set", "collections.deque", "collections.deque.append", "set.add", "collections.deque.popleft", "isinstance", "list", "bfs_order.append", "down_graph[].append", "reversed", "set.add", "collections.deque.append"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.Benchmark.add", "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.Benchmark.add"], ["def", "flatten_graph", "(", "ops", ")", ":", "\n", "    ", "bfs_order", "=", "[", "]", "\n", "down_graph", "=", "{", "}", "\n", "visited", "=", "set", "(", ")", "\n", "q", "=", "deque", "(", ")", "\n", "for", "op", "in", "ops", ":", "\n", "        ", "q", ".", "append", "(", "op", ")", "\n", "visited", ".", "add", "(", "op", ")", "\n", "", "while", "q", ":", "\n", "        ", "cur", "=", "q", ".", "popleft", "(", ")", "\n", "if", "isinstance", "(", "cur", ",", "tvm", ".", "tensor", ".", "ComputeOp", ")", ":", "\n", "            ", "bfs_order", ".", "append", "(", "cur", ")", "\n", "", "for", "t", "in", "cur", ".", "input_tensors", ":", "\n", "            ", "if", "t", ".", "op", "not", "in", "visited", ":", "\n", "                ", "visited", ".", "add", "(", "t", ".", "op", ")", "\n", "q", ".", "append", "(", "t", ".", "op", ")", "\n", "", "if", "t", "not", "in", "down_graph", ":", "\n", "                ", "down_graph", "[", "t", "]", "=", "[", "]", "\n", "", "down_graph", "[", "t", "]", ".", "append", "(", "cur", ")", "\n", "", "", "return", "list", "(", "reversed", "(", "bfs_order", ")", ")", ",", "down_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.verify_code": [[69, 88], ["tvm.nd.context", "tvm.ir_pass.VerifyGPUCode"], "function", ["None"], ["", "def", "verify_code", "(", "stmt", ",", "target", ",", "dev_id", ")", ":", "\n", "    ", "if", "target", "==", "\"cuda\"", ":", "\n", "        ", "ctx", "=", "tvm", ".", "nd", ".", "context", "(", "target", ",", "dev_id", ")", "# just use device 0", "\n", "if", "not", "ctx", ".", "exist", ":", "\n", "# print(\"Fail to get device %s devid=%d\"%(target, dev_id))", "\n", "            ", "return", "False", "\n", "", "max_dims", "=", "ctx", ".", "max_thread_dimensions", "\n", "check_gpu", "=", "{", "\n", "\"max_shared_memory_per_block\"", ":", "ctx", ".", "max_shared_memory_per_block", ",", "\n", "\"max_threads_per_block\"", ":", "ctx", ".", "max_threads_per_block", ",", "\n", "\"max_thread_x\"", ":", "max_dims", "[", "0", "]", ",", "\n", "\"max_thread_y\"", ":", "max_dims", "[", "1", "]", ",", "\n", "\"max_thread_z\"", ":", "max_dims", "[", "2", "]", "\n", "}", "\n", "valid", "=", "tvm", ".", "ir_pass", ".", "VerifyGPUCode", "(", "stmt", ",", "check_gpu", ")", "\n", "return", "valid", "\n", "", "else", ":", "\n", "# no barrier for other targets", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.build_func": [[90, 130], ["tvm.lower", "scheduler.verify_code", "scheduler.schedule_with_config", "RuntimeError", "tvm.build", "tvm.build.export_library", "print", "tvm.build", "os.path.join", "tvm.micro.base.compile_micro_mod", "tvm.build", "tvm.build.export_library", "os.path.join", "flextensor.utils.to_tuple", "os.path.join"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.verify_code", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.schedule_with_config", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model_measure.ModelBuilder.build", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model_measure.ModelBuilder.build", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model_measure.ModelBuilder.build", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.to_tuple"], ["", "", "def", "build_func", "(", "func_name", ",", "task_key", ",", "configs", ",", "op_pos", "=", "None", ",", "rpc_info", "=", "None", ",", "rewrite", "=", "False", ")", ":", "\n", "    ", "if", "rpc_info", "is", "not", "None", "and", "rpc_info", ".", "target_host", "is", "not", "None", ":", "\n", "        ", "target_host", "=", "rpc_info", ".", "target_host", "\n", "", "else", ":", "\n", "        ", "target_host", "=", "None", "\n", "\n", "", "task", "=", "TASK_TABLE", "[", "task_key", "]", "\n", "try", ":", "\n", "        ", "s", ",", "bufs", "=", "schedule_with_config", "(", "task_key", ",", "configs", ",", "op_pos", "=", "op_pos", ",", "rewrite", "=", "rewrite", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "\n", "", "stmt", "=", "tvm", ".", "lower", "(", "s", ",", "bufs", ",", "simple_mode", "=", "True", ")", "\n", "# print(stmt)", "\n", "valid", "=", "verify_code", "(", "stmt", ",", "task", ".", "target", ",", "task", ".", "dev_id", ")", "\n", "if", "not", "valid", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Invalid %s(%d) kernel\"", "%", "(", "task", ".", "target", ",", "task", ".", "dev_id", ")", ")", "\n", "", "if", "target_host", "is", "not", "None", ":", "\n", "        ", "if", "task", ".", "target", "==", "\"micro\"", ":", "\n", "            ", "target", "=", "rpc_info", ".", "target", "# can be \"c -device=micro_dev\"", "\n", "micro_device_config", "=", "rpc_info", ".", "micro_device_config", "\n", "aux_sources", "=", "rpc_info", ".", "aux_sources", "\n", "aux_options", "=", "rpc_info", ".", "aux_options", "\n", "\n", "func", "=", "tvm", ".", "build", "(", "s", ",", "bufs", ",", "target", "=", "target", ")", "\n", "\n", "mod_path", "=", "os", ".", "path", ".", "join", "(", "LIB_DIR", ",", "func_name", "+", "\".obj\"", ")", "\n", "compile_micro_mod", "(", "mod_path", ",", "\n", "func", ",", "micro_device_config", ",", "\n", "aux_sources", "=", "aux_sources", ",", "\n", "aux_options", "=", "aux_options", ")", "\n", "# func.export_library(os.path.join(LIB_DIR, func_name))", "\n", "", "else", ":", "\n", "            ", "func", "=", "tvm", ".", "build", "(", "s", ",", "bufs", ",", "target", "=", "task", ".", "target", ",", "target_host", "=", "target_host", ")", "\n", "func", ".", "export_library", "(", "os", ".", "path", ".", "join", "(", "LIB_DIR", ",", "func_name", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "func", "=", "tvm", ".", "build", "(", "s", ",", "bufs", ",", "target", "=", "task", ".", "target", ")", "\n", "func", ".", "export_library", "(", "os", ".", "path", ".", "join", "(", "LIB_DIR", ",", "func_name", ")", ")", "\n", "", "result", "=", "(", "[", "to_tuple", "(", "x", ".", "shape", ")", "for", "x", "in", "bufs", "]", ",", "[", "buf", ".", "dtype", "for", "buf", "in", "bufs", "]", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.eval_func": [[132, 196], ["enumerate", "tvm.rpc.connect_tracker", "rpc.connect_tracker.request", "tracker.request.context", "tvm.context", "flextensor.utils.to_tuple", "numpy.random.uniform().astype", "tvm.nd.array", "tvm_arys.append", "tvm.module.load.time_evaluator", "tracker.request.upload", "tracker.request.load_module", "tvm.module.load", "print", "len", "numpy.random.uniform", "os.path.join", "os.path.join", "func.time_evaluator."], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.to_tuple"], ["", "def", "eval_func", "(", "func_file", ",", "bufs_shape", ",", "dtype", ",", "target", ",", "number", "=", "1", ",", "dev_id", "=", "0", ",", "rpc_info", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    the target is preprocessed\n    \"\"\"", "\n", "if", "rpc_info", "is", "not", "None", ":", "\n", "        ", "host", "=", "rpc_info", ".", "host", "\n", "port", "=", "rpc_info", ".", "port", "\n", "server_ip", "=", "rpc_info", ".", "server_ip", "\n", "server_port", "=", "rpc_info", ".", "server_port", "\n", "device_key", "=", "rpc_info", ".", "device_key", "\n", "", "else", ":", "\n", "# local", "\n", "        ", "host", "=", "\"0.0.0.0\"", "\n", "port", "=", "9090", "# default port", "\n", "server_ip", "=", "\"127.0.0.1\"", "\n", "server_port", "=", "9190", "\n", "device_key", "=", "\"local\"", "\n", "", "if", "device_key", "==", "\"local\"", ":", "\n", "        ", "if", "LOCAL_RPC", ":", "\n", "            ", "use_rpc", "=", "True", "\n", "", "else", ":", "\n", "            ", "use_rpc", "=", "False", "\n", "", "", "else", ":", "\n", "        ", "use_rpc", "=", "True", "\n", "\n", "", "if", "use_rpc", ":", "\n", "# remote = rpc.connect(host, port)", "\n", "\n", "        ", "tracker", "=", "rpc", ".", "connect_tracker", "(", "server_ip", ",", "server_port", ")", "\n", "\n", "remote", "=", "tracker", ".", "request", "(", "device_key", ",", "priority", "=", "1", ",", "\n", "session_timeout", "=", "10000", ")", "\n", "\n", "ctx", "=", "remote", ".", "context", "(", "target", ",", "dev_id", ")", "\n", "", "else", ":", "\n", "        ", "ctx", "=", "tvm", ".", "context", "(", "target", ",", "dev_id", ")", "\n", "", "tvm_arys", "=", "[", "]", "\n", "for", "i", ",", "shape", "in", "enumerate", "(", "bufs_shape", ")", ":", "\n", "        ", "shape", "=", "to_tuple", "(", "shape", ")", "\n", "tmp", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "size", "=", "shape", ")", ".", "astype", "(", "dtype", "[", "i", "]", ")", "\n", "tmp", "=", "tvm", ".", "nd", ".", "array", "(", "tmp", ",", "ctx", ")", "\n", "tvm_arys", ".", "append", "(", "tmp", ")", "\n", "", "try", ":", "\n", "        ", "if", "use_rpc", ":", "\n", "            ", "if", "target", "==", "\"c -device=micro_dev\"", ":", "\n", "                ", "post_fix", "=", "\".obj\"", "\n", "", "else", ":", "\n", "                ", "post_fix", "=", "\"\"", "\n", "\n", "", "remote", ".", "upload", "(", "os", ".", "path", ".", "join", "(", "LIB_DIR", ",", "func_file", "+", "post_fix", ")", ")", "\n", "\n", "func", "=", "remote", ".", "load_module", "(", "func_file", "+", "\".obj\"", ")", "\n", "", "else", ":", "\n", "            ", "func", "=", "tvm", ".", "module", ".", "load", "(", "os", ".", "path", ".", "join", "(", "LIB_DIR", ",", "func_file", ")", ")", "\n", "\n", "", "evaluator", "=", "func", ".", "time_evaluator", "(", "func", ".", "entry_name", ",", "ctx", ",", "number", "=", "number", ")", "\n", "\n", "time_cost", "=", "evaluator", "(", "*", "tvm_arys", ")", ".", "mean", "*", "1e3", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "", "finally", ":", "\n", "        ", "while", "len", "(", "tvm_arys", ")", ">", "0", ":", "\n", "            ", "del", "tvm_arys", "[", "-", "1", "]", "\n", "", "", "return", "time_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.kill_child_processes": [[198, 210], ["psutil.Process.children", "psutil.Process", "process.send_signal"], "function", ["None"], ["", "def", "kill_child_processes", "(", "parent_pid", ",", "sig", "=", "signal", ".", "SIGTERM", ")", ":", "\n", "    ", "\"\"\"kill all child processes recursively\"\"\"", "\n", "try", ":", "\n", "        ", "parent", "=", "psutil", ".", "Process", "(", "parent_pid", ")", "\n", "", "except", "psutil", ".", "NoSuchProcess", ":", "\n", "        ", "return", "\n", "", "children", "=", "parent", ".", "children", "(", "recursive", "=", "True", ")", "\n", "for", "process", "in", "children", ":", "\n", "        ", "try", ":", "\n", "            ", "process", ".", "send_signal", "(", "sig", ")", "\n", "", "except", "psutil", ".", "NoSuchProcess", ":", "\n", "            ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.exec_func": [[212, 218], ["queue.put", "func", "RuntimeError", "str"], "function", ["None"], ["", "", "", "def", "exec_func", "(", "func", ",", "queue", ",", "args", ",", "kwargs", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "res", "=", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "res", "=", "RuntimeError", "(", "str", "(", "e", ")", ")", "\n", "", "queue", ".", "put", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.parallel_execute": [[220, 227], ["multi.Queue", "multi.Process", "multi.Process.start", "scheduler.Result", "scheduler.build_func", "scheduler.eval_func"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.build_func", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.eval_func"], ["", "def", "parallel_execute", "(", "func", ",", "timeout", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "q", "=", "multi", ".", "Queue", "(", ")", "\n", "p", "=", "multi", ".", "Process", "(", "\n", "target", "=", "call_with_timeout", ",", "\n", "args", "=", "(", "func", ",", "q", ",", "timeout", ",", "args", ",", "kwargs", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "return", "Result", "(", "p", ",", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.call_with_timeout": [[229, 244], ["multi.Queue", "multi.Process", "multi.Process.start", "scheduler.kill_child_processes", "multi.Process.terminate", "multi.Process.join", "queue.put", "multi.Queue.get", "multi.TimeoutError", "print", "os.getpid", "str"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.kill_child_processes", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get"], ["", "def", "call_with_timeout", "(", "func", ",", "queue", ",", "timeout", ",", "args", ",", "kwargs", ")", ":", "\n", "    ", "q", "=", "multi", ".", "Queue", "(", ")", "\n", "p", "=", "multi", ".", "Process", "(", "target", "=", "exec_func", ",", "args", "=", "(", "func", ",", "q", ",", "args", ",", "kwargs", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "try", ":", "\n", "        ", "res", "=", "q", ".", "get", "(", "block", "=", "True", ",", "timeout", "=", "timeout", ")", "\n", "", "except", "Empty", ":", "\n", "        ", "res", "=", "multi", ".", "TimeoutError", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "\"Exception in process {}: {}\"", ".", "format", "(", "os", ".", "getpid", "(", ")", ",", "str", "(", "e", ")", ")", ")", "\n", "res", "=", "e", "\n", "", "kill_child_processes", "(", "p", ".", "pid", ")", "\n", "p", ".", "terminate", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "queue", ".", "put", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.find_idle_cpu": [[246, 248], ["None"], "function", ["None"], ["", "def", "find_idle_cpu", "(", ")", ":", "\n", "    ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.find_idle_gpu": [[250, 252], ["None"], "function", ["None"], ["", "def", "find_idle_gpu", "(", ")", ":", "\n", "    ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.find_idle_device": [[254, 261], ["scheduler.find_idle_cpu", "scheduler.find_idle_gpu", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.find_idle_cpu", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.find_idle_gpu"], ["", "def", "find_idle_device", "(", "target", ")", ":", "\n", "    ", "if", "target", "==", "\"llvm\"", ":", "\n", "        ", "return", "find_idle_cpu", "(", ")", "\n", "", "elif", "target", "==", "\"cuda\"", ":", "\n", "        ", "return", "find_idle_gpu", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Currently no support for target %s\"", "%", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.schedule": [[2309, 2479], ["func", "scheduler.flatten_graph", "enumerate", "len", "enumerate", "flextensor.utils.Config", "scheduler.schedule_with_config", "scheduler.OpState", "range", "list", "flextensor.utils.assert_print", "flextensor.space.generate_space_inter_op", "flextensor.utils.Config", "flextensor.utils.Config", "len", "op_space_lst.append", "scheduler.OpScheduler", "flextensor.utils.Config.op_config_lst.append", "scheduler.GraphScheduler", "print", "set", "str", "range", "flextensor.space.generate_empty_space_inter_op", "RuntimeError", "flextensor.space.generate_space_intra_op", "flextensor.space.generate_empty_space_inter_op.subspaces[].able_inline", "scheduler.OpScheduler.schedule", "len", "scheduler.GraphScheduler.schedule", "op.output", "consumer_lst.extend", "len", "len", "len", "range", "len", "max", "flextensor.space.generate_space_intra_op", "len", "flextensor.space.generate_op_space_with_intrin", "RuntimeError", "op.output"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.flatten_graph", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.schedule_with_config", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.assert_print", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_space_inter_op", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_empty_space_inter_op", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_space_intra_op", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.able_inline", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.schedule", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.schedule", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_space_intra_op", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.generate_op_space_with_intrin"], ["", "", "def", "schedule", "(", "task_key", ",", "slevel", "=", "4", ",", "rlevel", "=", "3", ",", "op_trial", "=", "50", ",", "graph_trial", "=", "10", ",", "op_stop", "=", "15", ",", "graph_stop", "=", "5", ",", "\n", "number", "=", "1", ",", "timeout", "=", "5.0", ",", "parallel", "=", "8", ",", "method", "=", "\"searching\"", ",", "re_evalutate_number", "=", "10", ",", "warm_up_epoch", "=", "20", ",", "warm_up_number", "=", "20", ",", "**", "kwargs", ",", ")", ":", "\n", "    ", "\"\"\"Schedule a task\n\n    perform sequential schedule\n    \"\"\"", "\n", "task", "=", "TASK_TABLE", "[", "task_key", "]", "\n", "func", "=", "task", ".", "func", "\n", "args", "=", "task", ".", "args", "\n", "ops", ",", "bufs", "=", "func", "(", "*", "args", ")", "\n", "# sort the ops, so that we can distinguish each op", "\n", "op_lst", ",", "down_graph", "=", "flatten_graph", "(", "ops", ")", "\n", "# state of ops", "\n", "op_states", "=", "[", "OpState", "(", ")", "for", "_", "in", "op_lst", "]", "\n", "for", "count_op", ",", "op", "in", "enumerate", "(", "op_lst", ")", ":", "\n", "        ", "consumer_lst", "=", "[", "]", "\n", "for", "count_output", "in", "range", "(", "op", ".", "num_outputs", ")", ":", "\n", "            ", "if", "op", ".", "output", "(", "count_output", ")", "in", "down_graph", ":", "\n", "                ", "consumer_lst", ".", "extend", "(", "down_graph", "[", "op", ".", "output", "(", "count_output", ")", "]", ")", "\n", "", "", "op_states", "[", "count_op", "]", ".", "consumer_lst", "=", "list", "(", "set", "(", "consumer_lst", ")", ")", "\n", "\n", "", "if", "\"trials\"", "in", "kwargs", ":", "\n", "        ", "assert_print", "(", "len", "(", "kwargs", "[", "\"trials\"", "]", ")", "==", "len", "(", "op_lst", ")", ",", "str", "(", "len", "(", "op_lst", ")", ")", ")", "\n", "force_trials", "=", "kwargs", "[", "\"trials\"", "]", "\n", "", "else", ":", "\n", "        ", "force_trials", "=", "[", "op_trial", "for", "i", "in", "range", "(", "len", "(", "op_lst", ")", ")", "]", "\n", "\n", "", "op_perf_model_path_lst", "=", "[", "None", "for", "i", "in", "range", "(", "len", "(", "op_lst", ")", ")", "]", "\n", "if", "\"op_perf_model_path\"", "in", "kwargs", ":", "\n", "        ", "for", "(", "op_pos", ",", "path", ")", "in", "kwargs", "[", "\"op_perf_model_path\"", "]", ":", "\n", "            ", "op_perf_model_path_lst", "[", "op_pos", "]", "=", "path", "\n", "", "", "graph_perf_model_path", "=", "None", "\n", "if", "\"graph_perf_model_path\"", "in", "kwargs", ":", "\n", "        ", "graph_perf_model_path", "=", "kwargs", "[", "\"graph_perf_model_path\"", "]", "\n", "", "force_inline", "=", "False", "\n", "if", "\"force_inline\"", "in", "kwargs", ":", "\n", "        ", "force_inline", "=", "kwargs", "[", "\"force_inline\"", "]", "\n", "", "if", "\"rewrite\"", "in", "kwargs", ":", "\n", "        ", "rewrite", "=", "True", "\n", "# must force_inline", "\n", "force_inline", "=", "True", "\n", "", "else", ":", "\n", "        ", "rewrite", "=", "False", "\n", "", "rpc_info", "=", "None", "\n", "if", "\"rpc_info\"", "in", "kwargs", ":", "\n", "        ", "rpc_info", "=", "kwargs", "[", "\"rpc_info\"", "]", "\n", "", "model_measurer", "=", "None", "\n", "if", "\"model_measurer\"", "in", "kwargs", ":", "\n", "        ", "model_measurer", "=", "kwargs", "[", "\"model_measurer\"", "]", "\n", "##################################################", "\n", "# first generate graph space", "\n", "", "if", "task", ".", "target", "==", "\"cuda\"", "or", "task", ".", "target", "==", "\"llvm\"", ":", "\n", "        ", "schedule_graph", "=", "True", "\n", "graph_space", "=", "generate_space_inter_op", "(", "\n", "op_lst", ",", "down_graph", ",", "force_inline", "=", "force_inline", ",", "special_space", "=", "task", ".", "special_space", ")", "\n", "", "elif", "task", ".", "target", "==", "\"micro\"", ":", "\n", "        ", "schedule_graph", "=", "False", "\n", "graph_space", "=", "generate_empty_space_inter_op", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Currently no support for target %s\"", "%", "task", ".", "target", ")", "\n", "\n", "", "graph_space_size", "=", "len", "(", "graph_space", ")", "\n", "#print(\"graph space size\", graph_space_size)", "\n", "total_size", "=", "graph_space_size", "\n", "\n", "##################################################", "\n", "# intra operations schedule decisionss", "\n", "op_space_lst", "=", "[", "]", "\n", "if", "force_inline", "and", "\"inline\"", "in", "graph_space", ".", "subspaces", ":", "\n", "        ", "configs", "=", "Config", "(", "[", "]", ",", "{", "\"inline\"", ":", "[", "graph_space", ".", "subspaces", "[", "\"inline\"", "]", ".", "static_entities", "[", "0", "]", "]", "}", ")", "\n", "", "else", ":", "\n", "        ", "configs", "=", "Config", "(", "[", "]", ",", "None", ")", "\n", "\n", "", "for", "pos", ",", "op", "in", "enumerate", "(", "op_lst", ")", ":", "\n", "        ", "if", "task", ".", "target", "==", "\"cuda\"", ":", "\n", "            ", "space", "=", "generate_space_intra_op", "(", "op", ",", "down_graph", ",", "slevel", "=", "slevel", ",", "rlevel", "=", "rlevel", ",", "groups", "=", "3", ")", "\n", "", "elif", "task", ".", "target", "==", "\"llvm\"", ":", "\n", "            ", "rslevel", "=", "max", "(", "slevel", ",", "rlevel", ")", "\n", "space", "=", "generate_space_intra_op", "(", "op", ",", "down_graph", ",", "slevel", "=", "rslevel", ",", "rlevel", "=", "rslevel", ",", "\n", "unroll_policy", "=", "\"off\"", ",", "fuse_policy", "=", "\"off\"", ",", "\n", "reorder_policy", "=", "\"off\"", ")", "\n", "", "elif", "task", ".", "target", "==", "\"micro\"", ":", "\n", "            ", "space", "=", "generate_op_space_with_intrin", "(", "op", ",", "rpc_info", ".", "target", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Currently no support for target %s\"", "%", "task", ".", "target", ")", "\n", "", "total_size", "*=", "len", "(", "space", ")", "\n", "#print(\"op\", pos, \"space size:\", len(space))", "\n", "op_space_lst", ".", "append", "(", "space", ")", "\n", "op_scheduler", "=", "OpScheduler", "(", "\n", "task_key", ",", "\n", "pos", ",", "\n", "space", ",", "\n", "parallel", "=", "parallel", ",", "\n", "timeout", "=", "timeout", ",", "\n", "trial", "=", "force_trials", "[", "pos", "]", ",", "\n", "number", "=", "number", ",", "\n", "early_stop", "=", "op_stop", ",", "\n", "rpc_info", "=", "rpc_info", ",", "\n", "rewrite", "=", "rewrite", ",", "\n", "model_measurer", "=", "model_measurer", ",", "\n", "re_evalutate_number", "=", "re_evalutate_number", ",", "\n", "warm_up_epoch", "=", "warm_up_epoch", ",", "\n", "warm_up_number", "=", "warm_up_number", "\n", ")", "\n", "# print(\"###########################################\")", "\n", "# print(\"Scheduling\", op)", "\n", "use_model", "=", "False", "if", "op_perf_model_path_lst", "[", "pos", "]", "is", "None", "else", "True", "\n", "perf_path", "=", "op_perf_model_path_lst", "[", "pos", "]", "\n", "if", "force_inline", "and", "\"inline\"", "in", "graph_space", ".", "subspaces", "and", "graph_space", ".", "subspaces", "[", "\"inline\"", "]", ".", "able_inline", "(", "pos", ")", ":", "\n", "            ", "op_config", "=", "{", "}", "\n", "", "else", ":", "\n", "            ", "op_config", "=", "op_scheduler", ".", "schedule", "(", "\n", "configs", ",", "\n", "method", "=", "method", ",", "\n", "use_model", "=", "use_model", ",", "\n", "perf_path", "=", "perf_path", ",", "\n", ")", "\n", "\n", "", "configs", ".", "op_config_lst", ".", "append", "(", "op_config", ")", "\n", "\n", "#print(\"space size\", total_size)", "\n", "\n", "#################################################", "\n", "# inter operations schedule decisions ", "\n", "", "if", "schedule_graph", ":", "\n", "        ", "graph_scheduler", "=", "GraphScheduler", "(", "\n", "task_key", ",", "\n", "graph_space", ",", "\n", "parallel", "=", "parallel", ",", "\n", "timeout", "=", "timeout", ",", "\n", "trial", "=", "graph_trial", ",", "\n", "number", "=", "number", ",", "\n", "early_stop", "=", "graph_stop", ",", "\n", "rpc_info", "=", "rpc_info", ",", "\n", "rewrite", "=", "rewrite", "\n", ")", "\n", "use_model", "=", "False", "if", "graph_perf_model_path", "is", "None", "else", "True", "\n", "if", "len", "(", "graph_space", ")", ">", "1", ":", "\n", "            ", "graph_config", "=", "graph_scheduler", ".", "schedule", "(", "\n", "configs", ",", "method", "=", "method", ",", "use_model", "=", "use_model", ",", "perf_path", "=", "graph_perf_model_path", ")", "\n", "", "else", ":", "\n", "            ", "graph_config", "=", "{", "}", "\n", "", "", "else", ":", "\n", "        ", "graph_config", "=", "{", "}", "\n", "#################################################", "\n", "# combine the configs ", "\n", "\n", "", "configs", "=", "Config", "(", "configs", ".", "op_config_lst", ",", "graph_config", ")", "\n", "if", "(", "not", "configs", ".", "op_config_lst", ")", "or", "(", "not", "configs", ".", "op_config_lst", "[", "0", "]", "[", "\"intrin\"", "]", ")", ":", "# cannot find a schedule for the hardware design point  ", "\n", "        ", "print", "(", "\"Cannot find valid schedules\"", ")", "\n", "return", "None", ",", "None", ",", "None", "\n", "#################################################", "\n", "# final schedule", "\n", "# s = tvm.create_schedule(ops)", "\n", "# # perform inter operator schedule", "\n", "# graph_template = GraphScheduler.generate_graph_schedule(configs.graph_config, phase=\"inline\")", "\n", "# graph_template(s, op_lst, op_states)", "\n", "# # perform intra-operator schedule", "\n", "# for count_op, (op, op_state, op_config) in enumerate(zip(op_lst, op_states, configs.op_config_lst)):", "\n", "#     if not op_state.inline:", "\n", "#         op_template = OpScheduler.generate_op_schedule(task.target, op_config)", "\n", "#         op_template(s, op, op_states[count_op])", "\n", "# # perform inter operations schedule again for compute at", "\n", "# if graph_config is not None:", "\n", "#     graph_template = GraphScheduler.generate_graph_schedule(graph_config, phase=\"at\")", "\n", "#     graph_template(s, op_lst, op_states)", "\n", "", "s", ",", "bufs", "=", "schedule_with_config", "(", "task_key", ",", "configs", ",", "rewrite", "=", "rewrite", ")", "\n", "\n", "return", "s", ",", "bufs", ",", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.schedule_with_config": [[2481, 2498], ["scheduler.Rewriter", "scheduler.schedule_with_config_ops", "scheduler.Rewriter.rewrite", "flextensor.utils.Config", "func"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.schedule_with_config_ops", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Rewriter.rewrite"], ["", "def", "schedule_with_config", "(", "task_key", ",", "configs", ",", "op_pos", "=", "None", ",", "rewrite", "=", "False", ")", ":", "\n", "    ", "\"\"\"Schedule a task with given configs\n\n    perform sequential schedule\n    \"\"\"", "\n", "task", "=", "TASK_TABLE", "[", "task_key", "]", "\n", "rewriter", "=", "Rewriter", "(", "configs", ")", "\n", "if", "rewrite", ":", "\n", "        ", "ops", ",", "bufs", ",", "new_graph_config", ",", "new_op_config_lst", "=", "rewriter", ".", "rewrite", "(", "task", ")", "\n", "configs", "=", "Config", "(", "new_op_config_lst", ",", "new_graph_config", ")", "\n", "", "else", ":", "\n", "        ", "func", "=", "task", ".", "func", "\n", "args", "=", "task", ".", "args", "\n", "ops", ",", "bufs", "=", "func", "(", "*", "args", ")", "\n", "\n", "", "s", ",", "bufs", "=", "schedule_with_config_ops", "(", "ops", ",", "bufs", ",", "configs", ",", "op_pos", "=", "op_pos", ",", "target", "=", "task", ".", "target", ")", "\n", "return", "s", ",", "bufs", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.schedule_with_config_ops": [[2500, 2551], ["scheduler.flatten_graph", "enumerate", "range", "scheduler.OpState", "range", "list", "flextensor.utils.assert_print", "flextensor.utils.assert_print", "tvm.create_schedule", "flextensor.utils.assert_print", "len", "tvm.create_schedule", "scheduler.GraphScheduler.generate_graph_schedule", "GraphScheduler.generate_graph_schedule.", "scheduler.GraphScheduler.generate_graph_schedule", "GraphScheduler.generate_graph_schedule.", "set", "isinstance", "scheduler.OpScheduler.generate_op_schedule", "OpScheduler.generate_op_schedule.", "op.output", "consumer_lst.extend", "len", "len", "len", "len", "op.output"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.flatten_graph", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.assert_print", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.assert_print", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.assert_print", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.GraphScheduler.generate_graph_schedule", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.GraphScheduler.generate_graph_schedule", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.OpScheduler.generate_op_schedule"], ["", "def", "schedule_with_config_ops", "(", "ops", ",", "bufs", ",", "configs", ",", "op_pos", "=", "None", ",", "target", "=", "\"llvm\"", ")", ":", "\n", "    ", "\"\"\"Schedule a task with given configs\n\n    perform sequential schedule\n    \"\"\"", "\n", "# sort the ops, so that we can distinguish each op", "\n", "op_lst", ",", "down_graph", "=", "flatten_graph", "(", "ops", ")", "\n", "# state of ops", "\n", "op_states", "=", "[", "OpState", "(", ")", "for", "op", "in", "op_lst", "]", "\n", "for", "count_op", ",", "op", "in", "enumerate", "(", "op_lst", ")", ":", "\n", "        ", "consumer_lst", "=", "[", "]", "\n", "for", "count_output", "in", "range", "(", "op", ".", "num_outputs", ")", ":", "\n", "            ", "if", "op", ".", "output", "(", "count_output", ")", "in", "down_graph", ":", "\n", "                ", "consumer_lst", ".", "extend", "(", "down_graph", "[", "op", ".", "output", "(", "count_output", ")", "]", ")", "\n", "", "", "op_states", "[", "count_op", "]", ".", "consumer_lst", "=", "list", "(", "set", "(", "consumer_lst", ")", ")", "\n", "\n", "", "op_config_lst", "=", "configs", ".", "op_config_lst", "\n", "\n", "if", "op_pos", "is", "not", "None", ":", "\n", "        ", "assert_print", "(", "isinstance", "(", "op_pos", ",", "int", ")", ",", "\"op_pos should be int\"", ")", "\n", "assert_print", "(", "op_pos", "<", "len", "(", "op_lst", ")", "and", "op_pos", "<", "len", "(", "op_config_lst", ")", ",", "\"op_pos too big\"", ")", "\n", "loop_length", "=", "op_pos", "+", "1", "\n", "s", "=", "tvm", ".", "create_schedule", "(", "op_lst", "[", "op_pos", "]", ")", "\n", "", "else", ":", "\n", "        ", "assert_print", "(", "len", "(", "op_config_lst", ")", "<=", "len", "(", "op_lst", ")", ",", "\"config length exceed op_lst\"", ")", "\n", "loop_length", "=", "len", "(", "op_config_lst", ")", "\n", "s", "=", "tvm", ".", "create_schedule", "(", "ops", ")", "\n", "\n", "###################################################", "\n", "# perform inter operations schedule first for inline", "\n", "", "graph_config", "=", "configs", ".", "graph_config", "\n", "if", "graph_config", "is", "not", "None", ":", "\n", "        ", "graph_template", "=", "GraphScheduler", ".", "generate_graph_schedule", "(", "graph_config", ",", "phase", "=", "\"inline\"", ")", "\n", "graph_template", "(", "s", ",", "op_lst", ",", "op_states", ")", "\n", "\n", "###################################################", "\n", "# perform intra operations schedule", "\n", "", "for", "i", "in", "range", "(", "loop_length", ")", ":", "\n", "# mask inlined ops", "\n", "        ", "if", "not", "op_states", "[", "i", "]", ".", "inline", ":", "\n", "            ", "op", "=", "op_lst", "[", "i", "]", "\n", "config", "=", "op_config_lst", "[", "i", "]", "\n", "template", "=", "OpScheduler", ".", "generate_op_schedule", "(", "target", ",", "config", ")", "\n", "template", "(", "s", ",", "op", ",", "op_states", "[", "i", "]", ")", "\n", "\n", "###################################################", "\n", "# perform inter operations schedule again for compute at", "\n", "", "", "if", "graph_config", "is", "not", "None", ":", "\n", "        ", "graph_template", "=", "GraphScheduler", ".", "generate_graph_schedule", "(", "graph_config", ",", "phase", "=", "\"at\"", ")", "\n", "graph_template", "(", "s", ",", "op_lst", ",", "op_states", ")", "\n", "", "return", "s", ",", "bufs", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.schedule_ops_with_config": [[2553, 2585], ["len", "range", "scheduler.OpState", "scheduler.GraphScheduler.generate_graph_schedule", "GraphScheduler.generate_graph_schedule.", "scheduler.OpScheduler.generate_op_schedule", "OpScheduler.generate_op_schedule."], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.GraphScheduler.generate_graph_schedule", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.OpScheduler.generate_op_schedule"], ["", "def", "schedule_ops_with_config", "(", "s", ",", "op_lst", ",", "configs", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Schedule op list with given configs\n    This assumes a previous graph optimizaton\n    so there is no need to retrieve graph list \n    nor perform compute_at\n    \"\"\"", "\n", "# state of ops", "\n", "op_states", "=", "[", "OpState", "(", ")", "for", "op", "in", "op_lst", "]", "\n", "\n", "op_config_lst", "=", "configs", ".", "op_config_lst", "\n", "\n", "loop_length", "=", "len", "(", "op_config_lst", ")", "\n", "\n", "###################################################", "\n", "# perform inter operations schedule first for inline", "\n", "graph_config", "=", "configs", ".", "graph_config", "\n", "if", "graph_config", "is", "not", "None", ":", "\n", "        ", "graph_template", "=", "GraphScheduler", ".", "generate_graph_schedule", "(", "graph_config", ",", "phase", "=", "\"inline\"", ")", "\n", "graph_template", "(", "s", ",", "op_lst", ",", "op_states", ")", "\n", "\n", "###################################################", "\n", "# perform intra operations schedule    ", "\n", "", "for", "i", "in", "range", "(", "loop_length", ")", ":", "\n", "# mask inlined ops", "\n", "        ", "if", "not", "op_states", "[", "i", "]", ".", "inline", ":", "\n", "            ", "op", "=", "op_lst", "[", "i", "]", "\n", "config", "=", "op_config_lst", "[", "i", "]", "\n", "template", "=", "OpScheduler", ".", "generate_op_schedule", "(", "target", ",", "config", ")", "\n", "template", "(", "s", ",", "op", ",", "op_states", "[", "i", "]", ")", "\n", "\n", "", "", "return", "s", "\n", "", ""]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Judger.__init__": [[20, 32], ["super().__init__", "flextensor.utils.assert_print", "flextensor.utils.assert_print", "torch.Sequential", "torch.Sequential", "model.Judger.net.add_module", "model.Judger.net.add_module", "range", "model.Judger.net.add_module", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "model.Judger.net.add_module", "model.Judger.net.add_module", "torch.Linear", "torch.Linear", "isinstance", "isinstance", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.BenchmarkCNN.__init__", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.assert_print", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.assert_print"], ["    ", "def", "__init__", "(", "self", ",", "input_len", ",", "width", ",", "depth", ",", "output_len", ")", ":", "\n", "        ", "super", "(", "Judger", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert_print", "(", "isinstance", "(", "width", ",", "int", ")", "and", "width", ">", "0", ")", "\n", "assert_print", "(", "isinstance", "(", "depth", ",", "int", ")", "and", "depth", ">", "1", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "net", ".", "add_module", "(", "\"input\"", ",", "nn", ".", "Linear", "(", "input_len", ",", "width", ")", ")", "\n", "self", ".", "net", ".", "add_module", "(", "\"input_activate\"", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "for", "count", "in", "range", "(", "depth", "-", "2", ")", ":", "\n", "            ", "name", "=", "\"hidden_{}\"", ".", "format", "(", "count", ")", "\n", "self", ".", "net", ".", "add_module", "(", "name", ",", "nn", ".", "Linear", "(", "width", ",", "width", ")", ")", "\n", "self", ".", "net", ".", "add_module", "(", "name", "+", "\"_activate\"", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "self", ".", "net", ".", "add_module", "(", "\"output\"", ",", "nn", ".", "Linear", "(", "width", ",", "output_len", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Judger.forward": [[33, 36], ["model.Judger.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "out", "=", "self", ".", "net", "(", "inputs", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.__init__": [[48, 59], ["torch.Module.__init__", "model.Judger", "model.Judger", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "model.flatten"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.BenchmarkCNN.__init__", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.flatten"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "subspace", ",", "input_len", ")", ":", "\n", "        ", "super", "(", "Walker", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "subspace", "=", "subspace", "\n", "self", ".", "pre_judger", "=", "Judger", "(", "input_len", ",", "64", ",", "4", ",", "self", ".", "subspace", ".", "num_direction", ")", "\n", "self", ".", "post_judger", "=", "Judger", "(", "input_len", ",", "64", ",", "4", ",", "self", ".", "subspace", ".", "num_direction", ")", "# post updated", "\n", "self", ".", "memory", "=", "[", "]", "# (pre_state, action, post_state, reward)", "\n", "self", ".", "mem_size", "=", "0", "\n", "entities", "=", "[", "flatten", "(", "x", ")", "for", "x", "in", "self", ".", "subspace", ".", "static_entities", "]", "\n", "self", ".", "inputs_to_judger", "=", "torch", ".", "FloatTensor", "(", "entities", ")", "\n", "self", ".", "model_path", "=", "global_walker_judger_model_path_prefix", "+", "name", "+", "\".pkl\"", "\n", "self", ".", "data_path", "=", "global_walker_judger_data_path_prefix", "+", "name", "+", "\".txt\"", "\n", "# self.random_seed = 0", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.random_batch": [[61, 76], ["numpy.random.randint", "model.Walker._get_batch"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker._get_batch"], ["", "def", "random_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "# self.random_seed += np.random.randint(0, 999, 1)[0]", "\n", "# np.random.seed(self.random_seed)", "\n", "# import random", "\n", "# # print(self.subspace.size)", "\n", "# if self.subspace.size < batch_size:", "\n", "#     batch_indices = list(i % self.subspace.size for i in range(0, batch_size))", "\n", "#     #random.sample(range(0, self.subspace.size), batch_size)", "\n", "# else:", "\n", "#     batch_indices = random.sample(range(0, self.subspace.size), batch_size)", "\n", "#     # np.random.randint(0, self.subspace.size, batch_size)", "\n", "        ", "batch_indices", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "subspace", ".", "size", ",", "batch_size", ")", "\n", "# print(batch_indices)", "\n", "ret_entities", "=", "self", ".", "_get_batch", "(", "batch_indices", ")", "\n", "return", "ret_entities", ",", "batch_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.best_batch": [[77, 83], ["min", "model.Walker.judger().reshape", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "model.Walker._get_batch", "model.Walker.judger"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.topk", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.topk", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.topk", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.topk", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker._get_batch"], ["", "def", "best_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "batch_size", "=", "min", "(", "batch_size", ",", "self", ".", "subspace", ".", "size", ")", "\n", "p_values", "=", "self", ".", "judger", "(", "self", ".", "inputs_to_judger", ")", ".", "reshape", "(", "-", "1", ")", "\n", "ret_p_values", ",", "batch_indices", "=", "torch", ".", "topk", "(", "p_values", ",", "batch_size", ")", "\n", "ret_entities", "=", "self", ".", "_get_batch", "(", "batch_indices", ")", "\n", "return", "ret_entities", ",", "batch_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker._get_batch": [[84, 89], ["ret_entities.append", "model.Walker.subspace.get_entity"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.SubSpace.get_entity"], ["", "def", "_get_batch", "(", "self", ",", "batch_indices", ")", ":", "\n", "        ", "ret_entities", "=", "[", "]", "\n", "for", "index", "in", "batch_indices", ":", "\n", "            ", "ret_entities", ".", "append", "(", "self", ".", "subspace", ".", "get_entity", "(", "index", ")", ")", "\n", "", "return", "ret_entities", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.record_best": [[90, 92], ["None"], "methods", ["None"], ["", "def", "record_best", "(", "self", ",", "best_index", ",", "best_value", ")", ":", "\n", "        ", "self", ".", "memory", "[", "best_index", "]", "=", "best_value", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.walk": [[93, 110], ["model.Walker.pre_judger().detach", "enumerate", "numpy.random.random", "max", "model.Walker.subspace.get_direction", "model.Walker.subspace.next_entity", "ret_index_lst.append", "ret_choice_lst.append", "model.Walker.pre_judger", "numpy.random.randint", "torch.max", "torch.max", "torch.max", "torch.max", "int", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.IntrinSpace.get_direction", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.IntrinSpace.next_entity"], ["", "def", "walk", "(", "self", ",", "inputs", ",", "index_lst", ",", "trial", ",", "epsilon", ",", "gamma", ")", ":", "\n", "        ", "q_values_lst", "=", "self", ".", "pre_judger", "(", "torch", ".", "FloatTensor", "(", "inputs", ")", ")", ".", "detach", "(", ")", "\n", "ret_index_lst", "=", "[", "]", "\n", "ret_choice_lst", "=", "[", "]", "\n", "for", "i", ",", "q_values", "in", "enumerate", "(", "q_values_lst", ")", ":", "\n", "            ", "p", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "t", "=", "max", "(", "epsilon", "*", "np", ".", "exp", "(", "-", "trial", "*", "gamma", ")", ",", "0.1", ")", "\n", "# print(\"check walker walk\", p, t)", "\n", "if", "p", "<=", "t", ":", "\n", "                ", "choice", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "subspace", ".", "num_direction", ")", "\n", "", "else", ":", "\n", "                ", "_", ",", "choice", "=", "torch", ".", "max", "(", "q_values", ",", "dim", "=", "-", "1", ")", "\n", "", "direction", "=", "self", ".", "subspace", ".", "get_direction", "(", "choice", ")", "\n", "new_index", "=", "self", ".", "subspace", ".", "next_entity", "(", "index_lst", "[", "i", "]", ",", "direction", ")", "\n", "ret_index_lst", ".", "append", "(", "new_index", ")", "\n", "ret_choice_lst", ".", "append", "(", "int", "(", "choice", ")", ")", "\n", "", "return", "ret_index_lst", ",", "ret_choice_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.full_walk": [[111, 117], ["model.Walker.subspace.next_entity", "new_index_lst.append", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.IntrinSpace.next_entity"], ["", "def", "full_walk", "(", "self", ",", "index", ")", ":", "\n", "        ", "new_index_lst", "=", "[", "]", "\n", "for", "d", "in", "self", ".", "subspace", ".", "directions", ":", "\n", "            ", "new_index", "=", "self", ".", "subspace", ".", "next_entity", "(", "index", ",", "d", ")", "\n", "new_index_lst", ".", "append", "(", "new_index", ")", "\n", "", "return", "new_index_lst", ",", "copy", ".", "deepcopy", "(", "self", ".", "subspace", ".", "directions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.add_data": [[118, 121], ["model.Walker.memory.append"], "methods", ["None"], ["", "def", "add_data", "(", "self", ",", "pre_state", ",", "action", ",", "post_state", ",", "reward", ")", ":", "\n", "        ", "self", ".", "memory", ".", "append", "(", "(", "pre_state", ",", "action", ",", "post_state", ",", "reward", ")", ")", "\n", "self", ".", "mem_size", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.train": [[122, 149], ["min", "print", "numpy.random.shuffle", "torch.optim.Adadelta", "torch.optim.Adadelta", "torch.optim.Adadelta", "torch.optim.Adadelta", "range", "model.Walker.pre_judger.parameters", "range", "print", "model.Walker.post_judger().detach", "torch.optim.Adadelta.zero_grad", "torch.optim.Adadelta.zero_grad", "loss.backward", "torch.optim.Adadelta.step", "torch.optim.Adadelta.step", "model.Walker.save_model", "model.Walker.pre_judger", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.optim.Adadelta.zero_grad", "torch.optim.Adadelta.zero_grad", "loss.backward", "torch.optim.Adadelta.step", "torch.optim.Adadelta.step", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "model.Walker.post_judger", "float", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.save_model"], ["", "def", "train", "(", "self", ",", "lr", "=", "0.02", ",", "decay", "=", "0.9", ",", "save", "=", "True", ")", ":", "\n", "        ", "train_data", "=", "self", ".", "memory", "\n", "data_size", "=", "min", "(", "self", ".", "mem_size", ",", "1000", ")", "\n", "print", "(", "\"train walker data size %d\"", "%", "data_size", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_data", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adadelta", "(", "self", ".", "pre_judger", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "for", "ep", "in", "range", "(", "20", ")", ":", "\n", "            ", "loss", "=", "0.0", "\n", "for", "p_data", "in", "range", "(", "data_size", ")", ":", "\n", "                ", "data", "=", "train_data", "[", "p_data", "]", "\n", "pre_state", ",", "action", ",", "post_state", ",", "reward", "=", "data", "\n", "y", "=", "self", ".", "pre_judger", "(", "torch", ".", "FloatTensor", "(", "pre_state", ")", ")", "[", "action", "]", "\n", "t", "=", "self", ".", "post_judger", "(", "torch", ".", "FloatTensor", "(", "post_state", ")", ")", ".", "detach", "(", ")", "\n", "target", "=", "torch", ".", "max", "(", "t", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "*", "decay", "+", "reward", "\n", "loss", "=", "loss", "+", "torch", ".", "pow", "(", "y", "-", "target", ",", "2", ")", "# simple MSE", "\n", "if", "(", "p_data", "+", "1", ")", "%", "32", "==", "0", ":", "\n", "                    ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "loss", "=", "0.0", "\n", "", "", "if", "loss", ">", "0.0", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "if", "save", ":", "\n", "                ", "self", ".", "save_model", "(", "self", ".", "model_path", ")", "\n", "", "print", "(", "\"[cur/total]=[%d/%d] | loss=%f\"", "%", "(", "ep", "+", "1", ",", "20", ",", "float", "(", "loss", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.save_model": [[150, 153], ["model.Walker.post_judger.load_state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "model.Walker.pre_judger.state_dict", "model.Walker.pre_judger.state_dict"], "methods", ["None"], ["", "", "def", "save_model", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "self", ".", "post_judger", ".", "load_state_dict", "(", "self", ".", "pre_judger", ".", "state_dict", "(", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "pre_judger", ".", "state_dict", "(", ")", ",", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.load_model": [[154, 157], ["model.Walker.pre_judger.load_state_dict", "model.Walker.post_judger.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "model.Walker.pre_judger.state_dict"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "self", ".", "pre_judger", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "self", ".", "post_judger", ".", "load_state_dict", "(", "self", ".", "pre_judger", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.save_data": [[158, 163], ["open", "json.dumps", "fout.write"], "methods", ["None"], ["", "def", "save_data", "(", "self", ",", "data_path", ")", ":", "\n", "        ", "with", "open", "(", "data_path", ",", "\"a\"", ")", "as", "fout", ":", "\n", "            ", "for", "data", "in", "self", ".", "memory", ":", "\n", "                ", "string", "=", "json", ".", "dumps", "(", "data", ")", "\n", "fout", ".", "write", "(", "string", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.load_data": [[164, 170], ["open", "tuple", "model.Walker.memory.append", "json.loads"], "methods", ["None"], ["", "", "", "def", "load_data", "(", "self", ",", "data_path", ")", ":", "\n", "        ", "with", "open", "(", "data_path", ",", "\"r\"", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "data", "=", "tuple", "(", "json", ".", "loads", "(", "line", ")", ")", "\n", "self", ".", "memory", ".", "append", "(", "data", ")", "\n", "self", ".", "mem_size", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.dump_data": [[171, 173], ["model.Walker.save_data"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.save_data"], ["", "", "", "def", "dump_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "save_data", "(", "self", ".", "data_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.load_or_create_model": [[174, 179], ["os.path.exists", "model.Walker.save_model", "model.Walker.load_model"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.save_model", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.load_model"], ["", "def", "load_or_create_model", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "model_path", ")", ":", "\n", "            ", "self", ".", "save_model", "(", "self", ".", "model_path", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "load_model", "(", "self", ".", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.prepare_data": [[180, 184], ["model.Walker.load_data", "os.path.exists", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.load_data"], ["", "", "def", "prepare_data", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "data_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Data file not found %s\"", "%", "self", ".", "data_path", ")", "\n", "", "self", ".", "load_data", "(", "self", ".", "data_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.clear_data": [[185, 188], ["model.Walker.memory.clear"], "methods", ["None"], ["", "def", "clear_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "memory", ".", "clear", "(", ")", "\n", "self", ".", "mem_size", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.MemEntity.__init__": [[191, 194], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "indices", ",", "value", ")", ":", "\n", "        ", "self", ".", "indices", "=", "indices", "\n", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.MemEntity.__lt__": [[195, 197], ["None"], "methods", ["None"], ["", "def", "__lt__", "(", "self", ",", "b", ")", ":", "\n", "        ", "return", "self", ".", "value", "<", "b", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.PerformanceModel.__init__": [[211, 242], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.BenchmarkCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_len", ")", ":", "\n", "        ", "super", "(", "PerformanceModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_len", "=", "input_len", "\n", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "self", ".", "input_len", ",", "32", ",", "bias", "=", "True", ")", "\n", "# self.batch_norm1 = nn.BatchNorm1d(128)", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "p", "=", "0.01", ")", "\n", "self", ".", "activate1", "=", "torch", ".", "relu", "\n", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "32", ",", "64", ",", "bias", "=", "True", ")", "\n", "# self.batch_norm2 = nn.BatchNorm1d(128)", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "p", "=", "0.01", ")", "\n", "self", ".", "activate2", "=", "torch", ".", "relu", "\n", "\n", "self", ".", "linear3", "=", "nn", ".", "Linear", "(", "64", ",", "128", ",", "bias", "=", "True", ")", "\n", "# self.batch_norm3 = nn.BatchNorm1d(128)", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "p", "=", "0.01", ")", "\n", "self", ".", "activate3", "=", "torch", ".", "relu", "\n", "\n", "self", ".", "linear4", "=", "nn", ".", "Linear", "(", "128", ",", "64", ",", "bias", "=", "True", ")", "\n", "# self.batch_norm4 = nn.BatchNorm1d(128)", "\n", "self", ".", "dropout4", "=", "nn", ".", "Dropout", "(", "p", "=", "0.01", ")", "\n", "self", ".", "activate4", "=", "torch", ".", "relu", "\n", "\n", "self", ".", "linear5", "=", "nn", ".", "Linear", "(", "64", ",", "16", ",", "bias", "=", "True", ")", "\n", "# self.batch_norm5 = nn.BatchNorm1d(128)", "\n", "# self.dropout5 = nn.Dropout(p=0.2)", "\n", "self", ".", "activate5", "=", "torch", ".", "relu", "\n", "\n", "self", ".", "linear6", "=", "nn", ".", "Linear", "(", "16", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "activate6", "=", "torch", ".", "relu", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.PerformanceModel.forward": [[243, 251], ["model.PerformanceModel.activate1", "model.PerformanceModel.activate2", "model.PerformanceModel.activate3", "model.PerformanceModel.activate4", "model.PerformanceModel.activate5", "model.PerformanceModel.activate6", "model.PerformanceModel.dropout1", "model.PerformanceModel.dropout2", "model.PerformanceModel.dropout3", "model.PerformanceModel.dropout4", "model.PerformanceModel.linear5", "model.PerformanceModel.linear6", "model.PerformanceModel.linear1", "model.PerformanceModel.linear2", "model.PerformanceModel.linear3", "model.PerformanceModel.linear4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "output1", "=", "self", ".", "activate1", "(", "self", ".", "dropout1", "(", "self", ".", "linear1", "(", "inputs", ")", ")", ")", "\n", "output2", "=", "self", ".", "activate2", "(", "self", ".", "dropout2", "(", "self", ".", "linear2", "(", "output1", ")", ")", ")", "\n", "output3", "=", "self", ".", "activate3", "(", "self", ".", "dropout3", "(", "self", ".", "linear3", "(", "output2", ")", ")", ")", "\n", "output4", "=", "self", ".", "activate4", "(", "self", ".", "dropout4", "(", "self", ".", "linear4", "(", "output3", ")", ")", ")", "\n", "output5", "=", "self", ".", "activate5", "(", "self", ".", "linear5", "(", "output4", ")", ")", "\n", "output6", "=", "self", ".", "activate6", "(", "self", ".", "linear6", "(", "output5", ")", ")", "\n", "return", "output6", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.__init__": [[254, 267], ["dict", "model.WalkerGroup.space.items", "set", "model.PerformanceModel", "model.Walker"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items"], ["    ", "def", "__init__", "(", "self", ",", "group_name", ",", "space", ",", "lr", "=", "0.02", ")", ":", "\n", "        ", "self", ".", "space", "=", "space", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "walkers", "=", "dict", "(", ")", "\n", "for", "name", ",", "subspace", "in", "self", ".", "space", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "walkers", "[", "name", "]", "=", "Walker", "(", "group_name", "+", "\"_\"", "+", "name", ",", "subspace", ",", "self", ".", "space", ".", "dim", ")", "\n", "", "self", ".", "memory", "=", "[", "]", "\n", "self", ".", "mem_size", "=", "0", "\n", "self", ".", "visit", "=", "set", "(", ")", "\n", "self", ".", "performance_judger", "=", "PerformanceModel", "(", "self", ".", "space", ".", "dim", ")", "\n", "self", ".", "perfromance_data", "=", "[", "]", "\n", "self", ".", "model_path", "=", "global_performance_judger_path_prefix", "+", "group_name", "+", "\".pkl\"", "\n", "self", ".", "data_path", "=", "global_performance_data_path_prefix", "+", "group_name", "+", "\".txt\"", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.forward": [[268, 278], ["flextensor.utils.assert_print", "dict", "model.WalkerGroup.walkers.items", "walker.random_batch", "walker.best_batch"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.assert_print", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.random_batch", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.best_batch"], ["", "def", "forward", "(", "self", ",", "batch_size", ",", "policy", "=", "\"random\"", ")", ":", "\n", "        ", "assert_print", "(", "policy", "in", "[", "\"random\"", ",", "\"best\"", "]", ")", "\n", "ret", "=", "dict", "(", ")", "\n", "for", "name", ",", "walker", "in", "self", ".", "walkers", ".", "items", "(", ")", ":", "\n", "            ", "if", "policy", "==", "\"random\"", ":", "\n", "                ", "ret_entities", ",", "ret_p_values", "=", "walker", ".", "random_batch", "(", "batch_size", ")", "\n", "", "elif", "policy", "==", "\"best\"", ":", "\n", "                ", "ret_entities", ",", "ret_p_values", "=", "walker", ".", "best_batch", "(", "batch_size", ")", "\n", "", "ret", "[", "name", "]", "=", "(", "ret_entities", ",", "ret_p_values", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.ever_met": [[279, 281], ["str"], "methods", ["None"], ["", "def", "ever_met", "(", "self", ",", "indices", ")", ":", "\n", "        ", "return", "str", "(", "indices", ")", "in", "self", ".", "visit", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.record": [[282, 294], ["model.WalkerGroup.visit.add", "str", "numpy.random.random", "numpy.exp", "heapq.heappush", "heapq.heappush", "model.MemEntity", "model.WalkerGroup.top1_value", "model.MemEntity", "model.WalkerGroup.top1_value"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.Benchmark.add", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1_value", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1_value"], ["", "def", "record", "(", "self", ",", "indices", ",", "value", ",", "random_reject", "=", "False", ",", "gamma", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "visit", ".", "add", "(", "str", "(", "indices", ")", ")", "\n", "if", "random_reject", ":", "\n", "            ", "p", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "t", "=", "np", ".", "exp", "(", "-", "gamma", "*", "(", "value", "-", "self", ".", "top1_value", "(", ")", ")", "/", "self", ".", "top1_value", "(", ")", ")", "\n", "# print(\"record \", p, t, value, self.top1_value())", "\n", "if", "p", "<=", "t", ":", "\n", "                ", "heapq", ".", "heappush", "(", "self", ".", "memory", ",", "MemEntity", "(", "indices", ",", "value", ")", ")", "\n", "self", ".", "mem_size", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "heapq", ".", "heappush", "(", "self", ".", "memory", ",", "MemEntity", "(", "indices", ",", "value", ")", ")", "\n", "self", ".", "mem_size", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.has_more": [[295, 297], ["None"], "methods", ["None"], ["", "", "def", "has_more", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mem_size", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.str2dict": [[298, 302], ["dict", "int", "model.WalkerGroup.str2dict._f"], "methods", ["None"], ["", "def", "str2dict", "(", "self", ",", "s", ")", ":", "\n", "        ", "def", "_f", "(", "lst", ")", ":", "\n", "            ", "return", "(", "lst", "[", "0", "]", ",", "int", "(", "lst", "[", "1", "]", ")", ")", "\n", "", "return", "dict", "(", "[", "_f", "(", "x", ".", "split", "(", "\":\"", ")", ")", "for", "x", "in", "s", "[", "1", ":", "-", "1", "]", ".", "split", "(", "\", \"", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.flatten": [[303, 309], ["indices.items", "model.WalkerGroup.walkers[].subspace.get_entity", "ret.extend"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.SubSpace.get_entity"], ["", "def", "flatten", "(", "self", ",", "indices", ")", ":", "\n", "        ", "ret", "=", "[", "]", "\n", "for", "name", ",", "index", "in", "indices", ".", "items", "(", ")", ":", "\n", "            ", "entity", "=", "self", ".", "walkers", "[", "name", "]", ".", "subspace", ".", "get_entity", "(", "index", ")", "\n", "ret", ".", "extend", "(", "entity", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.to_config": [[310, 318], ["dict", "model.WalkerGroup.space.types.items", "ret[].append", "model.WalkerGroup.walkers[].subspace.get_entity"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.SubSpace.get_entity"], ["", "def", "to_config", "(", "self", ",", "indices", ")", ":", "\n", "        ", "ret", "=", "dict", "(", ")", "\n", "for", "type_key", ",", "name_lst", "in", "self", ".", "space", ".", "types", ".", "items", "(", ")", ":", "\n", "            ", "ret", "[", "type_key", "]", "=", "[", "]", "\n", "for", "name", "in", "name_lst", ":", "\n", "                ", "if", "name", "in", "indices", ":", "\n", "                    ", "ret", "[", "type_key", "]", ".", "append", "(", "self", ".", "walkers", "[", "name", "]", ".", "subspace", ".", "get_entity", "(", "indices", "[", "name", "]", ")", ")", "\n", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.record_best": [[319, 322], ["best_indice.items", "model.WalkerGroup.walkers[].record_best"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.record_best"], ["", "def", "record_best", "(", "self", ",", "best_indice", ",", "best_value", ")", ":", "\n", "        ", "for", "name", ",", "index", "in", "best_indice", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "walkers", "[", "name", "]", ".", "record_best", "(", "index", ",", "best_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top_random": [[323, 336], ["numpy.random.choice", "numpy.random.random", "numpy.exp", "model.WalkerGroup.top1", "model.WalkerGroup.top1_value", "model.WalkerGroup.top1", "model.WalkerGroup.top1_value", "model.WalkerGroup.top1_value"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1_value", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1_value", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1_value"], ["", "", "def", "top_random", "(", "self", ",", "gamma", "=", "0.5", ",", "with_value", "=", "False", ")", ":", "\n", "        ", "e", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "memory", ")", "\n", "p", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "t", "=", "np", ".", "exp", "(", "-", "gamma", "*", "(", "e", ".", "value", "-", "self", ".", "top1_value", "(", ")", ")", "/", "self", ".", "top1_value", "(", ")", ")", "\n", "# print(\"top random\", p, t, e.value, self.top1_value())", "\n", "if", "p", "<=", "t", ":", "\n", "            ", "if", "with_value", ":", "\n", "                ", "return", "e", ".", "indices", ",", "e", ".", "value", "\n", "", "return", "e", ".", "indices", "\n", "", "else", ":", "\n", "            ", "if", "with_value", ":", "\n", "                ", "return", "self", ".", "top1", "(", ")", ",", "self", ".", "top1_value", "(", ")", "\n", "", "return", "self", ".", "top1", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.topk": [[337, 352], ["range", "heapq.heappop", "ret.append", "heapq.heappush"], "methods", ["None"], ["", "", "def", "topk", "(", "self", ",", "k", ",", "modify", "=", "False", ",", "with_value", "=", "False", ")", ":", "\n", "        ", "if", "k", ">", "self", ".", "mem_size", ":", "\n", "            ", "k", "=", "self", ".", "mem_size", "\n", "", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "            ", "tmp", "=", "heapq", ".", "heappop", "(", "self", ".", "memory", ")", "\n", "ret", ".", "append", "(", "tmp", ")", "\n", "", "self", ".", "mem_size", "-=", "k", "\n", "if", "not", "modify", ":", "\n", "            ", "for", "tmp", "in", "ret", ":", "\n", "                ", "heapq", ".", "heappush", "(", "self", ".", "memory", ",", "tmp", ")", "\n", "", "self", ".", "mem_size", "+=", "k", "\n", "", "if", "with_value", ":", "\n", "            ", "return", "[", "(", "x", ".", "indices", ",", "x", ".", "value", ")", "for", "x", "in", "ret", "]", "\n", "", "return", "[", "x", ".", "indices", "for", "x", "in", "ret", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1": [[353, 358], ["None"], "methods", ["None"], ["", "def", "top1", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mem_size", ">", "0", ":", "\n", "            ", "return", "self", ".", "memory", "[", "0", "]", ".", "indices", "\n", "", "else", ":", "\n", "            ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.top1_value": [[359, 364], ["float"], "methods", ["None"], ["", "", "def", "top1_value", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mem_size", ">", "0", ":", "\n", "            ", "return", "self", ".", "memory", "[", "0", "]", ".", "value", "\n", "", "else", ":", "\n", "            ", "return", "float", "(", "\"inf\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.pop_top": [[365, 371], ["heapq.heappop", "model.MemEntity", "float"], "methods", ["None"], ["", "", "def", "pop_top", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mem_size", ">", "0", ":", "\n", "            ", "self", ".", "mem_size", "-=", "1", "\n", "return", "heapq", ".", "heappop", "(", "self", ".", "memory", ")", "\n", "", "else", ":", "\n", "            ", "return", "MemEntity", "(", "{", "}", ",", "float", "(", "\"inf\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.walk": [[372, 391], ["model.WalkerGroup.walkers.keys", "model.WalkerGroup.flatten", "model.WalkerGroup.walkers[].walk", "copy.deepcopy", "enumerate", "model.WalkerGroup.ever_met", "ret_from_lst.append", "ret_indices_lst.append", "ret_action_lst.append"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.flatten", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.walk", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.ever_met"], ["", "", "def", "walk", "(", "self", ",", "indices_value_lst", ",", "trial", ",", "epsilon", "=", "0.8", ",", "gamma", "=", "0.01", ")", ":", "\n", "        ", "indices_lst", ",", "value_lst", "=", "[", "x", "[", "0", "]", "for", "x", "in", "indices_value_lst", "]", ",", "[", "x", "[", "1", "]", "for", "x", "in", "indices_value_lst", "]", "\n", "# perform one step walk", "\n", "flattened_lst", "=", "[", "self", ".", "flatten", "(", "indices", ")", "for", "indices", "in", "indices_lst", "]", "\n", "ret_from_lst", "=", "[", "]", "\n", "ret_indices_lst", "=", "[", "]", "\n", "ret_action_lst", "=", "[", "]", "\n", "for", "name", "in", "self", ".", "walkers", ".", "keys", "(", ")", ":", "\n", "            ", "index_lst", "=", "[", "indices", "[", "name", "]", "for", "indices", "in", "indices_lst", "]", "\n", "next_index_lst", ",", "direction_lst", "=", "self", ".", "walkers", "[", "name", "]", ".", "walk", "(", "flattened_lst", ",", "index_lst", ",", "trial", ",", "epsilon", ",", "gamma", ")", "\n", "next_indices_lst", "=", "copy", ".", "deepcopy", "(", "indices_lst", ")", "\n", "for", "i", ",", "next_indices", "in", "enumerate", "(", "next_indices_lst", ")", ":", "\n", "                ", "next_indices", "[", "name", "]", "=", "next_index_lst", "[", "i", "]", "\n", "action", "=", "(", "name", ",", "direction_lst", "[", "i", "]", ")", "\n", "if", "not", "self", ".", "ever_met", "(", "next_indices", ")", ":", "\n", "                    ", "ret_from_lst", ".", "append", "(", "(", "indices_lst", "[", "i", "]", ",", "value_lst", "[", "i", "]", ")", ")", "\n", "ret_indices_lst", ".", "append", "(", "next_indices", ")", "\n", "ret_action_lst", ".", "append", "(", "action", ")", "\n", "", "", "", "return", "ret_from_lst", ",", "ret_indices_lst", ",", "ret_action_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.full_walk": [[392, 408], ["indices.items", "model.WalkerGroup.walkers[].full_walk", "zip", "copy.deepcopy", "next_indices_lst.append", "action_lst.append", "model.WalkerGroup.ever_met", "next_indices_lst.append", "action_lst.append"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.full_walk", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.ever_met"], ["", "def", "full_walk", "(", "self", ",", "indices", ",", "no_repeat", "=", "True", ")", ":", "\n", "        ", "next_indices_lst", "=", "[", "]", "\n", "action_lst", "=", "[", "]", "\n", "for", "name", ",", "index", "in", "indices", ".", "items", "(", ")", ":", "\n", "            ", "next_index_lst", ",", "actions", "=", "self", ".", "walkers", "[", "name", "]", ".", "full_walk", "(", "index", ")", "\n", "for", "next_index", ",", "action", "in", "zip", "(", "next_index_lst", ",", "actions", ")", ":", "\n", "                ", "next_indices", "=", "copy", ".", "deepcopy", "(", "indices", ")", "\n", "next_indices", "[", "name", "]", "=", "next_index", "\n", "if", "no_repeat", ":", "\n", "                    ", "if", "not", "self", ".", "ever_met", "(", "next_indices", ")", ":", "\n", "                        ", "next_indices_lst", ".", "append", "(", "next_indices", ")", "\n", "action_lst", ".", "append", "(", "(", "name", ",", "action", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "next_indices_lst", ".", "append", "(", "next_indices", ")", "\n", "action_lst", ".", "append", "(", "action", ")", "\n", "", "", "", "return", "next_indices_lst", ",", "action_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.add_data": [[409, 411], ["model.WalkerGroup.walkers[].add_data", "model.WalkerGroup.flatten", "model.WalkerGroup.flatten"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.add_data", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.flatten", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.flatten"], ["", "def", "add_data", "(", "self", ",", "name", ",", "pre_state", ",", "action", ",", "post_state", ",", "reward", ")", ":", "\n", "        ", "self", ".", "walkers", "[", "name", "]", ".", "add_data", "(", "self", ".", "flatten", "(", "pre_state", ")", ",", "action", ",", "self", ".", "flatten", "(", "post_state", ")", ",", "reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.train_walkers": [[412, 415], ["model.WalkerGroup.walkers.items", "walker.train"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.train"], ["", "def", "train_walkers", "(", "self", ")", ":", "\n", "        ", "for", "_", ",", "walker", "in", "self", ".", "walkers", ".", "items", "(", ")", ":", "\n", "            ", "walker", ".", "train", "(", "lr", "=", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.add_perf_data": [[416, 421], ["model.WalkerGroup.perfromance_data.append", "inputs.append", "model.WalkerGroup.flatten"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.flatten"], ["", "", "def", "add_perf_data", "(", "self", ",", "indices_lst", ",", "performance_lst", ")", ":", "\n", "        ", "inputs", "=", "[", "]", "\n", "for", "indices", "in", "indices_lst", ":", "\n", "            ", "inputs", ".", "append", "(", "self", ".", "flatten", "(", "indices", ")", ")", "\n", "", "self", ".", "perfromance_data", ".", "append", "(", "(", "inputs", ",", "performance_lst", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.train_on_perf": [[422, 450], ["min", "print", "numpy.random.shuffle", "torch.optim.Adadelta", "torch.optim.Adadelta", "torch.optim.Adadelta", "torch.optim.Adadelta", "range", "len", "model.WalkerGroup.performance_judger.parameters", "range", "print", "model.WalkerGroup.performance_judger().reshape", "model.rank_loss", "rank_loss.detach", "torch.optim.Adadelta.zero_grad", "torch.optim.Adadelta.zero_grad", "loss.backward", "torch.optim.Adadelta.step", "torch.optim.Adadelta.step", "model.WalkerGroup.save_performance_judger", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.optim.Adadelta.zero_grad", "torch.optim.Adadelta.zero_grad", "loss.backward", "torch.optim.Adadelta.step", "torch.optim.Adadelta.step", "model.WalkerGroup.performance_judger", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.rank_loss", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.save_performance_judger"], ["", "def", "train_on_perf", "(", "self", ",", "save", "=", "True", ")", ":", "\n", "        ", "train_data", "=", "self", ".", "perfromance_data", "\n", "data_size", "=", "min", "(", "len", "(", "train_data", ")", ",", "1000", ")", "\n", "print", "(", "\"train data size is %d\"", "%", "data_size", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_data", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adadelta", "(", "self", ".", "performance_judger", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", "\n", "for", "ep", "in", "range", "(", "20", ")", ":", "\n", "            ", "loss", "=", "0.0", "\n", "full_loss", "=", "0.0", "\n", "for", "p_data", "in", "range", "(", "data_size", ")", ":", "\n", "                ", "x", "=", "train_data", "[", "p_data", "]", "[", "0", "]", "\n", "t", "=", "train_data", "[", "p_data", "]", "[", "1", "]", "\n", "y", "=", "self", ".", "performance_judger", "(", "torch", ".", "FloatTensor", "(", "x", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "tmp_loss", "=", "rank_loss", "(", "y", ",", "torch", ".", "FloatTensor", "(", "t", ")", ")", "\n", "loss", "=", "loss", "+", "tmp_loss", "\n", "full_loss", "+=", "tmp_loss", ".", "detach", "(", ")", "\n", "if", "(", "p_data", "+", "1", ")", "%", "32", "==", "0", ":", "\n", "                    ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "loss", "=", "0.0", "\n", "", "", "if", "loss", ">", "0.0", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "if", "save", ":", "\n", "                ", "self", ".", "save_performance_judger", "(", "self", ".", "model_path", ")", "\n", "", "print", "(", "\"[cur/total]=[%d/%d] | loss=%f\"", "%", "(", "ep", "+", "1", ",", "20", ",", "full_loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.test_accuracy": [[451, 464], ["min", "print", "numpy.random.shuffle", "range", "len", "model.WalkerGroup.performance_judger().reshape", "model.rank_loss", "float", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "loss.detach", "model.WalkerGroup.performance_judger", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.rank_loss"], ["", "", "def", "test_accuracy", "(", "self", ")", ":", "\n", "        ", "train_data", "=", "self", ".", "perfromance_data", "\n", "data_size", "=", "min", "(", "len", "(", "train_data", ")", ",", "1000", ")", "\n", "print", "(", "\"test data size is %d\"", "%", "data_size", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_data", ")", "\n", "loss", "=", "0.0", "\n", "for", "p_data", "in", "range", "(", "data_size", ")", ":", "\n", "            ", "x", "=", "train_data", "[", "p_data", "]", "[", "0", "]", "\n", "t", "=", "train_data", "[", "p_data", "]", "[", "1", "]", "\n", "y", "=", "self", ".", "performance_judger", "(", "torch", ".", "FloatTensor", "(", "x", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "tmp_loss", "=", "rank_loss", "(", "y", ",", "torch", ".", "FloatTensor", "(", "t", ")", ")", "\n", "loss", "=", "loss", "+", "tmp_loss", "\n", "", "return", "float", "(", "loss", ".", "detach", "(", ")", ")", "/", "data_size", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.query_performance": [[465, 474], ["model.WalkerGroup.performance_judger().reshape", "model.WalkerGroup.detach().tolist", "inputs.append", "model.WalkerGroup.flatten", "model.WalkerGroup.performance_judger", "model.WalkerGroup.detach", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.flatten"], ["", "def", "query_performance", "(", "self", ",", "indices_lst", ")", ":", "\n", "        ", "inputs", "=", "[", "]", "\n", "for", "indices", "in", "indices_lst", ":", "\n", "            ", "inputs", ".", "append", "(", "self", ".", "flatten", "(", "indices", ")", ")", "\n", "# empty inputs", "\n", "", "if", "not", "inputs", ":", "\n", "            ", "return", "[", "]", "\n", "", "perf_lst", "=", "self", ".", "performance_judger", "(", "torch", ".", "FloatTensor", "(", "inputs", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "return", "perf_lst", ".", "detach", "(", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.load_performance_judger": [[475, 477], ["model.WalkerGroup.performance_judger.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["None"], ["", "def", "load_performance_judger", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "self", ".", "performance_judger", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.save_performance_judger": [[478, 480], ["torch.save", "torch.save", "torch.save", "torch.save", "model.WalkerGroup.performance_judger.state_dict"], "methods", ["None"], ["", "def", "save_performance_judger", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "torch", ".", "save", "(", "self", ".", "performance_judger", ".", "state_dict", "(", ")", ",", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.dump_performance_data": [[481, 486], ["open", "json.dumps", "fout.write"], "methods", ["None"], ["", "def", "dump_performance_data", "(", "self", ",", "data_path", ")", ":", "\n", "        ", "with", "open", "(", "data_path", ",", "\"a\"", ")", "as", "fout", ":", "\n", "            ", "for", "data", "in", "self", ".", "perfromance_data", ":", "\n", "                ", "string", "=", "json", ".", "dumps", "(", "data", ")", "\n", "fout", ".", "write", "(", "string", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.load_performance_data": [[487, 492], ["open", "tuple", "model.WalkerGroup.perfromance_data.append", "json.loads"], "methods", ["None"], ["", "", "", "def", "load_performance_data", "(", "self", ",", "data_path", ")", ":", "\n", "        ", "with", "open", "(", "data_path", ",", "\"r\"", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "data", "=", "tuple", "(", "json", ".", "loads", "(", "line", ")", ")", "\n", "self", ".", "perfromance_data", ".", "append", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.dump_data": [[493, 497], ["model.WalkerGroup.dump_performance_data", "model.WalkerGroup.walkers.items", "walker.dump_data"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.dump_performance_data", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.dump_data"], ["", "", "", "def", "dump_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "dump_performance_data", "(", "self", ".", "data_path", ")", "\n", "for", "_", ",", "walker", "in", "self", ".", "walkers", ".", "items", "(", ")", ":", "\n", "            ", "walker", ".", "dump_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.load_walker_model": [[498, 501], ["model.WalkerGroup.walkers.items", "walker.load_or_create_model"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.load_or_create_model"], ["", "", "def", "load_walker_model", "(", "self", ")", ":", "\n", "        ", "for", "_", ",", "walker", "in", "self", ".", "walkers", ".", "items", "(", ")", ":", "\n", "            ", "walker", ".", "load_or_create_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.load_walker_data": [[502, 505], ["model.WalkerGroup.walkers.items", "walker.prepare_data"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.Walker.prepare_data"], ["", "", "def", "load_walker_data", "(", "self", ")", ":", "\n", "        ", "for", "_", ",", "walker", "in", "self", ".", "walkers", ".", "items", "(", ")", ":", "\n", "            ", "walker", ".", "prepare_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.prepare_performance_data": [[506, 510], ["model.WalkerGroup.load_performance_data", "os.path.exists", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.load_performance_data"], ["", "", "def", "prepare_performance_data", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "data_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Performance data file not found %s\"", "%", "self", ".", "data_path", ")", "\n", "", "self", ".", "load_performance_data", "(", "self", ".", "data_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.load_or_create_model": [[511, 516], ["os.path.exists", "model.WalkerGroup.save_performance_judger", "model.WalkerGroup.load_performance_judger"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.save_performance_judger", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.load_performance_judger"], ["", "def", "load_or_create_model", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "model_path", ")", ":", "\n", "            ", "self", ".", "save_performance_judger", "(", "self", ".", "model_path", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "load_performance_judger", "(", "self", ".", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.clear_performance_data": [[517, 519], ["model.WalkerGroup.perfromance_data.clear"], "methods", ["None"], ["", "", "def", "clear_performance_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "perfromance_data", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.clear_walker_data": [[520, 523], ["model.WalkerGroup.walkers.items", "walker.clear_data"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.clear_data"], ["", "def", "clear_walker_data", "(", "self", ")", ":", "\n", "        ", "for", "_", ",", "walker", "in", "self", ".", "walkers", ".", "items", "(", ")", ":", "\n", "            ", "walker", ".", "clear_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.clear_data": [[524, 527], ["model.WalkerGroup.clear_performance_data"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.WalkerGroup.clear_performance_data"], ["", "", "def", "clear_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "clear_performance_data", "(", ")", "\n", "self", ".", "clear_walker_data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.flatten": [[37, 45], ["isinstance", "ret.extend", "ret.append", "list"], "function", ["None"], ["", "", "def", "flatten", "(", "x", ")", ":", "\n", "    ", "ret", "=", "[", "]", "\n", "for", "v", "in", "x", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "ret", ".", "extend", "(", "list", "(", "v", ")", ")", "\n", "", "else", ":", "\n", "            ", "ret", ".", "append", "(", "v", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model.rank_loss": [[199, 208], ["len", "range", "len", "len", "range", "torch.sign", "torch.sign", "torch.log", "torch.log", "torch.exp", "torch.exp"], "function", ["None"], ["", "", "def", "rank_loss", "(", "y", ",", "t", ")", ":", "\n", "    ", "assert", "len", "(", "y", ")", "==", "len", "(", "t", ")", "\n", "length", "=", "len", "(", "y", ")", "\n", "loss", "=", "0.0", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "length", ")", ":", "\n", "            ", "tmp", "=", "torch", ".", "sign", "(", "t", "[", "i", "]", "-", "t", "[", "j", "]", ")", "*", "(", "y", "[", "i", "]", "-", "y", "[", "j", "]", ")", "\n", "loss", "=", "loss", "+", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "-", "tmp", ")", ")", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.task.Task.__init__": [[9, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "category", ",", "name", ",", "func", ",", "args", ",", "target", ",", "dev_id", "=", "0", ")", ":", "\n", "        ", "self", ".", "key", "=", "\"{}_{}_{}_{}({})\"", ".", "format", "(", "category", ",", "name", ",", "args", ",", "target", ",", "dev_id", ")", "#", "\n", "self", ".", "func", "=", "func", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "dev_id", "=", "dev_id", "\n", "self", ".", "category", "=", "category", "\n", "self", ".", "special_space", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.task.Task.set_specific_space": [[18, 23], ["flextensor.space.EnumSpace", "RuntimeError"], "methods", ["None"], ["", "def", "set_specific_space", "(", "self", ",", "key", ",", "type", ",", "knobs", ")", ":", "\n", "        ", "if", "type", "==", "\"enum\"", ":", "\n", "            ", "self", ".", "special_space", "[", "key", "]", "=", "EnumSpace", "(", "knobs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Not supported space type: %s\"", "%", "type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.task.register_task": [[25, 29], ["None"], "function", ["None"], ["", "", "", "def", "register_task", "(", "task", ",", "override", "=", "False", ")", ":", "\n", "    ", "if", "task", ".", "key", "in", "TASK_TABLE", "and", "not", "override", ":", "\n", "        ", "pass", "# print(\"[Warning]: Same task occurs again %s\" % task.key)", "\n", "", "TASK_TABLE", "[", "task", ".", "key", "]", "=", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.task.register": [[31, 34], ["task.Task", "task.register_task"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.task.register_task"], ["", "def", "register", "(", "func", ",", "category", ",", "name", ",", "args", ",", "target", ",", "dev_id", "=", "0", ",", "override", "=", "False", ")", ":", "\n", "    ", "task", "=", "Task", "(", "category", ",", "name", ",", "func", ",", "args", ",", "target", ",", "dev_id", ")", "\n", "register_task", "(", "task", ",", "override", "=", "override", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.RpcInfo.__init__": [[14, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "host", ",", "port", ",", "target_host", "=", "None", ")", ":", "\n", "        ", "self", ".", "host", "=", "host", "\n", "self", ".", "port", "=", "port", "\n", "self", ".", "target_host", "=", "target_host", "\n", "self", ".", "target", "=", "None", "\n", "self", ".", "micro_device_config", "=", "None", "\n", "self", ".", "aux_sources", "=", "None", "\n", "self", ".", "aux_options", "=", "None", "\n", "self", ".", "server_ip", "=", "None", "\n", "self", ".", "server_port", "=", "None", "\n", "self", ".", "device_key", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.to_int": [[27, 33], ["int", "RuntimeError", "str"], "function", ["None"], ["", "", "def", "to_int", "(", "expr", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "res", "=", "int", "(", "expr", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"fail to convert to int: %s\"", "%", "str", "(", "e", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.to_tuple": [[35, 37], ["tuple", "utils.to_int"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.to_int"], ["", "def", "to_tuple", "(", "expr_tuple", ")", ":", "\n", "    ", "return", "tuple", "(", "[", "to_int", "(", "x", ")", "for", "x", "in", "expr_tuple", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.int_to_lst": [[39, 54], ["isinstance"], "function", ["None"], ["", "def", "int_to_lst", "(", "value", ",", "bit", "=", "32", ",", "base", "=", "10", ")", ":", "\n", "    ", "assert", "isinstance", "(", "value", ",", "int", ")", "\n", "ret", "=", "[", "0", "]", "*", "bit", "\n", "cur", "=", "0", "\n", "if", "value", "<", "0", ":", "\n", "        ", "f", "=", "-", "1", "\n", "value", "=", "-", "value", "\n", "", "else", ":", "\n", "        ", "f", "=", "1", "\n", "", "while", "value", "!=", "0", ":", "\n", "        ", "r", "=", "value", "%", "base", "\n", "value", "=", "value", "//", "base", "\n", "ret", "[", "cur", "]", "=", "r", "*", "f", "\n", "cur", "+=", "1", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.powerx_lst": [[56, 65], ["ret.append"], "function", ["None"], ["", "def", "powerx_lst", "(", "x", ",", "left", ",", "right", ")", ":", "\n", "    ", "ret", "=", "[", "]", "\n", "beg", "=", "1", "\n", "while", "beg", "<", "left", ":", "\n", "        ", "beg", "*=", "x", "\n", "", "while", "beg", "<", "right", ":", "\n", "        ", "ret", ".", "append", "(", "beg", ")", "\n", "beg", "=", "beg", "*", "x", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.get_factor_lst": [[67, 79], ["isinstance", "math.sqrt", "range", "math.ceil", "ret.append", "ret.append", "ret.append", "int", "int", "int"], "function", ["None"], ["", "def", "get_factor_lst", "(", "value", ")", ":", "\n", "    ", "assert", "isinstance", "(", "value", ",", "int", ")", "\n", "ret", "=", "[", "]", "\n", "end", "=", "math", ".", "sqrt", "(", "value", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "math", ".", "ceil", "(", "end", ")", ")", ":", "\n", "        ", "if", "value", "%", "i", "==", "0", ":", "\n", "            ", "ret", ".", "append", "(", "i", ")", "\n", "ret", ".", "append", "(", "value", "//", "i", ")", "\n", "", "", "if", "end", "-", "int", "(", "end", ")", "<", "1e-10", "and", "value", "%", "int", "(", "end", ")", "==", "0", ":", "\n", "        ", "ret", ".", "append", "(", "int", "(", "end", ")", ")", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.split_part_names": [[81, 84], ["isinstance", "isinstance", "str", "range"], "function", ["None"], ["", "def", "split_part_names", "(", "original", ",", "parts", ")", ":", "\n", "    ", "assert", "isinstance", "(", "original", ",", "str", ")", "and", "isinstance", "(", "parts", ",", "int", ")", "\n", "return", "[", "original", "+", "\".\"", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "parts", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.str_to_tuple": [[86, 89], ["isinstance", "tuple", "int", "[].split", "s.strip"], "function", ["None"], ["", "def", "str_to_tuple", "(", "s", ")", ":", "\n", "    ", "assert", "isinstance", "(", "s", ",", "str", ")", "\n", "return", "tuple", "(", "int", "(", "x", ")", "for", "x", "in", "s", ".", "strip", "(", ")", "[", "1", ":", "-", "1", "]", ".", "split", "(", "\",\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.any_factor_split": [[91, 97], ["utils.assert_print", "utils.recursive_factor_split", "isinstance"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.assert_print", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.recursive_factor_split"], ["", "def", "any_factor_split", "(", "value", ",", "number", ",", "allow_non_divisible", "=", "'off'", ")", ":", "\n", "    ", "assert", "allow_non_divisible", "in", "[", "'off'", ",", "'power2'", ",", "'continuous'", "]", "\n", "ret", "=", "[", "]", "\n", "assert_print", "(", "isinstance", "(", "number", ",", "int", ")", ")", "\n", "recursive_factor_split", "(", "value", ",", "[", "]", ",", "number", ",", "ret", ",", "allow_non_divisible", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.recursive_factor_split": [[99, 114], ["ret.append", "utils.get_factor_lst", "sorted.extend", "list", "utils.recursive_factor_split", "utils.powerx_lst", "set", "list", "utils.get_factor_lst", "sorted", "range"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.get_factor_lst", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.recursive_factor_split", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.powerx_lst", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.get_factor_lst"], ["", "def", "recursive_factor_split", "(", "left", ",", "cur", ",", "number", ",", "ret", ",", "policy", ")", ":", "\n", "    ", "if", "number", "==", "1", ":", "\n", "        ", "ret", ".", "append", "(", "cur", "+", "[", "left", "]", ")", "\n", "return", "\n", "", "if", "policy", "==", "'power2'", ":", "\n", "        ", "f_lst", "=", "get_factor_lst", "(", "left", ")", "\n", "f_lst", ".", "extend", "(", "powerx_lst", "(", "2", ",", "1", ",", "left", ")", ")", "\n", "f_lst", "=", "list", "(", "set", "(", "f_lst", ")", ")", "\n", "", "elif", "policy", "==", "'continuous'", ":", "\n", "        ", "f_lst", "=", "list", "(", "range", "(", "1", ",", "left", "+", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "f_lst", "=", "get_factor_lst", "(", "left", ")", "\n", "f_lst", "=", "sorted", "(", "f_lst", ")", "\n", "", "for", "f", "in", "f_lst", ":", "\n", "        ", "recursive_factor_split", "(", "left", "//", "f", ",", "cur", "+", "[", "f", "]", ",", "number", "-", "1", ",", "ret", ",", "policy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.three_factor_split": [[116, 126], ["isinstance", "range", "utils.get_factor_lst", "ret.append"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.get_factor_lst"], ["", "", "def", "three_factor_split", "(", "value", ")", ":", "\n", "    ", "assert", "isinstance", "(", "value", ",", "int", ")", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "value", "+", "1", ")", ":", "\n", "        ", "if", "value", "%", "i", "==", "0", ":", "\n", "            ", "res", "=", "value", "//", "i", "\n", "factor_lst", "=", "get_factor_lst", "(", "res", ")", "\n", "for", "factor", "in", "factor_lst", ":", "\n", "                ", "ret", ".", "append", "(", "(", "i", ",", "factor", ",", "res", "//", "factor", ")", ")", "\n", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.two_factor_split": [[128, 135], ["isinstance", "range", "ret.append"], "function", ["None"], ["", "def", "two_factor_split", "(", "value", ")", ":", "\n", "    ", "assert", "isinstance", "(", "value", ",", "int", ")", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "value", "+", "1", ")", ":", "\n", "        ", "if", "value", "%", "i", "==", "0", ":", "\n", "            ", "ret", ".", "append", "(", "(", "i", ",", "value", "//", "i", ")", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.dev": [[137, 141], ["torch.mean", "torch.pow", "torch.sum", "torch.pow"], "function", ["None"], ["", "def", "dev", "(", "input", ")", ":", "\n", "    ", "import", "torch", "\n", "m", "=", "torch", ".", "mean", "(", "input", ",", "dim", "=", "-", "1", ")", "\n", "return", "torch", ".", "pow", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "input", "-", "m", ",", "2", ")", ")", ",", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils._dfs_interleave": [[143, 160], ["utils._dfs_interleave", "utils._dfs_interleave", "res.append", "res.append", "tmp.append", "tmp.append"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils._dfs_interleave", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils._dfs_interleave"], ["", "def", "_dfs_interleave", "(", "cur", ",", "la", ",", "lb", ",", "pa", ",", "pb", ",", "enda", ",", "endb", ",", "res", ")", ":", "\n", "    ", "tmp", "=", "[", "]", "\n", "if", "pa", "==", "enda", ":", "\n", "        ", "while", "pb", "!=", "endb", ":", "\n", "            ", "tmp", ".", "append", "(", "lb", "[", "pb", "]", ")", "\n", "pb", "+=", "1", "\n", "", "res", ".", "append", "(", "cur", "+", "tmp", ")", "\n", "return", "\n", "", "if", "pb", "==", "endb", ":", "\n", "        ", "while", "pa", "!=", "enda", ":", "\n", "            ", "tmp", ".", "append", "(", "la", "[", "pa", "]", ")", "\n", "pa", "+=", "1", "\n", "", "res", ".", "append", "(", "cur", "+", "tmp", ")", "\n", "return", "\n", "", "_dfs_interleave", "(", "cur", "+", "[", "la", "[", "pa", "]", "]", ",", "la", ",", "lb", ",", "pa", "+", "1", ",", "pb", ",", "enda", ",", "endb", ",", "res", ")", "\n", "_dfs_interleave", "(", "cur", "+", "[", "lb", "[", "pb", "]", "]", ",", "la", ",", "lb", ",", "pa", ",", "pb", "+", "1", ",", "enda", ",", "endb", ",", "res", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.interleave": [[162, 166], ["utils._dfs_interleave", "len", "len"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils._dfs_interleave"], ["", "def", "interleave", "(", "la", ",", "lb", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "_dfs_interleave", "(", "[", "]", ",", "la", ",", "lb", ",", "0", ",", "0", ",", "len", "(", "la", ")", ",", "len", "(", "lb", ")", ",", "res", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.permute": [[168, 171], ["list", "permutations", "len"], "function", ["None"], ["", "def", "permute", "(", "lst", ")", ":", "\n", "    ", "from", "itertools", "import", "permutations", "\n", "return", "[", "list", "(", "x", ")", "for", "x", "in", "permutations", "(", "lst", ",", "len", "(", "lst", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.gumbel_softmax": [[173, 185], ["torch.rand_like", "torch.softmax", "torch.softmax.max", "torch.zeros_like().view", "hard_y.view.scatter_", "hard_y.view.view", "index.view", "Variable", "torch.zeros_like", "torch.log", "torch.log"], "function", ["None"], ["", "def", "gumbel_softmax", "(", "logits", ")", ":", "\n", "    ", "import", "torch", "\n", "from", "torch", ".", "autograd", "import", "Variable", "\n", "epsilon", "=", "1e-20", "\n", "G", "=", "torch", ".", "rand_like", "(", "logits", ")", "\n", "y", "=", "logits", "+", "-", "Variable", "(", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "G", "+", "epsilon", ")", "+", "epsilon", ")", ")", "\n", "soft_y", "=", "torch", ".", "softmax", "(", "y", ",", "dim", "=", "-", "1", ")", "\n", "_", ",", "index", "=", "soft_y", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "hard_y", "=", "torch", ".", "zeros_like", "(", "soft_y", ")", ".", "view", "(", "-", "1", ",", "soft_y", ".", "shape", "[", "-", "1", "]", ")", "\n", "hard_y", ".", "scatter_", "(", "1", ",", "index", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "hard_y", "=", "hard_y", ".", "view", "(", "*", "soft_y", ".", "shape", ")", "\n", "return", "soft_y", "+", "(", "hard_y", "-", "soft_y", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.parted_linear": [[187, 192], ["torch.relu", "torch.relu"], "function", ["None"], ["", "def", "parted_linear", "(", "x", ",", "left", ",", "right", ")", ":", "\n", "    ", "import", "torch", "\n", "if", "left", ">", "right", ":", "\n", "        ", "left", ",", "right", "=", "right", ",", "left", "\n", "", "return", "torch", ".", "relu", "(", "right", "-", "torch", ".", "relu", "(", "right", "-", "x", ")", "-", "left", ")", "+", "left", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils._dfs_gen_enum": [[194, 201], ["res.append", "utils._dfs_gen_enum"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils._dfs_gen_enum"], ["", "def", "_dfs_gen_enum", "(", "cur", ",", "cur_len", ",", "elements", ",", "length", ",", "res", ")", ":", "\n", "    ", "if", "cur_len", "==", "length", ":", "\n", "        ", "res", ".", "append", "(", "cur", ")", "\n", "return", "\n", "", "for", "ele", "in", "elements", ":", "\n", "        ", "_dfs_gen_enum", "(", "cur", "+", "[", "ele", "]", ",", "cur_len", "+", "1", ",", "elements", ",", "length", ",", "res", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.gen_enum": [[203, 207], ["utils._dfs_gen_enum"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils._dfs_gen_enum"], ["", "def", "gen_enum", "(", "elements", ",", "length", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "_dfs_gen_enum", "(", "[", "]", ",", "0", ",", "elements", ",", "length", ",", "res", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils._dfs_gen_group": [[209, 218], ["res.append", "range", "RuntimeError", "utils._dfs_gen_group"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils._dfs_gen_group"], ["", "def", "_dfs_gen_group", "(", "cur", ",", "elements", ",", "p", ",", "length", ",", "left_groups", ",", "res", ",", "padding", ")", ":", "\n", "    ", "if", "left_groups", "==", "1", ":", "\n", "        ", "res", ".", "append", "(", "cur", "+", "[", "length", "]", "*", "(", "1", "+", "padding", ")", ")", "\n", "", "elif", "left_groups", ">", "1", ":", "\n", "# _dfs_gen_group(cur, elements, p, length, left_groups-1, res)", "\n", "        ", "for", "i", "in", "range", "(", "p", "+", "1", ",", "length", ")", ":", "\n", "            ", "_dfs_gen_group", "(", "cur", "+", "[", "i", "]", ",", "elements", ",", "i", ",", "length", ",", "left_groups", "-", "1", ",", "res", ",", "padding", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"At least 1 group\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.gen_group": [[220, 228], ["len", "min", "min", "range", "utils._dfs_gen_group"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils._dfs_gen_group"], ["", "", "def", "gen_group", "(", "elements", ",", "most_groups", "=", "3", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "length", "=", "len", "(", "elements", ")", "\n", "lower", "=", "min", "(", "length", ",", "most_groups", ")", "\n", "upper", "=", "min", "(", "length", ",", "most_groups", ")", "\n", "for", "groups", "in", "range", "(", "lower", ",", "upper", "+", "1", ")", ":", "\n", "        ", "_dfs_gen_group", "(", "[", "]", ",", "elements", ",", "0", ",", "length", ",", "groups", ",", "res", ",", "most_groups", "-", "groups", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.fact": [[230, 235], ["None"], "function", ["None"], ["", "def", "fact", "(", "n", ")", ":", "\n", "    ", "acc", "=", "1", "\n", "while", "n", ">", "0", ":", "\n", "        ", "acc", ",", "n", "=", "acc", "*", "n", ",", "n", "-", "1", "\n", "", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.comb": [[237, 240], ["utils.fact", "utils.fact", "utils.fact"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.fact", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.fact", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.fact"], ["", "def", "comb", "(", "m", ",", "n", ")", ":", "\n", "    ", "assert", "m", ">=", "n", "\n", "return", "fact", "(", "m", ")", "//", "(", "fact", "(", "n", ")", "*", "fact", "(", "m", "-", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.is_power_of_x": [[242, 245], ["isinstance", "math.fabs", "math.pow", "int", "math.log"], "function", ["None"], ["", "def", "is_power_of_x", "(", "x", ",", "val", ")", ":", "\n", "    ", "assert", "isinstance", "(", "val", ",", "int", ")", "and", "val", ">", "0", "\n", "return", "math", ".", "fabs", "(", "math", ".", "pow", "(", "x", ",", "int", "(", "math", ".", "log", "(", "val", ",", "x", ")", ")", ")", "-", "val", ")", "<", "1e-20", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.nearest_power_of_two": [[247, 250], ["int", "isinstance", "math.pow", "int", "math.log2"], "function", ["None"], ["", "def", "nearest_power_of_two", "(", "val", ")", ":", "\n", "    ", "assert", "isinstance", "(", "val", ",", "int", ")", "and", "val", ">", "0", "\n", "return", "int", "(", "math", ".", "pow", "(", "2", ",", "int", "(", "math", ".", "log2", "(", "val", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.test_allclose": [[252, 262], ["tvm.testing.assert_allclose", "print", "print", "numpy.max", "numpy.fabs"], "function", ["None"], ["", "def", "test_allclose", "(", "value", ",", "target", ",", "rtol", "=", "1e-5", ",", "print_diff", "=", "False", ")", ":", "\n", "    ", "passed", "=", "1", "\n", "try", ":", "\n", "        ", "tvm", ".", "testing", ".", "assert_allclose", "(", "value", ",", "target", ",", "rtol", ")", "\n", "", "except", "AssertionError", ":", "\n", "        ", "passed", "=", "0", "\n", "if", "print_diff", ":", "\n", "            ", "print", "(", "target", "-", "value", ")", "\n", "print", "(", "\"Max diff:\"", ",", "np", ".", "max", "(", "np", ".", "fabs", "(", "target", "-", "value", ")", ")", ")", "\n", "", "", "return", "passed", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.assert_print": [[264, 267], ["AssertionError"], "function", ["None"], ["", "def", "assert_print", "(", "bool_stmt", ",", "false_str", "=", "\"\"", ")", ":", "\n", "    ", "if", "not", "bool_stmt", ":", "\n", "        ", "raise", "AssertionError", "(", "false_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.free_cuda": [[269, 280], ["torch.cuda.is_available", "os.system", "list", "sorted", "os.remove", "time.time", "filter", "int", "enumerate", "open().readlines", "x.split", "open"], "function", ["None"], ["", "", "def", "free_cuda", "(", ")", ":", "\n", "    ", "import", "torch", "\n", "ret", "=", "[", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "filename", "=", "\"flextensor_check_cuda_free_memory_{}\"", ".", "format", "(", "time", ".", "time", "(", ")", ")", "\n", "os", ".", "system", "(", "\"nvidia-smi -q -d Memory | grep -A4 GPU | grep Free > {}\"", ".", "format", "(", "filename", ")", ")", "\n", "memory_gpu", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "0", "]", ">", "0", ",", "[", "(", "int", "(", "x", ".", "split", "(", ")", "[", "2", "]", ")", ",", "i", ")", "for", "i", ",", "x", "in", "enumerate", "(", "open", "(", "filename", ",", "'r'", ")", ".", "readlines", "(", ")", ")", "]", ")", ")", "\n", "memory_gpu", "=", "sorted", "(", "memory_gpu", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "return", "[", "x", "[", "1", "]", "for", "x", "in", "memory_gpu", "]", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.test_three_factor_split": [[282, 286], ["print", "len", "utils.three_factor_split"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.three_factor_split"], ["", "def", "test_three_factor_split", "(", ")", ":", "\n", "    ", "values", "=", "[", "16", ",", "256", ",", "512", ",", "24", ",", "3", ",", "1024", ",", "2048", ",", "4096", "]", "\n", "for", "v", "in", "values", ":", "\n", "        ", "print", "(", "len", "(", "three_factor_split", "(", "v", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.test_interleave": [[288, 295], ["utils.interleave", "print", "print", "len"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.interleave"], ["", "", "def", "test_interleave", "(", ")", ":", "\n", "    ", "la", "=", "[", "\"none\"", ",", "\"rx\"", ",", "\"ry\"", ",", "\"rc\"", "]", "\n", "lb", "=", "[", "\"bi\"", ",", "\"hi\"", ",", "\"wi\"", ",", "\"ci\"", "]", "\n", "res", "=", "interleave", "(", "la", ",", "lb", ")", "\n", "print", "(", "\"length={}\"", ".", "format", "(", "len", "(", "res", ")", ")", ")", "\n", "for", "ele", "in", "res", ":", "\n", "        ", "print", "(", "ele", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.test_permute": [[297, 303], ["utils.permute", "print", "print", "len"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.permute"], ["", "", "def", "test_permute", "(", ")", ":", "\n", "    ", "lst", "=", "[", "\"b\"", ",", "\"k\"", ",", "\"x\"", ",", "\"y\"", "]", "\n", "res", "=", "permute", "(", "lst", ")", "\n", "print", "(", "\"length={}\"", ".", "format", "(", "len", "(", "res", ")", ")", ")", "\n", "for", "ele", "in", "res", ":", "\n", "        ", "print", "(", "ele", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.test_gen_enum": [[305, 312], ["utils.gen_enum", "print", "print", "len"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.gen_enum"], ["", "", "def", "test_gen_enum", "(", ")", ":", "\n", "    ", "elements", "=", "[", "True", ",", "False", "]", "\n", "length", "=", "4", "\n", "res", "=", "gen_enum", "(", "elements", ",", "length", ")", "\n", "print", "(", "\"length={}\"", ".", "format", "(", "len", "(", "res", ")", ")", ")", "\n", "for", "ele", "in", "res", ":", "\n", "        ", "print", "(", "ele", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.test_gen_group": [[314, 320], ["utils.gen_group", "print", "print", "len"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.gen_group"], ["", "", "def", "test_gen_group", "(", ")", ":", "\n", "    ", "elements", "=", "[", "'x'", ",", "'y'", ",", "'z'", ",", "'w'", "]", "\n", "res", "=", "gen_group", "(", "elements", ")", "\n", "print", "(", "\"length={}\"", ".", "format", "(", "len", "(", "res", ")", ")", ")", "\n", "for", "ele", "in", "res", ":", "\n", "        ", "print", "(", "ele", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.test_any_factor_split": [[322, 326], ["utils.any_factor_split", "print", "print", "len"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.any_factor_split"], ["", "", "def", "test_any_factor_split", "(", ")", ":", "\n", "    ", "ret", "=", "any_factor_split", "(", "448", ",", "4", ",", "'power2'", ")", "\n", "print", "(", "ret", ")", "\n", "print", "(", "\"length=\"", ",", "len", "(", "ret", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.get_iter_info": [[328, 377], ["next", "list", "list", "next", "info.values", "type", "int", "int", "int", "int", "int", "enumerate", "math.ceil", "math.ceil", "int", "int", "repr", "int", "int"], "function", ["None"], ["", "def", "get_iter_info", "(", "s", ":", "tvm", ".", "schedule", ".", "Schedule", ")", ":", "\n", "# get output buffer and its iter_vars", "\n", "    ", "out", "=", "next", "(", "stg", "for", "stg", "in", "s", ".", "stages", "if", "stg", ".", "is_output", ")", "\n", "ivs", "=", "list", "(", "out", ".", "leaf_iter_vars", ")", "\n", "\n", "# get the split relations and iter_vars' length", "\n", "rels", "=", "list", "(", "out", ".", "relations", ")", "\n", "iv2org", ",", "iv2bro", ",", "iv2len", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "for", "sp", "in", "rels", ":", "\n", "        ", "if", "type", "(", "sp", ")", "==", "tvm", ".", "schedule", ".", "Split", ":", "\n", "            ", "iv2org", "[", "sp", ".", "inner", "]", ",", "iv2org", "[", "sp", ".", "outer", "]", "=", "sp", ".", "parent", ",", "sp", ".", "parent", "\n", "iv2bro", "[", "sp", ".", "inner", "]", ",", "iv2bro", "[", "sp", ".", "outer", "]", "=", "sp", ".", "outer", ",", "sp", ".", "inner", "\n", "ext", "=", "int", "(", "sp", ".", "parent", ".", "dom", ".", "extent", ")", "\n", "iv2len", "[", "sp", ".", "inner", "]", "=", "int", "(", "\n", "sp", ".", "factor", ")", "if", "sp", ".", "factor", "is", "not", "None", "else", "int", "(", "math", ".", "ceil", "(", "ext", "/", "int", "(", "sp", ".", "nparts", ")", ")", ")", "\n", "iv2len", "[", "sp", ".", "outer", "]", "=", "int", "(", "\n", "sp", ".", "nparts", ")", "if", "sp", ".", "nparts", "is", "not", "None", "else", "int", "(", "math", ".", "ceil", "(", "ext", "/", "int", "(", "sp", ".", "factor", ")", ")", ")", "\n", "\n", "# get the inner iter_vars mapping to intrinsic and its surrounding outer iter_vars", "\n", "", "", "attrs", "=", "out", ".", "iter_var_attrs", "\n", "intrin_idx", "=", "next", "(", "i", "for", "i", ",", "iv", "in", "enumerate", "(", "ivs", ")", "\n", "if", "iv", "in", "attrs", "and", "repr", "(", "attrs", "[", "iv", "]", ")", "==", "\"Tensorized\"", ")", "\n", "inner_ivs", "=", "ivs", "[", "intrin_idx", ":", "]", "\n", "outer_ivs", "=", "ivs", "[", ":", "intrin_idx", "]", "\n", "\n", "# collect infomations, using dict and list for serializability\u3000(dumping to json for example)", "\n", "info", "=", "{", "\n", "\"outer\"", ":", "[", "{", "\n", "\"iter_var\"", ":", "iv", ",", "\n", "\"origin\"", ":", "iv2org", "[", "iv", "]", "if", "iv", "in", "iv2org", "else", "iv", ",", "\n", "\"brother\"", ":", "iv2bro", "[", "iv", "]", "if", "iv", "in", "iv2bro", "else", "None", ",", "\n", "\"length\"", ":", "iv2len", "[", "iv", "]", "if", "iv", "in", "iv2len", "else", "int", "(", "iv", ".", "dom", ".", "extent", ")", ",", "\n", "}", "for", "iv", "in", "outer_ivs", "]", ",", "\n", "\"inner\"", ":", "[", "{", "\n", "\"iter_var\"", ":", "iv", ",", "\n", "\"origin\"", ":", "iv2org", "[", "iv", "]", "if", "iv", "in", "iv2org", "else", "iv", ",", "\n", "\"brother\"", ":", "iv2bro", "[", "iv", "]", "if", "iv", "in", "iv2bro", "else", "None", ",", "\n", "\"length\"", ":", "iv2len", "[", "iv", "]", "if", "iv", "in", "iv2len", "else", "int", "(", "iv", ".", "dom", ".", "extent", ")", ",", "\n", "}", "for", "iv", "in", "inner_ivs", "]", ",", "\n", "}", "\n", "\n", "# change IterVar to str to be serializable", "\n", "for", "ivs", "in", "info", ".", "values", "(", ")", ":", "\n", "        ", "for", "iv", "in", "ivs", ":", "\n", "            ", "iv", "[", "'iter_var'", "]", "=", "iv", "[", "'iter_var'", "]", ".", "var", ".", "name", "\n", "iv", "[", "'origin'", "]", "=", "iv", "[", "'origin'", "]", ".", "var", ".", "name", "\n", "iv", "[", "'brother'", "]", "=", "iv", "[", "'brother'", "]", ".", "var", ".", "name", "if", "iv", "[", "'brother'", "]", "is", "not", "None", "else", "None", "\n", "\n", "", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.shift": [[379, 392], ["len", "list", "list", "functools.reduce", "len", "functools.reduce", "zip", "zip", "len", "len"], "function", ["None"], ["", "def", "shift", "(", "l1", ",", "l2", ",", "step", ")", ":", "\n", "    ", "if", "step", "<", "len", "(", "l1", ")", ":", "\n", "        ", "part1", "=", "l1", "[", ":", "-", "step", "]", "if", "step", ">", "0", "else", "l1", "\n", "part2", "=", "list", "(", "reduce", "(", "lambda", "a", ",", "b", ":", "a", "+", "b", ",", "\n", "zip", "(", "l2", "[", ":", "step", "]", ",", "l1", "[", "-", "step", ":", "]", ")", ",", "(", ")", ")", ")", "\n", "part3", "=", "l2", "[", "step", ":", "]", "\n", "", "else", ":", "\n", "        ", "step", "=", "step", "+", "1", "-", "len", "(", "l1", ")", "\n", "part1", "=", "l2", "[", ":", "step", "]", "\n", "part2", "=", "list", "(", "reduce", "(", "lambda", "a", ",", "b", ":", "a", "+", "b", ",", "\n", "zip", "(", "l1", "[", ":", "len", "(", "l2", ")", "-", "step", "]", ",", "l2", "[", "step", ":", "]", ")", ",", "(", ")", ")", ")", "\n", "part3", "=", "l1", "[", "len", "(", "l2", ")", "-", "step", ":", "]", "\n", "", "return", "part1", "+", "part2", "+", "part3", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.intrinsic.Intrinsic.__init__": [[31, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "category", ",", "name", ",", "func", ",", "args", ",", "intrin", ",", "target", ",", "override", "=", "False", ")", ":", "\n", "        ", "self", ".", "key", "=", "\"{}_{}_{}\"", ".", "format", "(", "category", ",", "name", ",", "target", ")", "\n", "self", ".", "func", "=", "func", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "intrin", "=", "intrin", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "category", "=", "category", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.intrinsic.register_intrin": [[9, 19], ["print", "INTRIN_TABLE[].append"], "function", ["None"], ["def", "register_intrin", "(", "intrin", ",", "override", "=", "False", ")", ":", "\n", "    ", "key", "=", "target_embedding", "[", "intrin", ".", "target", "]", "\n", "if", "key", "not", "in", "INTRIN_TABLE", ":", "\n", "        ", "INTRIN_TABLE", "[", "key", "]", "=", "[", "]", "\n", "", "if", "intrin", "in", "INTRIN_TABLE", "[", "key", "]", "and", "not", "override", ":", "\n", "        ", "print", "(", "\"[Warning]: Same intrinsic occurs again %s\"", "%", "intrin", ".", "key", ")", "\n", "", "elif", "intrin", "in", "INTRIN_TABLE", "[", "key", "]", ":", "\n", "        ", "INTRIN_TABLE", "[", "key", "]", "=", "[", "intrin", "]", "\n", "", "else", ":", "\n", "        ", "INTRIN_TABLE", "[", "key", "]", ".", "append", "(", "intrin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.intrinsic.get_intrin_table": [[21, 24], ["None"], "function", ["None"], ["", "", "def", "get_intrin_table", "(", ")", ":", "\n", "    ", "global", "INTRIN_TABLE", "\n", "return", "INTRIN_TABLE", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.intrinsic.reset_intrin": [[25, 28], ["None"], "function", ["None"], ["", "def", "reset_intrin", "(", ")", ":", "\n", "    ", "global", "INTRIN_TABLE", "\n", "INTRIN_TABLE", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.optimize.optimize_conv2d_micro.conv2d_micro": [[24, 42], ["tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.reduce_axis", "tvm.reduce_axis", "tvm.compute", "tvm.sum"], "function", ["None"], ["def", "conv2d_micro", "(", "N", ",", "C", ",", "H", ",", "W", ",", "K", ",", "Hk", ",", "Wk", ",", "S", "=", "1", ",", "P", "=", "0", ",", "D", "=", "1", ",", "dtype", "=", "\"int8\"", ")", ":", "\n", "    ", "H", "+=", "2", "*", "P", "\n", "W", "+=", "2", "*", "P", "\n", "Ho", "=", "(", "H", "-", "(", "Hk", "-", "1", ")", "*", "D", "-", "1", ")", "//", "S", "+", "1", "\n", "Wo", "=", "(", "W", "-", "(", "Wk", "-", "1", ")", "*", "D", "-", "1", ")", "//", "S", "+", "1", "\n", "Input", "=", "tvm", ".", "placeholder", "(", "(", "N", ",", "H", ",", "W", ",", "C", ")", ",", "name", "=", "\"Input\"", ",", "dtype", "=", "dtype", ")", "\n", "Filter", "=", "tvm", ".", "placeholder", "(", "(", "Hk", ",", "Wk", ",", "C", ",", "K", ")", ",", "name", "=", "\"Filter\"", ",", "dtype", "=", "dtype", ")", "\n", "rh", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "Hk", ")", ",", "name", "=", "\"rh\"", ")", "\n", "rw", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "Wk", ")", ",", "name", "=", "\"rw\"", ")", "\n", "rc", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "C", ")", ",", "name", "=", "\"rc\"", ")", "\n", "Output", "=", "tvm", ".", "compute", "(", "\n", "(", "N", ",", "Ho", ",", "Wo", ",", "K", ")", ",", "\n", "lambda", "n", ",", "h", ",", "w", ",", "k", ":", "tvm", ".", "sum", "(", "\n", "Input", "[", "n", ",", "h", "+", "rh", ",", "w", "+", "rw", ",", "rc", "]", "*", "Filter", "[", "rh", ",", "rw", ",", "rc", ",", "k", "]", ",", "\n", "axis", "=", "[", "rh", ",", "rw", ",", "rc", "]", "\n", ")", ",", "name", "=", "\"Output\"", ")", "\n", "\n", "return", "[", "Output", ".", "op", "]", ",", "[", "Input", ",", "Filter", ",", "Output", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.optimize.optimize_conv2d_micro.evaluate_micro": [[112, 158], ["flextensor.utils.get_iter_info", "flextensor.ppa_model.measure_latency", "tvm.rpc.connect_tracker", "rpc.connect_tracker.request", "tracker.request.context", "open", "json.dump", "json.dump", "flextensor.utils.to_tuple", "numpy.random.uniform().astype", "tvm.nd.array", "tvm_arys.append", "tvm.build", "tvm.micro.base.compile_micro_mod", "tracker.request.upload", "tracker.request.load_module", "remote.load_module.time_evaluator", "os.path.exists", "os.path.join", "func.time_evaluator.", "print", "float", "len", "os.path.join", "os.path.exists", "numpy.random.uniform", "os.remove", "os.path.join", "os.path.join", "print", "os.remove", "os.path.join", "print"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.get_iter_info", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.to_tuple", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model_measure.ModelBuilder.build"], ["def", "evaluate_micro", "(", "name", ",", "s", ",", "bufs", ",", "dev_id", ",", "number", ",", "rpc_info", ")", ":", "\n", "    ", "assert", "rpc_info", "is", "not", "None", "\n", "\n", "info", "=", "get_iter_info", "(", "s", ")", "\n", "with", "open", "(", "\"./info.json\"", ",", "mode", "=", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "info", ",", "fp", ")", "\n", "", "return", "measure_latency", "(", "info", ")", "\n", "\n", "tracker", "=", "rpc", ".", "connect_tracker", "(", "rpc_info", ".", "server_ip", ",", "rpc_info", ".", "server_port", ")", "\n", "remote", "=", "tracker", ".", "request", "(", "rpc_info", ".", "device_key", ",", "priority", "=", "1", ",", "\n", "session_timeout", "=", "10000", ")", "\n", "ctx", "=", "remote", ".", "context", "(", "rpc_info", ".", "target", ",", "dev_id", ")", "\n", "tvm_arys", "=", "[", "]", "\n", "for", "buf", "in", "bufs", ":", "\n", "        ", "shape", "=", "to_tuple", "(", "buf", ".", "shape", ")", "\n", "tmp", "=", "np", ".", "random", ".", "uniform", "(", "-", "128", ",", "128", ",", "size", "=", "shape", ")", ".", "astype", "(", "buf", ".", "dtype", ")", "\n", "tmp", "=", "tvm", ".", "nd", ".", "array", "(", "tmp", ",", "ctx", ")", "\n", "tvm_arys", ".", "append", "(", "tmp", ")", "\n", "", "try", ":", "\n", "        ", "func_file", "=", "\"{}.obj\"", ".", "format", "(", "name", ")", "\n", "func", "=", "tvm", ".", "build", "(", "s", ",", "bufs", ",", "target", "=", "rpc_info", ".", "target", ")", "\n", "compile_micro_mod", "(", "func_file", ",", "\n", "func", ",", "rpc_info", ".", "micro_device_config", ",", "\n", "aux_sources", "=", "rpc_info", ".", "aux_sources", ",", "\n", "aux_options", "=", "rpc_info", ".", "aux_options", ")", "\n", "remote", ".", "upload", "(", "os", ".", "path", ".", "join", "(", "LIB_DIR", ",", "func_file", ")", ")", "\n", "func", "=", "remote", ".", "load_module", "(", "func_file", ")", "\n", "evaluator", "=", "func", ".", "time_evaluator", "(", "func", ".", "entry_name", ",", "ctx", ",", "number", "=", "number", ")", "\n", "time_cost", "=", "evaluator", "(", "*", "tvm_arys", ")", ".", "mean", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "time_cost", "=", "float", "(", "\"inf\"", ")", "\n", "", "finally", ":", "\n", "        ", "while", "len", "(", "tvm_arys", ")", ">", "0", ":", "\n", "            ", "del", "tvm_arys", "[", "-", "1", "]", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "LIB_DIR", ",", "func_file", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "LIB_DIR", ",", "func_file", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "", "", "elif", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "LIB_DIR", ",", "func_file", "+", "\".so\"", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "LIB_DIR", ",", "func_file", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "", "", "", "return", "time_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.optimize.optimize_conv2d_micro.evaluate": [[160, 216], ["tvm.rpc.connect", "rpc.connect.context", "tvm.context", "flextensor.utils.to_tuple", "numpy.random.uniform().astype", "tvm.nd.array", "tvm_arys.append", "remote.load_module.time_evaluator", "os.path.exists", "tvm.build", "tvm.build", "remote.load_module.export_library", "rpc.connect.upload", "rpc.connect.load_module", "func.time_evaluator.", "print", "float", "len", "os.path.join", "os.path.exists", "numpy.random.uniform", "os.path.join", "os.path.join", "os.remove", "os.path.join", "os.path.join", "print", "os.remove", "os.path.join", "print"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.to_tuple", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model_measure.ModelBuilder.build", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.model_measure.ModelBuilder.build"], ["", "def", "evaluate", "(", "name", ",", "s", ",", "bufs", ",", "target", ",", "dev_id", ",", "number", ",", "rpc_info", ")", ":", "\n", "    ", "if", "rpc_info", "is", "not", "None", ":", "\n", "        ", "host", "=", "rpc_info", ".", "host", "\n", "port", "=", "rpc_info", ".", "port", "\n", "", "else", ":", "\n", "# local", "\n", "        ", "host", "=", "\"0.0.0.0\"", "\n", "port", "=", "9090", "# default port", "\n", "", "if", "host", "==", "\"0.0.0.0\"", ":", "\n", "        ", "if", "LOCAL_RPC", ":", "\n", "            ", "use_rpc", "=", "True", "\n", "", "else", ":", "\n", "            ", "use_rpc", "=", "False", "\n", "", "", "else", ":", "\n", "        ", "use_rpc", "=", "True", "\n", "", "if", "use_rpc", ":", "\n", "        ", "remote", "=", "rpc", ".", "connect", "(", "host", ",", "port", ")", "\n", "ctx", "=", "remote", ".", "context", "(", "target", ",", "dev_id", ")", "\n", "", "else", ":", "\n", "        ", "ctx", "=", "tvm", ".", "context", "(", "target", ",", "dev_id", ")", "\n", "", "tvm_arys", "=", "[", "]", "\n", "for", "buf", "in", "bufs", ":", "\n", "        ", "shape", "=", "to_tuple", "(", "buf", ".", "shape", ")", "\n", "tmp", "=", "np", ".", "random", ".", "uniform", "(", "-", "10", ",", "10", ",", "size", "=", "shape", ")", ".", "astype", "(", "buf", ".", "dtype", ")", "\n", "tmp", "=", "tvm", ".", "nd", ".", "array", "(", "tmp", ",", "ctx", ")", "\n", "tvm_arys", ".", "append", "(", "tmp", ")", "\n", "", "try", ":", "\n", "        ", "func_file", "=", "\"{}.tar\"", ".", "format", "(", "name", ")", "\n", "if", "rpc_info", "is", "not", "None", "and", "rpc_info", ".", "target_host", "is", "not", "None", ":", "\n", "            ", "func", "=", "tvm", ".", "build", "(", "s", ",", "bufs", ",", "target", "=", "target", ",", "\n", "target_host", "=", "rpc_info", ".", "target_host", ")", "\n", "", "else", ":", "\n", "            ", "func", "=", "tvm", ".", "build", "(", "s", ",", "bufs", ",", "target", "=", "target", ")", "\n", "", "if", "use_rpc", ":", "\n", "            ", "func", ".", "export_library", "(", "os", ".", "path", ".", "join", "(", "LIB_DIR", ",", "func_file", ")", ")", "\n", "remote", ".", "upload", "(", "os", ".", "path", ".", "join", "(", "LIB_DIR", ",", "func_file", ")", ")", "\n", "func", "=", "remote", ".", "load_module", "(", "func_file", ")", "\n", "", "evaluator", "=", "func", ".", "time_evaluator", "(", "func", ".", "entry_name", ",", "ctx", ",", "number", "=", "number", ")", "\n", "time_cost", "=", "evaluator", "(", "*", "tvm_arys", ")", ".", "mean", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "time_cost", "=", "float", "(", "\"inf\"", ")", "\n", "", "finally", ":", "\n", "        ", "while", "len", "(", "tvm_arys", ")", ">", "0", ":", "\n", "            ", "del", "tvm_arys", "[", "-", "1", "]", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "LIB_DIR", ",", "func_file", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "LIB_DIR", ",", "func_file", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "", "", "elif", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "LIB_DIR", ",", "func_file", "+", "\".so\"", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "LIB_DIR", ",", "func_file", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "", "", "", "return", "time_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.optimize.optimize_conv2d_micro.optimize": [[218, 277], ["dict", "open", "enumerate", "open.close", "print", "flextensor.task.Task", "time.time", "flextensor.scheduler.schedule", "time.time", "print", "print", "print", "configs.graph_config.items", "json.dumps", "json.dumps", "print", "flextensor.scheduler.schedule_with_config", "optimize_conv2d_micro.evaluate_micro", "print", "print", "open.write", "print", "print", "config.items", "time.time", "print", "json.dumps", "json.dumps", "str", "time.time", "print", "list", "flextensor.utils.get_iter_info", "float"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.schedule", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.schedule_with_config", "home.repos.pwc.inspect_result.pku-liang_HASCO.optimize.optimize_conv2d_micro.evaluate_micro", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.space.Space.items", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.get_iter_info"], ["", "def", "optimize", "(", "shapes", ",", "slevel", "=", "4", ",", "rlevel", "=", "3", ",", "target", "=", "\"llvm\"", ",", "dev_id", "=", "0", ",", "timeout", "=", "4.0", ",", "trials", "=", "100", ",", "parallel", "=", "1", ",", "\n", "method", "=", "\"searching\"", ",", "use_model", "=", "False", ",", "rpc_info", "=", "None", ",", "logfile", "=", "sys", ".", "stdout", ",", "dtype", "=", "\"float32\"", ")", ":", "\n", "    ", "ret", "=", "dict", "(", ")", "\n", "fp", "=", "open", "(", "\"result.log\"", ",", "\"w\"", ")", "\n", "for", "i", ",", "shape", "in", "enumerate", "(", "shapes", ")", ":", "\n", "        ", "print", "(", "\"Optimize conv2d-micro shape %s [%.6f]\"", "%", "\n", "(", "str", "(", "shape", ")", ",", "time", ".", "time", "(", ")", ")", ",", "flush", "=", "True", ")", "\n", "# create an empty task but has the correct key we want", "\n", "task", "=", "Task", "(", "\n", "\"conv2d\"", ",", "\n", "\"conv2d_micro\"", ",", "\n", "None", ",", "\n", "(", "*", "shape", ",", "dtype", ")", ",", "\n", "target", ",", "\n", "dev_id", "\n", ")", "\n", "beg", "=", "time", ".", "time", "(", ")", "\n", "s", ",", "bufs", ",", "configs", "=", "schedule", "(", "\n", "task", ".", "key", ",", "\n", "slevel", "=", "slevel", ",", "\n", "rlevel", "=", "rlevel", ",", "\n", "op_trial", "=", "trials", ",", "\n", "timeout", "=", "timeout", ",", "\n", "op_stop", "=", "30", ",", "\n", "method", "=", "method", ",", "\n", "use_model", "=", "use_model", ",", "\n", "parallel", "=", "parallel", ",", "\n", "rpc_info", "=", "rpc_info", ",", "\n", "model_measurer", "=", "measure_latency", "\n", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "# print(tvm.lower(s, bufs, simple_mode=True))", "\n", "print", "(", "\"###################################### [%.6f]\"", "%", "time", ".", "time", "(", ")", ")", "\n", "print", "(", "\"op schedules:\"", ")", "\n", "for", "config", "in", "configs", ".", "op_config_lst", ":", "\n", "            ", "print", "(", "\"----------------------------------\"", ")", "\n", "for", "name", ",", "value", "in", "config", ".", "items", "(", ")", ":", "\n", "                ", "if", "value", ":", "\n", "                    ", "print", "(", "name", ",", "value", ")", "\n", "", "", "", "print", "(", "\"graph schedules:\"", ")", "\n", "for", "name", ",", "value", "in", "configs", ".", "graph_config", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", ":", "\n", "                ", "print", "(", "name", ",", "value", ")", "\n", "", "", "ret", "[", "task", ".", "key", "]", "=", "configs", "\n", "string", "=", "json", ".", "dumps", "(", "configs", ")", "\n", "line", "=", "task", ".", "key", "+", "\":\"", "+", "string", "\n", "print", "(", "line", ",", "file", "=", "logfile", ",", "flush", "=", "True", ")", "\n", "s", ",", "bufs", "=", "schedule_with_config", "(", "task", ".", "key", ",", "configs", ")", "\n", "time_cost", "=", "evaluate_micro", "(", "task", ".", "key", ",", "s", ",", "bufs", ",", "dev_id", ",", "1", ",", "rpc_info", ")", "\n", "print", "(", "\"Use\"", ",", "time_cost", ")", "\n", "print", "(", "\"Cost\"", ",", "end", "-", "beg", ",", "\"s\"", ")", "\n", "fp", ".", "write", "(", "json", ".", "dumps", "(", "{", "\n", "\"shape\"", ":", "list", "(", "shape", ")", ",", "\n", "\"info\"", ":", "get_iter_info", "(", "s", ")", ",", "\n", "\"cost\"", ":", "float", "(", "time_cost", ")", "\n", "}", ")", "+", "\"\\n\"", ")", "\n", "print", "(", ")", "\n", "", "fp", ".", "close", "(", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.optimize.optimize_conv2d_micro.test": [[279, 291], ["flextensor.scheduler.schedule_with_config", "print", "print", "print", "tvm.lower", "optimize_conv2d_micro.evaluate_micro", "optimize_conv2d_micro.evaluate"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.schedule_with_config", "home.repos.pwc.inspect_result.pku-liang_HASCO.optimize.optimize_conv2d_micro.evaluate_micro", "home.repos.pwc.inspect_result.pku-liang_HASCO.optimize.optimize_conv2d_micro.evaluate"], ["", "def", "test", "(", "task_key", ",", "configs", ",", "dev_id", "=", "None", ",", "rpc_info", "=", "None", ")", ":", "\n", "    ", "task", "=", "TASK_TABLE", "[", "task_key", "]", "\n", "s", ",", "bufs", "=", "schedule_with_config", "(", "task_key", ",", "configs", ")", "\n", "print", "(", "tvm", ".", "lower", "(", "s", ",", "bufs", ",", "simple_mode", "=", "True", ")", ")", "\n", "dev_id", "=", "dev_id", "if", "dev_id", "is", "not", "None", "else", "task", ".", "dev_id", "\n", "if", "task", ".", "target", "==", "\"micro\"", ":", "\n", "        ", "time_cost", "=", "evaluate_micro", "(", "task_key", ",", "s", ",", "bufs", ",", "dev_id", ",", "10", ",", "rpc_info", ")", "\n", "", "else", ":", "\n", "        ", "time_cost", "=", "evaluate", "(", "\n", "task_key", ",", "s", ",", "bufs", ",", "task", ".", "target", ",", "dev_id", ",", "10", ",", "rpc_info", ")", "\n", "", "print", "(", "task_key", ",", "\"use\"", ",", "time_cost", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.examples.conv2d_micro.conv2d_micro": [[8, 26], ["tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.reduce_axis", "tvm.reduce_axis", "tvm.compute", "tvm.sum"], "function", ["None"], ["def", "conv2d_micro", "(", "N", ",", "C", ",", "H", ",", "W", ",", "K", ",", "Hk", ",", "Wk", ",", "S", "=", "1", ",", "P", "=", "0", ",", "D", "=", "1", ",", "dtype", "=", "\"int8\"", ")", ":", "\n", "    ", "H", "+=", "2", "*", "P", "\n", "W", "+=", "2", "*", "P", "\n", "Ho", "=", "(", "H", "-", "(", "Hk", "-", "1", ")", "*", "D", "-", "1", ")", "//", "S", "+", "1", "\n", "Wo", "=", "(", "W", "-", "(", "Wk", "-", "1", ")", "*", "D", "-", "1", ")", "//", "S", "+", "1", "\n", "Input", "=", "tvm", ".", "placeholder", "(", "(", "N", ",", "H", ",", "W", ",", "C", ")", ",", "name", "=", "\"Input\"", ",", "dtype", "=", "dtype", ")", "\n", "Filter", "=", "tvm", ".", "placeholder", "(", "(", "Hk", ",", "Wk", ",", "C", ",", "K", ")", ",", "name", "=", "\"Filter\"", ",", "dtype", "=", "dtype", ")", "\n", "rh", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "Hk", ")", ",", "name", "=", "\"rh\"", ")", "\n", "rw", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "Wk", ")", ",", "name", "=", "\"rw\"", ")", "\n", "rc", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "C", ")", ",", "name", "=", "\"rc\"", ")", "\n", "Output", "=", "tvm", ".", "compute", "(", "\n", "(", "N", ",", "Ho", ",", "Wo", ",", "K", ")", ",", "\n", "lambda", "n", ",", "h", ",", "w", ",", "k", ":", "tvm", ".", "sum", "(", "\n", "Input", "[", "n", ",", "h", "+", "rh", ",", "w", "+", "rw", ",", "rc", "]", "*", "Filter", "[", "rh", ",", "rw", ",", "rc", ",", "k", "]", ",", "\n", "axis", "=", "[", "rh", ",", "rw", ",", "rc", "]", "\n", ")", ",", "name", "=", "\"Output\"", ")", "\n", "\n", "return", "[", "Output", ".", "op", "]", ",", "[", "Input", ",", "Filter", ",", "Output", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.examples.conv2d_micro.intrinsic_gemm_int8_compute": [[28, 36], ["tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.compute", "tvm.sum"], "function", ["None"], ["", "def", "intrinsic_gemm_int8_compute", "(", "i", ",", "j", ",", "k", ")", ":", "\n", "    ", "a", "=", "tvm", ".", "placeholder", "(", "(", "i", ",", "k", ")", ",", "name", "=", "'a'", ",", "dtype", "=", "\"int8\"", ")", "\n", "b", "=", "tvm", ".", "placeholder", "(", "(", "k", ",", "j", ")", ",", "name", "=", "'b'", ",", "dtype", "=", "\"int8\"", ")", "\n", "kk", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "k", ")", ",", "name", "=", "'k'", ")", "\n", "c", "=", "tvm", ".", "compute", "(", "(", "i", ",", "j", ")", ",", "lambda", "ii", ",", "jj", ":", "\n", "tvm", ".", "sum", "(", "a", "[", "ii", ",", "kk", "]", "*", "b", "[", "kk", ",", "jj", "]", ",", "axis", "=", "kk", ")", ",", "name", "=", "'c'", ")", "\n", "\n", "return", "c", ",", "[", "a", ",", "b", ",", "c", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.examples.conv2d_micro.intrinsic_gemm_int8": [[44, 152], ["conv2d_micro.intrinsic_gemm_int8_compute", "tvm.var", "tvm.decl_buffer", "tvm.var", "tvm.decl_buffer", "tvm.var", "tvm.decl_buffer", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.build_config", "tvm.decl_tensor_intrin", "tvm.ir_builder.create", "tvm.ir_builder.create.emit", "tvm.ir_builder.create.get", "tvm.ir_builder.create", "tvm.ir_builder.create.emit", "tvm.ir_builder.create.get", "tvm.ir_builder.create", "tvm.ir_builder.create.emit", "tvm.ir_builder.create.get", "_reset"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.examples.conv2d_micro.intrinsic_gemm_int8_compute", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get"], ["def", "intrinsic_gemm_int8", "(", "i", ",", "j", ",", "k", ",", "il", ",", "jl", ",", "kl", ",", "ic", ",", "jc", ",", "kc", ",", "dim", ")", ":", "\n", "    ", "\"\"\"\n    (i, k) * (k, j)\n    i, j, k: normal iteration size\n    il, jl, kl: last iteration size\n    ic, jc, kc: last iteration condition\n    \"\"\"", "\n", "assert", "i", "*", "k", "+", "k", "*", "j", "<=", "sp_kb", "*", "1024", ",", "'input too large for scratchpad'", "\n", "assert", "4", "*", "(", "i", "*", "j", ")", "<=", "acc_kb", "*", "1024", ",", "'input too large for accumulator'", "\n", "\n", "DIM", "=", "dim", "\n", "\n", "_", ",", "bufs", "=", "intrinsic_gemm_int8_compute", "(", "i", ",", "j", ",", "k", ")", "\n", "a", ",", "b", ",", "c", "=", "bufs", "\n", "\n", "strideA", "=", "tvm", ".", "var", "(", "\"sA\"", ")", "\n", "Ab", "=", "tvm", ".", "decl_buffer", "(", "a", ".", "shape", ",", "a", ".", "dtype", ",", "\n", "name", "=", "\"A\"", ",", "\n", "offset_factor", "=", "1", ",", "\n", "strides", "=", "[", "strideA", ",", "1", "]", ")", "\n", "strideB", "=", "tvm", ".", "var", "(", "\"sB\"", ")", "\n", "Bb", "=", "tvm", ".", "decl_buffer", "(", "b", ".", "shape", ",", "b", ".", "dtype", ",", "\n", "name", "=", "\"B\"", ",", "\n", "offset_factor", "=", "1", ",", "\n", "strides", "=", "[", "strideB", ",", "1", "]", ")", "\n", "strideC", "=", "tvm", ".", "var", "(", "\"sC\"", ")", "\n", "Cb", "=", "tvm", ".", "decl_buffer", "(", "c", ".", "shape", ",", "c", ".", "dtype", ",", "\n", "name", "=", "\"C\"", ",", "\n", "offset_factor", "=", "1", ",", "\n", "strides", "=", "[", "strideC", ",", "1", "]", ")", "\n", "\n", "II", "=", "i", "//", "DIM", "+", "(", "0", "if", "i", "%", "DIM", "==", "0", "else", "1", ")", "\n", "JJ", "=", "j", "//", "DIM", "+", "(", "0", "if", "j", "%", "DIM", "==", "0", "else", "1", ")", "\n", "KK", "=", "k", "//", "DIM", "+", "(", "0", "if", "k", "%", "DIM", "==", "0", "else", "1", ")", "\n", "pad_I", "=", "0", "if", "i", "%", "DIM", "==", "0", "else", "(", "DIM", "-", "i", "%", "DIM", ")", "\n", "pad_J", "=", "0", "if", "j", "%", "DIM", "==", "0", "else", "(", "DIM", "-", "j", "%", "DIM", ")", "\n", "pad_K", "=", "0", "if", "k", "%", "DIM", "==", "0", "else", "(", "DIM", "-", "k", "%", "DIM", ")", "\n", "\n", "IIl", "=", "il", "//", "DIM", "+", "(", "0", "if", "il", "%", "DIM", "==", "0", "else", "1", ")", "\n", "JJl", "=", "jl", "//", "DIM", "+", "(", "0", "if", "jl", "%", "DIM", "==", "0", "else", "1", ")", "\n", "KKl", "=", "kl", "//", "DIM", "+", "(", "0", "if", "kl", "%", "DIM", "==", "0", "else", "1", ")", "\n", "pad_Il", "=", "0", "if", "il", "%", "DIM", "==", "0", "else", "(", "DIM", "-", "il", "%", "DIM", ")", "\n", "pad_Jl", "=", "0", "if", "jl", "%", "DIM", "==", "0", "else", "(", "DIM", "-", "jl", "%", "DIM", ")", "\n", "pad_Kl", "=", "0", "if", "kl", "%", "DIM", "==", "0", "else", "(", "DIM", "-", "kl", "%", "DIM", ")", "\n", "\n", "II", "=", "tvm", ".", "if_then_else", "(", "ic", ",", "IIl", ",", "II", ")", "\n", "JJ", "=", "tvm", ".", "if_then_else", "(", "jc", ",", "JJl", ",", "JJ", ")", "\n", "KK", "=", "tvm", ".", "if_then_else", "(", "kc", ",", "KKl", ",", "KK", ")", "\n", "pad_I", "=", "tvm", ".", "if_then_else", "(", "ic", ",", "pad_Il", ",", "pad_I", ")", "\n", "pad_J", "=", "tvm", ".", "if_then_else", "(", "jc", ",", "pad_Jl", ",", "pad_J", ")", "\n", "pad_K", "=", "tvm", ".", "if_then_else", "(", "kc", ",", "pad_Kl", ",", "pad_K", ")", "\n", "\n", "# reset-update-finalize", "\n", "def", "intrin_func", "(", "ins", ",", "outs", ")", ":", "\n", "        ", "aa", ",", "bb", "=", "ins", "\n", "cc", ",", "=", "outs", "\n", "\n", "def", "_body", "(", ")", ":", "\n", "            ", "ib", "=", "tvm", ".", "ir_builder", ".", "create", "(", ")", "\n", "# int32_t matmul_kernel(const elem_t *A, const elem_t *B, const acc_t *D,", "\n", "#          elem_t *C, int32_t I, int32_t J, int32_t K, int32_t pad_I,", "\n", "#          int32_t pad_J, int32_t pad_K, int32_t A_row_len,", "\n", "#          int32_t B_row_len, int32_t D_row_len, int32_t C_row_len,", "\n", "#          bool no_bias, bool repeating_bias);", "\n", "# D is set to a dummy address 1 to determine whether to overwrite", "\n", "# accumulator contents: on the first run, 1 will be retained and", "\n", "# overwrite the value in the accumulator; on subsequent runs D will be", "\n", "# replaced by NULL and C will accumulate on top of the accumulator's contents", "\n", "# This is controlled via bit 1 << (ADDR_LEN - 2) - see kernel source", "\n", "ib", ".", "emit", "(", "tvm", ".", "call_extern", "(", "\"int32\"", ",", "\"matmul_kernel\"", ",", "\n", "aa", ".", "access_ptr", "(", "\"r\"", ")", ",", "\n", "bb", ".", "access_ptr", "(", "\"r\"", ")", ",", "\n", "1", ",", "\n", "cc", ".", "access_ptr", "(", "\"rw\"", ")", ",", "\n", "II", ",", "JJ", ",", "KK", ",", "\n", "pad_I", ",", "pad_J", ",", "pad_K", ",", "\n", "strideA", ",", "strideB", ",", "0", ",", "strideC", ",", "\n", "True", ",", "False", ")", ")", "\n", "return", "ib", ".", "get", "(", ")", "\n", "\n", "", "def", "_reset", "(", ")", ":", "\n", "            ", "ib", "=", "tvm", ".", "ir_builder", ".", "create", "(", ")", "\n", "# int32_t matmul_reset(elem_t *C, int32_t I, int32_t J, int32_t pad_I,", "\n", "#         int32_t pad_J, int32_t C_row_len);", "\n", "ib", ".", "emit", "(", "tvm", ".", "call_extern", "(", "\"int32\"", ",", "\"matmul_reset\"", ",", "\n", "cc", ".", "access_ptr", "(", "\"w\"", ")", ",", "\n", "II", ",", "JJ", ",", "\n", "pad_I", ",", "pad_J", ",", "\n", "strideC", ")", ")", "\n", "return", "ib", ".", "get", "(", ")", "\n", "\n", "", "def", "_finalize", "(", ")", ":", "\n", "            ", "ib", "=", "tvm", ".", "ir_builder", ".", "create", "(", ")", "\n", "# Move out C from accumulator", "\n", "# int32_t matmul_finalize(elem_t *C, int32_t I, int32_t J, int32_t pad_I,", "\n", "#         int32_t pad_J, int32_t C_row_len);", "\n", "ib", ".", "emit", "(", "tvm", ".", "call_extern", "(", "\"int32\"", ",", "\"matmul_finalize\"", ",", "\n", "cc", ".", "access_ptr", "(", "\"rw\"", ")", ",", "\n", "II", ",", "JJ", ",", "\n", "pad_I", ",", "pad_J", ",", "\n", "strideC", ")", ")", "\n", "return", "ib", ".", "get", "(", ")", "\n", "\n", "# standalone (without reduce axis split), reset, update", "\n", "", "return", "None", ",", "_reset", "(", ")", ",", "_body", "(", ")", ",", "_finalize", "(", ")", "\n", "\n", "", "with", "tvm", ".", "build_config", "(", "offset_factor", "=", "1", ")", ":", "\n", "        ", "return", "tvm", ".", "decl_tensor_intrin", "(", "c", ".", "op", ",", "intrin_func", ",", "binds", "=", "{", "a", ":", "Ab", ",", "b", ":", "Bb", ",", "c", ":", "Cb", "}", ",", "name", "=", "\"sp_gemm\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.examples.conv2d_micro.generate_intrinsic_gemm_int8_dim16": [[154, 171], ["conv2d_micro.intrinsic_gemm_int8", "tvm.expr.EQ", "tvm.expr.EQ", "tvm.expr.EQ"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.examples.conv2d_micro.intrinsic_gemm_int8"], ["", "", "def", "generate_intrinsic_gemm_int8_dim16", "(", "N", ",", "M", ",", "K", ",", "fN", ",", "fM", ",", "fK", ",", "axisN", ",", "axisM", ",", "axisK", ")", ":", "\n", "    ", "last_n", "=", "N", "%", "fN", "\n", "nc", "=", "tvm", ".", "expr", ".", "EQ", "(", "axisN", ",", "N", "//", "fN", ")", "if", "last_n", "!=", "0", "else", "False", "\n", "last_n", "=", "last_n", "if", "last_n", "!=", "0", "else", "fN", "\n", "\n", "last_l", "=", "K", "%", "fK", "\n", "lc", "=", "tvm", ".", "expr", ".", "EQ", "(", "axisK", ",", "K", "//", "fK", ")", "if", "last_l", "!=", "0", "else", "False", "\n", "last_l", "=", "last_l", "if", "last_l", "!=", "0", "else", "fK", "\n", "\n", "last_m", "=", "M", "%", "fM", "\n", "mc", "=", "tvm", ".", "expr", ".", "EQ", "(", "axisM", ",", "M", "//", "fM", ")", "if", "last_m", "!=", "0", "else", "False", "\n", "last_m", "=", "last_m", "if", "last_m", "!=", "0", "else", "fM", "\n", "\n", "gemm", "=", "intrinsic_gemm_int8", "(", "fN", ",", "fM", ",", "fK", ",", "last_n", ",", "\n", "last_m", ",", "last_l", ",", "nc", ",", "mc", ",", "lc", ",", "DIM", ")", "\n", "\n", "return", "gemm", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.conv-autotvm.conv2d_micro.print_nested": [[61, 65], ["open", "print", "map"], "function", ["None"], ["name", "=", "\"A\"", ",", "\n", "offset_factor", "=", "1", ",", "\n", "strides", "=", "[", "strideA", ",", "1", "]", ")", "\n", "strideB", "=", "tvm", ".", "var", "(", "\"sB\"", ")", "\n", "Bb", "=", "tvm", ".", "decl_buffer", "(", "b", ".", "shape", ",", "b", ".", "dtype", ",", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.conv-autotvm.conv2d_micro.gen_pow2_factors": [[67, 70], ["list", "int", "map", "math.log2", "math.ceil", "range", "math.log2"], "function", ["None"], ["offset_factor", "=", "1", ",", "\n", "strides", "=", "[", "strideB", ",", "1", "]", ")", "\n", "strideC", "=", "tvm", ".", "var", "(", "\"sC\"", ")", "\n", "Cb", "=", "tvm", ".", "decl_buffer", "(", "c", ".", "shape", ",", "c", ".", "dtype", ",", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.conv-autotvm.conv2d_micro.gen_factors": [[72, 74], ["range"], "function", ["None"], ["offset_factor", "=", "1", ",", "\n", "strides", "=", "[", "strideC", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.conv-autotvm.conv2d_micro.conv2d": [[90, 141], ["tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.reduce_axis", "tvm.reduce_axis", "tvm.compute", "tvm.create_schedule", "tvm.autotvm.get_config", "autotvm.get_config.define_knob", "autotvm.get_config.define_knob", "autotvm.get_config.define_knob", "autotvm.get_config.define_knob", "s[].split", "s[].split", "s[].split", "s[].reorder", "conv2d_micro.generate_intrinsic_gemm_int8_dim16", "s[].tensorize", "s[].pragma", "conv2d_micro.gen_pow2_factors", "conv2d_micro.gen_pow2_factors", "conv2d_micro.gen_pow2_factors", "list", "tvm.sum", "range", "len"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.conv-autotvm.conv2d_micro.generate_intrinsic_gemm_int8_dim16", "home.repos.pwc.inspect_result.pku-liang_HASCO.conv-autotvm.conv2d_micro.gen_pow2_factors", "home.repos.pwc.inspect_result.pku-liang_HASCO.conv-autotvm.conv2d_micro.gen_pow2_factors", "home.repos.pwc.inspect_result.pku-liang_HASCO.conv-autotvm.conv2d_micro.gen_pow2_factors"], ["JJ", "=", "tvm", ".", "if_then_else", "(", "jc", ",", "JJl", ",", "JJ", ")", "\n", "KK", "=", "tvm", ".", "if_then_else", "(", "kc", ",", "KKl", ",", "KK", ")", "\n", "pad_I", "=", "tvm", ".", "if_then_else", "(", "ic", ",", "pad_Il", ",", "pad_I", ")", "\n", "pad_J", "=", "tvm", ".", "if_then_else", "(", "jc", ",", "pad_Jl", ",", "pad_J", ")", "\n", "pad_K", "=", "tvm", ".", "if_then_else", "(", "kc", ",", "pad_Kl", ",", "pad_K", ")", "\n", "\n", "# reset-update-finalize", "\n", "def", "intrin_func", "(", "ins", ",", "outs", ")", ":", "\n", "        ", "aa", ",", "bb", "=", "ins", "\n", "cc", ",", "=", "outs", "\n", "\n", "def", "_body", "(", ")", ":", "\n", "            ", "ib", "=", "tvm", ".", "ir_builder", ".", "create", "(", ")", "\n", "# int32_t matmul_kernel(const elem_t *A, const elem_t *B, const acc_t *D,", "\n", "#          elem_t *C, int32_t I, int32_t J, int32_t K, int32_t pad_I,", "\n", "#          int32_t pad_J, int32_t pad_K, int32_t A_row_len,", "\n", "#          int32_t B_row_len, int32_t D_row_len, int32_t C_row_len,", "\n", "#          bool no_bias, bool repeating_bias);", "\n", "# D is set to a dummy address 1 to determine whether to overwrite", "\n", "# accumulator contents: on the first run, 1 will be retained and", "\n", "# overwrite the value in the accumulator; on subsequent runs D will be", "\n", "# replaced by NULL and C will accumulate on top of the accumulator's contents", "\n", "# This is controlled via bit 1 << (ADDR_LEN - 2) - see kernel source", "\n", "ib", ".", "emit", "(", "tvm", ".", "call_extern", "(", "\"int32\"", ",", "\"matmul_kernel\"", ",", "\n", "aa", ".", "access_ptr", "(", "\"r\"", ")", ",", "\n", "bb", ".", "access_ptr", "(", "\"r\"", ")", ",", "\n", "1", ",", "\n", "cc", ".", "access_ptr", "(", "\"rw\"", ")", ",", "\n", "II", ",", "JJ", ",", "KK", ",", "\n", "pad_I", ",", "pad_J", ",", "pad_K", ",", "\n", "strideA", ",", "strideB", ",", "0", ",", "strideC", ",", "\n", "True", ",", "False", ")", ")", "\n", "return", "ib", ".", "get", "(", ")", "\n", "\n", "", "def", "_reset", "(", ")", ":", "\n", "            ", "ib", "=", "tvm", ".", "ir_builder", ".", "create", "(", ")", "\n", "# int32_t matmul_reset(elem_t *C, int32_t I, int32_t J, int32_t pad_I,", "\n", "#         int32_t pad_J, int32_t C_row_len);", "\n", "ib", ".", "emit", "(", "tvm", ".", "call_extern", "(", "\"int32\"", ",", "\"matmul_reset\"", ",", "\n", "cc", ".", "access_ptr", "(", "\"w\"", ")", ",", "\n", "II", ",", "JJ", ",", "\n", "pad_I", ",", "pad_J", ",", "\n", "strideC", ")", ")", "\n", "return", "ib", ".", "get", "(", ")", "\n", "\n", "", "def", "_finalize", "(", ")", ":", "\n", "            ", "ib", "=", "tvm", ".", "ir_builder", ".", "create", "(", ")", "\n", "# Move out C from accumulator", "\n", "# int32_t matmul_finalize(elem_t *C, int32_t I, int32_t J, int32_t pad_I,", "\n", "#         int32_t pad_J, int32_t C_row_len);", "\n", "ib", ".", "emit", "(", "tvm", ".", "call_extern", "(", "\"int32\"", ",", "\"matmul_finalize\"", ",", "\n", "cc", ".", "access_ptr", "(", "\"rw\"", ")", ",", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.conv-autotvm.conv2d_micro.generate_intrinsic_gemm_int8_dim16": [[143, 160], ["conv2d_micro.intrinsic_gemm", "tvm.expr.EQ", "tvm.expr.EQ", "tvm.expr.EQ"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.conv-autotvm.conv2d_micro.intrinsic_gemm"], ["pad_I", ",", "pad_J", ",", "\n", "strideC", ")", ")", "\n", "return", "ib", ".", "get", "(", ")", "\n", "\n", "# standalone (without reduce axis split), reset, update", "\n", "", "return", "None", ",", "_reset", "(", ")", ",", "_body", "(", ")", ",", "_finalize", "(", ")", "\n", "\n", "", "with", "tvm", ".", "build_config", "(", "offset_factor", "=", "1", ")", ":", "\n", "        ", "return", "tvm", ".", "decl_tensor_intrin", "(", "c", ".", "op", ",", "intrin_func", ",", "binds", "=", "{", "a", ":", "Ab", ",", "b", ":", "Bb", ",", "c", ":", "Cb", "}", ",", "name", "=", "\"sp_gemm\"", ")", "\n", "\n", "\n", "", "", "def", "generate_intrinsic_gemm_int8_dim16", "(", "N", ",", "M", ",", "K", ",", "fN", ",", "fM", ",", "fK", ",", "axisN", ",", "axisM", ",", "axisK", ")", ":", "\n", "    ", "last_n", "=", "N", "%", "fN", "\n", "nc", "=", "tvm", ".", "expr", ".", "EQ", "(", "axisN", ",", "N", "//", "fN", ")", "if", "last_n", "!=", "0", "else", "False", "\n", "last_n", "=", "last_n", "if", "last_n", "!=", "0", "else", "fN", "\n", "\n", "last_l", "=", "K", "%", "fK", "\n", "lc", "=", "tvm", ".", "expr", ".", "EQ", "(", "axisK", ",", "K", "//", "fK", ")", "if", "last_l", "!=", "0", "else", "False", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.conv-autotvm.conv2d_micro.intrinsic_gemm": [[162, 269], ["tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.compute", "tvm.var", "tvm.decl_buffer", "tvm.var", "tvm.decl_buffer", "tvm.var", "tvm.decl_buffer", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.build_config", "tvm.decl_tensor_intrin", "tvm.sum", "tvm.ir_builder.create", "tvm.ir_builder.create.emit", "tvm.ir_builder.create.get", "tvm.ir_builder.create", "tvm.ir_builder.create.emit", "tvm.ir_builder.create.get", "tvm.ir_builder.create", "tvm.ir_builder.create.emit", "tvm.ir_builder.create.get", "_reset"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get"], ["\n", "last_m", "=", "M", "%", "fM", "\n", "mc", "=", "tvm", ".", "expr", ".", "EQ", "(", "axisM", ",", "M", "//", "fM", ")", "if", "last_m", "!=", "0", "else", "False", "\n", "last_m", "=", "last_m", "if", "last_m", "!=", "0", "else", "fM", "\n", "\n", "gemm", "=", "intrinsic_gemm_int8", "(", "fN", ",", "fM", ",", "fK", ",", "last_n", ",", "\n", "last_m", ",", "last_l", ",", "nc", ",", "mc", ",", "lc", ",", "DIM", ")", "\n", "\n", "return", "gemm", "\n", "\n", "\n", "# build a task", "\n", "", "shape", "=", "(", "1", ",", "64", ",", "56", ",", "56", ",", "256", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ")", "\n", "task", "=", "Task", "(", "\"conv2d\"", ",", "\"conv2d\"", ",", "conv2d_micro", ",", "shape", ",", "\"micro\"", ",", "0", ")", "\n", "# build a intrinsic", "\n", "intrin", "=", "Intrinsic", "(", "\"gemmini\"", ",", "\"gemmini_size16\"", ",", "intrinsic_gemm_int8_compute", ",", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "generate_intrinsic_gemm_int8_dim16", ",", "\"c -device=micro_dev\"", ")", "\n", "# generate schedule", "\n", "info", "=", "gen_micro_schedule", "(", "task", ",", "intrin", ".", "target", ",", "measure_latency", ")", "\n", "\n", "print", "(", "info", ")", "\n", "print", "(", "measure_latency", "(", "info", ")", ")", "\n", ""]], "home.repos.pwc.inspect_result.pku-liang_HASCO.conv-autotvm.conv2d_micro.tunning": [[271, 319], ["tvm.autotvm.task.create", "print", "types.SimpleNamespace", "tvm.autotvm.measure_option", "logging.getLogger().setLevel", "logging.getLogger().addHandler", "logging.StreamHandler", "print", "tvm.autotvm.tuner.GridSearchTuner", "autotvm.tuner.GridSearchTuner.tune", "tvm.autotvm.apply_history_best", "flextensor.model_measure.ModelBuilder", "flextensor.model_measure.ModelRunner", "logging.getLogger", "logging.getLogger", "open", "tvm.target.create", "conv2d_micro.conv2d", "flextensor.utils.get_iter_info", "flextensor.ppa_model.measure_latency", "print", "os.path.realpath", "os.path.dirname", "open", "json.dump", "flextensor.utils.get_iter_info", "os.path.realpath", "tvm.autotvm.callback.log_to_file"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.conv-autotvm.conv2d_micro.conv2d", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.get_iter_info", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.get_iter_info"], []], "home.repos.pwc.inspect_result.pku-liang_HASCO.conv-autotvm.conv2d_micro.recording": [[321, 333], ["open", "open", "tvm.autotvm.record.decode", "tvm.autotvm.apply_history_best", "tvm.target.create", "conv2d_micro.conv2d", "info.write", "tvm.autotvm.measure.measure.MeasureResult", "json.dumps", "flextensor.utils.get_iter_info", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.conv-autotvm.conv2d_micro.conv2d", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.utils.get_iter_info"], []], "home.repos.pwc.inspect_result.pku-liang_HASCO.configs.conv2d_config.copy_change_batch": [[4, 8], ["copy.deepcopy"], "function", ["None"], ["def", "copy_change_batch", "(", "batch", ",", "x", ")", ":", "\n", "    ", "ret", "=", "copy", ".", "deepcopy", "(", "x", "[", "1", ":", "]", ")", "\n", "ret", "=", "(", "batch", ",", ")", "+", "ret", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_dot.DOTGenerator.__init__": [[123, 125], ["hw_generator.generator.generator.__init__"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.BenchmarkCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dtype", "=", "\"int8\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"DOT\"", ",", "dot_intrinsic", ",", "generate_dot_interface", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_dot.DOTGenerator.instantiate": [[127, 137], ["hw_generator.generator.parse_params", "hw_generator.generator.accelerator", "generator_dot.DOTGenerator.intf_func"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator.parse_params"], ["", "def", "instantiate", "(", "self", ",", "params", ",", "tag", ")", ":", "\n", "\n", "        ", "x", ",", "y", ",", "sp_kb", ",", "sp_banks", ",", "dma_width", ",", "dma_bytes", ",", "local_kb", ",", "dataflow", ",", "dtype", "=", "parse_params", "(", "self", ".", "type", ",", "params", ")", "\n", "\n", "def", "acc_interface", "(", "N", ",", "K", ",", "fN", ",", "fK", ",", "axisN", ",", "axisK", ")", ":", "\n", "            ", "return", "self", ".", "intf_func", "(", "N", ",", "K", ",", "fN", ",", "fK", ",", "axisN", ",", "axisK", ",", "1", ",", "x", "*", "y", ",", "sp_kb", ",", "local_kb", ",", "dtype", ")", "\n", "\n", "# 0, 0 placeholder  the i j dimensions of mapped DOTs ", "\n", "", "acc", "=", "accelerator", "(", "self", ",", "acc_interface", ",", "params", ",", "tag", ",", "(", "0", ",", "0", ",", "dtype", ")", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_dot.dot_interface": [[9, 91], ["hw_generator.intrinsic_lib.dot_intrinsic", "tvm.var", "tvm.decl_buffer", "tvm.var", "tvm.decl_buffer", "tvm.decl_buffer", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.build_config", "tvm.decl_tensor_intrin", "tvm.ir_builder.create", "tvm.ir_builder.create.emit", "tvm.ir_builder.create.get", "tvm.ir_builder.create", "tvm.ir_builder.create.emit", "tvm.ir_builder.create.get", "tvm.ir_builder.create", "tvm.ir_builder.create.emit", "tvm.ir_builder.create.get", "_reset"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.intrinsic_lib.dot_intrinsic", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get"], ["def", "dot_interface", "(", "f_n", ",", "f_k", ",", "l_n", ",", "l_k", ",", "c_n", ",", "c_k", ",", "d_n", ",", "d_k", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"\n    l_n, l_k: last iteration size\n    c_n, c_k: last iteration condition\n    \"\"\"", "\n", "\n", "_", ",", "tensors", "=", "dot_intrinsic", "(", "f_n", ",", "f_k", ",", "dtype", ")", "\n", "tA", ",", "tB", ",", "tC", "=", "tensors", "\n", "\n", "strideA", "=", "tvm", ".", "var", "(", "\"strideA\"", ")", "\n", "sA", "=", "tvm", ".", "decl_buffer", "(", "tA", ".", "shape", ",", "tA", ".", "dtype", ",", "\n", "name", "=", "\"sA\"", ",", "\n", "offset_factor", "=", "1", ",", "\n", "strides", "=", "[", "strideA", ",", "1", "]", ")", "\n", "strideB", "=", "tvm", ".", "var", "(", "\"strideB\"", ")", "\n", "sB", "=", "tvm", ".", "decl_buffer", "(", "tB", ".", "shape", ",", "tB", ".", "dtype", ",", "\n", "name", "=", "\"sB\"", ",", "\n", "offset_factor", "=", "1", ",", "\n", "strides", "=", "[", "strideB", ",", "1", "]", ")", "\n", "\n", "sC", "=", "tvm", ".", "decl_buffer", "(", "tC", ".", "shape", ",", "tC", ".", "dtype", ",", "\n", "name", "=", "\"sC\"", ",", "\n", "offset_factor", "=", "1", ",", "\n", "strides", "=", "[", "1", "]", ")", "\n", "\n", "iter_n", "=", "f_n", "//", "d_n", "+", "(", "0", "if", "f_n", "%", "d_n", "==", "0", "else", "1", ")", "\n", "iter_k", "=", "f_k", "//", "d_k", "+", "(", "0", "if", "f_k", "%", "d_k", "==", "0", "else", "1", ")", "\n", "\n", "pad_n", "=", "0", "if", "f_n", "%", "d_n", "==", "0", "else", "(", "d_n", "-", "f_n", "%", "d_n", ")", "\n", "pad_k", "=", "0", "if", "f_k", "%", "d_k", "==", "0", "else", "(", "d_k", "-", "f_k", "%", "d_k", ")", "\n", "\n", "last_iter_n", "=", "l_n", "//", "d_n", "+", "(", "0", "if", "l_n", "%", "d_n", "==", "0", "else", "1", ")", "\n", "last_iter_k", "=", "l_k", "//", "d_k", "+", "(", "0", "if", "l_k", "%", "d_k", "==", "0", "else", "1", ")", "\n", "last_pad_n", "=", "0", "if", "l_n", "%", "d_n", "==", "0", "else", "(", "d_n", "-", "l_n", "%", "d_n", ")", "\n", "last_pad_k", "=", "0", "if", "l_k", "%", "d_k", "==", "0", "else", "(", "d_k", "-", "l_k", "%", "d_k", ")", "\n", "\n", "\n", "iter_n", "=", "tvm", ".", "if_then_else", "(", "c_n", ",", "last_iter_n", ",", "iter_n", ")", "\n", "iter_k", "=", "tvm", ".", "if_then_else", "(", "c_k", ",", "last_iter_k", ",", "iter_k", ")", "\n", "pad_n", "=", "tvm", ".", "if_then_else", "(", "c_n", ",", "last_pad_n", ",", "pad_n", ")", "\n", "pad_k", "=", "tvm", ".", "if_then_else", "(", "c_k", ",", "last_pad_k", ",", "pad_k", ")", "\n", "\n", "# reset-update-finalize", "\n", "def", "interface_func", "(", "ins", ",", "outs", ")", ":", "\n", "        ", "sa", ",", "sb", "=", "ins", "\n", "sc", ",", "=", "outs", "\n", "\n", "def", "_body", "(", ")", ":", "\n", "            ", "ib", "=", "tvm", ".", "ir_builder", ".", "create", "(", ")", "\n", "ib", ".", "emit", "(", "tvm", ".", "call_extern", "(", "dtype", ",", "\"tensorized_DOT\"", ",", "\n", "sa", ".", "access_ptr", "(", "\"r\"", ")", ",", "\n", "sb", ".", "access_ptr", "(", "\"r\"", ")", ",", "\n", "sc", ".", "access_ptr", "(", "\"rw\"", ")", ",", "\n", "1", ",", "\n", "iter_n", ",", "iter_k", ",", "pad_n", ",", "pad_k", ",", "\n", "strideA", ",", "strideB", ",", "1", ",", "0", ",", "\n", "True", ",", "False", ")", ")", "\n", "return", "ib", ".", "get", "(", ")", "\n", "\n", "", "def", "_reset", "(", ")", ":", "\n", "            ", "ib", "=", "tvm", ".", "ir_builder", ".", "create", "(", ")", "\n", "ib", ".", "emit", "(", "tvm", ".", "call_extern", "(", "dtype", ",", "\"init_output\"", ",", "\n", "sc", ".", "access_ptr", "(", "\"w\"", ")", ",", "\n", "iter_n", ",", "iter_k", ",", "\n", "pad_n", ",", "pad_k", ",", "\n", "1", ")", ")", "\n", "return", "ib", ".", "get", "(", ")", "\n", "\n", "", "def", "_finalize", "(", ")", ":", "\n", "            ", "ib", "=", "tvm", ".", "ir_builder", ".", "create", "(", ")", "\n", "ib", ".", "emit", "(", "tvm", ".", "call_extern", "(", "dtype", ",", "\"store_output\"", ",", "\n", "sc", ".", "access_ptr", "(", "\"rw\"", ")", ",", "\n", "iter_n", ",", "iter_k", ",", "\n", "pad_n", ",", "pad_k", ",", "\n", "1", ")", ")", "\n", "return", "ib", ".", "get", "(", ")", "\n", "\n", "", "return", "None", ",", "_reset", "(", ")", ",", "_body", "(", ")", ",", "_finalize", "(", ")", "\n", "\n", "\n", "", "with", "tvm", ".", "build_config", "(", "offset_factor", "=", "1", ")", ":", "\n", "        ", "return", "tvm", ".", "decl_tensor_intrin", "(", "tC", ".", "op", ",", "interface_func", ",", "binds", "=", "{", "tA", ":", "sA", ",", "tB", ":", "sB", ",", "tC", ":", "sC", "}", ",", "name", "=", "\"dot_interface\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_dot.generate_dot_interface": [[93, 118], ["generator_dot.dot_interface", "tvm.expr.EQ", "tvm.expr.EQ"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_dot.dot_interface"], ["", "", "def", "generate_dot_interface", "(", "N", ",", "K", ",", "fN", ",", "fK", ",", "axisN", ",", "axisK", ",", "dN", ",", "dK", ",", "sp_kb", ",", "local_kb", ",", "dtype", ")", ":", "\n", "\n", "    ", "\"\"\"\n    N, K: the dimensions mapped to n, i\n    fN, fK: interface size (fN, fK) * (fN, fK)\n    axisN, axisK: AST nodes \n    dN, dK: intrinsic size\n    \"\"\"", "\n", "\n", "if", "verbose", ":", "\n", "        ", "assert", "(", "2", "*", "fN", "*", "fK", "+", "fN", ")", "<=", "sp_kb", "*", "8192", "/", "bits_map", "[", "dtype", "]", ",", "'data too large for scratchpad'", "\n", "assert", "(", "2", "*", "dN", "*", "dK", "+", "dN", ")", "<=", "local_kb", "*", "8192", "/", "bits_map", "[", "dtype", "]", ",", "'data too large for local memory'", "\n", "", "else", ":", "\n", "        ", "assert", "(", "2", "*", "fN", "*", "fK", "+", "fN", ")", "<=", "sp_kb", "*", "8192", "/", "bits_map", "[", "dtype", "]", "\n", "assert", "(", "2", "*", "dN", "*", "dK", "+", "dN", ")", "<=", "local_kb", "*", "8192", "/", "bits_map", "[", "dtype", "]", "\n", "\n", "", "last_n", "=", "N", "%", "fN", "# the last iteration of N", "\n", "cond_n", "=", "tvm", ".", "expr", ".", "EQ", "(", "axisN", ",", "N", "//", "fN", ")", "if", "last_n", "!=", "0", "else", "False", "# n condition statement", "\n", "last_n", "=", "last_n", "if", "last_n", "!=", "0", "else", "fN", "\n", "\n", "last_k", "=", "K", "%", "fK", "\n", "cond_k", "=", "tvm", ".", "expr", ".", "EQ", "(", "axisK", ",", "K", "//", "fK", ")", "if", "last_k", "!=", "0", "else", "False", "# k condition statement", "\n", "last_k", "=", "last_k", "if", "last_k", "!=", "0", "else", "fK", "\n", "\n", "return", "dot_interface", "(", "fN", ",", "fK", ",", "last_n", ",", "last_k", ",", "cond_n", ",", "cond_k", ",", "dN", ",", "dK", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.intrinsic_lib.gemm_intrinsic": [[3, 11], ["tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.compute", "tvm.sum"], "function", ["None"], ["def", "gemm_intrinsic", "(", "i", ",", "j", ",", "k", ",", "dtype", ")", ":", "\n", "    ", "a", "=", "tvm", ".", "placeholder", "(", "(", "i", ",", "k", ")", ",", "name", "=", "'a'", ",", "dtype", "=", "dtype", ")", "\n", "b", "=", "tvm", ".", "placeholder", "(", "(", "k", ",", "j", ")", ",", "name", "=", "'b'", ",", "dtype", "=", "dtype", ")", "\n", "kk", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "k", ")", ",", "name", "=", "'k'", ")", "\n", "c", "=", "tvm", ".", "compute", "(", "(", "i", ",", "j", ")", ",", "lambda", "ii", ",", "jj", ":", "\n", "tvm", ".", "sum", "(", "a", "[", "ii", ",", "kk", "]", "*", "b", "[", "kk", ",", "jj", "]", ",", "axis", "=", "kk", ")", ",", "name", "=", "'c'", ")", "\n", "\n", "return", "c", ",", "[", "a", ",", "b", ",", "c", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.intrinsic_lib.gemv_intrinsic": [[13, 21], ["tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.compute", "tvm.sum"], "function", ["None"], ["", "def", "gemv_intrinsic", "(", "i", ",", "j", ",", "dtype", ")", ":", "\n", "    ", "a", "=", "tvm", ".", "placeholder", "(", "(", "i", ",", "j", ")", ",", "name", "=", "'a'", ",", "dtype", "=", "dtype", ")", "\n", "b", "=", "tvm", ".", "placeholder", "(", "(", "j", ",", ")", ",", "name", "=", "'b'", ",", "dtype", "=", "dtype", ")", "\n", "jj", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "j", ")", ",", "name", "=", "'j'", ")", "\n", "c", "=", "tvm", ".", "compute", "(", "(", "i", ",", ")", ",", "lambda", "ii", ":", "\n", "tvm", ".", "sum", "(", "a", "[", "ii", ",", "jj", "]", "*", "b", "[", "jj", "]", ",", "axis", "=", "jj", ")", ",", "name", "=", "'c'", ")", "\n", "\n", "return", "c", ",", "[", "a", ",", "b", ",", "c", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.intrinsic_lib.dot_intrinsic": [[24, 32], ["tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.compute", "tvm.sum"], "function", ["None"], ["", "def", "dot_intrinsic", "(", "n", ",", "i", ",", "dtype", ")", ":", "\n", "    ", "a", "=", "tvm", ".", "placeholder", "(", "(", "n", ",", "i", ")", ",", "name", "=", "'a'", ",", "dtype", "=", "dtype", ")", "\n", "b", "=", "tvm", ".", "placeholder", "(", "(", "n", ",", "i", ")", ",", "name", "=", "'b'", ",", "dtype", "=", "dtype", ")", "\n", "ii", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "i", ")", ",", "name", "=", "'i'", ")", "\n", "c", "=", "tvm", ".", "compute", "(", "(", "n", ",", ")", ",", "lambda", "nn", ":", "\n", "tvm", ".", "sum", "(", "a", "[", "nn", ",", "ii", "]", "*", "b", "[", "nn", ",", "ii", "]", ",", "axis", "=", "ii", ")", ",", "name", "=", "'c'", ")", "\n", "\n", "return", "c", ",", "[", "a", ",", "b", ",", "c", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.intrinsic_lib.conv_intrinsic": [[35, 48], ["tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.reduce_axis", "tvm.reduce_axis", "tvm.compute", "tvm.sum"], "function", ["None"], ["", "def", "conv_intrinsic", "(", "n", ",", "c", ",", "y", ",", "x", ",", "k", ",", "r", ",", "s", ",", "dtype", ")", ":", "\n", "\n", "    ", "a", "=", "tvm", ".", "placeholder", "(", "(", "n", ",", "y", "+", "r", "-", "1", ",", "x", "+", "s", "-", "1", ",", "c", ")", ",", "name", "=", "'a'", ",", "dtype", "=", "dtype", ")", "# unused size", "\n", "b", "=", "tvm", ".", "placeholder", "(", "(", "r", ",", "s", ",", "c", ",", "k", ")", ",", "name", "=", "'b'", ",", "dtype", "=", "dtype", ")", "\n", "\n", "rr", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "r", ")", ",", "name", "=", "\"r\"", ")", "\n", "ss", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "s", ")", ",", "name", "=", "\"s\"", ")", "\n", "cc", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "c", ")", ",", "name", "=", "\"c\"", ")", "\n", "\n", "o", "=", "tvm", ".", "compute", "(", "(", "n", ",", "y", ",", "x", ",", "k", ")", ",", "lambda", "nn", ",", "yy", ",", "xx", ",", "kk", ":", "\n", "tvm", ".", "sum", "(", "a", "[", "nn", ",", "yy", "+", "rr", ",", "xx", "+", "ss", ",", "cc", "]", "*", "b", "[", "rr", ",", "ss", ",", "cc", ",", "kk", "]", ",", "axis", "=", "[", "rr", ",", "ss", ",", "cc", "]", ")", ",", "name", "=", "'o'", ")", "\n", "\n", "return", "o", ",", "[", "a", ",", "b", ",", "o", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_gemv.GEMVGenerator.__init__": [[120, 122], ["hw_generator.generator.generator.__init__"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.BenchmarkCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dtype", "=", "\"int8\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"GEMV\"", ",", "gemv_intrinsic", ",", "generate_gemv_interface", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_gemv.GEMVGenerator.instantiate": [[125, 135], ["hw_generator.generator.parse_params", "hw_generator.generator.accelerator", "generator_gemv.GEMVGenerator.intf_func"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator.parse_params"], ["", "def", "instantiate", "(", "self", ",", "params", ",", "tag", ")", ":", "\n", "\n", "        ", "x", ",", "y", ",", "sp_kb", ",", "sp_banks", ",", "dma_width", ",", "dma_bytes", ",", "local_kb", ",", "dataflow", ",", "dtype", "=", "parse_params", "(", "self", ".", "type", ",", "params", ")", "\n", "\n", "def", "acc_interface", "(", "M", ",", "N", ",", "fM", ",", "fN", ",", "axisM", ",", "axisN", ")", ":", "\n", "            ", "return", "self", ".", "intf_func", "(", "M", ",", "N", ",", "fM", ",", "fN", ",", "axisM", ",", "axisN", ",", "x", "*", "y", ",", "1", ",", "sp_kb", ",", "local_kb", ",", "dtype", ")", "\n", "\n", "# 0, 0 placeholder  the i j dimensions of  mapped GEMVs ", "\n", "", "acc", "=", "accelerator", "(", "self", ",", "acc_interface", ",", "params", ",", "tag", ",", "(", "0", ",", "0", ",", "dtype", ")", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_gemv.gemv_interface": [[8, 85], ["hw_generator.intrinsic_lib.gemv_intrinsic", "tvm.var", "tvm.decl_buffer", "tvm.decl_buffer", "tvm.decl_buffer", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.build_config", "tvm.decl_tensor_intrin", "tvm.ir_builder.create", "tvm.ir_builder.create.emit", "tvm.ir_builder.create.get", "tvm.ir_builder.create", "tvm.ir_builder.create.emit", "tvm.ir_builder.create.get", "tvm.ir_builder.create", "tvm.ir_builder.create.emit", "tvm.ir_builder.create.get", "_reset"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.intrinsic_lib.gemv_intrinsic", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get"], ["def", "gemv_interface", "(", "f_m", ",", "f_n", ",", "l_m", ",", "l_n", ",", "c_m", ",", "c_n", ",", "d_m", ",", "d_n", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"\n    l_m, l_n: last iteration size\n    c_m, c_n: last iteration condition\n    \"\"\"", "\n", "\n", "_", ",", "tensors", "=", "gemv_intrinsic", "(", "f_m", ",", "f_n", ",", "dtype", ")", "\n", "tA", ",", "tB", ",", "tC", "=", "tensors", "\n", "\n", "strideA", "=", "tvm", ".", "var", "(", "\"strideA\"", ")", "\n", "sA", "=", "tvm", ".", "decl_buffer", "(", "tA", ".", "shape", ",", "tA", ".", "dtype", ",", "\n", "name", "=", "\"sA\"", ",", "\n", "offset_factor", "=", "1", ",", "\n", "strides", "=", "[", "strideA", ",", "1", "]", ")", "\n", "sB", "=", "tvm", ".", "decl_buffer", "(", "tB", ".", "shape", ",", "tB", ".", "dtype", ",", "\n", "name", "=", "\"sB\"", ",", "\n", "offset_factor", "=", "1", ",", "\n", "strides", "=", "[", "1", "]", ")", "\n", "sC", "=", "tvm", ".", "decl_buffer", "(", "tC", ".", "shape", ",", "tC", ".", "dtype", ",", "\n", "name", "=", "\"sC\"", ",", "\n", "offset_factor", "=", "1", ",", "\n", "strides", "=", "[", "1", "]", ")", "\n", "\n", "iter_m", "=", "f_m", "//", "d_m", "+", "(", "0", "if", "f_m", "%", "d_m", "==", "0", "else", "1", ")", "\n", "iter_n", "=", "f_n", "//", "d_n", "+", "(", "0", "if", "f_n", "%", "d_n", "==", "0", "else", "1", ")", "\n", "pad_m", "=", "0", "if", "f_m", "%", "d_m", "==", "0", "else", "(", "d_m", "-", "f_m", "%", "d_m", ")", "\n", "pad_n", "=", "0", "if", "f_n", "%", "d_n", "==", "0", "else", "(", "d_n", "-", "f_n", "%", "d_n", ")", "\n", "\n", "last_iter_m", "=", "l_m", "//", "d_m", "+", "(", "0", "if", "l_m", "%", "d_m", "==", "0", "else", "1", ")", "\n", "last_iter_n", "=", "l_n", "//", "d_n", "+", "(", "0", "if", "l_n", "%", "d_n", "==", "0", "else", "1", ")", "\n", "last_pad_m", "=", "0", "if", "l_m", "%", "d_m", "==", "0", "else", "(", "d_m", "-", "l_m", "%", "d_m", ")", "\n", "last_pad_n", "=", "0", "if", "l_n", "%", "d_n", "==", "0", "else", "(", "d_n", "-", "l_n", "%", "d_n", ")", "\n", "\n", "iter_m", "=", "tvm", ".", "if_then_else", "(", "c_m", ",", "last_iter_m", ",", "iter_m", ")", "\n", "iter_n", "=", "tvm", ".", "if_then_else", "(", "c_n", ",", "last_iter_n", ",", "iter_n", ")", "\n", "pad_m", "=", "tvm", ".", "if_then_else", "(", "c_m", ",", "last_pad_m", ",", "pad_m", ")", "\n", "pad_n", "=", "tvm", ".", "if_then_else", "(", "c_n", ",", "last_pad_n", ",", "pad_n", ")", "\n", "\n", "# reset-update-finalize", "\n", "def", "interface_func", "(", "ins", ",", "outs", ")", ":", "\n", "        ", "sa", ",", "sb", "=", "ins", "\n", "sc", ",", "=", "outs", "\n", "# print(sa.strides, sb.strides, sc.strides)", "\n", "\n", "def", "_body", "(", ")", ":", "\n", "            ", "ib", "=", "tvm", ".", "ir_builder", ".", "create", "(", ")", "\n", "ib", ".", "emit", "(", "tvm", ".", "call_extern", "(", "dtype", ",", "\"tensorized_GEMV\"", ",", "\n", "sa", ".", "access_ptr", "(", "\"r\"", ")", ",", "\n", "sb", ".", "access_ptr", "(", "\"r\"", ")", ",", "\n", "sc", ".", "access_ptr", "(", "\"rw\"", ")", ",", "\n", "1", ",", "\n", "iter_m", ",", "iter_n", ",", "\n", "pad_m", ",", "pad_n", ",", "\n", "strideA", ",", "1", ",", "1", ",", "0", ",", "\n", "True", ",", "False", ")", ")", "\n", "return", "ib", ".", "get", "(", ")", "\n", "\n", "", "def", "_reset", "(", ")", ":", "\n", "            ", "ib", "=", "tvm", ".", "ir_builder", ".", "create", "(", ")", "\n", "ib", ".", "emit", "(", "tvm", ".", "call_extern", "(", "dtype", ",", "\"init_output\"", ",", "\n", "sc", ".", "access_ptr", "(", "\"w\"", ")", ",", "\n", "iter_m", ",", "pad_m", ",", "\n", "1", ")", ")", "\n", "return", "ib", ".", "get", "(", ")", "\n", "\n", "", "def", "_finalize", "(", ")", ":", "\n", "            ", "ib", "=", "tvm", ".", "ir_builder", ".", "create", "(", ")", "\n", "ib", ".", "emit", "(", "tvm", ".", "call_extern", "(", "dtype", ",", "\"store_output\"", ",", "\n", "sc", ".", "access_ptr", "(", "\"rw\"", ")", ",", "\n", "iter_m", ",", "pad_m", ",", "\n", "1", ")", ")", "\n", "return", "ib", ".", "get", "(", ")", "\n", "\n", "", "return", "None", ",", "_reset", "(", ")", ",", "_body", "(", ")", ",", "_finalize", "(", ")", "\n", "\n", "", "with", "tvm", ".", "build_config", "(", "offset_factor", "=", "1", ")", ":", "\n", "        ", "return", "tvm", ".", "decl_tensor_intrin", "(", "tC", ".", "op", ",", "interface_func", ",", "binds", "=", "{", "tA", ":", "sA", ",", "tB", ":", "sB", ",", "tC", ":", "sC", "}", ",", "name", "=", "\"gemv_interface\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_gemv.generate_gemv_interface": [[87, 114], ["generator_gemv.gemv_interface", "tvm.expr.EQ", "tvm.expr.EQ"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_gemv.gemv_interface"], ["", "", "def", "generate_gemv_interface", "(", "M", ",", "N", ",", "fM", ",", "fN", ",", "axisM", ",", "axisN", ",", "dM", ",", "dN", ",", "sp_kb", ",", "local_kb", ",", "dtype", ")", ":", "\n", "\n", "    ", "\"\"\"\n    M, N: the dimensions mapped to i, j\n    fM, fN: interface size (fM, fN) * (fN)\n    axisM, axisN: AST nodes \n    dM, dN: intrinsic size\n    \"\"\"", "\n", "\n", "\n", "if", "verbose", ":", "\n", "        ", "assert", "(", "fM", "*", "fN", "+", "fM", "+", "fN", ")", "<=", "sp_kb", "*", "8192", "/", "bits_map", "[", "dtype", "]", ",", "'data too large for scratchpad'", "\n", "assert", "(", "dM", "*", "dN", "+", "dM", "+", "dN", ")", "<=", "local_kb", "*", "8192", "/", "bits_map", "[", "dtype", "]", ",", "'data too large for local memory'", "\n", "", "else", ":", "\n", "        ", "assert", "(", "fM", "*", "fN", "+", "fM", "+", "fN", ")", "<=", "sp_kb", "*", "8192", "/", "bits_map", "[", "dtype", "]", "\n", "assert", "(", "dM", "*", "dN", "+", "dM", "+", "dN", ")", "<=", "local_kb", "*", "8192", "/", "bits_map", "[", "dtype", "]", "\n", "\n", "\n", "", "last_m", "=", "M", "%", "fM", "\n", "cond_m", "=", "tvm", ".", "expr", ".", "EQ", "(", "axisM", ",", "M", "//", "fM", ")", "if", "last_m", "!=", "0", "else", "False", "# m condition statement", "\n", "last_m", "=", "last_m", "if", "last_m", "!=", "0", "else", "fM", "\n", "\n", "last_n", "=", "N", "%", "fN", "# the last iteration of N", "\n", "cond_n", "=", "tvm", ".", "expr", ".", "EQ", "(", "axisN", ",", "N", "//", "fN", ")", "if", "last_n", "!=", "0", "else", "False", "# n condition statement", "\n", "last_n", "=", "last_n", "if", "last_n", "!=", "0", "else", "fN", "\n", "\n", "return", "gemv_interface", "(", "fM", ",", "fN", ",", "last_m", ",", "last_n", ",", "cond_m", ",", "cond_n", ",", "dM", ",", "dN", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator.generator.__init__": [[32, 37], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "type", ",", "intrin_func", ",", "interface_func", ",", "dtype", "=", "\"int8\"", ")", ":", "\n", "        ", "self", ".", "type", "=", "type", "\n", "self", ".", "intrin_func", "=", "intrin_func", "\n", "self", ".", "intf_func", "=", "interface_func", "\n", "self", ".", "dtype", "=", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator.generator.meet_constraints": [[38, 40], ["None"], "methods", ["None"], ["", "def", "meet_constraints", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator.generator.instantiate": [[41, 43], ["None"], "methods", ["None"], ["", "def", "instantiate", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator.accelerator.__init__": [[47, 56], ["flextensor.intrinsic.Intrinsic", "flextensor.intrinsic.register_intrin"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.intrinsic.register_intrin"], ["    ", "def", "__init__", "(", "self", ",", "generator", ",", "acc_interface", ",", "params", ",", "tag", ",", "intrin_args", ")", ":", "\n", "        ", "self", ".", "type", "=", "generator", ".", "type", "\n", "self", ".", "name", "=", "generator", ".", "type", "+", "\"_\"", "+", "tag", "\n", "self", ".", "intrin_func", "=", "generator", ".", "intrin_func", "\n", "self", ".", "target", "=", "\"c -device=micro_dev\"", "\n", "self", ".", "flex_intrin", "=", "Intrinsic", "(", "self", ".", "type", ",", "self", ".", "name", ",", "self", ".", "intrin_func", ",", "intrin_args", ",", "\n", "acc_interface", ",", "self", ".", "target", ")", "\n", "register_intrin", "(", "self", ".", "flex_intrin", ")", "\n", "self", ".", "params", "=", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator.accelerator.add_intrinsic": [[57, 61], ["flextensor.intrinsic.Intrinsic", "flextensor.intrinsic.register_intrin"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.intrinsic.register_intrin"], ["", "def", "add_intrinsic", "(", "self", ",", "intrin_func", ",", "intrin_args", ",", "interface", ")", ":", "\n", "        ", "flex_intrin", "=", "Intrinsic", "(", "\"\"", ",", "\"\"", ",", "intrin_func", ",", "intrin_args", ",", "\n", "interface", ",", "self", ".", "target", ")", "# should be a intrin list", "\n", "register_intrin", "(", "flex_intrin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator.accelerator.print_info": [[63, 66], ["print", "print"], "methods", ["None"], ["", "def", "print_info", "(", "self", ")", ":", "\n", "        ", "print", "(", "self", ".", "name", ")", "\n", "print", "(", "self", ".", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator.parse_params": [[5, 27], ["isinstance", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "len", "params.insert", "params.get", "params.get", "params.get"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get"], ["def", "parse_params", "(", "acc_type", ",", "params", ")", ":", "\n", "    ", "if", "isinstance", "(", "params", ",", "list", ")", ":", "\n", "        ", "if", "len", "(", "params", ")", "==", "9", ":", "# current #params", "\n", "            ", "return", "params", "\n", "", "else", ":", "\n", "            ", "x", "=", "params", "[", "0", "]", "\n", "params", ".", "insert", "(", "1", ",", "x", ")", "\n", "return", "params", "\n", "", "", "else", ":", "\n", "        ", "x", "=", "params", ".", "get", "(", "f\"x\"", ")", "\n", "y", "=", "x", "if", "params", ".", "get", "(", "f\"y\"", ")", "==", "None", "else", "params", ".", "get", "(", "f\"y\"", ")", "\n", "sp_cap", "=", "params", ".", "get", "(", "f\"sp_capacity\"", ")", "\n", "sp_banks", "=", "params", ".", "get", "(", "f\"sp_banks\"", ")", "\n", "dma_width", "=", "params", ".", "get", "(", "f\"dma_buswidth\"", ")", "\n", "dma_bytes", "=", "params", ".", "get", "(", "f\"dma_maxbytes\"", ")", "\n", "l_cap", "=", "params", ".", "get", "(", "f\"local_capacity\"", ")", "\n", "dtype", "=", "params", ".", "get", "(", "f\"dtype\"", ")", "\n", "if", "acc_type", "==", "\"GEMM\"", ":", "\n", "            ", "dataflow", "=", "params", ".", "get", "(", "f\"dataflow\"", ")", "\n", "", "else", ":", "\n", "            ", "dataflow", "=", "\"FIXED\"", "\n", "", "return", "x", ",", "y", ",", "sp_cap", ",", "sp_banks", ",", "dma_width", ",", "dma_bytes", ",", "l_cap", ",", "dataflow", ",", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_conv.CONVGenerator.__init__": [[198, 200], ["hw_generator.generator.generator.__init__"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.BenchmarkCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dtype", "=", "\"int8\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"CONV\"", ",", "conv_intrinsic", ",", "generate_conv_interface", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_conv.CONVGenerator.instantiate": [[203, 225], ["hw_generator.generator.parse_params", "hw_generator.generator.accelerator", "generator_conv.CONVGenerator.intf_func"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator.parse_params"], ["", "def", "instantiate", "(", "self", ",", "params", ",", "tag", ")", ":", "\n", "\n", "        ", "x", ",", "y", ",", "sp_kb", ",", "sp_banks", ",", "dma_width", ",", "dma_bytes", ",", "local_kb", ",", "dataflow", ",", "dtype", "=", "parse_params", "(", "self", ".", "type", ",", "params", ")", "\n", "\n", "def", "interface_3x3", "(", "N", ",", "C", ",", "Y", ",", "X", ",", "K", ",", "R", ",", "S", ",", "fN", ",", "fC", ",", "fY", ",", "fX", ",", "fK", ",", "fR", ",", "fS", ",", "\n", "axisN", ",", "axisC", ",", "axisY", ",", "axisX", ",", "axisK", ",", "axisR", ",", "axisS", ")", ":", "\n", "            ", "return", "self", ".", "intf_func", "(", "N", ",", "C", ",", "Y", ",", "X", ",", "K", ",", "R", ",", "S", ",", "fN", ",", "fC", ",", "fY", ",", "fX", ",", "fK", ",", "fR", ",", "fS", ",", "\n", "axisN", ",", "axisC", ",", "axisY", ",", "axisX", ",", "axisK", ",", "axisR", ",", "axisS", ",", "\n", "1", ",", "y", ",", "16", ",", "16", ",", "x", ",", "3", ",", "3", ",", "sp_kb", ",", "local_kb", ",", "dtype", ")", "# intrinsic size is hardware-specific", "\n", "\n", "# 0s placeholder  the  dimensions of  mapped CONVs ", "\n", "", "acc", "=", "accelerator", "(", "self", ",", "interface_3x3", ",", "params", ",", "tag", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "dtype", ")", ")", "\n", "\n", "\n", "# def interface_1x1(N, C, Y, X, K, R, S, fN, fC, fY, fX, fK, fR, fS,", "\n", "#                  axisN, axisC, axisY, axisX, axisK, axisR, axisS):", "\n", "#     from hw_generator.generator_gemm import generate_gemm_interface", "\n", "#     return generate_gemm_interface(K, Y, C, fK, fY, fC, axisK, axisY, axisC, x, y, 1, sp_kb, local_kb, dtype) ", "\n", "\n", "# acc.add_intrinsic(gemm_intrinsic, (0, 0, 0, dtype), interface_1x1)", "\n", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_conv.conv_interface": [[12, 140], ["hw_generator.intrinsic_lib.conv_intrinsic", "tvm.var", "tvm.var", "tvm.var", "tvm.decl_buffer", "tvm.var", "tvm.var", "tvm.var", "tvm.decl_buffer", "tvm.var", "tvm.var", "tvm.var", "tvm.decl_buffer", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.build_config", "tvm.decl_tensor_intrin", "tvm.ir_builder.create", "tvm.ir_builder.create.emit", "tvm.ir_builder.create.get", "tvm.ir_builder.create", "tvm.ir_builder.create.emit", "tvm.ir_builder.create.get", "tvm.ir_builder.create", "tvm.ir_builder.create.emit", "tvm.ir_builder.create.get", "_reset"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.intrinsic_lib.conv_intrinsic", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get"], ["def", "conv_interface", "(", "f_n", ",", "f_c", ",", "f_y", ",", "f_x", ",", "f_k", ",", "f_r", ",", "f_s", ",", "\n", "l_n", ",", "l_c", ",", "l_y", ",", "l_x", ",", "l_k", ",", "l_r", ",", "l_s", ",", "\n", "c_n", ",", "c_c", ",", "c_y", ",", "c_x", ",", "c_k", ",", "c_r", ",", "c_s", ",", "\n", "d_n", ",", "d_c", ",", "d_y", ",", "d_x", ",", "d_k", ",", "d_r", ",", "d_s", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"\n    l_n, l_c, l_y, l_x, l_k, l_r, l_s: last iteration size\n    c_n, c_c, c_y, c_x, c_k, c_r, c_s: last iteration conditif_son\n    \"\"\"", "\n", "\n", "_", ",", "tensors", "=", "conv_intrinsic", "(", "f_n", ",", "f_c", ",", "f_y", ",", "f_x", ",", "f_k", ",", "f_r", ",", "f_s", ",", "dtype", ")", "\n", "tA", ",", "tB", ",", "tC", "=", "tensors", "\n", "\n", "# print(tA.shape, tB.shape, tC.shape)", "\n", "strideA1", "=", "tvm", ".", "var", "(", "\"strideA1\"", ")", "\n", "strideA2", "=", "tvm", ".", "var", "(", "\"strideA2\"", ")", "\n", "strideA3", "=", "tvm", ".", "var", "(", "\"strideA3\"", ")", "\n", "sA", "=", "tvm", ".", "decl_buffer", "(", "tA", ".", "shape", ",", "tA", ".", "dtype", ",", "\n", "name", "=", "\"sA\"", ",", "\n", "offset_factor", "=", "1", ",", "\n", "strides", "=", "[", "strideA1", ",", "strideA2", ",", "strideA3", ",", "1", "]", ")", "\n", "strideB1", "=", "tvm", ".", "var", "(", "\"strideB1\"", ")", "\n", "strideB2", "=", "tvm", ".", "var", "(", "\"strideB2\"", ")", "\n", "strideB3", "=", "tvm", ".", "var", "(", "\"strideB3\"", ")", "\n", "sB", "=", "tvm", ".", "decl_buffer", "(", "tB", ".", "shape", ",", "tB", ".", "dtype", ",", "\n", "name", "=", "\"sB\"", ",", "\n", "offset_factor", "=", "1", ",", "\n", "strides", "=", "[", "strideB1", ",", "strideB2", ",", "strideB3", ",", "1", "]", ")", "\n", "strideC1", "=", "tvm", ".", "var", "(", "\"strideC1\"", ")", "\n", "strideC2", "=", "tvm", ".", "var", "(", "\"strideC2\"", ")", "\n", "strideC3", "=", "tvm", ".", "var", "(", "\"strideC3\"", ")", "\n", "sC", "=", "tvm", ".", "decl_buffer", "(", "tC", ".", "shape", ",", "tC", ".", "dtype", ",", "\n", "name", "=", "\"sC\"", ",", "\n", "offset_factor", "=", "1", ",", "\n", "strides", "=", "[", "strideC1", ",", "strideC2", ",", "strideC3", ",", "1", "]", ")", "\n", "\n", "\n", "iter_n", "=", "f_n", "//", "d_n", "+", "(", "0", "if", "f_n", "%", "d_n", "==", "0", "else", "1", ")", "\n", "iter_c", "=", "f_c", "//", "d_c", "+", "(", "0", "if", "f_c", "%", "d_c", "==", "0", "else", "1", ")", "\n", "iter_y", "=", "f_y", "//", "d_y", "+", "(", "0", "if", "f_y", "%", "d_y", "==", "0", "else", "1", ")", "\n", "iter_x", "=", "f_x", "//", "d_x", "+", "(", "0", "if", "f_x", "%", "d_x", "==", "0", "else", "1", ")", "\n", "iter_k", "=", "f_k", "//", "d_k", "+", "(", "0", "if", "f_k", "%", "d_k", "==", "0", "else", "1", ")", "\n", "iter_r", "=", "f_r", "//", "d_r", "+", "(", "0", "if", "f_r", "%", "d_r", "==", "0", "else", "1", ")", "\n", "iter_s", "=", "f_s", "//", "d_s", "+", "(", "0", "if", "f_s", "%", "d_s", "==", "0", "else", "1", ")", "\n", "\n", "\n", "pad_n", "=", "0", "if", "f_n", "%", "d_n", "==", "0", "else", "(", "d_n", "-", "f_n", "%", "d_n", ")", "\n", "pad_c", "=", "0", "if", "f_c", "%", "d_c", "==", "0", "else", "(", "d_c", "-", "f_c", "%", "d_c", ")", "\n", "pad_y", "=", "0", "if", "f_y", "%", "d_y", "==", "0", "else", "(", "d_y", "-", "f_y", "%", "d_y", ")", "\n", "pad_x", "=", "0", "if", "f_x", "%", "d_x", "==", "0", "else", "(", "d_x", "-", "f_x", "%", "d_x", ")", "\n", "pad_k", "=", "0", "if", "f_k", "%", "d_k", "==", "0", "else", "(", "d_k", "-", "f_k", "%", "d_k", ")", "\n", "pad_r", "=", "0", "if", "f_r", "%", "d_r", "==", "0", "else", "(", "d_r", "-", "f_r", "%", "d_r", ")", "\n", "pad_s", "=", "0", "if", "f_s", "%", "d_s", "==", "0", "else", "(", "d_s", "-", "f_s", "%", "d_s", ")", "\n", "\n", "last_iter_n", "=", "l_n", "//", "d_n", "+", "(", "0", "if", "l_n", "%", "d_n", "==", "0", "else", "1", ")", "\n", "last_iter_c", "=", "l_c", "//", "d_c", "+", "(", "0", "if", "l_c", "%", "d_c", "==", "0", "else", "1", ")", "\n", "last_iter_y", "=", "l_y", "//", "d_y", "+", "(", "0", "if", "l_y", "%", "d_y", "==", "0", "else", "1", ")", "\n", "last_iter_x", "=", "l_x", "//", "d_x", "+", "(", "0", "if", "l_x", "%", "d_x", "==", "0", "else", "1", ")", "\n", "last_iter_k", "=", "l_k", "//", "d_k", "+", "(", "0", "if", "l_k", "%", "d_k", "==", "0", "else", "1", ")", "\n", "last_iter_r", "=", "l_r", "//", "d_r", "+", "(", "0", "if", "l_r", "%", "d_r", "==", "0", "else", "1", ")", "\n", "last_iter_s", "=", "l_s", "//", "d_s", "+", "(", "0", "if", "l_s", "%", "d_s", "==", "0", "else", "1", ")", "\n", "\n", "\n", "last_pad_n", "=", "0", "if", "l_n", "%", "d_n", "==", "0", "else", "(", "d_n", "-", "l_n", "%", "d_n", ")", "\n", "last_pad_c", "=", "0", "if", "l_c", "%", "d_c", "==", "0", "else", "(", "d_c", "-", "l_c", "%", "d_c", ")", "\n", "last_pad_y", "=", "0", "if", "l_y", "%", "d_y", "==", "0", "else", "(", "d_y", "-", "l_y", "%", "d_y", ")", "\n", "last_pad_x", "=", "0", "if", "l_x", "%", "d_x", "==", "0", "else", "(", "d_x", "-", "l_x", "%", "d_x", ")", "\n", "last_pad_k", "=", "0", "if", "l_k", "%", "d_k", "==", "0", "else", "(", "d_k", "-", "l_k", "%", "d_k", ")", "\n", "last_pad_r", "=", "0", "if", "l_r", "%", "d_r", "==", "0", "else", "(", "d_r", "-", "l_r", "%", "d_r", ")", "\n", "last_pad_s", "=", "0", "if", "l_s", "%", "d_s", "==", "0", "else", "(", "d_s", "-", "l_s", "%", "d_s", ")", "\n", "\n", "\n", "iter_n", "=", "tvm", ".", "if_then_else", "(", "c_n", ",", "last_iter_n", ",", "iter_n", ")", "\n", "iter_c", "=", "tvm", ".", "if_then_else", "(", "c_c", ",", "last_iter_c", ",", "iter_c", ")", "\n", "iter_y", "=", "tvm", ".", "if_then_else", "(", "c_y", ",", "last_iter_y", ",", "iter_y", ")", "\n", "iter_x", "=", "tvm", ".", "if_then_else", "(", "c_x", ",", "last_iter_x", ",", "iter_x", ")", "\n", "iter_k", "=", "tvm", ".", "if_then_else", "(", "c_k", ",", "last_iter_k", ",", "iter_k", ")", "\n", "iter_r", "=", "tvm", ".", "if_then_else", "(", "c_r", ",", "last_iter_r", ",", "iter_r", ")", "\n", "iter_s", "=", "tvm", ".", "if_then_else", "(", "c_s", ",", "last_iter_s", ",", "iter_s", ")", "\n", "\n", "pad_n", "=", "tvm", ".", "if_then_else", "(", "c_n", ",", "last_pad_n", ",", "pad_n", ")", "\n", "pad_c", "=", "tvm", ".", "if_then_else", "(", "c_c", ",", "last_pad_c", ",", "pad_c", ")", "\n", "pad_y", "=", "tvm", ".", "if_then_else", "(", "c_y", ",", "last_pad_y", ",", "pad_y", ")", "\n", "pad_x", "=", "tvm", ".", "if_then_else", "(", "c_x", ",", "last_pad_x", ",", "pad_x", ")", "\n", "pad_k", "=", "tvm", ".", "if_then_else", "(", "c_k", ",", "last_pad_k", ",", "pad_k", ")", "\n", "pad_r", "=", "tvm", ".", "if_then_else", "(", "c_r", ",", "last_pad_r", ",", "pad_r", ")", "\n", "pad_s", "=", "tvm", ".", "if_then_else", "(", "c_s", ",", "last_pad_s", ",", "pad_s", ")", "\n", "\n", "# reset-update-finalize", "\n", "def", "interface_func", "(", "ins", ",", "outs", ")", ":", "\n", "        ", "sa", ",", "sb", "=", "ins", "\n", "sc", ",", "=", "outs", "\n", "\n", "def", "_body", "(", ")", ":", "\n", "            ", "ib", "=", "tvm", ".", "ir_builder", ".", "create", "(", ")", "\n", "\n", "ib", ".", "emit", "(", "tvm", ".", "call_extern", "(", "dtype", ",", "\"tensorized_CONV\"", ",", "\n", "sa", ".", "access_ptr", "(", "\"r\"", ")", ",", "\n", "sb", ".", "access_ptr", "(", "\"r\"", ")", ",", "\n", "sc", ".", "access_ptr", "(", "\"rw\"", ")", ",", "\n", "1", ",", "\n", "iter_n", ",", "iter_c", ",", "iter_y", ",", "iter_x", ",", "iter_k", ",", "iter_r", ",", "iter_s", ",", "\n", "pad_n", ",", "pad_c", ",", "pad_y", ",", "pad_x", ",", "pad_k", ",", "pad_r", ",", "pad_s", ",", "\n", "True", ",", "False", ")", ")", "\n", "return", "ib", ".", "get", "(", ")", "\n", "\n", "", "def", "_reset", "(", ")", ":", "\n", "            ", "ib", "=", "tvm", ".", "ir_builder", ".", "create", "(", ")", "\n", "\n", "ib", ".", "emit", "(", "tvm", ".", "call_extern", "(", "dtype", ",", "\"init_output\"", ",", "\n", "sc", ".", "access_ptr", "(", "\"w\"", ")", ",", "\n", "iter_n", ",", "iter_y", ",", "iter_x", ",", "iter_k", ",", "\n", "pad_n", ",", "pad_y", ",", "pad_x", ",", "pad_k", ")", ")", "\n", "return", "ib", ".", "get", "(", ")", "\n", "\n", "", "def", "_finalize", "(", ")", ":", "\n", "            ", "ib", "=", "tvm", ".", "ir_builder", ".", "create", "(", ")", "\n", "\n", "ib", ".", "emit", "(", "tvm", ".", "call_extern", "(", "dtype", ",", "\"store_output\"", ",", "\n", "sc", ".", "access_ptr", "(", "\"rw\"", ")", ",", "\n", "iter_n", ",", "iter_y", ",", "iter_x", ",", "iter_k", ",", "\n", "pad_n", ",", "pad_y", ",", "pad_x", ",", "pad_k", ")", ")", "\n", "return", "ib", ".", "get", "(", ")", "\n", "\n", "", "return", "None", ",", "_reset", "(", ")", ",", "_body", "(", ")", ",", "_finalize", "(", ")", "\n", "\n", "\n", "", "with", "tvm", ".", "build_config", "(", "offset_factor", "=", "1", ")", ":", "\n", "        ", "return", "tvm", ".", "decl_tensor_intrin", "(", "tC", ".", "op", ",", "interface_func", ",", "binds", "=", "{", "tA", ":", "sA", ",", "tB", ":", "sB", ",", "tC", ":", "sC", "}", ",", "name", "=", "\"conv_interface\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_conv.generate_conv_interface": [[143, 192], ["generator_conv.conv_interface", "tvm.expr.EQ", "tvm.expr.EQ", "tvm.expr.EQ", "tvm.expr.EQ", "tvm.expr.EQ", "tvm.expr.EQ", "tvm.expr.EQ"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_conv.conv_interface"], ["", "", "def", "generate_conv_interface", "(", "N", ",", "C", ",", "Y", ",", "X", ",", "K", ",", "R", ",", "S", ",", "fN", ",", "fC", ",", "fY", ",", "fX", ",", "fK", ",", "fR", ",", "fS", ",", "\n", "axisN", ",", "axisC", ",", "axisY", ",", "axisX", ",", "axisK", ",", "axisR", ",", "axisS", ",", "\n", "dN", ",", "dC", ",", "dY", ",", "dX", ",", "dK", ",", "dR", ",", "dS", ",", "sp_kb", ",", "local_kb", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"\n    N, C, Y, X, K, R, S: the dimensions mapped to  n, c, y, x, k, r, s\n    fN, fC, fY, fX, fK, fR, fS: interface size (fN, fC, fY + fR, fX + fS) * (fR, fS, fC, fK)\n    axisN, axisC, axisY, axisX, axisK, axisR, axisS: AST nodes \n    dN, dC, dY, dX, dK, dR, dS: intrinsic size\n    \"\"\"", "\n", "\n", "if", "verbose", ":", "\n", "        ", "assert", "fN", "*", "fX", "*", "fY", "*", "fC", "+", "fK", "*", "fC", "*", "fR", "*", "fS", "<=", "sp_kb", "*", "8192", "/", "bits_map", "[", "dtype", "]", ",", "'data too large for scratchpad'", "\n", "assert", "dN", "*", "dX", "*", "dY", "*", "dC", "+", "dK", "*", "dC", "*", "dR", "*", "dS", "<=", "local_kb", "*", "8192", "/", "bits_map", "[", "dtype", "]", ",", "'data too large for local memory'", "\n", "", "else", ":", "\n", "        ", "assert", "fN", "*", "fX", "*", "fY", "*", "fC", "+", "fK", "*", "fC", "*", "fR", "*", "fS", "<=", "sp_kb", "*", "8192", "/", "bits_map", "[", "dtype", "]", "\n", "assert", "dN", "*", "dX", "*", "dY", "*", "dC", "+", "dK", "*", "dC", "*", "dR", "*", "dS", "<=", "local_kb", "*", "8192", "/", "bits_map", "[", "dtype", "]", "\n", "\n", "\n", "\n", "", "last_n", "=", "N", "%", "fN", "# the last iteration of N", "\n", "cond_n", "=", "tvm", ".", "expr", ".", "EQ", "(", "axisN", ",", "N", "//", "fN", ")", "if", "last_n", "!=", "0", "else", "False", "# n condition statement", "\n", "last_n", "=", "last_n", "if", "last_n", "!=", "0", "else", "fN", "\n", "\n", "last_c", "=", "C", "%", "fC", "\n", "cond_c", "=", "tvm", ".", "expr", ".", "EQ", "(", "axisC", ",", "C", "//", "fC", ")", "if", "last_c", "!=", "0", "else", "False", "\n", "last_c", "=", "last_c", "if", "last_c", "!=", "0", "else", "fC", "\n", "\n", "last_y", "=", "Y", "%", "fY", "\n", "cond_y", "=", "tvm", ".", "expr", ".", "EQ", "(", "axisY", ",", "Y", "//", "fY", ")", "if", "last_y", "!=", "0", "else", "False", "\n", "last_y", "=", "last_y", "if", "last_y", "!=", "0", "else", "fY", "\n", "\n", "last_x", "=", "X", "%", "fX", "\n", "cond_x", "=", "tvm", ".", "expr", ".", "EQ", "(", "axisX", ",", "X", "//", "fX", ")", "if", "last_x", "!=", "0", "else", "False", "\n", "last_x", "=", "last_x", "if", "last_x", "!=", "0", "else", "fX", "\n", "\n", "last_k", "=", "K", "%", "fK", "\n", "cond_k", "=", "tvm", ".", "expr", ".", "EQ", "(", "axisK", ",", "K", "//", "fK", ")", "if", "last_k", "!=", "0", "else", "False", "\n", "last_k", "=", "last_k", "if", "last_k", "!=", "0", "else", "fK", "\n", "\n", "last_r", "=", "R", "%", "fR", "\n", "cond_r", "=", "tvm", ".", "expr", ".", "EQ", "(", "axisR", ",", "R", "//", "fR", ")", "if", "last_r", "!=", "0", "else", "False", "\n", "last_r", "=", "last_r", "if", "last_r", "!=", "0", "else", "fR", "\n", "\n", "last_s", "=", "S", "%", "fS", "\n", "cond_s", "=", "tvm", ".", "expr", ".", "EQ", "(", "axisS", ",", "S", "//", "fS", ")", "if", "last_s", "!=", "0", "else", "False", "\n", "last_s", "=", "last_s", "if", "last_s", "!=", "0", "else", "fS", "\n", "\n", "return", "conv_interface", "(", "fN", ",", "fC", ",", "fY", ",", "fX", ",", "fK", ",", "fR", ",", "fS", ",", "last_n", ",", "last_c", ",", "last_y", ",", "last_x", ",", "last_k", ",", "last_r", ",", "last_s", ",", "\n", "cond_n", ",", "cond_c", ",", "cond_y", ",", "cond_x", ",", "cond_k", ",", "cond_r", ",", "cond_s", ",", "dN", ",", "dC", ",", "dY", ",", "dX", ",", "dK", ",", "dR", ",", "dS", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_gemm.GEMMGenerator.__init__": [[153, 155], ["hw_generator.generator.generator.__init__"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.BenchmarkCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dtype", "=", "\"int8\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"GEMM\"", ",", "gemm_intrinsic", ",", "generate_gemm_interface", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_gemm.GEMMGenerator.instantiate": [[157, 167], ["hw_generator.generator.parse_params", "hw_generator.generator.accelerator", "generator_gemm.GEMMGenerator.intf_func"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator.parse_params"], ["", "def", "instantiate", "(", "self", ",", "params", ",", "tag", ")", ":", "\n", "\n", "        ", "x", ",", "y", ",", "sp_kb", ",", "sp_banks", ",", "dma_width", ",", "dma_bytes", ",", "local_kb", ",", "dataflow", ",", "dtype", "=", "parse_params", "(", "self", ".", "type", ",", "params", ")", "\n", "\n", "def", "acc_interface", "(", "M", ",", "N", ",", "K", ",", "fM", ",", "fN", ",", "fK", ",", "axisM", ",", "axisN", ",", "axisK", ")", ":", "\n", "            ", "return", "self", ".", "intf_func", "(", "M", ",", "N", ",", "K", ",", "fM", ",", "fN", ",", "fK", ",", "axisM", ",", "axisN", ",", "axisK", ",", "x", ",", "y", ",", "1", ",", "sp_kb", ",", "local_kb", ",", "dtype", ")", "\n", "\n", "# 0, 0, 0 placeholder  the i j k dimensions of  mapped GEMMs ", "\n", "", "acc", "=", "accelerator", "(", "self", ",", "acc_interface", ",", "params", ",", "tag", ",", "(", "0", ",", "0", ",", "0", ",", "dtype", ")", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_gemm.gemm_interface": [[8, 111], ["hw_generator.intrinsic_lib.gemm_intrinsic", "tvm.var", "tvm.decl_buffer", "tvm.var", "tvm.decl_buffer", "tvm.var", "tvm.decl_buffer", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.if_then_else", "tvm.build_config", "tvm.decl_tensor_intrin", "tvm.ir_builder.create", "tvm.ir_builder.create.emit", "tvm.ir_builder.create.get", "tvm.ir_builder.create", "tvm.ir_builder.create.emit", "tvm.ir_builder.create.get", "tvm.ir_builder.create", "tvm.ir_builder.create.emit", "tvm.ir_builder.create.get", "_reset"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.intrinsic_lib.gemm_intrinsic", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get", "home.repos.pwc.inspect_result.pku-liang_HASCO.flextensor.scheduler.Result.get"], ["def", "gemm_interface", "(", "f_m", ",", "f_n", ",", "f_k", ",", "l_m", ",", "l_n", ",", "l_k", ",", "c_m", ",", "c_n", ",", "c_k", ",", "d_m", ",", "d_n", ",", "d_k", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"\n    l_m, l_n, l_k: last iteration size\n    c_m, c_n, c_k: last iteration condition\n    \"\"\"", "\n", "\n", "_", ",", "tensors", "=", "gemm_intrinsic", "(", "f_m", ",", "f_n", ",", "f_k", ",", "dtype", ")", "\n", "tA", ",", "tB", ",", "tC", "=", "tensors", "\n", "\n", "strideA", "=", "tvm", ".", "var", "(", "\"strideA\"", ")", "\n", "sA", "=", "tvm", ".", "decl_buffer", "(", "tA", ".", "shape", ",", "tA", ".", "dtype", ",", "\n", "name", "=", "\"sA\"", ",", "\n", "offset_factor", "=", "1", ",", "\n", "strides", "=", "[", "strideA", ",", "1", "]", ")", "\n", "strideB", "=", "tvm", ".", "var", "(", "\"strideB\"", ")", "\n", "sB", "=", "tvm", ".", "decl_buffer", "(", "tB", ".", "shape", ",", "tB", ".", "dtype", ",", "\n", "name", "=", "\"sB\"", ",", "\n", "offset_factor", "=", "1", ",", "\n", "strides", "=", "[", "strideB", ",", "1", "]", ")", "\n", "strideC", "=", "tvm", ".", "var", "(", "\"strideC\"", ")", "\n", "sC", "=", "tvm", ".", "decl_buffer", "(", "tC", ".", "shape", ",", "tC", ".", "dtype", ",", "\n", "name", "=", "\"sC\"", ",", "\n", "offset_factor", "=", "1", ",", "\n", "strides", "=", "[", "strideC", ",", "1", "]", ")", "\n", "\n", "iter_m", "=", "f_m", "//", "d_m", "+", "(", "0", "if", "f_m", "%", "d_m", "==", "0", "else", "1", ")", "\n", "iter_n", "=", "f_n", "//", "d_n", "+", "(", "0", "if", "f_n", "%", "d_n", "==", "0", "else", "1", ")", "\n", "iter_k", "=", "f_k", "//", "d_k", "+", "(", "0", "if", "f_k", "%", "d_k", "==", "0", "else", "1", ")", "\n", "pad_m", "=", "0", "if", "f_m", "%", "d_m", "==", "0", "else", "(", "d_m", "-", "f_m", "%", "d_m", ")", "\n", "pad_n", "=", "0", "if", "f_n", "%", "d_n", "==", "0", "else", "(", "d_n", "-", "f_n", "%", "d_n", ")", "\n", "pad_k", "=", "0", "if", "f_k", "%", "d_k", "==", "0", "else", "(", "d_k", "-", "f_k", "%", "d_k", ")", "\n", "\n", "last_iter_m", "=", "l_m", "//", "d_m", "+", "(", "0", "if", "l_m", "%", "d_m", "==", "0", "else", "1", ")", "\n", "last_iter_n", "=", "l_n", "//", "d_n", "+", "(", "0", "if", "l_n", "%", "d_n", "==", "0", "else", "1", ")", "\n", "last_iter_k", "=", "l_k", "//", "d_k", "+", "(", "0", "if", "l_k", "%", "d_k", "==", "0", "else", "1", ")", "\n", "last_pad_m", "=", "0", "if", "l_m", "%", "d_m", "==", "0", "else", "(", "d_m", "-", "l_m", "%", "d_m", ")", "\n", "last_pad_n", "=", "0", "if", "l_n", "%", "d_n", "==", "0", "else", "(", "d_n", "-", "l_n", "%", "d_n", ")", "\n", "last_pad_k", "=", "0", "if", "l_k", "%", "d_k", "==", "0", "else", "(", "d_k", "-", "l_k", "%", "d_k", ")", "\n", "\n", "iter_m", "=", "tvm", ".", "if_then_else", "(", "c_m", ",", "last_iter_m", ",", "iter_m", ")", "\n", "iter_n", "=", "tvm", ".", "if_then_else", "(", "c_n", ",", "last_iter_n", ",", "iter_n", ")", "\n", "iter_k", "=", "tvm", ".", "if_then_else", "(", "c_k", ",", "last_iter_k", ",", "iter_k", ")", "\n", "pad_m", "=", "tvm", ".", "if_then_else", "(", "c_m", ",", "last_pad_m", ",", "pad_m", ")", "\n", "pad_n", "=", "tvm", ".", "if_then_else", "(", "c_n", ",", "last_pad_n", ",", "pad_n", ")", "\n", "pad_k", "=", "tvm", ".", "if_then_else", "(", "c_k", ",", "last_pad_k", ",", "pad_k", ")", "\n", "\n", "# reset-update-finalize", "\n", "def", "interface_func", "(", "ins", ",", "outs", ")", ":", "\n", "        ", "sa", ",", "sb", "=", "ins", "\n", "sc", ",", "=", "outs", "\n", "\n", "def", "_body", "(", ")", ":", "\n", "            ", "ib", "=", "tvm", ".", "ir_builder", ".", "create", "(", ")", "\n", "# int32_t matmul_kernel(const elem_t *A, const elem_t *B, ", "\n", "#          elem_t *C, const acc_t *D, int32_t I, int32_t J, int32_t K, int32_t pad_I,", "\n", "#          int32_t pad_J, int32_t pad_K, int32_t A_row_len,", "\n", "#          int32_t B_row_len,  int32_t C_row_len, int32_t D_row_len,", "\n", "#          bool no_bias, bool repeating_bias);", "\n", "# D is set to a dummy address 1 to determine whether to overwrite", "\n", "# accumulator contents: on the first run, 1 will be retained and", "\n", "# overwrite the value in the accumulator; on subsequent runs D will be", "\n", "# replaced by NULL and C will accumulate on top of the accumulator's contents", "\n", "# This is controlled via bit 1 << (ADDR_LEN - 2) - see kernel source", "\n", "ib", ".", "emit", "(", "tvm", ".", "call_extern", "(", "dtype", ",", "\"tensorized_GEMM\"", ",", "\n", "sa", ".", "access_ptr", "(", "\"r\"", ")", ",", "\n", "sb", ".", "access_ptr", "(", "\"r\"", ")", ",", "\n", "sc", ".", "access_ptr", "(", "\"rw\"", ")", ",", "\n", "1", ",", "\n", "iter_m", ",", "iter_n", ",", "iter_k", ",", "\n", "pad_m", ",", "pad_n", ",", "pad_k", ",", "\n", "strideA", ",", "strideB", ",", "strideC", ",", "0", ",", "\n", "True", ",", "False", ")", ")", "\n", "return", "ib", ".", "get", "(", ")", "\n", "\n", "", "def", "_reset", "(", ")", ":", "\n", "            ", "ib", "=", "tvm", ".", "ir_builder", ".", "create", "(", ")", "\n", "# int32_t matmul_reset(elem_t *C, int32_t I, int32_t J, int32_t pad_I,", "\n", "#         int32_t pad_J, int32_t C_row_len);", "\n", "ib", ".", "emit", "(", "tvm", ".", "call_extern", "(", "dtype", ",", "\"init_output\"", ",", "\n", "sc", ".", "access_ptr", "(", "\"w\"", ")", ",", "\n", "iter_m", ",", "iter_n", ",", "\n", "pad_m", ",", "pad_n", ",", "\n", "strideC", ")", ")", "\n", "return", "ib", ".", "get", "(", ")", "\n", "\n", "", "def", "_finalize", "(", ")", ":", "\n", "            ", "ib", "=", "tvm", ".", "ir_builder", ".", "create", "(", ")", "\n", "# Move out C from accumulator", "\n", "# int32_t matmul_finalize(elem_t *C, int32_t I, int32_t J, int32_t pad_I,", "\n", "#         int32_t pad_J, int32_t C_row_len);", "\n", "ib", ".", "emit", "(", "tvm", ".", "call_extern", "(", "dtype", ",", "\"store_output\"", ",", "\n", "sc", ".", "access_ptr", "(", "\"rw\"", ")", ",", "\n", "iter_m", ",", "iter_n", ",", "\n", "pad_m", ",", "pad_n", ",", "\n", "strideC", ")", ")", "\n", "return", "ib", ".", "get", "(", ")", "\n", "\n", "# standalone (without reduce axis split), reset, update", "\n", "", "return", "None", ",", "_reset", "(", ")", ",", "_body", "(", ")", ",", "_finalize", "(", ")", "\n", "\n", "\n", "", "with", "tvm", ".", "build_config", "(", "offset_factor", "=", "1", ")", ":", "\n", "        ", "return", "tvm", ".", "decl_tensor_intrin", "(", "tC", ".", "op", ",", "interface_func", ",", "binds", "=", "{", "tA", ":", "sA", ",", "tB", ":", "sB", ",", "tC", ":", "sC", "}", ",", "name", "=", "\"gemm_interface\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_gemm.generate_gemm_interface": [[115, 146], ["generator_gemm.gemm_interface", "tvm.expr.EQ", "tvm.expr.EQ", "tvm.expr.EQ"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.hw_generator.generator_gemm.gemm_interface"], ["", "", "def", "generate_gemm_interface", "(", "M", ",", "N", ",", "K", ",", "fM", ",", "fN", ",", "fK", ",", "axisM", ",", "axisN", ",", "axisK", ",", "dM", ",", "dN", ",", "dK", ",", "sp_kb", ",", "local_kb", ",", "dtype", ")", ":", "\n", "\n", "    ", "\"\"\"\n    M, N, K: the dimensions mapped to i, j, k\n    fM, fN, fK: interface size (fM, fK) * (fK, fN)\n    axisM, axisN, axisK: AST nodes \n    dM, dN, dK: intrinsic size\n    \"\"\"", "\n", "\n", "if", "verbose", ":", "\n", "        ", "assert", "(", "fM", "*", "fK", "+", "fK", "*", "fN", "+", "fM", "*", "fK", ")", "<=", "sp_kb", "*", "8192", "/", "bits_map", "[", "dtype", "]", ",", "'data too large for scratchpad'", "\n", "assert", "(", "dM", "*", "dK", "+", "dK", "*", "dN", "+", "dM", "*", "dK", ")", "<=", "local_kb", "*", "8192", "/", "bits_map", "[", "dtype", "]", ",", "'data too large for local memory'", "\n", "", "else", ":", "\n", "        ", "assert", "(", "fM", "*", "fK", "+", "fK", "*", "fN", "+", "fM", "*", "fK", ")", "<=", "sp_kb", "*", "8192", "/", "bits_map", "[", "dtype", "]", "\n", "assert", "(", "dM", "*", "dK", "+", "dK", "*", "dN", "+", "dM", "*", "dK", ")", "<=", "local_kb", "*", "8192", "/", "bits_map", "[", "dtype", "]", "\n", "\n", "\n", "", "last_m", "=", "M", "%", "fM", "\n", "cond_m", "=", "tvm", ".", "expr", ".", "EQ", "(", "axisM", ",", "M", "//", "fM", ")", "if", "last_m", "!=", "0", "else", "False", "# m condition statement", "\n", "last_m", "=", "last_m", "if", "last_m", "!=", "0", "else", "fM", "\n", "\n", "last_n", "=", "N", "%", "fN", "# the last iteration of N", "\n", "cond_n", "=", "tvm", ".", "expr", ".", "EQ", "(", "axisN", ",", "N", "//", "fN", ")", "if", "last_n", "!=", "0", "else", "False", "# n condition statement", "\n", "last_n", "=", "last_n", "if", "last_n", "!=", "0", "else", "fN", "\n", "\n", "last_k", "=", "K", "%", "fK", "\n", "cond_k", "=", "tvm", ".", "expr", ".", "EQ", "(", "axisK", ",", "K", "//", "fK", ")", "if", "last_k", "!=", "0", "else", "False", "# k condition statement", "\n", "last_k", "=", "last_k", "if", "last_k", "!=", "0", "else", "fK", "\n", "\n", "return", "gemm_interface", "(", "fM", ",", "fN", ",", "fK", ",", "last_m", ",", "\n", "last_n", ",", "last_k", ",", "cond_m", ",", "cond_n", ",", "cond_k", ",", "dM", ",", "dN", ",", "dK", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.keras_extend.get_model": [[6, 13], ["print", "NotImplementedError", "getattr"], "function", ["None"], ["def", "get_model", "(", "model_name", ",", "input_shape", ")", ":", "\n", "    ", "if", "model_name", "not", "in", "supported_models", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'unsupported model'", ")", "\n", "", "keras_model", "=", "getattr", "(", "keras_models", ",", "model_name", ")", "(", "weights", "=", "None", ",", "include_top", "=", "True", ",", "input_shape", "=", "input_shape", ")", "\n", "print", "(", "'Get the keras model: '", "+", "model_name", ")", "\n", "\n", "return", "keras_model", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.keras_extend.get_workloads": [[15, 80], ["set", "print", "layer.get_config", "len", "benchmark.benchmark.Workload", "workloads.append", "set.add", "benchmark.benchmark.Workload", "workloads.append", "set.add", "benchmark.benchmark.Workload", "workloads.append", "set.add", "int", "benchmark.benchmark.Workload", "benchmark.benchmark.Workload", "workloads.append", "workloads.append", "set.add", "set.add"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.Benchmark.add", "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.Benchmark.add", "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.Benchmark.add", "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.Benchmark.add", "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.Benchmark.add"], ["", "def", "get_workloads", "(", "model", ",", "dtype", ",", "layout", ")", ":", "\n", "    ", "workloads", "=", "[", "]", "\n", "UNIQUE_WORKLOADS", "=", "set", "(", ")", "\n", "\n", "for", "layer", "in", "model", ".", "layers", ":", "\n", "        ", "config", "=", "layer", ".", "get_config", "(", ")", "\n", "ltype", "=", "layer", ".", "__class__", ".", "__name__", "\n", "\n", "is_conv2d", "=", "ltype", "==", "'Conv2D'", "\n", "is_dwconv2d", "=", "ltype", "==", "'DepthwiseConv2D'", "\n", "is_sepconv2d", "=", "ltype", "==", "'SeparableConv2D'", "\n", "is_gemm", "=", "ltype", "==", "'Dense'", "\n", "\n", "if", "(", "is_conv2d", "or", "is_dwconv2d", "or", "is_sepconv2d", ")", ":", "\n", "\n", "            ", "c", "=", "layer", ".", "input_shape", "[", "3", "]", "\n", "y", "=", "layer", ".", "input_shape", "[", "1", "]", "\n", "x", "=", "layer", ".", "input_shape", "[", "2", "]", "\n", "k", "=", "layer", ".", "output_shape", "[", "3", "]", "\n", "r", "=", "layer", ".", "kernel_size", "[", "0", "]", "\n", "s", "=", "layer", ".", "kernel_size", "[", "1", "]", "\n", "stride", "=", "config", "[", "\"strides\"", "]", "[", "0", "]", "\n", "\n", "if", "is_conv2d", ":", "\n", "                ", "args", "=", "(", "1", ",", "c", ",", "y", ",", "x", ",", "k", ",", "r", ",", "s", ",", "stride", ",", "dtype", ",", "layout", ")", "\n", "conv", "=", "Workload", "(", "config", "[", "\"name\"", "]", ",", "\"CONV\"", ",", "conv2d_compute", ",", "args", ")", "\n", "workloads", ".", "append", "(", "conv", ")", "\n", "UNIQUE_WORKLOADS", ".", "add", "(", "conv", ".", "tag", ")", "\n", "\n", "", "elif", "is_dwconv2d", ":", "\n", "                ", "args", "=", "(", "1", ",", "c", ",", "y", ",", "x", ",", "k", "//", "c", ",", "r", ",", "s", ",", "stride", ",", "dtype", ",", "layout", ")", "\n", "dwconv", "=", "Workload", "(", "config", "[", "\"name\"", "]", ",", "\"DWCONV\"", ",", "dwconv_compute", ",", "args", ")", "\n", "workloads", ".", "append", "(", "dwconv", ")", "\n", "UNIQUE_WORKLOADS", ".", "add", "(", "dwconv", ".", "tag", ")", "\n", "\n", "\n", "", "elif", "is_sepconv2d", ":", "\n", "                ", "yo", "=", "layer", ".", "output_shape", "[", "1", "]", "\n", "xo", "=", "layer", ".", "output_shape", "[", "2", "]", "\n", "ko", "=", "int", "(", "config", "[", "\"depth_multiplier\"", "]", ")", "\n", "dwargs", "=", "(", "1", ",", "c", ",", "y", ",", "x", ",", "ko", ",", "r", ",", "s", ",", "stride", ",", "dtype", ",", "layout", ")", "\n", "dwconv", "=", "Workload", "(", "config", "[", "\"name\"", "]", "+", "\"_dw\"", ",", "\"DWCONV\"", ",", "dwconv_compute", ",", "dwargs", ")", "\n", "pwargs", "=", "(", "1", ",", "c", "*", "ko", ",", "yo", ",", "xo", ",", "k", ",", "1", ",", "1", ",", "1", ",", "dtype", ",", "layout", ")", "\n", "pwconv", "=", "Workload", "(", "config", "[", "\"name\"", "]", "+", "\"_pw\"", ",", "\"CONV\"", ",", "conv2d_compute", ",", "pwargs", ")", "\n", "workloads", ".", "append", "(", "dwconv", ")", "\n", "workloads", ".", "append", "(", "pwconv", ")", "\n", "UNIQUE_WORKLOADS", ".", "add", "(", "dwconv", ".", "tag", ")", "\n", "UNIQUE_WORKLOADS", ".", "add", "(", "pwconv", ".", "tag", ")", "\n", "\n", "", "", "elif", "is_gemm", ":", "\n", "\n", "            ", "m", "=", "1", "\n", "n", "=", "layer", ".", "output_shape", "[", "1", "]", "\n", "k", "=", "layer", ".", "input_shape", "[", "1", "]", "\n", "args", "=", "(", "m", ",", "n", ",", "k", ",", "dtype", ",", "layout", ")", "\n", "gemm", "=", "Workload", "(", "config", "[", "\"name\"", "]", ",", "\"GEMM\"", ",", "mm_compute", ",", "args", ")", "\n", "workloads", ".", "append", "(", "gemm", ")", "\n", "UNIQUE_WORKLOADS", ".", "add", "(", "gemm", ".", "tag", ")", "\n", "\n", "", "else", ":", "# unsupported layers", "\n", "            ", "continue", "\n", "\n", "", "", "print", "(", "\"Unique workloads: \"", ",", "len", "(", "UNIQUE_WORKLOADS", ")", ")", "\n", "\n", "return", "workloads", "", "", ""]], "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.Workload.__init__": [[8, 17], ["str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "tp", ",", "compute", ",", "args", ",", "stage", "=", "0", ")", ":", "# stage is specific to mttkrp", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "type", "=", "tp", "\n", "self", ".", "compute", "=", "compute", "\n", "self", ".", "args", "=", "args", "\n", "arg_str", "=", "[", "str", "(", "i", ")", "for", "i", "in", "args", "]", "\n", "tag", "=", "'_'", ".", "join", "(", "arg_str", ")", "\n", "self", ".", "tag", "=", "name", "+", "\"_\"", "+", "tag", "\n", "self", ".", "stage", "=", "stage", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.Benchmark.__init__": [[22, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "workloads", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "if", "workloads", "==", "None", ":", "\n", "            ", "workloads", "=", "[", "]", "\n", "", "self", ".", "workloads", "=", "workloads", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.Benchmark.add": [[28, 30], ["benchmark.Benchmark.workloads.append"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "workload", ")", ":", "\n", "        ", "self", ".", "workloads", ".", "append", "(", "workload", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.BenchmarkCNN.__init__": [[35, 51], ["tuple", "get_model", "get_workloads", "benchmark.Benchmark.__init__", "benchmark.Benchmark.__init__", "utils.logger.logger.error", "int", "str.split"], "methods", ["home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.keras_extend.get_model", "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.keras_extend.get_workloads", "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.BenchmarkCNN.__init__", "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.benchmark.BenchmarkCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cnn", ",", "dtype", ",", "layout", "=", "\"GEMM\"", ")", ":", "\n", "\n", "        ", "if", "cnn", "in", "supported_models", ":", "\n", "            ", "from", "benchmark", ".", "keras_extend", "import", "get_model", ",", "get_workloads", "\n", "\n", "input_size", "=", "\"3,224,224\"", "# inpute image size to be customized", "\n", "INPUT_SIZE", "=", "tuple", "(", "(", "int", "(", "d", ")", "for", "d", "in", "str", ".", "split", "(", "input_size", ",", "\",\"", ")", ")", ")", "\n", "cnn_model", "=", "get_model", "(", "cnn", ",", "INPUT_SIZE", "[", ":", ":", "-", "1", "]", ")", "\n", "\n", "workloads", "=", "get_workloads", "(", "cnn_model", ",", "dtype", ",", "layout", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "cnn", ",", "workloads", ")", "\n", "\n", "", "else", ":", "\n", "            ", "super", "(", ")", ".", "__init__", "(", "cnn", ")", "\n", "logger", ".", "error", "(", "\"Unimplemented benchmark!\"", ",", "exc_info", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.computations.conv2d_compute": [[8, 75], ["math.floor", "math.floor", "tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.reduce_axis", "tvm.reduce_axis", "tvm.compute", "tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.reduce_axis", "tvm.reduce_axis", "tvm.compute", "tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.reduce_axis", "tvm.reduce_axis", "tvm.compute", "tvm.sum", "tvm.sum", "tvm.sum"], "function", ["None"], ["def", "conv2d_compute", "(", "N", ",", "C", ",", "Y", ",", "X", ",", "K", ",", "R", ",", "S", ",", "stride", "=", "1", ",", "dtype", "=", "\"int8\"", ",", "layout", "=", "\"GEMM\"", ",", "padding", "=", "False", ")", ":", "# padding == SAME", "\n", "    ", "y_padding", "=", "(", "R", "-", "1", ")", "/", "2", "if", "padding", "else", "0", "\n", "x_padding", "=", "(", "S", "-", "1", ")", "/", "2", "if", "padding", "else", "0", "\n", "Yo", "=", "math", ".", "floor", "(", "(", "Y", "+", "2", "*", "y_padding", "-", "R", ")", "/", "stride", ")", "+", "1", "\n", "Xo", "=", "math", ".", "floor", "(", "(", "X", "+", "2", "*", "x_padding", "-", "S", ")", "/", "stride", ")", "+", "1", "\n", "# Y = Yo * stride", "\n", "# X = Xo * stride", "\n", "'''\n    should be simple as:\n        Input = tvm.placeholder((N, Y, X, C), name=\"A\", dtype=dtype)\n        Filter = tvm.placeholder((R, S, C, K), name=\"B\", dtype=dtype)\n        r = tvm.reduce_axis((0, R), name=\"r\")\n        s = tvm.reduce_axis((0, S), name=\"s\")\n        c = tvm.reduce_axis((0, C), name=\"c\")\n        Output = tvm.compute(\n            (N, Yo, Xo, K),\n            lambda n, y, x, k: tvm.sum(\n                Input[n, stride * y + r, stride * x + s, c] * Filter[r, s, c, k],\n                axis=[r, s, c]\n            ), name=\"C\")\n    but we use some tricks (stride and layout) for matching purpose. This can be improved. \n    '''", "\n", "# R = R if R > 1 else CONST  # for matching purpose", "\n", "# S = S if S > 1 else CONST", "\n", "# C = C if C > 1 else CONST", "\n", "\n", "if", "layout", "in", "[", "\"GEMM\"", ",", "\"CONV\"", "]", ":", "\n", "        ", "Input", "=", "tvm", ".", "placeholder", "(", "(", "N", ",", "Y", ",", "X", ",", "C", ")", ",", "name", "=", "\"A\"", ",", "dtype", "=", "dtype", ")", "\n", "Filter", "=", "tvm", ".", "placeholder", "(", "(", "R", ",", "S", ",", "C", ",", "K", ")", ",", "name", "=", "\"B\"", ",", "dtype", "=", "dtype", ")", "\n", "\n", "r", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "R", ")", ",", "name", "=", "\"r\"", ")", "\n", "s", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "S", ")", ",", "name", "=", "\"s\"", ")", "\n", "c", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "C", ")", ",", "name", "=", "\"c\"", ")", "\n", "\n", "Output", "=", "tvm", ".", "compute", "(", "\n", "(", "N", ",", "Yo", ",", "Xo", ",", "K", ")", ",", "\n", "lambda", "n", ",", "y", ",", "x", ",", "k", ":", "tvm", ".", "sum", "(", "\n", "Input", "[", "n", ",", "y", "+", "r", ",", "x", "+", "s", ",", "c", "]", "*", "Filter", "[", "r", ",", "s", ",", "c", ",", "k", "]", ",", "\n", "axis", "=", "[", "r", ",", "s", ",", "c", "]", "\n", ")", ",", "name", "=", "\"C\"", ")", "\n", "", "elif", "layout", "==", "\"GEMV\"", ":", "\n", "        ", "Input", "=", "tvm", ".", "placeholder", "(", "(", "N", ",", "Y", ",", "X", ",", "C", ")", ",", "name", "=", "\"A\"", ",", "dtype", "=", "dtype", ")", "\n", "Filter", "=", "tvm", ".", "placeholder", "(", "(", "R", ",", "S", ",", "K", ",", "C", ")", ",", "name", "=", "\"B\"", ",", "dtype", "=", "dtype", ")", "\n", "r", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "R", ")", ",", "name", "=", "\"r\"", ")", "\n", "s", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "S", ")", ",", "name", "=", "\"s\"", ")", "\n", "c", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "C", ")", ",", "name", "=", "\"c\"", ")", "\n", "Output", "=", "tvm", ".", "compute", "(", "\n", "(", "N", ",", "Yo", ",", "Xo", ",", "K", ")", ",", "\n", "lambda", "n", ",", "y", ",", "x", ",", "k", ":", "tvm", ".", "sum", "(", "\n", "Input", "[", "n", ",", "y", "+", "r", ",", "x", "+", "s", ",", "c", "]", "*", "Filter", "[", "r", ",", "s", ",", "k", ",", "c", "]", ",", "\n", "axis", "=", "[", "r", ",", "s", ",", "c", "]", "\n", ")", ",", "name", "=", "\"C\"", ")", "\n", "", "else", ":", "\n", "        ", "Input", "=", "tvm", ".", "placeholder", "(", "(", "N", ",", "Y", ",", "X", ",", "CONST", ",", "C", ")", ",", "name", "=", "\"A\"", ",", "dtype", "=", "dtype", ")", "\n", "Filter", "=", "tvm", ".", "placeholder", "(", "(", "R", ",", "S", ",", "K", ",", "CONST", ",", "C", ")", ",", "name", "=", "\"B\"", ",", "dtype", "=", "dtype", ")", "\n", "r", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "R", ")", ",", "name", "=", "\"r\"", ")", "\n", "s", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "S", ")", ",", "name", "=", "\"s\"", ")", "\n", "c", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "C", ")", ",", "name", "=", "\"c\"", ")", "\n", "Output", "=", "tvm", ".", "compute", "(", "\n", "(", "N", ",", "Yo", ",", "Xo", ",", "CONST", ",", "K", ")", ",", "\n", "lambda", "n", ",", "y", ",", "x", ",", "e", ",", "k", ":", "tvm", ".", "sum", "(", "\n", "Input", "[", "n", ",", "y", "+", "r", ",", "x", "+", "s", ",", "e", ",", "c", "]", "*", "Filter", "[", "r", ",", "s", ",", "k", ",", "e", ",", "c", "]", ",", "\n", "axis", "=", "[", "r", ",", "s", ",", "c", "]", "\n", ")", ",", "name", "=", "\"C\"", ")", "\n", "\n", "\n", "", "return", "[", "Output", ".", "op", "]", ",", "[", "Input", ",", "Filter", ",", "Output", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.computations.dwconv_compute": [[78, 113], ["tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.reduce_axis", "tvm.reduce_axis", "tvm.compute", "math.floor", "math.floor", "tvm.sum"], "function", ["None"], ["", "def", "dwconv_compute", "(", "N", ",", "C", ",", "Y", ",", "X", ",", "K", ",", "R", ",", "S", ",", "stride", "=", "1", ",", "dtype", "=", "\"int8\"", ",", "layout", "=", "\"GEMM\"", ",", "padding", "=", "False", ")", ":", "\n", "    ", "y_padding", "=", "(", "R", "-", "1", ")", "/", "2", "if", "padding", "else", "0", "\n", "x_padding", "=", "(", "S", "-", "1", ")", "/", "2", "if", "padding", "else", "0", "\n", "Yo", "=", "math", ".", "floor", "(", "(", "Y", "+", "2", "*", "y_padding", "-", "R", ")", "/", "stride", ")", "+", "1", "\n", "Xo", "=", "math", ".", "floor", "(", "(", "X", "+", "2", "*", "x_padding", "-", "S", ")", "/", "stride", ")", "+", "1", "\n", "Ko", "=", "C", "*", "K", "\n", "'''\n    should be simple as:\n        Input = tvm.placeholder((N, Y, X, C), name=\"A\", dtype=dtype)\n        Filter = tvm.placeholder((R, S, K, C), name=\"B\", dtype=dtype)\n        r = tvm.reduce_axis((0, R), name=\"r\")\n        s = tvm.reduce_axis((0, S), name=\"s\")\n        Output = tvm.compute(\n            (N, Yo, Xo, Ko),\n            lambda n, y, x, k: tvm.sum(\n                Input[n, stride * y + r, stride * x + s, c] * Filter[r, s, k / C, k % C],\n                axis=[r, s]\n            ), name=\"C\")\n    \n    We use some tricks (stride and layout) to match the conv intrinsic. \n    In practice, our CONV accelerator supports dwconv intrinsic.\n    We can address the matching problem by adding a dwconv intrinsic to the accelerator. \n    '''", "\n", "Input", "=", "tvm", ".", "placeholder", "(", "(", "N", ",", "Y", ",", "X", ",", "C", ")", ",", "name", "=", "\"A\"", ",", "dtype", "=", "dtype", ")", "\n", "Filter", "=", "tvm", ".", "placeholder", "(", "(", "R", ",", "S", ",", "K", ",", "C", ")", ",", "name", "=", "\"B\"", ",", "dtype", "=", "dtype", ")", "\n", "r", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "R", ")", ",", "name", "=", "\"r\"", ")", "\n", "s", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "S", ")", ",", "name", "=", "\"s\"", ")", "\n", "c", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "C", ")", ",", "name", "=", "\"c\"", ")", "\n", "Output", "=", "tvm", ".", "compute", "(", "\n", "(", "N", ",", "Yo", ",", "Xo", ",", "Ko", ")", ",", "\n", "lambda", "n", ",", "y", ",", "x", ",", "k", ":", "tvm", ".", "sum", "(", "\n", "Input", "[", "n", ",", "y", "+", "r", ",", "x", "+", "s", ",", "c", "]", "*", "Filter", "[", "r", ",", "s", ",", "c", ",", "k", "]", ",", "\n", "axis", "=", "[", "r", ",", "s", ",", "c", "]", "\n", ")", ",", "name", "=", "\"C\"", ")", "\n", "return", "[", "Output", ".", "op", "]", ",", "[", "Input", ",", "Filter", ",", "Output", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.computations.mm_compute": [[117, 159], ["tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.compute", "tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.compute", "tvm.sum", "tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.reduce_axis", "tvm.reduce_axis", "tvm.compute", "tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.compute", "tvm.sum", "tvm.sum", "tvm.sum"], "function", ["None"], ["", "def", "mm_compute", "(", "M", ",", "N", ",", "K", ",", "dtype", "=", "\"int8\"", ",", "layout", "=", "\"GEMM\"", ")", ":", "\n", "\n", "    ", "if", "layout", "==", "\"GEMM\"", ":", "\n", "        ", "A", "=", "tvm", ".", "placeholder", "(", "(", "M", ",", "K", ")", ",", "name", "=", "'A'", ",", "dtype", "=", "dtype", ")", "\n", "B", "=", "tvm", ".", "placeholder", "(", "(", "K", ",", "N", ")", ",", "name", "=", "'B'", ",", "dtype", "=", "dtype", ")", "\n", "kk", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "K", ")", ",", "'c'", ")", "\n", "C", "=", "tvm", ".", "compute", "(", "\n", "(", "M", ",", "N", ")", ",", "\n", "lambda", "k", ",", "y", ":", "tvm", ".", "sum", "(", "A", "[", "k", ",", "kk", "]", "*", "B", "[", "kk", ",", "y", "]", ",", "axis", "=", "kk", ")", ",", "\n", "name", "=", "'C'", ")", "\n", "\n", "", "elif", "layout", "==", "\"GEMV\"", ":", "\n", "        ", "A", "=", "tvm", ".", "placeholder", "(", "(", "M", ",", "K", ")", ",", "name", "=", "'A'", ",", "dtype", "=", "dtype", ")", "\n", "B", "=", "tvm", ".", "placeholder", "(", "(", "N", ",", "K", ")", ",", "name", "=", "'B'", ",", "dtype", "=", "dtype", ")", "\n", "kk", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "K", ")", ",", "'c'", ")", "\n", "C", "=", "tvm", ".", "compute", "(", "\n", "(", "M", ",", "N", ")", ",", "\n", "lambda", "k", ",", "y", ":", "tvm", ".", "sum", "(", "A", "[", "k", ",", "kk", "]", "*", "B", "[", "y", ",", "kk", "]", ",", "axis", "=", "kk", ")", ",", "\n", "name", "=", "'C'", ")", "\n", "\n", "", "elif", "layout", "==", "\"CONV\"", ":", "\n", "        ", "A", "=", "tvm", ".", "placeholder", "(", "(", "CONST", ",", "N", ",", "CONST", ",", "K", ")", ",", "name", "=", "'A'", ",", "dtype", "=", "dtype", ")", "\n", "B", "=", "tvm", ".", "placeholder", "(", "(", "CONST", ",", "CONST", ",", "K", ",", "M", ")", ",", "name", "=", "'B'", ",", "dtype", "=", "dtype", ")", "\n", "kk", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "K", ")", ",", "'c'", ")", "\n", "r", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "CONST", ")", ",", "'r'", ")", "\n", "s", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "CONST", ")", ",", "'s'", ")", "\n", "C", "=", "tvm", ".", "compute", "(", "\n", "(", "CONST", ",", "N", ",", "CONST", ",", "M", ")", ",", "\n", "lambda", "n", ",", "y", ",", "x", ",", "k", ":", "tvm", ".", "sum", "(", "A", "[", "n", ",", "y", "+", "r", ",", "x", "+", "s", ",", "kk", "]", "*", "B", "[", "r", ",", "s", ",", "kk", ",", "k", "]", ",", "axis", "=", "[", "r", ",", "s", ",", "kk", "]", ")", ",", "\n", "name", "=", "'C'", ")", "\n", "\n", "", "else", ":", "\n", "        ", "A", "=", "tvm", ".", "placeholder", "(", "(", "M", ",", "CONST", ",", "K", ")", ",", "name", "=", "'A'", ",", "dtype", "=", "dtype", ")", "\n", "B", "=", "tvm", ".", "placeholder", "(", "(", "N", ",", "CONST", ",", "K", ")", ",", "name", "=", "'B'", ",", "dtype", "=", "dtype", ")", "\n", "kk", "=", "tvm", ".", "reduce_axis", "(", "(", "0", ",", "K", ")", ",", "'c'", ")", "\n", "C", "=", "tvm", ".", "compute", "(", "\n", "(", "M", ",", "CONST", ",", "N", ")", ",", "\n", "lambda", "k", ",", "x", ",", "y", ":", "tvm", ".", "sum", "(", "A", "[", "k", ",", "x", ",", "kk", "]", "*", "B", "[", "y", ",", "x", ",", "kk", "]", ",", "axis", "=", "kk", ")", ",", "\n", "name", "=", "'C'", ")", "\n", "\n", "\n", "", "return", "[", "C", ".", "op", "]", ",", "[", "A", ",", "B", ",", "C", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.computations.gemv_compute": [[163, 188], ["tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.compute", "tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.compute", "print", "tvm.sum", "tvm.sum"], "function", ["None"], ["", "def", "gemv_compute", "(", "M", ",", "N", ",", "L", ",", "dtype", "=", "\"int8\"", ",", "layout", "=", "\"GEMV\"", ")", ":", "\n", "\n", "    ", "if", "layout", "==", "\"GEMV\"", ":", "\n", "        ", "C", "=", "tvm", ".", "placeholder", "(", "[", "N", ",", "M", ",", "L", "]", ",", "name", "=", "\"C\"", ",", "dtype", "=", "dtype", ")", "\n", "D", "=", "tvm", ".", "placeholder", "(", "[", "N", ",", "L", "]", ",", "name", "=", "\"D\"", ",", "dtype", "=", "dtype", ")", "\n", "\n", "l", "=", "tvm", ".", "reduce_axis", "(", "[", "0", ",", "L", "]", ",", "name", "=", "\"c\"", ")", "\n", "E", "=", "tvm", ".", "compute", "(", "[", "M", ",", "N", "]", ",", "\n", "lambda", "k", ",", "y", ":", "tvm", ".", "sum", "(", "C", "[", "y", ",", "k", ",", "l", "]", "*", "D", "[", "y", ",", "l", "]", ",", "axis", "=", "[", "l", "]", ")", ",", "\n", "name", "=", "\"E\"", ")", "\n", "return", "[", "E", ".", "op", "]", ",", "[", "C", ",", "D", ",", "E", "]", "\n", "\n", "", "elif", "layout", "==", "\"DOT\"", ":", "\n", "        ", "C", "=", "tvm", ".", "placeholder", "(", "[", "M", ",", "N", ",", "L", "]", ",", "name", "=", "\"C\"", ",", "dtype", "=", "dtype", ")", "\n", "D", "=", "tvm", ".", "placeholder", "(", "[", "N", ",", "L", "]", ",", "name", "=", "\"D\"", ",", "dtype", "=", "dtype", ")", "\n", "\n", "l", "=", "tvm", ".", "reduce_axis", "(", "[", "0", ",", "L", "]", ",", "name", "=", "\"c\"", ")", "\n", "E", "=", "tvm", ".", "compute", "(", "[", "M", ",", "N", "]", ",", "\n", "lambda", "k", ",", "y", ":", "tvm", ".", "sum", "(", "C", "[", "k", ",", "y", ",", "l", "]", "*", "D", "[", "y", ",", "l", "]", ",", "axis", "=", "[", "l", "]", ")", ",", "\n", "name", "=", "\"E\"", ")", "\n", "\n", "return", "[", "E", ".", "op", "]", ",", "[", "C", ",", "D", ",", "E", "]", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Unsupported layout yet...\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.computations.ttm_compute": [[192, 219], ["tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.compute", "tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.compute", "tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.reduce_axis", "tvm.compute", "tvm.sum", "tvm.sum", "tvm.sum"], "function", ["None"], ["", "", "def", "ttm_compute", "(", "M", ",", "N", ",", "K", ",", "L", ",", "dtype", "=", "\"int8\"", ",", "layout", "=", "\"GEMM\"", ")", ":", "\n", "    ", "if", "layout", "==", "\"GEMM\"", ":", "\n", "        ", "A", "=", "tvm", ".", "placeholder", "(", "[", "M", ",", "N", ",", "L", "]", ",", "name", "=", "\"A\"", ",", "dtype", "=", "dtype", ")", "\n", "B", "=", "tvm", ".", "placeholder", "(", "[", "L", ",", "K", "]", ",", "name", "=", "\"B\"", ",", "dtype", "=", "dtype", ")", "\n", "l", "=", "tvm", ".", "reduce_axis", "(", "[", "0", ",", "L", "]", ",", "name", "=", "\"c\"", ")", "\n", "C", "=", "tvm", ".", "compute", "(", "[", "M", ",", "N", ",", "K", "]", ",", "\n", "lambda", "y", ",", "x", ",", "k", ":", "tvm", ".", "sum", "(", "A", "[", "y", ",", "x", ",", "l", "]", "*", "B", "[", "l", ",", "k", "]", ",", "axis", "=", "[", "l", "]", ")", ",", "\n", "name", "=", "\"C\"", ")", "\n", "\n", "", "elif", "layout", "==", "\"GEMV\"", ":", "\n", "        ", "A", "=", "tvm", ".", "placeholder", "(", "[", "M", ",", "N", ",", "L", "]", ",", "name", "=", "\"A\"", ",", "dtype", "=", "dtype", ")", "\n", "B", "=", "tvm", ".", "placeholder", "(", "[", "K", ",", "L", "]", ",", "name", "=", "\"B\"", ",", "dtype", "=", "dtype", ")", "\n", "l", "=", "tvm", ".", "reduce_axis", "(", "[", "0", ",", "L", "]", ",", "name", "=", "\"c\"", ")", "\n", "C", "=", "tvm", ".", "compute", "(", "[", "M", ",", "N", ",", "K", "]", ",", "\n", "lambda", "y", ",", "x", ",", "k", ":", "tvm", ".", "sum", "(", "A", "[", "y", ",", "x", ",", "l", "]", "*", "B", "[", "k", ",", "l", "]", ",", "axis", "=", "[", "l", "]", ")", ",", "\n", "name", "=", "\"C\"", ")", "\n", "\n", "", "else", ":", "\n", "        ", "A", "=", "tvm", ".", "placeholder", "(", "[", "M", ",", "N", ",", "CONST", ",", "L", "]", ",", "name", "=", "\"A\"", ",", "dtype", "=", "dtype", ")", "\n", "B", "=", "tvm", ".", "placeholder", "(", "[", "K", ",", "CONST", ",", "L", "]", ",", "name", "=", "\"B\"", ",", "dtype", "=", "dtype", ")", "\n", "l", "=", "tvm", ".", "reduce_axis", "(", "[", "0", ",", "L", "]", ",", "name", "=", "\"c\"", ")", "\n", "e", "=", "tvm", ".", "reduce_axis", "(", "[", "0", ",", "CONST", "]", ",", "name", "=", "\"e\"", ")", "\n", "C", "=", "tvm", ".", "compute", "(", "[", "M", ",", "N", ",", "CONST", ",", "K", "]", ",", "\n", "lambda", "y", ",", "x", ",", "e", ",", "k", ":", "tvm", ".", "sum", "(", "A", "[", "y", ",", "x", ",", "e", ",", "l", "]", "*", "B", "[", "k", ",", "e", ",", "l", "]", ",", "axis", "=", "[", "l", "]", ")", ",", "\n", "name", "=", "\"C\"", ")", "\n", "\n", "", "return", "[", "C", ".", "op", "]", ",", "[", "A", ",", "B", ",", "C", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.computations.mttkrp_compute": [[223, 243], ["tvm.placeholder", "tvm.placeholder", "tvm.placeholder", "tvm.reduce_axis", "tvm.reduce_axis", "tvm.compute", "computations.ttm_compute", "computations.gemv_compute", "tvm.sum"], "function", ["home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.computations.ttm_compute", "home.repos.pwc.inspect_result.pku-liang_HASCO.benchmark.computations.gemv_compute"], ["", "def", "mttkrp_compute", "(", "M", ",", "N", ",", "K", ",", "L", ",", "dtype", "=", "\"int8\"", ",", "layout", "=", "\"GEMM\"", ",", "stage", "=", "0", ")", ":", "# can be automated", "\n", "\n", "    ", "if", "layout", "in", "[", "\"GEMV\"", ",", "\"DOT\"", "]", ":", "\n", "        ", "if", "stage", "==", "1", ":", "# ttm stage ", "\n", "            ", "return", "ttm_compute", "(", "M", ",", "L", ",", "N", ",", "K", ",", "dtype", ",", "layout", ")", "\n", "", "elif", "stage", "==", "2", ":", "# gemv stage", "\n", "            ", "return", "gemv_compute", "(", "M", ",", "N", ",", "L", ",", "dtype", ",", "layout", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "", "else", ":", "# tensor computations with multiple input tensors can be improved", "\n", "        ", "A", "=", "tvm", ".", "placeholder", "(", "[", "M", ",", "K", ",", "L", "]", ",", "name", "=", "\"A\"", ",", "dtype", "=", "dtype", ")", "\n", "B", "=", "tvm", ".", "placeholder", "(", "[", "N", ",", "K", "]", ",", "name", "=", "\"B\"", ",", "dtype", "=", "dtype", ")", "\n", "C", "=", "tvm", ".", "placeholder", "(", "[", "N", ",", "L", "]", ",", "name", "=", "\"C\"", ",", "dtype", "=", "dtype", ")", "\n", "\n", "k", "=", "tvm", ".", "reduce_axis", "(", "[", "0", ",", "K", "]", ",", "name", "=", "\"k\"", ")", "\n", "l", "=", "tvm", ".", "reduce_axis", "(", "[", "0", ",", "L", "]", ",", "name", "=", "\"l\"", ")", "\n", "D", "=", "tvm", ".", "compute", "(", "[", "M", ",", "N", "]", ",", "\n", "lambda", "m", ",", "n", ":", "tvm", ".", "sum", "(", "A", "[", "m", ",", "k", ",", "l", "]", "*", "B", "[", "n", ",", "k", "]", "*", "C", "[", "n", ",", "l", "]", ",", "axis", "=", "[", "k", ",", "l", "]", ")", ",", "\n", "name", "=", "\"D\"", ")", "\n", "return", "[", "D", ".", "op", "]", ",", "[", "A", ",", "B", ",", "C", ",", "D", "]", "\n", "", "", ""]]}