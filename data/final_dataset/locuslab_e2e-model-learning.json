{"home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.task_net.SolveNewsvendor.__init__": [[24, 47], ["torch.Module.__init__", "len", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.concatenate", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "task_net.SolveNewsvendor.Q.cuda", "task_net.SolveNewsvendor.p.cuda", "task_net.SolveNewsvendor.G.cuda", "task_net.SolveNewsvendor.h.cuda", "task_net.SolveNewsvendor.one.cuda", "task_net.SolveNewsvendor.eps_eye.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "numpy.zeros", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.SolveScheduling.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "eps", "=", "1e-2", ")", ":", "\n", "        ", "super", "(", "SolveNewsvendor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "k", "=", "len", "(", "params", "[", "'d'", "]", ")", "\n", "self", ".", "Q", "=", "torch", ".", "diag", "(", "torch", ".", "Tensor", "(", "\n", "[", "params", "[", "'c_quad'", "]", "]", "+", "[", "params", "[", "'b_quad'", "]", "]", "*", "k", "+", "[", "params", "[", "'h_quad'", "]", "]", "*", "k", ")", ")", "\n", "self", ".", "p", "=", "torch", ".", "Tensor", "(", "\n", "[", "params", "[", "'c_lin'", "]", "]", "+", "[", "params", "[", "'b_lin'", "]", "]", "*", "k", "+", "[", "params", "[", "'h_lin'", "]", "]", "*", "k", ")", "\n", "self", ".", "G", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "cat", "(", "[", "-", "torch", ".", "ones", "(", "k", ",", "1", ")", ",", "-", "torch", ".", "eye", "(", "k", ")", ",", "torch", ".", "zeros", "(", "k", ",", "k", ")", "]", ",", "1", ")", ",", "\n", "torch", ".", "cat", "(", "[", "torch", ".", "ones", "(", "k", ",", "1", ")", ",", "torch", ".", "zeros", "(", "k", ",", "k", ")", ",", "-", "torch", ".", "eye", "(", "k", ")", "]", ",", "1", ")", ",", "\n", "-", "torch", ".", "eye", "(", "1", "+", "2", "*", "k", ")", "]", ",", "0", ")", "\n", "self", ".", "h", "=", "torch", ".", "Tensor", "(", "\n", "np", ".", "concatenate", "(", "[", "-", "params", "[", "'d'", "]", ",", "params", "[", "'d'", "]", ",", "np", ".", "zeros", "(", "1", "+", "2", "*", "k", ")", "]", ")", ")", "\n", "self", ".", "one", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", "\n", "self", ".", "eps_eye", "=", "eps", "*", "torch", ".", "eye", "(", "1", "+", "2", "*", "k", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "if", "USE_GPU", ":", "\n", "            ", "self", ".", "Q", "=", "self", ".", "Q", ".", "cuda", "(", ")", "\n", "self", ".", "p", "=", "self", ".", "p", ".", "cuda", "(", ")", "\n", "self", ".", "G", "=", "self", ".", "G", ".", "cuda", "(", ")", "\n", "self", ".", "h", "=", "self", ".", "h", ".", "cuda", "(", ")", "\n", "self", ".", "one", "=", "self", ".", "one", ".", "cuda", "(", ")", "\n", "self", ".", "eps_eye", "=", "self", ".", "eps_eye", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.task_net.SolveNewsvendor.forward": [[48, 66], ["y.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "task_net.SolveNewsvendor.Q.unsqueeze().expand_as().mul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "task_net.SolveNewsvendor.p.unsqueeze().expand_as().mul", "task_net.SolveNewsvendor.G.unsqueeze().expand", "task_net.SolveNewsvendor.h.unsqueeze().expand", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "task_net.SolveNewsvendor.G.size", "task_net.SolveNewsvendor.G.size", "task_net.SolveNewsvendor.h.size", "e.cuda.cuda.cuda", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "task_net.SolveNewsvendor.Q.unsqueeze().expand_as", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "task_net.SolveNewsvendor.p.unsqueeze().expand_as", "task_net.SolveNewsvendor.G.unsqueeze", "task_net.SolveNewsvendor.h.unsqueeze", "range", "qpth.qp.QPFunction", "task_net.SolveNewsvendor.double", "task_net.SolveNewsvendor.double", "task_net.SolveNewsvendor.double", "task_net.SolveNewsvendor.double", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "task_net.SolveNewsvendor.Q.unsqueeze", "task_net.SolveNewsvendor.p.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "y", ")", ":", "\n", "        ", "nBatch", ",", "k", "=", "y", ".", "size", "(", ")", "\n", "\n", "Q_scale", "=", "torch", ".", "cat", "(", "[", "torch", ".", "diag", "(", "torch", ".", "cat", "(", "\n", "[", "self", ".", "one", ",", "y", "[", "i", "]", ",", "y", "[", "i", "]", "]", ")", ")", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "range", "(", "nBatch", ")", "]", ",", "0", ")", "\n", "Q", "=", "self", ".", "Q", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "Q_scale", ")", ".", "mul", "(", "Q_scale", ")", "\n", "p_scale", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones", "(", "nBatch", ",", "1", ",", "device", "=", "DEVICE", ")", ",", "y", ",", "y", "]", ",", "1", ")", "\n", "p", "=", "self", ".", "p", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "p_scale", ")", ".", "mul", "(", "p_scale", ")", "\n", "G", "=", "self", ".", "G", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "nBatch", ",", "self", ".", "G", ".", "size", "(", "0", ")", ",", "self", ".", "G", ".", "size", "(", "1", ")", ")", "\n", "h", "=", "self", ".", "h", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "nBatch", ",", "self", ".", "h", ".", "size", "(", "0", ")", ")", "\n", "e", "=", "torch", ".", "DoubleTensor", "(", ")", "\n", "if", "USE_GPU", ":", "\n", "            ", "e", "=", "e", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "QPFunction", "(", "verbose", "=", "False", ")", "(", "Q", ".", "double", "(", ")", ",", "p", ".", "double", "(", ")", ",", "G", ".", "double", "(", ")", ",", "h", ".", "double", "(", ")", ",", "e", ",", "e", ")", ".", "float", "(", ")", "\n", "\n", "return", "out", "[", ":", ",", ":", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.task_net.run_task_net": [[68, 170], ["numpy.random.permutation", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "[].detach", "[].detach", "[].detach", "torch.tensor", "torch.tensor", "torch.tensor", "task_net.SolveNewsvendor", "torch.NLLLoss", "torch.Adam", "range", "hold_costs.index", "newsvendor_solve.cuda.cuda", "cost", "nll.cuda.cuda", "functools.reduce", "torch.Sequential", "torch.Sequential", "model.cuda.cuda", "model.cuda.parameters", "model.cuda.eval", "batch.get_cost", "batch.get_cost_nll", "batch.get_cost", "batch.get_cost_nll", "model.cuda.train", "task_net.batch_train", "print", "test_costs.append", "hold_costs.append", "min", "int", "int", "newsvendor_solve.cuda.", "torch.Linear", "torch.Softmax", "torch.Linear", "torch.Softmax", "train_cost.item", "train_nll.item", "batch.get_cost.item", "batch.get_cost_nll.item", "batch.get_cost.item", "batch.get_cost_nll.item", "batch.get_cost.item", "batch.get_cost.item", "hold_costs.index", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "min", "max", "batch.get_cost.item", "print", "torch.Linear", "torch.BatchNorm1d", "torch.ReLU", "torch.Dropout", "zip", "Y.mv().view", "Y.mv().view", "Y.mv().view", "Y.mv().view", "Y.mv", "Y.mv", "Y.mv", "Y.mv"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_cost", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_cost_nll", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_cost", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_cost_nll", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle_net.batch_train"], ["", "", "def", "run_task_net", "(", "X", ",", "Y", ",", "X_test", ",", "Y_test", ",", "params", ",", "is_nonlinear", "=", "False", ")", ":", "\n", "\n", "# Training/validation split", "\n", "    ", "th_frac", "=", "0.8", "\n", "inds", "=", "np", ".", "random", ".", "permutation", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "train_inds", "=", "inds", "[", ":", "int", "(", "X", ".", "shape", "[", "0", "]", "*", "th_frac", ")", "]", "\n", "hold_inds", "=", "inds", "[", "int", "(", "X", ".", "shape", "[", "0", "]", "*", "th_frac", ")", ":", "]", "\n", "X_train", ",", "X_hold", "=", "X", "[", "train_inds", ",", ":", "]", ",", "X", "[", "hold_inds", ",", ":", "]", "\n", "Y_train", ",", "Y_hold", "=", "Y", "[", "train_inds", ",", ":", "]", ",", "Y", "[", "hold_inds", ",", ":", "]", "\n", "\n", "X_train_t", "=", "torch", ".", "tensor", "(", "X_train", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "DEVICE", ")", "\n", "Y_train_t", "=", "torch", ".", "tensor", "(", "Y_train", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "DEVICE", ")", "\n", "X_hold_t", "=", "torch", ".", "tensor", "(", "X_hold", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "DEVICE", ")", "\n", "Y_hold_t", "=", "torch", ".", "tensor", "(", "Y_hold", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "DEVICE", ")", "\n", "X_test_t", "=", "torch", ".", "tensor", "(", "X_test", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "DEVICE", ")", "\n", "Y_test_t", "=", "torch", ".", "tensor", "(", "Y_test", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "DEVICE", ")", "\n", "\n", "Y_train_int_t", "=", "torch", ".", "where", "(", "Y_train_t", ")", "[", "1", "]", ".", "detach", "(", ")", "\n", "Y_hold_int_t", "=", "torch", ".", "where", "(", "Y_hold_t", ")", "[", "1", "]", ".", "detach", "(", ")", "\n", "Y_test_int_t", "=", "torch", ".", "where", "(", "Y_test_t", ")", "[", "1", "]", ".", "detach", "(", ")", "\n", "\n", "d_", "=", "torch", ".", "tensor", "(", "params", "[", "'d'", "]", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "DEVICE", ")", "\n", "\n", "# Expected inventory cost and solver for newsvendor scheduling problem", "\n", "cost", "=", "lambda", "Z", ",", "Y", ":", "(", "params", "[", "'c_lin'", "]", "*", "Z", "+", "0.5", "*", "params", "[", "'c_quad'", "]", "*", "(", "Z", "**", "2", ")", "+", "\n", "params", "[", "'b_lin'", "]", "*", "(", "Y", ".", "mv", "(", "d_", ")", ".", "view", "(", "-", "1", ",", "1", ")", "-", "Z", ")", ".", "clamp", "(", "min", "=", "0", ")", "+", "\n", "0.5", "*", "params", "[", "'b_quad'", "]", "*", "(", "Y", ".", "mv", "(", "d_", ")", ".", "view", "(", "-", "1", ",", "1", ")", "-", "Z", ")", ".", "clamp", "(", "min", "=", "0", ")", "**", "2", "+", "\n", "params", "[", "'h_lin'", "]", "*", "(", "Z", "-", "Y", ".", "mv", "(", "d_", ")", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "clamp", "(", "min", "=", "0", ")", "+", "\n", "0.5", "*", "params", "[", "'h_quad'", "]", "*", "(", "Z", "-", "Y", ".", "mv", "(", "d_", ")", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "clamp", "(", "min", "=", "0", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "newsvendor_solve", "=", "SolveNewsvendor", "(", "params", ")", "\n", "if", "USE_GPU", ":", "\n", "        ", "newsvendor_solve", "=", "newsvendor_solve", ".", "cuda", "(", ")", "\n", "", "cost_news_fn", "=", "lambda", "x", ",", "y", ":", "cost", "(", "newsvendor_solve", "(", "x", ")", ",", "y", ")", "\n", "\n", "nll", "=", "nn", ".", "NLLLoss", "(", ")", "\n", "if", "USE_GPU", ":", "\n", "        ", "nll", "=", "nll", ".", "cuda", "(", ")", "\n", "", "lam", "=", "10.0", "# regularization", "\n", "\n", "if", "is_nonlinear", ":", "\n", "# Non-linear model, use ADAM step size 1e-3", "\n", "        ", "layer_sizes", "=", "[", "X_train", ".", "shape", "[", "1", "]", ",", "200", ",", "200", ",", "Y_train", ".", "shape", "[", "1", "]", "]", "\n", "layers", "=", "reduce", "(", "operator", ".", "add", ",", "[", "[", "nn", ".", "Linear", "(", "a", ",", "b", ")", ",", "nn", ".", "BatchNorm1d", "(", "b", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "]", "\n", "for", "a", ",", "b", "in", "zip", "(", "layer_sizes", "[", "0", ":", "-", "2", "]", ",", "layer_sizes", "[", "1", ":", "-", "1", "]", ")", "]", ")", "\n", "layers", "+=", "[", "nn", ".", "Linear", "(", "layer_sizes", "[", "-", "2", "]", ",", "layer_sizes", "[", "-", "1", "]", ")", ",", "nn", ".", "Softmax", "(", ")", "]", "\n", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "step_size", "=", "1e-3", "\n", "", "else", ":", "\n", "# Linear model, use ADAM step size 1e-2", "\n", "        ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "X_train", ".", "shape", "[", "1", "]", ",", "Y_train", ".", "shape", "[", "1", "]", ")", ",", "\n", "nn", ".", "Softmax", "(", ")", "\n", ")", "\n", "step_size", "=", "1e-2", "\n", "\n", "", "if", "USE_GPU", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "", "opt", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "step_size", ")", "\n", "\n", "# For early stopping", "\n", "hold_costs", ",", "test_costs", "=", "[", "]", ",", "[", "]", "\n", "num_stop_rounds", "=", "20", "\n", "\n", "for", "i", "in", "range", "(", "1000", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "test_cost", "=", "batch", ".", "get_cost", "(", "\n", "100", ",", "i", ",", "model", ",", "X_test_t", ",", "Y_test_t", ",", "cost_news_fn", ")", "\n", "test_nll", "=", "batch", ".", "get_cost_nll", "(", "\n", "100", ",", "i", ",", "model", ",", "X_test_t", ",", "Y_test_int_t", ",", "nll", ")", "\n", "\n", "hold_cost", "=", "batch", ".", "get_cost", "(", "\n", "100", ",", "i", ",", "model", ",", "X_hold_t", ",", "Y_hold_t", ",", "cost_news_fn", ")", "\n", "hold_nll", "=", "batch", ".", "get_cost_nll", "(", "\n", "100", ",", "i", ",", "model", ",", "X_hold_t", ",", "Y_hold_int_t", ",", "nll", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "train_cost", ",", "train_nll", "=", "batch_train", "(", "150", ",", "i", ",", "X_train_t", ",", "Y_train_t", ",", "\n", "Y_train_int_t", ",", "model", ",", "cost_news_fn", ",", "nll", ",", "opt", ",", "lam", ")", "\n", "\n", "print", "(", "i", ",", "train_cost", ".", "item", "(", ")", ",", "train_nll", ".", "item", "(", ")", ",", "test_cost", ".", "item", "(", ")", ",", "\n", "test_nll", ".", "item", "(", ")", ",", "hold_cost", ".", "item", "(", ")", ",", "hold_nll", ".", "item", "(", ")", ")", "\n", "\n", "# Early stopping", "\n", "test_costs", ".", "append", "(", "test_cost", ".", "item", "(", ")", ")", "\n", "hold_costs", ".", "append", "(", "hold_cost", ".", "item", "(", ")", ")", "\n", "if", "i", ">", "0", "and", "i", "%", "num_stop_rounds", "==", "0", ":", "\n", "            ", "idx", "=", "hold_costs", ".", "index", "(", "min", "(", "hold_costs", ")", ")", "\n", "# Stop if current cost is worst in num_stop_rounds rounds", "\n", "if", "max", "(", "hold_costs", ")", "==", "hold_cost", ".", "item", "(", ")", ":", "\n", "                ", "print", "(", "test_costs", "[", "idx", "]", ")", "\n", "return", "(", "test_costs", "[", "idx", "]", ")", "\n", "", "else", ":", "\n", "# Keep only \"best\" round", "\n", "                ", "hold_costs", "=", "[", "hold_costs", "[", "idx", "]", "]", "\n", "test_costs", "=", "[", "test_costs", "[", "idx", "]", "]", "\n", "\n", "# In case of no early stopping, return best run so far", "\n", "", "", "", "idx", "=", "hold_costs", ".", "index", "(", "min", "(", "hold_costs", ")", ")", "\n", "return", "test_costs", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.task_net.batch_train": [[171, 217], ["batch.get_vars", "batch.get_vars_scalar_out", "range", "X_train_t.size", "opt.zero_grad", "model", "cost_fn_news", "nll", "opt.step", "print", "X_train_t.size", "batch.get_vars", "batch.get_vars_scalar_out", "X_train_t.size", "X_train_t.size", "cost_fn_news.item", "float", "X_train_t.size"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_vars", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_vars_scalar_out", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_vars", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_vars_scalar_out"], ["", "def", "batch_train", "(", "batch_sz", ",", "epoch", ",", "X_train_t", ",", "Y_train_t", ",", "Y_train_int_t", ",", "\n", "model", ",", "cost_fn_news", ",", "nll", ",", "opt", ",", "lam", ")", ":", "\n", "\n", "    ", "train_cost_agg", "=", "0", "\n", "train_nll_agg", "=", "0", "\n", "\n", "batch_data_", ",", "batch_targets_", "=", "batch", ".", "get_vars", "(", "batch_sz", ",", "X_train_t", ",", "Y_train_t", ")", "\n", "_", ",", "batch_targets_int_", "=", "batch", ".", "get_vars_scalar_out", "(", "batch_sz", ",", "X_train_t", ",", "Y_train_int_t", ")", "\n", "size", "=", "batch_sz", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "X_train_t", ".", "size", "(", "0", ")", ",", "batch_sz", ")", ":", "\n", "\n", "# Deal with potentially incomplete (last) batch", "\n", "        ", "if", "i", "+", "batch_sz", ">", "X_train_t", ".", "size", "(", "0", ")", ":", "\n", "            ", "size", "=", "X_train_t", ".", "size", "(", "0", ")", "-", "i", "\n", "batch_data_", ",", "batch_targets_", "=", "batch", ".", "get_vars", "(", "\n", "size", ",", "X_train_t", ",", "Y_train_t", ")", "\n", "_", ",", "batch_targets_int_", "=", "batch", ".", "get_vars_scalar_out", "(", "\n", "size", ",", "X_train_t", ",", "Y_train_int_t", ")", "\n", "\n", "", "batch_data_", ".", "data", "[", ":", "]", "=", "X_train_t", "[", "i", ":", "i", "+", "size", "]", "\n", "batch_targets_", ".", "data", "[", ":", "]", "=", "Y_train_t", "[", "i", ":", "i", "+", "size", "]", "\n", "batch_targets_int_", ".", "data", "[", ":", "]", "=", "Y_train_int_t", "[", "i", ":", "i", "+", "size", "]", "\n", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "preds", "=", "model", "(", "batch_data_", ")", "\n", "train_cost", "=", "cost_fn_news", "(", "preds", ",", "batch_targets_", ")", "\n", "train_nll", "=", "nll", "(", "preds", ",", "batch_targets_int_", ")", "\n", "\n", "(", "train_cost", "+", "lam", "*", "train_nll", ")", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "# Keep running average of losses", "\n", "train_cost_agg", "+=", "(", "train_cost", "-", "train_cost_agg", ")", "*", "batch_sz", "/", "(", "i", "+", "batch_sz", ")", "\n", "train_nll_agg", "+=", "(", "train_nll", "-", "train_nll_agg", ")", "*", "batch_sz", "/", "(", "i", "+", "batch_sz", ")", "\n", "\n", "print", "(", "'Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.4f}'", ".", "format", "(", "\n", "epoch", ",", "i", "+", "batch_sz", ",", "X_train_t", ".", "size", "(", "0", ")", ",", "\n", "float", "(", "i", "+", "batch_sz", ")", "/", "X_train_t", ".", "size", "(", "0", ")", "*", "100", ",", "\n", "train_cost", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "return", "train_cost_agg", ",", "train_nll_agg", "\n", "", ""]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.main.main": [[24, 166], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "setproctitle.setproctitle", "main.init_newsvendor_params", "os.path.join", "main.init_theta_true", "main.gen_data", "mle.newsvendor_eval", "print", "numpy.mean", "range", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "numpy.mean", "open", "f.write", "f.write", "open", "f.write", "main.gen_data", "mle.linear_softmax_reg", "mle.newsvendor_eval", "numpy.mean", "print", "mle_net.run_mle_net", "print", "policy_net.run_policy_net", "print", "policy_net.run_policy_net", "print", "task_net.run_task_net", "print", "task_net.run_task_net", "print", "plot.plot_results", "main.log_error_and_write", "numpy.zeros", "open", "f.write", "main.log_error_and_write", "open", "f.write", "main.log_error_and_write", "open", "f.write", "main.log_error_and_write", "open", "f.write", "main.log_error_and_write", "open", "f.write", "main.log_error_and_write", "open", "f.write", "main.log_error_and_write", "open", "f.write", "len", "os.path.join", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.main.init_newsvendor_params", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.main.init_theta_true", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.main.gen_data", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle.newsvendor_eval", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.main.gen_data", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle.linear_softmax_reg", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle.newsvendor_eval", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle_net.run_mle_net", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.policy_net.run_policy_net", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.policy_net.run_policy_net", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.run_task_net", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.run_task_net", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.plot.plot_results", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.main.log_error_and_write", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.main.log_error_and_write", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.main.log_error_and_write", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.main.log_error_and_write", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.main.log_error_and_write", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.main.log_error_and_write", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.main.log_error_and_write"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Run newsvendor task net experiments.'", ")", "\n", "parser", ".", "add_argument", "(", "'--save'", ",", "type", "=", "str", ",", "\n", "metavar", "=", "'save-folder'", ",", "help", "=", "'prefix to add to save path'", ")", "\n", "parser", ".", "add_argument", "(", "'--nRuns'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "metavar", "=", "'runs'", ",", "help", "=", "'number of runs'", ")", "\n", "parser", ".", "add_argument", "(", "'--trueModel'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "'linear'", ",", "'nonlinear'", ",", "'both'", "]", ",", "default", "=", "'both'", ",", "\n", "help", "=", "'true y|x distribution'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "setproctitle", ".", "setproctitle", "(", "'newsvendor-{}'", ".", "format", "(", "args", ".", "trueModel", ")", ")", "\n", "\n", "# Cost params for newsvendor task loss", "\n", "params", "=", "init_newsvendor_params", "(", ")", "\n", "\n", "true_model_types", "=", "[", "'linear'", ",", "'nonlinear'", "]", "if", "args", ".", "trueModel", "==", "'both'", "else", "[", "args", ".", "trueModel", "]", "\n", "\n", "for", "true_model", "in", "true_model_types", ":", "\n", "\n", "        ", "save_folder", "=", "os", ".", "path", ".", "join", "(", "'results'", ",", "true_model", ")", "if", "args", ".", "save", "is", "None", "else", "os", ".", "path", ".", "join", "(", "'{}-results'", ".", "format", "(", "args", ".", "save", ")", ",", "true_model", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_folder", ")", "\n", "\n", "", "results_file", "=", "os", ".", "path", ".", "join", "(", "save_folder", ",", "'inventory_results.csv'", ")", "\n", "\n", "# Randomly generate true params for p(y|x;\\theta).", "\n", "# Set with_seed=True to replicate paper true params.", "\n", "Theta_true_lin", ",", "Theta_true_sq", "=", "init_theta_true", "(", "\n", "params", ",", "is_linear", "=", "(", "true_model", "==", "'linear'", ")", ",", "with_seed", "=", "True", ")", "\n", "\n", "# Test data. Set with_seed=True to replicate paper test data.", "\n", "X_test", ",", "Y_test", "=", "gen_data", "(", "1000", ",", "params", ",", "Theta_true_lin", ",", "Theta_true_sq", ",", "\n", "with_seed", "=", "True", ")", "\n", "\n", "# MLE with true params", "\n", "f_eval_mle_t", ",", "z_buy_t", ",", "f_opt_t", "=", "mle", ".", "newsvendor_eval", "(", "\n", "X_test", ",", "Y_test", ",", "Theta_true_lin", ",", "Theta_true_sq", ",", "params", ")", "\n", "print", "(", "np", ".", "mean", "(", "f_eval_mle_t", ")", ")", "\n", "mle_true_score", "=", "np", ".", "mean", "(", "f_eval_mle_t", ")", "\n", "\n", "with", "open", "(", "results_file", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "'{},{}\\n'", ".", "format", "(", "'mle_true:'", ",", "mle_true_score", ")", ")", "\n", "f", ".", "write", "(", "'{},{},{},{},{},{},{}\\n'", ".", "format", "(", "\n", "'m'", ",", "'mle-linear'", ",", "'mle-nonlinear'", ",", "'policy-linear'", ",", "'policy-nonlinear'", ",", "'task-linear'", ",", "'task-nonlinear'", ")", ")", "\n", "\n", "", "for", "run", "in", "range", "(", "args", ".", "nRuns", ")", ":", "\n", "            ", "for", "m", "in", "[", "100", ",", "200", ",", "300", ",", "500", ",", "1000", ",", "3000", ",", "5000", ",", "10000", "]", ":", "\n", "\n", "                ", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                    ", "f", ".", "write", "(", "'\\n{},'", ".", "format", "(", "m", ")", ")", "\n", "\n", "# Generate data based on true params", "\n", "", "try", ":", "\n", "                    ", "X", ",", "Y", "=", "gen_data", "(", "m", ",", "params", ",", "Theta_true_lin", ",", "Theta_true_sq", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "'gen'", ",", "\n", "results_file", ",", "newline", "=", "True", ")", "\n", "\n", "# MLE with linear softmax regression", "\n", "", "try", ":", "\n", "                    ", "Theta_est", "=", "mle", ".", "linear_softmax_reg", "(", "X", ",", "Y", ",", "params", ")", "\n", "f_eval_mle", ",", "z_buy", ",", "f_opt", "=", "mle", ".", "newsvendor_eval", "(", "X_test", ",", "Y_test", ",", "Theta_est", ",", "\n", "np", ".", "zeros", "(", "(", "params", "[", "'n'", "]", ",", "len", "(", "params", "[", "'d'", "]", ")", ")", ")", ",", "\n", "params", ")", "\n", "mle_score", "=", "np", ".", "mean", "(", "f_eval_mle", ")", "\n", "\n", "print", "(", "mle_score", ")", "\n", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "'{},'", ".", "format", "(", "mle_score", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "'mle-linear'", ",", "results_file", ")", "\n", "\n", "# Nonlinear MLE net", "\n", "", "try", ":", "\n", "                    ", "mle_nonlin_score", "=", "mle_net", ".", "run_mle_net", "(", "\n", "X", ",", "Y", ",", "X_test", ",", "Y_test", ",", "params", ")", "\n", "\n", "print", "(", "mle_nonlin_score", ")", "\n", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "'{},'", ".", "format", "(", "mle_nonlin_score", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "\n", "'mle-nonlinear'", ",", "results_file", ")", "\n", "\n", "# Pure end-to-end policy neural net (linear)", "\n", "", "try", ":", "\n", "                    ", "policy_lin_score", "=", "policy_net", ".", "run_policy_net", "(", "\n", "X", ",", "Y", ",", "X_test", ",", "Y_test", ",", "params", ")", "\n", "\n", "print", "(", "policy_lin_score", ")", "\n", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                            ", "f", ".", "write", "(", "'{},'", ".", "format", "(", "policy_lin_score", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "'policy-linear'", ",", "results_file", ")", "\n", "\n", "# Pure end-to-end policy neural net (nonlinear)", "\n", "", "try", ":", "\n", "                    ", "policy_nonlin_score", "=", "policy_net", ".", "run_policy_net", "(", "\n", "X", ",", "Y", ",", "X_test", ",", "Y_test", ",", "params", ",", "is_nonlinear", "=", "True", ")", "\n", "\n", "print", "(", "policy_nonlin_score", ")", "\n", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "'{},'", ".", "format", "(", "policy_nonlin_score", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "'policy-nonlinear'", ",", "results_file", ")", "\n", "\n", "# Model-based end-to-end model (linear)", "\n", "", "try", ":", "\n", "                    ", "e2e_lin_score", "=", "task_net", ".", "run_task_net", "(", "\n", "X", ",", "Y", ",", "X_test", ",", "Y_test", ",", "params", ")", "\n", "\n", "print", "(", "e2e_lin_score", ")", "\n", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "'{},'", ".", "format", "(", "e2e_lin_score", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "\n", "'task-linear'", ",", "results_file", ")", "\n", "\n", "# Model-based end-to-end model (nonlinear)", "\n", "", "try", ":", "\n", "                    ", "e2e_nonlin_score", "=", "task_net", ".", "run_task_net", "(", "\n", "X", ",", "Y", ",", "X_test", ",", "Y_test", ",", "params", ",", "is_nonlinear", "=", "True", ")", "\n", "\n", "print", "(", "e2e_nonlin_score", ")", "\n", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "'{}\\n'", ".", "format", "(", "e2e_nonlin_score", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "results_file", ",", "\n", "'task-nonlinear'", ",", "newline", "=", "True", ")", "\n", "\n", "# Plot results as we go", "\n", "", "try", ":", "\n", "                    ", "plot", ".", "plot_results", "(", "save_folder", ",", "true_model", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_folder", ",", "\n", "'errors.log'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "'{}: m {}, model {}, run {}: {}\\n'", ".", "format", "(", "\n", "datetime", ".", "now", "(", ")", ",", "m", ",", "'plot'", ",", "run", ",", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.main.init_newsvendor_params": [[169, 191], ["numpy.array().astype", "numpy.array"], "function", ["None"], ["", "", "", "", "", "", "def", "init_newsvendor_params", "(", ")", ":", "\n", "    ", "params", "=", "{", "}", "\n", "\n", "# Ordering costs", "\n", "params", "[", "'c_lin'", "]", "=", "10", "\n", "params", "[", "'c_quad'", "]", "=", "2.0", "\n", "\n", "# Over-order penalties", "\n", "params", "[", "'b_lin'", "]", "=", "30", "\n", "params", "[", "'b_quad'", "]", "=", "14", "\n", "\n", "# Under-order penalties", "\n", "params", "[", "'h_lin'", "]", "=", "10", "\n", "params", "[", "'h_quad'", "]", "=", "2", "\n", "\n", "# Discrete demands", "\n", "params", "[", "'d'", "]", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "5", ",", "10", ",", "20", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Number of features", "\n", "params", "[", "'n'", "]", "=", "20", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.main.init_theta_true": [[193, 208], ["numpy.random.seed", "numpy.random.randn", "numpy.zeros", "numpy.zeros", "numpy.random.randn", "numpy.random.seed", "numpy.random.seed", "len", "numpy.random.seed", "numpy.random.seed", "len", "len", "len"], "function", ["None"], ["", "def", "init_theta_true", "(", "params", ",", "is_linear", "=", "True", ",", "with_seed", "=", "False", ")", ":", "\n", "    ", "if", "is_linear", ":", "\n", "# Linear true model (py \u221d exp(\u03b8X))", "\n", "        ", "np", ".", "random", ".", "seed", "(", "42", ")", "if", "with_seed", "else", "np", ".", "random", ".", "seed", "(", "None", ")", "\n", "Theta_true_lin", "=", "np", ".", "random", ".", "randn", "(", "params", "[", "'n'", "]", ",", "len", "(", "params", "[", "'d'", "]", ")", ")", "\n", "Theta_true_sq", "=", "np", ".", "zeros", "(", "(", "params", "[", "'n'", "]", ",", "len", "(", "params", "[", "'d'", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "# Squared true model (py \u221d exp((\u03b8X)^2))", "\n", "        ", "Theta_true_lin", "=", "np", ".", "zeros", "(", "(", "params", "[", "'n'", "]", ",", "len", "(", "params", "[", "'d'", "]", ")", ")", ")", "\n", "np", ".", "random", ".", "seed", "(", "42", ")", "if", "with_seed", "else", "np", ".", "random", ".", "seed", "(", "None", ")", "\n", "Theta_true_sq", "=", "np", ".", "random", ".", "randn", "(", "params", "[", "'n'", "]", ",", "len", "(", "params", "[", "'d'", "]", ")", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "None", ")", "\n", "\n", "return", "Theta_true_lin", ",", "Theta_true_sq", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.main.gen_data": [[210, 225], ["numpy.random.randn", "numpy.exp", "numpy.random.seed", "numpy.random.seed", "numpy.random.seed", "numpy.where", "numpy.eye", "np.random.randn.dot", "numpy.sum", "len", "np.random.randn.dot", "numpy.cumsum", "numpy.cumsum", "numpy.random.rand"], "function", ["None"], ["", "def", "gen_data", "(", "m", ",", "params", ",", "Theta_true_lin", ",", "Theta_true_sq", ",", "with_seed", "=", "False", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "if", "with_seed", "else", "np", ".", "random", ".", "seed", "(", "None", ")", "\n", "X", "=", "np", ".", "random", ".", "randn", "(", "m", ",", "params", "[", "'n'", "]", ")", "\n", "\n", "PY", "=", "np", ".", "exp", "(", "X", ".", "dot", "(", "Theta_true_lin", ")", "+", "(", "X", ".", "dot", "(", "Theta_true_sq", ")", ")", "**", "2", ")", "\n", "PY", "=", "PY", "/", "np", ".", "sum", "(", "PY", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "\n", "# Generate demand realizations", "\n", "Y", "=", "np", ".", "where", "(", "np", ".", "cumsum", "(", "np", ".", "random", ".", "rand", "(", "m", ")", "[", ":", ",", "None", "]", "\n", "<", "np", ".", "cumsum", "(", "PY", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "==", "1", ")", "[", "1", "]", "\n", "Y", "=", "np", ".", "eye", "(", "len", "(", "params", "[", "'d'", "]", ")", ")", "[", "Y", ",", ":", "]", "\n", "\n", "np", ".", "random", ".", "seed", "(", "None", ")", "\n", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.main.log_error_and_write": [[227, 233], ["open", "f.write", "open", "f.write", "os.path.join", "datetime.datetime.now"], "function", ["None"], ["", "def", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "model", ",", "results_file", ",", "newline", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_folder", ",", "'errors.log'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'{}: m {}, model {}, run {}: {}\\n'", ".", "format", "(", "\n", "datetime", ".", "now", "(", ")", ",", "m", ",", "model", ",", "run", ",", "e", ")", ")", "\n", "", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'\\n'", "if", "newline", "else", "','", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_vars": [[11, 16], ["torch.empty", "torch.empty", "X_test_t.size", "Y_test_t.size"], "function", ["None"], ["def", "get_vars", "(", "batch_sz", ",", "X_test_t", ",", "Y_test_t", ")", ":", "\n", "    ", "batch_data_", "=", "torch", ".", "empty", "(", "batch_sz", ",", "X_test_t", ".", "size", "(", "1", ")", ",", "device", "=", "DEVICE", ")", "\n", "batch_targets_", "=", "torch", ".", "empty", "(", "batch_sz", ",", "Y_test_t", ".", "size", "(", "1", ")", ",", "device", "=", "DEVICE", ")", "\n", "\n", "return", "batch_data_", ",", "batch_targets_", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_vars_scalar_out": [[17, 22], ["torch.empty", "torch.empty", "X_test_t.size"], "function", ["None"], ["", "def", "get_vars_scalar_out", "(", "batch_sz", ",", "X_test_t", ",", "Y_test_t", ")", ":", "\n", "    ", "batch_data_", "=", "torch", ".", "empty", "(", "batch_sz", ",", "X_test_t", ".", "size", "(", "1", ")", ",", "device", "=", "DEVICE", ")", "\n", "batch_targets_", "=", "torch", ".", "empty", "(", "batch_sz", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "DEVICE", ")", "\n", "\n", "return", "batch_data_", ",", "batch_targets_", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_cost_helper": [[24, 54], ["range", "print", "print", "X_test_t.size", "model", "loss_fn", "X_test_t.size", "test_cost.item", "X_test_t.size", "batch.get_vars", "batch.get_vars_scalar_out"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_vars", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_vars_scalar_out"], ["", "def", "get_cost_helper", "(", "batch_sz", ",", "epoch", ",", "model", ",", "X_test_t", ",", "Y_test_t", ",", "\n", "loss_fn", ",", "var_getter_fn", ")", ":", "\n", "\n", "    ", "test_cost", "=", "0", "\n", "\n", "batch_data_", ",", "batch_targets_", "=", "var_getter_fn", "(", "\n", "batch_sz", ",", "X_test_t", ",", "Y_test_t", ")", "\n", "size", "=", "batch_sz", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "X_test_t", ".", "size", "(", "0", ")", ",", "batch_sz", ")", ":", "\n", "\n", "# Deal with potentially incomplete (last) batch", "\n", "        ", "if", "i", "+", "batch_sz", ">", "X_test_t", ".", "size", "(", "0", ")", ":", "\n", "            ", "size", "=", "X_test_t", ".", "size", "(", "0", ")", "-", "i", "\n", "batch_data_", ",", "batch_targets_", "=", "var_getter_fn", "(", "\n", "size", ",", "X_test_t", ",", "Y_test_t", ")", "\n", "\n", "", "batch_data_", ".", "data", "[", ":", "]", "=", "X_test_t", "[", "i", ":", "i", "+", "size", "]", "\n", "batch_targets_", ".", "data", "[", ":", "]", "=", "Y_test_t", "[", "i", ":", "i", "+", "size", "]", "\n", "\n", "preds", "=", "model", "(", "batch_data_", ")", "\n", "batch_cost", "=", "loss_fn", "(", "preds", ",", "batch_targets_", ")", "\n", "\n", "# Keep running average of loss", "\n", "test_cost", "+=", "(", "batch_cost", "-", "test_cost", ")", "*", "size", "/", "(", "i", "+", "size", ")", "\n", "\n", "", "print", "(", "'TEST SET RESULTS:'", "+", "' '", "*", "20", ")", "\n", "print", "(", "'Average loss: {:.4f}'", ".", "format", "(", "test_cost", ".", "item", "(", ")", ")", ")", "\n", "\n", "return", "test_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_cost": [[55, 58], ["batch.get_cost_helper"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_cost_helper"], ["", "def", "get_cost", "(", "batch_sz", ",", "epoch", ",", "model", ",", "X_test_t", ",", "Y_test_t", ",", "loss_fn", ")", ":", "\n", "    ", "return", "get_cost_helper", "(", "batch_sz", ",", "epoch", ",", "model", ",", "X_test_t", ",", "Y_test_t", ",", "\n", "loss_fn", ",", "get_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_cost_nll": [[59, 62], ["batch.get_cost_helper"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_cost_helper"], ["", "def", "get_cost_nll", "(", "batch_sz", ",", "epoch", ",", "model", ",", "X_test_t", ",", "Y_test_t", ",", "loss_fn", ")", ":", "\n", "    ", "return", "get_cost_helper", "(", "batch_sz", ",", "epoch", ",", "model", ",", "X_test_t", ",", "Y_test_t", ",", "\n", "loss_fn", ",", "get_vars_scalar_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle.linear_softmax_reg": [[12, 21], ["cvxpy.Variable", "cvxpy.Problem().solve", "numpy.asarray", "cvxpy.sum", "len", "cvxpy.Problem", "cvxpy.log_sum_exp", "cvxpy.sum", "cvxpy.Minimize", "cvxpy.multiply", "cvxpy.sum_squares"], "function", ["None"], ["def", "linear_softmax_reg", "(", "X", ",", "Y", ",", "params", ")", ":", "\n", "    ", "m", ",", "n", "=", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", "\n", "Theta", "=", "cp", ".", "Variable", "(", "(", "n", ",", "len", "(", "params", "[", "'d'", "]", ")", ")", ")", "\n", "f", "=", "cp", ".", "sum", "(", "cp", ".", "log_sum_exp", "(", "X", "@", "Theta", ",", "axis", "=", "1", ")", "-", "\n", "cp", ".", "sum", "(", "cp", ".", "multiply", "(", "Y", ",", "X", "@", "Theta", ")", ",", "axis", "=", "1", ")", ")", "/", "m", "\n", "lam", "=", "1e-5", "# regularization", "\n", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "f", "+", "lam", "*", "cp", ".", "sum_squares", "(", "Theta", ")", ")", ",", "[", "]", ")", ".", "solve", "(", ")", "\n", "Theta", "=", "np", ".", "asarray", "(", "Theta", ".", "value", ")", "\n", "return", "Theta", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle.newsvendor_opt": [[23, 33], ["cvxpy.Variable", "cvxpy.Problem().solve", "cvxpy.Problem", "cvxpy.square", "cvxpy.Minimize", "cvxpy.square", "cvxpy.pos", "cvxpy.pos", "cvxpy.pos", "cvxpy.square", "cvxpy.pos"], "function", ["None"], ["", "def", "newsvendor_opt", "(", "params", ",", "py", ")", ":", "\n", "    ", "z", "=", "cp", ".", "Variable", "(", "1", ")", "\n", "d", "=", "params", "[", "'d'", "]", "\n", "f", "=", "(", "params", "[", "'c_lin'", "]", "*", "z", "+", "0.5", "*", "params", "[", "'c_quad'", "]", "*", "cp", ".", "square", "(", "z", ")", "+", "\n", "py", ".", "T", "@", "(", "params", "[", "'b_lin'", "]", "*", "cp", ".", "pos", "(", "d", "-", "z", ")", "+", "\n", "0.5", "*", "params", "[", "'b_quad'", "]", "*", "cp", ".", "square", "(", "cp", ".", "pos", "(", "d", "-", "z", ")", ")", "+", "\n", "params", "[", "'h_lin'", "]", "*", "cp", ".", "pos", "(", "z", "-", "d", ")", "+", "\n", "0.5", "*", "params", "[", "'h_quad'", "]", "*", "cp", ".", "square", "(", "cp", ".", "pos", "(", "z", "-", "d", ")", ")", ")", ")", "\n", "fval", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "f", ")", ",", "[", "z", ">=", "0", "]", ")", ".", "solve", "(", ")", "\n", "return", "z", ".", "value", ",", "fval", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle.f_obj": [[35, 41], ["numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "def", "f_obj", "(", "z", ",", "d", ",", "params", ")", ":", "\n", "    ", "return", "(", "params", "[", "'c_lin'", "]", "*", "z", "+", "0.5", "*", "params", "[", "'c_quad'", "]", "*", "(", "z", "**", "2", ")", "+", "\n", "params", "[", "'b_lin'", "]", "*", "np", ".", "maximum", "(", "d", "-", "z", ",", "0", ")", "+", "\n", "0.5", "*", "params", "[", "'b_quad'", "]", "*", "np", ".", "maximum", "(", "d", "-", "z", ",", "0", ")", "**", "2", "+", "\n", "params", "[", "'h_lin'", "]", "*", "np", ".", "maximum", "(", "z", "-", "d", ",", "0", ")", "+", "\n", "0.5", "*", "params", "[", "'h_quad'", "]", "*", "np", ".", "maximum", "(", "z", "-", "d", ",", "0", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle.newsvendor_eval": [[43, 55], ["numpy.exp", "range", "numpy.sum", "numpy.zeros", "numpy.zeros", "numpy.zeros", "mle.newsvendor_opt", "mle.f_obj", "mle.newsvendor_opt", "params[].dot"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle.newsvendor_opt", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle.f_obj", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle.newsvendor_opt"], ["", "def", "newsvendor_eval", "(", "X", ",", "Y", ",", "Theta_lin", ",", "Theta_sq", ",", "params", ")", ":", "\n", "    ", "m", "=", "X", ".", "shape", "[", "0", "]", "\n", "# TODO: deal with overflow", "\n", "py", "=", "np", ".", "exp", "(", "X", "@", "Theta_lin", "+", "(", "X", "@", "Theta_sq", ")", "**", "2", ")", "\n", "py", "/=", "np", ".", "sum", "(", "py", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "\n", "f_eval", ",", "f_opt", ",", "z_buy", "=", "np", ".", "zeros", "(", "m", ")", ",", "np", ".", "zeros", "(", "m", ")", ",", "np", ".", "zeros", "(", "m", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "z_buy", "[", "i", "]", ",", "_", "=", "newsvendor_opt", "(", "params", ",", "py", "[", "i", "]", ")", "\n", "f_eval", "[", "i", "]", "=", "f_obj", "(", "z_buy", "[", "i", "]", ",", "params", "[", "'d'", "]", ".", "dot", "(", "Y", "[", "i", "]", ")", ",", "params", ")", "\n", "z_buy_opt", ",", "f_opt", "[", "i", "]", "=", "newsvendor_opt", "(", "params", ",", "Y", "[", "i", "]", ")", "\n", "", "return", "f_eval", ",", "z_buy", ",", "f_opt", "\n", "", ""]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.policy_net.run_policy_net": [[17, 65], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Adam", "range", "batch.get_cost.item", "functools.reduce", "torch.Sequential", "torch.Sequential", "model.cuda.cuda", "model.cuda.parameters", "model.cuda.eval", "batch.get_cost", "model.cuda.train", "policy_net.batch_train", "print", "torch.Linear", "torch.Linear", "batch_train.item", "batch.get_cost.item", "torch.Linear", "torch.BatchNorm1d", "torch.ReLU", "torch.Dropout", "zip", "Y.mv().view", "Y.mv().view", "Y.mv().view", "Y.mv().view", "Y.mv", "Y.mv", "Y.mv", "Y.mv"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_cost", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle_net.batch_train"], ["def", "run_policy_net", "(", "X_train", ",", "Y_train", ",", "X_test", ",", "Y_test", ",", "params", ",", "is_nonlinear", "=", "False", ")", ":", "\n", "\n", "    ", "if", "is_nonlinear", ":", "\n", "# Non-linear model, use ADAM step size 1e-3", "\n", "        ", "layer_sizes", "=", "[", "params", "[", "'n'", "]", ",", "200", ",", "200", ",", "1", "]", "\n", "layers", "=", "reduce", "(", "operator", ".", "add", ",", "[", "[", "nn", ".", "Linear", "(", "a", ",", "b", ")", ",", "nn", ".", "BatchNorm1d", "(", "b", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "]", "# TODO: Why is this 0.2? (others are 0.5)", "\n", "for", "a", ",", "b", "in", "zip", "(", "layer_sizes", "[", "0", ":", "-", "2", "]", ",", "layer_sizes", "[", "1", ":", "-", "1", "]", ")", "]", ")", "\n", "layers", "+=", "[", "nn", ".", "Linear", "(", "layer_sizes", "[", "-", "2", "]", ",", "layer_sizes", "[", "-", "1", "]", ")", "]", "\n", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "step_size", "=", "1e-3", "\n", "", "else", ":", "\n", "# Linear model, use ADAM step size 1e-2", "\n", "        ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "params", "[", "'n'", "]", ",", "1", ")", "\n", ")", "\n", "step_size", "=", "1e-2", "\n", "\n", "", "if", "USE_GPU", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "", "X_train_t", "=", "torch", ".", "tensor", "(", "X_train", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "DEVICE", ")", "\n", "Y_train_t", "=", "torch", ".", "tensor", "(", "Y_train", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "DEVICE", ")", "\n", "X_test_t", "=", "torch", ".", "tensor", "(", "X_test", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "DEVICE", ")", "\n", "Y_test_t", "=", "torch", ".", "tensor", "(", "Y_test", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "DEVICE", ")", "\n", "d_", "=", "torch", ".", "tensor", "(", "params", "[", "'d'", "]", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "DEVICE", ")", "\n", "\n", "# Expected inventory cost", "\n", "cost", "=", "lambda", "Z", ",", "Y", ":", "(", "params", "[", "'c_lin'", "]", "*", "Z", "+", "0.5", "*", "params", "[", "'c_quad'", "]", "*", "(", "Z", "**", "2", ")", "+", "\n", "params", "[", "'b_lin'", "]", "*", "(", "Y", ".", "mv", "(", "d_", ")", ".", "view", "(", "-", "1", ",", "1", ")", "-", "Z", ")", ".", "clamp", "(", "min", "=", "0", ")", "+", "\n", "0.5", "*", "params", "[", "'b_quad'", "]", "*", "(", "Y", ".", "mv", "(", "d_", ")", ".", "view", "(", "-", "1", ",", "1", ")", "-", "Z", ")", ".", "clamp", "(", "min", "=", "0", ")", "**", "2", "+", "\n", "params", "[", "'h_lin'", "]", "*", "(", "Z", "-", "Y", ".", "mv", "(", "d_", ")", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "clamp", "(", "min", "=", "0", ")", "+", "\n", "0.5", "*", "params", "[", "'h_quad'", "]", "*", "(", "Z", "-", "Y", ".", "mv", "(", "d_", ")", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "clamp", "(", "min", "=", "0", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n", "opt", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "step_size", ")", "\n", "\n", "for", "i", "in", "range", "(", "1000", ")", ":", "\n", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "test_cost", "=", "batch", ".", "get_cost", "(", "100", ",", "i", ",", "model", ",", "X_test_t", ",", "Y_test_t", ",", "cost", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "train_cost", "=", "batch_train", "(", "150", ",", "i", ",", "X_train_t", ",", "Y_train_t", ",", "model", ",", "opt", ",", "cost", ")", "\n", "\n", "print", "(", "train_cost", ".", "item", "(", ")", ",", "test_cost", ".", "item", "(", ")", ")", "\n", "\n", "", "return", "test_cost", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.policy_net.batch_train": [[67, 99], ["batch.get_vars", "range", "X_train_t.size", "opt.zero_grad", "model", "cost_fn", "cost_fn.backward", "opt.step", "print", "X_train_t.size", "batch.get_vars", "X_train_t.size", "X_train_t.size", "cost_fn.item", "float", "X_train_t.size"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_vars", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_vars"], ["", "def", "batch_train", "(", "batch_sz", ",", "epoch", ",", "X_train_t", ",", "Y_train_t", ",", "model", ",", "opt", ",", "cost_fn", ")", ":", "\n", "    ", "train_cost", "=", "0", "\n", "batch_data_", ",", "batch_targets_", "=", "batch", ".", "get_vars", "(", "batch_sz", ",", "X_train_t", ",", "Y_train_t", ")", "\n", "size", "=", "batch_sz", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "X_train_t", ".", "size", "(", "0", ")", ",", "batch_sz", ")", ":", "\n", "\n", "# Deal with potentially incomplete (last) batch", "\n", "        ", "if", "i", "+", "batch_sz", ">", "X_train_t", ".", "size", "(", "0", ")", ":", "\n", "            ", "size", "=", "X_train_t", ".", "size", "(", "0", ")", "-", "i", "\n", "batch_data_", ",", "batch_targets_", "=", "batch", ".", "get_vars", "(", "size", ",", "X_train_t", ",", "Y_train_t", ")", "\n", "\n", "", "batch_data_", ".", "data", "[", ":", "]", "=", "X_train_t", "[", "i", ":", "i", "+", "size", "]", "\n", "batch_targets_", ".", "data", "[", ":", "]", "=", "Y_train_t", "[", "i", ":", "i", "+", "size", "]", "\n", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "preds", "=", "model", "(", "batch_data_", ")", "\n", "batch_cost", "=", "cost_fn", "(", "preds", ",", "batch_targets_", ")", "\n", "batch_cost", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "## Keep running average of loss", "\n", "train_cost", "+=", "(", "batch_cost", "-", "train_cost", ")", "*", "size", "/", "(", "i", "+", "size", ")", "\n", "\n", "print", "(", "'Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.4f}'", ".", "format", "(", "\n", "epoch", ",", "i", "+", "size", ",", "X_train_t", ".", "size", "(", "0", ")", ",", "\n", "float", "(", "i", "+", "size", ")", "/", "X_train_t", ".", "size", "(", "0", ")", "*", "100", ",", "\n", "batch_cost", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "return", "train_cost", "\n", "", ""]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.plot.plot_results": [[19, 81], ["os.path.join", "pandas.read_csv", "df_linear.groupby().mean", "df_linear.groupby().std", "df_nonlinear.groupby().mean", "df_nonlinear.groupby().std", "matplotlib.subplots", "fig.set_size_inches", "zip", "ax.set_xlabel", "ax.set_ylabel", "ax.set_ylim", "ax.grid", "zip", "ax.set_xlabel", "ax.set_ylabel", "ax.grid", "ax.set_xlabel", "ax.set_ylabel", "ax.legend", "fig.savefig", "open", "float", "df_linear.groupby", "df_linear.groupby", "df_nonlinear.groupby", "df_nonlinear.groupby", "means_linear[].plot", "means_linear[].plot", "means_nonlinear[].plot", "means_nonlinear[].plot", "f.readline().split", "seaborn.color_palette", "f.readline"], "function", ["None"], ["def", "plot_results", "(", "save_folder", ",", "true_model", ")", ":", "\n", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "save_folder", ",", "'inventory_results.csv'", ")", "\n", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "mle_true_score", "=", "float", "(", "f", ".", "readline", "(", ")", ".", "split", "(", "','", ")", "[", "1", "]", ")", "\n", "", "df", "=", "pd", ".", "read_csv", "(", "filename", ",", "index_col", "=", "0", ",", "skiprows", "=", "1", ",", "na_values", "=", "[", "'None'", "]", ",", "\n", "dtype", "=", "float", ")", "\n", "df", "[", "'mle_true'", "]", "=", "mle_true_score", "\n", "\n", "df_linear", "=", "df", "[", "[", "'mle_true'", ",", "'task-linear'", ",", "'mle-linear'", ",", "'policy-linear'", "]", "]", "\n", "df_nonlinear", "=", "df", "[", "[", "'mle_true'", ",", "'task-nonlinear'", ",", "'mle-nonlinear'", ",", "'policy-nonlinear'", "]", "]", "\n", "\n", "# Means and std deviations of losses for each model and training set size", "\n", "means_linear", "=", "df_linear", ".", "groupby", "(", "df_linear", ".", "index", ")", ".", "mean", "(", ")", "\n", "stds_linear", "=", "df_linear", ".", "groupby", "(", "df_linear", ".", "index", ")", ".", "std", "(", ")", "\n", "\n", "means_nonlinear", "=", "df_nonlinear", ".", "groupby", "(", "df_nonlinear", ".", "index", ")", ".", "mean", "(", ")", "\n", "stds_nonlinear", "=", "df_nonlinear", ".", "groupby", "(", "df_nonlinear", ".", "index", ")", ".", "std", "(", ")", "\n", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "2", ",", "sharey", "=", "True", ")", "\n", "fig", ".", "set_size_inches", "(", "8.5", ",", "2.5", ")", "\n", "\n", "styles", "=", "[", "'--'", ",", "'-'", ",", "':'", ",", "'-.'", "]", "\n", "colors", "=", "[", "'gray'", "]", "+", "[", "sns", ".", "color_palette", "(", "n_colors", "=", "8", ")", "[", "i", "]", "for", "i", "in", "[", "1", ",", "4", ",", "2", "]", "]", "\n", "\n", "# For size of error bars", "\n", "capsize", "=", "2", "\n", "capthick", "=", "1", "\n", "\n", "ax", "=", "axes", "[", "0", "]", "\n", "for", "col", ",", "style", ",", "color", "in", "zip", "(", "means_linear", ".", "columns", ",", "styles", ",", "colors", ")", ":", "\n", "        ", "if", "col", "==", "'mle_true'", ":", "\n", "            ", "means_linear", "[", "col", "]", ".", "plot", "(", "ax", "=", "ax", ",", "lw", "=", "2", ",", "style", "=", "style", ",", "color", "=", "color", ")", "\n", "", "else", ":", "\n", "            ", "means_linear", "[", "col", "]", ".", "plot", "(", "ax", "=", "ax", ",", "lw", "=", "2", ",", "fmt", "=", "style", ",", "color", "=", "color", ",", "yerr", "=", "stds_linear", ",", "\n", "capsize", "=", "capsize", ",", "capthick", "=", "capthick", ")", "\n", "", "", "ax", ".", "set_xlabel", "(", "'linear hypothesis'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Inventory Stock Cost'", ")", "\n", "ax", ".", "set_ylim", "(", "mle_true_score", "-", "5", ",", ")", "\n", "ax", ".", "grid", "(", "linestyle", "=", "':'", ",", "linewidth", "=", "'0.5'", ",", "color", "=", "'gray'", ")", "\n", "\n", "ax", "=", "axes", "[", "1", "]", "\n", "for", "col", ",", "style", ",", "color", "in", "zip", "(", "means_nonlinear", ".", "columns", ",", "styles", ",", "colors", ")", ":", "\n", "        ", "if", "col", "==", "'mle_true'", ":", "\n", "            ", "means_nonlinear", "[", "col", "]", ".", "plot", "(", "ax", "=", "ax", ",", "lw", "=", "2", ",", "style", "=", "style", ",", "color", "=", "color", ")", "\n", "", "else", ":", "\n", "            ", "means_nonlinear", "[", "col", "]", ".", "plot", "(", "ax", "=", "ax", ",", "lw", "=", "2", ",", "fmt", "=", "style", ",", "color", "=", "color", ",", "yerr", "=", "stds_nonlinear", ",", "\n", "capsize", "=", "capsize", ",", "capthick", "=", "capthick", ")", "\n", "", "", "ax", ".", "set_xlabel", "(", "'nonlinear hypothesis'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Inventory Stock Cost'", ")", "\n", "ax", ".", "grid", "(", "linestyle", "=", "':'", ",", "linewidth", "=", "'0.5'", ",", "color", "=", "'gray'", ")", "\n", "\n", "\n", "ax", ".", "set_xlabel", "(", "'Number of Samples'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Inventory Stock Cost'", ")", "\n", "\n", "legend", "=", "ax", ".", "legend", "(", "labels", "=", "[", "'True Params'", ",", "'Task-based (our method)'", ",", "'MLE'", ",", "'Policy Optimizer'", "]", ",", "\n", "loc", "=", "'center left'", ",", "bbox_to_anchor", "=", "(", "-", "0.2", ",", "-", "0.4", ")", ",", "\n", "shadow", "=", "False", ",", "ncol", "=", "5", ",", "fontsize", "=", "6.5", ",", "borderpad", "=", "0", ",", "frameon", "=", "False", ")", "\n", "\n", "fig", ".", "savefig", "(", "\"{}.pdf\"", ".", "format", "(", "filename", "[", ":", "-", "4", "]", ")", ",", "dpi", "=", "100", ",", "encoding", "=", "'pdf'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle_net.SolveNewsvendor.__init__": [[24, 47], ["torch.Module.__init__", "len", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.concatenate", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "mle_net.SolveNewsvendor.Q.cuda", "mle_net.SolveNewsvendor.p.cuda", "mle_net.SolveNewsvendor.G.cuda", "mle_net.SolveNewsvendor.h.cuda", "mle_net.SolveNewsvendor.one.cuda", "mle_net.SolveNewsvendor.eps_eye.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "numpy.zeros", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.SolveScheduling.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "eps", "=", "1e-2", ")", ":", "\n", "        ", "super", "(", "SolveNewsvendor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "k", "=", "len", "(", "params", "[", "'d'", "]", ")", "\n", "self", ".", "Q", "=", "torch", ".", "diag", "(", "torch", ".", "Tensor", "(", "\n", "[", "params", "[", "'c_quad'", "]", "]", "+", "[", "params", "[", "'b_quad'", "]", "]", "*", "k", "+", "[", "params", "[", "'h_quad'", "]", "]", "*", "k", ")", ")", "\n", "self", ".", "p", "=", "torch", ".", "Tensor", "(", "\n", "[", "params", "[", "'c_lin'", "]", "]", "+", "[", "params", "[", "'b_lin'", "]", "]", "*", "k", "+", "[", "params", "[", "'h_lin'", "]", "]", "*", "k", ")", "\n", "self", ".", "G", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "cat", "(", "[", "-", "torch", ".", "ones", "(", "k", ",", "1", ")", ",", "-", "torch", ".", "eye", "(", "k", ")", ",", "torch", ".", "zeros", "(", "k", ",", "k", ")", "]", ",", "1", ")", ",", "\n", "torch", ".", "cat", "(", "[", "torch", ".", "ones", "(", "k", ",", "1", ")", ",", "torch", ".", "zeros", "(", "k", ",", "k", ")", ",", "-", "torch", ".", "eye", "(", "k", ")", "]", ",", "1", ")", ",", "\n", "-", "torch", ".", "eye", "(", "1", "+", "2", "*", "k", ")", "]", ",", "0", ")", "\n", "self", ".", "h", "=", "torch", ".", "Tensor", "(", "\n", "np", ".", "concatenate", "(", "[", "-", "params", "[", "'d'", "]", ",", "params", "[", "'d'", "]", ",", "np", ".", "zeros", "(", "1", "+", "2", "*", "k", ")", "]", ")", ")", "\n", "self", ".", "one", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", "\n", "self", ".", "eps_eye", "=", "eps", "*", "torch", ".", "eye", "(", "1", "+", "2", "*", "k", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "if", "USE_GPU", ":", "\n", "            ", "self", ".", "Q", "=", "self", ".", "Q", ".", "cuda", "(", ")", "\n", "self", ".", "p", "=", "self", ".", "p", ".", "cuda", "(", ")", "\n", "self", ".", "G", "=", "self", ".", "G", ".", "cuda", "(", ")", "\n", "self", ".", "h", "=", "self", ".", "h", ".", "cuda", "(", ")", "\n", "self", ".", "one", "=", "self", ".", "one", ".", "cuda", "(", ")", "\n", "self", ".", "eps_eye", "=", "self", ".", "eps_eye", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle_net.SolveNewsvendor.forward": [[48, 67], ["y.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mle_net.SolveNewsvendor.Q.unsqueeze().expand_as().mul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mle_net.SolveNewsvendor.p.unsqueeze().expand_as().mul", "mle_net.SolveNewsvendor.G.unsqueeze().expand", "mle_net.SolveNewsvendor.h.unsqueeze().expand", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "mle_net.SolveNewsvendor.G.size", "mle_net.SolveNewsvendor.G.size", "mle_net.SolveNewsvendor.h.size", "e.cuda.cuda.cuda", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "mle_net.SolveNewsvendor.Q.unsqueeze().expand_as", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mle_net.SolveNewsvendor.p.unsqueeze().expand_as", "mle_net.SolveNewsvendor.G.unsqueeze", "mle_net.SolveNewsvendor.h.unsqueeze", "range", "qpth.qp.QPFunction", "mle_net.SolveNewsvendor.double", "mle_net.SolveNewsvendor.double", "mle_net.SolveNewsvendor.double", "mle_net.SolveNewsvendor.double", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "mle_net.SolveNewsvendor.Q.unsqueeze", "mle_net.SolveNewsvendor.p.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "y", ")", ":", "\n", "        ", "nBatch", ",", "k", "=", "y", ".", "size", "(", ")", "\n", "\n", "eps2", "=", "1e-8", "\n", "Q_scale", "=", "torch", ".", "cat", "(", "[", "torch", ".", "diag", "(", "torch", ".", "cat", "(", "\n", "[", "self", ".", "one", ",", "y", "[", "i", "]", "+", "eps2", ",", "y", "[", "i", "]", "+", "eps2", "]", ")", ")", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "range", "(", "nBatch", ")", "]", ",", "0", ")", "\n", "Q", "=", "self", ".", "Q", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "Q_scale", ")", ".", "mul", "(", "Q_scale", ")", "\n", "p_scale", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones", "(", "nBatch", ",", "1", ",", "device", "=", "DEVICE", ")", ",", "y", ",", "y", "]", ",", "1", ")", "\n", "p", "=", "self", ".", "p", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "p_scale", ")", ".", "mul", "(", "p_scale", ")", "\n", "G", "=", "self", ".", "G", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "nBatch", ",", "self", ".", "G", ".", "size", "(", "0", ")", ",", "self", ".", "G", ".", "size", "(", "1", ")", ")", "\n", "h", "=", "self", ".", "h", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "nBatch", ",", "self", ".", "h", ".", "size", "(", "0", ")", ")", "\n", "e", "=", "torch", ".", "DoubleTensor", "(", ")", "\n", "if", "USE_GPU", ":", "\n", "            ", "e", "=", "e", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "QPFunction", "(", "verbose", "=", "False", ")", "(", "Q", ".", "double", "(", ")", ",", "p", ".", "double", "(", ")", ",", "G", ".", "double", "(", ")", ",", "h", ".", "double", "(", ")", ",", "e", ",", "e", ")", ".", "float", "(", ")", "\n", "\n", "return", "out", "[", ":", ",", ":", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle_net.get_model": [[69, 87], ["functools.reduce", "torch.Sequential", "torch.Sequential", "model.cuda.cuda", "torch.Linear", "torch.Softmax", "torch.Linear", "torch.Softmax", "torch.Linear", "torch.BatchNorm1d", "torch.ReLU", "torch.Dropout", "zip"], "function", ["None"], ["", "", "def", "get_model", "(", "X_train", ",", "Y_train", ",", "X_test", ",", "Y_test", ",", "params", ",", "is_nonlinear", ")", ":", "\n", "    ", "if", "is_nonlinear", ":", "\n", "# Non-linear model, use ADAM step size 1e-3", "\n", "        ", "layer_sizes", "=", "[", "X_train", ".", "shape", "[", "1", "]", ",", "200", ",", "200", ",", "Y_train", ".", "shape", "[", "1", "]", "]", "\n", "layers", "=", "reduce", "(", "operator", ".", "add", ",", "[", "[", "nn", ".", "Linear", "(", "a", ",", "b", ")", ",", "nn", ".", "BatchNorm1d", "(", "b", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "]", "\n", "for", "a", ",", "b", "in", "zip", "(", "layer_sizes", "[", "0", ":", "-", "2", "]", ",", "layer_sizes", "[", "1", ":", "-", "1", "]", ")", "]", ")", "\n", "layers", "+=", "[", "nn", ".", "Linear", "(", "layer_sizes", "[", "-", "2", "]", ",", "layer_sizes", "[", "-", "1", "]", ")", ",", "nn", ".", "Softmax", "(", ")", "]", "\n", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "else", ":", "\n", "# Linear model, use ADAM step size 1e-2", "\n", "        ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "X_train", ".", "shape", "[", "1", "]", ",", "Y_train", ".", "shape", "[", "1", "]", ")", ",", "\n", "nn", ".", "Softmax", "(", ")", ")", "\n", "\n", "", "if", "USE_GPU", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle_net.run_mle_net": [[89, 197], ["numpy.random.permutation", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "[].detach", "[].detach", "[].detach", "torch.tensor", "torch.tensor", "torch.tensor", "mle_net.SolveNewsvendor", "torch.Adam", "range", "hold_costs.index", "mle_net.get_model", "best_model.cuda.load_state_dict", "batch.get_cost", "batch.get_cost.item", "newsvendor_solve.cuda.cuda", "cost", "functools.reduce", "torch.Sequential", "torch.Sequential", "model.cuda.cuda", "model.cuda.parameters", "batch.get_cost_nll", "batch.get_cost_nll", "model.cuda.train", "mle_net.batch_train", "print", "test_costs.append", "hold_costs.append", "model_states.append", "min", "best_model.cuda.cuda", "int", "int", "newsvendor_solve.cuda.", "torch.Linear", "torch.Softmax", "torch.Linear", "torch.Softmax", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "batch_train.item", "batch.get_cost_nll.item", "batch.get_cost_nll.item", "batch.get_cost_nll.item", "batch.get_cost_nll.item", "model.cuda.state_dict().copy", "hold_costs.index", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "min", "max", "batch.get_cost_nll.item", "model.cuda.eval", "mle_net.get_model", "best_model.cuda.load_state_dict", "batch.get_cost", "batch.get_cost.item", "torch.Linear", "torch.BatchNorm1d", "torch.ReLU", "torch.Dropout", "zip", "model.cuda.state_dict", "best_model.cuda.cuda", "Y.mv().view", "Y.mv().view", "Y.mv().view", "Y.mv().view", "Y.mv", "Y.mv", "Y.mv", "Y.mv"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle_net.get_model", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_cost", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_cost_nll", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_cost_nll", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle_net.batch_train", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle_net.get_model", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_cost"], ["", "def", "run_mle_net", "(", "X", ",", "Y", ",", "X_test", ",", "Y_test", ",", "params", ",", "is_nonlinear", "=", "False", ")", ":", "\n", "\n", "# Training/validation split", "\n", "    ", "th_frac", "=", "0.8", "\n", "inds", "=", "np", ".", "random", ".", "permutation", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "train_inds", "=", "inds", "[", ":", "int", "(", "X", ".", "shape", "[", "0", "]", "*", "th_frac", ")", "]", "\n", "hold_inds", "=", "inds", "[", "int", "(", "X", ".", "shape", "[", "0", "]", "*", "th_frac", ")", ":", "]", "\n", "X_train", ",", "X_hold", "=", "X", "[", "train_inds", ",", ":", "]", ",", "X", "[", "hold_inds", ",", ":", "]", "\n", "Y_train", ",", "Y_hold", "=", "Y", "[", "train_inds", ",", ":", "]", ",", "Y", "[", "hold_inds", ",", ":", "]", "\n", "\n", "X_train_t", "=", "torch", ".", "tensor", "(", "X_train", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "DEVICE", ")", "\n", "Y_train_t", "=", "torch", ".", "tensor", "(", "Y_train", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "DEVICE", ")", "\n", "X_hold_t", "=", "torch", ".", "tensor", "(", "X_hold", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "DEVICE", ")", "\n", "Y_hold_t", "=", "torch", ".", "tensor", "(", "Y_hold", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "DEVICE", ")", "\n", "X_test_t", "=", "torch", ".", "tensor", "(", "X_test", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "DEVICE", ")", "\n", "Y_test_t", "=", "torch", ".", "tensor", "(", "Y_test", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "DEVICE", ")", "\n", "\n", "Y_train_int_t", "=", "torch", ".", "where", "(", "Y_train_t", ")", "[", "1", "]", ".", "detach", "(", ")", "\n", "Y_hold_int_t", "=", "torch", ".", "where", "(", "Y_hold_t", ")", "[", "1", "]", ".", "detach", "(", ")", "\n", "Y_test_int_t", "=", "torch", ".", "where", "(", "Y_test_t", ")", "[", "1", "]", ".", "detach", "(", ")", "\n", "\n", "d_", "=", "torch", ".", "tensor", "(", "params", "[", "'d'", "]", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "DEVICE", ")", "\n", "\n", "# Expected inventory cost and solver for newsvendor scheduling problem", "\n", "cost", "=", "lambda", "Z", ",", "Y", ":", "(", "params", "[", "'c_lin'", "]", "*", "Z", "+", "0.5", "*", "params", "[", "'c_quad'", "]", "*", "(", "Z", "**", "2", ")", "+", "\n", "params", "[", "'b_lin'", "]", "*", "(", "Y", ".", "mv", "(", "d_", ")", ".", "view", "(", "-", "1", ",", "1", ")", "-", "Z", ")", ".", "clamp", "(", "min", "=", "0", ")", "+", "\n", "0.5", "*", "params", "[", "'b_quad'", "]", "*", "(", "Y", ".", "mv", "(", "d_", ")", ".", "view", "(", "-", "1", ",", "1", ")", "-", "Z", ")", ".", "clamp", "(", "min", "=", "0", ")", "**", "2", "+", "\n", "params", "[", "'h_lin'", "]", "*", "(", "Z", "-", "Y", ".", "mv", "(", "d_", ")", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "clamp", "(", "min", "=", "0", ")", "+", "\n", "0.5", "*", "params", "[", "'h_quad'", "]", "*", "(", "Z", "-", "Y", ".", "mv", "(", "d_", ")", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "clamp", "(", "min", "=", "0", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "newsvendor_solve", "=", "SolveNewsvendor", "(", "params", ")", "\n", "if", "USE_GPU", ":", "\n", "        ", "newsvendor_solve", "=", "newsvendor_solve", ".", "cuda", "(", ")", "\n", "", "cost_news_fn", "=", "lambda", "x", ",", "y", ":", "cost", "(", "newsvendor_solve", "(", "x", ")", ",", "y", ")", "\n", "\n", "if", "is_nonlinear", ":", "\n", "# Non-linear model, use ADAM step size 1e-3", "\n", "        ", "layer_sizes", "=", "[", "X_train", ".", "shape", "[", "1", "]", ",", "200", ",", "200", ",", "Y_train", ".", "shape", "[", "1", "]", "]", "\n", "layers", "=", "reduce", "(", "operator", ".", "add", ",", "[", "[", "nn", ".", "Linear", "(", "a", ",", "b", ")", ",", "nn", ".", "BatchNorm1d", "(", "b", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "]", "\n", "for", "a", ",", "b", "in", "zip", "(", "layer_sizes", "[", "0", ":", "-", "2", "]", ",", "layer_sizes", "[", "1", ":", "-", "1", "]", ")", "]", ")", "\n", "layers", "+=", "[", "nn", ".", "Linear", "(", "layer_sizes", "[", "-", "2", "]", ",", "layer_sizes", "[", "-", "1", "]", ")", ",", "nn", ".", "Softmax", "(", ")", "]", "\n", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "step_size", "=", "1e-3", "\n", "", "else", ":", "\n", "# Linear model, use ADAM step size 1e-2", "\n", "        ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "X_train", ".", "shape", "[", "1", "]", ",", "Y_train", ".", "shape", "[", "1", "]", ")", ",", "\n", "nn", ".", "Softmax", "(", ")", "\n", ")", "\n", "step_size", "=", "1e-2", "\n", "\n", "", "if", "USE_GPU", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "", "opt", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "step_size", ")", "\n", "\n", "# For early stopping", "\n", "hold_costs", ",", "test_costs", "=", "[", "]", ",", "[", "]", "\n", "model_states", "=", "[", "]", "\n", "num_stop_rounds", "=", "20", "\n", "\n", "for", "i", "in", "range", "(", "1000", ")", ":", "\n", "# model.eval()", "\n", "\n", "        ", "test_cost", "=", "batch", ".", "get_cost_nll", "(", "\n", "100", ",", "i", ",", "model", ",", "X_test_t", ",", "Y_test_int_t", ",", "nn", ".", "NLLLoss", "(", ")", ")", "\n", "\n", "hold_cost", "=", "batch", ".", "get_cost_nll", "(", "\n", "100", ",", "i", ",", "model", ",", "X_hold_t", ",", "Y_hold_int_t", ",", "nn", ".", "NLLLoss", "(", ")", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "train_cost", "=", "batch_train", "(", "150", ",", "i", ",", "X_train_t", ",", "Y_train_t", ",", "\n", "Y_train_int_t", ",", "model", ",", "nn", ".", "NLLLoss", "(", ")", ",", "opt", ")", "\n", "\n", "\n", "print", "(", "i", ",", "train_cost", ".", "item", "(", ")", ",", "test_cost", ".", "item", "(", ")", ",", "hold_cost", ".", "item", "(", ")", ")", "\n", "\n", "# Early stopping", "\n", "# See https://github.com/locuslab/e2e-model-learning-staging/commit/d183c65d0cd53d611a77a4508da65c25cf88c93d", "\n", "test_costs", ".", "append", "(", "test_cost", ".", "item", "(", ")", ")", "\n", "hold_costs", ".", "append", "(", "hold_cost", ".", "item", "(", ")", ")", "\n", "model_states", ".", "append", "(", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", ")", "\n", "if", "i", ">", "0", "and", "i", "%", "num_stop_rounds", "==", "0", ":", "\n", "            ", "idx", "=", "hold_costs", ".", "index", "(", "min", "(", "hold_costs", ")", ")", "\n", "# Stop if current cost is worst in num_stop_rounds rounds", "\n", "if", "max", "(", "hold_costs", ")", "==", "hold_cost", ".", "item", "(", ")", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "best_model", "=", "get_model", "(", "X_train", ",", "Y_train", ",", "X_test", ",", "Y_test", ",", "params", ",", "is_nonlinear", ")", "\n", "best_model", ".", "load_state_dict", "(", "model_states", "[", "idx", "]", ")", "\n", "if", "USE_GPU", ":", "\n", "                    ", "best_model", "=", "best_model", ".", "cuda", "(", ")", "\n", "", "test_cost_news", "=", "batch", ".", "get_cost", "(", "100", ",", "i", ",", "best_model", ",", "X_test_t", ",", "Y_test_t", ",", "cost_news_fn", ")", "\n", "return", "test_cost_news", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "# Keep only \"best\" round", "\n", "                ", "hold_costs", "=", "[", "hold_costs", "[", "idx", "]", "]", "\n", "test_costs", "=", "[", "test_costs", "[", "idx", "]", "]", "\n", "model_states", "=", "[", "model_states", "[", "idx", "]", "]", "\n", "\n", "# # In case of no early stopping, return best run so far", "\n", "", "", "", "idx", "=", "hold_costs", ".", "index", "(", "min", "(", "hold_costs", ")", ")", "\n", "best_model", "=", "get_model", "(", "X", ",", "Y", ",", "X_test", ",", "Y_test", ",", "params", ",", "is_nonlinear", ")", "\n", "best_model", ".", "load_state_dict", "(", "model_states", "[", "idx", "]", ")", "\n", "if", "USE_GPU", ":", "\n", "        ", "best_model", "=", "best_model", ".", "cuda", "(", ")", "\n", "", "test_cost_news", "=", "batch", ".", "get_cost", "(", "100", ",", "i", ",", "best_model", ",", "X_test_t", ",", "Y_test_t", ",", "cost_news_fn", ")", "\n", "return", "test_cost_news", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.mle_net.batch_train": [[198, 241], ["batch.get_vars", "batch.get_vars_scalar_out", "range", "X_train_t.size", "opt.zero_grad", "model", "nll", "nll.backward", "opt.step", "print", "X_train_t.size", "batch.get_vars", "batch.get_vars_scalar_out", "X_train_t.size", "X_train_t.size", "nll.item", "float", "X_train_t.size"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_vars", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_vars_scalar_out", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_vars", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.newsvendor.batch.get_vars_scalar_out"], ["", "def", "batch_train", "(", "batch_sz", ",", "epoch", ",", "X_train_t", ",", "Y_train_t", ",", "Y_train_int_t", ",", "\n", "model", ",", "nll", ",", "opt", ")", ":", "\n", "\n", "    ", "train_cost_agg", "=", "0", "\n", "train_nll_agg", "=", "0", "\n", "\n", "batch_data_", ",", "batch_targets_", "=", "batch", ".", "get_vars", "(", "batch_sz", ",", "X_train_t", ",", "Y_train_t", ")", "\n", "_", ",", "batch_targets_int_", "=", "batch", ".", "get_vars_scalar_out", "(", "batch_sz", ",", "X_train_t", ",", "Y_train_int_t", ")", "\n", "size", "=", "batch_sz", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "X_train_t", ".", "size", "(", "0", ")", ",", "batch_sz", ")", ":", "\n", "\n", "# Deal with potentially incomplete (last) batch", "\n", "        ", "if", "i", "+", "batch_sz", ">", "X_train_t", ".", "size", "(", "0", ")", ":", "\n", "            ", "size", "=", "X_train_t", ".", "size", "(", "0", ")", "-", "i", "\n", "batch_data_", ",", "batch_targets_", "=", "batch", ".", "get_vars", "(", "\n", "size", ",", "X_train_t", ",", "Y_train_t", ")", "\n", "_", ",", "batch_targets_int_", "=", "batch", ".", "get_vars_scalar_out", "(", "\n", "size", ",", "X_train_t", ",", "Y_train_int_t", ")", "\n", "\n", "", "batch_data_", ".", "data", "[", ":", "]", "=", "X_train_t", "[", "i", ":", "i", "+", "size", "]", "\n", "batch_targets_", ".", "data", "[", ":", "]", "=", "Y_train_t", "[", "i", ":", "i", "+", "size", "]", "\n", "batch_targets_int_", ".", "data", "[", ":", "]", "=", "Y_train_int_t", "[", "i", ":", "i", "+", "size", "]", "\n", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "preds", "=", "model", "(", "batch_data_", ")", "\n", "train_nll", "=", "nll", "(", "preds", ",", "batch_targets_int_", ")", "\n", "\n", "(", "train_nll", ")", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "# Keep running average of losses", "\n", "train_nll_agg", "+=", "(", "train_nll", "-", "train_nll_agg", ")", "*", "batch_sz", "/", "(", "i", "+", "batch_sz", ")", "\n", "\n", "print", "(", "'Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.4f}'", ".", "format", "(", "\n", "epoch", ",", "i", "+", "batch_sz", ",", "X_train_t", ".", "size", "(", "0", ")", ",", "\n", "float", "(", "i", "+", "batch_sz", ")", "/", "X_train_t", ".", "size", "(", "0", ")", "*", "100", ",", "\n", "train_nll", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "return", "train_nll_agg", "\n", "", ""]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.calc_stats.load_results": [[5, 35], ["pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "df_rmse.append.append", "pandas.DataFrame", "df_task.append.append", "open", "rmse_results.append", "pandas.DataFrame", "open", "task_results.append", "pandas.DataFrame", "os.path.join", "numpy.load", "os.path.join", "numpy.load"], "function", ["None"], ["def", "load_results", "(", "load_folders", ")", ":", "\n", "    ", "rmse_loss_files", "=", "[", "'rmse_net_train_rmse'", ",", "'rmse_net_hold_rmse'", ",", "'rmse_net_test_rmse'", ",", "\n", "'task_net_train_rmse'", ",", "'task_net_hold_rmse'", ",", "'task_net_test_rmse'", "]", "\n", "task_loss_files", "=", "[", "'rmse_net_train_task'", ",", "'rmse_net_hold_task'", ",", "'rmse_net_test_task'", ",", "\n", "'task_net_train_task'", ",", "'task_net_hold_task'", ",", "'task_net_test_task'", "]", "\n", "col_names", "=", "[", "'RMSE Net (train)'", ",", "'RMSE Net (hold)'", ",", "'RMSE Net (test)'", ",", "\n", "'Task Net (train)'", ",", "'Task Net (hold)'", ",", "'Task Net (test)'", "]", "\n", "\n", "df_rmse", "=", "pd", ".", "DataFrame", "(", ")", "\n", "df_task", "=", "pd", ".", "DataFrame", "(", ")", "\n", "for", "folder", "in", "load_folders", ":", "\n", "        ", "rmse_results", ",", "task_results", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "filename", "in", "rmse_loss_files", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "rmse_results", ".", "append", "(", "np", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "pd", ".", "DataFrame", "(", "rmse_results", ")", ".", "T", ")", "\n", "df", ".", "columns", "=", "col_names", "\n", "df_rmse", "=", "df_rmse", ".", "append", "(", "df", ")", "\n", "\n", "for", "filename", "in", "task_loss_files", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "task_results", ".", "append", "(", "np", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "pd", ".", "DataFrame", "(", "task_results", ")", ".", "T", ")", "\n", "df", ".", "columns", "=", "col_names", "\n", "df_task", "=", "df_task", ".", "append", "(", "df", ")", "\n", "\n", "", "return", "df_rmse", ",", "df_task", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.calc_stats.get_means_stds": [[36, 40], ["df.reset_index", "df2.groupby().sum.groupby().sum", "df2.groupby().sum.mean", "df2.groupby().sum.std", "df2.groupby().sum.groupby"], "function", ["None"], ["", "def", "get_means_stds", "(", "df", ")", ":", "\n", "    ", "df2", "=", "df", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "df2", "=", "df2", ".", "groupby", "(", "df2", ".", "index", "//", "24", ")", ".", "sum", "(", ")", "# aggregate daily data", "\n", "return", "df2", ".", "mean", "(", ")", ",", "df2", ".", "std", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.calc_stats.calc_stats": [[41, 50], ["calc_stats.load_results", "calc_stats.get_means_stds", "calc_stats.get_means_stds", "pandas.concat", "pd.concat.to_csv", "os.path.join"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.plot.load_results", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.plot.get_means_stds", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.plot.get_means_stds"], ["", "def", "calc_stats", "(", "load_folders", ",", "save_folder", ")", ":", "\n", "    ", "df_rmse", ",", "df_task", "=", "load_results", "(", "load_folders", ")", "\n", "rmse_mean", ",", "rmse_stds", "=", "get_means_stds", "(", "df_rmse", ")", "\n", "task_mean", ",", "task_stds", "=", "get_means_stds", "(", "df_task", ")", "\n", "\n", "agg_stats", "=", "pd", ".", "concat", "(", "[", "rmse_mean", ",", "rmse_stds", ",", "task_mean", ",", "task_stds", "]", ",", "axis", "=", "1", ")", "\n", "agg_stats", ".", "columns", "=", "[", "'rmse (mean)'", ",", "'rmse (std)'", ",", "'task_loss (mean)'", ",", "'task_loss (std)'", "]", "\n", "\n", "agg_stats", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "save_folder", ",", "'results.csv'", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.nets.task_loss": [[16, 27], ["sched[].float", "sched[].float", "sched[].float", "costs.mean"], "function", ["None"], ["def", "task_loss", "(", "sched", ",", "Y_actual", ",", "params", ")", ":", "\n", "    ", "T", "=", "params", "[", "'T'", "]", "\n", "z_in", "=", "sched", "[", ":", ",", ":", "T", "]", ".", "float", "(", ")", "\n", "z_out", "=", "sched", "[", ":", ",", "T", ":", "2", "*", "T", "]", ".", "float", "(", ")", "\n", "x", "=", "sched", "[", ":", ",", "2", "*", "T", ":", "]", ".", "float", "(", ")", "\n", "costs", "=", "(", "\n", "(", "z_in", "-", "z_out", ")", "*", "Y_actual", ")", "+", "(", "params", "[", "'lambda'", "]", "*", "(", "x", "-", "params", "[", "'B'", "]", "/", "2", ")", "**", "2", ")", "+", "(", "params", "[", "'epsilon'", "]", "*", "z_in", "**", "2", ")", "+", "(", "params", "[", "'epsilon'", "]", "*", "z_out", "**", "2", ")", "\n", "return", "costs", ".", "mean", "(", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.nets.rmse_loss": [[29, 31], ["None"], "function", ["None"], ["", "def", "rmse_loss", "(", "mu_pred", ",", "Y_actual", ")", ":", "\n", "    ", "return", "(", "(", "mu_pred", "-", "Y_actual", ")", "**", "2", ")", ".", "mean", "(", "dim", "=", "0", ")", ".", "sqrt", "(", ")", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.nets.run_rmse_net": [[33, 115], ["torch.Adam", "range", "model.parameters", "model.train", "enumerate", "model.eval", "enumerate", "model.eval", "enumerate", "print", "hold_costs.append", "model_states.append", "optim.Adam.zero_grad", "X_train_.size", "train_loss.backward", "optim.Adam.step", "X_test_.size", "X_hold_.size", "model.state_dict().copy", "hold_costs.index", "torch.MSELoss", "model", "train_loss.item", "X_train_.size", "torch.MSELoss", "model", "test_loss.item", "X_test_.size", "torch.MSELoss", "model", "hold_loss.item", "X_hold_.size", "min", "model.eval", "model_classes.Net", "best_model.cuda.load_state_dict", "X_train.cuda", "Y_train.cuda", "X_test.cuda", "Y_test.cuda", "X_hold.cuda", "Y_hold.cuda", "model.state_dict", "best_model.cuda.cuda"], "function", ["None"], ["", "def", "run_rmse_net", "(", "model", ",", "loaders", ",", "params", ",", "tensors_task", ")", ":", "\n", "    ", "opt", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ")", "\n", "\n", "# For early stopping", "\n", "prev_min", "=", "0", "\n", "hold_costs", "=", "[", "]", "\n", "model_states", "=", "[", "]", "\n", "num_stop_rounds", "=", "20", "\n", "\n", "for", "i", "in", "range", "(", "1000", ")", ":", "\n", "\n", "# train", "\n", "        ", "model", ".", "train", "(", ")", "\n", "total_train_loss", "=", "0", "\n", "m_train", "=", "0", "\n", "\n", "for", "(", "batch", ",", "(", "X_train", ",", "Y_train", ")", ")", "in", "enumerate", "(", "loaders", "[", "'train'", "]", ")", ":", "\n", "            ", "if", "USE_GPU", ":", "\n", "                ", "X_train_", ",", "Y_train_", "=", "X_train", ".", "cuda", "(", ")", ",", "Y_train", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "X_train_", ",", "Y_train_", "=", "X_train", ",", "Y_train", "\n", "\n", "", "opt", ".", "zero_grad", "(", ")", "\n", "train_loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "model", "(", "X_train_", ")", ",", "Y_train_", ")", "\n", "total_train_loss", "+=", "train_loss", ".", "item", "(", ")", "*", "X_train_", ".", "size", "(", "0", ")", "\n", "m_train", "+=", "X_train_", ".", "size", "(", "0", ")", "\n", "train_loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "\n", "# evaluate on test", "\n", "", "model", ".", "eval", "(", ")", "\n", "total_test_loss", "=", "0", "\n", "m_test", "=", "0", "\n", "\n", "for", "(", "batch", ",", "(", "X_test", ",", "Y_test", ")", ")", "in", "enumerate", "(", "loaders", "[", "'test'", "]", ")", ":", "\n", "            ", "if", "USE_GPU", ":", "\n", "                ", "X_test_", ",", "Y_test_", "=", "X_test", ".", "cuda", "(", ")", ",", "Y_test", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "X_test_", ",", "Y_test_", "=", "X_test", ",", "Y_test", "\n", "\n", "", "test_loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "model", "(", "X_test_", ")", ",", "Y_test_", ")", "\n", "total_test_loss", "+=", "test_loss", ".", "item", "(", ")", "*", "X_test_", ".", "size", "(", "0", ")", "\n", "m_test", "+=", "X_test_", ".", "size", "(", "0", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "total_hold_loss", "=", "0", "\n", "m_hold", "=", "0", "\n", "for", "(", "batch", ",", "(", "X_hold", ",", "Y_hold", ")", ")", "in", "enumerate", "(", "loaders", "[", "'hold'", "]", ")", ":", "\n", "            ", "if", "USE_GPU", ":", "\n", "                ", "X_hold_", ",", "Y_hold_", "=", "X_hold", ".", "cuda", "(", ")", ",", "Y_hold", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "X_hold_", ",", "Y_hold_", "=", "X_hold", ",", "Y_hold", "\n", "\n", "", "hold_loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "model", "(", "X_hold_", ")", ",", "Y_hold_", ")", "\n", "total_hold_loss", "+=", "hold_loss", ".", "item", "(", ")", "*", "X_hold_", ".", "size", "(", "0", ")", "\n", "m_hold", "+=", "X_hold_", ".", "size", "(", "0", ")", "\n", "\n", "", "print", "(", "i", ",", "total_train_loss", "/", "m_train", ",", "total_test_loss", "/", "m_test", ",", "total_hold_loss", "/", "m_hold", ")", "\n", "\n", "\n", "# Early stopping", "\n", "hold_costs", ".", "append", "(", "total_hold_loss", ")", "\n", "model_states", ".", "append", "(", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", ")", "\n", "if", "i", ">", "0", "and", "i", "%", "num_stop_rounds", "==", "0", ":", "\n", "            ", "idx", "=", "hold_costs", ".", "index", "(", "min", "(", "hold_costs", ")", ")", "\n", "if", "prev_min", "==", "hold_costs", "[", "idx", "]", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "\n", "best_model", "=", "model_classes", ".", "Net", "(", "\n", "tensors_task", "[", "'X_train'", "]", ",", "tensors_task", "[", "'Y_train'", "]", ",", "[", "200", ",", "200", "]", ",", "params", "[", "'T'", "]", ")", "\n", "best_model", ".", "load_state_dict", "(", "model_states", "[", "idx", "]", ")", "\n", "if", "USE_GPU", ":", "\n", "                    ", "best_model", "=", "best_model", ".", "cuda", "(", ")", "\n", "\n", "", "return", "best_model", "\n", "", "else", ":", "\n", "                ", "prev_min", "=", "hold_costs", "[", "idx", "]", "\n", "hold_costs", "=", "[", "prev_min", "]", "\n", "model_states", "=", "[", "model_states", "[", "idx", "]", "]", "\n", "\n", "", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.nets.run_task_net": [[117, 190], ["torch.Adam", "model_classes.ScheduleBattery", "range", "model.parameters", "model.train", "enumerate", "model.eval", "enumerate", "model.eval", "enumerate", "print", "hold_costs.append", "model_states.append", "optim.Adam.zero_grad", "model", "task_loss().sum", "X_train.size", "task_loss().sum.backward", "model", "task_loss().sum", "X_test.size", "model", "task_loss().sum", "X_hold.size", "model.state_dict().copy", "hold_costs.index", "task_loss().sum.item", "X_train.size", "task_loss().sum.item", "X_test.size", "task_loss().sum.item", "X_hold.size", "min", "model.eval", "model_classes.Net", "best_model.cuda.load_state_dict", "X_train.cuda", "Y_train.cuda", "nets.task_loss", "X_test.cuda", "Y_test.cuda", "nets.task_loss", "X_hold.cuda", "Y_hold.cuda", "nets.task_loss", "model.state_dict", "best_model.cuda.cuda", "model_classes.ScheduleBattery.", "model_classes.ScheduleBattery.", "model_classes.ScheduleBattery."], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.task_loss", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.task_loss", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.task_loss"], ["", "def", "run_task_net", "(", "model", ",", "loader", ",", "params", ",", "args", ",", "tensors_task", ")", ":", "\n", "    ", "opt", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-4", ")", "\n", "solver", "=", "model_classes", ".", "ScheduleBattery", "(", "params", ")", "\n", "\n", "# For early stopping", "\n", "prev_min", "=", "0", "\n", "hold_costs", "=", "[", "]", "\n", "model_states", "=", "[", "]", "\n", "num_stop_rounds", "=", "20", "\n", "\n", "for", "i", "in", "range", "(", "1000", ")", ":", "\n", "\n", "# train", "\n", "        ", "model", ".", "train", "(", ")", "\n", "total_train_loss", "=", "0", "\n", "m_train", "=", "0", "\n", "for", "(", "batch", ",", "(", "X_train", ",", "Y_train", ")", ")", "in", "enumerate", "(", "loader", "[", "'train'", "]", ")", ":", "\n", "            ", "opt", ".", "zero_grad", "(", ")", "\n", "if", "USE_GPU", ":", "\n", "                ", "X_train", ",", "Y_train", "=", "X_train", ".", "cuda", "(", ")", ",", "Y_train", ".", "cuda", "(", ")", "\n", "", "preds_train", "=", "model", "(", "X_train", ")", "\n", "train_loss", "=", "task_loss", "(", "solver", "(", "preds_train", ")", ",", "Y_train", ",", "params", ")", ".", "sum", "(", ")", "\n", "total_train_loss", "+=", "train_loss", ".", "item", "(", ")", "*", "X_train", ".", "size", "(", "0", ")", "\n", "m_train", "+=", "X_train", ".", "size", "(", "0", ")", "\n", "train_loss", ".", "backward", "(", ")", "\n", "\n", "# test", "\n", "", "model", ".", "eval", "(", ")", "\n", "total_test_loss", "=", "0", "\n", "m_test", "=", "0", "\n", "for", "(", "batch", ",", "(", "X_test", ",", "Y_test", ")", ")", "in", "enumerate", "(", "loader", "[", "'test'", "]", ")", ":", "\n", "            ", "if", "USE_GPU", ":", "\n", "                ", "X_test", ",", "Y_test", "=", "X_test", ".", "cuda", "(", ")", ",", "Y_test", ".", "cuda", "(", ")", "\n", "", "preds_test", "=", "model", "(", "X_test", ")", "\n", "test_loss", "=", "task_loss", "(", "solver", "(", "preds_test", ")", ",", "Y_test", ",", "params", ")", ".", "sum", "(", ")", "\n", "total_test_loss", "+=", "test_loss", ".", "item", "(", ")", "*", "X_test", ".", "size", "(", "0", ")", "\n", "m_test", "+=", "X_test", ".", "size", "(", "0", ")", "\n", "\n", "# hold", "\n", "", "model", ".", "eval", "(", ")", "\n", "total_hold_loss", "=", "0", "\n", "m_hold", "=", "0", "\n", "for", "(", "batch", ",", "(", "X_hold", ",", "Y_hold", ")", ")", "in", "enumerate", "(", "loader", "[", "'hold'", "]", ")", ":", "\n", "            ", "if", "USE_GPU", ":", "\n", "                ", "X_hold", ",", "Y_hold", "=", "X_hold", ".", "cuda", "(", ")", ",", "Y_hold", ".", "cuda", "(", ")", "\n", "", "preds_hold", "=", "model", "(", "X_hold", ")", "\n", "hold_loss", "=", "task_loss", "(", "solver", "(", "preds_hold", ")", ",", "Y_hold", ",", "params", ")", ".", "sum", "(", ")", "\n", "total_hold_loss", "+=", "hold_loss", ".", "item", "(", ")", "*", "X_hold", ".", "size", "(", "0", ")", "\n", "m_hold", "+=", "X_hold", ".", "size", "(", "0", ")", "\n", "\n", "", "print", "(", "i", ",", "total_train_loss", "/", "m_train", ",", "total_test_loss", "/", "m_test", ",", "total_hold_loss", "/", "m_hold", ")", "\n", "\n", "# Early stopping", "\n", "hold_costs", ".", "append", "(", "total_hold_loss", ")", "\n", "model_states", ".", "append", "(", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", ")", "\n", "if", "i", ">", "0", "and", "i", "%", "num_stop_rounds", "==", "0", ":", "\n", "            ", "idx", "=", "hold_costs", ".", "index", "(", "min", "(", "hold_costs", ")", ")", "\n", "if", "prev_min", "==", "hold_costs", "[", "idx", "]", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "\n", "best_model", "=", "model_classes", ".", "Net", "(", "\n", "tensors_task", "[", "'X_train'", "]", ",", "tensors_task", "[", "'Y_train'", "]", ",", "[", "200", ",", "200", "]", ",", "params", "[", "'T'", "]", ")", "\n", "best_model", ".", "load_state_dict", "(", "model_states", "[", "idx", "]", ")", "\n", "if", "USE_GPU", ":", "\n", "                    ", "best_model", "=", "best_model", ".", "cuda", "(", ")", "\n", "\n", "", "return", "best_model", "\n", "", "else", ":", "\n", "                ", "prev_min", "=", "hold_costs", "[", "idx", "]", "\n", "hold_costs", "=", "[", "prev_min", "]", "\n", "model_states", "=", "[", "model_states", "[", "idx", "]", "]", "\n", "\n", "", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.nets.eval_for_loaders": [[192, 228], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model_classes.ScheduleBattery", "enumerate", "torch.save", "torch.save", "torch.save", "solver.cuda.cuda", "model", "torch.cat", "torch.cat", "torch.cat", "solver.cuda.", "X.size", "open", "numpy.save", "open", "numpy.save", "open", "numpy.save", "model.state_dict", "os.path.join", "nets.rmse_loss", "X.size", "X.size", "os.path.join", "os.path.join", "os.path.join", "torch.cat.cpu().numpy", "X.cuda", "y.cuda", "nets.task_loss", "torch.zeros.cpu().numpy", "torch.zeros.cpu().numpy", "torch.cat.cpu", "torch.zeros.cpu", "torch.zeros.cpu"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.rmse_loss", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.task_loss"], ["", "def", "eval_for_loaders", "(", "which", ",", "model", ",", "loaders", ",", "params", ",", "save_folder", ",", "loader_label", ")", ":", "\n", "    ", "total_loss_rmse", "=", "torch", ".", "zeros", "(", "params", "[", "'T'", "]", ",", "device", "=", "DEVICE", ")", "\n", "total_loss_task", "=", "torch", ".", "zeros", "(", "params", "[", "'T'", "]", ",", "device", "=", "DEVICE", ")", "\n", "total_loss_task_2", "=", "torch", ".", "zeros", "(", "params", "[", "'T'", "]", ",", "device", "=", "DEVICE", ")", "\n", "all_preds", "=", "torch", ".", "zeros", "(", "1", ",", "params", "[", "'T'", "]", ",", "device", "=", "DEVICE", ")", "\n", "\n", "solver", "=", "model_classes", ".", "ScheduleBattery", "(", "params", ")", "\n", "if", "USE_GPU", ":", "\n", "        ", "solver", "=", "solver", ".", "cuda", "(", ")", "\n", "\n", "", "m", "=", "0", "\n", "for", "(", "batch", ",", "(", "X", ",", "y", ")", ")", "in", "enumerate", "(", "loaders", "[", "loader_label", "]", ")", ":", "\n", "        ", "if", "USE_GPU", ":", "\n", "            ", "X", ",", "y", "=", "X", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "", "preds", "=", "model", "(", "X", ")", "\n", "\n", "all_preds", "=", "torch", ".", "cat", "(", "[", "all_preds", ",", "preds", ".", "data", "]", ",", "0", ")", "\n", "\n", "total_loss_rmse", "+=", "rmse_loss", "(", "preds", ",", "y", ")", "*", "X", ".", "size", "(", "0", ")", "\n", "\n", "sched", "=", "solver", "(", "preds", ")", "\n", "\n", "total_loss_task", "+=", "task_loss", "(", "sched", ",", "y", ",", "params", ")", ".", "data", "*", "X", ".", "size", "(", "0", ")", "\n", "\n", "m", "+=", "X", ".", "size", "(", "0", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_folder", ",", "'{}_{}_rmse'", ".", "format", "(", "which", ",", "loader_label", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "np", ".", "save", "(", "f", ",", "total_loss_rmse", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "m", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_folder", ",", "'{}_{}_task'", ".", "format", "(", "which", ",", "loader_label", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "np", ".", "save", "(", "f", ",", "total_loss_task", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "m", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_folder", ",", "'{}_{}_preds'", ".", "format", "(", "which", ",", "loader_label", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "np", ".", "save", "(", "f", ",", "all_preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "save_folder", ",", "'{}_model'", ".", "format", "(", "which", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.nets.eval_net": [[230, 235], ["model.eval", "nets.eval_for_loaders", "nets.eval_for_loaders", "nets.eval_for_loaders"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.nets.eval_for_loaders", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.nets.eval_for_loaders", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.nets.eval_for_loaders"], ["", "def", "eval_net", "(", "which", ",", "model", ",", "loaders", ",", "params", ",", "save_folder", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "eval_for_loaders", "(", "which", ",", "model", ",", "loaders", ",", "params", ",", "save_folder", ",", "'train'", ")", "\n", "eval_for_loaders", "(", "which", ",", "model", ",", "loaders", ",", "params", ",", "save_folder", ",", "'test'", ")", "\n", "eval_for_loaders", "(", "which", ",", "model", ",", "loaders", ",", "params", ",", "save_folder", ",", "'hold'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.model_classes.Net.__init__": [[18, 38], ["torch.Module.__init__", "numpy.hstack", "numpy.linalg.solve", "torch.Linear", "torch.Linear", "model_classes.Net.lin.parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "functools.reduce", "torch.Sequential", "torch.Sequential", "numpy.hstack.T.dot", "numpy.hstack.T.dot", "X.size", "Y.size", "torch.Linear", "torch.Linear", "X.cpu().numpy", "numpy.ones", "Y.cpu().numpy", "X.size", "Y.size", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "zip", "X.cpu", "X.size", "Y.cpu"], "methods", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.SolveScheduling.__init__"], ["    ", "def", "__init__", "(", "self", ",", "X", ",", "Y", ",", "hidden_layer_sizes", ",", "T", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Initialize linear layer with least squares solution", "\n", "X_", "=", "np", ".", "hstack", "(", "[", "X", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "np", ".", "ones", "(", "(", "X", ".", "size", "(", "0", ")", ",", "1", ")", ")", "]", ")", "\n", "Theta", "=", "np", ".", "linalg", ".", "solve", "(", "X_", ".", "T", ".", "dot", "(", "X_", ")", ",", "X_", ".", "T", ".", "dot", "(", "Y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "self", ".", "lin", "=", "nn", ".", "Linear", "(", "X", ".", "size", "(", "1", ")", ",", "Y", ".", "size", "(", "1", ")", ")", "\n", "W", ",", "b", "=", "self", ".", "lin", ".", "parameters", "(", ")", "\n", "W", ".", "data", "=", "torch", ".", "Tensor", "(", "Theta", "[", ":", "-", "1", ",", ":", "]", ".", "T", ")", "\n", "b", ".", "data", "=", "torch", ".", "Tensor", "(", "Theta", "[", "-", "1", ",", ":", "]", ")", "\n", "\n", "\n", "# Set up non-linear network of", "\n", "# Linear -> BatchNorm -> ReLU -> Dropout layers", "\n", "layer_sizes", "=", "[", "X", ".", "size", "(", "1", ")", "]", "+", "hidden_layer_sizes", "\n", "layers", "=", "reduce", "(", "operator", ".", "add", ",", "\n", "[", "[", "nn", ".", "Linear", "(", "a", ",", "b", ")", ",", "nn", ".", "BatchNorm1d", "(", "b", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "]", "\n", "for", "a", ",", "b", "in", "zip", "(", "layer_sizes", "[", "0", ":", "-", "1", "]", ",", "layer_sizes", "[", "1", ":", "]", ")", "]", ")", "\n", "layers", "+=", "[", "nn", ".", "Linear", "(", "layer_sizes", "[", "-", "1", "]", ",", "Y", ".", "size", "(", "1", ")", ")", "]", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.model_classes.Net.forward": [[39, 41], ["model_classes.Net.lin", "model_classes.Net.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lin", "(", "x", ")", "+", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.model_classes.ScheduleBattery.__init__": [[45, 85], ["torch.Module.__init__", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "block.block.block", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "block.block.block", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "model_classes.ScheduleBattery.Q.cuda", "model_classes.ScheduleBattery.Ae.cuda", "model_classes.ScheduleBattery.be.cuda", "model_classes.ScheduleBattery.A.cuda", "model_classes.ScheduleBattery.b.cuda", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.SolveScheduling.__init__"], ["def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "super", "(", "ScheduleBattery", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "T", "=", "params", "[", "'T'", "]", "\n", "T", "=", "params", "[", "'T'", "]", "\n", "eps", "=", "params", "[", "'epsilon'", "]", "\n", "IT", "=", "torch", ".", "eye", "(", "T", ")", "\n", "eff", "=", "params", "[", "'eff'", "]", "\n", "in_max", "=", "params", "[", "'in_max'", "]", "\n", "out_max", "=", "params", "[", "'out_max'", "]", "\n", "self", ".", "B", "=", "params", "[", "'B'", "]", "\n", "self", ".", "lam", "=", "params", "[", "'lambda'", "]", "\n", "\n", "D1", "=", "torch", ".", "cat", "(", "[", "torch", ".", "eye", "(", "T", "-", "1", ")", ",", "torch", ".", "zeros", "(", "1", ",", "T", "-", "1", ")", "]", ",", "0", ")", "\n", "D2", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "1", ",", "T", "-", "1", ")", ",", "torch", ".", "eye", "(", "T", "-", "1", ")", "]", ",", "0", ")", "\n", "\n", "self", ".", "Q", "=", "block", "(", "[", "[", "eps", "*", "torch", ".", "eye", "(", "T", ")", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "eps", "*", "torch", ".", "eye", "(", "T", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "self", ".", "lam", "*", "torch", ".", "eye", "(", "T", ")", "]", "]", ")", "\n", "\n", "Ae_list", "=", "[", "[", "torch", ".", "zeros", "(", "1", ",", "T", ")", ",", "torch", ".", "zeros", "(", "1", ",", "T", ")", ",", "torch", ".", "ones", "(", "1", ",", "1", ")", ",", "torch", ".", "zeros", "(", "1", ",", "T", "-", "1", ")", "]", ",", "\n", "[", "D1", ".", "t", "(", ")", "*", "eff", ",", "-", "D1", ".", "t", "(", ")", ",", "D1", ".", "t", "(", ")", "-", "D2", ".", "t", "(", ")", "]", "]", "\n", "self", ".", "Ae", "=", "torch", ".", "cat", "(", "[", "torch", ".", "cat", "(", "x", ",", "1", ")", "for", "x", "in", "Ae_list", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "be", "=", "torch", ".", "cat", "(", "[", "(", "self", ".", "B", "/", "2", ")", "*", "torch", ".", "ones", "(", "1", ")", ",", "torch", ".", "zeros", "(", "T", "-", "1", ")", "]", ")", "\n", "\n", "self", ".", "A", "=", "block", "(", "[", "\n", "[", "torch", ".", "eye", "(", "T", ")", ",", "0", ",", "0", "]", ",", "\n", "[", "-", "torch", ".", "eye", "(", "T", ")", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "torch", ".", "eye", "(", "T", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "-", "torch", ".", "eye", "(", "T", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "torch", ".", "eye", "(", "T", ")", "]", ",", "\n", "[", "0", ",", "0", ",", "-", "torch", ".", "eye", "(", "T", ")", "]", "]", ")", "\n", "self", ".", "b", "=", "torch", ".", "Tensor", "(", "\n", "[", "in_max", "]", "*", "T", "+", "[", "0", "]", "*", "T", "+", "[", "out_max", "]", "*", "T", "+", "[", "0", "]", "*", "T", "+", "[", "self", ".", "B", "]", "*", "T", "+", "[", "0", "]", "*", "T", ")", "\n", "\n", "if", "USE_GPU", ":", "\n", "            ", "self", ".", "Q", "=", "self", ".", "Q", ".", "cuda", "(", ")", "\n", "self", ".", "Ae", "=", "self", ".", "Ae", ".", "cuda", "(", ")", "\n", "self", ".", "be", "=", "self", ".", "be", ".", "cuda", "(", ")", "\n", "self", ".", "A", "=", "self", ".", "A", ".", "cuda", "(", ")", "\n", "self", ".", "b", "=", "self", ".", "b", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.model_classes.ScheduleBattery.forward": [[87, 107], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp.size", "torch.exp.size", "model_classes.ScheduleBattery.Q.unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_classes.ScheduleBattery.A.unsqueeze().expand", "model_classes.ScheduleBattery.b.unsqueeze().expand", "model_classes.ScheduleBattery.Ae.unsqueeze().expand", "model_classes.ScheduleBattery.be.unsqueeze().expand", "model_classes.ScheduleBattery.Q.size", "model_classes.ScheduleBattery.Q.size", "model_classes.ScheduleBattery.A.size", "model_classes.ScheduleBattery.A.size", "model_classes.ScheduleBattery.b.size", "model_classes.ScheduleBattery.Ae.size", "model_classes.ScheduleBattery.Ae.size", "model_classes.ScheduleBattery.be.size", "qpth.qp.QPFunction", "model_classes.ScheduleBattery.double", "torch.cat.double", "torch.cat.double", "model_classes.ScheduleBattery.double", "model_classes.ScheduleBattery.double", "model_classes.ScheduleBattery.double", "model_classes.ScheduleBattery.double", "model_classes.ScheduleBattery.Q.unsqueeze", "model_classes.ScheduleBattery.A.unsqueeze", "model_classes.ScheduleBattery.b.unsqueeze", "model_classes.ScheduleBattery.Ae.unsqueeze", "model_classes.ScheduleBattery.be.unsqueeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "log_prices", ")", ":", "\n", "        ", "prices", "=", "torch", ".", "exp", "(", "log_prices", ")", "\n", "\n", "nBatch", "=", "prices", ".", "size", "(", "0", ")", "\n", "T", "=", "self", ".", "T", "\n", "\n", "Q", "=", "self", ".", "Q", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "nBatch", ",", "self", ".", "Q", ".", "size", "(", "0", ")", ",", "self", ".", "Q", ".", "size", "(", "1", ")", ")", "\n", "c", "=", "torch", ".", "cat", "(", "\n", "[", "prices", ",", "-", "prices", ",", "\n", "-", "(", "self", ".", "lam", "*", "self", ".", "B", "*", "torch", ".", "ones", "(", "T", ",", "device", "=", "DEVICE", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "nBatch", ",", "T", ")", "]", ",", "\n", "1", ")", "\n", "A", "=", "self", ".", "A", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "nBatch", ",", "self", ".", "A", ".", "size", "(", "0", ")", ",", "self", ".", "A", ".", "size", "(", "1", ")", ")", "\n", "b", "=", "self", ".", "b", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "nBatch", ",", "self", ".", "b", ".", "size", "(", "0", ")", ")", "\n", "Ae", "=", "self", ".", "Ae", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "nBatch", ",", "self", ".", "Ae", ".", "size", "(", "0", ")", ",", "self", ".", "Ae", ".", "size", "(", "1", ")", ")", "\n", "be", "=", "self", ".", "be", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "nBatch", ",", "self", ".", "be", ".", "size", "(", "0", ")", ")", "\n", "\n", "out", "=", "QPFunction", "(", "verbose", "=", "True", ")", "(", "Q", ".", "double", "(", ")", ",", "c", ".", "double", "(", ")", ",", "A", ".", "double", "(", ")", ",", "b", ".", "double", "(", ")", ",", "Ae", ".", "double", "(", ")", ",", "be", ".", "double", "(", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.main.main": [[27, 89], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "setproctitle.setproctitle", "main.init_params", "main.get_train_test_split", "main.get_loaders_tt", "range", "calc_stats.calc_stats", "os.path.exists", "os.makedirs", "os.path.join", "main.get_train_hold_split", "main.get_loaders_tth", "model_classes.Net", "nets.run_rmse_net", "nets.eval_net", "model_classes.Net", "nets.run_rmse_net", "nets.run_task_net", "nets.eval_net", "map", "range", "str", "os.path.exists", "os.makedirs", "model_rmse.cuda.cuda", "model_task.cuda.cuda", "range", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.main.init_params", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.main.get_train_test_split", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.main.get_loaders_tt", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.calc_stats.calc_stats", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.main.get_train_hold_split", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.main.get_loaders_tth", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.run_rmse_net", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.eval_net", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.run_rmse_net", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.run_task_net", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.eval_net"], ["parser", ".", "add_argument", "(", "'--save'", ",", "type", "=", "str", ",", "\n", "metavar", "=", "'save-folder'", ",", "help", "=", "'prefix to add to save path'", ")", "\n", "parser", ".", "add_argument", "(", "'--nRuns'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "metavar", "=", "'runs'", ",", "help", "=", "'number of runs'", ")", "\n", "parser", ".", "add_argument", "(", "'--trueModel'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "'linear'", ",", "'nonlinear'", ",", "'both'", "]", ",", "default", "=", "'both'", ",", "\n", "help", "=", "'true y|x distribution'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "setproctitle", ".", "setproctitle", "(", "'newsvendor-{}'", ".", "format", "(", "args", ".", "trueModel", ")", ")", "\n", "\n", "# Cost params for newsvendor task loss", "\n", "params", "=", "init_newsvendor_params", "(", ")", "\n", "\n", "true_model_types", "=", "[", "'linear'", ",", "'nonlinear'", "]", "if", "args", ".", "trueModel", "==", "'both'", "else", "[", "args", ".", "trueModel", "]", "\n", "\n", "for", "true_model", "in", "true_model_types", ":", "\n", "\n", "        ", "save_folder", "=", "os", ".", "path", ".", "join", "(", "'results'", ",", "true_model", ")", "if", "args", ".", "save", "is", "None", "else", "os", ".", "path", ".", "join", "(", "'{}-results'", ".", "format", "(", "args", ".", "save", ")", ",", "true_model", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_folder", ")", "\n", "\n", "", "results_file", "=", "os", ".", "path", ".", "join", "(", "save_folder", ",", "'inventory_results.csv'", ")", "\n", "\n", "# Randomly generate true params for p(y|x;\\theta).", "\n", "# Set with_seed=True to replicate paper true params.", "\n", "Theta_true_lin", ",", "Theta_true_sq", "=", "init_theta_true", "(", "\n", "params", ",", "is_linear", "=", "(", "true_model", "==", "'linear'", ")", ",", "with_seed", "=", "True", ")", "\n", "\n", "# Test data. Set with_seed=True to replicate paper test data.", "\n", "X_test", ",", "Y_test", "=", "gen_data", "(", "1000", ",", "params", ",", "Theta_true_lin", ",", "Theta_true_sq", ",", "\n", "with_seed", "=", "True", ")", "\n", "\n", "# MLE with true params", "\n", "f_eval_mle_t", ",", "z_buy_t", ",", "f_opt_t", "=", "mle", ".", "newsvendor_eval", "(", "\n", "X_test", ",", "Y_test", ",", "Theta_true_lin", ",", "Theta_true_sq", ",", "params", ")", "\n", "print", "(", "np", ".", "mean", "(", "f_eval_mle_t", ")", ")", "\n", "mle_true_score", "=", "np", ".", "mean", "(", "f_eval_mle_t", ")", "\n", "\n", "with", "open", "(", "results_file", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "'{},{}\\n'", ".", "format", "(", "'mle_true:'", ",", "mle_true_score", ")", ")", "\n", "f", ".", "write", "(", "'{},{},{},{},{},{},{}\\n'", ".", "format", "(", "\n", "'m'", ",", "'mle-linear'", ",", "'mle-nonlinear'", ",", "'policy-linear'", ",", "'policy-nonlinear'", ",", "'task-linear'", ",", "'task-nonlinear'", ")", ")", "\n", "\n", "", "for", "run", "in", "range", "(", "args", ".", "nRuns", ")", ":", "\n", "            ", "for", "m", "in", "[", "100", ",", "200", ",", "300", ",", "500", ",", "1000", ",", "3000", ",", "5000", ",", "10000", "]", ":", "\n", "\n", "                ", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                    ", "f", ".", "write", "(", "'\\n{},'", ".", "format", "(", "m", ")", ")", "\n", "\n", "# Generate data based on true params", "\n", "", "try", ":", "\n", "                    ", "X", ",", "Y", "=", "gen_data", "(", "m", ",", "params", ",", "Theta_true_lin", ",", "Theta_true_sq", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "'gen'", ",", "\n", "results_file", ",", "newline", "=", "True", ")", "\n", "\n", "# MLE with linear softmax regression", "\n", "", "try", ":", "\n", "                    ", "Theta_est", "=", "mle", ".", "linear_softmax_reg", "(", "X", ",", "Y", ",", "params", ")", "\n", "f_eval_mle", ",", "z_buy", ",", "f_opt", "=", "mle", ".", "newsvendor_eval", "(", "X_test", ",", "Y_test", ",", "Theta_est", ",", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.main.init_params": [[91, 120], ["None"], "function", ["None"], ["params", ")", "\n", "mle_score", "=", "np", ".", "mean", "(", "f_eval_mle", ")", "\n", "\n", "print", "(", "mle_score", ")", "\n", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "'{},'", ".", "format", "(", "mle_score", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "'mle-linear'", ",", "results_file", ")", "\n", "\n", "# Nonlinear MLE net", "\n", "", "try", ":", "\n", "                    ", "mle_nonlin_score", "=", "mle_net", ".", "run_mle_net", "(", "\n", "X", ",", "Y", ",", "X_test", ",", "Y_test", ",", "params", ")", "\n", "\n", "print", "(", "mle_nonlin_score", ")", "\n", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "'{},'", ".", "format", "(", "mle_nonlin_score", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "\n", "'mle-nonlinear'", ",", "results_file", ")", "\n", "\n", "# Pure end-to-end policy neural net (linear)", "\n", "", "try", ":", "\n", "                    ", "policy_lin_score", "=", "policy_net", ".", "run_policy_net", "(", "\n", "X", ",", "Y", ",", "X_test", ",", "Y_test", ",", "params", ")", "\n", "\n", "print", "(", "policy_lin_score", ")", "\n", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                            ", "f", ".", "write", "(", "'{},'", ".", "format", "(", "policy_lin_score", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.main.get_features_labels": [[122, 185], ["pytz.timezone", "pandas.read_csv", "df[].apply", "df[].apply", "pd.read_csv.pivot", "df_prices.transpose().fillna().transpose.apply", "df_prices.transpose().fillna().transpose.transpose().fillna().transpose", "df_prices.transpose().fillna().transpose.transpose().fillna().transpose", "df_prices.transpose().fillna().transpose.applymap().dropna", "df_prices_filtered.applymap().dropna.applymap().dropna", "numpy.log", "pd.read_csv.pivot", "df_load.reindex.apply", "df_load.reindex.transpose().fillna().transpose", "df_load.reindex.transpose().fillna().transpose", "df_load.reindex.reindex", "pd.read_csv.pivot", "df_temp.reindex.apply", "df_temp.reindex.transpose().fillna().transpose", "df_temp.reindex.transpose().fillna().transpose", "df_temp.reindex.reindex", "pandas.tseries.holiday.USFederalHolidayCalendar().holidays().to_pydatetime", "set", "pandas.DataFrame", "numpy.hstack().astype", "np.log.reset_index", "numpy.std", "x.date", "pandas.to_numeric", "df_prices.transpose().fillna().transpose.transpose().fillna", "df_prices.transpose().fillna().transpose.transpose().fillna", "df_prices.transpose().fillna().transpose.applymap", "df_prices_filtered.applymap().dropna.applymap", "pandas.to_numeric", "df_load.reindex.transpose().fillna", "df_load.reindex.transpose().fillna", "pandas.to_numeric", "df_temp.reindex.transpose().fillna", "df_temp.reindex.transpose().fillna", "pandas.tseries.holiday.USFederalHolidayCalendar().holidays", "h.date", "s.apply", "s.apply", "s.apply", "s.apply", "s.apply", "numpy.hstack", "numpy.mean", "df_prices.transpose().fillna().transpose.transpose", "df_prices.transpose().fillna().transpose.transpose", "df_load.reindex.transpose", "df_load.reindex.transpose", "df_temp.reindex.transpose", "df_temp.reindex.transpose", "pandas.tseries.holiday.USFederalHolidayCalendar", "numpy.cos", "numpy.sin", "x.isoweekday", "pytz.timezone.localize().dst", "pytz.timezone.localize", "float", "float", "datetime.datetime.combine", "datetime.datetime.min.time", "x.timetuple", "x.timetuple"], "function", ["None"], ["\n", "# Pure end-to-end policy neural net (nonlinear)", "\n", "", "try", ":", "\n", "                    ", "policy_nonlin_score", "=", "policy_net", ".", "run_policy_net", "(", "\n", "X", ",", "Y", ",", "X_test", ",", "Y_test", ",", "params", ",", "is_nonlinear", "=", "True", ")", "\n", "\n", "print", "(", "policy_nonlin_score", ")", "\n", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "'{},'", ".", "format", "(", "policy_nonlin_score", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "'policy-nonlinear'", ",", "results_file", ")", "\n", "\n", "# Model-based end-to-end model (linear)", "\n", "", "try", ":", "\n", "                    ", "e2e_lin_score", "=", "task_net", ".", "run_task_net", "(", "\n", "X", ",", "Y", ",", "X_test", ",", "Y_test", ",", "params", ")", "\n", "\n", "print", "(", "e2e_lin_score", ")", "\n", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "'{},'", ".", "format", "(", "e2e_lin_score", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "\n", "'task-linear'", ",", "results_file", ")", "\n", "\n", "# Model-based end-to-end model (nonlinear)", "\n", "", "try", ":", "\n", "                    ", "e2e_nonlin_score", "=", "task_net", ".", "run_task_net", "(", "\n", "X", ",", "Y", ",", "X_test", ",", "Y_test", ",", "params", ",", "is_nonlinear", "=", "True", ")", "\n", "\n", "print", "(", "e2e_nonlin_score", ")", "\n", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "'{}\\n'", ".", "format", "(", "e2e_nonlin_score", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "results_file", ",", "\n", "'task-nonlinear'", ",", "newline", "=", "True", ")", "\n", "\n", "# Plot results as we go", "\n", "", "try", ":", "\n", "                    ", "plot", ".", "plot_results", "(", "save_folder", ",", "true_model", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_folder", ",", "\n", "'errors.log'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "'{}: m {}, model {}, run {}: {}\\n'", ".", "format", "(", "\n", "datetime", ".", "now", "(", ")", ",", "m", ",", "'plot'", ",", "run", ",", "e", ")", ")", "\n", "\n", "\n", "\n", "", "", "", "", "", "", "def", "init_newsvendor_params", "(", ")", ":", "\n", "    ", "params", "=", "{", "}", "\n", "\n", "# Ordering costs", "\n", "params", "[", "'c_lin'", "]", "=", "10", "\n", "params", "[", "'c_quad'", "]", "=", "2.0", "\n", "\n", "# Over-order penalties", "\n", "params", "[", "'b_lin'", "]", "=", "30", "\n", "params", "[", "'b_quad'", "]", "=", "14", "\n", "\n", "# Under-order penalties", "\n", "params", "[", "'h_lin'", "]", "=", "10", "\n", "params", "[", "'h_quad'", "]", "=", "2", "\n", "\n", "# Discrete demands", "\n", "params", "[", "'d'", "]", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "5", ",", "10", ",", "20", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.main.get_train_test_split": [[187, 198], ["main.get_features_labels", "int", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.main.get_features_labels"], ["# Number of features", "\n", "params", "[", "'n'", "]", "=", "20", "\n", "\n", "return", "params", "\n", "\n", "\n", "", "def", "init_theta_true", "(", "params", ",", "is_linear", "=", "True", ",", "with_seed", "=", "False", ")", ":", "\n", "    ", "if", "is_linear", ":", "\n", "# Linear true model (py \u221d exp(\u03b8X))", "\n", "        ", "np", ".", "random", ".", "seed", "(", "42", ")", "if", "with_seed", "else", "np", ".", "random", ".", "seed", "(", "None", ")", "\n", "Theta_true_lin", "=", "np", ".", "random", ".", "randn", "(", "params", "[", "'n'", "]", ",", "len", "(", "params", "[", "'d'", "]", ")", ")", "\n", "Theta_true_sq", "=", "np", ".", "zeros", "(", "(", "params", "[", "'n'", "]", ",", "len", "(", "params", "[", "'d'", "]", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.main.get_loaders_tt": [[199, 205], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset"], "function", ["None"], ["", "else", ":", "\n", "# Squared true model (py \u221d exp((\u03b8X)^2))", "\n", "        ", "Theta_true_lin", "=", "np", ".", "zeros", "(", "(", "params", "[", "'n'", "]", ",", "len", "(", "params", "[", "'d'", "]", ")", ")", ")", "\n", "np", ".", "random", ".", "seed", "(", "42", ")", "if", "with_seed", "else", "np", ".", "random", ".", "seed", "(", "None", ")", "\n", "Theta_true_sq", "=", "np", ".", "random", ".", "randn", "(", "params", "[", "'n'", "]", ",", "len", "(", "params", "[", "'d'", "]", ")", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "None", ")", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.main.get_loaders_tth": [[206, 214], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset"], "function", ["None"], ["\n", "return", "Theta_true_lin", ",", "Theta_true_sq", "\n", "\n", "\n", "", "def", "gen_data", "(", "m", ",", "params", ",", "Theta_true_lin", ",", "Theta_true_sq", ",", "with_seed", "=", "False", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "if", "with_seed", "else", "np", ".", "random", ".", "seed", "(", "None", ")", "\n", "X", "=", "np", ".", "random", ".", "randn", "(", "m", ",", "params", "[", "'n'", "]", ")", "\n", "\n", "PY", "=", "np", ".", "exp", "(", "X", ".", "dot", "(", "Theta_true_lin", ")", "+", "(", "X", ".", "dot", "(", "Theta_true_sq", ")", ")", "**", "2", ")", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.battery_storage.main.get_train_hold_split": [[215, 235], ["numpy.random.permutation", "torch.LongTensor", "torch.LongTensor", "X_train.size", "open", "numpy.save", "tensors_dict[].clone", "tensors_dict[].clone", "os.path.join", "int", "int", "X_train.size", "X_train.size"], "function", ["None"], ["PY", "=", "PY", "/", "np", ".", "sum", "(", "PY", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "\n", "# Generate demand realizations", "\n", "Y", "=", "np", ".", "where", "(", "np", ".", "cumsum", "(", "np", ".", "random", ".", "rand", "(", "m", ")", "[", ":", ",", "None", "]", "\n", "<", "np", ".", "cumsum", "(", "PY", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "==", "1", ")", "[", "1", "]", "\n", "Y", "=", "np", ".", "eye", "(", "len", "(", "params", "[", "'d'", "]", ")", ")", "[", "Y", ",", ":", "]", "\n", "\n", "np", ".", "random", ".", "seed", "(", "None", ")", "\n", "\n", "return", "X", ",", "Y", "\n", "\n", "\n", "", "def", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "model", ",", "results_file", ",", "newline", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_folder", ",", "'errors.log'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'{}: m {}, model {}, run {}: {}\\n'", ".", "format", "(", "\n", "datetime", ".", "now", "(", ")", ",", "m", ",", "model", ",", "run", ",", "e", ")", ")", "\n", "", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'\\n'", "if", "newline", "else", "','", ")", "\n", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.task_loss": [[16, 20], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "function", ["None"], ["def", "task_loss", "(", "sched", ",", "Y_actual", ",", "params", ")", ":", "\n", "    ", "T", "=", "params", "[", "'T'", "]", "\n", "z_in", "=", "sched", "[", ":", ",", ":", "T", "]", ".", "float", "(", ")", "\n", "z_out", "=", "sched", "[", ":", ",", "T", ":", "2", "*", "T", "]", ".", "float", "(", ")", "\n", "x", "=", "sched", "[", ":", ",", "2", "*", "T", ":", "]", ".", "float", "(", ")", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.task_loss_no_mean": [[21, 25], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "function", ["None"], ["costs", "=", "(", "\n", "(", "z_in", "-", "z_out", ")", "*", "Y_actual", ")", "+", "(", "params", "[", "'lambda'", "]", "*", "(", "x", "-", "params", "[", "'B'", "]", "/", "2", ")", "**", "2", ")", "+", "(", "params", "[", "'epsilon'", "]", "*", "z_in", "**", "2", ")", "+", "(", "params", "[", "'epsilon'", "]", "*", "z_out", "**", "2", ")", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.rmse_loss": [[26, 28], ["None"], "function", ["None"], ["return", "costs", ".", "mean", "(", "dim", "=", "0", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.rmse_loss_weighted": [[29, 31], ["None"], "function", ["None"], ["", "def", "rmse_loss", "(", "mu_pred", ",", "Y_actual", ")", ":", "\n", "    ", "return", "(", "(", "mu_pred", "-", "Y_actual", ")", "**", "2", ")", ".", "mean", "(", "dim", "=", "0", ")", ".", "sqrt", "(", ")", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.run_rmse_net": [[33, 54], ["torch.Adam", "range", "model.eval", "model.set_sig", "model.parameters", "optim.Adam.zero_grad", "model.train", "train_loss.backward", "optim.Adam.step", "model.eval", "print", "torch.MSELoss", "torch.MSELoss", "train_loss.item", "test_loss.item", "model", "model"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.Net.set_sig"], ["", "def", "run_rmse_net", "(", "model", ",", "loaders", ",", "params", ",", "tensors_task", ")", ":", "\n", "    ", "opt", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ")", "\n", "\n", "# For early stopping", "\n", "prev_min", "=", "0", "\n", "hold_costs", "=", "[", "]", "\n", "model_states", "=", "[", "]", "\n", "num_stop_rounds", "=", "20", "\n", "\n", "for", "i", "in", "range", "(", "1000", ")", ":", "\n", "\n", "# train", "\n", "        ", "model", ".", "train", "(", ")", "\n", "total_train_loss", "=", "0", "\n", "m_train", "=", "0", "\n", "\n", "for", "(", "batch", ",", "(", "X_train", ",", "Y_train", ")", ")", "in", "enumerate", "(", "loaders", "[", "'train'", "]", ")", ":", "\n", "            ", "if", "USE_GPU", ":", "\n", "                ", "X_train_", ",", "Y_train_", "=", "X_train", ".", "cuda", "(", ")", ",", "Y_train", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "X_train_", ",", "Y_train_", "=", "X_train", ",", "Y_train", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.run_weighted_rmse_net": [[56, 62], ["torch.ones", "torch.ones", "torch.ones", "range", "nets.run_weighted_rmse_net_helper", "weights2.detach"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.run_weighted_rmse_net_helper"], ["train_loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "model", "(", "X_train_", ")", ",", "Y_train_", ")", "\n", "total_train_loss", "+=", "train_loss", ".", "item", "(", ")", "*", "X_train_", ".", "size", "(", "0", ")", "\n", "m_train", "+=", "X_train_", ".", "size", "(", "0", ")", "\n", "train_loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.run_weighted_rmse_net_helper": [[63, 90], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "model_classes.Net", "torch.Adam", "model_classes.SolveScheduling", "range", "model.cuda.eval", "model.cuda.", "model_classes.SolveScheduling.", "nets.task_loss_no_mean", "model.cuda.set_sig", "model.cuda.cuda", "model.cuda.parameters", "model.cuda.train", "nets.batch_train_weightrmse", "mu_pred_train.double", "sig_pred_train.double", "solver.float", "weights2.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.task_loss_no_mean", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.Net.set_sig", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.batch_train_weightrmse"], ["# evaluate on test", "\n", "", "model", ".", "eval", "(", ")", "\n", "total_test_loss", "=", "0", "\n", "m_test", "=", "0", "\n", "\n", "for", "(", "batch", ",", "(", "X_test", ",", "Y_test", ")", ")", "in", "enumerate", "(", "loaders", "[", "'test'", "]", ")", ":", "\n", "            ", "if", "USE_GPU", ":", "\n", "                ", "X_test_", ",", "Y_test_", "=", "X_test", ".", "cuda", "(", ")", ",", "Y_test", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "X_test_", ",", "Y_test_", "=", "X_test", ",", "Y_test", "\n", "\n", "", "test_loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "model", "(", "X_test_", ")", ",", "Y_test_", ")", "\n", "total_test_loss", "+=", "test_loss", ".", "item", "(", ")", "*", "X_test_", ".", "size", "(", "0", ")", "\n", "m_test", "+=", "X_test_", ".", "size", "(", "0", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "total_hold_loss", "=", "0", "\n", "m_hold", "=", "0", "\n", "for", "(", "batch", ",", "(", "X_hold", ",", "Y_hold", ")", ")", "in", "enumerate", "(", "loaders", "[", "'hold'", "]", ")", ":", "\n", "            ", "if", "USE_GPU", ":", "\n", "                ", "X_hold_", ",", "Y_hold_", "=", "X_hold", ".", "cuda", "(", ")", ",", "Y_hold", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "X_hold_", ",", "Y_hold_", "=", "X_hold", ",", "Y_hold", "\n", "\n", "", "hold_loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "model", "(", "X_hold_", ")", ",", "Y_hold_", ")", "\n", "total_hold_loss", "+=", "hold_loss", ".", "item", "(", ")", "*", "X_hold_", ".", "size", "(", "0", ")", "\n", "m_hold", "+=", "X_hold_", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.batch_train_weightrmse": [[91, 120], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "range", "X_train_t.size", "Y_train_t.size", "weights_t.size", "X_train_t.size", "opt.zero_grad", "opt.step", "print", "X_train_t.size", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "model", "X_train_t.size", "X_train_t.size", "Y_train_t.size", "weights_t.size", "X_train_t.size"], "function", ["None"], ["", "print", "(", "i", ",", "total_train_loss", "/", "m_train", ",", "total_test_loss", "/", "m_test", ",", "total_hold_loss", "/", "m_hold", ")", "\n", "\n", "\n", "# Early stopping", "\n", "hold_costs", ".", "append", "(", "total_hold_loss", ")", "\n", "model_states", ".", "append", "(", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", ")", "\n", "if", "i", ">", "0", "and", "i", "%", "num_stop_rounds", "==", "0", ":", "\n", "            ", "idx", "=", "hold_costs", ".", "index", "(", "min", "(", "hold_costs", ")", ")", "\n", "if", "prev_min", "==", "hold_costs", "[", "idx", "]", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "\n", "best_model", "=", "model_classes", ".", "Net", "(", "\n", "tensors_task", "[", "'X_train'", "]", ",", "tensors_task", "[", "'Y_train'", "]", ",", "[", "200", ",", "200", "]", ",", "params", "[", "'T'", "]", ")", "\n", "best_model", ".", "load_state_dict", "(", "model_states", "[", "idx", "]", ")", "\n", "if", "USE_GPU", ":", "\n", "                    ", "best_model", "=", "best_model", ".", "cuda", "(", ")", "\n", "\n", "", "return", "best_model", "\n", "", "else", ":", "\n", "                ", "prev_min", "=", "hold_costs", "[", "idx", "]", "\n", "hold_costs", "=", "[", "prev_min", "]", "\n", "model_states", "=", "[", "model_states", "[", "idx", "]", "]", "\n", "\n", "", "", "", "return", "model", "\n", "\n", "\n", "", "def", "run_task_net", "(", "model", ",", "loader", ",", "params", ",", "args", ",", "tensors_task", ")", ":", "\n", "    ", "opt", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-4", ")", "\n", "solver", "=", "model_classes", ".", "ScheduleBattery", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.run_task_net": [[122, 177], ["torch.Adam", "model_classes.SolveScheduling", "range", "model.parameters", "optim.Adam.zero_grad", "model.train", "model", "model_classes.SolveScheduling.", "nets.task_loss", "task_loss.sum().backward", "model.eval", "model", "model_classes.SolveScheduling.", "nets.task_loss", "model", "model_classes.SolveScheduling.", "nets.task_loss", "optim.Adam.step", "print", "hold_costs.append", "model_states.append", "mu_pred_train.double", "sig_pred_train.double", "solver.float", "mu_pred_test.double", "sig_pred_test.double", "solver.float", "mu_pred_hold.double", "sig_pred_hold.double", "solver.float", "task_loss.sum().item", "task_loss.sum().item", "task_loss.sum().item", "task_loss.sum().item", "model.state_dict().copy", "hold_costs.index", "task_loss.sum", "min", "model.eval", "model_classes.Net", "best_model.cuda.load_state_dict", "task_loss.sum", "task_loss.sum", "task_loss.sum", "task_loss.sum", "model.state_dict", "best_model.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.task_loss", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.task_loss", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.task_loss"], ["prev_min", "=", "0", "\n", "hold_costs", "=", "[", "]", "\n", "model_states", "=", "[", "]", "\n", "num_stop_rounds", "=", "20", "\n", "\n", "for", "i", "in", "range", "(", "1000", ")", ":", "\n", "\n", "# train", "\n", "        ", "model", ".", "train", "(", ")", "\n", "total_train_loss", "=", "0", "\n", "m_train", "=", "0", "\n", "for", "(", "batch", ",", "(", "X_train", ",", "Y_train", ")", ")", "in", "enumerate", "(", "loader", "[", "'train'", "]", ")", ":", "\n", "            ", "opt", ".", "zero_grad", "(", ")", "\n", "if", "USE_GPU", ":", "\n", "                ", "X_train", ",", "Y_train", "=", "X_train", ".", "cuda", "(", ")", ",", "Y_train", ".", "cuda", "(", ")", "\n", "", "preds_train", "=", "model", "(", "X_train", ")", "\n", "train_loss", "=", "task_loss", "(", "solver", "(", "preds_train", ")", ",", "Y_train", ",", "params", ")", ".", "sum", "(", ")", "\n", "total_train_loss", "+=", "train_loss", ".", "item", "(", ")", "*", "X_train", ".", "size", "(", "0", ")", "\n", "m_train", "+=", "X_train", ".", "size", "(", "0", ")", "\n", "train_loss", ".", "backward", "(", ")", "\n", "\n", "# test", "\n", "", "model", ".", "eval", "(", ")", "\n", "total_test_loss", "=", "0", "\n", "m_test", "=", "0", "\n", "for", "(", "batch", ",", "(", "X_test", ",", "Y_test", ")", ")", "in", "enumerate", "(", "loader", "[", "'test'", "]", ")", ":", "\n", "            ", "if", "USE_GPU", ":", "\n", "                ", "X_test", ",", "Y_test", "=", "X_test", ".", "cuda", "(", ")", ",", "Y_test", ".", "cuda", "(", ")", "\n", "", "preds_test", "=", "model", "(", "X_test", ")", "\n", "test_loss", "=", "task_loss", "(", "solver", "(", "preds_test", ")", ",", "Y_test", ",", "params", ")", ".", "sum", "(", ")", "\n", "total_test_loss", "+=", "test_loss", ".", "item", "(", ")", "*", "X_test", ".", "size", "(", "0", ")", "\n", "m_test", "+=", "X_test", ".", "size", "(", "0", ")", "\n", "\n", "# hold", "\n", "", "model", ".", "eval", "(", ")", "\n", "total_hold_loss", "=", "0", "\n", "m_hold", "=", "0", "\n", "for", "(", "batch", ",", "(", "X_hold", ",", "Y_hold", ")", ")", "in", "enumerate", "(", "loader", "[", "'hold'", "]", ")", ":", "\n", "            ", "if", "USE_GPU", ":", "\n", "                ", "X_hold", ",", "Y_hold", "=", "X_hold", ".", "cuda", "(", ")", ",", "Y_hold", ".", "cuda", "(", ")", "\n", "", "preds_hold", "=", "model", "(", "X_hold", ")", "\n", "hold_loss", "=", "task_loss", "(", "solver", "(", "preds_hold", ")", ",", "Y_hold", ",", "params", ")", ".", "sum", "(", ")", "\n", "total_hold_loss", "+=", "hold_loss", ".", "item", "(", ")", "*", "X_hold", ".", "size", "(", "0", ")", "\n", "m_hold", "+=", "X_hold", ".", "size", "(", "0", ")", "\n", "\n", "", "print", "(", "i", ",", "total_train_loss", "/", "m_train", ",", "total_test_loss", "/", "m_test", ",", "total_hold_loss", "/", "m_hold", ")", "\n", "\n", "# Early stopping", "\n", "hold_costs", ".", "append", "(", "total_hold_loss", ")", "\n", "model_states", ".", "append", "(", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", ")", "\n", "if", "i", ">", "0", "and", "i", "%", "num_stop_rounds", "==", "0", ":", "\n", "            ", "idx", "=", "hold_costs", ".", "index", "(", "min", "(", "hold_costs", ")", ")", "\n", "if", "prev_min", "==", "hold_costs", "[", "idx", "]", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "\n", "best_model", "=", "model_classes", ".", "Net", "(", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.eval_net": [[179, 231], ["model_classes.SolveScheduling", "model.eval", "model", "model", "nets.rmse_loss", "nets.rmse_loss", "model_classes.SolveScheduling.", "nets.task_loss", "model_classes.SolveScheduling.", "nets.task_loss", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model", "nets.rmse_loss", "open", "numpy.save", "open", "numpy.save", "mu_pred_train.double", "sig_pred_train.double", "solver.float", "mu_pred_test.double", "sig_pred_test.double", "solver.float", "model_classes.SolveScheduling.", "nets.task_loss", "task_loss.detach().cpu().numpy", "os.path.join", "task_loss.detach().cpu().numpy", "os.path.join", "torch.save", "torch.save", "torch.save", "os.path.join", "os.path.join", "open", "numpy.save", "mu_pred_hold.double", "sig_pred_hold.double", "solver.float", "task_loss.detach().cpu().numpy", "os.path.join", "os.path.join", "task_loss.detach().cpu", "task_loss.detach().cpu", "task_loss.detach().cpu", "task_loss.detach", "task_loss.detach", "task_loss.detach"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.rmse_loss", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.rmse_loss", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.task_loss", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.task_loss", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.rmse_loss", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.task_loss"], ["best_model", ".", "load_state_dict", "(", "model_states", "[", "idx", "]", ")", "\n", "if", "USE_GPU", ":", "\n", "                    ", "best_model", "=", "best_model", ".", "cuda", "(", ")", "\n", "\n", "", "return", "best_model", "\n", "", "else", ":", "\n", "                ", "prev_min", "=", "hold_costs", "[", "idx", "]", "\n", "hold_costs", "=", "[", "prev_min", "]", "\n", "model_states", "=", "[", "model_states", "[", "idx", "]", "]", "\n", "\n", "", "", "", "return", "model", "\n", "\n", "\n", "", "def", "eval_for_loaders", "(", "which", ",", "model", ",", "loaders", ",", "params", ",", "save_folder", ",", "loader_label", ")", ":", "\n", "    ", "total_loss_rmse", "=", "torch", ".", "zeros", "(", "params", "[", "'T'", "]", ",", "device", "=", "DEVICE", ")", "\n", "total_loss_task", "=", "torch", ".", "zeros", "(", "params", "[", "'T'", "]", ",", "device", "=", "DEVICE", ")", "\n", "total_loss_task_2", "=", "torch", ".", "zeros", "(", "params", "[", "'T'", "]", ",", "device", "=", "DEVICE", ")", "\n", "all_preds", "=", "torch", ".", "zeros", "(", "1", ",", "params", "[", "'T'", "]", ",", "device", "=", "DEVICE", ")", "\n", "\n", "solver", "=", "model_classes", ".", "ScheduleBattery", "(", "params", ")", "\n", "if", "USE_GPU", ":", "\n", "        ", "solver", "=", "solver", ".", "cuda", "(", ")", "\n", "\n", "", "m", "=", "0", "\n", "for", "(", "batch", ",", "(", "X", ",", "y", ")", ")", "in", "enumerate", "(", "loaders", "[", "loader_label", "]", ")", ":", "\n", "        ", "if", "USE_GPU", ":", "\n", "            ", "X", ",", "y", "=", "X", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "", "preds", "=", "model", "(", "X", ")", "\n", "\n", "all_preds", "=", "torch", ".", "cat", "(", "[", "all_preds", ",", "preds", ".", "data", "]", ",", "0", ")", "\n", "\n", "total_loss_rmse", "+=", "rmse_loss", "(", "preds", ",", "y", ")", "*", "X", ".", "size", "(", "0", ")", "\n", "\n", "sched", "=", "solver", "(", "preds", ")", "\n", "\n", "total_loss_task", "+=", "task_loss", "(", "sched", ",", "y", ",", "params", ")", ".", "data", "*", "X", ".", "size", "(", "0", ")", "\n", "\n", "m", "+=", "X", ".", "size", "(", "0", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_folder", ",", "'{}_{}_rmse'", ".", "format", "(", "which", ",", "loader_label", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "np", ".", "save", "(", "f", ",", "total_loss_rmse", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "m", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_folder", ",", "'{}_{}_task'", ".", "format", "(", "which", ",", "loader_label", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "np", ".", "save", "(", "f", ",", "total_loss_task", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "m", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_folder", ",", "'{}_{}_preds'", ".", "format", "(", "which", ",", "loader_label", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "np", ".", "save", "(", "f", ",", "all_preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "save_folder", ",", "'{}_model'", ".", "format", "(", "which", ")", ")", ")", "\n", "\n", "\n", "", "def", "eval_net", "(", "which", ",", "model", ",", "loaders", ",", "params", ",", "save_folder", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.Net.__init__": [[18, 39], ["torch.Module.__init__", "numpy.hstack", "numpy.linalg.solve", "torch.Linear", "torch.Linear", "torch.Linear", "model_classes.Net.lin.parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "functools.reduce", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "numpy.hstack.T.dot", "numpy.hstack.T.dot", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "numpy.ones", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "zip"], "methods", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.SolveScheduling.__init__"], ["    ", "def", "__init__", "(", "self", ",", "X", ",", "Y", ",", "hidden_layer_sizes", ",", "T", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Initialize linear layer with least squares solution", "\n", "X_", "=", "np", ".", "hstack", "(", "[", "X", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "np", ".", "ones", "(", "(", "X", ".", "size", "(", "0", ")", ",", "1", ")", ")", "]", ")", "\n", "Theta", "=", "np", ".", "linalg", ".", "solve", "(", "X_", ".", "T", ".", "dot", "(", "X_", ")", ",", "X_", ".", "T", ".", "dot", "(", "Y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "self", ".", "lin", "=", "nn", ".", "Linear", "(", "X", ".", "size", "(", "1", ")", ",", "Y", ".", "size", "(", "1", ")", ")", "\n", "W", ",", "b", "=", "self", ".", "lin", ".", "parameters", "(", ")", "\n", "W", ".", "data", "=", "torch", ".", "Tensor", "(", "Theta", "[", ":", "-", "1", ",", ":", "]", ".", "T", ")", "\n", "b", ".", "data", "=", "torch", ".", "Tensor", "(", "Theta", "[", "-", "1", ",", ":", "]", ")", "\n", "\n", "\n", "# Set up non-linear network of", "\n", "# Linear -> BatchNorm -> ReLU -> Dropout layers", "\n", "layer_sizes", "=", "[", "X", ".", "size", "(", "1", ")", "]", "+", "hidden_layer_sizes", "\n", "layers", "=", "reduce", "(", "operator", ".", "add", ",", "\n", "[", "[", "nn", ".", "Linear", "(", "a", ",", "b", ")", ",", "nn", ".", "BatchNorm1d", "(", "b", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "]", "\n", "for", "a", ",", "b", "in", "zip", "(", "layer_sizes", "[", "0", ":", "-", "1", "]", ",", "layer_sizes", "[", "1", ":", "]", ")", "]", ")", "\n", "layers", "+=", "[", "nn", ".", "Linear", "(", "layer_sizes", "[", "-", "1", "]", ",", "Y", ".", "size", "(", "1", ")", ")", "]", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.Net.forward": [[40, 43], ["model_classes.Net.sig.expand", "model_classes.Net.lin", "model_classes.Net.net", "x.size", "model_classes.Net.sig.size"], "methods", ["None"], ["        ", "return", "self", ".", "lin", "(", "x", ")", "+", "self", ".", "net", "(", "x", ")", "\n", "\n", "", "", "class", "ScheduleBattery", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "''' Get battery schedule that maximizes objective '''", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.Net.set_sig": [[44, 48], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt().data.unsqueeze", "torch.sqrt().data.unsqueeze", "torch.sqrt().data.unsqueeze", "torch.sqrt().data.unsqueeze", "torch.sqrt().data.unsqueeze", "torch.sqrt().data.unsqueeze", "torch.sqrt().data.unsqueeze", "torch.sqrt().data.unsqueeze", "torch.sqrt().data.unsqueeze", "model_classes.Net.lin", "model_classes.Net.net", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "super", "(", "ScheduleBattery", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "T", "=", "params", "[", "'T'", "]", "\n", "T", "=", "params", "[", "'T'", "]", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.SolveSchedulingQP.__init__": [[108, 118], ["torch.Module.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "numpy.eye", "numpy.eye", "numpy.vstack", "model_classes.SolveSchedulingQP.e.cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.SolveScheduling.__init__"], ["", "", ""]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.SolveSchedulingQP.forward": [[119, 130], ["z0.size", "torch.cat().double", "torch.cat().double", "torch.cat().double", "torch.cat().double", "torch.cat().double", "torch.cat().double", "torch.cat().double", "torch.cat().double", "torch.cat().double", "model_classes.SolveSchedulingQP.G.unsqueeze().expand", "model_classes.SolveSchedulingQP.h.unsqueeze().expand", "model_classes.SolveSchedulingQP.G.size", "model_classes.SolveSchedulingQP.G.size", "model_classes.SolveSchedulingQP.h.size", "qpth.qp.QPFunction", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_classes.SolveSchedulingQP.G.unsqueeze", "model_classes.SolveSchedulingQP.h.unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "range", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag"], "methods", ["None"], []], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.SolveScheduling.__init__": [[135, 147], ["torch.Module.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "numpy.eye", "numpy.eye", "numpy.vstack", "model_classes.SolveScheduling.e.cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.SolveScheduling.__init__"], []], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.SolveScheduling.forward": [[148, 175], ["mu.size", "mu.detach", "mu.detach", "sig.detach", "range", "print", "model_classes.GLinearApprox", "model_classes.GQuadraticApprox", "model_classes.SolveSchedulingQP", "model_classes.GLinearApprox", "model_classes.GQuadraticApprox", "model_classes.SolveSchedulingQP"], "methods", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.GLinearApprox", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.GQuadraticApprox", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.GLinearApprox", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.GQuadraticApprox"], []], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.GLinearApprox": [[50, 75], ["ctx.save_for_backward", "scipy.norm", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "scipy.norm", "torch.tensor", "torch.tensor", "torch.tensor", "mu.cpu().numpy", "sig.cpu().numpy", "res.cuda.cuda", "mu.cpu().numpy", "sig.cpu().numpy", "st.norm.pdf", "z.cpu().numpy", "mu.cpu", "sig.cpu", "st.norm.cdf", "mu.cpu", "sig.cpu", "z.cpu().numpy", "z.cpu", "z.cpu"], "function", ["None"], ["IT", "=", "torch", ".", "eye", "(", "T", ")", "\n", "eff", "=", "params", "[", "'eff'", "]", "\n", "in_max", "=", "params", "[", "'in_max'", "]", "\n", "out_max", "=", "params", "[", "'out_max'", "]", "\n", "self", ".", "B", "=", "params", "[", "'B'", "]", "\n", "self", ".", "lam", "=", "params", "[", "'lambda'", "]", "\n", "\n", "D1", "=", "torch", ".", "cat", "(", "[", "torch", ".", "eye", "(", "T", "-", "1", ")", ",", "torch", ".", "zeros", "(", "1", ",", "T", "-", "1", ")", "]", ",", "0", ")", "\n", "D2", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "1", ",", "T", "-", "1", ")", ",", "torch", ".", "eye", "(", "T", "-", "1", ")", "]", ",", "0", ")", "\n", "\n", "self", ".", "Q", "=", "block", "(", "[", "[", "eps", "*", "torch", ".", "eye", "(", "T", ")", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "eps", "*", "torch", ".", "eye", "(", "T", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "self", ".", "lam", "*", "torch", ".", "eye", "(", "T", ")", "]", "]", ")", "\n", "\n", "Ae_list", "=", "[", "[", "torch", ".", "zeros", "(", "1", ",", "T", ")", ",", "torch", ".", "zeros", "(", "1", ",", "T", ")", ",", "torch", ".", "ones", "(", "1", ",", "1", ")", ",", "torch", ".", "zeros", "(", "1", ",", "T", "-", "1", ")", "]", ",", "\n", "[", "D1", ".", "t", "(", ")", "*", "eff", ",", "-", "D1", ".", "t", "(", ")", ",", "D1", ".", "t", "(", ")", "-", "D2", ".", "t", "(", ")", "]", "]", "\n", "self", ".", "Ae", "=", "torch", ".", "cat", "(", "[", "torch", ".", "cat", "(", "x", ",", "1", ")", "for", "x", "in", "Ae_list", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "be", "=", "torch", ".", "cat", "(", "[", "(", "self", ".", "B", "/", "2", ")", "*", "torch", ".", "ones", "(", "1", ")", ",", "torch", ".", "zeros", "(", "T", "-", "1", ")", "]", ")", "\n", "\n", "self", ".", "A", "=", "block", "(", "[", "\n", "[", "torch", ".", "eye", "(", "T", ")", ",", "0", ",", "0", "]", ",", "\n", "[", "-", "torch", ".", "eye", "(", "T", ")", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "torch", ".", "eye", "(", "T", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "-", "torch", ".", "eye", "(", "T", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "torch", ".", "eye", "(", "T", ")", "]", ",", "\n", "[", "0", ",", "0", ",", "-", "torch", ".", "eye", "(", "T", ")", "]", "]", ")", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.model_classes.GQuadraticApprox": [[77, 104], ["ctx.save_for_backward", "scipy.norm", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "scipy.norm", "torch.tensor", "torch.tensor", "torch.tensor", "mu.cpu().numpy", "sig.cpu().numpy", "res.cuda.cuda", "mu.cpu().numpy", "sig.cpu().numpy", "st.norm.pdf", "st.norm.pdf", "z.cpu().numpy", "mu.cpu", "sig.cpu", "z.cpu().numpy", "mu.cpu", "sig.cpu", "z.cpu", "z.cpu"], "function", ["None"], ["[", "in_max", "]", "*", "T", "+", "[", "0", "]", "*", "T", "+", "[", "out_max", "]", "*", "T", "+", "[", "0", "]", "*", "T", "+", "[", "self", ".", "B", "]", "*", "T", "+", "[", "0", "]", "*", "T", ")", "\n", "\n", "if", "USE_GPU", ":", "\n", "            ", "self", ".", "Q", "=", "self", ".", "Q", ".", "cuda", "(", ")", "\n", "self", ".", "Ae", "=", "self", ".", "Ae", ".", "cuda", "(", ")", "\n", "self", ".", "be", "=", "self", ".", "be", ".", "cuda", "(", ")", "\n", "self", ".", "A", "=", "self", ".", "A", ".", "cuda", "(", ")", "\n", "self", ".", "b", "=", "self", ".", "b", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "log_prices", ")", ":", "\n", "        ", "prices", "=", "torch", ".", "exp", "(", "log_prices", ")", "\n", "\n", "nBatch", "=", "prices", ".", "size", "(", "0", ")", "\n", "T", "=", "self", ".", "T", "\n", "\n", "Q", "=", "self", ".", "Q", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "nBatch", ",", "self", ".", "Q", ".", "size", "(", "0", ")", ",", "self", ".", "Q", ".", "size", "(", "1", ")", ")", "\n", "c", "=", "torch", ".", "cat", "(", "\n", "[", "prices", ",", "-", "prices", ",", "\n", "-", "(", "self", ".", "lam", "*", "self", ".", "B", "*", "torch", ".", "ones", "(", "T", ",", "device", "=", "DEVICE", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "nBatch", ",", "T", ")", "]", ",", "\n", "1", ")", "\n", "A", "=", "self", ".", "A", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "nBatch", ",", "self", ".", "A", ".", "size", "(", "0", ")", ",", "self", ".", "A", ".", "size", "(", "1", ")", ")", "\n", "b", "=", "self", ".", "b", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "nBatch", ",", "self", ".", "b", ".", "size", "(", "0", ")", ")", "\n", "Ae", "=", "self", ".", "Ae", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "nBatch", ",", "self", ".", "Ae", ".", "size", "(", "0", ")", ",", "self", ".", "Ae", ".", "size", "(", "1", ")", ")", "\n", "be", "=", "self", ".", "be", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "nBatch", ",", "self", ".", "be", ".", "size", "(", "0", ")", ")", "\n", "\n", "out", "=", "QPFunction", "(", "verbose", "=", "True", ")", "(", "Q", ".", "double", "(", ")", ",", "c", ".", "double", "(", ")", ",", "A", ".", "double", "(", ")", ",", "b", ".", "double", "(", ")", ",", "Ae", ".", "double", "(", ")", ",", "be", ".", "double", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.main.main": [[27, 109], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "setproctitle.setproctitle", "main.load_data_with_features", "main.load_data_with_features", "numpy.concatenate", "numpy.concatenate", "int", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "plot.plot_results", "numpy.std", "os.path.join", "model_classes.Net", "nets.run_rmse_net", "nets.eval_net", "nets.run_weighted_rmse_net", "nets.eval_net", "numpy.random.permutation", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "model_classes.Net", "nets.run_rmse_net", "nets.run_task_net", "nets.eval_net", "map", "numpy.mean", "len", "str", "os.path.exists", "os.makedirs", "model_rmse.cuda.cuda", "model_task.cuda.cuda", "range", "int", "int", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.main.load_data_with_features", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.main.load_data_with_features", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.plot.plot_results", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.run_rmse_net", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.eval_net", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.run_weighted_rmse_net", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.eval_net", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.run_rmse_net", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.run_task_net", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.nets.eval_net"], ["parser", ".", "add_argument", "(", "'--save'", ",", "type", "=", "str", ",", "\n", "metavar", "=", "'save-folder'", ",", "help", "=", "'prefix to add to save path'", ")", "\n", "parser", ".", "add_argument", "(", "'--nRuns'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "metavar", "=", "'runs'", ",", "help", "=", "'number of runs'", ")", "\n", "parser", ".", "add_argument", "(", "'--trueModel'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "'linear'", ",", "'nonlinear'", ",", "'both'", "]", ",", "default", "=", "'both'", ",", "\n", "help", "=", "'true y|x distribution'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "setproctitle", ".", "setproctitle", "(", "'newsvendor-{}'", ".", "format", "(", "args", ".", "trueModel", ")", ")", "\n", "\n", "# Cost params for newsvendor task loss", "\n", "params", "=", "init_newsvendor_params", "(", ")", "\n", "\n", "true_model_types", "=", "[", "'linear'", ",", "'nonlinear'", "]", "if", "args", ".", "trueModel", "==", "'both'", "else", "[", "args", ".", "trueModel", "]", "\n", "\n", "for", "true_model", "in", "true_model_types", ":", "\n", "\n", "        ", "save_folder", "=", "os", ".", "path", ".", "join", "(", "'results'", ",", "true_model", ")", "if", "args", ".", "save", "is", "None", "else", "os", ".", "path", ".", "join", "(", "'{}-results'", ".", "format", "(", "args", ".", "save", ")", ",", "true_model", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_folder", ")", "\n", "\n", "", "results_file", "=", "os", ".", "path", ".", "join", "(", "save_folder", ",", "'inventory_results.csv'", ")", "\n", "\n", "# Randomly generate true params for p(y|x;\\theta).", "\n", "# Set with_seed=True to replicate paper true params.", "\n", "Theta_true_lin", ",", "Theta_true_sq", "=", "init_theta_true", "(", "\n", "params", ",", "is_linear", "=", "(", "true_model", "==", "'linear'", ")", ",", "with_seed", "=", "True", ")", "\n", "\n", "# Test data. Set with_seed=True to replicate paper test data.", "\n", "X_test", ",", "Y_test", "=", "gen_data", "(", "1000", ",", "params", ",", "Theta_true_lin", ",", "Theta_true_sq", ",", "\n", "with_seed", "=", "True", ")", "\n", "\n", "# MLE with true params", "\n", "f_eval_mle_t", ",", "z_buy_t", ",", "f_opt_t", "=", "mle", ".", "newsvendor_eval", "(", "\n", "X_test", ",", "Y_test", ",", "Theta_true_lin", ",", "Theta_true_sq", ",", "params", ")", "\n", "print", "(", "np", ".", "mean", "(", "f_eval_mle_t", ")", ")", "\n", "mle_true_score", "=", "np", ".", "mean", "(", "f_eval_mle_t", ")", "\n", "\n", "with", "open", "(", "results_file", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "'{},{}\\n'", ".", "format", "(", "'mle_true:'", ",", "mle_true_score", ")", ")", "\n", "f", ".", "write", "(", "'{},{},{},{},{},{},{}\\n'", ".", "format", "(", "\n", "'m'", ",", "'mle-linear'", ",", "'mle-nonlinear'", ",", "'policy-linear'", ",", "'policy-nonlinear'", ",", "'task-linear'", ",", "'task-nonlinear'", ")", ")", "\n", "\n", "", "for", "run", "in", "range", "(", "args", ".", "nRuns", ")", ":", "\n", "            ", "for", "m", "in", "[", "100", ",", "200", ",", "300", ",", "500", ",", "1000", ",", "3000", ",", "5000", ",", "10000", "]", ":", "\n", "\n", "                ", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                    ", "f", ".", "write", "(", "'\\n{},'", ".", "format", "(", "m", ")", ")", "\n", "\n", "# Generate data based on true params", "\n", "", "try", ":", "\n", "                    ", "X", ",", "Y", "=", "gen_data", "(", "m", ",", "params", ",", "Theta_true_lin", ",", "Theta_true_sq", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "'gen'", ",", "\n", "results_file", ",", "newline", "=", "True", ")", "\n", "\n", "# MLE with linear softmax regression", "\n", "", "try", ":", "\n", "                    ", "Theta_est", "=", "mle", ".", "linear_softmax_reg", "(", "X", ",", "Y", ",", "params", ")", "\n", "f_eval_mle", ",", "z_buy", ",", "f_opt", "=", "mle", ".", "newsvendor_eval", "(", "X_test", ",", "Y_test", ",", "Theta_est", ",", "\n", "np", ".", "zeros", "(", "(", "params", "[", "'n'", "]", ",", "len", "(", "params", "[", "'d'", "]", ")", ")", ")", ",", "\n", "params", ")", "\n", "mle_score", "=", "np", ".", "mean", "(", "f_eval_mle", ")", "\n", "\n", "print", "(", "mle_score", ")", "\n", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "'{},'", ".", "format", "(", "mle_score", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "'mle-linear'", ",", "results_file", ")", "\n", "\n", "# Nonlinear MLE net", "\n", "", "try", ":", "\n", "                    ", "mle_nonlin_score", "=", "mle_net", ".", "run_mle_net", "(", "\n", "X", ",", "Y", ",", "X_test", ",", "Y_test", ",", "params", ")", "\n", "\n", "print", "(", "mle_nonlin_score", ")", "\n", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "'{},'", ".", "format", "(", "mle_nonlin_score", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.main.load_data_with_features": [[111, 158], ["pytz.timezone", "pandas.read_csv", "df[].apply", "df[].apply", "df[].apply", "pd.read_csv.drop_duplicates", "pd.read_csv.pivot", "pd.read_csv.pivot", "df_load.transpose().fillna().transpose.transpose().fillna().transpose", "df_load.transpose().fillna().transpose.transpose().fillna().transpose", "df_temp.transpose().fillna().transpose.transpose().fillna().transpose", "df_temp.transpose().fillna().transpose.transpose().fillna().transpose", "pandas.tseries.holiday.USFederalHolidayCalendar().holidays().to_pydatetime", "set", "pandas.DataFrame", "numpy.hstack().astype", "df_load.transpose().fillna().transpose.reset_index", "x.date", "df_load.transpose().fillna().transpose.transpose().fillna", "df_load.transpose().fillna().transpose.transpose().fillna", "df_temp.transpose().fillna().transpose.transpose().fillna", "df_temp.transpose().fillna().transpose.transpose().fillna", "pandas.tseries.holiday.USFederalHolidayCalendar().holidays", "h.date", "s.apply", "s.apply", "s.apply", "s.apply", "s.apply", "numpy.hstack", "df_load.transpose().fillna().transpose.transpose", "df_load.transpose().fillna().transpose.transpose", "df_temp.transpose().fillna().transpose.transpose", "df_temp.transpose().fillna().transpose.transpose", "pandas.tseries.holiday.USFederalHolidayCalendar", "numpy.cos", "numpy.sin", "numpy.ones", "x.isoweekday", "pytz.timezone.localize().dst", "len", "pytz.timezone.localize", "float", "float", "datetime.datetime.combine", "datetime.datetime.min.time", "x.timetuple", "x.timetuple"], "function", ["None"], ["\n", "# Pure end-to-end policy neural net (linear)", "\n", "", "try", ":", "\n", "                    ", "policy_lin_score", "=", "policy_net", ".", "run_policy_net", "(", "\n", "X", ",", "Y", ",", "X_test", ",", "Y_test", ",", "params", ")", "\n", "\n", "print", "(", "policy_lin_score", ")", "\n", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                            ", "f", ".", "write", "(", "'{},'", ".", "format", "(", "policy_lin_score", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "'policy-linear'", ",", "results_file", ")", "\n", "\n", "# Pure end-to-end policy neural net (nonlinear)", "\n", "", "try", ":", "\n", "                    ", "policy_nonlin_score", "=", "policy_net", ".", "run_policy_net", "(", "\n", "X", ",", "Y", ",", "X_test", ",", "Y_test", ",", "params", ",", "is_nonlinear", "=", "True", ")", "\n", "\n", "print", "(", "policy_nonlin_score", ")", "\n", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "'{},'", ".", "format", "(", "policy_nonlin_score", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "'policy-nonlinear'", ",", "results_file", ")", "\n", "\n", "# Model-based end-to-end model (linear)", "\n", "", "try", ":", "\n", "                    ", "e2e_lin_score", "=", "task_net", ".", "run_task_net", "(", "\n", "X", ",", "Y", ",", "X_test", ",", "Y_test", ",", "params", ")", "\n", "\n", "print", "(", "e2e_lin_score", ")", "\n", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "'{},'", ".", "format", "(", "e2e_lin_score", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "\n", "'task-linear'", ",", "results_file", ")", "\n", "\n", "# Model-based end-to-end model (nonlinear)", "\n", "", "try", ":", "\n", "                    ", "e2e_nonlin_score", "=", "task_net", ".", "run_task_net", "(", "\n", "X", ",", "Y", ",", "X_test", ",", "Y_test", ",", "params", ",", "is_nonlinear", "=", "True", ")", "\n", "\n", "print", "(", "e2e_nonlin_score", ")", "\n", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "'{}\\n'", ".", "format", "(", "e2e_nonlin_score", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "log_error_and_write", "(", "e", ",", "save_folder", ",", "m", ",", "run", ",", "results_file", ",", "\n", "'task-nonlinear'", ",", "newline", "=", "True", ")", "\n", "\n", "# Plot results as we go", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.plot.load_results": [[16, 42], ["pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "df_rmse.append.append", "pandas.DataFrame", "df_task.append.append", "tensors.append", "open", "arrays.append", "pandas.DataFrame", "torch.load", "pandas.DataFrame", "os.path.join", "numpy.load", "os.path.join"], "function", ["None"], ["# sys.excepthook = ultratb.FormattedTB(mode='Verbose',", "\n", "#      color_scheme='Linux', call_pdb=1)", "\n", "\n", "def", "plot_results", "(", "save_folder", ",", "true_model", ")", ":", "\n", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "save_folder", ",", "'inventory_results.csv'", ")", "\n", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "mle_true_score", "=", "float", "(", "f", ".", "readline", "(", ")", ".", "split", "(", "','", ")", "[", "1", "]", ")", "\n", "", "df", "=", "pd", ".", "read_csv", "(", "filename", ",", "index_col", "=", "0", ",", "skiprows", "=", "1", ",", "na_values", "=", "[", "'None'", "]", ",", "\n", "dtype", "=", "float", ")", "\n", "df", "[", "'mle_true'", "]", "=", "mle_true_score", "\n", "\n", "df_linear", "=", "df", "[", "[", "'mle_true'", ",", "'task-linear'", ",", "'mle-linear'", ",", "'policy-linear'", "]", "]", "\n", "df_nonlinear", "=", "df", "[", "[", "'mle_true'", ",", "'task-nonlinear'", ",", "'mle-nonlinear'", ",", "'policy-nonlinear'", "]", "]", "\n", "\n", "# Means and std deviations of losses for each model and training set size", "\n", "means_linear", "=", "df_linear", ".", "groupby", "(", "df_linear", ".", "index", ")", ".", "mean", "(", ")", "\n", "stds_linear", "=", "df_linear", ".", "groupby", "(", "df_linear", ".", "index", ")", ".", "std", "(", ")", "\n", "\n", "means_nonlinear", "=", "df_nonlinear", ".", "groupby", "(", "df_nonlinear", ".", "index", ")", ".", "mean", "(", ")", "\n", "stds_nonlinear", "=", "df_nonlinear", ".", "groupby", "(", "df_nonlinear", ".", "index", ")", ".", "std", "(", ")", "\n", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "2", ",", "sharey", "=", "True", ")", "\n", "fig", ".", "set_size_inches", "(", "8.5", ",", "2.5", ")", "\n", "\n", "styles", "=", "[", "'--'", ",", "'-'", ",", "':'", ",", "'-.'", "]", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.plot.get_means_stds": [[43, 45], ["df.groupby().mean", "df.groupby().std", "df.groupby", "df.groupby"], "function", ["None"], ["colors", "=", "[", "'gray'", "]", "+", "[", "sns", ".", "color_palette", "(", "n_colors", "=", "8", ")", "[", "i", "]", "for", "i", "in", "[", "1", ",", "4", ",", "2", "]", "]", "\n", "\n", "# For size of error bars", "\n"]], "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.plot.plot_results": [[46, 94], ["plot.load_results", "plot.get_means_stds", "plot.get_means_stds", "matplotlib.subplots", "fig.set_size_inches", "zip", "ax.set_ylabel", "zip", "ax2.set_ylabel", "matplotlib.tight_layout", "matplotlib.subplots_adjust", "fig.text", "ax.legend", "fig.savefig", "rmse_mean[].plot", "a.margins", "a.grid", "a.xaxis.set_major_locator", "a.set_xlim", "a.set_ylim", "os.path.join", "task_mean[].plot", "ax2.errorbar", "task_mean[].plot", "matplotlib.MultipleLocator", "seaborn.color_palette"], "function", ["home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.plot.load_results", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.plot.get_means_stds", "home.repos.pwc.inspect_result.locuslab_e2e-model-learning.power_sched.plot.get_means_stds"], ["capsize", "=", "2", "\n", "capthick", "=", "1", "\n", "\n", "ax", "=", "axes", "[", "0", "]", "\n", "for", "col", ",", "style", ",", "color", "in", "zip", "(", "means_linear", ".", "columns", ",", "styles", ",", "colors", ")", ":", "\n", "        ", "if", "col", "==", "'mle_true'", ":", "\n", "            ", "means_linear", "[", "col", "]", ".", "plot", "(", "ax", "=", "ax", ",", "lw", "=", "2", ",", "style", "=", "style", ",", "color", "=", "color", ")", "\n", "", "else", ":", "\n", "            ", "means_linear", "[", "col", "]", ".", "plot", "(", "ax", "=", "ax", ",", "lw", "=", "2", ",", "fmt", "=", "style", ",", "color", "=", "color", ",", "yerr", "=", "stds_linear", ",", "\n", "capsize", "=", "capsize", ",", "capthick", "=", "capthick", ")", "\n", "", "", "ax", ".", "set_xlabel", "(", "'linear hypothesis'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Inventory Stock Cost'", ")", "\n", "ax", ".", "set_ylim", "(", "mle_true_score", "-", "5", ",", ")", "\n", "ax", ".", "grid", "(", "linestyle", "=", "':'", ",", "linewidth", "=", "'0.5'", ",", "color", "=", "'gray'", ")", "\n", "\n", "ax", "=", "axes", "[", "1", "]", "\n", "for", "col", ",", "style", ",", "color", "in", "zip", "(", "means_nonlinear", ".", "columns", ",", "styles", ",", "colors", ")", ":", "\n", "        ", "if", "col", "==", "'mle_true'", ":", "\n", "            ", "means_nonlinear", "[", "col", "]", ".", "plot", "(", "ax", "=", "ax", ",", "lw", "=", "2", ",", "style", "=", "style", ",", "color", "=", "color", ")", "\n", "", "else", ":", "\n", "            ", "means_nonlinear", "[", "col", "]", ".", "plot", "(", "ax", "=", "ax", ",", "lw", "=", "2", ",", "fmt", "=", "style", ",", "color", "=", "color", ",", "yerr", "=", "stds_nonlinear", ",", "\n", "capsize", "=", "capsize", ",", "capthick", "=", "capthick", ")", "\n", "", "", "ax", ".", "set_xlabel", "(", "'nonlinear hypothesis'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Inventory Stock Cost'", ")", "\n", "ax", ".", "grid", "(", "linestyle", "=", "':'", ",", "linewidth", "=", "'0.5'", ",", "color", "=", "'gray'", ")", "\n", "\n", "\n", "ax", ".", "set_xlabel", "(", "'Number of Samples'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Inventory Stock Cost'", ")", "\n", "\n", "legend", "=", "ax", ".", "legend", "(", "labels", "=", "[", "'True Params'", ",", "'Task-based (our method)'", ",", "'MLE'", ",", "'Policy Optimizer'", "]", ",", "\n", "loc", "=", "'center left'", ",", "bbox_to_anchor", "=", "(", "-", "0.2", ",", "-", "0.4", ")", ",", "\n", "shadow", "=", "False", ",", "ncol", "=", "5", ",", "fontsize", "=", "6.5", ",", "borderpad", "=", "0", ",", "frameon", "=", "False", ")", "\n", "\n", "fig", ".", "savefig", "(", "\"{}.pdf\"", ".", "format", "(", "filename", "[", ":", "-", "4", "]", ")", ",", "dpi", "=", "100", ",", "encoding", "=", "'pdf'", ")", "\n", "", ""]]}