{"home.repos.pwc.inspect_result.crockwell_pixelsynth.None.demo.process_demo_data": [[27, 99], ["torchvision.transforms.Compose", "numpy.array", "numpy.array", "numpy.linalg.inv", "PIL.Image.open", "numpy.array", "numpy.array", "numpy.array", "numpy.matmul", "numpy.matmul", "numpy.vstack().astype", "numpy.linalg.inv", "os.path.join", "numpy.array", "trn.Compose.unsqueeze", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "numpy.vstack", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "trn.Compose.", "numpy.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["def", "process_demo_data", "(", "opts", "=", "None", ")", ":", "\n", "    ", "input_transform", "=", "trn", ".", "Compose", "(", "\n", "[", "\n", "trn", ".", "Resize", "(", "(", "opts", ".", "W", ",", "opts", ".", "W", ")", ")", ",", "\n", "trn", ".", "ToTensor", "(", ")", ",", "\n", "trn", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "offset", "=", "np", ".", "array", "(", "\n", "[", "[", "2", ",", "0", ",", "-", "1", "]", ",", "[", "0", ",", "-", "2", ",", "1", "]", ",", "[", "0", ",", "0", ",", "-", "1", "]", "]", ",", "# Flip ys to match habitat", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "# Make z negative to match habitat (which assumes a negative z)", "\n", "\n", "K", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "1.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0", ",", "1.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "1.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "\n", "invK", "=", "np", ".", "linalg", ".", "inv", "(", "K", ")", "\n", "\n", "rgbs", "=", "[", "]", "\n", "cameras", "=", "[", "]", "\n", "image", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "'demo'", ",", "opts", ".", "demo_img_name", ")", ")", "\n", "input_shape", "=", "np", ".", "array", "(", "image", ")", ".", "shape", "\n", "ratio", "=", "input_shape", "[", "1", "]", "/", "input_shape", "[", "0", "]", "\n", "rgbs", "+=", "[", "input_transform", "(", "image", ")", ".", "unsqueeze", "(", "0", ")", "]", "\n", "\n", "# The reference camera position can just be the identity", "\n", "extrinsics", "=", "np", ".", "array", "(", "\n", "[", "[", "1.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "[", "0.0", ",", "1.0", ",", "0.0", ",", "0.0", "]", ",", "[", "0.0", ",", "0.0", ",", "1.0", ",", "0.0", "]", "]", ")", "\n", "\n", "# Accurate intrinsics are only important if we are trying to match a ground", "\n", "# truth output. Here we just give intrinsics for the input image with the", "\n", "# principal point in the center.", "\n", "intrinsics", "=", "np", ".", "array", "(", "[", "1.0", ",", "1.0", "*", "ratio", ",", "0.5", ",", "0.5", "]", ")", "\n", "\n", "origK", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "intrinsics", "[", "0", "]", ",", "0", ",", "intrinsics", "[", "2", "]", "]", ",", "\n", "[", "0", ",", "intrinsics", "[", "1", "]", ",", "intrinsics", "[", "3", "]", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "Ktmp", "=", "np", ".", "matmul", "(", "offset", ",", "origK", ")", "\n", "\n", "origP", "=", "extrinsics", "\n", "P", "=", "np", ".", "matmul", "(", "Ktmp", ",", "origP", ")", "# Merge these together to match habitat", "\n", "P", "=", "np", ".", "vstack", "(", "(", "P", ",", "np", ".", "zeros", "(", "(", "1", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", ".", "astype", "(", "\n", "np", ".", "float32", "\n", ")", "\n", "P", "[", "3", ",", "3", "]", "=", "1", "\n", "\n", "Pinv", "=", "np", ".", "linalg", ".", "inv", "(", "P", ")", "\n", "\n", "cameras", "+=", "[", "\n", "{", "\n", "\"P\"", ":", "torch", ".", "tensor", "(", "P", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "\"Pinv\"", ":", "torch", ".", "tensor", "(", "Pinv", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "\"OrigP\"", ":", "torch", ".", "tensor", "(", "origP", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "\"K\"", ":", "torch", ".", "tensor", "(", "K", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "\"Kinv\"", ":", "torch", ".", "tensor", "(", "invK", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "}", "\n", "]", "\n", "\n", "return", "{", "\"images\"", ":", "rgbs", ",", "\"cameras\"", ":", "cameras", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.demo.save_scene": [[100, 123], ["os.path.exists", "os.makedirs", "range", "max", "torchvision.utils.save_image", "int", "str"], "function", ["None"], ["", "def", "save_scene", "(", "pred_imgs", ",", "test_ops", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "\n", "test_ops", ".", "result_folder", "\n", "+", "\"/scene/\"", "\n", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "\n", "test_ops", ".", "result_folder", "\n", "+", "\"/scene/\"", "\n", ")", "\n", "\n", "", "for", "direction", "in", "test_ops", ".", "directions", ":", "\n", "        ", "if", "direction", "in", "[", "'S'", ",", "'C'", "]", ":", "\n", "            ", "continue", "\n", "\n", "", "num_split", "=", "test_ops", ".", "num_split", "\n", "if", "direction", "in", "[", "'U'", ",", "'D'", ",", "'UL'", ",", "'UR'", ",", "'DR'", ",", "'DL'", "]", ":", "\n", "            ", "num_split", "=", "max", "(", "int", "(", "test_ops", ".", "num_split", "/", "2", ")", ",", "1", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "num_split", "+", "1", ")", ":", "\n", "            ", "torchvision", ".", "utils", ".", "save_image", "(", "\n", "pred_imgs", "[", "\"PredImg_\"", "+", "direction", "+", "'_'", "+", "str", "(", "i", ")", "]", ",", "\n", "test_ops", ".", "result_folder", "\n", "+", "\"/scene/output_image_%s_%04d.png\"", "%", "(", "direction", ",", "i", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.demo.save_video": [[125, 165], ["torchvision.utils.save_image", "os.path.exists", "os.makedirs", "range", "torchvision.utils.save_image", "range", "torchvision.utils.save_image", "str", "str", "str"], "function", ["None"], ["", "", "", "def", "save_video", "(", "pred_imgs", ",", "test_ops", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "\n", "test_ops", ".", "result_folder", "\n", "+", "\"/video/\"", "\n", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "\n", "test_ops", ".", "result_folder", "\n", "+", "\"/video/\"", "\n", ")", "\n", "", "video_ct", "=", "0", "\n", "directions", "=", "[", "'R'", ",", "'L'", ",", "'C'", ",", "'C'", ",", "'S'", ",", "'S'", "]", "\n", "torchvision", ".", "utils", ".", "save_image", "(", "\n", "pred_imgs", "[", "\"PredImg_\"", "+", "'R'", "+", "'_'", "+", "str", "(", "0", ")", "]", ",", "\n", "test_ops", ".", "result_folder", "\n", "+", "\"/video/%d.png\"", "%", "(", "video_ct", ")", ",", "\n", ")", "\n", "\n", "video_ct", "+=", "1", "\n", "\n", "for", "direction", "in", "directions", ":", "\n", "        ", "num_split", "=", "test_ops", ".", "num_split", "\n", "if", "direction", "in", "[", "'S'", ",", "'C'", "]", ":", "\n", "            ", "num_split", "=", "test_ops", ".", "num_split", "*", "2", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "num_split", ")", ":", "\n", "            ", "torchvision", ".", "utils", ".", "save_image", "(", "\n", "pred_imgs", "[", "\"PredImg_\"", "+", "direction", "+", "'_'", "+", "str", "(", "i", ")", "]", ",", "\n", "test_ops", ".", "result_folder", "\n", "+", "\"/video/%d.png\"", "%", "(", "video_ct", ")", ",", "\n", ")", "\n", "video_ct", "+=", "1", "\n", "\n", "", "if", "direction", "not", "in", "[", "'S'", ",", "'C'", "]", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_split", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "torchvision", ".", "utils", ".", "save_image", "(", "\n", "pred_imgs", "[", "\"PredImg_\"", "+", "direction", "+", "'_'", "+", "str", "(", "i", ")", "]", ",", "\n", "test_ops", ".", "result_folder", "\n", "+", "\"/video/%d.png\"", "%", "(", "video_ct", ")", ",", "\n", ")", "\n", "video_ct", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.demo.save_img": [[166, 178], ["torchvision.utils.save_image", "torchvision.utils.save_image"], "function", ["None"], ["", "", "", "", "def", "save_img", "(", "pred_imgs", ",", "test_ops", ")", ":", "\n", "    ", "torchvision", ".", "utils", ".", "save_image", "(", "\n", "pred_imgs", "[", "\"PredImg\"", "]", ",", "\n", "test_ops", ".", "result_folder", "\n", "+", "\"/output_image_%s_%d.png\"", "%", "(", "test_ops", ".", "direction", ",", "test_ops", ".", "rotation", ")", ",", "\n", ")", "\n", "\n", "if", "pred_imgs", "[", "\"FeaturesImg\"", "]", ".", "shape", "[", "1", "]", "==", "3", ":", "\n", "        ", "torchvision", ".", "utils", ".", "save_image", "(", "\n", "pred_imgs", "[", "\"FeaturesImg\"", "]", ",", "\n", "test_ops", ".", "result_folder", "\n", "+", "\"/input_fs_image_%s_%d.png\"", "%", "(", "test_ops", ".", "direction", ",", "test_ops", ".", "rotation", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_lmconv.obs2str": [[216, 218], ["map"], "function", ["None"], ["", "def", "obs2str", "(", "obs", ")", ":", "\n", "    ", "return", "'x'", ".", "join", "(", "map", "(", "str", ",", "obs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_lmconv.random_resized_obs": [[219, 223], ["np.arange", "np.random.choice", "len", "int"], "function", ["None"], ["", "def", "random_resized_obs", "(", ")", ":", "\n", "    ", "idx", "=", "np", ".", "arange", "(", "len", "(", "resized_obses", ")", ")", "\n", "obs_i", "=", "np", ".", "random", ".", "choice", "(", "idx", ",", "p", "=", "args", ".", "resize_probs", ")", "\n", "return", "resized_obses", "[", "int", "(", "obs_i", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_lmconv.get_resize_collate_fn": [[224, 233], ["default_collate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate"], "function", ["None"], ["", "def", "get_resize_collate_fn", "(", "obs", ",", "default_collate", "=", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "default_collate", ")", ":", "\n", "    ", "if", "obs", "==", "dataset_obs", ":", "\n", "        ", "return", "default_collate", "\n", "\n", "", "def", "resize_collate_fn", "(", "batch", ")", ":", "\n", "        ", "X", ",", "y", "=", "default_collate", "(", "batch", ")", "\n", "X", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "X", ",", "size", "=", "obs", "[", "1", ":", "]", ",", "mode", "=", "\"bilinear\"", ")", "\n", "return", "[", "X", ",", "y", "]", "\n", "", "return", "resize_collate_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_lmconv.random_resize_collate": [[234, 240], ["default_collate", "train_lmconv.random_resized_obs", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_lmconv.random_resized_obs"], ["", "def", "random_resize_collate", "(", "batch", ",", "default_collate", "=", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "default_collate", ")", ":", "\n", "    ", "X", ",", "y", "=", "default_collate", "(", "batch", ")", "\n", "obs", "=", "random_resized_obs", "(", ")", "\n", "if", "obs", "!=", "dataset_obs", ":", "\n", "        ", "X", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "X", ",", "size", "=", "obs", "[", "1", ":", "]", ",", "mode", "=", "\"bilinear\"", ")", "\n", "", "return", "[", "X", ",", "y", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_lmconv.quantize": [[387, 395], ["continuous_x.long().float", "rescaling", "rescaling_inv", "continuous_x.long"], "function", ["None"], ["", "def", "quantize", "(", "x", ")", ":", "\n", "# Quantize [-1, 1] images to uint8 range, then put back in [-1, 1]", "\n", "# Can be used during sampling with --sample_quantize argument", "\n", "    ", "assert", "args", ".", "n_bits", "==", "8", "\n", "continuous_x", "=", "rescaling_inv", "(", "x", ")", "*", "255", "# Scale to [0, 255] range", "\n", "discrete_x", "=", "continuous_x", ".", "long", "(", ")", ".", "float", "(", ")", "# Round down", "\n", "quantized_x", "=", "discrete_x", "/", "255.", "\n", "return", "rescaling", "(", "quantized_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_lmconv.test": [[532, 591], ["tqdm.tqdm", "enumerate", "IPython.embed", "full_input[].cuda", "torch.one_hot().permute().to", "Variable", "range", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "loss_op", "loss_op.item", "tqdm.tqdm.set_description", "np.log", "range", "torch.stack().repeat().view().cuda.append", "torch.stack().repeat().view().cuda.append", "torch.stack().repeat().view().cuda.append", "model", "ourdata[].to", "np.log", "np.prod", "possible_masks.append", "torch.one_hot().permute", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "np.prod", "models.lmconv.masking.get_masks", "np.random.randint", "np.array", "torch.one_hot", "len", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "ourdata[].to", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.get_masks"], ["def", "test", "(", "model", ",", "test_loader", ",", "epoch", "=", "\"N/A\"", ",", "progress_bar", "=", "True", ",", "\n", "slice_op", "=", "None", ",", "sliced_obs", "=", "obs", ")", ":", "\n", "#logger.info(f\"Testing with ensemble of {len(all_masks)} orderings\")", "\n", "    ", "test_loss", "=", "0.", "\n", "pbar", "=", "tqdm", ".", "tqdm", "(", "test_loader", ",", "\n", "desc", "=", "f\"Test after epoch {epoch}\"", ",", "\n", "disable", "=", "(", "not", "progress_bar", ")", ",", "\n", "total", "=", "test_total", ")", "\n", "num_images", "=", "0", "\n", "\n", "possible_masks", "=", "[", "]", "\n", "for", "batch_idx", ",", "(", "full_input", ",", "_", ")", "in", "enumerate", "(", "pbar", ")", ":", "\n", "        ", "if", "batch_idx", "<", "5", ":", "\n", "            ", "for", "i", "in", "range", "(", "full_input", "[", "1", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "possible_masks", ".", "append", "(", "get_masks", "(", "np", ".", "array", "(", "full_input", "[", "1", "]", "[", "i", "]", ")", ",", "obs", "[", "1", "]", ",", "obs", "[", "2", "]", ",", "3", ",", "2", ",", "plot", "=", "False", ")", ")", "\n", "\n", "", "", "ourdata", "=", "full_input", "[", "0", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "# [-1, 1] range images", "\n", "\n", "num_images", "+=", "ourdata", ".", "shape", "[", "0", "]", "\n", "\n", "input", "=", "(", "\n", "F", ".", "one_hot", "(", "ourdata", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "to", "(", "torch", ".", "int64", ")", ",", "N_CLASS", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", ")", "\n", "\n", "input_var", "=", "Variable", "(", "input", ")", "\n", "\n", "# now we calculate likelihood in ordering corresponding to each image", "\n", "# we don't average across multiple.", "\n", "masks_init", "=", "[", "]", "\n", "masks_undilated", "=", "[", "]", "\n", "masks_dilated", "=", "[", "]", "\n", "# before, all_masks[index] was num_gpu,9,32*32", "\n", "# we change it to be 1,9,32*32, so that we can ", "\n", "# instead split up the entire batch across machines", "\n", "for", "i", "in", "range", "(", "full_input", "[", "1", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "mask_init", ",", "mask_undilated", ",", "mask_dilated", "=", "possible_masks", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "possible_masks", ")", ")", "]", "\n", "masks_init", ".", "append", "(", "mask_init", "[", "0", ":", "1", "]", ")", "\n", "masks_undilated", ".", "append", "(", "mask_undilated", "[", "0", ":", "1", "]", ")", "\n", "masks_dilated", ".", "append", "(", "mask_dilated", "[", "0", ":", "1", "]", ")", "\n", "", "masks_init", "=", "torch", ".", "stack", "(", "masks_init", ")", ".", "repeat", "(", "1", ",", "513", ",", "1", ",", "1", ")", ".", "view", "(", "-", "1", ",", "9", ",", "32", "*", "32", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "masks_undilated", "=", "torch", ".", "stack", "(", "masks_undilated", ")", ".", "repeat", "(", "1", ",", "160", ",", "1", ",", "1", ")", ".", "view", "(", "-", "1", ",", "9", ",", "32", "*", "32", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "masks_dilated", "=", "torch", ".", "stack", "(", "masks_dilated", ")", ".", "repeat", "(", "1", ",", "80", ",", "1", ",", "1", ")", ".", "view", "(", "-", "1", ",", "9", ",", "32", "*", "32", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "new_input", "=", "[", "input", ",", "masks_init", ",", "masks_undilated", ",", "masks_dilated", "]", "\n", "outputs", "=", "[", "model", "(", "new_input", ")", "]", "\n", "\n", "order_prefix", "=", "\"_\"", ".", "join", "(", "args", ".", "order", ")", "\n", "\n", "loss", "=", "loss_op", "(", "outputs", "[", "0", "]", ",", "ourdata", "[", ":", ",", "0", "]", ".", "to", "(", "torch", ".", "int64", ")", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "del", "loss", "\n", "\n", "deno", "=", "num_images", "*", "np", ".", "prod", "(", "sliced_obs", ")", "*", "np", ".", "log", "(", "2.", ")", "\n", "pbar", ".", "set_description", "(", "f\"Test after epoch {epoch} {test_loss / deno}\"", ")", "\n", "\n", "", "deno", "=", "num_images", "*", "np", ".", "prod", "(", "sliced_obs", ")", "*", "np", ".", "log", "(", "2.", ")", "\n", "assert", "deno", ">", "0", ",", "embed", "(", ")", "\n", "test_bpd", "=", "test_loss", "/", "deno", "\n", "return", "test_bpd", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_lmconv.get_sampling_images": [[593, 605], ["logger.info", "iter", "next"], "function", ["None"], ["", "def", "get_sampling_images", "(", "loader", ")", ":", "\n", "# Get batch of images to complete for inpainting, or None for --sample_region=full", "\n", "    ", "if", "args", ".", "sample_region", "==", "\"full\"", ":", "\n", "        ", "return", "None", "\n", "", "logger", ".", "info", "(", "'getting batch of images to complete...'", ")", "\n", "# Get sample_batch_size images from test set", "\n", "batches_to_complete", "=", "[", "]", "\n", "sample_iter", "=", "iter", "(", "loader", ")", "\n", "tmp", "=", "next", "(", "sample_iter", ")", "\n", "\n", "batch_to_complete", "=", "[", "tmp", "[", "0", "]", "[", "0", "]", ",", "tmp", "[", "0", "]", "[", "1", "]", "]", "\n", "return", "batch_to_complete", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_lmconv.sample": [[606, 661], ["torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.one_hot().permute().to", "model.eval", "enumerate", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "batch_to_complete.clone().cuda.cuda", "tqdm.tqdm", "Variable", "model", "range", "loss_op", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.one_hot().permute", "F.one_hot().permute().to.clone().cuda", "range", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.one_hot().to", "batch_to_complete_full[].to().cuda", "set", "enumerate", "np.array", "sample_indices.append", "rescaling_inv().cpu", "batch_to_complete.clone().cuda.cpu", "F.one_hot().permute().to.cpu", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.one_hot", "F.one_hot().permute().to.clone", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.one_hot", "batch_to_complete_full[].to", "batch_to_complete[].to", "int", "np.array.append", "rescaling_inv", "new_samples[].to", "batch_to_complete.clone().cuda.cpu", "F.one_hot().permute().to.cpu"], "function", ["None"], ["", "def", "sample", "(", "model", ",", "generation_idx", ",", "mask_init", ",", "mask_undilated", ",", "mask_dilated", ",", "batch_to_complete", ",", "obs", ")", ":", "\n", "    ", "batch_to_complete_full", "=", "torch", ".", "clone", "(", "batch_to_complete", ")", "\n", "batch_to_complete", "=", "(", "\n", "F", ".", "one_hot", "(", "batch_to_complete", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "to", "(", "torch", ".", "int64", ")", ",", "N_CLASS", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", ")", "\n", "model", ".", "eval", "(", ")", "\n", "if", "args", ".", "sample_region", "==", "\"full\"", ":", "\n", "        ", "data", "=", "torch", ".", "zeros", "(", "sample_batch_size", ",", "obs", "[", "0", "]", ",", "obs", "[", "1", "]", ",", "obs", "[", "2", "]", ")", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "sample_idx", "=", "generation_idx", "\n", "context", "=", "None", "\n", "batch_to_complete", "=", "None", "\n", "", "elif", "args", ".", "sample_region", "in", "[", "'custom'", "]", ":", "\n", "# here, we have background mask", "\n", "        ", "data", "=", "batch_to_complete", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# Get indices of sampling region, need to do this for each image in batch", "\n", "sample_indices", "=", "[", "]", "\n", "for", "image_number", "in", "range", "(", "batch_to_complete", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "sample_region", "=", "set", "(", ")", "\n", "\n", "# Sort according to generation_idx", "\n", "sample_idx_this", "=", "[", "]", "\n", "num_added", "=", "0", "\n", "for", "www", ",", "(", "i", ",", "j", ")", "in", "enumerate", "(", "generation_idx", "[", "image_number", "]", ")", ":", "\n", "                ", "if", "www", ">", "int", "(", "32", "*", "32", "*", ".6", ")", ":", "\n", "                    ", "sample_idx_this", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "num_added", "+=", "1", "\n", "", "", "sample_idx_this", "=", "np", ".", "array", "(", "sample_idx_this", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "sample_indices", ".", "append", "(", "sample_idx_this", ")", "\n", "\n", "data", "[", "image_number", ",", ":", ",", "sample_idx_this", "[", ":", ",", "0", "]", ",", "sample_idx_this", "[", ":", ",", "1", "]", "]", "=", "0", "\n", "context", "=", "rescaling_inv", "(", "data", ")", ".", "cpu", "(", ")", "\n", "", "", "for", "n_pix", ",", "(", "_", ",", "_", ")", "in", "enumerate", "(", "tqdm", ".", "tqdm", "(", "sample_indices", "[", "0", "]", ",", "desc", "=", "\"Sampling pixels\"", ")", ")", ":", "\n", "        ", "data_v", "=", "Variable", "(", "data", ")", "\n", "new_input", "=", "[", "data_v", ",", "mask_init", ",", "mask_undilated", ",", "mask_dilated", "]", "\n", "out", "=", "model", "(", "new_input", ",", "sample", "=", "True", ")", "\n", "\n", "for", "image_number", "in", "range", "(", "out", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "(", "i", ",", "j", ")", "=", "sample_indices", "[", "image_number", "]", "[", "n_pix", "]", "\n", "prob", "=", "torch", ".", "softmax", "(", "out", "[", ":", ",", ":", ",", "i", ",", "j", "]", "/", "TEMPERATURE", ",", "1", ")", "\n", "new_samples", "=", "torch", ".", "multinomial", "(", "prob", ",", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "data", "[", "image_number", ",", ":", ",", "i", ",", "j", "]", "=", "(", "\n", "F", ".", "one_hot", "(", "new_samples", "[", "image_number", "]", ".", "to", "(", "torch", ".", "int64", ")", ",", "N_CLASS", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", ")", "\n", "\n", "", "", "print", "(", "loss_op", "(", "data", ",", "batch_to_complete_full", "[", ":", ",", "0", "]", ".", "to", "(", "torch", ".", "int64", ")", ".", "cuda", "(", ")", ")", ")", "\n", "\n", "if", "batch_to_complete", "is", "not", "None", "and", "context", "is", "not", "None", ":", "\n", "# Interleave along batch dimension to visualize GT images", "\n", "        ", "difference", "=", "torch", ".", "abs", "(", "data", ".", "cpu", "(", ")", "-", "batch_to_complete", ".", "cpu", "(", ")", ")", "\n", "data", "=", "torch", ".", "stack", "(", "[", "context", ",", "data", ".", "cpu", "(", ")", ",", "batch_to_complete", ".", "cpu", "(", ")", ",", "difference", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "*", "data", ".", "shape", "[", "1", ":", "]", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.calc_errors_consistency_homography.perceptual_sim_mask": [[24, 30], ["evaluation.metrics.perceptual_sim", "torchvision.to_tensor().to().unsqueeze", "torchvision.to_tensor().to().unsqueeze", "torchvision.to_tensor().to", "torchvision.to_tensor().to", "torchvision.to_tensor", "torchvision.to_tensor"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.evaluation.metrics.perceptual_sim"], ["def", "perceptual_sim_mask", "(", "warped_img", ",", "masked_img", ",", "vgg16", ")", ":", "\n", "    ", "warped_img", "=", "TF", ".", "to_tensor", "(", "warped_img", ")", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "0", ")", "/", "255", "\n", "masked_img", "=", "TF", ".", "to_tensor", "(", "masked_img", ")", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "0", ")", "/", "255", "\n", "\n", "return", "perceptual_sim", "(", "\n", "warped_img", ",", "masked_img", ",", "vgg16", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.calc_errors_consistency_homography.psnr_mask": [[32, 39], ["torchvision.to_tensor().unsqueeze", "evaluation.metrics.psnr", "torchvision.to_tensor().unsqueeze", "torchvision.to_tensor().unsqueeze", "torchvision.to_tensor", "torchvision.to_tensor", "torchvision.to_tensor"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.evaluation.metrics.psnr"], ["", "def", "psnr_mask", "(", "warped_img", ",", "masked_img", ",", "mask", ")", ":", "\n", "    ", "warped_img", "=", "TF", ".", "to_tensor", "(", "warped_img", ")", ".", "unsqueeze", "(", "0", ")", "/", "255", "\n", "masked_img", "=", "TF", ".", "to_tensor", "(", "masked_img", ")", ".", "unsqueeze", "(", "0", ")", "/", "255", "\n", "mask", "=", "TF", ".", "to_tensor", "(", "mask", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "return", "psnr", "(", "\n", "warped_img", ",", "masked_img", ",", "mask", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_dpr.train": [[91, 162], ["print", "print", "iter", "tqdm.tqdm", "str", "print", "print", "range", "t_losses.keys", "t_losses.keys", "str", "min", "next", "model", "output_image.keys", "losses.keys", "print", "trigger_job_requeue", "plotter.add_scalars", "float", "losses.keys", "len", "print", "losses.keys", "t_losses[].cpu().mean().detach().item", "plotter.add_image", "len", "t_losses[].cpu().mean().detach().item", "torchvision.utils.save_image", "torchvision.utils.make_grid", "t_losses[].cpu().mean().detach().item", "t_losses[].cpu().mean().detach", "t_losses[].cpu().mean().detach", "[].cpu", "[].cpu", "float", "t_losses[].cpu().mean().detach", "t_losses[].cpu().mean", "t_losses[].cpu().mean", "t_losses[].cpu().mean", "t_losses[].cpu", "t_losses[].cpu", "t_losses[].cpu"], "function", ["None"], ["", "def", "train", "(", "epoch", ",", "data_loader", ",", "model", ",", "log_path", ",", "plotter", ",", "opts", ")", ":", "\n", "    ", "print", "(", "\"At train\"", ",", "flush", "=", "True", ")", "\n", "print", "(", "'rotation:'", ",", "str", "(", "opts", ".", "max_rotation", ")", ")", "\n", "\n", "if", "opts", ".", "curriculum", "and", "epoch", "%", "50", "==", "0", "and", "epoch", ">", "0", "and", "opts", ".", "max_rotation", "<", "opts", ".", "val_rotation", ":", "\n", "        ", "opts", ".", "max_rotation", "+=", "10", "\n", "print", "(", "'increased max rotation, now is:'", ",", "str", "(", "opts", ".", "max_rotation", ")", ")", "\n", "print", "(", "'training with max angle:'", ",", "opts", ".", "max_rotation", ")", "\n", "\n", "", "losses", "=", "{", "}", "\n", "iter_data_loader", "=", "iter", "(", "data_loader", ")", "\n", "\n", "for", "iteration", "in", "tqdm", "(", "range", "(", "1", ",", "min", "(", "501", ",", "len", "(", "data_loader", ")", ")", ")", ")", ":", "\n", "        ", "try", ":", "\n", "# rarely, a realestate batch can fail during loading. this does not impact training", "\n", "            ", "batch", "=", "next", "(", "iter_data_loader", ")", "\n", "t_losses", ",", "output_image", "=", "model", "(", "\n", "batch", ",", "isval", "=", "False", ",", "num_steps", "=", "opts", ".", "num_accumulations", "\n", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "'train it failed'", ")", "\n", "continue", "\n", "\n", "", "for", "l", "in", "t_losses", ".", "keys", "(", ")", ":", "\n", "            ", "if", "l", "in", "losses", ".", "keys", "(", ")", ":", "\n", "                ", "losses", "[", "l", "]", "=", "t_losses", "[", "l", "]", ".", "cpu", "(", ")", ".", "mean", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "+", "losses", "[", "l", "]", "\n", "", "else", ":", "\n", "                ", "losses", "[", "l", "]", "=", "t_losses", "[", "l", "]", ".", "cpu", "(", ")", ".", "mean", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "if", "iteration", "==", "500", "or", "iteration", "==", "1", ":", "\n", "            ", "for", "add_im", "in", "output_image", ".", "keys", "(", ")", ":", "\n", "                ", "if", "iteration", "==", "1", "and", "os", ".", "environ", "[", "'DEBUG'", "]", "==", "'TRUE'", ":", "\n", "                    ", "torchvision", ".", "utils", ".", "save_image", "(", "\n", "output_image", "[", "add_im", "]", "[", "0", ":", "8", ",", ":", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "data", ",", "\n", "\"./debug/Image_train/%d_%s.png\"", "%", "(", "iteration", ",", "add_im", ")", ",", "\n", "normalize", "=", "(", "\"Depth\"", "in", "add_im", ")", ",", "\n", ")", "\n", "\n", "", "plotter", ".", "add_image", "(", "\n", "\"Image_train/%d_%s\"", "%", "(", "iteration", ",", "add_im", ")", ",", "\n", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "output_image", "[", "add_im", "]", "[", "0", ":", "8", ",", ":", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "data", ",", "\n", "normalize", "=", "(", "\"Depth\"", "in", "add_im", ")", ",", "\n", ")", ",", "\n", "epoch", ",", "\n", ")", "\n", "\n", "", "", "if", "iteration", "%", "1", "==", "0", ":", "\n", "            ", "str_to_print", "=", "\"Train: Epoch {}: {}/{} with \"", ".", "format", "(", "\n", "epoch", ",", "iteration", ",", "len", "(", "data_loader", ")", "\n", ")", "\n", "for", "l", "in", "losses", ".", "keys", "(", ")", ":", "\n", "                ", "str_to_print", "+=", "\" %s : %0.4f | \"", "%", "(", "\n", "l", ",", "\n", "losses", "[", "l", "]", "/", "float", "(", "iteration", ")", ",", "\n", ")", "\n", "", "print", "(", "str_to_print", ",", "flush", "=", "True", ")", "\n", "\n", "", "if", "SIGNAL_RECEIVED", ":", "\n", "# checkpoint(model, opts.model_epoch_path, CHECKPOINT_tempfile)", "\n", "            ", "trigger_job_requeue", "(", ")", "\n", "raise", "SystemExit", "\n", "\n", "", "for", "l", "in", "t_losses", ".", "keys", "(", ")", ":", "\n", "            ", "plotter", ".", "add_scalars", "(", "\n", "\"%s_iter\"", "%", "l", ",", "\n", "{", "\"train\"", ":", "t_losses", "[", "l", "]", ".", "cpu", "(", ")", ".", "mean", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "}", ",", "\n", "epoch", "*", "500", "+", "iteration", ",", "\n", ")", "\n", "\n", "", "", "return", "{", "l", ":", "losses", "[", "l", "]", "/", "float", "(", "iteration", ")", "for", "l", "in", "losses", ".", "keys", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_dpr.val": [[164, 219], ["iter", "next", "range", "min", "t_losses.keys", "t_losses.keys", "len", "model", "output_image.keys", "trigger_job_requeue", "losses.keys", "print", "plotter.add_scalars", "float", "losses.keys", "print", "losses.keys", "t_losses[].cpu().mean().item", "plotter.add_image", "len", "t_losses[].cpu().mean().item", "torchvision.utils.make_grid", "t_losses[].cpu().mean().detach().item", "t_losses[].cpu().mean", "t_losses[].cpu().mean", "[].cpu", "float", "t_losses[].cpu().mean().detach", "t_losses[].cpu", "t_losses[].cpu", "t_losses[].cpu().mean", "t_losses[].cpu"], "function", ["None"], ["", "def", "val", "(", "epoch", ",", "data_loader", ",", "model", ",", "log_path", ",", "plotter", ")", ":", "\n", "\n", "    ", "losses", "=", "{", "}", "\n", "\n", "iter_data_loader", "=", "iter", "(", "data_loader", ")", "\n", "batch", "=", "next", "(", "iter_data_loader", ")", "\n", "for", "iteration", "in", "range", "(", "1", ",", "min", "(", "51", ",", "len", "(", "data_loader", ")", ")", ")", ":", "\n", "        ", "try", ":", "\n", "# rarely, a realestate batch can fail during loading. this does not impact training", "\n", "            ", "t_losses", ",", "output_image", "=", "model", "(", "\n", "batch", ",", "'train'", ",", "isval", "=", "True", ",", "num_steps", "=", "1", "\n", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "'val it failed'", ")", "\n", "continue", "\n", "", "for", "l", "in", "t_losses", ".", "keys", "(", ")", ":", "\n", "            ", "if", "l", "in", "losses", ".", "keys", "(", ")", ":", "\n", "                ", "losses", "[", "l", "]", "=", "t_losses", "[", "l", "]", ".", "cpu", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "+", "losses", "[", "l", "]", "\n", "", "else", ":", "\n", "                ", "losses", "[", "l", "]", "=", "t_losses", "[", "l", "]", ".", "cpu", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "", "if", "iteration", "%", "100", "==", "0", "or", "iteration", "==", "1", ":", "\n", "            ", "for", "add_im", "in", "output_image", ".", "keys", "(", ")", ":", "\n", "\n", "                ", "plotter", ".", "add_image", "(", "\n", "\"Image_val/%d_%s\"", "%", "(", "iteration", ",", "add_im", ")", ",", "\n", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "output_image", "[", "add_im", "]", "[", "0", ":", "8", ",", ":", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "data", ",", "\n", "normalize", "=", "(", "\"Depth\"", "in", "add_im", ")", ",", "\n", ")", ",", "\n", "epoch", ",", "\n", ")", "\n", "\n", "", "", "if", "SIGNAL_RECEIVED", ":", "\n", "            ", "trigger_job_requeue", "(", ")", "\n", "raise", "SystemExit", "\n", "\n", "", "if", "iteration", "%", "1", "==", "0", ":", "\n", "            ", "str_to_print", "=", "\"Val: Epoch {}: {}/{} with \"", ".", "format", "(", "\n", "epoch", ",", "iteration", ",", "len", "(", "data_loader", ")", "\n", ")", "\n", "for", "l", "in", "losses", ".", "keys", "(", ")", ":", "\n", "                ", "str_to_print", "+=", "\" %s : %0.4f | \"", "%", "(", "\n", "l", ",", "\n", "losses", "[", "l", "]", "/", "float", "(", "iteration", ")", ",", "\n", ")", "\n", "", "print", "(", "str_to_print", ",", "flush", "=", "True", ")", "\n", "\n", "", "for", "l", "in", "t_losses", ".", "keys", "(", ")", ":", "\n", "            ", "plotter", ".", "add_scalars", "(", "\n", "\"%s_iter\"", "%", "l", ",", "\n", "{", "\"val\"", ":", "t_losses", "[", "l", "]", ".", "cpu", "(", ")", ".", "mean", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "}", ",", "\n", "epoch", "*", "50", "+", "iteration", ",", "\n", ")", "\n", "\n", "", "", "return", "{", "l", ":", "losses", "[", "l", "]", "/", "float", "(", "iteration", ")", "for", "l", "in", "losses", ".", "keys", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_dpr.checkpoint": [[221, 242], ["torch.save", "torch.save", "os.path.isfile", "os.rename", "model.state_dict", "model.optimizer_G.state_dict", "model.optimizer_D.state_dict", "model.state_dict", "model.optimizer_G.state_dict"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.LRFinder.save", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.LRFinder.save", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.state_dict", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.state_dict", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.state_dict", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.state_dict", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.state_dict"], ["", "def", "checkpoint", "(", "model", ",", "save_path", ",", "CHECKPOINT_tempfile", ")", ":", "\n", "    ", "if", "model", ".", "use_discriminator", ":", "\n", "        ", "checkpoint_state", "=", "{", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optimizerG\"", ":", "model", ".", "optimizer_G", ".", "state_dict", "(", ")", ",", "\n", "\"epoch\"", ":", "model", ".", "epoch", ",", "\n", "\"optimizerD\"", ":", "model", ".", "optimizer_D", ".", "state_dict", "(", ")", ",", "\n", "\"opts\"", ":", "opts", ",", "\n", "}", "\n", "\n", "", "else", ":", "\n", "        ", "checkpoint_state", "=", "{", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optimizerG\"", ":", "model", ".", "optimizer_G", ".", "state_dict", "(", ")", ",", "\n", "\"epoch\"", ":", "model", ".", "epoch", ",", "\n", "\"opts\"", ":", "opts", ",", "\n", "}", "\n", "\n", "", "torch", ".", "save", "(", "checkpoint_state", ",", "CHECKPOINT_tempfile", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "CHECKPOINT_tempfile", ")", ":", "\n", "        ", "os", ".", "rename", "(", "CHECKPOINT_tempfile", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_dpr.run": [[244, 334], ["print", "print", "Dataset", "torch.utils.data.DataLoader", "print", "range", "os.path.exists", "torch.load", "torch.load", "print", "model.load_state_dict", "model.optimizer_D.load_state_dict", "model.optimizer_G.load_state_dict", "print", "model.train", "train_dpr.train", "model.eval", "train.keys", "train_dpr.checkpoint", "open().close", "print", "print", "torch.no_grad", "torch.no_grad", "model.eval", "Dataset.toval", "train_dpr.val", "Dataset.totrain", "train_dpr.checkpoint", "train_dpr.checkpoint", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "val.keys", "plotter.add_scalars", "plotter.add_scalars", "open"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_vqvae.train", "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_vqvae.train", "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_dpr.checkpoint", "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.close", "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.habitat_data.HabitatImageGenerator.toval", "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_dpr.val", "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.habitat_data.HabitatImageGenerator.totrain", "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_dpr.checkpoint", "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_dpr.checkpoint"], ["", "", "def", "run", "(", "model", ",", "Dataset", ",", "log_path", ",", "plotter", ",", "CHECKPOINT_tempfile", ")", ":", "\n", "    ", "print", "(", "\"Starting run...\"", ",", "flush", "=", "True", ")", "\n", "\n", "opts", ".", "best_epoch", "=", "0", "\n", "opts", ".", "best_loss", "=", "-", "1000", "\n", "if", "os", ".", "path", ".", "exists", "(", "opts", ".", "model_epoch_path", ")", "and", "opts", ".", "resume", ":", "\n", "        ", "past_state", "=", "torch", ".", "load", "(", "opts", ".", "model_epoch_path", ")", "\n", "print", "(", "\"Continuing epoch ... %d\"", "%", "(", "past_state", "[", "'opts'", "]", ".", "continue_epoch", "+", "1", ")", ",", "flush", "=", "True", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opts", ".", "model_epoch_path", ")", "[", "\"state_dict\"", "]", ")", "\n", "model", ".", "optimizer_D", ".", "load_state_dict", "(", "\n", "torch", ".", "load", "(", "opts", ".", "model_epoch_path", ")", "[", "\"optimizerD\"", "]", "\n", ")", "\n", "model", ".", "optimizer_G", ".", "load_state_dict", "(", "\n", "torch", ".", "load", "(", "opts", ".", "model_epoch_path", ")", "[", "\"optimizerG\"", "]", "\n", ")", "\n", "\n", "opts", ".", "continue_epoch", "=", "past_state", "[", "\"opts\"", "]", ".", "continue_epoch", "+", "1", "\n", "opts", ".", "current_episode_train", "=", "past_state", "[", "\"opts\"", "]", ".", "current_episode_train", "\n", "opts", ".", "current_episode_val", "=", "past_state", "[", "\"opts\"", "]", ".", "current_episode_val", "\n", "opts", ".", "best_epoch", "=", "past_state", "[", "\"opts\"", "]", ".", "best_epoch", "\n", "opts", ".", "best_loss", "=", "past_state", "[", "\"opts\"", "]", ".", "best_loss", "\n", "opts", ".", "max_rotation", "=", "past_state", "[", "\"opts\"", "]", ".", "max_rotation", "\n", "", "elif", "opts", ".", "resume", ":", "\n", "        ", "print", "(", "\"WARNING: Model path does not exist?? \"", ")", "\n", "print", "(", "opts", ".", "model_epoch_path", ")", "\n", "\n", "", "print", "(", "\"Loading train dataset ....\"", ",", "flush", "=", "True", ")", "\n", "train_set", "=", "Dataset", "(", "\"train\"", ",", "opts", ")", "\n", "\n", "train_data_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "train_set", ",", "\n", "num_workers", "=", "opts", ".", "num_workers", ",", "\n", "batch_size", "=", "opts", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "\n", "print", "(", "\"Loaded train dataset ...\"", ",", "flush", "=", "True", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "opts", ".", "continue_epoch", ",", "opts", ".", "max_epoch", ")", ":", "\n", "        ", "print", "(", "\"Starting epoch %d\"", "%", "epoch", ",", "flush", "=", "True", ")", "\n", "opts", ".", "continue_epoch", "=", "epoch", "\n", "model", ".", "epoch", "=", "epoch", "\n", "model", ".", "train", "(", ")", "\n", "\n", "train_loss", "=", "train", "(", "\n", "epoch", ",", "train_data_loader", ",", "model", ",", "log_path", ",", "plotter", ",", "opts", "\n", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "train_set", ".", "toval", "(", "\n", "epoch", "=", "0", "\n", ")", "# Hack because don't want to keep reloading the environments", "\n", "loss", "=", "val", "(", "epoch", ",", "train_data_loader", ",", "model", ",", "log_path", ",", "plotter", ")", "\n", "train_set", ".", "totrain", "(", "epoch", "=", "epoch", "+", "1", "+", "opts", ".", "seed", ")", "\n", "\n", "", "for", "l", "in", "train_loss", ".", "keys", "(", ")", ":", "\n", "            ", "if", "l", "in", "loss", ".", "keys", "(", ")", ":", "\n", "                ", "plotter", ".", "add_scalars", "(", "\n", "\"%s_epoch\"", "%", "l", ",", "\n", "{", "\"train\"", ":", "train_loss", "[", "l", "]", ",", "\"val\"", ":", "loss", "[", "l", "]", "}", ",", "\n", "epoch", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "plotter", ".", "add_scalars", "(", "\n", "\"%s_epoch\"", "%", "l", ",", "{", "\"train\"", ":", "train_loss", "[", "l", "]", "}", ",", "epoch", "\n", ")", "\n", "\n", "", "", "if", "loss", "[", "\"psnr\"", "]", ">", "opts", ".", "best_loss", ":", "\n", "            ", "checkpoint", "(", "\n", "model", ",", "opts", ".", "model_epoch_path", "+", "\"best\"", ",", "CHECKPOINT_tempfile", "\n", ")", "\n", "opts", ".", "best_epoch", "=", "epoch", "\n", "opts", ".", "best_loss", "=", "loss", "[", "\"psnr\"", "]", "\n", "\n", "", "checkpoint", "(", "model", ",", "opts", ".", "model_epoch_path", ",", "CHECKPOINT_tempfile", ")", "\n", "\n", "if", "epoch", "%", "50", "==", "0", ":", "\n", "            ", "checkpoint", "(", "\n", "model", ",", "\n", "opts", ".", "model_epoch_path", "+", "\"ep%d\"", "%", "epoch", ",", "\n", "CHECKPOINT_tempfile", ",", "\n", ")", "\n", "\n", "", "", "if", "epoch", "==", "500", "-", "1", ":", "\n", "        ", "open", "(", "HALT_filename", ",", "\"a\"", ")", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.calc_errors_quality.psnr_mask": [[28, 36], ["evaluation.metrics.psnr", "mask.float().min", "mask.float"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.evaluation.metrics.psnr"], ["def", "psnr_mask", "(", "pred_imgs", ",", "key", ",", "invis", "=", "False", ")", ":", "\n", "    ", "mask", "=", "pred_imgs", "[", "\"OutputImg\"", "]", "==", "pred_imgs", "[", "\"SampledImg\"", "]", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "if", "invis", ":", "\n", "        ", "mask", "=", "1", "-", "mask", "\n", "\n", "", "return", "psnr", "(", "pred_imgs", "[", "\"OutputImg\"", "]", ",", "pred_imgs", "[", "key", "]", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.calc_errors_quality.perceptual_sim_mask": [[38, 47], ["evaluation.metrics.perceptual_sim", "mask.float().min", "mask.float"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.evaluation.metrics.perceptual_sim"], ["", "def", "perceptual_sim_mask", "(", "pred_imgs", ",", "key", ",", "vgg16", ",", "invis", "=", "False", ")", ":", "\n", "    ", "mask", "=", "pred_imgs", "[", "\"OutputImg\"", "]", "==", "pred_imgs", "[", "\"SampledImg\"", "]", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "if", "invis", ":", "\n", "        ", "mask", "=", "1", "-", "mask", "\n", "\n", "", "return", "perceptual_sim", "(", "\n", "pred_imgs", "[", "\"OutputImg\"", "]", "*", "mask", ",", "pred_imgs", "[", "key", "]", "*", "mask", ",", "vgg16", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_vqvae.train": [[21, 85], ["models.is_primary", "torch.nn.MSELoss", "enumerate", "tqdm.tqdm", "model.zero_grad", "img.to.to", "model", "nn.MSELoss.", "latent_loss.mean.mean", "loss.backward", "optimizer.step", "models.all_gather", "models.is_primary", "scheduler.step", "criterion.item", "tqdm.tqdm.set_description", "model.eval", "torchvision.utils.save_image", "model.train", "torch.no_grad", "model", "torch.cat", "criterion.item", "latent_loss.mean.item", "str().zfill", "str().zfill", "str", "str"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.is_primary", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.locally_masked_convolution._locally_masked_conv2d.backward", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.CycleScheduler.step", "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.all_gather", "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.is_primary", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.CycleScheduler.step", "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_vqvae.train"], ["def", "train", "(", "epoch", ",", "loader", ",", "model", ",", "optimizer", ",", "scheduler", ",", "device", ",", "dataset", ")", ":", "\n", "    ", "if", "dist", ".", "is_primary", "(", ")", ":", "\n", "        ", "loader", "=", "tqdm", "(", "loader", ")", "\n", "\n", "", "criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "latent_loss_weight", "=", "0.25", "\n", "sample_size", "=", "16", "\n", "\n", "mse_sum", "=", "0", "\n", "mse_n", "=", "0", "\n", "\n", "for", "i", ",", "(", "img", ",", "label", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "model", ".", "zero_grad", "(", ")", "\n", "\n", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "\n", "out", ",", "latent_loss", "=", "model", "(", "img", ")", "\n", "recon_loss", "=", "criterion", "(", "out", ",", "img", ")", "\n", "latent_loss", "=", "latent_loss", ".", "mean", "(", ")", "\n", "loss", "=", "recon_loss", "+", "latent_loss_weight", "*", "latent_loss", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "scheduler", "is", "not", "None", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "part_mse_sum", "=", "recon_loss", ".", "item", "(", ")", "*", "img", ".", "shape", "[", "0", "]", "\n", "part_mse_n", "=", "img", ".", "shape", "[", "0", "]", "\n", "comm", "=", "{", "\"mse_sum\"", ":", "part_mse_sum", ",", "\"mse_n\"", ":", "part_mse_n", "}", "\n", "comm", "=", "dist", ".", "all_gather", "(", "comm", ")", "\n", "\n", "for", "part", "in", "comm", ":", "\n", "            ", "mse_sum", "+=", "part", "[", "\"mse_sum\"", "]", "\n", "mse_n", "+=", "part", "[", "\"mse_n\"", "]", "\n", "\n", "", "if", "dist", ".", "is_primary", "(", ")", ":", "\n", "            ", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "\n", "\n", "loader", ".", "set_description", "(", "\n", "(", "\n", "f\"epoch: {epoch + 1}; mse: {recon_loss.item():.5f}; \"", "\n", "f\"latent: {latent_loss.item():.3f}; avg mse: {mse_sum / mse_n:.5f}; \"", "\n", "f\"lr: {lr:.5f}\"", "\n", ")", "\n", ")", "\n", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "\n", "sample", "=", "img", "[", ":", "sample_size", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "out", ",", "_", "=", "model", "(", "sample", ")", "\n", "\n", "", "utils", ".", "save_image", "(", "\n", "torch", ".", "cat", "(", "[", "sample", ",", "out", "]", ",", "0", ")", ",", "\n", "f\"models/vqvae2/sample/%s/{str(epoch + 1).zfill(5)}_{str(i).zfill(5)}.png\"", "%", "(", "dataset", ")", ",", "\n", "nrow", "=", "sample_size", ",", "\n", "normalize", "=", "True", ",", "\n", "range", "=", "(", "-", "1", ",", "1", ")", ",", "\n", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_vqvae.main": [[87, 131], ["torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "models.data_sampler", "torch.utils.data.DataLoader", "models.vqvae2.vqvae.VQVAETop().to", "torch.optim.Adam", "range", "models.get_world_size", "torch.nn.parallel.DistributedDataParallel", "nn.parallel.DistributedDataParallel.parameters", "models.vqvae2.scheduler.CycleScheduler", "train_vqvae.train", "models.is_primary", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "models.vqvae2.vqvae.VQVAETop", "torch.save", "models.get_local_rank", "nn.parallel.DistributedDataParallel.state_dict", "models.get_local_rank", "len", "str().zfill", "str"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.data_sampler", "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.get_world_size", "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_vqvae.train", "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.is_primary", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.LRFinder.save", "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.get_local_rank", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.state_dict", "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.get_local_rank"], ["", "", "", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "device", "=", "\"cuda\"", "\n", "\n", "args", ".", "distributed", "=", "dist", ".", "get_world_size", "(", ")", ">", "1", "\n", "\n", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "args", ".", "size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "args", ".", "size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ",", "\n", "]", "\n", ")", "\n", "dataset", "=", "datasets", ".", "ImageFolder", "(", "args", ".", "path", ",", "transform", "=", "transform", ")", "\n", "sampler", "=", "dist", ".", "data_sampler", "(", "dataset", ",", "shuffle", "=", "True", ",", "distributed", "=", "args", ".", "distributed", ")", "\n", "loader", "=", "DataLoader", "(", "\n", "dataset", ",", "batch_size", "=", "64", "//", "args", ".", "n_gpu", ",", "sampler", "=", "sampler", ",", "num_workers", "=", "2", "\n", ")", "\n", "\n", "model", "=", "VQVAETop", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ",", "\n", "device_ids", "=", "[", "dist", ".", "get_local_rank", "(", ")", "]", ",", "\n", "output_device", "=", "dist", ".", "get_local_rank", "(", ")", ",", "\n", ")", "\n", "\n", "", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "scheduler", "=", "None", "\n", "if", "args", ".", "sched", "==", "\"cycle\"", ":", "\n", "        ", "scheduler", "=", "CycleScheduler", "(", "\n", "optimizer", ",", "\n", "args", ".", "lr", ",", "\n", "n_iter", "=", "len", "(", "loader", ")", "*", "args", ".", "epoch", ",", "\n", "momentum", "=", "None", ",", "\n", "warmup_proportion", "=", "0.05", ",", "\n", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "args", ".", "epoch", ")", ":", "\n", "        ", "train", "(", "i", ",", "loader", ",", "model", ",", "optimizer", ",", "scheduler", ",", "device", ",", "args", ".", "dataset", ")", "\n", "\n", "if", "dist", ".", "is_primary", "(", ")", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "f\"models/vqvae2/checkpoint/%s/vqvae_{str(i + 1).zfill(3)}.pt\"", "%", "(", "args", ".", "dataset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.extract_pixcnn_orders.run": [[29, 58], ["print", "opts.dataset_folder.split", "torch.no_grad", "torch.no_grad", "torch.no_grad", "int", "iter", "tqdm.tqdm", "int", "range", "next", "model", "range", "open", "pickle.dump", "float", "losses.keys", "output_images[].cpu", "opts.dataset.split"], "function", ["None"], ["def", "run", "(", "data_loader", ",", "model", ",", "opts", ")", ":", "\n", "    ", "trainval", "=", "opts", ".", "dataset_folder", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "print", "(", "\"Loaded \"", "+", "trainval", "+", "\" dataset ...\"", ",", "flush", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "gen_order", "=", "{", "}", "\n", "\n", "dset_size", "=", "int", "(", "32000", "/", "opts", ".", "batch_size", ")", "\n", "all_cameras", "=", "{", "}", "\n", "if", "trainval", "==", "'val'", ":", "\n", "            ", "dset_size", "=", "int", "(", "8000", "/", "opts", ".", "batch_size", ")", "\n", "\n", "", "losses", "=", "{", "}", "\n", "iter_data_loader", "=", "iter", "(", "data_loader", ")", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "dset_size", ")", ")", ":", "\n", "            ", "batch", "=", "next", "(", "iter_data_loader", ")", "\n", "_", ",", "output_images", ",", "_", "=", "model", "(", "\n", "batch", ",", "isval", "=", "True", ",", "return_batch", "=", "True", "\n", ")", "\n", "\n", "gens", "=", "output_images", "[", "'gen_order'", "]", ".", "cpu", "(", ")", ".", "data", "\n", "\n", "for", "j", "in", "range", "(", "opts", ".", "batch_size", ")", ":", "\n", "                ", "gen_order", "[", "i", "*", "opts", ".", "batch_size", "+", "j", "]", "=", "gens", "[", "j", "]", "\n", "\n", "", "", "with", "open", "(", "'data/%s_%s_gen_order.pkl'", "%", "(", "opts", ".", "dataset", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ",", "trainval", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pkl", ".", "dump", "(", "gen_order", ",", "f", ")", "\n", "\n", "", "", "return", "{", "l", ":", "losses", "[", "l", "]", "/", "float", "(", "iteration", ")", "for", "l", "in", "losses", ".", "keys", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.extract_vqvae_dataset.run": [[21, 80], ["print", "torch.utils.data.DataLoader", "print", "iter", "int", "tqdm.tqdm", "tqdm.tqdm.close", "print", "os.path.exists", "os.makedirs", "int", "range", "tqdm.tqdm.update", "open", "pickle.dump", "next", "range", "torchvision.utils.save_image", "[].keys", "cams.append", "int", "int"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.close", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.update"], ["def", "run", "(", "dset", ",", "trainval", ",", "opts", ")", ":", "\n", "    ", "print", "(", "\"Loading \"", "+", "trainval", "+", "\" dataset ....\"", ",", "flush", "=", "True", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "dset", ",", "\n", "num_workers", "=", "opts", ".", "num_workers", ",", "\n", "batch_size", "=", "opts", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "\n", "print", "(", "\"Loaded \"", "+", "trainval", "+", "\" dataset ...\"", ",", "flush", "=", "True", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "opts", ".", "result_folder", "+", "\"/%s/rgb/\"", "%", "(", "trainval", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opts", ".", "result_folder", "+", "\"/%s/rgb/\"", "%", "(", "trainval", ")", ")", "\n", "\n", "", "iter_data_loader", "=", "iter", "(", "data_loader", ")", "\n", "\n", "dset_size", "=", "int", "(", "32000", "/", "opts", ".", "batch_size", ")", "\n", "all_cameras", "=", "{", "}", "\n", "if", "trainval", "==", "'val'", ":", "\n", "        ", "dset_size", "=", "int", "(", "8000", "/", "opts", ".", "batch_size", ")", "\n", "", "pbar", "=", "tqdm", "(", "total", "=", "dset_size", ")", "\n", "i", "=", "0", "\n", "\n", "while", "i", "<", "dset_size", ":", "\n", "        ", "try", ":", "\n", "# sometimes realestate batch fails from missing camera params", "\n", "            ", "batch", "=", "next", "(", "iter_data_loader", ")", "\n", "", "except", ":", "\n", "# try again with next batch", "\n", "            ", "continue", "\n", "# save batch of images", "\n", "", "images", "=", "batch", "[", "'images'", "]", "[", "-", "1", "]", "\n", "if", "opts", ".", "dataset", "==", "'realestate'", ":", "\n", "            ", "images", "=", "images", "*", ".5", "+", ".5", "\n", "", "for", "j", "in", "range", "(", "opts", ".", "batch_size", ")", ":", "\n", "            ", "cams", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "2", ")", ":", "\n", "                ", "cam", "=", "{", "}", "\n", "for", "key", "in", "batch", "[", "'cameras'", "]", "[", "k", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "cam", "[", "key", "]", "=", "batch", "[", "'cameras'", "]", "[", "k", "]", "[", "key", "]", "[", "j", ":", "j", "+", "1", "]", "\n", "", "cams", ".", "append", "(", "cam", ")", "\n", "", "all_cameras", "[", "int", "(", "i", "*", "opts", ".", "batch_size", "+", "j", ")", "]", "=", "cams", "\n", "\n", "torchvision", ".", "utils", ".", "save_image", "(", "\n", "images", "[", "j", "]", ",", "\n", "opts", ".", "result_folder", "\n", "+", "\"/%s/rgb/%d.png\"", "%", "(", "trainval", ",", "int", "(", "i", "*", "opts", ".", "batch_size", "+", "j", ")", ")", ",", "\n", ")", "\n", "", "i", "+=", "1", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "pbar", ".", "close", "(", ")", "\n", "\n", "with", "open", "(", "opts", ".", "result_folder", "+", "\"/%s/cameras.pkl\"", "%", "(", "trainval", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pkl", ".", "dump", "(", "all_cameras", ",", "f", ")", "\n", "\n", "", "print", "(", "\"Finished selecting \"", "+", "trainval", "+", "\" dataset ....\"", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.extract_code.extract": [[17, 51], ["tqdm.tqdm", "set", "print", "numpy.save", "numpy.zeros", "numpy.zeros", "img.to.to", "model.module.encode", "id_t.detach().cpu().numpy.detach().cpu().numpy", "zip", "len", "os.makedirs", "tqdm.tqdm.set_description", "set.add", "len", "len", "id_t.detach().cpu().numpy.detach().cpu", "int", "file.split", "int", "id_t.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.LRFinder.save", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.encode"], ["def", "extract", "(", "loader", ",", "model", ",", "device", ",", "dataset", ",", "split", ")", ":", "\n", "    ", "index", "=", "0", "\n", "embeddings", "=", "None", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "embeddings", "=", "np", ".", "zeros", "(", "[", "32000", ",", "32", ",", "32", "]", ")", "\n", "", "else", ":", "\n", "        ", "embeddings", "=", "np", ".", "zeros", "(", "[", "8000", ",", "32", ",", "32", "]", ")", "\n", "", "pbar", "=", "tqdm", "(", "loader", ")", "\n", "\n", "num_embeddings", "=", "set", "(", ")", "\n", "for", "img", ",", "_", ",", "filename", "in", "pbar", ":", "\n", "        ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "\n", "_", ",", "_", ",", "_", ",", "id_t", ",", "_", "=", "model", ".", "module", ".", "encode", "(", "img", ")", "\n", "id_t", "=", "id_t", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "file", ",", "top", "in", "zip", "(", "filename", ",", "id_t", ")", ":", "\n", "            ", "index", "+=", "1", "\n", "pbar", ".", "set_description", "(", "f'inserted: {index}'", ")", "\n", "i", "=", "file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", "\n", "num_embeddings", ".", "add", "(", "int", "(", "i", ")", ")", "\n", "embeddings", "[", "int", "(", "i", ")", "]", "=", "top", "\n", "\n", "", "", "print", "(", "'num embeddings'", ",", "len", "(", "num_embeddings", ")", ")", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "assert", "(", "len", "(", "num_embeddings", ")", "==", "32000", ")", "\n", "", "else", ":", "\n", "        ", "assert", "(", "len", "(", "num_embeddings", ")", "==", "8000", ")", "\n", "", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "'models/vqvae2/embeddings/'", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "\n", "", "np", ".", "save", "(", "'models/vqvae2/embeddings/%s_%s.npy'", "%", "(", "dataset", ",", "split", ")", ",", "embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.geometry.camera_transformations.invert_RT": [[7, 21], ["R.permute", "torch.cat", "R.permute.bmm"], "function", ["None"], ["def", "invert_RT", "(", "RT", ")", ":", "\n", "    ", "\"\"\" Given an RT matrix (e.g. [R | T]) matrix where R is\n    indeed valid, then inverts this.\n    \"\"\"", "\n", "R", "=", "RT", "[", ":", ",", "0", ":", "3", ",", "0", ":", "3", "]", "\n", "T", "=", "RT", "[", ":", ",", ":", ",", "3", ":", "]", "\n", "\n", "# Get inverse of the rotation matrix", "\n", "Rinv", "=", "R", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "Tinv", "=", "-", "Rinv", ".", "bmm", "(", "T", ")", "\n", "\n", "RTinv", "=", "torch", ".", "cat", "(", "(", "Rinv", ",", "Tinv", ")", ",", "2", ")", "\n", "\n", "return", "RTinv", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.geometry.camera_transformations.invert_K": [[23, 39], ["torch.eye().to().unsqueeze().repeat", "K.size", "torch.eye().to().unsqueeze", "torch.eye().to", "torch.eye", "K.size"], "function", ["None"], ["", "def", "invert_K", "(", "K", ")", ":", "\n", "    ", "\"\"\" Given a K matrix (an intrinsic matrix) of the form\n    [f 0 px]\n    [0 f py]\n    [0 0  1], inverts it.\n    \"\"\"", "\n", "K_inv", "=", "(", "\n", "torch", ".", "eye", "(", "K", ".", "size", "(", "1", ")", ")", ".", "to", "(", "K", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "K", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", ")", "\n", "\n", "K_inv", "[", ":", ",", "0", ",", "0", "]", "=", "1", "/", "K", "[", ":", ",", "0", ",", "0", "]", "\n", "K_inv", "[", ":", ",", "0", ",", "2", "]", "=", "-", "K", "[", ":", ",", "0", ",", "2", "]", "/", "K", "[", ":", ",", "0", ",", "0", "]", "\n", "K_inv", "[", ":", ",", "1", ",", "1", "]", "=", "1", "/", "K", "[", ":", ",", "1", ",", "1", "]", "\n", "K_inv", "[", ":", ",", "1", ",", "2", "]", "=", "-", "K", "[", ":", ",", "1", ",", "2", "]", "/", "K", "[", ":", ",", "1", ",", "1", "]", "\n", "\n", "return", "K_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.geometry.camera_transformations.get_camera_matrices": [[41, 50], ["numpy.eye", "numpy.linalg.inv", "np.linalg.inv.astype", "np.eye.astype"], "function", ["None"], ["", "def", "get_camera_matrices", "(", "position", ",", "rotation", ")", ":", "\n", "\n", "    ", "Pinv", "=", "np", ".", "eye", "(", "4", ")", "\n", "Pinv", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "rotation", "\n", "Pinv", "[", "0", ":", "3", ",", "3", "]", "=", "position", "\n", "\n", "P", "=", "np", ".", "linalg", ".", "inv", "(", "Pinv", ")", "\n", "\n", "return", "P", ".", "astype", "(", "np", ".", "float32", ")", ",", "Pinv", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.jitter.jitter_quaternions": [[6, 18], ["quaternion.as_euler_angles", "numpy.array", "quaternion.from_euler_angles", "rnd.rand", "rnd.rand", "rnd.rand"], "function", ["None"], ["def", "jitter_quaternions", "(", "original_quaternion", ",", "rnd", ",", "angle", "=", "30.0", ")", ":", "\n", "    ", "original_euler", "=", "quaternion", ".", "as_euler_angles", "(", "original_quaternion", ")", "\n", "euler_angles", "=", "np", ".", "array", "(", "\n", "[", "\n", "(", "rnd", ".", "rand", "(", ")", "-", "0.5", ")", "*", "np", ".", "pi", "*", "angle", "/", "180.0", "+", "original_euler", "[", "0", "]", ",", "\n", "(", "rnd", ".", "rand", "(", ")", "-", "0.5", ")", "*", "np", ".", "pi", "*", "angle", "/", "180.0", "+", "original_euler", "[", "1", "]", ",", "\n", "(", "rnd", ".", "rand", "(", ")", "-", "0.5", ")", "*", "np", ".", "pi", "*", "angle", "/", "180.0", "+", "original_euler", "[", "2", "]", ",", "\n", "]", "\n", ")", "\n", "quaternions", "=", "quaternion", ".", "from_euler_angles", "(", "euler_angles", ")", "\n", "\n", "return", "quaternions", "\n", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.calc_errors.psnr_mask": [[46, 54], ["evaluation.metrics.psnr", "mask.float().min", "mask.float"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.evaluation.metrics.psnr"], ["def", "psnr_mask", "(", "pred_imgs", ",", "key", ",", "invis", "=", "False", ")", ":", "\n", "    ", "mask", "=", "pred_imgs", "[", "\"OutputImg\"", "]", "==", "pred_imgs", "[", "\"SampledImg\"", "]", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "if", "invis", ":", "\n", "        ", "mask", "=", "1", "-", "mask", "\n", "\n", "", "return", "psnr", "(", "pred_imgs", "[", "\"OutputImg\"", "]", ",", "pred_imgs", "[", "key", "]", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.calc_errors.ssim_mask": [[56, 64], ["evaluation.metrics.ssim_metric", "mask.float().min", "mask.float"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.evaluation.metrics.ssim_metric"], ["", "def", "ssim_mask", "(", "pred_imgs", ",", "key", ",", "invis", "=", "False", ")", ":", "\n", "    ", "mask", "=", "pred_imgs", "[", "\"OutputImg\"", "]", "==", "pred_imgs", "[", "\"SampledImg\"", "]", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "if", "invis", ":", "\n", "        ", "mask", "=", "1", "-", "mask", "\n", "\n", "", "return", "ssim_metric", "(", "pred_imgs", "[", "\"OutputImg\"", "]", ",", "pred_imgs", "[", "key", "]", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.calc_errors.perceptual_sim_mask": [[66, 75], ["evaluation.metrics.perceptual_sim", "mask.float().min", "mask.float"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.evaluation.metrics.perceptual_sim"], ["", "def", "perceptual_sim_mask", "(", "pred_imgs", ",", "key", ",", "vgg16", ",", "invis", "=", "False", ")", ":", "\n", "    ", "mask", "=", "pred_imgs", "[", "\"OutputImg\"", "]", "==", "pred_imgs", "[", "\"SampledImg\"", "]", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "if", "invis", ":", "\n", "        ", "mask", "=", "1", "-", "mask", "\n", "\n", "", "return", "perceptual_sim", "(", "\n", "pred_imgs", "[", "\"OutputImg\"", "]", "*", "mask", ",", "pred_imgs", "[", "key", "]", "*", "mask", ",", "vgg16", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.opts_helper.opts_helper": [[3, 57], ["torch.load"], "function", ["None"], ["def", "opts_helper", "(", "test_ops", ")", ":", "\n", "# Load model to be tested", "\n", "\n", "    ", "opts", "=", "torch", ".", "load", "(", "test_ops", ".", "old_model", ")", "[", "\"opts\"", "]", "\n", "opts", ".", "isTrain", "=", "True", "\n", "opts", ".", "only_high_res", "=", "False", "\n", "opts", ".", "lr_d", "=", "0.001", "\n", "opts", ".", "pretrain", "=", "test_ops", ".", "pretrain", "\n", "opts", ".", "background_smoothing_kernel_size", "=", "test_ops", ".", "background_smoothing_kernel_size", "\n", "opts", ".", "decoder_truncation_threshold", "=", "test_ops", ".", "decoder_truncation_threshold", "\n", "opts", ".", "temperature", "=", "test_ops", ".", "temperature", "\n", "opts", ".", "temp_eps", "=", "test_ops", ".", "temp_eps", "\n", "opts", ".", "val_rotation", "=", "test_ops", ".", "val_rotation", "\n", "opts", ".", "dataset_folder", "=", "test_ops", ".", "dataset_folder", "\n", "if", "'use_fixed_testset'", "in", "test_ops", "and", "test_ops", ".", "use_fixed_testset", "is", "not", "None", ":", "\n", "        ", "opts", ".", "use_fixed_testset", "=", "test_ops", ".", "use_fixed_testset", "\n", "", "if", "'no_outpainting'", "in", "test_ops", ":", "\n", "        ", "opts", ".", "no_outpainting", "=", "test_ops", ".", "no_outpainting", "\n", "", "if", "'vqvae'", "in", "test_ops", "and", "test_ops", ".", "vqvae", "is", "not", "None", ":", "\n", "        ", "opts", ".", "vqvae", "=", "test_ops", ".", "vqvae", "\n", "", "if", "'num_split'", "in", "test_ops", "and", "test_ops", ".", "num_split", ">", "0", ":", "\n", "        ", "opts", ".", "num_split", "=", "test_ops", ".", "num_split", "\n", "", "if", "'naive'", "in", "test_ops", ":", "\n", "        ", "opts", ".", "naive", "=", "test_ops", ".", "naive", "\n", "", "if", "'sequential'", "in", "test_ops", ":", "\n", "        ", "opts", ".", "sequential", "=", "test_ops", ".", "sequential", "\n", "", "if", "'num_samples'", "in", "test_ops", ":", "\n", "        ", "opts", ".", "num_samples", "=", "test_ops", ".", "num_samples", "\n", "", "if", "'directions'", "in", "test_ops", ":", "\n", "        ", "opts", ".", "directions", "=", "test_ops", ".", "directions", "\n", "", "if", "'direction'", "in", "test_ops", ":", "\n", "        ", "opts", ".", "direction", "=", "test_ops", ".", "direction", "\n", "", "if", "'rotation'", "in", "test_ops", ":", "\n", "        ", "opts", ".", "rotation", "=", "test_ops", ".", "rotation", "\n", "", "if", "'model_setting'", "in", "test_ops", ":", "\n", "        ", "opts", ".", "model_setting", "=", "test_ops", ".", "model_setting", "\n", "", "if", "'demo_img_name'", "in", "test_ops", ":", "\n", "        ", "opts", ".", "demo_img_name", "=", "test_ops", ".", "demo_img_name", "\n", "", "if", "'dataset'", "in", "test_ops", ":", "\n", "        ", "opts", ".", "dataset", "=", "test_ops", ".", "dataset", "\n", "", "if", "'sequential_outpainting'", "in", "test_ops", ":", "\n", "        ", "opts", ".", "sequential_outpainting", "=", "test_ops", ".", "sequential_outpainting", "\n", "", "opts", ".", "homography", "=", "test_ops", ".", "homography", "\n", "opts", ".", "no_outpainting", "=", "test_ops", ".", "no_outpainting", "\n", "\n", "opts", ".", "normalize_before_residual", "=", "False", "\n", "if", "opts", ".", "dataset", "==", "'test_mp3d'", "or", "test_ops", ".", "old_model", "==", "'modelcheckpoints/mp3d/pixelsynth.pth'", ":", "\n", "        ", "opts", ".", "normalize_before_residual", "=", "True", "\n", "\n", "", "opts", ".", "render_ids", "=", "test_ops", ".", "render_ids", "\n", "opts", ".", "gpu_ids", "=", "test_ops", ".", "gpu_ids", "\n", "\n", "opts", ".", "train_depth", "=", "False", "\n", "return", "opts", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.__init__": [[81, 124], ["len", "multiprocessing.get_context", "custom_habitat_vector_env.VectorEnv._spawn_workers", "write_fn", "read_fn", "write_fn", "read_fn", "len"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.ThreadedVectorEnv._spawn_workers"], ["def", "__init__", "(", "\n", "self", ",", "\n", "make_env_fn", ":", "Callable", "[", "...", ",", "Env", "]", "=", "_make_env_fn", ",", "\n", "env_fn_args", ":", "Tuple", "[", "Tuple", "]", "=", "None", ",", "\n", "auto_reset_done", ":", "bool", "=", "True", ",", "\n", "multiprocessing_start_method", ":", "str", "=", "\"forkserver\"", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "self", ".", "_is_waiting", "=", "False", "\n", "self", ".", "_is_closed", "=", "True", "\n", "\n", "assert", "(", "\n", "env_fn_args", "is", "not", "None", "and", "len", "(", "env_fn_args", ")", ">", "0", "\n", ")", ",", "\"number of environments to be created should be greater than 0\"", "\n", "\n", "self", ".", "_num_envs", "=", "len", "(", "env_fn_args", ")", "\n", "\n", "assert", "multiprocessing_start_method", "in", "self", ".", "_valid_start_methods", ",", "(", "\n", "\"multiprocessing_start_method must be one of {}. Got '{}'\"", "\n", ")", ".", "format", "(", "self", ".", "_valid_start_methods", ",", "multiprocessing_start_method", ")", "\n", "self", ".", "_auto_reset_done", "=", "auto_reset_done", "\n", "self", ".", "_mp_ctx", "=", "mp", ".", "get_context", "(", "multiprocessing_start_method", ")", "\n", "self", ".", "_workers", "=", "[", "]", "\n", "(", "\n", "self", ".", "_connection_read_fns", ",", "\n", "self", ".", "_connection_write_fns", ",", "\n", ")", "=", "self", ".", "_spawn_workers", "(", "# noqa", "\n", "env_fn_args", ",", "make_env_fn", "\n", ")", "\n", "\n", "self", ".", "_is_closed", "=", "False", "\n", "\n", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "OBSERVATION_SPACE_COMMAND", ",", "None", ")", ")", "\n", "", "self", ".", "observation_spaces", "=", "[", "\n", "read_fn", "(", ")", "for", "read_fn", "in", "self", ".", "_connection_read_fns", "\n", "]", "\n", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "ACTION_SPACE_COMMAND", ",", "None", ")", ")", "\n", "", "self", ".", "action_spaces", "=", "[", "\n", "read_fn", "(", ")", "for", "read_fn", "in", "self", ".", "_connection_read_fns", "\n", "]", "\n", "self", ".", "_paused", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.num_envs": [[125, 132], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_envs", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        Returns:\n             number of individual environments.\n        \"\"\"", "\n", "return", "self", ".", "_num_envs", "-", "len", "(", "self", ".", "_paused", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv._worker_env": [[133, 215], ["env_fn", "parent_pipe.close", "connection_read_fn", "env_fn.close", "connection_read_fn", "child_pipe.close", "habitat.core.logging.logger.info", "isinstance", "isinstance", "env_fn.step", "connection_write_fn", "isinstance", "env_fn.reset", "connection_write_fn", "env_fn.reset", "env_fn.step", "connection_write_fn", "connection_write_fn", "env_fn.reset", "env_fn.render", "connection_write_fn", "getattr", "connection_write_fn", "env_fn.sim.sample_navigable_point", "connection_write_fn", "len", "getattr", "getattr", "env_fn.sim.get_observations_at", "connection_write_fn", "numpy.array", "connection_write_fn", "env_fn.sim.get_agent_state"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.close", "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.close", "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.close", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.CycleScheduler.step", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.Phase.reset", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.Phase.reset", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.CycleScheduler.step", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.Phase.reset", "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.render", "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.sample_navigable_point", "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.get_observations_at", "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.get_agent_state"], ["", "@", "staticmethod", "\n", "def", "_worker_env", "(", "\n", "connection_read_fn", ":", "Callable", ",", "\n", "connection_write_fn", ":", "Callable", ",", "\n", "env_fn", ":", "Callable", ",", "\n", "env_fn_args", ":", "Tuple", "[", "Any", "]", ",", "\n", "auto_reset_done", ":", "bool", ",", "\n", "child_pipe", ":", "Optional", "[", "Connection", "]", "=", "None", ",", "\n", "parent_pipe", ":", "Optional", "[", "Connection", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"process worker for creating and interacting with the environment.\n        \"\"\"", "\n", "env", "=", "env_fn", "(", "*", "env_fn_args", ")", "\n", "if", "parent_pipe", "is", "not", "None", ":", "\n", "            ", "parent_pipe", ".", "close", "(", ")", "\n", "", "try", ":", "\n", "            ", "command", ",", "data", "=", "connection_read_fn", "(", ")", "\n", "while", "command", "!=", "CLOSE_COMMAND", ":", "\n", "                ", "if", "command", "==", "STEP_COMMAND", ":", "\n", "# different step methods for habitat.RLEnv and habitat.Env", "\n", "                    ", "if", "isinstance", "(", "env", ",", "habitat", ".", "RLEnv", ")", "or", "isinstance", "(", "\n", "env", ",", "gym", ".", "Env", "\n", ")", ":", "\n", "# habitat.RLEnv", "\n", "                        ", "observations", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "data", ")", "\n", "if", "auto_reset_done", "and", "done", ":", "\n", "                            ", "observations", "=", "env", ".", "reset", "(", ")", "\n", "", "connection_write_fn", "(", "(", "observations", ",", "reward", ",", "done", ",", "info", ")", ")", "\n", "", "elif", "isinstance", "(", "env", ",", "habitat", ".", "Env", ")", ":", "\n", "# habitat.Env", "\n", "                        ", "observations", "=", "env", ".", "step", "(", "data", ")", "\n", "if", "auto_reset_done", "and", "env", ".", "episode_over", ":", "\n", "                            ", "observations", "=", "env", ".", "reset", "(", ")", "\n", "", "connection_write_fn", "(", "observations", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "\n", "\n", "", "", "elif", "command", "==", "RESET_COMMAND", ":", "\n", "                    ", "observations", "=", "env", ".", "reset", "(", ")", "\n", "connection_write_fn", "(", "observations", ")", "\n", "\n", "", "elif", "command", "==", "RENDER_COMMAND", ":", "\n", "                    ", "connection_write_fn", "(", "env", ".", "render", "(", "*", "data", "[", "0", "]", ",", "**", "data", "[", "1", "]", ")", ")", "\n", "\n", "", "elif", "(", "\n", "command", "==", "OBSERVATION_SPACE_COMMAND", "\n", "or", "command", "==", "ACTION_SPACE_COMMAND", "\n", ")", ":", "\n", "                    ", "connection_write_fn", "(", "getattr", "(", "env", ",", "command", ")", ")", "\n", "\n", "", "elif", "command", "==", "CALL_COMMAND", ":", "\n", "                    ", "function_name", ",", "function_args", "=", "data", "\n", "if", "function_args", "is", "None", "or", "len", "(", "function_args", ")", "==", "0", ":", "\n", "                        ", "result", "=", "getattr", "(", "env", ",", "function_name", ")", "(", ")", "\n", "", "else", ":", "\n", "                        ", "result", "=", "getattr", "(", "env", ",", "function_name", ")", "(", "*", "function_args", ")", "\n", "", "connection_write_fn", "(", "result", ")", "\n", "", "elif", "command", "==", "NAVIGABLE_COMMAND", ":", "\n", "                    ", "location", "=", "env", ".", "sim", ".", "sample_navigable_point", "(", ")", "\n", "connection_write_fn", "(", "location", ")", "\n", "", "elif", "command", "==", "OBSERVATIONS", ":", "\n", "                    ", "position", ",", "rotation", "=", "data", "\n", "observations", "=", "env", ".", "sim", ".", "get_observations_at", "(", "position", "=", "position", ",", "\n", "rotation", "=", "rotation", ",", "\n", "keep_agent_at_new_pose", "=", "True", ")", "\n", "connection_write_fn", "(", "(", "observations", ")", ")", "\n", "", "elif", "command", "==", "AGENT_STATE_COMMAND", ":", "\n", "                    ", "agent_state", "=", "env", ".", "sim", ".", "get_agent_state", "(", ")", ".", "sensor_states", "[", "'depth'", "]", "\n", "rotation", "=", "np", ".", "array", "(", "[", "agent_state", ".", "rotation", ".", "w", ",", "agent_state", ".", "rotation", ".", "x", ",", "agent_state", ".", "rotation", ".", "y", ",", "\n", "agent_state", ".", "rotation", ".", "z", "]", ")", "\n", "connection_write_fn", "(", "(", "agent_state", ".", "position", ",", "rotation", ")", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "", "command", ",", "data", "=", "connection_read_fn", "(", ")", "\n", "\n", "", "if", "child_pipe", "is", "not", "None", ":", "\n", "                ", "child_pipe", ".", "close", "(", ")", "\n", "", "", "except", "KeyboardInterrupt", ":", "\n", "            ", "logger", ".", "info", "(", "\"Worker KeyboardInterrupt\"", ")", "\n", "", "finally", ":", "\n", "            ", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv._spawn_workers": [[216, 247], ["zip", "zip", "custom_habitat_vector_env.VectorEnv._mp_ctx.Process", "custom_habitat_vector_env.VectorEnv._workers.append", "custom_habitat_vector_env.VectorEnv.start", "worker_conn.close", "custom_habitat_vector_env.VectorEnv._mp_ctx.Pipe", "range"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.close"], ["", "", "def", "_spawn_workers", "(", "\n", "self", ",", "\n", "env_fn_args", ":", "Iterable", "[", "Tuple", "[", "Any", ",", "...", "]", "]", ",", "\n", "make_env_fn", ":", "Callable", "[", "...", ",", "Env", "]", "=", "_make_env_fn", ",", "\n", ")", "->", "Tuple", "[", "List", "[", "Callable", "[", "[", "]", ",", "Any", "]", "]", ",", "List", "[", "Callable", "[", "[", "Any", "]", ",", "None", "]", "]", "]", ":", "\n", "        ", "parent_connections", ",", "worker_connections", "=", "zip", "(", "\n", "*", "[", "self", ".", "_mp_ctx", ".", "Pipe", "(", "duplex", "=", "True", ")", "for", "_", "in", "range", "(", "self", ".", "_num_envs", ")", "]", "\n", ")", "\n", "self", ".", "_workers", "=", "[", "]", "\n", "for", "worker_conn", ",", "parent_conn", ",", "env_args", "in", "zip", "(", "\n", "worker_connections", ",", "parent_connections", ",", "env_fn_args", "\n", ")", ":", "\n", "            ", "ps", "=", "self", ".", "_mp_ctx", ".", "Process", "(", "\n", "target", "=", "self", ".", "_worker_env", ",", "\n", "args", "=", "(", "\n", "worker_conn", ".", "recv", ",", "\n", "worker_conn", ".", "send", ",", "\n", "make_env_fn", ",", "\n", "env_args", ",", "\n", "self", ".", "_auto_reset_done", ",", "\n", "worker_conn", ",", "\n", "parent_conn", ",", "\n", ")", ",", "\n", ")", "\n", "self", ".", "_workers", ".", "append", "(", "ps", ")", "\n", "ps", ".", "daemon", "=", "True", "\n", "ps", ".", "start", "(", ")", "\n", "worker_conn", ".", "close", "(", ")", "\n", "", "return", "(", "\n", "[", "p", ".", "recv", "for", "p", "in", "parent_connections", "]", ",", "\n", "[", "p", ".", "send", "for", "p", "in", "parent_connections", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.reset": [[249, 263], ["write_fn", "results.append", "read_fn"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Reset all the vectorized environments\n\n        Returns:\n            list of outputs from the reset method of envs.\n        \"\"\"", "\n", "self", ".", "_is_waiting", "=", "True", "\n", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "RESET_COMMAND", ",", "None", ")", ")", "\n", "", "results", "=", "[", "]", "\n", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "            ", "results", ".", "append", "(", "read_fn", "(", ")", ")", "\n", "", "self", ".", "_is_waiting", "=", "False", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.reset_at": [[264, 278], ["None"], "methods", ["None"], ["", "def", "reset_at", "(", "self", ",", "index_env", ":", "int", ")", ":", "\n", "        ", "r\"\"\"Reset in the index_env environment in the vector.\n\n        Args:\n            index_env: index of the environment to be reset\n\n        Returns:\n            list containing the output of reset method of indexed env.\n        \"\"\"", "\n", "self", ".", "_is_waiting", "=", "True", "\n", "self", ".", "_connection_write_fns", "[", "index_env", "]", "(", "(", "RESET_COMMAND", ",", "None", ")", ")", "\n", "results", "=", "[", "self", ".", "_connection_read_fns", "[", "index_env", "]", "(", ")", "]", "\n", "self", ".", "_is_waiting", "=", "False", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.step_at": [[279, 294], ["None"], "methods", ["None"], ["", "def", "step_at", "(", "self", ",", "index_env", ":", "int", ",", "action", ":", "int", ")", ":", "\n", "        ", "r\"\"\"Step in the index_env environment in the vector.\n\n        Args:\n            index_env: index of the environment to be stepped into\n            action: action to be taken\n\n        Returns:\n            list containing the output of step method of indexed env.\n        \"\"\"", "\n", "self", ".", "_is_waiting", "=", "True", "\n", "self", ".", "_connection_write_fns", "[", "index_env", "]", "(", "(", "STEP_COMMAND", ",", "action", ")", ")", "\n", "results", "=", "[", "self", ".", "_connection_read_fns", "[", "index_env", "]", "(", ")", "]", "\n", "self", ".", "_is_waiting", "=", "False", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.async_step": [[295, 304], ["zip", "write_fn"], "methods", ["None"], ["", "def", "async_step", "(", "self", ",", "actions", ":", "List", "[", "int", "]", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Asynchronously step in the environments.\n\n        Args:\n            actions: actions to be performed in the vectorized envs.\n        \"\"\"", "\n", "self", ".", "_is_waiting", "=", "True", "\n", "for", "write_fn", ",", "action", "in", "zip", "(", "self", ".", "_connection_write_fns", ",", "actions", ")", ":", "\n", "            ", "write_fn", "(", "(", "STEP_COMMAND", ",", "action", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.wait_step": [[305, 313], ["observations.append", "read_fn"], "methods", ["None"], ["", "", "def", "wait_step", "(", "self", ")", "->", "List", "[", "Observations", "]", ":", "\n", "        ", "r\"\"\"Wait until all the asynchronized environments have synchronized.\n        \"\"\"", "\n", "observations", "=", "[", "]", "\n", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "            ", "observations", ".", "append", "(", "read_fn", "(", ")", ")", "\n", "", "self", ".", "_is_waiting", "=", "False", "\n", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.step": [[314, 326], ["custom_habitat_vector_env.VectorEnv.async_step", "custom_habitat_vector_env.VectorEnv.wait_step"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.async_step", "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.wait_step"], ["", "def", "step", "(", "self", ",", "actions", ":", "List", "[", "int", "]", ")", ":", "\n", "        ", "r\"\"\"Perform actions in the vectorized environments.\n\n        Args:\n            actions: list of size _num_envs containing action to be taken\n                in each environment.\n\n        Returns:\n            list of outputs from the step method of envs.\n        \"\"\"", "\n", "self", ".", "async_step", "(", "actions", ")", "\n", "return", "self", ".", "wait_step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.get_observations_at": [[327, 333], ["None"], "methods", ["None"], ["", "def", "get_observations_at", "(", "self", ",", "index", ":", "int", ",", "position", ":", "List", "[", "float", "]", ",", "rotation", ":", "List", "[", "float", "]", ")", ":", "\n", "        ", "self", ".", "_is_waiting", "=", "True", "\n", "self", ".", "_connection_write_fns", "[", "index", "]", "(", "(", "OBSERVATIONS", ",", "(", "position", ",", "rotation", ")", ")", ")", "\n", "observations", "=", "self", ".", "_connection_read_fns", "[", "index", "]", "(", ")", "\n", "self", ".", "_is_waiting", "=", "False", "\n", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.sample_navigable_point": [[334, 340], ["None"], "methods", ["None"], ["", "def", "sample_navigable_point", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "        ", "self", ".", "_is_waiting", "=", "True", "\n", "self", ".", "_connection_write_fns", "[", "index", "]", "(", "(", "NAVIGABLE_COMMAND", ",", "None", ")", ")", "\n", "locations", "=", "self", ".", "_connection_read_fns", "[", "index", "]", "(", ")", "\n", "self", ".", "_is_waiting", "=", "False", "\n", "return", "locations", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.get_agent_state": [[341, 347], ["None"], "methods", ["None"], ["", "def", "get_agent_state", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "        ", "self", ".", "_is_waiting", "=", "True", "\n", "self", ".", "_connection_write_fns", "[", "index", "]", "(", "(", "AGENT_STATE_COMMAND", ",", "None", ")", ")", "\n", "cameras", "=", "self", ".", "_connection_read_fns", "[", "index", "]", "(", ")", "\n", "self", ".", "_is_waiting", "=", "False", "\n", "return", "cameras", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.close": [[348, 369], ["write_fn", "write_fn", "process.join", "process.join", "read_fn"], "methods", ["None"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "_is_closed", ":", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "_is_waiting", ":", "\n", "            ", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "                ", "read_fn", "(", ")", "\n", "\n", "", "", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "CLOSE_COMMAND", ",", "None", ")", ")", "\n", "\n", "", "for", "_", ",", "_", ",", "write_fn", ",", "_", "in", "self", ".", "_paused", ":", "\n", "            ", "write_fn", "(", "(", "CLOSE_COMMAND", ",", "None", ")", ")", "\n", "\n", "", "for", "process", "in", "self", ".", "_workers", ":", "\n", "            ", "process", ".", "join", "(", ")", "\n", "\n", "", "for", "_", ",", "_", ",", "_", ",", "process", "in", "self", ".", "_paused", ":", "\n", "            ", "process", ".", "join", "(", ")", "\n", "\n", "", "self", ".", "_is_closed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.pause_at": [[370, 387], ["custom_habitat_vector_env.VectorEnv._connection_read_fns.pop", "custom_habitat_vector_env.VectorEnv._connection_write_fns.pop", "custom_habitat_vector_env.VectorEnv._workers.pop", "custom_habitat_vector_env.VectorEnv._paused.append", "custom_habitat_vector_env.VectorEnv."], "methods", ["None"], ["", "def", "pause_at", "(", "self", ",", "index", ":", "int", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Pauses computation on this env without destroying the env. This is\n        useful for not needing to call steps on all environments when only\n        some are active (for example during the last episodes of running\n        eval episodes).\n\n        Args:\n            index: which env to pause. All indexes after this one will be\n                shifted down by one.\n        \"\"\"", "\n", "if", "self", ".", "_is_waiting", ":", "\n", "            ", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "                ", "read_fn", "(", ")", "\n", "", "", "read_fn", "=", "self", ".", "_connection_read_fns", ".", "pop", "(", "index", ")", "\n", "write_fn", "=", "self", ".", "_connection_write_fns", ".", "pop", "(", "index", ")", "\n", "worker", "=", "self", ".", "_workers", ".", "pop", "(", "index", ")", "\n", "self", ".", "_paused", ".", "append", "(", "(", "index", ",", "read_fn", ",", "write_fn", ",", "worker", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.resume_all": [[388, 396], ["reversed", "custom_habitat_vector_env.VectorEnv._connection_read_fns.insert", "custom_habitat_vector_env.VectorEnv._connection_write_fns.insert", "custom_habitat_vector_env.VectorEnv._workers.insert"], "methods", ["None"], ["", "def", "resume_all", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Resumes any paused envs.\n        \"\"\"", "\n", "for", "index", ",", "read_fn", ",", "write_fn", ",", "worker", "in", "reversed", "(", "self", ".", "_paused", ")", ":", "\n", "            ", "self", ".", "_connection_read_fns", ".", "insert", "(", "index", ",", "read_fn", ")", "\n", "self", ".", "_connection_write_fns", ".", "insert", "(", "index", ",", "write_fn", ")", "\n", "self", ".", "_workers", ".", "insert", "(", "index", ",", "worker", ")", "\n", "", "self", ".", "_paused", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.call_at": [[397, 421], ["None"], "methods", ["None"], ["", "def", "call_at", "(", "\n", "self", ",", "\n", "index", ":", "int", ",", "\n", "function_name", ":", "str", ",", "\n", "function_args", ":", "Optional", "[", "List", "[", "Any", "]", "]", "=", "None", ",", "\n", ")", "->", "Any", ":", "\n", "        ", "r\"\"\"Calls a function (which is passed by name) on the selected env and\n        returns the result.\n\n        Args:\n            index: which env to call the function on.\n            function_name: the name of the function to call on the env.\n            function_args: optional function args.\n\n        Returns:\n            result of calling the function.\n        \"\"\"", "\n", "self", ".", "_is_waiting", "=", "True", "\n", "self", ".", "_connection_write_fns", "[", "index", "]", "(", "\n", "(", "CALL_COMMAND", ",", "(", "function_name", ",", "function_args", ")", ")", "\n", ")", "\n", "result", "=", "self", ".", "_connection_read_fns", "[", "index", "]", "(", ")", "\n", "self", ".", "_is_waiting", "=", "False", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.call": [[422, 453], ["zip", "zip", "len", "len", "write_fn", "results.append", "len", "read_fn"], "methods", ["None"], ["", "def", "call", "(", "\n", "self", ",", "\n", "function_names", ":", "List", "[", "str", "]", ",", "\n", "function_args_list", ":", "Optional", "[", "List", "[", "Any", "]", "]", "=", "None", ",", "\n", ")", "->", "List", "[", "Any", "]", ":", "\n", "        ", "r\"\"\"Calls a list of functions (which are passed by name) on the\n        corresponding env (by index).\n\n        Args:\n            function_names: the name of the functions to call on the envs.\n            function_args_list: list of function args for each function. If\n                provided, len(function_args_list) should be as long as\n                len(function_names).\n\n        Returns:\n            result of calling the function.\n        \"\"\"", "\n", "self", ".", "_is_waiting", "=", "True", "\n", "if", "function_args_list", "is", "None", ":", "\n", "            ", "function_args_list", "=", "[", "None", "]", "*", "len", "(", "function_names", ")", "\n", "", "assert", "len", "(", "function_names", ")", "==", "len", "(", "function_args_list", ")", "\n", "func_args", "=", "zip", "(", "function_names", ",", "function_args_list", ")", "\n", "for", "write_fn", ",", "func_args_on", "in", "zip", "(", "\n", "self", ".", "_connection_write_fns", ",", "func_args", "\n", ")", ":", "\n", "            ", "write_fn", "(", "(", "CALL_COMMAND", ",", "func_args_on", ")", ")", "\n", "", "results", "=", "[", "]", "\n", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "            ", "results", ".", "append", "(", "read_fn", "(", ")", ")", "\n", "", "self", ".", "_is_waiting", "=", "False", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.render": [[454, 473], ["habitat.core.utils.tile_images", "write_fn", "read_fn", "cv2.imshow", "cv2.waitKey"], "methods", ["None"], ["", "def", "render", "(", "\n", "self", ",", "mode", ":", "str", "=", "\"human\"", ",", "*", "args", ",", "**", "kwargs", "\n", ")", "->", "Union", "[", "np", ".", "ndarray", ",", "None", "]", ":", "\n", "        ", "r\"\"\"Render observations from all environments in a tiled image.\n        \"\"\"", "\n", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "RENDER_COMMAND", ",", "(", "args", ",", "{", "\"mode\"", ":", "\"rgb\"", ",", "**", "kwargs", "}", ")", ")", ")", "\n", "", "images", "=", "[", "read_fn", "(", ")", "for", "read_fn", "in", "self", ".", "_connection_read_fns", "]", "\n", "tile", "=", "tile_images", "(", "images", ")", "\n", "if", "mode", "==", "\"human\"", ":", "\n", "            ", "import", "cv2", "\n", "\n", "cv2", ".", "imshow", "(", "\"vecenv\"", ",", "tile", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "return", "None", "\n", "", "elif", "mode", "==", "\"rgb_array\"", ":", "\n", "            ", "return", "tile", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv._valid_start_methods": [[474, 477], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "_valid_start_methods", "(", "self", ")", "->", "Set", "[", "str", "]", ":", "\n", "        ", "return", "{", "\"forkserver\"", ",", "\"spawn\"", ",", "\"fork\"", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.__del__": [[478, 480], ["custom_habitat_vector_env.VectorEnv.close"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.close"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.__enter__": [[481, 483], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.__exit__": [[484, 486], ["custom_habitat_vector_env.VectorEnv.close"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.close"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.ThreadedVectorEnv._spawn_workers": [[496, 524], ["zip", "zip", "threading.Thread", "custom_habitat_vector_env.ThreadedVectorEnv._workers.append", "threading.Thread.start", "queue.Queue", "queue.Queue", "range"], "methods", ["None"], ["def", "_spawn_workers", "(", "\n", "self", ",", "\n", "env_fn_args", ":", "Iterable", "[", "Tuple", "[", "Any", ",", "...", "]", "]", ",", "\n", "make_env_fn", ":", "Callable", "[", "...", ",", "Env", "]", "=", "_make_env_fn", ",", "\n", ")", "->", "Tuple", "[", "List", "[", "Callable", "[", "[", "]", ",", "Any", "]", "]", ",", "List", "[", "Callable", "[", "[", "Any", "]", ",", "None", "]", "]", "]", ":", "\n", "        ", "parent_read_queues", ",", "parent_write_queues", "=", "zip", "(", "\n", "*", "[", "(", "Queue", "(", ")", ",", "Queue", "(", ")", ")", "for", "_", "in", "range", "(", "self", ".", "_num_envs", ")", "]", "\n", ")", "\n", "self", ".", "_workers", "=", "[", "]", "\n", "for", "parent_read_queue", ",", "parent_write_queue", ",", "env_args", "in", "zip", "(", "\n", "parent_read_queues", ",", "parent_write_queues", ",", "env_fn_args", "\n", ")", ":", "\n", "            ", "thread", "=", "Thread", "(", "\n", "target", "=", "self", ".", "_worker_env", ",", "\n", "args", "=", "(", "\n", "parent_write_queue", ".", "get", ",", "\n", "parent_read_queue", ".", "put", ",", "\n", "make_env_fn", ",", "\n", "env_args", ",", "\n", "self", ".", "_auto_reset_done", ",", "\n", ")", ",", "\n", ")", "\n", "self", ".", "_workers", ".", "append", "(", "thread", ")", "\n", "thread", ".", "daemon", "=", "True", "\n", "thread", ".", "start", "(", ")", "\n", "", "return", "(", "\n", "[", "q", ".", "get", "for", "q", "in", "parent_read_queues", "]", ",", "\n", "[", "q", ".", "put", "for", "q", "in", "parent_write_queues", "]", ",", "\n", ")", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env._make_env_fn": [[32, 48], ["habitat.core.env.Env", "habitat.core.env.Env.seed"], "function", ["None"], ["def", "_make_env_fn", "(", "\n", "config", ":", "Config", ",", "dataset", ":", "Optional", "[", "habitat", ".", "Dataset", "]", "=", "None", ",", "rank", ":", "int", "=", "0", "\n", ")", "->", "Env", ":", "\n", "    ", "r\"\"\"Constructor for default habitat Env.\n\n    Args:\n        config: configuration for environment.\n        dataset: dataset for environment.\n        rank: rank for setting seed of environment\n\n    Returns:\n        ``Env``/``RLEnv`` object\n    \"\"\"", "\n", "habitat_env", "=", "Env", "(", "config", "=", "config", ",", "dataset", "=", "dataset", ")", "\n", "habitat_env", ".", "seed", "(", "config", ".", "SEED", "+", "rank", ")", "\n", "return", "habitat_env", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.geometry.get_deltas": [[8, 22], ["numpy.vstack", "numpy.vstack", "numpy.matmul", "math.sqrt", "numpy.array", "numpy.matmul", "numpy.linalg.inv", "math.sqrt.sum", "math.sqrt", "numpy.array", "numpy.array", "numpy.arccos"], "function", ["None"], ["def", "get_deltas", "(", "mat1", ",", "mat2", ")", ":", "\n", "    ", "mat1", "=", "np", ".", "vstack", "(", "(", "mat1", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", ")", ")", "\n", "mat2", "=", "np", ".", "vstack", "(", "(", "mat2", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", ")", ")", "\n", "\n", "dMat", "=", "np", ".", "matmul", "(", "np", ".", "linalg", ".", "inv", "(", "mat1", ")", ",", "mat2", ")", "\n", "dtrans", "=", "dMat", "[", "0", ":", "3", ",", "3", "]", "**", "2", "\n", "dtrans", "=", "sqrt", "(", "dtrans", ".", "sum", "(", ")", ")", "\n", "\n", "origVec", "=", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "0", "]", ",", "[", "1", "]", "]", ")", "\n", "rotVec", "=", "np", ".", "matmul", "(", "dMat", "[", "0", ":", "3", ",", "0", ":", "3", "]", ",", "origVec", ")", "\n", "arccos", "=", "(", "rotVec", "*", "origVec", ")", ".", "sum", "(", ")", "/", "sqrt", "(", "(", "rotVec", "**", "2", ")", ".", "sum", "(", ")", ")", "\n", "dAngle", "=", "np", ".", "arccos", "(", "arccos", ")", "*", "180.0", "/", "np", ".", "pi", "\n", "\n", "return", "dAngle", ",", "dtrans", "\n", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.__init__": [[30, 119], ["torch.Module.__init__", "models.networks.utilities.get_encoder", "hasattr", "models.networks.utilities.get_decoder", "models.losses.synthesis.SynthesisLoss", "z_buffermodel.ZbufferModelPts.register_buffer", "z_buffermodel.ZbufferModelPts.register_buffer", "z_buffermodel.ZbufferModelPts.register_buffer", "torchvision.transforms.Compose", "models.networks.architectures.Unet", "models.networks.architectures.Unet", "models.networks.architectures.Unet", "models.projection.z_buffer_manipulator.PtsManipulator", "models.projection.z_buffer_manipulator.PtsManipulator", "models.lmconv.model.OurPixelCNN", "torch.Upsample", "torch.Upsample", "torch.Upsample", "models.vqvae2.vqvae.VQVAETop", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "models.lmconv.layers.PONO", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.utilities.get_encoder", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.utilities.get_decoder"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "# ENCODER", "\n", "# Encode features to a given resolution", "\n", "self", ".", "encoder", "=", "get_encoder", "(", "opt", ")", "\n", "\n", "# POINT CLOUD TRANSFORMER", "\n", "# REGRESS 3D POINTS", "\n", "if", "hasattr", "(", "opt", ",", "'Unet_num_filters'", ")", ":", "\n", "            ", "self", ".", "pts_regressor", "=", "Unet", "(", "channels_in", "=", "3", ",", "channels_out", "=", "1", ",", "opt", "=", "opt", ",", "num_filters", "=", "opt", ".", "Unet_num_filters", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pts_regressor", "=", "Unet", "(", "channels_in", "=", "3", ",", "channels_out", "=", "1", ",", "opt", "=", "opt", ")", "\n", "", "if", "\"modifier\"", "in", "self", ".", "opt", ".", "depth_predictor_type", ":", "\n", "            ", "self", ".", "modifier", "=", "Unet", "(", "channels_in", "=", "64", ",", "channels_out", "=", "64", ",", "opt", "=", "opt", ")", "\n", "\n", "# 3D Points transformer", "\n", "", "if", "self", ".", "opt", ".", "use_rgb_features", ":", "\n", "            ", "self", ".", "pts_transformer", "=", "PtsManipulator", "(", "opt", ".", "W", ",", "C", "=", "3", ",", "opt", "=", "opt", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pts_transformer", "=", "PtsManipulator", "(", "opt", ".", "W", ",", "opt", "=", "opt", ")", "\n", "\n", "#self.directions = ['R','L']#,'U','D']", "\n", "#if 'diagonals' in self.opt and self.opt.diagonals:", "\n", "#    self.directions = ['R','L','U','D', 'UL', 'UR', 'DR', 'DL']", "\n", "\n", "# autoregressive outpaint", "\n", "", "if", "not", "\"no_outpainting\"", "in", "self", ".", "opt", "or", "not", "self", ".", "opt", ".", "no_outpainting", ":", "\n", "            ", "self", ".", "num_classes", "=", "512", "\n", "norm_op", "=", "lambda", "num_channels", ":", "PONO", "(", ")", "\n", "self", ".", "outpaint2", "=", "OurPixelCNN", "(", "nr_resnet", "=", "2", ",", "\n", "nr_filters", "=", "80", ",", "\n", "input_channels", "=", "self", ".", "num_classes", ",", "\n", "nr_logistic_mix", "=", "10", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "max_dilation", "=", "2", ",", "\n", "weight_norm", "=", "(", "False", ")", ",", "\n", "feature_norm_op", "=", "norm_op", ",", "\n", "dropout_prob", "=", "0", ",", "\n", "conv_bias", "=", "(", "True", ")", ",", "\n", "conv_mask_weight", "=", "False", ",", "\n", "rematerialize", "=", "False", ",", "\n", "binarize", "=", "False", ")", "\n", "self", ".", "args", "=", "mock", ".", "Mock", "\n", "# used to revert to normal seed after sampling", "\n", "self", ".", "args", ".", "dataloader_seed", "=", "self", ".", "opt", ".", "seed", "\n", "\n", "self", ".", "obs", "=", "[", "3", ",", "32", ",", "32", "]", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "8", ",", "mode", "=", "\"bilinear\"", ")", "\n", "\n", "self", ".", "vqvae", "=", "VQVAETop", "(", ")", "\n", "self", ".", "ar_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "self", ".", "args", ".", "num_classes", "=", "self", ".", "num_classes", "\n", "\n", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "8", ",", "stride", "=", "8", ")", "\n", "self", ".", "classifier", "=", "torchvision", ".", "models", ".", "__dict__", "[", "'resnet18'", "]", "(", "num_classes", "=", "365", ")", "\n", "\n", "", "self", ".", "projector", "=", "get_decoder", "(", "opt", ")", "\n", "\n", "# LOSS FUNCTION", "\n", "# Module to abstract away the loss function complexity", "\n", "self", ".", "loss_function", "=", "SynthesisLoss", "(", "opt", "=", "opt", ")", "\n", "\n", "self", ".", "min_tensor", "=", "self", ".", "register_buffer", "(", "\"min_z\"", ",", "torch", ".", "Tensor", "(", "[", "0.1", "]", ")", ")", "\n", "self", ".", "max_tensor", "=", "self", ".", "register_buffer", "(", "\n", "\"max_z\"", ",", "torch", ".", "Tensor", "(", "[", "self", ".", "opt", ".", "max_z", "]", ")", "\n", ")", "\n", "self", ".", "discretized", "=", "self", ".", "register_buffer", "(", "\n", "\"discretized_zs\"", ",", "\n", "torch", ".", "linspace", "(", "self", ".", "opt", ".", "min_z", ",", "self", ".", "opt", ".", "max_z", ",", "self", ".", "opt", ".", "voxel_size", ")", ",", "\n", ")", "\n", "\n", "self", ".", "trn", "=", "trn", ".", "Compose", "(", "[", "\n", "trn", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "trn", ".", "CenterCrop", "(", "224", ")", ",", "\n", "trn", ".", "ToTensor", "(", ")", ",", "\n", "trn", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "# instead of using given output rotation matrix, we use ", "\n", "# euler rotation of .6 as our full angle -- which we consider both left & right", "\n", "self", ".", "rotvecs", "=", "{", "'R'", ":", "np", ".", "array", "(", "[", "0", ",", ".6", ",", "0", "]", ")", ",", "'L'", ":", "np", ".", "array", "(", "[", "0", ",", "-", ".6", ",", "0", "]", ")", ",", "'U'", ":", "np", ".", "array", "(", "[", "-", ".3", ",", "0", ",", "0", "]", ")", ",", "'D'", ":", "np", ".", "array", "(", "[", ".3", ",", "0", ",", "0", "]", ")", ",", "'UR'", ":", "np", ".", "array", "(", "[", "-", ".15", ",", ".3", ",", "0", "]", ")", ",", "'UL'", ":", "np", ".", "array", "(", "[", "-", ".15", ",", "-", ".3", ",", "0", "]", ")", ",", "'DR'", ":", "np", ".", "array", "(", "[", ".15", ",", ".3", ",", "0", "]", ")", ",", "'DL'", ":", "np", ".", "array", "(", "[", ".15", ",", "-", ".3", ",", "0", "]", ")", "}", "\n", "\n", "# used for consistency direction choice", "\n", "self", ".", "mapping", "=", "[", "'R'", ",", "'L'", ",", "'U'", ",", "'D'", ",", "'UL'", ",", "'UR'", ",", "'DR'", ",", "'DL'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.process_batch": [[120, 185], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "input_img.cuda.cuda.cuda", "K.cuda.cuda.cuda", "K_inv.cuda.cuda.cuda", "input_RT.cuda.cuda.cuda", "input_RTinv.cuda.cuda.cuda", "output_img.cuda.cuda.cuda", "output_RT.cuda.cuda.cuda", "output_RTinv.cuda.cuda.cuda", "output_RT.cuda.cuda.cuda", "output_RTinv.cuda.cuda.cuda", "direction.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "process_batch", "(", "self", ",", "batch", ")", ":", "\n", "# Input values", "\n", "        ", "input_img", "=", "batch", "[", "\"images\"", "]", "[", "0", "]", "\n", "\n", "# Camera parameters", "\n", "K", "=", "batch", "[", "\"cameras\"", "]", "[", "0", "]", "[", "\"K\"", "]", "\n", "K_inv", "=", "batch", "[", "\"cameras\"", "]", "[", "0", "]", "[", "\"Kinv\"", "]", "\n", "input_RT", "=", "batch", "[", "\"cameras\"", "]", "[", "0", "]", "[", "\"P\"", "]", "\n", "input_RTinv", "=", "batch", "[", "\"cameras\"", "]", "[", "0", "]", "[", "\"Pinv\"", "]", "\n", "\n", "if", "self", ".", "opt", ".", "model_setting", "==", "'train'", "or", "self", ".", "opt", ".", "model_setting", "==", "'gen_paired_img'", ":", "\n", "            ", "output_img", "=", "batch", "[", "\"images\"", "]", "[", "-", "1", "]", "\n", "output_RT", "=", "batch", "[", "\"cameras\"", "]", "[", "-", "1", "]", "[", "\"P\"", "]", "\n", "output_RTinv", "=", "batch", "[", "\"cameras\"", "]", "[", "-", "1", "]", "[", "\"Pinv\"", "]", "\n", "", "elif", "self", ".", "opt", ".", "model_setting", "==", "'get_gen_order'", ":", "\n", "            ", "output_RT", "=", "batch", "[", "\"cameras\"", "]", "[", "-", "1", "]", "[", "\"P\"", "]", "\n", "output_RTinv", "=", "batch", "[", "\"cameras\"", "]", "[", "-", "1", "]", "[", "\"Pinv\"", "]", "\n", "", "elif", "self", ".", "opt", ".", "model_setting", "==", "'gen_two_imgs'", ":", "\n", "            ", "direction", "=", "batch", "[", "\"direction\"", "]", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "input_img", "=", "input_img", ".", "cuda", "(", ")", "\n", "K", "=", "K", ".", "cuda", "(", ")", "\n", "K_inv", "=", "K_inv", ".", "cuda", "(", ")", "\n", "input_RT", "=", "input_RT", ".", "cuda", "(", ")", "\n", "input_RTinv", "=", "input_RTinv", ".", "cuda", "(", ")", "\n", "\n", "if", "self", ".", "opt", ".", "model_setting", "==", "'train'", "or", "self", ".", "opt", ".", "model_setting", "==", "'gen_paired_img'", ":", "\n", "                ", "output_img", "=", "output_img", ".", "cuda", "(", ")", "\n", "output_RT", "=", "output_RT", ".", "cuda", "(", ")", "\n", "output_RTinv", "=", "output_RTinv", ".", "cuda", "(", ")", "\n", "", "elif", "self", ".", "opt", ".", "model_setting", "==", "'get_gen_order'", ":", "\n", "                ", "output_RT", "=", "output_RT", ".", "cuda", "(", ")", "\n", "output_RTinv", "=", "output_RTinv", ".", "cuda", "(", ")", "\n", "", "elif", "self", ".", "opt", ".", "model_setting", "==", "'gen_two_imgs'", ":", "\n", "                ", "direction", "=", "direction", ".", "cuda", "(", ")", "\n", "\n", "", "", "'''\n        if self.opt.visualize_only and self.opt.dataset != 'realestate':\n            # Input values\n            input_img = batch[\"images\"][0][0]\n            output_img = batch[\"images\"][-1][0]\n\n            if \"depths\" in batch.keys():\n                depth_img = batch[\"depths\"][0][0]\n\n            # Camera parameters\n            K = batch[\"cameras\"][0][\"K\"][0]\n            K_inv = batch[\"cameras\"][0][\"Kinv\"][0]\n\n            input_RT = batch[\"cameras\"][0][\"P\"][0]\n            torch.set_printoptions(sci_mode=False)\n            input_RTinv = batch[\"cameras\"][0][\"Pinv\"][0]\n            output_RT = batch[\"cameras\"][-1][\"P\"][0]\n            output_RTinv = batch[\"cameras\"][-1][\"Pinv\"][0]\n        '''", "\n", "\n", "if", "self", ".", "opt", ".", "model_setting", "==", "'train'", "or", "self", ".", "opt", ".", "model_setting", "==", "'gen_paired_img'", ":", "\n", "            ", "return", "K", ",", "K_inv", ",", "input_RT", ",", "input_RTinv", ",", "output_RT", ",", "output_RTinv", ",", "input_img", ",", "output_img", "\n", "", "elif", "self", ".", "opt", ".", "model_setting", "==", "'get_gen_order'", ":", "\n", "            ", "return", "K", ",", "K_inv", ",", "input_RT", ",", "input_RTinv", ",", "output_RT", ",", "output_RTinv", ",", "input_img", "\n", "", "elif", "self", ".", "opt", ".", "model_setting", "==", "'gen_two_imgs'", ":", "\n", "            ", "return", "K", ",", "K_inv", ",", "input_RT", ",", "input_RTinv", ",", "input_img", ",", "direction", "\n", "", "else", ":", "\n", "            ", "return", "K", ",", "K_inv", ",", "input_RT", ",", "input_RTinv", ",", "input_img", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.eulerAnglesToRotationMatrix": [[186, 201], ["numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "math.cos", "math.sin", "math.cos", "math.cos", "math.sin", "math.cos", "math.cos", "math.sin", "math.cos", "math.sin", "math.sin", "math.sin"], "methods", ["None"], ["", "", "def", "eulerAnglesToRotationMatrix", "(", "self", ",", "theta", ")", ":", "\n", "        ", "R_x", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "math", ".", "cos", "(", "theta", "[", "0", "]", ")", ",", "-", "math", ".", "sin", "(", "theta", "[", "0", "]", ")", "]", ",", "\n", "[", "0", ",", "math", ".", "sin", "(", "theta", "[", "0", "]", ")", ",", "math", ".", "cos", "(", "theta", "[", "0", "]", ")", "]", "\n", "]", ")", "\n", "R_y", "=", "np", ".", "array", "(", "[", "[", "math", ".", "cos", "(", "theta", "[", "1", "]", ")", ",", "0", ",", "math", ".", "sin", "(", "theta", "[", "1", "]", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "math", ".", "sin", "(", "theta", "[", "1", "]", ")", ",", "0", ",", "math", ".", "cos", "(", "theta", "[", "1", "]", ")", "]", "\n", "]", ")", "\n", "R_z", "=", "np", ".", "array", "(", "[", "[", "math", ".", "cos", "(", "theta", "[", "2", "]", ")", ",", "-", "math", ".", "sin", "(", "theta", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "math", ".", "sin", "(", "theta", "[", "2", "]", ")", ",", "math", ".", "cos", "(", "theta", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", ")", "\n", "R", "=", "np", ".", "dot", "(", "R_z", ",", "np", ".", "dot", "(", "R_y", ",", "R_x", ")", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.get_rt_from_rot": [[202, 243], ["z_buffermodel.ZbufferModelPts.eulerAnglesToRotationMatrix", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "mtx[].bmm", "torch.zeros().cuda.bmm", "torch.zeros().cuda.bmm", "torch.zeros().cuda.bmm", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "numpy.linalg.norm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "numpy.array", "z_buffermodel.ZbufferModelPts.eulerAnglesToRotationMatrix", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.zeros().cuda.bmm", "torch.zeros().cuda.bmm", "torch.zeros().cuda.bmm", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.cos", "numpy.sin", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.eulerAnglesToRotationMatrix", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.eulerAnglesToRotationMatrix"], ["", "def", "get_rt_from_rot", "(", "self", ",", "direction", ",", "input_RT", ",", "num", "=", "None", ",", "denom", "=", "None", ")", ":", "\n", "# we convert to euler angles, modify, then go back to rotation matrix", "\n", "\n", "# corner case", "\n", "        ", "if", "num", "is", "None", ":", "\n", "            ", "num", "=", "0", "\n", "\n", "", "if", "self", ".", "opt", ".", "model_setting", "==", "'gen_two_imgs'", "or", "self", ".", "opt", ".", "model_setting", "==", "'gen_scene'", ":", "\n", "            ", "if", "direction", "==", "'S'", ":", "\n", "                ", "new_output_RT", "=", "torch", ".", "zeros_like", "(", "input_RT", ")", ".", "cuda", "(", ")", "\n", "new_output_RT", "[", ":", ",", ":", ",", ":", "3", "]", "=", "input_RT", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "new_output_RT", "[", ":", ",", "3", ",", "3", "]", "=", "1", "\n", "new_output_RT", "[", "0", ",", ":", "3", ",", "3", "]", "=", "input_RT", "[", "0", ",", ":", "3", ",", "3", "]", "+", ".35", "*", "torch", ".", "tensor", "(", "[", "np", ".", "sin", "(", "2", "*", "np", ".", "pi", "*", "num", "/", "denom", ")", ",", "np", ".", "cos", "(", "2", "*", "np", ".", "pi", "*", "num", "/", "denom", ")", ",", ".4", "*", "np", ".", "sin", "(", "2", "*", "np", ".", "pi", "*", "(", ".25", "+", "num", "/", "denom", ")", ")", "]", ")", ".", "cuda", "(", ")", "\n", "new_output_RTinv", "=", "torch", ".", "inverse", "(", "new_output_RT", ")", "\n", "return", "new_output_RTinv", ",", "new_output_RT", "\n", "", "elif", "direction", "==", "'C'", ":", "\n", "                ", "rotvec", "=", "np", ".", "array", "(", "[", "0.2", "*", "np", ".", "cos", "(", "2", "*", "np", ".", "pi", "*", "num", "/", "denom", ")", ",", "0.2", "*", "np", ".", "sin", "(", "2", "*", "np", ".", "pi", "*", "num", "/", "denom", ")", ",", "0", "]", ")", "\n", "tmp_mtx", "=", "self", ".", "eulerAnglesToRotationMatrix", "(", "rotvec", ")", "\n", "mtx", "=", "torch", ".", "zeros", "(", "[", "1", ",", "4", ",", "4", "]", ")", ".", "cuda", "(", ")", "\n", "mtx", "[", "0", ",", "3", ",", "3", "]", "=", "1", "\n", "mtx", "[", "0", ",", ":", "3", ",", ":", "3", "]", "=", "torch", ".", "tensor", "(", "tmp_mtx", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "new_output_RT", "=", "mtx", ".", "bmm", "(", "input_RT", ")", "\n", "new_output_RTinv", "=", "torch", ".", "inverse", "(", "new_output_RT", ")", "\n", "return", "new_output_RTinv", ",", "new_output_RT", "\n", "", "else", ":", "\n", "                ", "rotvec", "=", "self", ".", "rotvecs", "[", "direction", "]", "*", "num", "/", "denom", "\n", "", "", "else", ":", "\n", "            ", "rotvec", "=", "self", ".", "rotvecs", "[", "direction", "]", "*", "self", ".", "opt", ".", "rotation", "/", "np", ".", "linalg", ".", "norm", "(", "self", ".", "rotvecs", "[", "direction", "]", ")", "\n", "\n", "", "tmp_mtx", "=", "self", ".", "eulerAnglesToRotationMatrix", "(", "rotvec", ")", "\n", "mtx", "=", "torch", ".", "zeros", "(", "[", "1", ",", "4", ",", "4", "]", ")", ".", "cuda", "(", ")", "\n", "mtx", "[", "0", ",", "3", ",", "3", "]", "=", "1", "\n", "mtx", "[", "0", ",", ":", "3", ",", ":", "3", "]", "=", "torch", ".", "tensor", "(", "tmp_mtx", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "if", "self", ".", "opt", ".", "homography", ":", "\n", "            ", "new_output_RT", "=", "torch", ".", "zeros", "(", "[", "1", ",", "4", ",", "4", "]", ")", ".", "cuda", "(", ")", "\n", "new_output_RT", "[", ":", ",", ":", ",", "3", "]", "=", "input_RT", "[", ":", ",", ":", ",", "3", "]", "\n", "new_output_RT", "[", ":", ",", ":", "3", ",", ":", "3", "]", "=", "mtx", "[", ":", ",", ":", "3", ",", ":", "3", "]", ".", "bmm", "(", "input_RT", "[", ":", ",", ":", "3", ",", ":", "3", "]", ")", "\n", "", "else", ":", "\n", "            ", "new_output_RT", "=", "mtx", ".", "bmm", "(", "input_RT", ")", "\n", "", "new_output_RTinv", "=", "torch", ".", "inverse", "(", "new_output_RT", ")", "\n", "return", "new_output_RTinv", ",", "new_output_RT", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.get_best_sample": [[244, 277], ["range", "numpy.array().argsort", "numpy.array().argsort", "range", "numpy.argsort", "numpy.argmax", "models.lmconv.sample.sample", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "z_buffermodel.ZbufferModelPts.vqvae.decode_code", "z_buffermodel.ZbufferModelPts.get_combined", "z_buffermodel.ZbufferModelPts.projector", "discrim_scores.append", "PIL.Image.fromarray", "z_buffermodel.ZbufferModelPts.trn", "z_buffermodel.ZbufferModelPts.classifier.forward", "torch.softmax().data.squeeze", "torch.softmax().data.squeeze", "torch.softmax().data.squeeze", "torch.softmax().data.squeeze.sort", "entropy_scores.append", "imgs.append", "discrim_ranks.append", "entropy_ranks.append", "z_buffermodel.ZbufferModelPts.downsample", "torch.argmax.to().to", "torch.argmax.to().to", "torch.argmax.to().to", "[].mean().cpu", "z_buffermodel.ZbufferModelPts.unsqueeze().cuda", "numpy.array", "numpy.array", "numpy.array", "background_mask.float", "numpy.sum", "numpy.array", "torch.argmax.to", "torch.argmax.to", "torch.argmax.to", "[].mean", "z_buffermodel.ZbufferModelPts.unsqueeze", "torch.softmax", "torch.softmax", "torch.softmax", "numpy.where", "numpy.where", "z_buffermodel.ZbufferModelPts.cpu", "numpy.array", "numpy.log", "numpy.array", "netD.run_discriminator_one_step", "gen_img[].reshape().cpu().numpy", "gen_img[].reshape().cpu", "gen_img[].reshape"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.sample.sample", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.decode_code", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.get_combined", "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.ssim.SSIM.forward", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.MultiscaleDiscriminator.downsample", "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.DiscriminatorLoss.run_discriminator_one_step"], ["", "def", "get_best_sample", "(", "self", ",", "gen_order", ",", "masks", ",", "downsampled_fs", ",", "background_mask", ",", "gen_fs", ",", "netD", ",", "input_img", ")", ":", "\n", "        ", "discrim_scores", ",", "entropy_scores", ",", "imgs", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "num_samples", ")", ":", "\n", "            ", "autoreg_output", ",", "autoreg_loss", "=", "sample", "(", "self", ".", "outpaint2", ",", "gen_order", ",", "*", "masks", ",", "downsampled_fs", ",", "self", ".", "obs", ",", "self", ".", "args", ",", "i", ",", "self", ".", "opt", ".", "temperature", ",", "self", ".", "downsample", "(", "background_mask", ".", "float", "(", ")", ")", ")", "\n", "autoreg_output", "=", "torch", ".", "argmax", "(", "autoreg_output", ",", "dim", "=", "1", ")", "\n", "ar_sample", "=", "self", ".", "vqvae", ".", "decode_code", "(", "autoreg_output", ".", "to", "(", "torch", ".", "int64", ")", ".", "to", "(", "'cuda'", ")", ")", "\n", "combined", "=", "self", ".", "get_combined", "(", "gen_fs", ",", "ar_sample", ",", "background_mask", ")", "\n", "gen_img", "=", "self", ".", "projector", "(", "combined", ",", "background_mask", ")", "\n", "\n", "discrim_scores", ".", "append", "(", "netD", ".", "run_discriminator_one_step", "(", "gen_img", ",", "input_img", ")", "[", "\"D_Fake\"", "]", ".", "mean", "(", ")", ".", "cpu", "(", ")", ")", "# use input so not using output", "\n", "\n", "png_stype", "=", "Image", ".", "fromarray", "(", "(", "(", "gen_img", "[", "0", "]", ".", "reshape", "(", "[", "256", ",", "256", ",", "3", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", ".5", "+", ".5", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "new_input_img", "=", "self", ".", "trn", "(", "png_stype", ")", "\n", "logit", "=", "self", ".", "classifier", ".", "forward", "(", "new_input_img", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", ")", "\n", "h_x", "=", "F", ".", "softmax", "(", "logit", ".", "cpu", "(", ")", ",", "1", ")", ".", "data", ".", "squeeze", "(", ")", "\n", "probs", ",", "idx", "=", "h_x", ".", "sort", "(", "0", ",", "True", ")", "\n", "entropy_scores", ".", "append", "(", "-", "np", ".", "sum", "(", "np", ".", "array", "(", "probs", ")", "*", "np", ".", "log", "(", "np", ".", "array", "(", "probs", ")", ")", ")", ")", "\n", "imgs", ".", "append", "(", "gen_img", ")", "\n", "\n", "", "entropy_ranks", "=", "[", "]", "\n", "discrim_ranks", "=", "[", "]", "\n", "sorted_disc", "=", "np", ".", "array", "(", "discrim_scores", ")", ".", "argsort", "(", ")", "\n", "sorted_entr", "=", "np", ".", "array", "(", "entropy_scores", ")", ".", "argsort", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "num_samples", ")", ":", "\n", "            ", "discrim_ranks", ".", "append", "(", "np", ".", "where", "(", "sorted_disc", "==", "i", ")", "[", "0", "]", "[", "0", "]", ")", "\n", "entropy_ranks", ".", "append", "(", "np", ".", "where", "(", "sorted_entr", "==", "i", ")", "[", "0", "]", "[", "0", "]", ")", "\n", "\n", "", "total", "=", ".5", "*", "(", "self", ".", "opt", ".", "num_samples", "-", "1", "-", "np", ".", "array", "(", "entropy_ranks", ")", ")", "+", ".5", "*", "np", ".", "array", "(", "discrim_ranks", ")", "\n", "sorted_total", "=", "np", ".", "argsort", "(", "total", ")", "\n", "best", "=", "np", ".", "argmax", "(", "total", ")", "\n", "best_img", "=", "imgs", "[", "best", "]", "\n", "return", "best_img", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.forward": [[278, 290], ["z_buffermodel.ZbufferModelPts.forward_scene", "z_buffermodel.ZbufferModelPts.forward_gen_order", "z_buffermodel.ZbufferModelPts.forward_image", "z_buffermodel.ZbufferModelPts.forward_image"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.forward_scene", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.forward_gen_order", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.forward_image", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.forward_image"], ["", "def", "forward", "(", "self", ",", "batch", ",", "netD", "=", "None", ")", ":", "\n", "        ", "\"\"\" Forward pass of the view synthesis model.\n        \"\"\"", "\n", "\n", "if", "self", ".", "opt", ".", "model_setting", "==", "'gen_scene'", "or", "self", ".", "opt", ".", "model_setting", "==", "'gen_two_imgs'", ":", "\n", "            ", "return", "self", ".", "forward_scene", "(", "batch", ",", "netD", ")", "\n", "", "elif", "self", ".", "opt", ".", "model_setting", "==", "'get_gen_order'", ":", "\n", "            ", "return", "self", ".", "forward_gen_order", "(", "batch", ")", "\n", "", "elif", "self", ".", "opt", ".", "model_setting", "==", "'gen_paired_img'", "or", "self", ".", "opt", ".", "model_setting", "==", "'gen_img'", ":", "\n", "            ", "return", "self", ".", "forward_image", "(", "batch", ",", "netD", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "forward_image", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.forward_image": [[291, 420], ["z_buffermodel.ZbufferModelPts.pts_transformer.forward_justpts", "z_buffermodel.ZbufferModelPts.process_batch", "z_buffermodel.ZbufferModelPts.process_batch", "z_buffermodel.ZbufferModelPts.get_rt_from_rot", "z_buffermodel.ZbufferModelPts.encoder", "z_buffermodel.ZbufferModelPts.modifier", "z_buffermodel.ZbufferModelPts.get_masks_for_batch", "z_buffermodel.ZbufferModelPts.projector", "z_buffermodel.ZbufferModelPts.loss_function", "z_buffermodel.ZbufferModelPts.pts_regressor", "z_buffermodel.ZbufferModelPts.get_best_sample", "z_buffermodel.ZbufferModelPts.downsample", "z_buffermodel.ZbufferModelPts.get_combined", "z_buffermodel.ZbufferModelPts.projector", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "z_buffermodel.ZbufferModelPts.loss_function", "z_buffermodel.ZbufferModelPts.loss_function", "z_buffermodel.ZbufferModelPts.downsample", "z_buffermodel.ZbufferModelPts.vqvae.encode", "z_buffermodel.ZbufferModelPts.vqvae.decode_code", "z_buffermodel.ZbufferModelPts.upsample", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "z_buffermodel.ZbufferModelPts.vqvae.encode", "torch.one_hot().permute().to", "torch.one_hot().permute().to", "torch.one_hot().permute().to", "z_buffermodel.ZbufferModelPts.outpaint2", "z_buffermodel.ZbufferModelPts.ar_loss", "z_buffermodel.ZbufferModelPts.outpaint2", "discretized_mix_logistic_loss", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "z_buffermodel.ZbufferModelPts.pts_regressor", "numpy.log", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.one_hot().permute", "torch.one_hot().permute", "torch.one_hot().permute", "numpy.prod", "torch.one_hot", "torch.one_hot", "torch.one_hot", "vqvae_encoded.detach"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.z_buffer_manipulator.PtsManipulator.forward_justpts", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.process_batch", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.process_batch", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.get_rt_from_rot", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.get_masks_for_batch", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.get_best_sample", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.MultiscaleDiscriminator.downsample", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.get_combined", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.MultiscaleDiscriminator.downsample", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.encode", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.decode_code", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.encode", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.discretized_mix_logistic_loss"], ["", "", "def", "forward_image", "(", "self", ",", "batch", ",", "netD", "=", "None", ")", ":", "\n", "        ", "\"\"\" single image forward pass\n        \"\"\"", "\n", "if", "self", ".", "opt", ".", "model_setting", "==", "'train'", "or", "self", ".", "opt", ".", "model_setting", "==", "'gen_paired_img'", ":", "\n", "            ", "K", ",", "K_inv", ",", "input_RT", ",", "input_RTinv", ",", "output_RT", ",", "output_RTinv", ",", "input_img", ",", "output_img", "=", "self", ".", "process_batch", "(", "batch", ")", "\n", "", "else", ":", "\n", "            ", "K", ",", "K_inv", ",", "input_RT", ",", "input_RTinv", ",", "input_img", "=", "self", ".", "process_batch", "(", "batch", ")", "\n", "# get output_RT and output_RTinv", "\n", "output_RTinv", ",", "output_RT", "=", "self", ".", "get_rt_from_rot", "(", "self", ".", "opt", ".", "direction", ",", "input_RT", ")", "\n", "\n", "# Regressed points", "\n", "", "if", "not", "(", "self", ".", "opt", ".", "use_gt_depth", ")", ":", "\n", "            ", "if", "not", "(", "'use_inverse_depth'", "in", "self", ".", "opt", ")", "or", "not", "(", "self", ".", "opt", ".", "use_inverse_depth", ")", ":", "\n", "                ", "regressed_pts", "=", "(", "\n", "nn", ".", "Sigmoid", "(", ")", "(", "self", ".", "pts_regressor", "(", "input_img", ")", ")", "\n", "*", "(", "self", ".", "opt", ".", "max_z", "-", "self", ".", "opt", ".", "min_z", ")", "\n", "+", "self", ".", "opt", ".", "min_z", "\n", ")", "\n", "\n", "", "else", ":", "\n", "# Use the inverse for datasets with landscapes, where there", "\n", "# is a long tail on the depth distribution", "\n", "                ", "depth", "=", "self", ".", "pts_regressor", "(", "input_img", ")", "\n", "regressed_pts", "=", "1.", "/", "(", "nn", ".", "Sigmoid", "(", ")", "(", "depth", ")", "*", "10", "+", "0.01", ")", "\n", "", "", "else", ":", "\n", "            ", "regressed_pts", "=", "depth_img", "\n", "\n", "", "if", "self", ".", "opt", ".", "use_rgb_features", ":", "\n", "            ", "fs", "=", "input_img", "\n", "", "else", ":", "\n", "            ", "fs", "=", "self", ".", "encoder", "(", "input_img", ")", "\n", "\n", "", "gen_fs", ",", "background_mask", "=", "self", ".", "pts_transformer", ".", "forward_justpts", "(", "\n", "fs", ",", "\n", "regressed_pts", ",", "\n", "K", ",", "\n", "K_inv", ",", "\n", "input_RT", ",", "\n", "input_RTinv", ",", "\n", "output_RT", ",", "\n", "output_RTinv", ",", "\n", ")", "\n", "\n", "if", "\"modifier\"", "in", "self", ".", "opt", ".", "depth_predictor_type", ":", "\n", "            ", "gen_fs", "=", "self", ".", "modifier", "(", "gen_fs", ")", "\n", "\n", "", "inner", "=", "None", "\n", "autoreg_loss", "=", "None", "\n", "if", "not", "\"no_outpainting\"", "in", "self", ".", "opt", "or", "not", "self", ".", "opt", ".", "no_outpainting", ":", "\n", "            ", "masks_init", ",", "masks_undilated", ",", "masks_dilated", ",", "gen_order", "=", "self", ".", "get_masks_for_batch", "(", "output_RT", ",", "input_RTinv", ",", "background_mask", ")", "\n", "masks", "=", "[", "masks_init", ",", "masks_undilated", ",", "masks_dilated", "]", "\n", "\n", "if", "self", ".", "opt", ".", "model_setting", "==", "'gen_img'", "or", "self", ".", "opt", ".", "model_setting", "==", "'gen_paired_img'", ":", "\n", "                ", "if", "'vqvae'", "in", "self", ".", "opt", "and", "self", ".", "opt", ".", "vqvae", ":", "\n", "                    ", "downsampled_fs", "=", "self", ".", "vqvae", ".", "encode", "(", "gen_fs", ")", "[", "3", "]", "\n", "", "else", ":", "\n", "                    ", "downsampled_fs", "=", "self", ".", "downsample", "(", "gen_fs", ")", "\n", "\n", "", "gen_img", "=", "self", ".", "get_best_sample", "(", "gen_order", ",", "masks", ",", "downsampled_fs", ",", "background_mask", ",", "gen_fs", ",", "netD", ",", "input_img", ")", "\n", "", "else", ":", "\n", "# training: AR loss on downsampled GT input & output", "\n", "# decoder input is upsampled, downsampled GT & gen_fs", "\n", "                ", "downsampled_gt", "=", "self", ".", "downsample", "(", "output_img", ")", "\n", "if", "'vqvae'", "in", "self", ".", "opt", "and", "self", ".", "opt", ".", "vqvae", ":", "\n", "                    ", "_", ",", "_", ",", "latent_loss", ",", "vqvae_encoded", ",", "_", "=", "self", ".", "vqvae", ".", "encode", "(", "output_img", ")", "\n", "if", "\"pretrain\"", "not", "in", "self", ".", "opt", "or", "not", "self", ".", "opt", ".", "pretrain", ":", "\n", "                        ", "downsampled_gt", "=", "(", "\n", "F", ".", "one_hot", "(", "vqvae_encoded", ".", "detach", "(", ")", ",", "self", ".", "num_classes", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", ")", "\n", "ar_input", "=", "[", "downsampled_gt", ",", "masks_init", ",", "masks_undilated", ",", "masks_dilated", "]", "\n", "autoreg_output", "=", "self", ".", "outpaint2", "(", "ar_input", ")", "\n", "autoreg_loss", "=", "self", ".", "ar_loss", "(", "autoreg_output", ",", "vqvae_encoded", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "if", "\"pretrain\"", "not", "in", "self", ".", "opt", "or", "not", "self", ".", "opt", ".", "pretrain", ":", "\n", "                        ", "ar_input", "=", "[", "downsampled_gt", ",", "masks_init", ",", "masks_undilated", ",", "masks_dilated", "]", "\n", "autoreg_output", "=", "self", ".", "outpaint2", "(", "ar_input", ")", "\n", "autoreg_loss", "=", "discretized_mix_logistic_loss", "(", "downsampled_gt", ",", "autoreg_output", ",", "n_bits", "=", "8", ")", "\n", "# lambda doesn't matter -- not balancing these gradients with anything else.", "\n", "", "", "if", "'vqvae'", "in", "self", ".", "opt", "and", "self", ".", "opt", ".", "vqvae", ":", "\n", "# note vqvae is frozen ", "\n", "                    ", "input_gt", "=", "self", ".", "vqvae", ".", "decode_code", "(", "vqvae_encoded", ")", "\n", "", "else", ":", "\n", "                    ", "input_gt", "=", "self", ".", "upsample", "(", "downsampled_gt", ")", "\n", "\n", "# input to decoder is combination of ", "\n", "# generated features (when in foreground)", "\n", "# and ground truth (when in background) as stand-in for autoreg. preds", "\n", "", "combined", "=", "self", ".", "get_combined", "(", "gen_fs", ",", "input_gt", ",", "background_mask", ")", "\n", "gen_img", "=", "self", ".", "projector", "(", "combined", ",", "background_mask", ")", "\n", "gen_fs", "=", "torch", ".", "cat", "(", "(", "gen_fs", ",", "input_gt", ")", ",", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "gen_img", "=", "self", ".", "projector", "(", "gen_fs", ",", "inner", ")", "\n", "\n", "", "outputs", "=", "{", "\n", "\"InputImg\"", ":", "input_img", ",", "\n", "\"PredImg\"", ":", "gen_img", ",", "\n", "\"PredDepthImg\"", ":", "regressed_pts", "/", "5", "-", "1", ",", "\n", "'ForegroundImg'", ":", "(", "~", "background_mask", ")", ".", "repeat", "(", "input_img", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", ".", "float", "(", ")", "\n", "}", "\n", "\n", "if", "self", ".", "opt", ".", "model_setting", "==", "'train'", ":", "\n", "# And the loss", "\n", "            ", "loss", "=", "self", ".", "loss_function", "(", "gen_img", ",", "output_img", ")", "\n", "\n", "if", "(", "not", "\"no_outpainting\"", "in", "self", ".", "opt", "or", "not", "self", ".", "opt", ".", "no_outpainting", ")", "and", "(", "\"pretrain\"", "not", "in", "self", ".", "opt", "or", "not", "self", ".", "opt", ".", "pretrain", ")", ":", "\n", "                ", "loss", "[", "\"autoreg_loss\"", "]", "=", "autoreg_loss", "/", "(", "autoreg_output", ".", "shape", "[", "0", "]", "*", "np", ".", "prod", "(", "self", ".", "obs", ")", "*", "np", ".", "log", "(", "2.", ")", ")", "*", "1000", "\n", "if", "'lambda_autoreg'", "in", "self", ".", "opt", "and", "self", ".", "opt", ".", "lambda_autoreg", "is", "not", "None", ":", "\n", "                    ", "loss", "[", "\"Total Loss\"", "]", "+=", "autoreg_loss", "*", "self", ".", "opt", ".", "lambda_autoreg", "\n", "", "else", ":", "\n", "                    ", "loss", "[", "\"Total Loss\"", "]", "+=", "autoreg_loss", "\n", "\n", "", "", "if", "self", ".", "opt", ".", "train_depth", ":", "\n", "                ", "depth_loss", "=", "nn", ".", "L1Loss", "(", ")", "(", "regressed_pts", ",", "depth_img", ")", "\n", "loss", "[", "\"Total Loss\"", "]", "+=", "depth_loss", "\n", "loss", "[", "\"depth_loss\"", "]", "=", "depth_loss", "\n", "\n", "", "outputs", "[", "\"OutputImg\"", "]", "=", "output_img", "\n", "", "elif", "self", ".", "opt", ".", "model_setting", "==", "'gen_paired_img'", ":", "\n", "            ", "outputs", "[", "\"OutputImg\"", "]", "=", "output_img", "\n", "loss", "=", "self", ".", "loss_function", "(", "gen_img", ",", "gen_img", ")", "# loss is not used", "\n", "", "else", ":", "\n", "            ", "loss", "=", "self", ".", "loss_function", "(", "gen_img", ",", "gen_img", ")", "# loss is not used", "\n", "\n", "", "if", "self", ".", "opt", ".", "model_setting", "!=", "'train'", ":", "\n", "            ", "outputs", "[", "\"FeaturesImg\"", "]", "=", "gen_fs", "\n", "\n", "", "return", "(", "loss", ",", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.forward_scene": [[421, 593], ["z_buffermodel.ZbufferModelPts.loss_function", "z_buffermodel.ZbufferModelPts.process_batch", "z_buffermodel.ZbufferModelPts.process_batch", "print", "z_buffermodel.ZbufferModelPts.get_rt_from_rot", "z_buffermodel.ZbufferModelPts.pts_transformer.forward_justpts_cumulative", "reversed", "range", "z_buffermodel.ZbufferModelPts.get_rt_from_rot", "z_buffermodel.ZbufferModelPts.pts_transformer.forward_justpts_cumulative", "z_buffermodel.ZbufferModelPts.get_rt_from_rot", "z_buffermodel.ZbufferModelPts.encoder", "z_buffermodel.ZbufferModelPts.get_masks_for_batch", "z_buffermodel.ZbufferModelPts.get_best_sample", "z_buffermodel.ZbufferModelPts.projector", "range", "z_buffermodel.ZbufferModelPts.get_rt_from_rot", "z_buffermodel.ZbufferModelPts.encoder", "z_buffermodel.ZbufferModelPts.get_masks_for_batch", "z_buffermodel.ZbufferModelPts.get_best_sample", "z_buffermodel.ZbufferModelPts.projector", "int", "max", "z_buffermodel.ZbufferModelPts.vqvae.encode", "z_buffermodel.ZbufferModelPts.get_rt_from_rot", "z_buffermodel.ZbufferModelPts.vqvae.encode", "direction.cpu", "int", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "z_buffermodel.ZbufferModelPts.pts_regressor", "str", "str", "str", "str", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "z_buffermodel.ZbufferModelPts.pts_regressor", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.process_batch", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.process_batch", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.get_rt_from_rot", "home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.z_buffer_manipulator.PtsManipulator.forward_justpts_cumulative", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.get_rt_from_rot", "home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.z_buffer_manipulator.PtsManipulator.forward_justpts_cumulative", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.get_rt_from_rot", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.get_masks_for_batch", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.get_best_sample", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.get_rt_from_rot", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.get_masks_for_batch", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.get_best_sample", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.encode", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.get_rt_from_rot", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.encode"], ["", "def", "forward_scene", "(", "self", ",", "batch", ",", "netD", "=", "None", ")", ":", "\n", "        ", "\"\"\" Forward pass to generate a scene (inference)\n        \"\"\"", "\n", "\n", "if", "self", ".", "opt", ".", "model_setting", "==", "'gen_two_imgs'", ":", "\n", "            ", "K", ",", "K_inv", ",", "input_RT", ",", "input_RTinv", ",", "input_img", ",", "direction", "=", "self", ".", "process_batch", "(", "batch", ")", "\n", "directions", "=", "[", "self", ".", "mapping", "[", "int", "(", "direction", ".", "cpu", "(", ")", ")", "]", "]", "\n", "", "else", ":", "\n", "            ", "K", ",", "K_inv", ",", "input_RT", ",", "input_RTinv", ",", "input_img", "=", "self", ".", "process_batch", "(", "batch", ")", "\n", "directions", "=", "self", ".", "opt", ".", "directions", "\n", "\n", "", "outputs", "=", "{", "\n", "\"InputImg\"", ":", "input_img", ",", "\n", "}", "\n", "\n", "\n", "current_img", "=", "input_img", "\n", "\n", "last_background_mask", "=", "None", "\n", "prior_point_cloud", "=", "None", "\n", "fs_old", "=", "None", "\n", "last_output_RTinv", "=", "None", "\n", "last_numerator", "=", "None", "\n", "last_direction", "=", "None", "\n", "\n", "# first, we perform large completion", "\n", "# then, we smooth in everything between.", "\n", "# repeat for all four directions.", "\n", "# unless we are evaluating consistency, ", "\n", "# in which case we only look one direction", "\n", "for", "direction", "in", "directions", ":", "\n", "            ", "num_split", "=", "self", ".", "opt", ".", "num_split", "\n", "if", "self", ".", "opt", ".", "model_setting", "==", "'gen_two_imgs'", ":", "\n", "                ", "num_split", "=", "2", "\n", "", "elif", "direction", "in", "[", "'S'", ",", "'C'", "]", ":", "\n", "                ", "num_split", "=", "self", ".", "opt", ".", "num_split", "*", "2", "\n", "", "elif", "direction", "in", "[", "'U'", ",", "'D'", ",", "'UL'", ",", "'UR'", ",", "'DR'", ",", "'DL'", "]", ":", "\n", "                ", "num_split", "=", "max", "(", "int", "(", "self", ".", "opt", ".", "num_split", "/", "2", ")", ",", "1", ")", "\n", "\n", "", "print", "(", "'Looking'", ",", "direction", "+", "'.'", ",", "num_split", ",", "'splits \\n'", ")", "\n", "\n", "# first do 0 case. if sampling, must do many times and pick best", "\n", "num_sample", "=", "1", "\n", "if", "not", "\"no_outpainting\"", "in", "self", ".", "opt", "or", "not", "self", ".", "opt", ".", "no_outpainting", ":", "\n", "                ", "num_sample", "=", "self", ".", "opt", ".", "num_samples", "\n", "#if direction in ['U','D', 'UL', 'UR', 'DR', 'DL']:", "\n", "#    num_sample = max(int(num_sample / 2),1)", "\n", "best_loss", "=", "0", "\n", "best_img", "=", "None", "\n", "\n", "", "if", "not", "self", ".", "opt", ".", "sequential_outpainting", ":", "\n", "                ", "if", "last_numerator", "is", "not", "None", ":", "\n", "                    ", "current_input_RTinv", ",", "current_input_RT", "=", "self", ".", "get_rt_from_rot", "(", "last_direction", ",", "input_RT", ",", "last_numerator", ",", "num_split", ")", "\n", "", "else", ":", "\n", "                    ", "current_input_RTinv", ",", "current_input_RT", "=", "input_RTinv", ",", "input_RT", "\n", "\n", "", "numerator", "=", "num_split", "\n", "current_output_RTinv", ",", "current_output_RT", "=", "self", ".", "get_rt_from_rot", "(", "direction", ",", "input_RT", ",", "numerator", ",", "num_split", ")", "\n", "\n", "regressed_pts", "=", "(", "\n", "nn", ".", "Sigmoid", "(", ")", "(", "self", ".", "pts_regressor", "(", "current_img", ")", ")", "\n", "*", "(", "self", ".", "opt", ".", "max_z", "-", "self", ".", "opt", ".", "min_z", ")", "\n", "+", "self", ".", "opt", ".", "min_z", "\n", ")", "\n", "\n", "if", "self", ".", "opt", ".", "use_rgb_features", ":", "\n", "                    ", "fs", "=", "current_img", "\n", "", "else", ":", "\n", "                    ", "fs", "=", "self", ".", "encoder", "(", "current_img", ")", "\n", "\n", "", "gen_fs", ",", "background_mask", ",", "new_point_cloud", ",", "new_fs", "=", "self", ".", "pts_transformer", ".", "forward_justpts_cumulative", "(", "\n", "fs", ",", "\n", "regressed_pts", ",", "\n", "K", ",", "\n", "K_inv", ",", "\n", "current_input_RT", ",", "\n", "current_input_RTinv", ",", "\n", "current_output_RT", ",", "\n", "current_output_RTinv", ",", "\n", "prior_point_cloud", ",", "\n", "fs_old", ",", "\n", "last_background_mask", ",", "\n", "last_output_RTinv", "\n", ")", "\n", "\n", "if", "not", "\"no_outpainting\"", "in", "self", ".", "opt", "or", "not", "self", ".", "opt", ".", "no_outpainting", ":", "\n", "                    ", "masks_init", ",", "masks_undilated", ",", "masks_dilated", ",", "gen_order", "=", "self", ".", "get_masks_for_batch", "(", "current_output_RT", ",", "current_input_RTinv", ",", "background_mask", ")", "\n", "masks", "=", "[", "masks_init", ",", "masks_undilated", ",", "masks_dilated", "]", "\n", "downsampled_fs", "=", "self", ".", "vqvae", ".", "encode", "(", "gen_fs", ")", "[", "3", "]", "\n", "\n", "best_img", "=", "self", ".", "get_best_sample", "(", "gen_order", ",", "masks", ",", "downsampled_fs", ",", "background_mask", ",", "gen_fs", ",", "netD", ",", "input_img", ")", "\n", "", "else", ":", "\n", "                    ", "best_img", "=", "self", ".", "projector", "(", "gen_fs", ")", "\n", "\n", "", "gen_img", "=", "best_img", "\n", "current_img", "=", "gen_img", "\n", "prior_point_cloud", "=", "new_point_cloud", "\n", "fs_old", "=", "new_fs", "\n", "last_background_mask", "=", "background_mask", "\n", "last_output_RTinv", "=", "current_output_RTinv", "\n", "last_numerator", "=", "numerator", "\n", "last_direction", "=", "direction", "\n", "\n", "outputs", "[", "'PredImg_'", "+", "direction", "+", "'_'", "+", "str", "(", "num_split", ")", "]", "=", "gen_img", "\n", "outputs", "[", "\"FeaturesImg_\"", "+", "direction", "+", "'_'", "+", "str", "(", "num_split", ")", "]", "=", "gen_fs", "\n", "outputs", "[", "\"PredDepthImg_\"", "+", "direction", "+", "'_'", "+", "str", "(", "num_split", ")", "]", "=", "regressed_pts", "\n", "outputs", "[", "'ForegroundImg_'", "+", "direction", "+", "'_'", "+", "str", "(", "num_split", ")", "]", "=", "(", "~", "background_mask", ")", ".", "repeat", "(", "input_img", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", ".", "float", "(", ")", "\n", "\n", "remaining_views", "=", "reversed", "(", "range", "(", "num_split", ")", ")", "\n", "", "else", ":", "\n", "                ", "remaining_views", "=", "range", "(", "num_split", "+", "1", ")", "\n", "\n", "", "for", "i", "in", "remaining_views", ":", "\n", "# we render an image at \"0\" to visualize input view in videos", "\n", "                ", "if", "self", ".", "opt", ".", "sequential_outpainting", "and", "i", "==", "0", ":", "\n", "# corner case for sequential", "\n", "                    ", "if", "last_numerator", "is", "not", "None", ":", "\n", "                        ", "current_input_RTinv", ",", "current_input_RT", "=", "self", ".", "get_rt_from_rot", "(", "last_direction", ",", "input_RT", ",", "last_numerator", ",", "num_split", ")", "\n", "", "else", ":", "\n", "                        ", "current_input_RTinv", ",", "current_input_RT", "=", "input_RTinv", ",", "input_RT", "\n", "", "", "else", ":", "\n", "                    ", "current_input_RTinv", ",", "current_input_RT", "=", "self", ".", "get_rt_from_rot", "(", "direction", ",", "input_RT", ",", "last_numerator", ",", "num_split", ")", "\n", "", "numerator", "=", "i", "\n", "current_output_RTinv", ",", "current_output_RT", "=", "self", ".", "get_rt_from_rot", "(", "direction", ",", "input_RT", ",", "numerator", ",", "num_split", ")", "\n", "if", "self", ".", "opt", ".", "use_rgb_features", ":", "\n", "                    ", "fs", "=", "current_img", "\n", "", "else", ":", "\n", "                    ", "fs", "=", "self", ".", "encoder", "(", "current_img", ")", "\n", "", "regressed_pts", "=", "(", "\n", "nn", ".", "Sigmoid", "(", ")", "(", "self", ".", "pts_regressor", "(", "current_img", ")", ")", "\n", "*", "(", "self", ".", "opt", ".", "max_z", "-", "self", ".", "opt", ".", "min_z", ")", "\n", "+", "self", ".", "opt", ".", "min_z", "\n", ")", "\n", "\n", "gen_fs", ",", "background_mask", ",", "new_point_cloud", ",", "new_fs", "=", "self", ".", "pts_transformer", ".", "forward_justpts_cumulative", "(", "\n", "fs", ",", "\n", "regressed_pts", ",", "\n", "K", ",", "\n", "K_inv", ",", "\n", "current_input_RT", ",", "\n", "current_input_RTinv", ",", "\n", "current_output_RT", ",", "\n", "current_output_RTinv", ",", "\n", "prior_point_cloud", ",", "\n", "fs_old", ",", "\n", "last_background_mask", ",", "\n", "last_output_RTinv", "\n", ")", "\n", "\n", "if", "not", "\"no_outpainting\"", "in", "self", ".", "opt", "or", "not", "self", ".", "opt", ".", "no_outpainting", ":", "\n", "                    ", "masks_init", ",", "masks_undilated", ",", "masks_dilated", ",", "gen_order", "=", "self", ".", "get_masks_for_batch", "(", "current_output_RT", ",", "current_input_RTinv", ",", "background_mask", ")", "\n", "masks", "=", "[", "masks_init", ",", "masks_undilated", ",", "masks_dilated", "]", "\n", "downsampled_fs", "=", "self", ".", "vqvae", ".", "encode", "(", "gen_fs", ")", "[", "3", "]", "\n", "gen_img", "=", "self", ".", "get_best_sample", "(", "gen_order", ",", "masks", ",", "downsampled_fs", ",", "background_mask", ",", "gen_fs", ",", "netD", ",", "input_img", ")", "\n", "", "else", ":", "\n", "                    ", "gen_img", "=", "self", ".", "projector", "(", "gen_fs", ")", "\n", "", "outputs", "[", "'PredImg_'", "+", "direction", "+", "'_'", "+", "str", "(", "i", ")", "]", "=", "gen_img", "\n", "outputs", "[", "\"FeaturesImg_\"", "+", "direction", "+", "'_'", "+", "str", "(", "i", ")", "]", "=", "gen_fs", "\n", "if", "self", ".", "opt", ".", "sequential_outpainting", "and", "i", "==", "num_split", ":", "\n", "                    ", "outputs", "[", "\"FeaturesImg_\"", "+", "direction", "+", "'_'", "+", "str", "(", "num_split", ")", "]", "=", "gen_fs", "\n", "outputs", "[", "\"PredDepthImg_\"", "+", "direction", "+", "'_'", "+", "str", "(", "num_split", ")", "]", "=", "regressed_pts", "\n", "outputs", "[", "'ForegroundImg_'", "+", "direction", "+", "'_'", "+", "str", "(", "num_split", ")", "]", "=", "(", "~", "background_mask", ")", ".", "repeat", "(", "input_img", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", ".", "float", "(", ")", "\n", "last_direction", "=", "direction", "\n", "", "current_img", "=", "gen_img", "\n", "prior_point_cloud", "=", "new_point_cloud", "\n", "fs_old", "=", "new_fs", "\n", "last_background_mask", "=", "background_mask", "\n", "last_output_RTinv", "=", "current_output_RTinv", "\n", "last_numerator", "=", "numerator", "\n", "\n", "", "", "loss", "=", "self", ".", "loss_function", "(", "gen_img", ",", "gen_img", ")", "# loss not used", "\n", "return", "(", "loss", ",", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.forward_gen_order": [[594, 640], ["z_buffermodel.ZbufferModelPts.process_batch", "z_buffermodel.ZbufferModelPts.pts_transformer.forward_justpts", "z_buffermodel.ZbufferModelPts.get_masks_for_batch", "z_buffermodel.ZbufferModelPts.loss_function", "z_buffermodel.ZbufferModelPts.encoder", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "z_buffermodel.ZbufferModelPts.pts_regressor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "z_buffermodel.ZbufferModelPts.pts_regressor", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.process_batch", "home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.z_buffer_manipulator.PtsManipulator.forward_justpts", "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.get_masks_for_batch"], ["", "def", "forward_gen_order", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\" single image forward pass\n        \"\"\"", "\n", "K", ",", "K_inv", ",", "input_RT", ",", "input_RTinv", ",", "output_RT", ",", "output_RTinv", ",", "input_img", "=", "self", ".", "process_batch", "(", "batch", ")", "\n", "\n", "# Regressed points", "\n", "if", "not", "(", "self", ".", "opt", ".", "use_gt_depth", ")", ":", "\n", "            ", "if", "not", "(", "'use_inverse_depth'", "in", "self", ".", "opt", ")", "or", "not", "(", "self", ".", "opt", ".", "use_inverse_depth", ")", ":", "\n", "                ", "regressed_pts", "=", "(", "\n", "nn", ".", "Sigmoid", "(", ")", "(", "self", ".", "pts_regressor", "(", "input_img", ")", ")", "\n", "*", "(", "self", ".", "opt", ".", "max_z", "-", "self", ".", "opt", ".", "min_z", ")", "\n", "+", "self", ".", "opt", ".", "min_z", "\n", ")", "\n", "\n", "", "else", ":", "\n", "# Use the inverse for datasets with landscapes, where there", "\n", "# is a long tail on the depth distribution", "\n", "                ", "depth", "=", "self", ".", "pts_regressor", "(", "input_img", ")", "\n", "regressed_pts", "=", "1.", "/", "(", "nn", ".", "Sigmoid", "(", ")", "(", "depth", ")", "*", "10", "+", "0.01", ")", "\n", "", "", "else", ":", "\n", "            ", "regressed_pts", "=", "depth_img", "\n", "\n", "", "if", "self", ".", "opt", ".", "use_rgb_features", ":", "\n", "            ", "fs", "=", "input_img", "\n", "", "else", ":", "\n", "            ", "fs", "=", "self", ".", "encoder", "(", "input_img", ")", "\n", "\n", "", "gen_fs", ",", "background_mask", "=", "self", ".", "pts_transformer", ".", "forward_justpts", "(", "\n", "fs", ",", "\n", "regressed_pts", ",", "\n", "K", ",", "\n", "K_inv", ",", "\n", "input_RT", ",", "\n", "input_RTinv", ",", "\n", "output_RT", ",", "\n", "output_RTinv", ",", "\n", ")", "\n", "\n", "masks_init", ",", "masks_undilated", ",", "masks_dilated", ",", "gen_order", "=", "self", ".", "get_masks_for_batch", "(", "output_RT", ",", "input_RTinv", ",", "background_mask", ")", "\n", "\n", "outputs", "=", "{", "\n", "'gen_order'", ":", "torch", ".", "tensor", "(", "gen_order", ")", ".", "cuda", "(", ")", "\n", "}", "\n", "\n", "loss", "=", "self", ".", "loss_function", "(", "input_img", ",", "input_img", ")", "# loss not used", "\n", "return", "(", "loss", ",", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.get_masks_for_batch": [[641, 702], ["z_buffermodel.ZbufferModelPts.downsample", "z_buffermodel.ZbufferModelPts.downsample", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.mean().cpu().detach", "torch.mean().cpu().detach", "torch.mean().cpu().detach", "torch.mean().cpu().detach", "torch.mean().cpu().detach", "torch.mean().cpu().detach", "torch.mean().cpu().detach", "torch.mean().cpu().detach", "torch.mean().cpu().detach", "torch.mean().cpu().detach", "torch.mean().cpu().detach", "torch.mean().cpu().detach", "torch.mean().cpu().detach", "torch.mean().cpu().detach", "torch.mean().cpu().detach", "torch.mean().cpu().detach", "torch.mean().cpu().detach", "torch.mean().cpu().detach", "torch.stack().numpy().astype", "torch.stack().numpy().astype", "torch.stack().numpy().astype", "torch.stack().numpy().astype", "torch.stack().numpy().astype", "torch.stack().numpy().astype", "torch.stack().numpy().astype", "torch.stack().numpy().astype", "torch.stack().numpy().astype", "z_buffermodel.ZbufferModelPts.view().cpu().detach().numpy().astype", "z_buffermodel.ZbufferModelPts.view().cpu().detach().numpy().astype", "numpy.zeros", "numpy.zeros", "range", "range", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "torch.stack().repeat().view().cuda", "z_buffermodel.ZbufferModelPts.float", "z_buffermodel.ZbufferModelPts.float", "x.cuda.cuda.cuda", "y.cuda.cuda.cuda", "cv2.distanceTransform", "cv2.distanceTransform", "gen_order.append", "models.lmconv.masking.get_masks", "torch.stack().repeat().view().cuda.append", "torch.stack().repeat().view().cuda.append", "torch.stack().repeat().view().cuda.append", "torch.stack().repeat().view().cuda.append", "torch.stack().repeat().view().cuda.append", "torch.stack().repeat().view().cuda.append", "torch.stack().repeat().view().cuda.append", "torch.stack().repeat().view().cuda.append", "torch.stack().repeat().view().cuda.append", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.stack().numpy", "torch.stack().numpy", "torch.stack().numpy", "torch.stack().numpy", "torch.stack().numpy", "torch.stack().numpy", "torch.stack().numpy", "torch.stack().numpy", "torch.stack().numpy", "z_buffermodel.ZbufferModelPts.view().cpu().detach().numpy", "z_buffermodel.ZbufferModelPts.view().cpu().detach().numpy", "models.lmconv.masking.get_generation_order_idx", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.stack().repeat().view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "z_buffermodel.ZbufferModelPts.view().cpu().detach", "z_buffermodel.ZbufferModelPts.view().cpu().detach", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "torch.stack().repeat", "mass_x.view", "mass_y.view", "z_buffermodel.ZbufferModelPts.view().cpu", "z_buffermodel.ZbufferModelPts.view().cpu", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "z_buffermodel.ZbufferModelPts.view", "z_buffermodel.ZbufferModelPts.view"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.MultiscaleDiscriminator.downsample", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.MultiscaleDiscriminator.downsample", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.get_masks", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.get_generation_order_idx"], ["", "def", "get_masks_for_batch", "(", "self", ",", "output_RT", ",", "input_RTinv", ",", "background_mask", ")", ":", "\n", "# 1 if in foreground, 0 if no points nearby", "\n", "        ", "foreground_mask", "=", "~", "background_mask", "\n", "\n", "# downsample mask to be autoregressive size, convert bool to float", "\n", "background_mask", "=", "self", ".", "downsample", "(", "background_mask", ".", "float", "(", ")", ")", "\n", "foreground_mask", "=", "self", ".", "downsample", "(", "foreground_mask", ".", "float", "(", ")", ")", "\n", "\n", "b", ",", "h", ",", "w", "=", "background_mask", ".", "shape", "\n", "\n", "# multiply by index to get center of mass", "\n", "y", "=", "torch", ".", "arange", "(", "h", ")", ".", "view", "(", "1", ",", "h", ",", "1", ")", "\n", "x", "=", "torch", ".", "arange", "(", "w", ")", ".", "view", "(", "1", ",", "1", ",", "w", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "y", "=", "y", ".", "cuda", "(", ")", "\n", "\n", "", "mass_x", "=", "foreground_mask", "*", "x", "\n", "mass_y", "=", "foreground_mask", "*", "y", "\n", "\n", "mass_center_x", "=", "torch", ".", "mean", "(", "mass_x", ".", "view", "(", "b", ",", "-", "1", ")", ",", "axis", "=", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "mass_center_y", "=", "torch", ".", "mean", "(", "mass_y", ".", "view", "(", "b", ",", "-", "1", ")", ",", "axis", "=", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "mass_center", "=", "torch", ".", "stack", "(", "(", "mass_center_x", ",", "mass_center_y", ")", ",", "axis", "=", "1", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "\n", "# get distance of each pixel to nearest background pixel", "\n", "# and distance of background pixels to nearest non-background pixel", "\n", "bin_fg_mask", "=", "foreground_mask", ".", "view", "(", "b", ",", "h", ",", "w", ",", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "bin_bg_mask", "=", "background_mask", ".", "view", "(", "b", ",", "h", ",", "w", ",", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "foreground_distances", "=", "np", ".", "zeros", "(", "(", "b", ",", "h", ",", "w", ")", ")", "\n", "background_distances", "=", "np", ".", "zeros", "(", "(", "b", ",", "h", ",", "w", ")", ")", "\n", "for", "image_num", "in", "range", "(", "b", ")", ":", "\n", "            ", "foreground_distances", "[", "image_num", "]", "=", "cv2", ".", "distanceTransform", "(", "bin_fg_mask", "[", "image_num", "]", ",", "distanceType", "=", "cv2", ".", "DIST_L2", ",", "maskSize", "=", "5", ")", "\n", "background_distances", "[", "image_num", "]", "=", "cv2", ".", "distanceTransform", "(", "bin_bg_mask", "[", "image_num", "]", ",", "distanceType", "=", "cv2", ".", "DIST_L2", ",", "maskSize", "=", "5", ")", "\n", "", "distances", "=", "(", "foreground_distances", "-", "background_distances", ")", ".", "astype", "(", "int", ")", "\n", "#example = np.array([[0,1,1,1],[1,1,1,1],[1,1,0,0],[0,0,0,0]]).astype(np.uint8)", "\n", "\n", "# autoregressive algorithm is as follows:", "\n", "# begin from maximum distance to background pixels", "\n", "# and proceed towards background pixels; fill in these", "\n", "# closest to foreground pixels, then furtherst", "\n", "# ties are broken using spiral pattern, ", "\n", "# which starts from center of mass.", "\n", "gen_order", "=", "[", "]", "\n", "masks_init", "=", "[", "]", "\n", "masks_undilated", "=", "[", "]", "\n", "masks_dilated", "=", "[", "]", "\n", "\n", "\n", "for", "image_num", "in", "range", "(", "b", ")", ":", "\n", "            ", "gen_order", ".", "append", "(", "get_generation_order_idx", "(", "'custom'", ",", "self", ".", "obs", "[", "1", "]", ",", "self", ".", "obs", "[", "2", "]", ",", "distances", "[", "image_num", "]", ",", "mass_center", "[", "image_num", "]", ")", ")", "\n", "mask_init", ",", "mask_undilated", ",", "mask_dilated", "=", "get_masks", "(", "gen_order", "[", "-", "1", "]", ",", "self", ".", "obs", "[", "1", "]", ",", "self", ".", "obs", "[", "2", "]", ",", "3", ",", "2", ",", "plot", "=", "False", ")", "#True, out_dir='log/mp3d/end_to_end_3x_upgraded_adjacent')", "\n", "masks_init", ".", "append", "(", "mask_init", "[", "0", ":", "1", "]", ")", "\n", "masks_undilated", ".", "append", "(", "mask_undilated", "[", "0", ":", "1", "]", ")", "\n", "masks_dilated", ".", "append", "(", "mask_dilated", "[", "0", ":", "1", "]", ")", "\n", "\n", "", "masks_init", "=", "torch", ".", "stack", "(", "masks_init", ")", ".", "repeat", "(", "1", ",", "513", ",", "1", ",", "1", ")", ".", "view", "(", "-", "1", ",", "9", ",", "self", ".", "obs", "[", "1", "]", "*", "self", ".", "obs", "[", "2", "]", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "masks_undilated", "=", "torch", ".", "stack", "(", "masks_undilated", ")", ".", "repeat", "(", "1", ",", "160", ",", "1", ",", "1", ")", ".", "view", "(", "-", "1", ",", "9", ",", "self", ".", "obs", "[", "1", "]", "*", "self", ".", "obs", "[", "2", "]", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "masks_dilated", "=", "torch", ".", "stack", "(", "masks_dilated", ")", ".", "repeat", "(", "1", ",", "80", ",", "1", ",", "1", ")", ".", "view", "(", "-", "1", ",", "9", ",", "self", ".", "obs", "[", "1", "]", "*", "self", ".", "obs", "[", "2", "]", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "return", "masks_init", ",", "masks_undilated", ",", "masks_dilated", ",", "gen_order", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.get_combined": [[703, 709], ["background_mask.float.float.float", "foreground_mask.view", "background_mask.float.float.view"], "methods", ["None"], ["", "def", "get_combined", "(", "self", ",", "gen_fs", ",", "ar_sample", ",", "background_mask", ")", ":", "\n", "        ", "b", ",", "h", ",", "w", "=", "background_mask", ".", "shape", "\n", "foreground_mask", "=", "(", "~", "background_mask", ")", ".", "float", "(", ")", "\n", "background_mask", "=", "background_mask", ".", "float", "(", ")", "\n", "combined", "=", "gen_fs", "*", "foreground_mask", ".", "view", "(", "b", ",", "-", "1", ",", "h", ",", "w", ")", "+", "ar_sample", "*", "background_mask", ".", "view", "(", "b", ",", "-", "1", ",", "h", ",", "w", ")", "\n", "return", "combined", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.z_buffermodel.ZbufferModelPts.forward_angle": [[710, 755], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "z_buffermodel.ZbufferModelPts.encoder", "input_img.cuda.cuda.cuda", "K.cuda.cuda.cuda", "K_inv.cuda.cuda.cuda", "torch.eye().unsqueeze().repeat().cuda", "torch.eye().unsqueeze().repeat().cuda", "torch.eye().unsqueeze().repeat().cuda", "torch.eye().unsqueeze().repeat().cuda", "torch.eye().unsqueeze().repeat().cuda", "torch.eye().unsqueeze().repeat().cuda", "torch.eye().unsqueeze().repeat().cuda", "torch.eye().unsqueeze().repeat().cuda", "torch.eye().unsqueeze().repeat().cuda", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "z_buffermodel.ZbufferModelPts.pts_transformer.forward_justpts", "z_buffermodel.ZbufferModelPts.projector", "RT.cuda", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "z_buffermodel.ZbufferModelPts.pts_regressor", "input_img.cuda.cuda.size", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.z_buffer_manipulator.PtsManipulator.forward_justpts"], ["", "def", "forward_angle", "(", "self", ",", "batch", ",", "RTs", ",", "return_depth", "=", "False", ")", ":", "\n", "# Input values", "\n", "        ", "input_img", "=", "batch", "[", "\"images\"", "]", "[", "0", "]", "\n", "\n", "# Camera parameters", "\n", "K", "=", "batch", "[", "\"cameras\"", "]", "[", "0", "]", "[", "\"K\"", "]", "\n", "K_inv", "=", "batch", "[", "\"cameras\"", "]", "[", "0", "]", "[", "\"Kinv\"", "]", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "input_img", "=", "input_img", ".", "cuda", "(", ")", "\n", "\n", "K", "=", "K", ".", "cuda", "(", ")", "\n", "K_inv", "=", "K_inv", ".", "cuda", "(", ")", "\n", "\n", "RTs", "=", "[", "RT", ".", "cuda", "(", ")", "for", "RT", "in", "RTs", "]", "\n", "identity", "=", "(", "\n", "torch", ".", "eye", "(", "4", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "input_img", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", ")", "\n", "\n", "", "fs", "=", "self", ".", "encoder", "(", "input_img", ")", "\n", "regressed_pts", "=", "(", "\n", "nn", ".", "Sigmoid", "(", ")", "(", "self", ".", "pts_regressor", "(", "input_img", ")", ")", "\n", "*", "(", "self", ".", "opt", ".", "max_z", "-", "self", ".", "opt", ".", "min_z", ")", "\n", "+", "self", ".", "opt", ".", "min_z", "\n", ")", "\n", "\n", "# Now rotate", "\n", "gen_imgs", "=", "[", "]", "\n", "for", "RT", "in", "RTs", ":", "\n", "            ", "torch", ".", "manual_seed", "(", "\n", "0", "\n", ")", "# Reset seed each time so that noise vectors are the same", "\n", "gen_fs", "=", "self", ".", "pts_transformer", ".", "forward_justpts", "(", "\n", "fs", ",", "regressed_pts", ",", "K", ",", "K_inv", ",", "identity", ",", "identity", ",", "RT", ",", "None", "\n", ")", "\n", "\n", "# now create a new image", "\n", "gen_img", "=", "self", ".", "projector", "(", "gen_fs", ")", "\n", "\n", "gen_imgs", "+=", "[", "gen_img", "]", "\n", "\n", "", "if", "return_depth", ":", "\n", "            ", "return", "gen_imgs", ",", "regressed_pts", "\n", "\n", "", "return", "gen_imgs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.encoderdecoder.CollapseLayer.forward": [[11, 13], ["input.view", "input.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.encoderdecoder.UnCollapseLayer.__init__": [[16, 21], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "W", ",", "H", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "W", "=", "W", "\n", "self", ".", "H", "=", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.encoderdecoder.UnCollapseLayer.forward": [[22, 24], ["input.view", "input.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "C", ",", "self", ".", "W", ",", "self", ".", "H", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.encoderdecoder.ViewAppearanceFlow.__init__": [[31, 106], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.losses.synthesis.SynthesisLoss", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "encoderdecoder.CollapseLayer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "encoderdecoder.UnCollapseLayer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "# 128", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "# 64", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "# 32", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "# 16", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "# 8", "\n", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "# 4", "\n", "CollapseLayer", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "8192", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "4096", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "4096", ")", ",", "\n", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "4096", "+", "256", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "4096", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "4096", ")", ",", "\n", "UnCollapseLayer", "(", "64", ",", "8", ",", "8", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "16", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "2", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "angle_transformer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "12", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", ")", "\n", "\n", "self", ".", "loss_function", "=", "SynthesisLoss", "(", "opt", "=", "opt", ")", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.encoderdecoder.ViewAppearanceFlow.forward": [[107, 142], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "encoderdecoder.ViewAppearanceFlow.encoder", "encoderdecoder.ViewAppearanceFlow.angle_transformer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "encoderdecoder.ViewAppearanceFlow.decoder", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "encoderdecoder.ViewAppearanceFlow.loss_function", "input_img.cuda.cuda.cuda", "output_img.cuda.cuda.cuda", "input_RTinv.cuda.cuda.cuda", "output_RT.cuda.cuda.cuda", "input_RTinv.cuda.cuda.bmm", "RT.view", "encoderdecoder.ViewAppearanceFlow.permute", "RT.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "input_img", "=", "batch", "[", "\"images\"", "]", "[", "0", "]", "\n", "output_img", "=", "batch", "[", "\"images\"", "]", "[", "-", "1", "]", "\n", "\n", "input_RTinv", "=", "batch", "[", "\"cameras\"", "]", "[", "0", "]", "[", "\"Pinv\"", "]", "\n", "output_RT", "=", "batch", "[", "\"cameras\"", "]", "[", "-", "1", "]", "[", "\"P\"", "]", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "input_img", "=", "input_img", ".", "cuda", "(", ")", "\n", "output_img", "=", "output_img", ".", "cuda", "(", ")", "\n", "\n", "input_RTinv", "=", "input_RTinv", ".", "cuda", "(", ")", "\n", "output_RT", "=", "output_RT", ".", "cuda", "(", ")", "\n", "\n", "", "RT", "=", "input_RTinv", ".", "bmm", "(", "output_RT", ")", "[", ":", ",", "0", ":", "3", ",", ":", "]", "\n", "\n", "# Now transform the change in angle", "\n", "fs", "=", "self", ".", "encoder", "(", "input_img", ")", "\n", "fs_angle", "=", "self", ".", "angle_transformer", "(", "RT", ".", "view", "(", "RT", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "\n", "# And concatenate", "\n", "fs", "=", "torch", ".", "cat", "(", "(", "fs", ",", "fs_angle", ")", ",", "1", ")", "\n", "sampler", "=", "self", ".", "decoder", "(", "fs", ")", "\n", "gen_img", "=", "F", ".", "grid_sample", "(", "input_img", ",", "sampler", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "\n", "# And the loss", "\n", "loss", "=", "self", ".", "loss_function", "(", "gen_img", ",", "output_img", ")", "\n", "\n", "# And return", "\n", "return", "(", "\n", "loss", ",", "\n", "{", "\n", "\"InputImg\"", ":", "input_img", ",", "\n", "\"OutputImg\"", ":", "output_img", ",", "\n", "\"PredImg\"", ":", "gen_img", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.encoderdecoder.ViewAppearanceFlow.forward_angle": [[145, 181], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "encoderdecoder.ViewAppearanceFlow.encoder", "enumerate", "input_img.cuda.cuda.cuda", "K.cuda.cuda.cuda", "K_inv.cuda.cuda.cuda", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "encoderdecoder.ViewAppearanceFlow.angle_transformer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "encoderdecoder.ViewAppearanceFlow.decoder", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "RT[].cuda", "RT.view", "encoderdecoder.ViewAppearanceFlow.permute", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "RT.size", "encoderdecoder.ViewAppearanceFlow.size"], "methods", ["None"], ["", "def", "forward_angle", "(", "self", ",", "batch", ",", "RTs", ",", "return_depth", "=", "False", ")", ":", "\n", "# Input values", "\n", "        ", "input_img", "=", "batch", "[", "\"images\"", "]", "[", "0", "]", "\n", "\n", "# Camera parameters", "\n", "K", "=", "batch", "[", "\"cameras\"", "]", "[", "0", "]", "[", "\"K\"", "]", "\n", "K_inv", "=", "batch", "[", "\"cameras\"", "]", "[", "0", "]", "[", "\"Kinv\"", "]", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "input_img", "=", "input_img", ".", "cuda", "(", ")", "\n", "\n", "K", "=", "K", ".", "cuda", "(", ")", "\n", "K_inv", "=", "K_inv", ".", "cuda", "(", ")", "\n", "\n", "RTs", "=", "[", "RT", "[", ":", ",", "0", ":", "3", ",", ":", "]", ".", "cuda", "(", ")", "for", "RT", "in", "RTs", "]", "\n", "\n", "", "fs", "=", "self", ".", "encoder", "(", "input_img", ")", "\n", "# Now rotate", "\n", "gen_imgs", "=", "[", "]", "\n", "for", "i", ",", "RT", "in", "enumerate", "(", "RTs", ")", ":", "\n", "            ", "torch", ".", "manual_seed", "(", "\n", "0", "\n", ")", "# Reset seed each time so that noise vectors are the same", "\n", "fs_angle", "=", "self", ".", "angle_transformer", "(", "RT", ".", "view", "(", "RT", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "\n", "# And concatenate", "\n", "fs_new", "=", "torch", ".", "cat", "(", "(", "fs", ",", "fs_angle", ")", ",", "1", ")", "\n", "sampler", "=", "self", ".", "decoder", "(", "fs_new", ")", "\n", "gen_img", "=", "F", ".", "grid_sample", "(", "input_img", ",", "sampler", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "\n", "gen_imgs", "+=", "[", "gen_img", "]", "\n", "\n", "", "if", "return_depth", ":", "\n", "            ", "return", "gen_imgs", ",", "torch", ".", "zeros", "(", "fs", ".", "size", "(", "0", ")", ",", "1", ",", "256", ",", "256", ")", "\n", "\n", "", "return", "gen_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.encoderdecoder.Tatarchenko.__init__": [[184, 259], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.losses.synthesis.SynthesisLoss", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "encoderdecoder.CollapseLayer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "encoderdecoder.UnCollapseLayer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "# 128", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "# 64", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "# 32", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "# 16", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "# 8", "\n", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "# 4", "\n", "CollapseLayer", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "8192", ",", "4096", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "4096", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "4096", ")", ",", "\n", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "4096", "+", "64", ",", "4096", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "4096", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "4096", ")", ",", "\n", "UnCollapseLayer", "(", "64", ",", "8", ",", "8", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "16", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "3", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "angle_transformer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "12", ",", "64", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "64", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "64", ")", ",", "\n", ")", "\n", "\n", "self", ".", "loss_function", "=", "SynthesisLoss", "(", "opt", "=", "opt", ")", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.encoderdecoder.Tatarchenko.forward": [[260, 293], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "encoderdecoder.Tatarchenko.encoder", "encoderdecoder.Tatarchenko.angle_transformer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "encoderdecoder.Tatarchenko.decoder", "encoderdecoder.Tatarchenko.loss_function", "input_img.cuda.cuda.cuda", "output_img.cuda.cuda.cuda", "input_RTinv.cuda.cuda.cuda", "output_RT.cuda.cuda.cuda", "input_RTinv.cuda.cuda.bmm", "RT.view", "RT.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "input_img", "=", "batch", "[", "\"images\"", "]", "[", "0", "]", "\n", "output_img", "=", "batch", "[", "\"images\"", "]", "[", "-", "1", "]", "\n", "\n", "input_RTinv", "=", "batch", "[", "\"cameras\"", "]", "[", "0", "]", "[", "\"Pinv\"", "]", "\n", "output_RT", "=", "batch", "[", "\"cameras\"", "]", "[", "-", "1", "]", "[", "\"P\"", "]", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "input_img", "=", "input_img", ".", "cuda", "(", ")", "\n", "output_img", "=", "output_img", ".", "cuda", "(", ")", "\n", "\n", "input_RTinv", "=", "input_RTinv", ".", "cuda", "(", ")", "\n", "output_RT", "=", "output_RT", ".", "cuda", "(", ")", "\n", "\n", "", "RT", "=", "input_RTinv", ".", "bmm", "(", "output_RT", ")", "[", ":", ",", "0", ":", "3", ",", ":", "]", "\n", "\n", "# Now transform the change in angle", "\n", "fs", "=", "self", ".", "encoder", "(", "input_img", ")", "\n", "fs_angle", "=", "self", ".", "angle_transformer", "(", "RT", ".", "view", "(", "RT", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "\n", "# And concatenate", "\n", "fs", "=", "torch", ".", "cat", "(", "(", "fs", ",", "fs_angle", ")", ",", "1", ")", "\n", "gen_img", "=", "self", ".", "decoder", "(", "fs", ")", "\n", "\n", "loss", "=", "self", ".", "loss_function", "(", "gen_img", ",", "output_img", ")", "\n", "\n", "# And return", "\n", "return", "(", "\n", "loss", ",", "\n", "{", "\n", "\"InputImg\"", ":", "input_img", ",", "\n", "\"OutputImg\"", ":", "output_img", ",", "\n", "\"PredImg\"", ":", "gen_img", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.depth_model.Model.__init__": [[18, 34], ["torch.Module.__init__", "models.projection.depth_manipulator.DepthManipulator"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_z", "=", "opt", ".", "use_z", "\n", "self", ".", "use_alpha", "=", "opt", ".", "use_alpha", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "# REFINER", "\n", "# Refine the projected depth", "\n", "\n", "num_inputs", "=", "3", "\n", "\n", "opt", ".", "num_inputs", "=", "num_inputs", "\n", "\n", "# PROJECTION", "\n", "# Project according to the predicted depth", "\n", "self", ".", "projector", "=", "depth_manipulator", ".", "DepthManipulator", "(", "W", "=", "opt", ".", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.depth_model.Model.forward": [[36, 83], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "depth_model.Model.transform_perfimage", "input_img.cuda.cuda.cuda", "depth_img.cuda.cuda.cuda", "output_img.cuda.cuda.cuda", "K.cuda.cuda.cuda", "K_inv.cuda.cuda.cuda", "input_RTinv.cuda.cuda.cuda", "output_RT.cuda.cuda.cuda", "mask.float"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.models.depth_model.Model.transform_perfimage"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\" Forward pass of a view synthesis model with a predicted depth.\n        \"\"\"", "\n", "# Input values", "\n", "input_img", "=", "batch", "[", "\"images\"", "]", "[", "0", "]", "\n", "depth_img", "=", "batch", "[", "\"depths\"", "]", "[", "0", "]", "\n", "output_img", "=", "batch", "[", "\"images\"", "]", "[", "-", "1", "]", "\n", "\n", "# Camera parameters", "\n", "K", "=", "batch", "[", "\"cameras\"", "]", "[", "0", "]", "[", "\"K\"", "]", "\n", "K_inv", "=", "batch", "[", "\"cameras\"", "]", "[", "0", "]", "[", "\"Kinv\"", "]", "\n", "\n", "input_RTinv", "=", "batch", "[", "\"cameras\"", "]", "[", "0", "]", "[", "\"Pinv\"", "]", "\n", "output_RT", "=", "batch", "[", "\"cameras\"", "]", "[", "-", "1", "]", "[", "\"P\"", "]", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "input_img", "=", "input_img", ".", "cuda", "(", ")", "\n", "depth_img", "=", "depth_img", ".", "cuda", "(", ")", "\n", "output_img", "=", "output_img", ".", "cuda", "(", ")", "\n", "\n", "K", "=", "K", ".", "cuda", "(", ")", "\n", "K_inv", "=", "K_inv", ".", "cuda", "(", ")", "\n", "\n", "input_RTinv", "=", "input_RTinv", ".", "cuda", "(", ")", "\n", "output_RT", "=", "output_RT", ".", "cuda", "(", ")", "\n", "\n", "# Transform the image according to intrinsic parameters", "\n", "# and rotation and depth", "\n", "", "sampled_image", "=", "self", ".", "transform_perfimage", "(", "\n", "input_img", ",", "output_img", ",", "depth_img", ",", "K", ",", "K_inv", ",", "input_RTinv", ",", "output_RT", "\n", ")", "\n", "\n", "mask", "=", "(", "batch", "[", "\"depths\"", "]", "[", "1", "]", "<", "10", ")", ".", "float", "(", ")", "*", "(", "\n", "batch", "[", "\"depths\"", "]", "[", "1", "]", ">", "EPS", "\n", ")", ".", "float", "(", ")", "\n", "\n", "return", "(", "\n", "0", ",", "\n", "{", "\n", "\"InputImg\"", ":", "input_img", ",", "\n", "\"OutputImg\"", ":", "output_img", ",", "\n", "\"Mask\"", ":", "mask", ".", "float", "(", ")", ",", "\n", "\"SampledImg\"", ":", "sampled_image", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "\n", "\"Diff Sampled\"", ":", "(", "\n", "sampled_image", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", "-", "output_img", "\n", ")", ".", "abs", "(", ")", ",", "\n", "\"Depth\"", ":", "depth_img", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.depth_model.Model.transform_perfimage": [[86, 112], ["depth_model.Model.projector.project_zbuffer", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.depth_manipulator.DepthManipulator.project_zbuffer"], ["", "def", "transform_perfimage", "(", "\n", "self", ",", "input_img", ",", "output_img", ",", "depth_img", ",", "K", ",", "K_inv", ",", "RTinv_cam1", ",", "RT_cam2", "\n", ")", ":", "\n", "        ", "\"\"\" Create a new view of an input image.\n        Transform according to the output rotation/translation.\n        \"\"\"", "\n", "# Transform according to the depth projection", "\n", "sampler", ",", "_", "=", "self", ".", "projector", ".", "project_zbuffer", "(", "\n", "depth", "=", "depth_img", ",", "\n", "K", "=", "K", ",", "\n", "K_inv", "=", "K_inv", ",", "\n", "RTinv_cam1", "=", "RTinv_cam1", ",", "\n", "RT_cam2", "=", "RT_cam2", ",", "\n", ")", "\n", "\n", "# Sample image according to this sampler", "\n", "\n", "mask", "=", "(", "(", "sampler", ">", "-", "1", ")", ".", "float", "(", ")", "*", "(", "sampler", "<", "1", ")", ".", "float", "(", ")", ")", ".", "min", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "True", "\n", ")", "[", "0", "]", "\n", "mask", "=", "F", ".", "avg_pool2d", "(", "mask", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "mask", "=", "(", "mask", ">", "0", ")", ".", "float", "(", ")", "\n", "\n", "sampled_image", "=", "output_img", "*", "mask", "\n", "\n", "return", "sampled_image", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.base_model.BaseModel.__init__": [[10, 47], ["torch.Module.__init__", "models.losses.gan_loss.DiscriminatorLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "base_model.BaseModel.init_weights", "models.losses.gan_loss.DiscriminatorLoss", "models.losses.gan_loss.DiscriminatorLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "list", "list", "list", "base_model.BaseModel.model.parameters", "base_model.BaseModel.netD.parameters", "base_model.BaseModel.model.parameters"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.BaseNetwork.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "if", "opt", ".", "discriminator_losses", ":", "\n", "            ", "self", ".", "use_discriminator", "=", "True", "\n", "\n", "self", ".", "netD", "=", "DiscriminatorLoss", "(", "opt", ")", "\n", "if", "'use_3_discrim'", "in", "self", ".", "opt", "and", "self", ".", "opt", ".", "use_3_discrim", ":", "\n", "                ", "self", ".", "netD2", "=", "DiscriminatorLoss", "(", "opt", ")", "\n", "self", ".", "netD3", "=", "DiscriminatorLoss", "(", "opt", ")", "\n", "\n", "", "if", "opt", ".", "isTrain", ":", "\n", "                ", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "list", "(", "self", ".", "netD", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr_d", ",", "\n", "betas", "=", "(", "opt", ".", "beta1", ",", "opt", ".", "beta2", ")", ",", "\n", ")", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "list", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr_g", ",", "\n", "betas", "=", "(", "opt", ".", "beta1", ",", "opt", ".", "beta2", ")", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "use_discriminator", "=", "False", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "list", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr_g", ",", "\n", "betas", "=", "(", "0.99", ",", "opt", ".", "beta2", ")", ",", "\n", ")", "\n", "\n", "", "if", "opt", ".", "isTrain", ":", "\n", "            ", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "\n", "", "if", "opt", ".", "init", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.base_model.BaseModel.init_weights": [[48, 80], ["base_model.BaseModel.apply", "base_model.BaseModel.children", "hasattr", "hasattr", "m.init_weights", "torch.nn.init.normal_", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "m.reset_parameters", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.BaseNetwork.init_weights", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.locally_masked_convolution.locally_masked_conv2d.reset_parameters"], ["", "", "def", "init_weights", "(", "self", ",", "gain", "=", "0.02", ")", ":", "\n", "        ", "def", "init_func", "(", "m", ")", ":", "\n", "            ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "\"weight\"", ")", "and", "(", "\n", "classname", ".", "find", "(", "\"Conv\"", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "\"Linear\"", ")", "!=", "-", "1", "\n", ")", ":", "\n", "                ", "if", "self", ".", "opt", ".", "init", "==", "\"normal\"", ":", "\n", "                    ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "self", ".", "opt", ".", "init", "==", "\"xavier\"", ":", "\n", "                    ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "self", ".", "opt", ".", "init", "==", "\"xavier_uniform\"", ":", "\n", "                    ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1.0", ")", "\n", "", "elif", "self", ".", "opt", ".", "init", "==", "\"kaiming\"", ":", "\n", "                    ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "\"fan_in\"", ")", "\n", "", "elif", "self", ".", "opt", ".", "init", "==", "\"orthogonal\"", ":", "\n", "                    ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "", "elif", "self", ".", "opt", ".", "init", "==", "\"\"", ":", "# uses pytorch's default init method", "\n", "                    ", "m", ".", "reset_parameters", "(", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "\n", "\"initialization method [%s] is not implemented\"", "\n", "%", "self", ".", "opt", ".", "init", "\n", ")", "\n", "", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "", "self", ".", "apply", "(", "init_func", ")", "\n", "\n", "# propagate to children", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "\"init_weights\"", ")", ":", "\n", "                ", "m", ".", "init_weights", "(", "self", ".", "opt", ".", "init", ",", "gain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.models.base_model.BaseModel.__call__": [[81, 149], ["base_model.BaseModel.optimizer_G.zero_grad", "float", "base_model.BaseModel.model", "range", "base_model.BaseModel.optimizer_G.step", "base_model.BaseModel.optimizer_D.zero_grad", "range", "base_model.BaseModel.optimizer_D.step", "base_model.BaseModel.pop", "base_model.BaseModel.pop", "t_losses.update", "t_losses.update", "print", "pdb.set_trace", "range", "base_model.BaseModel.optimizer_G.step", "output_images.keys", "output_images.keys", "base_model.BaseModel.model", "base_model.BaseModel.netD.run_generator_one_step", "base_model.BaseModel.netD.run_discriminator_one_step", "base_model.BaseModel.model", "next"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.CycleScheduler.step", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.CycleScheduler.step", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.update", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.update", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.CycleScheduler.step", "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.DiscriminatorLoss.run_generator_one_step", "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.DiscriminatorLoss.run_discriminator_one_step"], ["", "", "", "def", "__call__", "(", "\n", "self", ",", "batch", ",", "isval", "=", "False", ",", "num_steps", "=", "1", ",", "return_batch", "=", "False", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Main function call\n        - dataloader: The sampler that choose data samples.\n        - isval: Whether to train the discriminator etc.\n        - num steps: not fully implemented but is number of steps in the discriminator for\n        each in the generator\n        - return_batch: Whether to return the input values\n        \"\"\"", "\n", "weight", "=", "1.0", "/", "float", "(", "num_steps", ")", "\n", "if", "isval", ":", "\n", "            ", "t_losses", ",", "output_images", "=", "self", ".", "model", "(", "batch", ",", "self", ".", "netD", ")", "\n", "\n", "if", "self", ".", "opt", ".", "normalize_image", ":", "\n", "                ", "for", "k", "in", "output_images", ".", "keys", "(", ")", ":", "\n", "                    ", "if", "\"Img\"", "in", "k", ":", "\n", "                        ", "output_images", "[", "k", "]", "=", "0.5", "*", "output_images", "[", "k", "]", "+", "0.5", "\n", "\n", "", "", "", "if", "return_batch", ":", "\n", "                ", "return", "t_losses", ",", "output_images", ",", "batch", "\n", "", "return", "t_losses", ",", "output_images", "\n", "\n", "", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "use_discriminator", ":", "\n", "            ", "all_output_images", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "num_steps", ")", ":", "\n", "                ", "t_losses", ",", "output_images", "=", "self", ".", "model", "(", "batch", ")", "\n", "g_losses", "=", "self", ".", "netD", ".", "run_generator_one_step", "(", "\n", "output_images", "[", "\"PredImg\"", "]", ",", "output_images", "[", "\"OutputImg\"", "]", "\n", ")", "\n", "(", "\n", "g_losses", "[", "\"Total Loss\"", "]", "/", "weight", "\n", "+", "t_losses", "[", "\"Total Loss\"", "]", "/", "weight", "\n", ")", ".", "mean", "(", ")", ".", "backward", "(", ")", "\n", "all_output_images", "+=", "[", "output_images", "]", "\n", "", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "for", "step", "in", "range", "(", "0", ",", "num_steps", ")", ":", "\n", "                ", "d_losses", "=", "self", ".", "netD", ".", "run_discriminator_one_step", "(", "\n", "all_output_images", "[", "step", "]", "[", "\"PredImg\"", "]", ",", "\n", "all_output_images", "[", "step", "]", "[", "\"OutputImg\"", "]", ",", "\n", ")", "\n", "(", "d_losses", "[", "\"Total Loss\"", "]", "/", "weight", ")", ".", "mean", "(", ")", ".", "backward", "(", ")", "\n", "\n", "# Apply orthogonal regularization from BigGan", "\n", "", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "g_losses", ".", "pop", "(", "\"Total Loss\"", ")", "\n", "d_losses", ".", "pop", "(", "\"Total Loss\"", ")", "\n", "t_losses", ".", "update", "(", "g_losses", ")", "\n", "t_losses", ".", "update", "(", "d_losses", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'this isnt implemented for our case'", ")", "\n", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "for", "step", "in", "range", "(", "0", ",", "num_steps", ")", ":", "\n", "                ", "t_losses", ",", "output_images", "=", "self", ".", "model", "(", "next", "(", "dataloader", ")", ")", "\n", "(", "t_losses", "[", "\"Total Loss\"", "]", "/", "weight", ")", ".", "mean", "(", ")", ".", "backward", "(", ")", "\n", "", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "normalize_image", ":", "\n", "            ", "for", "k", "in", "output_images", ".", "keys", "(", ")", ":", "\n", "                ", "if", "\"Img\"", "in", "k", ":", "\n", "                    ", "output_images", "[", "k", "]", "=", "0.5", "*", "output_images", "[", "k", "]", "+", "0.5", "\n", "\n", "", "", "", "return", "t_losses", ",", "output_images", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.sample.sample_model": [[12, 25], ["torch.no_grad", "torch.zeros().to", "tqdm.tqdm", "range", "range", "torch.zeros", "model", "torch.softmax", "torch.multinomial().squeeze", "torch.multinomial"], "function", ["None"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample_model", "(", "model", ",", "device", ",", "batch", ",", "size", ",", "temperature", ",", "condition", "=", "None", ")", ":", "\n", "    ", "row", "=", "torch", ".", "zeros", "(", "batch", ",", "*", "size", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "to", "(", "device", ")", "\n", "cache", "=", "{", "}", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "size", "[", "0", "]", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "size", "[", "1", "]", ")", ":", "\n", "            ", "out", ",", "cache", "=", "model", "(", "row", "[", ":", ",", ":", "i", "+", "1", ",", ":", "]", ",", "condition", "=", "condition", ",", "cache", "=", "cache", ")", "\n", "prob", "=", "torch", ".", "softmax", "(", "out", "[", ":", ",", ":", ",", "i", ",", "j", "]", "/", "temperature", ",", "1", ")", "\n", "sample", "=", "torch", ".", "multinomial", "(", "prob", ",", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "row", "[", ":", ",", "i", ",", "j", "]", "=", "sample", "\n", "\n", "", "", "return", "row", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.sample.load_model": [[27, 73], ["torch.load", "pixelsnail.PixelSNAIL.load_state_dict", "pixelsnail.PixelSNAIL.to", "pixelsnail.PixelSNAIL.eval", "os.path.join", "vqvae.VQVAE", "pixelsnail.PixelSNAIL", "pixelsnail.PixelSNAIL"], "function", ["None"], ["", "def", "load_model", "(", "model", ",", "checkpoint", ",", "device", ")", ":", "\n", "    ", "ckpt", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "'checkpoint'", ",", "checkpoint", ")", ")", "\n", "\n", "\n", "if", "'args'", "in", "ckpt", ":", "\n", "        ", "args", "=", "ckpt", "[", "'args'", "]", "\n", "\n", "", "if", "model", "==", "'vqvae'", ":", "\n", "        ", "model", "=", "VQVAE", "(", ")", "\n", "\n", "", "elif", "model", "==", "'pixelsnail_top'", ":", "\n", "        ", "model", "=", "PixelSNAIL", "(", "\n", "[", "32", ",", "32", "]", ",", "\n", "512", ",", "\n", "args", ".", "channel", ",", "\n", "5", ",", "\n", "4", ",", "\n", "args", ".", "n_res_block", ",", "\n", "args", ".", "n_res_channel", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "n_out_res_block", "=", "args", ".", "n_out_res_block", ",", "\n", ")", "\n", "\n", "", "elif", "model", "==", "'pixelsnail_bottom'", ":", "\n", "        ", "model", "=", "PixelSNAIL", "(", "\n", "[", "64", ",", "64", "]", ",", "\n", "512", ",", "\n", "args", ".", "channel", ",", "\n", "5", ",", "\n", "4", ",", "\n", "args", ".", "n_res_block", ",", "\n", "args", ".", "n_res_channel", ",", "\n", "attention", "=", "False", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "n_cond_res_block", "=", "args", ".", "n_cond_res_block", ",", "\n", "cond_res_channel", "=", "args", ".", "n_res_channel", ",", "\n", ")", "\n", "\n", "", "if", "'model'", "in", "ckpt", ":", "\n", "        ", "ckpt", "=", "ckpt", "[", "'model'", "]", "\n", "\n", "", "model", ".", "load_state_dict", "(", "ckpt", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.Quantize.__init__": [[28, 40], ["torch.nn.Module.__init__", "torch.randn", "vqvae.Quantize.register_buffer", "vqvae.Quantize.register_buffer", "vqvae.Quantize.register_buffer", "torch.zeros", "torch.randn.clone"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "n_embed", ",", "decay", "=", "0.99", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "n_embed", "=", "n_embed", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "embed", "=", "torch", ".", "randn", "(", "dim", ",", "n_embed", ")", "\n", "self", ".", "register_buffer", "(", "\"embed\"", ",", "embed", ")", "\n", "self", ".", "register_buffer", "(", "\"cluster_size\"", ",", "torch", ".", "zeros", "(", "n_embed", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"embed_avg\"", ",", "embed", ".", "clone", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.Quantize.forward": [[41, 75], ["input.reshape", "torch.nn.functional.one_hot().type", "embed_ind.view.view.view", "vqvae.Quantize.embed_code", "vqvae.Quantize.embed.pow().sum", "torch.nn.functional.one_hot().type.sum", "models.all_reduce", "models.all_reduce", "vqvae.Quantize.cluster_size.data.mul_().add_", "vqvae.Quantize.embed_avg.data.mul_().add_", "vqvae.Quantize.cluster_size.sum", "vqvae.Quantize.embed.data.copy_", "input.reshape.pow().sum", "torch.nn.functional.one_hot", "input.reshape.transpose", "cluster_size.unsqueeze", "vqvae.Quantize.embed.pow", "vqvae.Quantize.cluster_size.data.mul_", "vqvae.Quantize.embed_avg.data.mul_", "input.reshape.pow", "vqvae.Quantize.detach"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.Quantize.embed_code", "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.all_reduce", "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.all_reduce", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.transpose"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "flatten", "=", "input", ".", "reshape", "(", "-", "1", ",", "self", ".", "dim", ")", "\n", "dist", "=", "(", "\n", "flatten", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "-", "2", "*", "flatten", "@", "self", ".", "embed", "\n", "+", "self", ".", "embed", ".", "pow", "(", "2", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", ")", "\n", "_", ",", "embed_ind", "=", "(", "-", "dist", ")", ".", "max", "(", "1", ")", "\n", "embed_onehot", "=", "F", ".", "one_hot", "(", "embed_ind", ",", "self", ".", "n_embed", ")", ".", "type", "(", "flatten", ".", "dtype", ")", "\n", "embed_ind", "=", "embed_ind", ".", "view", "(", "*", "input", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "quantize", "=", "self", ".", "embed_code", "(", "embed_ind", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "embed_onehot_sum", "=", "embed_onehot", ".", "sum", "(", "0", ")", "\n", "embed_sum", "=", "flatten", ".", "transpose", "(", "0", ",", "1", ")", "@", "embed_onehot", "\n", "\n", "dist_fn", ".", "all_reduce", "(", "embed_onehot_sum", ")", "\n", "dist_fn", ".", "all_reduce", "(", "embed_sum", ")", "\n", "\n", "self", ".", "cluster_size", ".", "data", ".", "mul_", "(", "self", ".", "decay", ")", ".", "add_", "(", "\n", "embed_onehot_sum", ",", "alpha", "=", "1", "-", "self", ".", "decay", "\n", ")", "\n", "self", ".", "embed_avg", ".", "data", ".", "mul_", "(", "self", ".", "decay", ")", ".", "add_", "(", "embed_sum", ",", "alpha", "=", "1", "-", "self", ".", "decay", ")", "\n", "n", "=", "self", ".", "cluster_size", ".", "sum", "(", ")", "\n", "cluster_size", "=", "(", "\n", "(", "self", ".", "cluster_size", "+", "self", ".", "eps", ")", "/", "(", "n", "+", "self", ".", "n_embed", "*", "self", ".", "eps", ")", "*", "n", "\n", ")", "\n", "embed_normalized", "=", "self", ".", "embed_avg", "/", "cluster_size", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "embed", ".", "data", ".", "copy_", "(", "embed_normalized", ")", "\n", "\n", "", "diff", "=", "(", "quantize", ".", "detach", "(", ")", "-", "input", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "quantize", "=", "input", "+", "(", "quantize", "-", "input", ")", ".", "detach", "(", ")", "\n", "\n", "return", "quantize", ",", "diff", ",", "embed_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.Quantize.embed_code": [[76, 78], ["torch.nn.functional.embedding", "vqvae.Quantize.embed.transpose"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.transpose"], ["", "def", "embed_code", "(", "self", ",", "embed_id", ")", ":", "\n", "        ", "return", "F", ".", "embedding", "(", "embed_id", ",", "self", ".", "embed", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.ResBlock.__init__": [[81, 89], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "channel", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "channel", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", ",", "in_channel", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.ResBlock.forward": [[91, 96], ["vqvae.ResBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "input", ")", "\n", "out", "+=", "input", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.Encoder.__init__": [[99, 124], ["torch.nn.Module.__init__", "range", "blocks.append", "torch.nn.Sequential", "blocks.append", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "vqvae.ResBlock", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "channel", ",", "n_res_block", ",", "n_res_channel", ",", "stride", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "stride", "==", "4", ":", "\n", "            ", "blocks", "=", "[", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "channel", "//", "2", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", "//", "2", ",", "channel", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", ",", "channel", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "]", "\n", "\n", "", "elif", "stride", "==", "2", ":", "\n", "            ", "blocks", "=", "[", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "channel", "//", "2", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", "//", "2", ",", "channel", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_res_block", ")", ":", "\n", "            ", "blocks", ".", "append", "(", "ResBlock", "(", "channel", ",", "n_res_channel", ")", ")", "\n", "\n", "", "blocks", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.Encoder.forward": [[125, 127], ["vqvae.Encoder.blocks"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "blocks", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.Decoder.__init__": [[130, 159], ["torch.nn.Module.__init__", "range", "blocks.append", "torch.nn.Sequential", "torch.nn.Conv2d", "blocks.append", "torch.nn.ReLU", "blocks.extend", "vqvae.ResBlock", "blocks.append", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "in_channel", ",", "out_channel", ",", "channel", ",", "n_res_block", ",", "n_res_channel", ",", "stride", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "blocks", "=", "[", "nn", ".", "Conv2d", "(", "in_channel", ",", "channel", ",", "3", ",", "padding", "=", "1", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "n_res_block", ")", ":", "\n", "            ", "blocks", ".", "append", "(", "ResBlock", "(", "channel", ",", "n_res_channel", ")", ")", "\n", "\n", "", "blocks", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "if", "stride", "==", "4", ":", "\n", "            ", "blocks", ".", "extend", "(", "\n", "[", "\n", "nn", ".", "ConvTranspose2d", "(", "channel", ",", "channel", "//", "2", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "channel", "//", "2", ",", "out_channel", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", "\n", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "", "elif", "stride", "==", "2", ":", "\n", "            ", "blocks", ".", "append", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "channel", ",", "out_channel", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", ")", "\n", "\n", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.Decoder.forward": [[160, 162], ["vqvae.Decoder.blocks"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "blocks", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAE.__init__": [[165, 196], ["torch.nn.Module.__init__", "vqvae.Encoder", "vqvae.Encoder", "torch.nn.Conv2d", "vqvae.Quantize", "vqvae.Decoder", "torch.nn.Conv2d", "vqvae.Quantize", "torch.nn.ConvTranspose2d", "vqvae.Decoder"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channel", "=", "3", ",", "\n", "channel", "=", "128", ",", "\n", "n_res_block", "=", "2", ",", "\n", "n_res_channel", "=", "32", ",", "\n", "embed_dim", "=", "64", ",", "\n", "n_embed", "=", "512", ",", "\n", "decay", "=", "0.99", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "enc_b", "=", "Encoder", "(", "in_channel", ",", "channel", ",", "n_res_block", ",", "n_res_channel", ",", "stride", "=", "4", ")", "\n", "self", ".", "enc_t", "=", "Encoder", "(", "channel", ",", "channel", ",", "n_res_block", ",", "n_res_channel", ",", "stride", "=", "2", ")", "\n", "self", ".", "quantize_conv_t", "=", "nn", ".", "Conv2d", "(", "channel", ",", "embed_dim", ",", "1", ")", "\n", "self", ".", "quantize_t", "=", "Quantize", "(", "embed_dim", ",", "n_embed", ")", "\n", "self", ".", "dec_t", "=", "Decoder", "(", "\n", "embed_dim", ",", "embed_dim", ",", "channel", ",", "n_res_block", ",", "n_res_channel", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "quantize_conv_b", "=", "nn", ".", "Conv2d", "(", "embed_dim", "+", "channel", ",", "embed_dim", ",", "1", ")", "\n", "self", ".", "quantize_b", "=", "Quantize", "(", "embed_dim", ",", "n_embed", ")", "\n", "self", ".", "upsample_t", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "embed_dim", ",", "embed_dim", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", "\n", ")", "\n", "self", ".", "dec", "=", "Decoder", "(", "\n", "embed_dim", "+", "embed_dim", ",", "\n", "in_channel", ",", "\n", "channel", ",", "\n", "n_res_block", ",", "\n", "n_res_channel", ",", "\n", "stride", "=", "4", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAE.forward": [[198, 203], ["vqvae.VQVAE.encode", "vqvae.VQVAE.decode"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.encode", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.decode"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "quant_t", ",", "quant_b", ",", "diff", ",", "_", ",", "_", "=", "self", ".", "encode", "(", "input", ")", "\n", "dec", "=", "self", ".", "decode", "(", "quant_t", ",", "quant_b", ")", "\n", "\n", "return", "dec", ",", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAE.encode": [[204, 222], ["vqvae.VQVAE.enc_b", "vqvae.VQVAE.enc_t", "vqvae.VQVAE.quantize_conv_t().permute", "vqvae.VQVAE.quantize_t", "quant_t.permute.permute.permute", "diff_t.unsqueeze.unsqueeze.unsqueeze", "vqvae.VQVAE.dec_t", "torch.cat", "vqvae.VQVAE.quantize_conv_b().permute", "vqvae.VQVAE.quantize_b", "quant_b.permute.permute.permute", "diff_b.unsqueeze.unsqueeze.unsqueeze", "vqvae.VQVAE.quantize_conv_t", "vqvae.VQVAE.quantize_conv_b"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "input", ")", ":", "\n", "        ", "enc_b", "=", "self", ".", "enc_b", "(", "input", ")", "\n", "enc_t", "=", "self", ".", "enc_t", "(", "enc_b", ")", "\n", "\n", "quant_t", "=", "self", ".", "quantize_conv_t", "(", "enc_t", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "quant_t", ",", "diff_t", ",", "id_t", "=", "self", ".", "quantize_t", "(", "quant_t", ")", "\n", "quant_t", "=", "quant_t", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "diff_t", "=", "diff_t", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "dec_t", "=", "self", ".", "dec_t", "(", "quant_t", ")", "\n", "enc_b", "=", "torch", ".", "cat", "(", "[", "dec_t", ",", "enc_b", "]", ",", "1", ")", "\n", "\n", "quant_b", "=", "self", ".", "quantize_conv_b", "(", "enc_b", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "quant_b", ",", "diff_b", ",", "id_b", "=", "self", ".", "quantize_b", "(", "quant_b", ")", "\n", "quant_b", "=", "quant_b", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "diff_b", "=", "diff_b", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "return", "quant_t", ",", "quant_b", ",", "diff_t", "+", "diff_b", ",", "id_t", ",", "id_b", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAE.decode": [[223, 229], ["vqvae.VQVAE.upsample_t", "torch.cat", "vqvae.VQVAE.dec"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "quant_t", ",", "quant_b", ")", ":", "\n", "        ", "upsample_t", "=", "self", ".", "upsample_t", "(", "quant_t", ")", "\n", "quant", "=", "torch", ".", "cat", "(", "[", "upsample_t", ",", "quant_b", "]", ",", "1", ")", "\n", "dec", "=", "self", ".", "dec", "(", "quant", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAE.decode_code": [[230, 239], ["vqvae.VQVAE.quantize_t.embed_code", "quant_t.permute.permute.permute", "vqvae.VQVAE.quantize_b.embed_code", "quant_b.permute.permute.permute", "vqvae.VQVAE.decode"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.Quantize.embed_code", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.Quantize.embed_code", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.decode"], ["", "def", "decode_code", "(", "self", ",", "code_t", ",", "code_b", ")", ":", "\n", "        ", "quant_t", "=", "self", ".", "quantize_t", ".", "embed_code", "(", "code_t", ")", "\n", "quant_t", "=", "quant_t", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "quant_b", "=", "self", ".", "quantize_b", ".", "embed_code", "(", "code_b", ")", "\n", "quant_b", "=", "quant_b", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "dec", "=", "self", ".", "decode", "(", "quant_t", ",", "quant_b", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.__init__": [[241, 272], ["torch.nn.Module.__init__", "vqvae.Encoder", "vqvae.Encoder", "torch.nn.Conv2d", "vqvae.Quantize", "vqvae.Decoder", "torch.nn.Conv2d", "vqvae.Quantize", "torch.nn.ConvTranspose2d", "vqvae.Decoder"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channel", "=", "3", ",", "\n", "channel", "=", "128", ",", "\n", "n_res_block", "=", "2", ",", "\n", "n_res_channel", "=", "32", ",", "\n", "embed_dim", "=", "64", ",", "\n", "n_embed", "=", "512", ",", "\n", "decay", "=", "0.99", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "enc_b", "=", "Encoder", "(", "in_channel", ",", "channel", ",", "n_res_block", ",", "n_res_channel", ",", "stride", "=", "4", ")", "\n", "self", ".", "enc_t", "=", "Encoder", "(", "channel", ",", "channel", ",", "n_res_block", ",", "n_res_channel", ",", "stride", "=", "2", ")", "\n", "self", ".", "quantize_conv_t", "=", "nn", ".", "Conv2d", "(", "channel", ",", "embed_dim", ",", "1", ")", "\n", "self", ".", "quantize_t", "=", "Quantize", "(", "embed_dim", ",", "n_embed", ")", "\n", "self", ".", "dec_t", "=", "Decoder", "(", "\n", "embed_dim", ",", "embed_dim", ",", "channel", ",", "n_res_block", ",", "n_res_channel", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "quantize_conv_b", "=", "nn", ".", "Conv2d", "(", "embed_dim", "+", "channel", ",", "embed_dim", ",", "1", ")", "\n", "self", ".", "quantize_b", "=", "Quantize", "(", "embed_dim", ",", "n_embed", ")", "\n", "self", ".", "upsample_t", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "embed_dim", ",", "embed_dim", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", "\n", ")", "\n", "self", ".", "dec", "=", "Decoder", "(", "\n", "embed_dim", ",", "\n", "in_channel", ",", "\n", "channel", ",", "\n", "n_res_block", ",", "\n", "n_res_channel", ",", "\n", "stride", "=", "4", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.forward": [[274, 279], ["vqvae.VQVAETop.encode", "vqvae.VQVAETop.decode"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.encode", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.decode"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "quant_t", ",", "quant_b", ",", "diff", ",", "_", ",", "_", "=", "self", ".", "encode", "(", "input", ")", "\n", "dec", "=", "self", ".", "decode", "(", "quant_t", ")", "\n", "\n", "return", "dec", ",", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.encode": [[280, 298], ["vqvae.VQVAETop.enc_b", "vqvae.VQVAETop.enc_t", "vqvae.VQVAETop.quantize_conv_t().permute", "vqvae.VQVAETop.quantize_t", "quant_t.permute.permute.permute", "diff_t.unsqueeze.unsqueeze.unsqueeze", "vqvae.VQVAETop.dec_t", "torch.cat", "vqvae.VQVAETop.quantize_conv_b().permute", "vqvae.VQVAETop.quantize_b", "quant_b.permute.permute.permute", "diff_b.unsqueeze.unsqueeze.unsqueeze", "vqvae.VQVAETop.quantize_conv_t", "vqvae.VQVAETop.quantize_conv_b"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "input", ")", ":", "\n", "        ", "enc_b", "=", "self", ".", "enc_b", "(", "input", ")", "\n", "enc_t", "=", "self", ".", "enc_t", "(", "enc_b", ")", "\n", "\n", "quant_t", "=", "self", ".", "quantize_conv_t", "(", "enc_t", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "quant_t", ",", "diff_t", ",", "id_t", "=", "self", ".", "quantize_t", "(", "quant_t", ")", "\n", "quant_t", "=", "quant_t", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "diff_t", "=", "diff_t", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "dec_t", "=", "self", ".", "dec_t", "(", "quant_t", ")", "\n", "enc_b", "=", "torch", ".", "cat", "(", "[", "dec_t", ",", "enc_b", "]", ",", "1", ")", "\n", "\n", "quant_b", "=", "self", ".", "quantize_conv_b", "(", "enc_b", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "quant_b", ",", "diff_b", ",", "id_b", "=", "self", ".", "quantize_b", "(", "quant_b", ")", "\n", "quant_b", "=", "quant_b", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "diff_b", "=", "diff_b", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "return", "quant_t", ",", "quant_b", ",", "diff_t", "+", "diff_b", ",", "id_t", ",", "id_b", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.decode": [[299, 305], ["vqvae.VQVAETop.upsample_t", "torch.cat", "vqvae.VQVAETop.dec"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "quant_t", ")", ":", "\n", "        ", "upsample_t", "=", "self", ".", "upsample_t", "(", "quant_t", ")", "\n", "quant", "=", "torch", ".", "cat", "(", "[", "upsample_t", "]", ",", "1", ")", "\n", "dec", "=", "self", ".", "dec", "(", "quant", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.decode_code": [[306, 313], ["vqvae.VQVAETop.quantize_t.embed_code", "quant_t.permute.permute.permute", "vqvae.VQVAETop.decode"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.Quantize.embed_code", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.decode"], ["", "def", "decode_code", "(", "self", ",", "code_t", ")", ":", "\n", "        ", "quant_t", "=", "self", ".", "quantize_t", ".", "embed_code", "(", "code_t", ")", "\n", "quant_t", "=", "quant_t", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "dec", "=", "self", ".", "decode", "(", "quant_t", ")", "\n", "\n", "return", "dec", "", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.dataset.ImageFileDataset.__getitem__": [[15, 23], ["torchvision.datasets.ImageFolder.__getitem__", "os.path.split", "os.path.split", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.data.habitat_data.HabitatImageGenerator.__getitem__"], ["    ", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample", ",", "target", "=", "super", "(", ")", ".", "__getitem__", "(", "index", ")", "\n", "path", ",", "_", "=", "self", ".", "samples", "[", "index", "]", "\n", "dirs", ",", "filename", "=", "os", ".", "path", ".", "split", "(", "path", ")", "\n", "_", ",", "class_name", "=", "os", ".", "path", ".", "split", "(", "dirs", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "class_name", ",", "filename", ")", "\n", "\n", "return", "sample", ",", "target", ",", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.dataset.LMDBDataset.__init__": [[26, 41], ["lmdb.open", "IOError", "dataset.LMDBDataset.env.begin", "int", "txn.get().decode", "txn.get"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.decode", "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.FutureResult.get"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n", "path", ",", "\n", "max_readers", "=", "32", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ",", "\n", ")", "\n", "\n", "if", "not", "self", ".", "env", ":", "\n", "            ", "raise", "IOError", "(", "'Cannot open lmdb dataset'", ",", "path", ")", "\n", "\n", "", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "self", ".", "length", "=", "int", "(", "txn", ".", "get", "(", "'length'", ".", "encode", "(", "'utf-8'", ")", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.dataset.LMDBDataset.__len__": [[42, 44], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.dataset.LMDBDataset.__getitem__": [[45, 52], ["dataset.LMDBDataset.env.begin", "str().encode", "pickle.loads", "torch.from_numpy", "torch.from_numpy", "txn.get", "str"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.encode", "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.FutureResult.get"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "key", "=", "str", "(", "index", ")", ".", "encode", "(", "'utf-8'", ")", "\n", "\n", "row", "=", "pickle", ".", "loads", "(", "txn", ".", "get", "(", "key", ")", ")", "\n", "\n", "", "return", "torch", ".", "from_numpy", "(", "row", ".", "top", ")", ",", "torch", ".", "from_numpy", "(", "row", ".", "bottom", ")", ",", "row", ".", "filename", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.CosineLR.__init__": [[7, 14], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "lr_min", ",", "lr_max", ",", "step_size", ")", ":", "\n", "        ", "self", ".", "lr_min", "=", "lr_min", "\n", "self", ".", "lr_max", "=", "lr_max", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "iteration", "=", "0", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.CosineLR.get_lr": [[15, 25], ["math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "lr", "=", "self", ".", "lr_min", "+", "0.5", "*", "(", "self", ".", "lr_max", "-", "self", ".", "lr_min", ")", "*", "(", "\n", "1", "+", "cos", "(", "self", ".", "iteration", "/", "self", ".", "step_size", "*", "pi", ")", "\n", ")", "\n", "self", ".", "iteration", "+=", "1", "\n", "\n", "if", "self", ".", "iteration", "==", "self", ".", "step_size", ":", "\n", "            ", "self", ".", "iteration", "=", "0", "\n", "\n", "", "return", "[", "lr", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.PowerLR.__init__": [[28, 35], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "lr_min", ",", "lr_max", ",", "warmup", ")", ":", "\n", "        ", "self", ".", "lr_min", "=", "lr_min", "\n", "self", ".", "lr_max", "=", "lr_max", "\n", "self", ".", "warmup", "=", "warmup", "\n", "self", ".", "iteration", "=", "0", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.PowerLR.get_lr": [[36, 48], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "iteration", "<", "self", ".", "warmup", ":", "\n", "            ", "lr", "=", "(", "\n", "self", ".", "lr_min", "+", "(", "self", ".", "lr_max", "-", "self", ".", "lr_min", ")", "/", "self", ".", "warmup", "*", "self", ".", "iteration", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "lr", "=", "self", ".", "lr_max", "*", "(", "self", ".", "iteration", "-", "self", ".", "warmup", "+", "1", ")", "**", "-", "0.5", "\n", "\n", "", "self", ".", "iteration", "+=", "1", "\n", "\n", "return", "[", "lr", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.SineLR.__init__": [[51, 58], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "lr_min", ",", "lr_max", ",", "step_size", ")", ":", "\n", "        ", "self", ".", "lr_min", "=", "lr_min", "\n", "self", ".", "lr_max", "=", "lr_max", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "iteration", "=", "0", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.SineLR.get_lr": [[59, 69], ["math.sin"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "lr", "=", "self", ".", "lr_min", "+", "(", "self", ".", "lr_max", "-", "self", ".", "lr_min", ")", "*", "sin", "(", "\n", "self", ".", "iteration", "/", "self", ".", "step_size", "*", "pi", "\n", ")", "\n", "self", ".", "iteration", "+=", "1", "\n", "\n", "if", "self", ".", "iteration", "==", "self", ".", "step_size", ":", "\n", "            ", "self", ".", "iteration", "=", "0", "\n", "\n", "", "return", "[", "lr", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.LinearLR.__init__": [[72, 80], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "lr_min", ",", "lr_max", ",", "warmup", ",", "step_size", ")", ":", "\n", "        ", "self", ".", "lr_min", "=", "lr_min", "\n", "self", ".", "lr_max", "=", "lr_max", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "warmup", "=", "warmup", "\n", "self", ".", "iteration", "=", "0", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.LinearLR.get_lr": [[81, 95], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "iteration", "<", "self", ".", "warmup", ":", "\n", "            ", "lr", "=", "self", ".", "lr_max", "\n", "\n", "", "else", ":", "\n", "            ", "lr", "=", "self", ".", "lr_max", "+", "(", "self", ".", "iteration", "-", "self", ".", "warmup", ")", "*", "(", "\n", "self", ".", "lr_min", "-", "self", ".", "lr_max", "\n", ")", "/", "(", "self", ".", "step_size", "-", "self", ".", "warmup", ")", "\n", "", "self", ".", "iteration", "+=", "1", "\n", "\n", "if", "self", ".", "iteration", "==", "self", ".", "step_size", ":", "\n", "            ", "self", ".", "iteration", "=", "0", "\n", "\n", "", "return", "[", "lr", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.CLR.__init__": [[98, 106], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "lr_min", ",", "lr_max", ",", "step_size", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "0", "\n", "self", ".", "lr_min", "=", "lr_min", "\n", "self", ".", "lr_max", "=", "lr_max", "\n", "self", ".", "current_lr", "=", "lr_min", "\n", "self", ".", "step_size", "=", "step_size", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.CLR.get_lr": [[107, 116], ["math.floor", "abs", "max"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "cycle", "=", "floor", "(", "1", "+", "self", ".", "epoch", "/", "(", "2", "*", "self", ".", "step_size", ")", ")", "\n", "x", "=", "abs", "(", "self", ".", "epoch", "/", "self", ".", "step_size", "-", "2", "*", "cycle", "+", "1", ")", "\n", "lr", "=", "self", ".", "lr_min", "+", "(", "self", ".", "lr_max", "-", "self", ".", "lr_min", ")", "*", "max", "(", "0", ",", "1", "-", "x", ")", "\n", "self", ".", "current_lr", "=", "lr", "\n", "\n", "self", ".", "epoch", "+=", "1", "\n", "\n", "return", "[", "lr", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.Warmup.__init__": [[119, 127], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "model_dim", ",", "factor", "=", "1", ",", "warmup", "=", "16000", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "model_dim", "=", "model_dim", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "warmup", "=", "warmup", "\n", "self", ".", "iteration", "=", "0", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.Warmup.get_lr": [[128, 137], ["min"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "self", ".", "iteration", "+=", "1", "\n", "lr", "=", "(", "\n", "self", ".", "factor", "\n", "*", "self", ".", "model_dim", "**", "(", "-", "0.5", ")", "\n", "*", "min", "(", "self", ".", "iteration", "**", "(", "-", "0.5", ")", ",", "self", ".", "iteration", "*", "self", ".", "warmup", "**", "(", "-", "1.5", ")", ")", "\n", ")", "\n", "\n", "return", "[", "lr", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.CycleAnnealScheduler.__init__": [[158, 169], ["int"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "optimizer", ",", "lr_max", ",", "lr_divider", ",", "cut_point", ",", "step_size", ",", "momentum", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "lr_max", "=", "lr_max", "\n", "self", ".", "lr_divider", "=", "lr_divider", "\n", "self", ".", "cut_point", "=", "step_size", "//", "cut_point", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "cycle_step", "=", "int", "(", "step_size", "*", "(", "1", "-", "cut_point", "/", "100", ")", "/", "2", ")", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.CycleAnnealScheduler.get_lr": [[170, 186], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "iteration", ">", "2", "*", "self", ".", "cycle_step", ":", "\n", "            ", "cut", "=", "(", "self", ".", "iteration", "-", "2", "*", "self", ".", "cycle_step", ")", "/", "(", "\n", "self", ".", "step_size", "-", "2", "*", "self", ".", "cycle_step", "\n", ")", "\n", "lr", "=", "self", ".", "lr_max", "*", "(", "1", "+", "(", "cut", "*", "(", "1", "-", "100", ")", "/", "100", ")", ")", "/", "self", ".", "lr_divider", "\n", "\n", "", "elif", "self", ".", "iteration", ">", "self", ".", "cycle_step", ":", "\n", "            ", "cut", "=", "1", "-", "(", "self", ".", "iteration", "-", "self", ".", "cycle_step", ")", "/", "self", ".", "cycle_step", "\n", "lr", "=", "self", ".", "lr_max", "*", "(", "1", "+", "cut", "*", "(", "self", ".", "lr_divider", "-", "1", ")", ")", "/", "self", ".", "lr_divider", "\n", "\n", "", "else", ":", "\n", "            ", "cut", "=", "self", ".", "iteration", "/", "self", ".", "cycle_step", "\n", "lr", "=", "self", ".", "lr_max", "*", "(", "1", "+", "cut", "*", "(", "self", ".", "lr_divider", "-", "1", ")", ")", "/", "self", ".", "lr_divider", "\n", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.CycleAnnealScheduler.get_momentum": [[187, 200], ["None"], "methods", ["None"], ["", "def", "get_momentum", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "iteration", ">", "2", "*", "self", ".", "cycle_step", ":", "\n", "            ", "momentum", "=", "self", ".", "momentum", "[", "0", "]", "\n", "\n", "", "elif", "self", ".", "iteration", ">", "self", ".", "cycle_step", ":", "\n", "            ", "cut", "=", "1", "-", "(", "self", ".", "iteration", "-", "self", ".", "cycle_step", ")", "/", "self", ".", "cycle_step", "\n", "momentum", "=", "self", ".", "momentum", "[", "0", "]", "+", "cut", "*", "(", "self", ".", "momentum", "[", "1", "]", "-", "self", ".", "momentum", "[", "0", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "cut", "=", "self", ".", "iteration", "/", "self", ".", "cycle_step", "\n", "momentum", "=", "self", ".", "momentum", "[", "0", "]", "+", "cut", "*", "(", "self", ".", "momentum", "[", "1", "]", "-", "self", ".", "momentum", "[", "0", "]", ")", "\n", "\n", "", "return", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.CycleAnnealScheduler.step": [[201, 219], ["scheduler.CycleAnnealScheduler.get_lr", "scheduler.CycleAnnealScheduler.get_momentum"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.LRFinder.get_lr", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.CycleAnnealScheduler.get_momentum"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "lr", "=", "self", ".", "get_lr", "(", ")", "\n", "\n", "if", "self", ".", "momentum", "is", "not", "None", ":", "\n", "            ", "momentum", "=", "self", ".", "get_momentum", "(", ")", "\n", "\n", "", "self", ".", "iteration", "+=", "1", "\n", "\n", "if", "self", ".", "iteration", "==", "self", ".", "step_size", ":", "\n", "            ", "self", ".", "iteration", "=", "0", "\n", "\n", "", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "if", "self", ".", "momentum", "is", "not", "None", ":", "\n", "                ", "group", "[", "'betas'", "]", "=", "(", "momentum", ",", "group", "[", "'betas'", "]", "[", "1", "]", ")", "\n", "\n", "", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.Phase.__init__": [[232, 237], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "start", ",", "end", ",", "n_iter", ",", "anneal_fn", ")", ":", "\n", "        ", "self", ".", "start", ",", "self", ".", "end", "=", "start", ",", "end", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "anneal_fn", "=", "anneal_fn", "\n", "self", ".", "n", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.Phase.step": [[238, 242], ["scheduler.Phase.anneal_fn"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "n", "+=", "1", "\n", "\n", "return", "self", ".", "anneal_fn", "(", "self", ".", "start", ",", "self", ".", "end", ",", "self", ".", "n", "/", "self", ".", "n_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.Phase.reset": [[243, 245], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "n", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.Phase.is_done": [[246, 249], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_done", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n", ">=", "self", ".", "n_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.CycleScheduler.__init__": [[252, 288], ["int", "scheduler.Phase", "scheduler.Phase", "scheduler.Phase", "scheduler.Phase"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "lr_max", ",", "\n", "n_iter", ",", "\n", "momentum", "=", "(", "0.95", ",", "0.85", ")", ",", "\n", "divider", "=", "25", ",", "\n", "warmup_proportion", "=", "0.3", ",", "\n", "phase", "=", "(", "'linear'", ",", "'cos'", ")", ",", "\n", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "phase1", "=", "int", "(", "n_iter", "*", "warmup_proportion", ")", "\n", "phase2", "=", "n_iter", "-", "phase1", "\n", "lr_min", "=", "lr_max", "/", "divider", "\n", "\n", "phase_map", "=", "{", "'linear'", ":", "anneal_linear", ",", "'cos'", ":", "anneal_cos", "}", "\n", "\n", "self", ".", "lr_phase", "=", "[", "\n", "Phase", "(", "lr_min", ",", "lr_max", ",", "phase1", ",", "phase_map", "[", "phase", "[", "0", "]", "]", ")", ",", "\n", "Phase", "(", "lr_max", ",", "lr_min", "/", "1e4", ",", "phase2", ",", "phase_map", "[", "phase", "[", "1", "]", "]", ")", ",", "\n", "]", "\n", "\n", "self", ".", "momentum", "=", "momentum", "\n", "\n", "if", "momentum", "is", "not", "None", ":", "\n", "            ", "mom1", ",", "mom2", "=", "momentum", "\n", "self", ".", "momentum_phase", "=", "[", "\n", "Phase", "(", "mom1", ",", "mom2", ",", "phase1", ",", "phase_map", "[", "phase", "[", "0", "]", "]", ")", ",", "\n", "Phase", "(", "mom2", ",", "mom1", ",", "phase2", ",", "phase_map", "[", "phase", "[", "1", "]", "]", ")", ",", "\n", "]", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "momentum_phase", "=", "[", "]", "\n", "\n", "", "self", ".", "phase", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.CycleScheduler.step": [[289, 321], ["scheduler.CycleScheduler.lr_phase[].step", "scheduler.CycleScheduler.momentum_phase[].step", "len", "phase.reset", "phase.reset"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.CycleScheduler.step", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.CycleScheduler.step", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.Phase.reset", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.Phase.reset"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "lr", "=", "self", ".", "lr_phase", "[", "self", ".", "phase", "]", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "momentum", "is", "not", "None", ":", "\n", "            ", "momentum", "=", "self", ".", "momentum_phase", "[", "self", ".", "phase", "]", ".", "step", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "momentum", "=", "None", "\n", "\n", "", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "if", "self", ".", "momentum", "is", "not", "None", ":", "\n", "                ", "if", "'betas'", "in", "group", ":", "\n", "                    ", "group", "[", "'betas'", "]", "=", "(", "momentum", ",", "group", "[", "'betas'", "]", "[", "1", "]", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "group", "[", "'momentum'", "]", "=", "momentum", "\n", "\n", "", "", "", "if", "self", ".", "lr_phase", "[", "self", ".", "phase", "]", ".", "is_done", ":", "\n", "            ", "self", ".", "phase", "+=", "1", "\n", "\n", "", "if", "self", ".", "phase", ">=", "len", "(", "self", ".", "lr_phase", ")", ":", "\n", "            ", "for", "phase", "in", "self", ".", "lr_phase", ":", "\n", "                ", "phase", ".", "reset", "(", ")", "\n", "\n", "", "for", "phase", "in", "self", ".", "momentum_phase", ":", "\n", "                ", "phase", ".", "reset", "(", ")", "\n", "\n", "", "self", ".", "phase", "=", "0", "\n", "\n", "", "return", "lr", ",", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.LRFinder.__init__": [[324, 334], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "lr_min", ",", "lr_max", ",", "step_size", ",", "linear", "=", "False", ")", ":", "\n", "        ", "ratio", "=", "lr_max", "/", "lr_min", "\n", "self", ".", "linear", "=", "linear", "\n", "self", ".", "lr_min", "=", "lr_min", "\n", "self", ".", "lr_mult", "=", "(", "ratio", "/", "step_size", ")", "if", "linear", "else", "ratio", "**", "(", "1", "/", "step_size", ")", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "lrs", "=", "[", "]", "\n", "self", ".", "losses", "=", "[", "]", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.LRFinder.get_lr": [[335, 347], ["scheduler.LRFinder.lrs.append"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "lr", "=", "(", "\n", "self", ".", "lr_mult", "*", "self", ".", "iteration", "\n", "if", "self", ".", "linear", "\n", "else", "self", ".", "lr_mult", "**", "self", ".", "iteration", "\n", ")", "\n", "lr", "=", "self", ".", "lr_min", "+", "lr", "if", "self", ".", "linear", "else", "self", ".", "lr_min", "*", "lr", "\n", "\n", "self", ".", "iteration", "+=", "1", "\n", "self", ".", "lrs", ".", "append", "(", "lr", ")", "\n", "\n", "return", "[", "lr", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.LRFinder.record": [[348, 350], ["scheduler.LRFinder.losses.append"], "methods", ["None"], ["", "def", "record", "(", "self", ",", "loss", ")", ":", "\n", "        ", "self", ".", "losses", ".", "append", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.LRFinder.save": [[351, 355], ["open", "zip", "f.write"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "lr", ",", "loss", "in", "zip", "(", "self", ".", "lrs", ",", "self", ".", "losses", ")", ":", "\n", "                ", "f", ".", "write", "(", "'{},{}\\n'", ".", "format", "(", "lr", ",", "loss", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.anneal_linear": [[221, 223], ["None"], "function", ["None"], ["", "", "def", "anneal_linear", "(", "start", ",", "end", ",", "proportion", ")", ":", "\n", "    ", "return", "start", "+", "proportion", "*", "(", "end", "-", "start", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.anneal_cos": [[225, 229], ["math.cos"], "function", ["None"], ["", "def", "anneal_cos", "(", "start", ",", "end", ",", "proportion", ")", ":", "\n", "    ", "cos_val", "=", "cos", "(", "pi", "*", "proportion", ")", "+", "1", "\n", "\n", "return", "end", "+", "(", "start", "-", "end", ")", "/", "2", "*", "cos_val", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.is_primary": [[12, 14], ["distributed.get_rank"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.get_rank"], ["def", "is_primary", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.get_rank": [[16, 24], ["torch.distributed.get_rank", "torch.distributed.is_available", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.get_local_rank": [[26, 37], ["torch.distributed.get_rank", "torch.distributed.is_available", "torch.distributed.is_initialized", "ValueError"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.get_rank"], ["", "def", "get_local_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "\n", "", "if", "LOCAL_PROCESS_GROUP", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"tensorfn.distributed.LOCAL_PROCESS_GROUP is None\"", ")", "\n", "\n", "", "return", "dist", ".", "get_rank", "(", "group", "=", "LOCAL_PROCESS_GROUP", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.synchronize": [[39, 52], ["torch.distributed.get_world_size", "torch.distributed.barrier", "torch.distributed.is_available", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.get_world_size": [[54, 62], ["torch.distributed.get_world_size", "torch.distributed.is_available", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.get_world_size"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.all_reduce": [[64, 73], ["distributed.get_world_size", "torch.distributed.all_reduce"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.get_world_size", "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.all_reduce"], ["", "def", "all_reduce", "(", "tensor", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "tensor", "\n", "\n", "", "dist", ".", "all_reduce", "(", "tensor", ",", "op", "=", "op", ")", "\n", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.all_gather": [[75, 108], ["distributed.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.IntTensor().to", "torch.distributed.all_gather", "max", "torch.distributed.all_gather", "zip", "torch.IntTensor().to", "int", "tensor_list.append", "torch.ByteTensor().to", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.IntTensor", "range", "size.item", "torch.ByteTensor().to", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.IntTensor", "torch.ByteTensor", "torch.cat.numel", "torch.ByteTensor", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.get_world_size", "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.all_gather", "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.all_gather"], ["", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "local_size", "=", "torch", ".", "IntTensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "IntTensor", "(", "[", "1", "]", ")", ".", "to", "(", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", ")", "\n", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "0", ")", "\n", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.reduce_dict": [[110, 133], ["distributed.get_world_size", "torch.no_grad", "sorted", "torch.stack", "torch.distributed.reduce", "input_dict.keys", "keys.append", "torch.stack.append", "torch.distributed.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.get_world_size", "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.get_rank"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "keys", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "keys", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "0", ")", "\n", "dist", ".", "reduce", "(", "values", ",", "dst", "=", "0", ")", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "average", ":", "\n", "            ", "values", "/=", "world_size", "\n", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "keys", ",", "values", ")", "}", "\n", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.data_sampler": [[135, 144], ["torch.utils.data.distributed.DistributedSampler", "torch.utils.data.RandomSampler", "torch.utils.data.SequentialSampler"], "function", ["None"], ["", "def", "data_sampler", "(", "dataset", ",", "shuffle", ",", "distributed", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "return", "data", ".", "distributed", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "shuffle", ")", "\n", "\n", "", "if", "shuffle", ":", "\n", "        ", "return", "data", ".", "RandomSampler", "(", "dataset", ")", "\n", "\n", "", "else", ":", "\n", "        ", "return", "data", ".", "SequentialSampler", "(", "dataset", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.launch.find_free_port": [[9, 19], ["socket.socket", "socket.socket.bind", "socket.socket.close", "socket.socket.getsockname"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.close"], ["def", "find_free_port", "(", ")", ":", "\n", "    ", "import", "socket", "\n", "\n", "sock", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "\n", "sock", ".", "bind", "(", "(", "\"\"", ",", "0", ")", ")", "\n", "port", "=", "sock", ".", "getsockname", "(", ")", "[", "1", "]", "\n", "sock", ".", "close", "(", ")", "\n", "\n", "return", "port", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.launch.launch": [[21, 49], ["torch.multiprocessing.spawn", "fn", "launch.find_free_port", "dist_url.startswith", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.launch.find_free_port"], ["", "def", "launch", "(", "fn", ",", "n_gpu_per_machine", ",", "n_machine", "=", "1", ",", "machine_rank", "=", "0", ",", "dist_url", "=", "None", ",", "args", "=", "(", ")", ")", ":", "\n", "    ", "world_size", "=", "n_machine", "*", "n_gpu_per_machine", "\n", "\n", "if", "world_size", ">", "1", ":", "\n", "        ", "if", "\"OMP_NUM_THREADS\"", "not", "in", "os", ".", "environ", ":", "\n", "            ", "os", ".", "environ", "[", "\"OMP_NUM_THREADS\"", "]", "=", "\"1\"", "\n", "\n", "", "if", "dist_url", "==", "\"auto\"", ":", "\n", "            ", "if", "n_machine", "!=", "1", ":", "\n", "                ", "raise", "ValueError", "(", "'dist_url=\"auto\" not supported in multi-machine jobs'", ")", "\n", "\n", "", "port", "=", "find_free_port", "(", ")", "\n", "dist_url", "=", "f\"tcp://127.0.0.1:{port}\"", "\n", "\n", "", "if", "n_machine", ">", "1", "and", "dist_url", ".", "startswith", "(", "\"file://\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"file:// is not a reliable init method in multi-machine jobs. Prefer tcp://\"", "\n", ")", "\n", "\n", "", "mp", ".", "spawn", "(", "\n", "distributed_worker", ",", "\n", "nprocs", "=", "n_gpu_per_machine", ",", "\n", "args", "=", "(", "fn", ",", "world_size", ",", "n_gpu_per_machine", ",", "machine_rank", ",", "dist_url", ",", "args", ")", ",", "\n", "daemon", "=", "False", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "fn", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.launch.distributed_worker": [[51, 92], ["models.synchronize", "torch.cuda.set_device", "range", "fn", "torch.cuda.is_available", "OSError", "torch.distributed.init_process_group", "torch.cuda.device_count", "ValueError", "ValueError", "list", "torch.distributed.new_group", "OSError", "range", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.distributed.distributed.synchronize"], ["", "", "def", "distributed_worker", "(", "\n", "local_rank", ",", "fn", ",", "world_size", ",", "n_gpu_per_machine", ",", "machine_rank", ",", "dist_url", ",", "args", "\n", ")", ":", "\n", "    ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "raise", "OSError", "(", "\"CUDA is not available. Please check your environments\"", ")", "\n", "\n", "", "global_rank", "=", "machine_rank", "*", "n_gpu_per_machine", "+", "local_rank", "\n", "\n", "try", ":", "\n", "        ", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "\"NCCL\"", ",", "\n", "init_method", "=", "dist_url", ",", "\n", "world_size", "=", "world_size", ",", "\n", "rank", "=", "global_rank", ",", "\n", ")", "\n", "\n", "", "except", "Exception", ":", "\n", "        ", "raise", "OSError", "(", "\"failed to initialize NCCL groups\"", ")", "\n", "\n", "", "dist_fn", ".", "synchronize", "(", ")", "\n", "\n", "if", "n_gpu_per_machine", ">", "torch", ".", "cuda", ".", "device_count", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"specified n_gpu_per_machine larger than available device ({torch.cuda.device_count()})\"", "\n", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "set_device", "(", "local_rank", ")", "\n", "\n", "if", "dist_fn", ".", "LOCAL_PROCESS_GROUP", "is", "not", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"torch.distributed.LOCAL_PROCESS_GROUP is not None\"", ")", "\n", "\n", "", "n_machine", "=", "world_size", "//", "n_gpu_per_machine", "\n", "\n", "for", "i", "in", "range", "(", "n_machine", ")", ":", "\n", "        ", "ranks_on_i", "=", "list", "(", "range", "(", "i", "*", "n_gpu_per_machine", ",", "(", "i", "+", "1", ")", "*", "n_gpu_per_machine", ")", ")", "\n", "pg", "=", "dist", ".", "new_group", "(", "ranks_on_i", ")", "\n", "\n", "if", "i", "==", "machine_rank", ":", "\n", "            ", "dist_fn", ".", "distributed", ".", "LOCAL_PROCESS_GROUP", "=", "pg", "\n", "\n", "", "", "fn", "(", "*", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.normalization.LinearNoiseLayer.__init__": [[22, 38], ["torch.Module.__init__", "normalization.get_linear_layer", "get_linear_layer.", "get_linear_layer.", "normalization.bn"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.normalization.get_linear_layer"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "noise_sz", "=", "20", ",", "output_sz", "=", "32", ")", ":", "\n", "        ", "\"\"\"\n        Class for adding in noise to the batch normalisation layer.\n        Based on the idea from BigGAN.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "noise_sz", "=", "noise_sz", "\n", "\n", "linear_layer", "=", "get_linear_layer", "(", "opt", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "gain", "=", "linear_layer", "(", "noise_sz", ",", "output_sz", ")", "\n", "self", ".", "bias", "=", "linear_layer", "(", "noise_sz", ",", "output_sz", ")", "\n", "\n", "self", ".", "bn", "=", "bn", "(", "output_sz", ")", "\n", "\n", "self", ".", "noise_sz", "=", "noise_sz", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.normalization.LinearNoiseLayer.forward": [[39, 48], ["torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "normalization.LinearNoiseLayer.bias().view", "normalization.LinearNoiseLayer.bn", "torch.randn().to.size", "torch.randn().to.size", "torch.randn().to.size", "torch.randn().to.size", "torch.randn().to.size", "torch.randn().to.size", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "normalization.LinearNoiseLayer.bias", "x.size", "normalization.LinearNoiseLayer.gain"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "noise", "=", "torch", ".", "randn", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "noise_sz", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "# Predict biases/gains for this layer from the noise", "\n", "gain", "=", "(", "1", "+", "self", ".", "gain", "(", "noise", ")", ")", ".", "view", "(", "noise", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "bias", "=", "self", ".", "bias", "(", "noise", ")", ".", "view", "(", "noise", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "xp", "=", "self", ".", "bn", "(", "x", ",", "gain", "=", "gain", ",", "bias", "=", "bias", ")", "\n", "return", "xp", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.normalization.BatchNorm_StandingStats.__init__": [[96, 108], ["torch.Module.__init__", "normalization.BatchNorm_StandingStats.register_parameter", "normalization.BatchNorm_StandingStats.register_parameter", "normalization.bn", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "# Prepare gain and bias layers", "\n", "self", ".", "register_parameter", "(", "\"gain\"", ",", "Parameter", "(", "torch", ".", "ones", "(", "output_size", ")", ")", ")", "\n", "self", ".", "register_parameter", "(", "\"bias\"", ",", "Parameter", "(", "torch", ".", "zeros", "(", "output_size", ")", ")", ")", "\n", "# epsilon to avoid dividing by 0", "\n", "self", ".", "eps", "=", "eps", "\n", "# Momentum", "\n", "self", ".", "momentum", "=", "momentum", "\n", "\n", "self", ".", "bn", "=", "bn", "(", "output_size", ",", "self", ".", "eps", ",", "self", ".", "momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.normalization.BatchNorm_StandingStats.forward": [[109, 113], ["normalization.BatchNorm_StandingStats.gain.view", "normalization.BatchNorm_StandingStats.bias.view", "normalization.BatchNorm_StandingStats.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "gain", "=", "self", ".", "gain", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "bias", "=", "self", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "return", "self", ".", "bn", "(", "x", ",", "gain", "=", "gain", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.normalization.bn.__init__": [[115, 127], ["torch.Module.__init__", "normalization.bn.register_buffer", "normalization.bn.register_buffer", "normalization.bn.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_channels", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# momentum for updating stats", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "self", ".", "register_buffer", "(", "\"stored_mean\"", ",", "torch", ".", "zeros", "(", "num_channels", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"stored_var\"", ",", "torch", ".", "ones", "(", "num_channels", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"accumulation_counter\"", ",", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "# Accumulate running means and vars", "\n", "self", ".", "accumulate_standing", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.normalization.bn.reset_stats": [[129, 133], ["None"], "methods", ["None"], ["", "def", "reset_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "stored_mean", "[", ":", "]", "=", "0", "\n", "self", ".", "stored_var", "[", ":", "]", "=", "0", "\n", "self", ".", "accumulation_counter", "[", ":", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.normalization.bn.forward": [[134, 163], ["normalization.manual_bn", "normalization.bn.stored_mean.view", "normalization.bn.stored_var.view", "normalization.fused_bn"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.normalization.manual_bn", "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.normalization.fused_bn"], ["", "def", "forward", "(", "self", ",", "x", ",", "gain", ",", "bias", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "out", ",", "mean", ",", "var", "=", "manual_bn", "(", "\n", "x", ",", "gain", ",", "bias", ",", "return_mean_var", "=", "True", ",", "eps", "=", "self", ".", "eps", "\n", ")", "\n", "# If accumulating standing stats, increment them", "\n", "if", "self", ".", "accumulate_standing", ":", "\n", "                ", "self", ".", "stored_mean", "[", ":", "]", "=", "self", ".", "stored_mean", "+", "mean", ".", "data", "\n", "self", ".", "stored_var", "[", ":", "]", "=", "self", ".", "stored_var", "+", "var", ".", "data", "\n", "self", ".", "accumulation_counter", "+=", "1.0", "\n", "# If not accumulating standing stats, take running averages", "\n", "", "else", ":", "\n", "                ", "self", ".", "stored_mean", "[", ":", "]", "=", "(", "\n", "self", ".", "stored_mean", "*", "(", "1", "-", "self", ".", "momentum", ")", "\n", "+", "mean", "*", "self", ".", "momentum", "\n", ")", "\n", "self", ".", "stored_var", "[", ":", "]", "=", "(", "\n", "self", ".", "stored_var", "*", "(", "1", "-", "self", ".", "momentum", ")", "+", "var", "*", "self", ".", "momentum", "\n", ")", "\n", "", "return", "out", "\n", "# If not in training mode, use the stored statistics", "\n", "", "else", ":", "\n", "            ", "mean", "=", "self", ".", "stored_mean", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "var", "=", "self", ".", "stored_var", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "# If using standing stats, divide them by the accumulation counter", "\n", "if", "self", ".", "accumulate_standing", ":", "\n", "                ", "mean", "=", "mean", "/", "self", ".", "accumulation_counter", "\n", "var", "=", "var", "/", "self", ".", "accumulation_counter", "\n", "", "return", "fused_bn", "(", "x", ",", "mean", ",", "var", ",", "gain", ",", "bias", ",", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.normalization.get_linear_layer": [[8, 19], ["torch.utils.spectral_norm", "torch.Linear", "torch.Linear"], "function", ["None"], ["def", "get_linear_layer", "(", "opt", ",", "bias", "=", "False", ")", ":", "\n", "    ", "if", "\"spectral\"", "in", "opt", ".", "norm_G", ":", "\n", "        ", "linear_layer_base", "=", "lambda", "in_c", ",", "out_c", ":", "nn", ".", "utils", ".", "spectral_norm", "(", "\n", "nn", ".", "Linear", "(", "in_c", ",", "out_c", ",", "bias", "=", "bias", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "linear_layer_base", "=", "lambda", "in_c", ",", "out_c", ":", "nn", ".", "Linear", "(", "\n", "in_c", ",", "out_c", ",", "bias", "=", "bias", "\n", ")", "\n", "\n", "", "return", "linear_layer_base", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.normalization.get_D_norm_layer": [[52, 88], ["hasattr", "torch.weight.size", "norm_type.startswith", "torch.Sequential", "getattr", "torch", "getattr", "delattr", "torch.register_parameter", "torch.BatchNorm2d", "len", "normalization.get_D_norm_layer.get_out_channel"], "function", ["None"], ["", "", "def", "get_D_norm_layer", "(", "opt", ",", "norm_type", "=", "\"instance\"", ")", ":", "\n", "# helper function to get # output channels of the previous layer", "\n", "    ", "def", "get_out_channel", "(", "layer", ")", ":", "\n", "        ", "if", "hasattr", "(", "layer", ",", "\"out_channels\"", ")", ":", "\n", "            ", "return", "getattr", "(", "layer", ",", "\"out_channels\"", ")", "\n", "", "return", "layer", ".", "weight", ".", "size", "(", "0", ")", "\n", "\n", "# this function will be returned", "\n", "", "def", "add_norm_layer", "(", "layer", ")", ":", "\n", "        ", "nonlocal", "norm_type", "\n", "if", "norm_type", ".", "startswith", "(", "\"spectral\"", ")", ":", "\n", "            ", "layer", "=", "spectral_norm", "(", "layer", ")", "\n", "subnorm_type", "=", "norm_type", "[", "len", "(", "\"spectral\"", ")", ":", "]", "\n", "\n", "", "if", "subnorm_type", "==", "\"none\"", "or", "len", "(", "subnorm_type", ")", "==", "0", ":", "\n", "            ", "return", "layer", "\n", "\n", "# remove bias in the previous layer, which is meaningless", "\n", "# since it has no effect after normalization", "\n", "", "if", "getattr", "(", "layer", ",", "\"bias\"", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "delattr", "(", "layer", ",", "\"bias\"", ")", "\n", "layer", ".", "register_parameter", "(", "\"bias\"", ",", "None", ")", "\n", "\n", "", "if", "subnorm_type", "==", "\"batch\"", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "(", "get_out_channel", "(", "layer", ")", ",", "affine", "=", "True", ")", "\n", "\n", "", "elif", "subnorm_type", "==", "\"instance\"", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "InstanceNorm2d", "(", "get_out_channel", "(", "layer", ")", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"normalization layer %s is not recognized\"", "%", "subnorm_type", "\n", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "layer", ",", "norm_layer", ")", "\n", "\n", "", "return", "add_norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.normalization.fused_bn": [[166, 179], ["torch.rsqrt", "torch.rsqrt", "torch.rsqrt"], "function", ["None"], ["", "", "", "def", "fused_bn", "(", "x", ",", "mean", ",", "var", ",", "gain", "=", "None", ",", "bias", "=", "None", ",", "eps", "=", "1e-5", ")", ":", "\n", "# Apply scale and shift--if gain and bias are provided, fuse them here", "\n", "# Prepare scale", "\n", "    ", "scale", "=", "torch", ".", "rsqrt", "(", "var", "+", "eps", ")", "\n", "# If a gain is provided, use it", "\n", "if", "gain", "is", "not", "None", ":", "\n", "        ", "scale", "=", "scale", "*", "gain", "\n", "# Prepare shift", "\n", "", "shift", "=", "mean", "*", "scale", "\n", "# If bias is provided, use it", "\n", "if", "bias", "is", "not", "None", ":", "\n", "        ", "shift", "=", "shift", "-", "bias", "\n", "", "return", "x", "*", "scale", "-", "shift", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.normalization.manual_bn": [[183, 201], ["x.float", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "var.type.type", "m.type.type", "x.type", "x.type", "normalization.fused_bn", "normalization.fused_bn", "m.type.squeeze", "var.type.squeeze"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.normalization.fused_bn", "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.normalization.fused_bn"], ["", "def", "manual_bn", "(", "x", ",", "gain", "=", "None", ",", "bias", "=", "None", ",", "return_mean_var", "=", "False", ",", "eps", "=", "1e-5", ")", ":", "\n", "# Cast x to float32 if necessary", "\n", "    ", "float_x", "=", "x", ".", "float", "(", ")", "\n", "# Calculate expected value of x (m) and expected value of x**2 (m2)", "\n", "# Mean of x", "\n", "m", "=", "torch", ".", "mean", "(", "float_x", ",", "[", "0", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "# Mean of x squared", "\n", "m2", "=", "torch", ".", "mean", "(", "float_x", "**", "2", ",", "[", "0", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "# Calculate variance as mean of squared minus mean squared.", "\n", "var", "=", "m2", "-", "m", "**", "2", "\n", "# Cast back to float 16 if necessary", "\n", "var", "=", "var", ".", "type", "(", "x", ".", "type", "(", ")", ")", "\n", "m", "=", "m", ".", "type", "(", "x", ".", "type", "(", ")", ")", "\n", "# Return mean and variance for updating stored mean/var if requested", "\n", "if", "return_mean_var", ":", "\n", "        ", "return", "fused_bn", "(", "x", ",", "m", ",", "var", ",", "gain", ",", "bias", ",", "eps", ")", ",", "m", ".", "squeeze", "(", ")", ",", "var", ".", "squeeze", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "fused_bn", "(", "x", ",", "m", ",", "var", ",", "gain", ",", "bias", ",", "eps", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.z_buffer_layers.RasterizePointsXYsBlending.__init__": [[33, 54], ["torch.nn.Module.__init__", "torch.nn.Parameter", "z_buffer_layers.RasterizePointsXYsBlending.register_parameter", "torch.zeros", "z_buffer_layers.RasterizePointsXYsBlending.register_buffer", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "C", "=", "64", ",", "\n", "learn_feature", "=", "True", ",", "\n", "radius", "=", "1.5", ",", "\n", "size", "=", "256", ",", "\n", "points_per_pixel", "=", "8", ",", "\n", "opts", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "learn_feature", ":", "\n", "            ", "default_feature", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "C", ",", "1", ")", ")", "\n", "self", ".", "register_parameter", "(", "\"default_feature\"", ",", "default_feature", ")", "\n", "", "else", ":", "\n", "            ", "default_feature", "=", "torch", ".", "zeros", "(", "1", ",", "C", ",", "1", ")", "\n", "self", ".", "register_buffer", "(", "\"default_feature\"", ",", "default_feature", ")", "\n", "\n", "", "self", ".", "radius", "=", "radius", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "points_per_pixel", "=", "points_per_pixel", "\n", "self", ".", "opts", "=", "opts", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.z_buffer_layers.RasterizePointsXYsBlending.forward": [[55, 132], ["src.unsqueeze().repeat().view.unsqueeze().repeat().view.size", "pytorch3d.structures.Pointclouds", "pytorch3d.renderer.points.rasterize_points", "points_idx.permute().long", "torch.nn.Conv2d", "torch.ones().cuda", "len", "src.unsqueeze().repeat().view.unsqueeze().repeat().view.size", "pts3D.permute.permute.permute", "src.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze().repeat().view", "src.unsqueeze().repeat().view.unsqueeze().repeat().view.size", "pts3D.permute.permute.size", "pts3D.permute.permute.size", "src.unsqueeze().repeat().view.unsqueeze().repeat().view.size", "print", "pow", "print", "pytorch3d.renderer.compositing.alpha_composite", "src.unsqueeze().repeat().view.unsqueeze().repeat().view.size", "float", "float", "src.unsqueeze().repeat().view.unsqueeze().repeat().view.permute", "dist.max", "pow", "dist.max", "points_idx.permute", "int", "torch.ones", "pts3D.permute.permute.features_packed().permute", "pytorch3d.renderer.compositing.weighted_sum", "src.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze().repeat", "torch.nn.Conv2d.", "pts3D.permute.permute.features_packed().permute", "pytorch3d.renderer.compositing.weighted_sum_norm", "background_mask.view", "pts3D.permute.permute.features_packed", "pts3D.permute.permute.features_packed().permute", "src.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze", "dist.clamp().pow", "pts3D.permute.permute.features_packed", "pts3D.permute.permute.features_packed", "dist.clamp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pts3D", ",", "src", ")", ":", "\n", "        ", "bs", "=", "src", ".", "size", "(", "0", ")", "\n", "if", "len", "(", "src", ".", "size", "(", ")", ")", ">", "3", ":", "\n", "            ", "bs", ",", "c", ",", "w", ",", "_", "=", "src", ".", "size", "(", ")", "\n", "image_size", "=", "w", "\n", "\n", "pts3D", "=", "pts3D", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "src", "=", "src", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "w", ",", "1", ",", "1", ")", ".", "view", "(", "bs", ",", "c", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "bs", "=", "src", ".", "size", "(", "0", ")", "\n", "image_size", "=", "self", ".", "size", "\n", "\n", "# Make sure these have been arranged in the same way", "\n", "", "assert", "pts3D", ".", "size", "(", "2", ")", "==", "3", "\n", "assert", "pts3D", ".", "size", "(", "1", ")", "==", "src", ".", "size", "(", "2", ")", "\n", "\n", "pts3D", "[", ":", ",", ":", ",", "1", "]", "=", "-", "pts3D", "[", ":", ",", ":", ",", "1", "]", "\n", "pts3D", "[", ":", ",", ":", ",", "0", "]", "=", "-", "pts3D", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "# Add on the default feature to the end of the src", "\n", "# src = torch.cat((src, self.default_feature.repeat(bs, 1, 1)), 2)", "\n", "\n", "radius", "=", "float", "(", "self", ".", "radius", ")", "/", "float", "(", "image_size", ")", "*", "2.0", "\n", "#params = compositing.CompositeParams(radius=radius)", "\n", "\n", "\n", "pts3D", "=", "Pointclouds", "(", "points", "=", "pts3D", ",", "features", "=", "src", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "points_idx", ",", "_", ",", "dist", "=", "rasterize_points", "(", "\n", "pts3D", ",", "image_size", ",", "radius", ",", "self", ".", "points_per_pixel", "\n", ")", "\n", "\n", "if", "os", ".", "environ", "[", "\"DEBUG\"", "]", "==", "'TRUE'", ":", "\n", "            ", "print", "(", "\"Max dist: \"", ",", "dist", ".", "max", "(", ")", ",", "pow", "(", "radius", ",", "self", ".", "opts", ".", "rad_pow", ")", ")", "\n", "\n", "", "dist", "=", "dist", "/", "pow", "(", "radius", ",", "self", ".", "opts", ".", "rad_pow", ")", "\n", "\n", "if", "os", ".", "environ", "[", "\"DEBUG\"", "]", "==", "'TRUE'", ":", "\n", "            ", "print", "(", "\"Max dist: \"", ",", "dist", ".", "max", "(", ")", ")", "\n", "\n", "", "alphas", "=", "(", "\n", "(", "1", "-", "dist", ".", "clamp", "(", "max", "=", "1", ",", "min", "=", "1e-3", ")", ".", "pow", "(", "0.5", ")", ")", "\n", ".", "pow", "(", "self", ".", "opts", ".", "tau", ")", "\n", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", ")", "\n", "\n", "permuted_points_idx", "=", "points_idx", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "long", "(", ")", "\n", "background_mask", "=", "(", "permuted_points_idx", "[", ":", ",", "0", "]", "<", "0", ")", ".", "float", "(", ")", "\n", "# we actually consider pixels near background also background", "\n", "# as they tend to be close to gray which is not helpful", "\n", "# for autoregressive", "\n", "ksize", "=", "self", ".", "opts", ".", "background_smoothing_kernel_size", "\n", "max_filter", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "ksize", ",", "stride", "=", "1", ",", "padding", "=", "int", "(", "ksize", "//", "2", ")", ",", "bias", "=", "False", ")", "\n", "max_filter", ".", "weight", ".", "data", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ",", "ksize", ",", "ksize", ")", ")", ".", "cuda", "(", ")", "\n", "max_filter", ".", "weight", ".", "requires_grad", "=", "False", "\n", "(", "b", ",", "h", ",", "w", ")", "=", "background_mask", ".", "shape", "\n", "background_mask", "=", "(", "max_filter", "(", "background_mask", ".", "view", "(", "b", ",", "1", ",", "h", ",", "w", ")", ")", ">", "0", ")", ".", "view", "(", "b", ",", "h", ",", "w", ")", "\n", "\n", "if", "self", ".", "opts", ".", "accumulation", "==", "'alphacomposite'", ":", "\n", "            ", "transformed_src_alphas", "=", "compositing", ".", "alpha_composite", "(", "\n", "permuted_points_idx", ",", "\n", "alphas", ",", "\n", "pts3D", ".", "features_packed", "(", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", ")", "\n", "", "elif", "self", ".", "opts", ".", "accumulation", "==", "'wsum'", ":", "\n", "            ", "transformed_src_alphas", "=", "compositing", ".", "weighted_sum", "(", "\n", "permuted_points_idx", ",", "\n", "alphas", ",", "\n", "pts3D", ".", "features_packed", "(", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", ")", "\n", "", "elif", "self", ".", "opts", ".", "accumulation", "==", "'wsumnorm'", ":", "\n", "            ", "transformed_src_alphas", "=", "compositing", ".", "weighted_sum_norm", "(", "\n", "permuted_points_idx", ",", "\n", "alphas", ",", "\n", "pts3D", ".", "features_packed", "(", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", ")", "\n", "\n", "", "return", "transformed_src_alphas", ",", "background_mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.blocks.Identity.forward": [[28, 30], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.blocks.ResNet_Block.__init__": [[34, 69], ["torch.Module.__init__", "models.layers.normalization.LinearNoiseLayer", "models.layers.normalization.LinearNoiseLayer", "blocks.get_conv_layer", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "torch.Sequential", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.Sequential", "blocks.Identity", "torch.Upsample", "torch.AvgPool2d", "blocks.Identity"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.get_conv_layer"], ["    ", "def", "__init__", "(", "self", ",", "in_c", ",", "in_o", ",", "opt", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "bn_noise1", "=", "LinearNoiseLayer", "(", "opt", ",", "output_sz", "=", "in_c", ")", "\n", "bn_noise2", "=", "LinearNoiseLayer", "(", "opt", ",", "output_sz", "=", "in_o", ")", "\n", "\n", "conv_layer", "=", "get_conv_layer", "(", "opt", ")", "\n", "\n", "conv_aa", "=", "conv_layer", "(", "in_c", ",", "in_o", ",", "3", ",", "1", ",", "1", ")", "\n", "conv_ab", "=", "conv_layer", "(", "in_o", ",", "in_o", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "conv_b", "=", "conv_layer", "(", "in_c", ",", "in_o", ",", "1", ",", "0", ",", "1", ")", "\n", "\n", "if", "downsample", "==", "\"Down\"", ":", "\n", "            ", "norm_downsample", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "", "elif", "downsample", "==", "\"Up\"", ":", "\n", "            ", "norm_downsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ")", "\n", "", "elif", "downsample", ":", "\n", "            ", "norm_downsample", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "norm_downsample", "=", "Identity", "(", ")", "\n", "\n", "", "self", ".", "ch_a", "=", "nn", ".", "Sequential", "(", "\n", "bn_noise1", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "conv_aa", ",", "\n", "bn_noise2", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "conv_ab", ",", "\n", "norm_downsample", ",", "\n", ")", "\n", "\n", "if", "downsample", "or", "(", "in_c", "!=", "in_o", ")", ":", "\n", "            ", "self", ".", "ch_b", "=", "nn", ".", "Sequential", "(", "conv_b", ",", "norm_downsample", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ch_b", "=", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.blocks.ResNet_Block.forward": [[70, 75], ["blocks.ResNet_Block.ch_a", "blocks.ResNet_Block.ch_b"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_a", "=", "self", ".", "ch_a", "(", "x", ")", "\n", "x_b", "=", "self", ".", "ch_b", "(", "x", ")", "\n", "\n", "return", "x_a", "+", "x_b", "", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.blocks.spectral_conv_function": [[7, 10], ["torch.utils.spectral_norm", "torch.Conv2d"], "function", ["None"], ["def", "spectral_conv_function", "(", "in_c", ",", "out_c", ",", "k", ",", "p", ",", "s", ")", ":", "\n", "    ", "return", "nn", ".", "utils", ".", "spectral_norm", "(", "\n", "nn", ".", "Conv2d", "(", "in_c", ",", "out_c", ",", "kernel_size", "=", "k", ",", "padding", "=", "p", ",", "stride", "=", "s", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.blocks.conv_function": [[13, 15], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv_function", "(", "in_c", ",", "out_c", ",", "k", ",", "p", ",", "s", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_c", ",", "out_c", ",", "kernel_size", "=", "k", ",", "padding", "=", "p", ",", "stride", "=", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.blocks.get_conv_layer": [[17, 24], ["None"], "function", ["None"], ["", "def", "get_conv_layer", "(", "opt", ")", ":", "\n", "    ", "if", "\"spectral\"", "in", "opt", ".", "norm_G", ":", "\n", "        ", "conv_layer_base", "=", "spectral_conv_function", "\n", "", "else", ":", "\n", "        ", "conv_layer_base", "=", "conv_function", "\n", "\n", "", "return", "conv_layer_base", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.pretrained_networks.PNet.__init__": [[37, 71], ["torch.Module.__init__", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "pretrained_networks.vgg16", "pretrained_networks.PNet.net.cuda", "pretrained_networks.PNet.shift.cuda", "pretrained_networks.PNet.scale.cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "pretrained_networks.alexnet", "pretrained_networks.resnet", "pretrained_networks.squeezenet", "int"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["def", "__init__", "(", "self", ",", "pnet_type", "=", "\"vgg\"", ",", "pnet_rand", "=", "False", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "PNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "\n", "self", ".", "pnet_type", "=", "pnet_type", "\n", "self", ".", "pnet_rand", "=", "pnet_rand", "\n", "\n", "self", ".", "shift", "=", "torch", ".", "Tensor", "(", "[", "-", "0.030", ",", "-", "0.088", ",", "-", "0.188", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "scale", "=", "torch", ".", "Tensor", "(", "[", "0.458", ",", "0.448", ",", "0.450", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "if", "self", ".", "pnet_type", "in", "[", "\"vgg\"", ",", "\"vgg16\"", "]", ":", "\n", "            ", "self", ".", "net", "=", "vgg16", "(", "pretrained", "=", "not", "self", ".", "pnet_rand", ",", "requires_grad", "=", "False", ")", "\n", "", "elif", "self", ".", "pnet_type", "==", "\"alex\"", ":", "\n", "            ", "self", ".", "net", "=", "alexnet", "(", "\n", "pretrained", "=", "not", "self", ".", "pnet_rand", ",", "requires_grad", "=", "False", "\n", ")", "\n", "", "elif", "self", ".", "pnet_type", "[", ":", "-", "2", "]", "==", "\"resnet\"", ":", "\n", "            ", "self", ".", "net", "=", "resnet", "(", "\n", "pretrained", "=", "not", "self", ".", "pnet_rand", ",", "\n", "requires_grad", "=", "False", ",", "\n", "num", "=", "int", "(", "self", ".", "pnet_type", "[", "-", "2", ":", "]", ")", ",", "\n", ")", "\n", "", "elif", "self", ".", "pnet_type", "==", "\"squeeze\"", ":", "\n", "            ", "self", ".", "net", "=", "squeezenet", "(", "\n", "pretrained", "=", "not", "self", ".", "pnet_rand", ",", "requires_grad", "=", "False", "\n", ")", "\n", "\n", "", "self", ".", "L", "=", "self", ".", "net", ".", "N_slices", "\n", "\n", "if", "use_gpu", ":", "\n", "            ", "self", ".", "net", ".", "cuda", "(", ")", "\n", "self", ".", "shift", "=", "self", ".", "shift", ".", "cuda", "(", ")", "\n", "self", ".", "scale", "=", "self", ".", "scale", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.pretrained_networks.PNet.forward": [[72, 94], ["pretrained_networks.PNet.net.forward", "pretrained_networks.PNet.net.forward", "enumerate", "pretrained_networks.PNet.scale.expand_as", "pretrained_networks.PNet.scale.expand_as", "pretrained_networks.PNet.shift.expand_as", "pretrained_networks.PNet.shift.expand_as", "pretrained_networks.cos_sim"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.ssim.SSIM.forward", "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.ssim.SSIM.forward", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.pretrained_networks.cos_sim"], ["", "", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "False", ")", ":", "\n", "        ", "in0_sc", "=", "(", "in0", "-", "self", ".", "shift", ".", "expand_as", "(", "in0", ")", ")", "/", "self", ".", "scale", ".", "expand_as", "(", "in0", ")", "\n", "in1_sc", "=", "(", "in1", "-", "self", ".", "shift", ".", "expand_as", "(", "in0", ")", ")", "/", "self", ".", "scale", ".", "expand_as", "(", "in0", ")", "\n", "\n", "outs0", "=", "self", ".", "net", ".", "forward", "(", "in0_sc", ")", "\n", "outs1", "=", "self", ".", "net", ".", "forward", "(", "in1_sc", ")", "\n", "\n", "if", "retPerLayer", ":", "\n", "            ", "all_scores", "=", "[", "]", "\n", "", "for", "(", "kk", ",", "out0", ")", "in", "enumerate", "(", "outs0", ")", ":", "\n", "            ", "cur_score", "=", "1.0", "-", "cos_sim", "(", "outs0", "[", "kk", "]", ",", "outs1", "[", "kk", "]", ")", "\n", "if", "kk", "==", "0", ":", "\n", "                ", "val", "=", "1.0", "*", "cur_score", "\n", "", "else", ":", "\n", "                ", "val", "=", "val", "+", "cur_score", "\n", "", "if", "retPerLayer", ":", "\n", "                ", "all_scores", "+=", "[", "cur_score", "]", "\n", "\n", "", "", "if", "retPerLayer", ":", "\n", "            ", "return", "(", "val", ",", "all_scores", ")", "\n", "", "else", ":", "\n", "            ", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.pretrained_networks.squeezenet.__init__": [[97, 127], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "range", "range", "torchvision.models.squeezenet1_1", "pretrained_networks.squeezenet.slice1.add_module", "pretrained_networks.squeezenet.slice2.add_module", "pretrained_networks.squeezenet.slice3.add_module", "pretrained_networks.squeezenet.slice4.add_module", "pretrained_networks.squeezenet.slice5.add_module", "pretrained_networks.squeezenet.slice6.add_module", "pretrained_networks.squeezenet.slice7.add_module", "pretrained_networks.squeezenet.parameters", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "squeezenet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pretrained_features", "=", "models", ".", "squeezenet1_1", "(", "\n", "pretrained", "=", "pretrained", "\n", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice6", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice7", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "7", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "11", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "11", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice6", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "13", ")", ":", "\n", "            ", "self", ".", "slice7", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.pretrained_networks.squeezenet.forward": [[128, 152], ["pretrained_networks.squeezenet.slice1", "pretrained_networks.squeezenet.slice2", "pretrained_networks.squeezenet.slice3", "pretrained_networks.squeezenet.slice4", "pretrained_networks.squeezenet.slice5", "pretrained_networks.squeezenet.slice6", "pretrained_networks.squeezenet.slice7", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "h", "=", "self", ".", "slice6", "(", "h", ")", "\n", "h_relu6", "=", "h", "\n", "h", "=", "self", ".", "slice7", "(", "h", ")", "\n", "h_relu7", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\n", "\"SqueezeOutputs\"", ",", "\n", "[", "\"relu1\"", ",", "\"relu2\"", ",", "\"relu3\"", ",", "\"relu4\"", ",", "\"relu5\"", ",", "\"relu6\"", ",", "\"relu7\"", "]", ",", "\n", ")", "\n", "out", "=", "vgg_outputs", "(", "\n", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ",", "h_relu6", ",", "h_relu7", "\n", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.pretrained_networks.alexnet.__init__": [[155, 179], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.alexnet", "pretrained_networks.alexnet.slice1.add_module", "pretrained_networks.alexnet.slice2.add_module", "pretrained_networks.alexnet.slice3.add_module", "pretrained_networks.alexnet.slice4.add_module", "pretrained_networks.alexnet.slice5.add_module", "pretrained_networks.alexnet.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "alexnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "alexnet_pretrained_features", "=", "models", ".", "alexnet", "(", "\n", "pretrained", "=", "pretrained", "\n", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.pretrained_networks.alexnet.forward": [[180, 197], ["pretrained_networks.alexnet.slice1", "pretrained_networks.alexnet.slice2", "pretrained_networks.alexnet.slice3", "pretrained_networks.alexnet.slice4", "pretrained_networks.alexnet.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "alexnet_outputs", "=", "namedtuple", "(", "\n", "\"AlexnetOutputs\"", ",", "[", "\"relu1\"", ",", "\"relu2\"", ",", "\"relu3\"", ",", "\"relu4\"", ",", "\"relu5\"", "]", "\n", ")", "\n", "out", "=", "alexnet_outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.pretrained_networks.vgg16.__init__": [[200, 222], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg16", "pretrained_networks.vgg16.slice1.add_module", "pretrained_networks.vgg16.slice2.add_module", "pretrained_networks.vgg16.slice3.add_module", "pretrained_networks.vgg16.slice4.add_module", "pretrained_networks.vgg16.slice5.add_module", "pretrained_networks.vgg16.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "vgg16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "models", ".", "vgg16", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "4", ",", "9", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "9", ",", "16", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "16", ",", "23", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "23", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.pretrained_networks.vgg16.forward": [[223, 241], ["pretrained_networks.vgg16.slice1", "pretrained_networks.vgg16.slice2", "pretrained_networks.vgg16.slice3", "pretrained_networks.vgg16.slice4", "pretrained_networks.vgg16.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1_2", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2_2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3_3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4_3", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5_3", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\n", "\"VggOutputs\"", ",", "\n", "[", "\"relu1_2\"", ",", "\"relu2_2\"", ",", "\"relu3_3\"", ",", "\"relu4_3\"", ",", "\"relu5_3\"", "]", ",", "\n", ")", "\n", "out", "=", "vgg_outputs", "(", "h_relu1_2", ",", "h_relu2_2", ",", "h_relu3_3", ",", "h_relu4_3", ",", "h_relu5_3", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.pretrained_networks.resnet.__init__": [[244, 266], ["super().__init__", "torchvision.models.resnet18", "torchvision.models.resnet34", "torchvision.models.resnet50", "torchvision.models.resnet101", "torchvision.models.resnet152"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ",", "num", "=", "18", ")", ":", "\n", "        ", "super", "(", "resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "num", "==", "18", ":", "\n", "            ", "self", ".", "net", "=", "models", ".", "resnet18", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "num", "==", "34", ":", "\n", "            ", "self", ".", "net", "=", "models", ".", "resnet34", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "num", "==", "50", ":", "\n", "            ", "self", ".", "net", "=", "models", ".", "resnet50", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "num", "==", "101", ":", "\n", "            ", "self", ".", "net", "=", "models", ".", "resnet101", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "num", "==", "152", ":", "\n", "            ", "self", ".", "net", "=", "models", ".", "resnet152", "(", "pretrained", "=", "pretrained", ")", "\n", "", "self", ".", "N_slices", "=", "5", "\n", "\n", "self", ".", "conv1", "=", "self", ".", "net", ".", "conv1", "\n", "self", ".", "bn1", "=", "self", ".", "net", ".", "bn1", "\n", "self", ".", "relu", "=", "self", ".", "net", ".", "relu", "\n", "self", ".", "maxpool", "=", "self", ".", "net", ".", "maxpool", "\n", "self", ".", "layer1", "=", "self", ".", "net", ".", "layer1", "\n", "self", ".", "layer2", "=", "self", ".", "net", ".", "layer2", "\n", "self", ".", "layer3", "=", "self", ".", "net", ".", "layer3", "\n", "self", ".", "layer4", "=", "self", ".", "net", ".", "layer4", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.pretrained_networks.resnet.forward": [[267, 288], ["pretrained_networks.resnet.conv1", "pretrained_networks.resnet.bn1", "pretrained_networks.resnet.relu", "pretrained_networks.resnet.maxpool", "pretrained_networks.resnet.layer1", "pretrained_networks.resnet.layer2", "pretrained_networks.resnet.layer3", "pretrained_networks.resnet.layer4", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "conv1", "(", "X", ")", "\n", "h", "=", "self", ".", "bn1", "(", "h", ")", "\n", "h", "=", "self", ".", "relu", "(", "h", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "maxpool", "(", "h", ")", "\n", "h", "=", "self", ".", "layer1", "(", "h", ")", "\n", "h_conv2", "=", "h", "\n", "h", "=", "self", ".", "layer2", "(", "h", ")", "\n", "h_conv3", "=", "h", "\n", "h", "=", "self", ".", "layer3", "(", "h", ")", "\n", "h_conv4", "=", "h", "\n", "h", "=", "self", ".", "layer4", "(", "h", ")", "\n", "h_conv5", "=", "h", "\n", "\n", "outputs", "=", "namedtuple", "(", "\n", "\"Outputs\"", ",", "[", "\"relu1\"", ",", "\"conv2\"", ",", "\"conv3\"", ",", "\"conv4\"", ",", "\"conv5\"", "]", "\n", ")", "\n", "out", "=", "outputs", "(", "h_relu1", ",", "h_conv2", ",", "h_conv3", ",", "h_conv4", ",", "h_conv5", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.pretrained_networks.normalize_tensor": [[11, 16], ["torch.sqrt().view", "torch.sqrt().view", "torch.sqrt", "torch.sqrt", "in_feat.size", "in_feat.size", "in_feat.size", "torch.sqrt().view.expand_as", "torch.sum", "torch.sum"], "function", ["None"], ["def", "normalize_tensor", "(", "in_feat", ",", "eps", "=", "1e-10", ")", ":", "\n", "    ", "norm_factor", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "in_feat", "**", "2", ",", "dim", "=", "1", ")", ")", ".", "view", "(", "\n", "in_feat", ".", "size", "(", ")", "[", "0", "]", ",", "1", ",", "in_feat", ".", "size", "(", ")", "[", "2", "]", ",", "in_feat", ".", "size", "(", ")", "[", "3", "]", "\n", ")", "\n", "return", "in_feat", "/", "(", "norm_factor", ".", "expand_as", "(", "in_feat", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.pretrained_networks.cos_sim": [[18, 31], ["pretrained_networks.normalize_tensor", "pretrained_networks.normalize_tensor", "torch.mean().view", "torch.mean().view", "in0.size", "in0.size", "in0.size", "torch.mean", "torch.mean", "torch.mean().view", "torch.mean().view", "torch.mean", "torch.mean", "torch.sum().view", "torch.sum().view", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.pretrained_networks.normalize_tensor", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.pretrained_networks.normalize_tensor"], ["", "def", "cos_sim", "(", "in0", ",", "in1", ")", ":", "\n", "    ", "in0_norm", "=", "normalize_tensor", "(", "in0", ")", "\n", "in1_norm", "=", "normalize_tensor", "(", "in1", ")", "\n", "N", "=", "in0", ".", "size", "(", ")", "[", "0", "]", "\n", "X", "=", "in0", ".", "size", "(", ")", "[", "2", "]", "\n", "Y", "=", "in0", ".", "size", "(", ")", "[", "3", "]", "\n", "\n", "return", "torch", ".", "mean", "(", "\n", "torch", ".", "mean", "(", "\n", "torch", ".", "sum", "(", "in0_norm", "*", "in1_norm", ",", "dim", "=", "1", ")", ".", "view", "(", "N", ",", "1", ",", "X", ",", "Y", ")", ",", "dim", "=", "2", "\n", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "Y", ")", ",", "\n", "dim", "=", "3", ",", "\n", ")", ".", "view", "(", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.utilities.get_encoder": [[14, 24], ["models.networks.architectures.UNetEncoder64", "print", "models.networks.architectures.ResNetEncoder"], "function", ["None"], ["def", "get_encoder", "(", "opt", ",", "downsample", "=", "True", ")", ":", "\n", "    ", "if", "opt", ".", "refine_model_type", "==", "\"unet\"", ":", "\n", "        ", "encoder", "=", "UNetEncoder64", "(", "opt", ",", "channels_in", "=", "3", ",", "channels_out", "=", "64", ")", "\n", "", "elif", "\"resnet\"", "in", "opt", ".", "refine_model_type", ":", "\n", "        ", "print", "(", "\"RESNET encoder\"", ")", "\n", "encoder", "=", "ResNetEncoder", "(", "\n", "opt", ",", "channels_in", "=", "3", ",", "channels_out", "=", "64", ",", "downsample", "=", "downsample", "\n", ")", "\n", "\n", "", "return", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.utilities.get_decoder": [[26, 37], ["models.networks.architectures.UNetDecoder64", "print", "models.networks.architectures.ResNetDecoder"], "function", ["None"], ["", "def", "get_decoder", "(", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "refine_model_type", "==", "\"unet\"", ":", "\n", "        ", "decoder", "=", "UNetDecoder64", "(", "opt", ",", "channels_in", "=", "64", ",", "channels_out", "=", "3", ")", "\n", "", "elif", "\"resnet\"", "in", "opt", ".", "refine_model_type", ":", "\n", "        ", "print", "(", "\"RESNET decoder\"", ")", "\n", "channels_in", "=", "3", "\n", "if", "not", "\"no_outpainting\"", "in", "opt", "or", "not", "opt", ".", "no_outpainting", ":", "\n", "            ", "channels_in", "+=", "1", "\n", "", "decoder", "=", "ResNetDecoder", "(", "opt", ",", "channels_in", "=", "channels_in", ",", "channels_out", "=", "3", ")", "\n", "\n", "", "return", "decoder", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.VGG19.__init__": [[53, 76], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg19", "architectures.VGG19.slice1.add_module", "architectures.VGG19.slice2.add_module", "architectures.VGG19.slice3.add_module", "architectures.VGG19.slice4.add_module", "architectures.VGG19.slice5.add_module", "architectures.VGG19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "torchvision", ".", "models", ".", "vgg19", "(", "\n", "pretrained", "=", "True", "\n", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.VGG19.forward": [[77, 86], ["architectures.VGG19.slice1", "architectures.VGG19.slice2", "architectures.VGG19.slice3", "architectures.VGG19.slice4", "architectures.VGG19.slice5"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "# Normalize the image so that it is in the appropriate range", "\n", "        ", "h_relu1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu2", "=", "self", ".", "slice2", "(", "h_relu1", ")", "\n", "h_relu3", "=", "self", ".", "slice3", "(", "h_relu2", ")", "\n", "h_relu4", "=", "self", ".", "slice4", "(", "h_relu3", ")", "\n", "h_relu5", "=", "self", ".", "slice5", "(", "h_relu4", ")", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.ResNetEncoder.__init__": [[95, 121], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.networks.configs.get_resnet_arch", "models.networks.configs.get_resnet_arch", "len", "models.layers.blocks.ResNet_Block"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.configs.get_resnet_arch", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.configs.get_resnet_arch"], ["def", "__init__", "(", "\n", "self", ",", "\n", "opt", ",", "\n", "channels_in", "=", "3", ",", "\n", "channels_out", "=", "64", ",", "\n", "downsample", "=", "True", ",", "\n", "model_type", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "model_type", ":", "\n", "            ", "arch", "=", "get_resnet_arch", "(", "opt", ".", "refine_model_type", ",", "opt", ",", "channels_in", ")", "\n", "", "else", ":", "\n", "            ", "arch", "=", "get_resnet_arch", "(", "model_type", ",", "opt", ",", "channels_in", ")", "\n", "\n", "", "gblocks", "=", "[", "]", "\n", "for", "l_id", "in", "range", "(", "1", ",", "len", "(", "arch", "[", "\"layers_enc\"", "]", ")", ")", ":", "\n", "            ", "gblock", "=", "ResNet_Block", "(", "\n", "arch", "[", "\"layers_enc\"", "]", "[", "l_id", "-", "1", "]", ",", "\n", "arch", "[", "\"layers_enc\"", "]", "[", "l_id", "]", ",", "\n", "opt", ",", "\n", "(", "downsample", "and", "arch", "[", "\"downsample\"", "]", "[", "l_id", "-", "1", "]", ")", ",", "\n", ")", "\n", "gblocks", "+=", "[", "gblock", "]", "\n", "\n", "", "self", ".", "gblocks", "=", "nn", ".", "Sequential", "(", "*", "gblocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.ResNetEncoder.forward": [[122, 124], ["architectures.ResNetEncoder.gblocks"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "gblocks", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.ResNetDecoder.__init__": [[129, 150], ["torch.Module.__init__", "models.networks.configs.get_resnet_arch", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "models.layers.blocks.ResNet_Block", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.configs.get_resnet_arch"], ["def", "__init__", "(", "self", ",", "opt", ",", "channels_in", "=", "64", ",", "channels_out", "=", "3", ",", "use_tanh", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "arch", "=", "get_resnet_arch", "(", "opt", ".", "refine_model_type", ",", "opt", ",", "channels_in", ")", "\n", "\n", "eblocks", "=", "[", "]", "\n", "for", "l_id", "in", "range", "(", "1", ",", "len", "(", "arch", "[", "\"layers_dec\"", "]", ")", ")", ":", "\n", "            ", "eblock", "=", "ResNet_Block", "(", "\n", "arch", "[", "\"layers_dec\"", "]", "[", "l_id", "-", "1", "]", ",", "\n", "arch", "[", "\"layers_dec\"", "]", "[", "l_id", "]", ",", "\n", "opt", ",", "\n", "arch", "[", "\"upsample\"", "]", "[", "l_id", "-", "1", "]", ",", "\n", ")", "\n", "eblocks", "+=", "[", "eblock", "]", "\n", "\n", "", "self", ".", "eblocks", "=", "nn", ".", "Sequential", "(", "*", "eblocks", ")", "\n", "\n", "if", "use_tanh", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.ResNetDecoder.forward": [[151, 168], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.ResNetDecoder.norm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.ResNetDecoder.norm", "architectures.ResNetDecoder.norm", "architectures.ResNetDecoder.norm", "architectures.ResNetDecoder.eblocks", "architectures.ResNetDecoder.eblocks", "architectures.ResNetDecoder.norm", "architectures.ResNetDecoder.eblocks", "architectures.ResNetDecoder.eblocks", "architectures.ResNetDecoder.eblocks"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "background_mask", "=", "None", ")", ":", "\n", "        ", "if", "\"predict_residual\"", "in", "self", ".", "opt", "and", "self", ".", "opt", ".", "predict_residual", ":", "\n", "            ", "if", "background_mask", "is", "not", "None", ":", "\n", "                ", "x_in", "=", "torch", ".", "cat", "(", "(", "x", ",", "(", "~", "background_mask", ")", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", ")", ",", "1", ")", "\n", "\n", "if", "self", ".", "opt", ".", "normalize_before_residual", ":", "\n", "                    ", "return", "self", ".", "norm", "(", "self", ".", "eblocks", "(", "x_in", ")", ")", "+", "x", "\n", "", "else", ":", "\n", "                    ", "return", "self", ".", "norm", "(", "self", ".", "eblocks", "(", "x_in", ")", "+", "x", ")", "\n", "", "", "else", ":", "\n", "                ", "return", "self", ".", "norm", "(", "self", ".", "eblocks", "(", "x", ")", "+", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "background_mask", "is", "not", "None", ":", "\n", "                ", "x_in", "=", "torch", ".", "cat", "(", "(", "x", ",", "(", "~", "background_mask", ")", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", ")", ",", "1", ")", "\n", "return", "self", ".", "norm", "(", "self", ".", "eblocks", "(", "x_in", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "norm", "(", "self", ".", "eblocks", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.Unet.__init__": [[178, 229], ["torch.Module.__init__", "architectures.get_conv_layer", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "torch.Upsample", "torch.Upsample", "torch.Upsample", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "architectures.get_batchnorm_layer", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.get_conv_layer", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.get_batchnorm_layer"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_filters", "=", "32", ",", "\n", "channels_in", "=", "3", ",", "\n", "channels_out", "=", "3", ",", "\n", "use_tanh", "=", "False", ",", "\n", "use_3D", "=", "False", ",", "\n", "opt", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Unet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "conv_layer", "=", "get_conv_layer", "(", "opt", ",", "use_3D", "=", "use_3D", ")", "\n", "\n", "self", ".", "conv1", "=", "conv_layer", "(", "channels_in", ",", "num_filters", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv2", "=", "conv_layer", "(", "num_filters", ",", "num_filters", "*", "2", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv3", "=", "conv_layer", "(", "num_filters", "*", "2", ",", "num_filters", "*", "4", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv4", "=", "conv_layer", "(", "num_filters", "*", "4", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv5", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv6", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv7", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv8", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ")", "\n", "\n", "self", ".", "dconv1", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv2", "=", "conv_layer", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv3", "=", "conv_layer", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv4", "=", "conv_layer", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv5", "=", "conv_layer", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "4", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv6", "=", "conv_layer", "(", "num_filters", "*", "4", "*", "2", ",", "num_filters", "*", "2", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv7", "=", "conv_layer", "(", "num_filters", "*", "2", "*", "2", ",", "num_filters", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv8", "=", "conv_layer", "(", "num_filters", "*", "2", ",", "channels_out", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "norm_layer", "=", "get_batchnorm_layer", "(", "opt", ")", "\n", "\n", "self", ".", "batch_norm", "=", "norm_layer", "(", "num_filters", ")", "\n", "self", ".", "batch_norm2_0", "=", "norm_layer", "(", "num_filters", "*", "2", ")", "\n", "self", ".", "batch_norm2_1", "=", "norm_layer", "(", "num_filters", "*", "2", ")", "\n", "self", ".", "batch_norm4_0", "=", "norm_layer", "(", "num_filters", "*", "4", ")", "\n", "self", ".", "batch_norm4_1", "=", "norm_layer", "(", "num_filters", "*", "4", ")", "\n", "self", ".", "batch_norm8_0", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_1", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_2", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_3", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_4", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_5", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_6", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_7", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.Unet.forward": [[230, 280], ["architectures.Unet.conv1", "architectures.Unet.batch_norm2_0", "architectures.Unet.batch_norm4_0", "architectures.Unet.batch_norm8_0", "architectures.Unet.batch_norm8_1", "architectures.Unet.batch_norm8_2", "architectures.Unet.batch_norm8_3", "architectures.Unet.conv8", "architectures.Unet.batch_norm8_4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.Unet.batch_norm8_5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.Unet.batch_norm8_6", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.Unet.batch_norm8_7", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.Unet.batch_norm4_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.Unet.batch_norm2_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.Unet.batch_norm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.Unet.dconv8", "architectures.Unet.conv2", "architectures.Unet.conv3", "architectures.Unet.conv4", "architectures.Unet.conv5", "architectures.Unet.conv6", "architectures.Unet.conv7", "architectures.Unet.leaky_relu", "architectures.Unet.dconv1", "architectures.Unet.dconv2", "architectures.Unet.dconv3", "architectures.Unet.dconv4", "architectures.Unet.dconv5", "architectures.Unet.dconv6", "architectures.Unet.dconv7", "architectures.Unet.up", "architectures.Unet.leaky_relu", "architectures.Unet.leaky_relu", "architectures.Unet.leaky_relu", "architectures.Unet.leaky_relu", "architectures.Unet.leaky_relu", "architectures.Unet.leaky_relu", "architectures.Unet.up", "architectures.Unet.up", "architectures.Unet.up", "architectures.Unet.up", "architectures.Unet.up", "architectures.Unet.up", "architectures.Unet.up", "architectures.Unet.relu", "architectures.Unet.relu", "architectures.Unet.relu", "architectures.Unet.relu", "architectures.Unet.relu", "architectures.Unet.relu", "architectures.Unet.relu", "architectures.Unet.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Encoder", "\n", "# Convolution layers:", "\n", "# input is (nc) x 256 x 256", "\n", "        ", "e1", "=", "self", ".", "conv1", "(", "input", ")", "\n", "# state size is (num_filters) x 128 x 128", "\n", "e2", "=", "self", ".", "batch_norm2_0", "(", "self", ".", "conv2", "(", "self", ".", "leaky_relu", "(", "e1", ")", ")", ")", "\n", "# state size is (num_filters x 2) x 64 x 64", "\n", "e3", "=", "self", ".", "batch_norm4_0", "(", "self", ".", "conv3", "(", "self", ".", "leaky_relu", "(", "e2", ")", ")", ")", "\n", "# state size is (num_filters x 4) x 32 x 32", "\n", "e4", "=", "self", ".", "batch_norm8_0", "(", "self", ".", "conv4", "(", "self", ".", "leaky_relu", "(", "e3", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 16 x 16", "\n", "e5", "=", "self", ".", "batch_norm8_1", "(", "self", ".", "conv5", "(", "self", ".", "leaky_relu", "(", "e4", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 8 x 8", "\n", "e6", "=", "self", ".", "batch_norm8_2", "(", "self", ".", "conv6", "(", "self", ".", "leaky_relu", "(", "e5", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 4 x 4", "\n", "e7", "=", "self", ".", "batch_norm8_3", "(", "self", ".", "conv7", "(", "self", ".", "leaky_relu", "(", "e6", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 2 x 2", "\n", "# No batch norm on output of Encoder", "\n", "e8", "=", "self", ".", "conv8", "(", "self", ".", "leaky_relu", "(", "e7", ")", ")", "\n", "\n", "# Decoder", "\n", "# Deconvolution layers:", "\n", "# state size is (num_filters x 8) x 1 x 1", "\n", "d1_", "=", "self", ".", "batch_norm8_4", "(", "self", ".", "dconv1", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "e8", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 2 x 2", "\n", "d1", "=", "torch", ".", "cat", "(", "(", "d1_", ",", "e7", ")", ",", "1", ")", "\n", "d2_", "=", "self", ".", "batch_norm8_5", "(", "self", ".", "dconv2", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d1", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 4 x 4", "\n", "d2", "=", "torch", ".", "cat", "(", "(", "d2_", ",", "e6", ")", ",", "1", ")", "\n", "d3_", "=", "self", ".", "batch_norm8_6", "(", "self", ".", "dconv3", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d2", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 8 x 8", "\n", "d3", "=", "torch", ".", "cat", "(", "(", "d3_", ",", "e5", ")", ",", "1", ")", "\n", "d4_", "=", "self", ".", "batch_norm8_7", "(", "self", ".", "dconv4", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d3", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 16 x 16", "\n", "d4", "=", "torch", ".", "cat", "(", "(", "d4_", ",", "e4", ")", ",", "1", ")", "\n", "d5_", "=", "self", ".", "batch_norm4_1", "(", "self", ".", "dconv5", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d4", ")", ")", ")", ")", "\n", "# state size is (num_filters x 4) x 32 x 32", "\n", "d5", "=", "torch", ".", "cat", "(", "(", "d5_", ",", "e3", ")", ",", "1", ")", "\n", "d6_", "=", "self", ".", "batch_norm2_1", "(", "self", ".", "dconv6", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d5", ")", ")", ")", ")", "\n", "# state size is (num_filters x 2) x 64 x 64", "\n", "d6", "=", "torch", ".", "cat", "(", "(", "d6_", ",", "e2", ")", ",", "1", ")", "\n", "d7_", "=", "self", ".", "batch_norm", "(", "self", ".", "dconv7", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d6", ")", ")", ")", ")", "\n", "# state size is (num_filters) x 128 x 128", "\n", "# d7_ = torch.Tensor(e1.data.new(e1.size()).normal_(0, 0.5))", "\n", "d7", "=", "torch", ".", "cat", "(", "(", "d7_", ",", "e1", ")", ",", "1", ")", "\n", "d8", "=", "self", ".", "dconv8", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d7", ")", ")", ")", "\n", "# state size is (nc) x 256 x 256", "\n", "# output = self.tanh(d8)", "\n", "return", "d8", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.UNetEncoder.__init__": [[286, 324], ["torch.Module.__init__", "architectures.get_conv_layer", "architectures.get_batchnorm_layer", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "torch.Upsample", "torch.Upsample", "torch.Upsample", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.get_conv_layer", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.get_batchnorm_layer"], ["def", "__init__", "(", "self", ",", "opt", ",", "num_filters", "=", "32", ",", "channels_in", "=", "3", ",", "channels_out", "=", "3", ")", ":", "\n", "        ", "super", "(", "UNetEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "conv_layer", "=", "get_conv_layer", "(", "opt", ",", "use_3D", "=", "False", ")", "\n", "norm_layer", "=", "get_batchnorm_layer", "(", "opt", ")", "\n", "\n", "self", ".", "conv1", "=", "conv_layer", "(", "channels_in", ",", "num_filters", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv2", "=", "conv_layer", "(", "num_filters", ",", "num_filters", "*", "2", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv3", "=", "conv_layer", "(", "num_filters", "*", "2", ",", "num_filters", "*", "4", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv4", "=", "conv_layer", "(", "num_filters", "*", "4", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv5", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv6", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv7", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv8", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ")", "\n", "\n", "self", ".", "dconv1", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv2", "=", "conv_layer", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv3", "=", "conv_layer", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv4", "=", "conv_layer", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv5", "=", "conv_layer", "(", "num_filters", "*", "8", "*", "2", ",", "channels_out", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "batch_norm", "=", "norm_layer", "(", "num_filters", ")", "\n", "self", ".", "batch_norm2_0", "=", "norm_layer", "(", "num_filters", "*", "2", ")", "\n", "self", ".", "batch_norm4_0", "=", "norm_layer", "(", "num_filters", "*", "4", ")", "\n", "self", ".", "batch_norm4_1", "=", "norm_layer", "(", "num_filters", "*", "4", ")", "\n", "self", ".", "batch_norm8_0", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_1", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_2", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_3", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_4", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_5", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_6", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_7", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.UNetEncoder.forward": [[325, 364], ["architectures.UNetEncoder.conv1", "architectures.UNetEncoder.batch_norm2_0", "architectures.UNetEncoder.batch_norm4_0", "architectures.UNetEncoder.batch_norm8_0", "architectures.UNetEncoder.batch_norm8_1", "architectures.UNetEncoder.batch_norm8_2", "architectures.UNetEncoder.batch_norm8_3", "architectures.UNetEncoder.conv8", "architectures.UNetEncoder.batch_norm8_4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNetEncoder.batch_norm8_5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNetEncoder.batch_norm8_6", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNetEncoder.batch_norm8_7", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNetEncoder.dconv5", "architectures.UNetEncoder.conv2", "architectures.UNetEncoder.conv3", "architectures.UNetEncoder.conv4", "architectures.UNetEncoder.conv5", "architectures.UNetEncoder.conv6", "architectures.UNetEncoder.conv7", "architectures.UNetEncoder.leaky_relu", "architectures.UNetEncoder.dconv1", "architectures.UNetEncoder.dconv2", "architectures.UNetEncoder.dconv3", "architectures.UNetEncoder.dconv4", "architectures.UNetEncoder.up", "architectures.UNetEncoder.leaky_relu", "architectures.UNetEncoder.leaky_relu", "architectures.UNetEncoder.leaky_relu", "architectures.UNetEncoder.leaky_relu", "architectures.UNetEncoder.leaky_relu", "architectures.UNetEncoder.leaky_relu", "architectures.UNetEncoder.up", "architectures.UNetEncoder.up", "architectures.UNetEncoder.up", "architectures.UNetEncoder.up", "architectures.UNetEncoder.relu", "architectures.UNetEncoder.relu", "architectures.UNetEncoder.relu", "architectures.UNetEncoder.relu", "architectures.UNetEncoder.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Encoder", "\n", "# Convolution layers:", "\n", "# input is (nc) x 256 x 256", "\n", "        ", "e1", "=", "self", ".", "conv1", "(", "input", ")", "\n", "# state size is (num_filters) x 128 x 128", "\n", "e2", "=", "self", ".", "batch_norm2_0", "(", "self", ".", "conv2", "(", "self", ".", "leaky_relu", "(", "e1", ")", ")", ")", "\n", "# state size is (num_filters x 2) x 64 x 64", "\n", "e3", "=", "self", ".", "batch_norm4_0", "(", "self", ".", "conv3", "(", "self", ".", "leaky_relu", "(", "e2", ")", ")", ")", "\n", "# state size is (num_filters x 4) x 32 x 32", "\n", "e4", "=", "self", ".", "batch_norm8_0", "(", "self", ".", "conv4", "(", "self", ".", "leaky_relu", "(", "e3", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 16 x 16", "\n", "e5", "=", "self", ".", "batch_norm8_1", "(", "self", ".", "conv5", "(", "self", ".", "leaky_relu", "(", "e4", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 8 x 8", "\n", "e6", "=", "self", ".", "batch_norm8_2", "(", "self", ".", "conv6", "(", "self", ".", "leaky_relu", "(", "e5", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 4 x 4", "\n", "e7", "=", "self", ".", "batch_norm8_3", "(", "self", ".", "conv7", "(", "self", ".", "leaky_relu", "(", "e6", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 2 x 2", "\n", "# No batch norm on output of Encoder", "\n", "e8", "=", "self", ".", "conv8", "(", "self", ".", "leaky_relu", "(", "e7", ")", ")", "\n", "\n", "# Decoder", "\n", "# Deconvolution layers:", "\n", "# state size is (num_filters x 8) x 1 x 1", "\n", "d1_", "=", "self", ".", "batch_norm8_4", "(", "self", ".", "dconv1", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "e8", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 2 x 2", "\n", "d1", "=", "torch", ".", "cat", "(", "(", "d1_", ",", "e7", ")", ",", "1", ")", "\n", "d2_", "=", "self", ".", "batch_norm8_5", "(", "self", ".", "dconv2", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d1", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 4 x 4", "\n", "d2", "=", "torch", ".", "cat", "(", "(", "d2_", ",", "e6", ")", ",", "1", ")", "\n", "d3_", "=", "self", ".", "batch_norm8_6", "(", "self", ".", "dconv3", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d2", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 8 x 8", "\n", "d3", "=", "torch", ".", "cat", "(", "(", "d3_", ",", "e5", ")", ",", "1", ")", "\n", "d4_", "=", "self", ".", "batch_norm8_7", "(", "self", ".", "dconv4", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d3", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 16 x 16", "\n", "d4", "=", "torch", ".", "cat", "(", "(", "d4_", ",", "e4", ")", ",", "1", ")", "\n", "d5_", "=", "self", ".", "dconv5", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d4", ")", ")", ")", "\n", "# state size is (num_filters x 2) x 64 x 64", "\n", "return", "d5_", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.UNetEncoder64.__init__": [[370, 411], ["torch.Module.__init__", "architectures.get_conv_layer", "architectures.get_batchnorm_layer", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "torch.Upsample", "torch.Upsample", "torch.Upsample", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.get_conv_layer", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.get_batchnorm_layer"], ["def", "__init__", "(", "self", ",", "opt", ",", "num_filters", "=", "32", ",", "channels_in", "=", "3", ",", "channels_out", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "conv_layer", "=", "get_conv_layer", "(", "opt", ",", "use_3D", "=", "False", ")", "\n", "norm_layer", "=", "get_batchnorm_layer", "(", "opt", ")", "\n", "\n", "self", ".", "conv1", "=", "conv_layer", "(", "channels_in", ",", "num_filters", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv2", "=", "conv_layer", "(", "num_filters", ",", "num_filters", "*", "2", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv3", "=", "conv_layer", "(", "num_filters", "*", "2", ",", "num_filters", "*", "4", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv4", "=", "conv_layer", "(", "num_filters", "*", "4", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv5", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv6", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv7", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv8", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ")", "\n", "\n", "self", ".", "dconv1", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv2", "=", "conv_layer", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv3", "=", "conv_layer", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv4", "=", "conv_layer", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv5", "=", "conv_layer", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "4", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv6", "=", "conv_layer", "(", "num_filters", "*", "4", "*", "2", ",", "channels_out", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv7", "=", "conv_layer", "(", "num_filters", "*", "2", "*", "2", ",", "channels_out", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "batch_norm", "=", "norm_layer", "(", "num_filters", ")", "\n", "self", ".", "batch_norm2_0", "=", "norm_layer", "(", "num_filters", "*", "2", ")", "\n", "self", ".", "batch_norm2_1", "=", "norm_layer", "(", "num_filters", "*", "2", ")", "\n", "self", ".", "batch_norm4_0", "=", "norm_layer", "(", "num_filters", "*", "4", ")", "\n", "self", ".", "batch_norm4_1", "=", "norm_layer", "(", "num_filters", "*", "4", ")", "\n", "self", ".", "batch_norm8_0", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_1", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_2", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_3", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_4", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_5", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_6", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_7", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.UNetEncoder64.forward": [[412, 454], ["architectures.UNetEncoder64.conv1", "architectures.UNetEncoder64.batch_norm2_0", "architectures.UNetEncoder64.batch_norm4_0", "architectures.UNetEncoder64.batch_norm8_0", "architectures.UNetEncoder64.batch_norm8_1", "architectures.UNetEncoder64.batch_norm8_2", "architectures.UNetEncoder64.batch_norm8_3", "architectures.UNetEncoder64.conv8", "architectures.UNetEncoder64.batch_norm8_4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNetEncoder64.batch_norm8_5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNetEncoder64.batch_norm8_6", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNetEncoder64.batch_norm8_7", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNetEncoder64.batch_norm4_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNetEncoder64.dconv6", "architectures.UNetEncoder64.conv2", "architectures.UNetEncoder64.conv3", "architectures.UNetEncoder64.conv4", "architectures.UNetEncoder64.conv5", "architectures.UNetEncoder64.conv6", "architectures.UNetEncoder64.conv7", "architectures.UNetEncoder64.leaky_relu", "architectures.UNetEncoder64.dconv1", "architectures.UNetEncoder64.dconv2", "architectures.UNetEncoder64.dconv3", "architectures.UNetEncoder64.dconv4", "architectures.UNetEncoder64.dconv5", "architectures.UNetEncoder64.up", "architectures.UNetEncoder64.leaky_relu", "architectures.UNetEncoder64.leaky_relu", "architectures.UNetEncoder64.leaky_relu", "architectures.UNetEncoder64.leaky_relu", "architectures.UNetEncoder64.leaky_relu", "architectures.UNetEncoder64.leaky_relu", "architectures.UNetEncoder64.up", "architectures.UNetEncoder64.up", "architectures.UNetEncoder64.up", "architectures.UNetEncoder64.up", "architectures.UNetEncoder64.up", "architectures.UNetEncoder64.relu", "architectures.UNetEncoder64.relu", "architectures.UNetEncoder64.relu", "architectures.UNetEncoder64.relu", "architectures.UNetEncoder64.relu", "architectures.UNetEncoder64.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Encoder", "\n", "# Convolution layers:", "\n", "# input is (nc) x 256 x 256", "\n", "        ", "e1", "=", "self", ".", "conv1", "(", "input", ")", "\n", "# state size is (num_filters) x 128 x 128", "\n", "e2", "=", "self", ".", "batch_norm2_0", "(", "self", ".", "conv2", "(", "self", ".", "leaky_relu", "(", "e1", ")", ")", ")", "\n", "# state size is (num_filters x 2) x 64 x 64", "\n", "e3", "=", "self", ".", "batch_norm4_0", "(", "self", ".", "conv3", "(", "self", ".", "leaky_relu", "(", "e2", ")", ")", ")", "\n", "# state size is (num_filters x 4) x 32 x 32", "\n", "e4", "=", "self", ".", "batch_norm8_0", "(", "self", ".", "conv4", "(", "self", ".", "leaky_relu", "(", "e3", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 16 x 16", "\n", "e5", "=", "self", ".", "batch_norm8_1", "(", "self", ".", "conv5", "(", "self", ".", "leaky_relu", "(", "e4", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 8 x 8", "\n", "e6", "=", "self", ".", "batch_norm8_2", "(", "self", ".", "conv6", "(", "self", ".", "leaky_relu", "(", "e5", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 4 x 4", "\n", "e7", "=", "self", ".", "batch_norm8_3", "(", "self", ".", "conv7", "(", "self", ".", "leaky_relu", "(", "e6", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 2 x 2", "\n", "# No batch norm on output of Encoder", "\n", "e8", "=", "self", ".", "conv8", "(", "self", ".", "leaky_relu", "(", "e7", ")", ")", "\n", "\n", "# Decoder", "\n", "# Deconvolution layers:", "\n", "# state size is (num_filters x 8) x 1 x 1", "\n", "d1_", "=", "self", ".", "batch_norm8_4", "(", "self", ".", "dconv1", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "e8", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 2 x 2", "\n", "d1", "=", "torch", ".", "cat", "(", "(", "d1_", ",", "e7", ")", ",", "1", ")", "\n", "d2_", "=", "self", ".", "batch_norm8_5", "(", "self", ".", "dconv2", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d1", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 4 x 4", "\n", "d2", "=", "torch", ".", "cat", "(", "(", "d2_", ",", "e6", ")", ",", "1", ")", "\n", "d3_", "=", "self", ".", "batch_norm8_6", "(", "self", ".", "dconv3", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d2", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 8 x 8", "\n", "d3", "=", "torch", ".", "cat", "(", "(", "d3_", ",", "e5", ")", ",", "1", ")", "\n", "d4_", "=", "self", ".", "batch_norm8_7", "(", "self", ".", "dconv4", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d3", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 16 x 16", "\n", "d4", "=", "torch", ".", "cat", "(", "(", "d4_", ",", "e4", ")", ",", "1", ")", "\n", "d5_", "=", "self", ".", "batch_norm4_1", "(", "self", ".", "dconv5", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d4", ")", ")", ")", ")", "\n", "# state size is (num_filters x 4) x 32 x 32", "\n", "d5", "=", "torch", ".", "cat", "(", "(", "d5_", ",", "e3", ")", ",", "1", ")", "\n", "d6_", "=", "self", ".", "dconv6", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d5", ")", ")", ")", "\n", "# state size is (num_filters x 2) x 64 x 64", "\n", "return", "d6_", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.UNetDecoder64.__init__": [[460, 503], ["torch.Module.__init__", "architectures.get_conv_layer", "architectures.get_batchnorm_layer", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "torch.Upsample", "torch.Upsample", "torch.Upsample", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.get_conv_layer", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.get_batchnorm_layer"], ["def", "__init__", "(", "self", ",", "opt", "=", "None", ",", "num_filters", "=", "32", ",", "channels_in", "=", "3", ",", "channels_out", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "conv_layer", "=", "get_conv_layer", "(", "opt", ",", "use_3D", "=", "False", ")", "\n", "norm_layer", "=", "get_batchnorm_layer", "(", "opt", ")", "\n", "\n", "# self.conv3 = nn.Conv2d(num_filters * 2, num_filters * 4, 4, 2, 1)", "\n", "self", ".", "conv3", "=", "conv_layer", "(", "num_filters", "*", "2", ",", "num_filters", "*", "4", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv4", "=", "conv_layer", "(", "num_filters", "*", "4", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv5", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv6", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv7", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv8", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ")", "\n", "\n", "self", ".", "dconv1", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv2", "=", "conv_layer", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv3", "=", "conv_layer", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv4", "=", "conv_layer", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv5", "=", "conv_layer", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "4", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv6", "=", "conv_layer", "(", "num_filters", "*", "4", "*", "2", ",", "num_filters", "*", "2", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv7", "=", "conv_layer", "(", "num_filters", "*", "2", ",", "num_filters", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv8", "=", "conv_layer", "(", "num_filters", ",", "channels_out", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "batch_norm", "=", "norm_layer", "(", "num_filters", ")", "\n", "self", ".", "batch_norm2_1", "=", "norm_layer", "(", "num_filters", "*", "2", ")", "\n", "self", ".", "batch_norm4_1", "=", "norm_layer", "(", "num_filters", "*", "4", ")", "\n", "self", ".", "batch_norm8_0", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_1", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_2", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_3", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_4", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_5", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_6", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_7", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "if", "opt", ".", "normalize_image", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.UNetDecoder64.forward": [[504, 548], ["architectures.UNetDecoder64.conv3", "architectures.UNetDecoder64.batch_norm8_0", "architectures.UNetDecoder64.batch_norm8_1", "architectures.UNetDecoder64.batch_norm8_2", "architectures.UNetDecoder64.batch_norm8_3", "architectures.UNetDecoder64.conv8", "architectures.UNetDecoder64.batch_norm8_4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNetDecoder64.batch_norm8_5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNetDecoder64.batch_norm8_6", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNetDecoder64.batch_norm8_7", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNetDecoder64.batch_norm4_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNetDecoder64.batch_norm2_1", "architectures.UNetDecoder64.batch_norm", "architectures.UNetDecoder64.dconv8", "architectures.UNetDecoder64.norm", "architectures.UNetDecoder64.conv4", "architectures.UNetDecoder64.conv5", "architectures.UNetDecoder64.conv6", "architectures.UNetDecoder64.conv7", "architectures.UNetDecoder64.leaky_relu", "architectures.UNetDecoder64.dconv1", "architectures.UNetDecoder64.dconv2", "architectures.UNetDecoder64.dconv3", "architectures.UNetDecoder64.dconv4", "architectures.UNetDecoder64.dconv5", "architectures.UNetDecoder64.dconv6", "architectures.UNetDecoder64.dconv7", "architectures.UNetDecoder64.up", "architectures.UNetDecoder64.leaky_relu", "architectures.UNetDecoder64.leaky_relu", "architectures.UNetDecoder64.leaky_relu", "architectures.UNetDecoder64.leaky_relu", "architectures.UNetDecoder64.up", "architectures.UNetDecoder64.up", "architectures.UNetDecoder64.up", "architectures.UNetDecoder64.up", "architectures.UNetDecoder64.up", "architectures.UNetDecoder64.up", "architectures.UNetDecoder64.up", "architectures.UNetDecoder64.relu", "architectures.UNetDecoder64.relu", "architectures.UNetDecoder64.relu", "architectures.UNetDecoder64.relu", "architectures.UNetDecoder64.relu", "architectures.UNetDecoder64.relu", "architectures.UNetDecoder64.relu", "architectures.UNetDecoder64.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Encoder", "\n", "# Convolution layers:", "\n", "# state size is (num_filters x 2) x 64 x 64", "\n", "        ", "e3", "=", "self", ".", "conv3", "(", "input", ")", "\n", "# state size is (num_filters x 4) x 32 x 32", "\n", "e4", "=", "self", ".", "batch_norm8_0", "(", "self", ".", "conv4", "(", "self", ".", "leaky_relu", "(", "e3", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 16 x 16", "\n", "e5", "=", "self", ".", "batch_norm8_1", "(", "self", ".", "conv5", "(", "self", ".", "leaky_relu", "(", "e4", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 8 x 8", "\n", "e6", "=", "self", ".", "batch_norm8_2", "(", "self", ".", "conv6", "(", "self", ".", "leaky_relu", "(", "e5", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 4 x 4", "\n", "e7", "=", "self", ".", "batch_norm8_3", "(", "self", ".", "conv7", "(", "self", ".", "leaky_relu", "(", "e6", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 2 x 2", "\n", "# No batch norm on output of Encoder", "\n", "e8", "=", "self", ".", "conv8", "(", "self", ".", "leaky_relu", "(", "e7", ")", ")", "\n", "\n", "# Decoder", "\n", "# Deconvolution layers:", "\n", "# state size is (num_filters x 8) x 1 x 1", "\n", "d1_", "=", "self", ".", "batch_norm8_4", "(", "self", ".", "dconv1", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "e8", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 2 x 2", "\n", "d1", "=", "torch", ".", "cat", "(", "(", "d1_", ",", "e7", ")", ",", "1", ")", "\n", "d2_", "=", "self", ".", "batch_norm8_5", "(", "self", ".", "dconv2", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d1", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 4 x 4", "\n", "d2", "=", "torch", ".", "cat", "(", "(", "d2_", ",", "e6", ")", ",", "1", ")", "\n", "d3_", "=", "self", ".", "batch_norm8_6", "(", "self", ".", "dconv3", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d2", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 8 x 8", "\n", "d3", "=", "torch", ".", "cat", "(", "(", "d3_", ",", "e5", ")", ",", "1", ")", "\n", "d4_", "=", "self", ".", "batch_norm8_7", "(", "self", ".", "dconv4", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d3", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 16 x 16", "\n", "d4", "=", "torch", ".", "cat", "(", "(", "d4_", ",", "e4", ")", ",", "1", ")", "\n", "d5_", "=", "self", ".", "batch_norm4_1", "(", "self", ".", "dconv5", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d4", ")", ")", ")", ")", "\n", "# state size is (num_filters x 4) x 32 x 32", "\n", "d5", "=", "torch", ".", "cat", "(", "(", "d5_", ",", "e3", ")", ",", "1", ")", "\n", "d6_", "=", "self", ".", "batch_norm2_1", "(", "self", ".", "dconv6", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d5", ")", ")", ")", ")", "\n", "# state size is (num_filters x 2) x 64 x 64", "\n", "d7_", "=", "self", ".", "batch_norm", "(", "self", ".", "dconv7", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d6_", ")", ")", ")", ")", "\n", "# state size is (num_filters) x 128 x 128", "\n", "# d7_ = torch.Tensor(e1.data.new(e1.size()).normal_(0, 0.5))", "\n", "d8", "=", "self", ".", "dconv8", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d7_", ")", ")", ")", "\n", "# state size is (nc) x 256 x 256", "\n", "# output = self.tanh(d8)", "\n", "return", "self", ".", "norm", "(", "d8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.UNetDecoder.__init__": [[554, 596], ["torch.Module.__init__", "architectures.get_conv_layer", "architectures.get_batchnorm_layer", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "torch.Upsample", "torch.Upsample", "torch.Upsample", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_conv_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "get_batchnorm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.get_conv_layer", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.get_batchnorm_layer"], ["def", "__init__", "(", "self", ",", "num_filters", "=", "32", ",", "channels_in", "=", "3", ",", "channels_out", "=", "3", ",", "opt", "=", "None", ")", ":", "\n", "        ", "super", "(", "UNetDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "conv_layer", "=", "get_conv_layer", "(", "opt", ",", "use_3D", "=", "False", ")", "\n", "norm_layer", "=", "get_batchnorm_layer", "(", "opt", ")", "\n", "\n", "# self.conv3 = nn.Conv2d(num_filters * 2, num_filters * 4, 4, 2, 1)", "\n", "self", ".", "conv4", "=", "conv_layer", "(", "channels_in", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv5", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv6", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv7", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv8", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ")", "\n", "\n", "self", ".", "dconv1", "=", "conv_layer", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv2", "=", "conv_layer", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv3", "=", "conv_layer", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv4", "=", "conv_layer", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv5", "=", "conv_layer", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "4", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv6", "=", "conv_layer", "(", "num_filters", "*", "4", ",", "num_filters", "*", "2", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv7", "=", "conv_layer", "(", "num_filters", "*", "2", ",", "num_filters", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv8", "=", "conv_layer", "(", "num_filters", ",", "channels_out", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "batch_norm", "=", "norm_layer", "(", "num_filters", ")", "\n", "self", ".", "batch_norm2_1", "=", "norm_layer", "(", "num_filters", "*", "2", ")", "\n", "self", ".", "batch_norm4_1", "=", "norm_layer", "(", "num_filters", "*", "4", ")", "\n", "# self.batch_norm8_0 = nn.BatchNorm2d(num_filters * 8)", "\n", "self", ".", "batch_norm8_1", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_2", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_3", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_4", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_5", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_6", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_7", "=", "norm_layer", "(", "num_filters", "*", "8", ")", "\n", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "if", "opt", ".", "normalize_image", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.UNetDecoder.forward": [[597, 639], ["architectures.UNetDecoder.conv4", "architectures.UNetDecoder.batch_norm8_1", "architectures.UNetDecoder.batch_norm8_2", "architectures.UNetDecoder.batch_norm8_3", "architectures.UNetDecoder.conv8", "architectures.UNetDecoder.batch_norm8_4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNetDecoder.batch_norm8_5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNetDecoder.batch_norm8_6", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNetDecoder.batch_norm8_7", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNetDecoder.batch_norm4_1", "architectures.UNetDecoder.batch_norm2_1", "architectures.UNetDecoder.batch_norm", "architectures.UNetDecoder.dconv8", "architectures.UNetDecoder.norm", "architectures.UNetDecoder.conv5", "architectures.UNetDecoder.conv6", "architectures.UNetDecoder.conv7", "architectures.UNetDecoder.leaky_relu", "architectures.UNetDecoder.dconv1", "architectures.UNetDecoder.dconv2", "architectures.UNetDecoder.dconv3", "architectures.UNetDecoder.dconv4", "architectures.UNetDecoder.dconv5", "architectures.UNetDecoder.dconv6", "architectures.UNetDecoder.dconv7", "architectures.UNetDecoder.up", "architectures.UNetDecoder.leaky_relu", "architectures.UNetDecoder.leaky_relu", "architectures.UNetDecoder.leaky_relu", "architectures.UNetDecoder.up", "architectures.UNetDecoder.up", "architectures.UNetDecoder.up", "architectures.UNetDecoder.up", "architectures.UNetDecoder.up", "architectures.UNetDecoder.up", "architectures.UNetDecoder.up", "architectures.UNetDecoder.relu", "architectures.UNetDecoder.relu", "architectures.UNetDecoder.relu", "architectures.UNetDecoder.relu", "architectures.UNetDecoder.relu", "architectures.UNetDecoder.relu", "architectures.UNetDecoder.relu", "architectures.UNetDecoder.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Encoder", "\n", "# Convolution layers:", "\n", "# state size is (num_filters x 2) x 64 x 64", "\n", "# state size is (num_filters x 4) x 32 x 32", "\n", "        ", "e4", "=", "self", ".", "conv4", "(", "input", ")", "\n", "# state size is (num_filters x 8) x 16 x 16", "\n", "e5", "=", "self", ".", "batch_norm8_1", "(", "self", ".", "conv5", "(", "self", ".", "leaky_relu", "(", "e4", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 8 x 8", "\n", "e6", "=", "self", ".", "batch_norm8_2", "(", "self", ".", "conv6", "(", "self", ".", "leaky_relu", "(", "e5", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 4 x 4", "\n", "e7", "=", "self", ".", "batch_norm8_3", "(", "self", ".", "conv7", "(", "self", ".", "leaky_relu", "(", "e6", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 2 x 2", "\n", "# No batch norm on output of Encoder", "\n", "e8", "=", "self", ".", "conv8", "(", "self", ".", "leaky_relu", "(", "e7", ")", ")", "\n", "\n", "# Decoder", "\n", "# Deconvolution layers:", "\n", "# state size is (num_filters x 8) x 1 x 1", "\n", "d1_", "=", "self", ".", "batch_norm8_4", "(", "self", ".", "dconv1", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "e8", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 2 x 2", "\n", "d1", "=", "torch", ".", "cat", "(", "(", "d1_", ",", "e7", ")", ",", "1", ")", "\n", "d2_", "=", "self", ".", "batch_norm8_5", "(", "self", ".", "dconv2", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d1", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 4 x 4", "\n", "d2", "=", "torch", ".", "cat", "(", "(", "d2_", ",", "e6", ")", ",", "1", ")", "\n", "d3_", "=", "self", ".", "batch_norm8_6", "(", "self", ".", "dconv3", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d2", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 8 x 8", "\n", "d3", "=", "torch", ".", "cat", "(", "(", "d3_", ",", "e5", ")", ",", "1", ")", "\n", "d4_", "=", "self", ".", "batch_norm8_7", "(", "self", ".", "dconv4", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d3", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 16 x 16", "\n", "d4", "=", "torch", ".", "cat", "(", "(", "d4_", ",", "e4", ")", ",", "1", ")", "\n", "d5_", "=", "self", ".", "batch_norm4_1", "(", "self", ".", "dconv5", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d4", ")", ")", ")", ")", "\n", "# state size is (num_filters x 4) x 32 x 32", "\n", "d6_", "=", "self", ".", "batch_norm2_1", "(", "self", ".", "dconv6", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d5_", ")", ")", ")", ")", "\n", "# state size is (num_filters x 2) x 64 x 64", "\n", "d7_", "=", "self", ".", "batch_norm", "(", "self", ".", "dconv7", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d6_", ")", ")", ")", ")", "\n", "# state size is (num_filters) x 128 x 128", "\n", "# d7_ = torch.Tensor(e1.data.new(e1.size()).normal_(0, 0.5))", "\n", "d8", "=", "self", ".", "dconv8", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d7_", ")", ")", ")", "\n", "# state size is (nc) x 256 x 256", "\n", "# output = self.tanh(d8)", "\n", "return", "self", ".", "norm", "(", "d8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.UNet3D64.__init__": [[645, 676], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["def", "__init__", "(", "\n", "self", ",", "num_filters", "=", "32", ",", "channels_in", "=", "64", ",", "channels_out", "=", "64", ",", "voxels_size", "=", "64", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "channels_in", ",", "num_filters", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "num_filters", ",", "num_filters", "*", "2", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "num_filters", "*", "2", ",", "num_filters", "*", "4", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv3d", "(", "num_filters", "*", "4", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv3d", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"trilinear\"", ")", "\n", "\n", "self", ".", "dconv2", "=", "nn", ".", "Conv3d", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv3", "=", "nn", ".", "Conv3d", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "4", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv4", "=", "nn", ".", "Conv3d", "(", "num_filters", "*", "4", "*", "2", ",", "num_filters", "*", "2", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv5", "=", "nn", ".", "Conv3d", "(", "num_filters", "*", "2", "*", "2", ",", "num_filters", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv6", "=", "nn", ".", "Conv3d", "(", "num_filters", "*", "2", ",", "channels_out", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "batch_norm2_0", "=", "nn", ".", "BatchNorm3d", "(", "num_filters", "*", "2", ")", "\n", "self", ".", "batch_norm4_0", "=", "nn", ".", "BatchNorm3d", "(", "num_filters", "*", "4", ")", "\n", "self", ".", "batch_norm4_1", "=", "nn", ".", "BatchNorm3d", "(", "num_filters", ")", "\n", "self", ".", "batch_norm8_0", "=", "nn", ".", "BatchNorm3d", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_1", "=", "nn", ".", "BatchNorm3d", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_5", "=", "nn", ".", "BatchNorm3d", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_6", "=", "nn", ".", "BatchNorm3d", "(", "num_filters", "*", "4", ")", "\n", "self", ".", "batch_norm8_7", "=", "nn", ".", "BatchNorm3d", "(", "num_filters", "*", "2", ")", "\n", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.UNet3D64.forward": [[677, 708], ["architectures.UNet3D64.conv1", "architectures.UNet3D64.batch_norm2_0", "architectures.UNet3D64.batch_norm4_0", "architectures.UNet3D64.batch_norm8_0", "architectures.UNet3D64.batch_norm8_1", "architectures.UNet3D64.batch_norm8_5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNet3D64.batch_norm8_6", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNet3D64.batch_norm8_7", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNet3D64.batch_norm4_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNet3D64.dconv6", "architectures.UNet3D64.conv2", "architectures.UNet3D64.conv3", "architectures.UNet3D64.conv4", "architectures.UNet3D64.conv5", "architectures.UNet3D64.dconv2", "architectures.UNet3D64.dconv3", "architectures.UNet3D64.dconv4", "architectures.UNet3D64.dconv5", "architectures.UNet3D64.up", "architectures.UNet3D64.leaky_relu", "architectures.UNet3D64.leaky_relu", "architectures.UNet3D64.leaky_relu", "architectures.UNet3D64.leaky_relu", "architectures.UNet3D64.up", "architectures.UNet3D64.up", "architectures.UNet3D64.up", "architectures.UNet3D64.up", "architectures.UNet3D64.relu", "architectures.UNet3D64.relu", "architectures.UNet3D64.relu", "architectures.UNet3D64.relu", "architectures.UNet3D64.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Encoder", "\n", "# Convolution layers:", "\n", "# input is (nc) x 64 x 64", "\n", "        ", "e1", "=", "self", ".", "conv1", "(", "input", ")", "\n", "# state size is (num_filters) x 32 x 32", "\n", "e2", "=", "self", ".", "batch_norm2_0", "(", "self", ".", "conv2", "(", "self", ".", "leaky_relu", "(", "e1", ")", ")", ")", "\n", "# state size is (num_filters x 2) x 16 x 16", "\n", "e3", "=", "self", ".", "batch_norm4_0", "(", "self", ".", "conv3", "(", "self", ".", "leaky_relu", "(", "e2", ")", ")", ")", "\n", "# state size is (num_filters x 4) x 8 x 8", "\n", "e4", "=", "self", ".", "batch_norm8_0", "(", "self", ".", "conv4", "(", "self", ".", "leaky_relu", "(", "e3", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 4 x 4", "\n", "e5", "=", "self", ".", "batch_norm8_1", "(", "self", ".", "conv5", "(", "self", ".", "leaky_relu", "(", "e4", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 2x2", "\n", "\n", "# Decoder", "\n", "# Deconvolution layers:", "\n", "d2_", "=", "self", ".", "batch_norm8_5", "(", "self", ".", "dconv2", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "e5", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 4 x 4", "\n", "d2", "=", "torch", ".", "cat", "(", "(", "d2_", ",", "e4", ")", ",", "1", ")", "\n", "d3_", "=", "self", ".", "batch_norm8_6", "(", "self", ".", "dconv3", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d2", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 8 x 8", "\n", "d3", "=", "torch", ".", "cat", "(", "(", "d3_", ",", "e3", ")", ",", "1", ")", "\n", "d4_", "=", "self", ".", "batch_norm8_7", "(", "self", ".", "dconv4", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d3", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 16 x 16", "\n", "d4", "=", "torch", ".", "cat", "(", "(", "d4_", ",", "e2", ")", ",", "1", ")", "\n", "d5_", "=", "self", ".", "batch_norm4_1", "(", "self", ".", "dconv5", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d4", ")", ")", ")", ")", "\n", "# state size is (num_filters x 4) x 32 x 32", "\n", "d5", "=", "torch", ".", "cat", "(", "(", "d5_", ",", "e1", ")", ",", "1", ")", "\n", "d6", "=", "self", ".", "dconv6", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d5", ")", ")", ")", "\n", "return", "d6", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.UNet3D.__init__": [[714, 749], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["def", "__init__", "(", "\n", "self", ",", "num_filters", "=", "32", ",", "channels_in", "=", "64", ",", "channels_out", "=", "64", ",", "voxels_size", "=", "64", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "channels_in", ",", "num_filters", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "num_filters", ",", "num_filters", "*", "2", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "num_filters", "*", "2", ",", "num_filters", "*", "4", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv3d", "(", "num_filters", "*", "4", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv3d", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv3d", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"trilinear\"", ")", "\n", "\n", "self", ".", "dconv2", "=", "nn", ".", "Conv3d", "(", "num_filters", "*", "8", ",", "num_filters", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv3", "=", "nn", ".", "Conv3d", "(", "num_filters", "*", "8", "*", "2", ",", "num_filters", "*", "4", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv4", "=", "nn", ".", "Conv3d", "(", "num_filters", "*", "4", "*", "2", ",", "num_filters", "*", "2", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv5", "=", "nn", ".", "Conv3d", "(", "num_filters", "*", "2", "*", "2", ",", "num_filters", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv6", "=", "nn", ".", "Conv3d", "(", "num_filters", "*", "2", ",", "channels_out", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "batch_norm", "=", "nn", ".", "BatchNorm3d", "(", "num_filters", ")", "\n", "self", ".", "batch_norm2_0", "=", "nn", ".", "BatchNorm3d", "(", "num_filters", "*", "2", ")", "\n", "self", ".", "batch_norm4_0", "=", "nn", ".", "BatchNorm3d", "(", "num_filters", "*", "4", ")", "\n", "self", ".", "batch_norm4_1", "=", "nn", ".", "BatchNorm3d", "(", "num_filters", ")", "\n", "self", ".", "batch_norm8_0", "=", "nn", ".", "BatchNorm3d", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_1", "=", "nn", ".", "BatchNorm3d", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_2", "=", "nn", ".", "BatchNorm3d", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_4", "=", "nn", ".", "BatchNorm3d", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_5", "=", "nn", ".", "BatchNorm3d", "(", "num_filters", "*", "8", ")", "\n", "self", ".", "batch_norm8_6", "=", "nn", ".", "BatchNorm3d", "(", "num_filters", "*", "4", ")", "\n", "self", ".", "batch_norm8_7", "=", "nn", ".", "BatchNorm3d", "(", "num_filters", "*", "2", ")", "\n", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.UNet3D.forward": [[750, 781], ["architectures.UNet3D.conv1", "architectures.UNet3D.batch_norm2_0", "architectures.UNet3D.batch_norm4_0", "architectures.UNet3D.batch_norm8_0", "architectures.UNet3D.conv5", "architectures.UNet3D.batch_norm8_5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNet3D.batch_norm8_6", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNet3D.batch_norm8_7", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNet3D.batch_norm4_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architectures.UNet3D.dconv6", "architectures.UNet3D.conv2", "architectures.UNet3D.conv3", "architectures.UNet3D.conv4", "architectures.UNet3D.leaky_relu", "architectures.UNet3D.dconv2", "architectures.UNet3D.dconv3", "architectures.UNet3D.dconv4", "architectures.UNet3D.dconv5", "architectures.UNet3D.up", "architectures.UNet3D.leaky_relu", "architectures.UNet3D.leaky_relu", "architectures.UNet3D.leaky_relu", "architectures.UNet3D.up", "architectures.UNet3D.up", "architectures.UNet3D.up", "architectures.UNet3D.up", "architectures.UNet3D.relu", "architectures.UNet3D.relu", "architectures.UNet3D.relu", "architectures.UNet3D.relu", "architectures.UNet3D.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Encoder", "\n", "# Convolution layers:", "\n", "# input is (nc) x 64 x 64", "\n", "        ", "e1", "=", "self", ".", "conv1", "(", "input", ")", "\n", "# state size is (num_filters) x 32 x 32", "\n", "e2", "=", "self", ".", "batch_norm2_0", "(", "self", ".", "conv2", "(", "self", ".", "leaky_relu", "(", "e1", ")", ")", ")", "\n", "# state size is (num_filters x 2) x 16 x 16", "\n", "e3", "=", "self", ".", "batch_norm4_0", "(", "self", ".", "conv3", "(", "self", ".", "leaky_relu", "(", "e2", ")", ")", ")", "\n", "# state size is (num_filters x 4) x 8 x 8", "\n", "e4", "=", "self", ".", "batch_norm8_0", "(", "self", ".", "conv4", "(", "self", ".", "leaky_relu", "(", "e3", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 4 x 4", "\n", "e5", "=", "self", ".", "conv5", "(", "self", ".", "leaky_relu", "(", "e4", ")", ")", "\n", "# state size is (num_filters x 8) x 8 x 8", "\n", "\n", "# Decoder", "\n", "# Deconvolution layers:", "\n", "d2_", "=", "self", ".", "batch_norm8_5", "(", "self", ".", "dconv2", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "e5", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 4 x 4", "\n", "d2", "=", "torch", ".", "cat", "(", "(", "d2_", ",", "e4", ")", ",", "1", ")", "\n", "d3_", "=", "self", ".", "batch_norm8_6", "(", "self", ".", "dconv3", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d2", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 8 x 8", "\n", "d3", "=", "torch", ".", "cat", "(", "(", "d3_", ",", "e3", ")", ",", "1", ")", "\n", "d4_", "=", "self", ".", "batch_norm8_7", "(", "self", ".", "dconv4", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d3", ")", ")", ")", ")", "\n", "# state size is (num_filters x 8) x 16 x 16", "\n", "d4", "=", "torch", ".", "cat", "(", "(", "d4_", ",", "e2", ")", ",", "1", ")", "\n", "d5_", "=", "self", ".", "batch_norm4_1", "(", "self", ".", "dconv5", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d4", ")", ")", ")", ")", "\n", "# state size is (num_filters x 4) x 32 x 32", "\n", "d5", "=", "torch", ".", "cat", "(", "(", "d5_", ",", "e1", ")", ",", "1", ")", "\n", "d6", "=", "self", ".", "dconv6", "(", "self", ".", "up", "(", "self", ".", "relu", "(", "d5", ")", ")", ")", "\n", "return", "d6", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.get_conv_layer": [[14, 35], ["torch.utils.spectral_norm", "torch.utils.spectral_norm", "torch.Conv3d", "torch.Conv2d", "torch.Conv3d", "torch.Conv2d"], "function", ["None"], ["def", "get_conv_layer", "(", "opt", ",", "use_3D", "=", "False", ")", ":", "\n", "    ", "if", "\"spectral\"", "in", "opt", ".", "norm_G", ":", "\n", "        ", "if", "use_3D", ":", "\n", "            ", "conv_layer_base", "=", "lambda", "in_c", ",", "out_c", ",", "k", ",", "p", ",", "s", ":", "nn", ".", "utils", ".", "spectral_norm", "(", "\n", "nn", ".", "Conv3d", "(", "in_c", ",", "out_c", ",", "k", ",", "p", ",", "s", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "conv_layer_base", "=", "lambda", "in_c", ",", "out_c", ",", "k", ",", "p", ",", "s", ":", "nn", ".", "utils", ".", "spectral_norm", "(", "\n", "nn", ".", "Conv2d", "(", "in_c", ",", "out_c", ",", "k", ",", "p", ",", "s", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "use_3D", ":", "\n", "            ", "conv_layer_base", "=", "lambda", "in_c", ",", "out_c", ",", "k", ",", "p", ",", "s", ":", "nn", ".", "Conv3d", "(", "\n", "in_c", ",", "out_c", ",", "k", ",", "p", ",", "s", "\n", ")", "\n", "", "else", ":", "\n", "            ", "conv_layer_base", "=", "lambda", "in_c", ",", "out_c", ",", "k", ",", "p", ",", "s", ":", "nn", ".", "Conv2d", "(", "\n", "in_c", ",", "out_c", ",", "k", ",", "p", ",", "s", "\n", ")", "\n", "\n", "", "", "return", "conv_layer_base", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.architectures.get_batchnorm_layer": [[37, 49], ["opt.norm_G.split"], "function", ["None"], ["", "def", "get_batchnorm_layer", "(", "opt", ")", ":", "\n", "    ", "norm_G", "=", "opt", ".", "norm_G", ".", "split", "(", "\":\"", ")", "[", "1", "]", "\n", "if", "norm_G", "==", "\"batch\"", ":", "\n", "        ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "elif", "norm_G", "==", "\"spectral_instance\"", ":", "\n", "        ", "norm_layer", "=", "nn", ".", "InstanceNorm2d", "\n", "", "elif", "norm_G", "==", "\"spectral_batch\"", ":", "\n", "        ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "elif", "norm_G", "==", "\"spectral_batchstanding\"", ":", "\n", "        ", "norm_layer", "=", "BatchNorm_StandingStats", "\n", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.configs.get_resnet_arch": [[3, 383], ["model_type.split"], "function", ["None"], ["def", "get_resnet_arch", "(", "model_type", ",", "opt", ",", "in_channels", "=", "3", ")", ":", "\n", "    ", "setup", "=", "model_type", ".", "split", "(", "\"_\"", ")", "[", "1", "]", "\n", "\n", "if", "setup", "==", "\"256W8UpDown\"", ":", "\n", "        ", "arch", "=", "{", "\n", "\"layers_enc\"", ":", "[", "\n", "in_channels", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "64", ",", "\n", "]", ",", "\n", "\"downsample\"", ":", "[", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "]", ",", "\n", "\"layers_dec\"", ":", "[", "\n", "128", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "4", ",", "\n", "opt", ".", "ngf", "*", "4", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "3", ",", "\n", "]", ",", "\n", "\"upsample\"", ":", "[", "\n", "False", ",", "\n", "\"Down\"", ",", "\n", "\"Down\"", ",", "\n", "False", ",", "\n", "\"Up\"", ",", "\n", "\"Up\"", ",", "\n", "False", ",", "\n", "False", ",", "\n", "]", ",", "\n", "\"non_local\"", ":", "False", ",", "\n", "\"non_local_index\"", ":", "1", ",", "\n", "}", "\n", "\n", "", "elif", "setup", "==", "\"256W8UpDown64\"", ":", "\n", "        ", "arch", "=", "{", "\n", "\"layers_enc\"", ":", "[", "\n", "in_channels", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "64", ",", "\n", "]", ",", "\n", "\"downsample\"", ":", "[", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "]", ",", "\n", "\"layers_dec\"", ":", "[", "\n", "64", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "4", ",", "\n", "opt", ".", "ngf", "*", "4", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "3", ",", "\n", "]", ",", "\n", "\"upsample\"", ":", "[", "\n", "False", ",", "\n", "\"Down\"", ",", "\n", "\"Down\"", ",", "\n", "False", ",", "\n", "\"Up\"", ",", "\n", "\"Up\"", ",", "\n", "False", ",", "\n", "False", ",", "\n", "]", ",", "\n", "\"non_local\"", ":", "False", ",", "\n", "\"non_local_index\"", ":", "1", ",", "\n", "}", "\n", "\n", "", "elif", "setup", "==", "\"256W8UpDownDV\"", ":", "\n", "        ", "arch", "=", "{", "\n", "\"layers_enc\"", ":", "[", "\n", "in_channels", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "64", ",", "\n", "]", ",", "\n", "\"downsample\"", ":", "[", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "]", ",", "\n", "\"layers_dec\"", ":", "[", "\n", "64", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "4", ",", "\n", "opt", ".", "ngf", "*", "4", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "3", ",", "\n", "]", ",", "\n", "\"upsample\"", ":", "[", "\n", "False", ",", "\n", "\"Down\"", ",", "\n", "\"Down\"", ",", "\n", "False", ",", "\n", "\"Up\"", ",", "\n", "\"Up\"", ",", "\n", "False", ",", "\n", "False", ",", "\n", "]", ",", "\n", "\"non_local\"", ":", "False", ",", "\n", "\"non_local_index\"", ":", "1", ",", "\n", "}", "\n", "\n", "", "elif", "setup", "==", "\"256W8UpDownRGB\"", ":", "\n", "        ", "arch", "=", "{", "\n", "\"layers_enc\"", ":", "[", "\n", "in_channels", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "64", ",", "\n", "]", ",", "\n", "\"downsample\"", ":", "[", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "]", ",", "\n", "\"layers_dec\"", ":", "[", "\n", "3", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "4", ",", "\n", "opt", ".", "ngf", "*", "4", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "3", ",", "\n", "]", ",", "\n", "\"upsample\"", ":", "[", "\n", "False", ",", "\n", "\"Down\"", ",", "\n", "\"Down\"", ",", "\n", "False", ",", "\n", "\"Up\"", ",", "\n", "\"Up\"", ",", "\n", "False", ",", "\n", "False", ",", "\n", "]", ",", "\n", "\"non_local\"", ":", "False", ",", "\n", "\"non_local_index\"", ":", "1", ",", "\n", "}", "\n", "\n", "", "elif", "setup", "==", "\"256W8UpDown3\"", ":", "\n", "        ", "arch", "=", "{", "\n", "\"layers_enc\"", ":", "[", "\n", "in_channels", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "64", ",", "\n", "]", ",", "\n", "\"downsample\"", ":", "[", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "]", ",", "\n", "\"layers_dec\"", ":", "[", "\n", "in_channels", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "4", ",", "\n", "opt", ".", "ngf", "*", "4", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "3", ",", "\n", "]", ",", "\n", "\"upsample\"", ":", "[", "\n", "False", ",", "\n", "\"Down\"", ",", "\n", "\"Down\"", ",", "\n", "False", ",", "\n", "\"Up\"", ",", "\n", "\"Up\"", ",", "\n", "False", ",", "\n", "False", ",", "\n", "]", ",", "\n", "\"non_local\"", ":", "False", ",", "\n", "\"non_local_index\"", ":", "1", ",", "\n", "}", "\n", "\n", "", "elif", "setup", "==", "\"256W8UpDown3SuperRes\"", ":", "\n", "        ", "arch", "=", "{", "\n", "\"layers_enc\"", ":", "[", "\n", "in_channels", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "64", ",", "\n", "]", ",", "\n", "\"downsample\"", ":", "[", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "]", ",", "\n", "\"layers_dec\"", ":", "[", "\n", "in_channels", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "4", ",", "\n", "opt", ".", "ngf", "*", "4", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "3", ",", "\n", "]", ",", "\n", "\"upsample\"", ":", "[", "\n", "False", ",", "\n", "\"Down\"", ",", "\n", "\"Down\"", ",", "\n", "False", ",", "\n", "\"Up\"", ",", "\n", "\"Up\"", ",", "\n", "False", ",", "\n", "False", ",", "\n", "]", ",", "\n", "\"non_local\"", ":", "False", ",", "\n", "\"non_local_index\"", ":", "1", ",", "\n", "}", "\n", "\n", "\n", "", "elif", "setup", "==", "\"256W8UpDown3_ultra\"", ":", "\n", "        ", "arch", "=", "{", "\n", "\"layers_enc\"", ":", "[", "\n", "in_channels", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", "//", "2", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "64", ",", "\n", "]", ",", "\n", "\"downsample\"", ":", "[", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "]", ",", "\n", "\"layers_dec\"", ":", "[", "\n", "3", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "4", ",", "\n", "opt", ".", "ngf", "*", "4", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "3", ",", "\n", "]", ",", "\n", "\"upsample\"", ":", "[", "\n", "\"Down\"", ",", "\n", "\"Down\"", ",", "\n", "\"Down\"", ",", "\n", "False", ",", "\n", "\"Up\"", ",", "\n", "\"Up\"", ",", "\n", "\"Up\"", ",", "\n", "False", ",", "\n", "]", ",", "\n", "\"non_local\"", ":", "False", ",", "\n", "\"non_local_index\"", ":", "1", ",", "\n", "}", "\n", "\n", "", "elif", "setup", "==", "\"256W8\"", ":", "\n", "        ", "arch", "=", "{", "\n", "\"layers_enc\"", ":", "[", "\n", "in_channels", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "4", ",", "\n", "opt", ".", "ngf", "*", "4", ",", "\n", "64", ",", "\n", "]", ",", "\n", "\"downsample\"", ":", "[", "\n", "True", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "True", ",", "\n", "False", ",", "\n", "False", ",", "\n", "False", ",", "\n", "]", ",", "\n", "\"layers_dec\"", ":", "[", "\n", "64", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "2", ",", "\n", "opt", ".", "ngf", "*", "4", ",", "\n", "opt", ".", "ngf", "*", "4", ",", "\n", "3", ",", "\n", "]", ",", "\n", "\"upsample\"", ":", "[", "False", ",", "False", ",", "True", ",", "False", ",", "False", ",", "False", ",", "True", ",", "False", "]", ",", "\n", "\"non_local\"", ":", "False", ",", "\n", "\"non_local_index\"", ":", "1", ",", "\n", "}", "\n", "\n", "", "return", "arch", "\n", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.BaseNetwork.__init__": [[18, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.BaseNetwork.modify_commandline_options": [[21, 24], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.BaseNetwork.print_network": [[25, 36], ["isinstance", "discriminators.BaseNetwork.parameters", "print", "param.numel", "type"], "methods", ["None"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ",", "list", ")", ":", "\n", "            ", "self", "=", "self", "[", "0", "]", "\n", "", "num_params", "=", "0", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "\n", "\"Network [%s] was created.\"", "\n", "+", "\"Total number of parameters: %.1f million. \"", "\n", "\"To see the architecture, do print(network).\"", "\n", "%", "(", "type", "(", "self", ")", ".", "__name__", ",", "num_params", "/", "1000000", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.BaseNetwork.init_weights": [[38, 75], ["discriminators.BaseNetwork.apply", "discriminators.BaseNetwork.children", "hasattr", "classname.find", "m.init_weights", "hasattr", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "hasattr", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "m.reset_parameters", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.BaseNetwork.init_weights", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.locally_masked_convolution.locally_masked_conv2d.reset_parameters"], ["", "def", "init_weights", "(", "self", ",", "init_type", "=", "\"normal\"", ",", "gain", "=", "0.02", ")", ":", "\n", "        ", "def", "init_func", "(", "m", ")", ":", "\n", "            ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "\"BatchNorm2d\"", ")", "!=", "-", "1", ":", "\n", "                ", "if", "hasattr", "(", "m", ",", "\"weight\"", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "hasattr", "(", "m", ",", "\"weight\"", ")", "and", "(", "\n", "classname", ".", "find", "(", "\"Conv\"", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "\"Linear\"", ")", "!=", "-", "1", "\n", ")", ":", "\n", "                ", "if", "init_type", "==", "\"normal\"", ":", "\n", "                    ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "\"xavier\"", ":", "\n", "                    ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "\"xavier_uniform\"", ":", "\n", "                    ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1.0", ")", "\n", "", "elif", "init_type", "==", "\"kaiming\"", ":", "\n", "                    ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "\"fan_in\"", ")", "\n", "", "elif", "init_type", "==", "\"orthogonal\"", ":", "\n", "                    ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "\"none\"", ":", "# uses pytorch's default init method", "\n", "                    ", "m", ".", "reset_parameters", "(", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "\n", "\"initialization method [%s] is not implemented\"", "\n", "%", "init_type", "\n", ")", "\n", "", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "", "self", ".", "apply", "(", "init_func", ")", "\n", "\n", "# propagate to children", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "\"init_weights\"", ")", ":", "\n", "                ", "m", ".", "init_weights", "(", "init_type", ",", "gain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.NLayerDiscriminator.__init__": [[79, 121], ["discriminators.BaseNetwork.__init__", "int", "discriminators.NLayerDiscriminator.compute_D_input_nc", "models.layers.normalization.get_D_norm_layer", "range", "range", "numpy.ceil", "min", "len", "discriminators.NLayerDiscriminator.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.layers.normalization.get_D_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "str", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.NLayerDiscriminator.compute_D_input_nc", "home.repos.pwc.inspect_result.crockwell_pixelsynth.layers.normalization.get_D_norm_layer"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "opt", ".", "n_layers_D", "=", "4", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", ")", "\n", "nf", "=", "opt", ".", "ndf", "\n", "input_nc", "=", "self", ".", "compute_D_input_nc", "(", "opt", ")", "\n", "\n", "norm_layer", "=", "get_D_norm_layer", "(", "opt", ",", "opt", ".", "norm_D", ")", "\n", "sequence", "=", "[", "\n", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "False", ")", ",", "\n", "]", "\n", "]", "\n", "\n", "for", "n", "in", "range", "(", "1", ",", "opt", ".", "n_layers_D", ")", ":", "\n", "            ", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "stride", "=", "1", "if", "n", "==", "opt", ".", "n_layers_D", "-", "1", "else", "2", "\n", "sequence", "+=", "[", "\n", "[", "\n", "norm_layer", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "nf_prev", ",", "\n", "nf", ",", "\n", "kernel_size", "=", "kw", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padw", ",", "\n", ")", "\n", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "False", ")", ",", "\n", "]", "\n", "]", "\n", "\n", "", "sequence", "+=", "[", "[", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "]", "\n", "\n", "# We divide the layers into groups to extract intermediate layer outputs", "\n", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "\"model\"", "+", "str", "(", "n", ")", ",", "nn", ".", "Sequential", "(", "*", "sequence", "[", "n", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.NLayerDiscriminator.compute_D_input_nc": [[122, 128], ["None"], "methods", ["None"], ["", "", "def", "compute_D_input_nc", "(", "self", ",", "opt", ")", ":", "\n", "# if opt.concat_discriminators:", "\n", "#     input_nc = opt.output_nc * 2", "\n", "# else:", "\n", "        ", "input_nc", "=", "opt", ".", "output_nc", "\n", "return", "input_nc", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.NLayerDiscriminator.forward": [[129, 140], ["discriminators.NLayerDiscriminator.children", "submodel", "results.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "results", "=", "[", "input", "]", "\n", "for", "submodel", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "intermediate_output", "=", "submodel", "(", "results", "[", "-", "1", "]", ")", "\n", "results", ".", "append", "(", "intermediate_output", ")", "\n", "\n", "", "get_intermediate_features", "=", "not", "self", ".", "opt", ".", "no_ganFeat_loss", "\n", "if", "get_intermediate_features", ":", "\n", "            ", "return", "results", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "results", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.MultiscaleDiscriminator.__init__": [[143, 154], ["discriminators.BaseNetwork.__init__", "range", "discriminators.MultiscaleDiscriminator.create_single_discriminator", "discriminators.MultiscaleDiscriminator.add_module"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.MultiscaleDiscriminator.create_single_discriminator"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "opt", ".", "netD_subarch", "=", "\"n_layer\"", "\n", "opt", ".", "num_D", "=", "2", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "for", "i", "in", "range", "(", "opt", ".", "num_D", ")", ":", "\n", "            ", "subnetD", "=", "self", ".", "create_single_discriminator", "(", "opt", ")", "\n", "self", ".", "add_module", "(", "\"discriminator_%d\"", "%", "i", ",", "subnetD", ")", "\n", "", "if", "opt", ".", "isTrain", ":", "\n", "            ", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.MultiscaleDiscriminator.create_single_discriminator": [[155, 167], ["discriminators.NLayerDiscriminator", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "ValueError", "netD.cuda.cuda.cuda"], "methods", ["None"], ["", "", "def", "create_single_discriminator", "(", "self", ",", "opt", ")", ":", "\n", "        ", "subarch", "=", "opt", ".", "netD_subarch", "\n", "if", "subarch", "==", "\"n_layer\"", ":", "\n", "            ", "netD", "=", "NLayerDiscriminator", "(", "opt", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "netD", "=", "netD", ".", "cuda", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"unrecognized discriminator subarchitecture %s\"", "%", "subarch", "\n", ")", "\n", "", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.MultiscaleDiscriminator.downsample": [[168, 175], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "downsample", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "F", ".", "avg_pool2d", "(", "\n", "input", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "[", "1", ",", "1", "]", ",", "\n", "count_include_pad", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.MultiscaleDiscriminator.update_learning_rate": [[177, 193], ["print"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", ">", "self", ".", "opt", ".", "niter", ":", "\n", "            ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "new_lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "", "else", ":", "\n", "            ", "new_lr", "=", "self", ".", "old_lr", "\n", "\n", "", "if", "new_lr", "!=", "self", ".", "old_lr", ":", "\n", "            ", "print", "(", "\"update learning rate: %f -> %f\"", "%", "(", "self", ".", "old_lr", ",", "new_lr", ")", ")", "\n", "self", ".", "old_lr", "=", "new_lr", "\n", "new_lr_G", "=", "new_lr", "/", "2", "\n", "new_lr_D", "=", "new_lr", "*", "2", "\n", "return", "False", ",", "{", "\"lr_D\"", ":", "new_lr_D", ",", "\"lr_G\"", ":", "new_lr_G", "}", "\n", "\n", "", "else", ":", "\n", "            ", "return", "False", ",", "{", "\"lr_D\"", ":", "new_lr", ",", "\"lr_G\"", ":", "new_lr", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.MultiscaleDiscriminator.forward": [[196, 208], ["discriminators.MultiscaleDiscriminator.named_children", "D", "result.append", "discriminators.MultiscaleDiscriminator.downsample"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.MultiscaleDiscriminator.downsample"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "get_intermediate_features", "=", "not", "self", ".", "opt", ".", "no_ganFeat_loss", "\n", "\n", "for", "name", ",", "D", "in", "self", ".", "named_children", "(", ")", ":", "\n", "            ", "out", "=", "D", "(", "input", ")", "\n", "if", "not", "get_intermediate_features", ":", "\n", "                ", "out", "=", "[", "out", "]", "\n", "", "result", ".", "append", "(", "out", ")", "\n", "input", "=", "self", ".", "downsample", "(", "input", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.define_D": [[210, 216], ["discriminators.MultiscaleDiscriminator", "net.cuda.init_weights", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "net.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.BaseNetwork.init_weights"], ["", "", "def", "define_D", "(", "opt", ")", ":", "\n", "    ", "net", "=", "MultiscaleDiscriminator", "(", "opt", ")", "\n", "net", ".", "init_weights", "(", "\"xavier\"", ",", "0.02", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "net", "=", "net", ".", "cuda", "(", ")", "\n", "", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.replicate.DataParallelWithCallback.replicate": [[64, 70], ["super().replicate", "replicate.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.replicate.DataParallelWithCallback.replicate", "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.replicate.execute_replication_callbacks"], ["def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelWithCallback", ",", "self", ")", ".", "replicate", "(", "\n", "module", ",", "device_ids", "\n", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.replicate.execute_replication_callbacks": [[27, 48], ["len", "enumerate", "list", "replicate.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created by original replication.\n\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n\n    We guarantee that the callback on the master copy (the first copy) will be called ahead of calling the callback\n    of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "\"__data_parallel_replicate__\"", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.replicate.patch_replication_callback": [[72, 97], ["isinstance", "functools.wraps", "old_replicate", "replicate.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.replicate.execute_replication_callbacks"], ["", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "\n", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.FutureResult.__init__": [[21, 25], ["threading.Lock", "threading.Condition"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_result", "=", "None", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_cond", "=", "threading", ".", "Condition", "(", "self", ".", "_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.FutureResult.put": [[26, 31], ["comm.FutureResult._cond.notify"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "result", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "assert", "self", ".", "_result", "is", "None", ",", "\"Previous result has't been fetched.\"", "\n", "self", ".", "_result", "=", "result", "\n", "self", ".", "_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.FutureResult.get": [[32, 40], ["comm.FutureResult._cond.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "if", "self", ".", "_result", "is", "None", ":", "\n", "                ", "self", ".", "_cond", ".", "wait", "(", ")", "\n", "\n", "", "res", "=", "self", ".", "_result", "\n", "self", ".", "_result", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.SlavePipe.run_slave": [[51, 56], ["comm.SlavePipe.queue.put", "comm.SlavePipe.result.get", "comm.SlavePipe.queue.put"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.FutureResult.put"], ["def", "run_slave", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "identifier", ",", "msg", ")", ")", "\n", "ret", "=", "self", ".", "result", ".", "get", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "True", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.SyncMaster.__init__": [[69, 79], ["queue.Queue", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_callback", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            master_callback: a callback to be invoked after having collected messages from slave devices.\n        \"\"\"", "\n", "self", ".", "_master_callback", "=", "master_callback", "\n", "self", ".", "_queue", "=", "queue", ".", "Queue", "(", ")", "\n", "self", ".", "_registry", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_activated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.SyncMaster.__getstate__": [[80, 82], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"master_callback\"", ":", "self", ".", "_master_callback", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.SyncMaster.__setstate__": [[83, 85], ["comm.SyncMaster.__init__"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__init__", "(", "state", "[", "\"master_callback\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.SyncMaster.register_slave": [[86, 105], ["comm.FutureResult", "_MasterRegistry", "comm.SlavePipe", "comm.SyncMaster._queue.empty", "comm.SyncMaster._registry.clear"], "methods", ["None"], ["", "def", "register_slave", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "\"\"\"\n        Register an slave device.\n\n        Args:\n            identifier: an identifier, usually is the device id.\n\n        Returns: a `SlavePipe` object which can be used to communicate with the master device.\n\n        \"\"\"", "\n", "if", "self", ".", "_activated", ":", "\n", "            ", "assert", "(", "\n", "self", ".", "_queue", ".", "empty", "(", ")", "\n", ")", ",", "\"Queue is not clean before next initialization.\"", "\n", "self", ".", "_activated", "=", "False", "\n", "self", ".", "_registry", ".", "clear", "(", ")", "\n", "", "future", "=", "FutureResult", "(", ")", "\n", "self", ".", "_registry", "[", "identifier", "]", "=", "_MasterRegistry", "(", "future", ")", "\n", "return", "SlavePipe", "(", "identifier", ",", "self", ".", "_queue", ",", "future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.SyncMaster.run_master": [[106, 140], ["range", "comm.SyncMaster._master_callback", "range", "intermediates.append", "comm.SyncMaster._registry[].result.put", "comm.SyncMaster._queue.get", "comm.SyncMaster._queue.get"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.FutureResult.get"], ["", "def", "run_master", "(", "self", ",", "master_msg", ")", ":", "\n", "        ", "\"\"\"\n        Main entry for the master device in each forward pass.\n        The messages were first collected from each devices (including the master device), and then\n        an callback will be invoked to compute the message to be sent back to each devices\n        (including the master device).\n\n        Args:\n            master_msg: the message that the master want to send to itself. This will be placed as the first\n            message when calling `master_callback`. For detailed usage, see `_SynchronizedBatchNorm` for an example.\n\n        Returns: the message to be sent back to the master device.\n\n        \"\"\"", "\n", "self", ".", "_activated", "=", "True", "\n", "\n", "intermediates", "=", "[", "(", "0", ",", "master_msg", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "intermediates", ".", "append", "(", "self", ".", "_queue", ".", "get", "(", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "_master_callback", "(", "intermediates", ")", "\n", "assert", "(", "\n", "results", "[", "0", "]", "[", "0", "]", "==", "0", "\n", ")", ",", "\"The first result should belongs to the master.\"", "\n", "\n", "for", "i", ",", "res", "in", "results", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_registry", "[", "i", "]", ".", "result", ".", "put", "(", "res", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "get", "(", ")", "is", "True", "\n", "\n", "", "return", "results", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.SyncMaster.nr_slaves": [[141, 144], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nr_slaves", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_registry", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.unittest.TorchTestCase.assertTensorClose": [[17, 28], ["float", "unittest.TorchTestCase.assertTrue", "float", "torch.allclose"], "methods", ["None"], ["    ", "def", "assertTensorClose", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "adiff", "=", "float", "(", "(", "x", "-", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "if", "(", "y", "==", "0", ")", ".", "all", "(", ")", ":", "\n", "            ", "rdiff", "=", "\"NaN\"", "\n", "", "else", ":", "\n", "            ", "rdiff", "=", "float", "(", "(", "adiff", "/", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "\n", "", "message", "=", "(", "\n", "\"Tensor close check failed\\n\"", "\"adiff={}\\n\"", "\"rdiff={}\\n\"", "\n", ")", ".", "format", "(", "adiff", ",", "rdiff", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "allclose", "(", "x", ",", "y", ")", ",", "message", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__": [[58, 72], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "SyncMaster"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", ":", "\n", "        ", "assert", "(", "\n", "ReduceAddCoalesced", "is", "not", "None", "\n", ")", ",", "\"Can not use Synchronized Batch Normalization without CUDA support.\"", "\n", "\n", "super", "(", "_SynchronizedBatchNorm", ",", "self", ")", ".", "__init__", "(", "\n", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", "\n", ")", "\n", "\n", "self", ".", "_sync_master", "=", "SyncMaster", "(", "self", ".", "_data_parallel_master", ")", "\n", "\n", "self", ".", "_is_parallel", "=", "False", "\n", "self", ".", "_parallel_id", "=", "None", "\n", "self", ".", "_slave_pipe", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward": [[73, 117], ["input.view.view.size", "input.view.view.view", "batchnorm._sum_ft", "batchnorm._sum_ft", "output.view", "torch.batch_norm", "torch.batch_norm", "input.view.view.size", "input.view.view.size", "input.view.view.size", "batchnorm._SynchronizedBatchNorm._sync_master.run_master", "batchnorm._SynchronizedBatchNorm._slave_pipe.run_slave", "_ChildMessage", "_ChildMessage", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.SyncMaster.run_master", "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.SlavePipe.run_slave", "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm._unsqueeze_ft"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# If it is not parallel computation or is in evaluation mode, use PyTorch's implementation.", "\n", "        ", "if", "not", "(", "self", ".", "_is_parallel", "and", "self", ".", "training", ")", ":", "\n", "            ", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "\n", "self", ".", "running_mean", ",", "\n", "self", ".", "running_var", ",", "\n", "self", ".", "weight", ",", "\n", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "\n", "self", ".", "momentum", ",", "\n", "self", ".", "eps", ",", "\n", ")", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "\n", "# Compute the sum and square-sum.", "\n", "sum_size", "=", "input", ".", "size", "(", "0", ")", "*", "input", ".", "size", "(", "2", ")", "\n", "input_sum", "=", "_sum_ft", "(", "input", ")", "\n", "input_ssum", "=", "_sum_ft", "(", "input", "**", "2", ")", "\n", "\n", "# Reduce-and-broadcast the statistics.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_sync_master", ".", "run_master", "(", "\n", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_slave_pipe", ".", "run_slave", "(", "\n", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", "\n", ")", "\n", "\n", "# Compute the output.", "\n", "", "if", "self", ".", "affine", ":", "\n", "# MJY:: Fuse the multiplication for speed.", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "\n", "inv_std", "*", "self", ".", "weight", "\n", ")", "+", "_unsqueeze_ft", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", ")", "\n", "\n", "# Reshape it.", "\n", "", "return", "output", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__": [[118, 127], ["ctx.sync_master.register_slave"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.SyncMaster.register_slave"], ["", "def", "__data_parallel_replicate__", "(", "self", ",", "ctx", ",", "copy_id", ")", ":", "\n", "        ", "self", ".", "_is_parallel", "=", "True", "\n", "self", ".", "_parallel_id", "=", "copy_id", "\n", "\n", "# parallel_id == 0 means master device.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "ctx", ".", "sync_master", "=", "self", ".", "_sync_master", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slave_pipe", "=", "ctx", ".", "sync_master", ".", "register_slave", "(", "copy_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm._SynchronizedBatchNorm._data_parallel_master": [[128, 154], ["sorted", "sum", "ReduceAddCoalesced.apply", "batchnorm._SynchronizedBatchNorm._compute_mean_std", "Broadcast.apply", "enumerate", "i[].sum.get_device", "outputs.append", "i[].sum.get_device", "_MasterMessage"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std"], ["", "", "def", "_data_parallel_master", "(", "self", ",", "intermediates", ")", ":", "\n", "        ", "\"\"\"Reduce the sum and square-sum, compute the statistics, and broadcast it.\"\"\"", "\n", "\n", "# Always using same \"device order\" makes the ReduceAdd operation faster.", "\n", "# Thanks to:: Tete Xiao (http://tetexiao.com/)", "\n", "intermediates", "=", "sorted", "(", "\n", "intermediates", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "\n", ")", "\n", "\n", "to_reduce", "=", "[", "i", "[", "1", "]", "[", ":", "2", "]", "for", "i", "in", "intermediates", "]", "\n", "to_reduce", "=", "[", "j", "for", "i", "in", "to_reduce", "for", "j", "in", "i", "]", "# flatten", "\n", "target_gpus", "=", "[", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "for", "i", "in", "intermediates", "]", "\n", "\n", "sum_size", "=", "sum", "(", "[", "i", "[", "1", "]", ".", "sum_size", "for", "i", "in", "intermediates", "]", ")", "\n", "sum_", ",", "ssum", "=", "ReduceAddCoalesced", ".", "apply", "(", "target_gpus", "[", "0", "]", ",", "2", ",", "*", "to_reduce", ")", "\n", "mean", ",", "inv_std", "=", "self", ".", "_compute_mean_std", "(", "sum_", ",", "ssum", ",", "sum_size", ")", "\n", "\n", "broadcasted", "=", "Broadcast", ".", "apply", "(", "target_gpus", ",", "mean", ",", "inv_std", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "intermediates", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "\n", "(", "rec", "[", "0", "]", ",", "_MasterMessage", "(", "*", "broadcasted", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", ")", ")", "\n", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std": [[155, 183], ["hasattr", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bias_var.clamp"], "methods", ["None"], ["", "def", "_compute_mean_std", "(", "self", ",", "sum_", ",", "ssum", ",", "size", ")", ":", "\n", "        ", "\"\"\"Compute the mean and standard-deviation with sum and square-sum. This method\n        also maintains the moving average on the master device.\"\"\"", "\n", "assert", "(", "\n", "size", ">", "1", "\n", ")", ",", "\"BatchNorm computes unbiased standard-deviation, which requires size > 1.\"", "\n", "mean", "=", "sum_", "/", "size", "\n", "sumvar", "=", "ssum", "-", "sum_", "*", "mean", "\n", "unbias_var", "=", "sumvar", "/", "(", "size", "-", "1", ")", "\n", "bias_var", "=", "sumvar", "/", "size", "\n", "\n", "if", "hasattr", "(", "torch", ",", "\"no_grad\"", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "running_mean", "=", "(", "\n", "1", "-", "self", ".", "momentum", "\n", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "\n", "1", "-", "self", ".", "momentum", "\n", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "running_mean", "=", "(", "\n", "1", "-", "self", ".", "momentum", "\n", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "\n", "1", "-", "self", ".", "momentum", "\n", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "\n", "", "return", "mean", ",", "bias_var", ".", "clamp", "(", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm.SynchronizedBatchNorm1d._check_input_dim": [[241, 247], ["super()._check_input_dim", "ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"expected 2D or 3D input (got {}D input)\"", ".", "format", "(", "input", ".", "dim", "(", ")", ")", "\n", ")", "\n", "", "super", "(", "SynchronizedBatchNorm1d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm.SynchronizedBatchNorm2d._check_input_dim": [[305, 311], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"expected 4D input (got {}D input)\"", ".", "format", "(", "input", ".", "dim", "(", ")", ")", "\n", ")", "\n", "", "super", "(", "SynchronizedBatchNorm2d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim": [[370, 376], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"expected 5D input (got {}D input)\"", ".", "format", "(", "input", ".", "dim", "(", ")", ")", "\n", ")", "\n", "", "super", "(", "SynchronizedBatchNorm3d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm._sum_ft": [[41, 44], ["tensor.sum().sum", "tensor.sum"], "function", ["None"], ["def", "_sum_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"sum over the first and last dimention\"\"\"", "\n", "return", "tensor", ".", "sum", "(", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm._unsqueeze_ft": [[46, 49], ["tensor.unsqueeze().unsqueeze", "tensor.unsqueeze"], "function", ["None"], ["", "def", "_unsqueeze_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"add new dimensions at the front and the tail\"\"\"", "\n", "return", "tensor", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm.patch_sync_batchnorm": [[378, 391], ["None"], "function", ["None"], ["", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "patch_sync_batchnorm", "(", ")", ":", "\n", "    ", "import", "torch", ".", "nn", "as", "nn", "\n", "\n", "backup", "=", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "\n", "\n", "nn", ".", "BatchNorm1d", "=", "SynchronizedBatchNorm1d", "\n", "nn", ".", "BatchNorm2d", "=", "SynchronizedBatchNorm2d", "\n", "nn", ".", "BatchNorm3d", "=", "SynchronizedBatchNorm3d", "\n", "\n", "yield", "\n", "\n", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "=", "backup", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm.convert_model": [[393, 443], ["isinstance", "zip", "module.named_children", "batchnorm.convert_model", "DataParallelWithCallback", "isinstance", "sync_module.add_module", "sync_module", "batchnorm.convert_model", "module.weight.data.clone().detach", "module.bias.data.clone().detach", "module.weight.data.clone", "module.bias.data.clone"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm.convert_model"], ["", "def", "convert_model", "(", "module", ")", ":", "\n", "    ", "\"\"\"Traverse the input module and its child recursively\n       and replace all instance of torch.nn.modules.batchnorm.BatchNorm*N*d\n       to SynchronizedBatchNorm*N*d\n\n    Args:\n        module: the input module needs to be convert to SyncBN model\n\n    Examples:\n        >>> import torch.nn as nn\n        >>> import torchvision\n        >>> # m is a standard pytorch model\n        >>> m = torchvision.models.resnet18(True)\n        >>> m = nn.DataParallel(m)\n        >>> # after convert, m is using SyncBN\n        >>> m = convert_model(m)\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "mod", "=", "module", ".", "module", "\n", "mod", "=", "convert_model", "(", "mod", ")", "\n", "mod", "=", "DataParallelWithCallback", "(", "mod", ")", "\n", "return", "mod", "\n", "\n", "", "mod", "=", "module", "\n", "for", "pth_module", ",", "sync_module", "in", "zip", "(", "\n", "[", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm1d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm2d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm3d", ",", "\n", "]", ",", "\n", "[", "\n", "SynchronizedBatchNorm1d", ",", "\n", "SynchronizedBatchNorm2d", ",", "\n", "SynchronizedBatchNorm3d", ",", "\n", "]", ",", "\n", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "pth_module", ")", ":", "\n", "            ", "mod", "=", "sync_module", "(", "\n", "module", ".", "num_features", ",", "module", ".", "eps", ",", "module", ".", "momentum", ",", "module", ".", "affine", "\n", ")", "\n", "mod", ".", "running_mean", "=", "module", ".", "running_mean", "\n", "mod", ".", "running_var", "=", "module", ".", "running_var", "\n", "if", "module", ".", "affine", ":", "\n", "                ", "mod", ".", "weight", ".", "data", "=", "module", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "mod", ".", "bias", ".", "data", "=", "module", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "", "", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "mod", ".", "add_module", "(", "name", ",", "convert_model", "(", "child", ")", ")", "\n", "\n", "", "return", "mod", "\n", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__": [[28, 39], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.locally_masked_convolution.locally_masked_conv2d.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_mean\"", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_var\"", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats": [[40, 43], ["batchnorm_reimpl.BatchNorm2dReimpl.running_mean.zero_", "batchnorm_reimpl.BatchNorm2dReimpl.running_var.fill_"], "methods", ["None"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters": [[44, 48], ["batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.zeros_", "torch.zeros_", "torch.zeros_"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_running_stats", "(", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "weight", ")", "\n", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.forward": [[49, 75], ["input_.permute().contiguous().view.permute().contiguous().view.size", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "input_.permute().contiguous().view.permute().contiguous().view.sum", "input_.permute().contiguous().view.permute().contiguous().view.pow().sum", "output.view().permute().contiguous", "batchnorm_reimpl.BatchNorm2dReimpl.bias.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "input_.permute().contiguous().view.permute().contiguous().view.pow", "mean.detach", "unbias_var.detach", "batchnorm_reimpl.BatchNorm2dReimpl.weight.unsqueeze", "output.view().permute", "inv_std.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute", "mean.unsqueeze", "output.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "batchsize", ",", "channels", ",", "height", ",", "width", "=", "input_", ".", "size", "(", ")", "\n", "numel", "=", "batchsize", "*", "height", "*", "width", "\n", "input_", "=", "input_", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "channels", ",", "numel", ")", "\n", "sum_", "=", "input_", ".", "sum", "(", "1", ")", "\n", "sum_of_square", "=", "input_", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "mean", "=", "sum_", "/", "numel", "\n", "sumvar", "=", "sum_of_square", "-", "sum_", "*", "mean", "\n", "\n", "self", ".", "running_mean", "=", "(", "\n", "1", "-", "self", ".", "momentum", "\n", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "detach", "(", ")", "\n", "unbias_var", "=", "sumvar", "/", "(", "numel", "-", "1", ")", "\n", "self", ".", "running_var", "=", "(", "\n", "1", "-", "self", ".", "momentum", "\n", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "detach", "(", ")", "\n", "\n", "bias_var", "=", "sumvar", "/", "numel", "\n", "inv_std", "=", "1", "/", "(", "bias_var", "+", "self", ".", "eps", ")", ".", "pow", "(", "0.5", ")", "\n", "output", "=", "(", "input_", "-", "mean", ".", "unsqueeze", "(", "1", ")", ")", "*", "inv_std", ".", "unsqueeze", "(", "\n", "1", "\n", ")", "*", "self", ".", "weight", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "bias", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "return", "(", "\n", "output", ".", "view", "(", "channels", ",", "batchsize", ",", "height", ",", "width", ")", "\n", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", ".", "contiguous", "(", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.z_buffer_manipulator.PtsManipulator.__init__": [[30, 49], ["torch.Module.__init__", "z_buffer_manipulator.get_splatter", "xs.view().repeat.view().repeat.view().repeat", "ys.view().repeat.view().repeat.view().repeat", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "z_buffer_manipulator.PtsManipulator.register_buffer", "xs.view().repeat.view().repeat.view", "ys.view().repeat.view().repeat.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "float", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "float", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "xs.view().repeat.view().repeat.size", "xs.view().repeat.view().repeat.size"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.z_buffer_manipulator.get_splatter"], ["    ", "def", "__init__", "(", "self", ",", "W", ",", "C", "=", "64", ",", "opt", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "self", ".", "splatter", "=", "get_splatter", "(", "\n", "opt", ".", "splatter", ",", "None", ",", "opt", ",", "size", "=", "W", ",", "C", "=", "C", ",", "points_per_pixel", "=", "opt", ".", "pp_pixel", "\n", ")", "\n", "\n", "xs", "=", "torch", ".", "linspace", "(", "0", ",", "W", "-", "1", ",", "W", ")", "/", "float", "(", "W", "-", "1", ")", "*", "2", "-", "1", "\n", "ys", "=", "torch", ".", "linspace", "(", "0", ",", "W", "-", "1", ",", "W", ")", "/", "float", "(", "W", "-", "1", ")", "*", "2", "-", "1", "\n", "\n", "xs", "=", "xs", ".", "view", "(", "1", ",", "1", ",", "1", ",", "W", ")", ".", "repeat", "(", "1", ",", "1", ",", "W", ",", "1", ")", "\n", "ys", "=", "ys", ".", "view", "(", "1", ",", "1", ",", "W", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "W", ")", "\n", "\n", "xyzs", "=", "torch", ".", "cat", "(", "\n", "(", "xs", ",", "-", "ys", ",", "-", "torch", ".", "ones", "(", "xs", ".", "size", "(", ")", ")", ",", "torch", ".", "ones", "(", "xs", ".", "size", "(", ")", ")", ")", ",", "1", "\n", ")", ".", "view", "(", "1", ",", "4", ",", "-", "1", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\"xyzs\"", ",", "xyzs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.z_buffer_manipulator.PtsManipulator.project_pts": [[50, 84], ["K_inv.bmm", "RT_cam2.bmm", "RT_cam2.bmm.bmm", "K.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor().unsqueeze().unsqueeze().to", "torch.Tensor().unsqueeze().unsqueeze().to", "torch.Tensor().unsqueeze().unsqueeze().to", "torch.Tensor().unsqueeze().unsqueeze().to", "mask.repeat", "xy_proj[].abs", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "project_pts", "(", "\n", "self", ",", "pts3D", ",", "K", ",", "K_inv", ",", "RT_cam1", ",", "RTinv_cam1", ",", "RT_cam2", ",", "RTinv_cam2", "\n", ")", ":", "\n", "# PERFORM PROJECTION", "\n", "# Project the world points into the new view", "\n", "        ", "projected_coors", "=", "self", ".", "xyzs", "*", "pts3D", "\n", "projected_coors", "[", ":", ",", "-", "1", ",", ":", "]", "=", "1", "\n", "\n", "# Transform into camera coordinate of the first view", "\n", "cam1_X", "=", "K_inv", ".", "bmm", "(", "projected_coors", ")", "\n", "\n", "# Transform into world coordinates", "\n", "RT", "=", "RT_cam2", ".", "bmm", "(", "RTinv_cam1", ")", "\n", "\n", "wrld_X", "=", "RT", ".", "bmm", "(", "cam1_X", ")", "\n", "\n", "# And intrinsics", "\n", "xy_proj", "=", "K", ".", "bmm", "(", "wrld_X", ")", "\n", "\n", "# And finally we project to get the final result", "\n", "mask", "=", "(", "xy_proj", "[", ":", ",", "2", ":", "3", ",", ":", "]", ".", "abs", "(", ")", "<", "EPS", ")", ".", "detach", "(", ")", "\n", "\n", "# Remove invalid zs that cause nans", "\n", "zs", "=", "xy_proj", "[", ":", ",", "2", ":", "3", ",", ":", "]", "\n", "zs", "[", "mask", "]", "=", "EPS", "\n", "\n", "sampler", "=", "torch", ".", "cat", "(", "(", "xy_proj", "[", ":", ",", "0", ":", "2", ",", ":", "]", "/", "-", "zs", ",", "xy_proj", "[", ":", ",", "2", ":", "3", ",", ":", "]", ")", ",", "1", ")", "\n", "sampler", "[", "mask", ".", "repeat", "(", "1", ",", "3", ",", "1", ")", "]", "=", "-", "10", "\n", "# Flip the ys", "\n", "sampler", "=", "sampler", "*", "torch", ".", "Tensor", "(", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "\n", "2", "\n", ")", ".", "to", "(", "sampler", ".", "device", ")", "\n", "\n", "return", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.z_buffer_manipulator.PtsManipulator.forward_justpts": [[85, 108], ["src.view.view.size", "z_buffer_manipulator.PtsManipulator.project_pts", "z_buffer_manipulator.PtsManipulator.permute().contiguous", "z_buffer_manipulator.PtsManipulator.splatter", "len", "pred_pts.view.view.view", "src.view.view.view", "pred_pts.view.view.size", "z_buffer_manipulator.PtsManipulator.permute"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.z_buffer_manipulator.PtsManipulator.project_pts"], ["", "def", "forward_justpts", "(", "\n", "self", ",", "src", ",", "pred_pts", ",", "K", ",", "K_inv", ",", "RT_cam1", ",", "RTinv_cam1", ",", "RT_cam2", ",", "RTinv_cam2", "\n", ")", ":", "\n", "# Now project these points into a new view", "\n", "        ", "bs", ",", "c", ",", "w", ",", "h", "=", "src", ".", "size", "(", ")", "\n", "\n", "if", "len", "(", "pred_pts", ".", "size", "(", ")", ")", ">", "3", ":", "\n", "# reshape into the right positioning", "\n", "            ", "pred_pts", "=", "pred_pts", ".", "view", "(", "bs", ",", "1", ",", "-", "1", ")", "\n", "src", "=", "src", ".", "view", "(", "bs", ",", "c", ",", "-", "1", ")", "\n", "\n", "", "pts3D", "=", "self", ".", "project_pts", "(", "\n", "pred_pts", ",", "K", ",", "K_inv", ",", "RT_cam1", ",", "RTinv_cam1", ",", "RT_cam2", ",", "RTinv_cam2", "\n", ")", "\n", "\n", "\n", "\n", "pointcloud", "=", "pts3D", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "result", ",", "background_mask", "=", "self", ".", "splatter", "(", "pointcloud", ",", "src", ")", "\n", "#import pdb", "\n", "#pdb.set_trace()", "\n", "\n", "return", "result", ",", "background_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.z_buffer_manipulator.PtsManipulator.forward_justpts2": [[109, 140], ["torch.cat.size", "torch.cat.size", "z_buffer_manipulator.PtsManipulator.project_pts2", "z_buffer_manipulator.PtsManipulator.permute().contiguous", "z_buffer_manipulator.PtsManipulator.splatter", "len", "pred_pts.view.view.view", "pred_pts2.view.view.view", "torch.cat.view", "torch.cat.view", "src2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pred_pts.view.view.size", "z_buffer_manipulator.PtsManipulator.permute"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.z_buffer_manipulator.PtsManipulator.project_pts2"], ["", "def", "forward_justpts2", "(", "\n", "self", ",", "src", ",", "pred_pts", ",", "K", ",", "K_inv", ",", "RT_cam1", ",", "RTinv_cam1", ",", "RT_cam2", ",", "RTinv_cam2", ",", "\n", "src2", ",", "\n", "pred_pts2", ",", "\n", "RT_cam_half", ",", "\n", "RTinv_cam_half", ",", "\n", ")", ":", "\n", "# Now project these points into a new view", "\n", "        ", "bs", ",", "c", ",", "w", ",", "h", "=", "src", ".", "size", "(", ")", "\n", "\n", "if", "len", "(", "pred_pts", ".", "size", "(", ")", ")", ">", "3", ":", "\n", "# reshape into the right positioning", "\n", "            ", "pred_pts", "=", "pred_pts", ".", "view", "(", "bs", ",", "1", ",", "-", "1", ")", "\n", "pred_pts2", "=", "pred_pts2", ".", "view", "(", "bs", ",", "1", ",", "-", "1", ")", "\n", "src1", "=", "src", ".", "view", "(", "bs", ",", "c", ",", "-", "1", ")", "\n", "src2", "=", "src2", ".", "view", "(", "bs", ",", "c", ",", "-", "1", ")", "\n", "src", "=", "torch", ".", "cat", "(", "[", "src1", ",", "src2", "]", ",", "axis", "=", "2", ")", "\n", "\n", "", "pts3D", "=", "self", ".", "project_pts2", "(", "\n", "pred_pts", ",", "K", ",", "K_inv", ",", "RT_cam1", ",", "RTinv_cam1", ",", "RT_cam2", ",", "RTinv_cam2", ",", "\n", "pred_pts2", ",", "RT_cam_half", ",", "RTinv_cam_half", "\n", ")", "\n", "\n", "\n", "\n", "pointcloud", "=", "pts3D", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "result", ",", "background_mask", "=", "self", ".", "splatter", "(", "pointcloud", ",", "src", ")", "\n", "#import pdb", "\n", "#pdb.set_trace()", "\n", "\n", "return", "result", ",", "background_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.z_buffer_manipulator.PtsManipulator.project_pts2": [[141, 183], ["K_inv.bmm", "K_inv.bmm", "RT_cam2.bmm", "RT_cam2.bmm", "RT_cam2.bmm.bmm", "RT_cam2.bmm.bmm", "K.bmm", "K.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor().unsqueeze().unsqueeze().to", "torch.Tensor().unsqueeze().unsqueeze().to", "torch.Tensor().unsqueeze().unsqueeze().to", "torch.Tensor().unsqueeze().unsqueeze().to", "mask.repeat", "xy_proj[].abs", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "project_pts2", "(", "\n", "self", ",", "pts3D", ",", "K", ",", "K_inv", ",", "RT_cam1", ",", "RTinv_cam1", ",", "RT_cam2", ",", "RTinv_cam2", ",", "pts3D2", ",", "RT_cam_half", ",", "RTinv_cam_half", "\n", ")", ":", "\n", "# PERFORM PROJECTION", "\n", "# Project the world points into the new view", "\n", "        ", "projected_coors", "=", "self", ".", "xyzs", "*", "pts3D", "\n", "projected_coors", "[", ":", ",", "-", "1", ",", ":", "]", "=", "1", "\n", "projected_coors2", "=", "self", ".", "xyzs", "*", "pts3D2", "\n", "projected_coors2", "[", ":", ",", "-", "1", ",", ":", "]", "=", "1", "\n", "\n", "# Transform into camera coordinate of the first view", "\n", "cam1_X", "=", "K_inv", ".", "bmm", "(", "projected_coors", ")", "\n", "cam1_X2", "=", "K_inv", ".", "bmm", "(", "projected_coors2", ")", "\n", "\n", "# Transform into world coordinates", "\n", "RT", "=", "RT_cam2", ".", "bmm", "(", "RTinv_cam1", ")", "\n", "RT2", "=", "RT_cam2", ".", "bmm", "(", "RTinv_cam_half", ")", "\n", "\n", "wrld_X", "=", "RT", ".", "bmm", "(", "cam1_X", ")", "\n", "wrld_X2", "=", "RT2", ".", "bmm", "(", "cam1_X2", ")", "\n", "\n", "# And intrinsics", "\n", "xy_proj1", "=", "K", ".", "bmm", "(", "wrld_X", ")", "\n", "xy_proj2", "=", "K", ".", "bmm", "(", "wrld_X2", ")", "\n", "\n", "xy_proj", "=", "torch", ".", "cat", "(", "[", "xy_proj1", ",", "xy_proj2", "]", ",", "axis", "=", "2", ")", "\n", "\n", "# And finally we project to get the final result", "\n", "mask", "=", "(", "xy_proj", "[", ":", ",", "2", ":", "3", ",", ":", "]", ".", "abs", "(", ")", "<", "EPS", ")", ".", "detach", "(", ")", "\n", "\n", "# Remove invalid zs that cause nans", "\n", "zs", "=", "xy_proj", "[", ":", ",", "2", ":", "3", ",", ":", "]", "\n", "zs", "[", "mask", "]", "=", "EPS", "\n", "\n", "sampler", "=", "torch", ".", "cat", "(", "(", "xy_proj", "[", ":", ",", "0", ":", "2", ",", ":", "]", "/", "-", "zs", ",", "xy_proj", "[", ":", ",", "2", ":", "3", ",", ":", "]", ")", ",", "1", ")", "\n", "sampler", "[", "mask", ".", "repeat", "(", "1", ",", "3", ",", "1", ")", "]", "=", "-", "10", "\n", "# Flip the ys", "\n", "sampler", "=", "sampler", "*", "torch", ".", "Tensor", "(", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "\n", "2", "\n", ")", ".", "to", "(", "sampler", ".", "device", ")", "\n", "\n", "return", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.z_buffer_manipulator.PtsManipulator.forward_justpts_cumulative": [[184, 220], ["src1[].view.size", "z_buffer_manipulator.PtsManipulator.project_pts_cumulative", "pts3D.permute().contiguous", "z_buffer_manipulator.PtsManipulator.splatter", "last_background_mask.view.view.view", "len", "pred_pts[].view.view", "src1[].view.view", "pred_pts[].view.size", "pred_pts[].view", "src1[].view", "src2.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pts3D.permute", "last_background_mask.view.view.repeat"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.z_buffer_manipulator.PtsManipulator.project_pts_cumulative"], ["", "def", "forward_justpts_cumulative", "(", "\n", "self", ",", "src1", ",", "pred_pts", ",", "K", ",", "K_inv", ",", "RT_cam1", ",", "RTinv_cam1", ",", "RT_cam2", ",", "RTinv_cam2", ",", "prior_point_cloud", ",", "src2", ",", "last_background_mask", ",", "RTinv_cam3", "\n", ")", ":", "\n", "# Now project these points into a new view", "\n", "        ", "bs", ",", "c", ",", "w", ",", "h", "=", "src1", ".", "size", "(", ")", "\n", "\n", "# we only want to add new (outpainted) points to the point cloud", "\n", "# so we multiple the inputs by whether the last_background_mask is True", "\n", "if", "last_background_mask", "is", "not", "None", ":", "\n", "            ", "last_background_mask", "=", "last_background_mask", ".", "view", "(", "bs", ",", "1", ",", "-", "1", ")", "\n", "\n", "", "if", "len", "(", "pred_pts", ".", "size", "(", ")", ")", ">", "3", ":", "\n", "# reshape into the right positioning", "\n", "            ", "pred_pts", "=", "pred_pts", ".", "view", "(", "bs", ",", "1", ",", "-", "1", ")", "\n", "src1", "=", "src1", ".", "view", "(", "bs", ",", "c", ",", "-", "1", ")", "\n", "if", "src2", "is", "not", "None", ":", "\n", "#print('b4',src1.shape, pred_pts.shape)", "\n", "                ", "pred_pts", "=", "pred_pts", "[", "last_background_mask", "==", "True", "]", ".", "view", "(", "bs", ",", "1", ",", "-", "1", ")", "\n", "src1", "=", "src1", "[", "last_background_mask", ".", "repeat", "(", "1", ",", "c", ",", "1", ")", "==", "True", "]", ".", "view", "(", "bs", ",", "c", ",", "-", "1", ")", "\n", "\n", "src2", "=", "src2", ".", "view", "(", "bs", ",", "c", ",", "-", "1", ")", "\n", "#print(src1.shape, pred_pts.shape)", "\n", "src", "=", "torch", ".", "cat", "(", "[", "src1", ",", "src2", "]", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "                ", "src", "=", "src1", "\n", "\n", "", "", "pts3D", ",", "new_point_cloud", "=", "self", ".", "project_pts_cumulative", "(", "\n", "pred_pts", ",", "K", ",", "K_inv", ",", "RT_cam1", ",", "RTinv_cam1", ",", "RT_cam2", ",", "RTinv_cam2", ",", "prior_point_cloud", ",", "last_background_mask", ",", "RTinv_cam3", "\n", ")", "\n", "\n", "pointcloud", "=", "pts3D", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "result", ",", "background_mask", "=", "self", ".", "splatter", "(", "pointcloud", ",", "src", ")", "\n", "#import pdb", "\n", "#pdb.set_trace()", "\n", "\n", "return", "result", ",", "background_mask", ",", "new_point_cloud", ",", "src", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.z_buffer_manipulator.PtsManipulator.project_pts_cumulative": [[221, 267], ["K_inv.bmm", "RT_cam2.bmm", "RT_cam2.bmm.bmm", "K.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "RT_cam2.bmm", "RT_cam2.bmm.bmm", "K.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor().unsqueeze().unsqueeze().to", "torch.Tensor().unsqueeze().unsqueeze().to", "torch.Tensor().unsqueeze().unsqueeze().to", "torch.Tensor().unsqueeze().unsqueeze().to", "z_buffer_manipulator.PtsManipulator.xyzs[].view", "mask.repeat", "xy_proj[].abs", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "last_background_mask.repeat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "project_pts_cumulative", "(", "\n", "self", ",", "pts3D", ",", "K", ",", "K_inv", ",", "RT_cam1", ",", "RTinv_cam1", ",", "RT_cam2", ",", "RTinv_cam2", ",", "prior_point_cloud", "=", "None", ",", "last_background_mask", "=", "None", ",", "RTinv_cam3", "=", "None", "\n", ")", ":", "\n", "# PERFORM PROJECTION", "\n", "# Project the world points into the new view", "\n", "        ", "if", "last_background_mask", "is", "not", "None", ":", "\n", "            ", "bs", ",", "c", ",", "l", "=", "self", ".", "xyzs", ".", "shape", "\n", "projected_coors", "=", "self", ".", "xyzs", "[", "last_background_mask", ".", "repeat", "(", "1", ",", "4", ",", "1", ")", "==", "True", "]", ".", "view", "(", "[", "bs", ",", "c", ",", "-", "1", "]", ")", "*", "pts3D", "\n", "", "else", ":", "\n", "            ", "projected_coors", "=", "self", ".", "xyzs", "*", "pts3D", "\n", "", "projected_coors", "[", ":", ",", "-", "1", ",", ":", "]", "=", "1", "\n", "\n", "# Transform into camera coordinate of the first view", "\n", "cam1_X", "=", "K_inv", ".", "bmm", "(", "projected_coors", ")", "\n", "\n", "# Transform into world coordinates", "\n", "RT", "=", "RT_cam2", ".", "bmm", "(", "RTinv_cam1", ")", "\n", "\n", "wrld_X", "=", "RT", ".", "bmm", "(", "cam1_X", ")", "\n", "\n", "# And intrinsics", "\n", "xy_proj1", "=", "K", ".", "bmm", "(", "wrld_X", ")", "\n", "\n", "if", "prior_point_cloud", "is", "not", "None", ":", "\n", "            ", "RT_last", "=", "RT_cam2", ".", "bmm", "(", "RTinv_cam3", ")", "\n", "wrld_Xlast", "=", "RT_last", ".", "bmm", "(", "prior_point_cloud", ")", "\n", "xy_proj2", "=", "K", ".", "bmm", "(", "wrld_Xlast", ")", "\n", "xy_proj", "=", "torch", ".", "cat", "(", "[", "xy_proj1", ",", "xy_proj2", "]", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "xy_proj", "=", "xy_proj1", "\n", "\n", "# And finally we project to get the final result", "\n", "", "mask", "=", "(", "xy_proj", "[", ":", ",", "2", ":", "3", ",", ":", "]", ".", "abs", "(", ")", "<", "EPS", ")", ".", "detach", "(", ")", "\n", "\n", "# Remove invalid zs that cause nans", "\n", "zs", "=", "xy_proj", "[", ":", ",", "2", ":", "3", ",", ":", "]", "\n", "zs", "[", "mask", "]", "=", "EPS", "\n", "\n", "sampler", "=", "torch", ".", "cat", "(", "(", "xy_proj", "[", ":", ",", "0", ":", "2", ",", ":", "]", "/", "-", "zs", ",", "xy_proj", "[", ":", ",", "2", ":", "3", ",", ":", "]", ")", ",", "1", ")", "\n", "sampler", "[", "mask", ".", "repeat", "(", "1", ",", "3", ",", "1", ")", "]", "=", "-", "10", "\n", "# Flip the ys", "\n", "sampler", "=", "sampler", "*", "torch", ".", "Tensor", "(", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "\n", "2", "\n", ")", ".", "to", "(", "sampler", ".", "device", ")", "\n", "\n", "return", "sampler", ",", "xy_proj", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.z_buffer_manipulator.PtsManipulator.forward": [[268, 295], ["src.view.view.size", "z_buffer_manipulator.PtsManipulator.project_pts", "z_buffer_manipulator.PtsManipulator.splatter", "len", "pred_pts.view.view.view", "src.view.view.view", "alphas.view().permute().contiguous.view().permute().contiguous.view().permute().contiguous", "z_buffer_manipulator.PtsManipulator.permute().contiguous", "pred_pts.view.view.size", "alphas.view().permute().contiguous.view().permute().contiguous.view().permute", "z_buffer_manipulator.PtsManipulator.permute", "alphas.view().permute().contiguous.view().permute().contiguous.view"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.z_buffer_manipulator.PtsManipulator.project_pts"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "alphas", ",", "\n", "src", ",", "\n", "pred_pts", ",", "\n", "K", ",", "\n", "K_inv", ",", "\n", "RT_cam1", ",", "\n", "RTinv_cam1", ",", "\n", "RT_cam2", ",", "\n", "RTinv_cam2", ",", "\n", ")", ":", "\n", "# Now project these points into a new view", "\n", "        ", "bs", ",", "c", ",", "w", ",", "h", "=", "src", ".", "size", "(", ")", "\n", "\n", "if", "len", "(", "pred_pts", ".", "size", "(", ")", ")", ">", "3", ":", "\n", "# reshape into the right positioning", "\n", "            ", "pred_pts", "=", "pred_pts", ".", "view", "(", "bs", ",", "1", ",", "-", "1", ")", "\n", "src", "=", "src", ".", "view", "(", "bs", ",", "c", ",", "-", "1", ")", "\n", "alphas", "=", "alphas", ".", "view", "(", "bs", ",", "1", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "pts3D", "=", "self", ".", "project_pts", "(", "\n", "pred_pts", ",", "K", ",", "K_inv", ",", "RT_cam1", ",", "RTinv_cam1", ",", "RT_cam2", ",", "RTinv_cam2", "\n", ")", "\n", "result", "=", "self", ".", "splatter", "(", "pts3D", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ",", "alphas", ",", "src", ")", "\n", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.z_buffer_manipulator.get_splatter": [[11, 27], ["RasterizePointsXYsBlending", "NotImplementedError"], "function", ["None"], ["def", "get_splatter", "(", "\n", "name", ",", "depth_values", ",", "opt", "=", "None", ",", "size", "=", "256", ",", "C", "=", "64", ",", "points_per_pixel", "=", "8", "\n", ")", ":", "\n", "    ", "if", "name", "==", "\"xyblending\"", ":", "\n", "        ", "from", "models", ".", "layers", ".", "z_buffer_layers", "import", "RasterizePointsXYsBlending", "\n", "\n", "return", "RasterizePointsXYsBlending", "(", "\n", "C", ",", "\n", "learn_feature", "=", "opt", ".", "learn_default_feature", ",", "\n", "radius", "=", "opt", ".", "radius", ",", "\n", "size", "=", "size", ",", "\n", "points_per_pixel", "=", "points_per_pixel", ",", "\n", "opts", "=", "opt", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.depth_manipulator.DepthManipulator.__init__": [[18, 30], ["torch.Module.__init__", "numpy.meshgrid", "xs.reshape.reshape.reshape", "ys.reshape.reshape.reshape", "numpy.vstack", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "numpy.linspace", "numpy.linspace", "depth_manipulator.DepthManipulator.grid.cuda", "numpy.ones", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["def", "__init__", "(", "self", ",", "W", "=", "256", ")", ":", "\n", "        ", "super", "(", "DepthManipulator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Set up default grid using clip coordinates (e.g. between [-1, 1])", "\n", "xs", ",", "ys", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "W", ")", ",", "np", ".", "linspace", "(", "1", ",", "-", "1", ",", "W", ")", ")", "\n", "xs", "=", "xs", ".", "reshape", "(", "1", ",", "W", ",", "W", ")", "\n", "ys", "=", "ys", ".", "reshape", "(", "1", ",", "W", ",", "W", ")", "\n", "xys", "=", "np", ".", "vstack", "(", "(", "xs", ",", "ys", ",", "-", "np", ".", "ones", "(", "xs", ".", "shape", ")", ",", "np", ".", "ones", "(", "xs", ".", "shape", ")", ")", ")", "\n", "\n", "self", ".", "grid", "=", "torch", ".", "Tensor", "(", "xys", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "grid", "=", "self", ".", "grid", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.depth_manipulator.DepthManipulator.homogenize": [[31, 36], ["torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xys.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "xys.size", "xys.size"], "methods", ["None"], ["", "", "def", "homogenize", "(", "self", ",", "xys", ")", ":", "\n", "        ", "assert", "xys", ".", "size", "(", "1", ")", "<=", "3", "\n", "ones", "=", "torch", ".", "ones", "(", "xys", ".", "size", "(", "0", ")", ",", "1", ",", "xys", ".", "size", "(", "2", ")", ")", ".", "to", "(", "xys", ".", "device", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "(", "xys", ",", "ones", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.projection.depth_manipulator.DepthManipulator.project_zbuffer": [[37, 105], ["depth.size", "depth_manipulator.DepthManipulator.grid.to().repeat().detach", "xys.view.view.view", "K_inv.bmm", "RT_cam2.bmm", "RT_cam2.bmm.bmm", "K.bmm", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "print", "tsampler.view.view.view", "xy_proj[].sort", "torch.linspace().long().unsqueeze().repeat().to().unsqueeze", "torch.linspace().long().unsqueeze().repeat().to().unsqueeze", "torch.linspace().long().unsqueeze().repeat().to().unsqueeze", "torch.linspace().long().unsqueeze().repeat().to().unsqueeze", "tsampler[].long", "tsampler[].long", "xs.clamp.clamp.clamp", "ys.clamp.clamp.clamp", "orig_xys[].view", "depth_manipulator.DepthManipulator.grid.to().repeat", "mask.repeat", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "xy_proj[].view", "xy_proj[].abs", "torch.linspace().long().unsqueeze().repeat().to", "torch.linspace().long().unsqueeze().repeat().to", "torch.linspace().long().unsqueeze().repeat().to", "torch.linspace().long().unsqueeze().repeat().to", "mask.float().max", "depth_manipulator.DepthManipulator.grid.to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.linspace().long().unsqueeze().repeat", "torch.linspace().long().unsqueeze().repeat", "torch.linspace().long().unsqueeze().repeat", "torch.linspace().long().unsqueeze().repeat", "mask.float", "torch.linspace().long().unsqueeze", "torch.linspace().long().unsqueeze", "torch.linspace().long().unsqueeze", "torch.linspace().long().unsqueeze", "torch.linspace().long", "torch.linspace().long", "torch.linspace().long", "torch.linspace().long", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["None"], ["", "def", "project_zbuffer", "(", "self", ",", "depth", ",", "K", ",", "K_inv", ",", "RTinv_cam1", ",", "RT_cam2", ")", ":", "\n", "        ", "\"\"\" Determine the sampler that comes from projecting\n        the given depth according to the given camera parameters.\n        \"\"\"", "\n", "bs", ",", "_", ",", "w", ",", "h", "=", "depth", ".", "size", "(", ")", "\n", "\n", "# Obtain unprojected coordinates", "\n", "orig_xys", "=", "self", ".", "grid", ".", "to", "(", "depth", ".", "device", ")", ".", "repeat", "(", "bs", ",", "1", ",", "1", ",", "1", ")", ".", "detach", "(", ")", "\n", "xys", "=", "orig_xys", "*", "depth", "\n", "xys", "[", ":", ",", "-", "1", ",", ":", "]", "=", "1", "\n", "\n", "xys", "=", "xys", ".", "view", "(", "bs", ",", "4", ",", "-", "1", ")", "\n", "\n", "# Transform into camera coordinate of the first view", "\n", "cam1_X", "=", "K_inv", ".", "bmm", "(", "xys", ")", "\n", "\n", "# Transform into world coordinates", "\n", "RT", "=", "RT_cam2", ".", "bmm", "(", "RTinv_cam1", ")", "\n", "wrld_X", "=", "RT", ".", "bmm", "(", "cam1_X", ")", "\n", "\n", "# And intrinsics", "\n", "xy_proj", "=", "K", ".", "bmm", "(", "wrld_X", ")", "\n", "\n", "# And finally we project to get the final result", "\n", "mask", "=", "(", "xy_proj", "[", ":", ",", "2", ":", "3", ",", ":", "]", ".", "abs", "(", ")", "<", "EPS", ")", ".", "detach", "(", ")", "\n", "sampler", "=", "xy_proj", "[", ":", ",", "0", ":", "2", ",", ":", "]", "/", "-", "xy_proj", "[", ":", ",", "2", ":", "3", ",", ":", "]", "\n", "sampler", "[", "mask", ".", "repeat", "(", "1", ",", "2", ",", "1", ")", "]", "=", "-", "10", "\n", "sampler", "[", ":", ",", "1", ",", ":", "]", "=", "-", "sampler", "[", ":", ",", "1", ",", ":", "]", "\n", "sampler", "[", ":", ",", "0", ",", ":", "]", "=", "sampler", "[", ":", ",", "0", ",", ":", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "print", "(", "\n", "\"Warning : not backpropagating through the \"", "\n", "+", "\"projection -- is this what you want??\"", "\n", ")", "\n", "tsampler", "=", "(", "sampler", "+", "1", ")", "*", "128", "\n", "tsampler", "=", "tsampler", ".", "view", "(", "bs", ",", "2", ",", "-", "1", ")", "\n", "zs", ",", "sampler_inds", "=", "xy_proj", "[", ":", ",", "2", ":", "3", ",", ":", "]", ".", "sort", "(", "\n", "dim", "=", "2", ",", "descending", "=", "True", "\n", ")", "# Hack for how it's going to be understood by scatter: enforces that", "\n", "# nearer points are the ones rendered.", "\n", "bsinds", "=", "(", "\n", "torch", ".", "linspace", "(", "0", ",", "bs", "-", "1", ",", "bs", ")", "\n", ".", "long", "(", ")", "\n", ".", "unsqueeze", "(", "1", ")", "\n", ".", "repeat", "(", "1", ",", "w", "*", "h", ")", "\n", ".", "to", "(", "sampler", ".", "device", ")", "\n", ".", "unsqueeze", "(", "1", ")", "\n", ")", "\n", "\n", "xs", "=", "tsampler", "[", "bsinds", ",", "0", ",", "sampler_inds", "]", ".", "long", "(", ")", "\n", "ys", "=", "tsampler", "[", "bsinds", ",", "1", ",", "sampler_inds", "]", ".", "long", "(", ")", "\n", "mask", "=", "(", "tsampler", "<", "0", ")", "|", "(", "tsampler", ">", "255", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "*", "4", "\n", "\n", "xs", "=", "xs", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "255", ")", "\n", "ys", "=", "ys", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "255", ")", "\n", "\n", "bilinear_sampler", "=", "torch", ".", "zeros", "(", "bs", ",", "2", ",", "w", ",", "h", ")", ".", "to", "(", "sampler", ".", "device", ")", "-", "2", "\n", "orig_xys", "=", "orig_xys", "[", ":", ",", ":", "2", ",", ":", ",", ":", "]", ".", "view", "(", "(", "bs", ",", "2", ",", "-", "1", ")", ")", "\n", "bilinear_sampler", "[", "bsinds", ",", "0", ",", "ys", ",", "xs", "]", "=", "(", "\n", "orig_xys", "[", "bsinds", ",", "0", ",", "sampler_inds", "]", "+", "mask", "\n", ")", "\n", "bilinear_sampler", "[", "bsinds", ",", "1", ",", "ys", ",", "xs", "]", "=", "(", "\n", "-", "orig_xys", "[", "bsinds", ",", "1", ",", "sampler_inds", "]", "+", "mask", "\n", ")", "\n", "\n", "", "return", "bilinear_sampler", ",", "-", "xy_proj", "[", ":", ",", "2", ":", "3", ",", ":", "]", ".", "view", "(", "bs", ",", "1", ",", "w", ",", "h", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.sample.sample": [[8, 74], ["torch.clone", "torch.clone", "torch.clone", "torch.one_hot().permute().to", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "model.eval", "F.one_hot().permute().to.clone().cuda", "range", "torch.CrossEntropyLoss", "enumerate", "nn.CrossEntropyLoss.", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "numpy.random.randint", "set", "range", "numpy.array", "sample_indices.append", "tqdm.tqdm", "torch.autograd.Variable", "model", "range", "torch.one_hot().permute", "F.one_hot().permute().to.clone", "range", "len", "torch.softmax", "torch.softmax", "torch.softmax", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "range", "torch.one_hot().to", "np.array.append", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.one_hot", "set.add", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.one_hot", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "function", ["None"], ["from", "vqvae", "import", "VQVAE", "\n", "from", "pixelsnail", "import", "PixelSNAIL", "\n", "\n", "\n", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample_model", "(", "model", ",", "device", ",", "batch", ",", "size", ",", "temperature", ",", "condition", "=", "None", ")", ":", "\n", "    ", "row", "=", "torch", ".", "zeros", "(", "batch", ",", "*", "size", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "to", "(", "device", ")", "\n", "cache", "=", "{", "}", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "size", "[", "0", "]", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "size", "[", "1", "]", ")", ":", "\n", "            ", "out", ",", "cache", "=", "model", "(", "row", "[", ":", ",", ":", "i", "+", "1", ",", ":", "]", ",", "condition", "=", "condition", ",", "cache", "=", "cache", ")", "\n", "prob", "=", "torch", ".", "softmax", "(", "out", "[", ":", ",", ":", ",", "i", ",", "j", "]", "/", "temperature", ",", "1", ")", "\n", "sample", "=", "torch", ".", "multinomial", "(", "prob", ",", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "row", "[", ":", ",", "i", ",", "j", "]", "=", "sample", "\n", "\n", "", "", "return", "row", "\n", "\n", "\n", "", "def", "load_model", "(", "model", ",", "checkpoint", ",", "device", ")", ":", "\n", "    ", "ckpt", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "'checkpoint'", ",", "checkpoint", ")", ")", "\n", "\n", "\n", "if", "'args'", "in", "ckpt", ":", "\n", "        ", "args", "=", "ckpt", "[", "'args'", "]", "\n", "\n", "", "if", "model", "==", "'vqvae'", ":", "\n", "        ", "model", "=", "VQVAE", "(", ")", "\n", "\n", "", "elif", "model", "==", "'pixelsnail_top'", ":", "\n", "        ", "model", "=", "PixelSNAIL", "(", "\n", "[", "32", ",", "32", "]", ",", "\n", "512", ",", "\n", "args", ".", "channel", ",", "\n", "5", ",", "\n", "4", ",", "\n", "args", ".", "n_res_block", ",", "\n", "args", ".", "n_res_channel", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "n_out_res_block", "=", "args", ".", "n_out_res_block", ",", "\n", ")", "\n", "\n", "", "elif", "model", "==", "'pixelsnail_bottom'", ":", "\n", "        ", "model", "=", "PixelSNAIL", "(", "\n", "[", "64", ",", "64", "]", ",", "\n", "512", ",", "\n", "args", ".", "channel", ",", "\n", "5", ",", "\n", "4", ",", "\n", "args", ".", "n_res_block", ",", "\n", "args", ".", "n_res_channel", ",", "\n", "attention", "=", "False", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "n_cond_res_block", "=", "args", ".", "n_cond_res_block", ",", "\n", "cond_res_channel", "=", "args", ".", "n_res_channel", ",", "\n", ")", "\n", "\n", "", "if", "'model'", "in", "ckpt", ":", "\n", "        ", "ckpt", "=", "ckpt", "[", "'model'", "]", "\n", "\n", "", "model", ".", "load_state_dict", "(", "ckpt", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "return", "model", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.layers.nin.__init__": [[21, 28], ["torch.Module.__init__", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "weight_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "nin", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "weight_norm", ":", "\n", "            ", "self", ".", "lin_a", "=", "wn", "(", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "lin_a", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", "\n", "", "self", ".", "dim_out", "=", "dim_out", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.layers.nin.forward": [[29, 39], ["x.permute.permute.permute", "layers.nin.lin_a", "out.view.view.view", "out.view.view.permute", "int", "x.permute.permute.contiguous().view", "x.permute.permute.size", "x.permute.permute.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "og_x", "=", "x", "\n", "# assumes pytorch ordering", "\n", "\"\"\" a network in network layer (1x1 CONV) \"\"\"", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "shp", "=", "[", "int", "(", "y", ")", "for", "y", "in", "x", ".", "size", "(", ")", "]", "\n", "out", "=", "self", ".", "lin_a", "(", "x", ".", "contiguous", "(", ")", ".", "view", "(", "shp", "[", "0", "]", "*", "shp", "[", "1", "]", "*", "shp", "[", "2", "]", ",", "shp", "[", "3", "]", ")", ")", "\n", "shp", "[", "-", "1", "]", "=", "self", ".", "dim_out", "\n", "out", "=", "out", ".", "view", "(", "shp", ")", "\n", "return", "out", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.layers.down_shifted_conv2d.__init__": [[42, 62], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "int", "int", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "down_shift", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.down_shift"], ["    ", "def", "__init__", "(", "self", ",", "num_filters_in", ",", "num_filters_out", ",", "filter_size", "=", "(", "2", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "shift_output_down", "=", "False", ",", "norm", "=", "'weight_norm'", ")", ":", "\n", "        ", "super", "(", "down_shifted_conv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "norm", "in", "[", "None", ",", "'batch_norm'", ",", "'weight_norm'", "]", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "num_filters_in", ",", "num_filters_out", ",", "filter_size", ",", "stride", ")", "\n", "self", ".", "shift_output_down", "=", "shift_output_down", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "(", "int", "(", "(", "filter_size", "[", "1", "]", "-", "1", ")", "/", "2", ")", ",", "# pad left", "\n", "int", "(", "(", "filter_size", "[", "1", "]", "-", "1", ")", "/", "2", ")", ",", "# pad right", "\n", "filter_size", "[", "0", "]", "-", "1", ",", "# pad top", "\n", "0", ")", ")", "# pad down", "\n", "\n", "if", "norm", "==", "'weight_norm'", ":", "\n", "            ", "self", ".", "conv", "=", "wn", "(", "self", ".", "conv", ")", "\n", "", "elif", "norm", "==", "'batch_norm'", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_filters_out", ")", "\n", "\n", "", "if", "shift_output_down", ":", "\n", "            ", "self", ".", "down_shift", "=", "lambda", "x", ":", "down_shift", "(", "x", ",", "pad", "=", "nn", ".", "ZeroPad2d", "(", "(", "0", ",", "0", ",", "1", ",", "0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.layers.down_shifted_conv2d.forward": [[63, 69], ["layers.down_shifted_conv2d.pad", "layers.down_shifted_conv2d.conv", "layers.down_shifted_conv2d.bn", "layers.down_shifted_conv2d.down_shift"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.down_shift"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "assert", "mask", "is", "None", "\n", "x", "=", "self", ".", "pad", "(", "x", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "if", "self", ".", "norm", "==", "'batch_norm'", "else", "x", "\n", "return", "self", ".", "down_shift", "(", "x", ")", "if", "self", ".", "shift_output_down", "else", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.layers.down_shifted_deconv2d.__init__": [[72, 78], ["torch.Module.__init__", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_filters_in", ",", "num_filters_out", ",", "filter_size", "=", "(", "2", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ":", "\n", "        ", "super", "(", "down_shifted_deconv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "deconv", "=", "wn", "(", "nn", ".", "ConvTranspose2d", "(", "num_filters_in", ",", "num_filters_out", ",", "filter_size", ",", "stride", ",", "\n", "output_padding", "=", "1", ")", ")", "\n", "self", ".", "filter_size", "=", "filter_size", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.layers.down_shifted_deconv2d.forward": [[79, 85], ["layers.down_shifted_deconv2d.deconv", "int", "layers.down_shifted_deconv2d.size", "int", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "assert", "mask", "is", "None", "\n", "x", "=", "self", ".", "deconv", "(", "x", ")", "\n", "xs", "=", "[", "int", "(", "y", ")", "for", "y", "in", "x", ".", "size", "(", ")", "]", "\n", "return", "x", "[", ":", ",", ":", ",", ":", "(", "xs", "[", "2", "]", "-", "self", ".", "filter_size", "[", "0", "]", "+", "1", ")", ",", "\n", "int", "(", "(", "self", ".", "filter_size", "[", "1", "]", "-", "1", ")", "/", "2", ")", ":", "(", "xs", "[", "3", "]", "-", "int", "(", "(", "self", ".", "filter_size", "[", "1", "]", "-", "1", ")", "/", "2", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.layers.down_right_shifted_conv2d.__init__": [[88, 105], ["torch.Module.__init__", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "right_shift", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.right_shift"], ["    ", "def", "__init__", "(", "self", ",", "num_filters_in", ",", "num_filters_out", ",", "filter_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "shift_output_right", "=", "False", ",", "norm", "=", "'weight_norm'", ")", ":", "\n", "        ", "super", "(", "down_right_shifted_conv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "norm", "in", "[", "None", ",", "'batch_norm'", ",", "'weight_norm'", "]", "\n", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "(", "filter_size", "[", "1", "]", "-", "1", ",", "0", ",", "filter_size", "[", "0", "]", "-", "1", ",", "0", ")", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "num_filters_in", ",", "num_filters_out", ",", "filter_size", ",", "stride", "=", "stride", ")", "\n", "self", ".", "shift_output_right", "=", "shift_output_right", "\n", "self", ".", "norm", "=", "norm", "\n", "\n", "if", "norm", "==", "'weight_norm'", ":", "\n", "            ", "self", ".", "conv", "=", "wn", "(", "self", ".", "conv", ")", "\n", "", "elif", "norm", "==", "'batch_norm'", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_filters_out", ")", "\n", "\n", "", "if", "shift_output_right", ":", "\n", "            ", "self", ".", "right_shift", "=", "lambda", "x", ":", "right_shift", "(", "x", ",", "pad", "=", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "0", ",", "0", ",", "0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.layers.down_right_shifted_conv2d.forward": [[106, 112], ["layers.down_right_shifted_conv2d.pad", "layers.down_right_shifted_conv2d.conv", "layers.down_right_shifted_conv2d.bn", "layers.down_right_shifted_conv2d.right_shift"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.right_shift"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "assert", "mask", "is", "None", "\n", "x", "=", "self", ".", "pad", "(", "x", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "if", "self", ".", "norm", "==", "'batch_norm'", "else", "x", "\n", "return", "self", ".", "right_shift", "(", "x", ")", "if", "self", ".", "shift_output_right", "else", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.layers.down_right_shifted_deconv2d.__init__": [[115, 122], ["torch.Module.__init__", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_filters_in", ",", "num_filters_out", ",", "filter_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "shift_output_right", "=", "False", ")", ":", "\n", "        ", "super", "(", "down_right_shifted_deconv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "deconv", "=", "wn", "(", "nn", ".", "ConvTranspose2d", "(", "num_filters_in", ",", "num_filters_out", ",", "filter_size", ",", "\n", "stride", ",", "output_padding", "=", "1", ")", ")", "\n", "self", ".", "filter_size", "=", "filter_size", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.layers.down_right_shifted_deconv2d.forward": [[123, 129], ["layers.down_right_shifted_deconv2d.deconv", "int", "layers.down_right_shifted_deconv2d.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "assert", "mask", "is", "None", "\n", "x", "=", "self", ".", "deconv", "(", "x", ")", "\n", "xs", "=", "[", "int", "(", "y", ")", "for", "y", "in", "x", ".", "size", "(", ")", "]", "\n", "x", "=", "x", "[", ":", ",", ":", ",", ":", "(", "xs", "[", "2", "]", "-", "self", ".", "filter_size", "[", "0", "]", "+", "1", ")", ":", ",", ":", "(", "xs", "[", "3", "]", "-", "self", ".", "filter_size", "[", "1", "]", "+", "1", ")", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.layers.gated_resnet.__init__": [[137, 151], ["torch.Module.__init__", "conv_op", "conv_op", "feature_norm_op", "layers.nin", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "feature_norm_op"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_filters", ",", "conv_op", ",", "feature_norm_op", "=", "None", ",", "nonlinearity", "=", "concat_elu", ",", "skip_connection", "=", "0", ",", "\n", "dropout_prob", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "gated_resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "skip_connection", "=", "skip_connection", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "self", ".", "conv_input", "=", "conv_op", "(", "2", "*", "num_filters", ",", "num_filters", ")", "# cuz of concat elu", "\n", "self", ".", "norm_input", "=", "feature_norm_op", "(", "num_filters", ")", "if", "feature_norm_op", "else", "identity", "\n", "\n", "if", "skip_connection", "!=", "0", ":", "\n", "            ", "self", ".", "nin_skip", "=", "nin", "(", "2", "*", "skip_connection", "*", "num_filters", ",", "num_filters", ")", "\n", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "dropout_prob", ")", "if", "dropout_prob", ">", "0.0", "else", "identity", "\n", "self", ".", "conv_out", "=", "conv_op", "(", "2", "*", "num_filters", ",", "2", "*", "num_filters", ")", "\n", "self", ".", "norm_out", "=", "feature_norm_op", "(", "num_filters", ")", "if", "feature_norm_op", "else", "identity", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.layers.gated_resnet.forward": [[152, 164], ["layers.gated_resnet.conv_input", "layers.gated_resnet.norm_input", "layers.gated_resnet.nonlinearity", "layers.gated_resnet.dropout", "layers.gated_resnet.conv_out", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "layers.gated_resnet.norm_out", "layers.gated_resnet.nonlinearity", "layers.gated_resnet.nin_skip", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "layers.gated_resnet.nonlinearity"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "og_x", ",", "a", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_input", "(", "self", ".", "nonlinearity", "(", "og_x", ")", ",", "mask", "=", "mask", ")", "\n", "x", "=", "self", ".", "norm_input", "(", "x", ",", "mask", "=", "mask", ")", "\n", "if", "a", "is", "not", "None", ":", "\n", "            ", "x", "+=", "self", ".", "nin_skip", "(", "self", ".", "nonlinearity", "(", "a", ")", ")", "\n", "", "x", "=", "self", ".", "nonlinearity", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_out", "(", "x", ",", "mask", "=", "mask", ")", "\n", "a", ",", "b", "=", "torch", ".", "chunk", "(", "x", ",", "2", ",", "dim", "=", "1", ")", "\n", "a", "=", "self", ".", "norm_out", "(", "a", ",", "mask", "=", "mask", ")", "\n", "c3", "=", "a", "*", "torch", ".", "sigmoid", "(", "b", ")", "\n", "return", "og_x", "+", "c3", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.layers.masked_conv2d.__init__": [[167, 209], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "layers.masked_conv2d.register_buffer", "layers.masked_conv2d.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "layers.masked_conv2d.weight.size", "layers.masked_conv2d.weight.size", "layers.masked_conv2d.weight.size", "layers.masked_conv2d.weight.size"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.locally_masked_convolution.locally_masked_conv2d.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "dilation", "=", "1", ",", "mask_type", "=", "'B'", ")", ":", "\n", "        ", "\"\"\"2D Convolution with masked weight for autoregressive connection\"\"\"", "\n", "super", "(", "masked_conv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "mask_type", "in", "[", "'A'", ",", "'B'", "]", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "mask_type", "=", "mask_type", "\n", "\n", "# Pad to maintain spatial dimensions", "\n", "self", ".", "padding", "=", "(", "(", "dilation", "*", "(", "kernel_size", "[", "0", "]", "-", "1", ")", ")", "//", "2", ",", "\n", "(", "dilation", "*", "(", "kernel_size", "[", "1", "]", "-", "1", ")", ")", "//", "2", ")", "\n", "\n", "# Conv parameters", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", ",", "*", "kernel_size", ")", ")", "\n", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "\n", "# Mask", "\n", "#         -------------------------------------", "\n", "#        |  1       1       1       1       1 |", "\n", "#        |  1       1       1       1       1 |", "\n", "#        |  1       1    1 if B     0       0 |   H // 2", "\n", "#        |  0       0       0       0       0 |   H // 2 + 1", "\n", "#        |  0       0       0       0       0 |", "\n", "#         -------------------------------------", "\n", "#  index    0       1     W//2    W//2+1", "\n", "assert", "self", ".", "weight", ".", "size", "(", "0", ")", "==", "out_channels", "\n", "assert", "self", ".", "weight", ".", "size", "(", "1", ")", "==", "in_channels", "\n", "assert", "self", ".", "weight", ".", "size", "(", "2", ")", "==", "kernel_size", "[", "0", "]", "\n", "assert", "self", ".", "weight", ".", "size", "(", "3", ")", "==", "kernel_size", "[", "1", "]", "\n", "mask", "=", "torch", ".", "ones", "(", "out_channels", ",", "in_channels", ",", "kernel_size", "[", "0", "]", ",", "kernel_size", "[", "1", "]", ")", "\n", "yc", "=", "kernel_size", "[", "0", "]", "//", "2", "\n", "xc", "=", "kernel_size", "[", "1", "]", "//", "2", "\n", "mask", "[", ":", ",", ":", ",", "yc", ",", "xc", ":", "]", "=", "0", "\n", "mask", "[", ":", ",", ":", ",", "yc", "+", "1", ":", "]", "=", "0", "\n", "if", "mask_type", "==", "'B'", ":", "\n", "            ", "mask", "[", ":", ",", ":", ",", "yc", ",", "xc", "]", "=", "1", "\n", "", "self", ".", "register_buffer", "(", "'mask'", ",", "mask", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.layers.masked_conv2d.reset_parameters": [[210, 217], ["torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "# From PyTorch _ConvNd implementation", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "fan_in", ",", "_", "=", "nn", ".", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "weight", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "bias", ",", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.layers.masked_conv2d.forward": [[218, 221], ["torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "masked_weight", "=", "self", ".", "weight", "*", "self", ".", "mask", "\n", "return", "F", ".", "conv2d", "(", "x", ",", "masked_weight", ",", "self", ".", "bias", ",", "padding", "=", "self", ".", "padding", ",", "dilation", "=", "self", ".", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.layers.OrderRescale.forward": [[224, 229], ["mask.sum", "mask.sum.view", "x.size", "x.size", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "per_loc_sums", "=", "mask", ".", "sum", "(", "dim", "=", "1", ")", "\n", "scale", "=", "per_loc_sums", ".", "view", "(", "1", ",", "1", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "assert", "torch", ".", "min", "(", "scale", ")", ".", "item", "(", ")", ">=", "0.999", "\n", "return", "x", "/", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.layers.PONO.forward": [[240, 244], ["layers.pono"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.layers.pono"], ["    ", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "# NOTE: mask argument is unused", "\n", "        ", "x", ",", "_", ",", "__", "=", "pono", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.layers.identity": [[17, 19], ["None"], "function", ["None"], ["def", "identity", "(", "x", ",", "*", "extra_args", ",", "**", "extra_kwargs", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.layers.pono": [[231, 237], ["x.mean", "x.var().add().sqrt", "x.var().add", "x.var"], "function", ["None"], ["", "", "def", "pono", "(", "x", ",", "epsilon", "=", "1e-5", ")", ":", "\n", "    ", "\"\"\"Positional normalization\"\"\"", "\n", "mean", "=", "x", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "var", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "add", "(", "epsilon", ")", ".", "sqrt", "(", ")", "\n", "output", "=", "(", "x", "-", "mean", ")", "/", "std", "\n", "return", "output", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.model.OurPixelCNNLayer_up.__init__": [[18, 27], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "gated_resnet", "range"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nr_resnet", ",", "nr_filters", ",", "resnet_nonlinearity", ",", "conv_op", ",", "feature_norm_op", "=", "None", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "weight_norm", "=", "True", ",", "dropout_prob", "=", "0.5", ",", "rematerialize", "=", "False", ")", ":", "\n", "        ", "super", "(", "OurPixelCNNLayer_up", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nr_resnet", "=", "nr_resnet", "\n", "self", ".", "u_stream", "=", "nn", ".", "ModuleList", "(", "[", "gated_resnet", "(", "nr_filters", ",", "conv_op", ",", "feature_norm_op", ",", "\n", "resnet_nonlinearity", ",", "skip_connection", "=", "0", ",", "dropout_prob", "=", "dropout_prob", ")", "\n", "for", "_", "in", "range", "(", "nr_resnet", ")", "]", ")", "\n", "\n", "self", ".", "rematerialize", "=", "rematerialize", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.model.OurPixelCNNLayer_up.forward": [[28, 37], ["range", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_dpr.checkpoint", "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_dpr.checkpoint", "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_dpr.checkpoint"], ["", "def", "forward", "(", "self", ",", "u", ",", "mask", "=", "None", ")", ":", "\n", "        ", "u_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_resnet", ")", ":", "\n", "            ", "if", "self", ".", "rematerialize", ":", "\n", "                ", "u", "=", "checkpoint", "(", "self", ".", "u_stream", "[", "i", "]", ",", "u", ",", "None", ",", "mask", ")", "\n", "", "else", ":", "\n", "                ", "u", "=", "self", ".", "u_stream", "[", "i", "]", "(", "u", ",", "mask", "=", "mask", ")", "\n", "", "u_list", "+=", "[", "u", "]", "\n", "", "return", "u_list", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.model.OurPixelCNNLayer_down.__init__": [[40, 50], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "gated_resnet", "range"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nr_resnet", ",", "nr_filters", ",", "resnet_nonlinearity", ",", "conv_op", ",", "feature_norm_op", "=", "None", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "weight_norm", "=", "True", ",", "dropout_prob", "=", "0.5", ",", "rematerialize", "=", "False", ")", ":", "\n", "        ", "super", "(", "OurPixelCNNLayer_down", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nr_resnet", "=", "nr_resnet", "\n", "\n", "self", ".", "u_stream", "=", "nn", ".", "ModuleList", "(", "[", "gated_resnet", "(", "nr_filters", ",", "conv_op", ",", "feature_norm_op", ",", "\n", "resnet_nonlinearity", ",", "skip_connection", "=", "1", ",", "dropout_prob", "=", "dropout_prob", ")", "\n", "for", "_", "in", "range", "(", "nr_resnet", ")", "]", ")", "\n", "\n", "self", ".", "rematerialize", "=", "rematerialize", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.model.OurPixelCNNLayer_down.forward": [[51, 59], ["range", "u_list.pop", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_dpr.checkpoint", "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_dpr.checkpoint", "home.repos.pwc.inspect_result.crockwell_pixelsynth.None.train_dpr.checkpoint"], ["", "def", "forward", "(", "self", ",", "u", ",", "u_list", ",", "mask", "=", "None", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "nr_resnet", ")", ":", "\n", "            ", "a", "=", "u_list", ".", "pop", "(", ")", "\n", "if", "self", ".", "rematerialize", ":", "\n", "                ", "u", "=", "checkpoint", "(", "self", ".", "u_stream", "[", "i", "]", ",", "u", ",", "a", ",", "mask", ")", "\n", "", "else", ":", "\n", "                ", "u", "=", "self", ".", "u_stream", "[", "i", "]", "(", "u", ",", "a", "=", "a", ",", "mask", "=", "mask", ")", "\n", "", "", "return", "u", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.model.OurPixelCNN.__init__": [[62, 109], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "conv_op_init", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "concat_elu", "feature_norm_op", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "nin", "nin", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "models.lmconv.locally_masked_convolution.locally_masked_conv2d", "models.lmconv.locally_masked_convolution.locally_masked_conv2d", "models.lmconv.locally_masked_convolution.locally_masked_conv2d", "model.OurPixelCNNLayer_down", "model.OurPixelCNNLayer_up", "conv_op_dilated", "conv_op_dilated", "models.lmconv.locally_masked_convolution.locally_masked_conv2d", "models.lmconv.locally_masked_convolution.locally_masked_conv2d", "models.lmconv.locally_masked_convolution.locally_masked_conv2d", "range", "range", "range", "range", "feature_norm_op", "feature_norm_op", "range", "range"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.concat_elu"], ["    ", "def", "__init__", "(", "self", ",", "nr_resnet", "=", "5", ",", "nr_filters", "=", "80", ",", "nr_logistic_mix", "=", "10", ",", "\n", "resnet_nonlinearity", "=", "'concat_elu'", ",", "input_channels", "=", "3", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "max_dilation", "=", "2", ",", "weight_norm", "=", "True", ",", "feature_norm_op", "=", "None", ",", "dropout_prob", "=", "0.5", ",", "conv_bias", "=", "True", ",", "\n", "conv_mask_weight", "=", "False", ",", "rematerialize", "=", "False", ",", "binarize", "=", "False", ")", ":", "\n", "        ", "super", "(", "OurPixelCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "resnet_nonlinearity", "==", "'concat_elu'", "\n", "self", ".", "resnet_nonlinearity", "=", "lambda", "x", ":", "concat_elu", "(", "x", ")", "\n", "self", ".", "init_padding", "=", "None", "\n", "self", ".", "binarize", "=", "binarize", "\n", "\n", "if", "weight_norm", ":", "\n", "            ", "conv_op_init", "=", "lambda", "cin", ",", "cout", ":", "wn", "(", "locally_masked_conv2d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ")", "\n", "conv_op_dilated", "=", "lambda", "cin", ",", "cout", ":", "wn", "(", "locally_masked_conv2d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "kernel_size", ",", "dilation", "=", "max_dilation", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ")", "\n", "conv_op", "=", "lambda", "cin", ",", "cout", ":", "wn", "(", "locally_masked_conv2d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ")", "\n", "", "else", ":", "\n", "            ", "conv_op_init", "=", "lambda", "cin", ",", "cout", ":", "locally_masked_conv2d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", "\n", "conv_op_dilated", "=", "lambda", "cin", ",", "cout", ":", "locally_masked_conv2d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "kernel_size", ",", "dilation", "=", "max_dilation", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", "\n", "conv_op", "=", "lambda", "cin", ",", "cout", ":", "locally_masked_conv2d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", "\n", "\n", "", "down_nr_resnet", "=", "[", "nr_resnet", "]", "+", "[", "nr_resnet", "+", "1", "]", "*", "2", "\n", "self", ".", "down_layers", "=", "nn", ".", "ModuleList", "(", "[", "OurPixelCNNLayer_down", "(", "down_nr_resnet", "[", "i", "]", ",", "nr_filters", ",", "self", ".", "resnet_nonlinearity", ",", "conv_op", ",", "\n", "feature_norm_op", ",", "kernel_size", "=", "kernel_size", ",", "weight_norm", "=", "weight_norm", ",", "\n", "dropout_prob", "=", "dropout_prob", ",", "rematerialize", "=", "rematerialize", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "\n", "self", ".", "up_layers", "=", "nn", ".", "ModuleList", "(", "[", "OurPixelCNNLayer_up", "(", "nr_resnet", ",", "nr_filters", ",", "self", ".", "resnet_nonlinearity", ",", "conv_op", ",", "\n", "feature_norm_op", ",", "kernel_size", "=", "kernel_size", ",", "weight_norm", "=", "weight_norm", ",", "\n", "dropout_prob", "=", "dropout_prob", ",", "rematerialize", "=", "rematerialize", ")", "for", "_", "in", "range", "(", "3", ")", "]", ")", "\n", "\n", "self", ".", "u_init", "=", "conv_op_init", "(", "input_channels", "+", "1", ",", "nr_filters", ")", "\n", "self", ".", "downsize_u_stream", "=", "nn", ".", "ModuleList", "(", "[", "conv_op_dilated", "(", "nr_filters", ",", "nr_filters", ")", "for", "_", "in", "range", "(", "2", ")", "]", ")", "\n", "self", ".", "upsize_u_stream", "=", "nn", ".", "ModuleList", "(", "[", "conv_op_dilated", "(", "nr_filters", ",", "nr_filters", ")", "for", "_", "in", "range", "(", "2", ")", "]", ")", "\n", "\n", "self", ".", "norm_init", "=", "feature_norm_op", "(", "nr_filters", ")", "if", "feature_norm_op", "else", "identity", "\n", "self", ".", "norm_ds", "=", "nn", ".", "ModuleList", "(", "[", "feature_norm_op", "(", "nr_filters", ")", "for", "_", "in", "range", "(", "2", ")", "]", ")", "if", "feature_norm_op", "else", "None", "\n", "self", ".", "norm_us", "=", "nn", ".", "ModuleList", "(", "[", "feature_norm_op", "(", "nr_filters", ")", "for", "_", "in", "range", "(", "2", ")", "]", ")", "if", "feature_norm_op", "else", "None", "\n", "\n", "if", "self", ".", "binarize", ":", "\n", "            ", "self", ".", "nin_out", "=", "nin", "(", "nr_filters", ",", "2", ",", "weight_norm", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "num_mix", "=", "3", "if", "input_channels", "==", "1", "else", "10", "\n", "if", "input_channels", "==", "4", ":", "\n", "                ", "num_mix", "=", "12", "\n", "nr_logistic_mix", "=", "13", "\n", "", "elif", "input_channels", "==", "6", ":", "\n", "                ", "num_mix", "=", "31", "\n", "nr_logistic_mix", "=", "12", "\n", "", "self", ".", "nin_out", "=", "nin", "(", "nr_filters", ",", "512", ",", "weight_norm", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.model.OurPixelCNN.forward": [[110, 156], ["isinstance", "range", "u_list.pop", "range", "model.OurPixelCNN.nin_out", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.OurPixelCNN.norm_init", "torch.elu", "torch.elu", "torch.elu", "int", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "int", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "model.OurPixelCNN.u_init", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "sample", "=", "False", ",", "mask_init", "=", "None", ",", "mask_undilated", "=", "None", ",", "mask_dilated", "=", "None", ")", ":", "\n", "# similar as done in the tf repo. remake init_padding if input height or width change :  ", "\n", "        ", "if", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "            ", "mask_init", "=", "x", "[", "1", "]", "\n", "mask_undilated", "=", "x", "[", "2", "]", "\n", "mask_dilated", "=", "x", "[", "3", "]", "\n", "x", "=", "x", "[", "0", "]", "\n", "\n", "", "if", "not", "sample", "and", "(", "self", ".", "init_padding", "is", "None", "or", "self", ".", "init_padding", ".", "shape", "[", "2", ":", "]", "!=", "x", ".", "shape", "[", "2", ":", "]", ")", ":", "\n", "            ", "xs", "=", "[", "int", "(", "y", ")", "for", "y", "in", "x", ".", "size", "(", ")", "]", "\n", "padding", "=", "Variable", "(", "torch", ".", "ones", "(", "xs", "[", "0", "]", ",", "1", ",", "xs", "[", "2", "]", ",", "xs", "[", "3", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "init_padding", "=", "padding", ".", "cuda", "(", ")", "if", "x", ".", "is_cuda", "else", "padding", "\n", "\n", "", "if", "sample", ":", "\n", "            ", "xs", "=", "[", "int", "(", "y", ")", "for", "y", "in", "x", ".", "size", "(", ")", "]", "\n", "padding", "=", "Variable", "(", "torch", ".", "ones", "(", "xs", "[", "0", "]", ",", "1", ",", "xs", "[", "2", "]", ",", "xs", "[", "3", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "padding", "=", "padding", ".", "cuda", "(", ")", "if", "x", ".", "is_cuda", "else", "padding", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "padding", ")", ",", "1", ")", "\n", "\n", "", "x", "=", "x", "if", "sample", "else", "torch", ".", "cat", "(", "(", "x", ",", "self", ".", "init_padding", ")", ",", "1", ")", "\n", "\n", "###      UP PASS    ###", "\n", "u_list", "=", "[", "self", ".", "norm_init", "(", "self", ".", "u_init", "(", "x", ",", "mask", "=", "mask_init", ")", ",", "mask", "=", "mask_undilated", ")", "]", "# mask_undilated passed intentionally", "\n", "# to norm so center pixel is 1,", "\n", "# preventing division by zero for OrderRescale", "\n", "# resnet block and dilation (RENAME: does not downsize)", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "u_list", "+=", "self", ".", "up_layers", "[", "i", "]", "(", "u_list", "[", "-", "1", "]", ",", "mask", "=", "mask_undilated", ")", "\n", "u_list", "+=", "[", "self", ".", "downsize_u_stream", "[", "i", "]", "(", "u_list", "[", "-", "1", "]", ",", "mask", "=", "mask_dilated", ")", "]", "\n", "if", "self", ".", "norm_ds", ":", "\n", "                ", "u_list", "[", "-", "1", "]", "=", "self", ".", "norm_ds", "[", "i", "]", "(", "u_list", "[", "-", "1", "]", ",", "mask", "=", "mask_dilated", ")", "\n", "", "", "u_list", "+=", "self", ".", "up_layers", "[", "2", "]", "(", "u_list", "[", "-", "1", "]", ",", "mask", "=", "mask_undilated", ")", "\n", "\n", "###    DOWN PASS    ###", "\n", "# resnet block and dilation (RENAME: does not upsize)", "\n", "u", "=", "u_list", ".", "pop", "(", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "u", "=", "self", ".", "down_layers", "[", "i", "]", "(", "u", ",", "u_list", ",", "mask", "=", "mask_undilated", ")", "\n", "u", "=", "self", ".", "upsize_u_stream", "[", "i", "]", "(", "u", ",", "mask", "=", "mask_dilated", ")", "\n", "if", "self", ".", "norm_us", ":", "\n", "                ", "u", "=", "self", ".", "norm_us", "[", "i", "]", "(", "u", ",", "mask", "=", "mask_dilated", ")", "\n", "", "", "u", "=", "self", ".", "down_layers", "[", "2", "]", "(", "u", ",", "u_list", ",", "mask", "=", "mask_undilated", ")", "\n", "\n", "x_out", "=", "self", ".", "nin_out", "(", "F", ".", "elu", "(", "u", ")", ")", "\n", "\n", "return", "x_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.get_custom_order.custom_idx": [[4, 125], ["int", "numpy.array", "numpy.argmax", "len", "heapq.heappop", "final_order.append", "heapq.heappush", "used.append", "heapq.heappush", "used.append", "heapq.heappush", "used.append", "heapq.heappush", "used.append", "numpy.argmax"], "function", ["None"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.average_checkpoints.average_checkpoints": [[14, 68], ["collections.OrderedDict", "len", "collections.OrderedDict", "collections.OrderedDict.items", "torch.load", "list", "averaged_params[].div_", "model_params.keys", "isinstance", "KeyError", "p.float.float", "p.float.clone", "torch.serialization.default_restore_location"], "function", ["None"], ["def", "average_checkpoints", "(", "inputs", ")", ":", "\n", "    ", "\"\"\"Loads checkpoints from inputs and returns a model with averaged weights.\n\n    Args:\n      inputs: An iterable of string paths of checkpoints to load from.\n\n    Returns:\n      A dict of string keys mapping to various values. The 'model' key\n      from the returned dict should correspond to an OrderedDict mapping\n      string parameter names to torch Tensors.\n    \"\"\"", "\n", "params_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "params_keys", "=", "None", "\n", "new_state", "=", "None", "\n", "num_models", "=", "len", "(", "inputs", ")", "\n", "\n", "for", "f", "in", "inputs", ":", "\n", "        ", "state", "=", "torch", ".", "load", "(", "\n", "f", ",", "\n", "map_location", "=", "(", "\n", "lambda", "s", ",", "_", ":", "torch", ".", "serialization", ".", "default_restore_location", "(", "s", ",", "'cpu'", ")", "\n", ")", ",", "\n", ")", "\n", "# Copies over the settings from the first checkpoint", "\n", "if", "new_state", "is", "None", ":", "\n", "            ", "new_state", "=", "state", "\n", "\n", "", "model_params", "=", "state", "[", "'model_state_dict'", "]", "\n", "\n", "model_params_keys", "=", "list", "(", "model_params", ".", "keys", "(", ")", ")", "\n", "if", "params_keys", "is", "None", ":", "\n", "            ", "params_keys", "=", "model_params_keys", "\n", "", "elif", "params_keys", "!=", "model_params_keys", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "'For checkpoint {}, expected list of params: {}, '", "\n", "'but found: {}'", ".", "format", "(", "f", ",", "params_keys", ",", "model_params_keys", ")", "\n", ")", "\n", "\n", "", "for", "k", "in", "params_keys", ":", "\n", "            ", "p", "=", "model_params", "[", "k", "]", "\n", "if", "isinstance", "(", "p", ",", "torch", ".", "HalfTensor", ")", ":", "\n", "                ", "p", "=", "p", ".", "float", "(", ")", "\n", "", "if", "k", "not", "in", "params_dict", ":", "\n", "                ", "params_dict", "[", "k", "]", "=", "p", ".", "clone", "(", ")", "\n", "# NOTE: clone() is needed in case of p is a shared parameter", "\n", "", "else", ":", "\n", "                ", "params_dict", "[", "k", "]", "+=", "p", "\n", "\n", "", "", "", "averaged_params", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "params_dict", ".", "items", "(", ")", ":", "\n", "        ", "averaged_params", "[", "k", "]", "=", "v", "\n", "averaged_params", "[", "k", "]", ".", "div_", "(", "num_models", ")", "\n", "", "new_state", "[", "'model_state_dict'", "]", "=", "averaged_params", "\n", "return", "new_state", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.average_checkpoints.last_n_checkpoints": [[70, 89], ["os.listdir", "len", "re.compile", "re.compile", "re.compile.fullmatch", "len", "Exception", "os.path.join", "int", "len", "pt_regexp.fullmatch.group", "entries.append", "sorted", "pt_regexp.fullmatch.group"], "function", ["None"], ["", "def", "last_n_checkpoints", "(", "run_id", ",", "paths", ",", "n", ",", "update_based", ",", "upper_bound", "=", "None", ")", ":", "\n", "    ", "assert", "len", "(", "paths", ")", "==", "1", "\n", "path", "=", "paths", "[", "0", "]", "\n", "if", "update_based", ":", "\n", "        ", "pt_regexp", "=", "re", ".", "compile", "(", "run_id", "+", "r'_\\d+_(\\d+)\\.pth'", ")", "\n", "", "else", ":", "\n", "        ", "pt_regexp", "=", "re", ".", "compile", "(", "run_id", "+", "r'_ep(\\d+)\\.pth'", ")", "\n", "", "files", "=", "os", ".", "listdir", "(", "path", ")", "\n", "\n", "entries", "=", "[", "]", "\n", "for", "f", "in", "files", ":", "\n", "        ", "m", "=", "pt_regexp", ".", "fullmatch", "(", "f", ")", "\n", "if", "m", "is", "not", "None", ":", "\n", "            ", "sort_key", "=", "int", "(", "m", ".", "group", "(", "1", ")", ")", "\n", "if", "upper_bound", "is", "None", "or", "sort_key", "<=", "upper_bound", ":", "\n", "                ", "entries", ".", "append", "(", "(", "sort_key", ",", "m", ".", "group", "(", "0", ")", ")", ")", "\n", "", "", "", "if", "len", "(", "entries", ")", "<", "n", ":", "\n", "        ", "raise", "Exception", "(", "'Found {} checkpoint files but need at least {}'", ",", "len", "(", "entries", ")", ",", "n", ")", "\n", "", "return", "[", "os", ".", "path", ".", "join", "(", "path", ",", "x", "[", "1", "]", ")", "for", "x", "in", "sorted", "(", "entries", ",", "reverse", "=", "True", ")", "[", ":", "n", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.average_checkpoints.main": [[91, 138], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "average_checkpoints.average_checkpoints", "torch.save", "print", "average_checkpoints.last_n_checkpoints", "print"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.average_checkpoints.average_checkpoints", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.LRFinder.save", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.average_checkpoints.last_n_checkpoints"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Tool to average the params of input checkpoints to '", "\n", "'produce a new checkpoint'", ",", "\n", ")", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--run_id'", ",", "required", "=", "True", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--inputs'", ",", "required", "=", "True", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'Input checkpoint file paths.'", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "required", "=", "True", ",", "metavar", "=", "'FILE'", ",", "\n", "help", "=", "'Write the new checkpoint containing the averaged weights to this path.'", ")", "\n", "num_group", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "num_group", ".", "add_argument", "(", "'--num-epoch-checkpoints'", ",", "type", "=", "int", ",", "\n", "help", "=", "'if set, will try to find checkpoints with names checkpoint_xx.pt in the path specified by input, '", "\n", "'and average last this many of them.'", ")", "\n", "num_group", ".", "add_argument", "(", "'--num-update-checkpoints'", ",", "type", "=", "int", ",", "\n", "help", "=", "'if set, will try to find checkpoints with names checkpoint_ee_xx.pt in the path specified by input, '", "\n", "'and average last this many of them.'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint-upper-bound'", ",", "type", "=", "int", ",", "\n", "help", "=", "'when using --num-epoch-checkpoints, this will set an upper bound on which checkpoint to use, '", "\n", "'e.g., with --num-epoch-checkpoints=10 --checkpoint-upper-bound=50, checkpoints 41-50 would be averaged.'", ")", "\n", "# fmt: on", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "\n", "num", "=", "None", "\n", "is_update_based", "=", "False", "\n", "if", "args", ".", "num_update_checkpoints", "is", "not", "None", ":", "\n", "        ", "num", "=", "args", ".", "num_update_checkpoints", "\n", "is_update_based", "=", "True", "\n", "", "elif", "args", ".", "num_epoch_checkpoints", "is", "not", "None", ":", "\n", "        ", "num", "=", "args", ".", "num_epoch_checkpoints", "\n", "\n", "", "assert", "args", ".", "checkpoint_upper_bound", "is", "None", "or", "args", ".", "num_epoch_checkpoints", "is", "not", "None", ",", "'--checkpoint-upper-bound requires --num-epoch-checkpoints'", "\n", "assert", "args", ".", "num_epoch_checkpoints", "is", "None", "or", "args", ".", "num_update_checkpoints", "is", "None", ",", "'Cannot combine --num-epoch-checkpoints and --num-update-checkpoints'", "\n", "\n", "if", "num", "is", "not", "None", ":", "\n", "        ", "args", ".", "inputs", "=", "last_n_checkpoints", "(", "\n", "args", ".", "run_id", ",", "args", ".", "inputs", ",", "num", ",", "is_update_based", ",", "upper_bound", "=", "args", ".", "checkpoint_upper_bound", ",", "\n", ")", "\n", "print", "(", "'averaging checkpoints: '", ",", "args", ".", "inputs", ")", "\n", "\n", "", "new_state", "=", "average_checkpoints", "(", "args", ".", "inputs", ")", "\n", "torch", ".", "save", "(", "new_state", ",", "args", ".", "output", ")", "\n", "print", "(", "'Finished writing averaged checkpoint to {}.'", ".", "format", "(", "args", ".", "output", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.__init__": [[637, 640], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mu", ")", ":", "\n", "        ", "self", ".", "mu", "=", "mu", "\n", "self", ".", "shadow", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.register": [[641, 644], ["model.state_dict().items", "param.clone", "model.state_dict"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.state_dict"], ["", "def", "register", "(", "self", ",", "model", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "shadow", "[", "name", "]", "=", "param", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.update": [[645, 651], ["model.state_dict().items", "new_average.clone", "model.state_dict"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.state_dict"], ["", "", "def", "update", "(", "self", ",", "model", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "assert", "name", "in", "self", ".", "shadow", "\n", "new_average", "=", "self", ".", "mu", "*", "param", "+", "(", "1.0", "-", "self", ".", "mu", ")", "*", "self", ".", "shadow", "[", "name", "]", "\n", "self", ".", "shadow", "[", "name", "]", "=", "new_average", ".", "clone", "(", ")", "\n", "return", "new_average", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.state_dict": [[652, 654], ["None"], "methods", ["None"], ["", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "shadow", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.configure_logger": [[13, 29], ["logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler"], "function", ["None"], ["def", "configure_logger", "(", "filename", "=", "\"debug.log\"", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"gen\"", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "filename", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "# create console handler with a higher log level", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "# create formatter and add it to the handlers", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"[%(asctime)s|%(name)s|%(levelname)s] %(message)s\"", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "# add the handlers to the logger", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.concat_elu": [[31, 36], ["torch.elu", "len", "torch.cat", "torch.cat", "torch.cat", "x.size"], "function", ["None"], ["", "def", "concat_elu", "(", "x", ")", ":", "\n", "    ", "\"\"\" like concatenated ReLU (http://arxiv.org/abs/1603.05201), but then with ELU \"\"\"", "\n", "# Pytorch ordering", "\n", "axis", "=", "len", "(", "x", ".", "size", "(", ")", ")", "-", "3", "\n", "return", "F", ".", "elu", "(", "torch", ".", "cat", "(", "[", "x", ",", "-", "x", "]", ",", "dim", "=", "axis", ")", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.log_sum_exp": [[42, 49], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "len", "torch.log", "torch.log", "torch.log", "x.size", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "log_sum_exp", "(", "x", ")", ":", "\n", "    ", "\"\"\" numerically stable log_sum_exp implementation that prevents overflow \"\"\"", "\n", "# TF ordering", "\n", "axis", "=", "len", "(", "x", ".", "size", "(", ")", ")", "-", "1", "\n", "m", ",", "_", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "axis", ")", "\n", "m2", ",", "_", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "axis", ",", "keepdim", "=", "True", ")", "\n", "return", "m", "+", "torch", ".", "log", "(", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "x", "-", "m2", ")", ",", "dim", "=", "axis", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.log_prob_from_logits": [[51, 57], ["torch.max", "torch.max", "torch.max", "len", "torch.log", "torch.log", "torch.log", "x.size", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "log_prob_from_logits", "(", "x", ")", ":", "\n", "    ", "\"\"\" numerically stable log_softmax implementation that prevents overflow \"\"\"", "\n", "# TF ordering", "\n", "axis", "=", "len", "(", "x", ".", "size", "(", ")", ")", "-", "1", "\n", "m", ",", "_", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "axis", ",", "keepdim", "=", "True", ")", "\n", "return", "x", "-", "m", "-", "torch", ".", "log", "(", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "x", "-", "m", ")", ",", "dim", "=", "axis", ",", "keepdim", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.average_loss": [[59, 72], ["utils.log_sum_exp", "torch.sum", "torch.sum", "torch.sum", "all_log_probs.append", "torch.stack", "torch.stack", "torch.stack", "numpy.log", "torch.sum", "torch.sum", "torch.sum", "len", "utils.log_sum_exp", "utils.discretized_mix_logistic_log_probs", "utils.discretized_mix_logistic_log_probs_1d", "utils._binarized_log_probs"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.log_sum_exp", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.log_sum_exp", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.discretized_mix_logistic_log_probs", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.discretized_mix_logistic_log_probs_1d", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils._binarized_log_probs"], ["", "def", "average_loss", "(", "log_probs_fn", ",", "x", ",", "ls", ",", "*", "xargs", ")", ":", "\n", "    ", "\"\"\" ensemble multiple nn outputs (ls) by averaging likelihood \"\"\"", "\n", "# Ensembles at the level of the joint distribution", "\n", "all_log_probs", "=", "[", "]", "\n", "for", "l", "in", "ls", ":", "\n", "        ", "log_probs", "=", "log_probs_fn", "(", "x", ",", "l", ",", "*", "xargs", ")", "# B x H x W x num_logistic_mix", "\n", "log_prob", "=", "log_sum_exp", "(", "log_probs", ")", "# B x H x W", "\n", "log_prob", "=", "torch", ".", "sum", "(", "log_prob", ",", "dim", "=", "(", "1", ",", "2", ")", ")", "# B, log prob of image under this", "\n", "# ensemble component", "\n", "all_log_probs", ".", "append", "(", "log_prob", ")", "\n", "", "all_log_probs", "=", "torch", ".", "stack", "(", "all_log_probs", ",", "dim", "=", "1", ")", "-", "np", ".", "log", "(", "len", "(", "ls", ")", ")", "# B x len(ls)", "\n", "loss", "=", "-", "torch", ".", "sum", "(", "log_sum_exp", "(", "all_log_probs", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.discretized_mix_logistic_log_probs": [[78, 204], ["x.contiguous.permute", "l[].contiguous().view.permute", "int", "torch.clamp", "torch.clamp", "torch.clamp", "x.contiguous.contiguous", "torch.exp", "torch.exp", "torch.exp", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "int", "int", "l[].contiguous().view", "l[].contiguous().view", "torch.tanh", "torch.tanh", "torch.tanh", "[].view", "torch.tanh", "torch.tanh", "torch.tanh", "x.contiguous.unsqueeze", "torch.autograd.Variable", "torch.cat", "torch.cat", "torch.cat", "torch.softplus", "torch.softplus", "torch.sum", "torch.sum", "torch.sum", "utils.log_prob_from_logits", "x.contiguous.size", "l[].contiguous().view.size", "int", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softplus", "torch.log", "torch.log", "torch.log", "l[].contiguous", "l[].contiguous", "torch.tanh.size", "means[].unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "numpy.log", "torch.tanh.flatten", "torch.zeros", "torch.zeros", "torch.zeros", "means[].unsqueeze", "means[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.log_prob_from_logits"], ["", "def", "discretized_mix_logistic_log_probs", "(", "x", ",", "l", ",", "n_bits", "=", "8", ")", ":", "\n", "    ", "\"\"\" log-likelihood for mixture of discretized logistics, assumes the data has been rescaled to [-1,1] interval \"\"\"", "\n", "assert", "n_bits", ">", "0", "\n", "n_bins", "=", "2.", "**", "n_bits", "\n", "\n", "# Pytorch ordering", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "l", "=", "l", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "xs", "=", "[", "int", "(", "y", ")", "for", "y", "in", "x", ".", "size", "(", ")", "]", "\n", "ls", "=", "[", "int", "(", "y", ")", "for", "y", "in", "l", ".", "size", "(", ")", "]", "\n", "\n", "# here and below: unpacking the params of the mixture of logistics", "\n", "#import pdb ", "\n", "#pdb.set_trace()", "\n", "div", "=", "10", "\n", "# case of 4d", "\n", "if", "ls", "[", "-", "1", "]", "==", "156", ":", "\n", "        ", "div", "=", "13", "\n", "", "elif", "ls", "[", "-", "1", "]", "==", "372", ":", "\n", "        ", "div", "=", "31", "\n", "", "nr_mix", "=", "int", "(", "ls", "[", "-", "1", "]", "/", "div", ")", "\n", "logit_probs", "=", "l", "[", ":", ",", ":", ",", ":", ",", ":", "nr_mix", "]", "\n", "\n", "if", "ls", "[", "-", "1", "]", "==", "372", ":", "\n", "        ", "l", "=", "l", "[", ":", ",", ":", ",", ":", ",", "nr_mix", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "xs", "+", "[", "nr_mix", "*", "5", "]", ")", "# 5: for mean, scale, need 3 coef", "\n", "", "else", ":", "\n", "        ", "l", "=", "l", "[", ":", ",", ":", ",", ":", ",", "nr_mix", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "xs", "+", "[", "nr_mix", "*", "3", "]", ")", "# 3 for mean, scale, coef", "\n", "#l = l[:, :, :, nr_mix:].contiguous().view(xs + [nr_mix * 3]) # 3 for mean, scale, coef", "\n", "", "means", "=", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "nr_mix", "]", "\n", "# log_scales = torch.max(l[:, :, :, :, nr_mix:2 * nr_mix], -7.)", "\n", "log_scales", "=", "torch", ".", "clamp", "(", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", "nr_mix", ":", "2", "*", "nr_mix", "]", ",", "min", "=", "-", "7.", ")", "\n", "\n", "\n", "# here and below: getting the means and adjusting them based on preceding", "\n", "# sub-pixels", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "if", "ls", "[", "-", "1", "]", "==", "372", ":", "\n", "        ", "coeffs", "=", "torch", ".", "tanh", "(", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "*", "nr_mix", ":", "5", "*", "nr_mix", "]", ")", "\n", "# need 16 coefficients for 6-dim correl mtx. ", "\n", "# To fit with rest of predictions,", "\n", "# we start as shape B,H,W,6,3*nr_mix", "\n", "# and reshape to B,H,W,16,nr_mix, and drop the remaining indices", "\n", "coeffs", "=", "coeffs", ".", "flatten", "(", ")", "[", ":", "ls", "[", "0", "]", "*", "ls", "[", "1", "]", "*", "ls", "[", "2", "]", "*", "16", "*", "nr_mix", "]", ".", "view", "(", "[", "ls", "[", "0", "]", ",", "ls", "[", "1", "]", ",", "ls", "[", "2", "]", ",", "16", ",", "nr_mix", "]", ")", "\n", "coeff_dims", "=", "[", "int", "(", "y", ")", "for", "y", "in", "coeffs", ".", "size", "(", ")", "]", "\n", "#import pdb ", "\n", "#pdb.set_trace()", "\n", "#x = x.unsqueeze(-1) + Variable(torch.zeros(coeff_dims).cuda(), requires_grad=False)", "\n", "\n", "", "else", ":", "\n", "        ", "coeffs", "=", "torch", ".", "tanh", "(", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "*", "nr_mix", ":", "3", "*", "nr_mix", "]", ")", "\n", "\n", "", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "+", "Variable", "(", "torch", ".", "zeros", "(", "xs", "+", "[", "nr_mix", "]", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "m2", "=", "(", "means", "[", ":", ",", ":", ",", ":", ",", "1", ",", ":", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", ")", ".", "view", "(", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "1", ",", "nr_mix", ")", "\n", "\n", "m3", "=", "(", "means", "[", ":", ",", ":", ",", ":", ",", "2", ",", ":", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "1", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "2", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "1", ",", ":", "]", ")", ".", "view", "(", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "1", ",", "nr_mix", ")", "\n", "\n", "\n", "if", "ls", "[", "-", "1", "]", "==", "156", ":", "\n", "# hope these coefficients are right!", "\n", "        ", "m4", "=", "(", "means", "[", ":", ",", ":", ",", ":", ",", "3", ",", ":", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "4", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "5", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "1", ",", ":", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "6", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "2", ",", ":", "]", ")", ".", "view", "(", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "1", ",", "nr_mix", ")", "\n", "means", "=", "torch", ".", "cat", "(", "(", "means", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", ".", "unsqueeze", "(", "3", ")", ",", "m2", ",", "m3", ",", "m4", ")", ",", "dim", "=", "3", ")", "\n", "", "elif", "ls", "[", "-", "1", "]", "==", "372", ":", "\n", "        ", "div", "=", "31", "\n", "m4", "=", "(", "means", "[", ":", ",", ":", ",", ":", ",", "3", ",", ":", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "4", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "5", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "1", ",", ":", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "6", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "2", ",", ":", "]", ")", ".", "view", "(", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "1", ",", "nr_mix", ")", "\n", "m5", "=", "(", "means", "[", ":", ",", ":", ",", ":", ",", "4", ",", ":", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "7", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "8", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "1", ",", ":", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "9", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "2", ",", ":", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "10", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "3", ",", ":", "]", ")", ".", "view", "(", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "1", ",", "nr_mix", ")", "\n", "m6", "=", "(", "means", "[", ":", ",", ":", ",", ":", ",", "5", ",", ":", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "11", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "12", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "1", ",", ":", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "13", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "2", ",", ":", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "14", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "3", ",", ":", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "15", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "4", ",", ":", "]", ")", ".", "view", "(", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "1", ",", "nr_mix", ")", "\n", "means", "=", "torch", ".", "cat", "(", "(", "means", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", ".", "unsqueeze", "(", "3", ")", ",", "m2", ",", "m3", ",", "m4", ",", "m5", ",", "m6", ")", ",", "dim", "=", "3", ")", "\n", "", "else", ":", "\n", "        ", "means", "=", "torch", ".", "cat", "(", "(", "means", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", ".", "unsqueeze", "(", "3", ")", ",", "m2", ",", "m3", ")", ",", "dim", "=", "3", ")", "\n", "", "centered_x", "=", "x", "-", "means", "\n", "inv_stdv", "=", "torch", ".", "exp", "(", "-", "log_scales", ")", "\n", "plus_in", "=", "inv_stdv", "*", "(", "centered_x", "+", "1.", "/", "(", "n_bins", "-", "1", ")", ")", "\n", "cdf_plus", "=", "torch", ".", "sigmoid", "(", "plus_in", ")", "\n", "min_in", "=", "inv_stdv", "*", "(", "centered_x", "-", "1.", "/", "(", "n_bins", "-", "1", ")", ")", "\n", "cdf_min", "=", "torch", ".", "sigmoid", "(", "min_in", ")", "\n", "# log probability for edge case of 0 (before scaling)", "\n", "log_cdf_plus", "=", "plus_in", "-", "F", ".", "softplus", "(", "plus_in", ")", "\n", "# log probability for edge case of 255 (before scaling)", "\n", "log_one_minus_cdf_min", "=", "-", "F", ".", "softplus", "(", "min_in", ")", "\n", "cdf_delta", "=", "cdf_plus", "-", "cdf_min", "# probability for all other cases", "\n", "mid_in", "=", "inv_stdv", "*", "centered_x", "\n", "# log probability in the center of the bin, to be used in extreme cases", "\n", "# (not actually used in our code)", "\n", "log_pdf_mid", "=", "mid_in", "-", "log_scales", "-", "2.", "*", "F", ".", "softplus", "(", "mid_in", ")", "\n", "\n", "# now select the right output: left edge case, right edge case, normal", "\n", "# case, extremely low prob case (doesn't actually happen for us)", "\n", "\n", "# this is what we are really doing, but using the robust version below for extreme cases in other applications and to avoid NaN issue with tf.select()", "\n", "# log_probs = tf.select(x < -0.999, log_cdf_plus, tf.select(x > 0.999, log_one_minus_cdf_min, tf.log(cdf_delta)))", "\n", "\n", "# robust version, that still works if probabilities are below 1e-5 (which never happens in our code)", "\n", "# tensorflow backpropagates through tf.select() by multiplying with zero instead of selecting: this requires use to use some ugly tricks to avoid potential NaNs", "\n", "# the 1e-12 in tf.maximum(cdf_delta, 1e-12) is never actually used as output, it's purely there to get around the tf.select() gradient issue", "\n", "# if the probability on a sub-pixel is below 1e-5, we use an approximation", "\n", "# based on the assumption that the log-density is constant in the bin of", "\n", "# the observed sub-pixel value", "\n", "\n", "inner_inner_cond", "=", "(", "cdf_delta", ">", "1e-5", ")", ".", "float", "(", ")", "\n", "inner_inner_out", "=", "inner_inner_cond", "*", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "cdf_delta", ",", "min", "=", "1e-12", ")", ")", "+", "(", "1.", "-", "inner_inner_cond", ")", "*", "(", "log_pdf_mid", "-", "np", ".", "log", "(", "127.5", ")", ")", "\n", "inner_cond", "=", "(", "x", ">", "0.999", ")", ".", "float", "(", ")", "\n", "inner_out", "=", "inner_cond", "*", "log_one_minus_cdf_min", "+", "(", "1.", "-", "inner_cond", ")", "*", "inner_inner_out", "\n", "cond", "=", "(", "x", "<", "-", "0.999", ")", ".", "float", "(", ")", "\n", "log_probs", "=", "cond", "*", "log_cdf_plus", "+", "(", "1.", "-", "cond", ")", "*", "inner_out", "\n", "log_probs", "=", "torch", ".", "sum", "(", "log_probs", ",", "dim", "=", "3", ")", "+", "log_prob_from_logits", "(", "logit_probs", ")", "\n", "\n", "return", "log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.discretized_mix_logistic_loss": [[206, 218], ["utils.discretized_mix_logistic_log_probs", "torch.sum", "torch.sum", "torch.sum", "utils.log_sum_exp"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.discretized_mix_logistic_log_probs", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.log_sum_exp"], ["", "def", "discretized_mix_logistic_loss", "(", "x", ",", "l", ",", "n_bits", "=", "8", ")", ":", "\n", "    ", "\"\"\" reduced (summed) log-likelihood for mixture of discretized logistics, assumes the data has been rescaled to [-1,1] interval\n    \n    Args:\n        x: B x C x H x W ground truth image\n        l: B x (10 * num_logistic_mix) x H x W output of NN\n\n    Returns:\n        loss: 0-dimensional NLL loss tensor\n    \"\"\"", "\n", "log_probs", "=", "discretized_mix_logistic_log_probs", "(", "x", ",", "l", ",", "n_bits", ")", "# B x H x W x num_logistic_mix", "\n", "return", "-", "torch", ".", "sum", "(", "log_sum_exp", "(", "log_probs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.discretized_mix_logistic_loss_averaged": [[220, 232], ["utils.average_loss"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.average_loss"], ["", "def", "discretized_mix_logistic_loss_averaged", "(", "x", ",", "ls", ",", "n_bits", "=", "8", ")", ":", "\n", "    ", "\"\"\" reduced (summed) log-likelihood for mixture of discretized logistics, assumes the data has been rescaled to [-1,1] interval\n    Averages likelihood across multiple sets of mixture parameters\n    \n    Args:\n        x: B x C x H x W ground truth image\n        ls: list of B x (10 * num_logistic_mix) x H x W outputs of NN\n\n    Returns:\n        loss: 0-dimensional NLL loss tensor\n    \"\"\"", "\n", "return", "average_loss", "(", "discretized_mix_logistic_log_probs", ",", "x", ",", "ls", ",", "n_bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.discretized_mix_logistic_log_probs_1d": [[238, 283], ["x.contiguous.permute", "l[].contiguous().view.permute", "int", "l[].contiguous().view", "torch.clamp", "torch.clamp", "torch.clamp", "x.contiguous.contiguous", "torch.exp", "torch.exp", "torch.exp", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "int", "int", "x.contiguous.unsqueeze", "torch.autograd.Variable", "torch.softplus", "torch.softplus", "torch.sum", "torch.sum", "torch.sum", "utils.log_prob_from_logits", "x.contiguous.size", "l[].contiguous().view.size", "l[].contiguous", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.softplus", "torch.log", "torch.log", "torch.log", "torch.clamp", "torch.clamp", "torch.clamp", "numpy.log", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.log_prob_from_logits"], ["", "def", "discretized_mix_logistic_log_probs_1d", "(", "x", ",", "l", ")", ":", "\n", "    ", "\"\"\" log-likelihood for mixture of discretized logistics, assumes the data has been rescaled to [-1,1] interval \"\"\"", "\n", "# Pytorch ordering", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "l", "=", "l", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "xs", "=", "[", "int", "(", "y", ")", "for", "y", "in", "x", ".", "size", "(", ")", "]", "\n", "ls", "=", "[", "int", "(", "y", ")", "for", "y", "in", "l", ".", "size", "(", ")", "]", "\n", "\n", "# here and below: unpacking the params of the mixture of logistics", "\n", "nr_mix", "=", "int", "(", "ls", "[", "-", "1", "]", "/", "3", ")", "\n", "logit_probs", "=", "l", "[", ":", ",", ":", ",", ":", ",", ":", "nr_mix", "]", "\n", "l", "=", "l", "[", ":", ",", ":", ",", ":", ",", "nr_mix", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "xs", "+", "[", "nr_mix", "*", "2", "]", ")", "# 2 for mean, scale", "\n", "means", "=", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "nr_mix", "]", "\n", "log_scales", "=", "torch", ".", "clamp", "(", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", "nr_mix", ":", "2", "*", "nr_mix", "]", ",", "min", "=", "-", "7.", ")", "\n", "# here and below: getting the means and adjusting them based on preceding", "\n", "# sub-pixels", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "+", "Variable", "(", "torch", ".", "zeros", "(", "xs", "+", "[", "nr_mix", "]", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# means = torch.cat((means[:, :, :, 0, :].unsqueeze(3), m2, m3), dim=3)", "\n", "centered_x", "=", "x", "-", "means", "\n", "inv_stdv", "=", "torch", ".", "exp", "(", "-", "log_scales", ")", "\n", "plus_in", "=", "inv_stdv", "*", "(", "centered_x", "+", "1.", "/", "255.", ")", "\n", "cdf_plus", "=", "torch", ".", "sigmoid", "(", "plus_in", ")", "\n", "min_in", "=", "inv_stdv", "*", "(", "centered_x", "-", "1.", "/", "255.", ")", "\n", "cdf_min", "=", "torch", ".", "sigmoid", "(", "min_in", ")", "\n", "# log probability for edge case of 0 (before scaling)", "\n", "log_cdf_plus", "=", "plus_in", "-", "F", ".", "softplus", "(", "plus_in", ")", "\n", "# log probability for edge case of 255 (before scaling)", "\n", "log_one_minus_cdf_min", "=", "-", "F", ".", "softplus", "(", "min_in", ")", "\n", "cdf_delta", "=", "cdf_plus", "-", "cdf_min", "# probability for all other cases", "\n", "mid_in", "=", "inv_stdv", "*", "centered_x", "\n", "# log probability in the center of the bin, to be used in extreme cases", "\n", "# (not actually used in our code)", "\n", "log_pdf_mid", "=", "mid_in", "-", "log_scales", "-", "2.", "*", "F", ".", "softplus", "(", "mid_in", ")", "\n", "\n", "inner_inner_cond", "=", "(", "cdf_delta", ">", "1e-5", ")", ".", "float", "(", ")", "\n", "inner_inner_out", "=", "inner_inner_cond", "*", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "cdf_delta", ",", "min", "=", "1e-12", ")", ")", "+", "(", "1.", "-", "inner_inner_cond", ")", "*", "(", "log_pdf_mid", "-", "np", ".", "log", "(", "127.5", ")", ")", "\n", "inner_cond", "=", "(", "x", ">", "0.999", ")", ".", "float", "(", ")", "\n", "inner_out", "=", "inner_cond", "*", "log_one_minus_cdf_min", "+", "(", "1.", "-", "inner_cond", ")", "*", "inner_inner_out", "\n", "cond", "=", "(", "x", "<", "-", "0.999", ")", ".", "float", "(", ")", "\n", "log_probs", "=", "cond", "*", "log_cdf_plus", "+", "(", "1.", "-", "cond", ")", "*", "inner_out", "\n", "log_probs", "=", "torch", ".", "sum", "(", "log_probs", ",", "dim", "=", "3", ")", "+", "log_prob_from_logits", "(", "logit_probs", ")", "\n", "\n", "return", "log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.discretized_mix_logistic_loss_1d": [[285, 294], ["utils.discretized_mix_logistic_log_probs_1d", "torch.sum", "torch.sum", "torch.sum", "utils.log_sum_exp"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.discretized_mix_logistic_log_probs_1d", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.log_sum_exp"], ["", "def", "discretized_mix_logistic_loss_1d", "(", "x", ",", "l", ")", ":", "\n", "    ", "\"\"\" reduced (summed) log-likelihood for mixture of discretized logistics, assumes the data has been rescaled to [-1,1] interval\n    \n    Args:\n        x: B x C x H x W ground truth image\n        l: B x (3 * num_logistic_mix) x H x W output of NN\n    \"\"\"", "\n", "log_probs", "=", "discretized_mix_logistic_log_probs_1d", "(", "x", ",", "l", ")", "\n", "return", "-", "torch", ".", "sum", "(", "log_sum_exp", "(", "log_probs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.discretized_mix_logistic_loss_1d_averaged": [[296, 305], ["utils.average_loss"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.average_loss"], ["", "def", "discretized_mix_logistic_loss_1d_averaged", "(", "x", ",", "ls", ")", ":", "\n", "    ", "\"\"\" reduced (summed) log-likelihood for mixture of discretized logistics, assumes the data has been rescaled to [-1,1] interval\n    Averages likelihood across multiple sets of mixture parameters\n    \n    Args:\n        x: B x C x H x W ground truth image\n        ls: list of B x (3 * num_logistic_mix) x H x W outputs of NN\n    \"\"\"", "\n", "return", "average_loss", "(", "discretized_mix_logistic_log_probs_1d", ",", "x", ",", "ls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils._binarized_label": [[311, 319], ["utils.binarize_torch", "x.squeeze().long.squeeze().long", "x.squeeze().long.size", "x.squeeze().long.squeeze"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.binarize_torch"], ["", "def", "_binarized_label", "(", "x", ")", ":", "\n", "    ", "assert", "x", ".", "size", "(", "1", ")", "==", "1", "\n", "x", "=", "x", "*", ".5", "+", ".5", "# Scale from [-1, 1] to [0, 1] range", "\n", "x", "=", "binarize_torch", "(", "x", ")", "# binarize image. Should be able to just cast,", "\n", "# since x is either 0. or 1., but this could avoid float", "\n", "# innacuracies from rescaling.", "\n", "x", "=", "x", ".", "squeeze", "(", "1", ")", ".", "long", "(", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils._binarized_log_probs": [[321, 336], ["utils._binarized_label", "torch.log_softmax", "F.log_softmax.size", "torch.nll_loss().unsqueeze", "torch.nll_loss"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils._binarized_label"], ["", "def", "_binarized_log_probs", "(", "x", ",", "l", ")", ":", "\n", "    ", "\"\"\"Cross-entropy loss\n\n    Args:\n        x: B x H x W floating point ground truth image, [-1, 1] scale\n        l: B x 2 x H x W output of neural network\n\n    Returns:\n        log_probs: B x H x W x 1 tensor of likelihod of each pixel in x\n    \"\"\"", "\n", "assert", "l", ".", "size", "(", "1", ")", "==", "2", "\n", "x", "=", "_binarized_label", "(", "x", ")", "\n", "l", "=", "F", ".", "log_softmax", "(", "l", ",", "dim", "=", "1", ")", "\n", "log_probs", "=", "-", "F", ".", "nll_loss", "(", "l", ",", "x", ",", "reduction", "=", "\"none\"", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.binarized_loss": [[338, 353], ["utils._binarized_label", "torch.cross_entropy", "l.size"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils._binarized_label"], ["", "def", "binarized_loss", "(", "x", ",", "l", ")", ":", "\n", "    ", "\"\"\"Cross-entropy loss\n\n    Args:\n        x: B x 1 x H x W floating point ground truth image, [-1, 1] scale\n        l: B x 2 x H x W output of neural network\n\n    Returns:\n        loss: 0-dimensional NLL loss tensor\n    \"\"\"", "\n", "assert", "l", ".", "size", "(", "1", ")", "==", "2", "\n", "x", "=", "_binarized_label", "(", "x", ")", "\n", "# cross_entropy averages across the batch, so we multiply by batch size", "\n", "# to keep a similar loss scale as with grayscale MNIST", "\n", "return", "F", ".", "cross_entropy", "(", "l", ",", "x", ",", "reduction", "=", "\"sum\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.binarized_loss_averaged": [[355, 365], ["utils.average_loss"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.average_loss"], ["", "def", "binarized_loss_averaged", "(", "x", ",", "ls", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: B x C x H x W ground truth image\n        ls: list of B x 2 x H x W outputs of NN\n\n    Returns:\n        loss: 0-dimensional NLL loss tensor\n    \"\"\"", "\n", "return", "average_loss", "(", "_binarized_log_probs", ",", "x", ",", "ls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.binarize_np": [[367, 370], ["numpy.random.uniform"], "function", ["None"], ["", "def", "binarize_np", "(", "images", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "rand", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "images", ".", "shape", ")", "\n", "return", "(", "rand", "<", "images", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.binarize_torch": [[372, 375], ["torch.rand", "torch.rand", "torch.rand"], "function", ["None"], ["", "def", "binarize_torch", "(", "images", ")", ":", "\n", "    ", "rand", "=", "torch", ".", "rand", "(", "images", ".", "shape", ",", "device", "=", "images", ".", "device", ")", "\n", "return", "(", "rand", "<", "images", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.to_one_hot": [[381, 387], ["torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "one_hot.cuda.scatter_", "torch.autograd.Variable", "one_hot.cuda.cuda", "len", "tensor.unsqueeze", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "tensor.size", "tensor.size"], "function", ["None"], ["", "def", "to_one_hot", "(", "tensor", ",", "n", ",", "fill_with", "=", "1.", ")", ":", "\n", "# we perform one hot encore with respect to the last axis", "\n", "    ", "one_hot", "=", "torch", ".", "FloatTensor", "(", "tensor", ".", "size", "(", ")", "+", "(", "n", ",", ")", ")", ".", "zero_", "(", ")", "\n", "if", "tensor", ".", "is_cuda", ":", "one_hot", "=", "one_hot", ".", "cuda", "(", ")", "\n", "one_hot", ".", "scatter_", "(", "len", "(", "tensor", ".", "size", "(", ")", ")", ",", "tensor", ".", "unsqueeze", "(", "-", "1", ")", ",", "fill_with", ")", "\n", "return", "Variable", "(", "one_hot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.sample_from_discretized_mix_logistic_1d": [[389, 420], ["l[].contiguous().view.permute", "l[].contiguous().view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "temp.cuda.uniform_", "temp.cuda.max", "utils.to_one_hot", "to_one_hot.view", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "u.cuda.uniform_", "torch.autograd.Variable", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.unsqueeze", "int", "logit_probs.size", "temp.cuda.cuda", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum.size", "u.cuda.cuda", "torch.clamp", "torch.clamp", "torch.clamp", "l[].contiguous().view.size", "l[].contiguous", "torch.exp", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.to_one_hot"], ["", "def", "sample_from_discretized_mix_logistic_1d", "(", "l", ",", "coord1", ",", "coord2", ",", "nr_mix", ")", ":", "\n", "# Pytorch ordering", "\n", "    ", "l", "=", "l", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "ls", "=", "[", "int", "(", "y", ")", "for", "y", "in", "l", ".", "size", "(", ")", "]", "\n", "xs", "=", "ls", "[", ":", "-", "1", "]", "+", "[", "1", "]", "#[3]", "\n", "\n", "# unpack parameters", "\n", "logit_probs", "=", "l", "[", ":", ",", ":", ",", ":", ",", ":", "nr_mix", "]", "\n", "l", "=", "l", "[", ":", ",", ":", ",", ":", ",", "nr_mix", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "xs", "+", "[", "nr_mix", "*", "2", "]", ")", "# for mean, scale", "\n", "\n", "# sample mixture indicator from softmax", "\n", "temp", "=", "torch", ".", "FloatTensor", "(", "logit_probs", ".", "size", "(", ")", ")", "\n", "if", "l", ".", "is_cuda", ":", "temp", "=", "temp", ".", "cuda", "(", ")", "\n", "temp", ".", "uniform_", "(", "1e-5", ",", "1.", "-", "1e-5", ")", "\n", "temp", "=", "logit_probs", ".", "data", "-", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "temp", ")", ")", "\n", "_", ",", "argmax", "=", "temp", ".", "max", "(", "dim", "=", "3", ")", "\n", "\n", "one_hot", "=", "to_one_hot", "(", "argmax", ",", "nr_mix", ")", "\n", "sel", "=", "one_hot", ".", "view", "(", "xs", "[", ":", "-", "1", "]", "+", "[", "1", ",", "nr_mix", "]", ")", "\n", "# select logistic parameters", "\n", "means", "=", "torch", ".", "sum", "(", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "nr_mix", "]", "*", "sel", ",", "dim", "=", "4", ")", "\n", "log_scales", "=", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "\n", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", "nr_mix", ":", "2", "*", "nr_mix", "]", "*", "sel", ",", "dim", "=", "4", ")", ",", "min", "=", "-", "7.", ")", "\n", "u", "=", "torch", ".", "FloatTensor", "(", "means", ".", "size", "(", ")", ")", "\n", "if", "l", ".", "is_cuda", ":", "u", "=", "u", ".", "cuda", "(", ")", "\n", "u", ".", "uniform_", "(", "1e-5", ",", "1.", "-", "1e-5", ")", "\n", "u", "=", "Variable", "(", "u", ")", "\n", "x", "=", "means", "+", "torch", ".", "exp", "(", "log_scales", ")", "*", "(", "torch", ".", "log", "(", "u", ")", "-", "torch", ".", "log", "(", "1.", "-", "u", ")", ")", "\n", "x0", "=", "torch", ".", "clamp", "(", "torch", ".", "clamp", "(", "x", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "min", "=", "-", "1.", ")", ",", "max", "=", "1.", ")", "\n", "out", "=", "x0", ".", "unsqueeze", "(", "1", ")", "\n", "return", "out", ".", "data", "[", ":", ",", ":", ",", "coord1", ",", "coord2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.sample_from_discretized_mix_logistic": [[422, 546], ["l[].contiguous().view.permute", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "temp.cuda.uniform_", "temp.cuda.max", "utils.to_one_hot", "to_one_hot.view", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "u.cuda.uniform_", "torch.autograd.Variable", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "int", "int", "l[].contiguous().view", "l[].contiguous().view", "logit_probs.size", "temp.cuda.cuda", "range", "torch.sum", "torch.sum", "torch.sum", "torch.tanh", "torch.tanh", "torch.tanh", "[].view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.size", "u.cuda.cuda", "range", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cat", "torch.cat", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "Uniform", "TransformedDistribution", "TransformedDistribution.log_prob", "TransformedDistribution", "TransformedDistribution.log_prob", "TransformedDistribution", "TransformedDistribution.log_prob", "l[].contiguous().view.size", "int", "temp.cuda.uniform_", "torch.log", "torch.log", "torch.log", "u.cuda.uniform_", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "AffineTransform", "AffineTransform", "AffineTransform", "l[].contiguous", "l[].contiguous", "torch.tanh", "torch.tanh", "torch.tanh", "torch.exp", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.clamp.view", "torch.clamp.view", "torch.clamp.view", "torch.clamp.view", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "SigmoidTransform", "SigmoidTransform", "SigmoidTransform", "torch.log", "torch.log", "torch.log", "torch.sum.flatten", "torch.clamp.view", "torch.clamp.view", "torch.clamp.view", "torch.clamp.view", "torch.clamp.view", "torch.clamp.view", "torch.clamp.view", "torch.clamp.view", "torch.clamp.view"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.to_one_hot"], ["", "def", "sample_from_discretized_mix_logistic", "(", "l", ",", "coord1", ",", "coord2", ",", "nr_mix", ",", "mixture_temperature", "=", "1.0", ",", "logistic_temperature", "=", "1.0", ",", "temp_eps", "=", ".05", ",", "get_likelihood", "=", "False", ",", "seed", "=", "None", ")", ":", "\n", "    ", "l", "=", "l", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "ls", "=", "[", "int", "(", "y", ")", "for", "y", "in", "l", ".", "size", "(", ")", "]", "\n", "div", "=", "10", "\n", "# case of 4d", "\n", "if", "ls", "[", "-", "1", "]", "==", "156", ":", "\n", "        ", "xs", "=", "ls", "[", ":", "-", "1", "]", "+", "[", "4", "]", "\n", "div", "=", "13", "\n", "nr_mix", "=", "int", "(", "ls", "[", "-", "1", "]", "/", "div", ")", "\n", "", "elif", "ls", "[", "-", "1", "]", "==", "372", ":", "\n", "        ", "xs", "=", "ls", "[", ":", "-", "1", "]", "+", "[", "6", "]", "\n", "div", "=", "31", "\n", "nr_mix", "=", "int", "(", "ls", "[", "-", "1", "]", "/", "div", ")", "\n", "", "else", ":", "\n", "        ", "xs", "=", "ls", "[", ":", "-", "1", "]", "+", "[", "3", "]", "\n", "\n", "# unpack parameters", "\n", "", "logit_probs", "=", "l", "[", ":", ",", ":", ",", ":", ",", ":", "nr_mix", "]", "\n", "if", "ls", "[", "-", "1", "]", "==", "372", ":", "\n", "        ", "l", "=", "l", "[", ":", ",", ":", ",", ":", ",", "nr_mix", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "xs", "+", "[", "nr_mix", "*", "5", "]", ")", "# 5: for mean, scale, need 3 coef", "\n", "", "else", ":", "\n", "        ", "l", "=", "l", "[", ":", ",", ":", ",", ":", ",", "nr_mix", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "xs", "+", "[", "nr_mix", "*", "3", "]", ")", "# 3 for mean, scale, coef", "\n", "# sample mixture indicator from softmax", "\n", "", "temp", "=", "torch", ".", "FloatTensor", "(", "logit_probs", ".", "size", "(", ")", ")", "\n", "if", "l", ".", "is_cuda", ":", "temp", "=", "temp", ".", "cuda", "(", ")", "\n", "#temp.uniform_(1e-5, 1. - 1e-5)", "\n", "temp", ".", "uniform_", "(", "temp_eps", ",", "1", "-", "temp_eps", ")", "\n", "if", "seed", "is", "not", "None", ":", "\n", "        ", "for", "i", "in", "range", "(", "seed", ")", ":", "\n", "            ", "temp", ".", "uniform_", "(", "temp_eps", ",", "1", "-", "temp_eps", ")", "\n", "\n", "", "", "temp", "=", "logit_probs", ".", "data", "-", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "temp", ")", ")", "*", "mixture_temperature", "\n", "_", ",", "argmax", "=", "temp", ".", "max", "(", "dim", "=", "3", ")", "\n", "\n", "one_hot", "=", "to_one_hot", "(", "argmax", ",", "nr_mix", ")", "\n", "sel", "=", "one_hot", ".", "view", "(", "xs", "[", ":", "-", "1", "]", "+", "[", "1", ",", "nr_mix", "]", ")", "\n", "# select logistic parameters", "\n", "means", "=", "torch", ".", "sum", "(", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "nr_mix", "]", "*", "sel", ",", "dim", "=", "4", ")", "\n", "log_scales", "=", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "\n", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", "nr_mix", ":", "2", "*", "nr_mix", "]", "*", "sel", ",", "dim", "=", "4", ")", ",", "min", "=", "-", "7.", ")", "\n", "if", "ls", "[", "-", "1", "]", "==", "372", ":", "\n", "        ", "coeffs", "=", "torch", ".", "tanh", "(", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "*", "nr_mix", ":", "5", "*", "nr_mix", "]", ")", "\n", "# need 16 coefficients for 6-dim correl mtx. ", "\n", "# To fit with rest of predictions,", "\n", "# we start as shape B,H,W,6,3*nr_mix", "\n", "# and reshape to B,H,W,16,nr_mix, and drop the remaining indices", "\n", "coeffs", "=", "coeffs", ".", "flatten", "(", ")", "[", ":", "ls", "[", "0", "]", "*", "ls", "[", "1", "]", "*", "ls", "[", "2", "]", "*", "16", "*", "nr_mix", "]", ".", "view", "(", "[", "ls", "[", "0", "]", ",", "ls", "[", "1", "]", ",", "ls", "[", "2", "]", ",", "16", ",", "nr_mix", "]", ")", "\n", "coeffs", "=", "torch", ".", "sum", "(", "coeffs", "*", "sel", ",", "dim", "=", "4", ")", "\n", "", "else", ":", "\n", "        ", "coeffs", "=", "torch", ".", "sum", "(", "torch", ".", "tanh", "(", "\n", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "*", "nr_mix", ":", "3", "*", "nr_mix", "]", ")", "*", "sel", ",", "dim", "=", "4", ")", "\n", "# sample from logistic & clip to interval", "\n", "# we don't actually round to the nearest 8bit value when sampling", "\n", "", "u", "=", "torch", ".", "FloatTensor", "(", "means", ".", "size", "(", ")", ")", "\n", "if", "l", ".", "is_cuda", ":", "u", "=", "u", ".", "cuda", "(", ")", "\n", "u", ".", "uniform_", "(", "1e-5", ",", "1.", "-", "1e-5", ")", "\n", "if", "seed", "is", "not", "None", ":", "\n", "        ", "for", "i", "in", "range", "(", "seed", ")", ":", "\n", "            ", "u", ".", "uniform_", "(", "1e-5", ",", "1.", "-", "1e-5", ")", "\n", "", "", "u", "=", "Variable", "(", "u", ")", "\n", "x", "=", "means", "+", "torch", ".", "exp", "(", "log_scales", ")", "*", "logistic_temperature", "*", "(", "torch", ".", "log", "(", "u", ")", "-", "torch", ".", "log", "(", "1.", "-", "u", ")", ")", "\n", "x0", "=", "torch", ".", "clamp", "(", "torch", ".", "clamp", "(", "x", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "min", "=", "-", "1.", ")", ",", "max", "=", "1.", ")", "\n", "x1", "=", "torch", ".", "clamp", "(", "torch", ".", "clamp", "(", "\n", "x", "[", ":", ",", ":", ",", ":", ",", "1", "]", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "0", "]", "*", "x0", ",", "min", "=", "-", "1.", ")", ",", "max", "=", "1.", ")", "\n", "x2", "=", "torch", ".", "clamp", "(", "torch", ".", "clamp", "(", "\n", "x", "[", ":", ",", ":", ",", ":", ",", "2", "]", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "1", "]", "*", "x0", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "2", "]", "*", "x1", ",", "min", "=", "-", "1.", ")", ",", "max", "=", "1.", ")", "\n", "\n", "if", "ls", "[", "-", "1", "]", "==", "156", ":", "\n", "# hope these coefficients are right! ", "\n", "        ", "x3", "=", "torch", ".", "clamp", "(", "torch", ".", "clamp", "(", "\n", "x", "[", ":", ",", ":", ",", ":", ",", "3", "]", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "1", "]", "*", "x0", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "2", "]", "*", "x1", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "3", "]", "*", "x2", ",", "min", "=", "-", "1.", ")", ",", "max", "=", "1.", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x0", ".", "view", "(", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", ",", "x1", ".", "view", "(", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", ",", "x2", ".", "view", "(", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", ",", "x3", ".", "view", "(", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", "]", ",", "dim", "=", "3", ")", "\n", "", "elif", "ls", "[", "-", "1", "]", "==", "372", ":", "\n", "        ", "x3", "=", "torch", ".", "clamp", "(", "torch", ".", "clamp", "(", "(", "x", "[", ":", ",", ":", ",", ":", ",", "3", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "4", "]", "*", "x0", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "5", "]", "*", "x1", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "6", "]", "*", "x2", ")", ",", "min", "=", "-", "1.", ")", ",", "max", "=", "1.", ")", "\n", "x4", "=", "torch", ".", "clamp", "(", "torch", ".", "clamp", "(", "(", "x", "[", ":", ",", ":", ",", ":", ",", "4", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "7", "]", "*", "x0", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "8", "]", "*", "x1", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "9", "]", "*", "x2", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "10", "]", "*", "x3", ")", ",", "min", "=", "-", "1.", ")", ",", "max", "=", "1.", ")", "\n", "x5", "=", "torch", ".", "clamp", "(", "torch", ".", "clamp", "(", "(", "x", "[", ":", ",", ":", ",", ":", ",", "5", "]", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "11", "]", "*", "x0", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "12", "]", "*", "x1", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "13", "]", "*", "x2", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "14", "]", "*", "x3", "+", "\n", "coeffs", "[", ":", ",", ":", ",", ":", ",", "15", "]", "*", "x4", ")", ",", "min", "=", "-", "1.", ")", ",", "max", "=", "1.", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x0", ".", "view", "(", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", ",", "x1", ".", "view", "(", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", ",", "x2", ".", "view", "(", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", ",", "x3", ".", "view", "(", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", ",", "x4", ".", "view", "(", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", ",", "x5", ".", "view", "(", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", ")", ",", "dim", "=", "3", ")", "\n", "", "else", ":", "\n", "        ", "out", "=", "torch", ".", "cat", "(", "[", "x0", ".", "view", "(", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", ",", "x1", ".", "view", "(", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", ",", "x2", ".", "view", "(", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", "]", ",", "dim", "=", "3", ")", "\n", "\n", "", "if", "get_likelihood", ":", "\n", "# calc likelihood avg across rgb, based on each distribution.", "\n", "# only consider selected logistic distribution.", "\n", "        ", "from", "torch", ".", "distributions", ".", "transformed_distribution", "import", "TransformedDistribution", "\n", "from", "torch", ".", "distributions", ".", "transforms", "import", "SigmoidTransform", ",", "AffineTransform", "\n", "from", "torch", ".", "distributions", "import", "Uniform", "\n", "#predictions = out.data[0, coord1, coord2, :]", "\n", "predictions", "=", "x", ".", "data", "[", "0", ",", "coord1", ",", "coord2", ",", ":", "]", "\n", "this_mean", "=", "means", "[", "0", ",", "coord1", ",", "coord2", ",", ":", "]", "\n", "this_scale", "=", "torch", ".", "exp", "(", "log_scales", "[", "0", ",", "coord1", ",", "coord2", ",", ":", "]", ")", "\n", "base_distribution", "=", "Uniform", "(", "0", ",", "1", ")", "\n", "transforms_r", "=", "[", "SigmoidTransform", "(", ")", ".", "inv", ",", "AffineTransform", "(", "loc", "=", "this_mean", "[", "0", "]", ",", "scale", "=", "this_scale", "[", "0", "]", ")", "]", "\n", "logistic_r", "=", "TransformedDistribution", "(", "base_distribution", ",", "transforms_r", ")", "\n", "log_prob_r", "=", "logistic_r", ".", "log_prob", "(", "predictions", "[", "0", "]", ")", "\n", "\n", "transforms_g", "=", "[", "SigmoidTransform", "(", ")", ".", "inv", ",", "AffineTransform", "(", "loc", "=", "this_mean", "[", "1", "]", ",", "scale", "=", "this_scale", "[", "1", "]", ")", "]", "\n", "logistic_g", "=", "TransformedDistribution", "(", "base_distribution", ",", "transforms_g", ")", "\n", "log_prob_g", "=", "logistic_g", ".", "log_prob", "(", "predictions", "[", "1", "]", ")", "\n", "\n", "transforms_b", "=", "[", "SigmoidTransform", "(", ")", ".", "inv", ",", "AffineTransform", "(", "loc", "=", "this_mean", "[", "2", "]", ",", "scale", "=", "this_scale", "[", "2", "]", ")", "]", "\n", "logistic_b", "=", "TransformedDistribution", "(", "base_distribution", ",", "transforms_b", ")", "\n", "log_prob_b", "=", "logistic_b", ".", "log_prob", "(", "predictions", "[", "2", "]", ")", "\n", "\n", "log_prob", "=", "(", "log_prob_r", "+", "log_prob_g", "+", "log_prob_b", ")", "/", "3", "\n", "\n", "return", "out", ".", "data", "[", ":", ",", "coord1", ",", "coord2", ",", ":", "]", ",", "log_prob", "\n", "\n", "", "if", "coord1", "is", "None", ":", "\n", "        ", "return", "out", ".", "data", "\n", "", "else", ":", "\n", "        ", "return", "out", ".", "data", "[", ":", ",", "coord1", ",", "coord2", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.sample_from_binary_logits": [[548, 563], ["torch.distributions.categorical.Categorical().sample", "torch.distributions.categorical.Categorical().sample", "torch.distributions.categorical.Categorical().sample", "torch.distributions.categorical.Categorical().sample.unsqueeze", "l.size", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.sample.sample", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.sample.sample", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.sample.sample"], ["", "", "def", "sample_from_binary_logits", "(", "l", ",", "coord1", ",", "coord2", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        l: B x 2 x H x W output of NN (logits)\n        coord1\n        coord2\n\n    Returns:\n        pixels: B x 1 pixel samples at location (coord1, coord2) in range [-1, 1]\n    \"\"\"", "\n", "assert", "l", ".", "size", "(", "1", ")", "==", "2", "\n", "l", "=", "l", "[", ":", ",", ":", ",", "coord1", ",", "coord2", "]", "\n", "pixels", "=", "torch", ".", "distributions", ".", "categorical", ".", "Categorical", "(", "logits", "=", "l", ")", ".", "sample", "(", ")", "\n", "pixels", "=", "pixels", "*", "2.", "-", "1.", "\n", "return", "pixels", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.down_shift": [[569, 577], ["pad", "int", "torch.ZeroPad2d", "x.size"], "function", ["None"], ["", "def", "down_shift", "(", "x", ",", "pad", "=", "None", ")", ":", "\n", "# Pytorch ordering", "\n", "    ", "xs", "=", "[", "int", "(", "y", ")", "for", "y", "in", "x", ".", "size", "(", ")", "]", "\n", "# when downshifting, the last row is removed ", "\n", "x", "=", "x", "[", ":", ",", ":", ",", ":", "xs", "[", "2", "]", "-", "1", ",", ":", "]", "\n", "# padding left, padding right, padding top, padding bottom", "\n", "pad", "=", "nn", ".", "ZeroPad2d", "(", "(", "0", ",", "0", ",", "1", ",", "0", ")", ")", "if", "pad", "is", "None", "else", "pad", "\n", "return", "pad", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.right_shift": [[579, 587], ["pad", "int", "torch.ZeroPad2d", "x.size"], "function", ["None"], ["", "def", "right_shift", "(", "x", ",", "pad", "=", "None", ")", ":", "\n", "# Pytorch ordering", "\n", "    ", "xs", "=", "[", "int", "(", "y", ")", "for", "y", "in", "x", ".", "size", "(", ")", "]", "\n", "# when righshifting, the last column is removed ", "\n", "x", "=", "x", "[", ":", ",", ":", ",", ":", ",", ":", "xs", "[", "3", "]", "-", "1", "]", "\n", "# padding left, padding right, padding top, padding bottom", "\n", "pad", "=", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "0", ",", "0", ",", "0", ")", ")", "if", "pad", "is", "None", "else", "pad", "\n", "return", "pad", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.load_part_of_model": [[593, 633], ["torch.load", "torch.load", "torch.load", "logger.info", "params.items", "logger.info", "logger.info", "torch.load.get", "model.state_dict().keys", "logger.warning", "optimizer.load_state_dict", "logger.info", "[].copy_", "float", "logger.warning", "[].items", "logger.info", "model.state_dict", "logger.warning", "len", "model.state_dict().keys", "[].keys", "model.state_dict", "[].copy_", "float", "model.state_dict", "logger.error", "len", "optimizer.state_dict", "[].keys", "optimizer.state_dict", "optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.state_dict", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.state_dict", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.state_dict", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.state_dict", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.state_dict", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.utils.EMA.state_dict"], ["", "def", "load_part_of_model", "(", "path", ",", "model", ",", "optimizer", "=", "None", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "params", "=", "checkpoint", "[", "\"model_state_dict\"", "]", "\n", "# Restore model", "\n", "logger", ".", "info", "(", "\"Restoring model from %s\"", ",", "path", ")", "\n", "added", "=", "0", "\n", "for", "name", ",", "param", "in", "params", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", "in", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "model", ".", "state_dict", "(", ")", "[", "name", "]", ".", "copy_", "(", "param", ")", "\n", "added", "+=", "1", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "warning", "(", "\"Error loading model.state_dict()[%s]: %s\"", ",", "name", ",", "e", ")", "\n", "", "", "else", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Key present in checkpoint that is not present in model.state_dict(): %s\"", ",", "name", ")", "\n", "", "", "logger", ".", "info", "(", "'Loadded %s fraction of params:'", "%", "(", "added", "/", "float", "(", "len", "(", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", ")", ")", ")", "\n", "\n", "# Restore optimizer", "\n", "if", "optimizer", ":", "\n", "        ", "logger", ".", "info", "(", "\"Restoring optimizer from %s\"", ",", "path", ")", "\n", "try", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer_state_dict\"", "]", ")", "\n", "logger", ".", "info", "(", "'Loaded optimizer params directly'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Failed to load entire optimizer state dict at once, trying each key of state only\"", ")", "\n", "\n", "added", "=", "0", "\n", "for", "name", ",", "param", "in", "checkpoint", "[", "\"optimizer_state_dict\"", "]", "[", "\"state\"", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "name", "in", "optimizer", ".", "state_dict", "(", ")", "[", "\"state\"", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "optimizer", ".", "state_dict", "(", ")", "[", "\"state\"", "]", "[", "name", "]", ".", "copy_", "(", "param", ")", "\n", "added", "+=", "1", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "logger", ".", "error", "(", "\"Error loading optimizer.state_dict()['state'][%s]: %s\"", ",", "name", ",", "e", ")", "\n", "pass", "\n", "", "", "", "logger", ".", "info", "(", "'Loaded %s fraction of optimizer params:'", "%", "(", "added", "/", "float", "(", "len", "(", "optimizer", ".", "state_dict", "(", ")", "[", "\"state\"", "]", ".", "keys", "(", ")", ")", ")", ")", ")", "\n", "\n", "# TODO: load param_groups key?", "\n", "\n", "", "", "return", "checkpoint", "[", "\"epoch\"", "]", ",", "checkpoint", ".", "get", "(", "\"global_step\"", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.locally_masked_convolution._locally_masked_conv2d.forward": [[10, 51], ["ctx.save_for_backward", "torch.unfold", "torch.unfold", "torch.unfold", "weight.view.matmul.view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "weight.view", "weight.view.matmul", "weight.view.matmul.view", "len", "weight.view.matmul.size", "weight.view.matmul.size", "weight.view.matmul.size", "mask.size", "weight.view.matmul.size", "weight.view.matmul.size", "weight.view.matmul.size", "weight.view.matmul.size", "weight.view.matmul.size", "weight.view.matmul.size", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "bias.unsqueeze().unsqueeze", "mask_weight.view().matmul", "bias.unsqueeze", "mask_weight.view"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "mask", ",", "weight", ",", "mask_weight", "=", "None", ",", "bias", "=", "None", ",", "dilation", "=", "1", ",", "padding", "=", "1", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "4", ",", "\"Unfold/fold only support 4D batched image-like tensors\"", "\n", "ctx", ".", "save_for_backward", "(", "x", ",", "mask", ",", "weight", ",", "mask_weight", ")", "\n", "ctx", ".", "dilation", "=", "dilation", "\n", "ctx", ".", "padding", "=", "padding", "\n", "ctx", ".", "H", ",", "ctx", ".", "W", "=", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", "\n", "\n", "# Shapes", "\n", "ctx", ".", "output_shape", "=", "(", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "\n", "out_channels", ",", "in_channels", ",", "k1", ",", "k2", "=", "weight", ".", "shape", "\n", "assert", "x", ".", "size", "(", "1", ")", "==", "in_channels", "\n", "assert", "mask", ".", "size", "(", "1", ")", "==", "k1", "*", "k2", "\n", "\n", "# Step 1: Unfold (im2col)", "\n", "x", "=", "F", ".", "unfold", "(", "x", ",", "(", "k1", ",", "k2", ")", ",", "dilation", "=", "dilation", ",", "padding", "=", "padding", ")", "\n", "\n", "# Step 2: Mask x. Avoid repeating mask in_channels", "\n", "#         times by reshaping x_unf (memory efficient)", "\n", "assert", "x", ".", "size", "(", "1", ")", "%", "in_channels", "==", "0", "\n", "x_unf_channels_batched", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", "*", "in_channels", ",", "\n", "x", ".", "size", "(", "1", ")", "//", "in_channels", ",", "\n", "x", ".", "size", "(", "2", ")", ")", "\n", "#import pdb ", "\n", "#pdb.set_trace()", "\n", "#print(x_unf_channels_batched.shape, mask.shape)", "\n", "x", "=", "torch", ".", "mul", "(", "x_unf_channels_batched", ",", "mask", ")", ".", "view", "(", "x", ".", "shape", ")", "\n", "\n", "# Step 3: Perform convolution via matrix multiplication and addition", "\n", "weight_matrix", "=", "weight", ".", "view", "(", "out_channels", ",", "-", "1", ")", "\n", "x", "=", "weight_matrix", ".", "matmul", "(", "x", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "+", "bias", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Step 4: Apply weight on mask, if provided. Equivalent to concatenating x and mask.", "\n", "", "if", "mask_weight", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "+", "mask_weight", ".", "view", "(", "out_channels", ",", "-", "1", ")", ".", "matmul", "(", "mask", ")", "\n", "\n", "# Step 4: Restore shape", "\n", "", "output", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "*", "ctx", ".", "output_shape", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.locally_masked_convolution._locally_masked_conv2d.backward": [[52, 94], ["grad_output.view", "grad_output.size", "grad_output.size", "weight.view", "weight.view.transpose().matmul", "torch.mul().view.view", "torch.mul().view.view", "torch.mul().view.view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.fold", "torch.fold", "torch.fold", "torch.unfold", "torch.unfold", "torch.unfold", "torch.mul().view.view", "torch.mul().view.view", "torch.mul().view.view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "grad_output.view.matmul", "grad_weight.view.view.view", "grad_output.view.matmul", "grad_mask_weight.view.view.view", "grad_output.sum", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.transpose", "torch.mul().view.transpose", "torch.mul().view.transpose", "grad_weight.view.view.size", "mask.transpose", "grad_mask_weight.view.view.size", "weight.view.transpose", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.transpose", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.transpose", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.transpose", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.transpose", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.transpose"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "x", ",", "mask", ",", "weight", ",", "mask_weight", "=", "ctx", ".", "saved_tensors", "\n", "out_channels", ",", "in_channels", ",", "k1", ",", "k2", "=", "weight", ".", "shape", "\n", "grad_output_unfolded", "=", "grad_output", ".", "view", "(", "grad_output", ".", "size", "(", "0", ")", ",", "\n", "grad_output", ".", "size", "(", "1", ")", ",", "\n", "-", "1", ")", "# B x C_out x (H*W)", "\n", "\n", "# Compute gradients", "\n", "grad_x", "=", "grad_weight", "=", "grad_mask_weight", "=", "grad_bias", "=", "None", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "weight_", "=", "weight", ".", "view", "(", "out_channels", ",", "-", "1", ")", "\n", "grad_x_", "=", "weight_", ".", "transpose", "(", "0", ",", "1", ")", ".", "matmul", "(", "grad_output_unfolded", ")", "\n", "grad_x_shape", "=", "grad_x_", ".", "shape", "\n", "# View to allow masking, since mask needs to be broadcast C_in times", "\n", "assert", "grad_x_", ".", "size", "(", "1", ")", "%", "in_channels", "==", "0", "\n", "grad_x_", "=", "grad_x_", ".", "view", "(", "grad_x_", ".", "size", "(", "0", ")", "*", "in_channels", ",", "\n", "grad_x_", ".", "size", "(", "1", ")", "//", "in_channels", ",", "\n", "grad_x_", ".", "size", "(", "2", ")", ")", "\n", "grad_x_", "=", "torch", ".", "mul", "(", "grad_x_", ",", "mask", ")", ".", "view", "(", "grad_x_shape", ")", "\n", "grad_x", "=", "F", ".", "fold", "(", "grad_x_", ",", "(", "ctx", ".", "H", ",", "ctx", ".", "W", ")", ",", "(", "k1", ",", "k2", ")", ",", "dilation", "=", "ctx", ".", "dilation", ",", "padding", "=", "ctx", ".", "padding", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "# Recompute unfold and masking to avoid storing unfolded x, at the cost of extra compute", "\n", "            ", "x_", "=", "F", ".", "unfold", "(", "x", ",", "(", "k1", ",", "k2", ")", ",", "dilation", "=", "ctx", ".", "dilation", ",", "padding", "=", "ctx", ".", "padding", ")", "# B x 27 x 64", "\n", "x_unf_shape", "=", "x_", ".", "shape", "\n", "assert", "x_", ".", "size", "(", "1", ")", "%", "in_channels", "==", "0", "\n", "x_", "=", "x_", ".", "view", "(", "x_", ".", "size", "(", "0", ")", "*", "in_channels", ",", "\n", "x_", ".", "size", "(", "1", ")", "//", "in_channels", ",", "\n", "x_", ".", "size", "(", "2", ")", ")", "\n", "x_", "=", "torch", ".", "mul", "(", "x_", ",", "mask", ")", ".", "view", "(", "x_unf_shape", ")", "\n", "\n", "grad_weight", "=", "grad_output_unfolded", ".", "matmul", "(", "x_", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "grad_weight", "=", "grad_weight", ".", "view", "(", "grad_weight", ".", "size", "(", "0", ")", ",", "*", "weight", ".", "shape", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "3", "]", ":", "\n", "            ", "grad_mask_weight", "=", "grad_output_unfolded", ".", "matmul", "(", "mask", ".", "transpose", "(", "2", ",", "1", ")", ")", "# B x C_out x k1*k2", "\n", "grad_mask_weight", "=", "grad_mask_weight", ".", "view", "(", "grad_mask_weight", ".", "size", "(", "0", ")", ",", "*", "mask_weight", ".", "shape", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "4", "]", ":", "\n", "            ", "grad_bias", "=", "grad_output", ".", "sum", "(", "dim", "=", "(", "0", ",", "2", ",", "3", ")", ")", "\n", "\n", "", "assert", "not", "ctx", ".", "needs_input_grad", "[", "1", "]", ",", "\"Can't differentiate wrt mask\"", "\n", "\n", "return", "grad_x", ",", "None", ",", "grad_weight", ",", "grad_mask_weight", ",", "grad_bias", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.locally_masked_convolution.locally_masked_conv2d.__init__": [[97, 127], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "locally_masked_convolution.locally_masked_conv2d.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.locally_masked_convolution.locally_masked_conv2d.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "dilation", "=", "1", ",", "bias", "=", "True", ",", "mask_weight", "=", "False", ")", ":", "\n", "        ", "\"\"\"A memory-efficient implementation of Locally Masked Convolution.\n\n        Args:\n            in_channels (int): Number of channels in the input image\n            out_channels (int): Number of channels produced by the convolution\n            kernel_size (tuple): Size of the convolving kernel as a tuple of two ints.\n                Default: (3, 3). The first int is used for the height dimension,\n                and the second int for the width dimension.\n            dilation (int): Spacing between kernel elements. Default: 1\n            bias (bool): If True, adds a learnable bias to the output. Default: True\n            mask_weight (bool): If True, adds a learnable weight to condition the layer\n                on the mask. Default: False\n        \"\"\"", "\n", "super", "(", "locally_masked_conv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "dilation", "=", "dilation", "\n", "\n", "# Pad to maintain spatial dimensions", "\n", "pad0", "=", "(", "dilation", "*", "(", "kernel_size", "[", "0", "]", "-", "1", ")", ")", "//", "2", "\n", "pad1", "=", "(", "dilation", "*", "(", "kernel_size", "[", "1", "]", "-", "1", ")", ")", "//", "2", "\n", "self", ".", "padding", "=", "(", "pad0", ",", "pad1", ")", "\n", "\n", "# Conv parameters", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", ",", "*", "kernel_size", ")", ")", "\n", "self", ".", "mask_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ",", "*", "kernel_size", ")", ")", "if", "mask_weight", "else", "None", "\n", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "if", "bias", "else", "None", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.locally_masked_convolution.locally_masked_conv2d.reset_parameters": [[128, 137], ["torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "# Adapted from PyTorch _ConvNd implementation", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "if", "self", ".", "mask_weight", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "mask_weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "fan_in", ",", "_", "=", "nn", ".", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "weight", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "bias", ",", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.locally_masked_convolution.locally_masked_conv2d.forward": [[138, 141], ["_locally_masked_conv2d.apply"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "return", "_locally_masked_conv2d", ".", "apply", "(", "x", ",", "mask", ",", "self", ".", "weight", ",", "self", ".", "mask_weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "dilation", ",", "self", ".", "padding", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.raster_scan_idx": [[21, 28], ["range", "numpy.array", "range", "idx.append"], "function", ["None"], ["def", "raster_scan_idx", "(", "rows", ",", "cols", ")", ":", "\n", "    ", "\"\"\"Return indices of a raster scan\"\"\"", "\n", "idx", "=", "[", "]", "\n", "for", "r", "in", "range", "(", "rows", ")", ":", "\n", "        ", "for", "c", "in", "range", "(", "cols", ")", ":", "\n", "            ", "idx", ".", "append", "(", "(", "r", ",", "c", ")", ")", "\n", "", "", "return", "np", ".", "array", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.s_curve_idx": [[29, 37], ["range", "numpy.array", "range", "range", "idx.append"], "function", ["None"], ["", "def", "s_curve_idx", "(", "rows", ",", "cols", ")", ":", "\n", "    ", "\"\"\"Generate S shape curve\"\"\"", "\n", "idx", "=", "[", "]", "\n", "for", "r", "in", "range", "(", "rows", ")", ":", "\n", "        ", "col_idx", "=", "range", "(", "cols", ")", "if", "r", "%", "2", "==", "0", "else", "range", "(", "cols", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "for", "c", "in", "col_idx", ":", "\n", "            ", "idx", ".", "append", "(", "(", "r", ",", "c", ")", ")", "\n", "", "", "return", "np", ".", "array", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.hilbert_idx": [[38, 49], ["int", "HilbertCurve", "numpy.zeros", "range", "numpy.log2", "HilbertCurve.coordinates_from_distance"], "function", ["None"], ["", "def", "hilbert_idx", "(", "rows", ",", "cols", ")", ":", "\n", "    ", "assert", "rows", "==", "cols", ",", "\"Image must be square for Hilbert curve\"", "\n", "assert", "(", "rows", ">", "0", "and", "(", "rows", "&", "(", "rows", "-", "1", ")", ")", "==", "0", ")", ",", "\"Must have power-of-two sized image\"", "\n", "order", "=", "int", "(", "np", ".", "log2", "(", "rows", ")", ")", "\n", "curve", "=", "HilbertCurve", "(", "order", ",", "2", ")", "\n", "idx", "=", "np", ".", "zeros", "(", "(", "rows", "*", "cols", ",", "2", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "i", "in", "range", "(", "rows", "*", "cols", ")", ":", "\n", "        ", "coords", "=", "curve", ".", "coordinates_from_distance", "(", "i", ")", "# cols, then rows", "\n", "idx", "[", "i", ",", "0", "]", "=", "coords", "[", "1", "]", "\n", "idx", "[", "i", ",", "1", "]", "=", "coords", "[", "0", "]", "\n", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.custom_idx": [[51, 112], ["models.lmconv.get_custom_order.custom_idx"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.custom_idx"], ["", "def", "custom_idx", "(", "rows", ",", "cols", ",", "distances", ",", "mass_center", ")", ":", "\n", "    ", "\"\"\"begin from maximum distance to background pixels\n    and proceed towards background pixels; fill in these\n    closest to foreground pixels, then furtherst\n    ties are broken using spiral pattern, \n    which starts from center of mass. \n    One constraint is each new pixel must touch a pixel \n    previously predicted (L,R,U,D); so that the mask is not blank.\n    \n    inputs: rows, cols - int of sizes\n    distances: (rows, cols) of distance to background\n    (if in foreground -- positive), \n    to foreground (if in background -- negative)\n    mass_center: row, col int tuple of start of spiral \n    \"\"\"", "\n", "# implementied via cython for speed", "\n", "# to re-comple this we run \"python setup.py build_ext --inplace\"", "\n", "return", "models", ".", "lmconv", ".", "get_custom_order", ".", "custom_idx", "(", "rows", ",", "cols", ",", "distances", ",", "mass_center", ")", "\n", "\n", "\"\"\"\n    # code that is implemented in cython: \n    idx = []\n    r = mass_center[0]\n    c = mass_center[1]\n    diff = c - r\n    tot = mass_center[0] + mass_center[1]\n    assert(rows == cols)\n\n    distances *= 10000\n\n    # start at highest distance, add elements to list if allowed\n    # allowed only if neighbor a current pixel\n\n    c = np.argmax(distances) % rows\n    r = int((np.argmax(distances)-c) / rows)\n    final_order = [[r, c]]\n    used = [[r, c]]\n    candidate_distances = []\n    while len(final_order) < rows * cols:\n        # add candidates surrounding new \n        if r - 1 >= 0 and [r-1,c] not in used: # Up\n            heapq.heappush(candidate_distances,(-distances[r-1,c], [r-1,c])) \n            used.append([r-1,c])\n            #candidate_distances.append(distances[r-1,c])\n        if r + 1 < rows and [r+1,c] not in used: # Down\n            heapq.heappush(candidate_distances,(-distances[r+1,c], [r+1,c])) \n            used.append([r+1,c])\n            #candidate_distances.append(distances[r+1,c])\n        if c - 1 >= 0 and [r,c-1] not in used: # Left \n            heapq.heappush(candidate_distances,(-distances[r,c-1], [r,c-1])) \n            used.append([r,c-1])\n            #candidate_distances.append(distances[r,c-1])\n        if c + 1 < cols and [r,c+1] not in used: # Right\n            heapq.heappush(candidate_distances,(-distances[r,c+1], [r,c+1])) \n            used.append([r,c+1])   \n            #candidate_distances.append(distances[r,c+1])\n        (_, [r,c]) = heapq.heappop(candidate_distances)\n        final_order.append([r, c])\n\n    return np.array(final_order)\n    \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.get_generation_order_idx": [[113, 120], ["eval", "eval"], "function", ["None"], ["", "def", "get_generation_order_idx", "(", "order", ":", "str", ",", "rows", ":", "int", ",", "cols", ":", "int", ",", "distances", "=", "None", ",", "mass_center", "=", "None", ")", ":", "\n", "    ", "\"\"\"Get (rows*cols) x 2 np array given order that pixels are generated\"\"\"", "\n", "assert", "order", "in", "[", "\"raster_scan\"", ",", "\"s_curve\"", ",", "\"hilbert\"", ",", "\"gilbert2d\"", ",", "\n", "\"s_curve_center_quarter_last\"", ",", "'custom'", "]", "\n", "if", "order", "==", "'custom'", ":", "\n", "        ", "return", "eval", "(", "f\"{order}_idx\"", ")", "(", "rows", ",", "cols", ",", "distances", ",", "mass_center", ")", "\n", "", "return", "eval", "(", "f\"{order}_idx\"", ")", "(", "rows", ",", "cols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.reflect_rows": [[121, 123], ["list", "map"], "function", ["None"], ["", "def", "reflect_rows", "(", "generation_idx", ",", "obs", ")", ":", "\n", "    ", "return", "list", "(", "map", "(", "lambda", "loc", ":", "[", "obs", "[", "1", "]", "-", "loc", "[", "0", "]", "-", "1", ",", "loc", "[", "1", "]", "]", ",", "generation_idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.reflect_cols": [[124, 126], ["list", "map"], "function", ["None"], ["", "def", "reflect_cols", "(", "generation_idx", ",", "obs", ")", ":", "\n", "    ", "return", "list", "(", "map", "(", "lambda", "loc", ":", "[", "loc", "[", "0", "]", ",", "obs", "[", "2", "]", "-", "loc", "[", "1", "]", "-", "1", "]", ",", "generation_idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.reflect_all": [[127, 129], ["list", "map"], "function", ["None"], ["", "def", "reflect_all", "(", "generation_idx", ",", "obs", ")", ":", "\n", "    ", "return", "list", "(", "map", "(", "lambda", "loc", ":", "[", "obs", "[", "1", "]", "-", "loc", "[", "0", "]", "-", "1", ",", "obs", "[", "2", "]", "-", "loc", "[", "1", "]", "-", "1", "]", ",", "generation_idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.transpose": [[130, 132], ["list", "map"], "function", ["None"], ["", "def", "transpose", "(", "generation_idx", ")", ":", "\n", "    ", "return", "list", "(", "map", "(", "lambda", "loc", ":", "[", "loc", "[", "1", "]", ",", "loc", "[", "0", "]", "]", ",", "generation_idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.augment_orders": [[133, 143], ["masking.reflect_rows", "masking.reflect_cols", "masking.reflect_all", "masking.transpose", "masking.reflect_rows", "masking.reflect_cols", "masking.reflect_all", "masking.transpose", "masking.transpose", "masking.transpose"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.reflect_rows", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.reflect_cols", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.reflect_all", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.transpose", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.reflect_rows", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.reflect_cols", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.reflect_all", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.transpose", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.transpose", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.transpose"], ["", "def", "augment_orders", "(", "generation_idx", ",", "obs", ")", ":", "\n", "    ", "return", "[", "\n", "generation_idx", ",", "\n", "reflect_rows", "(", "generation_idx", ",", "obs", ")", ",", "\n", "reflect_cols", "(", "generation_idx", ",", "obs", ")", ",", "\n", "reflect_all", "(", "generation_idx", ",", "obs", ")", ",", "\n", "transpose", "(", "generation_idx", ")", ",", "\n", "reflect_rows", "(", "transpose", "(", "generation_idx", ")", ",", "obs", ")", ",", "\n", "reflect_cols", "(", "transpose", "(", "generation_idx", ")", ",", "obs", ")", ",", "\n", "reflect_all", "(", "transpose", "(", "generation_idx", ")", ",", "obs", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.plot_order": [[145, 163], ["matplotlib.figure", "matplotlib.hlines", "matplotlib.vlines", "zip", "matplotlib.plot", "matplotlib.scatter", "matplotlib.xticks", "matplotlib.axis", "matplotlib.gca().invert_yaxis", "print", "numpy.arange", "matplotlib.savefig", "matplotlib.show", "numpy.arange", "numpy.arange", "matplotlib.gca"], "function", ["None"], ["", "def", "plot_order", "(", "generation_idx", ",", "obs", ",", "out_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"Plot generation coordinate list. A star on the curve\n    denotes the pixel generated last. obs is a three-tuple of input image dimensions,\n    (input-channels-unused, num_rows, num_cols)\"\"\"", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "3", ",", "3", ")", ")", "\n", "plt", ".", "hlines", "(", "np", ".", "arange", "(", "-", "1", ",", "obs", "[", "1", "]", ")", "+", "0.5", ",", "xmin", "=", "-", "0.5", ",", "xmax", "=", "obs", "[", "2", "]", "-", "0.5", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "vlines", "(", "np", ".", "arange", "(", "-", "1", ",", "obs", "[", "2", "]", ")", "+", "0.5", ",", "ymin", "=", "-", "0.5", ",", "ymax", "=", "obs", "[", "1", "]", "-", "0.5", ",", "alpha", "=", "0.5", ")", "\n", "rows", ",", "cols", "=", "zip", "(", "*", "generation_idx", ")", "\n", "plt", ".", "plot", "(", "cols", ",", "rows", ",", "color", "=", "\"r\"", ")", "\n", "plt", ".", "scatter", "(", "[", "cols", "[", "-", "1", "]", "]", ",", "[", "rows", "[", "-", "1", "]", "]", ",", "marker", "=", "\"*\"", ",", "s", "=", "100", ",", "c", "=", "\"k\"", ")", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "obs", "[", "1", "]", ")", ")", "\n", "plt", ".", "axis", "(", "\"equal\"", ")", "\n", "plt", ".", "gca", "(", ")", ".", "invert_yaxis", "(", ")", "\n", "print", "(", "out_path", ")", "\n", "if", "out_path", ":", "\n", "        ", "plt", ".", "savefig", "(", "out_path", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.plot_orders": [[165, 198], ["len", "int", "matplotlib.subplots", "math.ceil", "ax.hlines", "ax.vlines", "zip", "ax.plot", "ax.scatter", "ax.axis", "ax.invert_yaxis", "matplotlib.savefig", "FigureCanvas", "FigureCanvas.draw", "numpy.fromstring", "data.reshape.reshape", "int", "int", "fig.canvas.tostring_rgb", "len", "numpy.arange", "numpy.arange", "fig.canvas.get_width_height"], "function", ["None"], ["", "", "def", "plot_orders", "(", "generation_idx_list", ",", "obs", ",", "size", "=", "5", ",", "plot_rows", "=", "4", ",", "out_path", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Plot multiple generation coordinate lists in a single figure. A star on the curve\n    denotes the pixel generated last. obs is a three-tuple of input image dimensions,\n    (input-channels-unused, num_rows, num_cols)\"\"\"", "\n", "num", "=", "len", "(", "generation_idx_list", ")", "\n", "plot_cols", "=", "int", "(", "math", ".", "ceil", "(", "num", "/", "4", ")", ")", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "plot_rows", ",", "plot_cols", ",", "figsize", "=", "(", "size", "*", "plot_cols", ",", "size", "*", "plot_rows", ")", ")", "\n", "pr", ",", "pc", "=", "0", ",", "0", "\n", "for", "generation_idx", "in", "generation_idx_list", ":", "\n", "#import pdb ", "\n", "#pdb.set_trace()", "\n", "        ", "ax", "=", "axes", "[", "pr", ",", "pc", "]", "if", "len", "(", "generation_idx_list", ")", ">", "1", "else", "axes", "\n", "ax", ".", "hlines", "(", "np", ".", "arange", "(", "-", "1", ",", "obs", "[", "1", "]", ")", "+", "0.5", ",", "xmin", "=", "-", "0.5", ",", "xmax", "=", "obs", "[", "2", "]", "-", "0.5", ",", "alpha", "=", "0.5", ")", "\n", "ax", ".", "vlines", "(", "np", ".", "arange", "(", "-", "1", ",", "obs", "[", "2", "]", ")", "+", "0.5", ",", "ymin", "=", "-", "0.5", ",", "ymax", "=", "obs", "[", "1", "]", "-", "0.5", ",", "alpha", "=", "0.5", ")", "\n", "rows_", ",", "cols_", "=", "zip", "(", "*", "generation_idx", ")", "\n", "rows", "=", "[", "int", "(", "r", ")", "for", "r", "in", "rows_", "]", "\n", "cols", "=", "[", "int", "(", "r", ")", "for", "r", "in", "cols_", "]", "\n", "ax", ".", "plot", "(", "cols", ",", "rows", ",", "color", "=", "\"r\"", ")", "\n", "ax", ".", "scatter", "(", "[", "cols", "[", "-", "1", "]", "]", ",", "[", "rows", "[", "-", "1", "]", "]", ",", "marker", "=", "\"*\"", ",", "s", "=", "100", ",", "c", "=", "\"k\"", ")", "\n", "ax", ".", "axis", "(", "\"equal\"", ")", "\n", "ax", ".", "invert_yaxis", "(", ")", "\n", "pc", "=", "(", "pc", "+", "1", ")", "%", "plot_cols", "\n", "if", "pc", "==", "0", ":", "\n", "            ", "pr", "+=", "1", "\n", "", "", "if", "out_path", ":", "\n", "        ", "plt", ".", "savefig", "(", "out_path", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "from", "matplotlib", ".", "backends", ".", "backend_agg", "import", "FigureCanvasAgg", "as", "FigureCanvas", "\n", "canvas", "=", "FigureCanvas", "(", "fig", ")", "\n", "canvas", ".", "draw", "(", ")", "\n", "data", "=", "np", ".", "fromstring", "(", "fig", ".", "canvas", ".", "tostring_rgb", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ",", "sep", "=", "''", ")", "\n", "data", "=", "data", ".", "reshape", "(", "fig", ".", "canvas", ".", "get_width_height", "(", ")", "[", ":", ":", "-", "1", "]", "+", "(", "3", ",", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.plot_orders2": [[199, 213], ["numpy.ones", "range", "zip", "len", "numpy.resize", "numpy.array", "len"], "function", ["None"], ["", "", "def", "plot_orders2", "(", "generation_idx_list", ",", "obs", ",", "size", "=", "5", ",", "plot_rows", "=", "4", ",", "out_path", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Plot multiple generation coordinate lists in a single figure. A star on the curve\n    denotes the pixel generated last. obs is a three-tuple of input image dimensions,\n    (input-channels-unused, num_rows, num_cols)\"\"\"", "\n", "img", "=", "np", ".", "ones", "(", "(", "1", ",", "3", ",", "256", ",", "256", ")", ")", "*", "-", "1", "\n", "for", "generation_idx", "in", "generation_idx_list", ":", "\n", "        ", "try", ":", "\n", "            ", "rows", ",", "cols", "=", "zip", "(", "*", "generation_idx", ")", "\n", "", "except", ":", "\n", "            ", "rows", "=", "generation_idx_list", "[", ":", ",", "0", "]", "\n", "cols", "=", "generation_idx_list", "[", ":", ",", "1", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "rows", ")", ")", ":", "\n", "            ", "img", "[", "0", ",", ":", ",", "rows", "[", "i", "]", "*", "8", ":", "rows", "[", "i", "]", "*", "8", "+", "8", ",", "cols", "[", "i", "]", "*", "8", ":", "cols", "[", "i", "]", "*", "8", "+", "8", "]", "=", "np", ".", "resize", "(", "np", ".", "array", "(", "[", "0", ",", ".5", ",", "1", "]", ")", "*", "(", "2.0", "*", "i", "/", "(", "len", "(", "rows", ")", ")", "-", "1", ")", ",", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "", "", "return", "img", "\n", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.move_to_end": [[258, 269], ["list", "numpy.array", "end.append", "rearranged.append"], "function", ["None"], ["def", "move_to_end", "(", "order", ",", "coords_to_move", ")", ":", "\n", "    ", "order", "=", "list", "(", "order", ")", "\n", "rearranged", "=", "[", "]", "\n", "end", "=", "[", "]", "\n", "for", "coord", "in", "order", ":", "\n", "        ", "x1", ",", "x2", "=", "coord", "\n", "if", "(", "x1", ",", "x2", ")", "in", "coords_to_move", ":", "\n", "            ", "end", ".", "append", "(", "coord", ")", "\n", "", "else", ":", "\n", "            ", "rearranged", ".", "append", "(", "coord", ")", "\n", "", "", "return", "np", ".", "array", "(", "rearranged", "+", "end", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.center_quarter_coords": [[270, 277], ["range", "range", "center_coords.append"], "function", ["None"], ["", "def", "center_quarter_coords", "(", "rows", ",", "cols", ")", ":", "\n", "# Indices of center mask of half width and height", "\n", "    ", "center_coords", "=", "[", "]", "\n", "for", "x1", "in", "range", "(", "rows", "//", "4", ",", "rows", "-", "rows", "//", "4", ")", ":", "\n", "        ", "for", "x2", "in", "range", "(", "cols", "//", "4", ",", "cols", "-", "cols", "//", "4", ")", ":", "\n", "            ", "center_coords", ".", "append", "(", "(", "x1", ",", "x2", ")", ")", "\n", "", "", "return", "center_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.s_curve_center_quarter_last_idx": [[278, 281], ["masking.s_curve_idx", "masking.move_to_end", "masking.center_quarter_coords"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.s_curve_idx", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.move_to_end", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.center_quarter_coords"], ["", "def", "s_curve_center_quarter_last_idx", "(", "rows", ",", "cols", ")", ":", "\n", "    ", "order", "=", "s_curve_idx", "(", "rows", ",", "cols", ")", "\n", "return", "move_to_end", "(", "order", ",", "center_quarter_coords", "(", "rows", ",", "cols", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.kernel_masks": [[287, 342], ["int", "numpy.zeros", "set", "enumerate", "range", "set.add", "numpy.all", "len", "set.add", "range"], "function", ["None"], ["", "def", "kernel_masks", "(", "generation_order_idx", ":", "np", ".", "ndarray", ",", "nrows", ",", "ncols", ",", "k", "=", "3", ",", "\n", "dilation", "=", "1", ",", "mask_type", "=", "'B'", ",", "set_padding", "=", "0", ",", "observed_idx", ":", "np", ".", "ndarray", "=", "None", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Generate kernel masks given a pixel generation order.\n    \n    Args:\n        generation_order_idx: N x 2 array, order to generate pixels. \n        nrows\n        ncols\n        k\n        dilation\n        mask_type: A or B\n        set_padding\n        observed_idx: M x 2 array, for coords in this list, will allow all locations to condition.\n            Useful for inpainting tasks, where some context is observed and masking is only needed\n            in the unobserved region.\n    \"\"\"", "\n", "#import pdb", "\n", "#pdb.set_trace()", "\n", "assert", "k", "%", "2", "==", "1", ",", "\"Only odd sized kernels are implemented\"", "\n", "half_k", "=", "int", "(", "k", "/", "2", ")", "\n", "masks", "=", "np", ".", "zeros", "(", "(", "len", "(", "generation_order_idx", ")", ",", "k", ",", "k", ")", ")", "\n", "\n", "locs_generated", "=", "set", "(", ")", "\n", "if", "observed_idx", "is", "not", "None", ":", "\n", "# Can observe some context", "\n", "        ", "for", "r", ",", "c", "in", "observed_idx", ":", "\n", "            ", "locs_generated", ".", "add", "(", "(", "r", ",", "c", ")", ")", "\n", "\n", "# Set masks", "\n", "#import pdb ", "\n", "#pdb.set_trace()", "\n", "", "", "for", "i", ",", "(", "r", ",", "c", ")", "in", "enumerate", "(", "generation_order_idx", ")", ":", "\n", "        ", "row_major_index", "=", "r", "*", "ncols", "+", "c", "\n", "for", "dr", "in", "range", "(", "-", "half_k", ",", "half_k", "+", "1", ")", ":", "\n", "            ", "for", "dc", "in", "range", "(", "-", "half_k", ",", "half_k", "+", "1", ")", ":", "\n", "                ", "if", "dr", "==", "0", "and", "dc", "==", "0", ":", "\n", "# skip center pixel of mask", "\n", "                    ", "continue", "\n", "\n", "", "loc", "=", "(", "r", "+", "dr", "*", "dilation", ",", "c", "+", "dc", "*", "dilation", ")", "\n", "if", "loc", "in", "locs_generated", ":", "\n", "# The desired location has been generated,", "\n", "# so we can condition on it", "\n", "                    ", "masks", "[", "row_major_index", ",", "half_k", "+", "dr", ",", "half_k", "+", "dc", "]", "=", "1", "\n", "", "elif", "not", "(", "0", "<=", "loc", "[", "0", "]", "<", "nrows", "and", "0", "<=", "loc", "[", "1", "]", "<", "ncols", ")", ":", "\n", "# Kernel location overlaps with padding", "\n", "                    ", "masks", "[", "row_major_index", ",", "half_k", "+", "dr", ",", "half_k", "+", "dc", "]", "=", "set_padding", "\n", "", "", "", "locs_generated", ".", "add", "(", "(", "r", ",", "c", ")", ")", "\n", "\n", "", "if", "mask_type", "==", "'B'", ":", "\n", "        ", "masks", "[", ":", ",", "half_k", ",", "half_k", "]", "=", "1", "\n", "", "else", ":", "\n", "        ", "assert", "np", ".", "all", "(", "masks", "[", ":", ",", "half_k", ",", "half_k", "]", "==", "0", ")", "\n", "\n", "", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.get_unfolded_masks": [[343, 350], ["masking.kernel_masks", "torch.tensor", "torch.tensor.view().transpose", "torch.tensor.view"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.kernel_masks", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.transpose"], ["", "def", "get_unfolded_masks", "(", "generation_order_idx", ",", "nrows", ",", "ncols", ",", "k", "=", "3", ",", "dilation", "=", "1", ",", "mask_type", "=", "'B'", ",", "observed_idx", "=", "None", ")", ":", "\n", "    ", "assert", "mask_type", "in", "[", "'A'", ",", "'B'", "]", "\n", "masks", "=", "kernel_masks", "(", "generation_order_idx", ",", "nrows", ",", "ncols", ",", "k", ",", "dilation", ",", "mask_type", ",", "\n", "set_padding", "=", "0", ",", "observed_idx", "=", "observed_idx", ")", "\n", "masks", "=", "torch", ".", "tensor", "(", "masks", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "masks_unf", "=", "masks", ".", "view", "(", "1", ",", "nrows", "*", "ncols", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "masks_unf", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.get_masks": [[351, 371], ["masking.get_unfolded_masks", "masking.get_unfolded_masks", "mask_init.cuda().repeat.cuda().repeat", "mask_undilated.cuda().repeat.cuda().repeat", "masking.plot_unfolded_masks", "masking.plot_unfolded_masks", "torch.cuda.device_count", "torch.cuda.device_count", "masking.get_unfolded_masks", "mask_dilated.cuda().repeat.cuda().repeat", "mask_init.cuda().repeat.cuda", "mask_undilated.cuda().repeat.cuda", "masking.plot_unfolded_masks", "torch.cuda.device_count", "os.path.join", "os.path.join", "mask_dilated.cuda().repeat.cuda", "os.path.join"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.get_unfolded_masks", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.get_unfolded_masks", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.plot_unfolded_masks", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.plot_unfolded_masks", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.get_unfolded_masks", "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.plot_unfolded_masks"], ["", "def", "get_masks", "(", "generation_idx", ",", "nrows", ":", "int", ",", "ncols", ":", "int", ",", "k", ":", "int", "=", "3", ",", "max_dilation", ":", "int", "=", "1", ",", "observed_idx", "=", "None", ",", "out_dir", ":", "str", "=", "\"runs\"", ",", "plot_suffix", "=", "\"\"", ",", "plot", "=", "True", ")", ":", "\n", "    ", "\"\"\"Get and plot three masks: mask type A for first layer, mask type B for later layers, and mask type B with dilation.\n    Masks are copied to GPU and repeated along the batch dimension torch.cuda.device_count() times for DataParallel support.\"\"\"", "\n", "mask_init", "=", "get_unfolded_masks", "(", "generation_idx", ",", "nrows", ",", "ncols", ",", "k", "=", "k", ",", "dilation", "=", "1", ",", "mask_type", "=", "'A'", ",", "observed_idx", "=", "observed_idx", ")", "\n", "mask_undilated", "=", "get_unfolded_masks", "(", "generation_idx", ",", "nrows", ",", "ncols", ",", "k", "=", "k", ",", "dilation", "=", "1", ",", "mask_type", "=", "'B'", ",", "observed_idx", "=", "observed_idx", ")", "\n", "if", "plot", ":", "\n", "        ", "plot_unfolded_masks", "(", "nrows", ",", "ncols", ",", "generation_idx", ",", "mask_init", ",", "k", "=", "k", ",", "out_path", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"mask_init_{plot_suffix}.pdf\"", ")", ")", "\n", "plot_unfolded_masks", "(", "nrows", ",", "ncols", ",", "generation_idx", ",", "mask_undilated", ",", "k", "=", "k", ",", "out_path", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"mask_undilated_{plot_suffix}.pdf\"", ")", ")", "\n", "", "mask_init", "=", "mask_init", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "repeat", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "1", ",", "1", ")", "\n", "mask_undilated", "=", "mask_undilated", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "repeat", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "1", ",", "1", ")", "\n", "\n", "if", "max_dilation", "==", "1", ":", "\n", "        ", "mask_dilated", "=", "mask_undilated", "\n", "", "else", ":", "\n", "        ", "mask_dilated", "=", "get_unfolded_masks", "(", "generation_idx", ",", "nrows", ",", "ncols", ",", "k", "=", "k", ",", "dilation", "=", "max_dilation", ",", "mask_type", "=", "'B'", ",", "observed_idx", "=", "observed_idx", ")", "\n", "if", "plot", ":", "\n", "            ", "plot_unfolded_masks", "(", "nrows", ",", "ncols", ",", "generation_idx", ",", "mask_dilated", ",", "k", "=", "k", ",", "out_path", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"mask_dilated_d{max_dilation}_{plot_suffix}.pdf\"", ")", ")", "\n", "", "mask_dilated", "=", "mask_dilated", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "repeat", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "1", ",", "1", ")", "\n", "\n", "", "return", "mask_init", ",", "mask_undilated", ",", "mask_dilated", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.plot_masks": [[372, 383], ["matplotlib.subplots", "matplotlib.suptitle", "enumerate", "matplotlib.setp", "zip", "axes[].imshow", "matplotlib.savefig", "matplotlib.show"], "function", ["None"], ["", "def", "plot_masks", "(", "nrows", ",", "ncols", ",", "generation_order", ",", "masks", ",", "k", "=", "3", ",", "out_path", "=", "None", ")", ":", "\n", "    ", "import", "time", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "nrows", ",", "ncols", ")", "\n", "plt", ".", "suptitle", "(", "f\"Kernel masks\"", ")", "\n", "for", "row_major_index", ",", "(", "(", "r", ",", "c", ")", ",", "mask", ")", "in", "enumerate", "(", "zip", "(", "generation_order", ",", "masks", ")", ")", ":", "\n", "        ", "axes", "[", "row_major_index", "//", "ncols", ",", "row_major_index", "%", "ncols", "]", ".", "imshow", "(", "mask", ",", "vmin", "=", "0", ",", "vmax", "=", "1", ")", "\n", "", "plt", ".", "setp", "(", "axes", ",", "xticks", "=", "[", "]", ",", "yticks", "=", "[", "]", ")", "\n", "if", "out_path", ":", "\n", "        ", "plt", ".", "savefig", "(", "out_path", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.plot_unfolded_masks": [[384, 388], ["unfolded_masks.view().permute", "logger.info", "masking.plot_masks", "unfolded_masks.view"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.lmconv.masking.plot_masks"], ["", "", "def", "plot_unfolded_masks", "(", "nrows", ",", "ncols", ",", "generation_order", ",", "unfolded_masks", ",", "k", "=", "3", ",", "out_path", "=", "None", ")", ":", "\n", "    ", "masks", "=", "unfolded_masks", ".", "view", "(", "k", ",", "k", ",", "-", "1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "logger", ".", "info", "(", "f\"Plotting kernel masks and saving to {out_path}...\"", ")", "\n", "plot_masks", "(", "nrows", ",", "ncols", ",", "generation_order", ",", "masks", ",", "k", "=", "3", ",", "out_path", "=", "out_path", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.GANLoss.__init__": [[21, 48], ["torch.Module.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "gan_mode", ",", "\n", "target_real_label", "=", "1.0", ",", "\n", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ",", "\n", "opt", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_tensor", "=", "None", "\n", "self", ".", "fake_label_tensor", "=", "None", "\n", "self", ".", "zero_tensor", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "self", ".", "gan_mode", "=", "gan_mode", "\n", "self", ".", "opt", "=", "opt", "\n", "if", "gan_mode", "==", "\"ls\"", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "\"original\"", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "\"w\"", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "\"hinge\"", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unexpected gan_mode {}\"", ".", "format", "(", "gan_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.GANLoss.get_target_tensor": [[49, 64], ["gan_loss.GANLoss.real_label_tensor.expand_as", "gan_loss.GANLoss.fake_label_tensor.expand_as", "gan_loss.GANLoss.Tensor().fill_().to", "gan_loss.GANLoss.real_label_tensor.requires_grad_", "gan_loss.GANLoss.Tensor().fill_().to", "gan_loss.GANLoss.fake_label_tensor.requires_grad_", "gan_loss.GANLoss.Tensor().fill_", "gan_loss.GANLoss.Tensor().fill_", "gan_loss.GANLoss.Tensor", "gan_loss.GANLoss.Tensor"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "target_is_real", ":", "\n", "            ", "if", "self", ".", "real_label_tensor", "is", "None", ":", "\n", "                ", "self", ".", "real_label_tensor", "=", "(", "\n", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "self", ".", "real_label", ")", ".", "to", "(", "input", ".", "device", ")", "\n", ")", "\n", "self", ".", "real_label_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "real_label_tensor", ".", "expand_as", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "fake_label_tensor", "is", "None", ":", "\n", "                ", "self", ".", "fake_label_tensor", "=", "(", "\n", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", ".", "to", "(", "input", ".", "device", ")", "\n", ")", "\n", "self", ".", "fake_label_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "fake_label_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.GANLoss.get_zero_tensor": [[65, 72], ["gan_loss.GANLoss.zero_tensor.to", "gan_loss.GANLoss.zero_tensor.expand_as", "gan_loss.GANLoss.Tensor().fill_", "gan_loss.GANLoss.zero_tensor.requires_grad_", "gan_loss.GANLoss.Tensor"], "methods", ["None"], ["", "", "def", "get_zero_tensor", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "zero_tensor", "is", "None", ":", "\n", "            ", "self", ".", "zero_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "0", ")", "\n", "self", ".", "zero_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "", "self", ".", "zero_tensor", "=", "self", ".", "zero_tensor", ".", "to", "(", "input", ".", "device", ")", "\n", "return", "self", ".", "zero_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.GANLoss.loss": [[73, 101], ["gan_loss.GANLoss.get_target_tensor", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "gan_loss.GANLoss.get_target_tensor", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "input.mean", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "input.mean", "gan_loss.GANLoss.get_zero_tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "gan_loss.GANLoss.get_zero_tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.GANLoss.get_zero_tensor", "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.GANLoss.get_zero_tensor"], ["", "def", "loss", "(", "self", ",", "input", ",", "target_is_real", ",", "for_discriminator", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "gan_mode", "==", "\"original\"", ":", "# cross entropy loss", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "input", ",", "target_tensor", ")", "\n", "return", "loss", "\n", "", "elif", "self", ".", "gan_mode", "==", "\"ls\"", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "return", "F", ".", "mse_loss", "(", "input", ",", "target_tensor", ")", "\n", "", "elif", "self", ".", "gan_mode", "==", "\"hinge\"", ":", "\n", "            ", "if", "for_discriminator", ":", "\n", "                ", "if", "target_is_real", ":", "\n", "                    ", "minval", "=", "torch", ".", "min", "(", "input", "-", "1", ",", "self", ".", "get_zero_tensor", "(", "input", ")", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "minval", ")", "\n", "", "else", ":", "\n", "                    ", "minval", "=", "torch", ".", "min", "(", "-", "input", "-", "1", ",", "self", ".", "get_zero_tensor", "(", "input", ")", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "minval", ")", "\n", "", "", "else", ":", "\n", "                ", "assert", "(", "\n", "target_is_real", "\n", ")", ",", "\"The generator's hinge loss must be aiming for real\"", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "input", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "# wgan", "\n", "            ", "if", "target_is_real", ":", "\n", "                ", "return", "-", "input", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "input", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.GANLoss.__call__": [[102, 119], ["isinstance", "gan_loss.GANLoss.loss", "isinstance", "gan_loss.GANLoss.loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "gan_loss.GANLoss.size", "gan_loss.GANLoss.view", "len", "gan_loss.GANLoss.size"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.GANLoss.loss", "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.GANLoss.loss"], ["", "", "", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ",", "for_discriminator", "=", "True", ")", ":", "\n", "# computing loss is a bit complicated because |input| may not be", "\n", "# a tensor, but list of tensors in case of multiscale discriminator", "\n", "        ", "if", "isinstance", "(", "input", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "for", "pred_i", "in", "input", ":", "\n", "                ", "if", "isinstance", "(", "pred_i", ",", "list", ")", ":", "\n", "                    ", "pred_i", "=", "pred_i", "[", "-", "1", "]", "\n", "", "loss_tensor", "=", "self", ".", "loss", "(", "\n", "pred_i", ",", "target_is_real", ",", "for_discriminator", "\n", ")", "\n", "bs", "=", "1", "if", "len", "(", "loss_tensor", ".", "size", "(", ")", ")", "==", "0", "else", "loss_tensor", ".", "size", "(", "0", ")", "\n", "new_loss", "=", "torch", ".", "mean", "(", "loss_tensor", ".", "view", "(", "bs", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "loss", "+=", "new_loss", "\n", "", "return", "loss", "/", "len", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "loss", "(", "input", ",", "target_is_real", ",", "for_discriminator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.BaseDiscriminator.__init__": [[122, 137], ["torch.Module.__init__", "gan_loss.GANLoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "models.define_D", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.networks.discriminators.define_D"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "name", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "name", "==", "\"pix2pixHD\"", ":", "\n", "            ", "self", ".", "netD", "=", "discriminators", ".", "define_D", "(", "opt", ")", "\n", "", "self", ".", "criterionGAN", "=", "GANLoss", "(", "\n", "opt", ".", "gan_mode", ",", "tensor", "=", "torch", ".", "FloatTensor", ",", "opt", "=", "opt", "\n", ")", "\n", "self", ".", "criterionFeat", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "self", ".", "FloatTensor", "=", "(", "\n", "torch", ".", "cuda", ".", "FloatTensor", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "else", "torch", ".", "FloatTensor", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.BaseDiscriminator.discriminate": [[142, 155], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gan_loss.BaseDiscriminator.netD", "gan_loss.BaseDiscriminator.divide_pred"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.BaseDiscriminator.divide_pred"], ["", "def", "discriminate", "(", "self", ",", "fake_image", ",", "real_image", ")", ":", "\n", "\n", "# In Batch Normalization, the fake and real images are", "\n", "# recommended to be in the same batch to avoid disparate", "\n", "# statistics in fake and real images.", "\n", "# So both fake and real images are fed to D all at once.", "\n", "        ", "fake_and_real", "=", "torch", ".", "cat", "(", "[", "fake_image", ",", "real_image", "]", ",", "dim", "=", "0", ")", "\n", "\n", "discriminator_out", "=", "self", ".", "netD", "(", "fake_and_real", ")", "\n", "\n", "pred_fake", ",", "pred_real", "=", "self", ".", "divide_pred", "(", "discriminator_out", ")", "\n", "\n", "return", "pred_fake", ",", "pred_real", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.BaseDiscriminator.divide_pred": [[157, 171], ["type", "fake.append", "real.append", "pred.size", "pred.size", "tensor.size", "tensor.size"], "methods", ["None"], ["", "def", "divide_pred", "(", "self", ",", "pred", ")", ":", "\n", "# the prediction contains the intermediate outputs of multiscale GAN,", "\n", "# so it's usually a list", "\n", "        ", "if", "type", "(", "pred", ")", "==", "list", ":", "\n", "            ", "fake", "=", "[", "]", "\n", "real", "=", "[", "]", "\n", "for", "p", "in", "pred", ":", "\n", "                ", "fake", ".", "append", "(", "[", "tensor", "[", ":", "tensor", ".", "size", "(", "0", ")", "//", "2", "]", "for", "tensor", "in", "p", "]", ")", "\n", "real", ".", "append", "(", "[", "tensor", "[", "tensor", ".", "size", "(", "0", ")", "//", "2", ":", "]", "for", "tensor", "in", "p", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "fake", "=", "pred", "[", ":", "pred", ".", "size", "(", "0", ")", "//", "2", "]", "\n", "real", "=", "pred", "[", "pred", ".", "size", "(", "0", ")", "//", "2", ":", "]", "\n", "\n", "", "return", "fake", ",", "real", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.BaseDiscriminator.compute_discrimator_loss": [[172, 190], ["gan_loss.BaseDiscriminator.discriminate", "gan_loss.BaseDiscriminator.criterionGAN", "gan_loss.BaseDiscriminator.criterionGAN", "sum().mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "fake_image.detach.detach.detach", "fake_image.detach.detach.requires_grad_", "sum", "D_losses.values"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.BaseDiscriminator.discriminate"], ["", "def", "compute_discrimator_loss", "(", "self", ",", "fake_image", ",", "real_image", ")", ":", "\n", "        ", "D_losses", "=", "{", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake_image", "=", "fake_image", ".", "detach", "(", ")", "\n", "fake_image", ".", "requires_grad_", "(", ")", "\n", "\n", "", "pred_fake", ",", "pred_real", "=", "self", ".", "discriminate", "(", "fake_image", ",", "real_image", ")", "\n", "\n", "D_losses", "[", "\"D_Fake\"", "]", "=", "self", ".", "criterionGAN", "(", "\n", "pred_fake", ",", "False", ",", "for_discriminator", "=", "True", "\n", ")", "\n", "D_losses", "[", "\"D_real\"", "]", "=", "self", ".", "criterionGAN", "(", "\n", "pred_real", ",", "True", ",", "for_discriminator", "=", "True", "\n", ")", "\n", "\n", "D_losses", "[", "\"Total Loss\"", "]", "=", "sum", "(", "D_losses", ".", "values", "(", ")", ")", ".", "mean", "(", ")", "\n", "\n", "return", "D_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.BaseDiscriminator.compute_generator_loss": [[191, 219], ["gan_loss.BaseDiscriminator.discriminate", "gan_loss.BaseDiscriminator.criterionGAN", "sum().mean", "len", "gan_loss.BaseDiscriminator.FloatTensor().fill_", "range", "range", "sum", "gan_loss.BaseDiscriminator.FloatTensor", "len", "gan_loss.BaseDiscriminator.criterionFeat", "G_losses.values", "[].detach"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.BaseDiscriminator.discriminate"], ["", "def", "compute_generator_loss", "(", "self", ",", "fake_image", ",", "real_image", ")", ":", "\n", "        ", "G_losses", "=", "{", "}", "\n", "pred_fake", ",", "pred_real", "=", "self", ".", "discriminate", "(", "fake_image", ",", "real_image", ")", "\n", "\n", "G_losses", "[", "\"GAN\"", "]", "=", "self", ".", "criterionGAN", "(", "\n", "pred_fake", ",", "True", ",", "for_discriminator", "=", "False", "\n", ")", "\n", "\n", "if", "not", "self", ".", "opt", ".", "no_ganFeat_loss", ":", "\n", "            ", "num_D", "=", "len", "(", "pred_fake", ")", "\n", "GAN_Feat_loss", "=", "self", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "# for each discriminator", "\n", "# last output is the final prediction, so we exclude it", "\n", "                ", "num_intermediate_outputs", "=", "len", "(", "pred_fake", "[", "i", "]", ")", "-", "1", "\n", "for", "j", "in", "range", "(", "\n", "num_intermediate_outputs", "\n", ")", ":", "# for each layer output", "\n", "                    ", "unweighted_loss", "=", "self", ".", "criterionFeat", "(", "\n", "pred_fake", "[", "i", "]", "[", "j", "]", ",", "pred_real", "[", "i", "]", "[", "j", "]", ".", "detach", "(", ")", "\n", ")", "\n", "GAN_Feat_loss", "+=", "(", "\n", "unweighted_loss", "*", "self", ".", "opt", ".", "lambda_feat", "/", "num_D", "\n", ")", "\n", "", "", "G_losses", "[", "\"GAN_Feat\"", "]", "=", "GAN_Feat_loss", "\n", "\n", "", "G_losses", "[", "\"Total Loss\"", "]", "=", "sum", "(", "G_losses", ".", "values", "(", ")", ")", ".", "mean", "(", ")", "\n", "\n", "return", "G_losses", ",", "fake_image", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.BaseDiscriminator.forward": [[220, 230], ["gan_loss.BaseDiscriminator.compute_generator_loss", "gan_loss.BaseDiscriminator.compute_discrimator_loss"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.BaseDiscriminator.compute_generator_loss", "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.BaseDiscriminator.compute_discrimator_loss"], ["", "def", "forward", "(", "self", ",", "fake_image", ",", "real_image", ",", "mode", "=", "\"generator\"", ")", ":", "\n", "        ", "if", "mode", "==", "\"generator\"", ":", "\n", "            ", "g_loss", ",", "generated", "=", "self", ".", "compute_generator_loss", "(", "\n", "fake_image", ",", "real_image", "\n", ")", "\n", "return", "g_loss", "\n", "\n", "", "elif", "mode", "==", "\"discriminator\"", ":", "\n", "            ", "d_loss", "=", "self", ".", "compute_discrimator_loss", "(", "fake_image", ",", "real_image", ")", "\n", "return", "d_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.BaseDiscriminator.update_learning_rate": [[231, 235], ["gan_loss.BaseDiscriminator.netD.update_learning_rate"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.DiscriminatorLoss.update_learning_rate"], ["", "", "def", "update_learning_rate", "(", "self", ",", "curr_epoch", ")", ":", "\n", "        ", "restart", ",", "new_lrs", "=", "self", ".", "netD", ".", "update_learning_rate", "(", "curr_epoch", ")", "\n", "\n", "return", "restart", ",", "new_lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.DiscriminatorLoss.__init__": [[238, 246], ["torch.Module.__init__", "gan_loss.DiscriminatorLoss.get_loss_from_name"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.synthesis.SynthesisLoss.get_loss_from_name"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "# Get the losses", "\n", "loss_name", "=", "opt", ".", "discriminator_losses", "\n", "\n", "self", ".", "netD", "=", "self", ".", "get_loss_from_name", "(", "loss_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.DiscriminatorLoss.get_optimizer": [[247, 252], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "list", "gan_loss.DiscriminatorLoss.netD.parameters"], "methods", ["None"], ["", "def", "get_optimizer", "(", "self", ")", ":", "\n", "        ", "optimizerD", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "list", "(", "self", ".", "netD", ".", "parameters", "(", ")", ")", ",", "lr", "=", "self", ".", "opt", ".", "lr", "*", "2", ",", "betas", "=", "(", "0", ",", "0.9", ")", "\n", ")", "\n", "return", "optimizerD", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.DiscriminatorLoss.get_loss_from_name": [[253, 260], ["gan_loss.BaseDiscriminator", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "BaseDiscriminator.cuda"], "methods", ["None"], ["", "def", "get_loss_from_name", "(", "self", ",", "name", ")", ":", "\n", "        ", "netD", "=", "BaseDiscriminator", "(", "self", ".", "opt", ",", "name", "=", "name", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "return", "netD", ".", "cuda", "(", ")", "\n", "\n", "", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.DiscriminatorLoss.forward": [[261, 280], ["enumerate", "loss", "dict", "l.keys", "dict.keys"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.GANLoss.loss"], ["", "def", "forward", "(", "self", ",", "pred_img", ",", "gt_img", ")", ":", "\n", "        ", "losses", "=", "[", "\n", "loss", "(", "pred_img", ",", "gt_img", ",", "mode", "=", "\"discriminator\"", ")", "for", "loss", "in", "self", ".", "losses", "\n", "]", "\n", "\n", "loss_dir", "=", "{", "}", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "losses", ")", ":", "\n", "            ", "if", "\"Total Loss\"", "in", "l", ".", "keys", "(", ")", ":", "\n", "                ", "if", "\"Total Loss\"", "in", "loss_dir", ".", "keys", "(", ")", ":", "\n", "                    ", "loss_dir", "[", "\"Total Loss\"", "]", "=", "(", "\n", "loss_dir", "[", "\"Total Loss\"", "]", "\n", "+", "l", "[", "\"Total Loss\"", "]", "*", "self", ".", "lambdas", "[", "i", "]", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "loss_dir", "[", "\"Total Loss\"", "]", "=", "l", "[", "\"Total Loss\"", "]", "\n", "\n", "", "", "loss_dir", "=", "dict", "(", "l", ",", "**", "loss_dir", ")", "# Have loss_dir override l", "\n", "\n", "", "return", "loss_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.DiscriminatorLoss.run_generator_one_step": [[281, 283], ["gan_loss.DiscriminatorLoss.netD"], "methods", ["None"], ["", "def", "run_generator_one_step", "(", "self", ",", "pred_img", ",", "gt_img", ")", ":", "\n", "        ", "return", "self", ".", "netD", "(", "pred_img", ",", "gt_img", ",", "mode", "=", "\"generator\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.DiscriminatorLoss.run_discriminator_one_step": [[284, 286], ["gan_loss.DiscriminatorLoss.netD"], "methods", ["None"], ["", "def", "run_discriminator_one_step", "(", "self", ",", "pred_img", ",", "gt_img", ")", ":", "\n", "        ", "return", "self", ".", "netD", "(", "pred_img", ",", "gt_img", ",", "mode", "=", "\"discriminator\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.DiscriminatorLoss.update_learning_rate": [[287, 291], ["gan_loss.DiscriminatorLoss.netD.update_learning_rate"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.DiscriminatorLoss.update_learning_rate"], ["", "def", "update_learning_rate", "(", "self", ",", "curr_epoch", ")", ":", "\n", "        ", "restart", ",", "new_lrs", "=", "self", ".", "netD", ".", "update_learning_rate", "(", "curr_epoch", ")", "\n", "\n", "return", "restart", ",", "new_lrs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.synthesis.SynthesisLoss.__init__": [[11, 26], ["torch.Module.__init__", "print", "print", "zip", "torch.ModuleList", "torch.ModuleList", "zip", "float", "synthesis.SynthesisLoss.get_loss_from_name", "l.split", "l.split"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.synthesis.SynthesisLoss.get_loss_from_name"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "# Get the losses", "\n", "print", "(", "opt", ".", "losses", ")", "\n", "print", "(", "zip", "(", "*", "[", "l", ".", "split", "(", "\"_\"", ")", "for", "l", "in", "opt", ".", "losses", "]", ")", ")", "\n", "lambdas", ",", "loss_names", "=", "zip", "(", "*", "[", "l", ".", "split", "(", "\"_\"", ")", "for", "l", "in", "opt", ".", "losses", "]", ")", "\n", "lambdas", "=", "[", "float", "(", "l", ")", "for", "l", "in", "lambdas", "]", "\n", "\n", "loss_names", "+=", "(", "\"PSNR\"", ",", "\"SSIM\"", ")", "\n", "\n", "self", ".", "lambdas", "=", "lambdas", "\n", "self", ".", "losses", "=", "nn", ".", "ModuleList", "(", "\n", "[", "self", ".", "get_loss_from_name", "(", "loss_name", ")", "for", "loss_name", "in", "loss_names", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.synthesis.SynthesisLoss.get_loss_from_name": [[28, 40], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "synthesis.L1LossWrapper", "SSIM.cuda", "synthesis.PerceptualLoss", "synthesis.PSNR", "synthesis.SSIM"], "methods", ["None"], ["", "def", "get_loss_from_name", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "==", "\"l1\"", ":", "\n", "            ", "loss", "=", "L1LossWrapper", "(", ")", "\n", "", "elif", "name", "==", "\"content\"", ":", "\n", "            ", "loss", "=", "PerceptualLoss", "(", "self", ".", "opt", ")", "\n", "", "elif", "name", "==", "\"PSNR\"", ":", "\n", "            ", "loss", "=", "PSNR", "(", ")", "\n", "", "elif", "name", "==", "\"SSIM\"", ":", "\n", "            ", "loss", "=", "SSIM", "(", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "return", "loss", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.synthesis.SynthesisLoss.forward": [[41, 58], ["enumerate", "loss", "dict", "l.keys", "dict.keys"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.gan_loss.GANLoss.loss"], ["", "", "def", "forward", "(", "self", ",", "pred_img", ",", "gt_img", ")", ":", "\n", "        ", "losses", "=", "[", "loss", "(", "pred_img", ",", "gt_img", ")", "for", "loss", "in", "self", ".", "losses", "]", "\n", "\n", "loss_dir", "=", "{", "}", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "losses", ")", ":", "\n", "            ", "if", "\"Total Loss\"", "in", "l", ".", "keys", "(", ")", ":", "\n", "                ", "if", "\"Total Loss\"", "in", "loss_dir", ".", "keys", "(", ")", ":", "\n", "                    ", "loss_dir", "[", "\"Total Loss\"", "]", "=", "(", "\n", "loss_dir", "[", "\"Total Loss\"", "]", "\n", "+", "l", "[", "\"Total Loss\"", "]", "*", "self", ".", "lambdas", "[", "i", "]", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "loss_dir", "[", "\"Total Loss\"", "]", "=", "l", "[", "\"Total Loss\"", "]", "\n", "\n", "", "", "loss_dir", "=", "dict", "(", "l", ",", "**", "loss_dir", ")", "# Have loss_dir override l", "\n", "\n", "", "return", "loss_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.synthesis.PSNR.forward": [[61, 67], ["pred_img.size", "psnr.mean"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "pred_img", ",", "gt_img", ")", ":", "\n", "        ", "bs", "=", "pred_img", ".", "size", "(", "0", ")", "\n", "mse_err", "=", "(", "pred_img", "-", "gt_img", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "view", "(", "bs", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "psnr", "=", "10", "*", "(", "1", "/", "mse_err", ")", ".", "log10", "(", ")", "\n", "return", "{", "\"psnr\"", ":", "psnr", ".", "mean", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.synthesis.SSIM.forward": [[70, 72], ["models.losses.ssim.ssim"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.ssim.ssim"], ["    ", "def", "forward", "(", "self", ",", "pred_img", ",", "gt_img", ")", ":", "\n", "        ", "return", "{", "\"ssim\"", ":", "ssim", "(", "pred_img", ",", "gt_img", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.synthesis.L1LossWrapper.forward": [[76, 79], ["torch.L1Loss", "torch.L1Loss"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "pred_img", ",", "gt_img", ")", ":", "\n", "        ", "err", "=", "nn", ".", "L1Loss", "(", ")", "(", "pred_img", ",", "gt_img", ")", "\n", "return", "{", "\"L1\"", ":", "err", ",", "\"Total Loss\"", ":", "err", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.synthesis.PerceptualLoss.__init__": [[86, 93], ["torch.Module.__init__", "models.networks.architectures.VGG19", "torch.L1Loss", "torch.L1Loss"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "VGG19", "(", "\n", "requires_grad", "=", "False", "\n", ")", "# Set to false so that this part of the network is frozen", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.synthesis.PerceptualLoss.forward": [[94, 105], ["synthesis.PerceptualLoss.model", "synthesis.PerceptualLoss.model", "range", "len", "synthesis.PerceptualLoss.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred_img", ",", "gt_img", ")", ":", "\n", "        ", "gt_fs", "=", "self", ".", "model", "(", "gt_img", ")", "\n", "pred_fs", "=", "self", ".", "model", "(", "pred_img", ")", "\n", "\n", "# Collect the losses at multiple layers (need unsqueeze in", "\n", "# order to concatenate these together)", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "gt_fs", ")", ")", ":", "\n", "            ", "loss", "+=", "self", ".", "weights", "[", "i", "]", "*", "self", ".", "criterion", "(", "pred_fs", "[", "i", "]", ",", "gt_fs", "[", "i", "]", ")", "\n", "\n", "", "return", "{", "\"Perceptual\"", ":", "loss", ",", "\"Total Loss\"", ":", "loss", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.ssim.SSIM.__init__": [[80, 86], ["super().__init__", "ssim.create_window"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.ssim.create_window"], ["    ", "def", "__init__", "(", "self", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "channel", "=", "1", "\n", "self", ".", "window", "=", "create_window", "(", "window_size", ",", "self", ".", "channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.ssim.SSIM.forward": [[87, 113], ["img1.size", "ssim._ssim", "ssim.create_window", "window.cuda.cuda.type_as", "ssim.SSIM.window.data.type", "img1.data.type", "window.cuda.cuda.cuda", "img1.get_device"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.ssim._ssim", "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.ssim.create_window"], ["", "def", "forward", "(", "self", ",", "img1", ",", "img2", ",", "mask", "=", "None", ")", ":", "\n", "        ", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "\n", "if", "(", "\n", "channel", "==", "self", ".", "channel", "\n", "and", "self", ".", "window", ".", "data", ".", "type", "(", ")", "==", "img1", ".", "data", ".", "type", "(", ")", "\n", ")", ":", "\n", "            ", "window", "=", "self", ".", "window", "\n", "", "else", ":", "\n", "            ", "window", "=", "create_window", "(", "self", ".", "window_size", ",", "channel", ")", "\n", "\n", "if", "img1", ".", "is_cuda", ":", "\n", "                ", "window", "=", "window", ".", "cuda", "(", "img1", ".", "get_device", "(", ")", ")", "\n", "", "window", "=", "window", ".", "type_as", "(", "img1", ")", "\n", "\n", "self", ".", "window", "=", "window", "\n", "self", ".", "channel", "=", "channel", "\n", "\n", "", "return", "_ssim", "(", "\n", "img1", ",", "\n", "img2", ",", "\n", "window", ",", "\n", "self", ".", "window_size", ",", "\n", "channel", ",", "\n", "mask", ",", "\n", "self", ".", "size_average", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.ssim.gaussian": [[12, 20], ["torch.Tensor", "torch.Tensor", "torch.Tensor.sum", "math.exp", "range", "float"], "function", ["None"], ["def", "gaussian", "(", "window_size", ",", "sigma", ")", ":", "\n", "    ", "gauss", "=", "torch", ".", "Tensor", "(", "\n", "[", "\n", "exp", "(", "-", "(", "(", "x", "-", "window_size", "//", "2", ")", "**", "2", ")", "/", "float", "(", "2", "*", "sigma", "**", "2", ")", ")", "\n", "for", "x", "in", "range", "(", "window_size", ")", "\n", "]", "\n", ")", "\n", "return", "gauss", "/", "gauss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.ssim.create_window": [[22, 29], ["gaussian().unsqueeze", "gaussian().unsqueeze.mm().float().unsqueeze().unsqueeze", "torch.autograd.Variable", "_1D_window.mm().float().unsqueeze().unsqueeze.expand().contiguous", "ssim.gaussian", "gaussian().unsqueeze.mm().float().unsqueeze", "_1D_window.mm().float().unsqueeze().unsqueeze.expand", "gaussian().unsqueeze.mm().float", "gaussian().unsqueeze.mm", "gaussian().unsqueeze.t"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.ssim.gaussian"], ["", "def", "create_window", "(", "window_size", ",", "channel", ")", ":", "\n", "    ", "_1D_window", "=", "gaussian", "(", "window_size", ",", "1.5", ")", ".", "unsqueeze", "(", "1", ")", "\n", "_2D_window", "=", "_1D_window", ".", "mm", "(", "_1D_window", ".", "t", "(", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "window", "=", "Variable", "(", "\n", "_2D_window", ".", "expand", "(", "channel", ",", "1", ",", "window_size", ",", "window_size", ")", ".", "contiguous", "(", ")", "\n", ")", "\n", "return", "window", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.ssim._ssim": [[31, 77], ["torch.conv2d", "torch.conv2d", "F.conv2d.pow", "F.conv2d.pow", "torch.conv2d", "torch.conv2d", "torch.conv2d", "mask.size", "ssim_map.mean", "ssim_map.mean().mean().mean", "ssim_map.mean", "ssim_map.view().sum", "mask.view().sum().clamp", "ssim_map.mean().mean", "ssim_map.view", "mask.view().sum", "ssim_map.mean", "mask.view"], "function", ["None"], ["", "def", "_ssim", "(", "\n", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "mask", "=", "None", ",", "size_average", "=", "True", "\n", ")", ":", "\n", "    ", "mu1", "=", "F", ".", "conv2d", "(", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "mu2", "=", "F", ".", "conv2d", "(", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "\n", "mu1_sq", "=", "mu1", ".", "pow", "(", "2", ")", "\n", "mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "\n", "sigma1_sq", "=", "(", "\n", "F", ".", "conv2d", "(", "img1", "*", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "-", "mu1_sq", "\n", ")", "\n", "sigma2_sq", "=", "(", "\n", "F", ".", "conv2d", "(", "img2", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "-", "mu2_sq", "\n", ")", "\n", "sigma12", "=", "(", "\n", "F", ".", "conv2d", "(", "img1", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "-", "mu1_mu2", "\n", ")", "\n", "\n", "C1", "=", "(", "0.01", ")", "**", "2", "\n", "C2", "=", "(", "0.03", ")", "**", "2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "\n", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", "\n", ")", "\n", "\n", "if", "not", "(", "mask", "is", "None", ")", ":", "\n", "        ", "b", "=", "mask", ".", "size", "(", "0", ")", "\n", "ssim_map", "=", "ssim_map", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "*", "mask", "\n", "ssim_map", "=", "ssim_map", ".", "view", "(", "b", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "/", "mask", ".", "view", "(", "b", ",", "-", "1", ")", ".", "sum", "(", "\n", "dim", "=", "1", "\n", ")", ".", "clamp", "(", "min", "=", "1", ")", "\n", "return", "ssim_map", "\n", "\n", "#import pdb", "\n", "\n", "#pdb.set_trace", "\n", "\n", "", "if", "size_average", ":", "\n", "        ", "return", "ssim_map", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "ssim_map", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.ssim.ssim": [[116, 125], ["img1.size", "ssim.create_window", "window.cuda.type_as", "ssim._ssim", "window.cuda.cuda", "img1.get_device"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.ssim.create_window", "home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.ssim._ssim"], ["", "", "def", "ssim", "(", "img1", ",", "img2", ",", "window_size", "=", "11", ",", "mask", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "window", "=", "create_window", "(", "window_size", ",", "channel", ")", "\n", "\n", "if", "img1", ".", "is_cuda", ":", "\n", "        ", "window", "=", "window", ".", "cuda", "(", "img1", ".", "get_device", "(", ")", ")", "\n", "", "window", "=", "window", ".", "type_as", "(", "img1", ")", "\n", "\n", "return", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "mask", ",", "size_average", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.custom.CustomTest.__init__": [[17, 55], ["numpy.load", "torchvision.transforms.Compose", "open", "pickle.load", "os.path.join", "sorted", "sorted", "os.path.join", "os.walk", "sorted_paths.append", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "fname.endswith", "os.path.join", "int", "os.path.join.split"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "dataset", ",", "opts", "=", "None", "\n", ")", ":", "\n", "# get pkl file & image locations", "\n", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "opts", ".", "dataset_folder", ",", "'cameras.pkl'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "cameras", "=", "pkl", ".", "load", "(", "f", ")", "\n", "\n", "# used for consistency eval only", "\n", "", "self", ".", "consistency_directions", "=", "np", ".", "load", "(", "'data/consistency_directions.npy'", ")", "\n", "\n", "self", ".", "images", "=", "{", "}", "\n", "for", "set", "in", "[", "'input'", ",", "'output'", "]", ":", "\n", "            ", "dir", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "dataset_folder", ",", "set", ")", "\n", "unsorted_paths", "=", "{", "}", "\n", "for", "root", ",", "dnames", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "                ", "for", "fname", "in", "fnames", ":", "\n", "                    ", "if", "fname", ".", "endswith", "(", "'.png'", ")", ":", "\n", "                        ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "unsorted_paths", "[", "int", "(", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", ")", "]", "=", "path", "\n", "#if set not in self.images:", "\n", "#    self.images[set] = [path]", "\n", "#else:", "\n", "#    self.images[set].append(path)", "\n", "", "", "", "sorted_paths", "=", "[", "]", "\n", "for", "path", "in", "sorted", "(", "unsorted_paths", ")", ":", "\n", "                ", "sorted_paths", ".", "append", "(", "unsorted_paths", "[", "path", "]", ")", "\n", "", "self", ".", "images", "[", "set", "]", "=", "sorted_paths", "\n", "\n", "", "self", ".", "input_transform", "=", "Compose", "(", "\n", "[", "\n", "Resize", "(", "(", "opts", ".", "W", ",", "opts", ".", "W", ")", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "opts", "=", "opts", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.custom.CustomTest.__len__": [[56, 58], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", "[", "'input'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.custom.CustomTest.__getitem__": [[59, 72], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "PIL.Image.open", "PIL.Image.open", "custom.CustomTest.input_transform", "custom.CustomTest.input_transform", "[].keys", "newcameras.append"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "image_number", ")", ":", "\n", "        ", "image", "=", "[", "Image", ".", "open", "(", "self", ".", "images", "[", "'input'", "]", "[", "image_number", "]", ")", ",", "Image", ".", "open", "(", "self", ".", "images", "[", "'output'", "]", "[", "image_number", "]", ")", "]", "\n", "img", "=", "[", "self", ".", "input_transform", "(", "image", "[", "0", "]", ")", ",", "self", ".", "input_transform", "(", "image", "[", "1", "]", ")", "]", "\n", "direction", "=", "torch", ".", "tensor", "(", "self", ".", "consistency_directions", "[", "image_number", "]", ")", "\n", "newcameras", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "camera", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "cameras", "[", "image_number", "]", "[", "i", "]", ".", "keys", "(", ")", ":", "\n", "                ", "if", "key", "not", "in", "[", "'translation'", ",", "'angle'", ",", "'is_big_change'", ",", "'frame_diff'", ",", "'vid_names'", "]", ":", "\n", "                    ", "camera", "[", "key", "]", "=", "self", ".", "cameras", "[", "image_number", "]", "[", "i", "]", "[", "key", "]", "[", "0", "]", "\n", "", "", "newcameras", ".", "append", "(", "camera", ")", "\n", "\n", "", "return", "{", "\"images\"", ":", "img", ",", "\"cameras\"", ":", "newcameras", ",", "'direction'", ":", "direction", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.custom.Custom.__init__": [[78, 100], ["os.path.join", "sorted", "torchvision.transforms.Compose", "open", "pickle.load", "os.walk", "os.path.join", "fname.endswith", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "os.path.join", "custom.Custom.images.append"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "dataset", ",", "opts", "=", "None", "\n", ")", ":", "\n", "# get pkl file & image locations", "\n", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "opts", ".", "dataset_folder", ",", "'cameras.pkl'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "cameras", "=", "pkl", ".", "load", "(", "f", ")", "\n", "\n", "", "dir", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "dataset_folder", ",", "'rgb'", ")", "\n", "self", ".", "images", "=", "[", "]", "\n", "for", "root", ",", "dnames", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "            ", "for", "fname", "in", "fnames", ":", "\n", "                ", "if", "fname", ".", "endswith", "(", "'.png'", ")", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "self", ".", "images", ".", "append", "(", "path", ")", "\n", "\n", "\n", "", "", "", "self", ".", "input_transform", "=", "Compose", "(", "\n", "[", "\n", "Resize", "(", "(", "opts", ".", "W", ",", "opts", ".", "W", ")", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.custom.Custom.__len__": [[105, 107], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.custom.Custom.__getitem__": [[108, 121], ["PIL.Image.open", "range", "custom.Custom.input_transform", "[].keys", "newcameras.append"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "image_number", ")", ":", "\n", "\n", "        ", "image", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "image_number", "]", ")", "\n", "img", "=", "[", "self", ".", "input_transform", "(", "image", ")", "]", "\n", "newcameras", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "camera", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "cameras", "[", "image_number", "]", "[", "i", "]", ".", "keys", "(", ")", ":", "\n", "                ", "if", "key", "not", "in", "[", "'translation'", ",", "'angle'", ",", "'is_big_change'", ",", "'frame_diff'", ",", "'vid_names'", "]", ":", "\n", "                    ", "camera", "[", "key", "]", "=", "self", ".", "cameras", "[", "image_number", "]", "[", "i", "]", "[", "key", "]", "[", "0", "]", "\n", "", "", "newcameras", ".", "append", "(", "camera", ")", "\n", "\n", "", "return", "{", "\"images\"", ":", "img", ",", "\"cameras\"", ":", "newcameras", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.realestate10k.RealEstate10K.__init__": [[18, 87], ["numpy.loadtxt", "numpy.random.RandomState", "torchvision.transforms.Compose", "numpy.array", "numpy.array", "numpy.linalg.inv", "print", "print", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "int", "numpy.loadtxt", "int"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "dataset", ",", "opts", "=", "None", ",", "num_views", "=", "2", ",", "seed", "=", "0", ",", "vectorize", "=", "False", "\n", ")", ":", "\n", "# Now go through the dataset", "\n", "\n", "        ", "self", ".", "imageset", "=", "np", ".", "loadtxt", "(", "\n", "opts", ".", "train_data_path", "+", "\"/frames/%s/video_loc.txt\"", "%", "\"train\"", ",", "\n", "dtype", "=", "np", ".", "str", ",", "\n", ")", "\n", "self", ".", "base_file", "=", "opts", ".", "train_data_path", "\n", "\n", "self", ".", "dataset", "=", "\"train\"", "\n", "self", ".", "isTrain", "=", "True", "\n", "\n", "if", "dataset", "==", "\"train\"", ":", "\n", "            ", "self", ".", "imageset", "=", "self", ".", "imageset", "[", "0", ":", "int", "(", "0.8", "*", "self", ".", "imageset", ".", "shape", "[", "0", "]", ")", "]", "\n", "", "elif", "dataset", "==", "\"val\"", ":", "\n", "            ", "self", ".", "isTrain", "=", "False", "\n", "self", ".", "imageset", "=", "self", ".", "imageset", "[", "int", "(", "0.8", "*", "self", ".", "imageset", ".", "shape", "[", "0", "]", ")", ":", "]", "\n", "", "elif", "dataset", "==", "\"test\"", ":", "\n", "            ", "self", ".", "isTrain", "=", "False", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "imageset", "=", "np", ".", "loadtxt", "(", "\n", "opts", ".", "test_data_path", "+", "\"/frames/%s/video_loc.txt\"", "%", "\"test\"", ",", "\n", "dtype", "=", "np", ".", "str", ",", "\n", ")", "\n", "self", ".", "base_file", "=", "opts", ".", "test_data_path", "\n", "\n", "", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n", "\n", "self", ".", "num_views", "=", "num_views", "\n", "\n", "self", ".", "input_transform", "=", "Compose", "(", "\n", "[", "\n", "Resize", "(", "(", "opts", ".", "W", ",", "opts", ".", "W", ")", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "offset", "=", "np", ".", "array", "(", "\n", "[", "[", "2", ",", "0", ",", "-", "1", "]", ",", "[", "0", ",", "-", "2", ",", "1", "]", ",", "[", "0", ",", "0", ",", "-", "1", "]", "]", ",", "# Flip ys to match habitat", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "# Make z negative to match habitat (which assumes a negative z)", "\n", "\n", "self", ".", "K", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "1.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0", ",", "1.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "1.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "\n", "self", ".", "invK", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "K", ")", "\n", "\n", "#self.ANGLE_THRESH = 5", "\n", "#self.TRANS_THRESH = 0.15", "\n", "\n", "# TODO: how do we track angle increases during training?", "\n", "self", ".", "opts", "=", "opts", "\n", "#self.ANGLE_THRESH = opts.max_rotation", "\n", "#self.TRANS_THRESH = 99999", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "print", "(", "'train angle threshold'", ",", "self", ".", "opts", ".", "max_rotation", "//", "2", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'val angle threshold'", ",", "self", ".", "opts", ".", "val_rotation", "//", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.realestate10k.RealEstate10K.__len__": [[88, 90], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "2", "**", "31", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.realestate10k.RealEstate10K.__getitem_simple__": [[91, 153], ["realestate10k.RealEstate10K.rng.randint", "numpy.loadtxt", "range", "realestate10k.RealEstate10K.rng.choice", "max", "PIL.Image.open", "numpy.array", "numpy.matmul", "extrinsics.reshape", "numpy.matmul", "numpy.vstack().astype", "numpy.linalg.inv", "min", "realestate10k.RealEstate10K.input_transform", "numpy.vstack", "str", "realestate10k.RealEstate10K.rng.randint", "int", "numpy.zeros"], "methods", ["None"], ["", "def", "__getitem_simple__", "(", "self", ",", "index", ")", ":", "\n", "        ", "index", "=", "self", ".", "rng", ".", "randint", "(", "self", ".", "imageset", ".", "shape", "[", "0", "]", ")", "\n", "# index = index % self.imageset.shape[0]", "\n", "# Load text file containing frame information", "\n", "frames", "=", "np", ".", "loadtxt", "(", "\n", "self", ".", "base_file", "\n", "+", "\"/frames/%s/%s.txt\"", "%", "(", "self", ".", "dataset", ",", "self", ".", "imageset", "[", "index", "]", ")", "\n", ")", "\n", "\n", "image_index", "=", "self", ".", "rng", ".", "choice", "(", "frames", ".", "shape", "[", "0", "]", ",", "size", "=", "(", "1", ",", ")", ")", "[", "0", "]", "\n", "\n", "rgbs", "=", "[", "]", "\n", "cameras", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_views", ")", ":", "\n", "            ", "t_index", "=", "max", "(", "\n", "min", "(", "\n", "image_index", "+", "self", ".", "rng", ".", "randint", "(", "16", ")", "-", "8", ",", "frames", ".", "shape", "[", "0", "]", "-", "1", "\n", ")", ",", "\n", "0", ",", "\n", ")", "\n", "\n", "image", "=", "Image", ".", "open", "(", "\n", "self", ".", "base_file", "\n", "+", "\"/frames/%s/%s/\"", "%", "(", "self", ".", "dataset", ",", "self", ".", "imageset", "[", "index", "]", ")", "\n", "+", "str", "(", "int", "(", "frames", "[", "t_index", ",", "0", "]", ")", ")", "\n", "+", "\".png\"", "\n", ")", "\n", "rgbs", "+=", "[", "self", ".", "input_transform", "(", "image", ")", "]", "\n", "\n", "intrinsics", "=", "frames", "[", "t_index", ",", "1", ":", "7", "]", "\n", "extrinsics", "=", "frames", "[", "t_index", ",", "7", ":", "]", "\n", "\n", "origK", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "intrinsics", "[", "0", "]", ",", "0", ",", "intrinsics", "[", "2", "]", "]", ",", "\n", "[", "0", ",", "intrinsics", "[", "1", "]", ",", "intrinsics", "[", "3", "]", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "K", "=", "np", ".", "matmul", "(", "self", ".", "offset", ",", "origK", ")", "\n", "\n", "origP", "=", "extrinsics", ".", "reshape", "(", "3", ",", "4", ")", "\n", "P", "=", "np", ".", "matmul", "(", "K", ",", "origP", ")", "# Merge these together to match habitat", "\n", "P", "=", "np", ".", "vstack", "(", "(", "P", ",", "np", ".", "zeros", "(", "(", "1", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", ".", "astype", "(", "\n", "np", ".", "float32", "\n", ")", "\n", "P", "[", "3", ",", "3", "]", "=", "1", "\n", "\n", "Pinv", "=", "np", ".", "linalg", ".", "inv", "(", "P", ")", "\n", "\n", "cameras", "+=", "[", "\n", "{", "\n", "\"P\"", ":", "P", ",", "\n", "\"OrigP\"", ":", "origP", ",", "\n", "\"Pinv\"", ":", "Pinv", ",", "\n", "\"K\"", ":", "self", ".", "K", ",", "\n", "\"Kinv\"", ":", "self", ".", "invK", ",", "\n", "}", "\n", "]", "\n", "\n", "", "return", "{", "\"images\"", ":", "rgbs", ",", "\"cameras\"", ":", "cameras", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.realestate10k.RealEstate10K.__getitem__": [[154, 297], ["range", "realestate10k.RealEstate10K.rng.randint", "realestate10k.RealEstate10K.rng.randint", "range", "numpy.array", "numpy.array", "PIL.Image.open", "numpy.array", "numpy.matmul", "extrinsics.reshape", "numpy.matmul", "numpy.vstack().astype", "numpy.linalg.inv", "numpy.loadtxt", "realestate10k.RealEstate10K.rng.choice", "frames[].reshape", "frames[].reshape", "utils.geometry.get_deltas", "len", "realestate10k.RealEstate10K.input_transform", "realestate10k.RealEstate10K.rng.randint", "numpy.logical_and", "realestate10k.RealEstate10K.rng.randint", "abs", "realestate10k.RealEstate10K.rng.randint", "abs", "numpy.vstack", "str", "numpy.logical_and", "str", "int", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.geometry.get_deltas"], ["", "def", "__getitem__", "(", "self", ",", "image_number", ")", ":", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "            ", "angle_threshold", "=", "self", ".", "opts", ".", "max_rotation", "//", "2", "\n", "", "else", ":", "\n", "            ", "angle_threshold", "=", "self", ".", "opts", ".", "val_rotation", "//", "2", "\n", "\n", "", "satisfied_large_angle", "=", "False", "\n", "while", "not", "satisfied_large_angle", ":", "\n", "            ", "index", "=", "self", ".", "rng", ".", "randint", "(", "self", ".", "imageset", ".", "shape", "[", "0", "]", ")", "\n", "# index = index % self.imageset.shape[0]", "\n", "# Load text file containing frame information", "\n", "\n", "# My data has header row (youtube file name), which we skip", "\n", "# must also check have at least 2 frames; i.e. be 2 dimensional", "\n", "satisfied_2framereq", "=", "False", "\n", "while", "not", "satisfied_2framereq", ":", "\n", "                ", "frames", "=", "np", ".", "loadtxt", "(", "\n", "self", ".", "base_file", "\n", "+", "\"/frames/%s/%s.txt\"", "%", "(", "self", ".", "dataset", ",", "self", ".", "imageset", "[", "index", "]", ")", ",", "skiprows", "=", "1", "\n", ")", "\n", "if", "True", ":", "#len(frames.shape) > 1:", "\n", "                    ", "satisfied_2framereq", "=", "True", "\n", "", "else", ":", "\n", "                    ", "index", "=", "self", ".", "rng", ".", "randint", "(", "self", ".", "imageset", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "", "image_index", "=", "self", ".", "rng", ".", "choice", "(", "frames", ".", "shape", "[", "0", "]", ",", "size", "=", "(", "1", ",", ")", ")", "[", "0", "]", "\n", "\n", "\n", "# Chose 15 images within 30 frames of the iniital one", "\n", "#image_indices = self.rng.randint(180, size=(45,)) - 90 + image_index", "\n", "#image_indices = self.rng.randint(80, size=(30,)) - 40 + image_index", "\n", "#image_indices = self.rng.randint(60, size=(15,)) - 30 + image_index", "\n", "#image_indices = np.minimum(", "\n", "#    np.maximum(image_indices, 0), frames.shape[0] - 1", "\n", "#)", "\n", "\n", "# instead, we use second image index from the entire video", "\n", "# we'll have to check in the future how long the videos are", "\n", "image_indices", "=", "self", ".", "rng", ".", "randint", "(", "frames", ".", "shape", "[", "0", "]", "-", "1", ",", "size", "=", "(", "frames", ".", "shape", "[", "0", "]", "//", "2", ",", ")", ")", "\n", "\n", "# Look at the change in angle and choose a hard one", "\n", "angles", "=", "[", "]", "\n", "translations", "=", "[", "]", "\n", "for", "viewpoint", "in", "range", "(", "0", ",", "image_indices", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "orig_viewpoint", "=", "frames", "[", "image_index", ",", "7", ":", "]", ".", "reshape", "(", "3", ",", "4", ")", "\n", "new_viewpoint", "=", "frames", "[", "image_indices", "[", "viewpoint", "]", ",", "7", ":", "]", ".", "reshape", "(", "3", ",", "4", ")", "\n", "dang", ",", "dtrans", "=", "get_deltas", "(", "orig_viewpoint", ",", "new_viewpoint", ")", "\n", "\n", "angles", "+=", "[", "dang", "]", "\n", "translations", "+=", "[", "dtrans", "]", "\n", "\n", "", "angles", "=", "np", ".", "array", "(", "angles", ")", "\n", "translations", "=", "np", ".", "array", "(", "translations", ")", "\n", "\n", "#mask = image_indices[", "\n", "#    (angles > self.ANGLE_THRESH) | (translations > self.TRANS_THRESH)", "\n", "#]", "\n", "mask", "=", "image_indices", "[", "\n", "np", ".", "logical_and", "(", "np", ".", "logical_and", "(", "(", "angles", ">", "angle_threshold", ")", ",", "(", "translations", "<", "1", ")", ")", ",", "(", "angles", "<", "60", ")", ")", "\n", "]", "\n", "\n", "if", "len", "(", "mask", ")", ">", "5", ":", "\n", "                ", "satisfied_large_angle", "=", "True", "\n", "\n", "#import pdb ", "\n", "#pdb.set_trace()", "\n", "\n", "", "", "rgbs", "=", "[", "]", "\n", "cameras", "=", "[", "]", "\n", "final_translation", "=", "[", "]", "\n", "final_angle", "=", "[", "]", "\n", "frame_diff", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_views", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "t_index", "=", "image_index", "\n", "", "elif", "mask", ".", "shape", "[", "0", "]", ">", "5", ":", "\n", "# Choose a harder angle change", "\n", "                ", "numba", "=", "self", ".", "rng", ".", "randint", "(", "mask", ".", "shape", "[", "0", "]", ")", "\n", "t_index", "=", "mask", "[", "numba", "]", "\n", "masked_angles", "=", "angles", "[", "(", "angles", ">", "angle_threshold", ")", "]", "\n", "masked_translations", "=", "translations", "[", "(", "angles", ">", "angle_threshold", ")", "]", "\n", "final_angle", "=", "masked_angles", "[", "numba", "]", "\n", "final_translation", "=", "masked_translations", "[", "numba", "]", "\n", "frame_diff", "=", "abs", "(", "numba", "-", "image_index", ")", "\n", "", "else", ":", "\n", "                ", "numba", "=", "self", ".", "rng", ".", "randint", "(", "image_indices", ".", "shape", "[", "0", "]", ")", "\n", "t_index", "=", "image_indices", "[", "\n", "numba", "\n", "]", "\n", "final_angle", "=", "angles", "[", "numba", "]", "\n", "final_translation", "=", "translations", "[", "numba", "]", "\n", "frame_diff", "=", "abs", "(", "numba", "-", "image_index", ")", "\n", "\n", "#try:", "\n", "", "image", "=", "Image", ".", "open", "(", "\n", "self", ".", "base_file", "\n", "+", "\"/frames/%s/%s/\"", "%", "(", "self", ".", "dataset", ",", "self", ".", "imageset", "[", "index", "]", ")", "\n", "+", "str", "(", "int", "(", "frames", "[", "t_index", ",", "0", "]", ")", ")", "\n", "+", "\".jpg\"", "\n", ")", "\n", "#except:", "\n", "#    #import pdb ", "\n", "#    #pdb.set_trace()", "\n", "rgbs", "+=", "[", "self", ".", "input_transform", "(", "image", ")", "]", "\n", "\n", "intrinsics", "=", "frames", "[", "t_index", ",", "1", ":", "7", "]", "\n", "extrinsics", "=", "frames", "[", "t_index", ",", "7", ":", "]", "\n", "\n", "origK", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "intrinsics", "[", "0", "]", ",", "0", ",", "intrinsics", "[", "2", "]", "]", ",", "\n", "[", "0", ",", "intrinsics", "[", "1", "]", ",", "intrinsics", "[", "3", "]", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "K", "=", "np", ".", "matmul", "(", "self", ".", "offset", ",", "origK", ")", "\n", "\n", "origP", "=", "extrinsics", ".", "reshape", "(", "3", ",", "4", ")", "\n", "P", "=", "np", ".", "matmul", "(", "K", ",", "origP", ")", "# Merge these together to match habitat", "\n", "P", "=", "np", ".", "vstack", "(", "(", "P", ",", "np", ".", "zeros", "(", "(", "1", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", ".", "astype", "(", "\n", "np", ".", "float32", "\n", ")", "\n", "P", "[", "3", ",", "3", "]", "=", "1", "\n", "\n", "Pinv", "=", "np", ".", "linalg", ".", "inv", "(", "P", ")", "\n", "\n", "cameras", "+=", "[", "\n", "{", "\n", "\"P\"", ":", "P", ",", "\n", "\"Pinv\"", ":", "Pinv", ",", "\n", "\"OrigP\"", ":", "origP", ",", "\n", "\"K\"", ":", "self", ".", "K", ",", "\n", "\"Kinv\"", ":", "self", ".", "invK", ",", "\n", "'translation'", ":", "final_translation", ",", "\n", "'angle'", ":", "final_angle", ",", "\n", "'is_big_change'", ":", "mask", ".", "shape", "[", "0", "]", ">", "5", ",", "\n", "'frame_diff'", ":", "frame_diff", ",", "\n", "'vid_names'", ":", "str", "(", "self", ".", "imageset", "[", "index", "]", ")", "\n", "}", "\n", "]", "\n", "\n", "", "return", "{", "\"images\"", ":", "rgbs", ",", "\"cameras\"", ":", "cameras", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.realestate10k.RealEstate10K.totrain": [[298, 304], ["numpy.loadtxt", "numpy.random.RandomState", "int"], "methods", ["None"], ["", "def", "totrain", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "imageset", "=", "np", ".", "loadtxt", "(", "\n", "self", ".", "base_file", "+", "\"/frames/%s/video_loc.txt\"", "%", "\"train\"", ",", "dtype", "=", "np", ".", "str", "\n", ")", "\n", "self", ".", "imageset", "=", "self", ".", "imageset", "[", "0", ":", "int", "(", "0.8", "*", "self", ".", "imageset", ".", "shape", "[", "0", "]", ")", "]", "\n", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.realestate10k.RealEstate10K.toval": [[305, 311], ["numpy.loadtxt", "numpy.random.RandomState", "int"], "methods", ["None"], ["", "def", "toval", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "imageset", "=", "np", ".", "loadtxt", "(", "\n", "self", ".", "base_file", "+", "\"/frames/%s/video_loc.txt\"", "%", "\"train\"", ",", "dtype", "=", "np", ".", "str", "\n", ")", "\n", "self", ".", "imageset", "=", "self", ".", "imageset", "[", "int", "(", "0.8", "*", "self", ".", "imageset", ".", "shape", "[", "0", "]", ")", ":", "]", "\n", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.realestate10k.RealEstate10KFixed.__init__": [[319, 362], ["numpy.loadtxt", "numpy.load", "torchvision.transforms.Compose", "numpy.array", "numpy.array", "numpy.linalg.inv", "print", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "dataset", ",", "opts", "=", "None", ",", "num_views", "=", "2", ",", "seed", "=", "0", ",", "vectorize", "=", "False", "\n", ")", ":", "\n", "# Now go through the dataset", "\n", "\n", "        ", "self", ".", "imageset", "=", "np", ".", "loadtxt", "(", "\n", "opts", ".", "test_data_path", "+", "\"/frames/%s/video_loc.txt\"", "%", "\"test\"", ",", "\n", "dtype", "=", "np", ".", "str", ",", "\n", ")", "\n", "self", ".", "base_file", "=", "opts", ".", "test_data_path", "\n", "\n", "self", ".", "indices", "=", "np", ".", "load", "(", "'data/realestate_test_indices.npy'", ")", "\n", "self", ".", "num_views", "=", "num_views", "\n", "\n", "self", ".", "dataset", "=", "\"test\"", "\n", "self", ".", "isTrain", "=", "False", "\n", "\n", "self", ".", "input_transform", "=", "Compose", "(", "\n", "[", "\n", "Resize", "(", "(", "opts", ".", "W", ",", "opts", ".", "W", ")", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "offset", "=", "np", ".", "array", "(", "\n", "[", "[", "2", ",", "0", ",", "-", "1", "]", ",", "[", "0", ",", "-", "2", ",", "1", "]", ",", "[", "0", ",", "0", ",", "-", "1", "]", "]", ",", "# Flip ys to match habitat", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "# Make z negative to match habitat (which assumes a negative z)", "\n", "\n", "self", ".", "K", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "1.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0", ",", "1.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "1.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "\n", "self", ".", "invK", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "K", ")", "\n", "self", ".", "opts", "=", "opts", "\n", "print", "(", "'val angle threshold: 15'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.realestate10k.RealEstate10KFixed.__len__": [[363, 365], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.realestate10k.RealEstate10KFixed.__getitem__": [[366, 431], ["numpy.loadtxt", "frame1.reshape", "frame2.reshape", "utils.geometry.get_deltas", "range", "PIL.Image.open", "numpy.array", "numpy.matmul", "extrinsics.reshape", "numpy.matmul", "numpy.vstack().astype", "numpy.linalg.inv", "realestate10k.RealEstate10KFixed.input_transform", "numpy.vstack", "abs", "str", "str", "int", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.geometry.get_deltas"], ["", "def", "__getitem__", "(", "self", ",", "image_number", ")", ":", "\n", "        ", "image_indices", "=", "self", ".", "indices", "[", "image_number", "]", "\n", "\n", "frames", "=", "np", ".", "loadtxt", "(", "\n", "self", ".", "base_file", "\n", "+", "\"/frames/%s/%s.txt\"", "%", "(", "self", ".", "dataset", ",", "self", ".", "imageset", "[", "image_indices", "[", "0", "]", "]", ")", ",", "skiprows", "=", "1", "\n", ")", "\n", "\n", "frame1", "=", "frames", "[", "image_indices", "[", "1", "]", ",", "7", ":", "]", "\n", "frame2", "=", "frames", "[", "image_indices", "[", "2", "]", ",", "7", ":", "]", "\n", "orig_viewpoint", "=", "frame1", ".", "reshape", "(", "3", ",", "4", ")", "\n", "new_viewpoint", "=", "frame2", ".", "reshape", "(", "3", ",", "4", ")", "\n", "angle", ",", "translation", "=", "get_deltas", "(", "orig_viewpoint", ",", "new_viewpoint", ")", "\n", "\n", "\n", "rgbs", "=", "[", "]", "\n", "cameras", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_views", ")", ":", "\n", "            ", "t_index", "=", "image_indices", "[", "i", "+", "1", "]", "\n", "image", "=", "Image", ".", "open", "(", "\n", "self", ".", "base_file", "\n", "+", "\"/frames/%s/%s/\"", "%", "(", "self", ".", "dataset", ",", "self", ".", "imageset", "[", "image_indices", "[", "0", "]", "]", ")", "\n", "+", "str", "(", "int", "(", "frames", "[", "t_index", ",", "0", "]", ")", ")", "\n", "+", "\".jpg\"", "\n", ")", "\n", "rgbs", "+=", "[", "self", ".", "input_transform", "(", "image", ")", "]", "\n", "\n", "intrinsics", "=", "frames", "[", "t_index", ",", "1", ":", "7", "]", "\n", "extrinsics", "=", "frames", "[", "t_index", ",", "7", ":", "]", "\n", "\n", "origK", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "intrinsics", "[", "0", "]", ",", "0", ",", "intrinsics", "[", "2", "]", "]", ",", "\n", "[", "0", ",", "intrinsics", "[", "1", "]", ",", "intrinsics", "[", "3", "]", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "K", "=", "np", ".", "matmul", "(", "self", ".", "offset", ",", "origK", ")", "\n", "\n", "origP", "=", "extrinsics", ".", "reshape", "(", "3", ",", "4", ")", "\n", "P", "=", "np", ".", "matmul", "(", "K", ",", "origP", ")", "# Merge these together to match habitat", "\n", "P", "=", "np", ".", "vstack", "(", "(", "P", ",", "np", ".", "zeros", "(", "(", "1", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", ".", "astype", "(", "\n", "np", ".", "float32", "\n", ")", "\n", "P", "[", "3", ",", "3", "]", "=", "1", "\n", "\n", "Pinv", "=", "np", ".", "linalg", ".", "inv", "(", "P", ")", "\n", "\n", "cameras", "+=", "[", "\n", "{", "\n", "\"P\"", ":", "P", ",", "\n", "\"Pinv\"", ":", "Pinv", ",", "\n", "\"OrigP\"", ":", "origP", ",", "\n", "\"K\"", ":", "self", ".", "K", ",", "\n", "\"Kinv\"", ":", "self", ".", "invK", ",", "\n", "'translation'", ":", "translation", ",", "\n", "'angle'", ":", "angle", ",", "\n", "'is_big_change'", ":", "True", ",", "\n", "'frame_diff'", ":", "abs", "(", "image_indices", "[", "2", "]", "-", "image_indices", "[", "1", "]", ")", ",", "\n", "'vid_names'", ":", "str", "(", "self", ".", "imageset", "[", "image_indices", "[", "0", "]", "]", ")", "\n", "}", "\n", "]", "\n", "\n", "", "return", "{", "\"images\"", ":", "rgbs", ",", "\"cameras\"", ":", "cameras", "}", "", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.create_rgb_dataset.RandomImageGenerator.__init__": [[91, 230], ["print", "create_rgb_dataset.make_config", "os.path.join", "print", "os.path.join", "print", "habitat.PointNavDatasetV1", "habitat.PointNavDatasetV1", "make_config.freeze", "numpy.random.RandomState", "numpy.array", "numpy.linalg.inv", "os.path.exists", "os.makedirs", "os.path.exists", "print", "habitat.datasets.make_dataset", "habitat.datasets.make_dataset", "tqdm.tqdm", "list", "print", "gzip.open", "habitat.datasets.make_dataset.from_json", "habitat.datasets.make_dataset.from_json", "range", "create_rgb_dataset._load_datasets", "len", "tuple", "habitat.VectorEnv", "habitat.VectorEnv", "habitat.VectorEnv", "habitat.VectorEnv", "int", "habitat.Env", "habitat.Env", "habitat.Env", "habitat.Env", "create_rgb_dataset.RandomImageGenerator.rng.shuffle", "torchvision.Compose", "torchvision.ToTensor", "list.values", "os.path.exists", "habitat.datasets.make_dataset.to_json().encode", "habitat.datasets.make_dataset.to_json().encode", "f.read", "len", "habitat.datasets.make_dataset.episodes[].scene_id.replace", "habitat.datasets.make_dataset.episodes[].scene_id.replace", "zip", "Exception", "gzip.GzipFile", "fout.write", "range", "torchvision.ToTensor", "torchvision.Normalize", "habitat.datasets.make_dataset.to_json", "habitat.datasets.make_dataset.to_json", "numpy.tan", "numpy.tan"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.data.create_rgb_dataset.make_config", "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.create_rgb_dataset._load_datasets", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.encode", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.vqvae.VQVAETop.encode"], ["    ", "def", "__init__", "(", "self", ",", "split", ",", "gpu_id", ",", "opts", ",", "vectorize", "=", "False", ",", "seed", "=", "0", ")", "->", "None", ":", "\n", "        ", "self", ".", "vectorize", "=", "vectorize", "\n", "\n", "print", "(", "\"gpu_id\"", ",", "gpu_id", ")", "\n", "resolution", "=", "opts", ".", "W", "\n", "if", "opts", ".", "use_semantics", ":", "\n", "            ", "sensors", "=", "[", "\"RGB_SENSOR\"", ",", "\"DEPTH_SENSOR\"", ",", "\"SEMANTIC_SENSOR\"", "]", "\n", "", "else", ":", "\n", "            ", "sensors", "=", "[", "\"RGB_SENSOR\"", ",", "\"DEPTH_SENSOR\"", "]", "\n", "", "if", "split", "==", "\"train\"", ":", "\n", "            ", "data_path", "=", "opts", ".", "train_data_path", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "            ", "data_path", "=", "opts", ".", "val_data_path", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "            ", "data_path", "=", "opts", ".", "test_data_path", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Invalid split\"", ")", "\n", "", "unique_dataset_name", "=", "opts", ".", "dataset", "\n", "\n", "self", ".", "num_parallel_envs", "=", "5", "\n", "\n", "self", ".", "images_before_reset", "=", "opts", ".", "images_before_reset", "\n", "config", "=", "make_config", "(", "\n", "opts", ".", "config", ",", "\n", "gpu_id", ",", "\n", "split", ",", "\n", "data_path", ",", "\n", "sensors", ",", "\n", "resolution", ",", "\n", "opts", ".", "scenes_dir", ",", "\n", ")", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "\"data/scene_episodes/\"", ",", "unique_dataset_name", "+", "\"_\"", "+", "split", "\n", ")", "\n", "self", ".", "dataset_name", "=", "config", ".", "DATASET", ".", "TYPE", "\n", "print", "(", "data_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "data_dir", ")", "\n", "", "data_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dataset_one_ep_per_scene.json.gz\"", ")", "\n", "# Creates a dataset where each episode is a random spawn point in each scene.", "\n", "print", "(", "\"One ep per scene\"", ",", "flush", "=", "True", ")", "\n", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "data_path", ")", ")", ":", "\n", "            ", "print", "(", "\"Creating dataset...\"", ",", "flush", "=", "True", ")", "\n", "dataset", "=", "make_dataset", "(", "config", ".", "DATASET", ".", "TYPE", ",", "config", "=", "config", ".", "DATASET", ")", "\n", "# Get one episode per scene in dataset", "\n", "scene_episodes", "=", "{", "}", "\n", "for", "episode", "in", "tqdm", ".", "tqdm", "(", "dataset", ".", "episodes", ")", ":", "\n", "                ", "if", "episode", ".", "scene_id", "not", "in", "scene_episodes", ":", "\n", "                    ", "scene_episodes", "[", "episode", ".", "scene_id", "]", "=", "episode", "\n", "\n", "", "", "scene_episodes", "=", "list", "(", "scene_episodes", ".", "values", "(", ")", ")", "\n", "dataset", ".", "episodes", "=", "scene_episodes", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_path", ")", ":", "\n", "# Multiproc do check again before write.", "\n", "                ", "json", "=", "dataset", ".", "to_json", "(", ")", ".", "encode", "(", "\"utf-8\"", ")", "\n", "with", "gzip", ".", "GzipFile", "(", "data_path", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                    ", "fout", ".", "write", "(", "json", ")", "\n", "", "", "print", "(", "\"Finished dataset...\"", ",", "flush", "=", "True", ")", "\n", "\n", "# Load in data and update the location to the proper location (else", "\n", "# get a weird, uninformative, error -- Affine2Dtransform())", "\n", "", "dataset", "=", "mp3d_dataset", ".", "PointNavDatasetV1", "(", ")", "\n", "with", "gzip", ".", "open", "(", "data_path", ",", "\"rt\"", ")", "as", "f", ":", "\n", "            ", "dataset", ".", "from_json", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "dataset", ".", "episodes", ")", ")", ":", "\n", "                ", "dataset", ".", "episodes", "[", "i", "]", ".", "scene_id", "=", "dataset", ".", "episodes", "[", "i", "]", ".", "scene_id", ".", "replace", "(", "\n", "'/checkpoint/erikwijmans/data/mp3d/'", ",", "\n", "opts", ".", "scenes_dir", "+", "'/mp3d/'", ")", "\n", "\n", "", "", "config", ".", "TASK", ".", "SENSORS", "=", "[", "\"POINTGOAL_SENSOR\"", "]", "\n", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n", "# Now look at vector environments", "\n", "if", "self", ".", "vectorize", ":", "\n", "            ", "configs", ",", "datasets", "=", "_load_datasets", "(", "\n", "(", "\n", "opts", ".", "config", ",", "\n", "gpu_id", ",", "\n", "split", ",", "\n", "data_path", ",", "\n", "sensors", ",", "\n", "resolution", ",", "\n", "opts", ".", "scenes_dir", ",", "\n", ")", ",", "\n", "dataset", ",", "\n", "data_path", ",", "\n", "opts", ".", "scenes_dir", "+", "'/mp3d/'", ",", "\n", "num_workers", "=", "self", ".", "num_parallel_envs", ",", "\n", ")", "\n", "num_envs", "=", "len", "(", "configs", ")", "\n", "\n", "env_fn_args", "=", "tuple", "(", "zip", "(", "configs", ",", "datasets", ",", "range", "(", "num_envs", ")", ")", ")", "\n", "envs", "=", "habitat", ".", "VectorEnv", "(", "\n", "env_fn_args", "=", "env_fn_args", ",", "\n", "multiprocessing_start_method", "=", "\"forkserver\"", ",", "\n", ")", "\n", "\n", "self", ".", "env", "=", "envs", "\n", "self", ".", "num_train_envs", "=", "int", "(", "0.9", "*", "(", "self", ".", "num_parallel_envs", ")", ")", "\n", "self", ".", "num_val_envs", "=", "self", ".", "num_parallel_envs", "-", "self", ".", "num_train_envs", "\n", "", "else", ":", "\n", "            ", "self", ".", "env", "=", "habitat", ".", "Env", "(", "config", "=", "config", ",", "dataset", "=", "dataset", ")", "\n", "self", ".", "env_sim", "=", "self", ".", "env", ".", "sim", "\n", "self", ".", "rng", ".", "shuffle", "(", "self", ".", "env", ".", "episodes", ")", "\n", "self", ".", "env_sim", "=", "self", ".", "env", ".", "sim", "\n", "\n", "", "self", ".", "num_samples", "=", "0", "\n", "\n", "# Set up intrinsic parameters", "\n", "self", ".", "hfov", "=", "config", ".", "SIMULATOR", ".", "DEPTH_SENSOR", ".", "HFOV", "*", "np", ".", "pi", "/", "180.0", "\n", "self", ".", "W", "=", "resolution", "\n", "self", ".", "K", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "1.0", "/", "np", ".", "tan", "(", "self", ".", "hfov", "/", "2.0", ")", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0", ",", "1.0", "/", "np", ".", "tan", "(", "self", ".", "hfov", "/", "2.0", ")", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "1.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "\n", "self", ".", "invK", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "K", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "opts", "=", "opts", "\n", "\n", "if", "self", ".", "opts", ".", "normalize_image", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ",", "\n", "]", "\n", ")", "# Using same normalization as BigGan", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.create_rgb_dataset.RandomImageGenerator.get_vector_sample": [[231, 334], ["numpy.array", "create_rgb_dataset.RandomImageGenerator.rng.uniform", "create_rgb_dataset.RandomImageGenerator.env.get_observations_at", "range", "create_rgb_dataset.RandomImageGenerator.env.reset", "create_rgb_dataset.RandomImageGenerator.env.sample_navigable_point", "numpy.sin", "numpy.cos", "numpy.array.copy", "orig_rotation.copy", "create_rgb_dataset.RandomImageGenerator.env.get_observations_at", "create_rgb_dataset.RandomImageGenerator.env.get_agent_state", "quaternion.as_rotation_matrix", "geometry.camera_transformations.get_camera_matrices", "len", "torch.Tensor().unsqueeze", "create_rgb_dataset.RandomImageGenerator.transform", "create_rgb_dataset.RandomImageGenerator.keys", "torch.Tensor().unsqueeze", "torch.zeros().long", "id_to_label.keys", "quaternion.from_float_array", "utils.jitter.jitter_quaternions", "quaternion.as_float_array().tolist", "int", "obj.category.index", "quaternion.from_float_array", "quaternion.as_float_array().tolist", "torch.Tensor", "obs[].astype", "torch.Tensor", "torch.zeros", "create_rgb_dataset.RandomImageGenerator.rng.rand", "quaternion.as_float_array", "utils.jitter.jitter_quaternions", "utils.jitter.jitter_quaternions", "obs[].astype", "torch.Tensor().unsqueeze.size", "obj.id.split", "create_rgb_dataset.RandomImageGenerator.env.sim.semantic_annotations", "quaternion.from_float_array", "quaternion.from_float_array", "quaternion.as_float_array", "create_rgb_dataset.RandomImageGenerator.rng.rand"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.get_observations_at", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.Phase.reset", "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.sample_navigable_point", "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.get_observations_at", "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.get_agent_state", "home.repos.pwc.inspect_result.crockwell_pixelsynth.geometry.camera_transformations.get_camera_matrices", "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.jitter.jitter_quaternions", "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.jitter.jitter_quaternions", "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.jitter.jitter_quaternions"], ["", "", "def", "get_vector_sample", "(", "self", ",", "index", ",", "num_views", ",", "isTrain", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "num_samples", "%", "self", ".", "images_before_reset", "==", "0", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "# Randomly choose an index of given environments", "\n", "", "if", "isTrain", ":", "\n", "            ", "index", "=", "index", "%", "self", ".", "num_train_envs", "\n", "", "else", ":", "\n", "            ", "index", "=", "(", "index", "%", "self", ".", "num_val_envs", ")", "+", "self", ".", "num_train_envs", "\n", "\n", "", "depths", "=", "[", "]", "\n", "rgbs", "=", "[", "]", "\n", "cameras", "=", "[", "]", "\n", "semantics", "=", "[", "]", "\n", "\n", "orig_location", "=", "np", ".", "array", "(", "self", ".", "env", ".", "sample_navigable_point", "(", "index", ")", ")", "\n", "rand_angle", "=", "self", ".", "rng", ".", "uniform", "(", "0", ",", "2", "*", "np", ".", "pi", ")", "\n", "\n", "orig_rotation", "=", "[", "0", ",", "np", ".", "sin", "(", "rand_angle", "/", "2", ")", ",", "0", ",", "np", ".", "cos", "(", "rand_angle", "/", "2", ")", "]", "\n", "obs", "=", "self", ".", "env", ".", "get_observations_at", "(", "\n", "index", ",", "position", "=", "orig_location", ",", "rotation", "=", "orig_rotation", "\n", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "num_views", ")", ":", "\n", "            ", "rand_location", "=", "orig_location", ".", "copy", "(", ")", "\n", "rand_rotation", "=", "orig_rotation", ".", "copy", "(", ")", "\n", "if", "self", ".", "opts", ".", "image_type", "==", "\"translation\"", ":", "\n", "                ", "rand_location", "[", "[", "0", "]", "]", "=", "(", "\n", "orig_location", "[", "[", "0", "]", "]", "+", "self", ".", "rng", ".", "rand", "(", ")", "*", "0.2", "-", "0.1", "\n", ")", "\n", "", "elif", "self", ".", "opts", ".", "image_type", "==", "\"outpaint\"", ":", "\n", "                ", "rand_rotation", "=", "jitter_quaternions", "(", "\n", "quaternion", ".", "from_float_array", "(", "orig_rotation", ")", ",", "\n", "self", ".", "rng", ",", "\n", "angle", "=", "self", ".", "opts", ".", "max_rotation", ",", "\n", ")", "\n", "rand_rotation", "=", "quaternion", ".", "as_float_array", "(", "\n", "rand_rotation", "\n", ")", ".", "tolist", "(", ")", "\n", "", "elif", "self", ".", "opts", ".", "image_type", "==", "\"fixedRT_baseline\"", ":", "\n", "                ", "rand_location", "=", "self", ".", "rand_location", "\n", "rotation", "=", "self", ".", "rand_rotation", "\n", "", "else", ":", "\n", "                ", "rand_location", "[", "0", "]", "=", "(", "\n", "orig_location", "[", "0", "]", "+", "self", ".", "rng", ".", "rand", "(", ")", "*", "0.32", "-", "0.15", "\n", ")", "\n", "if", "isTrain", ":", "\n", "                    ", "rand_rotation", "=", "jitter_quaternions", "(", "\n", "quaternion", ".", "from_float_array", "(", "orig_rotation", ")", ",", "\n", "self", ".", "rng", ",", "\n", "angle", "=", "self", ".", "opts", ".", "max_rotation", ",", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "rand_rotation", "=", "jitter_quaternions", "(", "\n", "quaternion", ".", "from_float_array", "(", "orig_rotation", ")", ",", "\n", "self", ".", "rng", ",", "\n", "angle", "=", "self", ".", "opts", ".", "val_rotation", ",", "\n", ")", "\n", "", "rand_rotation", "=", "quaternion", ".", "as_float_array", "(", "\n", "rand_rotation", "\n", ")", ".", "tolist", "(", ")", "\n", "\n", "", "obs", "=", "self", ".", "env", ".", "get_observations_at", "(", "\n", "index", ",", "position", "=", "rand_location", ",", "rotation", "=", "rand_rotation", "\n", ")", "\n", "\n", "depths", "+=", "[", "torch", ".", "Tensor", "(", "obs", "[", "\"depth\"", "]", "[", "...", ",", "0", "]", ")", ".", "unsqueeze", "(", "0", ")", "]", "\n", "rgbs", "+=", "[", "self", ".", "transform", "(", "obs", "[", "\"rgb\"", "]", ".", "astype", "(", "np", ".", "float32", ")", "/", "256.0", ")", "]", "\n", "\n", "if", "\"semantic\"", "in", "obs", ".", "keys", "(", ")", ":", "\n", "                ", "instance_semantic", "=", "torch", ".", "Tensor", "(", "\n", "obs", "[", "\"semantic\"", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", ")", ".", "unsqueeze", "(", "0", ")", "\n", "class_semantic", "=", "torch", ".", "zeros", "(", "instance_semantic", ".", "size", "(", ")", ")", ".", "long", "(", ")", "\n", "\n", "id_to_label", "=", "{", "\n", "int", "(", "obj", ".", "id", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", ":", "obj", ".", "category", ".", "index", "(", ")", "\n", "for", "obj", "in", "self", ".", "env", ".", "sim", ".", "semantic_annotations", "(", ")", ".", "objects", "\n", "}", "\n", "\n", "for", "id_scene", "in", "id_to_label", ".", "keys", "(", ")", ":", "\n", "                    ", "class_semantic", "[", "instance_semantic", "==", "id_scene", "]", "=", "id_to_label", "[", "\n", "id_scene", "\n", "]", "\n", "\n", "", "semantics", "+=", "[", "class_semantic", "]", "\n", "\n", "", "position", ",", "rotation", "=", "self", ".", "env", ".", "get_agent_state", "(", "index", ")", "\n", "rotation", "=", "quaternion", ".", "as_rotation_matrix", "(", "\n", "quaternion", ".", "from_float_array", "(", "rotation", ")", "\n", ")", "\n", "P", ",", "Pinv", "=", "get_camera_matrices", "(", "position", "=", "position", ",", "rotation", "=", "rotation", ")", "\n", "cameras", "+=", "[", "{", "\"P\"", ":", "P", ",", "\"Pinv\"", ":", "Pinv", ",", "\"K\"", ":", "self", ".", "K", ",", "\"Kinv\"", ":", "self", ".", "invK", "}", "]", "\n", "\n", "", "self", ".", "num_samples", "+=", "1", "\n", "if", "len", "(", "semantics", ")", ">", "0", ":", "\n", "            ", "return", "{", "\n", "\"images\"", ":", "rgbs", ",", "\n", "\"depths\"", ":", "depths", ",", "\n", "\"cameras\"", ":", "cameras", ",", "\n", "\"semantics\"", ":", "semantics", ",", "\n", "}", "\n", "\n", "", "return", "{", "\"images\"", ":", "rgbs", ",", "\"depths\"", ":", "depths", ",", "\"cameras\"", ":", "cameras", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.create_rgb_dataset.RandomImageGenerator.get_singleenv_sample": [[335, 434], ["create_rgb_dataset.RandomImageGenerator.env_sim.sample_navigable_point", "create_rgb_dataset.RandomImageGenerator.env_sim.get_observations_at", "range", "create_rgb_dataset.RandomImageGenerator.env.reset", "print", "create_rgb_dataset.RandomImageGenerator.angle_rng.uniform", "create_rgb_dataset.RandomImageGenerator.rng.uniform", "numpy.sin", "numpy.cos", "create_rgb_dataset.RandomImageGenerator.copy", "rand_rotation.copy", "create_rgb_dataset.RandomImageGenerator.env_sim.get_observations_at", "quaternion.as_rotation_matrix", "geometry.camera_transformations.get_camera_matrices", "len", "torch.Tensor().unsqueeze", "create_rgb_dataset.RandomImageGenerator.transform", "create_rgb_dataset.RandomImageGenerator.keys", "torch.Tensor().unsqueeze", "torch.zeros().long", "numpy.unique", "quaternion.as_float_array().tolist", "int", "obj.category.index", "torch.Tensor().unsqueeze.numpy", "create_rgb_dataset.RandomImageGenerator.env_sim.get_agent_state", "quaternion.as_float_array().tolist", "torch.Tensor", "obs[].astype", "torch.Tensor", "torch.zeros", "create_rgb_dataset.RandomImageGenerator.rng.rand", "quaternion.as_float_array", "obs[].astype", "torch.Tensor().unsqueeze.size", "obj.id.split", "create_rgb_dataset.RandomImageGenerator.env.sim.semantic_annotations", "utils.jitter.jitter_quaternions", "quaternion.as_float_array", "quaternion.from_float_array", "create_rgb_dataset.RandomImageGenerator.rng.rand", "utils.jitter.jitter_quaternions", "quaternion.from_float_array"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.sample_navigable_point", "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.get_observations_at", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.Phase.reset", "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.get_observations_at", "home.repos.pwc.inspect_result.crockwell_pixelsynth.geometry.camera_transformations.get_camera_matrices", "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.custom_habitat_vector_env.VectorEnv.get_agent_state", "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.jitter.jitter_quaternions", "home.repos.pwc.inspect_result.crockwell_pixelsynth.utils.jitter.jitter_quaternions"], ["", "def", "get_singleenv_sample", "(", "self", ",", "num_views", ")", "->", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ":", "\n", "\n", "        ", "if", "self", ".", "num_samples", "%", "self", ".", "images_before_reset", "==", "0", ":", "\n", "            ", "old_env", "=", "self", ".", "env", ".", "_current_episode_index", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "print", "(", "\n", "\"RESETTING %d to %d \\n\"", "\n", "%", "(", "old_env", ",", "self", ".", "env", ".", "_current_episode_index", ")", ",", "\n", "flush", "=", "True", ",", "\n", ")", "\n", "\n", "", "depths", "=", "[", "]", "\n", "rgbs", "=", "[", "]", "\n", "cameras", "=", "[", "]", "\n", "semantics", "=", "[", "]", "\n", "\n", "rand_location", "=", "self", ".", "env_sim", ".", "sample_navigable_point", "(", ")", "\n", "if", "self", ".", "opts", ".", "image_type", "==", "\"fixedRT_baseline\"", ":", "\n", "            ", "rand_angle", "=", "self", ".", "angle_rng", ".", "uniform", "(", "0", ",", "2", "*", "np", ".", "pi", ")", "\n", "", "else", ":", "\n", "            ", "rand_angle", "=", "self", ".", "rng", ".", "uniform", "(", "0", ",", "2", "*", "np", ".", "pi", ")", "\n", "", "rand_rotation", "=", "[", "0", ",", "np", ".", "sin", "(", "rand_angle", "/", "2", ")", ",", "0", ",", "np", ".", "cos", "(", "rand_angle", "/", "2", ")", "]", "\n", "obs", "=", "self", ".", "env_sim", ".", "get_observations_at", "(", "\n", "position", "=", "rand_location", ",", "\n", "rotation", "=", "rand_rotation", ",", "\n", "keep_agent_at_new_pose", "=", "True", ",", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "num_views", ")", ":", "\n", "            ", "position", "=", "rand_location", ".", "copy", "(", ")", "\n", "rotation", "=", "rand_rotation", ".", "copy", "(", ")", "\n", "if", "self", ".", "opts", ".", "image_type", "==", "\"translation\"", ":", "\n", "                ", "position", "[", "0", "]", "=", "position", "[", "0", "]", "+", "self", ".", "rng", ".", "rand", "(", ")", "*", "0.2", "-", "0.1", "\n", "", "elif", "self", ".", "opts", ".", "image_type", "==", "\"outpaint\"", ":", "\n", "                ", "rotation", "=", "quaternion", ".", "as_float_array", "(", "\n", "jitter_quaternions", "(", "\n", "quaternion", ".", "from_float_array", "(", "rand_rotation", ")", ",", "\n", "self", ".", "rng", ",", "\n", "angle", "=", "self", ".", "opts", ".", "max_rotation", ",", "\n", ")", "\n", ")", ".", "tolist", "(", ")", "\n", "", "elif", "self", ".", "opts", ".", "image_type", "==", "\"fixedRT_baseline\"", ":", "\n", "                ", "rand_location", "=", "self", ".", "rand_location", "\n", "rotation", "=", "self", ".", "rand_rotation", "\n", "\n", "", "else", ":", "\n", "                ", "position", "[", "0", "]", "=", "position", "[", "0", "]", "+", "self", ".", "rng", ".", "rand", "(", ")", "*", "0.3", "-", "0.15", "\n", "\n", "rotation", "=", "quaternion", ".", "as_float_array", "(", "\n", "jitter_quaternions", "(", "\n", "quaternion", ".", "from_float_array", "(", "rand_rotation", ")", ",", "\n", "self", ".", "rng", ",", "\n", "angle", "=", "self", ".", "opts", ".", "max_rotation", ",", "\n", ")", "\n", ")", ".", "tolist", "(", ")", "\n", "\n", "", "obs", "=", "self", ".", "env_sim", ".", "get_observations_at", "(", "\n", "position", "=", "position", ",", "\n", "rotation", "=", "rotation", ",", "\n", "keep_agent_at_new_pose", "=", "True", ",", "\n", ")", "\n", "\n", "depths", "+=", "[", "torch", ".", "Tensor", "(", "obs", "[", "\"depth\"", "]", "[", "...", ",", "0", "]", ")", ".", "unsqueeze", "(", "0", ")", "]", "\n", "rgbs", "+=", "[", "self", ".", "transform", "(", "obs", "[", "\"rgb\"", "]", ".", "astype", "(", "np", ".", "float32", ")", "/", "256.0", ")", "]", "\n", "\n", "if", "\"semantic\"", "in", "obs", ".", "keys", "(", ")", ":", "\n", "                ", "instance_semantic", "=", "torch", ".", "Tensor", "(", "\n", "obs", "[", "\"semantic\"", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", ")", ".", "unsqueeze", "(", "0", ")", "\n", "class_semantic", "=", "torch", ".", "zeros", "(", "instance_semantic", ".", "size", "(", ")", ")", ".", "long", "(", ")", "\n", "\n", "id_to_label", "=", "{", "\n", "int", "(", "obj", ".", "id", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", ":", "obj", ".", "category", ".", "index", "(", ")", "\n", "for", "obj", "in", "self", ".", "env", ".", "sim", ".", "semantic_annotations", "(", ")", ".", "objects", "\n", "}", "\n", "\n", "for", "id_scene", "in", "np", ".", "unique", "(", "instance_semantic", ".", "numpy", "(", ")", ")", ":", "\n", "                    ", "class_semantic", "[", "instance_semantic", "==", "id_scene", "]", "=", "id_to_label", "[", "\n", "id_scene", "\n", "]", "\n", "\n", "", "semantics", "+=", "[", "class_semantic", "]", "\n", "\n", "", "agent_state", "=", "self", ".", "env_sim", ".", "get_agent_state", "(", ")", ".", "sensor_states", "[", "\"depth\"", "]", "\n", "rotation", "=", "quaternion", ".", "as_rotation_matrix", "(", "agent_state", ".", "rotation", ")", "\n", "position", "=", "agent_state", ".", "position", "\n", "P", ",", "Pinv", "=", "get_camera_matrices", "(", "position", "=", "position", ",", "rotation", "=", "rotation", ")", "\n", "cameras", "+=", "[", "{", "\"P\"", ":", "P", ",", "\"Pinv\"", ":", "Pinv", ",", "\"K\"", ":", "self", ".", "K", ",", "\"Kinv\"", ":", "self", ".", "invK", "}", "]", "\n", "\n", "", "self", ".", "num_samples", "+=", "1", "\n", "if", "len", "(", "semantics", ")", ">", "0", ":", "\n", "            ", "return", "{", "\n", "\"images\"", ":", "rgbs", ",", "\n", "\"depths\"", ":", "depths", ",", "\n", "\"cameras\"", ":", "cameras", ",", "\n", "\"semantics\"", ":", "semantics", ",", "\n", "}", "\n", "\n", "", "return", "{", "\"images\"", ":", "rgbs", ",", "\"depths\"", ":", "depths", ",", "\"cameras\"", ":", "cameras", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.create_rgb_dataset.RandomImageGenerator.get_sample": [[435, 440], ["create_rgb_dataset.RandomImageGenerator.get_vector_sample", "create_rgb_dataset.RandomImageGenerator.get_singleenv_sample"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.data.create_rgb_dataset.RandomImageGenerator.get_vector_sample", "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.create_rgb_dataset.RandomImageGenerator.get_singleenv_sample"], ["", "def", "get_sample", "(", "self", ",", "index", ",", "num_views", ",", "isTrain", ")", ":", "\n", "        ", "if", "self", ".", "vectorize", ":", "\n", "            ", "return", "self", ".", "get_vector_sample", "(", "index", ",", "num_views", ",", "isTrain", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "get_singleenv_sample", "(", "num_views", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.create_rgb_dataset._load_datasets": [[23, 58], ["print", "range", "len", "len", "float", "min", "create_rgb_dataset.make_config", "make_config.defrost", "habitat.PointNavDatasetV1", "str", "make_config.freeze", "len", "gzip.open", "mp3d_dataset.PointNavDatasetV1.from_json", "range", "f.read", "len", "mp3d_dataset.PointNavDatasetV1.episodes[].scene_id.replace", "int", "int"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.data.create_rgb_dataset.make_config"], ["def", "_load_datasets", "(", "config_keys", ",", "dataset", ",", "data_path", ",", "scenes_path", ",", "num_workers", ")", ":", "\n", "# For each scene, create a new dataset which is added with the config", "\n", "# to the vector environment.", "\n", "\n", "    ", "print", "(", "len", "(", "dataset", ".", "episodes", ")", ")", "\n", "datasets", "=", "[", "]", "\n", "configs", "=", "[", "]", "\n", "\n", "num_episodes_per_worker", "=", "len", "(", "dataset", ".", "episodes", ")", "/", "float", "(", "num_workers", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "min", "(", "len", "(", "dataset", ".", "episodes", ")", ",", "num_workers", ")", ")", ":", "\n", "        ", "config", "=", "make_config", "(", "*", "config_keys", ")", "\n", "config", ".", "defrost", "(", ")", "\n", "\n", "dataset_new", "=", "mp3d_dataset", ".", "PointNavDatasetV1", "(", ")", "\n", "with", "gzip", ".", "open", "(", "data_path", ",", "\"rt\"", ")", "as", "f", ":", "\n", "            ", "dataset_new", ".", "from_json", "(", "f", ".", "read", "(", ")", ")", "\n", "dataset_new", ".", "episodes", "=", "dataset_new", ".", "episodes", "[", "\n", "int", "(", "i", "*", "num_episodes_per_worker", ")", ":", "int", "(", "\n", "(", "i", "+", "1", ")", "*", "num_episodes_per_worker", "\n", ")", "\n", "]", "\n", "\n", "for", "episode_id", "in", "range", "(", "0", ",", "len", "(", "dataset_new", ".", "episodes", ")", ")", ":", "\n", "                ", "dataset_new", ".", "episodes", "[", "episode_id", "]", ".", "scene_id", "=", "dataset_new", ".", "episodes", "[", "episode_id", "]", ".", "scene_id", ".", "replace", "(", "\n", "'/checkpoint/erikwijmans/data/mp3d/'", ",", "\n", "scenes_path", ")", "\n", "\n", "", "", "config", ".", "SIMULATOR", ".", "SCENE", "=", "str", "(", "dataset_new", ".", "episodes", "[", "0", "]", ".", "scene_id", ")", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "datasets", "+=", "[", "dataset_new", "]", "\n", "configs", "+=", "[", "config", "]", "\n", "", "return", "configs", ",", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.create_rgb_dataset.make_config": [[60, 88], ["habitat.config.default.get_config", "habitat.config.default.get_config.defrost"], "function", ["None"], ["", "def", "make_config", "(", "\n", "config", ",", "gpu_id", ",", "split", ",", "data_path", ",", "sensors", ",", "resolution", ",", "scenes_dir", "\n", ")", ":", "\n", "    ", "config", "=", "get_config", "(", "config", ")", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK", ".", "NAME", "=", "\"Nav-v0\"", "\n", "config", ".", "TASK", ".", "MEASUREMENTS", "=", "[", "]", "\n", "config", ".", "DATASET", ".", "SPLIT", "=", "split", "\n", "config", ".", "DATASET", ".", "DATA_PATH", "=", "data_path", "\n", "config", ".", "DATASET", ".", "SCENES_DIR", "=", "scenes_dir", "\n", "config", ".", "HEIGHT", "=", "resolution", "\n", "config", ".", "WIDTH", "=", "resolution", "\n", "for", "sensor", "in", "sensors", ":", "\n", "        ", "config", ".", "SIMULATOR", "[", "sensor", "]", "[", "\"HEIGHT\"", "]", "=", "resolution", "\n", "config", ".", "SIMULATOR", "[", "sensor", "]", "[", "\"WIDTH\"", "]", "=", "resolution", "\n", "\n", "", "config", ".", "TASK", ".", "HEIGHT", "=", "resolution", "\n", "config", ".", "TASK", ".", "WIDTH", "=", "resolution", "\n", "config", ".", "SIMULATOR", ".", "TURN_ANGLE", "=", "15", "\n", "config", ".", "SIMULATOR", ".", "FORWARD_STEP_SIZE", "=", "0.1", "# in metres", "\n", "config", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", "=", "sensors", "\n", "config", ".", "SIMULATOR", ".", "DEPTH_SENSOR", ".", "NORMALIZE_DEPTH", "=", "False", "\n", "\n", "config", ".", "SIMULATOR", ".", "DEPTH_SENSOR", ".", "HFOV", "=", "90", "\n", "\n", "config", ".", "ENVIRONMENT", ".", "MAX_EPISODE_STEPS", "=", "2", "**", "32", "\n", "config", ".", "SIMULATOR", ".", "HABITAT_SIM_V0", ".", "GPU_DEVICE_ID", "=", "gpu_id", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.habitat_data.HabitatImageGenerator.__init__": [[10, 29], ["numpy.random.RandomState"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "split", ",", "opts", ",", "vectorize", "=", "True", ",", "seed", "=", "0", ")", ":", "\n", "        ", "self", ".", "worker_id", "=", "0", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "opts", "=", "opts", "\n", "\n", "self", ".", "num_views", "=", "opts", ".", "num_views", "\n", "self", ".", "vectorize", "=", "vectorize", "\n", "\n", "self", ".", "image_generator", "=", "None", "\n", "\n", "# Part of hacky code to have train/val", "\n", "self", ".", "episodes", "=", "None", "\n", "self", ".", "restarted", "=", "True", "\n", "self", ".", "train", "=", "True", "\n", "\n", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "self", ".", "seed", "=", "opts", ".", "seed", "\n", "\n", "self", ".", "fixed_val_images", "=", "[", "None", "]", "*", "32", "# Keep 32 examples", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.habitat_data.HabitatImageGenerator.__len__": [[30, 32], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "2", "**", "31", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.habitat_data.HabitatImageGenerator.__restart__": [[33, 66], ["data.create_rgb_dataset.RandomImageGenerator", "habitat_data.HabitatImageGenerator.image_generator.env.reset", "data.create_rgb_dataset.RandomImageGenerator", "habitat_data.HabitatImageGenerator.image_generator.env.reset", "numpy.random.RandomState", "habitat_data.HabitatImageGenerator.image_generator.env.reset", "torch.randint().item", "habitat_data.HabitatImageGenerator.rng.shuffle", "torch.randint().item", "torch.randint", "len", "len", "torch.randint"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.Phase.reset", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.Phase.reset", "home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.Phase.reset"], ["", "def", "__restart__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "vectorize", ":", "\n", "            ", "self", ".", "image_generator", "=", "RandomImageGenerator", "(", "\n", "self", ".", "split", ",", "\n", "self", ".", "opts", ".", "render_ids", "[", "\n", "self", ".", "worker_id", "%", "len", "(", "self", ".", "opts", ".", "render_ids", ")", "\n", "]", ",", "\n", "self", ".", "opts", ",", "\n", "vectorize", "=", "self", ".", "vectorize", ",", "\n", "seed", "=", "self", ".", "worker_id", "+", "self", ".", "seed", ",", "\n", ")", "\n", "self", ".", "image_generator", ".", "env", ".", "reset", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "image_generator", "=", "RandomImageGenerator", "(", "\n", "self", ".", "split", ",", "\n", "self", ".", "opts", ".", "render_ids", "[", "\n", "self", ".", "worker_id", "%", "len", "(", "self", ".", "opts", ".", "render_ids", ")", "\n", "]", ",", "\n", "self", ".", "opts", ",", "\n", "vectorize", "=", "self", ".", "vectorize", ",", "\n", "seed", "=", "torch", ".", "randint", "(", "100", ",", "size", "=", "(", "1", ",", ")", ")", ".", "item", "(", ")", ",", "\n", ")", "\n", "self", ".", "image_generator", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "\n", "torch", ".", "randint", "(", "100", ",", "size", "=", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", ")", "\n", "\n", "", "if", "not", "(", "self", ".", "vectorize", ")", ":", "\n", "            ", "if", "self", ".", "episodes", "is", "None", ":", "\n", "                ", "self", ".", "rng", ".", "shuffle", "(", "self", ".", "image_generator", ".", "env", ".", "episodes", ")", "\n", "self", ".", "episodes", "=", "self", ".", "image_generator", ".", "env", ".", "episodes", "\n", "", "self", ".", "image_generator", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "num_samples", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.habitat_data.HabitatImageGenerator.restart": [[67, 93], ["habitat_data.HabitatImageGenerator.rng.randint", "print", "habitat_data.HabitatImageGenerator.image_generator.env.reset", "print", "len", "int", "int", "len", "len"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.vqvae2.scheduler.Phase.reset"], ["", "", "def", "restart", "(", "self", ",", "train", ")", ":", "\n", "\n", "        ", "if", "not", "(", "self", ".", "vectorize", ")", ":", "\n", "            ", "if", "train", ":", "\n", "                ", "self", ".", "image_generator", ".", "env", ".", "episodes", "=", "self", ".", "episodes", "[", "\n", "0", ":", "int", "(", "0.8", "*", "len", "(", "self", ".", "episodes", ")", ")", "\n", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "image_generator", ".", "env", ".", "episodes", "=", "self", ".", "episodes", "[", "\n", "int", "(", "0.8", "*", "len", "(", "self", ".", "episodes", ")", ")", ":", "\n", "]", "\n", "\n", "# randomly choose an environment to start at (as opposed to always 0)", "\n", "", "self", ".", "image_generator", ".", "env", ".", "_current_episode_index", "=", "self", ".", "rng", ".", "randint", "(", "\n", "len", "(", "self", ".", "episodes", ")", "\n", ")", "\n", "print", "(", "\n", "\"EPISODES A \"", ",", "\n", "self", ".", "image_generator", ".", "env", ".", "_current_episode_index", ",", "\n", "flush", "=", "True", ",", "\n", ")", "\n", "self", ".", "image_generator", ".", "env", ".", "reset", "(", ")", "\n", "print", "(", "\n", "\"EPISODES B \"", ",", "\n", "self", ".", "image_generator", ".", "env", ".", "_current_episode_index", ",", "\n", "flush", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.habitat_data.HabitatImageGenerator.totrain": [[95, 99], ["None"], "methods", ["None"], ["", "", "def", "totrain", "(", "self", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "self", ".", "restarted", "=", "True", "\n", "self", ".", "train", "=", "True", "\n", "self", ".", "seed", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.habitat_data.HabitatImageGenerator.toval": [[100, 105], ["None"], "methods", ["None"], ["", "def", "toval", "(", "self", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "self", ".", "restarted", "=", "True", "\n", "self", ".", "train", "=", "False", "\n", "self", ".", "val_index", "=", "0", "\n", "self", ".", "seed", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.habitat_data.HabitatImageGenerator.__getitem__": [[106, 134], ["habitat_data.HabitatImageGenerator.image_generator.get_sample", "print", "habitat_data.HabitatImageGenerator.__restart__", "habitat_data.HabitatImageGenerator.restart", "len", "len"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.data.create_rgb_dataset.RandomImageGenerator.get_sample", "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.habitat_data.HabitatImageGenerator.__restart__", "home.repos.pwc.inspect_result.crockwell_pixelsynth.data.habitat_data.HabitatImageGenerator.restart"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "not", "(", "self", ".", "train", ")", "and", "(", "self", ".", "val_index", "<", "len", "(", "self", ".", "fixed_val_images", ")", ")", ":", "\n", "            ", "if", "self", ".", "fixed_val_images", "[", "self", ".", "val_index", "]", ":", "\n", "                ", "data", "=", "self", ".", "fixed_val_images", "[", "self", ".", "val_index", "]", "\n", "self", ".", "val_index", "+=", "1", "\n", "return", "data", "\n", "\n", "", "", "if", "self", ".", "image_generator", "is", "None", ":", "\n", "            ", "print", "(", "\n", "\"Restarting image_generator.... with seed %d in train mode? %s\"", "\n", "%", "(", "self", ".", "seed", ",", "self", ".", "train", ")", ",", "\n", "flush", "=", "True", ",", "\n", ")", "\n", "self", ".", "__restart__", "(", ")", "\n", "\n", "", "if", "self", ".", "restarted", ":", "\n", "            ", "self", ".", "restart", "(", "self", ".", "train", ")", "\n", "self", ".", "restarted", "=", "False", "\n", "\n", "# Ignore the item and just generate an image", "\n", "", "data", "=", "self", ".", "image_generator", ".", "get_sample", "(", "item", ",", "self", ".", "num_views", ",", "self", ".", "train", ")", "\n", "\n", "if", "not", "(", "self", ".", "train", ")", "and", "(", "self", ".", "val_index", "<", "len", "(", "self", ".", "fixed_val_images", ")", ")", ":", "\n", "            ", "self", ".", "fixed_val_images", "[", "self", ".", "val_index", "]", "=", "data", "\n", "\n", "self", ".", "val_index", "+=", "1", "\n", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.evaluation.metrics.ssim_metric": [[6, 8], ["models.losses.ssim.ssim"], "function", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.losses.ssim.ssim"], ["def", "ssim_metric", "(", "img1", ",", "img2", ",", "mask", "=", "None", ")", ":", "\n", "    ", "return", "ssim", "(", "img1", ",", "img2", ",", "mask", "=", "mask", ",", "size_average", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.evaluation.metrics.psnr": [[11, 24], ["img1.size", "img1.size", "mse_err.view().sum", "mask.view().sum().clamp", "mse_err.view", "mask.view().sum", "mask.view"], "function", ["None"], ["", "def", "psnr", "(", "img1", ",", "img2", ",", "mask", "=", "None", ")", ":", "\n", "    ", "b", "=", "img1", ".", "size", "(", "0", ")", "\n", "if", "not", "(", "mask", "is", "None", ")", ":", "\n", "        ", "b", "=", "img1", ".", "size", "(", "0", ")", "\n", "mse_err", "=", "(", "img1", "-", "img2", ")", ".", "pow", "(", "2", ")", "*", "mask", "\n", "mse_err", "=", "mse_err", ".", "view", "(", "b", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "/", "(", "\n", "3", "*", "mask", ".", "view", "(", "b", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "clamp", "(", "min", "=", "1", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "mse_err", "=", "(", "img1", "-", "img2", ")", ".", "pow", "(", "2", ")", ".", "view", "(", "b", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "", "psnr", "=", "10", "*", "(", "1", "/", "mse_err", ")", ".", "log10", "(", ")", "\n", "return", "psnr", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.evaluation.metrics.perceptual_sim": [[27, 32], ["vgg16"], "function", ["None"], ["", "def", "perceptual_sim", "(", "img1", ",", "img2", ",", "vgg16", ")", ":", "\n", "# First extract features", "\n", "    ", "dist", "=", "vgg16", "(", "img1", "*", "2", "-", "1", ",", "img2", "*", "2", "-", "1", ")", "\n", "\n", "return", "dist", "\n", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.options.options.get_model": [[3, 19], ["print", "ZbufferModelPts", "ViewAppearanceFlow", "Tatarchenko"], "function", ["None"], ["def", "get_model", "(", "opt", ")", ":", "\n", "    ", "print", "(", "\"Loading model %s ... \"", ")", "\n", "if", "opt", ".", "model_type", "==", "\"zbuffer_pts\"", ":", "\n", "        ", "from", "models", ".", "z_buffermodel", "import", "ZbufferModelPts", "\n", "\n", "model", "=", "ZbufferModelPts", "(", "opt", ")", "\n", "", "elif", "opt", ".", "model_type", "==", "\"viewappearance\"", ":", "\n", "        ", "from", "models", ".", "encoderdecoder", "import", "ViewAppearanceFlow", "\n", "\n", "model", "=", "ViewAppearanceFlow", "(", "opt", ")", "\n", "", "elif", "opt", ".", "model_type", "==", "\"tatarchenko\"", ":", "\n", "        ", "from", "models", ".", "encoderdecoder", "import", "Tatarchenko", "\n", "\n", "model", "=", "Tatarchenko", "(", "opt", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.options.options.get_dataset": [[21, 114], ["print"], "function", ["None"], ["", "def", "get_dataset", "(", "opt", ")", ":", "\n", "\n", "    ", "print", "(", "\"Loading dataset %s ...\"", "%", "opt", ".", "dataset", ")", "\n", "if", "opt", ".", "dataset", "==", "\"mp3d\"", ":", "\n", "        ", "opt", ".", "train_data_path", "=", "(", "\n", "'/Pool1/users/cnris/'", "\n", "+", "\"habitat-api/data/datasets/pointnav/mp3d/v1/train/train.json.gz\"", "\n", ")", "\n", "opt", ".", "val_data_path", "=", "(", "\n", "'/Pool1/users/cnris/'", "\n", "+", "\"habitat-api/data/datasets/pointnav/mp3d/v1/test/test.json.gz\"", "\n", ")", "\n", "opt", ".", "test_data_path", "=", "(", "\n", "'/Pool1/users/cnris/'", "\n", "+", "\"habitat-api/data/datasets/pointnav/mp3d/v1/val/val.json.gz\"", "\n", ")", "\n", "opt", ".", "scenes_dir", "=", "'/Pool1/users/cnris/habitat-api/data/scene_datasets/mp3d/v1/tasks'", "#\"/checkpoint/ow045820/data/\" # this should store mp3d", "\n", "\n", "", "elif", "opt", ".", "dataset", "==", "\"habitat\"", ":", "\n", "        ", "opt", ".", "train_data_path", "=", "(", "\n", "'/Pool1/users/cnris/habitat-api/'", "\n", "+", "\"data/datasets/pointnav/habitat-test-scenes/v1/train/train.json.gz\"", "\n", ")", "\n", "opt", ".", "val_data_path", "=", "(", "\n", "'/Pool1/users/cnris/habitat-api/'", "\n", "+", "\"data/datasets/pointnav/habitat-test-scenes/v1/val/val.json.gz\"", "\n", ")", "\n", "opt", ".", "test_data_path", "=", "(", "\n", "'/Pool1/users/cnris/habitat-api/'", "\n", "+", "\"data/datasets/pointnav/habitat-test-scenes/v1/test/test.json.gz\"", "\n", ")", "\n", "opt", ".", "scenes_dir", "=", "\"/Pool1/users/cnris/habitat-api/data/scene_datasets\"", "\n", "#opt.config = '/Pool1/users/cnris/habitat-api/configs/tasks/pointnav_rgbd.yaml'", "\n", "", "elif", "opt", ".", "dataset", "==", "\"replica\"", ":", "\n", "        ", "opt", ".", "train_data_path", "=", "(", "\n", "\"/private/home/ow045820/projects/habitat/habitat-api/\"", "\n", "+", "\"data/datasets/pointnav/replica/v1/train/train.json.gz\"", "\n", ")", "\n", "opt", ".", "val_data_path", "=", "(", "\n", "\"/private/home/ow045820/projects/habitat/habitat-api/\"", "\n", "+", "\"data/datasets/pointnav/replica/v1/val/val.json.gz\"", "\n", ")", "\n", "opt", ".", "test_data_path", "=", "(", "\n", "\"/private/home/ow045820/projects/habitat/habitat-api/\"", "\n", "+", "\"data/datasets/pointnav/replica/v1/test/test.json.gz\"", "\n", ")", "\n", "opt", ".", "scenes_dir", "=", "\"/checkpoint/ow045820/data/replica/\"", "\n", "", "elif", "opt", ".", "dataset", "==", "\"realestate\"", ":", "\n", "        ", "opt", ".", "min_z", "=", "1.0", "\n", "opt", ".", "max_z", "=", "100.0", "\n", "opt", ".", "train_data_path", "=", "(", "\n", "'/w/cnris/RealEstate10K'", "\n", ")", "\n", "import", "os", "\n", "opt", ".", "test_data_path", "=", "(", "\n", "os", ".", "environ", "[", "\"REAL_ESTATE_10K\"", "]", "\n", ")", "\n", "if", "'use_fixed_testset'", "in", "opt", "and", "opt", ".", "use_fixed_testset", "is", "not", "None", "and", "opt", ".", "use_fixed_testset", ":", "\n", "            ", "from", "data", ".", "realestate10k", "import", "RealEstate10KFixed", "\n", "return", "RealEstate10KFixed", "\n", "", "from", "data", ".", "realestate10k", "import", "RealEstate10K", "\n", "\n", "return", "RealEstate10K", "\n", "", "elif", "opt", ".", "dataset", "==", "\"custom_realestate\"", ":", "\n", "        ", "opt", ".", "min_z", "=", "1.0", "\n", "opt", ".", "max_z", "=", "100.0", "\n", "from", "data", ".", "custom", "import", "Custom", "\n", "return", "Custom", "\n", "", "elif", "opt", ".", "dataset", "==", "\"custom_mp3d\"", ":", "\n", "        ", "from", "data", ".", "custom", "import", "Custom", "\n", "return", "Custom", "\n", "", "elif", "opt", ".", "dataset", "==", "\"test_realestate\"", ":", "\n", "        ", "opt", ".", "min_z", "=", "1.0", "\n", "opt", ".", "max_z", "=", "100.0", "\n", "from", "data", ".", "custom", "import", "CustomTest", "\n", "return", "CustomTest", "\n", "", "elif", "opt", ".", "dataset", "==", "\"test_mp3d\"", ":", "\n", "        ", "from", "data", ".", "custom", "import", "CustomTest", "\n", "return", "CustomTest", "\n", "", "elif", "opt", ".", "dataset", "==", "'kitti'", ":", "\n", "        ", "opt", ".", "min_z", "=", "1.0", "\n", "opt", ".", "max_z", "=", "50.0", "\n", "opt", ".", "train_data_path", "=", "(", "\n", "'/private/home/ow045820/projects/code/continuous_view_synthesis/datasets/dataset_kitti'", "\n", ")", "\n", "from", "data", ".", "kitti", "import", "KITTIDataLoader", "\n", "\n", "return", "KITTIDataLoader", "\n", "\n", "", "from", "data", ".", "habitat_data", "import", "HabitatImageGenerator", "as", "Dataset", "\n", "\n", "return", "Dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.options.test_options.ArgumentParser.__init__": [[7, 10], ["argparse.ArgumentParser", "test_options.ArgumentParser.add_eval_parameters"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.test_options.ArgumentParser.add_eval_parameters"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "add_eval_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.options.test_options.ArgumentParser.add_eval_parameters": [[11, 192], ["test_options.ArgumentParser.parser.add_argument_group", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument", "test_options.ArgumentParser.add_argument"], "methods", ["None"], ["", "def", "add_eval_parameters", "(", "self", ")", ":", "\n", "        ", "eval_params", "=", "self", ".", "parser", ".", "add_argument_group", "(", "\"eval\"", ")", "\n", "\n", "eval_params", ".", "add_argument", "(", "\"--old_model\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "eval_params", ".", "add_argument", "(", "\"--short_name\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "eval_params", ".", "add_argument", "(", "\"--result_folder\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "eval_params", ".", "add_argument", "(", "\"--test_folder\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "eval_params", ".", "add_argument", "(", "\"--model_setting\"", ",", "type", "=", "str", ",", "choices", "=", "(", "\"train\"", ",", "\"gen_paired_img\"", ",", "\"gen_img\"", ",", "\"gen_scene\"", ",", "'get_gen_order'", ",", "'gen_two_imgs'", ")", ",", "default", "=", "\"train\"", ")", "\n", "eval_params", ".", "add_argument", "(", "\"--dataset_folder\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "eval_params", ".", "add_argument", "(", "\"--demo_img_name\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "eval_params", ".", "add_argument", "(", "\"--gt_folder\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "eval_params", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "eval_params", ".", "add_argument", "(", "\"--num_views\"", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "eval_params", ".", "add_argument", "(", "\"--num_workers\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--sampling_mixture_temp\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "\"mixture sampling temperature\"", ",", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--num_samples\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "\"num samples from which to optimize\"", ",", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--sampling_logistic_temp\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "\"logistic sampling temperature\"", ",", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--temperature\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "\"temperature for vqvae\"", ",", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--temp_eps\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.05", ",", "\n", "help", "=", "\"max / min temp (distance from 0 & 1) when drawing during sampling\"", ",", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--rotation\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.3", ",", "\n", "help", "=", "\"rotation (in radians) of camera for image generation\"", ",", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--decoder_truncation_threshold\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "2", ",", "\n", "help", "=", "\"resample if value above this drawn for decoder sampling\"", ",", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--homography\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--load_autoregressive\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\"--no_outpainting\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--render_ids\"", ",", "type", "=", "int", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "1", "]", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--directions\"", ",", "type", "=", "str", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "]", ",", "help", "=", "\"directions for scene generation\"", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--direction\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"direction for image generation\"", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--background_smoothing_kernel_size\"", ",", "type", "=", "int", ",", "default", "=", "13", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--normalize_before_residual\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--sequential_outpainting\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--pretrain\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--val_rotation\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "\"size of rotation in single l/r direction in degrees for validation\"", ",", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--num_visualize_imgs\"", ",", "type", "=", "int", ",", "default", "=", "10", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--eval_iters\"", ",", "type", "=", "int", ",", "default", "=", "3600", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--eval_real_estate\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--intermediate\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--gen_fs\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--gen_order\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--gt_histogram\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"rgb\"", ",", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--pred_histogram\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"rgb\"", ",", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--image_type\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"both\"", ",", "\n", "choices", "=", "(", "\n", "\"both\"", "\n", ")", ",", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\"--gpu_ids\"", ",", "type", "=", "str", ",", "default", "=", "\"0\"", ")", "\n", "eval_params", ".", "add_argument", "(", "\"--images_before_reset\"", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--test_input_image\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--use_custom_testset\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--use_fixed_testset\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--use_videos\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\"--autoregressive\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--num_split\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'number to split autoregressive steps into'", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--vqvae\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--load_vqvae\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\"--vqvae_path\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "eval_params", ".", "add_argument", "(", "\"--use_gt\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "eval_params", ".", "add_argument", "(", "\"--save_data\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "eval_params", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--use_higher_res\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--use_3_discrim\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--max_rotation\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "\"size of rotation in single l/r direction in degrees (double for max difference)\"", ",", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--num_beam_samples\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "\"number of samples per beam\"", ",", "\n", ")", "\n", "eval_params", ".", "add_argument", "(", "\n", "\"--num_beams\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "\"number of beams to sample\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.options.test_options.ArgumentParser.parse": [[194, 209], ["test_options.ArgumentParser.parser.parse_args", "test_options.ArgumentParser.parser.parse_args", "arg_str.split", "getattr"], "methods", ["None"], ["", "def", "parse", "(", "self", ",", "arg_str", "=", "None", ")", ":", "\n", "        ", "if", "arg_str", "is", "None", ":", "\n", "            ", "args", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "", "else", ":", "\n", "            ", "args", "=", "self", ".", "parser", ".", "parse_args", "(", "arg_str", ".", "split", "(", ")", ")", "\n", "\n", "", "arg_groups", "=", "{", "}", "\n", "for", "group", "in", "self", ".", "parser", ".", "_action_groups", ":", "\n", "            ", "group_dict", "=", "{", "\n", "a", ".", "dest", ":", "getattr", "(", "args", ",", "a", ".", "dest", ",", "None", ")", "\n", "for", "a", "in", "group", ".", "_group_actions", "\n", "}", "\n", "arg_groups", "[", "group", ".", "title", "]", "=", "group_dict", "\n", "\n", "", "return", "(", "args", ",", "arg_groups", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.__init__": [[10, 17], ["argparse.ArgumentParser", "train_options.ArgumentParser.add_data_parameters", "train_options.ArgumentParser.add_train_parameters", "train_options.ArgumentParser.add_model_parameters"], "methods", ["home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.add_data_parameters", "home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.add_train_parameters", "home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.add_model_parameters"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"self-supervised view synthesis\"", "\n", ")", "\n", "self", ".", "add_data_parameters", "(", ")", "\n", "self", ".", "add_train_parameters", "(", ")", "\n", "self", ".", "add_model_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.add_model_parameters": [[18, 163], ["train_options.ArgumentParser.parser.add_argument_group", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument"], "methods", ["None"], ["", "def", "add_model_parameters", "(", "self", ")", ":", "\n", "        ", "model_params", "=", "self", ".", "parser", ".", "add_argument_group", "(", "\"model\"", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--model_type\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"zbuffer_pts\"", ",", "\n", "choices", "=", "(", "\n", "\"zbuffer_pts\"", ",", "\n", "\"deepvoxels\"", ",", "\n", "\"viewappearance\"", ",", "\n", "\"tatarchenko\"", ",", "\n", ")", ",", "\n", "help", "=", "'Model to be used.'", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--refine_model_type\"", ",", "type", "=", "str", ",", "default", "=", "\"unet\"", ",", "\n", "help", "=", "\"Model to be used for the refinement network and the feature encoder.\"", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--accumulation\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"wsum\"", ",", "\n", "choices", "=", "(", "\"wsum\"", ",", "\"wsumnorm\"", ",", "\"alphacomposite\"", ")", ",", "\n", "help", "=", "\"Method for accumulating points in the z-buffer. Three choices: wsum (weighted sum), wsumnorm (normalised weighted sum), alpha composite (alpha compositing)\"", "\n", ")", "\n", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--depth_predictor_type\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"unet\"", ",", "\n", "choices", "=", "(", "\"unet\"", ",", "\"hourglass\"", ",", "\"true_hourglass\"", ")", ",", "\n", "help", "=", "'Model for predicting depth'", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--no_outpainting\"", ",", "\n", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", "help", "=", "'if true, does not explicitly outpaint (similar to SynSin and others)'", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--predict_residual\"", ",", "\n", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", "help", "=", "'if true, predict residual from upsampled image'", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--vqvae\"", ",", "\n", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", "help", "=", "'if true, predict down and upsample using vqvae'", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--splatter\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"xyblending\"", ",", "\n", "choices", "=", "(", "\"xyblending\"", ")", ",", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\"--rad_pow\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'Exponent to raise the radius to when computing distance (default is euclidean, when rad_pow=2). '", ")", "\n", "model_params", ".", "add_argument", "(", "\"--num_views\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'Number of views considered per input image (inlcluding input), we only use num_views=2 (1 target view).'", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--crop_size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "256", ",", "\n", "help", "=", "\"Crop to the width of crop_size (after initially scaling the images to load_size.)\"", ",", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--aspect_ratio\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "\"The ratio width/height. The final height of the load image will be crop_size/aspect_ratio\"", ",", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--norm_D\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"spectralinstance\"", ",", "\n", "help", "=", "\"instance normalization or batch normalization\"", ",", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--noise\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "choices", "=", "(", "\"style\"", ",", "\"\"", ")", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--learn_default_feature\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "True", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--use_camera\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "\n", "model_params", ".", "add_argument", "(", "\"--pp_pixel\"", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'K: the number of points to conisder in the z-buffer.'", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\"--tau\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'gamma: the power to raise the distance to.'", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--use_gt_depth\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--train_depth\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--only_high_res\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--normalize_before_residual\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--use_inverse_depth\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true the depth is sampled as a long tail distribution, else the depth is sampled uniformly. Set to true if the dataset has points that are very far away (e.g. a dataset with landscape images, such as KITTI).'", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--ndf\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "64", ",", "\n", "help", "=", "\"# of discrim filters in first conv layer\"", ",", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--use_xys\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--output_nc\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "3", ",", "\n", "help", "=", "\"# of output image channels\"", ",", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\"--norm_G\"", ",", "type", "=", "str", ",", "default", "=", "\"batch\"", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--ngf\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "64", ",", "\n", "help", "=", "\"# of gen filters in first conv layer\"", ",", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--radius\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "4", ",", "\n", "help", "=", "\"Radius of points to project\"", ",", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--voxel_size\"", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "\"Size of latent voxels\"", "\n", ")", "\n", "model_params", ".", "add_argument", "(", "\n", "\"--num_upsampling_layers\"", ",", "\n", "choices", "=", "(", "\"normal\"", ",", "\"more\"", ",", "\"most\"", ")", ",", "\n", "default", "=", "\"normal\"", ",", "\n", "help", "=", "\"If 'more', adds upsampling layer between the two middle resnet blocks. \"", "\n", "+", "\"If 'most', also add one more upsampling + resnet layer at the end of the generator\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.add_data_parameters": [[165, 219], ["train_options.ArgumentParser.parser.add_argument_group", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument"], "methods", ["None"], ["", "def", "add_data_parameters", "(", "self", ")", ":", "\n", "        ", "dataset_params", "=", "self", ".", "parser", ".", "add_argument_group", "(", "\"data\"", ")", "\n", "dataset_params", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "default", "=", "\"mp3d\"", ")", "\n", "dataset_params", ".", "add_argument", "(", "\n", "\"--use_semantics\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "dataset_params", ".", "add_argument", "(", "\n", "\"--config\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"/private/home/ow045820/projects/habitat/habitat-api/configs/tasks/pointnav_rgbd.yaml\"", ",", "\n", ")", "\n", "dataset_params", ".", "add_argument", "(", "\n", "\"--result_folder\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "dataset_params", ".", "add_argument", "(", "\n", "\"--current_episode_train\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", "\n", ")", "\n", "dataset_params", ".", "add_argument", "(", "\n", "\"--current_episode_val\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", "\n", ")", "\n", "dataset_params", ".", "add_argument", "(", "\"--min_z\"", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "dataset_params", ".", "add_argument", "(", "\"--max_z\"", ",", "type", "=", "float", ",", "default", "=", "10.0", ")", "\n", "dataset_params", ".", "add_argument", "(", "\"--W\"", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "dataset_params", ".", "add_argument", "(", "\n", "\"--images_before_reset\"", ",", "type", "=", "int", ",", "default", "=", "1000", "\n", ")", "\n", "dataset_params", ".", "add_argument", "(", "\n", "\"--image_type\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"both\"", ",", "\n", "choices", "=", "(", "\n", "\"both\"", ",", "\n", "\"translation\"", ",", "\n", "\"rotation\"", ",", "\n", "\"outpaint\"", ",", "\n", "\"fixedRT_baseline\"", ",", "\n", ")", ",", "\n", ")", "\n", "dataset_params", ".", "add_argument", "(", "\n", "\"--use_z\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "dataset_params", ".", "add_argument", "(", "\n", "\"--use_inv_z\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "dataset_params", ".", "add_argument", "(", "\n", "\"--use_rgb_features\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "dataset_params", ".", "add_argument", "(", "\n", "\"--use_alpha\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "dataset_params", ".", "add_argument", "(", "\n", "\"--normalize_image\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.add_train_parameters": [[221, 368], ["train_options.ArgumentParser.parser.add_argument_group", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument", "train_options.ArgumentParser.add_argument"], "methods", ["None"], ["", "def", "add_train_parameters", "(", "self", ")", ":", "\n", "        ", "training", "=", "self", ".", "parser", ".", "add_argument_group", "(", "\"training\"", ")", "\n", "training", ".", "add_argument", "(", "\"--num_workers\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "training", ".", "add_argument", "(", "\"--start-epoch\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "training", ".", "add_argument", "(", "\"--num-accumulations\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "training", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-3", ")", "\n", "training", ".", "add_argument", "(", "\"--lr_d\"", ",", "type", "=", "float", ",", "default", "=", "1e-3", "*", "2", ")", "\n", "training", ".", "add_argument", "(", "\"--lr_g\"", ",", "type", "=", "float", ",", "default", "=", "1e-3", "/", "2", ")", "\n", "training", ".", "add_argument", "(", "\"--momentum\"", ",", "type", "=", "float", ",", "default", "=", "0.9", ")", "\n", "training", ".", "add_argument", "(", "\"--beta1\"", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "training", ".", "add_argument", "(", "\"--beta2\"", ",", "type", "=", "float", ",", "default", "=", "0.9", ")", "\n", "training", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "training", ".", "add_argument", "(", "\"--init\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "\n", "training", ".", "add_argument", "(", "\n", "\"--use_multi_hypothesis\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "training", ".", "add_argument", "(", "\n", "\"--background_smoothing_kernel_size\"", ",", "type", "=", "int", ",", "default", "=", "13", "\n", ")", "\n", "\n", "training", ".", "add_argument", "(", "\n", "\"--pretrain\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "training", ".", "add_argument", "(", "\"--num_hypothesis\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "training", ".", "add_argument", "(", "\"--z_dim\"", ",", "type", "=", "int", ",", "default", "=", "128", ")", "\n", "training", ".", "add_argument", "(", "\n", "\"--netD\"", ",", "type", "=", "str", ",", "default", "=", "\"multiscale\"", ",", "help", "=", "\"(multiscale)\"", "\n", ")", "\n", "training", ".", "add_argument", "(", "\n", "\"--niter\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "\"# of iter at starting learning rate. This is NOT the total #epochs.\"", "\n", "+", "\" Total #epochs is niter + niter_decay\"", ",", "\n", ")", "\n", "training", ".", "add_argument", "(", "\n", "\"--niter_decay\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "\"# of iter at starting learning rate. This is NOT the total #epochs.\"", "\n", "+", "\" Totla #epochs is niter + niter_decay\"", ",", "\n", ")", "\n", "training", ".", "add_argument", "(", "\n", "\"--max_rotation\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "\"starting size of training rotation. Multiply by 2 to get Matterport max Euler rotation, divide by 2 to get RealEstate min total rotation\"", ",", "\n", ")", "\n", "training", ".", "add_argument", "(", "\n", "\"--val_rotation\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "\"size of val rotation. Multiply by 2 to get Matterport max Euler rotation, divide by 2 to get RealEstate min total rotation\"", ",", "\n", ")", "\n", "training", ".", "add_argument", "(", "\n", "\"--curriculum\"", ",", "\n", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", "help", "=", "\"if true, increases angle of rotation by 20 degrees (matterport) / 5 degrees RealEstate every 25k it (50 epoch) up to the val rotation\"", ",", "\n", ")", "\n", "training", ".", "add_argument", "(", "\n", "\"--Unet_num_filters\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "32", ",", "\n", "help", "=", "\"number filters for depth predictor first layer\"", ",", "\n", ")", "\n", "training", ".", "add_argument", "(", "\n", "\"--losses\"", ",", "type", "=", "str", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "'1.0_l1'", ",", "'10.0_content'", "]", "\n", ")", "\n", "training", ".", "add_argument", "(", "\n", "\"--discriminator_losses\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"pix2pixHD\"", ",", "\n", "help", "=", "\"(|pix2pixHD|progressive)\"", ",", "\n", ")", "\n", "training", ".", "add_argument", "(", "\"--model_setting\"", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "(", "\"train\"", ",", "\"gen_paired_img\"", ",", "\"gen_img\"", ",", "\"gen_scene\"", ",", "'get_gen_order'", ")", ",", "\n", "default", "=", "\"train\"", ")", "\n", "training", ".", "add_argument", "(", "\"--dataset_folder\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "training", ".", "add_argument", "(", "\n", "\"--lambda_feat\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "10.0", ",", "\n", "help", "=", "\"weight for feature matching loss\"", ",", "\n", ")", "\n", "training", ".", "add_argument", "(", "\n", "\"--gan_mode\"", ",", "type", "=", "str", ",", "default", "=", "\"hinge\"", ",", "help", "=", "\"(ls|original|hinge)\"", "\n", ")", "\n", "\n", "training", ".", "add_argument", "(", "\n", "\"--load_old_model\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "training", ".", "add_argument", "(", "\n", "\"--load_autoregressive\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "training", ".", "add_argument", "(", "\n", "\"--load_vqvae\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", ")", "\n", "training", ".", "add_argument", "(", "\"--vqvae_path\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "training", ".", "add_argument", "(", "\n", "\"--load-old-depth-model\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", "\n", ")", "\n", "training", ".", "add_argument", "(", "\"--old_model\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "training", ".", "add_argument", "(", "\"--autoregressive\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "training", ".", "add_argument", "(", "\"--old_depth_model\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "\n", "training", ".", "add_argument", "(", "\n", "\"--no_ganFeat_loss\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"if specified, do *not* use discriminator feature matching loss\"", ",", "\n", ")", "\n", "training", ".", "add_argument", "(", "\n", "\"--no_vgg_loss\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"if specified, do *not* use VGG feature matching loss\"", ",", "\n", ")", "\n", "\n", "training", ".", "add_argument", "(", "\"--resume\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "\n", "training", ".", "add_argument", "(", "\n", "\"--log-dir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"/checkpoint/ow045820/logging/viewsynthesis3d/%s/\"", ",", "\n", ")", "\n", "\n", "training", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "training", ".", "add_argument", "(", "\"--continue_epoch\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "training", ".", "add_argument", "(", "\"--max_epoch\"", ",", "type", "=", "int", ",", "default", "=", "500", ")", "\n", "training", ".", "add_argument", "(", "\"--folder_to_save\"", ",", "type", "=", "str", ",", "default", "=", "\"outpaint\"", ")", "\n", "training", ".", "add_argument", "(", "\n", "\"--model-epoch-path\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"/%s/%s/models/lr%0.5f_bs%d_model%s_spl%s/noise%s_bn%s_ref%s_d%s_\"", "\n", "+", "\"camxys%s/_init%s_data%s_seed%d/_multi%s_losses%s_i%s_%s_vol_gan%s/\"", ",", "\n", ")", "\n", "training", ".", "add_argument", "(", "\n", "\"--run-dir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"/%s/%s/runs/lr%0.5f_bs%d_model%s_spl%s/noise%s_bn%s_ref%s_d%s_\"", "\n", "+", "\"camxys%s/_init%s_data%s_seed%d/_multi%s_losses%s_i%s_%s_vol_gan%s/\"", ",", "\n", ")", "\n", "training", ".", "add_argument", "(", "\"--suffix\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "training", ".", "add_argument", "(", "\n", "\"--render_ids\"", ",", "type", "=", "int", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "0", ",", "1", "]", "\n", ")", "\n", "training", ".", "add_argument", "(", "\"--gpu_ids\"", ",", "type", "=", "str", ",", "default", "=", "\"0\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.ArgumentParser.parse": [[369, 384], ["train_options.ArgumentParser.parser.parse_args", "train_options.ArgumentParser.parser.parse_args", "arg_str.split", "getattr"], "methods", ["None"], ["", "def", "parse", "(", "self", ",", "arg_str", "=", "None", ")", ":", "\n", "        ", "if", "arg_str", "is", "None", ":", "\n", "            ", "args", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "", "else", ":", "\n", "            ", "args", "=", "self", ".", "parser", ".", "parse_args", "(", "arg_str", ".", "split", "(", ")", ")", "\n", "\n", "", "arg_groups", "=", "{", "}", "\n", "for", "group", "in", "self", ".", "parser", ".", "_action_groups", ":", "\n", "            ", "group_dict", "=", "{", "\n", "a", ".", "dest", ":", "getattr", "(", "args", ",", "a", ".", "dest", ",", "None", ")", "\n", "for", "a", "in", "group", ".", "_group_actions", "\n", "}", "\n", "arg_groups", "[", "group", ".", "title", "]", "=", "group_dict", "\n", "\n", "", "return", "(", "args", ",", "arg_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.get_timestamp": [[386, 391], ["time.time", "datetime.datetime.fromtimestamp().strftime", "datetime.datetime.fromtimestamp"], "function", ["None"], ["", "", "def", "get_timestamp", "(", ")", ":", "\n", "    ", "ts", "=", "time", ".", "time", "(", ")", "\n", "st", "=", "datetime", ".", "datetime", ".", "fromtimestamp", "(", "ts", ")", ".", "strftime", "(", "\"%Y-%m-%d\"", ")", "\n", "st", "=", "\"2020-03-01\"", "\n", "return", "st", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.get_log_path": [[393, 424], ["str", "str"], "function", ["None"], ["", "def", "get_log_path", "(", "timestamp", ",", "opts", ")", ":", "\n", "    ", "inputs", "=", "\"z\"", "+", "str", "(", "opts", ".", "use_z", ")", "+", "\"_alpha\"", "+", "str", "(", "opts", ".", "use_alpha", ")", "\n", "return", "'log/'", "+", "opts", ".", "dataset", "+", "'/'", "+", "opts", ".", "folder_to_save", "+", "'/'", "\n", "'''\n    return (\n        opts.log_dir % (opts.dataset)\n        + \"/%s/\"\n        + opts.run_dir\n        % (\n            timestamp,\n            opts.folder_to_save,\n            opts.lr,\n            opts.batch_size,\n            opts.model_type,\n            opts.splatter,\n            opts.noise,\n            opts.norm_G,\n            opts.refine_model_type,\n            opts.depth_predictor_type,\n            (str(opts.use_camera) + \"|\" + str(opts.use_xys)),\n            opts.init,\n            opts.image_type,\n            opts.seed,\n            str(opts.use_multi_hypothesis),\n            \"\".join(opts.losses).replace(\"_\", \"|\"),\n            inputs,\n            opts.suffix,\n            opts.discriminator_losses,\n        )\n    )\n    '''", "\n", "\n"]], "home.repos.pwc.inspect_result.crockwell_pixelsynth.options.train_options.get_model_path": [[427, 456], ["str", "os.path.exists", "os.makedirs", "str", "str", "str", "str"], "function", ["None"], ["", "def", "get_model_path", "(", "timestamp", ",", "opts", ")", ":", "\n", "    ", "inputs", "=", "\"z\"", "+", "str", "(", "opts", ".", "use_z", ")", "+", "\"_alpha\"", "+", "str", "(", "opts", ".", "use_alpha", ")", "\n", "model_path", "=", "opts", ".", "log_dir", "%", "(", "opts", ".", "dataset", ")", "+", "opts", ".", "model_epoch_path", "%", "(", "\n", "timestamp", ",", "\n", "opts", ".", "folder_to_save", ",", "\n", "opts", ".", "lr", ",", "\n", "opts", ".", "batch_size", ",", "\n", "opts", ".", "model_type", ",", "\n", "opts", ".", "splatter", ",", "\n", "opts", ".", "noise", ",", "\n", "opts", ".", "norm_G", ",", "\n", "opts", ".", "refine_model_type", ",", "\n", "opts", ".", "depth_predictor_type", ",", "\n", "(", "str", "(", "opts", ".", "use_camera", ")", "+", "\"|\"", "+", "str", "(", "opts", ".", "use_xys", ")", ")", ",", "\n", "opts", ".", "init", ",", "\n", "opts", ".", "image_type", ",", "\n", "opts", ".", "seed", ",", "\n", "str", "(", "opts", ".", "use_multi_hypothesis", ")", ",", "\n", "\"\"", ".", "join", "(", "opts", ".", "losses", ")", ".", "replace", "(", "\"_\"", ",", "\"|\"", ")", ",", "\n", "inputs", ",", "\n", "opts", ".", "suffix", ",", "\n", "opts", ".", "discriminator_losses", ",", "\n", ")", "\n", "#print(model_path)", "\n", "model_path", "=", "(", "'log/'", "+", "opts", ".", "dataset", "+", "'/'", "+", "opts", ".", "folder_to_save", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "model_path", ")", "\n", "\n", "", "return", "model_path", "+", "\"/model_epoch.pth\"", "\n", "", ""]]}