{"home.repos.pwc.inspect_result.shelhamer_revolver.None.evaluate.evaluate": [[18, 65], ["print", "str", "torch.device", "torch.device", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "prepare_data", "revolver.data.prepare_loader", "revolver.model.prepare_model().to", "prepare_model().to.eval", "torch.CrossEntropyLoss", "revolver.metrics.SegScorer", "print", "revolver.metrics.SegScorer.score().items", "len", "torch.no_grad", "torch.no_grad", "enumerate", "numpy.nanmean", "print", "revolver.metrics.SegScorer.save", "revolver.model.prepare_model", "target.to.to", "prepare_model().to.", "nn.CrossEntropyLoss.", "loss_fn.item", "model.data[].max", "revolver.metrics.SegScorer.update", "revolver.metrics.SegScorer.score", "Image.fromarray.to().numpy", "target.to.to().numpy", "PIL.Image.fromarray", "Image.fromarray.save", "len", "inp.to", "Image.fromarray.to().numpy().astype", "isinstance", "Image.fromarray.to", "target.to.to", "aux.get", "aux.get", "i_.to", "Image.fromarray.to().numpy", "Image.fromarray.to"], "function", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.prepare_loader", "home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.save", "home.repos.pwc.inspect_result.shelhamer_revolver.model.__init__.prepare_model", "home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.update", "home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.score", "home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.save"], ["def", "evaluate", "(", "model", ",", "weights", ",", "dataset", ",", "datatype", ",", "split", ",", "count", ",", "shot", ",", "seed", ",", "gpu", ",", "hist_path", ",", "seg_path", ")", ":", "\n", "    ", "print", "(", "\"evaluating {} with weights {} on {} {}-{}\"", ".", "format", "(", "model", ",", "weights", ",", "datatype", ",", "dataset", ",", "split", ")", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "str", "(", "gpu", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "prepare_data", "=", "datatypes", "[", "datatype", "]", "\n", "dataset", "=", "prepare_data", "(", "dataset", ",", "split", ",", "count", "=", "count", ",", "shot", "=", "shot", ")", "\n", "loader", "=", "prepare_loader", "(", "dataset", ",", "evaluation", "=", "True", ")", "\n", "\n", "model", "=", "prepare_model", "(", "model", ",", "dataset", ".", "num_classes", ",", "weights", "=", "weights", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'mean'", ",", "ignore_index", "=", "dataset", ".", "ignore_index", ")", "\n", "\n", "total_loss", "=", "0.", "\n", "metrics", "=", "SegScorer", "(", "len", "(", "dataset", ".", "classes", ")", ")", "# n.b. this is the full no. of classes, not the no. of model outputs", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "data", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "inputs", ",", "target", ",", "aux", "=", "data", "[", ":", "-", "2", "]", ",", "data", "[", "-", "2", "]", ",", "data", "[", "-", "1", "]", "\n", "inputs", "=", "[", "inp", ".", "to", "(", "device", ")", "if", "not", "isinstance", "(", "inp", ",", "list", ")", "else", "\n", "[", "[", "i_", ".", "to", "(", "device", ")", "for", "i_", "in", "in_", "]", "for", "in_", "in", "inp", "]", "for", "inp", "in", "inputs", "]", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "\n", "scores", "=", "model", "(", "*", "inputs", ")", "\n", "loss", "=", "loss_fn", "(", "scores", ",", "target", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "# segmentation evaluation", "\n", "_", ",", "seg", "=", "scores", ".", "data", "[", "0", "]", ".", "max", "(", "0", ")", "\n", "metrics", ".", "update", "(", "seg", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", ",", "target", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", ",", "aux", ")", "\n", "# optionally save segs", "\n", "if", "seg_path", "is", "not", "None", ":", "\n", "                ", "seg", "=", "Image", ".", "fromarray", "(", "seg", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", ",", "mode", "=", "'P'", ")", "\n", "save_id", "=", "f\"{aux['slug']}_{aux.get('cls', 'all')}_{aux.get('inst', 'all')}\"", "\n", "seg", ".", "save", "(", "f\"{seg_path}/{save_id}.png\"", ")", "\n", "\n", "", "", "", "print", "(", "\"loss {}\"", ".", "format", "(", "total_loss", "/", "len", "(", "dataset", ")", ")", ")", "\n", "for", "metric", ",", "score", "in", "metrics", ".", "score", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "score", "=", "np", ".", "nanmean", "(", "score", ")", "\n", "print", "(", "\"{:10s} {:.3f}\"", ".", "format", "(", "metric", ",", "score", ")", ")", "\n", "\n", "", "if", "hist_path", "is", "not", "None", ":", "\n", "        ", "metrics", ".", "save", "(", "hist_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.None.evaluate.main": [[67, 114], ["click.command", "click.argument", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "setproctitle.setproctitle", "locals", "print", "os.path.isdir", "Exception", "sorted", "re.search().group", "os.path.isfile", "evaluate.evaluate", "click.Choice", "click.Path", "click.Choice", "click.Choice", "glob.glob", "output_fmt.format", "os.makedirs", "print", "revolver.model.models.keys", "revolver.data.datasets.keys", "revolver.data.datatypes.keys", "re.search", "output_fmt.format"], "function", ["home.repos.pwc.inspect_result.shelhamer_revolver.None.evaluate.evaluate"], ["", "", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "argument", "(", "'experiment'", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "'--model'", ",", "type", "=", "click", ".", "Choice", "(", "models", ".", "keys", "(", ")", ")", ")", "\n", "@", "click", ".", "option", "(", "'--weights'", ",", "type", "=", "click", ".", "Path", "(", ")", ")", "\n", "@", "click", ".", "option", "(", "'--dataset'", ",", "type", "=", "click", ".", "Choice", "(", "datasets", ".", "keys", "(", ")", ")", ",", "default", "=", "'voc'", ")", "\n", "@", "click", ".", "option", "(", "'--datatype'", ",", "type", "=", "click", ".", "Choice", "(", "datatypes", ".", "keys", "(", ")", ")", ",", "default", "=", "'semantic'", ")", "\n", "@", "click", ".", "option", "(", "'--split'", ",", "type", "=", "str", ",", "default", "=", "'valid'", ")", "\n", "@", "click", ".", "option", "(", "'--count'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "@", "click", ".", "option", "(", "'--shot'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "@", "click", ".", "option", "(", "'--save_seg'", ",", "is_flag", "=", "True", ",", "default", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'--seed'", ",", "default", "=", "1337", ")", "\n", "@", "click", ".", "option", "(", "'--gpu'", ",", "default", "=", "0", ")", "\n", "def", "main", "(", "experiment", ",", "model", ",", "weights", ",", "dataset", ",", "datatype", ",", "split", ",", "count", ",", "shot", ",", "save_seg", ",", "seed", ",", "gpu", ")", ":", "\n", "    ", "setproctitle", ".", "setproctitle", "(", "\"eval-{}\"", ".", "format", "(", "experiment", ")", ")", "\n", "args", "=", "locals", "(", ")", "\n", "print", "(", "\"args: {}\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "exp_dir", "=", "'./experiments/{}/'", ".", "format", "(", "experiment", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "exp_dir", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"Experiment {} does not exist.\"", ".", "format", "(", "experiment", ")", ")", "\n", "\n", "", "if", "weights", ":", "\n", "# evaluate given model", "\n", "        ", "evaluations", "=", "[", "weights", "]", "\n", "", "else", ":", "\n", "# evaluate all models in iteration order", "\n", "# but skip existing evaluations", "\n", "        ", "evaluations", "=", "sorted", "(", "glob", ".", "glob", "(", "exp_dir", "+", "'*.pth'", ")", ")", "\n", "\n", "# template the output path", "\n", "", "count_", "=", "'dense'", "if", "count", "==", "-", "1", "else", "\"{}sparse\"", ".", "format", "(", "count", ")", "if", "count", "else", "'randsparse'", "\n", "output_fmt", "=", "'-{}-{}-{}-{}-{}shot-{}'", ".", "format", "(", "dataset", ",", "datatype", ",", "split", ",", "count_", ",", "shot", ",", "seed", ")", "\n", "output_fmt", "=", "model", "+", "'-iter{}'", "+", "output_fmt", "\n", "\n", "for", "weights", "in", "evaluations", ":", "\n", "# make output path", "\n", "        ", "iter_", "=", "re", ".", "search", "(", "'iter(\\d+).pth'", ",", "weights", ")", ".", "group", "(", "1", ")", "\n", "hist_path", "=", "exp_dir", "+", "'hist-'", "+", "output_fmt", ".", "format", "(", "iter_", ")", "\n", "seg_path", "=", "None", "\n", "if", "save_seg", ":", "\n", "            ", "seg_path", "=", "exp_dir", "+", "output_fmt", ".", "format", "(", "iter_", ")", "\n", "os", ".", "makedirs", "(", "seg_path", ",", "exist_ok", "=", "True", ")", "\n", "# skip existing", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "hist_path", "+", "'.npz'", ")", ":", "\n", "            ", "print", "(", "\"skipping existing {}\"", ".", "format", "(", "hist_path", ")", ")", "\n", "continue", "\n", "", "evaluate", "(", "model", ",", "weights", ",", "dataset", ",", "datatype", ",", "split", ",", "count", ",", "shot", ",", "seed", ",", "gpu", ",", "hist_path", ",", "seg_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.None.train.pevaluate": [[23, 32], ["q.get", "evaluate.evaluate", "q.task_done", "q.task_done"], "function", ["home.repos.pwc.inspect_result.shelhamer_revolver.None.evaluate.evaluate"], ["def", "pevaluate", "(", "q", ")", ":", "\n", "# keep evaluating from the queue until done as signalled by None", "\n", "    ", "while", "True", ":", "\n", "        ", "args", "=", "q", ".", "get", "(", ")", "\n", "if", "args", "is", "None", ":", "\n", "            ", "q", ".", "task_done", "(", ")", "\n", "break", "\n", "", "evaluate", "(", "*", "args", ")", "\n", "q", ".", "task_done", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.None.train.main": [[34, 162], ["click.command", "click.argument", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "setproctitle.setproctitle", "subprocess.check_output().strip", "locals", "os.path.isdir", "str", "torch.device", "torch.device", "torch.device", "torch.device", "logging.basicConfig", "logging.getLogger().addHandler", "logging.info", "logging.info", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "prepare_data", "revolver.data.prepare_loader", "revolver.model.prepare_model().cuda", "torch.CrossEntropyLoss", "filter", "torch.SGD", "int", "prepare_model().cuda.train", "click.confirm", "shutil.rmtree", "os.makedirs", "logging.StreamHandler", "torch.get_context", "multiprocessing.get_context.JoinableQueue", "multiprocessing.get_context.Process", "mp_ctx.Process.start", "int", "range", "list", "prepare_model().cuda.parameters", "logging.info", "enumerate", "logging.info", "mp_ctx.JoinableQueue.put", "click.Choice", "click.Choice", "click.Choice", "click.Choice", "click.Choice", "int", "subprocess.check_output", "click.style", "Exception", "logging.getLogger", "len", "revolver.model.prepare_model", "numpy.log10", "target.to.to", "prepare_model().cuda.", "nn.CrossEntropyLoss.", "loss_fn.backward", "loss_fn.item", "losses.append", "optim.SGD.step", "optim.SGD.zero_grad", "revolver.model.models.keys", "revolver.data.datasets.keys", "revolver.data.datatypes.keys", "revolver.data.datasets.keys", "set", "set", "loss_fn.item", "logging.info", "logging.info", "torch.save", "torch.save", "torch.save", "torch.save", "range", "inp.to", "prepare_model().cuda.state_dict", "logging.info", "mp_ctx.JoinableQueue.put", "len", "len", "isinstance", "mp_ctx.JoinableQueue.join", "i_.to", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.prepare_loader", "home.repos.pwc.inspect_result.shelhamer_revolver.model.__init__.prepare_model", "home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.save", "home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.save", "home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.save", "home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.save"], ["", "", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "argument", "(", "'experiment'", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "'--model'", ",", "type", "=", "click", ".", "Choice", "(", "models", ".", "keys", "(", ")", ")", ")", "\n", "@", "click", ".", "option", "(", "'--dataset'", ",", "type", "=", "click", ".", "Choice", "(", "datasets", ".", "keys", "(", ")", ")", ",", "default", "=", "'sbdd'", ")", "\n", "@", "click", ".", "option", "(", "'--datatype'", ",", "type", "=", "click", ".", "Choice", "(", "datatypes", ".", "keys", "(", ")", ")", ",", "default", "=", "'semantic'", ")", "\n", "@", "click", ".", "option", "(", "'--split'", ",", "type", "=", "str", ",", "default", "=", "'train'", ")", "\n", "@", "click", ".", "option", "(", "'--val_dataset'", ",", "type", "=", "click", ".", "Choice", "(", "datasets", ".", "keys", "(", ")", ")", ",", "default", "=", "'sbdd'", ")", "\n", "@", "click", ".", "option", "(", "'--val_split'", ",", "type", "=", "str", ",", "default", "=", "'val'", ")", "\n", "@", "click", ".", "option", "(", "'--class_group'", ",", "type", "=", "click", ".", "Choice", "(", "[", "'all'", ",", "'0'", ",", "'1'", ",", "'2'", ",", "'3'", "]", ")", ",", "default", "=", "'all'", ")", "\n", "@", "click", ".", "option", "(", "'--count'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "# -1 -> dense, None -> random in [0, 100], >= 1 -> count", "\n", "@", "click", ".", "option", "(", "'--shot'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "@", "click", ".", "option", "(", "'--lr'", ",", "default", "=", "1e-5", ")", "\n", "@", "click", ".", "option", "(", "'--max_iter'", ",", "type", "=", "int", ",", "default", "=", "int", "(", "1e5", ")", ")", "\n", "@", "click", ".", "option", "(", "'--seed'", ",", "default", "=", "1337", ")", "\n", "@", "click", ".", "option", "(", "'--gpu'", ",", "default", "=", "0", ")", "\n", "@", "click", ".", "option", "(", "'--do-eval/--no-eval'", ",", "default", "=", "True", ")", "\n", "def", "main", "(", "experiment", ",", "model", ",", "dataset", ",", "datatype", ",", "split", ",", "val_dataset", ",", "val_split", ",", "class_group", ",", "count", ",", "shot", ",", "lr", ",", "max_iter", ",", "seed", ",", "gpu", ",", "do_eval", ")", ":", "\n", "    ", "setproctitle", ".", "setproctitle", "(", "experiment", ")", "\n", "version", "=", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'describe'", ",", "'--always'", "]", ",", "universal_newlines", "=", "True", ")", ".", "strip", "(", ")", "\n", "# experiment metadata", "\n", "args", "=", "locals", "(", ")", "\n", "\n", "exp_dir", "=", "'./experiments/{}/'", ".", "format", "(", "experiment", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "exp_dir", ")", ":", "\n", "        ", "click", ".", "confirm", "(", "click", ".", "style", "(", "\"{} already exists. Do you want to \"", "\n", "\"obliterate it and continue?\"", ".", "format", "(", "experiment", ")", ",", "fg", "=", "'red'", ")", ",", "\n", "abort", "=", "True", ")", "\n", "shutil", ".", "rmtree", "(", "exp_dir", ")", "\n", "", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "exp_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "except", ":", "\n", "        ", "raise", "Exception", "(", "\"Could not create experiment dir {}\"", ".", "format", "(", "exp_dir", ")", ")", "\n", "\n", "", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "str", "(", "gpu", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "exp_dir", "+", "'log'", ",", "level", "=", "logging", ".", "INFO", ",", "\n", "format", "=", "'[%(asctime)s.%(msecs)03d] %(message)s'", ",", "datefmt", "=", "'%H:%M:%S'", ")", "\n", "logging", ".", "getLogger", "(", ")", ".", "addHandler", "(", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", ")", "\n", "logging", ".", "info", "(", "\"training %s\"", ",", "experiment", ")", "\n", "logging", ".", "info", "(", "\"args: %s\"", ",", "args", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# spawn persistent evaluation process", "\n", "if", "do_eval", ":", "\n", "        ", "mp_ctx", "=", "multiprocessing", ".", "get_context", "(", "'spawn'", ")", "\n", "q", "=", "mp_ctx", ".", "JoinableQueue", "(", ")", "\n", "p", "=", "mp_ctx", ".", "Process", "(", "target", "=", "pevaluate", ",", "args", "=", "(", "q", ",", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "\n", "# filter classes by group for heldout experiments", "\n", "", "classes_to_filter", "=", "None", "\n", "if", "class_group", "!=", "'all'", ":", "\n", "        ", "class_group", "=", "int", "(", "class_group", ")", "\n", "# divide classes into quarters and take background + the given quarter", "\n", "group_size", "=", "len", "(", "datasets", "[", "dataset", "]", ".", "classes", ")", "//", "4", "\n", "group_idx", "=", "1", "+", "class_group", "*", "group_size", "\n", "group_classes", "=", "range", "(", "group_idx", ",", "group_idx", "+", "group_size", ")", "\n", "classes_to_filter", "=", "list", "(", "set", "(", "range", "(", "1", ",", "len", "(", "datasets", "[", "dataset", "]", ".", "classes", ")", ")", ")", "-", "set", "(", "group_classes", ")", ")", "\n", "\n", "", "dataset_name", "=", "dataset", "\n", "prepare_data", "=", "datatypes", "[", "datatype", "]", "\n", "dataset", "=", "prepare_data", "(", "dataset_name", ",", "split", ",", "classes_to_filter", ",", "count", ",", "shot", ")", "\n", "loader", "=", "prepare_loader", "(", "dataset", ")", "\n", "val_dataset_name", "=", "val_dataset", "or", "dataset_name", "\n", "\n", "model_name", "=", "model", "\n", "model", "=", "prepare_model", "(", "model", ",", "dataset", ".", "num_classes", ")", ".", "cuda", "(", ")", "\n", "\n", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'mean'", ",", "ignore_index", "=", "dataset", ".", "ignore_index", ")", "\n", "learned_params", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", "\n", "opt", "=", "optim", ".", "SGD", "(", "learned_params", ",", "lr", "=", "lr", ",", "momentum", "=", "0.99", ",", "weight_decay", "=", "0.0005", ")", "\n", "\n", "iter_order", "=", "int", "(", "np", ".", "log10", "(", "max_iter", ")", "+", "1", ")", "# for pretty printing", "\n", "\n", "epoch", "=", "0", "\n", "iteration", "=", "0", "\n", "losses", "=", "[", "]", "\n", "model", ".", "train", "(", ")", "\n", "while", "iteration", "<", "max_iter", ":", "\n", "        ", "logging", ".", "info", "(", "\"epoch %d\"", ",", "epoch", ")", "\n", "epoch", "+=", "1", "\n", "train_loss", "=", "0.", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "inputs", ",", "target", ",", "aux", "=", "data", "[", ":", "-", "2", "]", ",", "data", "[", "-", "2", "]", ",", "data", "[", "-", "1", "]", "\n", "inputs", "=", "[", "inp", ".", "to", "(", "device", ")", "if", "not", "isinstance", "(", "inp", ",", "list", ")", "else", "\n", "[", "[", "i_", ".", "to", "(", "device", ")", "for", "i_", "in", "in_", "]", "for", "in_", "in", "inp", "]", "for", "inp", "in", "inputs", "]", "\n", "target", "=", "target", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "scores", "=", "model", "(", "*", "inputs", ")", "\n", "loss", "=", "loss_fn", "(", "scores", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "if", "iteration", "%", "20", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "\"%s\"", ",", "\"iter {iteration:{iter_order}d} loss {mean_loss:02.5f}\"", ".", "format", "(", "iteration", "=", "iteration", ",", "iter_order", "=", "iter_order", ",", "mean_loss", "=", "np", ".", "mean", "(", "losses", ")", ")", ")", "\n", "losses", "=", "[", "]", "\n", "\n", "", "if", "iteration", "%", "4000", "==", "0", ":", "\n", "# snapshot", "\n", "                ", "logging", ".", "info", "(", "\"snapshotting...\"", ")", "\n", "snapshot_path", "=", "exp_dir", "+", "'snapshot-iter{iteration:0{iter_order}d}.pth'", ".", "format", "(", "iteration", "=", "iteration", ",", "iter_order", "=", "iter_order", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "snapshot_path", ")", "\n", "# evaluate", "\n", "if", "do_eval", ":", "\n", "                    ", "logging", ".", "info", "(", "\"evaluating...\"", ")", "\n", "hist_path", "=", "exp_dir", "+", "'hist-iter{iteration:0{iter_order}d}'", ".", "format", "(", "iteration", "=", "iteration", ",", "iter_order", "=", "iter_order", ")", "\n", "try", ":", "\n", "# wait for the last evalution if it's still running", "\n", "                        ", "q", ".", "join", "(", ")", "\n", "", "except", ":", "\n", "                        ", "pass", "\n", "# carry out evaluation in independent process for determinism and speed", "\n", "", "q", ".", "put", "(", "(", "model_name", ",", "snapshot_path", ",", "val_dataset_name", ",", "datatype", ",", "val_split", ",", "count", ",", "shot", ",", "seed", ",", "gpu", ",", "hist_path", ",", "None", ")", ")", "\n", "\n", "# update", "\n", "", "", "opt", ".", "step", "(", ")", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "iteration", "+=", "1", "\n", "", "logging", ".", "info", "(", "\"%s\"", ",", "\"train loss = {:02.5f}\"", ".", "format", "(", "train_loss", "/", "len", "(", "dataset", ")", ")", ")", "\n", "\n", "# signal to evaluation process that training is done", "\n", "", "if", "do_eval", ":", "\n", "        ", "q", ".", "put", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.None.report-sem-seg-results.main": [[10, 51], ["click.command", "click.argument", "click.argument", "print", "histname.split", "[].sum", "range", "all_scores.append", "max", "range", "result_dir.format", "numpy.load", "list", "report-sem-seg-results.main.class_limit"], "function", ["None"], ["@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "argument", "(", "'exp_name'", ")", "\n", "@", "click", ".", "argument", "(", "'histname'", ")", "\n", "def", "main", "(", "exp_name", ",", "histname", ")", ":", "\n", "\n", "    ", "result_dir", "=", "f'./experiments/{exp_name}'", "\n", "\n", "def", "make_histname", "(", "it", ",", "histname", ")", ":", "\n", "        ", "prefix", ",", "suffix", "=", "histname", ".", "split", "(", "'iter'", ")", "\n", "suffix", "=", "f'iter{it}'", "+", "suffix", "[", "6", ":", "]", "\n", "histname", "=", "prefix", "+", "suffix", "\n", "return", "histname", "\n", "\n", "", "def", "class_limit", "(", "arr", ",", "classes_to_keep", ")", ":", "\n", "        ", "hist", "=", "arr", "[", "'hist'", "]", "\n", "bg_intersection", "=", "arr", "[", "'bg'", "]", "[", "classes_to_keep", "]", ".", "sum", "(", ")", "\n", "classes_to_keep", "=", "[", "0", "]", "+", "classes_to_keep", "\n", "hist", "=", "hist", "[", ":", ",", "classes_to_keep", "]", "\n", "hist", "=", "hist", "[", "classes_to_keep", ",", ":", "]", "\n", "hist", "[", "0", ",", "0", "]", "=", "bg_intersection", "\n", "return", "hist", "\n", "\n", "", "all_scores", "=", "[", "]", "\n", "iters", "=", "[", "'%03d000'", "%", "x", "for", "x", "in", "range", "(", "1", ",", "24", ")", "if", "x", "%", "4", "==", "0", "]", "\n", "for", "it", "in", "iters", ":", "\n", "        ", "bin_ius", "=", "[", "]", "\n", "for", "fold", "in", "range", "(", "4", ")", ":", "\n", "            ", "fold_dir", "=", "result_dir", ".", "format", "(", "fold", ")", "\n", "hist", "=", "np", ".", "load", "(", "f\"{fold_dir}/{make_histname(it, histname)}.npz\"", ")", "\n", "\n", "classes_to_keep", "=", "list", "(", "range", "(", "1", "+", "fold", "*", "5", ",", "1", "+", "(", "fold", "+", "1", ")", "*", "5", ")", ")", "\n", "hist", "=", "class_limit", "(", "hist", ",", "classes_to_keep", ")", "\n", "\n", "metrics", "=", "SegScorer", "(", "21", ")", "\n", "metrics", ".", "hist", "=", "hist", "\n", "\n", "fold_scores", "=", "metrics", ".", "score", "(", ")", "\n", "bin_ius", ".", "append", "(", "np", ".", "nanmean", "(", "fold_scores", "[", "'pos_iu'", "]", ")", ")", "\n", "", "all_scores", ".", "append", "(", "np", ".", "mean", "(", "bin_ius", ")", ")", "\n", "\n", "", "print", "(", "'Max score:'", ",", "max", "(", "all_scores", ")", ",", "'iter:'", ",", "iters", "[", "np", ".", "argmax", "(", "all_scores", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.__init__": [[27, 32], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "hist", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ",", "self", ".", "num_classes", ")", ")", "\n", "# need to measure bg-bg intersection class-wise for heldout evaluation", "\n", "self", ".", "bg", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.update": [[33, 49], ["metrics.fast_hist", "len", "set", "aux[].values"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.fast_hist"], ["", "def", "update", "(", "self", ",", "output", ",", "target", ",", "aux", ")", ":", "\n", "        ", "if", "'cls'", "in", "aux", ":", "\n", "# binary tasks on masks: map positive to true class", "\n", "            ", "output", "[", "output", "==", "1", "]", "=", "aux", "[", "'cls'", "]", "\n", "target", "[", "target", "==", "1", "]", "=", "aux", "[", "'cls'", "]", "\n", "", "elif", "'mapping'", "in", "aux", "and", "len", "(", "set", "(", "aux", "[", "'mapping'", "]", ".", "values", "(", ")", ")", ")", "==", "2", ":", "\n", "# foreground-background: assign foreground to true class(es)", "\n", "# for class-wise scoring by taking product of output and full truth", "\n", "            ", "target", "=", "aux", "[", "'full_target'", "]", "\n", "output", "*=", "target", "\n", "# regular scoring", "\n", "", "hist", "=", "fast_hist", "(", "target", ".", "flat", ",", "output", ".", "flat", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "hist", "+=", "hist", "\n", "# background measurement for class-wise scoring", "\n", "if", "'cls'", "in", "aux", ":", "\n", "            ", "self", ".", "bg", "[", "aux", "[", "'cls'", "]", "]", "+=", "hist", "[", "0", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.score": [[50, 71], ["collections.OrderedDict", "numpy.array().reshape", "numpy.diag().sum", "metrics.SegScorer.hist.sum", "numpy.errstate", "metrics.SegScorer.hist.sum", "metrics.SegScorer.hist.sum", "numpy.diag", "numpy.diag", "metrics.SegScorer.hist.sum", "numpy.diag", "numpy.array", "numpy.diag", "numpy.diag", "numpy.diag", "numpy.array().reshape.sum", "numpy.array().reshape.sum", "metrics.SegScorer.hist.sum", "metrics.SegScorer.hist.sum", "metrics.SegScorer.hist[].sum", "metrics.SegScorer.hist[].sum", "metrics.SegScorer.hist[].sum"], "methods", ["None"], ["", "", "def", "score", "(", "self", ")", ":", "\n", "        ", "scores", "=", "OrderedDict", "(", ")", "\n", "# overall accuracy", "\n", "scores", "[", "'all_acc'", "]", "=", "np", ".", "diag", "(", "self", ".", "hist", ")", ".", "sum", "(", ")", "/", "self", ".", "hist", ".", "sum", "(", ")", "\n", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "# missing classes are ok", "\n", "# per-class accuracy", "\n", "            ", "scores", "[", "'acc'", "]", "=", "np", ".", "diag", "(", "self", ".", "hist", ")", "/", "self", ".", "hist", ".", "sum", "(", "1", ")", "\n", "# per-class IU", "\n", "scores", "[", "'iu'", "]", "=", "np", ".", "diag", "(", "self", ".", "hist", ")", "/", "(", "self", ".", "hist", ".", "sum", "(", "1", ")", "+", "self", ".", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "self", ".", "hist", ")", ")", "\n", "# frequency-weighted IU", "\n", "", "freq", "=", "self", ".", "hist", ".", "sum", "(", "1", ")", "/", "self", ".", "hist", ".", "sum", "(", ")", "\n", "scores", "[", "'freq_iu'", "]", "=", "(", "freq", "[", "freq", ">", "0", "]", "*", "scores", "[", "'iu'", "]", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "# binary IU (neg: 0, pos >=1)", "\n", "binary_hist", "=", "np", ".", "array", "(", "(", "self", ".", "hist", "[", "0", ",", "0", "]", ",", "self", ".", "hist", "[", "0", ",", "1", ":", "]", ".", "sum", "(", ")", ",", "\n", "self", ".", "hist", "[", "1", ":", ",", "0", "]", ".", "sum", "(", ")", ",", "self", ".", "hist", "[", "1", ":", ",", "1", ":", "]", ".", "sum", "(", ")", ")", ")", ".", "reshape", "(", "(", "2", ",", "2", ")", ")", "\n", "scores", "[", "'bin_iu'", "]", "=", "np", ".", "diag", "(", "binary_hist", ")", "/", "(", "binary_hist", ".", "sum", "(", "1", ")", "+", "binary_hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "binary_hist", ")", ")", "\n", "# mean IU w/o background as in Shaban et al. BMVC'17", "\n", "scores", "[", "'nobg_iu'", "]", "=", "scores", "[", "'iu'", "]", "[", "1", ":", "]", "\n", "# IU for positive alone", "\n", "scores", "[", "'pos_iu'", "]", "=", "scores", "[", "'bin_iu'", "]", "[", "1", "]", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.save": [[72, 74], ["numpy.savez"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "np", ".", "savez", "(", "path", ",", "hist", "=", "self", ".", "hist", ",", "bg", "=", "self", ".", "bg", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.fast_hist": [[6, 12], ["numpy.bincount().reshape", "numpy.bincount", "a[].astype"], "function", ["None"], ["def", "fast_hist", "(", "a", ",", "b", ",", "n", ")", ":", "\n", "    ", "\"\"\"\n    Fast 2D histogram by linearizing.\n    \"\"\"", "\n", "k", "=", "(", "a", ">=", "0", ")", "&", "(", "a", "<", "n", ")", "\n", "return", "np", ".", "bincount", "(", "n", "*", "a", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "b", "[", "k", "]", ",", "minlength", "=", "n", "**", "2", ")", ".", "reshape", "(", "n", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.fgbg.fgbg.forward": [[10, 15], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.model.cofeat_late_lite_unshared.cofeat_late_lite_unshared.forward"], ["def", "forward", "(", "self", ",", "x", ",", "*", "args", ")", ":", "\n", "# *args will absorb the support (and other args, if any),", "\n", "# making this model compatibible with conditional models", "\n", "# in order to evaluate it on the same mask data.", "\n", "        ", "return", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.fcn32s.fcn32s.__init__": [[15, 34], ["torch.Module.__init__", "backbone.vgg16", "torch.Conv2d", "torch.Conv2d", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "fcn.Interpolator"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__", "home.repos.pwc.inspect_result.shelhamer_revolver.model.backbone.vgg16"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "feat_dim", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "feat_dim", "=", "feat_dim", "or", "4096", "\n", "\n", "# feature encoder (with ILSVRC pre-training)", "\n", "self", ".", "encoder", "=", "vgg16", "(", "is_caffe", "=", "True", ")", "\n", "\n", "# classifier head", "\n", "self", ".", "head", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_dim", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "head", ".", "weight", ",", "0.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "head", ".", "bias", ",", "0.", ")", "\n", "\n", "# bilinear interpolation for upsampling", "\n", "self", ".", "decoder", "=", "Interpolator", "(", "self", ".", "num_classes", ",", "32", ",", "odd", "=", "False", ")", "\n", "# align output to input: see", "\n", "# https://github.com/BVLC/caffe/blob/master/python/caffe/coord_map.py", "\n", "self", ".", "encoder", "[", "0", "]", ".", "padding", "=", "(", "81", ",", "81", ")", "\n", "self", ".", "crop", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.fcn32s.fcn32s.forward": [[36, 43], ["fcn32s.fcn32s.encoder", "fcn32s.fcn32s.head", "fcn32s.fcn32s.decoder", "fcn32s.fcn32s.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", ",", "w", "=", "x", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "x", "=", "self", ".", "encoder", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "x", "=", "self", ".", "decoder", "(", "x", ")", "\n", "x", "=", "x", "[", "...", ",", "self", ".", "crop", ":", "self", ".", "crop", "+", "h", ",", "self", ".", "crop", ":", "self", ".", "crop", "+", "w", "]", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.interactive_early_lite.interactive_early_lite.__init__": [[13, 29], ["interactive_early.interactive_early.__init__", "setattr", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "256", ")", "# lite-headed: 256 vs. regular 4096", "\n", "\n", "# encoder: VGG16 with different channel dim.", "\n", "fc6", "=", "[", "(", "'fc6'", ",", "nn", ".", "Conv2d", "(", "512", ",", "self", ".", "feat_dim", ",", "7", ")", ")", ",", "\n", "(", "'fc6_relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc6_drop'", ",", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ")", ")", "]", "\n", "fc7", "=", "[", "(", "'fc7'", ",", "nn", ".", "Conv2d", "(", "self", ".", "feat_dim", ",", "self", ".", "feat_dim", ",", "1", ")", ")", ",", "\n", "(", "'fc7_relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc7_drop'", ",", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ")", ")", "]", "\n", "for", "n", ",", "m", "in", "fc6", "+", "fc6", ":", "\n", "            ", "setattr", "(", "self", ".", "encoder", ",", "n", ",", "m", ")", "\n", "# normal init new layers", "\n", "", "for", "m", "in", "(", "self", ".", "encoder", ".", "fc6", ",", "self", ".", "encoder", ".", "fc7", ")", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0.", ",", ".001", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.fcn32s_lite.fcn32s_lite.__init__": [[18, 35], ["fcn32s.fcn32s.__init__", "setattr", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "256", ")", "# lite-headed: 256 vs. regular 4096", "\n", "\n", "# encoder: VGG16 with different channel dim.", "\n", "del", "self", ".", "encoder", "[", "-", "6", ":", "]", "\n", "fc6", "=", "[", "(", "'fc6'", ",", "nn", ".", "Conv2d", "(", "512", ",", "self", ".", "feat_dim", ",", "7", ")", ")", ",", "\n", "(", "'fc6_relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc6_drop'", ",", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ")", ")", "]", "\n", "fc7", "=", "[", "(", "'fc7'", ",", "nn", ".", "Conv2d", "(", "self", ".", "feat_dim", ",", "self", ".", "feat_dim", ",", "1", ")", ")", ",", "\n", "(", "'fc7_relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc7_drop'", ",", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ")", ")", "]", "\n", "for", "n", ",", "m", "in", "fc6", "+", "fc6", ":", "\n", "            ", "setattr", "(", "self", ".", "encoder", ",", "n", ",", "m", ")", "\n", "# normal init new layers", "\n", "", "for", "m", "in", "(", "self", ".", "encoder", ".", "fc6", ",", "self", ".", "encoder", ".", "fc7", ")", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0.", ",", ".001", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.interactive_late_glob.interactive_late_glob.forward": [[15, 47], ["interactive_late_glob.interactive_late_glob.encoder", "torch.pad", "torch.pad", "torch.pad", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "interactive_late_glob.interactive_late_glob.mask_feat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "interactive_late_glob.interactive_late_glob.head", "interactive_late_glob.interactive_late_glob.decoder", "upscores.permute.permute.permute", "interactive_late_glob.interactive_late_glob.size", "interactive_late_glob.interactive_late_glob.anno_enc", "interactive_late_glob.interactive_late_glob.mask_feat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "g.repeat", "g.view", "interactive_late_glob.interactive_late_glob.size", "interactive_late_glob.interactive_late_glob.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "g.size", "g.size", "a.view"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.model.interactive_late.interactive_late.mask_feat", "home.repos.pwc.inspect_result.shelhamer_revolver.model.interactive_late.interactive_late.mask_feat"], ["    ", "def", "forward", "(", "self", ",", "im", ",", "anno", ")", ":", "\n", "        ", "h", ",", "w", "=", "im", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "\n", "# Extract image features", "\n", "im", "=", "self", ".", "encoder", "(", "im", ")", "\n", "\n", "# Pre-process annotations and downsample them", "\n", "anno", "=", "F", ".", "pad", "(", "anno", ",", "(", "0", ",", "31", ",", "0", ",", "31", ")", ",", "'constant'", ",", "0", ")", "\n", "annos", "=", "torch", ".", "unbind", "(", "anno", ",", "dim", "=", "1", ")", "\n", "annos", "=", "[", "self", ".", "anno_enc", "(", "a", "[", "None", ",", "...", "]", ")", "for", "a", "in", "annos", "]", "\n", "annos", "=", "[", "a", "/", "(", "1e-6", "+", "torch", ".", "sum", "(", "a", ".", "view", "(", "-", "1", ")", ",", "dim", "=", "0", ")", ")", "for", "a", "in", "annos", "]", "\n", "\n", "# align image + mask, then mask features by annotations for guidance", "\n", "im_feats", "=", "self", ".", "mask_feat", "(", "im", ",", "annos", "[", "0", "]", ",", "scale", "=", "False", ")", "\n", "guides", "=", "[", "self", ".", "mask_feat", "(", "im", ",", "a", ")", "for", "a", "in", "annos", "]", "\n", "\n", "# global pool guidance + tile across image features", "\n", "guides", "=", "[", "torch", ".", "sum", "(", "g", ".", "view", "(", "g", ".", "size", "(", "0", ")", ",", "g", ".", "size", "(", "1", ")", ",", "-", "1", ")", ",", "dim", "=", "2", ")", "for", "g", "in", "guides", "]", "# N x C", "\n", "guides", "=", "[", "g", "[", "...", ",", "None", ",", "None", "]", "for", "g", "in", "guides", "]", "# N x C x 1 x 1", "\n", "guides", "=", "[", "g", ".", "repeat", "(", "1", ",", "1", ",", "im_feats", ".", "size", "(", "2", ")", ",", "im_feats", ".", "size", "(", "3", ")", ")", "for", "g", "in", "guides", "]", "\n", "\n", "# stack image-guidance pairs into batch dimension", "\n", "feat", "=", "torch", ".", "cat", "(", "[", "torch", ".", "cat", "(", "(", "im_feats", ",", "g", ")", ",", "dim", "=", "1", ")", "for", "g", "in", "guides", "]", ",", "dim", "=", "0", ")", "\n", "\n", "# score by shared metric", "\n", "scores", "=", "self", ".", "head", "(", "feat", ")", "\n", "# interpolate and crop", "\n", "upscores", "=", "self", ".", "decoder", "(", "scores", ")", "\n", "upscores", "=", "upscores", "[", "...", ",", "self", ".", "crop", ":", "self", ".", "crop", "+", "h", ",", "self", ".", "crop", ":", "self", ".", "crop", "+", "w", "]", "\n", "# unpack into annotation-wise channels", "\n", "upscores", "=", "upscores", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "return", "upscores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.interactive_early.interactive_early.__init__": [[12, 40], ["torch.Module.__init__", "backbone.vgg16.vgg16", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.Conv2d", "torch.Conv2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Conv2d", "torch.Conv2d", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "fcn.Interpolator", "old_conv1.size", "old_conv1.size"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__", "home.repos.pwc.inspect_result.shelhamer_revolver.model.backbone.vgg16"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "feat_dim", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "feat_dim", "=", "feat_dim", "or", "4096", "\n", "\n", "backbone", "=", "vgg16", "(", "is_caffe", "=", "True", ")", "\n", "# Modify conv1_1 to have 5 input channels", "\n", "# Init the weights in the new channels to the channel-wise mean", "\n", "# of the pre-trained conv1_1 weights", "\n", "old_conv1", "=", "backbone", ".", "conv1_1", ".", "weight", ".", "data", "\n", "mean_conv1", "=", "torch", ".", "mean", "(", "old_conv1", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "new_conv1", "=", "nn", ".", "Conv2d", "(", "5", ",", "old_conv1", ".", "size", "(", "0", ")", ",", "kernel_size", "=", "old_conv1", ".", "size", "(", "2", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "new_conv1", ".", "weight", ".", "data", "=", "torch", ".", "cat", "(", "[", "old_conv1", ",", "mean_conv1", ",", "mean_conv1", "]", ",", "dim", "=", "1", ")", "\n", "new_conv1", ".", "bias", ".", "data", "=", "backbone", ".", "conv1_1", ".", "bias", ".", "data", "\n", "backbone", ".", "conv1_1", "=", "new_conv1", "\n", "self", ".", "encoder", "=", "backbone", "\n", "\n", "# classifier head", "\n", "self", ".", "head", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_dim", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "head", ".", "weight", ",", "0.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "head", ".", "bias", ",", "0.", ")", "\n", "\n", "# bilinear interpolation for upsampling", "\n", "self", ".", "decoder", "=", "Interpolator", "(", "self", ".", "num_classes", ",", "32", ",", "odd", "=", "False", ")", "\n", "# align output to input: see", "\n", "# https://github.com/BVLC/caffe/blob/master/python/caffe/coord_map.py", "\n", "self", ".", "encoder", "[", "0", "]", ".", "padding", "=", "(", "81", ",", "81", ")", "\n", "self", ".", "crop", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.interactive_early.interactive_early.forward": [[42, 50], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "interactive_early.interactive_early.encoder", "interactive_early.interactive_early.head", "interactive_early.interactive_early.decoder", "interactive_early.interactive_early.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "anno", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "anno", ")", ",", "dim", "=", "1", ")", "\n", "h", ",", "w", "=", "x", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "x", "=", "self", ".", "encoder", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "x", "=", "self", ".", "decoder", "(", "x", ")", "\n", "x", "=", "x", "[", "...", ",", "self", ".", "crop", ":", "self", ".", "crop", "+", "h", ",", "self", ".", "crop", ":", "self", ".", "crop", "+", "w", "]", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.cofeat_late.cofeat_late.__init__": [[16, 20], ["interactive_late.interactive_late.__init__", "cofeat_late.cofeat_late.register_buffer", "cofeat_late.cofeat_late.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "feat_dim", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "feat_dim", ")", "\n", "self", ".", "register_buffer", "(", "'z'", ",", "torch", ".", "zeros", "(", "num_classes", ",", "self", ".", "feat_dim", ")", ")", "\n", "self", ".", "register_buffer", "(", "'num_z'", ",", "torch", ".", "zeros", "(", "num_classes", ",", "1", ")", ".", "float", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.cofeat_late.cofeat_late.forward": [[22, 28], ["cofeat_late.cofeat_late.guide", "cofeat_late.cofeat_late.seg"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.model.cofeat_late.cofeat_late.guide", "home.repos.pwc.inspect_result.shelhamer_revolver.model.cofeat_late.cofeat_late.seg"], ["", "def", "forward", "(", "self", ",", "qry", ",", "supp", ")", ":", "\n", "# extract guidance from support", "\n", "        ", "z", "=", "self", ".", "guide", "(", "supp", ")", "\n", "# segment query", "\n", "y", "=", "self", ".", "seg", "(", "qry", ",", "z", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.cofeat_late.cofeat_late.guide": [[30, 61], ["cofeat_late.cofeat_late.clear_guide", "z.clone.clone.clone", "num_z.clone.clone.clone", "cofeat_late.cofeat_late.encoder", "torch.pad", "torch.pad", "torch.pad", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cofeat_late.cofeat_late.anno_enc", "cofeat_late.cofeat_late.mask_feat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "enumerate", "z_.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "z_.size", "a.view", "a.sum"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.model.cofeat_late.cofeat_late.clear_guide", "home.repos.pwc.inspect_result.shelhamer_revolver.model.interactive_late.interactive_late.mask_feat"], ["", "def", "guide", "(", "self", ",", "supp", ",", "update", "=", "False", ")", ":", "\n", "        ", "z", "=", "self", ".", "z", "\n", "num_z", "=", "self", ".", "num_z", "\n", "if", "not", "update", ":", "\n", "# non-cumulative use resets accumulated guidance", "\n", "            ", "self", ".", "clear_guide", "(", ")", "\n", "# clone guide and counter for one-time use and *do not update*", "\n", "z", "=", "z", ".", "clone", "(", ")", "\n", "num_z", "=", "num_z", ".", "clone", "(", ")", "\n", "", "for", "im", ",", "anno", "in", "supp", ":", "\n", "# encode support image", "\n", "            ", "feat", "=", "self", ".", "encoder", "(", "im", ")", "\n", "# cast annotations into feature masks", "\n", "anno", "=", "F", ".", "pad", "(", "anno", ",", "(", "0", ",", "31", ",", "0", ",", "31", ")", ",", "'constant'", ",", "0", ")", "\n", "annos", "=", "torch", ".", "unbind", "(", "anno", ",", "dim", "=", "1", ")", "\n", "# only update guidance for given annotations", "\n", "active_idx", "=", "[", "i", "for", "i", ",", "a", "in", "enumerate", "(", "annos", ")", "if", "(", "a", ".", "sum", "(", ")", ">", "0", ")", ".", "all", "(", ")", "]", "\n", "if", "not", "active_idx", ":", "\n", "                ", "return", "z", "# short-circuit for no annotations", "\n", "", "annos", "=", "[", "annos", "[", "i", "]", "for", "i", "in", "active_idx", "]", "\n", "annos", "=", "[", "self", ".", "anno_enc", "(", "a", "[", "None", ",", "...", "]", ")", "for", "a", "in", "annos", "]", "\n", "annos", "=", "[", "a", "/", "(", "1e-6", "+", "torch", ".", "sum", "(", "a", ".", "view", "(", "-", "1", ")", ",", "dim", "=", "0", ")", ")", "for", "a", "in", "annos", "]", "\n", "# mask support by annotations", "\n", "z_shot", "=", "[", "self", ".", "mask_feat", "(", "feat", ",", "a", ")", "for", "a", "in", "annos", "]", "\n", "# global pool support +/- features", "\n", "z_shot", "=", "[", "torch", ".", "sum", "(", "z_", ".", "view", "(", "1", ",", "z_", ".", "size", "(", "1", ")", ",", "-", "1", ")", ",", "dim", "=", "2", ")", "for", "z_", "in", "z_shot", "]", "\n", "z_shot", "=", "torch", ".", "cat", "(", "z_shot", ",", "dim", "=", "0", ")", "\n", "# accumulate guidance as running mean", "\n", "num_z", "[", "active_idx", "]", "+=", "1", "\n", "z", "[", "active_idx", "]", "+=", "(", "z_shot", "-", "z", "[", "active_idx", "]", ")", "/", "num_z", "[", "active_idx", "]", "\n", "", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.cofeat_late.cofeat_late.seg": [[63, 81], ["cofeat_late.cofeat_late.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cofeat_late.cofeat_late.head", "cofeat_late.cofeat_late.decoder", "x.permute.permute.permute", "cofeat_late.cofeat_late.size", "cofeat_late.cofeat_late.size", "z_.repeat", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "seg", "(", "self", ",", "qry", ",", "z", ")", ":", "\n", "        ", "h", ",", "w", "=", "qry", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "qry", "=", "self", ".", "encoder", "(", "qry", ")", "\n", "\n", "# tile guidance across the query features", "\n", "feat_h", ",", "feat_w", "=", "qry", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "z", "=", "[", "z_", "[", "None", ",", "...", ",", "None", ",", "None", "]", "for", "z_", "in", "torch", ".", "unbind", "(", "z", ",", "dim", "=", "0", ")", "]", "\n", "z", "=", "[", "z_", ".", "repeat", "(", "1", ",", "1", ",", "feat_h", ",", "feat_w", ")", "for", "z_", "in", "z", "]", "\n", "x", "=", "torch", ".", "cat", "(", "[", "torch", ".", "cat", "(", "(", "qry", ",", "z_", ")", ",", "dim", "=", "1", ")", "for", "z_", "in", "z", "]", ",", "dim", "=", "0", ")", "\n", "\n", "# score by shared metric", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "# interpolate and crop", "\n", "x", "=", "self", ".", "decoder", "(", "x", ")", "\n", "x", "=", "x", "[", "...", ",", "self", ".", "crop", ":", "self", ".", "crop", "+", "h", ",", "self", ".", "crop", ":", "self", ".", "crop", "+", "w", "]", "\n", "# unpack into annotation-wise channels", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.cofeat_late.cofeat_late.clear_guide": [[83, 86], ["cofeat_late.cofeat_late.z.zero_", "cofeat_late.cofeat_late.num_z.zero_"], "methods", ["None"], ["", "def", "clear_guide", "(", "self", ")", ":", "\n", "        ", "self", ".", "z", ".", "zero_", "(", ")", "\n", "self", ".", "num_z", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.cofeat_late.cofeat_late.way": [[88, 92], ["cofeat_late.cofeat_late.z.size"], "methods", ["None"], ["", "@", "property", "\n", "def", "way", "(", "self", ")", ":", "\n", "# \"way\" == the no. of distinct annotation/output values", "\n", "        ", "return", "self", ".", "z", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.cofeat_late.cofeat_late.set_way": [[94, 99], ["cofeat_late.cofeat_late.z.new", "cofeat_late.cofeat_late.num_z.new", "cofeat_late.cofeat_late.clear_guide"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.model.cofeat_late.cofeat_late.clear_guide"], ["", "def", "set_way", "(", "self", ",", "k", ")", ":", "\n", "        ", "self", ".", "z", "=", "self", ".", "z", ".", "new", "(", "k", ",", "self", ".", "feat_dim", ")", "\n", "self", ".", "num_z", "=", "self", ".", "num_z", ".", "new", "(", "k", ",", "1", ")", "\n", "# new task, new guidance", "\n", "self", ".", "clear_guide", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.cofeat_late_lite.cofeat_late_lite.__init__": [[16, 44], ["cofeat_late.cofeat_late.__init__", "cofeat_late_lite.cofeat_late_lite.encoder._modules.update", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "list", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__", "home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.update"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "256", ")", "# lite-headed: 256 vs. regular 4096", "\n", "\n", "# switch dim of fc6", "\n", "for", "k", "in", "list", "(", "self", ".", "encoder", ".", "_modules", ")", "[", "-", "3", ":", "]", ":", "\n", "            ", "del", "self", ".", "encoder", ".", "_modules", "[", "k", "]", "\n", "", "fc6", "=", "[", "(", "'fc6'", ",", "nn", ".", "Conv2d", "(", "512", ",", "self", ".", "feat_dim", ",", "7", ")", ")", ",", "\n", "(", "'fc6_relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc6_drop'", ",", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ")", ")", "]", "\n", "self", ".", "encoder", ".", "_modules", ".", "update", "(", "fc6", ")", "\n", "# normal init new layer", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "encoder", ".", "fc6", ".", "weight", ",", "0.", ",", ".001", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "encoder", ".", "fc6", ".", "bias", ",", "0.", ")", "\n", "\n", "# classification head (including fc7 for compatibility with guidance)", "\n", "# overrride channel dimension since the pos/neg weights are not shared,", "\n", "# so we need three: query, positive, and negative.", "\n", "head", "=", "[", "(", "'fc7'", ",", "nn", ".", "Conv2d", "(", "self", ".", "feat_dim", "*", "2", ",", "self", ".", "feat_dim", "*", "2", ",", "1", ")", ")", ",", "\n", "(", "'fc7_relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc7_drop'", ",", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ")", ")", ",", "\n", "(", "'score'", ",", "nn", ".", "Conv2d", "(", "self", ".", "feat_dim", "*", "2", ",", "1", ",", "1", ")", ")", "]", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "head", ")", ")", "\n", "\n", "# normal init fc7", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "head", ".", "fc7", ".", "weight", ",", "0.", ",", ".001", ")", "\n", "# zero init score", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "head", ".", "score", ".", "weight", ",", "0.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "head", ".", "score", ".", "bias", ",", "0.", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.fgbg_lite.fgbg_lite.forward": [[10, 15], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.model.cofeat_late_lite_unshared.cofeat_late_lite_unshared.forward"], ["def", "forward", "(", "self", ",", "x", ",", "*", "args", ")", ":", "\n", "# *args will absorb the support (and other args, if any),", "\n", "# making this model compatibible with conditional models", "\n", "# in order to evaluate it on the same mask data.", "\n", "        ", "return", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.cofeat_early.cofeat_early.__init__": [[14, 66], ["torch.Module.__init__", "backbone.vgg16.vgg16", "copy.deepcopy", "copy.deepcopy", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.Conv2d", "torch.Conv2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Sequential", "torch.Sequential", "cofeat_early.cofeat_early.named_modules", "fcn.Interpolator", "setattr", "old_conv1.size", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "old_conv1.size", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__", "home.repos.pwc.inspect_result.shelhamer_revolver.model.backbone.vgg16"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "feat_dim", "=", "256", "\n", "\n", "# make separate fully conv encoders for support and query", "\n", "backbone", "=", "vgg16", "(", "is_caffe", "=", "True", ")", "\n", "del", "backbone", "[", "-", "6", ":", "]", "\n", "fc6", "=", "[", "(", "'fc6'", ",", "nn", ".", "Conv2d", "(", "512", ",", "feat_dim", ",", "7", ")", ")", ",", "\n", "(", "'fc6_relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc6_drop'", ",", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ")", ")", "]", "\n", "for", "n", ",", "m", "in", "fc6", ":", "\n", "            ", "setattr", "(", "backbone", ",", "n", ",", "m", ")", "\n", "", "supp_backbone", "=", "copy", ".", "deepcopy", "(", "backbone", ")", "\n", "qry_backbone", "=", "copy", ".", "deepcopy", "(", "backbone", ")", "\n", "\n", "# Modify conv1_1 of conditioning branch to have 5 input channels", "\n", "# Init the weights in the new channels to the channel-wise mean", "\n", "# of the pre-trained conv1_1 weights", "\n", "old_conv1", "=", "supp_backbone", ".", "_modules", "[", "'conv1_1'", "]", ".", "weight", ".", "data", "\n", "mean_conv1", "=", "torch", ".", "mean", "(", "old_conv1", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "new_conv1", "=", "nn", ".", "Conv2d", "(", "5", ",", "old_conv1", ".", "size", "(", "0", ")", ",", "kernel_size", "=", "old_conv1", ".", "size", "(", "2", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "new_conv1", ".", "weight", ".", "data", "=", "torch", ".", "cat", "(", "[", "old_conv1", ",", "mean_conv1", ",", "mean_conv1", "]", ",", "dim", "=", "1", ")", "\n", "new_conv1", ".", "bias", ".", "data", "=", "supp_backbone", ".", "_modules", "[", "'conv1_1'", "]", ".", "bias", ".", "data", "\n", "supp_backbone", ".", "conv1_1", "=", "new_conv1", "\n", "self", ".", "supp_encoder", "=", "supp_backbone", "\n", "self", ".", "qry_encoder", "=", "qry_backbone", "\n", "\n", "# classifier head", "\n", "fc7", "=", "[", "(", "'fc7'", ",", "nn", ".", "Conv2d", "(", "feat_dim", "*", "2", ",", "feat_dim", ",", "1", ")", ")", ",", "\n", "(", "'fc7_relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc7_drop'", ",", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ")", ")", "]", "\n", "score", "=", "[", "(", "'score'", ",", "nn", ".", "Conv2d", "(", "feat_dim", ",", "num_classes", ",", "1", ")", ")", "]", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "fc7", "+", "score", ")", ")", "\n", "\n", "# FC6 and FC7 should be init with random Gaussian weights", "\n", "# Score layer should be zero", "\n", "for", "n", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'fc'", "in", "n", "and", "isinstance", "(", "n", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0.", ",", ".001", ")", "\n", "", "elif", "'score'", "in", "n", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "0.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.", ")", "\n", "\n", "# bilinear interpolation for upsampling", "\n", "", "", "self", ".", "decoder", "=", "Interpolator", "(", "num_classes", ",", "32", ",", "odd", "=", "False", ")", "\n", "\n", "# align output to input: see", "\n", "# https://github.com/BVLC/caffe/blob/master/python/caffe/coord_map.py", "\n", "self", ".", "supp_encoder", "[", "0", "]", ".", "padding", "=", "(", "81", ",", "81", ")", "\n", "self", ".", "qry_encoder", "[", "0", "]", ".", "padding", "=", "(", "81", ",", "81", ")", "\n", "self", ".", "crop", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.cofeat_early.cofeat_early.forward": [[67, 86], ["cofeat_early.cofeat_early.qry_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "supp.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cofeat_early.cofeat_early.head", "cofeat_early.cofeat_early.decoder", "cofeat_early.cofeat_early.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cofeat_early.cofeat_early.supp_encoder", "cofeat_early.cofeat_early.size", "cofeat_early.cofeat_early.size", "f.view", "f.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "qry", ",", "supp", ")", ":", "\n", "# query", "\n", "        ", "h", ",", "w", "=", "qry", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "qry", "=", "self", ".", "qry_encoder", "(", "qry", ")", "\n", "# support: concat image + annotation then encode", "\n", "supp", "=", "[", "torch", ".", "cat", "(", "s", ",", "dim", "=", "1", ")", "for", "s", "in", "supp", "]", "\n", "supp", "=", "[", "self", ".", "supp_encoder", "(", "s", ")", "for", "s", "in", "supp", "]", "\n", "# global pool support feature and tile it across query feature", "\n", "supp", "=", "torch", ".", "cat", "(", "[", "f", ".", "view", "(", "1", ",", "f", ".", "size", "(", "1", ")", ",", "-", "1", ")", "for", "f", "in", "supp", "]", ",", "dim", "=", "2", ")", "\n", "supp", "=", "torch", ".", "mean", "(", "supp", ",", "dim", "=", "2", ")", "\n", "supp", "=", "supp", "[", "...", ",", "None", ",", "None", "]", "\n", "supp", "=", "supp", ".", "repeat", "(", "1", ",", "1", ",", "qry", ".", "size", "(", "2", ")", ",", "qry", ".", "size", "(", "3", ")", ")", "\n", "# note: concat support first, unlike others. TODO(shelhamer) switch?", "\n", "x", "=", "torch", ".", "cat", "(", "[", "supp", ",", "qry", "]", ",", "dim", "=", "1", ")", "\n", "# inference from combined feature", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "x", "=", "self", ".", "decoder", "(", "x", ")", "\n", "x", "=", "x", "[", "...", ",", "self", ".", "crop", ":", "self", ".", "crop", "+", "h", ",", "self", ".", "crop", ":", "self", ".", "crop", "+", "w", "]", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.fcn.Interpolator.__init__": [[68, 81], ["torch.Module.__init__", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.Parameter", "torch.Parameter", "torch.Parameter", "fcn.bilinear_kernel"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__", "home.repos.pwc.inspect_result.shelhamer_revolver.model.fcn.bilinear_kernel"], ["def", "__init__", "(", "self", ",", "channel_dim", ",", "rate", ",", "odd", "=", "True", ",", "normalize", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rate", "=", "rate", "\n", "ksize", "=", "rate", "*", "2", "\n", "if", "odd", ":", "\n", "            ", "ksize", "-=", "1", "\n", "# set weights to within-channel bilinear interpolation", "\n", "", "kernel", "=", "torch", ".", "from_numpy", "(", "bilinear_kernel", "(", "ksize", ",", "normalize", ")", ")", "\n", "weight", "=", "torch", ".", "zeros", "(", "channel_dim", ",", "channel_dim", ",", "ksize", ",", "ksize", ")", "\n", "for", "k", "in", "range", "(", "channel_dim", ")", ":", "\n", "            ", "weight", "[", "k", ",", "k", "]", "=", "kernel", "\n", "# fix weights", "\n", "", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "weight", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.fcn.Interpolator.forward": [[82, 85], ["torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# no groups (for speed with current pytorch impl.) and no bias", "\n", "        ", "return", "F", ".", "conv_transpose2d", "(", "x", ",", "self", ".", "weight", ",", "stride", "=", "self", ".", "rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.fcn.Downsampler.__init__": [[91, 93], ["fcn.Interpolator.__init__"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__"], ["def", "__init__", "(", "self", ",", "channel_dim", ",", "rate", ",", "odd", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "channel_dim", ",", "rate", ",", "odd", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.fcn.Downsampler.forward": [[94, 96], ["torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", ",", "stride", "=", "self", ".", "rate", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.fcn.convolutionalize": [[8, 30], ["torch.zeros", "torch.zeros", "torch.zeros", "isinstance", "fully_conv_modules.append", "m", "torch.Conv2d", "nn.Conv2d.weight.data.view().copy_", "nn.Conv2d.bias.data.view().copy_", "m.size", "m.weight.size", "m.weight.data.view", "m.bias.data.view", "nn.Conv2d.weight.data.view", "nn.Conv2d.bias.data.view", "m.size", "m.size"], "function", ["None"], ["def", "convolutionalize", "(", "modules", ",", "input_size", ")", ":", "\n", "    ", "\"\"\"\n    Recast `modules` into fully convolutional form.\n\n    The conversion transfers weights and infers kernel sizes from the\n    `input_size` and modules' action on it.\n\n    n.b. This only handles the conversion of linear/fully-connected modules,\n    although other module types could require conversion for correctness.\n\n    \"\"\"", "\n", "fully_conv_modules", "=", "[", "]", "\n", "x", "=", "torch", ".", "zeros", "(", "(", "1", ",", ")", "+", "input_size", ")", "\n", "for", "m", "in", "modules", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "n", "=", "nn", ".", "Conv2d", "(", "x", ".", "size", "(", "1", ")", ",", "m", ".", "weight", ".", "size", "(", "0", ")", ",", "kernel_size", "=", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "n", ".", "weight", ".", "data", ".", "view", "(", "-", "1", ")", ".", "copy_", "(", "m", ".", "weight", ".", "data", ".", "view", "(", "-", "1", ")", ")", "\n", "n", ".", "bias", ".", "data", ".", "view", "(", "-", "1", ")", ".", "copy_", "(", "m", ".", "bias", ".", "data", ".", "view", "(", "-", "1", ")", ")", "\n", "m", "=", "n", "\n", "", "fully_conv_modules", ".", "append", "(", "m", ")", "\n", "x", "=", "m", "(", "x", ")", "\n", "", "return", "fully_conv_modules", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.fcn.bilinear_kernel": [[32, 55], ["kernel.sum", "abs", "abs"], "function", ["None"], ["", "def", "bilinear_kernel", "(", "size", ",", "normalize", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Make a 2D bilinear kernel suitable for upsampling/downsampling with\n    normalize=False/True. The kernel is size x size square.\n\n    Take\n        size: kernel size (square)\n        normalize: whether kernel sums to 1 (True) or not\n\n    Give\n        kernel: np.array with bilinear kernel coefficient\n    \"\"\"", "\n", "factor", "=", "(", "size", "+", "1", ")", "//", "2", "\n", "if", "size", "%", "2", "==", "1", ":", "\n", "        ", "center", "=", "factor", "-", "1", "\n", "", "else", ":", "\n", "        ", "center", "=", "factor", "-", "0.5", "\n", "", "og", "=", "np", ".", "ogrid", "[", ":", "size", ",", ":", "size", "]", "\n", "kernel", "=", "(", "1", "-", "abs", "(", "og", "[", "0", "]", "-", "center", ")", "/", "factor", ")", "*", "(", "1", "-", "abs", "(", "og", "[", "1", "]", "-", "center", ")", "/", "factor", ")", "\n", "if", "normalize", ":", "\n", "        ", "kernel", "/=", "kernel", ".", "sum", "(", ")", "\n", "", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.interactive_late.interactive_late.__init__": [[14, 46], ["torch.Module.__init__", "fcn.Downsampler", "backbone.vgg16", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "fcn.Interpolator", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__", "home.repos.pwc.inspect_result.shelhamer_revolver.model.backbone.vgg16"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "feat_dim", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "feat_dim", "=", "feat_dim", "or", "4096", "\n", "\n", "# downsampling for annotation mask", "\n", "self", ".", "anno_enc", "=", "Downsampler", "(", "1", ",", "32", ",", "odd", "=", "False", ")", "\n", "\n", "# fully conv encoder", "\n", "self", ".", "encoder", "=", "vgg16", "(", "is_caffe", "=", "True", ")", "\n", "del", "self", ".", "encoder", "[", "-", "3", ":", "]", "\n", "\n", "# classification head (including fc7 for compatibility with guidance)", "\n", "head", "=", "[", "(", "'fc7'", ",", "nn", ".", "Conv2d", "(", "self", ".", "feat_dim", "*", "2", ",", "self", ".", "feat_dim", "*", "2", ",", "1", ")", ")", ",", "\n", "(", "'fc7_relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc7_drop'", ",", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ")", ")", ",", "\n", "(", "'score'", ",", "nn", ".", "Conv2d", "(", "self", ".", "feat_dim", "*", "2", ",", "1", ",", "1", ")", ")", "]", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "head", ")", ")", "\n", "\n", "# normal init fc7", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "head", ".", "fc7", ".", "weight", ",", "0.", ",", ".001", ")", "\n", "# zero init score", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "head", ".", "score", ".", "weight", ",", "0.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "head", ".", "score", ".", "bias", ",", "0.", ")", "\n", "\n", "# bilinear interpolation for upsampling", "\n", "self", ".", "decoder", "=", "Interpolator", "(", "1", ",", "32", ",", "odd", "=", "False", ")", "\n", "\n", "# align output to input: see", "\n", "# https://github.com/BVLC/caffe/blob/master/python/caffe/coord_map.py", "\n", "self", ".", "encoder", "[", "0", "]", ".", "padding", "=", "(", "81", ",", "81", ")", "\n", "self", ".", "crop", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.interactive_late.interactive_late.forward": [[48, 75], ["interactive_late.interactive_late.encoder", "torch.pad", "torch.pad", "torch.pad", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "interactive_late.interactive_late.mask_feat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "interactive_late.interactive_late.head", "interactive_late.interactive_late.decoder", "upscores.permute.permute.permute", "interactive_late.interactive_late.size", "interactive_late.interactive_late.anno_enc", "interactive_late.interactive_late.mask_feat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "a.view"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.model.interactive_late.interactive_late.mask_feat", "home.repos.pwc.inspect_result.shelhamer_revolver.model.interactive_late.interactive_late.mask_feat"], ["", "def", "forward", "(", "self", ",", "im", ",", "anno", ")", ":", "\n", "        ", "h", ",", "w", "=", "im", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "\n", "# Extract image features", "\n", "im", "=", "self", ".", "encoder", "(", "im", ")", "\n", "\n", "# Pre-process annotations and downsample them", "\n", "anno", "=", "F", ".", "pad", "(", "anno", ",", "(", "0", ",", "31", ",", "0", ",", "31", ")", ",", "'constant'", ",", "0", ")", "\n", "annos", "=", "torch", ".", "unbind", "(", "anno", ",", "dim", "=", "1", ")", "\n", "annos", "=", "[", "self", ".", "anno_enc", "(", "a", "[", "None", ",", "...", "]", ")", "for", "a", "in", "annos", "]", "\n", "annos", "=", "[", "a", "/", "(", "1e-6", "+", "torch", ".", "sum", "(", "a", ".", "view", "(", "-", "1", ")", ",", "dim", "=", "0", ")", ")", "for", "a", "in", "annos", "]", "\n", "\n", "# align image + mask, then mask features by annotations for guidance", "\n", "im_feats", "=", "self", ".", "mask_feat", "(", "im", ",", "annos", "[", "0", "]", ",", "scale", "=", "False", ")", "\n", "guides", "=", "[", "self", ".", "mask_feat", "(", "im", ",", "a", ")", "for", "a", "in", "annos", "]", "\n", "\n", "# stack image-guidance pairs into batch dimension", "\n", "feat", "=", "torch", ".", "cat", "(", "[", "torch", ".", "cat", "(", "(", "im_feats", ",", "g", ")", ",", "dim", "=", "1", ")", "for", "g", "in", "guides", "]", ",", "dim", "=", "0", ")", "\n", "\n", "# score by shared metric", "\n", "scores", "=", "self", ".", "head", "(", "feat", ")", "\n", "# interpolate and crop", "\n", "upscores", "=", "self", ".", "decoder", "(", "scores", ")", "\n", "upscores", "=", "upscores", "[", "...", ",", "self", ".", "crop", ":", "self", ".", "crop", "+", "h", ",", "self", ".", "crop", ":", "self", ".", "crop", "+", "w", "]", "\n", "# unpack into annotation-wise channels", "\n", "upscores", "=", "upscores", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "return", "upscores", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.interactive_late.interactive_late.mask_feat": [[77, 93], ["x.size", "mask.size", "ValueError"], "methods", ["None"], ["", "def", "mask_feat", "(", "self", ",", "x", ",", "mask", ",", "scale", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Align spatial coordinates of feature and mask, crop feature, and\n        multiply by mask if scale is True.\n\n        Expect feature and mask to be N x C x H x W\n        \"\"\"", "\n", "# With input pad 81, fc6 crop offset is 0, so align upper lefts", "\n", "x_size", ",", "mask_size", "=", "x", ".", "size", "(", ")", ",", "mask", ".", "size", "(", ")", "\n", "if", "x_size", "[", "-", "2", ":", "]", "!=", "mask_size", "[", "-", "2", ":", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"Shape mismatch. Feature is {}, but mask is {}\"", ".", "format", "(", "x_size", ",", "mask_size", ")", ")", "\n", "", "m_dim", "=", "mask_size", "[", "-", "2", ":", "]", "\n", "x", "=", "x", "[", ":", ",", ":", ",", ":", "m_dim", "[", "0", "]", ",", ":", "m_dim", "[", "1", "]", "]", "\n", "if", "scale", ":", "\n", "            ", "x", "=", "x", "*", "mask", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.cofeat_late_lite_unshared.cofeat_late_lite_unshared.__init__": [[15, 47], ["interactive_late.interactive_late.__init__", "cofeat_late_lite_unshared.cofeat_late_lite_unshared.encoder._modules.update", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "fcn.Interpolator", "list", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__", "home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.update"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "feat_dim", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "256", ")", "# lite-headed: 256 vs. regular 4096", "\n", "\n", "# switch dim of fc6", "\n", "for", "k", "in", "list", "(", "self", ".", "encoder", ".", "_modules", ")", "[", "-", "3", ":", "]", ":", "\n", "            ", "del", "self", ".", "encoder", ".", "_modules", "[", "k", "]", "\n", "", "fc6", "=", "[", "(", "'fc6'", ",", "nn", ".", "Conv2d", "(", "512", ",", "self", ".", "feat_dim", ",", "7", ")", ")", ",", "\n", "(", "'fc6_relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc6_drop'", ",", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ")", ")", "]", "\n", "self", ".", "encoder", ".", "_modules", ".", "update", "(", "fc6", ")", "\n", "# normal init new layer", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "encoder", ".", "fc6", ".", "weight", ",", "0.", ",", ".001", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "encoder", ".", "fc6", ".", "bias", ",", "0.", ")", "\n", "\n", "# classification head (including fc7 for compatibility with guidance)", "\n", "# overrride channel dimension since the pos/neg weights are not shared,", "\n", "# so we need three: query, positive, and negative.", "\n", "head", "=", "[", "(", "'fc7'", ",", "nn", ".", "Conv2d", "(", "self", ".", "feat_dim", "*", "3", ",", "self", ".", "feat_dim", "*", "3", ",", "1", ")", ")", ",", "\n", "(", "'fc7_relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc7_drop'", ",", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ")", ")", ",", "\n", "(", "'score'", ",", "nn", ".", "Conv2d", "(", "self", ".", "feat_dim", "*", "3", ",", "num_classes", ",", "1", ")", ")", "]", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "head", ")", ")", "\n", "\n", "# normal init fc7", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "head", ".", "fc7", ".", "weight", ",", "0.", ",", ".001", ")", "\n", "# zero init score", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "head", ".", "score", ".", "weight", ",", "0.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "head", ".", "score", ".", "bias", ",", "0.", ")", "\n", "\n", "# bilinear interpolation for upsampling", "\n", "# override channel dimension for unshared output", "\n", "self", ".", "decoder", "=", "Interpolator", "(", "num_classes", ",", "32", ",", "odd", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.cofeat_late_lite_unshared.cofeat_late_lite_unshared.forward": [[48, 94], ["cofeat_late_lite_unshared.cofeat_late_lite_unshared.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pos_glob.repeat.repeat.div_", "neg_glob.repeat.repeat.div_", "pos_glob.repeat.repeat.repeat", "neg_glob.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cofeat_late_lite_unshared.cofeat_late_lite_unshared.head", "cofeat_late_lite_unshared.cofeat_late_lite_unshared.decoder", "cofeat_late_lite_unshared.cofeat_late_lite_unshared.size", "cofeat_late_lite_unshared.cofeat_late_lite_unshared.encoder", "torch.pad", "torch.pad", "torch.pad", "anno[].unsqueeze", "anno[].unsqueeze", "cofeat_late_lite_unshared.cofeat_late_lite_unshared.anno_enc", "cofeat_late_lite_unshared.cofeat_late_lite_unshared.anno_enc", "pos_annos.append", "neg_annos.append", "cofeat_late_lite_unshared.cofeat_late_lite_unshared.mask_feat", "cofeat_late_lite_unshared.cofeat_late_lite_unshared.mask_feat", "len", "len", "cofeat_late_lite_unshared.cofeat_late_lite_unshared.size", "cofeat_late_lite_unshared.cofeat_late_lite_unshared.size", "cofeat_late_lite_unshared.cofeat_late_lite_unshared.size", "cofeat_late_lite_unshared.cofeat_late_lite_unshared.size", "zip", "zip", "f.view", "f.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "f.size", "f.size", "cofeat_late_lite_unshared.cofeat_late_lite_unshared.view", "cofeat_late_lite_unshared.cofeat_late_lite_unshared.view"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.model.interactive_late.interactive_late.mask_feat", "home.repos.pwc.inspect_result.shelhamer_revolver.model.interactive_late.interactive_late.mask_feat"], ["", "def", "forward", "(", "self", ",", "qry", ",", "supp", ")", ":", "\n", "# query", "\n", "        ", "h", ",", "w", "=", "qry", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "qry", "=", "self", ".", "encoder", "(", "qry", ")", "\n", "\n", "# encode support images", "\n", "supp_feats", "=", "[", "self", ".", "encoder", "(", "im", ")", "for", "im", ",", "_", "in", "supp", "]", "\n", "\n", "# cast annotations into masks for feature maps", "\n", "pos_annos", ",", "neg_annos", "=", "[", "]", ",", "[", "]", "\n", "for", "_", ",", "anno", "in", "supp", ":", "\n", "            ", "anno", "=", "F", ".", "pad", "(", "anno", ",", "(", "0", ",", "31", ",", "0", ",", "31", ")", ",", "'constant'", ",", "0", ")", "\n", "pos", "=", "anno", "[", ":", ",", "0", ",", "...", "]", ".", "unsqueeze", "(", "1", ")", "\n", "neg", "=", "anno", "[", ":", ",", "1", ",", "...", "]", ".", "unsqueeze", "(", "1", ")", "\n", "pos_anno", "=", "self", ".", "anno_enc", "(", "pos", ")", "\n", "neg_anno", "=", "self", ".", "anno_enc", "(", "neg", ")", "\n", "pos_anno", "=", "pos_anno", "/", "(", "1e-6", "+", "torch", ".", "sum", "(", "pos_anno", ".", "view", "(", "-", "1", ")", ",", "dim", "=", "0", ")", ")", "\n", "neg_anno", "=", "neg_anno", "/", "(", "1e-6", "+", "torch", ".", "sum", "(", "neg_anno", ".", "view", "(", "-", "1", ")", ",", "dim", "=", "0", ")", ")", "\n", "pos_annos", ".", "append", "(", "pos_anno", ")", "\n", "neg_annos", ".", "append", "(", "neg_anno", ")", "\n", "\n", "# mask support by annotations", "\n", "", "pos_feats", "=", "[", "self", ".", "mask_feat", "(", "f", ",", "a", ")", "for", "f", ",", "a", "in", "zip", "(", "supp_feats", ",", "pos_annos", ")", "]", "\n", "neg_feats", "=", "[", "self", ".", "mask_feat", "(", "f", ",", "a", ")", "for", "f", ",", "a", "in", "zip", "(", "supp_feats", ",", "neg_annos", ")", "]", "\n", "\n", "# global pool support +/- features and tile across query feature", "\n", "pos_vec", "=", "torch", ".", "cat", "(", "[", "f", ".", "view", "(", "1", ",", "f", ".", "size", "(", "1", ")", ",", "-", "1", ")", "for", "f", "in", "pos_feats", "]", ",", "dim", "=", "2", ")", "\n", "neg_vec", "=", "torch", ".", "cat", "(", "[", "f", ".", "view", "(", "1", ",", "f", ".", "size", "(", "1", ")", ",", "-", "1", ")", "for", "f", "in", "neg_feats", "]", ",", "dim", "=", "2", ")", "\n", "pos_glob", "=", "torch", ".", "sum", "(", "pos_vec", ",", "dim", "=", "2", ")", "# 1 x C", "\n", "neg_glob", "=", "torch", ".", "sum", "(", "neg_vec", ",", "dim", "=", "2", ")", "\n", "pos_glob", "=", "pos_glob", "[", "...", ",", "None", ",", "None", "]", "# 1 x C x 1 x 1", "\n", "neg_glob", "=", "neg_glob", "[", "...", ",", "None", ",", "None", "]", "\n", "# normalize by support size (mask is normalized by no. annotations)", "\n", "pos_glob", "=", "pos_glob", ".", "div_", "(", "len", "(", "supp", ")", ")", "\n", "neg_glob", "=", "neg_glob", ".", "div_", "(", "len", "(", "supp", ")", ")", "\n", "\n", "# Tile the pooled features across the image feature", "\n", "pos_glob", "=", "pos_glob", ".", "repeat", "(", "1", ",", "1", ",", "qry", ".", "size", "(", "2", ")", ",", "qry", ".", "size", "(", "3", ")", ")", "\n", "neg_glob", "=", "neg_glob", ".", "repeat", "(", "1", ",", "1", ",", "qry", ".", "size", "(", "2", ")", ",", "qry", ".", "size", "(", "3", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "qry", ",", "neg_glob", ",", "pos_glob", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# inference from combined feature", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "x", "=", "self", ".", "decoder", "(", "x", ")", "\n", "x", "=", "x", "[", "...", ",", "self", ".", "crop", ":", "self", ".", "crop", "+", "h", ",", "self", ".", "crop", ":", "self", ".", "crop", "+", "w", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.__init__.prepare_model": [[34, 48], ["torch.load", "model.load_state_dict", "hasattr"], "function", ["None"], []], "home.repos.pwc.inspect_result.shelhamer_revolver.model.util.update_state_dict": [[7, 13], ["net.state_dict", "net.state_dict.update", "net.load_state_dict", "pretrained_dict.items"], "function", ["home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.update"], ["def", "update_state_dict", "(", "net", ",", "pretrained_dict", ")", ":", "\n", "    ", "model_dict", "=", "net", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "\n", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "net", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.interactive_late_glob_lite.interactive_late_glob_lite.__init__": [[15, 27], ["interactive_late_glob.interactive_late_glob.__init__", "interactive_late_glob_lite.interactive_late_glob_lite.encoder._modules.update", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "list", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__", "home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.update"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "256", ")", "# lite-headed: 256 vs. regular 4096", "\n", "# switch dim of fc6", "\n", "for", "k", "in", "list", "(", "self", ".", "encoder", ".", "_modules", ")", "[", "-", "3", ":", "]", ":", "\n", "            ", "del", "self", ".", "encoder", ".", "_modules", "[", "k", "]", "\n", "", "fc6", "=", "[", "(", "'fc6'", ",", "nn", ".", "Conv2d", "(", "512", ",", "self", ".", "feat_dim", ",", "7", ")", ")", ",", "\n", "(", "'fc6_relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc6_drop'", ",", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ")", ")", "]", "\n", "self", ".", "encoder", ".", "_modules", ".", "update", "(", "fc6", ")", "\n", "# normal init new layer", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "encoder", ".", "fc6", ".", "weight", ",", "0.", ",", ".001", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "encoder", ".", "fc6", ".", "bias", ",", "0.", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.model.backbone.vgg16": [[11, 50], ["torchvision.models.vgg16", "fcn.convolutionalize", "torch.Sequential", "nn.Sequential.modules", "collections.OrderedDict", "torch.utils.model_zoo.load_url", "zip", "isinstance", "list", "list", "zip", "nn.Sequential.parameters", "model_zoo.load_url.values", "new_p.data.copy_", "old_p.view_as"], "function", ["home.repos.pwc.inspect_result.shelhamer_revolver.model.backbone.vgg16", "home.repos.pwc.inspect_result.shelhamer_revolver.model.fcn.convolutionalize"], ["def", "vgg16", "(", "is_caffe", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Load the VGG-16 net for use as a fully convolutional backbone.\n\n    - cast to fully convolutional by converting `Linear` modules\n    - name the same way as the original paper (for style and sanity)\n    - load original Caffe weights (if requested)\n    - decapitate last classifier layer\n    - switch to ceiling mode for pooling like in Caffe\n\n    Take\n        is_caffe: flag for whether to load Caffe weights (default) or not\n    \"\"\"", "\n", "vgg16", "=", "models", ".", "vgg16", "(", "pretrained", "=", "True", ")", "\n", "# cast into fully convolutional form (as list of layers)", "\n", "vgg16", "=", "convolutionalize", "(", "list", "(", "vgg16", ".", "features", ")", "+", "list", "(", "vgg16", ".", "classifier", ")", ",", "\n", "(", "3", ",", "224", ",", "224", ")", ")", "\n", "# name layers like the original paper", "\n", "names", "=", "[", "'conv1_1'", ",", "'relu1_1'", ",", "'conv1_2'", ",", "'relu1_2'", ",", "'pool1'", ",", "\n", "'conv2_1'", ",", "'relu2_1'", ",", "'conv2_2'", ",", "'relu2_2'", ",", "'pool2'", ",", "\n", "'conv3_1'", ",", "'relu3_1'", ",", "'conv3_2'", ",", "'relu3_2'", ",", "'conv3_3'", ",", "'relu3_3'", ",", "'pool3'", ",", "\n", "'conv4_1'", ",", "'relu4_1'", ",", "'conv4_2'", ",", "'relu4_2'", ",", "'conv4_3'", ",", "'relu4_3'", ",", "'pool4'", ",", "\n", "'conv5_1'", ",", "'relu5_1'", ",", "'conv5_2'", ",", "'relu5_2'", ",", "'conv5_3'", ",", "'relu5_3'", ",", "'pool5'", ",", "\n", "'fc6'", ",", "'relu6'", ",", "'drop6'", ",", "'fc7'", ",", "'relu7'", ",", "'drop7'", ",", "'fc8'", "]", "\n", "vgg16", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "zip", "(", "names", ",", "vgg16", ")", ")", ")", "\n", "if", "is_caffe", ":", "\n", "# substitute original Caffe weights for improved fine-tuning accuracy", "\n", "# see https://github.com/jcjohnson/pytorch-vgg", "\n", "        ", "caffe_params", "=", "model_zoo", ".", "load_url", "(", "'https://s3-us-west-2.amazonaws.com/'", "\n", "'jcjohns-models/vgg16-00b39a1b.pth'", ")", "\n", "for", "new_p", ",", "old_p", "in", "zip", "(", "vgg16", ".", "parameters", "(", ")", ",", "caffe_params", ".", "values", "(", ")", ")", ":", "\n", "                ", "new_p", ".", "data", ".", "copy_", "(", "old_p", ".", "view_as", "(", "new_p", ")", ")", "\n", "# surgery: decapitate final classifier", "\n", "", "", "del", "vgg16", ".", "fc8", "\n", "# surgery: keep fuller spatial dims by including incomplete pooling regions", "\n", "for", "m", "in", "vgg16", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "MaxPool2d", ")", ":", "\n", "            ", "m", ".", "ceil_mode", "=", "True", "\n", "", "", "return", "vgg16", "\n", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.transforms.TransformData.__init__": [[22, 32], ["util.Wrapper.__init__", "len", "len", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "input_transforms", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "ds", "=", "dataset", "\n", "self", ".", "input_transforms", "=", "input_transforms", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "# safety check", "\n", "num_inputs", "=", "len", "(", "self", ".", "ds", "[", "0", "]", ")", "-", "2", "# inputs are all but target, aux", "\n", "if", "len", "(", "self", ".", "input_transforms", ")", "!=", "num_inputs", ":", "\n", "            ", "raise", "ValueError", "(", "\"The number of transformations {} does not match \"", "\n", "\"the number of inputs {}\"", ".", "format", "(", "len", "(", "self", ".", "input_transforms", ")", ",", "num_inputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.transforms.TransformData.__getitem__": [[33, 49], ["list", "enumerate", "zip", "transforms.TransformData.target_transform", "isinstance", "trans", "tr", "zip"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# extract data from inner dataset", "\n", "        ", "data", "=", "self", ".", "ds", "[", "idx", "]", "\n", "inputs", ",", "target", ",", "aux", "=", "data", "[", ":", "-", "2", "]", ",", "data", "[", "-", "2", "]", ",", "data", "[", "-", "1", "]", "\n", "inputs", "=", "list", "(", "inputs", ")", "# for updating by transform", "\n", "for", "i", ",", "(", "input_", ",", "trans", ")", "in", "enumerate", "(", "zip", "(", "inputs", ",", "self", ".", "input_transforms", ")", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "input_", ",", "list", ")", ":", "\n", "                ", "inputs", "[", "i", "]", "=", "trans", "(", "input_", ")", "if", "trans", "is", "not", "None", "else", "input_", "\n", "", "else", ":", "\n", "                ", "inputs", "[", "i", "]", "=", "[", "[", "tr", "(", "in_", ")", "if", "tr", "is", "not", "None", "else", "in_", "\n", "for", "in_", ",", "tr", "in", "zip", "(", "inp", ",", "trans", ")", "]", "for", "inp", "in", "input_", "]", "\n", "# transform target", "\n", "", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "# repackage data", "\n", "", "return", "(", "*", "inputs", ",", "target", ",", "aux", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.transforms.TransformData.__len__": [[50, 52], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.transforms.NpToTensor.__call__": [[60, 62], ["torch.from_numpy", "numpy.ascontiguousarray"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "arr", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "arr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.transforms.NpToTensor.__repr__": [[63, 65], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.transforms.NpToIm.__call__": [[73, 78], ["PIL.Image.fromarray", "PIL.Image.fromarray"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "arr", ")", ":", "\n", "        ", "if", "arr", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "            ", "return", "Image", ".", "fromarray", "(", "arr", ",", "mode", "=", "'P'", ")", "\n", "", "else", ":", "\n", "            ", "return", "Image", ".", "fromarray", "(", "arr", ",", "mode", "=", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.transforms.NpToIm.__repr__": [[79, 81], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.transforms.ImToNp.__call__": [[88, 90], ["numpy.array"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "im", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "im", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.transforms.ImToNp.__repr__": [[91, 93], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.transforms.ImToCaffe.__init__": [[103, 105], ["[].reshape", "numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ")", ":", "\n", "        ", "self", ".", "mean", "=", "np", ".", "array", "(", "mean", ",", "dtype", "=", "np", ".", "float32", ")", "[", ":", ":", "-", "1", "]", ".", "reshape", "(", "3", ",", "1", ",", "1", ")", "*", "255.", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.transforms.ImToCaffe.__call__": [[106, 110], ["[].transpose", "[].transpose.astype"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "im", ")", ":", "\n", "        ", "im", "=", "im", ".", "astype", "(", "np", ".", "float32", ")", "[", "...", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "im", "-=", "self", ".", "mean", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.transforms.ImToCaffe.__repr__": [[111, 113], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.transforms.SegToTensor.__call__": [[120, 123], ["torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy().long.astype"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "seg", ")", ":", "\n", "        ", "seg", "=", "torch", ".", "from_numpy", "(", "seg", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "long", "(", ")", "\n", "return", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.transforms.SegToTensor.__repr__": [[124, 126], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.transforms.DilateMask.__init__": [[133, 135], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fs", ")", ":", "\n", "        ", "self", ".", "fs", "=", "fs", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.transforms.DilateMask.__call__": [[136, 140], ["range", "numpy.array", "PIL.Image.fromarray().filter", "PIL.ImageFilter.MaxFilter", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "arr", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "arr", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "arr", "[", "i", ",", "...", "]", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "arr", "[", "i", ",", "...", "]", ")", ".", "filter", "(", "ImageFilter", ".", "MaxFilter", "(", "self", ".", "fs", ")", ")", ",", "dtype", "=", "arr", ".", "dtype", ")", "\n", "", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.transforms.DilateMask.__repr__": [[141, 143], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.transforms.ScaleMask.__init__": [[152, 154], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "factor", ")", ":", "\n", "        ", "self", ".", "factor", "=", "factor", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.transforms.ScaleMask.__call__": [[155, 158], ["arr.astype.astype.astype"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "arr", ")", ":", "\n", "        ", "arr", "=", "arr", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "arr", "*", "self", ".", "factor", "-", "(", "self", ".", "factor", "/", "2.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.transforms.ScaleMask.__repr__": [[159, 161], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.coco.COCO.__init__": [[37, 40], ["kwargs.get", "seg.SegData.__init__"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "[", "'root_dir'", "]", "=", "kwargs", ".", "get", "(", "'root_dir'", ",", "'data/coco2017'", ")", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.coco.COCO.load_slugs": [[41, 45], ["open", "f.read().splitlines", "coco.COCO.listing_path", "f.read"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.pascal.SBDDSemSeg.listing_path"], ["", "def", "load_slugs", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "listing_path", "(", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "slugs", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "return", "slugs", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.coco.COCO.listing_path": [[46, 48], ["None"], "methods", ["None"], ["", "def", "listing_path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "root_dir", "/", "f'{self.split}.txt'", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.coco.COCO.slug_to_image_path": [[49, 51], ["None"], "methods", ["None"], ["", "def", "slug_to_image_path", "(", "self", ",", "slug", ")", ":", "\n", "        ", "return", "self", ".", "root_dir", "/", "f'{self.split}2017'", "/", "f'{slug}.jpg'", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.coco.COCO.slug_to_annotation_path": [[52, 55], ["None"], "methods", ["None"], ["", "def", "slug_to_annotation_path", "(", "self", ",", "slug", ")", ":", "\n", "        ", "return", "(", "self", ".", "root_dir", "/", "f'annotations/seg_{self.split}2017'", "\n", "/", "f'{slug}.png'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.crop.CropSeg.__init__": [[16, 19], ["util.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__"], ["def", "__init__", "(", "self", ",", "ds", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "ds", ")", "\n", "self", ".", "ds", "=", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.crop.CropSeg.bbox": [[20, 31], ["list", "list.sort", "list.sort", "zip", "numpy.where"], "methods", ["None"], ["", "def", "bbox", "(", "self", ",", "lbl", ")", ":", "\n", "        ", "\"\"\"\n        Compute upper left and lower right coordinates\n        of minimal bounding box containing foreground\n        \"\"\"", "\n", "positives", "=", "list", "(", "zip", "(", "*", "np", ".", "where", "(", "lbl", "==", "1", ")", ")", ")", "\n", "positives", ".", "sort", "(", ")", "\n", "x1", ",", "x2", "=", "positives", "[", "0", "]", "[", "0", "]", ",", "positives", "[", "-", "1", "]", "[", "0", "]", "\n", "positives", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "y1", ",", "y2", "=", "positives", "[", "0", "]", "[", "1", "]", ",", "positives", "[", "-", "1", "]", "[", "1", "]", "\n", "return", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.crop.CropSeg.enlarge": [[32, 37], ["divmod"], "methods", ["None"], ["", "def", "enlarge", "(", "self", ",", "min_size", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "pad_x", ",", "remainder", "=", "divmod", "(", "64", "-", "(", "x2", "-", "x1", ")", ",", "2", ")", "\n", "x1", "-=", "pad_x", "+", "remainder", "\n", "x2", "+=", "pad_x", "\n", "return", "x1", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.crop.CropSeg.__getitem__": [[38, 74], ["numpy.full", "numpy.pad", "crop.CropSeg.bbox", "crop.CropSeg.enlarge", "crop.CropSeg.enlarge", "crop.CropSeg.__getitem__.safe_randint"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.crop.CropSeg.bbox", "home.repos.pwc.inspect_result.shelhamer_revolver.data.crop.CropSeg.enlarge", "home.repos.pwc.inspect_result.shelhamer_revolver.data.crop.CropSeg.enlarge"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "def", "safe_randint", "(", "low", ",", "high", ")", ":", "\n", "            ", "if", "low", "==", "0", "and", "high", "==", "0", ":", "\n", "                ", "return", "0", "\n", "", "return", "np", ".", "random", ".", "randint", "(", "low", ",", "high", ")", "\n", "\n", "", "im", ",", "target", ",", "aux", "=", "self", ".", "ds", "[", "idx", "]", "\n", "# min size for crop is 224 - 80*2 = 64", "\n", "# n.b. this must be even", "\n", "ms", "=", "64", "\n", "# pad image and target with 32px", "\n", "pad_im", "=", "np", ".", "full", "(", "(", "im", ".", "shape", "[", "0", "]", "+", "ms", ",", "im", ".", "shape", "[", "1", "]", "+", "ms", ",", "3", ")", ",", "np", ".", "array", "(", "self", ".", "mean", ")", "*", "255.", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pad_im", "[", "ms", "//", "2", ":", "-", "ms", "//", "2", ",", "ms", "//", "2", ":", "-", "ms", "//", "2", ",", ":", "]", "=", "im", "\n", "pad_target", "=", "np", ".", "pad", "(", "target", ",", "(", "(", "ms", "//", "2", ",", "ms", "//", "2", ")", ",", "(", "ms", "//", "2", ",", "ms", "//", "2", ")", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "# get instance bounding box, parameterized by upper left and lower right corners", "\n", "(", "bx1", ",", "by1", ",", "bx2", ",", "by2", ")", "=", "self", ".", "bbox", "(", "pad_target", ")", "\n", "# enlarge bounding box to minimum size", "\n", "x1", ",", "x2", "=", "self", ".", "enlarge", "(", "ms", ",", "bx1", ",", "bx2", ")", "\n", "y1", ",", "y2", "=", "self", ".", "enlarge", "(", "ms", ",", "by1", ",", "by2", ")", "\n", "# shift box and snap to instance without leaving padded image", "\n", "shift_x", "=", "safe_randint", "(", "max", "(", "-", "ms", ",", "-", "x1", ")", ",", "min", "(", "ms", ",", "pad_target", ".", "shape", "[", "0", "]", "-", "x2", ")", ")", "\n", "shift_y", "=", "safe_randint", "(", "max", "(", "-", "ms", ",", "-", "y1", ")", ",", "min", "(", "ms", ",", "pad_target", ".", "shape", "[", "1", "]", "-", "y2", ")", ")", "\n", "x1", ",", "x2", "=", "min", "(", "x1", "+", "shift_x", ",", "bx1", ")", ",", "max", "(", "x2", "+", "shift_x", ",", "bx2", ")", "\n", "y1", ",", "y2", "=", "min", "(", "y1", "+", "shift_y", ",", "by1", ")", ",", "max", "(", "y2", "+", "shift_y", ",", "by2", ")", "\n", "# scale box without leaving padded image", "\n", "x1", "+=", "safe_randint", "(", "max", "(", "-", "ms", ",", "-", "x1", ")", ",", "0", ")", "\n", "x2", "+=", "safe_randint", "(", "0", ",", "min", "(", "ms", ",", "pad_target", ".", "shape", "[", "0", "]", "-", "x2", ")", ")", "\n", "y1", "+=", "safe_randint", "(", "max", "(", "-", "ms", ",", "-", "y1", ")", ",", "0", ")", "\n", "y2", "+=", "safe_randint", "(", "0", ",", "min", "(", "ms", ",", "pad_target", ".", "shape", "[", "1", "]", "-", "y2", ")", ")", "\n", "# do the crop", "\n", "target", "=", "pad_target", "[", "x1", ":", "x2", ",", "y1", ":", "y2", "]", "\n", "im", "=", "pad_im", "[", "x1", ":", "x2", ",", "y1", ":", "y2", ",", ":", "]", "\n", "assert", "target", ".", "shape", "[", "0", "]", ">=", "ms", "and", "target", ".", "shape", "[", "1", "]", ">=", "ms", ",", "'Crop is too small: {}'", ".", "format", "(", "target", ".", "shape", ")", "\n", "return", "im", ",", "target", ",", "aux", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.crop.CropSeg.__len__": [[75, 77], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "slugs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.conditional.ConditionalInstSeg.__init__": [[24, 29], ["util.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__"], ["def", "__init__", "(", "self", ",", "qry_ds", ",", "supp_ds", ",", "shot", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "qry_ds", ")", "\n", "self", ".", "qry_ds", "=", "qry_ds", "\n", "self", ".", "supp_ds", "=", "supp_ds", "\n", "self", ".", "shot", "=", "shot", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.conditional.ConditionalInstSeg.__getitem__": [[30, 46], ["range", "aux.update", "numpy.zeros", "range", "supp.append", "supp_aux.append"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.update"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# n.b. one epoch loads each image in the query dataset once", "\n", "# load query image + target", "\n", "        ", "qry_im", ",", "qry_tgt", ",", "aux", "=", "self", ".", "qry_ds", "[", "idx", "]", "\n", "# load sparse input annotations", "\n", "supp", "=", "[", "]", "\n", "supp_aux", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "shot", ")", ":", "\n", "            ", "shot_im", ",", "shot_anno", ",", "shot_aux", "=", "self", ".", "supp_ds", "[", "idx", "]", "\n", "stacked_anno", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ",", "*", "shot_anno", ".", "shape", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "stacked_anno", "[", "k", "]", ".", "flat", "[", "shot_anno", ".", "flat", "==", "k", "]", "=", "1", "\n", "", "supp", ".", "append", "(", "(", "shot_im", ",", "stacked_anno", ")", ")", "\n", "supp_aux", ".", "append", "(", "shot_aux", ")", "\n", "", "aux", ".", "update", "(", "{", "'support'", ":", "supp_aux", "}", ")", "\n", "return", "qry_im", ",", "supp", ",", "qry_tgt", ",", "aux", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.conditional.ConditionalInstSeg.__len__": [[47, 49], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "qry_ds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.conditional.ConditionalSemSeg.__init__": [[60, 66], ["util.Wrapper.__init__", "list", "enumerate"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__"], ["def", "__init__", "(", "self", ",", "qry_ds", ",", "supp_ds", ",", "shot", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "qry_ds", ")", "\n", "self", ".", "qry_ds", "=", "qry_ds", "\n", "self", ".", "supp_datasets", "=", "supp_ds", "\n", "self", ".", "cls2idx", "=", "{", "list", "(", "ds", ".", "keep", ")", "[", "0", "]", ":", "i", "for", "i", ",", "ds", "in", "enumerate", "(", "self", ".", "supp_datasets", ")", "}", "\n", "self", ".", "shot", "=", "shot", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.conditional.ConditionalSemSeg.num_classes": [[67, 70], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "2", "# 0 == negative, 1 == positive", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.conditional.ConditionalSemSeg.__getitem__": [[71, 85], ["range", "aux.update", "numpy.zeros", "range", "supp.append", "supp_aux.append", "numpy.random.randint", "len"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.update"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "qry_im", ",", "qry_tgt", ",", "aux", "=", "self", ".", "qry_ds", "[", "idx", "]", "\n", "supp_ds", "=", "self", ".", "supp_datasets", "[", "self", ".", "cls2idx", "[", "aux", "[", "'cls'", "]", "]", "]", "\n", "supp", "=", "[", "]", "\n", "supp_aux", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "shot", ")", ":", "\n", "            ", "shot_im", ",", "shot_anno", ",", "shot_aux", "=", "supp_ds", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "supp_ds", ")", ")", "]", "\n", "stacked_anno", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ",", "*", "shot_anno", ".", "shape", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "stacked_anno", "[", "k", "]", ".", "flat", "[", "shot_anno", ".", "flat", "==", "k", "]", "=", "1", "\n", "", "supp", ".", "append", "(", "(", "shot_im", ",", "stacked_anno", ")", ")", "\n", "supp_aux", ".", "append", "(", "shot_aux", ")", "\n", "", "aux", ".", "update", "(", "{", "'support'", ":", "supp_aux", "}", ")", "\n", "return", "qry_im", ",", "supp", ",", "qry_tgt", ",", "aux", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.conditional.ConditionalSemSeg.__len__": [[86, 88], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "qry_ds", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.sparse.SparseSeg.__init__": [[55, 66], ["util.Wrapper.__init__", "sparse.SparseSeg.sparsity.append", "sparse.pick_sparsity"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__", "home.repos.pwc.inspect_result.shelhamer_revolver.data.sparse.pick_sparsity"], ["def", "__init__", "(", "self", ",", "dataset", ",", "count", "=", "1", ",", "static", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "ds", "=", "dataset", "\n", "self", ".", "count", "=", "count", "\n", "self", ".", "static", "=", "static", "\n", "if", "static", ":", "\n", "# pick fixed sparse points for every element in the dataset", "\n", "            ", "self", ".", "sparsity", "=", "[", "]", "\n", "for", "_", ",", "target", ",", "_", "in", "self", ".", "ds", ":", "\n", "                ", "self", ".", "sparsity", ".", "append", "(", "pick_sparsity", "(", "target", ",", "self", ".", "count", ",", "\n", "self", ".", "ds", ".", "ignore_index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.sparse.SparseSeg.__getitem__": [[67, 77], ["sparse.sparsify", "sparse.pick_sparsity"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.sparsify", "home.repos.pwc.inspect_result.shelhamer_revolver.data.sparse.pick_sparsity"], ["", "", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "im", ",", "target", ",", "aux", "=", "self", ".", "ds", "[", "idx", "]", "\n", "if", "self", ".", "count", "==", "-", "1", ":", "\n", "            ", "return", "im", ",", "target", ",", "aux", "\n", "", "if", "self", ".", "static", ":", "\n", "            ", "sparsity", "=", "self", ".", "sparsity", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "sparsity", "=", "pick_sparsity", "(", "target", ",", "self", ".", "count", ")", "\n", "", "sparse_target", "=", "sparsify", "(", "target", ",", "sparsity", ",", "self", ".", "ds", ".", "ignore_index", ")", "\n", "return", "im", ",", "sparse_target", ",", "aux", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.sparse.SparseSeg.__len__": [[78, 80], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ds", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.sparse.pick_sparsity": [[8, 28], ["isinstance", "numpy.array", "numpy.unique", "numpy.random.choice", "numpy.random.choice", "sparsity.append", "numpy.where", "len"], "function", ["None"], ["def", "pick_sparsity", "(", "target", ",", "count", ",", "ignore_index", "=", "255", ")", ":", "\n", "    ", "\"\"\"\n    Pick |count| sparse points for every value in the target and bundle up as\n    list of (value, indices) tuples.\n    If count is a list of values, sample randomly from it\n    \"\"\"", "\n", "if", "isinstance", "(", "count", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "        ", "count", "=", "np", ".", "random", ".", "choice", "(", "count", ")", "\n", "", "target", "=", "np", ".", "array", "(", "target", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "target_classes", "=", "np", ".", "unique", "(", "target", "[", "target", "!=", "ignore_index", "]", ")", "\n", "sparsity", "=", "[", "]", "\n", "for", "cls", "in", "target_classes", ":", "\n", "        ", "cls_idx", "=", "np", ".", "where", "(", "target", ".", "flat", "==", "cls", ")", "[", "0", "]", "\n", "# skip masks that are already too sparse or tiny", "\n", "if", "len", "(", "cls_idx", ")", "<", "count", ":", "\n", "            ", "continue", "\n", "", "sparse_idxs", "=", "np", ".", "random", ".", "choice", "(", "cls_idx", ",", "size", "=", "count", ",", "\n", "replace", "=", "False", ")", "\n", "sparsity", ".", "append", "(", "(", "cls", ",", "sparse_idxs", ")", ")", "\n", "", "return", "sparsity", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.sparse.sparsify": [[29, 37], ["numpy.full_like"], "function", ["None"], ["", "def", "sparsify", "(", "target", ",", "sparsity", ",", "ignore_index", "=", "255", ")", ":", "\n", "    ", "\"\"\"\n    Reduce full target to the given sparse points and ignore everything else.\n    \"\"\"", "\n", "sparse_target", "=", "np", ".", "full_like", "(", "target", ",", "ignore_index", ")", "\n", "for", "cls", ",", "indices", "in", "sparsity", ":", "\n", "        ", "sparse_target", ".", "flat", "[", "indices", "]", "=", "cls", "\n", "", "return", "sparse_target", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.interactive.InteractiveSeg.__init__": [[21, 25], ["util.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__"], ["def", "__init__", "(", "self", ",", "dense_ds", ",", "sparse_ds", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dense_ds", ")", "\n", "self", ".", "dense_ds", "=", "dense_ds", "\n", "self", ".", "sparse_ds", "=", "sparse_ds", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.interactive.InteractiveSeg.__getitem__": [[26, 36], ["aux.update", "numpy.zeros", "range"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.update"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# load regular image + target", "\n", "        ", "im", ",", "target", ",", "aux", "=", "self", ".", "dense_ds", "[", "idx", "]", "\n", "# load sparse input annotations", "\n", "_", ",", "anno", ",", "sparse_aux", "=", "self", ".", "sparse_ds", "[", "idx", "]", "\n", "aux", ".", "update", "(", "sparse_aux", ")", "\n", "stacked_anno", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ",", "*", "anno", ".", "shape", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "stacked_anno", "[", "k", "]", ".", "flat", "[", "anno", ".", "flat", "==", "k", "]", "=", "1", "\n", "", "return", "im", ",", "stacked_anno", ",", "target", ",", "aux", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.interactive.InteractiveSeg.__len__": [[37, 39], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dense_ds", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.pascal.VOCSeg.__init__": [[54, 58], ["kwargs.get", "kwargs.get", "seg.SegData.__init__"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "[", "'root_dir'", "]", "=", "kwargs", ".", "get", "(", "'root_dir'", ",", "'data/voc2012'", ")", "\n", "kwargs", "[", "'split'", "]", "=", "kwargs", ".", "get", "(", "'split'", ",", "'train'", ")", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.pascal.VOCSeg.load_slugs": [[59, 64], ["pascal.VOCSeg.listing_path", "open", "f.read().splitlines", "f.read"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.pascal.SBDDSemSeg.listing_path"], ["", "def", "load_slugs", "(", "self", ")", ":", "\n", "        ", "listing", "=", "self", ".", "listing_path", "(", ")", "\n", "with", "open", "(", "listing", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "slugs", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "return", "slugs", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.pascal.VOCSeg.listing_path": [[65, 67], ["str"], "methods", ["None"], ["", "def", "listing_path", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "root_dir", "/", "'ImageSets'", "/", "'Segmentation'", "/", "'{}.txt'", ".", "format", "(", "self", ".", "split", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.pascal.VOCSeg.slug_to_image_path": [[68, 70], ["str"], "methods", ["None"], ["", "def", "slug_to_image_path", "(", "self", ",", "slug", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "root_dir", "/", "'JPEGImages'", "/", "'{}.jpg'", ".", "format", "(", "slug", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.pascal.VOCSeg.slug_to_annotation_path": [[71, 74], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "slug_to_annotation_path", "(", "self", ",", "slug", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.pascal.VOCSemSeg.slug_to_annotation_path": [[78, 80], ["str"], "methods", ["None"], ["    ", "def", "slug_to_annotation_path", "(", "self", ",", "slug", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "root_dir", "/", "'SegmentationClass'", "/", "'{}.png'", ".", "format", "(", "slug", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.pascal.VOCInstSeg.slug_to_annotation_path": [[84, 86], ["str"], "methods", ["None"], ["    ", "def", "slug_to_annotation_path", "(", "self", ",", "slug", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "root_dir", "/", "'SegmentationObject'", "/", "'{}.png'", ".", "format", "(", "slug", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.pascal.SBDDSemSeg.__init__": [[114, 117], ["kwargs.get", "pascal.VOCSeg.__init__"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "[", "'root_dir'", "]", "=", "kwargs", ".", "get", "(", "'root_dir'", ",", "'data/sbdd'", ")", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.pascal.SBDDSemSeg.listing_path": [[118, 120], ["str"], "methods", ["None"], ["", "def", "listing_path", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "root_dir", "/", "'dataset'", "/", "'{}.txt'", ".", "format", "(", "self", ".", "split", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.pascal.SBDDSemSeg.slug_to_image_path": [[121, 123], ["str"], "methods", ["None"], ["", "def", "slug_to_image_path", "(", "self", ",", "slug", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "root_dir", "/", "'dataset'", "/", "'img'", "/", "'{}.jpg'", ".", "format", "(", "slug", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.pascal.SBDDSemSeg.slug_to_annotation_path": [[124, 127], ["str"], "methods", ["None"], ["", "def", "slug_to_annotation_path", "(", "self", ",", "slug", ")", ":", "\n", "        ", "anno_format", "=", "'mat'", "if", "self", ".", "split", "!=", "'trainaug'", "else", "'png'", "\n", "return", "str", "(", "self", ".", "root_dir", "/", "'dataset'", "/", "self", ".", "anno_type", "/", "'{}.{}'", ".", "format", "(", "slug", ",", "anno_format", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.pascal.SBDDSemSeg.load_annotation": [[128, 135], ["super().load_annotation", "mat.astype", "scipy.io.loadmat"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.SegData.load_annotation"], ["", "def", "load_annotation", "(", "self", ",", "path", ")", ":", "\n", "        ", "if", "self", ".", "split", "==", "'trainaug'", ":", "\n", "            ", "return", "super", "(", ")", ".", "load_annotation", "(", "path", ")", "\n", "", "else", ":", "\n", "            ", "import", "scipy", ".", "io", "\n", "mat", "=", "scipy", ".", "io", ".", "loadmat", "(", "path", ")", "[", "'GT{}'", ".", "format", "(", "self", ".", "anno_type", ")", "]", "[", "0", "]", "[", "'Segmentation'", "]", "[", "0", "]", "\n", "return", "mat", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.pascal.SBDDSemSeg.anno_type": [[136, 139], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "anno_type", "(", "self", ")", ":", "\n", "        ", "return", "'cls'", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.pascal.SBDDInstSeg.anno_type": [[143, 146], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "anno_type", "(", "self", ")", ":", "\n", "        ", "return", "'inst'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.prepare_semantic_data": [[20, 39], ["__init__.make_cache_path", "os.path.isfile", "dataset", "torchvision.transforms.Compose", "transforms.SegToTensor", "transforms.TransformData", "pickle.dump", "Exception", "Exception", "pickle.load", "open", "open", "transforms.ImToCaffe", "transforms.NpToTensor"], "function", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.make_cache_path"], []], "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.prepare_fgbg_data": [[40, 64], ["__init__.make_cache_path", "os.path.isfile", "dataset", "__init__.filter_classes", "__init__.balance_classes", "filter.TargetMapper", "torchvision.transforms.Compose", "transforms.SegToTensor", "transforms.TransformData", "pickle.dump", "Exception", "pickle.load", "range", "open", "open", "len", "transforms.ImToCaffe", "transforms.NpToTensor", "int", "range", "len"], "function", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.make_cache_path", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.filter_classes", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.balance_classes"], []], "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.prepare_interactive_data": [[65, 88], ["__init__.make_cache_path", "os.path.isfile", "sem_dataset", "inst_dataset", "seg.MaskInstSeg", "__init__.filter_classes", "__init__.balance_classes", "__init__.sparsify", "interactive.InteractiveSeg", "torchvision.transforms.Compose", "transforms.SegToTensor", "transforms.TransformData", "pickle.dump", "pickle.load", "open", "open", "transforms.ImToCaffe", "transforms.NpToTensor"], "function", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.make_cache_path", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.filter_classes", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.balance_classes", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.sparsify"], []], "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.prepare_interactive_class_data": [[89, 110], ["__init__.make_cache_path", "os.path.isfile", "sem_dataset", "seg.MaskSemSeg", "__init__.filter_classes", "__init__.balance_classes", "__init__.sparsify", "interactive.InteractiveSeg", "torchvision.transforms.Compose", "transforms.SegToTensor", "transforms.TransformData", "pickle.dump", "pickle.load", "open", "open", "transforms.ImToCaffe", "transforms.NpToTensor"], "function", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.make_cache_path", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.filter_classes", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.balance_classes", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.sparsify"], []], "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.prepare_early_interactive_data": [[111, 135], ["__init__.make_cache_path", "os.path.isfile", "sem_dataset", "inst_dataset", "seg.MaskInstSeg", "__init__.filter_classes", "__init__.balance_classes", "__init__.sparsify", "interactive.InteractiveSeg", "torchvision.transforms.Compose", "transforms.SegToTensor", "torchvision.transforms.Compose", "transforms.TransformData", "pickle.dump", "pickle.load", "open", "open", "transforms.ImToCaffe", "transforms.NpToTensor", "transforms.DilateMask", "transforms.ScaleMask"], "function", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.make_cache_path", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.filter_classes", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.balance_classes", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.sparsify"], []], "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.prepare_early_interactive_class_data": [[136, 158], ["__init__.make_cache_path", "os.path.isfile", "sem_dataset", "seg.MaskSemSeg", "__init__.filter_classes", "__init__.balance_classes", "__init__.sparsify", "interactive.InteractiveSeg", "torchvision.transforms.Compose", "transforms.SegToTensor", "torchvision.transforms.Compose", "transforms.TransformData", "pickle.dump", "pickle.load", "open", "open", "transforms.ImToCaffe", "transforms.NpToTensor", "transforms.DilateMask", "transforms.ScaleMask"], "function", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.make_cache_path", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.filter_classes", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.balance_classes", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.sparsify"], []], "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.prepare_early_conditional_data": [[159, 186], ["__init__.make_cache_path", "os.path.isfile", "sem_dataset", "inst_dataset", "seg.MaskInstSeg", "__init__.filter_classes", "__init__.balance_classes", "crop.CropSeg", "__init__.sparsify", "conditional.ConditionalInstSeg", "torchvision.transforms.Compose", "transforms.SegToTensor", "torchvision.transforms.Compose", "transforms.TransformData", "pickle.dump", "pickle.load", "open", "open", "transforms.ImToCaffe", "transforms.NpToTensor", "transforms.DilateMask", "transforms.ScaleMask"], "function", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.make_cache_path", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.filter_classes", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.balance_classes", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.sparsify"], []], "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.prepare_early_conditional_class_data": [[187, 216], ["__init__.make_cache_path", "os.path.isfile", "sem_dataset", "seg.MaskSemSeg", "__init__.filter_classes", "conditional.ConditionalSemSeg", "torchvision.transforms.Compose", "transforms.SegToTensor", "torchvision.transforms.Compose", "transforms.TransformData", "pickle.dump", "pickle.load", "__init__.balance_classes", "__init__.sparsify", "open", "open", "filter.TargetFilter", "transforms.ImToCaffe", "transforms.NpToTensor", "transforms.DilateMask", "transforms.ScaleMask", "range", "len"], "function", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.make_cache_path", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.filter_classes", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.balance_classes", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.sparsify"], []], "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.prepare_late_conditional_data": [[217, 243], ["__init__.make_cache_path", "os.path.isfile", "sem_dataset", "inst_dataset", "seg.MaskInstSeg", "__init__.filter_classes", "__init__.balance_classes", "crop.CropSeg", "__init__.sparsify", "conditional.ConditionalInstSeg", "torchvision.transforms.Compose", "transforms.SegToTensor", "transforms.TransformData", "pickle.dump", "pickle.load", "open", "open", "transforms.ImToCaffe", "transforms.NpToTensor"], "function", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.make_cache_path", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.filter_classes", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.balance_classes", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.sparsify"], []], "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.prepare_late_conditional_class_data": [[244, 272], ["__init__.make_cache_path", "os.path.isfile", "sem_dataset", "seg.MaskSemSeg", "__init__.filter_classes", "conditional.ConditionalSemSeg", "torchvision.transforms.Compose", "transforms.SegToTensor", "transforms.TransformData", "pickle.dump", "pickle.load", "__init__.balance_classes", "__init__.sparsify", "open", "open", "filter.TargetFilter", "transforms.ImToCaffe", "transforms.NpToTensor", "range", "len"], "function", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.make_cache_path", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.filter_classes", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.balance_classes", "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.sparsify"], []], "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.prepare_loader": [[273, 282], ["torch.utils.data.DataLoader", "util.InputsTargetAuxCollate"], "function", ["None"], []], "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.make_cache_path": [[283, 288], ["str"], "function", ["None"], []], "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.filter_classes": [[289, 294], ["filter.TargetFilter"], "function", ["None"], []], "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.balance_classes": [[295, 304], ["min", "class_balance.ClassBalance", "filter.TargetFilter", "filter.SubSampler", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.shelhamer_revolver.data.__init__.sparsify": [[305, 309], ["sparse.SparseSeg", "list", "range"], "function", ["None"], []], "home.repos.pwc.inspect_result.shelhamer_revolver.data.util.InputsTargetAuxCollate.__call__": [[10, 25], ["TypeError", "isinstance", "list", "enumerate", "torch.utils.data.dataloader.default_collate", "len", "type", "isinstance", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate"], "methods", ["None"], ["if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "net", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.util.Wrapper.__init__": [[32, 34], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shelhamer_revolver.data.util.Wrapper.__getattr__": [[35, 53], ["attr.startswith", "attr.endswith", "super().__getattr__", "getattr"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.util.Wrapper.__getattr__"], []], "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.SegData.__init__": [[30, 35], ["pathlib.Path", "seg.SegData.load_slugs"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.load_slugs"], ["def", "__init__", "(", "self", ",", "root_dir", "=", "None", ",", "split", "=", "None", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "Path", "(", "root_dir", ")", "\n", "self", ".", "split", "=", "split", "\n", "\n", "self", ".", "slugs", "=", "self", ".", "load_slugs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.SegData.load_slugs": [[36, 39], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "load_slugs", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.SegData.slug_to_image_path": [[40, 43], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "slug_to_image_path", "(", "self", ",", "slug", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.SegData.load_image": [[44, 46], ["numpy.array", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "path", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "Image", ".", "open", "(", "path", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.SegData.slug_to_annotation_path": [[47, 50], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "slug_to_annotation_path", "(", "self", ",", "slug", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.SegData.load_annotation": [[51, 53], ["numpy.array", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_annotation", "(", "self", ",", "path", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "Image", ".", "open", "(", "path", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.SegData.num_classes": [[54, 57], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.SegData.__getitem__": [[58, 64], ["seg.SegData.load_image", "seg.SegData.load_annotation", "seg.SegData.slug_to_image_path", "seg.SegData.slug_to_annotation_path"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.SegData.load_image", "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.SegData.load_annotation", "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.SegData.slug_to_image_path", "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.SegData.slug_to_annotation_path"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "slug", "=", "self", ".", "slugs", "[", "idx", "]", "\n", "im", "=", "self", ".", "load_image", "(", "self", ".", "slug_to_image_path", "(", "slug", ")", ")", "\n", "target", "=", "self", ".", "load_annotation", "(", "self", ".", "slug_to_annotation_path", "(", "slug", ")", ")", "\n", "# third return is reserved for auxiliary info dict", "\n", "return", "im", ",", "target", ",", "{", "'slug'", ":", "slug", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.SegData.__len__": [[65, 67], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "slugs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.MaskSemSeg.__init__": [[81, 85], ["util.Wrapper.__init__", "seg.MaskSemSeg.load_slugs"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__", "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.load_slugs"], ["def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "ds", "=", "dataset", "\n", "self", ".", "slugs", "=", "self", ".", "load_slugs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.MaskSemSeg.load_slugs": [[86, 96], ["enumerate", "numpy.array", "numpy.unique", "slugs.extend"], "methods", ["None"], ["", "def", "load_slugs", "(", "self", ")", ":", "\n", "        ", "slugs", "=", "[", "]", "\n", "for", "i", ",", "(", "_", ",", "target", ",", "_", ")", "in", "enumerate", "(", "self", ".", "ds", ")", ":", "\n", "            ", "target", "=", "np", ".", "array", "(", "target", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# take all classes (but not background and ignore)", "\n", "classes", "=", "np", ".", "unique", "(", "target", ")", "\n", "classes", "=", "classes", "[", "classes", "!=", "0", "]", "\n", "classes", "=", "classes", "[", "classes", "!=", "self", ".", "ds", ".", "ignore_index", "]", "\n", "slugs", ".", "extend", "(", "[", "(", "i", ",", "{", "'cls'", ":", "cls", "}", ")", "for", "cls", "in", "classes", "]", ")", "\n", "", "return", "slugs", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.MaskSemSeg.num_classes": [[97, 100], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "2", "# 0 == negative, 1 == positive", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.MaskSemSeg.__getitem__": [[101, 112], ["aux.update", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.update"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# unpack slug and inner data", "\n", "        ", "inner_idx", ",", "this_aux", "=", "self", ".", "slugs", "[", "idx", "]", "\n", "im", ",", "target", ",", "aux", "=", "self", ".", "ds", "[", "inner_idx", "]", "\n", "# compose aux", "\n", "aux", ".", "update", "(", "this_aux", ")", "\n", "# make mask", "\n", "mask", "=", "np", ".", "zeros_like", "(", "target", ")", "\n", "mask", "[", "target", "==", "aux", "[", "'cls'", "]", "]", "=", "1", "\n", "mask", "[", "target", "==", "self", ".", "ds", ".", "ignore_index", "]", "=", "self", ".", "ds", ".", "ignore_index", "\n", "return", "im", ",", "mask", ",", "aux", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.MaskSemSeg.__len__": [[113, 115], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "slugs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.MaskInstSeg.__init__": [[129, 134], ["util.Wrapper.__init__", "seg.MaskInstSeg.load_slugs"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__", "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.load_slugs"], ["def", "__init__", "(", "self", ",", "cls_dataset", ",", "inst_dataset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "inst_dataset", ")", "\n", "self", ".", "cls_ds", "=", "cls_dataset", "\n", "self", ".", "inst_ds", "=", "inst_dataset", "\n", "self", ".", "slugs", "=", "self", ".", "load_slugs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.MaskInstSeg.load_slugs": [[135, 148], ["enumerate", "zip", "numpy.array", "numpy.unique", "numpy.array", "slugs.extend", "numpy.argmax", "numpy.bincount", "zip"], "methods", ["None"], ["", "def", "load_slugs", "(", "self", ")", ":", "\n", "        ", "slugs", "=", "[", "]", "\n", "for", "i", ",", "(", "cls", ",", "inst", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "cls_ds", ",", "self", ".", "inst_ds", ")", ")", ":", "\n", "            ", "inst_target", "=", "np", ".", "array", "(", "inst", "[", "1", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# take all instances (but not background and ignore)", "\n", "instances", "=", "np", ".", "unique", "(", "inst_target", ")", "\n", "instances", "=", "instances", "[", "instances", "!=", "0", "]", "\n", "instances", "=", "instances", "[", "instances", "!=", "self", ".", "inst_ds", ".", "ignore_index", "]", "\n", "cls_target", "=", "np", ".", "array", "(", "cls", "[", "1", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# the class of every instance is the mode of the class target in the instance mask", "\n", "classes", "=", "[", "np", ".", "argmax", "(", "np", ".", "bincount", "(", "cls_target", "[", "inst_target", "==", "inst", "]", ".", "flat", ")", ")", "for", "inst", "in", "instances", "]", "\n", "slugs", ".", "extend", "(", "[", "(", "i", ",", "{", "'cls'", ":", "cls", ",", "'inst'", ":", "inst", "}", ")", "for", "cls", ",", "inst", "in", "zip", "(", "classes", ",", "instances", ")", "]", ")", "\n", "", "return", "slugs", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.MaskInstSeg.num_classes": [[149, 152], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "2", "# 0 == negative, 1 == positive", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.MaskInstSeg.__getitem__": [[153, 164], ["aux.update", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.update"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# unpack slug and inner data", "\n", "        ", "inner_idx", ",", "this_aux", "=", "self", ".", "slugs", "[", "idx", "]", "\n", "im", ",", "target", ",", "aux", "=", "self", ".", "inst_ds", "[", "inner_idx", "]", "\n", "# compose aux", "\n", "aux", ".", "update", "(", "this_aux", ")", "\n", "# make mask", "\n", "mask", "=", "np", ".", "zeros_like", "(", "target", ")", "\n", "mask", "[", "target", "==", "aux", "[", "'inst'", "]", "]", "=", "1", "\n", "mask", "[", "target", "==", "self", ".", "inst_ds", ".", "ignore_index", "]", "=", "self", ".", "inst_ds", ".", "ignore_index", "\n", "return", "im", ",", "mask", ",", "aux", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.seg.MaskInstSeg.__len__": [[165, 167], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "slugs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.class_balance.ClassBalance.__init__": [[16, 22], ["util.Wrapper.__init__", "len", "len", "Exception", "set", "len"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__"], ["def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "datasets", "[", "0", "]", ")", "\n", "if", "len", "(", "set", "(", "[", "len", "(", "ds", ")", "for", "ds", "in", "datasets", "]", ")", ")", "!=", "1", ":", "\n", "            ", "raise", "Exception", "(", "'Cannot class-balance datasets of different lengths'", ")", "\n", "", "self", ".", "ds_len", "=", "len", "(", "datasets", "[", "0", "]", ")", "\n", "self", ".", "datasets", "=", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.class_balance.ClassBalance.__getitem__": [[23, 25], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "datasets", "[", "idx", "//", "self", ".", "ds_len", "]", "[", "idx", "%", "self", ".", "ds_len", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.class_balance.ClassBalance.__len__": [[26, 28], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ds_len", "*", "len", "(", "self", ".", "datasets", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.TargetMapper.__init__": [[21, 25], ["util.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "mapping", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "ds", "=", "dataset", "\n", "self", ".", "mapping", "=", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.TargetMapper.num_classes": [[26, 30], ["len", "set", "filter.TargetMapper.mapping.values"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "# note: only correct for complete mappings with a key for every class", "\n", "        ", "return", "len", "(", "set", "(", "self", ".", "mapping", ".", "values", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.TargetMapper.__getitem__": [[31, 39], ["target.copy", "filter.TargetMapper.mapping.items", "aux.update"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.revolver.metrics.SegScorer.update"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "im", ",", "target", ",", "aux", "=", "self", ".", "ds", "[", "idx", "]", "\n", "# map target", "\n", "map_target", "=", "target", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "mapping", ".", "items", "(", ")", ":", "\n", "            ", "map_target", "[", "target", "==", "k", "]", "=", "v", "\n", "", "aux", ".", "update", "(", "{", "'mapping'", ":", "self", ".", "mapping", ",", "'full_target'", ":", "target", "}", ")", "\n", "return", "im", ",", "map_target", ",", "aux", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.TargetMapper.__len__": [[40, 42], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.TargetFilter.__init__": [[54, 59], ["util.Wrapper.__init__", "set", "filter.TargetFilter.load_slugs"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__", "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.load_slugs"], ["def", "__init__", "(", "self", ",", "dataset", ",", "keep", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "ds", "=", "dataset", "\n", "self", ".", "keep", "=", "set", "(", "keep", ")", "\n", "self", ".", "slugs", "=", "self", ".", "load_slugs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.TargetFilter.load_slugs": [[60, 73], ["enumerate", "set", "len", "slugs.append", "numpy.unique"], "methods", ["None"], ["", "def", "load_slugs", "(", "self", ")", ":", "\n", "        ", "slugs", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "ds", ")", ":", "\n", "            ", "target", ",", "aux", "=", "data", "[", "-", "2", "]", ",", "data", "[", "-", "1", "]", "\n", "keep", "=", "False", "\n", "if", "'cls'", "in", "aux", ":", "# mask datasets", "\n", "                ", "keep", "=", "aux", "[", "'cls'", "]", "in", "self", ".", "keep", "\n", "", "else", ":", "# image datasets", "\n", "                ", "classes", "=", "set", "(", "np", ".", "unique", "(", "target", ")", ")", "\n", "keep", "=", "len", "(", "self", ".", "keep", "&", "classes", ")", "\n", "", "if", "keep", ":", "\n", "                ", "slugs", ".", "append", "(", "i", ")", "\n", "", "", "return", "slugs", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.TargetFilter.__getitem__": [[74, 77], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "inner_idx", "=", "self", ".", "slugs", "[", "idx", "]", "\n", "return", "self", ".", "ds", "[", "inner_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.TargetFilter.__len__": [[78, 80], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "slugs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.MultiFilter.__init__": [[94, 98], ["util.Wrapper.__init__", "filter.MultiFilter.load_slugs"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__", "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.load_slugs"], ["def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "ds", "=", "dataset", "\n", "self", ".", "slugs", "=", "self", ".", "load_slugs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.MultiFilter.load_slugs": [[99, 109], ["enumerate", "numpy.unique", "len", "slugs.append"], "methods", ["None"], ["", "def", "load_slugs", "(", "self", ")", ":", "\n", "        ", "slugs", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "ds", ")", ":", "\n", "            ", "target", "=", "data", "[", "-", "2", "]", "\n", "masks", "=", "np", ".", "unique", "(", "target", ")", "\n", "masks", "=", "masks", "[", "masks", "!=", "0", "]", "\n", "masks", "=", "masks", "[", "masks", "!=", "self", ".", "ds", ".", "ignore_index", "]", "\n", "if", "len", "(", "masks", ")", ">", "1", ":", "\n", "                ", "slugs", ".", "append", "(", "i", ")", "\n", "", "", "return", "slugs", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.MultiFilter.__getitem__": [[110, 113], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "inner_idx", "=", "self", ".", "slugs", "[", "idx", "]", "\n", "return", "self", ".", "ds", "[", "inner_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.MultiFilter.__len__": [[114, 116], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "slugs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__": [[120, 127], ["util.Wrapper.__init__", "filter.SubSampler.load_slugs", "len", "Exception"], "methods", ["home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__init__", "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.load_slugs"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "num_sample", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "if", "num_sample", ">", "len", "(", "dataset", ")", ":", "\n", "            ", "raise", "Exception", "(", "'Number to sample is larger than the number of slugs'", ")", "\n", "", "self", ".", "ds", "=", "dataset", "\n", "self", ".", "num_sample", "=", "num_sample", "\n", "self", ".", "slugs", "=", "self", ".", "load_slugs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.load_slugs": [[128, 131], ["list", "numpy.random.choice", "len"], "methods", ["None"], ["", "def", "load_slugs", "(", "self", ")", ":", "\n", "        ", "slugs", "=", "list", "(", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "ds", ")", ",", "self", ".", "num_sample", ",", "replace", "=", "False", ")", ")", "\n", "return", "slugs", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__getitem__": [[132, 135], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "inner_idx", "=", "self", ".", "slugs", "[", "idx", "]", "\n", "return", "self", ".", "ds", "[", "inner_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shelhamer_revolver.data.filter.SubSampler.__len__": [[136, 138], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "slugs", ")", "\n", "\n"]]}