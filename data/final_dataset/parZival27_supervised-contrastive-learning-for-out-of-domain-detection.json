{"home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.train.DataLoader.__init__": [[342, 354], ["len", "train.DataLoader._shuffle_indices", "list"], "methods", ["home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.train.DataLoader._shuffle_indices"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "batch_size", ",", "mode", "=", "'train'", ",", "use_bert", "=", "False", ",", "raw_text", "=", "None", ")", ":", "\n", "        ", "self", ".", "use_bert", "=", "use_bert", "\n", "if", "self", ".", "use_bert", ":", "\n", "            ", "self", ".", "inp", "=", "list", "(", "raw_text", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "inp", "=", "data", "[", "0", "]", "\n", "", "self", ".", "tgt", "=", "data", "[", "1", "]", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_samples", "=", "len", "(", "data", "[", "0", "]", ")", "\n", "self", ".", "n_batches", "=", "self", ".", "n_samples", "//", "self", ".", "batch_size", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "_shuffle_indices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.train.DataLoader._shuffle_indices": [[355, 362], ["numpy.arange", "numpy.random.permutation"], "methods", ["None"], ["", "def", "_shuffle_indices", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "indices", "=", "np", ".", "arange", "(", "self", ".", "n_samples", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "indices", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "n_samples", ")", "\n", "", "self", ".", "index", "=", "0", "\n", "self", ".", "batch_index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.train.DataLoader._create_batch": [[363, 381], ["tuple", "batch.append", "zip", "torch.LongTensor", "torch.FloatTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "_create_batch", "(", "self", ")", ":", "\n", "        ", "batch", "=", "[", "]", "\n", "n", "=", "0", "\n", "while", "n", "<", "self", ".", "batch_size", ":", "\n", "            ", "_index", "=", "self", ".", "indices", "[", "self", ".", "index", "]", "\n", "batch", ".", "append", "(", "(", "self", ".", "inp", "[", "_index", "]", ",", "self", ".", "tgt", "[", "_index", "]", ")", ")", "\n", "self", ".", "index", "+=", "1", "\n", "n", "+=", "1", "\n", "", "self", ".", "batch_index", "+=", "1", "\n", "seq", ",", "label", "=", "tuple", "(", "zip", "(", "*", "batch", ")", ")", "\n", "if", "not", "self", ".", "use_bert", ":", "\n", "            ", "seq", "=", "torch", ".", "LongTensor", "(", "seq", ")", "\n", "", "if", "self", ".", "mode", "not", "in", "[", "'test'", ",", "'augment'", "]", ":", "\n", "            ", "label", "=", "torch", ".", "FloatTensor", "(", "label", ")", "\n", "", "elif", "self", ".", "mode", "==", "'augment'", ":", "\n", "            ", "label", "=", "torch", ".", "LongTensor", "(", "label", ")", "\n", "\n", "", "return", "seq", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.train.DataLoader.__len__": [[382, 384], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.train.DataLoader.__iter__": [[385, 390], ["range", "StopIteration", "train.DataLoader._create_batch"], "methods", ["home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.train.DataLoader._create_batch"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "self", ".", "n_batches", ")", ":", "\n", "            ", "if", "self", ".", "batch_index", "==", "self", ".", "n_batches", ":", "\n", "                ", "raise", "StopIteration", "(", ")", "\n", "", "yield", "self", ".", "_create_batch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.train.parse_args": [[34, 129], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.train.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "add_help", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"CLINC\"", ",", "\"CLINC_OOD\"", "]", ",", "required", "=", "True", ",", "\n", "help", "=", "\"The dataset to use, ATIS or SNIPS.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--proportion\"", ",", "type", "=", "int", ",", "required", "=", "True", ",", "\n", "help", "=", "\"The proportion of seen classes, range from 0 to 100.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seen_classes\"", ",", "type", "=", "str", ",", "nargs", "=", "\"+\"", ",", "default", "=", "None", ",", "\n", "help", "=", "\"The specific seen classes.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--mode\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"train\"", ",", "\"test\"", ",", "\"both\"", ",", "\"find_threshold\"", "]", ",", "default", "=", "\"both\"", ",", "\n", "help", "=", "\"Specify running mode: only train, only test or both.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--setting\"", ",", "type", "=", "str", ",", "nargs", "=", "\"+\"", ",", "default", "=", "None", ",", "\n", "help", "=", "\"The settings to detect ood samples, e.g. 'lof' or 'gda_lsqr\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_dir\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"The directory contains model file (.h5), requried when test only.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seen_classes_seed\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "\"The random seed to randomly choose seen classes.\"", ")", "\n", "# default arguments", "\n", "parser", ".", "add_argument", "(", "\"--cuda\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to use GPU or not.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu_device\"", ",", "type", "=", "str", ",", "default", "=", "\"0\"", ",", "\n", "help", "=", "\"The gpu device to use.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"./experiments\"", ",", "\n", "help", "=", "\"The directory to store training models & logs.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--experiment_No\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "\n", "help", "=", "\"Manually setting of experiment number.\"", ")", "\n", "# model hyperparameters", "\n", "parser", ".", "add_argument", "(", "\"--embedding_file\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"./glove_embeddings/glove.6B.300d.txt\"", ",", "\n", "help", "=", "\"The embedding file to use.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--hidden_dim\"", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "\"The dimension of hidden state.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--contractive_dim\"", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "\"The dimension of hidden state.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--embedding_dim\"", ",", "type", "=", "int", ",", "default", "=", "300", ",", "\n", "help", "=", "\"The dimension of word embeddings.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_seq_len\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "\"The max sequence length. When set to None, it will be implied from data.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_num_words\"", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "\n", "help", "=", "\"The max number of words.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_layers\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"The layers number of lstm.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_normalization\"", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "\"whether to do normalization or not.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--alpha\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "\"relative weights of classified loss.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--beta\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "\"relative weights of adversarial classified loss.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--unseen_proportion\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "\"proportion of unseen class examples to add in, range from 0 to 100.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--mask_proportion\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"proportion of seen class examples to mask, range from 0 to 100.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ood_loss\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"whether ood examples to backpropagate loss or not.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--adv\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"whether to generate perturbation through adversarial attack.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cont_loss\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"whether to backpropagate contractive loss or not.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--norm_coef\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "\"coefficients of the normalized adversarial vectors\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_plus_1\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"treat out of distribution examples as the N+1 th class\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--augment\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"whether to use back translation to enhance the ood data\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cl_mode\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"mode for computing contrastive loss\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lmcl\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"whether to use LMCL loss\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cont_proportion\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "\"coefficients of the normalized adversarial vectors\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset_proportion\"", ",", "type", "=", "float", ",", "default", "=", "100", ",", "\n", "help", "=", "\"proportion for each in-domain data\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--use_bert\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"whether to use bert\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--sup_cont\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"whether to add supervised contrastive loss\"", ")", "\n", "# training hyperparameters", "\n", "parser", ".", "add_argument", "(", "\"--ind_pre_epoches\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "\"Max epoches when in-domain pre-training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--supcont_pre_epoches\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "\"Max epoches when in-domain supervised contrastive pre-training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--aug_pre_epoches\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "\"Max epoches when adversarial contrastive training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--finetune_epoches\"", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "\"Max epoches when finetune model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--patience\"", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "\"Patience when applying early stop.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "\"Mini-batch size for train and validation\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning_rate\"", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "\n", "help", "=", "\"learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight_decay\"", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "\n", "help", "=", "\"weight_decay\"", ")", "\n", "parser", ".", "add_argument", "(", "'--clip'", ",", "type", "=", "float", ",", "default", "=", "0.25", ",", "help", "=", "'gradient clipping'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.model.BiLSTM.__init__": [[49, 88], ["torch.Module.__init__", "torch.Linear().to", "torch.Linear().to", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "print", "transformers.BertModel.from_pretrained().to", "transformers.BertTokenizer.from_pretrained", "torch.GRU().to", "torch.GRU().to", "model.BiLSTM.bert_model.named_parameters", "torch.Embedding", "torch.Embedding", "torch.GRU().to", "torch.GRU().to", "name.startswith", "torch.Linear", "torch.Linear", "transformers.BertModel.from_pretrained", "torch.GRU", "torch.GRU", "param.requires_grad_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.GRU", "torch.GRU"], "methods", ["home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.model.BiLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding_matrix", ",", "BATCH_SIZE", ",", "HIDDEN_DIM", ",", "CON_DIM", ",", "NUM_LAYERS", ",", "n_class_seen", ",", "DO_NORM", ",", "ALPHA", ",", "BETA", ",", "OOD_LOSS", ",", "ADV", ",", "CONT_LOSS", ",", "norm_coef", ",", "cl_mode", "=", "1", ",", "lmcl", "=", "True", ",", "use_cuda", "=", "True", ",", "use_bert", "=", "False", ",", "sup_cont", "=", "False", ")", ":", "\n", "        ", "super", "(", "BiLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bsz", "=", "BATCH_SIZE", "\n", "self", ".", "hidden_dim", "=", "HIDDEN_DIM", "\n", "self", ".", "con_dim", "=", "CON_DIM", "\n", "self", ".", "num_layers", "=", "NUM_LAYERS", "\n", "self", ".", "output_dim", "=", "n_class_seen", "\n", "self", ".", "do_norm", "=", "DO_NORM", "\n", "self", ".", "alpha", "=", "ALPHA", "\n", "self", ".", "beta", "=", "BETA", "\n", "self", ".", "ood_loss", "=", "OOD_LOSS", "\n", "self", ".", "adv", "=", "ADV", "\n", "self", ".", "cont_loss", "=", "CONT_LOSS", "\n", "self", ".", "norm_coef", "=", "norm_coef", "\n", "self", ".", "use_bert", "=", "use_bert", "\n", "self", ".", "sup_cont", "=", "sup_cont", "\n", "self", ".", "use_cuda", "=", "'cuda'", "if", "use_cuda", "else", "'cpu'", "\n", "if", "self", ".", "use_bert", ":", "\n", "            ", "print", "(", "'Loading Bert...'", ")", "\n", "self", ".", "bert_model", "=", "BertModel", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", ".", "to", "(", "self", ".", "use_cuda", ")", "\n", "self", ".", "bert_tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "input_size", "=", "768", ",", "hidden_size", "=", "self", ".", "hidden_dim", ",", "\n", "num_layers", "=", "self", ".", "num_layers", ",", "\n", "batch_first", "=", "True", ",", "bidirectional", "=", "True", ")", ".", "to", "(", "self", ".", "use_cuda", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "bert_model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "name", ".", "startswith", "(", "'pooler'", ")", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "param", ".", "requires_grad_", "(", "False", ")", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "embedding_matrix", ".", "shape", "[", "0", "]", ",", "embedding_matrix", ".", "shape", "[", "1", "]", ",", "\n", "_weight", "=", "torch", ".", "from_numpy", "(", "embedding_matrix", ")", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "input_size", "=", "embedding_matrix", ".", "shape", "[", "1", "]", ",", "hidden_size", "=", "self", ".", "hidden_dim", ",", "num_layers", "=", "self", ".", "num_layers", ",", "\n", "batch_first", "=", "True", ",", "bidirectional", "=", "True", ")", ".", "to", "(", "self", ".", "use_cuda", ")", "\n", "", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", "*", "2", ",", "self", ".", "output_dim", ")", ".", "to", "(", "self", ".", "use_cuda", ")", "\n", "self", ".", "cont_fc", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", "*", "2", ",", "self", ".", "con_dim", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "lmcl", "=", "lmcl", "\n", "self", ".", "cl_mode", "=", "cl_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.model.BiLSTM.get_embedding": [[89, 94], ["model.BiLSTM.embedding", "model.BiLSTM.dropout", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "get_embedding", "(", "self", ",", "seq", ")", ":", "\n", "        ", "seq_embed", "=", "self", ".", "embedding", "(", "seq", ")", "\n", "seq_embed", "=", "self", ".", "dropout", "(", "seq_embed", ")", "\n", "seq_embed", "=", "torch", ".", "tensor", "(", "seq_embed", ",", "dtype", "=", "torch", ".", "float32", ",", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", "\n", "return", "seq_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.model.BiLSTM.lmcl_loss": [[95, 99], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "lmcl_loss", "(", "self", ",", "probs", ",", "label", ",", "margin", "=", "0.35", ",", "scale", "=", "30", ")", ":", "\n", "        ", "probs", "=", "label", "*", "(", "probs", "-", "margin", ")", "+", "(", "1", "-", "label", ")", "*", "probs", "\n", "probs", "=", "torch", ".", "softmax", "(", "probs", ",", "dim", "=", "1", ")", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.model.BiLSTM.forward": [[101, 173], ["model.BiLSTM.rnn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.BiLSTM.fc", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "model.BiLSTM.dropout", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float", "model.BiLSTM.embedding", "model.BiLSTM.dropout", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float", "model.BiLSTM.lmcl_loss", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.retain_grad", "torch.sum.backward", "torch.sum.backward", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.grad.detach_", "model.BiLSTM.parameters", "seq_embed.clone().detach().requires_grad_().float.grad.detach_.norm", "model.BiLSTM.rnn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mm().bool().long", "torch.mm().bool().long", "torch.mm().bool().long", "torch.mm().bool().long", "model.nt_xent", "model.BiLSTM.rnn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.BiLSTM.fc", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "model.BiLSTM.bert_model", "ht[].squeeze", "ht[].squeeze", "model.BiLSTM.rnn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.BiLSTM.fc", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone().detach().requires_grad_", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone().detach().requires_grad_", "torch.log", "torch.log", "torch.log", "torch.log", "p.grad.detach_", "p.grad.zero_", "seq_embed.grad.detach_.norm.unsqueeze", "h_adv[].squeeze", "h_adv[].squeeze", "torch.mm().bool", "torch.mm().bool", "torch.mm().bool", "torch.mm().bool", "ht[].squeeze", "ht[].squeeze", "model.BiLSTM.dropout", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float", "model.BiLSTM.embedding", "model.BiLSTM.dropout", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float", "torch.argmax().tolist", "torch.argmax().tolist", "torch.argmax().tolist", "torch.argmax().tolist", "torch.argmax().tolist", "torch.argmax().tolist", "torch.argmax().tolist", "torch.argmax().tolist", "model.BiLSTM.rnn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.BiLSTM.fc", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "ValueError", "model.BiLSTM.bert_tokenizer().to", "model.BiLSTM.bert_model", "ht[].squeeze", "ht[].squeeze", "model.BiLSTM.dropout", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float", "model.BiLSTM.embedding", "model.BiLSTM.dropout", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone().detach", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone().detach", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone().detach().requires_grad_", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone().detach().requires_grad_", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "model.BiLSTM.bert_model", "ht[].squeeze", "ht[].squeeze", "model.BiLSTM.bert_tokenizer", "model.BiLSTM.bert_tokenizer().to", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone().detach().requires_grad_", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone().detach().requires_grad_", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone().detach", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone().detach", "model.BiLSTM.bert_tokenizer().to", "model.BiLSTM.bert_tokenizer", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone().detach", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone().detach", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone", "model.BiLSTM.bert_tokenizer", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone", "seq_embed.clone().detach().requires_grad_().float.clone().detach().requires_grad_().float.clone"], "methods", ["home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.model.BiLSTM.lmcl_loss", "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.model.nt_xent"], ["", "def", "forward", "(", "self", ",", "seq", ",", "adv_features", "=", "None", ",", "label", "=", "None", ",", "sim", "=", "None", ",", "mode", "=", "'ind_pre'", ")", ":", "\n", "        ", "if", "mode", "==", "'ind_pre'", "or", "mode", "==", "'finetune'", ":", "\n", "            ", "if", "self", ".", "use_bert", ":", "\n", "                ", "seq_embed", "=", "self", ".", "bert_model", "(", "**", "self", ".", "bert_tokenizer", "(", "seq", ",", "return_tensors", "=", "'pt'", ",", "padding", "=", "True", ",", "truncation", "=", "True", ")", ".", "to", "(", "self", ".", "use_cuda", ")", ")", "[", "0", "]", "\n", "seq_embed", "=", "self", ".", "dropout", "(", "seq_embed", ")", "\n", "seq_embed", "=", "seq_embed", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", "True", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "                ", "seq_embed", "=", "self", ".", "embedding", "(", "seq", ")", "\n", "seq_embed", "=", "self", ".", "dropout", "(", "seq_embed", ")", "\n", "seq_embed", "=", "seq_embed", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", "True", ")", ".", "float", "(", ")", "\n", "", "_", ",", "ht", "=", "self", ".", "rnn", "(", "seq_embed", ")", "\n", "ht", "=", "torch", ".", "cat", "(", "(", "ht", "[", "0", "]", ".", "squeeze", "(", "0", ")", ",", "ht", "[", "1", "]", ".", "squeeze", "(", "0", ")", ")", ",", "dim", "=", "1", ")", "\n", "logits", "=", "self", ".", "fc", "(", "ht", ")", "\n", "if", "self", ".", "lmcl", "and", "sim", "!=", "None", ":", "\n", "                ", "probs", "=", "self", ".", "lmcl_loss", "(", "logits", ",", "label", ")", "\n", "", "else", ":", "\n", "                ", "probs", "=", "torch", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "", "ce_loss", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "-", "torch", ".", "log", "(", "probs", ")", ",", "label", ")", ")", "\n", "if", "not", "self", ".", "sup_cont", "or", "mode", "==", "'finetune'", ":", "\n", "                ", "return", "ce_loss", "\n", "", "else", ":", "\n", "                ", "seq_embed", ".", "retain_grad", "(", ")", "# we need to get gradient w.r.t embeddings", "\n", "ce_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "unnormalized_noise", "=", "seq_embed", ".", "grad", ".", "detach_", "(", ")", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                    ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "p", ".", "grad", ".", "detach_", "(", ")", "\n", "p", ".", "grad", ".", "zero_", "(", ")", "\n", "", "", "norm", "=", "unnormalized_noise", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "normalized_noise", "=", "unnormalized_noise", "/", "(", "norm", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "+", "1e-10", ")", "# add 1e-10 to avoid NaN", "\n", "noise_embedding", "=", "seq_embed", "+", "self", ".", "norm_coef", "*", "normalized_noise", "\n", "_", ",", "h_adv", "=", "self", ".", "rnn", "(", "noise_embedding", ",", "None", ")", "\n", "h_adv", "=", "torch", ".", "cat", "(", "(", "h_adv", "[", "0", "]", ".", "squeeze", "(", "0", ")", ",", "h_adv", "[", "1", "]", ".", "squeeze", "(", "0", ")", ")", ",", "dim", "=", "1", ")", "\n", "label_mask", "=", "torch", ".", "mm", "(", "label", ",", "label", ".", "T", ")", ".", "bool", "(", ")", ".", "long", "(", ")", "\n", "sup_cont_loss", "=", "nt_xent", "(", "ht", ",", "h_adv", ",", "label_mask", ",", "cuda", "=", "self", ".", "use_cuda", "==", "'cuda'", ")", "\n", "return", "sup_cont_loss", "\n", "", "", "elif", "mode", "==", "'inference'", ":", "\n", "            ", "_", ",", "ht", "=", "self", ".", "rnn", "(", "seq", ")", "\n", "ht", "=", "torch", ".", "cat", "(", "(", "ht", "[", "0", "]", ".", "squeeze", "(", "0", ")", ",", "ht", "[", "1", "]", ".", "squeeze", "(", "0", ")", ")", ",", "dim", "=", "1", ")", "\n", "logits", "=", "self", ".", "fc", "(", "ht", ")", "\n", "probs", "=", "torch", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "return", "probs", ",", "ht", "\n", "", "elif", "mode", "==", "'validation'", ":", "\n", "            ", "if", "self", ".", "use_bert", ":", "\n", "                ", "seq_embed", "=", "self", ".", "bert_model", "(", "**", "self", ".", "bert_tokenizer", "(", "seq", ",", "return_tensors", "=", "'pt'", ",", "padding", "=", "True", ",", "truncation", "=", "True", ")", ".", "to", "(", "self", ".", "use_cuda", ")", ")", "[", "0", "]", "\n", "seq_embed", "=", "self", ".", "dropout", "(", "seq_embed", ")", "\n", "seq_embed", "=", "seq_embed", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", "True", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "                ", "seq_embed", "=", "self", ".", "embedding", "(", "seq", ")", "\n", "seq_embed", "=", "self", ".", "dropout", "(", "seq_embed", ")", "\n", "seq_embed", "=", "seq_embed", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", "True", ")", ".", "float", "(", ")", "\n", "", "_", ",", "ht", "=", "self", ".", "rnn", "(", "seq_embed", ")", "\n", "ht", "=", "torch", ".", "cat", "(", "(", "ht", "[", "0", "]", ".", "squeeze", "(", "0", ")", ",", "ht", "[", "1", "]", ".", "squeeze", "(", "0", ")", ")", ",", "dim", "=", "1", ")", "\n", "logits", "=", "self", ".", "fc", "(", "ht", ")", "\n", "probs", "=", "torch", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "return", "torch", ".", "argmax", "(", "label", ",", "dim", "=", "1", ")", ".", "tolist", "(", ")", ",", "torch", ".", "argmax", "(", "probs", ",", "dim", "=", "1", ")", ".", "tolist", "(", ")", ",", "ht", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "use_bert", ":", "\n", "                ", "seq_embed", "=", "self", ".", "bert_model", "(", "**", "self", ".", "bert_tokenizer", "(", "seq", ",", "return_tensors", "=", "'pt'", ",", "padding", "=", "True", ",", "truncation", "=", "True", ")", ".", "to", "(", "self", ".", "use_cuda", ")", ")", "[", "0", "]", "\n", "seq_embed", "=", "self", ".", "dropout", "(", "seq_embed", ")", "\n", "seq_embed", "=", "seq_embed", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", "True", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "                ", "seq_embed", "=", "self", ".", "embedding", "(", "seq", ")", "\n", "seq_embed", "=", "self", ".", "dropout", "(", "seq_embed", ")", "\n", "seq_embed", "=", "seq_embed", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", "True", ")", ".", "float", "(", ")", "\n", "", "_", ",", "ht", "=", "self", ".", "rnn", "(", "seq_embed", ")", "\n", "ht", "=", "torch", ".", "cat", "(", "(", "ht", "[", "0", "]", ".", "squeeze", "(", "0", ")", ",", "ht", "[", "1", "]", ".", "squeeze", "(", "0", ")", ")", ",", "dim", "=", "1", ")", "\n", "logits", "=", "self", ".", "fc", "(", "ht", ")", "\n", "probs", "=", "torch", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "return", "probs", ",", "ht", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"undefined mode\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.model.pair_cosine_similarity": [[8, 12], ["x.norm", "x_adv.norm", "x.t", "x_adv.t", "x_adv.t", "x.norm.t", "x_adv.norm.t", "x_adv.norm.t"], "function", ["None"], ["def", "pair_cosine_similarity", "(", "x", ",", "x_adv", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "n", "=", "x", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "n_adv", "=", "x_adv", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "(", "x", "@", "x", ".", "t", "(", ")", ")", "/", "(", "n", "*", "n", ".", "t", "(", ")", ")", ".", "clamp", "(", "min", "=", "eps", ")", ",", "(", "x_adv", "@", "x_adv", ".", "t", "(", ")", ")", "/", "(", "n_adv", "*", "n_adv", ".", "t", "(", ")", ")", ".", "clamp", "(", "min", "=", "eps", ")", ",", "(", "x", "@", "x_adv", ".", "t", "(", ")", ")", "/", "(", "n", "*", "n_adv", ".", "t", "(", ")", ")", ".", "clamp", "(", "min", "=", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.model.nt_xent": [[14, 29], ["model.pair_cosine_similarity", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "mask.sum", "loss.mean", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "mask.bool", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.exp.sum", "torch.exp.sum", "torch.tensor", "torch.tensor", "torch.exp.sum", "torch.exp.sum", "torch.tensor", "torch.tensor", "torch.exp.sum", "torch.exp.sum", "torch.tensor", "torch.tensor", "torch.exp.sum", "torch.exp.sum", "torch.tensor", "torch.tensor", "torch.eye().long().cuda", "torch.eye().long().cuda", "torch.eye().long().cuda", "torch.eye().long().cuda", "torch.eye().long", "torch.eye().long", "torch.eye().long", "torch.eye().long", "torch.eye().long", "torch.eye().long", "torch.eye().long", "torch.eye().long", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.exp.size", "torch.exp.size", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.exp.size", "torch.exp.size"], "function", ["home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.model.pair_cosine_similarity"], ["", "def", "nt_xent", "(", "x", ",", "x_adv", ",", "mask", ",", "cuda", "=", "True", ",", "t", "=", "0.1", ")", ":", "\n", "    ", "x", ",", "x_adv", ",", "x_c", "=", "pair_cosine_similarity", "(", "x", ",", "x_adv", ")", "\n", "x", "=", "torch", ".", "exp", "(", "x", "/", "t", ")", "\n", "x_adv", "=", "torch", ".", "exp", "(", "x_adv", "/", "t", ")", "\n", "x_c", "=", "torch", ".", "exp", "(", "x_c", "/", "t", ")", "\n", "mask_count", "=", "mask", ".", "sum", "(", "1", ")", "\n", "mask_reverse", "=", "(", "~", "(", "mask", ".", "bool", "(", ")", ")", ")", ".", "long", "(", ")", "\n", "if", "cuda", ":", "\n", "        ", "dis", "=", "(", "x", "*", "(", "mask", "-", "torch", ".", "eye", "(", "x", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", "+", "x_c", "*", "mask", ")", "/", "(", "x", ".", "sum", "(", "1", ")", "+", "x_c", ".", "sum", "(", "1", ")", "-", "torch", ".", "exp", "(", "torch", ".", "tensor", "(", "1", "/", "t", ")", ")", ")", "+", "mask_reverse", "\n", "dis_adv", "=", "(", "x_adv", "*", "(", "mask", "-", "torch", ".", "eye", "(", "x", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", "+", "x_c", ".", "T", "*", "mask", ")", "/", "(", "x_adv", ".", "sum", "(", "1", ")", "+", "x_c", ".", "sum", "(", "0", ")", "-", "torch", ".", "exp", "(", "torch", ".", "tensor", "(", "1", "/", "t", ")", ")", ")", "+", "mask_reverse", "\n", "", "else", ":", "\n", "        ", "dis", "=", "(", "x", "*", "(", "mask", "-", "torch", ".", "eye", "(", "x", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", ")", "+", "x_c", "*", "mask", ")", "/", "(", "x", ".", "sum", "(", "1", ")", "+", "x_c", ".", "sum", "(", "1", ")", "-", "torch", ".", "exp", "(", "torch", ".", "tensor", "(", "1", "/", "t", ")", ")", ")", "+", "mask_reverse", "\n", "dis_adv", "=", "(", "x_adv", "*", "(", "mask", "-", "torch", ".", "eye", "(", "x", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", ")", "+", "x_c", ".", "T", "*", "mask", ")", "/", "(", "x_adv", ".", "sum", "(", "1", ")", "+", "x_c", ".", "sum", "(", "0", ")", "-", "torch", ".", "exp", "(", "torch", ".", "tensor", "(", "1", "/", "t", ")", ")", ")", "+", "mask_reverse", "\n", "", "loss", "=", "(", "torch", ".", "log", "(", "dis", ")", ".", "sum", "(", "1", ")", "+", "torch", ".", "log", "(", "dis_adv", ")", ".", "sum", "(", "1", ")", ")", "/", "mask_count", "\n", "return", "-", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.model.PGD_contrastive": [[31, 46], ["model.get_embedding", "torch.nn.Parameter", "torch.nn.Parameter", "range", "model.zero_grad", "model.nt_xent", "nt_xent.backward", "torch.clamp", "torch.clamp", "model", "torch.clamp", "torch.clamp", "torch.rand_like", "torch.rand_like", "torch.nn.Parameter.grad.sign"], "function", ["home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.model.BiLSTM.get_embedding", "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.model.nt_xent"], ["", "def", "PGD_contrastive", "(", "model", ",", "inputs", ",", "eps", "=", "8.", "/", "255.", ",", "alpha", "=", "2.", "/", "255.", ",", "iters", "=", "10", ")", ":", "\n", "    ", "inputs", "=", "model", ".", "get_embedding", "(", "inputs", ")", "\n", "delta", "=", "torch", ".", "rand_like", "(", "inputs", ")", "*", "eps", "*", "2", "-", "eps", "\n", "delta", "=", "torch", ".", "nn", ".", "Parameter", "(", "delta", ")", "\n", "for", "i", "in", "range", "(", "iters", ")", ":", "\n", "        ", "features", "=", "model", "(", "inputs", "+", "delta", ",", "mode", "=", "'inference'", ")", "[", "1", "]", "\n", "model", ".", "zero_grad", "(", ")", "\n", "loss", "=", "nt_xent", "(", "features", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "delta", ".", "data", "=", "delta", ".", "data", "+", "alpha", "*", "delta", ".", "grad", ".", "sign", "(", ")", "\n", "delta", ".", "grad", "=", "None", "\n", "delta", ".", "data", "=", "torch", ".", "clamp", "(", "delta", ".", "data", ",", "min", "=", "-", "eps", ",", "max", "=", "eps", ")", "\n", "delta", ".", "data", "=", "torch", ".", "clamp", "(", "inputs", "+", "delta", ".", "data", ",", "min", "=", "0", ",", "max", "=", "1", ")", "-", "inputs", "\n", "\n", "", "return", "(", "inputs", "+", "delta", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.utils.naive_arg_topK": [[20, 23], ["numpy.argsort", "np.argsort.take", "numpy.arange"], "function", ["None"], ["def", "naive_arg_topK", "(", "matrix", ",", "K", ",", "axis", "=", "0", ")", ":", "\n", "    ", "full_sort", "=", "np", ".", "argsort", "(", "matrix", ",", "axis", "=", "axis", ")", "\n", "return", "full_sort", ".", "take", "(", "np", ".", "arange", "(", "K", ")", ",", "axis", "=", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.utils.set_allow_growth": [[25, 31], ["tensorflow.ConfigProto", "tensorflow.Session", "keras.backend.set_session"], "function", ["None"], ["", "def", "set_allow_growth", "(", "device", "=", "\"1\"", ")", ":", "\n", "    ", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "# dynamically grow the memory used on the GPU", "\n", "config", ".", "gpu_options", ".", "visible_device_list", "=", "device", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "set_session", "(", "sess", ")", "# set this TensorFlow session as the default session for Keras", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.utils.load_data": [[33, 48], ["pandas.DataFrame", "open", "fp.read().splitlines", "texts.extend", "len", "open", "labels.extend", "fp.read().splitlines", "fp.read", "fp.read"], "function", ["None"], ["", "def", "load_data", "(", "dataset", ")", ":", "\n", "    ", "texts", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "partition_to_n_row", "=", "{", "}", "\n", "for", "partition", "in", "[", "'train'", ",", "'valid'", ",", "'test'", "]", ":", "\n", "        ", "with", "open", "(", "\"./\"", "+", "dataset", "+", "\"/\"", "+", "partition", "+", "\".seq.in\"", ")", "as", "fp", ":", "\n", "            ", "lines", "=", "fp", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "texts", ".", "extend", "(", "lines", ")", "\n", "partition_to_n_row", "[", "partition", "]", "=", "len", "(", "lines", ")", "\n", "", "with", "open", "(", "\"./\"", "+", "dataset", "+", "\"/\"", "+", "partition", "+", "\".label\"", ")", "as", "fp", ":", "\n", "            ", "labels", ".", "extend", "(", "fp", ".", "read", "(", ")", ".", "splitlines", "(", ")", ")", "\n", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "[", "texts", ",", "labels", "]", ")", ".", "T", "\n", "df", ".", "columns", "=", "[", "'text'", ",", "'label'", "]", "\n", "return", "df", ",", "partition_to_n_row", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.utils.get_score": [[50, 83], ["range", "numpy.mean().round", "numpy.mean().round", "numpy.mean().round", "numpy.mean().round", "round", "round", "round", "print", "print", "print", "correct.append", "total.append", "fs.append", "ps.append", "rs.append", "cm[].sum", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "cm[].sum", "cm[].sum", "cm[].sum", "cm[].sum", "sum", "sum", "sum", "sum"], "function", ["None"], ["", "def", "get_score", "(", "cm", ")", ":", "\n", "    ", "fs", "=", "[", "]", "\n", "ps", "=", "[", "]", "\n", "rs", "=", "[", "]", "\n", "n_class", "=", "cm", ".", "shape", "[", "0", "]", "\n", "correct", "=", "[", "]", "\n", "total", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "n_class", ")", ":", "\n", "        ", "TP", "=", "cm", "[", "idx", "]", "[", "idx", "]", "\n", "correct", ".", "append", "(", "TP", ")", "\n", "total", ".", "append", "(", "cm", "[", "idx", "]", ".", "sum", "(", ")", ")", "\n", "r", "=", "TP", "/", "cm", "[", "idx", "]", ".", "sum", "(", ")", "if", "cm", "[", "idx", "]", ".", "sum", "(", ")", "!=", "0", "else", "0", "\n", "p", "=", "TP", "/", "cm", "[", ":", ",", "idx", "]", ".", "sum", "(", ")", "if", "cm", "[", ":", ",", "idx", "]", ".", "sum", "(", ")", "!=", "0", "else", "0", "\n", "f", "=", "2", "*", "r", "*", "p", "/", "(", "r", "+", "p", ")", "if", "(", "r", "+", "p", ")", "!=", "0", "else", "0", "\n", "fs", ".", "append", "(", "f", "*", "100", ")", "\n", "ps", ".", "append", "(", "p", "*", "100", ")", "\n", "rs", ".", "append", "(", "r", "*", "100", ")", "\n", "\n", "", "f", "=", "np", ".", "mean", "(", "fs", ")", ".", "round", "(", "2", ")", "\n", "p_seen", "=", "np", ".", "mean", "(", "ps", "[", ":", "-", "1", "]", ")", ".", "round", "(", "2", ")", "\n", "r_seen", "=", "np", ".", "mean", "(", "rs", "[", ":", "-", "1", "]", ")", ".", "round", "(", "2", ")", "\n", "f_seen", "=", "np", ".", "mean", "(", "fs", "[", ":", "-", "1", "]", ")", ".", "round", "(", "2", ")", "\n", "p_unseen", "=", "round", "(", "ps", "[", "-", "1", "]", ",", "2", ")", "\n", "r_unseen", "=", "round", "(", "rs", "[", "-", "1", "]", ",", "2", ")", "\n", "f_unseen", "=", "round", "(", "fs", "[", "-", "1", "]", ",", "2", ")", "\n", "acc", "=", "(", "sum", "(", "correct", ")", "/", "sum", "(", "total", ")", "*", "100", ")", ".", "round", "(", "2", ")", "\n", "acc_in", "=", "(", "sum", "(", "correct", "[", ":", "-", "1", "]", ")", "/", "sum", "(", "total", "[", ":", "-", "1", "]", ")", "*", "100", ")", ".", "round", "(", "2", ")", "\n", "acc_ood", "=", "(", "correct", "[", "-", "1", "]", "/", "total", "[", "-", "1", "]", "*", "100", ")", ".", "round", "(", "2", ")", "\n", "print", "(", "f\"Overall(macro): , f:{f}, acc:{acc}, p:{p}, r:{r}\"", ")", "\n", "print", "(", "f\"Seen(macro): , f:{f_seen}, acc:{acc_in}, p:{p_seen}, r:{r_seen}\"", ")", "\n", "print", "(", "f\"=====> Uneen(Experiment) <=====: , f:{f_unseen}, acc:{acc_ood}, p:{p_unseen}, r:{r_unseen}\"", ")", "\n", "\n", "return", "f", ",", "acc", ",", "f_seen", ",", "acc_in", ",", "p_seen", ",", "r_seen", ",", "f_unseen", ",", "acc_ood", ",", "p_unseen", ",", "r_unseen", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.utils.plot_confusion_matrix": [[85, 119], ["numpy.set_printoptions", "matplotlib.figure", "matplotlib.imshow", "matplotlib.title", "matplotlib.colorbar", "numpy.arange", "matplotlib.xticks", "matplotlib.yticks", "itertools.product", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.tight_layout", "matplotlib.savefig", "print", "print", "len", "cm.max", "range", "range", "matplotlib.text", "os.path.join", "cm.astype", "format", "cm.sum"], "function", ["None"], ["", "def", "plot_confusion_matrix", "(", "output_dir", ",", "cm", ",", "classes", ",", "normalize", "=", "False", ",", "\n", "title", "=", "'Confusion matrix'", ",", "figsize", "=", "(", "12", ",", "10", ")", ",", "\n", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "    ", "\"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"", "\n", "if", "normalize", ":", "\n", "        ", "cm", "=", "cm", ".", "astype", "(", "'float'", ")", "/", "cm", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "print", "(", "\"Normalized confusion matrix\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Confusion matrix, without normalization'", ")", "\n", "\n", "# Compute confusion matrix", "\n", "", "np", ".", "set_printoptions", "(", "precision", "=", "2", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "plt", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "tick_marks", "=", "np", ".", "arange", "(", "len", "(", "classes", ")", ")", "\n", "plt", ".", "xticks", "(", "tick_marks", ",", "classes", ",", "rotation", "=", "45", ")", "\n", "plt", ".", "yticks", "(", "tick_marks", ",", "classes", ")", "\n", "\n", "fmt", "=", "'.2f'", "if", "normalize", "else", "'d'", "\n", "thresh", "=", "cm", ".", "max", "(", ")", "/", "2.", "\n", "for", "i", ",", "j", "in", "itertools", ".", "product", "(", "range", "(", "cm", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "cm", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "plt", ".", "text", "(", "j", ",", "i", ",", "format", "(", "cm", "[", "i", ",", "j", "]", ",", "fmt", ")", ",", "\n", "horizontalalignment", "=", "\"center\"", ",", "\n", "color", "=", "\"white\"", "if", "cm", "[", "i", ",", "j", "]", ">", "thresh", "else", "\"black\"", ")", "\n", "\n", "", "plt", ".", "ylabel", "(", "'True label'", ")", "\n", "plt", ".", "xlabel", "(", "'Predicted label'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"mat.png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.utils.mahalanobis_distance": [[121, 142], ["numpy.linalg.inv", "numpy.matmul", "numpy.sqrt().item", "numpy.matmul", "vec.reshape", "vec.reshape", "numpy.sqrt"], "function", ["None"], ["", "def", "mahalanobis_distance", "(", "x", ":", "np", ".", "ndarray", ",", "\n", "y", ":", "np", ".", "ndarray", ",", "\n", "covariance", ":", "np", ".", "ndarray", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Calculate the mahalanobis distance.\n\n    Params:\n        - x: the sample x, shape (num_features,)\n        - y: the sample y (or the mean of the distribution), shape (num_features,)\n        - covariance: the covariance of the distribution, shape (num_features, num_features)\n\n    Returns:\n        - score: the mahalanobis distance in float\n\n    \"\"\"", "\n", "num_features", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "vec", "=", "x", "-", "y", "\n", "cov_inv", "=", "np", ".", "linalg", ".", "inv", "(", "covariance", ")", "\n", "bef_sqrt", "=", "np", ".", "matmul", "(", "np", ".", "matmul", "(", "vec", ".", "reshape", "(", "1", ",", "num_features", ")", ",", "cov_inv", ")", ",", "vec", ".", "reshape", "(", "num_features", ",", "1", ")", ")", "\n", "return", "np", ".", "sqrt", "(", "bef_sqrt", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.utils.confidence": [[144, 178], ["features.reshape().repeat.reshape().repeat", "means.reshape().repeat.reshape().repeat", "numpy.linalg.inv", "numpy.matmul().squeeze", "numpy.sqrt", "numpy.identity", "features.reshape().repeat.reshape", "means.reshape().repeat.reshape", "numpy.matmul", "numpy.isnan", "numpy.matmul", "vectors.reshape", "vectors.reshape"], "function", ["None"], ["", "def", "confidence", "(", "features", ":", "np", ".", "ndarray", ",", "\n", "means", ":", "np", ".", "ndarray", ",", "\n", "distance_type", ":", "str", ",", "\n", "cov", ":", "np", ".", "ndarray", "=", "None", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Calculate mahalanobis or euclidean based confidence score for each class.\n\n    Params:\n        - features: shape (num_samples, num_features)\n        - means: shape (num_classes, num_features)\n        - cov: shape (num_features, num_features) or None (if use euclidean distance)\n\n    Returns:\n        - confidence: shape (num_samples, num_classes)\n    \"\"\"", "\n", "assert", "distance_type", "in", "(", "\"euclidean\"", ",", "\"mahalanobis\"", ")", "\n", "\n", "num_samples", "=", "features", ".", "shape", "[", "0", "]", "\n", "num_features", "=", "features", ".", "shape", "[", "1", "]", "\n", "num_classes", "=", "means", ".", "shape", "[", "0", "]", "\n", "if", "distance_type", "==", "\"euclidean\"", ":", "\n", "        ", "cov", "=", "np", ".", "identity", "(", "num_features", ")", "\n", "\n", "", "features", "=", "features", ".", "reshape", "(", "num_samples", ",", "1", ",", "num_features", ")", ".", "repeat", "(", "num_classes", ",", "\n", "axis", "=", "1", ")", "# (num_samples, num_classes, num_features)", "\n", "means", "=", "means", ".", "reshape", "(", "1", ",", "num_classes", ",", "num_features", ")", ".", "repeat", "(", "num_samples", ",", "\n", "axis", "=", "0", ")", "# (num_samples, num_classes, num_features)", "\n", "vectors", "=", "features", "-", "means", "# (num_samples, num_classes, num_features)", "\n", "cov_inv", "=", "np", ".", "linalg", ".", "inv", "(", "cov", ")", "\n", "bef_sqrt", "=", "np", ".", "matmul", "(", "np", ".", "matmul", "(", "vectors", ".", "reshape", "(", "num_samples", ",", "num_classes", ",", "1", ",", "num_features", ")", ",", "cov_inv", ")", ",", "\n", "vectors", ".", "reshape", "(", "num_samples", ",", "num_classes", ",", "num_features", ",", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "result", "=", "np", ".", "sqrt", "(", "bef_sqrt", ")", "\n", "result", "[", "np", ".", "isnan", "(", "result", ")", "]", "=", "1e12", "# solve nan", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.utils.get_test_info": [[180, 221], ["pandas.DataFrame", "enumerate", "softmax_prob.max", "enumerate", "gda_result.min", "pd.DataFrame.to_csv", "softmax_prob.argmax", "os.path.join", "gda_result.argmin"], "function", ["None"], ["", "def", "get_test_info", "(", "texts", ":", "pd", ".", "Series", ",", "\n", "label", ":", "pd", ".", "Series", ",", "\n", "label_mask", ":", "pd", ".", "Series", ",", "\n", "softmax_prob", ":", "np", ".", "ndarray", ",", "\n", "softmax_classes", ":", "List", "[", "str", "]", ",", "\n", "lof_result", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "gda_result", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "gda_classes", ":", "List", "[", "str", "]", "=", "None", ",", "\n", "save_to_file", ":", "bool", "=", "False", ",", "\n", "output_dir", ":", "str", "=", "None", ")", "->", "pd", ".", "DataFrame", ":", "\n", "    ", "\"\"\"\n    Return a pd.DataFrame, including the following information for each test instances:\n        - the text of the instance\n        - label & masked label of the sentence\n        - the softmax probability for each seen classes (sum up to 1)\n        - the softmax prediction\n        - the softmax confidence (i.e. the max softmax probability among all seen classes)\n        - (if use lof) lof prediction result (1 for in-domain and -1 for out-of-domain)\n        - (if use gda) gda mahalanobis distance for each seen classes\n        - (if use gda) the gda confidence (i.e. the min mahalanobis distance among all seen classes)\n    \"\"\"", "\n", "df", "=", "pd", ".", "DataFrame", "(", ")", "\n", "df", "[", "'label'", "]", "=", "label", "\n", "df", "[", "'label_mask'", "]", "=", "label_mask", "\n", "for", "idx", ",", "_class", "in", "enumerate", "(", "softmax_classes", ")", ":", "\n", "        ", "df", "[", "f'softmax_prob_{_class}'", "]", "=", "softmax_prob", "[", ":", ",", "idx", "]", "\n", "", "df", "[", "'softmax_prediction'", "]", "=", "[", "softmax_classes", "[", "idx", "]", "for", "idx", "in", "softmax_prob", ".", "argmax", "(", "axis", "=", "-", "1", ")", "]", "\n", "df", "[", "'softmax_confidence'", "]", "=", "softmax_prob", ".", "max", "(", "axis", "=", "-", "1", ")", "\n", "if", "lof_result", "is", "not", "None", ":", "\n", "        ", "df", "[", "'lof_prediction'", "]", "=", "lof_result", "\n", "", "if", "gda_result", "is", "not", "None", ":", "\n", "        ", "for", "idx", ",", "_class", "in", "enumerate", "(", "gda_classes", ")", ":", "\n", "            ", "df", "[", "f'm_dist_{_class}'", "]", "=", "gda_result", "[", ":", ",", "idx", "]", "\n", "", "df", "[", "'gda_prediction'", "]", "=", "[", "gda_classes", "[", "idx", "]", "for", "idx", "in", "gda_result", ".", "argmin", "(", "axis", "=", "-", "1", ")", "]", "\n", "df", "[", "'gda_confidence'", "]", "=", "gda_result", ".", "min", "(", "axis", "=", "-", "1", ")", "\n", "", "df", "[", "'text'", "]", "=", "[", "text", "for", "text", "in", "texts", "]", "\n", "\n", "if", "save_to_file", ":", "\n", "        ", "df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"test_info.csv\"", ")", ")", "\n", "\n", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.utils.estimate_best_threshold": [[223, 259], ["sorted", "utils.estimate_best_threshold.compute_f1"], "function", ["None"], ["", "def", "estimate_best_threshold", "(", "seen_m_dist", ":", "np", ".", "ndarray", ",", "\n", "unseen_m_dist", ":", "np", ".", "ndarray", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Given mahalanobis distance for seen and unseen instances in valid set, estimate\n    a best threshold (i.e. achieving best f1 in valid set) for test set.\n    \"\"\"", "\n", "lst", "=", "[", "]", "\n", "for", "item", "in", "seen_m_dist", ":", "\n", "        ", "lst", ".", "append", "(", "(", "item", ",", "\"seen\"", ")", ")", "\n", "", "for", "item", "in", "unseen_m_dist", ":", "\n", "        ", "lst", ".", "append", "(", "(", "item", ",", "\"unseen\"", ")", ")", "\n", "# sort by m_dist: [(5.65, 'seen'), (8.33, 'seen'), ..., (854.3, 'unseen')]", "\n", "", "lst", "=", "sorted", "(", "lst", ",", "key", "=", "lambda", "item", ":", "item", "[", "0", "]", ")", "\n", "\n", "threshold", "=", "0.", "\n", "tp", ",", "fp", ",", "fn", "=", "len", "(", "unseen_m_dist", ")", ",", "len", "(", "seen_m_dist", ")", ",", "0", "\n", "\n", "def", "compute_f1", "(", "tp", ",", "fp", ",", "fn", ")", ":", "\n", "        ", "p", "=", "tp", "/", "(", "tp", "+", "fp", "+", "1e-10", ")", "\n", "r", "=", "tp", "/", "(", "tp", "+", "fn", "+", "1e-10", ")", "\n", "return", "(", "2", "*", "p", "*", "r", ")", "/", "(", "p", "+", "r", "+", "1e-10", ")", "\n", "\n", "", "f1", "=", "compute_f1", "(", "tp", ",", "fp", ",", "fn", ")", "\n", "\n", "for", "m_dist", ",", "label", "in", "lst", ":", "\n", "        ", "if", "label", "==", "\"seen\"", ":", "# fp -> tn", "\n", "            ", "fp", "-=", "1", "\n", "", "else", ":", "# tp -> fn", "\n", "            ", "tp", "-=", "1", "\n", "fn", "+=", "1", "\n", "", "if", "compute_f1", "(", "tp", ",", "fp", ",", "fn", ")", ">", "f1", ":", "\n", "            ", "f1", "=", "compute_f1", "(", "tp", ",", "fp", ",", "fn", ")", "\n", "threshold", "=", "m_dist", "+", "1e-10", "\n", "\n", "", "", "print", "(", "\"estimated threshold:\"", ",", "threshold", ")", "\n", "return", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.utils.pca_visualization": [[261, 282], ["sklearn.decomposition.PCA().fit_transform", "matplotlib.style.use", "matplotlib.subplots", "ax.legend", "ax.grid", "matplotlib.savefig", "sklearn.decomposition.PCA", "ax.scatter", "ax.scatter"], "function", ["None"], ["", "def", "pca_visualization", "(", "X", ":", "np", ".", "ndarray", ",", "\n", "y", ":", "pd", ".", "Series", ",", "\n", "classes", ":", "List", "[", "str", "]", ",", "\n", "save_path", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Apply PCA visualization for features.\n    \"\"\"", "\n", "red_features", "=", "PCA", "(", "n_components", "=", "2", ",", "svd_solver", "=", "\"full\"", ")", ".", "fit_transform", "(", "X", ")", "\n", "\n", "plt", ".", "style", ".", "use", "(", "\"seaborn-darkgrid\"", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "for", "_class", "in", "classes", ":", "\n", "        ", "if", "_class", "==", "\"unseen\"", ":", "\n", "            ", "ax", ".", "scatter", "(", "red_features", "[", "y", "==", "_class", ",", "0", "]", ",", "red_features", "[", "y", "==", "_class", ",", "1", "]", ",", "\n", "label", "=", "_class", ",", "alpha", "=", "0.5", ",", "s", "=", "20", ",", "edgecolors", "=", "'none'", ",", "color", "=", "\"gray\"", ")", "\n", "", "else", ":", "\n", "            ", "ax", ".", "scatter", "(", "red_features", "[", "y", "==", "_class", ",", "0", "]", ",", "red_features", "[", "y", "==", "_class", ",", "1", "]", ",", "\n", "label", "=", "_class", ",", "alpha", "=", "0.5", ",", "s", "=", "20", ",", "edgecolors", "=", "'none'", ",", "zorder", "=", "10", ")", "\n", "", "", "ax", ".", "legend", "(", ")", "\n", "ax", ".", "grid", "(", "True", ")", "\n", "plt", ".", "savefig", "(", "save_path", ",", "format", "=", "\"png\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.parZival27_supervised-contrastive-learning-for-out-of-domain-detection.None.utils.log_pred_results": [[284, 328], ["open", "f_out.write", "open", "json.dump", "os.path.join", "os.path.join", "confusion_matrix.tolist"], "function", ["None"], ["", "def", "log_pred_results", "(", "f", ":", "float", ",", "\n", "acc", ":", "float", ",", "\n", "f_seen", ":", "float", ",", "\n", "acc_in", ":", "float", ",", "\n", "p_seen", ":", "float", ",", "\n", "r_seen", ":", "float", ",", "\n", "f_unseen", ":", "float", ",", "\n", "acc_ood", ":", "float", ",", "\n", "p_unseen", ":", "float", ",", "\n", "r_unseen", ":", "float", ",", "\n", "classes", ":", "List", "[", "str", "]", ",", "\n", "output_dir", ":", "str", ",", "\n", "confusion_matrix", ":", "np", ".", "ndarray", ",", "\n", "ood_loss", ",", "\n", "adv", ",", "\n", "cont_loss", ",", "\n", "threshold", ":", "float", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"results.txt\"", ")", ",", "\"w\"", ")", "as", "f_out", ":", "\n", "        ", "f_out", ".", "write", "(", "\n", "f\"Overall:  f1(macro):{f} acc:{acc} \\nSeen:  f1(marco):{f_seen} acc:{acc_in} p:{p_seen} r:{r_seen}\\n\"", "\n", "f\"=====> Uneen(Experiment) <=====:  f1(marco):{f_unseen} acc:{acc_ood} p:{p_unseen} r:{r_unseen}\\n\\n\"", "\n", "f\"Classes:\\n{classes}\\n\\n\"", "\n", "f\"Threshold:\\n{threshold}\\n\\n\"", "\n", "f\"Confusion matrix:\\n{confusion_matrix}\\n\"", "\n", "f\"mode:\\nood_loss:{ood_loss}\\nadv:{adv}\\ncont_loss:{cont_loss}\"", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"results.json\"", ")", ",", "\"w\"", ")", "as", "f_out", ":", "\n", "        ", "json", ".", "dump", "(", "{", "\n", "\"f1_overall\"", ":", "f", ",", "\n", "\"acc_overall\"", ":", "acc", ",", "\n", "\"f1_seen\"", ":", "f_seen", ",", "\n", "\"acc_seen\"", ":", "acc_in", ",", "\n", "\"p_seen\"", ":", "p_seen", ",", "\n", "\"r_seen\"", ":", "r_seen", ",", "\n", "\"f1_unseen\"", ":", "f_unseen", ",", "\n", "\"acc_unseen\"", ":", "acc_ood", ",", "\n", "\"p_unseen\"", ":", "p_unseen", ",", "\n", "\"r_unseen\"", ":", "r_unseen", ",", "\n", "\"classes\"", ":", "classes", ",", "\n", "\"confusion_matrix\"", ":", "confusion_matrix", ".", "tolist", "(", ")", ",", "\n", "\"threshold\"", ":", "threshold", ",", "\n", "\"ood_loss\"", ":", "ood_loss", ",", "\n", "\"adv\"", ":", "adv", ",", "\n", "\"cont_loss\"", ":", "cont_loss", "\n", "}", ",", "fp", "=", "f_out", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "4", ")", "\n", "", "", ""]]}