{"home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.LocobotExplorer.__init__": [[120, 173], ["habitat_baselines.common.base_trainer.BaseRLTrainer.__init__", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "# Set pytorch random seed for initialization", "\n", "torch", ".", "manual_seed", "(", "config", ".", "PYT_RANDOM_SEED", ")", "\n", "\n", "self", ".", "mapper", "=", "None", "\n", "self", ".", "local_actor_critic", "=", "None", "\n", "self", ".", "global_actor_critic", "=", "None", "\n", "self", ".", "ans_net", "=", "None", "\n", "self", ".", "planner", "=", "None", "\n", "self", ".", "mapper_agent", "=", "None", "\n", "self", ".", "local_agent", "=", "None", "\n", "self", ".", "global_agent", "=", "None", "\n", "self", ".", "sim", "=", "None", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "device", "=", "(", "\n", "torch", ".", "device", "(", "\"cuda\"", ",", "self", ".", "config", ".", "TORCH_GPU_ID", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", ")", "\n", "\n", "self", ".", "ACT_2_COMMAND", "=", "{", "\n", "0", ":", "(", "\"go_to_relative\"", ",", "\n", "{", "\n", "\"xyt_position\"", ":", "[", "config", ".", "RL", ".", "ANS", ".", "LOCAL_POLICY", ".", "AGENT_DYNAMICS", ".", "forward_step", ",", "0", ",", "0", "]", ",", "\n", "\"use_map\"", ":", "False", ",", "\n", "\"close_loop\"", ":", "True", ",", "\n", "\"smooth\"", ":", "False", ",", "\n", "}", ",", "\n", ")", ",", "\n", "1", ":", "(", "\"go_to_relative\"", ",", "\n", "{", "\n", "\"xyt_position\"", ":", "[", "0", ",", "0", ",", "(", "config", ".", "RL", ".", "ANS", ".", "LOCAL_POLICY", ".", "AGENT_DYNAMICS", ".", "turn_angle", "/", "180", ")", "*", "np", ".", "pi", "]", ",", "\n", "\"use_map\"", ":", "False", ",", "\n", "\"close_loop\"", ":", "True", ",", "\n", "\"smooth\"", ":", "False", ",", "\n", "}", ",", "\n", ")", ",", "\n", "2", ":", "(", "\"go_to_relative\"", ",", "\n", "{", "\n", "\"xyt_position\"", ":", "[", "0", ",", "0", ",", "(", "-", "config", ".", "RL", ".", "ANS", ".", "LOCAL_POLICY", ".", "AGENT_DYNAMICS", ".", "turn_angle", "/", "180", ")", "*", "np", ".", "pi", "]", ",", "\n", "\"use_map\"", ":", "False", ",", "\n", "\"close_loop\"", ":", "True", ",", "\n", "\"smooth\"", ":", "False", ",", "\n", "}", ",", "\n", ")", ",", "\n", "}", "\n", "\n", "self", ".", "ACT_2_NAME", "=", "{", "0", ":", "'MOVE_FORWARD'", ",", "\n", "1", ":", "'TURN_LEFT'", ",", "\n", "2", ":", "'TURN_RIGHT'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.LocobotExplorer._eval": [[174, 519], ["time.time", "int", "torch.load", "torch.load", "torch.load", "torch.load", "print", "locobot_exp.LocobotExplorer._setup_config", "locobot_exp.LocobotExplorer._setup_actor_critic_agent", "locobot_exp.LocobotExplorer.mapper_agent.load_state_dict", "locobot_exp.LocobotExplorer.global_agent.load_state_dict", "locobot_exp.LocobotExplorer.mapper.eval", "locobot_exp.LocobotExplorer.local_actor_critic.eval", "locobot_exp.LocobotExplorer.global_actor_critic.eval", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "collections.defaultdict", "locobot_exp.LocobotExplorer.sim._robot.camera.set_tilt", "print", "print", "locobot_exp.LocobotExplorer._correct_depth", "locobot_exp.LocobotExplorer.sim.get_agent_state", "locobot_exp.CoordProjection", "CoordProjection.", "print", "locobot_exp.LocobotExplorer._prepare_batch", "range", "locobot_exp.LocobotExplorer.ans_net.reset", "time.time", "range", "locobot_exp.LocobotExplorer.local_agent.load_state_dict", "habitat.sims.make_sim", "math.radians", "locobot_exp.LocobotExplorer.sim.reset", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "pose[].to", "agent_poses_over_time.append", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "len", "os.makedirs", "print", "torch.zeros().fill_", "torch.zeros().fill_", "torch.zeros().fill_", "torch.zeros().fill_", "locobot_exp.LocobotExplorer.ans_net.act", "print", "torch.zeros.copy_", "torch.zeros.copy_", "re.findall", "sys.exit", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "cv2.imwrite", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "time.time", "print", "locobot_exp.LocobotExplorer._do_action", "locobot_exp.LocobotExplorer._correct_depth", "locobot_exp.LocobotExplorer.sim.get_agent_state", "locobot_exp.LocobotExplorer._prepare_batch", "collections.defaultdict", "CoordProjection.", "occant_utils.common.convert_world2map().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "agent_poses_over_time.append", "print", "time.time", "len", "occant_utils.visualization.observations_to_image", "einops.asnumpy", "occant_utils.common.convert_gt2channel_to_gtrgb", "cv2.resize", "einops.asnumpy", "[].cpu().numpy", "[].cpu().numpy", "occant_utils.visualization.generate_topdown_allocentric_map", "cv2.resize", "occant_utils.visualization.generate_topdown_allocentric_map", "cv2.resize", "occant_utils.visualization.generate_topdown_allocentric_map", "cv2.resize", "numpy.concatenate", "numpy.concatenate", "rgb_frames.append", "print", "print", "print", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "int", "torch.tensor.item", "torch.tensor.item", "torch.tensor.item", "torch.tensor.item", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "pose[].to", "print", "print", "print", "print", "print", "print", "time.time", "int", "int", "cv2.circle", "int", "int", "cv2.circle", "print", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "range", "habitat_baselines.common.utils.generate_video", "print", "print", "locobot_exp.LocobotExplorer.sim.get_agent_state", "locobot_exp.LocobotExplorer.sim.get_agent_state", "locobot_exp.LocobotExplorer._round_map", "time.time", "time.time", "input", "torch.tensor.item", "torch.tensor.item", "occant_utils.common.convert_world2map", "[].reshape", "[].cpu", "[].cpu", "global_goals[].item", "global_goals[].item", "local_goals[].item", "local_goals[].item", "numpy.pad", "os.mkdir", "rgb_frames.append", "time.time", "numpy.pad", "habitat_baselines.common.tensorboard_utils.TensorboardWriter", "time.time", "torch.tensor.item", "torch.tensor.item", "locobot_exp.LocobotExplorer.sim.get_agent_state"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.LocobotExplorer._setup_config", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._setup_actor_critic_agent", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.eval", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.eval", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.eval", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.LocobotExplorer._correct_depth", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._prepare_batch", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.reset", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.reset", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.act", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.LocobotExplorer._do_action", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.LocobotExplorer._correct_depth", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._prepare_batch", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.visualization.observations_to_image", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.convert_gt2channel_to_gtrgb", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.visualization.generate_topdown_allocentric_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.visualization.generate_topdown_allocentric_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.visualization.generate_topdown_allocentric_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._round_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.convert_world2map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state"], ["", "def", "_eval", "(", "self", ")", ":", "\n", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "self", ".", "config", ".", "MANUAL_COMMANDS", ":", "\n", "            ", "init_time", "=", "None", "\n", "manual_step_start_time", "=", "None", "\n", "total_manual_time", "=", "0.0", "\n", "\n", "", "checkpoint_index", "=", "int", "(", "(", "re", ".", "findall", "(", "'\\d+'", ",", "self", ".", "config", ".", "EVAL_CKPT_PATH_DIR", ")", ")", "[", "-", "1", "]", ")", "\n", "ckpt_dict", "=", "torch", ".", "load", "(", "self", ".", "config", ".", "EVAL_CKPT_PATH_DIR", ",", "map_location", "=", "\"cpu\"", ")", "\n", "\n", "print", "(", "f'Number of steps of the ckpt: {ckpt_dict[\"extra_state\"][\"step\"]}'", ")", "\n", "\n", "config", "=", "self", ".", "_setup_config", "(", "ckpt_dict", ")", "\n", "ppo_cfg", "=", "config", ".", "RL", ".", "PPO", "\n", "ans_cfg", "=", "config", ".", "RL", ".", "ANS", "\n", "\n", "self", ".", "mapper_rollouts", "=", "None", "\n", "self", ".", "_setup_actor_critic_agent", "(", "ppo_cfg", ",", "ans_cfg", ")", "\n", "\n", "self", ".", "mapper_agent", ".", "load_state_dict", "(", "ckpt_dict", "[", "\"mapper_state_dict\"", "]", ")", "\n", "if", "self", ".", "local_agent", "is", "not", "None", ":", "\n", "            ", "self", ".", "local_agent", ".", "load_state_dict", "(", "ckpt_dict", "[", "\"local_state_dict\"", "]", ")", "\n", "self", ".", "local_actor_critic", "=", "self", ".", "local_agent", ".", "actor_critic", "\n", "", "else", ":", "\n", "            ", "self", ".", "local_actor_critic", "=", "self", ".", "ans_net", ".", "local_policy", "\n", "", "self", ".", "global_agent", ".", "load_state_dict", "(", "ckpt_dict", "[", "\"global_state_dict\"", "]", ")", "\n", "self", ".", "mapper", "=", "self", ".", "mapper_agent", ".", "mapper", "\n", "self", ".", "global_actor_critic", "=", "self", ".", "global_agent", ".", "actor_critic", "\n", "\n", "# Set models to evaluation", "\n", "self", ".", "mapper", ".", "eval", "(", ")", "\n", "self", ".", "local_actor_critic", ".", "eval", "(", ")", "\n", "self", ".", "global_actor_critic", ".", "eval", "(", ")", "\n", "\n", "M", "=", "ans_cfg", ".", "overall_map_size", "\n", "V", "=", "ans_cfg", ".", "MAPPER", ".", "map_size", "\n", "s", "=", "ans_cfg", ".", "MAPPER", ".", "map_scale", "\n", "imH", ",", "imW", "=", "ans_cfg", ".", "image_scale_hw", "\n", "\n", "num_steps", "=", "self", ".", "config", ".", "T_EXP", "\n", "\n", "prev_action", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "masks", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "try", ":", "\n", "            ", "self", ".", "sim", "=", "make_sim", "(", "'PyRobot-v1'", ",", "config", "=", "self", ".", "config", ".", "TASK_CONFIG", ".", "PYROBOT", ")", "\n", "", "except", "(", "KeyboardInterrupt", ",", "SystemExit", ")", ":", "\n", "            ", "sys", ".", "exit", "(", ")", "\n", "\n", "", "pose", "=", "defaultdict", "(", ")", "\n", "self", ".", "sim", ".", "_robot", ".", "camera", ".", "set_tilt", "(", "math", ".", "radians", "(", "self", ".", "config", ".", "CAMERA_TILT", ")", ",", "wait", "=", "True", ")", "\n", "print", "(", "f\"\\nStarting Camera State: {self.sim.get_agent_state()['camera']}\"", ")", "\n", "print", "(", "f\"Starting Agent State: {self.sim.get_agent_state()['base']}\"", ")", "\n", "obs", "=", "[", "self", ".", "sim", ".", "reset", "(", ")", "]", "\n", "\n", "if", "self", ".", "config", ".", "SAVE_OBS_IMGS", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "f'obs/depth_dirty_s.jpg'", ",", "obs", "[", "0", "]", "[", "'depth'", "]", "*", "255.0", ")", "\n", "\n", "", "obs", "[", "0", "]", "[", "'depth'", "]", "[", "...", ",", "0", "]", "=", "self", ".", "_correct_depth", "(", "obs", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "config", ".", "SAVE_OBS_IMGS", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "f'obs/rgb_s.jpg'", ",", "obs", "[", "0", "]", "[", "'rgb'", "]", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "cv2", ".", "imwrite", "(", "f'depth_s.jpg'", ",", "obs", "[", "0", "]", "[", "'depth'", "]", "*", "255.0", ")", "\n", "\n", "", "starting_agent_state", "=", "self", ".", "sim", ".", "get_agent_state", "(", ")", "\n", "locobot2relative", "=", "CoordProjection", "(", "starting_agent_state", "[", "'base'", "]", ")", "\n", "pose", "[", "'base'", "]", "=", "locobot2relative", "(", "starting_agent_state", "[", "'base'", "]", ")", "\n", "\n", "print", "(", "f\"Starting Agent Pose: {pose['base']}\\n\"", ")", "\n", "batch", "=", "self", ".", "_prepare_batch", "(", "obs", ",", "-", "1", ",", "device", "=", "self", ".", "device", ")", "\n", "if", "ans_cfg", ".", "MAPPER", ".", "use_sensor_positioning", ":", "\n", "            ", "batch", "[", "'pose'", "]", "=", "pose", "[", "'base'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "batch", "[", "'pose'", "]", "[", "0", "]", "[", "1", ":", "]", "=", "-", "batch", "[", "'pose'", "]", "[", "0", "]", "[", "1", ":", "]", "\n", "", "prev_batch", "=", "batch", "\n", "\n", "num_envs", "=", "self", ".", "config", ".", "NUM_PROCESSES", "\n", "agent_poses_over_time", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_envs", ")", ":", "\n", "            ", "agent_poses_over_time", ".", "append", "(", "torch", ".", "tensor", "(", "[", "(", "M", "-", "1", ")", "/", "2", ",", "(", "M", "-", "1", ")", "/", "2", ",", "0", "]", ")", ")", "\n", "", "state_estimates", "=", "{", "\n", "\"pose_estimates\"", ":", "torch", ".", "zeros", "(", "num_envs", ",", "3", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "\"map_states\"", ":", "torch", ".", "zeros", "(", "num_envs", ",", "2", ",", "M", ",", "M", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "\"recurrent_hidden_states\"", ":", "torch", ".", "zeros", "(", "\n", "1", ",", "num_envs", ",", "ans_cfg", ".", "LOCAL_POLICY", ".", "hidden_size", "\n", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "\"visited_states\"", ":", "torch", ".", "zeros", "(", "num_envs", ",", "1", ",", "M", ",", "M", ")", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", ",", "\n", "}", "\n", "ground_truth_states", "=", "{", "\n", "\"visible_occupancy\"", ":", "torch", ".", "zeros", "(", "num_envs", ",", "2", ",", "M", ",", "M", ")", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", ",", "\n", "\"pose\"", ":", "torch", ".", "zeros", "(", "num_envs", ",", "3", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "\"environment_layout\"", ":", "torch", ".", "zeros", "(", "num_envs", ",", "2", ",", "M", ",", "M", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "}", "\n", "\n", "# Reset ANS states", "\n", "self", ".", "ans_net", ".", "reset", "(", ")", "\n", "\n", "# Frames for video creation", "\n", "rgb_frames", "=", "[", "]", "\n", "if", "len", "(", "self", ".", "config", ".", "VIDEO_OPTION", ")", ">", "0", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "config", ".", "VIDEO_DIR", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "step_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_steps", ")", ":", "\n", "            ", "print", "(", "\n", "f\"\\n\\n---------------------------------------------------<<< STEP {i} >>>---------------------------------------------------\"", ")", "\n", "ep_time", "=", "torch", ".", "zeros", "(", "\n", "num_envs", ",", "1", ",", "device", "=", "self", ".", "device", "\n", ")", ".", "fill_", "(", "i", ")", "\n", "\n", "(", "\n", "mapper_inputs", ",", "\n", "local_policy_inputs", ",", "\n", "global_policy_inputs", ",", "\n", "mapper_outputs", ",", "\n", "local_policy_outputs", ",", "\n", "global_policy_outputs", ",", "\n", "state_estimates", ",", "\n", "intrinsic_rewards", ",", "\n", ")", "=", "self", ".", "ans_net", ".", "act", "(", "\n", "batch", ",", "\n", "prev_batch", ",", "\n", "state_estimates", ",", "\n", "ep_time", ",", "\n", "masks", ",", "\n", "deterministic", "=", "True", ",", "\n", ")", "\n", "if", "self", ".", "config", ".", "SAVE_MAP_IMGS", ":", "\n", "                ", "cv2", ".", "imwrite", "(", "f'maps/test_map_{i - 1}.jpg'", ",", "self", ".", "_round_map", "(", "state_estimates", "[", "'map_states'", "]", ")", "*", "255", ")", "\n", "\n", "", "action", "=", "local_policy_outputs", "[", "\"actions\"", "]", "[", "0", "]", "[", "0", "]", "\n", "\n", "distance2ggoal", "=", "torch", ".", "norm", "(", "\n", "mapper_outputs", "[", "'curr_map_position'", "]", "-", "self", ".", "ans_net", ".", "states", "[", "\"curr_global_goals\"", "]", ",", "dim", "=", "1", "\n", ")", "*", "s", "\n", "\n", "print", "(", "f\"Distance to Global Goal: {distance2ggoal}\"", ")", "\n", "\n", "reached_flag", "=", "distance2ggoal", "<", "ans_cfg", ".", "goal_success_radius", "\n", "\n", "if", "self", ".", "config", ".", "MANUAL_COMMANDS", ":", "\n", "                ", "if", "init_time", "is", "None", ":", "\n", "                    ", "init_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_manual_time", "=", "total_manual_time", "+", "init_time", "\n", "", "if", "manual_step_start_time", "is", "not", "None", ":", "\n", "                    ", "manual_step_time", "=", "time", ".", "time", "(", ")", "-", "manual_step_start_time", "\n", "total_manual_time", "=", "total_manual_time", "+", "manual_step_time", "\n", "", "action", "=", "torch", ".", "tensor", "(", "int", "(", "input", "(", "'Waiting input to start new action: '", ")", ")", ")", "\n", "manual_step_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "action", ".", "item", "(", ")", "==", "3", ":", "\n", "                    ", "reached_flag", "=", "True", "\n", "\n", "", "", "prev_action", ".", "copy_", "(", "action", ")", "\n", "\n", "if", "not", "reached_flag", "and", "action", ".", "item", "(", ")", "!=", "3", ":", "\n", "                ", "print", "(", "f'Doing Env Step [{self.ACT_2_NAME[action.item()]}]...'", ")", "\n", "action_command", "=", "self", ".", "ACT_2_COMMAND", "[", "action", ".", "item", "(", ")", "]", "\n", "\n", "obs", "=", "self", ".", "_do_action", "(", "action_command", ")", "\n", "\n", "if", "self", ".", "config", ".", "SAVE_OBS_IMGS", ":", "\n", "                    ", "cv2", ".", "imwrite", "(", "f'obs/depth_dirty_{i}.jpg'", ",", "obs", "[", "0", "]", "[", "'depth'", "]", "*", "255.0", ")", "\n", "\n", "# Correcting invalid depth pixels", "\n", "", "obs", "[", "0", "]", "[", "'depth'", "]", "[", "...", ",", "0", "]", "=", "self", ".", "_correct_depth", "(", "obs", ",", "i", ")", "\n", "\n", "if", "self", ".", "config", ".", "SAVE_OBS_IMGS", ":", "\n", "                    ", "cv2", ".", "imwrite", "(", "f'obs/rgb_{i}.jpg'", ",", "obs", "[", "0", "]", "[", "'rgb'", "]", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "cv2", ".", "imwrite", "(", "f'obs/depth_{i}.jpg'", ",", "obs", "[", "0", "]", "[", "'depth'", "]", "*", "255.0", ")", "\n", "\n", "", "agent_state", "=", "self", ".", "sim", ".", "get_agent_state", "(", ")", "\n", "prev_batch", "=", "batch", "\n", "batch", "=", "self", ".", "_prepare_batch", "(", "obs", ",", "i", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "pose", "=", "defaultdict", "(", ")", "\n", "pose", "[", "'base'", "]", "=", "locobot2relative", "(", "agent_state", "[", "'base'", "]", ")", "\n", "\n", "if", "ans_cfg", ".", "MAPPER", ".", "use_sensor_positioning", ":", "\n", "                    ", "batch", "[", "'pose'", "]", "=", "pose", "[", "'base'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "batch", "[", "'pose'", "]", "[", "0", "]", "[", "1", ":", "]", "=", "-", "batch", "[", "'pose'", "]", "[", "0", "]", "[", "1", ":", "]", "\n", "\n", "", "map_coords", "=", "convert_world2map", "(", "batch", "[", "'pose'", "]", ",", "(", "M", ",", "M", ")", ",", "\n", "ans_cfg", ".", "OCCUPANCY_ANTICIPATOR", ".", "EGO_PROJECTION", ".", "map_scale", ")", ".", "squeeze", "(", ")", "\n", "map_coords", "=", "torch", ".", "cat", "(", "(", "map_coords", ",", "batch", "[", "'pose'", "]", "[", "0", "]", "[", "-", "1", "]", ".", "reshape", "(", "1", ")", ")", ")", "\n", "if", "self", ".", "config", ".", "COORD_DEBUG", ":", "\n", "                    ", "print", "(", "'COORDINATES CHECK'", ")", "\n", "print", "(", "f'Starting Agent State: {starting_agent_state[\"base\"]}'", ")", "\n", "print", "(", "f'Current Agent State: {agent_state[\"base\"]}'", ")", "\n", "print", "(", "f'Current Sim Agent State: {self.sim.get_agent_state()[\"base\"]}'", ")", "\n", "print", "(", "f'Current Global Coords: {batch[\"pose\"]}'", ")", "\n", "print", "(", "f'Current Map Coords: {map_coords}'", ")", "\n", "", "agent_poses_over_time", ".", "append", "(", "map_coords", ")", "\n", "\n", "step_time", "=", "time", ".", "time", "(", ")", "-", "step_start_time", "\n", "print", "(", "f\"\\nStep Time: {step_time}\"", ")", "\n", "step_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Create new frame of the video", "\n", "", "if", "(", "\n", "len", "(", "self", ".", "config", ".", "VIDEO_OPTION", ")", ">", "0", "\n", ")", ":", "\n", "                ", "frame", "=", "observations_to_image", "(", "\n", "obs", "[", "0", "]", ",", "observation_size", "=", "300", ",", "collision_flag", "=", "self", ".", "config", ".", "DRAW_COLLISIONS", "\n", ")", "\n", "# Add ego_map_gt to frame", "\n", "ego_map_gt_i", "=", "asnumpy", "(", "batch", "[", "\"ego_map_gt\"", "]", "[", "0", "]", ")", "# (2, H, W)", "\n", "ego_map_gt_i", "=", "convert_gt2channel_to_gtrgb", "(", "ego_map_gt_i", ")", "\n", "ego_map_gt_i", "=", "cv2", ".", "resize", "(", "ego_map_gt_i", ",", "(", "300", ",", "300", ")", ")", "\n", "# frame = np.concatenate([frame], axis=1)", "\n", "# Generate ANS specific visualizations", "\n", "environment_layout", "=", "asnumpy", "(", "\n", "ground_truth_states", "[", "\"environment_layout\"", "]", "[", "0", "]", "\n", ")", "# (2, H, W)", "\n", "visible_occupancy", "=", "mapper_outputs", "[", "\"gt_mt\"", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (2, H, W)", "\n", "anticipated_occupancy", "=", "mapper_outputs", "[", "\"hat_mt\"", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (2, H, W)", "\n", "\n", "H", "=", "frame", ".", "shape", "[", "0", "]", "\n", "visible_occupancy_vis", "=", "generate_topdown_allocentric_map", "(", "\n", "environment_layout", ",", "\n", "visible_occupancy", ",", "\n", "agent_poses_over_time", ",", "\n", "thresh_explored", "=", "ans_cfg", ".", "thresh_explored", ",", "\n", "thresh_obstacle", "=", "ans_cfg", ".", "thresh_obstacle", ",", "\n", "zoom", "=", "False", "\n", ")", "\n", "visible_occupancy_vis", "=", "cv2", ".", "resize", "(", "\n", "visible_occupancy_vis", ",", "(", "H", ",", "H", ")", "\n", ")", "\n", "anticipated_occupancy_vis", "=", "generate_topdown_allocentric_map", "(", "\n", "environment_layout", ",", "\n", "anticipated_occupancy", ",", "\n", "agent_poses_over_time", ",", "\n", "thresh_explored", "=", "ans_cfg", ".", "thresh_explored", ",", "\n", "thresh_obstacle", "=", "ans_cfg", ".", "thresh_obstacle", ",", "\n", "zoom", "=", "False", "\n", ")", "\n", "anticipated_occupancy_vis", "=", "cv2", ".", "resize", "(", "\n", "anticipated_occupancy_vis", ",", "(", "H", ",", "H", ")", "\n", ")", "\n", "anticipated_action_map", "=", "generate_topdown_allocentric_map", "(", "\n", "environment_layout", ",", "\n", "anticipated_occupancy", ",", "\n", "agent_poses_over_time", ",", "\n", "zoom", "=", "False", ",", "\n", "thresh_explored", "=", "ans_cfg", ".", "thresh_explored", ",", "\n", "thresh_obstacle", "=", "ans_cfg", ".", "thresh_obstacle", ",", "\n", ")", "\n", "global_goals", "=", "self", ".", "ans_net", ".", "states", "[", "\"curr_global_goals\"", "]", "\n", "local_goals", "=", "self", ".", "ans_net", ".", "states", "[", "\"curr_local_goals\"", "]", "\n", "if", "global_goals", "is", "not", "None", ":", "\n", "                    ", "cX", "=", "int", "(", "global_goals", "[", "0", ",", "0", "]", ".", "item", "(", ")", ")", "\n", "cY", "=", "int", "(", "global_goals", "[", "0", ",", "1", "]", ".", "item", "(", ")", ")", "\n", "anticipated_action_map", "=", "cv2", ".", "circle", "(", "\n", "anticipated_action_map", ",", "\n", "(", "cX", ",", "cY", ")", ",", "\n", "10", ",", "\n", "(", "255", ",", "0", ",", "0", ")", ",", "\n", "-", "1", ",", "\n", ")", "\n", "", "if", "local_goals", "is", "not", "None", ":", "\n", "                    ", "cX", "=", "int", "(", "local_goals", "[", "0", ",", "0", "]", ".", "item", "(", ")", ")", "\n", "cY", "=", "int", "(", "local_goals", "[", "0", ",", "1", "]", ".", "item", "(", ")", ")", "\n", "anticipated_action_map", "=", "cv2", ".", "circle", "(", "\n", "anticipated_action_map", ",", "\n", "(", "cX", ",", "cY", ")", ",", "\n", "10", ",", "\n", "(", "0", ",", "255", ",", "255", ")", ",", "\n", "-", "1", ",", "\n", ")", "\n", "", "anticipated_action_map", "=", "cv2", ".", "resize", "(", "\n", "anticipated_action_map", ",", "(", "H", ",", "H", ")", "\n", ")", "\n", "\n", "maps_vis", "=", "np", ".", "concatenate", "(", "\n", "[", "\n", "visible_occupancy_vis", ",", "\n", "anticipated_occupancy_vis", ",", "\n", "anticipated_action_map", ",", "\n", "ego_map_gt_i", "\n", "]", ",", "\n", "axis", "=", "1", ",", "\n", ")", "\n", "\n", "if", "self", ".", "config", ".", "RL", ".", "ANS", ".", "overall_map_size", "==", "2001", "or", "self", ".", "config", ".", "RL", ".", "ANS", ".", "overall_map_size", "==", "961", ":", "\n", "                    ", "if", "frame", ".", "shape", "[", "1", "]", "<", "maps_vis", ".", "shape", "[", "1", "]", ":", "\n", "                        ", "diff", "=", "maps_vis", ".", "shape", "[", "1", "]", "-", "frame", ".", "shape", "[", "1", "]", "\n", "npad", "=", "(", "(", "0", ",", "0", ")", ",", "(", "diff", "//", "2", ",", "diff", "//", "2", ")", ",", "(", "0", ",", "0", ")", ")", "\n", "frame", "=", "np", ".", "pad", "(", "frame", ",", "pad_width", "=", "npad", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "", "elif", "frame", ".", "shape", "[", "1", "]", ">", "maps_vis", ".", "shape", "[", "1", "]", ":", "\n", "                        ", "diff", "=", "frame", ".", "shape", "[", "1", "]", "-", "maps_vis", ".", "shape", "[", "1", "]", "\n", "npad", "=", "(", "(", "0", ",", "0", ")", ",", "(", "diff", "//", "2", ",", "diff", "//", "2", ")", ",", "(", "0", ",", "0", ")", ")", "\n", "maps_vis", "=", "np", ".", "pad", "(", "maps_vis", ",", "pad_width", "=", "npad", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "", "", "frame", "=", "np", ".", "concatenate", "(", "[", "frame", ",", "maps_vis", "]", ",", "axis", "=", "0", ")", "\n", "rgb_frames", ".", "append", "(", "frame", ")", "\n", "if", "self", ".", "config", ".", "SAVE_VIDEO_IMGS", ":", "\n", "                    ", "try", ":", "\n", "                        ", "os", ".", "mkdir", "(", "\"fig1\"", ")", "\n", "", "except", ":", "\n", "                        ", "pass", "\n", "", "print", "(", "\"Saved imgs for Fig. 1!\"", ")", "\n", "cv2", ".", "imwrite", "(", "f'fig1/rgb_{step_start_time}.jpg'", ",", "obs", "[", "0", "]", "[", "'rgb'", "]", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "cv2", ".", "imwrite", "(", "f'fig1/depth_{step_start_time}.jpg'", ",", "obs", "[", "0", "]", "[", "'depth'", "]", "*", "255.0", ")", "\n", "cv2", ".", "imwrite", "(", "f'fig1/aap_{step_start_time}.jpg'", ",", "anticipated_action_map", "[", "...", ",", ":", ":", "-", "1", "]", ")", "\n", "cv2", ".", "imwrite", "(", "f'fig1/em_{step_start_time}.jpg'", ",", "ego_map_gt_i", "[", "...", ",", ":", ":", "-", "1", "]", ")", "\n", "", "if", "self", ".", "config", ".", "DEBUG_VIDEO_FRAME", ":", "\n", "                    ", "cv2", ".", "imwrite", "(", "'last_frame.jpg'", ",", "frame", ")", "\n", "\n", "", "if", "reached_flag", ":", "\n", "                    ", "for", "f", "in", "range", "(", "20", ")", ":", "\n", "                        ", "rgb_frames", ".", "append", "(", "frame", ")", "\n", "\n", "# Video creation", "\n", "", "", "video_dict", "=", "{", "\"t\"", ":", "start_time", "}", "\n", "if", "(", "i", "+", "1", ")", "%", "10", "==", "0", "or", "reached_flag", ":", "\n", "                    ", "generate_video", "(", "\n", "video_option", "=", "self", ".", "config", ".", "VIDEO_OPTION", ",", "\n", "video_dir", "=", "self", ".", "config", ".", "VIDEO_DIR", ",", "\n", "images", "=", "rgb_frames", ",", "\n", "episode_id", "=", "0", ",", "\n", "checkpoint_idx", "=", "checkpoint_index", ",", "\n", "metrics", "=", "video_dict", ",", "\n", "tb_writer", "=", "TensorboardWriter", "(", "'tb/locobot'", ")", ",", "\n", ")", "\n", "\n", "", "", "if", "reached_flag", ":", "\n", "                ", "if", "self", ".", "config", ".", "MANUAL_COMMANDS", ":", "\n", "                    ", "manual_step_time", "=", "time", ".", "time", "(", ")", "-", "manual_step_start_time", "\n", "total_manual_time", "=", "total_manual_time", "+", "manual_step_time", "\n", "print", "(", "f\"Manual elapsed time: {total_manual_time}\"", ")", "\n", "\n", "", "print", "(", "f\"Number of steps: {i + 1}\"", ")", "\n", "print", "(", "f\"Elapsed time: {time.time() - start_time}\"", ")", "\n", "print", "(", "f\"Final Distance to Goal: {distance2ggoal}\"", ")", "\n", "if", "\"bump\"", "in", "obs", "[", "0", "]", ":", "\n", "                    ", "print", "(", "f\"Collision: {obs[0]['bump']}\"", ")", "\n", "", "print", "(", "\"Exiting...\"", ")", "\n", "break", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.LocobotExplorer._correct_depth": [[520, 530], ["cv2.morphologyEx", "cv2.medianBlur", "cv2.copyMakeBorder", "numpy.ones", "cv2.inpaint().astype", "cv2.inpaint"], "methods", ["None"], ["", "def", "_correct_depth", "(", "self", ",", "obs", ",", "i", ")", ":", "\n", "# Inpainting, median blur and border replaced", "\n", "        ", "mask", "=", "(", "obs", "[", "0", "]", "[", "'depth'", "]", "<=", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "mask_dilated", "=", "cv2", ".", "morphologyEx", "(", "mask", ",", "cv2", ".", "MORPH_DILATE", ",", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ")", ",", "iterations", "=", "3", ")", "\n", "corrected_depth", "=", "(", "cv2", ".", "inpaint", "(", "(", "obs", "[", "0", "]", "[", "'depth'", "]", "*", "255.0", ")", ".", "astype", "(", "np", ".", "uint16", ")", ",", "mask_dilated", ",", "5", ",", "\n", "cv2", ".", "INPAINT_TELEA", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "median_depth", "=", "cv2", ".", "medianBlur", "(", "corrected_depth", ",", "5", ")", "\n", "removed_border", "=", "median_depth", "[", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", "\n", "final_depth", "=", "cv2", ".", "copyMakeBorder", "(", "removed_border", ",", "1", ",", "1", ",", "1", ",", "1", ",", "cv2", ".", "BORDER_REFLECT", ")", "\n", "return", "final_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.LocobotExplorer._setup_actor_critic_agent": [[531, 626], ["habitat.core.logging.logger.add_filehandler", "occant_baselines.models.occant.OccupancyAnticipator", "occant_baselines.rl.policy_utils.OccupancyAnticipationWrapper", "occant_baselines.rl.ans.ActiveNeuralSLAMExplorer", "occant_baselines.models.mapnet.DepthProjectionNet", "locobot_exp.LocobotExplorer.mapper.to", "locobot_exp.LocobotExplorer.local_actor_critic.to", "locobot_exp.LocobotExplorer.global_actor_critic.to", "locobot_exp.LocobotExplorer.depth_projection_net.to", "occant_baselines.supervised.map_update.MapUpdate", "habitat_baselines.rl.ppo.PPO", "os.mkdir", "os.mkdir", "os.mkdir", "os.path.join", "locobot_exp.LocobotExplorer.ans_net.to_ddp", "locobot_exp.LocobotExplorer.resume_checkpoint", "habitat_baselines.rl.ppo.PPO", "occant_baselines.supervised.imitation.Imitation"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.add_filehandler", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.to_ddp", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer.resume_checkpoint"], ["", "def", "_setup_actor_critic_agent", "(", "self", ",", "ppo_cfg", ":", "Config", ",", "ans_cfg", ":", "Config", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Sets up actor critic and agent for PPO.\n\n        Args:\n            ppo_cfg: config node with relevant params\n            ans_cfg: config node for ActiveNeuralSLAM model\n\n        Returns:\n            None\n        \"\"\"", "\n", "\n", "try", ":", "\n", "            ", "os", ".", "mkdir", "(", "'video_dir'", ")", "\n", "os", ".", "mkdir", "(", "'tb'", ")", "\n", "os", ".", "mkdir", "(", "self", ".", "config", ".", "TENSORBOARD_DIR", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "", "logger", ".", "add_filehandler", "(", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "TENSORBOARD_DIR", ",", "\"run.log\"", ")", ")", "\n", "\n", "occ_cfg", "=", "ans_cfg", ".", "OCCUPANCY_ANTICIPATOR", "\n", "mapper_cfg", "=", "ans_cfg", ".", "MAPPER", "\n", "# Create occupancy anticipation model", "\n", "occupancy_model", "=", "OccupancyAnticipator", "(", "occ_cfg", ")", "\n", "occupancy_model", "=", "OccupancyAnticipationWrapper", "(", "\n", "occupancy_model", ",", "mapper_cfg", ".", "map_size", ",", "(", "128", ",", "128", ")", "\n", ")", "\n", "# Create ANS model", "\n", "self", ".", "ans_net", "=", "ActiveNeuralSLAMExplorer", "(", "ans_cfg", ",", "occupancy_model", ")", "\n", "self", ".", "mapper", "=", "self", ".", "ans_net", ".", "mapper", "\n", "self", ".", "local_actor_critic", "=", "self", ".", "ans_net", ".", "local_policy", "\n", "self", ".", "global_actor_critic", "=", "self", ".", "ans_net", ".", "global_policy", "\n", "# Create depth projection model to estimate visible occupancy", "\n", "self", ".", "depth_projection_net", "=", "DepthProjectionNet", "(", "\n", "ans_cfg", ".", "OCCUPANCY_ANTICIPATOR", ".", "EGO_PROJECTION", "\n", ")", "\n", "# Set to device", "\n", "self", ".", "mapper", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "local_actor_critic", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "global_actor_critic", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "depth_projection_net", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "ans_cfg", ".", "use_ddp", ":", "\n", "            ", "self", ".", "ans_net", ".", "to_ddp", "(", ")", "\n", "\n", "# ============================== Create agents ================================", "\n", "# Mapper agent", "\n", "", "self", ".", "mapper_agent", "=", "MapUpdate", "(", "\n", "self", ".", "mapper", ",", "\n", "lr", "=", "mapper_cfg", ".", "lr", ",", "\n", "eps", "=", "mapper_cfg", ".", "eps", ",", "\n", "label_id", "=", "mapper_cfg", ".", "label_id", ",", "\n", "max_grad_norm", "=", "mapper_cfg", ".", "max_grad_norm", ",", "\n", "pose_loss_coef", "=", "mapper_cfg", ".", "pose_loss_coef", ",", "\n", "occupancy_anticipator_type", "=", "ans_cfg", ".", "OCCUPANCY_ANTICIPATOR", ".", "type", ",", "\n", "freeze_projection_unit", "=", "mapper_cfg", ".", "freeze_projection_unit", ",", "\n", "num_update_batches", "=", "mapper_cfg", ".", "num_update_batches", ",", "\n", "batch_size", "=", "mapper_cfg", ".", "map_batch_size", ",", "\n", "mapper_rollouts", "=", "self", ".", "mapper_rollouts", ",", "\n", ")", "\n", "# Local policy", "\n", "if", "ans_cfg", ".", "LOCAL_POLICY", ".", "use_heuristic_policy", ":", "\n", "            ", "self", ".", "local_agent", "=", "None", "\n", "", "elif", "ans_cfg", ".", "LOCAL_POLICY", ".", "learning_algorithm", "==", "\"rl\"", ":", "\n", "            ", "self", ".", "local_agent", "=", "PPO", "(", "\n", "actor_critic", "=", "self", ".", "local_actor_critic", ",", "\n", "clip_param", "=", "ppo_cfg", ".", "clip_param", ",", "\n", "ppo_epoch", "=", "ppo_cfg", ".", "ppo_epoch", ",", "\n", "num_mini_batch", "=", "ppo_cfg", ".", "num_mini_batch", ",", "\n", "value_loss_coef", "=", "ppo_cfg", ".", "value_loss_coef", ",", "\n", "entropy_coef", "=", "ppo_cfg", ".", "local_entropy_coef", ",", "\n", "lr", "=", "ppo_cfg", ".", "local_policy_lr", ",", "\n", "eps", "=", "ppo_cfg", ".", "eps", ",", "\n", "max_grad_norm", "=", "ppo_cfg", ".", "max_grad_norm", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "local_agent", "=", "Imitation", "(", "\n", "actor_critic", "=", "self", ".", "local_actor_critic", ",", "\n", "lr", "=", "ppo_cfg", ".", "local_policy_lr", ",", "\n", "eps", "=", "ppo_cfg", ".", "eps", ",", "\n", "max_grad_norm", "=", "ppo_cfg", ".", "max_grad_norm", ",", "\n", ")", "\n", "# Global policy", "\n", "", "self", ".", "global_agent", "=", "PPO", "(", "\n", "actor_critic", "=", "self", ".", "global_actor_critic", ",", "\n", "clip_param", "=", "ppo_cfg", ".", "clip_param", ",", "\n", "ppo_epoch", "=", "ppo_cfg", ".", "ppo_epoch", ",", "\n", "num_mini_batch", "=", "ppo_cfg", ".", "num_mini_batch", ",", "\n", "value_loss_coef", "=", "ppo_cfg", ".", "value_loss_coef", ",", "\n", "entropy_coef", "=", "ppo_cfg", ".", "entropy_coef", ",", "\n", "lr", "=", "ppo_cfg", ".", "lr", ",", "\n", "eps", "=", "ppo_cfg", ".", "eps", ",", "\n", "max_grad_norm", "=", "ppo_cfg", ".", "max_grad_norm", ",", "\n", ")", "\n", "if", "ans_cfg", ".", "model_path", "!=", "\"\"", ":", "\n", "            ", "self", ".", "resume_checkpoint", "(", "ans_cfg", ".", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.LocobotExplorer._setup_config": [[627, 644], ["locobot_exp.LocobotExplorer.defrost", "locobot_exp.LocobotExplorer.freeze", "locobot_exp.LocobotExplorer.logger.info", "locobot_exp.LocobotExplorer._setup_eval_config", "locobot_exp.LocobotExplorer.config.clone", "locobot_exp.LocobotExplorer.TASK_CONFIG.TASK.SENSORS.append", "len", "locobot_exp.LocobotExplorer.defrost", "locobot_exp.LocobotExplorer.TASK_CONFIG.TASK.MEASUREMENTS.append", "locobot_exp.LocobotExplorer.TASK_CONFIG.TASK.MEASUREMENTS.append", "locobot_exp.LocobotExplorer.freeze"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.LocobotExplorer._setup_eval_config"], ["", "", "def", "_setup_config", "(", "self", ",", "ckpt_dict", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "EVAL", ".", "USE_CKPT_CONFIG", ":", "\n", "            ", "config", "=", "self", ".", "_setup_eval_config", "(", "ckpt_dict", "[", "\"config\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "config", "=", "self", ".", "config", ".", "clone", "(", ")", "\n", "", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "SPLIT", "=", "config", ".", "EVAL", ".", "SPLIT", "\n", "config", ".", "freeze", "(", ")", "\n", "if", "\"COLLISION_SENSOR\"", "not", "in", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "SENSORS", ":", "\n", "            ", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "SENSORS", ".", "append", "(", "\"COLLISION_SENSOR\"", ")", "\n", "", "if", "len", "(", "self", ".", "config", ".", "VIDEO_OPTION", ")", ">", "0", ":", "\n", "            ", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "MEASUREMENTS", ".", "append", "(", "\"TOP_DOWN_MAP_EXP\"", ")", "\n", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "MEASUREMENTS", ".", "append", "(", "\"COLLISIONS\"", ")", "\n", "config", ".", "freeze", "(", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "f\"env config: {config}\"", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.LocobotExplorer._setup_eval_config": [[645, 682], ["locobot_exp.LocobotExplorer.config.clone", "locobot_exp.LocobotExplorer.defrost", "locobot_exp.LocobotExplorer.freeze", "locobot_exp.LocobotExplorer.merge_from_other_cfg", "locobot_exp.LocobotExplorer.merge_from_other_cfg", "locobot_exp.LocobotExplorer.merge_from_list", "locobot_exp.LocobotExplorer.merge_from_list", "locobot_exp.LocobotExplorer.TASK_CONFIG.defrost", "habitat.core.logging.logger.info", "locobot_exp.LocobotExplorer.config.clone", "locobot_exp.LocobotExplorer.merge_from_list"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info"], ["", "def", "_setup_eval_config", "(", "self", ",", "checkpoint_config", ":", "Config", ")", "->", "Config", ":", "\n", "        ", "r\"\"\"Sets up and returns a merged config for evaluation. Config\n            object saved from checkpoint is merged into config file specified\n            at evaluation time with the following overwrite priority:\n                  eval_opts > ckpt_opts > eval_cfg > ckpt_cfg\n            If the saved config is outdated, only the eval config is returned.\n\n        Args:\n            checkpoint_config: saved config from checkpoint.\n\n        Returns:\n            Config: merged config for eval.\n        \"\"\"", "\n", "\n", "config", "=", "self", ".", "config", ".", "clone", "(", ")", "\n", "config", ".", "defrost", "(", ")", "\n", "\n", "ckpt_cmd_opts", "=", "checkpoint_config", ".", "CMD_TRAILING_OPTS", "\n", "eval_cmd_opts", "=", "config", ".", "CMD_TRAILING_OPTS", "\n", "\n", "try", ":", "\n", "            ", "config", ".", "merge_from_other_cfg", "(", "checkpoint_config", ")", "\n", "config", ".", "merge_from_other_cfg", "(", "self", ".", "config", ")", "\n", "config", ".", "merge_from_list", "(", "ckpt_cmd_opts", ")", "\n", "config", ".", "merge_from_list", "(", "eval_cmd_opts", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "logger", ".", "info", "(", "\"Saved config is outdated, using solely eval config\"", ")", "\n", "config", "=", "self", ".", "config", ".", "clone", "(", ")", "\n", "config", ".", "merge_from_list", "(", "eval_cmd_opts", ")", "\n", "", "if", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "SPLIT", "==", "\"train\"", ":", "\n", "            ", "config", ".", "TASK_CONFIG", ".", "defrost", "(", ")", "\n", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "SPLIT", "=", "\"val\"", "\n", "\n", "", "config", ".", "TASK_CONFIG", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", "=", "self", ".", "config", ".", "SENSORS", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.LocobotExplorer._prepare_batch": [[683, 710], ["habitat_baselines.common.utils.batch_obs", "locobot_exp.LocobotExplorer.depth_projection_net", "einops.rearrange", "einops.rearrange", "torch.interpolate", "torch.interpolate", "einops.rearrange", "einops.rearrange", "torch.interpolate", "torch.interpolate", "einops.rearrange", "einops.rearrange", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "batch[].size", "batch[].size", "batch[].size", "batch[].size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["", "def", "_prepare_batch", "(", "self", ",", "observations", ",", "i", ",", "device", "=", "None", ",", "actions", "=", "None", ")", ":", "\n", "        ", "imH", ",", "imW", "=", "self", ".", "config", ".", "RL", ".", "ANS", ".", "image_scale_hw", "\n", "device", "=", "self", ".", "device", "if", "device", "is", "None", "else", "device", "\n", "\n", "batch", "=", "batch_obs", "(", "observations", ",", "device", "=", "device", ")", "\n", "\n", "if", "batch", "[", "\"rgb\"", "]", ".", "size", "(", "1", ")", "!=", "imH", "or", "batch", "[", "\"rgb\"", "]", ".", "size", "(", "2", ")", "!=", "imW", ":", "\n", "            ", "rgb", "=", "rearrange", "(", "batch", "[", "\"rgb\"", "]", ",", "\"b h w c -> b c h w\"", ")", "\n", "rgb", "=", "F", ".", "interpolate", "(", "rgb", ",", "(", "imH", ",", "imW", ")", ",", "mode", "=", "\"bilinear\"", ")", "\n", "batch", "[", "\"rgb\"", "]", "=", "rearrange", "(", "rgb", ",", "\"b c h w -> b h w c\"", ")", "\n", "", "if", "batch", "[", "\"depth\"", "]", ".", "size", "(", "1", ")", "!=", "imH", "or", "batch", "[", "\"depth\"", "]", ".", "size", "(", "2", ")", "!=", "imW", ":", "\n", "            ", "depth", "=", "rearrange", "(", "batch", "[", "\"depth\"", "]", ",", "\"b h w c -> b c h w\"", ")", "\n", "depth", "=", "F", ".", "interpolate", "(", "depth", ",", "(", "imH", ",", "imW", ")", ",", "mode", "=", "\"bilinear\"", ")", "\n", "batch", "[", "\"depth\"", "]", "=", "rearrange", "(", "depth", ",", "\"b c h w -> b h w c\"", ")", "\n", "\n", "# Compute ego_map_gt from depth", "\n", "", "ego_map_gt_b", "=", "self", ".", "depth_projection_net", "(", "\n", "rearrange", "(", "batch", "[", "\"depth\"", "]", ",", "\"b h w c -> b c h w\"", ")", "\n", ")", "\n", "batch", "[", "\"ego_map_gt\"", "]", "=", "rearrange", "(", "ego_map_gt_b", ",", "\"b c h w -> b h w c\"", ")", "\n", "\n", "if", "actions", "is", "None", ":", "\n", "            ", "batch", "[", "\"prev_actions\"", "]", "=", "torch", ".", "zeros", "(", "1", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "batch", "[", "\"prev_actions\"", "]", "=", "actions", "\n", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.LocobotExplorer._do_action": [[711, 714], ["locobot_exp.LocobotExplorer.sim.step"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.step"], ["", "def", "_do_action", "(", "self", ",", "action_command", ")", ":", "\n", "        ", "obs", "=", "[", "self", ".", "sim", ".", "step", "(", "action_command", "[", "0", "]", ",", "action_command", "[", "1", "]", ")", "]", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.LocobotExplorer._round_map": [[715, 720], ["sem_map.cpu().numpy", "sem_map.cpu"], "methods", ["None"], ["", "def", "_round_map", "(", "self", ",", "sem_map", ")", ":", "\n", "        ", "new_map", "=", "sem_map", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", "\n", "new_map", "[", "new_map", ">=", "0.5", "]", "=", "1.0", "\n", "new_map", "[", "new_map", "<", "0.5", "]", "=", "0.0", "\n", "return", "new_map", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.CoordProjection.__init__": [[723, 735], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "starting_pose", ",", "debug", "=", "False", ")", ":", "\n", "        ", "self", ".", "delta_x", "=", "starting_pose", "[", "0", "]", "\n", "self", ".", "delta_y", "=", "starting_pose", "[", "1", "]", "\n", "self", ".", "yaw", "=", "starting_pose", "[", "-", "1", "]", "\n", "self", ".", "rot_matrix", "=", "torch", ".", "tensor", "(", "\n", "[", "\n", "[", "np", ".", "cos", "(", "self", ".", "yaw", ")", ",", "-", "np", ".", "sin", "(", "self", ".", "yaw", ")", ",", "self", ".", "delta_x", "]", ",", "\n", "[", "np", ".", "sin", "(", "self", ".", "yaw", ")", ",", "np", ".", "cos", "(", "self", ".", "yaw", ")", ",", "self", ".", "delta_y", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", "\n", "self", ".", "debug", "=", "debug", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.CoordProjection._coordinate_projection": [[736, 746], ["torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm.reshape", "torch.mm.reshape", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "print", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "_coordinate_projection", "(", "self", ",", "current_pose", ")", ":", "\n", "        ", "agent_state", "=", "torch", ".", "tensor", "(", "[", "current_pose", "[", "0", "]", ",", "current_pose", "[", "1", "]", ",", "1", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "unsqueeze", "(", "1", ")", "\n", "agent_state", "=", "torch", ".", "mm", "(", "torch", ".", "inverse", "(", "self", ".", "rot_matrix", ")", ",", "agent_state", ")", "\n", "agent_state", "[", "-", "1", "]", "=", "current_pose", "[", "-", "1", "]", "-", "self", ".", "yaw", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "print", "(", "f'Rotation Matrix: {self.rot_matrix}'", ")", "\n", "print", "(", "f'Agent State: {agent_state}'", ")", "\n", "\n", "", "return", "agent_state", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.CoordProjection.__call__": [[747, 749], ["locobot_exp.CoordProjection._coordinate_projection"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.CoordProjection._coordinate_projection"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_coordinate_projection", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.new_get_observation": [[46, 61], ["robot_obs.get", "habitat.sims.pyrobot.pyrobot._resize_observation", "numpy.clip", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1._resize_observation"], ["def", "new_get_observation", "(", "self", ",", "robot_obs", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "    ", "obs", "=", "robot_obs", ".", "get", "(", "self", ".", "uuid", ",", "None", ")", "\n", "assert", "obs", "is", "not", "None", ",", "\"Invalid observation for {} sensor\"", ".", "format", "(", "\n", "self", ".", "uuid", "\n", ")", "\n", "obs", "=", "_resize_observation", "(", "obs", ",", "self", ".", "observation_space", ",", "self", ".", "config", ")", "\n", "# obs = obs / MM_IN_METER  # convert from mm to m", "\n", "obs", "=", "np", ".", "clip", "(", "obs", ",", "self", ".", "config", ".", "MIN_DEPTH", ",", "self", ".", "config", ".", "MAX_DEPTH", ")", "\n", "if", "self", ".", "config", ".", "NORMALIZE_DEPTH", ":", "\n", "# normalize depth observations to [0, 1]", "\n", "        ", "obs", "=", "(", "obs", "-", "self", ".", "config", ".", "MIN_DEPTH", ")", "/", "(", "\n", "self", ".", "config", ".", "MAX_DEPTH", "-", "self", ".", "config", ".", "MIN_DEPTH", "\n", ")", "\n", "", "obs", "=", "np", ".", "expand_dims", "(", "obs", ",", "axis", "=", "2", ")", "# make depth observations a 3D array", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.main": [[63, 80], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "locobot_exp.run_exp", "vars"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.run.run_exp"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--exp-config\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"path to config yaml containing info about experiment\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", "help", "=", "\"Modify config options from command line\"", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "run_exp", "(", "**", "vars", "(", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.run_exp": [[82, 108], ["occant_baselines.config.default.get_config", "locobot_exp.init_distributed", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "locobot_exp.LocobotExplorer", "locobot_exp.LocobotExplorer._eval", "sys.exit"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.config.default.get_config", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.run.init_distributed", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.seed", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.seed", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.LocobotExplorer._eval"], ["", "def", "run_exp", "(", "exp_config", ":", "str", ",", "opts", "=", "None", ")", "->", "None", ":", "\n", "    ", "r\"\"\"Runs experiment given mode and config\n\n    Args:\n        exp_config: path to config file.\n        run_type: \"train\" or \"eval.\n        opts: list of strings of additional config options.\n\n    Returns:\n        None.\n    \"\"\"", "\n", "config", "=", "get_config", "(", "exp_config", ",", "opts", ")", "\n", "\n", "world_size", "=", "1", "\n", "rank", "=", "0", "\n", "init_distributed", "(", "world_size", ",", "rank", ")", "\n", "\n", "random", ".", "seed", "(", "config", ".", "TASK_CONFIG", ".", "SEED", ")", "\n", "np", ".", "random", ".", "seed", "(", "config", ".", "TASK_CONFIG", ".", "SEED", ")", "\n", "torch", ".", "manual_seed", "(", "config", ".", "TASK_CONFIG", ".", "SEED", ")", "\n", "\n", "locobot", "=", "LocobotExplorer", "(", "config", ")", "\n", "try", ":", "\n", "        ", "locobot", ".", "_eval", "(", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "sys", ".", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.init_distributed": [[110, 116], ["torch.distributed.init_process_group"], "function", ["None"], ["", "", "def", "init_distributed", "(", "world_size", ",", "rank", ")", ":", "\n", "    ", "if", "'MASTER_ADDR'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "'localhost'", "\n", "", "if", "'MASTER_PORT'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "'4301'", "\n", "", "distributed", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "world_size", "=", "world_size", ",", "rank", "=", "rank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.run.main": [[20, 55], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "run.run_exp", "vars"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.run.run_exp"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--run-type\"", ",", "\n", "choices", "=", "[", "\"train\"", ",", "\"eval\"", "]", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"run type of the experiment (train or eval)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--exp-config\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"path to config yaml containing info about experiment\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", "help", "=", "\"Modify config options from command line\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--world-size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "\"\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--rank\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "\"\"", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "run_exp", "(", "**", "vars", "(", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.run.init_distributed": [[57, 64], ["torch.distributed.init_process_group"], "function", ["None"], ["", "def", "init_distributed", "(", "world_size", ",", "rank", ")", ":", "\n", "    ", "if", "'MASTER_ADDR'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "'localhost'", "\n", "", "if", "'MASTER_PORT'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "'4242'", "\n", "\n", "", "distributed", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "world_size", "=", "world_size", ",", "rank", "=", "rank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.run.run_exp": [[66, 99], ["occant_baselines.config.default.get_config", "random.seed", "numpy.random.seed", "torch.manual_seed", "occant_baselines.config.default.get_config.defrost", "occant_baselines.config.default.get_config.freeze", "run.init_distributed", "habitat_baselines.common.baseline_registry.baseline_registry.get_trainer", "baseline_registry.get_trainer.", "trainer_init.train", "trainer_init.eval"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.config.default.get_config", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.seed", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.seed", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.run.init_distributed", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.train", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.eval"], ["", "def", "run_exp", "(", "exp_config", ":", "str", ",", "run_type", ":", "str", ",", "world_size", ",", "rank", ",", "opts", "=", "None", ")", "->", "None", ":", "\n", "    ", "r\"\"\"Runs experiment given mode and config\n\n    Args:\n        exp_config: path to config file.\n        run_type: \"train\" or \"eval.\n        opts: list of strings of additional config options.\n\n    Returns:\n        None.\n    \"\"\"", "\n", "config", "=", "get_config", "(", "exp_config", ",", "opts", ")", "\n", "\n", "random", ".", "seed", "(", "config", ".", "TASK_CONFIG", ".", "SEED", ")", "\n", "np", ".", "random", ".", "seed", "(", "config", ".", "TASK_CONFIG", ".", "SEED", ")", "\n", "torch", ".", "manual_seed", "(", "config", ".", "TASK_CONFIG", ".", "SEED", ")", "\n", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "WORLD_SIZE", "=", "world_size", "\n", "config", ".", "RANK", "=", "rank", "\n", "config", ".", "DISTRIBUTED", "=", "True", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "init_distributed", "(", "world_size", ",", "rank", ")", "\n", "\n", "trainer_init", "=", "baseline_registry", ".", "get_trainer", "(", "config", ".", "TRAINER_NAME", ")", "\n", "assert", "trainer_init", "is", "not", "None", ",", "f\"{config.TRAINER_NAME} is not supported\"", "\n", "trainer", "=", "trainer_init", "(", "config", ")", "\n", "\n", "if", "run_type", "==", "\"train\"", ":", "\n", "        ", "trainer", ".", "train", "(", ")", "\n", "", "elif", "run_type", "==", "\"eval\"", ":", "\n", "        ", "trainer", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_dataset.ExplorationDatasetV1.check_config_paths_exist": [[30, 35], ["os.path.exists", "os.path.exists", "config.DATA_PATH.format"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "check_config_paths_exist", "(", "config", ":", "Config", ")", "->", "bool", ":", "\n", "        ", "return", "os", ".", "path", ".", "exists", "(", "\n", "config", ".", "DATA_PATH", ".", "format", "(", "split", "=", "config", ".", "SPLIT", ")", "\n", ")", "and", "os", ".", "path", ".", "exists", "(", "config", ".", "SCENES_DIR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_dataset.ExplorationDatasetV1.get_scenes_to_load": [[36, 63], ["cls.check_config_paths_exist", "os.path.dirname", "config.clone", "config.clone.defrost", "cls", "os.path.exists", "config.DATA_PATH.format", "[].format", "cls._get_scenes_from_folder", "cls", "list", "map", "cls.content_scenes_path.split"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_dataset.ExplorationDatasetV1.check_config_paths_exist", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_dataset.ExplorationDatasetV1._get_scenes_from_folder"], ["", "@", "classmethod", "\n", "def", "get_scenes_to_load", "(", "cls", ",", "config", ":", "Config", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "r\"\"\"Return list of scene ids for which dataset has separate files with\n        episodes.\n        \"\"\"", "\n", "assert", "cls", ".", "check_config_paths_exist", "(", "config", ")", "\n", "dataset_dir", "=", "os", ".", "path", ".", "dirname", "(", "config", ".", "DATA_PATH", ".", "format", "(", "split", "=", "config", ".", "SPLIT", ")", ")", "\n", "\n", "cfg", "=", "config", ".", "clone", "(", ")", "\n", "cfg", ".", "defrost", "(", ")", "\n", "cfg", ".", "CONTENT_SCENES", "=", "[", "]", "\n", "dataset", "=", "cls", "(", "cfg", ")", "\n", "has_individual_scene_files", "=", "os", ".", "path", ".", "exists", "(", "\n", "dataset", ".", "content_scenes_path", ".", "split", "(", "\"{scene}\"", ")", "[", "0", "]", ".", "format", "(", "\n", "data_path", "=", "dataset_dir", "\n", ")", "\n", ")", "\n", "if", "has_individual_scene_files", ":", "\n", "            ", "return", "cls", ".", "_get_scenes_from_folder", "(", "\n", "content_scenes_path", "=", "dataset", ".", "content_scenes_path", ",", "\n", "dataset_dir", "=", "dataset_dir", ",", "\n", ")", "\n", "", "else", ":", "\n", "# Load the full dataset, things are not split into separate files", "\n", "            ", "cfg", ".", "CONTENT_SCENES", "=", "[", "ALL_SCENES_MASK", "]", "\n", "dataset", "=", "cls", "(", "cfg", ")", "\n", "return", "list", "(", "map", "(", "cls", ".", "scene_from_scene_path", ",", "dataset", ".", "scene_ids", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_dataset.ExplorationDatasetV1._get_scenes_from_folder": [[64, 79], ["content_dir.format.format.format", "os.listdir", "scenes.sort", "content_scenes_path.split", "content_scenes_path.split", "os.path.exists", "filename.endswith", "scenes.append", "len"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_get_scenes_from_folder", "(", "content_scenes_path", ",", "dataset_dir", ")", ":", "\n", "        ", "scenes", "=", "[", "]", "\n", "content_dir", "=", "content_scenes_path", ".", "split", "(", "\"{scene}\"", ")", "[", "0", "]", "\n", "scene_dataset_ext", "=", "content_scenes_path", ".", "split", "(", "\"{scene}\"", ")", "[", "1", "]", "\n", "content_dir", "=", "content_dir", ".", "format", "(", "data_path", "=", "dataset_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "content_dir", ")", ":", "\n", "            ", "return", "scenes", "\n", "\n", "", "for", "filename", "in", "os", ".", "listdir", "(", "content_dir", ")", ":", "\n", "            ", "if", "filename", ".", "endswith", "(", "scene_dataset_ext", ")", ":", "\n", "                ", "scene", "=", "filename", "[", ":", "-", "len", "(", "scene_dataset_ext", ")", "]", "\n", "scenes", ".", "append", "(", "scene", ")", "\n", "", "", "scenes", ".", "sort", "(", ")", "\n", "return", "scenes", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_dataset.ExplorationDatasetV1.__init__": [[80, 113], ["config.DATA_PATH.format", "os.path.dirname", "os.path.exists", "gzip.open", "exploration_dataset.ExplorationDatasetV1.from_json", "[].format", "list", "f.read", "exploration_dataset.ExplorationDatasetV1._get_scenes_from_folder", "exploration_dataset.ExplorationDatasetV1.content_scenes_path.format", "filter", "gzip.open", "exploration_dataset.ExplorationDatasetV1.from_json", "exploration_dataset.ExplorationDatasetV1.build_content_scenes_filter", "exploration_dataset.ExplorationDatasetV1.content_scenes_path.split", "f.read"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_dataset.ExplorationDatasetV1.from_json", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_dataset.ExplorationDatasetV1._get_scenes_from_folder", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_dataset.ExplorationDatasetV1.from_json"], ["", "def", "__init__", "(", "self", ",", "config", ":", "Optional", "[", "Config", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "episodes", "=", "[", "]", "\n", "\n", "if", "config", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "datasetfile_path", "=", "config", ".", "DATA_PATH", ".", "format", "(", "split", "=", "config", ".", "SPLIT", ")", "\n", "with", "gzip", ".", "open", "(", "datasetfile_path", ",", "\"rt\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "from_json", "(", "f", ".", "read", "(", ")", ",", "scenes_dir", "=", "config", ".", "SCENES_DIR", ")", "\n", "\n", "# Read separate file for each scene", "\n", "", "dataset_dir", "=", "os", ".", "path", ".", "dirname", "(", "datasetfile_path", ")", "\n", "has_individual_scene_files", "=", "os", ".", "path", ".", "exists", "(", "\n", "self", ".", "content_scenes_path", ".", "split", "(", "\"{scene}\"", ")", "[", "0", "]", ".", "format", "(", "data_path", "=", "dataset_dir", ")", "\n", ")", "\n", "if", "has_individual_scene_files", ":", "\n", "            ", "scenes", "=", "config", ".", "CONTENT_SCENES", "\n", "if", "ALL_SCENES_MASK", "in", "scenes", ":", "\n", "                ", "scenes", "=", "self", ".", "_get_scenes_from_folder", "(", "\n", "content_scenes_path", "=", "self", ".", "content_scenes_path", ",", "\n", "dataset_dir", "=", "dataset_dir", ",", "\n", ")", "\n", "\n", "", "for", "scene", "in", "scenes", ":", "\n", "                ", "scene_filename", "=", "self", ".", "content_scenes_path", ".", "format", "(", "\n", "data_path", "=", "dataset_dir", ",", "scene", "=", "scene", "\n", ")", "\n", "with", "gzip", ".", "open", "(", "scene_filename", ",", "\"rt\"", ")", "as", "f", ":", "\n", "                    ", "self", ".", "from_json", "(", "f", ".", "read", "(", ")", ",", "scenes_dir", "=", "config", ".", "SCENES_DIR", ")", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "episodes", "=", "list", "(", "\n", "filter", "(", "self", ".", "build_content_scenes_filter", "(", "config", ")", ",", "self", ".", "episodes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_dataset.ExplorationDatasetV1.from_json": [[115, 132], ["json.loads", "habitat_extensions.exploration_task.ExplorationEpisode", "exploration_dataset.ExplorationDatasetV1.episodes.append", "habitat_extensions.exploration_task.ExplorationEpisode.scene_id.startswith", "os.path.join", "len"], "methods", ["None"], ["", "", "def", "from_json", "(", "self", ",", "json_str", ":", "str", ",", "scenes_dir", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "deserialized", "=", "json", ".", "loads", "(", "json_str", ")", "\n", "if", "CONTENT_SCENES_PATH_FIELD", "in", "deserialized", ":", "\n", "            ", "self", ".", "content_scenes_path", "=", "deserialized", "[", "CONTENT_SCENES_PATH_FIELD", "]", "\n", "\n", "", "for", "episode", "in", "deserialized", "[", "\"episodes\"", "]", ":", "\n", "            ", "episode", "=", "ExplorationEpisode", "(", "**", "episode", ")", "\n", "\n", "if", "scenes_dir", "is", "not", "None", ":", "\n", "                ", "if", "episode", ".", "scene_id", ".", "startswith", "(", "DEFAULT_SCENE_PATH_PREFIX", ")", ":", "\n", "                    ", "episode", ".", "scene_id", "=", "episode", ".", "scene_id", "[", "\n", "len", "(", "DEFAULT_SCENE_PATH_PREFIX", ")", ":", "\n", "]", "\n", "\n", "", "episode", ".", "scene_id", "=", "os", ".", "path", ".", "join", "(", "scenes_dir", ",", "episode", ".", "scene_id", ")", "\n", "\n", "", "self", ".", "episodes", ".", "append", "(", "episode", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap.__init__": [[45, 73], ["int", "habitat.core.embodied_task.Measure.__init__", "int", "numpy.round", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["def", "__init__", "(", "\n", "self", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "self", ".", "_grid_delta", "=", "config", ".", "MAP_PADDING", "\n", "self", ".", "_step_count", "=", "None", "\n", "self", ".", "_map_resolution", "=", "(", "config", ".", "MAP_RESOLUTION", ",", "config", ".", "MAP_RESOLUTION", ")", "\n", "self", ".", "_num_samples", "=", "config", ".", "NUM_TOPDOWN_MAP_SAMPLE_POINTS", "\n", "self", ".", "_ind_x_min", "=", "None", "\n", "self", ".", "_ind_x_max", "=", "None", "\n", "self", ".", "_ind_y_min", "=", "None", "\n", "self", ".", "_ind_y_max", "=", "None", "\n", "self", ".", "_previous_xy_location", "=", "None", "\n", "self", ".", "_coordinate_min", "=", "maps", ".", "COORDINATE_MIN", "\n", "self", ".", "_coordinate_max", "=", "maps", ".", "COORDINATE_MAX", "\n", "self", ".", "_top_down_map", "=", "None", "\n", "self", ".", "_shortest_path_points", "=", "None", "\n", "self", ".", "_cell_scale", "=", "(", "\n", "self", ".", "_coordinate_max", "-", "self", ".", "_coordinate_min", "\n", ")", "/", "self", ".", "_map_resolution", "[", "0", "]", "\n", "self", ".", "line_thickness", "=", "int", "(", "\n", "np", ".", "round", "(", "self", ".", "_map_resolution", "[", "0", "]", "*", "2", "/", "MAP_THICKNESS_SCALAR", ")", "*", "0.5", "\n", ")", "\n", "self", ".", "point_padding", "=", "2", "*", "int", "(", "\n", "np", ".", "ceil", "(", "self", ".", "_map_resolution", "[", "0", "]", "/", "MAP_THICKNESS_SCALAR", ")", "\n", ")", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap._get_uuid": [[74, 76], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "\"top_down_map\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap._check_valid_nav_point": [[77, 79], ["measures.TopDownMap._sim.is_navigable"], "methods", ["None"], ["", "def", "_check_valid_nav_point", "(", "self", ",", "point", ":", "List", "[", "float", "]", ")", ":", "\n", "        ", "self", ".", "_sim", ".", "is_navigable", "(", "point", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap.get_original_map": [[80, 100], ["habitat_extensions.maps.get_topdown_map", "numpy.where", "numpy.where", "numpy.zeros_like", "numpy.any", "numpy.any"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.get_topdown_map"], ["", "def", "get_original_map", "(", "self", ")", ":", "\n", "        ", "top_down_map", "=", "maps", ".", "get_topdown_map", "(", "\n", "self", ".", "_sim", ",", "\n", "self", ".", "_map_resolution", ",", "\n", "self", ".", "_num_samples", ",", "\n", "self", ".", "_config", ".", "DRAW_BORDER", ",", "\n", ")", "\n", "\n", "range_x", "=", "np", ".", "where", "(", "np", ".", "any", "(", "top_down_map", ",", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "range_y", "=", "np", ".", "where", "(", "np", ".", "any", "(", "top_down_map", ",", "axis", "=", "0", ")", ")", "[", "0", "]", "\n", "\n", "self", ".", "_ind_x_min", "=", "range_x", "[", "0", "]", "\n", "self", ".", "_ind_x_max", "=", "range_x", "[", "-", "1", "]", "\n", "self", ".", "_ind_y_min", "=", "range_y", "[", "0", "]", "\n", "self", ".", "_ind_y_max", "=", "range_y", "[", "-", "1", "]", "\n", "\n", "if", "self", ".", "_config", ".", "FOG_OF_WAR", ".", "DRAW", ":", "\n", "            ", "self", ".", "_fog_of_war_mask", "=", "np", ".", "zeros_like", "(", "top_down_map", ")", "\n", "\n", "", "return", "top_down_map", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap._draw_point": [[101, 113], ["habitat_extensions.maps.to_grid"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.to_grid"], ["", "def", "_draw_point", "(", "self", ",", "position", ",", "point_type", ")", ":", "\n", "        ", "t_x", ",", "t_y", "=", "maps", ".", "to_grid", "(", "\n", "position", "[", "0", "]", ",", "\n", "position", "[", "2", "]", ",", "\n", "self", ".", "_coordinate_min", ",", "\n", "self", ".", "_coordinate_max", ",", "\n", "self", ".", "_map_resolution", ",", "\n", ")", "\n", "self", ".", "_top_down_map", "[", "\n", "t_x", "-", "self", ".", "point_padding", ":", "t_x", "+", "self", ".", "point_padding", "+", "1", ",", "\n", "t_y", "-", "self", ".", "point_padding", ":", "t_y", "+", "self", ".", "point_padding", "+", "1", ",", "\n", "]", "=", "point_type", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap._draw_goals_view_points": [[114, 126], ["measures.TopDownMap._draw_point"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap._draw_point"], ["", "def", "_draw_goals_view_points", "(", "self", ",", "episode", ")", ":", "\n", "        ", "if", "self", ".", "_config", ".", "DRAW_VIEW_POINTS", ":", "\n", "            ", "for", "goal", "in", "episode", ".", "goals", ":", "\n", "                ", "try", ":", "\n", "                    ", "if", "goal", ".", "view_points", "is", "not", "None", ":", "\n", "                        ", "for", "view_point", "in", "goal", ".", "view_points", ":", "\n", "                            ", "self", ".", "_draw_point", "(", "\n", "view_point", ".", "agent_state", ".", "position", ",", "\n", "maps", ".", "MAP_VIEW_POINT_INDICATOR", ",", "\n", ")", "\n", "", "", "", "except", "AttributeError", ":", "\n", "                    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap._draw_goals_positions": [[127, 137], ["measures.TopDownMap._draw_point"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap._draw_point"], ["", "", "", "", "def", "_draw_goals_positions", "(", "self", ",", "episode", ")", ":", "\n", "        ", "if", "self", ".", "_config", ".", "DRAW_GOAL_POSITIONS", ":", "\n", "\n", "            ", "for", "goal", "in", "episode", ".", "goals", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "_draw_point", "(", "\n", "goal", ".", "position", ",", "maps", ".", "MAP_TARGET_POINT_INDICATOR", "\n", ")", "\n", "", "except", "AttributeError", ":", "\n", "                    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap._draw_goals_aabb": [[138, 185], ["measures.TopDownMap._sim.semantic_annotations", "habitat_extensions.maps.draw_path", "int", "int", "habitat_extensions.maps.to_grid", "numpy.array", "measures.TopDownMap.objects[].id.split"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.draw_path", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.to_grid"], ["", "", "", "", "def", "_draw_goals_aabb", "(", "self", ",", "episode", ")", ":", "\n", "        ", "if", "self", ".", "_config", ".", "DRAW_GOAL_AABBS", ":", "\n", "            ", "for", "goal", "in", "episode", ".", "goals", ":", "\n", "                ", "try", ":", "\n", "                    ", "sem_scene", "=", "self", ".", "_sim", ".", "semantic_annotations", "(", ")", "\n", "object_id", "=", "goal", ".", "object_id", "\n", "assert", "int", "(", "\n", "sem_scene", ".", "objects", "[", "object_id", "]", ".", "id", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "\n", ")", "==", "int", "(", "\n", "goal", ".", "object_id", "\n", ")", ",", "f\"Object_id doesn't correspond to id in semantic scene objects dictionary for episode: {episode}\"", "\n", "\n", "center", "=", "sem_scene", ".", "objects", "[", "object_id", "]", ".", "aabb", ".", "center", "\n", "x_len", ",", "_", ",", "z_len", "=", "(", "\n", "sem_scene", ".", "objects", "[", "object_id", "]", ".", "aabb", ".", "sizes", "/", "2.0", "\n", ")", "\n", "# Nodes to draw rectangle", "\n", "corners", "=", "[", "\n", "center", "+", "np", ".", "array", "(", "[", "x", ",", "0", ",", "z", "]", ")", "\n", "for", "x", ",", "z", "in", "[", "\n", "(", "-", "x_len", ",", "-", "z_len", ")", ",", "\n", "(", "-", "x_len", ",", "z_len", ")", ",", "\n", "(", "x_len", ",", "z_len", ")", ",", "\n", "(", "x_len", ",", "-", "z_len", ")", ",", "\n", "(", "-", "x_len", ",", "-", "z_len", ")", ",", "\n", "]", "\n", "]", "\n", "\n", "map_corners", "=", "[", "\n", "maps", ".", "to_grid", "(", "\n", "p", "[", "0", "]", ",", "\n", "p", "[", "2", "]", ",", "\n", "self", ".", "_coordinate_min", ",", "\n", "self", ".", "_coordinate_max", ",", "\n", "self", ".", "_map_resolution", ",", "\n", ")", "\n", "for", "p", "in", "corners", "\n", "]", "\n", "\n", "maps", ".", "draw_path", "(", "\n", "self", ".", "_top_down_map", ",", "\n", "map_corners", ",", "\n", "maps", ".", "MAP_TARGET_BOUNDING_BOX", ",", "\n", "self", ".", "line_thickness", ",", "\n", ")", "\n", "", "except", "AttributeError", ":", "\n", "                    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap._draw_shortest_path": [[186, 208], ["measures.TopDownMap._sim.get_straight_shortest_path_points", "habitat_extensions.maps.draw_path", "habitat_extensions.maps.to_grid"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.draw_path", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.to_grid"], ["", "", "", "", "def", "_draw_shortest_path", "(", "\n", "self", ",", "episode", ":", "Episode", ",", "agent_position", ":", "AgentState", "\n", ")", ":", "\n", "        ", "if", "self", ".", "_config", ".", "DRAW_SHORTEST_PATH", ":", "\n", "            ", "self", ".", "_shortest_path_points", "=", "self", ".", "_sim", ".", "get_straight_shortest_path_points", "(", "\n", "agent_position", ",", "episode", ".", "goals", "[", "0", "]", ".", "position", "\n", ")", "\n", "self", ".", "_shortest_path_points", "=", "[", "\n", "maps", ".", "to_grid", "(", "\n", "p", "[", "0", "]", ",", "\n", "p", "[", "2", "]", ",", "\n", "self", ".", "_coordinate_min", ",", "\n", "self", ".", "_coordinate_max", ",", "\n", "self", ".", "_map_resolution", ",", "\n", ")", "\n", "for", "p", "in", "self", ".", "_shortest_path_points", "\n", "]", "\n", "maps", ".", "draw_path", "(", "\n", "self", ".", "_top_down_map", ",", "\n", "self", ".", "_shortest_path_points", ",", "\n", "maps", ".", "MAP_SHORTEST_PATH_COLOR", ",", "\n", "self", ".", "line_thickness", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap.reset_metric": [[210, 236], ["measures.TopDownMap.get_original_map", "habitat_extensions.maps.to_grid", "measures.TopDownMap.update_fog_of_war_mask", "measures.TopDownMap._draw_goals_view_points", "measures.TopDownMap._draw_goals_aabb", "measures.TopDownMap._draw_goals_positions", "measures.TopDownMap._draw_shortest_path", "measures.TopDownMap._sim.get_agent_state", "numpy.array", "measures.TopDownMap._draw_point"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMapAnticipated.get_original_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.to_grid", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap.update_fog_of_war_mask", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap._draw_goals_view_points", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap._draw_goals_aabb", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap._draw_goals_positions", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap._draw_shortest_path", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap._draw_point"], ["", "", "def", "reset_metric", "(", "self", ",", "episode", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_step_count", "=", "0", "\n", "self", ".", "_metric", "=", "None", "\n", "self", ".", "_top_down_map", "=", "self", ".", "get_original_map", "(", ")", "\n", "agent_position", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", ".", "position", "\n", "a_x", ",", "a_y", "=", "maps", ".", "to_grid", "(", "\n", "agent_position", "[", "0", "]", ",", "\n", "agent_position", "[", "2", "]", ",", "\n", "self", ".", "_coordinate_min", ",", "\n", "self", ".", "_coordinate_max", ",", "\n", "self", ".", "_map_resolution", ",", "\n", ")", "\n", "self", ".", "_previous_xy_location", "=", "(", "a_y", ",", "a_x", ")", "\n", "\n", "self", ".", "update_fog_of_war_mask", "(", "np", ".", "array", "(", "[", "a_x", ",", "a_y", "]", ")", ")", "\n", "\n", "# draw source and target parts last to avoid overlap", "\n", "self", ".", "_draw_goals_view_points", "(", "episode", ")", "\n", "self", ".", "_draw_goals_aabb", "(", "episode", ")", "\n", "self", ".", "_draw_goals_positions", "(", "episode", ")", "\n", "\n", "self", ".", "_draw_shortest_path", "(", "episode", ",", "agent_position", ")", "\n", "\n", "if", "self", ".", "_config", ".", "DRAW_SOURCE", ":", "\n", "            ", "self", ".", "_draw_point", "(", "\n", "episode", ".", "start_position", ",", "maps", ".", "MAP_SOURCE_POINT_INDICATOR", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap._clip_map": [[238, 246], ["None"], "methods", ["None"], ["", "", "def", "_clip_map", "(", "self", ",", "_map", ")", ":", "\n", "        ", "return", "_map", "[", "\n", "self", ".", "_ind_x_min", "\n", "-", "self", ".", "_grid_delta", ":", "self", ".", "_ind_x_max", "\n", "+", "self", ".", "_grid_delta", ",", "\n", "self", ".", "_ind_y_min", "\n", "-", "self", ".", "_grid_delta", ":", "self", ".", "_ind_y_max", "\n", "+", "self", ".", "_grid_delta", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap.update_metric": [[248, 270], ["measures.TopDownMap.update_map", "measures.TopDownMap._clip_map", "measures.TopDownMap._clip_map", "measures.TopDownMap.get_polar_angle", "measures.TopDownMap._sim.get_agent_state"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap.update_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap._clip_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap._clip_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap.get_polar_angle", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state"], ["", "def", "update_metric", "(", "self", ",", "episode", ",", "action", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_step_count", "+=", "1", "\n", "house_map", ",", "map_agent_x", ",", "map_agent_y", "=", "self", ".", "update_map", "(", "\n", "self", ".", "_sim", ".", "get_agent_state", "(", ")", ".", "position", "\n", ")", "\n", "\n", "# Rather than return the whole map which may have large empty regions,", "\n", "# only return the occupied part (plus some padding).", "\n", "clipped_house_map", "=", "self", ".", "_clip_map", "(", "house_map", ")", "\n", "\n", "clipped_fog_of_war_map", "=", "None", "\n", "if", "self", ".", "_config", ".", "FOG_OF_WAR", ".", "DRAW", ":", "\n", "            ", "clipped_fog_of_war_map", "=", "self", ".", "_clip_map", "(", "self", ".", "_fog_of_war_mask", ")", "\n", "\n", "", "self", ".", "_metric", "=", "{", "\n", "\"map\"", ":", "clipped_house_map", ",", "\n", "\"fog_of_war_mask\"", ":", "clipped_fog_of_war_map", ",", "\n", "\"agent_map_coord\"", ":", "(", "\n", "map_agent_x", "-", "(", "self", ".", "_ind_x_min", "-", "self", ".", "_grid_delta", ")", ",", "\n", "map_agent_y", "-", "(", "self", ".", "_ind_y_min", "-", "self", ".", "_grid_delta", ")", ",", "\n", ")", ",", "\n", "\"agent_angle\"", ":", "self", ".", "get_polar_angle", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap.get_polar_angle": [[272, 284], ["measures.TopDownMap._sim.get_agent_state", "habitat_extensions.geometry_utils.quaternion_rotate_vector", "ref_rotation.inverse", "numpy.array", "habitat.tasks.utils.cartesian_to_polar", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_rotate_vector"], ["", "def", "get_polar_angle", "(", "self", ")", ":", "\n", "        ", "agent_state", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", "\n", "# quaternion is in x, y, z, w format", "\n", "ref_rotation", "=", "agent_state", ".", "rotation", "\n", "\n", "heading_vector", "=", "quaternion_rotate_vector", "(", "\n", "ref_rotation", ".", "inverse", "(", ")", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "1", "]", ")", "\n", ")", "\n", "\n", "phi", "=", "cartesian_to_polar", "(", "-", "heading_vector", "[", "2", "]", ",", "heading_vector", "[", "0", "]", ")", "[", "1", "]", "\n", "x_y_flip", "=", "-", "np", ".", "pi", "/", "2", "\n", "return", "np", ".", "array", "(", "phi", ")", "+", "x_y_flip", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap.update_map": [[285, 314], ["habitat_extensions.maps.to_grid", "measures.TopDownMap.update_fog_of_war_mask", "int", "cv2.line", "numpy.array", "min", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.to_grid", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap.update_fog_of_war_mask"], ["", "def", "update_map", "(", "self", ",", "agent_position", ")", ":", "\n", "        ", "a_x", ",", "a_y", "=", "maps", ".", "to_grid", "(", "\n", "agent_position", "[", "0", "]", ",", "\n", "agent_position", "[", "2", "]", ",", "\n", "self", ".", "_coordinate_min", ",", "\n", "self", ".", "_coordinate_max", ",", "\n", "self", ".", "_map_resolution", ",", "\n", ")", "\n", "# Don't draw over the source point", "\n", "if", "self", ".", "_top_down_map", "[", "a_x", ",", "a_y", "]", "!=", "maps", ".", "MAP_SOURCE_POINT_INDICATOR", ":", "\n", "            ", "color", "=", "10", "+", "min", "(", "\n", "self", ".", "_step_count", "*", "245", "//", "self", ".", "_config", ".", "MAX_EPISODE_STEPS", ",", "245", "\n", ")", "\n", "\n", "thickness", "=", "int", "(", "\n", "np", ".", "round", "(", "self", ".", "_map_resolution", "[", "0", "]", "*", "2", "/", "MAP_THICKNESS_SCALAR", ")", "\n", ")", "\n", "cv2", ".", "line", "(", "\n", "self", ".", "_top_down_map", ",", "\n", "self", ".", "_previous_xy_location", ",", "\n", "(", "a_y", ",", "a_x", ")", ",", "\n", "color", ",", "\n", "thickness", "=", "thickness", ",", "\n", ")", "\n", "\n", "", "self", ".", "update_fog_of_war_mask", "(", "np", ".", "array", "(", "[", "a_x", ",", "a_y", "]", ")", ")", "\n", "\n", "self", ".", "_previous_xy_location", "=", "(", "a_y", ",", "a_x", ")", "\n", "return", "self", ".", "_top_down_map", ",", "a_x", ",", "a_y", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap.update_fog_of_war_mask": [[315, 326], ["habitat.utils.visualizations.fog_of_war.reveal_fog_of_war", "measures.TopDownMap.get_polar_angle", "max"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap.get_polar_angle"], ["", "def", "update_fog_of_war_mask", "(", "self", ",", "agent_position", ")", ":", "\n", "        ", "if", "self", ".", "_config", ".", "FOG_OF_WAR", ".", "DRAW", ":", "\n", "            ", "self", ".", "_fog_of_war_mask", "=", "fog_of_war", ".", "reveal_fog_of_war", "(", "\n", "self", ".", "_top_down_map", ",", "\n", "self", ".", "_fog_of_war_mask", ",", "\n", "agent_position", ",", "\n", "self", ".", "get_polar_angle", "(", ")", ",", "\n", "fov", "=", "self", ".", "_config", ".", "FOG_OF_WAR", ".", "FOV", ",", "\n", "max_line_len", "=", "self", ".", "_config", ".", "FOG_OF_WAR", ".", "VISIBILITY_DIST", "\n", "*", "max", "(", "self", ".", "_map_resolution", ")", "\n", "/", "(", "self", ".", "_coordinate_max", "-", "self", ".", "_coordinate_min", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMapExp._get_uuid": [[334, 336], ["None"], "methods", ["None"], ["def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "\"top_down_map_exp\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMapExp.reset_metric": [[337, 356], ["measures.TopDownMapExp.get_original_map", "habitat_extensions.maps.to_grid", "measures.TopDownMapExp.update_fog_of_war_mask", "measures.TopDownMapExp._sim.get_agent_state", "numpy.array", "measures.TopDownMapExp._draw_point"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMapAnticipated.get_original_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.to_grid", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap.update_fog_of_war_mask", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.TopDownMap._draw_point"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ":", "Any", ",", "episode", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_step_count", "=", "0", "\n", "self", ".", "_metric", "=", "None", "\n", "self", ".", "_top_down_map", "=", "self", ".", "get_original_map", "(", ")", "\n", "agent_position", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", ".", "position", "\n", "a_x", ",", "a_y", "=", "maps", ".", "to_grid", "(", "\n", "agent_position", "[", "0", "]", ",", "\n", "agent_position", "[", "2", "]", ",", "\n", "self", ".", "_coordinate_min", ",", "\n", "self", ".", "_coordinate_max", ",", "\n", "self", ".", "_map_resolution", ",", "\n", ")", "\n", "self", ".", "_previous_xy_location", "=", "(", "a_y", ",", "a_x", ")", "\n", "\n", "self", ".", "update_fog_of_war_mask", "(", "np", ".", "array", "(", "[", "a_x", ",", "a_y", "]", ")", ")", "\n", "\n", "# draw source last to avoid overlap", "\n", "if", "self", ".", "_config", ".", "DRAW_SOURCE", ":", "\n", "            ", "self", ".", "_draw_point", "(", "episode", ".", "start_position", ",", "maps", ".", "MAP_SOURCE_POINT_INDICATOR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.GTGlobalMap.__init__": [[366, 381], ["habitat.core.embodied_task.Measure.__init__", "int", "int"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ":", "Any", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "self", ".", "current_episode", "=", "None", "\n", "self", ".", "current_episode_time", "=", "0", "\n", "# Map statistics", "\n", "self", ".", "map_size", "=", "config", ".", "MAP_SIZE", "\n", "self", ".", "map_scale", "=", "config", ".", "MAP_SCALE", "\n", "self", ".", "_num_samples", "=", "config", ".", "NUM_TOPDOWN_MAP_SAMPLE_POINTS", "\n", "self", ".", "_coordinate_min", "=", "maps", ".", "COORDINATE_MIN", "\n", "self", ".", "_coordinate_max", "=", "maps", ".", "COORDINATE_MAX", "\n", "resolution", "=", "(", "self", ".", "_coordinate_max", "-", "self", ".", "_coordinate_min", ")", "/", "self", ".", "map_scale", "\n", "self", ".", "_map_resolution", "=", "(", "int", "(", "resolution", ")", ",", "int", "(", "resolution", ")", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.GTGlobalMap.get_original_map": [[382, 387], ["habitat_extensions.maps.get_topdown_map"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.get_topdown_map"], ["", "def", "get_original_map", "(", "self", ")", ":", "\n", "        ", "top_down_map", "=", "maps", ".", "get_topdown_map", "(", "\n", "self", ".", "_sim", ",", "self", ".", "_map_resolution", ",", "self", ".", "_num_samples", ",", "False", ",", "\n", ")", "\n", "return", "top_down_map", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.GTGlobalMap._get_mesh_occupancy": [[388, 465], ["habitat_extensions.geometry_utils.quaternion_xyzw_to_wxyz", "habitat_extensions.maps.to_grid", "int", "numpy.pad", "math.degrees", "cv2.getRotationMatrix2D", "cv2.warpAffine", "numpy.zeros.astype", "int", "int", "numpy.flip", "numpy.stack", "int", "int", "int", "int", "numpy.zeros", "habitat_extensions.geometry_utils.compute_heading_from_quaternion", "numpy.ones_like"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_xyzw_to_wxyz", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.to_grid", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.compute_heading_from_quaternion"], ["", "def", "_get_mesh_occupancy", "(", "self", ")", ":", "\n", "        ", "agent_position", "=", "self", ".", "current_episode", ".", "start_position", "\n", "agent_rotation", "=", "quaternion_xyzw_to_wxyz", "(", "self", ".", "current_episode", ".", "start_rotation", ")", "\n", "a_x", ",", "a_y", "=", "maps", ".", "to_grid", "(", "\n", "agent_position", "[", "0", "]", ",", "\n", "agent_position", "[", "2", "]", ",", "\n", "self", ".", "_coordinate_min", ",", "\n", "self", ".", "_coordinate_max", ",", "\n", "self", ".", "_map_resolution", ",", "\n", ")", "\n", "\n", "# The map size here represents size around the agent, not infront.", "\n", "mrange", "=", "int", "(", "self", ".", "map_size", "*", "1.5", "/", "2.0", ")", "\n", "\n", "# Add extra padding if map range is coordinates go out of bounds", "\n", "y_start", "=", "a_y", "-", "mrange", "\n", "y_end", "=", "a_y", "+", "mrange", "\n", "x_start", "=", "a_x", "-", "mrange", "\n", "x_end", "=", "a_x", "+", "mrange", "\n", "\n", "x_l_pad", ",", "y_l_pad", ",", "x_r_pad", ",", "y_r_pad", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "H", ",", "W", "=", "self", ".", "_top_down_map", ".", "shape", "\n", "if", "x_start", "<", "0", ":", "\n", "            ", "x_l_pad", "=", "int", "(", "-", "x_start", ")", "\n", "x_start", "+=", "x_l_pad", "\n", "x_end", "+=", "x_l_pad", "\n", "", "if", "x_end", ">=", "W", ":", "\n", "            ", "x_r_pad", "=", "int", "(", "x_end", "-", "W", "+", "1", ")", "\n", "", "if", "y_start", "<", "0", ":", "\n", "            ", "y_l_pad", "=", "int", "(", "-", "y_start", ")", "\n", "y_start", "+=", "y_l_pad", "\n", "y_end", "+=", "y_l_pad", "\n", "", "if", "y_end", ">=", "H", ":", "\n", "            ", "y_r_pad", "=", "int", "(", "y_end", "-", "H", "+", "1", ")", "\n", "\n", "", "ego_map", "=", "np", ".", "pad", "(", "self", ".", "_top_down_map", ",", "(", "(", "y_l_pad", ",", "y_r_pad", ")", ",", "(", "x_l_pad", ",", "x_r_pad", ")", ")", ")", "\n", "ego_map", "=", "ego_map", "[", "y_start", ":", "(", "y_end", "+", "1", ")", ",", "x_start", ":", "(", "x_end", "+", "1", ")", "]", "\n", "\n", "if", "ego_map", ".", "shape", "[", "0", "]", "==", "0", "or", "ego_map", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "            ", "ego_map", "=", "np", ".", "zeros", "(", "(", "2", "*", "mrange", "+", "1", ",", "2", "*", "mrange", "+", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# Rotate to get egocentric map", "\n", "# Negative since the value returned is clockwise rotation about Y,", "\n", "# but we need anti-clockwise rotation", "\n", "", "agent_heading", "=", "-", "compute_heading_from_quaternion", "(", "agent_rotation", ")", "\n", "agent_heading", "=", "math", ".", "degrees", "(", "agent_heading", ")", "\n", "\n", "half_size", "=", "ego_map", ".", "shape", "[", "0", "]", "//", "2", "\n", "center", "=", "(", "half_size", ",", "half_size", ")", "\n", "M", "=", "cv2", ".", "getRotationMatrix2D", "(", "center", ",", "agent_heading", ",", "scale", "=", "1.0", ")", "\n", "\n", "ego_map", "=", "cv2", ".", "warpAffine", "(", "\n", "ego_map", ",", "\n", "M", ",", "\n", "(", "ego_map", ".", "shape", "[", "1", "]", ",", "ego_map", ".", "shape", "[", "0", "]", ")", ",", "\n", "flags", "=", "cv2", ".", "INTER_NEAREST", ",", "\n", "borderMode", "=", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "borderValue", "=", "(", "1", ",", ")", ",", "\n", ")", "\n", "\n", "ego_map", "=", "ego_map", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mrange", "=", "int", "(", "self", ".", "map_size", "/", "2.0", ")", "\n", "start_coor", "=", "half_size", "-", "mrange", "\n", "end_coor", "=", "int", "(", "start_coor", "+", "self", ".", "map_size", "-", "1", ")", "\n", "ego_map", "=", "ego_map", "[", "start_coor", ":", "(", "end_coor", "+", "1", ")", ",", "start_coor", ":", "(", "end_coor", "+", "1", ")", "]", "\n", "\n", "# This map is currently 0 if occupied and 1 if unoccupied. Flip it.", "\n", "ego_map", "=", "1.0", "-", "ego_map", "\n", "\n", "# Flip the x axis because to_grid() flips the conventions", "\n", "ego_map", "=", "np", ".", "flip", "(", "ego_map", ",", "axis", "=", "1", ")", "\n", "\n", "# Append explored status in the 2nd channel", "\n", "ego_map", "=", "np", ".", "stack", "(", "[", "ego_map", ",", "np", ".", "ones_like", "(", "ego_map", ")", "]", ",", "axis", "=", "2", ")", "\n", "\n", "return", "ego_map", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.GTGlobalMap._process_gt": [[466, 499], ["numpy.round().astype", "cv2.floodFill", "cv2.floodFill", "cv2.floodFill", "cv2.floodFill", "numpy.ones", "explored_mask.astype", "cv2.dilate", "numpy.round"], "methods", ["None"], ["", "def", "_process_gt", "(", "self", ",", "ego_map", ")", ":", "\n", "        ", "\"\"\"\n        Remove unnecessary occupied space for out-of-bound regions in the ego_map.\n\n        ego_map - (H, W, 2) with ones and zeros in channel 0 and only ones in channel 1\n        \"\"\"", "\n", "occ_map", "=", "np", ".", "round", "(", "ego_map", "[", "...", ",", "0", "]", "*", "255.0", ")", ".", "astype", "(", "\n", "np", ".", "uint8", "\n", ")", "# 255 for occupied, 0 for free", "\n", "# Flood fill from all four corners of the map", "\n", "H", ",", "W", "=", "occ_map", ".", "shape", "\n", "cv2", ".", "floodFill", "(", "occ_map", ",", "None", ",", "(", "0", ",", "0", ")", ",", "125", ")", "\n", "cv2", ".", "floodFill", "(", "occ_map", ",", "None", ",", "(", "0", ",", "H", "-", "1", ")", ",", "125", ")", "\n", "cv2", ".", "floodFill", "(", "occ_map", ",", "None", ",", "(", "W", "-", "1", ",", "0", ")", ",", "125", ")", "\n", "cv2", ".", "floodFill", "(", "occ_map", ",", "None", ",", "(", "W", "-", "1", ",", "H", "-", "1", ")", ",", "125", ")", "\n", "# Occupied regions within the environment", "\n", "int_occ_mask", "=", "occ_map", "==", "255", "\n", "# Expand occupied regions around free space", "\n", "free_map", "=", "1", "-", "ego_map", "[", "...", ",", "0", "]", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "5", ",", "5", ")", ",", "np", ".", "float32", ")", "\n", "exp_free_mask", "=", "cv2", ".", "dilate", "(", "free_map", ",", "kernel", ",", "iterations", "=", "2", ")", ">", "0", "\n", "explored_mask", "=", "exp_free_mask", "|", "int_occ_mask", "\n", "\"\"\"\n        NOTE: The above still leaves out objects that are along the edges of\n        the walls. Only their edges with free-space will be covered.\n        Add all occupied regions that were seen by an oracle agent covering\n        the entire environment to fill these in.\n        \"\"\"", "\n", "if", "self", ".", "_seen_area_map", "is", "not", "None", ":", "\n", "            ", "explored_mask", "=", "explored_mask", "|", "(", "self", ".", "_seen_area_map", "[", "...", ",", "1", "]", ">", "0.5", ")", "\n", "", "ego_map", "[", "...", ",", "1", "]", "=", "explored_mask", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "return", "ego_map", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.GTGlobalMap._get_uuid": [[500, 502], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "\"gt_global_map\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.GTGlobalMap.reset_metric": [[503, 516], ["measures.GTGlobalMap._get_mesh_occupancy", "measures.GTGlobalMap._process_gt", "numpy.load", "measures.GTGlobalMap.get_original_map"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMapAnticipated._get_mesh_occupancy", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.GTGlobalMap._process_gt", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMapAnticipated.get_original_map"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ":", "Any", ",", "episode", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "current_episode", "=", "episode", "\n", "self", ".", "current_episode_time", "=", "0", "\n", "if", "self", ".", "_config", ".", "ENVIRONMENT_LAYOUTS_PATH", "!=", "\"\"", ":", "\n", "            ", "path", "=", "f\"{self._config.ENVIRONMENT_LAYOUTS_PATH}/episode_id_{episode.episode_id}.npy\"", "\n", "self", ".", "_seen_area_map", "=", "np", ".", "load", "(", "path", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_seen_area_map", "=", "None", "\n", "\n", "", "self", ".", "_top_down_map", "=", "self", ".", "get_original_map", "(", ")", ".", "T", "\n", "self", ".", "_metric", "=", "self", ".", "_get_mesh_occupancy", "(", ")", "\n", "# Process the map to remove unnecessary occupied regions", "\n", "self", ".", "_metric", "=", "self", ".", "_process_gt", "(", "self", ".", "_metric", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.GTGlobalMap.update_metric": [[517, 523], ["None"], "methods", ["None"], ["", "def", "update_metric", "(", "\n", "self", ",", "*", "args", ":", "Any", ",", "episode", ",", "action", ",", "task", ":", "EmbodiedTask", ",", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "self", ".", "current_episode_time", "+=", "1", "\n", "if", "self", ".", "current_episode_time", ">", "1", ":", "\n", "            ", "self", ".", "_metric", "=", "None", "# Return only at t=1 to save data transfer costs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.PathLength.__init__": [[530, 538], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ":", "Any", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_previous_position", "=", "None", "\n", "self", ".", "_agent_episode_distance", "=", "None", "\n", "self", ".", "_episode_view_points", "=", "None", "\n", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.PathLength._get_uuid": [[539, 541], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "\"path_length\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.PathLength.reset_metric": [[542, 546], ["measures.PathLength._sim.get_agent_state().position.tolist", "measures.PathLength.update_metric", "measures.PathLength._sim.get_agent_state"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.PathLength.update_metric", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ":", "Any", ",", "episode", ",", "task", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_previous_position", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", ".", "position", ".", "tolist", "(", ")", "\n", "self", ".", "_agent_episode_distance", "=", "0.0", "\n", "self", ".", "update_metric", "(", "*", "args", ",", "episode", "=", "episode", ",", "task", "=", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.PathLength._euclidean_distance": [[547, 549], ["numpy.linalg.norm", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "_euclidean_distance", "(", "self", ",", "position_a", ",", "position_b", ")", ":", "\n", "        ", "return", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "position_b", ")", "-", "np", ".", "array", "(", "position_a", ")", ",", "ord", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.PathLength.update_metric": [[550, 560], ["measures.PathLength._sim.get_agent_state().position.tolist", "measures.PathLength._euclidean_distance", "measures.PathLength._sim.get_agent_state"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.measures.PathLength._euclidean_distance", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ":", "Any", ",", "episode", ",", "task", ":", "EmbodiedTask", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "current_position", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", ".", "position", ".", "tolist", "(", ")", "\n", "\n", "self", ".", "_agent_episode_distance", "+=", "self", ".", "_euclidean_distance", "(", "\n", "current_position", ",", "self", ".", "_previous_position", "\n", ")", "\n", "\n", "self", ".", "_previous_position", "=", "current_position", "\n", "\n", "self", ".", "_metric", "=", "self", ".", "_agent_episode_distance", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.draw_agent": [[63, 97], ["scipy.ndimage.interpolation.rotate", "max", "cv2.resize", "habitat.utils.visualizations.utils.paste_overlapping_image", "int"], "function", ["None"], ["def", "draw_agent", "(", "\n", "image", ":", "np", ".", "ndarray", ",", "\n", "agent_center_coord", ":", "Tuple", "[", "int", ",", "int", "]", ",", "\n", "agent_rotation", ":", "float", ",", "\n", "agent_radius_px", ":", "int", "=", "5", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Return an image with the agent image composited onto it.\n    Args:\n        image: the image onto which to put the agent.\n        agent_center_coord: the image coordinates where to paste the agent.\n        agent_rotation: the agent's current rotation in radians.\n        agent_radius_px: 1/2 number of pixels the agent will be resized to.\n    Returns:\n        The modified background image. This operation is in place.\n    \"\"\"", "\n", "\n", "# Rotate before resize to keep good resolution.", "\n", "rotated_agent", "=", "scipy", ".", "ndimage", ".", "interpolation", ".", "rotate", "(", "\n", "AGENT_SPRITE", ",", "agent_rotation", "*", "180", "/", "np", ".", "pi", "\n", ")", "\n", "# Rescale because rotation may result in larger image than original, but", "\n", "# the agent sprite size should stay the same.", "\n", "initial_agent_size", "=", "AGENT_SPRITE", ".", "shape", "[", "0", "]", "\n", "new_size", "=", "rotated_agent", ".", "shape", "[", "0", "]", "\n", "agent_size_px", "=", "max", "(", "\n", "1", ",", "int", "(", "agent_radius_px", "*", "2", "*", "new_size", "/", "initial_agent_size", ")", "\n", ")", "\n", "resized_agent", "=", "cv2", ".", "resize", "(", "\n", "rotated_agent", ",", "\n", "(", "agent_size_px", ",", "agent_size_px", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ",", "\n", ")", "\n", "utils", ".", "paste_overlapping_image", "(", "image", ",", "resized_agent", ",", "agent_center_coord", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.pointnav_draw_target_birdseye_view": [[99, 192], ["numpy.linalg.norm", "max", "numpy.full", "zip", "cv2.circle", "numpy.round().astype", "maps.draw_agent", "numpy.rot90", "len", "len", "max", "numpy.ceil", "cv2.circle", "int", "numpy.round", "max", "numpy.log", "numpy.log", "int", "max"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.draw_agent"], ["", "def", "pointnav_draw_target_birdseye_view", "(", "\n", "agent_position", ":", "np", ".", "ndarray", ",", "\n", "agent_heading", ":", "float", ",", "\n", "goal_position", ":", "np", ".", "ndarray", ",", "\n", "resolution_px", ":", "int", "=", "800", ",", "\n", "goal_radius", ":", "float", "=", "0.2", ",", "\n", "agent_radius_px", ":", "int", "=", "20", ",", "\n", "target_band_radii", ":", "Optional", "[", "List", "[", "float", "]", "]", "=", "None", ",", "\n", "target_band_colors", ":", "Optional", "[", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", "]", "=", "None", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Return an image of agent w.r.t. centered target location for pointnav\n    tasks.\n\n    Args:\n        agent_position: the agent's current position.\n        agent_heading: the agent's current rotation in radians. This can be\n            found using the HeadingSensor.\n        goal_position: the pointnav task goal position.\n        resolution_px: number of pixels for the output image width and height.\n        goal_radius: how near the agent needs to be to be successful for the\n            pointnav task.\n        agent_radius_px: 1/2 number of pixels the agent will be resized to.\n        target_band_radii: distance in meters to the outer-radius of each band\n            in the target image.\n        target_band_colors: colors in RGB 0-255 for the bands in the target.\n    Returns:\n        Image centered on the goal with the agent's current relative position\n        and rotation represented by an arrow. To make the rotations align\n        visually with habitat, positive-z is up, positive-x is left and a\n        rotation of 0 points upwards in the output image and rotates clockwise.\n    \"\"\"", "\n", "if", "target_band_radii", "is", "None", ":", "\n", "        ", "target_band_radii", "=", "[", "20", ",", "10", ",", "5", ",", "2.5", ",", "1", "]", "\n", "", "if", "target_band_colors", "is", "None", ":", "\n", "        ", "target_band_colors", "=", "[", "\n", "(", "47", ",", "19", ",", "122", ")", ",", "\n", "(", "22", ",", "99", ",", "170", ")", ",", "\n", "(", "92", ",", "177", ",", "0", ")", ",", "\n", "(", "226", ",", "169", ",", "0", ")", ",", "\n", "(", "226", ",", "12", ",", "29", ")", ",", "\n", "]", "\n", "\n", "", "assert", "len", "(", "target_band_radii", ")", "==", "len", "(", "\n", "target_band_colors", "\n", ")", ",", "\"There must be an equal number of scales and colors.\"", "\n", "\n", "goal_agent_dist", "=", "np", ".", "linalg", ".", "norm", "(", "agent_position", "-", "goal_position", ",", "2", ")", "\n", "\n", "goal_distance_padding", "=", "max", "(", "\n", "2", ",", "2", "**", "np", ".", "ceil", "(", "np", ".", "log", "(", "max", "(", "1e-6", ",", "goal_agent_dist", ")", ")", "/", "np", ".", "log", "(", "2", ")", ")", "\n", ")", "\n", "movement_scale", "=", "1.0", "/", "goal_distance_padding", "\n", "half_res", "=", "resolution_px", "//", "2", "\n", "im_position", "=", "np", ".", "full", "(", "\n", "(", "resolution_px", ",", "resolution_px", ",", "3", ")", ",", "255", ",", "dtype", "=", "np", ".", "uint8", "\n", ")", "\n", "\n", "# Draw bands:", "\n", "for", "scale", ",", "color", "in", "zip", "(", "target_band_radii", ",", "target_band_colors", ")", ":", "\n", "        ", "if", "goal_distance_padding", "*", "4", ">", "scale", ":", "\n", "            ", "cv2", ".", "circle", "(", "\n", "im_position", ",", "\n", "(", "half_res", ",", "half_res", ")", ",", "\n", "max", "(", "2", ",", "int", "(", "half_res", "*", "scale", "*", "movement_scale", ")", ")", ",", "\n", "color", ",", "\n", "thickness", "=", "-", "1", ",", "\n", ")", "\n", "\n", "# Draw such that the agent being inside the radius is the circles", "\n", "# overlapping.", "\n", "", "", "cv2", ".", "circle", "(", "\n", "im_position", ",", "\n", "(", "half_res", ",", "half_res", ")", ",", "\n", "max", "(", "2", ",", "int", "(", "half_res", "*", "goal_radius", "*", "movement_scale", ")", ")", ",", "\n", "(", "127", ",", "0", ",", "0", ")", ",", "\n", "thickness", "=", "-", "1", ",", "\n", ")", "\n", "\n", "relative_position", "=", "agent_position", "-", "goal_position", "\n", "# swap x and z, remove y for (x,y,z) -> image coordinates.", "\n", "relative_position", "=", "relative_position", "[", "[", "2", ",", "0", "]", "]", "\n", "relative_position", "*=", "half_res", "*", "movement_scale", "\n", "relative_position", "+=", "half_res", "\n", "relative_position", "=", "np", ".", "round", "(", "relative_position", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# Draw the agent", "\n", "draw_agent", "(", "im_position", ",", "relative_position", ",", "agent_heading", ",", "agent_radius_px", ")", "\n", "\n", "# Rotate twice to fix coordinate system to upwards being positive-z.", "\n", "# Rotate instead of flip to keep agent rotations in sync with egocentric", "\n", "# view.", "\n", "im_position", "=", "np", ".", "rot90", "(", "im_position", ",", "2", ")", "\n", "return", "im_position", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.to_grid": [[194, 213], ["int", "int"], "function", ["None"], ["", "def", "to_grid", "(", "\n", "realworld_x", ":", "float", ",", "\n", "realworld_y", ":", "float", ",", "\n", "coordinate_min", ":", "float", ",", "\n", "coordinate_max", ":", "float", ",", "\n", "grid_resolution", ":", "Tuple", "[", "int", ",", "int", "]", ",", "\n", ")", "->", "Tuple", "[", "int", ",", "int", "]", ":", "\n", "    ", "r\"\"\"Return gridworld index of realworld coordinates assuming top-left corner\n    is the origin. The real world coordinates of lower left corner are\n    (coordinate_min, coordinate_min) and of top right corner are\n    (coordinate_max, coordinate_max)\n    \"\"\"", "\n", "grid_size", "=", "(", "\n", "(", "coordinate_max", "-", "coordinate_min", ")", "/", "grid_resolution", "[", "0", "]", ",", "\n", "(", "coordinate_max", "-", "coordinate_min", ")", "/", "grid_resolution", "[", "1", "]", ",", "\n", ")", "\n", "grid_x", "=", "int", "(", "(", "coordinate_max", "-", "realworld_x", ")", "/", "grid_size", "[", "0", "]", ")", "\n", "grid_y", "=", "int", "(", "(", "realworld_y", "-", "coordinate_min", ")", "/", "grid_size", "[", "1", "]", ")", "\n", "return", "grid_x", ",", "grid_y", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.from_grid": [[215, 234], ["None"], "function", ["None"], ["", "def", "from_grid", "(", "\n", "grid_x", ":", "int", ",", "\n", "grid_y", ":", "int", ",", "\n", "coordinate_min", ":", "float", ",", "\n", "coordinate_max", ":", "float", ",", "\n", "grid_resolution", ":", "Tuple", "[", "int", ",", "int", "]", ",", "\n", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "    ", "r\"\"\"Inverse of _to_grid function. Return real world coordinate from\n    gridworld assuming top-left corner is the origin. The real world\n    coordinates of lower left corner are (coordinate_min, coordinate_min) and\n    of top right corner are (coordinate_max, coordinate_max)\n    \"\"\"", "\n", "grid_size", "=", "(", "\n", "(", "coordinate_max", "-", "coordinate_min", ")", "/", "grid_resolution", "[", "0", "]", ",", "\n", "(", "coordinate_max", "-", "coordinate_min", ")", "/", "grid_resolution", "[", "1", "]", ",", "\n", ")", "\n", "realworld_x", "=", "coordinate_max", "-", "grid_x", "*", "grid_size", "[", "0", "]", "\n", "realworld_y", "=", "coordinate_min", "+", "grid_y", "*", "grid_size", "[", "1", "]", "\n", "return", "realworld_x", ",", "realworld_y", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps._outline_border": [[236, 256], ["None"], "function", ["None"], ["", "def", "_outline_border", "(", "top_down_map", ")", ":", "\n", "    ", "left_right_block_nav", "=", "(", "top_down_map", "[", ":", ",", ":", "-", "1", "]", "==", "1", ")", "&", "(", "\n", "top_down_map", "[", ":", ",", ":", "-", "1", "]", "!=", "top_down_map", "[", ":", ",", "1", ":", "]", "\n", ")", "\n", "left_right_nav_block", "=", "(", "top_down_map", "[", ":", ",", "1", ":", "]", "==", "1", ")", "&", "(", "\n", "top_down_map", "[", ":", ",", ":", "-", "1", "]", "!=", "top_down_map", "[", ":", ",", "1", ":", "]", "\n", ")", "\n", "\n", "up_down_block_nav", "=", "(", "top_down_map", "[", ":", "-", "1", "]", "==", "1", ")", "&", "(", "\n", "top_down_map", "[", ":", "-", "1", "]", "!=", "top_down_map", "[", "1", ":", "]", "\n", ")", "\n", "up_down_nav_block", "=", "(", "top_down_map", "[", "1", ":", "]", "==", "1", ")", "&", "(", "\n", "top_down_map", "[", ":", "-", "1", "]", "!=", "top_down_map", "[", "1", ":", "]", "\n", ")", "\n", "\n", "top_down_map", "[", ":", ",", ":", "-", "1", "]", "[", "left_right_block_nav", "]", "=", "MAP_BORDER_INDICATOR", "\n", "top_down_map", "[", ":", ",", "1", ":", "]", "[", "left_right_nav_block", "]", "=", "MAP_BORDER_INDICATOR", "\n", "\n", "top_down_map", "[", ":", "-", "1", "]", "[", "up_down_block_nav", "]", "=", "MAP_BORDER_INDICATOR", "\n", "top_down_map", "[", "1", ":", "]", "[", "up_down_nav_block", "]", "=", "MAP_BORDER_INDICATOR", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.get_topdown_map": [[258, 342], ["numpy.zeros", "range", "int", "range", "sim.sample_navigable_point", "maps.to_grid", "numpy.ceil", "max", "min", "max", "min", "range", "maps._outline_border", "sim.get_agent_state", "numpy.abs", "min", "max", "min", "max", "maps.from_grid", "sim.is_navigable", "numpy.where", "numpy.where", "max", "min", "max", "min", "numpy.any", "numpy.any"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.to_grid", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps._outline_border", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.from_grid"], ["", "def", "get_topdown_map", "(", "\n", "sim", ":", "Simulator", ",", "\n", "map_resolution", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "1250", ",", "1250", ")", ",", "\n", "num_samples", ":", "int", "=", "20000", ",", "\n", "draw_border", ":", "bool", "=", "True", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Return a top-down occupancy map for a sim. Note, this only returns valid\n    values for whatever floor the agent is currently on.\n\n    Args:\n        sim: The simulator.\n        map_resolution: The resolution of map which will be computed and\n            returned.\n        num_samples: The number of random navigable points which will be\n            initially\n            sampled. For large environments it may need to be increased.\n        draw_border: Whether to outline the border of the occupied spaces.\n\n    Returns:\n        Image containing 0 if occupied, 1 if unoccupied, and 2 if border (if\n        the flag is set).\n    \"\"\"", "\n", "top_down_map", "=", "np", ".", "zeros", "(", "map_resolution", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "border_padding", "=", "3", "\n", "\n", "start_height", "=", "sim", ".", "get_agent_state", "(", ")", ".", "position", "[", "1", "]", "\n", "\n", "# Use sampling to find the extrema points that might be navigable.", "\n", "range_x", "=", "(", "map_resolution", "[", "0", "]", ",", "0", ")", "\n", "range_y", "=", "(", "map_resolution", "[", "1", "]", ",", "0", ")", "\n", "for", "_", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "point", "=", "sim", ".", "sample_navigable_point", "(", ")", "\n", "# Check if on same level as original", "\n", "if", "np", ".", "abs", "(", "start_height", "-", "point", "[", "1", "]", ")", ">", "0.5", ":", "\n", "            ", "continue", "\n", "", "g_x", ",", "g_y", "=", "to_grid", "(", "\n", "point", "[", "0", "]", ",", "point", "[", "2", "]", ",", "COORDINATE_MIN", ",", "COORDINATE_MAX", ",", "map_resolution", "\n", ")", "\n", "range_x", "=", "(", "min", "(", "range_x", "[", "0", "]", ",", "g_x", ")", ",", "max", "(", "range_x", "[", "1", "]", ",", "g_x", ")", ")", "\n", "range_y", "=", "(", "min", "(", "range_y", "[", "0", "]", ",", "g_y", ")", ",", "max", "(", "range_y", "[", "1", "]", ",", "g_y", ")", ")", "\n", "\n", "# Pad the range just in case not enough points were sampled to get the true", "\n", "# extrema.", "\n", "", "padding", "=", "int", "(", "np", ".", "ceil", "(", "map_resolution", "[", "0", "]", "/", "125", ")", ")", "\n", "range_x", "=", "(", "\n", "max", "(", "range_x", "[", "0", "]", "-", "padding", ",", "0", ")", ",", "\n", "min", "(", "range_x", "[", "-", "1", "]", "+", "padding", "+", "1", ",", "top_down_map", ".", "shape", "[", "0", "]", ")", ",", "\n", ")", "\n", "range_y", "=", "(", "\n", "max", "(", "range_y", "[", "0", "]", "-", "padding", ",", "0", ")", ",", "\n", "min", "(", "range_y", "[", "-", "1", "]", "+", "padding", "+", "1", ",", "top_down_map", ".", "shape", "[", "1", "]", ")", ",", "\n", ")", "\n", "\n", "# Search over grid for valid points.", "\n", "for", "ii", "in", "range", "(", "range_x", "[", "0", "]", ",", "range_x", "[", "1", "]", ")", ":", "\n", "        ", "for", "jj", "in", "range", "(", "range_y", "[", "0", "]", ",", "range_y", "[", "1", "]", ")", ":", "\n", "            ", "realworld_x", ",", "realworld_y", "=", "from_grid", "(", "\n", "ii", ",", "jj", ",", "COORDINATE_MIN", ",", "COORDINATE_MAX", ",", "map_resolution", "\n", ")", "\n", "valid_point", "=", "sim", ".", "is_navigable", "(", "\n", "[", "realworld_x", ",", "start_height", ",", "realworld_y", "]", "\n", ")", "\n", "top_down_map", "[", "ii", ",", "jj", "]", "=", "(", "\n", "MAP_VALID_POINT", "if", "valid_point", "else", "MAP_INVALID_POINT", "\n", ")", "\n", "\n", "# Draw border if necessary", "\n", "", "", "if", "draw_border", ":", "\n", "# Recompute range in case padding added any more values.", "\n", "        ", "range_x", "=", "np", ".", "where", "(", "np", ".", "any", "(", "top_down_map", ",", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "range_y", "=", "np", ".", "where", "(", "np", ".", "any", "(", "top_down_map", ",", "axis", "=", "0", ")", ")", "[", "0", "]", "\n", "range_x", "=", "(", "\n", "max", "(", "range_x", "[", "0", "]", "-", "border_padding", ",", "0", ")", ",", "\n", "min", "(", "range_x", "[", "-", "1", "]", "+", "border_padding", "+", "1", ",", "top_down_map", ".", "shape", "[", "0", "]", ")", ",", "\n", ")", "\n", "range_y", "=", "(", "\n", "max", "(", "range_y", "[", "0", "]", "-", "border_padding", ",", "0", ")", ",", "\n", "min", "(", "range_y", "[", "-", "1", "]", "+", "border_padding", "+", "1", ",", "top_down_map", ".", "shape", "[", "1", "]", ")", ",", "\n", ")", "\n", "\n", "_outline_border", "(", "\n", "top_down_map", "[", "range_x", "[", "0", "]", ":", "range_x", "[", "1", "]", ",", "range_y", "[", "0", "]", ":", "range_y", "[", "1", "]", "]", "\n", ")", "\n", "", "return", "top_down_map", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.colorize_topdown_map": [[344, 373], ["numpy.array"], "function", ["None"], ["", "def", "colorize_topdown_map", "(", "\n", "top_down_map", ":", "np", ".", "ndarray", ",", "\n", "fog_of_war_mask", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", "fog_of_war_desat_amount", ":", "float", "=", "0.5", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Convert the top down map to RGB based on the indicator values.\n        Args:\n            top_down_map: A non-colored version of the map.\n            fog_of_war_mask: A mask used to determine which parts of the\n                top_down_map are visible\n                Non-visible parts will be desaturated\n            fog_of_war_desat_amount: Amount to desaturate the color of unexplored areas\n                Decreasing this value will make unexplored areas darker\n                Default: 0.5\n        Returns:\n            A colored version of the top-down map.\n    \"\"\"", "\n", "_map", "=", "TOP_DOWN_MAP_COLORS", "[", "top_down_map", "]", "\n", "\n", "if", "fog_of_war_mask", "is", "not", "None", ":", "\n", "        ", "fog_of_war_desat_values", "=", "np", ".", "array", "(", "[", "[", "fog_of_war_desat_amount", "]", ",", "[", "1.0", "]", "]", ")", "\n", "# Only desaturate things that are valid points as only valid points get revealed", "\n", "desat_mask", "=", "top_down_map", "!=", "MAP_INVALID_POINT", "\n", "\n", "_map", "[", "desat_mask", "]", "=", "(", "\n", "_map", "*", "fog_of_war_desat_values", "[", "fog_of_war_mask", "]", "\n", ")", ".", "astype", "(", "np", ".", "uint8", ")", "[", "desat_mask", "]", "\n", "\n", "", "return", "_map", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.draw_path": [[375, 396], ["zip", "cv2.line"], "function", ["None"], ["", "def", "draw_path", "(", "\n", "top_down_map", ":", "np", ".", "ndarray", ",", "\n", "path_points", ":", "List", "[", "Tuple", "]", ",", "\n", "color", ":", "int", ",", "\n", "thickness", ":", "int", "=", "2", ",", "\n", ")", "->", "None", ":", "\n", "    ", "r\"\"\"Draw path on top_down_map (in place) with specified color.\n        Args:\n            top_down_map: A colored version of the map.\n            color: color code of the path, from TOP_DOWN_MAP_COLORS.\n            path_points: list of points that specify the path to be drawn\n            thickness: thickness of the path.\n    \"\"\"", "\n", "for", "prev_pt", ",", "next_pt", "in", "zip", "(", "path_points", "[", ":", "-", "1", "]", ",", "path_points", "[", "1", ":", "]", ")", ":", "\n", "# Swapping x y", "\n", "        ", "cv2", ".", "line", "(", "\n", "top_down_map", ",", "\n", "prev_pt", "[", ":", ":", "-", "1", "]", ",", "\n", "next_pt", "[", ":", ":", "-", "1", "]", ",", "\n", "color", ",", "\n", "thickness", "=", "thickness", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_from_coeff": [[12, 19], ["numpy.quaternion"], "function", ["None"], ["def", "quaternion_from_coeff", "(", "coeffs", ":", "np", ".", "ndarray", ")", "->", "np", ".", "quaternion", ":", "\n", "    ", "r\"\"\"Creates a quaternions from coeffs in [x, y, z, w] format\n    \"\"\"", "\n", "quat", "=", "np", ".", "quaternion", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "quat", ".", "real", "=", "coeffs", "[", "3", "]", "\n", "quat", ".", "imag", "=", "coeffs", "[", "0", ":", "3", "]", "\n", "return", "quat", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_rotate_vector": [[21, 32], ["numpy.quaternion", "quat.inverse"], "function", ["None"], ["", "def", "quaternion_rotate_vector", "(", "quat", ":", "np", ".", "quaternion", ",", "v", ":", "np", ".", "array", ")", "->", "np", ".", "array", ":", "\n", "    ", "r\"\"\"Rotates a vector by a quaternion\n    Args:\n        quaternion: The quaternion to rotate by\n        v: The vector to rotate\n    Returns:\n        np.array: The rotated vector\n    \"\"\"", "\n", "vq", "=", "np", ".", "quaternion", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "vq", ".", "imag", "=", "v", "\n", "return", "(", "quat", "*", "vq", "*", "quat", ".", "inverse", "(", ")", ")", ".", "imag", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_xyzw_to_wxyz": [[34, 36], ["numpy.quaternion"], "function", ["None"], ["", "def", "quaternion_xyzw_to_wxyz", "(", "v", ":", "np", ".", "array", ")", ":", "\n", "    ", "return", "np", ".", "quaternion", "(", "v", "[", "3", "]", ",", "*", "v", "[", "0", ":", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_wxyz_to_xyzw": [[38, 40], ["numpy.quaternion"], "function", ["None"], ["", "def", "quaternion_wxyz_to_xyzw", "(", "v", ":", "np", ".", "array", ")", ":", "\n", "    ", "return", "np", ".", "quaternion", "(", "*", "v", "[", "1", ":", "4", "]", ",", "v", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_to_coeff": [[42, 49], ["numpy.zeros"], "function", ["None"], ["", "def", "quaternion_to_coeff", "(", "quat", ":", "np", ".", "quaternion", ")", "->", "np", ".", "array", ":", "\n", "    ", "r\"\"\"Converts a quaternions to coeffs in [x, y, z, w] format\n    \"\"\"", "\n", "coeffs", "=", "np", ".", "zeros", "(", "(", "4", ",", ")", ")", "\n", "coeffs", "[", "3", "]", "=", "quat", ".", "real", "\n", "coeffs", "[", "0", ":", "3", "]", "=", "quat", ".", "imag", "\n", "return", "coeffs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.compute_heading_from_quaternion": [[51, 64], ["numpy.array", "geometry_utils.quaternion_rotate_vector", "r.inverse", "numpy.arctan2().item", "numpy.arctan2"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_rotate_vector"], ["", "def", "compute_heading_from_quaternion", "(", "r", ")", ":", "\n", "    ", "\"\"\"\n    r - rotation quaternion\n\n    Computes clockwise rotation about Y.\n    \"\"\"", "\n", "# quaternion - np.quaternion unit quaternion", "\n", "# Real world rotation", "\n", "direction_vector", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "1", "]", ")", "# Forward vector", "\n", "heading_vector", "=", "quaternion_rotate_vector", "(", "r", ".", "inverse", "(", ")", ",", "direction_vector", ")", "\n", "\n", "phi", "=", "-", "np", ".", "arctan2", "(", "heading_vector", "[", "0", "]", ",", "-", "heading_vector", "[", "2", "]", ")", ".", "item", "(", ")", "\n", "return", "phi", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.compute_quaternion_from_heading": [[66, 79], ["math.cos", "numpy.quaternion", "math.sin"], "function", ["None"], ["", "def", "compute_quaternion_from_heading", "(", "theta", ")", ":", "\n", "    ", "\"\"\"\n    Setup: -Z axis is forward, X axis is rightward, Y axis is upward.\n    theta - heading angle in radians --- measured clockwise from -Z to X.\n\n    Compute quaternion that represents the corresponding clockwise rotation about Y axis.\n    \"\"\"", "\n", "# Real part", "\n", "q0", "=", "math", ".", "cos", "(", "-", "theta", "/", "2", ")", "\n", "# Imaginary part", "\n", "q", "=", "(", "0", ",", "math", ".", "sin", "(", "-", "theta", "/", "2", ")", ",", "0", ")", "\n", "\n", "return", "np", ".", "quaternion", "(", "q0", ",", "*", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.compute_egocentric_delta": [[81, 103], ["geometry_utils.compute_heading_from_quaternion", "geometry_utils.compute_heading_from_quaternion", "math.sqrt", "math.atan2"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.compute_heading_from_quaternion", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.compute_heading_from_quaternion"], ["", "def", "compute_egocentric_delta", "(", "p1", ",", "r1", ",", "p2", ",", "r2", ")", ":", "\n", "    ", "\"\"\"\n    p1, p2 - (x, y, z) position\n    r1, r2 - np.quaternions\n\n    Compute egocentric change from (p1, r1) to (p2, r2) in\n    the coordinates of (p1, r1)\n\n    Setup: -Z axis is forward, X axis is rightward, Y axis is upward.\n    \"\"\"", "\n", "x1", ",", "y1", ",", "z1", "=", "p1", "\n", "x2", ",", "y2", ",", "z2", "=", "p2", "\n", "theta_1", "=", "compute_heading_from_quaternion", "(", "r1", ")", "\n", "theta_2", "=", "compute_heading_from_quaternion", "(", "r2", ")", "\n", "\n", "D_rho", "=", "math", ".", "sqrt", "(", "(", "x1", "-", "x2", ")", "**", "2", "+", "(", "z1", "-", "z2", ")", "**", "2", ")", "\n", "D_phi", "=", "(", "\n", "math", ".", "atan2", "(", "x2", "-", "x1", ",", "-", "z2", "+", "z1", ")", "-", "theta_1", "\n", ")", "# counter-clockwise rotation about Y from -Z to X", "\n", "D_theta", "=", "theta_2", "-", "theta_1", "\n", "\n", "return", "(", "D_rho", ",", "D_phi", ",", "D_theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.compute_updated_pose": [[105, 131], ["geometry_utils.compute_heading_from_quaternion", "numpy.array", "geometry_utils.compute_quaternion_from_heading", "math.sin", "math.cos"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.compute_heading_from_quaternion", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.compute_quaternion_from_heading"], ["", "def", "compute_updated_pose", "(", "p", ",", "r", ",", "delta_xz", ",", "delta_y", ")", ":", "\n", "    ", "\"\"\"\n    Setup: -Z axis is forward, X axis is rightward, Y axis is upward.\n\n    p - (x, y, z) position\n    r - np.quaternion\n    delta_xz - (D_rho, D_phi, D_theta) in egocentric coordinates\n    delta_y - scalar change in height\n\n    Compute new position after a motion of delta from (p, r)\n    \"\"\"", "\n", "x", ",", "y", ",", "z", "=", "p", "\n", "theta", "=", "compute_heading_from_quaternion", "(", "\n", "r", "\n", ")", "# counter-clockwise rotation about Y from -Z to X", "\n", "D_rho", ",", "D_phi", ",", "D_theta", "=", "delta_xz", "\n", "\n", "xp", "=", "x", "+", "D_rho", "*", "math", ".", "sin", "(", "theta", "+", "D_phi", ")", "\n", "yp", "=", "y", "+", "delta_y", "\n", "zp", "=", "z", "-", "D_rho", "*", "math", ".", "cos", "(", "theta", "+", "D_phi", ")", "\n", "pp", "=", "np", ".", "array", "(", "[", "xp", ",", "yp", ",", "zp", "]", ")", "\n", "\n", "thetap", "=", "theta", "+", "D_theta", "\n", "rp", "=", "compute_quaternion_from_heading", "(", "thetap", ")", "\n", "\n", "return", "pp", ",", "rp", "\n", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.registration._try_register_exp_task": [[12, 29], ["habitat.core.registry.registry.register_task"], "function", ["None"], ["def", "_try_register_exp_task", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "from", "habitat_extensions", ".", "exploration_task", "import", "ExplorationTask", "\n", "\n", "has_exptask", "=", "True", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "        ", "has_exptask", "=", "False", "\n", "exptask_import_error", "=", "e", "\n", "\n", "", "if", "has_exptask", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "\n", "        ", "@", "registry", ".", "register_task", "(", "name", "=", "\"Exp-v0\"", ")", "\n", "class", "ExplorationTaskImportError", "(", "EmbodiedTask", ")", ":", "\n", "            ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "                ", "raise", "exptask_import_error", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.registration._try_register_explorationdatasetv1": [[31, 48], ["habitat.core.registry.registry.register_dataset"], "function", ["None"], ["", "", "", "", "def", "_try_register_explorationdatasetv1", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "from", "habitat_extensions", ".", "exploration_dataset", "import", "ExplorationDatasetV1", "\n", "\n", "has_exploration", "=", "True", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "        ", "has_exploration", "=", "False", "\n", "exploration_import_error", "=", "e", "\n", "\n", "", "if", "has_exploration", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "\n", "        ", "@", "registry", ".", "register_dataset", "(", "name", "=", "\"Exploration-v1\"", ")", "\n", "class", "ExplorationDatasetImportError", "(", "Dataset", ")", ":", "\n", "            ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "                ", "raise", "exploration_import_error", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTPoseSensor.__init__": [[58, 62], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["def", "__init__", "(", "self", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTPoseSensor._get_uuid": [[63, 65], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "\"pose_gt\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTPoseSensor._get_sensor_type": [[66, 68], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "POSITION", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTPoseSensor._get_observation_space": [[69, 76], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "sensor_shape", "=", "(", "3", ",", ")", "\n", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "shape", "=", "sensor_shape", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTPoseSensor._quat_to_xy_heading": [[78, 85], ["numpy.array", "habitat_extensions.geometry_utils.quaternion_rotate_vector", "numpy.array", "habitat.tasks.utils.cartesian_to_polar"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_rotate_vector"], ["", "def", "_quat_to_xy_heading", "(", "self", ",", "quat", ")", ":", "\n", "        ", "direction_vector", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "1", "]", ")", "\n", "\n", "heading_vector", "=", "quaternion_rotate_vector", "(", "quat", ",", "direction_vector", ")", "\n", "\n", "phi", "=", "cartesian_to_polar", "(", "-", "heading_vector", "[", "2", "]", ",", "heading_vector", "[", "0", "]", ")", "[", "1", "]", "\n", "return", "np", ".", "array", "(", "phi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTPoseSensor.get_observation": [[86, 109], ["sensors.GTPoseSensor._sim.get_agent_state", "numpy.array", "habitat_extensions.geometry_utils.quaternion_from_coeff", "habitat_extensions.geometry_utils.quaternion_rotate_vector", "habitat_extensions.geometry_utils.quaternion_from_coeff", "sensors.GTPoseSensor._quat_to_xy_heading", "numpy.array", "habitat_extensions.geometry_utils.quaternion_from_coeff.inverse", "rotation_world_agent.inverse"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_from_coeff", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_rotate_vector", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_from_coeff", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoisyIntegratedPointGoalGPSAndCompassSensor._quat_to_xy_heading"], ["", "def", "get_observation", "(", "self", ",", "*", "args", ":", "Any", ",", "observations", ",", "episode", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "agent_state", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", "\n", "\n", "origin", "=", "np", ".", "array", "(", "episode", ".", "start_position", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "rotation_world_start", "=", "quaternion_from_coeff", "(", "episode", ".", "start_rotation", ")", "\n", "\n", "agent_position", "=", "agent_state", ".", "position", "\n", "\n", "agent_position", "=", "quaternion_rotate_vector", "(", "\n", "rotation_world_start", ".", "inverse", "(", ")", ",", "agent_position", "-", "origin", "\n", ")", "\n", "\n", "rotation_world_agent", "=", "agent_state", ".", "rotation", "\n", "rotation_world_start", "=", "quaternion_from_coeff", "(", "episode", ".", "start_rotation", ")", "\n", "\n", "agent_heading", "=", "self", ".", "_quat_to_xy_heading", "(", "\n", "rotation_world_agent", ".", "inverse", "(", ")", "*", "rotation_world_start", "\n", ")", "\n", "# This is rotation from -Z to -X. We want -Z to X for this particular sensor.", "\n", "agent_heading", "=", "-", "agent_heading", "\n", "\n", "return", "np", ".", "array", "(", "\n", "[", "-", "agent_position", "[", "2", "]", ",", "agent_position", "[", "0", "]", ",", "agent_heading", "]", ",", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GlobalGPSCompassSensor.__init__": [[123, 126], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["def", "__init__", "(", "self", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GlobalGPSCompassSensor._get_uuid": [[127, 129], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "\"globalgpscompass\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GlobalGPSCompassSensor._get_sensor_type": [[130, 132], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "POSITION", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GlobalGPSCompassSensor._get_observation_space": [[133, 140], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "sensor_shape", "=", "(", "3", ",", ")", "\n", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "shape", "=", "sensor_shape", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GlobalGPSCompassSensor.get_observation": [[142, 148], ["occant_baselines.common.env_utils.quat_to_xy_heading", "numpy.array", "sensors.GlobalGPSCompassSensor._sim.get_agent_state", "sensors.GlobalGPSCompassSensor._sim.get_agent_state"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.env_utils.quat_to_xy_heading", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state"], ["", "def", "get_observation", "(", "self", ",", "*", "args", ":", "Any", ",", "observations", ",", "episode", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "agent_position", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", ".", "position", "\n", "agent_heading", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", ".", "rotation", "\n", "agent_heading", "=", "quat_to_xy_heading", "(", "agent_heading", ")", "\n", "return", "np", ".", "array", "(", "\n", "[", "agent_position", "[", "0", "]", ",", "agent_position", "[", "2", "]", ",", "agent_heading", "]", ",", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoisyPoseSensor.__init__": [[166, 180], ["habitat.core.simulator.Sensor.__init__", "habitat_extensions.utils.truncated_normal_noise_distr", "habitat_extensions.utils.truncated_normal_noise_distr"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.utils.truncated_normal_noise_distr", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.utils.truncated_normal_noise_distr"], ["def", "__init__", "(", "self", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "self", ".", "current_episode_id", "=", "None", "\n", "self", ".", "_estimated_position", "=", "None", "\n", "self", ".", "_estimated_rotation", "=", "None", "\n", "cfg", "=", "self", ".", "config", "\n", "self", ".", "_fwd_tn_distr", "=", "truncated_normal_noise_distr", "(", "\n", "cfg", ".", "FORWARD_MEAN", ",", "cfg", ".", "FORWARD_VARIANCE", ",", "2", "\n", ")", "\n", "\n", "self", ".", "_rot_tn_distr", "=", "truncated_normal_noise_distr", "(", "\n", "cfg", ".", "ROTATION_MEAN", ",", "cfg", ".", "ROTATION_VARIANCE", ",", "2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoisyPoseSensor._get_uuid": [[182, 184], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "\"pose\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoisyPoseSensor._get_sensor_type": [[185, 187], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "POSITION", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoisyPoseSensor._get_observation_space": [[188, 195], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "sensor_shape", "=", "(", "3", ",", ")", "\n", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "shape", "=", "sensor_shape", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoisyPoseSensor._quat_to_xy_heading": [[197, 204], ["numpy.array", "habitat_extensions.geometry_utils.quaternion_rotate_vector", "numpy.array", "habitat.tasks.utils.cartesian_to_polar"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_rotate_vector"], ["", "def", "_quat_to_xy_heading", "(", "self", ",", "quat", ")", ":", "\n", "        ", "direction_vector", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "1", "]", ")", "\n", "\n", "heading_vector", "=", "quaternion_rotate_vector", "(", "quat", ",", "direction_vector", ")", "\n", "\n", "phi", "=", "cartesian_to_polar", "(", "-", "heading_vector", "[", "2", "]", ",", "heading_vector", "[", "0", "]", ")", "[", "1", "]", "\n", "return", "np", ".", "array", "(", "phi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoisyPoseSensor._get_noisy_delta": [[205, 232], ["habitat_extensions.geometry_utils.compute_egocentric_delta", "sensors.NoisyPoseSensor._fwd_tn_distr.rvs", "numpy.sign", "sensors.NoisyPoseSensor._rot_tn_distr.rvs", "numpy.sign"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.compute_egocentric_delta"], ["", "def", "_get_noisy_delta", "(", "self", ",", "agent_state", ")", ":", "\n", "        ", "current_agent_position", "=", "agent_state", ".", "position", "\n", "current_agent_rotation", "=", "agent_state", ".", "rotation", "\n", "\n", "past_agent_position", "=", "self", ".", "_past_gt_position", "\n", "past_agent_rotation", "=", "self", ".", "_past_gt_rotation", "\n", "\n", "# GT delta", "\n", "delta_xz_gt", "=", "compute_egocentric_delta", "(", "\n", "past_agent_position", ",", "\n", "past_agent_rotation", ",", "\n", "current_agent_position", ",", "\n", "current_agent_rotation", ",", "\n", ")", "\n", "delta_y_gt", "=", "current_agent_position", "[", "1", "]", "-", "past_agent_position", "[", "0", "]", "\n", "\n", "# Add noise to D_rho, D_theta", "\n", "D_rho", ",", "D_phi", ",", "D_theta", "=", "delta_xz_gt", "\n", "D_rho_noisy", "=", "(", "D_rho", "+", "self", ".", "_fwd_tn_distr", ".", "rvs", "(", ")", "*", "np", ".", "sign", "(", "D_rho", ")", ")", ".", "item", "(", ")", "\n", "D_phi_noisy", "=", "D_phi", "\n", "D_theta_noisy", "=", "(", "D_theta", "+", "self", ".", "_rot_tn_distr", ".", "rvs", "(", ")", "*", "np", ".", "sign", "(", "D_theta", ")", ")", ".", "item", "(", ")", "\n", "\n", "# Compute noisy delta", "\n", "delta_xz_noisy", "=", "(", "D_rho_noisy", ",", "D_phi_noisy", ",", "D_theta_noisy", ")", "\n", "delta_y_noisy", "=", "delta_y_gt", "\n", "\n", "return", "delta_xz_noisy", ",", "delta_y_noisy", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoisyPoseSensor.get_observation": [[233, 282], ["sensors.NoisyPoseSensor._sim.get_agent_state", "sensors.NoisyPoseSensor._get_noisy_delta", "habitat_extensions.geometry_utils.compute_updated_pose", "numpy.array", "habitat_extensions.geometry_utils.quaternion_from_coeff", "habitat_extensions.geometry_utils.quaternion_rotate_vector", "habitat_extensions.geometry_utils.quaternion_from_coeff", "sensors.NoisyPoseSensor._quat_to_xy_heading", "numpy.array", "habitat_extensions.geometry_utils.quaternion_from_coeff.inverse", "rotation_world_agent.inverse"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoisyIntegratedPointGoalGPSAndCompassSensor._get_noisy_delta", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.compute_updated_pose", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_from_coeff", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_rotate_vector", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_from_coeff", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoisyIntegratedPointGoalGPSAndCompassSensor._quat_to_xy_heading"], ["", "def", "get_observation", "(", "self", ",", "*", "args", ":", "Any", ",", "observations", ",", "episode", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "episode_id", "=", "(", "episode", ".", "episode_id", ",", "episode", ".", "scene_id", ")", "\n", "\n", "agent_state", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", "\n", "# At the start of a new episode, reset pose estimate", "\n", "if", "self", ".", "current_episode_id", "!=", "episode_id", ":", "\n", "            ", "self", ".", "current_episode_id", "=", "episode_id", "\n", "# Initialize with the ground-truth position, rotation", "\n", "self", ".", "_estimated_position", "=", "agent_state", ".", "position", "\n", "self", ".", "_estimated_rotation", "=", "agent_state", ".", "rotation", "\n", "self", ".", "_past_gt_position", "=", "agent_state", ".", "position", "\n", "self", ".", "_past_gt_rotation", "=", "agent_state", ".", "rotation", "\n", "\n", "# Compute noisy delta", "\n", "", "delta_xz_noisy", ",", "delta_y_noisy", "=", "self", ".", "_get_noisy_delta", "(", "agent_state", ")", "\n", "\n", "# Update past gt states", "\n", "self", ".", "_past_gt_position", "=", "agent_state", ".", "position", "\n", "self", ".", "_past_gt_rotation", "=", "agent_state", ".", "rotation", "\n", "\n", "# Update noisy pose estimates", "\n", "(", "self", ".", "_estimated_position", ",", "self", ".", "_estimated_rotation", ",", ")", "=", "compute_updated_pose", "(", "\n", "self", ".", "_estimated_position", ",", "\n", "self", ".", "_estimated_rotation", ",", "\n", "delta_xz_noisy", ",", "\n", "delta_y_noisy", ",", "\n", ")", "\n", "\n", "# Compute sensor readings with noisy estimates", "\n", "origin", "=", "np", ".", "array", "(", "episode", ".", "start_position", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "rotation_world_start", "=", "quaternion_from_coeff", "(", "episode", ".", "start_rotation", ")", "\n", "\n", "agent_position", "=", "self", ".", "_estimated_position", "\n", "\n", "agent_position", "=", "quaternion_rotate_vector", "(", "\n", "rotation_world_start", ".", "inverse", "(", ")", ",", "agent_position", "-", "origin", "\n", ")", "\n", "\n", "rotation_world_agent", "=", "self", ".", "_estimated_rotation", "\n", "rotation_world_start", "=", "quaternion_from_coeff", "(", "episode", ".", "start_rotation", ")", "\n", "\n", "agent_heading", "=", "self", ".", "_quat_to_xy_heading", "(", "\n", "rotation_world_agent", ".", "inverse", "(", ")", "*", "rotation_world_start", "\n", ")", "\n", "# This is rotation from -Z to -X. We want -Z to X for this particular sensor.", "\n", "agent_heading", "=", "-", "agent_heading", "\n", "\n", "return", "np", ".", "array", "(", "\n", "[", "-", "agent_position", "[", "2", "]", ",", "agent_position", "[", "0", "]", ",", "agent_heading", "]", ",", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoiseFreePoseSensor.__init__": [[296, 300], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["def", "__init__", "(", "self", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoiseFreePoseSensor._get_uuid": [[301, 303], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "\"pose\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoiseFreePoseSensor._get_sensor_type": [[304, 306], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "POSITION", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoiseFreePoseSensor._get_observation_space": [[307, 314], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "sensor_shape", "=", "(", "3", ",", ")", "\n", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "shape", "=", "sensor_shape", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoiseFreePoseSensor._quat_to_xy_heading": [[316, 323], ["numpy.array", "habitat_extensions.geometry_utils.quaternion_rotate_vector", "numpy.array", "habitat.tasks.utils.cartesian_to_polar"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_rotate_vector"], ["", "def", "_quat_to_xy_heading", "(", "self", ",", "quat", ")", ":", "\n", "        ", "direction_vector", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "1", "]", ")", "\n", "\n", "heading_vector", "=", "quaternion_rotate_vector", "(", "quat", ",", "direction_vector", ")", "\n", "\n", "phi", "=", "cartesian_to_polar", "(", "-", "heading_vector", "[", "2", "]", ",", "heading_vector", "[", "0", "]", ")", "[", "1", "]", "\n", "return", "np", ".", "array", "(", "phi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoiseFreePoseSensor.get_observation": [[324, 347], ["sensors.NoiseFreePoseSensor._sim.get_agent_state", "numpy.array", "habitat_extensions.geometry_utils.quaternion_from_coeff", "habitat_extensions.geometry_utils.quaternion_rotate_vector", "habitat_extensions.geometry_utils.quaternion_from_coeff", "sensors.NoiseFreePoseSensor._quat_to_xy_heading", "numpy.array", "habitat_extensions.geometry_utils.quaternion_from_coeff.inverse", "rotation_world_agent.inverse"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_from_coeff", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_rotate_vector", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_from_coeff", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoisyIntegratedPointGoalGPSAndCompassSensor._quat_to_xy_heading"], ["", "def", "get_observation", "(", "self", ",", "*", "args", ":", "Any", ",", "observations", ",", "episode", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "agent_state", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", "\n", "\n", "origin", "=", "np", ".", "array", "(", "episode", ".", "start_position", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "rotation_world_start", "=", "quaternion_from_coeff", "(", "episode", ".", "start_rotation", ")", "\n", "\n", "agent_position", "=", "agent_state", ".", "position", "\n", "\n", "agent_position", "=", "quaternion_rotate_vector", "(", "\n", "rotation_world_start", ".", "inverse", "(", ")", ",", "agent_position", "-", "origin", "\n", ")", "\n", "\n", "rotation_world_agent", "=", "agent_state", ".", "rotation", "\n", "rotation_world_start", "=", "quaternion_from_coeff", "(", "episode", ".", "start_rotation", ")", "\n", "\n", "agent_heading", "=", "self", ".", "_quat_to_xy_heading", "(", "\n", "rotation_world_agent", ".", "inverse", "(", ")", "*", "rotation_world_start", "\n", ")", "\n", "# This is rotation from -Z to -X. We want -Z to X for this particular sensor.", "\n", "agent_heading", "=", "-", "agent_heading", "\n", "\n", "return", "np", ".", "array", "(", "\n", "[", "-", "agent_position", "[", "2", "]", ",", "agent_position", "[", "0", "]", ",", "agent_heading", "]", ",", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMap.__init__": [[361, 404], ["habitat.core.simulator.Sensor.__init__", "numpy.array", "numpy.linalg.inv", "float", "float", "numpy.meshgrid", "numpy.arctan", "numpy.linspace", "numpy.linspace", "float", "numpy.tan", "numpy.tan", "numpy.tan"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["def", "__init__", "(", "self", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n", "# Map statistics", "\n", "self", ".", "map_size", "=", "self", ".", "config", ".", "MAP_SIZE", "\n", "self", ".", "map_scale", "=", "self", ".", "config", ".", "MAP_SCALE", "\n", "if", "self", ".", "config", ".", "MAX_SENSOR_RANGE", ">", "0", ":", "\n", "            ", "self", ".", "max_forward_range", "=", "self", ".", "config", ".", "MAX_SENSOR_RANGE", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_forward_range", "=", "self", ".", "map_size", "*", "self", ".", "map_scale", "\n", "\n", "# Agent height for pointcloud tranforms", "\n", "", "self", ".", "camera_height", "=", "self", ".", "_sim", ".", "habitat_config", ".", "DEPTH_SENSOR", ".", "POSITION", "[", "1", "]", "\n", "\n", "# Compute intrinsic matrix", "\n", "depth_H", "=", "self", ".", "_sim", ".", "habitat_config", ".", "DEPTH_SENSOR", ".", "HEIGHT", "\n", "depth_W", "=", "self", ".", "_sim", ".", "habitat_config", ".", "DEPTH_SENSOR", ".", "WIDTH", "\n", "hfov", "=", "float", "(", "self", ".", "_sim", ".", "habitat_config", ".", "DEPTH_SENSOR", ".", "HFOV", ")", "*", "np", ".", "pi", "/", "180", "\n", "vfov", "=", "2", "*", "np", ".", "arctan", "(", "(", "depth_H", "/", "depth_W", ")", "*", "np", ".", "tan", "(", "hfov", "/", "2.0", ")", ")", "\n", "self", ".", "intrinsic_matrix", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "1", "/", "np", ".", "tan", "(", "hfov", "/", "2.0", ")", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "1", "/", "np", ".", "tan", "(", "vfov", "/", "2.0", ")", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "1", ",", "0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0", ",", "1", "]", ",", "\n", "]", "\n", ")", "\n", "self", ".", "inverse_intrinsic_matrix", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "intrinsic_matrix", ")", "\n", "\n", "# Height thresholds for obstacles", "\n", "self", ".", "height_thresh", "=", "self", ".", "config", ".", "HEIGHT_THRESH", "\n", "\n", "# Depth processing", "\n", "self", ".", "min_depth", "=", "float", "(", "self", ".", "_sim", ".", "habitat_config", ".", "DEPTH_SENSOR", ".", "MIN_DEPTH", ")", "\n", "self", ".", "max_depth", "=", "float", "(", "self", ".", "_sim", ".", "habitat_config", ".", "DEPTH_SENSOR", ".", "MAX_DEPTH", ")", "\n", "\n", "# Pre-compute a grid of locations for depth projection", "\n", "W", "=", "self", ".", "_sim", ".", "habitat_config", ".", "DEPTH_SENSOR", ".", "WIDTH", "\n", "H", "=", "self", ".", "_sim", ".", "habitat_config", ".", "DEPTH_SENSOR", ".", "HEIGHT", "\n", "self", ".", "proj_xs", ",", "self", ".", "proj_ys", "=", "np", ".", "meshgrid", "(", "\n", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "W", ")", ",", "np", ".", "linspace", "(", "1", ",", "-", "1", ",", "H", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMap._get_uuid": [[406, 408], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "\"ego_map_gt\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMap._get_sensor_type": [[409, 411], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "COLOR", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMap._get_observation_space": [[412, 415], ["gym.spaces.Box"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "sensor_shape", "=", "(", "self", ".", "config", ".", "MAP_SIZE", ",", "self", ".", "config", ".", "MAP_SIZE", ",", "2", ")", "\n", "return", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "sensor_shape", ",", "dtype", "=", "np", ".", "uint8", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMap.convert_to_pointcloud": [[416, 454], ["numpy.copy().reshape", "numpy.copy().reshape", "depth_float.reshape.reshape.reshape", "numpy.vstack", "depth.astype", "numpy.matmul", "numpy.copy", "numpy.copy", "numpy.ones"], "methods", ["None"], ["", "def", "convert_to_pointcloud", "(", "self", ",", "depth", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            depth = (H, W, 1) numpy array\n\n        Returns:\n            xyz_camera = (N, 3) numpy array for (X, Y, Z) in egocentric world coordinates\n        \"\"\"", "\n", "\n", "depth_float", "=", "depth", ".", "astype", "(", "np", ".", "float32", ")", "[", "...", ",", "0", "]", "\n", "\n", "# =========== Convert to camera coordinates ============", "\n", "W", "=", "depth", ".", "shape", "[", "1", "]", "\n", "xs", "=", "np", ".", "copy", "(", "self", ".", "proj_xs", ")", ".", "reshape", "(", "-", "1", ")", "\n", "ys", "=", "np", ".", "copy", "(", "self", ".", "proj_ys", ")", ".", "reshape", "(", "-", "1", ")", "\n", "depth_float", "=", "depth_float", ".", "reshape", "(", "-", "1", ")", "\n", "# Filter out invalid depths", "\n", "valid_depths", "=", "(", "depth_float", "!=", "self", ".", "min_depth", ")", "&", "(", "\n", "depth_float", "<=", "self", ".", "max_forward_range", "\n", ")", "\n", "xs", "=", "xs", "[", "valid_depths", "]", "\n", "ys", "=", "ys", "[", "valid_depths", "]", "\n", "depth_float", "=", "depth_float", "[", "valid_depths", "]", "\n", "# Unproject", "\n", "# negate depth as the camera looks along -Z", "\n", "xys", "=", "np", ".", "vstack", "(", "\n", "(", "\n", "xs", "*", "depth_float", ",", "\n", "ys", "*", "depth_float", ",", "\n", "-", "depth_float", ",", "\n", "np", ".", "ones", "(", "depth_float", ".", "shape", ")", ",", "\n", ")", "\n", ")", "\n", "inv_K", "=", "self", ".", "inverse_intrinsic_matrix", "\n", "xyz_camera", "=", "np", ".", "matmul", "(", "inv_K", ",", "xys", ")", ".", "T", "# XYZ in the camera coordinate system", "\n", "xyz_camera", "=", "xyz_camera", "[", ":", ",", ":", "3", "]", "/", "xyz_camera", "[", ":", ",", "3", "]", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "return", "xyz_camera", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMap.safe_assign": [[455, 463], ["numpy.logical_and", "numpy.logical_and", "numpy.logical_and"], "methods", ["None"], ["", "def", "safe_assign", "(", "self", ",", "im_map", ",", "x_idx", ",", "y_idx", ",", "value", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "im_map", "[", "x_idx", ",", "y_idx", "]", "=", "value", "\n", "", "except", "IndexError", ":", "\n", "            ", "valid_idx1", "=", "np", ".", "logical_and", "(", "x_idx", ">=", "0", ",", "x_idx", "<", "im_map", ".", "shape", "[", "0", "]", ")", "\n", "valid_idx2", "=", "np", ".", "logical_and", "(", "y_idx", ">=", "0", ",", "y_idx", "<", "im_map", ".", "shape", "[", "1", "]", ")", "\n", "valid_idx", "=", "np", ".", "logical_and", "(", "valid_idx1", ",", "valid_idx2", ")", "\n", "im_map", "[", "x_idx", "[", "valid_idx", "]", ",", "y_idx", "[", "valid_idx", "]", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMap._get_depth_projection": [[464, 525], ["sensors.GTEgoMap.convert_to_pointcloud", "grid_x[].astype", "grid_y[].astype", "numpy.zeros", "numpy.zeros", "numpy.logical_and", "sensors.GTEgoMap.safe_assign", "numpy.ones", "cv2.dilate", "sensors.GTEgoMap.safe_assign", "numpy.ones", "cv2.dilate", "numpy.ones", "cv2.morphologyEx", "cv2.morphologyEx", "numpy.logical_or", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoWallMap.convert_to_pointcloud", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoWallMap.safe_assign", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoWallMap.safe_assign"], ["", "", "def", "_get_depth_projection", "(", "self", ",", "sim_depth", ")", ":", "\n", "        ", "\"\"\"\n        Project pixels visible in depth-map to ground-plane\n        \"\"\"", "\n", "\n", "if", "self", ".", "_sim", ".", "habitat_config", ".", "DEPTH_SENSOR", ".", "NORMALIZE_DEPTH", ":", "\n", "            ", "depth", "=", "sim_depth", "*", "(", "self", ".", "max_depth", "-", "self", ".", "min_depth", ")", "+", "self", ".", "min_depth", "\n", "", "else", ":", "\n", "            ", "depth", "=", "sim_depth", "\n", "\n", "", "XYZ_ego", "=", "self", ".", "convert_to_pointcloud", "(", "depth", ")", "\n", "\n", "# Adding agent's height to the pointcloud", "\n", "XYZ_ego", "[", ":", ",", "1", "]", "+=", "self", ".", "camera_height", "\n", "\n", "# Convert to grid coordinate system", "\n", "V", "=", "self", ".", "map_size", "\n", "Vby2", "=", "V", "//", "2", "\n", "\n", "points", "=", "XYZ_ego", "\n", "\n", "grid_x", "=", "(", "points", "[", ":", ",", "0", "]", "/", "self", ".", "map_scale", ")", "+", "Vby2", "\n", "grid_y", "=", "(", "points", "[", ":", ",", "2", "]", "/", "self", ".", "map_scale", ")", "+", "V", "\n", "\n", "# Filter out invalid points", "\n", "valid_idx", "=", "(", "\n", "(", "grid_x", ">=", "0", ")", "&", "(", "grid_x", "<=", "V", "-", "1", ")", "&", "(", "grid_y", ">=", "0", ")", "&", "(", "grid_y", "<=", "V", "-", "1", ")", "\n", ")", "\n", "points", "=", "points", "[", "valid_idx", ",", ":", "]", "\n", "grid_x", "=", "grid_x", "[", "valid_idx", "]", ".", "astype", "(", "int", ")", "\n", "grid_y", "=", "grid_y", "[", "valid_idx", "]", ".", "astype", "(", "int", ")", "\n", "\n", "# Create empty maps for the two channels", "\n", "obstacle_mat", "=", "np", ".", "zeros", "(", "(", "self", ".", "map_size", ",", "self", ".", "map_size", ")", ",", "np", ".", "uint8", ")", "\n", "explore_mat", "=", "np", ".", "zeros", "(", "(", "self", ".", "map_size", ",", "self", ".", "map_size", ")", ",", "np", ".", "uint8", ")", "\n", "\n", "# Compute obstacle locations", "\n", "high_filter_idx", "=", "points", "[", ":", ",", "1", "]", "<", "self", ".", "height_thresh", "[", "1", "]", "\n", "low_filter_idx", "=", "points", "[", ":", ",", "1", "]", ">", "self", ".", "height_thresh", "[", "0", "]", "\n", "obstacle_idx", "=", "np", ".", "logical_and", "(", "low_filter_idx", ",", "high_filter_idx", ")", "\n", "\n", "self", ".", "safe_assign", "(", "obstacle_mat", ",", "grid_y", "[", "obstacle_idx", "]", ",", "grid_x", "[", "obstacle_idx", "]", ",", "1", ")", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "obstacle_mat", "=", "cv2", ".", "dilate", "(", "obstacle_mat", ",", "kernel", ",", "iterations", "=", "1", ")", "\n", "\n", "# Compute explored locations", "\n", "explored_idx", "=", "high_filter_idx", "\n", "self", ".", "safe_assign", "(", "explore_mat", ",", "grid_y", "[", "explored_idx", "]", ",", "grid_x", "[", "explored_idx", "]", ",", "1", ")", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "obstacle_mat", "=", "cv2", ".", "dilate", "(", "obstacle_mat", ",", "kernel", ",", "iterations", "=", "1", ")", "\n", "\n", "# Smoothen the maps", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "\n", "obstacle_mat", "=", "cv2", ".", "morphologyEx", "(", "obstacle_mat", ",", "cv2", ".", "MORPH_CLOSE", ",", "kernel", ")", "\n", "explore_mat", "=", "cv2", ".", "morphologyEx", "(", "explore_mat", ",", "cv2", ".", "MORPH_CLOSE", ",", "kernel", ")", "\n", "\n", "# Ensure all expanded regions in obstacle_mat are accounted for in explored_mat", "\n", "explore_mat", "=", "np", ".", "logical_or", "(", "explore_mat", ",", "obstacle_mat", ")", "\n", "\n", "return", "np", ".", "stack", "(", "[", "obstacle_mat", ",", "explore_mat", "]", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMap.get_observation": [[526, 531], ["einops.asnumpy", "sensors.GTEgoMap._get_depth_projection"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoWallMap._get_depth_projection"], ["", "def", "get_observation", "(", "self", ",", "*", "args", ":", "Any", ",", "observations", ",", "episode", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "sim_depth", "=", "asnumpy", "(", "observations", "[", "\"depth\"", "]", ")", "\n", "ego_map_gt", "=", "self", ".", "_get_depth_projection", "(", "sim_depth", ")", "\n", "\n", "return", "ego_map_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoWallMap.__init__": [[544, 587], ["habitat.core.simulator.Sensor.__init__", "numpy.array", "numpy.linalg.inv", "float", "float", "numpy.meshgrid", "numpy.arctan", "numpy.linspace", "numpy.linspace", "float", "numpy.tan", "numpy.tan", "numpy.tan"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["def", "__init__", "(", "self", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n", "# Map statistics", "\n", "self", ".", "map_size", "=", "self", ".", "config", ".", "MAP_SIZE", "\n", "self", ".", "map_scale", "=", "self", ".", "config", ".", "MAP_SCALE", "\n", "if", "self", ".", "config", ".", "MAX_SENSOR_RANGE", ">", "0", ":", "\n", "            ", "self", ".", "max_forward_range", "=", "self", ".", "config", ".", "MAX_SENSOR_RANGE", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_forward_range", "=", "self", ".", "map_size", "*", "self", ".", "map_scale", "\n", "\n", "# Agent height for pointcloud tranforms", "\n", "", "self", ".", "camera_height", "=", "self", ".", "_sim", ".", "habitat_config", ".", "DEPTH_SENSOR", ".", "POSITION", "[", "1", "]", "\n", "\n", "# Compute intrinsic matrix", "\n", "depth_H", "=", "self", ".", "_sim", ".", "habitat_config", ".", "DEPTH_SENSOR", ".", "HEIGHT", "\n", "depth_W", "=", "self", ".", "_sim", ".", "habitat_config", ".", "DEPTH_SENSOR", ".", "WIDTH", "\n", "hfov", "=", "float", "(", "self", ".", "_sim", ".", "habitat_config", ".", "DEPTH_SENSOR", ".", "HFOV", ")", "*", "np", ".", "pi", "/", "180", "\n", "vfov", "=", "2", "*", "np", ".", "arctan", "(", "(", "depth_H", "/", "depth_W", ")", "*", "np", ".", "tan", "(", "hfov", "/", "2.0", ")", ")", "\n", "self", ".", "intrinsic_matrix", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "1", "/", "np", ".", "tan", "(", "hfov", "/", "2.0", ")", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "1", "/", "np", ".", "tan", "(", "vfov", "/", "2.0", ")", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "1", ",", "0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0", ",", "1", "]", ",", "\n", "]", "\n", ")", "\n", "self", ".", "inverse_intrinsic_matrix", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "intrinsic_matrix", ")", "\n", "\n", "# Height thresholds for obstacles", "\n", "self", ".", "height_thresh", "=", "self", ".", "config", ".", "HEIGHT_THRESH", "\n", "\n", "# Depth processing", "\n", "self", ".", "min_depth", "=", "float", "(", "self", ".", "_sim", ".", "habitat_config", ".", "DEPTH_SENSOR", ".", "MIN_DEPTH", ")", "\n", "self", ".", "max_depth", "=", "float", "(", "self", ".", "_sim", ".", "habitat_config", ".", "DEPTH_SENSOR", ".", "MAX_DEPTH", ")", "\n", "\n", "# Pre-compute a grid of locations for depth projection", "\n", "W", "=", "self", ".", "_sim", ".", "habitat_config", ".", "DEPTH_SENSOR", ".", "WIDTH", "\n", "H", "=", "self", ".", "_sim", ".", "habitat_config", ".", "DEPTH_SENSOR", ".", "HEIGHT", "\n", "self", ".", "proj_xs", ",", "self", ".", "proj_ys", "=", "np", ".", "meshgrid", "(", "\n", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "W", ")", ",", "np", ".", "linspace", "(", "1", ",", "-", "1", ",", "H", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoWallMap._get_uuid": [[589, 591], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "\"ego_wall_map_gt\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoWallMap._get_sensor_type": [[592, 594], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "COLOR", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoWallMap._get_observation_space": [[595, 598], ["gym.spaces.Box"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "sensor_shape", "=", "(", "self", ".", "config", ".", "MAP_SIZE", ",", "self", ".", "config", ".", "MAP_SIZE", ",", "2", ")", "\n", "return", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "sensor_shape", ",", "dtype", "=", "np", ".", "uint8", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoWallMap.convert_to_pointcloud": [[599, 635], ["numpy.copy().reshape", "numpy.copy().reshape", "depth_float.reshape.reshape.reshape", "numpy.vstack", "depth.astype", "numpy.matmul", "numpy.copy", "numpy.copy", "numpy.ones"], "methods", ["None"], ["", "def", "convert_to_pointcloud", "(", "self", ",", "depth", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            depth = (H, W, 1) numpy array\n\n        Returns:\n            xyz_camera = (N, 3) numpy array for (X, Y, Z) in egocentric world coordinates\n        \"\"\"", "\n", "\n", "depth_float", "=", "depth", ".", "astype", "(", "np", ".", "float32", ")", "[", "...", ",", "0", "]", "\n", "\n", "# =========== Convert to camera coordinates ============", "\n", "W", "=", "depth", ".", "shape", "[", "1", "]", "\n", "xs", "=", "np", ".", "copy", "(", "self", ".", "proj_xs", ")", ".", "reshape", "(", "-", "1", ")", "\n", "ys", "=", "np", ".", "copy", "(", "self", ".", "proj_ys", ")", ".", "reshape", "(", "-", "1", ")", "\n", "depth_float", "=", "depth_float", ".", "reshape", "(", "-", "1", ")", "\n", "# Filter out invalid depths", "\n", "valid_depths", "=", "(", "depth_float", "!=", "0.0", ")", "&", "(", "depth_float", "<=", "self", ".", "max_forward_range", ")", "\n", "xs", "=", "xs", "[", "valid_depths", "]", "\n", "ys", "=", "ys", "[", "valid_depths", "]", "\n", "depth_float", "=", "depth_float", "[", "valid_depths", "]", "\n", "# Unproject", "\n", "# negate depth as the camera looks along -Z", "\n", "xys", "=", "np", ".", "vstack", "(", "\n", "(", "\n", "xs", "*", "depth_float", ",", "\n", "ys", "*", "depth_float", ",", "\n", "-", "depth_float", ",", "\n", "np", ".", "ones", "(", "depth_float", ".", "shape", ")", ",", "\n", ")", "\n", ")", "\n", "inv_K", "=", "self", ".", "inverse_intrinsic_matrix", "\n", "xyz_camera", "=", "np", ".", "matmul", "(", "inv_K", ",", "xys", ")", ".", "T", "# XYZ in the camera coordinate system", "\n", "xyz_camera", "=", "xyz_camera", "[", ":", ",", ":", "3", "]", "/", "xyz_camera", "[", ":", ",", "3", "]", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "return", "xyz_camera", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoWallMap.safe_assign": [[636, 644], ["numpy.logical_and", "numpy.logical_and", "numpy.logical_and"], "methods", ["None"], ["", "def", "safe_assign", "(", "self", ",", "im_map", ",", "x_idx", ",", "y_idx", ",", "value", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "im_map", "[", "x_idx", ",", "y_idx", "]", "=", "value", "\n", "", "except", "IndexError", ":", "\n", "            ", "valid_idx1", "=", "np", ".", "logical_and", "(", "x_idx", ">=", "0", ",", "x_idx", "<", "im_map", ".", "shape", "[", "0", "]", ")", "\n", "valid_idx2", "=", "np", ".", "logical_and", "(", "y_idx", ">=", "0", ",", "y_idx", "<", "im_map", ".", "shape", "[", "1", "]", ")", "\n", "valid_idx", "=", "np", ".", "logical_and", "(", "valid_idx1", ",", "valid_idx2", ")", "\n", "im_map", "[", "x_idx", "[", "valid_idx", "]", ",", "y_idx", "[", "valid_idx", "]", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoWallMap._get_depth_projection": [[645, 695], ["sensors.GTEgoWallMap.convert_to_pointcloud", "grid_x[].astype", "grid_y[].astype", "numpy.zeros", "numpy.logical_and", "sensors.GTEgoWallMap.safe_assign", "numpy.ones", "cv2.dilate", "numpy.ones", "cv2.morphologyEx", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoWallMap.convert_to_pointcloud", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoWallMap.safe_assign"], ["", "", "def", "_get_depth_projection", "(", "self", ",", "sim_depth", ")", ":", "\n", "        ", "\"\"\"\n        Project pixels visible in depth-map to ground-plane\n        \"\"\"", "\n", "\n", "if", "self", ".", "_sim", ".", "habitat_config", ".", "DEPTH_SENSOR", ".", "NORMALIZE_DEPTH", ":", "\n", "            ", "depth", "=", "sim_depth", "*", "(", "self", ".", "max_depth", "-", "self", ".", "min_depth", ")", "+", "self", ".", "min_depth", "\n", "", "else", ":", "\n", "            ", "depth", "=", "sim_depth", "\n", "\n", "", "XYZ_ego", "=", "self", ".", "convert_to_pointcloud", "(", "depth", ")", "\n", "\n", "# Adding agent's height to the pointcloud", "\n", "XYZ_ego", "[", ":", ",", "1", "]", "+=", "self", ".", "camera_height", "\n", "\n", "# Convert to grid coordinate system", "\n", "V", "=", "self", ".", "map_size", "\n", "Vby2", "=", "V", "//", "2", "\n", "\n", "points", "=", "XYZ_ego", "\n", "\n", "grid_x", "=", "(", "points", "[", ":", ",", "0", "]", "/", "self", ".", "map_scale", ")", "+", "Vby2", "\n", "grid_y", "=", "(", "points", "[", ":", ",", "2", "]", "/", "self", ".", "map_scale", ")", "+", "V", "\n", "\n", "# Filter out invalid points", "\n", "valid_idx", "=", "(", "\n", "(", "grid_x", ">=", "0", ")", "&", "(", "grid_x", "<=", "V", "-", "1", ")", "&", "(", "grid_y", ">=", "0", ")", "&", "(", "grid_y", "<=", "V", "-", "1", ")", "\n", ")", "\n", "points", "=", "points", "[", "valid_idx", ",", ":", "]", "\n", "grid_x", "=", "grid_x", "[", "valid_idx", "]", ".", "astype", "(", "int", ")", "\n", "grid_y", "=", "grid_y", "[", "valid_idx", "]", ".", "astype", "(", "int", ")", "\n", "\n", "# Create empty maps for the wall obstacle channel", "\n", "obstacle_mat", "=", "np", ".", "zeros", "(", "(", "self", ".", "map_size", ",", "self", ".", "map_size", ")", ",", "np", ".", "uint8", ")", "\n", "\n", "# Compute wall obstacle locations", "\n", "high_filter_idx", "=", "points", "[", ":", ",", "1", "]", "<", "self", ".", "height_thresh", "[", "1", "]", "\n", "low_filter_idx", "=", "points", "[", ":", ",", "1", "]", ">", "self", ".", "height_thresh", "[", "0", "]", "\n", "obstacle_idx", "=", "np", ".", "logical_and", "(", "low_filter_idx", ",", "high_filter_idx", ")", "\n", "\n", "self", ".", "safe_assign", "(", "obstacle_mat", ",", "grid_y", "[", "obstacle_idx", "]", ",", "grid_x", "[", "obstacle_idx", "]", ",", "1", ")", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "obstacle_mat", "=", "cv2", ".", "dilate", "(", "obstacle_mat", ",", "kernel", ",", "iterations", "=", "1", ")", "\n", "\n", "# Smoothen the maps", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "\n", "obstacle_mat", "=", "cv2", ".", "morphologyEx", "(", "obstacle_mat", ",", "cv2", ".", "MORPH_CLOSE", ",", "kernel", ")", "\n", "\n", "return", "np", ".", "stack", "(", "[", "obstacle_mat", ",", "obstacle_mat", "]", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoWallMap.get_observation": [[696, 701], ["einops.asnumpy", "sensors.GTEgoWallMap._get_depth_projection"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoWallMap._get_depth_projection"], ["", "def", "get_observation", "(", "self", ",", "*", "args", ":", "Any", ",", "observations", ",", "episode", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "sim_depth", "=", "asnumpy", "(", "observations", "[", "\"depth\"", "]", ")", "\n", "ego_wall_map_gt", "=", "self", ".", "_get_depth_projection", "(", "sim_depth", ")", "\n", "\n", "return", "ego_wall_map_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMapAnticipated.__init__": [[715, 736], ["sensors.GTEgoMap.__init__", "hasattr", "int", "int", "json.load", "open"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["def", "__init__", "(", "self", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "sim", ",", "config", "=", "config", ")", "\n", "\n", "self", ".", "_num_samples", "=", "config", ".", "NUM_TOPDOWN_MAP_SAMPLE_POINTS", "\n", "self", ".", "_coordinate_min", "=", "maps", ".", "COORDINATE_MIN", "\n", "self", ".", "_coordinate_max", "=", "maps", ".", "COORDINATE_MAX", "\n", "resolution", "=", "(", "self", ".", "_coordinate_max", "-", "self", ".", "_coordinate_min", ")", "/", "self", ".", "map_scale", "\n", "self", ".", "_map_resolution", "=", "(", "int", "(", "resolution", ")", ",", "int", "(", "resolution", ")", ")", "\n", "self", ".", "current_episode_id", "=", "None", "\n", "if", "hasattr", "(", "config", ",", "\"REGION_GROWING_ITERATIONS\"", ")", ":", "\n", "            ", "self", ".", "_region_growing_iterations", "=", "config", ".", "REGION_GROWING_ITERATIONS", "\n", "", "else", ":", "\n", "            ", "self", ".", "_region_growing_iterations", "=", "2", "\n", "", "if", "self", ".", "config", ".", "GT_TYPE", "==", "\"wall_occupancy\"", ":", "\n", "            ", "maps_info_path", "=", "self", ".", "config", ".", "ALL_MAPS_INFO_PATH", "\n", "self", ".", "_all_maps_info", "=", "json", ".", "load", "(", "open", "(", "maps_info_path", ",", "\"r\"", ")", ")", "\n", "self", ".", "current_wall_episode_id", "=", "None", "\n", "self", ".", "_scene_maps_info", "=", "None", "\n", "self", ".", "_scene_maps", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMapAnticipated._get_uuid": [[737, 739], ["None"], "methods", ["None"], ["", "", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "\"ego_map_gt_anticipated\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMapAnticipated.get_original_map": [[740, 745], ["habitat.utils.visualizations.maps.get_topdown_map"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.get_topdown_map"], ["", "def", "get_original_map", "(", "self", ")", ":", "\n", "        ", "top_down_map", "=", "maps", ".", "get_topdown_map", "(", "\n", "self", ".", "_sim", ",", "self", ".", "_map_resolution", ",", "self", ".", "_num_samples", ",", "False", ",", "\n", ")", "\n", "return", "top_down_map", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMapAnticipated._get_wall_occupancy": [[746, 861], ["sensors.GTEgoMapAnticipated._sim.get_agent_state", "enumerate", "habitat_extensions.geometry_utils.quaternion_xyzw_to_wxyz", "habitat_extensions.geometry_utils.compute_heading_from_quaternion", "torch.Tensor", "habitat_extensions.geometry_utils.compute_heading_from_quaternion", "torch.Tensor", "int", "int", "int", "numpy.pad", "rel_pose[].item", "math.degrees", "cv2.getRotationMatrix2D", "cv2.warpAffine", "numpy.stack.astype", "int", "numpy.stack", "occant_utils.common.subtract_pose", "int", "int", "int", "int", "sensors.GTEgoMapAnticipated._load_transformed_wall_maps", "abs", "abs", "episode.scene_id.split", "rel_pose[].item", "rel_pose[].item"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_xyzw_to_wxyz", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.compute_heading_from_quaternion", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.compute_heading_from_quaternion", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.subtract_pose", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMapAnticipated._load_transformed_wall_maps"], ["", "def", "_get_wall_occupancy", "(", "self", ",", "episode", ",", "agent_state", ")", ":", "\n", "        ", "episode_id", "=", "(", "episode", ".", "episode_id", ",", "episode", ".", "scene_id", ")", "\n", "# Load the episode specific maps only if the episode has changed", "\n", "if", "self", ".", "current_wall_episode_id", "!=", "episode_id", ":", "\n", "            ", "self", ".", "current_wall_episode_id", "=", "episode_id", "\n", "if", "self", ".", "config", ".", "GT_TYPE", "==", "\"wall_occupancy\"", ":", "\n", "                ", "scene_id", "=", "episode", ".", "scene_id", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "self", ".", "_scene_maps_info", "=", "self", ".", "_all_maps_info", "[", "scene_id", "]", "\n", "# Load the maps per floor", "\n", "seen_maps", ",", "wall_maps", "=", "self", ".", "_load_transformed_wall_maps", "(", "\n", "self", ".", "_scene_maps_info", ",", "episode", ",", "\n", ")", "\n", "self", ".", "_scene_maps", "=", "{", "}", "\n", "self", ".", "_scene_maps", "[", "\"seen_maps\"", "]", "=", "seen_maps", "\n", "self", ".", "_scene_maps", "[", "\"wall_maps\"", "]", "=", "wall_maps", "\n", "\n", "", "", "agent_state", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", "\n", "current_height", "=", "agent_state", ".", "position", "[", "1", "]", "\n", "best_floor_idx", "=", "None", "\n", "best_floor_dist", "=", "math", ".", "inf", "\n", "for", "floor_idx", ",", "floor_data", "in", "enumerate", "(", "self", ".", "_scene_maps_info", ")", ":", "\n", "            ", "floor_height", "=", "floor_data", "[", "\"floor_height\"", "]", "\n", "if", "abs", "(", "current_height", "-", "floor_height", ")", "<", "best_floor_dist", ":", "\n", "                ", "best_floor_idx", "=", "floor_idx", "\n", "best_floor_dist", "=", "abs", "(", "current_height", "-", "floor_height", ")", "\n", "", "", "assert", "best_floor_idx", "is", "not", "None", "\n", "current_wall_map", "=", "self", ".", "_scene_maps", "[", "\"wall_maps\"", "]", "[", "best_floor_idx", "]", "\n", "# Take only channel 0 as both channels have save values", "\n", "current_wall_map", "=", "current_wall_map", "[", "...", ",", "0", "]", "\n", "\n", "# ========= Get local egocentric crop of the current wall map =========", "\n", "# Compute relative pose of agent from start location", "\n", "start_position", "=", "episode", ".", "start_position", "# (X, Y, Z)", "\n", "start_rotation", "=", "quaternion_xyzw_to_wxyz", "(", "episode", ".", "start_rotation", ")", "\n", "start_heading", "=", "compute_heading_from_quaternion", "(", "start_rotation", ")", "\n", "start_pose", "=", "torch", ".", "Tensor", "(", "\n", "[", "[", "-", "start_position", "[", "2", "]", ",", "start_position", "[", "0", "]", ",", "start_heading", "]", "]", "\n", ")", "\n", "agent_position", "=", "agent_state", ".", "position", "\n", "agent_heading", "=", "compute_heading_from_quaternion", "(", "agent_state", ".", "rotation", ")", "\n", "agent_pose", "=", "torch", ".", "Tensor", "(", "\n", "[", "[", "-", "agent_position", "[", "2", "]", ",", "agent_position", "[", "0", "]", ",", "agent_heading", "]", "]", "\n", ")", "\n", "rel_pose", "=", "subtract_pose", "(", "start_pose", ",", "agent_pose", ")", "[", "0", "]", "# (3,)", "\n", "\n", "# Compute agent position on the map image", "\n", "map_scale", "=", "self", ".", "config", ".", "MAP_SCALE", "\n", "\n", "H", ",", "W", "=", "current_wall_map", ".", "shape", "[", ":", "2", "]", "\n", "Hby2", ",", "Wby2", "=", "(", "H", "+", "1", ")", "//", "2", ",", "(", "W", "+", "1", ")", "//", "2", "\n", "agent_map_x", "=", "int", "(", "rel_pose", "[", "1", "]", ".", "item", "(", ")", "/", "map_scale", "+", "Wby2", ")", "\n", "agent_map_y", "=", "int", "(", "-", "rel_pose", "[", "0", "]", ".", "item", "(", ")", "/", "map_scale", "+", "Hby2", ")", "\n", "\n", "# Crop the region around the agent.", "\n", "mrange", "=", "int", "(", "1.5", "*", "self", ".", "map_size", ")", "\n", "\n", "# Add extra padding if map range is coordinates go out of bounds", "\n", "y_start", "=", "agent_map_y", "-", "mrange", "\n", "y_end", "=", "agent_map_y", "+", "mrange", "\n", "x_start", "=", "agent_map_x", "-", "mrange", "\n", "x_end", "=", "agent_map_x", "+", "mrange", "\n", "\n", "x_l_pad", ",", "y_l_pad", ",", "x_r_pad", ",", "y_r_pad", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "H", ",", "W", "=", "current_wall_map", ".", "shape", "\n", "if", "x_start", "<", "0", ":", "\n", "            ", "x_l_pad", "=", "int", "(", "-", "x_start", ")", "\n", "x_start", "+=", "x_l_pad", "\n", "x_end", "+=", "x_l_pad", "\n", "", "if", "x_end", ">=", "W", ":", "\n", "            ", "x_r_pad", "=", "int", "(", "x_end", "-", "W", "+", "1", ")", "\n", "", "if", "y_start", "<", "0", ":", "\n", "            ", "y_l_pad", "=", "int", "(", "-", "y_start", ")", "\n", "y_start", "+=", "y_l_pad", "\n", "y_end", "+=", "y_l_pad", "\n", "", "if", "y_end", ">=", "H", ":", "\n", "            ", "y_r_pad", "=", "int", "(", "y_end", "-", "H", "+", "1", ")", "\n", "\n", "", "ego_map", "=", "np", ".", "pad", "(", "current_wall_map", ",", "(", "(", "y_l_pad", ",", "y_r_pad", ")", ",", "(", "x_l_pad", ",", "x_r_pad", ")", ")", ")", "\n", "ego_map", "=", "ego_map", "[", "y_start", ":", "(", "y_end", "+", "1", ")", ",", "x_start", ":", "(", "x_end", "+", "1", ")", "]", "\n", "\n", "agent_heading", "=", "rel_pose", "[", "2", "]", ".", "item", "(", ")", "\n", "agent_heading", "=", "math", ".", "degrees", "(", "agent_heading", ")", "\n", "\n", "half_size", "=", "ego_map", ".", "shape", "[", "0", "]", "//", "2", "\n", "center", "=", "(", "half_size", ",", "half_size", ")", "\n", "M", "=", "cv2", ".", "getRotationMatrix2D", "(", "center", ",", "agent_heading", ",", "scale", "=", "1.0", ")", "\n", "\n", "ego_map", "=", "cv2", ".", "warpAffine", "(", "\n", "ego_map", ",", "\n", "M", ",", "\n", "(", "ego_map", ".", "shape", "[", "1", "]", ",", "ego_map", ".", "shape", "[", "0", "]", ")", ",", "\n", "flags", "=", "cv2", ".", "INTER_NEAREST", ",", "\n", "borderMode", "=", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "borderValue", "=", "(", "1", ",", ")", ",", "\n", ")", "\n", "\n", "ego_map", "=", "ego_map", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mrange", "=", "int", "(", "self", ".", "map_size", ")", "\n", "ego_map", "=", "ego_map", "[", "\n", "(", "half_size", "-", "mrange", ")", ":", "(", "half_size", "+", "mrange", ")", ",", "\n", "(", "half_size", "-", "mrange", ")", ":", "(", "half_size", "+", "mrange", ")", ",", "\n", "]", "\n", "\n", "# Get forward region infront of the agent", "\n", "half_size", "=", "ego_map", ".", "shape", "[", "0", "]", "//", "2", "\n", "quarter_size", "=", "ego_map", ".", "shape", "[", "0", "]", "//", "4", "\n", "center", "=", "(", "half_size", ",", "half_size", ")", "\n", "\n", "ego_map", "=", "ego_map", "[", "0", ":", "half_size", ",", "quarter_size", ":", "(", "quarter_size", "+", "half_size", ")", "]", "\n", "\n", "# Append explored status in the 2nd channel", "\n", "ego_map", "=", "np", ".", "stack", "(", "[", "ego_map", ",", "ego_map", "]", ",", "axis", "=", "2", ")", "\n", "\n", "return", "ego_map", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMapAnticipated._load_transformed_wall_maps": [[862, 905], ["habitat_extensions.geometry_utils.quaternion_xyzw_to_wxyz", "habitat_extensions.geometry_utils.compute_heading_from_quaternion", "numpy.load", "numpy.load", "math.sqrt", "torch.Tensor", "einops.rearrange", "einops.rearrange", "occant_utils.common.spatial_transform_map", "occant_utils.common.spatial_transform_map", "einops.asnumpy", "einops.rearrange", "einops.asnumpy", "einops.rearrange", "seen_maps.append", "wall_maps.append", "math.atan2", "torch.Tensor", "torch.Tensor", "math.cos", "math.sin"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_xyzw_to_wxyz", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.compute_heading_from_quaternion", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.spatial_transform_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.spatial_transform_map"], ["", "def", "_load_transformed_wall_maps", "(", "self", ",", "scene_map_info", ",", "episode", ")", ":", "\n", "        ", "seen_maps", "=", "[", "]", "\n", "wall_maps", "=", "[", "]", "\n", "start_position", "=", "episode", ".", "start_position", "# (X, Y, Z)", "\n", "start_rotation", "=", "quaternion_xyzw_to_wxyz", "(", "episode", ".", "start_rotation", ")", "\n", "start_heading", "=", "compute_heading_from_quaternion", "(", "start_rotation", ")", "\n", "for", "floor_data", "in", "scene_map_info", ":", "\n", "            ", "seen_map", "=", "np", ".", "load", "(", "floor_data", "[", "\"seen_map_path\"", "]", ")", "\n", "wall_map", "=", "np", ".", "load", "(", "floor_data", "[", "\"wall_map_path\"", "]", ")", "\n", "# ===== Transform the maps relative to the episode start pose =====", "\n", "map_view_position", "=", "floor_data", "[", "\"world_position\"", "]", "\n", "map_view_heading", "=", "floor_data", "[", "\"world_heading\"", "]", "\n", "# Originally, Z is downward and X is rightward.", "\n", "# Convert it to X upward and Y rightward", "\n", "x_map", ",", "y_map", "=", "-", "map_view_position", "[", "2", "]", ",", "map_view_position", "[", "0", "]", "\n", "theta_map", "=", "map_view_heading", "\n", "x_start", ",", "y_start", "=", "-", "start_position", "[", "2", "]", ",", "start_position", "[", "0", "]", "\n", "theta_start", "=", "start_heading", "\n", "# Compute relative coordinates", "\n", "r_rel", "=", "math", ".", "sqrt", "(", "(", "x_start", "-", "x_map", ")", "**", "2", "+", "(", "y_start", "-", "y_map", ")", "**", "2", ")", "\n", "phi_rel", "=", "math", ".", "atan2", "(", "y_start", "-", "y_map", ",", "x_start", "-", "x_map", ")", "-", "theta_map", "\n", "x_rel", "=", "r_rel", "*", "math", ".", "cos", "(", "phi_rel", ")", "/", "self", ".", "config", ".", "MAP_SCALE", "\n", "y_rel", "=", "r_rel", "*", "math", ".", "sin", "(", "phi_rel", ")", "/", "self", ".", "config", ".", "MAP_SCALE", "\n", "theta_rel", "=", "theta_start", "-", "theta_map", "\n", "# Convert these to image coordinates with X being rightward and Y", "\n", "# being downward", "\n", "x_img_rel", "=", "y_rel", "\n", "y_img_rel", "=", "-", "x_rel", "\n", "theta_img_rel", "=", "theta_rel", "\n", "x_trans", "=", "torch", ".", "Tensor", "(", "[", "[", "x_img_rel", ",", "y_img_rel", ",", "theta_img_rel", "]", "]", ")", "\n", "# Perform the transformations", "\n", "p_seen_map", "=", "rearrange", "(", "torch", ".", "Tensor", "(", "seen_map", ")", ",", "\"h w c -> () c h w\"", ")", "\n", "p_wall_map", "=", "rearrange", "(", "torch", ".", "Tensor", "(", "wall_map", ")", ",", "\"h w c -> () c h w\"", ")", "\n", "p_seen_map_trans", "=", "spatial_transform_map", "(", "p_seen_map", ",", "x_trans", ")", "\n", "p_wall_map_trans", "=", "spatial_transform_map", "(", "p_wall_map", ",", "x_trans", ")", "\n", "seen_map_trans", "=", "asnumpy", "(", "p_seen_map_trans", ")", "\n", "seen_map_trans", "=", "rearrange", "(", "seen_map_trans", ",", "\"() c h w -> h w c\"", ")", "\n", "wall_map_trans", "=", "asnumpy", "(", "p_wall_map_trans", ")", "\n", "wall_map_trans", "=", "rearrange", "(", "wall_map_trans", ",", "\"() c h w -> h w c\"", ")", "\n", "seen_maps", ".", "append", "(", "seen_map_trans", ")", "\n", "wall_maps", ".", "append", "(", "wall_map_trans", ")", "\n", "\n", "", "return", "seen_maps", ",", "wall_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMapAnticipated._get_mesh_occupancy": [[906, 978], ["habitat.utils.visualizations.maps.to_grid", "int", "math.degrees", "cv2.getRotationMatrix2D", "int", "numpy.flip", "numpy.stack", "numpy.zeros", "habitat_extensions.geometry_utils.compute_heading_from_quaternion", "cv2.warpAffine().astype", "sensors.GTEgoMapAnticipated.get_original_map", "numpy.ones_like", "cv2.warpAffine"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.to_grid", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.compute_heading_from_quaternion", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMapAnticipated.get_original_map"], ["", "def", "_get_mesh_occupancy", "(", "self", ",", "episode", ",", "agent_state", ")", ":", "\n", "        ", "episode_id", "=", "(", "episode", ".", "episode_id", ",", "episode", ".", "scene_id", ")", "\n", "if", "self", ".", "current_episode_id", "!=", "episode_id", ":", "\n", "            ", "self", ".", "current_episode_id", "=", "episode_id", "\n", "# Transpose to make x rightward and y downward", "\n", "self", ".", "_top_down_map", "=", "self", ".", "get_original_map", "(", ")", ".", "T", "\n", "\n", "", "agent_position", "=", "agent_state", ".", "position", "\n", "agent_rotation", "=", "agent_state", ".", "rotation", "\n", "a_x", ",", "a_y", "=", "maps", ".", "to_grid", "(", "\n", "agent_position", "[", "0", "]", ",", "\n", "agent_position", "[", "2", "]", ",", "\n", "self", ".", "_coordinate_min", ",", "\n", "self", ".", "_coordinate_max", ",", "\n", "self", ".", "_map_resolution", ",", "\n", ")", "\n", "\n", "# Crop region centered around the agent", "\n", "mrange", "=", "int", "(", "self", ".", "map_size", "*", "1.5", ")", "\n", "ego_map", "=", "self", ".", "_top_down_map", "[", "\n", "(", "a_y", "-", "mrange", ")", ":", "(", "a_y", "+", "mrange", ")", ",", "(", "a_x", "-", "mrange", ")", ":", "(", "a_x", "+", "mrange", ")", "\n", "]", "\n", "if", "ego_map", ".", "shape", "[", "0", "]", "==", "0", "or", "ego_map", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "            ", "ego_map", "=", "np", ".", "zeros", "(", "(", "2", "*", "mrange", "+", "1", ",", "2", "*", "mrange", "+", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# Rotate to get egocentric map", "\n", "# Negative since the value returned is clockwise rotation about Y,", "\n", "# but we need anti-clockwise rotation", "\n", "", "agent_heading", "=", "-", "compute_heading_from_quaternion", "(", "agent_rotation", ")", "\n", "agent_heading", "=", "math", ".", "degrees", "(", "agent_heading", ")", "\n", "\n", "half_size", "=", "ego_map", ".", "shape", "[", "0", "]", "//", "2", "\n", "center", "=", "(", "half_size", ",", "half_size", ")", "\n", "M", "=", "cv2", ".", "getRotationMatrix2D", "(", "center", ",", "agent_heading", ",", "scale", "=", "1.0", ")", "\n", "\n", "ego_map", "=", "(", "\n", "cv2", ".", "warpAffine", "(", "\n", "ego_map", "*", "255", ",", "\n", "M", ",", "\n", "(", "ego_map", ".", "shape", "[", "1", "]", ",", "ego_map", ".", "shape", "[", "0", "]", ")", ",", "\n", "flags", "=", "cv2", ".", "INTER_LINEAR", ",", "\n", "borderMode", "=", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "borderValue", "=", "(", "1", ",", ")", ",", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "/", "255.0", "\n", ")", "\n", "\n", "mrange", "=", "int", "(", "self", ".", "map_size", ")", "\n", "ego_map", "=", "ego_map", "[", "\n", "(", "half_size", "-", "mrange", ")", ":", "(", "half_size", "+", "mrange", ")", ",", "\n", "(", "half_size", "-", "mrange", ")", ":", "(", "half_size", "+", "mrange", ")", ",", "\n", "]", "\n", "ego_map", "[", "ego_map", ">", "0.5", "]", "=", "1.0", "\n", "ego_map", "[", "ego_map", "<=", "0.5", "]", "=", "0.0", "\n", "\n", "# This map is currently 0 if occupied and 1 if unoccupied. Flip it.", "\n", "ego_map", "=", "1.0", "-", "ego_map", "\n", "\n", "# Flip the x axis because to_grid() flips the conventions", "\n", "ego_map", "=", "np", ".", "flip", "(", "ego_map", ",", "axis", "=", "1", ")", "\n", "\n", "# Get forward region infront of the agent", "\n", "half_size", "=", "ego_map", ".", "shape", "[", "0", "]", "//", "2", "\n", "quarter_size", "=", "ego_map", ".", "shape", "[", "0", "]", "//", "4", "\n", "center", "=", "(", "half_size", ",", "half_size", ")", "\n", "\n", "ego_map", "=", "ego_map", "[", "0", ":", "half_size", ",", "quarter_size", ":", "(", "quarter_size", "+", "half_size", ")", "]", "\n", "\n", "# Append explored status in the 2nd channel", "\n", "ego_map", "=", "np", ".", "stack", "(", "[", "ego_map", ",", "np", ".", "ones_like", "(", "ego_map", ")", "]", ",", "axis", "=", "2", ")", "\n", "\n", "return", "ego_map", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMapAnticipated._get_grown_depth_projection": [[979, 986], ["sensors.GTEgoMapAnticipated._get_depth_projection", "sensors.GTEgoMapAnticipated._get_mesh_occupancy", "occant_utils.common.grow_projected_map"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoWallMap._get_depth_projection", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMapAnticipated._get_mesh_occupancy", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.grow_projected_map"], ["", "def", "_get_grown_depth_projection", "(", "self", ",", "episode", ",", "agent_state", ",", "sim_depth", ")", ":", "\n", "        ", "projected_occupancy", "=", "self", ".", "_get_depth_projection", "(", "sim_depth", ")", "\n", "mesh_occupancy", "=", "self", ".", "_get_mesh_occupancy", "(", "episode", ",", "agent_state", ")", "\n", "grown_map", "=", "grow_projected_map", "(", "\n", "projected_occupancy", ",", "mesh_occupancy", ",", "self", ".", "_region_growing_iterations", ",", "\n", ")", "\n", "return", "grown_map", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMapAnticipated.get_observation": [[987, 1031], ["sensors.GTEgoMapAnticipated._sim.get_agent_state", "sensors.GTEgoMapAnticipated._get_grown_depth_projection", "sensors.GTEgoMapAnticipated._get_mesh_occupancy", "sensors.GTEgoMapAnticipated._get_mesh_occupancy", "sensors.GTEgoMapAnticipated._get_wall_occupancy", "numpy.zeros_like", "numpy.array", "sensors.GTEgoMapAnticipated._get_depth_projection", "numpy.maximum", "numpy.ones", "cv2.dilate().astype", "numpy.radians", "habitat.utils.visualizations.fog_of_war.reveal_fog_of_war", "cv2.dilate", "cv2.dilate().astype.astype"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMapAnticipated._get_grown_depth_projection", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMapAnticipated._get_mesh_occupancy", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMapAnticipated._get_mesh_occupancy", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoMapAnticipated._get_wall_occupancy", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.GTEgoWallMap._get_depth_projection"], ["", "def", "get_observation", "(", "self", ",", "*", "args", ":", "Any", ",", "observations", ",", "episode", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "agent_state", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", "\n", "if", "self", ".", "config", ".", "GT_TYPE", "==", "\"grown_occupancy\"", ":", "\n", "            ", "sim_depth", "=", "observations", "[", "\"depth\"", "]", "\n", "ego_map_gt_anticipated", "=", "self", ".", "_get_grown_depth_projection", "(", "\n", "episode", ",", "agent_state", ",", "sim_depth", ",", "\n", ")", "\n", "", "elif", "self", ".", "config", ".", "GT_TYPE", "==", "\"full_occupancy\"", ":", "\n", "            ", "ego_map_gt_anticipated", "=", "self", ".", "_get_mesh_occupancy", "(", "episode", ",", "agent_state", ",", ")", "\n", "", "elif", "self", ".", "config", ".", "GT_TYPE", "==", "\"wall_occupancy\"", ":", "\n", "            ", "sim_depth", "=", "observations", "[", "\"depth\"", "]", "\n", "full_occupancy", "=", "self", ".", "_get_mesh_occupancy", "(", "episode", ",", "agent_state", ",", ")", "\n", "wall_occupancy", "=", "self", ".", "_get_wall_occupancy", "(", "episode", ",", "agent_state", ",", ")", "\n", "\n", "# Invalid points are zeros", "\n", "wall_top_down", "=", "(", "(", "1", "-", "wall_occupancy", "[", "...", ",", "0", "]", ")", ".", "T", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "current_mask", "=", "np", ".", "zeros_like", "(", "wall_top_down", ")", "\n", "current_point", "=", "np", ".", "array", "(", "\n", "[", "(", "wall_top_down", ".", "shape", "[", "0", "]", "+", "1", ")", "//", "2", ",", "(", "wall_top_down", ".", "shape", "[", "1", "]", "-", "1", ")", ",", "]", "\n", ")", "\n", "current_angle", "=", "-", "np", ".", "radians", "(", "90", ")", "\n", "\n", "current_mask", "=", "fog_of_war", ".", "reveal_fog_of_war", "(", "\n", "wall_top_down", ",", "\n", "current_mask", ",", "\n", "current_point", ",", "\n", "current_angle", ",", "\n", "self", ".", "config", ".", "WALL_FOV", ",", "\n", "max_line_len", "=", "100.0", ",", "\n", ")", ".", "T", "\n", "\n", "# Add the GT ego map to this", "\n", "ego_map_gt", "=", "self", ".", "_get_depth_projection", "(", "sim_depth", ")", "\n", "current_mask", "=", "np", ".", "maximum", "(", "current_mask", ",", "ego_map_gt", "[", "...", ",", "1", "]", ")", "\n", "\n", "dilation_mask", "=", "np", ".", "ones", "(", "(", "5", ",", "5", ")", ")", "\n", "\n", "current_mask", "=", "cv2", ".", "dilate", "(", "\n", "current_mask", ".", "astype", "(", "np", ".", "float32", ")", ",", "dilation_mask", ",", "iterations", "=", "2", ",", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "ego_map_gt_anticipated", "=", "full_occupancy", "*", "current_mask", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "", "return", "ego_map_gt_anticipated", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.CollisionSensor.__init__": [[1035, 1038], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.CollisionSensor._get_uuid": [[1039, 1041], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "\"collision_sensor\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.CollisionSensor._get_sensor_type": [[1042, 1044], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "PATH", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.CollisionSensor._get_observation_space": [[1045, 1047], ["gym.spaces.Box"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "low", "=", "0.0", ",", "high", "=", "1.0", ",", "shape", "=", "(", "1", ",", ")", ",", "dtype", "=", "np", ".", "float32", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.CollisionSensor.get_observation": [[1048, 1054], ["numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "get_observation", "(", "self", ",", "*", "args", ":", "Any", ",", "observations", ",", "episode", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_sim", ".", "previous_step_collided", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "1.0", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "0.0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoisyIntegratedPointGoalGPSAndCompassSensor.__init__": [[1079, 1092], ["habitat.tasks.nav.nav.PointGoalSensor.__init__", "habitat_extensions.utils.truncated_normal_noise_distr", "habitat_extensions.utils.truncated_normal_noise_distr"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.utils.truncated_normal_noise_distr", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.utils.truncated_normal_noise_distr"], ["def", "__init__", "(", "self", ",", "*", "args", ":", "Any", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "sim", "=", "sim", ",", "config", "=", "config", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "current_episode_id", "=", "None", "\n", "self", ".", "_estimated_position", "=", "None", "\n", "self", ".", "_estimated_rotation", "=", "None", "\n", "\n", "self", ".", "_fwd_tn_distr", "=", "truncated_normal_noise_distr", "(", "\n", "self", ".", "config", ".", "FORWARD_MEAN", ",", "self", ".", "config", ".", "FORWARD_VARIANCE", ",", "2", "\n", ")", "\n", "\n", "self", ".", "_rot_tn_distr", "=", "truncated_normal_noise_distr", "(", "\n", "self", ".", "config", ".", "ROTATION_MEAN", ",", "self", ".", "config", ".", "ROTATION_VARIANCE", ",", "2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoisyIntegratedPointGoalGPSAndCompassSensor._get_uuid": [[1094, 1096], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "\"noisy_pointgoal_with_gps_compass\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoisyIntegratedPointGoalGPSAndCompassSensor._quat_to_xy_heading": [[1097, 1104], ["numpy.array", "habitat_extensions.geometry_utils.quaternion_rotate_vector", "numpy.array", "habitat.tasks.utils.cartesian_to_polar"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_rotate_vector"], ["", "def", "_quat_to_xy_heading", "(", "self", ",", "quat", ")", ":", "\n", "        ", "direction_vector", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "1", "]", ")", "\n", "\n", "heading_vector", "=", "quaternion_rotate_vector", "(", "quat", ",", "direction_vector", ")", "\n", "\n", "phi", "=", "cartesian_to_polar", "(", "-", "heading_vector", "[", "2", "]", ",", "heading_vector", "[", "0", "]", ")", "[", "1", "]", "\n", "return", "np", ".", "array", "(", "phi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoisyIntegratedPointGoalGPSAndCompassSensor._get_noisy_delta": [[1105, 1132], ["habitat_extensions.geometry_utils.compute_egocentric_delta", "sensors.NoisyIntegratedPointGoalGPSAndCompassSensor._fwd_tn_distr.rvs", "numpy.sign().item", "sensors.NoisyIntegratedPointGoalGPSAndCompassSensor._rot_tn_distr.rvs", "numpy.sign().item", "numpy.sign", "numpy.sign"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.compute_egocentric_delta"], ["", "def", "_get_noisy_delta", "(", "self", ",", "agent_state", ")", ":", "\n", "        ", "current_agent_position", "=", "agent_state", ".", "position", "\n", "current_agent_rotation", "=", "agent_state", ".", "rotation", "\n", "\n", "past_agent_position", "=", "self", ".", "_past_gt_position", "\n", "past_agent_rotation", "=", "self", ".", "_past_gt_rotation", "\n", "\n", "# GT delta", "\n", "delta_xz_gt", "=", "compute_egocentric_delta", "(", "\n", "past_agent_position", ",", "\n", "past_agent_rotation", ",", "\n", "current_agent_position", ",", "\n", "current_agent_rotation", ",", "\n", ")", "\n", "delta_y_gt", "=", "current_agent_position", "[", "1", "]", "-", "past_agent_position", "[", "0", "]", "\n", "\n", "# Add noise to D_rho, D_theta", "\n", "D_rho", ",", "D_phi", ",", "D_theta", "=", "delta_xz_gt", "\n", "D_rho_noisy", "=", "D_rho", "+", "self", ".", "_fwd_tn_distr", ".", "rvs", "(", ")", "*", "np", ".", "sign", "(", "D_rho", ")", ".", "item", "(", ")", "\n", "D_phi_noisy", "=", "D_phi", "\n", "D_theta_noisy", "=", "D_theta", "+", "self", ".", "_rot_tn_distr", ".", "rvs", "(", ")", "*", "np", ".", "sign", "(", "D_theta", ")", ".", "item", "(", ")", "\n", "\n", "# Compute noisy delta", "\n", "delta_xz_noisy", "=", "(", "D_rho_noisy", ",", "D_phi_noisy", ",", "D_theta_noisy", ")", "\n", "delta_y_noisy", "=", "delta_y_gt", "\n", "\n", "return", "delta_xz_noisy", ",", "delta_y_noisy", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoisyIntegratedPointGoalGPSAndCompassSensor._compute_pointgoal": [[1133, 1167], ["habitat_extensions.geometry_utils.quaternion_rotate_vector", "source_rotation.inverse", "habitat.tasks.utils.cartesian_to_polar", "numpy.array", "habitat.tasks.utils.cartesian_to_polar", "numpy.arccos", "numpy.linalg.norm", "numpy.array", "numpy.array", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_rotate_vector"], ["", "def", "_compute_pointgoal", "(", "self", ",", "source_position", ",", "source_rotation", ",", "goal_position", ")", ":", "\n", "# This is updated to invert the sign of phi (changing conventions from", "\n", "# the original pointgoal definition.)", "\n", "        ", "direction_vector", "=", "goal_position", "-", "source_position", "\n", "direction_vector_agent", "=", "quaternion_rotate_vector", "(", "\n", "source_rotation", ".", "inverse", "(", ")", ",", "direction_vector", "\n", ")", "\n", "\n", "if", "self", ".", "_goal_format", "==", "\"POLAR\"", ":", "\n", "            ", "if", "self", ".", "_dimensionality", "==", "2", ":", "\n", "                ", "rho", ",", "phi_orig", "=", "cartesian_to_polar", "(", "\n", "-", "direction_vector_agent", "[", "2", "]", ",", "direction_vector_agent", "[", "0", "]", "\n", ")", "\n", "phi", "=", "-", "phi_orig", "\n", "return", "np", ".", "array", "(", "[", "rho", ",", "-", "phi", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                ", "_", ",", "phi_orig", "=", "cartesian_to_polar", "(", "\n", "-", "direction_vector_agent", "[", "2", "]", ",", "direction_vector_agent", "[", "0", "]", "\n", ")", "\n", "phi", "=", "-", "phi_orig", "\n", "theta", "=", "np", ".", "arccos", "(", "\n", "direction_vector_agent", "[", "1", "]", "/", "np", ".", "linalg", ".", "norm", "(", "direction_vector_agent", ")", "\n", ")", "\n", "rho", "=", "np", ".", "linalg", ".", "norm", "(", "direction_vector_agent", ")", "\n", "\n", "return", "np", ".", "array", "(", "[", "rho", ",", "-", "phi", ",", "theta", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "_dimensionality", "==", "2", ":", "\n", "                ", "return", "np", ".", "array", "(", "\n", "[", "-", "direction_vector_agent", "[", "2", "]", ",", "direction_vector_agent", "[", "0", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "return", "direction_vector_agent", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoisyIntegratedPointGoalGPSAndCompassSensor.get_observation": [[1168, 1201], ["sensors.NoisyIntegratedPointGoalGPSAndCompassSensor._sim.get_agent_state", "sensors.NoisyIntegratedPointGoalGPSAndCompassSensor._get_noisy_delta", "habitat_extensions.geometry_utils.compute_updated_pose", "numpy.array", "sensors.NoisyIntegratedPointGoalGPSAndCompassSensor._compute_pointgoal"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoisyIntegratedPointGoalGPSAndCompassSensor._get_noisy_delta", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.compute_updated_pose", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.NoisyIntegratedPointGoalGPSAndCompassSensor._compute_pointgoal"], ["", "", "", "def", "get_observation", "(", "self", ",", "*", "args", ":", "Any", ",", "observations", ",", "episode", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "agent_state", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", "\n", "episode_id", "=", "(", "episode", ".", "episode_id", ",", "episode", ".", "scene_id", ")", "\n", "# At the start of a new episode, reset pose estimate", "\n", "if", "self", ".", "current_episode_id", "!=", "episode_id", ":", "\n", "            ", "self", ".", "current_episode_id", "=", "episode_id", "\n", "# Initialize with the ground-truth position, rotation", "\n", "self", ".", "_estimated_position", "=", "agent_state", ".", "position", "\n", "self", ".", "_estimated_rotation", "=", "agent_state", ".", "rotation", "\n", "self", ".", "_past_gt_position", "=", "agent_state", ".", "position", "\n", "self", ".", "_past_gt_rotation", "=", "agent_state", ".", "rotation", "\n", "\n", "# Compute noisy delta", "\n", "", "delta_xz_noisy", ",", "delta_y_noisy", "=", "self", ".", "_get_noisy_delta", "(", "agent_state", ")", "\n", "\n", "# Update past gt states", "\n", "self", ".", "_past_gt_position", "=", "agent_state", ".", "position", "\n", "self", ".", "_past_gt_rotation", "=", "agent_state", ".", "rotation", "\n", "\n", "# Update noisy pose estimates", "\n", "(", "self", ".", "_estimated_position", ",", "self", ".", "_estimated_rotation", ")", "=", "compute_updated_pose", "(", "\n", "self", ".", "_estimated_position", ",", "\n", "self", ".", "_estimated_rotation", ",", "\n", "delta_xz_noisy", ",", "\n", "delta_y_noisy", ",", "\n", ")", "\n", "\n", "agent_position", "=", "self", ".", "_estimated_position", "\n", "rotation_world_agent", "=", "self", ".", "_estimated_rotation", "\n", "goal_position", "=", "np", ".", "array", "(", "episode", ".", "goals", "[", "0", "]", ".", "position", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "return", "self", ".", "_compute_pointgoal", "(", "\n", "agent_position", ",", "rotation_world_agent", ",", "goal_position", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.StartingCoordinatesSensor.__init__": [[1216, 1219], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["def", "__init__", "(", "self", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.StartingCoordinatesSensor._get_uuid": [[1220, 1222], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "\"start_coords\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.StartingCoordinatesSensor._get_sensor_type": [[1223, 1225], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "POSITION", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.StartingCoordinatesSensor._get_observation_space": [[1226, 1233], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "sensor_shape", "=", "(", "7", ",", ")", "\n", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "shape", "=", "sensor_shape", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.StartingCoordinatesSensor.get_observation": [[1235, 1239], ["numpy.concatenate", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "get_observation", "(", "self", ",", "*", "args", ":", "Any", ",", "observations", ",", "episode", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "agent_position", "=", "episode", ".", "start_position", "\n", "agent_heading", "=", "episode", ".", "start_rotation", "\n", "return", "np", ".", "concatenate", "(", "(", "np", ".", "array", "(", "agent_position", ")", ",", "np", ".", "array", "(", "agent_heading", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.SceneNameSensor.__init__": [[1253, 1256], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["def", "__init__", "(", "self", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.SceneNameSensor._get_uuid": [[1257, 1259], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "\"scene_name\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.SceneNameSensor._get_sensor_type": [[1260, 1262], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "POSITION", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.SceneNameSensor._get_observation_space": [[1263, 1265], ["None"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.SceneNameSensor.get_observation": [[1266, 1269], ["episode.scene_id.split"], "methods", ["None"], ["", "def", "get_observation", "(", "self", ",", "*", "args", ":", "Any", ",", "observations", ",", "episode", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "scene_name", "=", "episode", ".", "scene_id", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "return", "scene_name", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.EpisodeIdSensor.__init__": [[1283, 1286], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["def", "__init__", "(", "self", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.EpisodeIdSensor._get_uuid": [[1287, 1289], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "\"episode_id\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.EpisodeIdSensor._get_sensor_type": [[1290, 1292], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "POSITION", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.EpisodeIdSensor._get_observation_space": [[1293, 1300], ["gym.spaces.Box", "numpy.iinfo", "numpy.iinfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "sensor_shape", "=", "(", "1", ",", ")", "\n", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "iinfo", "(", "np", ".", "uint32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "iinfo", "(", "np", ".", "uint32", ")", ".", "max", ",", "\n", "shape", "=", "sensor_shape", ",", "\n", "dtype", "=", "np", ".", "uint32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.sensors.EpisodeIdSensor.get_observation": [[1302, 1305], ["int"], "methods", ["None"], ["", "def", "get_observation", "(", "self", ",", "*", "args", ":", "Any", ",", "observations", ",", "episode", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "scene_name", "=", "int", "(", "episode", ".", "episode_id", ")", "\n", "return", "scene_name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_demo.DummyRLEnv.__init__": [[16, 19], ["habitat.RLEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "dataset", "=", "None", ",", "env_ind", "=", "0", ")", ":", "\n", "        ", "super", "(", "DummyRLEnv", ",", "self", ")", ".", "__init__", "(", "config", ",", "dataset", ")", "\n", "self", ".", "_env_ind", "=", "env_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_demo.DummyRLEnv.get_reward_range": [[20, 22], ["None"], "methods", ["None"], ["", "def", "get_reward_range", "(", "self", ")", ":", "\n", "        ", "return", "-", "1.0", ",", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_demo.DummyRLEnv.get_reward": [[23, 25], ["None"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "observations", ")", ":", "\n", "        ", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_demo.DummyRLEnv.get_done": [[26, 31], ["None"], "methods", ["None"], ["", "def", "get_done", "(", "self", ",", "observations", ")", ":", "\n", "        ", "done", "=", "False", "\n", "if", "self", ".", "_env", ".", "episode_over", ":", "\n", "            ", "done", "=", "True", "\n", "", "return", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_demo.DummyRLEnv.get_info": [[32, 34], ["exploration_demo.DummyRLEnv.habitat_env.get_metrics"], "methods", ["None"], ["", "def", "get_info", "(", "self", ",", "observations", ")", ":", "\n", "        ", "return", "self", ".", "habitat_env", ".", "get_metrics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_demo.DummyRLEnv.get_env_ind": [[35, 37], ["None"], "methods", ["None"], ["", "def", "get_env_ind", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_demo.colorize_ego_map": [[39, 67], ["numpy.logical_and", "numpy.logical_and", "numpy.zeros"], "function", ["None"], ["", "", "def", "colorize_ego_map", "(", "ego_map", ")", ":", "\n", "    ", "\"\"\"\n    ego_map - (V, V, 2) array where 1st channel represents prob(occupied space) an\n              d 2nd channel represents prob(explored space)\n    \"\"\"", "\n", "explored_mask", "=", "ego_map", "[", "...", ",", "1", "]", ">", "0.5", "\n", "occupied_mask", "=", "np", ".", "logical_and", "(", "ego_map", "[", "...", ",", "0", "]", ">", "0.5", ",", "explored_mask", ")", "\n", "free_space_mask", "=", "np", ".", "logical_and", "(", "ego_map", "[", "...", ",", "0", "]", "<=", "0.5", ",", "explored_mask", ")", "\n", "unexplored_mask", "=", "ego_map", "[", "...", ",", "1", "]", "<=", "0.5", "\n", "\n", "ego_map_color", "=", "np", ".", "zeros", "(", "(", "*", "ego_map", ".", "shape", "[", ":", "2", "]", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "\n", "# White unexplored map", "\n", "ego_map_color", "[", "unexplored_mask", ",", "0", "]", "=", "255", "\n", "ego_map_color", "[", "unexplored_mask", ",", "1", "]", "=", "255", "\n", "ego_map_color", "[", "unexplored_mask", ",", "2", "]", "=", "255", "\n", "\n", "# Blue occupied map", "\n", "ego_map_color", "[", "occupied_mask", ",", "0", "]", "=", "0", "\n", "ego_map_color", "[", "occupied_mask", ",", "1", "]", "=", "0", "\n", "ego_map_color", "[", "occupied_mask", ",", "2", "]", "=", "255", "\n", "\n", "# Green free space map", "\n", "ego_map_color", "[", "free_space_mask", ",", "0", "]", "=", "0", "\n", "ego_map_color", "[", "free_space_mask", ",", "1", "]", "=", "255", "\n", "ego_map_color", "[", "free_space_mask", ",", "2", "]", "=", "0", "\n", "\n", "return", "ego_map_color", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_task.ExplorationTask.__init__": [[57, 61], ["habitat.core.embodied_task.EmbodiedTask.__init__"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "config", ":", "Config", ",", "sim", ":", "Simulator", ",", "dataset", ":", "Optional", "[", "Dataset", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ",", "sim", "=", "sim", ",", "dataset", "=", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_task.ExplorationTask.overwrite_sim_config": [[62, 64], ["exploration_task.merge_sim_episode_config"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_task.merge_sim_episode_config"], ["", "def", "overwrite_sim_config", "(", "self", ",", "sim_config", ":", "Any", ",", "episode", ":", "Type", "[", "Episode", "]", ")", "->", "Any", ":", "\n", "        ", "return", "merge_sim_episode_config", "(", "sim_config", ",", "episode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_task.ExplorationTask._check_episode_is_active": [[65, 67], ["getattr"], "methods", ["None"], ["", "def", "_check_episode_is_active", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "bool", ":", "\n", "        ", "return", "not", "getattr", "(", "self", ",", "\"is_stop_called\"", ",", "False", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_task.merge_sim_episode_config": [[20, 33], ["sim_config.defrost", "sim_config.freeze", "getattr", "getattr.defrost", "getattr.freeze"], "function", ["None"], ["def", "merge_sim_episode_config", "(", "sim_config", ":", "Config", ",", "episode", ":", "Type", "[", "Episode", "]", ")", "->", "Any", ":", "\n", "    ", "sim_config", ".", "defrost", "(", ")", "\n", "sim_config", ".", "SCENE", "=", "episode", ".", "scene_id", "\n", "sim_config", ".", "freeze", "(", ")", "\n", "if", "episode", ".", "start_position", "is", "not", "None", "and", "episode", ".", "start_rotation", "is", "not", "None", ":", "\n", "        ", "agent_name", "=", "sim_config", ".", "AGENTS", "[", "sim_config", ".", "DEFAULT_AGENT_ID", "]", "\n", "agent_cfg", "=", "getattr", "(", "sim_config", ",", "agent_name", ")", "\n", "agent_cfg", ".", "defrost", "(", ")", "\n", "agent_cfg", ".", "START_POSITION", "=", "episode", ".", "start_position", "\n", "agent_cfg", ".", "START_ROTATION", "=", "episode", ".", "start_rotation", "\n", "agent_cfg", ".", "IS_SET_START_STATE", "=", "True", "\n", "agent_cfg", ".", "freeze", "(", ")", "\n", "", "return", "sim_config", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.utils.draw_collision": [[20, 35], ["numpy.ones", "numpy.array"], "function", ["None"], ["def", "draw_collision", "(", "view", ":", "np", ".", "ndarray", ",", "alpha", ":", "float", "=", "0.4", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Draw translucent red strips on the border of input view to indicate\n    a collision has taken place.\n    Args:\n        view: input view of size HxWx3 in RGB order.\n        alpha: Opacity of red collision strip. 1 is completely non-transparent.\n    Returns:\n        A view with collision effect drawn.\n    \"\"\"", "\n", "strip_width", "=", "view", ".", "shape", "[", "0", "]", "//", "20", "\n", "mask", "=", "np", ".", "ones", "(", "view", ".", "shape", ")", "\n", "mask", "[", "strip_width", ":", "-", "strip_width", ",", "strip_width", ":", "-", "strip_width", "]", "=", "0", "\n", "mask", "=", "mask", "==", "1", "\n", "view", "[", "mask", "]", "=", "(", "alpha", "*", "np", ".", "array", "(", "[", "255", ",", "0", ",", "0", "]", ")", "+", "(", "1.0", "-", "alpha", ")", "*", "view", ")", "[", "mask", "]", "\n", "return", "view", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.utils.truncated_normal_noise_distr": [[37, 51], ["math.sqrt", "scipy.stats.truncnorm"], "function", ["None"], ["", "def", "truncated_normal_noise_distr", "(", "mu", ",", "var", ",", "width", ")", ":", "\n", "    ", "\"\"\"\n    Returns a truncated normal distribution.\n    mu - mean of gaussian\n    var - variance of gaussian\n    width - how much of the normal to sample on either sides of 0\n    \"\"\"", "\n", "lower", "=", "-", "width", "\n", "upper", "=", "width", "\n", "sigma", "=", "math", ".", "sqrt", "(", "var", ")", "\n", "\n", "X", "=", "stats", ".", "truncnorm", "(", "lower", ",", "upper", ",", "loc", "=", "mu", ",", "scale", "=", "sigma", ")", "\n", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.utils.observations_to_image": [[53, 120], ["numpy.concatenate", "draw_collision.append", "cv2.resize.astype", "numpy.stack", "draw_collision.append", "draw_collision.append", "len", "utils.draw_collision", "utils.topdown_to_image", "cv2.resize", "numpy.concatenate", "isinstance", "rgb.cpu().numpy.cpu().numpy", "cv2.resize", "observation[].squeeze", "isinstance", "cv2.resize.cpu().numpy", "cv2.resize", "isinstance", "rgb.cpu().numpy.cpu().numpy", "rgb.cpu().numpy.cpu", "cv2.resize.cpu", "range", "rgb.cpu().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.utils.draw_collision", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.utils.topdown_to_image"], ["", "def", "observations_to_image", "(", "\n", "observation", ":", "Dict", ",", "info", ":", "Dict", ",", "observation_size", ":", "Optional", "[", "int", "]", "=", "None", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Generate image of single frame from observation and info\n    returned from a single environment step().\n\n    Args:\n        observation: observation returned from an environment step().\n        info: info returned from an environment step().\n\n    Returns:\n        generated image of a single frame.\n    \"\"\"", "\n", "egocentric_view", "=", "[", "]", "\n", "if", "\"rgb\"", "in", "observation", ":", "\n", "        ", "rgb", "=", "observation", "[", "\"rgb\"", "]", "\n", "if", "not", "isinstance", "(", "rgb", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "rgb", "=", "rgb", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "observation_size", "is", "None", ":", "\n", "            ", "observation_size", "=", "observation", "[", "\"rgb\"", "]", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "scale", "=", "observation_size", "/", "rgb", ".", "shape", "[", "0", "]", "\n", "rgb", "=", "cv2", ".", "resize", "(", "rgb", ",", "None", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ")", "\n", "", "egocentric_view", ".", "append", "(", "rgb", ")", "\n", "\n", "# draw depth map if observation has depth info", "\n", "", "if", "\"depth\"", "in", "observation", ":", "\n", "        ", "depth_map", "=", "observation", "[", "\"depth\"", "]", ".", "squeeze", "(", ")", "*", "255.0", "\n", "if", "not", "isinstance", "(", "depth_map", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "depth_map", "=", "depth_map", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "depth_map", "=", "depth_map", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "depth_map", "=", "np", ".", "stack", "(", "[", "depth_map", "for", "_", "in", "range", "(", "3", ")", "]", ",", "axis", "=", "2", ")", "\n", "if", "observation_size", "is", "None", ":", "\n", "            ", "observation_size", "=", "depth_map", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "scale", "=", "observation_size", "/", "depth_map", ".", "shape", "[", "0", "]", "\n", "depth_map", "=", "cv2", ".", "resize", "(", "depth_map", ",", "None", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ")", "\n", "", "egocentric_view", ".", "append", "(", "depth_map", ")", "\n", "\n", "# add image goal if observation has image_goal info", "\n", "", "if", "\"imagegoal\"", "in", "observation", ":", "\n", "        ", "observation_size", "=", "observation", "[", "\"imagegoal\"", "]", ".", "shape", "[", "0", "]", "\n", "rgb", "=", "observation", "[", "\"imagegoal\"", "]", "\n", "if", "not", "isinstance", "(", "rgb", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "rgb", "=", "rgb", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "egocentric_view", ".", "append", "(", "rgb", ")", "\n", "\n", "", "assert", "len", "(", "egocentric_view", ")", ">", "0", ",", "\"Expected at least one visual sensor enabled.\"", "\n", "egocentric_view", "=", "np", ".", "concatenate", "(", "egocentric_view", ",", "axis", "=", "1", ")", "\n", "\n", "# draw collision", "\n", "if", "\"collisions\"", "in", "info", "and", "info", "[", "\"collisions\"", "]", "[", "\"is_collision\"", "]", ":", "\n", "        ", "egocentric_view", "=", "draw_collision", "(", "egocentric_view", ")", "\n", "\n", "", "frame", "=", "egocentric_view", "\n", "\n", "if", "\"top_down_map_exp\"", "in", "info", ":", "\n", "        ", "info", "[", "\"top_down_map\"", "]", "=", "info", "[", "\"top_down_map_exp\"", "]", "\n", "\n", "", "if", "\"top_down_map\"", "in", "info", ":", "\n", "        ", "top_down_map", "=", "topdown_to_image", "(", "info", "[", "\"top_down_map\"", "]", ")", "\n", "scale", "=", "observation_size", "/", "top_down_map", ".", "shape", "[", "0", "]", "\n", "top_down_map", "=", "cv2", ".", "resize", "(", "top_down_map", ",", "None", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ")", "\n", "frame", "=", "np", ".", "concatenate", "(", "(", "egocentric_view", ",", "top_down_map", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "return", "frame", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.utils.topdown_to_image": [[122, 162], ["habitat_extensions.maps.colorize_topdown_map", "habitat_extensions.maps.draw_agent", "numpy.pad", "cv2.resize", "int", "int"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.colorize_topdown_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.draw_agent"], ["", "def", "topdown_to_image", "(", "topdown_info", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Convert topdown map to an RGB image.\n    \"\"\"", "\n", "top_down_map", "=", "topdown_info", "[", "\"map\"", "]", "\n", "fog_of_war_mask", "=", "topdown_info", "[", "\"fog_of_war_mask\"", "]", "\n", "top_down_map", "=", "maps", ".", "colorize_topdown_map", "(", "top_down_map", ",", "fog_of_war_mask", ")", "\n", "map_agent_pos", "=", "topdown_info", "[", "\"agent_map_coord\"", "]", "\n", "\n", "# Add zero padding", "\n", "min_map_size", "=", "200", "\n", "if", "top_down_map", ".", "shape", "[", "0", "]", "!=", "top_down_map", ".", "shape", "[", "1", "]", ":", "\n", "        ", "H", "=", "top_down_map", ".", "shape", "[", "0", "]", "\n", "W", "=", "top_down_map", ".", "shape", "[", "1", "]", "\n", "if", "H", ">", "W", ":", "\n", "            ", "pad_value", "=", "(", "H", "-", "W", ")", "//", "2", "\n", "padding", "=", "(", "(", "0", ",", "0", ")", ",", "(", "pad_value", ",", "pad_value", ")", ",", "(", "0", ",", "0", ")", ")", "\n", "map_agent_pos", "=", "(", "map_agent_pos", "[", "0", "]", ",", "map_agent_pos", "[", "1", "]", "+", "pad_value", ")", "\n", "", "else", ":", "\n", "            ", "pad_value", "=", "(", "W", "-", "H", ")", "//", "2", "\n", "padding", "=", "(", "(", "pad_value", ",", "pad_value", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", "\n", "map_agent_pos", "=", "(", "map_agent_pos", "[", "0", "]", "+", "pad_value", ",", "map_agent_pos", "[", "1", "]", ")", "\n", "", "top_down_map", "=", "np", ".", "pad", "(", "\n", "top_down_map", ",", "padding", ",", "mode", "=", "\"constant\"", ",", "constant_values", "=", "255", "\n", ")", "\n", "\n", "", "if", "top_down_map", ".", "shape", "[", "0", "]", "<", "min_map_size", ":", "\n", "        ", "H", ",", "W", "=", "top_down_map", ".", "shape", "[", ":", "2", "]", "\n", "top_down_map", "=", "cv2", ".", "resize", "(", "top_down_map", ",", "(", "min_map_size", ",", "min_map_size", ")", ")", "\n", "map_agent_pos", "=", "(", "\n", "int", "(", "map_agent_pos", "[", "0", "]", "*", "min_map_size", "//", "H", ")", ",", "\n", "int", "(", "map_agent_pos", "[", "1", "]", "*", "min_map_size", "//", "W", ")", ",", "\n", ")", "\n", "", "top_down_map", "=", "maps", ".", "draw_agent", "(", "\n", "image", "=", "top_down_map", ",", "\n", "agent_center_coord", "=", "map_agent_pos", ",", "\n", "agent_rotation", "=", "topdown_info", "[", "\"agent_angle\"", "]", ",", "\n", "agent_radius_px", "=", "top_down_map", ".", "shape", "[", "0", "]", "//", "40", ",", "\n", ")", "\n", "\n", "return", "top_down_map", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.utils.compute_confusion_matrix": [[164, 179], ["torch.zeros", "range", "range", "torch.sum"], "function", ["None"], ["", "def", "compute_confusion_matrix", "(", "true", ",", "pred", ")", ":", "\n", "    ", "\"\"\"Computes a confusion matrix using numpy for two np.arrays\n  true and pred.\n    \"\"\"", "\n", "\n", "true", "=", "true", "+", "1", "\n", "pred", "=", "pred", "+", "1", "\n", "K", "=", "3", "\n", "result", "=", "torch", ".", "zeros", "(", "(", "K", ",", "K", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "            ", "result", "[", "i", "]", "[", "j", "]", "=", "torch", ".", "sum", "(", "(", "(", "true", "==", "i", ")", "*", "(", "pred", "==", "j", ")", ")", ".", "float", "(", ")", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.utils.compute_iou_acc": [[181, 229], ["range", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.stack().float.append", "torch.stack().float.append", "torch.stack().float.append", "torch.stack().float.append", "torch.logical_and", "torch.logical_and", "torch.logical_or", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sum", "torch.sum", "torch.logical_or", "added_gt.float", "removed_gt.float"], "function", ["None"], ["", "def", "compute_iou_acc", "(", "true", ",", "pred", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "'''\n    class -1 : removed object\n    class 1 : added object\n    class 0 : unchanged\n\n    returns batch wise IoU and accuracy '''", "\n", "\n", "assert", "pred", ".", "shape", "==", "true", ".", "shape", "\n", "batch", ",", "h", ",", "w", "=", "pred", ".", "shape", "\n", "\n", "# compute class masks", "\n", "added_gt", "=", "(", "true", "==", "1", ")", "\n", "removed_gt", "=", "(", "true", "==", "-", "1", ")", "\n", "\n", "added_pred", "=", "(", "pred", "==", "1", ")", "\n", "removed_pred", "=", "(", "pred", "==", "-", "1", ")", "\n", "\n", "# batch wise iou metrics", "\n", "added_intersection", ",", "added_union", ",", "removed_intersection", ",", "removed_union", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "b", "in", "range", "(", "batch", ")", ":", "\n", "        ", "added_intersection", ".", "append", "(", "torch", ".", "logical_and", "(", "added_gt", "[", "b", ",", "...", "]", ",", "added_pred", "[", "b", ",", "...", "]", ")", ")", "\n", "added_union", ".", "append", "(", "torch", ".", "logical_or", "(", "added_gt", "[", "b", ",", "...", "]", ",", "added_pred", ")", "[", "b", ",", "...", "]", ")", "\n", "\n", "removed_intersection", ".", "append", "(", "torch", ".", "logical_and", "(", "removed_gt", "[", "b", ",", "...", "]", ",", "removed_pred", "[", "b", ",", "...", "]", ")", ")", "\n", "removed_union", ".", "append", "(", "torch", ".", "logical_or", "(", "removed_gt", "[", "b", ",", "...", "]", ",", "removed_pred", "[", "b", ",", "...", "]", ")", ")", "\n", "\n", "", "added_intersection", "=", "torch", ".", "stack", "(", "added_intersection", ")", ".", "float", "(", ")", "\n", "added_union", "=", "torch", ".", "stack", "(", "added_union", ")", ".", "float", "(", ")", "\n", "removed_intersection", "=", "torch", ".", "stack", "(", "removed_intersection", ")", ".", "float", "(", ")", "\n", "removed_union", "=", "torch", ".", "stack", "(", "removed_union", ")", ".", "float", "(", ")", "\n", "\n", "batch_sum_ai", "=", "torch", ".", "sum", "(", "added_intersection", ",", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "batch_sum_au", "=", "torch", ".", "sum", "(", "added_union", ",", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "batch_sum_ri", "=", "torch", ".", "sum", "(", "removed_intersection", ",", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "batch_sum_ru", "=", "torch", ".", "sum", "(", "removed_union", ",", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "\n", "added_iou", "=", "batch_sum_ai", "/", "(", "batch_sum_au", "+", "eps", ")", "\n", "removed_iou", "=", "batch_sum_ri", "/", "(", "batch_sum_ru", "+", "eps", ")", "\n", "total_iou", "=", "(", "batch_sum_ai", "+", "batch_sum_ri", ")", "/", "(", "batch_sum_au", "+", "batch_sum_ru", "+", "eps", ")", "\n", "\n", "# batch wise accuracy", "\n", "total", "=", "torch", ".", "sum", "(", "added_gt", ".", "float", "(", ")", ",", "dim", "=", "(", "1", ",", "2", ")", ")", "+", "torch", ".", "sum", "(", "removed_gt", ".", "float", "(", ")", ",", "dim", "=", "(", "1", ",", "2", ")", ")", "+", "eps", "\n", "correct", "=", "batch_sum_ai", "+", "batch_sum_ri", "\n", "accuracy", "=", "correct", "/", "total", "\n", "\n", "return", "added_iou", ",", "removed_iou", ",", "total_iou", ",", "accuracy", "\n", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.config.default.get_extended_config": [[156, 185], ["_C.clone", "_C.clone.freeze", "isinstance", "_C.clone.merge_from_list", "_C.clone.merge_from_file", "config_paths.split.split"], "function", ["None"], ["def", "get_extended_config", "(", "\n", "config_paths", ":", "Optional", "[", "Union", "[", "List", "[", "str", "]", ",", "str", "]", "]", "=", "None", ",", "opts", ":", "Optional", "[", "list", "]", "=", "None", "\n", ")", "->", "CN", ":", "\n", "    ", "r\"\"\"Create a unified config with default values overwritten by values from\n    :p:`config_paths` and overwritten by options from :p:`opts`.\n\n    :param config_paths: List of config paths or string that contains comma\n        separated list of config paths.\n    :param opts: Config options (keys, values) in a list (e.g., passed from\n        command line into the config. For example,\n        :py:`opts = ['FOO.BAR', 0.5]`. Argument can be used for parameter\n        sweeping or quick tests.\n    \"\"\"", "\n", "config", "=", "_C", ".", "clone", "(", ")", "\n", "if", "config_paths", ":", "\n", "        ", "if", "isinstance", "(", "config_paths", ",", "str", ")", ":", "\n", "            ", "if", "CONFIG_FILE_SEPARATOR", "in", "config_paths", ":", "\n", "                ", "config_paths", "=", "config_paths", ".", "split", "(", "CONFIG_FILE_SEPARATOR", ")", "\n", "", "else", ":", "\n", "                ", "config_paths", "=", "[", "config_paths", "]", "\n", "\n", "", "", "for", "config_path", "in", "config_paths", ":", "\n", "            ", "config", ".", "merge_from_file", "(", "config_path", ")", "\n", "\n", "", "", "if", "opts", ":", "\n", "        ", "config", ".", "merge_from_list", "(", "opts", ")", "\n", "\n", "", "config", ".", "freeze", "(", ")", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.config.default.get_config": [[264, 294], ["_C.clone", "habitat_extensions.get_extended_config", "_C.clone.freeze", "isinstance", "_C.clone.merge_from_list", "_C.clone.merge_from_file", "config_paths.split.split"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.config.default.get_extended_config"], []], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_occant_gt_maps.DummyRLEnv.__init__": [[27, 30], ["habitat.RLEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "dataset", "=", "None", ",", "env_ind", "=", "0", ")", ":", "\n", "        ", "super", "(", "DummyRLEnv", ",", "self", ")", ".", "__init__", "(", "config", ",", "dataset", ")", "\n", "self", ".", "_env_ind", "=", "env_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_occant_gt_maps.DummyRLEnv.get_reward_range": [[31, 33], ["None"], "methods", ["None"], ["", "def", "get_reward_range", "(", "self", ")", ":", "\n", "        ", "return", "-", "1.0", ",", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_occant_gt_maps.DummyRLEnv.get_reward": [[34, 36], ["None"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "observations", ")", ":", "\n", "        ", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_occant_gt_maps.DummyRLEnv.get_done": [[37, 42], ["None"], "methods", ["None"], ["", "def", "get_done", "(", "self", ",", "observations", ")", ":", "\n", "        ", "done", "=", "False", "\n", "if", "self", ".", "_env", ".", "episode_over", ":", "\n", "            ", "done", "=", "True", "\n", "", "return", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_occant_gt_maps.DummyRLEnv.get_info": [[43, 45], ["generate_occant_gt_maps.DummyRLEnv.habitat_env.get_metrics"], "methods", ["None"], ["", "def", "get_info", "(", "self", ",", "observations", ")", ":", "\n", "        ", "return", "self", ".", "habitat_env", ".", "get_metrics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_occant_gt_maps.DummyRLEnv.get_env_ind": [[46, 48], ["None"], "methods", ["None"], ["", "def", "get_env_ind", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_occant_gt_maps.colorize_ego_map": [[50, 78], ["numpy.logical_and", "numpy.logical_and", "numpy.zeros"], "function", ["None"], ["", "", "def", "colorize_ego_map", "(", "ego_map", ")", ":", "\n", "    ", "\"\"\"\n    ego_map - (V, V, 2) array where 1st channel represents prob(occupied space) an\n              d 2nd channel represents prob(explored space)\n    \"\"\"", "\n", "explored_mask", "=", "ego_map", "[", "...", ",", "1", "]", ">", "0.5", "\n", "occupied_mask", "=", "np", ".", "logical_and", "(", "ego_map", "[", "...", ",", "0", "]", ">", "0.5", ",", "explored_mask", ")", "\n", "free_space_mask", "=", "np", ".", "logical_and", "(", "ego_map", "[", "...", ",", "0", "]", "<=", "0.5", ",", "explored_mask", ")", "\n", "unexplored_mask", "=", "ego_map", "[", "...", ",", "1", "]", "<=", "0.5", "\n", "\n", "ego_map_color", "=", "np", ".", "zeros", "(", "(", "*", "ego_map", ".", "shape", "[", ":", "2", "]", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "\n", "# White unexplored map", "\n", "ego_map_color", "[", "unexplored_mask", ",", "0", "]", "=", "255", "\n", "ego_map_color", "[", "unexplored_mask", ",", "1", "]", "=", "255", "\n", "ego_map_color", "[", "unexplored_mask", ",", "2", "]", "=", "255", "\n", "\n", "# Blue occupied map", "\n", "ego_map_color", "[", "occupied_mask", ",", "0", "]", "=", "0", "\n", "ego_map_color", "[", "occupied_mask", ",", "1", "]", "=", "0", "\n", "ego_map_color", "[", "occupied_mask", ",", "2", "]", "=", "255", "\n", "\n", "# Green free space map", "\n", "ego_map_color", "[", "free_space_mask", ",", "0", "]", "=", "0", "\n", "ego_map_color", "[", "free_space_mask", ",", "1", "]", "=", "255", "\n", "ego_map_color", "[", "free_space_mask", ",", "2", "]", "=", "0", "\n", "\n", "return", "ego_map_color", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_occant_gt_maps.safe_mkdir": [[80, 85], ["os.mkdir"], "function", ["None"], ["", "def", "safe_mkdir", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_occant_gt_maps.get_episode_map": [[87, 157], ["torch.zeros().to", "torch.zeros().to", "habitat.utils.visualizations.maps.get_topdown_map", "numpy.arange", "numpy.arange", "numpy.stack", "coors.reshape.reshape", "range", "einops.asnumpy", "einops.asnumpy", "int", "int", "max", "max", "numpy.meshgrid", "numpy.arange", "torch.zeros", "torch.zeros", "int", "int", "env.habitat_env.sim.get_agent_state", "env.habitat_env.sim.get_observations_at", "env.habitat_env.task.sensor_suite.get_observations", "torch.Tensor().to", "einops.rearrange", "torch.Tensor().to", "einops.rearrange", "torch.Tensor().unsqueeze().to", "mapper.ext_register_map", "mapper.ext_register_map", "einops.rearrange", "einops.rearrange", "real_x_vals[].item", "start_y.item", "real_z_vals[].item", "numpy.sin().item", "numpy.cos().item", "torch.Tensor", "torch.Tensor", "torch.Tensor().unsqueeze", "numpy.sin", "numpy.cos", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.get_topdown_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper.ext_register_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper.ext_register_map"], ["", "", "def", "get_episode_map", "(", "env", ",", "mapper", ",", "M", ",", "config", ",", "device", ")", ":", "\n", "    ", "\"\"\"Given the environment and the configuration, compute the global\n    top-down wall and seen area maps by sampling maps for individual locations\n    along a uniform grid in the environment, and registering them.\n    \"\"\"", "\n", "# Initialize a global map for the episode", "\n", "global_wall_map", "=", "torch", ".", "zeros", "(", "1", ",", "2", ",", "M", ",", "M", ")", ".", "to", "(", "device", ")", "\n", "global_seen_map", "=", "torch", ".", "zeros", "(", "1", ",", "2", ",", "M", ",", "M", ")", ".", "to", "(", "device", ")", "\n", "\n", "grid_size", "=", "config", ".", "TASK", ".", "GT_EGO_MAP", ".", "MAP_SCALE", "\n", "coordinate_max", "=", "maps", ".", "COORDINATE_MAX", "\n", "coordinate_min", "=", "maps", ".", "COORDINATE_MIN", "\n", "resolution", "=", "(", "coordinate_max", "-", "coordinate_min", ")", "/", "grid_size", "\n", "grid_resolution", "=", "(", "int", "(", "resolution", ")", ",", "int", "(", "resolution", ")", ")", "\n", "\n", "top_down_map", "=", "maps", ".", "get_topdown_map", "(", "\n", "env", ".", "habitat_env", ".", "sim", ",", "grid_resolution", ",", "20000", ",", "draw_border", "=", "False", ",", "\n", ")", "\n", "\n", "map_w", ",", "map_h", "=", "top_down_map", ".", "shape", "\n", "\n", "intervals", "=", "(", "max", "(", "int", "(", "0.5", "/", "grid_size", ")", ",", "1", ")", ",", "max", "(", "int", "(", "0.5", "/", "grid_size", ")", ",", "1", ")", ")", "\n", "x_vals", "=", "np", ".", "arange", "(", "0", ",", "map_w", ",", "intervals", "[", "0", "]", ",", "dtype", "=", "int", ")", "\n", "y_vals", "=", "np", ".", "arange", "(", "0", ",", "map_h", ",", "intervals", "[", "1", "]", ",", "dtype", "=", "int", ")", "\n", "coors", "=", "np", ".", "stack", "(", "np", ".", "meshgrid", "(", "x_vals", ",", "y_vals", ")", ",", "axis", "=", "2", ")", "# (H, W, 2)", "\n", "coors", "=", "coors", ".", "reshape", "(", "-", "1", ",", "2", ")", "# (H*W, 2)", "\n", "map_vals", "=", "top_down_map", "[", "coors", "[", ":", ",", "0", "]", ",", "coors", "[", ":", ",", "1", "]", "]", "\n", "valid_coors", "=", "coors", "[", "map_vals", ">", "0", "]", "\n", "\n", "real_x_vals", "=", "coordinate_max", "-", "valid_coors", "[", ":", ",", "0", "]", "*", "grid_size", "\n", "real_z_vals", "=", "coordinate_min", "+", "valid_coors", "[", ":", ",", "1", "]", "*", "grid_size", "\n", "start_y", "=", "env", ".", "habitat_env", ".", "sim", ".", "get_agent_state", "(", ")", ".", "position", "[", "1", "]", "\n", "\n", "for", "j", "in", "range", "(", "real_x_vals", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "theta", "in", "np", ".", "arange", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ",", "np", ".", "pi", "/", "3.0", ")", ":", "\n", "            ", "position", "=", "[", "\n", "real_x_vals", "[", "j", "]", ".", "item", "(", ")", ",", "\n", "start_y", ".", "item", "(", ")", ",", "\n", "real_z_vals", "[", "j", "]", ".", "item", "(", ")", ",", "\n", "]", "\n", "rotation", "=", "[", "\n", "0.0", ",", "\n", "np", ".", "sin", "(", "theta", "/", "2", ")", ".", "item", "(", ")", ",", "\n", "0.0", ",", "\n", "np", ".", "cos", "(", "theta", "/", "2", ")", ".", "item", "(", ")", ",", "\n", "]", "\n", "\n", "sim_obs", "=", "env", ".", "habitat_env", ".", "sim", ".", "get_observations_at", "(", "\n", "position", ",", "rotation", ",", "keep_agent_at_new_pose", "=", "True", ",", "\n", ")", "\n", "episode", "=", "env", ".", "habitat_env", ".", "current_episode", "\n", "obs", "=", "env", ".", "habitat_env", ".", "task", ".", "sensor_suite", ".", "get_observations", "(", "\n", "observations", "=", "sim_obs", ",", "episode", "=", "episode", ",", "task", "=", "env", ".", "habitat_env", ".", "task", "\n", ")", "\n", "ego_map_gt", "=", "torch", ".", "Tensor", "(", "obs", "[", "\"ego_map_gt\"", "]", ")", ".", "to", "(", "device", ")", "\n", "ego_map_gt", "=", "rearrange", "(", "ego_map_gt", ",", "\"h w c -> () c h w\"", ")", "\n", "ego_wall_map_gt", "=", "torch", ".", "Tensor", "(", "obs", "[", "\"ego_wall_map_gt\"", "]", ")", ".", "to", "(", "device", ")", "\n", "ego_wall_map_gt", "=", "rearrange", "(", "ego_wall_map_gt", ",", "\"h w c -> () c h w\"", ")", "\n", "pose_gt", "=", "torch", ".", "Tensor", "(", "obs", "[", "\"pose_gt\"", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "global_seen_map", "=", "mapper", ".", "ext_register_map", "(", "\n", "global_seen_map", ",", "ego_map_gt", ",", "pose_gt", "\n", ")", "\n", "global_wall_map", "=", "mapper", ".", "ext_register_map", "(", "\n", "global_wall_map", ",", "ego_wall_map_gt", ",", "pose_gt", "\n", ")", "\n", "\n", "", "", "global_wall_map_np", "=", "asnumpy", "(", "rearrange", "(", "global_wall_map", ",", "\"b c h w -> b h w c\"", ")", "[", "0", "]", ")", "\n", "global_seen_map_np", "=", "asnumpy", "(", "rearrange", "(", "global_seen_map", ",", "\"b c h w -> b h w c\"", ")", "[", "0", "]", ")", "\n", "\n", "return", "global_seen_map_np", ",", "global_wall_map_np", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_occant_gt_maps.main": [[159, 305], ["occant_baselines.config.default.get_config", "mapper_config.defrost", "mapper_config.freeze", "occant_baselines.rl.policy.Mapper", "generate_occant_gt_maps.safe_mkdir", "os.path.join", "os.path.join", "os.path.join", "habitat_extensions.get_extended_config", "glob.glob", "habitat_extensions.get_extended_config.DATASET.DATA_PATH.replace", "len", "print", "print", "scene_to_data.items", "generate_occant_gt_maps.DummyRLEnv", "DummyRLEnv.seed", "torch.device", "generate_occant_gt_maps.safe_mkdir", "generate_occant_gt_maps.safe_mkdir", "tqdm.tqdm", "per_scene_per_floor_maps.keys", "json.dump", "gzip.open", "json.load", "os.path.join", "glob.glob", "print", "range", "DummyRLEnv.reset", "DummyRLEnv.habitat_env.sim.get_agent_state", "numpy.array", "habitat_extensions.geometry_utils.compute_heading_from_quaternion", "start_position[].item", "map", "numpy.array", "[].item", "generate_occant_gt_maps.get_episode_map", "numpy.save", "numpy.save", "per_scene_per_floor_maps[].items", "open", "len", "scene_to_data[].append", "map", "numpy.array", "DummyRLEnv.habitat_env.current_episode.scene_id.split", "list", "np.array.tolist", "scene_save_data.append", "gzip.open", "json.load", "[].split", "ep[].split", "len", "floor_heights.append", "list", "numpy.any", "floor_heights.append", "abs", "len", "abs", "len", "numpy.where"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.config.default.get_config", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_environment_layouts.safe_mkdir", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.config.default.get_extended_config", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.seed", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_environment_layouts.safe_mkdir", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_environment_layouts.safe_mkdir", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.reset", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.compute_heading_from_quaternion", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_occant_gt_maps.get_episode_map"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "config", "=", "get_config", "(", ")", "\n", "\n", "mapper_config", "=", "config", ".", "RL", ".", "ANS", ".", "MAPPER", "\n", "mapper_config", ".", "defrost", "(", ")", "\n", "mapper_config", ".", "map_size", "=", "65", "\n", "mapper_config", ".", "map_scale", "=", "0.05", "\n", "mapper_config", ".", "freeze", "(", ")", "\n", "\n", "mapper", "=", "Mapper", "(", "mapper_config", ",", "None", ")", "\n", "\n", "M", "=", "args", ".", "global_map_size", "\n", "\n", "config_path", "=", "args", ".", "config_path", "\n", "save_dir", "=", "args", ".", "save_dir", "\n", "safe_mkdir", "(", "save_dir", ")", "\n", "\n", "seen_map_save_root", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"seen_area_maps\"", ")", "\n", "wall_map_save_root", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"wall_maps\"", ")", "\n", "json_save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"all_maps_info.json\"", ")", "\n", "\n", "config", "=", "habitat_extensions", ".", "get_extended_config", "(", "config_path", ")", "\n", "\n", "scenes_list", "=", "glob", ".", "glob", "(", "f\"\"", ")", "\n", "dataset_path", "=", "config", ".", "DATASET", ".", "DATA_PATH", ".", "replace", "(", "\"{split}\"", ",", "config", ".", "DATASET", ".", "SPLIT", ")", "\n", "with", "gzip", ".", "open", "(", "dataset_path", ",", "\"rt\"", ")", "as", "fp", ":", "\n", "        ", "dataset", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "num_episodes", "=", "len", "(", "dataset", "[", "\"episodes\"", "]", ")", "\n", "\n", "print", "(", "\"===============> Loading data per scene\"", ")", "\n", "scene_to_data", "=", "{", "}", "\n", "if", "num_episodes", "==", "0", ":", "\n", "        ", "content_path", "=", "os", ".", "path", ".", "join", "(", "\n", "dataset_path", "[", ":", "-", "len", "(", "f\"{config.DATASET.SPLIT}.json.gz\"", ")", "]", ",", "\"content\"", "\n", ")", "\n", "scene_paths", "=", "glob", ".", "glob", "(", "f\"{content_path}/*\"", ")", "\n", "print", "(", "f\"Number of scenes found: {len(scene_paths)}\"", ")", "\n", "for", "scene_data_path", "in", "scene_paths", ":", "\n", "            ", "with", "gzip", ".", "open", "(", "scene_data_path", ",", "\"rt\"", ")", "as", "fp", ":", "\n", "                ", "scene_data", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "num_episodes", "+=", "len", "(", "scene_data", "[", "\"episodes\"", "]", ")", "\n", "scene_id", "=", "scene_data", "[", "\"episodes\"", "]", "[", "0", "]", "[", "\"scene_id\"", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "scene_to_data", "[", "scene_id", "]", "=", "scene_data", "[", "\"episodes\"", "]", "\n", "", "", "else", ":", "\n", "        ", "for", "ep", "in", "dataset", "[", "\"episodes\"", "]", ":", "\n", "            ", "scene_id", "=", "ep", "[", "\"scene_id\"", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "if", "scene_id", "not", "in", "scene_to_data", ":", "\n", "                ", "scene_to_data", "[", "scene_id", "]", "=", "[", "]", "\n", "", "scene_to_data", "[", "scene_id", "]", ".", "append", "(", "ep", ")", "\n", "\n", "", "", "print", "(", "\"===============> Computing heights for different floors in each scene\"", ")", "\n", "scenes_to_floor_heights", "=", "{", "}", "\n", "for", "scene_id", ",", "scene_data", "in", "scene_to_data", ".", "items", "(", ")", ":", "\n", "# Identify the number of unique floors in this scene", "\n", "        ", "floor_heights", "=", "[", "]", "\n", "for", "ep", "in", "scene_data", ":", "\n", "            ", "height", "=", "ep", "[", "\"start_position\"", "]", "[", "1", "]", "\n", "if", "len", "(", "floor_heights", ")", "==", "0", ":", "\n", "                ", "floor_heights", ".", "append", "(", "height", ")", "\n", "# Measure height difference from all existing floors", "\n", "", "d2floors", "=", "map", "(", "lambda", "x", ":", "abs", "(", "x", "-", "height", ")", ",", "floor_heights", ")", "\n", "d2floors", "=", "np", ".", "array", "(", "list", "(", "d2floors", ")", ")", "\n", "if", "not", "np", ".", "any", "(", "d2floors", "<", "0.5", ")", ":", "\n", "                ", "floor_heights", ".", "append", "(", "height", ")", "\n", "# Store this in the dict", "\n", "", "", "scenes_to_floor_heights", "[", "scene_id", "]", "=", "floor_heights", "\n", "\n", "", "env", "=", "DummyRLEnv", "(", "config", "=", "config", ")", "\n", "env", ".", "seed", "(", "1234", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "\n", "safe_mkdir", "(", "seen_map_save_root", ")", "\n", "safe_mkdir", "(", "wall_map_save_root", ")", "\n", "\n", "# Data format for saving top-down maps per scene:", "\n", "# For each split, create a json file that contains the following dictionary:", "\n", "# key - scene_id", "\n", "# value - [{'floor_height': ...,", "\n", "#           'seen_map_path': ...,", "\n", "#           'wall_map_path': ...,", "\n", "#           'world_position': ...,", "\n", "#           'world_heading': ...},", "\n", "#          .,", "\n", "#          .,", "\n", "#          .,", "\n", "#         ]", "\n", "# The floor_height specifies a single height value on that floor.", "\n", "# All other heights within 0.5m of this height will correspond to this floor.", "\n", "# The *_map_path specifies the path to a .npy file that contains the", "\n", "# corresponding map. This map is in the world coordinate system, not episode", "\n", "# centric start-view coordinate system.", "\n", "# The world_position is the (X, Y, Z) position of the agent w.r.t. which this", "\n", "# map was computed. The world_heading is the clockwise rotation (-Z to X)", "\n", "# of the agent in the world coordinates.", "\n", "# The .npy files will be stored in seen_map_save_root and wall_map_save_root.", "\n", "\n", "# Create top-down maps per scene, per floor", "\n", "per_scene_per_floor_maps", "=", "{", "}", "\n", "for", "i", "in", "tqdm", ".", "tqdm", "(", "range", "(", "num_episodes", ")", ")", ":", "\n", "\n", "        ", "_", "=", "env", ".", "reset", "(", ")", "\n", "\n", "episode_id", "=", "env", ".", "habitat_env", ".", "current_episode", ".", "episode_id", "\n", "scene_id", "=", "env", ".", "habitat_env", ".", "current_episode", ".", "scene_id", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "agent_state", "=", "env", ".", "habitat_env", ".", "sim", ".", "get_agent_state", "(", ")", "\n", "start_position", "=", "np", ".", "array", "(", "agent_state", ".", "position", ")", "\n", "# Clockwise rotation", "\n", "start_heading", "=", "compute_heading_from_quaternion", "(", "agent_state", ".", "rotation", ")", "\n", "start_height", "=", "start_position", "[", "1", "]", ".", "item", "(", ")", "\n", "floor_heights", "=", "scenes_to_floor_heights", "[", "scene_id", "]", "\n", "d2floors", "=", "map", "(", "lambda", "x", ":", "abs", "(", "x", "-", "start_height", ")", ",", "floor_heights", ")", "\n", "d2floors", "=", "np", ".", "array", "(", "list", "(", "d2floors", ")", ")", "\n", "floor_idx", "=", "np", ".", "where", "(", "d2floors", "<", "0.5", ")", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", "\n", "\n", "if", "scene_id", "not", "in", "per_scene_per_floor_maps", ":", "\n", "            ", "per_scene_per_floor_maps", "[", "scene_id", "]", "=", "{", "}", "\n", "\n", "# If the maps for this floor were already computed, skip the episode", "\n", "", "if", "floor_idx", "in", "per_scene_per_floor_maps", "[", "scene_id", "]", ":", "\n", "            ", "continue", "\n", "\n", "", "global_seen_map", ",", "global_wall_map", "=", "get_episode_map", "(", "\n", "env", ",", "mapper", ",", "M", ",", "config", ",", "device", "\n", ")", "\n", "seen_map_save_path", "=", "f\"{seen_map_save_root}/{scene_id}_{floor_idx}.npy\"", "\n", "wall_map_save_path", "=", "f\"{wall_map_save_root}/{scene_id}_{floor_idx}.npy\"", "\n", "np", ".", "save", "(", "seen_map_save_path", ",", "global_seen_map", ")", "\n", "np", ".", "save", "(", "wall_map_save_path", ",", "global_wall_map", ")", "\n", "save_dict", "=", "{", "\n", "\"floor_height\"", ":", "start_height", ",", "\n", "\"seen_map_path\"", ":", "seen_map_save_path", ",", "\n", "\"wall_map_path\"", ":", "wall_map_save_path", ",", "\n", "\"world_position\"", ":", "start_position", ".", "tolist", "(", ")", ",", "\n", "\"world_heading\"", ":", "start_heading", ",", "\n", "}", "\n", "per_scene_per_floor_maps", "[", "scene_id", "]", "[", "floor_idx", "]", "=", "save_dict", "\n", "\n", "", "save_json", "=", "{", "}", "\n", "for", "scene", "in", "per_scene_per_floor_maps", ".", "keys", "(", ")", ":", "\n", "        ", "scene_save_data", "=", "[", "]", "\n", "for", "floor_idx", ",", "floor_data", "in", "per_scene_per_floor_maps", "[", "scene", "]", ".", "items", "(", ")", ":", "\n", "            ", "scene_save_data", ".", "append", "(", "floor_data", ")", "\n", "", "save_json", "[", "scene", "]", "=", "scene_save_data", "\n", "\n", "", "json", ".", "dump", "(", "save_json", ",", "open", "(", "json_save_path", ",", "\"w\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_environment_layouts.DummyRLEnv.__init__": [[25, 28], ["habitat.RLEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "dataset", "=", "None", ",", "env_ind", "=", "0", ")", ":", "\n", "        ", "super", "(", "DummyRLEnv", ",", "self", ")", ".", "__init__", "(", "config", ",", "dataset", ")", "\n", "self", ".", "_env_ind", "=", "env_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_environment_layouts.DummyRLEnv.get_reward_range": [[29, 31], ["None"], "methods", ["None"], ["", "def", "get_reward_range", "(", "self", ")", ":", "\n", "        ", "return", "-", "1.0", ",", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_environment_layouts.DummyRLEnv.get_reward": [[32, 34], ["None"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "observations", ")", ":", "\n", "        ", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_environment_layouts.DummyRLEnv.get_done": [[35, 40], ["None"], "methods", ["None"], ["", "def", "get_done", "(", "self", ",", "observations", ")", ":", "\n", "        ", "done", "=", "False", "\n", "if", "self", ".", "_env", ".", "episode_over", ":", "\n", "            ", "done", "=", "True", "\n", "", "return", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_environment_layouts.DummyRLEnv.get_info": [[41, 43], ["generate_environment_layouts.DummyRLEnv.habitat_env.get_metrics"], "methods", ["None"], ["", "def", "get_info", "(", "self", ",", "observations", ")", ":", "\n", "        ", "return", "self", ".", "habitat_env", ".", "get_metrics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_environment_layouts.DummyRLEnv.get_env_ind": [[44, 46], ["None"], "methods", ["None"], ["", "def", "get_env_ind", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_environment_layouts.colorize_ego_map": [[48, 76], ["numpy.logical_and", "numpy.logical_and", "numpy.zeros"], "function", ["None"], ["", "", "def", "colorize_ego_map", "(", "ego_map", ")", ":", "\n", "    ", "\"\"\"\n    ego_map - (V, V, 2) array where 1st channel represents prob(occupied space) an\n              d 2nd channel represents prob(explored space)\n    \"\"\"", "\n", "explored_mask", "=", "ego_map", "[", "...", ",", "1", "]", ">", "0.5", "\n", "occupied_mask", "=", "np", ".", "logical_and", "(", "ego_map", "[", "...", ",", "0", "]", ">", "0.5", ",", "explored_mask", ")", "\n", "free_space_mask", "=", "np", ".", "logical_and", "(", "ego_map", "[", "...", ",", "0", "]", "<=", "0.5", ",", "explored_mask", ")", "\n", "unexplored_mask", "=", "ego_map", "[", "...", ",", "1", "]", "<=", "0.5", "\n", "\n", "ego_map_color", "=", "np", ".", "zeros", "(", "(", "*", "ego_map", ".", "shape", "[", ":", "2", "]", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "\n", "# White unexplored map", "\n", "ego_map_color", "[", "unexplored_mask", ",", "0", "]", "=", "255", "\n", "ego_map_color", "[", "unexplored_mask", ",", "1", "]", "=", "255", "\n", "ego_map_color", "[", "unexplored_mask", ",", "2", "]", "=", "255", "\n", "\n", "# Blue occupied map", "\n", "ego_map_color", "[", "occupied_mask", ",", "0", "]", "=", "0", "\n", "ego_map_color", "[", "occupied_mask", ",", "1", "]", "=", "0", "\n", "ego_map_color", "[", "occupied_mask", ",", "2", "]", "=", "255", "\n", "\n", "# Green free space map", "\n", "ego_map_color", "[", "free_space_mask", ",", "0", "]", "=", "0", "\n", "ego_map_color", "[", "free_space_mask", ",", "1", "]", "=", "255", "\n", "ego_map_color", "[", "free_space_mask", ",", "2", "]", "=", "0", "\n", "\n", "return", "ego_map_color", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_environment_layouts.safe_mkdir": [[78, 83], ["os.mkdir"], "function", ["None"], ["", "def", "safe_mkdir", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_environment_layouts.main": [[85, 172], ["occant_baselines.config.default.get_config", "mapper_config.defrost", "mapper_config.freeze", "occant_baselines.rl.policy.Mapper", "generate_environment_layouts.safe_mkdir", "habitat_extensions.get_extended_config", "habitat_extensions.get_extended_config.DATASET.DATA_PATH.replace", "len", "generate_environment_layouts.DummyRLEnv", "DummyRLEnv.seed", "torch.device", "tqdm.tqdm", "gzip.open", "json.load", "range", "DummyRLEnv.reset", "torch.zeros().to", "habitat.utils.visualizations.maps.get_topdown_map", "numpy.arange", "numpy.arange", "numpy.stack", "coors.reshape.reshape", "range", "einops.asnumpy", "numpy.save", "int", "int", "max", "max", "numpy.meshgrid", "numpy.arange", "os.path.join", "torch.zeros", "int", "int", "DummyRLEnv.habitat_env.sim.get_agent_state", "DummyRLEnv.habitat_env.sim.get_observations_at", "DummyRLEnv.habitat_env.task.sensor_suite.get_observations", "torch.Tensor().to", "einops.rearrange", "torch.Tensor().unsqueeze().to", "occant_baselines.rl.policy.Mapper.ext_register_map", "einops.rearrange", "real_x_vals[].item", "start_y.item", "real_z_vals[].item", "numpy.sin().item", "numpy.cos().item", "torch.Tensor", "torch.Tensor().unsqueeze", "numpy.sin", "numpy.cos", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.config.default.get_config", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.generate_topdown_maps.generate_environment_layouts.safe_mkdir", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.config.default.get_extended_config", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.seed", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.reset", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.maps.get_topdown_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper.ext_register_map"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "config", "=", "get_config", "(", ")", "\n", "\n", "mapper_config", "=", "config", ".", "RL", ".", "ANS", ".", "MAPPER", "\n", "mapper_config", ".", "defrost", "(", ")", "\n", "mapper_config", ".", "map_size", "=", "65", "\n", "mapper_config", ".", "map_scale", "=", "0.05", "\n", "mapper_config", ".", "freeze", "(", ")", "\n", "\n", "mapper", "=", "Mapper", "(", "mapper_config", ",", "None", ")", "\n", "\n", "M", "=", "args", ".", "global_map_size", "\n", "\n", "config_path", "=", "args", ".", "config_path", "\n", "save_dir", "=", "args", ".", "save_dir", "\n", "safe_mkdir", "(", "save_dir", ")", "\n", "\n", "config", "=", "habitat_extensions", ".", "get_extended_config", "(", "config_path", ")", "\n", "\n", "dataset_path", "=", "config", ".", "DATASET", ".", "DATA_PATH", ".", "replace", "(", "\"{split}\"", ",", "config", ".", "DATASET", ".", "SPLIT", ")", "\n", "with", "gzip", ".", "open", "(", "dataset_path", ",", "\"rt\"", ")", "as", "fp", ":", "\n", "        ", "dataset", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "num_episodes", "=", "len", "(", "dataset", "[", "\"episodes\"", "]", ")", "\n", "\n", "env", "=", "DummyRLEnv", "(", "config", "=", "config", ")", "\n", "env", ".", "seed", "(", "1234", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "\n", "for", "i", "in", "tqdm", ".", "tqdm", "(", "range", "(", "num_episodes", ")", ")", ":", "\n", "        ", "_", "=", "env", ".", "reset", "(", ")", "\n", "\n", "# Initialize a global map for the episode", "\n", "global_map", "=", "torch", ".", "zeros", "(", "1", ",", "2", ",", "M", ",", "M", ")", ".", "to", "(", "device", ")", "\n", "\n", "grid_size", "=", "config", ".", "TASK", ".", "GT_EGO_MAP", ".", "MAP_SCALE", "\n", "coordinate_max", "=", "maps", ".", "COORDINATE_MAX", "\n", "coordinate_min", "=", "maps", ".", "COORDINATE_MIN", "\n", "resolution", "=", "(", "coordinate_max", "-", "coordinate_min", ")", "/", "grid_size", "\n", "grid_resolution", "=", "(", "int", "(", "resolution", ")", ",", "int", "(", "resolution", ")", ")", "\n", "\n", "top_down_map", "=", "maps", ".", "get_topdown_map", "(", "env", ".", "habitat_env", ".", "sim", ",", "grid_resolution", ",", "20000", ")", "\n", "\n", "map_w", ",", "map_h", "=", "top_down_map", ".", "shape", "\n", "\n", "intervals", "=", "(", "max", "(", "int", "(", "1.0", "/", "grid_size", ")", ",", "1", ")", ",", "max", "(", "int", "(", "1.0", "/", "grid_size", ")", ",", "1", ")", ")", "\n", "x_vals", "=", "np", ".", "arange", "(", "0", ",", "map_w", ",", "intervals", "[", "0", "]", ",", "dtype", "=", "int", ")", "\n", "y_vals", "=", "np", ".", "arange", "(", "0", ",", "map_h", ",", "intervals", "[", "1", "]", ",", "dtype", "=", "int", ")", "\n", "coors", "=", "np", ".", "stack", "(", "np", ".", "meshgrid", "(", "x_vals", ",", "y_vals", ")", ",", "axis", "=", "2", ")", "# (H, W, 2)", "\n", "coors", "=", "coors", ".", "reshape", "(", "-", "1", ",", "2", ")", "# (H*W, 2)", "\n", "map_vals", "=", "top_down_map", "[", "coors", "[", ":", ",", "0", "]", ",", "coors", "[", ":", ",", "1", "]", "]", "\n", "valid_coors", "=", "coors", "[", "map_vals", ">", "0", "]", "\n", "\n", "real_x_vals", "=", "coordinate_max", "-", "valid_coors", "[", ":", ",", "0", "]", "*", "grid_size", "\n", "real_z_vals", "=", "coordinate_min", "+", "valid_coors", "[", ":", ",", "1", "]", "*", "grid_size", "\n", "start_y", "=", "env", ".", "habitat_env", ".", "sim", ".", "get_agent_state", "(", ")", ".", "position", "[", "1", "]", "\n", "\n", "for", "i", "in", "range", "(", "real_x_vals", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "theta", "in", "np", ".", "arange", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ",", "np", ".", "pi", "/", "3.0", ")", ":", "\n", "                ", "position", "=", "[", "\n", "real_x_vals", "[", "i", "]", ".", "item", "(", ")", ",", "\n", "start_y", ".", "item", "(", ")", ",", "\n", "real_z_vals", "[", "i", "]", ".", "item", "(", ")", ",", "\n", "]", "\n", "rotation", "=", "[", "\n", "0.0", ",", "\n", "np", ".", "sin", "(", "theta", "/", "2", ")", ".", "item", "(", ")", ",", "\n", "0.0", ",", "\n", "np", ".", "cos", "(", "theta", "/", "2", ")", ".", "item", "(", ")", ",", "\n", "]", "\n", "\n", "sim_obs", "=", "env", ".", "habitat_env", ".", "sim", ".", "get_observations_at", "(", "\n", "position", ",", "rotation", ",", "keep_agent_at_new_pose", "=", "True", "\n", ")", "\n", "episode", "=", "env", ".", "habitat_env", ".", "current_episode", "\n", "obs", "=", "env", ".", "habitat_env", ".", "task", ".", "sensor_suite", ".", "get_observations", "(", "\n", "observations", "=", "sim_obs", ",", "episode", "=", "episode", ",", "task", "=", "env", ".", "habitat_env", ".", "task", "\n", ")", "\n", "ego_map_gt", "=", "torch", ".", "Tensor", "(", "obs", "[", "\"ego_map_gt\"", "]", ")", ".", "to", "(", "device", ")", "\n", "ego_map_gt", "=", "rearrange", "(", "ego_map_gt", ",", "\"h w c -> () c h w\"", ")", "\n", "pose_gt", "=", "torch", ".", "Tensor", "(", "obs", "[", "\"pose_gt\"", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "global_map", "=", "mapper", ".", "ext_register_map", "(", "global_map", ",", "ego_map_gt", ",", "pose_gt", ")", "\n", "\n", "# Save data", "\n", "", "", "global_map_np", "=", "asnumpy", "(", "rearrange", "(", "global_map", ",", "\"b c h w -> b h w c\"", ")", "[", "0", "]", ")", "\n", "episode_id", "=", "env", ".", "habitat_env", ".", "current_episode", ".", "episode_id", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "f\"episode_id_{episode_id}.npy\"", ")", ",", "global_map_np", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.double_conv.__init__": [[19, 28], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ")", ":", "\n", "        ", "super", "(", "double_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_ch", ",", "out_ch", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.double_conv.forward": [[30, 33], ["unet.double_conv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.inconv.__init__": [[36, 39], ["torch.Module.__init__", "unet.double_conv"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ")", ":", "\n", "        ", "super", "(", "inconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "double_conv", "(", "in_ch", ",", "out_ch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.inconv.forward": [[40, 43], ["unet.inconv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.down.__init__": [[46, 49], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "unet.double_conv"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ")", ":", "\n", "        ", "super", "(", "down", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mpconv", "=", "nn", ".", "Sequential", "(", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "double_conv", "(", "in_ch", ",", "out_ch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.down.forward": [[50, 53], ["unet.down.mpconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "mpconv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.up.__init__": [[56, 65], ["torch.Module.__init__", "unet.double_conv", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "bilinear", "=", "True", ")", ":", "\n", "        ", "super", "(", "up", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "bilinear", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "in_ch", "//", "2", ",", "in_ch", "//", "2", ",", "2", ",", "stride", "=", "2", ")", "\n", "\n", "", "self", ".", "conv", "=", "double_conv", "(", "in_ch", ",", "out_ch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.up.forward": [[66, 82], ["unet.up.up", "torch.pad", "torch.pad", "torch.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet.up.conv", "x2.size", "torch.pad.size", "x2.size", "torch.pad.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x1", "=", "self", ".", "up", "(", "x1", ")", "\n", "\n", "# input is CHW", "\n", "diffY", "=", "x2", ".", "size", "(", ")", "[", "2", "]", "-", "x1", ".", "size", "(", ")", "[", "2", "]", "\n", "diffX", "=", "x2", ".", "size", "(", ")", "[", "3", "]", "-", "x1", ".", "size", "(", ")", "[", "3", "]", "\n", "\n", "x1", "=", "F", ".", "pad", "(", "x1", ",", "(", "diffX", "//", "2", ",", "diffX", "-", "diffX", "//", "2", ",", "diffY", "//", "2", ",", "diffY", "-", "diffY", "//", "2", ")", ")", "\n", "\n", "# for padding issues, see", "\n", "# https://github.com/HaiyongJiang/U-Net-Pytorch-Unstructured-Buggy/commit/0e854509c2cea854e247a9c615f175f76fbb2e3a", "\n", "# https://github.com/xiaopeng-liao/Pytorch-UNet/commit/8ebac70e633bac59fc22bb5195e513d5832fb3bd", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.outconv.__init__": [[85, 88], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ")", ":", "\n", "        ", "super", "(", "outconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.outconv.forward": [[89, 92], ["unet.outconv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.UNetEncoder.__init__": [[98, 105], ["torch.Module.__init__", "unet.inconv", "unet.down", "unet.down", "unet.down", "unet.down"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "nsf", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inc", "=", "inconv", "(", "n_channels", ",", "nsf", ")", "\n", "self", ".", "down1", "=", "down", "(", "nsf", ",", "nsf", "*", "2", ")", "\n", "self", ".", "down2", "=", "down", "(", "nsf", "*", "2", ",", "nsf", "*", "4", ")", "\n", "self", ".", "down3", "=", "down", "(", "nsf", "*", "4", ",", "nsf", "*", "8", ")", "\n", "self", ".", "down4", "=", "down", "(", "nsf", "*", "8", ",", "nsf", "*", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.UNetEncoder.forward": [[106, 114], ["unet.UNetEncoder.inc", "unet.UNetEncoder.down1", "unet.UNetEncoder.down2", "unet.UNetEncoder.down3", "unet.UNetEncoder.down4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "inc", "(", "x", ")", "# (bs, nsf, ..., ...)", "\n", "x2", "=", "self", ".", "down1", "(", "x1", ")", "# (bs, nsf*2, ... ,...)", "\n", "x3", "=", "self", ".", "down2", "(", "x2", ")", "# (bs, nsf*4, ..., ...)", "\n", "x4", "=", "self", ".", "down3", "(", "x3", ")", "# (bs, nsf*8, ..., ...)", "\n", "x5", "=", "self", ".", "down4", "(", "x4", ")", "# (bs, nsf*8, ..., ...)", "\n", "\n", "return", "{", "\"x1\"", ":", "x1", ",", "\"x2\"", ":", "x2", ",", "\"x3\"", ":", "x3", ",", "\"x4\"", ":", "x4", ",", "\"x5\"", ":", "x5", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.UNetDecoder.__init__": [[117, 124], ["torch.Module.__init__", "unet.up", "unet.up", "unet.up", "unet.up", "unet.outconv"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ",", "nsf", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "up1", "=", "up", "(", "nsf", "*", "16", ",", "nsf", "*", "4", ")", "\n", "self", ".", "up2", "=", "up", "(", "nsf", "*", "8", ",", "nsf", "*", "2", ")", "\n", "self", ".", "up3", "=", "up", "(", "nsf", "*", "4", ",", "nsf", ")", "\n", "self", ".", "up4", "=", "up", "(", "nsf", "*", "2", ",", "nsf", ")", "\n", "self", ".", "outc", "=", "outconv", "(", "nsf", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.UNetDecoder.forward": [[125, 143], ["unet.UNetDecoder.up1", "unet.UNetDecoder.up2", "unet.UNetDecoder.up3", "unet.UNetDecoder.up4", "unet.UNetDecoder.outc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xin", ")", ":", "\n", "        ", "\"\"\"\n        xin is a dictionary that consists of x1, x2, x3, x4, x5 keys\n        from the UNetEncoder\n        \"\"\"", "\n", "x1", "=", "xin", "[", "\"x1\"", "]", "# (bs, nsf, ..., ...)", "\n", "x2", "=", "xin", "[", "\"x2\"", "]", "# (bs, nsf*2, ..., ...)", "\n", "x3", "=", "xin", "[", "\"x3\"", "]", "# (bs, nsf*4, ..., ...)", "\n", "x4", "=", "xin", "[", "\"x4\"", "]", "# (bs, nsf*8, ..., ...)", "\n", "x5", "=", "xin", "[", "\"x5\"", "]", "# (bs, nsf*8, ..., ...)", "\n", "\n", "x", "=", "self", ".", "up1", "(", "x5", ",", "x4", ")", "# (bs, nsf*4, ..., ...)", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "x3", ")", "# (bs, nsf*2, ..., ...)", "\n", "x", "=", "self", ".", "up3", "(", "x", ",", "x2", ")", "# (bs, nsf, ..., ...)", "\n", "x", "=", "self", ".", "up4", "(", "x", ",", "x1", ")", "# (bs, nsf, ..., ...)", "\n", "x", "=", "self", ".", "outc", "(", "x", ")", "# (bs, n_classes, ..., ...)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.MiniUNetEncoder.__init__": [[150, 155], ["torch.Module.__init__", "unet.inconv", "unet.down", "unet.down"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["def", "__init__", "(", "self", ",", "n_channels", ",", "feat_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inc", "=", "inconv", "(", "n_channels", ",", "feat_size", "//", "2", ")", "\n", "self", ".", "down3p", "=", "down", "(", "feat_size", "//", "2", ",", "feat_size", ")", "\n", "self", ".", "down4p", "=", "down", "(", "feat_size", ",", "feat_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.MiniUNetEncoder.forward": [[156, 162], ["unet.MiniUNetEncoder.inc", "unet.MiniUNetEncoder.down3p", "unet.MiniUNetEncoder.down4p"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x3p", "=", "self", ".", "inc", "(", "x", ")", "\n", "x4p", "=", "self", ".", "down3p", "(", "x3p", ")", "\n", "x5p", "=", "self", ".", "down4p", "(", "x4p", ")", "\n", "\n", "return", "{", "\"x3p\"", ":", "x3p", ",", "\"x4p\"", ":", "x4p", ",", "\"x5p\"", ":", "x5p", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.LearnedRGBProjection.__init__": [[165, 197], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ValueError", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mtype", "=", "\"downsample\"", ",", "infeats", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "mtype", "==", "\"downsample\"", ":", "\n", "            ", "self", ".", "projection", "=", "nn", ".", "Sequential", "(", "# (bs, infeats, H, W)", "\n", "nn", ".", "Conv2d", "(", "infeats", ",", "infeats", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "infeats", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "infeats", ",", "infeats", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "infeats", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "infeats", ",", "infeats", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", "\n", ")", ",", "# (bs, 768, H/2, W/2)", "\n", ")", "\n", "", "elif", "mtype", "==", "\"upsample\"", ":", "\n", "            ", "self", ".", "projection", "=", "nn", ".", "Sequential", "(", "# (bs, infeats, H, W)", "\n", "nn", ".", "Conv2d", "(", "infeats", ",", "infeats", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "infeats", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "infeats", ",", "infeats", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "infeats", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Upsample", "(", "\n", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", "\n", ")", ",", "# (bs, infeats, H*2, W*2)", "\n", "nn", ".", "Conv2d", "(", "\n", "infeats", ",", "infeats", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", "\n", ")", ",", "# (bs, infeats, H*2, W*2),", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"LearnedRGBProjection: Undefined model type {mtype}!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.LearnedRGBProjection.forward": [[198, 200], ["unet.LearnedRGBProjection.projection"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "img_feats", ")", ":", "\n", "        ", "return", "self", ".", "projection", "(", "img_feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.MergeMultimodal.__init__": [[208, 219], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["def", "__init__", "(", "self", ",", "nfeats", ",", "nmodes", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_nmodes", "=", "nmodes", "\n", "self", ".", "merge", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "nmodes", "*", "nfeats", ",", "nfeats", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nfeats", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nfeats", ",", "nfeats", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nfeats", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nfeats", ",", "nfeats", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.MergeMultimodal.forward": [[221, 228], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet.MergeMultimodal.merge"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            xi - (bs, nfeats, H, W)\n        \"\"\"", "\n", "x", "=", "torch", ".", "cat", "(", "inputs", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "merge", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.ResNetRGBEncoder.__init__": [[235, 249], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torchvision.resnet50", "torchvision.resnet18", "ValueError"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["def", "__init__", "(", "self", ",", "resnet_type", "=", "\"resnet50\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "resnet_type", "==", "\"resnet50\"", ":", "\n", "            ", "resnet", "=", "tmodels", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "resnet_type", "==", "\"resnet18\"", ":", "\n", "            ", "resnet", "=", "tmodels", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"ResNet type {resnet_type} not defined!\"", ")", "\n", "\n", "", "self", ".", "resnet_base", "=", "nn", ".", "Sequential", "(", "# (B, 3, H, W)", "\n", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ",", "resnet", ".", "maxpool", "\n", ")", "\n", "self", ".", "resnet_block1", "=", "resnet", ".", "layer1", "# (256, H/4, W/4)", "\n", "self", ".", "resnet_block2", "=", "resnet", ".", "layer2", "# (512, H/8, W/8)", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.unet.ResNetRGBEncoder.forward": [[250, 264], ["unet.ResNetRGBEncoder.resnet_base", "unet.ResNetRGBEncoder.resnet_block1", "unet.ResNetRGBEncoder.resnet_block2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            x - RGB image of size (bs, 3, H, W)\n        \"\"\"", "\n", "x_base", "=", "self", ".", "resnet_base", "(", "x", ")", "\n", "x_block1", "=", "self", ".", "resnet_block1", "(", "x_base", ")", "\n", "x_block2", "=", "self", ".", "resnet_block2", "(", "x_block1", ")", "\n", "x_block1_red", "=", "F", ".", "avg_pool2d", "(", "\n", "x_block1", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", "\n", ")", "# (bs, 256, H/8, W/8)", "\n", "x_feat", "=", "torch", ".", "cat", "(", "[", "x_block1_red", ",", "x_block2", "]", ",", "dim", "=", "1", ")", "# (bs, 768, H/8, W/8)", "\n", "\n", "return", "x_feat", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.BaseModel.__init__": [[33, 48], ["torch.Module.__init__", "occant.BaseModel._create_gp_models"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.OccAntGroundTruth._create_gp_models"], ["    ", "def", "__init__", "(", "self", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "cfg", "\n", "\n", "if", "cfg", ".", "GP_ANTICIPATION", ".", "OUTPUT_NORMALIZATION", ".", "channel_0", "==", "\"sigmoid\"", ":", "\n", "            ", "self", ".", "normalize_channel_0", "=", "torch", ".", "sigmoid", "\n", "", "elif", "cfg", ".", "GP_ANTICIPATION", ".", "OUTPUT_NORMALIZATION", ".", "channel_0", "==", "\"softmax\"", ":", "\n", "            ", "self", ".", "normalize_channel_0", "=", "softmax_0d", "\n", "\n", "", "if", "cfg", ".", "GP_ANTICIPATION", ".", "OUTPUT_NORMALIZATION", ".", "channel_1", "==", "\"sigmoid\"", ":", "\n", "            ", "self", ".", "normalize_channel_1", "=", "torch", ".", "sigmoid", "\n", "", "elif", "cfg", ".", "GP_ANTICIPATION", ".", "OUTPUT_NORMALIZATION", ".", "channel_1", "==", "\"softmax\"", ":", "\n", "            ", "self", ".", "normalize_channel_1", "=", "softmax_2d", "\n", "\n", "", "self", ".", "_create_gp_models", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.BaseModel.forward": [[49, 55], ["occant.BaseModel._do_gp_anticipation", "final_outputs.update"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.OccAntGroundTruth._do_gp_anticipation", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.update"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "final_outputs", "=", "{", "}", "\n", "gp_outputs", "=", "self", ".", "_do_gp_anticipation", "(", "x", ")", "\n", "final_outputs", ".", "update", "(", "gp_outputs", ")", "\n", "\n", "return", "final_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.BaseModel._create_gp_models": [[56, 58], ["None"], "methods", ["None"], ["", "def", "_create_gp_models", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.BaseModel._do_gp_anticipation": [[59, 61], ["None"], "methods", ["None"], ["", "def", "_do_gp_anticipation", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.BaseModel._normalize_decoder_output": [[62, 66], ["occant.BaseModel.normalize_channel_0", "occant.BaseModel.normalize_channel_1", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "_normalize_decoder_output", "(", "self", ",", "x_dec", ")", ":", "\n", "        ", "x_dec_c0", "=", "self", ".", "normalize_channel_0", "(", "x_dec", "[", ":", ",", "0", "]", ")", "\n", "x_dec_c1", "=", "self", ".", "normalize_channel_1", "(", "x_dec", "[", ":", ",", "1", "]", ")", "\n", "return", "torch", ".", "stack", "(", "[", "x_dec_c0", ",", "x_dec_c1", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.ANSRGB._create_gp_models": [[76, 123], ["torchvision.resnet18", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample"], "methods", ["None"], ["def", "_create_gp_models", "(", "self", ")", ":", "\n", "        ", "resnet", "=", "tmodels", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "# (3, 128, 128)", "\n", "# Feature extraction", "\n", "resnet", ".", "conv1", ",", "\n", "resnet", ".", "bn1", ",", "\n", "resnet", ".", "relu", ",", "\n", "resnet", ".", "maxpool", ",", "\n", "resnet", ".", "layer1", ",", "\n", "resnet", ".", "layer2", ",", "\n", "resnet", ".", "layer3", ",", "\n", "resnet", ".", "layer4", ",", "# (512, 4, 4)", "\n", "# FC layers equivalent", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "1", ")", ",", "# (512, 4, 4)", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "1", ")", ",", "# (512, 4, 4)", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# Upsampling", "\n", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "3", ",", "padding", "=", "1", ")", ",", "# (256, 4, 4)", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Upsample", "(", "\n", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", "\n", ")", ",", "# (256, 8, 8)", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "3", ",", "padding", "=", "1", ")", ",", "# (128, 8, 8)", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Upsample", "(", "\n", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", "\n", ")", ",", "# (128, 16, 16),", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "3", ",", "padding", "=", "1", ")", ",", "# (64, 16, 16)", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Upsample", "(", "\n", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", "\n", ")", ",", "# (64, 32, 32),", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "3", ",", "padding", "=", "1", ")", ",", "# (32, 32, 32)", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Upsample", "(", "\n", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", "\n", ")", ",", "# (32, 64, 64),", "\n", "nn", ".", "Conv2d", "(", "32", ",", "2", ",", "3", ",", "padding", "=", "1", ")", ",", "# (2, 64, 64)", "\n", "nn", ".", "Upsample", "(", "\n", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", "\n", ")", ",", "# (2, 128, 128),", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.ANSRGB._do_gp_anticipation": [[126, 132], ["occant.ANSRGB.main", "occant.ANSRGB._normalize_decoder_output"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.generate_exploration_dataset.main", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.BaseModel._normalize_decoder_output"], ["", "def", "_do_gp_anticipation", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_dec", "=", "self", ".", "main", "(", "x", "[", "\"rgb\"", "]", ")", "\n", "x_dec", "=", "self", ".", "_normalize_decoder_output", "(", "x_dec", ")", "\n", "outputs", "=", "{", "\"occ_estimate\"", ":", "x_dec", "}", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.ANSDepth._create_gp_models": [[140, 142], ["None"], "methods", ["None"], ["def", "_create_gp_models", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.ANSDepth._do_gp_anticipation": [[143, 148], ["None"], "methods", ["None"], ["", "def", "_do_gp_anticipation", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_dec", "=", "x", "[", "\"ego_map_gt\"", "]", "\n", "outputs", "=", "{", "\"occ_estimate\"", ":", "x_dec", "}", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.OccAntRGB._create_gp_models": [[155, 199], ["occant_baselines.models.unet.ResNetRGBEncoder", "occant_baselines.models.unet.LearnedRGBProjection", "occant_baselines.models.unet.MiniUNetEncoder", "occant.OccAntRGB.config.clone", "occant.ANSRGB", "occant_baselines.models.unet.UNetEncoder", "occant_baselines.models.unet.MergeMultimodal", "occant_baselines.models.unet.MergeMultimodal", "occant_baselines.models.unet.MergeMultimodal", "occant_baselines.models.unet.UNetDecoder", "hasattr", "occant.OccAntRGB._load_pretrained_model", "occant.OccAntRGB.gp_rgb_encoder.parameters", "occant.OccAntRGB.gp_depth_proj_estimator.parameters"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.OccAntRGB._load_pretrained_model", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters"], ["def", "_create_gp_models", "(", "self", ")", ":", "\n", "        ", "nmodes", "=", "2", "\n", "gp_cfg", "=", "self", ".", "config", ".", "GP_ANTICIPATION", "\n", "\n", "# Compute constants", "\n", "resnet_type", "=", "(", "\n", "gp_cfg", ".", "resnet_type", "if", "hasattr", "(", "gp_cfg", ",", "\"resnet_type\"", ")", "else", "\"resnet50\"", "\n", ")", "\n", "infeats", "=", "768", "if", "resnet_type", "==", "\"resnet50\"", "else", "192", "\n", "nsf", "=", "gp_cfg", ".", "unet_nsf", "\n", "unet_feat_size", "=", "nsf", "*", "8", "\n", "\n", "# RGB encoder branch", "\n", "self", ".", "gp_rgb_encoder", "=", "ResNetRGBEncoder", "(", "resnet_type", ")", "\n", "self", ".", "gp_rgb_projector", "=", "LearnedRGBProjection", "(", "mtype", "=", "\"upsample\"", ",", "infeats", "=", "infeats", ")", "\n", "self", ".", "gp_rgb_unet", "=", "MiniUNetEncoder", "(", "infeats", ",", "unet_feat_size", ")", "\n", "\n", "# Depth projection estimator", "\n", "config", "=", "self", ".", "config", ".", "clone", "(", ")", "\n", "self", ".", "gp_depth_proj_estimator", "=", "ANSRGB", "(", "config", ")", "\n", "\n", "# Depth encoder branch", "\n", "self", ".", "gp_depth_proj_encoder", "=", "UNetEncoder", "(", "2", ",", "nsf", "=", "nsf", ")", "\n", "\n", "# Merge modules", "\n", "self", ".", "gp_merge_x5", "=", "MergeMultimodal", "(", "unet_feat_size", ",", "nmodes", "=", "nmodes", ")", "\n", "self", ".", "gp_merge_x4", "=", "MergeMultimodal", "(", "unet_feat_size", ",", "nmodes", "=", "nmodes", ")", "\n", "self", ".", "gp_merge_x3", "=", "MergeMultimodal", "(", "unet_feat_size", "//", "2", ",", "nmodes", "=", "nmodes", ")", "\n", "\n", "# Decoder module", "\n", "self", ".", "gp_decoder", "=", "UNetDecoder", "(", "gp_cfg", ".", "nclasses", ",", "nsf", "=", "nsf", ")", "\n", "\n", "self", ".", "_detach_depth_proj", "=", "gp_cfg", ".", "detach_depth_proj", "\n", "\n", "# Load pretrained model if available", "\n", "if", "gp_cfg", ".", "pretrained_depth_proj_model", "!=", "\"\"", ":", "\n", "            ", "self", ".", "_load_pretrained_model", "(", "gp_cfg", ".", "pretrained_depth_proj_model", ")", "\n", "\n", "", "if", "gp_cfg", ".", "freeze_features", ":", "\n", "            ", "for", "p", "in", "self", ".", "gp_rgb_encoder", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "", "", "if", "gp_cfg", ".", "freeze_depth_proj_model", ":", "\n", "            ", "for", "p", "in", "self", ".", "gp_depth_proj_estimator", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.OccAntRGB._do_gp_anticipation": [[200, 241], ["occant.OccAntRGB.gp_rgb_encoder", "occant.OccAntRGB.gp_rgb_projector", "occant.OccAntRGB.gp_rgb_unet", "occant.OccAntRGB.gp_merge_x5", "occant.OccAntRGB.gp_merge_x4", "occant.OccAntRGB.gp_merge_x3", "occant.OccAntRGB.gp_decoder", "occant.OccAntRGB._normalize_decoder_output", "occant.OccAntRGB.gp_depth_proj_estimator", "occant.OccAntRGB.gp_depth_proj_encoder", "occant.OccAntRGB.gp_depth_proj_encoder", "x_depth_proj.detach"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.BaseModel._normalize_decoder_output"], ["", "", "", "def", "_do_gp_anticipation", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            x is a dictionary containing the following keys:\n                'rgb' - (bs, 3, H, W) RGB input\n                'depth' - (bs, 3, H, W) Depth input - channels are repeated\n                'ego_map_gt' - (bs, 2, H, W) probabilities\n        \"\"\"", "\n", "x_rgb", "=", "self", ".", "gp_rgb_encoder", "(", "x", "[", "\"rgb\"", "]", ")", "# (bs, 768, H/8, W/8)", "\n", "x_gp", "=", "self", ".", "gp_rgb_projector", "(", "x_rgb", ")", "# (bs, 768, H/4, W/4)", "\n", "\n", "x_rgb_enc", "=", "self", ".", "gp_rgb_unet", "(", "x_gp", ")", "# {'x3p', 'x4p', 'x5p'}", "\n", "# Estimate projected occupancy", "\n", "x_depth_proj", "=", "self", ".", "gp_depth_proj_estimator", "(", "x", ")", "[", "\"occ_estimate\"", "]", "# (bs, 2, V, V)", "\n", "if", "self", ".", "_detach_depth_proj", ":", "\n", "            ", "x_depth_proj_enc", "=", "self", ".", "gp_depth_proj_encoder", "(", "\n", "x_depth_proj", ".", "detach", "(", ")", "\n", ")", "# {'x1', 'x2', 'x3', 'x4', 'x5'}", "\n", "", "else", ":", "\n", "            ", "x_depth_proj_enc", "=", "self", ".", "gp_depth_proj_encoder", "(", "\n", "x_depth_proj", "\n", ")", "# {'x1', 'x2', 'x3', 'x4', 'x5'}", "\n", "\n", "# Replace x_depth_proj_enc with merged features", "\n", "", "x5_inputs", "=", "[", "x_rgb_enc", "[", "\"x5p\"", "]", ",", "x_depth_proj_enc", "[", "\"x5\"", "]", "]", "\n", "x4_inputs", "=", "[", "x_rgb_enc", "[", "\"x4p\"", "]", ",", "x_depth_proj_enc", "[", "\"x4\"", "]", "]", "\n", "x3_inputs", "=", "[", "x_rgb_enc", "[", "\"x3p\"", "]", ",", "x_depth_proj_enc", "[", "\"x3\"", "]", "]", "\n", "\n", "x5_enc", "=", "self", ".", "gp_merge_x5", "(", "*", "x5_inputs", ")", "# (unet_feat_size  , H/16, H/16)", "\n", "x4_enc", "=", "self", ".", "gp_merge_x4", "(", "*", "x4_inputs", ")", "# (unet_feat_size  , H/8 , H/8 )", "\n", "x3_enc", "=", "self", ".", "gp_merge_x3", "(", "*", "x3_inputs", ")", "# (unet_feat_size/2, H/4 , H/4 )", "\n", "x_depth_proj_enc", "[", "\"x5\"", "]", "=", "x5_enc", "\n", "x_depth_proj_enc", "[", "\"x4\"", "]", "=", "x4_enc", "\n", "x_depth_proj_enc", "[", "\"x3\"", "]", "=", "x3_enc", "\n", "\n", "x_dec", "=", "self", ".", "gp_decoder", "(", "x_depth_proj_enc", ")", "\n", "x_dec", "=", "self", ".", "_normalize_decoder_output", "(", "x_dec", ")", "# (bs, 2, H, W)", "\n", "\n", "outputs", "=", "{", "\"depth_proj_estimate\"", ":", "x_depth_proj", ",", "\"occ_estimate\"", ":", "x_dec", "}", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.OccAntRGB._load_pretrained_model": [[242, 254], ["depth_proj_state_dict.items", "occant.OccAntRGB.gp_depth_proj_estimator.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "k.replace", "new_k.replace.replace.replace"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict"], ["", "def", "_load_pretrained_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "depth_proj_state_dict", "=", "torch", ".", "load", "(", "\n", "self", ".", "config", ".", "GP_ANTICIPATION", ".", "pretrained_depth_proj_model", ",", "map_location", "=", "\"cpu\"", "\n", ")", "[", "\"mapper_state_dict\"", "]", "\n", "cleaned_state_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "depth_proj_state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "(", "\"mapper_copy\"", "in", "k", ")", "or", "(", "\"projection_unit\"", "not", "in", "k", ")", ":", "\n", "                ", "continue", "\n", "", "new_k", "=", "k", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", "\n", "new_k", "=", "new_k", ".", "replace", "(", "\"mapper.projection_unit.main.main.\"", ",", "\"\"", ")", "\n", "cleaned_state_dict", "[", "new_k", "]", "=", "v", "\n", "", "self", ".", "gp_depth_proj_estimator", ".", "load_state_dict", "(", "cleaned_state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.OccAntDepth._create_gp_models": [[261, 271], ["occant_baselines.models.unet.UNetEncoder", "occant_baselines.models.unet.UNetDecoder"], "methods", ["None"], ["def", "_create_gp_models", "(", "self", ")", ":", "\n", "        ", "gp_cfg", "=", "self", ".", "config", ".", "GP_ANTICIPATION", "\n", "\n", "# Compute constants", "\n", "nsf", "=", "gp_cfg", ".", "unet_nsf", "\n", "unet_encoder", "=", "UNetEncoder", "(", "2", ",", "nsf", "=", "nsf", ")", "\n", "unet_decoder", "=", "UNetDecoder", "(", "gp_cfg", ".", "nclasses", ",", "nsf", "=", "nsf", ")", "\n", "unet_feat_size", "=", "nsf", "*", "8", "\n", "self", ".", "gp_depth_proj_encoder", "=", "unet_encoder", "\n", "self", ".", "gp_decoder", "=", "unet_decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.OccAntDepth._do_gp_anticipation": [[272, 287], ["occant.OccAntDepth.gp_depth_proj_encoder", "occant.OccAntDepth.gp_decoder", "occant.OccAntDepth._normalize_decoder_output"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.BaseModel._normalize_decoder_output"], ["", "def", "_do_gp_anticipation", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            x is a dictionary containing the following keys:\n                'ego_map_gt' - (bs, 2, H, W) input\n        \"\"\"", "\n", "x_enc", "=", "self", ".", "gp_depth_proj_encoder", "(", "\n", "x", "[", "\"ego_map_gt\"", "]", "\n", ")", "# dictionary with different outputs", "\n", "x_dec", "=", "self", ".", "gp_decoder", "(", "x_enc", ")", "# (bs, 2, H, W)", "\n", "x_dec", "=", "self", ".", "_normalize_decoder_output", "(", "x_dec", ")", "\n", "\n", "outputs", "=", "{", "\"occ_estimate\"", ":", "x_dec", "}", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.OccAntRGBD._create_gp_models": [[294, 327], ["occant_baselines.models.unet.UNetEncoder", "occant_baselines.models.unet.UNetDecoder", "occant_baselines.models.unet.ResNetRGBEncoder", "occant_baselines.models.unet.LearnedRGBProjection", "occant_baselines.models.unet.MiniUNetEncoder", "occant_baselines.models.unet.MergeMultimodal", "occant_baselines.models.unet.MergeMultimodal", "occant_baselines.models.unet.MergeMultimodal", "hasattr", "occant.OccAntRGBD.gp_rgb_encoder.parameters"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters"], ["def", "_create_gp_models", "(", "self", ")", ":", "\n", "        ", "nmodes", "=", "2", "\n", "gp_cfg", "=", "self", ".", "config", ".", "GP_ANTICIPATION", "\n", "\n", "# Compute constants", "\n", "resnet_type", "=", "(", "\n", "gp_cfg", ".", "resnet_type", "if", "hasattr", "(", "gp_cfg", ",", "\"resnet_type\"", ")", "else", "\"resnet50\"", "\n", ")", "\n", "infeats", "=", "768", "if", "resnet_type", "==", "\"resnet50\"", "else", "192", "\n", "nsf", "=", "gp_cfg", ".", "unet_nsf", "\n", "unet_encoder", "=", "UNetEncoder", "(", "2", ",", "nsf", "=", "nsf", ")", "\n", "unet_decoder", "=", "UNetDecoder", "(", "gp_cfg", ".", "nclasses", ",", "nsf", "=", "nsf", ")", "\n", "unet_feat_size", "=", "nsf", "*", "8", "\n", "\n", "# RGB encoder branch", "\n", "self", ".", "gp_rgb_encoder", "=", "ResNetRGBEncoder", "(", "resnet_type", ")", "\n", "self", ".", "gp_rgb_projector", "=", "LearnedRGBProjection", "(", "mtype", "=", "\"upsample\"", ",", "infeats", "=", "infeats", ")", "\n", "self", ".", "gp_rgb_unet", "=", "MiniUNetEncoder", "(", "infeats", ",", "unet_feat_size", ")", "\n", "\n", "# Depth encoder branch", "\n", "self", ".", "gp_depth_proj_encoder", "=", "unet_encoder", "\n", "\n", "# Merge modules", "\n", "self", ".", "gp_merge_x5", "=", "MergeMultimodal", "(", "unet_feat_size", ",", "nmodes", "=", "nmodes", ")", "\n", "self", ".", "gp_merge_x4", "=", "MergeMultimodal", "(", "unet_feat_size", ",", "nmodes", "=", "nmodes", ")", "\n", "self", ".", "gp_merge_x3", "=", "MergeMultimodal", "(", "unet_feat_size", "//", "2", ",", "nmodes", "=", "nmodes", ")", "\n", "\n", "# Decoder module", "\n", "self", ".", "gp_decoder", "=", "unet_decoder", "\n", "\n", "if", "gp_cfg", ".", "freeze_features", ":", "\n", "            ", "for", "p", "in", "self", ".", "gp_rgb_encoder", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.OccAntRGBD._do_gp_anticipation": [[328, 361], ["occant.OccAntRGBD.gp_rgb_encoder", "occant.OccAntRGBD.gp_rgb_projector", "occant.OccAntRGBD.gp_rgb_unet", "occant.OccAntRGBD.gp_depth_proj_encoder", "occant.OccAntRGBD.gp_merge_x5", "occant.OccAntRGBD.gp_merge_x4", "occant.OccAntRGBD.gp_merge_x3", "occant.OccAntRGBD.gp_decoder", "occant.OccAntRGBD._normalize_decoder_output"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.BaseModel._normalize_decoder_output"], ["", "", "", "def", "_do_gp_anticipation", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            x is a dictionary containing the following keys:\n                'rgb' - (bs, 3, H, W) RGB input\n                'ego_map_gt' - (bs, 2, H, W) probabilities\n        \"\"\"", "\n", "x_rgb", "=", "self", ".", "gp_rgb_encoder", "(", "x", "[", "\"rgb\"", "]", ")", "# (bs, infeats, H/8, W/8)", "\n", "x_gp", "=", "self", ".", "gp_rgb_projector", "(", "x_rgb", ")", "# (bs, infeats, H/4, W/4)", "\n", "\n", "x_rgb_enc", "=", "self", ".", "gp_rgb_unet", "(", "x_gp", ")", "# {'x3p', 'x4p', 'x5p'}", "\n", "x_depth_proj_enc", "=", "self", ".", "gp_depth_proj_encoder", "(", "\n", "x", "[", "\"ego_map_gt\"", "]", "\n", ")", "# {'x1', 'x2', 'x3', 'x4', 'x5'}", "\n", "\n", "# Replace x_depth_proj_enc with merged features", "\n", "x5_inputs", "=", "[", "x_rgb_enc", "[", "\"x5p\"", "]", ",", "x_depth_proj_enc", "[", "\"x5\"", "]", "]", "\n", "x4_inputs", "=", "[", "x_rgb_enc", "[", "\"x4p\"", "]", ",", "x_depth_proj_enc", "[", "\"x4\"", "]", "]", "\n", "x3_inputs", "=", "[", "x_rgb_enc", "[", "\"x3p\"", "]", ",", "x_depth_proj_enc", "[", "\"x3\"", "]", "]", "\n", "\n", "x5_enc", "=", "self", ".", "gp_merge_x5", "(", "*", "x5_inputs", ")", "# (unet_feat_size  , H/16, H/16)", "\n", "x4_enc", "=", "self", ".", "gp_merge_x4", "(", "*", "x4_inputs", ")", "# (unet_feat_size  , H/8 , H/8 )", "\n", "x3_enc", "=", "self", ".", "gp_merge_x3", "(", "*", "x3_inputs", ")", "# (unet_feat_size/2, H/4 , H/4 )", "\n", "x_depth_proj_enc", "[", "\"x5\"", "]", "=", "x5_enc", "\n", "x_depth_proj_enc", "[", "\"x4\"", "]", "=", "x4_enc", "\n", "x_depth_proj_enc", "[", "\"x3\"", "]", "=", "x3_enc", "\n", "\n", "x_dec", "=", "self", ".", "gp_decoder", "(", "x_depth_proj_enc", ")", "# (bs, 2, H, W)", "\n", "x_dec", "=", "self", ".", "_normalize_decoder_output", "(", "x_dec", ")", "\n", "\n", "outputs", "=", "{", "\"occ_estimate\"", ":", "x_dec", "}", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.OccAntGroundTruth._create_gp_models": [[368, 370], ["None"], "methods", ["None"], ["def", "_create_gp_models", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.OccAntGroundTruth._do_gp_anticipation": [[371, 376], ["None"], "methods", ["None"], ["", "def", "_do_gp_anticipation", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_dec", "=", "x", "[", "\"ego_map_gt_anticipated\"", "]", "# (bs, 2, H, W)", "\n", "outputs", "=", "{", "\"occ_estimate\"", ":", "x_dec", "}", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.OccupancyAnticipator.__init__": [[382, 404], ["torch.Module.__init__", "cfg.defrost", "cfg.freeze", "occant.ANSRGB", "occant.ANSDepth", "occant.OccAntRGB", "occant.OccAntDepth", "occant.OccAntRGBD", "occant.OccAntGroundTruth", "ValueError"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "cfg", "\n", "model_type", "=", "cfg", ".", "type", "\n", "self", ".", "_model_type", "=", "model_type", "\n", "cfg", ".", "defrost", "(", ")", "\n", "if", "model_type", "==", "\"ans_rgb\"", ":", "\n", "            ", "self", ".", "main", "=", "ANSRGB", "(", "cfg", ")", "\n", "", "elif", "model_type", "==", "\"ans_depth\"", ":", "\n", "            ", "self", ".", "main", "=", "ANSDepth", "(", "cfg", ")", "\n", "", "elif", "model_type", "==", "\"occant_rgb\"", ":", "\n", "            ", "self", ".", "main", "=", "OccAntRGB", "(", "cfg", ")", "\n", "", "elif", "model_type", "==", "\"occant_depth\"", ":", "\n", "            ", "self", ".", "main", "=", "OccAntDepth", "(", "cfg", ")", "\n", "", "elif", "model_type", "==", "\"occant_rgbd\"", ":", "\n", "            ", "self", ".", "main", "=", "OccAntRGBD", "(", "cfg", ")", "\n", "", "elif", "model_type", "==", "\"occant_ground_truth\"", ":", "\n", "            ", "self", ".", "main", "=", "OccAntGroundTruth", "(", "cfg", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid model_type {model_type}\"", ")", "\n", "\n", "", "cfg", ".", "freeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.OccupancyAnticipator.forward": [[405, 407], ["occant.OccupancyAnticipator.main"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.generate_exploration_dataset.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.OccupancyAnticipator.use_gp_anticipation": [[408, 411], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "use_gp_anticipation", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "main", ".", "use_gp_anticipation", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.OccupancyAnticipator.model_type": [[412, 415], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_type", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_model_type", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.occant.softmax_2d": [[22, 27], ["torch.softmax", "rearrange", "rearrange"], "function", ["None"], ["def", "softmax_2d", "(", "x", ")", ":", "\n", "    ", "b", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x_out", "=", "F", ".", "softmax", "(", "rearrange", "(", "x", ",", "\"b h w -> b (h w)\"", ")", ",", "dim", "=", "1", ")", "\n", "x_out", "=", "rearrange", "(", "x_out", ",", "\"b (h w) -> b h w\"", ",", "h", "=", "h", ")", "\n", "return", "x_out", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.mapnet.MapNet.__init__": [[145, 156], ["torch.Module.__init__", "math.radians", "math.radians"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_local_map_shape", "=", "cfg", ".", "local_map_shape", "\n", "self", ".", "map_scale", "=", "cfg", ".", "map_scale", "# meters", "\n", "self", ".", "config", "=", "cfg", "\n", "self", ".", "min_depth", "=", "cfg", ".", "min_depth", "\n", "self", ".", "max_depth", "=", "cfg", ".", "max_depth", "\n", "\n", "# Camera params for depth projection", "\n", "self", ".", "hfov", "=", "math", ".", "radians", "(", "cfg", ".", "hfov", ")", "\n", "self", ".", "vfov", "=", "math", ".", "radians", "(", "cfg", ".", "vfov", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.mapnet.MapNet.forward": [[157, 176], ["mapnet.MapNet._process_depth", "mapnet.MapNet._compute_spatial_locs", "mapnet.MapNet._ground_projection", "math.tan", "math.tan"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.mapnet.MapNet._process_depth", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.mapnet.MapNet._compute_spatial_locs", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.mapnet.MapNet._ground_projection"], ["", "def", "forward", "(", "self", ",", "img_feats", ",", "depth", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            img_feats - (bs, F, h, w)\n            depth - (bs, 3, H, W)\n        \"\"\"", "\n", "# Based on the image size, set the camera parameters", "\n", "H", ",", "W", "=", "depth", ".", "shape", "[", "2", ":", "4", "]", "\n", "self", ".", "fx", "=", "(", "W", "/", "2", ")", "*", "(", "1", "/", "math", ".", "tan", "(", "self", ".", "hfov", "/", "2", ")", ")", "\n", "self", ".", "fy", "=", "(", "H", "/", "2", ")", "*", "(", "1", "/", "math", ".", "tan", "(", "self", ".", "vfov", "/", "2", ")", ")", "\n", "self", ".", "cx", "=", "W", "/", "2", "\n", "self", ".", "cy", "=", "H", "/", "2", "\n", "self", ".", "K", "=", "depth", ".", "shape", "[", "2", "]", "/", "img_feats", ".", "shape", "[", "2", "]", "\n", "assert", "self", ".", "K", "==", "depth", ".", "shape", "[", "3", "]", "/", "img_feats", ".", "shape", "[", "3", "]", "\n", "depth", "=", "self", ".", "_process_depth", "(", "depth", ")", "\n", "spatial_locs", ",", "valid_inputs", "=", "self", ".", "_compute_spatial_locs", "(", "depth", ")", "\n", "x_gp", "=", "self", ".", "_ground_projection", "(", "img_feats", ",", "spatial_locs", ",", "valid_inputs", ")", "\n", "\n", "return", "x_gp", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.mapnet.MapNet._ground_projection": [[177, 197], ["mapnet.ground_projection"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.mapnet.ground_projection"], ["", "def", "_ground_projection", "(", "self", ",", "img_feats", ",", "spatial_locs", ",", "valid_inputs", ",", "eps", "=", "-", "1e16", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            img_feats       - (bs, F, H/K, W/K)\n            spatial_locs    - (bs, 2, H, W)\n                              for each batch, H and W, the (x, y) locations on map are given.\n            valid_inputs    - (bs, 1, H, W) ByteTensor\n            eps             - fill_value\n        Outputs:\n            proj_feats      - (bs, F, s, s)\n        \"\"\"", "\n", "output_feats", "=", "ground_projection", "(", "\n", "img_feats", ",", "\n", "spatial_locs", ",", "\n", "valid_inputs", ",", "\n", "self", ".", "_local_map_shape", "[", "1", ":", "]", ",", "\n", "self", ".", "K", ",", "\n", "eps", "=", "eps", ",", "\n", ")", "\n", "return", "output_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.mapnet.MapNet._compute_spatial_locs": [[198, 224], ["mapnet.compute_spatial_locs"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.mapnet.compute_spatial_locs"], ["", "def", "_compute_spatial_locs", "(", "\n", "self", ",", "depth_inputs", ",", "return_height", "=", "False", ",", "truncate_depth", "=", "-", "1.0", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            depth_inputs - (bs, 1, imh, imw) depth values per pixel in meters.\n        Outputs:\n            spatial_locs - (bs, 2, imh, imw) x,y locations of projection per\n                           pixel\n            valid_inputs - (bs, 1, imh, imw) ByteTensor (all locations where\n                           depth measurements are available)\n        \"\"\"", "\n", "camera_params", "=", "(", "self", ".", "fx", ",", "self", ".", "fy", ",", "self", ".", "cx", ",", "self", ".", "cy", ")", "\n", "local_scale", "=", "self", ".", "map_scale", "\n", "local_shape", "=", "self", ".", "_local_map_shape", "[", "1", ":", "]", "\n", "outputs", "=", "compute_spatial_locs", "(", "\n", "depth_inputs", ",", "\n", "local_shape", ",", "\n", "local_scale", ",", "\n", "camera_params", ",", "\n", "min_depth", "=", "self", ".", "min_depth", ",", "\n", "truncate_depth", "=", "truncate_depth", ",", "\n", "return_height", "=", "return_height", ",", "\n", ")", "# spatial_locs, valid_inputs, pixel_heights (optional)", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.mapnet.MapNet._process_depth": [[225, 237], ["depth[].unsqueeze"], "methods", ["None"], ["", "def", "_process_depth", "(", "self", ",", "depth", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            depth - (bs, 3, H, W)\n        NOTE - this is specific to HabitatSimulator. The depth in meters is\n        truncated to (self.min_depth, self.max_depth) meters, and scaled\n        between 0 to 1. These operations have to be undone to generate the\n        actual depth values in meters.\n        \"\"\"", "\n", "proc_depth", "=", "depth", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "proc_depth", "=", "proc_depth", "*", "self", ".", "max_depth", "+", "self", ".", "min_depth", "\n", "return", "proc_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.mapnet.DepthProjectionNet.__init__": [[240, 246], ["mapnet.MapNet.__init__"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "cfg", ")", "\n", "self", ".", "camera_height", "=", "cfg", ".", "camera_height", "\n", "self", ".", "height_thresh", "=", "cfg", ".", "height_thresholds", "\n", "self", ".", "truncate_depth", "=", "cfg", ".", "truncate_depth", "\n", "self", ".", "K", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.mapnet.DepthProjectionNet.forward": [[247, 288], ["mapnet.DepthProjectionNet._process_depth", "mapnet.DepthProjectionNet._compute_spatial_locs", "obstacle_mask.float.float.float", "free_mask.float.float.float", "mapnet.DepthProjectionNet._ground_projection", "mapnet.DepthProjectionNet._ground_projection", "occant_utils.common.dilate_tensor", "occant_utils.common.dilate_tensor", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "math.tan", "math.tan"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.mapnet.MapNet._process_depth", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.mapnet.MapNet._compute_spatial_locs", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.mapnet.MapNet._ground_projection", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.mapnet.MapNet._ground_projection", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.dilate_tensor", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.dilate_tensor"], ["", "def", "forward", "(", "self", ",", "depth", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            depth - (bs, 3, H, W)\n        \"\"\"", "\n", "bs", ",", "_", ",", "H", ",", "W", "=", "depth", ".", "shape", "\n", "device", "=", "depth", ".", "device", "\n", "height_thresh", "=", "self", ".", "height_thresh", "\n", "# Based on the image size, set the camera parameters", "\n", "self", ".", "fx", "=", "(", "W", "/", "2", ")", "*", "(", "1", "/", "math", ".", "tan", "(", "self", ".", "hfov", "/", "2", ")", ")", "\n", "self", ".", "fy", "=", "(", "H", "/", "2", ")", "*", "(", "1", "/", "math", ".", "tan", "(", "self", ".", "vfov", "/", "2", ")", ")", "\n", "self", ".", "cx", "=", "W", "/", "2", "\n", "self", ".", "cy", "=", "H", "/", "2", "\n", "# Preprocess depth and compute corresponding l", "\n", "depth", "=", "self", ".", "_process_depth", "(", "depth", ")", "\n", "spatial_locs", ",", "valid_inputs", ",", "pixel_heights", "=", "self", ".", "_compute_spatial_locs", "(", "\n", "depth", ",", "truncate_depth", "=", "self", ".", "truncate_depth", ",", "return_height", "=", "True", "\n", ")", "\n", "\n", "pixel_heights", "=", "pixel_heights", "+", "self", ".", "camera_height", "\n", "high_filter_mask", "=", "(", "pixel_heights", "<", "height_thresh", "[", "1", "]", ")", "&", "valid_inputs", "\n", "low_filter_mask", "=", "(", "pixel_heights", ">", "height_thresh", "[", "0", "]", ")", "&", "valid_inputs", "\n", "obstacle_mask", "=", "high_filter_mask", "&", "low_filter_mask", "\n", "free_mask", "=", "(", "pixel_heights", "<", "height_thresh", "[", "0", "]", ")", "&", "valid_inputs", "\n", "obstacle_mask", "=", "obstacle_mask", ".", "float", "(", ")", "# (bs, 1, H, W)", "\n", "free_mask", "=", "free_mask", ".", "float", "(", ")", "# (bs, 1, H, W)", "\n", "# Classify each pixel as obstacle / free-space", "\n", "x_gp_obstacles", "=", "self", ".", "_ground_projection", "(", "\n", "obstacle_mask", ",", "spatial_locs", ",", "valid_inputs", "\n", ")", "# (bs, 1, s, s)", "\n", "x_gp_free", "=", "self", ".", "_ground_projection", "(", "\n", "free_mask", ",", "spatial_locs", ",", "valid_inputs", "\n", ")", "# (bs, 1, s, s)", "\n", "# Dilate obstacles in x_gp", "\n", "x_gp_obstacles", "=", "dilate_tensor", "(", "x_gp_obstacles", ",", "3", ",", "iterations", "=", "2", ")", "\n", "# Dilate free space in x_gp", "\n", "x_gp_free", "=", "dilate_tensor", "(", "x_gp_free", ",", "5", ",", "iterations", "=", "2", ")", "\n", "# Compute explored space from free space and obstacles", "\n", "x_gp_explored", "=", "torch", ".", "max", "(", "x_gp_free", ",", "x_gp_obstacles", ")", "\n", "x_gp", "=", "torch", ".", "cat", "(", "[", "x_gp_obstacles", ",", "x_gp_explored", "]", ",", "dim", "=", "1", ")", "\n", "return", "x_gp", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.mapnet.ground_projection": [[19, 85], ["valid_inputs_depth.squeeze.squeeze", "torch.zeros().to", "torch.zeros().to", "output_feats_rshp.view.fill_", "output_feats_rshp.view.view", "torch.flip", "torch.flip", "invalid_writes.float().unsqueeze.float().unsqueeze", "input_feats_masked.view", "input_idxes_rshp.view().expand.view().expand", "torch_scatter.scatter_max", "output_feats.view.view", "torch.zeros", "torch.zeros", "invalid_writes.float().unsqueeze.float", "input_idxes_rshp.view().expand.view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["def", "ground_projection", "(", "img_feats", ",", "spatial_locs", ",", "valid_inputs", ",", "local_shape", ",", "K", ",", "eps", "=", "-", "1e16", ")", ":", "\n", "    ", "r\"\"\"Inputs:\n        img_feats       - (bs, F, H/K, W/K) image features to project to ground plane\n        spatial_locs    - (bs, 2, H, W)\n                          for each batch, H and W, the (x, y) locations on map are given.\n        valid_inputs    - (bs, 1, H, W) ByteTensor\n        local_shape     - (outh, outw) tuple indicating size of output projection\n        K               - image_size / map_shape ratio (needed for sampling values from spatial_locs)\n        eps             - fill_value\n    Outputs:\n        proj_feats      - (bs, F, s, s)\n    \"\"\"", "\n", "device", "=", "img_feats", ".", "device", "\n", "outh", ",", "outw", "=", "local_shape", "\n", "bs", ",", "F", ",", "HbyK", ",", "WbyK", "=", "img_feats", ".", "shape", "\n", "img_feat_locs", "=", "(", "\n", "(", "torch", ".", "arange", "(", "0", ",", "HbyK", ",", "1", ")", "*", "K", "+", "K", "/", "2", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "(", "torch", ".", "arange", "(", "0", ",", "WbyK", ",", "1", ")", "*", "K", "+", "K", "/", "2", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", ",", "\n", ")", "\n", "\n", "input_feats", "=", "img_feats", "\n", "input_idxes", "=", "spatial_locs", "[", "\n", ":", ",", ":", ",", "img_feat_locs", "[", "0", "]", "[", ":", ",", "None", "]", ",", "img_feat_locs", "[", "1", "]", "\n", "]", "# (bs, 2, HbyK, WbyK)", "\n", "valid_inputs_depth", "=", "valid_inputs", "[", "\n", ":", ",", ":", ",", "img_feat_locs", "[", "0", "]", "[", ":", ",", "None", "]", ",", "img_feat_locs", "[", "1", "]", "\n", "]", "# (bs, 1, HbyK, WbyK)", "\n", "valid_inputs_depth", "=", "valid_inputs_depth", ".", "squeeze", "(", "1", ")", "# (bs, HbyK, WbyK)", "\n", "invalid_inputs_depth", "=", "~", "valid_inputs_depth", "\n", "\n", "output_feats", "=", "torch", ".", "zeros", "(", "bs", ",", "F", ",", "outh", ",", "outw", ")", ".", "to", "(", "device", ")", "\n", "output_feats", ".", "fill_", "(", "eps", ")", "\n", "output_feats_rshp", "=", "output_feats", ".", "view", "(", "*", "output_feats", ".", "shape", "[", ":", "2", "]", ",", "-", "1", ")", "\n", "input_idxes_flip", "=", "torch", ".", "flip", "(", "input_idxes", ",", "[", "1", "]", ")", "# convert x, y to y, x", "\n", "\n", "invalid_writes", "=", "(", "\n", "(", "input_idxes_flip", "[", ":", ",", "0", "]", ">=", "outh", ")", "\n", "|", "(", "input_idxes_flip", "[", ":", ",", "1", "]", ">=", "outw", ")", "\n", "|", "(", "input_idxes_flip", "[", ":", ",", "0", "]", "<", "0", ")", "\n", "|", "(", "input_idxes_flip", "[", ":", ",", "1", "]", "<", "0", ")", "\n", "|", "invalid_inputs_depth", "\n", ")", "# (bs, H, W)", "\n", "\n", "# Set the idxes for all invalid locations to (0, 0)", "\n", "input_idxes_flip", "[", ":", ",", "0", "]", "[", "invalid_writes", "]", "=", "0", "\n", "input_idxes_flip", "[", ":", ",", "1", "]", "[", "invalid_writes", "]", "=", "0", "\n", "\n", "invalid_writes", "=", "invalid_writes", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "input_feats_masked", "=", "input_feats", "*", "(", "1", "-", "invalid_writes", ")", "+", "eps", "*", "invalid_writes", "\n", "input_feats_rshp", "=", "input_feats_masked", ".", "view", "(", "bs", ",", "F", ",", "-", "1", ")", "\n", "input_idxes_rshp", "=", "(", "\n", "input_idxes_flip", "[", ":", ",", "0", ",", ":", ",", ":", "]", "*", "outw", "+", "input_idxes_flip", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", ")", "\n", "input_idxes_rshp", "=", "input_idxes_rshp", ".", "view", "(", "bs", ",", "1", ",", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "F", ",", "-", "1", ")", "\n", "# output_feats_rshp, _ = torch_scatter.scatter_max(", "\n", "#     input_feats_rshp, input_idxes_rshp, dim=2, dim_size=outh * outw, fill_value=eps,", "\n", "# )", "\n", "output_feats_rshp", ",", "_", "=", "torch_scatter", ".", "scatter_max", "(", "\n", "input_feats_rshp", ",", "input_idxes_rshp", ",", "dim", "=", "2", ",", "dim_size", "=", "outh", "*", "outw", "\n", ")", "\n", "output_feats", "=", "output_feats_rshp", ".", "view", "(", "bs", ",", "F", ",", "outh", ",", "outw", ")", "\n", "eps_mask", "=", "(", "output_feats", "==", "eps", ")", ".", "float", "(", ")", "\n", "output_feats", "=", "output_feats", "*", "(", "1", "-", "eps_mask", ")", "+", "eps_mask", "*", "(", "output_feats", "-", "eps", ")", "\n", "\n", "return", "output_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.mapnet.compute_spatial_locs": [[87, 142], ["einops.rearrange", "einops.rearrange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "einops.rearrange.float().to", "einops.rearrange.float().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "einops.rearrange.float", "einops.rearrange.float"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["", "def", "compute_spatial_locs", "(", "\n", "depth_inputs", ",", "\n", "local_shape", ",", "\n", "local_scale", ",", "\n", "camera_params", ",", "\n", "min_depth", "=", "0.0", ",", "\n", "truncate_depth", "=", "-", "1.0", ",", "\n", "return_height", "=", "False", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Inputs:\n        depth_inputs  - (bs, 1, imh, imw) depth values per pixel in `units`.\n        local_shape   - (s, s) tuple of ground projection size\n        local_scale   - cell size of ground projection in `units`\n        camera_params - (fx, fy, cx, cy) tuple\n    Outputs:\n        spatial_locs  - (bs, 2, imh, imw) x,y locations of projection per pixel\n        valid_inputs  - (bs, 1, imh, imw) ByteTensor (all locations where\n                        depth measurements are available)\n\n    Conventions for the map: The agent is standing at the bottom center of the map and facing upward\n    in the egocentric coordinate.\n    \"\"\"", "\n", "fx", ",", "fy", ",", "cx", ",", "cy", "=", "camera_params", "\n", "bs", ",", "_", ",", "imh", ",", "imw", "=", "depth_inputs", ".", "shape", "\n", "s", "=", "local_shape", "[", "1", "]", "\n", "device", "=", "depth_inputs", ".", "device", "\n", "# Precompute the projection values", "\n", "# 2D image coordinates", "\n", "x", "=", "rearrange", "(", "torch", ".", "arange", "(", "0", ",", "imw", ")", ",", "\"w -> () () () w\"", ")", "\n", "y", "=", "rearrange", "(", "torch", ".", "arange", "(", "imh", ",", "0", ",", "step", "=", "-", "1", ")", ",", "\"h -> () () h ()\"", ")", "\n", "x", ",", "y", "=", "x", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "y", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "xx", "=", "(", "x", "-", "cx", ")", "/", "fx", "\n", "yy", "=", "(", "y", "-", "cy", ")", "/", "fy", "\n", "\n", "# 3D real-world coordinates (in meters)", "\n", "Z", "=", "depth_inputs", "\n", "X", "=", "xx", "*", "Z", "\n", "Y", "=", "yy", "*", "Z", "\n", "valid_inputs", "=", "depth_inputs", "!=", "min_depth", "\n", "if", "truncate_depth", ">", "0", ":", "\n", "        ", "valid_inputs", "=", "valid_inputs", "&", "(", "depth_inputs", "<=", "truncate_depth", ")", "\n", "# 2D ground projection coordinates (in meters)", "\n", "# Note: map_scale - dimension of each grid in meters", "\n", "# - depth/scale + (s-1) since image convention is image y downward", "\n", "# and agent is facing upwards.", "\n", "", "z_gp", "=", "(", "-", "(", "Z", "/", "local_scale", ")", "+", "(", "s", "-", "1", ")", ")", ".", "round", "(", ")", ".", "long", "(", ")", "# (bs, 1, imh, imw)", "\n", "x_gp", "=", "(", "(", "X", "/", "local_scale", ")", "+", "(", "s", "-", "1", ")", "/", "2", ")", ".", "round", "(", ")", ".", "long", "(", ")", "# (bs, 1, imh, imw)", "\n", "\n", "if", "return_height", ":", "\n", "        ", "outputs", "=", "(", "torch", ".", "cat", "(", "[", "x_gp", ",", "z_gp", "]", ",", "dim", "=", "1", ")", ",", "valid_inputs", ",", "Y", ")", "\n", "", "else", ":", "\n", "        ", "outputs", "=", "(", "torch", ".", "cat", "(", "[", "x_gp", ",", "z_gp", "]", ",", "dim", "=", "1", ")", ",", "valid_inputs", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.models.utils.crop_map": [[13, 57], ["h.size", "einops.repeat().float", "einops.repeat().float", "torch.stack().to", "torch.stack().to", "einops.repeat", "torch.grid_sample", "einops.repeat", "einops.repeat", "torch.stack", "torch.stack", "x_pos.unsqueeze().unsqueeze", "y_pos.unsqueeze().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x_pos.unsqueeze", "y_pos.unsqueeze"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["from", "scipy", "import", "stats", "\n", "\n", "from", "habitat_extensions", "import", "maps", "\n", "\n", "cv2", "=", "try_cv2_import", "(", ")", "\n", "\n", "\n", "def", "draw_collision", "(", "view", ":", "np", ".", "ndarray", ",", "alpha", ":", "float", "=", "0.4", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Draw translucent red strips on the border of input view to indicate\n    a collision has taken place.\n    Args:\n        view: input view of size HxWx3 in RGB order.\n        alpha: Opacity of red collision strip. 1 is completely non-transparent.\n    Returns:\n        A view with collision effect drawn.\n    \"\"\"", "\n", "strip_width", "=", "view", ".", "shape", "[", "0", "]", "//", "20", "\n", "mask", "=", "np", ".", "ones", "(", "view", ".", "shape", ")", "\n", "mask", "[", "strip_width", ":", "-", "strip_width", ",", "strip_width", ":", "-", "strip_width", "]", "=", "0", "\n", "mask", "=", "mask", "==", "1", "\n", "view", "[", "mask", "]", "=", "(", "alpha", "*", "np", ".", "array", "(", "[", "255", ",", "0", ",", "0", "]", ")", "+", "(", "1.0", "-", "alpha", ")", "*", "view", ")", "[", "mask", "]", "\n", "return", "view", "\n", "\n", "\n", "", "def", "truncated_normal_noise_distr", "(", "mu", ",", "var", ",", "width", ")", ":", "\n", "    ", "\"\"\"\n    Returns a truncated normal distribution.\n    mu - mean of gaussian\n    var - variance of gaussian\n    width - how much of the normal to sample on either sides of 0\n    \"\"\"", "\n", "lower", "=", "-", "width", "\n", "upper", "=", "width", "\n", "sigma", "=", "math", ".", "sqrt", "(", "var", ")", "\n", "\n", "X", "=", "stats", ".", "truncnorm", "(", "lower", ",", "upper", ",", "loc", "=", "mu", ",", "scale", "=", "sigma", ")", "\n", "\n", "return", "X", "\n", "\n", "\n", "", "def", "observations_to_image", "(", "\n", "observation", ":", "Dict", ",", "info", ":", "Dict", ",", "observation_size", ":", "Optional", "[", "int", "]", "=", "None", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    "]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.GlobalPolicy.__init__": [[41, 90], ["torch.Module.__init__", "hasattr", "hasattr", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "occant_baselines.rl.policy_utils.Flatten", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "occant_baselines.rl.policy_utils.Flatten", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "G", "=", "config", ".", "map_size", "\n", "\n", "# setting baseline eval modes", "\n", "self", ".", "random_explorer_baseline", "=", "False", "\n", "if", "hasattr", "(", "config", ",", "\"random_explorer\"", ")", ":", "\n", "            ", "if", "config", ".", "random_explorer", ":", "\n", "                ", "self", ".", "random_explorer_baseline", "=", "True", "\n", "\n", "", "", "self", ".", "difference_baseline_explorer", "=", "False", "\n", "if", "hasattr", "(", "config", ",", "\"difference_baseline_explorer\"", ")", ":", "\n", "            ", "if", "config", ".", "difference_baseline_explorer", ":", "\n", "                ", "self", ".", "difference_baseline_explorer", "=", "True", "\n", "\n", "", "", "self", ".", "actor", "=", "nn", ".", "Sequential", "(", "# (8, G, G)", "\n", "nn", ".", "Conv2d", "(", "8", ",", "8", ",", "3", ",", "padding", "=", "1", ")", ",", "# (8, G, G)", "\n", "nn", ".", "BatchNorm2d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "8", ",", "4", ",", "3", ",", "padding", "=", "1", ")", ",", "# (4, G, G)", "\n", "nn", ".", "BatchNorm2d", "(", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "4", ",", "4", ",", "5", ",", "padding", "=", "2", ")", ",", "# (4, G, G)", "\n", "nn", ".", "BatchNorm2d", "(", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "4", ",", "2", ",", "5", ",", "padding", "=", "2", ")", ",", "# (2, G, G)", "\n", "nn", ".", "BatchNorm2d", "(", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "2", ",", "1", ",", "5", ",", "padding", "=", "2", ")", ",", "# (1, G, G)", "\n", "Flatten", "(", ")", ",", "# (G*G, )", "\n", ")", "\n", "\n", "self", ".", "critic", "=", "nn", ".", "Sequential", "(", "# (8, G, G)", "\n", "nn", ".", "Conv2d", "(", "8", ",", "8", ",", "3", ",", "padding", "=", "1", ")", ",", "# (8, G, G)", "\n", "nn", ".", "BatchNorm2d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "8", ",", "4", ",", "3", ",", "padding", "=", "1", ")", ",", "# (4, G, G)", "\n", "nn", ".", "BatchNorm2d", "(", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "4", ",", "4", ",", "5", ",", "padding", "=", "2", ")", ",", "# (4, G, G)", "\n", "nn", ".", "BatchNorm2d", "(", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "4", ",", "2", ",", "5", ",", "padding", "=", "2", ")", ",", "# (2, G, G)", "\n", "nn", ".", "BatchNorm2d", "(", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "2", ",", "1", ",", "5", ",", "padding", "=", "2", ")", ",", "# (1, G, G)", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "G", "*", "self", ".", "G", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.GlobalPolicy.forward": [[100, 102], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.GlobalPolicy._get_h12": [[103, 113], ["occant_utils.common.crop_map", "torch.adaptive_max_pool2d", "torch.adaptive_max_pool2d", "torch.adaptive_max_pool2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.crop_map"], ["", "def", "_get_h12", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "[", "\"pose_in_map_at_t\"", "]", "\n", "h", "=", "inputs", "[", "\"map_at_t\"", "]", "\n", "\n", "h_1", "=", "crop_map", "(", "h", ",", "x", "[", ":", ",", ":", "2", "]", ",", "self", ".", "G", ")", "\n", "h_2", "=", "F", ".", "adaptive_max_pool2d", "(", "h", ",", "(", "self", ".", "G", ",", "self", ".", "G", ")", ")", "\n", "\n", "h_12", "=", "torch", ".", "cat", "(", "[", "h_1", ",", "h_2", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "h_12", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.GlobalPolicy.to_ddp": [[114, 121], ["torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "range", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "methods", ["None"], ["", "def", "to_ddp", "(", "self", ",", "device_ids", ",", "output_device", ")", ":", "\n", "        ", "self", ".", "pg1", "=", "torch", ".", "distributed", ".", "new_group", "(", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", ")", "\n", "self", ".", "pg2", "=", "torch", ".", "distributed", ".", "new_group", "(", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", ")", "\n", "self", ".", "actor", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "actor", ",", "device_ids", "=", "device_ids", ",", "\n", "output_device", "=", "output_device", ",", "process_group", "=", "self", ".", "pg1", ")", "\n", "self", ".", "critic", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "critic", ",", "device_ids", "=", "device_ids", ",", "\n", "output_device", "=", "output_device", ",", "process_group", "=", "self", ".", "pg2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.GlobalPolicy.act": [[122, 159], ["policy.GlobalPolicy._get_h12", "policy.GlobalPolicy.actor", "policy.GlobalPolicy.critic", "occant_utils.common.FixedCategorical.log_probs", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "occant_utils.common.FixedCategorical", "occant_utils.common.FixedCategorical.mode", "occant_utils.common.FixedCategorical.sample", "inputs.pop", "torch.zeros_like.reshape", "torch.zeros_like.reshape", "torch.zeros_like.reshape", "occant_utils.common.FixedCategorical", "occant_utils.common.FixedCategorical", "diff_scores[].sum", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.GlobalPolicy._get_h12", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.FixedCategorical.log_probs", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.FixedCategorical.mode", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.FixedCategorical.sample"], ["", "def", "act", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "prev_actions", ",", "masks", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Note: inputs['pose_in_map_at_t'] must obey the following conventions:\n              origin at top-left, downward Y and rightward X in the map coordinate system.\n        \"\"\"", "\n", "M", "=", "inputs", "[", "\"map_at_t\"", "]", ".", "shape", "[", "2", "]", "\n", "h_12", "=", "self", ".", "_get_h12", "(", "inputs", ")", "\n", "action_logits", "=", "self", ".", "actor", "(", "h_12", ")", "\n", "\n", "# random explorer baseline", "\n", "if", "self", ".", "random_explorer_baseline", ":", "\n", "            ", "uniform_logits", "=", "torch", ".", "zeros_like", "(", "action_logits", ")", "\n", "dist", "=", "FixedCategorical", "(", "logits", "=", "uniform_logits", ")", "\n", "", "elif", "self", ".", "difference_baseline_explorer", ":", "\n", "            ", "diff_scores", "=", "inputs", ".", "pop", "(", "'diff_scores'", ")", "\n", "diff_scores", "=", "diff_scores", ".", "reshape", "(", "diff_scores", ".", "shape", "[", "0", "]", ",", "self", ".", "G", "**", "2", ")", "\n", "diff_scores", "[", "diff_scores", "<", "0.5", "]", "=", "-", "np", ".", "inf", "\n", "diff_scores", "[", "diff_scores", ">=", "0.5", "]", "=", "1.", "\n", "\n", "# sanity check - if no meaningful differences samples a random point", "\n", "if", "diff_scores", "[", "diff_scores", "==", "1", "]", ".", "sum", "(", ")", "<", "1", ":", "\n", "                ", "diff_scores", "=", "torch", ".", "zeros_like", "(", "action_logits", ")", "\n", "\n", "", "dist", "=", "FixedCategorical", "(", "logits", "=", "diff_scores", ")", "\n", "", "else", ":", "\n", "            ", "dist", "=", "FixedCategorical", "(", "logits", "=", "action_logits", ")", "\n", "\n", "", "value", "=", "self", ".", "critic", "(", "h_12", ")", "\n", "\n", "if", "deterministic", ":", "\n", "            ", "action", "=", "dist", ".", "mode", "(", ")", "\n", "", "else", ":", "\n", "            ", "action", "=", "dist", ".", "sample", "(", ")", "\n", "\n", "", "action_log_probs", "=", "dist", ".", "log_probs", "(", "action", ")", "\n", "\n", "return", "value", ",", "action", ",", "action_log_probs", ",", "rnn_hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.GlobalPolicy.get_value": [[160, 164], ["policy.GlobalPolicy._get_h12", "policy.GlobalPolicy.critic"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.GlobalPolicy._get_h12"], ["", "def", "get_value", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "prev_actions", ",", "masks", ")", ":", "\n", "        ", "h_12", "=", "self", ".", "_get_h12", "(", "inputs", ")", "\n", "value", "=", "self", ".", "critic", "(", "h_12", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.GlobalPolicy.evaluate_actions": [[165, 176], ["policy.GlobalPolicy._get_h12", "policy.GlobalPolicy.actor", "occant_utils.common.FixedCategorical", "policy.GlobalPolicy.critic", "occant_utils.common.FixedCategorical.log_probs", "occant_utils.common.FixedCategorical.entropy().mean", "occant_utils.common.FixedCategorical.entropy"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.GlobalPolicy._get_h12", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.FixedCategorical.log_probs"], ["", "def", "evaluate_actions", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "prev_actions", ",", "masks", ",", "action", ")", ":", "\n", "        ", "h_12", "=", "self", ".", "_get_h12", "(", "inputs", ")", "\n", "action_logits", "=", "self", ".", "actor", "(", "h_12", ")", "\n", "dist", "=", "FixedCategorical", "(", "logits", "=", "action_logits", ")", "\n", "value", "=", "self", ".", "critic", "(", "h_12", ")", "\n", "\n", "action_log_probs", "=", "dist", ".", "log_probs", "(", "action", ")", "\n", "\n", "dist_entropy", "=", "dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "value", ",", "action_log_probs", ",", "dist_entropy", ",", "rnn_hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.LocalPolicy.__init__": [[179, 197], ["torch.Module.__init__", "occant_baselines.rl.policy_utils.CNNBase", "occant_utils.common.Categorical", "occant_utils.common.init", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.init"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nactions", "=", "config", ".", "nactions", "\n", "self", ".", "hidden_size", "=", "config", ".", "hidden_size", "\n", "embedding_buckets", "=", "config", ".", "EMBEDDING_BUCKETS", "\n", "\n", "self", ".", "base", "=", "CNNBase", "(", "\n", "True", ",", "\n", "embedding_buckets", ",", "\n", "hidden_size", "=", "self", ".", "hidden_size", ",", "\n", "img_mean", "=", "config", ".", "NORMALIZATION", ".", "img_mean", ",", "\n", "img_std", "=", "config", ".", "NORMALIZATION", ".", "img_std", ",", "\n", "input_shape", "=", "config", ".", "image_scale_hw", ",", "\n", ")", "\n", "\n", "self", ".", "dist", "=", "Categorical", "(", "self", ".", "hidden_size", ",", "self", ".", "nactions", ")", "\n", "init_", "=", "lambda", "m", ":", "init", "(", "\n", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "constant_", "(", "x", ",", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.LocalPolicy.recurrent_hidden_state_size": [[199, 203], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recurrent_hidden_state_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Size of rnn_hx.\"\"\"", "\n", "return", "self", ".", "base", ".", "recurrent_hidden_state_size", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.LocalPolicy.forward": [[204, 206], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "prev_actions", ",", "masks", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.LocalPolicy.to_ddp": [[207, 209], ["policy.LocalPolicy.base.to_ddp"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.to_ddp"], ["", "def", "to_ddp", "(", "self", ",", "device_ids", ",", "output_device", ")", ":", "\n", "        ", "self", ".", "base", ".", "to_ddp", "(", "device_ids", ",", "output_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.LocalPolicy.act": [[210, 223], ["policy.LocalPolicy.base", "policy.LocalPolicy.dist", "policy.LocalPolicy.log_probs", "policy.LocalPolicy.entropy().mean", "policy.LocalPolicy.mode", "policy.LocalPolicy.sample", "policy.LocalPolicy.entropy"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.base", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.FixedCategorical.log_probs", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.FixedCategorical.mode", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.FixedCategorical.sample"], ["", "def", "act", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "prev_actions", ",", "masks", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "value", ",", "actor_features", ",", "rnn_hxs", "=", "self", ".", "base", "(", "inputs", ",", "rnn_hxs", ",", "masks", ")", "\n", "dist", "=", "self", ".", "dist", "(", "actor_features", ")", "\n", "\n", "if", "deterministic", ":", "\n", "            ", "action", "=", "dist", ".", "mode", "(", ")", "\n", "", "else", ":", "\n", "            ", "action", "=", "dist", ".", "sample", "(", ")", "\n", "\n", "", "action_log_probs", "=", "dist", ".", "log_probs", "(", "action", ")", "\n", "dist_entropy", "=", "dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "value", ",", "action", ",", "action_log_probs", ",", "rnn_hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.LocalPolicy.get_value": [[224, 227], ["policy.LocalPolicy.base"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.base"], ["", "def", "get_value", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "prev_actions", ",", "masks", ")", ":", "\n", "        ", "value", ",", "_", ",", "_", "=", "self", ".", "base", "(", "inputs", ",", "rnn_hxs", ",", "masks", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.LocalPolicy.evaluate_actions": [[228, 236], ["policy.LocalPolicy.base", "policy.LocalPolicy.dist", "policy.LocalPolicy.log_probs", "policy.LocalPolicy.entropy().mean", "policy.LocalPolicy.entropy"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.base", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.FixedCategorical.log_probs"], ["", "def", "evaluate_actions", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "prev_actions", ",", "masks", ",", "action", ")", ":", "\n", "        ", "value", ",", "actor_features", ",", "rnn_hxs", "=", "self", ".", "base", "(", "inputs", ",", "rnn_hxs", ",", "masks", ")", "\n", "dist", "=", "self", ".", "dist", "(", "actor_features", ")", "\n", "\n", "action_log_probs", "=", "dist", ".", "log_probs", "(", "action", ")", "\n", "dist_entropy", "=", "dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "value", ",", "action_log_probs", ",", "dist_entropy", ",", "rnn_hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.HeuristicLocalPolicy.__init__": [[239, 243], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "eps", "=", "1.5", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.HeuristicLocalPolicy.forward": [[244, 246], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "prev_actions", ",", "masks", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.HeuristicLocalPolicy.act": [[247, 263], ["torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "math.radians", "action.long.long.long", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "act", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "prev_actions", ",", "masks", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "goal_xy", "=", "inputs", "[", "\"goal_at_t\"", "]", "\n", "goal_phi", "=", "torch", ".", "atan2", "(", "goal_xy", "[", ":", ",", "1", "]", ",", "goal_xy", "[", ":", ",", "0", "]", ")", "\n", "\n", "turn_angle", "=", "math", ".", "radians", "(", "self", ".", "config", ".", "AGENT_DYNAMICS", ".", "turn_angle", "+", "self", ".", "eps", ")", "\n", "fwd_action_flag", "=", "torch", ".", "abs", "(", "goal_phi", ")", "<=", "0.95", "*", "turn_angle", "\n", "turn_left_flag", "=", "~", "fwd_action_flag", "&", "(", "goal_phi", "<", "0", ")", "\n", "turn_right_flag", "=", "~", "fwd_action_flag", "&", "(", "goal_phi", ">", "0", ")", "\n", "\n", "action", "=", "torch", ".", "zeros_like", "(", "goal_xy", ")", "[", ":", ",", "0", ":", "1", "]", "\n", "action", "[", "fwd_action_flag", "]", "=", "0", "\n", "action", "[", "turn_left_flag", "]", "=", "1", "\n", "action", "[", "turn_right_flag", "]", "=", "2", "\n", "action", "=", "action", ".", "long", "(", ")", "\n", "\n", "return", "None", ",", "action", ",", "None", ",", "rnn_hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.HeuristicLocalPolicy.load_state_dict": [[264, 266], ["None"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper.__init__": [[269, 301], ["torch.Module.__init__", "einops.rearrange", "einops.rearrange", "occant_baselines.rl.policy_utils.PoseEstimator", "occant_baselines.models.mapnet.DepthProjectionNet", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "policy.Mapper.projection_unit.parameters"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "projection_unit", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "map_config", "=", "{", "\"size\"", ":", "config", ".", "map_size", ",", "\"scale\"", ":", "config", ".", "map_scale", "}", "\n", "V", "=", "self", ".", "map_config", "[", "\"size\"", "]", "\n", "s", "=", "self", ".", "map_config", "[", "\"scale\"", "]", "\n", "self", ".", "img_mean_t", "=", "rearrange", "(", "\n", "torch", ".", "Tensor", "(", "self", ".", "config", ".", "NORMALIZATION", ".", "img_mean", ")", ",", "\"c -> () c () ()\"", "\n", ")", "\n", "self", ".", "img_std_t", "=", "rearrange", "(", "\n", "torch", ".", "Tensor", "(", "self", ".", "config", ".", "NORMALIZATION", ".", "img_std", ")", ",", "\"c -> () c () ()\"", "\n", ")", "\n", "self", ".", "pose_estimator", "=", "PoseEstimator", "(", "\n", "V", ",", "\n", "self", ".", "config", ".", "pose_predictor_inputs", ",", "\n", "n_pose_layers", "=", "self", ".", "config", ".", "n_pose_layers", ",", "\n", "n_ensemble_layers", "=", "self", ".", "config", ".", "n_ensemble_layers", ",", "\n", "input_shape", "=", "self", ".", "config", ".", "image_scale_hw", ",", "\n", ")", "\n", "self", ".", "projection_unit", "=", "projection_unit", "\n", "if", "self", ".", "config", ".", "freeze_projection_unit", ":", "\n", "            ", "for", "p", "in", "self", ".", "projection_unit", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "self", ".", "depth_projection_net", "=", "DepthProjectionNet", "(", "\n", "self", ".", "projection_unit", ".", "main", ".", "config", ".", "EGO_PROJECTION", "\n", ")", "\n", "self", ".", "gt_map", "=", "None", "\n", "self", ".", "hat_map", "=", "None", "\n", "\n", "# Cache to store pre-computed information", "\n", "self", ".", "_cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper.forward": [[302, 326], ["policy.Mapper.predict_deltas", "policy.Mapper.depth_projection_net", "einops.rearrange", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "policy.Mapper._register_map", "policy.Mapper._register_map", "masks.view", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "policy.Mapper._register_map", "policy.Mapper._register_map", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper.predict_deltas", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper._register_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper._register_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper._register_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper._register_map"], ["", "def", "forward", "(", "self", ",", "x", ",", "masks", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "predict_deltas", "(", "x", ",", "masks", "=", "masks", ")", "\n", "mt_1", "=", "x", "[", "\"map_at_t_1\"", "]", "\n", "if", "masks", "is", "not", "None", ":", "\n", "            ", "mt_1", "=", "mt_1", "*", "masks", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "", "gt_projection", "=", "self", ".", "depth_projection_net", "(", "\n", "rearrange", "(", "x", "[", "\"depth_at_t\"", "]", ",", "\"b h w c -> b c h w\"", ")", "\n", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "gt_map", "is", "None", ":", "\n", "                ", "self", ".", "gt_map", "=", "torch", ".", "zeros_like", "(", "mt_1", ")", ".", "to", "(", "mt_1", ".", "device", ")", "\n", "self", ".", "hat_map", "=", "torch", ".", "zeros_like", "(", "mt_1", ")", ".", "to", "(", "mt_1", ".", "device", ")", "\n", "", "self", ".", "gt_map", "=", "self", ".", "_register_map", "(", "self", ".", "gt_map", ",", "gt_projection", ",", "outputs", "[", "\"xt_hat\"", "]", ")", "\n", "self", ".", "hat_map", "=", "self", ".", "_register_map", "(", "self", ".", "hat_map", ",", "outputs", "[", "\"pt\"", "]", ",", "outputs", "[", "\"xt_hat\"", "]", ")", "\n", "if", "self", ".", "config", ".", "use_gt_projection", ":", "\n", "                ", "mt", "=", "self", ".", "_register_map", "(", "mt_1", ",", "gt_projection", ",", "outputs", "[", "\"xt_hat\"", "]", ")", "\n", "", "else", ":", "\n", "                ", "mt", "=", "self", ".", "_register_map", "(", "mt_1", ",", "outputs", "[", "\"pt\"", "]", ",", "outputs", "[", "\"xt_hat\"", "]", ")", "\n", "\n", "", "", "outputs", "[", "\"gt_mt\"", "]", "=", "self", ".", "gt_map", "\n", "outputs", "[", "\"hat_mt\"", "]", "=", "self", ".", "hat_map", "\n", "outputs", "[", "\"mt\"", "]", "=", "mt", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper.predict_deltas": [[327, 410], ["occant_utils.common.process_image", "occant_utils.common.transpose_image", "occant_utils.common.transpose_image", "occant_utils.common.process_image", "occant_utils.common.transpose_image", "occant_utils.common.transpose_image", "occant_utils.common.process_image.size", "policy.Mapper._safe_cat", "policy.Mapper.projection_unit", "occant_utils.common.subtract_pose", "occant_utils.common.transpose_image", "occant_utils.common.transpose_image", "policy.Mapper._transform_observations", "policy.Mapper.pose_estimator", "occant_utils.common.add_pose", "occant_utils.common.add_pose", "policy.Mapper.items", "pose_inputs.keys", "print", "print", "pose_inputs[].detach"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.process_image", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.transpose_image", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.transpose_image", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.process_image", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.transpose_image", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.transpose_image", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper._safe_cat", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.subtract_pose", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.transpose_image", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.transpose_image", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper._transform_observations", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.add_pose", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.add_pose"], ["", "def", "predict_deltas", "(", "self", ",", "x", ",", "masks", "=", "None", ")", ":", "\n", "        ", "st_1", "=", "process_image", "(", "x", "[", "\"rgb_at_t_1\"", "]", ",", "self", ".", "img_mean_t", ",", "self", ".", "img_std_t", ")", "\n", "dt_1", "=", "transpose_image", "(", "x", "[", "\"depth_at_t_1\"", "]", ")", "\n", "ego_map_gt_at_t_1", "=", "transpose_image", "(", "x", "[", "\"ego_map_gt_at_t_1\"", "]", ")", "\n", "st", "=", "process_image", "(", "x", "[", "\"rgb_at_t\"", "]", ",", "self", ".", "img_mean_t", ",", "self", ".", "img_std_t", ")", "\n", "dt", "=", "transpose_image", "(", "x", "[", "\"depth_at_t\"", "]", ")", "\n", "ego_map_gt_at_t", "=", "transpose_image", "(", "x", "[", "\"ego_map_gt_at_t\"", "]", ")", "\n", "# This happens only for a baseline", "\n", "if", "(", "\n", "\"ego_map_gt_anticipated_at_t_1\"", "in", "x", "\n", "and", "x", "[", "\"ego_map_gt_anticipated_at_t_1\"", "]", "is", "not", "None", "\n", ")", ":", "\n", "            ", "ego_map_gt_anticipated_at_t_1", "=", "transpose_image", "(", "\n", "x", "[", "\"ego_map_gt_anticipated_at_t_1\"", "]", "\n", ")", "\n", "ego_map_gt_anticipated_at_t", "=", "transpose_image", "(", "\n", "x", "[", "\"ego_map_gt_anticipated_at_t\"", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "ego_map_gt_anticipated_at_t_1", "=", "None", "\n", "ego_map_gt_anticipated_at_t", "=", "None", "\n", "# Compute past and current egocentric maps", "\n", "", "bs", "=", "st_1", ".", "size", "(", "0", ")", "\n", "pu_inputs_t_1", "=", "{", "\n", "\"rgb\"", ":", "st_1", ",", "\n", "\"depth\"", ":", "dt_1", ",", "\n", "\"ego_map_gt\"", ":", "ego_map_gt_at_t_1", ",", "\n", "\"ego_map_gt_anticipated\"", ":", "ego_map_gt_anticipated_at_t_1", ",", "\n", "}", "\n", "pu_inputs_t", "=", "{", "\n", "\"rgb\"", ":", "st", ",", "\n", "\"depth\"", ":", "dt", ",", "\n", "\"ego_map_gt\"", ":", "ego_map_gt_at_t", ",", "\n", "\"ego_map_gt_anticipated\"", ":", "ego_map_gt_anticipated_at_t", ",", "\n", "}", "\n", "pu_inputs", "=", "self", ".", "_safe_cat", "(", "pu_inputs_t_1", ",", "pu_inputs_t", ")", "\n", "pu_outputs", "=", "self", ".", "projection_unit", "(", "pu_inputs", ")", "\n", "pu_outputs_t", "=", "{", "k", ":", "v", "[", "bs", ":", "]", "for", "k", ",", "v", "in", "pu_outputs", ".", "items", "(", ")", "}", "\n", "pt_1", ",", "pt", "=", "pu_outputs", "[", "\"occ_estimate\"", "]", "[", ":", "bs", "]", ",", "pu_outputs", "[", "\"occ_estimate\"", "]", "[", "bs", ":", "]", "\n", "# Compute relative pose", "\n", "dx", "=", "subtract_pose", "(", "x", "[", "\"pose_at_t_1\"", "]", ",", "x", "[", "\"pose_at_t\"", "]", ")", "\n", "# Estimate pose", "\n", "dx_hat", "=", "dx", "\n", "xt_hat", "=", "x", "[", "\"pose_at_t\"", "]", "\n", "all_pose_outputs", "=", "None", "\n", "if", "not", "self", ".", "config", ".", "ignore_pose_estimator", ":", "\n", "            ", "all_pose_outputs", "=", "{", "}", "\n", "pose_inputs", "=", "{", "}", "\n", "if", "\"rgb\"", "in", "self", ".", "config", ".", "pose_predictor_inputs", ":", "\n", "                ", "pose_inputs", "[", "\"rgb_t_1\"", "]", "=", "st_1", "\n", "pose_inputs", "[", "\"rgb_t\"", "]", "=", "st", "\n", "", "if", "\"depth\"", "in", "self", ".", "config", ".", "pose_predictor_inputs", ":", "\n", "                ", "pose_inputs", "[", "\"depth_t_1\"", "]", "=", "dt_1", "\n", "pose_inputs", "[", "\"depth_t\"", "]", "=", "dt", "\n", "", "if", "\"ego_map\"", "in", "self", ".", "config", ".", "pose_predictor_inputs", ":", "\n", "                ", "pose_inputs", "[", "\"ego_map_t_1\"", "]", "=", "pt_1", "\n", "pose_inputs", "[", "\"ego_map_t\"", "]", "=", "pt", "\n", "", "if", "self", ".", "config", ".", "detach_map", ":", "\n", "                ", "for", "k", "in", "pose_inputs", ".", "keys", "(", ")", ":", "\n", "                    ", "pose_inputs", "[", "k", "]", "=", "pose_inputs", "[", "k", "]", ".", "detach", "(", ")", "\n", "", "", "n_pose_inputs", "=", "self", ".", "_transform_observations", "(", "pose_inputs", ",", "dx", ")", "\n", "pose_outputs", "=", "self", ".", "pose_estimator", "(", "n_pose_inputs", ")", "\n", "if", "self", ".", "config", ".", "debug_log", ":", "\n", "                ", "print", "(", "\"Pose Estimated:\"", ")", "\n", "print", "(", "pose_outputs", ")", "\n", "", "dx_hat", "=", "add_pose", "(", "dx", ",", "pose_outputs", "[", "\"pose\"", "]", ")", "\n", "all_pose_outputs", "[", "\"pose_outputs\"", "]", "=", "pose_outputs", "\n", "# Estimate global pose", "\n", "xt_hat", "=", "add_pose", "(", "x", "[", "\"pose_hat_at_t_1\"", "]", ",", "dx_hat", ")", "\n", "# Zero out pose prediction based on the mask", "\n", "", "if", "masks", "is", "not", "None", ":", "\n", "            ", "xt_hat", "=", "xt_hat", "*", "masks", "\n", "dx_hat", "=", "dx_hat", "*", "masks", "\n", "", "outputs", "=", "{", "\n", "\"pt\"", ":", "pt", ",", "\n", "\"dx_hat\"", ":", "dx_hat", ",", "\n", "\"xt_hat\"", ":", "xt_hat", ",", "\n", "\"all_pu_outputs\"", ":", "pu_outputs_t", ",", "\n", "\"all_pose_outputs\"", ":", "all_pose_outputs", ",", "\n", "}", "\n", "if", "\"ego_map_hat\"", "in", "pu_outputs_t", ":", "\n", "            ", "outputs", "[", "\"ego_map_hat_at_t\"", "]", "=", "pu_outputs_t", "[", "\"ego_map_hat\"", "]", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper._bottom_row_spatial_transform": [[411, 432], ["occant_utils.common.bottom_row_padding", "policy.Mapper._spatial_transform", "occant_utils.common.bottom_row_cropping"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.bottom_row_padding", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper._spatial_transform", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.bottom_row_cropping"], ["", "def", "_bottom_row_spatial_transform", "(", "self", ",", "p", ",", "dx", ",", "invert", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            p - (bs, 2, V, V) local map\n            dx - (bs, 3) egocentric transformation --- (dx, dy, dtheta)\n        NOTE: The agent stands at the central column of the last row in the\n        ego-centric map and looks forward. But the rotation happens about the\n        center of the map.  To handle this, first zero-pad pt_1 and then crop\n        it after transforming.\n        Conventions:\n            The origin is at the bottom-center of the map.\n            X is upward with agent's forward direction\n            Y is rightward with agent's rightward direction\n        \"\"\"", "\n", "V", "=", "p", ".", "shape", "[", "2", "]", "\n", "p_pad", "=", "bottom_row_padding", "(", "p", ")", "\n", "p_trans_pad", "=", "self", ".", "_spatial_transform", "(", "p_pad", ",", "dx", ",", "invert", "=", "invert", ")", "\n", "# Crop out the original part", "\n", "p_trans", "=", "bottom_row_cropping", "(", "p_trans_pad", ",", "V", ")", "\n", "\n", "return", "p_trans", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper._spatial_transform": [[433, 455], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "occant_utils.common.spatial_transform_map"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.spatial_transform_map"], ["", "def", "_spatial_transform", "(", "self", ",", "p", ",", "dx", ",", "invert", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Applies the transformation dx to image p.\n        Inputs:\n            p - (bs, 2, H, W) map\n            dx - (bs, 3) egocentric transformation --- (dx, dy, dtheta)\n        Conventions:\n            The origin is at the center of the map.\n            X is upward with agent's forward direction\n            Y is rightward with agent's rightward direction\n        Note: These denote transforms in an agent's position. Not the image directly.\n        For example, if an agent is moving upward, then the map will be moving downward.\n        To disable this behavior, set invert=False.\n        \"\"\"", "\n", "s", "=", "self", ".", "map_config", "[", "\"scale\"", "]", "\n", "# Convert dx to map image coordinate system with X as rightward and Y as downward", "\n", "dx_map", "=", "torch", ".", "stack", "(", "\n", "[", "(", "dx", "[", ":", ",", "1", "]", "/", "s", ")", ",", "-", "(", "dx", "[", ":", ",", "0", "]", "/", "s", ")", ",", "dx", "[", ":", ",", "2", "]", "]", ",", "dim", "=", "1", "\n", ")", "# anti-clockwise rotation", "\n", "p_trans", "=", "spatial_transform_map", "(", "p", ",", "dx_map", ",", "invert", "=", "invert", ")", "\n", "\n", "return", "p_trans", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper._register_map": [[456, 484], ["torch.pad", "torch.pad", "torch.pad", "policy.Mapper._spatial_transform", "policy.Mapper._aggregate"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper._spatial_transform", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper._aggregate"], ["", "def", "_register_map", "(", "self", ",", "m", ",", "p", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Given the locally computed map, register it to the global map based\n        on the current position.\n        Inputs:\n            m - (bs, F, M, M) global map\n            p - (bs, F, V, V) local map\n            x - (bs, 3) in global coordinates\n        \"\"\"", "\n", "V", "=", "self", ".", "map_config", "[", "\"size\"", "]", "\n", "s", "=", "self", ".", "map_config", "[", "\"scale\"", "]", "\n", "M", "=", "m", ".", "shape", "[", "2", "]", "\n", "Vby2", "=", "(", "V", "-", "1", ")", "//", "2", "if", "V", "%", "2", "==", "1", "else", "V", "//", "2", "\n", "Mby2", "=", "(", "M", "-", "1", ")", "//", "2", "if", "M", "%", "2", "==", "1", "else", "M", "//", "2", "\n", "# The agent stands at the bottom-center of the egomap and looks upward", "\n", "left_h_pad", "=", "Mby2", "-", "V", "+", "1", "\n", "right_h_pad", "=", "M", "-", "V", "-", "left_h_pad", "\n", "left_w_pad", "=", "Mby2", "-", "Vby2", "\n", "right_w_pad", "=", "M", "-", "V", "-", "left_w_pad", "\n", "# Add zero padding to p so that it matches size of global map", "\n", "p_pad", "=", "F", ".", "pad", "(", "\n", "p", ",", "(", "left_w_pad", ",", "right_w_pad", ",", "left_h_pad", ",", "right_h_pad", ")", ",", "\"constant\"", ",", "0", "\n", ")", "\n", "p_reg", "=", "self", ".", "_spatial_transform", "(", "p_pad", ",", "x", ")", "\n", "# Aggregate", "\n", "m_updated", "=", "self", ".", "_aggregate", "(", "m", ",", "p_reg", ")", "\n", "\n", "return", "m_updated", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper._aggregate": [[485, 535], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "mask.unsqueeze.unsqueeze.unsqueeze", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "mask.unsqueeze.unsqueeze.unsqueeze", "mask.unsqueeze.unsqueeze.unsqueeze", "ValueError", "entropy.mean"], "methods", ["None"], ["", "def", "_aggregate", "(", "self", ",", "m", ",", "p_reg", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            m - (bs, 2, M, M) - global map\n            p_reg - (bs, 2, M, M) - registered egomap\n        \"\"\"", "\n", "reg_type", "=", "self", ".", "config", ".", "registration_type", "\n", "beta", "=", "self", ".", "config", ".", "map_registration_momentum", "\n", "if", "reg_type", "==", "\"max\"", ":", "\n", "            ", "m_updated", "=", "torch", ".", "max", "(", "m", ",", "p_reg", ")", "\n", "", "elif", "reg_type", "==", "\"overwrite\"", ":", "\n", "# Overwrite only the currently explored regions", "\n", "            ", "mask", "=", "(", "p_reg", "[", ":", ",", "1", "]", ">", "self", ".", "config", ".", "thresh_explored", ")", ".", "float", "(", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "m_updated", "=", "m", "*", "(", "1", "-", "mask", ")", "+", "p_reg", "*", "mask", "\n", "", "elif", "reg_type", "==", "\"moving_average\"", ":", "\n", "            ", "mask_unexplored", "=", "(", "\n", "(", "p_reg", "[", ":", ",", "1", "]", "<=", "self", ".", "config", ".", "thresh_explored", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", ")", "\n", "mask_unfilled", "=", "(", "m", "[", ":", ",", "1", "]", "==", "0", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "m_ma", "=", "p_reg", "*", "(", "1", "-", "beta", ")", "+", "m", "*", "beta", "\n", "m_updated", "=", "(", "\n", "m", "*", "mask_unexplored", "\n", "+", "m_ma", "*", "(", "1.0", "-", "mask_unexplored", ")", "*", "(", "1.0", "-", "mask_unfilled", ")", "\n", "+", "p_reg", "*", "(", "1.0", "-", "mask_unexplored", ")", "*", "mask_unfilled", "\n", ")", "\n", "", "elif", "reg_type", "==", "\"entropy_moving_average\"", ":", "\n", "            ", "explored_mask", "=", "(", "p_reg", "[", ":", ",", "1", "]", ">", "self", ".", "config", ".", "thresh_explored", ")", ".", "float", "(", ")", "\n", "log_p_reg", "=", "torch", ".", "log", "(", "p_reg", "+", "EPS_MAPPER", ")", "\n", "log_1_p_reg", "=", "torch", ".", "log", "(", "1", "-", "p_reg", "+", "EPS_MAPPER", ")", "\n", "entropy", "=", "-", "p_reg", "*", "log_p_reg", "-", "(", "1", "-", "p_reg", ")", "*", "log_1_p_reg", "\n", "entropy_mask", "=", "(", "entropy", ".", "mean", "(", "dim", "=", "1", ")", "<", "self", ".", "config", ".", "thresh_entropy", ")", ".", "float", "(", ")", "\n", "explored_mask", "=", "explored_mask", "*", "entropy_mask", "\n", "unfilled_mask", "=", "(", "m", "[", ":", ",", "1", "]", "==", "0", ")", ".", "float", "(", ")", "\n", "m_updated", "=", "m", "\n", "# For regions that are unfilled, write as it is", "\n", "mask", "=", "unfilled_mask", "*", "explored_mask", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "m_updated", "=", "m_updated", "*", "(", "1", "-", "mask", ")", "+", "p_reg", "*", "mask", "\n", "# For regions that are filled, do a moving average", "\n", "mask", "=", "(", "1", "-", "unfilled_mask", ")", "*", "explored_mask", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "p_reg_ma", "=", "(", "p_reg", "*", "(", "1", "-", "beta", ")", "+", "m_updated", "*", "beta", ")", "*", "mask", "\n", "m_updated", "=", "m_updated", "*", "(", "1", "-", "mask", ")", "+", "p_reg_ma", "*", "mask", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Mapper: registration_type: {self.config.registration_type} not defined!\"", "\n", ")", "\n", "\n", "", "return", "m_updated", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper.ext_register_map": [[536, 538], ["policy.Mapper._register_map"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper._register_map"], ["", "def", "ext_register_map", "(", "self", ",", "m", ",", "p", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_register_map", "(", "m", ",", "p", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper._transform_observations": [[539, 645], ["policy.Mapper._bottom_row_spatial_transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "einops.rearrange", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "T_world_camera2[].copy_", "T_world_camera2[].copy_", "T_world_camera2[].fill_", "T_world_camera2[].copy_", "T_world_camera2[].copy_", "T_world_camera2[].copy_", "T_world_camera2[].fill_", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "xy_newimg.transpose.transpose.transpose", "einops.rearrange", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "policy.Mapper._cache.keys", "math.radians", "math.radians", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "policy.Mapper.cpu", "policy.Mapper._cache[].to", "policy.Mapper._cache.keys", "numpy.meshgrid", "torch.Tensor().to().unsqueeze", "torch.Tensor().to().unsqueeze", "torch.Tensor().to().unsqueeze", "torch.Tensor().to().unsqueeze", "torch.Tensor().to().unsqueeze", "torch.Tensor().to().unsqueeze", "torch.Tensor().to().unsqueeze", "torch.Tensor().to().unsqueeze", "torch.Tensor().to().unsqueeze", "torch.Tensor().to().unsqueeze", "torch.Tensor().to().unsqueeze", "torch.Tensor().to().unsqueeze", "torch.Tensor().to().unsqueeze", "torch.Tensor().to().unsqueeze", "torch.Tensor().to().unsqueeze", "torch.Tensor().to().unsqueeze", "torch.Tensor().to().unsqueeze", "torch.Tensor().to().unsqueeze", "policy.Mapper.cpu", "policy.Mapper.cpu", "policy.Mapper._cache[].to", "policy.Mapper._cache[].to", "policy.Mapper._cache.keys", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "policy.Mapper.cpu", "policy.Mapper._cache[].to", "policy.Mapper.unsqueeze", "torch.matmul.transpose", "torch.matmul.transpose", "torch.matmul.transpose", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "numpy.linspace", "numpy.linspace", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "policy.Mapper.reshape", "policy.Mapper.reshape", "math.tan", "math.tan"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper._bottom_row_spatial_transform", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["", "def", "_transform_observations", "(", "self", ",", "inputs", ",", "dx", ")", ":", "\n", "        ", "\"\"\"Converts observations from t-1 to coordinate frame for t.\n        \"\"\"", "\n", "# ====================== Transform past egocentric map ========================", "\n", "if", "\"ego_map_t_1\"", "in", "inputs", ":", "\n", "            ", "ego_map_t_1", "=", "inputs", "[", "\"ego_map_t_1\"", "]", "\n", "ego_map_t_1_trans", "=", "self", ".", "_bottom_row_spatial_transform", "(", "\n", "ego_map_t_1", ",", "dx", ",", "invert", "=", "True", "\n", ")", "\n", "inputs", "[", "\"ego_map_t_1\"", "]", "=", "ego_map_t_1_trans", "\n", "", "occ_cfg", "=", "self", ".", "projection_unit", ".", "main", ".", "config", "\n", "# ========================= Transform rgb and depth ===========================", "\n", "if", "\"depth_t_1\"", "in", "inputs", ":", "\n", "            ", "device", "=", "inputs", "[", "\"depth_t_1\"", "]", ".", "device", "\n", "depth_t_1", "=", "inputs", "[", "\"depth_t_1\"", "]", "\n", "if", "\"K\"", "not", "in", "self", ".", "_cache", ".", "keys", "(", ")", ":", "\n", "# Project images from previous camera pose to current camera pose", "\n", "# Compute intrinsic camera matrix", "\n", "                ", "hfov", "=", "math", ".", "radians", "(", "occ_cfg", ".", "EGO_PROJECTION", ".", "hfov", ")", "\n", "vfov", "=", "math", ".", "radians", "(", "occ_cfg", ".", "EGO_PROJECTION", ".", "vfov", ")", "\n", "K", "=", "torch", ".", "Tensor", "(", "\n", "[", "\n", "[", "1", "/", "math", ".", "tan", "(", "hfov", "/", "2.0", ")", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "1", "/", "math", ".", "tan", "(", "vfov", "/", "2.0", ")", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "1.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ",", "\n", "]", "\n", ")", ".", "to", "(", "\n", "device", "\n", ")", "# (4, 4)", "\n", "self", ".", "_cache", "[", "\"K\"", "]", "=", "K", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "                ", "K", "=", "self", ".", "_cache", "[", "\"K\"", "]", ".", "to", "(", "device", ")", "\n", "", "H", ",", "W", "=", "depth_t_1", ".", "shape", "[", "2", ":", "]", "\n", "min_depth", "=", "occ_cfg", ".", "EGO_PROJECTION", ".", "min_depth", "\n", "max_depth", "=", "occ_cfg", ".", "EGO_PROJECTION", ".", "max_depth", "\n", "depth_t_1_unnorm", "=", "depth_t_1", "*", "(", "max_depth", "-", "min_depth", ")", "+", "min_depth", "\n", "if", "\"xs\"", "not", "in", "self", ".", "_cache", ".", "keys", "(", ")", ":", "\n", "                ", "xs", ",", "ys", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "W", ")", ",", "np", ".", "linspace", "(", "1", ",", "-", "1", ",", "H", ")", ")", "\n", "xs", "=", "torch", ".", "Tensor", "(", "xs", ".", "reshape", "(", "1", ",", "H", ",", "W", ")", ")", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "ys", "=", "torch", ".", "Tensor", "(", "ys", ".", "reshape", "(", "1", ",", "H", ",", "W", ")", ")", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "_cache", "[", "\"xs\"", "]", "=", "xs", ".", "cpu", "(", ")", "\n", "self", ".", "_cache", "[", "\"ys\"", "]", "=", "ys", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "                ", "xs", "=", "self", ".", "_cache", "[", "\"xs\"", "]", ".", "to", "(", "device", ")", "\n", "ys", "=", "self", ".", "_cache", "[", "\"ys\"", "]", ".", "to", "(", "device", ")", "\n", "# Unproject", "\n", "# negate depth as the camera looks along -Z", "\n", "", "xys", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "xs", "*", "depth_t_1_unnorm", ",", "\n", "ys", "*", "depth_t_1_unnorm", ",", "\n", "-", "depth_t_1_unnorm", ",", "\n", "torch", ".", "ones_like", "(", "depth_t_1_unnorm", ")", ",", "\n", "]", ",", "\n", "dim", "=", "4", ",", "\n", ")", "# (bs, 1, H, W, 4)", "\n", "# Points in the target (camera 2)", "\n", "xys", "=", "rearrange", "(", "xys", ",", "\"b () h w f -> b (h w) f\"", ")", "\n", "if", "\"invK\"", "not", "in", "self", ".", "_cache", ".", "keys", "(", ")", ":", "\n", "                ", "invK", "=", "torch", ".", "inverse", "(", "K", ")", "\n", "self", ".", "_cache", "[", "\"invK\"", "]", "=", "invK", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "                ", "invK", "=", "self", ".", "_cache", "[", "\"invK\"", "]", ".", "to", "(", "device", ")", "\n", "", "xy_c2", "=", "torch", ".", "matmul", "(", "xys", ",", "invK", ".", "unsqueeze", "(", "0", ")", ")", "\n", "# ================ Camera 2 --> Camera 1 transformation ===============", "\n", "# We need the target to source transformation to warp from camera 1", "\n", "# to camera 2. In dx, dx[:, 0] is -Z, dx[:, 1] is X and dx[:, 2] is", "\n", "# rotation from -Z to X.", "\n", "translation", "=", "torch", ".", "stack", "(", "\n", "[", "dx", "[", ":", ",", "1", "]", ",", "torch", ".", "zeros_like", "(", "dx", "[", ":", ",", "1", "]", ")", ",", "-", "dx", "[", ":", ",", "0", "]", "]", ",", "dim", "=", "1", "\n", ")", "# (bs, 3)", "\n", "T_world_camera2", "=", "torch", ".", "zeros", "(", "xy_c2", ".", "shape", "[", "0", "]", ",", "4", ",", "4", ")", ".", "to", "(", "device", ")", "\n", "# Right-hand-rule rotation about Y axis", "\n", "cos_theta", "=", "torch", ".", "cos", "(", "-", "dx", "[", ":", ",", "2", "]", ")", "\n", "sin_theta", "=", "torch", ".", "sin", "(", "-", "dx", "[", ":", ",", "2", "]", ")", "\n", "T_world_camera2", "[", ":", ",", "0", ",", "0", "]", ".", "copy_", "(", "cos_theta", ")", "\n", "T_world_camera2", "[", ":", ",", "0", ",", "2", "]", ".", "copy_", "(", "sin_theta", ")", "\n", "T_world_camera2", "[", ":", ",", "1", ",", "1", "]", ".", "fill_", "(", "1.0", ")", "\n", "T_world_camera2", "[", ":", ",", "2", ",", "0", "]", ".", "copy_", "(", "-", "sin_theta", ")", "\n", "T_world_camera2", "[", ":", ",", "2", ",", "2", "]", ".", "copy_", "(", "cos_theta", ")", "\n", "T_world_camera2", "[", ":", ",", ":", "3", ",", "3", "]", ".", "copy_", "(", "translation", ")", "\n", "T_world_camera2", "[", ":", ",", "3", ",", "3", "]", ".", "fill_", "(", "1.0", ")", "\n", "# Transformation matrix from camera 2 --> world.", "\n", "T_camera1_camera2", "=", "T_world_camera2", "# (bs, 4, 4)", "\n", "xy_c1", "=", "torch", ".", "matmul", "(", "\n", "T_camera1_camera2", ",", "xy_c2", ".", "transpose", "(", "1", ",", "2", ")", "\n", ")", "# (bs, 4, HW)", "\n", "# Convert camera coordinates to image coordinates", "\n", "xy_newimg", "=", "torch", ".", "matmul", "(", "K", ",", "xy_c1", ")", "# (bs, 4, HW)", "\n", "xy_newimg", "=", "xy_newimg", ".", "transpose", "(", "1", ",", "2", ")", "# (bs, HW, 4)", "\n", "xys_newimg", "=", "xy_newimg", "[", ":", ",", ":", ",", ":", "2", "]", "/", "(", "\n", "-", "xy_newimg", "[", ":", ",", ":", ",", "2", ":", "3", "]", "+", "1e-8", "\n", ")", "# (bs, HW, 2)", "\n", "# Flip back to y-down to match array indexing", "\n", "xys_newimg", "[", ":", ",", ":", ",", "1", "]", "*=", "-", "1", "# (bs, HW, 2)", "\n", "# ================== Apply warp to RGB, Depth images ==================", "\n", "sampler", "=", "rearrange", "(", "xys_newimg", ",", "\"b (h w) f -> b h w f\"", ",", "h", "=", "H", ",", "w", "=", "W", ")", "\n", "depth_t_1_trans", "=", "F", ".", "grid_sample", "(", "depth_t_1", ",", "sampler", ",", "padding_mode", "=", "\"zeros\"", ")", "\n", "inputs", "[", "\"depth_t_1\"", "]", "=", "depth_t_1_trans", "\n", "if", "\"rgb_t_1\"", "in", "inputs", ":", "\n", "                ", "rgb_t_1", "=", "inputs", "[", "\"rgb_t_1\"", "]", "\n", "rgb_t_1_trans", "=", "F", ".", "grid_sample", "(", "rgb_t_1", ",", "sampler", ",", "padding_mode", "=", "\"zeros\"", ")", "\n", "inputs", "[", "\"rgb_t_1\"", "]", "=", "rgb_t_1_trans", "\n", "\n", "", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper._safe_cat": [[646, 654], ["d1.items", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_safe_cat", "(", "self", ",", "d1", ",", "d2", ")", ":", "\n", "        ", "\"\"\"Given two dicts of tensors with same keys, the values are\n        concatenated if not None.\n        \"\"\"", "\n", "d", "=", "{", "}", "\n", "for", "k", ",", "v1", "in", "d1", ".", "items", "(", ")", ":", "\n", "            ", "d", "[", "k", "]", "=", "None", "if", "v1", "is", "None", "else", "torch", ".", "cat", "(", "[", "v1", ",", "d2", "[", "k", "]", "]", ",", "0", ")", "\n", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.MapperDataParallelWrapper.forward": [[1042, 1049], ["policy.MapperDataParallelWrapper.predict_deltas", "policy.MapperDataParallelWrapper._estimate_ego_map"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper.predict_deltas", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.MapperDataParallelWrapper._estimate_ego_map"], ["    ", "def", "forward", "(", "self", ",", "*", "args", ",", "method_name", "=", "\"predict_deltas\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "method_name", "==", "\"predict_deltas\"", ":", "\n", "            ", "outputs", "=", "self", ".", "predict_deltas", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "method_name", "==", "\"estimate_ego_map\"", ":", "\n", "            ", "outputs", "=", "self", ".", "_estimate_ego_map", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.MapperDataParallelWrapper._estimate_ego_map": [[1050, 1052], ["policy.MapperDataParallelWrapper.projection_unit"], "methods", ["None"], ["", "def", "_estimate_ego_map", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "projection_unit", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.__init__": [[71, 77], ["logging.Logger.__init__"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "name", ",", "\n", "level", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", ",", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.add_filehandler": [[78, 80], ["None"], "methods", ["None"], ["", "def", "add_filehandler", "(", "self", ",", "log_filename", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info": [[81, 83], ["None"], "methods", ["None"], ["", "def", "info", "(", "self", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseWriter.__init__": [[86, 88], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseWriter.add_scalar": [[89, 91], ["None"], "methods", ["None"], ["", "def", "add_scalar", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer.__init__": [[100, 125], ["habitat_baselines.common.base_trainer.BaseRLTrainer.__init__", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "occant_exp_trainer.OccAntExpTrainer._is_master_process", "occant_exp_trainer.OccAntExpTrainer._synchronize_configs", "occant_exp_trainer.FalseLogger", "occant_exp_trainer.OccAntExpTrainer.logger.info"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._is_master_process", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._synchronize_configs", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info"], ["def", "__init__", "(", "self", ",", "config", "=", "None", ")", ":", "\n", "        ", "if", "config", "is", "not", "None", ":", "\n", "            ", "self", ".", "_synchronize_configs", "(", "config", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "# Set pytorch random seed for initialization", "\n", "torch", ".", "manual_seed", "(", "config", ".", "PYT_RANDOM_SEED", ")", "\n", "\n", "self", ".", "mapper", "=", "None", "\n", "self", ".", "local_actor_critic", "=", "None", "\n", "self", ".", "global_actor_critic", "=", "None", "\n", "self", ".", "ans_net", "=", "None", "\n", "self", ".", "planner", "=", "None", "\n", "self", ".", "mapper_agent", "=", "None", "\n", "self", ".", "local_agent", "=", "None", "\n", "self", ".", "global_agent", "=", "None", "\n", "self", ".", "envs", "=", "None", "\n", "\n", "if", "self", ".", "_is_master_process", "(", ")", ":", "\n", "            ", "self", ".", "logger", "=", "logger", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", "=", "FalseLogger", "(", "name", "=", "\"habitat\"", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "", "if", "config", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "f\"config: {config}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._synchronize_configs": [[126, 186], ["config.defrost", "numpy.radians", "numpy.degrees().item", "config.freeze", "float", "numpy.arctan", "numpy.degrees", "config.TASK_CONFIG.TASK.MEASUREMENTS.append", "numpy.tan"], "methods", ["None"], ["", "", "def", "_synchronize_configs", "(", "self", ",", "config", ")", ":", "\n", "        ", "r\"\"\"Matches configs for different parts of the model as well as the simulator.\n        \"\"\"", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "RL", ".", "ANS", ".", "PLANNER", ".", "nplanners", "=", "config", ".", "NUM_PROCESSES", "\n", "config", ".", "RL", ".", "ANS", ".", "MAPPER", ".", "thresh_explored", "=", "config", ".", "RL", ".", "ANS", ".", "thresh_explored", "\n", "config", ".", "RL", ".", "ANS", ".", "pyt_random_seed", "=", "config", ".", "PYT_RANDOM_SEED", "\n", "config", ".", "RL", ".", "ANS", ".", "OCCUPANCY_ANTICIPATOR", ".", "pyt_random_seed", "=", "config", ".", "PYT_RANDOM_SEED", "\n", "# Compute the EGO_PROJECTION options based on the", "\n", "# depth sensor information and agent parameters.", "\n", "map_size", "=", "config", ".", "RL", ".", "ANS", ".", "MAPPER", ".", "map_size", "\n", "map_scale", "=", "config", ".", "RL", ".", "ANS", ".", "MAPPER", ".", "map_scale", "\n", "min_depth", "=", "config", ".", "TASK_CONFIG", ".", "SIMULATOR", ".", "DEPTH_SENSOR", ".", "MIN_DEPTH", "\n", "max_depth", "=", "config", ".", "TASK_CONFIG", ".", "SIMULATOR", ".", "DEPTH_SENSOR", ".", "MAX_DEPTH", "\n", "hfov", "=", "config", ".", "TASK_CONFIG", ".", "SIMULATOR", ".", "DEPTH_SENSOR", ".", "HFOV", "\n", "width", "=", "config", ".", "TASK_CONFIG", ".", "SIMULATOR", ".", "DEPTH_SENSOR", ".", "WIDTH", "\n", "height", "=", "config", ".", "TASK_CONFIG", ".", "SIMULATOR", ".", "DEPTH_SENSOR", ".", "HEIGHT", "\n", "hfov_rad", "=", "np", ".", "radians", "(", "float", "(", "hfov", ")", ")", "\n", "vfov_rad", "=", "2", "*", "np", ".", "arctan", "(", "(", "height", "/", "width", ")", "*", "np", ".", "tan", "(", "hfov_rad", "/", "2.0", ")", ")", "\n", "vfov", "=", "np", ".", "degrees", "(", "vfov_rad", ")", ".", "item", "(", ")", "\n", "camera_height", "=", "config", ".", "TASK_CONFIG", ".", "SIMULATOR", ".", "DEPTH_SENSOR", ".", "POSITION", "[", "1", "]", "\n", "height_thresholds", "=", "[", "0.2", ",", "1.5", "]", "\n", "# Set the EGO_PROJECTION options", "\n", "ego_proj_config", "=", "config", ".", "RL", ".", "ANS", ".", "OCCUPANCY_ANTICIPATOR", ".", "EGO_PROJECTION", "\n", "ego_proj_config", ".", "local_map_shape", "=", "(", "2", ",", "map_size", ",", "map_size", ")", "\n", "ego_proj_config", ".", "map_scale", "=", "map_scale", "\n", "ego_proj_config", ".", "min_depth", "=", "min_depth", "\n", "ego_proj_config", ".", "max_depth", "=", "max_depth", "\n", "ego_proj_config", ".", "hfov", "=", "hfov", "\n", "ego_proj_config", ".", "vfov", "=", "vfov", "\n", "ego_proj_config", ".", "camera_height", "=", "camera_height", "\n", "ego_proj_config", ".", "height_thresholds", "=", "height_thresholds", "\n", "config", ".", "RL", ".", "ANS", ".", "OCCUPANCY_ANTICIPATOR", ".", "EGO_PROJECTION", "=", "ego_proj_config", "\n", "# Set the GT anticipation options", "\n", "wall_fov", "=", "config", ".", "RL", ".", "ANS", ".", "OCCUPANCY_ANTICIPATOR", ".", "GP_ANTICIPATION", ".", "wall_fov", "\n", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "GT_EGO_MAP_ANTICIPATED", ".", "WALL_FOV", "=", "wall_fov", "\n", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "GT_EGO_MAP_ANTICIPATED", ".", "MAP_SIZE", "=", "map_size", "\n", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "GT_EGO_MAP_ANTICIPATED", ".", "MAP_SCALE", "=", "map_scale", "\n", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "GT_EGO_MAP_ANTICIPATED", ".", "MAX_SENSOR_RANGE", "=", "-", "1", "\n", "# Set the correct image scaling values", "\n", "config", ".", "RL", ".", "ANS", ".", "MAPPER", ".", "image_scale_hw", "=", "config", ".", "RL", ".", "ANS", ".", "image_scale_hw", "\n", "config", ".", "RL", ".", "ANS", ".", "LOCAL_POLICY", ".", "image_scale_hw", "=", "config", ".", "RL", ".", "ANS", ".", "image_scale_hw", "\n", "# Set the agent dynamics for the local policy", "\n", "config", ".", "RL", ".", "ANS", ".", "LOCAL_POLICY", ".", "AGENT_DYNAMICS", ".", "forward_step", "=", "(", "\n", "config", ".", "TASK_CONFIG", ".", "SIMULATOR", ".", "FORWARD_STEP_SIZE", "\n", ")", "\n", "config", ".", "RL", ".", "ANS", ".", "LOCAL_POLICY", ".", "AGENT_DYNAMICS", ".", "turn_angle", "=", "(", "\n", "config", ".", "TASK_CONFIG", ".", "SIMULATOR", ".", "TURN_ANGLE", "\n", ")", "\n", "# Enable global_maps measure if imitation learning is used for local policy", "\n", "if", "config", ".", "RL", ".", "ANS", ".", "LOCAL_POLICY", ".", "learning_algorithm", "==", "\"il\"", ":", "\n", "            ", "if", "\"GT_GLOBAL_MAP\"", "not", "in", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "MEASUREMENTS", ":", "\n", "                ", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "MEASUREMENTS", ".", "append", "(", "\"GT_GLOBAL_MAP\"", ")", "\n", "", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "GT_GLOBAL_MAP", ".", "MAP_SIZE", "=", "(", "\n", "config", ".", "RL", ".", "ANS", ".", "overall_map_size", "\n", ")", "\n", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "GT_GLOBAL_MAP", ".", "MAP_SCALE", "=", "(", "\n", "config", ".", "RL", ".", "ANS", ".", "MAPPER", ".", "map_scale", "\n", ")", "\n", "", "config", ".", "freeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._setup_actor_critic_agent": [[187, 277], ["habitat.logger.add_filehandler", "occant_baselines.models.occant.OccupancyAnticipator", "occant_baselines.rl.policy_utils.OccupancyAnticipationWrapper", "occant_baselines.rl.ans.ActiveNeuralSLAMExplorer", "occant_baselines.models.mapnet.DepthProjectionNet", "occant_exp_trainer.OccAntExpTrainer.mapper.to", "occant_exp_trainer.OccAntExpTrainer.local_actor_critic.to", "occant_exp_trainer.OccAntExpTrainer.global_actor_critic.to", "occant_exp_trainer.OccAntExpTrainer.depth_projection_net.to", "occant_exp_trainer.OccAntExpTrainer.ans_net.to_ddp", "occant_baselines.supervised.map_update.MapUpdate", "habitat_baselines.rl.ppo.PPO", "os.mkdir", "os.path.join", "occant_exp_trainer.OccAntExpTrainer.resume_checkpoint", "habitat_baselines.rl.ppo.PPO", "occant_baselines.supervised.imitation.Imitation"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.add_filehandler", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.to_ddp", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer.resume_checkpoint"], ["", "def", "_setup_actor_critic_agent", "(", "self", ",", "ppo_cfg", ":", "Config", ",", "ans_cfg", ":", "Config", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Sets up actor critic and agent for PPO.\n\n        Args:\n            ppo_cfg: config node with relevant params\n            ans_cfg: config node for ActiveNeuralSLAM model\n\n        Returns:\n            None\n        \"\"\"", "\n", "try", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "config", ".", "TENSORBOARD_DIR", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "", "logger", ".", "add_filehandler", "(", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "TENSORBOARD_DIR", ",", "\"run.log\"", ")", ")", "\n", "\n", "occ_cfg", "=", "ans_cfg", ".", "OCCUPANCY_ANTICIPATOR", "\n", "mapper_cfg", "=", "ans_cfg", ".", "MAPPER", "\n", "# Create occupancy anticipation model", "\n", "occupancy_model", "=", "OccupancyAnticipator", "(", "occ_cfg", ")", "\n", "occupancy_model", "=", "OccupancyAnticipationWrapper", "(", "\n", "occupancy_model", ",", "mapper_cfg", ".", "map_size", ",", "(", "128", ",", "128", ")", "\n", ")", "\n", "# Create ANS model", "\n", "self", ".", "ans_net", "=", "ActiveNeuralSLAMExplorer", "(", "ans_cfg", ",", "occupancy_model", ")", "\n", "self", ".", "mapper", "=", "self", ".", "ans_net", ".", "mapper", "\n", "self", ".", "local_actor_critic", "=", "self", ".", "ans_net", ".", "local_policy", "\n", "self", ".", "global_actor_critic", "=", "self", ".", "ans_net", ".", "global_policy", "\n", "# Create depth projection model to estimate visible occupancy", "\n", "self", ".", "depth_projection_net", "=", "DepthProjectionNet", "(", "\n", "ans_cfg", ".", "OCCUPANCY_ANTICIPATOR", ".", "EGO_PROJECTION", "\n", ")", "\n", "# Set to device", "\n", "self", ".", "mapper", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "local_actor_critic", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "global_actor_critic", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "depth_projection_net", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "ans_net", ".", "to_ddp", "(", ")", "\n", "# ============================== Create agents ================================", "\n", "# Mapper agent", "\n", "self", ".", "mapper_agent", "=", "MapUpdate", "(", "\n", "self", ".", "mapper", ",", "\n", "lr", "=", "mapper_cfg", ".", "lr", ",", "\n", "eps", "=", "mapper_cfg", ".", "eps", ",", "\n", "label_id", "=", "mapper_cfg", ".", "label_id", ",", "\n", "max_grad_norm", "=", "mapper_cfg", ".", "max_grad_norm", ",", "\n", "pose_loss_coef", "=", "mapper_cfg", ".", "pose_loss_coef", ",", "\n", "occupancy_anticipator_type", "=", "ans_cfg", ".", "OCCUPANCY_ANTICIPATOR", ".", "type", ",", "\n", "freeze_projection_unit", "=", "mapper_cfg", ".", "freeze_projection_unit", ",", "\n", "num_update_batches", "=", "mapper_cfg", ".", "num_update_batches", ",", "\n", "batch_size", "=", "mapper_cfg", ".", "map_batch_size", ",", "\n", "mapper_rollouts", "=", "self", ".", "mapper_rollouts", ",", "\n", ")", "\n", "# Local policy", "\n", "if", "ans_cfg", ".", "LOCAL_POLICY", ".", "use_heuristic_policy", ":", "\n", "            ", "self", ".", "local_agent", "=", "None", "\n", "", "elif", "ans_cfg", ".", "LOCAL_POLICY", ".", "learning_algorithm", "==", "\"rl\"", ":", "\n", "            ", "self", ".", "local_agent", "=", "PPO", "(", "\n", "actor_critic", "=", "self", ".", "local_actor_critic", ",", "\n", "clip_param", "=", "ppo_cfg", ".", "clip_param", ",", "\n", "ppo_epoch", "=", "ppo_cfg", ".", "ppo_epoch", ",", "\n", "num_mini_batch", "=", "ppo_cfg", ".", "num_mini_batch", ",", "\n", "value_loss_coef", "=", "ppo_cfg", ".", "value_loss_coef", ",", "\n", "entropy_coef", "=", "ppo_cfg", ".", "local_entropy_coef", ",", "\n", "lr", "=", "ppo_cfg", ".", "local_policy_lr", ",", "\n", "eps", "=", "ppo_cfg", ".", "eps", ",", "\n", "max_grad_norm", "=", "ppo_cfg", ".", "max_grad_norm", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "local_agent", "=", "Imitation", "(", "\n", "actor_critic", "=", "self", ".", "local_actor_critic", ",", "\n", "lr", "=", "ppo_cfg", ".", "local_policy_lr", ",", "\n", "eps", "=", "ppo_cfg", ".", "eps", ",", "\n", "max_grad_norm", "=", "ppo_cfg", ".", "max_grad_norm", ",", "\n", ")", "\n", "# Global policy", "\n", "", "self", ".", "global_agent", "=", "PPO", "(", "\n", "actor_critic", "=", "self", ".", "global_actor_critic", ",", "\n", "clip_param", "=", "ppo_cfg", ".", "clip_param", ",", "\n", "ppo_epoch", "=", "ppo_cfg", ".", "ppo_epoch", ",", "\n", "num_mini_batch", "=", "ppo_cfg", ".", "num_mini_batch", ",", "\n", "value_loss_coef", "=", "ppo_cfg", ".", "value_loss_coef", ",", "\n", "entropy_coef", "=", "ppo_cfg", ".", "entropy_coef", ",", "\n", "lr", "=", "ppo_cfg", ".", "lr", ",", "\n", "eps", "=", "ppo_cfg", ".", "eps", ",", "\n", "max_grad_norm", "=", "ppo_cfg", ".", "max_grad_norm", ",", "\n", ")", "\n", "if", "ans_cfg", ".", "model_path", "!=", "\"\"", ":", "\n", "            ", "self", ".", "resume_checkpoint", "(", "ans_cfg", ".", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer.save_checkpoint": [[278, 299], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "occant_exp_trainer.OccAntExpTrainer.mapper_agent.state_dict", "occant_exp_trainer.OccAntExpTrainer.local_agent.state_dict", "occant_exp_trainer.OccAntExpTrainer.global_agent.state_dict", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.state_dict"], ["", "", "def", "save_checkpoint", "(", "\n", "self", ",", "file_name", ":", "str", ",", "extra_state", ":", "Optional", "[", "Dict", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Save checkpoint with specified name.\n\n        Args:\n            file_name: file name for checkpoint\n\n        Returns:\n            None\n        \"\"\"", "\n", "checkpoint", "=", "{", "\n", "\"mapper_state_dict\"", ":", "self", ".", "mapper_agent", ".", "state_dict", "(", ")", ",", "\n", "\"local_state_dict\"", ":", "self", ".", "local_agent", ".", "state_dict", "(", ")", ",", "\n", "\"global_state_dict\"", ":", "self", ".", "global_agent", ".", "state_dict", "(", ")", ",", "\n", "\"config\"", ":", "self", ".", "config", ",", "\n", "}", "\n", "if", "extra_state", "is", "not", "None", ":", "\n", "            ", "checkpoint", "[", "\"extra_state\"", "]", "=", "extra_state", "\n", "\n", "", "torch", ".", "save", "(", "checkpoint", ",", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "CHECKPOINT_FOLDER", ",", "file_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer.load_checkpoint": [[300, 312], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["None"], ["", "def", "load_checkpoint", "(", "self", ",", "checkpoint_path", ":", "str", ",", "*", "args", ",", "**", "kwargs", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"Load checkpoint of specified path as a dict.\n\n        Args:\n            checkpoint_path: path of target checkpoint\n            *args: additional positional args\n            **kwargs: additional keyword args\n\n        Returns:\n            dict containing checkpoint info\n        \"\"\"", "\n", "return", "torch", ".", "load", "(", "checkpoint_path", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer.resume_checkpoint": [[313, 356], ["glob.glob", "occant_exp_trainer.OccAntExpTrainer.setup_for_distributed.print", "occant_exp_trainer.OccAntExpTrainer.load_checkpoint", "occant_exp_trainer.OccAntExpTrainer.mapper_agent.load_state_dict", "occant_exp_trainer.OccAntExpTrainer.local_agent.load_state_dict", "occant_exp_trainer.OccAntExpTrainer.global_agent.load_state_dict", "len", "occant_exp_trainer.OccAntExpTrainer.load_checkpoint", "occant_exp_trainer.OccAntExpTrainer.mapper_agent.load_state_dict", "occant_exp_trainer.OccAntExpTrainer.local_agent.load_state_dict", "occant_exp_trainer.OccAntExpTrainer.global_agent.load_state_dict", "int", "occant_exp_trainer.OccAntExpTrainer.setup_for_distributed.print", "sorted", "[].split", "int", "last_ckpt.split", "x.split"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer.load_checkpoint", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer.load_checkpoint", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict"], ["", "def", "resume_checkpoint", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "r\"\"\"If an existing checkpoint already exists, resume training.\n        \"\"\"", "\n", "checkpoints", "=", "glob", ".", "glob", "(", "f\"{self.config.CHECKPOINT_FOLDER}/*.pth\"", ")", "\n", "ppo_cfg", "=", "self", ".", "config", ".", "RL", ".", "PPO", "\n", "if", "path", "is", "None", ":", "\n", "            ", "if", "len", "(", "checkpoints", ")", "==", "0", ":", "\n", "                ", "num_updates_start", "=", "0", "\n", "count_steps", "=", "0", "\n", "count_checkpoints", "=", "0", "\n", "", "else", ":", "\n", "# Load lastest checkpoint", "\n", "                ", "last_ckpt", "=", "sorted", "(", "checkpoints", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "\".\"", ")", "[", "1", "]", ")", ")", "[", "-", "1", "]", "\n", "checkpoint_path", "=", "last_ckpt", "\n", "# Restore checkpoints to models", "\n", "ckpt_dict", "=", "self", ".", "load_checkpoint", "(", "checkpoint_path", ")", "\n", "self", ".", "mapper_agent", ".", "load_state_dict", "(", "ckpt_dict", "[", "\"mapper_state_dict\"", "]", ")", "\n", "self", ".", "local_agent", ".", "load_state_dict", "(", "ckpt_dict", "[", "\"local_state_dict\"", "]", ")", "\n", "self", ".", "global_agent", ".", "load_state_dict", "(", "ckpt_dict", "[", "\"global_state_dict\"", "]", ")", "\n", "self", ".", "mapper", "=", "self", ".", "mapper_agent", ".", "mapper", "\n", "self", ".", "local_actor_critic", "=", "self", ".", "local_agent", ".", "actor_critic", "\n", "self", ".", "global_actor_critic", "=", "self", ".", "global_agent", ".", "actor_critic", "\n", "# Set the logging counts", "\n", "ckpt_id", "=", "int", "(", "last_ckpt", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "1", "]", ")", "\n", "num_updates_start", "=", "ckpt_dict", "[", "\"extra_state\"", "]", "[", "\"update\"", "]", "+", "1", "\n", "count_steps", "=", "ckpt_dict", "[", "\"extra_state\"", "]", "[", "\"step\"", "]", "\n", "count_checkpoints", "=", "ckpt_id", "+", "1", "\n", "print", "(", "f\"Resuming checkpoint {last_ckpt} at {count_steps} frames\"", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "f\"Loading pretrained model!\"", ")", "\n", "# Restore checkpoints to models", "\n", "ckpt_dict", "=", "self", ".", "load_checkpoint", "(", "path", ")", "\n", "self", ".", "mapper_agent", ".", "load_state_dict", "(", "ckpt_dict", "[", "\"mapper_state_dict\"", "]", ")", "\n", "self", ".", "local_agent", ".", "load_state_dict", "(", "ckpt_dict", "[", "\"local_state_dict\"", "]", ")", "\n", "self", ".", "global_agent", ".", "load_state_dict", "(", "ckpt_dict", "[", "\"global_state_dict\"", "]", ")", "\n", "self", ".", "mapper", "=", "self", ".", "mapper_agent", ".", "mapper", "\n", "self", ".", "local_actor_critic", "=", "self", ".", "local_agent", ".", "actor_critic", "\n", "self", ".", "global_actor_critic", "=", "self", ".", "global_agent", ".", "actor_critic", "\n", "num_updates_start", "=", "0", "\n", "count_steps", "=", "0", "\n", "count_checkpoints", "=", "0", "\n", "\n", "", "return", "num_updates_start", ",", "count_steps", ",", "count_checkpoints", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._create_mapper_rollout_inputs": [[357, 381], ["None"], "methods", ["None"], ["", "def", "_create_mapper_rollout_inputs", "(", "\n", "self", ",", "prev_batch", ",", "batch", ",", "\n", ")", ":", "\n", "        ", "ans_cfg", "=", "self", ".", "config", ".", "RL", ".", "ANS", "\n", "mapper_rollout_inputs", "=", "{", "\n", "\"rgb_at_t_1\"", ":", "prev_batch", "[", "\"rgb\"", "]", ",", "\n", "\"depth_at_t_1\"", ":", "prev_batch", "[", "\"depth\"", "]", ",", "\n", "\"ego_map_gt_at_t_1\"", ":", "prev_batch", "[", "\"ego_map_gt\"", "]", ",", "\n", "\"pose_at_t_1\"", ":", "prev_batch", "[", "\"pose\"", "]", ",", "\n", "\"pose_gt_at_t_1\"", ":", "prev_batch", "[", "\"pose_gt\"", "]", ",", "\n", "\"rgb_at_t\"", ":", "batch", "[", "\"rgb\"", "]", ",", "\n", "\"depth_at_t\"", ":", "batch", "[", "\"depth\"", "]", ",", "\n", "\"ego_map_gt_at_t\"", ":", "batch", "[", "\"ego_map_gt\"", "]", ",", "\n", "\"pose_at_t\"", ":", "batch", "[", "\"pose\"", "]", ",", "\n", "\"pose_gt_at_t\"", ":", "batch", "[", "\"pose_gt\"", "]", ",", "\n", "\"ego_map_gt_anticipated_at_t\"", ":", "batch", "[", "\"ego_map_gt_anticipated\"", "]", ",", "\n", "\"action_at_t_1\"", ":", "batch", "[", "\"prev_actions\"", "]", ",", "\n", "}", "\n", "if", "ans_cfg", ".", "OCCUPANCY_ANTICIPATOR", ".", "type", "==", "\"baseline_gt_anticipation\"", ":", "\n", "            ", "mapper_rollout_inputs", "[", "\"ego_map_gt_anticipated_at_t_1\"", "]", "=", "prev_batch", "[", "\n", "\"ego_map_gt_anticipated\"", "\n", "]", "\n", "\n", "", "return", "mapper_rollout_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._convert_actions_to_delta": [[382, 397], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "math.radians", "math.radians", "actions.squeeze", "actions.squeeze", "actions.squeeze"], "methods", ["None"], ["", "def", "_convert_actions_to_delta", "(", "self", ",", "actions", ")", ":", "\n", "        ", "\"\"\"actions -> torch Tensor\n        \"\"\"", "\n", "sim_cfg", "=", "self", ".", "config", ".", "TASK_CONFIG", ".", "SIMULATOR", "\n", "delta_xyt", "=", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "3", ",", "device", "=", "self", ".", "device", ")", "\n", "# Forward step", "\n", "act_mask", "=", "actions", ".", "squeeze", "(", "1", ")", "==", "0", "\n", "delta_xyt", "[", "act_mask", ",", "0", "]", "=", "sim_cfg", ".", "FORWARD_STEP_SIZE", "\n", "# Turn left", "\n", "act_mask", "=", "actions", ".", "squeeze", "(", "1", ")", "==", "1", "\n", "delta_xyt", "[", "act_mask", ",", "2", "]", "=", "math", ".", "radians", "(", "-", "sim_cfg", ".", "TURN_ANGLE", ")", "\n", "# Turn right", "\n", "act_mask", "=", "actions", ".", "squeeze", "(", "1", ")", "==", "2", "\n", "delta_xyt", "[", "act_mask", ",", "2", "]", "=", "math", ".", "radians", "(", "sim_cfg", ".", "TURN_ANGLE", ")", "\n", "return", "delta_xyt", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._compute_global_metric": [[398, 418], ["occant_utils.metrics.measure_anticipation_reward.unsqueeze", "occant_utils.metrics.measure_anticipation_reward", "occant_utils.metrics.measure_diff_reward", "occant_utils.metrics.measure_area_seen_performance"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.measure_anticipation_reward", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.measure_diff_reward", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.measure_area_seen_performance"], ["", "def", "_compute_global_metric", "(", "self", ",", "ground_truth_states", ",", "mapper_outputs", ",", "state_estimates", "=", "None", ")", ":", "\n", "        ", "\"\"\"Estimates global reward metric for the current states.\n        \"\"\"", "\n", "if", "self", ".", "config", ".", "RL", ".", "ANS", ".", "reward_type", "==", "\"area_seen\"", ":", "\n", "            ", "global_reward_metric", "=", "measure_area_seen_performance", "(", "\n", "ground_truth_states", "[", "\"visible_occupancy\"", "]", ",", "reduction", "=", "\"none\"", "\n", ")", "[", "\"area_seen\"", "]", "\n", "", "else", ":", "\n", "            ", "global_reward_metric", "=", "measure_anticipation_reward", "(", "\n", "mapper_outputs", "[", "\"mt\"", "]", ",", "ground_truth_states", "[", "\"environment_layout\"", "]", ",", "\n", "reduction", "=", "\"none\"", ",", "\n", "apply_mask", "=", "\"True\"", ",", "\n", ")", "\n", "", "if", "self", ".", "config", ".", "RL", ".", "ANS", ".", "diff_reward", ":", "\n", "            ", "diff_reward", "=", "measure_diff_reward", "(", "\n", "gt_map_states", "=", "ground_truth_states", "[", "\"gt_map_states\"", "]", ",", "state_estimates", "=", "state_estimates", ",", "reduction", "=", "\"none\"", "\n", ")", "\n", "global_reward_metric", "=", "global_reward_metric", "+", "diff_reward", "*", "self", ".", "config", ".", "RL", ".", "ANS", ".", "diff_reward_coeff", "\n", "\n", "", "return", "global_reward_metric", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._collect_rollout_step": [[419, 613], ["occant_exp_trainer.OccAntExpTrainer.ans_net.eval", "range", "time.time", "time.time", "time.time", "occant_exp_trainer.OccAntExpTrainer._create_mapper_rollout_inputs", "mapper_rollouts.insert", "time.time", "local_rollouts.insert", "time.time", "occant_exp_trainer.OccAntExpTrainer.envs.step", "time.time", "masks.copy_", "occant_exp_trainer.OccAntExpTrainer._prepare_batch", "occant_exp_trainer.OccAntExpTrainer.mapper.ext_register_map", "ground_truth_states[].copy_", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "occant_exp_trainer.OccAntExpTrainer.ans_net.act", "time.time", "occant_exp_trainer.OccAntExpTrainer._compute_global_metric", "ground_truth_states[].copy_", "global_rollouts.rewards[].copy_", "global_rollouts.insert", "time.time", "time.time", "local_rollouts.rewards[].copy_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "local_policy_outputs[].to", "time.time", "list", "time.time", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "episode_step_count[].item", "einops.rearrange", "numpy.stack", "einops.rearrange", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ground_truth_states[].copy_", "time.time", "masks.to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "masks.to", "a[].item", "zip", "episode_step_count[].item", "infos[].keys"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.eval", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._create_mapper_rollout_inputs", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.MapLargeRolloutStorage.insert", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.MapLargeRolloutStorage.insert", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.step", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._prepare_batch", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper.ext_register_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.act", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._compute_global_metric", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.MapLargeRolloutStorage.insert", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["", "def", "_collect_rollout_step", "(", "\n", "self", ",", "\n", "batch", ",", "\n", "prev_batch", ",", "\n", "episode_step_count", ",", "\n", "state_estimates", ",", "\n", "ground_truth_states", ",", "\n", "masks", ",", "\n", "mapper_rollouts", ",", "\n", "local_rollouts", ",", "\n", "global_rollouts", ",", "\n", "current_local_episode_reward", ",", "\n", "current_global_episode_reward", ",", "\n", "running_episode_stats", ",", "\n", "statistics_dict", ",", "\n", ")", ":", "\n", "        ", "pth_time", "=", "0.0", "\n", "env_time", "=", "0.0", "\n", "\n", "device", "=", "self", ".", "device", "\n", "ppo_cfg", "=", "self", ".", "config", ".", "RL", ".", "PPO", "\n", "ans_cfg", "=", "self", ".", "config", ".", "RL", ".", "ANS", "\n", "sim_cfg", "=", "self", ".", "config", ".", "TASK_CONFIG", ".", "SIMULATOR", "\n", "\n", "NUM_LOCAL_STEPS", "=", "ppo_cfg", ".", "num_local_steps", "\n", "\n", "self", ".", "ans_net", ".", "eval", "(", ")", "\n", "\n", "for", "t", "in", "range", "(", "NUM_LOCAL_STEPS", ")", ":", "\n", "            ", "t_sample_action", "=", "time", ".", "time", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "(", "\n", "mapper_inputs", ",", "\n", "local_policy_inputs", ",", "\n", "global_policy_inputs", ",", "\n", "mapper_outputs", ",", "\n", "local_policy_outputs", ",", "\n", "global_policy_outputs", ",", "\n", "state_estimates", ",", "\n", "intrinsic_rewards", ",", "\n", ")", "=", "self", ".", "ans_net", ".", "act", "(", "\n", "batch", ",", "\n", "prev_batch", ",", "\n", "state_estimates", ",", "\n", "episode_step_count", ",", "\n", "masks", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "deterministic", "=", "ans_cfg", ".", "LOCAL_POLICY", ".", "deterministic_flag", ",", "\n", ")", "\n", "\n", "", "pth_time", "+=", "time", ".", "time", "(", ")", "-", "t_sample_action", "\n", "\n", "# -------------------- update global rollout stats ------------------------", "\n", "t_update_stats", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "t", "==", "0", ":", "\n", "# Sanity check", "\n", "                ", "assert", "global_policy_inputs", "is", "not", "None", "\n", "\n", "global_reward_metric", "=", "self", ".", "_compute_global_metric", "(", "\n", "ground_truth_states", ",", "mapper_outputs", ",", "state_estimates", ",", "\n", ")", "\n", "\n", "# Update reward for previous global_policy action", "\n", "if", "global_rollouts", ".", "step", "==", "0", ":", "\n", "                    ", "global_rewards", "=", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "global_rewards", "=", "(", "\n", "global_reward_metric", "\n", "-", "ground_truth_states", "[", "\"prev_global_reward_metric\"", "]", "\n", ")", ".", "cpu", "(", ")", "\n", "", "ground_truth_states", "[", "\"prev_global_reward_metric\"", "]", ".", "copy_", "(", "\n", "global_reward_metric", "\n", ")", "\n", "global_rollouts", ".", "rewards", "[", "global_rollouts", ".", "step", "-", "1", "]", ".", "copy_", "(", "\n", "global_rewards", "*", "ppo_cfg", ".", "global_reward_scale", "\n", ")", "\n", "global_rollouts", ".", "insert", "(", "\n", "global_policy_inputs", ",", "\n", "None", ",", "\n", "global_policy_outputs", "[", "\"actions\"", "]", ",", "\n", "global_policy_outputs", "[", "\"action_log_probs\"", "]", ",", "\n", "global_policy_outputs", "[", "\"values\"", "]", ",", "\n", "torch", ".", "zeros_like", "(", "global_rewards", ")", ",", "\n", "masks", ".", "to", "(", "device", ")", ",", "\n", ")", "\n", "current_global_episode_reward", "+=", "global_rewards", "\n", "\n", "", "pth_time", "+=", "time", ".", "time", "(", ")", "-", "t_update_stats", "\n", "\n", "# --------------------- update mapper rollout stats -----------------------", "\n", "t_update_stats", "=", "time", ".", "time", "(", ")", "\n", "\n", "mapper_rollout_inputs", "=", "self", ".", "_create_mapper_rollout_inputs", "(", "\n", "prev_batch", ",", "batch", "\n", ")", "\n", "mapper_rollouts", ".", "insert", "(", "mapper_rollout_inputs", ")", "\n", "\n", "pth_time", "+=", "time", ".", "time", "(", ")", "-", "t_update_stats", "\n", "\n", "# ------------------ update local_policy rollout stats --------------------", "\n", "t_update_stats", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Assign local rewards to previous local action", "\n", "local_rewards", "=", "(", "\n", "intrinsic_rewards", "[", "\"local_rewards\"", "]", "\n", "+", "batch", "[", "\"collision_sensor\"", "]", "*", "ans_cfg", ".", "local_collision_reward", "\n", ")", ".", "cpu", "(", ")", "\n", "current_local_episode_reward", "+=", "local_rewards", "\n", "# The intrinsic rewards correspond to the previous action, not", "\n", "# the one executed currently.", "\n", "if", "local_rollouts", ".", "step", ">", "0", ":", "\n", "                ", "local_rollouts", ".", "rewards", "[", "local_rollouts", ".", "step", "-", "1", "]", ".", "copy_", "(", "\n", "local_rewards", "*", "ppo_cfg", ".", "local_reward_scale", "\n", ")", "\n", "# Update local_rollouts", "\n", "", "if", "ans_cfg", ".", "LOCAL_POLICY", ".", "learning_algorithm", "==", "\"rl\"", ":", "\n", "                ", "local_policy_actions", "=", "local_policy_outputs", "[", "\"actions\"", "]", "\n", "", "else", ":", "\n", "                ", "local_policy_actions", "=", "local_policy_outputs", "[", "\"gt_actions\"", "]", "\n", "\n", "", "local_rollouts", ".", "insert", "(", "\n", "local_policy_inputs", ",", "\n", "state_estimates", "[", "\"recurrent_hidden_states\"", "]", ",", "\n", "local_policy_actions", ",", "\n", "local_policy_outputs", "[", "\"action_log_probs\"", "]", ",", "\n", "local_policy_outputs", "[", "\"values\"", "]", ",", "\n", "torch", ".", "zeros_like", "(", "local_rewards", ")", ",", "\n", "local_policy_outputs", "[", "\"local_masks\"", "]", ".", "to", "(", "device", ")", ",", "\n", ")", "\n", "\n", "pth_time", "+=", "time", ".", "time", "(", ")", "-", "t_update_stats", "\n", "\n", "# ---------------------- execute environment action -----------------------", "\n", "t_step_env", "=", "time", ".", "time", "(", ")", "\n", "\n", "actions", "=", "local_policy_outputs", "[", "\"actions\"", "]", "\n", "outputs", "=", "self", ".", "envs", ".", "step", "(", "[", "a", "[", "0", "]", ".", "item", "(", ")", "for", "a", "in", "actions", "]", ")", "\n", "observations", ",", "_", ",", "dones", ",", "infos", "=", "[", "list", "(", "x", ")", "for", "x", "in", "zip", "(", "*", "outputs", ")", "]", "\n", "\n", "env_time", "+=", "time", ".", "time", "(", ")", "-", "t_step_env", "\n", "\n", "# -------------------- update ground-truth states -------------------------", "\n", "t_update_stats", "=", "time", ".", "time", "(", ")", "\n", "\n", "masks", ".", "copy_", "(", "\n", "torch", ".", "tensor", "(", "\n", "[", "[", "0.0", "]", "if", "done", "else", "[", "1.0", "]", "for", "done", "in", "dones", "]", ",", "dtype", "=", "torch", ".", "float", "\n", ")", "\n", ")", "\n", "# Sanity check", "\n", "assert", "episode_step_count", "[", "0", "]", ".", "item", "(", ")", "<=", "self", ".", "config", ".", "T_EXP", "-", "1", "\n", "assert", "not", "dones", "[", "0", "]", ",", "\"DONE must not be called during training\"", "\n", "\n", "del", "prev_batch", "\n", "prev_batch", "=", "batch", "\n", "batch", "=", "self", ".", "_prepare_batch", "(", "\n", "observations", ",", "prev_batch", "=", "prev_batch", ",", "device", "=", "device", ",", "actions", "=", "actions", "\n", ")", "\n", "\n", "# Update visible occupancy", "\n", "ground_truth_states", "[", "\"visible_occupancy\"", "]", "=", "self", ".", "mapper", ".", "ext_register_map", "(", "\n", "ground_truth_states", "[", "\"visible_occupancy\"", "]", ",", "\n", "rearrange", "(", "batch", "[", "\"ego_map_gt\"", "]", ",", "\"b h w c -> b c h w\"", ")", ",", "\n", "batch", "[", "\"pose_gt\"", "]", ",", "\n", ")", "\n", "ground_truth_states", "[", "\"pose\"", "]", ".", "copy_", "(", "batch", "[", "\"pose_gt\"", "]", ")", "\n", "# Update ground_truth world layout that is provided only at episode start", "\n", "# to avoid data transfer bottlenecks", "\n", "if", "episode_step_count", "[", "0", "]", ".", "item", "(", ")", "==", "0", "and", "\"gt_global_map\"", "in", "infos", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "                ", "environment_layout", "=", "np", ".", "stack", "(", "\n", "[", "info", "[", "\"gt_global_map\"", "]", "for", "info", "in", "infos", "]", ",", "axis", "=", "0", "\n", ")", "\n", "environment_layout", "=", "rearrange", "(", "environment_layout", ",", "\"b h w c -> b c h w\"", ")", "\n", "environment_layout", "=", "torch", ".", "Tensor", "(", "environment_layout", ")", "\n", "ground_truth_states", "[", "\"environment_layout\"", "]", ".", "copy_", "(", "environment_layout", ")", "\n", "\n", "# The ground_truth world layout is used to generate ground_truth action", "\n", "# labels for local policy during imitation.", "\n", "", "if", "ans_cfg", ".", "LOCAL_POLICY", ".", "learning_algorithm", "==", "\"il\"", ":", "\n", "                ", "batch", "[", "\"gt_global_map\"", "]", "=", "ground_truth_states", "[", "\"environment_layout\"", "]", "\n", "\n", "", "pth_time", "+=", "time", ".", "time", "(", ")", "-", "t_update_stats", "\n", "\n", "episode_step_count", "+=", "1", "\n", "\n", "", "return", "(", "\n", "pth_time", ",", "\n", "env_time", ",", "\n", "self", ".", "envs", ".", "num_envs", "*", "NUM_LOCAL_STEPS", ",", "\n", "prev_batch", ",", "\n", "batch", ",", "\n", "state_estimates", ",", "\n", "ground_truth_states", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._supplementary_rollout_update": [[615, 706], ["time.time", "occant_exp_trainer.OccAntExpTrainer.ans_net.get_states", "occant_exp_trainer.OccAntExpTrainer.ans_net.eval", "occant_exp_trainer.OccAntExpTrainer.ans_net.train", "occant_exp_trainer.OccAntExpTrainer.ans_net.update_states", "time.time", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "occant_exp_trainer.OccAntExpTrainer.ans_net.act", "time.time", "local_policy_inputs.items", "intrinsic_rewards[].cpu", "local_rollouts.rewards[].copy_", "local_rollouts.masks[].copy_", "global_policy_inputs.items", "occant_exp_trainer.OccAntExpTrainer._compute_global_metric", "global_rollouts.rewards[].copy_", "global_rollouts.masks[].copy_", "time.time", "[].copy_", "[].copy_", "episode_step_count[].item"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase.get_states", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.eval", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.train", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase.update_states", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.act", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._compute_global_metric"], ["", "def", "_supplementary_rollout_update", "(", "\n", "self", ",", "\n", "batch", ",", "\n", "prev_batch", ",", "\n", "episode_step_count", ",", "\n", "state_estimates", ",", "\n", "ground_truth_states", ",", "\n", "masks", ",", "\n", "local_rollouts", ",", "\n", "global_rollouts", ",", "\n", "update_option", "=", "\"local\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Since the inputs for local, global policies are obtained only after\n        a forward pass, it will not be possible to update the rollouts immediately\n        after self.envs.step() . This causes a delay of 1 step in the rollout\n        updates for local, global policies. To account for this, perform this\n        supplementary rollout update just before updating the corresponding policy.\n        \"\"\"", "\n", "pth_time", "=", "0.0", "\n", "env_time", "=", "0.0", "\n", "ppo_cfg", "=", "self", ".", "config", ".", "RL", ".", "PPO", "\n", "ans_cfg", "=", "self", ".", "config", ".", "RL", ".", "ANS", "\n", "\n", "t_sample_action", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Copy states before sampling actions", "\n", "ans_states_copy", "=", "self", ".", "ans_net", ".", "get_states", "(", ")", "\n", "\n", "self", ".", "ans_net", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "(", "\n", "mapper_inputs", ",", "\n", "local_policy_inputs", ",", "\n", "global_policy_inputs", ",", "\n", "mapper_outputs", ",", "\n", "local_policy_outputs", ",", "\n", "_", ",", "\n", "_", ",", "\n", "intrinsic_rewards", ",", "\n", ")", "=", "self", ".", "ans_net", ".", "act", "(", "\n", "batch", ",", "\n", "prev_batch", ",", "\n", "state_estimates", ",", "\n", "episode_step_count", ",", "\n", "masks", ",", "\n", "deterministic", "=", "ans_cfg", ".", "LOCAL_POLICY", ".", "deterministic_flag", ",", "\n", ")", "\n", "\n", "", "self", ".", "ans_net", ".", "train", "(", ")", "\n", "\n", "# Restore states", "\n", "self", ".", "ans_net", ".", "update_states", "(", "ans_states_copy", ")", "\n", "\n", "pth_time", "+=", "time", ".", "time", "(", ")", "-", "t_sample_action", "\n", "\n", "t_update_stats", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Update local_rollouts", "\n", "if", "update_option", "==", "\"local\"", ":", "\n", "            ", "for", "k", ",", "v", "in", "local_policy_inputs", ".", "items", "(", ")", ":", "\n", "                ", "local_rollouts", ".", "observations", "[", "k", "]", "[", "local_rollouts", ".", "step", "]", ".", "copy_", "(", "v", ")", "\n", "", "local_rewards", "=", "intrinsic_rewards", "[", "\"local_rewards\"", "]", ".", "cpu", "(", ")", "\n", "local_rollouts", ".", "rewards", "[", "local_rollouts", ".", "step", "-", "1", "]", ".", "copy_", "(", "\n", "local_rewards", "*", "ppo_cfg", ".", "local_reward_scale", "\n", ")", "\n", "local_masks", "=", "local_policy_outputs", "[", "\"local_masks\"", "]", "\n", "local_rollouts", ".", "masks", "[", "local_rollouts", ".", "step", "]", ".", "copy_", "(", "local_masks", ")", "\n", "\n", "# Update global_rollouts if available", "\n", "", "if", "update_option", "==", "\"global\"", ":", "\n", "# Sanity check", "\n", "            ", "assert", "episode_step_count", "[", "0", "]", ".", "item", "(", ")", "%", "ans_cfg", ".", "goal_interval", "==", "0", "\n", "assert", "global_policy_inputs", "is", "not", "None", "\n", "for", "k", ",", "v", "in", "global_policy_inputs", ".", "items", "(", ")", ":", "\n", "                ", "global_rollouts", ".", "observations", "[", "k", "]", "[", "global_rollouts", ".", "step", "]", ".", "copy_", "(", "v", ")", "\n", "", "global_reward_metric", "=", "self", ".", "_compute_global_metric", "(", "\n", "ground_truth_states", ",", "mapper_outputs", ",", "state_estimates", "\n", ")", "\n", "global_rewards", "=", "(", "\n", "global_reward_metric", "-", "ground_truth_states", "[", "\"prev_global_reward_metric\"", "]", "\n", ")", ".", "cpu", "(", ")", "\n", "global_rollouts", ".", "rewards", "[", "global_rollouts", ".", "step", "-", "1", "]", ".", "copy_", "(", "\n", "global_rewards", "*", "self", ".", "config", ".", "RL", ".", "PPO", ".", "global_reward_scale", "\n", ")", "\n", "global_rollouts", ".", "masks", "[", "global_rollouts", ".", "step", "]", ".", "copy_", "(", "masks", ")", "\n", "\n", "", "pth_time", "+=", "time", ".", "time", "(", ")", "-", "t_update_stats", "\n", "\n", "return", "pth_time", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._update_mapper_agent": [[707, 713], ["time.time", "occant_exp_trainer.OccAntExpTrainer.mapper_agent.update", "time.time"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.update"], ["", "def", "_update_mapper_agent", "(", "self", ",", "mapper_rollouts", ")", ":", "\n", "        ", "t_update_model", "=", "time", ".", "time", "(", ")", "\n", "\n", "losses", "=", "self", ".", "mapper_agent", ".", "update", "(", "mapper_rollouts", ")", "\n", "\n", "return", "time", ".", "time", "(", ")", "-", "t_update_model", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._update_local_agent": [[714, 749], ["time.time", "local_rollouts.compute_returns", "occant_exp_trainer.OccAntExpTrainer.local_agent.update", "local_rollouts.after_update", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "occant_exp_trainer.OccAntExpTrainer.local_actor_critic.get_value().detach", "time.time", "local_rollouts.observations.items", "occant_exp_trainer.OccAntExpTrainer.local_actor_critic.get_value"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.compute_returns", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.update", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.after_update", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.LocalPolicy.get_value"], ["", "def", "_update_local_agent", "(", "self", ",", "local_rollouts", ")", ":", "\n", "        ", "t_update_model", "=", "time", ".", "time", "(", ")", "\n", "\n", "ppo_cfg", "=", "self", ".", "config", ".", "RL", ".", "PPO", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "last_observation", "=", "{", "\n", "k", ":", "v", "[", "-", "1", "]", "for", "k", ",", "v", "in", "local_rollouts", ".", "observations", ".", "items", "(", ")", "\n", "}", "\n", "next_local_value", "=", "self", ".", "local_actor_critic", ".", "get_value", "(", "\n", "last_observation", ",", "\n", "local_rollouts", ".", "recurrent_hidden_states", "[", "-", "1", "]", ",", "\n", "local_rollouts", ".", "prev_actions", "[", "-", "1", "]", ",", "\n", "local_rollouts", ".", "masks", "[", "-", "1", "]", ",", "\n", ")", ".", "detach", "(", ")", "\n", "\n", "", "local_rollouts", ".", "compute_returns", "(", "\n", "next_local_value", ",", "ppo_cfg", ".", "use_gae", ",", "ppo_cfg", ".", "gamma", ",", "ppo_cfg", ".", "tau", "\n", ")", "\n", "\n", "(", "\n", "local_value_loss", ",", "\n", "local_action_loss", ",", "\n", "local_dist_entropy", ",", "\n", ")", "=", "self", ".", "local_agent", ".", "update", "(", "local_rollouts", ")", "\n", "\n", "update_metrics", "=", "{", "\n", "\"value_loss\"", ":", "local_value_loss", ",", "\n", "\"action_loss\"", ":", "local_action_loss", ",", "\n", "\"dist_entropy\"", ":", "local_dist_entropy", ",", "\n", "}", "\n", "\n", "local_rollouts", ".", "after_update", "(", ")", "\n", "\n", "return", "time", ".", "time", "(", ")", "-", "t_update_model", ",", "update_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._update_global_agent": [[750, 786], ["time.time", "global_rollouts.compute_returns", "occant_exp_trainer.OccAntExpTrainer.global_agent.update", "global_rollouts.after_update", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "occant_exp_trainer.OccAntExpTrainer.global_actor_critic.get_value().detach", "v[].to", "time.time", "global_rollouts.observations.items", "occant_exp_trainer.OccAntExpTrainer.global_actor_critic.get_value", "global_rollouts.prev_actions[].to", "global_rollouts.masks[].to"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.compute_returns", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.update", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.after_update", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.LocalPolicy.get_value", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["", "def", "_update_global_agent", "(", "self", ",", "global_rollouts", ")", ":", "\n", "        ", "t_update_model", "=", "time", ".", "time", "(", ")", "\n", "\n", "ppo_cfg", "=", "self", ".", "config", ".", "RL", ".", "PPO", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "last_observation", "=", "{", "\n", "k", ":", "v", "[", "-", "1", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "k", ",", "v", "in", "global_rollouts", ".", "observations", ".", "items", "(", ")", "\n", "}", "\n", "next_global_value", "=", "self", ".", "global_actor_critic", ".", "get_value", "(", "\n", "last_observation", ",", "\n", "None", ",", "\n", "global_rollouts", ".", "prev_actions", "[", "-", "1", "]", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "global_rollouts", ".", "masks", "[", "-", "1", "]", ".", "to", "(", "self", ".", "device", ")", ",", "\n", ")", ".", "detach", "(", ")", "\n", "\n", "", "global_rollouts", ".", "compute_returns", "(", "\n", "next_global_value", ",", "ppo_cfg", ".", "use_gae", ",", "ppo_cfg", ".", "gamma", ",", "ppo_cfg", ".", "tau", "\n", ")", "\n", "\n", "(", "\n", "global_value_loss", ",", "\n", "global_action_loss", ",", "\n", "global_dist_entropy", ",", "\n", ")", "=", "self", ".", "global_agent", ".", "update", "(", "global_rollouts", ")", "\n", "\n", "update_metrics", "=", "{", "\n", "\"value_loss\"", ":", "global_value_loss", ",", "\n", "\"action_loss\"", ":", "global_action_loss", ",", "\n", "\"dist_entropy\"", ":", "global_dist_entropy", ",", "\n", "}", "\n", "\n", "global_rollouts", ".", "after_update", "(", ")", "\n", "\n", "return", "time", ".", "time", "(", ")", "-", "t_update_model", ",", "update_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._assign_devices": [[787, 801], ["len", "os.environ[].split", "int", "len", "range", "len"], "methods", ["None"], ["", "def", "_assign_devices", "(", "self", ")", ":", "\n", "# Assign devices for the simulator", "\n", "        ", "if", "len", "(", "self", ".", "config", ".", "SIMULATOR_GPU_IDS", ")", ">", "0", ":", "\n", "            ", "devices", "=", "self", ".", "config", ".", "SIMULATOR_GPU_IDS", "\n", "", "elif", "\"CUDA_VISIBLE_DEVICES\"", "in", "os", ".", "environ", ":", "\n", "            ", "visible_devices", "=", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", ".", "split", "(", "\",\"", ")", "\n", "devices", "=", "[", "int", "(", "dev", ")", "for", "dev", "in", "visible_devices", "]", "\n", "# Devices need to be indexed between 0 to N-1", "\n", "devices", "=", "[", "dev", "for", "dev", "in", "range", "(", "len", "(", "devices", ")", ")", "]", "\n", "if", "len", "(", "devices", ")", ">", "1", ":", "\n", "                ", "devices", "=", "devices", "[", "1", ":", "]", "\n", "", "", "else", ":", "\n", "            ", "devices", "=", "None", "\n", "", "return", "devices", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._create_mapper_rollouts": [[802, 864], ["gym.Dict", "torch.Manager", "torch.Manager", "torch.Manager", "occant_baselines.common.rollout_storage.MapLargeRolloutStorageMP", "gym.Box", "gym.Box", "gym.Box", "gym.Box", "gym.Box", "gym.Box", "gym.Box", "gym.Box", "gym.Box", "gym.Box", "gym.Box", "gym.Box", "len"], "methods", ["None"], ["", "def", "_create_mapper_rollouts", "(", "self", ",", "ppo_cfg", ",", "ans_cfg", ")", ":", "\n", "        ", "M", "=", "ans_cfg", ".", "overall_map_size", "\n", "V", "=", "ans_cfg", ".", "MAPPER", ".", "map_size", "\n", "s", "=", "ans_cfg", ".", "MAPPER", ".", "map_scale", "\n", "imH", ",", "imW", "=", "ans_cfg", ".", "image_scale_hw", "\n", "mapper_observation_space", "=", "{", "\n", "\"rgb_at_t_1\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "0.0", ",", "high", "=", "255.0", ",", "shape", "=", "(", "imH", ",", "imW", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "\"depth_at_t_1\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "0.0", ",", "high", "=", "255.0", ",", "shape", "=", "(", "imH", ",", "imW", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "\"ego_map_gt_at_t_1\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "0.0", ",", "high", "=", "1.0", ",", "shape", "=", "(", "V", ",", "V", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "\"pose_at_t_1\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "-", "100000.0", ",", "high", "=", "100000.0", ",", "shape", "=", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "\"pose_gt_at_t_1\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "-", "100000.0", ",", "high", "=", "100000.0", ",", "shape", "=", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "\"pose_hat_at_t_1\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "-", "100000.0", ",", "high", "=", "100000.0", ",", "shape", "=", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "\"rgb_at_t\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "0.0", ",", "high", "=", "255.0", ",", "shape", "=", "(", "imH", ",", "imW", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "\"depth_at_t\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "0.0", ",", "high", "=", "255.0", ",", "shape", "=", "(", "imH", ",", "imW", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "\"ego_map_gt_at_t\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "0.0", ",", "high", "=", "1.0", ",", "shape", "=", "(", "V", ",", "V", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "\"pose_at_t\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "-", "100000.0", ",", "high", "=", "100000.0", ",", "shape", "=", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "\"pose_gt_at_t\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "-", "100000.0", ",", "high", "=", "100000.0", ",", "shape", "=", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "\"ego_map_gt_anticipated_at_t\"", ":", "self", ".", "envs", ".", "observation_spaces", "[", "0", "]", ".", "spaces", "[", "\n", "\"ego_map_gt_anticipated\"", "\n", "]", ",", "\n", "\"action_at_t_1\"", ":", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "4", ",", "shape", "=", "(", "1", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", ",", "\n", "}", "\n", "if", "ans_cfg", ".", "OCCUPANCY_ANTICIPATOR", ".", "type", "==", "\"baseline_gt_anticipation\"", ":", "\n", "            ", "mapper_observation_space", "[", "\n", "\"ego_map_gt_anticipated_at_t_1\"", "\n", "]", "=", "self", ".", "envs", ".", "observation_spaces", "[", "0", "]", ".", "spaces", "[", "\"ego_map_gt_anticipated\"", "]", "\n", "", "mapper_observation_space", "=", "spaces", ".", "Dict", "(", "mapper_observation_space", ")", "\n", "# Multiprocessing manager", "\n", "mapper_manager", "=", "mp", ".", "Manager", "(", ")", "\n", "mapper_device", "=", "self", ".", "device", "\n", "if", "ans_cfg", ".", "MAPPER", ".", "use_data_parallel", "and", "len", "(", "ans_cfg", ".", "MAPPER", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "mapper_device", "=", "ans_cfg", ".", "MAPPER", ".", "gpu_ids", "[", "0", "]", "\n", "", "mapper_rollouts", "=", "MapLargeRolloutStorageMP", "(", "\n", "ans_cfg", ".", "MAPPER", ".", "replay_size", ",", "\n", "mapper_observation_space", ",", "\n", "mapper_device", ",", "\n", "mapper_manager", ",", "\n", ")", "\n", "\n", "return", "mapper_rollouts", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._create_global_rollouts": [[865, 896], ["gym.Dict", "habitat.core.spaces.ActionSpace", "occant_baselines.common.rollout_storage.RolloutStorageExtended", "gym.Box", "gym.Box", "habitat.core.spaces.EmptySpace", "itertools.product", "range", "range"], "methods", ["None"], ["", "def", "_create_global_rollouts", "(", "self", ",", "ppo_cfg", ",", "ans_cfg", ")", ":", "\n", "        ", "M", "=", "ans_cfg", ".", "overall_map_size", "\n", "G", "=", "ans_cfg", ".", "GLOBAL_POLICY", ".", "map_size", "\n", "global_observation_space", "=", "spaces", ".", "Dict", "(", "\n", "{", "\n", "\"pose_in_map_at_t\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "-", "100000.0", ",", "high", "=", "100000.0", ",", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "\"map_at_t\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "0.0", ",", "high", "=", "1.0", ",", "shape", "=", "(", "4", ",", "M", ",", "M", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "}", "\n", ")", "\n", "global_action_space", "=", "ActionSpace", "(", "\n", "{", "\n", "f\"({x[0]}, {x[1]})\"", ":", "EmptySpace", "(", ")", "\n", "for", "x", "in", "itertools", ".", "product", "(", "range", "(", "G", ")", ",", "range", "(", "G", ")", ")", "\n", "}", "\n", ")", "\n", "global_rollouts", "=", "RolloutStorageExtended", "(", "\n", "ppo_cfg", ".", "num_global_steps", ",", "\n", "self", ".", "envs", ".", "num_envs", ",", "\n", "global_observation_space", ",", "\n", "global_action_space", ",", "\n", "1", ",", "\n", "enable_recurrence", "=", "False", ",", "\n", "delay_observations_entry", "=", "True", ",", "\n", "delay_masks_entry", "=", "True", ",", "\n", "enable_memory_efficient_mode", "=", "True", ",", "\n", ")", "\n", "return", "global_rollouts", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._create_local_rollouts": [[897, 928], ["habitat.core.spaces.ActionSpace", "gym.Dict", "occant_baselines.common.rollout_storage.RolloutStorageExtended", "gym.Box", "gym.Box", "gym.Box", "habitat.core.spaces.EmptySpace", "habitat.core.spaces.EmptySpace", "habitat.core.spaces.EmptySpace"], "methods", ["None"], ["", "def", "_create_local_rollouts", "(", "self", ",", "ppo_cfg", ",", "ans_cfg", ")", ":", "\n", "        ", "imH", ",", "imW", "=", "ans_cfg", ".", "image_scale_hw", "\n", "local_action_space", "=", "ActionSpace", "(", "\n", "{", "\n", "\"move_forward\"", ":", "EmptySpace", "(", ")", ",", "\n", "\"turn_left\"", ":", "EmptySpace", "(", ")", ",", "\n", "\"turn_right\"", ":", "EmptySpace", "(", ")", ",", "\n", "}", "\n", ")", "\n", "local_observation_space", "=", "{", "\n", "\"rgb_at_t\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "0.0", ",", "high", "=", "255.0", ",", "shape", "=", "(", "imH", ",", "imW", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "\"goal_at_t\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "-", "100000.0", ",", "high", "=", "100000.0", ",", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "\"t\"", ":", "spaces", ".", "Box", "(", "low", "=", "0.0", ",", "high", "=", "100000.0", ",", "shape", "=", "(", "1", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "}", "\n", "\n", "local_observation_space", "=", "spaces", ".", "Dict", "(", "local_observation_space", ")", "\n", "local_rollouts", "=", "RolloutStorageExtended", "(", "\n", "ppo_cfg", ".", "num_local_steps", ",", "\n", "self", ".", "envs", ".", "num_envs", ",", "\n", "local_observation_space", ",", "\n", "local_action_space", ",", "\n", "ans_cfg", ".", "LOCAL_POLICY", ".", "hidden_size", ",", "\n", "enable_recurrence", "=", "True", ",", "\n", "delay_observations_entry", "=", "True", ",", "\n", "delay_masks_entry", "=", "True", ",", "\n", ")", "\n", "return", "local_rollouts", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._prepare_batch": [[929, 963], ["habitat_baselines.common.utils.batch_obs", "occant_exp_trainer.OccAntExpTrainer.depth_projection_net", "einops.rearrange", "einops.rearrange", "torch.interpolate", "torch.interpolate", "torch.interpolate", "einops.rearrange", "einops.rearrange", "torch.interpolate", "torch.interpolate", "torch.interpolate", "einops.rearrange", "einops.rearrange", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "batch[].size", "batch[].size", "batch[].size", "batch[].size", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "occant_exp_trainer.OccAntExpTrainer._convert_actions_to_delta", "occant_utils.common.add_pose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._convert_actions_to_delta", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.add_pose"], ["", "def", "_prepare_batch", "(", "self", ",", "observations", ",", "prev_batch", "=", "None", ",", "device", "=", "None", ",", "actions", "=", "None", ")", ":", "\n", "        ", "imH", ",", "imW", "=", "self", ".", "config", ".", "RL", ".", "ANS", ".", "image_scale_hw", "\n", "device", "=", "self", ".", "device", "if", "device", "is", "None", "else", "device", "\n", "batch", "=", "batch_obs", "(", "observations", ",", "device", "=", "device", ")", "\n", "if", "batch", "[", "\"rgb\"", "]", ".", "size", "(", "1", ")", "!=", "imH", "or", "batch", "[", "\"rgb\"", "]", ".", "size", "(", "2", ")", "!=", "imW", ":", "\n", "            ", "rgb", "=", "rearrange", "(", "batch", "[", "\"rgb\"", "]", ",", "\"b h w c -> b c h w\"", ")", "\n", "rgb", "=", "F", ".", "interpolate", "(", "rgb", ",", "(", "imH", ",", "imW", ")", ",", "mode", "=", "\"bilinear\"", ")", "\n", "batch", "[", "\"rgb\"", "]", "=", "rearrange", "(", "rgb", ",", "\"b c h w -> b h w c\"", ")", "\n", "", "if", "batch", "[", "\"depth\"", "]", ".", "size", "(", "1", ")", "!=", "imH", "or", "batch", "[", "\"depth\"", "]", ".", "size", "(", "2", ")", "!=", "imW", ":", "\n", "            ", "depth", "=", "rearrange", "(", "batch", "[", "\"depth\"", "]", ",", "\"b h w c -> b c h w\"", ")", "\n", "depth", "=", "F", ".", "interpolate", "(", "depth", ",", "(", "imH", ",", "imW", ")", ",", "mode", "=", "\"nearest\"", ")", "\n", "batch", "[", "\"depth\"", "]", "=", "rearrange", "(", "depth", ",", "\"b c h w -> b h w c\"", ")", "\n", "# Compute ego_map_gt from depth", "\n", "", "ego_map_gt_b", "=", "self", ".", "depth_projection_net", "(", "\n", "rearrange", "(", "batch", "[", "\"depth\"", "]", ",", "\"b h w c -> b c h w\"", ")", "\n", ")", "\n", "batch", "[", "\"ego_map_gt\"", "]", "=", "rearrange", "(", "ego_map_gt_b", ",", "\"b c h w -> b h w c\"", ")", "\n", "if", "actions", "is", "None", ":", "\n", "# Initialization condition", "\n", "# If pose estimates are not available, set the initial estimate to zeros.", "\n", "            ", "if", "\"pose\"", "not", "in", "batch", ":", "\n", "# Set initial pose estimate to zero", "\n", "                ", "batch", "[", "\"pose\"", "]", "=", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "3", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "batch", "[", "\"prev_actions\"", "]", "=", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "# Rollouts condition", "\n", "# If pose estimates are not available, compute them from action taken.", "\n", "            ", "if", "\"pose\"", "not", "in", "batch", ":", "\n", "                ", "assert", "prev_batch", "is", "not", "None", "\n", "actions_delta", "=", "self", ".", "_convert_actions_to_delta", "(", "actions", ")", "\n", "batch", "[", "\"pose\"", "]", "=", "add_pose", "(", "prev_batch", "[", "\"pose\"", "]", ",", "actions_delta", ")", "\n", "", "batch", "[", "\"prev_actions\"", "]", "=", "actions", "\n", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer.spatial_transform_map": [[964, 1018], ["torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "p.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "p.size"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["", "def", "spatial_transform_map", "(", "self", ",", "p", ",", "x", ",", "invert", "=", "True", ",", "mode", "=", "\"bilinear\"", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            p     - (bs, f, H, W) Tensor\n            x     - (bs, 3) Tensor (x, y, theta) transforms to perform\n        Outputs:\n            p_trans - (bs, f, H, W) Tensor\n        Conventions:\n            Shift in X is rightward, and shift in Y is downward. Rotation is clockwise.\n\n        Note: These denote transforms in an agent's position. Not the image directly.\n        For example, if an agent is moving upward, then the map will be moving downward.\n        To disable this behavior, set invert=False.\n        \"\"\"", "\n", "device", "=", "p", ".", "device", "\n", "H", ",", "W", "=", "p", ".", "shape", "[", "2", ":", "]", "\n", "\n", "trans_x", "=", "x", "[", ":", ",", "0", "]", "\n", "trans_y", "=", "x", "[", ":", ",", "1", "]", "\n", "# Convert translations to -1.0 to 1.0 range", "\n", "Hby2", "=", "(", "H", "-", "1", ")", "/", "2", "if", "H", "%", "2", "==", "1", "else", "H", "/", "2", "\n", "Wby2", "=", "(", "W", "-", "1", ")", "/", "2", "if", "W", "%", "2", "==", "1", "else", "W", "/", "2", "\n", "\n", "trans_x", "=", "trans_x", "/", "Wby2", "\n", "trans_y", "=", "trans_y", "/", "Hby2", "\n", "rot_t", "=", "x", "[", ":", ",", "2", "]", "\n", "\n", "sin_t", "=", "torch", ".", "sin", "(", "rot_t", ")", "\n", "cos_t", "=", "torch", ".", "cos", "(", "rot_t", ")", "\n", "\n", "# This R convention means Y axis is downwards.", "\n", "A", "=", "torch", ".", "zeros", "(", "p", ".", "size", "(", "0", ")", ",", "3", ",", "3", ")", ".", "to", "(", "device", ")", "\n", "A", "[", ":", ",", "0", ",", "0", "]", "=", "cos_t", "\n", "A", "[", ":", ",", "0", ",", "1", "]", "=", "-", "sin_t", "\n", "A", "[", ":", ",", "1", ",", "0", "]", "=", "sin_t", "\n", "A", "[", ":", ",", "1", ",", "1", "]", "=", "cos_t", "\n", "A", "[", ":", ",", "0", ",", "2", "]", "=", "trans_x", "\n", "A", "[", ":", ",", "1", ",", "2", "]", "=", "trans_y", "\n", "A", "[", ":", ",", "2", ",", "2", "]", "=", "1", "\n", "\n", "# Since this is a source to target mapping, and F.affine_grid expects", "\n", "# target to source mapping, we have to invert this for normal behavior.", "\n", "Ainv", "=", "torch", ".", "inverse", "(", "A", ")", "\n", "\n", "# If target to source mapping is required, invert is enabled and we invert", "\n", "# it again.", "\n", "if", "invert", ":", "\n", "            ", "Ainv", "=", "torch", ".", "inverse", "(", "Ainv", ")", "\n", "\n", "", "Ainv", "=", "Ainv", "[", ":", ",", ":", "2", "]", "\n", "grid", "=", "F", ".", "affine_grid", "(", "Ainv", ",", "p", ".", "size", "(", ")", ",", "align_corners", "=", "True", ")", "\n", "p_trans", "=", "F", ".", "grid_sample", "(", "p", ",", "grid", ",", "mode", "=", "mode", ",", "align_corners", "=", "True", ")", "\n", "\n", "return", "p_trans", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._std_to_map_coord": [[1019, 1035], ["torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "occant_utils.common.convert_world2map", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "occant_exp_trainer.OccAntExpTrainer.spatial_transform_map", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.convert_world2map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.spatial_transform_map"], ["", "def", "_std_to_map_coord", "(", "self", ",", "tensor_map", ",", "gpscompass", ")", ":", "\n", "# tensor_map = torch.Tensor(map).permute((2, 0, 1)).unsqueeze(0)", "\n", "        ", "b", ",", "f", ",", "h", ",", "w", "=", "tensor_map", ".", "shape", "\n", "\n", "# sanity check", "\n", "assert", "h", "==", "w", "and", "(", "h", "==", "2001", "or", "h", "==", "961", ")", "\n", "\n", "xy_world", "=", "torch", ".", "Tensor", "(", "[", "gpscompass", "[", "0", "]", ",", "gpscompass", "[", "1", "]", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "xy_abs", "=", "convert_world2map", "(", "xy_world", ",", "(", "h", ",", "w", ")", ",", "0.05", ")", "\n", "x", "=", "xy_abs", "[", "0", ",", "0", "]", "-", "(", "w", "//", "2", "+", "1", ")", "\n", "y", "=", "xy_abs", "[", "0", ",", "1", "]", "-", "(", "h", "//", "2", "+", "1", ")", "\n", "theta", "=", "gpscompass", "[", "-", "1", "]", "-", "np", ".", "pi", "/", "2", "\n", "tensor_params", "=", "torch", ".", "tensor", "(", "[", "x", ",", "y", ",", "theta", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "ret_map", "=", "self", ".", "spatial_transform_map", "(", "p", "=", "tensor_map", ",", "x", "=", "tensor_params", ",", "invert", "=", "True", ")", "\n", "\n", "return", "ret_map", "# .squeeze(dim=0).permute((1, 2, 0)).numpy()", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._batched_std_to_map_coord": [[1036, 1054], ["occant_utils.common.convert_world2map", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "occant_exp_trainer.OccAntExpTrainer.spatial_transform_map"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.convert_world2map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.spatial_transform_map"], ["", "def", "_batched_std_to_map_coord", "(", "self", ",", "tensor_map", ",", "gpscompass", ")", ":", "\n", "# tensor_map = torch.Tensor(map).permute((2, 0, 1)).unsqueeze(0)", "\n", "        ", "b", ",", "f", ",", "h", ",", "w", "=", "tensor_map", ".", "shape", "\n", "\n", "# sanity check", "\n", "assert", "h", "==", "w", "and", "(", "h", "==", "2001", "or", "h", "==", "961", ")", "\n", "\n", "xy_world", "=", "gpscompass", "[", ":", ",", ":", "2", "]", "\n", "xy_abs", "=", "convert_world2map", "(", "xy_world", ",", "(", "h", ",", "w", ")", ",", "0.05", ")", "\n", "\n", "x", "=", "xy_abs", "[", ":", ",", "0", "]", "-", "(", "w", "//", "2", "+", "1", ")", "\n", "y", "=", "xy_abs", "[", ":", ",", "1", "]", "-", "(", "h", "//", "2", "+", "1", ")", "\n", "theta", "=", "gpscompass", "[", ":", ",", "-", "1", "]", "-", "np", ".", "pi", "/", "2", "\n", "\n", "tensor_params", "=", "torch", ".", "stack", "(", "[", "x", ",", "y", ",", "theta", "]", ",", "dim", "=", "1", ")", "\n", "ret_map", "=", "self", ".", "spatial_transform_map", "(", "p", "=", "tensor_map", ",", "x", "=", "tensor_params", ",", "invert", "=", "True", ")", "\n", "\n", "return", "ret_map", "# .squeeze(dim=0).permute((1, 2, 0)).numpy()", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._save_map_samples": [[1055, 1066], ["map.cpu().squeeze().permute().numpy", "numpy.sum", "cv2.imwrite", "env_layout[].cpu().numpy", "cv2.imwrite", "map.cpu().squeeze().permute", "env_layout[].cpu", "map.cpu().squeeze", "map.cpu"], "methods", ["None"], ["", "def", "_save_map_samples", "(", "self", ",", "map", ",", "env_layout", ",", "idx", "=", "0", ")", ":", "\n", "        ", "np_map", "=", "map", ".", "cpu", "(", ")", ".", "squeeze", "(", "dim", "=", "0", ")", ".", "permute", "(", "(", "1", ",", "2", ",", "0", ")", ")", ".", "numpy", "(", ")", "\n", "np_map", "=", "np", ".", "sum", "(", "np_map", ",", "axis", "=", "2", ")", "\n", "np_map", "[", "np_map", ">", "1", "]", "=", "1", "\n", "save_name", "=", "'warped_map_{}.jpg'", ".", "format", "(", "idx", ")", "\n", "cv2", ".", "imwrite", "(", "save_name", ",", "np_map", "*", "255", ")", "\n", "\n", "np_env_layout", "=", "env_layout", "[", "1", ",", "...", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "np_env_layout", "[", "np_env_layout", ">", "1", "]", "=", "1", "\n", "save_name", "=", "'layout_{}.jpg'", ".", "format", "(", "idx", ")", "\n", "cv2", ".", "imwrite", "(", "save_name", ",", "np_env_layout", "*", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._round_map": [[1067, 1072], ["sem_map.cpu().numpy", "sem_map.cpu"], "methods", ["None"], ["", "def", "_round_map", "(", "self", ",", "sem_map", ")", ":", "\n", "        ", "new_map", "=", "sem_map", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", "\n", "new_map", "[", "new_map", ">=", "0.5", "]", "=", "1.0", "\n", "new_map", "[", "new_map", "<", "0.5", "]", "=", "0.0", "\n", "return", "new_map", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._save_manip_map_samples": [[1073, 1096], ["os.path.join", "imageio.imwrite", "imageio.imwrite", "imageio.imwrite", "imageio.imwrite", "imageio.imwrite", "imageio.imwrite", "imageio.imwrite", "imageio.imwrite", "imageio.imwrite", "imageio.imwrite", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "occant_exp_trainer.OccAntExpTrainer._round_map", "occant_exp_trainer.OccAntExpTrainer._round_map", "occant_exp_trainer.OccAntExpTrainer._round_map", "occant_exp_trainer.OccAntExpTrainer._round_map", "occant_exp_trainer.OccAntExpTrainer._round_map", "occant_exp_trainer.OccAntExpTrainer._round_map", "occant_exp_trainer.OccAntExpTrainer._round_map", "ground_truth_states[].cpu().numpy", "starting_map_states.cpu().numpy", "state_estimates[].cpu().numpy", "gt_map_states.cpu().numpy", "ground_truth_states[].cpu", "starting_map_states.cpu", "state_estimates[].cpu", "gt_map_states.cpu"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._round_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._round_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._round_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._round_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._round_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._round_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._round_map"], ["", "def", "_save_manip_map_samples", "(", "self", ",", "metrics", ",", "top_down_map", ",", "ground_truth_states", ",", "state_estimates", ",", "environment_layout", ",", "\n", "starting_map_states", ",", "gt_map_states", ",", "path", ",", "ep_id", ")", ":", "\n", "        ", "filepath", "=", "f\"explored_area_%={metrics['explored_area_%']}_accuracy={metrics['accuracy']}_iou={metrics['tot_iou']}_episode={ep_id}\"", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "filepath", ")", "\n", "explored_mask", "=", "(", "gt_map_states", "[", ":", ",", "1", "]", ">", "0.5", ")", ".", "float", "(", ")", "[", "0", "]", "\n", "imageio", ".", "imwrite", "(", "path", "+", "'_top_down_map.jpg'", ",", "top_down_map", ")", "\n", "imageio", ".", "imwrite", "(", "path", "+", "'_visible_occupancy.jpg'", ",", "self", ".", "_round_map", "(", "ground_truth_states", "[", "'visible_occupancy'", "]", ")", ")", "\n", "imageio", ".", "imwrite", "(", "path", "+", "'_starting_map.jpg'", ",", "self", ".", "_round_map", "(", "starting_map_states", ")", ")", "\n", "imageio", ".", "imwrite", "(", "path", "+", "'_final_map.jpg'", ",", "self", ".", "_round_map", "(", "state_estimates", "[", "'map_states'", "]", ")", ")", "\n", "imageio", ".", "imwrite", "(", "path", "+", "'_final_map_masked.jpg'", ",", "\n", "(", "state_estimates", "[", "'map_states'", "]", "[", "0", ",", "0", "]", "*", "explored_mask", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "imageio", ".", "imwrite", "(", "path", "+", "'_gt_map.jpg'", ",", "self", ".", "_round_map", "(", "gt_map_states", ")", ")", "\n", "imageio", ".", "imwrite", "(", "path", "+", "'_env_layout.jpg'", ",", "environment_layout", "[", "0", "]", ")", "\n", "imageio", ".", "imwrite", "(", "path", "+", "'_diff_starting_map.jpg'", ",", "self", ".", "_round_map", "(", "gt_map_states", "-", "starting_map_states", ")", ")", "\n", "imageio", ".", "imwrite", "(", "path", "+", "'_diff_final_map.jpg'", ",", "self", ".", "_round_map", "(", "gt_map_states", "-", "state_estimates", "[", "'map_states'", "]", ")", ")", "\n", "imageio", ".", "imwrite", "(", "path", "+", "'_discovered_diffs.jpg'", ",", "self", ".", "_round_map", "(", "\n", "(", "gt_map_states", "-", "starting_map_states", ")", "-", "(", "gt_map_states", "-", "state_estimates", "[", "'map_states'", "]", ")", ")", ")", "\n", "np", ".", "save", "(", "path", "+", "'_visible_occupancy.npy'", ",", "ground_truth_states", "[", "'visible_occupancy'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "np", ".", "save", "(", "path", "+", "'_starting_map.npy'", ",", "starting_map_states", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "np", ".", "save", "(", "path", "+", "'_final_map.npy'", ",", "state_estimates", "[", "'map_states'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "np", ".", "save", "(", "path", "+", "'_final_map_masked.npy'", ",", "\n", "(", "state_estimates", "[", "'map_states'", "]", "[", ":", ",", "0", ",", "...", "]", "[", "0", "]", "*", "explored_mask", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "np", ".", "save", "(", "path", "+", "'_gt_map.npy'", ",", "gt_map_states", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._compute_diff_maps": [[1097, 1103], ["None"], "methods", ["None"], ["", "def", "_compute_diff_maps", "(", "self", ",", "end_maps", ",", "start_maps", ")", ":", "\n", "        ", "end_maps", "[", "end_maps", "<=", "0.5", "]", "=", "0.0", "\n", "end_maps", "[", "end_maps", ">", "0.5", "]", "=", "1.0", "\n", "start_maps", "[", "start_maps", "<=", "0.5", "]", "=", "0.0", "\n", "start_maps", "[", "start_maps", ">", "0.5", "]", "=", "1.0", "\n", "return", "end_maps", "-", "start_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._compute_weighted_diff_maps": [[1104, 1106], ["None"], "methods", ["None"], ["", "def", "_compute_weighted_diff_maps", "(", "self", ",", "visitation_maps", ",", "diff_maps", ")", ":", "\n", "        ", "return", "diff_maps", "*", "visitation_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._compute_accuracy_old": [[1107, 1137], ["occant_exp_trainer.OccAntExpTrainer._compute_weighted_diff_maps", "occant_exp_trainer.OccAntExpTrainer._compute_weighted_diff_maps", "habitat_extensions.utils.compute_confusion_matrix", "habitat_extensions.utils.compute_confusion_matrix", "occant_exp_trainer.OccAntExpTrainer._compute_diff_maps", "occant_exp_trainer.OccAntExpTrainer._compute_diff_maps", "den.item", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "weighted_den.item", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._compute_weighted_diff_maps", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._compute_weighted_diff_maps", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.utils.compute_confusion_matrix", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.utils.compute_confusion_matrix", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._compute_diff_maps", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._compute_diff_maps"], ["", "def", "_compute_accuracy_old", "(", "self", ",", "state_estimates", ",", "starting_map_states", ",", "gt_map_states", ")", ":", "\n", "        ", "diff_maps", "=", "self", ".", "_compute_diff_maps", "(", "state_estimates", "[", "'map_states'", "]", ",", "starting_map_states", ")", "[", ":", ",", "0", "]", "\n", "weighted_diff_maps", "=", "self", ".", "_compute_weighted_diff_maps", "(", "state_estimates", "[", "'visited_states'", "]", "[", ":", ",", "0", "]", ",", "diff_maps", ")", "\n", "\n", "gt_diff_maps", "=", "self", ".", "_compute_diff_maps", "(", "gt_map_states", ",", "starting_map_states", ")", "[", ":", ",", "0", "]", "\n", "gt_weighted_diff_maps", "=", "self", ".", "_compute_weighted_diff_maps", "(", "state_estimates", "[", "'visited_states'", "]", "[", ":", ",", "0", "]", ",", "gt_diff_maps", ")", "\n", "\n", "conf_matrix", "=", "compute_confusion_matrix", "(", "gt_diff_maps", ",", "diff_maps", ")", "\n", "weighted_conf_matrix", "=", "compute_confusion_matrix", "(", "gt_weighted_diff_maps", ",", "weighted_diff_maps", ")", "\n", "true_removal", "=", "conf_matrix", "[", "0", "]", "[", "0", "]", "\n", "false_removal", "=", "conf_matrix", "[", "1", "]", "[", "0", "]", "+", "conf_matrix", "[", "2", "]", "[", "0", "]", "\n", "true_additions", "=", "conf_matrix", "[", "2", "]", "[", "2", "]", "\n", "false_additions", "=", "conf_matrix", "[", "0", "]", "[", "2", "]", "+", "conf_matrix", "[", "1", "]", "[", "2", "]", "\n", "weighted_true_removal", "=", "weighted_conf_matrix", "[", "0", "]", "[", "0", "]", "\n", "weighted_false_removal", "=", "weighted_conf_matrix", "[", "1", "]", "[", "0", "]", "+", "weighted_conf_matrix", "[", "2", "]", "[", "0", "]", "\n", "weighted_true_additions", "=", "weighted_conf_matrix", "[", "2", "]", "[", "2", "]", "\n", "weighted_false_additions", "=", "weighted_conf_matrix", "[", "0", "]", "[", "2", "]", "+", "weighted_conf_matrix", "[", "1", "]", "[", "2", "]", "\n", "\n", "den", "=", "true_additions", "+", "true_removal", "+", "false_additions", "+", "false_removal", "\n", "if", "den", ".", "item", "(", ")", "==", "0", ":", "\n", "            ", "accuracy", "=", "torch", ".", "tensor", "(", "0.", ")", "\n", "", "else", ":", "\n", "            ", "accuracy", "=", "(", "true_additions", "+", "true_removal", ")", "/", "den", "\n", "", "weighted_den", "=", "weighted_true_additions", "+", "weighted_true_removal", "+", "weighted_false_additions", "+", "weighted_false_removal", "\n", "if", "weighted_den", ".", "item", "(", ")", "==", "0", ":", "\n", "            ", "weighted_accuracy", "=", "torch", ".", "tensor", "(", "0.", ")", "\n", "", "else", ":", "\n", "            ", "weighted_accuracy", "=", "(", "weighted_true_additions", "+", "weighted_true_removal", ")", "/", "weighted_den", "\n", "\n", "", "return", "accuracy", ",", "weighted_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._sum_map": [[1138, 1146], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "occ_map[].sum().unsqueeze", "occ_map[].sum"], "methods", ["None"], ["", "def", "_sum_map", "(", "self", ",", "state_estimates", ",", "occ_map", ")", ":", "\n", "        ", "occupancy_map", "=", "torch", ".", "zeros_like", "(", "state_estimates", "[", "'map_states'", "]", "[", "0", "]", ")", "\n", "summed_occupancy_map", "=", "occ_map", "[", ":", ",", ":", "-", "1", ",", "...", "]", ".", "sum", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "summed_occupancy_map", "[", "summed_occupancy_map", ">", "1.0", "]", "=", "1.0", "\n", "summed_occupancy_map", "[", "summed_occupancy_map", "<", "0.0", "]", "=", "0.0", "\n", "occupancy_map", "[", "0", ",", "...", "]", "=", "summed_occupancy_map", "[", "0", "]", "\n", "occupancy_map", "[", "1", ",", "...", "]", "=", "occ_map", "[", ":", ",", "-", "1", ",", "...", "]", "\n", "return", "occupancy_map", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._compute_accuracy": [[1147, 1160], ["occant_exp_trainer.OccAntExpTrainer._compute_diff_maps", "occant_exp_trainer.OccAntExpTrainer._compute_diff_maps", "habitat_extensions.utils.compute_iou_acc", "added_iou.mean", "removed_iou.mean", "total_iou.mean", "accuracy.mean"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._compute_diff_maps", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._compute_diff_maps", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.utils.compute_iou_acc"], ["", "def", "_compute_accuracy", "(", "self", ",", "state_estimates", ",", "starting_map_states", ",", "gt_map_states", ")", ":", "\n", "        ", "map_mask", "=", "(", "gt_map_states", "[", ":", ",", "1", "]", ">", "0.5", ")", ".", "float", "(", ")", "\n", "diff_maps", "=", "self", ".", "_compute_diff_maps", "(", "state_estimates", "[", "'map_states'", "]", ",", "starting_map_states", ")", "\n", "masked_diff_maps", "=", "diff_maps", "[", ":", ",", "0", ",", ":", ",", ":", "]", "*", "map_mask", "\n", "\n", "gt_diff_maps", "=", "self", ".", "_compute_diff_maps", "(", "gt_map_states", ",", "starting_map_states", ")", "\n", "masked_gt_diff_maps", "=", "gt_diff_maps", "[", ":", ",", "0", ",", "...", "]", "*", "map_mask", "\n", "\n", "# get batched metrics", "\n", "added_iou", ",", "removed_iou", ",", "total_iou", ",", "accuracy", "=", "compute_iou_acc", "(", "masked_gt_diff_maps", ",", "masked_diff_maps", ")", "\n", "\n", "# return mean metrics across batch", "\n", "return", "added_iou", ".", "mean", "(", ")", ",", "removed_iou", ".", "mean", "(", ")", ",", "total_iou", ".", "mean", "(", ")", ",", "accuracy", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._compute_accuracy_masked": [[1161, 1177], ["occant_exp_trainer.OccAntExpTrainer._compute_weighted_diff_maps", "occant_exp_trainer.OccAntExpTrainer._compute_weighted_diff_maps", "habitat_extensions.utils.compute_iou_acc", "occant_exp_trainer.OccAntExpTrainer._compute_diff_maps", "occant_exp_trainer.OccAntExpTrainer._compute_diff_maps", "added_iou.mean", "removed_iou.mean", "total_iou.mean", "accuracy.mean"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._compute_weighted_diff_maps", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._compute_weighted_diff_maps", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.utils.compute_iou_acc", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._compute_diff_maps", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._compute_diff_maps"], ["", "def", "_compute_accuracy_masked", "(", "self", ",", "state_estimates", ",", "starting_map_states", ",", "gt_map_states", ",", "ground_truth_states", ")", ":", "\n", "        ", "map_mask", "=", "(", "gt_map_states", "[", ":", ",", "1", "]", ">", "0.5", ")", ".", "float", "(", ")", "\n", "visible_mask", "=", "(", "ground_truth_states", "[", "\"visible_occupancy\"", "]", "[", ":", ",", "1", "]", ">", "0.5", ")", ".", "float", "(", ")", "\n", "visible_mask", "=", "map_mask", "*", "visible_mask", "\n", "\n", "diff_maps", "=", "self", ".", "_compute_diff_maps", "(", "state_estimates", "[", "'map_states'", "]", ",", "starting_map_states", ")", "[", ":", ",", "0", ",", "...", "]", "\n", "weighted_diff_maps", "=", "self", ".", "_compute_weighted_diff_maps", "(", "visible_mask", ",", "diff_maps", ")", "\n", "\n", "gt_diff_maps", "=", "self", ".", "_compute_diff_maps", "(", "gt_map_states", ",", "starting_map_states", ")", "[", ":", ",", "0", ",", "...", "]", "\n", "gt_weighted_diff_maps", "=", "self", ".", "_compute_weighted_diff_maps", "(", "visible_mask", ",", "gt_diff_maps", ")", "\n", "\n", "# get batched metrics", "\n", "added_iou", ",", "removed_iou", ",", "total_iou", ",", "accuracy", "=", "compute_iou_acc", "(", "gt_weighted_diff_maps", ",", "weighted_diff_maps", ")", "\n", "\n", "# return mean metrics across batch", "\n", "return", "added_iou", ".", "mean", "(", ")", ",", "removed_iou", ".", "mean", "(", ")", ",", "total_iou", ".", "mean", "(", ")", ",", "accuracy", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._is_master_process": [[1178, 1180], ["None"], "methods", ["None"], ["", "def", "_is_master_process", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "config", ".", "RANK", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer.setup_for_distributed": [[1181, 1194], ["kwargs.pop", "builtin_print"], "methods", ["None"], ["", "def", "setup_for_distributed", "(", "self", ",", "is_master", ")", ":", "\n", "        ", "\"\"\"\n        This function disables printing when not in master process\n        \"\"\"", "\n", "import", "builtins", "as", "__builtin__", "\n", "builtin_print", "=", "__builtin__", ".", "print", "\n", "\n", "def", "print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "force", "=", "kwargs", ".", "pop", "(", "'force'", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "                ", "builtin_print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "__builtin__", ".", "print", "=", "print", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer.train": [[1195, 1612], ["occant_baselines.common.env_utils.construct_envs", "occant_exp_trainer.OccAntExpTrainer._create_mapper_rollouts", "occant_exp_trainer.OccAntExpTrainer._setup_actor_critic_agent", "occant_exp_trainer.OccAntExpTrainer.logger.info", "occant_exp_trainer.OccAntExpTrainer.logger.info", "occant_exp_trainer.OccAntExpTrainer.logger.info", "occant_exp_trainer.OccAntExpTrainer._create_global_rollouts", "occant_exp_trainer.OccAntExpTrainer._create_local_rollouts", "occant_exp_trainer.OccAntExpTrainer.to", "occant_exp_trainer.OccAntExpTrainer.to", "collections.defaultdict", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "collections.defaultdict", "collections.deque", "collections.deque", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "collections.defaultdict", "collections.deque", "collections.deque", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "time.time", "occant_exp_trainer.OccAntExpTrainer.setup_for_distributed.print", "mapper_rollouts.observations.items", "occant_exp_trainer.OccAntExpTrainer.setup_for_distributed.print", "occant_exp_trainer.OccAntExpTrainer.setup_for_distributed.print", "occant_exp_trainer.OccAntExpTrainer.observations.items", "occant_exp_trainer.OccAntExpTrainer.setup_for_distributed.print", "occant_exp_trainer.OccAntExpTrainer.setup_for_distributed.print", "occant_exp_trainer.OccAntExpTrainer.observations.items", "occant_exp_trainer.OccAntExpTrainer.setup_for_distributed.print", "occant_exp_trainer.OccAntExpTrainer.resume_checkpoint", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "occant_exp_trainer.OccAntExpTrainer.envs.reset", "occant_exp_trainer.OccAntExpTrainer.envs.current_episodes", "occant_exp_trainer.OccAntExpTrainer._prepare_batch", "occant_exp_trainer.OccAntExpTrainer.mapper.ext_register_map", "ground_truth_states[].copy_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "dict", "collections.defaultdict", "occant_exp_trainer.OccAntExpTrainer._is_master_process", "tqdm.tqdm.tqdm", "occant_exp_trainer.OccAntExpTrainer._is_master_process", "occant_exp_trainer.OccAntExpTrainer.envs.close", "occant_exp_trainer.OccAntExpTrainer.setup_for_distributed", "habitat_baselines.common.environments.get_env_class", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "os.path.isdir", "os.makedirs", "occant_exp_trainer.OccAntExpTrainer.setup_for_distributed.print", "occant_exp_trainer.OccAntExpTrainer.setup_for_distributed.print", "occant_exp_trainer.OccAntExpTrainer.setup_for_distributed.print", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "einops.rearrange", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "occant_exp_trainer.FalseWriter", "range", "tqdm.tqdm.tqdm", "occant_exp_trainer.OccAntExpTrainer._supplementary_rollout_update", "occant_exp_trainer.OccAntExpTrainer._update_global_agent", "update_metrics_global.items", "FalseWriter.close", "occant_exp_trainer.OccAntExpTrainer._is_master_process", "occant_exp_trainer.OccAntExpTrainer._assign_devices", "sum", "sum", "sum", "collections.deque", "collections.deque", "collections.deque", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "collections.deque", "range", "occant_exp_trainer.OccAntExpTrainer._collect_rollout_step", "occant_exp_trainer.OccAntExpTrainer.logger.info", "statistics_dict.items", "dict.items", "max", "occant_exp_trainer.OccAntExpTrainer._is_master_process", "episode_step_count[].item", "torch.zeros.fill_", "torch.zeros.fill_", "torch.zeros.fill_", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "[].append", "occant_exp_trainer.OccAntExpTrainer._is_master_process", "episode_step_count[].item", "occant_utils.metrics.measure_pose_estimation_performance", "occant_utils.metrics.measure_pose_estimation_performance.items", "occant_exp_trainer.OccAntExpTrainer.envs.reset", "occant_exp_trainer.OccAntExpTrainer.envs.current_episodes", "occant_exp_trainer.OccAntExpTrainer._prepare_batch", "torch.zeros.fill_", "torch.zeros.fill_", "torch.zeros.fill_", "ground_truth_states.keys", "state_estimates.keys", "occant_exp_trainer.OccAntExpTrainer.mapper.ext_register_map", "ground_truth_states[].copy_", "v.element_size", "v.nelement", "v.element_size", "v.nelement", "v.element_size", "v.nelement", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "occant_exp_trainer.OccAntExpTrainer._update_mapper_agent", "update_metrics_mapper.items", "occant_exp_trainer.OccAntExpTrainer._supplementary_rollout_update", "occant_exp_trainer.OccAntExpTrainer._update_local_agent", "update_metrics_local.items", "occant_exp_trainer.OccAntExpTrainer.logger.info", "v.items", "window_episode_stats[].append", "occant_exp_trainer.FalseWriter.add_scalar", "occant_exp_trainer.FalseWriter.add_scalar", "occant_exp_trainer.FalseWriter.add_scalar", "occant_exp_trainer.OccAntExpTrainer.logger.info", "occant_exp_trainer.OccAntExpTrainer.logger.info", "occant_exp_trainer.OccAntExpTrainer.logger.info", "occant_exp_trainer.OccAntExpTrainer.save_checkpoint", "[].append", "ground_truth_states[].fill_", "state_estimates[].fill_", "einops.rearrange", "param.numel", "param.numel", "param.numel", "[].append", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "[].append", "v.clone", "v[].sum().item", "collections.defaultdict.items", "time.time", "dict", "occant_exp_trainer.OccAntExpTrainer.mapper_agent.parameters", "occant_exp_trainer.OccAntExpTrainer.local_agent.parameters", "occant_exp_trainer.OccAntExpTrainer.global_agent.parameters", "episode_step_count[].item", "occant_exp_trainer.OccAntExpTrainer._is_master_process", "occant_exp_trainer.FalseWriter.add_scalar", "occant_exp_trainer.OccAntExpTrainer.logger.info", "len", "len", "len", "numpy.mean", "v[].sum", "numpy.mean().item", "deltas.items", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.env_utils.construct_envs", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._create_mapper_rollouts", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._setup_actor_critic_agent", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._create_global_rollouts", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._create_local_rollouts", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer.resume_checkpoint", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.reset", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._prepare_batch", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper.ext_register_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._is_master_process", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._is_master_process", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerSequential.close", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer.setup_for_distributed", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._supplementary_rollout_update", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._update_global_agent", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerSequential.close", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._is_master_process", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._assign_devices", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._collect_rollout_step", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._is_master_process", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._is_master_process", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.measure_pose_estimation_performance", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.reset", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._prepare_batch", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper.ext_register_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._update_mapper_agent", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._supplementary_rollout_update", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._update_local_agent", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseWriter.add_scalar", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseWriter.add_scalar", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseWriter.add_scalar", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer.save_checkpoint", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._is_master_process", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseWriter.add_scalar", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info"], ["", "def", "train", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Main method for training PPO.\n\n        Returns:\n            None\n        \"\"\"", "\n", "if", "self", ".", "config", ".", "DISTRIBUTED", "is", "True", ":", "\n", "            ", "self", ".", "setup_for_distributed", "(", "self", ".", "_is_master_process", "(", ")", ")", "\n", "\n", "", "self", ".", "envs", "=", "construct_envs", "(", "\n", "self", ".", "config", ",", "\n", "get_env_class", "(", "self", ".", "config", ".", "ENV_NAME", ")", ",", "\n", "devices", "=", "self", ".", "_assign_devices", "(", ")", ",", "\n", ")", "\n", "\n", "ppo_cfg", "=", "self", ".", "config", ".", "RL", ".", "PPO", "\n", "ans_cfg", "=", "self", ".", "config", ".", "RL", ".", "ANS", "\n", "mapper_cfg", "=", "self", ".", "config", ".", "RL", ".", "ANS", ".", "MAPPER", "\n", "occ_cfg", "=", "self", ".", "config", ".", "RL", ".", "ANS", ".", "OCCUPANCY_ANTICIPATOR", "\n", "self", ".", "device", "=", "(", "\n", "torch", ".", "device", "(", "\"cuda\"", ",", "self", ".", "config", ".", "TORCH_GPU_ID", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "config", ".", "CHECKPOINT_FOLDER", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "config", ".", "CHECKPOINT_FOLDER", ")", "\n", "", "self", ".", "mapper_rollouts", "=", "self", ".", "_create_mapper_rollouts", "(", "ppo_cfg", ",", "ans_cfg", ")", "\n", "self", ".", "_setup_actor_critic_agent", "(", "ppo_cfg", ",", "ans_cfg", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "\"mapper_agent number of parameters: {}\"", ".", "format", "(", "\n", "sum", "(", "param", ".", "numel", "(", ")", "for", "param", "in", "self", ".", "mapper_agent", ".", "parameters", "(", ")", ")", "\n", ")", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "\"local_agent number of parameters: {}\"", ".", "format", "(", "\n", "sum", "(", "param", ".", "numel", "(", ")", "for", "param", "in", "self", ".", "local_agent", ".", "parameters", "(", ")", ")", "\n", ")", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "\"global_agent number of parameters: {}\"", ".", "format", "(", "\n", "sum", "(", "param", ".", "numel", "(", ")", "for", "param", "in", "self", ".", "global_agent", ".", "parameters", "(", ")", ")", "\n", ")", "\n", ")", "\n", "mapper_rollouts", "=", "self", ".", "mapper_rollouts", "\n", "global_rollouts", "=", "self", ".", "_create_global_rollouts", "(", "ppo_cfg", ",", "ans_cfg", ")", "\n", "local_rollouts", "=", "self", ".", "_create_local_rollouts", "(", "ppo_cfg", ",", "ans_cfg", ")", "\n", "global_rollouts", ".", "to", "(", "self", ".", "device", ")", "\n", "local_rollouts", ".", "to", "(", "self", ".", "device", ")", "\n", "# ===================== Create statistics buffers =====================", "\n", "statistics_dict", "=", "{", "}", "\n", "# Mapper statistics", "\n", "statistics_dict", "[", "\"mapper\"", "]", "=", "defaultdict", "(", "\n", "lambda", ":", "deque", "(", "maxlen", "=", "ppo_cfg", ".", "loss_stats_window_size", ")", "\n", ")", "\n", "# Local policy statistics", "\n", "local_episode_rewards", "=", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "1", ")", "\n", "statistics_dict", "[", "\"local_policy\"", "]", "=", "defaultdict", "(", "\n", "lambda", ":", "deque", "(", "maxlen", "=", "ppo_cfg", ".", "loss_stats_window_size", ")", "\n", ")", "\n", "window_local_episode_reward", "=", "deque", "(", "maxlen", "=", "ppo_cfg", ".", "reward_window_size", ")", "\n", "window_local_episode_counts", "=", "deque", "(", "maxlen", "=", "ppo_cfg", ".", "reward_window_size", ")", "\n", "# Global policy statistics", "\n", "global_episode_rewards", "=", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "1", ")", "\n", "statistics_dict", "[", "\"global_policy\"", "]", "=", "defaultdict", "(", "\n", "lambda", ":", "deque", "(", "maxlen", "=", "ppo_cfg", ".", "loss_stats_window_size", ")", "\n", ")", "\n", "window_global_episode_reward", "=", "deque", "(", "maxlen", "=", "ppo_cfg", ".", "reward_window_size", ")", "\n", "window_global_episode_counts", "=", "deque", "(", "maxlen", "=", "ppo_cfg", ".", "reward_window_size", ")", "\n", "# Overall count statistics", "\n", "episode_counts", "=", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "1", ")", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "env_time", "=", "0", "\n", "pth_time", "=", "0", "\n", "count_steps", "=", "0", "\n", "count_checkpoints", "=", "0", "\n", "\n", "# ==================== Measuring memory consumption ===================", "\n", "total_memory_size", "=", "0", "\n", "print", "(", "\"=================== Mapper rollouts ======================\"", ")", "\n", "for", "k", ",", "v", "in", "mapper_rollouts", ".", "observations", ".", "items", "(", ")", ":", "\n", "            ", "mem", "=", "v", ".", "element_size", "(", ")", "*", "v", ".", "nelement", "(", ")", "*", "1e-9", "\n", "print", "(", "f\"key: {k:<40s}, memory: {mem:>10.4f} GB\"", ")", "\n", "total_memory_size", "+=", "mem", "\n", "", "print", "(", "f\"Total memory: {total_memory_size:>10.4f} GB\"", ")", "\n", "\n", "total_memory_size", "=", "0", "\n", "print", "(", "\"================== Local policy rollouts =====================\"", ")", "\n", "for", "k", ",", "v", "in", "local_rollouts", ".", "observations", ".", "items", "(", ")", ":", "\n", "            ", "mem", "=", "v", ".", "element_size", "(", ")", "*", "v", ".", "nelement", "(", ")", "*", "1e-9", "\n", "print", "(", "f\"key: {k:<40s}, memory: {mem:>10.4f} GB\"", ")", "\n", "total_memory_size", "+=", "mem", "\n", "", "print", "(", "f\"Total memory: {total_memory_size:>10.4f} GB\"", ")", "\n", "\n", "total_memory_size", "=", "0", "\n", "print", "(", "\"================== Global policy rollouts ====================\"", ")", "\n", "for", "k", ",", "v", "in", "global_rollouts", ".", "observations", ".", "items", "(", ")", ":", "\n", "            ", "mem", "=", "v", ".", "element_size", "(", ")", "*", "v", ".", "nelement", "(", ")", "*", "1e-9", "\n", "print", "(", "f\"key: {k:<40s}, memory: {mem:>10.4f} GB\"", ")", "\n", "total_memory_size", "+=", "mem", "\n", "", "print", "(", "f\"Total memory: {total_memory_size:>10.4f} GB\"", ")", "\n", "# Resume checkpoint if available", "\n", "(", "\n", "num_updates_start", ",", "\n", "count_steps_start", ",", "\n", "count_checkpoints", ",", "\n", ")", "=", "self", ".", "resume_checkpoint", "(", ")", "\n", "count_steps", "=", "count_steps_start", "\n", "\n", "imH", ",", "imW", "=", "ans_cfg", ".", "image_scale_hw", "\n", "M", "=", "ans_cfg", ".", "overall_map_size", "\n", "# ==================== Create state variables =================", "\n", "state_estimates", "=", "{", "\n", "# Agent's pose estimate", "\n", "\"pose_estimates\"", ":", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "3", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "# Agent's map", "\n", "\"map_states\"", ":", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "2", ",", "M", ",", "M", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "\"recurrent_hidden_states\"", ":", "torch", ".", "zeros", "(", "\n", "1", ",", "self", ".", "envs", ".", "num_envs", ",", "ans_cfg", ".", "LOCAL_POLICY", ".", "hidden_size", "\n", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "\"visited_states\"", ":", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "1", ",", "M", ",", "M", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "}", "\n", "ground_truth_states", "=", "{", "\n", "# To measure area seen", "\n", "\"visible_occupancy\"", ":", "torch", ".", "zeros", "(", "\n", "self", ".", "envs", ".", "num_envs", ",", "2", ",", "M", ",", "M", ",", "device", "=", "self", ".", "device", "\n", ")", ",", "\n", "\"pose\"", ":", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "3", ",", "device", "=", "self", ".", "device", ")", ",", "\n", "\"prev_global_reward_metric\"", ":", "torch", ".", "zeros", "(", "\n", "self", ".", "envs", ".", "num_envs", ",", "1", ",", "device", "=", "self", ".", "device", "\n", ")", ",", "\n", "}", "\n", "if", "(", "\n", "ans_cfg", ".", "reward_type", "==", "\"map_accuracy\"", "\n", "or", "ans_cfg", ".", "LOCAL_POLICY", ".", "learning_algorithm", "==", "\"il\"", "\n", ")", ":", "\n", "            ", "ground_truth_states", "[", "\"environment_layout\"", "]", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "envs", ".", "num_envs", ",", "2", ",", "M", ",", "M", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "masks", "=", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "1", ")", "\n", "episode_step_count", "=", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "1", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "# ==================== Reset the environments =================", "\n", "observations", "=", "self", ".", "envs", ".", "reset", "(", ")", "\n", "current_episodes", "=", "self", ".", "envs", ".", "current_episodes", "(", ")", "\n", "\n", "scene_names", "=", "[", "]", "\n", "map_variants", "=", "[", "]", "\n", "\n", "batch", "=", "self", ".", "_prepare_batch", "(", "observations", ")", "\n", "prev_batch", "=", "batch", "\n", "# Update visible occupancy", "\n", "ground_truth_states", "[", "\"visible_occupancy\"", "]", "=", "self", ".", "mapper", ".", "ext_register_map", "(", "\n", "ground_truth_states", "[", "\"visible_occupancy\"", "]", ",", "\n", "rearrange", "(", "batch", "[", "\"ego_map_gt\"", "]", ",", "\"b h w c -> b c h w\"", ")", ",", "\n", "batch", "[", "\"pose_gt\"", "]", ",", "\n", ")", "\n", "ground_truth_states", "[", "\"pose\"", "]", ".", "copy_", "(", "batch", "[", "\"pose_gt\"", "]", ")", "\n", "\n", "current_local_episode_reward", "=", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "1", ")", "\n", "current_global_episode_reward", "=", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "1", ")", "\n", "running_episode_stats", "=", "dict", "(", "\n", "count", "=", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "1", ")", ",", "\n", "local_reward", "=", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "1", ")", ",", "\n", "global_reward", "=", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "1", ")", ",", "\n", ")", "\n", "window_episode_stats", "=", "defaultdict", "(", "\n", "lambda", ":", "deque", "(", "maxlen", "=", "ppo_cfg", ".", "reward_window_size", ")", "\n", ")", "\n", "\n", "# Useful variables", "\n", "NUM_MAPPER_STEPS", "=", "ans_cfg", ".", "MAPPER", ".", "num_mapper_steps", "\n", "NUM_LOCAL_STEPS", "=", "ppo_cfg", ".", "num_local_steps", "\n", "NUM_GLOBAL_STEPS", "=", "ppo_cfg", ".", "num_global_steps", "\n", "GLOBAL_UPDATE_INTERVAL", "=", "NUM_GLOBAL_STEPS", "*", "ans_cfg", ".", "goal_interval", "\n", "NUM_GLOBAL_UPDATES_PER_EPISODE", "=", "self", ".", "config", ".", "T_EXP", "//", "GLOBAL_UPDATE_INTERVAL", "\n", "NUM_GLOBAL_UPDATES", "=", "(", "\n", "self", ".", "config", ".", "NUM_EPISODES", "\n", "*", "NUM_GLOBAL_UPDATES_PER_EPISODE", "\n", "//", "self", ".", "config", ".", "NUM_PROCESSES", "\n", ")", "\n", "# Sanity checks", "\n", "assert", "(", "\n", "NUM_MAPPER_STEPS", "%", "NUM_GLOBAL_STEPS", "==", "0", "\n", ")", ",", "\"Mapper steps must be a multiple of global steps\"", "\n", "assert", "(", "\n", "NUM_LOCAL_STEPS", "==", "ans_cfg", ".", "goal_interval", "\n", ")", ",", "\"Local steps must be same as subgoal sampling interval\"", "\n", "\n", "if", "self", ".", "_is_master_process", "(", ")", ":", "\n", "            ", "writer", "=", "SummaryWriter", "(", "self", ".", "config", ".", "TENSORBOARD_DIR", ")", "\n", "", "else", ":", "\n", "            ", "writer", "=", "FalseWriter", "(", ")", "\n", "\n", "", "for", "update", "in", "tqdm", "(", "range", "(", "num_updates_start", ",", "NUM_GLOBAL_UPDATES", ")", ")", ":", "\n", "            ", "for", "step", "in", "tqdm", "(", "range", "(", "NUM_GLOBAL_STEPS", ")", ")", ":", "\n", "\n", "                ", "(", "\n", "delta_pth_time", ",", "\n", "delta_env_time", ",", "\n", "delta_steps", ",", "\n", "prev_batch", ",", "\n", "batch", ",", "\n", "state_estimates", ",", "\n", "ground_truth_states", ",", "\n", ")", "=", "self", ".", "_collect_rollout_step", "(", "\n", "batch", ",", "\n", "prev_batch", ",", "\n", "episode_step_count", ",", "\n", "state_estimates", ",", "\n", "ground_truth_states", ",", "\n", "masks", ",", "\n", "mapper_rollouts", ",", "\n", "local_rollouts", ",", "\n", "global_rollouts", ",", "\n", "current_local_episode_reward", ",", "\n", "current_global_episode_reward", ",", "\n", "running_episode_stats", ",", "\n", "statistics_dict", ",", "\n", ")", "\n", "\n", "# add_iou, rem_iou, tot_iou, acc = self._compute_accuracy(state_estimates, starting_map_states, gt_map_states)", "\n", "pth_time", "+=", "delta_pth_time", "\n", "env_time", "+=", "delta_env_time", "\n", "count_steps", "+=", "delta_steps", "\n", "\n", "# Useful flags", "\n", "FROZEN_MAPPER", "=", "(", "\n", "True", "\n", "if", "mapper_cfg", ".", "ignore_pose_estimator", "\n", "and", "(", "\n", "occ_cfg", ".", "type", "in", "self", ".", "frozen_mapper_types", "\n", "or", "mapper_cfg", ".", "freeze_projection_unit", "\n", ")", "\n", "else", "False", "\n", ")", "\n", "UPDATE_MAPPER_FLAG", "=", "(", "\n", "True", "\n", "if", "episode_step_count", "[", "0", "]", ".", "item", "(", ")", "%", "NUM_MAPPER_STEPS", "==", "0", "\n", "else", "False", "\n", ")", "\n", "UPDATE_LOCAL_FLAG", "=", "True", "\n", "\n", "# ------------------------ update mapper --------------------------", "\n", "if", "UPDATE_MAPPER_FLAG", ":", "\n", "                    ", "(", "\n", "delta_pth_time", ",", "\n", "update_metrics_mapper", ",", "\n", ")", "=", "self", ".", "_update_mapper_agent", "(", "mapper_rollouts", ")", "\n", "\n", "for", "k", ",", "v", "in", "update_metrics_mapper", ".", "items", "(", ")", ":", "\n", "                        ", "statistics_dict", "[", "\"mapper\"", "]", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "\n", "", "", "pth_time", "+=", "delta_pth_time", "\n", "\n", "# -------------------- update local policy ------------------------", "\n", "if", "UPDATE_LOCAL_FLAG", ":", "\n", "                    ", "delta_pth_time", "=", "self", ".", "_supplementary_rollout_update", "(", "\n", "batch", ",", "\n", "prev_batch", ",", "\n", "episode_step_count", ",", "\n", "state_estimates", ",", "\n", "ground_truth_states", ",", "\n", "masks", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "local_rollouts", ",", "\n", "global_rollouts", ",", "\n", "update_option", "=", "\"local\"", ",", "\n", ")", "\n", "\n", "# Sanity check", "\n", "assert", "local_rollouts", ".", "step", "==", "local_rollouts", ".", "num_steps", "\n", "\n", "pth_time", "+=", "delta_pth_time", "\n", "(", "\n", "delta_pth_time", ",", "\n", "update_metrics_local", ",", "\n", ")", "=", "self", ".", "_update_local_agent", "(", "local_rollouts", ")", "\n", "\n", "for", "k", ",", "v", "in", "update_metrics_local", ".", "items", "(", ")", ":", "\n", "                        ", "statistics_dict", "[", "\"local_policy\"", "]", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "\n", "# -------------------------- log statistics -----------------------", "\n", "", "", "self", ".", "logger", ".", "info", "(", "''", ")", "\n", "for", "k", ",", "v", "in", "statistics_dict", ".", "items", "(", ")", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "\n", "\"=========== {:20s} ============\"", ".", "format", "(", "k", "+", "\" stats\"", ")", "\n", ")", "\n", "for", "kp", ",", "vp", "in", "v", ".", "items", "(", ")", ":", "\n", "                        ", "if", "len", "(", "vp", ")", ">", "0", "and", "self", ".", "_is_master_process", "(", ")", ":", "\n", "                            ", "writer", ".", "add_scalar", "(", "f\"{k}/{kp}\"", ",", "np", ".", "mean", "(", "vp", ")", ",", "count_steps", "*", "self", ".", "config", ".", "WORLD_SIZE", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"{kp:25s}: {np.mean(vp).item():10.5f}\"", ")", "\n", "\n", "", "", "", "for", "k", ",", "v", "in", "running_episode_stats", ".", "items", "(", ")", ":", "\n", "                    ", "window_episode_stats", "[", "k", "]", ".", "append", "(", "v", ".", "clone", "(", ")", ")", "\n", "\n", "", "deltas", "=", "{", "\n", "k", ":", "(", "\n", "(", "v", "[", "-", "1", "]", "-", "v", "[", "0", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "len", "(", "v", ")", ">", "1", "\n", "else", "v", "[", "0", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", ")", "\n", "for", "k", ",", "v", "in", "window_episode_stats", ".", "items", "(", ")", "\n", "}", "\n", "deltas", "[", "\"count\"", "]", "=", "max", "(", "deltas", "[", "\"count\"", "]", ",", "1.0", ")", "\n", "\n", "world_step", "=", "count_steps", "*", "self", ".", "config", ".", "WORLD_SIZE", "\n", "fps", "=", "(", "world_step", "-", "count_steps_start", ")", "/", "(", "time", ".", "time", "(", ")", "-", "t_start", ")", "\n", "if", "self", ".", "_is_master_process", "(", ")", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "\"local_reward\"", ",", "deltas", "[", "\"local_reward\"", "]", "/", "deltas", "[", "\"count\"", "]", ",", ")", "\n", "writer", ".", "add_scalar", "(", "\"global_reward\"", ",", "deltas", "[", "\"global_reward\"", "]", "/", "deltas", "[", "\"count\"", "]", ",", "world_step", ")", "\n", "writer", ".", "add_scalar", "(", "\"fps\"", ",", "fps", ",", "world_step", ")", "\n", "\n", "", "if", "update", ">", "0", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "\"update: {}\\tfps: {:.3f}\\t\"", ".", "format", "(", "update", ",", "fps", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "\"update: {}\\tenv-time: {:.3f}s\\tpth-time: {:.3f}s\\t\"", "\n", "\"frames: {}\"", ".", "format", "(", "update", ",", "env_time", ",", "pth_time", ",", "count_steps", "*", "self", ".", "config", ".", "WORLD_SIZE", ")", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "\"Average window size: {}  {}\"", ".", "format", "(", "\n", "len", "(", "window_episode_stats", "[", "\"count\"", "]", ")", ",", "\n", "\"  \"", ".", "join", "(", "\n", "\"{}: {:.3f}\"", ".", "format", "(", "k", ",", "v", "/", "deltas", "[", "\"count\"", "]", ")", "\n", "for", "k", ",", "v", "in", "deltas", ".", "items", "(", ")", "\n", "if", "k", "!=", "\"count\"", "\n", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "", "pth_time", "+=", "delta_pth_time", "\n", "\n", "# At episode termination, manually set masks to zeros.", "\n", "", "if", "episode_step_count", "[", "0", "]", ".", "item", "(", ")", "==", "self", ".", "config", ".", "T_EXP", ":", "\n", "                ", "masks", ".", "fill_", "(", "0", ")", "\n", "\n", "# -------------------- update global policy -----------------------", "\n", "", "self", ".", "_supplementary_rollout_update", "(", "\n", "batch", ",", "\n", "prev_batch", ",", "\n", "episode_step_count", ",", "\n", "state_estimates", ",", "\n", "ground_truth_states", ",", "\n", "masks", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "local_rollouts", ",", "\n", "global_rollouts", ",", "\n", "update_option", "=", "\"global\"", ",", "\n", ")", "\n", "\n", "# Sanity check", "\n", "assert", "global_rollouts", ".", "step", "==", "NUM_GLOBAL_STEPS", "\n", "\n", "(", "delta_pth_time", ",", "update_metrics_global", ",", ")", "=", "self", ".", "_update_global_agent", "(", "\n", "global_rollouts", "\n", ")", "\n", "\n", "for", "k", ",", "v", "in", "update_metrics_global", ".", "items", "(", ")", ":", "\n", "                ", "statistics_dict", "[", "\"global_policy\"", "]", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "\n", "", "pth_time", "+=", "delta_pth_time", "\n", "\n", "# checkpoint model", "\n", "if", "update", "%", "self", ".", "config", ".", "CHECKPOINT_INTERVAL", "==", "0", ":", "\n", "                ", "if", "self", ".", "_is_master_process", "(", ")", ":", "\n", "                    ", "self", ".", "save_checkpoint", "(", "\n", "f\"ckpt.{count_checkpoints}.pth\"", ",", "\n", "dict", "(", "step", "=", "count_steps", ",", "update", "=", "update", ")", ",", "\n", ")", "\n", "count_checkpoints", "+=", "1", "\n", "\n", "# Manually enforce episode termination criterion", "\n", "", "", "if", "episode_step_count", "[", "0", "]", ".", "item", "(", ")", "==", "self", ".", "config", ".", "T_EXP", ":", "\n", "\n", "# Update episode rewards", "\n", "                ", "running_episode_stats", "[", "\"local_reward\"", "]", "+=", "(", "\n", "1", "-", "masks", "\n", ")", "*", "current_local_episode_reward", "\n", "running_episode_stats", "[", "\"global_reward\"", "]", "+=", "(", "\n", "1", "-", "masks", "\n", ")", "*", "current_global_episode_reward", "\n", "running_episode_stats", "[", "\"count\"", "]", "+=", "1", "-", "masks", "\n", "\n", "current_local_episode_reward", "*=", "masks", "\n", "current_global_episode_reward", "*=", "masks", "\n", "\n", "# Measure accumulative error in pose estimates", "\n", "pose_estimation_metrics", "=", "measure_pose_estimation_performance", "(", "\n", "state_estimates", "[", "\"pose_estimates\"", "]", ",", "ground_truth_states", "[", "\"pose\"", "]", "\n", ")", "\n", "for", "k", ",", "v", "in", "pose_estimation_metrics", ".", "items", "(", ")", ":", "\n", "                    ", "statistics_dict", "[", "\"mapper\"", "]", "[", "\"episode_\"", "+", "k", "]", ".", "append", "(", "v", ")", "\n", "\n", "", "observations", "=", "self", ".", "envs", ".", "reset", "(", ")", "\n", "current_episodes", "=", "self", ".", "envs", ".", "current_episodes", "(", ")", "\n", "scene_names", "=", "[", "]", "\n", "map_variants", "=", "[", "]", "\n", "\n", "batch", "=", "self", ".", "_prepare_batch", "(", "observations", ")", "\n", "prev_batch", "=", "batch", "\n", "# Reset episode step counter", "\n", "episode_step_count", ".", "fill_", "(", "0", ")", "\n", "# Reset states", "\n", "for", "k", "in", "ground_truth_states", ".", "keys", "(", ")", ":", "\n", "                    ", "ground_truth_states", "[", "k", "]", ".", "fill_", "(", "0", ")", "\n", "", "for", "k", "in", "state_estimates", ".", "keys", "(", ")", ":", "\n", "                    ", "state_estimates", "[", "k", "]", ".", "fill_", "(", "0", ")", "\n", "# Update visible occupancy", "\n", "", "ground_truth_states", "[", "\n", "\"visible_occupancy\"", "\n", "]", "=", "self", ".", "mapper", ".", "ext_register_map", "(", "\n", "ground_truth_states", "[", "\"visible_occupancy\"", "]", ",", "\n", "rearrange", "(", "batch", "[", "\"ego_map_gt\"", "]", ",", "\"b h w c -> b c h w\"", ")", ",", "\n", "batch", "[", "\"pose_gt\"", "]", ",", "\n", ")", "\n", "ground_truth_states", "[", "\"pose\"", "]", ".", "copy_", "(", "batch", "[", "\"pose_gt\"", "]", ")", "\n", "\n", "", "", "if", "self", ".", "_is_master_process", "(", ")", ":", "\n", "            ", "writer", ".", "close", "(", ")", "\n", "", "self", ".", "envs", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._eval_checkpoint": [[1613, 2136], ["int", "occant_exp_trainer.OccAntExpTrainer.load_checkpoint", "occant_exp_trainer.OccAntExpTrainer.defrost", "occant_exp_trainer.OccAntExpTrainer.freeze", "occant_exp_trainer.OccAntExpTrainer.logger.info", "occant_baselines.common.env_utils.construct_envs", "occant_exp_trainer.OccAntExpTrainer._setup_actor_critic_agent", "occant_exp_trainer.OccAntExpTrainer.mapper_agent.load_state_dict", "occant_exp_trainer.OccAntExpTrainer.global_agent.load_state_dict", "occant_exp_trainer.OccAntExpTrainer.mapper.eval", "occant_exp_trainer.OccAntExpTrainer.local_actor_critic.eval", "occant_exp_trainer.OccAntExpTrainer.global_actor_critic.eval", "collections.defaultdict", "collections.defaultdict", "collections.deque", "tqdm.tqdm.tqdm", "occant_exp_trainer.OccAntExpTrainer.logger.info", "occant_exp_trainer.OccAntExpTrainer.logger.info", "collections.defaultdict.items", "occant_exp_trainer.OccAntExpTrainer.logger.info", "collections.defaultdict.items", "occant_exp_trainer.OccAntExpTrainer.envs.close", "occant_exp_trainer.OccAntExpTrainer._setup_eval_config", "occant_exp_trainer.OccAntExpTrainer.config.clone", "occant_exp_trainer.OccAntExpTrainer.TASK_CONFIG.TASK.SENSORS.append", "len", "occant_exp_trainer.OccAntExpTrainer.defrost", "occant_exp_trainer.OccAntExpTrainer.TASK_CONFIG.TASK.MEASUREMENTS.append", "occant_exp_trainer.OccAntExpTrainer.TASK_CONFIG.TASK.MEASUREMENTS.append", "occant_exp_trainer.OccAntExpTrainer.freeze", "occant_exp_trainer.OccAntExpTrainer._create_tmp_dataset", "habitat_baselines.common.environments.get_env_class", "occant_exp_trainer.OccAntExpTrainer.local_agent.load_state_dict", "len", "os.makedirs", "sum", "sum", "range", "occant_exp_trainer.OccAntExpTrainer.envs.current_episodes", "occant_exp_trainer.OccAntExpTrainer._prepare_batch", "occant_exp_trainer.OccAntExpTrainer.ans_net.reset", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "einops.asnumpy", "einops.asnumpy", "numpy.concatenate", "range", "time.time", "tqdm.tqdm.tqdm", "habitat.logger.add_filehandler", "v.get_metric", "sorted", "writer.add_scalar", "v.get_metric", "sorted", "writer.add_scalar", "collections.defaultdict.items", "collections.defaultdict.items", "s2d2_metrics.items", "range", "json.dump", "occant_exp_trainer.OccAntExpTrainer._remove_tmp_dataset", "re.findall", "range", "habitat.logger.warn", "habitat.logger.warn", "occant_utils.metrics.TemporalMetric", "occant_utils.metrics.TemporalMetric", "occant_exp_trainer.OccAntExpTrainer.envs.reset", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "occant_utils.common.convert_world2map", "occant_utils.common.convert_world2map", "gt_agent_poses_over_time[].append", "pred_agent_poses_over_time[].append", "range", "torch.zeros().fill_", "torch.zeros().fill_", "torch.zeros().fill_", "torch.zeros().fill_", "torch.zeros().fill_", "torch.zeros().fill_", "torch.zeros().fill_", "torch.zeros().fill_", "torch.zeros().fill_", "einops.asnumpy", "numpy.concatenate", "einops.asnumpy", "numpy.concatenate", "range", "occant_exp_trainer.OccAntExpTrainer.envs.step", "occant_exp_trainer.OccAntExpTrainer._prepare_batch", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "habitat.logger.add_filehandler", "list", "occant_exp_trainer.OccAntExpTrainer.logger.info", "v.get_last_metric", "list", "occant_exp_trainer.OccAntExpTrainer.logger.info", "v.get_last_metric", "per_episode_metrics.items", "per_episode_statistics.append", "open", "range", "range", "einops.asnumpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "occant_exp_trainer.OccAntExpTrainer.ans_net.act", "torch.zeros.copy_", "torch.zeros.copy_", "torch.zeros.copy_", "occant_exp_trainer.OccAntExpTrainer.ans_net.mapper.module.ext_register_map", "occant_exp_trainer.OccAntExpTrainer.ans_net.mapper.ext_register_map", "occant_utils.common.convert_world2map", "occant_utils.common.convert_world2map", "gt_agent_poses_over_time[].append", "pred_agent_poses_over_time[].append", "list", "numpy.stack", "einops.rearrange", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "range", "occant_utils.metrics.measure_pose_estimation_performance", "occant_utils.metrics.measure_pose_estimation_performance.items", "curr_all_metrics.update", "occant_utils.metrics.measure_map_quality", "occant_utils.metrics.measure_map_quality.items", "curr_all_metrics.update", "occant_utils.metrics.measure_area_seen_performance", "occant_utils.metrics.measure_area_seen_performance.items", "curr_all_metrics.update", "[].split", "habitat.logger.add_filehandler", "v.get_metric.keys", "v.get_metric.keys", "v.keys", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "batch[].permute", "batch[].permute", "einops.asnumpy", "einops.asnumpy", "a[].item", "zip", "episode_statistics.append", "pose_estimation_metrics[].update", "mapping_metrics[].update", "mapping_metrics[].update", "collections.deque.append", "occant_exp_trainer.OccAntExpTrainer.logger.info", "occant_exp_trainer.OccAntExpTrainer.logger.info", "curr_all_metrics.items", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.mean().item", "occant_exp_trainer.OccAntExpTrainer.logger.info", "len", "masks[].item", "episode_visualization_maps.append", "habitat_extensions.utils.topdown_to_image", "time.time", "len", "habitat_baselines.common.utils.generate_video", "habitat_extensions.utils.observations_to_image", "einops.asnumpy", "occant_utils.common.convert_gt2channel_to_gtrgb", "cv2.resize", "numpy.concatenate", "einops.asnumpy", "einops.asnumpy", "einops.asnumpy", "occant_utils.visualization.generate_topdown_allocentric_map", "cv2.resize", "occant_utils.visualization.generate_topdown_allocentric_map", "cv2.resize", "occant_utils.visualization.generate_topdown_allocentric_map", "cv2.resize", "numpy.concatenate", "numpy.concatenate", "rgb_frames[].append", "occant_exp_trainer.OccAntExpTrainer.config.EVAL_CKPT_PATH_DIR.split", "numpy.mean", "len", "int", "int", "cv2.circle", "int", "int", "cv2.circle", "global_goals[].item", "global_goals[].item", "local_goals[].item", "local_goals[].item", "numpy.zeros_like", "numpy.pad", "numpy.pad"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer.load_checkpoint", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.env_utils.construct_envs", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._setup_actor_critic_agent", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.eval", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.eval", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.eval", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerSequential.close", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.None.locobot_exp.LocobotExplorer._setup_eval_config", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._create_tmp_dataset", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._prepare_batch", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.reset", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.add_filehandler", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.get_metric", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseWriter.add_scalar", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.get_metric", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseWriter.add_scalar", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._remove_tmp_dataset", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.reset", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.convert_world2map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.convert_world2map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.step", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._prepare_batch", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.add_filehandler", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.get_last_metric", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.get_last_metric", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.act", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper.ext_register_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.Mapper.ext_register_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.convert_world2map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.convert_world2map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.measure_pose_estimation_performance", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.update", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.measure_map_quality", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.update", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.measure_area_seen_performance", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.update", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.add_filehandler", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.update", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.update", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.update", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.FalseLogger.info", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.utils.topdown_to_image", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.visualization.observations_to_image", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.convert_gt2channel_to_gtrgb", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.visualization.generate_topdown_allocentric_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.visualization.generate_topdown_allocentric_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.visualization.generate_topdown_allocentric_map"], ["", "def", "_eval_checkpoint", "(", "\n", "self", ",", "\n", "checkpoint_path", ":", "str", ",", "\n", "writer", ":", "TensorboardWriter", ",", "\n", "checkpoint_index", ":", "int", "=", "0", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Evaluates a single checkpoint.\n\n        Args:\n            checkpoint_path: path of checkpoint\n            writer: tensorboard writer object for logging to tensorboard\n            checkpoint_index: index of cur checkpoint for logging\n\n        Returns:\n            None\n        \"\"\"", "\n", "checkpoint_index", "=", "int", "(", "(", "re", ".", "findall", "(", "'\\d+'", ",", "checkpoint_path", ")", ")", "[", "-", "1", "]", ")", "\n", "# Map location CPU is almost always better than mapping to a CUDA device.", "\n", "ckpt_dict", "=", "self", ".", "load_checkpoint", "(", "checkpoint_path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "\n", "if", "self", ".", "config", ".", "EVAL", ".", "USE_CKPT_CONFIG", ":", "\n", "            ", "config", "=", "self", ".", "_setup_eval_config", "(", "ckpt_dict", "[", "\"config\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "config", "=", "self", ".", "config", ".", "clone", "(", ")", "\n", "\n", "", "ppo_cfg", "=", "config", ".", "RL", ".", "PPO", "\n", "ans_cfg", "=", "config", ".", "RL", ".", "ANS", "\n", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "SPLIT", "=", "config", ".", "EVAL", ".", "SPLIT", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "if", "\"COLLISION_SENSOR\"", "not", "in", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "SENSORS", ":", "\n", "            ", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "SENSORS", ".", "append", "(", "\"COLLISION_SENSOR\"", ")", "\n", "", "if", "len", "(", "self", ".", "config", ".", "VIDEO_OPTION", ")", ">", "0", ":", "\n", "            ", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "MEASUREMENTS", ".", "append", "(", "\"TOP_DOWN_MAP_EXP\"", ")", "\n", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "MEASUREMENTS", ".", "append", "(", "\"COLLISIONS\"", ")", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "f\"env config: {config}\"", ")", "\n", "\n", "episode_number", "=", "None", "\n", "if", "episode_number", "is", "not", "None", ":", "\n", "            ", "config", "=", "self", ".", "_create_tmp_dataset", "(", "episode_number", ",", "config", ")", "\n", "\n", "", "self", ".", "envs", "=", "construct_envs", "(", "config", ",", "get_env_class", "(", "config", ".", "ENV_NAME", ")", ")", "\n", "self", ".", "mapper_rollouts", "=", "None", "\n", "self", ".", "_setup_actor_critic_agent", "(", "ppo_cfg", ",", "ans_cfg", ")", "\n", "\n", "self", ".", "mapper_agent", ".", "load_state_dict", "(", "ckpt_dict", "[", "\"mapper_state_dict\"", "]", ")", "\n", "if", "self", ".", "local_agent", "is", "not", "None", ":", "\n", "            ", "self", ".", "local_agent", ".", "load_state_dict", "(", "ckpt_dict", "[", "\"local_state_dict\"", "]", ")", "\n", "self", ".", "local_actor_critic", "=", "self", ".", "local_agent", ".", "actor_critic", "\n", "", "else", ":", "\n", "            ", "self", ".", "local_actor_critic", "=", "self", ".", "ans_net", ".", "local_policy", "\n", "", "self", ".", "global_agent", ".", "load_state_dict", "(", "ckpt_dict", "[", "\"global_state_dict\"", "]", ")", "\n", "self", ".", "mapper", "=", "self", ".", "mapper_agent", ".", "mapper", "\n", "self", ".", "global_actor_critic", "=", "self", ".", "global_agent", ".", "actor_critic", "\n", "\n", "rgb_frames", "=", "[", "\n", "[", "]", "for", "_", "in", "range", "(", "self", ".", "config", ".", "NUM_PROCESSES", ")", "\n", "]", "# type: List[List[np.ndarray]]", "\n", "if", "len", "(", "self", ".", "config", ".", "VIDEO_OPTION", ")", ">", "0", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "config", ".", "VIDEO_DIR", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "number_of_eval_episodes", "=", "self", ".", "config", ".", "TEST_EPISODE_COUNT", "\n", "if", "number_of_eval_episodes", "==", "-", "1", ":", "\n", "            ", "number_of_eval_episodes", "=", "sum", "(", "self", ".", "envs", ".", "number_of_episodes", ")", "\n", "", "else", ":", "\n", "            ", "total_num_eps", "=", "sum", "(", "self", ".", "envs", ".", "number_of_episodes", ")", "\n", "if", "total_num_eps", "<", "number_of_eval_episodes", ":", "\n", "                ", "logger", ".", "warn", "(", "\n", "f\"Config specified {number_of_eval_episodes} eval episodes\"", "\n", "\", dataset only has {total_num_eps}.\"", "\n", ")", "\n", "logger", ".", "warn", "(", "f\"Evaluating with {total_num_eps} instead.\"", ")", "\n", "number_of_eval_episodes", "=", "total_num_eps", "\n", "\n", "", "", "assert", "(", "\n", "self", ".", "envs", ".", "num_envs", "==", "1", "\n", ")", ",", "\"Number of environments needs to be 1 for evaluation\"", "\n", "\n", "# Set models to evaluation", "\n", "self", ".", "mapper", ".", "eval", "(", ")", "\n", "self", ".", "local_actor_critic", ".", "eval", "(", ")", "\n", "self", ".", "global_actor_critic", ".", "eval", "(", ")", "\n", "\n", "M", "=", "ans_cfg", ".", "overall_map_size", "\n", "V", "=", "ans_cfg", ".", "MAPPER", ".", "map_size", "\n", "s", "=", "ans_cfg", ".", "MAPPER", ".", "map_scale", "\n", "imH", ",", "imW", "=", "ans_cfg", ".", "image_scale_hw", "\n", "\n", "# Define metric accumulators", "\n", "mapping_metrics", "=", "defaultdict", "(", "lambda", ":", "TemporalMetric", "(", ")", ")", "\n", "pose_estimation_metrics", "=", "defaultdict", "(", "lambda", ":", "TemporalMetric", "(", ")", ")", "\n", "\n", "# Environment statistics", "\n", "episode_statistics", "=", "[", "]", "\n", "episode_visualization_maps", "=", "[", "]", "\n", "\n", "times_per_episode", "=", "deque", "(", "maxlen", "=", "100", ")", "\n", "\n", "for", "ep", "in", "tqdm", "(", "range", "(", "number_of_eval_episodes", ")", ")", ":", "\n", "            ", "if", "ep", "==", "0", ":", "\n", "                ", "observations", "=", "self", ".", "envs", ".", "reset", "(", ")", "\n", "\n", "", "current_episodes", "=", "self", ".", "envs", ".", "current_episodes", "(", ")", "\n", "batch", "=", "self", ".", "_prepare_batch", "(", "observations", ")", "\n", "prev_batch", "=", "batch", "\n", "state_estimates", "=", "{", "\n", "\"pose_estimates\"", ":", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "3", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "\"map_states\"", ":", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "2", ",", "M", ",", "M", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "\"recurrent_hidden_states\"", ":", "torch", ".", "zeros", "(", "\n", "1", ",", "self", ".", "envs", ".", "num_envs", ",", "ans_cfg", ".", "LOCAL_POLICY", ".", "hidden_size", "\n", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "\"visited_states\"", ":", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "1", ",", "M", ",", "M", ")", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", ",", "\n", "}", "\n", "ground_truth_states", "=", "{", "\n", "\"visible_occupancy\"", ":", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "2", ",", "M", ",", "M", ")", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", ",", "\n", "\"pose\"", ":", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "3", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "\"environment_layout\"", ":", "None", ",", "\n", "}", "\n", "\n", "# Reset ANS states", "\n", "self", ".", "ans_net", ".", "reset", "(", ")", "\n", "\n", "current_episode_reward", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "envs", ".", "num_envs", ",", "1", ",", "device", "=", "self", ".", "device", "\n", ")", "\n", "\n", "prev_actions", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "config", ".", "NUM_PROCESSES", ",", "1", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "long", ",", "\n", ")", "\n", "\n", "masks", "=", "torch", ".", "zeros", "(", "self", ".", "config", ".", "NUM_PROCESSES", ",", "1", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "# Visualization stuff", "\n", "gt_agent_poses_over_time", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "config", ".", "NUM_PROCESSES", ")", "]", "\n", "pred_agent_poses_over_time", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "config", ".", "NUM_PROCESSES", ")", "]", "\n", "gt_map_agent", "=", "asnumpy", "(", "\n", "convert_world2map", "(", "ground_truth_states", "[", "\"pose\"", "]", ",", "(", "M", ",", "M", ")", ",", "s", ")", "\n", ")", "\n", "pred_map_agent", "=", "asnumpy", "(", "\n", "convert_world2map", "(", "state_estimates", "[", "\"pose_estimates\"", "]", ",", "(", "M", ",", "M", ")", ",", "s", ")", "\n", ")", "\n", "pred_map_agent", "=", "np", ".", "concatenate", "(", "\n", "[", "pred_map_agent", ",", "asnumpy", "(", "state_estimates", "[", "\"pose_estimates\"", "]", "[", ":", ",", "2", ":", "3", "]", ")", ",", "]", ",", "\n", "axis", "=", "1", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "config", ".", "NUM_PROCESSES", ")", ":", "\n", "                ", "gt_agent_poses_over_time", "[", "i", "]", ".", "append", "(", "gt_map_agent", "[", "i", "]", ")", "\n", "pred_agent_poses_over_time", "[", "i", "]", ".", "append", "(", "pred_map_agent", "[", "i", "]", ")", "\n", "\n", "", "ep_start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "ep_step", "in", "tqdm", "(", "range", "(", "self", ".", "config", ".", "T_EXP", ")", ")", ":", "\n", "                ", "ep_time", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "config", ".", "NUM_PROCESSES", ",", "1", ",", "device", "=", "self", ".", "device", "\n", ")", ".", "fill_", "(", "ep_step", ")", "\n", "\n", "prev_pose_hat", "=", "state_estimates", "[", "\"pose_estimates\"", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "(", "\n", "mapper_inputs", ",", "\n", "local_policy_inputs", ",", "\n", "global_policy_inputs", ",", "\n", "mapper_outputs", ",", "\n", "local_policy_outputs", ",", "\n", "global_policy_outputs", ",", "\n", "state_estimates", ",", "\n", "intrinsic_rewards", ",", "\n", ")", "=", "self", ".", "ans_net", ".", "act", "(", "\n", "batch", ",", "\n", "prev_batch", ",", "\n", "state_estimates", ",", "\n", "ep_time", ",", "\n", "masks", ",", "\n", "deterministic", "=", "ans_cfg", ".", "LOCAL_POLICY", ".", "deterministic_flag", ",", "\n", ")", "\n", "\n", "actions", "=", "local_policy_outputs", "[", "\"actions\"", "]", "\n", "prev_actions", ".", "copy_", "(", "actions", ")", "\n", "", "curr_pose_hat", "=", "state_estimates", "[", "\"pose_estimates\"", "]", "\n", "\n", "# Update GT estimates at t = ep_step", "\n", "ground_truth_states", "[", "\"pose\"", "]", "=", "batch", "[", "\"pose_gt\"", "]", "\n", "\n", "if", "self", ".", "config", ".", "RL", ".", "ANS", ".", "use_ddp", ":", "\n", "                    ", "ground_truth_states", "[", "\n", "\"visible_occupancy\"", "\n", "]", "=", "self", ".", "ans_net", ".", "mapper", ".", "module", ".", "ext_register_map", "(", "\n", "ground_truth_states", "[", "\"visible_occupancy\"", "]", ",", "\n", "batch", "[", "\"ego_map_gt\"", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ",", "\n", "batch", "[", "\"pose_gt\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "ground_truth_states", "[", "\n", "\"visible_occupancy\"", "\n", "]", "=", "self", ".", "ans_net", ".", "mapper", ".", "ext_register_map", "(", "\n", "ground_truth_states", "[", "\"visible_occupancy\"", "]", ",", "\n", "batch", "[", "\"ego_map_gt\"", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ",", "\n", "batch", "[", "\"pose_gt\"", "]", ",", "\n", ")", "\n", "\n", "# Visualization stuff", "\n", "", "gt_map_agent", "=", "asnumpy", "(", "\n", "convert_world2map", "(", "ground_truth_states", "[", "\"pose\"", "]", ",", "(", "M", ",", "M", ")", ",", "s", ")", "\n", ")", "\n", "gt_map_agent", "=", "np", ".", "concatenate", "(", "\n", "[", "gt_map_agent", ",", "asnumpy", "(", "ground_truth_states", "[", "\"pose\"", "]", "[", ":", ",", "2", ":", "3", "]", ")", "]", ",", "\n", "axis", "=", "1", ",", "\n", ")", "\n", "pred_map_agent", "=", "asnumpy", "(", "\n", "convert_world2map", "(", "state_estimates", "[", "\"pose_estimates\"", "]", ",", "(", "M", ",", "M", ")", ",", "s", ")", "\n", ")", "\n", "pred_map_agent", "=", "np", ".", "concatenate", "(", "\n", "[", "\n", "pred_map_agent", ",", "\n", "asnumpy", "(", "state_estimates", "[", "\"pose_estimates\"", "]", "[", ":", ",", "2", ":", "3", "]", ")", ",", "\n", "]", ",", "\n", "axis", "=", "1", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "config", ".", "NUM_PROCESSES", ")", ":", "\n", "                    ", "gt_agent_poses_over_time", "[", "i", "]", ".", "append", "(", "gt_map_agent", "[", "i", "]", ")", "\n", "pred_agent_poses_over_time", "[", "i", "]", ".", "append", "(", "pred_map_agent", "[", "i", "]", ")", "\n", "\n", "", "outputs", "=", "self", ".", "envs", ".", "step", "(", "[", "a", "[", "0", "]", ".", "item", "(", ")", "for", "a", "in", "actions", "]", ")", "\n", "\n", "observations", ",", "_", ",", "dones", ",", "infos", "=", "[", "list", "(", "x", ")", "for", "x", "in", "zip", "(", "*", "outputs", ")", "]", "\n", "\n", "if", "ep_step", "==", "0", ":", "\n", "                    ", "environment_layout", "=", "np", ".", "stack", "(", "\n", "[", "info", "[", "\"gt_global_map\"", "]", "for", "info", "in", "infos", "]", ",", "axis", "=", "0", "\n", ")", "# (bs, M, M, 2)", "\n", "environment_layout", "=", "rearrange", "(", "\n", "environment_layout", ",", "\"b h w c -> b c h w\"", "\n", ")", "# (bs, 2, M, M)", "\n", "environment_layout", "=", "torch", ".", "Tensor", "(", "environment_layout", ")", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", "\n", "ground_truth_states", "[", "\"environment_layout\"", "]", "=", "environment_layout", "\n", "# Update environment statistics", "\n", "for", "i", "in", "range", "(", "self", ".", "envs", ".", "num_envs", ")", ":", "\n", "                        ", "episode_statistics", ".", "append", "(", "infos", "[", "i", "]", "[", "\"episode_statistics\"", "]", ")", "\n", "\n", "", "", "if", "ep_step", "==", "self", ".", "config", ".", "T_EXP", "-", "1", ":", "\n", "                    ", "assert", "dones", "[", "0", "]", "\n", "\n", "", "prev_batch", "=", "batch", "\n", "batch", "=", "self", ".", "_prepare_batch", "(", "observations", ",", "prev_batch", ",", "actions", "=", "actions", ")", "\n", "\n", "masks", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "0.0", "]", "if", "done", "else", "[", "1.0", "]", "for", "done", "in", "dones", "]", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", ")", "\n", "\n", "n_envs", "=", "self", ".", "envs", ".", "num_envs", "\n", "\n", "if", "ep_step", "==", "0", "or", "(", "ep_step", "+", "1", ")", "%", "50", "==", "0", ":", "\n", "                    ", "curr_all_metrics", "=", "{", "}", "\n", "# Compute accumulative pose estimation error", "\n", "pose_hat_final", "=", "state_estimates", "[", "\"pose_estimates\"", "]", "# (bs, 3)", "\n", "pose_gt_final", "=", "ground_truth_states", "[", "\"pose\"", "]", "# (bs, 3)", "\n", "curr_pose_estimation_metrics", "=", "measure_pose_estimation_performance", "(", "\n", "pose_hat_final", ",", "pose_gt_final", ",", "reduction", "=", "\"sum\"", ",", "\n", ")", "\n", "for", "k", ",", "v", "in", "curr_pose_estimation_metrics", ".", "items", "(", ")", ":", "\n", "                        ", "pose_estimation_metrics", "[", "k", "]", ".", "update", "(", "\n", "v", ",", "self", ".", "envs", ".", "num_envs", ",", "ep_step", "\n", ")", "\n", "", "curr_all_metrics", ".", "update", "(", "curr_pose_estimation_metrics", ")", "\n", "\n", "# Compute map quality", "\n", "curr_map_quality_metrics", "=", "measure_map_quality", "(", "\n", "state_estimates", "[", "\"map_states\"", "]", ",", "\n", "ground_truth_states", "[", "\"environment_layout\"", "]", ",", "\n", "s", ",", "\n", "entropy_thresh", "=", "1.0", ",", "\n", "reduction", "=", "\"sum\"", ",", "\n", "apply_mask", "=", "True", ",", "\n", ")", "\n", "for", "k", ",", "v", "in", "curr_map_quality_metrics", ".", "items", "(", ")", ":", "\n", "                        ", "mapping_metrics", "[", "k", "]", ".", "update", "(", "v", ",", "self", ".", "envs", ".", "num_envs", ",", "ep_step", ")", "\n", "", "curr_all_metrics", ".", "update", "(", "curr_map_quality_metrics", ")", "\n", "\n", "# Compute area seen", "\n", "area_reduction", "=", "\"sum\"", "\n", "curr_area_seen_metrics", "=", "measure_area_seen_performance", "(", "\n", "ground_truth_states", "[", "\"visible_occupancy\"", "]", ",", "s", ",", "reduction", "=", "area_reduction", "\n", ")", "\n", "\n", "for", "k", ",", "v", "in", "curr_area_seen_metrics", ".", "items", "(", ")", ":", "\n", "                        ", "mapping_metrics", "[", "k", "]", ".", "update", "(", "v", ",", "self", ".", "envs", ".", "num_envs", ",", "ep_step", ")", "\n", "", "curr_all_metrics", ".", "update", "(", "curr_area_seen_metrics", ")", "\n", "\n", "# Debug stuff", "\n", "if", "(", "ep_step", "+", "1", ")", "==", "self", ".", "config", ".", "T_EXP", ":", "\n", "                        ", "times_per_episode", ".", "append", "(", "time", ".", "time", "(", ")", "-", "ep_start_time", ")", "\n", "mins_per_episode", "=", "np", ".", "mean", "(", "times_per_episode", ")", ".", "item", "(", ")", "/", "60.0", "\n", "eta_completion", "=", "mins_per_episode", "*", "(", "\n", "number_of_eval_episodes", "-", "ep", "-", "1", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "f\"====> episode {ep}/{number_of_eval_episodes} done\"", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "f\"Time per episode: {mins_per_episode:.3f} mins\"", "\n", "f\"\\tETA: {eta_completion:.3f} mins\"", "\n", ")", "\n", "\n", "for", "k", ",", "v", "in", "curr_all_metrics", ".", "items", "(", ")", ":", "\n", "                            ", "self", ".", "logger", ".", "info", "(", "f\"{k:30s}: {v / self.envs.num_envs:8.3f}\"", ")", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "n_envs", ")", ":", "\n", "                    ", "if", "(", "\n", "len", "(", "self", ".", "config", ".", "VIDEO_OPTION", ")", ">", "0", "\n", "or", "self", ".", "config", ".", "SAVE_STATISTICS_FLAG", "\n", ")", ":", "\n", "# episode ended", "\n", "                        ", "if", "masks", "[", "i", "]", ".", "item", "(", ")", "==", "0", ":", "\n", "                            ", "episode_visualization_maps", ".", "append", "(", "rgb_frames", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "video_metrics", "=", "{", "}", "\n", "for", "k", "in", "[", "\"area_seen\"", "]", ":", "\n", "                                ", "video_metrics", "[", "k", "]", "=", "curr_all_metrics", "[", "k", "]", "\n", "\n", "", "if", "len", "(", "self", ".", "config", ".", "VIDEO_OPTION", ")", ">", "0", ":", "\n", "                                ", "generate_video", "(", "\n", "video_option", "=", "self", ".", "config", ".", "VIDEO_OPTION", ",", "\n", "video_dir", "=", "self", ".", "config", ".", "VIDEO_DIR", ",", "\n", "images", "=", "rgb_frames", "[", "i", "]", ",", "\n", "episode_id", "=", "current_episodes", "[", "i", "]", ".", "episode_id", ",", "\n", "checkpoint_idx", "=", "checkpoint_index", ",", "\n", "metrics", "=", "video_metrics", ",", "\n", "tb_writer", "=", "writer", ",", "\n", ")", "\n", "\n", "rgb_frames", "[", "i", "]", "=", "[", "]", "\n", "\n", "", "top_down_map", "=", "topdown_to_image", "(", "infos", "[", "0", "]", "[", "\"top_down_map_exp\"", "]", ")", "\n", "\n", "# episode continues", "\n", "", "elif", "(", "\n", "len", "(", "self", ".", "config", ".", "VIDEO_OPTION", ")", ">", "0", "\n", "or", "ep_step", "==", "self", ".", "config", ".", "T_EXP", "-", "2", "\n", ")", ":", "\n", "                            ", "frame", "=", "observations_to_image", "(", "\n", "observations", "[", "i", "]", ",", "infos", "[", "i", "]", ",", "observation_size", "=", "300", "\n", ")", "\n", "# Add ego_map_gt to frame", "\n", "ego_map_gt_i", "=", "asnumpy", "(", "batch", "[", "\"ego_map_gt\"", "]", "[", "i", "]", ")", "# (2, H, W)", "\n", "ego_map_gt_i", "=", "convert_gt2channel_to_gtrgb", "(", "ego_map_gt_i", ")", "\n", "ego_map_gt_i", "=", "cv2", ".", "resize", "(", "ego_map_gt_i", ",", "(", "300", ",", "300", ")", ")", "\n", "frame", "=", "np", ".", "concatenate", "(", "[", "frame", ",", "ego_map_gt_i", "]", ",", "axis", "=", "1", ")", "\n", "# Generate ANS specific visualizations", "\n", "environment_layout", "=", "asnumpy", "(", "\n", "ground_truth_states", "[", "\"environment_layout\"", "]", "[", "i", "]", "\n", ")", "# (2, H, W)", "\n", "visible_occupancy", "=", "asnumpy", "(", "\n", "ground_truth_states", "[", "\"visible_occupancy\"", "]", "[", "i", "]", "\n", ")", "# (2, H, W)", "\n", "curr_gt_poses", "=", "gt_agent_poses_over_time", "[", "i", "]", "\n", "anticipated_occupancy", "=", "asnumpy", "(", "\n", "state_estimates", "[", "\"map_states\"", "]", "[", "i", "]", "\n", ")", "# (2, H, W)", "\n", "curr_pred_poses", "=", "pred_agent_poses_over_time", "[", "i", "]", "\n", "\n", "H", "=", "frame", ".", "shape", "[", "0", "]", "\n", "visible_occupancy_vis", "=", "generate_topdown_allocentric_map", "(", "\n", "environment_layout", ",", "\n", "visible_occupancy", ",", "\n", "curr_gt_poses", ",", "\n", "thresh_explored", "=", "ans_cfg", ".", "thresh_explored", ",", "\n", "thresh_obstacle", "=", "ans_cfg", ".", "thresh_obstacle", ",", "\n", ")", "\n", "visible_occupancy_vis", "=", "cv2", ".", "resize", "(", "\n", "visible_occupancy_vis", ",", "(", "H", ",", "H", ")", "\n", ")", "\n", "anticipated_occupancy_vis", "=", "generate_topdown_allocentric_map", "(", "\n", "environment_layout", ",", "\n", "anticipated_occupancy", ",", "\n", "curr_pred_poses", ",", "\n", "thresh_explored", "=", "ans_cfg", ".", "thresh_explored", ",", "\n", "thresh_obstacle", "=", "ans_cfg", ".", "thresh_obstacle", ",", "\n", ")", "\n", "anticipated_occupancy_vis", "=", "cv2", ".", "resize", "(", "\n", "anticipated_occupancy_vis", ",", "(", "H", ",", "H", ")", "\n", ")", "\n", "anticipated_action_map", "=", "generate_topdown_allocentric_map", "(", "\n", "environment_layout", ",", "\n", "anticipated_occupancy", ",", "\n", "curr_pred_poses", ",", "\n", "zoom", "=", "False", ",", "\n", "thresh_explored", "=", "ans_cfg", ".", "thresh_explored", ",", "\n", "thresh_obstacle", "=", "ans_cfg", ".", "thresh_obstacle", ",", "\n", ")", "\n", "global_goals", "=", "self", ".", "ans_net", ".", "states", "[", "\"curr_global_goals\"", "]", "\n", "local_goals", "=", "self", ".", "ans_net", ".", "states", "[", "\"curr_local_goals\"", "]", "\n", "if", "global_goals", "is", "not", "None", ":", "\n", "                                ", "cX", "=", "int", "(", "global_goals", "[", "i", ",", "0", "]", ".", "item", "(", ")", ")", "\n", "cY", "=", "int", "(", "global_goals", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", "\n", "anticipated_action_map", "=", "cv2", ".", "circle", "(", "\n", "anticipated_action_map", ",", "\n", "(", "cX", ",", "cY", ")", ",", "\n", "10", ",", "\n", "(", "255", ",", "0", ",", "0", ")", ",", "\n", "-", "1", ",", "\n", ")", "\n", "", "if", "local_goals", "is", "not", "None", ":", "\n", "                                ", "cX", "=", "int", "(", "local_goals", "[", "i", ",", "0", "]", ".", "item", "(", ")", ")", "\n", "cY", "=", "int", "(", "local_goals", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", "\n", "anticipated_action_map", "=", "cv2", ".", "circle", "(", "\n", "anticipated_action_map", ",", "\n", "(", "cX", ",", "cY", ")", ",", "\n", "10", ",", "\n", "(", "0", ",", "255", ",", "255", ")", ",", "\n", "-", "1", ",", "\n", ")", "\n", "", "anticipated_action_map", "=", "cv2", ".", "resize", "(", "\n", "anticipated_action_map", ",", "(", "H", ",", "H", ")", "\n", ")", "\n", "\n", "maps_vis", "=", "np", ".", "concatenate", "(", "\n", "[", "\n", "visible_occupancy_vis", ",", "\n", "anticipated_occupancy_vis", ",", "\n", "anticipated_action_map", ",", "\n", "np", ".", "zeros_like", "(", "anticipated_action_map", ")", ",", "\n", "]", ",", "\n", "axis", "=", "1", ",", "\n", ")", "\n", "if", "self", ".", "config", ".", "RL", ".", "ANS", ".", "overall_map_size", "==", "2001", ":", "\n", "                                ", "if", "frame", ".", "shape", "[", "1", "]", "<", "maps_vis", ".", "shape", "[", "1", "]", ":", "\n", "                                    ", "diff", "=", "maps_vis", ".", "shape", "[", "1", "]", "-", "frame", ".", "shape", "[", "1", "]", "\n", "npad", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "diff", ")", ",", "(", "0", ",", "0", ")", ")", "\n", "frame", "=", "np", ".", "pad", "(", "frame", ",", "pad_width", "=", "npad", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "", "elif", "frame", ".", "shape", "[", "1", "]", ">", "maps_vis", ".", "shape", "[", "1", "]", ":", "\n", "                                    ", "diff", "=", "frame", ".", "shape", "[", "1", "]", "-", "maps_vis", ".", "shape", "[", "1", "]", "\n", "npad", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "diff", ")", ",", "(", "0", ",", "0", ")", ")", "\n", "frame", "=", "np", ".", "pad", "(", "maps_vis", ",", "pad_width", "=", "npad", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "", "frame", "=", "frame", "[", ":", ",", ":", "1200", "]", "\n", "maps_vis", "=", "maps_vis", "[", ":", ",", ":", "1200", "]", "\n", "", "frame", "=", "np", ".", "concatenate", "(", "[", "frame", ",", "maps_vis", "]", ",", "axis", "=", "0", ")", "\n", "rgb_frames", "[", "i", "]", ".", "append", "(", "frame", ")", "\n", "# done-if", "\n", "# done-for", "\n", "\n", "", "", "", "", "", "num_frames_per_process", "=", "(", "\n", "(", "checkpoint_index", "+", "1", ")", "\n", "*", "self", ".", "config", ".", "CHECKPOINT_INTERVAL", "\n", "*", "self", ".", "config", ".", "T_EXP", "\n", "/", "self", ".", "config", ".", "RL", ".", "PPO", ".", "num_global_steps", "\n", ")", "\n", "\n", "if", "checkpoint_index", "==", "0", ":", "\n", "            ", "try", ":", "\n", "                ", "eval_ckpt_idx", "=", "self", ".", "config", ".", "EVAL_CKPT_PATH_DIR", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\n", "\".\"", "\n", ")", "[", "1", "]", "\n", "logger", ".", "add_filehandler", "(", "\n", "f\"{self.config.TENSORBOARD_DIR}/results_ckpt_final_{eval_ckpt_idx}.txt\"", "\n", ")", "\n", "", "except", ":", "\n", "                ", "logger", ".", "add_filehandler", "(", "\n", "f\"{self.config.TENSORBOARD_DIR}/results_ckpt_{checkpoint_index}.txt\"", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "logger", ".", "add_filehandler", "(", "\n", "f\"{self.config.TENSORBOARD_DIR}/results_ckpt_{checkpoint_index}.txt\"", "\n", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "\n", "f\"======= Evaluating over {number_of_eval_episodes} episodes =============\"", "\n", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f\"=======> Mapping metrics\"", ")", "\n", "for", "k", ",", "v", "in", "mapping_metrics", ".", "items", "(", ")", ":", "\n", "            ", "metric_all_times", "=", "v", ".", "get_metric", "(", ")", "\n", "for", "kp", "in", "sorted", "(", "list", "(", "metric_all_times", ".", "keys", "(", ")", ")", ")", ":", "\n", "                ", "vp", "=", "metric_all_times", "[", "kp", "]", "\n", "self", ".", "logger", ".", "info", "(", "f\"{k}: {kp},{vp}\"", ")", "\n", "", "writer", ".", "add_scalar", "(", "\n", "f\"mapping_evaluation/{k}\"", ",", "v", ".", "get_last_metric", "(", ")", ",", "num_frames_per_process", ",", "\n", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "f\"=======> Pose-estimation metrics\"", ")", "\n", "for", "k", ",", "v", "in", "pose_estimation_metrics", ".", "items", "(", ")", ":", "\n", "            ", "metric_all_times", "=", "v", ".", "get_metric", "(", ")", "\n", "for", "kp", "in", "sorted", "(", "list", "(", "metric_all_times", ".", "keys", "(", ")", ")", ")", ":", "\n", "                ", "vp", "=", "metric_all_times", "[", "kp", "]", "\n", "self", ".", "logger", ".", "info", "(", "f\"{k}: {kp},{vp}\"", ")", "\n", "", "writer", ".", "add_scalar", "(", "f\"pose_estimation_evaluation/{k}\"", ",", "v", ".", "get_last_metric", "(", ")", ",", "num_frames_per_process", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "SAVE_STATISTICS_FLAG", ":", "\n", "# Logging results individually per episode", "\n", "            ", "per_episode_metrics", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "mapping_metrics", ".", "items", "(", ")", ":", "\n", "                ", "per_episode_metrics", "[", "\"mapping/\"", "+", "k", "]", "=", "v", ".", "metric_list", "\n", "", "for", "k", ",", "v", "in", "pose_estimation_metrics", ".", "items", "(", ")", ":", "\n", "                ", "per_episode_metrics", "[", "\"pose_estimation/\"", "+", "k", "]", "=", "v", ".", "metric_list", "\n", "", "for", "k", ",", "v", "in", "s2d2_metrics", ".", "items", "(", ")", ":", "\n", "                ", "per_episode_metrics", "[", "\"s2d2/\"", "+", "k", "]", "=", "v", ".", "metric_list", "\n", "\n", "", "per_episode_statistics", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "number_of_eval_episodes", ")", ":", "\n", "                ", "stats", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "per_episode_metrics", ".", "items", "(", ")", ":", "\n", "                    ", "stats", "[", "k", "]", "=", "{", "}", "\n", "for", "t", "in", "v", ".", "keys", "(", ")", ":", "\n", "                        ", "stats", "[", "k", "]", "[", "t", "]", "=", "v", "[", "t", "]", "[", "i", "]", "\n", "", "", "stats", "[", "\"episode_statistics\"", "]", "=", "episode_statistics", "[", "i", "]", "\n", "per_episode_statistics", ".", "append", "(", "stats", ")", "\n", "\n", "", "json_save_path", "=", "f\"{self.config.VIDEO_DIR}/statistics_ckpt_{checkpoint_index}.json\"", "\n", "json", ".", "dump", "(", "per_episode_statistics", ",", "open", "(", "json_save_path", ",", "\"w\"", ")", ")", "\n", "\n", "", "if", "episode_number", "is", "not", "None", ":", "\n", "            ", "self", ".", "_remove_tmp_dataset", "(", "episode_number", ",", "config", ")", "\n", "", "self", ".", "envs", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._create_tmp_dataset": [[2137, 2149], ["config.TASK_CONFIG.DATASET.DATA_PATH.replace", "os.path.join", "config.defrost", "config.freeze", "gzip.open", "json.load", "gzip.open", "fout.write", "json.dumps().encode", "config.TASK_CONFIG.DATASET.DATA_PATH.replace.split", "json.dumps"], "methods", ["None"], ["", "def", "_create_tmp_dataset", "(", "self", ",", "episode_number", ",", "config", ")", ":", "\n", "        ", "dataset_path", "=", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "DATA_PATH", ".", "replace", "(", "\"{split}\"", ",", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "SPLIT", ")", "\n", "with", "gzip", ".", "open", "(", "dataset_path", ",", "\"rt\"", ")", "as", "fp", ":", "\n", "            ", "dataset", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "tmp_dataset", "=", "{", "\"episodes\"", ":", "[", "dataset", "[", "\"episodes\"", "]", "[", "episode_number", "]", "]", "}", "\n", "tmp_dataset_path", "=", "os", ".", "path", ".", "join", "(", "'/'", ".", "join", "(", "dataset_path", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", ",", "f'{episode_number}.json.gz'", ")", "\n", "with", "gzip", ".", "open", "(", "tmp_dataset_path", ",", "'w'", ")", "as", "fout", ":", "\n", "            ", "fout", ".", "write", "(", "json", ".", "dumps", "(", "tmp_dataset", ")", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "DATA_PATH", "=", "tmp_dataset_path", "\n", "config", ".", "freeze", "(", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.occant_exp_trainer.OccAntExpTrainer._remove_tmp_dataset": [[2150, 2154], ["config.TASK_CONFIG.DATASET.DATA_PATH.replace", "os.path.join", "os.remove", "config.TASK_CONFIG.DATASET.DATA_PATH.replace.split"], "methods", ["None"], ["", "def", "_remove_tmp_dataset", "(", "self", ",", "episode_number", ",", "config", ")", ":", "\n", "        ", "dataset_path", "=", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "DATA_PATH", ".", "replace", "(", "\"{split}\"", ",", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "SPLIT", ")", "\n", "tmp_dataset_path", "=", "os", ".", "path", ".", "join", "(", "'/'", ".", "join", "(", "dataset_path", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", ",", "f'{episode_number}.json.gz'", ")", "\n", "os", ".", "remove", "(", "tmp_dataset_path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.Flatten.__init__": [[20, 22], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.Flatten.forward": [[23, 25], ["x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.OccupancyAnticipationWrapper.__init__": [[28, 37], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "V", ",", "input_hw", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "model", "\n", "self", ".", "V", "=", "V", "\n", "self", ".", "input_hw", "=", "input_hw", "\n", "self", ".", "keys_to_interpolate", "=", "[", "\n", "\"ego_map_hat\"", ",", "\n", "\"occ_estimate\"", ",", "\n", "\"depth_proj_estimate\"", ",", "# specific to RGB Model V2", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.OccupancyAnticipationWrapper.forward": [[39, 50], ["occant_utils.common.padded_resize", "policy_utils.OccupancyAnticipationWrapper.main", "policy_utils.OccupancyAnticipationWrapper.keys", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.padded_resize", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.generate_exploration_dataset.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "[", "\"rgb\"", "]", "=", "padded_resize", "(", "x", "[", "\"rgb\"", "]", ",", "self", ".", "input_hw", "[", "0", "]", ")", "\n", "if", "\"ego_map_gt\"", "in", "x", ":", "\n", "            ", "x", "[", "\"ego_map_gt\"", "]", "=", "F", ".", "interpolate", "(", "x", "[", "\"ego_map_gt\"", "]", ",", "size", "=", "self", ".", "input_hw", ")", "\n", "", "x_full", "=", "self", ".", "main", "(", "x", ")", "\n", "for", "k", "in", "x_full", ".", "keys", "(", ")", ":", "\n", "            ", "if", "k", "in", "self", ".", "keys_to_interpolate", ":", "\n", "                ", "x_full", "[", "k", "]", "=", "F", ".", "interpolate", "(", "\n", "x_full", "[", "k", "]", ",", "size", "=", "(", "self", ".", "V", ",", "self", ".", "V", ")", ",", "mode", "=", "\"bilinear\"", "\n", ")", "\n", "", "", "return", "x_full", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.BucketingEmbedding.__init__": [[53, 64], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "min_val", ",", "max_val", ",", "count", ",", "dim", ",", "use_log_scale", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "min_val", "=", "min_val", "\n", "self", ".", "max_val", "=", "max_val", "\n", "self", ".", "count", "=", "count", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "use_log_scale", "=", "use_log_scale", "\n", "if", "self", ".", "use_log_scale", ":", "\n", "            ", "self", ".", "min_val", "=", "torch", ".", "log2", "(", "torch", ".", "Tensor", "(", "[", "self", ".", "min_val", "]", ")", ")", ".", "item", "(", ")", "\n", "self", ".", "max_val", "=", "torch", ".", "log2", "(", "torch", ".", "Tensor", "(", "[", "self", ".", "max_val", "]", ")", ")", ".", "item", "(", ")", "\n", "", "self", ".", "main", "=", "nn", ".", "Embedding", "(", "count", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.BucketingEmbedding.forward": [[65, 74], ["torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "policy_utils.BucketingEmbedding.main", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.generate_exploration_dataset.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        x - (bs, ) values\n        \"\"\"", "\n", "if", "self", ".", "use_log_scale", ":", "\n", "            ", "x", "=", "torch", ".", "log2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "count", "*", "(", "x", "-", "self", ".", "min_val", ")", "/", "(", "self", ".", "max_val", "-", "self", ".", "min_val", ")", "\n", "x", "=", "torch", ".", "clamp", "(", "x", ",", "0", ",", "self", ".", "count", "-", "1", ")", ".", "long", "(", ")", "\n", "return", "self", ".", "main", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.BucketingEmbedding.get_class": [[75, 84], ["torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["", "def", "get_class", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        x - (bs, ) values\n        \"\"\"", "\n", "if", "self", ".", "use_log_scale", ":", "\n", "            ", "x", "=", "torch", ".", "log2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "count", "*", "(", "x", "-", "self", ".", "min_val", ")", "/", "(", "self", ".", "max_val", "-", "self", ".", "min_val", ")", "\n", "x", "=", "torch", ".", "clamp", "(", "x", ",", "0", ",", "self", ".", "count", "-", "1", ")", ".", "long", "(", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.PoseEstimator.__init__": [[87, 137], ["torch.Module.__init__", "len", "policy_utils.PoseEstimator._get_simple_pose_predictor", "policy_utils.PoseEstimator._get_simple_pose_predictor", "policy_utils.PoseEstimator._get_simple_pose_predictor", "len", "policy_utils.PoseEstimator._get_ensemble_attention", "len"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.PoseEstimator._get_simple_pose_predictor", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.PoseEstimator._get_simple_pose_predictor", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.PoseEstimator._get_simple_pose_predictor", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.PoseEstimator._get_ensemble_attention"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "ego_input_size", ",", "\n", "inputs", ",", "\n", "n_pose_layers", "=", "1", ",", "\n", "n_ensemble_layers", "=", "1", ",", "\n", "input_shape", "=", "(", "90", ",", "160", ")", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Assumes that map inputs are input_size x input_size tensors.\n        RGB inputs are 90x160 in size. Depth inputs are 90x160 in size.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inputs", "=", "inputs", "\n", "assert", "len", "(", "inputs", ")", ">", "0", "\n", "feat_size", "=", "0", "\n", "imH", ",", "imW", "=", "input_shape", "\n", "if", "\"rgb\"", "in", "inputs", ":", "\n", "            ", "(", "\n", "rgb_encoder", ",", "\n", "rgb_projector", ",", "\n", "rgb_predictor", ",", "\n", ")", "=", "self", ".", "_get_simple_pose_predictor", "(", "6", ",", "(", "imH", ",", "imW", ")", ",", "n_pose_layers", ")", "\n", "self", ".", "rgb_encoder", "=", "rgb_encoder", "\n", "self", ".", "rgb_projector", "=", "rgb_projector", "\n", "self", ".", "rgb_predictor", "=", "rgb_predictor", "\n", "feat_size", "+=", "1024", "\n", "", "if", "\"depth\"", "in", "inputs", ":", "\n", "            ", "(", "\n", "depth_encoder", ",", "\n", "depth_projector", ",", "\n", "depth_predictor", ",", "\n", ")", "=", "self", ".", "_get_simple_pose_predictor", "(", "2", ",", "(", "imH", ",", "imW", ")", ",", "n_pose_layers", ")", "\n", "feat_size", "+=", "1024", "\n", "self", ".", "depth_encoder", "=", "depth_encoder", "\n", "self", ".", "depth_projector", "=", "depth_projector", "\n", "self", ".", "depth_predictor", "=", "depth_predictor", "\n", "", "if", "\"ego_map\"", "in", "inputs", ":", "\n", "            ", "V", "=", "ego_input_size", "\n", "(", "\n", "ego_map_encoder", ",", "\n", "ego_map_projector", ",", "\n", "ego_map_predictor", ",", "\n", ")", "=", "self", ".", "_get_simple_pose_predictor", "(", "4", ",", "(", "V", ",", "V", ")", ",", "n_pose_layers", ")", "\n", "feat_size", "+=", "1024", "\n", "self", ".", "ego_map_encoder", "=", "ego_map_encoder", "\n", "self", ".", "ego_map_projector", "=", "ego_map_projector", "\n", "self", ".", "ego_map_predictor", "=", "ego_map_predictor", "\n", "", "if", "len", "(", "self", ".", "inputs", ")", ">", "1", ":", "\n", "            ", "self", ".", "ensemble_attention", "=", "self", ".", "_get_ensemble_attention", "(", "\n", "n_ensemble_layers", ",", "feat_size", ",", "len", "(", "self", ".", "inputs", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.PoseEstimator._get_simple_pose_predictor": [[139, 149], ["policy_utils.PoseEstimator._get_cnn", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "policy_utils.PoseEstimator.", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.PoseEstimator._get_cnn"], ["", "", "def", "_get_simple_pose_predictor", "(", "\n", "self", ",", "n_channels", ",", "input_shape", ",", "n_pose_layers", ",", "\n", ")", ":", "\n", "        ", "encoder", "=", "self", ".", "_get_cnn", "(", "n_channels", ",", "n_pose_layers", ")", "\n", "encoder_output_size", "=", "encoder", "(", "torch", ".", "randn", "(", "1", ",", "n_channels", ",", "*", "input_shape", ")", ")", ".", "shape", "[", "1", "]", "\n", "projector", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "encoder_output_size", ",", "1024", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", ")", ",", "\n", ")", "\n", "predictor", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1024", ",", "256", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "256", ",", "3", ")", ")", "\n", "return", "encoder", ",", "projector", ",", "predictor", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.PoseEstimator._get_ensemble_attention": [[150, 166], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_get_ensemble_attention", "(", "self", ",", "n_ensemble_layers", ",", "feat_size", ",", "n_modes", ")", ":", "\n", "        ", "layers", "=", "[", "\n", "nn", ".", "Linear", "(", "feat_size", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "]", "\n", "for", "i", "in", "range", "(", "n_ensemble_layers", ")", ":", "\n", "            ", "layers", "+=", "[", "\n", "nn", ".", "Linear", "(", "128", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "]", "\n", "", "layers", "+=", "[", "\n", "nn", ".", "Linear", "(", "128", ",", "n_modes", ")", ",", "\n", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", ",", "\n", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.PoseEstimator.forward": [[167, 209], ["policy_utils.PoseEstimator.rgb_encoder", "policy_utils.PoseEstimator.rgb_projector", "policy_utils.PoseEstimator.rgb_predictor", "torch.cat.append", "torch.cat.append", "torch.cat.append", "preds.append", "policy_utils.PoseEstimator.depth_encoder", "policy_utils.PoseEstimator.depth_projector", "policy_utils.PoseEstimator.depth_predictor", "torch.cat.append", "torch.cat.append", "torch.cat.append", "preds.append", "policy_utils.PoseEstimator.ego_map_encoder", "policy_utils.PoseEstimator.ego_map_projector", "policy_utils.PoseEstimator.ego_map_predictor", "torch.cat.append", "torch.cat.append", "torch.cat.append", "preds.append", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "policy_utils.PoseEstimator.ensemble_attention", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "policy_utils.PoseEstimator.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pose_inputs", ")", ":", "\n", "        ", "feats", "=", "[", "]", "\n", "preds", "=", "[", "]", "\n", "outputs", "=", "{", "}", "\n", "if", "\"rgb\"", "in", "self", ".", "inputs", ":", "\n", "            ", "st_1", "=", "pose_inputs", "[", "\"rgb_t_1\"", "]", "\n", "st", "=", "pose_inputs", "[", "\"rgb_t\"", "]", "\n", "st_encoded", "=", "self", ".", "rgb_encoder", "(", "torch", ".", "cat", "(", "[", "st_1", ",", "st", "]", ",", "dim", "=", "1", ")", ")", "\n", "st_feats", "=", "self", ".", "rgb_projector", "(", "st_encoded", ")", "\n", "pose_rgb", "=", "self", ".", "rgb_predictor", "(", "st_feats", ")", "\n", "feats", ".", "append", "(", "st_feats", ")", "\n", "preds", ".", "append", "(", "pose_rgb", ")", "\n", "outputs", "[", "\"pose_rgb\"", "]", "=", "pose_rgb", "\n", "", "if", "\"depth\"", "in", "self", ".", "inputs", ":", "\n", "            ", "dt_1", "=", "pose_inputs", "[", "\"depth_t_1\"", "]", "\n", "dt", "=", "pose_inputs", "[", "\"depth_t\"", "]", "\n", "dt_encoded", "=", "self", ".", "depth_encoder", "(", "torch", ".", "cat", "(", "[", "dt_1", ",", "dt", "]", ",", "dim", "=", "1", ")", ")", "\n", "dt_feats", "=", "self", ".", "depth_projector", "(", "dt_encoded", ")", "\n", "pose_depth", "=", "self", ".", "depth_predictor", "(", "dt_feats", ")", "\n", "feats", ".", "append", "(", "dt_feats", ")", "\n", "preds", ".", "append", "(", "pose_depth", ")", "\n", "outputs", "[", "\"pose_depth\"", "]", "=", "pose_depth", "\n", "", "if", "\"ego_map\"", "in", "self", ".", "inputs", ":", "\n", "            ", "pt_1", "=", "pose_inputs", "[", "\"ego_map_t_1\"", "]", "\n", "pt", "=", "pose_inputs", "[", "\"ego_map_t\"", "]", "\n", "pt_encoded", "=", "self", ".", "ego_map_encoder", "(", "torch", ".", "cat", "(", "[", "pt_1", ",", "pt", "]", ",", "dim", "=", "1", ")", ")", "\n", "pt_feats", "=", "self", ".", "ego_map_projector", "(", "pt_encoded", ")", "\n", "pose_ego_map", "=", "self", ".", "ego_map_predictor", "(", "pt_feats", ")", "\n", "feats", ".", "append", "(", "pt_feats", ")", "\n", "preds", ".", "append", "(", "pose_ego_map", ")", "\n", "outputs", "[", "\"pose_ego_map\"", "]", "=", "pose_ego_map", "\n", "\n", "", "if", "len", "(", "self", ".", "inputs", ")", ">", "1", ":", "\n", "            ", "feats", "=", "torch", ".", "cat", "(", "feats", ",", "dim", "=", "1", ")", "\n", "ensemble_weights", "=", "self", ".", "ensemble_attention", "(", "feats", ")", "# (bs, n)", "\n", "stacked_poses", "=", "torch", ".", "stack", "(", "preds", ",", "dim", "=", "1", ")", "# (bs, n, 3)", "\n", "pose", "=", "(", "ensemble_weights", ".", "unsqueeze", "(", "2", ")", "*", "stacked_poses", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "outputs", "[", "\"pose\"", "]", "=", "pose", "\n", "", "else", ":", "\n", "            ", "outputs", "[", "\"pose\"", "]", "=", "preds", "[", "0", "]", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.PoseEstimator._get_cnn": [[210, 230], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "einops.layers.torch.Rearrange", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_get_cnn", "(", "self", ",", "n_channels", ",", "n_layers", ")", ":", "\n", "        ", "cnn_layers", "=", "[", "\n", "nn", ".", "Conv2d", "(", "n_channels", ",", "64", ",", "(", "4", ",", "4", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "(", "4", ",", "4", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "]", "\n", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "            ", "cnn_layers", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "]", "\n", "", "cnn_layers", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "32", ",", "16", ",", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "Rearrange", "(", "\"b c h w -> b (c h w)\"", ")", ",", "\n", "]", "\n", "custom_cnn", "=", "nn", ".", "Sequential", "(", "*", "cnn_layers", ")", "\n", "\n", "return", "custom_cnn", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.NNBase.__init__": [[233, 246], ["torch.Module.__init__", "torch.GRU", "torch.GRU", "torch.GRU", "policy_utils.NNBase.gru.named_parameters", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "recurrent", ",", "recurrent_input_size", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "NNBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_hidden_size", "=", "hidden_size", "\n", "self", ".", "_recurrent", "=", "recurrent", "\n", "\n", "if", "recurrent", ":", "\n", "            ", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "recurrent_input_size", ",", "hidden_size", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "gru", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "\"bias\"", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0", ")", "\n", "", "elif", "\"weight\"", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "orthogonal_", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.NNBase.is_recurrent": [[247, 250], ["None"], "methods", ["None"], ["", "", "", "", "@", "property", "\n", "def", "is_recurrent", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_recurrent", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.NNBase.recurrent_hidden_state_size": [[251, 256], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recurrent_hidden_state_size", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_recurrent", ":", "\n", "            ", "return", "self", ".", "_hidden_size", "\n", "", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.NNBase.output_size": [[257, 260], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hidden_size", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.NNBase._forward_gru": [[261, 313], ["x.view.view.size", "hxs.squeeze.squeeze.size", "policy_utils.NNBase.gru", "x.view.view.squeeze", "hxs.squeeze.squeeze.squeeze", "hxs.squeeze.squeeze.size", "int", "x.view.view.view", "masks.view.view.view", "hxs.squeeze.squeeze.unsqueeze", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view.view.view", "hxs.squeeze.squeeze.squeeze", "x.view.view.unsqueeze", "x.view.view.size", "has_zeros.dim", "policy_utils.NNBase.gru", "outputs.append", "x.view.view.size", "len", "has_zeros.item", "masks[].view"], "methods", ["None"], ["", "def", "_forward_gru", "(", "self", ",", "x", ",", "hxs", ",", "masks", ")", ":", "\n", "        ", "if", "x", ".", "size", "(", "0", ")", "==", "hxs", ".", "size", "(", "0", ")", ":", "\n", "            ", "x", ",", "hxs", "=", "self", ".", "gru", "(", "x", ".", "unsqueeze", "(", "0", ")", ",", "(", "hxs", "*", "masks", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "x", "=", "x", ".", "squeeze", "(", "0", ")", "\n", "hxs", "=", "hxs", ".", "squeeze", "(", "0", ")", "\n", "", "else", ":", "\n", "# x is a (T, N, -1) tensor that has been flatten to (T * N, -1)", "\n", "            ", "N", "=", "hxs", ".", "size", "(", "0", ")", "\n", "T", "=", "int", "(", "x", ".", "size", "(", "0", ")", "/", "N", ")", "\n", "\n", "# unflatten", "\n", "x", "=", "x", ".", "view", "(", "T", ",", "N", ",", "x", ".", "size", "(", "1", ")", ")", "\n", "\n", "# Same deal with masks", "\n", "masks", "=", "masks", ".", "view", "(", "T", ",", "N", ")", "\n", "\n", "# Let's figure out which steps in the sequence have a zero for any agent", "\n", "# We will always assume t=0 has a zero in it as that makes the logic cleaner", "\n", "has_zeros", "=", "(", "masks", "[", "1", ":", "]", "==", "0.0", ")", ".", "any", "(", "dim", "=", "-", "1", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "# +1 to correct the masks[1:]", "\n", "if", "has_zeros", ".", "dim", "(", ")", "==", "0", ":", "\n", "# Deal with scalar", "\n", "                ", "has_zeros", "=", "[", "has_zeros", ".", "item", "(", ")", "+", "1", "]", "\n", "", "else", ":", "\n", "                ", "has_zeros", "=", "(", "has_zeros", "+", "1", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "# add t=0 and t=T to the list", "\n", "", "has_zeros", "=", "[", "0", "]", "+", "has_zeros", "+", "[", "T", "]", "\n", "\n", "hxs", "=", "hxs", ".", "unsqueeze", "(", "0", ")", "\n", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "has_zeros", ")", "-", "1", ")", ":", "\n", "# We can now process steps that don't have any zeros in masks together!", "\n", "# This is much faster", "\n", "                ", "start_idx", "=", "has_zeros", "[", "i", "]", "\n", "end_idx", "=", "has_zeros", "[", "i", "+", "1", "]", "\n", "\n", "rnn_scores", ",", "hxs", "=", "self", ".", "gru", "(", "\n", "x", "[", "start_idx", ":", "end_idx", "]", ",", "hxs", "*", "masks", "[", "start_idx", "]", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", "\n", ")", "\n", "\n", "outputs", ".", "append", "(", "rnn_scores", ")", "\n", "\n", "# assert len(outputs) == T", "\n", "# x is a (T, N, -1) tensor", "\n", "", "x", "=", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "0", ")", "\n", "# flatten", "\n", "x", "=", "x", ".", "view", "(", "T", "*", "N", ",", "-", "1", ")", "\n", "hxs", "=", "hxs", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "return", "x", ",", "hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.CNNBase.__init__": [[316, 367], ["policy_utils.NNBase.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "policy_utils.CNNBase.rgb_encoder", "policy_utils.CNNBase._create_embeddings", "init_", "init_", "policy_utils.CNNBase.train", "occant_utils.common.init", "init_", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "init_", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "init_", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "policy_utils.Flatten", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "occant_utils.common.init", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.CNNBase._create_embeddings", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.train", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.init", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.init"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "recurrent", ",", "\n", "embedding_buckets", ",", "\n", "hidden_size", "=", "256", ",", "\n", "img_mean", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "img_std", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "input_shape", "=", "(", "90", ",", "160", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", "CNNBase", ",", "self", ")", ".", "__init__", "(", "recurrent", ",", "hidden_size", ",", "hidden_size", ")", "\n", "\n", "init_", "=", "lambda", "m", ":", "init", "(", "\n", "m", ",", "\n", "nn", ".", "init", ".", "orthogonal_", ",", "\n", "lambda", "x", ":", "nn", ".", "init", ".", "constant_", "(", "x", ",", "0", ")", ",", "\n", "nn", ".", "init", ".", "calculate_gain", "(", "\"relu\"", ")", ",", "\n", ")", "\n", "\n", "self", ".", "img_mean", "=", "img_mean", "\n", "self", ".", "img_std", "=", "img_std", "\n", "imH", ",", "imW", "=", "input_shape", "\n", "\n", "embedding_size", "=", "0", "\n", "# Assumes input size is (imH, imW)", "\n", "self", ".", "rgb_encoder", "=", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Conv2d", "(", "3", ",", "2", ",", "3", ",", "padding", "=", "1", ")", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", ",", "\n", "init_", "(", "nn", ".", "Conv2d", "(", "2", ",", "1", ",", "3", ",", "padding", "=", "1", ")", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", ",", "\n", "init_", "(", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "3", ",", "padding", "=", "1", ")", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", ")", "\n", "rgb_encoder_output", "=", "self", ".", "rgb_encoder", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "imH", ",", "imW", ")", ")", "\n", "embedding_size", "+=", "rgb_encoder_output", ".", "shape", "[", "1", "]", "\n", "embedding_size", "+=", "self", ".", "_create_embeddings", "(", "embedding_buckets", ")", "\n", "\n", "init_", "=", "lambda", "m", ":", "init", "(", "\n", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "constant_", "(", "x", ",", "0", ")", "\n", ")", "\n", "\n", "self", ".", "fuse_embedding", "=", "init_", "(", "nn", ".", "Linear", "(", "embedding_size", ",", "hidden_size", ")", ")", "\n", "self", ".", "critic_linear", "=", "init_", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ")", "\n", "\n", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.CNNBase._create_embeddings": [[368, 399], ["policy_utils.BucketingEmbedding", "policy_utils.BucketingEmbedding", "policy_utils.BucketingEmbedding"], "methods", ["None"], ["", "def", "_create_embeddings", "(", "self", ",", "embedding_buckets", ")", ":", "\n", "        ", "embedding_size", "=", "0", "\n", "self", ".", "embedding_buckets", "=", "embedding_buckets", "\n", "self", ".", "distance_encoder", "=", "BucketingEmbedding", "(", "\n", "embedding_buckets", ".", "DISTANCE", ".", "min", ",", "\n", "embedding_buckets", ".", "DISTANCE", ".", "max", ",", "\n", "embedding_buckets", ".", "DISTANCE", ".", "count", ",", "\n", "embedding_buckets", ".", "DISTANCE", ".", "dim", ",", "\n", "embedding_buckets", ".", "DISTANCE", ".", "use_log_scale", ",", "\n", ")", "\n", "embedding_size", "+=", "embedding_buckets", ".", "DISTANCE", ".", "dim", "\n", "\n", "self", ".", "angle_encoder", "=", "BucketingEmbedding", "(", "\n", "embedding_buckets", ".", "ANGLE", ".", "min", ",", "\n", "embedding_buckets", ".", "ANGLE", ".", "max", ",", "\n", "embedding_buckets", ".", "ANGLE", ".", "count", ",", "\n", "embedding_buckets", ".", "ANGLE", ".", "dim", ",", "\n", "embedding_buckets", ".", "ANGLE", ".", "use_log_scale", ",", "\n", ")", "\n", "embedding_size", "+=", "embedding_buckets", ".", "ANGLE", ".", "dim", "\n", "\n", "self", ".", "time_encoder", "=", "BucketingEmbedding", "(", "\n", "embedding_buckets", ".", "TIME", ".", "min", ",", "\n", "embedding_buckets", ".", "TIME", ".", "max", ",", "\n", "embedding_buckets", ".", "TIME", ".", "count", ",", "\n", "embedding_buckets", ".", "TIME", ".", "dim", ",", "\n", "embedding_buckets", ".", "TIME", ".", "use_log_scale", ",", "\n", ")", "\n", "embedding_size", "+=", "embedding_buckets", ".", "TIME", ".", "dim", "\n", "\n", "return", "embedding_size", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.CNNBase.to_ddp": [[400, 423], ["torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "range", "range", "range", "range", "range", "range", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "methods", ["None"], ["", "def", "to_ddp", "(", "self", ",", "device_ids", ",", "output_device", ")", ":", "\n", "        ", "self", ".", "pg1", "=", "torch", ".", "distributed", ".", "new_group", "(", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", ")", "\n", "self", ".", "pg2", "=", "torch", ".", "distributed", ".", "new_group", "(", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", ")", "\n", "self", ".", "pg3", "=", "torch", ".", "distributed", ".", "new_group", "(", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", ")", "\n", "self", ".", "pg4", "=", "torch", ".", "distributed", ".", "new_group", "(", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", ")", "\n", "self", ".", "pg5", "=", "torch", ".", "distributed", ".", "new_group", "(", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", ")", "\n", "self", ".", "pg6", "=", "torch", ".", "distributed", ".", "new_group", "(", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", ")", "\n", "self", ".", "pg7", "=", "torch", ".", "distributed", ".", "new_group", "(", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", ")", "\n", "\n", "self", ".", "distance_encoder", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "distance_encoder", ",", "device_ids", "=", "device_ids", ",", "\n", "output_device", "=", "output_device", ",", "process_group", "=", "self", ".", "pg1", ")", "\n", "self", ".", "angle_encoder", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "angle_encoder", ",", "device_ids", "=", "device_ids", ",", "\n", "output_device", "=", "output_device", ",", "process_group", "=", "self", ".", "pg2", ")", "\n", "self", ".", "time_encoder", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "time_encoder", ",", "device_ids", "=", "device_ids", ",", "\n", "output_device", "=", "output_device", ",", "process_group", "=", "self", ".", "pg3", ")", "\n", "self", ".", "rgb_encoder", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "rgb_encoder", ",", "device_ids", "=", "device_ids", ",", "\n", "output_device", "=", "output_device", ",", "process_group", "=", "self", ".", "pg4", ")", "\n", "self", ".", "fuse_embedding", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "fuse_embedding", ",", "device_ids", "=", "device_ids", ",", "\n", "output_device", "=", "output_device", ",", "process_group", "=", "self", ".", "pg5", ")", "\n", "self", ".", "gru", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "gru", ",", "device_ids", "=", "device_ids", ",", "\n", "output_device", "=", "output_device", ",", "process_group", "=", "self", ".", "pg6", ")", "\n", "self", ".", "critic_linear", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "critic_linear", ",", "device_ids", "=", "device_ids", ",", "\n", "output_device", "=", "output_device", ",", "process_group", "=", "self", ".", "pg7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.CNNBase.forward": [[424, 446], ["occant_utils.common.process_image", "inputs[].squeeze", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "policy_utils.CNNBase.distance_encoder", "policy_utils.CNNBase.angle_encoder", "policy_utils.CNNBase.time_encoder", "policy_utils.CNNBase.rgb_encoder", "policy_utils.CNNBase.fuse_embedding", "policy_utils.CNNBase._forward_gru", "rnn_hxs.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rnn_hxs.unsqueeze.unsqueeze.squeeze", "policy_utils.CNNBase.critic_linear"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.process_image", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy_utils.NNBase._forward_gru"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ")", ":", "\n", "        ", "x_rgb", "=", "inputs", "[", "\"rgb_at_t\"", "]", "\n", "x_rgb", "=", "process_image", "(", "x_rgb", ",", "self", ".", "img_mean", ",", "self", ".", "img_std", ")", "\n", "x_goal", "=", "inputs", "[", "\"goal_at_t\"", "]", "\n", "x_time", "=", "inputs", "[", "\"t\"", "]", ".", "squeeze", "(", "1", ")", "\n", "\n", "x_rho", "=", "torch", ".", "norm", "(", "x_goal", ",", "dim", "=", "1", ")", "\n", "x_phi", "=", "torch", ".", "atan2", "(", "x_goal", "[", ":", ",", "1", "]", ",", "x_goal", "[", ":", ",", "0", "]", ")", "\n", "\n", "x_rho_emb", "=", "self", ".", "distance_encoder", "(", "x_rho", ")", "\n", "x_phi_emb", "=", "self", ".", "angle_encoder", "(", "x_phi", ")", "\n", "x_time_emb", "=", "self", ".", "time_encoder", "(", "x_time", ")", "\n", "x_rgb_emb", "=", "self", ".", "rgb_encoder", "(", "x_rgb", ")", "\n", "\n", "embeddings", "=", "[", "x_rgb_emb", ",", "x_rho_emb", ",", "x_phi_emb", ",", "x_time_emb", "]", "\n", "\n", "x", "=", "self", ".", "fuse_embedding", "(", "torch", ".", "cat", "(", "embeddings", ",", "dim", "=", "1", ")", ")", "\n", "\n", "x", ",", "rnn_hxs", "=", "self", ".", "_forward_gru", "(", "x", ",", "rnn_hxs", ".", "squeeze", "(", "0", ")", ",", "masks", ")", "\n", "rnn_hxs", "=", "rnn_hxs", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "return", "self", ".", "critic_linear", "(", "x", ")", ",", "x", ",", "rnn_hxs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase.__init__": [[40, 63], ["occant_baselines.rl.policy.Mapper", "random.Random", "ans.ActiveNeuralSLAMBase._py_rng.seed", "numpy.random.RandomState", "ans.ActiveNeuralSLAMBase._npy_rng.seed", "ans.ActiveNeuralSLAMBase._create_agent_states", "occant_baselines.rl.policy.HeuristicLocalPolicy", "occant_baselines.rl.policy.LocalPolicy", "occant_baselines.rl.planner.AStarPlannerVector", "occant_baselines.rl.planner.AStarPlannerSequential"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.seed", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.seed", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer._create_agent_states"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "projection_unit", ",", "device", "=", "None", ",", "num_envs", "=", "None", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "mapper", "=", "Mapper", "(", "config", ".", "MAPPER", ",", "projection_unit", ")", "\n", "self", ".", "map_scale", "=", "self", ".", "mapper", ".", "map_config", "[", "\"scale\"", "]", "\n", "\n", "if", "config", ".", "LOCAL_POLICY", ".", "use_heuristic_policy", ":", "\n", "            ", "self", ".", "local_policy", "=", "HeuristicLocalPolicy", "(", "config", ".", "LOCAL_POLICY", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "local_policy", "=", "LocalPolicy", "(", "config", ".", "LOCAL_POLICY", ")", "\n", "", "if", "config", ".", "PLANNER", ".", "nplanners", ">", "1", ":", "\n", "            ", "self", ".", "planner", "=", "AStarPlannerVector", "(", "config", ".", "PLANNER", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "planner", "=", "AStarPlannerSequential", "(", "config", ".", "PLANNER", ")", "\n", "", "self", ".", "nplanners", "=", "config", ".", "PLANNER", ".", "nplanners", "\n", "self", ".", "planning_step_mts", "=", "self", ".", "config", ".", "planning_step", "\n", "self", ".", "goal_success_radius", "=", "self", ".", "config", ".", "goal_success_radius", "\n", "# Set random seed generators", "\n", "self", ".", "_py_rng", "=", "random", ".", "Random", "(", ")", "\n", "self", ".", "_py_rng", ".", "seed", "(", "self", ".", "config", ".", "pyt_random_seed", ")", "\n", "self", ".", "_npy_rng", "=", "np", ".", "random", ".", "RandomState", "(", ")", "\n", "self", ".", "_npy_rng", ".", "seed", "(", "self", ".", "config", ".", "pyt_random_seed", ")", "\n", "# Define states", "\n", "self", ".", "_create_agent_states", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._create_agent_states": [[64, 66], ["None"], "methods", ["None"], ["", "def", "_create_agent_states", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase.act": [[67, 77], ["None"], "methods", ["None"], ["", "def", "act", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "prev_observations", ",", "\n", "prev_state_estimates", ",", "\n", "ep_time", ",", "\n", "masks", ",", "\n", "deterministic", "=", "False", ",", "\n", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._process_maps": [[78, 108], ["obstacle_mask.float", "int", "range", "int", "int", "goals[].item", "goals[].item"], "methods", ["None"], ["", "def", "_process_maps", "(", "self", ",", "maps", ",", "goals", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            maps - (bs, 2, M, M) --- 1st channel is prob of obstacle present\n                                 --- 2nd channel is prob of being explored\n        \"\"\"", "\n", "map_scale", "=", "self", ".", "map_scale", "\n", "# Compute a map with ones for obstacles and zeros for the rest", "\n", "obstacle_mask", "=", "(", "maps", "[", ":", ",", "0", "]", ">", "self", ".", "config", ".", "thresh_obstacle", ")", "&", "(", "\n", "maps", "[", ":", ",", "1", "]", ">", "self", ".", "config", ".", "thresh_explored", "\n", ")", "\n", "final_maps", "=", "obstacle_mask", ".", "float", "(", ")", "# (bs, M, M)", "\n", "# Post-process map based on previously visited locations", "\n", "final_maps", "[", "self", ".", "states", "[", "\"visited_map\"", "]", "==", "1", "]", "=", "0", "\n", "# Post-process map based on previously collided regions", "\n", "if", "self", ".", "states", "[", "\"collision_map\"", "]", "is", "not", "None", ":", "\n", "            ", "final_maps", "[", "self", ".", "states", "[", "\"collision_map\"", "]", "==", "1", "]", "=", "1", "\n", "# Set small regions around the goal location to be zeros", "\n", "", "if", "goals", "is", "not", "None", ":", "\n", "            ", "lfs", "=", "int", "(", "self", ".", "config", ".", "PLANNER", ".", "local_free_size", "/", "map_scale", ")", "\n", "for", "i", "in", "range", "(", "final_maps", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "goal_x", "=", "int", "(", "goals", "[", "i", ",", "0", "]", ".", "item", "(", ")", ")", "\n", "goal_y", "=", "int", "(", "goals", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", "\n", "final_maps", "[", "\n", "i", ",", "\n", "(", "goal_y", "-", "lfs", ")", ":", "(", "goal_y", "+", "lfs", "+", "1", ")", ",", "\n", "(", "goal_x", "-", "lfs", ")", ":", "(", "goal_x", "+", "lfs", "+", "1", ")", ",", "\n", "]", "=", "0.0", "\n", "\n", "", "", "return", "final_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._sample_random_explored": [[109, 145], ["int", "numpy.clip().item", "numpy.clip().item", "numpy.clip().item", "numpy.clip().item", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "ans.ActiveNeuralSLAMBase._npy_rng.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "ans.ActiveNeuralSLAMBase._py_rng.randint", "ans.ActiveNeuralSLAMBase._py_rng.randint", "float", "float", "int", "int", "int", "int", "rand_x.item", "rand_y.item"], "methods", ["None"], ["", "def", "_sample_random_explored", "(", "\n", "self", ",", "agent_map_orig", ",", "agent_pos", ",", "map_scale", ",", "d_thresh", "=", "1.5", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            agent_map - (2, M, M) --- 1st channel is prob of obstacle present\n                                  --- 2nd channel is prob of being explored\n        Sampled random explored locations within a distance d_thresh meters from the agent_pos.\n        \"\"\"", "\n", "# Crop a small region around the agent position", "\n", "range_xy", "=", "int", "(", "d_thresh", "/", "map_scale", ")", "\n", "H", ",", "W", "=", "agent_map_orig", ".", "shape", "[", "1", ":", "]", "\n", "start_x", "=", "np", ".", "clip", "(", "int", "(", "agent_pos", "[", "0", "]", "-", "range_xy", ")", ",", "0", ",", "W", "-", "1", ")", ".", "item", "(", ")", "\n", "end_x", "=", "np", ".", "clip", "(", "int", "(", "agent_pos", "[", "0", "]", "+", "range_xy", ")", ",", "0", ",", "W", "-", "1", ")", ".", "item", "(", ")", "\n", "start_y", "=", "np", ".", "clip", "(", "int", "(", "agent_pos", "[", "1", "]", "-", "range_xy", ")", ",", "0", ",", "H", "-", "1", ")", ".", "item", "(", ")", "\n", "end_y", "=", "np", ".", "clip", "(", "int", "(", "agent_pos", "[", "1", "]", "+", "range_xy", ")", ",", "0", ",", "H", "-", "1", ")", ".", "item", "(", ")", "\n", "agent_map", "=", "agent_map_orig", "[", ":", ",", "start_y", ":", "(", "end_y", "+", "1", ")", ",", "start_x", ":", "(", "end_x", "+", "1", ")", "]", "\n", "if", "agent_map", ".", "shape", "[", "1", "]", "==", "0", "or", "agent_map", ".", "shape", "[", "2", "]", "==", "0", ":", "\n", "            ", "return", "agent_pos", "\n", "", "free_mask", "=", "(", "agent_map", "[", "0", "]", "<=", "self", ".", "config", ".", "thresh_obstacle", ")", "&", "(", "\n", "agent_map", "[", "1", "]", ">", "self", ".", "config", ".", "thresh_explored", "\n", ")", "\n", "valid_locs", "=", "torch", ".", "nonzero", "(", "free_mask", ")", "# (N, 2)", "\n", "if", "valid_locs", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "rand_x", "=", "agent_pos", "[", "0", "]", "+", "self", ".", "_py_rng", ".", "randint", "(", "\n", "-", "(", "range_xy", "//", "2", ")", ",", "range_xy", "//", "2", "\n", ")", "\n", "rand_y", "=", "agent_pos", "[", "1", "]", "+", "self", ".", "_py_rng", ".", "randint", "(", "\n", "-", "(", "range_xy", "//", "2", ")", ",", "range_xy", "//", "2", "\n", ")", "\n", "", "else", ":", "\n", "            ", "rand_idx", "=", "self", ".", "_npy_rng", ".", "randint", "(", "0", ",", "valid_locs", ".", "shape", "[", "0", "]", ")", "\n", "rand_y", ",", "rand_x", "=", "valid_locs", "[", "rand_idx", "]", "\n", "rand_x", "=", "float", "(", "rand_x", ".", "item", "(", ")", ")", "+", "start_x", "\n", "rand_y", "=", "float", "(", "rand_y", ".", "item", "(", ")", ")", "+", "start_y", "\n", "", "return", "(", "rand_x", ",", "rand_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._sample_random_near_agent": [[146, 160], ["int", "ans.ActiveNeuralSLAMBase._py_rng.randint", "ans.ActiveNeuralSLAMBase._py_rng.randint"], "methods", ["None"], ["", "def", "_sample_random_near_agent", "(", "\n", "self", ",", "agent_map_orig", ",", "agent_pos", ",", "map_scale", ",", "d_thresh", "=", "1.5", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            agent_map - (2, M, M) --- 1st channel is prob of obstacle present\n                                  --- 2nd channel is prob of being explored\n        Sampled random location within a distance d_thresh meters from the agent_pos.\n        \"\"\"", "\n", "# Crop a small 3m x 3m region around the agent position", "\n", "range_xy", "=", "int", "(", "d_thresh", "/", "map_scale", ")", "\n", "rand_x", "=", "agent_pos", "[", "0", "]", "+", "self", ".", "_py_rng", ".", "randint", "(", "-", "range_xy", ",", "range_xy", ")", "\n", "rand_y", "=", "agent_pos", "[", "1", "]", "+", "self", ".", "_py_rng", ".", "randint", "(", "-", "range_xy", ",", "range_xy", ")", "\n", "return", "(", "rand_x", ",", "rand_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._sample_random_towards_goal": [[161, 190], ["int", "ans.ActiveNeuralSLAMBase._py_rng.randint", "ans.ActiveNeuralSLAMBase._py_rng.randint"], "methods", ["None"], ["", "def", "_sample_random_towards_goal", "(", "\n", "self", ",", "agent_map_orig", ",", "agent_pos", ",", "goal_pos", ",", "map_scale", ",", "d_thresh", "=", "1.5", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            agent_map - (2, M, M) --- 1st channel is prob of obstacle present\n                                  --- 2nd channel is prob of being explored\n        Sampled random location within a distance d_thresh meters from the agent_pos.\n        \"\"\"", "\n", "# Crop a small 3m x 3m region around the agent position", "\n", "range_xy", "=", "int", "(", "d_thresh", "/", "map_scale", ")", "\n", "# Bias sampling towards the goal", "\n", "goal_rel_x", "=", "goal_pos", "[", "0", "]", "-", "agent_pos", "[", "0", "]", "\n", "goal_rel_y", "=", "goal_pos", "[", "1", "]", "-", "agent_pos", "[", "1", "]", "\n", "if", "goal_rel_x", ">=", "0", ":", "\n", "            ", "start_x", "=", "0", "\n", "end_x", "=", "range_xy", "\n", "", "else", ":", "\n", "            ", "start_x", "=", "-", "range_xy", "\n", "end_x", "=", "-", "1", "\n", "", "if", "goal_rel_y", ">=", "0", ":", "\n", "            ", "start_y", "=", "0", "\n", "end_y", "=", "range_xy", "\n", "", "else", ":", "\n", "            ", "start_y", "=", "-", "range_xy", "\n", "end_y", "=", "-", "1", "\n", "", "rand_x", "=", "agent_pos", "[", "0", "]", "+", "self", ".", "_py_rng", ".", "randint", "(", "start_x", ",", "end_x", "+", "1", ")", "\n", "rand_y", "=", "agent_pos", "[", "1", "]", "+", "self", ".", "_py_rng", ".", "randint", "(", "start_y", ",", "end_y", "+", "1", ")", "\n", "return", "(", "rand_x", ",", "rand_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._sample_random_explored_towards_goal": [[191, 231], ["int", "numpy.clip().item", "numpy.clip().item", "numpy.clip().item", "numpy.clip().item", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "ans.ActiveNeuralSLAMBase._npy_rng.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "ans.ActiveNeuralSLAMBase._py_rng.randint", "ans.ActiveNeuralSLAMBase._py_rng.randint", "min", "float", "float", "int", "int", "int", "int", "sort_idxes[].item", "rand_x.item", "rand_y.item"], "methods", ["None"], ["", "def", "_sample_random_explored_towards_goal", "(", "\n", "self", ",", "agent_map_orig", ",", "agent_pos", ",", "goal_pos", ",", "map_scale", ",", "d_thresh", "=", "0.5", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            agent_map - (2, M, M) --- 1st channel is prob of obstacle present\n                                  --- 2nd channel is prob of being explored\n        Sampled random explored locations within a distance d_thresh meters from the agent_pos.\n        \"\"\"", "\n", "# Crop a small 3m x 3m region around the agent position", "\n", "range_xy", "=", "int", "(", "d_thresh", "/", "map_scale", ")", "\n", "H", ",", "W", "=", "agent_map_orig", ".", "shape", "[", "1", ":", "]", "\n", "start_x", "=", "np", ".", "clip", "(", "int", "(", "agent_pos", "[", "0", "]", "-", "range_xy", ")", ",", "0", ",", "W", "-", "1", ")", ".", "item", "(", ")", "\n", "end_x", "=", "np", ".", "clip", "(", "int", "(", "agent_pos", "[", "0", "]", "+", "range_xy", ")", ",", "0", ",", "W", "-", "1", ")", ".", "item", "(", ")", "\n", "start_y", "=", "np", ".", "clip", "(", "int", "(", "agent_pos", "[", "1", "]", "-", "range_xy", ")", ",", "0", ",", "H", "-", "1", ")", ".", "item", "(", ")", "\n", "end_y", "=", "np", ".", "clip", "(", "int", "(", "agent_pos", "[", "1", "]", "+", "range_xy", ")", ",", "0", ",", "H", "-", "1", ")", ".", "item", "(", ")", "\n", "agent_map", "=", "agent_map_orig", "[", ":", ",", "start_y", ":", "(", "end_y", "+", "1", ")", ",", "start_x", ":", "(", "end_x", "+", "1", ")", "]", "\n", "if", "agent_map", ".", "shape", "[", "1", "]", "==", "0", "or", "agent_map", ".", "shape", "[", "2", "]", "==", "0", ":", "\n", "            ", "return", "agent_pos", "\n", "", "free_mask", "=", "(", "agent_map", "[", "0", "]", "<=", "self", ".", "config", ".", "thresh_obstacle", ")", "&", "(", "\n", "agent_map", "[", "1", "]", ">", "self", ".", "config", ".", "thresh_explored", "\n", ")", "\n", "valid_locs", "=", "torch", ".", "nonzero", "(", "free_mask", ")", "# (N, 2)", "\n", "if", "valid_locs", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "rand_x", "=", "agent_pos", "[", "0", "]", "+", "self", ".", "_py_rng", ".", "randint", "(", "-", "range_xy", ",", "range_xy", ")", "\n", "rand_y", "=", "agent_pos", "[", "1", "]", "+", "self", ".", "_py_rng", ".", "randint", "(", "-", "range_xy", ",", "range_xy", ")", "\n", "", "else", ":", "\n", "            ", "goal_x_trans", "=", "goal_pos", "[", "0", "]", "-", "start_x", "\n", "goal_y_trans", "=", "goal_pos", "[", "1", "]", "-", "start_y", "\n", "dist2goal", "=", "(", "valid_locs", "[", ":", ",", "1", "]", "-", "goal_x_trans", ")", "**", "2", "+", "(", "\n", "valid_locs", "[", ":", ",", "0", "]", "-", "goal_y_trans", "\n", ")", "**", "2", "\n", "# Sort based on distance to goal", "\n", "_", ",", "sort_idxes", "=", "torch", ".", "sort", "(", "dist2goal", ")", "\n", "# Sample from top-10 explored points closest to the goal", "\n", "rand_idx", "=", "self", ".", "_npy_rng", ".", "randint", "(", "0", ",", "min", "(", "10", ",", "dist2goal", ".", "shape", "[", "0", "]", ")", ")", "\n", "rand_y", ",", "rand_x", "=", "valid_locs", "[", "sort_idxes", "[", "rand_idx", "]", ".", "item", "(", ")", "]", "\n", "rand_x", "=", "float", "(", "rand_x", ".", "item", "(", ")", ")", "+", "start_x", "\n", "rand_y", "=", "float", "(", "rand_y", ".", "item", "(", ")", ")", "+", "start_y", "\n", "", "return", "(", "rand_x", ",", "rand_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase.to": [[232, 235], ["ans.ActiveNeuralSLAMBase.mapper.to", "ans.ActiveNeuralSLAMBase.local_policy.to"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "mapper", ".", "to", "(", "device", ")", "\n", "self", ".", "local_policy", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase.train": [[236, 239], ["ans.ActiveNeuralSLAMBase.mapper.train", "ans.ActiveNeuralSLAMBase.local_policy.train"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.train", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.train"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "mapper", ".", "train", "(", ")", "\n", "self", ".", "local_policy", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase.eval": [[240, 243], ["ans.ActiveNeuralSLAMBase.mapper.eval", "ans.ActiveNeuralSLAMBase.local_policy.eval"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.eval", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "mapper", ".", "eval", "(", ")", "\n", "self", ".", "local_policy", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase.parameters": [[244, 246], ["itertools.chain", "ans.ActiveNeuralSLAMBase.mapper.parameters", "ans.ActiveNeuralSLAMBase.local_policy.parameters"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters"], ["", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "chain", "(", "self", ".", "mapper", ".", "parameters", "(", ")", ",", "self", ".", "local_policy", ".", "parameters", "(", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase.state_dict": [[247, 251], ["ans.ActiveNeuralSLAMBase.mapper.state_dict", "ans.ActiveNeuralSLAMBase.local_policy.state_dict"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"mapper\"", ":", "self", ".", "mapper", ".", "state_dict", "(", ")", ",", "\n", "\"local_policy\"", ":", "self", ".", "local_policy", ".", "state_dict", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase.load_state_dict": [[253, 256], ["ans.ActiveNeuralSLAMBase.mapper.load_state_dict", "ans.ActiveNeuralSLAMBase.local_policy.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "mapper", ".", "load_state_dict", "(", "state_dict", "[", "\"mapper\"", "]", ")", "\n", "self", ".", "local_policy", ".", "load_state_dict", "(", "state_dict", "[", "\"local_policy\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase.reset": [[257, 260], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "k", "in", "self", ".", "states", ":", "\n", "            ", "self", ".", "states", "[", "k", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase.get_states": [[261, 263], ["copy.deepcopy"], "methods", ["None"], ["", "", "def", "get_states", "(", "self", ")", ":", "\n", "        ", "return", "copy", ".", "deepcopy", "(", "self", ".", "states", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase.update_states": [[264, 266], ["None"], "methods", ["None"], ["", "def", "update_states", "(", "self", ",", "states", ")", ":", "\n", "        ", "self", ".", "states", "=", "states", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._compute_relative_local_goals": [[267, 285], ["occant_utils.common.convert_map2world", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "occant_utils.common.subtract_pose", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.convert_map2world", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.subtract_pose", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["", "def", "_compute_relative_local_goals", "(", "self", ",", "agent_world_pose", ",", "M", ",", "s", ")", ":", "\n", "        ", "\"\"\"\n        Converts a local goal (x, y) position in the map to egocentric coordinates\n        relative to agent's current pose.\n        \"\"\"", "\n", "local_map_goals", "=", "self", ".", "states", "[", "\"curr_local_goals\"", "]", "\n", "local_world_goals", "=", "convert_map2world", "(", "local_map_goals", ",", "(", "M", ",", "M", ")", ",", "s", ")", "# (bs, 2)", "\n", "# Concatenate dummy directions to goal", "\n", "local_world_goals", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "local_world_goals", ",", "\n", "torch", ".", "zeros", "(", "self", ".", "nplanners", ",", "1", ")", ".", "to", "(", "agent_world_pose", ".", "device", ")", ",", "\n", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "relative_goals", "=", "subtract_pose", "(", "agent_world_pose", ",", "local_world_goals", ")", "[", ":", ",", ":", "2", "]", "\n", "\n", "return", "relative_goals", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._create_mapper_inputs": [[286, 333], ["prev_observations.get", "observations.get", "mapper_inputs.update"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.update"], ["", "def", "_create_mapper_inputs", "(", "\n", "self", ",", "observations", ",", "prev_observations", ",", "prev_state_estimates", "\n", ")", ":", "\n", "        ", "rgb_at_t_1", "=", "prev_observations", "[", "\"rgb\"", "]", "# (bs, H, W, C)", "\n", "depth_at_t_1", "=", "prev_observations", "[", "\"depth\"", "]", "# (bs, H, W, 1)", "\n", "ego_map_gt_at_t_1", "=", "prev_observations", "[", "\"ego_map_gt\"", "]", "# (bs, Hby2, Wby2, 2)", "\n", "pose_at_t_1", "=", "prev_observations", "[", "\"pose\"", "]", "# (bs, 3)", "\n", "rgb_at_t", "=", "observations", "[", "\"rgb\"", "]", "# (bs, H, W, C)", "\n", "depth_at_t", "=", "observations", "[", "\"depth\"", "]", "# (bs, H, W, 1)", "\n", "ego_map_gt_at_t", "=", "observations", "[", "\"ego_map_gt\"", "]", "# (bs, Hby2, Wby2, 2)", "\n", "pose_at_t", "=", "observations", "[", "\"pose\"", "]", "# (bs, 3)", "\n", "action_at_t_1", "=", "observations", "[", "\"prev_actions\"", "]", "\n", "# This happens only for a baseline", "\n", "if", "\"ego_map_gt_anticipated\"", "in", "prev_observations", ":", "\n", "            ", "ego_map_gt_anticipated_at_t_1", "=", "prev_observations", "[", "\"ego_map_gt_anticipated\"", "]", "\n", "ego_map_gt_anticipated_at_t", "=", "observations", "[", "\"ego_map_gt_anticipated\"", "]", "\n", "", "else", ":", "\n", "            ", "ego_map_gt_anticipated_at_t_1", "=", "None", "\n", "ego_map_gt_anticipated_at_t", "=", "None", "\n", "", "pose_hat_at_t_1", "=", "prev_state_estimates", "[", "\"pose_estimates\"", "]", "# (bs, 3)", "\n", "map_at_t_1", "=", "prev_state_estimates", "[", "\"map_states\"", "]", "# (bs, 2, M, M)", "\n", "pose_gt_at_t_1", "=", "prev_observations", ".", "get", "(", "\"pose_gt\"", ",", "None", ")", "\n", "pose_gt_at_t", "=", "observations", ".", "get", "(", "\"pose_gt\"", ",", "None", ")", "\n", "\n", "mapper_inputs", "=", "{", "\n", "\"rgb_at_t_1\"", ":", "rgb_at_t_1", ",", "\n", "\"depth_at_t_1\"", ":", "depth_at_t_1", ",", "\n", "\"ego_map_gt_at_t_1\"", ":", "ego_map_gt_at_t_1", ",", "\n", "\"ego_map_gt_anticipated_at_t_1\"", ":", "ego_map_gt_anticipated_at_t_1", ",", "\n", "\"pose_at_t_1\"", ":", "pose_at_t_1", ",", "\n", "\"pose_gt_at_t_1\"", ":", "pose_gt_at_t_1", ",", "\n", "\"pose_hat_at_t_1\"", ":", "pose_hat_at_t_1", ",", "\n", "\"map_at_t_1\"", ":", "map_at_t_1", ",", "\n", "\"rgb_at_t\"", ":", "rgb_at_t", ",", "\n", "\"depth_at_t\"", ":", "depth_at_t", ",", "\n", "\"ego_map_gt_at_t\"", ":", "ego_map_gt_at_t", ",", "\n", "\"ego_map_gt_anticipated_at_t\"", ":", "ego_map_gt_anticipated_at_t", ",", "\n", "\"pose_at_t\"", ":", "pose_at_t", ",", "\n", "\"pose_gt_at_t\"", ":", "pose_gt_at_t", ",", "\n", "\"action_at_t_1\"", ":", "action_at_t_1", ",", "\n", "}", "\n", "if", "self", ".", "config", ".", "use_gt_positioning", ":", "\n", "            ", "mapper_inputs", ".", "update", "(", "{", "\n", "\"pose_at_t_1\"", ":", "pose_gt_at_t_1", ",", "\n", "\"pose_at_t\"", ":", "pose_gt_at_t", ",", "\n", "}", ")", "\n", "", "return", "mapper_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._compute_plans": [[334, 419], ["ans.ActiveNeuralSLAMBase._process_maps", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "einops.asnumpy().astype", "einops.asnumpy().astype", "einops.asnumpy", "ans.ActiveNeuralSLAMBase.planner.plan", "range", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "int", "int", "occant_utils.common.crop_map().squeeze", "torch.pad", "torch.pad", "len", "int", "int", "zip", "final_plans.append", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "einops.asnumpy", "einops.asnumpy", "final_plans.append", "final_plan_x.append", "final_plan_y.append", "occant_utils.common.crop_map", "torch.max", "torch.max", "torch.max", "torch.max", "ans.ActiveNeuralSLAMBase.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._process_maps", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerSequential.plan", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.crop_map"], ["", "def", "_compute_plans", "(", "\n", "self", ",", "\n", "global_map", ",", "\n", "agent_map_xy", ",", "\n", "goal_map_xy", ",", "\n", "sample_goal_flags", ",", "\n", "cache_map", "=", "False", ",", "\n", "crop_map_flag", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        global_map - (bs, 2, V, V) tensor\n        agent_map_xy - (bs, 2) agent's current position on the map\n        goal_map_xy - (bs, 2) goal's current position on the map\n        sample_goal_flags - list of zeros and ones should a new goal be sampled?\n        \"\"\"", "\n", "# ==================== Process the map to get planner map =====================", "\n", "s", "=", "self", ".", "map_scale", "\n", "# Processed map has zeros for free-space and ones for obstacles", "\n", "global_map_proc", "=", "self", ".", "_process_maps", "(", "\n", "global_map", ",", "goal_map_xy", "\n", ")", "# (bs, M, M) tensor", "\n", "# =================== Crop a local region around agent, goal ==================", "\n", "if", "crop_map_flag", ":", "\n", "# Determine crop size", "\n", "            ", "abs_diff_xy", "=", "torch", ".", "abs", "(", "agent_map_xy", "-", "goal_map_xy", ")", "\n", "S", "=", "int", "(", "torch", ".", "max", "(", "abs_diff_xy", ")", ".", "item", "(", ")", ")", "\n", "# Add a small buffer space around the agent location", "\n", "buffer_size", "=", "int", "(", "3.0", "/", "s", ")", "# 3 meters buffer space in total", "\n", "S", "+=", "buffer_size", "\n", "old_center_xy", "=", "(", "agent_map_xy", "+", "goal_map_xy", ")", "/", "2", "\n", "# Crop a SxS region centered around old_center_xy", "\n", "# Note: The out-of-bound regions will be zero-padded by default. In this case,", "\n", "# since zeros correspond to free-space, that is not a problem.", "\n", "cropped_global_map", "=", "crop_map", "(", "\n", "global_map_proc", ".", "unsqueeze", "(", "1", ")", ",", "old_center_xy", ",", "S", "\n", ")", ".", "squeeze", "(", "\n", "1", "\n", ")", "# (bs, S, S)", "\n", "# Add zero padding to ensure the plans don't fail due to cropping", "\n", "pad_size", "=", "5", "\n", "cropped_global_map", "=", "F", ".", "pad", "(", "\n", "cropped_global_map", ",", "(", "pad_size", ",", "pad_size", ",", "pad_size", ",", "pad_size", ")", "\n", ")", "\n", "S", "+=", "pad_size", "*", "2", "\n", "# Transform to new coordinates", "\n", "new_center_xy", "=", "torch", ".", "ones_like", "(", "old_center_xy", ")", "*", "(", "S", "/", "2", ")", "\n", "new_agent_map_xy", "=", "agent_map_xy", "+", "(", "new_center_xy", "-", "old_center_xy", ")", "\n", "new_goal_map_xy", "=", "goal_map_xy", "+", "(", "new_center_xy", "-", "old_center_xy", ")", "\n", "", "else", ":", "\n", "            ", "cropped_global_map", "=", "global_map_proc", "# (bs, M, M)", "\n", "old_center_xy", "=", "(", "agent_map_xy", "+", "goal_map_xy", ")", "/", "2", "\n", "new_center_xy", "=", "old_center_xy", "\n", "new_agent_map_xy", "=", "agent_map_xy", "\n", "new_goal_map_xy", "=", "goal_map_xy", "\n", "S", "=", "cropped_global_map", ".", "shape", "[", "1", "]", "\n", "\n", "", "if", "cache_map", ":", "\n", "            ", "self", ".", "_cropped_global_map", "=", "cropped_global_map", "\n", "# Clip points to ensure they are within map limits", "\n", "", "new_agent_map_xy", "=", "torch", ".", "clamp", "(", "new_agent_map_xy", ",", "0", ",", "S", "-", "1", ")", "\n", "new_goal_map_xy", "=", "torch", ".", "clamp", "(", "new_goal_map_xy", ",", "0", ",", "S", "-", "1", ")", "\n", "# Convert to numpy", "\n", "agent_map_xy_np", "=", "asnumpy", "(", "new_agent_map_xy", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "goal_map_xy_np", "=", "asnumpy", "(", "new_goal_map_xy", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "global_map_np", "=", "asnumpy", "(", "cropped_global_map", ")", "\n", "# =================== Plan path from agent to goal positions ==================", "\n", "plans", "=", "self", ".", "planner", ".", "plan", "(", "\n", "global_map_np", ",", "agent_map_xy_np", ",", "goal_map_xy_np", ",", "sample_goal_flags", "\n", ")", "# List of tuple of lists", "\n", "# Convert plans back to original coordinates", "\n", "final_plans", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "plans", ")", ")", ":", "\n", "            ", "plan_x", ",", "plan_y", "=", "plans", "[", "i", "]", "\n", "# Planning failure", "\n", "if", "plan_x", "is", "None", ":", "\n", "                ", "final_plans", ".", "append", "(", "(", "plan_x", ",", "plan_y", ")", ")", "\n", "continue", "\n", "", "offset_x", "=", "int", "(", "(", "old_center_xy", "[", "i", ",", "0", "]", "-", "new_center_xy", "[", "i", ",", "0", "]", ")", ".", "item", "(", ")", ")", "\n", "offset_y", "=", "int", "(", "(", "old_center_xy", "[", "i", ",", "1", "]", "-", "new_center_xy", "[", "i", ",", "1", "]", ")", ".", "item", "(", ")", ")", "\n", "final_plan_x", ",", "final_plan_y", "=", "[", "]", ",", "[", "]", "\n", "for", "px", ",", "py", "in", "zip", "(", "plan_x", ",", "plan_y", ")", ":", "\n", "                ", "final_plan_x", ".", "append", "(", "px", "+", "offset_x", ")", "\n", "final_plan_y", ".", "append", "(", "py", "+", "offset_y", ")", "\n", "", "final_plans", ".", "append", "(", "(", "final_plan_x", ",", "final_plan_y", ")", ")", "\n", "", "return", "final_plans", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._compute_plans_and_local_goals": [[420, 424], ["None"], "methods", ["None"], ["", "def", "_compute_plans_and_local_goals", "(", "\n", "self", ",", "global_map", ",", "agent_map_xy", ",", "SAMPLE_LOCAL_GOAL_FLAGS", ",", "\n", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._compute_dist2localgoal": [[425, 448], ["ans.ActiveNeuralSLAMBase._compute_plans", "range", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to.append", "torch.Tensor().to.append", "range", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "numpy.linalg.norm().sum().item", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.array", "numpy.linalg.norm().sum", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._compute_plans", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["", "def", "_compute_dist2localgoal", "(", "self", ",", "global_map", ",", "map_xy", ",", "local_goal_xy", ")", ":", "\n", "        ", "\"\"\"\n        global_map - (bs, 2, V, V) tensor\n        map_xy - (bs, 2) agent's current position on the map\n        local_goal_xy - (bs, 2) local goal position on the map\n        \"\"\"", "\n", "sample_goal_flags", "=", "[", "1.0", "for", "_", "in", "range", "(", "self", ".", "nplanners", ")", "]", "\n", "plans", "=", "self", ".", "_compute_plans", "(", "\n", "global_map", ",", "map_xy", ",", "local_goal_xy", ",", "sample_goal_flags", "\n", ")", "\n", "dist2localgoal", "=", "[", "]", "\n", "# Compute distance to local goal", "\n", "for", "i", "in", "range", "(", "self", ".", "nplanners", ")", ":", "\n", "            ", "path_x", ",", "path_y", "=", "plans", "[", "i", "]", "\n", "# If planning failed, return euclidean distance", "\n", "if", "path_x", "is", "None", ":", "\n", "                ", "d2l", "=", "torch", ".", "norm", "(", "map_xy", "[", "i", "]", "-", "local_goal_xy", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "path_xy", "=", "np", ".", "array", "(", "[", "path_x", ",", "path_y", "]", ")", ".", "T", "# (n, 2)", "\n", "d2l", "=", "np", ".", "linalg", ".", "norm", "(", "path_xy", "[", "1", ":", "]", "-", "path_xy", "[", ":", "-", "1", "]", ",", "axis", "=", "1", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "dist2localgoal", ".", "append", "(", "d2l", "*", "self", ".", "map_scale", ")", "\n", "", "dist2localgoal", "=", "torch", ".", "Tensor", "(", "dist2localgoal", ")", ".", "to", "(", "global_map", ".", "device", ")", "\n", "return", "dist2localgoal", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._compute_local_map_crop": [[449, 470], ["int", "occant_utils.common.crop_map", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "occant_utils.common.spatial_transform_map", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "occant_utils.common.crop_map", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.crop_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.spatial_transform_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.crop_map"], ["", "def", "_compute_local_map_crop", "(", "self", ",", "global_map", ",", "global_pose", ")", ":", "\n", "        ", "local_crop_size", "=", "self", ".", "config", ".", "LOCAL_POLICY", ".", "embed_map_size", "\n", "exp_crop_size", "=", "int", "(", "1.5", "*", "local_crop_size", ")", "\n", "cropped_map", "=", "crop_map", "(", "\n", "global_map", ",", "self", ".", "states", "[", "\"curr_map_position\"", "]", ",", "exp_crop_size", "\n", ")", "\n", "global_heading", "=", "global_pose", "[", ":", ",", "2", "]", "# (bs, ) pose in radians", "\n", "rotation_params", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "torch", ".", "zeros_like", "(", "global_heading", ")", ",", "\n", "torch", ".", "zeros_like", "(", "global_heading", ")", ",", "\n", "global_heading", ",", "\n", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "rotated_map", "=", "spatial_transform_map", "(", "cropped_map", ",", "rotation_params", ")", "\n", "center_locs", "=", "torch", ".", "zeros_like", "(", "self", ".", "states", "[", "\"curr_map_position\"", "]", ")", "\n", "center_locs", "[", ":", ",", "0", "]", "=", "rotated_map", ".", "shape", "[", "3", "]", "//", "2", "\n", "center_locs", "[", ":", ",", "1", "]", "=", "rotated_map", ".", "shape", "[", "2", "]", "//", "2", "\n", "rotated_map", "=", "crop_map", "(", "rotated_map", ",", "center_locs", ",", "local_crop_size", ")", "\n", "return", "rotated_map", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.__init__": [[473, 478], ["ans.ActiveNeuralSLAMBase.__init__", "occant_baselines.rl.policy.GlobalPolicy"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "projection_unit", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ",", "projection_unit", ")", "\n", "self", ".", "global_policy", "=", "GlobalPolicy", "(", "config", ".", "GLOBAL_POLICY", ")", "\n", "self", ".", "goal_interval", "=", "self", ".", "config", ".", "goal_interval", "\n", "self", ".", "use_ddp", "=", "config", ".", "use_ddp", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer._create_agent_states": [[479, 497], ["None"], "methods", ["None"], ["", "def", "_create_agent_states", "(", "self", ")", ":", "\n", "        ", "self", ".", "states", "=", "{", "\n", "# Planning states", "\n", "\"curr_global_goals\"", ":", "None", ",", "\n", "\"curr_local_goals\"", ":", "None", ",", "\n", "\"prev_dist2localgoal\"", ":", "None", ",", "\n", "\"curr_dist2localgoal\"", ":", "None", ",", "\n", "\"prev_map_position\"", ":", "None", ",", "\n", "\"curr_map_position\"", ":", "None", ",", "\n", "\"local_path_length\"", ":", "None", ",", "\n", "\"local_shortest_path_length\"", ":", "None", ",", "\n", "# Heuristics for navigation", "\n", "\"collision_map\"", ":", "None", ",", "\n", "\"visited_map\"", ":", "None", ",", "\n", "\"col_width\"", ":", "None", ",", "\n", "\"sample_random_explored_timer\"", ":", "None", ",", "\n", "# Global map reward states", "\n", "\"prev_map_states\"", ":", "None", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.act": [[499, 762], ["ep_time[].item", "ans.ActiveNeuralSLAMExplorer._create_mapper_inputs", "ans.ActiveNeuralSLAMExplorer.mapper", "occant_utils.common.convert_world2map", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "ans.ActiveNeuralSLAMExplorer._update_state_visitation", "range", "ans.ActiveNeuralSLAMExplorer._compute_local_rewards().to", "ans.ActiveNeuralSLAMExplorer._compute_plans_and_local_goals", "ans.ActiveNeuralSLAMExplorer._compute_dist2localgoal", "ans.ActiveNeuralSLAMExplorer._compute_relative_local_goals", "ans.ActiveNeuralSLAMExplorer.local_policy.act", "ans.ActiveNeuralSLAMExplorer.update", "print", "ans.ActiveNeuralSLAMExplorer._compute_dist2localgoal", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "einops.asnumpy().tolist", "ans.ActiveNeuralSLAMExplorer._create_global_policy_inputs", "hasattr", "ans.ActiveNeuralSLAMExplorer.global_policy.act", "torch.fmod().float", "torch.fmod().float", "torch.fmod().float", "torch.fmod().float", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "global_map.detach", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "ans.ActiveNeuralSLAMExplorer.states[].long().to", "einops.asnumpy().tolist", "torch.Tensor().to().unsqueeze", "torch.Tensor().to().unsqueeze", "torch.Tensor().to().unsqueeze", "torch.Tensor().to().unsqueeze", "observations.keys", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "occant_utils.common.add_pose", "ans.ActiveNeuralSLAMExplorer._compute_gt_local_action", "torch.zeros_like.to", "torch.zeros_like.to", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "[].item", "einops.asnumpy().tolist", "einops.asnumpy().tolist", "int", "int", "ans.ActiveNeuralSLAMExplorer._compute_local_rewards", "print", "print", "print", "print", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "global_pose[].item", "min", "math.sqrt", "int", "range", "einops.asnumpy", "ans.ActiveNeuralSLAMExplorer.update", "torch.fmod", "torch.fmod", "torch.fmod", "torch.fmod", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "ans.ActiveNeuralSLAMExplorer.states[].long", "einops.asnumpy", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "einops.asnumpy", "einops.asnumpy", "abs", "abs", "[].item", "range", "prev_state_estimates.pop", "global_action.squeeze", "global_action.squeeze().float", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "int", "int", "global_action.squeeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.sin", "math.cos", "math.cos", "math.sin"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._create_mapper_inputs", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.convert_world2map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer._update_state_visitation", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer._compute_plans_and_local_goals", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._compute_dist2localgoal", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._compute_relative_local_goals", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.act", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.update", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._compute_dist2localgoal", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer._create_global_policy_inputs", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.act", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.add_pose", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer._compute_gt_local_action", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer._compute_local_rewards", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.update", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["", "def", "act", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "prev_observations", ",", "\n", "prev_state_estimates", ",", "\n", "ep_time", ",", "\n", "masks", ",", "\n", "deterministic", "=", "False", ",", "\n", ")", ":", "\n", "# ============================ Set useful variables ===========================", "\n", "        ", "ep_step", "=", "ep_time", "[", "0", "]", ".", "item", "(", ")", "\n", "M", "=", "prev_state_estimates", "[", "\"map_states\"", "]", ".", "shape", "[", "2", "]", "\n", "s", "=", "self", ".", "map_scale", "\n", "device", "=", "observations", "[", "'rgb'", "]", ".", "device", "\n", "assert", "M", "%", "2", "==", "1", ",", "\"The code is tested only for odd map sizes!\"", "\n", "# =================== Update states from current observation ==================", "\n", "# Update map, pose and visitation map", "\n", "mapper_inputs", "=", "self", ".", "_create_mapper_inputs", "(", "\n", "observations", ",", "prev_observations", ",", "prev_state_estimates", "\n", ")", "\n", "mapper_outputs", "=", "self", ".", "mapper", "(", "mapper_inputs", ")", "\n", "global_map", "=", "mapper_outputs", "[", "\"mt\"", "]", "\n", "global_pose", "=", "mapper_outputs", "[", "\"xt_hat\"", "]", "\n", "if", "self", ".", "config", ".", "MAPPER", ".", "debug_log", ":", "\n", "            ", "print", "(", "f\"Global Pose: {global_pose}\"", ")", "\n", "", "map_xy", "=", "convert_world2map", "(", "global_pose", "[", ":", ",", ":", "2", "]", ",", "(", "M", ",", "M", ")", ",", "s", ")", "\n", "map_xy", "=", "torch", ".", "clamp", "(", "map_xy", ",", "0", ",", "M", "-", "1", ")", "\n", "visited_states", "=", "self", ".", "_update_state_visitation", "(", "\n", "prev_state_estimates", "[", "\"visited_states\"", "]", ",", "map_xy", "\n", ")", "# (bs, 1, M, M)", "\n", "# Update local ANM state variables", "\n", "curr_map_position", "=", "map_xy", "\n", "if", "ep_step", ">", "0", ":", "\n", "# Compute state updates", "\n", "            ", "prev_dist2localgoal", "=", "self", ".", "states", "[", "\"curr_dist2localgoal\"", "]", "\n", "curr_dist2localgoal", "=", "self", ".", "_compute_dist2localgoal", "(", "\n", "global_map", ",", "map_xy", ",", "self", ".", "states", "[", "\"curr_local_goals\"", "]", ",", "\n", ")", "\n", "prev_map_position", "=", "self", ".", "states", "[", "\"curr_map_position\"", "]", "\n", "prev_step_size", "=", "(", "\n", "torch", ".", "norm", "(", "curr_map_position", "-", "prev_map_position", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "*", "s", "\n", ")", "\n", "# Update the state variables", "\n", "self", ".", "states", "[", "\"prev_dist2localgoal\"", "]", "=", "prev_dist2localgoal", "\n", "self", ".", "states", "[", "\"curr_dist2localgoal\"", "]", "=", "curr_dist2localgoal", "\n", "self", ".", "states", "[", "\"prev_map_position\"", "]", "=", "prev_map_position", "\n", "self", ".", "states", "[", "\"local_path_length\"", "]", "+=", "prev_step_size", "\n", "", "self", ".", "states", "[", "\"curr_map_position\"", "]", "=", "curr_map_position", "\n", "# Initialize collision and visited maps at t=0", "\n", "if", "ep_step", "==", "0", ":", "\n", "            ", "self", ".", "states", "[", "\"collision_map\"", "]", "=", "torch", ".", "zeros", "(", "self", ".", "nplanners", ",", "M", ",", "M", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "states", "[", "\"visited_map\"", "]", "=", "torch", ".", "zeros", "(", "self", ".", "nplanners", ",", "M", ",", "M", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "states", "[", "\"col_width\"", "]", "=", "torch", ".", "ones", "(", "self", ".", "nplanners", ")", "\n", "# Monitors number of steps elapsed since last call to sample random explored", "\n", "self", ".", "states", "[", "\"sample_random_explored_timer\"", "]", "=", "torch", ".", "zeros", "(", "self", ".", "nplanners", ")", "\n", "", "if", "ep_step", ">", "0", ":", "\n", "# Update collision maps", "\n", "            ", "forward_step", "=", "self", ".", "config", ".", "LOCAL_POLICY", ".", "AGENT_DYNAMICS", ".", "forward_step", "\n", "for", "i", "in", "range", "(", "self", ".", "nplanners", ")", ":", "\n", "                ", "prev_action_i", "=", "observations", "[", "\"prev_actions\"", "]", "[", "i", ",", "0", "]", ".", "item", "(", ")", "\n", "# If not forward action, skip", "\n", "if", "prev_action_i", "!=", "0", ":", "\n", "                    ", "continue", "\n", "", "x1", ",", "y1", "=", "asnumpy", "(", "self", ".", "states", "[", "\"prev_map_position\"", "]", "[", "i", "]", ")", ".", "tolist", "(", ")", "\n", "x2", ",", "y2", "=", "asnumpy", "(", "self", ".", "states", "[", "\"curr_map_position\"", "]", "[", "i", "]", ")", ".", "tolist", "(", ")", "\n", "t2", "=", "global_pose", "[", "i", ",", "2", "]", ".", "item", "(", ")", "-", "math", ".", "pi", "/", "2", "\n", "if", "abs", "(", "x1", "-", "x2", ")", "<", "1", "and", "abs", "(", "y1", "-", "y2", ")", "<", "1", ":", "\n", "                    ", "self", ".", "states", "[", "\"col_width\"", "]", "[", "i", "]", "+=", "2", "\n", "self", ".", "states", "[", "\"col_width\"", "]", "[", "i", "]", "=", "min", "(", "self", ".", "states", "[", "\"col_width\"", "]", "[", "i", "]", ",", "9", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "states", "[", "\"col_width\"", "]", "[", "i", "]", "=", "1", "\n", "", "dist_trav_i", "=", "math", ".", "sqrt", "(", "(", "x1", "-", "x2", ")", "**", "2", "+", "(", "y1", "-", "y2", ")", "**", "2", ")", "*", "s", "\n", "# Add an obstacle infront of the agent if a collision happens", "\n", "if", "dist_trav_i", "<", "0.7", "*", "forward_step", ":", "# Collision", "\n", "                    ", "length", "=", "2", "\n", "width", "=", "int", "(", "self", ".", "states", "[", "\"col_width\"", "]", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "buf", "=", "3", "\n", "cmH", ",", "cmW", "=", "self", ".", "states", "[", "\"collision_map\"", "]", "[", "i", "]", ".", "shape", "\n", "for", "j", "in", "range", "(", "length", ")", ":", "\n", "                        ", "for", "k", "in", "range", "(", "width", ")", ":", "\n", "                            ", "wx", "=", "(", "\n", "x2", "\n", "+", "(", "(", "j", "+", "buf", ")", "*", "math", ".", "cos", "(", "t2", ")", ")", "\n", "+", "(", "(", "k", "-", "width", "/", "2", ")", "*", "math", ".", "sin", "(", "t2", ")", ")", "\n", ")", "\n", "wy", "=", "(", "\n", "y2", "\n", "+", "(", "(", "j", "+", "buf", ")", "*", "math", ".", "sin", "(", "t2", ")", ")", "\n", "-", "(", "(", "k", "-", "width", "/", "2", ")", "*", "math", ".", "cos", "(", "t2", ")", ")", "\n", ")", "\n", "wx", ",", "wy", "=", "int", "(", "wx", ")", ",", "int", "(", "wy", ")", "\n", "if", "wx", "<", "0", "or", "wx", ">=", "cmW", "or", "wy", "<", "0", "or", "wy", ">=", "cmH", ":", "\n", "                                ", "continue", "\n", "", "self", ".", "states", "[", "\"collision_map\"", "]", "[", "i", ",", "wy", ",", "wx", "]", "=", "1", "\n", "# Update visitation maps", "\n", "", "", "", "", "", "for", "i", "in", "range", "(", "self", ".", "nplanners", ")", ":", "\n", "            ", "mx", ",", "my", "=", "asnumpy", "(", "self", ".", "states", "[", "\"curr_map_position\"", "]", "[", "i", "]", ")", ".", "tolist", "(", ")", "\n", "mx", ",", "my", "=", "int", "(", "mx", ")", ",", "int", "(", "my", ")", "\n", "self", ".", "states", "[", "\"visited_map\"", "]", "[", "i", ",", "my", "-", "2", ":", "my", "+", "3", ",", "mx", "-", "2", ":", "mx", "+", "3", "]", "=", "1", "\n", "# ===================== Compute rewards for previous action ===================", "\n", "", "local_rewards", "=", "self", ".", "_compute_local_rewards", "(", "ep_step", ",", "s", ")", ".", "to", "(", "device", ")", "\n", "# ====================== Global policy action selection =======================", "\n", "SAMPLE_GLOBAL_GOAL_FLAG", "=", "ep_step", "%", "self", ".", "goal_interval", "==", "0", "\n", "# Sample global goal if needed", "\n", "if", "SAMPLE_GLOBAL_GOAL_FLAG", ":", "\n", "            ", "global_policy_inputs", "=", "self", ".", "_create_global_policy_inputs", "(", "\n", "global_map", ",", "visited_states", ",", "self", ".", "states", "[", "\"curr_map_position\"", "]", "\n", ")", "\n", "# diff_policy baseline add", "\n", "if", "hasattr", "(", "self", ".", "config", ".", "GLOBAL_POLICY", ",", "\"difference_baseline_explorer\"", ")", ":", "\n", "                ", "if", "self", ".", "config", ".", "GLOBAL_POLICY", ".", "difference_baseline_explorer", ":", "\n", "                    ", "update_dict", "=", "{", "\"diff_scores\"", ":", "prev_state_estimates", ".", "pop", "(", "\"diff_scores\"", ")", "}", "\n", "global_policy_inputs", ".", "update", "(", "update_dict", ")", "\n", "\n", "", "", "(", "\n", "global_value", ",", "\n", "global_action", ",", "\n", "global_action_log_probs", ",", "\n", "_", ",", "\n", ")", "=", "self", ".", "global_policy", ".", "act", "(", "global_policy_inputs", ",", "None", ",", "None", ",", "None", ")", "\n", "# Convert action to location (row-major format)", "\n", "G", "=", "self", ".", "global_policy", ".", "G", "\n", "global_action_map_x", "=", "torch", ".", "fmod", "(", "\n", "global_action", ".", "squeeze", "(", "1", ")", ",", "G", "\n", ")", ".", "float", "(", ")", "# (bs, )", "\n", "global_action_map_y", "=", "(", "global_action", ".", "squeeze", "(", "1", ")", ".", "float", "(", ")", "/", "G", ")", ".", "float", "(", ")", "# (bs, )", "\n", "# Convert to MxM map coordinates", "\n", "global_action_map_x", "=", "global_action_map_x", "*", "M", "/", "G", "\n", "global_action_map_y", "=", "global_action_map_y", "*", "M", "/", "G", "\n", "\n", "if", "self", ".", "config", ".", "fixed_global_goal", ":", "\n", "                ", "starting_point", "=", "(", "M", "-", "1", ")", "//", "2", "\n", "global_action_map_x", "[", "0", "]", "=", "starting_point", "+", "(", "self", ".", "config", ".", "fixed_delta_x", "/", "s", ")", "\n", "global_action_map_y", "[", "0", "]", "=", "starting_point", "-", "(", "self", ".", "config", ".", "fixed_delta_y", "/", "s", ")", "\n", "\n", "", "global_action_map_xy", "=", "torch", ".", "stack", "(", "\n", "[", "global_action_map_x", ",", "global_action_map_y", "]", ",", "dim", "=", "1", "\n", ")", "\n", "# Set the goal (bs, 2) --- (x, y) in map image coordinates", "\n", "self", ".", "states", "[", "\"curr_global_goals\"", "]", "=", "global_action_map_xy", "\n", "# Update the current map to prev_map_states in order to facilitate", "\n", "# future reward computation.", "\n", "self", ".", "states", "[", "\"prev_map_states\"", "]", "=", "global_map", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "global_policy_inputs", "=", "None", "\n", "global_value", "=", "None", "\n", "global_action", "=", "None", "\n", "global_action_log_probs", "=", "None", "\n", "# ======================= Local policy action selection =======================", "\n", "# Initialize states at t=0", "\n", "", "if", "ep_step", "==", "0", ":", "\n", "            ", "self", ".", "states", "[", "\"curr_local_goals\"", "]", "=", "torch", ".", "zeros", "(", "self", ".", "nplanners", ",", "2", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "states", "[", "\"local_shortest_path_length\"", "]", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "nplanners", ",", "1", "\n", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "states", "[", "\"local_path_length\"", "]", "=", "torch", ".", "zeros", "(", "self", ".", "nplanners", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "# Should local goals be sampled now?", "\n", "", "if", "SAMPLE_GLOBAL_GOAL_FLAG", ":", "\n", "            ", "if", "self", ".", "config", ".", "MAPPER", ".", "debug_log", ":", "\n", "                ", "print", "(", "'NEW LOCAL GOAL SAMPLED!'", ")", "\n", "# Condition 1: A new global goal was sampled", "\n", "", "SAMPLE_LOCAL_GOAL_FLAGS", "=", "[", "1", "for", "_", "in", "range", "(", "self", ".", "nplanners", ")", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "config", ".", "MAPPER", ".", "debug_log", ":", "\n", "                ", "print", "(", "'REACHING LOCAL GOAL:'", ")", "\n", "print", "(", "'Distance to Goal: {}'", ".", "format", "(", "self", ".", "states", "[", "\"curr_dist2localgoal\"", "]", ")", ")", "\n", "print", "(", "'Goal Position: {}'", ".", "format", "(", "self", ".", "states", "[", "\"curr_local_goals\"", "]", ")", ")", "\n", "print", "(", "'Agent Position: {}'", ".", "format", "(", "map_xy", ")", ")", "\n", "# Condition 2 (a): The previous local goal was reached", "\n", "", "prev_goal_reached", "=", "(", "\n", "self", ".", "states", "[", "\"curr_dist2localgoal\"", "]", "<", "self", ".", "goal_success_radius", "\n", ")", "\n", "# Condition 2 (b): The previous local goal is occupied.", "\n", "goals", "=", "self", ".", "states", "[", "\"curr_local_goals\"", "]", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "prev_gcells", "=", "global_map", "[", "\n", "torch", ".", "arange", "(", "0", ",", "goals", ".", "shape", "[", "0", "]", ")", ".", "long", "(", ")", ",", ":", ",", "goals", "[", ":", ",", "1", "]", ",", "goals", "[", ":", ",", "0", "]", "\n", "]", "\n", "prev_goal_occupied", "=", "(", "prev_gcells", "[", ":", ",", "0", "]", ">", "self", ".", "config", ".", "thresh_obstacle", ")", "&", "(", "\n", "prev_gcells", "[", ":", ",", "1", "]", ">", "self", ".", "config", ".", "thresh_explored", "\n", ")", "\n", "SAMPLE_LOCAL_GOAL_FLAGS", "=", "asnumpy", "(", "\n", "(", "prev_goal_reached", "|", "prev_goal_occupied", ")", ".", "float", "(", ")", "\n", ")", ".", "tolist", "(", ")", "\n", "# Execute planner and compute local goals", "\n", "", "self", ".", "_compute_plans_and_local_goals", "(", "\n", "global_map", ",", "self", ".", "states", "[", "\"curr_map_position\"", "]", ",", "SAMPLE_LOCAL_GOAL_FLAGS", "\n", ")", "\n", "# Update state variables to account for new local goals", "\n", "self", ".", "states", "[", "\"curr_dist2localgoal\"", "]", "=", "self", ".", "_compute_dist2localgoal", "(", "\n", "global_map", ",", "\n", "self", ".", "states", "[", "\"curr_map_position\"", "]", ",", "\n", "self", ".", "states", "[", "\"curr_local_goals\"", "]", ",", "\n", ")", "\n", "\n", "# Sample action with local policy", "\n", "local_masks", "=", "1", "-", "torch", ".", "Tensor", "(", "SAMPLE_LOCAL_GOAL_FLAGS", ")", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "1", ")", "\n", "recurrent_hidden_states", "=", "prev_state_estimates", "[", "\"recurrent_hidden_states\"", "]", "\n", "relative_goals", "=", "self", ".", "_compute_relative_local_goals", "(", "global_pose", ",", "M", ",", "s", ")", "\n", "local_policy_inputs", "=", "{", "\n", "\"rgb_at_t\"", ":", "observations", "[", "\"rgb\"", "]", ",", "\n", "\"goal_at_t\"", ":", "relative_goals", ",", "\n", "\"t\"", ":", "ep_time", ",", "\n", "}", "\n", "outputs", "=", "self", ".", "local_policy", ".", "act", "(", "\n", "local_policy_inputs", ",", "\n", "recurrent_hidden_states", ",", "\n", "None", ",", "\n", "local_masks", ",", "\n", "deterministic", "=", "deterministic", ",", "\n", ")", "\n", "(", "\n", "local_value", ",", "\n", "local_action", ",", "\n", "local_action_log_probs", ",", "\n", "recurrent_hidden_states", ",", "\n", ")", "=", "outputs", "\n", "# If imitation learning is used, also sample the ground-truth action to take", "\n", "if", "\"gt_global_map\"", "in", "observations", ".", "keys", "(", ")", ":", "\n", "            ", "gt_global_map", "=", "observations", "[", "\"gt_global_map\"", "]", "# (bs, 2, M, M)", "\n", "gt_global_pose", "=", "observations", "[", "\"pose_gt\"", "]", "# (bs, 3)", "\n", "relative_goals_aug", "=", "torch", ".", "cat", "(", "\n", "[", "relative_goals", ",", "torch", ".", "zeros_like", "(", "relative_goals", "[", ":", ",", "0", ":", "1", "]", ")", "]", ",", "dim", "=", "1", "\n", ")", "\n", "gt_goals", "=", "add_pose", "(", "gt_global_pose", ",", "relative_goals_aug", ")", "# (bs, 3)", "\n", "gt_actions", "=", "self", ".", "_compute_gt_local_action", "(", "\n", "gt_global_map", ",", "gt_global_pose", ",", "gt_goals", ",", "M", ",", "s", "\n", ")", "# (bs, 1)", "\n", "gt_actions", "=", "gt_actions", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "gt_actions", "=", "torch", ".", "zeros_like", "(", "local_action", ")", "\n", "# ============================== Create output dicts ==========================", "\n", "", "state_estimates", "=", "{", "\n", "\"recurrent_hidden_states\"", ":", "recurrent_hidden_states", ",", "\n", "\"map_states\"", ":", "mapper_outputs", "[", "\"mt\"", "]", ",", "\n", "\"visited_states\"", ":", "visited_states", ",", "\n", "\"pose_estimates\"", ":", "global_pose", ",", "\n", "}", "\n", "local_policy_outputs", "=", "{", "\n", "\"values\"", ":", "local_value", ",", "\n", "\"actions\"", ":", "local_action", ",", "\n", "\"action_log_probs\"", ":", "local_action_log_probs", ",", "\n", "\"local_masks\"", ":", "local_masks", ",", "\n", "\"gt_actions\"", ":", "gt_actions", ",", "\n", "}", "\n", "global_policy_outputs", "=", "{", "\n", "\"values\"", ":", "global_value", ",", "\n", "\"actions\"", ":", "global_action", ",", "\n", "\"action_log_probs\"", ":", "global_action_log_probs", ",", "\n", "}", "\n", "rewards", "=", "{", "\n", "\"local_rewards\"", ":", "local_rewards", ",", "\n", "}", "\n", "mapper_outputs", ".", "update", "(", "{", "'curr_map_position'", ":", "curr_map_position", "}", ")", "\n", "return", "(", "\n", "mapper_inputs", ",", "\n", "local_policy_inputs", ",", "\n", "global_policy_inputs", ",", "\n", "mapper_outputs", ",", "\n", "local_policy_outputs", ",", "\n", "global_policy_outputs", ",", "\n", "state_estimates", ",", "\n", "rewards", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.to": [[764, 768], ["ans.ActiveNeuralSLAMExplorer.mapper.to", "ans.ActiveNeuralSLAMExplorer.global_policy.to", "ans.ActiveNeuralSLAMExplorer.local_policy.to"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "mapper", ".", "to", "(", "device", ")", "\n", "self", ".", "global_policy", ".", "to", "(", "device", ")", "\n", "self", ".", "local_policy", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.to_ddp": [[769, 776], ["torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "ans.ActiveNeuralSLAMExplorer.global_policy.to_ddp", "ans.ActiveNeuralSLAMExplorer.local_policy.to_ddp", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.to_ddp", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.to_ddp"], ["", "def", "to_ddp", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "use_ddp", ":", "\n", "            ", "self", ".", "pg1", "=", "torch", ".", "distributed", ".", "new_group", "(", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", ")", "\n", "self", ".", "mapper", "=", "DistributedDataParallel", "(", "self", ".", "mapper", ",", "process_group", "=", "self", ".", "pg1", ",", "\n", "device_ids", "=", "self", ".", "config", ".", "gpu_ids", ",", "output_device", "=", "self", ".", "config", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "global_policy", ".", "to_ddp", "(", "device_ids", "=", "self", ".", "config", ".", "gpu_ids", ",", "output_device", "=", "self", ".", "config", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "local_policy", ".", "to_ddp", "(", "device_ids", "=", "self", ".", "config", ".", "gpu_ids", ",", "output_device", "=", "self", ".", "config", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.train": [[777, 781], ["ans.ActiveNeuralSLAMExplorer.mapper.train", "ans.ActiveNeuralSLAMExplorer.global_policy.train", "ans.ActiveNeuralSLAMExplorer.local_policy.train"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.train", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.train", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.train"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "mapper", ".", "train", "(", ")", "\n", "self", ".", "global_policy", ".", "train", "(", ")", "\n", "self", ".", "local_policy", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.eval": [[782, 786], ["ans.ActiveNeuralSLAMExplorer.mapper.eval", "ans.ActiveNeuralSLAMExplorer.global_policy.eval", "ans.ActiveNeuralSLAMExplorer.local_policy.eval"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.eval", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.eval", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "mapper", ".", "eval", "(", ")", "\n", "self", ".", "global_policy", ".", "eval", "(", ")", "\n", "self", ".", "local_policy", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters": [[787, 792], ["itertools.chain", "ans.ActiveNeuralSLAMExplorer.mapper.parameters", "ans.ActiveNeuralSLAMExplorer.global_policy.parameters", "ans.ActiveNeuralSLAMExplorer.local_policy.parameters"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters"], ["", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "chain", "(", "\n", "self", ".", "mapper", ".", "parameters", "(", ")", ",", "\n", "self", ".", "global_policy", ".", "parameters", "(", ")", ",", "\n", "self", ".", "local_policy", ".", "parameters", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.state_dict": [[794, 799], ["ans.ActiveNeuralSLAMExplorer.mapper.state_dict", "ans.ActiveNeuralSLAMExplorer.global_policy.state_dict", "ans.ActiveNeuralSLAMExplorer.local_policy.state_dict"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"mapper\"", ":", "self", ".", "mapper", ".", "state_dict", "(", ")", ",", "\n", "\"global_policy\"", ":", "self", ".", "global_policy", ".", "state_dict", "(", ")", ",", "\n", "\"local_policy\"", ":", "self", ".", "local_policy", ".", "state_dict", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.load_state_dict": [[801, 805], ["ans.ActiveNeuralSLAMExplorer.mapper.load_state_dict", "ans.ActiveNeuralSLAMExplorer.global_policy.load_state_dict", "ans.ActiveNeuralSLAMExplorer.local_policy.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "mapper", ".", "load_state_dict", "(", "state_dict", "[", "\"mapper\"", "]", ")", "\n", "self", ".", "global_policy", ".", "load_state_dict", "(", "state_dict", "[", "\"global_policy\"", "]", ")", "\n", "self", ".", "local_policy", ".", "load_state_dict", "(", "state_dict", "[", "\"local_policy\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer._compute_gt_local_action": [[806, 870], ["occant_utils.common.convert_world2map", "occant_utils.common.convert_world2map", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "max", "occant_utils.common.crop_map", "ans.ActiveNeuralSLAMExplorer._process_maps", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "einops.asnumpy().astype", "einops.asnumpy().astype", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "ans.ActiveNeuralSLAMExplorer.planner.plan", "math.radians", "range", "torch.Tensor().unsqueeze().long", "torch.Tensor().unsqueeze().long", "torch.Tensor().unsqueeze().long", "torch.Tensor().unsqueeze().long", "int", "int", "min", "map_xy_np[].tolist", "math.atan2", "math.atan2", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "einops.asnumpy", "einops.asnumpy", "range", "gt_actions.append", "int", "agent_world_xyt[].item", "math.sin", "math.cos", "abs", "gt_actions.append", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "random.randint", "len", "gt_actions.append", "gt_actions.append", "torch.max", "torch.max", "torch.max", "torch.max", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.convert_world2map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.convert_world2map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.crop_map", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._process_maps", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerSequential.plan"], ["", "def", "_compute_gt_local_action", "(", "\n", "self", ",", "global_map", ",", "agent_world_xyt", ",", "goal_world_xyt", ",", "M", ",", "s", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Estimate the shortest-path action from agent position to goal position.\n        \"\"\"", "\n", "agent_map_xy", "=", "convert_world2map", "(", "agent_world_xyt", ",", "(", "M", ",", "M", ")", ",", "s", ")", "\n", "goal_map_xy", "=", "convert_world2map", "(", "goal_world_xyt", ",", "(", "M", ",", "M", ")", ",", "s", ")", "\n", "# ============ Crop a region covering agent_map_xy and goal_map_xy ============", "\n", "abs_delta_xy", "=", "torch", ".", "abs", "(", "agent_map_xy", "-", "goal_map_xy", ")", "\n", "S", "=", "max", "(", "int", "(", "torch", ".", "max", "(", "abs_delta_xy", ")", ".", "item", "(", ")", ")", ",", "80", ")", "\n", "old_center_xy", "=", "(", "agent_map_xy", "+", "goal_map_xy", ")", "//", "2", "# (bs, 2)", "\n", "cropped_global_map", "=", "crop_map", "(", "global_map", ",", "old_center_xy", ",", "int", "(", "S", ")", ")", "\n", "global_map_np", "=", "self", ".", "_process_maps", "(", "cropped_global_map", ")", "# (bs, M, M)", "\n", "new_center_xy", "=", "torch", ".", "zeros_like", "(", "old_center_xy", ")", "\n", "new_center_xy", "[", ":", ",", "0", "]", "=", "global_map_np", ".", "shape", "[", "2", "]", "//", "2", "\n", "new_center_xy", "[", ":", ",", "1", "]", "=", "global_map_np", ".", "shape", "[", "1", "]", "//", "2", "\n", "# ================ Transform points to new coordinate system ==================", "\n", "new_agent_map_xy", "=", "agent_map_xy", "+", "new_center_xy", "-", "old_center_xy", "\n", "new_goal_map_xy", "=", "goal_map_xy", "+", "new_center_xy", "-", "old_center_xy", "\n", "map_xy_np", "=", "asnumpy", "(", "new_agent_map_xy", ")", ".", "astype", "(", "np", ".", "int32", ")", "# (bs, 2)", "\n", "goal_xy_np", "=", "asnumpy", "(", "new_goal_map_xy", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "# Ensure that points do not go outside map limits", "\n", "map_W", "=", "global_map_np", ".", "shape", "[", "2", "]", "\n", "map_H", "=", "global_map_np", ".", "shape", "[", "1", "]", "\n", "map_xy_np", "[", ":", ",", "0", "]", "=", "np", ".", "clip", "(", "map_xy_np", "[", ":", ",", "0", "]", ",", "0", ",", "map_W", "-", "1", ")", "\n", "map_xy_np", "[", ":", ",", "1", "]", "=", "np", ".", "clip", "(", "map_xy_np", "[", ":", ",", "1", "]", ",", "0", ",", "map_H", "-", "1", ")", "\n", "goal_xy_np", "[", ":", ",", "0", "]", "=", "np", ".", "clip", "(", "goal_xy_np", "[", ":", ",", "0", "]", ",", "0", ",", "map_W", "-", "1", ")", "\n", "goal_xy_np", "[", ":", ",", "1", "]", "=", "np", ".", "clip", "(", "goal_xy_np", "[", ":", ",", "1", "]", ",", "0", ",", "map_H", "-", "1", ")", "\n", "sample_flag", "=", "[", "1.0", "for", "_", "in", "range", "(", "self", ".", "nplanners", ")", "]", "\n", "# Compute plan", "\n", "plans_xy", "=", "self", ".", "planner", ".", "plan", "(", "global_map_np", ",", "map_xy_np", ",", "goal_xy_np", ",", "sample_flag", ")", "\n", "# ===================== Sample an action to a nearby point ====================", "\n", "# 0 is forward, 1 is left, 2 is right", "\n", "gt_actions", "=", "[", "]", "\n", "forward_step", "=", "self", ".", "config", ".", "LOCAL_POLICY", ".", "AGENT_DYNAMICS", ".", "forward_step", "\n", "turn_angle", "=", "math", ".", "radians", "(", "self", ".", "config", ".", "LOCAL_POLICY", ".", "AGENT_DYNAMICS", ".", "turn_angle", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "nplanners", ")", ":", "\n", "            ", "path_x", ",", "path_y", "=", "plans_xy", "[", "i", "]", "\n", "# If planning failed, sample random action", "\n", "if", "path_x", "is", "None", ":", "\n", "                ", "gt_actions", ".", "append", "(", "random", ".", "randint", "(", "0", ",", "2", ")", ")", "\n", "continue", "\n", "# Plan to navigate to a point 0.5 meters away", "\n", "", "dl", "=", "min", "(", "int", "(", "0.5", "/", "s", ")", ",", "len", "(", "path_x", ")", "-", "1", ")", "\n", "# The path is in reverse order", "\n", "goal_x", ",", "goal_y", "=", "path_x", "[", "-", "dl", "]", ",", "path_y", "[", "-", "dl", "]", "\n", "agent_x", ",", "agent_y", "=", "map_xy_np", "[", "i", "]", ".", "tolist", "(", ")", "\n", "# Decide action", "\n", "agent_heading", "=", "agent_world_xyt", "[", "i", ",", "2", "]", ".", "item", "(", ")", "-", "math", ".", "pi", "/", "2", "\n", "reqd_heading", "=", "math", ".", "atan2", "(", "goal_y", "-", "agent_y", ",", "goal_x", "-", "agent_x", ")", "\n", "diff_angle", "=", "reqd_heading", "-", "agent_heading", "\n", "diff_angle", "=", "math", ".", "atan2", "(", "math", ".", "sin", "(", "diff_angle", ")", ",", "math", ".", "cos", "(", "diff_angle", ")", ")", "\n", "# Move forward if facing the correct direction", "\n", "if", "abs", "(", "diff_angle", ")", "<", "1.5", "*", "turn_angle", ":", "\n", "                ", "gt_actions", ".", "append", "(", "0", ")", "\n", "# Turn left if the goal is to the left", "\n", "", "elif", "diff_angle", "<", "0", ":", "\n", "                ", "gt_actions", ".", "append", "(", "1", ")", "\n", "# Turn right otherwise", "\n", "", "else", ":", "\n", "                ", "gt_actions", ".", "append", "(", "2", ")", "\n", "\n", "", "", "return", "torch", ".", "Tensor", "(", "gt_actions", ")", ".", "unsqueeze", "(", "1", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer._compute_local_rewards": [[871, 892], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "spl.cpu", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "_compute_local_rewards", "(", "\n", "self", ",", "ep_step", ",", "s", ",", "\n", ")", ":", "\n", "        ", "local_rewards", "=", "torch", ".", "zeros", "(", "self", ".", "nplanners", ",", "1", ")", "\n", "if", "ep_step", "==", "0", ":", "\n", "            ", "return", "local_rewards", "\n", "# Reward reduction in geodesic distance to the target", "\n", "", "p_d2g", "=", "self", ".", "states", "[", "\"prev_dist2localgoal\"", "]", "\n", "c_d2g", "=", "self", ".", "states", "[", "\"curr_dist2localgoal\"", "]", "\n", "local_rewards", "+=", "(", "p_d2g", "-", "c_d2g", ")", ".", "unsqueeze", "(", "1", ")", ".", "cpu", "(", ")", "\n", "# Add slack reward", "\n", "local_rewards", "+=", "self", ".", "config", ".", "local_slack_reward", "\n", "# If local goal is reached, then provide an SPL reward", "\n", "success_flag", "=", "(", "c_d2g", "<", "self", ".", "goal_success_radius", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "L", "=", "self", ".", "states", "[", "\"local_shortest_path_length\"", "]", "\n", "P", "=", "self", ".", "states", "[", "\"local_path_length\"", "]", "\n", "spl", "=", "success_flag", "*", "L", "/", "(", "torch", ".", "max", "(", "L", ",", "P", ")", "+", "1e-8", ")", "\n", "local_rewards", "+=", "spl", ".", "cpu", "(", ")", "\n", "# Store variables for debugging", "\n", "self", ".", "_spl_reward", "=", "spl", "\n", "return", "local_rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer._update_state_visitation": [[893, 903], ["agent_map_xy[].long", "agent_map_xy[].long"], "methods", ["None"], ["", "def", "_update_state_visitation", "(", "self", ",", "visited_states", ",", "agent_map_xy", ")", ":", "\n", "        ", "\"\"\"\n        visited_states - (bs, 1, V, V) tensor with 0s for unvisited locations, 1s for visited locations\n        agent_map_xy - (bs, 2) agent's current position on the map\n        \"\"\"", "\n", "agent_map_x", "=", "agent_map_xy", "[", ":", ",", "0", "]", ".", "long", "(", ")", "# (bs, )", "\n", "agent_map_y", "=", "agent_map_xy", "[", ":", ",", "1", "]", ".", "long", "(", ")", "# (bs, )", "\n", "visited_states", "[", ":", ",", "0", ",", "agent_map_y", ",", "agent_map_x", "]", "=", "1", "\n", "\n", "return", "visited_states", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer._compute_plans_and_local_goals": [[904, 990], ["ans.ActiveNeuralSLAMExplorer._compute_plans", "range", "numpy.clip().item", "numpy.clip().item", "agent_map_xy[].tolist", "min", "math.sqrt", "int", "numpy.array", "numpy.linalg.norm().sum().item", "numpy.clip", "numpy.clip", "[].item", "ans.ActiveNeuralSLAMExplorer._sample_random_explored_towards_goal", "ans.ActiveNeuralSLAMExplorer._sample_random_towards_goal", "einops.asnumpy().tolist", "len", "einops.asnumpy().tolist", "einops.asnumpy().tolist", "einops.asnumpy().tolist", "einops.asnumpy().tolist", "[].item", "ans.ActiveNeuralSLAMExplorer._sample_random_explored", "ans.ActiveNeuralSLAMExplorer._sample_random_near_agent", "numpy.linalg.norm().sum", "einops.asnumpy", "einops.asnumpy().tolist", "einops.asnumpy().tolist", "einops.asnumpy", "einops.asnumpy", "einops.asnumpy", "einops.asnumpy", "numpy.linalg.norm", "einops.asnumpy", "einops.asnumpy"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._compute_plans", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._sample_random_explored_towards_goal", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._sample_random_towards_goal", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._sample_random_explored", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMBase._sample_random_near_agent"], ["", "def", "_compute_plans_and_local_goals", "(", "\n", "self", ",", "global_map", ",", "agent_map_xy", ",", "SAMPLE_LOCAL_GOAL_FLAGS", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        global_map - (bs, 2, V, V) tensor\n        agent_map_xy - (bs, 2) agent's current position on the map\n        \"\"\"", "\n", "s", "=", "self", ".", "map_scale", "\n", "goal_map_xy", "=", "self", ".", "states", "[", "\"curr_global_goals\"", "]", "\n", "plans_xy", "=", "self", ".", "_compute_plans", "(", "\n", "global_map", ",", "\n", "agent_map_xy", ",", "\n", "goal_map_xy", ",", "\n", "SAMPLE_LOCAL_GOAL_FLAGS", ",", "\n", "cache_map", "=", "True", ",", "\n", "crop_map_flag", "=", "self", ".", "config", ".", "crop_map_for_planning", ",", "\n", ")", "\n", "# ========================= Sample a local goal =======================", "\n", "# Sample a local goal and measure the shortest path distance to that", "\n", "# goal according to the current map.", "\n", "# Update step counts for sample_random_explored calls", "\n", "self", ".", "states", "[", "\"sample_random_explored_timer\"", "]", "+=", "1", "\n", "# Pick a local goal to reach with the local policy", "\n", "for", "i", "in", "range", "(", "self", ".", "nplanners", ")", ":", "\n", "            ", "if", "SAMPLE_LOCAL_GOAL_FLAGS", "[", "i", "]", "!=", "1", ":", "\n", "                ", "continue", "\n", "", "path_x", ",", "path_y", "=", "plans_xy", "[", "i", "]", "\n", "# If planning failed, sample random local goal.", "\n", "if", "path_x", "is", "None", ":", "\n", "# Note: This is an expensive call, especially when the map is messy", "\n", "# and planning keeps failing. Call sample_random_explored only after", "\n", "# so many steps elapsed since the last call.", "\n", "                ", "if", "self", ".", "config", ".", "recovery_heuristic", "==", "\"random_explored_towards_goal\"", ":", "\n", "                    ", "if", "self", ".", "states", "[", "\"sample_random_explored_timer\"", "]", "[", "i", "]", ".", "item", "(", ")", ">", "10", ":", "\n", "                        ", "goal_x", ",", "goal_y", "=", "self", ".", "_sample_random_explored_towards_goal", "(", "\n", "global_map", "[", "i", "]", ",", "\n", "asnumpy", "(", "agent_map_xy", "[", "i", "]", ")", ".", "tolist", "(", ")", ",", "\n", "asnumpy", "(", "goal_map_xy", "[", "i", "]", ")", ".", "tolist", "(", ")", ",", "\n", "s", ",", "\n", ")", "\n", "# Reset count", "\n", "self", ".", "states", "[", "\"sample_random_explored_timer\"", "]", "[", "i", "]", "=", "0", "\n", "", "else", ":", "\n", "                        ", "goal_x", ",", "goal_y", "=", "self", ".", "_sample_random_towards_goal", "(", "\n", "global_map", "[", "i", "]", ",", "\n", "asnumpy", "(", "agent_map_xy", "[", "i", "]", ")", ".", "tolist", "(", ")", ",", "\n", "asnumpy", "(", "goal_map_xy", "[", "i", "]", ")", ".", "tolist", "(", ")", ",", "\n", "s", ",", "\n", ")", "\n", "goal_x", ",", "goal_y", "=", "asnumpy", "(", "agent_map_xy", "[", "i", "]", ")", ".", "tolist", "(", ")", "\n", "", "", "elif", "self", ".", "config", ".", "recovery_heuristic", "==", "\"random_explored\"", ":", "\n", "                    ", "if", "self", ".", "states", "[", "\"sample_random_explored_timer\"", "]", "[", "i", "]", ".", "item", "(", ")", ">", "10", ":", "\n", "                        ", "goal_x", ",", "goal_y", "=", "self", ".", "_sample_random_explored", "(", "\n", "global_map", "[", "i", "]", ",", "asnumpy", "(", "agent_map_xy", "[", "i", "]", ")", ".", "tolist", "(", ")", ",", "s", "\n", ")", "\n", "# Reset count", "\n", "self", ".", "states", "[", "\"sample_random_explored_timer\"", "]", "[", "i", "]", "=", "0", "\n", "", "else", ":", "\n", "                        ", "goal_x", ",", "goal_y", "=", "self", ".", "_sample_random_near_agent", "(", "\n", "global_map", "[", "i", "]", ",", "asnumpy", "(", "agent_map_xy", "[", "i", "]", ")", ".", "tolist", "(", ")", ",", "s", "\n", ")", "\n", "# goal_x, goal_y = asnumpy(agent_map_xy[i]).tolist()", "\n", "", "", "else", ":", "\n", "                    ", "raise", "ValueError", "\n", "# When planning fails, default to euclidean distance", "\n", "", "curr_x", ",", "curr_y", "=", "agent_map_xy", "[", "i", "]", ".", "tolist", "(", ")", "\n", "splength", "=", "(", "\n", "math", ".", "sqrt", "(", "(", "goal_x", "-", "curr_x", ")", "**", "2", "+", "(", "goal_y", "-", "curr_y", ")", "**", "2", ")", "*", "s", "\n", ")", "\n", "", "else", ":", "\n", "                ", "dl", "=", "min", "(", "int", "(", "self", ".", "planning_step_mts", "/", "s", ")", ",", "len", "(", "path_x", ")", "-", "1", ")", "\n", "# The path is in reverse order", "\n", "goal_x", ",", "goal_y", "=", "path_x", "[", "-", "dl", "]", ",", "path_y", "[", "-", "dl", "]", "\n", "sp_xy", "=", "np", ".", "array", "(", "[", "path_x", "[", "-", "dl", ":", "]", ",", "path_y", "[", "-", "dl", ":", "]", "]", ")", ".", "T", "# (dl, 2)", "\n", "splength", "=", "(", "\n", "np", ".", "linalg", ".", "norm", "(", "sp_xy", "[", ":", "-", "1", "]", "-", "sp_xy", "[", "1", ":", "]", ",", "axis", "=", "1", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "*", "s", "\n", ")", "\n", "# Ensure goals are within map bounds", "\n", "", "goal_x", "=", "np", ".", "clip", "(", "goal_x", ",", "0", ",", "global_map", "[", "i", "]", ".", "shape", "[", "-", "1", "]", "-", "1", ")", ".", "item", "(", ")", "\n", "goal_y", "=", "np", ".", "clip", "(", "goal_y", ",", "0", ",", "global_map", "[", "i", "]", ".", "shape", "[", "-", "2", "]", "-", "1", ")", ".", "item", "(", ")", "\n", "# Set the local goals as well as the corresponding path length", "\n", "# measures", "\n", "self", ".", "states", "[", "\"curr_local_goals\"", "]", "[", "i", ",", "0", "]", "=", "goal_x", "\n", "self", ".", "states", "[", "\"curr_local_goals\"", "]", "[", "i", ",", "1", "]", "=", "goal_y", "\n", "self", ".", "states", "[", "\"local_shortest_path_length\"", "]", "[", "i", "]", "=", "splength", "\n", "self", ".", "states", "[", "\"local_path_length\"", "]", "[", "i", "]", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer._create_global_policy_inputs": [[991, 1011], ["map_xy[].long", "map_xy[].long", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "_create_global_policy_inputs", "(", "self", ",", "global_map", ",", "visited_states", ",", "map_xy", ")", ":", "\n", "        ", "\"\"\"\n        global_map     - (bs, 2, V, V) - map occupancy, explored states\n        visited_states - (bs, 1, V, V) - agent visitation status on the map\n        map_xy   - (bs, 2) - agent's XY position on the map\n        \"\"\"", "\n", "agent_map_x", "=", "map_xy", "[", ":", ",", "0", "]", ".", "long", "(", ")", "# (bs, )", "\n", "agent_map_y", "=", "map_xy", "[", ":", ",", "1", "]", ".", "long", "(", ")", "# (bs, )", "\n", "agent_position_onehot", "=", "torch", ".", "zeros_like", "(", "visited_states", ")", "\n", "agent_position_onehot", "[", ":", ",", "0", ",", "agent_map_y", ",", "agent_map_x", "]", "=", "1", "\n", "h_t", "=", "torch", ".", "cat", "(", "\n", "[", "global_map", ",", "visited_states", ",", "agent_position_onehot", "]", ",", "dim", "=", "1", "\n", ")", "# (bs, 4, M, M)", "\n", "\n", "global_policy_inputs", "=", "{", "\n", "\"pose_in_map_at_t\"", ":", "map_xy", ",", "\n", "\"map_at_t\"", ":", "h_t", ",", "\n", "}", "\n", "\n", "return", "global_policy_inputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerVector.__init__": [[38, 65], ["zip", "multiprocessing.Process", "p.start", "remote.close", "zip", "multiprocessing.Pipe", "range", "range"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerSequential.close"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "nplanners", "=", "config", ".", "nplanners", "\n", "self", ".", "waiting", "=", "False", "\n", "self", ".", "closed", "=", "False", "\n", "self", ".", "remotes", ",", "self", ".", "work_remotes", "=", "zip", "(", "*", "[", "Pipe", "(", ")", "for", "_", "in", "range", "(", "nplanners", ")", "]", ")", "\n", "self", ".", "ps", "=", "[", "\n", "Process", "(", "\n", "target", "=", "worker", ",", "\n", "args", "=", "(", "\n", "work_remote", ",", "\n", "remote", ",", "\n", "worker_id", ",", "\n", "config", ".", "use_weighted_graph", ",", "\n", "config", ".", "weight_scale", ",", "\n", "config", ".", "weight_niters", ",", "\n", ")", ",", "\n", ")", "\n", "for", "(", "work_remote", ",", "remote", ",", "worker_id", ")", "in", "zip", "(", "\n", "self", ".", "work_remotes", ",", "self", ".", "remotes", ",", "range", "(", "nplanners", ")", "\n", ")", "\n", "]", "\n", "for", "p", "in", "self", ".", "ps", ":", "\n", "            ", "p", ".", "daemon", "=", "True", "\n", "p", ".", "start", "(", ")", "\n", "", "for", "remote", "in", "self", ".", "work_remotes", ":", "\n", "            ", "remote", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerVector.plan_async": [[66, 73], ["planner.AStarPlannerVector._assert_not_closed", "zip", "remote.send"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerSequential._assert_not_closed"], ["", "", "def", "plan_async", "(", "self", ",", "maps", ",", "starts", ",", "goals", ",", "masks", ")", ":", "\n", "        ", "self", ".", "_assert_not_closed", "(", ")", "\n", "for", "remote", ",", "map_", ",", "start", ",", "goal", ",", "mask", "in", "zip", "(", "\n", "self", ".", "remotes", ",", "maps", ",", "starts", ",", "goals", ",", "masks", "\n", ")", ":", "\n", "            ", "remote", ".", "send", "(", "(", "\"plan\"", ",", "(", "map_", ",", "start", ",", "goal", ",", "mask", ",", "self", ".", "config", ".", "allow_diagonal", ")", ")", ")", "\n", "", "self", ".", "waiting", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerVector.plan_wait": [[74, 79], ["planner.AStarPlannerVector._assert_not_closed", "remote.recv"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerSequential._assert_not_closed"], ["", "def", "plan_wait", "(", "self", ")", ":", "\n", "        ", "self", ".", "_assert_not_closed", "(", ")", "\n", "results", "=", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", "\n", "self", ".", "waiting", "=", "False", "\n", "return", "results", "# Planned paths", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerVector.plan": [[80, 83], ["planner.AStarPlannerVector.plan_async", "planner.AStarPlannerVector.plan_wait"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerVector.plan_async", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerVector.plan_wait"], ["", "def", "plan", "(", "self", ",", "maps", ",", "starts", ",", "goals", ",", "masks", ")", ":", "\n", "        ", "self", ".", "plan_async", "(", "maps", ",", "starts", ",", "goals", ",", "masks", ")", "\n", "return", "self", ".", "plan_wait", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerVector.close": [[84, 87], ["remote.send"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "\"close\"", ",", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerVector._assert_not_closed": [[88, 92], ["None"], "methods", ["None"], ["", "", "def", "_assert_not_closed", "(", "self", ")", ":", "\n", "        ", "assert", "(", "\n", "not", "self", ".", "closed", "\n", ")", ",", "\"Trying to operate on an AStarPlannerVector after calling close()\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerSequential.__init__": [[95, 97], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerSequential.plan": [[98, 119], ["zip", "paths.append", "occant_utils.astar_pycpp.pyastar.astar_planner", "occant_utils.astar_pycpp.pyastar.weighted_astar_planner"], "methods", ["None"], ["", "def", "plan", "(", "self", ",", "maps", ",", "starts", ",", "goals", ",", "masks", ")", ":", "\n", "        ", "paths", "=", "[", "]", "\n", "for", "map_", ",", "start", ",", "goal", ",", "mask", "in", "zip", "(", "maps", ",", "starts", ",", "goals", ",", "masks", ")", ":", "\n", "            ", "if", "mask", "==", "1", "and", "not", "self", ".", "config", ".", "use_weighted_graph", ":", "\n", "                ", "path_x", ",", "path_y", "=", "pyastar", ".", "astar_planner", "(", "\n", "map_", ",", "start", ",", "goal", ",", "self", ".", "config", ".", "allow_diagonal", "\n", ")", "\n", "", "elif", "mask", "==", "1", "and", "self", ".", "config", ".", "use_weighted_graph", ":", "\n", "                ", "path_x", ",", "path_y", "=", "pyastar", ".", "weighted_astar_planner", "(", "\n", "map_", ",", "\n", "start", ",", "\n", "goal", ",", "\n", "self", ".", "config", ".", "allow_diagonal", ",", "\n", "self", ".", "config", ".", "weight_scale", ",", "\n", "self", ".", "config", ".", "weight_niters", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "path_x", ",", "path_y", "=", "None", ",", "None", "\n", "", "paths", ".", "append", "(", "(", "path_x", ",", "path_y", ")", ")", "\n", "\n", "", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerSequential.close": [[120, 122], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerSequential._assert_not_closed": [[123, 125], ["None"], "methods", ["None"], ["", "def", "_assert_not_closed", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.worker": [[12, 35], ["parent_remote.close", "remote.recv", "print", "remote.send", "occant_utils.astar_pycpp.pyastar.astar_planner", "remote.close", "occant_utils.astar_pycpp.pyastar.weighted_astar_planner"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerSequential.close", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerSequential.close"], ["def", "worker", "(", "remote", ",", "parent_remote", ",", "worker_id", ",", "use_weighted_graph", ",", "scale", ",", "niters", ")", ":", "\n", "    ", "parent_remote", ".", "close", "(", ")", "\n", "try", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "cmd", ",", "data", "=", "remote", ".", "recv", "(", ")", "\n", "if", "cmd", "==", "\"plan\"", ":", "\n", "                ", "map_", ",", "start", ",", "goal", ",", "mask", ",", "allow_diagonal", "=", "data", "\n", "if", "mask", "==", "1", "and", "not", "use_weighted_graph", ":", "\n", "                    ", "path_x", ",", "path_y", "=", "pyastar", ".", "astar_planner", "(", "\n", "map_", ",", "start", ",", "goal", ",", "allow_diagonal", "\n", ")", "\n", "", "elif", "mask", "==", "1", "and", "use_weighted_graph", ":", "\n", "                    ", "path_x", ",", "path_y", "=", "pyastar", ".", "weighted_astar_planner", "(", "\n", "map_", ",", "start", ",", "goal", ",", "allow_diagonal", ",", "scale", ",", "niters", ",", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "path_x", ",", "path_y", "=", "None", ",", "None", "\n", "", "remote", ".", "send", "(", "(", "path_x", ",", "path_y", ")", ")", "\n", "", "elif", "cmd", "==", "\"close\"", ":", "\n", "                ", "remote", ".", "close", "(", ")", "\n", "break", "\n", "", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "print", "(", "\"AStarPlannerVector worker: got KeyboardInterrupt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.imitation.Imitation.__init__": [[22, 38], ["torch.Module.__init__", "torch.Adam", "torch.Adam", "list", "next", "filter", "actor_critic.parameters", "actor_critic.parameters"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "actor_critic", ",", "lr", "=", "None", ",", "eps", "=", "None", ",", "max_grad_norm", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "actor_critic", "=", "actor_critic", "\n", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "\n", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "actor_critic", ".", "parameters", "(", ")", ")", ")", ",", "\n", "lr", "=", "lr", ",", "\n", "eps", "=", "eps", ",", "\n", ")", "\n", "self", ".", "device", "=", "next", "(", "actor_critic", ".", "parameters", "(", ")", ")", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.imitation.Imitation.forward": [[39, 41], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.imitation.Imitation.update": [[42, 88], ["imitation.flatten_two", "imitation.flatten_two", "imitation.flatten_two", "imitation.Imitation.actor_critic.evaluate_actions", "imitation.Imitation.optimizer.zero_grad", "imitation.Imitation.before_backward", "total_loss.backward", "imitation.Imitation.after_backward", "imitation.Imitation.before_step", "imitation.Imitation.optimizer.step", "imitation.Imitation.after_step", "action_loss.item", "dist_entropy.item", "rollouts.rewards.size", "imitation.flatten_two", "il_action_log_probs.mean", "rollouts.observations.items"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.flatten_two", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.flatten_two", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.flatten_two", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.policy.LocalPolicy.evaluate_actions", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.before_backward", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.after_backward", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.before_step", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.step", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.after_step", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.flatten_two"], ["", "def", "update", "(", "self", ",", "rollouts", ")", ":", "\n", "\n", "        ", "action_loss_epoch", "=", "0.0", "\n", "dist_entropy_epoch", "=", "0.0", "\n", "value_loss_epoch", "=", "0.0", "\n", "\n", "T", ",", "N", "=", "rollouts", ".", "num_steps", ",", "rollouts", ".", "rewards", ".", "size", "(", "1", ")", "\n", "obs_batch", "=", "{", "k", ":", "flatten_two", "(", "v", "[", ":", "-", "1", "]", ")", "for", "k", ",", "v", "in", "rollouts", ".", "observations", ".", "items", "(", ")", "}", "\n", "# These are assumed to be the GT actions to imitate", "\n", "il_actions_batch", "=", "flatten_two", "(", "rollouts", ".", "actions", ")", "\n", "prev_actions_batch", "=", "flatten_two", "(", "rollouts", ".", "prev_actions", ")", "\n", "masks_batch", "=", "flatten_two", "(", "rollouts", ".", "masks", "[", ":", "-", "1", "]", ")", "\n", "recurrent_hidden_states_batch", "=", "rollouts", ".", "recurrent_hidden_states", "[", "0", "]", "\n", "\n", "# Reshape to do in a single forward pass for all steps", "\n", "(", "\n", "_", ",", "\n", "il_action_log_probs", ",", "# (T * N, 1)", "\n", "dist_entropy", ",", "\n", "_", ",", "\n", ")", "=", "self", ".", "actor_critic", ".", "evaluate_actions", "(", "\n", "obs_batch", ",", "\n", "recurrent_hidden_states_batch", ",", "\n", "prev_actions_batch", ",", "\n", "masks_batch", ",", "\n", "il_actions_batch", ",", "\n", ")", "\n", "\n", "# Maximize the probability of selecting GT actions", "\n", "action_loss", "=", "-", "il_action_log_probs", ".", "mean", "(", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", "=", "action_loss", "\n", "\n", "self", ".", "before_backward", "(", "total_loss", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "self", ".", "after_backward", "(", "total_loss", ")", "\n", "\n", "self", ".", "before_step", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "after_step", "(", ")", "\n", "\n", "action_loss_epoch", "+=", "action_loss", ".", "item", "(", ")", "\n", "dist_entropy_epoch", "+=", "dist_entropy", ".", "item", "(", ")", "\n", "\n", "return", "value_loss_epoch", ",", "action_loss_epoch", ",", "dist_entropy_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.imitation.Imitation.before_backward": [[89, 91], ["None"], "methods", ["None"], ["", "def", "before_backward", "(", "self", ",", "loss", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.imitation.Imitation.after_backward": [[92, 94], ["None"], "methods", ["None"], ["", "def", "after_backward", "(", "self", ",", "loss", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.imitation.Imitation.before_step": [[95, 97], ["torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "imitation.Imitation.actor_critic.parameters"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters"], ["", "def", "before_step", "(", "self", ")", ":", "\n", "        ", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "actor_critic", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.imitation.Imitation.after_step": [[98, 100], ["None"], "methods", ["None"], ["", "def", "after_step", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.imitation.Imitation.load_state_dict": [[101, 118], ["imitation.Imitation.state_dict", "loaded_state_dict.items", "imitation.Imitation.update", "super().load_state_dict", "len", "offending_keys.append", "print", "imitation.Imitation.keys"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.update", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "loaded_state_dict", ")", ":", "\n", "        ", "\"\"\"Intelligent state dict assignment. Load state-dict only for keys\n        that are available and have matching parameter sizes.\n        \"\"\"", "\n", "src_state_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "matching_state_dict", "=", "{", "}", "\n", "offending_keys", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "loaded_state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "src_state_dict", ".", "keys", "(", ")", "and", "v", ".", "shape", "==", "src_state_dict", "[", "k", "]", ".", "shape", ":", "\n", "                ", "matching_state_dict", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "offending_keys", ".", "append", "(", "k", ")", "\n", "", "", "src_state_dict", ".", "update", "(", "matching_state_dict", ")", "\n", "super", "(", ")", ".", "load_state_dict", "(", "src_state_dict", ")", "\n", "if", "len", "(", "offending_keys", ")", ">", "0", ":", "\n", "            ", "for", "k", "in", "offending_keys", ":", "\n", "                ", "print", "(", "k", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.imitation.flatten_two": [[13, 15], ["x.view"], "function", ["None"], ["def", "flatten_two", "(", "x", ")", ":", "\n", "    ", "return", "x", ".", "view", "(", "-", "1", ",", "*", "x", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.imitation.unflatten_two": [[17, 19], ["x.view"], "function", ["None"], ["", "def", "unflatten_two", "(", "x", ",", "sh1", ",", "sh2", ")", ":", "\n", "    ", "return", "x", ".", "view", "(", "sh1", ",", "sh2", ",", "*", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.__init__": [[45, 75], ["torch.Module.__init__", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "filter", "mapper.parameters", "len", "next", "mapper.parameters"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "mapper", ",", "\n", "label_id", "=", "\"ego_map_gt_anticipated\"", ",", "\n", "lr", "=", "None", ",", "\n", "eps", "=", "None", ",", "\n", "max_grad_norm", "=", "None", ",", "\n", "pose_loss_coef", "=", "2.0", ",", "\n", "occupancy_anticipator_type", "=", "\"anm_rgb_model\"", ",", "\n", "freeze_projection_unit", "=", "False", ",", "\n", "bias_factor", "=", "10.0", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mapper", "=", "mapper", "\n", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "mapper", ".", "parameters", "(", ")", ")", ",", "lr", "=", "lr", ",", "eps", "=", "eps", ",", "\n", ")", "\n", "mapper_cfg", "=", "self", ".", "mapper", ".", "config", "\n", "if", "mapper_cfg", ".", "use_data_parallel", "and", "len", "(", "mapper_cfg", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "self", ".", "device", "=", "mapper_cfg", ".", "gpu_ids", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "next", "(", "mapper", ".", "parameters", "(", ")", ")", ".", "device", "\n", "", "self", ".", "pose_loss_coef", "=", "pose_loss_coef", "\n", "self", ".", "freeze_projection_unit", "=", "freeze_projection_unit", "\n", "self", ".", "occupancy_anticipator_type", "=", "occupancy_anticipator_type", "\n", "self", ".", "bias_factor", "=", "bias_factor", "\n", "self", ".", "label_id", "=", "label_id", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.forward": [[76, 78], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.update": [[79, 81], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "rollouts", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.before_backward": [[82, 84], ["None"], "methods", ["None"], ["", "def", "before_backward", "(", "self", ",", "loss", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.after_backward": [[85, 87], ["None"], "methods", ["None"], ["", "def", "after_backward", "(", "self", ",", "loss", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.before_step": [[88, 90], ["torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "map_update.MapUpdateBase.parameters"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters"], ["", "def", "before_step", "(", "self", ")", ":", "\n", "        ", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.after_step": [[91, 93], ["None"], "methods", ["None"], ["", "def", "after_step", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict": [[94, 115], ["map_update.MapUpdateBase.state_dict", "loaded_state_dict.items", "map_update.MapUpdateBase.update", "super().load_state_dict", "len", "print", "offending_keys.append", "print", "map_update.MapUpdateBase.keys"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.update", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "loaded_state_dict", ")", ":", "\n", "        ", "\"\"\"Intelligent state dict assignment. Load state-dict only for keys\n        that are available and have matching parameter sizes.\n        \"\"\"", "\n", "src_state_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "matching_state_dict", "=", "{", "}", "\n", "offending_keys", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "loaded_state_dict", ".", "items", "(", ")", ":", "\n", "# bad way to test occant pretrained weights without dataparallel on Mapper_Copy", "\n", "# if '.module' in k:", "\n", "#     k = k.replace('.module', '')", "\n", "            ", "if", "k", "in", "src_state_dict", ".", "keys", "(", ")", "and", "v", ".", "shape", "==", "src_state_dict", "[", "k", "]", ".", "shape", ":", "\n", "                ", "matching_state_dict", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "offending_keys", ".", "append", "(", "k", ")", "\n", "", "", "src_state_dict", ".", "update", "(", "matching_state_dict", ")", "\n", "super", "(", ")", ".", "load_state_dict", "(", "src_state_dict", ")", "\n", "if", "len", "(", "offending_keys", ")", ">", "0", ":", "\n", "            ", "print", "(", "\"=======> MapUpdate: list of offending keys in load_state_dict\"", ")", "\n", "for", "k", "in", "offending_keys", ":", "\n", "                ", "print", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdate.__init__": [[279, 328], ["map_update.MapUpdateBase.__init__", "occant_baselines.rl.policy.MapperDataParallelWrapper", "map_update.MapUpdate.mapper_copy.load_state_dict", "map_update.MapUpdate.mapper_copy.share_memory", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "copy.deepcopy", "map_update.MapUpdate.mapper.state_dict", "map_update.MapUpdate.mapper_copy.to", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "map_update.MapUpdate.mapper_copy.to", "filter", "len", "map_update.MapUpdate.mapper_copy.parameters", "next", "map_update.MapUpdate.mapper.parameters"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.MapLargeRolloutStorageMP.share_memory", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "mapper", ",", "\n", "label_id", "=", "\"ego_map_gt_anticipated\"", ",", "\n", "lr", "=", "None", ",", "\n", "eps", "=", "None", ",", "\n", "max_grad_norm", "=", "None", ",", "\n", "pose_loss_coef", "=", "2.0", ",", "\n", "occupancy_anticipator_type", "=", "\"anm_rgb_model\"", ",", "\n", "freeze_projection_unit", "=", "False", ",", "\n", "num_update_batches", "=", "1", ",", "\n", "batch_size", "=", "32", ",", "\n", "mapper_rollouts", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "mapper", ",", "\n", "label_id", "=", "label_id", ",", "\n", "lr", "=", "lr", ",", "\n", "eps", "=", "eps", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ",", "\n", "pose_loss_coef", "=", "pose_loss_coef", ",", "\n", "occupancy_anticipator_type", "=", "occupancy_anticipator_type", ",", "\n", "freeze_projection_unit", "=", "freeze_projection_unit", ",", "\n", ")", "\n", "\n", "self", ".", "num_update_batches", "=", "num_update_batches", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "mapper_cfg", "=", "self", ".", "mapper", ".", "config", "\n", "\n", "# Make a copy of the mapper and make it shared.", "\n", "self", ".", "mapper_copy", "=", "MapperDataParallelWrapper", "(", "\n", "mapper_cfg", ",", "copy", ".", "deepcopy", "(", "self", ".", "mapper", ".", "projection_unit", ")", ",", "\n", ")", "\n", "self", ".", "mapper_copy", ".", "load_state_dict", "(", "self", ".", "mapper", ".", "state_dict", "(", ")", ")", "\n", "if", "mapper_cfg", ".", "use_data_parallel", "and", "len", "(", "mapper_cfg", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "self", ".", "mapper_copy", ".", "to", "(", "self", ".", "mapper", ".", "config", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "mapper_copy", "=", "nn", ".", "DataParallel", "(", "\n", "self", ".", "mapper_copy", ",", "\n", "device_ids", "=", "self", ".", "mapper", ".", "config", ".", "gpu_ids", ",", "\n", "output_device", "=", "self", ".", "mapper", ".", "config", ".", "gpu_ids", "[", "0", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mapper_copy", ".", "to", "(", "next", "(", "self", ".", "mapper", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "", "self", ".", "mapper_copy", ".", "share_memory", "(", ")", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "mapper_copy", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "lr", ",", "\n", "eps", "=", "eps", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdate.update": [[330, 350], ["map_update.map_update_fn", "map_update.MapUpdate.mapper.load_state_dict", "map_update.MapUpdate.mapper.load_state_dict", "map_update.MapUpdate.mapper_copy.module.state_dict", "map_update.MapUpdate.mapper_copy.state_dict"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.map_update_fn", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.MapUpdateBase.load_state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.state_dict", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.state_dict"], ["", "def", "update", "(", "self", ",", "rollouts", ")", ":", "\n", "        ", "map_update_args", "=", "(", "\n", "self", ".", "mapper_copy", ",", "\n", "rollouts", ",", "\n", "self", ".", "optimizer", ",", "\n", "self", ".", "num_update_batches", ",", "\n", "self", ".", "batch_size", ",", "\n", "self", ".", "freeze_projection_unit", ",", "\n", "self", ".", "bias_factor", ",", "\n", "self", ".", "occupancy_anticipator_type", ",", "\n", "self", ".", "pose_loss_coef", ",", "\n", "self", ".", "max_grad_norm", ",", "\n", "self", ".", "label_id", ",", "\n", ")", "\n", "losses", "=", "map_update_fn", "(", "map_update_args", ")", "\n", "if", "self", ".", "mapper", ".", "config", ".", "use_data_parallel", ":", "\n", "            ", "self", ".", "mapper", ".", "load_state_dict", "(", "self", ".", "mapper_copy", ".", "module", ".", "state_dict", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mapper", ".", "load_state_dict", "(", "self", ".", "mapper_copy", ".", "state_dict", "(", ")", ")", "\n", "", "return", "losses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.simple_mapping_loss_fn": [[22, 34], ["torch.binary_cross_entropy", "torch.binary_cross_entropy"], "function", ["None"], ["def", "simple_mapping_loss_fn", "(", "pt_hat", ",", "pt_gt", ")", ":", "\n", "    ", "occupied_hat", "=", "pt_hat", "[", ":", ",", "0", "]", "# (T*N, V, V)", "\n", "explored_hat", "=", "pt_hat", "[", ":", ",", "1", "]", "# (T*N, V, V)", "\n", "occupied_gt", "=", "pt_gt", "[", ":", ",", "0", "]", "# (T*N, V, V)", "\n", "explored_gt", "=", "pt_gt", "[", ":", ",", "1", "]", "# (T*N, V, V)", "\n", "\n", "occupied_mapping_loss", "=", "F", ".", "binary_cross_entropy", "(", "occupied_hat", ",", "occupied_gt", ")", "\n", "explored_mapping_loss", "=", "F", ".", "binary_cross_entropy", "(", "explored_hat", ",", "explored_gt", ")", "\n", "\n", "mapping_loss", "=", "explored_mapping_loss", "+", "occupied_mapping_loss", "\n", "\n", "return", "mapping_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.pose_loss_fn": [[36, 42], ["torch.smooth_l1_loss", "torch.smooth_l1_loss"], "function", ["None"], ["", "def", "pose_loss_fn", "(", "pose_hat", ",", "pose_gt", ")", ":", "\n", "    ", "trans_loss", "=", "F", ".", "smooth_l1_loss", "(", "pose_hat", "[", ":", ",", ":", "2", "]", ",", "pose_gt", "[", ":", ",", ":", "2", "]", ")", "\n", "rot_loss", "=", "F", ".", "smooth_l1_loss", "(", "pose_hat", "[", ":", ",", "2", "]", ",", "pose_gt", "[", ":", ",", "2", "]", ")", "\n", "pose_loss", "=", "0.5", "*", "(", "trans_loss", "+", "rot_loss", ")", "\n", "\n", "return", "pose_loss", ",", "trans_loss", ",", "rot_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.map_update_fn": [[117, 235], ["isinstance", "time.time", "range", "losses.keys", "time.time", "mapper_rollouts.sample", "time.time", "occant_utils.common.subtract_pose", "occant_utils.common.subtract_pose", "occant_utils.common.subtract_pose", "einops.rearrange", "mapper", "map_update.simple_mapping_loss_fn", "optimizer.zero_grad", "total_loss.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "total_loss.item", "mapping_loss.detach.item", "torch.zeros().to().sum.item", "torch.zeros().to().sum.item", "time.time", "mapping_loss.detach.detach", "einops.rearrange", "torch.zeros().to().sum", "torch.zeros().to().sum", "torch.zeros().to().sum", "torch.zeros().to().sum", "torch.zeros().to().sum", "torch.zeros().to().sum", "torch.zeros().to().sum", "torch.zeros().to().sum", "torch.zeros().to().sum", "torch.zeros().to().sum", "torch.zeros().to().sum", "torch.zeros().to().sum", "len", "pose_outputs.items", "mapper.parameters", "time.time", "map_update.simple_mapping_loss_fn", "list", "map_update.pose_loss_fn", "time.time", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "pose_outputs.keys", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.FixedCategorical.sample", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.subtract_pose", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.subtract_pose", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.subtract_pose", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.simple_mapping_loss_fn", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.step", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.ans.ActiveNeuralSLAMExplorer.parameters", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.simple_mapping_loss_fn", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.pose_loss_fn", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["", "", "", "", "def", "map_update_fn", "(", "ps_args", ")", ":", "\n", "# Unpack args", "\n", "    ", "mapper", "=", "ps_args", "[", "0", "]", "\n", "mapper_rollouts", "=", "ps_args", "[", "1", "]", "\n", "optimizer", "=", "ps_args", "[", "2", "]", "\n", "num_update_batches", "=", "ps_args", "[", "3", "]", "\n", "batch_size", "=", "ps_args", "[", "4", "]", "\n", "freeze_projection_unit", "=", "ps_args", "[", "5", "]", "\n", "bias_factor", "=", "ps_args", "[", "6", "]", "\n", "occupancy_anticipator_type", "=", "ps_args", "[", "7", "]", "\n", "pose_loss_coef", "=", "ps_args", "[", "8", "]", "\n", "max_grad_norm", "=", "ps_args", "[", "9", "]", "\n", "label_id", "=", "ps_args", "[", "10", "]", "\n", "\n", "# Perform update", "\n", "losses", "=", "{", "\n", "\"total_loss\"", ":", "0", ",", "\n", "\"mapping_loss\"", ":", "0", ",", "\n", "\"trans_loss\"", ":", "0", ",", "\n", "\"rot_loss\"", ":", "0", ",", "\n", "}", "\n", "\n", "if", "isinstance", "(", "mapper", ",", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "mapper_config", "=", "mapper", ".", "module", ".", "config", "\n", "", "else", ":", "\n", "        ", "mapper_config", "=", "mapper", ".", "config", "\n", "\n", "", "img_mean", "=", "mapper_config", ".", "NORMALIZATION", ".", "img_mean", "\n", "img_std", "=", "mapper_config", ".", "NORMALIZATION", ".", "img_std", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "# Debugging", "\n", "map_update_profile", "=", "{", "\"data_sampling\"", ":", "0.0", ",", "\"pytorch_update\"", ":", "0.0", "}", "\n", "for", "i", "in", "range", "(", "num_update_batches", ")", ":", "\n", "        ", "start_time_sample", "=", "time", ".", "time", "(", ")", "\n", "observations", "=", "mapper_rollouts", ".", "sample", "(", "batch_size", ")", "\n", "map_update_profile", "[", "\"data_sampling\"", "]", "+=", "time", ".", "time", "(", ")", "-", "start_time_sample", "\n", "# Labels", "\n", "# Pose labels", "\n", "start_time_pyt", "=", "time", ".", "time", "(", ")", "\n", "device", "=", "observations", "[", "\"pose_gt_at_t_1\"", "]", ".", "device", "\n", "\n", "pose_gt_at_t_1", "=", "observations", "[", "\"pose_gt_at_t_1\"", "]", "\n", "pose_gt_at_t", "=", "observations", "[", "\"pose_gt_at_t\"", "]", "\n", "pose_at_t_1", "=", "observations", "[", "\"pose_at_t_1\"", "]", "\n", "pose_at_t", "=", "observations", "[", "\"pose_at_t\"", "]", "\n", "dpose_gt", "=", "subtract_pose", "(", "pose_gt_at_t_1", ",", "pose_gt_at_t", ")", "# (bs, 3)", "\n", "dpose_noisy", "=", "subtract_pose", "(", "pose_at_t_1", ",", "pose_at_t", ")", "# (bs, 3)", "\n", "ddpose_gt", "=", "subtract_pose", "(", "dpose_noisy", ",", "dpose_gt", ")", "\n", "\n", "# Map labels", "\n", "pt_gt", "=", "observations", "[", "f\"{label_id}_at_t\"", "]", "# (bs, V, V, 2)", "\n", "pt_gt", "=", "rearrange", "(", "pt_gt", ",", "\"b h w c -> b c h w\"", ")", "# (bs, 2, V, V)", "\n", "\n", "# Forward pass", "\n", "mapper_inputs", "=", "observations", "\n", "mapper_outputs", "=", "mapper", "(", "mapper_inputs", ",", "method_name", "=", "\"predict_deltas\"", ")", "\n", "pt_hat", "=", "mapper_outputs", "[", "\"pt\"", "]", "\n", "\n", "# Compute losses", "\n", "# -------- mapping loss ---------", "\n", "mapping_loss", "=", "simple_mapping_loss_fn", "(", "pt_hat", ",", "pt_gt", ")", "\n", "if", "freeze_projection_unit", ":", "\n", "            ", "mapping_loss", "=", "mapping_loss", ".", "detach", "(", ")", "\n", "\n", "", "if", "occupancy_anticipator_type", "==", "\"rgb_model_v2\"", ":", "\n", "            ", "ego_map_gt", "=", "observations", "[", "\"ego_map_gt_at_t\"", "]", "# (bs, V, V, 2)", "\n", "ego_map_gt", "=", "rearrange", "(", "ego_map_gt", ",", "\"b h w c -> b c h w\"", ")", "\n", "ego_map_hat", "=", "mapper_outputs", "[", "\"all_pu_outputs\"", "]", "[", "\"depth_proj_estimate\"", "]", "\n", "mapping_loss", "=", "mapping_loss", "+", "simple_mapping_loss_fn", "(", "\n", "ego_map_hat", ",", "ego_map_gt", "\n", ")", "\n", "\n", "", "all_pose_outputs", "=", "mapper_outputs", "[", "\"all_pose_outputs\"", "]", "\n", "if", "all_pose_outputs", "is", "None", ":", "\n", "            ", "pose_estimation_loss", "=", "torch", ".", "zeros", "(", "[", "0", "]", ")", ".", "to", "(", "device", ")", ".", "sum", "(", ")", "\n", "trans_loss", "=", "torch", ".", "zeros", "(", "[", "0", "]", ")", ".", "to", "(", "device", ")", ".", "sum", "(", ")", "\n", "rot_loss", "=", "torch", ".", "zeros", "(", "[", "0", "]", ")", ".", "to", "(", "device", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "pose_outputs", "=", "all_pose_outputs", "[", "\"pose_outputs\"", "]", "\n", "pose_estimation_loss", ",", "trans_loss", ",", "rot_loss", "=", "0", ",", "0", ",", "0", "\n", "n_outputs", "=", "len", "(", "list", "(", "pose_outputs", ".", "keys", "(", ")", ")", ")", "\n", "# The pose prediction outputs are performed for individual modalities,", "\n", "# and then weighted-averaged according to an ensemble MLP.", "\n", "# Here, the loss is computed for each modality as well as the ensemble.", "\n", "# Finally, it is averaged across the modalities.", "\n", "pose_label", "=", "ddpose_gt", "\n", "for", "_", ",", "dpose_hat", "in", "pose_outputs", ".", "items", "(", ")", ":", "\n", "                ", "curr_pose_losses", "=", "pose_loss_fn", "(", "dpose_hat", ",", "pose_label", ")", "\n", "pose_estimation_loss", "=", "pose_estimation_loss", "+", "curr_pose_losses", "[", "0", "]", "\n", "trans_loss", "=", "trans_loss", "+", "curr_pose_losses", "[", "1", "]", "\n", "rot_loss", "=", "rot_loss", "+", "curr_pose_losses", "[", "2", "]", "\n", "", "pose_estimation_loss", "=", "pose_estimation_loss", "/", "n_outputs", "\n", "trans_loss", "=", "trans_loss", "/", "n_outputs", "\n", "rot_loss", "=", "rot_loss", "/", "n_outputs", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", "=", "mapping_loss", "+", "pose_estimation_loss", "*", "pose_loss_coef", "\n", "\n", "# Backward pass", "\n", "total_loss", ".", "backward", "(", ")", "\n", "\n", "# Update", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "mapper", ".", "parameters", "(", ")", ",", "max_grad_norm", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "losses", "[", "\"total_loss\"", "]", "+=", "total_loss", ".", "item", "(", ")", "\n", "losses", "[", "\"mapping_loss\"", "]", "+=", "mapping_loss", ".", "item", "(", ")", "\n", "losses", "[", "\"trans_loss\"", "]", "+=", "trans_loss", ".", "item", "(", ")", "\n", "losses", "[", "\"rot_loss\"", "]", "+=", "rot_loss", ".", "item", "(", ")", "\n", "\n", "map_update_profile", "[", "\"pytorch_update\"", "]", "+=", "time", ".", "time", "(", ")", "-", "start_time_pyt", "\n", "time_per_step", "=", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "(", "60", "*", "(", "i", "+", "1", ")", ")", "\n", "\n", "", "losses", "[", "\"pose_loss\"", "]", "=", "losses", "[", "\"trans_loss\"", "]", "+", "losses", "[", "\"rot_loss\"", "]", "\n", "for", "k", "in", "losses", ".", "keys", "(", ")", ":", "\n", "        ", "losses", "[", "k", "]", "/=", "num_update_batches", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.map_update_worker": [[237, 276], ["parent_remote.close", "remote.recv", "update_completed.clear", "map_update.map_update_fn", "remote.send", "update_completed.set", "update_completed.set", "remote.send", "remote.close"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerSequential.close", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.supervised.map_update.map_update_fn", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.rl.planner.AStarPlannerSequential.close"], ["", "def", "map_update_worker", "(", "\n", "remote", ",", "parent_remote", ",", "ps_args", ",", "update_completed", ",", "\n", ")", ":", "\n", "# Unpack args", "\n", "    ", "mapper", "=", "ps_args", "[", "0", "]", "\n", "mapper_rollouts", "=", "ps_args", "[", "1", "]", "\n", "optimizer", "=", "ps_args", "[", "2", "]", "\n", "num_update_batches", "=", "ps_args", "[", "3", "]", "\n", "batch_size", "=", "ps_args", "[", "4", "]", "\n", "freeze_projection_unit", "=", "ps_args", "[", "5", "]", "\n", "bias_factor", "=", "ps_args", "[", "6", "]", "\n", "occupancy_anticipator_type", "=", "ps_args", "[", "7", "]", "\n", "pose_loss_coef", "=", "ps_args", "[", "8", "]", "\n", "max_grad_norm", "=", "ps_args", "[", "9", "]", "\n", "label_id", "=", "ps_args", "[", "10", "]", "\n", "\n", "# Close parent remote", "\n", "parent_remote", ".", "close", "(", ")", "\n", "\n", "while", "True", ":", "\n", "        ", "cmd", ",", "data", "=", "remote", ".", "recv", "(", ")", "\n", "if", "cmd", "==", "\"update\"", ":", "\n", "# Unset update completed", "\n", "            ", "update_completed", ".", "clear", "(", ")", "\n", "# Ensure that rollouts is filled", "\n", "if", "mapper_rollouts", ".", "step", ">", "batch_size", "or", "mapper_rollouts", ".", "memory_filled", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "update_completed", ".", "set", "(", ")", "\n", "remote", ".", "send", "(", "{", "}", ")", "\n", "continue", "\n", "# Perform update", "\n", "", "losses", "=", "map_update_fn", "(", "ps_args", ")", "\n", "remote", ".", "send", "(", "losses", ")", "\n", "# Set update completed event", "\n", "update_completed", ".", "set", "(", ")", "\n", "", "elif", "cmd", "==", "\"close\"", ":", "\n", "            ", "remote", ".", "close", "(", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.__init__": [[18, 55], ["habitat_baselines.common.rollout_storage.RolloutStorage.__init__"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_steps", ",", "\n", "num_envs", ",", "\n", "observation_space", ",", "\n", "action_space", ",", "\n", "recurrent_hidden_state_size", ",", "\n", "num_recurrent_layers", "=", "1", ",", "\n", "enable_recurrence", "=", "True", ",", "\n", "delay_observations_entry", "=", "False", ",", "\n", "delay_masks_entry", "=", "False", ",", "\n", "enable_memory_efficient_mode", "=", "False", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "num_steps", ",", "\n", "num_envs", ",", "\n", "observation_space", ",", "\n", "action_space", ",", "\n", "recurrent_hidden_state_size", ",", "\n", "num_recurrent_layers", "=", "num_recurrent_layers", ",", "\n", ")", "\n", "self", ".", "enable_recurrence", "=", "enable_recurrence", "\n", "# This delays observation writing by 1 step.  This is necessary", "\n", "# if a forward pass through the policy is needed to actually", "\n", "# generate the required observations for the policy.", "\n", "self", ".", "delay_observations_entry", "=", "delay_observations_entry", "\n", "# This delays mask writing by 1 step.  This is necessary", "\n", "# if a forward pass through the policy is needed to actually", "\n", "# generate the required masks for the policy.", "\n", "self", ".", "delay_masks_entry", "=", "delay_masks_entry", "\n", "# If efficient mode is enabled, the rollout memories are stored on CPU", "\n", "# and ported to GPU during update.", "\n", "self", ".", "enable_memory_efficient_mode", "=", "enable_memory_efficient_mode", "\n", "\n", "if", "not", "self", ".", "enable_recurrence", ":", "\n", "            ", "self", ".", "recurrent_hidden_states", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to": [[56, 73], ["rollout_storage.RolloutStorageExtended.rewards.to", "rollout_storage.RolloutStorageExtended.value_preds.to", "rollout_storage.RolloutStorageExtended.returns.to", "rollout_storage.RolloutStorageExtended.action_log_probs.to", "rollout_storage.RolloutStorageExtended.actions.to", "rollout_storage.RolloutStorageExtended.prev_actions.to", "rollout_storage.RolloutStorageExtended.masks.to", "rollout_storage.RolloutStorageExtended.observations[].to", "rollout_storage.RolloutStorageExtended.recurrent_hidden_states.to"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "if", "self", ".", "enable_memory_efficient_mode", ":", "\n", "            ", "self", ".", "_device", "=", "device", "\n", "return", "None", "\n", "\n", "", "for", "sensor", "in", "self", ".", "observations", ":", "\n", "            ", "self", ".", "observations", "[", "sensor", "]", "=", "self", ".", "observations", "[", "sensor", "]", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "self", ".", "enable_recurrence", ":", "\n", "            ", "self", ".", "recurrent_hidden_states", "=", "self", ".", "recurrent_hidden_states", ".", "to", "(", "device", ")", "\n", "", "self", ".", "rewards", "=", "self", ".", "rewards", ".", "to", "(", "device", ")", "\n", "self", ".", "value_preds", "=", "self", ".", "value_preds", ".", "to", "(", "device", ")", "\n", "self", ".", "returns", "=", "self", ".", "returns", ".", "to", "(", "device", ")", "\n", "self", ".", "action_log_probs", "=", "self", ".", "action_log_probs", ".", "to", "(", "device", ")", "\n", "self", ".", "actions", "=", "self", ".", "actions", ".", "to", "(", "device", ")", "\n", "self", ".", "prev_actions", "=", "self", ".", "prev_actions", ".", "to", "(", "device", ")", "\n", "self", ".", "masks", "=", "self", ".", "masks", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.insert": [[74, 106], ["rollout_storage.RolloutStorageExtended.actions[].copy_", "rollout_storage.RolloutStorageExtended.prev_actions[].copy_", "rollout_storage.RolloutStorageExtended.action_log_probs[].copy_", "rollout_storage.RolloutStorageExtended.value_preds[].copy_", "rollout_storage.RolloutStorageExtended.rewards[].copy_", "rollout_storage.RolloutStorageExtended.recurrent_hidden_states[].copy_", "rollout_storage.RolloutStorageExtended.masks[].copy_", "rollout_storage.RolloutStorageExtended.masks[].copy_", "[].copy_", "[].copy_"], "methods", ["None"], ["", "def", "insert", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "recurrent_hidden_states", ",", "\n", "actions", ",", "\n", "action_log_probs", ",", "\n", "value_preds", ",", "\n", "rewards", ",", "\n", "masks", ",", "\n", ")", ":", "\n", "        ", "for", "sensor", "in", "observations", ":", "\n", "            ", "if", "self", ".", "delay_observations_entry", ":", "\n", "# Special behavior", "\n", "                ", "self", ".", "observations", "[", "sensor", "]", "[", "self", ".", "step", "]", ".", "copy_", "(", "observations", "[", "sensor", "]", ")", "\n", "", "else", ":", "\n", "# The default behavior", "\n", "                ", "self", ".", "observations", "[", "sensor", "]", "[", "self", ".", "step", "+", "1", "]", ".", "copy_", "(", "observations", "[", "sensor", "]", ")", "\n", "", "", "if", "self", ".", "enable_recurrence", ":", "\n", "            ", "self", ".", "recurrent_hidden_states", "[", "self", ".", "step", "+", "1", "]", ".", "copy_", "(", "recurrent_hidden_states", ")", "\n", "", "self", ".", "actions", "[", "self", ".", "step", "]", ".", "copy_", "(", "actions", ")", "\n", "self", ".", "prev_actions", "[", "self", ".", "step", "+", "1", "]", ".", "copy_", "(", "actions", ")", "\n", "self", ".", "action_log_probs", "[", "self", ".", "step", "]", ".", "copy_", "(", "action_log_probs", ")", "\n", "self", ".", "value_preds", "[", "self", ".", "step", "]", ".", "copy_", "(", "value_preds", ")", "\n", "self", ".", "rewards", "[", "self", ".", "step", "]", ".", "copy_", "(", "rewards", ")", "\n", "if", "self", ".", "delay_masks_entry", ":", "\n", "# Special behavior", "\n", "            ", "self", ".", "masks", "[", "self", ".", "step", "]", ".", "copy_", "(", "masks", ")", "\n", "", "else", ":", "\n", "# The default behavior", "\n", "            ", "self", ".", "masks", "[", "self", ".", "step", "+", "1", "]", ".", "copy_", "(", "masks", ")", "\n", "\n", "", "self", ".", "step", "=", "self", ".", "step", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.after_update": [[107, 118], ["rollout_storage.RolloutStorageExtended.masks[].copy_", "rollout_storage.RolloutStorageExtended.prev_actions[].copy_", "[].copy_", "rollout_storage.RolloutStorageExtended.recurrent_hidden_states[].copy_"], "methods", ["None"], ["", "def", "after_update", "(", "self", ")", ":", "\n", "        ", "for", "sensor", "in", "self", ".", "observations", ":", "\n", "            ", "self", ".", "observations", "[", "sensor", "]", "[", "0", "]", ".", "copy_", "(", "self", ".", "observations", "[", "sensor", "]", "[", "self", ".", "step", "]", ")", "\n", "\n", "", "if", "self", ".", "enable_recurrence", ":", "\n", "            ", "self", ".", "recurrent_hidden_states", "[", "0", "]", ".", "copy_", "(", "\n", "self", ".", "recurrent_hidden_states", "[", "self", ".", "step", "]", "\n", ")", "\n", "", "self", ".", "masks", "[", "0", "]", ".", "copy_", "(", "self", ".", "masks", "[", "self", ".", "step", "]", ")", "\n", "self", ".", "prev_actions", "[", "0", "]", ".", "copy_", "(", "self", ".", "prev_actions", "[", "self", ".", "step", "]", ")", "\n", "self", ".", "step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.compute_returns": [[119, 139], ["next_value.cpu.cpu.cpu", "reversed", "reversed", "range", "range"], "methods", ["None"], ["", "def", "compute_returns", "(", "self", ",", "next_value", ",", "use_gae", ",", "gamma", ",", "tau", ")", ":", "\n", "        ", "if", "self", ".", "enable_memory_efficient_mode", ":", "\n", "            ", "next_value", "=", "next_value", ".", "cpu", "(", ")", "\n", "", "if", "use_gae", ":", "\n", "            ", "self", ".", "value_preds", "[", "self", ".", "step", "]", "=", "next_value", "\n", "gae", "=", "0", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "step", ")", ")", ":", "\n", "                ", "delta", "=", "(", "\n", "self", ".", "rewards", "[", "step", "]", "\n", "+", "gamma", "*", "self", ".", "value_preds", "[", "step", "+", "1", "]", "*", "self", ".", "masks", "[", "step", "+", "1", "]", "\n", "-", "self", ".", "value_preds", "[", "step", "]", "\n", ")", "\n", "gae", "=", "delta", "+", "gamma", "*", "tau", "*", "self", ".", "masks", "[", "step", "+", "1", "]", "*", "gae", "\n", "self", ".", "returns", "[", "step", "]", "=", "gae", "+", "self", ".", "value_preds", "[", "step", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "returns", "[", "self", ".", "step", "]", "=", "next_value", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "step", ")", ")", ":", "\n", "                ", "self", ".", "returns", "[", "step", "]", "=", "(", "\n", "self", ".", "returns", "[", "step", "+", "1", "]", "*", "gamma", "*", "self", ".", "masks", "[", "step", "+", "1", "]", "\n", "+", "self", ".", "rewards", "[", "step", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.recurrent_generator": [[141, 248], ["rollout_storage.RolloutStorageExtended.rewards.size", "torch.randperm", "range", "collections.defaultdict", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "rollout_storage.RolloutStorageExtended._flatten_helper", "rollout_storage.RolloutStorageExtended._flatten_helper", "rollout_storage.RolloutStorageExtended._flatten_helper", "rollout_storage.RolloutStorageExtended._flatten_helper", "rollout_storage.RolloutStorageExtended._flatten_helper", "rollout_storage.RolloutStorageExtended._flatten_helper", "rollout_storage.RolloutStorageExtended._flatten_helper", "actions_batch.to.to.append", "prev_actions_batch.to.to.append", "value_preds_batch.to.to.append", "return_batch.to.to.append", "masks_batch.to.to.append", "old_action_log_probs_batch.to.to.append", "adv_targ.to.to.append", "torch.stack", "torch.stack", "rollout_storage.RolloutStorageExtended._flatten_helper", "actions_batch.to.to.to", "prev_actions_batch.to.to.to", "value_preds_batch.to.to.to", "return_batch.to.to.to", "masks_batch.to.to.to", "old_action_log_probs_batch.to.to.to", "adv_targ.to.to.to", "observations_batch[].append", "torch.stack.append", "observations_batch[].to"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended._flatten_helper", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended._flatten_helper", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended._flatten_helper", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended._flatten_helper", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended._flatten_helper", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended._flatten_helper", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended._flatten_helper", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended._flatten_helper", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["", "", "", "def", "recurrent_generator", "(", "self", ",", "advantages", ",", "num_mini_batch", ")", ":", "\n", "        ", "num_processes", "=", "self", ".", "rewards", ".", "size", "(", "1", ")", "\n", "assert", "num_processes", ">=", "num_mini_batch", ",", "(", "\n", "\"Trainer requires the number of processes ({}) \"", "\n", "\"to be greater than or equal to the number of \"", "\n", "\"trainer mini batches ({}).\"", ".", "format", "(", "num_processes", ",", "num_mini_batch", ")", "\n", ")", "\n", "num_envs_per_batch", "=", "num_processes", "//", "num_mini_batch", "\n", "perm", "=", "torch", ".", "randperm", "(", "num_processes", ")", "\n", "for", "start_ind", "in", "range", "(", "0", ",", "num_processes", ",", "num_envs_per_batch", ")", ":", "\n", "            ", "observations_batch", "=", "defaultdict", "(", "list", ")", "\n", "\n", "if", "self", ".", "enable_recurrence", ":", "\n", "                ", "recurrent_hidden_states_batch", "=", "[", "]", "\n", "", "else", ":", "\n", "                ", "recurrent_hidden_states_batch", "=", "None", "\n", "", "actions_batch", "=", "[", "]", "\n", "prev_actions_batch", "=", "[", "]", "\n", "value_preds_batch", "=", "[", "]", "\n", "return_batch", "=", "[", "]", "\n", "masks_batch", "=", "[", "]", "\n", "old_action_log_probs_batch", "=", "[", "]", "\n", "adv_targ", "=", "[", "]", "\n", "\n", "for", "offset", "in", "range", "(", "num_envs_per_batch", ")", ":", "\n", "                ", "ind", "=", "perm", "[", "start_ind", "+", "offset", "]", "\n", "\n", "for", "sensor", "in", "self", ".", "observations", ":", "\n", "                    ", "observations_batch", "[", "sensor", "]", ".", "append", "(", "\n", "self", ".", "observations", "[", "sensor", "]", "[", ":", "self", ".", "step", ",", "ind", "]", "\n", ")", "\n", "\n", "", "if", "self", ".", "enable_recurrence", ":", "\n", "                    ", "recurrent_hidden_states_batch", ".", "append", "(", "\n", "self", ".", "recurrent_hidden_states", "[", "0", ",", ":", ",", "ind", "]", "\n", ")", "\n", "\n", "", "actions_batch", ".", "append", "(", "self", ".", "actions", "[", ":", "self", ".", "step", ",", "ind", "]", ")", "\n", "prev_actions_batch", ".", "append", "(", "self", ".", "prev_actions", "[", ":", "self", ".", "step", ",", "ind", "]", ")", "\n", "value_preds_batch", ".", "append", "(", "self", ".", "value_preds", "[", ":", "self", ".", "step", ",", "ind", "]", ")", "\n", "return_batch", ".", "append", "(", "self", ".", "returns", "[", ":", "self", ".", "step", ",", "ind", "]", ")", "\n", "masks_batch", ".", "append", "(", "self", ".", "masks", "[", ":", "self", ".", "step", ",", "ind", "]", ")", "\n", "old_action_log_probs_batch", ".", "append", "(", "\n", "self", ".", "action_log_probs", "[", ":", "self", ".", "step", ",", "ind", "]", "\n", ")", "\n", "\n", "adv_targ", ".", "append", "(", "advantages", "[", ":", "self", ".", "step", ",", "ind", "]", ")", "\n", "\n", "", "T", ",", "N", "=", "self", ".", "step", ",", "num_envs_per_batch", "\n", "\n", "# These are all tensors of size (T, N, -1)", "\n", "for", "sensor", "in", "observations_batch", ":", "\n", "                ", "observations_batch", "[", "sensor", "]", "=", "torch", ".", "stack", "(", "observations_batch", "[", "sensor", "]", ",", "1", ")", "\n", "\n", "", "actions_batch", "=", "torch", ".", "stack", "(", "actions_batch", ",", "1", ")", "\n", "prev_actions_batch", "=", "torch", ".", "stack", "(", "prev_actions_batch", ",", "1", ")", "\n", "value_preds_batch", "=", "torch", ".", "stack", "(", "value_preds_batch", ",", "1", ")", "\n", "return_batch", "=", "torch", ".", "stack", "(", "return_batch", ",", "1", ")", "\n", "masks_batch", "=", "torch", ".", "stack", "(", "masks_batch", ",", "1", ")", "\n", "old_action_log_probs_batch", "=", "torch", ".", "stack", "(", "old_action_log_probs_batch", ",", "1", ")", "\n", "adv_targ", "=", "torch", ".", "stack", "(", "adv_targ", ",", "1", ")", "\n", "\n", "# States is just a (num_recurrent_layers, N, -1) tensor", "\n", "if", "self", ".", "enable_recurrence", ":", "\n", "                ", "recurrent_hidden_states_batch", "=", "torch", ".", "stack", "(", "\n", "recurrent_hidden_states_batch", ",", "1", "\n", ")", "\n", "\n", "# Flatten the (T, N, ...) tensors to (T * N, ...)", "\n", "", "for", "sensor", "in", "observations_batch", ":", "\n", "                ", "observations_batch", "[", "sensor", "]", "=", "self", ".", "_flatten_helper", "(", "\n", "T", ",", "N", ",", "observations_batch", "[", "sensor", "]", "\n", ")", "\n", "\n", "", "actions_batch", "=", "self", ".", "_flatten_helper", "(", "T", ",", "N", ",", "actions_batch", ")", "\n", "prev_actions_batch", "=", "self", ".", "_flatten_helper", "(", "T", ",", "N", ",", "prev_actions_batch", ")", "\n", "value_preds_batch", "=", "self", ".", "_flatten_helper", "(", "T", ",", "N", ",", "value_preds_batch", ")", "\n", "return_batch", "=", "self", ".", "_flatten_helper", "(", "T", ",", "N", ",", "return_batch", ")", "\n", "masks_batch", "=", "self", ".", "_flatten_helper", "(", "T", ",", "N", ",", "masks_batch", ")", "\n", "old_action_log_probs_batch", "=", "self", ".", "_flatten_helper", "(", "\n", "T", ",", "N", ",", "old_action_log_probs_batch", "\n", ")", "\n", "adv_targ", "=", "self", ".", "_flatten_helper", "(", "T", ",", "N", ",", "adv_targ", ")", "\n", "\n", "if", "self", ".", "enable_memory_efficient_mode", ":", "\n", "                ", "for", "sensor", "in", "observations_batch", ":", "\n", "                    ", "observations_batch", "[", "sensor", "]", "=", "observations_batch", "[", "sensor", "]", ".", "to", "(", "\n", "self", ".", "_device", "\n", ")", "\n", "", "actions_batch", "=", "actions_batch", ".", "to", "(", "self", ".", "_device", ")", "\n", "prev_actions_batch", "=", "prev_actions_batch", ".", "to", "(", "self", ".", "_device", ")", "\n", "value_preds_batch", "=", "value_preds_batch", ".", "to", "(", "self", ".", "_device", ")", "\n", "return_batch", "=", "return_batch", ".", "to", "(", "self", ".", "_device", ")", "\n", "masks_batch", "=", "masks_batch", ".", "to", "(", "self", ".", "_device", ")", "\n", "old_action_log_probs_batch", "=", "old_action_log_probs_batch", ".", "to", "(", "self", ".", "_device", ")", "\n", "adv_targ", "=", "adv_targ", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "", "yield", "(", "\n", "observations_batch", ",", "\n", "recurrent_hidden_states_batch", ",", "\n", "actions_batch", ",", "\n", "prev_actions_batch", ",", "\n", "value_preds_batch", ",", "\n", "return_batch", ",", "\n", "masks_batch", ",", "\n", "old_action_log_probs_batch", ",", "\n", "adv_targ", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended._flatten_helper": [[250, 263], ["tensor.view", "tensor.size"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_flatten_helper", "(", "t", ":", "int", ",", "n", ":", "int", ",", "tensor", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "r\"\"\"Given a tensor of size (t, n, ..), flatten it to size (t*n, ...).\n\n        Args:\n            t: first dimension of tensor.\n            n: second dimension of tensor.\n            tensor: target tensor to be flattened.\n\n        Returns:\n            flattened tensor of size (t*n, ...)\n        \"\"\"", "\n", "return", "tensor", ".", "view", "(", "t", "*", "n", ",", "*", "tensor", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.MapLargeRolloutStorage.__init__": [[270, 284], ["torch.zeros"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "replay_size", ",", "observation_space", ",", "device", ",", "\n", ")", ":", "\n", "        ", "self", ".", "observations", "=", "{", "}", "\n", "\n", "for", "sensor", "in", "observation_space", ".", "spaces", ":", "\n", "            ", "self", ".", "observations", "[", "sensor", "]", "=", "torch", ".", "zeros", "(", "\n", "replay_size", ",", "*", "observation_space", ".", "spaces", "[", "sensor", "]", ".", "shape", "\n", ")", "\n", "\n", "", "self", ".", "replay_size", "=", "replay_size", "\n", "self", ".", "step", "=", "0", "\n", "self", ".", "memory_filled", "=", "False", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.MapLargeRolloutStorage.insert": [[285, 301], ["[].copy_", "[].copy_", "[].copy_"], "methods", ["None"], ["", "def", "insert", "(", "self", ",", "observations", ")", ":", "\n", "        ", "for", "sensor", "in", "observations", ":", "\n", "# The default behavior", "\n", "            ", "bs", "=", "observations", "[", "sensor", "]", ".", "shape", "[", "0", "]", "\n", "if", "self", ".", "step", "+", "bs", "<", "self", ".", "replay_size", ":", "\n", "                ", "self", ".", "observations", "[", "sensor", "]", "[", "self", ".", "step", ":", "(", "self", ".", "step", "+", "bs", ")", "]", ".", "copy_", "(", "\n", "observations", "[", "sensor", "]", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "memory_filled", "=", "True", "\n", "n1", "=", "self", ".", "replay_size", "-", "self", ".", "step", "\n", "n2", "=", "bs", "-", "n1", "\n", "self", ".", "observations", "[", "sensor", "]", "[", "self", ".", "step", ":", "]", ".", "copy_", "(", "observations", "[", "sensor", "]", "[", ":", "n1", "]", ")", "\n", "self", ".", "observations", "[", "sensor", "]", "[", ":", "n2", "]", ".", "copy_", "(", "observations", "[", "sensor", "]", "[", "n1", ":", "]", ")", "\n", "\n", "", "", "self", ".", "step", "=", "(", "self", ".", "step", "+", "bs", ")", "%", "self", ".", "replay_size", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.MapLargeRolloutStorage.sample": [[302, 317], ["torch.randint().item", "[].to", "torch.randint().item", "torch.randint", "torch.randint"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "memory_filled", ":", "\n", "            ", "ridx", "=", "torch", ".", "randint", "(", "0", ",", "self", ".", "replay_size", "-", "batch_size", ",", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", "", "elif", "self", ".", "step", ">", "batch_size", ":", "\n", "            ", "ridx", "=", "torch", ".", "randint", "(", "0", ",", "self", ".", "step", "-", "batch_size", ",", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n", "", "random_batch", "=", "{", "}", "\n", "for", "sensor", "in", "self", ".", "observations", ":", "\n", "            ", "random_batch", "[", "sensor", "]", "=", "self", ".", "observations", "[", "sensor", "]", "[", "\n", "ridx", ":", "(", "ridx", "+", "batch_size", ")", "\n", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "return", "random_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.MapLargeRolloutStorage.get_memory_size": [[318, 321], ["None"], "methods", ["None"], ["", "def", "get_memory_size", "(", "self", ")", ":", "\n", "        ", "memory_size", "=", "self", ".", "replay_size", "if", "self", ".", "memory_filled", "else", "self", ".", "step", "\n", "return", "memory_size", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.MapLargeRolloutStorageMP.__init__": [[330, 349], ["mp_manager.Value", "mp_manager.Value", "rollout_storage.MapLargeRolloutStorageMP.share_memory", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.MapLargeRolloutStorageMP.share_memory"], ["def", "__init__", "(", "\n", "self", ",", "replay_size", ",", "observation_space", ",", "device", ",", "mp_manager", ",", "\n", ")", ":", "\n", "        ", "self", ".", "observations", "=", "{", "}", "\n", "\n", "for", "sensor", "in", "observation_space", ".", "spaces", ":", "\n", "            ", "self", ".", "observations", "[", "sensor", "]", "=", "torch", ".", "zeros", "(", "\n", "replay_size", ",", "*", "observation_space", ".", "spaces", "[", "sensor", "]", ".", "shape", "\n", ")", "\n", "\n", "", "self", ".", "replay_size", "=", "replay_size", "\n", "# Re-define step and memory_filled as multiprocessing Values that are", "\n", "# shared across processes. Create setters and getters for step and", "\n", "# memory_filled to keep rest of the pipeline fixed.", "\n", "self", ".", "_step", "=", "mp_manager", ".", "Value", "(", "\"step\"", ",", "0", ")", "\n", "self", ".", "_memory_filled", "=", "mp_manager", ".", "Value", "(", "\"memory_filled\"", ",", "False", ")", "\n", "self", ".", "device", "=", "device", "\n", "# Share the tensor memory", "\n", "self", ".", "share_memory", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.MapLargeRolloutStorageMP.step": [[354, 357], ["None"], "methods", ["None"], ["", "@", "step", ".", "setter", "\n", "def", "step", "(", "self", ",", "_step", ")", ":", "\n", "        ", "self", ".", "_step", ".", "value", "=", "_step", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.MapLargeRolloutStorageMP.memory_filled": [[362, 365], ["None"], "methods", ["None"], ["", "@", "memory_filled", ".", "setter", "\n", "def", "memory_filled", "(", "self", ",", "_memory_filled", ")", ":", "\n", "        ", "self", ".", "_memory_filled", ".", "value", "=", "_memory_filled", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.MapLargeRolloutStorageMP.share_memory": [[366, 369], ["rollout_storage.MapLargeRolloutStorageMP.observations.keys", "rollout_storage.MapLargeRolloutStorageMP.observations[].share_memory_"], "methods", ["None"], ["", "def", "share_memory", "(", "self", ")", ":", "\n", "        ", "for", "sensor", "in", "self", ".", "observations", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "observations", "[", "sensor", "]", ".", "share_memory_", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.environments.ExpRLEnv.__init__": [[17, 24], ["habitat.RLEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "Config", ",", "dataset", ":", "Optional", "[", "Dataset", "]", "=", "None", ")", ":", "\n", "        ", "self", ".", "_rl_config", "=", "config", ".", "RL", "\n", "self", ".", "_core_env_config", "=", "config", ".", "TASK_CONFIG", "\n", "\n", "self", ".", "_previous_action", "=", "None", "\n", "self", ".", "_episode_distance_covered", "=", "None", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "_core_env_config", ",", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.environments.ExpRLEnv.reset": [[25, 31], ["super().reset"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_previous_action", "=", "None", "\n", "\n", "observations", "=", "super", "(", ")", ".", "reset", "(", ")", "\n", "\n", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.environments.ExpRLEnv.step": [[32, 35], ["super().step"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.step"], ["", "def", "step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_previous_action", "=", "kwargs", "[", "\"action\"", "]", "\n", "return", "super", "(", ")", ".", "step", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.environments.ExpRLEnv.get_reward_range": [[36, 40], ["None"], "methods", ["None"], ["", "def", "get_reward_range", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "-", "1.0", ",", "\n", "+", "1.0", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.environments.ExpRLEnv.get_reward": [[42, 45], ["None"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "observations", ")", ":", "\n", "        ", "reward", "=", "0", "\n", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.environments.ExpRLEnv.get_done": [[46, 51], ["None"], "methods", ["None"], ["", "def", "get_done", "(", "self", ",", "observations", ")", ":", "\n", "        ", "done", "=", "False", "\n", "if", "self", ".", "_env", ".", "episode_over", ":", "\n", "            ", "done", "=", "True", "\n", "", "return", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.environments.ExpRLEnv.get_info": [[52, 60], ["environments.ExpRLEnv.habitat_env.get_metrics"], "methods", ["None"], ["", "def", "get_info", "(", "self", ",", "observations", ")", ":", "\n", "        ", "metrics", "=", "self", ".", "habitat_env", ".", "get_metrics", "(", ")", "\n", "episode_statistics", "=", "{", "\n", "\"episode_id\"", ":", "self", ".", "habitat_env", ".", "current_episode", ".", "episode_id", ",", "\n", "\"scene_id\"", ":", "self", ".", "habitat_env", ".", "current_episode", ".", "scene_id", ",", "\n", "}", "\n", "metrics", "[", "\"episode_statistics\"", "]", "=", "episode_statistics", "\n", "return", "metrics", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.env_utils.transform_map": [[21, 34], ["env_utils.spatial_transform"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.env_utils.spatial_transform"], ["def", "transform_map", "(", "map_scale", ",", "p", ",", "x", ",", "invert", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Given the locally computed map, register it to the global map based\n    on the current position.\n\n    Inputs:\n        m - (bs, F, M, M) new map\n        p - (bs, F, M, M) old map\n        x - (bs, 3) in global coordinates\n    \"\"\"", "\n", "# Register the local map", "\n", "p_trans", "=", "spatial_transform", "(", "map_scale", ",", "p", ",", "x", ",", "invert", "=", "invert", ")", "\n", "return", "p_trans", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.env_utils.spatial_transform": [[36, 63], ["torch.stack", "occant_utils.common.spatial_transform_map"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.spatial_transform_map"], ["", "def", "spatial_transform", "(", "map_scale", ",", "p", ",", "dx", ",", "invert", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Applies the transformation dx to image p.\n    Inputs:\n        p - (bs, 2, H, W) map\n        dx - (bs, 3) egocentric transformation --- (dx, dy, dtheta)\n\n    Conventions:\n        The origin is at the center of the map.\n        X is upward with agent's forward direction\n        Y is rightward with agent's rightward direction\n\n    Note: These denote transforms in an agent's position. Not the image directly.\n    For example, if an agent is moving upward, then the map will be moving downward.\n    To disable this behavior, set invert=False.\n    \"\"\"", "\n", "s", "=", "map_scale", "\n", "# Convert dx to map image coordinate system with X as rightward and Y as downward", "\n", "dx_map", "=", "torch", ".", "stack", "(", "\n", "[", "(", "dx", "[", ":", ",", "1", "]", "/", "s", ")", ",", "-", "(", "dx", "[", ":", ",", "0", "]", "/", "s", ")", ",", "dx", "[", ":", ",", "2", "]", "]", ",", "dim", "=", "1", "\n", ")", "# anti-clockwise rotation", "\n", "\n", "# insert context manager hopefully fixes bug", "\n", "# with sequence():", "\n", "p_trans", "=", "spatial_transform_map", "(", "p", ",", "dx_map", ",", "invert", "=", "invert", ")", "\n", "\n", "return", "p_trans", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.env_utils.get_position_vector_from_obs": [[65, 83], ["numpy.array", "habitat_extensions.geometry_utils.quaternion_from_coeff", "habitat_extensions.geometry_utils.quaternion_rotate_vector", "habitat_extensions.geometry_utils.quaternion_from_coeff", "env_utils.quat_to_xy_heading", "numpy.array"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_from_coeff", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_rotate_vector", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_from_coeff", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.env_utils.quat_to_xy_heading"], ["", "def", "get_position_vector_from_obs", "(", "observations", ")", ":", "\n", "    ", "origin", "=", "np", ".", "array", "(", "observations", "[", "0", "]", "[", "'start_coords'", "]", "[", ":", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "rotation_world_start", "=", "quaternion_from_coeff", "(", "observations", "[", "0", "]", "[", "'start_coords'", "]", "[", "3", ":", "]", ")", "\n", "\n", "agent_position", "=", "quaternion_rotate_vector", "(", "\n", "rotation_world_start", ",", "origin", "\n", ")", "\n", "\n", "rotation_world_start", "=", "quaternion_from_coeff", "(", "observations", "[", "0", "]", "[", "'start_coords'", "]", "[", "3", ":", "]", ")", "\n", "\n", "agent_heading", "=", "quat_to_xy_heading", "(", "\n", "rotation_world_start", "\n", ")", "\n", "# This is rotation from -Z to -X. We want -Z to X for this particular sensor.", "\n", "agent_heading", "=", "-", "agent_heading", "\n", "\n", "return", "np", ".", "array", "(", "\n", "[", "-", "agent_position", "[", "2", "]", ",", "agent_position", "[", "0", "]", ",", "agent_heading", "]", ",", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.env_utils.get_position_vector": [[86, 104], ["numpy.array", "habitat_extensions.geometry_utils.quaternion_from_coeff", "habitat_extensions.geometry_utils.quaternion_rotate_vector", "habitat_extensions.geometry_utils.quaternion_from_coeff", "env_utils.quat_to_xy_heading", "numpy.array"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_from_coeff", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_rotate_vector", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_from_coeff", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.env_utils.quat_to_xy_heading"], ["", "def", "get_position_vector", "(", "env", ")", ":", "\n", "    ", "origin", "=", "np", ".", "array", "(", "env", ".", "current_episode", ".", "start_position", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "rotation_world_start", "=", "quaternion_from_coeff", "(", "env", ".", "current_episode", ".", "start_rotation", ")", "\n", "\n", "agent_position", "=", "quaternion_rotate_vector", "(", "\n", "rotation_world_start", ",", "origin", "\n", ")", "\n", "\n", "rotation_world_start", "=", "quaternion_from_coeff", "(", "env", ".", "current_episode", ".", "start_rotation", ")", "\n", "\n", "agent_heading", "=", "quat_to_xy_heading", "(", "\n", "rotation_world_start", "\n", ")", "\n", "# This is rotation from -Z to -X. We want -Z to X for this particular sensor.", "\n", "agent_heading", "=", "-", "agent_heading", "\n", "\n", "return", "np", ".", "array", "(", "\n", "[", "-", "agent_position", "[", "2", "]", ",", "agent_position", "[", "0", "]", ",", "agent_heading", "]", ",", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.env_utils.quat_to_xy_heading": [[107, 112], ["numpy.array", "habitat_extensions.geometry_utils.quaternion_rotate_vector", "numpy.array", "habitat.tasks.utils.cartesian_to_polar"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.geometry_utils.quaternion_rotate_vector"], ["", "def", "quat_to_xy_heading", "(", "quat", ")", ":", "\n", "    ", "direction_vector", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "1", "]", ")", "\n", "heading_vector", "=", "quaternion_rotate_vector", "(", "quat", ",", "direction_vector", ")", "\n", "phi", "=", "cartesian_to_polar", "(", "-", "heading_vector", "[", "2", "]", ",", "heading_vector", "[", "0", "]", ")", "[", "1", "]", "\n", "return", "np", ".", "array", "(", "phi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.env_utils.construct_envs": [[114, 193], ["habitat.make_dataset", "enumerate", "enumerate", "range", "habitat.VectorEnv", "habitat.make_dataset.get_scenes_to_load", "random.shuffle", "scenes_per_node[].append", "scene_splits[].append", "sum", "len", "config.clone", "config.clone.defrost", "config.clone.freeze", "configs.append", "range", "len", "RuntimeError", "len", "RuntimeError", "range", "range", "map", "len", "tuple", "tuple", "len", "zip", "len", "len"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.exploration_dataset.ExplorationDatasetV1.get_scenes_to_load"], ["", "def", "construct_envs", "(", "\n", "config", ":", "Config", ",", "\n", "env_class", ":", "Type", "[", "Union", "[", "Env", ",", "RLEnv", "]", "]", ",", "\n", "workers_ignore_signals", ":", "bool", "=", "False", ",", "\n", "devices", "=", "None", ",", "\n", ")", "->", "VectorEnv", ":", "\n", "    ", "r\"\"\"Create VectorEnv object with specified config and env class type.\n    To allow better performance, dataset are split into small ones for\n    each individual env, grouped by scenes.\n\n    :param config: configs that contain num_processes as well as information\n    :param necessary to create individual environments.\n    :param env_class: class type of the envs to be created.\n    :param workers_ignore_signals: Passed to :ref:`habitat.VectorEnv`'s constructor\n    :param devices: list of devices over which environments are distributed\n\n    :return: VectorEnv object created according to specification.\n    \"\"\"", "\n", "\n", "num_processes", "=", "config", ".", "NUM_PROCESSES", "\n", "configs", "=", "[", "]", "\n", "env_classes", "=", "[", "env_class", "for", "_", "in", "range", "(", "num_processes", ")", "]", "\n", "dataset", "=", "make_dataset", "(", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "TYPE", ")", "\n", "scenes", "=", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "CONTENT_SCENES", "\n", "if", "\"*\"", "in", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "CONTENT_SCENES", ":", "\n", "        ", "scenes", "=", "dataset", ".", "get_scenes_to_load", "(", "config", ".", "TASK_CONFIG", ".", "DATASET", ")", "\n", "\n", "", "if", "num_processes", ">", "1", ":", "\n", "        ", "if", "len", "(", "scenes", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"No scenes to load, multiple process logic relies on being able to split scenes uniquely between processes\"", "\n", ")", "\n", "\n", "", "if", "len", "(", "scenes", ")", "<", "num_processes", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"reduce the number of processes as there \"", "\n", "\"aren't enough number of scenes\"", "\n", ")", "\n", "\n", "", "random", ".", "shuffle", "(", "scenes", ")", "\n", "\n", "", "if", "devices", "is", "None", ":", "\n", "        ", "devices", "=", "[", "config", ".", "SIMULATOR_GPU_ID", "]", "\n", "\n", "", "world_size", "=", "config", ".", "WORLD_SIZE", "\n", "rank", "=", "config", ".", "RANK", "\n", "scenes_per_node", "=", "[", "[", "]", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "for", "idx", ",", "scene", "in", "enumerate", "(", "scenes", ")", ":", "\n", "        ", "scenes_per_node", "[", "idx", "%", "len", "(", "scenes_per_node", ")", "]", ".", "append", "(", "scene", ")", "\n", "", "scenes", "=", "scenes_per_node", "[", "rank", "]", "\n", "\n", "scene_splits", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_processes", ")", "]", "\n", "for", "idx", ",", "scene", "in", "enumerate", "(", "scenes", ")", ":", "\n", "        ", "scene_splits", "[", "idx", "%", "len", "(", "scene_splits", ")", "]", ".", "append", "(", "scene", ")", "\n", "\n", "", "assert", "sum", "(", "map", "(", "len", ",", "scene_splits", ")", ")", "==", "len", "(", "scenes", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_processes", ")", ":", "\n", "        ", "proc_config", "=", "config", ".", "clone", "(", ")", "\n", "proc_config", ".", "defrost", "(", ")", "\n", "\n", "task_config", "=", "proc_config", ".", "TASK_CONFIG", "\n", "task_config", ".", "SEED", "=", "task_config", ".", "SEED", "+", "i", "\n", "if", "len", "(", "scenes", ")", ">", "0", ":", "\n", "            ", "task_config", ".", "DATASET", ".", "CONTENT_SCENES", "=", "scene_splits", "[", "i", "]", "\n", "\n", "", "task_config", ".", "SIMULATOR", ".", "HABITAT_SIM_V0", ".", "GPU_DEVICE_ID", "=", "devices", "[", "i", "%", "len", "(", "devices", ")", "]", "\n", "\n", "task_config", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", "=", "config", ".", "SENSORS", "\n", "\n", "proc_config", ".", "freeze", "(", ")", "\n", "configs", ".", "append", "(", "proc_config", ")", "\n", "\n", "", "envs", "=", "habitat", ".", "VectorEnv", "(", "\n", "make_env_fn", "=", "make_env_fn", ",", "\n", "env_fn_args", "=", "tuple", "(", "tuple", "(", "zip", "(", "configs", ",", "env_classes", ")", ")", ")", ",", "\n", "workers_ignore_signals", "=", "workers_ignore_signals", ",", "\n", ")", "\n", "return", "envs", "\n", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.FixedCategorical.sample": [[573, 575], ["super().sample().unsqueeze", "super().sample"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.FixedCategorical.sample"], ["    ", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "sample", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.FixedCategorical.log_probs": [[576, 583], ["super().log_prob().view().sum().unsqueeze", "super().log_prob().view().sum", "super().log_prob().view", "actions.size", "super().log_prob", "actions.squeeze"], "methods", ["None"], ["", "def", "log_probs", "(", "self", ",", "actions", ")", ":", "\n", "        ", "return", "(", "\n", "super", "(", ")", "\n", ".", "log_prob", "(", "actions", ".", "squeeze", "(", "-", "1", ")", ")", "\n", ".", "view", "(", "actions", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", ".", "sum", "(", "-", "1", ")", "\n", ".", "unsqueeze", "(", "-", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.FixedCategorical.mode": [[585, 587], ["common.FixedCategorical.probs.argmax"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "probs", ".", "argmax", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.Categorical.__init__": [[590, 598], ["torch.Module.__init__", "init_", "common.init", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.init"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_outputs", ")", ":", "\n", "        ", "super", "(", "Categorical", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "init_", "=", "lambda", "m", ":", "init", "(", "\n", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "constant_", "(", "x", ",", "0", ")", ",", "gain", "=", "0.01", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "init_", "(", "nn", ".", "Linear", "(", "num_inputs", ",", "num_outputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.Categorical.forward": [[599, 602], ["common.Categorical.linear", "common.FixedCategorical"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "return", "FixedCategorical", "(", "logits", "=", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.spatial_transform_map": [[15, 69], ["torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.inverse", "torch.inverse", "torch.inverse", "torch.affine_grid", "torch.grid_sample", "torch.inverse", "torch.inverse", "torch.inverse", "p.size", "torch.zeros", "torch.zeros", "torch.zeros", "p.size"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["def", "spatial_transform_map", "(", "p", ",", "x", ",", "invert", "=", "True", ",", "mode", "=", "\"bilinear\"", ")", ":", "\n", "    ", "\"\"\"\n    Inputs:\n        p     - (bs, f, H, W) Tensor\n        x     - (bs, 3) Tensor (x, y, theta) transforms to perform\n    Outputs:\n        p_trans - (bs, f, H, W) Tensor\n    Conventions:\n        Shift in X is rightward, and shift in Y is downward. Rotation is clockwise.\n\n    Note: These denote transforms in an agent's position. Not the image directly.\n    For example, if an agent is moving upward, then the map will be moving downward.\n    To disable this behavior, set invert=False.\n    \"\"\"", "\n", "device", "=", "p", ".", "device", "\n", "H", ",", "W", "=", "p", ".", "shape", "[", "2", ":", "]", "\n", "\n", "trans_x", "=", "x", "[", ":", ",", "0", "]", "\n", "trans_y", "=", "x", "[", ":", ",", "1", "]", "\n", "# Convert translations to -1.0 to 1.0 range", "\n", "Hby2", "=", "(", "H", "-", "1", ")", "/", "2", "if", "H", "%", "2", "==", "1", "else", "H", "/", "2", "\n", "Wby2", "=", "(", "W", "-", "1", ")", "/", "2", "if", "W", "%", "2", "==", "1", "else", "W", "/", "2", "\n", "\n", "trans_x", "=", "trans_x", "/", "Wby2", "\n", "trans_y", "=", "trans_y", "/", "Hby2", "\n", "rot_t", "=", "x", "[", ":", ",", "2", "]", "\n", "\n", "sin_t", "=", "torch", ".", "sin", "(", "rot_t", ")", "\n", "cos_t", "=", "torch", ".", "cos", "(", "rot_t", ")", "\n", "\n", "# This R convention means Y axis is downwards.", "\n", "A", "=", "torch", ".", "zeros", "(", "p", ".", "size", "(", "0", ")", ",", "3", ",", "3", ")", ".", "to", "(", "device", ")", "\n", "A", "[", ":", ",", "0", ",", "0", "]", "=", "cos_t", "\n", "A", "[", ":", ",", "0", ",", "1", "]", "=", "-", "sin_t", "\n", "A", "[", ":", ",", "1", ",", "0", "]", "=", "sin_t", "\n", "A", "[", ":", ",", "1", ",", "1", "]", "=", "cos_t", "\n", "A", "[", ":", ",", "0", ",", "2", "]", "=", "trans_x", "\n", "A", "[", ":", ",", "1", ",", "2", "]", "=", "trans_y", "\n", "A", "[", ":", ",", "2", ",", "2", "]", "=", "1", "\n", "\n", "# Since this is a source to target mapping, and F.affine_grid expects", "\n", "# target to source mapping, we have to invert this for normal behavior.", "\n", "Ainv", "=", "torch", ".", "inverse", "(", "A", ")", "\n", "\n", "# If target to source mapping is required, invert is enabled and we invert", "\n", "# it again.", "\n", "if", "invert", ":", "\n", "        ", "Ainv", "=", "torch", ".", "inverse", "(", "Ainv", ")", "\n", "\n", "", "Ainv", "=", "Ainv", "[", ":", ",", ":", "2", "]", "\n", "grid", "=", "F", ".", "affine_grid", "(", "Ainv", ",", "p", ".", "size", "(", ")", ",", "align_corners", "=", "True", ")", "\n", "p_trans", "=", "F", ".", "grid_sample", "(", "p", ",", "grid", ",", "mode", "=", "mode", ",", "align_corners", "=", "True", ")", "\n", "\n", "return", "p_trans", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.crop_map": [[71, 126], ["h.size", "torch.arange().unsqueeze().expand().contiguous().float", "torch.arange().unsqueeze().expand().contiguous().float", "torch.arange().unsqueeze().expand().contiguous().float", "torch.arange().unsqueeze().expand().contiguous().float", "torch.arange().unsqueeze().expand().contiguous().float", "torch.arange().unsqueeze().expand().contiguous().float", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to.unsqueeze().expand", "crop_grid.contiguous.contiguous", "torch.grid_sample", "torch.arange().unsqueeze().expand().contiguous", "torch.arange().unsqueeze().expand().contiguous", "torch.arange().unsqueeze().expand().contiguous", "torch.arange().unsqueeze().expand().contiguous", "torch.arange().unsqueeze().expand().contiguous", "torch.arange().unsqueeze().expand().contiguous", "torch.stack", "torch.stack", "torch.stack", "torch.stack().to.unsqueeze", "x_pos.unsqueeze().unsqueeze", "y_pos.unsqueeze().unsqueeze", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "x_pos.unsqueeze", "y_pos.unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["", "def", "crop_map", "(", "h", ",", "x", ",", "crop_size", ",", "mode", "=", "\"bilinear\"", ")", ":", "\n", "    ", "\"\"\"\n    Crops a tensor h centered around location x with size crop_size\n\n    Inputs:\n        h - (bs, F, H, W)\n        x - (bs, 2) --- (x, y) locations\n        crop_size - scalar integer\n\n    Conventions for x:\n        The origin is at the top-left, X is rightward, and Y is downward.\n    \"\"\"", "\n", "\n", "bs", ",", "_", ",", "H", ",", "W", "=", "h", ".", "size", "(", ")", "\n", "Hby2", "=", "(", "H", "-", "1", ")", "/", "2", "if", "H", "%", "2", "==", "1", "else", "H", "//", "2", "\n", "Wby2", "=", "(", "W", "-", "1", ")", "/", "2", "if", "W", "%", "2", "==", "1", "else", "W", "//", "2", "\n", "start", "=", "-", "(", "crop_size", "-", "1", ")", "/", "2", "if", "crop_size", "%", "2", "==", "1", "else", "-", "(", "crop_size", "//", "2", ")", "\n", "end", "=", "start", "+", "crop_size", "-", "1", "\n", "x_grid", "=", "(", "\n", "torch", ".", "arange", "(", "start", ",", "end", "+", "1", ",", "step", "=", "1", ")", "\n", ".", "unsqueeze", "(", "0", ")", "\n", ".", "expand", "(", "crop_size", ",", "-", "1", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "float", "(", ")", "\n", ")", "\n", "y_grid", "=", "(", "\n", "torch", ".", "arange", "(", "start", ",", "end", "+", "1", ",", "step", "=", "1", ")", "\n", ".", "unsqueeze", "(", "1", ")", "\n", ".", "expand", "(", "-", "1", ",", "crop_size", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "float", "(", ")", "\n", ")", "\n", "center_grid", "=", "torch", ".", "stack", "(", "[", "x_grid", ",", "y_grid", "]", ",", "dim", "=", "2", ")", ".", "to", "(", "\n", "h", ".", "device", "\n", ")", "# (crop_size, crop_size, 2)", "\n", "\n", "x_pos", "=", "x", "[", ":", ",", "0", "]", "-", "Wby2", "# (bs, )", "\n", "y_pos", "=", "x", "[", ":", ",", "1", "]", "-", "Hby2", "# (bs, )", "\n", "\n", "crop_grid", "=", "center_grid", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "\n", "bs", ",", "-", "1", ",", "-", "1", ",", "-", "1", "\n", ")", "# (bs, crop_size, crop_size, 2)", "\n", "crop_grid", "=", "crop_grid", ".", "contiguous", "(", ")", "\n", "\n", "# Convert the grid to (-1, 1) range", "\n", "crop_grid", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "(", "\n", "crop_grid", "[", ":", ",", ":", ",", ":", ",", "0", "]", "+", "x_pos", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", ")", "/", "Wby2", "\n", "crop_grid", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "(", "\n", "crop_grid", "[", ":", ",", ":", ",", ":", ",", "1", "]", "+", "y_pos", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", ")", "/", "Hby2", "\n", "\n", "h_cropped", "=", "F", ".", "grid_sample", "(", "h", ",", "crop_grid", ",", "mode", "=", "mode", ",", "align_corners", "=", "True", ")", "\n", "\n", "return", "h_cropped", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.bottom_row_padding": [[128, 144], ["int", "torch.pad", "int", "int", "int", "int"], "function", ["None"], ["", "def", "bottom_row_padding", "(", "p", ")", ":", "\n", "    ", "V", "=", "p", ".", "shape", "[", "2", "]", "\n", "Vby2", "=", "(", "V", "-", "1", ")", "/", "2", "if", "V", "%", "2", "==", "1", "else", "V", "//", "2", "\n", "left_h_pad", "=", "0", "\n", "right_h_pad", "=", "int", "(", "V", "-", "1", ")", "\n", "if", "V", "%", "2", "==", "1", ":", "\n", "        ", "left_w_pad", "=", "int", "(", "Vby2", ")", "\n", "right_w_pad", "=", "int", "(", "Vby2", ")", "\n", "", "else", ":", "\n", "        ", "left_w_pad", "=", "int", "(", "Vby2", ")", "-", "1", "\n", "right_w_pad", "=", "int", "(", "Vby2", ")", "\n", "\n", "# Pad so that the origin is at the center", "\n", "", "p_pad", "=", "F", ".", "pad", "(", "p", ",", "(", "left_w_pad", ",", "right_w_pad", ",", "left_h_pad", ",", "right_h_pad", ")", ",", "\"constant\"", ",", "0", ")", "\n", "\n", "return", "p_pad", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.bottom_row_cropping": [[146, 160], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "common.crop_map", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.crop_map"], ["", "def", "bottom_row_cropping", "(", "p", ",", "map_size", ")", ":", "\n", "    ", "bs", "=", "p", ".", "shape", "[", "0", "]", "\n", "V", "=", "map_size", "\n", "Vby2", "=", "(", "V", "-", "1", ")", "/", "2", "if", "V", "%", "2", "==", "1", "else", "V", "//", "2", "\n", "device", "=", "p", ".", "device", "\n", "\n", "x_crop_center", "=", "torch", ".", "zeros", "(", "bs", ",", "2", ")", ".", "to", "(", "device", ")", "\n", "x_crop_center", "[", ":", ",", "0", "]", "=", "V", "-", "1", "\n", "x_crop_center", "[", ":", ",", "1", "]", "=", "Vby2", "\n", "x_crop_size", "=", "V", "\n", "\n", "p_cropped", "=", "crop_map", "(", "p", ",", "x_crop_center", ",", "x_crop_size", ")", "\n", "\n", "return", "p_cropped", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.init": [[162, 166], ["bias_init", "torch.nn.init.orthogonal_"], "function", ["None"], ["", "def", "init", "(", "module", ",", "weight_init", ",", "bias_init", ",", "gain", "=", "1", ")", ":", "\n", "    ", "weight_init", "(", "module", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "bias_init", "(", "module", ".", "bias", ".", "data", ")", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.convert_world2map": [[168, 193], ["torch.clamp().round", "torch.clamp().round", "torch.clamp().round", "torch.clamp().round", "torch.clamp().round", "torch.clamp().round", "torch.stack", "torch.stack", "torch.stack", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "function", ["None"], ["", "def", "convert_world2map", "(", "world_coors", ",", "map_shape", ",", "map_scale", ")", ":", "\n", "    ", "\"\"\"\n    World coordinate system:\n        Agent starts at (0, 0) facing upward along X. Y is rightward.\n    Map coordinate system:\n        Agent starts at (W/2, H/2) with X rightward and Y downward.\n\n    Inputs:\n        world_coors: (bs, 2) --- (x, y) in world coordinates\n        map_shape: tuple with (H, W)\n        map_scale: scalar indicating the cell size in the map\n    \"\"\"", "\n", "H", ",", "W", "=", "map_shape", "\n", "Hby2", "=", "(", "H", "-", "1", ")", "/", "2", "if", "H", "%", "2", "==", "1", "else", "H", "//", "2", "\n", "Wby2", "=", "(", "W", "-", "1", ")", "/", "2", "if", "W", "%", "2", "==", "1", "else", "W", "//", "2", "\n", "\n", "x_world", "=", "world_coors", "[", ":", ",", "0", "]", "\n", "y_world", "=", "world_coors", "[", ":", ",", "1", "]", "\n", "\n", "x_map", "=", "torch", ".", "clamp", "(", "(", "Wby2", "+", "y_world", "/", "map_scale", ")", ",", "0", ",", "W", "-", "1", ")", ".", "round", "(", ")", "\n", "y_map", "=", "torch", ".", "clamp", "(", "(", "Hby2", "-", "x_world", "/", "map_scale", ")", ",", "0", ",", "H", "-", "1", ")", ".", "round", "(", ")", "\n", "\n", "map_coors", "=", "torch", ".", "stack", "(", "[", "x_map", ",", "y_map", "]", ",", "dim", "=", "1", ")", "# (bs, 2)", "\n", "\n", "return", "map_coors", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.convert_map2world": [[195, 220], ["torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "convert_map2world", "(", "map_coors", ",", "map_shape", ",", "map_scale", ")", ":", "\n", "    ", "\"\"\"\n    World coordinate system:\n        Agent starts at (0, 0) facing upward along X. Y is rightward.\n    Map coordinate system:\n        Agent starts at (W/2, H/2) with X rightward and Y downward.\n\n    Inputs:\n        map_coors: (bs, 2) --- (x, y) in map coordinates\n        map_shape: tuple with (H, W)\n        map_scale: scalar indicating the cell size in the map\n    \"\"\"", "\n", "H", ",", "W", "=", "map_shape", "\n", "Hby2", "=", "(", "H", "-", "1", ")", "/", "2", "if", "H", "%", "2", "==", "1", "else", "H", "//", "2", "\n", "Wby2", "=", "(", "W", "-", "1", ")", "/", "2", "if", "W", "%", "2", "==", "1", "else", "W", "//", "2", "\n", "\n", "x_map", "=", "map_coors", "[", ":", ",", "0", "]", "\n", "y_map", "=", "map_coors", "[", ":", ",", "1", "]", "\n", "\n", "x_world", "=", "(", "Hby2", "-", "y_map", ")", "*", "map_scale", "\n", "y_world", "=", "(", "x_map", "-", "Wby2", ")", "*", "map_scale", "\n", "\n", "world_coors", "=", "torch", ".", "stack", "(", "[", "x_world", ",", "y_world", "]", ",", "dim", "=", "1", ")", "# (bs, 2)", "\n", "\n", "return", "world_coors", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.subtract_pose": [[222, 248], ["torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.atan2", "torch.atan2", "torch.atan2", "torch.stack", "torch.stack", "torch.stack", "torch.atan2", "torch.atan2", "torch.atan2", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin"], "function", ["None"], ["", "def", "subtract_pose", "(", "pose_a", ",", "pose_b", ")", ":", "\n", "    ", "\"\"\"\n    Compute pose of pose_b in the egocentric coordinate frame of pose_a.\n    Inputs:\n        pose_a - (bs, 3) --- (x, y, theta)\n        pose_b - (bs, 3) --- (x, y, theta)\n\n    Conventions:\n        The origin is at the center of the map.\n        X is upward with agent's forward direction\n        Y is rightward with agent's rightward direction\n    \"\"\"", "\n", "\n", "x_a", ",", "y_a", ",", "theta_a", "=", "torch", ".", "unbind", "(", "pose_a", ",", "dim", "=", "1", ")", "\n", "x_b", ",", "y_b", ",", "theta_b", "=", "torch", ".", "unbind", "(", "pose_b", ",", "dim", "=", "1", ")", "\n", "\n", "r_ab", "=", "torch", ".", "sqrt", "(", "(", "x_a", "-", "x_b", ")", "**", "2", "+", "(", "y_a", "-", "y_b", ")", "**", "2", ")", "# (bs, )", "\n", "phi_ab", "=", "torch", ".", "atan2", "(", "y_b", "-", "y_a", ",", "x_b", "-", "x_a", ")", "-", "theta_a", "# (bs, )", "\n", "theta_ab", "=", "theta_b", "-", "theta_a", "# (bs, )", "\n", "theta_ab", "=", "torch", ".", "atan2", "(", "torch", ".", "sin", "(", "theta_ab", ")", ",", "torch", ".", "cos", "(", "theta_ab", ")", ")", "\n", "\n", "x_ab", "=", "torch", ".", "stack", "(", "\n", "[", "r_ab", "*", "torch", ".", "cos", "(", "phi_ab", ")", ",", "r_ab", "*", "torch", ".", "sin", "(", "phi_ab", ")", ",", "theta_ab", ",", "]", ",", "dim", "=", "1", "\n", ")", "# (bs, 3)", "\n", "\n", "return", "x_ab", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.add_pose": [[250, 277], ["torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.stack", "torch.stack", "torch.stack", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin"], "function", ["None"], ["", "def", "add_pose", "(", "pose_a", ",", "pose_ab", ")", ":", "\n", "    ", "\"\"\"\n    Add pose_ab (in ego-coordinates of pose_a) to pose_a\n    Inputs:\n        pose_a - (bs, 3) --- (x, y, theta)\n        pose_b - (bs, 3) --- (x, y, theta)\n\n    Conventions:\n        The origin is at the center of the map.\n        X is upward with agent's forward direction\n        Y is rightward with agent's rightward direction\n    \"\"\"", "\n", "\n", "x_a", ",", "y_a", ",", "theta_a", "=", "torch", ".", "unbind", "(", "pose_a", ",", "dim", "=", "1", ")", "\n", "x_ab", ",", "y_ab", ",", "theta_ab", "=", "torch", ".", "unbind", "(", "pose_ab", ",", "dim", "=", "1", ")", "\n", "\n", "r_ab", "=", "torch", ".", "sqrt", "(", "x_ab", "**", "2", "+", "y_ab", "**", "2", ")", "\n", "phi_ab", "=", "torch", ".", "atan2", "(", "y_ab", ",", "x_ab", ")", "\n", "\n", "x_b", "=", "x_a", "+", "r_ab", "*", "torch", ".", "cos", "(", "phi_ab", "+", "theta_a", ")", "\n", "y_b", "=", "y_a", "+", "r_ab", "*", "torch", ".", "sin", "(", "phi_ab", "+", "theta_a", ")", "\n", "theta_b", "=", "theta_a", "+", "theta_ab", "\n", "theta_b", "=", "torch", ".", "atan2", "(", "torch", ".", "sin", "(", "theta_b", ")", ",", "torch", ".", "cos", "(", "theta_b", ")", ")", "\n", "\n", "pose_b", "=", "torch", ".", "stack", "(", "[", "x_b", ",", "y_b", ",", "theta_b", "]", ",", "dim", "=", "1", ")", "# (bs, 3)", "\n", "\n", "return", "pose_b", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.flatten_two": [[279, 281], ["x.view"], "function", ["None"], ["", "def", "flatten_two", "(", "x", ")", ":", "\n", "    ", "return", "x", ".", "view", "(", "-", "1", ",", "*", "x", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.unflatten_two": [[283, 285], ["x.view"], "function", ["None"], ["", "def", "unflatten_two", "(", "x", ",", "sh1", ",", "sh2", ")", ":", "\n", "    ", "return", "x", ".", "view", "(", "sh1", ",", "sh2", ",", "*", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.transpose_image": [[287, 294], ["img.permute"], "function", ["None"], ["", "def", "transpose_image", "(", "img", ")", ":", "\n", "    ", "\"\"\"\n    Inputs:\n        img - (bs, H, W, C) torch Tensor\n    \"\"\"", "\n", "img_p", "=", "img", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# (bs, C, H, W)", "\n", "return", "img_p", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.process_image": [[296, 323], ["einops.rearrange", "img.float", "type", "type", "einops.rearrange().to", "einops.rearrange().to", "img_mean.to", "img_std.to", "einops.rearrange", "einops.rearrange", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["", "def", "process_image", "(", "img", ",", "img_mean", ",", "img_std", ")", ":", "\n", "    ", "\"\"\"\n    Convert HWC -> CHW, normalize image.\n    Inputs:\n        img - (bs, H, W, C) torch Tensor\n        img_mean - list of per-channel means\n        img_std - list of per-channel stds\n\n    Outputs:\n        img_p - (bs, C, H, W)\n    \"\"\"", "\n", "C", "=", "img", ".", "shape", "[", "3", "]", "\n", "device", "=", "img", ".", "device", "\n", "\n", "img_p", "=", "rearrange", "(", "img", ".", "float", "(", ")", ",", "\"b h w c -> b c h w\"", ")", "\n", "img_p", "=", "img_p", "/", "255.0", "# (bs, C, H, W)", "\n", "\n", "if", "type", "(", "img_mean", ")", "==", "type", "(", "[", "]", ")", ":", "\n", "        ", "img_mean_t", "=", "rearrange", "(", "torch", ".", "Tensor", "(", "img_mean", ")", ",", "\"c -> () c () ()\"", ")", ".", "to", "(", "device", ")", "\n", "img_std_t", "=", "rearrange", "(", "torch", ".", "Tensor", "(", "img_std", ")", ",", "\"c -> () c () ()\"", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "img_mean_t", "=", "img_mean", ".", "to", "(", "device", ")", "\n", "img_std_t", "=", "img_std", ".", "to", "(", "device", ")", "\n", "\n", "", "img_p", "=", "(", "img_p", "-", "img_mean_t", ")", "/", "img_std_t", "\n", "\n", "return", "img_p", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.unprocess_image": [[325, 346], ["einops.rearrange().to", "einops.rearrange().to", "einops.rearrange", "einops.rearrange", "einops.rearrange", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.common.rollout_storage.RolloutStorageExtended.to"], ["", "def", "unprocess_image", "(", "img_p", ",", "img_mean", ",", "img_std", ")", ":", "\n", "    ", "\"\"\"\n    Unnormalize image, Convert CHW -> HWC\n    Inputs:\n        img_p - (bs, C, H, W)\n        img_mean - list of per-channel means\n        img_std - list of per-channel stds\n\n    Outputs:\n        img - (bs, H, W, C) torch Tensor\n    \"\"\"", "\n", "device", "=", "img_p", ".", "device", "\n", "\n", "img_mean_t", "=", "rearrange", "(", "torch", ".", "Tensor", "(", "img_mean", ")", ",", "\"c -> () c () ()\"", ")", ".", "to", "(", "device", ")", "\n", "img_std_t", "=", "rearrange", "(", "torch", ".", "Tensor", "(", "img_std", ")", ",", "\"c -> () c () ()\"", ")", ".", "to", "(", "device", ")", "\n", "\n", "img", "=", "img_p", "*", "img_std_t", "+", "img_mean_t", "\n", "img", "=", "img", "*", "255.0", "\n", "img", "=", "rearrange", "(", "img", ",", "\"b c h w -> b h w c\"", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.padded_resize": [[348, 367], ["torch.pad", "torch.interpolate"], "function", ["None"], ["", "def", "padded_resize", "(", "x", ",", "size", ")", ":", "\n", "    ", "\"\"\"For an image tensor of size (bs, c, h, w), resize it such that the\n    larger dimension (h or w) is scaled to `size` and the other dimension is\n    zero-padded on both sides to get `size`.\n    \"\"\"", "\n", "h", ",", "w", "=", "x", ".", "shape", "[", "2", ":", "]", "\n", "top_pad", "=", "0", "\n", "bot_pad", "=", "0", "\n", "left_pad", "=", "0", "\n", "right_pad", "=", "0", "\n", "if", "h", ">", "w", ":", "\n", "        ", "left_pad", "=", "(", "h", "-", "w", ")", "//", "2", "\n", "right_pad", "=", "(", "h", "-", "w", ")", "-", "left_pad", "\n", "", "elif", "w", ">", "h", ":", "\n", "        ", "top_pad", "=", "(", "w", "-", "h", ")", "//", "2", "\n", "bot_pad", "=", "(", "w", "-", "h", ")", "-", "top_pad", "\n", "", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "left_pad", ",", "right_pad", ",", "top_pad", ",", "bot_pad", ")", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.grow_projected_map": [[369, 477], ["numpy.copy", "range", "numpy.ones", "range", "cv2.dilate", "numpy.ones", "cv2.morphologyEx", "numpy.ones", "range", "numpy.ones", "range", "numpy.ones", "cv2.morphologyEx", "numpy.zeros", "numpy.ones", "range", "cv2.Canny", "cv2.dilate", "numpy.ones", "range", "cv2.Canny", "cv2.dilate", "cv2.dilate", "cv2.morphologyEx", "free_mask.astype", "cv2.morphologyEx", "occ_mask.astype"], "function", ["None"], ["", "def", "grow_projected_map", "(", "proj_map", ",", "local_map", ",", "iterations", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    proj_map - (H, W, 2) map\n    local_map - (H, W, 2) map\n\n    channel 0 - 1 if occupied, 0 otherwise\n    channel 1 - 1 if explored, 0 otherwise\n    \"\"\"", "\n", "proj_map", "=", "np", ".", "copy", "(", "proj_map", ")", "\n", "HEIGHT", ",", "WIDTH", "=", "proj_map", ".", "shape", "[", ":", "2", "]", "\n", "\n", "explored_local_mask", "=", "local_map", "[", "...", ",", "1", "]", "==", "1", "\n", "free_local_mask", "=", "(", "local_map", "[", "...", ",", "0", "]", "==", "0", ")", "&", "explored_local_mask", "\n", "occ_local_mask", "=", "(", "local_map", "[", "...", ",", "0", "]", "==", "1", ")", "&", "explored_local_mask", "\n", "\n", "# Iteratively expand multiple times", "\n", "for", "i", "in", "range", "(", "iterations", ")", ":", "\n", "# Generate regions which are predictable", "\n", "\n", "# ================ Processing free space ===========================", "\n", "# Pick only free areas that are visible", "\n", "        ", "explored_proj_map", "=", "(", "proj_map", "[", "...", ",", "1", "]", "==", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "\n", "free_proj_map", "=", "(", "(", "proj_map", "[", "...", ",", "0", "]", "==", "0", ")", "&", "explored_proj_map", ")", ".", "astype", "(", "\n", "np", ".", "uint8", "\n", ")", "*", "255", "\n", "occ_proj_map", "=", "(", "(", "proj_map", "[", "...", ",", "0", "]", "==", "1", ")", "&", "explored_proj_map", ")", ".", "astype", "(", "\n", "np", ".", "uint8", "\n", ")", "*", "255", "\n", "\n", "# For the first iteration, aggressively close holes", "\n", "if", "i", "==", "0", ":", "\n", "            ", "close_kernel", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "for", "itr", "in", "range", "(", "5", ")", ":", "\n", "                ", "free_proj_map", "=", "cv2", ".", "morphologyEx", "(", "\n", "free_proj_map", ",", "cv2", ".", "MORPH_CLOSE", ",", "close_kernel", "\n", ")", "\n", "", "free_proj_map", "=", "(", "free_proj_map", ">", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "\n", "\n", "", "dilate_kernel", "=", "np", ".", "ones", "(", "(", "7", ",", "7", ")", ",", "np", ".", "uint8", ")", "\n", "\n", "# Expand only GT free area", "\n", "for", "itr", "in", "range", "(", "2", ")", ":", "\n", "            ", "free_proj_map_edges", "=", "cv2", ".", "Canny", "(", "free_proj_map", ",", "50", ",", "100", ")", "\n", "free_proj_map_edges_dilated", "=", "cv2", ".", "dilate", "(", "\n", "free_proj_map_edges", ",", "dilate_kernel", ",", "iterations", "=", "3", "\n", ")", "\n", "free_mask", "=", "(", "\n", "(", "free_proj_map_edges_dilated", ">", "0", ")", "|", "(", "free_proj_map", ">", "0", ")", "\n", ")", "&", "free_local_mask", "\n", "free_proj_map", "=", "free_mask", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "\n", "\n", "# Dilate to include some occupied area", "\n", "", "free_proj_map", "=", "cv2", ".", "dilate", "(", "free_proj_map", ",", "dilate_kernel", ",", "iterations", "=", "1", ")", "\n", "free_proj_map", "=", "(", "free_proj_map", ">", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# Close holes", "\n", "close_kernel", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "free_proj_map", "=", "cv2", ".", "morphologyEx", "(", "free_proj_map", ",", "cv2", ".", "MORPH_CLOSE", ",", "close_kernel", ")", "\n", "\n", "# ================ Processing occupied space ===========================", "\n", "# For the first iteration, aggressively close holes", "\n", "if", "i", "==", "0", ":", "\n", "            ", "close_kernel", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "for", "itr", "in", "range", "(", "3", ")", ":", "\n", "                ", "occ_proj_map", "=", "cv2", ".", "morphologyEx", "(", "\n", "occ_proj_map", ",", "cv2", ".", "MORPH_CLOSE", ",", "close_kernel", "\n", ")", "\n", "", "occ_proj_map", "=", "(", "occ_proj_map", ">", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "\n", "\n", "", "dilate_kernel", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "\n", "# Expand only GT occupied area", "\n", "for", "itr", "in", "range", "(", "1", ")", ":", "\n", "            ", "occ_proj_map_edges", "=", "cv2", ".", "Canny", "(", "occ_proj_map", ",", "50", ",", "100", ")", "\n", "occ_proj_map_edges_dilated", "=", "cv2", ".", "dilate", "(", "\n", "occ_proj_map_edges", ",", "dilate_kernel", ",", "iterations", "=", "3", "\n", ")", "\n", "occ_mask", "=", "(", "\n", "(", "occ_proj_map_edges_dilated", ">", "0", ")", "|", "(", "occ_proj_map", ">", "0", ")", "\n", ")", "&", "occ_local_mask", "\n", "occ_proj_map", "=", "occ_mask", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "\n", "\n", "", "dilate_kernel", "=", "np", ".", "ones", "(", "(", "9", ",", "9", ")", ",", "np", ".", "uint8", ")", "\n", "# Expand the free space around the GT occupied area", "\n", "for", "itr", "in", "range", "(", "2", ")", ":", "\n", "            ", "occ_proj_map_dilated", "=", "cv2", ".", "dilate", "(", "occ_proj_map", ",", "dilate_kernel", ",", "iterations", "=", "3", ")", "\n", "free_mask_around_occ", "=", "(", "occ_proj_map_dilated", ">", "0", ")", "&", "free_local_mask", "\n", "occ_proj_map", "=", "(", "(", "occ_proj_map", ">", "0", ")", "|", "free_mask_around_occ", ")", ".", "astype", "(", "\n", "np", ".", "uint8", "\n", ")", "*", "255", "\n", "\n", "# Close holes", "\n", "", "close_kernel", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "occ_proj_map", "=", "cv2", ".", "morphologyEx", "(", "occ_proj_map", ",", "cv2", ".", "MORPH_CLOSE", ",", "close_kernel", ")", "\n", "\n", "# Include originally present areas in proj_map", "\n", "predictable_regions_mask", "=", "(", "\n", "(", "explored_proj_map", ">", "0", ")", "|", "(", "free_proj_map", ">", "0", ")", "|", "(", "occ_proj_map", ">", "0", ")", "\n", ")", "\n", "\n", "# Create new proj_map", "\n", "proj_map", "=", "np", ".", "zeros", "(", "(", "HEIGHT", ",", "WIDTH", ",", "2", ")", ",", "np", ".", "float32", ")", "\n", "proj_map", "[", "predictable_regions_mask", "&", "occ_local_mask", ",", "0", "]", "=", "1", "\n", "proj_map", "[", "predictable_regions_mask", ",", "1", "]", "=", "1", "\n", "\n", "", "gt_map", "=", "proj_map", "\n", "\n", "return", "gt_map", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.convert_gt2channel_to_gtrgb": [[479, 505], ["numpy.stack().astype", "numpy.stack"], "function", ["None"], ["", "def", "convert_gt2channel_to_gtrgb", "(", "gts", ")", ":", "\n", "    ", "\"\"\"\n    Inputs:\n        gts   - (H, W, 2) numpy array with values between 0.0 to 1.0\n              - channel 0 is 1 if occupied space\n              - channel 1 is 1 if explored space\n    \"\"\"", "\n", "H", ",", "W", ",", "_", "=", "gts", ".", "shape", "\n", "\n", "exp_mask", "=", "(", "gts", "[", "...", ",", "1", "]", ">=", "0.5", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "occ_mask", "=", "(", "gts", "[", "...", ",", "0", "]", ">=", "0.5", ")", ".", "astype", "(", "np", ".", "float32", ")", "*", "exp_mask", "\n", "free_mask", "=", "(", "gts", "[", "...", ",", "0", "]", "<", "0.5", ")", ".", "astype", "(", "np", ".", "float32", ")", "*", "exp_mask", "\n", "unk_mask", "=", "1", "-", "exp_mask", "\n", "\n", "gt_imgs", "=", "np", ".", "stack", "(", "\n", "[", "\n", "0.0", "*", "occ_mask", "+", "0.0", "*", "free_mask", "+", "255.0", "*", "unk_mask", ",", "\n", "0.0", "*", "occ_mask", "+", "255.0", "*", "free_mask", "+", "255.0", "*", "unk_mask", ",", "\n", "255.0", "*", "occ_mask", "+", "0.0", "*", "free_mask", "+", "255.0", "*", "unk_mask", ",", "\n", "]", ",", "\n", "axis", "=", "2", ",", "\n", ")", ".", "astype", "(", "\n", "np", ".", "uint8", "\n", ")", "# (H, W, 3)", "\n", "\n", "return", "gt_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.convert_gtrgb_to_gt2channel": [[507, 523], ["numpy.zeros", "numpy.all", "numpy.all", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "convert_gtrgb_to_gt2channel", "(", "gtrgb", ")", ":", "\n", "    ", "\"\"\"\n    gt - (H, W, 3) RGB image with\n         (0, 255, 0) for free space,\n         (0, 0, 255) for occupied space,\n         (0, 0, 0) for unknown space\n    \"\"\"", "\n", "gt2channel", "=", "np", ".", "zeros", "(", "(", "*", "gtrgb", ".", "shape", "[", ":", "2", "]", ",", "2", ")", ")", "\n", "free_space", "=", "np", ".", "all", "(", "gtrgb", "==", "np", ".", "array", "(", "[", "0", ",", "255", ",", "0", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "occ_space", "=", "np", ".", "all", "(", "gtrgb", "==", "np", ".", "array", "(", "[", "0", ",", "0", ",", "255", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "explored_space", "=", "free_space", "|", "occ_space", "\n", "\n", "gt2channel", "[", "occ_space", ",", "0", "]", "=", "1.0", "\n", "gt2channel", "[", "explored_space", ",", "1", "]", "=", "1.0", "\n", "\n", "return", "gt2channel", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.dilate_tensor": [[525, 540], ["range", "type", "tuple", "torch.max_pool2d"], "function", ["None"], ["", "def", "dilate_tensor", "(", "x", ",", "size", ",", "iterations", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    x - (bs, C, H, W)\n    size - int / tuple of intes\n\n    Assumes a kernel of ones with size 'size'.\n    \"\"\"", "\n", "if", "type", "(", "size", ")", "==", "int", ":", "\n", "        ", "padding", "=", "size", "//", "2", "\n", "", "else", ":", "\n", "        ", "padding", "=", "tuple", "(", "[", "v", "//", "2", "for", "v", "in", "size", "]", ")", "\n", "", "for", "i", "in", "range", "(", "iterations", ")", ":", "\n", "        ", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.erode_tensor": [[542, 557], ["range", "type", "tuple", "torch.max_pool2d"], "function", ["None"], ["", "def", "erode_tensor", "(", "x", ",", "size", ",", "iterations", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    x - (bs, C, H, W)\n    size - int / tuple of intes\n\n    Assumes a kernel of ones with size 'size'.\n    \"\"\"", "\n", "if", "type", "(", "size", ")", "==", "int", ":", "\n", "        ", "padding", "=", "size", "//", "2", "\n", "", "else", ":", "\n", "        ", "padding", "=", "tuple", "(", "[", "v", "//", "2", "for", "v", "in", "size", "]", ")", "\n", "", "for", "i", "in", "range", "(", "iterations", ")", ":", "\n", "        ", "x", "=", "-", "F", ".", "max_pool2d", "(", "-", "x", ",", "size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.morphology_close": [[559, 569], ["common.dilate_tensor", "common.erode_tensor"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.dilate_tensor", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.common.erode_tensor"], ["", "def", "morphology_close", "(", "x", ",", "size", ",", "iterations", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    x - (bs, C, H, W)\n    size - int / tuple of intes\n\n    Assumes a kernel of ones with size 'size'.\n    \"\"\"", "\n", "x", "=", "dilate_tensor", "(", "x", ",", "size", ",", "iterations", ")", "\n", "x", "=", "erode_tensor", "(", "x", ",", "size", ",", "iterations", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.Metric.__init__": [[464, 466], ["metrics.Metric.reset"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.Metric.update": [[467, 472], ["metrics.Metric._metric_list.append", "metrics.Metric._count_list.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "size", ")", ":", "\n", "        ", "self", ".", "_metric", "+=", "val", "\n", "self", ".", "_count", "+=", "size", "\n", "self", ".", "_metric_list", ".", "append", "(", "val", ")", "\n", "self", ".", "_count_list", ".", "append", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.Metric.get_metric": [[473, 475], ["None"], "methods", ["None"], ["", "def", "get_metric", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_metric", "/", "(", "self", ".", "_count", "+", "EPS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.Metric.metric_list": [[476, 479], ["copy.deepcopy"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric_list", "(", "self", ")", ":", "\n", "        ", "return", "copy", ".", "deepcopy", "(", "self", ".", "_metric_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.Metric.count_list": [[480, 483], ["copy.deepcopy"], "methods", ["None"], ["", "@", "property", "\n", "def", "count_list", "(", "self", ")", ":", "\n", "        ", "return", "copy", ".", "deepcopy", "(", "self", ".", "_count_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.Metric.reset": [[484, 489], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_metric", "=", "0.0", "\n", "self", ".", "_count", "=", "0.0", "\n", "self", ".", "_metric_list", "=", "[", "]", "\n", "self", ".", "_count_list", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.__init__": [[492, 494], ["metrics.TemporalMetric.reset"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.update": [[495, 500], ["metrics.TemporalMetric._metric[].update", "metrics.Metric", "metrics.Metric"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.update"], ["", "def", "update", "(", "self", ",", "val", ",", "size", ",", "time", ")", ":", "\n", "        ", "if", "time", "not", "in", "self", ".", "_metric", ":", "\n", "            ", "self", ".", "_metric", "[", "time", "]", "=", "Metric", "(", ")", "\n", "self", ".", "_count", "[", "time", "]", "=", "Metric", "(", ")", "\n", "", "self", ".", "_metric", "[", "time", "]", ".", "update", "(", "val", ",", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.get_metric": [[501, 506], ["metrics.TemporalMetric._metric.keys", "metrics.TemporalMetric._metric[].get_metric"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.get_metric"], ["", "def", "get_metric", "(", "self", ")", ":", "\n", "        ", "metrics", "=", "{", "}", "\n", "for", "time", "in", "self", ".", "_metric", ".", "keys", "(", ")", ":", "\n", "            ", "metrics", "[", "time", "]", "=", "self", ".", "_metric", "[", "time", "]", ".", "get_metric", "(", ")", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.get_last_metric": [[507, 510], ["sorted", "metrics.TemporalMetric._metric[].get_metric", "list", "metrics.TemporalMetric._metric.keys"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.get_metric"], ["", "def", "get_last_metric", "(", "self", ")", ":", "\n", "        ", "times", "=", "sorted", "(", "list", "(", "self", ".", "_metric", ".", "keys", "(", ")", ")", ")", "\n", "return", "self", ".", "_metric", "[", "times", "[", "-", "1", "]", "]", ".", "get_metric", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.metric_list": [[511, 517], ["metrics.TemporalMetric._metric.keys"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric_list", "(", "self", ")", ":", "\n", "        ", "metrics", "=", "{", "}", "\n", "for", "time", "in", "self", ".", "_metric", ".", "keys", "(", ")", ":", "\n", "            ", "metrics", "[", "time", "]", "=", "self", ".", "_metric", "[", "time", "]", ".", "metric_list", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.count_list": [[518, 524], ["metrics.TemporalMetric._metric.keys"], "methods", ["None"], ["", "@", "property", "\n", "def", "count_list", "(", "self", ")", ":", "\n", "        ", "counts", "=", "{", "}", "\n", "for", "time", "in", "self", ".", "_metric", ".", "keys", "(", ")", ":", "\n", "            ", "counts", "[", "time", "]", "=", "self", ".", "_metric", "[", "time", "]", ".", "count_list", "\n", "", "return", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.TemporalMetric.reset": [[525, 528], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_metric", "=", "{", "}", "\n", "self", ".", "_count", "=", "{", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.rad2deg": [[17, 19], ["None"], "function", ["None"], ["def", "rad2deg", "(", "tensor", ")", ":", "\n", "    ", "return", "180.0", "*", "tensor", "/", "math", ".", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.compute_translation_error": [[24, 37], ["torch.sqrt", "torch.sqrt", "torch.mse_loss"], "function", ["None"], ["", "def", "compute_translation_error", "(", "pred_pose", ",", "gt_pose", ",", "reduction", "=", "\"mean\"", ")", ":", "\n", "    ", "\"\"\"\n    Computes the error (meters) in translation components of pose prediction.\n    Inputs:\n        pred_pose - (bs, 3) --- (x, y, theta)\n        gt_pose   - (bs, 3) --- (x, y, theta)\n\n    Note: x, y must be in meters.\n    \"\"\"", "\n", "error", "=", "torch", ".", "sqrt", "(", "\n", "F", ".", "mse_loss", "(", "pred_pose", "[", ":", ",", ":", "2", "]", ",", "gt_pose", "[", ":", ",", ":", "2", "]", ",", "reduction", "=", "reduction", ")", "\n", ")", "\n", "return", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.compute_angular_error": [[39, 64], ["torch.atan2", "torch.atan2", "torch.abs", "torch.abs", "metrics.rad2deg", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "error.sum.mean", "error.sum.sum"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.rad2deg"], ["", "def", "compute_angular_error", "(", "pred_pose", ",", "gt_pose", ",", "reduction", "=", "\"mean\"", ")", ":", "\n", "    ", "\"\"\"\n    Computes the error (degrees) in rotation components of pose prediction.\n    Inputs:\n        pred_pose - (bs, 3) --- (x, y, theta)\n        gt_pose   - (bs, 3) --- (x, y, theta)\n\n    Note: theta must be in radians.\n    \"\"\"", "\n", "angular_diff", "=", "pred_pose", "[", ":", ",", "2", "]", "-", "gt_pose", "[", ":", ",", "2", "]", "\n", "normalized_angular_diff", "=", "torch", ".", "atan2", "(", "\n", "torch", ".", "sin", "(", "angular_diff", ")", ",", "torch", ".", "cos", "(", "angular_diff", ")", "\n", ")", "\n", "error", "=", "torch", ".", "abs", "(", "normalized_angular_diff", ")", "\n", "\n", "if", "reduction", "==", "\"mean\"", ":", "\n", "        ", "error", "=", "error", ".", "mean", "(", ")", "\n", "", "elif", "reduction", "==", "\"none\"", ":", "\n", "        ", "error", "=", "error", "\n", "", "elif", "reduction", "==", "\"sum\"", ":", "\n", "        ", "error", "=", "error", ".", "sum", "(", ")", "\n", "\n", "", "error", "=", "rad2deg", "(", "error", ")", "\n", "\n", "return", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.measure_pose_estimation_performance": [[66, 76], ["metrics.compute_translation_error", "metrics.compute_angular_error", "trans_error.item.item", "ang_error.item.item"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.compute_translation_error", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.compute_angular_error"], ["", "def", "measure_pose_estimation_performance", "(", "pred_pose", ",", "gt_pose", ",", "reduction", "=", "\"mean\"", ")", ":", "\n", "    ", "trans_error", "=", "compute_translation_error", "(", "pred_pose", ",", "gt_pose", ",", "reduction", "=", "reduction", ")", "\n", "ang_error", "=", "compute_angular_error", "(", "pred_pose", ",", "gt_pose", ",", "reduction", "=", "reduction", ")", "\n", "if", "reduction", "!=", "\"none\"", ":", "\n", "        ", "trans_error", "=", "trans_error", ".", "item", "(", ")", "\n", "ang_error", "=", "ang_error", ".", "item", "(", ")", "\n", "\n", "", "metrics", "=", "{", "\"translation_error\"", ":", "trans_error", ",", "\"angular_error\"", ":", "ang_error", "}", "\n", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.measure_area_seen_performance": [[81, 114], ["explored_map.view().sum", "occ_space_map.view().sum", "free_space_map.view().sum", "area_seen.sum().item.mean().item", "free_space_seen.sum().item.mean().item", "occupied_space_seen.sum().item.mean().item", "explored_map.view", "occ_space_map.view", "free_space_map.view", "area_seen.sum().item.sum().item", "free_space_seen.sum().item.sum().item", "occupied_space_seen.sum().item.sum().item", "area_seen.sum().item.mean", "free_space_seen.sum().item.mean", "occupied_space_seen.sum().item.mean", "area_seen.sum().item.sum", "free_space_seen.sum().item.sum", "occupied_space_seen.sum().item.sum"], "function", ["None"], ["", "def", "measure_area_seen_performance", "(", "map_states", ",", "map_scale", "=", "1.0", ",", "reduction", "=", "\"mean\"", ")", ":", "\n", "    ", "\"\"\"\n    Inputs:\n        map_states - (bs, 2, M, M) world map with channel 0 representing occupied\n                     regions (1s) and channel 1 representing explored regions (1s)\n    \"\"\"", "\n", "\n", "bs", "=", "map_states", ".", "shape", "[", "0", "]", "\n", "explored_map", "=", "(", "map_states", "[", ":", ",", "1", "]", ">", "0.5", ")", ".", "float", "(", ")", "# (bs, M, M)", "\n", "occ_space_map", "=", "(", "map_states", "[", ":", ",", "0", "]", ">", "0.5", ")", ".", "float", "(", ")", "*", "explored_map", "# (bs, M, M)", "\n", "free_space_map", "=", "(", "map_states", "[", ":", ",", "0", "]", "<=", "0.5", ")", ".", "float", "(", ")", "*", "explored_map", "# (bs, M, M)", "\n", "\n", "all_cells_seen", "=", "explored_map", ".", "view", "(", "bs", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "# (bs, )", "\n", "occ_cells_seen", "=", "occ_space_map", ".", "view", "(", "bs", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "# (bs, )", "\n", "free_cells_seen", "=", "free_space_map", ".", "view", "(", "bs", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "# (bs, )", "\n", "\n", "area_seen", "=", "all_cells_seen", "*", "(", "map_scale", "**", "2", ")", "\n", "free_space_seen", "=", "free_cells_seen", "*", "(", "map_scale", "**", "2", ")", "\n", "occupied_space_seen", "=", "occ_cells_seen", "*", "(", "map_scale", "**", "2", ")", "\n", "\n", "if", "reduction", "==", "\"mean\"", ":", "\n", "        ", "area_seen", "=", "area_seen", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "free_space_seen", "=", "free_space_seen", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "occupied_space_seen", "=", "occupied_space_seen", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "elif", "reduction", "==", "\"sum\"", ":", "\n", "        ", "area_seen", "=", "area_seen", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "free_space_seen", "=", "free_space_seen", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "occupied_space_seen", "=", "occupied_space_seen", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "return", "{", "\n", "\"area_seen\"", ":", "area_seen", ",", "\n", "\"free_space_seen\"", ":", "free_space_seen", ",", "\n", "\"occupied_space_seen\"", ":", "occupied_space_seen", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.reduce_metrics": [[210, 231], ["type", "type", "metrics.items", "metrics.mean", "v.mean", "metrics.items", "metrics.items", "metrics.sum", "v.sum"], "function", ["None"], ["", "def", "reduce_metrics", "(", "metrics", ",", "reduction", ")", ":", "\n", "    ", "if", "type", "(", "metrics", ")", "==", "type", "(", "{", "}", ")", ":", "\n", "        ", "r_metrics", "=", "{", "}", "\n", "if", "reduction", "==", "\"mean\"", ":", "\n", "            ", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "                ", "r_metrics", "[", "k", "]", "=", "v", ".", "mean", "(", ")", "\n", "", "", "elif", "reduction", "==", "\"sum\"", ":", "\n", "            ", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "                ", "r_metrics", "[", "k", "]", "=", "v", ".", "sum", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "                ", "r_metrics", "[", "k", "]", "=", "v", "\n", "", "", "", "else", ":", "\n", "        ", "if", "reduction", "==", "\"mean\"", ":", "\n", "            ", "r_metrics", "=", "metrics", ".", "mean", "(", ")", "\n", "", "elif", "reduction", "==", "\"sum\"", ":", "\n", "            ", "r_metrics", "=", "metrics", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "r_metrics", "=", "metrics", "\n", "\n", "", "", "return", "r_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.process_predictions": [[143, 208], ["preds.cpu().numpy.clone", "preds.cpu().numpy.permute", "preds.cpu().numpy.contiguous", "math.log", "numpy.stack", "entropy_image.astype.astype", "preds.cpu().numpy.cpu().numpy", "numpy.stack().astype", "numpy.clip", "numpy.stack().astype", "preds.cpu().numpy.cpu", "numpy.stack", "numpy.stack"], "function", ["None"], ["", "def", "process_predictions", "(", "preds", ",", "entropy_thresh", "=", "0.35", ")", ":", "\n", "    ", "\"\"\"\n    Inputs:\n        preds - (N, 2, H, W) Tensor values between 0.0 to 1.0\n              - channel 0 predicts probability of occupied space\n              - channel 1 predicts probability of explored space\n        entropy_thresh - predictions with entropy larger than this value are discarded\n    \"\"\"", "\n", "N", ",", "_", ",", "H", ",", "W", "=", "preds", ".", "shape", "\n", "preds", "=", "preds", ".", "clone", "(", ")", "\n", "preds", "=", "preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "preds", "=", "preds", ".", "contiguous", "(", ")", "# (N, H, W, C)", "\n", "\n", "# Compute entropy", "\n", "probs", "=", "preds", "[", "...", ",", "1", "]", "\n", "log_probs", "=", "(", "probs", "+", "1e-12", ")", ".", "log", "(", ")", "\n", "log_1_probs", "=", "(", "1", "-", "probs", "+", "1e-12", ")", ".", "log", "(", ")", "\n", "entropy", "=", "-", "probs", "*", "log_probs", "-", "(", "1", "-", "probs", ")", "*", "log_1_probs", "# (N, H, W)", "\n", "\n", "max_entropy", "=", "math", ".", "log", "(", "2.0", ")", "\n", "entropy_np", "=", "(", "entropy", "/", "max_entropy", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "entropy_image", "=", "entropy_np", "*", "255.0", "\n", "entropy_image", "=", "np", ".", "stack", "(", "\n", "[", "entropy_image", ",", "entropy_image", ",", "entropy_image", "]", ",", "axis", "=", "3", "\n", ")", "# (N, H, W, C)", "\n", "entropy_image", "=", "entropy_image", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "preds", "=", "preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (N, H, W, 2)", "\n", "exp_mask", "=", "(", "preds", "[", "...", ",", "1", "]", ">", "0.5", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "occ_mask", "=", "(", "preds", "[", "...", ",", "0", "]", ">", "0.5", ")", ".", "astype", "(", "np", ".", "float32", ")", "*", "exp_mask", "\n", "free_mask", "=", "(", "preds", "[", "...", ",", "0", "]", "<=", "0.5", ")", ".", "astype", "(", "np", ".", "float32", ")", "*", "exp_mask", "\n", "unk_mask", "=", "1", "-", "exp_mask", "\n", "\n", "# Occupied regions are blue, free regions are green.", "\n", "# Modulate the values based on confidence", "\n", "pred_imgs", "=", "np", ".", "stack", "(", "\n", "[", "\n", "0.0", "*", "occ_mask", "+", "0.0", "*", "free_mask", "+", "255.0", "*", "unk_mask", ",", "\n", "0.0", "*", "occ_mask", "+", "255.0", "*", "free_mask", "+", "255.0", "*", "unk_mask", ",", "\n", "255.0", "*", "occ_mask", "+", "0.0", "*", "free_mask", "+", "255.0", "*", "unk_mask", ",", "\n", "]", ",", "\n", "axis", "=", "3", ",", "\n", ")", ".", "astype", "(", "\n", "np", ".", "uint8", "\n", ")", "# (N, H, W, 3)", "\n", "\n", "# Occupied regions are blue, free regions are green.", "\n", "# Filter out the uncertain predictions", "\n", "entropy_mask", "=", "(", "entropy_np", "<=", "entropy_thresh", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "free_mask_", "=", "free_mask", "*", "entropy_mask", "\n", "occ_mask_", "=", "occ_mask", "*", "entropy_mask", "\n", "unk_mask_", "=", "np", ".", "clip", "(", "unk_mask", "+", "(", "1", "-", "entropy_mask", ")", ",", "0", ",", "1", ")", "\n", "\n", "pred_imgs_filtered", "=", "np", ".", "stack", "(", "\n", "[", "\n", "0.0", "*", "occ_mask_", "+", "0.0", "*", "free_mask_", "+", "255.0", "*", "unk_mask_", ",", "\n", "0.0", "*", "occ_mask_", "+", "255.0", "*", "free_mask_", "+", "255.0", "*", "unk_mask_", ",", "\n", "255.0", "*", "occ_mask_", "+", "0.0", "*", "free_mask_", "+", "255.0", "*", "unk_mask_", ",", "\n", "]", ",", "\n", "axis", "=", "3", ",", "\n", ")", ".", "astype", "(", "\n", "np", ".", "uint8", "\n", ")", "# (N, H, W, 3)", "\n", "\n", "return", "pred_imgs", ",", "pred_imgs_filtered", ",", "entropy_image", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.batched_occ_metrics": [[233, 328], ["numpy.all", "numpy.all", "numpy.all", "numpy.all", "np.all.sum().astype", "np.all.sum().astype", "np.all.sum().astype", "np.all.sum().astype", "metrics.reduce_metrics", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "np.all.sum", "np.all.sum", "np.all.sum", "np.all.sum"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.reduce_metrics"], ["", "def", "batched_occ_metrics", "(", "\n", "pred_occupancy", ",", "gt_occupancy", ",", "reduction", "=", "\"mean\"", ",", "apply_mask", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Measures the precision, recall of free space, occupancy and overall accuracy of predictions.\n    Ignores the predictions in unknown parts if apply_mask is set.\n\n    Inputs:\n        pred_occupancy - (bs, H, W, C)\n        gt_occupancy - (bs, H, W, C)\n    \"\"\"", "\n", "# Preprocess data", "\n", "pred_free_space", "=", "np", ".", "all", "(", "\n", "pred_occupancy", "==", "np", ".", "array", "(", "[", "0", ",", "255", ",", "0", "]", ")", ",", "axis", "=", "-", "1", "\n", ")", "# (bs, H, W)", "\n", "pred_occ_space", "=", "np", ".", "all", "(", "\n", "pred_occupancy", "==", "np", ".", "array", "(", "[", "0", ",", "0", ",", "255", "]", ")", ",", "axis", "=", "-", "1", "\n", ")", "# (bs, H, W)", "\n", "gt_free_space", "=", "np", ".", "all", "(", "gt_occupancy", "==", "np", ".", "array", "(", "[", "0", ",", "255", ",", "0", "]", ")", ",", "axis", "=", "-", "1", ")", "# (bs, H, W)", "\n", "gt_occ_space", "=", "np", ".", "all", "(", "gt_occupancy", "==", "np", ".", "array", "(", "[", "0", ",", "0", ",", "255", "]", ")", ",", "axis", "=", "-", "1", ")", "# (bs, H, W)", "\n", "valid_mask", "=", "gt_free_space", "|", "gt_occ_space", "# (bs, H, W)", "\n", "\n", "# Mask out predictions by the valid areas of GT", "\n", "if", "apply_mask", ":", "\n", "        ", "pred_free_space", "=", "pred_free_space", "&", "valid_mask", "\n", "pred_occ_space", "=", "pred_occ_space", "&", "valid_mask", "\n", "\n", "# Accuracy metrics", "\n", "", "total_gt_free_space", "=", "gt_free_space", ".", "sum", "(", "(", "1", ",", "2", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "# (bs, )", "\n", "total_pred_free_space", "=", "pred_free_space", ".", "sum", "(", "(", "1", ",", "2", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "# (bs, )", "\n", "tp_free_space", "=", "(", "\n", "(", "pred_free_space", "&", "gt_free_space", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "# (bs, )", "\n", "free_space_recall", "=", "tp_free_space", "/", "(", "total_gt_free_space", "+", "EPS", ")", "# (bs, )", "\n", "free_space_prec", "=", "tp_free_space", "/", "(", "total_pred_free_space", "+", "EPS", ")", "# (bs, )", "\n", "free_space_f1", "=", "(", "\n", "2", "\n", "*", "free_space_prec", "\n", "*", "free_space_recall", "\n", "/", "(", "free_space_prec", "+", "free_space_recall", "+", "EPS", ")", "\n", ")", "\n", "\n", "total_gt_occ_space", "=", "gt_occ_space", ".", "sum", "(", "(", "1", ",", "2", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "# (bs, )", "\n", "total_pred_occ_space", "=", "pred_occ_space", ".", "sum", "(", "(", "1", ",", "2", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "# (bs, )", "\n", "tp_occ_space", "=", "(", "\n", "(", "pred_occ_space", "&", "gt_occ_space", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "# (bs, )", "\n", "occ_space_recall", "=", "tp_occ_space", "/", "(", "total_gt_occ_space", "+", "EPS", ")", "# (bs, )", "\n", "occ_space_prec", "=", "tp_occ_space", "/", "(", "total_pred_occ_space", "+", "EPS", ")", "# (bs, )", "\n", "occ_space_f1", "=", "(", "\n", "2", "\n", "*", "occ_space_prec", "\n", "*", "occ_space_recall", "\n", "/", "(", "occ_space_prec", "+", "occ_space_recall", "+", "EPS", ")", "\n", ")", "# (bs, )", "\n", "\n", "overall_acc", "=", "(", "tp_free_space", "+", "tp_occ_space", ")", "/", "(", "\n", "total_gt_free_space", "+", "total_gt_occ_space", "+", "EPS", "\n", ")", "# (bs, )", "\n", "\n", "# IoU metrics", "\n", "free_space_intersection", "=", "(", "\n", "(", "pred_free_space", "&", "gt_free_space", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "# (bs, )", "\n", "free_space_union", "=", "(", "\n", "(", "pred_free_space", "|", "gt_free_space", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "# (bs, )", "\n", "free_space_iou", "=", "free_space_intersection", "/", "(", "free_space_union", "+", "EPS", ")", "# (bs, )", "\n", "\n", "occ_space_intersection", "=", "(", "\n", "(", "pred_occ_space", "&", "gt_occ_space", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "# (bs, )", "\n", "occ_space_union", "=", "(", "\n", "(", "pred_occ_space", "|", "gt_occ_space", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "# (bs, )", "\n", "occ_space_iou", "=", "occ_space_intersection", "/", "(", "occ_space_union", "+", "EPS", ")", "# (bs, )", "\n", "\n", "mean_iou", "=", "(", "free_space_iou", "+", "occ_space_iou", ")", "/", "2.0", "\n", "mean_f1", "=", "(", "free_space_f1", "+", "occ_space_f1", ")", "/", "2.0", "\n", "\n", "metrics", "=", "{", "\n", "\"overall_acc\"", ":", "overall_acc", ",", "\n", "\"free_space_recall\"", ":", "free_space_recall", ",", "\n", "\"free_space_prec\"", ":", "free_space_prec", ",", "\n", "\"free_space_f1\"", ":", "free_space_f1", ",", "\n", "\"free_space_iou\"", ":", "free_space_iou", ",", "\n", "\"occ_space_recall\"", ":", "occ_space_recall", ",", "\n", "\"occ_space_prec\"", ":", "occ_space_prec", ",", "\n", "\"occ_space_f1\"", ":", "occ_space_f1", ",", "\n", "\"occ_space_iou\"", ":", "occ_space_iou", ",", "\n", "\"mean_iou\"", ":", "mean_iou", ",", "\n", "\"mean_f1\"", ":", "mean_f1", ",", "\n", "}", "\n", "\n", "return", "reduce_metrics", "(", "metrics", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.batched_anticipative_metrics": [[330, 366], ["numpy.all", "numpy.all", "numpy.all", "numpy.all", "metrics.reduce_metrics", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.reduce_metrics"], ["", "def", "batched_anticipative_metrics", "(", "\n", "pred_occupancy", ",", "gt_occupancy", ",", "reduction", "=", "\"mean\"", ",", "apply_mask", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Measures the intersection of free-space, occupied-space and overall space\n    in pred_occupancy and gt_occupancy\n\n    pred_occupancy - (bs, h, w, 2) numpy arrays\n    gt_occupancy - (bs, h, w, 2) numpy arrays\n    \"\"\"", "\n", "pred_free_space", "=", "np", ".", "all", "(", "\n", "pred_occupancy", "==", "np", ".", "array", "(", "[", "0", ",", "255", ",", "0", "]", ")", ",", "axis", "=", "-", "1", "\n", ")", "# (bs, H, W)", "\n", "pred_occ_space", "=", "np", ".", "all", "(", "\n", "pred_occupancy", "==", "np", ".", "array", "(", "[", "0", ",", "0", ",", "255", "]", ")", ",", "axis", "=", "-", "1", "\n", ")", "# (bs, H, W)", "\n", "gt_free_space", "=", "np", ".", "all", "(", "gt_occupancy", "==", "np", ".", "array", "(", "[", "0", ",", "255", ",", "0", "]", ")", ",", "axis", "=", "-", "1", ")", "# (bs, H, W)", "\n", "gt_occ_space", "=", "np", ".", "all", "(", "gt_occupancy", "==", "np", ".", "array", "(", "[", "0", ",", "0", ",", "255", "]", ")", ",", "axis", "=", "-", "1", ")", "# (bs, H, W)", "\n", "valid_mask", "=", "gt_free_space", "|", "gt_occ_space", "# (bs, H, W)", "\n", "\n", "# Mask out predictions by the valid areas of GT", "\n", "if", "apply_mask", ":", "\n", "        ", "pred_free_space", "=", "pred_free_space", "&", "valid_mask", "\n", "pred_occ_space", "=", "pred_occ_space", "&", "valid_mask", "\n", "\n", "", "free_space_covered", "=", "(", "\n", "(", "pred_free_space", "&", "gt_free_space", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "# (bs, )", "\n", "occ_space_covered", "=", "(", "\n", "(", "pred_occ_space", "&", "gt_occ_space", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "# (bs, )", "\n", "map_accuracy", "=", "free_space_covered", "+", "occ_space_covered", "\n", "\n", "metrics", "=", "{", "\"map_accuracy\"", ":", "map_accuracy", "}", "\n", "\n", "return", "reduce_metrics", "(", "metrics", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.measure_map_quality": [[368, 411], ["metrics.batched_occ_metrics", "metrics.batched_anticipative_metrics", "metrics.process_predictions", "metrics.process_predictions", "v.item", "all_metrics.items"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.batched_occ_metrics", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.batched_anticipative_metrics", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.process_predictions", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.process_predictions"], ["", "def", "measure_map_quality", "(", "\n", "pred_maps", ",", "\n", "gt_maps", ",", "\n", "map_scale", ",", "\n", "entropy_thresh", "=", "0.35", ",", "\n", "reduction", "=", "\"mean\"", ",", "\n", "apply_mask", "=", "False", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Inputs:\n        pred_maps - (bs, 2, H, W) Tensor maps\n        gt_maps   - (bs, 2, H, W) Tensor maps\n\n    Channel 0 - probability of occupied space\n    Channel 1 - probability of explored space\n    \"\"\"", "\n", "device", "=", "pred_maps", ".", "device", "\n", "proc_pred_maps", "=", "process_predictions", "(", "pred_maps", ",", "entropy_thresh", ")", "[", "1", "]", "# (bs, H, W, 3)", "\n", "proc_gt_maps", "=", "process_predictions", "(", "gt_maps", ")", "[", "1", "]", "# (bs, H, W, 3)", "\n", "\n", "curr_occ_metrics", "=", "batched_occ_metrics", "(", "\n", "proc_pred_maps", ",", "proc_gt_maps", ",", "reduction", "=", "reduction", ",", "apply_mask", "=", "apply_mask", ",", "\n", ")", "\n", "curr_anticipative_metrics", "=", "batched_anticipative_metrics", "(", "\n", "proc_pred_maps", ",", "proc_gt_maps", ",", "reduction", "=", "reduction", ",", "apply_mask", "=", "apply_mask", ",", "\n", ")", "\n", "mean_iou", "=", "(", "\n", "curr_occ_metrics", "[", "\"free_space_iou\"", "]", "+", "curr_occ_metrics", "[", "\"occ_space_iou\"", "]", "\n", ")", "/", "2.0", "\n", "\n", "all_metrics", "=", "{", "\n", "\"mean_iou\"", ":", "mean_iou", ",", "\n", "\"free_space_iou\"", ":", "curr_occ_metrics", "[", "\"free_space_iou\"", "]", ",", "\n", "\"occ_space_iou\"", ":", "curr_occ_metrics", "[", "\"occ_space_iou\"", "]", ",", "\n", "\"map_accuracy\"", ":", "curr_anticipative_metrics", "[", "\"map_accuracy\"", "]", "*", "(", "map_scale", "**", "2", ")", ",", "\n", "}", "\n", "\n", "if", "reduction", "==", "\"mean\"", "or", "reduction", "==", "\"sum\"", ":", "\n", "        ", "metrics", "=", "{", "k", ":", "v", ".", "item", "(", ")", "for", "k", ",", "v", "in", "all_metrics", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "metrics", "=", "all_metrics", "\n", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.measure_anticipation_reward": [[413, 441], ["metrics.reduce_metrics"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.reduce_metrics"], ["", "def", "measure_anticipation_reward", "(", "\n", "pred_maps", ",", "gt_maps", ",", "reduction", "=", "\"mean\"", ",", "apply_mask", "=", "False", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Inputs:\n        pred_maps - (bs, 2, H, W) Tensor maps\n        gt_maps   - (bs, 2, H, W) Tensor maps\n\n    Channel 0 - probability of occupied space\n    Channel 1 - probability of explored space\n    \"\"\"", "\n", "pred_explored_space", "=", "pred_maps", "[", ":", ",", "1", "]", ">", "0.5", "# (bs, H, W)", "\n", "pred_free_space", "=", "(", "pred_maps", "[", ":", ",", "0", "]", "<=", "0.5", ")", "&", "pred_explored_space", "\n", "pred_occ_space", "=", "(", "pred_maps", "[", ":", ",", "0", "]", ">", "0.5", ")", "&", "pred_explored_space", "\n", "\n", "gt_explored_space", "=", "gt_maps", "[", ":", ",", "1", "]", ">", "0.5", "\n", "gt_free_space", "=", "(", "gt_maps", "[", ":", ",", "0", "]", "<=", "0.5", ")", "&", "gt_explored_space", "\n", "gt_occ_space", "=", "(", "gt_maps", "[", ":", ",", "0", "]", ">", "0.5", ")", "&", "gt_explored_space", "\n", "\n", "if", "apply_mask", ":", "\n", "        ", "pred_free_space", "=", "pred_free_space", "&", "gt_explored_space", "\n", "pred_occ_space", "=", "pred_occ_space", "&", "gt_explored_space", "\n", "\n", "", "free_space_covered", "=", "(", "pred_free_space", "&", "gt_free_space", ")", ".", "sum", "(", "dim", "=", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "occ_space_covered", "=", "(", "pred_occ_space", "&", "gt_occ_space", ")", ".", "sum", "(", "dim", "=", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "area_covered", "=", "(", "free_space_covered", "+", "occ_space_covered", ")", ".", "float", "(", ")", "\n", "\n", "return", "reduce_metrics", "(", "area_covered", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.measure_diff_reward": [[443, 461], ["diff_maps_binary.sum", "metrics.reduce_metrics"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.metrics.reduce_metrics"], ["", "def", "measure_diff_reward", "(", "gt_map_states", ",", "state_estimates", ",", "reduction", "=", "\"mean\"", ")", ":", "\n", "    ", "bs", ",", "_", ",", "h", ",", "w", "=", "gt_map_states", ".", "shape", "\n", "assert", "h", "==", "w", "\n", "\n", "map_mask", "=", "(", "gt_map_states", "[", ":", ",", "1", "]", ">", "0.5", ")", ".", "float", "(", ")", "\n", "current_map", "=", "state_estimates", "[", "'map_states'", "]", "[", ":", ",", "0", "]", "*", "map_mask", "\n", "gt_map", "=", "gt_map_states", "[", ":", ",", "0", "]", "*", "map_mask", "\n", "\n", "current_map", "[", "current_map", "<=", "0.5", "]", "=", "0.", "\n", "current_map", "[", "current_map", ">", "0.5", "]", "=", "1.", "\n", "gt_map", "[", "gt_map", "<=", "0.5", "]", "=", "0.", "\n", "gt_map", "[", "gt_map", ">", "0.5", "]", "=", "1.", "\n", "\n", "diff_maps", "=", "current_map", "-", "gt_map", "\n", "diff_maps_binary", "=", "(", "(", "diff_maps", "==", "0", ")", "&", "(", "map_mask", "==", "1", ")", ")", ".", "float", "(", ")", ".", "reshape", "(", "bs", ",", "h", "*", "w", ")", "\n", "zero_elements", "=", "diff_maps_binary", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "return", "reduce_metrics", "(", "zero_elements", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.visualization.observations_to_image": [[21, 71], ["numpy.concatenate", "habitat.utils.visualizations.utils.draw_collision.append", "cv2.resize.astype", "numpy.stack", "habitat.utils.visualizations.utils.draw_collision.append", "len", "isinstance", "cv2.resize.cpu().numpy().astype", "cv2.resize", "observation[].squeeze", "isinstance", "cv2.resize.cpu().numpy", "cv2.resize", "habitat.utils.visualizations.utils.draw_collision", "cv2.resize.cpu().numpy", "cv2.resize.cpu", "range", "cv2.resize.cpu"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.habitat_extensions.utils.draw_collision"], ["def", "observations_to_image", "(", "\n", "observation", ":", "Dict", ",", "observation_size", ":", "Optional", "[", "int", "]", "=", "None", ",", "collision_flag", "=", "False", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Generate image of single frame from observation and info\n    returned from a single environment step().\n\n    Args:\n        observation: observation returned from an environment step().\n        info: info returned from an environment step().\n\n    Returns:\n        generated image of a single frame.\n    \"\"\"", "\n", "egocentric_view", "=", "[", "]", "\n", "if", "\"rgb\"", "in", "observation", ":", "\n", "        ", "rgb", "=", "observation", "[", "\"rgb\"", "]", "\n", "if", "not", "isinstance", "(", "rgb", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "rgb", "=", "rgb", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "if", "observation_size", "is", "None", ":", "\n", "            ", "observation_size", "=", "observation", "[", "\"rgb\"", "]", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "scale", "=", "observation_size", "/", "rgb", ".", "shape", "[", "0", "]", "\n", "rgb", "=", "cv2", ".", "resize", "(", "rgb", ",", "None", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ")", "\n", "", "egocentric_view", ".", "append", "(", "rgb", ")", "\n", "\n", "# draw depth map if observation has depth info", "\n", "", "if", "\"depth\"", "in", "observation", ":", "\n", "        ", "depth_map", "=", "observation", "[", "\"depth\"", "]", ".", "squeeze", "(", ")", "*", "255.0", "\n", "if", "not", "isinstance", "(", "depth_map", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "depth_map", "=", "depth_map", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "depth_map", "=", "depth_map", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "depth_map", "=", "np", ".", "stack", "(", "[", "depth_map", "for", "_", "in", "range", "(", "3", ")", "]", ",", "axis", "=", "2", ")", "\n", "if", "observation_size", "is", "None", ":", "\n", "            ", "observation_size", "=", "depth_map", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "scale", "=", "observation_size", "/", "depth_map", ".", "shape", "[", "0", "]", "\n", "depth_map", "=", "cv2", ".", "resize", "(", "depth_map", ",", "None", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ")", "\n", "", "egocentric_view", ".", "append", "(", "depth_map", ")", "\n", "\n", "", "assert", "len", "(", "egocentric_view", ")", ">", "0", ",", "\"Expected at least one visual sensor enabled.\"", "\n", "egocentric_view", "=", "np", ".", "concatenate", "(", "egocentric_view", ",", "axis", "=", "1", ")", "\n", "\n", "# draw collision", "\n", "if", "collision_flag", ":", "\n", "        ", "if", "\"bump\"", "in", "observation", "and", "observation", "[", "'bump'", "]", ":", "\n", "            ", "egocentric_view", "=", "draw_collision", "(", "egocentric_view", ")", "\n", "\n", "", "", "frame", "=", "egocentric_view", "\n", "\n", "return", "frame", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.visualization.draw_triangle": [[73, 97], ["numpy.array", "cv2.drawContours", "math.radians", "math.radians", "np.array.astype", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos"], "function", ["None"], ["", "def", "draw_triangle", "(", "image", ",", "position", ",", "theta", ",", "radius", "=", "30", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ")", ":", "\n", "    ", "\"\"\"\n    position - center position of the triangle in image coordinates\n    theta - direction in radians measured from -Y to X. for example, 0 rads is facing upward.\n    \"\"\"", "\n", "x", ",", "y", "=", "position", "\n", "\n", "r_1", "=", "radius", "\n", "theta_1", "=", "theta", "\n", "coor_1", "=", "(", "x", "+", "r_1", "*", "math", ".", "sin", "(", "theta_1", ")", ",", "y", "-", "r_1", "*", "math", ".", "cos", "(", "theta_1", ")", ")", "\n", "\n", "r_2", "=", "0.5", "*", "radius", "\n", "theta_2", "=", "theta", "+", "math", ".", "radians", "(", "130", ")", "\n", "coor_2", "=", "(", "x", "+", "r_2", "*", "math", ".", "sin", "(", "theta_2", ")", ",", "y", "-", "r_2", "*", "math", ".", "cos", "(", "theta_2", ")", ")", "\n", "\n", "r_3", "=", "0.5", "*", "radius", "\n", "theta_3", "=", "theta", "-", "math", ".", "radians", "(", "130", ")", "\n", "coor_3", "=", "(", "x", "+", "r_3", "*", "math", ".", "sin", "(", "theta_3", ")", ",", "y", "-", "r_3", "*", "math", ".", "cos", "(", "theta_3", ")", ")", "\n", "\n", "triangle_contour", "=", "np", ".", "array", "(", "[", "coor_1", ",", "coor_2", ",", "coor_3", "]", ")", "\n", "\n", "image", "=", "cv2", ".", "drawContours", "(", "image", ",", "[", "triangle_contour", ".", "astype", "(", "np", ".", "int32", ")", "]", ",", "0", ",", "color", ",", "-", "1", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.visualization.generate_topdown_allocentric_map": [[99, 196], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.ones", "visualization.draw_triangle", "numpy.pad", "range", "range", "max", "max", "max", "max", "max", "min", "max", "min", "max", "cv2.circle", "[].tolist", "[].item", "range", "min", "max", "min", "max", "len"], "function", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.visualization.draw_triangle"], ["", "def", "generate_topdown_allocentric_map", "(", "\n", "global_map", ",", "\n", "pred_coverage_map", ",", "\n", "agent_positions", ",", "\n", "thresh_explored", "=", "0.6", ",", "\n", "thresh_obstacle", "=", "0.6", ",", "\n", "zoom", "=", "True", ",", "\n", "draw_trajectory", "=", "False", ",", "\n", "draw_agent", "=", "True", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Inputs:\n        global_map        - (2, H, W) numpy array\n        pred_coverage_map - (2, H, W) numpy array\n        agent_positions   - (T, 3) numpy array --- (x, y, theta) map pose\n    \"\"\"", "\n", "H", ",", "W", "=", "global_map", ".", "shape", "[", "1", ":", "]", "\n", "colored_map", "=", "np", ".", "ones", "(", "(", "H", ",", "W", ",", "3", ")", ",", "np", ".", "uint8", ")", "*", "255", "\n", "global_obstacle_map", "=", "(", "global_map", "[", "0", "]", "==", "1", ")", "&", "(", "global_map", "[", "1", "]", "==", "1", ")", "\n", "\n", "# First show explored regions", "\n", "explored_map", "=", "pred_coverage_map", "[", "1", "]", ">=", "thresh_explored", "\n", "colored_map", "[", "explored_map", ",", ":", "]", "=", "np", ".", "array", "(", "EXPLORED_COLOR", ")", "\n", "\n", "# Show GT obstacles in explored regions", "\n", "gt_obstacles_in_explored_map", "=", "global_obstacle_map", "&", "explored_map", "\n", "colored_map", "[", "gt_obstacles_in_explored_map", ",", ":", "]", "=", "np", ".", "array", "(", "GT_OBSTACLE_COLOR", ")", "\n", "\n", "# Show correctly predicted obstacles in dark green", "\n", "pred_obstacles", "=", "(", "pred_coverage_map", "[", "0", "]", ">=", "thresh_obstacle", ")", "&", "explored_map", "\n", "correct_pred_obstacles", "=", "pred_obstacles", "&", "gt_obstacles_in_explored_map", "\n", "colored_map", "[", "correct_pred_obstacles", ",", ":", "]", "=", "np", ".", "array", "(", "CORRECT_OBSTACLE_COLOR", ")", "\n", "\n", "# Show in-correctly predicted obstacles in light green", "\n", "false_pred_obstacles", "=", "pred_obstacles", "&", "~", "gt_obstacles_in_explored_map", "\n", "colored_map", "[", "false_pred_obstacles", ",", ":", "]", "=", "np", ".", "array", "(", "FALSE_OBSTACLE_COLOR", ")", "\n", "\n", "# Draw trajectory", "\n", "if", "draw_trajectory", ":", "\n", "        ", "agent_positions_subsampled", "=", "[", "\n", "agent_positions", "[", "i", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "agent_positions", ")", ",", "20", ")", "\n", "]", "\n", "for", "pose", "in", "agent_positions_subsampled", ":", "\n", "            ", "x", ",", "y", "=", "pose", "[", ":", "2", "]", "\n", "colored_map", "=", "cv2", ".", "circle", "(", "colored_map", ",", "(", "x", ",", "y", ")", ",", "2", ",", "TRAJECTORY_COLOR", ",", "-", "1", ")", "\n", "\n", "", "", "if", "draw_agent", ":", "\n", "        ", "colored_map", "=", "draw_triangle", "(", "\n", "colored_map", ",", "\n", "agent_positions", "[", "-", "1", "]", "[", ":", "2", "]", ".", "tolist", "(", ")", ",", "\n", "agent_positions", "[", "-", "1", "]", "[", "2", "]", ".", "item", "(", ")", ",", "\n", "radius", "=", "15", ",", "\n", "color", "=", "TRAJECTORY_COLOR", ",", "\n", ")", "\n", "\n", "", "if", "zoom", ":", "\n", "# Add an initial padding to ensure a non-zero boundary.", "\n", "        ", "global_occ_map", "=", "np", ".", "pad", "(", "global_map", "[", "0", "]", ",", "5", ",", "mode", "=", "\"constant\"", ",", "constant_values", "=", "1.0", ")", "\n", "# Zoom into the map based on extents in global_map", "\n", "global_map_ysum", "=", "(", "1", "-", "global_occ_map", ")", ".", "sum", "(", "axis", "=", "0", ")", "# (W, )", "\n", "global_map_xsum", "=", "(", "1", "-", "global_occ_map", ")", ".", "sum", "(", "axis", "=", "1", ")", "# (H, )", "\n", "x_start", "=", "W", "\n", "x_end", "=", "0", "\n", "y_start", "=", "H", "\n", "y_end", "=", "0", "\n", "for", "i", "in", "range", "(", "W", "-", "1", ")", ":", "\n", "            ", "if", "global_map_ysum", "[", "i", "]", "==", "0", "and", "global_map_ysum", "[", "i", "+", "1", "]", ">", "0", ":", "\n", "                ", "x_start", "=", "min", "(", "x_start", ",", "i", ")", "\n", "", "if", "global_map_ysum", "[", "i", "]", ">", "0", "and", "global_map_ysum", "[", "i", "+", "1", "]", "==", "0", ":", "\n", "                ", "x_end", "=", "max", "(", "x_end", ",", "i", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "H", "-", "1", ")", ":", "\n", "            ", "if", "global_map_xsum", "[", "i", "]", "==", "0", "and", "global_map_xsum", "[", "i", "+", "1", "]", ">", "0", ":", "\n", "                ", "y_start", "=", "min", "(", "y_start", ",", "i", ")", "\n", "", "if", "global_map_xsum", "[", "i", "]", ">", "0", "and", "global_map_xsum", "[", "i", "+", "1", "]", "==", "0", ":", "\n", "                ", "y_end", "=", "max", "(", "y_end", ",", "i", ")", "\n", "\n", "# Remove the initial padding", "\n", "", "", "x_start", "=", "max", "(", "x_start", "-", "5", ",", "0", ")", "\n", "y_start", "=", "max", "(", "y_start", "-", "5", ",", "0", ")", "\n", "x_end", "=", "max", "(", "x_end", "-", "5", ",", "0", ")", "\n", "y_end", "=", "max", "(", "y_end", "-", "5", ",", "0", ")", "\n", "\n", "# Some padding", "\n", "x_start", "=", "max", "(", "x_start", "-", "5", ",", "0", ")", "\n", "x_end", "=", "min", "(", "x_end", "+", "5", ",", "W", "-", "1", ")", "\n", "x_width", "=", "x_end", "-", "x_start", "+", "1", "\n", "y_start", "=", "max", "(", "y_start", "-", "5", ",", "0", ")", "\n", "y_end", "=", "min", "(", "y_end", "+", "5", ",", "H", "-", "1", ")", "\n", "y_width", "=", "y_end", "-", "y_start", "+", "1", "\n", "max_width", "=", "max", "(", "x_width", ",", "y_width", ")", "\n", "\n", "colored_map", "=", "colored_map", "[", "\n", "y_start", ":", "(", "y_start", "+", "max_width", ")", ",", "x_start", ":", "(", "x_start", "+", "max_width", ")", "\n", "]", "\n", "\n", "", "return", "colored_map", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.visualization.cmap_map": [[198, 227], ["sum", "numpy.array", "numpy.array", "numpy.array", "enumerate", "matplotlib.colors.LinearSegmentedColormap", "list", "step_dict.values", "list", "numpy.array", "list", "list", "enumerate", "list", "list.sort", "map", "set", "map", "map", "map", "cmap", "this_cdict.items"], "function", ["None"], ["", "def", "cmap_map", "(", "function", ",", "cmap", ")", ":", "\n", "    ", "\"\"\" Applies function (which should operate on vectors of shape 3: [r, g, b]), on colormap cmap.\n    This routine will break any discontinuous points in a colormap.\n    \"\"\"", "\n", "cdict", "=", "cmap", ".", "_segmentdata", "\n", "step_dict", "=", "{", "}", "\n", "# Firt get the list of points where the segments start or end", "\n", "for", "key", "in", "(", "'red'", ",", "'green'", ",", "'blue'", ")", ":", "\n", "        ", "step_dict", "[", "key", "]", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "cdict", "[", "key", "]", ")", ")", "\n", "", "step_list", "=", "sum", "(", "step_dict", ".", "values", "(", ")", ",", "[", "]", ")", "\n", "step_list", "=", "np", ".", "array", "(", "list", "(", "set", "(", "step_list", ")", ")", ")", "\n", "# Then compute the LUT, and apply the function to the LUT", "\n", "reduced_cmap", "=", "lambda", "step", ":", "np", ".", "array", "(", "cmap", "(", "step", ")", "[", "0", ":", "3", "]", ")", "\n", "old_LUT", "=", "np", ".", "array", "(", "list", "(", "map", "(", "reduced_cmap", ",", "step_list", ")", ")", ")", "\n", "new_LUT", "=", "np", ".", "array", "(", "list", "(", "map", "(", "function", ",", "old_LUT", ")", ")", ")", "\n", "# Now try to make a minimal segment definition of the new LUT", "\n", "cdict", "=", "{", "}", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "[", "'red'", ",", "'green'", ",", "'blue'", "]", ")", ":", "\n", "        ", "this_cdict", "=", "{", "}", "\n", "for", "j", ",", "step", "in", "enumerate", "(", "step_list", ")", ":", "\n", "            ", "if", "step", "in", "step_dict", "[", "key", "]", ":", "\n", "                ", "this_cdict", "[", "step", "]", "=", "new_LUT", "[", "j", ",", "i", "]", "\n", "", "elif", "new_LUT", "[", "j", ",", "i", "]", "!=", "old_LUT", "[", "j", ",", "i", "]", ":", "\n", "                ", "this_cdict", "[", "step", "]", "=", "new_LUT", "[", "j", ",", "i", "]", "\n", "", "", "colorvector", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "+", "(", "x", "[", "1", "]", ",", ")", ",", "this_cdict", ".", "items", "(", ")", ")", ")", "\n", "colorvector", ".", "sort", "(", ")", "\n", "cdict", "[", "key", "]", "=", "colorvector", "\n", "\n", "", "return", "matplotlib", ".", "colors", ".", "LinearSegmentedColormap", "(", "'colormap'", ",", "cdict", ",", "1024", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.occant_utils.generate_exploration_dataset.main": [[21, 99], ["print", "gzip.open", "json.load", "subprocess.call", "subprocess.call", "print", "tqdm.tqdm", "print", "tqdm.tqdm", "subprocess.call", "gzip.open", "json.dump", "subprocess.check_output().decode().split", "range", "os.path.join", "os.path.join", "range", "episode_data_all.append", "gzip.open", "json.dump", "len", "gzip.open", "episode_data_all.append", "gzip.open", "json.dump", "len", "subprocess.check_output().decode", "json.load", "subprocess.check_output"], "function", ["None"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "for", "split", "in", "args", ".", "splits", ":", "\n", "        ", "print", "(", "\"=====> Creating dataset: {} split\"", ".", "format", "(", "split", ")", ")", "\n", "data_path", "=", "f\"{args.pointnav_dataset_path}/{split}/{split}.json.gz\"", "\n", "with", "gzip", ".", "open", "(", "data_path", ",", "\"rt\"", ")", "as", "fp", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "if", "data", "[", "\"episodes\"", "]", "==", "[", "]", ":", "\n", "# Save empty data to ep_save_path", "\n", "            ", "data_save_path", "=", "f\"{args.save_dataset_path}/{split}\"", "\n", "sp", ".", "call", "(", "f\"mkdir -p {data_save_path}\"", ",", "shell", "=", "True", ")", "\n", "\n", "ep_save_path", "=", "f\"{data_save_path}/{split}.json.gz\"", "\n", "with", "gzip", ".", "open", "(", "ep_save_path", ",", "\"wt\"", ")", "as", "fp", ":", "\n", "                ", "json", ".", "dump", "(", "{", "\"episodes\"", ":", "[", "]", "}", ",", "fp", ")", "\n", "\n", "# Process scene specific data and store in content/", "\n", "", "data_dir", "=", "f\"{args.pointnav_dataset_path}/{split}/content/\"", "\n", "scenes", "=", "(", "\n", "sp", ".", "check_output", "(", "f\"ls {data_dir}\"", ",", "shell", "=", "True", ")", "\n", ".", "decode", "(", "\"UTF-8\"", ")", "\n", ".", "split", "(", "\"\\n\"", ")", "[", ":", "-", "1", "]", "\n", ")", "\n", "\n", "data_save_path", "=", "f\"{args.save_dataset_path}/{split}/content/\"", "\n", "sp", ".", "call", "(", "f\"mkdir -p {data_save_path}\"", ",", "shell", "=", "True", ")", "\n", "\n", "# Process each scene individually", "\n", "print", "(", "\"========= Processing individual scenes ==========\"", ")", "\n", "for", "scene_itr", "in", "tqdm", ".", "tqdm", "(", "range", "(", "len", "(", "scenes", ")", ")", ")", ":", "\n", "                ", "scene", "=", "scenes", "[", "scene_itr", "]", "\n", "\n", "# Read scene data", "\n", "scene_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "scene", ")", "\n", "with", "gzip", ".", "open", "(", "scene_path", ",", "\"rt\"", ")", "as", "fp", ":", "\n", "                    ", "scene_episode_data", "=", "json", ".", "load", "(", "fp", ")", "[", "\"episodes\"", "]", "\n", "\n", "# Sample pose references for each episode", "\n", "", "episode_data_all", "=", "[", "]", "\n", "for", "ep", "in", "scene_episode_data", ":", "\n", "                    ", "scene_id", "=", "ep", "[", "\"scene_id\"", "]", "\n", "start_position", "=", "ep", "[", "\"start_position\"", "]", "\n", "episode_data", "=", "{", "\n", "\"episode_id\"", ":", "ep", "[", "\"episode_id\"", "]", ",", "\n", "\"scene_id\"", ":", "scene_id", ",", "\n", "\"start_position\"", ":", "ep", "[", "\"start_position\"", "]", ",", "\n", "\"start_rotation\"", ":", "ep", "[", "\"start_rotation\"", "]", ",", "\n", "}", "\n", "episode_data_all", ".", "append", "(", "episode_data", ")", "\n", "\n", "# Save data to scene_save_path", "\n", "", "scene_save_path", "=", "os", ".", "path", ".", "join", "(", "data_save_path", ",", "scene", ")", "\n", "with", "gzip", ".", "open", "(", "scene_save_path", ",", "\"wt\"", ")", "as", "fp", ":", "\n", "                    ", "json", ".", "dump", "(", "{", "\"episodes\"", ":", "episode_data_all", "}", ",", "fp", ")", "\n", "\n", "", "", "", "else", ":", "\n", "# Sample pose references for each episode", "\n", "            ", "episode_data_all", "=", "[", "]", "\n", "print", "(", "\"========= Processing episodes ==========\"", ")", "\n", "for", "ep_itr", "in", "tqdm", ".", "tqdm", "(", "range", "(", "len", "(", "data", "[", "\"episodes\"", "]", ")", ")", ")", ":", "\n", "                ", "ep", "=", "data", "[", "\"episodes\"", "]", "[", "ep_itr", "]", "\n", "scene_id", "=", "ep", "[", "\"scene_id\"", "]", "\n", "start_position", "=", "ep", "[", "\"start_position\"", "]", "\n", "episode_data", "=", "{", "\n", "\"episode_id\"", ":", "ep", "[", "\"episode_id\"", "]", ",", "\n", "\"scene_id\"", ":", "scene_id", ",", "\n", "\"start_position\"", ":", "ep", "[", "\"start_position\"", "]", ",", "\n", "\"start_rotation\"", ":", "ep", "[", "\"start_rotation\"", "]", ",", "\n", "}", "\n", "episode_data_all", ".", "append", "(", "episode_data", ")", "\n", "\n", "# Save data to ep_save_path", "\n", "", "data_save_path", "=", "f\"{args.save_dataset_path}/{split}\"", "\n", "sp", ".", "call", "(", "f\"mkdir -p {data_save_path}\"", ",", "shell", "=", "True", ")", "\n", "\n", "ep_save_path", "=", "f\"{data_save_path}/{split}.json.gz\"", "\n", "with", "gzip", ".", "open", "(", "ep_save_path", ",", "\"wt\"", ")", "as", "fp", ":", "\n", "                ", "json", ".", "dump", "(", "{", "\"episodes\"", ":", "episode_data_all", "}", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.__init__": [[88, 118], ["habitat.core.simulator.SensorSuite", "getattr", "pyrobot_v1.PyRobot._robot_action_space", "pyrobot_v1.Robot", "getattr", "habitat.core.registry.registry.get_sensor", "robot_sensors.append", "pyrobot_v1.PyRobot._config.ROBOT.upper", "habitat.core.registry.registry.get_sensor."], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot._robot_action_space"], ["def", "__init__", "(", "self", ",", "config", ":", "Config", ")", "->", "None", ":", "\n", "        ", "self", ".", "_config", "=", "config", "\n", "\n", "robot_sensors", "=", "[", "]", "\n", "for", "sensor_name", "in", "self", ".", "_config", ".", "SENSORS", ":", "\n", "            ", "sensor_cfg", "=", "getattr", "(", "self", ".", "_config", ",", "sensor_name", ")", "\n", "sensor_type", "=", "registry", ".", "get_sensor", "(", "sensor_cfg", ".", "TYPE", ")", "\n", "\n", "assert", "sensor_type", "is", "not", "None", ",", "\"invalid sensor type {}\"", ".", "format", "(", "\n", "sensor_cfg", ".", "TYPE", "\n", ")", "\n", "robot_sensors", ".", "append", "(", "sensor_type", "(", "sensor_cfg", ")", ")", "\n", "", "self", ".", "_sensor_suite", "=", "SensorSuite", "(", "robot_sensors", ")", "\n", "\n", "config_pyrobot", "=", "{", "\n", "\"base_controller\"", ":", "self", ".", "_config", ".", "BASE_CONTROLLER", ",", "\n", "\"base_planner\"", ":", "self", ".", "_config", ".", "BASE_PLANNER", ",", "\n", "}", "\n", "\n", "assert", "(", "\n", "self", ".", "_config", ".", "ROBOT", "in", "self", ".", "_config", ".", "ROBOTS", "\n", ")", ",", "\"Invalid robot type {}\"", ".", "format", "(", "self", ".", "_config", ".", "ROBOT", ")", "\n", "self", ".", "_robot_config", "=", "getattr", "(", "self", ".", "_config", ",", "self", ".", "_config", ".", "ROBOT", ".", "upper", "(", ")", ")", "\n", "\n", "self", ".", "_action_space", "=", "self", ".", "_robot_action_space", "(", "\n", "self", ".", "_config", ".", "ROBOT", ",", "self", ".", "_robot_config", "\n", ")", "\n", "\n", "self", ".", "_robot", "=", "Robot", "(", "\n", "self", ".", "_config", ".", "ROBOT", ",", "base_config", "=", "config_pyrobot", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_robot_observations": [[120, 125], ["pyrobot_v1.PyRobot._robot.camera.get_rgb", "pyrobot_v1.PyRobot._robot.camera.get_depth"], "methods", ["None"], ["", "def", "get_robot_observations", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"rgb\"", ":", "self", ".", "_robot", ".", "camera", ".", "get_rgb", "(", ")", ",", "\n", "\"depth\"", ":", "self", ".", "_robot", ".", "camera", ".", "get_depth", "(", ")", ",", "\n", "\"bump\"", ":", "self", ".", "_robot", ".", "base", ".", "base_state", ".", "bumper", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.sensor_suite": [[127, 130], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sensor_suite", "(", "self", ")", "->", "SensorSuite", ":", "\n", "        ", "return", "self", ".", "_sensor_suite", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.base": [[131, 134], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "base", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_robot", ".", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.camera": [[135, 138], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "camera", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_robot", ".", "camera", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot._robot_action_space": [[139, 146], ["gym.spaces.Dict", "robot_type.upper"], "methods", ["None"], ["", "def", "_robot_action_space", "(", "self", ",", "robot_type", ",", "robot_config", ")", ":", "\n", "        ", "action_spaces_dict", "=", "{", "}", "\n", "for", "action", "in", "robot_config", ".", "ACTIONS", ":", "\n", "            ", "action_spaces_dict", "[", "action", "]", "=", "ACTION_SPACES", "[", "robot_type", ".", "upper", "(", ")", "]", "[", "\n", "action", "\n", "]", "\n", "", "return", "spaces", ".", "Dict", "(", "action_spaces_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.action_space": [[147, 150], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", "->", "Space", ":", "\n", "        ", "return", "self", ".", "_action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.reset": [[151, 158], ["pyrobot_v1.PyRobot._robot.camera.reset", "pyrobot_v1.PyRobot._sensor_suite.get_observations", "pyrobot_v1.PyRobot.get_robot_observations"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.reset", "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_robot_observations"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_robot", ".", "camera", ".", "reset", "(", ")", "\n", "\n", "observations", "=", "self", ".", "_sensor_suite", ".", "get_observations", "(", "\n", "robot_obs", "=", "self", ".", "get_robot_observations", "(", ")", "\n", ")", "\n", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.step": [[159, 179], ["pyrobot_v1.PyRobot._sensor_suite.get_observations", "getattr", "ValueError", "pyrobot_v1.PyRobot.get_robot_observations", "getattr"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_robot_observations"], ["", "def", "step", "(", "self", ",", "action", ",", "action_params", ")", ":", "\n", "        ", "r\"\"\"Step in reality. Currently the supported\n        actions are the ones defined in :ref:`_locobot_base_action_space`\n        and :ref:`_locobot_camera_action_space`. For details on how\n        to use these actions please refer to the documentation\n        of namesake methods in PyRobot\n        (https://github.com/facebookresearch/pyrobot).\n        \"\"\"", "\n", "if", "action", "in", "self", ".", "_robot_config", ".", "BASE_ACTIONS", ":", "\n", "            ", "getattr", "(", "self", ".", "_robot", ".", "base", ",", "action", ")", "(", "**", "action_params", ")", "\n", "", "elif", "action", "in", "self", ".", "_robot_config", ".", "CAMERA_ACTIONS", ":", "\n", "            ", "getattr", "(", "self", ".", "_robot", ".", "camera", ",", "action", ")", "(", "**", "action_params", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid action {}\"", ".", "format", "(", "action", ")", ")", "\n", "\n", "", "observations", "=", "self", ".", "_sensor_suite", ".", "get_observations", "(", "\n", "robot_obs", "=", "self", ".", "get_robot_observations", "(", ")", "\n", ")", "\n", "\n", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.render": [[180, 189], ["pyrobot_v1.PyRobot._sensor_suite.get_observations", "pyrobot_v1.PyRobot.get", "pyrobot_v1.PyRobot.get_robot_observations"], "methods", ["home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_robot_observations"], ["", "def", "render", "(", "self", ",", "mode", ":", "str", "=", "\"rgb\"", ")", "->", "Any", ":", "\n", "        ", "observations", "=", "self", ".", "_sensor_suite", ".", "get_observations", "(", "\n", "robot_obs", "=", "self", ".", "get_robot_observations", "(", ")", "\n", ")", "\n", "\n", "output", "=", "observations", ".", "get", "(", "mode", ")", "\n", "assert", "output", "is", "not", "None", ",", "\"mode {} sensor is not active\"", ".", "format", "(", "mode", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.get_agent_state": [[190, 201], ["pyrobot_v1.PyRobot._robot.base.get_state", "pyrobot_v1.PyRobot._robot.camera.get_state"], "methods", ["None"], ["", "def", "get_agent_state", "(", "\n", "self", ",", "agent_id", ":", "int", "=", "0", ",", "base_state_type", ":", "str", "=", "\"odom\"", "\n", ")", ":", "\n", "        ", "assert", "agent_id", "==", "0", ",", "\"No support of multi agent in {} yet.\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", "\n", ")", "\n", "state", "=", "{", "\n", "\"base\"", ":", "self", ".", "_robot", ".", "base", ".", "get_state", "(", "base_state_type", ")", ",", "\n", "\"camera\"", ":", "self", ".", "_robot", ".", "camera", ".", "get_state", "(", ")", ",", "\n", "}", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.PyRobot.seed": [[202, 204], ["NotImplementedError"], "methods", ["None"], ["", "def", "seed", "(", "self", ",", "seed", ":", "int", ")", "->", "None", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"No support for seeding in reality\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1.Robot.__init__": [[214, 325], ["os.path.dirname", "os.path.join", "os.listdir", "pyrobot_v1.Robot.configs.freeze", "rospy.sleep", "os.path.realpath", "f.endswith", "ValueError", "rospy.init_node", "importlib.import_module", "getattr", "setattr", "importlib.import_module", "getattr", "getattr.", "importlib.import_module", "getattr", "getattr.", "importlib.import_module", "getattr", "getattr.", "importlib.import_module", "getattr", "getattr.", "robot_pool.append", "importlib.import_module", "getattr", "rospy.logwarn", "getattr.", "getattr", "getattr", "getattr", "getattr", "getattr.", "getattr.", "len"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "robot_name", ",", "\n", "use_arm", "=", "True", ",", "\n", "use_base", "=", "True", ",", "\n", "use_camera", "=", "True", ",", "\n", "use_gripper", "=", "True", ",", "\n", "arm_config", "=", "{", "}", ",", "\n", "base_config", "=", "{", "}", ",", "\n", "camera_config", "=", "{", "}", ",", "\n", "gripper_config", "=", "{", "}", ",", "\n", "common_config", "=", "{", "}", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Constructor for the Robot class\n        :param robot_name: robot name\n        :param use_arm: use arm or not\n        :param use_base: use base or not\n        :param use_camera: use camera or not\n        :param use_gripper: use gripper or not\n        :param arm_config: configurations for arm\n        :param base_config: configurations for base\n        :param camera_config: configurations for camera\n        :param gripper_config: configurations for gripper\n        :type robot_name: string\n        :type use_arm: bool\n        :type use_base: bool\n        :type use_camera: bool\n        :type use_gripper: bool\n        :type arm_config: dict\n        :type base_config: dict\n        :type camera_config: dict\n        :type gripper_config: dict\n        \"\"\"", "\n", "\n", "root_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "cfg_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "\"cfg\"", ")", "\n", "robot_pool", "=", "[", "]", "\n", "for", "f", "in", "os", ".", "listdir", "(", "cfg_path", ")", ":", "\n", "            ", "if", "f", ".", "endswith", "(", "\"_config.py\"", ")", ":", "\n", "                ", "robot_pool", ".", "append", "(", "f", "[", ":", "-", "len", "(", "\"_config.py\"", ")", "]", ")", "\n", "", "", "root_node", "=", "\"pyrobot.\"", "\n", "self", ".", "configs", "=", "None", "\n", "this_robot", "=", "None", "\n", "for", "srobot", "in", "robot_pool", ":", "\n", "            ", "if", "srobot", "in", "robot_name", ":", "\n", "                ", "this_robot", "=", "srobot", "\n", "mod", "=", "importlib", ".", "import_module", "(", "\n", "\"pyrobot_utils.\"", "+", "\"cfg.\"", "+", "\"{:s}_config\"", ".", "format", "(", "srobot", ")", "\n", ")", "\n", "cfg_func", "=", "getattr", "(", "mod", ",", "\"get_cfg\"", ")", "\n", "if", "srobot", "==", "\"locobot\"", "and", "\"lite\"", "in", "robot_name", ":", "\n", "                    ", "self", ".", "configs", "=", "cfg_func", "(", "\"create\"", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "configs", "=", "cfg_func", "(", ")", "\n", "", "", "", "if", "self", ".", "configs", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid robot name provided, only the following\"", "\n", "\" are currently available: {}\"", ".", "format", "(", "robot_pool", ")", "\n", ")", "\n", "", "self", ".", "configs", ".", "freeze", "(", ")", "\n", "try", ":", "\n", "            ", "rospy", ".", "init_node", "(", "\"pyrobot_utils\"", ",", "anonymous", "=", "True", ")", "\n", "", "except", "rospy", ".", "exceptions", ".", "ROSException", ":", "\n", "            ", "rospy", ".", "logwarn", "(", "\"ROS node [pyrobot_utils] has already been initialized\"", ")", "\n", "\n", "", "root_node", "+=", "this_robot", "\n", "root_node", "+=", "\".\"", "\n", "if", "self", ".", "configs", ".", "HAS_COMMON", ":", "\n", "            ", "mod", "=", "importlib", ".", "import_module", "(", "root_node", "+", "self", ".", "configs", ".", "COMMON", ".", "NAME", ")", "\n", "common_class", "=", "getattr", "(", "mod", ",", "self", ".", "configs", ".", "COMMON", ".", "CLASS", ")", "\n", "setattr", "(", "\n", "self", ",", "\n", "self", ".", "configs", ".", "COMMON", ".", "NAME", ",", "\n", "common_class", "(", "self", ".", "configs", ",", "**", "common_config", ")", ",", "\n", ")", "\n", "", "if", "self", ".", "configs", ".", "HAS_ARM", "and", "use_arm", ":", "\n", "            ", "mod", "=", "importlib", ".", "import_module", "(", "root_node", "+", "\"arm\"", ")", "\n", "arm_class", "=", "getattr", "(", "mod", ",", "self", ".", "configs", ".", "ARM", ".", "CLASS", ")", "\n", "if", "self", ".", "configs", ".", "HAS_COMMON", ":", "\n", "                ", "arm_config", "[", "self", ".", "configs", ".", "COMMON", ".", "NAME", "]", "=", "getattr", "(", "\n", "self", ",", "self", ".", "configs", ".", "COMMON", ".", "NAME", "\n", ")", "\n", "", "self", ".", "arm", "=", "arm_class", "(", "self", ".", "configs", ",", "**", "arm_config", ")", "\n", "", "if", "self", ".", "configs", ".", "HAS_BASE", "and", "use_base", ":", "\n", "            ", "mod", "=", "importlib", ".", "import_module", "(", "root_node", "+", "\"base\"", ")", "\n", "base_class", "=", "getattr", "(", "mod", ",", "self", ".", "configs", ".", "BASE", ".", "CLASS", ")", "\n", "if", "self", ".", "configs", ".", "HAS_COMMON", ":", "\n", "                ", "base_config", "[", "self", ".", "configs", ".", "COMMON", ".", "NAME", "]", "=", "getattr", "(", "\n", "self", ",", "self", ".", "configs", ".", "COMMON", ".", "NAME", "\n", ")", "\n", "", "self", ".", "base", "=", "base_class", "(", "self", ".", "configs", ",", "**", "base_config", ")", "\n", "", "if", "self", ".", "configs", ".", "HAS_CAMERA", "and", "use_camera", ":", "\n", "            ", "mod", "=", "importlib", ".", "import_module", "(", "root_node", "+", "\"camera\"", ")", "\n", "camera_class", "=", "getattr", "(", "mod", ",", "self", ".", "configs", ".", "CAMERA", ".", "CLASS", ")", "\n", "if", "self", ".", "configs", ".", "HAS_COMMON", ":", "\n", "                ", "camera_config", "[", "self", ".", "configs", ".", "COMMON", ".", "NAME", "]", "=", "getattr", "(", "\n", "self", ",", "self", ".", "configs", ".", "COMMON", ".", "NAME", "\n", ")", "\n", "", "self", ".", "camera", "=", "camera_class", "(", "self", ".", "configs", ",", "**", "camera_config", ")", "\n", "", "if", "self", ".", "configs", ".", "HAS_GRIPPER", "and", "use_gripper", "and", "use_arm", ":", "\n", "            ", "mod", "=", "importlib", ".", "import_module", "(", "root_node", "+", "\"gripper\"", ")", "\n", "gripper_class", "=", "getattr", "(", "mod", ",", "self", ".", "configs", ".", "GRIPPER", ".", "CLASS", ")", "\n", "if", "self", ".", "configs", ".", "HAS_COMMON", ":", "\n", "                ", "gripper_config", "[", "self", ".", "configs", ".", "COMMON", ".", "NAME", "]", "=", "getattr", "(", "\n", "self", ",", "self", ".", "configs", ".", "COMMON", ".", "NAME", "\n", ")", "\n", "", "self", ".", "gripper", "=", "gripper_class", "(", "self", ".", "configs", ",", "**", "gripper_config", ")", "\n", "\n", "# sleep some time for tf listeners in subclasses", "\n", "", "rospy", ".", "sleep", "(", "2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1._locobot_base_action_space": [[25, 30], ["gym.spaces.Dict", "gym.spaces.Box", "gym.spaces.Box"], "function", ["None"], ["def", "_locobot_base_action_space", "(", ")", ":", "\n", "    ", "return", "spaces", ".", "Dict", "(", "\n", "{", "\n", "\"go_to_relative\"", ":", "spaces", ".", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "3", ",", ")", ")", ",", "\n", "\"go_to_absolute\"", ":", "spaces", ".", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "3", ",", ")", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1._locobot_camera_action_space": [[34, 40], ["gym.spaces.Dict", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box"], "function", ["None"], ["", "def", "_locobot_camera_action_space", "(", ")", ":", "\n", "    ", "return", "spaces", ".", "Dict", "(", "\n", "{", "\n", "\"set_pan\"", ":", "spaces", ".", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "1", ",", ")", ")", ",", "\n", "\"set_tilt\"", ":", "spaces", ".", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "1", ",", ")", ")", ",", "\n", "\"set_pan_tilt\"", ":", "spaces", ".", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "2", ",", ")", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.pyrobot_utils.pyrobot_v1._resize_observation": [[44, 58], ["habitat.core.utils.center_crop", "cv2.resize"], "function", ["None"], ["", "def", "_resize_observation", "(", "obs", ",", "observation_space", ",", "config", ")", ":", "\n", "    ", "if", "obs", ".", "shape", "!=", "observation_space", ".", "shape", ":", "\n", "        ", "if", "(", "\n", "config", ".", "CENTER_CROP", "is", "True", "\n", "and", "obs", ".", "shape", "[", "0", "]", ">", "observation_space", ".", "shape", "[", "0", "]", "\n", "and", "obs", ".", "shape", "[", "1", "]", ">", "observation_space", ".", "shape", "[", "1", "]", "\n", ")", ":", "\n", "            ", "obs", "=", "center_crop", "(", "obs", ",", "observation_space", ")", "\n", "\n", "", "else", ":", "\n", "            ", "obs", "=", "cv2", ".", "resize", "(", "\n", "obs", ",", "(", "observation_space", ".", "shape", "[", "1", "]", ",", "observation_space", ".", "shape", "[", "0", "]", ")", "\n", ")", "\n", "", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.aimagelab_LoCoNav.cfg.locobot_config.get_cfg": [[148, 159], ["_C.clone", "ValueError", "os.path.dirname", "os.path.join", "_C.merge_from_file", "os.path.realpath"], "function", ["None"], ["def", "get_cfg", "(", "base_type", "=", "\"kobuki\"", ")", ":", "\n", "    ", "global", "_C", "\n", "if", "base_type", "not", "in", "[", "\"kobuki\"", ",", "\"create\"", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported base type: {:s}\"", ".", "format", "(", "base_type", ")", ")", "\n", "", "if", "base_type", "==", "\"create\"", ":", "\n", "        ", "import", "os", "\n", "\n", "dir_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "create_env_file", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "\"create_base.yaml\"", ")", "\n", "_C", ".", "merge_from_file", "(", "create_env_file", ")", "\n", "", "return", "_C", ".", "clone", "(", ")", "\n", "", ""]]}