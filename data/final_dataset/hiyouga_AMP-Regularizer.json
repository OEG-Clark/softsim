{"home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.main.Instructor.__init__": [[14, 26], ["logging.getLogger", "main.Instructor.logger.setLevel", "main.Instructor.logger.addHandler", "main.Instructor.logger.addHandler", "main.Instructor.logger.info", "main.Instructor.model.to", "main.Instructor._print_args", "logging.StreamHandler", "logging.FileHandler", "main.Instructor.logger.info", "torch.cuda.memory_allocated"], "methods", ["home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.main.Instructor._print_args"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "self", ".", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "logging", ".", "FileHandler", "(", "args", ".", "log_name", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"> creating model {args.model}\"", ")", "\n", "self", ".", "model", "=", "models", ".", "__dict__", "[", "args", ".", "model", "]", "(", "num_classes", "=", "args", ".", "num_classes", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "if", "args", ".", "device", ".", "type", "==", "'cuda'", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "f\"> cuda memory allocated: {torch.cuda.memory_allocated(args.device.index)}\"", ")", "\n", "", "self", ".", "_print_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.main.Instructor._print_args": [[27, 39], ["main.Instructor.model.parameters", "main.Instructor.logger.info", "main.Instructor.logger.info", "vars", "torch.prod", "main.Instructor.logger.info", "torch.tensor", "p.size", "getattr"], "methods", ["None"], ["", "def", "_print_args", "(", "self", ")", ":", "\n", "        ", "n_trainable_params", ",", "n_nontrainable_params", "=", "0", ",", "0", "\n", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "n_params", "=", "torch", ".", "prod", "(", "torch", ".", "tensor", "(", "p", ".", "size", "(", ")", ")", ")", "\n", "if", "p", ".", "requires_grad", ":", "\n", "                ", "n_trainable_params", "+=", "n_params", "\n", "", "else", ":", "\n", "                ", "n_nontrainable_params", "+=", "n_params", "\n", "", "", "self", ".", "logger", ".", "info", "(", "f\"> n_trainable_params: {n_trainable_params}, n_nontrainable_params: {n_nontrainable_params}\"", ")", "\n", "self", ".", "logger", ".", "info", "(", "'> training arguments:'", ")", "\n", "for", "arg", "in", "vars", "(", "self", ".", "args", ")", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "f\">>> {arg}: {getattr(self.args, arg)}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.main.Instructor._train": [[40, 62], ["len", "main.Instructor.model.train", "enumerate", "print", "optimizer.step", "targets.size", "int", "sys.stdout.write", "sys.stdout.flush", "inputs.to", "targets.to", "optimizer.zero_grad", "main.Instructor.model", "criterion", "criterion.backward", "torch.nn.utils.clip_grad_norm_", "criterion.item", "targets.size", "main.Instructor.model.parameters", "torch.argmax"], "methods", ["home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.amp.AMP.step"], ["", "", "def", "_train", "(", "self", ",", "train_dataloader", ",", "criterion", ",", "optimizer", ")", ":", "\n", "        ", "train_loss", ",", "n_correct", ",", "n_train", "=", "0", ",", "0", ",", "0", "\n", "n_batch", "=", "len", "(", "train_dataloader", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "i_batch", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "self", ".", "args", ".", "device", ")", ",", "targets", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "def", "closure", "(", ")", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "self", ".", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "args", ".", "clip_norm", ")", "\n", "return", "outputs", ",", "loss", "\n", "", "outputs", ",", "loss", "=", "optimizer", ".", "step", "(", "closure", ")", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "*", "targets", ".", "size", "(", "0", ")", "\n", "n_correct", "+=", "(", "torch", ".", "argmax", "(", "outputs", ",", "-", "1", ")", "==", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "n_train", "+=", "targets", ".", "size", "(", "0", ")", "\n", "ratio", "=", "int", "(", "(", "i_batch", "+", "1", ")", "*", "50", "/", "n_batch", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "f\"\\r[{'>'*ratio}{' '*(50-ratio)}] {i_batch+1}/{n_batch} {(i_batch+1)*100/n_batch:.2f}%\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "print", "(", ")", "\n", "return", "train_loss", "/", "n_train", ",", "n_correct", "/", "n_train", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.main.Instructor._test": [[63, 80], ["len", "main.Instructor.model.eval", "print", "torch.no_grad", "enumerate", "main.Instructor.model", "criterion", "targets.size", "int", "sys.stdout.write", "sys.stdout.flush", "inputs.to", "targets.to", "criterion.item", "targets.size", "torch.argmax"], "methods", ["None"], ["", "def", "_test", "(", "self", ",", "test_dataloader", ",", "criterion", ")", ":", "\n", "        ", "test_loss", ",", "n_correct", ",", "n_test", "=", "0", ",", "0", ",", "0", "\n", "n_batch", "=", "len", "(", "test_dataloader", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i_batch", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "test_dataloader", ")", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "self", ".", "args", ".", "device", ")", ",", "targets", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "outputs", "=", "self", ".", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "*", "targets", ".", "size", "(", "0", ")", "\n", "n_correct", "+=", "(", "torch", ".", "argmax", "(", "outputs", ",", "-", "1", ")", "==", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "n_test", "+=", "targets", ".", "size", "(", "0", ")", "\n", "ratio", "=", "int", "(", "(", "i_batch", "+", "1", ")", "*", "50", "/", "n_batch", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "f\"\\r[{'>'*ratio}{' '*(50-ratio)}] {i_batch+1}/{n_batch} {(i_batch+1)*100/n_batch:.2f}%\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "", "print", "(", ")", "\n", "return", "test_loss", "/", "n_test", ",", "n_correct", "/", "n_test", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.main.Instructor.run": [[81, 112], ["data_utils.load_data", "torch.nn.CrossEntropyLoss", "amp.AMP", "torch.optim.lr_scheduler.MultiStepLR", "range", "main.Instructor.logger.info", "main.Instructor.logger.info", "main.Instructor._train", "main.Instructor._test", "torch.optim.lr_scheduler.MultiStepLR.step", "main.Instructor.logger.info", "main.Instructor.logger.info", "main.Instructor.logger.info", "os.path.join", "filter", "main.Instructor.model.parameters"], "methods", ["home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.data_utils.load_data", "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.main.Instructor._train", "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.main.Instructor._test", "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.amp.AMP.step"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "train_dataloader", ",", "test_dataloader", "=", "load_data", "(", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "workers", "=", "0", ",", "\n", "dataset", "=", "self", ".", "args", ".", "dataset", ",", "\n", "data_target_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data_dir", ",", "self", ".", "args", ".", "dataset", ")", ",", "\n", "data_aug", "=", "(", "self", ".", "args", ".", "no_data_aug", "==", "False", ")", ",", "\n", "cutout", "=", "self", ".", "args", ".", "cutout", ",", "\n", "autoaug", "=", "self", ".", "args", ".", "autoaug", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "AMP", "(", "params", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "self", ".", "args", ".", "lr", ",", "\n", "epsilon", "=", "self", ".", "args", ".", "epsilon", ",", "\n", "inner_lr", "=", "self", ".", "args", ".", "inner_lr", ",", "\n", "inner_iter", "=", "self", ".", "args", ".", "inner_iter", ",", "\n", "base_optimizer", "=", "torch", ".", "optim", ".", "SGD", ",", "\n", "momentum", "=", "self", ".", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "args", ".", "decay", ",", "\n", "nesterov", "=", "True", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "self", ".", "args", ".", "milestones", ",", "self", ".", "args", ".", "gamma", ")", "\n", "best_loss", ",", "best_acc", "=", "0", ",", "0", "\n", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "num_epoch", ")", ":", "\n", "            ", "train_loss", ",", "train_acc", "=", "self", ".", "_train", "(", "train_dataloader", ",", "criterion", ",", "optimizer", ")", "\n", "test_loss", ",", "test_acc", "=", "self", ".", "_test", "(", "test_dataloader", ",", "criterion", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "if", "test_acc", ">", "best_acc", "or", "(", "test_acc", "==", "best_acc", "and", "test_loss", "<", "best_loss", ")", ":", "\n", "                ", "best_acc", ",", "best_loss", "=", "test_acc", ",", "test_loss", "\n", "", "self", ".", "logger", ".", "info", "(", "f\"{epoch+1}/{self.args.num_epoch} - {100*(epoch+1)/self.args.num_epoch:.2f}%\"", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"[train] loss: {train_loss:.4f}, acc: {train_acc*100:.2f}, err: {100-train_acc*100:.2f}\"", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"[test] loss: {test_loss:.4f}, acc: {test_acc*100:.2f}, err: {100-test_acc*100:.2f}\"", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "f\"best loss: {best_loss:.4f}, best acc: {best_acc*100:.2f}, best err: {100-best_acc*100:.2f}\"", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"log saved: {self.args.log_name}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.data_utils.Cutout.__init__": [[83, 86], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_holes", ",", "length", ")", ":", "\n", "        ", "self", ".", "n_holes", "=", "n_holes", "\n", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.data_utils.Cutout.__call__": [[87, 103], ["img.size", "numpy.ones", "range", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "numpy.random.randint", "numpy.random.randint", "int", "int", "int", "int", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "''' img: Tensor image of size (C, H, W) '''", "\n", "_", ",", "h", ",", "w", "=", "img", ".", "size", "(", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "for", "n", "in", "range", "(", "self", ".", "n_holes", ")", ":", "\n", "            ", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "y1", "=", "int", "(", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", ")", "\n", "y2", "=", "int", "(", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", ")", "\n", "x1", "=", "int", "(", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", ")", "\n", "x2", "=", "int", "(", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", ")", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "=", "img", "*", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.data_utils.ImageNetPolicy.__init__": [[107, 138], ["data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.4", ",", "'posterize'", ",", "8", ",", "0.6", ",", "'rotate'", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "'solarize'", ",", "5", ",", "0.6", ",", "'autocontrast'", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "'equalize'", ",", "8", ",", "0.6", ",", "'equalize'", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "'posterize'", ",", "7", ",", "0.6", ",", "'posterize'", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "'equalize'", ",", "7", ",", "0.2", ",", "'solarize'", ",", "4", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "'equalize'", ",", "4", ",", "0.8", ",", "'rotate'", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "'solarize'", ",", "3", ",", "0.6", ",", "'equalize'", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "'posterize'", ",", "5", ",", "1.0", ",", "'equalize'", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.2", ",", "'rotate'", ",", "3", ",", "0.6", ",", "'solarize'", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "'equalize'", ",", "8", ",", "0.4", ",", "'posterize'", ",", "6", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "'rotate'", ",", "8", ",", "0.4", ",", "'color'", ",", "0", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "'rotate'", ",", "9", ",", "0.6", ",", "'equalize'", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.0", ",", "'equalize'", ",", "7", ",", "0.8", ",", "'equalize'", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "'invert'", ",", "4", ",", "1.0", ",", "'equalize'", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "'color'", ",", "4", ",", "1.0", ",", "'contrast'", ",", "8", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "'rotate'", ",", "8", ",", "1.0", ",", "'color'", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "'color'", ",", "8", ",", "0.8", ",", "'solarize'", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "'sharpness'", ",", "7", ",", "0.6", ",", "'invert'", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "'shearX'", ",", "5", ",", "1.0", ",", "'equalize'", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "'color'", ",", "0", ",", "0.6", ",", "'equalize'", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "'equalize'", ",", "7", ",", "0.2", ",", "'solarize'", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "'solarize'", ",", "5", ",", "0.6", ",", "'autocontrast'", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "'invert'", ",", "4", ",", "1.0", ",", "'equalize'", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "'color'", ",", "4", ",", "1.0", ",", "'contrast'", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "'equalize'", ",", "8", ",", "0.6", ",", "'equalize'", ",", "3", ",", "fillcolor", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.data_utils.ImageNetPolicy.__call__": [[140, 143], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.data_utils.ImageNetPolicy.__repr__": [[144, 146], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'AutoAugment ImageNet Policy'", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.data_utils.CIFAR10Policy.__init__": [[150, 181], ["data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.1", ",", "'invert'", ",", "7", ",", "0.2", ",", "'contrast'", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "'rotate'", ",", "2", ",", "0.3", ",", "'translateX'", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "'sharpness'", ",", "1", ",", "0.9", ",", "'sharpness'", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "'shearY'", ",", "8", ",", "0.7", ",", "'translateY'", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "'autocontrast'", ",", "8", ",", "0.9", ",", "'equalize'", ",", "2", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.2", ",", "'shearY'", ",", "7", ",", "0.3", ",", "'posterize'", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "'color'", ",", "3", ",", "0.6", ",", "'brightness'", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "'sharpness'", ",", "9", ",", "0.7", ",", "'brightness'", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "'equalize'", ",", "5", ",", "0.5", ",", "'equalize'", ",", "1", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "'contrast'", ",", "7", ",", "0.6", ",", "'sharpness'", ",", "5", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.7", ",", "'color'", ",", "7", ",", "0.5", ",", "'translateX'", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "'equalize'", ",", "7", ",", "0.4", ",", "'autocontrast'", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "'translateY'", ",", "3", ",", "0.2", ",", "'sharpness'", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "'brightness'", ",", "6", ",", "0.2", ",", "'color'", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "'solarize'", ",", "2", ",", "0.0", ",", "'invert'", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.2", ",", "'equalize'", ",", "0", ",", "0.6", ",", "'autocontrast'", ",", "0", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.2", ",", "'equalize'", ",", "8", ",", "0.6", ",", "'equalize'", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "'color'", ",", "9", ",", "0.6", ",", "'equalize'", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "'autocontrast'", ",", "4", ",", "0.2", ",", "'solarize'", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.1", ",", "'brightness'", ",", "3", ",", "0.7", ",", "'color'", ",", "0", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "'solarize'", ",", "5", ",", "0.9", ",", "'autocontrast'", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "'translateY'", ",", "9", ",", "0.7", ",", "'translateY'", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "'autocontrast'", ",", "2", ",", "0.8", ",", "'solarize'", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "'equalize'", ",", "8", ",", "0.1", ",", "'invert'", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "'translateY'", ",", "9", ",", "0.9", ",", "'autocontrast'", ",", "1", ",", "fillcolor", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.data_utils.CIFAR10Policy.__call__": [[183, 186], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.data_utils.CIFAR10Policy.__repr__": [[187, 189], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'AutoAugment CIFAR10 Policy'", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.data_utils.SVHNPolicy.__init__": [[193, 224], ["data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy", "data_utils.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.9", ",", "'shearX'", ",", "4", ",", "0.2", ",", "'invert'", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "'shearY'", ",", "8", ",", "0.7", ",", "'invert'", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "'equalize'", ",", "5", ",", "0.6", ",", "'solarize'", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "'invert'", ",", "3", ",", "0.6", ",", "'equalize'", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "'equalize'", ",", "1", ",", "0.9", ",", "'rotate'", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.9", ",", "'shearX'", ",", "4", ",", "0.8", ",", "'autocontrast'", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "'shearY'", ",", "8", ",", "0.4", ",", "'invert'", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "'shearY'", ",", "5", ",", "0.2", ",", "'solarize'", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "'invert'", ",", "6", ",", "0.8", ",", "'autocontrast'", ",", "1", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "'equalize'", ",", "3", ",", "0.9", ",", "'rotate'", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.9", ",", "'shearX'", ",", "4", ",", "0.3", ",", "'solarize'", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "'shearY'", ",", "8", ",", "0.7", ",", "'invert'", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "'equalize'", ",", "5", ",", "0.6", ",", "'translateY'", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "'invert'", ",", "4", ",", "0.6", ",", "'equalize'", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "'contrast'", ",", "3", ",", "0.8", ",", "'rotate'", ",", "4", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "'invert'", ",", "5", ",", "0.0", ",", "'translateY'", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "'shearY'", ",", "6", ",", "0.4", ",", "'solarize'", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "'invert'", ",", "4", ",", "0.8", ",", "'rotate'", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "'shearY'", ",", "7", ",", "0.9", ",", "'translateX'", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.1", ",", "'shearX'", ",", "6", ",", "0.6", ",", "'invert'", ",", "5", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.7", ",", "'solarize'", ",", "2", ",", "0.6", ",", "'translateY'", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "'shearY'", ",", "4", ",", "0.8", ",", "'invert'", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "'shearX'", ",", "9", ",", "0.8", ",", "'translateY'", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "'shearY'", ",", "5", ",", "0.7", ",", "'autocontrast'", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "'shearX'", ",", "2", ",", "0.1", ",", "'invert'", ",", "5", ",", "fillcolor", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.data_utils.SVHNPolicy.__call__": [[226, 229], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.data_utils.SVHNPolicy.__repr__": [[230, 232], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'AutoAugment SVHN Policy'", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.data_utils.SubPolicy.__init__": [[236, 292], ["numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.round().astype", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "img.convert().rotate", "PIL.Image.composite().convert", "img.transform", "img.transform", "img.transform", "img.transform", "data_utils.SubPolicy.__init__.rotate_with_fill"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p1", ",", "operation1", ",", "magnitude_idx1", ",", "p2", ",", "operation2", ",", "magnitude_idx2", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "ranges", "=", "{", "\n", "'shearX'", ":", "np", ".", "linspace", "(", "0", ",", "0.3", ",", "10", ")", ",", "\n", "'shearY'", ":", "np", ".", "linspace", "(", "0", ",", "0.3", ",", "10", ")", ",", "\n", "'translateX'", ":", "np", ".", "linspace", "(", "0", ",", "150", "/", "331", ",", "10", ")", ",", "\n", "'translateY'", ":", "np", ".", "linspace", "(", "0", ",", "150", "/", "331", ",", "10", ")", ",", "\n", "'rotate'", ":", "np", ".", "linspace", "(", "0", ",", "30", ",", "10", ")", ",", "\n", "'color'", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "'posterize'", ":", "np", ".", "round", "(", "np", ".", "linspace", "(", "8", ",", "4", ",", "10", ")", ",", "0", ")", ".", "astype", "(", "np", ".", "int", ")", ",", "\n", "'solarize'", ":", "np", ".", "linspace", "(", "256", ",", "0", ",", "10", ")", ",", "\n", "'contrast'", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "'sharpness'", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "'brightness'", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "'autocontrast'", ":", "[", "0", "]", "*", "10", ",", "\n", "'equalize'", ":", "[", "0", "]", "*", "10", ",", "\n", "'invert'", ":", "[", "0", "]", "*", "10", "\n", "}", "\n", "\n", "def", "rotate_with_fill", "(", "img", ",", "magnitude", ")", ":", "\n", "            ", "rot", "=", "img", ".", "convert", "(", "'RGBA'", ")", ".", "rotate", "(", "magnitude", ")", "\n", "return", "Image", ".", "composite", "(", "rot", ",", "Image", ".", "new", "(", "'RGBA'", ",", "rot", ".", "size", ",", "(", "128", ",", ")", "*", "4", ")", ",", "rot", ")", ".", "convert", "(", "img", ".", "mode", ")", "\n", "\n", "", "func", "=", "{", "\n", "'shearX'", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "0", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "Image", ".", "BICUBIC", ",", "fillcolor", "=", "fillcolor", ")", ",", "\n", "'shearY'", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "1", ",", "0", ")", ",", "\n", "Image", ".", "BICUBIC", ",", "fillcolor", "=", "fillcolor", ")", ",", "\n", "'translateX'", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "magnitude", "*", "img", ".", "size", "[", "0", "]", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "fillcolor", "=", "fillcolor", ")", ",", "\n", "'translateY'", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "magnitude", "*", "img", ".", "size", "[", "1", "]", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "fillcolor", "=", "fillcolor", ")", ",", "\n", "'rotate'", ":", "lambda", "img", ",", "magnitude", ":", "rotate_with_fill", "(", "img", ",", "magnitude", ")", ",", "\n", "'color'", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "'posterize'", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "posterize", "(", "img", ",", "magnitude", ")", ",", "\n", "'solarize'", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "solarize", "(", "img", ",", "magnitude", ")", ",", "\n", "'contrast'", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "'sharpness'", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "'brightness'", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "'autocontrast'", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "autocontrast", "(", "img", ")", ",", "\n", "'equalize'", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "equalize", "(", "img", ")", ",", "\n", "'invert'", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "invert", "(", "img", ")", "\n", "}", "\n", "\n", "self", ".", "p1", "=", "p1", "\n", "self", ".", "operation1", "=", "func", "[", "operation1", "]", "\n", "self", ".", "magnitude1", "=", "ranges", "[", "operation1", "]", "[", "magnitude_idx1", "]", "\n", "self", ".", "p2", "=", "p2", "\n", "self", ".", "operation2", "=", "func", "[", "operation2", "]", "\n", "self", ".", "magnitude2", "=", "ranges", "[", "operation2", "]", "[", "magnitude_idx2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.data_utils.SubPolicy.__call__": [[294, 298], ["random.random", "data_utils.SubPolicy.operation1", "random.random", "data_utils.SubPolicy.operation2"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p1", ":", "img", "=", "self", ".", "operation1", "(", "img", ",", "self", ".", "magnitude1", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p2", ":", "img", "=", "self", ".", "operation2", "(", "img", ",", "self", ".", "magnitude2", ")", "\n", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.data_utils.load_data": [[9, 79], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "transform_list.append", "transform_list.append", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "ValueError", "torchvision.transforms.ToTensor", "transform_list.append", "torchvision.transforms.Normalize", "transform_list.append", "transform_list.append", "transform_list.append", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "ValueError", "data_utils.SVHNPolicy", "torchvision.transforms.RandomCrop", "data_utils.Cutout", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "transform_list.append", "torchvision.transforms.ToTensor", "transform_list.append", "torchvision.transforms.Normalize", "data_utils.CIFAR10Policy", "data_utils.Cutout", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["def", "load_data", "(", "batch_size", ",", "workers", ",", "dataset", ",", "data_target_dir", ",", "data_aug", ",", "cutout", ",", "autoaug", ")", ":", "\n", "\n", "    ", "if", "dataset", "==", "'cifar10'", ":", "\n", "        ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "        ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "129.3", ",", "124.1", ",", "112.4", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "68.2", ",", "65.4", ",", "70.4", "]", "]", "\n", "", "elif", "dataset", "==", "'svhn'", ":", "\n", "        ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "109.9", ",", "109.7", ",", "113.8", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "50.1", ",", "50.6", ",", "50.8", "]", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unknow dataset : {dataset}\"", ")", "\n", "\n", "", "if", "data_aug", ":", "\n", "        ", "if", "dataset", "==", "'svhn'", ":", "\n", "            ", "if", "autoaug", ":", "\n", "                ", "transform_list", "=", "[", "SVHNPolicy", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "transform_list", "=", "[", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "2", ",", "fill", "=", "128", ")", "]", "\n", "", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "if", "cutout", "or", "autoaug", ":", "\n", "                ", "transform_list", ".", "append", "(", "Cutout", "(", "n_holes", "=", "1", ",", "length", "=", "20", ")", ")", "\n", "", "transform_list", ".", "append", "(", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ")", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "]", ")", "\n", "", "elif", "dataset", "==", "'cifar10'", "or", "dataset", "==", "'cifar100'", ":", "\n", "            ", "transform_list", "=", "[", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ",", "fill", "=", "128", ")", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "if", "autoaug", ":", "\n", "                ", "transform_list", ".", "append", "(", "CIFAR10Policy", "(", ")", ")", "\n", "", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "if", "cutout", "or", "autoaug", ":", "\n", "                ", "transform_list", ".", "append", "(", "Cutout", "(", "n_holes", "=", "1", ",", "length", "=", "(", "16", "if", "dataset", "==", "'cifar10'", "else", "8", ")", ")", ")", "\n", "", "transform_list", ".", "append", "(", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ")", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "        ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "]", ")", "\n", "", "if", "dataset", "==", "'cifar10'", ":", "\n", "        ", "train_data", "=", "datasets", ".", "CIFAR10", "(", "data_target_dir", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", "\n", "test_data", "=", "datasets", ".", "CIFAR10", "(", "data_target_dir", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "        ", "train_data", "=", "datasets", ".", "CIFAR100", "(", "data_target_dir", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", "\n", "test_data", "=", "datasets", ".", "CIFAR100", "(", "data_target_dir", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "", "elif", "dataset", "==", "'svhn'", ":", "\n", "        ", "train_data", "=", "datasets", ".", "SVHN", "(", "data_target_dir", ",", "split", "=", "'train'", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", "\n", "test_data", "=", "datasets", ".", "SVHN", "(", "data_target_dir", ",", "split", "=", "'test'", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Do not support dataset : {dataset}\"", ")", "\n", "\n", "", "train_dataloader", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "test_dataloader", "=", "DataLoader", "(", "test_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_dataloader", ",", "test_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.amp.AMP.__init__": [[30, 41], ["dict", "torch.optim.Optimizer.__init__", "base_optimizer", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", ",", "epsilon", ",", "inner_lr", "=", "1", ",", "inner_iter", "=", "1", ",", "base_optimizer", "=", "SGD", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "epsilon", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid epsilon: {epsilon}\"", ")", "\n", "", "if", "inner_lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid inner lr: {inner_lr}\"", ")", "\n", "", "if", "inner_iter", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid inner iter: {inner_iter}\"", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "epsilon", "=", "epsilon", ",", "inner_lr", "=", "inner_lr", ",", "inner_iter", "=", "inner_iter", ",", "**", "kwargs", ")", "\n", "super", "(", "AMP", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "self", ".", "base_optimizer", "=", "base_optimizer", "(", "self", ".", "param_groups", ",", "lr", "=", "lr", ",", "**", "kwargs", ")", "\n", "self", ".", "param_groups", "=", "self", ".", "base_optimizer", ".", "param_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.amp.AMP.step": [[42, 66], ["torch.no_grad", "map", "range", "amp.AMP.base_optimizer.step", "ValueError", "torch.enable_grad", "closure", "closure", "x.detach", "p.sub_", "p.sub_().add_", "torch.zeros_like", "dev.norm", "p.sub_"], "methods", ["home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.None.amp.AMP.step"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "if", "closure", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Adversarial model perturbation requires closure, but it was not provided'", ")", "\n", "", "closure", "=", "torch", ".", "enable_grad", "(", ")", "(", "closure", ")", "\n", "outputs", ",", "loss", "=", "map", "(", "lambda", "x", ":", "x", ".", "detach", "(", ")", ",", "closure", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "defaults", "[", "'inner_iter'", "]", ")", ":", "\n", "            ", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "                ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                    ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "if", "i", "==", "0", ":", "\n", "                            ", "self", ".", "state", "[", "p", "]", "[", "'dev'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "grad", ")", "\n", "", "dev", "=", "self", ".", "state", "[", "p", "]", "[", "'dev'", "]", "+", "group", "[", "'inner_lr'", "]", "*", "p", ".", "grad", "\n", "clip_coef", "=", "group", "[", "'epsilon'", "]", "/", "(", "dev", ".", "norm", "(", ")", "+", "1e-12", ")", "\n", "dev", "=", "clip_coef", "*", "dev", "if", "clip_coef", "<", "1", "else", "dev", "\n", "p", ".", "sub_", "(", "self", ".", "state", "[", "p", "]", "[", "'dev'", "]", ")", ".", "add_", "(", "dev", ")", "# update \"theta\" with \"theta+delta\"", "\n", "self", ".", "state", "[", "p", "]", "[", "'dev'", "]", "=", "dev", "\n", "", "", "", "closure", "(", ")", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "p", ".", "sub_", "(", "self", ".", "state", "[", "p", "]", "[", "'dev'", "]", ")", "# restore \"theta\" from \"theta+delta\"", "\n", "", "", "", "self", ".", "base_optimizer", ".", "step", "(", ")", "\n", "return", "outputs", ",", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.vgg.VGG.__init__": [[37, 63], ["torch.Module.__init__", "vgg.VGG._make_layers", "vgg.VGG._make_layers", "vgg.VGG._make_layers", "vgg.VGG._make_layers", "vgg.VGG._make_layers", "torch.Sequential", "vgg.VGG.modules", "torch.Flatten", "torch.Linear", "torch.ReLU", "torch.Dropout", "torch.Linear", "torch.ReLU", "torch.Dropout", "torch.Linear", "isinstance", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.zeros_", "isinstance", "torch.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.vgg.VGG._make_layers", "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.vgg.VGG._make_layers", "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.vgg.VGG._make_layers", "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.vgg.VGG._make_layers", "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.vgg.VGG._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "vgg_name", ",", "num_classes", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "init_channels", "=", "3", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", "[", "0", "]", ",", "dropout", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", "[", "1", "]", ",", "dropout", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", "[", "2", "]", ",", "dropout", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", "[", "3", "]", ",", "dropout", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", "[", "4", "]", ",", "dropout", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", "\n", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "val", "=", "1", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.vgg.VGG._make_layers": [[64, 76], ["torch.Sequential", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "torch.MaxPool2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Dropout"], "methods", ["None"], ["", "", "", "def", "_make_layers", "(", "self", ",", "cfg", ",", "dropout", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "self", ".", "init_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "x", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "self", ".", "init_channels", "=", "x", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.vgg.VGG.forward": [[77, 85], ["vgg.VGG.layer1", "vgg.VGG.layer2", "vgg.VGG.layer3", "vgg.VGG.layer4", "vgg.VGG.layer5", "vgg.VGG.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "layer5", "(", "out", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.vgg.vgg11": [[87, 89], ["vgg.VGG"], "function", ["None"], ["", "", "def", "vgg11", "(", "num_classes", "=", "10", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "return", "VGG", "(", "'VGG11'", ",", "num_classes", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.vgg.vgg13": [[91, 93], ["vgg.VGG"], "function", ["None"], ["", "def", "vgg13", "(", "num_classes", "=", "10", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "return", "VGG", "(", "'VGG13'", ",", "num_classes", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.vgg.vgg16": [[95, 97], ["vgg.VGG"], "function", ["None"], ["", "def", "vgg16", "(", "num_classes", "=", "10", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "return", "VGG", "(", "'VGG16'", ",", "num_classes", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.vgg.vgg19": [[99, 101], ["vgg.VGG"], "function", ["None"], ["", "def", "vgg19", "(", "num_classes", "=", "10", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "return", "VGG", "(", "'VGG19'", ",", "num_classes", ",", "dropout", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.pyramidnet.BasicBlock.__init__": [[8, 20], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "residual", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", "*", "self", ".", "expansion", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", "*", "self", ".", "expansion", ")", "\n", ")", "\n", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "ceil_mode", "=", "True", ")", "if", "stride", "!=", "1", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.pyramidnet.BasicBlock.forward": [[21, 39], ["pyramidnet.BasicBlock.residual", "pyramidnet.BasicBlock.downsample", "pyramidnet.BasicBlock.size", "pyramidnet.BasicBlock.size", "pyramidnet.BasicBlock.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pyramidnet.BasicBlock.size", "pyramidnet.BasicBlock.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "residual", "(", "x", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "shortcut", "=", "self", ".", "downsample", "(", "x", ")", "\n", "featuremap_size", "=", "shortcut", ".", "size", "(", ")", "[", "2", ":", "4", "]", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "x", "\n", "featuremap_size", "=", "out", ".", "size", "(", ")", "[", "2", ":", "4", "]", "\n", "", "batch_size", "=", "out", ".", "size", "(", ")", "[", "0", "]", "\n", "residual_channel", "=", "out", ".", "size", "(", ")", "[", "1", "]", "\n", "shortcut_channel", "=", "shortcut", ".", "size", "(", ")", "[", "1", "]", "\n", "padding_size", "=", "(", "batch_size", ",", "residual_channel", "-", "shortcut_channel", ",", "featuremap_size", "[", "0", "]", ",", "featuremap_size", "[", "1", "]", ")", "\n", "if", "residual_channel", "!=", "shortcut_channel", ":", "\n", "            ", "padding", "=", "torch", ".", "zeros", "(", "padding_size", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "out", "+=", "torch", ".", "cat", "(", "(", "shortcut", ",", "padding", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "+=", "shortcut", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.pyramidnet.Bottleneck.__init__": [[44, 59], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "residual", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", "*", "self", ".", "expansion", ")", "\n", ")", "\n", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "ceil_mode", "=", "True", ")", "if", "stride", "!=", "1", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.pyramidnet.Bottleneck.forward": [[60, 78], ["pyramidnet.Bottleneck.residual", "pyramidnet.Bottleneck.downsample", "pyramidnet.Bottleneck.size", "pyramidnet.Bottleneck.size", "pyramidnet.Bottleneck.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pyramidnet.Bottleneck.size", "pyramidnet.Bottleneck.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "residual", "(", "x", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "shortcut", "=", "self", ".", "downsample", "(", "x", ")", "\n", "featuremap_size", "=", "shortcut", ".", "size", "(", ")", "[", "2", ":", "4", "]", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "x", "\n", "featuremap_size", "=", "out", ".", "size", "(", ")", "[", "2", ":", "4", "]", "\n", "", "batch_size", "=", "out", ".", "size", "(", ")", "[", "0", "]", "\n", "residual_channel", "=", "out", ".", "size", "(", ")", "[", "1", "]", "\n", "shortcut_channel", "=", "shortcut", ".", "size", "(", ")", "[", "1", "]", "\n", "padding_size", "=", "(", "batch_size", ",", "residual_channel", "-", "shortcut_channel", ",", "featuremap_size", "[", "0", "]", ",", "featuremap_size", "[", "1", "]", ")", "\n", "if", "residual_channel", "!=", "shortcut_channel", ":", "\n", "            ", "padding", "=", "torch", ".", "zeros", "(", "padding_size", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "out", "+=", "torch", ".", "cat", "(", "(", "shortcut", ",", "padding", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "+=", "shortcut", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.pyramidnet.PyramidNet.__init__": [[82, 116], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "pyramidnet.PyramidNet._make_layer", "pyramidnet.PyramidNet._make_layer", "pyramidnet.PyramidNet._make_layer", "torch.Sequential", "torch.Sequential", "pyramidnet.PyramidNet.modules", "int", "int", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Flatten", "torch.Flatten", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.zeros_", "torch.init.zeros_", "isinstance", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "alpha", ",", "bottleneck", ",", "num_classes", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "PyramidNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "16", "\n", "self", ".", "out_channels", "=", "16", "\n", "if", "bottleneck", ":", "\n", "            ", "n", "=", "int", "(", "(", "depth", "-", "2", ")", "/", "9", ")", "\n", "block", "=", "Bottleneck", "\n", "", "else", ":", "\n", "            ", "n", "=", "int", "(", "(", "depth", "-", "2", ")", "/", "6", ")", "\n", "block", "=", "BasicBlock", "\n", "", "self", ".", "addrate", "=", "alpha", "/", "(", "3.0", "*", "n", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "in_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "in_channels", ")", "\n", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "n", ",", "1", ",", "dropout", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "n", ",", "2", ",", "dropout", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "n", ",", "2", ",", "dropout", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "in_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "8", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "in_channels", ",", "num_classes", ")", "\n", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "val", "=", "1", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.pyramidnet.PyramidNet._make_layer": [[117, 127], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "int", "int", "block", "round", "round", "int", "int", "round", "round"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "block_depth", ",", "stride", ",", "dropout", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "self", ".", "out_channels", "=", "self", ".", "out_channels", "+", "self", ".", "addrate", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "in_channels", ",", "int", "(", "round", "(", "self", ".", "out_channels", ")", ")", ",", "stride", ",", "dropout", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "block_depth", ")", ":", "\n", "            ", "temp_channels", "=", "self", ".", "out_channels", "+", "self", ".", "addrate", "\n", "layers", ".", "append", "(", "block", "(", "int", "(", "round", "(", "self", ".", "out_channels", ")", ")", "*", "block", ".", "expansion", ",", "int", "(", "round", "(", "temp_channels", ")", ")", ",", "1", ",", "dropout", ")", ")", "\n", "self", ".", "out_channels", "=", "temp_channels", "\n", "", "self", ".", "in_channels", "=", "int", "(", "round", "(", "self", ".", "out_channels", ")", ")", "*", "block", ".", "expansion", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.pyramidnet.PyramidNet.forward": [[128, 135], ["pyramidnet.PyramidNet.conv1", "pyramidnet.PyramidNet.layer1", "pyramidnet.PyramidNet.layer2", "pyramidnet.PyramidNet.layer3", "pyramidnet.PyramidNet.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.pyramidnet.pyramidnet110_48": [[137, 139], ["pyramidnet.PyramidNet"], "function", ["None"], ["", "", "def", "pyramidnet110_48", "(", "num_classes", "=", "10", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "return", "PyramidNet", "(", "110", ",", "48", ",", "False", ",", "num_classes", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.pyramidnet.pyramidnet110_84": [[141, 143], ["pyramidnet.PyramidNet"], "function", ["None"], ["", "def", "pyramidnet110_84", "(", "num_classes", "=", "10", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "return", "PyramidNet", "(", "110", ",", "84", ",", "False", ",", "num_classes", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.pyramidnet.pyramidnet110_270": [[145, 147], ["pyramidnet.PyramidNet"], "function", ["None"], ["", "def", "pyramidnet110_270", "(", "num_classes", "=", "10", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "return", "PyramidNet", "(", "110", ",", "270", ",", "False", ",", "num_classes", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.pyramidnet.pyramidnet164_48": [[149, 151], ["pyramidnet.PyramidNet"], "function", ["None"], ["", "def", "pyramidnet164_48", "(", "num_classes", "=", "10", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "return", "PyramidNet", "(", "164", ",", "48", ",", "True", ",", "num_classes", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.pyramidnet.pyramidnet164_270": [[153, 155], ["pyramidnet.PyramidNet"], "function", ["None"], ["", "def", "pyramidnet164_270", "(", "num_classes", "=", "10", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "return", "PyramidNet", "(", "164", ",", "270", ",", "True", ",", "num_classes", ",", "dropout", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.wide_resnet.Wide_Basic.__init__": [[6, 23], ["torch.Module.__init__", "torch.Sequential", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.Dropout", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "Wide_Basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "residual", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.wide_resnet.Wide_Basic.forward": [[24, 26], ["wide_resnet.Wide_Basic.residual", "wide_resnet.Wide_Basic.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "residual", "(", "x", ")", "+", "self", ".", "shortcut", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.wide_resnet.Wide_ResNet.__init__": [[30, 57], ["torch.Module.__init__", "int", "torch.Conv2d", "wide_resnet.Wide_ResNet._wide_layer", "wide_resnet.Wide_ResNet._wide_layer", "wide_resnet.Wide_ResNet._wide_layer", "torch.Sequential", "wide_resnet.Wide_ResNet.modules", "torch.BatchNorm2d", "torch.ReLU", "torch.AvgPool2d", "torch.Flatten", "torch.Dropout", "torch.Linear", "isinstance", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.zeros_", "isinstance", "torch.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.wide_resnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.wide_resnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.wide_resnet.Wide_ResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "num_classes", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "int", "(", "(", "depth", "-", "4", ")", "/", "6", ")", "\n", "k", "=", "widen_factor", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "self", ".", "in_channels", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nStages", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "Wide_Basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "1", ",", "dropout", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "Wide_Basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "2", ",", "dropout", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "Wide_Basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "2", ",", "dropout", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "8", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "nStages", "[", "3", "]", ",", "num_classes", ")", "\n", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "val", "=", "1", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.wide_resnet.Wide_ResNet._wide_layer": [[58, 65], ["torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "", "", "def", "_wide_layer", "(", "self", ",", "block", ",", "out_channels", ",", "num_blocks", ",", "stride", ",", "dropout", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_channels", ",", "out_channels", ",", "stride", ",", "dropout", ")", ")", "\n", "self", ".", "in_channels", "=", "out_channels", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.wide_resnet.Wide_ResNet.forward": [[66, 73], ["wide_resnet.Wide_ResNet.conv1", "wide_resnet.Wide_ResNet.layer1", "wide_resnet.Wide_ResNet.layer2", "wide_resnet.Wide_ResNet.layer3", "wide_resnet.Wide_ResNet.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.wide_resnet.wrn28_10": [[75, 77], ["wide_resnet.Wide_ResNet"], "function", ["None"], ["", "", "def", "wrn28_10", "(", "num_classes", "=", "10", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "return", "Wide_ResNet", "(", "28", ",", "10", ",", "num_classes", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.wide_resnet.wrn28_2": [[79, 81], ["wide_resnet.Wide_ResNet"], "function", ["None"], ["", "def", "wrn28_2", "(", "num_classes", "=", "10", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "return", "Wide_ResNet", "(", "28", ",", "2", ",", "num_classes", ",", "dropout", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActBlock.__init__": [[8, 28], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "residual", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "self", ".", "expansion", "*", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_channels", "!=", "self", ".", "expansion", "*", "out_channels", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "self", ".", "expansion", "*", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActBlock.forward": [[29, 33], ["preresnet.PreActBlock.blocks", "preresnet.PreActBlock.residual", "preresnet.PreActBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "blocks", "(", "x", ")", "\n", "out", "=", "self", ".", "residual", "(", "out", ")", "+", "self", ".", "shortcut", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActBottleneck.__init__": [[39, 62], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "residual", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "self", ".", "expansion", "*", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_channels", "!=", "self", ".", "expansion", "*", "out_channels", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "self", ".", "expansion", "*", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActBottleneck.forward": [[63, 67], ["preresnet.PreActBottleneck.blocks", "preresnet.PreActBottleneck.residual", "preresnet.PreActBottleneck.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "blocks", "(", "x", ")", "\n", "out", "=", "self", ".", "residual", "(", "out", ")", "+", "self", ".", "shortcut", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActResNet.__init__": [[71, 95], ["torch.Module.__init__", "torch.Conv2d", "preresnet.PreActResNet._make_layer", "preresnet.PreActResNet._make_layer", "preresnet.PreActResNet._make_layer", "preresnet.PreActResNet._make_layer", "torch.Sequential", "preresnet.PreActResNet.modules", "torch.BatchNorm2d", "torch.ReLU", "torch.AvgPool2d", "torch.Flatten", "torch.Dropout", "torch.Linear", "isinstance", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.zeros_", "isinstance", "torch.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "PreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "init_channels", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "1", ",", "dropout", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "2", ",", "dropout", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "2", ",", "dropout", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "2", ",", "dropout", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "512", "*", "block", ".", "expansion", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "4", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "val", "=", "1", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActResNet._make_layer": [[96, 103], ["torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "out_channels", ",", "num_blocks", ",", "stride", ",", "dropout", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "init_channels", ",", "out_channels", ",", "stride", ",", "dropout", ")", ")", "\n", "self", ".", "init_channels", "=", "out_channels", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.PreActResNet.forward": [[104, 112], ["preresnet.PreActResNet.conv1", "preresnet.PreActResNet.layer1", "preresnet.PreActResNet.layer2", "preresnet.PreActResNet.layer3", "preresnet.PreActResNet.layer4", "preresnet.PreActResNet.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.preactresnet18": [[114, 116], ["preresnet.PreActResNet"], "function", ["None"], ["", "", "def", "preactresnet18", "(", "num_classes", "=", "10", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.preactresnet34": [[118, 120], ["preresnet.PreActResNet"], "function", ["None"], ["", "def", "preactresnet34", "(", "num_classes", "=", "10", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.preactresnet50": [[122, 124], ["preresnet.PreActResNet"], "function", ["None"], ["", "def", "preactresnet50", "(", "num_classes", "=", "10", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.preactresnet101": [[126, 128], ["preresnet.PreActResNet"], "function", ["None"], ["", "def", "preactresnet101", "(", "num_classes", "=", "10", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hiyouga_AMP-Regularizer.models.preresnet.preactresnet152": [[130, 132], ["preresnet.PreActResNet"], "function", ["None"], ["", "def", "preactresnet152", "(", "num_classes", "=", "10", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", ",", "dropout", ")", "\n", "", ""]]}