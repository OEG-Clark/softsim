{"home.repos.pwc.inspect_result.paroj_pose_calib.None.render.BoardPreview.__init__": [[30, 39], ["cv2.flip", "cv2.cvtColor", "numpy.ones"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "img", ")", ":", "\n", "# generate styled board image", "\n", "        ", "self", ".", "img", "=", "img", "\n", "self", ".", "img", "=", "cv2", ".", "flip", "(", "self", ".", "img", ",", "0", ")", "# flipped when printing", "\n", "self", ".", "img", "[", "self", ".", "img", "==", "0", "]", "=", "64", "# set black to gray", "\n", "self", ".", "img", "=", "cv2", ".", "cvtColor", "(", "self", ".", "img", ",", "cv2", ".", "COLOR_GRAY2BGR", ")", "\n", "self", ".", "img", "[", ":", ",", ":", ",", "0", ":", ":", "2", "]", "=", "0", "# set red and blue to zero", "\n", "\n", "self", ".", "shadow", "=", "np", ".", "ones", "(", "self", ".", "img", ".", "shape", "[", ":", "2", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "# used for overlap score", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.render.BoardPreview.create_maps": [[40, 51], ["numpy.diag", "numpy.diag.dot", "distvis.make_distort_map", "numpy.array", "cv2.getOptimalNewCameraMatrix"], "methods", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.distvis.make_distort_map"], ["", "def", "create_maps", "(", "self", ",", "K", ",", "cdist", ",", "sz", ")", ":", "\n", "        ", "if", "cdist", "is", "None", ":", "\n", "            ", "cdist", "=", "np", ".", "array", "(", "[", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ")", "\n", "\n", "", "self", ".", "sz", "=", "sz", "\n", "scale", "=", "np", ".", "diag", "(", "(", "self", ".", "SIZE", "[", "0", "]", "/", "sz", "[", "0", "]", ",", "self", ".", "SIZE", "[", "1", "]", "/", "sz", "[", "1", "]", ",", "1", ")", ")", "\n", "K", "=", "scale", ".", "dot", "(", "K", ")", "\n", "\n", "sz", "=", "self", ".", "SIZE", "\n", "self", ".", "Knew", "=", "cv2", ".", "getOptimalNewCameraMatrix", "(", "K", ",", "cdist", ",", "sz", ",", "1", ")", "[", "0", "]", "\n", "self", ".", "maps", "=", "make_distort_map", "(", "K", ",", "sz", ",", "cdist", ",", "self", ".", "Knew", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.render.BoardPreview.project": [[52, 57], ["render.project_img", "cv2.remap", "cv2.resize"], "methods", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.render.project_img"], ["", "def", "project", "(", "self", ",", "r", ",", "t", ",", "shadow", "=", "False", ",", "inter", "=", "cv2", ".", "INTER_NEAREST", ")", ":", "\n", "        ", "img", "=", "project_img", "(", "self", ".", "shadow", "if", "shadow", "else", "self", ".", "img", ",", "self", ".", "SIZE", ",", "self", ".", "Knew", ",", "r", ",", "t", ")", "\n", "img", "=", "cv2", ".", "remap", "(", "img", ",", "self", ".", "maps", "[", "0", "]", ",", "self", ".", "maps", "[", "1", "]", ",", "inter", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "self", ".", "sz", ",", "interpolation", "=", "inter", ")", "\n", "return", "img", "", "", "", ""]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.render.project_img": [[14, 26], ["K.dot", "cv2.warpPerspective", "cv2.Rodrigues", "numpy.array"], "function", ["None"], ["def", "project_img", "(", "img", ",", "sz", ",", "K", ",", "rvec", ",", "t", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", ":", "\n", "    ", "\"\"\"\n    projects a 2D object (image) according to parameters\n    @param img: image to project\n    @param sz: size of the final image  \n    \"\"\"", "\n", "# construct homography", "\n", "R", "=", "cv2", ".", "Rodrigues", "(", "rvec", ")", "[", "0", "]", "\n", "H", "=", "K", ".", "dot", "(", "np", ".", "array", "(", "[", "R", "[", ":", ",", "0", "]", ",", "R", "[", ":", ",", "1", "]", ",", "t", "]", ")", ".", "T", ")", "\n", "H", "/=", "H", "[", "2", ",", "2", "]", "\n", "\n", "return", "cv2", ".", "warpPerspective", "(", "img", ",", "H", ",", "sz", ",", "flags", "=", "flags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.__init__": [[31, 69], ["numpy.prod", "tracker.board.getSquareLength", "int", "numpy.zeros", "render.BoardPreview", "utils.Calibrator", "float", "numpy.zeros", "posegen.PoseGeneratorDist", "ui.UserGuidance.set_next_pose", "ui.UserGuidance.tracker.board.draw", "numpy.array", "tuple"], "methods", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.set_next_pose", "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.draw"], ["def", "__init__", "(", "self", ",", "tracker", ",", "var_terminate", "=", "0.1", ")", ":", "\n", "# get geometry from tracker", "\n", "        ", "self", ".", "tracker", "=", "tracker", "\n", "self", ".", "allpts", "=", "np", ".", "prod", "(", "tracker", ".", "board_sz", "-", "1", ")", "\n", "self", ".", "square_len", "=", "tracker", ".", "board", ".", "getSquareLength", "(", ")", "\n", "self", ".", "SQUARE_LEN_PIX", "=", "int", "(", "self", ".", "square_len", ")", "\n", "\n", "self", ".", "img_size", "=", "tracker", ".", "img_size", "\n", "\n", "self", ".", "overlap", "=", "np", ".", "zeros", "(", "(", "self", ".", "img_size", "[", "1", "]", ",", "self", ".", "img_size", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# preview image", "\n", "self", ".", "board", "=", "BoardPreview", "(", "self", ".", "tracker", ".", "board", ".", "draw", "(", "tuple", "(", "tracker", ".", "board_sz", "*", "self", ".", "SQUARE_LEN_PIX", ")", ")", ")", "\n", "\n", "self", ".", "calib", "=", "Calibrator", "(", "tracker", ".", "img_size", ")", "\n", "self", ".", "min_reperr_init", "=", "float", "(", "\"inf\"", ")", "\n", "\n", "# desired pose of board for first frame", "\n", "# translation defined in terms of board dimensions", "\n", "self", ".", "board_units", "=", "np", ".", "array", "(", "[", "tracker", ".", "board_sz", "[", "0", "]", ",", "tracker", ".", "board_sz", "[", "1", "]", ",", "tracker", ".", "board_sz", "[", "0", "]", "]", ")", "*", "self", ".", "square_len", "\n", "self", ".", "board_warped", "=", "None", "\n", "\n", "self", ".", "var_terminate", "=", "var_terminate", "\n", "self", ".", "pconverged", "=", "np", ".", "zeros", "(", "self", ".", "calib", ".", "nintr", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "self", ".", "converged", "=", "False", "\n", "self", ".", "tgt_param", "=", "None", "\n", "\n", "# actual user guidance", "\n", "self", ".", "pose_reached", "=", "False", "\n", "self", ".", "capture", "=", "False", "\n", "self", ".", "still", "=", "False", "\n", "self", ".", "user_info_text", "=", "\"\"", "\n", "\n", "self", ".", "posegen", "=", "PoseGeneratorDist", "(", "self", ".", "img_size", ")", "\n", "\n", "# set first pose", "\n", "self", ".", "set_next_pose", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.calibrate": [[70, 120], ["ui.UserGuidance.calib.calibrate().copy", "ui.UserGuidance.argmax", "len", "numpy.diag", "len", "numpy.diag", "numpy.sum", "numpy.sum", "ui.UserGuidance.calib.calibrate", "print", "print", "numpy.sqrt", "numpy.sqrt", "print", "converged.append"], "methods", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.Calibrator.calibrate"], ["", "def", "calibrate", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "calib", ".", "keyframes", ")", "<", "2", ":", "\n", "# need at least 2 keyframes", "\n", "            ", "return", "\n", "\n", "", "pvar_prev", "=", "np", ".", "diag", "(", "self", ".", "calib", ".", "PCov", ")", "[", ":", "self", ".", "calib", ".", "nintr", "]", "\n", "first", "=", "len", "(", "self", ".", "calib", ".", "keyframes", ")", "==", "2", "\n", "\n", "index_of_dispersion", "=", "self", ".", "calib", ".", "calibrate", "(", ")", ".", "copy", "(", ")", "\n", "\n", "pvar", "=", "np", ".", "diag", "(", "self", ".", "calib", ".", "PCov", ")", "[", ":", "self", ".", "calib", ".", "nintr", "]", "\n", "\n", "if", "not", "first", ":", "\n", "            ", "total_var_prev", "=", "np", ".", "sum", "(", "pvar_prev", ")", "\n", "total_var", "=", "np", ".", "sum", "(", "pvar", ")", "\n", "\n", "if", "total_var", ">", "total_var_prev", ":", "\n", "# del self.calib.keyframes[-1]", "\n", "                ", "print", "(", "\"note: total var degraded\"", ")", "\n", "# return", "\n", "\n", "# check for convergence", "\n", "", "rel_pstd", "=", "1", "-", "np", ".", "sqrt", "(", "pvar", ")", "/", "np", ".", "sqrt", "(", "pvar_prev", ")", "\n", "# np.set_printoptions(linewidth=800)", "\n", "# print(np.abs(np.sqrt(var) / vals))", "\n", "# print(rel_pstd[self.tgt_param])", "\n", "#assert rel_pstd[self.tgt_param] >= 0, self.INTRINSICS[self.tgt_param] + \" degraded\"", "\n", "if", "rel_pstd", "[", "self", ".", "tgt_param", "]", "<", "0", ":", "\n", "                ", "print", "(", "self", ".", "INTRINSICS", "[", "self", ".", "tgt_param", "]", "+", "\" degraded\"", ")", "\n", "", "for", "g", "in", "self", ".", "PARAM_GROUPS", ":", "\n", "                ", "if", "self", ".", "tgt_param", "not", "in", "g", ":", "\n", "                    ", "continue", "\n", "\n", "", "converged", "=", "[", "]", "\n", "\n", "for", "p", "in", "g", ":", "\n", "# if index_of_dispersion[p] < 0.05:", "\n", "                    ", "if", "rel_pstd", "[", "p", "]", ">", "0", "and", "rel_pstd", "[", "p", "]", "<", "self", ".", "var_terminate", ":", "\n", "                        ", "if", "not", "self", ".", "pconverged", "[", "p", "]", ":", "\n", "                            ", "converged", ".", "append", "(", "self", ".", "INTRINSICS", "[", "p", "]", ")", "\n", "self", ".", "pconverged", "[", "p", "]", "=", "True", "\n", "\n", "", "", "", "if", "converged", ":", "\n", "                    ", "print", "(", "\"{} converged\"", ".", "format", "(", "converged", ")", ")", "\n", "\n", "# print(self.calib.get_intrinsics())", "\n", "# print(index_of_dispersion)", "\n", "", "", "", "index_of_dispersion", "[", "self", ".", "pconverged", "]", "=", "0", "\n", "\n", "self", ".", "tgt_param", "=", "index_of_dispersion", ".", "argmax", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.set_next_pose": [[128, 139], ["len", "ui.UserGuidance.posegen.get_pose", "ui.UserGuidance.board.create_maps", "ui.UserGuidance.board.project"], "methods", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.posegen.PoseGeneratorDist.get_pose", "home.repos.pwc.inspect_result.paroj_pose_calib.None.render.BoardPreview.create_maps", "home.repos.pwc.inspect_result.paroj_pose_calib.None.render.BoardPreview.project"], ["", "def", "set_next_pose", "(", "self", ")", ":", "\n", "        ", "nk", "=", "len", "(", "self", ".", "calib", ".", "keyframes", ")", "\n", "\n", "self", ".", "tgt_r", ",", "self", ".", "tgt_t", "=", "self", ".", "posegen", ".", "get_pose", "(", "self", ".", "board_units", ",", "\n", "nk", ",", "\n", "self", ".", "tgt_param", ",", "\n", "self", ".", "calib", ".", "K", ",", "\n", "self", ".", "calib", ".", "cdist", ")", "\n", "\n", "self", ".", "board", ".", "create_maps", "(", "self", ".", "calib", ".", "K", ",", "self", ".", "calib", ".", "cdist", ",", "self", ".", "img_size", ")", "\n", "self", ".", "board_warped", "=", "self", ".", "board", ".", "project", "(", "self", ".", "tgt_r", ",", "self", ".", "tgt_t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.pose_close_to_tgt": [[140, 163], ["numpy.sum", "ui.UserGuidance.board.project", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.render.BoardPreview.project"], ["", "def", "pose_close_to_tgt", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "tracker", ".", "pose_valid", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "self", ".", "tgt_r", "is", "None", ":", "\n", "            ", "return", "False", "\n", "\n", "", "self", ".", "overlap", "[", ":", ",", ":", "]", "=", "self", ".", "board_warped", "[", ":", ",", ":", ",", "1", "]", "!=", "0", "\n", "\n", "Aa", "=", "np", ".", "sum", "(", "self", ".", "overlap", ")", "\n", "\n", "tmp", "=", "self", ".", "board", ".", "project", "(", "self", ".", "tracker", ".", "rvec", ",", "\n", "self", ".", "tracker", ".", "tvec", ",", "\n", "shadow", "=", "True", ")", "\n", "Ab", "=", "np", ".", "sum", "(", "tmp", ")", "\n", "# debug_jaccard(self.overlap, tmp)", "\n", "self", ".", "overlap", "*=", "tmp", "[", ":", ",", ":", "]", "\n", "Aab", "=", "np", ".", "sum", "(", "self", ".", "overlap", ")", "\n", "\n", "# circumvents instability during initialization and large variance in depth later on", "\n", "jaccard", "=", "Aab", "/", "(", "Aa", "+", "Ab", "-", "Aab", ")", "\n", "\n", "return", "jaccard", ">", "0.85", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.update": [[164, 220], ["ui.UserGuidance.pose_close_to_tgt", "ui.UserGuidance.calib.keyframes.append", "ui.UserGuidance.calibrate", "ui.UserGuidance.tracker.set_intrinsics", "ui.UserGuidance.pconverged.all", "ui.UserGuidance._update_user_info", "ui.UserGuidance.calib.calibrate", "len", "ui.UserGuidance.tracker.get_calib_pts", "ui.UserGuidance.set_next_pose", "ui.UserGuidance.set_next_pose", "ui.UserGuidance.tracker.set_intrinsics", "ui.UserGuidance.tracker.get_calib_pts", "numpy.isnan().any", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.pose_close_to_tgt", "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.Calibrator.calibrate", "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.ChArucoDetector.set_intrinsics", "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance._update_user_info", "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.Calibrator.calibrate", "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.ChArucoDetector.get_calib_pts", "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.set_next_pose", "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.set_next_pose", "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.ChArucoDetector.set_intrinsics", "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.ChArucoDetector.get_calib_pts"], ["", "def", "update", "(", "self", ",", "force", "=", "False", ",", "dry_run", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        @return True if a new pose was captured\n        \"\"\"", "\n", "if", "not", "self", ".", "calib", ".", "keyframes", "and", "self", ".", "tracker", ".", "N_pts", ">=", "self", ".", "allpts", "//", "2", ":", "\n", "# try to estimate intrinsic params from single frame", "\n", "            ", "self", ".", "calib", ".", "calibrate", "(", "[", "self", ".", "tracker", ".", "get_calib_pts", "(", ")", "]", ")", "\n", "\n", "if", "not", "np", ".", "isnan", "(", "self", ".", "calib", ".", "K", ")", ".", "any", "(", ")", "and", "self", ".", "calib", ".", "reperr", "<", "self", ".", "min_reperr_init", ":", "\n", "                ", "self", ".", "set_next_pose", "(", ")", "# update target pose", "\n", "self", ".", "tracker", ".", "set_intrinsics", "(", "self", ".", "calib", ")", "\n", "self", ".", "min_reperr_init", "=", "self", ".", "calib", ".", "reperr", "\n", "\n", "", "", "self", ".", "pose_reached", "=", "force", "and", "self", ".", "tracker", ".", "N_pts", ">", "4", "\n", "\n", "if", "self", ".", "pose_close_to_tgt", "(", ")", ":", "\n", "            ", "self", ".", "pose_reached", "=", "True", "\n", "\n", "# we need at least 57.5 points after 2 frames", "\n", "# and 15 points per frame from then", "\n", "", "n_required", "=", "(", "(", "self", ".", "calib", ".", "nintr", "+", "2", "*", "6", ")", "*", "5", "+", "3", ")", "//", "(", "2", "*", "2", ")", "# integer ceil", "\n", "\n", "if", "len", "(", "self", ".", "calib", ".", "keyframes", ")", ">=", "2", ":", "\n", "            ", "n_required", "=", "6", "//", "2", "*", "5", "\n", "\n", "", "self", ".", "still", "=", "self", ".", "tracker", ".", "mean_flow", "is", "not", "None", "and", "self", ".", "tracker", ".", "mean_flow", "<", "2", "\n", "# use all points instead to ensure we have a stable pose", "\n", "self", ".", "pose_reached", "*=", "self", ".", "tracker", ".", "N_pts", ">=", "n_required", "\n", "\n", "self", ".", "capture", "=", "self", ".", "pose_reached", "and", "(", "self", ".", "still", "or", "force", ")", "\n", "\n", "if", "not", "self", ".", "capture", ":", "\n", "            ", "return", "False", "\n", "\n", "", "self", ".", "calib", ".", "keyframes", ".", "append", "(", "self", ".", "tracker", ".", "get_calib_pts", "(", ")", ")", "\n", "\n", "# update calibration with all keyframe", "\n", "self", ".", "calibrate", "(", ")", "\n", "\n", "# use the updated calibration results for tracking", "\n", "self", ".", "tracker", ".", "set_intrinsics", "(", "self", ".", "calib", ")", "\n", "\n", "self", ".", "converged", "=", "self", ".", "pconverged", ".", "all", "(", ")", "\n", "\n", "if", "dry_run", ":", "\n", "# drop last frame again", "\n", "            ", "del", "self", ".", "caib", ".", "keyframes", "[", "-", "1", "]", "\n", "\n", "", "if", "self", ".", "converged", ":", "\n", "            ", "self", ".", "tgt_r", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "set_next_pose", "(", ")", "\n", "\n", "", "self", ".", "_update_user_info", "(", ")", "\n", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance._update_user_info": [[221, 245], ["len", "ui.UserGuidance.calib.pose_var[].argmin", "ui.UserGuidance.calib.pose_var[].argmin"], "methods", ["None"], ["", "def", "_update_user_info", "(", "self", ")", ":", "\n", "        ", "self", ".", "user_info_text", "=", "\"\"", "\n", "\n", "if", "len", "(", "self", ".", "calib", ".", "keyframes", ")", "<", "2", ":", "\n", "            ", "self", ".", "user_info_text", "=", "\"initialization\"", "\n", "", "elif", "not", "self", ".", "converged", ":", "\n", "            ", "action", "=", "None", "\n", "axis", "=", "None", "\n", "if", "self", ".", "tgt_param", "<", "2", ":", "\n", "                ", "action", "=", "\"rotate\"", "\n", "# do not consider r_z as it does not add any information", "\n", "axis", "=", "self", ".", "calib", ".", "pose_var", "[", ":", "2", "]", ".", "argmin", "(", ")", "\n", "", "else", ":", "\n", "                ", "action", "=", "\"translate\"", "\n", "# do not consider t_z", "\n", "axis", "=", "self", ".", "calib", ".", "pose_var", "[", "3", ":", "6", "]", ".", "argmin", "(", ")", "+", "3", "\n", "\n", "", "param", "=", "self", ".", "INTRINSICS", "[", "self", ".", "tgt_param", "]", "\n", "self", ".", "user_info_text", "=", "\"{} '{}' to minimize '{}'\"", ".", "format", "(", "action", ",", "self", ".", "POSE", "[", "axis", "]", ",", "param", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "user_info_text", "=", "\"converged at MSE: {}\"", ".", "format", "(", "self", ".", "calib", ".", "reperr", ")", "\n", "\n", "", "if", "self", ".", "pose_reached", "and", "not", "self", ".", "still", ":", "\n", "            ", "self", ".", "user_info_text", "+=", "\"\\nhold camera steady\"", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.draw": [[246, 255], ["ui.UserGuidance.tracker.draw_axis", "cv2.flip"], "methods", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.ChArucoDetector.draw_axis"], ["", "", "def", "draw", "(", "self", ",", "img", ",", "mirror", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "tgt_r", "is", "not", "None", ":", "\n", "            ", "img", "[", "self", ".", "board_warped", "!=", "0", "]", "=", "self", ".", "board_warped", "[", "self", ".", "board_warped", "!=", "0", "]", "\n", "\n", "", "if", "self", ".", "tracker", ".", "pose_valid", ":", "\n", "            ", "self", ".", "tracker", ".", "draw_axis", "(", "img", ")", "\n", "\n", "", "if", "mirror", ":", "\n", "            ", "cv2", ".", "flip", "(", "img", ",", "1", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.seed": [[256, 260], ["ui.UserGuidance.tracker.detect", "ui.UserGuidance.update"], "methods", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.ChArucoDetector.detect", "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.update"], ["", "", "def", "seed", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "for", "img", "in", "imgs", ":", "\n", "            ", "self", ".", "tracker", ".", "detect", "(", "img", ")", "\n", "self", ".", "update", "(", "force", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.write": [[261, 284], ["cv2.FileStorage", "cv2.FileStorage.write", "cv2.FileStorage.write", "cv2.FileStorage.write", "cv2.FileStorage.write", "cv2.FileStorage.write", "cv2.FileStorage.write", "cv2.FileStorage.write", "cv2.FileStorage.writeComment", "cv2.FileStorage.write", "cv2.FileStorage.write", "cv2.FileStorage.write", "cv2.FileStorage.write", "cv2.FileStorage.write", "cv2.FileStorage.release", "datetime.datetime.now().strftime", "len", "datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.write", "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.write", "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.write", "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.write", "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.write", "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.write", "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.write", "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.write", "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.write", "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.write", "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.write", "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.write"], ["", "", "def", "write", "(", "self", ",", "outfile", ")", ":", "\n", "        ", "flags", "=", "[", "(", "cv2", ".", "CALIB_FIX_PRINCIPAL_POINT", ",", "\"+fix_principal_point\"", ")", ",", "\n", "(", "cv2", ".", "CALIB_ZERO_TANGENT_DIST", ",", "\"+zero_tangent_dist\"", ")", ",", "\n", "(", "cv2", ".", "CALIB_USE_LU", ",", "\"+use_lu\"", ")", "]", "\n", "\n", "fs", "=", "cv2", ".", "FileStorage", "(", "outfile", ",", "cv2", ".", "FILE_STORAGE_WRITE", ")", "\n", "fs", ".", "write", "(", "\"calibration_time\"", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%c\"", ")", ")", "\n", "fs", ".", "write", "(", "\"nr_of_frames\"", ",", "len", "(", "self", ".", "calib", ".", "keyframes", ")", ")", "\n", "fs", ".", "write", "(", "\"image_width\"", ",", "self", ".", "calib", ".", "img_size", "[", "0", "]", ")", "\n", "fs", ".", "write", "(", "\"image_height\"", ",", "self", ".", "calib", ".", "img_size", "[", "1", "]", ")", "\n", "fs", ".", "write", "(", "\"board_width\"", ",", "self", ".", "tracker", ".", "board_sz", "[", "0", "]", ")", "\n", "fs", ".", "write", "(", "\"board_height\"", ",", "self", ".", "tracker", ".", "board_sz", "[", "1", "]", ")", "\n", "fs", ".", "write", "(", "\"square_size\"", ",", "self", ".", "square_len", ")", "\n", "\n", "flags_str", "=", "\" \"", ".", "join", "(", "[", "s", "for", "f", ",", "s", "in", "flags", "if", "self", ".", "calib", ".", "flags", "&", "f", "]", ")", "\n", "fs", ".", "writeComment", "(", "\"flags: \"", "+", "flags_str", ")", "\n", "\n", "fs", ".", "write", "(", "\"flags\"", ",", "self", ".", "calib", ".", "flags", ")", "\n", "fs", ".", "write", "(", "\"fisheye_model\"", ",", "0", ")", "\n", "fs", ".", "write", "(", "\"camera_matrix\"", ",", "self", ".", "calib", ".", "K", ")", "\n", "fs", ".", "write", "(", "\"distortion_coefficients\"", ",", "self", ".", "calib", ".", "cdist", ")", "\n", "fs", ".", "write", "(", "\"avg_reprojection_error\"", ",", "self", ".", "calib", ".", "reperr", ")", "\n", "fs", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.debug_jaccard": [[18, 21], ["cv2.imshow", "img.copy"], "function", ["None"], ["def", "debug_jaccard", "(", "img", ",", "tmp", ")", ":", "\n", "    ", "dbg", "=", "img", ".", "copy", "(", ")", "+", "tmp", "*", "2", "\n", "cv2", ".", "imshow", "(", "\"jaccard\"", ",", "dbg", "*", "127", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.distvis.get_bounds": [[14, 32], ["cv2.findContours", "numpy.argmax", "cv2.boundingRect", "len", "cv2.countNonZero"], "function", ["None"], ["def", "get_bounds", "(", "thresh", ",", "mask", ")", ":", "\n", "    ", "MAX_OVERLAP", "=", "0.9", "\n", "contours", "=", "cv2", ".", "findContours", "(", "thresh", ",", "cv2", ".", "RETR_EXTERNAL", ",", "cv2", ".", "CHAIN_APPROX_SIMPLE", ")", "[", "1", "]", "\n", "\n", "# look for the largest object that is not masked", "\n", "while", "contours", ":", "\n", "        ", "mx", "=", "np", ".", "argmax", "(", "[", "len", "(", "c", ")", "for", "c", "in", "contours", "]", ")", "\n", "contour", "=", "contours", "[", "mx", "]", "\n", "aabb", "=", "cv2", ".", "boundingRect", "(", "contour", ")", "\n", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "aabb", "\n", "if", "mask", "is", "not", "None", "and", "(", "cv2", ".", "countNonZero", "(", "mask", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", ")", "/", "(", "w", "*", "h", ")", ">", "MAX_OVERLAP", ")", ":", "\n", "            ", "del", "contours", "[", "mx", "]", "# remove from candidates", "\n", "continue", "\n", "\n", "", "return", "(", "aabb", ",", "contour", ")", "\n", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.distvis.make_distort_map": [[33, 43], ["numpy.array().T.reshape", "cv2.undistortPoints", "np.array().T.reshape.astype", "cv2.undistortPoints.reshape", "numpy.array", "numpy.meshgrid", "range", "range"], "function", ["None"], ["", "def", "make_distort_map", "(", "K", ",", "sz", ",", "dist", ",", "Knew", ")", ":", "\n", "    ", "\"\"\"\n    creates a map for distorting an image as a opposed to the default\n    behaviour of undistorting\n    @param sz: width, height\n    \"\"\"", "\n", "pts", "=", "np", ".", "array", "(", "np", ".", "meshgrid", "(", "range", "(", "sz", "[", "0", "]", ")", ",", "range", "(", "sz", "[", "1", "]", ")", ")", ")", ".", "T", ".", "reshape", "(", "-", "1", ",", "1", ",", "2", ")", "\n", "dpts", "=", "cv2", ".", "undistortPoints", "(", "pts", ".", "astype", "(", "np", ".", "float32", ")", ",", "K", ",", "dist", ",", "P", "=", "Knew", ")", "\n", "\n", "return", "dpts", ".", "reshape", "(", "sz", "[", "0", "]", ",", "sz", "[", "1", "]", ",", "2", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.distvis.sparse_undistort_map": [[44, 63], ["numpy.zeros", "numpy.array().T.reshape", "[].transpose", "cv2.undistortPoints", "cv2.convertPointsToHomogeneous().reshape", "[].transpose.reshape().reshape", "np.array().T.reshape.reshape", "np.array().T.reshape.astype", "cv2.projectPoints", "numpy.array", "cv2.convertPointsToHomogeneous", "[].transpose.reshape", "numpy.meshgrid", "cv2.initUndistortRectifyMap", "range", "range"], "function", ["None"], ["", "def", "sparse_undistort_map", "(", "K", ",", "sz", ",", "dist", ",", "Knew", ",", "step", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    same output as initUndistortRectifyMap, but sparse\n    @param sz: width, height\n    @return: distorted points, original points\n    \"\"\"", "\n", "zero", "=", "np", ".", "zeros", "(", "3", ")", "\n", "pts", "=", "np", ".", "array", "(", "np", ".", "meshgrid", "(", "range", "(", "0", ",", "sz", "[", "0", "]", ",", "step", ")", ",", "range", "(", "0", ",", "sz", "[", "1", "]", ",", "step", ")", ")", ")", ".", "T", ".", "reshape", "(", "-", "1", ",", "1", ",", "2", ")", "\n", "\n", "if", "step", "==", "1", ":", "\n", "        ", "dpts", "=", "cv2", ".", "initUndistortRectifyMap", "(", "K", ",", "dist", ",", "None", ",", "Knew", ",", "sz", ",", "cv2", ".", "CV_32FC2", ")", "[", "0", "]", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "pts3d", "=", "cv2", ".", "undistortPoints", "(", "pts", ".", "astype", "(", "np", ".", "float32", ")", ",", "Knew", ",", "None", ")", "\n", "pts3d", "=", "cv2", ".", "convertPointsToHomogeneous", "(", "pts3d", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "dpts", "=", "cv2", ".", "projectPoints", "(", "pts3d", ",", "zero", ",", "zero", ",", "K", ",", "dist", ")", "[", "0", "]", "\n", "\n", "", "shape", "=", "(", "sz", "[", "0", "]", "//", "step", ",", "sz", "[", "1", "]", "//", "step", ",", "2", ")", "\n", "\n", "return", "dpts", ".", "reshape", "(", "-", "1", ",", "2", ")", ".", "reshape", "(", "shape", ")", ",", "pts", ".", "reshape", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.distvis.get_diff_heatmap": [[64, 76], ["numpy.norm().reshape", "cv2.normalize", "cv2.applyColorMap", "cv2.applyColorMap.max", "numpy.norm"], "function", ["None"], ["", "def", "get_diff_heatmap", "(", "img1", ",", "img2", ",", "colormap", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    creates a heatmap from two point images\n    \"\"\"", "\n", "sz", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "l2diff", "=", "la", ".", "norm", "(", "(", "img1", "-", "img2", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", ",", "axis", "=", "1", ")", ".", "reshape", "(", "sz", ")", ".", "T", "\n", "\n", "if", "colormap", ":", "\n", "        ", "l2diff", "=", "cv2", ".", "normalize", "(", "l2diff", ",", "None", ",", "0", ",", "255", ",", "cv2", ".", "NORM_MINMAX", ",", "dtype", "=", "cv2", ".", "CV_8U", ")", "\n", "l2diff", "=", "cv2", ".", "applyColorMap", "(", "l2diff", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "\n", "", "return", "l2diff", ",", "l2diff", ".", "max", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.distvis.loc_from_dist": [[77, 113], ["numpy.norm", "cv2.normalize", "cv2.normalize.reshape", "distvis.get_bounds", "numpy.array", "cv2.threshold", "cv2.threshold"], "function", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.distvis.get_bounds"], ["", "def", "loc_from_dist", "(", "pts", ",", "dpts", ",", "mask", "=", "None", ",", "lower", "=", "False", ",", "thres", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n    compute location based on distortion strength\n    @param pts: sampling locations\n    @param dpts: distorted points\n    @param mask: mask for ignoring locations\n    @param lower: find location with minimal distortion instead\n    @param thres: distortion strength to use as threshold [%]\n    \"\"\"", "\n", "diff", "=", "la", ".", "norm", "(", "(", "pts", "-", "dpts", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", ",", "axis", "=", "1", ")", "\n", "diff", "=", "diff", ".", "reshape", "(", "pts", ".", "shape", "[", "0", ":", "2", "]", ")", ".", "T", "\n", "diff", "=", "cv2", ".", "normalize", "(", "diff", ",", "None", ",", "0", ",", "255", ",", "cv2", ".", "NORM_MINMAX", ",", "dtype", "=", "cv2", ".", "CV_8U", ")", "\n", "\n", "bounds", "=", "None", "\n", "\n", "while", "not", "bounds", "and", "thres", ">=", "0", "and", "thres", "<=", "1", ":", "\n", "        ", "if", "lower", ":", "\n", "            ", "thres", "+=", "0.05", "\n", "thres_img", "=", "cv2", ".", "threshold", "(", "diff", ",", "thres", "*", "255", ",", "255", ",", "cv2", ".", "THRESH_BINARY_INV", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "thres", "-=", "0.05", "\n", "thres_img", "=", "cv2", ".", "threshold", "(", "diff", ",", "thres", "*", "255", ",", "255", ",", "cv2", ".", "THRESH_BINARY", ")", "[", "1", "]", "\n", "\n", "", "bounds", "=", "get_bounds", "(", "thres_img", ",", "mask", ")", "\n", "\n", "if", "bounds", "is", "None", ":", "\n", "            ", "continue", "\n", "\n", "# ensure area is not 0", "\n", "", "if", "bounds", "[", "0", "]", "[", "2", "]", "*", "bounds", "[", "0", "]", "[", "3", "]", "==", "0", ":", "\n", "            ", "bounds", "=", "None", "\n", "\n", "", "", "if", "bounds", "is", "None", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n", "", "return", "np", ".", "array", "(", "bounds", "[", "0", "]", ")", ",", "thres_img", "\n", "", ""]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.posegen.PoseGeneratorDist.__init__": [[137, 154], ["posegen.gen_bin", "posegen.gen_bin", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.posegen.gen_bin", "home.repos.pwc.inspect_result.paroj_pose_calib.None.posegen.gen_bin"], ["def", "__init__", "(", "self", ",", "img_size", ")", ":", "\n", "        ", "self", ".", "img_size", "=", "img_size", "\n", "\n", "self", ".", "stats", "=", "[", "1", ",", "1", "]", "# number of (intrinsic, distortion) poses", "\n", "\n", "self", ".", "orbitalZ", "=", "1.6", "\n", "rz", "=", "np", ".", "pi", "/", "8", "\n", "\n", "# valid poses:", "\n", "# r_x, r_y -> -70\u00b0 .. 70\u00b0", "\n", "self", ".", "orbital", "=", "(", "\n", "gen_bin", "(", "np", ".", "array", "(", "[", "-", "(", "70", "/", "180", ")", "*", "np", ".", "pi", ",", "0", ",", "self", ".", "orbitalZ", ",", "rz", "]", ")", ",", "np", ".", "array", "(", "[", "(", "70", "/", "180", ")", "*", "np", ".", "pi", ",", "0", ",", "self", ".", "orbitalZ", ",", "rz", "]", ")", ")", ",", "\n", "gen_bin", "(", "np", ".", "array", "(", "[", "0", ",", "-", "(", "70", "/", "180", ")", "*", "np", ".", "pi", ",", "self", ".", "orbitalZ", ",", "rz", "]", ")", ",", "np", ".", "array", "(", "[", "0", ",", "(", "70", "/", "180", ")", "*", "np", ".", "pi", ",", "self", ".", "orbitalZ", ",", "rz", "]", ")", ")", "\n", ")", "\n", "\n", "self", ".", "mask", "=", "np", ".", "zeros", "(", "np", ".", "array", "(", "img_size", ")", "//", "self", ".", "SUBSAMPLE", ",", "dtype", "=", "np", ".", "uint8", ")", ".", "T", "\n", "self", ".", "sgn", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.posegen.PoseGeneratorDist.compute_distortion": [[155, 157], ["distvis.sparse_undistort_map"], "methods", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.distvis.sparse_undistort_map"], ["", "def", "compute_distortion", "(", "self", ",", "K", ",", "cdist", ",", "subsample", "=", "1", ")", ":", "\n", "        ", "return", "sparse_undistort_map", "(", "K", ",", "self", ".", "img_size", ",", "cdist", ",", "K", ",", "subsample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.posegen.PoseGeneratorDist.get_pose": [[158, 203], ["posegen.PoseGeneratorDist.compute_distortion", "posegen.pose_from_bounds", "numpy.ceil().astype", "numpy.ceil().astype", "posegen.oribital_pose", "posegen.pose_planar_fullscreen", "posegen.oribital_pose", "distvis.loc_from_dist", "print", "posegen.PoseGeneratorDist.get_pose", "K[].copy", "posegen.unproject", "numpy.ceil", "numpy.ceil", "next", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.posegen.PoseGeneratorDist.compute_distortion", "home.repos.pwc.inspect_result.paroj_pose_calib.None.posegen.pose_from_bounds", "home.repos.pwc.inspect_result.paroj_pose_calib.None.posegen.oribital_pose", "home.repos.pwc.inspect_result.paroj_pose_calib.None.posegen.pose_planar_fullscreen", "home.repos.pwc.inspect_result.paroj_pose_calib.None.posegen.oribital_pose", "home.repos.pwc.inspect_result.paroj_pose_calib.None.distvis.loc_from_dist", "home.repos.pwc.inspect_result.paroj_pose_calib.None.posegen.PoseGeneratorDist.get_pose", "home.repos.pwc.inspect_result.paroj_pose_calib.None.posegen.unproject"], ["", "def", "get_pose", "(", "self", ",", "bbox", ",", "nk", ",", "tgt_param", ",", "K", ",", "cdist", ")", ":", "\n", "        ", "\"\"\"\n        @param bbox: bounding box of the calibration pattern\n        @param nk: number of keyframes captured so far\n        @param tgt_param: parameter that should be optimized by the pose\n        @param K, cdist: current calibration estimate\n        \"\"\"", "\n", "if", "nk", "==", "0", ":", "\n", "# init sequence: first keyframe 45\u00b0 tilted to camera", "\n", "            ", "return", "oribital_pose", "(", "bbox", ",", "0", ",", "np", ".", "pi", "/", "4", ",", "self", ".", "orbitalZ", ",", "np", ".", "pi", "/", "8", ")", "\n", "", "if", "nk", "==", "1", ":", "\n", "# init sequence: second keyframe", "\n", "            ", "return", "pose_planar_fullscreen", "(", "K", ",", "cdist", ",", "self", ".", "img_size", ",", "bbox", ")", "\n", "", "if", "tgt_param", "<", "4", ":", "\n", "# orbital pose is used for focal length", "\n", "            ", "axis", "=", "(", "tgt_param", "+", "1", ")", "%", "2", "# f_y -> r_x", "\n", "\n", "self", ".", "stats", "[", "0", "]", "+=", "1", "\n", "r", ",", "t", "=", "oribital_pose", "(", "bbox", ",", "*", "next", "(", "self", ".", "orbital", "[", "axis", "]", ")", ")", "\n", "\n", "if", "tgt_param", ">", "1", ":", "\n", "                ", "off", "=", "K", "[", ":", "2", ",", "2", "]", ".", "copy", "(", ")", "\n", "off", "[", "tgt_param", "-", "2", "]", "+=", "self", ".", "img_size", "[", "tgt_param", "-", "2", "]", "*", "0.05", "*", "self", ".", "sgn", "\n", "off3d", "=", "unproject", "(", "off", ",", "K", ",", "cdist", ",", "t", "[", "2", "]", ")", "\n", "off3d", "[", "2", "]", "=", "0", "\n", "t", "+=", "off3d", "\n", "self", ".", "sgn", "*=", "-", "1", "\n", "\n", "", "return", "r", ",", "t", "\n", "\n", "", "dpts", ",", "pts", "=", "self", ".", "compute_distortion", "(", "K", ",", "cdist", ",", "self", ".", "SUBSAMPLE", ")", "\n", "\n", "bounds", "=", "loc_from_dist", "(", "pts", ",", "dpts", ",", "mask", "=", "self", ".", "mask", ")", "[", "0", "]", "\n", "\n", "if", "bounds", "is", "None", ":", "\n", "# FIXME: anything else?", "\n", "            ", "print", "(", "\"loc_from_dist failed. return orbital pose instead of crashing\"", ")", "\n", "return", "self", ".", "get_pose", "(", "bbox", ",", "nk", ",", "3", ",", "axis", ",", "K", ",", "cdist", ")", "\n", "\n", "", "self", ".", "stats", "[", "1", "]", "+=", "1", "\n", "r", ",", "t", ",", "nbounds", "=", "pose_from_bounds", "(", "bbox", ",", "bounds", "*", "self", ".", "SUBSAMPLE", ",", "K", ",", "cdist", ",", "self", ".", "img_size", ")", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "np", ".", "ceil", "(", "np", ".", "array", "(", "nbounds", ")", "/", "self", ".", "SUBSAMPLE", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "mask", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "=", "1", "\n", "\n", "return", "r", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.posegen.gen_bin": [[16, 29], ["lst.pop", "lst.append", "lst.append"], "function", ["None"], ["def", "gen_bin", "(", "s", ",", "e", ")", ":", "\n", "    ", "\"\"\"\n    generate values in range by binary subdivision\n    \"\"\"", "\n", "t", "=", "(", "s", "+", "e", ")", "/", "2", "\n", "lst", "=", "[", "(", "s", ",", "t", ")", ",", "(", "t", ",", "e", ")", "]", "\n", "\n", "while", "lst", ":", "\n", "        ", "s", ",", "e", "=", "lst", ".", "pop", "(", "0", ")", "\n", "t", "=", "(", "s", "+", "e", ")", "/", "2", "\n", "lst", ".", "append", "(", "(", "s", ",", "t", ")", ")", "\n", "lst", ".", "append", "(", "(", "t", ",", "e", ")", ")", "\n", "yield", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.posegen.unproject": [[30, 36], ["cv2.undistortPoints().ravel", "numpy.array", "cv2.undistortPoints", "cv2.undistortPoints().ravel.reshape"], "function", ["None"], ["", "", "def", "unproject", "(", "p", ",", "K", ",", "cdist", ",", "Z", ")", ":", "\n", "    ", "\"\"\"\n    project pixel back to a 3D coordinate at depth Z\n    \"\"\"", "\n", "p", "=", "cv2", ".", "undistortPoints", "(", "p", ".", "reshape", "(", "-", "1", ",", "1", ",", "2", ")", ",", "K", ",", "cdist", ")", ".", "ravel", "(", ")", "\n", "return", "np", ".", "array", "(", "[", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "1", "]", ")", "*", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.posegen.oribital_pose": [[37, 64], ["numpy.eye", "Ry.dot().dot", "numpy.eye", "R[].dot", "numpy.eye", "numpy.inv().dot().dot().dot", "cv2.Rodrigues", "cv2.Rodrigues", "cv2.Rodrigues", "[].ravel", "numpy.array", "numpy.array", "numpy.array", "Ry.dot", "numpy.inv().dot().dot", "numpy.inv().dot", "cv2.Rodrigues", "numpy.inv"], "function", ["None"], ["", "def", "oribital_pose", "(", "bbox", ",", "rx", ",", "ry", ",", "Z", ",", "rz", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    @param bbox: object bounding box. note: assumes planar object with virtual Z dimension. \n    @param rx: rotation around x axis in rad\n    @param ry: rotation around y axis in rad\n    @param Z: distance to camera in board lengths\n    @return: rvec, tvec \n    \"\"\"", "\n", "Rz", "=", "cv2", ".", "Rodrigues", "(", "np", ".", "array", "(", "[", "0.", ",", "0.", ",", "rz", "]", ")", ")", "[", "0", "]", "\n", "Rx", "=", "cv2", ".", "Rodrigues", "(", "np", ".", "array", "(", "[", "np", ".", "pi", "+", "rx", ",", "0.", ",", "0.", "]", ")", ")", "[", "0", "]", "# flip by 180\u00b0 so Z is up", "\n", "Ry", "=", "cv2", ".", "Rodrigues", "(", "np", ".", "array", "(", "[", "0.", ",", "ry", ",", "0.", "]", ")", ")", "[", "0", "]", "\n", "\n", "R", "=", "np", ".", "eye", "(", "4", ")", "\n", "R", "[", ":", "3", ",", ":", "3", "]", "=", "(", "Ry", ")", ".", "dot", "(", "Rx", ")", ".", "dot", "(", "Rz", ")", "\n", "\n", "# translate board to its center", "\n", "Tc", "=", "np", ".", "eye", "(", "4", ")", "\n", "Tc", "[", "3", ",", ":", "3", "]", "=", "R", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "bbox", "*", "[", "-", "0.5", ",", "-", "0.5", ",", "0", "]", ")", "\n", "\n", "# translate board to center of image", "\n", "T", "=", "np", ".", "eye", "(", "4", ")", "\n", "T", "[", "3", ",", ":", "3", "]", "=", "bbox", "*", "[", "-", "0.5", ",", "-", "0.5", ",", "Z", "]", "\n", "\n", "# rotate center of board", "\n", "Rf", "=", "la", ".", "inv", "(", "Tc", ")", ".", "dot", "(", "R", ")", ".", "dot", "(", "Tc", ")", ".", "dot", "(", "T", ")", "\n", "\n", "return", "cv2", ".", "Rodrigues", "(", "Rf", "[", ":", "3", ",", ":", "3", "]", ")", "[", "0", "]", ".", "ravel", "(", ")", ",", "Rf", "[", "3", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.posegen.pose_planar_fullscreen": [[65, 75], ["K.dot", "numpy.array", "numpy.array", "posegen.unproject"], "function", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.posegen.unproject"], ["", "def", "pose_planar_fullscreen", "(", "K", ",", "cdist", ",", "img_size", ",", "bbox", ")", ":", "\n", "    ", "KB", "=", "K", ".", "dot", "(", "[", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ",", "0", "]", ")", "# ignore principal point", "\n", "Z", "=", "(", "KB", "[", "0", ":", "2", "]", "/", "img_size", ")", ".", "min", "(", ")", "\n", "pB", "=", "KB", "/", "Z", "\n", "\n", "r", "=", "np", ".", "array", "(", "[", "np", ".", "pi", ",", "0", ",", "0", "]", ")", "# flip image", "\n", "# move board to center, org = bl", "\n", "p", "=", "np", ".", "array", "(", "[", "img_size", "[", "0", "]", "/", "2", "-", "pB", "[", "0", "]", "/", "2", ",", "img_size", "[", "1", "]", "/", "2", "+", "pB", "[", "1", "]", "/", "2", "]", ")", "\n", "t", "=", "unproject", "(", "p", ",", "K", ",", "cdist", ",", "Z", ")", "\n", "return", "r", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.posegen.pose_from_bounds": [[76, 130], ["numpy.array", "tgt_rect[].clip", "posegen.unproject", "src_ext.copy.copy", "R.dot.dot", "[].ravel", "numpy.array", "cv2.Rodrigues", "cv2.Rodrigues", "numpy.array", "cv2.Rodrigues"], "function", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.posegen.unproject"], ["", "def", "pose_from_bounds", "(", "src_ext", ",", "tgt_rect", ",", "K", ",", "cdist", ",", "img_sz", ")", ":", "\n", "    ", "rot90", "=", "tgt_rect", "[", "3", "]", ">", "tgt_rect", "[", "2", "]", "\n", "\n", "MIN_WIDTH", "=", "img_sz", "[", "0", "]", "//", "3.333", "\n", "\n", "if", "rot90", ":", "\n", "        ", "src_ext", "=", "src_ext", ".", "copy", "(", ")", "\n", "src_ext", "[", "0", "]", ",", "src_ext", "[", "1", "]", "=", "src_ext", "[", "1", "]", ",", "src_ext", "[", "0", "]", "\n", "\n", "if", "tgt_rect", "[", "3", "]", "<", "MIN_WIDTH", ":", "\n", "            ", "scale", "=", "MIN_WIDTH", "/", "tgt_rect", "[", "2", "]", "\n", "tgt_rect", "[", "3", "]", "=", "MIN_WIDTH", "\n", "tgt_rect", "[", "2", "]", "*=", "scale", "\n", "", "", "else", ":", "\n", "        ", "if", "tgt_rect", "[", "2", "]", "<", "MIN_WIDTH", ":", "\n", "            ", "scale", "=", "MIN_WIDTH", "/", "tgt_rect", "[", "2", "]", "\n", "tgt_rect", "[", "2", "]", "=", "MIN_WIDTH", "\n", "tgt_rect", "[", "3", "]", "*=", "scale", "\n", "\n", "", "", "aspect", "=", "src_ext", "[", "0", "]", "/", "src_ext", "[", "1", "]", "\n", "\n", "# match aspect ratio of tgt to src, but keep tl", "\n", "if", "not", "rot90", ":", "\n", "# adapt height", "\n", "        ", "tgt_rect", "[", "3", "]", "=", "tgt_rect", "[", "2", "]", "/", "aspect", "\n", "", "else", ":", "\n", "# adapt width", "\n", "        ", "tgt_rect", "[", "2", "]", "=", "tgt_rect", "[", "3", "]", "*", "aspect", "\n", "\n", "", "r", "=", "np", ".", "array", "(", "[", "np", ".", "pi", ",", "0", ",", "0", "]", ")", "\n", "\n", "# org is bl", "\n", "if", "rot90", ":", "\n", "        ", "R", "=", "cv2", ".", "Rodrigues", "(", "r", ")", "[", "0", "]", "\n", "Rz", "=", "cv2", ".", "Rodrigues", "(", "np", ".", "array", "(", "[", "0.", ",", "0.", ",", "-", "np", ".", "pi", "/", "2", "]", ")", ")", "[", "0", "]", "\n", "R", "=", "R", ".", "dot", "(", "Rz", ")", "\n", "r", "=", "cv2", ".", "Rodrigues", "(", "R", ")", "[", "0", "]", ".", "ravel", "(", ")", "\n", "# org is tl", "\n", "\n", "", "Z", "=", "(", "K", "[", "0", ",", "0", "]", "*", "src_ext", "[", "0", "]", ")", "/", "tgt_rect", "[", "2", "]", "\n", "\n", "# clip to image region", "\n", "max_off", "=", "img_sz", "-", "tgt_rect", "[", "2", ":", "4", "]", "\n", "tgt_rect", "[", "0", ":", "2", "]", "=", "tgt_rect", "[", "0", ":", "2", "]", ".", "clip", "(", "[", "0", ",", "0", "]", ",", "max_off", ")", "\n", "\n", "if", "not", "rot90", ":", "\n", "        ", "tgt_rect", "[", "1", "]", "+=", "tgt_rect", "[", "3", "]", "\n", "\n", "", "t", "=", "unproject", "(", "np", ".", "array", "(", "[", "tgt_rect", "[", "0", "]", ",", "tgt_rect", "[", "1", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "K", ",", "cdist", ",", "Z", ")", "\n", "\n", "if", "not", "rot90", ":", "\n", "        ", "tgt_rect", "[", "1", "]", "-=", "tgt_rect", "[", "3", "]", "\n", "\n", "", "return", "r", ",", "t", ",", "tgt_rect", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.ChArucoDetector.__init__": [[18, 41], ["numpy.array", "numpy.array", "cfg.getNode().real", "cv2.aruco.Dictionary_get", "cfg.getNode().real", "cv2.aruco.CharucoBoard_create", "int", "int", "int", "int", "cfg.getNode().real", "int", "int", "cfg.getNode", "cfg.getNode().real", "cfg.getNode", "cfg.getNode().real", "cfg.getNode().real", "cfg.getNode().real", "cfg.getNode().real", "cfg.getNode", "cfg.getNode", "cfg.getNode", "cfg.getNode", "cfg.getNode", "cfg.getNode"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "# configuration", "\n", "        ", "self", ".", "board_sz", "=", "np", ".", "array", "(", "[", "int", "(", "cfg", ".", "getNode", "(", "\"board_x\"", ")", ".", "real", "(", ")", ")", ",", "int", "(", "cfg", ".", "getNode", "(", "\"board_y\"", ")", ".", "real", "(", ")", ")", "]", ")", "\n", "self", ".", "square_len", "=", "cfg", ".", "getNode", "(", "\"square_len\"", ")", ".", "real", "(", ")", "\n", "self", ".", "ardict", "=", "Dictionary_get", "(", "int", "(", "cfg", ".", "getNode", "(", "\"dictionary\"", ")", ".", "real", "(", ")", ")", ")", "\n", "\n", "marker_len", "=", "cfg", ".", "getNode", "(", "\"marker_len\"", ")", ".", "real", "(", ")", "\n", "self", ".", "board", "=", "CharucoBoard_create", "(", "self", ".", "board_sz", "[", "0", "]", ",", "self", ".", "board_sz", "[", "1", "]", ",", "self", ".", "square_len", ",", "marker_len", ",", "self", ".", "ardict", ")", "\n", "self", ".", "img_size", "=", "(", "int", "(", "cfg", ".", "getNode", "(", "\"image_width\"", ")", ".", "real", "(", ")", ")", ",", "int", "(", "cfg", ".", "getNode", "(", "\"image_height\"", ")", ".", "real", "(", ")", ")", ")", "\n", "\n", "# per frame data", "\n", "self", ".", "N_pts", "=", "0", "\n", "self", ".", "pose_valid", "=", "False", "\n", "self", ".", "raw_img", "=", "None", "\n", "self", ".", "pt_min_markers", "=", "int", "(", "cfg", ".", "getNode", "(", "\"pt_min_markers\"", ")", ".", "real", "(", ")", ")", "\n", "\n", "self", ".", "intrinsic_valid", "=", "False", "\n", "\n", "# optical flow calculation", "\n", "self", ".", "last_ccorners", "=", "None", "\n", "self", ".", "last_cids", "=", "None", "\n", "# mean flow if same corners are detected in consecutive frames", "\n", "self", ".", "mean_flow", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.ChArucoDetector.set_intrinsics": [[42, 46], ["None"], "methods", ["None"], ["", "def", "set_intrinsics", "(", "self", ",", "calib", ")", ":", "\n", "        ", "self", ".", "intrinsic_valid", "=", "True", "\n", "self", ".", "K", "=", "calib", ".", "K", "\n", "self", ".", "cdist", "=", "calib", ".", "cdist", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.ChArucoDetector.draw_axis": [[47, 49], ["cv2.aruco.drawAxis"], "methods", ["None"], ["", "def", "draw_axis", "(", "self", ",", "img", ")", ":", "\n", "        ", "drawAxis", "(", "img", ",", "self", ".", "K", ",", "self", ".", "cdist", ",", "self", ".", "rvec", ",", "self", ".", "tvec", ",", "self", ".", "square_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.ChArucoDetector.detect_pts": [[50, 76], ["cv2.aruco.detectMarkers", "cv2.aruco.interpolateCornersCharuco", "numpy.mean", "numpy.mean", "utils.ChArucoDetector.ccorners.reshape", "numpy.array_equal", "numpy.array_equal", "utils.ChArucoDetector.ccorners.reshape", "utils.ChArucoDetector.ccorners.reshape", "numpy.norm", "numpy.norm"], "methods", ["None"], ["", "def", "detect_pts", "(", "self", ",", "img", ")", ":", "\n", "        ", "self", ".", "corners", ",", "ids", ",", "self", ".", "rejected", "=", "detectMarkers", "(", "img", ",", "self", ".", "ardict", ")", "\n", "\n", "self", ".", "N_pts", "=", "0", "\n", "self", ".", "mean_flow", "=", "None", "\n", "\n", "if", "ids", "is", "None", "or", "ids", ".", "size", "==", "0", ":", "\n", "            ", "self", ".", "last_ccorners", "=", "None", "\n", "self", ".", "last_cids", "=", "None", "\n", "return", "\n", "\n", "", "res", "=", "interpolateCornersCharuco", "(", "self", ".", "corners", ",", "ids", ",", "img", ",", "self", ".", "board", ",", "minMarkers", "=", "self", ".", "pt_min_markers", ")", "\n", "self", ".", "N_pts", ",", "self", ".", "ccorners", ",", "self", ".", "cids", "=", "res", "\n", "\n", "if", "self", ".", "N_pts", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "if", "not", "np", ".", "array_equal", "(", "self", ".", "last_cids", ",", "self", ".", "cids", ")", ":", "\n", "            ", "self", ".", "last_ccorners", "=", "self", ".", "ccorners", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "self", ".", "last_cids", "=", "self", ".", "cids", "\n", "return", "\n", "\n", "", "diff", "=", "self", ".", "last_ccorners", "-", "self", ".", "ccorners", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "self", ".", "mean_flow", "=", "np", ".", "mean", "(", "la", ".", "norm", "(", "diff", ",", "axis", "=", "1", ")", ")", "\n", "self", ".", "last_ccorners", "=", "self", ".", "ccorners", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "self", ".", "last_cids", "=", "self", ".", "cids", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.ChArucoDetector.detect": [[77, 84], ["img.copy", "utils.ChArucoDetector.detect_pts", "utils.ChArucoDetector.update_pose"], "methods", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.ChArucoDetector.detect_pts", "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.ChArucoDetector.update_pose"], ["", "def", "detect", "(", "self", ",", "img", ")", ":", "\n", "        ", "self", ".", "raw_img", "=", "img", ".", "copy", "(", ")", "\n", "\n", "self", ".", "detect_pts", "(", "img", ")", "\n", "\n", "if", "self", ".", "intrinsic_valid", ":", "\n", "            ", "self", ".", "update_pose", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.ChArucoDetector.get_pts3d": [[85, 87], ["utils.ChArucoDetector.board.chessboardCorners[].reshape"], "methods", ["None"], ["", "", "def", "get_pts3d", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "board", ".", "chessboardCorners", "[", "self", ".", "cids", "]", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.ChArucoDetector.get_calib_pts": [[88, 90], ["utils.ChArucoDetector.ccorners.copy", "utils.ChArucoDetector.get_pts3d"], "methods", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.ChArucoDetector.get_pts3d"], ["", "def", "get_calib_pts", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "ccorners", ".", "copy", "(", ")", ",", "self", ".", "get_pts3d", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.ChArucoDetector.update_pose": [[91, 104], ["cv2.aruco.estimatePoseCharucoBoard", "rvec.ravel", "tvec.ravel"], "methods", ["None"], ["", "def", "update_pose", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "N_pts", "<", "4", ":", "\n", "            ", "self", ".", "pose_valid", "=", "False", "\n", "return", "\n", "\n", "", "ret", "=", "estimatePoseCharucoBoard", "(", "self", ".", "ccorners", ",", "self", ".", "cids", ",", "self", ".", "board", ",", "self", ".", "K", ",", "self", ".", "cdist", ")", "\n", "self", ".", "pose_valid", ",", "rvec", ",", "tvec", "=", "ret", "\n", "\n", "if", "not", "self", ".", "pose_valid", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "rvec", "=", "rvec", ".", "ravel", "(", ")", "\n", "self", ".", "tvec", "=", "tvec", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.Calibrator.__init__": [[109, 131], ["cv2.getDefaultNewCameraMatrix", "utils.Calibrator.Kin.copy", "float", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.diag", "numpy.diag"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "img_size", ")", ":", "\n", "        ", "self", ".", "img_size", "=", "img_size", "\n", "\n", "self", ".", "nintr", "=", "9", "\n", "self", ".", "unknowns", "=", "None", "# number of unknowns in our equation system", "\n", "\n", "# initial K matrix", "\n", "# with aspect ratio of 1 and pp at center. Focal length is empirical.", "\n", "self", ".", "Kin", "=", "cv2", ".", "getDefaultNewCameraMatrix", "(", "np", ".", "diag", "(", "[", "1000", ",", "1000", ",", "1", "]", ")", ",", "img_size", ",", "True", ")", "\n", "self", ".", "K", "=", "self", ".", "Kin", ".", "copy", "(", ")", "\n", "\n", "self", ".", "cdist", "=", "None", "\n", "\n", "self", ".", "flags", "=", "cv2", ".", "CALIB_USE_LU", "\n", "\n", "# calibration data", "\n", "self", ".", "keyframes", "=", "[", "]", "\n", "self", ".", "reperr", "=", "float", "(", "\"NaN\"", ")", "\n", "self", ".", "PCov", "=", "np", ".", "zeros", "(", "(", "self", ".", "nintr", ",", "self", ".", "nintr", ")", ")", "# parameter covariance", "\n", "self", ".", "pose_var", "=", "np", ".", "zeros", "(", "6", ")", "\n", "\n", "self", ".", "disp_idx", "=", "None", "# index of dispersion", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.Calibrator.get_intrinsics": [[132, 135], ["list", "utils.Calibrator.cdist.ravel"], "methods", ["None"], ["", "def", "get_intrinsics", "(", "self", ")", ":", "\n", "        ", "K", "=", "self", ".", "K", "\n", "return", "[", "K", "[", "0", ",", "0", "]", ",", "K", "[", "1", ",", "1", "]", ",", "K", "[", "0", ",", "2", "]", ",", "K", "[", "1", ",", "2", "]", "]", "+", "list", "(", "self", ".", "cdist", ".", "ravel", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.Calibrator.calibrate": [[136, 173], ["len", "time.process_time", "utils.calibrateCamera", "utils.compute_pose_var", "numpy.diag", "numpy.diag", "utils.mean_extr_var", "utils.index_of_dispersion", "time.process_time", "utils.Calibrator.get_intrinsics", "numpy.diag", "numpy.diag"], "methods", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.calibrateCamera", "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.compute_pose_var", "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.mean_extr_var", "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.index_of_dispersion", "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.Calibrator.get_intrinsics"], ["", "def", "calibrate", "(", "self", ",", "keyframes", "=", "None", ")", ":", "\n", "        ", "flags", "=", "self", ".", "flags", "\n", "\n", "if", "not", "keyframes", ":", "\n", "            ", "keyframes", "=", "self", ".", "keyframes", "\n", "\n", "", "assert", "(", "keyframes", ")", "\n", "\n", "nkeyframes", "=", "len", "(", "keyframes", ")", "\n", "\n", "if", "nkeyframes", "<=", "1", ":", "\n", "# restrict first calibration to K matrix parameters", "\n", "            ", "flags", "|=", "cv2", ".", "CALIB_FIX_ASPECT_RATIO", "\n", "\n", "", "if", "nkeyframes", "<=", "1", ":", "\n", "# with only one frame we just estimate the focal length", "\n", "            ", "flags", "|=", "cv2", ".", "CALIB_FIX_PRINCIPAL_POINT", "\n", "\n", "flags", "|=", "cv2", ".", "CALIB_ZERO_TANGENT_DIST", "\n", "flags", "|=", "cv2", ".", "CALIB_FIX_K1", "|", "cv2", ".", "CALIB_FIX_K2", "|", "cv2", ".", "CALIB_FIX_K3", "\n", "\n", "", "t", "=", "time", ".", "process_time", "(", ")", "\n", "\n", "res", "=", "calibrateCamera", "(", "keyframes", ",", "self", ".", "img_size", ",", "flags", ",", "self", ".", "Kin", ")", "\n", "\n", "self", ".", "reperr", ",", "self", ".", "K", ",", "self", ".", "cdist", ",", "rvecs", ",", "tvecs", ",", "self", ".", "PCov", ",", "self", ".", "N_pts", "=", "res", "\n", "\n", "self", ".", "calib_t", "=", "time", ".", "process_time", "(", ")", "-", "t", "\n", "\n", "self", ".", "pose_var", "=", "compute_pose_var", "(", "rvecs", ",", "tvecs", ")", "\n", "self", ".", "unknowns", "=", "self", ".", "nintr", "+", "6", "*", "nkeyframes", "\n", "\n", "pvar", "=", "np", ".", "diag", "(", "self", ".", "PCov", ")", "\n", "self", ".", "mean_extr_var", "=", "mean_extr_var", "(", "pvar", "[", "self", ".", "nintr", ":", "]", ")", "\n", "\n", "self", ".", "disp_idx", "=", "index_of_dispersion", "(", "self", ".", "get_intrinsics", "(", ")", ",", "np", ".", "diag", "(", "self", ".", "PCov", ")", "[", ":", "self", ".", "nintr", "]", ")", "\n", "return", "self", ".", "disp_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.index_of_dispersion": [[174, 180], ["abs", "abs"], "function", ["None"], ["", "", "def", "index_of_dispersion", "(", "mean", ",", "var", ")", ":", "\n", "    ", "\"\"\"\n    computes index of dispersion:\n    https://en.wikipedia.org/wiki/Index_of_dispersion\n    \"\"\"", "\n", "return", "var", "/", "[", "abs", "(", "v", ")", "if", "abs", "(", "v", ")", ">", "0", "else", "1.", "for", "v", "in", "mean", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.mean_extr_var": [[181, 194], ["var[].copy", "range", "len", "len"], "function", ["None"], ["", "def", "mean_extr_var", "(", "var", ")", ":", "\n", "    ", "\"\"\"\n    computes the mean of the extrinsic variances\n    @param var: variance vector excluding the intrinsic parameters\n    \"\"\"", "\n", "assert", "(", "len", "(", "var", ")", "%", "6", "==", "0", ")", "\n", "nframes", "=", "len", "(", "var", ")", "//", "6", "\n", "my_var", "=", "var", "[", ":", "6", "]", ".", "copy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "nframes", "-", "1", ")", ":", "\n", "        ", "my_var", "+=", "var", "[", "6", "*", "i", ":", "6", "*", "(", "i", "+", "1", ")", "]", "\n", "\n", "", "return", "my_var", "/", "nframes", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.estimate_pt_std": [[195, 201], ["numpy.sqrt"], "function", ["None"], ["", "def", "estimate_pt_std", "(", "res", ",", "d", ",", "n", ")", ":", "\n", "    ", "\"\"\"\n    estimate the accuracy of point measurements given the reprojection error\n    @param res: the reprojection error \n    \"\"\"", "\n", "return", "res", "/", "np", ".", "sqrt", "(", "1", "-", "d", "/", "(", "2", "*", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.Jc2J": [[202, 221], ["numpy.sum", "numpy.zeros", "enumerate", "len"], "function", ["None"], ["", "def", "Jc2J", "(", "Jc", ",", "N_pts", ",", "nintr", "=", "9", ")", ":", "\n", "    ", "\"\"\"\n    decompose a compact 'single view' jacobian into a sparse 'multi view' jacobian\n    @param Jc: compact single view jacobian \n    @param N_pts: number of points per view\n    @param nintr: number of intrinsic parameters\n    \"\"\"", "\n", "total", "=", "np", ".", "sum", "(", "N_pts", ")", "\n", "\n", "J", "=", "np", ".", "zeros", "(", "(", "total", "*", "2", ",", "nintr", "+", "6", "*", "len", "(", "N_pts", ")", ")", ")", "\n", "J", "[", ":", ",", ":", "nintr", "]", "=", "Jc", "[", ":", ",", "6", ":", "]", "\n", "\n", "i", "=", "0", "\n", "\n", "for", "j", ",", "n", "in", "enumerate", "(", "N_pts", ")", ":", "\n", "        ", "J", "[", "2", "*", "i", ":", "2", "*", "i", "+", "2", "*", "n", ",", "nintr", "+", "6", "*", "j", ":", "nintr", "+", "6", "*", "(", "j", "+", "1", ")", "]", "=", "Jc", "[", "2", "*", "i", ":", "2", "*", "i", "+", "2", "*", "n", ",", ":", "6", "]", "\n", "i", "+=", "n", "\n", "\n", "", "return", "J", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.compute_pose_var": [[222, 232], ["numpy.empty", "numpy.array", "numpy.var", "numpy.var().ravel", "numpy.var", "cv2.RQDecomp3x3", "numpy.array", "cv2.Rodrigues"], "function", ["None"], ["", "def", "compute_pose_var", "(", "rvecs", ",", "tvecs", ")", ":", "\n", "    ", "ret", "=", "np", ".", "empty", "(", "6", ")", "\n", "reuler", "=", "np", ".", "array", "(", "[", "cv2", ".", "RQDecomp3x3", "(", "cv2", ".", "Rodrigues", "(", "r", ")", "[", "0", "]", ")", "[", "0", "]", "for", "r", "in", "rvecs", "]", ")", "\n", "\n", "# workaround for the given board so r_x does not oscilate between +-180\u00b0", "\n", "reuler", "[", ":", ",", "0", "]", "=", "reuler", "[", ":", ",", "0", "]", "%", "360", "\n", "\n", "ret", "[", "0", ":", "3", "]", "=", "np", ".", "var", "(", "reuler", ",", "axis", "=", "0", ")", "\n", "ret", "[", "3", ":", "6", "]", "=", "np", ".", "var", "(", "np", ".", "array", "(", "tvecs", ")", "/", "10", ",", "axis", "=", "0", ")", ".", "ravel", "(", ")", "# [mm]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.compute_state_cov": [[233, 257], ["range", "numpy.array", "utils.Jc2J", "Jc2J.T.dot", "numpy.inv", "len", "len", "P_cam.extend", "cv2.projectPoints", "numpy.zeros_like", "cv2.Rodrigues", "numpy.array", "R.dot", "tvecs[].ravel"], "function", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.Jc2J"], ["", "def", "compute_state_cov", "(", "pts3d", ",", "rvecs", ",", "tvecs", ",", "K", ",", "cdist", ",", "flags", ")", ":", "\n", "    ", "\"\"\"\n    state covariance from current intrinsic and extrinsic estimate\n    \"\"\"", "\n", "P_cam", "=", "[", "]", "\n", "N_pts", "=", "[", "len", "(", "pts", ")", "for", "pts", "in", "pts3d", "]", "\n", "\n", "# convert to camera coordinate system", "\n", "for", "i", "in", "range", "(", "len", "(", "pts3d", ")", ")", ":", "\n", "        ", "R", "=", "cv2", ".", "Rodrigues", "(", "rvecs", "[", "i", "]", ")", "[", "0", "]", "\n", "P_cam", ".", "extend", "(", "[", "R", ".", "dot", "(", "P", ")", "+", "tvecs", "[", "i", "]", ".", "ravel", "(", ")", "for", "P", "in", "pts3d", "[", "i", "]", "]", ")", "\n", "\n", "", "zero", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# get jacobian", "\n", "Jc", "=", "cv2", ".", "projectPoints", "(", "np", ".", "array", "(", "P_cam", ")", ",", "zero", ",", "zero", ",", "K", ",", "cdist", ")", "[", "1", "]", "\n", "J", "=", "Jc2J", "(", "Jc", ",", "N_pts", ")", "\n", "JtJ", "=", "J", ".", "T", ".", "dot", "(", "J", ")", "\n", "\n", "if", "flags", "&", "(", "cv2", ".", "CALIB_FIX_K1", "|", "cv2", ".", "CALIB_FIX_K2", "|", "cv2", ".", "CALIB_FIX_K3", ")", ":", "\n", "# TODO: remove the according fixed rows so we can invert this ", "\n", "        ", "return", "np", ".", "zeros_like", "(", "JtJ", ")", "\n", "\n", "", "return", "la", ".", "inv", "(", "JtJ", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.calibrateCamera": [[258, 274], ["cv2.calibrateCamera", "utils.compute_state_cov", "pts2d.append", "pts3d.append", "len", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.calibrateCamera", "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.compute_state_cov"], ["", "def", "calibrateCamera", "(", "keyframes", ",", "img_size", ",", "flags", ",", "K", ")", ":", "\n", "    ", "pts2d", "=", "[", "]", "\n", "pts3d", "=", "[", "]", "\n", "N", "=", "0", "\n", "\n", "for", "p2d", ",", "p3d", "in", "keyframes", ":", "\n", "        ", "pts2d", ".", "append", "(", "p2d", ")", "\n", "pts3d", ".", "append", "(", "p3d", ")", "\n", "N", "+=", "len", "(", "p2d", ")", "\n", "\n", "", "res", "=", "cv2", ".", "calibrateCamera", "(", "np", ".", "array", "(", "pts3d", ")", ",", "np", ".", "array", "(", "pts2d", ")", ",", "img_size", ",", "K", ",", "None", ",", "flags", "=", "flags", ")", "\n", "\n", "reperr", ",", "K", ",", "cdist", ",", "rvecs", ",", "tvecs", "=", "res", "\n", "cov", "=", "compute_state_cov", "(", "pts3d", ",", "rvecs", ",", "tvecs", ",", "K", ",", "cdist", ",", "flags", ")", "\n", "\n", "return", "reperr", ",", "K", ",", "cdist", ",", "rvecs", ",", "tvecs", ",", "cov", ",", "N", "\n", "", ""]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.pose_calib.UVCVideoCapture.__init__": [[19, 42], ["cv2.VideoCapture", "cv2.VideoCapture.set", "cv2.VideoCapture.set", "cv2.VideoCapture.set", "cv2.VideoCapture.set", "cv2.VideoCapture.set", "cv2.VideoCapture.set", "pose_calib.UVCVideoCapture.cap.isOpened", "int", "int", "cfg.getNode().empty", "cv2.VideoWriter_fourcc", "cfg.getNode().real", "cfg.getNode().real", "cfg.getNode().string", "cfg.getNode", "cfg.getNode", "cfg.getNode", "cfg.getNode"], "methods", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.pose_calib.UVCVideoCapture.set", "home.repos.pwc.inspect_result.paroj_pose_calib.None.pose_calib.UVCVideoCapture.set", "home.repos.pwc.inspect_result.paroj_pose_calib.None.pose_calib.UVCVideoCapture.set", "home.repos.pwc.inspect_result.paroj_pose_calib.None.pose_calib.UVCVideoCapture.set", "home.repos.pwc.inspect_result.paroj_pose_calib.None.pose_calib.UVCVideoCapture.set", "home.repos.pwc.inspect_result.paroj_pose_calib.None.pose_calib.UVCVideoCapture.set"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "manual_focus", "=", "True", "\n", "self", ".", "manual_exposure", "=", "True", "\n", "\n", "imsize", "=", "(", "int", "(", "cfg", ".", "getNode", "(", "\"image_width\"", ")", ".", "real", "(", ")", ")", ",", "int", "(", "cfg", ".", "getNode", "(", "\"image_height\"", ")", ".", "real", "(", ")", ")", ")", "\n", "\n", "cam_id", "=", "0", "\n", "if", "not", "cfg", ".", "getNode", "(", "\"v4l_id\"", ")", ".", "empty", "(", ")", ":", "\n", "            ", "cam_id", "=", "\"/dev/v4l/by-id/usb-{}-video-index0\"", ".", "format", "(", "cfg", ".", "getNode", "(", "\"v4l_id\"", ")", ".", "string", "(", ")", ")", "\n", "\n", "", "cap", "=", "cv2", ".", "VideoCapture", "(", "cam_id", ")", "\n", "cap", ".", "set", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ",", "imsize", "[", "0", "]", ")", "\n", "cap", ".", "set", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ",", "imsize", "[", "1", "]", ")", "\n", "cap", ".", "set", "(", "cv2", ".", "CAP_PROP_GAIN", ",", "0.0", ")", "\n", "cap", ".", "set", "(", "cv2", ".", "CAP_PROP_AUTOFOCUS", ",", "not", "self", ".", "manual_focus", ")", "\n", "cap", ".", "set", "(", "cv2", ".", "CAP_PROP_FOURCC", ",", "cv2", ".", "VideoWriter_fourcc", "(", "*", "\"MJPG\"", ")", ")", "\n", "\n", "val", "=", "1", "/", "4", "if", "self", ".", "manual_exposure", "else", "3", "/", "4", "\n", "cap", ".", "set", "(", "cv2", ".", "CAP_PROP_AUTO_EXPOSURE", ",", "val", ")", "\n", "\n", "self", ".", "cap", "=", "cap", "\n", "\n", "assert", "self", ".", "cap", ".", "isOpened", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.pose_calib.UVCVideoCapture.set": [[43, 45], ["pose_calib.UVCVideoCapture.cap.set"], "methods", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.pose_calib.UVCVideoCapture.set"], ["", "def", "set", "(", "self", ",", "prop", ",", "val", ")", ":", "\n", "        ", "self", ".", "cap", ".", "set", "(", "prop", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.pose_calib.UVCVideoCapture.read": [[46, 48], ["pose_calib.UVCVideoCapture.cap.read"], "methods", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.pose_calib.UVCVideoCapture.read"], ["", "def", "read", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cap", ".", "read", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.pose_calib.add_camera_controls": [[49, 61], ["cv2.namedWindow", "cap.set", "cv2.createTrackbar", "cap.set", "cv2.createTrackbar", "cap.set", "cap.set"], "function", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.pose_calib.UVCVideoCapture.set", "home.repos.pwc.inspect_result.paroj_pose_calib.None.pose_calib.UVCVideoCapture.set", "home.repos.pwc.inspect_result.paroj_pose_calib.None.pose_calib.UVCVideoCapture.set", "home.repos.pwc.inspect_result.paroj_pose_calib.None.pose_calib.UVCVideoCapture.set"], ["", "", "def", "add_camera_controls", "(", "win_name", ",", "cap", ")", ":", "\n", "    ", "cv2", ".", "namedWindow", "(", "win_name", ",", "cv2", ".", "WINDOW_AUTOSIZE", "|", "cv2", ".", "WINDOW_GUI_NORMAL", ")", "\n", "\n", "if", "cap", ".", "manual_focus", ":", "\n", "        ", "focus", "=", "0", "\n", "cap", ".", "set", "(", "cv2", ".", "CAP_PROP_FOCUS", ",", "focus", "/", "100", ")", "\n", "cv2", ".", "createTrackbar", "(", "\"Focus\"", ",", "win_name", ",", "focus", ",", "100", ",", "lambda", "v", ":", "cap", ".", "set", "(", "cv2", ".", "CAP_PROP_FOCUS", ",", "v", "/", "100", ")", ")", "\n", "\n", "", "if", "cap", ".", "manual_exposure", ":", "\n", "        ", "exposure", "=", "200", "\n", "cap", ".", "set", "(", "cv2", ".", "CAP_PROP_EXPOSURE", ",", "exposure", "/", "1000", ")", "\n", "cv2", ".", "createTrackbar", "(", "\"Exposure\"", ",", "win_name", ",", "exposure", ",", "1000", ",", "lambda", "v", ":", "cap", ".", "set", "(", "cv2", ".", "CAP_PROP_EXPOSURE", ",", "v", "/", "1000", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paroj_pose_calib.None.pose_calib.main": [[62, 142], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "cv2.FileStorage", "cv2.FileStorage.isOpened", "cv2.FileStorage.getNode().empty", "utils.ChArucoDetector", "ui.UserGuidance", "print", "cv2.FileStorage.getNode().empty", "cv2.FileStorage.getNode().string", "pose_calib.UVCVideoCapture", "pose_calib.add_camera_controls", "cv2.namedWindow", "cv2.VideoCapture", "cv2.VideoCapture.isOpened", "cv2.FileStorage.getNode().real", "cv2.VideoCapture.read", "utils.ChArucoDetector.detect", "img.copy", "ui.UserGuidance.draw", "ui.UserGuidance.update", "cv2.imshow", "cv2.waitKey", "cv2.FileStorage.getNode", "ui.UserGuidance.write", "cv2.displayOverlay", "cv2.FileStorage.getNode", "cv2.FileStorage.getNode", "cv2.FileStorage.getNode().string", "cv2.FileStorage.getNode", "ord", "ord", "cv2.FileStorage.getNode"], "function", ["home.repos.pwc.inspect_result.paroj_pose_calib.None.pose_calib.add_camera_controls", "home.repos.pwc.inspect_result.paroj_pose_calib.None.pose_calib.UVCVideoCapture.read", "home.repos.pwc.inspect_result.paroj_pose_calib.None.utils.ChArucoDetector.detect", "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.draw", "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.update", "home.repos.pwc.inspect_result.paroj_pose_calib.None.ui.UserGuidance.write"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Interactive camera calibration using efficient pose selection\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-c\"", ",", "\"--config\"", ",", "help", "=", "\"path to calibration configuration (e.g. data/calib_config.yml)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-o\"", ",", "\"--outfile\"", ",", "help", "=", "\"path to calibration output (defaults to calib_<cameraId>.yml)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-m\"", ",", "\"--mirror\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"horizontally flip the camera image for display\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "config", "is", "None", ":", "\n", "        ", "print", "(", "\"falling back to \"", "+", "sys", ".", "path", "[", "0", "]", "+", "\"/data/calib_config.yml\"", ")", "\n", "args", ".", "config", "=", "sys", ".", "path", "[", "0", "]", "+", "\"/data/calib_config.yml\"", "\n", "\n", "", "cfg", "=", "cv2", ".", "FileStorage", "(", "args", ".", "config", ",", "cv2", ".", "FILE_STORAGE_READ", ")", "\n", "assert", "cfg", ".", "isOpened", "(", ")", "\n", "\n", "calib_name", "=", "\"default\"", "\n", "if", "not", "cfg", ".", "getNode", "(", "\"v4l_id\"", ")", ".", "empty", "(", ")", ":", "\n", "        ", "calib_name", "=", "cfg", ".", "getNode", "(", "\"v4l_id\"", ")", ".", "string", "(", ")", "\n", "\n", "# Video I/O", "\n", "", "live", "=", "cfg", ".", "getNode", "(", "\"images\"", ")", ".", "empty", "(", ")", "\n", "if", "live", ":", "\n", "        ", "cap", "=", "UVCVideoCapture", "(", "cfg", ")", "\n", "add_camera_controls", "(", "\"PoseCalib\"", ",", "cap", ")", "\n", "wait", "=", "1", "\n", "", "else", ":", "\n", "        ", "cv2", ".", "namedWindow", "(", "\"PoseCalib\"", ")", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "cfg", ".", "getNode", "(", "\"images\"", ")", ".", "string", "(", ")", "+", "\"frame%0d.png\"", ",", "cv2", ".", "CAP_IMAGES", ")", "\n", "wait", "=", "0", "\n", "assert", "cap", ".", "isOpened", "(", ")", "\n", "\n", "", "tracker", "=", "ChArucoDetector", "(", "cfg", ")", "\n", "\n", "\n", "# user guidance", "\n", "ugui", "=", "UserGuidance", "(", "tracker", ",", "cfg", ".", "getNode", "(", "\"terminate_var\"", ")", ".", "real", "(", ")", ")", "\n", "\n", "# runtime variables", "\n", "mirror", "=", "False", "\n", "save", "=", "False", "\n", "\n", "while", "True", ":", "\n", "        ", "force", "=", "not", "live", "# force add frame to calibration", "\n", "\n", "status", ",", "_img", "=", "cap", ".", "read", "(", ")", "\n", "if", "status", ":", "\n", "            ", "img", "=", "_img", "\n", "", "else", ":", "\n", "            ", "force", "=", "False", "\n", "\n", "", "tracker", ".", "detect", "(", "img", ")", "\n", "\n", "if", "save", ":", "\n", "            ", "save", "=", "False", "\n", "force", "=", "True", "\n", "\n", "", "out", "=", "img", ".", "copy", "(", ")", "\n", "\n", "ugui", ".", "draw", "(", "out", ",", "mirror", ")", "\n", "\n", "ugui", ".", "update", "(", "force", ")", "\n", "\n", "if", "ugui", ".", "converged", ":", "\n", "            ", "if", "args", ".", "outfile", "is", "None", ":", "\n", "                ", "outfile", "=", "\"calib_{}.yml\"", ".", "format", "(", "calib_name", ")", "\n", "", "else", ":", "\n", "                ", "outfile", "=", "args", ".", "outfile", "\n", "", "ugui", ".", "write", "(", "outfile", ")", "\n", "\n", "", "if", "ugui", ".", "user_info_text", ":", "\n", "            ", "cv2", ".", "displayOverlay", "(", "\"PoseCalib\"", ",", "ugui", ".", "user_info_text", ",", "1000", "//", "30", ")", "\n", "\n", "", "cv2", ".", "imshow", "(", "\"PoseCalib\"", ",", "out", ")", "\n", "k", "=", "cv2", ".", "waitKey", "(", "wait", ")", "\n", "\n", "if", "k", "==", "27", ":", "\n", "            ", "break", "\n", "", "elif", "k", "==", "ord", "(", "'m'", ")", ":", "\n", "            ", "mirror", "=", "not", "mirror", "\n", "", "elif", "k", "==", "ord", "(", "'c'", ")", ":", "\n", "            ", "save", "=", "True", "\n", "\n"]]}