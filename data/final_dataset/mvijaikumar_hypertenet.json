{"home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.gnn_utils.encode_onehot": [[6, 11], ["set", "numpy.array", "list", "numpy.identity", "enumerate", "map", "len"], "function", ["None"], ["def", "encode_onehot", "(", "labels", ")", ":", "\n", "    ", "classes", "=", "set", "(", "labels", ")", "\n", "classes_dict", "=", "{", "c", ":", "np", ".", "identity", "(", "len", "(", "classes", ")", ")", "[", "i", ",", ":", "]", "for", "i", ",", "c", "in", "enumerate", "(", "classes", ")", "}", "\n", "labels_onehot", "=", "np", ".", "array", "(", "list", "(", "map", "(", "classes_dict", ".", "get", ",", "labels", ")", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "return", "labels_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.gnn_utils.load_data": [[13, 57], ["print", "numpy.genfromtxt", "scipy.csr_matrix", "gnn_utils.encode_onehot", "numpy.array", "numpy.genfromtxt", "numpy.array().reshape", "scipy.coo_matrix", "gnn_utils.normalize_features", "gnn_utils.normalize_adj", "range", "range", "range", "torch.LongTensor", "torch.FloatTensor", "torch.sparse.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "normalize_adj.multiply", "normalize_adj.nonzero", "torch.Size", "numpy.array", "numpy.dtype", "enumerate", "numpy.array", "numpy.ones", "normalize_adj.T.multiply", "scipy.eye", "torch.FloatTensor.todense", "numpy.where", "list", "map", "np.genfromtxt.flatten"], "function", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.gnn_utils.encode_onehot", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.gnn_utils.normalize_features", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.gnn_utils.normalize_adj", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones"], ["", "def", "load_data", "(", "path", "=", "\"./data/cora/\"", ",", "dataset", "=", "\"cora\"", ")", ":", "\n", "    ", "\"\"\"Load citation network dataset (cora only for now)\"\"\"", "\n", "print", "(", "'Loading {} dataset...'", ".", "format", "(", "dataset", ")", ")", "\n", "\n", "idx_features_labels", "=", "np", ".", "genfromtxt", "(", "\"{}{}.content\"", ".", "format", "(", "path", ",", "dataset", ")", ",", "dtype", "=", "np", ".", "dtype", "(", "str", ")", ")", "\n", "features", "=", "sp", ".", "csr_matrix", "(", "idx_features_labels", "[", ":", ",", "1", ":", "-", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "labels", "=", "encode_onehot", "(", "idx_features_labels", "[", ":", ",", "-", "1", "]", ")", "\n", "\n", "# build graph", "\n", "idx", "=", "np", ".", "array", "(", "idx_features_labels", "[", ":", ",", "0", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "idx_map", "=", "{", "j", ":", "i", "for", "i", ",", "j", "in", "enumerate", "(", "idx", ")", "}", "\n", "edges_unordered", "=", "np", ".", "genfromtxt", "(", "\"{}{}.cites\"", ".", "format", "(", "path", ",", "dataset", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "edges", "=", "np", ".", "array", "(", "list", "(", "map", "(", "idx_map", ".", "get", ",", "edges_unordered", ".", "flatten", "(", ")", ")", ")", ",", "dtype", "=", "np", ".", "int32", ")", ".", "reshape", "(", "edges_unordered", ".", "shape", ")", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "edges", ".", "shape", "[", "0", "]", ")", ",", "(", "edges", "[", ":", ",", "0", "]", ",", "edges", "[", ":", ",", "1", "]", ")", ")", ",", "shape", "=", "(", "labels", ".", "shape", "[", "0", "]", ",", "labels", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# build symmetric adjacency matrix", "\n", "#pdb.set_trace()", "\n", "adj", "=", "adj", "+", "adj", ".", "T", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "-", "adj", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "\n", "\n", "features", "=", "normalize_features", "(", "features", ")", "\n", "adj", "=", "normalize_adj", "(", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "idx_train", "=", "range", "(", "140", ")", "\n", "idx_val", "=", "range", "(", "200", ",", "500", ")", "\n", "idx_test", "=", "range", "(", "500", ",", "1500", ")", "\n", "\n", "#adj = torch.FloatTensor(np.array(adj.todense()))", "\n", "#'''", "\n", "a", "=", "torch", ".", "LongTensor", "(", "adj", ".", "nonzero", "(", ")", ")", "\n", "b", "=", "torch", ".", "FloatTensor", "(", "adj", ".", "data", ")", "\n", "dd", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "a", ",", "b", ",", "torch", ".", "Size", "(", "[", "labels", ".", "shape", "[", "0", "]", ",", "labels", ".", "shape", "[", "0", "]", "]", ")", ")", "\n", "adj", "=", "dd", "\n", "#pdb.set_trace()", "\n", "#adj = torch.FloatTensor(torch.LongTensor(adj.nonzero()),torch.FloatTensor(adj.data),torch.Size([2708,2708]))", "\n", "#'''", "\n", "#pdb.set_trace()", "\n", "features", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "features", ".", "todense", "(", ")", ")", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "np", ".", "where", "(", "labels", ")", "[", "1", "]", ")", "\n", "\n", "idx_train", "=", "torch", ".", "LongTensor", "(", "idx_train", ")", "\n", "idx_val", "=", "torch", ".", "LongTensor", "(", "idx_val", ")", "\n", "idx_test", "=", "torch", ".", "LongTensor", "(", "idx_test", ")", "\n", "\n", "return", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.gnn_utils.normalize_adj": [[59, 66], ["numpy.array", "numpy.power().flatten", "scipy.diags", "mx.dot().transpose().dot", "mx.sum", "numpy.power", "numpy.isinf", "mx.dot().transpose", "mx.dot"], "function", ["None"], ["", "def", "normalize_adj", "(", "mx", ")", ":", "\n", "    ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "r_inv_sqrt", "[", "np", ".", "isinf", "(", "r_inv_sqrt", ")", "]", "=", "0.", "\n", "r_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "r_inv_sqrt", ")", "\n", "return", "mx", ".", "dot", "(", "r_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "r_mat_inv_sqrt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.gnn_utils.normalize_features": [[68, 76], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["", "def", "normalize_features", "(", "mx", ")", ":", "\n", "    ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.gnn_utils.accuracy": [[78, 83], ["[].type_as", "[].type_as.eq().double", "correct.sum.sum", "len", "[].type_as.eq", "output.max"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "labels", ")", ":", "\n", "    ", "preds", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", ".", "type_as", "(", "labels", ")", "\n", "correct", "=", "preds", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "return", "correct", "/", "len", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.arguments.parse_args": [[5, 71], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.arguments.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "# dataset and method", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Arguments\"", ")", "\n", "parser", ".", "add_argument", "(", "'--method'", ",", "nargs", "=", "'?'", ",", "default", "=", "'tenet'", ",", "help", "=", "'gmf,transformer,gnn,tenet'", ")", "\n", "parser", ".", "add_argument", "(", "'--path'", ",", "nargs", "=", "'?'", ",", "default", "=", "'./data/aotm/'", ",", "help", "=", "'Input data path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "nargs", "=", "'?'", ",", "default", "=", "'aotm'", ",", "help", "=", "'Choose a dataset.'", ")", "\n", "parser", ".", "add_argument", "(", "'--res_path'", ",", "nargs", "=", "'?'", ",", "default", "=", "'./saved_models/'", ",", "help", "=", "'result path for plots and best error values.'", ")", "\n", "parser", ".", "add_argument", "(", "'--res_folder'", ",", "nargs", "=", "'?'", ",", "default", "=", "'test'", ",", "help", "=", "'specific folder corresponding to different runs on different parameters.'", ")", "\n", "parser", ".", "add_argument", "(", "'--include_networks'", ",", "nargs", "=", "'?'", ",", "default", "=", "\"['gnn', 'seq']\"", ",", "help", "=", "'include given networks in the model.'", ")", "\n", "#parser.add_argument('--include_networks',      nargs='?',  default=\"['transformer','gnn']\",help='loss based on the given interactions.')", "\n", "\n", "# algo-parameters", "\n", "parser", ".", "add_argument", "(", "'--num_epochs'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Number of epochs.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2048", ",", "help", "=", "'Batch size.'", ")", "##2048", "\n", "parser", ".", "add_argument", "(", "'--batch_size_seq'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'Seq batch size.'", ")", "##256", "\n", "parser", ".", "add_argument", "(", "'--valid_batch_siz'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'Valid batch size.'", ")", "##seq, 32", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", ".001", ",", "help", "=", "'Learning rate.'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "nargs", "=", "'?'", ",", "default", "=", "'adam'", ",", "help", "=", "'adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss'", ",", "nargs", "=", "'?'", ",", "default", "=", "'ce'", ",", "help", "=", "'ce'", ")", "\n", "parser", ".", "add_argument", "(", "'--initializer'", ",", "nargs", "=", "'?'", ",", "default", "=", "'xavier'", ",", "help", "=", "'xavier'", ")", "\n", "parser", ".", "add_argument", "(", "'--stddev'", ",", "type", "=", "float", ",", "default", "=", "0.02", ",", "help", "=", "'stddev for normal and [min,max] for uniform'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_item_seq_length'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "help", "=", "'number of rated items to keep.'", ")", "#20 ## to cover all the items (20,50,200)", "\n", "parser", ".", "add_argument", "(", "'--load_embedding_flag'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'0-->donot load embedding, 1-->load embedding for entities.'", ")", "\n", "parser", ".", "add_argument", "(", "'--at_k'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'@k for recall, map and ndcg, etc.'", ")", "\n", "parser", ".", "add_argument", "(", "'--knn_k'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'@k for knn.'", ")", "\n", "parser", ".", "add_argument", "(", "'--cosine'", ",", "nargs", "=", "'?'", ",", "default", "=", "'False'", ",", "help", "=", "'knn_graph cosine or not.'", ")", "\n", "parser", ".", "add_argument", "(", "'--embed_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "'node2vec'", ",", "help", "=", "'Choose a dataset.'", ")", "\n", "\n", "# hyper-parameters", "\n", "parser", ".", "add_argument", "(", "'--num_factors'", ",", "type", "=", "int", ",", "default", "=", "80", ",", "help", "=", "'Embedding size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_negatives'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Negative instances in sampling.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_negatives_seq'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Negative instances in sampling for seq (done in main itself).'", ")", "\n", "parser", ".", "add_argument", "(", "'--reg_w'", ",", "type", "=", "float", ",", "default", "=", "0.0000", ",", "help", "=", "\"Regularization for weight vector.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--reg_b'", ",", "type", "=", "float", ",", "default", "=", "0.000", ",", "help", "=", "\"Regularization for user and item bias embeddings.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--reg_lambda'", ",", "type", "=", "float", ",", "default", "=", "0.000", ",", "help", "=", "\"Regularization lambda for user and item embeddings.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--margin'", ",", "type", "=", "float", ",", "default", "=", "2.0", ",", "help", "=", "'margin value for TripletMarginLoss.'", ")", "\n", "parser", ".", "add_argument", "(", "'--keep_prob'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'droupout keep probability in layers.'", ")", "#0.7##", "\n", "\n", "# gnn", "\n", "parser", ".", "add_argument", "(", "'--num_layers'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Number of hidden layers.'", ")", "# feature in testing ##not completed", "\n", "parser", ".", "add_argument", "(", "'--hid_units'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[48,32]'", ",", "help", "=", "'hidden units of GAT'", ")", "\n", "parser", ".", "add_argument", "(", "'--gnn_keep_prob'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'proj keep probability in projection weights layers for reviews.'", ")", "#0.4", "\n", "parser", ".", "add_argument", "(", "'--net_keep_prob'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'proj keep probability in projection weights layers for reviews.'", ")", "\n", "\n", "# multi-head", "\n", "parser", ".", "add_argument", "(", "'--n_heads'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[1]'", ",", "help", "=", "'number of heads of GAT'", ")", "\n", "parser", ".", "add_argument", "(", "'--d_k'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'Number of hidden layers.'", ")", "# feature in testing ##not completed", "\n", "\n", "# valid and test", "\n", "parser", ".", "add_argument", "(", "'--dataset_avg_flag_zero'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Dataset item embed zero (or) avg. zero --> 1, else avg'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_mod'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "help", "=", "'epoch mod --> to display valid and test error.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_thread'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'number of threads.'", ")", "\n", "parser", ".", "add_argument", "(", "'--comment'", ",", "nargs", "=", "'?'", ",", "default", "=", "'comment'", ",", "help", "=", "'comments about the current experimental iterations.'", ")", "\n", "\n", "# new", "\n", "parser", ".", "add_argument", "(", "'--store_embedding'", ",", "nargs", "=", "'?'", ",", "default", "=", "'False'", ",", "help", "=", "'whether to store user-list-item embeddings for knn_graph.'", ")", "\n", "parser", ".", "add_argument", "(", "'--knn_graph'", ",", "nargs", "=", "'?'", ",", "default", "=", "'True'", ",", "help", "=", "'knn_graph for tenet.'", ")", "\n", "parser", ".", "add_argument", "(", "'--user_adj_weights'", ",", "nargs", "=", "'?'", ",", "default", "=", "'False'", ",", "help", "=", "'whether to use adjacency matrix weights for gnn.'", ")", "\n", "parser", ".", "add_argument", "(", "'--self_loop'", ",", "nargs", "=", "'?'", ",", "default", "=", "'True'", ",", "help", "=", "'whether to use adjacency matrix weights for gnn.'", ")", "\n", "\n", "# new", "\n", "parser", ".", "add_argument", "(", "'--warm_start_gnn'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'warm_start done on gnn part to give better embeddings to seq part.'", ")", "\n", "parser", ".", "add_argument", "(", "'--include_hgnn'", ",", "nargs", "=", "'?'", ",", "default", "=", "'True'", ",", "help", "=", "'whether to include hgnn in gnn part of the network.'", ")", "\n", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.tenet_negative_samples.NegativeSamples.__init__": [[9, 35], ["tenet_negative_samples.NegativeSamples.get_positive_instances", "numpy.repeat", "numpy.repeat", "numpy.concatenate", "numpy.concatenate", "tenet_negative_samples.NegativeSamples.rating_arr.astype", "len"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.tenet_negative_samples.NegativeSamples.get_positive_instances"], ["    ", "def", "__init__", "(", "self", ",", "sp_matrix", ",", "num_negatives", ",", "params", ",", "loss_criterion", "=", "'ce'", ")", ":", "## treat user as list and item as item", "\n", "# param assignment", "\n", "        ", "self", ".", "sp_matrix", "=", "sp_matrix", "\n", "self", ".", "num_negatives", "=", "num_negatives", "\n", "self", ".", "loss_criterion", "=", "loss_criterion", "\n", "self", ".", "num_rating", "=", "sp_matrix", ".", "nnz", "\n", "self", ".", "num_item", "=", "sp_matrix", ".", "shape", "[", "-", "1", "]", "##", "\n", "\n", "## new", "\n", "self", ".", "num_user", "=", "params", ".", "num_user", "\n", "self", ".", "list_user_vec", "=", "params", ".", "list_user_vec", "\n", "\n", "# positive part", "\n", "self", ".", "list_pos_arr", ",", "self", ".", "item_pos_arr", ",", "self", ".", "rating_pos_arr", "=", "self", ".", "get_positive_instances", "(", "sp_matrix", ")", "\n", "#pdb.set_trace()", "\n", "self", ".", "user_pos_arr", "=", "self", ".", "list_user_vec", "[", "self", ".", "list_pos_arr", "]", "\n", "\n", "# negative part", "\n", "self", ".", "list_neg_arr", "=", "np", ".", "repeat", "(", "self", ".", "list_pos_arr", ",", "self", ".", "num_negatives", ")", "##negative samples could be different bw item and bundle", "\n", "self", ".", "rating_neg_arr", "=", "np", ".", "repeat", "(", "[", "0", "]", ",", "len", "(", "self", ".", "rating_pos_arr", ")", "*", "self", ".", "num_negatives", ")", "\n", "##pdb.set_trace()", "\n", "\n", "# positive_and_negative part pre-generated to improve efficiency", "\n", "self", ".", "list_arr", "=", "np", ".", "concatenate", "(", "[", "self", ".", "list_pos_arr", ",", "self", ".", "list_neg_arr", "]", ")", "\n", "self", ".", "rating_arr", "=", "np", ".", "concatenate", "(", "[", "self", ".", "rating_pos_arr", ",", "self", ".", "rating_neg_arr", "]", ")", "\n", "self", ".", "rating_arr", "=", "self", ".", "rating_arr", ".", "astype", "(", "np", ".", "float16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.tenet_negative_samples.NegativeSamples.get_positive_instances": [[36, 43], ["mat.tocsc().tocoo", "numpy.repeat", "numpy.array", "numpy.array", "numpy.array", "len", "mat.tocsc"], "methods", ["None"], ["", "def", "get_positive_instances", "(", "self", ",", "mat", ")", ":", "\n", "        ", "list_pos_arr", ",", "item_pos_arr", ",", "rating_pos_arr", "=", "(", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int", ")", ",", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int", ")", ",", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int", ")", ")", "\n", "pos_mat", "=", "mat", ".", "tocsc", "(", ")", ".", "tocoo", "(", ")", "\n", "list_pos_arr", ",", "item_pos_arr", "=", "pos_mat", ".", "row", ",", "pos_mat", ".", "col", "\n", "rating_pos_arr", "=", "np", ".", "repeat", "(", "[", "1", "]", ",", "len", "(", "list_pos_arr", ")", ")", "\n", "\n", "return", "list_pos_arr", ",", "item_pos_arr", ",", "rating_pos_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.tenet_negative_samples.NegativeSamples.generate_negative_item_samples": [[44, 53], ["numpy.array", "numpy.random.choice", "numpy.random.choice"], "methods", ["None"], ["", "def", "generate_negative_item_samples", "(", "self", ",", ")", ":", "\n", "        ", "neg_item_arr", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "if", "self", ".", "loss_criterion", "==", "'pairwise'", ":", "\n", "            ", "random_indices", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "num_item", "-", "1", ",", "1", "*", "self", ".", "num_rating", ")", "+", "1", "##to tackle 0-padding", "\n", "", "else", ":", "\n", "            ", "random_indices", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "num_item", "-", "1", ",", "self", ".", "num_negatives", "*", "self", ".", "num_rating", ")", "+", "1", "##to tackle 0-padding", "\n", "", "neg_item_arr", "=", "random_indices", "\n", "\n", "return", "neg_item_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.tenet_negative_samples.NegativeSamples.generate_negative_user_samples": [[54, 63], ["numpy.array", "numpy.random.choice", "numpy.random.choice"], "methods", ["None"], ["", "def", "generate_negative_user_samples", "(", "self", ",", ")", ":", "\n", "        ", "neg_user_arr", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "if", "self", ".", "loss_criterion", "==", "'pairwise'", ":", "\n", "            ", "random_indices", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "num_user", "-", "1", ",", "1", "*", "self", ".", "num_rating", ")", "+", "1", "##to tackle 0-padding", "\n", "", "else", ":", "\n", "            ", "random_indices", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "num_user", "-", "1", ",", "self", ".", "num_negatives", "*", "self", ".", "num_rating", ")", "+", "1", "##to tackle 0-padding", "\n", "", "neg_user_arr", "=", "random_indices", "\n", "\n", "return", "neg_user_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.tenet_negative_samples.NegativeSamples.generate_instances": [[65, 72], ["tenet_negative_samples.NegativeSamples.generate_negative_item_samples", "numpy.concatenate", "tenet_negative_samples.NegativeSamples.generate_negative_user_samples", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.tenet_negative_samples.NegativeSamples.generate_negative_item_samples", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.tenet_negative_samples.NegativeSamples.generate_negative_user_samples"], ["", "def", "generate_instances", "(", "self", ",", ")", ":", "\n", "        ", "self", ".", "item_neg_arr", "=", "self", ".", "generate_negative_item_samples", "(", ")", "\n", "self", ".", "item_arr", "=", "np", ".", "concatenate", "(", "[", "self", ".", "item_pos_arr", ",", "self", ".", "item_neg_arr", "]", ")", "\n", "##new", "\n", "self", ".", "user_neg_arr", "=", "self", ".", "generate_negative_user_samples", "(", ")", "\n", "self", ".", "user_arr", "=", "np", ".", "concatenate", "(", "[", "self", ".", "user_pos_arr", ",", "self", ".", "user_neg_arr", "]", ")", "\n", "return", "self", ".", "user_arr", ",", "self", ".", "list_arr", ",", "self", ".", "item_arr", ",", "self", ".", "rating_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.tenet_negative_samples.NegativeSamples.generate_instances_bpr": [[73, 77], ["tenet_negative_samples.NegativeSamples.generate_negative_user_samples", "tenet_negative_samples.NegativeSamples.generate_negative_item_samples"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.tenet_negative_samples.NegativeSamples.generate_negative_user_samples", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.tenet_negative_samples.NegativeSamples.generate_negative_item_samples"], ["", "def", "generate_instances_bpr", "(", "self", ",", ")", ":", "\n", "        ", "self", ".", "user_neg_arr", "=", "self", ".", "generate_negative_user_samples", "(", ")", "\n", "self", ".", "item_neg_arr", "=", "self", ".", "generate_negative_item_samples", "(", ")", "\n", "return", "self", ".", "user_pos_arr", ",", "self", ".", "user_neg_arr", ",", "self", ".", "list_pos_arr", ",", "self", ".", "item_pos_arr", ",", "self", ".", "item_neg_arr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.batch.Batch.__init__": [[5, 16], ["numpy.arange", "batch.Batch.initialize_epoch"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.batch.Batch.initialize_epoch"], ["    ", "def", "__init__", "(", "self", ",", "num_instances", ",", "batch_size", ",", "shuffle", "=", "True", ")", ":", "\n", "# parameters", "\n", "        ", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "start", "=", "0", "\n", "self", ".", "epoch_completed", "=", "False", "\n", "\n", "# initialization", "\n", "self", ".", "indices", "=", "np", ".", "arange", "(", "0", ",", "num_instances", ")", "\n", "self", ".", "initialize_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.batch.Batch.initialize_epoch": [[17, 19], ["batch.Batch.initialize_next_epoch"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.batch.Batch.initialize_next_epoch"], ["", "def", "initialize_epoch", "(", "self", ")", ":", "\n", "        ", "self", ".", "initialize_next_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.batch.Batch.initialize_next_epoch": [[21, 26], ["numpy.random.shuffle"], "methods", ["None"], ["", "def", "initialize_next_epoch", "(", "self", ")", ":", "\n", "        ", "self", ".", "epoch_completed", "=", "False", "\n", "self", ".", "start", "=", "0", "\n", "if", "self", ".", "shuffle", "==", "True", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.batch.Batch.get_next_batch_indices": [[28, 38], ["None"], "methods", ["None"], ["", "", "def", "get_next_batch_indices", "(", "self", ")", ":", "\n", "        ", "start", "=", "self", ".", "start", "\n", "batch_size", "=", "self", ".", "batch_size", "\n", "if", "start", "+", "batch_size", "<", "(", "self", ".", "num_instances", "-", "1", ")", ":", "\n", "            ", "end", "=", "start", "+", "batch_size", "\n", "self", ".", "start", "=", "end", "\n", "", "else", ":", "\n", "            ", "end", "=", "self", ".", "num_instances", "\n", "self", ".", "epoch_completed", "=", "True", "\n", "", "return", "self", ".", "indices", "[", "start", ":", "end", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.batch.Batch.has_next_batch": [[39, 41], ["None"], "methods", ["None"], ["", "def", "has_next_batch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "epoch_completed", "==", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.parameters.Parameters.__init__": [[10, 98], ["args.method.lower", "eval", "eval", "eval", "len", "len", "len", "dataset.validNegativesDict.keys", "dataset.testNegativesDict.keys"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "# Arguments =======================================================================", "\n", "# dataset and method ==============================================================", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "dataset_obj", "=", "dataset", "\n", "self", ".", "method", "=", "args", ".", "method", ".", "lower", "(", ")", "\n", "self", ".", "path", "=", "args", ".", "path", "\n", "self", ".", "dataset", "=", "args", ".", "dataset", "\n", "self", ".", "result_path", "=", "args", ".", "res_path", "+", "args", ".", "dataset", "+", "'/'", "+", "args", ".", "method", "+", "'/'", "\n", "self", ".", "result_folder", "=", "args", ".", "res_folder", "\n", "self", ".", "include_networks", "=", "eval", "(", "args", ".", "include_networks", ")", "\n", "\n", "# algo-parameters =======================================================", "\n", "self", ".", "num_epochs", "=", "args", ".", "num_epochs", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "batch_size_seq", "=", "args", ".", "batch_size_seq", "\n", "self", ".", "valid_batch_siz", "=", "args", ".", "valid_batch_siz", "\n", "self", ".", "lr", "=", "args", ".", "lr", "\n", "self", ".", "optimizer", "=", "args", ".", "optimizer", "\n", "self", ".", "loss", "=", "args", ".", "loss", "\n", "if", "self", ".", "method", "in", "[", "'bpr'", "]", ":", "\n", "            ", "self", ".", "loss", "=", "'bpr'", "\n", "", "self", ".", "initializer", "=", "args", ".", "initializer", "\n", "self", ".", "stddev", "=", "args", ".", "stddev", "\n", "self", ".", "max_item_seq_length", "=", "args", ".", "max_item_seq_length", "\n", "self", ".", "load_embedding_flag", "=", "dataset", ".", "load_embedding_flag", "#indicates extra-information", "\n", "\n", "# hyper-parameters ======================================================", "\n", "self", ".", "num_factors", "=", "args", ".", "num_factors", "\n", "self", ".", "num_layers", "=", "args", ".", "num_layers", "## testing", "\n", "self", ".", "num_negatives", "=", "args", ".", "num_negatives", "\n", "self", ".", "num_negatives_seq", "=", "args", ".", "num_negatives_seq", "\n", "self", ".", "reg_w", "=", "args", ".", "reg_w", "\n", "self", ".", "reg_b", "=", "args", ".", "reg_b", "\n", "self", ".", "reg_lambda", "=", "args", ".", "reg_lambda", "\n", "self", ".", "margin", "=", "args", ".", "margin", "\n", "self", ".", "keep_prob", "=", "args", ".", "keep_prob", "\n", "\n", "# gnn ==============================================================", "\n", "self", ".", "hid_units", "=", "eval", "(", "args", ".", "hid_units", ")", "\n", "self", ".", "n_heads", "=", "eval", "(", "args", ".", "n_heads", ")", "\n", "self", ".", "gnn_keep_prob", "=", "args", ".", "gnn_keep_prob", "\n", "self", ".", "net_keep_prob", "=", "args", ".", "net_keep_prob", "\n", "self", ".", "d_k", "=", "args", ".", "d_k", "\n", "\n", "# valid test ============================================================", "\n", "self", ".", "at_k", "=", "args", ".", "at_k", "\n", "self", ".", "num_thread", "=", "args", ".", "num_thread", "\n", "self", ".", "epoch_mod", "=", "args", ".", "epoch_mod", "\n", "\n", "# Dataset ==============================================================", "\n", "# count ================================================================", "\n", "self", ".", "num_user", "=", "dataset", ".", "num_user", "\n", "self", ".", "num_list", "=", "dataset", ".", "num_list", "\n", "self", ".", "num_item", "=", "dataset", ".", "num_item", "\n", "self", ".", "num_train_instances", "=", "len", "(", "dataset", ".", "trainArrTriplets", "[", "0", "]", ")", "\n", "self", ".", "num_valid_instances", "=", "len", "(", "dataset", ".", "validNegativesDict", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_test_instances", "=", "len", "(", "dataset", ".", "testNegativesDict", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_nodes", "=", "self", ".", "num_user", "+", "self", ".", "num_list", "+", "self", ".", "num_item", "\n", "\n", "# data-structures ======================================================", "\n", "self", ".", "user_lists_dct", "=", "dataset", ".", "user_lists_dct", "\n", "self", ".", "list_items_dct", "=", "dataset", ".", "list_items_dct", "# only training items", "\n", "self", ".", "list_items_dct_train", "=", "dataset", ".", "list_items_dct_train", "## make sure about proper train and validation data", "\n", "self", ".", "list_user_dct", "=", "dataset", ".", "list_user_dct", "\n", "self", ".", "list_user_vec", "=", "dataset", ".", "list_user_vec", "\n", "self", ".", "train_matrix", "=", "dataset", ".", "train_matrix", "\n", "self", ".", "testNegativesDict", "=", "dataset", ".", "testNegativesDict", "\n", "self", ".", "validNegativesDict", "=", "dataset", ".", "validNegativesDict", "\n", "\n", "self", ".", "trainArrTriplets", "=", "dataset", ".", "trainArrTriplets", "\n", "self", ".", "validArrDubles", "=", "dataset", ".", "validArrDubles", "\n", "self", ".", "testArrDubles", "=", "dataset", ".", "testArrDubles", "\n", "self", ".", "train_matrix_item_seq", "=", "dataset", ".", "train_matrix_item_seq", "\n", "\n", "##new", "\n", "self", ".", "train_matrix_item_seq_for_test", "=", "dataset", ".", "train_matrix_item_seq_for_test", "\n", "\n", "# adj ===========", "\n", "if", "self", ".", "method", "in", "[", "'tenet'", "]", ":", "\n", "            ", "self", ".", "user_adj_mat", "=", "dataset", ".", "user_adj_mat", "\n", "self", ".", "list_adj_mat", "=", "dataset", ".", "list_adj_mat", "\n", "self", ".", "item_adj_mat", "=", "dataset", ".", "item_adj_mat", "\n", "\n", "# new ================", "\n", "", "self", ".", "warm_start_gnn", "=", "args", ".", "warm_start_gnn", "##warm-start for hgnn", "\n", "self", ".", "include_hgnn", "=", "args", ".", "include_hgnn", "\n", "self", ".", "include_hgnn", "=", "True", "if", "args", ".", "include_hgnn", "==", "'True'", "else", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.parameters.Parameters.get_args_to_string": [[99, 102], ["str", "random.randint"], "methods", ["None"], ["", "def", "get_args_to_string", "(", "self", ",", ")", ":", "\n", "        ", "args_str", "=", "str", "(", "random", ".", "randint", "(", "1", ",", "1000000", ")", ")", "\n", "return", "args_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.sampler.WarpSampler.__init__": [[46, 61], ["multiprocessing.Queue", "range", "sampler.WarpSampler.processors.append", "sampler.WarpSampler.processors[].start", "multiprocessing.Process", "numpy.random.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "User", ",", "usernum", ",", "itemnum", ",", "batch_size", "=", "64", ",", "maxlen", "=", "10", ",", "n_workers", "=", "1", ")", ":", "\n", "        ", "self", ".", "result_queue", "=", "Queue", "(", "maxsize", "=", "n_workers", "*", "10", ")", "\n", "self", ".", "processors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_workers", ")", ":", "\n", "            ", "self", ".", "processors", ".", "append", "(", "\n", "Process", "(", "target", "=", "sample_function", ",", "args", "=", "(", "User", ",", "\n", "usernum", ",", "\n", "itemnum", ",", "\n", "batch_size", ",", "\n", "maxlen", ",", "\n", "self", ".", "result_queue", ",", "\n", "np", ".", "random", ".", "randint", "(", "2e9", ")", "\n", ")", ")", ")", "\n", "self", ".", "processors", "[", "-", "1", "]", ".", "daemon", "=", "True", "\n", "self", ".", "processors", "[", "-", "1", "]", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.sampler.WarpSampler.next_batch": [[62, 64], ["sampler.WarpSampler.result_queue.get"], "methods", ["None"], ["", "", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "result_queue", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.sampler.WarpSampler.close": [[65, 69], ["p.terminate", "p.join"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "processors", ":", "\n", "            ", "p", ".", "terminate", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.sampler.random_neq": [[5, 10], ["numpy.random.randint", "numpy.random.randint"], "function", ["None"], ["def", "random_neq", "(", "l", ",", "r", ",", "s", ")", ":", "\n", "    ", "t", "=", "np", ".", "random", ".", "randint", "(", "l", ",", "r", ")", "\n", "while", "t", "in", "s", ":", "\n", "        ", "t", "=", "np", ".", "random", ".", "randint", "(", "l", ",", "r", ")", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.sampler.sample_function": [[11, 43], ["numpy.random.seed", "numpy.random.randint", "numpy.zeros", "numpy.zeros", "numpy.zeros", "set", "reversed", "range", "result_queue.put", "len", "numpy.random.randint", "one_batch.append", "zip", "sampler.random_neq", "sampler.sample_function.sample"], "function", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.sampler.random_neq"], ["", "def", "sample_function", "(", "user_train", ",", "usernum", ",", "itemnum", ",", "batch_size", ",", "maxlen", ",", "result_queue", ",", "SEED", ")", ":", "\n", "    ", "def", "sample", "(", ")", ":", "\n", "\n", "        ", "user", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "usernum", "+", "1", ")", "\n", "#pdb.set_trace()", "\n", "while", "len", "(", "user_train", "[", "user", "]", ")", "<=", "1", ":", "user", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "usernum", "+", "1", ")", "\n", "\n", "seq", "=", "np", ".", "zeros", "(", "[", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "pos", "=", "np", ".", "zeros", "(", "[", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "neg", "=", "np", ".", "zeros", "(", "[", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "nxt", "=", "user_train", "[", "user", "]", "[", "-", "1", "]", "\n", "idx", "=", "maxlen", "-", "1", "\n", "\n", "ts", "=", "set", "(", "user_train", "[", "user", "]", ")", "\n", "for", "i", "in", "reversed", "(", "user_train", "[", "user", "]", "[", ":", "-", "1", "]", ")", ":", "\n", "            ", "seq", "[", "idx", "]", "=", "i", "\n", "pos", "[", "idx", "]", "=", "nxt", "\n", "if", "nxt", "!=", "0", ":", "neg", "[", "idx", "]", "=", "random_neq", "(", "1", ",", "itemnum", "+", "1", ",", "ts", ")", "\n", "nxt", "=", "i", "\n", "idx", "-=", "1", "\n", "if", "idx", "==", "-", "1", ":", "break", "\n", "\n", "#pdb.set_trace()", "\n", "", "return", "(", "user", ",", "seq", ",", "pos", ",", "neg", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "SEED", ")", "\n", "while", "True", ":", "\n", "        ", "one_batch", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "one_batch", ".", "append", "(", "sample", "(", ")", ")", "\n", "\n", "", "result_queue", ".", "put", "(", "zip", "(", "*", "one_batch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.valid_test_error_seq.ValidTestErrorSEQ.__init__": [[10, 28], ["valid_test_error_seq.ValidTestErrorSEQ.get_num_valid_negative_samples", "valid_test_error_seq.ValidTestErrorSEQ.get_dict_to_dubles", "valid_test_error_seq.ValidTestErrorSEQ.get_dict_to_dubles"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.valid_test_error.ValidTestError.get_num_valid_negative_samples", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.valid_test_error.ValidTestError.get_dict_to_dubles", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.valid_test_error.ValidTestError.get_dict_to_dubles"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "self", ".", "validNegativesDict", "=", "params", ".", "validNegativesDict", "\n", "self", ".", "testNegativesDict", "=", "params", ".", "testNegativesDict", "\n", "\n", "self", ".", "num_valid_instances", "=", "params", ".", "num_valid_instances", "\n", "self", ".", "num_test_instances", "=", "params", ".", "num_test_instances", "\n", "self", ".", "num_thread", "=", "params", ".", "num_thread", "\n", "self", ".", "num_valid_negatives", "=", "self", ".", "get_num_valid_negative_samples", "(", "self", ".", "validNegativesDict", ")", "\n", "self", ".", "valid_dim", "=", "self", ".", "num_valid_negatives", "+", "1", "\n", "\n", "self", ".", "epoch_mod", "=", "params", ".", "epoch_mod", "\n", "self", ".", "valid_batch_siz", "=", "params", ".", "valid_batch_siz", "\n", "self", ".", "at_k", "=", "params", ".", "at_k", "\n", "\n", "self", ".", "validArrDubles", ",", "self", ".", "valid_pos_items", "=", "self", ".", "get_dict_to_dubles", "(", "self", ".", "validNegativesDict", ")", "\n", "self", ".", "testArrDubles", ",", "self", ".", "test_pos_items", "=", "self", ".", "get_dict_to_dubles", "(", "self", ".", "testNegativesDict", ")", "\n", "self", ".", "list_user_vec", "=", "params", ".", "list_user_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.valid_test_error_seq.ValidTestErrorSEQ.get_num_valid_negative_samples": [[29, 33], ["len"], "methods", ["None"], ["", "def", "get_num_valid_negative_samples", "(", "self", ",", "validDict", ")", ":", "## some strange things are happening.", "\n", "        ", "for", "key", "in", "validDict", ":", "\n", "            ", "return", "len", "(", "self", ".", "validNegativesDict", "[", "key", "]", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.valid_test_error_seq.ValidTestErrorSEQ.get_dict_to_dubles": [[34, 48], ["dct.items", "list", "pos_item_lst.append", "list", "numpy.array", "numpy.full", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "get_dict_to_dubles", "(", "self", ",", "dct", ")", ":", "\n", "        ", "list_lst", ",", "item_lst", "=", "[", "]", ",", "[", "]", "\n", "pos_item_lst", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "dct", ".", "items", "(", ")", ":", "\n", "            ", "lst_id", ",", "itm_id", "=", "key", "\n", "lists", "=", "list", "(", "np", ".", "full", "(", "self", ".", "valid_dim", ",", "lst_id", ",", "dtype", "=", "'int32'", ")", ")", "#+1 to add pos item", "\n", "items", "=", "[", "itm_id", "]", "\n", "pos_item_lst", ".", "append", "(", "itm_id", ")", "\n", "items", "+=", "list", "(", "value", ")", "# first is positive item", "\n", "\n", "list_lst", "+=", "lists", "\n", "item_lst", "+=", "items", "\n", "\n", "", "return", "(", "np", ".", "array", "(", "list_lst", ")", ",", "np", ".", "array", "(", "item_lst", ")", ")", ",", "np", ".", "array", "(", "pos_item_lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.valid_test_error_seq.ValidTestErrorSEQ.get_update": [[49, 89], ["model.eval", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "utils.batch.Batch", "utils.batch.Batch.has_next_batch", "numpy.concatenate", "numpy.array().reshape", "numpy.array().reshape", "utils.evaluation.evaluate_model", "utils.batch.Batch.get_next_batch_indices", "model", "full_pred_torch_lst.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().to", "torch.from_numpy().to", "model.detach().cpu().numpy", "numpy.array", "numpy.array", "list_input.astype", "item_input.astype", "user_input.astype", "torch.from_numpy", "torch.from_numpy", "model.detach().cpu", "valid_test_error_seq.ValidTestErrorSEQ.params.train_matrix_item_seq[].astype", "valid_test_error_seq.ValidTestErrorSEQ.params.train_matrix_item_seq_for_test[].astype", "model.detach"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.batch.Batch.has_next_batch", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.evaluation.evaluate_model", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.batch.Batch.get_next_batch_indices"], ["", "def", "get_update", "(", "self", ",", "model", ",", "epoch_num", ",", "device", ",", "valid_flag", "=", "True", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "if", "valid_flag", "==", "True", ":", "\n", "            ", "(", "list_input", ",", "item_input", ")", "=", "self", ".", "validArrDubles", "\n", "num_inst", "=", "self", ".", "num_valid_instances", "*", "self", ".", "valid_dim", "\n", "posItemlst", "=", "self", ".", "valid_pos_items", "# parameter for evaluate_model", "\n", "matShape", "=", "(", "self", ".", "num_valid_instances", ",", "self", ".", "valid_dim", ")", "\n", "", "else", ":", "\n", "            ", "(", "list_input", ",", "item_input", ")", "=", "self", ".", "testArrDubles", "\n", "num_inst", "=", "self", ".", "num_test_instances", "*", "self", ".", "valid_dim", "\n", "posItemlst", "=", "self", ".", "test_pos_items", "# parameter for evaluate_model", "\n", "matShape", "=", "(", "self", ".", "num_test_instances", ",", "self", ".", "valid_dim", ")", "\n", "\n", "", "batch_siz", "=", "self", ".", "valid_batch_siz", "*", "self", ".", "valid_dim", "\n", "\n", "full_pred_torch_lst", "=", "[", "]", "\n", "list_input_ten", "=", "torch", ".", "from_numpy", "(", "list_input", ".", "astype", "(", "np", ".", "long", ")", ")", ".", "to", "(", "device", ")", "## could be moved to gpu before-hand", "\n", "item_input_ten", "=", "torch", ".", "from_numpy", "(", "item_input", ".", "astype", "(", "np", ".", "long", ")", ")", ".", "to", "(", "device", ")", "\n", "user_input", "=", "self", ".", "list_user_vec", "[", "list_input", "]", "\n", "user_input_ten", "=", "torch", ".", "from_numpy", "(", "user_input", ".", "astype", "(", "np", ".", "long", ")", ")", ".", "to", "(", "device", ")", "\n", "batch", "=", "Batch", "(", "num_inst", ",", "batch_siz", ",", "shuffle", "=", "False", ")", "\n", "while", "batch", ".", "has_next_batch", "(", ")", ":", "\n", "            ", "batch_indices", "=", "batch", ".", "get_next_batch_indices", "(", ")", "\n", "\n", "if", "valid_flag", "==", "True", ":", "\n", "                ", "item_seq", "=", "torch", ".", "from_numpy", "(", "self", ".", "params", ".", "train_matrix_item_seq", "[", "list_input", "[", "batch_indices", "]", "]", ".", "astype", "(", "np", ".", "long", ")", ")", ".", "to", "(", "device", ")", "## ##for_test", "\n", "", "else", ":", "\n", "                ", "item_seq", "=", "torch", ".", "from_numpy", "(", "self", ".", "params", ".", "train_matrix_item_seq_for_test", "[", "list_input", "[", "batch_indices", "]", "]", ".", "astype", "(", "np", ".", "long", ")", ")", ".", "to", "(", "device", ")", "## ##for_test", "\n", "", "y_pred", "=", "model", "(", "user_indices", "=", "user_input_ten", "[", "batch_indices", "]", ",", "list_indices", "=", "list_input_ten", "[", "batch_indices", "]", ",", "item_seq", "=", "item_seq", ",", "\n", "test_item_indices", "=", "item_input_ten", "[", "batch_indices", "]", ",", "train", "=", "False", ",", "network", "=", "'seq'", ")", "# ##", "\n", "full_pred_torch_lst", ".", "append", "(", "y_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "full_pred_np", "=", "np", ".", "concatenate", "(", "full_pred_torch_lst", ")", "#.data.cpu().numpy()", "\n", "# ==============================", "\n", "\n", "predMatrix", "=", "np", ".", "array", "(", "full_pred_np", ")", ".", "reshape", "(", "matShape", ")", "\n", "itemMatrix", "=", "np", ".", "array", "(", "item_input", ")", ".", "reshape", "(", "matShape", ")", "\n", "\n", "(", "hits", ",", "ndcgs", ",", "maps", ")", "=", "evaluate_model", "(", "posItemlst", "=", "posItemlst", ",", "itemMatrix", "=", "itemMatrix", ",", "predMatrix", "=", "predMatrix", ",", "k", "=", "self", ".", "at_k", ",", "num_thread", "=", "self", ".", "num_thread", ")", "\n", "return", "(", "hits", ",", "ndcgs", ",", "maps", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.list_negative_samples.ListNegativeSamples.__init__": [[9, 19], ["numpy.arange", "list_negative_samples.ListNegativeSamples.get_seq_and_seq_pos"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.list_negative_samples.ListNegativeSamples.get_seq_and_seq_pos"], ["    ", "def", "__init__", "(", "self", ",", "train_matrix_item_seq", ",", "num_negatives", ",", "params", ",", "loss_criterion", "=", "'ce'", ")", ":", "## treat user as list and item as item", "\n", "# param assignment", "\n", "        ", "self", ".", "train_matrix_item_seq", "=", "train_matrix_item_seq", "\n", "self", ".", "num_negatives", "=", "num_negatives", "\n", "self", ".", "loss_criterion", "=", "loss_criterion", "\n", "\n", "self", ".", "list_input", "=", "np", ".", "arange", "(", "1", ",", "params", ".", "num_list", ")", "\n", "self", ".", "seq", ",", "self", ".", "seq_pos", "=", "self", ".", "get_seq_and_seq_pos", "(", "train_matrix_item_seq", ")", "\n", "self", ".", "num_item", "=", "params", ".", "num_item", "\n", "self", ".", "params", "=", "params", "\n", "#pdb.set_trace()", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.list_negative_samples.ListNegativeSamples.get_seq_and_seq_pos": [[21, 28], ["numpy.roll", "seq_mat.copy", "numpy.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "get_seq_and_seq_pos", "(", "self", ",", "seq_mat", ")", ":", "\n", "        ", "seq_in_mat", "=", "np", ".", "roll", "(", "seq_mat", ",", "1", ",", "axis", "=", "1", ")", "\n", "seq_in_mat", "[", ":", ",", "0", "]", "=", "0", "\n", "seq_out_mat", "=", "seq_mat", ".", "copy", "(", ")", "\n", "row", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "seq_mat", ")", ")", "\n", "seq_out_mat", "[", "row", ",", "(", "seq_mat", "!=", "0", ")", ".", "argmax", "(", "axis", "=", "1", ")", "]", "=", "0", "\n", "return", "seq_in_mat", "[", "1", ":", "len", "(", "seq_mat", ")", "]", ",", "seq_out_mat", "[", "1", ":", "len", "(", "seq_mat", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.list_negative_samples.ListNegativeSamples.generate_negative_seq_mat": [[29, 36], ["numpy.random.choice().reshape", "numpy.random.choice"], "methods", ["None"], ["", "def", "generate_negative_seq_mat", "(", "self", ",", "seq_pos", ")", ":", "\n", "#pdb.set_trace()", "\n", "        ", "num_row", ",", "num_col", "=", "seq_pos", ".", "shape", "\n", "seq_neg", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "num_item", "-", "1", ",", "num_row", "*", "num_col", ")", ".", "reshape", "(", "num_row", ",", "num_col", ")", "+", "1", "# -1 and +1 is added to avoid padded value (that is 0)", "\n", "seq_neg", "=", "seq_neg", "*", "(", "seq_pos", "!=", "0", ")", "\n", "\n", "return", "seq_neg", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.list_negative_samples.ListNegativeSamples.generate_instances": [[38, 41], ["list_negative_samples.ListNegativeSamples.generate_negative_seq_mat"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.list_negative_samples.ListNegativeSamples.generate_negative_seq_mat"], ["", "def", "generate_instances", "(", "self", ",", ")", ":", "\n", "        ", "self", ".", "seq_neg", "=", "self", ".", "generate_negative_seq_mat", "(", "self", ".", "seq_pos", ")", "\n", "return", "self", ".", "list_input", ",", "self", ".", "seq", ",", "self", ".", "seq_pos", ",", "self", ".", "seq_neg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.uniform": [[6, 10], ["math.sqrt", "tensor.data.uniform_"], "function", ["None"], ["def", "uniform", "(", "size", ",", "tensor", ")", ":", "\n", "    ", "bound", "=", "1.0", "/", "math", ".", "sqrt", "(", "size", ")", "\n", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "tensor", ".", "data", ".", "uniform_", "(", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.kaiming_uniform": [[12, 16], ["math.sqrt", "tensor.data.uniform_"], "function", ["None"], ["", "", "def", "kaiming_uniform", "(", "tensor", ",", "fan", ",", "a", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "bound", "=", "math", ".", "sqrt", "(", "6", "/", "(", "(", "1", "+", "a", "**", "2", ")", "*", "fan", ")", ")", "\n", "tensor", ".", "data", ".", "uniform_", "(", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.glorot": [[18, 22], ["math.sqrt", "tensor.data.uniform_", "tensor.size", "tensor.size"], "function", ["None"], ["", "", "def", "glorot", "(", "tensor", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "stdv", "=", "math", ".", "sqrt", "(", "6.0", "/", "(", "tensor", ".", "size", "(", "-", "2", ")", "+", "tensor", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "tensor", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.glorot_orthogonal": [[24, 29], ["torch.nn.init.orthogonal_", "scale.sqrt", "tensor.var", "tensor.size", "tensor.size"], "function", ["None"], ["", "", "def", "glorot_orthogonal", "(", "tensor", ",", "scale", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "tensor", ".", "data", ")", "\n", "scale", "/=", "(", "(", "tensor", ".", "size", "(", "-", "2", ")", "+", "tensor", ".", "size", "(", "-", "1", ")", ")", "*", "tensor", ".", "var", "(", ")", ")", "\n", "tensor", ".", "data", "*=", "scale", ".", "sqrt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros": [[31, 34], ["tensor.data.fill_"], "function", ["None"], ["", "", "def", "zeros", "(", "tensor", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "tensor", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones": [[36, 39], ["tensor.data.fill_"], "function", ["None"], ["", "", "def", "ones", "(", "tensor", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "tensor", ".", "data", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.normal": [[41, 44], ["tensor.data.normal_"], "function", ["None"], ["", "", "def", "normal", "(", "tensor", ",", "mean", ",", "std", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "tensor", ".", "data", ".", "normal_", "(", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.reset": [[46, 57], ["hasattr", "item.reset_parameters", "hasattr", "nn.children", "geom_utils.reset._reset"], "function", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.hypersagnn_utils.TiedAutoEncoder.reset_parameters"], ["", "", "def", "reset", "(", "nn", ")", ":", "\n", "    ", "def", "_reset", "(", "item", ")", ":", "\n", "        ", "if", "hasattr", "(", "item", ",", "'reset_parameters'", ")", ":", "\n", "            ", "item", ".", "reset_parameters", "(", ")", "\n", "\n", "", "", "if", "nn", "is", "not", "None", ":", "\n", "        ", "if", "hasattr", "(", "nn", ",", "'children'", ")", "and", "len", "(", "list", "(", "nn", ".", "children", "(", ")", ")", ")", ">", "0", ":", "\n", "            ", "for", "item", "in", "nn", ".", "children", "(", ")", ":", "\n", "                ", "_reset", "(", "item", ")", "\n", "", "", "else", ":", "\n", "            ", "_reset", "(", "nn", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.valid_test_error.ValidTestError.__init__": [[10, 28], ["valid_test_error.ValidTestError.get_num_valid_negative_samples", "valid_test_error.ValidTestError.get_dict_to_dubles", "valid_test_error.ValidTestError.get_dict_to_dubles"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.valid_test_error.ValidTestError.get_num_valid_negative_samples", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.valid_test_error.ValidTestError.get_dict_to_dubles", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.valid_test_error.ValidTestError.get_dict_to_dubles"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "self", ".", "validNegativesDict", "=", "params", ".", "validNegativesDict", "\n", "self", ".", "testNegativesDict", "=", "params", ".", "testNegativesDict", "\n", "\n", "self", ".", "num_valid_instances", "=", "params", ".", "num_valid_instances", "\n", "self", ".", "num_test_instances", "=", "params", ".", "num_test_instances", "\n", "self", ".", "num_thread", "=", "params", ".", "num_thread", "\n", "self", ".", "num_valid_negatives", "=", "self", ".", "get_num_valid_negative_samples", "(", "self", ".", "validNegativesDict", ")", "\n", "self", ".", "valid_dim", "=", "self", ".", "num_valid_negatives", "+", "1", "\n", "\n", "self", ".", "epoch_mod", "=", "params", ".", "epoch_mod", "\n", "self", ".", "valid_batch_siz", "=", "params", ".", "valid_batch_siz", "\n", "self", ".", "at_k", "=", "params", ".", "at_k", "\n", "\n", "self", ".", "validArrDubles", ",", "self", ".", "valid_pos_items", "=", "self", ".", "get_dict_to_dubles", "(", "self", ".", "validNegativesDict", ")", "\n", "self", ".", "testArrDubles", ",", "self", ".", "test_pos_items", "=", "self", ".", "get_dict_to_dubles", "(", "self", ".", "testNegativesDict", ")", "\n", "self", ".", "list_user_vec", "=", "params", ".", "list_user_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.valid_test_error.ValidTestError.get_num_valid_negative_samples": [[29, 33], ["len"], "methods", ["None"], ["", "def", "get_num_valid_negative_samples", "(", "self", ",", "validDict", ")", ":", "## some strange things are happening.", "\n", "        ", "for", "key", "in", "validDict", ":", "\n", "            ", "return", "len", "(", "self", ".", "validNegativesDict", "[", "key", "]", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.valid_test_error.ValidTestError.get_dict_to_dubles": [[34, 48], ["dct.items", "list", "pos_item_lst.append", "list", "numpy.array", "numpy.full", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "get_dict_to_dubles", "(", "self", ",", "dct", ")", ":", "\n", "        ", "list_lst", ",", "item_lst", "=", "[", "]", ",", "[", "]", "\n", "pos_item_lst", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "dct", ".", "items", "(", ")", ":", "\n", "            ", "lst_id", ",", "itm_id", "=", "key", "\n", "lists", "=", "list", "(", "np", ".", "full", "(", "self", ".", "valid_dim", ",", "lst_id", ",", "dtype", "=", "'int32'", ")", ")", "#+1 to add pos item", "\n", "items", "=", "[", "itm_id", "]", "\n", "pos_item_lst", ".", "append", "(", "itm_id", ")", "\n", "items", "+=", "list", "(", "value", ")", "# first is positive item", "\n", "\n", "list_lst", "+=", "lists", "\n", "item_lst", "+=", "items", "\n", "\n", "", "return", "(", "np", ".", "array", "(", "list_lst", ")", ",", "np", ".", "array", "(", "item_lst", ")", ")", ",", "np", ".", "array", "(", "pos_item_lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.valid_test_error.ValidTestError.get_update": [[49, 94], ["model.eval", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "utils.batch.Batch", "utils.batch.Batch.has_next_batch", "numpy.concatenate", "numpy.array().reshape", "numpy.array().reshape", "utils.evaluation.evaluate_model", "utils.batch.Batch.get_next_batch_indices", "full_pred_torch_lst.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "model", "model", "model.detach().cpu().numpy", "numpy.array", "numpy.array", "list_input.astype", "item_input.astype", "user_input.astype", "model.detach().cpu", "model.detach"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.batch.Batch.has_next_batch", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.evaluation.evaluate_model", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.batch.Batch.get_next_batch_indices"], ["", "def", "get_update", "(", "self", ",", "model", ",", "epoch_num", ",", "device", ",", "valid_flag", "=", "True", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "if", "valid_flag", "==", "True", ":", "\n", "            ", "(", "list_input", ",", "item_input", ")", "=", "self", ".", "validArrDubles", "\n", "num_inst", "=", "self", ".", "num_valid_instances", "*", "self", ".", "valid_dim", "\n", "posItemlst", "=", "self", ".", "valid_pos_items", "# parameter for evaluate_model", "\n", "matShape", "=", "(", "self", ".", "num_valid_instances", ",", "self", ".", "valid_dim", ")", "\n", "", "else", ":", "\n", "            ", "(", "list_input", ",", "item_input", ")", "=", "self", ".", "testArrDubles", "\n", "num_inst", "=", "self", ".", "num_test_instances", "*", "self", ".", "valid_dim", "\n", "posItemlst", "=", "self", ".", "test_pos_items", "# parameter for evaluate_model", "\n", "matShape", "=", "(", "self", ".", "num_test_instances", ",", "self", ".", "valid_dim", ")", "\n", "\n", "", "batch_siz", "=", "self", ".", "valid_batch_siz", "*", "self", ".", "valid_dim", "\n", "\n", "full_pred_torch_lst", "=", "[", "]", "\n", "list_input_ten", "=", "torch", ".", "from_numpy", "(", "list_input", ".", "astype", "(", "np", ".", "long", ")", ")", ".", "to", "(", "device", ")", "## could be moved to gpu before-hand", "\n", "item_input_ten", "=", "torch", ".", "from_numpy", "(", "item_input", ".", "astype", "(", "np", ".", "long", ")", ")", ".", "to", "(", "device", ")", "\n", "user_input", "=", "self", ".", "list_user_vec", "[", "list_input", "]", "\n", "user_input_ten", "=", "torch", ".", "from_numpy", "(", "user_input", ".", "astype", "(", "np", ".", "long", ")", ")", ".", "to", "(", "device", ")", "\n", "batch", "=", "Batch", "(", "num_inst", ",", "batch_siz", ",", "shuffle", "=", "False", ")", "\n", "##", "\n", "ind", "=", "0", "\n", "while", "batch", ".", "has_next_batch", "(", ")", ":", "\n", "            ", "batch_indices", "=", "batch", ".", "get_next_batch_indices", "(", ")", "\n", "if", "self", ".", "params", ".", "method", "==", "'bpr'", "or", "self", ".", "params", ".", "loss", "==", "'pairwise'", ":", "\n", "                ", "user_neg_input", "=", "None", "\n", "y_pred", "=", "model", "(", "user_input_ten", "[", "batch_indices", "]", ",", "user_neg_input", ",", "list_input_ten", "[", "batch_indices", "]", ",", "item_input_ten", "[", "batch_indices", "]", ")", "# first argument for user", "\n", "", "else", ":", "\n", "                ", "y_pred", "=", "model", "(", "user_indices", "=", "user_input_ten", "[", "batch_indices", "]", ",", "list_indices", "=", "list_input_ten", "[", "batch_indices", "]", ",", "item_indices", "=", "item_input_ten", "[", "batch_indices", "]", ")", "# first argument for user", "\n", "", "full_pred_torch_lst", ".", "append", "(", "y_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "full_pred_np", "=", "np", ".", "concatenate", "(", "full_pred_torch_lst", ")", "#.data.cpu().numpy()", "\n", "\n", "predMatrix", "=", "np", ".", "array", "(", "full_pred_np", ")", ".", "reshape", "(", "matShape", ")", "\n", "itemMatrix", "=", "np", ".", "array", "(", "item_input", ")", ".", "reshape", "(", "matShape", ")", "\n", "'''\n        print('predMatrix')\n        print(predMatrix[0:20,0:20])\n        print('itemMatrix')\n        print(itemMatrix[0:20,0:20])\n        '''", "\n", "\n", "(", "hits", ",", "ndcgs", ",", "maps", ")", "=", "evaluate_model", "(", "posItemlst", "=", "posItemlst", ",", "itemMatrix", "=", "itemMatrix", ",", "predMatrix", "=", "predMatrix", ",", "k", "=", "self", ".", "at_k", ",", "num_thread", "=", "self", ".", "num_thread", ")", "\n", "return", "(", "hits", ",", "ndcgs", ",", "maps", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.store_npy": [[13, 17], ["open", "numpy.save"], "function", ["None"], ["def", "store_npy", "(", "fname", ",", "obj", ")", ":", "\n", "    ", "'''store npy <obj> into <fname>'''", "\n", "with", "open", "(", "fname", ",", "\"wb\"", ")", "as", "fout", ":", "\n", "        ", "np", ".", "save", "(", "fout", ",", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.load_npy": [[18, 23], ["open", "numpy.load"], "function", ["None"], ["", "", "def", "load_npy", "(", "fname", ")", ":", "\n", "    ", "'''load npy obj from <fname>'''", "\n", "with", "open", "(", "fname", ",", "\"rb\"", ")", "as", "fin", ":", "\n", "        ", "obj", "=", "np", ".", "load", "(", "fin", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.store_json": [[24, 28], ["open", "json.dump"], "function", ["None"], ["", "def", "store_json", "(", "fname", ",", "obj", ")", ":", "\n", "    ", "'''store json <obj> into <fname>'''", "\n", "with", "open", "(", "fname", ",", "\"w\"", ")", "as", "fout", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "fout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.load_json": [[29, 34], ["open", "json.load"], "function", ["None"], ["", "", "def", "load_json", "(", "fname", ")", ":", "\n", "    ", "'''load json obj from <fname>'''", "\n", "with", "open", "(", "fname", ",", "\"r\"", ")", "as", "fin", ":", "\n", "        ", "obj", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.store_pickle": [[35, 40], ["open", "pickle.dump"], "function", ["None"], ["", "def", "store_pickle", "(", "fname", ",", "obj", ")", ":", "\n", "    ", "'''store pickle <obj> into <fname>'''", "\n", "with", "open", "(", "fname", ",", "\"wb\"", ")", "as", "fout", ":", "\n", "#pickle.dump(obj,fout,protocol=pickle.HIGHEST_PROTOCOL)", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "fout", ",", "protocol", "=", "2", ")", "#pickle.HIGHEST_PROTOCOL)", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.load_pickle": [[41, 49], ["open", "pickle.load", "torch.load"], "function", ["None"], ["", "", "def", "load_pickle", "(", "fname", ")", ":", "\n", "    ", "'''load pickle obj from <fname>'''", "\n", "try", ":", "\n", "        ", "with", "open", "(", "fname", ",", "\"rb\"", ")", "as", "fin", ":", "\n", "            ", "obj", "=", "pickle", ".", "load", "(", "fin", ")", "\n", "", "", "except", ":", "\n", "        ", "obj", "=", "torch", ".", "load", "(", "fname", ",", "map_location", "=", "'cpu'", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.get_keys_as_set": [[50, 53], ["set", "dct.keys"], "function", ["None"], ["", "def", "get_keys_as_set", "(", "dct", ")", ":", "\n", "    ", "'''get <dct> keys as set'''", "\n", "return", "set", "(", "dct", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.get_value_lists_as_set": [[54, 57], ["set", "itertools.chain.from_iterable", "dct.values"], "function", ["None"], ["", "def", "get_value_lists_as_set", "(", "dct", ")", ":", "\n", "    ", "'''get <dct> list of values as set'''", "\n", "return", "set", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "dct", ".", "values", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.get_value_lists_as_list": [[58, 61], ["list", "itertools.chain.from_iterable", "dct.values"], "function", ["None"], ["", "def", "get_value_lists_as_list", "(", "dct", ")", ":", "\n", "    ", "'''get <dct> list of values as set'''", "\n", "return", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "dct", ".", "values", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.get_values_as_set": [[62, 65], ["set", "dct.values"], "function", ["None"], ["", "def", "get_values_as_set", "(", "dct", ")", ":", "\n", "    ", "'''get <dct> values as set'''", "\n", "return", "set", "(", "dct", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.get_file_to_dict": [[66, 77], ["collections.defaultdict", "open", "dct[].append", "line.decode().strip().split", "line.decode().strip().split", "int", "line.decode().strip", "line.decode().strip", "int", "line.decode", "line.decode"], "function", ["None"], ["", "def", "get_file_to_dict", "(", "fname", ",", "delimiter", "=", "None", ")", ":", "\n", "    ", "'''get dictionary from given key-value <fname>'''", "\n", "dct", "=", "defaultdict", "(", "list", ")", "\n", "with", "open", "(", "fname", ",", "\"rb\"", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "if", "delimiter", "==", "None", ":", "\n", "                ", "key", ",", "val", "=", "line", ".", "decode", "(", ")", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "", "else", ":", "\n", "                ", "key", ",", "val", "=", "line", ".", "decode", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "delimiter", ")", "\n", "", "dct", "[", "int", "(", "key", ")", "]", ".", "append", "(", "int", "(", "val", ")", ")", "\n", "", "", "return", "dct", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.store_dct_as_file": [[78, 82], ["open", "fout.write", "str", "str"], "function", ["None"], ["", "def", "store_dct_as_file", "(", "fname", ",", "dct", ")", ":", "\n", "    ", "with", "open", "(", "fname", ",", "'w'", ")", "as", "fout", ":", "\n", "        ", "for", "key", "in", "dct", ":", "\n", "            ", "fout", ".", "write", "(", "str", "(", "key", ")", "+", "' '", "+", "str", "(", "dct", "[", "key", "]", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.store_dct_list_as_file": [[83, 91], ["open", "fout.write", "fout.write", "str", "str", "str", "str"], "function", ["None"], ["", "", "", "def", "store_dct_list_as_file", "(", "fname", ",", "dct", ",", "reverse_key_val", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "fname", ",", "'w'", ")", "as", "fout", ":", "\n", "        ", "for", "key", "in", "dct", ":", "\n", "            ", "for", "val", "in", "dct", "[", "key", "]", ":", "\n", "                ", "if", "reverse_key_val", "==", "True", ":", "\n", "                    ", "fout", ".", "write", "(", "str", "(", "val", ")", "+", "' '", "+", "str", "(", "key", ")", "+", "\"\\n\"", ")", "\n", "", "else", ":", "\n", "                    ", "fout", ".", "write", "(", "str", "(", "key", ")", "+", "' '", "+", "str", "(", "val", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.get_ids": [[92, 102], ["dict"], "function", ["None"], ["", "", "", "", "", "def", "get_ids", "(", "entity_set", ",", "one_index", "=", "False", ")", ":", "\n", "    ", "'''get assigned ids for given <entity_set>'''", "\n", "id_dct", "=", "dict", "(", ")", "\n", "id_val", "=", "0", "\n", "if", "one_index", "==", "True", ":", "id_val", "+=", "1", "\n", "for", "entity", "in", "entity_set", ":", "\n", "        ", "id_dct", "[", "entity", "]", "=", "id_val", "\n", "id_val", "+=", "1", "\n", "\n", "", "return", "id_dct", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.assign_ids": [[103, 112], ["dict", "value_lst.append"], "function", ["None"], ["", "def", "assign_ids", "(", "in_dct", ",", "key_id_dct", ",", "value_id_dct", ")", ":", "\n", "    ", "'''assign ids for given <in_dct> using <key_id_dct> and <value_id_dct>'''", "\n", "out_dct", "=", "dict", "(", ")", "\n", "for", "key", "in", "in_dct", ":", "\n", "        ", "value_lst", "=", "[", "]", "\n", "for", "value", "in", "in_dct", "[", "key", "]", ":", "\n", "            ", "value_lst", ".", "append", "(", "value_id_dct", "[", "value", "]", ")", "\n", "", "out_dct", "[", "key_id_dct", "[", "key", "]", "]", "=", "value_lst", "\n", "", "return", "out_dct", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.get_dct_to_mat": [[113, 123], ["numpy.full", "numpy.array", "len"], "function", ["None"], ["", "def", "get_dct_to_mat", "(", "dct", ",", "num_row", ",", "num_col", ",", "padding_value", "=", "0", ",", "dtype", "=", "int", ")", ":", "\n", "        ", "mat", "=", "np", ".", "full", "(", "(", "num_row", ",", "num_col", ")", ",", "padding_value", ",", "dtype", "=", "dtype", ")", "\n", "for", "lst", "in", "dct", ":", "\n", "            ", "items_arr", "=", "np", ".", "array", "(", "dct", "[", "lst", "]", ")", "\n", "leng", "=", "len", "(", "items_arr", ")", "\n", "if", "leng", ">=", "num_col", ":", "\n", "                ", "mat", "[", "lst", ",", ":", "]", "=", "items_arr", "[", "-", "num_col", ":", "]", "\n", "", "else", ":", "\n", "                ", "mat", "[", "lst", ",", "-", "leng", ":", "]", "=", "items_arr", "\n", "", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.get_dct_for_user": [[124, 129], ["dict", "len"], "function", ["None"], ["", "def", "get_dct_for_user", "(", "dct", ")", ":", "\n", "    ", "res_dct", "=", "dict", "(", ")", "\n", "for", "key", "in", "dct", ":", "\n", "        ", "res_dct", "[", "key", "[", "0", "]", "]", "=", "dct", "[", "key", "]", "\n", "", "return", "res_dct", ",", "len", "(", "dct", "[", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.remove_duplicates_from_list": [[130, 134], ["set", "seen_add"], "function", ["None"], ["", "def", "remove_duplicates_from_list", "(", "seq", ")", ":", "\n", "    ", "seen", "=", "set", "(", ")", "\n", "seen_add", "=", "seen", ".", "add", "\n", "return", "[", "x", "for", "x", "in", "seq", "if", "not", "(", "x", "in", "seen", "or", "seen_add", "(", "x", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.remove_duplicates_from_dct_of_list": [[135, 140], ["collections.defaultdict", "utils.remove_duplicates_from_list"], "function", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.remove_duplicates_from_list"], ["", "def", "remove_duplicates_from_dct_of_list", "(", "dct", ")", ":", "\n", "    ", "newdct", "=", "defaultdict", "(", "list", ")", "\n", "for", "key", "in", "dct", ":", "\n", "        ", "newdct", "[", "key", "]", "=", "remove_duplicates_from_list", "(", "dct", "[", "key", "]", ")", "\n", "", "return", "newdct", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.get_item_embed_dim": [[141, 150], ["dict", "open", "f.readline().strip", "f.readline().strip.replace().split", "int", "numpy.array().astype", "len", "f.readline", "f.readline().strip.replace", "numpy.array", "toks[].split"], "function", ["None"], ["", "def", "get_item_embed_dim", "(", "filename", ")", ":", "\n", "    ", "item_embed", "=", "dict", "(", ")", "\n", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "line", "=", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", "\n", "toks", "=", "line", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "split", "(", "\"::\"", ")", "\n", "itemid", "=", "int", "(", "toks", "[", "0", "]", ")", "\n", "embed", "=", "np", ".", "array", "(", "toks", "[", "1", "]", ".", "split", "(", "\" \"", ")", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "attr_dim", "=", "len", "(", "embed", ")", "\n", "return", "attr_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.load_embed_file_as_dict": [[151, 162], ["dict", "open", "f.readline", "f.readline.replace().split", "int", "numpy.array().astype", "f.readline", "f.readline.replace", "numpy.array", "toks[].split"], "function", ["None"], ["", "", "def", "load_embed_file_as_dict", "(", "filename", ")", ":", "\n", "    ", "item_embed", "=", "dict", "(", ")", "\n", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "line", "=", "f", ".", "readline", "(", ")", "\n", "while", "line", "!=", "None", "and", "line", "!=", "\"\"", ":", "\n", "            ", "toks", "=", "line", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "split", "(", "\"::\"", ")", "\n", "itemid", "=", "int", "(", "toks", "[", "0", "]", ")", "\n", "embed", "=", "np", ".", "array", "(", "toks", "[", "1", "]", ".", "split", "(", "\" \"", ")", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "item_embed", "[", "itemid", "]", "=", "embed", "\n", "line", "=", "f", ".", "readline", "(", ")", "\n", "", "", "return", "item_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.get_max_entity_id": [[163, 166], ["utils.load_embed_file_as_dict", "max", "load_embed_file_as_dict.keys"], "function", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.load_embed_file_as_dict"], ["", "def", "get_max_entity_id", "(", "filename", ")", ":", "\n", "    ", "dct", "=", "load_embed_file_as_dict", "(", "filename", ")", "\n", "return", "max", "(", "dct", ".", "keys", "(", ")", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.load_embed_as_mat": [[167, 178], ["numpy.zeros", "open", "f.readline", "f.readline.replace().split", "int", "numpy.array().astype", "f.readline", "f.readline.replace", "numpy.array", "toks[].split"], "function", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros"], ["", "def", "load_embed_as_mat", "(", "filename", ",", "row", ",", "col", ")", ":", "\n", "    ", "mat", "=", "np", ".", "zeros", "(", "(", "row", ",", "col", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "line", "=", "f", ".", "readline", "(", ")", "\n", "while", "line", "!=", "None", "and", "line", "!=", "\"\"", ":", "\n", "            ", "toks", "=", "line", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "split", "(", "\"::\"", ")", "\n", "itemid", "=", "int", "(", "toks", "[", "0", "]", ")", "\n", "embed", "=", "np", ".", "array", "(", "toks", "[", "1", "]", ".", "split", "(", "\" \"", ")", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "mat", "[", "itemid", "]", "=", "embed", "\n", "line", "=", "f", ".", "readline", "(", ")", "\n", "", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.store_npy_to_csv": [[179, 181], ["numpy.savetxt"], "function", ["None"], ["", "def", "store_npy_to_csv", "(", "fname", ",", "obj", ",", "delimiter", "=", "'\\t'", ")", ":", "\n", "    ", "np", ".", "savetxt", "(", "fname", ",", "obj", ",", "delimiter", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.checkpoint.save_model": [[6, 10], ["print", "torch.save", "print"], "function", ["None"], ["def", "save_model", "(", "state", ",", "fname", ")", ":", "\n", "    ", "print", "(", "\"Saving model state...\"", ",", "end", "=", "\"\"", ")", "\n", "torch", ".", "save", "(", "state", ",", "fname", ")", "\n", "print", "(", "\"\\rCheckpoint saved!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.checkpoint.load_model": [[12, 21], ["print", "os.path.exists", "model.load_state_dict", "print", "print", "sys.exit", "torch.load"], "function", ["None"], ["", "def", "load_model", "(", "model", ",", "fname", ",", "device", ")", ":", "\n", "    ", "print", "(", "\"Loading model...\"", ",", "end", "=", "\"\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "fname", ")", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "fname", ",", "map_location", "=", "device", ")", ")", "\n", "print", "(", "\"\\rModel loaded successfully!\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"\\rNo saved model found! Exiting.\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.evaluation.evaluate_model": [[12, 47], ["range", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "evaluation.eval_one_rating", "hits.append", "ndcgs.append", "maps.append", "range"], "function", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.sampler.WarpSampler.close", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.evaluation.eval_one_rating"], ["def", "evaluate_model", "(", "posItemlst", ",", "itemMatrix", ",", "predMatrix", ",", "k", ",", "num_thread", ")", ":", "\n", "    ", "global", "_posItemlst", "\n", "global", "_itemMatrix", "\n", "global", "_predMatrix", "\n", "global", "_k", "\n", "global", "_matShape", "\n", "\n", "_posItemlst", "=", "posItemlst", "\n", "_itemMatrix", "=", "itemMatrix", "\n", "_predMatrix", "=", "predMatrix", "\n", "_k", "=", "k", "\n", "_matShape", "=", "itemMatrix", ".", "shape", "\n", "\n", "num_inst", "=", "_matShape", "[", "0", "]", "\n", "\n", "hits", ",", "ndcgs", ",", "maps", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "if", "num_thread", ">", "1", ":", "\n", "        ", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "num_thread", ")", "\n", "res", "=", "pool", ".", "map", "(", "eval_one_rating", ",", "range", "(", "num_inst", ")", ")", "\n", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "hits", "=", "[", "r", "[", "0", "]", "for", "r", "in", "res", "]", "\n", "ndcgs", "=", "[", "r", "[", "1", "]", "for", "r", "in", "res", "]", "\n", "maps", "=", "[", "r", "[", "2", "]", "for", "r", "in", "res", "]", "\n", "return", "(", "hits", ",", "ndcgs", ",", "maps", ")", "\n", "\n", "# Single thread        ", "\n", "", "for", "ind", "in", "range", "(", "num_inst", ")", ":", "\n", "        ", "(", "hr", ",", "ndcg", ",", "mapval", ")", "=", "eval_one_rating", "(", "ind", ")", "\n", "hits", ".", "append", "(", "hr", ")", "\n", "ndcgs", ".", "append", "(", "ndcg", ")", "\n", "maps", ".", "append", "(", "mapval", ")", "\n", "# print (\"hits and ndcgs: \",hits,ndcgs)", "\n", "", "return", "(", "hits", ",", "ndcgs", ",", "maps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.evaluation.eval_one_rating": [[49, 66], ["range", "heapq.nlargest", "evaluation.getHitRatio", "evaluation.getNDCG", "evaluation.getMAP"], "function", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.evaluation.getHitRatio", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.evaluation.getNDCG", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.evaluation.getMAP"], ["", "def", "eval_one_rating", "(", "ind", ")", ":", "\n", "    ", "map_item_score", "=", "{", "}", "\n", "predictions", "=", "_predMatrix", "[", "ind", "]", "\n", "items", "=", "_itemMatrix", "[", "ind", "]", "\n", "gtItem", "=", "_posItemlst", "[", "ind", "]", "\n", "\n", "for", "i", "in", "range", "(", "_matShape", "[", "1", "]", ")", ":", "## parallelaize by assigning array to array in dict", "\n", "        ", "item", "=", "items", "[", "i", "]", "\n", "map_item_score", "[", "item", "]", "=", "predictions", "[", "i", "]", "\n", "# Evaluate top rank list", "\n", "", "ranklist", "=", "heapq", ".", "nlargest", "(", "_k", ",", "map_item_score", ",", "key", "=", "map_item_score", ".", "get", ")", "\n", "# ranklist = heapq.nsmallest(_k, map_item_score, key=map_item_score.get)", "\n", "hr", "=", "getHitRatio", "(", "ranklist", ",", "gtItem", ")", "\n", "ndcg", "=", "getNDCG", "(", "ranklist", ",", "gtItem", ")", "\n", "mapval", "=", "getMAP", "(", "ranklist", ",", "gtItem", ")", "\n", "# pdb.set_trace()", "\n", "return", "(", "hr", ",", "ndcg", ",", "mapval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.evaluation.getHitRatio": [[68, 73], ["None"], "function", ["None"], ["", "def", "getHitRatio", "(", "ranklist", ",", "gtItem", ")", ":", "\n", "    ", "for", "item", "in", "ranklist", ":", "\n", "        ", "if", "item", "==", "gtItem", ":", "\n", "            ", "return", "1", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.evaluation.getNDCG": [[75, 81], ["range", "len", "math.log", "math.log"], "function", ["None"], ["", "def", "getNDCG", "(", "ranklist", ",", "gtItem", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "ranklist", ")", ")", ":", "\n", "        ", "item", "=", "ranklist", "[", "i", "]", "\n", "if", "item", "==", "gtItem", ":", "\n", "            ", "return", "math", ".", "log", "(", "2", ")", "/", "math", ".", "log", "(", "i", "+", "2", ")", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.evaluation.getMAP": [[83, 89], ["range", "len"], "function", ["None"], ["", "def", "getMAP", "(", "ranklist", ",", "gtItem", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "ranklist", ")", ")", ":", "\n", "        ", "item", "=", "ranklist", "[", "i", "]", "\n", "if", "item", "==", "gtItem", ":", "\n", "            ", "return", "1.0", "/", "(", "i", "+", "1", ")", "\n", "", "", "return", "0", "\n", "", ""]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.hypersagnn.HyperSAGNN.__init__": [[23, 50], ["torch.Module.__init__", "models.model_utils.positionwise_feed_forward.PositionwiseFeedForward", "models.model_utils.encoder_layer.EncoderLayer", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.embed_dataset.EmbedDataset.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "n_head", ",", "\n", "d_model", ",", "\n", "d_k", ",", "\n", "d_v", ",", "\n", "node_embedding", ",", "\n", "diag_mask", ",", "\n", "bottle_neck", ",", "\n", "dropout", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pff_classifier", "=", "PositionwiseFeedForward", "(", "\n", "[", "d_model", ",", "1", "]", ",", "reshape", "=", "True", ",", "use_bias", "=", "True", ")", "\n", "\n", "self", ".", "node_embedding", "=", "node_embedding", "\n", "#self.encode1 = EncoderLayer(n_head, d_model, d_k, d_v, dropout_mul=0.3, dropout_pff=0.4, diag_mask=diag_mask, bottle_neck=bottle_neck)", "\n", "## mine ", "\n", "##self.encode1 = EncoderLayer(n_head, d_model, d_k, d_v, dropout_mul=0.6, dropout_pff=0.6, diag_mask=diag_mask, bottle_neck=bottle_neck)", "\n", "#self.encode1 = EncoderLayer(n_head, d_model, d_k, d_v, dropout_mul=0.0, dropout_pff=0.0, diag_mask=diag_mask, bottle_neck=bottle_neck)", "\n", "self", ".", "encode1", "=", "EncoderLayer", "(", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout_mul", "=", "0.4", ",", "dropout_pff", "=", "0.4", ",", "diag_mask", "=", "diag_mask", ",", "bottle_neck", "=", "bottle_neck", ")", "\n", "self", ".", "diag_mask_flag", "=", "diag_mask", "\n", "self", ".", "layer_norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "layer_norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "#pdb.set_trace()", "\n", "self", ".", "dropout_m1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.hypersagnn.HyperSAGNN.get_node_embeddings": [[51, 69], ["x.view", "x.view", "x.view"], "methods", ["None"], ["", "def", "get_node_embeddings", "(", "self", ",", "x", ",", "user_list_item_embeds", ",", "return_recon", "=", "False", ")", ":", "##treat embeds as embeddings table", "\n", "## Mine: This is the place I have to modify the code to get the gmf embeddings 1. concatenate, 2. individual for user, item and list", "\n", "\n", "# shape of x: (b, tuple)", "\n", "        ", "sz_b", ",", "len_seq", "=", "x", ".", "shape", "\n", "# print(torch.max(x), torch.min(x))", "\n", "\n", "x", "=", "user_list_item_embeds", "[", "x", ".", "view", "(", "-", "1", ")", "]", "\n", "##x = self.node_embedding[x.view(-1)]", "\n", "##x, recon_loss = self.node_embedding(x.view(-1))", "\n", "##x = self.node_embedding(x.view(-1))", "\n", "if", "return_recon", ":", "\n", "#return x.view(sz_b, len_seq, -1), recon_loss", "\n", "#return user_list_item_embeds, recon_loss", "\n", "            ", "return", "x", ".", "view", "(", "sz_b", ",", "len_seq", ",", "-", "1", ")", ",", "recon_loss", "\n", "", "else", ":", "\n", "#return user_list_item_embeds", "\n", "            ", "return", "x", ".", "view", "(", "sz_b", ",", "len_seq", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.hypersagnn.HyperSAGNN.get_embedding": [[70, 81], ["hypersagnn.HyperSAGNN.encode1", "hypersagnn.HyperSAGNN.get_node_embeddings", "hypersagnn.HyperSAGNN.get_node_embeddings"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.hypersagnn.HyperSAGNN.get_node_embeddings", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.hypersagnn.HyperSAGNN.get_node_embeddings"], ["", "", "def", "get_embedding", "(", "self", ",", "x", ",", "user_list_item_embeds", ",", "slf_attn_mask", ",", "non_pad_mask", ",", "return_recon", "=", "False", ")", ":", "\n", "        ", "if", "return_recon", ":", "\n", "            ", "x", ",", "recon_loss", "=", "self", ".", "get_node_embeddings", "(", "x", ",", "user_list_item_embeds", ",", "return_recon", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "get_node_embeddings", "(", "x", ",", "user_list_item_embeds", ",", "return_recon", ")", "\n", "", "dynamic", ",", "static", ",", "attn", "=", "self", ".", "encode1", "(", "x", ",", "x", ",", "slf_attn_mask", ",", "non_pad_mask", ")", "\n", "# dynamic, static1, attn = self.encode2(dynamic, static,slf_attn_mask, non_pad_mask)", "\n", "if", "return_recon", ":", "\n", "            ", "return", "dynamic", ",", "static", ",", "attn", ",", "recon_loss", "\n", "", "else", ":", "\n", "            ", "return", "dynamic", ",", "static", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.hypersagnn.HyperSAGNN.get_embedding_static": [[82, 96], ["models.model_utils.hypersagnn_utils.get_attn_key_pad_mask", "models.model_utils.hypersagnn_utils.get_non_pad_mask", "hypersagnn.HyperSAGNN.get_node_embeddings", "hypersagnn.HyperSAGNN.encode1", "len", "x.view.view.view"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.hypersagnn_utils.get_attn_key_pad_mask", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.hypersagnn_utils.get_non_pad_mask", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.hypersagnn.HyperSAGNN.get_node_embeddings"], ["", "", "def", "get_embedding_static", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "len", "(", "x", ".", "shape", ")", "==", "1", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "flag", "=", "True", "\n", "", "else", ":", "\n", "            ", "flag", "=", "False", "\n", "", "slf_attn_mask", "=", "get_attn_key_pad_mask", "(", "seq_k", "=", "x", ",", "seq_q", "=", "x", ")", "\n", "non_pad_mask", "=", "get_non_pad_mask", "(", "x", ")", "\n", "x", "=", "self", ".", "get_node_embeddings", "(", "x", ")", "\n", "dynamic", ",", "static", ",", "attn", "=", "self", ".", "encode1", "(", "x", ",", "x", ",", "slf_attn_mask", ",", "non_pad_mask", ")", "\n", "# dynamic, static, attn = self.encode2(dynamic, static,slf_attn_mask, non_pad_mask)", "\n", "if", "flag", ":", "\n", "            ", "return", "static", "[", ":", ",", "0", ",", ":", "]", "\n", "", "return", "static", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.hypersagnn.HyperSAGNN.forward": [[97, 159], ["x.long.long.long", "models.model_utils.hypersagnn_utils.get_attn_key_pad_mask", "models.model_utils.hypersagnn_utils.get_non_pad_mask", "hypersagnn.HyperSAGNN.layer_norm1", "hypersagnn.HyperSAGNN.layer_norm2", "hypersagnn.HyperSAGNN.pff_classifier", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "hypersagnn.HyperSAGNN.get_embedding", "hypersagnn.HyperSAGNN.get_embedding", "outlier.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.hypersagnn_utils.get_attn_key_pad_mask", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.hypersagnn_utils.get_non_pad_mask", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.hypersagnn.HyperSAGNN.get_embedding", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.hypersagnn.HyperSAGNN.get_embedding"], ["", "def", "forward", "(", "self", ",", "x", ",", "user_list_item_embeds", ",", "mask", "=", "None", ",", "get_outlier", "=", "None", ",", "return_recon", "=", "False", ")", ":", "\n", "        ", "x", "=", "x", ".", "long", "(", ")", "\n", "\n", "slf_attn_mask", "=", "get_attn_key_pad_mask", "(", "seq_k", "=", "x", ",", "seq_q", "=", "x", ")", "\n", "non_pad_mask", "=", "get_non_pad_mask", "(", "x", ")", "\n", "\n", "if", "return_recon", ":", "\n", "            ", "dynamic", ",", "static", ",", "attn", ",", "recon_loss", "=", "self", ".", "get_embedding", "(", "x", ",", "user_list_item_embeds", ",", "slf_attn_mask", ",", "non_pad_mask", ",", "return_recon", ")", "\n", "", "else", ":", "\n", "            ", "dynamic", ",", "static", ",", "attn", "=", "self", ".", "get_embedding", "(", "x", ",", "user_list_item_embeds", ",", "slf_attn_mask", ",", "non_pad_mask", ",", "return_recon", ")", "\n", "", "dynamic", "=", "self", ".", "layer_norm1", "(", "dynamic", ")", "\n", "static", "=", "self", ".", "layer_norm2", "(", "static", ")", "\n", "sz_b", ",", "len_seq", ",", "dim", "=", "dynamic", ".", "shape", "\n", "\n", "if", "self", ".", "diag_mask_flag", "==", "'True'", ":", "\n", "            ", "output", "=", "(", "dynamic", "-", "static", ")", "**", "2", "\n", "", "else", ":", "\n", "            ", "output", "=", "dynamic", "\n", "\n", "## change this back to original", "\n", "#output = static", "\n", "#output = dynamic", "\n", "\n", "## mine", "\n", "#output = self.dropout_m1(output)", "\n", "\n", "", "output", "=", "self", ".", "pff_classifier", "(", "output", ")", "\n", "output", "=", "torch", ".", "sigmoid", "(", "output", ")", "##sigmoid should be there if BECwithLogits not used", "\n", "##output = torch.relu(output)", "\n", "\n", "\n", "if", "get_outlier", "is", "not", "None", ":", "\n", "            ", "k", "=", "get_outlier", "\n", "outlier", "=", "(", "\n", "(", "1", "-", "\n", "output", ")", "*", "\n", "non_pad_mask", ")", ".", "topk", "(", "\n", "k", ",", "\n", "dim", "=", "1", ",", "\n", "largest", "=", "True", ",", "\n", "sorted", "=", "True", ")", "[", "1", "]", "\n", "return", "outlier", ".", "view", "(", "-", "1", ",", "k", ")", "\n", "\n", "", "mode", "=", "'sum'", "\n", "#mode = 'first'", "\n", "\n", "if", "mode", "==", "'min'", ":", "\n", "            ", "output", ",", "_", "=", "torch", ".", "max", "(", "\n", "(", "1", "-", "output", ")", "*", "non_pad_mask", ",", "dim", "=", "-", "2", ",", "keepdim", "=", "False", ")", "\n", "output", "=", "1", "-", "output", "\n", "\n", "", "elif", "mode", "==", "'sum'", ":", "\n", "            ", "output", "=", "torch", ".", "sum", "(", "output", "*", "non_pad_mask", ",", "dim", "=", "-", "2", ",", "keepdim", "=", "False", ")", "\n", "mask_sum", "=", "torch", ".", "sum", "(", "non_pad_mask", ",", "dim", "=", "-", "2", ",", "keepdim", "=", "False", ")", "\n", "output", "/=", "mask_sum", "\n", "", "elif", "mode", "==", "'first'", ":", "\n", "            ", "output", "=", "output", "[", ":", ",", "0", ",", ":", "]", "\n", "\n", "", "if", "return_recon", ":", "\n", "            ", "return", "output", ",", "recon_loss", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.transformer_model.TransformerModel.__init__": [[8, 21], ["torch.Module.__init__", "transformer_model.PositionalEncoding", "TransformerEncoderLayer", "TransformerEncoder", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "transformer_model.TransformerModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.embed_dataset.EmbedDataset.__init__", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.transformer_model.TransformerModel.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "ntoken", ",", "ninp", ",", "nhead", ",", "nhid", ",", "nlayers", ",", "dropout", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "TransformerModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "from", "torch", ".", "nn", "import", "TransformerEncoder", ",", "TransformerEncoderLayer", "\n", "self", ".", "model_type", "=", "'Transformer'", "\n", "self", ".", "src_mask", "=", "None", "\n", "self", ".", "pos_encoder", "=", "PositionalEncoding", "(", "ninp", ",", "dropout", ")", "\n", "encoder_layers", "=", "TransformerEncoderLayer", "(", "ninp", ",", "nhead", ",", "nhid", ",", "dropout", ")", "\n", "self", ".", "transformer_encoder", "=", "TransformerEncoder", "(", "encoder_layers", ",", "nlayers", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Embedding", "(", "ntoken", ",", "ninp", ")", "\n", "self", ".", "ninp", "=", "ninp", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "ninp", ",", "ntoken", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.transformer_model.TransformerModel._generate_square_subsequent_mask": [[22, 26], ["mask.float().masked_fill().masked_fill.float().masked_fill().masked_fill.float().masked_fill().masked_fill", "float", "mask.float().masked_fill().masked_fill.float().masked_fill().masked_fill.float().masked_fill", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "float", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.float().masked_fill().masked_fill.float().masked_fill().masked_fill.float"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones"], ["", "def", "_generate_square_subsequent_mask", "(", "self", ",", "sz", ")", ":", "\n", "        ", "mask", "=", "(", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "sz", ",", "sz", ")", ")", "==", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "masked_fill", "(", "mask", "==", "0", ",", "float", "(", "'-inf'", ")", ")", ".", "masked_fill", "(", "mask", "==", "1", ",", "float", "(", "0.0", ")", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.transformer_model.TransformerModel.init_weights": [[27, 32], ["transformer_model.TransformerModel.encoder.weight.data.uniform_", "transformer_model.TransformerModel.decoder.bias.data.zero_", "transformer_model.TransformerModel.decoder.weight.data.uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "initrange", "=", "0.1", "\n", "self", ".", "encoder", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "\n", "self", ".", "decoder", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "decoder", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.transformer_model.TransformerModel.forward": [[33, 46], ["transformer_model.TransformerModel.transformer_encoder", "transformer_model.TransformerModel._generate_square_subsequent_mask().to", "math.sqrt", "transformer_model.TransformerModel.src_mask.size", "src.size", "transformer_model.TransformerModel._generate_square_subsequent_mask", "src.size"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.transformer_model.TransformerModel._generate_square_subsequent_mask"], ["", "def", "forward", "(", "self", ",", "src", ")", ":", "\n", "#pdb.set_trace()", "\n", "        ", "if", "self", ".", "src_mask", "is", "None", "or", "self", ".", "src_mask", ".", "size", "(", "0", ")", "!=", "src", ".", "size", "(", "0", ")", ":", "\n", "            ", "device", "=", "src", ".", "device", "\n", "mask", "=", "self", ".", "_generate_square_subsequent_mask", "(", "src", ".", "size", "(", "0", ")", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "src_mask", "=", "mask", "\n", "\n", "##src = self.encoder(src) * math.sqrt(self.ninp)", "\n", "", "src", "=", "src", "*", "math", ".", "sqrt", "(", "self", ".", "ninp", ")", "##Mine", "\n", "#src = self.pos_encoder(src)", "\n", "output", "=", "self", ".", "transformer_encoder", "(", "src", ",", "self", ".", "src_mask", ")", "\n", "#output = self.decoder(output)", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.transformer_model.PositionalEncoding.__init__": [[49, 60], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "pe.unsqueeze().transpose.unsqueeze().transpose.unsqueeze().transpose", "transformer_model.PositionalEncoding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "pe.unsqueeze().transpose.unsqueeze().transpose.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.embed_dataset.EmbedDataset.__init__", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "dropout", "=", "0.1", ",", "max_len", "=", "5000", ")", ":", "\n", "        ", "super", "(", "PositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", ".", "float", "(", ")", "*", "(", "-", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "pe", "=", "pe", ".", "unsqueeze", "(", "0", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "self", ".", "register_buffer", "(", "'pe'", ",", "pe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.transformer_model.PositionalEncoding.forward": [[61, 66], ["transformer_model.PositionalEncoding.dropout", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "train", "=", "True", ")", ":", "\n", "#if train == False:", "\n", "#    pdb.set_trace()", "\n", "        ", "x", "=", "x", "+", "self", ".", "pe", "[", ":", "x", ".", "size", "(", "0", ")", ",", ":", "]", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.models_base.Models.__init__": [[5, 7], ["models.hypertenet.HyperTeNet"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "device", "=", "'cuda:0'", ")", ":", "\n", "        ", "self", ".", "model", "=", "HyperTeNet", "(", "params", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.models_base.Models.get_model": [[8, 10], ["None"], "methods", ["None"], ["", "def", "get_model", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.hypertenet.HyperTeNet.__init__": [[14, 108], ["super().__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "torch.tensor().to().long", "models.my_gcn_conv.GCNConv", "models.my_gcn_conv.GCNConv", "models.my_gcn_conv.GCNConv", "models.my_gcn_conv.GCNConv", "models.my_gcn_conv.GCNConv", "models.my_gcn_conv.GCNConv", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "models.transformer_model.TransformerModel", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "models.hypersagnn.HyperSAGNN().to", "params.user_adj_mat.tocoo", "hypertenet.HyperTeNet.user_adj_mat.setdiag", "hypertenet.HyperTeNet.user_adj_mat.eliminate_zeros", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "params.list_adj_mat.tocoo", "hypertenet.HyperTeNet.list_adj_mat.setdiag", "hypertenet.HyperTeNet.list_adj_mat.eliminate_zeros", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "params.item_adj_mat.tocoo", "hypertenet.HyperTeNet.item_adj_mat.setdiag", "hypertenet.HyperTeNet.item_adj_mat.eliminate_zeros", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "models.hypersagnn.HyperSAGNN", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "hypertenet.HyperTeNet.user_adj_mat.nonzero", "hypertenet.HyperTeNet.list_adj_mat.nonzero", "hypertenet.HyperTeNet.item_adj_mat.nonzero", "numpy.array", "numpy.array", "numpy.array", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.embed_dataset.EmbedDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "device", "=", "'cuda:0'", ")", ":", "\n", "        ", "super", "(", "HyperTeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "params", "=", "params", "\n", "\n", "# embedding matrices", "\n", "self", ".", "user_list_item_embeddings", "=", "torch", ".", "nn", ".", "Embedding", "(", "params", ".", "num_user", "+", "params", ".", "num_list", "+", "params", ".", "num_item", ",", "params", ".", "num_factors", ")", "\n", "self", ".", "fc1", "=", "torch", ".", "nn", ".", "Linear", "(", "params", ".", "num_factors", ",", "1", ")", "\n", "self", ".", "fc2", "=", "torch", ".", "nn", ".", "Linear", "(", "params", ".", "num_factors", ",", "1", ")", "\n", "self", ".", "fc3", "=", "torch", ".", "nn", ".", "Linear", "(", "params", ".", "hid_units", "[", "-", "1", "]", ",", "1", ")", "\n", "self", ".", "fc4", "=", "torch", ".", "nn", ".", "Linear", "(", "params", ".", "hid_units", "[", "-", "1", "]", ",", "1", ")", "\n", "\n", "self", ".", "user_item_list_dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "1.0", "-", "params", ".", "keep_prob", ")", "## keep_prob", "\n", "self", ".", "dropout1", "=", "torch", ".", "nn", ".", "Dropout", "(", "1.0", "-", "params", ".", "keep_prob", ")", "## keep_prob", "\n", "self", ".", "dropout2", "=", "torch", ".", "nn", ".", "Dropout", "(", "1.0", "-", "params", ".", "keep_prob", ")", "## keep_prob", "\n", "self", ".", "sigmoid", "=", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "# weight initialization", "\n", "##torch.nn.init.xavier_uniform_(self.user_list_item_embeddings.weight)", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "user_list_item_embeddings", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "user_list_item_embeddings", ".", "weight", "[", "0", "]", ")", "## check in the successive iterations that this is kept zero", "\n", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "user_list_item_embeddings", ".", "weight", "[", "self", ".", "params", ".", "num_user", "]", ")", "\n", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "user_list_item_embeddings", ".", "weight", "[", "self", ".", "params", ".", "num_user", "+", "self", ".", "params", ".", "num_list", "]", ")", "\n", "\n", "# gnn ==========================", "\n", "self", ".", "user_indices", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "range", "(", "params", ".", "num_user", ")", ")", ")", ".", "to", "(", "device", ")", ".", "long", "(", ")", "\n", "self", ".", "list_indices", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "range", "(", "params", ".", "num_list", ")", ")", ")", ".", "to", "(", "device", ")", ".", "long", "(", ")", "\n", "self", ".", "item_indices", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "range", "(", "params", ".", "num_item", ")", ")", ")", ".", "to", "(", "device", ")", ".", "long", "(", ")", "\n", "\n", "self", ".", "user_conv1", "=", "GCNConv", "(", "params", ".", "num_factors", ",", "params", ".", "hid_units", "[", "-", "2", "]", ",", "cached", "=", "True", ",", "normalize", "=", "True", ",", "add_self_loops", "=", "True", ")", "##normalize=True", "\n", "self", ".", "user_conv2", "=", "GCNConv", "(", "params", ".", "hid_units", "[", "-", "2", "]", ",", "params", ".", "hid_units", "[", "-", "1", "]", ",", "cached", "=", "True", ",", "normalize", "=", "True", ",", "add_self_loops", "=", "True", ")", "\n", "\n", "self", ".", "list_conv1", "=", "GCNConv", "(", "params", ".", "num_factors", ",", "params", ".", "hid_units", "[", "-", "2", "]", ",", "cached", "=", "True", ",", "normalize", "=", "True", ",", "add_self_loops", "=", "True", ")", "\n", "self", ".", "list_conv2", "=", "GCNConv", "(", "params", ".", "hid_units", "[", "-", "2", "]", ",", "params", ".", "hid_units", "[", "-", "1", "]", ",", "cached", "=", "True", ",", "normalize", "=", "True", ",", "add_self_loops", "=", "True", ")", "\n", "\n", "self", ".", "item_conv1", "=", "GCNConv", "(", "params", ".", "num_factors", ",", "params", ".", "hid_units", "[", "-", "2", "]", ",", "cached", "=", "True", ",", "normalize", "=", "True", ",", "add_self_loops", "=", "True", ")", "\n", "self", ".", "item_conv2", "=", "GCNConv", "(", "params", ".", "hid_units", "[", "-", "2", "]", ",", "params", ".", "hid_units", "[", "-", "1", "]", ",", "cached", "=", "True", ",", "normalize", "=", "True", ",", "add_self_loops", "=", "True", ")", "\n", "\n", "\n", "if", "params", ".", "args", ".", "knn_graph", "==", "'True'", ":", "\n", "            ", "self", ".", "user_param_indices", "=", "params", ".", "dataset_obj", ".", "user_edge_index", "\n", "self", ".", "list_param_indices", "=", "params", ".", "dataset_obj", ".", "list_edge_index", "\n", "self", ".", "item_param_indices", "=", "params", ".", "dataset_obj", ".", "item_edge_index", "\n", "self", ".", "user_param_weights", ",", "self", ".", "list_param_weights", ",", "self", ".", "item_param_weights", "=", "None", ",", "None", ",", "None", "##crucial to note", "\n", "", "else", ":", "\n", "            ", "self", ".", "user_adj_mat", "=", "params", ".", "user_adj_mat", ".", "tocoo", "(", ")", "\n", "self", ".", "user_adj_mat", ".", "setdiag", "(", "0", ")", ";", "self", ".", "user_adj_mat", ".", "eliminate_zeros", "(", ")", "\n", "#pdb.set_trace()", "\n", "self", ".", "user_param_indices", "=", "torch", ".", "LongTensor", "(", "self", ".", "user_adj_mat", ".", "nonzero", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "user_param_weights", "=", "torch", ".", "FloatTensor", "(", "self", ".", "user_adj_mat", ".", "data", ")", ".", "to", "(", "device", ")", "##weight check", "\n", "\n", "self", ".", "list_adj_mat", "=", "params", ".", "list_adj_mat", ".", "tocoo", "(", ")", "\n", "self", ".", "list_adj_mat", ".", "setdiag", "(", "0", ")", ";", "self", ".", "list_adj_mat", ".", "eliminate_zeros", "(", ")", "\n", "self", ".", "list_param_indices", "=", "torch", ".", "LongTensor", "(", "self", ".", "list_adj_mat", ".", "nonzero", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "list_param_weights", "=", "torch", ".", "FloatTensor", "(", "self", ".", "list_adj_mat", ".", "data", ")", ".", "to", "(", "device", ")", "##weight check", "\n", "\n", "self", ".", "item_adj_mat", "=", "params", ".", "item_adj_mat", ".", "tocoo", "(", ")", "\n", "self", ".", "item_adj_mat", ".", "setdiag", "(", "0", ")", ";", "self", ".", "item_adj_mat", ".", "eliminate_zeros", "(", ")", "\n", "self", ".", "item_param_indices", "=", "torch", ".", "LongTensor", "(", "self", ".", "item_adj_mat", ".", "nonzero", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "item_param_weights", "=", "torch", ".", "FloatTensor", "(", "self", ".", "item_adj_mat", ".", "data", ")", ".", "to", "(", "device", ")", "##weight check", "\n", "if", "params", ".", "args", ".", "user_adj_weights", "==", "'False'", ":", "\n", "                ", "self", ".", "user_param_weights", ",", "self", ".", "list_param_weights", ",", "self", ".", "item_param_weights", "=", "None", ",", "None", ",", "None", "##crucial to note", "\n", "\n", "# dropouts gnn part", "\n", "", "", "self", ".", "user_gnn_dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "1.0", "-", "params", ".", "gnn_keep_prob", ")", "## keep_prob", "\n", "self", ".", "list_gnn_dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "1.0", "-", "params", ".", "gnn_keep_prob", ")", "## keep_prob", "\n", "self", ".", "item_gnn_dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "1.0", "-", "params", ".", "gnn_keep_prob", ")", "## keep_prob", "\n", "\n", "# seq part ============================================================================", "\n", "self", ".", "pos_embeddings", "=", "torch", ".", "nn", ".", "Embedding", "(", "params", ".", "max_item_seq_length", ",", "params", ".", "hid_units", "[", "-", "1", "]", ")", "\n", "\n", "self", ".", "user_dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "1.0", "-", "params", ".", "keep_prob", ")", "## keep_prob", "\n", "self", ".", "list_dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "1.0", "-", "params", ".", "keep_prob", ")", "## keep_prob", "\n", "self", ".", "item_dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "1.0", "-", "params", ".", "keep_prob", ")", "## keep_prob", "\n", "self", ".", "item_dropout1", "=", "torch", ".", "nn", ".", "Dropout", "(", "1.0", "-", "params", ".", "keep_prob", ")", "## keep_prob", "\n", "self", ".", "item_dropout2", "=", "torch", ".", "nn", ".", "Dropout", "(", "1.0", "-", "params", ".", "keep_prob", ")", "## keep_prob", "\n", "self", ".", "item_dropout3", "=", "torch", ".", "nn", ".", "Dropout", "(", "1.0", "-", "params", ".", "keep_prob", ")", "## keep_prob", "\n", "self", ".", "item_dropout4", "=", "torch", ".", "nn", ".", "Dropout", "(", "1.0", "-", "params", ".", "keep_prob", ")", "## keep_prob", "\n", "self", ".", "item_dropout5", "=", "torch", ".", "nn", ".", "Dropout", "(", "1.0", "-", "params", ".", "keep_prob", ")", "## keep_prob", "\n", "self", ".", "item_dropout6", "=", "torch", ".", "nn", ".", "Dropout", "(", "1.0", "-", "params", ".", "keep_prob", ")", "## keep_prob", "\n", "self", ".", "item_dropout7", "=", "torch", ".", "nn", ".", "Dropout", "(", "1.0", "-", "params", ".", "keep_prob", ")", "## keep_prob", "\n", "self", ".", "pos_dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "1.0", "-", "params", ".", "keep_prob", ")", "## keep_prob", "\n", "\n", "self", ".", "sigmoid_seq", "=", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "# transormer model ======================", "\n", "self", ".", "trans_model", "=", "TransformerModel", "(", "ntoken", "=", "params", ".", "num_item", ",", "ninp", "=", "params", ".", "hid_units", "[", "-", "1", "]", ",", "nhead", "=", "params", ".", "n_heads", "[", "-", "1", "]", ",", "\n", "nhid", "=", "params", ".", "hid_units", "[", "-", "1", "]", ",", "nlayers", "=", "params", ".", "num_layers", ",", "dropout", "=", "0.3", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "params", ".", "hid_units", "[", "-", "1", "]", ")", "\n", "\n", "# hgnn ==================================", "\n", "self", ".", "hypersagnn_model", "=", "HyperSAGNN", "(", "n_head", "=", "params", ".", "n_heads", "[", "0", "]", ",", "d_model", "=", "params", ".", "hid_units", "[", "-", "1", "]", ",", "d_k", "=", "params", ".", "hid_units", "[", "-", "1", "]", ",", "d_v", "=", "params", ".", "hid_units", "[", "-", "1", "]", ",", "\n", "node_embedding", "=", "self", ".", "user_list_item_embeddings", ",", "\n", "diag_mask", "=", "True", ",", "bottle_neck", "=", "params", ".", "hid_units", "[", "-", "1", "]", ",", "\n", "dropout", "=", "1.0", "-", "params", ".", "net_keep_prob", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.hypertenet.HyperTeNet.get_emb_user": [[111, 121], ["hypertenet.HyperTeNet.user_list_item_embeddings", "hypertenet.HyperTeNet.user_item_list_dropout", "hypertenet.HyperTeNet.sigmoid", "hypertenet.HyperTeNet.fc1().reshape", "hypertenet.HyperTeNet.fc1"], "methods", ["None"], ["", "def", "get_emb_user", "(", "self", ",", "x", ",", "mask", "=", "None", ",", "get_outlier", "=", "None", ",", "return_recon", "=", "False", ")", ":", "\n", "        ", "emb", "=", "self", ".", "user_list_item_embeddings", "(", "x", ")", "\n", "#emb    = self.user_item_list_dropout(emb)", "\n", "output", "=", "emb", "[", ":", ",", "0", "]", "*", "emb", "[", ":", ",", "2", "]", "#user-item", "\n", "#output = emb[:,1] * emb[:,2] #list-item", "\n", "#output = emb[:,0] * emb[:,1] * emb[:,2] #user-list-item", "\n", "output", "=", "self", ".", "user_item_list_dropout", "(", "output", ")", "\n", "#output = self.sigmoid(torch.sum(output,axis=1)) #self.user_item_list_dropout(output)", "\n", "output", "=", "self", ".", "sigmoid", "(", "self", ".", "fc1", "(", "output", ")", ".", "reshape", "(", "-", "1", ")", ")", "#self.user_item_list_dropout(output)", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.hypertenet.HyperTeNet.get_emb_list": [[122, 132], ["hypertenet.HyperTeNet.user_list_item_embeddings", "hypertenet.HyperTeNet.user_item_list_dropout", "hypertenet.HyperTeNet.sigmoid", "hypertenet.HyperTeNet.fc1().reshape", "hypertenet.HyperTeNet.fc1"], "methods", ["None"], ["", "def", "get_emb_list", "(", "self", ",", "x", ",", "mask", "=", "None", ",", "get_outlier", "=", "None", ",", "return_recon", "=", "False", ")", ":", "\n", "        ", "emb", "=", "self", ".", "user_list_item_embeddings", "(", "x", ")", "\n", "#emb    = self.user_item_list_dropout(emb)", "\n", "output", "=", "emb", "[", ":", ",", "1", "]", "*", "emb", "[", ":", ",", "2", "]", "#user-item", "\n", "#output = emb[:,1] * emb[:,2] #list-item", "\n", "#output = emb[:,0] * emb[:,1] * emb[:,2] #user-list-item", "\n", "output", "=", "self", ".", "user_item_list_dropout", "(", "output", ")", "\n", "#output = self.sigmoid(torch.sum(output,axis=1)) #self.user_item_list_dropout(output)", "\n", "output", "=", "self", ".", "sigmoid", "(", "self", ".", "fc1", "(", "output", ")", ".", "reshape", "(", "-", "1", ")", ")", "#self.user_item_list_dropout(output)", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.hypertenet.HyperTeNet.get_emb_user_list": [[133, 141], ["hypertenet.HyperTeNet.user_list_item_embeddings", "hypertenet.HyperTeNet.dropout1", "hypertenet.HyperTeNet.dropout2", "hypertenet.HyperTeNet.sigmoid", "hypertenet.HyperTeNet.fc1().reshape", "hypertenet.HyperTeNet.fc2().reshape", "hypertenet.HyperTeNet.fc1", "hypertenet.HyperTeNet.fc2"], "methods", ["None"], ["", "def", "get_emb_user_list", "(", "self", ",", "x", ",", "mask", "=", "None", ",", "get_outlier", "=", "None", ",", "return_recon", "=", "False", ")", ":", "\n", "        ", "emb", "=", "self", ".", "user_list_item_embeddings", "(", "x", ")", "\n", "output_user", "=", "emb", "[", ":", ",", "0", "]", "*", "emb", "[", ":", ",", "2", "]", "#user-item", "\n", "output_list", "=", "emb", "[", ":", ",", "1", "]", "*", "emb", "[", ":", ",", "2", "]", "#list-item", "\n", "output_user", "=", "self", ".", "dropout1", "(", "output_user", ")", "\n", "output_list", "=", "self", ".", "dropout2", "(", "output_list", ")", "\n", "output", "=", "self", ".", "sigmoid", "(", "self", ".", "fc1", "(", "output_user", ")", ".", "reshape", "(", "-", "1", ")", "+", "self", ".", "fc2", "(", "output_list", ")", ".", "reshape", "(", "-", "1", ")", ")", "#self.user_item_list_dropout(output)", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.hypertenet.HyperTeNet.get_emb_all_mult": [[142, 148], ["hypertenet.HyperTeNet.user_list_item_embeddings", "hypertenet.HyperTeNet.dropout1", "hypertenet.HyperTeNet.sigmoid", "hypertenet.HyperTeNet.fc1().reshape", "hypertenet.HyperTeNet.fc1"], "methods", ["None"], ["", "def", "get_emb_all_mult", "(", "self", ",", "x", ",", "mask", "=", "None", ",", "get_outlier", "=", "None", ",", "return_recon", "=", "False", ")", ":", "\n", "        ", "emb", "=", "self", ".", "user_list_item_embeddings", "(", "x", ")", "\n", "output", "=", "emb", "[", ":", ",", "0", "]", "*", "emb", "[", ":", ",", "1", "]", "*", "emb", "[", ":", ",", "2", "]", "#user-list-item", "\n", "output", "=", "self", ".", "dropout1", "(", "output", ")", "\n", "output", "=", "self", ".", "sigmoid", "(", "self", ".", "fc1", "(", "output", ")", ".", "reshape", "(", "-", "1", ")", ")", "#self.user_item_list_dropout(output)", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.hypertenet.HyperTeNet.get_emb_all_mult2": [[149, 155], ["hypertenet.HyperTeNet.user_list_item_embeddings", "hypertenet.HyperTeNet.dropout1", "hypertenet.HyperTeNet.sigmoid", "hypertenet.HyperTeNet.fc1().reshape", "hypertenet.HyperTeNet.fc1"], "methods", ["None"], ["", "def", "get_emb_all_mult2", "(", "self", ",", "x", ",", "user_list_item_embeddings", ",", "mask", "=", "None", ",", "get_outlier", "=", "None", ",", "return_recon", "=", "False", ")", ":", "\n", "        ", "emb", "=", "self", ".", "user_list_item_embeddings", "(", "x", ")", "\n", "output", "=", "emb", "[", ":", ",", "0", "]", "*", "emb", "[", ":", ",", "1", "]", "*", "emb", "[", ":", ",", "2", "]", "#user-list-item", "\n", "output", "=", "self", ".", "dropout1", "(", "output", ")", "\n", "output", "=", "self", ".", "sigmoid", "(", "self", ".", "fc1", "(", "output", ")", ".", "reshape", "(", "-", "1", ")", ")", "#self.user_item_list_dropout(output)", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.hypertenet.HyperTeNet.get_emb_user_list2": [[156, 165], ["hypertenet.HyperTeNet.dropout1", "hypertenet.HyperTeNet.dropout2", "hypertenet.HyperTeNet.sigmoid", "hypertenet.HyperTeNet.fc1().reshape", "hypertenet.HyperTeNet.fc2().reshape", "hypertenet.HyperTeNet.fc1", "hypertenet.HyperTeNet.fc2"], "methods", ["None"], ["", "def", "get_emb_user_list2", "(", "self", ",", "x", ",", "user_list_item_embeddings", ",", "mask", "=", "None", ",", "get_outlier", "=", "None", ",", "return_recon", "=", "False", ")", ":", "\n", "        ", "emb", "=", "user_list_item_embeddings", "[", "x", "]", "\n", "output_user", "=", "emb", "[", ":", ",", "0", "]", "*", "emb", "[", ":", ",", "2", "]", "#user-item", "\n", "output_list", "=", "emb", "[", ":", ",", "1", "]", "*", "emb", "[", ":", ",", "2", "]", "#list-item", "\n", "output_user", "=", "self", ".", "dropout1", "(", "output_user", ")", "\n", "output_list", "=", "self", ".", "dropout2", "(", "output_list", ")", "\n", "output", "=", "self", ".", "sigmoid", "(", "self", ".", "fc1", "(", "output_user", ")", ".", "reshape", "(", "-", "1", ")", "+", "self", ".", "fc2", "(", "output_list", ")", ".", "reshape", "(", "-", "1", ")", ")", "#self.user_item_list_dropout(output)", "\n", "#output = self.fc1(output_user).reshape(-1) + self.fc2(output_list).reshape(-1) #self.user_item_list_dropout(output)", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.hypertenet.HyperTeNet.get_emb_user_list3": [[166, 174], ["hypertenet.HyperTeNet.dropout1", "hypertenet.HyperTeNet.dropout2", "hypertenet.HyperTeNet.sigmoid", "hypertenet.HyperTeNet.fc3().reshape", "hypertenet.HyperTeNet.fc4().reshape", "hypertenet.HyperTeNet.fc3", "hypertenet.HyperTeNet.fc4"], "methods", ["None"], ["", "def", "get_emb_user_list3", "(", "self", ",", "x", ",", "user_list_item_embeddings", ",", "mask", "=", "None", ",", "get_outlier", "=", "None", ",", "return_recon", "=", "False", ")", ":", "\n", "        ", "emb", "=", "user_list_item_embeddings", "[", "x", "]", "\n", "output_user", "=", "emb", "[", ":", ",", "0", "]", "*", "emb", "[", ":", ",", "2", "]", "#user-item", "\n", "output_list", "=", "emb", "[", ":", ",", "1", "]", "*", "emb", "[", ":", ",", "2", "]", "#list-item", "\n", "output_user", "=", "self", ".", "dropout1", "(", "output_user", ")", "\n", "output_list", "=", "self", ".", "dropout2", "(", "output_list", ")", "\n", "output", "=", "self", ".", "sigmoid", "(", "self", ".", "fc3", "(", "output_user", ")", ".", "reshape", "(", "-", "1", ")", "+", "self", ".", "fc4", "(", "output_list", ")", ".", "reshape", "(", "-", "1", ")", ")", "#self.user_item_list_dropout(output)", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.hypertenet.HyperTeNet.forward": [[175, 270], ["hypertenet.HyperTeNet.user_list_item_embeddings", "torch.relu", "torch.relu", "torch.relu", "hypertenet.HyperTeNet.user_gnn_dropout", "hypertenet.HyperTeNet.user_conv2", "hypertenet.HyperTeNet.user_list_item_embeddings", "torch.relu", "torch.relu", "torch.relu", "hypertenet.HyperTeNet.list_gnn_dropout", "hypertenet.HyperTeNet.list_conv2", "hypertenet.HyperTeNet.user_list_item_embeddings", "torch.relu", "torch.relu", "torch.relu", "hypertenet.HyperTeNet.item_gnn_dropout", "hypertenet.HyperTeNet.item_conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hypertenet.HyperTeNet.user_indices.long", "hypertenet.HyperTeNet.user_conv1", "hypertenet.HyperTeNet.list_conv1", "hypertenet.HyperTeNet.item_conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hypertenet.HyperTeNet.get_emb_user_list3", "hypertenet.HyperTeNet.list_indices.long", "hypertenet.HyperTeNet.item_indices.long", "hypertenet.HyperTeNet.hypersagnn_model().reshape", "hypertenet.HyperTeNet.user_dropout", "hypertenet.HyperTeNet.list_dropout", "hypertenet.HyperTeNet.mask.reshape", "user_indices.reshape", "hypertenet.HyperTeNet.user_embeds.reshape", "hypertenet.HyperTeNet.list_embeds.reshape", "hypertenet.HyperTeNet.trans_model().transpose", "hypertenet.HyperTeNet.item_dropout3", "hypertenet.HyperTeNet.item_dropout4", "hypertenet.HyperTeNet.sigmoid", "hypertenet.HyperTeNet.sigmoid", "list_indices.reshape", "hypertenet.HyperTeNet.hypersagnn_model", "user_indices.reshape", "list_indices.reshape", "item_seq.reshape", "hypertenet.HyperTeNet.user_embeds.reshape", "hypertenet.HyperTeNet.list_embeds.reshape", "hypertenet.HyperTeNet.user_embeds.reshape", "hypertenet.HyperTeNet.list_embeds.reshape", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "hypertenet.HyperTeNet.item_seq_embeds.view().repeat().view", "hypertenet.HyperTeNet.list_embeds.view().repeat().view", "hypertenet.HyperTeNet.user_embeds.view().repeat().view", "hypertenet.HyperTeNet.sigmoid", "item_indices.reshape", "hypertenet.HyperTeNet.trans_model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "hypertenet.HyperTeNet.item_seq_embeds.transpose", "hypertenet.HyperTeNet.item_seq_embeds.view().repeat", "hypertenet.HyperTeNet.list_embeds.view().repeat", "hypertenet.HyperTeNet.user_embeds.view().repeat", "hypertenet.HyperTeNet.item_seq_embeds.view", "hypertenet.HyperTeNet.list_embeds.view", "hypertenet.HyperTeNet.user_embeds.view"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.hypertenet.HyperTeNet.get_emb_user_list3"], ["", "def", "forward", "(", "self", ",", "user_indices", ",", "list_indices", ",", "item_indices", "=", "None", ",", "item_seq", "=", "None", ",", "item_seq_pos", "=", "None", ",", "item_seq_neg", "=", "None", ",", "test_item_indices", "=", "None", ",", "param5", "=", "None", ",", "train", "=", "True", ",", "network", "=", "'gnn'", ",", "include_hgnn", "=", "False", ")", ":", "\n", "#def forward(self, user_indices, list_indices, item_seq, item_seq_pos=None, item_seq_neg=None, test_item_indices=None, param5=None, train=True,network='seq'):", "\n", "\n", "# gnn_user ==============================", "\n", "        ", "user_x", "=", "self", ".", "user_list_item_embeddings", "(", "self", ".", "user_indices", ".", "long", "(", ")", ")", "\n", "user_x", "=", "F", ".", "relu", "(", "self", ".", "user_conv1", "(", "user_x", ",", "self", ".", "user_param_indices", ",", "self", ".", "user_param_weights", ")", ")", "\n", "user_x", "=", "self", ".", "user_gnn_dropout", "(", "user_x", ")", "\n", "user_x", "=", "self", ".", "user_conv2", "(", "user_x", ",", "self", ".", "user_param_indices", ",", "self", ".", "user_param_weights", ")", "\n", "\n", "# gnn_list ==============================", "\n", "list_x", "=", "self", ".", "user_list_item_embeddings", "(", "self", ".", "params", ".", "num_user", "+", "self", ".", "list_indices", ".", "long", "(", ")", ")", "\n", "list_x", "=", "F", ".", "relu", "(", "self", ".", "list_conv1", "(", "list_x", ",", "self", ".", "list_param_indices", ",", "self", ".", "list_param_weights", ")", ")", "\n", "list_x", "=", "self", ".", "list_gnn_dropout", "(", "list_x", ")", "\n", "list_x", "=", "self", ".", "list_conv2", "(", "list_x", ",", "self", ".", "list_param_indices", ",", "self", ".", "list_param_weights", ")", "\n", "\n", "# gnn_item ==============================", "\n", "item_x", "=", "self", ".", "user_list_item_embeddings", "(", "self", ".", "params", ".", "num_user", "+", "self", ".", "params", ".", "num_list", "+", "self", ".", "item_indices", ".", "long", "(", ")", ")", "\n", "item_x", "=", "F", ".", "relu", "(", "self", ".", "item_conv1", "(", "item_x", ",", "self", ".", "item_param_indices", ",", "self", ".", "item_param_weights", ")", ")", "\n", "item_x", "=", "self", ".", "item_gnn_dropout", "(", "item_x", ")", "\n", "item_x", "=", "self", ".", "item_conv2", "(", "item_x", ",", "self", ".", "item_param_indices", ",", "self", ".", "item_param_weights", ")", "\n", "\n", "user_list_item_gnn_emb", "=", "torch", ".", "cat", "(", "[", "user_x", ",", "list_x", ",", "item_x", "]", ",", "dim", "=", "0", ")", "\n", "# common part ending ========================================================================", "\n", "\n", "# gnn ===================================", "\n", "if", "network", "==", "'gnn'", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "user_indices", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "\n", "list_indices", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "self", ".", "params", ".", "num_user", ",", "\n", "item_indices", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "self", ".", "params", ".", "num_user", "+", "self", ".", "params", ".", "num_list", "]", ",", "\n", "dim", "=", "1", ")", "\n", "\n", "\n", "self", ".", "edge_probs_gnn", "=", "self", ".", "get_emb_user_list3", "(", "x", ",", "user_list_item_gnn_emb", ")", "\n", "\n", "# hgnn =======================", "\n", "if", "include_hgnn", "==", "True", ":", "\n", "                ", "self", ".", "edge_probs_hgnn", "=", "self", ".", "hypersagnn_model", "(", "x", ",", "user_list_item_gnn_emb", ")", ".", "reshape", "(", "-", "1", ")", "\n", "self", ".", "edge_probs", "=", "(", "self", ".", "edge_probs_hgnn", "+", "self", ".", "edge_probs_gnn", ")", "/", "2", "\n", "", "else", ":", "\n", "                ", "self", ".", "edge_probs", "=", "self", ".", "edge_probs_gnn", "\n", "##self.edge_probs          = self.edge_probs_hgnn", "\n", "##self.edge_probs          = self.edge_probs_gnn", "\n", "", "return", "self", ".", "edge_probs", "\n", "\n", "# seq ===================================", "\n", "", "elif", "network", "==", "'seq'", ":", "\n", "            ", "flag_tran", "=", "True", "\n", "if", "train", "==", "False", ":", "\n", "                ", "user_indices", "=", "user_indices", ".", "reshape", "(", "-", "1", ",", "101", ")", "[", ":", ",", "0", "]", "\n", "list_indices", "=", "list_indices", ".", "reshape", "(", "-", "1", ",", "101", ")", "[", ":", ",", "0", "]", "\n", "item_seq", "=", "item_seq", ".", "reshape", "(", "-", "1", ",", "101", ",", "self", ".", "params", ".", "max_item_seq_length", ")", "[", ":", ",", "0", ",", ":", "]", "##101", "\n", "\n", "", "self", ".", "user_embeds", "=", "user_x", "[", "user_indices", "]", "\n", "self", ".", "list_embeds", "=", "list_x", "[", "list_indices", "]", "\n", "self", ".", "user_embeds", "=", "self", ".", "user_dropout", "(", "self", ".", "user_embeds", ")", "\n", "self", ".", "list_embeds", "=", "self", ".", "list_dropout", "(", "self", ".", "list_embeds", ")", "\n", "self", ".", "mask", "=", "(", "item_seq", "!=", "0", ")", ".", "float", "(", ")", "\n", "\n", "self", ".", "item_seq_embeds", "=", "item_x", "[", "item_seq", "]", "\n", "self", ".", "item_seq_embeds", "+=", "(", "self", ".", "user_embeds", ".", "reshape", "(", "-", "1", ",", "1", ",", "self", ".", "params", ".", "hid_units", "[", "-", "1", "]", ")", "+", "self", ".", "list_embeds", ".", "reshape", "(", "-", "1", ",", "1", ",", "self", ".", "params", ".", "hid_units", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "item_seq_embeds", "+=", "self", ".", "pos_embeddings", ".", "weight", "##check this carefullly", "\n", "self", ".", "item_seq_embeds", "*=", "self", ".", "mask", ".", "reshape", "(", "item_seq", ".", "shape", "[", "0", "]", ",", "item_seq", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "\n", "if", "flag_tran", "==", "True", ":", "\n", "                ", "self", ".", "out_trans", "=", "self", ".", "trans_model", "(", "self", ".", "item_seq_embeds", ".", "transpose", "(", "1", ",", "0", ")", ")", ".", "transpose", "(", "1", ",", "0", ")", "##posemb", "\n", "self", ".", "item_seq_embeds", "=", "self", ".", "out_trans", "\n", "\n", "", "if", "train", "==", "True", ":", "\n", "                ", "self", ".", "item_seq_pos_embeds", "=", "item_x", "[", "item_seq_pos", "]", "\n", "self", ".", "item_seq_neg_embeds", "=", "item_x", "[", "item_seq_neg", "]", "\n", "self", ".", "item_seq_pos_embeds", "=", "self", ".", "item_dropout3", "(", "self", ".", "item_seq_pos_embeds", ")", "\n", "self", ".", "item_seq_neg_embeds", "=", "self", ".", "item_dropout4", "(", "self", ".", "item_seq_neg_embeds", ")", "\n", "self", ".", "is_target", "=", "(", "item_seq_pos", "!=", "0", ")", ".", "float", "(", ")", "\n", "\n", "self", ".", "user_item_seq_pos_embeds", "=", "self", ".", "user_embeds", ".", "reshape", "(", "-", "1", ",", "1", ",", "self", ".", "params", ".", "hid_units", "[", "-", "1", "]", ")", "*", "self", ".", "item_seq_pos_embeds", "\n", "self", ".", "list_item_seq_pos_embeds", "=", "self", ".", "list_embeds", ".", "reshape", "(", "-", "1", ",", "1", ",", "self", ".", "params", ".", "hid_units", "[", "-", "1", "]", ")", "*", "self", ".", "item_seq_pos_embeds", "\n", "self", ".", "item_seq_and_seq_pos_embeds", "=", "self", ".", "item_seq_embeds", "*", "self", ".", "item_seq_pos_embeds", "\n", "\n", "self", ".", "user_item_seq_neg_embeds", "=", "self", ".", "user_embeds", ".", "reshape", "(", "-", "1", ",", "1", ",", "self", ".", "params", ".", "hid_units", "[", "-", "1", "]", ")", "*", "self", ".", "item_seq_neg_embeds", "\n", "self", ".", "list_item_seq_neg_embeds", "=", "self", ".", "list_embeds", ".", "reshape", "(", "-", "1", ",", "1", ",", "self", ".", "params", ".", "hid_units", "[", "-", "1", "]", ")", "*", "self", ".", "item_seq_neg_embeds", "\n", "self", ".", "item_seq_and_seq_neg_embeds", "=", "self", ".", "item_seq_embeds", "*", "self", ".", "item_seq_neg_embeds", "\n", "\n", "self", ".", "pos_logits", "=", "self", ".", "sigmoid", "(", "torch", ".", "sum", "(", "self", ".", "user_item_seq_pos_embeds", "+", "self", ".", "list_item_seq_pos_embeds", "+", "self", ".", "item_seq_and_seq_pos_embeds", ",", "axis", "=", "-", "1", ")", ")", "\n", "self", ".", "neg_logits", "=", "self", ".", "sigmoid", "(", "torch", ".", "sum", "(", "self", ".", "user_item_seq_neg_embeds", "+", "self", ".", "list_item_seq_neg_embeds", "+", "self", ".", "item_seq_and_seq_neg_embeds", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "return", "self", ".", "pos_logits", ",", "self", ".", "neg_logits", ",", "self", ".", "is_target", "\n", "\n", "", "elif", "train", "==", "False", ":", "\n", "                ", "self", ".", "test_item_embeds", "=", "item_x", "[", "test_item_indices", "]", "\n", "self", ".", "item_seq_embeds", "=", "self", ".", "item_seq_embeds", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "params", ".", "max_item_seq_length", ",", "self", ".", "params", ".", "hid_units", "[", "-", "1", "]", ")", ".", "repeat", "(", "1", ",", "101", ",", "1", ",", "1", ")", ".", "view", "(", "-", "1", ",", "self", ".", "params", ".", "max_item_seq_length", ",", "self", ".", "params", ".", "hid_units", "[", "-", "1", "]", ")", "\n", "self", ".", "list_embeds", "=", "self", ".", "list_embeds", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "params", ".", "hid_units", "[", "-", "1", "]", ")", ".", "repeat", "(", "1", ",", "101", ",", "1", ")", ".", "view", "(", "-", "1", ",", "self", ".", "params", ".", "hid_units", "[", "-", "1", "]", ")", "\n", "self", ".", "user_embeds", "=", "self", ".", "user_embeds", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "params", ".", "hid_units", "[", "-", "1", "]", ")", ".", "repeat", "(", "1", ",", "101", ",", "1", ")", ".", "view", "(", "-", "1", ",", "self", ".", "params", ".", "hid_units", "[", "-", "1", "]", ")", "\n", "\n", "self", ".", "pos_logits", "=", "self", ".", "sigmoid", "(", "torch", ".", "sum", "(", "(", "self", ".", "item_seq_embeds", "[", ":", ",", "-", "1", ",", ":", "]", "+", "self", ".", "list_embeds", "+", "self", ".", "user_embeds", ")", "*", "self", ".", "test_item_embeds", ",", "axis", "=", "-", "1", ")", ")", "\n", "return", "self", ".", "pos_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.my_gcn_conv.GCNConv.__init__": [[104, 129], ["torch_geometric.nn.conv.MessagePassing.__init__", "torch.nn.Parameter", "my_gcn_conv.GCNConv.reset_parameters", "torch.Tensor", "torch.nn.Parameter", "my_gcn_conv.GCNConv.register_parameter", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.embed_dataset.EmbedDataset.__init__", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.hypersagnn_utils.TiedAutoEncoder.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "out_channels", ":", "int", ",", "\n", "improved", ":", "bool", "=", "False", ",", "cached", ":", "bool", "=", "False", ",", "\n", "add_self_loops", ":", "bool", "=", "True", ",", "normalize", ":", "bool", "=", "True", ",", "\n", "bias", ":", "bool", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "GCNConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "improved", "=", "improved", "\n", "self", ".", "cached", "=", "cached", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "add_self_loops", "=", "add_self_loops", "\n", "\n", "self", ".", "_cached_edge_index", "=", "None", "\n", "self", ".", "_cached_adj_t", "=", "None", "\n", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.my_gcn_conv.GCNConv.reset_parameters": [[130, 135], ["utils.geom_utils.glorot", "utils.geom_utils.zeros"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.glorot", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "glorot", "(", "self", ".", "weight", ")", "\n", "zeros", "(", "self", ".", "bias", ")", "\n", "self", ".", "_cached_edge_index", "=", "None", "\n", "self", ".", "_cached_adj_t", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.my_gcn_conv.GCNConv.forward": [[138, 175], ["torch.matmul", "my_gcn_conv.GCNConv.propagate", "isinstance", "isinstance", "my_gcn_conv.gcn_norm", "torch.matmul.size", "my_gcn_conv.gcn_norm", "torch.matmul.size"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.my_gcn_conv.gcn_norm", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.my_gcn_conv.gcn_norm"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ",", "edge_index", ",", "\n", "edge_weight", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "if", "isinstance", "(", "edge_index", ",", "Tensor", ")", ":", "\n", "                ", "cache", "=", "self", ".", "_cached_edge_index", "\n", "if", "cache", "is", "None", ":", "\n", "                    ", "edge_index", ",", "edge_weight", "=", "gcn_norm", "(", "# yapf: disable", "\n", "edge_index", ",", "edge_weight", ",", "x", ".", "size", "(", "self", ".", "node_dim", ")", ",", "\n", "self", ".", "improved", ",", "self", ".", "add_self_loops", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "if", "self", ".", "cached", ":", "\n", "                        ", "self", ".", "_cached_edge_index", "=", "(", "edge_index", ",", "edge_weight", ")", "\n", "", "", "else", ":", "\n", "                    ", "edge_index", ",", "edge_weight", "=", "cache", "[", "0", "]", ",", "cache", "[", "1", "]", "\n", "\n", "", "", "elif", "isinstance", "(", "edge_index", ",", "SparseTensor", ")", ":", "\n", "                ", "cache", "=", "self", ".", "_cached_adj_t", "\n", "if", "cache", "is", "None", ":", "\n", "                    ", "edge_index", "=", "gcn_norm", "(", "# yapf: disable", "\n", "edge_index", ",", "edge_weight", ",", "x", ".", "size", "(", "self", ".", "node_dim", ")", ",", "\n", "self", ".", "improved", ",", "self", ".", "add_self_loops", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "if", "self", ".", "cached", ":", "\n", "                        ", "self", ".", "_cached_adj_t", "=", "edge_index", "\n", "", "", "else", ":", "\n", "                    ", "edge_index", "=", "cache", "\n", "\n", "", "", "", "x", "=", "torch", ".", "matmul", "(", "x", ",", "self", ".", "weight", ")", "\n", "\n", "# propagate_type: (x: Tensor, edge_weight: OptTensor)", "\n", "out", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "edge_weight", "=", "edge_weight", ",", "\n", "size", "=", "None", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "out", "+=", "self", ".", "bias", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.my_gcn_conv.GCNConv.message": [[176, 178], ["edge_weight.view"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ":", "Tensor", ",", "edge_weight", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "edge_weight", ".", "view", "(", "-", "1", ",", "1", ")", "*", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.my_gcn_conv.GCNConv.message_and_aggregate": [[179, 181], ["torch_sparse.matmul"], "methods", ["None"], ["", "def", "message_and_aggregate", "(", "self", ",", "adj_t", ":", "SparseTensor", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "matmul", "(", "adj_t", ",", "x", ",", "reduce", "=", "self", ".", "aggr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.my_gcn_conv.GCNConv.__repr__": [[182, 185], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.models.my_gcn_conv.gcn_norm": [[31, 67], ["isinstance", "torch_sparse.sum", "torch_scatter.scatter_add.pow_", "deg.pow_.masked_fill_", "torch_sparse.mul_", "torch_sparse.mul_", "torch_geometric.utils.num_nodes.maybe_num_nodes", "torch_scatter.scatter_add", "torch_scatter.scatter_add.pow_", "deg.pow_.masked_fill_", "torch_sparse.fill_diag.has_value", "torch_sparse.fill_diag.fill_value", "torch_sparse.fill_diag", "deg.pow_.view", "deg.pow_.view", "torch.ones", "my_gcn_conv..", "float", "float", "edge_index.size"], "function", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones"], ["", "def", "gcn_norm", "(", "edge_index", ",", "edge_weight", "=", "None", ",", "num_nodes", "=", "None", ",", "improved", "=", "False", ",", "\n", "add_self_loops", "=", "True", ",", "dtype", "=", "None", ")", ":", "\n", "\n", "    ", "fill_value", "=", "2.", "if", "improved", "else", "1.", "\n", "\n", "if", "isinstance", "(", "edge_index", ",", "SparseTensor", ")", ":", "\n", "        ", "adj_t", "=", "edge_index", "\n", "if", "not", "adj_t", ".", "has_value", "(", ")", ":", "\n", "            ", "adj_t", "=", "adj_t", ".", "fill_value", "(", "1.", ",", "dtype", "=", "dtype", ")", "\n", "", "if", "add_self_loops", ":", "\n", "            ", "adj_t", "=", "fill_diag", "(", "adj_t", ",", "fill_value", ")", "\n", "", "deg", "=", "sum", "(", "adj_t", ",", "dim", "=", "1", ")", "\n", "deg_inv_sqrt", "=", "deg", ".", "pow_", "(", "-", "0.5", ")", "\n", "deg_inv_sqrt", ".", "masked_fill_", "(", "deg_inv_sqrt", "==", "float", "(", "'inf'", ")", ",", "0.", ")", "\n", "adj_t", "=", "mul_", "(", "adj_t", ",", "deg_inv_sqrt", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "adj_t", "=", "mul_", "(", "adj_t", ",", "deg_inv_sqrt", ".", "view", "(", "1", ",", "-", "1", ")", ")", "\n", "return", "adj_t", "\n", "\n", "", "else", ":", "\n", "        ", "num_nodes", "=", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", ")", "\n", "\n", "if", "edge_weight", "is", "None", ":", "\n", "            ", "edge_weight", "=", "torch", ".", "ones", "(", "(", "edge_index", ".", "size", "(", "1", ")", ",", ")", ",", "dtype", "=", "dtype", ",", "\n", "device", "=", "edge_index", ".", "device", ")", "\n", "\n", "", "if", "add_self_loops", ":", "\n", "            ", "edge_index", ",", "tmp_edge_weight", "=", "add_remaining_self_loops", "(", "\n", "edge_index", ",", "edge_weight", ",", "fill_value", ",", "num_nodes", ")", "\n", "assert", "tmp_edge_weight", "is", "not", "None", "\n", "edge_weight", "=", "tmp_edge_weight", "\n", "\n", "", "row", ",", "col", "=", "edge_index", "[", "0", "]", ",", "edge_index", "[", "1", "]", "\n", "deg", "=", "scatter_add", "(", "edge_weight", ",", "col", ",", "dim", "=", "0", ",", "dim_size", "=", "num_nodes", ")", "\n", "deg_inv_sqrt", "=", "deg", ".", "pow_", "(", "-", "0.5", ")", "\n", "deg_inv_sqrt", ".", "masked_fill_", "(", "deg_inv_sqrt", "==", "float", "(", "'inf'", ")", ",", "0", ")", "\n", "return", "edge_index", ",", "deg_inv_sqrt", "[", "row", "]", "*", "edge_weight", "*", "deg_inv_sqrt", "[", "col", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.positionwise_feed_forward.PositionwiseFeedForward.__init__": [[16, 40], ["torch.Module.__init__", "range", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "positionwise_feed_forward.PositionwiseFeedForward.w_stack.append", "positionwise_feed_forward.PositionwiseFeedForward.add_module", "torch.Dropout", "torch.Dropout", "torch.Dropout", "len", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.embed_dataset.EmbedDataset.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "dims", ",", "\n", "dropout", "=", "None", ",", "\n", "reshape", "=", "False", ",", "\n", "use_bias", "=", "True", ",", "\n", "residual", "=", "False", ",", "\n", "layer_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "PositionwiseFeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_stack", "=", "[", "]", "\n", "self", ".", "dims", "=", "dims", "\n", "for", "i", "in", "range", "(", "len", "(", "dims", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "w_stack", ".", "append", "(", "nn", ".", "Conv1d", "(", "dims", "[", "i", "]", ",", "dims", "[", "i", "+", "1", "]", ",", "1", ",", "use_bias", ")", ")", "\n", "self", ".", "add_module", "(", "\"PWF_Conv%d\"", "%", "(", "i", ")", ",", "self", ".", "w_stack", "[", "-", "1", "]", ")", "\n", "", "self", ".", "reshape", "=", "reshape", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "dims", "[", "-", "1", "]", ")", "\n", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "None", "\n", "\n", "", "self", ".", "residual", "=", "residual", "\n", "self", ".", "layer_norm_flag", "=", "layer_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.positionwise_feed_forward.PositionwiseFeedForward.forward": [[41, 66], ["x.transpose", "range", "positionwise_feed_forward.PositionwiseFeedForward.transpose", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "positionwise_feed_forward.PositionwiseFeedForward.view", "len", "positionwise_feed_forward.PositionwiseFeedForward.dropout", "positionwise_feed_forward.PositionwiseFeedForward.layer_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "w_stack", ")", "-", "1", ")", ":", "\n", "            ", "output", "=", "self", ".", "w_stack", "[", "i", "]", "(", "output", ")", "\n", "output", "=", "torch", ".", "tanh", "(", "output", ")", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "                ", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "\n", "", "", "output", "=", "self", ".", "w_stack", "[", "-", "1", "]", "(", "output", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "if", "self", ".", "reshape", ":", "\n", "            ", "output", "=", "output", ".", "view", "(", "output", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "dims", "[", "0", "]", "==", "self", ".", "dims", "[", "-", "1", "]", ":", "\n", "# residual", "\n", "            ", "if", "self", ".", "residual", ":", "\n", "                ", "output", "+=", "x", "\n", "\n", "", "if", "self", ".", "layer_norm_flag", ":", "\n", "                ", "output", "=", "self", ".", "layer_norm", "(", "output", ")", "\n", "\n", "", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.encoder_layer.EncoderLayer.__init__": [[18, 45], ["torch.Module.__init__", "models.model_utils.multi_head_attention.MultiHeadAttention", "models.model_utils.positionwise_feed_forward.PositionwiseFeedForward", "models.model_utils.positionwise_feed_forward.PositionwiseFeedForward"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.embed_dataset.EmbedDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_head", ",", "\n", "d_model", ",", "\n", "d_k", ",", "\n", "d_v", ",", "\n", "dropout_mul", ",", "\n", "dropout_pff", ",", "\n", "diag_mask", ",", "\n", "bottle_neck", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "\n", "self", ".", "mul_head_attn", "=", "MultiHeadAttention", "(", "\n", "n_head", ",", "\n", "d_model", ",", "\n", "d_k", ",", "\n", "d_v", ",", "\n", "dropout", "=", "dropout_mul", ",", "\n", "diag_mask", "=", "diag_mask", ",", "\n", "input_dim", "=", "bottle_neck", ")", "\n", "self", ".", "pff_n1", "=", "PositionwiseFeedForward", "(", "\n", "[", "d_model", ",", "d_model", ",", "d_model", "]", ",", "dropout", "=", "dropout_pff", ",", "residual", "=", "True", ",", "layer_norm", "=", "True", ")", "\n", "self", ".", "pff_n2", "=", "PositionwiseFeedForward", "(", "\n", "[", "bottle_neck", ",", "d_model", ",", "d_model", "]", ",", "dropout", "=", "dropout_pff", ",", "residual", "=", "False", ",", "layer_norm", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.encoder_layer.EncoderLayer.forward": [[48, 55], ["encoder_layer.EncoderLayer.mul_head_attn", "encoder_layer.EncoderLayer.pff_n1", "encoder_layer.EncoderLayer.pff_n2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dynamic", ",", "static", ",", "slf_attn_mask", ",", "non_pad_mask", ")", ":", "\n", "        ", "dynamic", ",", "static1", ",", "attn", "=", "self", ".", "mul_head_attn", "(", "\n", "dynamic", ",", "dynamic", ",", "static", ",", "slf_attn_mask", ")", "\n", "dynamic", "=", "self", ".", "pff_n1", "(", "dynamic", "*", "non_pad_mask", ")", "*", "non_pad_mask", "\n", "static1", "=", "self", ".", "pff_n2", "(", "static", "*", "non_pad_mask", ")", "*", "non_pad_mask", "\n", "\n", "return", "dynamic", ",", "static1", ",", "attn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.multiple_embedding.MultipleEmbedding.__init__": [[10, 45], ["torch.Module.__init__", "print", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "print", "enumerate", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "enumerate", "torch.Dropout", "torch.Dropout", "torch.Dropout", "multiple_embedding.MultipleEmbedding.input_size.append", "TiedAutoEncoder().to", "torch.LayerNorm().to", "torch.LayerNorm().to", "torch.LayerNorm().to", "multiple_embedding.MultipleEmbedding.add_module", "multiple_embedding.MultipleEmbedding.add_module", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "multiple_embedding.MultipleEmbedding.embeddings.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "SparseEmbedding", "print", "multiple_embedding.MultipleEmbedding.add_module", "multiple_embedding.MultipleEmbedding.embeddings.append", "TiedAutoEncoder", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "list", "w"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.embed_dataset.EmbedDataset.__init__", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "embedding_weights", ",", "\n", "dim", ",", "\n", "sparse", "=", "True", ",", "\n", "num_list", "=", "None", ",", "\n", "node_type_mapping", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "print", "(", "dim", ")", "\n", "self", ".", "num_list", "=", "torch", ".", "tensor", "(", "[", "0", "]", "+", "list", "(", "num_list", ")", ")", ".", "to", "(", "device", ")", "\n", "print", "(", "self", ".", "num_list", ")", "\n", "self", ".", "node_type_mapping", "=", "node_type_mapping", "\n", "self", ".", "dim", "=", "dim", "\n", "\n", "self", ".", "embeddings", "=", "[", "]", "\n", "for", "i", ",", "w", "in", "enumerate", "(", "embedding_weights", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "embeddings", ".", "append", "(", "SparseEmbedding", "(", "w", ",", "sparse", ")", ")", "\n", "", "except", "BaseException", "as", "e", ":", "\n", "                ", "print", "(", "\"Conv Embedding Mode\"", ")", "\n", "self", ".", "add_module", "(", "\"ConvEmbedding1\"", ",", "w", ")", "\n", "self", ".", "embeddings", ".", "append", "(", "w", ")", "\n", "\n", "", "", "test", "=", "torch", ".", "zeros", "(", "1", ",", "device", "=", "device", ")", ".", "long", "(", ")", "\n", "self", ".", "input_size", "=", "[", "]", "\n", "for", "w", "in", "self", ".", "embeddings", ":", "\n", "            ", "self", ".", "input_size", ".", "append", "(", "w", "(", "test", ")", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "", "self", ".", "wstack", "=", "[", "TiedAutoEncoder", "(", "self", ".", "input_size", "[", "i", "]", ",", "self", ".", "dim", ")", ".", "to", "(", "device", ")", "for", "i", ",", "w", "in", "enumerate", "(", "self", ".", "embeddings", ")", "]", "\n", "self", ".", "norm_stack", "=", "[", "nn", ".", "LayerNorm", "(", "self", ".", "dim", ")", ".", "to", "(", "device", ")", "for", "w", "in", "self", ".", "embeddings", "]", "\n", "for", "i", ",", "w", "in", "enumerate", "(", "self", ".", "wstack", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "\"Embedding_Linear%d\"", "%", "(", "i", ")", ",", "w", ")", "\n", "self", ".", "add_module", "(", "\"Embedding_norm%d\"", "%", "(", "i", ")", ",", "self", ".", "norm_stack", "[", "i", "]", ")", "\n", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.multiple_embedding.MultipleEmbedding.forward": [[46, 62], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "range", "multiple_embedding.MultipleEmbedding.dropout", "multiple_embedding.sparse_autoencoder_error", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.multiple_embedding.sparse_autoencoder_error", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "final", "=", "torch", ".", "zeros", "(", "(", "len", "(", "x", ")", ",", "self", ".", "dim", ")", ")", ".", "to", "(", "device", ")", "\n", "recon_loss", "=", "torch", ".", "Tensor", "(", "[", "0.0", "]", ")", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "num_list", ")", "-", "1", ")", ":", "\n", "            ", "select", "=", "(", "x", ">=", "(", "self", ".", "num_list", "[", "i", "]", "+", "1", ")", ")", "&", "(", "x", "<", "(", "self", ".", "num_list", "[", "i", "+", "1", "]", "+", "1", ")", ")", "\n", "if", "torch", ".", "sum", "(", "select", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "adj", "=", "self", ".", "embeddings", "[", "i", "]", "(", "x", "[", "select", "]", "-", "self", ".", "num_list", "[", "i", "]", "-", "1", ")", "\n", "output", "=", "self", ".", "dropout", "(", "adj", ")", "\n", "output", ",", "recon", "=", "self", ".", "wstack", "[", "i", "]", "(", "output", ")", "\n", "output", "=", "self", ".", "norm_stack", "[", "i", "]", "(", "output", ")", "\n", "final", "[", "select", "]", "=", "output", "\n", "recon_loss", "+=", "sparse_autoencoder_error", "(", "recon", ",", "adj", ")", "\n", "\n", "", "return", "final", ",", "recon_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.multiple_embedding.sparse_autoencoder_error": [[63, 65], ["torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "y_true.ne().type", "y_true.ne().type", "y_true.ne", "y_true.ne"], "function", ["None"], ["", "", "def", "sparse_autoencoder_error", "(", "y_pred", ",", "y_true", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "(", "y_true", ".", "ne", "(", "0", ")", ".", "type", "(", "torch", ".", "float", ")", "*", "(", "y_true", "-", "y_pred", ")", ")", "**", "2", ",", "dim", "=", "-", "1", ")", "/", "torch", ".", "sum", "(", "y_true", ".", "ne", "(", "0", ")", ".", "type", "(", "torch", ".", "float", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.scaled_dot_product_attention.ScaledDotProductAttention.__init__": [[12, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.embed_dataset.EmbedDataset.__init__"], ["def", "__init__", "(", "self", ",", "temperature", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.scaled_dot_product_attention.ScaledDotProductAttention.masked_softmax": [[16, 39], ["torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "mask.unsqueeze.unsqueeze.float", "mask.unsqueeze.unsqueeze.dim", "vector.dim", "mask.unsqueeze.unsqueeze.unsqueeze", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "vector.masked_fill", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax.sum", "torch.nn.functional.softmax.sum", "torch.nn.functional.softmax.sum"], "methods", ["None"], ["", "def", "masked_softmax", "(", "self", ",", "vector", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "torch", ".", "Tensor", ",", "\n", "dim", ":", "int", "=", "-", "1", ",", "\n", "memory_efficient", ":", "bool", "=", "False", ",", "\n", "mask_fill_value", ":", "float", "=", "-", "1e32", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "if", "mask", "is", "None", ":", "\n", "            ", "result", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "vector", ",", "dim", "=", "dim", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "mask", ".", "float", "(", ")", "\n", "while", "mask", ".", "dim", "(", ")", "<", "vector", ".", "dim", "(", ")", ":", "\n", "                ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "if", "not", "memory_efficient", ":", "\n", "# To limit numerical errors from large vector elements outside", "\n", "# the mask, we zero these out.", "\n", "                ", "result", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "vector", "*", "mask", ",", "dim", "=", "dim", ")", "\n", "result", "=", "result", "*", "mask", "\n", "result", "=", "result", "/", "(", "result", ".", "sum", "(", "dim", "=", "dim", ",", "keepdim", "=", "True", ")", "+", "1e-13", ")", "\n", "", "else", ":", "\n", "                ", "masked_vector", "=", "vector", ".", "masked_fill", "(", "\n", "(", "1", "-", "mask", ")", ".", "bool", "(", ")", ",", "mask_fill_value", ")", "##mine: .byte() to bool()", "\n", "result", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "masked_vector", ",", "dim", "=", "dim", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.scaled_dot_product_attention.ScaledDotProductAttention.forward": [[40, 54], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "scaled_dot_product_attention.ScaledDotProductAttention.masked_softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "k.transpose", "attn.masked_fill.masked_fill.masked_fill", "float"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.scaled_dot_product_attention.ScaledDotProductAttention.masked_softmax"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "diag_mask", ",", "mask", "=", "None", ")", ":", "\n", "        ", "attn", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "attn", "=", "attn", "/", "self", ".", "temperature", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "attn", "=", "attn", ".", "masked_fill", "(", "mask", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "", "attn", "=", "self", ".", "masked_softmax", "(", "\n", "attn", ",", "diag_mask", ",", "dim", "=", "-", "1", ",", "memory_efficient", "=", "True", ")", "\n", "\n", "\n", "output", "=", "torch", ".", "bmm", "(", "attn", ",", "v", ")", "\n", "\n", "return", "output", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.multi_head_attention.MultiHeadAttention.__init__": [[17, 61], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "models.model_utils.scaled_dot_product_attention.ScaledDotProductAttention", "models.model_utils.feed_forward.FeedForward", "models.model_utils.feed_forward.FeedForward", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.embed_dataset.EmbedDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_head", ",", "\n", "d_model", ",", "\n", "d_k", ",", "\n", "d_v", ",", "\n", "dropout", ",", "\n", "diag_mask", ",", "\n", "input_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "\n", "#pdb.set_trace()", "\n", "self", ".", "w_qs", "=", "nn", ".", "Linear", "(", "input_dim", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_ks", "=", "nn", ".", "Linear", "(", "input_dim", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_vs", "=", "nn", ".", "Linear", "(", "input_dim", ",", "n_head", "*", "d_v", ",", "bias", "=", "False", ")", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_qs", ".", "weight", ",", "mean", "=", "0", ",", "\n", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_ks", ".", "weight", ",", "mean", "=", "0", ",", "\n", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_vs", ".", "weight", ",", "mean", "=", "0", ",", "\n", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_v", ")", ")", ")", "\n", "\n", "self", ".", "attention", "=", "ScaledDotProductAttention", "(", "\n", "temperature", "=", "np", ".", "power", "(", "d_k", ",", "0.5", ")", ")", "\n", "\n", "self", ".", "fc1", "=", "FeedForward", "(", "[", "n_head", "*", "d_v", ",", "d_model", "]", ",", "use_bias", "=", "False", ")", "\n", "self", ".", "fc2", "=", "FeedForward", "(", "[", "n_head", "*", "d_v", ",", "d_model", "]", ",", "use_bias", "=", "False", ")", "\n", "\n", "self", ".", "layer_norm1", "=", "nn", ".", "LayerNorm", "(", "input_dim", ")", "\n", "self", ".", "layer_norm2", "=", "nn", ".", "LayerNorm", "(", "input_dim", ")", "\n", "self", ".", "layer_norm3", "=", "nn", ".", "LayerNorm", "(", "input_dim", ")", "\n", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "dropout", "\n", "\n", "", "self", ".", "diag_mask_flag", "=", "diag_mask", "\n", "self", ".", "diag_mask", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.multi_head_attention.MultiHeadAttention.pass_": [[62, 64], ["None"], "methods", ["None"], ["", "def", "pass_", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.multi_head_attention.MultiHeadAttention.forward": [[65, 131], ["multi_head_attention.MultiHeadAttention.layer_norm1", "multi_head_attention.MultiHeadAttention.layer_norm2", "multi_head_attention.MultiHeadAttention.layer_norm3", "multi_head_attention.MultiHeadAttention.w_qs().view", "multi_head_attention.MultiHeadAttention.w_ks().view", "multi_head_attention.MultiHeadAttention.w_vs().view", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "v.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "multi_head_attention.MultiHeadAttention.attention", "dynamic.permute().contiguous().view.permute().contiguous().view.view", "dynamic.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "v.permute().contiguous().view.permute().contiguous().view.view", "static.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "multi_head_attention.MultiHeadAttention.diag_mask.repeat", "mask.repeat.repeat.repeat", "multi_head_attention.MultiHeadAttention.dropout", "multi_head_attention.MultiHeadAttention.fc1", "multi_head_attention.MultiHeadAttention.dropout", "multi_head_attention.MultiHeadAttention.fc2", "multi_head_attention.MultiHeadAttention.w_qs", "multi_head_attention.MultiHeadAttention.w_ks", "multi_head_attention.MultiHeadAttention.w_vs", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "v.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "multi_head_attention.MultiHeadAttention.diag_mask.repeat", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "dynamic.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "static.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "multi_head_attention.MultiHeadAttention.fc1", "multi_head_attention.MultiHeadAttention.fc2", "len", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "q.permute().contiguous().view.permute().contiguous().view.permute", "k.permute().contiguous().view.permute().contiguous().view.permute", "v.permute().contiguous().view.permute().contiguous().view.permute", "dynamic.permute().contiguous().view.permute().contiguous().view.permute", "static.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.ones"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "diag_mask", ",", "mask", "=", "None", ")", ":", "\n", "        ", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "\n", "residual_dynamic", "=", "q", "\n", "residual_static", "=", "v", "\n", "\n", "#pdb.set_trace() ", "\n", "q", "=", "self", ".", "layer_norm1", "(", "q", ")", "\n", "k", "=", "self", ".", "layer_norm2", "(", "k", ")", "\n", "v", "=", "self", ".", "layer_norm3", "(", "v", ")", "\n", "\n", "sz_b", ",", "len_q", ",", "_", "=", "q", ".", "shape", "\n", "sz_b", ",", "len_k", ",", "_", "=", "k", ".", "shape", "\n", "sz_b", ",", "len_v", ",", "_", "=", "v", ".", "shape", "\n", "\n", "q", "=", "self", ".", "w_qs", "(", "q", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "n_head", ",", "d_k", ")", "\n", "k", "=", "self", ".", "w_ks", "(", "k", ")", ".", "view", "(", "sz_b", ",", "len_k", ",", "n_head", ",", "d_k", ")", "\n", "v", "=", "self", ".", "w_vs", "(", "v", ")", ".", "view", "(", "sz_b", ",", "len_v", ",", "n_head", ",", "d_v", ")", "\n", "\n", "q", "=", "q", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", "\n", ")", ".", "view", "(", "-", "1", ",", "len_q", ",", "d_k", ")", "# (n*b) x lq x dk", "\n", "k", "=", "k", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", "\n", ")", ".", "view", "(", "-", "1", ",", "len_k", ",", "d_k", ")", "# (n*b) x lk x dk", "\n", "v", "=", "v", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", "\n", ")", ".", "view", "(", "-", "1", ",", "len_v", ",", "d_v", ")", "# (n*b) x lv x dv", "\n", "\n", "n", "=", "sz_b", "*", "n_head", "\n", "\n", "if", "self", ".", "diag_mask", "is", "not", "None", ":", "\n", "            ", "if", "(", "len", "(", "self", ".", "diag_mask", ")", "<=", "n", ")", "or", "(", "\n", "self", ".", "diag_mask", ".", "shape", "[", "1", "]", "!=", "len_v", ")", ":", "\n", "                ", "self", ".", "diag_mask", "=", "torch", ".", "ones", "(", "(", "len_v", ",", "len_v", ")", ",", "device", "=", "device", ")", "\n", "if", "self", ".", "diag_mask_flag", "==", "'True'", ":", "\n", "                    ", "self", ".", "diag_mask", "-=", "torch", ".", "eye", "(", "len_v", ",", "len_v", ",", "device", "=", "device", ")", "\n", "", "self", ".", "diag_mask", "=", "self", ".", "diag_mask", ".", "repeat", "(", "n", ",", "1", ",", "1", ")", "\n", "diag_mask", "=", "self", ".", "diag_mask", "\n", "", "else", ":", "\n", "                ", "diag_mask", "=", "self", ".", "diag_mask", "[", ":", "n", "]", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "diag_mask", "=", "(", "torch", ".", "ones", "(", "(", "len_v", ",", "len_v", ")", ",", "device", "=", "device", ")", ")", "\n", "if", "self", ".", "diag_mask_flag", "==", "'True'", ":", "\n", "                ", "self", ".", "diag_mask", "-=", "torch", ".", "eye", "(", "len_v", ",", "len_v", ",", "device", "=", "device", ")", "\n", "", "self", ".", "diag_mask", "=", "self", ".", "diag_mask", ".", "repeat", "(", "n", ",", "1", ",", "1", ")", "\n", "diag_mask", "=", "self", ".", "diag_mask", "\n", "#pdb.set_trace()", "\n", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", ".", "repeat", "(", "n_head", ",", "1", ",", "1", ")", "# (n*b) x .. x ..", "\n", "\n", "", "dynamic", ",", "attn", "=", "self", ".", "attention", "(", "q", ",", "k", ",", "v", ",", "diag_mask", ",", "mask", "=", "mask", ")", "\n", "\n", "dynamic", "=", "dynamic", ".", "view", "(", "n_head", ",", "sz_b", ",", "len_q", ",", "d_v", ")", "\n", "dynamic", "=", "dynamic", ".", "permute", "(", "\n", "1", ",", "2", ",", "0", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "sz_b", ",", "len_q", ",", "-", "1", ")", "# b x lq x (n*dv)", "\n", "static", "=", "v", ".", "view", "(", "n_head", ",", "sz_b", ",", "len_q", ",", "d_v", ")", "\n", "static", "=", "static", ".", "permute", "(", "\n", "1", ",", "2", ",", "0", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "sz_b", ",", "len_q", ",", "-", "1", ")", "# b x lq x (n*dv)", "\n", "\n", "dynamic", "=", "self", ".", "dropout", "(", "self", ".", "fc1", "(", "dynamic", ")", ")", "if", "self", ".", "dropout", "is", "not", "None", "else", "self", ".", "fc1", "(", "dynamic", ")", "\n", "static", "=", "self", ".", "dropout", "(", "self", ".", "fc2", "(", "static", ")", ")", "if", "self", ".", "dropout", "is", "not", "None", "else", "self", ".", "fc2", "(", "static", ")", "\n", "\n", "\n", "return", "dynamic", ",", "static", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.hypersagnn_utils.Wrap_Embedding.__init__": [[10, 12], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.embed_dataset.EmbedDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.hypersagnn_utils.Wrap_Embedding.forward": [[13, 15], ["super().forward", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.feed_forward.FeedForward.forward"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "forward", "(", "*", "input", ")", ",", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.hypersagnn_utils.SparseEmbedding.__init__": [[20, 38], ["torch.Module.__init__", "print", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "print", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.asarray", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "embedding_weight.todense", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.embed_dataset.EmbedDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding_weight", ",", "sparse", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "print", "(", "embedding_weight", ".", "shape", ")", "\n", "self", ".", "sparse", "=", "sparse", "\n", "if", "self", ".", "sparse", ":", "\n", "            ", "self", ".", "embedding", "=", "embedding_weight", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "embedding", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "asarray", "(", "embedding_weight", ".", "todense", "(", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "", "except", "BaseException", ":", "\n", "                    ", "self", ".", "embedding", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "asarray", "(", "embedding_weight", ")", ")", ".", "to", "(", "device", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "\"Sparse Embedding Error\"", ",", "e", ")", "\n", "self", ".", "sparse", "=", "True", "\n", "self", ".", "embedding", "=", "embedding_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.hypersagnn_utils.SparseEmbedding.forward": [[39, 49], ["x.reshape.reshape.cpu().numpy", "x.reshape.reshape.reshape", "numpy.asarray", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "hypersagnn_utils.SparseEmbedding.embedding[].todense", "x.reshape.reshape.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "if", "self", ".", "sparse", ":", "\n", "            ", "x", "=", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "x", "=", "x", ".", "reshape", "(", "(", "-", "1", ")", ")", "\n", "temp", "=", "np", ".", "asarray", "(", "(", "self", ".", "embedding", "[", "x", ",", ":", "]", ")", ".", "todense", "(", ")", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "temp", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "embedding", "[", "x", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.hypersagnn_utils.TiedAutoEncoder.__init__": [[51, 62], ["torch.Module.__init__", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "hypersagnn_utils.TiedAutoEncoder.register_parameter", "hypersagnn_utils.TiedAutoEncoder.register_parameter", "hypersagnn_utils.TiedAutoEncoder.register_parameter", "hypersagnn_utils.TiedAutoEncoder.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.embed_dataset.EmbedDataset.__init__", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.hypersagnn_utils.TiedAutoEncoder.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "out", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "parameter", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out", ",", "inp", ")", ")", "\n", "self", ".", "bias1", "=", "nn", ".", "parameter", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out", ")", ")", "\n", "self", ".", "bias2", "=", "nn", ".", "parameter", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "inp", ")", ")", "\n", "\n", "self", ".", "register_parameter", "(", "'tied weight'", ",", "self", ".", "weight", ")", "\n", "self", ".", "register_parameter", "(", "'tied bias1'", ",", "self", ".", "bias1", ")", "\n", "self", ".", "register_parameter", "(", "'tied bias2'", ",", "self", ".", "bias2", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.hypersagnn_utils.TiedAutoEncoder.reset_parameters": [[65, 76], ["torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "if", "self", ".", "bias1", "is", "not", "None", ":", "\n", "            ", "fan_in", ",", "_", "=", "torch", ".", "nn", ".", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "weight", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "torch", ".", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "bias1", ",", "-", "bound", ",", "bound", ")", "\n", "\n", "", "if", "self", ".", "bias2", "is", "not", "None", ":", "\n", "            ", "fan_in", ",", "fan_out", "=", "torch", ".", "nn", ".", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "weight", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_out", ")", "\n", "torch", ".", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "bias2", ",", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.hypersagnn_utils.TiedAutoEncoder.forward": [[77, 82], ["torch.linear", "torch.linear", "torch.linear", "torch.tanh", "torch.tanh", "torch.tanh", "torch.linear", "torch.linear", "torch.linear", "hypersagnn_utils.TiedAutoEncoder.weight.t"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "encoded_feats", "=", "F", ".", "linear", "(", "input", ",", "self", ".", "weight", ",", "self", ".", "bias1", ")", "\n", "encoded_feats", "=", "F", ".", "tanh", "(", "encoded_feats", ")", "\n", "reconstructed_output", "=", "F", ".", "linear", "(", "encoded_feats", ",", "self", ".", "weight", ".", "t", "(", ")", ",", "self", ".", "bias2", ")", "\n", "return", "encoded_feats", ",", "reconstructed_output", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.hypersagnn_utils.Word2vec_Skipgram.__init__": [[85, 108], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.embed_dataset.EmbedDataset.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "dict_size", ",", "\n", "embedding_dim", ",", "\n", "window_size", ",", "\n", "u_embedding", "=", "None", ",", "\n", "sparse", "=", "False", ")", ":", "\n", "        ", "super", "(", "Word2vec_Skipgram", ",", "self", ")", ".", "__init__", "(", ")", "\n", "'''\n        use context (u) to predict center (v)\n        '''", "\n", "self", ".", "dict_size", "=", "dict_size", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "window_size", "=", "window_size", "\n", "\n", "self", ".", "u_embedding", "=", "u_embedding", "\n", "self", ".", "sm_w_t", "=", "nn", ".", "Embedding", "(", "\n", "dict_size", ",", "\n", "embedding_dim", ",", "\n", "sparse", "=", "sparse", ",", "\n", "padding_idx", "=", "0", ",", "\n", ")", "\n", "self", ".", "sm_b", "=", "nn", ".", "Embedding", "(", "dict_size", ",", "1", ",", "sparse", "=", "sparse", ",", "padding_idx", "=", "0", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.hypersagnn_utils.Word2vec_Skipgram.forward_u": [[109, 111], ["hypersagnn_utils.Word2vec_Skipgram.u_embedding"], "methods", ["None"], ["", "def", "forward_u", "(", "self", ",", "u", ")", ":", "\n", "        ", "return", "self", ".", "u_embedding", "(", "u", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.hypersagnn_utils.Word2vec_Skipgram.forward_w_b": [[112, 114], ["hypersagnn_utils.Word2vec_Skipgram.sm_w_t", "hypersagnn_utils.Word2vec_Skipgram.sm_b"], "methods", ["None"], ["", "def", "forward_w_b", "(", "self", ",", "id", ")", ":", "\n", "        ", "return", "self", ".", "sm_w_t", "(", "id", ")", ",", "self", ".", "sm_b", "(", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.hypersagnn_utils.get_non_pad_mask": [[117, 120], ["seq.ne().type().unsqueeze", "seq.dim", "seq.ne().type", "seq.ne"], "function", ["None"], ["", "", "def", "get_non_pad_mask", "(", "seq", ")", ":", "\n", "    ", "assert", "seq", ".", "dim", "(", ")", "==", "2", "\n", "return", "seq", ".", "ne", "(", "0", ")", ".", "type", "(", "torch", ".", "float", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.hypersagnn_utils.get_attn_key_pad_mask": [[122, 132], ["seq_q.size", "seq_k.eq", "padding_mask.unsqueeze().expand.unsqueeze().expand", "padding_mask.unsqueeze().expand.unsqueeze"], "function", ["None"], ["", "def", "get_attn_key_pad_mask", "(", "seq_k", ",", "seq_q", ")", ":", "\n", "    ", "''' For masking out the padding part of key sequence. '''", "\n", "\n", "# Expand to fit the shape of key query attention matrix.", "\n", "len_q", "=", "seq_q", ".", "size", "(", "1", ")", "\n", "padding_mask", "=", "seq_k", ".", "eq", "(", "0", ")", "\n", "padding_mask", "=", "padding_mask", ".", "unsqueeze", "(", "\n", "1", ")", ".", "expand", "(", "-", "1", ",", "len_q", ",", "-", "1", ")", "# b x lq x lk", "\n", "\n", "return", "padding_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.feed_forward.FeedForward.__init__": [[18, 31], ["torch.Module.__init__", "range", "feed_forward.FeedForward.w_stack.append", "feed_forward.FeedForward.add_module", "torch.Dropout", "torch.Dropout", "torch.Dropout", "len", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.embed_dataset.EmbedDataset.__init__"], ["def", "__init__", "(", "self", ",", "dims", ",", "dropout", "=", "None", ",", "reshape", "=", "False", ",", "use_bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "FeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_stack", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dims", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "w_stack", ".", "append", "(", "nn", ".", "Linear", "(", "dims", "[", "i", "]", ",", "dims", "[", "i", "+", "1", "]", ",", "use_bias", ")", ")", "\n", "self", ".", "add_module", "(", "\"FF_Linear%d\"", "%", "(", "i", ")", ",", "self", ".", "w_stack", "[", "-", "1", "]", ")", "\n", "\n", "", "if", "dropout", "is", "not", "None", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "None", "\n", "\n", "", "self", ".", "reshape", "=", "reshape", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.model_utils.feed_forward.FeedForward.forward": [[32, 45], ["range", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "feed_forward.FeedForward.view", "len", "feed_forward.FeedForward.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "x", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "w_stack", ")", "-", "1", ")", ":", "\n", "            ", "output", "=", "self", ".", "w_stack", "[", "i", "]", "(", "output", ")", "\n", "output", "=", "torch", ".", "tanh", "(", "output", ")", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "                ", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "", "", "output", "=", "self", ".", "w_stack", "[", "-", "1", "]", "(", "output", ")", "\n", "\n", "if", "self", ".", "reshape", ":", "\n", "            ", "output", "=", "output", ".", "view", "(", "output", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "1", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.tenet_dataset.TenetDataset.__init__": [[14, 53], ["data.dataset.Dataset.__init__", "tenet_dataset.TenetDataset.get_user_items_dict", "tenet_dataset.TenetDataset.get_sparse_matrix_from_dict", "tenet_dataset.TenetDataset.get_sparse_matrix_from_dict", "tenet_dataset.TenetDataset.get_sparse_matrix_from_dict", "time.time.time", "tenet_dataset.TenetDataset.mat_mult_sp", "tenet_dataset.TenetDataset.mat_mult_sp", "tenet_dataset.TenetDataset.mat_mult_sp"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.embed_dataset.EmbedDataset.__init__", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.tenet_dataset.TenetDataset.get_user_items_dict", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.tenet_dataset.TenetDataset.get_sparse_matrix_from_dict", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.tenet_dataset.TenetDataset.get_sparse_matrix_from_dict", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.tenet_dataset.TenetDataset.get_sparse_matrix_from_dict", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.tenet_dataset.TenetDataset.mat_mult_sp", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.tenet_dataset.TenetDataset.mat_mult_sp", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.tenet_dataset.TenetDataset.mat_mult_sp"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "Dataset", ".", "__init__", "(", "self", ",", "args", ")", "\n", "#pdb.set_trace()", "\n", "\n", "self", ".", "user_items_dct", "=", "self", ".", "get_user_items_dict", "(", "self", ".", "user_lists_dct", ",", "self", ".", "list_items_dct", ")", "\n", "self", ".", "user_item_matrix_sp", "=", "self", ".", "get_sparse_matrix_from_dict", "(", "self", ".", "user_items_dct", ",", "self", ".", "num_user", ",", "self", ".", "num_item", ")", "\n", "self", ".", "list_item_matrix_sp", "=", "self", ".", "get_sparse_matrix_from_dict", "(", "self", ".", "list_items_dct", ",", "self", ".", "num_list", ",", "self", ".", "num_item", ")", "\n", "self", ".", "item_list_matrix_sp", "=", "self", ".", "get_sparse_matrix_from_dict", "(", "self", ".", "list_items_dct", ",", "self", ".", "num_item", ",", "self", ".", "num_list", ",", "reverse", "=", "True", ")", "\n", "\n", "t1", "=", "time", "(", ")", "\n", "self", ".", "user_user_comm_mat_sp", "=", "self", ".", "mat_mult_sp", "(", "self", ".", "user_item_matrix_sp", ",", "self", ".", "user_item_matrix_sp", ".", "T", ")", "#.astype(bool).astype(int)#todok()", "\n", "self", ".", "item_item_comm_mat_sp", "=", "self", ".", "mat_mult_sp", "(", "self", ".", "item_list_matrix_sp", ",", "self", ".", "item_list_matrix_sp", ".", "T", ")", "#.astype(bool).astype(int)", "\n", "self", ".", "list_list_comm_mat_sp", "=", "self", ".", "mat_mult_sp", "(", "self", ".", "list_item_matrix_sp", ",", "self", ".", "list_item_matrix_sp", ".", "T", ")", "##.astype(bool).astype(int) ##real values", "\n", "#pdb.set_trace()", "\n", "\n", "# ==============================", "\n", "#self.list_item_train_seq     = self.get_dct_mat_seq(dct=self.list_items_dct, num_row=self.num_list, num_col=self.num_item, padding_value=0)", "\n", "\n", "##self.train_matrix_item_seq   = self.get_dct_mat_seq_remove_test(dct=self.list_items_dct, num_row=self.num_list, num_col=self.max_item_seq_length+1, padding_value=0) ##last_index :] for all, :-1] for remove test item, :-2] for removing test and valid", "\n", "\n", "#pdb.set_trace()", "\n", "\n", "##", "\n", "'''\n        binarize = True\n        if binarize == True:\n            self.user_user_comm_mat_sp   = sp.csr_matrix(sp.csr_matrix((self.user_user_comm_mat_sp),dtype=bool),dtype=int)\n            self.item_item_comm_mat_sp   = sp.csr_matrix(sp.csr_matrix((self.item_item_comm_mat_sp),dtype=bool),dtype=int)\n            self.list_list_comm_mat_sp   = sp.csr_matrix(sp.csr_matrix((self.list_list_comm_mat_sp),dtype=bool),dtype=int)\n            #self.user_user_comm_mat_sp   = self.binarize_sparse_matrix(self.user_user_comm_mat_sp)\n            #self.item_item_comm_mat_sp   = self.binarize_sparse_matrix(self.item_item_comm_mat_sp)\n            #self.list_list_comm_mat_sp   = self.binarize_sparse_matrix(self.list_list_comm_mat_sp)\n\n        '''", "\n", "\n", "# adj ===========", "\n", "self", ".", "user_adj_mat", "=", "self", ".", "user_user_comm_mat_sp", "\n", "self", ".", "list_adj_mat", "=", "self", ".", "list_list_comm_mat_sp", "\n", "self", ".", "item_adj_mat", "=", "self", ".", "item_item_comm_mat_sp", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.tenet_dataset.TenetDataset.mat_mult_sp": [[55, 57], ["None"], "methods", ["None"], ["", "def", "mat_mult_sp", "(", "self", ",", "mat1", ",", "mat2", ")", ":", "\n", "        ", "return", "mat1", "*", "mat2", "#.todtype(fset=int)", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.tenet_dataset.TenetDataset.get_sparse_matrix_from_dict": [[58, 69], ["scipy.lil_matrix"], "methods", ["None"], ["", "def", "get_sparse_matrix_from_dict", "(", "self", ",", "dct", ",", "num_row", ",", "num_col", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "sp_mat", "=", "sp", ".", "lil_matrix", "(", "(", "num_row", ",", "num_col", ")", ")", "\n", "\n", "for", "key", "in", "dct", ":", "\n", "            ", "values", "=", "dct", "[", "key", "]", "\n", "for", "value", "in", "values", ":", "\n", "                ", "if", "reverse", "==", "False", ":", "\n", "                    ", "sp_mat", "[", "key", ",", "value", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "sp_mat", "[", "value", ",", "key", "]", "=", "1", "\n", "", "", "", "return", "sp_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.tenet_dataset.TenetDataset.get_user_items_dict": [[70, 80], ["collections.defaultdict", "user_items_dct[].union", "set"], "methods", ["None"], ["", "def", "get_user_items_dict", "(", "self", ",", "user_lists_dct", ",", "list_items_dct", ")", ":", "\n", "        ", "user_items_dct", "=", "defaultdict", "(", "set", ")", "\n", "for", "user", "in", "user_lists_dct", ":", "\n", "            ", "for", "lst", "in", "user_lists_dct", "[", "user", "]", ":", "\n", "#pdb.set_trace()", "\n", "# for binary. if freq is wanted, change this to list and count during the sp_matrix conv (first binarize)", "\n", "#print(set(list_items_dct[lst]))", "\n", "                ", "user_items_dct", "[", "user", "]", "=", "user_items_dct", "[", "user", "]", ".", "union", "(", "set", "(", "list_items_dct", "[", "lst", "]", ")", ")", "\n", "\n", "", "", "return", "user_items_dct", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.tenet_dataset.TenetDataset.binarize_sparse_matrix": [[81, 86], ["scipy.lil_matrix", "mat_sp.keys"], "methods", ["None"], ["", "def", "binarize_sparse_matrix", "(", "self", ",", "mat_sp", ")", ":", "\n", "        ", "bin_mat_sp", "=", "sp", ".", "lil_matrix", "(", "mat_sp", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "key", "in", "mat_sp", ".", "keys", "(", ")", ":", "\n", "            ", "bin_mat_sp", "[", "key", "[", "0", "]", ",", "key", "[", "1", "]", "]", "=", "1", "\n", "", "return", "bin_mat_sp", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.__init__": [[12, 45], ["utils.utils.utils.load_pickle", "dataset.Dataset.get_pickle_train_valid_test", "dataset.Dataset.get_list_user_dct", "dataset.Dataset.get_user_list_item_count", "dataset.Dataset.get_list_user_vec", "dataset.Dataset.get_arraylist_from_train_dict", "dataset.Dataset.get_arraylist_from_valid_dict", "dataset.Dataset.get_arraylist_from_valid_dict", "dataset.Dataset.get_train_matrix_sp", "dataset.Dataset.get_dct_mat_seq_remove_test", "dataset.Dataset.get_dct_mat_seq_for_test"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.load_pickle", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.get_pickle_train_valid_test", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.get_list_user_dct", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.get_user_list_item_count", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.get_list_user_vec", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.get_arraylist_from_train_dict", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.get_arraylist_from_valid_dict", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.get_arraylist_from_valid_dict", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.get_train_matrix_sp", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.get_dct_mat_seq_remove_test", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.get_dct_mat_seq_for_test"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "path", "=", "args", ".", "path", "+", "args", ".", "dataset", "\n", "self", ".", "method", "=", "args", ".", "method", "\n", "self", ".", "max_item_seq_length", "=", "args", ".", "max_item_seq_length", "\n", "self", ".", "load_embedding_flag", "=", "True", "if", "args", ".", "load_embedding_flag", "==", "1", "else", "False", "\n", "\n", "# load user_lists_dct, list_items_train, valid, test ========================", "\n", "self", ".", "user_lists_dct", "=", "utils", ".", "load_pickle", "(", "self", ".", "path", "+", "'.user_lists.ided.pkl'", ")", "\n", "#(self.list_items_dct_no_valid,self.list_items_dct,self.validNegativesDict,", "\n", "# self.testNegativesDict)     = self.get_pickle_train_valid_test(self.path+'.list_items.train_valid_test.pkl')", "\n", "(", "self", ".", "list_items_dct", ",", "self", ".", "list_items_wv_dct", ",", "self", ".", "validNegativesDict", ",", "\n", "self", ".", "testNegativesDict", ")", "=", "self", ".", "get_pickle_train_valid_test", "(", "self", ".", "path", "+", "'.list_items.train_valid_test.pkl'", ")", "\n", "\n", "## change ===================", "\n", "##self.validNegativesDict      = self.testNegativesDict ##to-be commented out", "\n", "self", ".", "list_items_dct_train", "=", "self", ".", "list_items_dct", "\n", "self", ".", "list_items_dct", "=", "self", ".", "list_items_wv_dct", "\n", "# ===========================", "\n", "\n", "self", ".", "list_user_dct", "=", "self", ".", "get_list_user_dct", "(", "self", ".", "user_lists_dct", ")", "#user-embedding can be obtained using this(many-to-one)", "\n", "\n", "self", ".", "num_user", ",", "self", ".", "num_list", ",", "self", ".", "num_item", "=", "self", ".", "get_user_list_item_count", "(", "self", ".", "user_lists_dct", ",", "self", ".", "list_items_dct", ")", "\n", "self", ".", "list_user_vec", "=", "self", ".", "get_list_user_vec", "(", "self", ".", "list_user_dct", ",", "self", ".", "num_list", ")", "#user-embedding can be obtained using this(many-to-one)", "\n", "\n", "# train valid test array-lists and sequence matrix ==========================", "\n", "self", ".", "trainArrTriplets", "=", "self", ".", "get_arraylist_from_train_dict", "(", "self", ".", "list_items_dct", ")", "\n", "self", ".", "validArrDubles", "=", "self", ".", "get_arraylist_from_valid_dict", "(", "self", ".", "validNegativesDict", ")", "\n", "self", ".", "testArrDubles", "=", "self", ".", "get_arraylist_from_valid_dict", "(", "self", ".", "testNegativesDict", ")", "\n", "#===", "\n", "\n", "self", ".", "train_matrix", "=", "self", ".", "get_train_matrix_sp", "(", "self", ".", "list_items_dct", ",", "self", ".", "num_list", ",", "self", ".", "num_item", ")", "\n", "self", ".", "train_matrix_item_seq", "=", "self", ".", "get_dct_mat_seq_remove_test", "(", "dct", "=", "self", ".", "list_items_dct", ",", "num_row", "=", "self", ".", "num_list", ",", "num_col", "=", "self", ".", "max_item_seq_length", "+", "1", ",", "padding_value", "=", "0", ")", "##last_index :] for all, :-1] for remove test item, :-2] for removing test and valid", "\n", "self", ".", "train_matrix_item_seq_for_test", "=", "self", ".", "get_dct_mat_seq_for_test", "(", "dct", "=", "self", ".", "list_items_dct", ",", "num_row", "=", "self", ".", "num_list", ",", "num_col", "=", "self", ".", "max_item_seq_length", ",", "padding_value", "=", "0", ")", "##last_index :] for all, :-1] for remove test item, :-2] for removing test and valid", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.get_pickle_train_valid_test": [[46, 48], ["utils.utils.utils.load_pickle"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.load_pickle"], ["", "def", "get_pickle_train_valid_test", "(", "self", ",", "fname", ")", ":", "\n", "        ", "return", "utils", ".", "load_pickle", "(", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.get_list_user_dct": [[49, 56], ["dict"], "methods", ["None"], ["", "def", "get_list_user_dct", "(", "self", ",", "user_lists_dct", ")", ":", "\n", "        ", "list_user_dct", "=", "dict", "(", ")", "\n", "for", "user", "in", "user_lists_dct", ":", "\n", "            ", "for", "l", "in", "user_lists_dct", "[", "user", "]", ":", "\n", "                ", "assert", "l", "not", "in", "list_user_dct", ",", "'lists are not uniqe. data-extraction some part is wrong.'", "\n", "list_user_dct", "[", "l", "]", "=", "user", "\n", "", "", "return", "list_user_dct", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.get_list_user_vec": [[58, 63], ["numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.geom_utils.zeros"], ["", "def", "get_list_user_vec", "(", "self", ",", "list_user_dct", ",", "num_list", ")", ":", "\n", "        ", "list_user_arr", "=", "np", ".", "zeros", "(", "num_list", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "l", "in", "list_user_dct", ":", "\n", "            ", "list_user_arr", "[", "l", "]", "=", "list_user_dct", "[", "l", "]", "\n", "", "return", "list_user_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.get_user_list_item_count": [[64, 76], ["max", "max", "max", "len", "len", "max", "user_lists_dct.keys", "list_items_dct.keys", "set", "list_items_dct.keys", "set", "set", "itertools.chain.from_iterable", "itertools.chain.from_iterable", "itertools.chain.from_iterable", "dataset.Dataset.user_lists_dct.values", "dataset.Dataset.user_lists_dct.values", "dataset.Dataset.list_items_dct.values"], "methods", ["None"], ["", "def", "get_user_list_item_count", "(", "self", ",", "user_lists_dct", ",", "list_items_dct", ")", ":", "\n", "        ", "num_user", "=", "max", "(", "user_lists_dct", ".", "keys", "(", ")", ")", "+", "1", "\n", "num_list", "=", "max", "(", "list_items_dct", ".", "keys", "(", ")", ")", "+", "1", "\n", "num_list2", "=", "max", "(", "set", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "self", ".", "user_lists_dct", ".", "values", "(", ")", ")", ")", ")", "+", "1", "\n", "\n", "# assert statements for list matching across user_lists and list_items dct (thru train_dct)", "\n", "#''' ## remove comments", "\n", "assert", "num_list", "==", "num_list2", ",", "'max list indices from list_items_dct and user_lists_dct should be same.'", "\n", "assert", "len", "(", "list_items_dct", ".", "keys", "(", ")", ")", "==", "len", "(", "set", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "self", ".", "user_lists_dct", ".", "values", "(", ")", ")", ")", ")", ",", "'number of lists from both the list_items_dct and user_lists_dct should be same.'", "\n", "#'''", "\n", "num_item", "=", "max", "(", "set", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "self", ".", "list_items_dct", ".", "values", "(", ")", ")", ")", ")", "+", "1", "\n", "return", "num_user", ",", "num_list", ",", "num_item", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.get_arraylist_from_train_dict": [[77, 86], ["numpy.array", "numpy.array", "numpy.array", "list_input.append", "item_input.append", "rating.append"], "methods", ["None"], ["", "def", "get_arraylist_from_train_dict", "(", "self", ",", "train_dct", ")", ":", "\n", "        ", "list_input", ",", "item_input", ",", "rating", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "l", "in", "train_dct", ":", "\n", "            ", "items", "=", "train_dct", "[", "l", "]", "\n", "for", "item", "in", "items", ":", "\n", "                ", "list_input", ".", "append", "(", "l", ")", "\n", "item_input", ".", "append", "(", "item", ")", "\n", "rating", ".", "append", "(", "1.0", ")", "\n", "", "", "return", "np", ".", "array", "(", "list_input", ")", ",", "np", ".", "array", "(", "item_input", ")", ",", "np", ".", "array", "(", "rating", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.get_arraylist_from_valid_dict": [[87, 94], ["list_input.append", "item_input.append", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "get_arraylist_from_valid_dict", "(", "self", ",", "valid_dct", ")", ":", "\n", "        ", "list_input", ",", "item_input", "=", "[", "]", ",", "[", "]", "\n", "for", "key", "in", "valid_dct", ":", "\n", "            ", "l", ",", "item", "=", "key", "\n", "list_input", ".", "append", "(", "l", ")", "\n", "item_input", ".", "append", "(", "item", ")", "\n", "", "return", "np", ".", "array", "(", "list_input", ")", ",", "np", ".", "array", "(", "item_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.get_dct_mat_seq": [[95, 105], ["numpy.full", "numpy.array", "len"], "methods", ["None"], ["", "def", "get_dct_mat_seq", "(", "self", ",", "dct", ",", "num_row", ",", "num_col", ",", "padding_value", ")", ":", "\n", "        ", "mat", "=", "np", ".", "full", "(", "(", "num_row", ",", "num_col", ")", ",", "padding_value", ",", "dtype", "=", "int", ")", "\n", "for", "lst", "in", "dct", ":", "\n", "            ", "items_arr", "=", "np", ".", "array", "(", "dct", "[", "lst", "]", ")", "\n", "leng", "=", "len", "(", "items_arr", ")", "\n", "if", "leng", ">=", "num_col", ":", "\n", "                ", "mat", "[", "lst", ",", ":", "]", "=", "items_arr", "[", "-", "num_col", ":", "]", "\n", "", "else", ":", "\n", "                ", "mat", "[", "lst", ",", "-", "leng", ":", "]", "=", "items_arr", "\n", "", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.get_dct_mat_seq_remove_test": [[106, 116], ["numpy.full", "numpy.array", "len"], "methods", ["None"], ["", "def", "get_dct_mat_seq_remove_test", "(", "self", ",", "dct", ",", "num_row", ",", "num_col", ",", "padding_value", ")", ":", "\n", "        ", "mat", "=", "np", ".", "full", "(", "(", "num_row", ",", "num_col", "-", "1", ")", ",", "padding_value", ",", "dtype", "=", "int", ")", "\n", "for", "lst", "in", "dct", ":", "\n", "            ", "items_arr", "=", "np", ".", "array", "(", "dct", "[", "lst", "]", ")", "\n", "leng", "=", "len", "(", "items_arr", ")", "\n", "if", "leng", ">=", "num_col", ":", "\n", "                ", "mat", "[", "lst", ",", ":", "]", "=", "items_arr", "[", "-", "num_col", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "mat", "[", "lst", ",", "-", "leng", "+", "1", ":", "]", "=", "items_arr", "[", ":", "-", "1", "]", "\n", "", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.get_dct_mat_seq_for_test": [[117, 127], ["numpy.full", "numpy.array", "len"], "methods", ["None"], ["", "def", "get_dct_mat_seq_for_test", "(", "self", ",", "dct", ",", "num_row", ",", "num_col", ",", "padding_value", ")", ":", "\n", "        ", "mat", "=", "np", ".", "full", "(", "(", "num_row", ",", "num_col", ")", ",", "padding_value", ",", "dtype", "=", "int", ")", "\n", "for", "lst", "in", "dct", ":", "\n", "            ", "items_arr", "=", "np", ".", "array", "(", "dct", "[", "lst", "]", ")", "\n", "leng", "=", "len", "(", "items_arr", ")", "\n", "if", "leng", ">=", "num_col", ":", "\n", "                ", "mat", "[", "lst", ",", ":", "]", "=", "items_arr", "[", "-", "num_col", ":", "]", "\n", "", "else", ":", "\n", "                ", "mat", "[", "lst", ",", "-", "leng", ":", "]", "=", "items_arr", "[", ":", "]", "\n", "", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.dataset.Dataset.get_train_matrix_sp": [[128, 134], ["scipy.dok_matrix", "scipy.dok_matrix.tolil"], "methods", ["None"], ["", "def", "get_train_matrix_sp", "(", "self", ",", "dct", ",", "num_row", ",", "num_col", ")", ":", "\n", "        ", "mat", "=", "sp", ".", "dok_matrix", "(", "(", "num_row", ",", "num_col", ")", ",", "dtype", "=", "np", ".", "float16", ")", "##float32", "\n", "for", "key", "in", "dct", ":", "\n", "            ", "for", "val", "in", "dct", "[", "key", "]", ":", "\n", "                ", "mat", "[", "key", ",", "val", "]", "=", "1.0", "\n", "", "", "return", "mat", ".", "tolil", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.embed_dataset.EmbedDataset.__init__": [[16, 19], ["data.tenet_dataset.TenetDataset.__init__", "utils.utils.utils.load_pickle", "str"], "methods", ["home.repos.pwc.inspect_result.mvijaikumar_hypertenet.data.embed_dataset.EmbedDataset.__init__", "home.repos.pwc.inspect_result.mvijaikumar_hypertenet.utils.utils.load_pickle"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "TenetDataset", ".", "__init__", "(", "self", ",", "args", ")", "\n", "self", ".", "user_edge_index", ",", "self", ".", "list_edge_index", ",", "self", ".", "item_edge_index", "=", "utils", ".", "load_pickle", "(", "args", ".", "path", "+", "'/'", "+", "args", ".", "embed_type", "+", "'/'", "+", "str", "(", "args", ".", "knn_k", ")", "+", "'/'", "+", "args", ".", "dataset", "+", "'.user_list_item_knn.pkl'", ")", "\n", "", "", ""]]}