{"home.repos.pwc.inspect_result.twangnh_SimCal.None.setup.readme": [[14, 18], ["open", "f.read"], "function", ["None"], ["def", "readme", "(", ")", ":", "\n", "    ", "with", "open", "(", "'README.md'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "content", "=", "f", ".", "read", "(", ")", "\n", "", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.None.setup.get_git_hash": [[29, 53], ["setup.get_git_hash._minimal_ext_cmd"], "function", ["None"], ["def", "get_git_hash", "(", ")", ":", "\n", "\n", "    ", "def", "_minimal_ext_cmd", "(", "cmd", ")", ":", "\n", "# construct minimal environment", "\n", "        ", "env", "=", "{", "}", "\n", "for", "k", "in", "[", "'SYSTEMROOT'", ",", "'PATH'", ",", "'HOME'", "]", ":", "\n", "            ", "v", "=", "os", ".", "environ", ".", "get", "(", "k", ")", "\n", "if", "v", "is", "not", "None", ":", "\n", "                ", "env", "[", "k", "]", "=", "v", "\n", "# LANGUAGE is used on win32", "\n", "", "", "env", "[", "'LANGUAGE'", "]", "=", "'C'", "\n", "env", "[", "'LANG'", "]", "=", "'C'", "\n", "env", "[", "'LC_ALL'", "]", "=", "'C'", "\n", "out", "=", "subprocess", ".", "Popen", "(", "\n", "cmd", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "env", "=", "env", ")", ".", "communicate", "(", ")", "[", "0", "]", "\n", "return", "out", "\n", "\n", "", "try", ":", "\n", "        ", "out", "=", "_minimal_ext_cmd", "(", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", ")", "\n", "sha", "=", "out", ".", "strip", "(", ")", ".", "decode", "(", "'ascii'", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "sha", "=", "'unknown'", "\n", "\n", "", "return", "sha", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.None.setup.get_hash": [[55, 68], ["os.path.exists", "os.path.exists", "setup.get_git_hash", "__version__.split", "ImportError"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.None.setup.get_git_hash"], ["", "def", "get_hash", "(", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "'.git'", ")", ":", "\n", "        ", "sha", "=", "get_git_hash", "(", ")", "[", ":", "7", "]", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "version_file", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "mmdet", ".", "version", "import", "__version__", "\n", "sha", "=", "__version__", ".", "split", "(", "'+'", ")", "[", "-", "1", "]", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Unable to get git version'", ")", "\n", "", "", "else", ":", "\n", "        ", "sha", "=", "'unknown'", "\n", "\n", "", "return", "sha", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.None.setup.write_version_py": [[70, 82], ["setup.get_hash", "open", "f.write", "content.format", "time.asctime"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.None.setup.get_hash"], ["", "def", "write_version_py", "(", ")", ":", "\n", "    ", "content", "=", "\"\"\"# GENERATED VERSION FILE\n# TIME: {}\n\n__version__ = '{}'\nshort_version = '{}'\n\"\"\"", "\n", "sha", "=", "get_hash", "(", ")", "\n", "VERSION", "=", "SHORT_VERSION", "+", "'+'", "+", "sha", "\n", "\n", "with", "open", "(", "version_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "content", ".", "format", "(", "time", ".", "asctime", "(", ")", ",", "VERSION", ",", "SHORT_VERSION", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.None.setup.get_version": [[84, 88], ["open", "exec", "locals", "compile", "f.read"], "function", ["None"], ["", "", "def", "get_version", "(", ")", ":", "\n", "    ", "with", "open", "(", "version_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "exec", "(", "compile", "(", "f", ".", "read", "(", ")", ",", "version_file", ",", "'exec'", ")", ")", "\n", "", "return", "locals", "(", ")", "[", "'__version__'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.None.setup.make_cuda_ext": [[90, 101], ["torch.utils.cpp_extension.CUDAExtension", "os.path.join", "module.split"], "function", ["None"], ["", "def", "make_cuda_ext", "(", "name", ",", "module", ",", "sources", ")", ":", "\n", "\n", "    ", "return", "CUDAExtension", "(", "\n", "name", "=", "'{}.{}'", ".", "format", "(", "module", ",", "name", ")", ",", "\n", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "*", "module", ".", "split", "(", "'.'", ")", ",", "p", ")", "for", "p", "in", "sources", "]", ",", "\n", "extra_compile_args", "=", "{", "\n", "'cxx'", ":", "[", "]", ",", "\n", "'nvcc'", ":", "[", "\n", "'-D__CUDA_NO_HALF_OPERATORS__'", ",", "\n", "'-D__CUDA_NO_HALF_CONVERSIONS__'", ",", "\n", "'-D__CUDA_NO_HALF2_OPERATORS__'", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.None.setup.make_cython_ext": [[105, 120], ["setuptools.Extension", "Cython.Build.cythonize", "platform.system", "os.path.join", "numpy.get_include", "module.split"], "function", ["None"], ["", "def", "make_cython_ext", "(", "name", ",", "module", ",", "sources", ")", ":", "\n", "    ", "extra_compile_args", "=", "None", "\n", "if", "platform", ".", "system", "(", ")", "!=", "'Windows'", ":", "\n", "        ", "extra_compile_args", "=", "{", "\n", "'cxx'", ":", "[", "'-Wno-unused-function'", ",", "'-Wno-write-strings'", "]", "\n", "}", "\n", "\n", "", "extension", "=", "Extension", "(", "\n", "'{}.{}'", ".", "format", "(", "module", ",", "name", ")", ",", "\n", "[", "os", ".", "path", ".", "join", "(", "*", "module", ".", "split", "(", "'.'", ")", ",", "p", ")", "for", "p", "in", "sources", "]", ",", "\n", "include_dirs", "=", "[", "np", ".", "get_include", "(", ")", "]", ",", "\n", "language", "=", "'c++'", ",", "\n", "extra_compile_args", "=", "extra_compile_args", ")", "\n", "extension", ",", "=", "cythonize", "(", "extension", ")", "\n", "return", "extension", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.__init__": [[8, 11], ["dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_module_dict", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.__repr__": [[12, 16], ["list", "registry.Registry._module_dict.keys"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_str", "=", "self", ".", "__class__", ".", "__name__", "+", "'(name={}, items={})'", ".", "format", "(", "\n", "self", ".", "_name", ",", "list", "(", "self", ".", "_module_dict", ".", "keys", "(", ")", ")", ")", "\n", "return", "format_str", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.name": [[17, 20], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.module_dict": [[21, 24], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "module_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_module_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get": [[25, 27], ["registry.Registry._module_dict.get"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get"], ["", "def", "get", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_module_dict", ".", "get", "(", "key", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry._register_module": [[28, 42], ["inspect.isclass", "TypeError", "KeyError", "type"], "methods", ["None"], ["", "def", "_register_module", "(", "self", ",", "module_class", ")", ":", "\n", "        ", "\"\"\"Register a module.\n\n        Args:\n            module (:obj:`nn.Module`): Module to be registered.\n        \"\"\"", "\n", "if", "not", "inspect", ".", "isclass", "(", "module_class", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'module must be a class, but got {}'", ".", "format", "(", "\n", "type", "(", "module_class", ")", ")", ")", "\n", "", "module_name", "=", "module_class", ".", "__name__", "\n", "if", "module_name", "in", "self", ".", "_module_dict", ":", "\n", "            ", "raise", "KeyError", "(", "'{} is already registered in {}'", ".", "format", "(", "\n", "module_name", ",", "self", ".", "name", ")", ")", "\n", "", "self", ".", "_module_dict", "[", "module_name", "]", "=", "module_class", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.register_module": [[43, 46], ["registry.Registry._register_module"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry._register_module"], ["", "def", "register_module", "(", "self", ",", "cls", ")", ":", "\n", "        ", "self", ".", "_register_module", "(", "cls", ")", "\n", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.build_from_cfg": [[48, 75], ["cfg.copy", "cfg.copy.pop", "mmcv.is_str", "registry.get.", "isinstance", "isinstance", "registry.get", "default_args.items", "KeyError", "inspect.isclass", "TypeError", "cfg.copy.setdefault", "type"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get"], ["", "", "def", "build_from_cfg", "(", "cfg", ",", "registry", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build a module from config dict.\n\n    Args:\n        cfg (dict): Config dict. It should at least contain the key \"type\".\n        registry (:obj:`Registry`): The registry to search the type from.\n        default_args (dict, optional): Default initialization arguments.\n\n    Returns:\n        obj: The constructed object.\n    \"\"\"", "\n", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "assert", "isinstance", "(", "default_args", ",", "dict", ")", "or", "default_args", "is", "None", "\n", "args", "=", "cfg", ".", "copy", "(", ")", "\n", "obj_type", "=", "args", ".", "pop", "(", "'type'", ")", "\n", "if", "mmcv", ".", "is_str", "(", "obj_type", ")", ":", "\n", "        ", "obj_type", "=", "registry", ".", "get", "(", "obj_type", ")", "\n", "if", "obj_type", "is", "None", ":", "\n", "            ", "raise", "KeyError", "(", "'{} is not in the {} registry'", ".", "format", "(", "\n", "obj_type", ",", "registry", ".", "name", ")", ")", "\n", "", "", "elif", "not", "inspect", ".", "isclass", "(", "obj_type", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'type must be a str or valid type, but got {}'", ".", "format", "(", "\n", "type", "(", "obj_type", ")", ")", ")", "\n", "", "if", "default_args", "is", "not", "None", ":", "\n", "        ", "for", "name", ",", "value", "in", "default_args", ".", "items", "(", ")", ":", "\n", "            ", "args", ".", "setdefault", "(", "name", ",", "value", ")", "\n", "", "", "return", "obj_type", "(", "**", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer": [[12, 56], ["cfg.copy", "cfg.copy.pop", "isinstance", "cfg.copy.pop", "cfg.copy.setdefault", "norm_layer.parameters", "isinstance", "KeyError", "str", "norm_layer", "norm_layer", "norm_layer._specify_ddp_gpu_num"], "function", ["None"], ["def", "build_norm_layer", "(", "cfg", ",", "num_features", ",", "postfix", "=", "''", ")", ":", "\n", "    ", "\"\"\" Build normalization layer\n\n    Args:\n        cfg (dict): cfg should contain:\n            type (str): identify norm layer type.\n            layer args: args needed to instantiate a norm layer.\n            requires_grad (bool): [optional] whether stop gradient updates\n        num_features (int): number of channels from input.\n        postfix (int, str): appended into norm abbreviation to\n            create named layer.\n\n    Returns:\n        name (str): abbreviation + postfix\n        layer (nn.Module): created norm layer\n    \"\"\"", "\n", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "layer_type", "=", "cfg_", ".", "pop", "(", "'type'", ")", "\n", "if", "layer_type", "not", "in", "norm_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "'Unrecognized norm type {}'", ".", "format", "(", "layer_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "abbr", ",", "norm_layer", "=", "norm_cfg", "[", "layer_type", "]", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "assert", "isinstance", "(", "postfix", ",", "(", "int", ",", "str", ")", ")", "\n", "name", "=", "abbr", "+", "str", "(", "postfix", ")", "\n", "\n", "requires_grad", "=", "cfg_", ".", "pop", "(", "'requires_grad'", ",", "True", ")", "\n", "cfg_", ".", "setdefault", "(", "'eps'", ",", "1e-5", ")", "\n", "if", "layer_type", "!=", "'GN'", ":", "\n", "        ", "layer", "=", "norm_layer", "(", "num_features", ",", "**", "cfg_", ")", "\n", "if", "layer_type", "==", "'SyncBN'", ":", "\n", "            ", "layer", ".", "_specify_ddp_gpu_num", "(", "1", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "'num_groups'", "in", "cfg_", "\n", "layer", "=", "norm_layer", "(", "num_channels", "=", "num_features", ",", "**", "cfg_", ")", "\n", "\n", "", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n", "", "return", "name", ",", "layer", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.scale.Scale.__init__": [[7, 10], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "Scale", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "scale", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.scale.Scale.forward": [[11, 13], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "scale", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.ConvModule.__init__": [[67, 145], ["torch.Module.__init__", "conv_module.build_conv_layer", "conv_module.ConvModule.init_weights", "isinstance", "isinstance", "isinstance", "set", "set", "warnings.warn", "norm.build_norm_layer", "conv_module.ConvModule.add_module", "len", "order.index", "order.index", "ValueError", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "'auto'", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "activation", "=", "'relu'", ",", "\n", "inplace", "=", "True", ",", "\n", "order", "=", "(", "'conv'", ",", "'norm'", ",", "'act'", ")", ")", ":", "\n", "        ", "super", "(", "ConvModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "conv_cfg", "is", "None", "or", "isinstance", "(", "conv_cfg", ",", "dict", ")", "\n", "assert", "norm_cfg", "is", "None", "or", "isinstance", "(", "norm_cfg", ",", "dict", ")", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "inplace", "=", "inplace", "\n", "self", ".", "order", "=", "order", "\n", "assert", "isinstance", "(", "self", ".", "order", ",", "tuple", ")", "and", "len", "(", "self", ".", "order", ")", "==", "3", "\n", "assert", "set", "(", "order", ")", "==", "set", "(", "[", "'conv'", ",", "'norm'", ",", "'act'", "]", ")", "\n", "\n", "self", ".", "with_norm", "=", "norm_cfg", "is", "not", "None", "\n", "self", ".", "with_activatation", "=", "activation", "is", "not", "None", "\n", "# if the conv layer is before a norm layer, bias is unnecessary.", "\n", "if", "bias", "==", "'auto'", ":", "\n", "            ", "bias", "=", "False", "if", "self", ".", "with_norm", "else", "True", "\n", "", "self", ".", "with_bias", "=", "bias", "\n", "\n", "if", "self", ".", "with_norm", "and", "self", ".", "with_bias", ":", "\n", "            ", "warnings", ".", "warn", "(", "'ConvModule has norm and bias at the same time'", ")", "\n", "\n", "# build convolution layer", "\n", "", "self", ".", "conv", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "# export the attributes of self.conv to a higher level for convenience", "\n", "self", ".", "in_channels", "=", "self", ".", "conv", ".", "in_channels", "\n", "self", ".", "out_channels", "=", "self", ".", "conv", ".", "out_channels", "\n", "self", ".", "kernel_size", "=", "self", ".", "conv", ".", "kernel_size", "\n", "self", ".", "stride", "=", "self", ".", "conv", ".", "stride", "\n", "self", ".", "padding", "=", "self", ".", "conv", ".", "padding", "\n", "self", ".", "dilation", "=", "self", ".", "conv", ".", "dilation", "\n", "self", ".", "transposed", "=", "self", ".", "conv", ".", "transposed", "\n", "self", ".", "output_padding", "=", "self", ".", "conv", ".", "output_padding", "\n", "self", ".", "groups", "=", "self", ".", "conv", ".", "groups", "\n", "\n", "# build normalization layers", "\n", "if", "self", ".", "with_norm", ":", "\n", "# norm layer is after conv layer", "\n", "            ", "if", "order", ".", "index", "(", "'norm'", ")", ">", "order", ".", "index", "(", "'conv'", ")", ":", "\n", "                ", "norm_channels", "=", "out_channels", "\n", "", "else", ":", "\n", "                ", "norm_channels", "=", "in_channels", "\n", "", "self", ".", "norm_name", ",", "norm", "=", "build_norm_layer", "(", "norm_cfg", ",", "norm_channels", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm_name", ",", "norm", ")", "\n", "\n", "# build activation layer", "\n", "", "if", "self", ".", "with_activatation", ":", "\n", "# TODO: introduce `act_cfg` and supports more activation layers", "\n", "            ", "if", "self", ".", "activation", "not", "in", "[", "'relu'", "]", ":", "\n", "                ", "raise", "ValueError", "(", "'{} is currently not supported.'", ".", "format", "(", "\n", "self", ".", "activation", ")", ")", "\n", "", "if", "self", ".", "activation", "==", "'relu'", ":", "\n", "                ", "self", ".", "activate", "=", "nn", ".", "ReLU", "(", "inplace", "=", "inplace", ")", "\n", "\n", "# Use msra init by default", "\n", "", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.ConvModule.norm": [[146, 149], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.ConvModule.init_weights": [[150, 155], ["mmcv.cnn.kaiming_init", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.kaiming_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "nonlinearity", "=", "'relu'", "if", "self", ".", "activation", "is", "None", "else", "self", ".", "activation", "\n", "kaiming_init", "(", "self", ".", "conv", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "if", "self", ".", "with_norm", ":", "\n", "            ", "constant_init", "(", "self", ".", "norm", ",", "1", ",", "bias", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.ConvModule.forward": [[156, 165], ["conv_module.ConvModule.conv", "conv_module.ConvModule.norm", "conv_module.ConvModule.activate"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.ConvModule.norm"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "activate", "=", "True", ",", "norm", "=", "True", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "order", ":", "\n", "            ", "if", "layer", "==", "'conv'", ":", "\n", "                ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "elif", "layer", "==", "'norm'", "and", "norm", "and", "self", ".", "with_norm", ":", "\n", "                ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "elif", "layer", "==", "'act'", "and", "activate", "and", "self", ".", "with_activatation", ":", "\n", "                ", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer": [[16, 42], ["cfg.copy.pop", "conv_layer", "dict", "cfg.copy", "KeyError", "isinstance"], "function", ["None"], ["def", "build_conv_layer", "(", "cfg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Build convolution layer\n\n    Args:\n        cfg (None or dict): cfg should contain:\n            type (str): identify conv layer type.\n            layer args: args needed to instantiate a conv layer.\n\n    Returns:\n        layer (nn.Module): created conv layer\n    \"\"\"", "\n", "if", "cfg", "is", "None", ":", "\n", "        ", "cfg_", "=", "dict", "(", "type", "=", "'Conv'", ")", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "", "layer_type", "=", "cfg_", ".", "pop", "(", "'type'", ")", "\n", "if", "layer_type", "not", "in", "conv_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "'Unrecognized norm type {}'", ".", "format", "(", "layer_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "conv_layer", "=", "conv_cfg", "[", "layer_type", "]", "\n", "\n", "", "layer", "=", "conv_layer", "(", "*", "args", ",", "**", "kwargs", ",", "**", "cfg_", ")", "\n", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.xavier_init": [[5, 13], ["hasattr", "torch.init.xavier_uniform_", "torch.init.xavier_normal_", "torch.init.constant_"], "function", ["None"], ["def", "xavier_init", "(", "module", ",", "gain", "=", "1", ",", "bias", "=", "0", ",", "distribution", "=", "'normal'", ")", ":", "\n", "    ", "assert", "distribution", "in", "[", "'uniform'", ",", "'normal'", "]", "\n", "if", "distribution", "==", "'uniform'", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "module", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "module", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "", "if", "hasattr", "(", "module", ",", "'bias'", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init": [[15, 19], ["torch.init.normal_", "hasattr", "torch.init.constant_"], "function", ["None"], ["", "", "def", "normal_init", "(", "module", ",", "mean", "=", "0", ",", "std", "=", "1", ",", "bias", "=", "0", ")", ":", "\n", "    ", "nn", ".", "init", ".", "normal_", "(", "module", ".", "weight", ",", "mean", ",", "std", ")", "\n", "if", "hasattr", "(", "module", ",", "'bias'", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.uniform_init": [[21, 25], ["torch.init.uniform_", "hasattr", "torch.init.constant_"], "function", ["None"], ["", "", "def", "uniform_init", "(", "module", ",", "a", "=", "0", ",", "b", "=", "1", ",", "bias", "=", "0", ")", ":", "\n", "    ", "nn", ".", "init", ".", "uniform_", "(", "module", ".", "weight", ",", "a", ",", "b", ")", "\n", "if", "hasattr", "(", "module", ",", "'bias'", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.kaiming_init": [[27, 41], ["hasattr", "torch.init.kaiming_uniform_", "torch.init.kaiming_normal_", "torch.init.constant_"], "function", ["None"], ["", "", "def", "kaiming_init", "(", "module", ",", "\n", "mode", "=", "'fan_out'", ",", "\n", "nonlinearity", "=", "'relu'", ",", "\n", "bias", "=", "0", ",", "\n", "distribution", "=", "'normal'", ")", ":", "\n", "    ", "assert", "distribution", "in", "[", "'uniform'", ",", "'normal'", "]", "\n", "if", "distribution", "==", "'uniform'", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "\n", "module", ".", "weight", ",", "mode", "=", "mode", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "", "else", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "module", ".", "weight", ",", "mode", "=", "mode", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "", "if", "hasattr", "(", "module", ",", "'bias'", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.bias_init_with_prob": [[43, 47], ["float", "numpy.log"], "function", ["None"], ["", "", "def", "bias_init_with_prob", "(", "prior_prob", ")", ":", "\n", "    ", "\"\"\" initialize conv/fc bias value according to giving probablity\"\"\"", "\n", "bias_init", "=", "float", "(", "-", "np", ".", "log", "(", "(", "1", "-", "prior_prob", ")", "/", "prior_prob", ")", ")", "\n", "return", "bias_init", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_ws.ConvWS2d.__init__": [[23, 43], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", "ConvWS2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_ws.ConvWS2d.forward": [[44, 47], ["conv_ws.conv_ws_2d"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_ws.conv_ws_2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "conv_ws_2d", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "eps", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_ws.conv_ws_2d": [[5, 19], ["weight.size", "weight.view", "weight.view.mean().view", "weight.view.std().view", "torch.conv2d", "weight.view.mean", "weight.view.std"], "function", ["None"], ["def", "conv_ws_2d", "(", "input", ",", "\n", "weight", ",", "\n", "bias", "=", "None", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "eps", "=", "1e-5", ")", ":", "\n", "    ", "c_in", "=", "weight", ".", "size", "(", "0", ")", "\n", "weight_flat", "=", "weight", ".", "view", "(", "c_in", ",", "-", "1", ")", "\n", "mean", "=", "weight_flat", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "c_in", ",", "1", ",", "1", ",", "1", ")", "\n", "std", "=", "weight_flat", ".", "std", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "c_in", ",", "1", ",", "1", ",", "1", ")", "\n", "weight", "=", "(", "weight", "-", "mean", ")", "/", "(", "std", "+", "eps", ")", "\n", "return", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "bias", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.dist_utils.DistOptimizerHook.__init__": [[46, 50], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "grad_clip", "=", "None", ",", "coalesce", "=", "True", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "grad_clip", "=", "grad_clip", "\n", "self", ".", "coalesce", "=", "coalesce", "\n", "self", ".", "bucket_size_mb", "=", "bucket_size_mb", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.dist_utils.DistOptimizerHook.after_train_iter": [[51, 59], ["runner.optimizer.zero_grad", "runner.outputs[].backward", "dist_utils.allreduce_grads", "runner.optimizer.step", "runner.model.parameters", "dist_utils.DistOptimizerHook.clip_grads", "runner.model.parameters"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.roi_align.roi_align.RoIAlignFunction.backward", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.dist_utils.allreduce_grads"], ["", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "runner", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "runner", ".", "outputs", "[", "'loss'", "]", ".", "backward", "(", ")", "\n", "allreduce_grads", "(", "runner", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "coalesce", ",", "\n", "self", ".", "bucket_size_mb", ")", "\n", "if", "self", ".", "grad_clip", "is", "not", "None", ":", "\n", "            ", "self", ".", "clip_grads", "(", "runner", ".", "model", ".", "parameters", "(", ")", ")", "\n", "", "runner", ".", "optimizer", ".", "step", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.dist_utils._allreduce_coalesced": [[9, 29], ["torch._utils._take_tensors", "collections.OrderedDict", "buckets.values.values", "torch._utils._flatten_dense_tensors", "torch.all_reduce", "torch._utils._flatten_dense_tensors.div_", "zip", "tensor.type", "buckets[].append", "torch._utils._unflatten_dense_tensors", "tensor.copy_"], "function", ["None"], ["def", "_allreduce_coalesced", "(", "tensors", ",", "world_size", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "    ", "if", "bucket_size_mb", ">", "0", ":", "\n", "        ", "bucket_size_bytes", "=", "bucket_size_mb", "*", "1024", "*", "1024", "\n", "buckets", "=", "_take_tensors", "(", "tensors", ",", "bucket_size_bytes", ")", "\n", "", "else", ":", "\n", "        ", "buckets", "=", "OrderedDict", "(", ")", "\n", "for", "tensor", "in", "tensors", ":", "\n", "            ", "tp", "=", "tensor", ".", "type", "(", ")", "\n", "if", "tp", "not", "in", "buckets", ":", "\n", "                ", "buckets", "[", "tp", "]", "=", "[", "]", "\n", "", "buckets", "[", "tp", "]", ".", "append", "(", "tensor", ")", "\n", "", "buckets", "=", "buckets", ".", "values", "(", ")", "\n", "\n", "", "for", "bucket", "in", "buckets", ":", "\n", "        ", "flat_tensors", "=", "_flatten_dense_tensors", "(", "bucket", ")", "\n", "dist", ".", "all_reduce", "(", "flat_tensors", ")", "\n", "flat_tensors", ".", "div_", "(", "world_size", ")", "\n", "for", "tensor", ",", "synced", "in", "zip", "(", "\n", "bucket", ",", "_unflatten_dense_tensors", "(", "flat_tensors", ",", "bucket", ")", ")", ":", "\n", "            ", "tensor", ".", "copy_", "(", "synced", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.dist_utils.allreduce_grads": [[31, 42], ["torch.get_world_size", "dist_utils._allreduce_coalesced", "torch.all_reduce", "tensor.div_"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.dist_utils._allreduce_coalesced"], ["", "", "", "def", "allreduce_grads", "(", "params", ",", "coalesce", "=", "True", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "    ", "grads", "=", "[", "\n", "param", ".", "grad", ".", "data", "for", "param", "in", "params", "\n", "if", "param", ".", "requires_grad", "and", "param", ".", "grad", "is", "not", "None", "\n", "]", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "coalesce", ":", "\n", "        ", "_allreduce_coalesced", "(", "grads", ",", "world_size", ",", "bucket_size_mb", ")", "\n", "", "else", ":", "\n", "        ", "for", "tensor", "in", "grads", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "tensor", ".", "div_", "(", "world_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.misc.tensor2imgs": [[8, 19], ["tensor.size", "numpy.array", "numpy.array", "range", "tensor[].cpu().numpy().transpose", "mmcv.imdenormalize().astype", "imgs.append", "numpy.ascontiguousarray", "tensor[].cpu().numpy", "mmcv.imdenormalize", "tensor[].cpu"], "function", ["None"], ["def", "tensor2imgs", "(", "tensor", ",", "mean", "=", "(", "0", ",", "0", ",", "0", ")", ",", "std", "=", "(", "1", ",", "1", ",", "1", ")", ",", "to_rgb", "=", "True", ")", ":", "\n", "    ", "num_imgs", "=", "tensor", ".", "size", "(", "0", ")", "\n", "mean", "=", "np", ".", "array", "(", "mean", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "std", "=", "np", ".", "array", "(", "std", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "imgs", "=", "[", "]", "\n", "for", "img_id", "in", "range", "(", "num_imgs", ")", ":", "\n", "        ", "img", "=", "tensor", "[", "img_id", ",", "...", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "img", "=", "mmcv", ".", "imdenormalize", "(", "\n", "img", ",", "mean", ",", "std", ",", "to_bgr", "=", "to_rgb", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imgs", ".", "append", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", "\n", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.misc.multi_apply": [[21, 25], ["six.moves.map", "tuple", "functools.partial", "six.moves.map", "six.moves.zip"], "function", ["None"], ["", "def", "multi_apply", "(", "func", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "pfunc", "=", "partial", "(", "func", ",", "**", "kwargs", ")", "if", "kwargs", "else", "func", "\n", "map_results", "=", "map", "(", "pfunc", ",", "*", "args", ")", "\n", "return", "tuple", "(", "map", "(", "list", ",", "zip", "(", "*", "map_results", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.utils.misc.unmap": [[27, 38], ["data.dim", "data.new_full", "data.new_full", "data.size"], "function", ["None"], ["", "def", "unmap", "(", "data", ",", "count", ",", "inds", ",", "fill", "=", "0", ")", ":", "\n", "    ", "\"\"\" Unmap a subset of item (data) back to the original set of items (of\n    size count) \"\"\"", "\n", "if", "data", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "ret", "=", "data", ".", "new_full", "(", "(", "count", ",", ")", ",", "fill", ")", "\n", "ret", "[", "inds", "]", "=", "data", "\n", "", "else", ":", "\n", "        ", "new_size", "=", "(", "count", ",", ")", "+", "data", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "ret", "=", "data", ".", "new_full", "(", "new_size", ",", "fill", ")", "\n", "ret", "[", "inds", ",", ":", "]", "=", "data", "\n", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.custom.CustomDataset.__init__": [[40, 133], ["custom.CustomDataset.load_annotations", "mmcv.is_list_of", "transforms.ImageTransform", "transforms.BboxTransform", "transforms.MaskTransform", "transforms.SegMapTransform", "transforms.Numpy2Tensor", "custom.CustomDataset.load_proposals", "isinstance", "custom.CustomDataset._set_group_flag", "extra_aug.ExtraAugmentation", "custom.CustomDataset._filter_imgs"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.datasets.lvis.LvisDataset.load_annotations", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.custom.CustomDataset.load_proposals", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.custom.CustomDataset._set_group_flag", "home.repos.pwc.inspect_result.twangnh_SimCal.demo.get_class_images_lvis.LvisGtAnnVis._filter_imgs"], ["def", "__init__", "(", "self", ",", "\n", "ann_file", ",", "\n", "img_prefix", ",", "\n", "img_scale", ",", "\n", "img_norm_cfg", ",", "\n", "multiscale_mode", "=", "'value'", ",", "\n", "size_divisor", "=", "None", ",", "\n", "proposal_file", "=", "None", ",", "\n", "num_max_proposals", "=", "1000", ",", "\n", "flip_ratio", "=", "0", ",", "\n", "with_mask", "=", "True", ",", "\n", "with_crowd", "=", "True", ",", "\n", "with_label", "=", "True", ",", "\n", "with_semantic_seg", "=", "False", ",", "\n", "seg_prefix", "=", "None", ",", "\n", "seg_scale_factor", "=", "1", ",", "\n", "extra_aug", "=", "None", ",", "\n", "resize_keep_ratio", "=", "True", ",", "\n", "test_mode", "=", "False", ",", "\n", "test_with_gt", "=", "False", "\n", ")", ":", "\n", "# prefix of images path", "\n", "        ", "self", ".", "img_prefix", "=", "img_prefix", "\n", "\n", "# load annotations (and proposals)", "\n", "self", ".", "img_infos", "=", "self", ".", "load_annotations", "(", "ann_file", ")", "\n", "if", "proposal_file", "is", "not", "None", ":", "\n", "            ", "self", ".", "proposals", "=", "self", ".", "load_proposals", "(", "proposal_file", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "proposals", "=", "None", "\n", "# filter images with no annotation during training", "\n", "", "if", "not", "test_mode", ":", "\n", "            ", "if", "not", "test_with_gt", ":", "\n", "                ", "valid_inds", "=", "self", ".", "_filter_imgs", "(", ")", "\n", "self", ".", "img_infos", "=", "[", "self", ".", "img_infos", "[", "i", "]", "for", "i", "in", "valid_inds", "]", "\n", "if", "self", ".", "proposals", "is", "not", "None", ":", "\n", "                    ", "self", ".", "proposals", "=", "[", "self", ".", "proposals", "[", "i", "]", "for", "i", "in", "valid_inds", "]", "\n", "\n", "# (long_edge, short_edge) or [(long1, short1), (long2, short2), ...]", "\n", "", "", "", "self", ".", "img_scales", "=", "img_scale", "if", "isinstance", "(", "img_scale", ",", "\n", "list", ")", "else", "[", "img_scale", "]", "\n", "assert", "mmcv", ".", "is_list_of", "(", "self", ".", "img_scales", ",", "tuple", ")", "\n", "# normalization configs", "\n", "self", ".", "img_norm_cfg", "=", "img_norm_cfg", "\n", "\n", "# multi-scale mode (only applicable for multi-scale training)", "\n", "self", ".", "multiscale_mode", "=", "multiscale_mode", "\n", "assert", "multiscale_mode", "in", "[", "'value'", ",", "'range'", "]", "\n", "\n", "# max proposals per image", "\n", "self", ".", "num_max_proposals", "=", "num_max_proposals", "\n", "# flip ratio", "\n", "self", ".", "flip_ratio", "=", "flip_ratio", "\n", "assert", "flip_ratio", ">=", "0", "and", "flip_ratio", "<=", "1", "\n", "# padding border to ensure the image size can be divided by", "\n", "# size_divisor (used for FPN)", "\n", "self", ".", "size_divisor", "=", "size_divisor", "\n", "\n", "# with mask or not (reserved field, takes no effect)", "\n", "self", ".", "with_mask", "=", "with_mask", "\n", "# some datasets provide bbox annotations as ignore/crowd/difficult,", "\n", "# if `with_crowd` is True, then these info is returned.", "\n", "self", ".", "with_crowd", "=", "with_crowd", "\n", "# with label is False for RPN", "\n", "self", ".", "with_label", "=", "with_label", "\n", "# with semantic segmentation (stuff) annotation or not", "\n", "self", ".", "with_seg", "=", "with_semantic_seg", "\n", "# prefix of semantic segmentation map path", "\n", "self", ".", "seg_prefix", "=", "seg_prefix", "\n", "# rescale factor for segmentation maps", "\n", "self", ".", "seg_scale_factor", "=", "seg_scale_factor", "\n", "# in test mode or not", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "\n", "# set group flag for the sampler", "\n", "if", "not", "self", ".", "test_mode", ":", "\n", "            ", "self", ".", "_set_group_flag", "(", ")", "\n", "# transforms", "\n", "", "self", ".", "img_transform", "=", "ImageTransform", "(", "\n", "size_divisor", "=", "self", ".", "size_divisor", ",", "**", "self", ".", "img_norm_cfg", ")", "\n", "self", ".", "bbox_transform", "=", "BboxTransform", "(", ")", "\n", "self", ".", "mask_transform", "=", "MaskTransform", "(", ")", "\n", "self", ".", "seg_transform", "=", "SegMapTransform", "(", "self", ".", "size_divisor", ")", "\n", "self", ".", "numpy2tensor", "=", "Numpy2Tensor", "(", ")", "\n", "\n", "# if use extra augmentation", "\n", "if", "extra_aug", "is", "not", "None", ":", "\n", "            ", "self", ".", "extra_aug", "=", "ExtraAugmentation", "(", "**", "extra_aug", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "extra_aug", "=", "None", "\n", "\n", "# image rescale if keep ratio", "\n", "", "self", ".", "resize_keep_ratio", "=", "resize_keep_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.custom.CustomDataset.__len__": [[134, 136], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.custom.CustomDataset.load_annotations": [[137, 139], ["mmcv.load"], "methods", ["None"], ["", "def", "load_annotations", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "return", "mmcv", ".", "load", "(", "ann_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.custom.CustomDataset.load_proposals": [[140, 142], ["mmcv.load"], "methods", ["None"], ["", "def", "load_proposals", "(", "self", ",", "proposal_file", ")", ":", "\n", "        ", "return", "mmcv", ".", "load", "(", "proposal_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.custom.CustomDataset.get_ann_info": [[143, 145], ["None"], "methods", ["None"], ["", "def", "get_ann_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "img_infos", "[", "idx", "]", "[", "'ann'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.custom.CustomDataset._filter_imgs": [[146, 153], ["enumerate", "min", "valid_inds.append"], "methods", ["None"], ["", "def", "_filter_imgs", "(", "self", ",", "min_size", "=", "32", ")", ":", "\n", "        ", "\"\"\"Filter images too small.\"\"\"", "\n", "valid_inds", "=", "[", "]", "\n", "for", "i", ",", "img_info", "in", "enumerate", "(", "self", ".", "img_infos", ")", ":", "\n", "            ", "if", "min", "(", "img_info", "[", "'width'", "]", ",", "img_info", "[", "'height'", "]", ")", ">=", "min_size", ":", "\n", "                ", "valid_inds", ".", "append", "(", "i", ")", "\n", "", "", "return", "valid_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.custom.CustomDataset._set_group_flag": [[154, 165], ["numpy.zeros", "range", "len", "len"], "methods", ["None"], ["", "def", "_set_group_flag", "(", "self", ")", ":", "\n", "        ", "\"\"\"Set flag according to image aspect ratio.\n\n        Images with aspect ratio greater than 1 will be set as group 1,\n        otherwise group 0.\n        \"\"\"", "\n", "self", ".", "flag", "=", "np", ".", "zeros", "(", "len", "(", "self", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "img_info", "=", "self", ".", "img_infos", "[", "i", "]", "\n", "if", "img_info", "[", "'width'", "]", "/", "img_info", "[", "'height'", "]", ">", "1", ":", "\n", "                ", "self", ".", "flag", "[", "i", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.custom.CustomDataset._rand_another": [[166, 169], ["numpy.random.choice", "numpy.where"], "methods", ["None"], ["", "", "", "def", "_rand_another", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pool", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "self", ".", "flag", "[", "idx", "]", ")", "[", "0", "]", "\n", "return", "np", ".", "random", ".", "choice", "(", "pool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.custom.CustomDataset.__getitem__": [[170, 179], ["custom.CustomDataset.prepare_test_img", "custom.CustomDataset.prepare_train_img", "custom.CustomDataset._rand_another"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.datasets.custom.CustomDataset.prepare_test_img", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.custom.CustomDataset.prepare_train_img", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.custom.CustomDataset._rand_another"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "test_mode", ":", "\n", "            ", "return", "self", ".", "prepare_test_img", "(", "idx", ")", "\n", "", "while", "True", ":", "\n", "            ", "data", "=", "self", ".", "prepare_train_img", "(", "idx", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "idx", "=", "self", ".", "_rand_another", "(", "idx", ")", "\n", "continue", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.custom.CustomDataset.prepare_train_img": [[180, 274], ["[].startswith", "custom.CustomDataset.get_ann_info", "utils.random_scale", "custom.CustomDataset.img_transform", "mmcv.imread.copy", "custom.CustomDataset.bbox_transform", "dict", "dict", "mmcv.imread", "mmcv.imread", "len", "custom.CustomDataset.extra_aug", "mmcv.imread", "custom.CustomDataset.seg_transform", "mmcv.imrescale", "custom.CustomDataset.bbox_transform", "custom.CustomDataset.bbox_transform", "custom.CustomDataset.mask_transform", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "os.join", "os.join", "len", "AssertionError", "numpy.random.rand", "os.join", "mmcv.imrescale.squeeze", "numpy.hstack", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "utils.to_tensor", "utils.to_tensor", "utils.to_tensor", "utils.to_tensor", "img_info[].replace", "utils.to_tensor", "utils.to_tensor"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.datasets.lvis.LvisDataset.get_ann_info", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.utils.random_scale", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.utils.to_tensor"], ["", "", "def", "prepare_train_img", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_info", "=", "self", ".", "img_infos", "[", "idx", "]", "\n", "\n", "# load image", "\n", "if", "self", ".", "img_infos", "[", "idx", "]", "[", "'filename'", "]", ".", "startswith", "(", "'COCO'", ")", ":", "\n", "            ", "img", "=", "mmcv", ".", "imread", "(", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "img_info", "[", "'filename'", "]", "[", "13", ":", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "mmcv", ".", "imread", "(", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "img_info", "[", "'filename'", "]", ")", ")", "\n", "# load proposals if necessary", "\n", "", "if", "self", ".", "proposals", "is", "not", "None", ":", "\n", "            ", "proposals", "=", "self", ".", "proposals", "[", "idx", "]", "[", ":", "self", ".", "num_max_proposals", "]", "\n", "# TODO: Handle empty proposals properly. Currently images with", "\n", "# no proposals are just ignored, but they can be used for", "\n", "# training in concept.", "\n", "if", "len", "(", "proposals", ")", "==", "0", ":", "\n", "                ", "return", "None", "\n", "", "if", "not", "(", "proposals", ".", "shape", "[", "1", "]", "==", "4", "or", "proposals", ".", "shape", "[", "1", "]", "==", "5", ")", ":", "\n", "                ", "raise", "AssertionError", "(", "\n", "'proposals should have shapes (n, 4) or (n, 5), '", "\n", "'but found {}'", ".", "format", "(", "proposals", ".", "shape", ")", ")", "\n", "", "if", "proposals", ".", "shape", "[", "1", "]", "==", "5", ":", "\n", "                ", "scores", "=", "proposals", "[", ":", ",", "4", ",", "None", "]", "\n", "proposals", "=", "proposals", "[", ":", ",", ":", "4", "]", "\n", "", "else", ":", "\n", "                ", "scores", "=", "None", "\n", "\n", "", "", "ann", "=", "self", ".", "get_ann_info", "(", "idx", ")", "\n", "gt_bboxes", "=", "ann", "[", "'bboxes'", "]", "\n", "gt_labels", "=", "ann", "[", "'labels'", "]", "\n", "if", "self", ".", "with_crowd", ":", "\n", "            ", "gt_bboxes_ignore", "=", "ann", "[", "'bboxes_ignore'", "]", "\n", "\n", "# skip the image if there is no valid gt bbox", "\n", "", "if", "len", "(", "gt_bboxes", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "# extra augmentation", "\n", "", "if", "self", ".", "extra_aug", "is", "not", "None", ":", "\n", "            ", "img", ",", "gt_bboxes", ",", "gt_labels", "=", "self", ".", "extra_aug", "(", "img", ",", "gt_bboxes", ",", "\n", "gt_labels", ")", "\n", "\n", "# apply transforms", "\n", "", "flip", "=", "True", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "flip_ratio", "else", "False", "\n", "# randomly sample a scale", "\n", "img_scale", "=", "random_scale", "(", "self", ".", "img_scales", ",", "self", ".", "multiscale_mode", ")", "\n", "img", ",", "img_shape", ",", "pad_shape", ",", "scale_factor", "=", "self", ".", "img_transform", "(", "\n", "img", ",", "img_scale", ",", "flip", ",", "keep_ratio", "=", "self", ".", "resize_keep_ratio", ")", "\n", "img", "=", "img", ".", "copy", "(", ")", "\n", "if", "self", ".", "with_seg", ":", "\n", "            ", "gt_seg", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "self", ".", "seg_prefix", ",", "img_info", "[", "'file_name'", "]", ".", "replace", "(", "\n", "'jpg'", ",", "'png'", ")", ")", ",", "\n", "flag", "=", "'unchanged'", ")", "\n", "gt_seg", "=", "self", ".", "seg_transform", "(", "gt_seg", ".", "squeeze", "(", ")", ",", "img_scale", ",", "flip", ")", "\n", "gt_seg", "=", "mmcv", ".", "imrescale", "(", "\n", "gt_seg", ",", "self", ".", "seg_scale_factor", ",", "interpolation", "=", "'nearest'", ")", "\n", "gt_seg", "=", "gt_seg", "[", "None", ",", "...", "]", "\n", "", "if", "self", ".", "proposals", "is", "not", "None", ":", "\n", "            ", "proposals", "=", "self", ".", "bbox_transform", "(", "proposals", ",", "img_shape", ",", "scale_factor", ",", "\n", "flip", ")", "\n", "proposals", "=", "np", ".", "hstack", "(", "\n", "[", "proposals", ",", "scores", "]", ")", "if", "scores", "is", "not", "None", "else", "proposals", "\n", "", "gt_bboxes", "=", "self", ".", "bbox_transform", "(", "gt_bboxes", ",", "img_shape", ",", "scale_factor", ",", "\n", "flip", ")", "\n", "if", "self", ".", "with_crowd", ":", "\n", "            ", "gt_bboxes_ignore", "=", "self", ".", "bbox_transform", "(", "gt_bboxes_ignore", ",", "img_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "gt_masks", "=", "self", ".", "mask_transform", "(", "ann", "[", "'masks'", "]", ",", "pad_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "\n", "", "ori_shape", "=", "(", "img_info", "[", "'height'", "]", ",", "img_info", "[", "'width'", "]", ",", "3", ")", "\n", "img_meta", "=", "dict", "(", "\n", "ori_shape", "=", "ori_shape", ",", "\n", "img_shape", "=", "img_shape", ",", "\n", "pad_shape", "=", "pad_shape", ",", "\n", "scale_factor", "=", "scale_factor", ",", "\n", "flip", "=", "flip", ")", "\n", "\n", "data", "=", "dict", "(", "\n", "img", "=", "DC", "(", "to_tensor", "(", "img", ")", ",", "stack", "=", "True", ")", ",", "\n", "img_meta", "=", "DC", "(", "img_meta", ",", "cpu_only", "=", "True", ")", ",", "\n", "gt_bboxes", "=", "DC", "(", "to_tensor", "(", "gt_bboxes", ")", ")", ")", "\n", "if", "self", ".", "proposals", "is", "not", "None", ":", "\n", "            ", "data", "[", "'proposals'", "]", "=", "DC", "(", "to_tensor", "(", "proposals", ")", ")", "\n", "", "if", "self", ".", "with_label", ":", "\n", "            ", "data", "[", "'gt_labels'", "]", "=", "DC", "(", "to_tensor", "(", "gt_labels", ")", ")", "\n", "", "if", "self", ".", "with_crowd", ":", "\n", "            ", "data", "[", "'gt_bboxes_ignore'", "]", "=", "DC", "(", "to_tensor", "(", "gt_bboxes_ignore", ")", ")", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "data", "[", "'gt_masks'", "]", "=", "DC", "(", "gt_masks", ",", "cpu_only", "=", "True", ")", "\n", "", "if", "self", ".", "with_seg", ":", "\n", "            ", "data", "[", "'gt_semantic_seg'", "]", "=", "DC", "(", "to_tensor", "(", "gt_seg", ")", ",", "stack", "=", "True", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.custom.CustomDataset.prepare_test_img": [[275, 341], ["[].startswith", "custom.CustomDataset.prepare_test_img.prepare_single"], "methods", ["None"], ["", "def", "prepare_test_img", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Prepare an image for testing (multi-scale and flipping)\"\"\"", "\n", "\n", "img_info", "=", "self", ".", "img_infos", "[", "idx", "]", "\n", "# print('{} \\n'.format(idx))", "\n", "if", "self", ".", "img_infos", "[", "idx", "]", "[", "'filename'", "]", ".", "startswith", "(", "'COCO'", ")", ":", "\n", "            ", "img", "=", "mmcv", ".", "imread", "(", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "img_info", "[", "'filename'", "]", "[", "13", ":", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "mmcv", ".", "imread", "(", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "img_info", "[", "'filename'", "]", ")", ")", "\n", "", "if", "self", ".", "proposals", "is", "not", "None", ":", "\n", "            ", "proposal", "=", "self", ".", "proposals", "[", "idx", "]", "[", ":", "self", ".", "num_max_proposals", "]", "\n", "if", "not", "(", "proposal", ".", "shape", "[", "1", "]", "==", "4", "or", "proposal", ".", "shape", "[", "1", "]", "==", "5", ")", ":", "\n", "                ", "raise", "AssertionError", "(", "\n", "'proposals should have shapes (n, 4) or (n, 5), '", "\n", "'but found {}'", ".", "format", "(", "proposal", ".", "shape", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "proposal", "=", "None", "\n", "\n", "", "def", "prepare_single", "(", "img", ",", "scale", ",", "flip", ",", "proposal", "=", "None", ")", ":", "\n", "            ", "_img", ",", "img_shape", ",", "pad_shape", ",", "scale_factor", "=", "self", ".", "img_transform", "(", "\n", "img", ",", "scale", ",", "flip", ",", "keep_ratio", "=", "self", ".", "resize_keep_ratio", ")", "\n", "_img", "=", "to_tensor", "(", "_img", ")", "\n", "_img_meta", "=", "dict", "(", "\n", "ori_shape", "=", "(", "img_info", "[", "'height'", "]", ",", "img_info", "[", "'width'", "]", ",", "3", ")", ",", "\n", "img_shape", "=", "img_shape", ",", "\n", "pad_shape", "=", "pad_shape", ",", "\n", "scale_factor", "=", "scale_factor", ",", "\n", "flip", "=", "flip", ")", "\n", "if", "proposal", "is", "not", "None", ":", "\n", "                ", "if", "proposal", ".", "shape", "[", "1", "]", "==", "5", ":", "\n", "                    ", "score", "=", "proposal", "[", ":", ",", "4", ",", "None", "]", "\n", "proposal", "=", "proposal", "[", ":", ",", ":", "4", "]", "\n", "", "else", ":", "\n", "                    ", "score", "=", "None", "\n", "", "_proposal", "=", "self", ".", "bbox_transform", "(", "proposal", ",", "img_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "_proposal", "=", "np", ".", "hstack", "(", "\n", "[", "_proposal", ",", "score", "]", ")", "if", "score", "is", "not", "None", "else", "_proposal", "\n", "_proposal", "=", "to_tensor", "(", "_proposal", ")", "\n", "", "else", ":", "\n", "                ", "_proposal", "=", "None", "\n", "", "return", "_img", ",", "_img_meta", ",", "_proposal", "\n", "\n", "", "assert", "len", "(", "self", ".", "img_scales", ")", "==", "1", "#multi scale not implemented", "\n", "_img", ",", "_img_meta", ",", "_proposal", "=", "prepare_single", "(", "\n", "img", ",", "self", ".", "img_scales", "[", "0", "]", ",", "False", ",", "proposal", ")", "\n", "imgs", "=", "_img", "\n", "img_metas", "=", "DC", "(", "_img_meta", ",", "cpu_only", "=", "True", ")", "\n", "proposals", "=", "_proposal", "\n", "\n", "# for scale in self.img_scales:", "\n", "#     _img, _img_meta, _proposal = prepare_single(", "\n", "#         img, scale, False, proposal)", "\n", "#     imgs.append(_img)", "\n", "#     img_metas.append(DC(_img_meta, cpu_only=True))", "\n", "#     proposals.append(_proposal)", "\n", "#     if self.flip_ratio > 0:", "\n", "#         _img, _img_meta, _proposal = prepare_single(", "\n", "#             img, scale, True, proposal)", "\n", "#         imgs.append(_img)", "\n", "#         img_metas.append(DC(_img_meta, cpu_only=True))", "\n", "#         proposals.append(_proposal)", "\n", "data", "=", "dict", "(", "img", "=", "imgs", ",", "img_meta", "=", "img_metas", ")", "\n", "if", "self", ".", "proposals", "is", "not", "None", ":", "\n", "            ", "data", "[", "'proposals'", "]", "=", "proposals", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.transforms.ImageTransform.__init__": [[21, 30], ["numpy.array", "numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "mean", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "std", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "to_rgb", "=", "True", ",", "\n", "size_divisor", "=", "None", ")", ":", "\n", "        ", "self", ".", "mean", "=", "np", ".", "array", "(", "mean", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "std", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "to_rgb", "=", "to_rgb", "\n", "self", ".", "size_divisor", "=", "size_divisor", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.transforms.ImageTransform.__call__": [[31, 50], ["mmcv.imnormalize", "mmcv.impad_to_multiple.transpose", "mmcv.imrescale", "mmcv.imresize", "numpy.array", "mmcv.imflip", "mmcv.impad_to_multiple"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "scale", ",", "flip", "=", "False", ",", "keep_ratio", "=", "True", ")", ":", "\n", "        ", "if", "keep_ratio", ":", "\n", "            ", "img", ",", "scale_factor", "=", "mmcv", ".", "imrescale", "(", "img", ",", "scale", ",", "return_scale", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "img", ",", "w_scale", ",", "h_scale", "=", "mmcv", ".", "imresize", "(", "\n", "img", ",", "scale", ",", "return_scale", "=", "True", ")", "\n", "scale_factor", "=", "np", ".", "array", "(", "\n", "[", "w_scale", ",", "h_scale", ",", "w_scale", ",", "h_scale", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "img_shape", "=", "img", ".", "shape", "\n", "img", "=", "mmcv", ".", "imnormalize", "(", "img", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "to_rgb", ")", "\n", "if", "flip", ":", "\n", "            ", "img", "=", "mmcv", ".", "imflip", "(", "img", ")", "\n", "", "if", "self", ".", "size_divisor", "is", "not", "None", ":", "\n", "            ", "img", "=", "mmcv", ".", "impad_to_multiple", "(", "img", ",", "self", ".", "size_divisor", ")", "\n", "pad_shape", "=", "img", ".", "shape", "\n", "", "else", ":", "\n", "            ", "pad_shape", "=", "img_shape", "\n", "", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "return", "img", ",", "img_shape", ",", "pad_shape", ",", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.transforms.BboxTransform.__init__": [[75, 77], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_num_gts", "=", "None", ")", ":", "\n", "        ", "self", ".", "max_num_gts", "=", "max_num_gts", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.transforms.BboxTransform.__call__": [[78, 91], ["numpy.clip", "numpy.clip", "transforms.bbox_flip", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox_flip"], ["", "def", "__call__", "(", "self", ",", "bboxes", ",", "img_shape", ",", "scale_factor", ",", "flip", "=", "False", ")", ":", "\n", "        ", "gt_bboxes", "=", "bboxes", "*", "scale_factor", "\n", "if", "flip", ":", "\n", "            ", "gt_bboxes", "=", "bbox_flip", "(", "gt_bboxes", ",", "img_shape", ")", "\n", "", "gt_bboxes", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "gt_bboxes", "[", ":", ",", "0", ":", ":", "2", "]", ",", "0", ",", "img_shape", "[", "1", "]", "-", "1", ")", "\n", "gt_bboxes", "[", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "gt_bboxes", "[", ":", ",", "1", ":", ":", "2", "]", ",", "0", ",", "img_shape", "[", "0", "]", "-", "1", ")", "\n", "if", "self", ".", "max_num_gts", "is", "None", ":", "\n", "            ", "return", "gt_bboxes", "\n", "", "else", ":", "\n", "            ", "num_gts", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "padded_bboxes", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_num_gts", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "padded_bboxes", "[", ":", "num_gts", ",", ":", "]", "=", "gt_bboxes", "\n", "return", "padded_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.transforms.MaskTransform.__call__": [[101, 113], ["numpy.stack", "mmcv.imrescale", "mmcv.impad"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "masks", ",", "pad_shape", ",", "scale_factor", ",", "flip", "=", "False", ")", ":", "\n", "        ", "masks", "=", "[", "\n", "mmcv", ".", "imrescale", "(", "mask", ",", "scale_factor", ",", "interpolation", "=", "'nearest'", ")", "\n", "for", "mask", "in", "masks", "\n", "]", "\n", "if", "flip", ":", "\n", "            ", "masks", "=", "[", "mask", "[", ":", ",", ":", ":", "-", "1", "]", "for", "mask", "in", "masks", "]", "\n", "", "padded_masks", "=", "[", "\n", "mmcv", ".", "impad", "(", "mask", ",", "pad_shape", "[", ":", "2", "]", ",", "pad_val", "=", "0", ")", "for", "mask", "in", "masks", "\n", "]", "\n", "padded_masks", "=", "np", ".", "stack", "(", "padded_masks", ",", "axis", "=", "0", ")", "\n", "return", "padded_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.transforms.SegMapTransform.__init__": [[123, 125], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size_divisor", "=", "None", ")", ":", "\n", "        ", "self", ".", "size_divisor", "=", "size_divisor", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.transforms.SegMapTransform.__call__": [[126, 136], ["mmcv.imrescale", "mmcv.imresize", "mmcv.imflip", "mmcv.impad_to_multiple"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "scale", ",", "flip", "=", "False", ",", "keep_ratio", "=", "True", ")", ":", "\n", "        ", "if", "keep_ratio", ":", "\n", "            ", "img", "=", "mmcv", ".", "imrescale", "(", "img", ",", "scale", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "mmcv", ".", "imresize", "(", "img", ",", "scale", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "if", "flip", ":", "\n", "            ", "img", "=", "mmcv", ".", "imflip", "(", "img", ")", "\n", "", "if", "self", ".", "size_divisor", "is", "not", "None", ":", "\n", "            ", "img", "=", "mmcv", ".", "impad_to_multiple", "(", "img", ",", "self", ".", "size_divisor", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.transforms.Numpy2Tensor.__init__": [[140, 142], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.transforms.Numpy2Tensor.__call__": [[143, 148], ["len", "torch.from_numpy", "tuple", "torch.from_numpy", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "args", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "[", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "array", ")", ")", "for", "array", "in", "args", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.transforms.bbox_flip": [[52, 65], ["bboxes.copy"], "function", ["None"], ["", "", "def", "bbox_flip", "(", "bboxes", ",", "img_shape", ")", ":", "\n", "    ", "\"\"\"Flip bboxes horizontally.\n\n    Args:\n        bboxes(ndarray): shape (..., 4*k)\n        img_shape(tuple): (height, width)\n    \"\"\"", "\n", "assert", "bboxes", ".", "shape", "[", "-", "1", "]", "%", "4", "==", "0", "\n", "w", "=", "img_shape", "[", "1", "]", "\n", "flipped", "=", "bboxes", ".", "copy", "(", ")", "\n", "flipped", "[", "...", ",", "0", ":", ":", "4", "]", "=", "w", "-", "bboxes", "[", "...", ",", "2", ":", ":", "4", "]", "-", "1", "\n", "flipped", "[", "...", ",", "2", ":", ":", "4", "]", "=", "w", "-", "bboxes", "[", "...", ",", "0", ":", ":", "4", "]", "-", "1", "\n", "return", "flipped", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.coco.CocoDataset.load_annotations": [[27, 41], ["cocoapi.PythonAPI.pycocotools.coco.COCO", "coco.CocoDataset.coco.getCatIds", "coco.CocoDataset.coco.getImgIds", "img_infos.append", "enumerate", "coco.CocoDataset.coco.loadImgs"], "methods", ["None"], ["def", "load_annotations", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "self", ".", "coco", "=", "COCO", "(", "ann_file", ")", "\n", "self", ".", "cat_ids", "=", "self", ".", "coco", ".", "getCatIds", "(", ")", "\n", "self", ".", "cat2label", "=", "{", "\n", "cat_id", ":", "i", "+", "1", "\n", "for", "i", ",", "cat_id", "in", "enumerate", "(", "self", ".", "cat_ids", ")", "\n", "}", "\n", "self", ".", "img_ids", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "img_infos", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "img_ids", ":", "\n", "            ", "info", "=", "self", ".", "coco", ".", "loadImgs", "(", "[", "i", "]", ")", "[", "0", "]", "\n", "info", "[", "'filename'", "]", "=", "info", "[", "'file_name'", "]", "\n", "img_infos", ".", "append", "(", "info", ")", "\n", "", "return", "img_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.coco.CocoDataset.get_ann_info": [[42, 47], ["coco.CocoDataset.coco.getAnnIds", "coco.CocoDataset.coco.loadAnns", "coco.CocoDataset._parse_ann_info"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.datasets.lvis.LvisDataset._parse_ann_info"], ["", "def", "get_ann_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "img_infos", "[", "idx", "]", "[", "'id'", "]", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "ann_info", "=", "self", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "return", "self", ".", "_parse_ann_info", "(", "ann_info", ",", "self", ".", "with_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.coco.CocoDataset._filter_imgs": [[48, 58], ["set", "enumerate", "min", "valid_inds.append", "coco.CocoDataset.coco.anns.values"], "methods", ["None"], ["", "def", "_filter_imgs", "(", "self", ",", "min_size", "=", "32", ")", ":", "\n", "        ", "\"\"\"Filter images too small or without ground truths.\"\"\"", "\n", "valid_inds", "=", "[", "]", "\n", "ids_with_ann", "=", "set", "(", "_", "[", "'image_id'", "]", "for", "_", "in", "self", ".", "coco", ".", "anns", ".", "values", "(", ")", ")", "\n", "for", "i", ",", "img_info", "in", "enumerate", "(", "self", ".", "img_infos", ")", ":", "\n", "            ", "if", "self", ".", "img_ids", "[", "i", "]", "not", "in", "ids_with_ann", ":", "\n", "                ", "continue", "\n", "", "if", "min", "(", "img_info", "[", "'width'", "]", ",", "img_info", "[", "'height'", "]", ")", ">=", "min_size", ":", "\n", "                ", "valid_inds", ".", "append", "(", "i", ")", "\n", "", "", "return", "valid_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.coco.CocoDataset._parse_ann_info": [[59, 122], ["enumerate", "dict", "dict.get", "numpy.array", "numpy.array", "numpy.zeros", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros.append", "numpy.zeros.append", "numpy.array.append", "gt_masks.append", "gt_mask_polys.append", "gt_poly_lens.extend", "coco.CocoDataset.coco.annToMask", "len", "len"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get"], ["", "def", "_parse_ann_info", "(", "self", ",", "ann_info", ",", "with_mask", "=", "True", ")", ":", "\n", "        ", "\"\"\"Parse bbox and mask annotation.\n\n        Args:\n            ann_info (list[dict]): Annotation info of an image.\n            with_mask (bool): Whether to parse mask annotations.\n\n        Returns:\n            dict: A dict containing the following keys: bboxes, bboxes_ignore,\n                labels, masks, mask_polys, poly_lens.\n        \"\"\"", "\n", "gt_bboxes", "=", "[", "]", "\n", "gt_labels", "=", "[", "]", "\n", "gt_bboxes_ignore", "=", "[", "]", "\n", "# Two formats are provided.", "\n", "# 1. mask: a binary map of the same size of the image.", "\n", "# 2. polys: each mask consists of one or several polys, each poly is a", "\n", "# list of float.", "\n", "if", "with_mask", ":", "\n", "            ", "gt_masks", "=", "[", "]", "\n", "gt_mask_polys", "=", "[", "]", "\n", "gt_poly_lens", "=", "[", "]", "\n", "", "for", "i", ",", "ann", "in", "enumerate", "(", "ann_info", ")", ":", "\n", "            ", "if", "ann", ".", "get", "(", "'ignore'", ",", "False", ")", ":", "\n", "                ", "continue", "\n", "", "x1", ",", "y1", ",", "w", ",", "h", "=", "ann", "[", "'bbox'", "]", "\n", "if", "ann", "[", "'area'", "]", "<=", "0", "or", "w", "<", "1", "or", "h", "<", "1", ":", "\n", "                ", "continue", "\n", "", "bbox", "=", "[", "x1", ",", "y1", ",", "x1", "+", "w", "-", "1", ",", "y1", "+", "h", "-", "1", "]", "\n", "if", "ann", "[", "'iscrowd'", "]", ":", "\n", "                ", "gt_bboxes_ignore", ".", "append", "(", "bbox", ")", "\n", "", "else", ":", "\n", "                ", "gt_bboxes", ".", "append", "(", "bbox", ")", "\n", "gt_labels", ".", "append", "(", "self", ".", "cat2label", "[", "ann", "[", "'category_id'", "]", "]", ")", "\n", "", "if", "with_mask", ":", "\n", "                ", "gt_masks", ".", "append", "(", "self", ".", "coco", ".", "annToMask", "(", "ann", ")", ")", "\n", "mask_polys", "=", "[", "\n", "p", "for", "p", "in", "ann", "[", "'segmentation'", "]", "if", "len", "(", "p", ")", ">=", "6", "\n", "]", "# valid polygons have >= 3 points (6 coordinates)", "\n", "poly_lens", "=", "[", "len", "(", "p", ")", "for", "p", "in", "mask_polys", "]", "\n", "gt_mask_polys", ".", "append", "(", "mask_polys", ")", "\n", "gt_poly_lens", ".", "extend", "(", "poly_lens", ")", "\n", "", "", "if", "gt_bboxes", ":", "\n", "            ", "gt_bboxes", "=", "np", ".", "array", "(", "gt_bboxes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_labels", "=", "np", ".", "array", "(", "gt_labels", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "else", ":", "\n", "            ", "gt_bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_labels", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "", "if", "gt_bboxes_ignore", ":", "\n", "            ", "gt_bboxes_ignore", "=", "np", ".", "array", "(", "gt_bboxes_ignore", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "gt_bboxes_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "ann", "=", "dict", "(", "\n", "bboxes", "=", "gt_bboxes", ",", "labels", "=", "gt_labels", ",", "bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "\n", "if", "with_mask", ":", "\n", "            ", "ann", "[", "'masks'", "]", "=", "gt_masks", "\n", "# poly format is not used in the current implementation", "\n", "ann", "[", "'mask_polys'", "]", "=", "gt_mask_polys", "\n", "ann", "[", "'poly_lens'", "]", "=", "gt_poly_lens", "\n", "", "return", "ann", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.wider_face.WIDERFaceDataset.__init__": [[19, 21], ["xml_style.XMLDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "WIDERFaceDataset", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.wider_face.WIDERFaceDataset.load_annotations": [[22, 43], ["mmcv.list_from_file", "os.join", "xml.parse", "xml.parse.getroot", "ET.parse.getroot.find", "int", "int", "img_infos.append", "ET.parse.getroot.find", "dict", "tree.getroot.find.find", "tree.getroot.find.find", "os.join"], "methods", ["None"], ["", "def", "load_annotations", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "img_infos", "=", "[", "]", "\n", "img_ids", "=", "mmcv", ".", "list_from_file", "(", "ann_file", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "            ", "filename", "=", "'{}.jpg'", ".", "format", "(", "img_id", ")", "\n", "xml_path", "=", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "'Annotations'", ",", "\n", "'{}.xml'", ".", "format", "(", "img_id", ")", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_path", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "size", "=", "root", ".", "find", "(", "'size'", ")", "\n", "width", "=", "int", "(", "size", ".", "find", "(", "'width'", ")", ".", "text", ")", "\n", "height", "=", "int", "(", "size", ".", "find", "(", "'height'", ")", ".", "text", ")", "\n", "folder", "=", "root", ".", "find", "(", "'folder'", ")", ".", "text", "\n", "img_infos", ".", "append", "(", "\n", "dict", "(", "\n", "id", "=", "img_id", ",", "\n", "filename", "=", "osp", ".", "join", "(", "folder", ",", "filename", ")", ",", "\n", "width", "=", "width", ",", "\n", "height", "=", "height", ")", ")", "\n", "\n", "", "return", "img_infos", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.xml_style.XMLDataset.__init__": [[14, 18], ["custom.CustomDataset.__init__", "enumerate"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "min_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "XMLDataset", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "cat2label", "=", "{", "cat", ":", "i", "+", "1", "for", "i", ",", "cat", "in", "enumerate", "(", "self", ".", "CLASSES", ")", "}", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.xml_style.XMLDataset.load_annotations": [[19, 34], ["mmcv.list_from_file", "os.join", "xml.parse", "xml.parse.getroot", "ET.parse.getroot.find", "int", "int", "img_infos.append", "dict", "tree.getroot.find.find", "tree.getroot.find.find"], "methods", ["None"], ["", "def", "load_annotations", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "img_infos", "=", "[", "]", "\n", "img_ids", "=", "mmcv", ".", "list_from_file", "(", "ann_file", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "            ", "filename", "=", "'JPEGImages/{}.jpg'", ".", "format", "(", "img_id", ")", "\n", "xml_path", "=", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "'Annotations'", ",", "\n", "'{}.xml'", ".", "format", "(", "img_id", ")", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_path", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "size", "=", "root", ".", "find", "(", "'size'", ")", "\n", "width", "=", "int", "(", "size", ".", "find", "(", "'width'", ")", ".", "text", ")", "\n", "height", "=", "int", "(", "size", ".", "find", "(", "'height'", ")", ".", "text", ")", "\n", "img_infos", ".", "append", "(", "\n", "dict", "(", "id", "=", "img_id", ",", "filename", "=", "filename", ",", "width", "=", "width", ",", "height", "=", "height", ")", ")", "\n", "", "return", "img_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.xml_style.XMLDataset.get_ann_info": [[35, 87], ["os.join", "xml.parse", "xml.parse.getroot", "ET.parse.getroot.findall", "dict", "int", "obj.find", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.array", "obj.find", "int", "int", "int", "int", "numpy.zeros.append", "numpy.array.append", "numpy.zeros.append", "numpy.array.append", "numpy.array", "numpy.array", "numpy.zeros.astype", "numpy.array.astype", "numpy.zeros.astype", "numpy.array.astype", "obj.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find"], "methods", ["None"], ["", "def", "get_ann_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "img_infos", "[", "idx", "]", "[", "'id'", "]", "\n", "xml_path", "=", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "'Annotations'", ",", "\n", "'{}.xml'", ".", "format", "(", "img_id", ")", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_path", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "bboxes", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "bboxes_ignore", "=", "[", "]", "\n", "labels_ignore", "=", "[", "]", "\n", "for", "obj", "in", "root", ".", "findall", "(", "'object'", ")", ":", "\n", "            ", "name", "=", "obj", ".", "find", "(", "'name'", ")", ".", "text", "\n", "label", "=", "self", ".", "cat2label", "[", "name", "]", "\n", "difficult", "=", "int", "(", "obj", ".", "find", "(", "'difficult'", ")", ".", "text", ")", "\n", "bnd_box", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "bbox", "=", "[", "\n", "int", "(", "bnd_box", ".", "find", "(", "'xmin'", ")", ".", "text", ")", ",", "\n", "int", "(", "bnd_box", ".", "find", "(", "'ymin'", ")", ".", "text", ")", ",", "\n", "int", "(", "bnd_box", ".", "find", "(", "'xmax'", ")", ".", "text", ")", ",", "\n", "int", "(", "bnd_box", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "\n", "]", "\n", "ignore", "=", "False", "\n", "if", "self", ".", "min_size", ":", "\n", "                ", "assert", "not", "self", ".", "test_mode", "\n", "w", "=", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "\n", "h", "=", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "\n", "if", "w", "<", "self", ".", "min_size", "or", "h", "<", "self", ".", "min_size", ":", "\n", "                    ", "ignore", "=", "True", "\n", "", "", "if", "difficult", "or", "ignore", ":", "\n", "                ", "bboxes_ignore", ".", "append", "(", "bbox", ")", "\n", "labels_ignore", ".", "append", "(", "label", ")", "\n", "", "else", ":", "\n", "                ", "bboxes", ".", "append", "(", "bbox", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "", "", "if", "not", "bboxes", ":", "\n", "            ", "bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "0", ",", ")", ")", "\n", "", "else", ":", "\n", "            ", "bboxes", "=", "np", ".", "array", "(", "bboxes", ",", "ndmin", "=", "2", ")", "-", "1", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "", "if", "not", "bboxes_ignore", ":", "\n", "            ", "bboxes_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "labels_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", ")", ")", "\n", "", "else", ":", "\n", "            ", "bboxes_ignore", "=", "np", ".", "array", "(", "bboxes_ignore", ",", "ndmin", "=", "2", ")", "-", "1", "\n", "labels_ignore", "=", "np", ".", "array", "(", "labels_ignore", ")", "\n", "", "ann", "=", "dict", "(", "\n", "bboxes", "=", "bboxes", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "labels", "=", "labels", ".", "astype", "(", "np", ".", "int64", ")", ",", "\n", "bboxes_ignore", "=", "bboxes_ignore", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "labels_ignore", "=", "labels_ignore", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "return", "ann", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.builder._concat_dataset": [[8, 28], ["cfg.get", "cfg.get", "cfg.get", "len", "range", "dataset_wrappers.ConcatDataset", "copy.deepcopy", "isinstance", "isinstance", "isinstance", "datasets.append", "builder.build_dataset"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.builder.build_dataset"], ["def", "_concat_dataset", "(", "cfg", ")", ":", "\n", "    ", "ann_files", "=", "cfg", "[", "'ann_file'", "]", "\n", "img_prefixes", "=", "cfg", ".", "get", "(", "'img_prefix'", ",", "None", ")", "\n", "seg_prefixes", "=", "cfg", ".", "get", "(", "'seg_prefixes'", ",", "None", ")", "\n", "proposal_files", "=", "cfg", ".", "get", "(", "'proposal_file'", ",", "None", ")", "\n", "\n", "datasets", "=", "[", "]", "\n", "num_dset", "=", "len", "(", "ann_files", ")", "\n", "for", "i", "in", "range", "(", "num_dset", ")", ":", "\n", "        ", "data_cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n", "data_cfg", "[", "'ann_file'", "]", "=", "ann_files", "[", "i", "]", "\n", "if", "isinstance", "(", "img_prefixes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'img_prefix'", "]", "=", "img_prefixes", "[", "i", "]", "\n", "", "if", "isinstance", "(", "seg_prefixes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'seg_prefix'", "]", "=", "seg_prefixes", "[", "i", "]", "\n", "", "if", "isinstance", "(", "proposal_files", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'proposal_file'", "]", "=", "proposal_files", "[", "i", "]", "\n", "", "datasets", ".", "append", "(", "build_dataset", "(", "data_cfg", ")", ")", "\n", "\n", "", "return", "ConcatDataset", "(", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.builder.build_dataset": [[30, 39], ["dataset_wrappers.RepeatDataset", "isinstance", "builder.build_dataset", "builder._concat_dataset", "mmdet.utils.build_from_cfg"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.builder._concat_dataset", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.build_from_cfg"], ["", "def", "build_dataset", "(", "cfg", ")", ":", "\n", "    ", "if", "cfg", "[", "'type'", "]", "==", "'RepeatDataset'", ":", "\n", "        ", "dataset", "=", "RepeatDataset", "(", "build_dataset", "(", "cfg", "[", "'dataset'", "]", ")", ",", "cfg", "[", "'times'", "]", ")", "\n", "", "elif", "isinstance", "(", "cfg", "[", "'ann_file'", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "dataset", "=", "_concat_dataset", "(", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "build_from_cfg", "(", "cfg", ",", "DATASETS", ")", "\n", "\n", "", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.dataset_wrappers.ConcatDataset.__init__": [[18, 26], ["torch.utils.data.dataset.ConcatDataset.__init__", "hasattr", "range", "numpy.concatenate", "len", "flags.append"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "super", "(", "ConcatDataset", ",", "self", ")", ".", "__init__", "(", "datasets", ")", "\n", "self", ".", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", "\n", "if", "hasattr", "(", "datasets", "[", "0", "]", ",", "'flag'", ")", ":", "\n", "            ", "flags", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "datasets", ")", ")", ":", "\n", "                ", "flags", ".", "append", "(", "datasets", "[", "i", "]", ".", "flag", ")", "\n", "", "self", ".", "flag", "=", "np", ".", "concatenate", "(", "flags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.dataset_wrappers.RepeatDataset.__init__": [[42, 50], ["hasattr", "len", "numpy.tile"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "times", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "times", "=", "times", "\n", "self", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "if", "hasattr", "(", "self", ".", "dataset", ",", "'flag'", ")", ":", "\n", "            ", "self", ".", "flag", "=", "np", ".", "tile", "(", "self", ".", "dataset", ".", "flag", ",", "times", ")", "\n", "\n", "", "self", ".", "_ori_len", "=", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.dataset_wrappers.RepeatDataset.__getitem__": [[51, 53], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "idx", "%", "self", ".", "_ori_len", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.dataset_wrappers.RepeatDataset.__len__": [[54, 56], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "times", "*", "self", ".", "_ori_len", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.extra_aug.PhotoMetricDistortion.__init__": [[10, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "brightness_delta", "=", "32", ",", "\n", "contrast_range", "=", "(", "0.5", ",", "1.5", ")", ",", "\n", "saturation_range", "=", "(", "0.5", ",", "1.5", ")", ",", "\n", "hue_delta", "=", "18", ")", ":", "\n", "        ", "self", ".", "brightness_delta", "=", "brightness_delta", "\n", "self", ".", "contrast_lower", ",", "self", ".", "contrast_upper", "=", "contrast_range", "\n", "self", ".", "saturation_lower", ",", "self", ".", "saturation_upper", "=", "saturation_range", "\n", "self", ".", "hue_delta", "=", "hue_delta", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.extra_aug.PhotoMetricDistortion.__call__": [[20, 65], ["numpy.random.randint", "numpy.random.randint", "mmcv.bgr2hsv", "numpy.random.randint", "numpy.random.randint", "mmcv.hsv2bgr", "numpy.random.randint", "numpy.random.uniform", "numpy.random.randint", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.randint", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.permutation"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "boxes", ",", "labels", ")", ":", "\n", "# random brightness", "\n", "        ", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "delta", "=", "random", ".", "uniform", "(", "-", "self", ".", "brightness_delta", ",", "\n", "self", ".", "brightness_delta", ")", "\n", "img", "+=", "delta", "\n", "\n", "# mode == 0 --> do random contrast first", "\n", "# mode == 1 --> do random contrast last", "\n", "", "mode", "=", "random", ".", "randint", "(", "2", ")", "\n", "if", "mode", "==", "1", ":", "\n", "            ", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "                ", "alpha", "=", "random", ".", "uniform", "(", "self", ".", "contrast_lower", ",", "\n", "self", ".", "contrast_upper", ")", "\n", "img", "*=", "alpha", "\n", "\n", "# convert color from BGR to HSV", "\n", "", "", "img", "=", "mmcv", ".", "bgr2hsv", "(", "img", ")", "\n", "\n", "# random saturation", "\n", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "img", "[", "...", ",", "1", "]", "*=", "random", ".", "uniform", "(", "self", ".", "saturation_lower", ",", "\n", "self", ".", "saturation_upper", ")", "\n", "\n", "# random hue", "\n", "", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "img", "[", "...", ",", "0", "]", "+=", "random", ".", "uniform", "(", "-", "self", ".", "hue_delta", ",", "self", ".", "hue_delta", ")", "\n", "img", "[", "...", ",", "0", "]", "[", "img", "[", "...", ",", "0", "]", ">", "360", "]", "-=", "360", "\n", "img", "[", "...", ",", "0", "]", "[", "img", "[", "...", ",", "0", "]", "<", "0", "]", "+=", "360", "\n", "\n", "# convert color from HSV to BGR", "\n", "", "img", "=", "mmcv", ".", "hsv2bgr", "(", "img", ")", "\n", "\n", "# random contrast", "\n", "if", "mode", "==", "0", ":", "\n", "            ", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "                ", "alpha", "=", "random", ".", "uniform", "(", "self", ".", "contrast_lower", ",", "\n", "self", ".", "contrast_upper", ")", "\n", "img", "*=", "alpha", "\n", "\n", "# randomly swap channels", "\n", "", "", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "img", "=", "img", "[", "...", ",", "random", ".", "permutation", "(", "3", ")", "]", "\n", "\n", "", "return", "img", ",", "boxes", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.extra_aug.Expand.__init__": [[69, 75], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", "=", "(", "0", ",", "0", ",", "0", ")", ",", "to_rgb", "=", "True", ",", "ratio_range", "=", "(", "1", ",", "4", ")", ")", ":", "\n", "        ", "if", "to_rgb", ":", "\n", "            ", "self", ".", "mean", "=", "mean", "[", ":", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "mean", "=", "mean", "\n", "", "self", ".", "min_ratio", ",", "self", ".", "max_ratio", "=", "ratio_range", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.extra_aug.Expand.__call__": [[76, 90], ["numpy.random.randint", "numpy.random.uniform", "numpy.full().astype", "int", "int", "numpy.tile", "numpy.random.uniform", "numpy.random.uniform", "numpy.full", "int", "int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "boxes", ",", "labels", ")", ":", "\n", "        ", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "return", "img", ",", "boxes", ",", "labels", "\n", "\n", "", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "ratio", "=", "random", ".", "uniform", "(", "self", ".", "min_ratio", ",", "self", ".", "max_ratio", ")", "\n", "expand_img", "=", "np", ".", "full", "(", "(", "int", "(", "h", "*", "ratio", ")", ",", "int", "(", "w", "*", "ratio", ")", ",", "c", ")", ",", "\n", "self", ".", "mean", ")", ".", "astype", "(", "img", ".", "dtype", ")", "\n", "left", "=", "int", "(", "random", ".", "uniform", "(", "0", ",", "w", "*", "ratio", "-", "w", ")", ")", "\n", "top", "=", "int", "(", "random", ".", "uniform", "(", "0", ",", "h", "*", "ratio", "-", "h", ")", ")", "\n", "expand_img", "[", "top", ":", "top", "+", "h", ",", "left", ":", "left", "+", "w", "]", "=", "img", "\n", "img", "=", "expand_img", "\n", "boxes", "+=", "np", ".", "tile", "(", "(", "left", ",", "top", ")", ",", "2", ")", "\n", "return", "img", ",", "boxes", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.extra_aug.RandomCrop.__init__": [[94, 98], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_ious", "=", "(", "0.1", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.9", ")", ",", "min_crop_size", "=", "0.3", ")", ":", "\n", "# 1: return ori img", "\n", "        ", "self", ".", "sample_mode", "=", "(", "1", ",", "*", "min_ious", ",", "0", ")", "\n", "self", ".", "min_crop_size", "=", "min_crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.extra_aug.RandomCrop.__call__": [[99, 142], ["numpy.random.choice", "range", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.array", "mmdet.core.evaluation.bbox_overlaps.bbox_overlaps().reshape", "boxes[].clip", "boxes[].clip", "numpy.tile", "mmdet.core.evaluation.bbox_overlaps.bbox_overlaps().reshape.min", "mask.any", "int", "int", "int", "int", "mmdet.core.evaluation.bbox_overlaps.bbox_overlaps", "numpy.array.reshape", "boxes.reshape"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.geometry.bbox_overlaps"], ["", "def", "__call__", "(", "self", ",", "img", ",", "boxes", ",", "labels", ")", ":", "\n", "        ", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "while", "True", ":", "\n", "            ", "mode", "=", "random", ".", "choice", "(", "self", ".", "sample_mode", ")", "\n", "if", "mode", "==", "1", ":", "\n", "                ", "return", "img", ",", "boxes", ",", "labels", "\n", "\n", "", "min_iou", "=", "mode", "\n", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "                ", "new_w", "=", "random", ".", "uniform", "(", "self", ".", "min_crop_size", "*", "w", ",", "w", ")", "\n", "new_h", "=", "random", ".", "uniform", "(", "self", ".", "min_crop_size", "*", "h", ",", "h", ")", "\n", "\n", "# h / w in [0.5, 2]", "\n", "if", "new_h", "/", "new_w", "<", "0.5", "or", "new_h", "/", "new_w", ">", "2", ":", "\n", "                    ", "continue", "\n", "\n", "", "left", "=", "random", ".", "uniform", "(", "w", "-", "new_w", ")", "\n", "top", "=", "random", ".", "uniform", "(", "h", "-", "new_h", ")", "\n", "\n", "patch", "=", "np", ".", "array", "(", "(", "int", "(", "left", ")", ",", "int", "(", "top", ")", ",", "int", "(", "left", "+", "new_w", ")", ",", "\n", "int", "(", "top", "+", "new_h", ")", ")", ")", "\n", "overlaps", "=", "bbox_overlaps", "(", "\n", "patch", ".", "reshape", "(", "-", "1", ",", "4", ")", ",", "boxes", ".", "reshape", "(", "-", "1", ",", "4", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "if", "overlaps", ".", "min", "(", ")", "<", "min_iou", ":", "\n", "                    ", "continue", "\n", "\n", "# center of boxes should inside the crop img", "\n", "", "center", "=", "(", "boxes", "[", ":", ",", ":", "2", "]", "+", "boxes", "[", ":", ",", "2", ":", "]", ")", "/", "2", "\n", "mask", "=", "(", "center", "[", ":", ",", "0", "]", ">", "patch", "[", "0", "]", ")", "*", "(", "\n", "center", "[", ":", ",", "1", "]", ">", "patch", "[", "1", "]", ")", "*", "(", "center", "[", ":", ",", "0", "]", "<", "patch", "[", "2", "]", ")", "*", "(", "\n", "center", "[", ":", ",", "1", "]", "<", "patch", "[", "3", "]", ")", "\n", "if", "not", "mask", ".", "any", "(", ")", ":", "\n", "                    ", "continue", "\n", "", "boxes", "=", "boxes", "[", "mask", "]", "\n", "labels", "=", "labels", "[", "mask", "]", "\n", "\n", "# adjust boxes", "\n", "img", "=", "img", "[", "patch", "[", "1", "]", ":", "patch", "[", "3", "]", ",", "patch", "[", "0", "]", ":", "patch", "[", "2", "]", "]", "\n", "boxes", "[", ":", ",", "2", ":", "]", "=", "boxes", "[", ":", ",", "2", ":", "]", ".", "clip", "(", "max", "=", "patch", "[", "2", ":", "]", ")", "\n", "boxes", "[", ":", ",", ":", "2", "]", "=", "boxes", "[", ":", ",", ":", "2", "]", ".", "clip", "(", "min", "=", "patch", "[", ":", "2", "]", ")", "\n", "boxes", "-=", "np", ".", "tile", "(", "patch", "[", ":", "2", "]", ",", "2", ")", "\n", "\n", "return", "img", ",", "boxes", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.extra_aug.ExtraAugmentation.__init__": [[146, 158], ["extra_aug.ExtraAugmentation.transforms.append", "extra_aug.ExtraAugmentation.transforms.append", "extra_aug.ExtraAugmentation.transforms.append", "extra_aug.PhotoMetricDistortion", "extra_aug.Expand", "extra_aug.RandomCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "photo_metric_distortion", "=", "None", ",", "\n", "expand", "=", "None", ",", "\n", "random_crop", "=", "None", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "[", "]", "\n", "if", "photo_metric_distortion", "is", "not", "None", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "\n", "PhotoMetricDistortion", "(", "**", "photo_metric_distortion", ")", ")", "\n", "", "if", "expand", "is", "not", "None", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "Expand", "(", "**", "expand", ")", ")", "\n", "", "if", "random_crop", "is", "not", "None", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "RandomCrop", "(", "**", "random_crop", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.extra_aug.ExtraAugmentation.__call__": [[159, 164], ["img.astype.astype.astype", "transform"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "boxes", ",", "labels", ")", ":", "\n", "        ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "for", "transform", "in", "self", ".", "transforms", ":", "\n", "            ", "img", ",", "boxes", ",", "labels", "=", "transform", "(", "img", ",", "boxes", ",", "labels", ")", "\n", "", "return", "img", ",", "boxes", ",", "labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.lvis.LvisDataset.load_annotations": [[11, 26], ["lvis_api.lvis.lvis.LVIS", "tuple", "lvis.LvisDataset.lvis.get_cat_ids", "lvis.LvisDataset.lvis.get_img_ids", "img_infos.append", "enumerate", "lvis.LvisDataset.lvis.load_imgs"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_cat_ids", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_img_ids", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.load_imgs"], ["    ", "def", "load_annotations", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "self", ".", "lvis", "=", "LVIS", "(", "ann_file", ")", "\n", "self", ".", "CLASSES", "=", "tuple", "(", "[", "item", "[", "'name'", "]", "for", "item", "in", "self", ".", "lvis", ".", "dataset", "[", "'categories'", "]", "]", ")", "\n", "self", ".", "cat_ids", "=", "self", ".", "lvis", ".", "get_cat_ids", "(", ")", "\n", "self", ".", "cat2label", "=", "{", "\n", "cat_id", ":", "i", "+", "1", "\n", "for", "i", ",", "cat_id", "in", "enumerate", "(", "self", ".", "cat_ids", ")", "\n", "}", "\n", "self", ".", "img_ids", "=", "self", ".", "lvis", ".", "get_img_ids", "(", ")", "\n", "img_infos", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "img_ids", ":", "\n", "            ", "info", "=", "self", ".", "lvis", ".", "load_imgs", "(", "[", "i", "]", ")", "[", "0", "]", "\n", "info", "[", "'filename'", "]", "=", "info", "[", "'file_name'", "]", "\n", "img_infos", ".", "append", "(", "info", ")", "\n", "", "return", "img_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.lvis.LvisDataset.get_ann_info": [[27, 32], ["lvis.LvisDataset.lvis.get_ann_ids", "lvis.LvisDataset.lvis.load_anns", "lvis.LvisDataset._parse_ann_info"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_ann_ids", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.load_anns", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.lvis.LvisDataset._parse_ann_info"], ["", "def", "get_ann_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "img_infos", "[", "idx", "]", "[", "'id'", "]", "\n", "ann_ids", "=", "self", ".", "lvis", ".", "get_ann_ids", "(", "img_ids", "=", "[", "img_id", "]", ")", "\n", "ann_info", "=", "self", ".", "lvis", ".", "load_anns", "(", "ann_ids", ")", "\n", "return", "self", ".", "_parse_ann_info", "(", "ann_info", ",", "self", ".", "with_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.lvis.LvisDataset._filter_imgs": [[34, 44], ["set", "enumerate", "min", "valid_inds.append", "lvis.LvisDataset.lvis.anns.values"], "methods", ["None"], ["", "def", "_filter_imgs", "(", "self", ",", "min_size", "=", "32", ")", ":", "\n", "        ", "\"\"\"Filter images too small or without ground truths.\"\"\"", "\n", "valid_inds", "=", "[", "]", "\n", "ids_with_ann", "=", "set", "(", "_", "[", "'image_id'", "]", "for", "_", "in", "self", ".", "lvis", ".", "anns", ".", "values", "(", ")", ")", "\n", "for", "i", ",", "img_info", "in", "enumerate", "(", "self", ".", "img_infos", ")", ":", "\n", "            ", "if", "self", ".", "img_ids", "[", "i", "]", "not", "in", "ids_with_ann", ":", "\n", "                ", "continue", "\n", "", "if", "min", "(", "img_info", "[", "'width'", "]", ",", "img_info", "[", "'height'", "]", ")", ">=", "min_size", ":", "\n", "                ", "valid_inds", ".", "append", "(", "i", ")", "\n", "", "", "return", "valid_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.lvis.LvisDataset._parse_ann_info": [[45, 109], ["enumerate", "dict", "dict.get", "numpy.array", "numpy.array", "numpy.zeros", "numpy.array", "numpy.array", "numpy.zeros", "dict.keys", "numpy.zeros.append", "numpy.array.append", "gt_masks.append", "gt_mask_polys.append", "gt_poly_lens.extend", "numpy.zeros.append", "lvis.LvisDataset.lvis.ann_to_mask", "len", "len"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.ann_to_mask"], ["", "def", "_parse_ann_info", "(", "self", ",", "ann_info", ",", "with_mask", "=", "True", ")", ":", "\n", "        ", "\"\"\"Parse bbox and mask annotation.\n\n        Args:\n            ann_info (list[dict]): Annotation info of an image.\n            with_mask (bool): Whether to parse mask annotations.\n\n        Returns:\n            dict: A dict containing the following keys: bboxes, bboxes_ignore,\n                labels, masks, mask_polys, poly_lens.\n        \"\"\"", "\n", "gt_bboxes", "=", "[", "]", "\n", "gt_labels", "=", "[", "]", "\n", "gt_bboxes_ignore", "=", "[", "]", "\n", "# Two formats are provided.", "\n", "# 1. mask: a binary map of the same size of the image.", "\n", "# 2. polys: each mask consists of one or several polys, each poly is a", "\n", "# list of float.", "\n", "if", "with_mask", ":", "\n", "            ", "gt_masks", "=", "[", "]", "\n", "gt_mask_polys", "=", "[", "]", "\n", "gt_poly_lens", "=", "[", "]", "\n", "", "for", "i", ",", "ann", "in", "enumerate", "(", "ann_info", ")", ":", "\n", "            ", "if", "ann", ".", "get", "(", "'ignore'", ",", "False", ")", ":", "\n", "                ", "continue", "\n", "", "x1", ",", "y1", ",", "w", ",", "h", "=", "ann", "[", "'bbox'", "]", "\n", "if", "ann", "[", "'area'", "]", "<=", "0", "or", "w", "<", "1", "or", "h", "<", "1", ":", "\n", "                ", "continue", "\n", "", "bbox", "=", "[", "x1", ",", "y1", ",", "x1", "+", "w", "-", "1", ",", "y1", "+", "h", "-", "1", "]", "\n", "if", "'iscrowd'", "in", "ann", ".", "keys", "(", ")", ":", "\n", "                ", "if", "ann", "[", "'iscrowd'", "]", ":", "\n", "                    ", "gt_bboxes_ignore", ".", "append", "(", "bbox", ")", "\n", "", "", "else", ":", "\n", "                ", "gt_bboxes", ".", "append", "(", "bbox", ")", "\n", "gt_labels", ".", "append", "(", "self", ".", "cat2label", "[", "ann", "[", "'category_id'", "]", "]", ")", "\n", "", "if", "with_mask", ":", "\n", "                ", "gt_masks", ".", "append", "(", "self", ".", "lvis", ".", "ann_to_mask", "(", "ann", ")", ")", "\n", "mask_polys", "=", "[", "\n", "p", "for", "p", "in", "ann", "[", "'segmentation'", "]", "if", "len", "(", "p", ")", ">=", "6", "\n", "]", "# valid polygons have >= 3 points (6 coordinates)", "\n", "poly_lens", "=", "[", "len", "(", "p", ")", "for", "p", "in", "mask_polys", "]", "\n", "gt_mask_polys", ".", "append", "(", "mask_polys", ")", "\n", "gt_poly_lens", ".", "extend", "(", "poly_lens", ")", "\n", "", "", "if", "gt_bboxes", ":", "\n", "            ", "gt_bboxes", "=", "np", ".", "array", "(", "gt_bboxes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_labels", "=", "np", ".", "array", "(", "gt_labels", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "else", ":", "\n", "            ", "gt_bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_labels", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "", "if", "gt_bboxes_ignore", ":", "\n", "            ", "gt_bboxes_ignore", "=", "np", ".", "array", "(", "gt_bboxes_ignore", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "gt_bboxes_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "ann", "=", "dict", "(", "\n", "bboxes", "=", "gt_bboxes", ",", "labels", "=", "gt_labels", ",", "bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "\n", "if", "with_mask", ":", "\n", "            ", "ann", "[", "'masks'", "]", "=", "gt_masks", "\n", "# poly format is not used in the current implementation", "\n", "ann", "[", "'mask_polys'", "]", "=", "gt_mask_polys", "\n", "ann", "[", "'poly_lens'", "]", "=", "gt_poly_lens", "\n", "", "return", "ann", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.utils.to_tensor": [[9, 28], ["isinstance", "isinstance", "torch.from_numpy", "isinstance", "torch.tensor", "isinstance", "mmcv.is_str", "torch.LongTensor", "isinstance", "torch.FloatTensor", "TypeError", "type"], "function", ["None"], ["def", "to_tensor", "(", "data", ")", ":", "\n", "    ", "\"\"\"Convert objects of various python types to :obj:`torch.Tensor`.\n\n    Supported types are: :class:`numpy.ndarray`, :class:`torch.Tensor`,\n    :class:`Sequence`, :class:`int` and :class:`float`.\n    \"\"\"", "\n", "if", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "Sequence", ")", "and", "not", "mmcv", ".", "is_str", "(", "data", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "int", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "data", "]", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "[", "data", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'type {} cannot be converted to tensor.'", ".", "format", "(", "\n", "type", "(", "data", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.utils.random_scale": [[30, 62], ["len", "numpy.random.randint", "numpy.random.randint", "ValueError", "max", "min", "min", "min", "numpy.random.randint", "max", "max", "numpy.random.randint"], "function", ["None"], ["", "", "def", "random_scale", "(", "img_scales", ",", "mode", "=", "'range'", ")", ":", "\n", "    ", "\"\"\"Randomly select a scale from a list of scales or scale ranges.\n\n    Args:\n        img_scales (list[tuple]): Image scale or scale range.\n        mode (str): \"range\" or \"value\".\n\n    Returns:\n        tuple: Sampled image scale.\n    \"\"\"", "\n", "num_scales", "=", "len", "(", "img_scales", ")", "\n", "if", "num_scales", "==", "1", ":", "# fixed scale is specified", "\n", "        ", "img_scale", "=", "img_scales", "[", "0", "]", "\n", "", "elif", "num_scales", "==", "2", ":", "# randomly sample a scale", "\n", "        ", "if", "mode", "==", "'range'", ":", "\n", "            ", "img_scale_long", "=", "[", "max", "(", "s", ")", "for", "s", "in", "img_scales", "]", "\n", "img_scale_short", "=", "[", "min", "(", "s", ")", "for", "s", "in", "img_scales", "]", "\n", "long_edge", "=", "np", ".", "random", ".", "randint", "(", "\n", "min", "(", "img_scale_long", ")", ",", "\n", "max", "(", "img_scale_long", ")", "+", "1", ")", "\n", "short_edge", "=", "np", ".", "random", ".", "randint", "(", "\n", "min", "(", "img_scale_short", ")", ",", "\n", "max", "(", "img_scale_short", ")", "+", "1", ")", "\n", "img_scale", "=", "(", "long_edge", ",", "short_edge", ")", "\n", "", "elif", "mode", "==", "'value'", ":", "\n", "            ", "img_scale", "=", "img_scales", "[", "np", ".", "random", ".", "randint", "(", "num_scales", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "if", "mode", "!=", "'value'", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Only \"value\" mode supports more than 2 image scales'", ")", "\n", "", "img_scale", "=", "img_scales", "[", "np", ".", "random", ".", "randint", "(", "num_scales", ")", "]", "\n", "", "return", "img_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.utils.show_ann": [[64, 69], ["matplotlib.imshow", "matplotlib.axis", "coco.showAnns", "matplotlib.show", "mmcv.bgr2rgb"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.demo.lvis_show_ann.LvisGtAnnVis.show"], ["", "def", "show_ann", "(", "coco", ",", "img", ",", "ann_info", ")", ":", "\n", "    ", "plt", ".", "imshow", "(", "mmcv", ".", "bgr2rgb", "(", "img", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "coco", ".", "showAnns", "(", "ann_info", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.voc.VOCDataset.__init__": [[13, 21], ["xml_style.XMLDataset.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VOCDataset", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "'VOC2007'", "in", "self", ".", "img_prefix", ":", "\n", "            ", "self", ".", "year", "=", "2007", "\n", "", "elif", "'VOC2012'", "in", "self", ".", "img_prefix", ":", "\n", "            ", "self", ".", "year", "=", "2012", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Cannot infer dataset year from img_prefix'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.loader.sampler.DistributedSampler.__init__": [[15, 18], ["torch.utils.data.DistributedSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ",", "num_replicas", "=", "num_replicas", ",", "rank", "=", "rank", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.loader.sampler.DistributedSampler.__iter__": [[19, 37], ["iter", "torch.Generator", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "indices", "=", "indices", "[", "self", ".", "rank", ":", "self", ".", "total_size", ":", "self", ".", "num_replicas", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.loader.sampler.EpisodicSampler.__init__": [[41, 71], ["hasattr", "dataset.flag.astype", "numpy.bincount", "hasattr", "pickle.load", "hasattr", "open", "pickle.load", "range", "open", "range", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "batch_size_total", ",", "nc", ",", "episode", ")", ":", "\n", "        ", "assert", "hasattr", "(", "dataset", ",", "'flag'", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "# self.samples_per_gpu = samples_per_gpu", "\n", "self", ".", "flag", "=", "dataset", ".", "flag", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "self", ".", "num_samples", "=", "0", "\n", "# for i, size in enumerate(self.group_sizes):", "\n", "#     self.num_samples += int(np.ceil(", "\n", "#         size / self.samples_per_gpu)) * self.samples_per_gpu", "\n", "\n", "## for coco", "\n", "if", "hasattr", "(", "dataset", ",", "'coco'", ")", ":", "\n", "            ", "self", ".", "dataset_class_image_info", "=", "pickle", ".", "load", "(", "open", "(", "'./class_to_imageid_and_inscount_coco_sampled.pt'", ",", "'rb'", ")", ")", "\n", "self", ".", "dataset_class_image_info_tolist", "=", "[", "self", ".", "dataset_class_image_info", "[", "cls_idx", "]", "\n", "for", "cls_idx", "in", "range", "(", "1", ",", "len", "(", "self", ".", "dataset_class_image_info", ")", "+", "1", ")", "\n", "if", "self", ".", "dataset_class_image_info", "[", "cls_idx", "]", "[", "'isntance_count'", "]", ">", "0", "]", "\n", "", "elif", "hasattr", "(", "dataset", ",", "'lvis'", ")", ":", "\n", "            ", "self", ".", "dataset_class_image_info", "=", "pickle", ".", "load", "(", "open", "(", "'./class_to_imageid_and_inscount.pt'", ",", "'rb'", ")", ")", "\n", "self", ".", "dataset_class_image_info_tolist", "=", "[", "self", ".", "dataset_class_image_info", "[", "cls_idx", "]", "\n", "for", "cls_idx", "in", "range", "(", "len", "(", "self", ".", "dataset_class_image_info", ")", ")", "\n", "if", "self", ".", "dataset_class_image_info", "[", "cls_idx", "]", "[", "'isntance_count'", "]", ">", "0", "]", "\n", "# self.dataset_abundant_class_image_info = [self.dataset_class_image_info[cls_idx]", "\n", "#                                           for cls_idx in range(len(self.dataset_class_image_info))", "\n", "#                                           if self.dataset_class_image_info[cls_idx]['isntance_count'] > 1000]", "\n", "\n", "", "self", ".", "dataset_abundant_class_ids", "=", "[", "item", "[", "'category_id'", "]", "for", "item", "in", "self", ".", "dataset_class_image_info_tolist", "]", "\n", "self", ".", "nc", "=", "nc", "\n", "self", ".", "bs", "=", "batch_size_total", "\n", "self", ".", "episode", "=", "episode", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.loader.sampler.EpisodicSampler.__iter__": [[71, 102], ["range", "numpy.concatenate", "indices.astype().tolist.astype().tolist.astype().tolist", "numpy.concatenate", "iter", "numpy.random.choice().tolist", "indices.astype().tolist.astype().tolist.append", "class_indices.append", "len", "numpy.array", "sum", "random.choices", "numpy.concatenate", "numpy.stack", "indices.astype().tolist.astype().tolist.astype", "numpy.random.choice", "int", "range", "int"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "\n", "##first, sample per episode classes(NC) self.bs/self.nc is the num of img per class", "\n", "        ", "indices", "=", "[", "]", "\n", "class_indices", "=", "[", "]", "\n", "\n", "#tau =0 corresponds to class-balanced sampling, larger value has bias for many-shot classes", "\n", "tau", "=", "0.0", "\n", "# print('tau value {}'.format(tau))", "\n", "for", "i", "in", "range", "(", "self", ".", "episode", ")", ":", "## possiblly need to ensure per gpu images are with similar ratio", "\n", "            ", "cls_ins_count", "=", "[", "item", "[", "'isntance_count'", "]", "for", "item", "in", "self", ".", "dataset_class_image_info_tolist", "]", "\n", "cls_ins_count_thr", "=", "[", "i", "if", "i", "<", "100", "else", "100", "for", "i", "in", "cls_ins_count", "]", "\n", "cls_ins_count_thr_log", "=", "np", ".", "array", "(", "cls_ins_count_thr", ")", "**", "tau", "\n", "cls_probs", "=", "cls_ins_count_thr_log", "/", "sum", "(", "cls_ins_count_thr_log", ")", "\n", "\n", "##sample with probability", "\n", "per_episode_cls_sampled", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "dataset_class_image_info_tolist", ",", "self", ".", "nc", ",", "p", "=", "cls_probs", ")", ".", "tolist", "(", ")", "\n", "\n", "##banlanced sample", "\n", "# per_episode_cls_sampled = random.sample(self.dataset_class_image_info_tolist, self.nc)", "\n", "\n", "# per_episode_image_sampled = [random.sample(item['image_info_id'], int(self.bs/self.nc)) for item in per_episode_cls_sampled]", "\n", "per_episode_image_sampled", "=", "[", "random", ".", "choices", "(", "item", "[", "'image_info_id'", "]", ",", "k", "=", "int", "(", "self", ".", "bs", "/", "self", ".", "nc", ")", ")", "for", "item", "in", "\n", "per_episode_cls_sampled", "]", "\n", "indices", ".", "append", "(", "np", ".", "concatenate", "(", "per_episode_image_sampled", ")", ")", "\n", "class_indices", ".", "append", "(", "np", ".", "stack", "(", "[", "item", "[", "'category_id'", "]", "for", "item", "in", "per_episode_cls_sampled", "for", "i", "in", "range", "(", "int", "(", "self", ".", "bs", "/", "self", ".", "nc", ")", ")", "]", ")", ")", "\n", "", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "indices", ".", "astype", "(", "np", ".", "int64", ")", ".", "tolist", "(", ")", "\n", "self", ".", "class_indices", "=", "np", ".", "concatenate", "(", "class_indices", ")", "## for external access of current nc classes, this is an ugly way out of dataloader", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "episode", "*", "self", ".", "bs", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.loader.sampler.EpisodicSampler.__len__": [[103, 105], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "episode", "*", "self", ".", "bs", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.loader.sampler.GroupSampler.__init__": [[110, 120], ["hasattr", "dataset.flag.astype", "numpy.bincount", "enumerate", "int", "numpy.ceil"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "samples_per_gpu", "=", "1", ")", ":", "\n", "        ", "assert", "hasattr", "(", "dataset", ",", "'flag'", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "samples_per_gpu", "=", "samples_per_gpu", "\n", "self", ".", "flag", "=", "dataset", ".", "flag", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "self", ".", "num_samples", "=", "0", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "self", ".", "num_samples", "+=", "int", "(", "np", ".", "ceil", "(", "\n", "size", "/", "self", ".", "samples_per_gpu", ")", ")", "*", "self", ".", "samples_per_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.loader.sampler.GroupSampler.__iter__": [[121, 143], ["enumerate", "numpy.concatenate", "numpy.concatenate", "indices.astype().tolist.astype().tolist.astype().tolist", "iter", "numpy.random.shuffle", "numpy.concatenate", "indices.astype().tolist.astype().tolist.append", "len", "numpy.where", "len", "len", "numpy.random.permutation", "indices.astype().tolist.astype().tolist.astype", "int", "range", "numpy.ceil", "len"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "[", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "if", "size", "==", "0", ":", "\n", "                ", "continue", "\n", "", "indice", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "i", ")", "[", "0", "]", "\n", "assert", "len", "(", "indice", ")", "==", "size", "\n", "np", ".", "random", ".", "shuffle", "(", "indice", ")", "\n", "num_extra", "=", "int", "(", "np", ".", "ceil", "(", "size", "/", "self", ".", "samples_per_gpu", ")", "\n", ")", "*", "self", ".", "samples_per_gpu", "-", "len", "(", "indice", ")", "\n", "indice", "=", "np", ".", "concatenate", "(", "[", "indice", ",", "indice", "[", ":", "num_extra", "]", "]", ")", "\n", "indices", ".", "append", "(", "indice", ")", "\n", "", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "[", "\n", "indices", "[", "i", "*", "self", ".", "samples_per_gpu", ":", "(", "i", "+", "1", ")", "*", "self", ".", "samples_per_gpu", "]", "\n", "for", "i", "in", "np", ".", "random", ".", "permutation", "(", "\n", "range", "(", "len", "(", "indices", ")", "//", "self", ".", "samples_per_gpu", ")", ")", "\n", "]", "\n", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "indices", ".", "astype", "(", "np", ".", "int64", ")", ".", "tolist", "(", ")", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.loader.sampler.GroupSampler.__len__": [[144, 146], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.loader.sampler.DistributedGroupSampler.__init__": [[163, 189], ["mmcv.runner.get_dist_info", "hasattr", "numpy.bincount", "enumerate", "int", "math.ceil"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "num_replicas", "=", "None", ",", "\n", "rank", "=", "None", ")", ":", "\n", "        ", "_rank", ",", "_num_replicas", "=", "get_dist_info", "(", ")", "\n", "if", "num_replicas", "is", "None", ":", "\n", "            ", "num_replicas", "=", "_num_replicas", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "rank", "=", "_rank", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "samples_per_gpu", "=", "samples_per_gpu", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "\n", "assert", "hasattr", "(", "self", ".", "dataset", ",", "'flag'", ")", "\n", "self", ".", "flag", "=", "self", ".", "dataset", ".", "flag", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "\n", "self", ".", "num_samples", "=", "0", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "self", ".", "num_samples", "+=", "int", "(", "\n", "math", ".", "ceil", "(", "self", ".", "group_sizes", "[", "i", "]", "*", "1.0", "/", "self", ".", "samples_per_gpu", "/", "\n", "self", ".", "num_replicas", ")", ")", "*", "self", ".", "samples_per_gpu", "\n", "", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.loader.sampler.DistributedGroupSampler.__iter__": [[190, 225], ["torch.Generator", "torch.Generator.manual_seed", "enumerate", "iter", "len", "len", "indice[].tolist", "list", "range", "numpy.where", "len", "len", "torch.randperm", "int", "len", "list", "math.ceil", "torch.randperm", "int"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "\n", "indices", "=", "[", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "if", "size", ">", "0", ":", "\n", "                ", "indice", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "i", ")", "[", "0", "]", "\n", "assert", "len", "(", "indice", ")", "==", "size", "\n", "indice", "=", "indice", "[", "list", "(", "torch", ".", "randperm", "(", "int", "(", "size", ")", ",", "\n", "generator", "=", "g", ")", ")", "]", ".", "tolist", "(", ")", "\n", "extra", "=", "int", "(", "\n", "math", ".", "ceil", "(", "\n", "size", "*", "1.0", "/", "self", ".", "samples_per_gpu", "/", "self", ".", "num_replicas", ")", "\n", ")", "*", "self", ".", "samples_per_gpu", "*", "self", ".", "num_replicas", "-", "len", "(", "indice", ")", "\n", "indice", "+=", "indice", "[", ":", "extra", "]", "\n", "indices", "+=", "indice", "\n", "\n", "", "", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "indices", "=", "[", "\n", "indices", "[", "j", "]", "for", "i", "in", "list", "(", "\n", "torch", ".", "randperm", "(", "\n", "len", "(", "indices", ")", "//", "self", ".", "samples_per_gpu", ",", "generator", "=", "g", ")", ")", "\n", "for", "j", "in", "range", "(", "i", "*", "self", ".", "samples_per_gpu", ",", "(", "i", "+", "1", ")", "*", "\n", "self", ".", "samples_per_gpu", ")", "\n", "]", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.loader.sampler.DistributedGroupSampler.__len__": [[226, 228], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.loader.sampler.DistributedGroupSampler.set_epoch": [[229, 231], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.loader.build_loader.build_dataloader": [[17, 63], ["torch.utils.data.DataLoader", "mmcv.runner.get_dist_info", "sampler.DistributedGroupSampler", "sampler.DistributedSampler", "functools.partial", "sampler.EpisodicSampler", "sampler.GroupSampler"], "function", ["None"], ["", "def", "build_dataloader", "(", "dataset", ",", "\n", "imgs_per_gpu", ",", "\n", "workers_per_gpu", ",", "\n", "num_gpus", "=", "1", ",", "\n", "dist", "=", "True", ",", "\n", "cls_balanced_sampler", "=", "False", ",", "\n", "shuffle", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "if", "dist", ":", "\n", "        ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "shuffle", ":", "\n", "            ", "sampler", "=", "DistributedGroupSampler", "(", "dataset", ",", "imgs_per_gpu", ",", "\n", "world_size", ",", "rank", ")", "\n", "", "else", ":", "\n", "            ", "sampler", "=", "DistributedSampler", "(", "\n", "dataset", ",", "world_size", ",", "rank", ",", "shuffle", "=", "False", ")", "\n", "", "batch_size", "=", "imgs_per_gpu", "\n", "num_workers", "=", "workers_per_gpu", "\n", "", "else", ":", "\n", "# sampler = GroupSampler(dataset, imgs_per_gpu) if shuffle else None", "\n", "# batch_size = num_gpus * imgs_per_gpu", "\n", "# num_workers = num_gpus * workers_per_gpu", "\n", "\n", "# sampler = GroupSampler_addrepeat(dataset, imgs_per_gpu) if shuffle else None", "\n", "# batch_size = num_gpus * imgs_per_gpu", "\n", "# num_workers = num_gpus * workers_per_gpu", "\n", "\n", "        ", "if", "cls_balanced_sampler", "==", "True", ":", "\n", "            ", "batch_size", "=", "num_gpus", "*", "imgs_per_gpu", "\n", "sampler", "=", "EpisodicSampler", "(", "dataset", ",", "batch_size", ",", "nc", "=", "16", ",", "episode", "=", "1000", ")", "if", "shuffle", "else", "None", "\n", "num_workers", "=", "num_gpus", "*", "workers_per_gpu", "\n", "", "else", ":", "\n", "            ", "sampler", "=", "GroupSampler", "(", "dataset", ",", "imgs_per_gpu", ")", "if", "shuffle", "else", "None", "\n", "batch_size", "=", "num_gpus", "*", "imgs_per_gpu", "\n", "num_workers", "=", "num_gpus", "*", "workers_per_gpu", "\n", "\n", "", "", "data_loader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "partial", "(", "collate", ",", "samples_per_gpu", "=", "imgs_per_gpu", ")", ",", "\n", "pin_memory", "=", "False", ",", "\n", "**", "kwargs", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.inference.init_detector": [[16, 47], ["isinstance", "mmdet.models.build_detector", "mmdet.models.build_detector.to", "mmdet.models.build_detector.eval", "mmcv.Config.fromfile", "mmcv.runner.load_checkpoint", "isinstance", "TypeError", "warnings.warn", "mmdet.core.get_classes", "type"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_detector", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.class_names.get_classes"], ["def", "init_detector", "(", "config", ",", "checkpoint", "=", "None", ",", "device", "=", "'cuda:0'", ")", ":", "\n", "    ", "\"\"\"Initialize a detector from config file.\n\n    Args:\n        config (str or :obj:`mmcv.Config`): Config file path or the config\n            object.\n        checkpoint (str, optional): Checkpoint path. If left as None, the model\n            will not load any weights.\n\n    Returns:\n        nn.Module: The constructed detector.\n    \"\"\"", "\n", "if", "isinstance", "(", "config", ",", "str", ")", ":", "\n", "        ", "config", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "config", ")", "\n", "", "elif", "not", "isinstance", "(", "config", ",", "mmcv", ".", "Config", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'config must be a filename or Config object, '", "\n", "'but got {}'", ".", "format", "(", "type", "(", "config", ")", ")", ")", "\n", "", "config", ".", "model", ".", "pretrained", "=", "None", "\n", "model", "=", "build_detector", "(", "config", ".", "model", ",", "test_cfg", "=", "config", ".", "test_cfg", ")", "\n", "if", "checkpoint", "is", "not", "None", ":", "\n", "        ", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "checkpoint", ")", "\n", "if", "'CLASSES'", "in", "checkpoint", "[", "'meta'", "]", ":", "\n", "            ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "'Class names are not saved in the checkpoint\\'s '", "\n", "'meta data, use COCO classes by default.'", ")", "\n", "model", ".", "CLASSES", "=", "get_classes", "(", "'coco'", ")", "\n", "", "", "model", ".", "cfg", "=", "config", "# save the config in the model for convenience", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.inference.inference_detector": [[49, 70], ["mmdet.datasets.transforms.ImageTransform", "next", "isinstance", "inference._inference_single", "inference._inference_generator", "model.parameters"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.apis.inference._inference_single", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.inference._inference_generator"], ["", "def", "inference_detector", "(", "model", ",", "imgs", ")", ":", "\n", "    ", "\"\"\"Inference image(s) with the detector.\n\n    Args:\n        model (nn.Module): The loaded detector.\n        imgs (str/ndarray or list[str/ndarray]): Either image files or loaded\n            images.\n\n    Returns:\n        If imgs is a str, a generator will be returned, otherwise return the\n        detection results directly.\n    \"\"\"", "\n", "cfg", "=", "model", ".", "cfg", "\n", "img_transform", "=", "ImageTransform", "(", "\n", "size_divisor", "=", "cfg", ".", "data", ".", "test", ".", "size_divisor", ",", "**", "cfg", ".", "img_norm_cfg", ")", "\n", "\n", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "# model device", "\n", "if", "not", "isinstance", "(", "imgs", ",", "list", ")", ":", "\n", "        ", "return", "_inference_single", "(", "model", ",", "imgs", ",", "img_transform", ",", "device", ")", "\n", "", "else", ":", "\n", "        ", "return", "_inference_generator", "(", "model", ",", "imgs", ",", "img_transform", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.inference._prepare_data": [[72, 88], ["img_transform", "mmdet.datasets.to_tensor().to().unsqueeze", "dict", "dict", "cfg.data.test.get", "mmdet.datasets.to_tensor().to", "mmdet.datasets.to_tensor"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.utils.to_tensor"], ["", "", "def", "_prepare_data", "(", "img", ",", "img_transform", ",", "cfg", ",", "device", ")", ":", "\n", "    ", "ori_shape", "=", "img", ".", "shape", "\n", "img", ",", "img_shape", ",", "pad_shape", ",", "scale_factor", "=", "img_transform", "(", "\n", "img", ",", "\n", "scale", "=", "cfg", ".", "data", ".", "test", ".", "img_scale", ",", "\n", "keep_ratio", "=", "cfg", ".", "data", ".", "test", ".", "get", "(", "'resize_keep_ratio'", ",", "True", ")", ")", "\n", "img", "=", "to_tensor", "(", "img", ")", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "img_meta", "=", "[", "\n", "dict", "(", "\n", "ori_shape", "=", "ori_shape", ",", "\n", "img_shape", "=", "img_shape", ",", "\n", "pad_shape", "=", "pad_shape", ",", "\n", "scale_factor", "=", "scale_factor", ",", "\n", "flip", "=", "False", ")", "\n", "]", "\n", "return", "dict", "(", "img", "=", "[", "img", "]", ",", "img_meta", "=", "[", "img_meta", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.inference._inference_single": [[90, 96], ["mmcv.imread", "inference._prepare_data", "torch.no_grad", "model"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.apis.inference._prepare_data"], ["", "def", "_inference_single", "(", "model", ",", "img", ",", "img_transform", ",", "device", ")", ":", "\n", "    ", "img", "=", "mmcv", ".", "imread", "(", "img", ")", "\n", "data", "=", "_prepare_data", "(", "img", ",", "img_transform", ",", "model", ".", "cfg", ",", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.inference._inference_generator": [[98, 101], ["inference._inference_single"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.apis.inference._inference_single"], ["", "def", "_inference_generator", "(", "model", ",", "imgs", ",", "img_transform", ",", "device", ")", ":", "\n", "    ", "for", "img", "in", "imgs", ":", "\n", "        ", "yield", "_inference_single", "(", "model", ",", "img", ",", "img_transform", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.inference.show_result": [[104, 161], ["isinstance", "mmcv.imread", "img.copy.copy", "isinstance", "numpy.vstack", "numpy.concatenate", "mmcv.imshow_det_bboxes", "mmcv.concat_list", "numpy.full", "numpy.where", "numpy.random.randint", "pycocotools.decode().astype", "enumerate", "pycocotools.decode"], "function", ["None"], ["", "", "def", "show_result", "(", "img", ",", "\n", "result", ",", "\n", "class_names", ",", "\n", "score_thr", "=", "0.3", ",", "\n", "wait_time", "=", "0", ",", "\n", "show", "=", "True", ",", "\n", "out_file", "=", "None", ")", ":", "\n", "    ", "\"\"\"Visualize the detection results on the image.\n\n    Args:\n        img (str or np.ndarray): Image filename or loaded image.\n        result (tuple[list] or list): The detection result, can be either\n            (bbox, segm) or just bbox.\n        class_names (list[str] or tuple[str]): A list of class names.\n        score_thr (float): The threshold to visualize the bboxes and masks.\n        wait_time (int): Value of waitKey param.\n        show (bool, optional): Whether to show the image with opencv or not.\n        out_file (str, optional): If specified, the visualization result will\n            be written to the out file instead of shown in a window.\n\n    Returns:\n        np.ndarray or None: If neither `show` nor `out_file` is specified, the\n            visualized image is returned, otherwise None is returned.\n    \"\"\"", "\n", "assert", "isinstance", "(", "class_names", ",", "(", "tuple", ",", "list", ")", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "img", ")", "\n", "img", "=", "img", ".", "copy", "(", ")", "\n", "if", "isinstance", "(", "result", ",", "tuple", ")", ":", "\n", "        ", "bbox_result", ",", "segm_result", "=", "result", "\n", "", "else", ":", "\n", "        ", "bbox_result", ",", "segm_result", "=", "result", ",", "None", "\n", "", "bboxes", "=", "np", ".", "vstack", "(", "bbox_result", ")", "\n", "# draw segmentation masks", "\n", "if", "segm_result", "is", "not", "None", ":", "\n", "        ", "segms", "=", "mmcv", ".", "concat_list", "(", "segm_result", ")", "\n", "inds", "=", "np", ".", "where", "(", "bboxes", "[", ":", ",", "-", "1", "]", ">", "score_thr", ")", "[", "0", "]", "\n", "for", "i", "in", "inds", ":", "\n", "            ", "color_mask", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "256", ",", "(", "1", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "mask", "=", "maskUtils", ".", "decode", "(", "segms", "[", "i", "]", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "img", "[", "mask", "]", "=", "img", "[", "mask", "]", "*", "0.5", "+", "color_mask", "*", "0.5", "\n", "# draw bounding boxes", "\n", "", "", "labels", "=", "[", "\n", "np", ".", "full", "(", "bbox", ".", "shape", "[", "0", "]", ",", "i", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", ",", "bbox", "in", "enumerate", "(", "bbox_result", ")", "\n", "]", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ")", "\n", "mmcv", ".", "imshow_det_bboxes", "(", "\n", "img", ",", "\n", "bboxes", ",", "\n", "labels", ",", "\n", "class_names", "=", "class_names", ",", "\n", "score_thr", "=", "score_thr", ",", "\n", "show", "=", "show", ",", "\n", "wait_time", "=", "wait_time", ",", "\n", "out_file", "=", "out_file", ")", "\n", "if", "not", "(", "show", "or", "out_file", ")", ":", "\n", "        ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.inference.show_result_pyplot": [[163, 184], ["inference.show_result", "matplotlib.figure", "matplotlib.imshow", "mmcv.bgr2rgb"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.show_result"], ["", "", "def", "show_result_pyplot", "(", "img", ",", "\n", "result", ",", "\n", "class_names", ",", "\n", "score_thr", "=", "0.3", ",", "\n", "fig_size", "=", "(", "15", ",", "10", ")", ")", ":", "\n", "    ", "\"\"\"Visualize the detection results on the image.\n\n    Args:\n        img (str or np.ndarray): Image filename or loaded image.\n        result (tuple[list] or list): The detection result, can be either\n            (bbox, segm) or just bbox.\n        class_names (list[str] or tuple[str]): A list of class names.\n        score_thr (float): The threshold to visualize the bboxes and masks.\n        fig_size (tuple): Figure size of the pyplot figure.\n        out_file (str, optional): If specified, the visualization result will\n            be written to the out file instead of shown in a window.\n    \"\"\"", "\n", "img", "=", "show_result", "(", "\n", "img", ",", "result", ",", "class_names", ",", "score_thr", "=", "score_thr", ",", "show", "=", "False", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "fig_size", ")", "\n", "plt", ".", "imshow", "(", "mmcv", ".", "bgr2rgb", "(", "img", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_new.parse_losses": [[31, 49], ["collections.OrderedDict", "losses.items", "sum", "isinstance", "log_vars[].item", "loss_value.mean", "isinstance", "sum", "TypeError", "collections.OrderedDict.items", "_loss.mean"], "function", ["None"], ["def", "parse_losses", "(", "losses", ")", ":", "\n", "    ", "log_vars", "=", "OrderedDict", "(", ")", "\n", "for", "loss_name", ",", "loss_value", "in", "losses", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "loss_value", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "log_vars", "[", "loss_name", "]", "=", "loss_value", ".", "mean", "(", ")", "\n", "", "elif", "isinstance", "(", "loss_value", ",", "list", ")", ":", "\n", "            ", "log_vars", "[", "loss_name", "]", "=", "sum", "(", "_loss", ".", "mean", "(", ")", "for", "_loss", "in", "loss_value", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'{} is not a tensor or list of tensors'", ".", "format", "(", "loss_name", ")", ")", "\n", "\n", "", "", "loss", "=", "sum", "(", "_value", "for", "_key", ",", "_value", "in", "log_vars", ".", "items", "(", ")", "if", "'loss'", "in", "_key", ")", "\n", "\n", "log_vars", "[", "'loss'", "]", "=", "loss", "\n", "for", "name", "in", "log_vars", ":", "\n", "        ", "log_vars", "[", "name", "]", "=", "log_vars", "[", "name", "]", ".", "item", "(", ")", "\n", "\n", "", "return", "loss", ",", "log_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_new.batch_processor": [[51, 59], ["model", "train_new.parse_losses", "dict", "len"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_orig.parse_losses"], ["", "def", "batch_processor", "(", "model", ",", "data", ",", "train_mode", ")", ":", "\n", "    ", "losses", "=", "model", "(", "**", "data", ")", "\n", "loss", ",", "log_vars", "=", "parse_losses", "(", "losses", ")", "\n", "\n", "outputs", "=", "dict", "(", "\n", "loss", "=", "loss", ",", "log_vars", "=", "log_vars", ",", "num_samples", "=", "len", "(", "data", "[", "'img'", "]", ".", "data", ")", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_new.train_detector": [[61, 75], ["env.get_root_logger", "train_new._dist_train", "train_new._non_dist_train"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.apis.env.get_root_logger", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_orig._dist_train", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_orig._non_dist_train"], ["", "def", "train_detector", "(", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "distributed", "=", "False", ",", "\n", "validate", "=", "False", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "if", "logger", "is", "None", ":", "\n", "        ", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "\n", "# start training", "\n", "", "if", "distributed", ":", "\n", "        ", "_dist_train", "(", "model", ",", "dataset", ",", "cfg", ",", "validate", "=", "validate", ")", "\n", "", "else", ":", "\n", "        ", "_non_dist_train", "(", "model", ",", "dataset", ",", "cfg", ",", "validate", "=", "validate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_new.build_optimizer": [[77, 149], ["hasattr", "optimizer_cfg.copy.copy", "optimizer_cfg.copy.pop", "mmcv.runner.obj_from_dict", "isinstance", "optimizer_cfg.copy.get", "optimizer_cfg.pop.get", "optimizer_cfg.pop.get", "optimizer_cfg.pop.get", "model.named_parameters", "getattr", "getattr.", "dict", "re.search", "params.append", "optimizer_cfg.copy.pop", "params.append", "name.endswith", "model.parameters"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get"], ["", "", "def", "build_optimizer", "(", "model", ",", "optimizer_cfg", ")", ":", "\n", "    ", "\"\"\"Build optimizer from configs.\n\n    Args:\n        model (:obj:`nn.Module`): The model with parameters to be optimized.\n        optimizer_cfg (dict): The config dict of the optimizer.\n            Positional fields are:\n                - type: class name of the optimizer.\n                - lr: base learning rate.\n            Optional fields are:\n                - any arguments of the corresponding optimizer type, e.g.,\n                  weight_decay, momentum, etc.\n                - paramwise_options: a dict with 3 accepted fileds\n                  (bias_lr_mult, bias_decay_mult, norm_decay_mult).\n                  `bias_lr_mult` and `bias_decay_mult` will be multiplied to\n                  the lr and weight decay respectively for all bias parameters\n                  (except for the normalization layers), and\n                  `norm_decay_mult` will be multiplied to the weight decay\n                  for all weight and bias parameters of normalization layers.\n\n    Returns:\n        torch.optim.Optimizer: The initialized optimizer.\n    \"\"\"", "\n", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "optimizer_cfg", "=", "optimizer_cfg", ".", "copy", "(", ")", "\n", "paramwise_options", "=", "optimizer_cfg", ".", "pop", "(", "'paramwise_options'", ",", "None", ")", "\n", "# if no paramwise option is specified, just use the global setting", "\n", "if", "paramwise_options", "is", "None", ":", "\n", "        ", "return", "obj_from_dict", "(", "optimizer_cfg", ",", "torch", ".", "optim", ",", "\n", "dict", "(", "params", "=", "model", ".", "parameters", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "paramwise_options", ",", "dict", ")", "\n", "# get base lr and weight decay", "\n", "base_lr", "=", "optimizer_cfg", "[", "'lr'", "]", "\n", "base_wd", "=", "optimizer_cfg", ".", "get", "(", "'weight_decay'", ",", "None", ")", "\n", "# weight_decay must be explicitly specified if mult is specified", "\n", "if", "(", "'bias_decay_mult'", "in", "paramwise_options", "\n", "or", "'norm_decay_mult'", "in", "paramwise_options", ")", ":", "\n", "            ", "assert", "base_wd", "is", "not", "None", "\n", "# get param-wise options", "\n", "", "bias_lr_mult", "=", "paramwise_options", ".", "get", "(", "'bias_lr_mult'", ",", "1.", ")", "\n", "bias_decay_mult", "=", "paramwise_options", ".", "get", "(", "'bias_decay_mult'", ",", "1.", ")", "\n", "norm_decay_mult", "=", "paramwise_options", ".", "get", "(", "'norm_decay_mult'", ",", "1.", ")", "\n", "# set param-wise lr and weight decay", "\n", "params", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "param_group", "=", "{", "'params'", ":", "[", "param", "]", "}", "\n", "if", "not", "param", ".", "requires_grad", ":", "\n", "# FP16 training needs to copy gradient/weight between master", "\n", "# weight copy and model weight, it is convenient to keep all", "\n", "# parameters here to align with model.parameters()", "\n", "                ", "params", ".", "append", "(", "param_group", ")", "\n", "continue", "\n", "\n", "# for norm layers, overwrite the weight decay of weight and bias", "\n", "# TODO: obtain the norm layer prefixes dynamically", "\n", "", "if", "re", ".", "search", "(", "r'(bn|gn)(\\d+)?.(weight|bias)'", ",", "name", ")", ":", "\n", "                ", "if", "base_wd", "is", "not", "None", ":", "\n", "                    ", "param_group", "[", "'weight_decay'", "]", "=", "base_wd", "*", "norm_decay_mult", "\n", "# for other layers, overwrite both lr and weight decay of bias", "\n", "", "", "elif", "name", ".", "endswith", "(", "'.bias'", ")", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "base_lr", "*", "bias_lr_mult", "\n", "if", "base_wd", "is", "not", "None", ":", "\n", "                    ", "param_group", "[", "'weight_decay'", "]", "=", "base_wd", "*", "bias_decay_mult", "\n", "# otherwise use the global settings", "\n", "\n", "", "", "params", ".", "append", "(", "param_group", ")", "\n", "\n", "", "optimizer_cls", "=", "getattr", "(", "torch", ".", "optim", ",", "optimizer_cfg", ".", "pop", "(", "'type'", ")", ")", "\n", "return", "optimizer_cls", "(", "params", ",", "**", "optimizer_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_new._dist_train": [[151, 201], ["mmcv.parallel.MMDistributedDataParallel", "train_new.build_optimizer", "mmcv.runner.Runner", "cfg.get", "mmcv.runner.Runner.register_training_hooks", "mmcv.runner.Runner.register_hook", "mmcv.runner.Runner.run", "isinstance", "mmdet.datasets.build_dataloader", "mmcv.parallel.MMDistributedDataParallel.cuda", "mmdet.core.Fp16OptimizerHook", "mmdet.core.DistOptimizerHook", "mmcv.runner.DistSamplerSeedHook", "cfg.get", "isinstance", "mmcv.runner.Runner.resume", "mmcv.runner.Runner.register_hook", "mmdet.datasets.DATASETS.get", "issubclass", "mmcv.runner.Runner.load_checkpoint", "mmdet.core.CocoDistEvalRecallHook", "mmcv.runner.Runner.register_hook", "mmcv.runner.Runner.register_hook", "mmdet.core.CocoDistEvalmAPHook", "mmdet.core.DistEvalmAPHook"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_orig.build_optimizer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.run", "home.repos.pwc.inspect_result.twangnh_SimCal.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get"], ["", "", "def", "_dist_train", "(", "model", ",", "dataset", ",", "cfg", ",", "validate", "=", "False", ")", ":", "\n", "# prepare data loaders", "\n", "    ", "dataset", "=", "dataset", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dataset", "]", "\n", "data_loaders", "=", "[", "\n", "build_dataloader", "(", "\n", "ds", ",", "cfg", ".", "data", ".", "imgs_per_gpu", ",", "cfg", ".", "data", ".", "workers_per_gpu", ",", "dist", "=", "True", ")", "\n", "for", "ds", "in", "dataset", "\n", "]", "\n", "# put model on gpus", "\n", "model", "=", "MMDistributedDataParallel", "(", "model", ".", "cuda", "(", ")", ")", "\n", "\n", "# build runner", "\n", "optimizer", "=", "build_optimizer", "(", "model", ",", "cfg", ".", "optimizer", ")", "\n", "runner", "=", "Runner", "(", "model", ",", "batch_processor", ",", "optimizer", ",", "cfg", ".", "work_dir", ",", "\n", "cfg", ".", "log_level", ")", "\n", "\n", "# fp16 setting", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "optimizer_config", "=", "Fp16OptimizerHook", "(", "**", "cfg", ".", "optimizer_config", ",", "\n", "**", "fp16_cfg", ")", "\n", "", "else", ":", "\n", "        ", "optimizer_config", "=", "DistOptimizerHook", "(", "**", "cfg", ".", "optimizer_config", ")", "\n", "\n", "# register hooks", "\n", "", "runner", ".", "register_training_hooks", "(", "cfg", ".", "lr_config", ",", "optimizer_config", ",", "\n", "cfg", ".", "checkpoint_config", ",", "cfg", ".", "log_config", ")", "\n", "runner", ".", "register_hook", "(", "DistSamplerSeedHook", "(", ")", ")", "\n", "# register eval hooks", "\n", "if", "validate", ":", "\n", "        ", "val_dataset_cfg", "=", "cfg", ".", "data", ".", "val", "\n", "eval_cfg", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", "\n", "if", "isinstance", "(", "model", ".", "module", ",", "RPN", ")", ":", "\n", "# TODO: implement recall hooks for other datasets", "\n", "            ", "runner", ".", "register_hook", "(", "\n", "CocoDistEvalRecallHook", "(", "val_dataset_cfg", ",", "**", "eval_cfg", ")", ")", "\n", "", "else", ":", "\n", "            ", "dataset_type", "=", "DATASETS", ".", "get", "(", "val_dataset_cfg", ".", "type", ")", "\n", "if", "issubclass", "(", "dataset_type", ",", "datasets", ".", "CocoDataset", ")", ":", "\n", "                ", "runner", ".", "register_hook", "(", "\n", "CocoDistEvalmAPHook", "(", "val_dataset_cfg", ",", "**", "eval_cfg", ")", ")", "\n", "", "else", ":", "\n", "                ", "runner", ".", "register_hook", "(", "\n", "DistEvalmAPHook", "(", "val_dataset_cfg", ",", "**", "eval_cfg", ")", ")", "\n", "\n", "", "", "", "if", "cfg", ".", "resume_from", ":", "\n", "        ", "runner", ".", "resume", "(", "cfg", ".", "resume_from", ")", "\n", "", "elif", "cfg", ".", "load_from", ":", "\n", "        ", "runner", ".", "load_checkpoint", "(", "cfg", ".", "load_from", ")", "\n", "", "runner", ".", "run", "(", "data_loaders", ",", "cfg", ".", "workflow", ",", "cfg", ".", "total_epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_new.compose_training_data": [[203, 236], ["torch.cat", "torch.cat", "torch.cat", "range", "range", "torch.cat().size", "torch.cat().size", "torch.cat().size", "np.concatenate", "enumerate", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat", "torch.cat", "torch.cat", "gt_num.size", "pos_label_split_per_img.append", "pos_feat_split_per_img.append", "range", "torch.cat().long.append", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.cumsum", "torch.cumsum", "torch.cumsum", "int", "samples.append", "torch.cat", "torch.cat", "torch.cat", "item.new_zeros().fill_", "torch.cat", "torch.cat", "torch.cat", "torch.randperm", "torch.randperm", "torch.randperm", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "neg_feats.size", "item.new_zeros", "item.size", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "compose_training_data", "(", "neg_feats", ",", "gt_inds", ",", "gt_num", ",", "pos_feats", ",", "pos_label", ",", "data_cls_index", ",", "bs", ",", "nc", ")", ":", "\n", "\n", "    ", "gt_num_cum", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ",", "torch", ".", "cumsum", "(", "gt_num", ",", "0", ")", "]", ")", "\n", "pos_label_split_per_img", "=", "[", "]", "\n", "pos_feat_split_per_img", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "gt_num", ".", "size", "(", "0", ")", ")", ":", "## iterate over whole batch", "\n", "        ", "pos_label_split_per_img", ".", "append", "(", "pos_label", "[", "gt_num_cum", "[", "i", "]", ":", "gt_num_cum", "[", "i", "+", "1", "]", "]", ")", "\n", "pos_feat_split_per_img", ".", "append", "(", "pos_feats", "[", "gt_num_cum", "[", "i", "]", ":", "gt_num_cum", "[", "i", "+", "1", "]", "]", ")", "\n", "\n", "", "samples", "=", "[", "]", "\n", "for", "nc_i", "in", "range", "(", "nc", ")", ":", "\n", "        ", "for", "per_cls_im_i", "in", "range", "(", "int", "(", "bs", "/", "nc", ")", ")", ":", "\n", "            ", "index", "=", "pos_label_split_per_img", "[", "nc_i", "*", "1", "+", "per_cls_im_i", "]", "==", "data_cls_index", "[", "\n", "nc_i", "*", "1", "+", "per_cls_im_i", "]", "\n", "temp", "=", "pos_feat_split_per_img", "[", "nc_i", "*", "1", "+", "per_cls_im_i", "]", "[", "index", "]", "\n", "# if temp.size(0)>5:## uncomment to subsample to 5", "\n", "#     temp = temp[torch.randperm(temp.size(0))[:5]]", "\n", "samples", ".", "append", "(", "temp", ")", "\n", "\n", "", "", "pos_num", "=", "torch", ".", "cat", "(", "samples", ")", ".", "size", "(", "0", ")", "\n", "\n", "## sampel bg to be the same as fg", "\n", "neg_feats_sampled", "=", "neg_feats", "[", "torch", ".", "randperm", "(", "neg_feats", ".", "size", "(", "0", ")", ")", "[", ":", "pos_num", "]", "]", "\n", "samples", "=", "[", "neg_feats_sampled", "]", "+", "samples", "\n", "data_cls_index", "=", "np", ".", "concatenate", "(", "[", "[", "0", "]", ",", "data_cls_index", "]", ")", "## neg label", "\n", "\n", "label_converts", "=", "[", "]", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "samples", ")", ":", "\n", "        ", "label_converts", ".", "append", "(", "item", ".", "new_zeros", "(", "item", ".", "size", "(", "0", ")", ")", ".", "fill_", "(", "data_cls_index", "[", "i", "]", ")", ")", "\n", "", "label_converts", "=", "torch", ".", "cat", "(", "label_converts", ")", ".", "long", "(", ")", "\n", "samples_convert", "=", "torch", ".", "cat", "(", "samples", ")", "\n", "\n", "return", "samples_convert", ",", "label_converts", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_new._non_dist_train": [[238, 412], ["data_loaders.append", "mmcv.parallel.MMDataParallel().cuda", "mmcv.runner.load_checkpoint", "print", "MMDataParallel().cuda.eval", "MMDataParallel().cuda.parameters", "print", "hasattr", "torch.SGD", "train_new._non_dist_train.load_ckpt"], "function", ["None"], ["", "def", "_non_dist_train", "(", "model", ",", "dataset", ",", "cfg", ",", "validate", "=", "False", ")", ":", "\n", "# prepare data loaders", "\n", "    ", "dataset", "=", "dataset", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dataset", "]", "\n", "data_loaders", "=", "[", "]", "\n", "# for idx, ds in enumerate(dataset):", "\n", "#     if idx==0:", "\n", "#         data_loaders.append(build_dataloader(", "\n", "#             ds,", "\n", "#             cfg.data.imgs_per_gpu,", "\n", "#             cfg.data.workers_per_gpu,", "\n", "#             cfg.gpus,", "\n", "#             dist=False,", "\n", "#             cls_balanced_sampler=False))", "\n", "#     else:", "\n", "#         data_loaders.append(build_dataloader(", "\n", "#             ds,", "\n", "#             cfg.data.imgs_per_gpu,", "\n", "#             cfg.data.workers_per_gpu,", "\n", "#             cfg.gpus,", "\n", "#             dist=False,", "\n", "#             cls_balanced_sampler=True))", "\n", "data_loaders", ".", "append", "(", "build_dataloader", "(", "\n", "dataset", "[", "0", "]", ",", "\n", "cfg", ".", "data", ".", "imgs_per_gpu", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "cfg", ".", "gpus", ",", "\n", "dist", "=", "False", ",", "\n", "cls_balanced_sampler", "=", "True", ")", ")", "\n", "\n", "# put model on gpus", "\n", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "range", "(", "cfg", ".", "gpus", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "load_checkpoint", "(", "model", ",", "cfg", ".", "load_from", ")", "\n", "print", "(", "'load from {}'", ".", "format", "(", "cfg", ".", "load_from", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "\n", "# for param in model.parameters():", "\n", "#     param.requires_grad = False", "\n", "# model.eval()", "\n", "\n", "", "dataset_to_longtailmodel", "=", "{", "}", "\n", "dataset_to_longtailmodel", "[", "'train'", "]", "=", "data_loaders", "[", "0", "]", "\n", "# dataset_to_longtailmodel['train_plain'] = data_loaders[1]", "\n", "# dataset_to_longtailmodel['val'] = data_loaders[2]", "\n", "\n", "## which to use", "\n", "import", "datetime", "\n", "# cls_models = {", "\n", "#               1: '2fc_rand',", "\n", "#               2: '3fc_rand',", "\n", "#               3: '3fc_ft' }", "\n", "\n", "use_model", "=", "cfg", ".", "use_model", "\n", "print", "(", "'use {}'", ".", "format", "(", "cfg", ".", "use_model", ")", ")", "\n", "exp_prefix", "=", "cfg", ".", "exp_prefix", "\n", "total_epoch", "=", "120", "\n", "initial_lr", "=", "0.01", "\n", "\n", "\n", "if", "hasattr", "(", "dataset", "[", "0", "]", ",", "'coco'", ")", ":", "\n", "        ", "if", "use_model", "==", "'2fc_rand'", ":", "\n", "            ", "cls_head", "=", "simple2fc", "(", "num_classes", "=", "81", ")", ".", "cuda", "(", ")", "\n", "", "elif", "use_model", "==", "'3fc_rand'", "or", "'3fc_ft'", ":", "\n", "            ", "cls_head", "=", "simple3fc", "(", "num_classes", "=", "81", ")", ".", "cuda", "(", ")", "\n", "\n", "", "", "elif", "hasattr", "(", "dataset", "[", "0", "]", ",", "'lvis'", ")", ":", "\n", "        ", "if", "use_model", "==", "'2fc_rand'", ":", "\n", "            ", "cls_head", "=", "simple2fc", "(", "num_classes", "=", "1231", ")", ".", "cuda", "(", ")", "\n", "", "elif", "use_model", "==", "'3fc_rand'", "or", "'3fc_ft'", ":", "\n", "            ", "cls_head", "=", "simple3fc", "(", "num_classes", "=", "1231", ")", ".", "cuda", "(", ")", "\n", "\n", "", "", "optimizer", "=", "optim", ".", "SGD", "(", "[", "{", "'params'", ":", "cls_head", ".", "parameters", "(", ")", ",", "\n", "'lr'", ":", "initial_lr", "}", "]", ")", "\n", "\n", "# for param in list(cls_head.parameters())[:-4]:", "\n", "#     param.requires_grad = False", "\n", "\n", "def", "save_ckpt", "(", "cls_head", ")", ":", "\n", "        ", "save_checkpoint", "(", "cls_head", ",", "'./{}/{}_{}.pth'", ".", "format", "(", "cfg", ".", "work_dir", ",", "exp_prefix", ",", "use_model", ")", ")", "\n", "torch", ".", "save", "(", "epoch", ",", "'./{}/{}_{}_epoch.pth'", ".", "format", "(", "cfg", ".", "work_dir", ",", "exp_prefix", ",", "use_model", ")", ")", "\n", "\n", "", "def", "load_ckpt", "(", "cls_head", ",", "use_model", ")", ":", "\n", "\n", "        ", "if", "use_model", "==", "'2fc_rand'", "or", "use_model", "==", "'3fc_rand'", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "'./{}_{}.pth'", ".", "format", "(", "exp_prefix", ",", "use_model", ")", ")", ":", "\n", "                ", "print", "(", "'start training from 0 epoch'", ")", "\n", "return", "0", "\n", "", "else", ":", "\n", "                ", "epoch", "=", "torch", ".", "load", "(", "'./{}_{}_epoch.pth'", ".", "format", "(", "exp_prefix", ",", "use_model", ")", ")", "\n", "load_checkpoint", "(", "cls_head", ",", "'./{}_{}.pth'", ".", "format", "(", "exp_prefix", ",", "use_model", ")", ")", "\n", "return", "epoch", "\n", "\n", "", "", "elif", "use_model", "==", "'3fc_ft'", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "'./{}_{}.pth'", ".", "format", "(", "exp_prefix", ",", "use_model", ")", ")", ":", "\n", "                ", "print", "(", "'start training from 0 epoch, init from orig 3fc cls head'", ")", "\n", "\n", "orig_head_state_dict", "=", "model", ".", "module", ".", "bbox_head", ".", "state_dict", "(", ")", "\n", "key_map", "=", "{", "'fc_cls.weight'", ":", "'feat_classifier.fc_classifier.weight'", ",", "\n", "'fc_cls.bias'", ":", "'feat_classifier.fc_classifier.bias'", ",", "\n", "'shared_fcs.0.weight'", ":", "'feat_classifier.fc1.weight'", ",", "\n", "'shared_fcs.0.bias'", ":", "'feat_classifier.fc1.bias'", ",", "\n", "'shared_fcs.1.weight'", ":", "'feat_classifier.fc2.weight'", ",", "\n", "'shared_fcs.1.bias'", ":", "'feat_classifier.fc2.bias'", "}", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "\n", "for", "key", ",", "value", "in", "orig_head_state_dict", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", "in", "key_map", ":", "\n", "                        ", "new_key", "=", "key_map", "[", "key", "]", "\n", "new_state_dict", "[", "new_key", "]", "=", "value", "\n", "\n", "", "", "cls_head", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "return", "0", "\n", "", "else", ":", "\n", "                ", "epoch", "=", "torch", ".", "load", "(", "'./{}_{}_epoch.pth'", ".", "format", "(", "exp_prefix", ",", "use_model", ")", ")", "\n", "load_checkpoint", "(", "cls_head", ",", "'./{}_{}.pth'", ".", "format", "(", "exp_prefix", ",", "use_model", ")", ")", "\n", "return", "epoch", "\n", "\n", "", "", "", "epoch", "=", "load_ckpt", "(", "cls_head", ",", "use_model", ")", "\n", "cls_head", "=", "MMDataParallel", "(", "cls_head", ",", "device_ids", "=", "range", "(", "cfg", ".", "gpus", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "for", "epoch", "in", "range", "(", "epoch", "+", "1", ",", "total_epoch", "+", "1", ")", ":", "\n", "\n", "##due to schdualer bug, we do manual lr schedule", "\n", "        ", "if", "epoch", ">=", "8", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "initial_lr", "*", "0.1", "\n", "", "", "if", "epoch", ">=", "11", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "initial_lr", "*", "0.01", "\n", "", "", "print", "(", "'epoch {} lr {}'", ".", "format", "(", "epoch", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "\n", "for", "step", ",", "data_batch", "in", "enumerate", "(", "dataset_to_longtailmodel", "[", "'train'", "]", ")", ":", "\n", "            ", "if", "step", "%", "10", "==", "0", ":", "\n", "                ", "print", "(", "'step {} time: {}'", ".", "format", "(", "step", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "bs", "=", "dataset_to_longtailmodel", "[", "'train'", "]", ".", "batch_size", "\n", "nc", "=", "dataset_to_longtailmodel", "[", "'train'", "]", ".", "sampler", ".", "nc", "\n", "data_cls_index", "=", "np", ".", "split", "(", "dataset_to_longtailmodel", "[", "'train'", "]", ".", "sampler", ".", "class_indices", ",", "\n", "dataset_to_longtailmodel", "[", "'train'", "]", ".", "sampler", ".", "episode", ",", "0", ")", "[", "step", "]", "\n", "\n", "neg_feats", ",", "gt_inds", ",", "gt_num", ",", "pos_feats", ",", "pos_label", "=", "model", "(", "**", "data_batch", ")", "\n", "samples_convert", ",", "label_converts", "=", "compose_training_data", "(", "neg_feats", ",", "gt_inds", ",", "gt_num", ",", "pos_feats", ",", "pos_label", "\n", ",", "data_cls_index", ",", "bs", ",", "nc", ")", "\n", "\n", "logits", "=", "cls_head", "(", "samples_convert", ")", "\n", "\n", "log_p_y", "=", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "1", ")", ".", "view", "(", "logits", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "loss_target", "=", "-", "log_p_y", ".", "gather", "(", "1", ",", "label_converts", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", ")", ".", "view", "(", "-", "1", ")", ".", "mean", "(", ")", "\n", "\n", "loss_val", "=", "1.0", "*", "loss_target", "\n", "\n", "_", ",", "y_hat", "=", "log_p_y", ".", "max", "(", "1", ")", "\n", "acc_val", "=", "torch", ".", "eq", "(", "y_hat", ",", "label_converts", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "bg_acc", "=", "(", "y_hat", "[", "label_converts", "==", "0", "]", "==", "0", ")", ".", "sum", "(", ")", "/", "(", "label_converts", "==", "0", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "fg_acc", "=", "torch", ".", "eq", "(", "y_hat", ",", "label_converts", ")", ".", "float", "(", ")", "[", "label_converts", "!=", "0", "]", ".", "mean", "(", ")", "\n", "\n", "\n", "if", "step", "%", "10", "==", "0", ":", "\n", "                ", "print", "(", "'step {} acc: {}'", ".", "format", "(", "step", ",", "acc_val", ".", "item", "(", ")", ")", ")", "\n", "print", "(", "'step {} bg acc: {}'", ".", "format", "(", "step", ",", "bg_acc", ".", "item", "(", ")", ")", ")", "\n", "print", "(", "'step {} fg acc: {}'", ".", "format", "(", "step", ",", "fg_acc", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_val", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "save_ckpt", "(", "cls_head", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_orig.parse_losses": [[17, 35], ["collections.OrderedDict", "losses.items", "sum", "isinstance", "log_vars[].item", "loss_value.mean", "isinstance", "sum", "TypeError", "collections.OrderedDict.items", "_loss.mean"], "function", ["None"], ["def", "parse_losses", "(", "losses", ")", ":", "\n", "    ", "log_vars", "=", "OrderedDict", "(", ")", "\n", "for", "loss_name", ",", "loss_value", "in", "losses", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "loss_value", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "log_vars", "[", "loss_name", "]", "=", "loss_value", ".", "mean", "(", ")", "\n", "", "elif", "isinstance", "(", "loss_value", ",", "list", ")", ":", "\n", "            ", "log_vars", "[", "loss_name", "]", "=", "sum", "(", "_loss", ".", "mean", "(", ")", "for", "_loss", "in", "loss_value", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'{} is not a tensor or list of tensors'", ".", "format", "(", "loss_name", ")", ")", "\n", "\n", "", "", "loss", "=", "sum", "(", "_value", "for", "_key", ",", "_value", "in", "log_vars", ".", "items", "(", ")", "if", "'loss'", "in", "_key", ")", "\n", "\n", "log_vars", "[", "'loss'", "]", "=", "loss", "\n", "for", "name", "in", "log_vars", ":", "\n", "        ", "log_vars", "[", "name", "]", "=", "log_vars", "[", "name", "]", ".", "item", "(", ")", "\n", "\n", "", "return", "loss", ",", "log_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_orig.batch_processor": [[37, 45], ["model", "train_orig.parse_losses", "dict", "len"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_orig.parse_losses"], ["", "def", "batch_processor", "(", "model", ",", "data", ",", "train_mode", ")", ":", "\n", "    ", "losses", "=", "model", "(", "**", "data", ")", "\n", "loss", ",", "log_vars", "=", "parse_losses", "(", "losses", ")", "\n", "\n", "outputs", "=", "dict", "(", "\n", "loss", "=", "loss", ",", "log_vars", "=", "log_vars", ",", "num_samples", "=", "len", "(", "data", "[", "'img'", "]", ".", "data", ")", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_orig.train_detector": [[47, 61], ["env.get_root_logger", "train_orig._dist_train", "train_orig._non_dist_train"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.apis.env.get_root_logger", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_orig._dist_train", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_orig._non_dist_train"], ["", "def", "train_detector", "(", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "distributed", "=", "False", ",", "\n", "validate", "=", "False", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "if", "logger", "is", "None", ":", "\n", "        ", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "\n", "# start training", "\n", "", "if", "distributed", ":", "\n", "        ", "_dist_train", "(", "model", ",", "dataset", ",", "cfg", ",", "validate", "=", "validate", ")", "\n", "", "else", ":", "\n", "        ", "_non_dist_train", "(", "model", ",", "dataset", ",", "cfg", ",", "validate", "=", "validate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_orig.build_optimizer": [[63, 135], ["hasattr", "optimizer_cfg.copy.copy", "optimizer_cfg.copy.pop", "mmcv.runner.obj_from_dict", "isinstance", "optimizer_cfg.copy.get", "optimizer_cfg.pop.get", "optimizer_cfg.pop.get", "optimizer_cfg.pop.get", "model.named_parameters", "getattr", "getattr.", "dict", "re.search", "params.append", "optimizer_cfg.copy.pop", "params.append", "name.endswith", "model.parameters"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get"], ["", "", "def", "build_optimizer", "(", "model", ",", "optimizer_cfg", ")", ":", "\n", "    ", "\"\"\"Build optimizer from configs.\n\n    Args:\n        model (:obj:`nn.Module`): The model with parameters to be optimized.\n        optimizer_cfg (dict): The config dict of the optimizer.\n            Positional fields are:\n                - type: class name of the optimizer.\n                - lr: base learning rate.\n            Optional fields are:\n                - any arguments of the corresponding optimizer type, e.g.,\n                  weight_decay, momentum, etc.\n                - paramwise_options: a dict with 3 accepted fileds\n                  (bias_lr_mult, bias_decay_mult, norm_decay_mult).\n                  `bias_lr_mult` and `bias_decay_mult` will be multiplied to\n                  the lr and weight decay respectively for all bias parameters\n                  (except for the normalization layers), and\n                  `norm_decay_mult` will be multiplied to the weight decay\n                  for all weight and bias parameters of normalization layers.\n\n    Returns:\n        torch.optim.Optimizer: The initialized optimizer.\n    \"\"\"", "\n", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "optimizer_cfg", "=", "optimizer_cfg", ".", "copy", "(", ")", "\n", "paramwise_options", "=", "optimizer_cfg", ".", "pop", "(", "'paramwise_options'", ",", "None", ")", "\n", "# if no paramwise option is specified, just use the global setting", "\n", "if", "paramwise_options", "is", "None", ":", "\n", "        ", "return", "obj_from_dict", "(", "optimizer_cfg", ",", "torch", ".", "optim", ",", "\n", "dict", "(", "params", "=", "model", ".", "parameters", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "paramwise_options", ",", "dict", ")", "\n", "# get base lr and weight decay", "\n", "base_lr", "=", "optimizer_cfg", "[", "'lr'", "]", "\n", "base_wd", "=", "optimizer_cfg", ".", "get", "(", "'weight_decay'", ",", "None", ")", "\n", "# weight_decay must be explicitly specified if mult is specified", "\n", "if", "(", "'bias_decay_mult'", "in", "paramwise_options", "\n", "or", "'norm_decay_mult'", "in", "paramwise_options", ")", ":", "\n", "            ", "assert", "base_wd", "is", "not", "None", "\n", "# get param-wise options", "\n", "", "bias_lr_mult", "=", "paramwise_options", ".", "get", "(", "'bias_lr_mult'", ",", "1.", ")", "\n", "bias_decay_mult", "=", "paramwise_options", ".", "get", "(", "'bias_decay_mult'", ",", "1.", ")", "\n", "norm_decay_mult", "=", "paramwise_options", ".", "get", "(", "'norm_decay_mult'", ",", "1.", ")", "\n", "# set param-wise lr and weight decay", "\n", "params", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "param_group", "=", "{", "'params'", ":", "[", "param", "]", "}", "\n", "if", "not", "param", ".", "requires_grad", ":", "\n", "# FP16 training needs to copy gradient/weight between master", "\n", "# weight copy and model weight, it is convenient to keep all", "\n", "# parameters here to align with model.parameters()", "\n", "                ", "params", ".", "append", "(", "param_group", ")", "\n", "continue", "\n", "\n", "# for norm layers, overwrite the weight decay of weight and bias", "\n", "# TODO: obtain the norm layer prefixes dynamically", "\n", "", "if", "re", ".", "search", "(", "r'(bn|gn)(\\d+)?.(weight|bias)'", ",", "name", ")", ":", "\n", "                ", "if", "base_wd", "is", "not", "None", ":", "\n", "                    ", "param_group", "[", "'weight_decay'", "]", "=", "base_wd", "*", "norm_decay_mult", "\n", "# for other layers, overwrite both lr and weight decay of bias", "\n", "", "", "elif", "name", ".", "endswith", "(", "'.bias'", ")", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "base_lr", "*", "bias_lr_mult", "\n", "if", "base_wd", "is", "not", "None", ":", "\n", "                    ", "param_group", "[", "'weight_decay'", "]", "=", "base_wd", "*", "bias_decay_mult", "\n", "# otherwise use the global settings", "\n", "\n", "", "", "params", ".", "append", "(", "param_group", ")", "\n", "\n", "", "optimizer_cls", "=", "getattr", "(", "torch", ".", "optim", ",", "optimizer_cfg", ".", "pop", "(", "'type'", ")", ")", "\n", "return", "optimizer_cls", "(", "params", ",", "**", "optimizer_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_orig._dist_train": [[137, 187], ["mmcv.parallel.MMDistributedDataParallel", "train_orig.build_optimizer", "mmcv.runner.Runner", "cfg.get", "mmcv.runner.Runner.register_training_hooks", "mmcv.runner.Runner.register_hook", "mmcv.runner.Runner.run", "isinstance", "mmdet.datasets.build_dataloader", "mmcv.parallel.MMDistributedDataParallel.cuda", "mmdet.core.Fp16OptimizerHook", "mmdet.core.DistOptimizerHook", "mmcv.runner.DistSamplerSeedHook", "cfg.get", "isinstance", "mmcv.runner.Runner.resume", "mmcv.runner.Runner.register_hook", "mmdet.datasets.DATASETS.get", "issubclass", "mmcv.runner.Runner.load_checkpoint", "mmdet.core.CocoDistEvalRecallHook", "mmcv.runner.Runner.register_hook", "mmcv.runner.Runner.register_hook", "mmdet.core.CocoDistEvalmAPHook", "mmdet.core.DistEvalmAPHook"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_orig.build_optimizer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.run", "home.repos.pwc.inspect_result.twangnh_SimCal.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get"], ["", "", "def", "_dist_train", "(", "model", ",", "dataset", ",", "cfg", ",", "validate", "=", "False", ")", ":", "\n", "# prepare data loaders", "\n", "    ", "dataset", "=", "dataset", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dataset", "]", "\n", "data_loaders", "=", "[", "\n", "build_dataloader", "(", "\n", "ds", ",", "cfg", ".", "data", ".", "imgs_per_gpu", ",", "cfg", ".", "data", ".", "workers_per_gpu", ",", "dist", "=", "True", ")", "\n", "for", "ds", "in", "dataset", "\n", "]", "\n", "# put model on gpus", "\n", "model", "=", "MMDistributedDataParallel", "(", "model", ".", "cuda", "(", ")", ")", "\n", "\n", "# build runner", "\n", "optimizer", "=", "build_optimizer", "(", "model", ",", "cfg", ".", "optimizer", ")", "\n", "runner", "=", "Runner", "(", "model", ",", "batch_processor", ",", "optimizer", ",", "cfg", ".", "work_dir", ",", "\n", "cfg", ".", "log_level", ")", "\n", "\n", "# fp16 setting", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "optimizer_config", "=", "Fp16OptimizerHook", "(", "**", "cfg", ".", "optimizer_config", ",", "\n", "**", "fp16_cfg", ")", "\n", "", "else", ":", "\n", "        ", "optimizer_config", "=", "DistOptimizerHook", "(", "**", "cfg", ".", "optimizer_config", ")", "\n", "\n", "# register hooks", "\n", "", "runner", ".", "register_training_hooks", "(", "cfg", ".", "lr_config", ",", "optimizer_config", ",", "\n", "cfg", ".", "checkpoint_config", ",", "cfg", ".", "log_config", ")", "\n", "runner", ".", "register_hook", "(", "DistSamplerSeedHook", "(", ")", ")", "\n", "# register eval hooks", "\n", "if", "validate", ":", "\n", "        ", "val_dataset_cfg", "=", "cfg", ".", "data", ".", "val", "\n", "eval_cfg", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", "\n", "if", "isinstance", "(", "model", ".", "module", ",", "RPN", ")", ":", "\n", "# TODO: implement recall hooks for other datasets", "\n", "            ", "runner", ".", "register_hook", "(", "\n", "CocoDistEvalRecallHook", "(", "val_dataset_cfg", ",", "**", "eval_cfg", ")", ")", "\n", "", "else", ":", "\n", "            ", "dataset_type", "=", "DATASETS", ".", "get", "(", "val_dataset_cfg", ".", "type", ")", "\n", "if", "issubclass", "(", "dataset_type", ",", "datasets", ".", "CocoDataset", ")", ":", "\n", "                ", "runner", ".", "register_hook", "(", "\n", "CocoDistEvalmAPHook", "(", "val_dataset_cfg", ",", "**", "eval_cfg", ")", ")", "\n", "", "else", ":", "\n", "                ", "runner", ".", "register_hook", "(", "\n", "DistEvalmAPHook", "(", "val_dataset_cfg", ",", "**", "eval_cfg", ")", ")", "\n", "\n", "", "", "", "if", "cfg", ".", "resume_from", ":", "\n", "        ", "runner", ".", "resume", "(", "cfg", ".", "resume_from", ")", "\n", "", "elif", "cfg", ".", "load_from", ":", "\n", "        ", "runner", ".", "load_checkpoint", "(", "cfg", ".", "load_from", ")", "\n", "", "runner", ".", "run", "(", "data_loaders", ",", "cfg", ".", "workflow", ",", "cfg", ".", "total_epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_orig._non_dist_train": [[189, 226], ["mmcv.parallel.MMDataParallel().cuda", "train_orig.build_optimizer", "mmcv.runner.Runner", "mmcv.runner.Runner.logger.setLevel", "cfg.get", "mmcv.runner.Runner.register_training_hooks", "mmcv.runner.Runner.run", "isinstance", "mmdet.datasets.build_dataloader", "mmdet.core.Fp16OptimizerHook", "mmcv.runner.Runner.resume", "mmcv.parallel.MMDataParallel", "mmcv.runner.Runner.load_checkpoint", "range"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_orig.build_optimizer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.run", "home.repos.pwc.inspect_result.twangnh_SimCal.loader.build_loader.build_dataloader"], ["", "def", "_non_dist_train", "(", "model", ",", "dataset", ",", "cfg", ",", "validate", "=", "False", ")", ":", "\n", "# prepare data loaders", "\n", "    ", "dataset", "=", "dataset", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dataset", "]", "\n", "data_loaders", "=", "[", "\n", "build_dataloader", "(", "\n", "ds", ",", "\n", "cfg", ".", "data", ".", "imgs_per_gpu", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "cfg", ".", "gpus", ",", "\n", "dist", "=", "False", ",", "\n", ")", "for", "ds", "in", "dataset", "\n", "]", "\n", "# put model on gpus", "\n", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "range", "(", "cfg", ".", "gpus", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# build runner", "\n", "optimizer", "=", "build_optimizer", "(", "model", ",", "cfg", ".", "optimizer", ")", "\n", "runner", "=", "Runner", "(", "model", ",", "batch_processor", ",", "optimizer", ",", "cfg", ".", "work_dir", ",", "\n", "cfg", ".", "log_level", ")", "\n", "#hard fix for incorrect runner logger level due to environment issues", "\n", "import", "logging", "\n", "runner", ".", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "# fp16 setting", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "optimizer_config", "=", "Fp16OptimizerHook", "(", "\n", "**", "cfg", ".", "optimizer_config", ",", "**", "fp16_cfg", ",", "distributed", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "optimizer_config", "=", "cfg", ".", "optimizer_config", "\n", "", "runner", ".", "register_training_hooks", "(", "cfg", ".", "lr_config", ",", "optimizer_config", ",", "\n", "cfg", ".", "checkpoint_config", ",", "cfg", ".", "log_config", ")", "\n", "\n", "if", "cfg", ".", "resume_from", ":", "\n", "        ", "runner", ".", "resume", "(", "cfg", ".", "resume_from", ")", "\n", "", "elif", "cfg", ".", "load_from", ":", "\n", "        ", "runner", ".", "load_checkpoint", "(", "cfg", ".", "load_from", ")", "\n", "", "runner", ".", "run", "(", "data_loaders", ",", "cfg", ".", "workflow", ",", "cfg", ".", "total_epochs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.env.init_dist": [[13, 24], ["torch.get_start_method", "torch.set_start_method", "env._init_dist_pytorch", "env._init_dist_mpi", "env._init_dist_slurm", "ValueError"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.apis.env._init_dist_pytorch", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.env._init_dist_mpi", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.env._init_dist_slurm"], ["def", "init_dist", "(", "launcher", ",", "backend", "=", "'nccl'", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "mp", ".", "get_start_method", "(", "allow_none", "=", "True", ")", "is", "None", ":", "\n", "        ", "mp", ".", "set_start_method", "(", "'spawn'", ")", "\n", "", "if", "launcher", "==", "'pytorch'", ":", "\n", "        ", "_init_dist_pytorch", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "elif", "launcher", "==", "'mpi'", ":", "\n", "        ", "_init_dist_mpi", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "elif", "launcher", "==", "'slurm'", ":", "\n", "        ", "_init_dist_slurm", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid launcher type: {}'", ".", "format", "(", "launcher", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.env._init_dist_pytorch": [[26, 32], ["int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group"], "function", ["None"], ["", "", "def", "_init_dist_pytorch", "(", "backend", ",", "**", "kwargs", ")", ":", "\n", "# TODO: use local_rank instead of rank % num_gpus", "\n", "    ", "rank", "=", "int", "(", "os", ".", "environ", "[", "'RANK'", "]", ")", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "rank", "%", "num_gpus", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.env._init_dist_mpi": [[34, 36], ["None"], "function", ["None"], ["", "def", "_init_dist_mpi", "(", "backend", ",", "**", "kwargs", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.env._init_dist_slurm": [[38, 51], ["int", "int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "subprocess.getoutput", "str", "str", "str", "torch.init_process_group"], "function", ["None"], ["", "def", "_init_dist_slurm", "(", "backend", ",", "port", "=", "29500", ",", "**", "kwargs", ")", ":", "\n", "    ", "proc_id", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "ntasks", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_NTASKS'", "]", ")", "\n", "node_list", "=", "os", ".", "environ", "[", "'SLURM_NODELIST'", "]", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "proc_id", "%", "num_gpus", ")", "\n", "addr", "=", "subprocess", ".", "getoutput", "(", "\n", "'scontrol show hostname {} | head -n1'", ".", "format", "(", "node_list", ")", ")", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "str", "(", "port", ")", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "addr", "\n", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", "=", "str", "(", "ntasks", ")", "\n", "os", ".", "environ", "[", "'RANK'", "]", "=", "str", "(", "proc_id", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.env.set_random_seed": [[53, 58], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.apis.env.get_root_logger": [[60, 70], ["logging.getLogger", "mmcv.runner.get_dist_info", "logging.getLogger.hasHandlers", "logging.basicConfig", "logging.getLogger.setLevel"], "function", ["None"], ["", "def", "get_root_logger", "(", "log_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "if", "not", "logger", ".", "hasHandlers", "(", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "\n", "format", "=", "'%(asctime)s - %(levelname)s - %(message)s'", ",", "\n", "level", "=", "log_level", ")", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "logger", ".", "setLevel", "(", "'ERROR'", ")", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.ops.context_block.ContextBlock.__init__": [[15, 53], ["torch.nn.Module.__init__", "isinstance", "all", "int", "context_block.ContextBlock.reset_parameters", "len", "torch.nn.Conv2d", "torch.nn.Softmax", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.LayerNorm", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LayerNorm", "torch.nn.ReLU", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.ModulatedDeformConv.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "ratio", ",", "\n", "pooling_type", "=", "'att'", ",", "\n", "fusion_types", "=", "(", "'channel_add'", ",", ")", ")", ":", "\n", "        ", "super", "(", "ContextBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "pooling_type", "in", "[", "'avg'", ",", "'att'", "]", "\n", "assert", "isinstance", "(", "fusion_types", ",", "(", "list", ",", "tuple", ")", ")", "\n", "valid_fusion_types", "=", "[", "'channel_add'", ",", "'channel_mul'", "]", "\n", "assert", "all", "(", "[", "f", "in", "valid_fusion_types", "for", "f", "in", "fusion_types", "]", ")", "\n", "assert", "len", "(", "fusion_types", ")", ">", "0", ",", "'at least one fusion should be used'", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "planes", "=", "int", "(", "inplanes", "*", "ratio", ")", "\n", "self", ".", "pooling_type", "=", "pooling_type", "\n", "self", ".", "fusion_types", "=", "fusion_types", "\n", "if", "pooling_type", "==", "'att'", ":", "\n", "            ", "self", ".", "conv_mask", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "", "if", "'channel_add'", "in", "fusion_types", ":", "\n", "            ", "self", ".", "channel_add_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "self", ".", "planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "self", ".", "planes", ",", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# yapf: disable", "\n", "nn", ".", "Conv2d", "(", "self", ".", "planes", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "channel_add_conv", "=", "None", "\n", "", "if", "'channel_mul'", "in", "fusion_types", ":", "\n", "            ", "self", ".", "channel_mul_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "self", ".", "planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "self", ".", "planes", ",", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# yapf: disable", "\n", "nn", ".", "Conv2d", "(", "self", ".", "planes", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "channel_mul_conv", "=", "None", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.ops.context_block.ContextBlock.reset_parameters": [[54, 63], ["mmcv.cnn.kaiming_init", "context_block.last_zero_init", "context_block.last_zero_init"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.kaiming_init", "home.repos.pwc.inspect_result.twangnh_SimCal.ops.context_block.last_zero_init", "home.repos.pwc.inspect_result.twangnh_SimCal.ops.context_block.last_zero_init"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "pooling_type", "==", "'att'", ":", "\n", "            ", "kaiming_init", "(", "self", ".", "conv_mask", ",", "mode", "=", "'fan_in'", ")", "\n", "self", ".", "conv_mask", ".", "inited", "=", "True", "\n", "\n", "", "if", "self", ".", "channel_add_conv", "is", "not", "None", ":", "\n", "            ", "last_zero_init", "(", "self", ".", "channel_add_conv", ")", "\n", "", "if", "self", ".", "channel_mul_conv", "is", "not", "None", ":", "\n", "            ", "last_zero_init", "(", "self", ".", "channel_mul_conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.ops.context_block.ContextBlock.spatial_pool": [[64, 89], ["x.size", "input_x.unsqueeze.unsqueeze.view", "input_x.unsqueeze.unsqueeze.unsqueeze", "context_block.ContextBlock.conv_mask", "context_mask.unsqueeze.unsqueeze.view", "context_block.ContextBlock.softmax", "context_mask.unsqueeze.unsqueeze.unsqueeze", "torch.matmul", "context_block.ContextBlock.view", "context_block.ContextBlock.avg_pool"], "methods", ["None"], ["", "", "def", "spatial_pool", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch", ",", "channel", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "if", "self", ".", "pooling_type", "==", "'att'", ":", "\n", "            ", "input_x", "=", "x", "\n", "# [N, C, H * W]", "\n", "input_x", "=", "input_x", ".", "view", "(", "batch", ",", "channel", ",", "height", "*", "width", ")", "\n", "# [N, 1, C, H * W]", "\n", "input_x", "=", "input_x", ".", "unsqueeze", "(", "1", ")", "\n", "# [N, 1, H, W]", "\n", "context_mask", "=", "self", ".", "conv_mask", "(", "x", ")", "\n", "# [N, 1, H * W]", "\n", "context_mask", "=", "context_mask", ".", "view", "(", "batch", ",", "1", ",", "height", "*", "width", ")", "\n", "# [N, 1, H * W]", "\n", "context_mask", "=", "self", ".", "softmax", "(", "context_mask", ")", "\n", "# [N, 1, H * W, 1]", "\n", "context_mask", "=", "context_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# [N, 1, C, 1]", "\n", "context", "=", "torch", ".", "matmul", "(", "input_x", ",", "context_mask", ")", "\n", "# [N, C, 1, 1]", "\n", "context", "=", "context", ".", "view", "(", "batch", ",", "channel", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "# [N, C, 1, 1]", "\n", "            ", "context", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "\n", "", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.ops.context_block.ContextBlock.forward": [[90, 105], ["context_block.ContextBlock.spatial_pool", "torch.sigmoid", "context_block.ContextBlock.channel_add_conv", "context_block.ContextBlock.channel_mul_conv"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.ops.context_block.ContextBlock.spatial_pool"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# [N, C, 1, 1]", "\n", "        ", "context", "=", "self", ".", "spatial_pool", "(", "x", ")", "\n", "\n", "out", "=", "x", "\n", "if", "self", ".", "channel_mul_conv", "is", "not", "None", ":", "\n", "# [N, C, 1, 1]", "\n", "            ", "channel_mul_term", "=", "torch", ".", "sigmoid", "(", "self", ".", "channel_mul_conv", "(", "context", ")", ")", "\n", "out", "=", "out", "*", "channel_mul_term", "\n", "", "if", "self", ".", "channel_add_conv", "is", "not", "None", ":", "\n", "# [N, C, 1, 1]", "\n", "            ", "channel_add_term", "=", "self", ".", "channel_add_conv", "(", "context", ")", "\n", "out", "=", "out", "+", "channel_add_term", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.ops.context_block.last_zero_init": [[6, 11], ["isinstance", "mmcv.cnn.constant_init", "mmcv.cnn.constant_init"], "function", ["None"], ["def", "last_zero_init", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Sequential", ")", ":", "\n", "        ", "constant_init", "(", "m", "[", "-", "1", "]", ",", "val", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "constant_init", "(", "m", ",", "val", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.masked_conv.masked_conv.MaskedConv2dFunction.forward": [[14, 54], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "weight.size", "features.size", "int", "int", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "features.new_zeros", "ValueError", "math.floor", "math.floor", "torch.nonzero.numel", "torch.nonzero.numel", "mask_inds[].contiguous", "mask_inds[].contiguous", "features.new_zeros", "masked_conv2d_cuda.masked_im2col_forward", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "masked_conv2d_cuda.masked_col2im_forward", "mask.dim", "mask.size", "features.dim", "features.size", "features.size", "mask.size", "torch.nonzero.size", "torch.nonzero.size", "weight.view", "features.size", "features.size"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ",", "mask", ",", "weight", ",", "bias", ",", "padding", "=", "0", ",", "stride", "=", "1", ")", ":", "\n", "        ", "assert", "mask", ".", "dim", "(", ")", "==", "3", "and", "mask", ".", "size", "(", "0", ")", "==", "1", "\n", "assert", "features", ".", "dim", "(", ")", "==", "4", "and", "features", ".", "size", "(", "0", ")", "==", "1", "\n", "assert", "features", ".", "size", "(", ")", "[", "2", ":", "]", "==", "mask", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "pad_h", ",", "pad_w", "=", "_pair", "(", "padding", ")", "\n", "stride_h", ",", "stride_w", "=", "_pair", "(", "stride", ")", "\n", "if", "stride_h", "!=", "1", "or", "stride_w", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Stride could not only be 1 in masked_conv2d currently.'", ")", "\n", "", "if", "not", "features", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "out_channel", ",", "in_channel", ",", "kernel_h", ",", "kernel_w", "=", "weight", ".", "size", "(", ")", "\n", "\n", "batch_size", "=", "features", ".", "size", "(", "0", ")", "\n", "out_h", "=", "int", "(", "\n", "math", ".", "floor", "(", "(", "features", ".", "size", "(", "2", ")", "+", "2", "*", "pad_h", "-", "\n", "(", "kernel_h", "-", "1", ")", "-", "1", ")", "/", "stride_h", "+", "1", ")", ")", "\n", "out_w", "=", "int", "(", "\n", "math", ".", "floor", "(", "(", "features", ".", "size", "(", "3", ")", "+", "2", "*", "pad_w", "-", "\n", "(", "kernel_h", "-", "1", ")", "-", "1", ")", "/", "stride_w", "+", "1", ")", ")", "\n", "mask_inds", "=", "torch", ".", "nonzero", "(", "mask", "[", "0", "]", ">", "0", ")", "\n", "output", "=", "features", ".", "new_zeros", "(", "batch_size", ",", "out_channel", ",", "out_h", ",", "out_w", ")", "\n", "if", "mask_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "mask_h_idx", "=", "mask_inds", "[", ":", ",", "0", "]", ".", "contiguous", "(", ")", "\n", "mask_w_idx", "=", "mask_inds", "[", ":", ",", "1", "]", ".", "contiguous", "(", ")", "\n", "data_col", "=", "features", ".", "new_zeros", "(", "in_channel", "*", "kernel_h", "*", "kernel_w", ",", "\n", "mask_inds", ".", "size", "(", "0", ")", ")", "\n", "masked_conv2d_cuda", ".", "masked_im2col_forward", "(", "features", ",", "mask_h_idx", ",", "\n", "mask_w_idx", ",", "kernel_h", ",", "\n", "kernel_w", ",", "pad_h", ",", "pad_w", ",", "\n", "data_col", ")", "\n", "\n", "masked_output", "=", "torch", ".", "addmm", "(", "1", ",", "bias", "[", ":", ",", "None", "]", ",", "1", ",", "\n", "weight", ".", "view", "(", "out_channel", ",", "-", "1", ")", ",", "data_col", ")", "\n", "masked_conv2d_cuda", ".", "masked_col2im_forward", "(", "masked_output", ",", "mask_h_idx", ",", "\n", "mask_w_idx", ",", "out_h", ",", "out_w", ",", "\n", "out_channel", ",", "output", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.masked_conv.masked_conv.MaskedConv2dFunction.backward": [[55, 59], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "(", "None", ",", ")", "*", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.masked_conv.masked_conv.MaskedConv2d.__init__": [[71, 83], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "MaskedConv2d", ",", "\n", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "\n", "padding", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.masked_conv.masked_conv.MaskedConv2d.forward": [[84, 90], ["super().forward", "masked_conv2d"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.forward"], ["", "def", "forward", "(", "self", ",", "input", ",", "mask", "=", "None", ")", ":", "\n", "        ", "if", "mask", "is", "None", ":", "# fallback to the normal Conv2d", "\n", "            ", "return", "super", "(", "MaskedConv2d", ",", "self", ")", ".", "forward", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "return", "masked_conv2d", "(", "input", ",", "mask", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "padding", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.roi_pool.roi_pool.RoIPoolFunction.forward": [[12, 30], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "ctx.save_for_backward", "features.size", "rois.size", "features.new_zeros", "features.new_zeros", "roi_pool_cuda.forward", "features.size", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ",", "rois", ",", "out_size", ",", "spatial_scale", ")", ":", "\n", "        ", "assert", "features", ".", "is_cuda", "\n", "out_h", ",", "out_w", "=", "_pair", "(", "out_size", ")", "\n", "assert", "isinstance", "(", "out_h", ",", "int", ")", "and", "isinstance", "(", "out_w", ",", "int", ")", "\n", "ctx", ".", "save_for_backward", "(", "rois", ")", "\n", "num_channels", "=", "features", ".", "size", "(", "1", ")", "\n", "num_rois", "=", "rois", ".", "size", "(", "0", ")", "\n", "out_size", "=", "(", "num_rois", ",", "num_channels", ",", "out_h", ",", "out_w", ")", "\n", "output", "=", "features", ".", "new_zeros", "(", "out_size", ")", "\n", "argmax", "=", "features", ".", "new_zeros", "(", "out_size", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "roi_pool_cuda", ".", "forward", "(", "features", ",", "rois", ",", "out_h", ",", "out_w", ",", "spatial_scale", ",", "\n", "output", ",", "argmax", ")", "\n", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "feature_size", "=", "features", ".", "size", "(", ")", "\n", "ctx", ".", "argmax", "=", "argmax", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.roi_pool.roi_pool.RoIPoolFunction.backward": [[31, 48], ["grad_output.new_zeros", "roi_pool_cuda.backward", "grad_output.contiguous"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.roi_align.roi_align.RoIAlignFunction.backward"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "assert", "grad_output", ".", "is_cuda", "\n", "spatial_scale", "=", "ctx", ".", "spatial_scale", "\n", "feature_size", "=", "ctx", ".", "feature_size", "\n", "argmax", "=", "ctx", ".", "argmax", "\n", "rois", "=", "ctx", ".", "saved_tensors", "[", "0", "]", "\n", "assert", "feature_size", "is", "not", "None", "\n", "\n", "grad_input", "=", "grad_rois", "=", "None", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_input", "=", "grad_output", ".", "new_zeros", "(", "feature_size", ")", "\n", "roi_pool_cuda", ".", "backward", "(", "grad_output", ".", "contiguous", "(", ")", ",", "rois", ",", "argmax", ",", "\n", "spatial_scale", ",", "grad_input", ")", "\n", "\n", "", "return", "grad_input", ",", "grad_rois", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.roi_pool.roi_pool.RoIPool.__init__": [[55, 61], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "float"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_size", ",", "spatial_scale", ",", "use_torchvision", "=", "False", ")", ":", "\n", "        ", "super", "(", "RoIPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "out_size", "=", "_pair", "(", "out_size", ")", "\n", "self", ".", "spatial_scale", "=", "float", "(", "spatial_scale", ")", "\n", "self", ".", "use_torchvision", "=", "use_torchvision", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.roi_pool.roi_pool.RoIPool.forward": [[62, 69], ["tv_roi_pool", "roi_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "rois", ")", ":", "\n", "        ", "if", "self", ".", "use_torchvision", ":", "\n", "            ", "from", "torchvision", ".", "ops", "import", "roi_pool", "as", "tv_roi_pool", "\n", "return", "tv_roi_pool", "(", "features", ",", "rois", ",", "self", ".", "out_size", ",", "\n", "self", ".", "spatial_scale", ")", "\n", "", "else", ":", "\n", "            ", "return", "roi_pool", "(", "features", ",", "rois", ",", "self", ".", "out_size", ",", "self", ".", "spatial_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.roi_pool.roi_pool.RoIPool.__repr__": [[70, 76], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "format_str", "+=", "'(out_size={}, spatial_scale={}'", ".", "format", "(", "\n", "self", ".", "out_size", ",", "self", ".", "spatial_scale", ")", "\n", "format_str", "+=", "', use_torchvision={})'", ".", "format", "(", "self", ".", "use_torchvision", ")", "\n", "return", "format_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.DeformConvFunction.forward": [[14, 57], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "ctx.save_for_backward", "input.new_empty", "ValueError", "deform_conv.DeformConvFunction._output_size", "input.new_empty", "input.new_empty", "min", "deform_conv_cuda.deform_conv_forward_cuda", "input.dim", "weight.size", "weight.size", "input.dim"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.DeformConvFunction._output_size"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "\n", "input", ",", "\n", "offset", ",", "\n", "weight", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "deformable_groups", "=", "1", ",", "\n", "im2col_step", "=", "64", ")", ":", "\n", "        ", "if", "input", "is", "not", "None", "and", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Expected 4D tensor as input, got {}D tensor instead.\"", ".", "format", "(", "\n", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "ctx", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "ctx", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "ctx", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "ctx", ".", "groups", "=", "groups", "\n", "ctx", ".", "deformable_groups", "=", "deformable_groups", "\n", "ctx", ".", "im2col_step", "=", "im2col_step", "\n", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "offset", ",", "weight", ")", "\n", "\n", "output", "=", "input", ".", "new_empty", "(", "\n", "DeformConvFunction", ".", "_output_size", "(", "input", ",", "weight", ",", "ctx", ".", "padding", ",", "\n", "ctx", ".", "dilation", ",", "ctx", ".", "stride", ")", ")", "\n", "\n", "ctx", ".", "bufs_", "=", "[", "input", ".", "new_empty", "(", "0", ")", ",", "input", ".", "new_empty", "(", "0", ")", "]", "# columns, ones", "\n", "\n", "if", "not", "input", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "cur_im2col_step", "=", "min", "(", "ctx", ".", "im2col_step", ",", "input", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "input", ".", "shape", "[", "0", "]", "%", "\n", "cur_im2col_step", ")", "==", "0", ",", "'im2col step must divide batchsize'", "\n", "deform_conv_cuda", ".", "deform_conv_forward_cuda", "(", "\n", "input", ",", "weight", ",", "offset", ",", "output", ",", "ctx", ".", "bufs_", "[", "0", "]", ",", "ctx", ".", "bufs_", "[", "1", "]", ",", "\n", "weight", ".", "size", "(", "3", ")", ",", "weight", ".", "size", "(", "2", ")", ",", "ctx", ".", "stride", "[", "1", "]", ",", "ctx", ".", "stride", "[", "0", "]", ",", "\n", "ctx", ".", "padding", "[", "1", "]", ",", "ctx", ".", "padding", "[", "0", "]", ",", "ctx", ".", "dilation", "[", "1", "]", ",", "\n", "ctx", ".", "dilation", "[", "0", "]", ",", "ctx", ".", "groups", ",", "ctx", ".", "deformable_groups", ",", "\n", "cur_im2col_step", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.DeformConvFunction.backward": [[58, 95], ["min", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "deform_conv_cuda.deform_conv_backward_input_cuda", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "deform_conv_cuda.deform_conv_backward_parameters_cuda", "weight.size", "weight.size", "weight.size", "weight.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "offset", ",", "weight", "=", "ctx", ".", "saved_tensors", "\n", "\n", "grad_input", "=", "grad_offset", "=", "grad_weight", "=", "None", "\n", "\n", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "cur_im2col_step", "=", "min", "(", "ctx", ".", "im2col_step", ",", "input", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "input", ".", "shape", "[", "0", "]", "%", "\n", "cur_im2col_step", ")", "==", "0", ",", "'im2col step must divide batchsize'", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "grad_input", "=", "torch", ".", "zeros_like", "(", "input", ")", "\n", "grad_offset", "=", "torch", ".", "zeros_like", "(", "offset", ")", "\n", "deform_conv_cuda", ".", "deform_conv_backward_input_cuda", "(", "\n", "input", ",", "offset", ",", "grad_output", ",", "grad_input", ",", "\n", "grad_offset", ",", "weight", ",", "ctx", ".", "bufs_", "[", "0", "]", ",", "weight", ".", "size", "(", "3", ")", ",", "\n", "weight", ".", "size", "(", "2", ")", ",", "ctx", ".", "stride", "[", "1", "]", ",", "ctx", ".", "stride", "[", "0", "]", ",", "\n", "ctx", ".", "padding", "[", "1", "]", ",", "ctx", ".", "padding", "[", "0", "]", ",", "ctx", ".", "dilation", "[", "1", "]", ",", "\n", "ctx", ".", "dilation", "[", "0", "]", ",", "ctx", ".", "groups", ",", "ctx", ".", "deformable_groups", ",", "\n", "cur_im2col_step", ")", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "                ", "grad_weight", "=", "torch", ".", "zeros_like", "(", "weight", ")", "\n", "deform_conv_cuda", ".", "deform_conv_backward_parameters_cuda", "(", "\n", "input", ",", "offset", ",", "grad_output", ",", "\n", "grad_weight", ",", "ctx", ".", "bufs_", "[", "0", "]", ",", "ctx", ".", "bufs_", "[", "1", "]", ",", "weight", ".", "size", "(", "3", ")", ",", "\n", "weight", ".", "size", "(", "2", ")", ",", "ctx", ".", "stride", "[", "1", "]", ",", "ctx", ".", "stride", "[", "0", "]", ",", "\n", "ctx", ".", "padding", "[", "1", "]", ",", "ctx", ".", "padding", "[", "0", "]", ",", "ctx", ".", "dilation", "[", "1", "]", ",", "\n", "ctx", ".", "dilation", "[", "0", "]", ",", "ctx", ".", "groups", ",", "ctx", ".", "deformable_groups", ",", "1", ",", "\n", "cur_im2col_step", ")", "\n", "\n", "", "", "return", "(", "grad_input", ",", "grad_offset", ",", "grad_weight", ",", "None", ",", "None", ",", "None", ",", "None", ",", "\n", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.DeformConvFunction._output_size": [[96, 111], ["weight.size", "range", "input.size", "input.size", "all", "ValueError", "input.dim", "map", "weight.size", "map"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_output_size", "(", "input", ",", "weight", ",", "padding", ",", "dilation", ",", "stride", ")", ":", "\n", "        ", "channels", "=", "weight", ".", "size", "(", "0", ")", "\n", "output_size", "=", "(", "input", ".", "size", "(", "0", ")", ",", "channels", ")", "\n", "for", "d", "in", "range", "(", "input", ".", "dim", "(", ")", "-", "2", ")", ":", "\n", "            ", "in_size", "=", "input", ".", "size", "(", "d", "+", "2", ")", "\n", "pad", "=", "padding", "[", "d", "]", "\n", "kernel", "=", "dilation", "[", "d", "]", "*", "(", "weight", ".", "size", "(", "d", "+", "2", ")", "-", "1", ")", "+", "1", "\n", "stride_", "=", "stride", "[", "d", "]", "\n", "output_size", "+=", "(", "(", "in_size", "+", "(", "2", "*", "pad", ")", "-", "kernel", ")", "//", "stride_", "+", "1", ",", ")", "\n", "", "if", "not", "all", "(", "map", "(", "lambda", "s", ":", "s", ">", "0", ",", "output_size", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"convolution input is too small (output would be {})\"", ".", "format", "(", "\n", "'x'", ".", "join", "(", "map", "(", "str", ",", "output_size", ")", ")", ")", ")", "\n", "", "return", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.ModulatedDeformConvFunction.forward": [[115, 149], ["input.new_empty", "deform_conv_cuda.modulated_deform_conv_cuda_forward", "input.new_empty", "ctx.save_for_backward", "deform_conv.ModulatedDeformConvFunction._infer_shape", "input.new_empty", "input.new_empty"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.ModulatedDeformConvFunction._infer_shape"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "\n", "input", ",", "\n", "offset", ",", "\n", "mask", ",", "\n", "weight", ",", "\n", "bias", "=", "None", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "deformable_groups", "=", "1", ")", ":", "\n", "        ", "ctx", ".", "stride", "=", "stride", "\n", "ctx", ".", "padding", "=", "padding", "\n", "ctx", ".", "dilation", "=", "dilation", "\n", "ctx", ".", "groups", "=", "groups", "\n", "ctx", ".", "deformable_groups", "=", "deformable_groups", "\n", "ctx", ".", "with_bias", "=", "bias", "is", "not", "None", "\n", "if", "not", "ctx", ".", "with_bias", ":", "\n", "            ", "bias", "=", "input", ".", "new_empty", "(", "1", ")", "# fake tensor", "\n", "", "if", "not", "input", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "weight", ".", "requires_grad", "or", "mask", ".", "requires_grad", "or", "offset", ".", "requires_grad", "or", "input", ".", "requires_grad", ":", "\n", "            ", "ctx", ".", "save_for_backward", "(", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", ")", "\n", "", "output", "=", "input", ".", "new_empty", "(", "\n", "ModulatedDeformConvFunction", ".", "_infer_shape", "(", "ctx", ",", "input", ",", "weight", ")", ")", "\n", "ctx", ".", "_bufs", "=", "[", "input", ".", "new_empty", "(", "0", ")", ",", "input", ".", "new_empty", "(", "0", ")", "]", "\n", "deform_conv_cuda", ".", "modulated_deform_conv_cuda_forward", "(", "\n", "input", ",", "weight", ",", "bias", ",", "ctx", ".", "_bufs", "[", "0", "]", ",", "offset", ",", "mask", ",", "output", ",", "\n", "ctx", ".", "_bufs", "[", "1", "]", ",", "weight", ".", "shape", "[", "2", "]", ",", "weight", ".", "shape", "[", "3", "]", ",", "ctx", ".", "stride", ",", "\n", "ctx", ".", "stride", ",", "ctx", ".", "padding", ",", "ctx", ".", "padding", ",", "ctx", ".", "dilation", ",", "ctx", ".", "dilation", ",", "\n", "ctx", ".", "groups", ",", "ctx", ".", "deformable_groups", ",", "ctx", ".", "with_bias", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.ModulatedDeformConvFunction.backward": [[150, 172], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "deform_conv_cuda.modulated_deform_conv_cuda_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", "=", "torch", ".", "zeros_like", "(", "input", ")", "\n", "grad_offset", "=", "torch", ".", "zeros_like", "(", "offset", ")", "\n", "grad_mask", "=", "torch", ".", "zeros_like", "(", "mask", ")", "\n", "grad_weight", "=", "torch", ".", "zeros_like", "(", "weight", ")", "\n", "grad_bias", "=", "torch", ".", "zeros_like", "(", "bias", ")", "\n", "deform_conv_cuda", ".", "modulated_deform_conv_cuda_backward", "(", "\n", "input", ",", "weight", ",", "bias", ",", "ctx", ".", "_bufs", "[", "0", "]", ",", "offset", ",", "mask", ",", "ctx", ".", "_bufs", "[", "1", "]", ",", "\n", "grad_input", ",", "grad_weight", ",", "grad_bias", ",", "grad_offset", ",", "grad_mask", ",", "\n", "grad_output", ",", "weight", ".", "shape", "[", "2", "]", ",", "weight", ".", "shape", "[", "3", "]", ",", "ctx", ".", "stride", ",", "\n", "ctx", ".", "stride", ",", "ctx", ".", "padding", ",", "ctx", ".", "padding", ",", "ctx", ".", "dilation", ",", "ctx", ".", "dilation", ",", "\n", "ctx", ".", "groups", ",", "ctx", ".", "deformable_groups", ",", "ctx", ".", "with_bias", ")", "\n", "if", "not", "ctx", ".", "with_bias", ":", "\n", "            ", "grad_bias", "=", "None", "\n", "\n", "", "return", "(", "grad_input", ",", "grad_offset", ",", "grad_mask", ",", "grad_weight", ",", "grad_bias", ",", "\n", "None", ",", "None", ",", "None", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.ModulatedDeformConvFunction._infer_shape": [[173, 184], ["input.size", "weight.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_infer_shape", "(", "ctx", ",", "input", ",", "weight", ")", ":", "\n", "        ", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "channels_out", "=", "weight", ".", "size", "(", "0", ")", "\n", "height", ",", "width", "=", "input", ".", "shape", "[", "2", ":", "4", "]", "\n", "kernel_h", ",", "kernel_w", "=", "weight", ".", "shape", "[", "2", ":", "4", "]", "\n", "height_out", "=", "(", "height", "+", "2", "*", "ctx", ".", "padding", "-", "\n", "(", "ctx", ".", "dilation", "*", "(", "kernel_h", "-", "1", ")", "+", "1", ")", ")", "//", "ctx", ".", "stride", "+", "1", "\n", "width_out", "=", "(", "width", "+", "2", "*", "ctx", ".", "padding", "-", "\n", "(", "ctx", ".", "dilation", "*", "(", "kernel_w", "-", "1", ")", "+", "1", ")", ")", "//", "ctx", ".", "stride", "+", "1", "\n", "return", "n", ",", "channels_out", ",", "height_out", ",", "width_out", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.DeformConv.__init__": [[192, 226], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.Parameter", "torch.Parameter", "deform_conv.DeformConv.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.ModulatedDeformConv.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "deformable_groups", "=", "1", ",", "\n", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "DeformConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "not", "bias", "\n", "assert", "in_channels", "%", "groups", "==", "0", ",", "'in_channels {} cannot be divisible by groups {}'", ".", "format", "(", "\n", "in_channels", ",", "groups", ")", "\n", "assert", "out_channels", "%", "groups", "==", "0", ",", "'out_channels {} cannot be divisible by groups {}'", ".", "format", "(", "\n", "out_channels", ",", "groups", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "self", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "self", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "self", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", "//", "self", ".", "groups", ",", "\n", "*", "self", ".", "kernel_size", ")", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.DeformConv.reset_parameters": [[227, 233], ["deform_conv.DeformConv.weight.data.uniform_", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "            ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.DeformConv.forward": [[234, 237], ["deform_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "offset", ")", ":", "\n", "        ", "return", "deform_conv", "(", "x", ",", "offset", ",", "self", ".", "weight", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "deformable_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.DeformConvPack.__init__": [[241, 253], ["deform_conv.DeformConv.__init__", "torch.Conv2d", "torch.Conv2d", "deform_conv.DeformConvPack.init_offset", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.ModulatedDeformConvPack.init_offset"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DeformConvPack", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "conv_offset", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "deformable_groups", "*", "2", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "\n", "self", ".", "kernel_size", "[", "1", "]", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "stride", "=", "_pair", "(", "self", ".", "stride", ")", ",", "\n", "padding", "=", "_pair", "(", "self", ".", "padding", ")", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "init_offset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.DeformConvPack.init_offset": [[254, 257], ["deform_conv.DeformConvPack.conv_offset.weight.data.zero_", "deform_conv.DeformConvPack.conv_offset.bias.data.zero_"], "methods", ["None"], ["", "def", "init_offset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_offset", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "conv_offset", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.DeformConvPack.forward": [[258, 262], ["deform_conv.DeformConvPack.conv_offset", "deform_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "offset", "=", "self", ".", "conv_offset", "(", "x", ")", "\n", "return", "deform_conv", "(", "x", ",", "offset", ",", "self", ".", "weight", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "deformable_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.ModulatedDeformConv.__init__": [[266, 295], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.Parameter", "torch.Parameter", "deform_conv.ModulatedDeformConv.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "deform_conv.ModulatedDeformConv.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.ModulatedDeformConv.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "deformable_groups", "=", "1", ",", "\n", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "self", ".", "with_bias", "=", "bias", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", "//", "groups", ",", "\n", "*", "self", ".", "kernel_size", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.ModulatedDeformConv.reset_parameters": [[296, 304], ["deform_conv.ModulatedDeformConv.weight.data.uniform_", "math.sqrt", "deform_conv.ModulatedDeformConv.bias.data.zero_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "            ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.ModulatedDeformConv.forward": [[305, 309], ["modulated_deform_conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "offset", ",", "mask", ")", ":", "\n", "        ", "return", "modulated_deform_conv", "(", "x", ",", "offset", ",", "mask", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "self", ".", "deformable_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.ModulatedDeformConvPack.__init__": [[313, 325], ["deform_conv.ModulatedDeformConv.__init__", "torch.Conv2d", "torch.Conv2d", "deform_conv.ModulatedDeformConvPack.init_offset", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.ModulatedDeformConvPack.init_offset"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformConvPack", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "conv_offset_mask", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "deformable_groups", "*", "3", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "\n", "self", ".", "kernel_size", "[", "1", "]", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "stride", "=", "_pair", "(", "self", ".", "stride", ")", ",", "\n", "padding", "=", "_pair", "(", "self", ".", "padding", ")", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "init_offset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.ModulatedDeformConvPack.init_offset": [[326, 329], ["deform_conv.ModulatedDeformConvPack.conv_offset_mask.weight.data.zero_", "deform_conv.ModulatedDeformConvPack.conv_offset_mask.bias.data.zero_"], "methods", ["None"], ["", "def", "init_offset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_offset_mask", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "conv_offset_mask", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_conv.ModulatedDeformConvPack.forward": [[330, 338], ["deform_conv.ModulatedDeformConvPack.conv_offset_mask", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "modulated_deform_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv_offset_mask", "(", "x", ")", "\n", "o1", ",", "o2", ",", "mask", "=", "torch", ".", "chunk", "(", "out", ",", "3", ",", "dim", "=", "1", ")", "\n", "offset", "=", "torch", ".", "cat", "(", "(", "o1", ",", "o2", ")", ",", "dim", "=", "1", ")", "\n", "mask", "=", "torch", ".", "sigmoid", "(", "mask", ")", "\n", "return", "modulated_deform_conv", "(", "x", ",", "offset", ",", "mask", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "self", ".", "deformable_groups", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_pool.DeformRoIPoolingFunction.forward": [[11, 50], ["data.new_empty", "data.new_empty", "deform_pool_cuda.deform_psroi_pooling_cuda_forward", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "\n", "data", ",", "\n", "rois", ",", "\n", "offset", ",", "\n", "spatial_scale", ",", "\n", "out_size", ",", "\n", "out_channels", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ")", ":", "\n", "        ", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "out_size", "=", "out_size", "\n", "ctx", ".", "out_channels", "=", "out_channels", "\n", "ctx", ".", "no_trans", "=", "no_trans", "\n", "ctx", ".", "group_size", "=", "group_size", "\n", "ctx", ".", "part_size", "=", "out_size", "if", "part_size", "is", "None", "else", "part_size", "\n", "ctx", ".", "sample_per_part", "=", "sample_per_part", "\n", "ctx", ".", "trans_std", "=", "trans_std", "\n", "\n", "assert", "0.0", "<=", "ctx", ".", "trans_std", "<=", "1.0", "\n", "if", "not", "data", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "n", "=", "rois", ".", "shape", "[", "0", "]", "\n", "output", "=", "data", ".", "new_empty", "(", "n", ",", "out_channels", ",", "out_size", ",", "out_size", ")", "\n", "output_count", "=", "data", ".", "new_empty", "(", "n", ",", "out_channels", ",", "out_size", ",", "out_size", ")", "\n", "deform_pool_cuda", ".", "deform_psroi_pooling_cuda_forward", "(", "\n", "data", ",", "rois", ",", "offset", ",", "output", ",", "output_count", ",", "ctx", ".", "no_trans", ",", "\n", "ctx", ".", "spatial_scale", ",", "ctx", ".", "out_channels", ",", "ctx", ".", "group_size", ",", "ctx", ".", "out_size", ",", "\n", "ctx", ".", "part_size", ",", "ctx", ".", "sample_per_part", ",", "ctx", ".", "trans_std", ")", "\n", "\n", "if", "data", ".", "requires_grad", "or", "rois", ".", "requires_grad", "or", "offset", ".", "requires_grad", ":", "\n", "            ", "ctx", ".", "save_for_backward", "(", "data", ",", "rois", ",", "offset", ")", "\n", "", "ctx", ".", "output_count", "=", "output_count", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_pool.DeformRoIPoolingFunction.backward": [[51, 70], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "deform_pool_cuda.deform_psroi_pooling_cuda_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "data", ",", "rois", ",", "offset", "=", "ctx", ".", "saved_tensors", "\n", "output_count", "=", "ctx", ".", "output_count", "\n", "grad_input", "=", "torch", ".", "zeros_like", "(", "data", ")", "\n", "grad_rois", "=", "None", "\n", "grad_offset", "=", "torch", ".", "zeros_like", "(", "offset", ")", "\n", "\n", "deform_pool_cuda", ".", "deform_psroi_pooling_cuda_backward", "(", "\n", "grad_output", ",", "data", ",", "rois", ",", "offset", ",", "output_count", ",", "grad_input", ",", "\n", "grad_offset", ",", "ctx", ".", "no_trans", ",", "ctx", ".", "spatial_scale", ",", "ctx", ".", "out_channels", ",", "\n", "ctx", ".", "group_size", ",", "ctx", ".", "out_size", ",", "ctx", ".", "part_size", ",", "ctx", ".", "sample_per_part", ",", "\n", "ctx", ".", "trans_std", ")", "\n", "return", "(", "grad_input", ",", "grad_rois", ",", "grad_offset", ",", "None", ",", "None", ",", "None", ",", "None", ",", "\n", "None", ",", "None", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_pool.DeformRoIPooling.__init__": [[77, 95], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "spatial_scale", ",", "\n", "out_size", ",", "\n", "out_channels", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ")", ":", "\n", "        ", "super", "(", "DeformRoIPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "spatial_scale", "=", "spatial_scale", "\n", "self", ".", "out_size", "=", "out_size", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "no_trans", "=", "no_trans", "\n", "self", ".", "group_size", "=", "group_size", "\n", "self", ".", "part_size", "=", "out_size", "if", "part_size", "is", "None", "else", "part_size", "\n", "self", ".", "sample_per_part", "=", "sample_per_part", "\n", "self", ".", "trans_std", "=", "trans_std", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_pool.DeformRoIPooling.forward": [[96, 104], ["deform_roi_pooling", "data.new_empty"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ",", "rois", ",", "offset", ")", ":", "\n", "        ", "if", "self", ".", "no_trans", ":", "\n", "            ", "offset", "=", "data", ".", "new_empty", "(", "0", ")", "\n", "", "return", "deform_roi_pooling", "(", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "\n", "self", ".", "out_size", ",", "self", ".", "out_channels", ",", "\n", "self", ".", "no_trans", ",", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_pool.DeformRoIPoolingPack.__init__": [[108, 141], ["deform_pool.DeformRoIPooling.__init__", "range", "torch.Sequential", "torch.Sequential", "deform_pool.DeformRoIPoolingPack.offset_fc[].weight.data.zero_", "deform_pool.DeformRoIPoolingPack.offset_fc[].bias.data.zero_", "seq.append", "torch.Linear", "torch.Linear", "seq.append", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "spatial_scale", ",", "\n", "out_size", ",", "\n", "out_channels", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ",", "\n", "num_offset_fcs", "=", "3", ",", "\n", "deform_fc_channels", "=", "1024", ")", ":", "\n", "        ", "super", "(", "DeformRoIPoolingPack", ",", "\n", "self", ")", ".", "__init__", "(", "spatial_scale", ",", "out_size", ",", "out_channels", ",", "no_trans", ",", "\n", "group_size", ",", "part_size", ",", "sample_per_part", ",", "trans_std", ")", "\n", "\n", "self", ".", "num_offset_fcs", "=", "num_offset_fcs", "\n", "self", ".", "deform_fc_channels", "=", "deform_fc_channels", "\n", "\n", "if", "not", "no_trans", ":", "\n", "            ", "seq", "=", "[", "]", "\n", "ic", "=", "self", ".", "out_size", "*", "self", ".", "out_size", "*", "self", ".", "out_channels", "\n", "for", "i", "in", "range", "(", "self", ".", "num_offset_fcs", ")", ":", "\n", "                ", "if", "i", "<", "self", ".", "num_offset_fcs", "-", "1", ":", "\n", "                    ", "oc", "=", "self", ".", "deform_fc_channels", "\n", "", "else", ":", "\n", "                    ", "oc", "=", "self", ".", "out_size", "*", "self", ".", "out_size", "*", "2", "\n", "", "seq", ".", "append", "(", "nn", ".", "Linear", "(", "ic", ",", "oc", ")", ")", "\n", "ic", "=", "oc", "\n", "if", "i", "<", "self", ".", "num_offset_fcs", "-", "1", ":", "\n", "                    ", "seq", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "", "self", ".", "offset_fc", "=", "nn", ".", "Sequential", "(", "*", "seq", ")", "\n", "self", ".", "offset_fc", "[", "-", "1", "]", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "offset_fc", "[", "-", "1", "]", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_pool.DeformRoIPoolingPack.forward": [[142, 165], ["data.size", "data.new_empty", "deform_roi_pooling", "data.new_empty", "deform_roi_pooling", "deform_pool.DeformRoIPoolingPack.offset_fc", "offset.view.view.view", "deform_roi_pooling", "deform_roi_pooling.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "data", ",", "rois", ")", ":", "\n", "        ", "assert", "data", ".", "size", "(", "1", ")", "==", "self", ".", "out_channels", "\n", "if", "self", ".", "no_trans", ":", "\n", "            ", "offset", "=", "data", ".", "new_empty", "(", "0", ")", "\n", "return", "deform_roi_pooling", "(", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "\n", "self", ".", "out_size", ",", "self", ".", "out_channels", ",", "\n", "self", ".", "no_trans", ",", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "\n", "", "else", ":", "\n", "            ", "n", "=", "rois", ".", "shape", "[", "0", "]", "\n", "offset", "=", "data", ".", "new_empty", "(", "0", ")", "\n", "x", "=", "deform_roi_pooling", "(", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "\n", "self", ".", "out_size", ",", "self", ".", "out_channels", ",", "True", ",", "\n", "self", ".", "group_size", ",", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "self", ".", "trans_std", ")", "\n", "offset", "=", "self", ".", "offset_fc", "(", "x", ".", "view", "(", "n", ",", "-", "1", ")", ")", "\n", "offset", "=", "offset", ".", "view", "(", "n", ",", "2", ",", "self", ".", "out_size", ",", "self", ".", "out_size", ")", "\n", "return", "deform_roi_pooling", "(", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "\n", "self", ".", "out_size", ",", "self", ".", "out_channels", ",", "\n", "self", ".", "no_trans", ",", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_pool.ModulatedDeformRoIPoolingPack.__init__": [[169, 221], ["deform_pool.DeformRoIPooling.__init__", "range", "torch.Sequential", "torch.Sequential", "deform_pool.ModulatedDeformRoIPoolingPack.offset_fc[].weight.data.zero_", "deform_pool.ModulatedDeformRoIPoolingPack.offset_fc[].bias.data.zero_", "range", "torch.Sequential", "torch.Sequential", "deform_pool.ModulatedDeformRoIPoolingPack.mask_fc[].weight.data.zero_", "deform_pool.ModulatedDeformRoIPoolingPack.mask_fc[].bias.data.zero_", "offset_fc_seq.append", "mask_fc_seq.append", "torch.Linear", "torch.Linear", "offset_fc_seq.append", "torch.Linear", "torch.Linear", "mask_fc_seq.append", "mask_fc_seq.append", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "spatial_scale", ",", "\n", "out_size", ",", "\n", "out_channels", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ",", "\n", "num_offset_fcs", "=", "3", ",", "\n", "num_mask_fcs", "=", "2", ",", "\n", "deform_fc_channels", "=", "1024", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformRoIPoolingPack", ",", "\n", "self", ")", ".", "__init__", "(", "spatial_scale", ",", "out_size", ",", "out_channels", ",", "no_trans", ",", "\n", "group_size", ",", "part_size", ",", "sample_per_part", ",", "trans_std", ")", "\n", "\n", "self", ".", "num_offset_fcs", "=", "num_offset_fcs", "\n", "self", ".", "num_mask_fcs", "=", "num_mask_fcs", "\n", "self", ".", "deform_fc_channels", "=", "deform_fc_channels", "\n", "\n", "if", "not", "no_trans", ":", "\n", "            ", "offset_fc_seq", "=", "[", "]", "\n", "ic", "=", "self", ".", "out_size", "*", "self", ".", "out_size", "*", "self", ".", "out_channels", "\n", "for", "i", "in", "range", "(", "self", ".", "num_offset_fcs", ")", ":", "\n", "                ", "if", "i", "<", "self", ".", "num_offset_fcs", "-", "1", ":", "\n", "                    ", "oc", "=", "self", ".", "deform_fc_channels", "\n", "", "else", ":", "\n", "                    ", "oc", "=", "self", ".", "out_size", "*", "self", ".", "out_size", "*", "2", "\n", "", "offset_fc_seq", ".", "append", "(", "nn", ".", "Linear", "(", "ic", ",", "oc", ")", ")", "\n", "ic", "=", "oc", "\n", "if", "i", "<", "self", ".", "num_offset_fcs", "-", "1", ":", "\n", "                    ", "offset_fc_seq", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "", "self", ".", "offset_fc", "=", "nn", ".", "Sequential", "(", "*", "offset_fc_seq", ")", "\n", "self", ".", "offset_fc", "[", "-", "1", "]", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "offset_fc", "[", "-", "1", "]", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "mask_fc_seq", "=", "[", "]", "\n", "ic", "=", "self", ".", "out_size", "*", "self", ".", "out_size", "*", "self", ".", "out_channels", "\n", "for", "i", "in", "range", "(", "self", ".", "num_mask_fcs", ")", ":", "\n", "                ", "if", "i", "<", "self", ".", "num_mask_fcs", "-", "1", ":", "\n", "                    ", "oc", "=", "self", ".", "deform_fc_channels", "\n", "", "else", ":", "\n", "                    ", "oc", "=", "self", ".", "out_size", "*", "self", ".", "out_size", "\n", "", "mask_fc_seq", ".", "append", "(", "nn", ".", "Linear", "(", "ic", ",", "oc", ")", ")", "\n", "ic", "=", "oc", "\n", "if", "i", "<", "self", ".", "num_mask_fcs", "-", "1", ":", "\n", "                    ", "mask_fc_seq", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                    ", "mask_fc_seq", ".", "append", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "", "", "self", ".", "mask_fc", "=", "nn", ".", "Sequential", "(", "*", "mask_fc_seq", ")", "\n", "self", ".", "mask_fc", "[", "-", "2", "]", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "mask_fc", "[", "-", "2", "]", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.dcn.deform_pool.ModulatedDeformRoIPoolingPack.forward": [[222, 246], ["data.size", "data.new_empty", "deform_roi_pooling", "data.new_empty", "deform_roi_pooling", "deform_pool.ModulatedDeformRoIPoolingPack.offset_fc", "offset.view.view.view", "deform_pool.ModulatedDeformRoIPoolingPack.mask_fc", "mask.view.view.view", "deform_roi_pooling.view", "deform_roi_pooling.view", "deform_roi_pooling"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "data", ",", "rois", ")", ":", "\n", "        ", "assert", "data", ".", "size", "(", "1", ")", "==", "self", ".", "out_channels", "\n", "if", "self", ".", "no_trans", ":", "\n", "            ", "offset", "=", "data", ".", "new_empty", "(", "0", ")", "\n", "return", "deform_roi_pooling", "(", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "\n", "self", ".", "out_size", ",", "self", ".", "out_channels", ",", "\n", "self", ".", "no_trans", ",", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "\n", "", "else", ":", "\n", "            ", "n", "=", "rois", ".", "shape", "[", "0", "]", "\n", "offset", "=", "data", ".", "new_empty", "(", "0", ")", "\n", "x", "=", "deform_roi_pooling", "(", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "\n", "self", ".", "out_size", ",", "self", ".", "out_channels", ",", "True", ",", "\n", "self", ".", "group_size", ",", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "self", ".", "trans_std", ")", "\n", "offset", "=", "self", ".", "offset_fc", "(", "x", ".", "view", "(", "n", ",", "-", "1", ")", ")", "\n", "offset", "=", "offset", ".", "view", "(", "n", ",", "2", ",", "self", ".", "out_size", ",", "self", ".", "out_size", ")", "\n", "mask", "=", "self", ".", "mask_fc", "(", "x", ".", "view", "(", "n", ",", "-", "1", ")", ")", "\n", "mask", "=", "mask", ".", "view", "(", "n", ",", "1", ",", "self", ".", "out_size", ",", "self", ".", "out_size", ")", "\n", "return", "deform_roi_pooling", "(", "\n", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "self", ".", "out_size", ",", "\n", "self", ".", "out_channels", ",", "self", ".", "no_trans", ",", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "self", ".", "sample_per_part", ",", "self", ".", "trans_std", ")", "*", "mask", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.nms.nms_wrapper.nms": [[8, 50], ["isinstance", "isinstance", "torch.from_numpy().to.new_zeros", "nms_cpu.nms.cpu().numpy", "torch.from_numpy().to", "TypeError", "nms_cuda.nms", "nms_cpu.nms", "nms_cpu.nms.cpu", "torch.from_numpy", "type"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.nms.nms_wrapper.nms", "home.repos.pwc.inspect_result.twangnh_SimCal.nms.nms_wrapper.nms"], ["def", "nms", "(", "dets", ",", "iou_thr", ",", "device_id", "=", "None", ")", ":", "\n", "    ", "\"\"\"Dispatch to either CPU or GPU NMS implementations.\n\n    The input can be either a torch tensor or numpy array. GPU NMS will be used\n    if the input is a gpu tensor or device_id is specified, otherwise CPU NMS\n    will be used. The returned type will always be the same as inputs.\n\n    Arguments:\n        dets (torch.Tensor or np.ndarray): bboxes with scores.\n        iou_thr (float): IoU threshold for NMS.\n        device_id (int, optional): when `dets` is a numpy array, if `device_id`\n            is None, then cpu nms is used, otherwise gpu_nms will be used.\n\n    Returns:\n        tuple: kept bboxes and indice, which is always the same data type as\n            the input.\n    \"\"\"", "\n", "# convert dets (tensor or numpy array) to tensor", "\n", "if", "isinstance", "(", "dets", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "is_numpy", "=", "False", "\n", "dets_th", "=", "dets", "\n", "", "elif", "isinstance", "(", "dets", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "is_numpy", "=", "True", "\n", "device", "=", "'cpu'", "if", "device_id", "is", "None", "else", "'cuda:{}'", ".", "format", "(", "device_id", ")", "\n", "dets_th", "=", "torch", ".", "from_numpy", "(", "dets", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'dets must be either a Tensor or numpy array, but got {}'", ".", "format", "(", "\n", "type", "(", "dets", ")", ")", ")", "\n", "\n", "# execute cpu or cuda nms", "\n", "", "if", "dets_th", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "inds", "=", "dets_th", ".", "new_zeros", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "else", ":", "\n", "        ", "if", "dets_th", ".", "is_cuda", ":", "\n", "            ", "inds", "=", "nms_cuda", ".", "nms", "(", "dets_th", ",", "iou_thr", ")", "\n", "", "else", ":", "\n", "            ", "inds", "=", "nms_cpu", ".", "nms", "(", "dets_th", ",", "iou_thr", ")", "\n", "\n", "", "", "if", "is_numpy", ":", "\n", "        ", "inds", "=", "inds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "dets", "[", "inds", ",", ":", "]", ",", "inds", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.nms.nms_wrapper.soft_nms": [[52, 79], ["isinstance", "soft_nms_cpu.soft_nms_cpu", "dets.detach().cpu().numpy", "isinstance", "ValueError", "TypeError", "dets.new_tensor", "dets.new_tensor", "new_dets.astype", "inds.astype", "dets.detach().cpu", "type", "dets.detach"], "function", ["None"], ["", "def", "soft_nms", "(", "dets", ",", "iou_thr", ",", "method", "=", "'linear'", ",", "sigma", "=", "0.5", ",", "min_score", "=", "1e-3", ")", ":", "\n", "    ", "if", "isinstance", "(", "dets", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "is_tensor", "=", "True", "\n", "dets_np", "=", "dets", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "isinstance", "(", "dets", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "is_tensor", "=", "False", "\n", "dets_np", "=", "dets", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'dets must be either a Tensor or numpy array, but got {}'", ".", "format", "(", "\n", "type", "(", "dets", ")", ")", ")", "\n", "\n", "", "method_codes", "=", "{", "'linear'", ":", "1", ",", "'gaussian'", ":", "2", "}", "\n", "if", "method", "not", "in", "method_codes", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid method for SoftNMS: {}'", ".", "format", "(", "method", ")", ")", "\n", "", "new_dets", ",", "inds", "=", "soft_nms_cpu", "(", "\n", "dets_np", ",", "\n", "iou_thr", ",", "\n", "method", "=", "method_codes", "[", "method", "]", ",", "\n", "sigma", "=", "sigma", ",", "\n", "min_score", "=", "min_score", ")", "\n", "\n", "if", "is_tensor", ":", "\n", "        ", "return", "dets", ".", "new_tensor", "(", "new_dets", ")", ",", "dets", ".", "new_tensor", "(", "\n", "inds", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "else", ":", "\n", "        ", "return", "new_dets", ".", "astype", "(", "np", ".", "float32", ")", ",", "inds", ".", "astype", "(", "np", ".", "int64", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.sigmoid_focal_loss.sigmoid_focal_loss.SigmoidFocalLossFunction.forward": [[10, 21], ["ctx.save_for_backward", "sigmoid_focal_loss_cuda.forward"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "target", ",", "gamma", "=", "2.0", ",", "alpha", "=", "0.25", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "input", ",", "target", ")", "\n", "num_classes", "=", "input", ".", "shape", "[", "1", "]", "\n", "ctx", ".", "num_classes", "=", "num_classes", "\n", "ctx", ".", "gamma", "=", "gamma", "\n", "ctx", ".", "alpha", "=", "alpha", "\n", "\n", "loss", "=", "sigmoid_focal_loss_cuda", ".", "forward", "(", "input", ",", "target", ",", "num_classes", ",", "\n", "gamma", ",", "alpha", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.sigmoid_focal_loss.sigmoid_focal_loss.SigmoidFocalLossFunction.backward": [[22, 33], ["d_loss.contiguous.contiguous.contiguous", "sigmoid_focal_loss_cuda.backward"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.roi_align.roi_align.RoIAlignFunction.backward"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "d_loss", ")", ":", "\n", "        ", "input", ",", "target", "=", "ctx", ".", "saved_tensors", "\n", "num_classes", "=", "ctx", ".", "num_classes", "\n", "gamma", "=", "ctx", ".", "gamma", "\n", "alpha", "=", "ctx", ".", "alpha", "\n", "d_loss", "=", "d_loss", ".", "contiguous", "(", ")", "\n", "d_input", "=", "sigmoid_focal_loss_cuda", ".", "backward", "(", "input", ",", "target", ",", "d_loss", ",", "\n", "num_classes", ",", "gamma", ",", "alpha", ")", "\n", "return", "d_input", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.sigmoid_focal_loss.sigmoid_focal_loss.SigmoidFocalLoss.__init__": [[41, 45], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", ",", "alpha", ")", ":", "\n", "        ", "super", "(", "SigmoidFocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.sigmoid_focal_loss.sigmoid_focal_loss.SigmoidFocalLoss.forward": [[46, 50], ["sigmoid_focal_loss", "sigmoid_focal_loss.sum"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.losses.focal_loss.sigmoid_focal_loss"], ["", "def", "forward", "(", "self", ",", "logits", ",", "targets", ")", ":", "\n", "        ", "assert", "logits", ".", "is_cuda", "\n", "loss", "=", "sigmoid_focal_loss", "(", "logits", ",", "targets", ",", "self", ".", "gamma", ",", "self", ".", "alpha", ")", "\n", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.sigmoid_focal_loss.sigmoid_focal_loss.SigmoidFocalLoss.__repr__": [[51, 55], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "self", ".", "__class__", ".", "__name__", "+", "'(gamma={}, alpha={})'", ".", "format", "(", "\n", "self", ".", "gamma", ",", "self", ".", "alpha", ")", "\n", "return", "tmpstr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.roi_align.roi_align.RoIAlignFunction.forward": [[11, 31], ["torch.nn.modules.utils._pair", "ctx.save_for_backward", "features.size", "features.size", "rois.size", "features.new_zeros", "isinstance", "isinstance", "roi_align_cuda.forward"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ",", "rois", ",", "out_size", ",", "spatial_scale", ",", "sample_num", "=", "0", ")", ":", "\n", "        ", "out_h", ",", "out_w", "=", "_pair", "(", "out_size", ")", "\n", "assert", "isinstance", "(", "out_h", ",", "int", ")", "and", "isinstance", "(", "out_w", ",", "int", ")", "\n", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "sample_num", "=", "sample_num", "\n", "ctx", ".", "save_for_backward", "(", "rois", ")", "\n", "ctx", ".", "feature_size", "=", "features", ".", "size", "(", ")", "\n", "\n", "batch_size", ",", "num_channels", ",", "data_height", ",", "data_width", "=", "features", ".", "size", "(", ")", "\n", "num_rois", "=", "rois", ".", "size", "(", "0", ")", "\n", "\n", "output", "=", "features", ".", "new_zeros", "(", "num_rois", ",", "num_channels", ",", "out_h", ",", "out_w", ")", "\n", "if", "features", ".", "is_cuda", ":", "\n", "            ", "roi_align_cuda", ".", "forward", "(", "features", ",", "rois", ",", "out_h", ",", "out_w", ",", "spatial_scale", ",", "\n", "sample_num", ",", "output", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.roi_align.roi_align.RoIAlignFunction.backward": [[32, 54], ["grad_output.size", "grad_output.size", "rois.new_zeros", "roi_align_cuda.backward", "grad_output.contiguous"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.roi_align.roi_align.RoIAlignFunction.backward"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "feature_size", "=", "ctx", ".", "feature_size", "\n", "spatial_scale", "=", "ctx", ".", "spatial_scale", "\n", "sample_num", "=", "ctx", ".", "sample_num", "\n", "rois", "=", "ctx", ".", "saved_tensors", "[", "0", "]", "\n", "assert", "(", "feature_size", "is", "not", "None", "and", "grad_output", ".", "is_cuda", ")", "\n", "\n", "batch_size", ",", "num_channels", ",", "data_height", ",", "data_width", "=", "feature_size", "\n", "out_w", "=", "grad_output", ".", "size", "(", "3", ")", "\n", "out_h", "=", "grad_output", ".", "size", "(", "2", ")", "\n", "\n", "grad_input", "=", "grad_rois", "=", "None", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_input", "=", "rois", ".", "new_zeros", "(", "batch_size", ",", "num_channels", ",", "data_height", ",", "\n", "data_width", ")", "\n", "roi_align_cuda", ".", "backward", "(", "grad_output", ".", "contiguous", "(", ")", ",", "rois", ",", "out_h", ",", "\n", "out_w", ",", "spatial_scale", ",", "sample_num", ",", "\n", "grad_input", ")", "\n", "\n", "", "return", "grad_input", ",", "grad_rois", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.roi_align.roi_align.RoIAlign.__init__": [[61, 72], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "float", "int"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "out_size", ",", "\n", "spatial_scale", ",", "\n", "sample_num", "=", "0", ",", "\n", "use_torchvision", "=", "False", ")", ":", "\n", "        ", "super", "(", "RoIAlign", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "out_size", "=", "_pair", "(", "out_size", ")", "\n", "self", ".", "spatial_scale", "=", "float", "(", "spatial_scale", ")", "\n", "self", ".", "sample_num", "=", "int", "(", "sample_num", ")", "\n", "self", ".", "use_torchvision", "=", "use_torchvision", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.roi_align.roi_align.RoIAlign.forward": [[73, 81], ["tv_roi_align", "roi_align"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "rois", ")", ":", "\n", "        ", "if", "self", ".", "use_torchvision", ":", "\n", "            ", "from", "torchvision", ".", "ops", "import", "roi_align", "as", "tv_roi_align", "\n", "return", "tv_roi_align", "(", "features", ",", "rois", ",", "self", ".", "out_size", ",", "\n", "self", ".", "spatial_scale", ",", "self", ".", "sample_num", ")", "\n", "", "else", ":", "\n", "            ", "return", "roi_align", "(", "features", ",", "rois", ",", "self", ".", "out_size", ",", "self", ".", "spatial_scale", ",", "\n", "self", ".", "sample_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.roi_align.roi_align.RoIAlign.__repr__": [[82, 88], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "format_str", "+=", "'(out_size={}, spatial_scale={}, sample_num={}'", ".", "format", "(", "\n", "self", ".", "out_size", ",", "self", ".", "spatial_scale", ",", "self", ".", "sample_num", ")", "\n", "format_str", "+=", "', use_torchvision={})'", ".", "format", "(", "self", ".", "use_torchvision", ")", "\n", "return", "format_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build": [[8, 16], ["isinstance", "torch.nn.Sequential", "mmdet.utils.build_from_cfg", "mmdet.utils.build_from_cfg", "registry.BACKBONES", "registry.NECKS", "registry.ROI_EXTRACTORS", "registry.SHARED_HEADS", "registry.HEADS", "registry.LOSSES", "registry.DETECTORS"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.build_from_cfg", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.build_from_cfg"], ["def", "_concat_dataset", "(", "cfg", ")", ":", "\n", "    ", "ann_files", "=", "cfg", "[", "'ann_file'", "]", "\n", "img_prefixes", "=", "cfg", ".", "get", "(", "'img_prefix'", ",", "None", ")", "\n", "seg_prefixes", "=", "cfg", ".", "get", "(", "'seg_prefixes'", ",", "None", ")", "\n", "proposal_files", "=", "cfg", ".", "get", "(", "'proposal_file'", ",", "None", ")", "\n", "\n", "datasets", "=", "[", "]", "\n", "num_dset", "=", "len", "(", "ann_files", ")", "\n", "for", "i", "in", "range", "(", "num_dset", ")", ":", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_backbone": [[18, 20], ["builder.build"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build"], ["data_cfg", "[", "'ann_file'", "]", "=", "ann_files", "[", "i", "]", "\n", "if", "isinstance", "(", "img_prefixes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'img_prefix'", "]", "=", "img_prefixes", "[", "i", "]", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_neck": [[22, 24], ["builder.build"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build"], ["            ", "data_cfg", "[", "'seg_prefix'", "]", "=", "seg_prefixes", "[", "i", "]", "\n", "", "if", "isinstance", "(", "proposal_files", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'proposal_file'", "]", "=", "proposal_files", "[", "i", "]", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_roi_extractor": [[26, 28], ["builder.build"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build"], ["\n", "", "return", "ConcatDataset", "(", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_shared_head": [[30, 32], ["builder.build"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build"], ["", "def", "build_dataset", "(", "cfg", ")", ":", "\n", "    ", "if", "cfg", "[", "'type'", "]", "==", "'RepeatDataset'", ":", "\n", "        ", "dataset", "=", "RepeatDataset", "(", "build_dataset", "(", "cfg", "[", "'dataset'", "]", ")", ",", "cfg", "[", "'times'", "]", ")", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_head": [[34, 36], ["builder.build"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build"], ["        ", "dataset", "=", "_concat_dataset", "(", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "build_from_cfg", "(", "cfg", ",", "DATASETS", ")", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_loss": [[38, 40], ["builder.build"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build"], ["", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_detector": [[42, 44], ["builder.build", "dict"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build"], []], "home.repos.pwc.inspect_result.twangnh_SimCal.necks.fpn.FPN.__init__": [[13, 92], ["torch.Module.__init__", "isinstance", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "utils.ConvModule", "utils.ConvModule", "fpn.FPN.lateral_convs.append", "fpn.FPN.fpn_convs.append", "range", "len", "utils.ConvModule", "fpn.FPN.fpn_convs.append"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "num_outs", ",", "\n", "start_level", "=", "0", ",", "\n", "end_level", "=", "-", "1", ",", "\n", "add_extra_convs", "=", "False", ",", "\n", "extra_convs_on_inputs", "=", "True", ",", "\n", "relu_before_extra_convs", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "activation", "=", "None", ")", ":", "\n", "        ", "super", "(", "FPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "in_channels", ",", "list", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_ins", "=", "len", "(", "in_channels", ")", "\n", "self", ".", "num_outs", "=", "num_outs", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "relu_before_extra_convs", "=", "relu_before_extra_convs", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n", "if", "end_level", "==", "-", "1", ":", "\n", "            ", "self", ".", "backbone_end_level", "=", "self", ".", "num_ins", "\n", "assert", "num_outs", ">=", "self", ".", "num_ins", "-", "start_level", "\n", "", "else", ":", "\n", "# if end_level < inputs, no extra level is allowed", "\n", "            ", "self", ".", "backbone_end_level", "=", "end_level", "\n", "assert", "end_level", "<=", "len", "(", "in_channels", ")", "\n", "assert", "num_outs", "==", "end_level", "-", "start_level", "\n", "", "self", ".", "start_level", "=", "start_level", "\n", "self", ".", "end_level", "=", "end_level", "\n", "self", ".", "add_extra_convs", "=", "add_extra_convs", "\n", "self", ".", "extra_convs_on_inputs", "=", "extra_convs_on_inputs", "\n", "\n", "self", ".", "lateral_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "fpn_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "start_level", ",", "self", ".", "backbone_end_level", ")", ":", "\n", "            ", "l_conv", "=", "ConvModule", "(", "\n", "in_channels", "[", "i", "]", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "inplace", "=", "False", ")", "\n", "fpn_conv", "=", "ConvModule", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "inplace", "=", "False", ")", "\n", "\n", "self", ".", "lateral_convs", ".", "append", "(", "l_conv", ")", "\n", "self", ".", "fpn_convs", ".", "append", "(", "fpn_conv", ")", "\n", "\n", "# add extra conv layers (e.g., RetinaNet)", "\n", "", "extra_levels", "=", "num_outs", "-", "self", ".", "backbone_end_level", "+", "self", ".", "start_level", "\n", "if", "add_extra_convs", "and", "extra_levels", ">=", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "extra_levels", ")", ":", "\n", "                ", "if", "i", "==", "0", "and", "self", ".", "extra_convs_on_inputs", ":", "\n", "                    ", "in_channels", "=", "self", ".", "in_channels", "[", "self", ".", "backbone_end_level", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "in_channels", "=", "out_channels", "\n", "", "extra_fpn_conv", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "inplace", "=", "False", ")", "\n", "self", ".", "fpn_convs", ".", "append", "(", "extra_fpn_conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.necks.fpn.FPN.init_weights": [[94, 98], ["fpn.FPN.modules", "isinstance", "mmcv.cnn.xavier_init"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.xavier_init"], ["", "", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "xavier_init", "(", "m", ",", "distribution", "=", "'uniform'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.necks.fpn.FPN.forward": [[99, 140], ["mmdet.core.auto_fp16", "len", "range", "tuple", "len", "len", "lateral_conv", "torch.interpolate", "torch.interpolate", "len", "enumerate", "range", "range", "range", "outs.append", "outs.append", "outs.append", "torch.max_pool2d", "torch.max_pool2d", "outs.append", "outs.append", "torch.relu", "torch.relu"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.auto_fp16"], ["", "", "", "@", "auto_fp16", "(", ")", "\n", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "assert", "len", "(", "inputs", ")", "==", "len", "(", "self", ".", "in_channels", ")", "\n", "\n", "# build laterals", "\n", "laterals", "=", "[", "\n", "lateral_conv", "(", "inputs", "[", "i", "+", "self", ".", "start_level", "]", ")", "\n", "for", "i", ",", "lateral_conv", "in", "enumerate", "(", "self", ".", "lateral_convs", ")", "\n", "]", "\n", "\n", "# build top-down path", "\n", "used_backbone_levels", "=", "len", "(", "laterals", ")", "\n", "for", "i", "in", "range", "(", "used_backbone_levels", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "laterals", "[", "i", "-", "1", "]", "+=", "F", ".", "interpolate", "(", "\n", "laterals", "[", "i", "]", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "# build outputs", "\n", "# part 1: from original levels", "\n", "", "outs", "=", "[", "\n", "self", ".", "fpn_convs", "[", "i", "]", "(", "laterals", "[", "i", "]", ")", "for", "i", "in", "range", "(", "used_backbone_levels", ")", "\n", "]", "\n", "# part 2: add extra levels", "\n", "if", "self", ".", "num_outs", ">", "len", "(", "outs", ")", ":", "\n", "# use max pool to get more levels on top of outputs", "\n", "# (e.g., Faster R-CNN, Mask R-CNN)", "\n", "            ", "if", "not", "self", ".", "add_extra_convs", ":", "\n", "                ", "for", "i", "in", "range", "(", "self", ".", "num_outs", "-", "used_backbone_levels", ")", ":", "\n", "                    ", "outs", ".", "append", "(", "F", ".", "max_pool2d", "(", "outs", "[", "-", "1", "]", ",", "1", ",", "stride", "=", "2", ")", ")", "\n", "# add conv layers on top of original feature maps (RetinaNet)", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "extra_convs_on_inputs", ":", "\n", "                    ", "orig", "=", "inputs", "[", "self", ".", "backbone_end_level", "-", "1", "]", "\n", "outs", ".", "append", "(", "self", ".", "fpn_convs", "[", "used_backbone_levels", "]", "(", "orig", ")", ")", "\n", "", "else", ":", "\n", "                    ", "outs", ".", "append", "(", "self", ".", "fpn_convs", "[", "used_backbone_levels", "]", "(", "outs", "[", "-", "1", "]", ")", ")", "\n", "", "for", "i", "in", "range", "(", "used_backbone_levels", "+", "1", ",", "self", ".", "num_outs", ")", ":", "\n", "                    ", "if", "self", ".", "relu_before_extra_convs", ":", "\n", "                        ", "outs", ".", "append", "(", "self", ".", "fpn_convs", "[", "i", "]", "(", "F", ".", "relu", "(", "outs", "[", "-", "1", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "outs", ".", "append", "(", "self", ".", "fpn_convs", "[", "i", "]", "(", "outs", "[", "-", "1", "]", ")", ")", "\n", "", "", "", "", "return", "tuple", "(", "outs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.necks.hrfpn.HRFPN.__init__": [[29, 69], ["torch.Module.__init__", "isinstance", "len", "utils.ConvModule", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "sum", "hrfpn.HRFPN.fpn_convs.append", "utils.ConvModule"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "num_outs", "=", "5", ",", "\n", "pooling_type", "=", "'AVG'", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "with_cp", "=", "False", ")", ":", "\n", "        ", "super", "(", "HRFPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "in_channels", ",", "list", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_ins", "=", "len", "(", "in_channels", ")", "\n", "self", ".", "num_outs", "=", "num_outs", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "\n", "self", ".", "reduction_conv", "=", "ConvModule", "(", "\n", "sum", "(", "in_channels", ")", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "activation", "=", "None", ")", "\n", "\n", "self", ".", "fpn_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_outs", ")", ":", "\n", "            ", "self", ".", "fpn_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "activation", "=", "None", ")", ")", "\n", "\n", "", "if", "pooling_type", "==", "'MAX'", ":", "\n", "            ", "self", ".", "pooling", "=", "F", ".", "max_pool2d", "\n", "", "else", ":", "\n", "            ", "self", ".", "pooling", "=", "F", ".", "avg_pool2d", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.necks.hrfpn.HRFPN.init_weights": [[70, 74], ["hrfpn.HRFPN.modules", "isinstance", "mmcv.cnn.weight_init.caffe2_xavier_init"], "methods", ["None"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "caffe2_xavier_init", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.necks.hrfpn.HRFPN.forward": [[75, 98], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "tuple", "len", "outs.append", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint", "hrfpn.HRFPN.reduction_conv", "outs.append", "outputs.append", "torch.interpolate", "torch.interpolate", "torch.interpolate", "hrfpn.HRFPN.pooling", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "assert", "len", "(", "inputs", ")", "==", "self", ".", "num_ins", "\n", "outs", "=", "[", "inputs", "[", "0", "]", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_ins", ")", ":", "\n", "            ", "outs", ".", "append", "(", "\n", "F", ".", "interpolate", "(", "inputs", "[", "i", "]", ",", "scale_factor", "=", "2", "**", "i", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "outs", ",", "dim", "=", "1", ")", "\n", "if", "out", ".", "requires_grad", "and", "self", ".", "with_cp", ":", "\n", "            ", "out", "=", "checkpoint", "(", "self", ".", "reduction_conv", ",", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "reduction_conv", "(", "out", ")", "\n", "", "outs", "=", "[", "out", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_outs", ")", ":", "\n", "            ", "outs", ".", "append", "(", "self", ".", "pooling", "(", "out", ",", "kernel_size", "=", "2", "**", "i", ",", "stride", "=", "2", "**", "i", ")", ")", "\n", "", "outputs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_outs", ")", ":", "\n", "            ", "if", "outs", "[", "i", "]", ".", "requires_grad", "and", "self", ".", "with_cp", ":", "\n", "                ", "tmp_out", "=", "checkpoint", "(", "self", ".", "fpn_convs", "[", "i", "]", ",", "outs", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "tmp_out", "=", "self", ".", "fpn_convs", "[", "i", "]", "(", "outs", "[", "i", "]", ")", "\n", "", "outputs", ".", "append", "(", "tmp_out", ")", "\n", "", "return", "tuple", "(", "outputs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.necks.bfp.BFP.__init__": [[31, 65], ["torch.Module.__init__", "utils.ConvModule", "plugins.NonLocal2D"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "num_levels", ",", "\n", "refine_level", "=", "2", ",", "\n", "refine_type", "=", "None", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "BFP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "refine_type", "in", "[", "None", ",", "'conv'", ",", "'non_local'", "]", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_levels", "=", "num_levels", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "\n", "self", ".", "refine_level", "=", "refine_level", "\n", "self", ".", "refine_type", "=", "refine_type", "\n", "assert", "0", "<=", "self", ".", "refine_level", "<", "self", ".", "num_levels", "\n", "\n", "if", "self", ".", "refine_type", "==", "'conv'", ":", "\n", "            ", "self", ".", "refine", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "in_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", "\n", "", "elif", "self", ".", "refine_type", "==", "'non_local'", ":", "\n", "            ", "self", ".", "refine", "=", "NonLocal2D", "(", "\n", "self", ".", "in_channels", ",", "\n", "reduction", "=", "1", ",", "\n", "use_scale", "=", "False", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.necks.bfp.BFP.init_weights": [[66, 70], ["bfp.BFP.modules", "isinstance", "mmcv.cnn.xavier_init"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.xavier_init"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "xavier_init", "(", "m", ",", "distribution", "=", "'uniform'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.necks.bfp.BFP.forward": [[71, 103], ["range", "range", "tuple", "len", "inputs[].size", "feats.append", "sum", "len", "bfp.BFP.refine", "outs.append", "torch.adaptive_max_pool2d", "torch.adaptive_max_pool2d", "torch.interpolate", "torch.interpolate", "inputs[].size", "torch.interpolate", "torch.interpolate", "torch.adaptive_max_pool2d", "torch.adaptive_max_pool2d"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "assert", "len", "(", "inputs", ")", "==", "self", ".", "num_levels", "\n", "\n", "# step 1: gather multi-level features by resize and average", "\n", "feats", "=", "[", "]", "\n", "gather_size", "=", "inputs", "[", "self", ".", "refine_level", "]", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "if", "i", "<", "self", ".", "refine_level", ":", "\n", "                ", "gathered", "=", "F", ".", "adaptive_max_pool2d", "(", "\n", "inputs", "[", "i", "]", ",", "output_size", "=", "gather_size", ")", "\n", "", "else", ":", "\n", "                ", "gathered", "=", "F", ".", "interpolate", "(", "\n", "inputs", "[", "i", "]", ",", "size", "=", "gather_size", ",", "mode", "=", "'nearest'", ")", "\n", "", "feats", ".", "append", "(", "gathered", ")", "\n", "\n", "", "bsf", "=", "sum", "(", "feats", ")", "/", "len", "(", "feats", ")", "\n", "\n", "# step 2: refine gathered features", "\n", "if", "self", ".", "refine_type", "is", "not", "None", ":", "\n", "            ", "bsf", "=", "self", ".", "refine", "(", "bsf", ")", "\n", "\n", "# step 3: scatter refined features to multi-levels by a residual path", "\n", "", "outs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "out_size", "=", "inputs", "[", "i", "]", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "if", "i", "<", "self", ".", "refine_level", ":", "\n", "                ", "residual", "=", "F", ".", "interpolate", "(", "bsf", ",", "size", "=", "out_size", ",", "mode", "=", "'nearest'", ")", "\n", "", "else", ":", "\n", "                ", "residual", "=", "F", ".", "adaptive_max_pool2d", "(", "bsf", ",", "output_size", "=", "out_size", ")", "\n", "", "outs", ".", "append", "(", "residual", "+", "inputs", "[", "i", "]", ")", "\n", "\n", "", "return", "tuple", "(", "outs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.maskiou_head.MaskIoUHead.__init__": [[19, 64], ["dict", "torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "builder.build_loss", "maskiou_head.MaskIoUHead.convs.append", "maskiou_head.MaskIoUHead.fcs.append", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_loss"], ["def", "__init__", "(", "self", ",", "\n", "num_convs", "=", "4", ",", "\n", "num_fcs", "=", "2", ",", "\n", "roi_feat_size", "=", "14", ",", "\n", "in_channels", "=", "256", ",", "\n", "conv_out_channels", "=", "256", ",", "\n", "fc_out_channels", "=", "1024", ",", "\n", "num_classes", "=", "81", ",", "\n", "loss_iou", "=", "dict", "(", "type", "=", "'MSELoss'", ",", "loss_weight", "=", "0.5", ")", ")", ":", "\n", "        ", "super", "(", "MaskIoUHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "conv_out_channels", "=", "conv_out_channels", "\n", "self", ".", "fc_out_channels", "=", "fc_out_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_convs", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "# concatenation of mask feature and mask prediction", "\n", "                ", "in_channels", "=", "self", ".", "in_channels", "+", "1", "\n", "", "else", ":", "\n", "                ", "in_channels", "=", "self", ".", "conv_out_channels", "\n", "", "stride", "=", "2", "if", "i", "==", "num_convs", "-", "1", "else", "1", "\n", "self", ".", "convs", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "self", ".", "conv_out_channels", ",", "\n", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ")", ")", "\n", "\n", "", "roi_feat_size", "=", "_pair", "(", "roi_feat_size", ")", "\n", "pooled_area", "=", "(", "roi_feat_size", "[", "0", "]", "//", "2", ")", "*", "(", "roi_feat_size", "[", "1", "]", "//", "2", ")", "\n", "self", ".", "fcs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_fcs", ")", ":", "\n", "            ", "in_channels", "=", "(", "\n", "self", ".", "conv_out_channels", "*", "\n", "pooled_area", "if", "i", "==", "0", "else", "self", ".", "fc_out_channels", ")", "\n", "self", ".", "fcs", ".", "append", "(", "nn", ".", "Linear", "(", "in_channels", ",", "self", ".", "fc_out_channels", ")", ")", "\n", "\n", "", "self", ".", "fc_mask_iou", "=", "nn", ".", "Linear", "(", "self", ".", "fc_out_channels", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "loss_iou", "=", "build_loss", "(", "loss_iou", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.maskiou_head.MaskIoUHead.init_weights": [[65, 76], ["mmcv.cnn.normal_init", "mmcv.cnn.kaiming_init", "mmcv.cnn.kaiming_init"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.kaiming_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.kaiming_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "kaiming_init", "(", "conv", ")", "\n", "", "for", "fc", "in", "self", ".", "fcs", ":", "\n", "            ", "kaiming_init", "(", "\n", "fc", ",", "\n", "a", "=", "1", ",", "\n", "mode", "=", "'fan_in'", ",", "\n", "nonlinearity", "=", "'leaky_relu'", ",", "\n", "distribution", "=", "'uniform'", ")", "\n", "", "normal_init", "(", "self", ".", "fc_mask_iou", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.maskiou_head.MaskIoUHead.forward": [[77, 90], ["mask_pred.sigmoid.sigmoid.sigmoid", "maskiou_head.MaskIoUHead.max_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "maskiou_head.MaskIoUHead.view", "maskiou_head.MaskIoUHead.fc_mask_iou", "mask_pred.sigmoid.sigmoid.unsqueeze", "maskiou_head.MaskIoUHead.relu", "maskiou_head.MaskIoUHead.size", "maskiou_head.MaskIoUHead.relu", "conv", "fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mask_feat", ",", "mask_pred", ")", ":", "\n", "        ", "mask_pred", "=", "mask_pred", ".", "sigmoid", "(", ")", "\n", "mask_pred_pooled", "=", "self", ".", "max_pool", "(", "mask_pred", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "mask_feat", ",", "mask_pred_pooled", ")", ",", "1", ")", "\n", "\n", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "conv", "(", "x", ")", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "for", "fc", "in", "self", ".", "fcs", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "fc", "(", "x", ")", ")", "\n", "", "mask_iou", "=", "self", ".", "fc_mask_iou", "(", "x", ")", "\n", "return", "mask_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.maskiou_head.MaskIoUHead.loss": [[91, 100], ["mmdet.core.force_fp32", "dict", "pos_inds.sum", "maskiou_head.MaskIoUHead.loss_iou"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.force_fp32"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'mask_iou_pred'", ",", ")", ")", "\n", "def", "loss", "(", "self", ",", "mask_iou_pred", ",", "mask_iou_targets", ")", ":", "\n", "        ", "pos_inds", "=", "mask_iou_targets", ">", "0", "\n", "if", "pos_inds", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "loss_mask_iou", "=", "self", ".", "loss_iou", "(", "mask_iou_pred", "[", "pos_inds", "]", ",", "\n", "mask_iou_targets", "[", "pos_inds", "]", ")", "\n", "", "else", ":", "\n", "            ", "loss_mask_iou", "=", "mask_iou_pred", "*", "0", "\n", "", "return", "dict", "(", "loss_mask_iou", "=", "loss_mask_iou", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.maskiou_head.MaskIoUHead.get_target": [[101, 150], ["mmdet.core.force_fp32", "map", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mask_pred.sum", "list", "mask_targets.size", "torch.cat.size", "torch.cat.size", "mask_targets.sum"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.force_fp32"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'mask_pred'", ",", ")", ")", "\n", "def", "get_target", "(", "self", ",", "sampling_results", ",", "gt_masks", ",", "mask_pred", ",", "mask_targets", ",", "\n", "rcnn_train_cfg", ")", ":", "\n", "        ", "\"\"\"Compute target of mask IoU.\n\n        Mask IoU target is the IoU of the predicted mask (inside a bbox) and\n        the gt mask of corresponding gt mask (the whole instance).\n        The intersection area is computed inside the bbox, and the gt mask area\n        is computed with two steps, firstly we compute the gt area inside the\n        bbox, then divide it by the area ratio of gt area inside the bbox and\n        the gt area of the whole instance.\n\n        Args:\n            sampling_results (list[:obj:`SamplingResult`]): sampling results.\n            gt_masks (list[ndarray]): Gt masks (the whole instance) of each\n                image, binary maps with the same shape of the input image.\n            mask_pred (Tensor): Predicted masks of each positive proposal,\n                shape (num_pos, h, w).\n            mask_targets (Tensor): Gt mask of each positive proposal,\n                binary map of the shape (num_pos, h, w).\n            rcnn_train_cfg (dict): Training config for R-CNN part.\n\n        Returns:\n            Tensor: mask iou target (length == num positive).\n        \"\"\"", "\n", "pos_proposals", "=", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", "\n", "pos_assigned_gt_inds", "=", "[", "\n", "res", ".", "pos_assigned_gt_inds", "for", "res", "in", "sampling_results", "\n", "]", "\n", "\n", "# compute the area ratio of gt areas inside the proposals and", "\n", "# the whole instance", "\n", "area_ratios", "=", "map", "(", "self", ".", "_get_area_ratio", ",", "pos_proposals", ",", "\n", "pos_assigned_gt_inds", ",", "gt_masks", ")", "\n", "area_ratios", "=", "torch", ".", "cat", "(", "list", "(", "area_ratios", ")", ")", "\n", "assert", "mask_targets", ".", "size", "(", "0", ")", "==", "area_ratios", ".", "size", "(", "0", ")", "\n", "\n", "mask_pred", "=", "(", "mask_pred", ">", "rcnn_train_cfg", ".", "mask_thr_binary", ")", ".", "float", "(", ")", "\n", "mask_pred_areas", "=", "mask_pred", ".", "sum", "(", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "\n", "# mask_pred and mask_targets are binary maps", "\n", "overlap_areas", "=", "(", "mask_pred", "*", "mask_targets", ")", ".", "sum", "(", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "\n", "# compute the mask area of the whole instance", "\n", "gt_full_areas", "=", "mask_targets", ".", "sum", "(", "(", "-", "1", ",", "-", "2", ")", ")", "/", "(", "area_ratios", "+", "1e-7", ")", "\n", "\n", "mask_iou_targets", "=", "overlap_areas", "/", "(", "\n", "mask_pred_areas", "+", "gt_full_areas", "-", "overlap_areas", ")", "\n", "return", "mask_iou_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.maskiou_head.MaskIoUHead._get_area_ratio": [[151, 176], ["pos_proposals.size", "pos_proposals.cpu().numpy", "pos_assigned_gt_inds.cpu().numpy.cpu().numpy.cpu().numpy", "gt_masks.sum", "range", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "pos_proposals.new_zeros", "proposals_np[].astype", "pos_proposals.new_zeros.append", "pos_proposals.cpu", "pos_assigned_gt_inds.cpu().numpy.cpu().numpy.cpu", "gt_mask_in_proposal.sum", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.stack"], "methods", ["None"], ["", "def", "_get_area_ratio", "(", "self", ",", "pos_proposals", ",", "pos_assigned_gt_inds", ",", "gt_masks", ")", ":", "\n", "        ", "\"\"\"Compute area ratio of the gt mask inside the proposal and the gt\n        mask of the corresponding instance\"\"\"", "\n", "num_pos", "=", "pos_proposals", ".", "size", "(", "0", ")", "\n", "if", "num_pos", ">", "0", ":", "\n", "            ", "area_ratios", "=", "[", "]", "\n", "proposals_np", "=", "pos_proposals", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pos_assigned_gt_inds", "=", "pos_assigned_gt_inds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# compute mask areas of gt instances (batch processing for speedup)", "\n", "gt_instance_mask_area", "=", "gt_masks", ".", "sum", "(", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "num_pos", ")", ":", "\n", "                ", "gt_mask", "=", "gt_masks", "[", "pos_assigned_gt_inds", "[", "i", "]", "]", "\n", "\n", "# crop the gt mask inside the proposal", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "proposals_np", "[", "i", ",", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "gt_mask_in_proposal", "=", "gt_mask", "[", "y1", ":", "y2", "+", "1", ",", "x1", ":", "x2", "+", "1", "]", "\n", "\n", "ratio", "=", "gt_mask_in_proposal", ".", "sum", "(", ")", "/", "(", "\n", "gt_instance_mask_area", "[", "pos_assigned_gt_inds", "[", "i", "]", "]", "+", "1e-7", ")", "\n", "area_ratios", ".", "append", "(", "ratio", ")", "\n", "", "area_ratios", "=", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "area_ratios", ")", ")", ".", "float", "(", ")", ".", "to", "(", "\n", "pos_proposals", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "area_ratios", "=", "pos_proposals", ".", "new_zeros", "(", "(", "0", ",", ")", ")", "\n", "", "return", "area_ratios", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.maskiou_head.MaskIoUHead.get_mask_scores": [[177, 190], ["mmdet.core.force_fp32", "range", "mask_scores.cpu().numpy.cpu().numpy.cpu().numpy", "det_labels.cpu().numpy.cpu().numpy.cpu().numpy", "det_labels.cpu().numpy.cpu().numpy.size", "mask_scores.cpu().numpy.cpu().numpy.cpu", "det_labels.cpu().numpy.cpu().numpy.cpu", "range"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.force_fp32"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'mask_iou_pred'", ",", ")", ")", "\n", "def", "get_mask_scores", "(", "self", ",", "mask_iou_pred", ",", "det_bboxes", ",", "det_labels", ")", ":", "\n", "        ", "\"\"\"Get the mask scores.\n\n        mask_score = bbox_score * mask_iou\n        \"\"\"", "\n", "inds", "=", "range", "(", "det_labels", ".", "size", "(", "0", ")", ")", "\n", "mask_scores", "=", "mask_iou_pred", "[", "inds", ",", "det_labels", "+", "\n", "1", "]", "*", "det_bboxes", "[", "inds", ",", "-", "1", "]", "\n", "mask_scores", "=", "mask_scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "det_labels", "=", "det_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "[", "\n", "mask_scores", "[", "det_labels", "==", "i", "]", "for", "i", "in", "range", "(", "self", ".", "num_classes", "-", "1", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.grid_head.GridHead.__init__": [[15, 142], ["dict", "dict", "torch.Module.__init__", "int", "grid_head.GridHead.calc_sub_regions", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "range", "sum", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "builder.build_loss", "isinstance", "numpy.sqrt", "ValueError", "isinstance", "ValueError", "grid_head.GridHead.convs.append", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "grid_head.GridHead.forder_trans.append", "grid_head.GridHead.sorder_trans.append", "utils.ConvModule", "grid_head.GridHead.neighbor_points.append", "len", "len", "torch.ModuleList.append", "torch.ModuleList.append", "neighbors.append", "neighbors.append", "neighbors.append", "neighbors.append", "tuple", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.grid_head.GridHead.calc_sub_regions", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_loss"], ["    ", "def", "__init__", "(", "self", ",", "\n", "grid_points", "=", "9", ",", "\n", "num_convs", "=", "8", ",", "\n", "roi_feat_size", "=", "14", ",", "\n", "in_channels", "=", "256", ",", "\n", "conv_kernel_size", "=", "3", ",", "\n", "point_feat_channels", "=", "64", ",", "\n", "deconv_kernel_size", "=", "4", ",", "\n", "class_agnostic", "=", "False", ",", "\n", "loss_grid", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "use_sigmoid", "=", "True", ",", "\n", "loss_weight", "=", "15", ")", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'GN'", ",", "num_groups", "=", "36", ")", ")", ":", "\n", "        ", "super", "(", "GridHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "grid_points", "=", "grid_points", "\n", "self", ".", "num_convs", "=", "num_convs", "\n", "self", ".", "roi_feat_size", "=", "roi_feat_size", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "conv_kernel_size", "=", "conv_kernel_size", "\n", "self", ".", "point_feat_channels", "=", "point_feat_channels", "\n", "self", ".", "conv_out_channels", "=", "self", ".", "point_feat_channels", "*", "self", ".", "grid_points", "\n", "self", ".", "class_agnostic", "=", "class_agnostic", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "if", "isinstance", "(", "norm_cfg", ",", "dict", ")", "and", "norm_cfg", "[", "'type'", "]", "==", "'GN'", ":", "\n", "            ", "assert", "self", ".", "conv_out_channels", "%", "norm_cfg", "[", "'num_groups'", "]", "==", "0", "\n", "\n", "", "assert", "self", ".", "grid_points", ">=", "4", "\n", "self", ".", "grid_size", "=", "int", "(", "np", ".", "sqrt", "(", "self", ".", "grid_points", ")", ")", "\n", "if", "self", ".", "grid_size", "*", "self", ".", "grid_size", "!=", "self", ".", "grid_points", ":", "\n", "            ", "raise", "ValueError", "(", "'grid_points must be a square number'", ")", "\n", "\n", "# the predicted heatmap is half of whole_map_size", "\n", "", "if", "not", "isinstance", "(", "self", ".", "roi_feat_size", ",", "int", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Only square RoIs are supporeted in Grid R-CNN'", ")", "\n", "", "self", ".", "whole_map_size", "=", "self", ".", "roi_feat_size", "*", "4", "\n", "\n", "# compute point-wise sub-regions", "\n", "self", ".", "sub_regions", "=", "self", ".", "calc_sub_regions", "(", ")", "\n", "\n", "self", ".", "convs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_convs", ")", ":", "\n", "            ", "in_channels", "=", "(", "\n", "self", ".", "in_channels", "if", "i", "==", "0", "else", "self", ".", "conv_out_channels", ")", "\n", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "padding", "=", "(", "self", ".", "conv_kernel_size", "-", "1", ")", "//", "2", "\n", "self", ".", "convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "in_channels", ",", "\n", "self", ".", "conv_out_channels", ",", "\n", "self", ".", "conv_kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "bias", "=", "True", ")", ")", "\n", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "convs", ")", "\n", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "self", ".", "conv_out_channels", ",", "\n", "self", ".", "conv_out_channels", ",", "\n", "kernel_size", "=", "deconv_kernel_size", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "(", "deconv_kernel_size", "-", "2", ")", "//", "2", ",", "\n", "groups", "=", "grid_points", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "GroupNorm", "(", "grid_points", ",", "self", ".", "conv_out_channels", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "self", ".", "conv_out_channels", ",", "\n", "grid_points", ",", "\n", "kernel_size", "=", "deconv_kernel_size", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "(", "deconv_kernel_size", "-", "2", ")", "//", "2", ",", "\n", "groups", "=", "grid_points", ")", "\n", "\n", "# find the 4-neighbor of each grid point", "\n", "self", ".", "neighbor_points", "=", "[", "]", "\n", "grid_size", "=", "self", ".", "grid_size", "\n", "for", "i", "in", "range", "(", "grid_size", ")", ":", "# i-th column", "\n", "            ", "for", "j", "in", "range", "(", "grid_size", ")", ":", "# j-th row", "\n", "                ", "neighbors", "=", "[", "]", "\n", "if", "i", ">", "0", ":", "# left: (i - 1, j)", "\n", "                    ", "neighbors", ".", "append", "(", "(", "i", "-", "1", ")", "*", "grid_size", "+", "j", ")", "\n", "", "if", "j", ">", "0", ":", "# up: (i, j - 1)", "\n", "                    ", "neighbors", ".", "append", "(", "i", "*", "grid_size", "+", "j", "-", "1", ")", "\n", "", "if", "j", "<", "grid_size", "-", "1", ":", "# down: (i, j + 1)", "\n", "                    ", "neighbors", ".", "append", "(", "i", "*", "grid_size", "+", "j", "+", "1", ")", "\n", "", "if", "i", "<", "grid_size", "-", "1", ":", "# right: (i + 1, j)", "\n", "                    ", "neighbors", ".", "append", "(", "(", "i", "+", "1", ")", "*", "grid_size", "+", "j", ")", "\n", "", "self", ".", "neighbor_points", ".", "append", "(", "tuple", "(", "neighbors", ")", ")", "\n", "# total edges in the grid", "\n", "", "", "self", ".", "num_edges", "=", "sum", "(", "[", "len", "(", "p", ")", "for", "p", "in", "self", ".", "neighbor_points", "]", ")", "\n", "\n", "self", ".", "forder_trans", "=", "nn", ".", "ModuleList", "(", ")", "# first-order feature transition", "\n", "self", ".", "sorder_trans", "=", "nn", ".", "ModuleList", "(", ")", "# second-order feature transition", "\n", "for", "neighbors", "in", "self", ".", "neighbor_points", ":", "\n", "            ", "fo_trans", "=", "nn", ".", "ModuleList", "(", ")", "\n", "so_trans", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "len", "(", "neighbors", ")", ")", ":", "\n", "# each transition module consists of a 5x5 depth-wise conv and", "\n", "# 1x1 conv.", "\n", "                ", "fo_trans", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "point_feat_channels", ",", "\n", "self", ".", "point_feat_channels", ",", "\n", "5", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "2", ",", "\n", "groups", "=", "self", ".", "point_feat_channels", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "point_feat_channels", ",", "\n", "self", ".", "point_feat_channels", ",", "1", ")", ")", ")", "\n", "so_trans", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "point_feat_channels", ",", "\n", "self", ".", "point_feat_channels", ",", "\n", "5", ",", "\n", "1", ",", "\n", "2", ",", "\n", "groups", "=", "self", ".", "point_feat_channels", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "point_feat_channels", ",", "\n", "self", ".", "point_feat_channels", ",", "1", ")", ")", ")", "\n", "", "self", ".", "forder_trans", ".", "append", "(", "fo_trans", ")", "\n", "self", ".", "sorder_trans", ".", "append", "(", "so_trans", ")", "\n", "\n", "", "self", ".", "loss_grid", "=", "build_loss", "(", "loss_grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.grid_head.GridHead.init_weights": [[143, 152], ["grid_head.GridHead.modules", "grid_head.GridHead.modules", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "isinstance", "isinstance", "mmcv.cnn.kaiming_init", "mmcv.cnn.normal_init", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.kaiming_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "# TODO: compare mode = \"fan_in\" or \"fan_out\"", "\n", "                ", "kaiming_init", "(", "m", ")", "\n", "", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "normal_init", "(", "m", ",", "std", "=", "0.001", ")", "\n", "", "", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv2", ".", "bias", ",", "-", "np", ".", "log", "(", "0.99", "/", "0.01", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.grid_head.GridHead.forward": [[153, 190], ["grid_head.GridHead.convs", "enumerate", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grid_head.GridHead.deconv1", "torch.relu", "torch.relu", "torch.relu", "grid_head.GridHead.deconv2", "dict", "enumerate", "enumerate", "grid_head.GridHead.norm1", "grid_head.GridHead.deconv1", "torch.relu", "torch.relu", "torch.relu", "grid_head.GridHead.deconv2", "range", "range", "grid_head.GridHead.norm1"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.ResNet.norm1"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "shape", "[", "-", "1", "]", "==", "x", ".", "shape", "[", "-", "2", "]", "==", "self", ".", "roi_feat_size", "\n", "# RoI feature transformation, downsample 2x", "\n", "x", "=", "self", ".", "convs", "(", "x", ")", "\n", "\n", "c", "=", "self", ".", "point_feat_channels", "\n", "# first-order fusion", "\n", "x_fo", "=", "[", "None", "for", "_", "in", "range", "(", "self", ".", "grid_points", ")", "]", "\n", "for", "i", ",", "points", "in", "enumerate", "(", "self", ".", "neighbor_points", ")", ":", "\n", "            ", "x_fo", "[", "i", "]", "=", "x", "[", ":", ",", "i", "*", "c", ":", "(", "i", "+", "1", ")", "*", "c", "]", "\n", "for", "j", ",", "point_idx", "in", "enumerate", "(", "points", ")", ":", "\n", "                ", "x_fo", "[", "i", "]", "=", "x_fo", "[", "i", "]", "+", "self", ".", "forder_trans", "[", "i", "]", "[", "j", "]", "(", "\n", "x", "[", ":", ",", "point_idx", "*", "c", ":", "(", "point_idx", "+", "1", ")", "*", "c", "]", ")", "\n", "\n", "# second-order fusion", "\n", "", "", "x_so", "=", "[", "None", "for", "_", "in", "range", "(", "self", ".", "grid_points", ")", "]", "\n", "for", "i", ",", "points", "in", "enumerate", "(", "self", ".", "neighbor_points", ")", ":", "\n", "            ", "x_so", "[", "i", "]", "=", "x", "[", ":", ",", "i", "*", "c", ":", "(", "i", "+", "1", ")", "*", "c", "]", "\n", "for", "j", ",", "point_idx", "in", "enumerate", "(", "points", ")", ":", "\n", "                ", "x_so", "[", "i", "]", "=", "x_so", "[", "i", "]", "+", "self", ".", "sorder_trans", "[", "i", "]", "[", "j", "]", "(", "x_fo", "[", "point_idx", "]", ")", "\n", "\n", "# predicted heatmap with fused features", "\n", "", "", "x2", "=", "torch", ".", "cat", "(", "x_so", ",", "dim", "=", "1", ")", "\n", "x2", "=", "self", ".", "deconv1", "(", "x2", ")", "\n", "x2", "=", "F", ".", "relu", "(", "self", ".", "norm1", "(", "x2", ")", ",", "inplace", "=", "True", ")", "\n", "heatmap", "=", "self", ".", "deconv2", "(", "x2", ")", "\n", "\n", "# predicted heatmap with original features (applicable during training)", "\n", "if", "self", ".", "training", ":", "\n", "            ", "x1", "=", "x", "\n", "x1", "=", "self", ".", "deconv1", "(", "x1", ")", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "norm1", "(", "x1", ")", ",", "inplace", "=", "True", ")", "\n", "heatmap_unfused", "=", "self", ".", "deconv2", "(", "x1", ")", "\n", "", "else", ":", "\n", "            ", "heatmap_unfused", "=", "heatmap", "\n", "\n", "", "return", "dict", "(", "fused", "=", "heatmap", ",", "unfused", "=", "heatmap_unfused", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.grid_head.GridHead.calc_sub_regions": [[191, 221], ["range", "sub_regions.append", "max", "max", "int", "int"], "methods", ["None"], ["", "def", "calc_sub_regions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Compute point specific representation regions.\n\n        See Grid R-CNN Plus (https://arxiv.org/abs/1906.05688) for details.\n        \"\"\"", "\n", "# to make it consistent with the original implementation, half_size", "\n", "# is computed as 2 * quarter_size, which is smaller", "\n", "half_size", "=", "self", ".", "whole_map_size", "//", "4", "*", "2", "\n", "sub_regions", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "grid_points", ")", ":", "\n", "            ", "x_idx", "=", "i", "//", "self", ".", "grid_size", "\n", "y_idx", "=", "i", "%", "self", ".", "grid_size", "\n", "if", "x_idx", "==", "0", ":", "\n", "                ", "sub_x1", "=", "0", "\n", "", "elif", "x_idx", "==", "self", ".", "grid_size", "-", "1", ":", "\n", "                ", "sub_x1", "=", "half_size", "\n", "", "else", ":", "\n", "                ", "ratio", "=", "x_idx", "/", "(", "self", ".", "grid_size", "-", "1", ")", "-", "0.25", "\n", "sub_x1", "=", "max", "(", "int", "(", "ratio", "*", "self", ".", "whole_map_size", ")", ",", "0", ")", "\n", "\n", "", "if", "y_idx", "==", "0", ":", "\n", "                ", "sub_y1", "=", "0", "\n", "", "elif", "y_idx", "==", "self", ".", "grid_size", "-", "1", ":", "\n", "                ", "sub_y1", "=", "half_size", "\n", "", "else", ":", "\n", "                ", "ratio", "=", "y_idx", "/", "(", "self", ".", "grid_size", "-", "1", ")", "-", "0.25", "\n", "sub_y1", "=", "max", "(", "int", "(", "ratio", "*", "self", ".", "whole_map_size", ")", ",", "0", ")", "\n", "", "sub_regions", ".", "append", "(", "\n", "(", "sub_x1", ",", "sub_y1", ",", "sub_x1", "+", "half_size", ",", "sub_y1", "+", "half_size", ")", ")", "\n", "", "return", "sub_regions", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.grid_head.GridHead.get_target": [[222, 289], ["torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sub_targets.cuda.cuda.cuda", "factors.append", "range", "sub_targets.cuda.cuda.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "int", "range", "range"], "methods", ["None"], ["", "def", "get_target", "(", "self", ",", "sampling_results", ",", "rcnn_train_cfg", ")", ":", "\n", "# mix all samples (across images) together.", "\n", "        ", "pos_bboxes", "=", "torch", ".", "cat", "(", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", ",", "\n", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "pos_gt_bboxes", "=", "torch", ".", "cat", "(", "\n", "[", "res", ".", "pos_gt_bboxes", "for", "res", "in", "sampling_results", "]", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "assert", "pos_bboxes", ".", "shape", "==", "pos_gt_bboxes", ".", "shape", "\n", "\n", "# expand pos_bboxes to 2x of original size", "\n", "x1", "=", "pos_bboxes", "[", ":", ",", "0", "]", "-", "(", "pos_bboxes", "[", ":", ",", "2", "]", "-", "pos_bboxes", "[", ":", ",", "0", "]", ")", "/", "2", "\n", "y1", "=", "pos_bboxes", "[", ":", ",", "1", "]", "-", "(", "pos_bboxes", "[", ":", ",", "3", "]", "-", "pos_bboxes", "[", ":", ",", "1", "]", ")", "/", "2", "\n", "x2", "=", "pos_bboxes", "[", ":", ",", "2", "]", "+", "(", "pos_bboxes", "[", ":", ",", "2", "]", "-", "pos_bboxes", "[", ":", ",", "0", "]", ")", "/", "2", "\n", "y2", "=", "pos_bboxes", "[", ":", ",", "3", "]", "+", "(", "pos_bboxes", "[", ":", ",", "3", "]", "-", "pos_bboxes", "[", ":", ",", "1", "]", ")", "/", "2", "\n", "pos_bboxes", "=", "torch", ".", "stack", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "dim", "=", "-", "1", ")", "\n", "pos_bbox_ws", "=", "(", "pos_bboxes", "[", ":", ",", "2", "]", "-", "pos_bboxes", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "pos_bbox_hs", "=", "(", "pos_bboxes", "[", ":", ",", "3", "]", "-", "pos_bboxes", "[", ":", ",", "1", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "num_rois", "=", "pos_bboxes", ".", "shape", "[", "0", "]", "\n", "map_size", "=", "self", ".", "whole_map_size", "\n", "# this is not the final target shape", "\n", "targets", "=", "torch", ".", "zeros", "(", "(", "num_rois", ",", "self", ".", "grid_points", ",", "map_size", ",", "map_size", ")", ",", "\n", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "# pre-compute interpolation factors for all grid points.", "\n", "# the first item is the factor of x-dim, and the second is y-dim.", "\n", "# for a 9-point grid, factors are like (1, 0), (0.5, 0.5), (0, 1)", "\n", "factors", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "grid_points", ")", ":", "\n", "            ", "x_idx", "=", "j", "//", "self", ".", "grid_size", "\n", "y_idx", "=", "j", "%", "self", ".", "grid_size", "\n", "factors", ".", "append", "(", "(", "1", "-", "x_idx", "/", "(", "self", ".", "grid_size", "-", "1", ")", ",", "\n", "1", "-", "y_idx", "/", "(", "self", ".", "grid_size", "-", "1", ")", ")", ")", "\n", "\n", "", "radius", "=", "rcnn_train_cfg", ".", "pos_radius", "\n", "radius2", "=", "radius", "**", "2", "\n", "for", "i", "in", "range", "(", "num_rois", ")", ":", "\n", "# ignore small bboxes", "\n", "            ", "if", "(", "pos_bbox_ws", "[", "i", "]", "<=", "self", ".", "grid_size", "\n", "or", "pos_bbox_hs", "[", "i", "]", "<=", "self", ".", "grid_size", ")", ":", "\n", "                ", "continue", "\n", "# for each grid point, mark a small circle as positive", "\n", "", "for", "j", "in", "range", "(", "self", ".", "grid_points", ")", ":", "\n", "                ", "factor_x", ",", "factor_y", "=", "factors", "[", "j", "]", "\n", "gridpoint_x", "=", "factor_x", "*", "pos_gt_bboxes", "[", "i", ",", "0", "]", "+", "(", "\n", "1", "-", "factor_x", ")", "*", "pos_gt_bboxes", "[", "i", ",", "2", "]", "\n", "gridpoint_y", "=", "factor_y", "*", "pos_gt_bboxes", "[", "i", ",", "1", "]", "+", "(", "\n", "1", "-", "factor_y", ")", "*", "pos_gt_bboxes", "[", "i", ",", "3", "]", "\n", "\n", "cx", "=", "int", "(", "(", "gridpoint_x", "-", "pos_bboxes", "[", "i", ",", "0", "]", ")", "/", "pos_bbox_ws", "[", "i", "]", "*", "\n", "map_size", ")", "\n", "cy", "=", "int", "(", "(", "gridpoint_y", "-", "pos_bboxes", "[", "i", ",", "1", "]", ")", "/", "pos_bbox_hs", "[", "i", "]", "*", "\n", "map_size", ")", "\n", "\n", "for", "x", "in", "range", "(", "cx", "-", "radius", ",", "cx", "+", "radius", "+", "1", ")", ":", "\n", "                    ", "for", "y", "in", "range", "(", "cy", "-", "radius", ",", "cy", "+", "radius", "+", "1", ")", ":", "\n", "                        ", "if", "x", ">=", "0", "and", "x", "<", "map_size", "and", "y", ">=", "0", "and", "y", "<", "map_size", ":", "\n", "                            ", "if", "(", "x", "-", "cx", ")", "**", "2", "+", "(", "y", "-", "cy", ")", "**", "2", "<=", "radius2", ":", "\n", "                                ", "targets", "[", "i", ",", "j", ",", "y", ",", "x", "]", "=", "1", "\n", "# reduce the target heatmap size by a half", "\n", "# proposed in Grid R-CNN Plus (https://arxiv.org/abs/1906.05688).", "\n", "", "", "", "", "", "", "sub_targets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "grid_points", ")", ":", "\n", "            ", "sub_x1", ",", "sub_y1", ",", "sub_x2", ",", "sub_y2", "=", "self", ".", "sub_regions", "[", "i", "]", "\n", "sub_targets", ".", "append", "(", "targets", "[", ":", ",", "[", "i", "]", ",", "sub_y1", ":", "sub_y2", ",", "sub_x1", ":", "sub_x2", "]", ")", "\n", "", "sub_targets", "=", "torch", ".", "cat", "(", "sub_targets", ",", "dim", "=", "1", ")", "\n", "sub_targets", "=", "sub_targets", ".", "cuda", "(", ")", "\n", "return", "sub_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.grid_head.GridHead.loss": [[290, 295], ["grid_head.GridHead.loss_grid", "grid_head.GridHead.loss_grid", "dict"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "grid_pred", ",", "grid_targets", ")", ":", "\n", "        ", "loss_fused", "=", "self", ".", "loss_grid", "(", "grid_pred", "[", "'fused'", "]", ",", "grid_targets", ")", "\n", "loss_unfused", "=", "self", ".", "loss_grid", "(", "grid_pred", "[", "'unfused'", "]", ",", "grid_targets", ")", "\n", "loss_grid", "=", "loss_fused", "+", "loss_unfused", "\n", "return", "dict", "(", "loss_grid", "=", "loss_grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.grid_head.GridHead.get_bboxes": [[296, 362], ["det_bboxes.cpu.cpu.cpu", "grid_pred.view.view.sigmoid().cpu", "grid_pred.view.view.view", "grid_pred.view.view.max", "range", "tuple", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "bbox_res[].clamp_", "bbox_res[].clamp_", "map", "pred_scores[].sum", "pred_scores[].sum", "pred_scores[].sum", "pred_scores[].sum", "grid_pred.view.view.sigmoid", "range", "range", "range", "range", "x.view", "xs.float", "ys.float"], "methods", ["None"], ["", "def", "get_bboxes", "(", "self", ",", "det_bboxes", ",", "grid_pred", ",", "img_meta", ")", ":", "\n", "# TODO: refactoring", "\n", "        ", "assert", "det_bboxes", ".", "shape", "[", "0", "]", "==", "grid_pred", ".", "shape", "[", "0", "]", "\n", "det_bboxes", "=", "det_bboxes", ".", "cpu", "(", ")", "\n", "cls_scores", "=", "det_bboxes", "[", ":", ",", "[", "4", "]", "]", "\n", "det_bboxes", "=", "det_bboxes", "[", ":", ",", ":", "4", "]", "\n", "grid_pred", "=", "grid_pred", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "R", ",", "c", ",", "h", ",", "w", "=", "grid_pred", ".", "shape", "\n", "half_size", "=", "self", ".", "whole_map_size", "//", "4", "*", "2", "\n", "assert", "h", "==", "w", "==", "half_size", "\n", "assert", "c", "==", "self", ".", "grid_points", "\n", "\n", "# find the point with max scores in the half-sized heatmap", "\n", "grid_pred", "=", "grid_pred", ".", "view", "(", "R", "*", "c", ",", "h", "*", "w", ")", "\n", "pred_scores", ",", "pred_position", "=", "grid_pred", ".", "max", "(", "dim", "=", "1", ")", "\n", "xs", "=", "pred_position", "%", "w", "\n", "ys", "=", "pred_position", "//", "w", "\n", "\n", "# get the position in the whole heatmap instead of half-sized heatmap", "\n", "for", "i", "in", "range", "(", "self", ".", "grid_points", ")", ":", "\n", "            ", "xs", "[", "i", ":", ":", "self", ".", "grid_points", "]", "+=", "self", ".", "sub_regions", "[", "i", "]", "[", "0", "]", "\n", "ys", "[", "i", ":", ":", "self", ".", "grid_points", "]", "+=", "self", ".", "sub_regions", "[", "i", "]", "[", "1", "]", "\n", "\n", "# reshape to (num_rois, grid_points)", "\n", "", "pred_scores", ",", "xs", ",", "ys", "=", "tuple", "(", "\n", "map", "(", "lambda", "x", ":", "x", ".", "view", "(", "R", ",", "c", ")", ",", "[", "pred_scores", ",", "xs", ",", "ys", "]", ")", ")", "\n", "\n", "# get expanded pos_bboxes", "\n", "widths", "=", "(", "det_bboxes", "[", ":", ",", "2", "]", "-", "det_bboxes", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "heights", "=", "(", "det_bboxes", "[", ":", ",", "3", "]", "-", "det_bboxes", "[", ":", ",", "1", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "x1", "=", "(", "det_bboxes", "[", ":", ",", "0", ",", "None", "]", "-", "widths", "/", "2", ")", "\n", "y1", "=", "(", "det_bboxes", "[", ":", ",", "1", ",", "None", "]", "-", "heights", "/", "2", ")", "\n", "# map the grid point to the absolute coordinates", "\n", "abs_xs", "=", "(", "xs", ".", "float", "(", ")", "+", "0.5", ")", "/", "w", "*", "widths", "+", "x1", "\n", "abs_ys", "=", "(", "ys", ".", "float", "(", ")", "+", "0.5", ")", "/", "h", "*", "heights", "+", "y1", "\n", "\n", "# get the grid points indices that fall on the bbox boundaries", "\n", "x1_inds", "=", "[", "i", "for", "i", "in", "range", "(", "self", ".", "grid_size", ")", "]", "\n", "y1_inds", "=", "[", "i", "*", "self", ".", "grid_size", "for", "i", "in", "range", "(", "self", ".", "grid_size", ")", "]", "\n", "x2_inds", "=", "[", "\n", "self", ".", "grid_points", "-", "self", ".", "grid_size", "+", "i", "\n", "for", "i", "in", "range", "(", "self", ".", "grid_size", ")", "\n", "]", "\n", "y2_inds", "=", "[", "(", "i", "+", "1", ")", "*", "self", ".", "grid_size", "-", "1", "for", "i", "in", "range", "(", "self", ".", "grid_size", ")", "]", "\n", "\n", "# voting of all grid points on some boundary", "\n", "bboxes_x1", "=", "(", "abs_xs", "[", ":", ",", "x1_inds", "]", "*", "pred_scores", "[", ":", ",", "x1_inds", "]", ")", ".", "sum", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "(", "\n", "pred_scores", "[", ":", ",", "x1_inds", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "bboxes_y1", "=", "(", "abs_ys", "[", ":", ",", "y1_inds", "]", "*", "pred_scores", "[", ":", ",", "y1_inds", "]", ")", ".", "sum", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "(", "\n", "pred_scores", "[", ":", ",", "y1_inds", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "bboxes_x2", "=", "(", "abs_xs", "[", ":", ",", "x2_inds", "]", "*", "pred_scores", "[", ":", ",", "x2_inds", "]", ")", ".", "sum", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "(", "\n", "pred_scores", "[", ":", ",", "x2_inds", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "bboxes_y2", "=", "(", "abs_ys", "[", ":", ",", "y2_inds", "]", "*", "pred_scores", "[", ":", ",", "y2_inds", "]", ")", ".", "sum", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "(", "\n", "pred_scores", "[", ":", ",", "y2_inds", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "\n", "bbox_res", "=", "torch", ".", "cat", "(", "\n", "[", "bboxes_x1", ",", "bboxes_y1", ",", "bboxes_x2", ",", "bboxes_y2", ",", "cls_scores", "]", ",", "dim", "=", "1", ")", "\n", "bbox_res", "[", ":", ",", "[", "0", ",", "2", "]", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "img_meta", "[", "0", "]", "[", "'img_shape'", "]", "[", "1", "]", "-", "1", ")", "\n", "bbox_res", "[", ":", ",", "[", "1", ",", "3", "]", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "img_meta", "[", "0", "]", "[", "'img_shape'", "]", "[", "0", "]", "-", "1", ")", "\n", "\n", "return", "bbox_res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.fused_semantic_head.FusedSemanticHead.__init__": [[25, 80], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "range", "utils.ConvModule", "torch.Conv2d", "torch.Conv2d", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "fused_semantic_head.FusedSemanticHead.lateral_convs.append", "fused_semantic_head.FusedSemanticHead.convs.append", "utils.ConvModule", "utils.ConvModule"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_ins", ",", "\n", "fusion_level", ",", "\n", "num_convs", "=", "4", ",", "\n", "in_channels", "=", "256", ",", "\n", "conv_out_channels", "=", "256", ",", "\n", "num_classes", "=", "183", ",", "\n", "ignore_label", "=", "255", ",", "\n", "loss_weight", "=", "0.2", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "FusedSemanticHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_ins", "=", "num_ins", "\n", "self", ".", "fusion_level", "=", "fusion_level", "\n", "self", ".", "num_convs", "=", "num_convs", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "conv_out_channels", "=", "conv_out_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n", "self", ".", "lateral_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_ins", ")", ":", "\n", "            ", "self", ".", "lateral_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "in_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "inplace", "=", "False", ")", ")", "\n", "\n", "", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_convs", ")", ":", "\n", "            ", "in_channels", "=", "self", ".", "in_channels", "if", "i", "==", "0", "else", "conv_out_channels", "\n", "self", ".", "convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "in_channels", ",", "\n", "conv_out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "", "self", ".", "conv_embedding", "=", "ConvModule", "(", "\n", "conv_out_channels", ",", "\n", "conv_out_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", "\n", "self", ".", "conv_logits", "=", "nn", ".", "Conv2d", "(", "conv_out_channels", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "ignore_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.fused_semantic_head.FusedSemanticHead.init_weights": [[81, 83], ["mmcv.cnn.kaiming_init"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.kaiming_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "kaiming_init", "(", "self", ".", "conv_logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.fused_semantic_head.FusedSemanticHead.forward": [[84, 100], ["mmdet.core.auto_fp16", "tuple", "enumerate", "range", "fused_semantic_head.FusedSemanticHead.conv_logits", "fused_semantic_head.FusedSemanticHead.conv_embedding", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.auto_fp16"], ["", "@", "auto_fp16", "(", ")", "\n", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "x", "=", "self", ".", "lateral_convs", "[", "self", ".", "fusion_level", "]", "(", "feats", "[", "self", ".", "fusion_level", "]", ")", "\n", "fused_size", "=", "tuple", "(", "x", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "for", "i", ",", "feat", "in", "enumerate", "(", "feats", ")", ":", "\n", "            ", "if", "i", "!=", "self", ".", "fusion_level", ":", "\n", "                ", "feat", "=", "F", ".", "interpolate", "(", "\n", "feat", ",", "size", "=", "fused_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "x", "+=", "self", ".", "lateral_convs", "[", "i", "]", "(", "feat", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "num_convs", ")", ":", "\n", "            ", "x", "=", "self", ".", "convs", "[", "i", "]", "(", "x", ")", "\n", "\n", "", "mask_pred", "=", "self", ".", "conv_logits", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_embedding", "(", "x", ")", "\n", "return", "mask_pred", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.fused_semantic_head.FusedSemanticHead.loss": [[101, 107], ["mmdet.core.force_fp32", "labels.squeeze().long.squeeze().long.squeeze().long", "fused_semantic_head.FusedSemanticHead.criterion", "labels.squeeze().long.squeeze().long.squeeze"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.force_fp32"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'mask_pred'", ",", ")", ")", "\n", "def", "loss", "(", "self", ",", "mask_pred", ",", "labels", ")", ":", "\n", "        ", "labels", "=", "labels", ".", "squeeze", "(", "1", ")", ".", "long", "(", ")", "\n", "loss_semantic_seg", "=", "self", ".", "criterion", "(", "mask_pred", ",", "labels", ")", "\n", "loss_semantic_seg", "*=", "self", ".", "loss_weight", "\n", "return", "loss_semantic_seg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.fcn_mask_head.FCNMaskHead.__init__": [[39, 107], ["dict", "torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "builder.build_loss", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "ValueError", "fcn_mask_head.FCNMaskHead.convs.append", "utils.ConvModule", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Upsample", "torch.Upsample"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_loss"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_convs", "=", "4", ",", "\n", "roi_feat_size", "=", "14", ",", "\n", "in_channels", "=", "256", ",", "\n", "conv_kernel_size", "=", "3", ",", "\n", "conv_out_channels", "=", "256", ",", "\n", "upsample_method", "=", "'deconv'", ",", "\n", "upsample_ratio", "=", "2", ",", "\n", "num_classes", "=", "81", ",", "\n", "class_agnostic", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "loss_mask", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "use_mask", "=", "True", ",", "loss_weight", "=", "1.0", ")", ")", ":", "\n", "        ", "super", "(", "FCNMaskHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "upsample_method", "not", "in", "[", "None", ",", "'deconv'", ",", "'nearest'", ",", "'bilinear'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Invalid upsample method {}, accepted methods '", "\n", "'are \"deconv\", \"nearest\", \"bilinear\"'", ".", "format", "(", "upsample_method", ")", ")", "\n", "", "self", ".", "num_convs", "=", "num_convs", "\n", "# WARN: roi_feat_size is reserved and not used", "\n", "self", ".", "roi_feat_size", "=", "_pair", "(", "roi_feat_size", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "conv_kernel_size", "=", "conv_kernel_size", "\n", "self", ".", "conv_out_channels", "=", "conv_out_channels", "\n", "self", ".", "upsample_method", "=", "upsample_method", "\n", "self", ".", "upsample_ratio", "=", "upsample_ratio", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "class_agnostic", "=", "class_agnostic", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "self", ".", "loss_mask", "=", "build_loss", "(", "loss_mask", ")", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_convs", ")", ":", "\n", "            ", "in_channels", "=", "(", "\n", "self", ".", "in_channels", "if", "i", "==", "0", "else", "self", ".", "conv_out_channels", ")", "\n", "padding", "=", "(", "self", ".", "conv_kernel_size", "-", "1", ")", "//", "2", "\n", "self", ".", "convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "in_channels", ",", "\n", "self", ".", "conv_out_channels", ",", "\n", "self", ".", "conv_kernel_size", ",", "\n", "padding", "=", "padding", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ")", ")", "\n", "", "upsample_in_channels", "=", "(", "\n", "self", ".", "conv_out_channels", "if", "self", ".", "num_convs", ">", "0", "else", "in_channels", ")", "\n", "if", "self", ".", "upsample_method", "is", "None", ":", "\n", "            ", "self", ".", "upsample", "=", "None", "\n", "", "elif", "self", ".", "upsample_method", "==", "'deconv'", ":", "\n", "            ", "self", ".", "upsample", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "upsample_in_channels", ",", "\n", "self", ".", "conv_out_channels", ",", "\n", "self", ".", "upsample_ratio", ",", "\n", "stride", "=", "self", ".", "upsample_ratio", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "\n", "scale_factor", "=", "self", ".", "upsample_ratio", ",", "mode", "=", "self", ".", "upsample_method", ")", "\n", "\n", "", "out_channels", "=", "1", "if", "self", ".", "class_agnostic", "else", "self", ".", "num_classes", "\n", "logits_in_channel", "=", "(", "\n", "self", ".", "conv_out_channels", "\n", "if", "self", ".", "upsample_method", "==", "'deconv'", "else", "upsample_in_channels", ")", "\n", "self", ".", "conv_logits", "=", "nn", ".", "Conv2d", "(", "logits_in_channel", ",", "out_channels", ",", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "debug_imgs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.fcn_mask_head.FCNMaskHead.init_weights": [[108, 115], ["torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "[", "self", ".", "upsample", ",", "self", ".", "conv_logits", "]", ":", "\n", "            ", "if", "m", "is", "None", ":", "\n", "                ", "continue", "\n", "", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.fcn_mask_head.FCNMaskHead.forward": [[116, 126], ["mmdet.core.auto_fp16", "fcn_mask_head.FCNMaskHead.conv_logits", "conv", "fcn_mask_head.FCNMaskHead.upsample", "fcn_mask_head.FCNMaskHead.relu"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.auto_fp16"], ["", "", "@", "auto_fp16", "(", ")", "\n", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "x", "=", "conv", "(", "x", ")", "\n", "", "if", "self", ".", "upsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "if", "self", ".", "upsample_method", "==", "'deconv'", ":", "\n", "                ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "", "mask_pred", "=", "self", ".", "conv_logits", "(", "x", ")", "\n", "return", "mask_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.fcn_mask_head.FCNMaskHead.get_target": [[127, 135], ["mmdet.core.mask_target"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.mask.mask_target.mask_target"], ["", "def", "get_target", "(", "self", ",", "sampling_results", ",", "gt_masks", ",", "rcnn_train_cfg", ")", ":", "\n", "        ", "pos_proposals", "=", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", "\n", "pos_assigned_gt_inds", "=", "[", "\n", "res", ".", "pos_assigned_gt_inds", "for", "res", "in", "sampling_results", "\n", "]", "\n", "mask_targets", "=", "mask_target", "(", "pos_proposals", ",", "pos_assigned_gt_inds", ",", "\n", "gt_masks", ",", "rcnn_train_cfg", ")", "\n", "return", "mask_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.fcn_mask_head.FCNMaskHead.loss": [[136, 146], ["mmdet.core.force_fp32", "dict", "fcn_mask_head.FCNMaskHead.loss_mask", "fcn_mask_head.FCNMaskHead.loss_mask", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.force_fp32"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'mask_pred'", ",", ")", ")", "\n", "def", "loss", "(", "self", ",", "mask_pred", ",", "mask_targets", ",", "labels", ")", ":", "\n", "        ", "loss", "=", "dict", "(", ")", "\n", "if", "self", ".", "class_agnostic", ":", "\n", "            ", "loss_mask", "=", "self", ".", "loss_mask", "(", "mask_pred", ",", "mask_targets", ",", "\n", "torch", ".", "zeros_like", "(", "labels", ")", ")", "\n", "", "else", ":", "\n", "            ", "loss_mask", "=", "self", ".", "loss_mask", "(", "mask_pred", ",", "mask_targets", ",", "labels", ")", "\n", "", "loss", "[", "'loss_mask'", "]", "=", "loss_mask", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.fcn_mask_head.FCNMaskHead.get_seg_masks": [[147, 204], ["isinstance", "isinstance", "mask_pred.sigmoid().cpu().numpy.sigmoid().cpu().numpy.astype", "range", "mask_pred.sigmoid().cpu().numpy.sigmoid().cpu().numpy.sigmoid().cpu().numpy", "det_bboxes.cpu().numpy", "det_labels.cpu().numpy", "numpy.round().astype", "numpy.round().astype", "max", "max", "numpy.zeros", "mmcv.imresize", "cls_segms[].append", "range", "pycocotools.encode", "mask_pred.sigmoid().cpu().numpy.sigmoid().cpu().numpy.sigmoid().cpu", "det_bboxes.cpu", "det_labels.cpu", "numpy.round", "numpy.round", "numpy.array", "mask_pred.sigmoid().cpu().numpy.sigmoid().cpu().numpy.sigmoid"], "methods", ["None"], ["", "def", "get_seg_masks", "(", "self", ",", "mask_pred", ",", "det_bboxes", ",", "det_labels", ",", "rcnn_test_cfg", ",", "\n", "ori_shape", ",", "scale_factor", ",", "rescale", ")", ":", "\n", "        ", "\"\"\"Get segmentation masks from mask_pred and bboxes.\n\n        Args:\n            mask_pred (Tensor or ndarray): shape (n, #class+1, h, w).\n                For single-scale testing, mask_pred is the direct output of\n                model, whose type is Tensor, while for multi-scale testing,\n                it will be converted to numpy array outside of this method.\n            det_bboxes (Tensor): shape (n, 4/5)\n            det_labels (Tensor): shape (n, )\n            img_shape (Tensor): shape (3, )\n            rcnn_test_cfg (dict): rcnn testing config\n            ori_shape: original image size\n\n        Returns:\n            list[list]: encoded masks\n        \"\"\"", "\n", "if", "isinstance", "(", "mask_pred", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "mask_pred", "=", "mask_pred", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "assert", "isinstance", "(", "mask_pred", ",", "np", ".", "ndarray", ")", "\n", "# when enabling mixed precision training, mask_pred may be float16", "\n", "# numpy array", "\n", "mask_pred", "=", "mask_pred", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "cls_segms", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_classes", "-", "1", ")", "]", "\n", "bboxes", "=", "det_bboxes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", ":", "4", "]", "\n", "labels", "=", "det_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "+", "1", "\n", "\n", "if", "rescale", ":", "\n", "            ", "img_h", ",", "img_w", "=", "ori_shape", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "            ", "img_h", "=", "np", ".", "round", "(", "ori_shape", "[", "0", "]", "*", "scale_factor", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "img_w", "=", "np", ".", "round", "(", "ori_shape", "[", "1", "]", "*", "scale_factor", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "scale_factor", "=", "1.0", "\n", "\n", "", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "bbox", "=", "(", "bboxes", "[", "i", ",", ":", "]", "/", "scale_factor", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "label", "=", "labels", "[", "i", "]", "\n", "w", "=", "max", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "+", "1", ",", "1", ")", "\n", "h", "=", "max", "(", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "+", "1", ",", "1", ")", "\n", "\n", "if", "not", "self", ".", "class_agnostic", ":", "\n", "                ", "mask_pred_", "=", "mask_pred", "[", "i", ",", "label", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "mask_pred_", "=", "mask_pred", "[", "i", ",", "0", ",", ":", ",", ":", "]", "\n", "", "im_mask", "=", "np", ".", "zeros", "(", "(", "img_h", ",", "img_w", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "bbox_mask", "=", "mmcv", ".", "imresize", "(", "mask_pred_", ",", "(", "w", ",", "h", ")", ")", "\n", "bbox_mask", "=", "(", "bbox_mask", ">", "rcnn_test_cfg", ".", "mask_thr_binary", ")", ".", "astype", "(", "\n", "np", ".", "uint8", ")", "\n", "im_mask", "[", "bbox", "[", "1", "]", ":", "bbox", "[", "1", "]", "+", "h", ",", "bbox", "[", "0", "]", ":", "bbox", "[", "0", "]", "+", "w", "]", "=", "bbox_mask", "\n", "rle", "=", "mask_util", ".", "encode", "(", "\n", "np", ".", "array", "(", "im_mask", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "order", "=", "'F'", ")", ")", "[", "0", "]", "\n", "cls_segms", "[", "label", "-", "1", "]", ".", "append", "(", "rle", ")", "\n", "\n", "", "return", "cls_segms", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.htc_mask_head.HTCMaskHead.__init__": [[9, 17], ["fcn_mask_head.FCNMaskHead.__init__", "utils.ConvModule"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "HTCMaskHead", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "conv_res", "=", "ConvModule", "(", "\n", "self", ".", "conv_out_channels", ",", "\n", "self", ".", "conv_out_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.htc_mask_head.HTCMaskHead.init_weights": [[18, 21], ["super().init_weights", "htc_mask_head.HTCMaskHead.conv_res.init_weights"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "super", "(", "HTCMaskHead", ",", "self", ")", ".", "init_weights", "(", ")", "\n", "self", ".", "conv_res", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.htc_mask_head.HTCMaskHead.forward": [[22, 39], ["htc_mask_head.HTCMaskHead.conv_res", "conv", "htc_mask_head.HTCMaskHead.upsample", "htc_mask_head.HTCMaskHead.conv_logits", "outs.append", "outs.append", "htc_mask_head.HTCMaskHead.relu", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "res_feat", "=", "None", ",", "return_logits", "=", "True", ",", "return_feat", "=", "True", ")", ":", "\n", "        ", "if", "res_feat", "is", "not", "None", ":", "\n", "            ", "res_feat", "=", "self", ".", "conv_res", "(", "res_feat", ")", "\n", "x", "=", "x", "+", "res_feat", "\n", "", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "x", "=", "conv", "(", "x", ")", "\n", "", "res_feat", "=", "x", "\n", "outs", "=", "[", "]", "\n", "if", "return_logits", ":", "\n", "            ", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "if", "self", ".", "upsample_method", "==", "'deconv'", ":", "\n", "                ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "mask_pred", "=", "self", ".", "conv_logits", "(", "x", ")", "\n", "outs", ".", "append", "(", "mask_pred", ")", "\n", "", "if", "return_feat", ":", "\n", "            ", "outs", ".", "append", "(", "res_feat", ")", "\n", "", "return", "outs", "if", "len", "(", "outs", ")", ">", "1", "else", "outs", "[", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.shared_heads.res_layer.ResLayer.__init__": [[15, 47], ["dict", "torch.Module.__init__", "backbones.make_res_layer", "backbones.make_res_layer.ResLayer.add_module"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnext.make_res_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "depth", ",", "\n", "stage", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "dilation", "=", "1", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ")", ",", "\n", "norm_eval", "=", "True", ",", "\n", "with_cp", "=", "False", ",", "\n", "dcn", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "stage", "=", "stage", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "block", ",", "stage_blocks", "=", "ResNet", ".", "arch_settings", "[", "depth", "]", "\n", "stage_block", "=", "stage_blocks", "[", "stage", "]", "\n", "planes", "=", "64", "*", "2", "**", "stage", "\n", "inplanes", "=", "64", "*", "2", "**", "(", "stage", "-", "1", ")", "*", "block", ".", "expansion", "\n", "\n", "res_layer", "=", "make_res_layer", "(", "\n", "block", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stage_block", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "style", "=", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "dcn", "=", "dcn", ")", "\n", "self", ".", "add_module", "(", "'layer{}'", ".", "format", "(", "stage", "+", "1", ")", ",", "res_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.shared_heads.res_layer.ResLayer.init_weights": [[48, 60], ["isinstance", "logging.getLogger", "mmcv.runner.load_checkpoint", "res_layer.ResLayer.modules", "TypeError", "isinstance", "mmcv.cnn.kaiming_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.kaiming_init"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "1", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.shared_heads.res_layer.ResLayer.forward": [[61, 66], ["mmdet.core.auto_fp16", "getattr", "getattr."], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.auto_fp16"], ["", "", "@", "auto_fp16", "(", ")", "\n", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res_layer", "=", "getattr", "(", "self", ",", "'layer{}'", ".", "format", "(", "self", ".", "stage", "+", "1", ")", ")", "\n", "out", "=", "res_layer", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.shared_heads.res_layer.ResLayer.train": [[67, 73], ["super().train", "res_layer.ResLayer.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.ResNet.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResLayer", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "if", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.ga_retina_head.GARetinaHead.__init__": [[14, 25], ["guided_anchor_head.GuidedAnchorHead.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_classes", ",", "\n", "in_channels", ",", "\n", "stacked_convs", "=", "4", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "stacked_convs", "=", "stacked_convs", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "super", "(", "GARetinaHead", ",", "self", ")", ".", "__init__", "(", "num_classes", ",", "in_channels", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.ga_retina_head.GARetinaHead._init_layers": [[26, 71], ["torch.ReLU", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv2d", "torch.Conv2d", "guided_anchor_head.FeatureAdaption", "guided_anchor_head.FeatureAdaption", "mmdet.ops.MaskedConv2d", "mmdet.ops.MaskedConv2d", "ga_retina_head.GARetinaHead.cls_convs.append", "ga_retina_head.GARetinaHead.reg_convs.append", "utils.ConvModule", "utils.ConvModule"], "methods", ["None"], ["", "def", "_init_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "cls_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "reg_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "stacked_convs", ")", ":", "\n", "            ", "chn", "=", "self", ".", "in_channels", "if", "i", "==", "0", "else", "self", ".", "feat_channels", "\n", "self", ".", "cls_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "self", ".", "reg_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "\n", "", "self", ".", "conv_loc", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "1", ",", "1", ")", "\n", "self", ".", "conv_shape", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "self", ".", "num_anchors", "*", "2", ",", "\n", "1", ")", "\n", "self", ".", "feature_adaption_cls", "=", "FeatureAdaption", "(", "\n", "self", ".", "feat_channels", ",", "\n", "self", ".", "feat_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "deformable_groups", "=", "self", ".", "deformable_groups", ")", "\n", "self", ".", "feature_adaption_reg", "=", "FeatureAdaption", "(", "\n", "self", ".", "feat_channels", ",", "\n", "self", ".", "feat_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "deformable_groups", "=", "self", ".", "deformable_groups", ")", "\n", "self", ".", "retina_cls", "=", "MaskedConv2d", "(", "\n", "self", ".", "feat_channels", ",", "\n", "self", ".", "num_anchors", "*", "self", ".", "cls_out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "retina_reg", "=", "MaskedConv2d", "(", "\n", "self", ".", "feat_channels", ",", "self", ".", "num_anchors", "*", "4", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.ga_retina_head.GARetinaHead.init_weights": [[72, 86], ["ga_retina_head.GARetinaHead.feature_adaption_cls.init_weights", "ga_retina_head.GARetinaHead.feature_adaption_reg.init_weights", "utils.bias_init_with_prob", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.bias_init_with_prob", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "cls_convs", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "for", "m", "in", "self", ".", "reg_convs", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "\n", "", "self", ".", "feature_adaption_cls", ".", "init_weights", "(", ")", "\n", "self", ".", "feature_adaption_reg", ".", "init_weights", "(", ")", "\n", "\n", "bias_cls", "=", "bias_init_with_prob", "(", "0.01", ")", "\n", "normal_init", "(", "self", ".", "conv_loc", ",", "std", "=", "0.01", ",", "bias", "=", "bias_cls", ")", "\n", "normal_init", "(", "self", ".", "conv_shape", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "retina_cls", ",", "std", "=", "0.01", ",", "bias", "=", "bias_cls", ")", "\n", "normal_init", "(", "self", ".", "retina_reg", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.ga_retina_head.GARetinaHead.forward_single": [[87, 108], ["ga_retina_head.GARetinaHead.conv_loc", "ga_retina_head.GARetinaHead.conv_shape", "ga_retina_head.GARetinaHead.feature_adaption_cls", "ga_retina_head.GARetinaHead.feature_adaption_reg", "ga_retina_head.GARetinaHead.retina_cls", "ga_retina_head.GARetinaHead.retina_reg", "cls_conv", "reg_conv", "ga_retina_head.GARetinaHead.sigmoid"], "methods", ["None"], ["", "def", "forward_single", "(", "self", ",", "x", ")", ":", "\n", "        ", "cls_feat", "=", "x", "\n", "reg_feat", "=", "x", "\n", "for", "cls_conv", "in", "self", ".", "cls_convs", ":", "\n", "            ", "cls_feat", "=", "cls_conv", "(", "cls_feat", ")", "\n", "", "for", "reg_conv", "in", "self", ".", "reg_convs", ":", "\n", "            ", "reg_feat", "=", "reg_conv", "(", "reg_feat", ")", "\n", "\n", "", "loc_pred", "=", "self", ".", "conv_loc", "(", "cls_feat", ")", "\n", "shape_pred", "=", "self", ".", "conv_shape", "(", "reg_feat", ")", "\n", "\n", "cls_feat", "=", "self", ".", "feature_adaption_cls", "(", "cls_feat", ",", "shape_pred", ")", "\n", "reg_feat", "=", "self", ".", "feature_adaption_reg", "(", "reg_feat", ",", "shape_pred", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "mask", "=", "loc_pred", ".", "sigmoid", "(", ")", "[", "0", "]", ">=", "self", ".", "loc_filter_thr", "\n", "", "else", ":", "\n", "            ", "mask", "=", "None", "\n", "", "cls_score", "=", "self", ".", "retina_cls", "(", "cls_feat", ",", "mask", ")", "\n", "bbox_pred", "=", "self", ".", "retina_reg", "(", "reg_feat", ",", "mask", ")", "\n", "return", "cls_score", ",", "bbox_pred", ",", "shape_pred", ",", "loc_pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.ssd_head.SSDHead.__init__": [[17, 96], ["anchor_head.AnchorHead.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "int", "int", "int", "range", "range", "len", "reg_convs.append", "cls_convs.append", "int", "min_sizes.append", "max_sizes.append", "len", "mmdet.core.AnchorGenerator", "list", "list.insert", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "ssd_head.SSDHead.anchor_generators.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "numpy.floor", "int", "int", "int", "min_sizes.insert", "max_sizes.insert", "numpy.sqrt", "range", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "len", "int", "int", "min_sizes.insert", "max_sizes.insert", "min_sizes.insert", "max_sizes.insert", "len", "int", "int", "int", "int", "min_sizes.insert", "max_sizes.insert", "int", "int"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_size", "=", "300", ",", "\n", "num_classes", "=", "81", ",", "\n", "in_channels", "=", "(", "512", ",", "1024", ",", "512", ",", "256", ",", "256", ",", "256", ")", ",", "\n", "anchor_strides", "=", "(", "8", ",", "16", ",", "32", ",", "64", ",", "100", ",", "300", ")", ",", "\n", "basesize_ratio_range", "=", "(", "0.1", ",", "0.9", ")", ",", "\n", "anchor_ratios", "=", "(", "[", "2", "]", ",", "[", "2", ",", "3", "]", ",", "[", "2", ",", "3", "]", ",", "[", "2", ",", "3", "]", ",", "[", "2", "]", ",", "[", "2", "]", ")", ",", "\n", "target_means", "=", "(", ".0", ",", ".0", ",", ".0", ",", ".0", ")", ",", "\n", "target_stds", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", ":", "\n", "        ", "super", "(", "AnchorHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "cls_out_channels", "=", "num_classes", "\n", "num_anchors", "=", "[", "len", "(", "ratios", ")", "*", "2", "+", "2", "for", "ratios", "in", "anchor_ratios", "]", "\n", "reg_convs", "=", "[", "]", "\n", "cls_convs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "in_channels", ")", ")", ":", "\n", "            ", "reg_convs", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "[", "i", "]", ",", "\n", "num_anchors", "[", "i", "]", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ")", ")", "\n", "cls_convs", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "[", "i", "]", ",", "\n", "num_anchors", "[", "i", "]", "*", "num_classes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ")", ")", "\n", "", "self", ".", "reg_convs", "=", "nn", ".", "ModuleList", "(", "reg_convs", ")", "\n", "self", ".", "cls_convs", "=", "nn", ".", "ModuleList", "(", "cls_convs", ")", "\n", "\n", "min_ratio", ",", "max_ratio", "=", "basesize_ratio_range", "\n", "min_ratio", "=", "int", "(", "min_ratio", "*", "100", ")", "\n", "max_ratio", "=", "int", "(", "max_ratio", "*", "100", ")", "\n", "step", "=", "int", "(", "np", ".", "floor", "(", "max_ratio", "-", "min_ratio", ")", "/", "(", "len", "(", "in_channels", ")", "-", "2", ")", ")", "\n", "min_sizes", "=", "[", "]", "\n", "max_sizes", "=", "[", "]", "\n", "for", "r", "in", "range", "(", "int", "(", "min_ratio", ")", ",", "int", "(", "max_ratio", ")", "+", "1", ",", "step", ")", ":", "\n", "            ", "min_sizes", ".", "append", "(", "int", "(", "input_size", "*", "r", "/", "100", ")", ")", "\n", "max_sizes", ".", "append", "(", "int", "(", "input_size", "*", "(", "r", "+", "step", ")", "/", "100", ")", ")", "\n", "", "if", "input_size", "==", "300", ":", "\n", "            ", "if", "basesize_ratio_range", "[", "0", "]", "==", "0.15", ":", "# SSD300 COCO", "\n", "                ", "min_sizes", ".", "insert", "(", "0", ",", "int", "(", "input_size", "*", "7", "/", "100", ")", ")", "\n", "max_sizes", ".", "insert", "(", "0", ",", "int", "(", "input_size", "*", "15", "/", "100", ")", ")", "\n", "", "elif", "basesize_ratio_range", "[", "0", "]", "==", "0.2", ":", "# SSD300 VOC", "\n", "                ", "min_sizes", ".", "insert", "(", "0", ",", "int", "(", "input_size", "*", "10", "/", "100", ")", ")", "\n", "max_sizes", ".", "insert", "(", "0", ",", "int", "(", "input_size", "*", "20", "/", "100", ")", ")", "\n", "", "", "elif", "input_size", "==", "512", ":", "\n", "            ", "if", "basesize_ratio_range", "[", "0", "]", "==", "0.1", ":", "# SSD512 COCO", "\n", "                ", "min_sizes", ".", "insert", "(", "0", ",", "int", "(", "input_size", "*", "4", "/", "100", ")", ")", "\n", "max_sizes", ".", "insert", "(", "0", ",", "int", "(", "input_size", "*", "10", "/", "100", ")", ")", "\n", "", "elif", "basesize_ratio_range", "[", "0", "]", "==", "0.15", ":", "# SSD512 VOC", "\n", "                ", "min_sizes", ".", "insert", "(", "0", ",", "int", "(", "input_size", "*", "7", "/", "100", ")", ")", "\n", "max_sizes", ".", "insert", "(", "0", ",", "int", "(", "input_size", "*", "15", "/", "100", ")", ")", "\n", "", "", "self", ".", "anchor_generators", "=", "[", "]", "\n", "self", ".", "anchor_strides", "=", "anchor_strides", "\n", "for", "k", "in", "range", "(", "len", "(", "anchor_strides", ")", ")", ":", "\n", "            ", "base_size", "=", "min_sizes", "[", "k", "]", "\n", "stride", "=", "anchor_strides", "[", "k", "]", "\n", "ctr", "=", "(", "(", "stride", "-", "1", ")", "/", "2.", ",", "(", "stride", "-", "1", ")", "/", "2.", ")", "\n", "scales", "=", "[", "1.", ",", "np", ".", "sqrt", "(", "max_sizes", "[", "k", "]", "/", "min_sizes", "[", "k", "]", ")", "]", "\n", "ratios", "=", "[", "1.", "]", "\n", "for", "r", "in", "anchor_ratios", "[", "k", "]", ":", "\n", "                ", "ratios", "+=", "[", "1", "/", "r", ",", "r", "]", "# 4 or 6 ratio", "\n", "", "anchor_generator", "=", "AnchorGenerator", "(", "\n", "base_size", ",", "scales", ",", "ratios", ",", "scale_major", "=", "False", ",", "ctr", "=", "ctr", ")", "\n", "indices", "=", "list", "(", "range", "(", "len", "(", "ratios", ")", ")", ")", "\n", "indices", ".", "insert", "(", "1", ",", "len", "(", "indices", ")", ")", "\n", "anchor_generator", ".", "base_anchors", "=", "torch", ".", "index_select", "(", "\n", "anchor_generator", ".", "base_anchors", ",", "0", ",", "torch", ".", "LongTensor", "(", "indices", ")", ")", "\n", "self", ".", "anchor_generators", ".", "append", "(", "anchor_generator", ")", "\n", "\n", "", "self", ".", "target_means", "=", "target_means", "\n", "self", ".", "target_stds", "=", "target_stds", "\n", "self", ".", "use_sigmoid_cls", "=", "False", "\n", "self", ".", "cls_focal_loss", "=", "False", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.ssd_head.SSDHead.init_weights": [[97, 101], ["ssd_head.SSDHead.modules", "isinstance", "mmcv.cnn.xavier_init"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.xavier_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "xavier_init", "(", "m", ",", "distribution", "=", "'uniform'", ",", "bias", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.ssd_head.SSDHead.forward": [[102, 110], ["zip", "cls_scores.append", "bbox_preds.append", "cls_conv", "reg_conv"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "cls_scores", "=", "[", "]", "\n", "bbox_preds", "=", "[", "]", "\n", "for", "feat", ",", "reg_conv", ",", "cls_conv", "in", "zip", "(", "feats", ",", "self", ".", "reg_convs", ",", "\n", "self", ".", "cls_convs", ")", ":", "\n", "            ", "cls_scores", ".", "append", "(", "cls_conv", "(", "feat", ")", ")", "\n", "bbox_preds", ".", "append", "(", "reg_conv", "(", "feat", ")", ")", "\n", "", "return", "cls_scores", ",", "bbox_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.ssd_head.SSDHead.loss_single": [[111, 134], ["pos_inds.size", "loss_cls_all[].topk", "loss_cls_all[].sum", "topk_loss_cls_neg.sum", "losses.smooth_l1_loss", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "neg_inds.size", "neg_inds.size"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.losses.smooth_l1_loss.smooth_l1_loss", "home.repos.pwc.inspect_result.twangnh_SimCal.losses.cross_entropy_loss.cross_entropy", "home.repos.pwc.inspect_result.twangnh_SimCal.losses.cross_entropy_loss.cross_entropy", "home.repos.pwc.inspect_result.twangnh_SimCal.losses.cross_entropy_loss.cross_entropy"], ["", "def", "loss_single", "(", "self", ",", "cls_score", ",", "bbox_pred", ",", "labels", ",", "label_weights", ",", "\n", "bbox_targets", ",", "bbox_weights", ",", "num_total_samples", ",", "cfg", ")", ":", "\n", "        ", "loss_cls_all", "=", "F", ".", "cross_entropy", "(", "\n", "cls_score", ",", "labels", ",", "reduction", "=", "'none'", ")", "*", "label_weights", "\n", "pos_inds", "=", "(", "labels", ">", "0", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "neg_inds", "=", "(", "labels", "==", "0", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "num_pos_samples", "=", "pos_inds", ".", "size", "(", "0", ")", "\n", "num_neg_samples", "=", "cfg", ".", "neg_pos_ratio", "*", "num_pos_samples", "\n", "if", "num_neg_samples", ">", "neg_inds", ".", "size", "(", "0", ")", ":", "\n", "            ", "num_neg_samples", "=", "neg_inds", ".", "size", "(", "0", ")", "\n", "", "topk_loss_cls_neg", ",", "_", "=", "loss_cls_all", "[", "neg_inds", "]", ".", "topk", "(", "num_neg_samples", ")", "\n", "loss_cls_pos", "=", "loss_cls_all", "[", "pos_inds", "]", ".", "sum", "(", ")", "\n", "loss_cls_neg", "=", "topk_loss_cls_neg", ".", "sum", "(", ")", "\n", "loss_cls", "=", "(", "loss_cls_pos", "+", "loss_cls_neg", ")", "/", "num_total_samples", "\n", "\n", "loss_bbox", "=", "smooth_l1_loss", "(", "\n", "bbox_pred", ",", "\n", "bbox_targets", ",", "\n", "bbox_weights", ",", "\n", "beta", "=", "cfg", ".", "smoothl1_beta", ",", "\n", "avg_factor", "=", "num_total_samples", ")", "\n", "return", "loss_cls", "[", "None", "]", ",", "loss_bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.ssd_head.SSDHead.loss": [[135, 194], ["ssd_head.SSDHead.get_anchors", "mmdet.core.anchor_target", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "mmdet.core.multi_apply", "dict", "len", "len", "featmap.size", "s.permute().reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "b.permute().reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "s.permute", "b.permute"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.get_anchors", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_target.anchor_target", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.misc.multi_apply"], ["", "def", "loss", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "        ", "featmap_sizes", "=", "[", "featmap", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "featmap", "in", "cls_scores", "]", "\n", "assert", "len", "(", "featmap_sizes", ")", "==", "len", "(", "self", ".", "anchor_generators", ")", "\n", "\n", "anchor_list", ",", "valid_flag_list", "=", "self", ".", "get_anchors", "(", "\n", "featmap_sizes", ",", "img_metas", ")", "\n", "cls_reg_targets", "=", "anchor_target", "(", "\n", "anchor_list", ",", "\n", "valid_flag_list", ",", "\n", "gt_bboxes", ",", "\n", "img_metas", ",", "\n", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore_list", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels_list", "=", "gt_labels", ",", "\n", "label_channels", "=", "1", ",", "\n", "sampling", "=", "False", ",", "\n", "unmap_outputs", "=", "False", ")", "\n", "if", "cls_reg_targets", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "(", "labels_list", ",", "label_weights_list", ",", "bbox_targets_list", ",", "bbox_weights_list", ",", "\n", "num_total_pos", ",", "num_total_neg", ")", "=", "cls_reg_targets", "\n", "\n", "num_images", "=", "len", "(", "img_metas", ")", "\n", "all_cls_scores", "=", "torch", ".", "cat", "(", "[", "\n", "s", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "\n", "num_images", ",", "-", "1", ",", "self", ".", "cls_out_channels", ")", "for", "s", "in", "cls_scores", "\n", "]", ",", "1", ")", "\n", "all_labels", "=", "torch", ".", "cat", "(", "labels_list", ",", "-", "1", ")", ".", "view", "(", "num_images", ",", "-", "1", ")", "\n", "all_label_weights", "=", "torch", ".", "cat", "(", "label_weights_list", ",", "\n", "-", "1", ")", ".", "view", "(", "num_images", ",", "-", "1", ")", "\n", "all_bbox_preds", "=", "torch", ".", "cat", "(", "[", "\n", "b", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "num_images", ",", "-", "1", ",", "4", ")", "\n", "for", "b", "in", "bbox_preds", "\n", "]", ",", "-", "2", ")", "\n", "all_bbox_targets", "=", "torch", ".", "cat", "(", "bbox_targets_list", ",", "\n", "-", "2", ")", ".", "view", "(", "num_images", ",", "-", "1", ",", "4", ")", "\n", "all_bbox_weights", "=", "torch", ".", "cat", "(", "bbox_weights_list", ",", "\n", "-", "2", ")", ".", "view", "(", "num_images", ",", "-", "1", ",", "4", ")", "\n", "\n", "losses_cls", ",", "losses_bbox", "=", "multi_apply", "(", "\n", "self", ".", "loss_single", ",", "\n", "all_cls_scores", ",", "\n", "all_bbox_preds", ",", "\n", "all_labels", ",", "\n", "all_label_weights", ",", "\n", "all_bbox_targets", ",", "\n", "all_bbox_weights", ",", "\n", "num_total_samples", "=", "num_total_pos", ",", "\n", "cfg", "=", "cfg", ")", "\n", "return", "dict", "(", "loss_cls", "=", "losses_cls", ",", "loss_bbox", "=", "losses_bbox", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.guided_anchor_head.FeatureAdaption.__init__": [[32, 48], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "mmdet.ops.DeformConv", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "deformable_groups", "=", "4", ")", ":", "\n", "        ", "super", "(", "FeatureAdaption", ",", "self", ")", ".", "__init__", "(", ")", "\n", "offset_channels", "=", "kernel_size", "*", "kernel_size", "*", "2", "\n", "self", ".", "conv_offset", "=", "nn", ".", "Conv2d", "(", "\n", "2", ",", "deformable_groups", "*", "offset_channels", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_adaption", "=", "DeformConv", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "deformable_groups", "=", "deformable_groups", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.guided_anchor_head.FeatureAdaption.init_weights": [[49, 52], ["mmcv.cnn.normal_init", "mmcv.cnn.normal_init"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "normal_init", "(", "self", ".", "conv_offset", ",", "std", "=", "0.1", ")", "\n", "normal_init", "(", "self", ".", "conv_adaption", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.guided_anchor_head.FeatureAdaption.forward": [[53, 57], ["guided_anchor_head.FeatureAdaption.conv_offset", "guided_anchor_head.FeatureAdaption.relu", "shape.detach", "guided_anchor_head.FeatureAdaption.conv_adaption"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "shape", ")", ":", "\n", "        ", "offset", "=", "self", ".", "conv_offset", "(", "shape", ".", "detach", "(", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv_adaption", "(", "x", ",", "offset", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.guided_anchor_head.GuidedAnchorHead.__init__": [[96, 170], ["dict", "dict", "dict", "dict", "anchor_head.AnchorHead.__init__", "loss_cls.get", "builder.build_loss", "builder.build_loss", "builder.build_loss", "builder.build_loss", "guided_anchor_head.GuidedAnchorHead._init_layers", "numpy.array", "len", "len", "list", "guided_anchor_head.GuidedAnchorHead.approx_generators.append", "guided_anchor_head.GuidedAnchorHead.square_generators.append", "mmdet.core.AnchorGenerator", "mmdet.core.AnchorGenerator", "range"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_loss", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_loss", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_loss", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_loss", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead._init_layers"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_classes", ",", "\n", "in_channels", ",", "\n", "feat_channels", "=", "256", ",", "\n", "octave_base_scale", "=", "8", ",", "\n", "scales_per_octave", "=", "3", ",", "\n", "octave_ratios", "=", "[", "0.5", ",", "1.0", ",", "2.0", "]", ",", "\n", "anchor_strides", "=", "[", "4", ",", "8", ",", "16", ",", "32", ",", "64", "]", ",", "\n", "anchor_base_sizes", "=", "None", ",", "\n", "anchoring_means", "=", "(", ".0", ",", ".0", ",", ".0", ",", ".0", ")", ",", "\n", "anchoring_stds", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ",", "\n", "target_means", "=", "(", ".0", ",", ".0", ",", ".0", ",", ".0", ")", ",", "\n", "target_stds", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ",", "\n", "deformable_groups", "=", "4", ",", "\n", "loc_filter_thr", "=", "0.01", ",", "\n", "loss_loc", "=", "dict", "(", "\n", "type", "=", "'FocalLoss'", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "gamma", "=", "2.0", ",", "\n", "alpha", "=", "0.25", ",", "\n", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_shape", "=", "dict", "(", "type", "=", "'BoundedIoULoss'", ",", "beta", "=", "0.2", ",", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_cls", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "use_sigmoid", "=", "True", ",", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_bbox", "=", "dict", "(", "type", "=", "'SmoothL1Loss'", ",", "beta", "=", "1.0", ",", "loss_weight", "=", "1.0", ")", ")", ":", "\n", "        ", "super", "(", "AnchorHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "feat_channels", "=", "feat_channels", "\n", "self", ".", "octave_base_scale", "=", "octave_base_scale", "\n", "self", ".", "scales_per_octave", "=", "scales_per_octave", "\n", "self", ".", "octave_scales", "=", "octave_base_scale", "*", "np", ".", "array", "(", "\n", "[", "2", "**", "(", "i", "/", "scales_per_octave", ")", "for", "i", "in", "range", "(", "scales_per_octave", ")", "]", ")", "\n", "self", ".", "approxs_per_octave", "=", "len", "(", "self", ".", "octave_scales", ")", "*", "len", "(", "octave_ratios", ")", "\n", "self", ".", "octave_ratios", "=", "octave_ratios", "\n", "self", ".", "anchor_strides", "=", "anchor_strides", "\n", "self", ".", "anchor_base_sizes", "=", "list", "(", "\n", "anchor_strides", ")", "if", "anchor_base_sizes", "is", "None", "else", "anchor_base_sizes", "\n", "self", ".", "anchoring_means", "=", "anchoring_means", "\n", "self", ".", "anchoring_stds", "=", "anchoring_stds", "\n", "self", ".", "target_means", "=", "target_means", "\n", "self", ".", "target_stds", "=", "target_stds", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "self", ".", "loc_filter_thr", "=", "loc_filter_thr", "\n", "self", ".", "approx_generators", "=", "[", "]", "\n", "self", ".", "square_generators", "=", "[", "]", "\n", "for", "anchor_base", "in", "self", ".", "anchor_base_sizes", ":", "\n", "# Generators for approxs", "\n", "            ", "self", ".", "approx_generators", ".", "append", "(", "\n", "AnchorGenerator", "(", "anchor_base", ",", "self", ".", "octave_scales", ",", "\n", "self", ".", "octave_ratios", ")", ")", "\n", "# Generators for squares", "\n", "self", ".", "square_generators", ".", "append", "(", "\n", "AnchorGenerator", "(", "anchor_base", ",", "[", "self", ".", "octave_base_scale", "]", ",", "[", "1.0", "]", ")", ")", "\n", "# one anchor per location", "\n", "", "self", ".", "num_anchors", "=", "1", "\n", "self", ".", "use_sigmoid_cls", "=", "loss_cls", ".", "get", "(", "'use_sigmoid'", ",", "False", ")", "\n", "self", ".", "cls_focal_loss", "=", "loss_cls", "[", "'type'", "]", "in", "[", "'FocalLoss'", "]", "\n", "self", ".", "loc_focal_loss", "=", "loss_loc", "[", "'type'", "]", "in", "[", "'FocalLoss'", "]", "\n", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "            ", "self", ".", "cls_out_channels", "=", "self", ".", "num_classes", "-", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "cls_out_channels", "=", "self", ".", "num_classes", "\n", "\n", "# build losses", "\n", "", "self", ".", "loss_loc", "=", "build_loss", "(", "loss_loc", ")", "\n", "self", ".", "loss_shape", "=", "build_loss", "(", "loss_shape", ")", "\n", "self", ".", "loss_cls", "=", "build_loss", "(", "loss_cls", ")", "\n", "self", ".", "loss_bbox", "=", "build_loss", "(", "loss_bbox", ")", "\n", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n", "self", ".", "_init_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.guided_anchor_head.GuidedAnchorHead._init_layers": [[171, 186], ["torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "guided_anchor_head.FeatureAdaption", "mmdet.ops.MaskedConv2d", "mmdet.ops.MaskedConv2d"], "methods", ["None"], ["", "def", "_init_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv_loc", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "1", ",", "1", ")", "\n", "self", ".", "conv_shape", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "self", ".", "num_anchors", "*", "2", ",", "\n", "1", ")", "\n", "self", ".", "feature_adaption", "=", "FeatureAdaption", "(", "\n", "self", ".", "feat_channels", ",", "\n", "self", ".", "feat_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "deformable_groups", "=", "self", ".", "deformable_groups", ")", "\n", "self", ".", "conv_cls", "=", "MaskedConv2d", "(", "self", ".", "feat_channels", ",", "\n", "self", ".", "num_anchors", "*", "self", ".", "cls_out_channels", ",", "\n", "1", ")", "\n", "self", ".", "conv_reg", "=", "MaskedConv2d", "(", "self", ".", "feat_channels", ",", "self", ".", "num_anchors", "*", "4", ",", "\n", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.guided_anchor_head.GuidedAnchorHead.init_weights": [[187, 196], ["mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "utils.bias_init_with_prob", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "guided_anchor_head.GuidedAnchorHead.feature_adaption.init_weights"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.bias_init_with_prob", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "normal_init", "(", "self", ".", "conv_cls", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "conv_reg", ",", "std", "=", "0.01", ")", "\n", "\n", "bias_cls", "=", "bias_init_with_prob", "(", "0.01", ")", "\n", "normal_init", "(", "self", ".", "conv_loc", ",", "std", "=", "0.01", ",", "bias", "=", "bias_cls", ")", "\n", "normal_init", "(", "self", ".", "conv_shape", ",", "std", "=", "0.01", ")", "\n", "\n", "self", ".", "feature_adaption", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.guided_anchor_head.GuidedAnchorHead.forward_single": [[197, 209], ["guided_anchor_head.GuidedAnchorHead.conv_loc", "guided_anchor_head.GuidedAnchorHead.conv_shape", "guided_anchor_head.GuidedAnchorHead.feature_adaption", "guided_anchor_head.GuidedAnchorHead.conv_cls", "guided_anchor_head.GuidedAnchorHead.conv_reg", "guided_anchor_head.GuidedAnchorHead.sigmoid"], "methods", ["None"], ["", "def", "forward_single", "(", "self", ",", "x", ")", ":", "\n", "        ", "loc_pred", "=", "self", ".", "conv_loc", "(", "x", ")", "\n", "shape_pred", "=", "self", ".", "conv_shape", "(", "x", ")", "\n", "x", "=", "self", ".", "feature_adaption", "(", "x", ",", "shape_pred", ")", "\n", "# masked conv is only used during inference for speed-up", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "mask", "=", "loc_pred", ".", "sigmoid", "(", ")", "[", "0", "]", ">=", "self", ".", "loc_filter_thr", "\n", "", "else", ":", "\n", "            ", "mask", "=", "None", "\n", "", "cls_score", "=", "self", ".", "conv_cls", "(", "x", ",", "mask", ")", "\n", "bbox_pred", "=", "self", ".", "conv_reg", "(", "x", ",", "mask", ")", "\n", "return", "cls_score", ",", "bbox_pred", ",", "shape_pred", ",", "loc_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.guided_anchor_head.GuidedAnchorHead.forward": [[210, 212], ["mmdet.core.multi_apply"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.misc.multi_apply"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "return", "multi_apply", "(", "self", ".", "forward_single", ",", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.guided_anchor_head.GuidedAnchorHead.get_sampled_approxs": [[213, 264], ["len", "len", "range", "enumerate", "guided_anchor_head.GuidedAnchorHead.approx_generators[].grid_anchors", "multi_level_approxs.append", "range", "inside_flag_list.append", "range", "min", "min", "guided_anchor_head.GuidedAnchorHead.approx_generators[].valid_flags", "range", "multi_level_flags.append", "int", "int", "mmdet.core.anchor_inside_flags", "inside_flags_list.append", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "numpy.ceil", "numpy.ceil", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_generator.AnchorGenerator.grid_anchors", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_generator.AnchorGenerator.valid_flags", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_target.anchor_inside_flags"], ["", "def", "get_sampled_approxs", "(", "self", ",", "featmap_sizes", ",", "img_metas", ",", "cfg", ")", ":", "\n", "        ", "\"\"\"Get sampled approxs and inside flags according to feature map sizes.\n\n        Args:\n            featmap_sizes (list[tuple]): Multi-level feature map sizes.\n            img_metas (list[dict]): Image meta info.\n\n        Returns:\n            tuple: approxes of each image, inside flags of each image\n        \"\"\"", "\n", "num_imgs", "=", "len", "(", "img_metas", ")", "\n", "num_levels", "=", "len", "(", "featmap_sizes", ")", "\n", "\n", "# since feature map sizes of all images are the same, we only compute", "\n", "# approxes for one time", "\n", "multi_level_approxs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "approxs", "=", "self", ".", "approx_generators", "[", "i", "]", ".", "grid_anchors", "(", "\n", "featmap_sizes", "[", "i", "]", ",", "self", ".", "anchor_strides", "[", "i", "]", ")", "\n", "multi_level_approxs", ".", "append", "(", "approxs", ")", "\n", "", "approxs_list", "=", "[", "multi_level_approxs", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "\n", "# for each image, we compute inside flags of multi level approxes", "\n", "inside_flag_list", "=", "[", "]", "\n", "for", "img_id", ",", "img_meta", "in", "enumerate", "(", "img_metas", ")", ":", "\n", "            ", "multi_level_flags", "=", "[", "]", "\n", "multi_level_approxs", "=", "approxs_list", "[", "img_id", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "                ", "approxs", "=", "multi_level_approxs", "[", "i", "]", "\n", "anchor_stride", "=", "self", ".", "anchor_strides", "[", "i", "]", "\n", "feat_h", ",", "feat_w", "=", "featmap_sizes", "[", "i", "]", "\n", "h", ",", "w", ",", "_", "=", "img_meta", "[", "'pad_shape'", "]", "\n", "valid_feat_h", "=", "min", "(", "int", "(", "np", ".", "ceil", "(", "h", "/", "anchor_stride", ")", ")", ",", "feat_h", ")", "\n", "valid_feat_w", "=", "min", "(", "int", "(", "np", ".", "ceil", "(", "w", "/", "anchor_stride", ")", ")", ",", "feat_w", ")", "\n", "flags", "=", "self", ".", "approx_generators", "[", "i", "]", ".", "valid_flags", "(", "\n", "(", "feat_h", ",", "feat_w", ")", ",", "(", "valid_feat_h", ",", "valid_feat_w", ")", ")", "\n", "inside_flags_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "approxs_per_octave", ")", ":", "\n", "                    ", "split_valid_flags", "=", "flags", "[", "i", ":", ":", "self", ".", "approxs_per_octave", "]", "\n", "split_approxs", "=", "approxs", "[", "i", ":", ":", "self", ".", "approxs_per_octave", ",", ":", "]", "\n", "inside_flags", "=", "anchor_inside_flags", "(", "\n", "split_approxs", ",", "split_valid_flags", ",", "\n", "img_meta", "[", "'img_shape'", "]", "[", ":", "2", "]", ",", "cfg", ".", "allowed_border", ")", "\n", "inside_flags_list", ".", "append", "(", "inside_flags", ")", "\n", "# inside_flag for a position is true if any anchor in this", "\n", "# position is true", "\n", "", "inside_flags", "=", "(", "\n", "torch", ".", "stack", "(", "inside_flags_list", ",", "0", ")", ".", "sum", "(", "dim", "=", "0", ")", ">", "0", ")", "\n", "multi_level_flags", ".", "append", "(", "inside_flags", ")", "\n", "", "inside_flag_list", ".", "append", "(", "multi_level_flags", ")", "\n", "", "return", "approxs_list", ",", "inside_flag_list", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.guided_anchor_head.GuidedAnchorHead.get_anchors": [[265, 317], ["len", "len", "range", "enumerate", "guided_anchor_head.GuidedAnchorHead.square_generators[].grid_anchors", "multi_level_squares.append", "range", "guided_anchors_list.append", "loc_mask_list.append", "range", "guided_anchor_head.GuidedAnchorHead.get_guided_anchors_single", "multi_level_guided_anchors.append", "multi_level_loc_mask.append"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_generator.AnchorGenerator.grid_anchors", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.guided_anchor_head.GuidedAnchorHead.get_guided_anchors_single"], ["", "def", "get_anchors", "(", "self", ",", "\n", "featmap_sizes", ",", "\n", "shape_preds", ",", "\n", "loc_preds", ",", "\n", "img_metas", ",", "\n", "use_loc_filter", "=", "False", ")", ":", "\n", "        ", "\"\"\"Get squares according to feature map sizes and guided\n        anchors.\n\n        Args:\n            featmap_sizes (list[tuple]): Multi-level feature map sizes.\n            shape_preds (list[tensor]): Multi-level shape predictions.\n            loc_preds (list[tensor]): Multi-level location predictions.\n            img_metas (list[dict]): Image meta info.\n            use_loc_filter (bool): Use loc filter or not.\n\n        Returns:\n            tuple: square approxs of each image, guided anchors of each image,\n                loc masks of each image\n        \"\"\"", "\n", "num_imgs", "=", "len", "(", "img_metas", ")", "\n", "num_levels", "=", "len", "(", "featmap_sizes", ")", "\n", "\n", "# since feature map sizes of all images are the same, we only compute", "\n", "# squares for one time", "\n", "multi_level_squares", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "squares", "=", "self", ".", "square_generators", "[", "i", "]", ".", "grid_anchors", "(", "\n", "featmap_sizes", "[", "i", "]", ",", "self", ".", "anchor_strides", "[", "i", "]", ")", "\n", "multi_level_squares", ".", "append", "(", "squares", ")", "\n", "", "squares_list", "=", "[", "multi_level_squares", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "\n", "# for each image, we compute multi level guided anchors", "\n", "guided_anchors_list", "=", "[", "]", "\n", "loc_mask_list", "=", "[", "]", "\n", "for", "img_id", ",", "img_meta", "in", "enumerate", "(", "img_metas", ")", ":", "\n", "            ", "multi_level_guided_anchors", "=", "[", "]", "\n", "multi_level_loc_mask", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "                ", "squares", "=", "squares_list", "[", "img_id", "]", "[", "i", "]", "\n", "shape_pred", "=", "shape_preds", "[", "i", "]", "[", "img_id", "]", "\n", "loc_pred", "=", "loc_preds", "[", "i", "]", "[", "img_id", "]", "\n", "guided_anchors", ",", "loc_mask", "=", "self", ".", "get_guided_anchors_single", "(", "\n", "squares", ",", "\n", "shape_pred", ",", "\n", "loc_pred", ",", "\n", "use_loc_filter", "=", "use_loc_filter", ")", "\n", "multi_level_guided_anchors", ".", "append", "(", "guided_anchors", ")", "\n", "multi_level_loc_mask", ".", "append", "(", "loc_mask", ")", "\n", "", "guided_anchors_list", ".", "append", "(", "multi_level_guided_anchors", ")", "\n", "loc_mask_list", ".", "append", "(", "multi_level_loc_mask", ")", "\n", "", "return", "squares_list", ",", "guided_anchors_list", ",", "loc_mask_list", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.guided_anchor_head.GuidedAnchorHead.get_guided_anchors_single": [[318, 355], ["loc_pred.sigmoid().detach.sigmoid().detach.sigmoid().detach", "loc_mask.permute().expand", "mask.contiguous().view.contiguous().view.contiguous().view", "anchor_deltas.new_full", "mmdet.core.delta2bbox", "shape_pred.permute().contiguous().view().detach", "squares.size", "loc_pred.sigmoid().detach.sigmoid().detach.sigmoid", "loc_mask.permute", "mask.contiguous().view.contiguous().view.contiguous", "shape_pred.permute().contiguous().view", "shape_pred.permute().contiguous", "shape_pred.permute"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.delta2bbox"], ["", "def", "get_guided_anchors_single", "(", "self", ",", "\n", "squares", ",", "\n", "shape_pred", ",", "\n", "loc_pred", ",", "\n", "use_loc_filter", "=", "False", ")", ":", "\n", "        ", "\"\"\"Get guided anchors and loc masks for a single level.\n\n        Args:\n            square (tensor): Squares of a single level.\n            shape_pred (tensor): Shape predections of a single level.\n            loc_pred (tensor): Loc predections of a single level.\n            use_loc_filter (list[tensor]): Use loc filter or not.\n\n        Returns:\n            tuple: guided anchors, location masks\n        \"\"\"", "\n", "# calculate location filtering mask", "\n", "loc_pred", "=", "loc_pred", ".", "sigmoid", "(", ")", ".", "detach", "(", ")", "\n", "if", "use_loc_filter", ":", "\n", "            ", "loc_mask", "=", "loc_pred", ">=", "self", ".", "loc_filter_thr", "\n", "", "else", ":", "\n", "            ", "loc_mask", "=", "loc_pred", ">=", "0.0", "\n", "", "mask", "=", "loc_mask", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "num_anchors", ")", "\n", "mask", "=", "mask", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "# calculate guided anchors", "\n", "squares", "=", "squares", "[", "mask", "]", "\n", "anchor_deltas", "=", "shape_pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "2", ")", ".", "detach", "(", ")", "[", "mask", "]", "\n", "bbox_deltas", "=", "anchor_deltas", ".", "new_full", "(", "squares", ".", "size", "(", ")", ",", "0", ")", "\n", "bbox_deltas", "[", ":", ",", "2", ":", "]", "=", "anchor_deltas", "\n", "guided_anchors", "=", "delta2bbox", "(", "\n", "squares", ",", "\n", "bbox_deltas", ",", "\n", "self", ".", "anchoring_means", ",", "\n", "self", ".", "anchoring_stds", ",", "\n", "wh_ratio_clip", "=", "1e-6", ")", "\n", "return", "guided_anchors", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.guided_anchor_head.GuidedAnchorHead.loss_shape_single": [[356, 382], ["shape_pred.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "bbox_anchors.contiguous().view.contiguous().view.contiguous().view", "bbox_gts.contiguous().view.contiguous().view.contiguous().view", "anchor_weights.contiguous().view.contiguous().view.contiguous().view", "bbox_anchors.contiguous().view.contiguous().view.new_full", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "mmdet.core.delta2bbox", "guided_anchor_head.GuidedAnchorHead.loss_shape", "bbox_anchors.contiguous().view.contiguous().view.size", "shape_pred.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "bbox_anchors.contiguous().view.contiguous().view.contiguous", "bbox_gts.contiguous().view.contiguous().view.contiguous", "anchor_weights.contiguous().view.contiguous().view.contiguous", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "shape_pred.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.delta2bbox"], ["", "def", "loss_shape_single", "(", "self", ",", "shape_pred", ",", "bbox_anchors", ",", "bbox_gts", ",", "\n", "anchor_weights", ",", "anchor_total_num", ")", ":", "\n", "        ", "shape_pred", "=", "shape_pred", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "bbox_anchors", "=", "bbox_anchors", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "bbox_gts", "=", "bbox_gts", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "anchor_weights", "=", "anchor_weights", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "bbox_deltas", "=", "bbox_anchors", ".", "new_full", "(", "bbox_anchors", ".", "size", "(", ")", ",", "0", ")", "\n", "bbox_deltas", "[", ":", ",", "2", ":", "]", "+=", "shape_pred", "\n", "# filter out negative samples to speed-up weighted_bounded_iou_loss", "\n", "inds", "=", "torch", ".", "nonzero", "(", "anchor_weights", "[", ":", ",", "0", "]", ">", "0", ")", ".", "squeeze", "(", "1", ")", "\n", "bbox_deltas_", "=", "bbox_deltas", "[", "inds", "]", "\n", "bbox_anchors_", "=", "bbox_anchors", "[", "inds", "]", "\n", "bbox_gts_", "=", "bbox_gts", "[", "inds", "]", "\n", "anchor_weights_", "=", "anchor_weights", "[", "inds", "]", "\n", "pred_anchors_", "=", "delta2bbox", "(", "\n", "bbox_anchors_", ",", "\n", "bbox_deltas_", ",", "\n", "self", ".", "anchoring_means", ",", "\n", "self", ".", "anchoring_stds", ",", "\n", "wh_ratio_clip", "=", "1e-6", ")", "\n", "loss_shape", "=", "self", ".", "loss_shape", "(", "\n", "pred_anchors_", ",", "\n", "bbox_gts_", ",", "\n", "anchor_weights_", ",", "\n", "avg_factor", "=", "anchor_total_num", ")", "\n", "return", "loss_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.guided_anchor_head.GuidedAnchorHead.loss_loc_single": [[383, 391], ["guided_anchor_head.GuidedAnchorHead.loss_loc", "loc_pred.reshape", "loc_target.reshape().long", "loc_weight.reshape", "loc_target.reshape"], "methods", ["None"], ["", "def", "loss_loc_single", "(", "self", ",", "loc_pred", ",", "loc_target", ",", "loc_weight", ",", "loc_avg_factor", ",", "\n", "cfg", ")", ":", "\n", "        ", "loss_loc", "=", "self", ".", "loss_loc", "(", "\n", "loc_pred", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "\n", "loc_target", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "\n", "loc_weight", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "\n", "avg_factor", "=", "loc_avg_factor", ")", "\n", "return", "loss_loc", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.guided_anchor_head.GuidedAnchorHead.loss": [[392, 503], ["mmdet.core.force_fp32", "mmdet.core.ga_loc_target", "guided_anchor_head.GuidedAnchorHead.get_sampled_approxs", "guided_anchor_head.GuidedAnchorHead.get_anchors", "mmdet.core.ga_shape_target", "mmdet.core.anchor_target", "mmdet.core.multi_apply", "range", "range", "dict", "len", "len", "len", "guided_anchor_head.GuidedAnchorHead.loss_loc_single", "losses_loc.append", "len", "guided_anchor_head.GuidedAnchorHead.loss_shape_single", "losses_shape.append", "featmap.size", "hasattr"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.guided_anchor_target.ga_loc_target", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.guided_anchor_head.GuidedAnchorHead.get_sampled_approxs", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.get_anchors", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.guided_anchor_target.ga_shape_target", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_target.anchor_target", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.misc.multi_apply", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.guided_anchor_head.GuidedAnchorHead.loss_loc_single", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.guided_anchor_head.GuidedAnchorHead.loss_shape_single"], ["", "@", "force_fp32", "(", "\n", "apply_to", "=", "(", "'cls_scores'", ",", "'bbox_preds'", ",", "'shape_preds'", ",", "'loc_preds'", ")", ")", "\n", "def", "loss", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "shape_preds", ",", "\n", "loc_preds", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "        ", "featmap_sizes", "=", "[", "featmap", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "featmap", "in", "cls_scores", "]", "\n", "assert", "len", "(", "featmap_sizes", ")", "==", "len", "(", "self", ".", "approx_generators", ")", "\n", "\n", "# get loc targets", "\n", "loc_targets", ",", "loc_weights", ",", "loc_avg_factor", "=", "ga_loc_target", "(", "\n", "gt_bboxes", ",", "\n", "featmap_sizes", ",", "\n", "self", ".", "octave_base_scale", ",", "\n", "self", ".", "anchor_strides", ",", "\n", "center_ratio", "=", "cfg", ".", "center_ratio", ",", "\n", "ignore_ratio", "=", "cfg", ".", "ignore_ratio", ")", "\n", "\n", "# get sampled approxes", "\n", "approxs_list", ",", "inside_flag_list", "=", "self", ".", "get_sampled_approxs", "(", "\n", "featmap_sizes", ",", "img_metas", ",", "cfg", ")", "\n", "# get squares and guided anchors", "\n", "squares_list", ",", "guided_anchors_list", ",", "_", "=", "self", ".", "get_anchors", "(", "\n", "featmap_sizes", ",", "shape_preds", ",", "loc_preds", ",", "img_metas", ")", "\n", "\n", "# get shape targets", "\n", "sampling", "=", "False", "if", "not", "hasattr", "(", "cfg", ",", "'ga_sampler'", ")", "else", "True", "\n", "shape_targets", "=", "ga_shape_target", "(", "\n", "approxs_list", ",", "\n", "inside_flag_list", ",", "\n", "squares_list", ",", "\n", "gt_bboxes", ",", "\n", "img_metas", ",", "\n", "self", ".", "approxs_per_octave", ",", "\n", "cfg", ",", "\n", "sampling", "=", "sampling", ")", "\n", "if", "shape_targets", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "(", "bbox_anchors_list", ",", "bbox_gts_list", ",", "anchor_weights_list", ",", "anchor_fg_num", ",", "\n", "anchor_bg_num", ")", "=", "shape_targets", "\n", "anchor_total_num", "=", "(", "\n", "anchor_fg_num", "if", "not", "sampling", "else", "anchor_fg_num", "+", "anchor_bg_num", ")", "\n", "\n", "# get anchor targets", "\n", "sampling", "=", "False", "if", "self", ".", "cls_focal_loss", "else", "True", "\n", "label_channels", "=", "self", ".", "cls_out_channels", "if", "self", ".", "use_sigmoid_cls", "else", "1", "\n", "cls_reg_targets", "=", "anchor_target", "(", "\n", "guided_anchors_list", ",", "\n", "inside_flag_list", ",", "\n", "gt_bboxes", ",", "\n", "img_metas", ",", "\n", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore_list", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels_list", "=", "gt_labels", ",", "\n", "label_channels", "=", "label_channels", ",", "\n", "sampling", "=", "sampling", ")", "\n", "if", "cls_reg_targets", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "(", "labels_list", ",", "label_weights_list", ",", "bbox_targets_list", ",", "bbox_weights_list", ",", "\n", "num_total_pos", ",", "num_total_neg", ")", "=", "cls_reg_targets", "\n", "num_total_samples", "=", "(", "\n", "num_total_pos", "if", "self", ".", "cls_focal_loss", "else", "num_total_pos", "+", "\n", "num_total_neg", ")", "\n", "\n", "# get classification and bbox regression losses", "\n", "losses_cls", ",", "losses_bbox", "=", "multi_apply", "(", "\n", "self", ".", "loss_single", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "labels_list", ",", "\n", "label_weights_list", ",", "\n", "bbox_targets_list", ",", "\n", "bbox_weights_list", ",", "\n", "num_total_samples", "=", "num_total_samples", ",", "\n", "cfg", "=", "cfg", ")", "\n", "\n", "# get anchor location loss", "\n", "losses_loc", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "loc_preds", ")", ")", ":", "\n", "            ", "loss_loc", "=", "self", ".", "loss_loc_single", "(", "\n", "loc_preds", "[", "i", "]", ",", "\n", "loc_targets", "[", "i", "]", ",", "\n", "loc_weights", "[", "i", "]", ",", "\n", "loc_avg_factor", "=", "loc_avg_factor", ",", "\n", "cfg", "=", "cfg", ")", "\n", "losses_loc", ".", "append", "(", "loss_loc", ")", "\n", "\n", "# get anchor shape loss", "\n", "", "losses_shape", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "shape_preds", ")", ")", ":", "\n", "            ", "loss_shape", "=", "self", ".", "loss_shape_single", "(", "\n", "shape_preds", "[", "i", "]", ",", "\n", "bbox_anchors_list", "[", "i", "]", ",", "\n", "bbox_gts_list", "[", "i", "]", ",", "\n", "anchor_weights_list", "[", "i", "]", ",", "\n", "anchor_total_num", "=", "anchor_total_num", ")", "\n", "losses_shape", ".", "append", "(", "loss_shape", ")", "\n", "\n", "", "return", "dict", "(", "\n", "loss_cls", "=", "losses_cls", ",", "\n", "loss_bbox", "=", "losses_bbox", ",", "\n", "loss_shape", "=", "losses_shape", ",", "\n", "loss_loc", "=", "losses_loc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.guided_anchor_head.GuidedAnchorHead.get_bboxes": [[504, 547], ["mmdet.core.force_fp32", "len", "guided_anchor_head.GuidedAnchorHead.get_anchors", "range", "len", "len", "len", "len", "len", "guided_anchor_head.GuidedAnchorHead.get_bboxes_single", "result_list.append", "featmap.size", "[].detach", "[].detach", "[].detach", "[].detach", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.get_anchors", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.get_bboxes_single"], ["", "@", "force_fp32", "(", "\n", "apply_to", "=", "(", "'cls_scores'", ",", "'bbox_preds'", ",", "'shape_preds'", ",", "'loc_preds'", ")", ")", "\n", "def", "get_bboxes", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "shape_preds", ",", "\n", "loc_preds", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "==", "len", "(", "shape_preds", ")", "==", "len", "(", "\n", "loc_preds", ")", "\n", "num_levels", "=", "len", "(", "cls_scores", ")", "\n", "featmap_sizes", "=", "[", "featmap", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "featmap", "in", "cls_scores", "]", "\n", "# get guided anchors", "\n", "_", ",", "guided_anchors", ",", "loc_masks", "=", "self", ".", "get_anchors", "(", "\n", "featmap_sizes", ",", "\n", "shape_preds", ",", "\n", "loc_preds", ",", "\n", "img_metas", ",", "\n", "use_loc_filter", "=", "not", "self", ".", "training", ")", "\n", "result_list", "=", "[", "]", "\n", "for", "img_id", "in", "range", "(", "len", "(", "img_metas", ")", ")", ":", "\n", "            ", "cls_score_list", "=", "[", "\n", "cls_scores", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "bbox_pred_list", "=", "[", "\n", "bbox_preds", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "guided_anchor_list", "=", "[", "\n", "guided_anchors", "[", "img_id", "]", "[", "i", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "loc_mask_list", "=", "[", "\n", "loc_masks", "[", "img_id", "]", "[", "i", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "img_shape", "=", "img_metas", "[", "img_id", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_metas", "[", "img_id", "]", "[", "'scale_factor'", "]", "\n", "proposals", "=", "self", ".", "get_bboxes_single", "(", "cls_score_list", ",", "bbox_pred_list", ",", "\n", "guided_anchor_list", ",", "\n", "loc_mask_list", ",", "img_shape", ",", "\n", "scale_factor", ",", "cfg", ",", "rescale", ")", "\n", "result_list", ".", "append", "(", "proposals", ")", "\n", "", "return", "result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.guided_anchor_head.GuidedAnchorHead.get_bboxes_single": [[548, 610], ["zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmdet.core.multiclass_nms", "len", "len", "len", "cls_score.permute().reshape.permute().reshape.permute().reshape", "bbox_pred.unsqueeze.unsqueeze.permute().reshape", "cfg.get", "mmdet.core.delta2bbox", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mask.sum", "cls_score.permute().reshape.permute().reshape.sigmoid", "cls_score.permute().reshape.permute().reshape.softmax", "scores.unsqueeze.unsqueeze.dim", "anchors.unsqueeze.unsqueeze.unsqueeze", "scores.unsqueeze.unsqueeze.unsqueeze", "bbox_pred.unsqueeze.unsqueeze.unsqueeze", "max_scores.topk", "cls_score.permute().reshape.permute().reshape.size", "bbox_pred.unsqueeze.unsqueeze.size", "cls_score.permute().reshape.permute().reshape.permute", "bbox_pred.unsqueeze.unsqueeze.permute", "scores.unsqueeze.unsqueeze.max", "scores[].max"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.post_processing.bbox_nms.multiclass_nms", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.delta2bbox"], ["", "def", "get_bboxes_single", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "mlvl_anchors", ",", "\n", "mlvl_masks", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "==", "len", "(", "mlvl_anchors", ")", "\n", "mlvl_bboxes", "=", "[", "]", "\n", "mlvl_scores", "=", "[", "]", "\n", "for", "cls_score", ",", "bbox_pred", ",", "anchors", ",", "mask", "in", "zip", "(", "cls_scores", ",", "bbox_preds", ",", "\n", "mlvl_anchors", ",", "\n", "mlvl_masks", ")", ":", "\n", "            ", "assert", "cls_score", ".", "size", "(", ")", "[", "-", "2", ":", "]", "==", "bbox_pred", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "# if no location is kept, end.", "\n", "if", "mask", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "# reshape scores and bbox_pred", "\n", "", "cls_score", "=", "cls_score", ".", "permute", "(", "1", ",", "2", ",", "\n", "0", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "cls_out_channels", ")", "\n", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "                ", "scores", "=", "cls_score", ".", "sigmoid", "(", ")", "\n", "", "else", ":", "\n", "                ", "scores", "=", "cls_score", ".", "softmax", "(", "-", "1", ")", "\n", "", "bbox_pred", "=", "bbox_pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "# filter scores, bbox_pred w.r.t. mask.", "\n", "# anchors are filtered in get_anchors() beforehand.", "\n", "scores", "=", "scores", "[", "mask", ",", ":", "]", "\n", "bbox_pred", "=", "bbox_pred", "[", "mask", ",", ":", "]", "\n", "if", "scores", ".", "dim", "(", ")", "==", "0", ":", "\n", "                ", "anchors", "=", "anchors", ".", "unsqueeze", "(", "0", ")", "\n", "scores", "=", "scores", ".", "unsqueeze", "(", "0", ")", "\n", "bbox_pred", "=", "bbox_pred", ".", "unsqueeze", "(", "0", ")", "\n", "# filter anchors, bbox_pred, scores w.r.t. scores", "\n", "", "nms_pre", "=", "cfg", ".", "get", "(", "'nms_pre'", ",", "-", "1", ")", "\n", "if", "nms_pre", ">", "0", "and", "scores", ".", "shape", "[", "0", "]", ">", "nms_pre", ":", "\n", "                ", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "                    ", "max_scores", ",", "_", "=", "scores", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "max_scores", ",", "_", "=", "scores", "[", ":", ",", "1", ":", "]", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "_", ",", "topk_inds", "=", "max_scores", ".", "topk", "(", "nms_pre", ")", "\n", "anchors", "=", "anchors", "[", "topk_inds", ",", ":", "]", "\n", "bbox_pred", "=", "bbox_pred", "[", "topk_inds", ",", ":", "]", "\n", "scores", "=", "scores", "[", "topk_inds", ",", ":", "]", "\n", "", "bboxes", "=", "delta2bbox", "(", "anchors", ",", "bbox_pred", ",", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "img_shape", ")", "\n", "mlvl_bboxes", ".", "append", "(", "bboxes", ")", "\n", "mlvl_scores", ".", "append", "(", "scores", ")", "\n", "", "mlvl_bboxes", "=", "torch", ".", "cat", "(", "mlvl_bboxes", ")", "\n", "if", "rescale", ":", "\n", "            ", "mlvl_bboxes", "/=", "mlvl_bboxes", ".", "new_tensor", "(", "scale_factor", ")", "\n", "", "mlvl_scores", "=", "torch", ".", "cat", "(", "mlvl_scores", ")", "\n", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "            ", "padding", "=", "mlvl_scores", ".", "new_zeros", "(", "mlvl_scores", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "mlvl_scores", "=", "torch", ".", "cat", "(", "[", "padding", ",", "mlvl_scores", "]", ",", "dim", "=", "1", ")", "\n", "# multi class NMS", "\n", "", "det_bboxes", ",", "det_labels", "=", "multiclass_nms", "(", "mlvl_bboxes", ",", "mlvl_scores", ",", "\n", "cfg", ".", "score_thr", ",", "cfg", ".", "nms", ",", "\n", "cfg", ".", "max_per_img", ")", "\n", "return", "det_bboxes", ",", "det_labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.fcos_head.FCOSHead.__init__": [[16, 54], ["dict", "dict", "dict", "dict", "torch.Module.__init__", "builder.build_loss", "builder.build_loss", "builder.build_loss", "fcos_head.FCOSHead._init_layers"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_loss", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_loss", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_loss", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead._init_layers"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_classes", ",", "\n", "in_channels", ",", "\n", "feat_channels", "=", "256", ",", "\n", "stacked_convs", "=", "4", ",", "\n", "strides", "=", "(", "4", ",", "8", ",", "16", ",", "32", ",", "64", ")", ",", "\n", "regress_ranges", "=", "(", "(", "-", "1", ",", "64", ")", ",", "(", "64", ",", "128", ")", ",", "(", "128", ",", "256", ")", ",", "(", "256", ",", "512", ")", ",", "\n", "(", "512", ",", "INF", ")", ")", ",", "\n", "loss_cls", "=", "dict", "(", "\n", "type", "=", "'FocalLoss'", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "gamma", "=", "2.0", ",", "\n", "alpha", "=", "0.25", ",", "\n", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_bbox", "=", "dict", "(", "type", "=", "'IoULoss'", ",", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_centerness", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "loss_weight", "=", "1.0", ")", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'GN'", ",", "num_groups", "=", "32", ",", "requires_grad", "=", "True", ")", ")", ":", "\n", "        ", "super", "(", "FCOSHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "cls_out_channels", "=", "num_classes", "-", "1", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "feat_channels", "=", "feat_channels", "\n", "self", ".", "stacked_convs", "=", "stacked_convs", "\n", "self", ".", "strides", "=", "strides", "\n", "self", ".", "regress_ranges", "=", "regress_ranges", "\n", "self", ".", "loss_cls", "=", "build_loss", "(", "loss_cls", ")", "\n", "self", ".", "loss_bbox", "=", "build_loss", "(", "loss_bbox", ")", "\n", "self", ".", "loss_centerness", "=", "build_loss", "(", "loss_centerness", ")", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n", "self", ".", "_init_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.fcos_head.FCOSHead._init_layers": [[55, 86], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "fcos_head.FCOSHead.cls_convs.append", "fcos_head.FCOSHead.reg_convs.append", "utils.ConvModule", "utils.ConvModule", "utils.Scale"], "methods", ["None"], ["", "def", "_init_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "cls_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "reg_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "stacked_convs", ")", ":", "\n", "            ", "chn", "=", "self", ".", "in_channels", "if", "i", "==", "0", "else", "self", ".", "feat_channels", "\n", "self", ".", "cls_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "bias", "=", "self", ".", "norm_cfg", "is", "None", ")", ")", "\n", "self", ".", "reg_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "bias", "=", "self", ".", "norm_cfg", "is", "None", ")", ")", "\n", "", "self", ".", "fcos_cls", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "feat_channels", ",", "self", ".", "cls_out_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "fcos_reg", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "4", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "fcos_centerness", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "1", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "scales", "=", "nn", ".", "ModuleList", "(", "[", "Scale", "(", "1.0", ")", "for", "_", "in", "self", ".", "strides", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.fcos_head.FCOSHead.init_weights": [[87, 96], ["utils.bias_init_with_prob", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.bias_init_with_prob", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "cls_convs", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "for", "m", "in", "self", ".", "reg_convs", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "bias_cls", "=", "bias_init_with_prob", "(", "0.01", ")", "\n", "normal_init", "(", "self", ".", "fcos_cls", ",", "std", "=", "0.01", ",", "bias", "=", "bias_cls", ")", "\n", "normal_init", "(", "self", ".", "fcos_reg", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "fcos_centerness", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.fcos_head.FCOSHead.forward": [[97, 99], ["mmdet.core.multi_apply"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.misc.multi_apply"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "return", "multi_apply", "(", "self", ".", "forward_single", ",", "feats", ",", "self", ".", "scales", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.fcos_head.FCOSHead.forward_single": [[100, 115], ["fcos_head.FCOSHead.fcos_cls", "fcos_head.FCOSHead.fcos_centerness", "scale().float().exp", "cls_layer", "reg_layer", "scale().float", "scale", "fcos_head.FCOSHead.fcos_reg"], "methods", ["None"], ["", "def", "forward_single", "(", "self", ",", "x", ",", "scale", ")", ":", "\n", "        ", "cls_feat", "=", "x", "\n", "reg_feat", "=", "x", "\n", "\n", "for", "cls_layer", "in", "self", ".", "cls_convs", ":", "\n", "            ", "cls_feat", "=", "cls_layer", "(", "cls_feat", ")", "\n", "", "cls_score", "=", "self", ".", "fcos_cls", "(", "cls_feat", ")", "\n", "centerness", "=", "self", ".", "fcos_centerness", "(", "cls_feat", ")", "\n", "\n", "for", "reg_layer", "in", "self", ".", "reg_convs", ":", "\n", "            ", "reg_feat", "=", "reg_layer", "(", "reg_feat", ")", "\n", "# scale the bbox_pred of different level", "\n", "# float to avoid overflow when enabling FP16", "\n", "", "bbox_pred", "=", "scale", "(", "self", ".", "fcos_reg", "(", "reg_feat", ")", ")", ".", "float", "(", ")", ".", "exp", "(", ")", "\n", "return", "cls_score", ",", "bbox_pred", ",", "centerness", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.fcos_head.FCOSHead.loss": [[116, 188], ["mmdet.core.force_fp32", "fcos_head.FCOSHead.get_points", "fcos_head.FCOSHead.fcos_target", "cls_scores[].size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.nonzero().reshape", "torch.cat.nonzero().reshape", "len", "fcos_head.FCOSHead.loss_cls", "dict", "len", "len", "len", "cls_score.permute().reshape", "bbox_pred.permute().reshape", "centerness.permute().reshape", "fcos_head.FCOSHead.centerness_target", "mmdet.core.distance2bbox", "mmdet.core.distance2bbox", "fcos_head.FCOSHead.loss_bbox", "fcos_head.FCOSHead.loss_centerness", "pos_bbox_preds.sum", "pos_centerness.sum", "featmap.size", "points.repeat", "torch.cat.nonzero", "torch.cat.nonzero", "cls_score.permute", "bbox_pred.permute", "centerness.permute", "fcos_head.FCOSHead.sum"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.fcos_head.FCOSHead.get_points", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.fcos_head.FCOSHead.fcos_target", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.fcos_head.FCOSHead.centerness_target", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.distance2bbox", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.distance2bbox"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'cls_scores'", ",", "'bbox_preds'", ",", "'centernesses'", ")", ")", "\n", "def", "loss", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "centernesses", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "==", "len", "(", "centernesses", ")", "\n", "featmap_sizes", "=", "[", "featmap", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "featmap", "in", "cls_scores", "]", "\n", "all_level_points", "=", "self", ".", "get_points", "(", "featmap_sizes", ",", "bbox_preds", "[", "0", "]", ".", "dtype", ",", "\n", "bbox_preds", "[", "0", "]", ".", "device", ")", "\n", "labels", ",", "bbox_targets", "=", "self", ".", "fcos_target", "(", "all_level_points", ",", "gt_bboxes", ",", "\n", "gt_labels", ")", "\n", "\n", "num_imgs", "=", "cls_scores", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "# flatten cls_scores, bbox_preds and centerness", "\n", "flatten_cls_scores", "=", "[", "\n", "cls_score", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "cls_out_channels", ")", "\n", "for", "cls_score", "in", "cls_scores", "\n", "]", "\n", "flatten_bbox_preds", "=", "[", "\n", "bbox_pred", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "for", "bbox_pred", "in", "bbox_preds", "\n", "]", "\n", "flatten_centerness", "=", "[", "\n", "centerness", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "for", "centerness", "in", "centernesses", "\n", "]", "\n", "flatten_cls_scores", "=", "torch", ".", "cat", "(", "flatten_cls_scores", ")", "\n", "flatten_bbox_preds", "=", "torch", ".", "cat", "(", "flatten_bbox_preds", ")", "\n", "flatten_centerness", "=", "torch", ".", "cat", "(", "flatten_centerness", ")", "\n", "flatten_labels", "=", "torch", ".", "cat", "(", "labels", ")", "\n", "flatten_bbox_targets", "=", "torch", ".", "cat", "(", "bbox_targets", ")", "\n", "# repeat points to align with bbox_preds", "\n", "flatten_points", "=", "torch", ".", "cat", "(", "\n", "[", "points", ".", "repeat", "(", "num_imgs", ",", "1", ")", "for", "points", "in", "all_level_points", "]", ")", "\n", "\n", "pos_inds", "=", "flatten_labels", ".", "nonzero", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "num_pos", "=", "len", "(", "pos_inds", ")", "\n", "loss_cls", "=", "self", ".", "loss_cls", "(", "\n", "flatten_cls_scores", ",", "flatten_labels", ",", "\n", "avg_factor", "=", "num_pos", "+", "num_imgs", ")", "# avoid num_pos is 0", "\n", "\n", "pos_bbox_preds", "=", "flatten_bbox_preds", "[", "pos_inds", "]", "\n", "pos_centerness", "=", "flatten_centerness", "[", "pos_inds", "]", "\n", "\n", "if", "num_pos", ">", "0", ":", "\n", "            ", "pos_bbox_targets", "=", "flatten_bbox_targets", "[", "pos_inds", "]", "\n", "pos_centerness_targets", "=", "self", ".", "centerness_target", "(", "pos_bbox_targets", ")", "\n", "pos_points", "=", "flatten_points", "[", "pos_inds", "]", "\n", "pos_decoded_bbox_preds", "=", "distance2bbox", "(", "pos_points", ",", "pos_bbox_preds", ")", "\n", "pos_decoded_target_preds", "=", "distance2bbox", "(", "pos_points", ",", "\n", "pos_bbox_targets", ")", "\n", "# centerness weighted iou loss", "\n", "loss_bbox", "=", "self", ".", "loss_bbox", "(", "\n", "pos_decoded_bbox_preds", ",", "\n", "pos_decoded_target_preds", ",", "\n", "weight", "=", "pos_centerness_targets", ",", "\n", "avg_factor", "=", "pos_centerness_targets", ".", "sum", "(", ")", ")", "\n", "loss_centerness", "=", "self", ".", "loss_centerness", "(", "pos_centerness", ",", "\n", "pos_centerness_targets", ")", "\n", "", "else", ":", "\n", "            ", "loss_bbox", "=", "pos_bbox_preds", ".", "sum", "(", ")", "\n", "loss_centerness", "=", "pos_centerness", ".", "sum", "(", ")", "\n", "\n", "", "return", "dict", "(", "\n", "loss_cls", "=", "loss_cls", ",", "\n", "loss_bbox", "=", "loss_bbox", ",", "\n", "loss_centerness", "=", "loss_centerness", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.fcos_head.FCOSHead.get_bboxes": [[189, 222], ["mmdet.core.force_fp32", "len", "fcos_head.FCOSHead.get_points", "range", "len", "len", "len", "fcos_head.FCOSHead.get_bboxes_single", "result_list.append", "featmap.size", "[].detach", "[].detach", "[].detach", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.fcos_head.FCOSHead.get_points", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.get_bboxes_single"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'cls_scores'", ",", "'bbox_preds'", ",", "'centernesses'", ")", ")", "\n", "def", "get_bboxes", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "centernesses", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "rescale", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "\n", "num_levels", "=", "len", "(", "cls_scores", ")", "\n", "\n", "featmap_sizes", "=", "[", "featmap", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "featmap", "in", "cls_scores", "]", "\n", "mlvl_points", "=", "self", ".", "get_points", "(", "featmap_sizes", ",", "bbox_preds", "[", "0", "]", ".", "dtype", ",", "\n", "bbox_preds", "[", "0", "]", ".", "device", ")", "\n", "result_list", "=", "[", "]", "\n", "for", "img_id", "in", "range", "(", "len", "(", "img_metas", ")", ")", ":", "\n", "            ", "cls_score_list", "=", "[", "\n", "cls_scores", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "bbox_pred_list", "=", "[", "\n", "bbox_preds", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "centerness_pred_list", "=", "[", "\n", "centernesses", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "img_shape", "=", "img_metas", "[", "img_id", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_metas", "[", "img_id", "]", "[", "'scale_factor'", "]", "\n", "det_bboxes", "=", "self", ".", "get_bboxes_single", "(", "cls_score_list", ",", "bbox_pred_list", ",", "\n", "centerness_pred_list", ",", "\n", "mlvl_points", ",", "img_shape", ",", "\n", "scale_factor", ",", "cfg", ",", "rescale", ")", "\n", "result_list", ".", "append", "(", "det_bboxes", ")", "\n", "", "return", "result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.fcos_head.FCOSHead.get_bboxes_single": [[223, 271], ["zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmdet.core.multiclass_nms", "len", "len", "len", "cls_score.permute().reshape().sigmoid", "centerness.permute().reshape().sigmoid.permute().reshape().sigmoid.permute().reshape().sigmoid", "bbox_pred.permute().reshape.permute().reshape.permute().reshape", "cfg.get", "mmdet.core.distance2bbox", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.new_tensor", "torch.cat.new_tensor", "max_scores.topk", "cls_score.size", "bbox_pred.permute().reshape.permute().reshape.size", "cls_score.permute().reshape", "centerness.permute().reshape().sigmoid.permute().reshape().sigmoid.permute().reshape", "bbox_pred.permute().reshape.permute().reshape.permute", "cls_score.permute", "centerness.permute().reshape().sigmoid.permute().reshape().sigmoid.permute"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.post_processing.bbox_nms.multiclass_nms", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.distance2bbox"], ["", "def", "get_bboxes_single", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "centernesses", ",", "\n", "mlvl_points", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "==", "len", "(", "mlvl_points", ")", "\n", "mlvl_bboxes", "=", "[", "]", "\n", "mlvl_scores", "=", "[", "]", "\n", "mlvl_centerness", "=", "[", "]", "\n", "for", "cls_score", ",", "bbox_pred", ",", "centerness", ",", "points", "in", "zip", "(", "\n", "cls_scores", ",", "bbox_preds", ",", "centernesses", ",", "mlvl_points", ")", ":", "\n", "            ", "assert", "cls_score", ".", "size", "(", ")", "[", "-", "2", ":", "]", "==", "bbox_pred", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "scores", "=", "cls_score", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "\n", "-", "1", ",", "self", ".", "cls_out_channels", ")", ".", "sigmoid", "(", ")", "\n", "centerness", "=", "centerness", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "-", "1", ")", ".", "sigmoid", "(", ")", "\n", "\n", "bbox_pred", "=", "bbox_pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "nms_pre", "=", "cfg", ".", "get", "(", "'nms_pre'", ",", "-", "1", ")", "\n", "if", "nms_pre", ">", "0", "and", "scores", ".", "shape", "[", "0", "]", ">", "nms_pre", ":", "\n", "                ", "max_scores", ",", "_", "=", "(", "scores", "*", "centerness", "[", ":", ",", "None", "]", ")", ".", "max", "(", "dim", "=", "1", ")", "\n", "_", ",", "topk_inds", "=", "max_scores", ".", "topk", "(", "nms_pre", ")", "\n", "points", "=", "points", "[", "topk_inds", ",", ":", "]", "\n", "bbox_pred", "=", "bbox_pred", "[", "topk_inds", ",", ":", "]", "\n", "scores", "=", "scores", "[", "topk_inds", ",", ":", "]", "\n", "centerness", "=", "centerness", "[", "topk_inds", "]", "\n", "", "bboxes", "=", "distance2bbox", "(", "points", ",", "bbox_pred", ",", "max_shape", "=", "img_shape", ")", "\n", "mlvl_bboxes", ".", "append", "(", "bboxes", ")", "\n", "mlvl_scores", ".", "append", "(", "scores", ")", "\n", "mlvl_centerness", ".", "append", "(", "centerness", ")", "\n", "", "mlvl_bboxes", "=", "torch", ".", "cat", "(", "mlvl_bboxes", ")", "\n", "if", "rescale", ":", "\n", "            ", "mlvl_bboxes", "/=", "mlvl_bboxes", ".", "new_tensor", "(", "scale_factor", ")", "\n", "", "mlvl_scores", "=", "torch", ".", "cat", "(", "mlvl_scores", ")", "\n", "padding", "=", "mlvl_scores", ".", "new_zeros", "(", "mlvl_scores", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "mlvl_scores", "=", "torch", ".", "cat", "(", "[", "padding", ",", "mlvl_scores", "]", ",", "dim", "=", "1", ")", "\n", "mlvl_centerness", "=", "torch", ".", "cat", "(", "mlvl_centerness", ")", "\n", "det_bboxes", ",", "det_labels", "=", "multiclass_nms", "(", "\n", "mlvl_bboxes", ",", "\n", "mlvl_scores", ",", "\n", "cfg", ".", "score_thr", ",", "\n", "cfg", ".", "nms", ",", "\n", "cfg", ".", "max_per_img", ",", "\n", "score_factors", "=", "mlvl_centerness", ")", "\n", "return", "det_bboxes", ",", "det_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.fcos_head.FCOSHead.get_points": [[272, 289], ["range", "len", "mlvl_points.append", "fcos_head.FCOSHead.get_points_single"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.fcos_head.FCOSHead.get_points_single"], ["", "def", "get_points", "(", "self", ",", "featmap_sizes", ",", "dtype", ",", "device", ")", ":", "\n", "        ", "\"\"\"Get points according to feature map sizes.\n\n        Args:\n            featmap_sizes (list[tuple]): Multi-level feature map sizes.\n            dtype (torch.dtype): Type of points.\n            device (torch.device): Device of points.\n\n        Returns:\n            tuple: points of each image.\n        \"\"\"", "\n", "mlvl_points", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "featmap_sizes", ")", ")", ":", "\n", "            ", "mlvl_points", ".", "append", "(", "\n", "self", ".", "get_points_single", "(", "featmap_sizes", "[", "i", "]", ",", "self", ".", "strides", "[", "i", "]", ",", "\n", "dtype", ",", "device", ")", ")", "\n", "", "return", "mlvl_points", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.fcos_head.FCOSHead.get_points_single": [[290, 300], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "x.reshape", "y.reshape"], "methods", ["None"], ["", "def", "get_points_single", "(", "self", ",", "featmap_size", ",", "stride", ",", "dtype", ",", "device", ")", ":", "\n", "        ", "h", ",", "w", "=", "featmap_size", "\n", "x_range", "=", "torch", ".", "arange", "(", "\n", "0", ",", "w", "*", "stride", ",", "stride", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "y_range", "=", "torch", ".", "arange", "(", "\n", "0", ",", "h", "*", "stride", ",", "stride", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "y", ",", "x", "=", "torch", ".", "meshgrid", "(", "y_range", ",", "x_range", ")", "\n", "points", "=", "torch", ".", "stack", "(", "\n", "(", "x", ".", "reshape", "(", "-", "1", ")", ",", "y", ".", "reshape", "(", "-", "1", ")", ")", ",", "dim", "=", "-", "1", ")", "+", "stride", "//", "2", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.fcos_head.FCOSHead.fcos_target": [[301, 338], ["len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmdet.core.multi_apply", "range", "len", "len", "[].expand_as", "center.size", "labels.split", "bbox_targets.split", "concat_lvl_labels.append", "concat_lvl_bbox_targets.append", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "points[].new_tensor"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.misc.multi_apply"], ["", "def", "fcos_target", "(", "self", ",", "points", ",", "gt_bboxes_list", ",", "gt_labels_list", ")", ":", "\n", "        ", "assert", "len", "(", "points", ")", "==", "len", "(", "self", ".", "regress_ranges", ")", "\n", "num_levels", "=", "len", "(", "points", ")", "\n", "# expand regress ranges to align with points", "\n", "expanded_regress_ranges", "=", "[", "\n", "points", "[", "i", "]", ".", "new_tensor", "(", "self", ".", "regress_ranges", "[", "i", "]", ")", "[", "None", "]", ".", "expand_as", "(", "\n", "points", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "# concat all levels points and regress ranges", "\n", "concat_regress_ranges", "=", "torch", ".", "cat", "(", "expanded_regress_ranges", ",", "dim", "=", "0", ")", "\n", "concat_points", "=", "torch", ".", "cat", "(", "points", ",", "dim", "=", "0", ")", "\n", "# get labels and bbox_targets of each image", "\n", "labels_list", ",", "bbox_targets_list", "=", "multi_apply", "(", "\n", "self", ".", "fcos_target_single", ",", "\n", "gt_bboxes_list", ",", "\n", "gt_labels_list", ",", "\n", "points", "=", "concat_points", ",", "\n", "regress_ranges", "=", "concat_regress_ranges", ")", "\n", "\n", "# split to per img, per level", "\n", "num_points", "=", "[", "center", ".", "size", "(", "0", ")", "for", "center", "in", "points", "]", "\n", "labels_list", "=", "[", "labels", ".", "split", "(", "num_points", ",", "0", ")", "for", "labels", "in", "labels_list", "]", "\n", "bbox_targets_list", "=", "[", "\n", "bbox_targets", ".", "split", "(", "num_points", ",", "0", ")", "\n", "for", "bbox_targets", "in", "bbox_targets_list", "\n", "]", "\n", "\n", "# concat per level image", "\n", "concat_lvl_labels", "=", "[", "]", "\n", "concat_lvl_bbox_targets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "concat_lvl_labels", ".", "append", "(", "\n", "torch", ".", "cat", "(", "[", "labels", "[", "i", "]", "for", "labels", "in", "labels_list", "]", ")", ")", "\n", "concat_lvl_bbox_targets", ".", "append", "(", "\n", "torch", ".", "cat", "(", "\n", "[", "bbox_targets", "[", "i", "]", "for", "bbox_targets", "in", "bbox_targets_list", "]", ")", ")", "\n", "", "return", "concat_lvl_labels", ",", "concat_lvl_bbox_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.fcos_head.FCOSHead.fcos_target_single": [[339, 384], ["points.size", "gt_labels.size", "areas[].repeat", "regress_ranges[].expand", "gt_bboxes[].expand", "xs[].expand", "ys[].expand", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "areas[].repeat.min", "torch.stack.max", "torch.stack.max", "gt_labels.new_zeros", "gt_bboxes[].expand.new_zeros", "torch.stack.min", "torch.stack.min", "range"], "methods", ["None"], ["", "def", "fcos_target_single", "(", "self", ",", "gt_bboxes", ",", "gt_labels", ",", "points", ",", "regress_ranges", ")", ":", "\n", "        ", "num_points", "=", "points", ".", "size", "(", "0", ")", "\n", "num_gts", "=", "gt_labels", ".", "size", "(", "0", ")", "\n", "if", "num_gts", "==", "0", ":", "\n", "            ", "return", "gt_labels", ".", "new_zeros", "(", "num_points", ")", ",", "gt_bboxes", ".", "new_zeros", "(", "(", "num_points", ",", "4", ")", ")", "\n", "\n", "", "areas", "=", "(", "gt_bboxes", "[", ":", ",", "2", "]", "-", "gt_bboxes", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "gt_bboxes", "[", ":", ",", "3", "]", "-", "gt_bboxes", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "# TODO: figure out why these two are different", "\n", "# areas = areas[None].expand(num_points, num_gts)", "\n", "areas", "=", "areas", "[", "None", "]", ".", "repeat", "(", "num_points", ",", "1", ")", "\n", "regress_ranges", "=", "regress_ranges", "[", ":", ",", "None", ",", ":", "]", ".", "expand", "(", "\n", "num_points", ",", "num_gts", ",", "2", ")", "\n", "gt_bboxes", "=", "gt_bboxes", "[", "None", "]", ".", "expand", "(", "num_points", ",", "num_gts", ",", "4", ")", "\n", "xs", ",", "ys", "=", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", "\n", "xs", "=", "xs", "[", ":", ",", "None", "]", ".", "expand", "(", "num_points", ",", "num_gts", ")", "\n", "ys", "=", "ys", "[", ":", ",", "None", "]", ".", "expand", "(", "num_points", ",", "num_gts", ")", "\n", "\n", "left", "=", "xs", "-", "gt_bboxes", "[", "...", ",", "0", "]", "\n", "right", "=", "gt_bboxes", "[", "...", ",", "2", "]", "-", "xs", "\n", "top", "=", "ys", "-", "gt_bboxes", "[", "...", ",", "1", "]", "\n", "bottom", "=", "gt_bboxes", "[", "...", ",", "3", "]", "-", "ys", "\n", "bbox_targets", "=", "torch", ".", "stack", "(", "(", "left", ",", "top", ",", "right", ",", "bottom", ")", ",", "-", "1", ")", "\n", "\n", "# condition1: inside a gt bbox", "\n", "inside_gt_bbox_mask", "=", "bbox_targets", ".", "min", "(", "-", "1", ")", "[", "0", "]", ">", "0", "\n", "\n", "# condition2: limit the regression range for each location", "\n", "max_regress_distance", "=", "bbox_targets", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "inside_regress_range", "=", "(", "\n", "max_regress_distance", ">=", "regress_ranges", "[", "...", ",", "0", "]", ")", "&", "(", "\n", "max_regress_distance", "<=", "regress_ranges", "[", "...", ",", "1", "]", ")", "\n", "\n", "# if there are still more than one objects for a location,", "\n", "# we choose the one with minimal area", "\n", "areas", "[", "inside_gt_bbox_mask", "==", "0", "]", "=", "INF", "\n", "areas", "[", "inside_regress_range", "==", "0", "]", "=", "INF", "\n", "min_area", ",", "min_area_inds", "=", "areas", ".", "min", "(", "dim", "=", "1", ")", "\n", "\n", "labels", "=", "gt_labels", "[", "min_area_inds", "]", "\n", "labels", "[", "min_area", "==", "INF", "]", "=", "0", "\n", "bbox_targets", "=", "bbox_targets", "[", "range", "(", "num_points", ")", ",", "min_area_inds", "]", "\n", "\n", "return", "labels", ",", "bbox_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.fcos_head.FCOSHead.centerness_target": [[385, 393], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "left_right.min", "left_right.max", "top_bottom.min", "top_bottom.max"], "methods", ["None"], ["", "def", "centerness_target", "(", "self", ",", "pos_bbox_targets", ")", ":", "\n", "# only calculate pos centerness targets, otherwise there may be nan", "\n", "        ", "left_right", "=", "pos_bbox_targets", "[", ":", ",", "[", "0", ",", "2", "]", "]", "\n", "top_bottom", "=", "pos_bbox_targets", "[", ":", ",", "[", "1", ",", "3", "]", "]", "\n", "centerness_targets", "=", "(", "\n", "left_right", ".", "min", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "/", "left_right", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", ")", "*", "(", "\n", "top_bottom", ".", "min", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "/", "top_bottom", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", ")", "\n", "return", "torch", ".", "sqrt", "(", "centerness_targets", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.retina_head.RetinaHead.__init__": [[13, 32], ["numpy.array", "anchor_head.AnchorHead.__init__", "range"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_classes", ",", "\n", "in_channels", ",", "\n", "stacked_convs", "=", "4", ",", "\n", "octave_base_scale", "=", "4", ",", "\n", "scales_per_octave", "=", "3", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "stacked_convs", "=", "stacked_convs", "\n", "self", ".", "octave_base_scale", "=", "octave_base_scale", "\n", "self", ".", "scales_per_octave", "=", "scales_per_octave", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "octave_scales", "=", "np", ".", "array", "(", "\n", "[", "2", "**", "(", "i", "/", "scales_per_octave", ")", "for", "i", "in", "range", "(", "scales_per_octave", ")", "]", ")", "\n", "anchor_scales", "=", "octave_scales", "*", "octave_base_scale", "\n", "super", "(", "RetinaHead", ",", "self", ")", ".", "__init__", "(", "\n", "num_classes", ",", "in_channels", ",", "anchor_scales", "=", "anchor_scales", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.retina_head.RetinaHead._init_layers": [[33, 64], ["torch.ReLU", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv2d", "torch.Conv2d", "retina_head.RetinaHead.cls_convs.append", "retina_head.RetinaHead.reg_convs.append", "utils.ConvModule", "utils.ConvModule"], "methods", ["None"], ["", "def", "_init_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "cls_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "reg_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "stacked_convs", ")", ":", "\n", "            ", "chn", "=", "self", ".", "in_channels", "if", "i", "==", "0", "else", "self", ".", "feat_channels", "\n", "self", ".", "cls_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "self", ".", "reg_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "", "self", ".", "retina_cls", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "feat_channels", ",", "\n", "self", ".", "num_anchors", "*", "self", ".", "cls_out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "retina_reg", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "feat_channels", ",", "self", ".", "num_anchors", "*", "4", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.retina_head.RetinaHead.init_weights": [[65, 73], ["utils.bias_init_with_prob", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.bias_init_with_prob", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "cls_convs", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "for", "m", "in", "self", ".", "reg_convs", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "bias_cls", "=", "bias_init_with_prob", "(", "0.01", ")", "\n", "normal_init", "(", "self", ".", "retina_cls", ",", "std", "=", "0.01", ",", "bias", "=", "bias_cls", ")", "\n", "normal_init", "(", "self", ".", "retina_reg", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.retina_head.RetinaHead.forward_single": [[74, 84], ["retina_head.RetinaHead.retina_cls", "retina_head.RetinaHead.retina_reg", "cls_conv", "reg_conv"], "methods", ["None"], ["", "def", "forward_single", "(", "self", ",", "x", ")", ":", "\n", "        ", "cls_feat", "=", "x", "\n", "reg_feat", "=", "x", "\n", "for", "cls_conv", "in", "self", ".", "cls_convs", ":", "\n", "            ", "cls_feat", "=", "cls_conv", "(", "cls_feat", ")", "\n", "", "for", "reg_conv", "in", "self", ".", "reg_convs", ":", "\n", "            ", "reg_feat", "=", "reg_conv", "(", "reg_feat", ")", "\n", "", "cls_score", "=", "self", ".", "retina_cls", "(", "cls_feat", ")", "\n", "bbox_pred", "=", "self", ".", "retina_reg", "(", "reg_feat", ")", "\n", "return", "cls_score", ",", "bbox_pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.rpn_head.RPNHead.__init__": [[15, 17], ["anchor_head.AnchorHead.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RPNHead", ",", "self", ")", ".", "__init__", "(", "2", ",", "in_channels", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.rpn_head.RPNHead._init_layers": [[18, 24], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "_init_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "rpn_conv", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "self", ".", "feat_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "rpn_cls", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "\n", "self", ".", "num_anchors", "*", "self", ".", "cls_out_channels", ",", "1", ")", "\n", "self", ".", "rpn_reg", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "self", ".", "num_anchors", "*", "4", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.rpn_head.RPNHead.init_weights": [[25, 29], ["mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "normal_init", "(", "self", ".", "rpn_conv", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "rpn_cls", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "rpn_reg", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.rpn_head.RPNHead.forward_single": [[30, 36], ["rpn_head.RPNHead.rpn_conv", "torch.relu", "torch.relu", "torch.relu", "rpn_head.RPNHead.rpn_cls", "rpn_head.RPNHead.rpn_reg"], "methods", ["None"], ["", "def", "forward_single", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "rpn_conv", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "rpn_cls_score", "=", "self", ".", "rpn_cls", "(", "x", ")", "\n", "rpn_bbox_pred", "=", "self", ".", "rpn_reg", "(", "x", ")", "\n", "return", "rpn_cls_score", ",", "rpn_bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.rpn_head.RPNHead.loss": [[37, 54], ["super().loss", "dict"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss"], ["", "def", "loss", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "gt_bboxes", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "        ", "losses", "=", "super", "(", "RPNHead", ",", "self", ")", ".", "loss", "(", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "gt_bboxes", ",", "\n", "None", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "return", "dict", "(", "\n", "loss_rpn_cls", "=", "losses", "[", "'loss_cls'", "]", ",", "loss_rpn_bbox", "=", "losses", "[", "'loss_bbox'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.rpn_head.RPNHead.get_bboxes_single": [[55, 105], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "rpn_cls_score.reshape.reshape.permute", "rpn_bbox_pred.permute().reshape.permute().reshape.permute().reshape", "mmdet.core.delta2bbox", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmdet.ops.nms", "mlvl_proposals.append", "mmdet.ops.nms", "min", "rpn_cls_score.reshape.sigmoid.topk", "rpn_cls_score.reshape.reshape.reshape", "rpn_cls_score.reshape.reshape.sigmoid", "rpn_cls_score.reshape.reshape.reshape", "rpn_cls_score.reshape.sigmoid.topk", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "rpn_cls_score.reshape.reshape.size", "rpn_bbox_pred.permute().reshape.permute().reshape.size", "rpn_cls_score.reshape.reshape.softmax", "rpn_bbox_pred.permute().reshape.permute().reshape.permute", "rpn_cls_score.reshape.sigmoid.unsqueeze", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.delta2bbox", "home.repos.pwc.inspect_result.twangnh_SimCal.nms.nms_wrapper.nms", "home.repos.pwc.inspect_result.twangnh_SimCal.nms.nms_wrapper.nms"], ["", "def", "get_bboxes_single", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "mlvl_anchors", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "mlvl_proposals", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "cls_scores", ")", ")", ":", "\n", "            ", "rpn_cls_score", "=", "cls_scores", "[", "idx", "]", "\n", "rpn_bbox_pred", "=", "bbox_preds", "[", "idx", "]", "\n", "assert", "rpn_cls_score", ".", "size", "(", ")", "[", "-", "2", ":", "]", "==", "rpn_bbox_pred", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "anchors", "=", "mlvl_anchors", "[", "idx", "]", "\n", "rpn_cls_score", "=", "rpn_cls_score", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "                ", "rpn_cls_score", "=", "rpn_cls_score", ".", "reshape", "(", "-", "1", ")", "\n", "scores", "=", "rpn_cls_score", ".", "sigmoid", "(", ")", "\n", "", "else", ":", "\n", "                ", "rpn_cls_score", "=", "rpn_cls_score", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "scores", "=", "rpn_cls_score", ".", "softmax", "(", "dim", "=", "1", ")", "[", ":", ",", "1", "]", "\n", "", "rpn_bbox_pred", "=", "rpn_bbox_pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "if", "cfg", ".", "nms_pre", ">", "0", "and", "scores", ".", "shape", "[", "0", "]", ">", "cfg", ".", "nms_pre", ":", "\n", "                ", "_", ",", "topk_inds", "=", "scores", ".", "topk", "(", "cfg", ".", "nms_pre", ")", "\n", "rpn_bbox_pred", "=", "rpn_bbox_pred", "[", "topk_inds", ",", ":", "]", "\n", "anchors", "=", "anchors", "[", "topk_inds", ",", ":", "]", "\n", "scores", "=", "scores", "[", "topk_inds", "]", "\n", "", "proposals", "=", "delta2bbox", "(", "anchors", ",", "rpn_bbox_pred", ",", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "img_shape", ")", "\n", "if", "cfg", ".", "min_bbox_size", ">", "0", ":", "\n", "                ", "w", "=", "proposals", "[", ":", ",", "2", "]", "-", "proposals", "[", ":", ",", "0", "]", "+", "1", "\n", "h", "=", "proposals", "[", ":", ",", "3", "]", "-", "proposals", "[", ":", ",", "1", "]", "+", "1", "\n", "valid_inds", "=", "torch", ".", "nonzero", "(", "(", "w", ">=", "cfg", ".", "min_bbox_size", ")", "&", "\n", "(", "h", ">=", "cfg", ".", "min_bbox_size", ")", ")", ".", "squeeze", "(", ")", "\n", "proposals", "=", "proposals", "[", "valid_inds", ",", ":", "]", "\n", "scores", "=", "scores", "[", "valid_inds", "]", "\n", "", "proposals", "=", "torch", ".", "cat", "(", "[", "proposals", ",", "scores", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "proposals", ",", "_", "=", "nms", "(", "proposals", ",", "cfg", ".", "nms_thr", ")", "\n", "proposals", "=", "proposals", "[", ":", "cfg", ".", "nms_post", ",", ":", "]", "\n", "mlvl_proposals", ".", "append", "(", "proposals", ")", "\n", "", "proposals", "=", "torch", ".", "cat", "(", "mlvl_proposals", ",", "0", ")", "\n", "if", "cfg", ".", "nms_across_levels", ":", "\n", "            ", "proposals", ",", "_", "=", "nms", "(", "proposals", ",", "cfg", ".", "nms_thr", ")", "\n", "proposals", "=", "proposals", "[", ":", "cfg", ".", "max_num", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "scores", "=", "proposals", "[", ":", ",", "4", "]", "\n", "num", "=", "min", "(", "cfg", ".", "max_num", ",", "proposals", ".", "shape", "[", "0", "]", ")", "\n", "_", ",", "topk_inds", "=", "scores", ".", "topk", "(", "num", ")", "\n", "proposals", "=", "proposals", "[", "topk_inds", ",", ":", "]", "\n", "", "return", "proposals", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.ga_rpn_head.GARPNHead.__init__": [[16, 18], ["guided_anchor_head.GuidedAnchorHead.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GARPNHead", ",", "self", ")", ".", "__init__", "(", "2", ",", "in_channels", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.ga_rpn_head.GARPNHead._init_layers": [[19, 23], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "super()._init_layers"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead._init_layers"], ["", "def", "_init_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "rpn_conv", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "self", ".", "feat_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", "super", "(", "GARPNHead", ",", "self", ")", ".", "_init_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.ga_rpn_head.GARPNHead.init_weights": [[24, 27], ["mmcv.cnn.normal_init", "super().init_weights"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "normal_init", "(", "self", ".", "rpn_conv", ",", "std", "=", "0.01", ")", "\n", "super", "(", "GARPNHead", ",", "self", ")", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.ga_rpn_head.GARPNHead.forward_single": [[28, 34], ["ga_rpn_head.GARPNHead.rpn_conv", "torch.relu", "torch.relu", "torch.relu", "super().forward_single"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.forward_single"], ["", "def", "forward_single", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "rpn_conv", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "(", "cls_score", ",", "bbox_pred", ",", "shape_pred", ",", "\n", "loc_pred", ")", "=", "super", "(", "GARPNHead", ",", "self", ")", ".", "forward_single", "(", "x", ")", "\n", "return", "cls_score", ",", "bbox_pred", ",", "shape_pred", ",", "loc_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.ga_rpn_head.GARPNHead.loss": [[35, 59], ["super().loss", "dict"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss"], ["", "def", "loss", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "shape_preds", ",", "\n", "loc_preds", ",", "\n", "gt_bboxes", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "        ", "losses", "=", "super", "(", "GARPNHead", ",", "self", ")", ".", "loss", "(", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "shape_preds", ",", "\n", "loc_preds", ",", "\n", "gt_bboxes", ",", "\n", "None", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "return", "dict", "(", "\n", "loss_rpn_cls", "=", "losses", "[", "'loss_cls'", "]", ",", "\n", "loss_rpn_bbox", "=", "losses", "[", "'loss_bbox'", "]", ",", "\n", "loss_anchor_shape", "=", "losses", "[", "'loss_shape'", "]", ",", "\n", "loss_anchor_loc", "=", "losses", "[", "'loss_loc'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.ga_rpn_head.GARPNHead.get_bboxes_single": [[60, 128], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "rpn_cls_score.reshape.reshape.permute", "mmdet.core.delta2bbox", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmdet.ops.nms", "mlvl_proposals.append", "mmdet.ops.nms", "min", "scores.unsqueeze.unsqueeze.topk", "mask.sum", "rpn_cls_score.reshape.reshape.reshape", "rpn_cls_score.reshape.reshape.sigmoid", "rpn_cls_score.reshape.reshape.reshape", "rpn_bbox_pred.unsqueeze.unsqueeze.permute().reshape", "scores.unsqueeze.unsqueeze.dim", "rpn_bbox_pred.unsqueeze.unsqueeze.unsqueeze", "anchors.unsqueeze.unsqueeze.unsqueeze", "scores.unsqueeze.unsqueeze.unsqueeze", "scores.unsqueeze.unsqueeze.topk", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "rpn_cls_score.reshape.reshape.size", "rpn_bbox_pred.unsqueeze.unsqueeze.size", "rpn_cls_score.reshape.reshape.softmax", "scores.unsqueeze.unsqueeze.unsqueeze", "rpn_bbox_pred.unsqueeze.unsqueeze.permute", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.delta2bbox", "home.repos.pwc.inspect_result.twangnh_SimCal.nms.nms_wrapper.nms", "home.repos.pwc.inspect_result.twangnh_SimCal.nms.nms_wrapper.nms"], ["", "def", "get_bboxes_single", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "mlvl_anchors", ",", "\n", "mlvl_masks", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "mlvl_proposals", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "cls_scores", ")", ")", ":", "\n", "            ", "rpn_cls_score", "=", "cls_scores", "[", "idx", "]", "\n", "rpn_bbox_pred", "=", "bbox_preds", "[", "idx", "]", "\n", "anchors", "=", "mlvl_anchors", "[", "idx", "]", "\n", "mask", "=", "mlvl_masks", "[", "idx", "]", "\n", "assert", "rpn_cls_score", ".", "size", "(", ")", "[", "-", "2", ":", "]", "==", "rpn_bbox_pred", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "# if no location is kept, end.", "\n", "if", "mask", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "rpn_cls_score", "=", "rpn_cls_score", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "                ", "rpn_cls_score", "=", "rpn_cls_score", ".", "reshape", "(", "-", "1", ")", "\n", "scores", "=", "rpn_cls_score", ".", "sigmoid", "(", ")", "\n", "", "else", ":", "\n", "                ", "rpn_cls_score", "=", "rpn_cls_score", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "scores", "=", "rpn_cls_score", ".", "softmax", "(", "dim", "=", "1", ")", "[", ":", ",", "1", "]", "\n", "# filter scores, bbox_pred w.r.t. mask.", "\n", "# anchors are filtered in get_anchors() beforehand.", "\n", "", "scores", "=", "scores", "[", "mask", "]", "\n", "rpn_bbox_pred", "=", "rpn_bbox_pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "\n", "4", ")", "[", "mask", ",", ":", "]", "\n", "if", "scores", ".", "dim", "(", ")", "==", "0", ":", "\n", "                ", "rpn_bbox_pred", "=", "rpn_bbox_pred", ".", "unsqueeze", "(", "0", ")", "\n", "anchors", "=", "anchors", ".", "unsqueeze", "(", "0", ")", "\n", "scores", "=", "scores", ".", "unsqueeze", "(", "0", ")", "\n", "# filter anchors, bbox_pred, scores w.r.t. scores", "\n", "", "if", "cfg", ".", "nms_pre", ">", "0", "and", "scores", ".", "shape", "[", "0", "]", ">", "cfg", ".", "nms_pre", ":", "\n", "                ", "_", ",", "topk_inds", "=", "scores", ".", "topk", "(", "cfg", ".", "nms_pre", ")", "\n", "rpn_bbox_pred", "=", "rpn_bbox_pred", "[", "topk_inds", ",", ":", "]", "\n", "anchors", "=", "anchors", "[", "topk_inds", ",", ":", "]", "\n", "scores", "=", "scores", "[", "topk_inds", "]", "\n", "# get proposals w.r.t. anchors and rpn_bbox_pred", "\n", "", "proposals", "=", "delta2bbox", "(", "anchors", ",", "rpn_bbox_pred", ",", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "img_shape", ")", "\n", "# filter out too small bboxes", "\n", "if", "cfg", ".", "min_bbox_size", ">", "0", ":", "\n", "                ", "w", "=", "proposals", "[", ":", ",", "2", "]", "-", "proposals", "[", ":", ",", "0", "]", "+", "1", "\n", "h", "=", "proposals", "[", ":", ",", "3", "]", "-", "proposals", "[", ":", ",", "1", "]", "+", "1", "\n", "valid_inds", "=", "torch", ".", "nonzero", "(", "(", "w", ">=", "cfg", ".", "min_bbox_size", ")", "&", "\n", "(", "h", ">=", "cfg", ".", "min_bbox_size", ")", ")", ".", "squeeze", "(", ")", "\n", "proposals", "=", "proposals", "[", "valid_inds", ",", ":", "]", "\n", "scores", "=", "scores", "[", "valid_inds", "]", "\n", "", "proposals", "=", "torch", ".", "cat", "(", "[", "proposals", ",", "scores", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "# NMS in current level", "\n", "proposals", ",", "_", "=", "nms", "(", "proposals", ",", "cfg", ".", "nms_thr", ")", "\n", "proposals", "=", "proposals", "[", ":", "cfg", ".", "nms_post", ",", ":", "]", "\n", "mlvl_proposals", ".", "append", "(", "proposals", ")", "\n", "", "proposals", "=", "torch", ".", "cat", "(", "mlvl_proposals", ",", "0", ")", "\n", "if", "cfg", ".", "nms_across_levels", ":", "\n", "# NMS across multi levels", "\n", "            ", "proposals", ",", "_", "=", "nms", "(", "proposals", ",", "cfg", ".", "nms_thr", ")", "\n", "proposals", "=", "proposals", "[", ":", "cfg", ".", "max_num", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "scores", "=", "proposals", "[", ":", ",", "4", "]", "\n", "num", "=", "min", "(", "cfg", ".", "max_num", ",", "proposals", ".", "shape", "[", "0", "]", ")", "\n", "_", ",", "topk_inds", "=", "scores", ".", "topk", "(", "num", ")", "\n", "proposals", "=", "proposals", "[", "topk_inds", ",", ":", "]", "\n", "", "return", "proposals", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.__init__": [[31, 76], ["dict", "dict", "torch.Module.__init__", "loss_cls.get", "builder.build_loss", "builder.build_loss", "anchor_head.AnchorHead._init_layers", "list", "anchor_head.AnchorHead.anchor_generators.append", "len", "len", "mmdet.core.AnchorGenerator"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_loss", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_loss", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead._init_layers"], ["def", "__init__", "(", "self", ",", "\n", "num_classes", ",", "\n", "in_channels", ",", "\n", "feat_channels", "=", "256", ",", "\n", "anchor_scales", "=", "[", "8", ",", "16", ",", "32", "]", ",", "\n", "anchor_ratios", "=", "[", "0.5", ",", "1.0", ",", "2.0", "]", ",", "\n", "anchor_strides", "=", "[", "4", ",", "8", ",", "16", ",", "32", ",", "64", "]", ",", "\n", "anchor_base_sizes", "=", "None", ",", "\n", "target_means", "=", "(", ".0", ",", ".0", ",", ".0", ",", ".0", ")", ",", "\n", "target_stds", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ",", "\n", "loss_cls", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_bbox", "=", "dict", "(", "\n", "type", "=", "'SmoothL1Loss'", ",", "beta", "=", "1.0", "/", "9.0", ",", "loss_weight", "=", "1.0", ")", ")", ":", "\n", "        ", "super", "(", "AnchorHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "feat_channels", "=", "feat_channels", "\n", "self", ".", "anchor_scales", "=", "anchor_scales", "\n", "self", ".", "anchor_ratios", "=", "anchor_ratios", "\n", "self", ".", "anchor_strides", "=", "anchor_strides", "\n", "self", ".", "anchor_base_sizes", "=", "list", "(", "\n", "anchor_strides", ")", "if", "anchor_base_sizes", "is", "None", "else", "anchor_base_sizes", "\n", "self", ".", "target_means", "=", "target_means", "\n", "self", ".", "target_stds", "=", "target_stds", "\n", "\n", "self", ".", "use_sigmoid_cls", "=", "loss_cls", ".", "get", "(", "'use_sigmoid'", ",", "False", ")", "\n", "self", ".", "sampling", "=", "loss_cls", "[", "'type'", "]", "not", "in", "[", "'FocalLoss'", ",", "'GHMC'", "]", "\n", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "            ", "self", ".", "cls_out_channels", "=", "num_classes", "-", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "cls_out_channels", "=", "num_classes", "\n", "", "self", ".", "loss_cls", "=", "build_loss", "(", "loss_cls", ")", "\n", "self", ".", "loss_bbox", "=", "build_loss", "(", "loss_bbox", ")", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n", "self", ".", "anchor_generators", "=", "[", "]", "\n", "for", "anchor_base", "in", "self", ".", "anchor_base_sizes", ":", "\n", "            ", "self", ".", "anchor_generators", ".", "append", "(", "\n", "AnchorGenerator", "(", "anchor_base", ",", "anchor_scales", ",", "anchor_ratios", ")", ")", "\n", "\n", "", "self", ".", "num_anchors", "=", "len", "(", "self", ".", "anchor_ratios", ")", "*", "len", "(", "self", ".", "anchor_scales", ")", "\n", "self", ".", "_init_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead._init_layers": [[77, 81], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "_init_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_cls", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "\n", "self", ".", "num_anchors", "*", "self", ".", "cls_out_channels", ",", "1", ")", "\n", "self", ".", "conv_reg", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "self", ".", "num_anchors", "*", "4", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.init_weights": [[82, 85], ["mmcv.cnn.normal_init", "mmcv.cnn.normal_init"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "normal_init", "(", "self", ".", "conv_cls", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "conv_reg", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.forward_single": [[86, 90], ["anchor_head.AnchorHead.conv_cls", "anchor_head.AnchorHead.conv_reg"], "methods", ["None"], ["", "def", "forward_single", "(", "self", ",", "x", ")", ":", "\n", "        ", "cls_score", "=", "self", ".", "conv_cls", "(", "x", ")", "\n", "bbox_pred", "=", "self", ".", "conv_reg", "(", "x", ")", "\n", "return", "cls_score", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.forward": [[91, 93], ["mmdet.core.multi_apply"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.misc.multi_apply"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "return", "multi_apply", "(", "self", ".", "forward_single", ",", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.get_anchors": [[94, 132], ["len", "len", "range", "enumerate", "anchor_head.AnchorHead.anchor_generators[].grid_anchors", "multi_level_anchors.append", "range", "valid_flag_list.append", "range", "min", "min", "anchor_head.AnchorHead.anchor_generators[].valid_flags", "multi_level_flags.append", "int", "int", "numpy.ceil", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_generator.AnchorGenerator.grid_anchors", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_generator.AnchorGenerator.valid_flags"], ["", "def", "get_anchors", "(", "self", ",", "featmap_sizes", ",", "img_metas", ")", ":", "\n", "        ", "\"\"\"Get anchors according to feature map sizes.\n\n        Args:\n            featmap_sizes (list[tuple]): Multi-level feature map sizes.\n            img_metas (list[dict]): Image meta info.\n\n        Returns:\n            tuple: anchors of each image, valid flags of each image\n        \"\"\"", "\n", "num_imgs", "=", "len", "(", "img_metas", ")", "\n", "num_levels", "=", "len", "(", "featmap_sizes", ")", "\n", "\n", "# since feature map sizes of all images are the same, we only compute", "\n", "# anchors for one time", "\n", "multi_level_anchors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "anchors", "=", "self", ".", "anchor_generators", "[", "i", "]", ".", "grid_anchors", "(", "\n", "featmap_sizes", "[", "i", "]", ",", "self", ".", "anchor_strides", "[", "i", "]", ")", "\n", "multi_level_anchors", ".", "append", "(", "anchors", ")", "\n", "", "anchor_list", "=", "[", "multi_level_anchors", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "\n", "# for each image, we compute valid flags of multi level anchors", "\n", "valid_flag_list", "=", "[", "]", "\n", "for", "img_id", ",", "img_meta", "in", "enumerate", "(", "img_metas", ")", ":", "\n", "            ", "multi_level_flags", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "                ", "anchor_stride", "=", "self", ".", "anchor_strides", "[", "i", "]", "\n", "feat_h", ",", "feat_w", "=", "featmap_sizes", "[", "i", "]", "\n", "h", ",", "w", ",", "_", "=", "img_meta", "[", "'pad_shape'", "]", "\n", "valid_feat_h", "=", "min", "(", "int", "(", "np", ".", "ceil", "(", "h", "/", "anchor_stride", ")", ")", ",", "feat_h", ")", "\n", "valid_feat_w", "=", "min", "(", "int", "(", "np", ".", "ceil", "(", "w", "/", "anchor_stride", ")", ")", ",", "feat_w", ")", "\n", "flags", "=", "self", ".", "anchor_generators", "[", "i", "]", ".", "valid_flags", "(", "\n", "(", "feat_h", ",", "feat_w", ")", ",", "(", "valid_feat_h", ",", "valid_feat_w", ")", ")", "\n", "multi_level_flags", ".", "append", "(", "flags", ")", "\n", "", "valid_flag_list", ".", "append", "(", "multi_level_flags", ")", "\n", "\n", "", "return", "anchor_list", ",", "valid_flag_list", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.loss_single": [[133, 152], ["labels.reshape.reshape.reshape", "label_weights.reshape.reshape.reshape", "cls_score.permute().reshape.permute().reshape.permute().reshape", "anchor_head.AnchorHead.loss_cls", "bbox_targets.reshape.reshape.reshape", "bbox_weights.reshape.reshape.reshape", "bbox_pred.permute().reshape.permute().reshape.permute().reshape", "anchor_head.AnchorHead.loss_bbox", "cls_score.permute().reshape.permute().reshape.permute", "bbox_pred.permute().reshape.permute().reshape.permute"], "methods", ["None"], ["", "def", "loss_single", "(", "self", ",", "cls_score", ",", "bbox_pred", ",", "labels", ",", "label_weights", ",", "\n", "bbox_targets", ",", "bbox_weights", ",", "num_total_samples", ",", "cfg", ")", ":", "\n", "# classification loss", "\n", "        ", "labels", "=", "labels", ".", "reshape", "(", "-", "1", ")", "\n", "label_weights", "=", "label_weights", ".", "reshape", "(", "-", "1", ")", "\n", "cls_score", "=", "cls_score", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "\n", "1", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "cls_out_channels", ")", "\n", "loss_cls", "=", "self", ".", "loss_cls", "(", "\n", "cls_score", ",", "labels", ",", "label_weights", ",", "avg_factor", "=", "num_total_samples", ")", "\n", "# regression loss", "\n", "bbox_targets", "=", "bbox_targets", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "bbox_weights", "=", "bbox_weights", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "bbox_pred", "=", "bbox_pred", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "loss_bbox", "=", "self", ".", "loss_bbox", "(", "\n", "bbox_pred", ",", "\n", "bbox_targets", ",", "\n", "bbox_weights", ",", "\n", "avg_factor", "=", "num_total_samples", ")", "\n", "return", "loss_cls", ",", "loss_bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.loss": [[153, 197], ["mmdet.core.force_fp32", "anchor_head.AnchorHead.get_anchors", "mmdet.core.anchor_target", "mmdet.core.multi_apply", "dict", "len", "len", "featmap.size"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.get_anchors", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_target.anchor_target", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.misc.multi_apply"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'cls_scores'", ",", "'bbox_preds'", ")", ")", "\n", "def", "loss", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "        ", "featmap_sizes", "=", "[", "featmap", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "featmap", "in", "cls_scores", "]", "\n", "assert", "len", "(", "featmap_sizes", ")", "==", "len", "(", "self", ".", "anchor_generators", ")", "\n", "\n", "anchor_list", ",", "valid_flag_list", "=", "self", ".", "get_anchors", "(", "\n", "featmap_sizes", ",", "img_metas", ")", "\n", "label_channels", "=", "self", ".", "cls_out_channels", "if", "self", ".", "use_sigmoid_cls", "else", "1", "\n", "cls_reg_targets", "=", "anchor_target", "(", "\n", "anchor_list", ",", "\n", "valid_flag_list", ",", "\n", "gt_bboxes", ",", "\n", "img_metas", ",", "\n", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore_list", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels_list", "=", "gt_labels", ",", "\n", "label_channels", "=", "label_channels", ",", "\n", "sampling", "=", "self", ".", "sampling", ")", "\n", "if", "cls_reg_targets", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "(", "labels_list", ",", "label_weights_list", ",", "bbox_targets_list", ",", "bbox_weights_list", ",", "\n", "num_total_pos", ",", "num_total_neg", ")", "=", "cls_reg_targets", "\n", "num_total_samples", "=", "(", "\n", "num_total_pos", "+", "num_total_neg", "if", "self", ".", "sampling", "else", "num_total_pos", ")", "\n", "losses_cls", ",", "losses_bbox", "=", "multi_apply", "(", "\n", "self", ".", "loss_single", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "labels_list", ",", "\n", "label_weights_list", ",", "\n", "bbox_targets_list", ",", "\n", "bbox_weights_list", ",", "\n", "num_total_samples", "=", "num_total_samples", ",", "\n", "cfg", "=", "cfg", ")", "\n", "return", "dict", "(", "loss_cls", "=", "losses_cls", ",", "loss_bbox", "=", "losses_bbox", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.get_bboxes": [[198, 224], ["mmdet.core.force_fp32", "len", "range", "len", "len", "anchor_head.AnchorHead.anchor_generators[].grid_anchors", "len", "anchor_head.AnchorHead.get_bboxes_single", "result_list.append", "range", "[].detach", "[].detach", "cls_scores[].size", "range", "range"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_generator.AnchorGenerator.grid_anchors", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.get_bboxes_single"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'cls_scores'", ",", "'bbox_preds'", ")", ")", "\n", "def", "get_bboxes", "(", "self", ",", "cls_scores", ",", "bbox_preds", ",", "img_metas", ",", "cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "\n", "num_levels", "=", "len", "(", "cls_scores", ")", "\n", "\n", "mlvl_anchors", "=", "[", "\n", "self", ".", "anchor_generators", "[", "i", "]", ".", "grid_anchors", "(", "cls_scores", "[", "i", "]", ".", "size", "(", ")", "[", "-", "2", ":", "]", ",", "\n", "self", ".", "anchor_strides", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "result_list", "=", "[", "]", "\n", "for", "img_id", "in", "range", "(", "len", "(", "img_metas", ")", ")", ":", "\n", "            ", "cls_score_list", "=", "[", "\n", "cls_scores", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "bbox_pred_list", "=", "[", "\n", "bbox_preds", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "img_shape", "=", "img_metas", "[", "img_id", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_metas", "[", "img_id", "]", "[", "'scale_factor'", "]", "\n", "proposals", "=", "self", ".", "get_bboxes_single", "(", "cls_score_list", ",", "bbox_pred_list", ",", "\n", "mlvl_anchors", ",", "img_shape", ",", "\n", "scale_factor", ",", "cfg", ",", "rescale", ")", "\n", "result_list", ".", "append", "(", "proposals", ")", "\n", "", "return", "result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.get_bboxes_single": [[225, 271], ["zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmdet.core.multiclass_nms", "len", "len", "len", "cls_score.permute().reshape.permute().reshape.permute().reshape", "bbox_pred.permute().reshape.permute().reshape.permute().reshape", "cfg.get", "mmdet.core.delta2bbox", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cls_score.permute().reshape.permute().reshape.sigmoid", "cls_score.permute().reshape.permute().reshape.softmax", "max_scores.topk", "cls_score.permute().reshape.permute().reshape.size", "bbox_pred.permute().reshape.permute().reshape.size", "cls_score.permute().reshape.permute().reshape.permute", "bbox_pred.permute().reshape.permute().reshape.permute", "cls_score.permute().reshape.softmax.max", "scores[].max"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.post_processing.bbox_nms.multiclass_nms", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.delta2bbox"], ["", "def", "get_bboxes_single", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "mlvl_anchors", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "==", "len", "(", "mlvl_anchors", ")", "\n", "mlvl_bboxes", "=", "[", "]", "\n", "mlvl_scores", "=", "[", "]", "\n", "for", "cls_score", ",", "bbox_pred", ",", "anchors", "in", "zip", "(", "cls_scores", ",", "bbox_preds", ",", "\n", "mlvl_anchors", ")", ":", "\n", "            ", "assert", "cls_score", ".", "size", "(", ")", "[", "-", "2", ":", "]", "==", "bbox_pred", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "cls_score", "=", "cls_score", ".", "permute", "(", "1", ",", "2", ",", "\n", "0", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "cls_out_channels", ")", "\n", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "                ", "scores", "=", "cls_score", ".", "sigmoid", "(", ")", "\n", "", "else", ":", "\n", "                ", "scores", "=", "cls_score", ".", "softmax", "(", "-", "1", ")", "\n", "", "bbox_pred", "=", "bbox_pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "nms_pre", "=", "cfg", ".", "get", "(", "'nms_pre'", ",", "-", "1", ")", "\n", "if", "nms_pre", ">", "0", "and", "scores", ".", "shape", "[", "0", "]", ">", "nms_pre", ":", "\n", "                ", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "                    ", "max_scores", ",", "_", "=", "scores", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "max_scores", ",", "_", "=", "scores", "[", ":", ",", "1", ":", "]", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "_", ",", "topk_inds", "=", "max_scores", ".", "topk", "(", "nms_pre", ")", "\n", "anchors", "=", "anchors", "[", "topk_inds", ",", ":", "]", "\n", "bbox_pred", "=", "bbox_pred", "[", "topk_inds", ",", ":", "]", "\n", "scores", "=", "scores", "[", "topk_inds", ",", ":", "]", "\n", "", "bboxes", "=", "delta2bbox", "(", "anchors", ",", "bbox_pred", ",", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "img_shape", ")", "\n", "mlvl_bboxes", ".", "append", "(", "bboxes", ")", "\n", "mlvl_scores", ".", "append", "(", "scores", ")", "\n", "", "mlvl_bboxes", "=", "torch", ".", "cat", "(", "mlvl_bboxes", ")", "\n", "if", "rescale", ":", "\n", "            ", "mlvl_bboxes", "/=", "mlvl_bboxes", ".", "new_tensor", "(", "scale_factor", ")", "\n", "", "mlvl_scores", "=", "torch", ".", "cat", "(", "mlvl_scores", ")", "\n", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "            ", "padding", "=", "mlvl_scores", ".", "new_zeros", "(", "mlvl_scores", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "mlvl_scores", "=", "torch", ".", "cat", "(", "[", "padding", ",", "mlvl_scores", "]", ",", "dim", "=", "1", ")", "\n", "", "det_bboxes", ",", "det_labels", "=", "multiclass_nms", "(", "mlvl_bboxes", ",", "mlvl_scores", ",", "\n", "cfg", ".", "score_thr", ",", "cfg", ".", "nms", ",", "\n", "cfg", ".", "max_per_img", ")", "\n", "return", "det_bboxes", ",", "det_labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.double_head_rcnn.DoubleHeadRCNN.__init__": [[11, 14], ["two_stage.TwoStageDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reg_roi_scale_factor", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "reg_roi_scale_factor", "=", "reg_roi_scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.double_head_rcnn.DoubleHeadRCNN.forward_train": [[15, 125], ["double_head_rcnn.DoubleHeadRCNN.extract_feat", "dict", "double_head_rcnn.DoubleHeadRCNN.rpn_head", "double_head_rcnn.DoubleHeadRCNN.rpn_head.loss", "dict.update", "double_head_rcnn.DoubleHeadRCNN.train_cfg.get", "double_head_rcnn.DoubleHeadRCNN.rpn_head.get_bboxes", "mmdet.core.build_assigner", "mmdet.core.build_sampler", "img.size", "range", "mmdet.core.bbox2roi", "double_head_rcnn.DoubleHeadRCNN.bbox_roi_extractor", "double_head_rcnn.DoubleHeadRCNN.bbox_roi_extractor", "double_head_rcnn.DoubleHeadRCNN.bbox_head", "double_head_rcnn.DoubleHeadRCNN.bbox_head.get_target", "double_head_rcnn.DoubleHeadRCNN.bbox_head.loss", "dict.update", "double_head_rcnn.DoubleHeadRCNN.mask_head", "double_head_rcnn.DoubleHeadRCNN.mask_head.get_target", "torch.cat", "double_head_rcnn.DoubleHeadRCNN.mask_head.loss", "dict.update", "mmdet.core.build_assigner.assign", "mmdet.core.build_sampler.sample", "sampling_results.append", "double_head_rcnn.DoubleHeadRCNN.shared_head", "double_head_rcnn.DoubleHeadRCNN.shared_head", "mmdet.core.bbox2roi", "double_head_rcnn.DoubleHeadRCNN.mask_roi_extractor", "torch.cat", "double_head_rcnn.DoubleHeadRCNN.shared_head", "torch.cat.append", "torch.cat.append", "range", "torch.ones", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.get_bboxes", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_sampler", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.max_iou_assigner.MaxIoUAssigner.assign", "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.pseudo_sampler.PseudoSampler.sample", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi"], ["", "def", "forward_train", "(", "self", ",", "\n", "img", ",", "\n", "img_meta", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "gt_masks", "=", "None", ",", "\n", "proposals", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "# RPN forward and loss", "\n", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "rpn_loss_inputs", "=", "rpn_outs", "+", "(", "gt_bboxes", ",", "img_meta", ",", "\n", "self", ".", "train_cfg", ".", "rpn", ")", "\n", "rpn_losses", "=", "self", ".", "rpn_head", ".", "loss", "(", "\n", "*", "rpn_loss_inputs", ",", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "losses", ".", "update", "(", "rpn_losses", ")", "\n", "\n", "proposal_cfg", "=", "self", ".", "train_cfg", ".", "get", "(", "'rpn_proposal'", ",", "\n", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "proposal_inputs", "=", "rpn_outs", "+", "(", "img_meta", ",", "proposal_cfg", ")", "\n", "proposal_list", "=", "self", ".", "rpn_head", ".", "get_bboxes", "(", "*", "proposal_inputs", ")", "\n", "", "else", ":", "\n", "            ", "proposal_list", "=", "proposals", "\n", "\n", "# assign gts and sample proposals", "\n", "", "if", "self", ".", "with_bbox", "or", "self", ".", "with_mask", ":", "\n", "            ", "bbox_assigner", "=", "build_assigner", "(", "self", ".", "train_cfg", ".", "rcnn", ".", "assigner", ")", "\n", "bbox_sampler", "=", "build_sampler", "(", "\n", "self", ".", "train_cfg", ".", "rcnn", ".", "sampler", ",", "context", "=", "self", ")", "\n", "num_imgs", "=", "img", ".", "size", "(", "0", ")", "\n", "if", "gt_bboxes_ignore", "is", "None", ":", "\n", "                ", "gt_bboxes_ignore", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "", "sampling_results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "                ", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "proposal_list", "[", "i", "]", ",", "\n", "gt_bboxes", "[", "i", "]", ",", "\n", "gt_bboxes_ignore", "[", "i", "]", ",", "\n", "gt_labels", "[", "i", "]", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "\n", "assign_result", ",", "\n", "proposal_list", "[", "i", "]", ",", "\n", "gt_bboxes", "[", "i", "]", ",", "\n", "gt_labels", "[", "i", "]", ",", "\n", "feats", "=", "[", "lvl_feat", "[", "i", "]", "[", "None", "]", "for", "lvl_feat", "in", "x", "]", ")", "\n", "sampling_results", ".", "append", "(", "sampling_result", ")", "\n", "\n", "# bbox head forward and loss", "\n", "", "", "if", "self", ".", "with_bbox", ":", "\n", "            ", "rois", "=", "bbox2roi", "(", "[", "res", ".", "bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "# TODO: a more flexible way to decide which feature maps to use", "\n", "bbox_cls_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "rois", ")", "\n", "bbox_reg_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "\n", "rois", ",", "\n", "roi_scale_factor", "=", "self", ".", "reg_roi_scale_factor", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "bbox_cls_feats", "=", "self", ".", "shared_head", "(", "bbox_cls_feats", ")", "\n", "bbox_reg_feats", "=", "self", ".", "shared_head", "(", "bbox_reg_feats", ")", "\n", "", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "(", "bbox_cls_feats", ",", "\n", "bbox_reg_feats", ")", "\n", "\n", "bbox_targets", "=", "self", ".", "bbox_head", ".", "get_target", "(", "sampling_results", ",", "\n", "gt_bboxes", ",", "gt_labels", ",", "\n", "self", ".", "train_cfg", ".", "rcnn", ")", "\n", "loss_bbox", "=", "self", ".", "bbox_head", ".", "loss", "(", "cls_score", ",", "bbox_pred", ",", "\n", "*", "bbox_targets", ")", "\n", "losses", ".", "update", "(", "loss_bbox", ")", "\n", "\n", "# mask head forward and loss", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "if", "not", "self", ".", "share_roi_extractor", ":", "\n", "                ", "pos_rois", "=", "bbox2roi", "(", "\n", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "mask_feats", "=", "self", ".", "mask_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "mask_roi_extractor", ".", "num_inputs", "]", ",", "pos_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                    ", "mask_feats", "=", "self", ".", "shared_head", "(", "mask_feats", ")", "\n", "", "", "else", ":", "\n", "                ", "pos_inds", "=", "[", "]", "\n", "device", "=", "bbox_cls_feats", ".", "device", "\n", "for", "res", "in", "sampling_results", ":", "\n", "                    ", "pos_inds", ".", "append", "(", "\n", "torch", ".", "ones", "(", "\n", "res", ".", "pos_bboxes", ".", "shape", "[", "0", "]", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "torch", ".", "uint8", ")", ")", "\n", "pos_inds", ".", "append", "(", "\n", "torch", ".", "zeros", "(", "\n", "res", ".", "neg_bboxes", ".", "shape", "[", "0", "]", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "torch", ".", "uint8", ")", ")", "\n", "", "pos_inds", "=", "torch", ".", "cat", "(", "pos_inds", ")", "\n", "mask_feats", "=", "bbox_cls_feats", "[", "pos_inds", "]", "\n", "", "mask_pred", "=", "self", ".", "mask_head", "(", "mask_feats", ")", "\n", "\n", "mask_targets", "=", "self", ".", "mask_head", ".", "get_target", "(", "sampling_results", ",", "\n", "gt_masks", ",", "\n", "self", ".", "train_cfg", ".", "rcnn", ")", "\n", "pos_labels", "=", "torch", ".", "cat", "(", "\n", "[", "res", ".", "pos_gt_labels", "for", "res", "in", "sampling_results", "]", ")", "\n", "loss_mask", "=", "self", ".", "mask_head", ".", "loss", "(", "mask_pred", ",", "mask_targets", ",", "\n", "pos_labels", ")", "\n", "losses", ".", "update", "(", "loss_mask", ")", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.double_head_rcnn.DoubleHeadRCNN.simple_test_bboxes": [[126, 155], ["mmdet.core.bbox2roi", "double_head_rcnn.DoubleHeadRCNN.bbox_roi_extractor", "double_head_rcnn.DoubleHeadRCNN.bbox_roi_extractor", "double_head_rcnn.DoubleHeadRCNN.bbox_head", "double_head_rcnn.DoubleHeadRCNN.bbox_head.get_det_bboxes", "double_head_rcnn.DoubleHeadRCNN.shared_head", "double_head_rcnn.DoubleHeadRCNN.shared_head"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_det_bboxes"], ["", "def", "simple_test_bboxes", "(", "self", ",", "\n", "x", ",", "\n", "img_meta", ",", "\n", "proposals", ",", "\n", "rcnn_test_cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\"Test only det bboxes without augmentation.\"\"\"", "\n", "rois", "=", "bbox2roi", "(", "proposals", ")", "\n", "bbox_cls_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "rois", ")", "\n", "bbox_reg_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "\n", "rois", ",", "\n", "roi_scale_factor", "=", "self", ".", "reg_roi_scale_factor", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "            ", "bbox_cls_feats", "=", "self", ".", "shared_head", "(", "bbox_cls_feats", ")", "\n", "bbox_reg_feats", "=", "self", ".", "shared_head", "(", "bbox_reg_feats", ")", "\n", "", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "(", "bbox_cls_feats", ",", "bbox_reg_feats", ")", "\n", "img_shape", "=", "img_meta", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "det_bboxes", ",", "det_labels", "=", "self", ".", "bbox_head", ".", "get_det_bboxes", "(", "\n", "rois", ",", "\n", "cls_score", ",", "\n", "bbox_pred", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "rescale", "=", "rescale", ",", "\n", "cfg", "=", "rcnn_test_cfg", ")", "\n", "return", "det_bboxes", ",", "det_labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.__init__": [[17, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDetector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.with_neck": [[21, 24], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_neck", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "'neck'", ")", "and", "self", ".", "neck", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.with_shared_head": [[25, 28], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_shared_head", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "'shared_head'", ")", "and", "self", ".", "shared_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.with_bbox": [[29, 32], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_bbox", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "'bbox_head'", ")", "and", "self", ".", "bbox_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.with_mask": [[33, 36], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_mask", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "'mask_head'", ")", "and", "self", ".", "mask_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.extract_feat": [[37, 40], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "extract_feat", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.extract_feats": [[41, 45], ["isinstance", "base.BaseDetector.extract_feat"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.extract_feat"], ["", "def", "extract_feats", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "imgs", ",", "list", ")", "\n", "for", "img", "in", "imgs", ":", "\n", "            ", "yield", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.forward_train": [[46, 49], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "forward_train", "(", "self", ",", "imgs", ",", "img_metas", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.simple_test": [[50, 53], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "simple_test", "(", "self", ",", "img", ",", "img_meta", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.aug_test": [[54, 57], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "aug_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.init_weights": [[58, 62], ["logging.getLogger", "logging.getLogger.info"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "pretrained", "is", "not", "None", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "info", "(", "'load model from: {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.forward_test": [[63, 84], ["len", "imgs[].size", "len", "ValueError", "base.BaseDetector.simple_test", "base.BaseDetector.aug_test", "isinstance", "TypeError", "len", "len", "type"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.simple_test", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.aug_test"], ["", "", "def", "forward_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "var", ",", "name", "in", "[", "(", "imgs", ",", "'imgs'", ")", ",", "(", "img_metas", ",", "'img_metas'", ")", "]", ":", "\n", "            ", "if", "not", "isinstance", "(", "var", ",", "list", ")", ":", "\n", "                ", "raise", "TypeError", "(", "'{} must be a list, but got {}'", ".", "format", "(", "\n", "name", ",", "type", "(", "var", ")", ")", ")", "\n", "\n", "", "", "num_augs", "=", "len", "(", "imgs", ")", "\n", "if", "num_augs", "!=", "len", "(", "img_metas", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'num of augmentations ({}) != num of image meta ({})'", ".", "format", "(", "\n", "len", "(", "imgs", ")", ",", "len", "(", "img_metas", ")", ")", ")", "\n", "# TODO: remove the restriction of imgs_per_gpu == 1 when prepared", "\n", "", "imgs_per_gpu", "=", "imgs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "assert", "imgs_per_gpu", "==", "1", "\n", "\n", "if", "num_augs", "==", "1", ":", "\n", "# if 'gt_bboxes' in kwargs:", "\n", "#     return self.simple_test_with_gt(imgs[0], img_metas, **kwargs)", "\n", "            ", "return", "self", ".", "simple_test", "(", "imgs", "[", "0", "]", ",", "img_metas", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "aug_test", "(", "imgs", ",", "img_metas", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.forward": [[85, 93], ["mmdet.core.auto_fp16", "base.BaseDetector.forward_train", "base.BaseDetector.forward_test", "base.BaseDetector.forward_test"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.auto_fp16", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.forward_train", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.fast_rcnn.FastRCNN.forward_test", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.fast_rcnn.FastRCNN.forward_test"], ["", "", "@", "auto_fp16", "(", "apply_to", "=", "(", "'img'", ",", ")", ")", "\n", "def", "forward", "(", "self", ",", "img", ",", "img_meta", ",", "return_loss", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "return_loss", ":", "\n", "            ", "return", "self", ".", "forward_train", "(", "img", ",", "img_meta", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "if", "'gt_bboxes'", "in", "kwargs", ":", "\n", "                ", "return", "self", ".", "forward_test", "(", "[", "img", "]", ",", "img_meta", ",", "**", "kwargs", ")", "\n", "", "return", "self", ".", "forward_test", "(", "[", "img", "]", ",", "img_meta", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.show_result": [[94, 158], ["isinstance", "mmdet.core.tensor2imgs", "zip", "len", "len", "isinstance", "numpy.vstack", "numpy.concatenate", "plt.imshow", "plt.show", "print", "mmdet.core.get_classes", "isinstance", "mmcv.concat_list", "numpy.full", "cv2.cvtColor", "TypeError", "numpy.where", "numpy.random.randint", "pycocotools.decode().astype", "enumerate", "type", "pycocotools.decode"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.misc.tensor2imgs", "home.repos.pwc.inspect_result.twangnh_SimCal.demo.lvis_show_ann.LvisGtAnnVis.show", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.class_names.get_classes"], ["", "", "def", "show_result", "(", "self", ",", "\n", "data", ",", "\n", "result", ",", "\n", "img_norm_cfg", ",", "\n", "dataset", "=", "None", ",", "\n", "score_thr", "=", "0.3", ")", ":", "\n", "        ", "if", "isinstance", "(", "result", ",", "tuple", ")", ":", "\n", "            ", "bbox_result", ",", "segm_result", ",", "_propos", "=", "result", "\n", "", "else", ":", "\n", "            ", "bbox_result", ",", "segm_result", "=", "result", ",", "None", "\n", "\n", "", "img_tensor", "=", "data", "[", "'img'", "]", "[", "0", "]", "\n", "img_metas", "=", "data", "[", "'img_meta'", "]", "[", "0", "]", ".", "data", "[", "0", "]", "\n", "imgs", "=", "tensor2imgs", "(", "img_tensor", ",", "**", "img_norm_cfg", ")", "\n", "assert", "len", "(", "imgs", ")", "==", "len", "(", "img_metas", ")", "\n", "\n", "if", "dataset", "is", "None", ":", "\n", "            ", "class_names", "=", "self", ".", "CLASSES", "\n", "", "elif", "isinstance", "(", "dataset", ",", "str", ")", ":", "\n", "            ", "class_names", "=", "get_classes", "(", "dataset", ")", "\n", "", "elif", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "class_names", "=", "dataset", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'dataset must be a valid dataset name or a sequence'", "\n", "' of class names, not {}'", ".", "format", "(", "type", "(", "dataset", ")", ")", ")", "\n", "\n", "", "for", "img", ",", "img_meta", "in", "zip", "(", "imgs", ",", "img_metas", ")", ":", "\n", "            ", "h", ",", "w", ",", "_", "=", "img_meta", "[", "'img_shape'", "]", "\n", "img_show", "=", "img", "[", ":", "h", ",", ":", "w", ",", ":", "]", "\n", "\n", "bboxes", "=", "np", ".", "vstack", "(", "bbox_result", ")", "\n", "# draw segmentation masks", "\n", "if", "segm_result", "is", "not", "None", ":", "\n", "                ", "segms", "=", "mmcv", ".", "concat_list", "(", "segm_result", ")", "\n", "inds", "=", "np", ".", "where", "(", "bboxes", "[", ":", ",", "-", "1", "]", ">", "score_thr", ")", "[", "0", "]", "\n", "for", "i", "in", "inds", ":", "\n", "                    ", "color_mask", "=", "np", ".", "random", ".", "randint", "(", "\n", "0", ",", "256", ",", "(", "1", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "mask", "=", "maskUtils", ".", "decode", "(", "segms", "[", "i", "]", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "img_show", "[", "mask", "]", "=", "img_show", "[", "mask", "]", "*", "0.5", "+", "color_mask", "*", "0.5", "\n", "# draw bounding boxes", "\n", "", "", "labels", "=", "[", "\n", "np", ".", "full", "(", "bbox", ".", "shape", "[", "0", "]", ",", "i", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", ",", "bbox", "in", "enumerate", "(", "bbox_result", ")", "\n", "]", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ")", "\n", "from", "matplotlib", "import", "pyplot", "as", "plt", "\n", "import", "cv2", "\n", "\n", "# plt.imshow(img_show)", "\n", "# plt.show()", "\n", "plt", ".", "imshow", "(", "cv2", ".", "cvtColor", "(", "img_show", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "# plt.show()", "\n", "\n", "# mmcv.imshow_det_bboxes(", "\n", "#     img_show,", "\n", "#     bboxes,", "\n", "#     labels,", "\n", "#     class_names=class_names,", "\n", "#     score_thr=score_thr)", "\n", "# plt.imsave(img_show)", "\n", "plt", ".", "show", "(", ")", "\n", "print", "(", "'df'", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.rpn.RPN.__init__": [[13, 27], ["base.BaseDetector.__init__", "builder.build_backbone", "builder.build_head", "rpn.RPN.init_weights", "builder.build_neck"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_backbone", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_head", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_neck"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "neck", ",", "\n", "rpn_head", ",", "\n", "train_cfg", ",", "\n", "test_cfg", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "RPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "builder", ".", "build_backbone", "(", "backbone", ")", "\n", "self", ".", "neck", "=", "builder", ".", "build_neck", "(", "neck", ")", "if", "neck", "is", "not", "None", "else", "None", "\n", "self", ".", "rpn_head", "=", "builder", ".", "build_head", "(", "rpn_head", ")", "\n", "self", ".", "train_cfg", "=", "train_cfg", "\n", "self", ".", "test_cfg", "=", "test_cfg", "\n", "self", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.rpn.RPN.init_weights": [[28, 34], ["super().init_weights", "rpn.RPN.backbone.init_weights", "rpn.RPN.rpn_head.init_weights", "rpn.RPN.neck.init_weights"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "RPN", ",", "self", ")", ".", "init_weights", "(", "pretrained", ")", "\n", "self", ".", "backbone", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "self", ".", "neck", ".", "init_weights", "(", ")", "\n", "", "self", ".", "rpn_head", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.rpn.RPN.extract_feat": [[35, 40], ["rpn.RPN.backbone", "rpn.RPN.neck"], "methods", ["None"], ["", "def", "extract_feat", "(", "self", ",", "img", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "img", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "x", "=", "self", ".", "neck", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.rpn.RPN.forward_train": [[41, 56], ["rpn.RPN.train_cfg.rpn.get", "rpn.RPN.extract_feat", "rpn.RPN.rpn_head", "rpn.RPN.rpn_head.loss", "mmdet.core.tensor2imgs"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.misc.tensor2imgs"], ["", "def", "forward_train", "(", "self", ",", "\n", "img", ",", "\n", "img_meta", ",", "\n", "gt_bboxes", "=", "None", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "train_cfg", ".", "rpn", ".", "get", "(", "'debug'", ",", "False", ")", ":", "\n", "            ", "self", ".", "rpn_head", ".", "debug_imgs", "=", "tensor2imgs", "(", "img", ")", "\n", "\n", "", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "\n", "rpn_loss_inputs", "=", "rpn_outs", "+", "(", "gt_bboxes", ",", "img_meta", ",", "self", ".", "train_cfg", ".", "rpn", ")", "\n", "losses", "=", "self", ".", "rpn_head", ".", "loss", "(", "\n", "*", "rpn_loss_inputs", ",", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.rpn.RPN.simple_test": [[57, 65], ["rpn.RPN.extract_feat", "rpn.RPN.simple_test_rpn", "proposal_list[].cpu().numpy", "zip", "proposal_list[].cpu"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.RPNTestMixin.simple_test_rpn"], ["", "def", "simple_test", "(", "self", ",", "img", ",", "img_meta", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "proposal_list", "=", "self", ".", "simple_test_rpn", "(", "x", ",", "img_meta", ",", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "if", "rescale", ":", "\n", "            ", "for", "proposals", ",", "meta", "in", "zip", "(", "proposal_list", ",", "img_meta", ")", ":", "\n", "                ", "proposals", "[", ":", ",", ":", "4", "]", "/=", "meta", "[", "'scale_factor'", "]", "\n", "# TODO: remove this restriction", "\n", "", "", "return", "proposal_list", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.rpn.RPN.aug_test": [[66, 78], ["rpn.RPN.aug_test_rpn", "proposal_list[].cpu().numpy", "rpn.RPN.extract_feats", "zip", "mmdet.core.bbox_mapping", "proposal_list[].cpu"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.RPNTestMixin.aug_test_rpn", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.extract_feats", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox_mapping"], ["", "def", "aug_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "proposal_list", "=", "self", ".", "aug_test_rpn", "(", "\n", "self", ".", "extract_feats", "(", "imgs", ")", ",", "img_metas", ",", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "if", "not", "rescale", ":", "\n", "            ", "for", "proposals", ",", "img_meta", "in", "zip", "(", "proposal_list", ",", "img_metas", "[", "0", "]", ")", ":", "\n", "                ", "img_shape", "=", "img_meta", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_meta", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_meta", "[", "'flip'", "]", "\n", "proposals", "[", ":", ",", ":", "4", "]", "=", "bbox_mapping", "(", "proposals", "[", ":", ",", ":", "4", "]", ",", "img_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "# TODO: remove this restriction", "\n", "", "", "return", "proposal_list", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.rpn.RPN.show_result": [[79, 93], ["mmdet.core.tensor2imgs", "zip", "len", "len", "mmcv.imshow_bboxes"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.misc.tensor2imgs"], ["", "def", "show_result", "(", "self", ",", "data", ",", "result", ",", "img_norm_cfg", ",", "dataset", "=", "None", ",", "top_k", "=", "20", ")", ":", "\n", "        ", "\"\"\"Show RPN proposals on the image.\n\n        Although we assume batch size is 1, this method supports arbitrary\n        batch size.\n        \"\"\"", "\n", "img_tensor", "=", "data", "[", "'img'", "]", "[", "0", "]", "\n", "img_metas", "=", "data", "[", "'img_meta'", "]", "[", "0", "]", ".", "data", "[", "0", "]", "\n", "imgs", "=", "tensor2imgs", "(", "img_tensor", ",", "**", "img_norm_cfg", ")", "\n", "assert", "len", "(", "imgs", ")", "==", "len", "(", "img_metas", ")", "\n", "for", "img", ",", "img_meta", "in", "zip", "(", "imgs", ",", "img_metas", ")", ":", "\n", "            ", "h", ",", "w", ",", "_", "=", "img_meta", "[", "'img_shape'", "]", "\n", "img_show", "=", "img", "[", ":", "h", ",", ":", "w", ",", ":", "]", "\n", "mmcv", ".", "imshow_bboxes", "(", "img_show", ",", "result", ",", "top_k", "=", "top_k", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.retinanet.RetinaNet.__init__": [[8, 17], ["single_stage.SingleStageDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "neck", ",", "\n", "bbox_head", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "RetinaNet", ",", "self", ")", ".", "__init__", "(", "backbone", ",", "neck", ",", "bbox_head", ",", "train_cfg", ",", "\n", "test_cfg", ",", "pretrained", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.fast_rcnn.FastRCNN.__init__": [[8, 30], ["two_stage.TwoStageDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "bbox_roi_extractor", ",", "\n", "bbox_head", ",", "\n", "train_cfg", ",", "\n", "test_cfg", ",", "\n", "neck", "=", "None", ",", "\n", "shared_head", "=", "None", ",", "\n", "mask_roi_extractor", "=", "None", ",", "\n", "mask_head", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "FastRCNN", ",", "self", ")", ".", "__init__", "(", "\n", "backbone", "=", "backbone", ",", "\n", "neck", "=", "neck", ",", "\n", "shared_head", "=", "shared_head", ",", "\n", "bbox_roi_extractor", "=", "bbox_roi_extractor", ",", "\n", "bbox_head", "=", "bbox_head", ",", "\n", "train_cfg", "=", "train_cfg", ",", "\n", "test_cfg", "=", "test_cfg", ",", "\n", "mask_roi_extractor", "=", "mask_roi_extractor", ",", "\n", "mask_head", "=", "mask_head", ",", "\n", "pretrained", "=", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.fast_rcnn.FastRCNN.forward_test": [[31, 51], ["len", "imgs[].size", "len", "ValueError", "fast_rcnn.FastRCNN.simple_test", "fast_rcnn.FastRCNN.aug_test", "isinstance", "TypeError", "len", "len", "type"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.simple_test", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.aug_test"], ["", "def", "forward_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "proposals", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "var", ",", "name", "in", "[", "(", "imgs", ",", "'imgs'", ")", ",", "(", "img_metas", ",", "'img_metas'", ")", "]", ":", "\n", "            ", "if", "not", "isinstance", "(", "var", ",", "list", ")", ":", "\n", "                ", "raise", "TypeError", "(", "'{} must be a list, but got {}'", ".", "format", "(", "\n", "name", ",", "type", "(", "var", ")", ")", ")", "\n", "\n", "", "", "num_augs", "=", "len", "(", "imgs", ")", "\n", "if", "num_augs", "!=", "len", "(", "img_metas", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'num of augmentations ({}) != num of image meta ({})'", ".", "format", "(", "\n", "len", "(", "imgs", ")", ",", "len", "(", "img_metas", ")", ")", ")", "\n", "# TODO: remove the restriction of imgs_per_gpu == 1 when prepared", "\n", "", "imgs_per_gpu", "=", "imgs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "assert", "imgs_per_gpu", "==", "1", "\n", "\n", "if", "num_augs", "==", "1", ":", "\n", "            ", "return", "self", ".", "simple_test", "(", "imgs", "[", "0", "]", ",", "img_metas", "[", "0", "]", ",", "proposals", "[", "0", "]", ",", "\n", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "aug_test", "(", "imgs", ",", "img_metas", ",", "proposals", ",", "**", "kwargs", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.two_stage_calibration.TwoStageDetector.__init__": [[20, 63], ["base.BaseDetector.__init__", "builder.build_backbone", "two_stage_calibration.TwoStageDetector.init_weights", "builder.build_neck", "builder.build_shared_head", "builder.build_head", "builder.build_roi_extractor", "builder.build_head", "builder.build_head", "builder.build_roi_extractor"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_backbone", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_neck", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_shared_head", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_head", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_roi_extractor", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_head", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_head", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_roi_extractor"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "neck", "=", "None", ",", "\n", "shared_head", "=", "None", ",", "\n", "rpn_head", "=", "None", ",", "\n", "bbox_roi_extractor", "=", "None", ",", "\n", "bbox_head", "=", "None", ",", "\n", "mask_roi_extractor", "=", "None", ",", "\n", "mask_head", "=", "None", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "TwoStageDetector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "builder", ".", "build_backbone", "(", "backbone", ")", "\n", "\n", "if", "neck", "is", "not", "None", ":", "\n", "            ", "self", ".", "neck", "=", "builder", ".", "build_neck", "(", "neck", ")", "\n", "\n", "", "if", "shared_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "shared_head", "=", "builder", ".", "build_shared_head", "(", "shared_head", ")", "\n", "\n", "", "if", "rpn_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "rpn_head", "=", "builder", ".", "build_head", "(", "rpn_head", ")", "\n", "\n", "", "if", "bbox_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "bbox_roi_extractor", "=", "builder", ".", "build_roi_extractor", "(", "\n", "bbox_roi_extractor", ")", "\n", "self", ".", "bbox_head", "=", "builder", ".", "build_head", "(", "bbox_head", ")", "\n", "\n", "", "if", "mask_head", "is", "not", "None", ":", "\n", "            ", "if", "mask_roi_extractor", "is", "not", "None", ":", "\n", "                ", "self", ".", "mask_roi_extractor", "=", "builder", ".", "build_roi_extractor", "(", "\n", "mask_roi_extractor", ")", "\n", "self", ".", "share_roi_extractor", "=", "False", "\n", "", "else", ":", "\n", "                ", "self", ".", "share_roi_extractor", "=", "True", "\n", "self", ".", "mask_roi_extractor", "=", "self", ".", "bbox_roi_extractor", "\n", "", "self", ".", "mask_head", "=", "builder", ".", "build_head", "(", "mask_head", ")", "\n", "\n", "", "self", ".", "train_cfg", "=", "train_cfg", "\n", "self", ".", "test_cfg", "=", "test_cfg", "\n", "\n", "self", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.two_stage_calibration.TwoStageDetector.with_rpn": [[64, 67], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_rpn", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "'rpn_head'", ")", "and", "self", ".", "rpn_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.two_stage_calibration.TwoStageDetector.init_weights": [[68, 88], ["super().init_weights", "two_stage_calibration.TwoStageDetector.backbone.init_weights", "isinstance", "two_stage_calibration.TwoStageDetector.shared_head.init_weights", "two_stage_calibration.TwoStageDetector.rpn_head.init_weights", "two_stage_calibration.TwoStageDetector.bbox_roi_extractor.init_weights", "two_stage_calibration.TwoStageDetector.bbox_head.init_weights", "two_stage_calibration.TwoStageDetector.mask_head.init_weights", "two_stage_calibration.TwoStageDetector.neck.init_weights", "two_stage_calibration.TwoStageDetector.mask_roi_extractor.init_weights", "m.init_weights"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "TwoStageDetector", ",", "self", ")", ".", "init_weights", "(", "pretrained", ")", "\n", "self", ".", "backbone", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "neck", ",", "nn", ".", "Sequential", ")", ":", "\n", "                ", "for", "m", "in", "self", ".", "neck", ":", "\n", "                    ", "m", ".", "init_weights", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "neck", ".", "init_weights", "(", ")", "\n", "", "", "if", "self", ".", "with_shared_head", ":", "\n", "            ", "self", ".", "shared_head", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "", "if", "self", ".", "with_rpn", ":", "\n", "            ", "self", ".", "rpn_head", ".", "init_weights", "(", ")", "\n", "", "if", "self", ".", "with_bbox", ":", "\n", "            ", "self", ".", "bbox_roi_extractor", ".", "init_weights", "(", ")", "\n", "self", ".", "bbox_head", ".", "init_weights", "(", ")", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "self", ".", "mask_head", ".", "init_weights", "(", ")", "\n", "if", "not", "self", ".", "share_roi_extractor", ":", "\n", "                ", "self", ".", "mask_roi_extractor", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.two_stage_calibration.TwoStageDetector.extract_feat": [[89, 94], ["two_stage_calibration.TwoStageDetector.backbone", "two_stage_calibration.TwoStageDetector.neck"], "methods", ["None"], ["", "", "", "def", "extract_feat", "(", "self", ",", "img", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "img", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "x", "=", "self", ".", "neck", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.two_stage_calibration.TwoStageDetector.forward_train": [[95, 173], ["two_stage_calibration.TwoStageDetector.extract_feat", "dict", "two_stage_calibration.TwoStageDetector.rpn_head", "two_stage_calibration.TwoStageDetector.rpn_head.loss", "dict.update", "two_stage_calibration.TwoStageDetector.train_cfg.get", "two_stage_calibration.TwoStageDetector.rpn_head.get_bboxes", "mmdet.core.build_assigner", "mmdet.core.build_sampler", "img.size", "range", "mmdet.core.bbox2roi", "two_stage_calibration.TwoStageDetector.bbox_roi_extractor", "two_stage_calibration.TwoStageDetector.bbox_head.get_target", "mmdet.core.build_assigner.assign", "mmdet.core.build_sampler.sample", "sampling_results.append", "two_stage_calibration.TwoStageDetector.shared_head", "range"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.get_bboxes", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_sampler", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.max_iou_assigner.MaxIoUAssigner.assign", "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.pseudo_sampler.PseudoSampler.sample"], ["", "def", "forward_train", "(", "self", ",", "\n", "img", ",", "\n", "img_meta", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "gt_masks", "=", "None", ",", "\n", "proposals", "=", "None", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "# RPN forward and loss", "\n", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "rpn_loss_inputs", "=", "rpn_outs", "+", "(", "gt_bboxes", ",", "img_meta", ",", "\n", "self", ".", "train_cfg", ".", "rpn", ")", "\n", "rpn_losses", "=", "self", ".", "rpn_head", ".", "loss", "(", "\n", "*", "rpn_loss_inputs", ",", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "losses", ".", "update", "(", "rpn_losses", ")", "\n", "\n", "proposal_cfg", "=", "self", ".", "train_cfg", ".", "get", "(", "'rpn_proposal'", ",", "\n", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "proposal_inputs", "=", "rpn_outs", "+", "(", "img_meta", ",", "proposal_cfg", ")", "\n", "proposal_list", "=", "self", ".", "rpn_head", ".", "get_bboxes", "(", "*", "proposal_inputs", ")", "\n", "", "else", ":", "\n", "            ", "proposal_list", "=", "proposals", "\n", "\n", "# assign gts and sample proposals", "\n", "", "if", "self", ".", "with_bbox", "or", "self", ".", "with_mask", ":", "\n", "            ", "bbox_assigner", "=", "build_assigner", "(", "self", ".", "train_cfg", ".", "rcnn", ".", "assigner", ")", "\n", "bbox_sampler", "=", "build_sampler", "(", "\n", "self", ".", "train_cfg", ".", "rcnn", ".", "sampler", ",", "context", "=", "self", ")", "\n", "num_imgs", "=", "img", ".", "size", "(", "0", ")", "\n", "if", "gt_bboxes_ignore", "is", "None", ":", "\n", "                ", "gt_bboxes_ignore", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "", "sampling_results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "                ", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "proposal_list", "[", "i", "]", ",", "\n", "gt_bboxes", "[", "i", "]", ",", "\n", "gt_bboxes_ignore", "[", "i", "]", ",", "\n", "gt_labels", "[", "i", "]", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "\n", "assign_result", ",", "\n", "proposal_list", "[", "i", "]", ",", "\n", "gt_bboxes", "[", "i", "]", ",", "\n", "gt_labels", "[", "i", "]", ",", "\n", "feats", "=", "[", "lvl_feat", "[", "i", "]", "[", "None", "]", "for", "lvl_feat", "in", "x", "]", ")", "\n", "sampling_results", ".", "append", "(", "sampling_result", ")", "\n", "\n", "# bbox head forward and loss", "\n", "", "", "if", "self", ".", "with_bbox", ":", "\n", "            ", "rois", "=", "bbox2roi", "(", "[", "res", ".", "bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "# TODO: a more flexible way to decide which feature maps to use", "\n", "bbox_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "bbox_feats", "=", "self", ".", "shared_head", "(", "bbox_feats", ")", "\n", "# cls_score, bbox_pred = self.bbox_head(bbox_feats)", "\n", "\n", "# neg_feats = [bbox_feats[res.neg_inds] for res in sampling_results]", "\n", "# pos_feats = [bbox_feats[res.pos_inds] for res in sampling_results]", "\n", "# pos_label = [bbox_feats[res.pos_gt_labels] for res in sampling_results]", "\n", "\n", "", "labels", ",", "gt_inds", ",", "gt_num", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", "=", "self", ".", "bbox_head", ".", "get_target", "(", "sampling_results", ",", "\n", "gt_bboxes", ",", "gt_labels", ",", "\n", "self", ".", "train_cfg", ".", "rcnn", ")", "\n", "\n", "neg_feats", "=", "bbox_feats", "[", "labels", "==", "0", "]", "\n", "pos_feats", "=", "bbox_feats", "[", "labels", ">", "0", "]", "\n", "pos_label", "=", "labels", "[", "labels", ">", "0", "]", "\n", "gt_inds", "=", "gt_inds", "[", "labels", ">", "0", "]", "\n", "# loss_bbox = self.bbox_head.loss(cls_score, bbox_pred,", "\n", "#                                 *bbox_targets)", "\n", "# losses.update(loss_bbox)", "\n", "\n", "", "return", "neg_feats", ",", "gt_inds", ",", "gt_num", ",", "pos_feats", ",", "pos_label", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.two_stage_calibration.TwoStageDetector.forward_bbox_head": [[175, 178], ["two_stage_calibration.TwoStageDetector.bbox_head"], "methods", ["None"], ["", "def", "forward_bbox_head", "(", "self", ",", "roi_feats", ")", ":", "\n", "\n", "        ", "return", "self", ".", "bbox_head", "(", "roi_feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.two_stage_calibration.TwoStageDetector.simple_test": [[180, 200], ["two_stage_calibration.TwoStageDetector.extract_feat", "two_stage_calibration.TwoStageDetector.simple_test_bboxes", "mmdet.core.bbox2result", "two_stage_calibration.TwoStageDetector.simple_test_rpn", "two_stage_calibration.TwoStageDetector.simple_test_mask", "proposal_list[].cpu().numpy", "proposal_list[].cpu"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.BBoxTestMixin.simple_test_bboxes", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2result", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.RPNTestMixin.simple_test_rpn", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.MaskTestMixin.simple_test_mask"], ["", "def", "simple_test", "(", "self", ",", "img", ",", "img_meta", ",", "proposals", "=", "None", ",", "rescale", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Test without augmentation.\"\"\"", "\n", "assert", "self", ".", "with_bbox", ",", "\"Bbox head must be implemented.\"", "\n", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "proposal_list", "=", "self", ".", "simple_test_rpn", "(", "##in xyxy format", "\n", "x", ",", "img_meta", ",", "self", ".", "test_cfg", ".", "rpn", ")", "if", "proposals", "is", "None", "else", "proposals", "\n", "\n", "det_bboxes", ",", "det_labels", "=", "self", ".", "simple_test_bboxes", "(", "\n", "x", ",", "img_meta", ",", "proposal_list", ",", "kwargs", "[", "'cal_head'", "]", ",", "self", ".", "test_cfg", ".", "rcnn", ",", "rescale", "=", "rescale", ")", "\n", "bbox_results", "=", "bbox2result", "(", "det_bboxes", ",", "det_labels", ",", "\n", "self", ".", "bbox_head", ".", "num_classes", ")", "\n", "\n", "if", "not", "self", ".", "with_mask", ":", "\n", "            ", "return", "bbox_results", "\n", "", "else", ":", "\n", "            ", "segm_results", "=", "self", ".", "simple_test_mask", "(", "\n", "x", ",", "img_meta", ",", "det_bboxes", ",", "det_labels", ",", "rescale", "=", "rescale", ")", "\n", "return", "bbox_results", ",", "segm_results", ",", "proposal_list", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.two_stage_calibration.TwoStageDetector.aug_test": [[201, 229], ["two_stage_calibration.TwoStageDetector.aug_test_rpn", "two_stage_calibration.TwoStageDetector.aug_test_bboxes", "mmdet.core.bbox2result", "two_stage_calibration.TwoStageDetector.extract_feats", "two_stage_calibration.TwoStageDetector.extract_feats", "det_bboxes.clone", "two_stage_calibration.TwoStageDetector.aug_test_mask", "two_stage_calibration.TwoStageDetector.extract_feats"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.RPNTestMixin.aug_test_rpn", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.BBoxTestMixin.aug_test_bboxes", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2result", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.extract_feats", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.extract_feats", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.MaskTestMixin.aug_test_mask", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.extract_feats"], ["", "", "def", "aug_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\"Test with augmentations.\n\n        If rescale is False, then returned bboxes and masks will fit the scale\n        of imgs[0].\n        \"\"\"", "\n", "# recompute feats to save memory", "\n", "proposal_list", "=", "self", ".", "aug_test_rpn", "(", "\n", "self", ".", "extract_feats", "(", "imgs", ")", ",", "img_metas", ",", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "det_bboxes", ",", "det_labels", "=", "self", ".", "aug_test_bboxes", "(", "\n", "self", ".", "extract_feats", "(", "imgs", ")", ",", "img_metas", ",", "proposal_list", ",", "\n", "self", ".", "test_cfg", ".", "rcnn", ")", "\n", "\n", "if", "rescale", ":", "\n", "            ", "_det_bboxes", "=", "det_bboxes", "\n", "", "else", ":", "\n", "            ", "_det_bboxes", "=", "det_bboxes", ".", "clone", "(", ")", "\n", "_det_bboxes", "[", ":", ",", ":", "4", "]", "*=", "img_metas", "[", "0", "]", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "", "bbox_results", "=", "bbox2result", "(", "_det_bboxes", ",", "det_labels", ",", "\n", "self", ".", "bbox_head", ".", "num_classes", ")", "\n", "\n", "# det_bboxes always keep the original scale", "\n", "if", "self", ".", "with_mask", ":", "\n", "            ", "segm_results", "=", "self", ".", "aug_test_mask", "(", "\n", "self", ".", "extract_feats", "(", "imgs", ")", ",", "img_metas", ",", "det_bboxes", ",", "det_labels", ")", "\n", "return", "bbox_results", ",", "segm_results", "\n", "", "else", ":", "\n", "            ", "return", "bbox_results", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.htc.HybridTaskCascade.__init__": [[16, 36], ["cascade_rcnn.CascadeRCNN.__init__", "builder.build_roi_extractor", "builder.build_head"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_roi_extractor", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_head"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_stages", ",", "\n", "backbone", ",", "\n", "semantic_roi_extractor", "=", "None", ",", "\n", "semantic_head", "=", "None", ",", "\n", "semantic_fusion", "=", "(", "'bbox'", ",", "'mask'", ")", ",", "\n", "interleaved", "=", "True", ",", "\n", "mask_info_flow", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "HybridTaskCascade", ",", "self", ")", ".", "__init__", "(", "num_stages", ",", "backbone", ",", "**", "kwargs", ")", "\n", "assert", "self", ".", "with_bbox", "and", "self", ".", "with_mask", "\n", "assert", "not", "self", ".", "with_shared_head", "# shared head not supported", "\n", "if", "semantic_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "semantic_roi_extractor", "=", "builder", ".", "build_roi_extractor", "(", "\n", "semantic_roi_extractor", ")", "\n", "self", ".", "semantic_head", "=", "builder", ".", "build_head", "(", "semantic_head", ")", "\n", "\n", "", "self", ".", "semantic_fusion", "=", "semantic_fusion", "\n", "self", ".", "interleaved", "=", "interleaved", "\n", "self", ".", "mask_info_flow", "=", "mask_info_flow", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.htc.HybridTaskCascade.with_semantic": [[37, 43], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_semantic", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'semantic_head'", ")", "and", "self", ".", "semantic_head", "is", "not", "None", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.htc.HybridTaskCascade._bbox_forward_train": [[44, 75], ["mmdet.core.bbox2roi", "bbox_roi_extractor", "bbox_head", "bbox_head.get_target", "bbox_head.loss", "htc.HybridTaskCascade.semantic_roi_extractor", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss"], ["", "", "def", "_bbox_forward_train", "(", "self", ",", "\n", "stage", ",", "\n", "x", ",", "\n", "sampling_results", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "rcnn_train_cfg", ",", "\n", "semantic_feat", "=", "None", ")", ":", "\n", "        ", "rois", "=", "bbox2roi", "(", "[", "res", ".", "bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "bbox_roi_extractor", "=", "self", ".", "bbox_roi_extractor", "[", "stage", "]", "\n", "bbox_head", "=", "self", ".", "bbox_head", "[", "stage", "]", "\n", "bbox_feats", "=", "bbox_roi_extractor", "(", "x", "[", ":", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "\n", "rois", ")", "\n", "# semantic feature fusion", "\n", "# element-wise sum for original features and pooled semantic features", "\n", "if", "self", ".", "with_semantic", "and", "'bbox'", "in", "self", ".", "semantic_fusion", ":", "\n", "            ", "bbox_semantic_feat", "=", "self", ".", "semantic_roi_extractor", "(", "[", "semantic_feat", "]", ",", "\n", "rois", ")", "\n", "if", "bbox_semantic_feat", ".", "shape", "[", "-", "2", ":", "]", "!=", "bbox_feats", ".", "shape", "[", "-", "2", ":", "]", ":", "\n", "                ", "bbox_semantic_feat", "=", "F", ".", "adaptive_avg_pool2d", "(", "\n", "bbox_semantic_feat", ",", "bbox_feats", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "", "bbox_feats", "+=", "bbox_semantic_feat", "\n", "\n", "", "cls_score", ",", "bbox_pred", "=", "bbox_head", "(", "bbox_feats", ")", "\n", "##", "\n", "\n", "bbox_targets", "=", "bbox_head", ".", "get_target", "(", "sampling_results", ",", "gt_bboxes", ",", "\n", "gt_labels", ",", "rcnn_train_cfg", ")", "\n", "bbox_targets_temp", "=", "(", "bbox_targets", "[", "0", "]", ",", ")", "+", "(", "bbox_targets", "[", "2", ":", "]", ")", "\n", "loss_bbox", "=", "bbox_head", ".", "loss", "(", "cls_score", ",", "bbox_pred", ",", "*", "bbox_targets_temp", ")", "\n", "return", "loss_bbox", ",", "rois", ",", "bbox_targets", ",", "bbox_pred", ",", "bbox_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.htc.HybridTaskCascade._mask_forward_train": [[76, 116], ["mmdet.core.bbox2roi", "mask_roi_extractor", "mask_head.get_target", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mask_head.loss", "htc.HybridTaskCascade.semantic_roi_extractor", "range", "mask_head", "mask_head", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss"], ["", "def", "_mask_forward_train", "(", "self", ",", "\n", "stage", ",", "\n", "x", ",", "\n", "sampling_results", ",", "\n", "gt_masks", ",", "\n", "rcnn_train_cfg", ",", "\n", "semantic_feat", "=", "None", ")", ":", "\n", "        ", "mask_roi_extractor", "=", "self", ".", "mask_roi_extractor", "[", "stage", "]", "\n", "mask_head", "=", "self", ".", "mask_head", "[", "stage", "]", "\n", "pos_rois", "=", "bbox2roi", "(", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "mask_feats", "=", "mask_roi_extractor", "(", "x", "[", ":", "mask_roi_extractor", ".", "num_inputs", "]", ",", "\n", "pos_rois", ")", "\n", "\n", "# semantic feature fusion", "\n", "# element-wise sum for original features and pooled semantic features", "\n", "if", "self", ".", "with_semantic", "and", "'mask'", "in", "self", ".", "semantic_fusion", ":", "\n", "            ", "mask_semantic_feat", "=", "self", ".", "semantic_roi_extractor", "(", "[", "semantic_feat", "]", ",", "\n", "pos_rois", ")", "\n", "if", "mask_semantic_feat", ".", "shape", "[", "-", "2", ":", "]", "!=", "mask_feats", ".", "shape", "[", "-", "2", ":", "]", ":", "\n", "                ", "mask_semantic_feat", "=", "F", ".", "adaptive_avg_pool2d", "(", "\n", "mask_semantic_feat", ",", "mask_feats", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "", "mask_feats", "+=", "mask_semantic_feat", "\n", "\n", "# mask information flow", "\n", "# forward all previous mask heads to obtain last_feat, and fuse it", "\n", "# with the normal mask feature", "\n", "", "if", "self", ".", "mask_info_flow", ":", "\n", "            ", "last_feat", "=", "None", "\n", "for", "i", "in", "range", "(", "stage", ")", ":", "\n", "                ", "last_feat", "=", "self", ".", "mask_head", "[", "i", "]", "(", "\n", "mask_feats", ",", "last_feat", ",", "return_logits", "=", "False", ")", "\n", "", "mask_pred", "=", "mask_head", "(", "mask_feats", ",", "last_feat", ",", "return_feat", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "mask_pred", "=", "mask_head", "(", "mask_feats", ")", "\n", "\n", "", "mask_targets", "=", "mask_head", ".", "get_target", "(", "sampling_results", ",", "gt_masks", ",", "\n", "rcnn_train_cfg", ")", "\n", "pos_labels", "=", "torch", ".", "cat", "(", "[", "res", ".", "pos_gt_labels", "for", "res", "in", "sampling_results", "]", ")", "\n", "loss_mask", "=", "mask_head", ".", "loss", "(", "mask_pred", ",", "mask_targets", ",", "pos_labels", ")", "\n", "return", "loss_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.htc.HybridTaskCascade._bbox_forward_test": [[117, 133], ["bbox_roi_extractor", "bbox_head", "olongtailmodel", "htc.HybridTaskCascade.semantic_roi_extractor", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "len"], "methods", ["None"], ["", "def", "_bbox_forward_test", "(", "self", ",", "stage", ",", "x", ",", "rois", ",", "olongtailmodel", ",", "semantic_feat", "=", "None", ")", ":", "\n", "        ", "bbox_roi_extractor", "=", "self", ".", "bbox_roi_extractor", "[", "stage", "]", "\n", "bbox_head", "=", "self", ".", "bbox_head", "[", "stage", "]", "\n", "bbox_feats", "=", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "bbox_roi_extractor", ".", "featmap_strides", ")", "]", ",", "rois", ")", "\n", "if", "self", ".", "with_semantic", "and", "'bbox'", "in", "self", ".", "semantic_fusion", ":", "\n", "            ", "bbox_semantic_feat", "=", "self", ".", "semantic_roi_extractor", "(", "[", "semantic_feat", "]", ",", "\n", "rois", ")", "\n", "if", "bbox_semantic_feat", ".", "shape", "[", "-", "2", ":", "]", "!=", "bbox_feats", ".", "shape", "[", "-", "2", ":", "]", ":", "\n", "                ", "bbox_semantic_feat", "=", "F", ".", "adaptive_avg_pool2d", "(", "\n", "bbox_semantic_feat", ",", "bbox_feats", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "", "bbox_feats", "+=", "bbox_semantic_feat", "\n", "", "cls_score", ",", "bbox_pred", "=", "bbox_head", "(", "bbox_feats", ")", "\n", "longtailmodel_cls_score", "=", "olongtailmodel", "(", "bbox_feats", ")", "\n", "\n", "return", "cls_score", ",", "longtailmodel_cls_score", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.htc.HybridTaskCascade._mask_forward_test": [[134, 161], ["mmdet.core.bbox2roi", "mask_roi_extractor", "htc.HybridTaskCascade.semantic_roi_extractor", "range", "mask_head", "mask_head", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "len"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi"], ["", "def", "_mask_forward_test", "(", "self", ",", "stage", ",", "x", ",", "bboxes", ",", "semantic_feat", "=", "None", ")", ":", "\n", "        ", "mask_roi_extractor", "=", "self", ".", "mask_roi_extractor", "[", "stage", "]", "\n", "mask_head", "=", "self", ".", "mask_head", "[", "stage", "]", "\n", "mask_rois", "=", "bbox2roi", "(", "[", "bboxes", "]", ")", "\n", "mask_feats", "=", "mask_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "mask_roi_extractor", ".", "featmap_strides", ")", "]", ",", "mask_rois", ")", "\n", "if", "self", ".", "with_semantic", "and", "'mask'", "in", "self", ".", "semantic_fusion", ":", "\n", "            ", "mask_semantic_feat", "=", "self", ".", "semantic_roi_extractor", "(", "[", "semantic_feat", "]", ",", "\n", "mask_rois", ")", "\n", "if", "mask_semantic_feat", ".", "shape", "[", "-", "2", ":", "]", "!=", "mask_feats", ".", "shape", "[", "-", "2", ":", "]", ":", "\n", "                ", "mask_semantic_feat", "=", "F", ".", "adaptive_avg_pool2d", "(", "\n", "mask_semantic_feat", ",", "mask_feats", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "", "mask_feats", "+=", "mask_semantic_feat", "\n", "", "if", "self", ".", "mask_info_flow", ":", "\n", "            ", "last_feat", "=", "None", "\n", "last_pred", "=", "None", "\n", "for", "i", "in", "range", "(", "stage", ")", ":", "\n", "                ", "mask_pred", ",", "last_feat", "=", "self", ".", "mask_head", "[", "i", "]", "(", "mask_feats", ",", "last_feat", ")", "\n", "if", "last_pred", "is", "not", "None", ":", "\n", "                    ", "mask_pred", "=", "mask_pred", "+", "last_pred", "\n", "", "last_pred", "=", "mask_pred", "\n", "", "mask_pred", "=", "mask_head", "(", "mask_feats", ",", "last_feat", ",", "return_feat", "=", "False", ")", "\n", "if", "last_pred", "is", "not", "None", ":", "\n", "                ", "mask_pred", "=", "mask_pred", "+", "last_pred", "\n", "", "", "else", ":", "\n", "            ", "mask_pred", "=", "mask_head", "(", "mask_feats", ")", "\n", "", "return", "mask_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.htc.HybridTaskCascade.forward_dummy": [[162, 201], ["htc.HybridTaskCascade.extract_feat", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "mmdet.core.bbox2roi", "range", "htc.HybridTaskCascade.rpn_head", "htc.HybridTaskCascade.semantic_head", "htc.HybridTaskCascade._bbox_forward_test", "mask_roi_extractor", "range", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "htc.HybridTaskCascade.semantic_roi_extractor", "mask_head", "mask_head", "len"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.htc.HybridTaskCascade._bbox_forward_test"], ["", "def", "forward_dummy", "(", "self", ",", "img", ")", ":", "\n", "        ", "outs", "=", "(", ")", "\n", "# backbone", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "# rpn", "\n", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "outs", "=", "outs", "+", "(", "rpn_outs", ",", ")", "\n", "", "proposals", "=", "torch", ".", "randn", "(", "1000", ",", "4", ")", ".", "cuda", "(", ")", "\n", "# semantic head", "\n", "if", "self", ".", "with_semantic", ":", "\n", "            ", "_", ",", "semantic_feat", "=", "self", ".", "semantic_head", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "semantic_feat", "=", "None", "\n", "# bbox heads", "\n", "", "rois", "=", "bbox2roi", "(", "[", "proposals", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "cls_score", ",", "bbox_pred", "=", "self", ".", "_bbox_forward_test", "(", "\n", "i", ",", "x", ",", "rois", ",", "semantic_feat", "=", "semantic_feat", ")", "\n", "outs", "=", "outs", "+", "(", "cls_score", ",", "bbox_pred", ")", "\n", "# mask heads", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "mask_rois", "=", "rois", "[", ":", "100", "]", "\n", "mask_roi_extractor", "=", "self", ".", "mask_roi_extractor", "[", "-", "1", "]", "\n", "mask_feats", "=", "mask_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "mask_roi_extractor", ".", "featmap_strides", ")", "]", ",", "mask_rois", ")", "\n", "if", "self", ".", "with_semantic", "and", "'mask'", "in", "self", ".", "semantic_fusion", ":", "\n", "                ", "mask_semantic_feat", "=", "self", ".", "semantic_roi_extractor", "(", "\n", "[", "semantic_feat", "]", ",", "mask_rois", ")", "\n", "mask_feats", "+=", "mask_semantic_feat", "\n", "", "last_feat", "=", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "                ", "mask_head", "=", "self", ".", "mask_head", "[", "i", "]", "\n", "if", "self", ".", "mask_info_flow", ":", "\n", "                    ", "mask_pred", ",", "last_feat", "=", "mask_head", "(", "mask_feats", ",", "last_feat", ")", "\n", "", "else", ":", "\n", "                    ", "mask_pred", "=", "mask_head", "(", "mask_feats", ")", "\n", "", "outs", "=", "outs", "+", "(", "mask_pred", ",", ")", "\n", "", "", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.htc.HybridTaskCascade.forward_train": [[202, 326], ["htc.HybridTaskCascade.extract_feat", "dict", "range", "htc.HybridTaskCascade.rpn_head", "htc.HybridTaskCascade.train_cfg.get", "htc.HybridTaskCascade.rpn_head.get_bboxes", "htc.HybridTaskCascade.semantic_head", "mmdet.core.build_assigner", "mmdet.core.build_sampler", "img.size", "range", "htc.HybridTaskCascade._bbox_forward_train", "collected_rois.append", "loss_bbox.items", "mmdet.core.build_assigner.assign", "mmdet.core.build_sampler.sample", "sampling_results.append", "htc.HybridTaskCascade._mask_forward_train", "htc.HybridTaskCascade.items", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "htc.HybridTaskCascade.bbox_head[].refine_bboxes", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "htc.HybridTaskCascade.bbox_head[].refine_bboxes", "range", "mmdet.core.build_assigner.assign", "mmdet.core.build_sampler.sample", "sampling_results.append"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.get_bboxes", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_sampler", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.htc.HybridTaskCascade._bbox_forward_train", "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.max_iou_assigner.MaxIoUAssigner.assign", "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.pseudo_sampler.PseudoSampler.sample", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.htc.HybridTaskCascade._mask_forward_train", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.refine_bboxes", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.refine_bboxes", "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.max_iou_assigner.MaxIoUAssigner.assign", "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.pseudo_sampler.PseudoSampler.sample"], ["", "def", "forward_train", "(", "self", ",", "\n", "img", ",", "\n", "img_meta", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "gt_masks", "=", "None", ",", "\n", "gt_semantic_seg", "=", "None", ",", "\n", "proposals", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "# RPN part, the same as normal two-stage detectors", "\n", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "rpn_loss_inputs", "=", "rpn_outs", "+", "(", "gt_bboxes", ",", "img_meta", ",", "\n", "self", ".", "train_cfg", ".", "rpn", ")", "\n", "# rpn_losses = self.rpn_head.loss(", "\n", "#     *rpn_loss_inputs, gt_bboxes_ignore=gt_bboxes_ignore)", "\n", "# losses.update(rpn_losses)", "\n", "\n", "proposal_cfg", "=", "self", ".", "train_cfg", ".", "get", "(", "'rpn_proposal'", ",", "\n", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "proposal_inputs", "=", "rpn_outs", "+", "(", "img_meta", ",", "proposal_cfg", ")", "\n", "proposal_list", "=", "self", ".", "rpn_head", ".", "get_bboxes", "(", "*", "proposal_inputs", ")", "\n", "", "else", ":", "\n", "            ", "proposal_list", "=", "proposals", "\n", "\n", "# semantic segmentation part", "\n", "# 2 outputs: segmentation prediction and embedded features", "\n", "", "if", "self", ".", "with_semantic", ":", "\n", "            ", "semantic_pred", ",", "semantic_feat", "=", "self", ".", "semantic_head", "(", "x", ")", "\n", "# loss_seg = self.semantic_head.loss(semantic_pred, gt_semantic_seg)", "\n", "losses", "[", "'loss_semantic_seg'", "]", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "semantic_feat", "=", "None", "\n", "\n", "##collect rois", "\n", "", "collected_rois", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "self", ".", "current_stage", "=", "i", "\n", "rcnn_train_cfg", "=", "self", ".", "train_cfg", ".", "rcnn", "[", "i", "]", "\n", "lw", "=", "self", ".", "train_cfg", ".", "stage_loss_weights", "[", "i", "]", "\n", "\n", "# assign gts and sample proposals", "\n", "sampling_results", "=", "[", "]", "\n", "bbox_assigner", "=", "build_assigner", "(", "rcnn_train_cfg", ".", "assigner", ")", "\n", "bbox_sampler", "=", "build_sampler", "(", "rcnn_train_cfg", ".", "sampler", ",", "context", "=", "self", ")", "\n", "num_imgs", "=", "img", ".", "size", "(", "0", ")", "\n", "if", "gt_bboxes_ignore", "is", "None", ":", "\n", "                ", "gt_bboxes_ignore", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "\n", "", "for", "j", "in", "range", "(", "num_imgs", ")", ":", "\n", "                ", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "proposal_list", "[", "j", "]", ",", "\n", "gt_bboxes", "[", "j", "]", ",", "\n", "gt_bboxes_ignore", "[", "j", "]", ",", "\n", "gt_labels", "[", "j", "]", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "\n", "assign_result", ",", "\n", "proposal_list", "[", "j", "]", ",", "\n", "gt_bboxes", "[", "j", "]", ",", "\n", "gt_labels", "[", "j", "]", ",", "\n", "feats", "=", "[", "lvl_feat", "[", "j", "]", "[", "None", "]", "for", "lvl_feat", "in", "x", "]", ")", "\n", "sampling_results", ".", "append", "(", "sampling_result", ")", "\n", "\n", "# bbox head forward and loss", "\n", "", "loss_bbox", ",", "rois", ",", "bbox_targets", ",", "bbox_pred", ",", "bbox_feats", "=", "self", ".", "_bbox_forward_train", "(", "\n", "i", ",", "x", ",", "sampling_results", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "rcnn_train_cfg", ",", "semantic_feat", ")", "\n", "roi_labels", "=", "bbox_targets", "[", "0", "]", "\n", "\n", "##  collect rois", "\n", "labels", ",", "gt_num", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", "=", "bbox_targets", "\n", "neg_feats", "=", "bbox_feats", "[", "labels", "==", "0", "]", "\n", "pos_feats", "=", "bbox_feats", "[", "labels", ">", "0", "]", "\n", "pos_label", "=", "labels", "[", "labels", ">", "0", "]", "\n", "\n", "collected_rois", ".", "append", "(", "(", "neg_feats", ",", "gt_num", ",", "pos_feats", ",", "pos_label", ")", ")", "\n", "\n", "for", "name", ",", "value", "in", "loss_bbox", ".", "items", "(", ")", ":", "\n", "                ", "losses", "[", "'s{}.{}'", ".", "format", "(", "i", ",", "name", ")", "]", "=", "(", "\n", "value", "*", "lw", "if", "'loss'", "in", "name", "else", "value", ")", "\n", "\n", "# mask head forward and loss", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "# interleaved execution: use regressed bboxes by the box branch", "\n", "# to train the mask branch", "\n", "                ", "if", "self", ".", "interleaved", ":", "\n", "                    ", "pos_is_gts", "=", "[", "res", ".", "pos_is_gt", "for", "res", "in", "sampling_results", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "proposal_list", "=", "self", ".", "bbox_head", "[", "i", "]", ".", "refine_bboxes", "(", "\n", "rois", ",", "roi_labels", ",", "bbox_pred", ",", "pos_is_gts", ",", "img_meta", ")", "\n", "# re-assign and sample 512 RoIs from 512 RoIs", "\n", "sampling_results", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_imgs", ")", ":", "\n", "                            ", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "\n", "proposal_list", "[", "j", "]", ",", "gt_bboxes", "[", "j", "]", ",", "\n", "gt_bboxes_ignore", "[", "j", "]", ",", "gt_labels", "[", "j", "]", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "\n", "assign_result", ",", "\n", "proposal_list", "[", "j", "]", ",", "\n", "gt_bboxes", "[", "j", "]", ",", "\n", "gt_labels", "[", "j", "]", ",", "\n", "feats", "=", "[", "lvl_feat", "[", "j", "]", "[", "None", "]", "for", "lvl_feat", "in", "x", "]", ")", "\n", "sampling_results", ".", "append", "(", "sampling_result", ")", "\n", "", "", "", "loss_mask", "=", "self", ".", "_mask_forward_train", "(", "i", ",", "x", ",", "sampling_results", ",", "\n", "gt_masks", ",", "rcnn_train_cfg", ",", "\n", "semantic_feat", ")", "\n", "for", "name", ",", "value", "in", "loss_mask", ".", "items", "(", ")", ":", "\n", "                    ", "losses", "[", "'s{}.{}'", ".", "format", "(", "i", ",", "name", ")", "]", "=", "(", "\n", "value", "*", "lw", "if", "'loss'", "in", "name", "else", "value", ")", "\n", "\n", "# refine bboxes (same as Cascade R-CNN)", "\n", "", "", "if", "i", "<", "self", ".", "num_stages", "-", "1", "and", "not", "self", ".", "interleaved", ":", "\n", "                ", "pos_is_gts", "=", "[", "res", ".", "pos_is_gt", "for", "res", "in", "sampling_results", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "proposal_list", "=", "self", ".", "bbox_head", "[", "i", "]", ".", "refine_bboxes", "(", "\n", "rois", ",", "roi_labels", ",", "bbox_pred", ",", "pos_is_gts", ",", "img_meta", ")", "\n", "\n", "# return neg_feats, gt_num, pos_feats, pos_label", "\n", "\n", "", "", "", "return", "collected_rois", "[", "0", "]", "+", "collected_rois", "[", "1", "]", "+", "collected_rois", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.htc.HybridTaskCascade.simple_test": [[327, 473], ["htc.HybridTaskCascade.extract_feat", "mmdet.core.bbox2roi", "range", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "htc.HybridTaskCascade.bbox_head[].get_det_bboxes", "mmdet.core.bbox2result", "htc.HybridTaskCascade.simple_test_rpn", "htc.HybridTaskCascade.semantic_head", "htc.HybridTaskCascade._bbox_forward_test", "ms_scores.append", "torch.stack().mean.append", "torch.stack().mean.append", "sum", "float", "bbox_head.get_det_bboxes", "mmdet.core.bbox2result", "cls_score.argmax", "bbox_head.regress_by_class", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "mmdet.core.bbox2roi", "mask_roi_extractor", "range", "mmdet.core.merge_aug_masks", "htc.HybridTaskCascade.mask_head[].get_seg_masks", "htc.HybridTaskCascade.semantic_roi_extractor", "aug_masks.append", "htc.HybridTaskCascade._mask_forward_test", "mask_head.get_seg_masks", "range", "mask_head", "mask_head", "mask_head.sigmoid().cpu().numpy", "len", "range", "mask_head.sigmoid().cpu", "mask_head.sigmoid"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_det_bboxes", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2result", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.RPNTestMixin.simple_test_rpn", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.htc.HybridTaskCascade._bbox_forward_test", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_det_bboxes", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2result", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.regress_by_class", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.post_processing.merge_augs.merge_aug_masks", "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.fcn_mask_head.FCNMaskHead.get_seg_masks", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.htc.HybridTaskCascade._mask_forward_test", "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.fcn_mask_head.FCNMaskHead.get_seg_masks"], ["", "def", "simple_test", "(", "self", ",", "img", ",", "img_meta", ",", "proposals", "=", "None", ",", "rescale", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "proposal_list", "=", "self", ".", "simple_test_rpn", "(", "\n", "x", ",", "img_meta", ",", "self", ".", "test_cfg", ".", "rpn", ")", "if", "proposals", "is", "None", "else", "proposals", "\n", "\n", "if", "self", ".", "with_semantic", ":", "\n", "            ", "_", ",", "semantic_feat", "=", "self", ".", "semantic_head", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "semantic_feat", "=", "None", "\n", "\n", "", "img_shape", "=", "img_meta", "[", "0", "]", "[", "'img_shape'", "]", "\n", "ori_shape", "=", "img_meta", "[", "0", "]", "[", "'ori_shape'", "]", "\n", "scale_factor", "=", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "\n", "# \"ms\" in variable names means multi-stage", "\n", "ms_bbox_result", "=", "{", "}", "\n", "ms_segm_result", "=", "{", "}", "\n", "ms_scores", "=", "[", "]", "\n", "rcnn_test_cfg", "=", "self", ".", "test_cfg", ".", "rcnn", "\n", "\n", "rois", "=", "bbox2roi", "(", "proposal_list", ")", "\n", "olongtail_cls_score_all", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "bbox_head", "=", "self", ".", "bbox_head", "[", "i", "]", "\n", "cls_score", ",", "olongtail_cls_score", ",", "bbox_pred", "=", "self", ".", "_bbox_forward_test", "(", "\n", "i", ",", "x", ",", "rois", ",", "kwargs", "[", "'olongtailmodel'", "]", "[", "i", "]", ",", "semantic_feat", "=", "semantic_feat", ")", "\n", "ms_scores", ".", "append", "(", "cls_score", ")", "\n", "olongtail_cls_score_all", ".", "append", "(", "olongtail_cls_score", ")", "\n", "\n", "if", "self", ".", "test_cfg", ".", "keep_all_stages", ":", "\n", "                ", "det_bboxes", ",", "det_labels", "=", "bbox_head", ".", "get_det_bboxes", "(", "\n", "rois", ",", "\n", "cls_score", ",", "\n", "bbox_pred", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "rescale", "=", "rescale", ",", "\n", "nms_cfg", "=", "rcnn_test_cfg", ")", "\n", "bbox_result", "=", "bbox2result", "(", "det_bboxes", ",", "det_labels", ",", "\n", "bbox_head", ".", "num_classes", ")", "\n", "ms_bbox_result", "[", "'stage{}'", ".", "format", "(", "i", ")", "]", "=", "bbox_result", "\n", "\n", "if", "self", ".", "with_mask", ":", "\n", "                    ", "mask_head", "=", "self", ".", "mask_head", "[", "i", "]", "\n", "if", "det_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                        ", "mask_classes", "=", "mask_head", ".", "num_classes", "-", "1", "\n", "segm_result", "=", "[", "[", "]", "for", "_", "in", "range", "(", "mask_classes", ")", "]", "\n", "", "else", ":", "\n", "                        ", "_bboxes", "=", "(", "\n", "det_bboxes", "[", ":", ",", ":", "4", "]", "*", "\n", "scale_factor", "if", "rescale", "else", "det_bboxes", ")", "\n", "mask_pred", "=", "self", ".", "_mask_forward_test", "(", "\n", "i", ",", "x", ",", "_bboxes", ",", "semantic_feat", "=", "semantic_feat", ")", "\n", "segm_result", "=", "mask_head", ".", "get_seg_masks", "(", "\n", "mask_pred", ",", "_bboxes", ",", "det_labels", ",", "rcnn_test_cfg", ",", "\n", "ori_shape", ",", "scale_factor", ",", "rescale", ")", "\n", "", "ms_segm_result", "[", "'stage{}'", ".", "format", "(", "i", ")", "]", "=", "segm_result", "\n", "\n", "", "", "if", "i", "<", "self", ".", "num_stages", "-", "1", ":", "\n", "                ", "bbox_label", "=", "cls_score", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "rois", "=", "bbox_head", ".", "regress_by_class", "(", "rois", ",", "bbox_label", ",", "bbox_pred", ",", "\n", "img_meta", "[", "0", "]", ")", "\n", "\n", "", "", "cls_score", "=", "sum", "(", "ms_scores", ")", "/", "float", "(", "len", "(", "ms_scores", ")", ")", "\n", "\n", "##", "\n", "olongtail_cls_score_all", "=", "torch", ".", "stack", "(", "olongtail_cls_score_all", ")", ".", "mean", "(", "0", ")", "\n", "\n", "\n", "##to saveout the cls head prediction for ensembling", "\n", "# olongtail_scores = F.softmax(olongtail_cls_score_all, dim=1)", "\n", "# save_idx = img_meta[0]['filename'].split('/')[-1].split('.')[0]", "\n", "# dets_save_path = osp.join('./ensemble_non_ssd', 'ensemble_valset', 'det', 'htc_31d9_x101_64d_ms_dcn_longtail_clsscore',", "\n", "#                           save_idx + '_')", "\n", "# # dets_save_path = osp.join('./ensemble', 'ensemble_testset', 'det', 'htc_31d9_x101_64d_ms_dcn_longtail_clsscore',", "\n", "# #                           save_idx + '_')", "\n", "#", "\n", "# # if not osp.exists(osp.join('./ensemble', 'ensemble_testset', 'det', 'htc_31d9_x101_64d_ms_dcn_longtail_clsscore')):", "\n", "# #     os.mkdir(osp.join('./ensemble', 'ensemble_testset', 'det', 'htc_31d9_x101_64d_ms_dcn_longtail_clsscore'))", "\n", "#", "\n", "# torch.save(olongtail_scores, dets_save_path + 'dets_cls.pt')", "\n", "# return 0", "\n", "\n", "det_bboxes", ",", "det_labels", "=", "self", ".", "bbox_head", "[", "-", "1", "]", ".", "get_det_bboxes", "(", "\n", "rois", ",", "\n", "cls_score", ",", "\n", "olongtail_cls_score_all", ",", "\n", "bbox_pred", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "rescale", "=", "rescale", ",", "\n", "cfg", "=", "rcnn_test_cfg", ")", "\n", "bbox_result", "=", "bbox2result", "(", "det_bboxes", ",", "det_labels", ",", "\n", "self", ".", "bbox_head", "[", "-", "1", "]", ".", "num_classes", ")", "\n", "ms_bbox_result", "[", "'ensemble'", "]", "=", "bbox_result", "\n", "\n", "if", "self", ".", "with_mask", ":", "\n", "            ", "if", "det_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "mask_classes", "=", "self", ".", "mask_head", "[", "-", "1", "]", ".", "num_classes", "-", "1", "\n", "segm_result", "=", "[", "[", "]", "for", "_", "in", "range", "(", "mask_classes", ")", "]", "\n", "", "else", ":", "\n", "                ", "_bboxes", "=", "(", "\n", "det_bboxes", "[", ":", ",", ":", "4", "]", "*", "\n", "scale_factor", "if", "rescale", "else", "det_bboxes", ")", "\n", "\n", "mask_rois", "=", "bbox2roi", "(", "[", "_bboxes", "]", ")", "\n", "aug_masks", "=", "[", "]", "\n", "mask_roi_extractor", "=", "self", ".", "mask_roi_extractor", "[", "-", "1", "]", "\n", "mask_feats", "=", "mask_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "mask_roi_extractor", ".", "featmap_strides", ")", "]", ",", "mask_rois", ")", "\n", "if", "self", ".", "with_semantic", "and", "'mask'", "in", "self", ".", "semantic_fusion", ":", "\n", "                    ", "mask_semantic_feat", "=", "self", ".", "semantic_roi_extractor", "(", "\n", "[", "semantic_feat", "]", ",", "mask_rois", ")", "\n", "mask_feats", "+=", "mask_semantic_feat", "\n", "", "last_feat", "=", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "                    ", "mask_head", "=", "self", ".", "mask_head", "[", "i", "]", "\n", "if", "self", ".", "mask_info_flow", ":", "\n", "                        ", "mask_pred", ",", "last_feat", "=", "mask_head", "(", "mask_feats", ",", "last_feat", ")", "\n", "", "else", ":", "\n", "                        ", "mask_pred", "=", "mask_head", "(", "mask_feats", ")", "\n", "", "aug_masks", ".", "append", "(", "mask_pred", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "merged_masks", "=", "merge_aug_masks", "(", "aug_masks", ",", "\n", "[", "img_meta", "]", "*", "self", ".", "num_stages", ",", "\n", "self", ".", "test_cfg", ".", "rcnn", ")", "\n", "segm_result", "=", "self", ".", "mask_head", "[", "-", "1", "]", ".", "get_seg_masks", "(", "\n", "merged_masks", ",", "_bboxes", ",", "det_labels", ",", "rcnn_test_cfg", ",", "\n", "ori_shape", ",", "scale_factor", ",", "rescale", ")", "\n", "", "ms_segm_result", "[", "'ensemble'", "]", "=", "segm_result", "\n", "\n", "", "if", "not", "self", ".", "test_cfg", ".", "keep_all_stages", ":", "\n", "            ", "if", "self", ".", "with_mask", ":", "\n", "                ", "results", "=", "(", "ms_bbox_result", "[", "'ensemble'", "]", ",", "\n", "ms_segm_result", "[", "'ensemble'", "]", ")", "\n", "", "else", ":", "\n", "                ", "results", "=", "ms_bbox_result", "[", "'ensemble'", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "with_mask", ":", "\n", "                ", "results", "=", "{", "\n", "stage", ":", "(", "ms_bbox_result", "[", "stage", "]", ",", "ms_segm_result", "[", "stage", "]", ")", "\n", "for", "stage", "in", "ms_bbox_result", "\n", "}", "\n", "", "else", ":", "\n", "                ", "results", "=", "ms_bbox_result", "\n", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.htc.HybridTaskCascade.aug_test": [[474, 476], ["None"], "methods", ["None"], ["", "def", "aug_test", "(", "self", ",", "img", ",", "img_meta", ",", "proposals", "=", "None", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.two_stage.TwoStageDetector.__init__": [[15, 58], ["base.BaseDetector.__init__", "builder.build_backbone", "two_stage.TwoStageDetector.init_weights", "builder.build_neck", "builder.build_shared_head", "builder.build_head", "builder.build_roi_extractor", "builder.build_head", "builder.build_head", "builder.build_roi_extractor"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_backbone", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_neck", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_shared_head", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_head", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_roi_extractor", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_head", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_head", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_roi_extractor"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "neck", "=", "None", ",", "\n", "shared_head", "=", "None", ",", "\n", "rpn_head", "=", "None", ",", "\n", "bbox_roi_extractor", "=", "None", ",", "\n", "bbox_head", "=", "None", ",", "\n", "mask_roi_extractor", "=", "None", ",", "\n", "mask_head", "=", "None", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "TwoStageDetector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "builder", ".", "build_backbone", "(", "backbone", ")", "\n", "\n", "if", "neck", "is", "not", "None", ":", "\n", "            ", "self", ".", "neck", "=", "builder", ".", "build_neck", "(", "neck", ")", "\n", "\n", "", "if", "shared_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "shared_head", "=", "builder", ".", "build_shared_head", "(", "shared_head", ")", "\n", "\n", "", "if", "rpn_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "rpn_head", "=", "builder", ".", "build_head", "(", "rpn_head", ")", "\n", "\n", "", "if", "bbox_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "bbox_roi_extractor", "=", "builder", ".", "build_roi_extractor", "(", "\n", "bbox_roi_extractor", ")", "\n", "self", ".", "bbox_head", "=", "builder", ".", "build_head", "(", "bbox_head", ")", "\n", "\n", "", "if", "mask_head", "is", "not", "None", ":", "\n", "            ", "if", "mask_roi_extractor", "is", "not", "None", ":", "\n", "                ", "self", ".", "mask_roi_extractor", "=", "builder", ".", "build_roi_extractor", "(", "\n", "mask_roi_extractor", ")", "\n", "self", ".", "share_roi_extractor", "=", "False", "\n", "", "else", ":", "\n", "                ", "self", ".", "share_roi_extractor", "=", "True", "\n", "self", ".", "mask_roi_extractor", "=", "self", ".", "bbox_roi_extractor", "\n", "", "self", ".", "mask_head", "=", "builder", ".", "build_head", "(", "mask_head", ")", "\n", "\n", "", "self", ".", "train_cfg", "=", "train_cfg", "\n", "self", ".", "test_cfg", "=", "test_cfg", "\n", "\n", "self", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.two_stage.TwoStageDetector.with_rpn": [[59, 62], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_rpn", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "'rpn_head'", ")", "and", "self", ".", "rpn_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.two_stage.TwoStageDetector.init_weights": [[63, 83], ["super().init_weights", "two_stage.TwoStageDetector.backbone.init_weights", "isinstance", "two_stage.TwoStageDetector.shared_head.init_weights", "two_stage.TwoStageDetector.rpn_head.init_weights", "two_stage.TwoStageDetector.bbox_roi_extractor.init_weights", "two_stage.TwoStageDetector.bbox_head.init_weights", "two_stage.TwoStageDetector.mask_head.init_weights", "two_stage.TwoStageDetector.neck.init_weights", "two_stage.TwoStageDetector.mask_roi_extractor.init_weights", "m.init_weights"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "TwoStageDetector", ",", "self", ")", ".", "init_weights", "(", "pretrained", ")", "\n", "self", ".", "backbone", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "neck", ",", "nn", ".", "Sequential", ")", ":", "\n", "                ", "for", "m", "in", "self", ".", "neck", ":", "\n", "                    ", "m", ".", "init_weights", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "neck", ".", "init_weights", "(", ")", "\n", "", "", "if", "self", ".", "with_shared_head", ":", "\n", "            ", "self", ".", "shared_head", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "", "if", "self", ".", "with_rpn", ":", "\n", "            ", "self", ".", "rpn_head", ".", "init_weights", "(", ")", "\n", "", "if", "self", ".", "with_bbox", ":", "\n", "            ", "self", ".", "bbox_roi_extractor", ".", "init_weights", "(", ")", "\n", "self", ".", "bbox_head", ".", "init_weights", "(", ")", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "self", ".", "mask_head", ".", "init_weights", "(", ")", "\n", "if", "not", "self", ".", "share_roi_extractor", ":", "\n", "                ", "self", ".", "mask_roi_extractor", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.two_stage.TwoStageDetector.extract_feat": [[84, 89], ["two_stage.TwoStageDetector.backbone", "two_stage.TwoStageDetector.neck"], "methods", ["None"], ["", "", "", "def", "extract_feat", "(", "self", ",", "img", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "img", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "x", "=", "self", ".", "neck", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.two_stage.TwoStageDetector.forward_train": [[90, 195], ["two_stage.TwoStageDetector.extract_feat", "dict", "two_stage.TwoStageDetector.rpn_head", "two_stage.TwoStageDetector.rpn_head.loss", "dict.update", "two_stage.TwoStageDetector.train_cfg.get", "two_stage.TwoStageDetector.rpn_head.get_bboxes", "mmdet.core.build_assigner", "mmdet.core.build_sampler", "img.size", "range", "mmdet.core.bbox2roi", "two_stage.TwoStageDetector.bbox_roi_extractor", "two_stage.TwoStageDetector.bbox_head", "two_stage.TwoStageDetector.bbox_head.get_target", "two_stage.TwoStageDetector.bbox_head.loss", "dict.update", "two_stage.TwoStageDetector.mask_head", "two_stage.TwoStageDetector.mask_head.get_target", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "two_stage.TwoStageDetector.mask_head.loss", "dict.update", "mmdet.core.build_assigner.assign", "mmdet.core.build_sampler.sample", "sampling_results.append", "two_stage.TwoStageDetector.shared_head", "mmdet.core.bbox2roi", "two_stage.TwoStageDetector.mask_roi_extractor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "two_stage.TwoStageDetector.shared_head", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "range", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.get_bboxes", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_sampler", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.max_iou_assigner.MaxIoUAssigner.assign", "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.pseudo_sampler.PseudoSampler.sample", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi"], ["", "def", "forward_train", "(", "self", ",", "\n", "img", ",", "\n", "img_meta", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "gt_masks", "=", "None", ",", "\n", "proposals", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "# RPN forward and loss", "\n", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "rpn_loss_inputs", "=", "rpn_outs", "+", "(", "gt_bboxes", ",", "img_meta", ",", "\n", "self", ".", "train_cfg", ".", "rpn", ")", "\n", "rpn_losses", "=", "self", ".", "rpn_head", ".", "loss", "(", "\n", "*", "rpn_loss_inputs", ",", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "losses", ".", "update", "(", "rpn_losses", ")", "\n", "\n", "proposal_cfg", "=", "self", ".", "train_cfg", ".", "get", "(", "'rpn_proposal'", ",", "\n", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "proposal_inputs", "=", "rpn_outs", "+", "(", "img_meta", ",", "proposal_cfg", ")", "\n", "proposal_list", "=", "self", ".", "rpn_head", ".", "get_bboxes", "(", "*", "proposal_inputs", ")", "\n", "", "else", ":", "\n", "            ", "proposal_list", "=", "proposals", "\n", "\n", "# assign gts and sample proposals", "\n", "", "if", "self", ".", "with_bbox", "or", "self", ".", "with_mask", ":", "\n", "            ", "bbox_assigner", "=", "build_assigner", "(", "self", ".", "train_cfg", ".", "rcnn", ".", "assigner", ")", "\n", "bbox_sampler", "=", "build_sampler", "(", "\n", "self", ".", "train_cfg", ".", "rcnn", ".", "sampler", ",", "context", "=", "self", ")", "\n", "num_imgs", "=", "img", ".", "size", "(", "0", ")", "\n", "if", "gt_bboxes_ignore", "is", "None", ":", "\n", "                ", "gt_bboxes_ignore", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "", "sampling_results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "                ", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "proposal_list", "[", "i", "]", ",", "\n", "gt_bboxes", "[", "i", "]", ",", "\n", "gt_bboxes_ignore", "[", "i", "]", ",", "\n", "gt_labels", "[", "i", "]", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "\n", "assign_result", ",", "\n", "proposal_list", "[", "i", "]", ",", "\n", "gt_bboxes", "[", "i", "]", ",", "\n", "gt_labels", "[", "i", "]", ",", "\n", "feats", "=", "[", "lvl_feat", "[", "i", "]", "[", "None", "]", "for", "lvl_feat", "in", "x", "]", ")", "\n", "sampling_results", ".", "append", "(", "sampling_result", ")", "\n", "\n", "# bbox head forward and loss", "\n", "", "", "if", "self", ".", "with_bbox", ":", "\n", "            ", "rois", "=", "bbox2roi", "(", "[", "res", ".", "bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "# TODO: a more flexible way to decide which feature maps to use", "\n", "bbox_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "bbox_feats", "=", "self", ".", "shared_head", "(", "bbox_feats", ")", "\n", "", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "(", "bbox_feats", ")", "\n", "\n", "bbox_targets", "=", "self", ".", "bbox_head", ".", "get_target", "(", "sampling_results", ",", "\n", "gt_bboxes", ",", "gt_labels", ",", "\n", "self", ".", "train_cfg", ".", "rcnn", ")", "\n", "bbox_targets", "=", "(", "bbox_targets", "[", "0", "]", ",", ")", "+", "bbox_targets", "[", "3", ":", "]", "\n", "loss_bbox", "=", "self", ".", "bbox_head", ".", "loss", "(", "cls_score", ",", "bbox_pred", ",", "\n", "*", "bbox_targets", ")", "\n", "losses", ".", "update", "(", "loss_bbox", ")", "\n", "\n", "# mask head forward and loss", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "if", "not", "self", ".", "share_roi_extractor", ":", "\n", "                ", "pos_rois", "=", "bbox2roi", "(", "\n", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "mask_feats", "=", "self", ".", "mask_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "mask_roi_extractor", ".", "num_inputs", "]", ",", "pos_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                    ", "mask_feats", "=", "self", ".", "shared_head", "(", "mask_feats", ")", "\n", "", "", "else", ":", "\n", "                ", "pos_inds", "=", "[", "]", "\n", "device", "=", "bbox_feats", ".", "device", "\n", "for", "res", "in", "sampling_results", ":", "\n", "                    ", "pos_inds", ".", "append", "(", "\n", "torch", ".", "ones", "(", "\n", "res", ".", "pos_bboxes", ".", "shape", "[", "0", "]", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "torch", ".", "uint8", ")", ")", "\n", "pos_inds", ".", "append", "(", "\n", "torch", ".", "zeros", "(", "\n", "res", ".", "neg_bboxes", ".", "shape", "[", "0", "]", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "torch", ".", "uint8", ")", ")", "\n", "", "pos_inds", "=", "torch", ".", "cat", "(", "pos_inds", ")", "\n", "mask_feats", "=", "bbox_feats", "[", "pos_inds", "]", "\n", "", "mask_pred", "=", "self", ".", "mask_head", "(", "mask_feats", ")", "\n", "\n", "mask_targets", "=", "self", ".", "mask_head", ".", "get_target", "(", "sampling_results", ",", "\n", "gt_masks", ",", "\n", "self", ".", "train_cfg", ".", "rcnn", ")", "\n", "pos_labels", "=", "torch", ".", "cat", "(", "\n", "[", "res", ".", "pos_gt_labels", "for", "res", "in", "sampling_results", "]", ")", "\n", "loss_mask", "=", "self", ".", "mask_head", ".", "loss", "(", "mask_pred", ",", "mask_targets", ",", "\n", "pos_labels", ")", "\n", "losses", ".", "update", "(", "loss_mask", ")", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.two_stage.TwoStageDetector.simple_test": [[196, 216], ["two_stage.TwoStageDetector.extract_feat", "two_stage.TwoStageDetector.simple_test_bboxes", "mmdet.core.bbox2result", "two_stage.TwoStageDetector.simple_test_rpn", "two_stage.TwoStageDetector.simple_test_mask", "proposal_list[].cpu().numpy", "proposal_list[].cpu"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.BBoxTestMixin.simple_test_bboxes", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2result", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.RPNTestMixin.simple_test_rpn", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.MaskTestMixin.simple_test_mask"], ["", "def", "simple_test", "(", "self", ",", "img", ",", "img_meta", ",", "proposals", "=", "None", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\"Test without augmentation.\"\"\"", "\n", "assert", "self", ".", "with_bbox", ",", "\"Bbox head must be implemented.\"", "\n", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "proposal_list", "=", "self", ".", "simple_test_rpn", "(", "##in xyxy format", "\n", "x", ",", "img_meta", ",", "self", ".", "test_cfg", ".", "rpn", ")", "if", "proposals", "is", "None", "else", "proposals", "\n", "\n", "det_bboxes", ",", "det_labels", "=", "self", ".", "simple_test_bboxes", "(", "\n", "x", ",", "img_meta", ",", "proposal_list", ",", "self", ".", "test_cfg", ".", "rcnn", ",", "rescale", "=", "rescale", ")", "\n", "bbox_results", "=", "bbox2result", "(", "det_bboxes", ",", "det_labels", ",", "\n", "self", ".", "bbox_head", ".", "num_classes", ")", "\n", "\n", "if", "not", "self", ".", "with_mask", ":", "\n", "            ", "return", "bbox_results", "\n", "", "else", ":", "\n", "            ", "segm_results", "=", "self", ".", "simple_test_mask", "(", "\n", "x", ",", "img_meta", ",", "det_bboxes", ",", "det_labels", ",", "rescale", "=", "rescale", ")", "\n", "return", "bbox_results", ",", "segm_results", ",", "proposal_list", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.two_stage.TwoStageDetector.aug_test": [[217, 245], ["two_stage.TwoStageDetector.aug_test_rpn", "two_stage.TwoStageDetector.aug_test_bboxes", "mmdet.core.bbox2result", "two_stage.TwoStageDetector.extract_feats", "two_stage.TwoStageDetector.extract_feats", "det_bboxes.clone", "two_stage.TwoStageDetector.aug_test_mask", "two_stage.TwoStageDetector.extract_feats"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.RPNTestMixin.aug_test_rpn", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.BBoxTestMixin.aug_test_bboxes", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2result", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.extract_feats", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.extract_feats", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.MaskTestMixin.aug_test_mask", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.base.BaseDetector.extract_feats"], ["", "", "def", "aug_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\"Test with augmentations.\n\n        If rescale is False, then returned bboxes and masks will fit the scale\n        of imgs[0].\n        \"\"\"", "\n", "# recompute feats to save memory", "\n", "proposal_list", "=", "self", ".", "aug_test_rpn", "(", "\n", "self", ".", "extract_feats", "(", "imgs", ")", ",", "img_metas", ",", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "det_bboxes", ",", "det_labels", "=", "self", ".", "aug_test_bboxes", "(", "\n", "self", ".", "extract_feats", "(", "imgs", ")", ",", "img_metas", ",", "proposal_list", ",", "\n", "self", ".", "test_cfg", ".", "rcnn", ")", "\n", "\n", "if", "rescale", ":", "\n", "            ", "_det_bboxes", "=", "det_bboxes", "\n", "", "else", ":", "\n", "            ", "_det_bboxes", "=", "det_bboxes", ".", "clone", "(", ")", "\n", "_det_bboxes", "[", ":", ",", ":", "4", "]", "*=", "img_metas", "[", "0", "]", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "", "bbox_results", "=", "bbox2result", "(", "_det_bboxes", ",", "det_labels", ",", "\n", "self", ".", "bbox_head", ".", "num_classes", ")", "\n", "\n", "# det_bboxes always keep the original scale", "\n", "if", "self", ".", "with_mask", ":", "\n", "            ", "segm_results", "=", "self", ".", "aug_test_mask", "(", "\n", "self", ".", "extract_feats", "(", "imgs", ")", ",", "img_metas", ",", "det_bboxes", ",", "det_labels", ")", "\n", "return", "bbox_results", ",", "segm_results", "\n", "", "else", ":", "\n", "            ", "return", "bbox_results", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.single_stage.SingleStageDetector.__init__": [[12, 27], ["base.BaseDetector.__init__", "builder.build_backbone", "builder.build_head", "single_stage.SingleStageDetector.init_weights", "builder.build_neck"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_backbone", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_head", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_neck"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "neck", "=", "None", ",", "\n", "bbox_head", "=", "None", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "SingleStageDetector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "builder", ".", "build_backbone", "(", "backbone", ")", "\n", "if", "neck", "is", "not", "None", ":", "\n", "            ", "self", ".", "neck", "=", "builder", ".", "build_neck", "(", "neck", ")", "\n", "", "self", ".", "bbox_head", "=", "builder", ".", "build_head", "(", "bbox_head", ")", "\n", "self", ".", "train_cfg", "=", "train_cfg", "\n", "self", ".", "test_cfg", "=", "test_cfg", "\n", "self", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.single_stage.SingleStageDetector.init_weights": [[28, 38], ["super().init_weights", "single_stage.SingleStageDetector.backbone.init_weights", "single_stage.SingleStageDetector.bbox_head.init_weights", "isinstance", "single_stage.SingleStageDetector.neck.init_weights", "m.init_weights"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "SingleStageDetector", ",", "self", ")", ".", "init_weights", "(", "pretrained", ")", "\n", "self", ".", "backbone", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "neck", ",", "nn", ".", "Sequential", ")", ":", "\n", "                ", "for", "m", "in", "self", ".", "neck", ":", "\n", "                    ", "m", ".", "init_weights", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "neck", ".", "init_weights", "(", ")", "\n", "", "", "self", ".", "bbox_head", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.single_stage.SingleStageDetector.extract_feat": [[39, 44], ["single_stage.SingleStageDetector.backbone", "single_stage.SingleStageDetector.neck"], "methods", ["None"], ["", "def", "extract_feat", "(", "self", ",", "img", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "img", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "x", "=", "self", ".", "neck", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.single_stage.SingleStageDetector.forward_train": [[45, 57], ["single_stage.SingleStageDetector.extract_feat", "single_stage.SingleStageDetector.bbox_head", "single_stage.SingleStageDetector.bbox_head.loss"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss"], ["", "def", "forward_train", "(", "self", ",", "\n", "img", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "outs", "=", "self", ".", "bbox_head", "(", "x", ")", "\n", "loss_inputs", "=", "outs", "+", "(", "gt_bboxes", ",", "gt_labels", ",", "img_metas", ",", "self", ".", "train_cfg", ")", "\n", "losses", "=", "self", ".", "bbox_head", ".", "loss", "(", "\n", "*", "loss_inputs", ",", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.single_stage.SingleStageDetector.simple_test": [[58, 68], ["single_stage.SingleStageDetector.extract_feat", "single_stage.SingleStageDetector.bbox_head", "single_stage.SingleStageDetector.bbox_head.get_bboxes", "mmdet.core.bbox2result"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.get_bboxes", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2result"], ["", "def", "simple_test", "(", "self", ",", "img", ",", "img_meta", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "outs", "=", "self", ".", "bbox_head", "(", "x", ")", "\n", "bbox_inputs", "=", "outs", "+", "(", "img_meta", ",", "self", ".", "test_cfg", ",", "rescale", ")", "\n", "bbox_list", "=", "self", ".", "bbox_head", ".", "get_bboxes", "(", "*", "bbox_inputs", ")", "\n", "bbox_results", "=", "[", "\n", "bbox2result", "(", "det_bboxes", ",", "det_labels", ",", "self", ".", "bbox_head", ".", "num_classes", ")", "\n", "for", "det_bboxes", ",", "det_labels", "in", "bbox_list", "\n", "]", "\n", "return", "bbox_results", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.single_stage.SingleStageDetector.aug_test": [[69, 71], ["None"], "methods", ["None"], ["", "def", "aug_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.faster_rcnn.FasterRCNN.__init__": [[8, 28], ["two_stage.TwoStageDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "rpn_head", ",", "\n", "bbox_roi_extractor", ",", "\n", "bbox_head", ",", "\n", "train_cfg", ",", "\n", "test_cfg", ",", "\n", "neck", "=", "None", ",", "\n", "shared_head", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "FasterRCNN", ",", "self", ")", ".", "__init__", "(", "\n", "backbone", "=", "backbone", ",", "\n", "neck", "=", "neck", ",", "\n", "shared_head", "=", "shared_head", ",", "\n", "rpn_head", "=", "rpn_head", ",", "\n", "bbox_roi_extractor", "=", "bbox_roi_extractor", ",", "\n", "bbox_head", "=", "bbox_head", ",", "\n", "train_cfg", "=", "train_cfg", ",", "\n", "test_cfg", "=", "test_cfg", ",", "\n", "pretrained", "=", "pretrained", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.fcos.FCOS.__init__": [[8, 17], ["single_stage.SingleStageDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "neck", ",", "\n", "bbox_head", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "FCOS", ",", "self", ")", ".", "__init__", "(", "backbone", ",", "neck", ",", "bbox_head", ",", "train_cfg", ",", "\n", "test_cfg", ",", "pretrained", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.mask_scoring_rcnn.MaskScoringRCNN.__init__": [[16, 44], ["two_stage.TwoStageDetector.__init__", "builder.build_head", "mask_scoring_rcnn.MaskScoringRCNN.mask_iou_head.init_weights"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_head", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights"], ["def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "rpn_head", ",", "\n", "bbox_roi_extractor", ",", "\n", "bbox_head", ",", "\n", "mask_roi_extractor", ",", "\n", "mask_head", ",", "\n", "train_cfg", ",", "\n", "test_cfg", ",", "\n", "neck", "=", "None", ",", "\n", "shared_head", "=", "None", ",", "\n", "mask_iou_head", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "MaskScoringRCNN", ",", "self", ")", ".", "__init__", "(", "\n", "backbone", "=", "backbone", ",", "\n", "neck", "=", "neck", ",", "\n", "shared_head", "=", "shared_head", ",", "\n", "rpn_head", "=", "rpn_head", ",", "\n", "bbox_roi_extractor", "=", "bbox_roi_extractor", ",", "\n", "bbox_head", "=", "bbox_head", ",", "\n", "mask_roi_extractor", "=", "mask_roi_extractor", ",", "\n", "mask_head", "=", "mask_head", ",", "\n", "train_cfg", "=", "train_cfg", ",", "\n", "test_cfg", "=", "test_cfg", ",", "\n", "pretrained", "=", "pretrained", ")", "\n", "\n", "self", ".", "mask_iou_head", "=", "builder", ".", "build_head", "(", "mask_iou_head", ")", "\n", "self", ".", "mask_iou_head", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.mask_scoring_rcnn.MaskScoringRCNN.forward_train": [[46, 161], ["mask_scoring_rcnn.MaskScoringRCNN.extract_feat", "dict", "mask_scoring_rcnn.MaskScoringRCNN.rpn_head", "mask_scoring_rcnn.MaskScoringRCNN.rpn_head.loss", "dict.update", "mask_scoring_rcnn.MaskScoringRCNN.train_cfg.get", "mask_scoring_rcnn.MaskScoringRCNN.rpn_head.get_bboxes", "mmdet.core.build_assigner", "mmdet.core.build_sampler", "img.size", "range", "mmdet.core.bbox2roi", "mask_scoring_rcnn.MaskScoringRCNN.bbox_roi_extractor", "mask_scoring_rcnn.MaskScoringRCNN.bbox_head", "mask_scoring_rcnn.MaskScoringRCNN.bbox_head.get_target", "mask_scoring_rcnn.MaskScoringRCNN.bbox_head.loss", "dict.update", "mask_scoring_rcnn.MaskScoringRCNN.mask_head", "mask_scoring_rcnn.MaskScoringRCNN.mask_head.get_target", "torch.cat", "mask_scoring_rcnn.MaskScoringRCNN.mask_head.loss", "dict.update", "mask_scoring_rcnn.MaskScoringRCNN.mask_iou_head", "mask_scoring_rcnn.MaskScoringRCNN.mask_iou_head.get_target", "mask_scoring_rcnn.MaskScoringRCNN.mask_iou_head.loss", "dict.update", "mmdet.core.build_assigner.assign", "mmdet.core.build_sampler.sample", "sampling_results.append", "mask_scoring_rcnn.MaskScoringRCNN.shared_head", "mmdet.core.bbox2roi", "mask_scoring_rcnn.MaskScoringRCNN.mask_roi_extractor", "torch.cat", "mask_scoring_rcnn.MaskScoringRCNN.shared_head", "torch.cat.append", "torch.cat.append", "range", "torch.ones", "torch.zeros", "range", "range", "mask_scoring_rcnn.MaskScoringRCNN.size", "mask_scoring_rcnn.MaskScoringRCNN.size"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.get_bboxes", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_sampler", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.max_iou_assigner.MaxIoUAssigner.assign", "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.pseudo_sampler.PseudoSampler.sample", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi"], ["", "def", "forward_train", "(", "self", ",", "\n", "img", ",", "\n", "img_meta", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "gt_masks", "=", "None", ",", "\n", "proposals", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "# RPN forward and loss", "\n", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "rpn_loss_inputs", "=", "rpn_outs", "+", "(", "gt_bboxes", ",", "img_meta", ",", "\n", "self", ".", "train_cfg", ".", "rpn", ")", "\n", "rpn_losses", "=", "self", ".", "rpn_head", ".", "loss", "(", "\n", "*", "rpn_loss_inputs", ",", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "losses", ".", "update", "(", "rpn_losses", ")", "\n", "\n", "proposal_cfg", "=", "self", ".", "train_cfg", ".", "get", "(", "'rpn_proposal'", ",", "\n", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "proposal_inputs", "=", "rpn_outs", "+", "(", "img_meta", ",", "proposal_cfg", ")", "\n", "proposal_list", "=", "self", ".", "rpn_head", ".", "get_bboxes", "(", "*", "proposal_inputs", ")", "\n", "", "else", ":", "\n", "            ", "proposal_list", "=", "proposals", "\n", "\n", "# assign gts and sample proposals", "\n", "", "if", "self", ".", "with_bbox", "or", "self", ".", "with_mask", ":", "\n", "            ", "bbox_assigner", "=", "build_assigner", "(", "self", ".", "train_cfg", ".", "rcnn", ".", "assigner", ")", "\n", "bbox_sampler", "=", "build_sampler", "(", "\n", "self", ".", "train_cfg", ".", "rcnn", ".", "sampler", ",", "context", "=", "self", ")", "\n", "num_imgs", "=", "img", ".", "size", "(", "0", ")", "\n", "if", "gt_bboxes_ignore", "is", "None", ":", "\n", "                ", "gt_bboxes_ignore", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "", "sampling_results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "                ", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "proposal_list", "[", "i", "]", ",", "\n", "gt_bboxes", "[", "i", "]", ",", "\n", "gt_bboxes_ignore", "[", "i", "]", ",", "\n", "gt_labels", "[", "i", "]", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "\n", "assign_result", ",", "\n", "proposal_list", "[", "i", "]", ",", "\n", "gt_bboxes", "[", "i", "]", ",", "\n", "gt_labels", "[", "i", "]", ",", "\n", "feats", "=", "[", "lvl_feat", "[", "i", "]", "[", "None", "]", "for", "lvl_feat", "in", "x", "]", ")", "\n", "sampling_results", ".", "append", "(", "sampling_result", ")", "\n", "\n", "# bbox head forward and loss", "\n", "", "", "if", "self", ".", "with_bbox", ":", "\n", "            ", "rois", "=", "bbox2roi", "(", "[", "res", ".", "bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "# TODO: a more flexible way to decide which feature maps to use", "\n", "bbox_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "bbox_feats", "=", "self", ".", "shared_head", "(", "bbox_feats", ")", "\n", "", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "(", "bbox_feats", ")", "\n", "\n", "bbox_targets", "=", "self", ".", "bbox_head", ".", "get_target", "(", "sampling_results", ",", "\n", "gt_bboxes", ",", "gt_labels", ",", "\n", "self", ".", "train_cfg", ".", "rcnn", ")", "\n", "loss_bbox", "=", "self", ".", "bbox_head", ".", "loss", "(", "cls_score", ",", "bbox_pred", ",", "\n", "*", "bbox_targets", ")", "\n", "losses", ".", "update", "(", "loss_bbox", ")", "\n", "\n", "# mask head forward and loss", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "if", "not", "self", ".", "share_roi_extractor", ":", "\n", "                ", "pos_rois", "=", "bbox2roi", "(", "\n", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "mask_feats", "=", "self", ".", "mask_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "mask_roi_extractor", ".", "num_inputs", "]", ",", "pos_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                    ", "mask_feats", "=", "self", ".", "shared_head", "(", "mask_feats", ")", "\n", "", "", "else", ":", "\n", "                ", "pos_inds", "=", "[", "]", "\n", "device", "=", "bbox_feats", ".", "device", "\n", "for", "res", "in", "sampling_results", ":", "\n", "                    ", "pos_inds", ".", "append", "(", "\n", "torch", ".", "ones", "(", "\n", "res", ".", "pos_bboxes", ".", "shape", "[", "0", "]", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "torch", ".", "uint8", ")", ")", "\n", "pos_inds", ".", "append", "(", "\n", "torch", ".", "zeros", "(", "\n", "res", ".", "neg_bboxes", ".", "shape", "[", "0", "]", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "torch", ".", "uint8", ")", ")", "\n", "", "pos_inds", "=", "torch", ".", "cat", "(", "pos_inds", ")", "\n", "mask_feats", "=", "bbox_feats", "[", "pos_inds", "]", "\n", "", "mask_pred", "=", "self", ".", "mask_head", "(", "mask_feats", ")", "\n", "\n", "mask_targets", "=", "self", ".", "mask_head", ".", "get_target", "(", "sampling_results", ",", "\n", "gt_masks", ",", "\n", "self", ".", "train_cfg", ".", "rcnn", ")", "\n", "pos_labels", "=", "torch", ".", "cat", "(", "\n", "[", "res", ".", "pos_gt_labels", "for", "res", "in", "sampling_results", "]", ")", "\n", "loss_mask", "=", "self", ".", "mask_head", ".", "loss", "(", "mask_pred", ",", "mask_targets", ",", "\n", "pos_labels", ")", "\n", "losses", ".", "update", "(", "loss_mask", ")", "\n", "\n", "# mask iou head forward and loss", "\n", "pos_mask_pred", "=", "mask_pred", "[", "range", "(", "mask_pred", ".", "size", "(", "0", ")", ")", ",", "pos_labels", "]", "\n", "mask_iou_pred", "=", "self", ".", "mask_iou_head", "(", "mask_feats", ",", "pos_mask_pred", ")", "\n", "pos_mask_iou_pred", "=", "mask_iou_pred", "[", "range", "(", "mask_iou_pred", ".", "size", "(", "0", ")", "\n", ")", ",", "pos_labels", "]", "\n", "mask_iou_targets", "=", "self", ".", "mask_iou_head", ".", "get_target", "(", "\n", "sampling_results", ",", "gt_masks", ",", "pos_mask_pred", ",", "mask_targets", ",", "\n", "self", ".", "train_cfg", ".", "rcnn", ")", "\n", "loss_mask_iou", "=", "self", ".", "mask_iou_head", ".", "loss", "(", "pos_mask_iou_pred", ",", "\n", "mask_iou_targets", ")", "\n", "losses", ".", "update", "(", "loss_mask_iou", ")", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.mask_scoring_rcnn.MaskScoringRCNN.simple_test_mask": [[162, 198], ["mmdet.core.bbox2roi", "mask_scoring_rcnn.MaskScoringRCNN.mask_roi_extractor", "mask_scoring_rcnn.MaskScoringRCNN.mask_head", "mask_scoring_rcnn.MaskScoringRCNN.mask_head.get_seg_masks", "mask_scoring_rcnn.MaskScoringRCNN.mask_iou_head", "mask_scoring_rcnn.MaskScoringRCNN.mask_iou_head.get_mask_scores", "mask_scoring_rcnn.MaskScoringRCNN.shared_head", "range", "range", "len", "range", "det_labels.size"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.fcn_mask_head.FCNMaskHead.get_seg_masks", "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.maskiou_head.MaskIoUHead.get_mask_scores"], ["", "def", "simple_test_mask", "(", "self", ",", "\n", "x", ",", "\n", "img_meta", ",", "\n", "det_bboxes", ",", "\n", "det_labels", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "# image shape of the first image in the batch (only one)", "\n", "        ", "ori_shape", "=", "img_meta", "[", "0", "]", "[", "'ori_shape'", "]", "\n", "scale_factor", "=", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "\n", "if", "det_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "segm_result", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "mask_head", ".", "num_classes", "-", "1", ")", "]", "\n", "mask_scores", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "mask_head", ".", "num_classes", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "# if det_bboxes is rescaled to the original image size, we need to", "\n", "# rescale it back to the testing scale to obtain RoIs.", "\n", "            ", "_bboxes", "=", "(", "\n", "det_bboxes", "[", ":", ",", ":", "4", "]", "*", "scale_factor", "if", "rescale", "else", "det_bboxes", ")", "\n", "mask_rois", "=", "bbox2roi", "(", "[", "_bboxes", "]", ")", "\n", "mask_feats", "=", "self", ".", "mask_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "self", ".", "mask_roi_extractor", ".", "featmap_strides", ")", "]", ",", "mask_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "mask_feats", "=", "self", ".", "shared_head", "(", "mask_feats", ")", "\n", "", "mask_pred", "=", "self", ".", "mask_head", "(", "mask_feats", ")", "\n", "segm_result", "=", "self", ".", "mask_head", ".", "get_seg_masks", "(", "mask_pred", ",", "_bboxes", ",", "\n", "det_labels", ",", "\n", "self", ".", "test_cfg", ".", "rcnn", ",", "\n", "ori_shape", ",", "scale_factor", ",", "\n", "rescale", ")", "\n", "# get mask scores with mask iou head", "\n", "mask_iou_pred", "=", "self", ".", "mask_iou_head", "(", "\n", "mask_feats", ",", "\n", "mask_pred", "[", "range", "(", "det_labels", ".", "size", "(", "0", ")", ")", ",", "det_labels", "+", "1", "]", ")", "\n", "mask_scores", "=", "self", ".", "mask_iou_head", ".", "get_mask_scores", "(", "\n", "mask_iou_pred", ",", "det_bboxes", ",", "det_labels", ")", "\n", "", "return", "segm_result", ",", "mask_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.mask_rcnn.MaskRCNN_normal.__init__": [[9, 33], ["two_stage.TwoStageDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "rpn_head", ",", "\n", "bbox_roi_extractor", ",", "\n", "bbox_head", ",", "\n", "mask_roi_extractor", ",", "\n", "mask_head", ",", "\n", "train_cfg", ",", "\n", "test_cfg", ",", "\n", "neck", "=", "None", ",", "\n", "shared_head", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "MaskRCNN_normal", ",", "self", ")", ".", "__init__", "(", "\n", "backbone", "=", "backbone", ",", "\n", "neck", "=", "neck", ",", "\n", "shared_head", "=", "shared_head", ",", "\n", "rpn_head", "=", "rpn_head", ",", "\n", "bbox_roi_extractor", "=", "bbox_roi_extractor", ",", "\n", "bbox_head", "=", "bbox_head", ",", "\n", "mask_roi_extractor", "=", "mask_roi_extractor", ",", "\n", "mask_head", "=", "mask_head", ",", "\n", "train_cfg", "=", "train_cfg", ",", "\n", "test_cfg", "=", "test_cfg", ",", "\n", "pretrained", "=", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.mask_rcnn.MaskRCNN_calibration.__init__": [[37, 61], ["two_stage_calibration.TwoStageDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "rpn_head", ",", "\n", "bbox_roi_extractor", ",", "\n", "bbox_head", ",", "\n", "mask_roi_extractor", ",", "\n", "mask_head", ",", "\n", "train_cfg", ",", "\n", "test_cfg", ",", "\n", "neck", "=", "None", ",", "\n", "shared_head", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "MaskRCNN_calibration", ",", "self", ")", ".", "__init__", "(", "\n", "backbone", "=", "backbone", ",", "\n", "neck", "=", "neck", ",", "\n", "shared_head", "=", "shared_head", ",", "\n", "rpn_head", "=", "rpn_head", ",", "\n", "bbox_roi_extractor", "=", "bbox_roi_extractor", ",", "\n", "bbox_head", "=", "bbox_head", ",", "\n", "mask_roi_extractor", "=", "mask_roi_extractor", ",", "\n", "mask_head", "=", "mask_head", ",", "\n", "train_cfg", "=", "train_cfg", ",", "\n", "test_cfg", "=", "test_cfg", ",", "\n", "pretrained", "=", "pretrained", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.grid_rcnn.GridRCNN.__init__": [[18, 52], ["two_stage.TwoStageDetector.__init__", "builder.build_head", "grid_rcnn.GridRCNN.init_extra_weights", "builder.build_roi_extractor"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_head", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.grid_rcnn.GridRCNN.init_extra_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_roi_extractor"], ["def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "rpn_head", ",", "\n", "bbox_roi_extractor", ",", "\n", "bbox_head", ",", "\n", "grid_roi_extractor", ",", "\n", "grid_head", ",", "\n", "train_cfg", ",", "\n", "test_cfg", ",", "\n", "neck", "=", "None", ",", "\n", "shared_head", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "assert", "grid_head", "is", "not", "None", "\n", "super", "(", "GridRCNN", ",", "self", ")", ".", "__init__", "(", "\n", "backbone", "=", "backbone", ",", "\n", "neck", "=", "neck", ",", "\n", "shared_head", "=", "shared_head", ",", "\n", "rpn_head", "=", "rpn_head", ",", "\n", "bbox_roi_extractor", "=", "bbox_roi_extractor", ",", "\n", "bbox_head", "=", "bbox_head", ",", "\n", "train_cfg", "=", "train_cfg", ",", "\n", "test_cfg", "=", "test_cfg", ",", "\n", "pretrained", "=", "pretrained", ")", "\n", "\n", "if", "grid_roi_extractor", "is", "not", "None", ":", "\n", "            ", "self", ".", "grid_roi_extractor", "=", "builder", ".", "build_roi_extractor", "(", "\n", "grid_roi_extractor", ")", "\n", "self", ".", "share_roi_extractor", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "share_roi_extractor", "=", "True", "\n", "self", ".", "grid_roi_extractor", "=", "self", ".", "bbox_roi_extractor", "\n", "", "self", ".", "grid_head", "=", "builder", ".", "build_head", "(", "grid_head", ")", "\n", "\n", "self", ".", "init_extra_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.grid_rcnn.GridRCNN.init_extra_weights": [[53, 57], ["grid_rcnn.GridRCNN.grid_head.init_weights", "grid_rcnn.GridRCNN.grid_roi_extractor.init_weights"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights"], ["", "def", "init_extra_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "grid_head", ".", "init_weights", "(", ")", "\n", "if", "not", "self", ".", "share_roi_extractor", ":", "\n", "            ", "self", ".", "grid_roi_extractor", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.grid_rcnn.GridRCNN._random_jitter": [[58, 82], ["zip", "bboxes.new_empty().uniform_", "torch.cat", "new_bboxes[].clamp_", "new_bboxes[].clamp_", "bboxes.new_empty"], "methods", ["None"], ["", "", "def", "_random_jitter", "(", "self", ",", "sampling_results", ",", "img_metas", ",", "amplitude", "=", "0.15", ")", ":", "\n", "        ", "\"\"\"Ramdom jitter positive proposals for training.\"\"\"", "\n", "for", "sampling_result", ",", "img_meta", "in", "zip", "(", "sampling_results", ",", "img_metas", ")", ":", "\n", "            ", "bboxes", "=", "sampling_result", ".", "pos_bboxes", "\n", "random_offsets", "=", "bboxes", ".", "new_empty", "(", "bboxes", ".", "shape", "[", "0", "]", ",", "4", ")", ".", "uniform_", "(", "\n", "-", "amplitude", ",", "amplitude", ")", "\n", "# before jittering", "\n", "cxcy", "=", "(", "bboxes", "[", ":", ",", "2", ":", "4", "]", "+", "bboxes", "[", ":", ",", ":", "2", "]", ")", "/", "2", "\n", "wh", "=", "(", "bboxes", "[", ":", ",", "2", ":", "4", "]", "-", "bboxes", "[", ":", ",", ":", "2", "]", ")", ".", "abs", "(", ")", "\n", "# after jittering", "\n", "new_cxcy", "=", "cxcy", "+", "wh", "*", "random_offsets", "[", ":", ",", ":", "2", "]", "\n", "new_wh", "=", "wh", "*", "(", "1", "+", "random_offsets", "[", ":", ",", "2", ":", "]", ")", "\n", "# xywh to xyxy", "\n", "new_x1y1", "=", "(", "new_cxcy", "-", "new_wh", "/", "2", ")", "\n", "new_x2y2", "=", "(", "new_cxcy", "+", "new_wh", "/", "2", ")", "\n", "new_bboxes", "=", "torch", ".", "cat", "(", "[", "new_x1y1", ",", "new_x2y2", "]", ",", "dim", "=", "1", ")", "\n", "# clip bboxes", "\n", "max_shape", "=", "img_meta", "[", "'img_shape'", "]", "\n", "if", "max_shape", "is", "not", "None", ":", "\n", "                ", "new_bboxes", "[", ":", ",", "0", ":", ":", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "max_shape", "[", "1", "]", "-", "1", ")", "\n", "new_bboxes", "[", ":", ",", "1", ":", ":", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "max_shape", "[", "0", "]", "-", "1", ")", "\n", "\n", "", "sampling_result", ".", "pos_bboxes", "=", "new_bboxes", "\n", "", "return", "sampling_results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.grid_rcnn.GridRCNN.forward_train": [[83, 173], ["grid_rcnn.GridRCNN.extract_feat", "dict", "grid_rcnn.GridRCNN.rpn_head", "grid_rcnn.GridRCNN.rpn_head.loss", "dict.update", "grid_rcnn.GridRCNN.train_cfg.get", "grid_rcnn.GridRCNN.rpn_head.get_bboxes", "mmdet.core.build_assigner", "mmdet.core.build_sampler", "img.size", "range", "mmdet.core.bbox2roi", "grid_rcnn.GridRCNN.bbox_roi_extractor", "grid_rcnn.GridRCNN.bbox_head", "grid_rcnn.GridRCNN.bbox_head.get_target", "grid_rcnn.GridRCNN.bbox_head.loss", "dict.update", "grid_rcnn.GridRCNN._random_jitter", "mmdet.core.bbox2roi", "grid_rcnn.GridRCNN.grid_roi_extractor", "grid_rcnn.GridRCNN.train_cfg.rcnn.get", "grid_rcnn.GridRCNN.grid_head", "grid_rcnn.GridRCNN.grid_head.get_target", "grid_rcnn.GridRCNN.grid_head.loss", "dict.update", "mmdet.core.build_assigner.assign", "mmdet.core.build_sampler.sample", "grid_rcnn.GridRCNN.append", "grid_rcnn.GridRCNN.shared_head", "grid_rcnn.GridRCNN.shared_head", "torch.randperm", "min", "range"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.get_bboxes", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_sampler", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.grid_rcnn.GridRCNN._random_jitter", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.max_iou_assigner.MaxIoUAssigner.assign", "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.pseudo_sampler.PseudoSampler.sample"], ["", "def", "forward_train", "(", "self", ",", "\n", "img", ",", "\n", "img_meta", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "gt_masks", "=", "None", ",", "\n", "proposals", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "# RPN forward and loss", "\n", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "rpn_loss_inputs", "=", "rpn_outs", "+", "(", "gt_bboxes", ",", "img_meta", ",", "\n", "self", ".", "train_cfg", ".", "rpn", ")", "\n", "rpn_losses", "=", "self", ".", "rpn_head", ".", "loss", "(", "\n", "*", "rpn_loss_inputs", ",", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "losses", ".", "update", "(", "rpn_losses", ")", "\n", "\n", "proposal_cfg", "=", "self", ".", "train_cfg", ".", "get", "(", "'rpn_proposal'", ",", "\n", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "proposal_inputs", "=", "rpn_outs", "+", "(", "img_meta", ",", "proposal_cfg", ")", "\n", "proposal_list", "=", "self", ".", "rpn_head", ".", "get_bboxes", "(", "*", "proposal_inputs", ")", "\n", "", "else", ":", "\n", "            ", "proposal_list", "=", "proposals", "\n", "\n", "", "if", "self", ".", "with_bbox", ":", "\n", "# assign gts and sample proposals", "\n", "            ", "bbox_assigner", "=", "build_assigner", "(", "self", ".", "train_cfg", ".", "rcnn", ".", "assigner", ")", "\n", "bbox_sampler", "=", "build_sampler", "(", "\n", "self", ".", "train_cfg", ".", "rcnn", ".", "sampler", ",", "context", "=", "self", ")", "\n", "num_imgs", "=", "img", ".", "size", "(", "0", ")", "\n", "if", "gt_bboxes_ignore", "is", "None", ":", "\n", "                ", "gt_bboxes_ignore", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "", "sampling_results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "                ", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "proposal_list", "[", "i", "]", ",", "\n", "gt_bboxes", "[", "i", "]", ",", "\n", "gt_bboxes_ignore", "[", "i", "]", ",", "\n", "gt_labels", "[", "i", "]", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "\n", "assign_result", ",", "\n", "proposal_list", "[", "i", "]", ",", "\n", "gt_bboxes", "[", "i", "]", ",", "\n", "gt_labels", "[", "i", "]", ",", "\n", "feats", "=", "[", "lvl_feat", "[", "i", "]", "[", "None", "]", "for", "lvl_feat", "in", "x", "]", ")", "\n", "sampling_results", ".", "append", "(", "sampling_result", ")", "\n", "\n", "# bbox head forward and loss", "\n", "", "rois", "=", "bbox2roi", "(", "[", "res", ".", "bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "# TODO: a more flexible way to decide which feature maps to use", "\n", "bbox_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "bbox_feats", "=", "self", ".", "shared_head", "(", "bbox_feats", ")", "\n", "", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "(", "bbox_feats", ")", "\n", "\n", "bbox_targets", "=", "self", ".", "bbox_head", ".", "get_target", "(", "sampling_results", ",", "\n", "gt_bboxes", ",", "gt_labels", ",", "\n", "self", ".", "train_cfg", ".", "rcnn", ")", "\n", "loss_bbox", "=", "self", ".", "bbox_head", ".", "loss", "(", "cls_score", ",", "bbox_pred", ",", "\n", "*", "bbox_targets", ")", "\n", "losses", ".", "update", "(", "loss_bbox", ")", "\n", "\n", "# Grid head forward and loss", "\n", "sampling_results", "=", "self", ".", "_random_jitter", "(", "sampling_results", ",", "img_meta", ")", "\n", "pos_rois", "=", "bbox2roi", "(", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "grid_feats", "=", "self", ".", "grid_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "grid_roi_extractor", ".", "num_inputs", "]", ",", "pos_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "grid_feats", "=", "self", ".", "shared_head", "(", "grid_feats", ")", "\n", "# Accelerate training", "\n", "", "max_sample_num_grid", "=", "self", ".", "train_cfg", ".", "rcnn", ".", "get", "(", "'max_num_grid'", ",", "192", ")", "\n", "sample_idx", "=", "torch", ".", "randperm", "(", "\n", "grid_feats", ".", "shape", "[", "0", "]", ")", "[", ":", "min", "(", "grid_feats", ".", "\n", "shape", "[", "0", "]", ",", "max_sample_num_grid", ")", "]", "\n", "grid_feats", "=", "grid_feats", "[", "sample_idx", "]", "\n", "\n", "grid_pred", "=", "self", ".", "grid_head", "(", "grid_feats", ")", "\n", "\n", "grid_targets", "=", "self", ".", "grid_head", ".", "get_target", "(", "sampling_results", ",", "\n", "self", ".", "train_cfg", ".", "rcnn", ")", "\n", "grid_targets", "=", "grid_targets", "[", "sample_idx", "]", "\n", "\n", "loss_grid", "=", "self", ".", "grid_head", ".", "loss", "(", "grid_pred", ",", "grid_targets", ")", "\n", "losses", ".", "update", "(", "loss_grid", ")", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.grid_rcnn.GridRCNN.simple_test": [[174, 205], ["grid_rcnn.GridRCNN.extract_feat", "grid_rcnn.GridRCNN.simple_test_bboxes", "mmdet.core.bbox2roi", "grid_rcnn.GridRCNN.grid_roi_extractor", "mmdet.core.bbox2result", "grid_rcnn.GridRCNN.simple_test_rpn", "grid_rcnn.GridRCNN.grid_head", "grid_rcnn.GridRCNN.grid_head.get_bboxes", "torch.Tensor", "len"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.BBoxTestMixin.simple_test_bboxes", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2result", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.RPNTestMixin.simple_test_rpn", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.get_bboxes"], ["", "def", "simple_test", "(", "self", ",", "img", ",", "img_meta", ",", "proposals", "=", "None", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\"Test without augmentation.\"\"\"", "\n", "assert", "self", ".", "with_bbox", ",", "\"Bbox head must be implemented.\"", "\n", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "proposal_list", "=", "self", ".", "simple_test_rpn", "(", "\n", "x", ",", "img_meta", ",", "self", ".", "test_cfg", ".", "rpn", ")", "if", "proposals", "is", "None", "else", "proposals", "\n", "\n", "det_bboxes", ",", "det_labels", "=", "self", ".", "simple_test_bboxes", "(", "\n", "x", ",", "img_meta", ",", "proposal_list", ",", "self", ".", "test_cfg", ".", "rcnn", ",", "rescale", "=", "False", ")", "\n", "\n", "# pack rois into bboxes", "\n", "grid_rois", "=", "bbox2roi", "(", "[", "det_bboxes", "[", ":", ",", ":", "4", "]", "]", ")", "\n", "grid_feats", "=", "self", ".", "grid_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "self", ".", "grid_roi_extractor", ".", "featmap_strides", ")", "]", ",", "grid_rois", ")", "\n", "if", "grid_rois", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "self", ".", "grid_head", ".", "test_mode", "=", "True", "\n", "grid_pred", "=", "self", ".", "grid_head", "(", "grid_feats", ")", "\n", "det_bboxes", "=", "self", ".", "grid_head", ".", "get_bboxes", "(", "det_bboxes", ",", "\n", "grid_pred", "[", "'fused'", "]", ",", "\n", "img_meta", ")", "\n", "if", "rescale", ":", "\n", "                ", "det_bboxes", "[", ":", ",", ":", "4", "]", "/=", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "", "", "else", ":", "\n", "            ", "det_bboxes", "=", "torch", ".", "Tensor", "(", "[", "]", ")", "\n", "\n", "", "bbox_results", "=", "bbox2result", "(", "det_bboxes", ",", "det_labels", ",", "\n", "self", ".", "bbox_head", ".", "num_classes", ")", "\n", "\n", "return", "bbox_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.RPNTestMixin.simple_test_rpn": [[7, 12], ["test_mixins.RPNTestMixin.rpn_head", "test_mixins.RPNTestMixin.rpn_head.get_bboxes"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.get_bboxes"], ["    ", "def", "simple_test_rpn", "(", "self", ",", "x", ",", "img_meta", ",", "rpn_test_cfg", ")", ":", "\n", "        ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "proposal_inputs", "=", "rpn_outs", "+", "(", "img_meta", ",", "rpn_test_cfg", ")", "\n", "proposal_list", "=", "self", ".", "rpn_head", ".", "get_bboxes", "(", "*", "proposal_inputs", ")", "\n", "return", "proposal_list", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.RPNTestMixin.aug_test_rpn": [[13, 34], ["len", "zip", "range", "test_mixins.RPNTestMixin.simple_test_rpn", "enumerate", "range", "aug_img_metas.append", "mmdet.core.merge_aug_proposals", "range", "aug_proposals[].append", "len", "aug_img_meta.append", "zip"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.RPNTestMixin.simple_test_rpn", "home.repos.pwc.inspect_result.twangnh_SimCal.post_processing.merge_augs.merge_aug_proposals"], ["", "def", "aug_test_rpn", "(", "self", ",", "feats", ",", "img_metas", ",", "rpn_test_cfg", ")", ":", "\n", "        ", "imgs_per_gpu", "=", "len", "(", "img_metas", "[", "0", "]", ")", "\n", "aug_proposals", "=", "[", "[", "]", "for", "_", "in", "range", "(", "imgs_per_gpu", ")", "]", "\n", "for", "x", ",", "img_meta", "in", "zip", "(", "feats", ",", "img_metas", ")", ":", "\n", "            ", "proposal_list", "=", "self", ".", "simple_test_rpn", "(", "x", ",", "img_meta", ",", "rpn_test_cfg", ")", "\n", "for", "i", ",", "proposals", "in", "enumerate", "(", "proposal_list", ")", ":", "\n", "                ", "aug_proposals", "[", "i", "]", ".", "append", "(", "proposals", ")", "\n", "# reorganize the order of 'img_metas' to match the dimensions", "\n", "# of 'aug_proposals'", "\n", "", "", "aug_img_metas", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "imgs_per_gpu", ")", ":", "\n", "            ", "aug_img_meta", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "img_metas", ")", ")", ":", "\n", "                ", "aug_img_meta", ".", "append", "(", "img_metas", "[", "j", "]", "[", "i", "]", ")", "\n", "", "aug_img_metas", ".", "append", "(", "aug_img_meta", ")", "\n", "# after merging, proposals will be rescaled to the original image size", "\n", "", "merged_proposals", "=", "[", "\n", "merge_aug_proposals", "(", "proposals", ",", "aug_img_meta", ",", "rpn_test_cfg", ")", "\n", "for", "proposals", ",", "aug_img_meta", "in", "zip", "(", "aug_proposals", ",", "aug_img_metas", ")", "\n", "]", "\n", "return", "merged_proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.BBoxTestMixin.simple_test_bboxes": [[38, 74], ["mmdet.core.bbox2roi", "test_mixins.BBoxTestMixin.bbox_roi_extractor", "test_mixins.BBoxTestMixin.bbox_head", "test_mixins.BBoxTestMixin.bbox_head.get_det_bboxes", "test_mixins.BBoxTestMixin.shared_head", "olongtail_model", "len"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_det_bboxes"], ["    ", "def", "simple_test_bboxes", "(", "self", ",", "\n", "x", ",", "\n", "img_meta", ",", "\n", "proposals", ",", "\n", "olongtail_model", ",", "\n", "rcnn_test_cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\"Test only det bboxes without augmentation.\"\"\"", "\n", "rois", "=", "bbox2roi", "(", "proposals", ")", "\n", "roi_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "self", ".", "bbox_roi_extractor", ".", "featmap_strides", ")", "]", ",", "rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "            ", "roi_feats", "=", "self", ".", "shared_head", "(", "roi_feats", ")", "\n", "", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "(", "roi_feats", ")", "\n", "\n", "## simple2fc", "\n", "if", "olongtail_model", "is", "None", ":", "\n", "            ", "olongtail_cls_score", "=", "None", "\n", "", "else", ":", "\n", "            ", "olongtail_cls_score", "=", "olongtail_model", "(", "roi_feats", ")", "\n", "##ncm", "\n", "\n", "# olongtail_cls_score = -olongtail_model(roi_feats)", "\n", "\n", "", "img_shape", "=", "img_meta", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "det_bboxes", ",", "det_labels", "=", "self", ".", "bbox_head", ".", "get_det_bboxes", "(", "\n", "rois", ",", "\n", "cls_score", ",", "\n", "olongtail_cls_score", ",", "\n", "bbox_pred", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "rescale", "=", "rescale", ",", "\n", "cfg", "=", "rcnn_test_cfg", ")", "\n", "return", "det_bboxes", ",", "det_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.BBoxTestMixin.aug_test_bboxes": [[75, 111], ["zip", "mmdet.core.merge_aug_bboxes", "mmdet.core.multiclass_nms", "mmdet.core.bbox_mapping", "mmdet.core.bbox2roi", "test_mixins.BBoxTestMixin.bbox_roi_extractor", "test_mixins.BBoxTestMixin.bbox_head", "test_mixins.BBoxTestMixin.bbox_head.get_det_bboxes", "aug_bboxes.append", "aug_scores.append", "test_mixins.BBoxTestMixin.shared_head", "len"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.post_processing.merge_augs.merge_aug_bboxes", "home.repos.pwc.inspect_result.twangnh_SimCal.post_processing.bbox_nms.multiclass_nms", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox_mapping", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_det_bboxes"], ["", "def", "aug_test_bboxes", "(", "self", ",", "feats", ",", "img_metas", ",", "proposal_list", ",", "rcnn_test_cfg", ")", ":", "\n", "        ", "aug_bboxes", "=", "[", "]", "\n", "aug_scores", "=", "[", "]", "\n", "for", "x", ",", "img_meta", "in", "zip", "(", "feats", ",", "img_metas", ")", ":", "\n", "# only one image in the batch", "\n", "            ", "img_shape", "=", "img_meta", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_meta", "[", "0", "]", "[", "'flip'", "]", "\n", "# TODO more flexible", "\n", "proposals", "=", "bbox_mapping", "(", "proposal_list", "[", "0", "]", "[", ":", ",", ":", "4", "]", ",", "img_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "rois", "=", "bbox2roi", "(", "[", "proposals", "]", ")", "\n", "# recompute feature maps to save GPU memory", "\n", "roi_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "self", ".", "bbox_roi_extractor", ".", "featmap_strides", ")", "]", ",", "rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "roi_feats", "=", "self", ".", "shared_head", "(", "roi_feats", ")", "\n", "", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "(", "roi_feats", ")", "\n", "bboxes", ",", "scores", "=", "self", ".", "bbox_head", ".", "get_det_bboxes", "(", "\n", "rois", ",", "\n", "cls_score", ",", "\n", "bbox_pred", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "rescale", "=", "False", ",", "\n", "cfg", "=", "None", ")", "\n", "aug_bboxes", ".", "append", "(", "bboxes", ")", "\n", "aug_scores", ".", "append", "(", "scores", ")", "\n", "# after merging, bboxes will be rescaled to the original image size", "\n", "", "merged_bboxes", ",", "merged_scores", "=", "merge_aug_bboxes", "(", "\n", "aug_bboxes", ",", "aug_scores", ",", "img_metas", ",", "rcnn_test_cfg", ")", "\n", "det_bboxes", ",", "det_labels", "=", "multiclass_nms", "(", "merged_bboxes", ",", "merged_scores", ",", "\n", "rcnn_test_cfg", ".", "score_thr", ",", "\n", "rcnn_test_cfg", ".", "nms", ",", "\n", "rcnn_test_cfg", ".", "max_per_img", ")", "\n", "return", "det_bboxes", ",", "det_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.MaskTestMixin.simple_test_mask": [[115, 143], ["mmdet.core.bbox2roi", "test_mixins.MaskTestMixin.mask_roi_extractor", "test_mixins.MaskTestMixin.mask_head", "test_mixins.MaskTestMixin.mask_head.get_seg_masks", "test_mixins.MaskTestMixin.shared_head", "range", "len"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.fcn_mask_head.FCNMaskHead.get_seg_masks"], ["    ", "def", "simple_test_mask", "(", "self", ",", "\n", "x", ",", "\n", "img_meta", ",", "\n", "det_bboxes", ",", "\n", "det_labels", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "# image shape of the first image in the batch (only one)", "\n", "        ", "ori_shape", "=", "img_meta", "[", "0", "]", "[", "'ori_shape'", "]", "\n", "scale_factor", "=", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "if", "det_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "segm_result", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "mask_head", ".", "num_classes", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "# if det_bboxes is rescaled to the original image size, we need to", "\n", "# rescale it back to the testing scale to obtain RoIs.", "\n", "            ", "_bboxes", "=", "(", "\n", "det_bboxes", "[", ":", ",", ":", "4", "]", "*", "scale_factor", "if", "rescale", "else", "det_bboxes", ")", "\n", "mask_rois", "=", "bbox2roi", "(", "[", "_bboxes", "]", ")", "\n", "mask_feats", "=", "self", ".", "mask_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "self", ".", "mask_roi_extractor", ".", "featmap_strides", ")", "]", ",", "mask_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "mask_feats", "=", "self", ".", "shared_head", "(", "mask_feats", ")", "\n", "", "mask_pred", "=", "self", ".", "mask_head", "(", "mask_feats", ")", "\n", "segm_result", "=", "self", ".", "mask_head", ".", "get_seg_masks", "(", "mask_pred", ",", "_bboxes", ",", "\n", "det_labels", ",", "\n", "self", ".", "test_cfg", ".", "rcnn", ",", "\n", "ori_shape", ",", "scale_factor", ",", "\n", "rescale", ")", "\n", "", "return", "segm_result", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.MaskTestMixin.aug_test_mask": [[144, 177], ["zip", "mmdet.core.merge_aug_masks", "test_mixins.MaskTestMixin.mask_head.get_seg_masks", "mmdet.core.bbox_mapping", "mmdet.core.bbox2roi", "test_mixins.MaskTestMixin.mask_roi_extractor", "test_mixins.MaskTestMixin.mask_head", "aug_masks.append", "range", "test_mixins.MaskTestMixin.shared_head", "test_mixins.MaskTestMixin.sigmoid().cpu().numpy", "len", "test_mixins.MaskTestMixin.sigmoid().cpu", "test_mixins.MaskTestMixin.sigmoid"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.post_processing.merge_augs.merge_aug_masks", "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.fcn_mask_head.FCNMaskHead.get_seg_masks", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox_mapping", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi"], ["", "def", "aug_test_mask", "(", "self", ",", "feats", ",", "img_metas", ",", "det_bboxes", ",", "det_labels", ")", ":", "\n", "        ", "if", "det_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "segm_result", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "mask_head", ".", "num_classes", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "aug_masks", "=", "[", "]", "\n", "for", "x", ",", "img_meta", "in", "zip", "(", "feats", ",", "img_metas", ")", ":", "\n", "                ", "img_shape", "=", "img_meta", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_meta", "[", "0", "]", "[", "'flip'", "]", "\n", "_bboxes", "=", "bbox_mapping", "(", "det_bboxes", "[", ":", ",", ":", "4", "]", ",", "img_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "mask_rois", "=", "bbox2roi", "(", "[", "_bboxes", "]", ")", "\n", "mask_feats", "=", "self", ".", "mask_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "self", ".", "mask_roi_extractor", ".", "featmap_strides", ")", "]", ",", "\n", "mask_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                    ", "mask_feats", "=", "self", ".", "shared_head", "(", "mask_feats", ")", "\n", "", "mask_pred", "=", "self", ".", "mask_head", "(", "mask_feats", ")", "\n", "# convert to numpy array to save memory", "\n", "aug_masks", ".", "append", "(", "mask_pred", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "merged_masks", "=", "merge_aug_masks", "(", "aug_masks", ",", "img_metas", ",", "\n", "self", ".", "test_cfg", ".", "rcnn", ")", "\n", "\n", "ori_shape", "=", "img_metas", "[", "0", "]", "[", "0", "]", "[", "'ori_shape'", "]", "\n", "segm_result", "=", "self", ".", "mask_head", ".", "get_seg_masks", "(", "\n", "merged_masks", ",", "\n", "det_bboxes", ",", "\n", "det_labels", ",", "\n", "self", ".", "test_cfg", ".", "rcnn", ",", "\n", "ori_shape", ",", "\n", "scale_factor", "=", "1.0", ",", "\n", "rescale", "=", "False", ")", "\n", "", "return", "segm_result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.__init__": [[17, 87], ["base.BaseDetector.__init__", "builder.build_backbone", "cascade_rcnn.CascadeRCNN.init_weights", "builder.build_neck", "builder.build_head", "builder.build_shared_head", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "zip", "torch.ModuleList", "torch.ModuleList", "isinstance", "isinstance", "len", "len", "cascade_rcnn.CascadeRCNN.bbox_roi_extractor.append", "cascade_rcnn.CascadeRCNN.bbox_head.append", "isinstance", "len", "cascade_rcnn.CascadeRCNN.mask_head.append", "torch.ModuleList", "torch.ModuleList", "builder.build_roi_extractor", "builder.build_head", "builder.build_head", "isinstance", "len", "cascade_rcnn.CascadeRCNN.mask_roi_extractor.append", "range", "range", "range", "builder.build_roi_extractor", "range"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_backbone", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_neck", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_head", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_shared_head", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_roi_extractor", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_head", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_head", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_roi_extractor"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_stages", ",", "\n", "backbone", ",", "\n", "neck", "=", "None", ",", "\n", "shared_head", "=", "None", ",", "\n", "rpn_head", "=", "None", ",", "\n", "bbox_roi_extractor", "=", "None", ",", "\n", "bbox_head", "=", "None", ",", "\n", "mask_roi_extractor", "=", "None", ",", "\n", "mask_head", "=", "None", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "assert", "bbox_roi_extractor", "is", "not", "None", "\n", "assert", "bbox_head", "is", "not", "None", "\n", "super", "(", "CascadeRCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_stages", "=", "num_stages", "\n", "self", ".", "backbone", "=", "builder", ".", "build_backbone", "(", "backbone", ")", "\n", "\n", "if", "neck", "is", "not", "None", ":", "\n", "            ", "self", ".", "neck", "=", "builder", ".", "build_neck", "(", "neck", ")", "\n", "\n", "", "if", "rpn_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "rpn_head", "=", "builder", ".", "build_head", "(", "rpn_head", ")", "\n", "\n", "", "if", "shared_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "shared_head", "=", "builder", ".", "build_shared_head", "(", "shared_head", ")", "\n", "\n", "", "if", "bbox_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "bbox_roi_extractor", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "bbox_head", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "not", "isinstance", "(", "bbox_roi_extractor", ",", "list", ")", ":", "\n", "                ", "bbox_roi_extractor", "=", "[", "\n", "bbox_roi_extractor", "for", "_", "in", "range", "(", "num_stages", ")", "\n", "]", "\n", "", "if", "not", "isinstance", "(", "bbox_head", ",", "list", ")", ":", "\n", "                ", "bbox_head", "=", "[", "bbox_head", "for", "_", "in", "range", "(", "num_stages", ")", "]", "\n", "", "assert", "len", "(", "bbox_roi_extractor", ")", "==", "len", "(", "bbox_head", ")", "==", "self", ".", "num_stages", "\n", "for", "roi_extractor", ",", "head", "in", "zip", "(", "bbox_roi_extractor", ",", "bbox_head", ")", ":", "\n", "                ", "self", ".", "bbox_roi_extractor", ".", "append", "(", "\n", "builder", ".", "build_roi_extractor", "(", "roi_extractor", ")", ")", "\n", "self", ".", "bbox_head", ".", "append", "(", "builder", ".", "build_head", "(", "head", ")", ")", "\n", "\n", "", "", "if", "mask_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "mask_head", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "not", "isinstance", "(", "mask_head", ",", "list", ")", ":", "\n", "                ", "mask_head", "=", "[", "mask_head", "for", "_", "in", "range", "(", "num_stages", ")", "]", "\n", "", "assert", "len", "(", "mask_head", ")", "==", "self", ".", "num_stages", "\n", "for", "head", "in", "mask_head", ":", "\n", "                ", "self", ".", "mask_head", ".", "append", "(", "builder", ".", "build_head", "(", "head", ")", ")", "\n", "", "if", "mask_roi_extractor", "is", "not", "None", ":", "\n", "                ", "self", ".", "share_roi_extractor", "=", "False", "\n", "self", ".", "mask_roi_extractor", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "not", "isinstance", "(", "mask_roi_extractor", ",", "list", ")", ":", "\n", "                    ", "mask_roi_extractor", "=", "[", "\n", "mask_roi_extractor", "for", "_", "in", "range", "(", "num_stages", ")", "\n", "]", "\n", "", "assert", "len", "(", "mask_roi_extractor", ")", "==", "self", ".", "num_stages", "\n", "for", "roi_extractor", "in", "mask_roi_extractor", ":", "\n", "                    ", "self", ".", "mask_roi_extractor", ".", "append", "(", "\n", "builder", ".", "build_roi_extractor", "(", "roi_extractor", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "share_roi_extractor", "=", "True", "\n", "self", ".", "mask_roi_extractor", "=", "self", ".", "bbox_roi_extractor", "\n", "\n", "", "", "self", ".", "train_cfg", "=", "train_cfg", "\n", "self", ".", "test_cfg", "=", "test_cfg", "\n", "\n", "self", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.with_rpn": [[88, 91], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_rpn", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "'rpn_head'", ")", "and", "self", ".", "rpn_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.init_weights": [[92, 113], ["super().init_weights", "cascade_rcnn.CascadeRCNN.backbone.init_weights", "range", "isinstance", "cascade_rcnn.CascadeRCNN.rpn_head.init_weights", "cascade_rcnn.CascadeRCNN.shared_head.init_weights", "cascade_rcnn.CascadeRCNN.neck.init_weights", "cascade_rcnn.CascadeRCNN.bbox_roi_extractor[].init_weights", "cascade_rcnn.CascadeRCNN.bbox_head[].init_weights", "cascade_rcnn.CascadeRCNN.mask_head[].init_weights", "m.init_weights", "cascade_rcnn.CascadeRCNN.mask_roi_extractor[].init_weights"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "CascadeRCNN", ",", "self", ")", ".", "init_weights", "(", "pretrained", ")", "\n", "self", ".", "backbone", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "neck", ",", "nn", ".", "Sequential", ")", ":", "\n", "                ", "for", "m", "in", "self", ".", "neck", ":", "\n", "                    ", "m", ".", "init_weights", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "neck", ".", "init_weights", "(", ")", "\n", "", "", "if", "self", ".", "with_rpn", ":", "\n", "            ", "self", ".", "rpn_head", ".", "init_weights", "(", ")", "\n", "", "if", "self", ".", "with_shared_head", ":", "\n", "            ", "self", ".", "shared_head", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "if", "self", ".", "with_bbox", ":", "\n", "                ", "self", ".", "bbox_roi_extractor", "[", "i", "]", ".", "init_weights", "(", ")", "\n", "self", ".", "bbox_head", "[", "i", "]", ".", "init_weights", "(", ")", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "                ", "if", "not", "self", ".", "share_roi_extractor", ":", "\n", "                    ", "self", ".", "mask_roi_extractor", "[", "i", "]", ".", "init_weights", "(", ")", "\n", "", "self", ".", "mask_head", "[", "i", "]", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.extract_feat": [[114, 119], ["cascade_rcnn.CascadeRCNN.backbone", "cascade_rcnn.CascadeRCNN.neck"], "methods", ["None"], ["", "", "", "def", "extract_feat", "(", "self", ",", "img", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "img", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "x", "=", "self", ".", "neck", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.forward_train": [[120, 239], ["cascade_rcnn.CascadeRCNN.extract_feat", "dict", "range", "cascade_rcnn.CascadeRCNN.rpn_head", "cascade_rcnn.CascadeRCNN.rpn_head.loss", "dict.update", "cascade_rcnn.CascadeRCNN.train_cfg.get", "cascade_rcnn.CascadeRCNN.rpn_head.get_bboxes", "mmdet.core.bbox2roi", "bbox_roi_extractor", "bbox_head", "bbox_head.get_target", "bbox_head.loss", "bbox_head.loss.items", "mmdet.core.build_assigner", "mmdet.core.build_sampler", "img.size", "range", "cascade_rcnn.CascadeRCNN.shared_head", "mask_head", "mask_head.get_target", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mask_head.loss", "mask_head.loss.items", "mmdet.core.build_assigner.assign", "mmdet.core.build_sampler.sample", "sampling_results.append", "mmdet.core.bbox2roi", "mask_roi_extractor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bbox_head.refine_bboxes", "cascade_rcnn.CascadeRCNN.shared_head", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "range", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor_heads.anchor_head.AnchorHead.get_bboxes", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_sampler", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.max_iou_assigner.MaxIoUAssigner.assign", "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.pseudo_sampler.PseudoSampler.sample", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.refine_bboxes"], ["", "def", "forward_train", "(", "self", ",", "\n", "img", ",", "\n", "img_meta", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "gt_masks", "=", "None", ",", "\n", "proposals", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "rpn_loss_inputs", "=", "rpn_outs", "+", "(", "gt_bboxes", ",", "img_meta", ",", "\n", "self", ".", "train_cfg", ".", "rpn", ")", "\n", "rpn_losses", "=", "self", ".", "rpn_head", ".", "loss", "(", "\n", "*", "rpn_loss_inputs", ",", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "losses", ".", "update", "(", "rpn_losses", ")", "\n", "\n", "proposal_cfg", "=", "self", ".", "train_cfg", ".", "get", "(", "'rpn_proposal'", ",", "\n", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "proposal_inputs", "=", "rpn_outs", "+", "(", "img_meta", ",", "proposal_cfg", ")", "\n", "proposal_list", "=", "self", ".", "rpn_head", ".", "get_bboxes", "(", "*", "proposal_inputs", ")", "\n", "", "else", ":", "\n", "            ", "proposal_list", "=", "proposals", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "self", ".", "current_stage", "=", "i", "\n", "rcnn_train_cfg", "=", "self", ".", "train_cfg", ".", "rcnn", "[", "i", "]", "\n", "lw", "=", "self", ".", "train_cfg", ".", "stage_loss_weights", "[", "i", "]", "\n", "\n", "# assign gts and sample proposals", "\n", "sampling_results", "=", "[", "]", "\n", "if", "self", ".", "with_bbox", "or", "self", ".", "with_mask", ":", "\n", "                ", "bbox_assigner", "=", "build_assigner", "(", "rcnn_train_cfg", ".", "assigner", ")", "\n", "bbox_sampler", "=", "build_sampler", "(", "\n", "rcnn_train_cfg", ".", "sampler", ",", "context", "=", "self", ")", "\n", "num_imgs", "=", "img", ".", "size", "(", "0", ")", "\n", "if", "gt_bboxes_ignore", "is", "None", ":", "\n", "                    ", "gt_bboxes_ignore", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "\n", "", "for", "j", "in", "range", "(", "num_imgs", ")", ":", "\n", "                    ", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "\n", "proposal_list", "[", "j", "]", ",", "gt_bboxes", "[", "j", "]", ",", "gt_bboxes_ignore", "[", "j", "]", ",", "\n", "gt_labels", "[", "j", "]", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "\n", "assign_result", ",", "\n", "proposal_list", "[", "j", "]", ",", "\n", "gt_bboxes", "[", "j", "]", ",", "\n", "gt_labels", "[", "j", "]", ",", "\n", "feats", "=", "[", "lvl_feat", "[", "j", "]", "[", "None", "]", "for", "lvl_feat", "in", "x", "]", ")", "\n", "sampling_results", ".", "append", "(", "sampling_result", ")", "\n", "\n", "# bbox head forward and loss", "\n", "", "", "bbox_roi_extractor", "=", "self", ".", "bbox_roi_extractor", "[", "i", "]", "\n", "bbox_head", "=", "self", ".", "bbox_head", "[", "i", "]", "\n", "\n", "rois", "=", "bbox2roi", "(", "[", "res", ".", "bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "bbox_feats", "=", "bbox_roi_extractor", "(", "x", "[", ":", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "\n", "rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "bbox_feats", "=", "self", ".", "shared_head", "(", "bbox_feats", ")", "\n", "", "cls_score", ",", "bbox_pred", "=", "bbox_head", "(", "bbox_feats", ")", "\n", "\n", "bbox_targets", "=", "bbox_head", ".", "get_target", "(", "sampling_results", ",", "gt_bboxes", ",", "\n", "gt_labels", ",", "rcnn_train_cfg", ")", "\n", "loss_bbox", "=", "bbox_head", ".", "loss", "(", "cls_score", ",", "bbox_pred", ",", "*", "bbox_targets", ")", "\n", "for", "name", ",", "value", "in", "loss_bbox", ".", "items", "(", ")", ":", "\n", "                ", "losses", "[", "'s{}.{}'", ".", "format", "(", "i", ",", "name", ")", "]", "=", "(", "\n", "value", "*", "lw", "if", "'loss'", "in", "name", "else", "value", ")", "\n", "\n", "# mask head forward and loss", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "                ", "if", "not", "self", ".", "share_roi_extractor", ":", "\n", "                    ", "mask_roi_extractor", "=", "self", ".", "mask_roi_extractor", "[", "i", "]", "\n", "pos_rois", "=", "bbox2roi", "(", "\n", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "mask_feats", "=", "mask_roi_extractor", "(", "\n", "x", "[", ":", "mask_roi_extractor", ".", "num_inputs", "]", ",", "pos_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                        ", "mask_feats", "=", "self", ".", "shared_head", "(", "mask_feats", ")", "\n", "", "", "else", ":", "\n", "# reuse positive bbox feats", "\n", "                    ", "pos_inds", "=", "[", "]", "\n", "device", "=", "bbox_feats", ".", "device", "\n", "for", "res", "in", "sampling_results", ":", "\n", "                        ", "pos_inds", ".", "append", "(", "\n", "torch", ".", "ones", "(", "\n", "res", ".", "pos_bboxes", ".", "shape", "[", "0", "]", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "torch", ".", "uint8", ")", ")", "\n", "pos_inds", ".", "append", "(", "\n", "torch", ".", "zeros", "(", "\n", "res", ".", "neg_bboxes", ".", "shape", "[", "0", "]", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "torch", ".", "uint8", ")", ")", "\n", "", "pos_inds", "=", "torch", ".", "cat", "(", "pos_inds", ")", "\n", "mask_feats", "=", "bbox_feats", "[", "pos_inds", "]", "\n", "", "mask_head", "=", "self", ".", "mask_head", "[", "i", "]", "\n", "mask_pred", "=", "mask_head", "(", "mask_feats", ")", "\n", "mask_targets", "=", "mask_head", ".", "get_target", "(", "sampling_results", ",", "gt_masks", ",", "\n", "rcnn_train_cfg", ")", "\n", "pos_labels", "=", "torch", ".", "cat", "(", "\n", "[", "res", ".", "pos_gt_labels", "for", "res", "in", "sampling_results", "]", ")", "\n", "loss_mask", "=", "mask_head", ".", "loss", "(", "mask_pred", ",", "mask_targets", ",", "pos_labels", ")", "\n", "for", "name", ",", "value", "in", "loss_mask", ".", "items", "(", ")", ":", "\n", "                    ", "losses", "[", "'s{}.{}'", ".", "format", "(", "i", ",", "name", ")", "]", "=", "(", "\n", "value", "*", "lw", "if", "'loss'", "in", "name", "else", "value", ")", "\n", "\n", "# refine bboxes", "\n", "", "", "if", "i", "<", "self", ".", "num_stages", "-", "1", ":", "\n", "                ", "pos_is_gts", "=", "[", "res", ".", "pos_is_gt", "for", "res", "in", "sampling_results", "]", "\n", "roi_labels", "=", "bbox_targets", "[", "0", "]", "# bbox_targets is a tuple", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "proposal_list", "=", "bbox_head", ".", "refine_bboxes", "(", "\n", "rois", ",", "roi_labels", ",", "bbox_pred", ",", "pos_is_gts", ",", "img_meta", ")", "\n", "\n", "", "", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.simple_test": [[240, 370], ["cascade_rcnn.CascadeRCNN.extract_feat", "mmdet.core.bbox2roi", "range", "cascade_rcnn.CascadeRCNN.bbox_head[].get_det_bboxes", "mmdet.core.bbox2result", "cascade_rcnn.CascadeRCNN.simple_test_rpn", "bbox_roi_extractor", "bbox_head", "ms_scores.append", "sum", "cascade_rcnn.CascadeRCNN.shared_head", "bbox_head.get_det_bboxes", "mmdet.core.bbox2result", "cls_score.argmax", "bbox_head.regress_by_class", "isinstance", "mmdet.core.bbox2roi", "range", "mmdet.core.merge_aug_masks", "cascade_rcnn.CascadeRCNN.mask_head[].get_seg_masks", "mask_roi_extractor", "aug_masks.append", "len", "mmdet.core.bbox2roi", "mask_roi_extractor", "mask_head", "mask_head.get_seg_masks", "range", "cascade_rcnn.CascadeRCNN.shared_head", "mask_head.sigmoid().cpu().numpy", "cascade_rcnn.CascadeRCNN.shared_head", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "range", "len", "mask_head.sigmoid().cpu", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "mask_head.sigmoid"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_det_bboxes", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2result", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.test_mixins.RPNTestMixin.simple_test_rpn", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_det_bboxes", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2result", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.regress_by_class", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.post_processing.merge_augs.merge_aug_masks", "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.fcn_mask_head.FCNMaskHead.get_seg_masks", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.mask_heads.fcn_mask_head.FCNMaskHead.get_seg_masks"], ["", "def", "simple_test", "(", "self", ",", "img", ",", "img_meta", ",", "proposals", "=", "None", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "proposal_list", "=", "self", ".", "simple_test_rpn", "(", "\n", "x", ",", "img_meta", ",", "self", ".", "test_cfg", ".", "rpn", ")", "if", "proposals", "is", "None", "else", "proposals", "\n", "\n", "img_shape", "=", "img_meta", "[", "0", "]", "[", "'img_shape'", "]", "\n", "ori_shape", "=", "img_meta", "[", "0", "]", "[", "'ori_shape'", "]", "\n", "scale_factor", "=", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "\n", "# \"ms\" in variable names means multi-stage", "\n", "ms_bbox_result", "=", "{", "}", "\n", "ms_segm_result", "=", "{", "}", "\n", "ms_scores", "=", "[", "]", "\n", "rcnn_test_cfg", "=", "self", ".", "test_cfg", ".", "rcnn", "\n", "\n", "rois", "=", "bbox2roi", "(", "proposal_list", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "bbox_roi_extractor", "=", "self", ".", "bbox_roi_extractor", "[", "i", "]", "\n", "bbox_head", "=", "self", ".", "bbox_head", "[", "i", "]", "\n", "\n", "bbox_feats", "=", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "bbox_roi_extractor", ".", "featmap_strides", ")", "]", ",", "rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "bbox_feats", "=", "self", ".", "shared_head", "(", "bbox_feats", ")", "\n", "\n", "", "cls_score", ",", "bbox_pred", "=", "bbox_head", "(", "bbox_feats", ")", "\n", "ms_scores", ".", "append", "(", "cls_score", ")", "\n", "\n", "if", "self", ".", "test_cfg", ".", "keep_all_stages", ":", "\n", "                ", "det_bboxes", ",", "det_labels", "=", "bbox_head", ".", "get_det_bboxes", "(", "\n", "rois", ",", "\n", "cls_score", ",", "\n", "bbox_pred", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "rescale", "=", "rescale", ",", "\n", "cfg", "=", "rcnn_test_cfg", ")", "\n", "bbox_result", "=", "bbox2result", "(", "det_bboxes", ",", "det_labels", ",", "\n", "bbox_head", ".", "num_classes", ")", "\n", "ms_bbox_result", "[", "'stage{}'", ".", "format", "(", "i", ")", "]", "=", "bbox_result", "\n", "\n", "if", "self", ".", "with_mask", ":", "\n", "                    ", "mask_roi_extractor", "=", "self", ".", "mask_roi_extractor", "[", "i", "]", "\n", "mask_head", "=", "self", ".", "mask_head", "[", "i", "]", "\n", "if", "det_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                        ", "mask_classes", "=", "mask_head", ".", "num_classes", "-", "1", "\n", "segm_result", "=", "[", "[", "]", "for", "_", "in", "range", "(", "mask_classes", ")", "]", "\n", "", "else", ":", "\n", "                        ", "_bboxes", "=", "(", "\n", "det_bboxes", "[", ":", ",", ":", "4", "]", "*", "\n", "scale_factor", "if", "rescale", "else", "det_bboxes", ")", "\n", "mask_rois", "=", "bbox2roi", "(", "[", "_bboxes", "]", ")", "\n", "mask_feats", "=", "mask_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "mask_roi_extractor", ".", "featmap_strides", ")", "]", ",", "\n", "mask_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                            ", "mask_feats", "=", "self", ".", "shared_head", "(", "mask_feats", ",", "i", ")", "\n", "", "mask_pred", "=", "mask_head", "(", "mask_feats", ")", "\n", "segm_result", "=", "mask_head", ".", "get_seg_masks", "(", "\n", "mask_pred", ",", "_bboxes", ",", "det_labels", ",", "rcnn_test_cfg", ",", "\n", "ori_shape", ",", "scale_factor", ",", "rescale", ")", "\n", "", "ms_segm_result", "[", "'stage{}'", ".", "format", "(", "i", ")", "]", "=", "segm_result", "\n", "\n", "", "", "if", "i", "<", "self", ".", "num_stages", "-", "1", ":", "\n", "                ", "bbox_label", "=", "cls_score", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "rois", "=", "bbox_head", ".", "regress_by_class", "(", "rois", ",", "bbox_label", ",", "bbox_pred", ",", "\n", "img_meta", "[", "0", "]", ")", "\n", "\n", "", "", "cls_score", "=", "sum", "(", "ms_scores", ")", "/", "self", ".", "num_stages", "\n", "det_bboxes", ",", "det_labels", "=", "self", ".", "bbox_head", "[", "-", "1", "]", ".", "get_det_bboxes", "(", "\n", "rois", ",", "\n", "cls_score", ",", "\n", "bbox_pred", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "rescale", "=", "rescale", ",", "\n", "cfg", "=", "rcnn_test_cfg", ")", "\n", "bbox_result", "=", "bbox2result", "(", "det_bboxes", ",", "det_labels", ",", "\n", "self", ".", "bbox_head", "[", "-", "1", "]", ".", "num_classes", ")", "\n", "ms_bbox_result", "[", "'ensemble'", "]", "=", "bbox_result", "\n", "\n", "if", "self", ".", "with_mask", ":", "\n", "            ", "if", "det_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "mask_classes", "=", "self", ".", "mask_head", "[", "-", "1", "]", ".", "num_classes", "-", "1", "\n", "segm_result", "=", "[", "[", "]", "for", "_", "in", "range", "(", "mask_classes", ")", "]", "\n", "", "else", ":", "\n", "                ", "if", "isinstance", "(", "scale_factor", ",", "float", ")", ":", "# aspect ratio fixed", "\n", "                    ", "_bboxes", "=", "(", "\n", "det_bboxes", "[", ":", ",", ":", "4", "]", "*", "\n", "scale_factor", "if", "rescale", "else", "det_bboxes", ")", "\n", "", "else", ":", "\n", "                    ", "_bboxes", "=", "(", "\n", "det_bboxes", "[", ":", ",", ":", "4", "]", "*", "\n", "torch", ".", "from_numpy", "(", "scale_factor", ")", ".", "to", "(", "det_bboxes", ".", "device", ")", "\n", "if", "rescale", "else", "det_bboxes", ")", "\n", "\n", "", "mask_rois", "=", "bbox2roi", "(", "[", "_bboxes", "]", ")", "\n", "aug_masks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "                    ", "mask_roi_extractor", "=", "self", ".", "mask_roi_extractor", "[", "i", "]", "\n", "mask_feats", "=", "mask_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "mask_roi_extractor", ".", "featmap_strides", ")", "]", ",", "mask_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                        ", "mask_feats", "=", "self", ".", "shared_head", "(", "mask_feats", ")", "\n", "", "mask_pred", "=", "self", ".", "mask_head", "[", "i", "]", "(", "mask_feats", ")", "\n", "aug_masks", ".", "append", "(", "mask_pred", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "merged_masks", "=", "merge_aug_masks", "(", "aug_masks", ",", "\n", "[", "img_meta", "]", "*", "self", ".", "num_stages", ",", "\n", "self", ".", "test_cfg", ".", "rcnn", ")", "\n", "segm_result", "=", "self", ".", "mask_head", "[", "-", "1", "]", ".", "get_seg_masks", "(", "\n", "merged_masks", ",", "_bboxes", ",", "det_labels", ",", "rcnn_test_cfg", ",", "\n", "ori_shape", ",", "scale_factor", ",", "rescale", ")", "\n", "", "ms_segm_result", "[", "'ensemble'", "]", "=", "segm_result", "\n", "\n", "", "if", "not", "self", ".", "test_cfg", ".", "keep_all_stages", ":", "\n", "            ", "if", "self", ".", "with_mask", ":", "\n", "                ", "results", "=", "(", "ms_bbox_result", "[", "'ensemble'", "]", ",", "\n", "ms_segm_result", "[", "'ensemble'", "]", ")", "\n", "", "else", ":", "\n", "                ", "results", "=", "ms_bbox_result", "[", "'ensemble'", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "with_mask", ":", "\n", "                ", "results", "=", "{", "\n", "stage", ":", "(", "ms_bbox_result", "[", "stage", "]", ",", "ms_segm_result", "[", "stage", "]", ")", "\n", "for", "stage", "in", "ms_bbox_result", "\n", "}", "\n", "", "else", ":", "\n", "                ", "results", "=", "ms_bbox_result", "\n", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.aug_test": [[371, 373], ["None"], "methods", ["None"], ["", "def", "aug_test", "(", "self", ",", "img", ",", "img_meta", ",", "proposals", "=", "None", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.show_result": [[374, 385], ["super().show_result", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.show_result"], ["", "def", "show_result", "(", "self", ",", "data", ",", "result", ",", "img_norm_cfg", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "with_mask", ":", "\n", "            ", "ms_bbox_result", ",", "ms_segm_result", "=", "result", "\n", "if", "isinstance", "(", "ms_bbox_result", ",", "dict", ")", ":", "\n", "                ", "result", "=", "(", "ms_bbox_result", "[", "'ensemble'", "]", ",", "\n", "ms_segm_result", "[", "'ensemble'", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "result", ",", "dict", ")", ":", "\n", "                ", "result", "=", "result", "[", "'ensemble'", "]", "\n", "", "", "super", "(", "CascadeRCNN", ",", "self", ")", ".", "show_result", "(", "data", ",", "result", ",", "img_norm_cfg", ",", "\n", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.ssd_vgg.SSDVGG.__init__": [[19, 54], ["mmcv.cnn.VGG.__init__", "ssd_vgg.SSDVGG.features.add_module", "ssd_vgg.SSDVGG.features.add_module", "ssd_vgg.SSDVGG.features.add_module", "ssd_vgg.SSDVGG.features.add_module", "ssd_vgg.SSDVGG.features.add_module", "ssd_vgg.SSDVGG._make_extra_layers", "ssd_vgg.L2Norm", "str", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "str", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "str", "torch.ReLU", "torch.ReLU", "torch.ReLU", "str", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "str", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.ssd_vgg.SSDVGG._make_extra_layers"], ["def", "__init__", "(", "self", ",", "\n", "input_size", ",", "\n", "depth", ",", "\n", "with_last_pool", "=", "False", ",", "\n", "ceil_mode", "=", "True", ",", "\n", "out_indices", "=", "(", "3", ",", "4", ")", ",", "\n", "out_feature_indices", "=", "(", "22", ",", "34", ")", ",", "\n", "l2_norm_scale", "=", "20.", ")", ":", "\n", "        ", "super", "(", "SSDVGG", ",", "self", ")", ".", "__init__", "(", "\n", "depth", ",", "\n", "with_last_pool", "=", "with_last_pool", ",", "\n", "ceil_mode", "=", "ceil_mode", ",", "\n", "out_indices", "=", "out_indices", ")", "\n", "assert", "input_size", "in", "(", "300", ",", "512", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "\n", "self", ".", "features", ".", "add_module", "(", "\n", "str", "(", "len", "(", "self", ".", "features", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "features", ".", "add_module", "(", "\n", "str", "(", "len", "(", "self", ".", "features", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "6", ",", "dilation", "=", "6", ")", ")", "\n", "self", ".", "features", ".", "add_module", "(", "\n", "str", "(", "len", "(", "self", ".", "features", ")", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "features", ".", "add_module", "(", "\n", "str", "(", "len", "(", "self", ".", "features", ")", ")", ",", "nn", ".", "Conv2d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "1", ")", ")", "\n", "self", ".", "features", ".", "add_module", "(", "\n", "str", "(", "len", "(", "self", ".", "features", ")", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "out_feature_indices", "=", "out_feature_indices", "\n", "\n", "self", ".", "inplanes", "=", "1024", "\n", "self", ".", "extra", "=", "self", ".", "_make_extra_layers", "(", "self", ".", "extra_setting", "[", "input_size", "]", ")", "\n", "self", ".", "l2_norm", "=", "L2Norm", "(", "\n", "self", ".", "features", "[", "out_feature_indices", "[", "0", "]", "-", "1", "]", ".", "out_channels", ",", "\n", "l2_norm_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.ssd_vgg.SSDVGG.init_weights": [[55, 75], ["isinstance", "ssd_vgg.SSDVGG.extra.modules", "mmcv.cnn.constant_init", "logging.getLogger", "mmcv.runner.load_checkpoint", "isinstance", "ssd_vgg.SSDVGG.features.modules", "TypeError", "mmcv.cnn.xavier_init", "isinstance", "mmcv.cnn.kaiming_init", "isinstance", "mmcv.cnn.constant_init", "isinstance", "mmcv.cnn.normal_init"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.xavier_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.kaiming_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "for", "m", "in", "self", ".", "features", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "1", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                    ", "normal_init", "(", "m", ",", "std", "=", "0.01", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "extra", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "xavier_init", "(", "m", ",", "distribution", "=", "'uniform'", ")", "\n", "\n", "", "", "constant_init", "(", "self", ".", "l2_norm", ",", "self", ".", "l2_norm", ".", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.ssd_vgg.SSDVGG.forward": [[76, 91], ["enumerate", "enumerate", "ssd_vgg.SSDVGG.l2_norm", "layer", "torch.relu", "torch.relu", "torch.relu", "len", "tuple", "outs.append", "layer", "outs.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "features", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "out_feature_indices", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "", "", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "extra", ")", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "layer", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "if", "i", "%", "2", "==", "1", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "", "", "outs", "[", "0", "]", "=", "self", ".", "l2_norm", "(", "outs", "[", "0", "]", ")", "\n", "if", "len", "(", "outs", ")", "==", "1", ":", "\n", "            ", "return", "outs", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.ssd_vgg.SSDVGG._make_extra_layers": [[92, 117], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "layers.append", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "", "def", "_make_extra_layers", "(", "self", ",", "outplanes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "kernel_sizes", "=", "(", "1", ",", "3", ")", "\n", "num_layers", "=", "0", "\n", "outplane", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "outplanes", ")", ")", ":", "\n", "            ", "if", "self", ".", "inplanes", "==", "'S'", ":", "\n", "                ", "self", ".", "inplanes", "=", "outplane", "\n", "continue", "\n", "", "k", "=", "kernel_sizes", "[", "num_layers", "%", "2", "]", "\n", "if", "outplanes", "[", "i", "]", "==", "'S'", ":", "\n", "                ", "outplane", "=", "outplanes", "[", "i", "+", "1", "]", "\n", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "inplanes", ",", "outplane", ",", "k", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "outplane", "=", "outplanes", "[", "i", "]", "\n", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "inplanes", ",", "outplane", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "layers", ".", "append", "(", "conv", ")", "\n", "self", ".", "inplanes", "=", "outplanes", "[", "i", "]", "\n", "num_layers", "+=", "1", "\n", "", "if", "self", ".", "input_size", "==", "512", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "256", ",", "4", ",", "padding", "=", "1", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.ssd_vgg.L2Norm.__init__": [[121, 127], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_dims", ",", "scale", "=", "20.", ",", "eps", "=", "1e-10", ")", ":", "\n", "        ", "super", "(", "L2Norm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_dims", "=", "n_dims", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "n_dims", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.ssd_vgg.L2Norm.forward": [[128, 134], ["x.float", "x.float.pow().sum().sqrt", "x.float.pow().sum", "ssd_vgg.L2Norm.weight[].float().expand_as", "x.float.pow", "ssd_vgg.L2Norm.weight[].float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# normalization layer convert to FP32 in FP16 training", "\n", "        ", "x_float", "=", "x", ".", "float", "(", ")", "\n", "norm", "=", "x_float", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "self", ".", "eps", "\n", "return", "(", "self", ".", "weight", "[", "None", ",", ":", ",", "None", ",", "None", "]", ".", "float", "(", ")", ".", "expand_as", "(", "x_float", ")", "*", "\n", "x_float", "/", "norm", ")", ".", "type_as", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRModule.__init__": [[18, 43], ["dict", "torch.Module.__init__", "hrnet.HRModule._check_branches", "hrnet.HRModule._make_branches", "hrnet.HRModule._make_fuse_layers", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRModule._check_branches", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRModule._make_branches", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRModule._make_fuse_layers"], ["def", "__init__", "(", "self", ",", "\n", "num_branches", ",", "\n", "blocks", ",", "\n", "num_blocks", ",", "\n", "in_channels", ",", "\n", "num_channels", ",", "\n", "multiscale_output", "=", "True", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ")", ":", "\n", "        ", "super", "(", "HRModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_check_branches", "(", "num_branches", ",", "num_blocks", ",", "in_channels", ",", "\n", "num_channels", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multiscale_output", "=", "multiscale_output", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "num_branches", ",", "blocks", ",", "num_blocks", ",", "\n", "num_channels", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRModule._check_branches": [[44, 60], ["len", "ValueError", "len", "ValueError", "len", "ValueError", "len", "len", "len"], "methods", ["None"], ["", "def", "_check_branches", "(", "self", ",", "num_branches", ",", "num_blocks", ",", "in_channels", ",", "\n", "num_channels", ")", ":", "\n", "        ", "if", "num_branches", "!=", "len", "(", "num_blocks", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_BLOCKS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_blocks", ")", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_CHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_channels", ")", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "in_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_INCHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "in_channels", ")", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRModule._make_one_branch": [[61, 104], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "utils.build_conv_layer", "block", "utils.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer"], ["", "", "def", "_make_one_branch", "(", "self", ",", "\n", "branch_index", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_channels", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "in_channels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "self", ".", "in_channels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "num_channels", "[", "branch_index", "]", "*", "\n", "block", ".", "expansion", ")", "[", "1", "]", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "in_channels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "\n", "stride", ",", "\n", "downsample", "=", "downsample", ",", "\n", "with_cp", "=", "self", ".", "with_cp", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ")", ")", "\n", "self", ".", "in_channels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "in_channels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "\n", "with_cp", "=", "self", ".", "with_cp", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRModule._make_branches": [[105, 113], ["range", "torch.ModuleList", "branches.append", "hrnet.HRModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRModule._make_fuse_layers": [[114, 175], ["range", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "utils.build_conv_layer", "torch.Upsample", "torch.Sequential", "utils.build_norm_layer", "conv_downsamples.append", "conv_downsamples.append", "torch.Sequential", "torch.Sequential", "utils.build_conv_layer", "utils.build_conv_layer", "torch.ReLU", "utils.build_norm_layer", "utils.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer"], ["", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "in_channels", "=", "self", ".", "in_channels", "\n", "fuse_layers", "=", "[", "]", "\n", "num_out_branches", "=", "num_branches", "if", "self", ".", "multiscale_output", "else", "1", "\n", "for", "i", "in", "range", "(", "num_out_branches", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "in_channels", "[", "j", "]", ",", "\n", "in_channels", "[", "i", "]", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "in_channels", "[", "i", "]", ")", "[", "1", "]", ",", "\n", "nn", ".", "Upsample", "(", "\n", "scale_factor", "=", "2", "**", "(", "j", "-", "i", ")", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv_downsamples", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "conv_downsamples", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "in_channels", "[", "j", "]", ",", "\n", "in_channels", "[", "i", "]", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "\n", "in_channels", "[", "i", "]", ")", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                            ", "conv_downsamples", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "in_channels", "[", "j", "]", ",", "\n", "in_channels", "[", "j", "]", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "\n", "in_channels", "[", "j", "]", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv_downsamples", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRModule.forward": [[176, 193], ["range", "range", "len", "range", "x_fuse.append", "hrnet.HRModule.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "0", "\n", "for", "j", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "+=", "x", "[", "j", "]", "\n", "", "else", ":", "\n", "                    ", "y", "+=", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRNet.__init__": [[217, 303], ["dict", "torch.Module.__init__", "utils.build_norm_layer", "utils.build_norm_layer", "utils.build_conv_layer", "hrnet.HRNet.add_module", "utils.build_conv_layer", "hrnet.HRNet.add_module", "torch.ReLU", "hrnet.HRNet._make_layer", "hrnet.HRNet._make_transition_layer", "hrnet.HRNet._make_stage", "hrnet.HRNet._make_transition_layer", "hrnet.HRNet._make_stage", "hrnet.HRNet._make_transition_layer", "hrnet.HRNet._make_stage"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRNet._make_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRNet._make_transition_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRNet._make_stage", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRNet._make_transition_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRNet._make_stage", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRNet._make_transition_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRNet._make_stage"], ["def", "__init__", "(", "self", ",", "\n", "extra", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "norm_eval", "=", "True", ",", "\n", "with_cp", "=", "False", ",", "\n", "zero_init_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "HRNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "extra", "=", "extra", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "zero_init_residual", "=", "zero_init_residual", "\n", "\n", "# stem net", "\n", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "64", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "64", ",", "postfix", "=", "2", ")", "\n", "\n", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "64", ",", "\n", "64", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# stage 1", "\n", "self", ".", "stage1_cfg", "=", "self", ".", "extra", "[", "'stage1'", "]", "\n", "num_channels", "=", "self", ".", "stage1_cfg", "[", "'num_channels'", "]", "[", "0", "]", "\n", "block_type", "=", "self", ".", "stage1_cfg", "[", "'block'", "]", "\n", "num_blocks", "=", "self", ".", "stage1_cfg", "[", "'num_blocks'", "]", "[", "0", "]", "\n", "\n", "block", "=", "self", ".", "blocks_dict", "[", "block_type", "]", "\n", "stage1_out_channels", "=", "num_channels", "*", "block", ".", "expansion", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_channels", ",", "num_blocks", ")", "\n", "\n", "# stage 2", "\n", "self", ".", "stage2_cfg", "=", "self", ".", "extra", "[", "'stage2'", "]", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'num_channels'", "]", "\n", "block_type", "=", "self", ".", "stage2_cfg", "[", "'block'", "]", "\n", "\n", "block", "=", "self", ".", "blocks_dict", "[", "block_type", "]", "\n", "num_channels", "=", "[", "channel", "*", "block", ".", "expansion", "for", "channel", "in", "num_channels", "]", "\n", "self", ".", "transition1", "=", "self", ".", "_make_transition_layer", "(", "[", "stage1_out_channels", "]", ",", "\n", "num_channels", ")", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ")", "\n", "\n", "# stage 3", "\n", "self", ".", "stage3_cfg", "=", "self", ".", "extra", "[", "'stage3'", "]", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'num_channels'", "]", "\n", "block_type", "=", "self", ".", "stage3_cfg", "[", "'block'", "]", "\n", "\n", "block", "=", "self", ".", "blocks_dict", "[", "block_type", "]", "\n", "num_channels", "=", "[", "channel", "*", "block", ".", "expansion", "for", "channel", "in", "num_channels", "]", "\n", "self", ".", "transition2", "=", "self", ".", "_make_transition_layer", "(", "pre_stage_channels", ",", "\n", "num_channels", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ")", "\n", "\n", "# stage 4", "\n", "self", ".", "stage4_cfg", "=", "self", ".", "extra", "[", "'stage4'", "]", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'num_channels'", "]", "\n", "block_type", "=", "self", ".", "stage4_cfg", "[", "'block'", "]", "\n", "\n", "block", "=", "self", ".", "blocks_dict", "[", "block_type", "]", "\n", "num_channels", "=", "[", "channel", "*", "block", ".", "expansion", "for", "channel", "in", "num_channels", "]", "\n", "self", ".", "transition3", "=", "self", ".", "_make_transition_layer", "(", "pre_stage_channels", ",", "\n", "num_channels", ")", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRNet.norm1": [[304, 307], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRNet.norm2": [[308, 311], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm2", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm2_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRNet._make_transition_layer": [[312, 357], ["len", "len", "range", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv_downsamples.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.build_conv_layer", "torch.ReLU", "utils.build_conv_layer", "torch.ReLU", "utils.build_norm_layer", "utils.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer"], ["", "def", "_make_transition_layer", "(", "self", ",", "num_channels_pre_layer", ",", "\n", "num_channels_cur_layer", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv_downsamples", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "in_channels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "out_channels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "in_channels", "\n", "conv_downsamples", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "out_channels", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv_downsamples", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRNet._make_layer": [[358, 392], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "utils.build_conv_layer", "block", "utils.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "planes", "*", "block", ".", "expansion", ")", "[", "1", "]", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", ",", "\n", "downsample", "=", "downsample", ",", "\n", "with_cp", "=", "self", ".", "with_cp", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "with_cp", "=", "self", ".", "with_cp", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRNet._make_stage": [[393, 421], ["range", "hr_modules.append", "torch.Sequential", "hrnet.HRModule"], "methods", ["None"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "in_channels", ",", "multiscale_output", "=", "True", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'num_modules'", "]", "\n", "num_branches", "=", "layer_config", "[", "'num_branches'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'num_blocks'", "]", "\n", "num_channels", "=", "layer_config", "[", "'num_channels'", "]", "\n", "block", "=", "self", ".", "blocks_dict", "[", "layer_config", "[", "'block'", "]", "]", "\n", "\n", "hr_modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used for the last module", "\n", "            ", "if", "not", "multiscale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multiscale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multiscale_output", "=", "True", "\n", "\n", "", "hr_modules", ".", "append", "(", "\n", "HRModule", "(", "\n", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "in_channels", ",", "\n", "num_channels", ",", "\n", "reset_multiscale_output", ",", "\n", "with_cp", "=", "self", ".", "with_cp", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "hr_modules", ")", ",", "in_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRNet.init_weights": [[422, 441], ["isinstance", "logging.getLogger", "mmcv.runner.load_checkpoint", "hrnet.HRNet.modules", "TypeError", "isinstance", "hrnet.HRNet.modules", "mmcv.cnn.kaiming_init", "isinstance", "isinstance", "mmcv.cnn.constant_init", "mmcv.cnn.constant_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.kaiming_init"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "_BatchNorm", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "1", ")", "\n", "\n", "", "", "if", "self", ".", "zero_init_residual", ":", "\n", "                ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                        ", "constant_init", "(", "m", ".", "norm3", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                        ", "constant_init", "(", "m", ".", "norm2", ",", "0", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRNet.forward": [[442, 477], ["hrnet.HRNet.conv1", "hrnet.HRNet.norm1", "hrnet.HRNet.relu", "hrnet.HRNet.conv2", "hrnet.HRNet.norm2", "hrnet.HRNet.relu", "hrnet.HRNet.layer1", "range", "hrnet.HRNet.stage2", "range", "hrnet.HRNet.stage3", "range", "hrnet.HRNet.stage4", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.Bottleneck.norm2"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'num_branches'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'num_branches'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'num_branches'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "\n", "return", "y_list", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.hrnet.HRNet.train": [[478, 485], ["super().train", "hrnet.HRNet.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.ResNet.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "HRNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "if", "mode", "and", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# trick: eval have effect on BatchNorm only", "\n", "                ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.BasicBlock.__init__": [[18, 58], ["dict", "torch.Module.__init__", "utils.build_norm_layer", "utils.build_norm_layer", "utils.build_conv_layer", "resnet.BasicBlock.add_module", "utils.build_conv_layer", "resnet.BasicBlock.add_module", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "dcn", "=", "None", ",", "\n", "gcb", "=", "None", ",", "\n", "gen_attention", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "dcn", "is", "None", ",", "\"Not implemented yet.\"", "\n", "assert", "gen_attention", "is", "None", ",", "\"Not implemented yet.\"", "\n", "assert", "gcb", "is", "None", ",", "\"Not implemented yet.\"", "\n", "\n", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "2", ")", "\n", "\n", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "planes", ",", "planes", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "assert", "not", "with_cp", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.BasicBlock.norm1": [[59, 62], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.BasicBlock.norm2": [[63, 66], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm2", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm2_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.BasicBlock.forward": [[67, 84], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.norm1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.norm2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.Bottleneck.norm2"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "norm1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.Bottleneck.__init__": [[89, 207], ["dict", "torch.Module.__init__", "utils.build_norm_layer", "utils.build_norm_layer", "utils.build_norm_layer", "utils.build_conv_layer", "resnet.Bottleneck.add_module", "resnet.Bottleneck.add_module", "utils.build_conv_layer", "resnet.Bottleneck.add_module", "torch.ReLU", "torch.ReLU", "isinstance", "isinstance", "isinstance", "dcn.get", "dcn.get", "utils.build_conv_layer", "dcn.get", "torch.Conv2d", "torch.Conv2d", "conv_op", "mmdet.ops.ContextBlock", "mmdet.models.plugins.GeneralizedAttention"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "dcn", "=", "None", ",", "\n", "gcb", "=", "None", ",", "\n", "gen_attention", "=", "None", ")", ":", "\n", "        ", "\"\"\"Bottleneck block for ResNet.\n        If style is \"pytorch\", the stride-two layer is the 3x3 conv layer,\n        if it is \"caffe\", the stride-two layer is the first 1x1 conv layer.\n        \"\"\"", "\n", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "style", "in", "[", "'pytorch'", ",", "'caffe'", "]", "\n", "assert", "dcn", "is", "None", "or", "isinstance", "(", "dcn", ",", "dict", ")", "\n", "assert", "gcb", "is", "None", "or", "isinstance", "(", "gcb", ",", "dict", ")", "\n", "assert", "gen_attention", "is", "None", "or", "isinstance", "(", "gen_attention", ",", "dict", ")", "\n", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "style", "=", "style", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "dcn", "=", "dcn", "\n", "self", ".", "with_dcn", "=", "dcn", "is", "not", "None", "\n", "self", ".", "gcb", "=", "gcb", "\n", "self", ".", "with_gcb", "=", "gcb", "is", "not", "None", "\n", "self", ".", "gen_attention", "=", "gen_attention", "\n", "self", ".", "with_gen_attention", "=", "gen_attention", "is", "not", "None", "\n", "\n", "if", "self", ".", "style", "==", "'pytorch'", ":", "\n", "            ", "self", ".", "conv1_stride", "=", "1", "\n", "self", ".", "conv2_stride", "=", "stride", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1_stride", "=", "stride", "\n", "self", ".", "conv2_stride", "=", "1", "\n", "\n", "", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "2", ")", "\n", "self", ".", "norm3_name", ",", "norm3", "=", "build_norm_layer", "(", "\n", "norm_cfg", ",", "planes", "*", "self", ".", "expansion", ",", "postfix", "=", "3", ")", "\n", "\n", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "self", ".", "conv1_stride", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "fallback_on_stride", "=", "False", "\n", "self", ".", "with_modulated_dcn", "=", "False", "\n", "if", "self", ".", "with_dcn", ":", "\n", "            ", "fallback_on_stride", "=", "dcn", ".", "get", "(", "'fallback_on_stride'", ",", "False", ")", "\n", "self", ".", "with_modulated_dcn", "=", "dcn", ".", "get", "(", "'modulated'", ",", "False", ")", "\n", "", "if", "not", "self", ".", "with_dcn", "or", "fallback_on_stride", ":", "\n", "            ", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "assert", "conv_cfg", "is", "None", ",", "'conv_cfg must be None for DCN'", "\n", "deformable_groups", "=", "dcn", ".", "get", "(", "'deformable_groups'", ",", "1", ")", "\n", "if", "not", "self", ".", "with_modulated_dcn", ":", "\n", "                ", "conv_op", "=", "DeformConv", "\n", "offset_channels", "=", "18", "\n", "", "else", ":", "\n", "                ", "conv_op", "=", "ModulatedDeformConv", "\n", "offset_channels", "=", "27", "\n", "", "self", ".", "conv2_offset", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "\n", "deformable_groups", "*", "offset_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ")", "\n", "self", ".", "conv2", "=", "conv_op", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "deformable_groups", "=", "deformable_groups", ",", "\n", "bias", "=", "False", ")", "\n", "", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "self", ".", "conv3", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "planes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm3_name", ",", "norm3", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "self", ".", "with_gcb", ":", "\n", "            ", "gcb_inplanes", "=", "planes", "*", "self", ".", "expansion", "\n", "self", ".", "context_block", "=", "ContextBlock", "(", "inplanes", "=", "gcb_inplanes", ",", "**", "gcb", ")", "\n", "\n", "# gen_attention", "\n", "", "if", "self", ".", "with_gen_attention", ":", "\n", "            ", "self", ".", "gen_attention_block", "=", "GeneralizedAttention", "(", "\n", "planes", ",", "**", "gen_attention", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.Bottleneck.norm1": [[208, 211], ["getattr"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.Bottleneck.norm2": [[212, 215], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm2", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm2_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.Bottleneck.norm3": [[216, 219], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm3", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm3_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.Bottleneck.forward": [[220, 266], ["resnet.Bottleneck.relu", "resnet.Bottleneck.conv1", "resnet.Bottleneck.norm1", "resnet.Bottleneck.relu", "resnet.Bottleneck.norm2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.norm3", "torch.checkpoint", "torch.checkpoint", "resnet.Bottleneck.forward._inner_forward"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.Bottleneck.norm2", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.Bottleneck.norm3"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "norm1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "not", "self", ".", "with_dcn", ":", "\n", "                ", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "", "elif", "self", ".", "with_modulated_dcn", ":", "\n", "                ", "offset_mask", "=", "self", ".", "conv2_offset", "(", "out", ")", "\n", "offset", "=", "offset_mask", "[", ":", ",", ":", "18", ",", ":", ",", ":", "]", "\n", "mask", "=", "offset_mask", "[", ":", ",", "-", "9", ":", ",", ":", ",", ":", "]", ".", "sigmoid", "(", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ",", "offset", ",", "mask", ")", "\n", "", "else", ":", "\n", "                ", "offset", "=", "self", ".", "conv2_offset", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ",", "offset", ")", "\n", "", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "with_gen_attention", ":", "\n", "                ", "out", "=", "self", ".", "gen_attention_block", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "norm3", "(", "out", ")", "\n", "\n", "if", "self", ".", "with_gcb", ":", "\n", "                ", "out", "=", "self", ".", "context_block", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "\n", "return", "out", "\n", "\n", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.ResNet.__init__": [[364, 447], ["dict", "torch.Module.__init__", "resnet.ResNet._make_stem_layer", "enumerate", "resnet.ResNet._freeze_stages", "KeyError", "len", "len", "max", "resnet.make_res_layer", "resnet.ResNet.add_module", "resnet.ResNet.res_layers.append", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.ResNet._make_stem_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.ResNet._freeze_stages", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnext.make_res_layer"], ["def", "__init__", "(", "self", ",", "\n", "depth", ",", "\n", "num_stages", "=", "4", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "out_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "frozen_stages", "=", "-", "1", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ")", ",", "\n", "norm_eval", "=", "True", ",", "\n", "dcn", "=", "None", ",", "\n", "stage_with_dcn", "=", "(", "False", ",", "False", ",", "False", ",", "False", ")", ",", "\n", "gcb", "=", "None", ",", "\n", "stage_with_gcb", "=", "(", "False", ",", "False", ",", "False", ",", "False", ")", ",", "\n", "gen_attention", "=", "None", ",", "\n", "stage_with_gen_attention", "=", "(", "(", ")", ",", "(", ")", ",", "(", ")", ",", "(", ")", ")", ",", "\n", "with_cp", "=", "False", ",", "\n", "zero_init_residual", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "depth", "not", "in", "self", ".", "arch_settings", ":", "\n", "            ", "raise", "KeyError", "(", "'invalid depth {} for resnet'", ".", "format", "(", "depth", ")", ")", "\n", "", "self", ".", "depth", "=", "depth", "\n", "self", ".", "num_stages", "=", "num_stages", "\n", "assert", "num_stages", ">=", "1", "and", "num_stages", "<=", "4", "\n", "self", ".", "strides", "=", "strides", "\n", "self", ".", "dilations", "=", "dilations", "\n", "assert", "len", "(", "strides", ")", "==", "len", "(", "dilations", ")", "==", "num_stages", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "assert", "max", "(", "out_indices", ")", "<", "num_stages", "\n", "self", ".", "style", "=", "style", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "self", ".", "dcn", "=", "dcn", "\n", "self", ".", "stage_with_dcn", "=", "stage_with_dcn", "\n", "if", "dcn", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "stage_with_dcn", ")", "==", "num_stages", "\n", "", "self", ".", "gen_attention", "=", "gen_attention", "\n", "self", ".", "gcb", "=", "gcb", "\n", "self", ".", "stage_with_gcb", "=", "stage_with_gcb", "\n", "if", "gcb", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "stage_with_gcb", ")", "==", "num_stages", "\n", "", "self", ".", "zero_init_residual", "=", "zero_init_residual", "\n", "self", ".", "block", ",", "stage_blocks", "=", "self", ".", "arch_settings", "[", "depth", "]", "\n", "self", ".", "stage_blocks", "=", "stage_blocks", "[", ":", "num_stages", "]", "\n", "self", ".", "inplanes", "=", "64", "\n", "\n", "self", ".", "_make_stem_layer", "(", ")", "\n", "\n", "self", ".", "res_layers", "=", "[", "]", "\n", "for", "i", ",", "num_blocks", "in", "enumerate", "(", "self", ".", "stage_blocks", ")", ":", "\n", "            ", "stride", "=", "strides", "[", "i", "]", "\n", "dilation", "=", "dilations", "[", "i", "]", "\n", "dcn", "=", "self", ".", "dcn", "if", "self", ".", "stage_with_dcn", "[", "i", "]", "else", "None", "\n", "gcb", "=", "self", ".", "gcb", "if", "self", ".", "stage_with_gcb", "[", "i", "]", "else", "None", "\n", "planes", "=", "64", "*", "2", "**", "i", "\n", "res_layer", "=", "make_res_layer", "(", "\n", "self", ".", "block", ",", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "num_blocks", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "style", "=", "self", ".", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "dcn", "=", "dcn", ",", "\n", "gcb", "=", "gcb", ",", "\n", "gen_attention", "=", "gen_attention", ",", "\n", "gen_attention_blocks", "=", "stage_with_gen_attention", "[", "i", "]", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "self", ".", "block", ".", "expansion", "\n", "layer_name", "=", "'layer{}'", ".", "format", "(", "i", "+", "1", ")", "\n", "self", ".", "add_module", "(", "layer_name", ",", "res_layer", ")", "\n", "self", ".", "res_layers", ".", "append", "(", "layer_name", ")", "\n", "\n", "", "self", ".", "_freeze_stages", "(", ")", "\n", "\n", "self", ".", "feat_dim", "=", "self", ".", "block", ".", "expansion", "*", "64", "*", "2", "**", "(", "\n", "len", "(", "self", ".", "stage_blocks", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.ResNet.norm1": [[448, 451], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.ResNet._make_stem_layer": [[452, 465], ["utils.build_conv_layer", "utils.build_norm_layer", "resnet.ResNet.add_module", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer"], ["", "def", "_make_stem_layer", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "64", ",", "postfix", "=", "1", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.ResNet._freeze_stages": [[466, 478], ["range", "resnet.ResNet.norm1.eval", "getattr", "getattr.eval", "getattr.parameters", "getattr.parameters"], "methods", ["None"], ["", "def", "_freeze_stages", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "self", ".", "norm1", ".", "eval", "(", ")", "\n", "for", "m", "in", "[", "self", ".", "conv1", ",", "self", ".", "norm1", "]", ":", "\n", "                ", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frozen_stages", "+", "1", ")", ":", "\n", "            ", "m", "=", "getattr", "(", "self", ",", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "m", ".", "eval", "(", ")", "\n", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.ResNet.init_weights": [[479, 504], ["isinstance", "logging.getLogger", "mmcv.runner.load_checkpoint", "resnet.ResNet.modules", "TypeError", "isinstance", "resnet.ResNet.modules", "resnet.ResNet.modules", "mmcv.cnn.kaiming_init", "isinstance", "isinstance", "mmcv.cnn.constant_init", "isinstance", "hasattr", "mmcv.cnn.constant_init", "mmcv.cnn.constant_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.kaiming_init"], ["", "", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "_BatchNorm", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "1", ")", "\n", "\n", "", "", "if", "self", ".", "dcn", "is", "not", "None", ":", "\n", "                ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", "and", "hasattr", "(", "\n", "m", ",", "'conv2_offset'", ")", ":", "\n", "                        ", "constant_init", "(", "m", ".", "conv2_offset", ",", "0", ")", "\n", "\n", "", "", "", "if", "self", ".", "zero_init_residual", ":", "\n", "                ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                        ", "constant_init", "(", "m", ".", "norm3", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                        ", "constant_init", "(", "m", ".", "norm2", ",", "0", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.ResNet.forward": [[505, 517], ["resnet.ResNet.conv1", "resnet.ResNet.norm1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "enumerate", "tuple", "getattr", "getattr.", "outs.append"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.ResNet.norm1"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "layer_name", "in", "enumerate", "(", "self", ".", "res_layers", ")", ":", "\n", "            ", "res_layer", "=", "getattr", "(", "self", ",", "layer_name", ")", "\n", "x", "=", "res_layer", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "", "", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.ResNet.train": [[518, 526], ["super().train", "resnet.ResNet._freeze_stages", "resnet.ResNet.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.ResNet.train", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.ResNet._freeze_stages"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "_freeze_stages", "(", ")", "\n", "if", "mode", "and", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# trick: eval have effect on BatchNorm only", "\n", "                ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.make_res_layer": [[268, 329], ["dict", "layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "utils.build_conv_layer", "block", "utils.build_norm_layer"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer"], ["", "", "def", "make_res_layer", "(", "block", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "dcn", "=", "None", ",", "\n", "gcb", "=", "None", ",", "\n", "gen_attention", "=", "None", ",", "\n", "gen_attention_blocks", "=", "[", "]", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "        ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "norm_cfg", ",", "planes", "*", "block", ".", "expansion", ")", "[", "1", "]", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", "=", "inplanes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "downsample", "=", "downsample", ",", "\n", "style", "=", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "dcn", "=", "dcn", ",", "\n", "gcb", "=", "gcb", ",", "\n", "gen_attention", "=", "gen_attention", "if", "\n", "(", "0", "in", "gen_attention_blocks", ")", "else", "None", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "        ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", "=", "inplanes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "dilation", ",", "\n", "style", "=", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "dcn", "=", "dcn", ",", "\n", "gcb", "=", "gcb", ",", "\n", "gen_attention", "=", "gen_attention", "if", "\n", "(", "i", "in", "gen_attention_blocks", ")", "else", "None", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnext.Bottleneck.__init__": [[14, 92], ["resnet.Bottleneck.__init__", "utils.build_norm_layer", "utils.build_norm_layer", "utils.build_norm_layer", "utils.build_conv_layer", "resnext.Bottleneck.add_module", "resnext.Bottleneck.add_module", "utils.build_conv_layer", "resnext.Bottleneck.add_module", "resnext.Bottleneck.dcn.get", "resnext.Bottleneck.dcn.get", "utils.build_conv_layer", "resnext.Bottleneck.dcn.get", "resnext.Bottleneck.dcn.get", "torch.Conv2d", "conv_op", "math.floor"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "groups", "=", "1", ",", "base_width", "=", "4", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Bottleneck block for ResNeXt.\n        If style is \"pytorch\", the stride-two layer is the 3x3 conv layer,\n        if it is \"caffe\", the stride-two layer is the first 1x1 conv layer.\n        \"\"\"", "\n", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", "inplanes", ",", "planes", ",", "**", "kwargs", ")", "\n", "\n", "if", "groups", "==", "1", ":", "\n", "            ", "width", "=", "self", ".", "planes", "\n", "", "else", ":", "\n", "            ", "width", "=", "math", ".", "floor", "(", "self", ".", "planes", "*", "(", "base_width", "/", "64", ")", ")", "*", "groups", "\n", "\n", "", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "\n", "self", ".", "norm_cfg", ",", "width", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "\n", "self", ".", "norm_cfg", ",", "width", ",", "postfix", "=", "2", ")", "\n", "self", ".", "norm3_name", ",", "norm3", "=", "build_norm_layer", "(", "\n", "self", ".", "norm_cfg", ",", "self", ".", "planes", "*", "self", ".", "expansion", ",", "postfix", "=", "3", ")", "\n", "\n", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "self", ".", "inplanes", ",", "\n", "width", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "self", ".", "conv1_stride", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "fallback_on_stride", "=", "False", "\n", "self", ".", "with_modulated_dcn", "=", "False", "\n", "if", "self", ".", "with_dcn", ":", "\n", "            ", "fallback_on_stride", "=", "self", ".", "dcn", ".", "get", "(", "'fallback_on_stride'", ",", "False", ")", "\n", "self", ".", "with_modulated_dcn", "=", "self", ".", "dcn", ".", "get", "(", "'modulated'", ",", "False", ")", "\n", "", "if", "not", "self", ".", "with_dcn", "or", "fallback_on_stride", ":", "\n", "            ", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "width", ",", "\n", "width", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "self", ".", "dilation", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "conv_cfg", "is", "None", ",", "'conv_cfg must be None for DCN'", "\n", "groups", "=", "self", ".", "dcn", ".", "get", "(", "'groups'", ",", "1", ")", "\n", "deformable_groups", "=", "self", ".", "dcn", ".", "get", "(", "'deformable_groups'", ",", "1", ")", "\n", "if", "not", "self", ".", "with_modulated_dcn", ":", "\n", "                ", "conv_op", "=", "DeformConv", "\n", "offset_channels", "=", "18", "\n", "", "else", ":", "\n", "                ", "conv_op", "=", "ModulatedDeformConv", "\n", "offset_channels", "=", "27", "\n", "", "self", ".", "conv2_offset", "=", "nn", ".", "Conv2d", "(", "\n", "width", ",", "\n", "deformable_groups", "*", "offset_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "self", ".", "dilation", ",", "\n", "dilation", "=", "self", ".", "dilation", ")", "\n", "self", ".", "conv2", "=", "conv_op", "(", "\n", "width", ",", "\n", "width", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "self", ".", "dilation", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "deformable_groups", "=", "deformable_groups", ",", "\n", "bias", "=", "False", ")", "\n", "", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "self", ".", "conv3", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "width", ",", "\n", "self", ".", "planes", "*", "self", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm3_name", ",", "norm3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnext.ResNeXt.__init__": [[190, 224], ["resnet.ResNet.__init__", "enumerate", "resnext.ResNeXt._freeze_stages", "resnext.make_res_layer", "resnext.ResNeXt.add_module", "resnext.ResNeXt.res_layers.append"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnet.ResNet._freeze_stages", "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnext.make_res_layer"], ["def", "__init__", "(", "self", ",", "groups", "=", "1", ",", "base_width", "=", "4", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "base_width", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "res_layers", "=", "[", "]", "\n", "for", "i", ",", "num_blocks", "in", "enumerate", "(", "self", ".", "stage_blocks", ")", ":", "\n", "            ", "stride", "=", "self", ".", "strides", "[", "i", "]", "\n", "dilation", "=", "self", ".", "dilations", "[", "i", "]", "\n", "dcn", "=", "self", ".", "dcn", "if", "self", ".", "stage_with_dcn", "[", "i", "]", "else", "None", "\n", "gcb", "=", "self", ".", "gcb", "if", "self", ".", "stage_with_gcb", "[", "i", "]", "else", "None", "\n", "planes", "=", "64", "*", "2", "**", "i", "\n", "res_layer", "=", "make_res_layer", "(", "\n", "self", ".", "block", ",", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "num_blocks", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "\n", "style", "=", "self", ".", "style", ",", "\n", "with_cp", "=", "self", ".", "with_cp", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "dcn", "=", "dcn", ",", "\n", "gcb", "=", "gcb", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "self", ".", "block", ".", "expansion", "\n", "layer_name", "=", "'layer{}'", ".", "format", "(", "i", "+", "1", ")", "\n", "self", ".", "add_module", "(", "layer_name", ",", "res_layer", ")", "\n", "self", ".", "res_layers", ".", "append", "(", "layer_name", ")", "\n", "\n", "", "self", ".", "_freeze_stages", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.backbones.resnext.make_res_layer": [[94, 155], ["dict", "layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "utils.build_conv_layer", "block", "utils.build_norm_layer"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.norm.build_norm_layer"], ["", "", "def", "make_res_layer", "(", "block", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "base_width", "=", "4", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "dcn", "=", "None", ",", "\n", "gcb", "=", "None", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "        ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "norm_cfg", ",", "planes", "*", "block", ".", "expansion", ")", "[", "1", "]", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", "=", "inplanes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "downsample", "=", "downsample", ",", "\n", "groups", "=", "groups", ",", "\n", "base_width", "=", "base_width", ",", "\n", "style", "=", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "dcn", "=", "dcn", ",", "\n", "gcb", "=", "gcb", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "        ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", "=", "inplanes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "base_width", "=", "base_width", ",", "\n", "style", "=", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "dcn", "=", "dcn", ",", "\n", "gcb", "=", "gcb", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.plugins.non_local.NonLocal2D.__init__": [[24, 65], ["torch.Module.__init__", "utils.ConvModule", "utils.ConvModule", "utils.ConvModule", "utils.ConvModule", "non_local.NonLocal2D.init_weights"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "reduction", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "mode", "=", "'embedded_gaussian'", ")", ":", "\n", "        ", "super", "(", "NonLocal2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "use_scale", "=", "use_scale", "\n", "self", ".", "inter_channels", "=", "in_channels", "//", "reduction", "\n", "self", ".", "mode", "=", "mode", "\n", "assert", "mode", "in", "[", "'embedded_gaussian'", ",", "'dot_product'", "]", "\n", "\n", "# g, theta, phi are actually `nn.Conv2d`. Here we use ConvModule for", "\n", "# potential usage.", "\n", "self", ".", "g", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "activation", "=", "None", ")", "\n", "self", ".", "theta", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "activation", "=", "None", ")", "\n", "self", ".", "phi", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "activation", "=", "None", ")", "\n", "self", ".", "conv_out", "=", "ConvModule", "(", "\n", "self", ".", "inter_channels", ",", "\n", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "activation", "=", "None", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.plugins.non_local.NonLocal2D.init_weights": [[66, 73], ["mmcv.cnn.normal_init", "mmcv.cnn.constant_init", "mmcv.cnn.normal_init"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init"], ["", "def", "init_weights", "(", "self", ",", "std", "=", "0.01", ",", "zeros_init", "=", "True", ")", ":", "\n", "        ", "for", "m", "in", "[", "self", ".", "g", ",", "self", ".", "theta", ",", "self", ".", "phi", "]", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "std", ")", "\n", "", "if", "zeros_init", ":", "\n", "            ", "constant_init", "(", "self", ".", "conv_out", ".", "conv", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "normal_init", "(", "self", ".", "conv_out", ".", "conv", ",", "std", "=", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.plugins.non_local.NonLocal2D.embedded_gaussian": [[74, 82], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "pairwise_weight.softmax.softmax.softmax"], "methods", ["None"], ["", "", "def", "embedded_gaussian", "(", "self", ",", "theta_x", ",", "phi_x", ")", ":", "\n", "# pairwise_weight: [N, HxW, HxW]", "\n", "        ", "pairwise_weight", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "if", "self", ".", "use_scale", ":", "\n", "# theta_x.shape[-1] is `self.inter_channels`", "\n", "            ", "pairwise_weight", "/=", "theta_x", ".", "shape", "[", "-", "1", "]", "**", "-", "0.5", "\n", "", "pairwise_weight", "=", "pairwise_weight", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "return", "pairwise_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.plugins.non_local.NonLocal2D.dot_product": [[83, 88], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "dot_product", "(", "self", ",", "theta_x", ",", "phi_x", ")", ":", "\n", "# pairwise_weight: [N, HxW, HxW]", "\n", "        ", "pairwise_weight", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "pairwise_weight", "/=", "pairwise_weight", ".", "shape", "[", "-", "1", "]", "\n", "return", "pairwise_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.plugins.non_local.NonLocal2D.forward": [[89, 115], ["non_local.NonLocal2D.g().view", "g_x.permute.permute.permute", "non_local.NonLocal2D.theta().view", "theta_x.permute.permute.permute", "non_local.NonLocal2D.phi().view", "getattr", "getattr.", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "y.permute().reshape.permute().reshape.permute().reshape", "non_local.NonLocal2D.conv_out", "non_local.NonLocal2D.g", "non_local.NonLocal2D.theta", "non_local.NonLocal2D.phi", "y.permute().reshape.permute().reshape.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "n", ",", "_", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "\n", "# g_x: [N, HxW, C]", "\n", "g_x", "=", "self", ".", "g", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "# theta_x: [N, HxW, C]", "\n", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "# phi_x: [N, C, HxW]", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "\n", "pairwise_func", "=", "getattr", "(", "self", ",", "self", ".", "mode", ")", "\n", "# pairwise_weight: [N, HxW, HxW]", "\n", "pairwise_weight", "=", "pairwise_func", "(", "theta_x", ",", "phi_x", ")", "\n", "\n", "# y: [N, HxW, C]", "\n", "y", "=", "torch", ".", "matmul", "(", "pairwise_weight", ",", "g_x", ")", "\n", "# y: [N, C, H, W]", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "n", ",", "self", ".", "inter_channels", ",", "h", ",", "w", ")", "\n", "\n", "output", "=", "x", "+", "self", ".", "conv_out", "(", "y", ")", "\n", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.plugins.generalized_attention.GeneralizedAttention.__init__": [[34, 152], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "generalized_attention.GeneralizedAttention.init_weights", "bool", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "int", "numpy.ones", "range", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "int", "math.sqrt", "math.sqrt", "range", "torch.from_numpy().byte", "torch.from_numpy().byte", "torch.from_numpy().byte", "torch.from_numpy().byte", "torch.from_numpy().byte", "torch.from_numpy().byte", "torch.from_numpy().byte", "torch.from_numpy().byte", "torch.from_numpy().byte", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "max", "min", "max", "min"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights"], ["def", "__init__", "(", "self", ",", "\n", "in_dim", ",", "\n", "spatial_range", "=", "-", "1", ",", "\n", "num_heads", "=", "9", ",", "\n", "position_embedding_dim", "=", "-", "1", ",", "\n", "position_magnitude", "=", "1", ",", "\n", "kv_stride", "=", "2", ",", "\n", "q_stride", "=", "1", ",", "\n", "attention_type", "=", "'1111'", ")", ":", "\n", "\n", "        ", "super", "(", "GeneralizedAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# hard range means local range for non-local operation", "\n", "self", ".", "position_embedding_dim", "=", "(", "\n", "position_embedding_dim", "if", "position_embedding_dim", ">", "0", "else", "in_dim", ")", "\n", "\n", "self", ".", "position_magnitude", "=", "position_magnitude", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "channel_in", "=", "in_dim", "\n", "self", ".", "spatial_range", "=", "spatial_range", "\n", "self", ".", "kv_stride", "=", "kv_stride", "\n", "self", ".", "q_stride", "=", "q_stride", "\n", "self", ".", "attention_type", "=", "[", "bool", "(", "int", "(", "_", ")", ")", "for", "_", "in", "attention_type", "]", "\n", "self", ".", "qk_embed_dim", "=", "in_dim", "//", "num_heads", "\n", "out_c", "=", "self", ".", "qk_embed_dim", "*", "num_heads", "\n", "\n", "if", "self", ".", "attention_type", "[", "0", "]", "or", "self", ".", "attention_type", "[", "1", "]", ":", "\n", "            ", "self", ".", "query_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_dim", ",", "\n", "out_channels", "=", "out_c", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "query_conv", ".", "kaiming_init", "=", "True", "\n", "\n", "", "if", "self", ".", "attention_type", "[", "0", "]", "or", "self", ".", "attention_type", "[", "2", "]", ":", "\n", "            ", "self", ".", "key_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_dim", ",", "\n", "out_channels", "=", "out_c", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "key_conv", ".", "kaiming_init", "=", "True", "\n", "\n", "", "self", ".", "v_dim", "=", "in_dim", "//", "num_heads", "\n", "self", ".", "value_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_dim", ",", "\n", "out_channels", "=", "self", ".", "v_dim", "*", "num_heads", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "value_conv", ".", "kaiming_init", "=", "True", "\n", "\n", "if", "self", ".", "attention_type", "[", "1", "]", "or", "self", ".", "attention_type", "[", "3", "]", ":", "\n", "            ", "self", ".", "appr_geom_fc_x", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "position_embedding_dim", "//", "2", ",", "out_c", ",", "bias", "=", "False", ")", "\n", "self", ".", "appr_geom_fc_x", ".", "kaiming_init", "=", "True", "\n", "\n", "self", ".", "appr_geom_fc_y", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "position_embedding_dim", "//", "2", ",", "out_c", ",", "bias", "=", "False", ")", "\n", "self", ".", "appr_geom_fc_y", ".", "kaiming_init", "=", "True", "\n", "\n", "", "if", "self", ".", "attention_type", "[", "2", "]", ":", "\n", "            ", "stdv", "=", "1.0", "/", "math", ".", "sqrt", "(", "self", ".", "qk_embed_dim", "*", "2", ")", "\n", "appr_bias_value", "=", "-", "2", "*", "stdv", "*", "torch", ".", "rand", "(", "out_c", ")", "+", "stdv", "\n", "self", ".", "appr_bias", "=", "nn", ".", "Parameter", "(", "appr_bias_value", ")", "\n", "\n", "", "if", "self", ".", "attention_type", "[", "3", "]", ":", "\n", "            ", "stdv", "=", "1.0", "/", "math", ".", "sqrt", "(", "self", ".", "qk_embed_dim", "*", "2", ")", "\n", "geom_bias_value", "=", "-", "2", "*", "stdv", "*", "torch", ".", "rand", "(", "out_c", ")", "+", "stdv", "\n", "self", ".", "geom_bias", "=", "nn", ".", "Parameter", "(", "geom_bias_value", ")", "\n", "\n", "", "self", ".", "proj_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "self", ".", "v_dim", "*", "num_heads", ",", "\n", "out_channels", "=", "in_dim", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "proj_conv", ".", "kaiming_init", "=", "True", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n", "if", "self", ".", "spatial_range", ">=", "0", ":", "\n", "# only works when non local is after 3*3 conv", "\n", "            ", "if", "in_dim", "==", "256", ":", "\n", "                ", "max_len", "=", "84", "\n", "", "elif", "in_dim", "==", "512", ":", "\n", "                ", "max_len", "=", "42", "\n", "\n", "", "max_len_kv", "=", "int", "(", "(", "max_len", "-", "1.0", ")", "/", "self", ".", "kv_stride", "+", "1", ")", "\n", "local_constraint_map", "=", "np", ".", "ones", "(", "\n", "(", "max_len", ",", "max_len", ",", "max_len_kv", ",", "max_len_kv", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "iy", "in", "range", "(", "max_len", ")", ":", "\n", "                ", "for", "ix", "in", "range", "(", "max_len", ")", ":", "\n", "                    ", "local_constraint_map", "[", "iy", ",", "ix", ",", "\n", "max", "(", "(", "iy", "-", "self", ".", "spatial_range", ")", "//", "\n", "self", ".", "kv_stride", ",", "0", ")", ":", "min", "(", "\n", "(", "iy", "+", "self", ".", "spatial_range", "+", "\n", "1", ")", "//", "self", ".", "kv_stride", "+", "\n", "1", ",", "max_len", ")", ",", "\n", "max", "(", "(", "ix", "-", "self", ".", "spatial_range", ")", "//", "\n", "self", ".", "kv_stride", ",", "0", ")", ":", "min", "(", "\n", "(", "ix", "+", "self", ".", "spatial_range", "+", "\n", "1", ")", "//", "self", ".", "kv_stride", "+", "\n", "1", ",", "max_len", ")", "]", "=", "0", "\n", "\n", "", "", "self", ".", "local_constraint_map", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "from_numpy", "(", "local_constraint_map", ")", ".", "byte", "(", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "q_stride", ">", "1", ":", "\n", "            ", "self", ".", "q_downsample", "=", "nn", ".", "AvgPool2d", "(", "\n", "kernel_size", "=", "1", ",", "stride", "=", "self", ".", "q_stride", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "q_downsample", "=", "None", "\n", "\n", "", "if", "self", ".", "kv_stride", ">", "1", ":", "\n", "            ", "self", ".", "kv_downsample", "=", "nn", ".", "AvgPool2d", "(", "\n", "kernel_size", "=", "1", ",", "stride", "=", "self", ".", "kv_stride", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "kv_downsample", "=", "None", "\n", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.plugins.generalized_attention.GeneralizedAttention.get_position_embedding": [[153, 196], ["torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "dim_mat.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "get_position_embedding", "(", "self", ",", "\n", "h", ",", "\n", "w", ",", "\n", "h_kv", ",", "\n", "w_kv", ",", "\n", "q_stride", ",", "\n", "kv_stride", ",", "\n", "device", ",", "\n", "feat_dim", ",", "\n", "wave_length", "=", "1000", ")", ":", "\n", "        ", "h_idxs", "=", "torch", ".", "linspace", "(", "0", ",", "h", "-", "1", ",", "h", ")", ".", "cuda", "(", "device", ")", "\n", "h_idxs", "=", "h_idxs", ".", "view", "(", "(", "h", ",", "1", ")", ")", "*", "q_stride", "\n", "\n", "w_idxs", "=", "torch", ".", "linspace", "(", "0", ",", "w", "-", "1", ",", "w", ")", ".", "cuda", "(", "device", ")", "\n", "w_idxs", "=", "w_idxs", ".", "view", "(", "(", "w", ",", "1", ")", ")", "*", "q_stride", "\n", "\n", "h_kv_idxs", "=", "torch", ".", "linspace", "(", "0", ",", "h_kv", "-", "1", ",", "h_kv", ")", ".", "cuda", "(", "device", ")", "\n", "h_kv_idxs", "=", "h_kv_idxs", ".", "view", "(", "(", "h_kv", ",", "1", ")", ")", "*", "kv_stride", "\n", "\n", "w_kv_idxs", "=", "torch", ".", "linspace", "(", "0", ",", "w_kv", "-", "1", ",", "w_kv", ")", ".", "cuda", "(", "device", ")", "\n", "w_kv_idxs", "=", "w_kv_idxs", ".", "view", "(", "(", "w_kv", ",", "1", ")", ")", "*", "kv_stride", "\n", "\n", "# (h, h_kv, 1)", "\n", "h_diff", "=", "h_idxs", ".", "unsqueeze", "(", "1", ")", "-", "h_kv_idxs", ".", "unsqueeze", "(", "0", ")", "\n", "h_diff", "*=", "self", ".", "position_magnitude", "\n", "\n", "# (w, w_kv, 1)", "\n", "w_diff", "=", "w_idxs", ".", "unsqueeze", "(", "1", ")", "-", "w_kv_idxs", ".", "unsqueeze", "(", "0", ")", "\n", "w_diff", "*=", "self", ".", "position_magnitude", "\n", "\n", "feat_range", "=", "torch", ".", "arange", "(", "0", ",", "feat_dim", "/", "4", ")", ".", "cuda", "(", "device", ")", "\n", "\n", "dim_mat", "=", "torch", ".", "Tensor", "(", "[", "wave_length", "]", ")", ".", "cuda", "(", "device", ")", "\n", "dim_mat", "=", "dim_mat", "**", "(", "(", "4.", "/", "feat_dim", ")", "*", "feat_range", ")", "\n", "dim_mat", "=", "dim_mat", ".", "view", "(", "(", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "\n", "embedding_x", "=", "torch", ".", "cat", "(", "\n", "(", "(", "w_diff", "/", "dim_mat", ")", ".", "sin", "(", ")", ",", "(", "w_diff", "/", "dim_mat", ")", ".", "cos", "(", ")", ")", ",", "dim", "=", "2", ")", "\n", "\n", "embedding_y", "=", "torch", ".", "cat", "(", "\n", "(", "(", "h_diff", "/", "dim_mat", ")", ".", "sin", "(", ")", ",", "(", "h_diff", "/", "dim_mat", ")", ".", "cos", "(", ")", ")", ",", "dim", "=", "2", ")", "\n", "\n", "return", "embedding_x", ",", "embedding_y", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.plugins.generalized_attention.GeneralizedAttention.forward": [[197, 374], ["torch.softmax", "torch.softmax", "torch.softmax", "generalized_attention.GeneralizedAttention.value_conv", "generalized_attention.GeneralizedAttention.view().permute", "torch.matmul().permute().contiguous().view", "torch.matmul().permute().contiguous().view", "torch.matmul().permute().contiguous().view", "torch.matmul().permute().contiguous().view", "torch.matmul().permute().contiguous().view", "torch.matmul().permute().contiguous().view", "torch.matmul().permute().contiguous().view", "torch.matmul().permute().contiguous().view", "torch.matmul().permute().contiguous().view", "generalized_attention.GeneralizedAttention.proj_conv", "generalized_attention.GeneralizedAttention.q_downsample", "generalized_attention.GeneralizedAttention.kv_downsample", "generalized_attention.GeneralizedAttention.query_conv().view", "proj_query.permute.permute.permute", "generalized_attention.GeneralizedAttention.key_conv().view", "generalized_attention.GeneralizedAttention.get_position_embedding", "generalized_attention.GeneralizedAttention.appr_geom_fc_x().view().permute().repeat", "generalized_attention.GeneralizedAttention.appr_geom_fc_y().view().permute().repeat", "math.sqrt", "math.sqrt", "generalized_attention.GeneralizedAttention.appr_bias.view().repeat", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view.view", "torch.matmul().view.view", "torch.matmul().view.view", "generalized_attention.GeneralizedAttention.local_constraint_map[].contiguous().view", "torch.matmul().view.masked_fill_", "torch.matmul().view.masked_fill_", "torch.matmul().view.masked_fill_", "numpy.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "float", "generalized_attention.GeneralizedAttention.view", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "generalized_attention.GeneralizedAttention.query_conv", "generalized_attention.GeneralizedAttention.key_conv", "generalized_attention.GeneralizedAttention.appr_geom_fc_x().view().permute", "generalized_attention.GeneralizedAttention.appr_geom_fc_y().view().permute", "generalized_attention.GeneralizedAttention.appr_bias.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "generalized_attention.GeneralizedAttention.appr_bias.view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "generalized_attention.GeneralizedAttention.geom_bias.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "energy_x.view.view.permute().unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "energy_y.view.view.unsqueeze", "generalized_attention.GeneralizedAttention.local_constraint_map[].contiguous", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "proj_query_reshape.permute.permute.permute", "generalized_attention.GeneralizedAttention.permute", "generalized_attention.GeneralizedAttention.permute", "proj_query.permute.permute.view", "proj_query_reshape.permute.permute.permute", "generalized_attention.GeneralizedAttention.permute", "generalized_attention.GeneralizedAttention.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "energy_x.view.view.permute().unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "energy_y.view.view.unsqueeze", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "generalized_attention.GeneralizedAttention.appr_geom_fc_x().view", "generalized_attention.GeneralizedAttention.appr_geom_fc_y().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "generalized_attention.GeneralizedAttention.appr_bias.view().repeat", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "energy_x.view.view.permute", "generalized_attention.GeneralizedAttention.geom_bias.view().repeat", "generalized_attention.GeneralizedAttention.view", "generalized_attention.GeneralizedAttention.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "energy_x.view.view.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "energy_y.view.view.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "energy_x.view.view.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "generalized_attention.GeneralizedAttention.appr_geom_fc_x", "generalized_attention.GeneralizedAttention.appr_geom_fc_y", "generalized_attention.GeneralizedAttention.appr_bias.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "generalized_attention.GeneralizedAttention.geom_bias.view"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.plugins.generalized_attention.GeneralizedAttention.get_position_embedding"], ["", "def", "forward", "(", "self", ",", "x_input", ")", ":", "\n", "        ", "num_heads", "=", "self", ".", "num_heads", "\n", "\n", "# use empirical_attention", "\n", "if", "self", ".", "q_downsample", "is", "not", "None", ":", "\n", "            ", "x_q", "=", "self", ".", "q_downsample", "(", "x_input", ")", "\n", "", "else", ":", "\n", "            ", "x_q", "=", "x_input", "\n", "", "n", ",", "_", ",", "h", ",", "w", "=", "x_q", ".", "shape", "\n", "\n", "if", "self", ".", "kv_downsample", "is", "not", "None", ":", "\n", "            ", "x_kv", "=", "self", ".", "kv_downsample", "(", "x_input", ")", "\n", "", "else", ":", "\n", "            ", "x_kv", "=", "x_input", "\n", "", "_", ",", "_", ",", "h_kv", ",", "w_kv", "=", "x_kv", ".", "shape", "\n", "\n", "if", "self", ".", "attention_type", "[", "0", "]", "or", "self", ".", "attention_type", "[", "1", "]", ":", "\n", "            ", "proj_query", "=", "self", ".", "query_conv", "(", "x_q", ")", ".", "view", "(", "\n", "(", "n", ",", "num_heads", ",", "self", ".", "qk_embed_dim", ",", "h", "*", "w", ")", ")", "\n", "proj_query", "=", "proj_query", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "\n", "", "if", "self", ".", "attention_type", "[", "0", "]", "or", "self", ".", "attention_type", "[", "2", "]", ":", "\n", "            ", "proj_key", "=", "self", ".", "key_conv", "(", "x_kv", ")", ".", "view", "(", "\n", "(", "n", ",", "num_heads", ",", "self", ".", "qk_embed_dim", ",", "h_kv", "*", "w_kv", ")", ")", "\n", "\n", "", "if", "self", ".", "attention_type", "[", "1", "]", "or", "self", ".", "attention_type", "[", "3", "]", ":", "\n", "            ", "position_embed_x", ",", "position_embed_y", "=", "self", ".", "get_position_embedding", "(", "\n", "h", ",", "w", ",", "h_kv", ",", "w_kv", ",", "self", ".", "q_stride", ",", "self", ".", "kv_stride", ",", "\n", "x_input", ".", "device", ",", "self", ".", "position_embedding_dim", ")", "\n", "# (n, num_heads, w, w_kv, dim)", "\n", "position_feat_x", "=", "self", ".", "appr_geom_fc_x", "(", "position_embed_x", ")", ".", "view", "(", "1", ",", "w", ",", "w_kv", ",", "num_heads", ",", "self", ".", "qk_embed_dim", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ",", "4", ")", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "# (n, num_heads, h, h_kv, dim)", "\n", "position_feat_y", "=", "self", ".", "appr_geom_fc_y", "(", "position_embed_y", ")", ".", "view", "(", "1", ",", "h", ",", "h_kv", ",", "num_heads", ",", "self", ".", "qk_embed_dim", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ",", "4", ")", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "position_feat_x", "/=", "math", ".", "sqrt", "(", "2", ")", "\n", "position_feat_y", "/=", "math", ".", "sqrt", "(", "2", ")", "\n", "\n", "# accelerate for saliency only", "\n", "", "if", "(", "np", ".", "sum", "(", "self", ".", "attention_type", ")", "==", "1", ")", "and", "self", ".", "attention_type", "[", "2", "]", ":", "\n", "            ", "appr_bias", "=", "self", ".", "appr_bias", ".", "view", "(", "1", ",", "num_heads", ",", "1", ",", "self", ".", "qk_embed_dim", ")", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "energy", "=", "torch", ".", "matmul", "(", "appr_bias", ",", "proj_key", ")", ".", "view", "(", "n", ",", "num_heads", ",", "1", ",", "h_kv", "*", "w_kv", ")", "\n", "\n", "h", "=", "1", "\n", "w", "=", "1", "\n", "", "else", ":", "\n", "# (n, num_heads, h*w, h_kv*w_kv), query before key, 540mb for", "\n", "            ", "if", "not", "self", ".", "attention_type", "[", "0", "]", ":", "\n", "                ", "energy", "=", "torch", ".", "zeros", "(", "\n", "n", ",", "\n", "num_heads", ",", "\n", "h", ",", "\n", "w", ",", "\n", "h_kv", ",", "\n", "w_kv", ",", "\n", "dtype", "=", "x_input", ".", "dtype", ",", "\n", "device", "=", "x_input", ".", "device", ")", "\n", "\n", "# attention_type[0]: appr - appr", "\n", "# attention_type[1]: appr - position", "\n", "# attention_type[2]: bias - appr", "\n", "# attention_type[3]: bias - position", "\n", "", "if", "self", ".", "attention_type", "[", "0", "]", "or", "self", ".", "attention_type", "[", "2", "]", ":", "\n", "                ", "if", "self", ".", "attention_type", "[", "0", "]", "and", "self", ".", "attention_type", "[", "2", "]", ":", "\n", "                    ", "appr_bias", "=", "self", ".", "appr_bias", ".", "view", "(", "1", ",", "num_heads", ",", "1", ",", "self", ".", "qk_embed_dim", ")", "\n", "energy", "=", "torch", ".", "matmul", "(", "proj_query", "+", "appr_bias", ",", "proj_key", ")", ".", "view", "(", "n", ",", "num_heads", ",", "h", ",", "w", ",", "h_kv", ",", "w_kv", ")", "\n", "\n", "", "elif", "self", ".", "attention_type", "[", "0", "]", ":", "\n", "                    ", "energy", "=", "torch", ".", "matmul", "(", "proj_query", ",", "proj_key", ")", ".", "view", "(", "n", ",", "num_heads", ",", "h", ",", "w", ",", "h_kv", ",", "w_kv", ")", "\n", "\n", "", "elif", "self", ".", "attention_type", "[", "2", "]", ":", "\n", "                    ", "appr_bias", "=", "self", ".", "appr_bias", ".", "view", "(", "1", ",", "num_heads", ",", "1", ",", "self", ".", "qk_embed_dim", ")", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "energy", "+=", "torch", ".", "matmul", "(", "appr_bias", ",", "proj_key", ")", ".", "view", "(", "n", ",", "num_heads", ",", "1", ",", "1", ",", "h_kv", ",", "w_kv", ")", "\n", "\n", "", "", "if", "self", ".", "attention_type", "[", "1", "]", "or", "self", ".", "attention_type", "[", "3", "]", ":", "\n", "                ", "if", "self", ".", "attention_type", "[", "1", "]", "and", "self", ".", "attention_type", "[", "3", "]", ":", "\n", "                    ", "geom_bias", "=", "self", ".", "geom_bias", ".", "view", "(", "1", ",", "num_heads", ",", "1", ",", "self", ".", "qk_embed_dim", ")", "\n", "\n", "proj_query_reshape", "=", "(", "proj_query", "+", "geom_bias", ")", ".", "view", "(", "n", ",", "num_heads", ",", "h", ",", "w", ",", "self", ".", "qk_embed_dim", ")", "\n", "\n", "energy_x", "=", "torch", ".", "matmul", "(", "\n", "proj_query_reshape", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ")", ",", "\n", "position_feat_x", ".", "permute", "(", "0", ",", "1", ",", "2", ",", "4", ",", "3", ")", ")", "\n", "energy_x", "=", "energy_x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ")", ".", "unsqueeze", "(", "4", ")", "\n", "\n", "energy_y", "=", "torch", ".", "matmul", "(", "\n", "proj_query_reshape", ",", "\n", "position_feat_y", ".", "permute", "(", "0", ",", "1", ",", "2", ",", "4", ",", "3", ")", ")", "\n", "energy_y", "=", "energy_y", ".", "unsqueeze", "(", "5", ")", "\n", "\n", "energy", "+=", "energy_x", "+", "energy_y", "\n", "\n", "", "elif", "self", ".", "attention_type", "[", "1", "]", ":", "\n", "                    ", "proj_query_reshape", "=", "proj_query", ".", "view", "(", "n", ",", "num_heads", ",", "h", ",", "w", ",", "self", ".", "qk_embed_dim", ")", "\n", "proj_query_reshape", "=", "proj_query_reshape", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ")", "\n", "position_feat_x_reshape", "=", "position_feat_x", ".", "permute", "(", "0", ",", "1", ",", "2", ",", "4", ",", "3", ")", "\n", "position_feat_y_reshape", "=", "position_feat_y", ".", "permute", "(", "0", ",", "1", ",", "2", ",", "4", ",", "3", ")", "\n", "\n", "energy_x", "=", "torch", ".", "matmul", "(", "proj_query_reshape", ",", "\n", "position_feat_x_reshape", ")", "\n", "energy_x", "=", "energy_x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ")", ".", "unsqueeze", "(", "4", ")", "\n", "\n", "energy_y", "=", "torch", ".", "matmul", "(", "proj_query_reshape", ",", "\n", "position_feat_y_reshape", ")", "\n", "energy_y", "=", "energy_y", ".", "unsqueeze", "(", "5", ")", "\n", "\n", "energy", "+=", "energy_x", "+", "energy_y", "\n", "\n", "", "elif", "self", ".", "attention_type", "[", "3", "]", ":", "\n", "                    ", "geom_bias", "=", "self", ".", "geom_bias", ".", "view", "(", "1", ",", "num_heads", ",", "self", ".", "qk_embed_dim", ",", "1", ")", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "position_feat_x_reshape", "=", "position_feat_x", ".", "view", "(", "n", ",", "num_heads", ",", "w", "*", "w_kv", ",", "self", ".", "qk_embed_dim", ")", "\n", "\n", "position_feat_y_reshape", "=", "position_feat_y", ".", "view", "(", "n", ",", "num_heads", ",", "h", "*", "h_kv", ",", "self", ".", "qk_embed_dim", ")", "\n", "\n", "energy_x", "=", "torch", ".", "matmul", "(", "position_feat_x_reshape", ",", "geom_bias", ")", "\n", "energy_x", "=", "energy_x", ".", "view", "(", "n", ",", "num_heads", ",", "1", ",", "w", ",", "1", ",", "w_kv", ")", "\n", "\n", "energy_y", "=", "torch", ".", "matmul", "(", "position_feat_y_reshape", ",", "geom_bias", ")", "\n", "energy_y", "=", "energy_y", ".", "view", "(", "n", ",", "num_heads", ",", "h", ",", "1", ",", "h_kv", ",", "1", ")", "\n", "\n", "energy", "+=", "energy_x", "+", "energy_y", "\n", "\n", "", "", "energy", "=", "energy", ".", "view", "(", "n", ",", "num_heads", ",", "h", "*", "w", ",", "h_kv", "*", "w_kv", ")", "\n", "\n", "", "if", "self", ".", "spatial_range", ">=", "0", ":", "\n", "            ", "cur_local_constraint_map", "=", "self", ".", "local_constraint_map", "[", ":", "h", ",", ":", "w", ",", ":", "h_kv", ",", ":", "w_kv", "]", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "1", ",", "h", "*", "w", ",", "h_kv", "*", "w_kv", ")", "\n", "\n", "energy", "=", "energy", ".", "masked_fill_", "(", "cur_local_constraint_map", ",", "\n", "float", "(", "'-inf'", ")", ")", "\n", "\n", "", "attention", "=", "F", ".", "softmax", "(", "energy", ",", "3", ")", "\n", "\n", "proj_value", "=", "self", ".", "value_conv", "(", "x_kv", ")", "\n", "proj_value_reshape", "=", "proj_value", ".", "view", "(", "(", "n", ",", "num_heads", ",", "self", ".", "v_dim", ",", "h_kv", "*", "w_kv", ")", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "\n", "out", "=", "torch", ".", "matmul", "(", "attention", ",", "proj_value_reshape", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "n", ",", "self", ".", "v_dim", "*", "self", ".", "num_heads", ",", "h", ",", "w", ")", "\n", "\n", "out", "=", "self", ".", "proj_conv", "(", "out", ")", "\n", "out", "=", "self", ".", "gamma", "*", "out", "+", "x_input", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.plugins.generalized_attention.GeneralizedAttention.init_weights": [[375, 385], ["generalized_attention.GeneralizedAttention.modules", "hasattr", "mmcv.cnn.kaiming_init"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.kaiming_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'kaiming_init'", ")", "and", "m", ".", "kaiming_init", ":", "\n", "                ", "kaiming_init", "(", "\n", "m", ",", "\n", "mode", "=", "'fan_in'", ",", "\n", "nonlinearity", "=", "'leaky_relu'", ",", "\n", "bias", "=", "0", ",", "\n", "distribution", "=", "'uniform'", ",", "\n", "a", "=", "1", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.convfc_bbox_head.ConvFCBBoxHead.__init__": [[18, 82], ["bbox_head.BBoxHead.__init__", "convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch", "convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch", "convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch"], ["def", "__init__", "(", "self", ",", "\n", "num_shared_convs", "=", "0", ",", "\n", "num_shared_fcs", "=", "0", ",", "\n", "num_cls_convs", "=", "0", ",", "\n", "num_cls_fcs", "=", "0", ",", "\n", "num_reg_convs", "=", "0", ",", "\n", "num_reg_fcs", "=", "0", ",", "\n", "conv_out_channels", "=", "256", ",", "\n", "fc_out_channels", "=", "1024", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ConvFCBBoxHead", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "assert", "(", "num_shared_convs", "+", "num_shared_fcs", "+", "num_cls_convs", "+", "\n", "num_cls_fcs", "+", "num_reg_convs", "+", "num_reg_fcs", ">", "0", ")", "\n", "if", "num_cls_convs", ">", "0", "or", "num_reg_convs", ">", "0", ":", "\n", "            ", "assert", "num_shared_fcs", "==", "0", "\n", "", "if", "not", "self", ".", "with_cls", ":", "\n", "            ", "assert", "num_cls_convs", "==", "0", "and", "num_cls_fcs", "==", "0", "\n", "", "if", "not", "self", ".", "with_reg", ":", "\n", "            ", "assert", "num_reg_convs", "==", "0", "and", "num_reg_fcs", "==", "0", "\n", "", "self", ".", "num_shared_convs", "=", "num_shared_convs", "\n", "self", ".", "num_shared_fcs", "=", "num_shared_fcs", "\n", "self", ".", "num_cls_convs", "=", "num_cls_convs", "\n", "self", ".", "num_cls_fcs", "=", "num_cls_fcs", "\n", "self", ".", "num_reg_convs", "=", "num_reg_convs", "\n", "self", ".", "num_reg_fcs", "=", "num_reg_fcs", "\n", "self", ".", "conv_out_channels", "=", "conv_out_channels", "\n", "self", ".", "fc_out_channels", "=", "fc_out_channels", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "\n", "# add shared convs and fcs", "\n", "self", ".", "shared_convs", ",", "self", ".", "shared_fcs", ",", "last_layer_dim", "=", "self", ".", "_add_conv_fc_branch", "(", "\n", "self", ".", "num_shared_convs", ",", "self", ".", "num_shared_fcs", ",", "self", ".", "in_channels", ",", "\n", "True", ")", "\n", "self", ".", "shared_out_channels", "=", "last_layer_dim", "\n", "\n", "# add cls specific branch", "\n", "self", ".", "cls_convs", ",", "self", ".", "cls_fcs", ",", "self", ".", "cls_last_dim", "=", "self", ".", "_add_conv_fc_branch", "(", "\n", "self", ".", "num_cls_convs", ",", "self", ".", "num_cls_fcs", ",", "self", ".", "shared_out_channels", ")", "\n", "\n", "# add reg specific branch", "\n", "self", ".", "reg_convs", ",", "self", ".", "reg_fcs", ",", "self", ".", "reg_last_dim", "=", "self", ".", "_add_conv_fc_branch", "(", "\n", "self", ".", "num_reg_convs", ",", "self", ".", "num_reg_fcs", ",", "self", ".", "shared_out_channels", ")", "\n", "\n", "if", "self", ".", "num_shared_fcs", "==", "0", "and", "not", "self", ".", "with_avg_pool", ":", "\n", "            ", "if", "self", ".", "num_cls_fcs", "==", "0", ":", "\n", "                ", "self", ".", "cls_last_dim", "*=", "self", ".", "roi_feat_area", "\n", "", "if", "self", ".", "num_reg_fcs", "==", "0", ":", "\n", "                ", "self", ".", "reg_last_dim", "*=", "self", ".", "roi_feat_area", "\n", "\n", "", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# reconstruct fc_cls and fc_reg since input channels are changed", "\n", "if", "self", ".", "with_cls", ":", "\n", "            ", "self", ".", "fc_cls", "=", "nn", ".", "Linear", "(", "self", ".", "cls_last_dim", ",", "self", ".", "num_classes", ")", "\n", "", "if", "self", ".", "with_reg", ":", "\n", "            ", "out_dim_reg", "=", "(", "4", "if", "self", ".", "reg_class_agnostic", "else", "4", "*", "\n", "self", ".", "num_classes", ")", "\n", "self", ".", "fc_reg", "=", "nn", ".", "Linear", "(", "self", ".", "reg_last_dim", ",", "out_dim_reg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch": [[83, 123], ["torch.ModuleList", "torch.ModuleList", "range", "range", "torch.ModuleList.append", "torch.ModuleList.append", "utils.ConvModule", "torch.Linear"], "methods", ["None"], ["", "", "def", "_add_conv_fc_branch", "(", "self", ",", "\n", "num_branch_convs", ",", "\n", "num_branch_fcs", ",", "\n", "in_channels", ",", "\n", "is_shared", "=", "False", ")", ":", "\n", "        ", "\"\"\"Add shared or separable branch\n\n        convs -> avg pool (optional) -> fcs\n        \"\"\"", "\n", "last_layer_dim", "=", "in_channels", "\n", "# add branch specific conv layers", "\n", "branch_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "num_branch_convs", ">", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_branch_convs", ")", ":", "\n", "                ", "conv_in_channels", "=", "(", "\n", "last_layer_dim", "if", "i", "==", "0", "else", "self", ".", "conv_out_channels", ")", "\n", "branch_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "conv_in_channels", ",", "\n", "self", ".", "conv_out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "", "last_layer_dim", "=", "self", ".", "conv_out_channels", "\n", "# add branch specific fc layers", "\n", "", "branch_fcs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "num_branch_fcs", ">", "0", ":", "\n", "# for shared branch, only consider self.with_avg_pool", "\n", "# for separated branches, also consider self.num_shared_fcs", "\n", "            ", "if", "(", "is_shared", "\n", "or", "self", ".", "num_shared_fcs", "==", "0", ")", "and", "not", "self", ".", "with_avg_pool", ":", "\n", "                ", "last_layer_dim", "*=", "self", ".", "roi_feat_area", "\n", "", "for", "i", "in", "range", "(", "num_branch_fcs", ")", ":", "\n", "                ", "fc_in_channels", "=", "(", "\n", "last_layer_dim", "if", "i", "==", "0", "else", "self", ".", "fc_out_channels", ")", "\n", "branch_fcs", ".", "append", "(", "\n", "nn", ".", "Linear", "(", "fc_in_channels", ",", "self", ".", "fc_out_channels", ")", ")", "\n", "", "last_layer_dim", "=", "self", ".", "fc_out_channels", "\n", "", "return", "branch_convs", ",", "branch_fcs", ",", "last_layer_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.convfc_bbox_head.ConvFCBBoxHead.init_weights": [[124, 131], ["super().init_weights", "module_list.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "super", "(", "ConvFCBBoxHead", ",", "self", ")", ".", "init_weights", "(", ")", "\n", "for", "module_list", "in", "[", "self", ".", "shared_fcs", ",", "self", ".", "cls_fcs", ",", "self", ".", "reg_fcs", "]", ":", "\n", "            ", "for", "m", "in", "module_list", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.convfc_bbox_head.ConvFCBBoxHead.forward": [[132, 169], ["convfc_bbox_head.ConvFCBBoxHead.view", "conv", "convfc_bbox_head.ConvFCBBoxHead.dim", "convfc_bbox_head.ConvFCBBoxHead.view", "convfc_bbox_head.ConvFCBBoxHead.relu", "conv", "convfc_bbox_head.ConvFCBBoxHead.dim", "convfc_bbox_head.ConvFCBBoxHead.view", "convfc_bbox_head.ConvFCBBoxHead.relu", "convfc_bbox_head.ConvFCBBoxHead.fc_cls", "convfc_bbox_head.ConvFCBBoxHead.fc_reg", "conv", "convfc_bbox_head.ConvFCBBoxHead.avg_pool", "convfc_bbox_head.ConvFCBBoxHead.size", "convfc_bbox_head.ConvFCBBoxHead.relu", "convfc_bbox_head.ConvFCBBoxHead.avg_pool", "convfc_bbox_head.ConvFCBBoxHead.size", "fc", "convfc_bbox_head.ConvFCBBoxHead.avg_pool", "convfc_bbox_head.ConvFCBBoxHead.size", "fc", "fc"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# shared part", "\n", "        ", "if", "self", ".", "num_shared_convs", ">", "0", ":", "\n", "            ", "for", "conv", "in", "self", ".", "shared_convs", ":", "\n", "                ", "x", "=", "conv", "(", "x", ")", "\n", "\n", "", "", "if", "self", ".", "num_shared_fcs", ">", "0", ":", "\n", "            ", "if", "self", ".", "with_avg_pool", ":", "\n", "                ", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "for", "fc", "in", "self", ".", "shared_fcs", ":", "\n", "                ", "x", "=", "self", ".", "relu", "(", "fc", "(", "x", ")", ")", "\n", "# separate branches", "\n", "", "", "x_cls", "=", "x", "\n", "x_reg", "=", "x", "\n", "\n", "for", "conv", "in", "self", ".", "cls_convs", ":", "\n", "            ", "x_cls", "=", "conv", "(", "x_cls", ")", "\n", "", "if", "x_cls", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "if", "self", ".", "with_avg_pool", ":", "\n", "                ", "x_cls", "=", "self", ".", "avg_pool", "(", "x_cls", ")", "\n", "", "x_cls", "=", "x_cls", ".", "view", "(", "x_cls", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "for", "fc", "in", "self", ".", "cls_fcs", ":", "\n", "            ", "x_cls", "=", "self", ".", "relu", "(", "fc", "(", "x_cls", ")", ")", "\n", "\n", "", "for", "conv", "in", "self", ".", "reg_convs", ":", "\n", "            ", "x_reg", "=", "conv", "(", "x_reg", ")", "\n", "", "if", "x_reg", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "if", "self", ".", "with_avg_pool", ":", "\n", "                ", "x_reg", "=", "self", ".", "avg_pool", "(", "x_reg", ")", "\n", "", "x_reg", "=", "x_reg", ".", "view", "(", "x_reg", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "for", "fc", "in", "self", ".", "reg_fcs", ":", "\n", "            ", "x_reg", "=", "self", ".", "relu", "(", "fc", "(", "x_reg", ")", ")", "\n", "\n", "", "cls_score", "=", "self", ".", "fc_cls", "(", "x_cls", ")", "if", "self", ".", "with_cls", "else", "None", "\n", "bbox_pred", "=", "self", ".", "fc_reg", "(", "x_reg", ")", "if", "self", ".", "with_reg", "else", "None", "\n", "return", "cls_score", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.convfc_bbox_head.SharedFCBBoxHead.__init__": [[174, 186], ["convfc_bbox_head.ConvFCBBoxHead.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_fcs", "=", "2", ",", "fc_out_channels", "=", "1024", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "num_fcs", ">=", "1", "\n", "super", "(", "SharedFCBBoxHead", ",", "self", ")", ".", "__init__", "(", "\n", "num_shared_convs", "=", "0", ",", "\n", "num_shared_fcs", "=", "num_fcs", ",", "\n", "num_cls_convs", "=", "0", ",", "\n", "num_cls_fcs", "=", "0", ",", "\n", "num_reg_convs", "=", "0", ",", "\n", "num_reg_fcs", "=", "0", ",", "\n", "fc_out_channels", "=", "fc_out_channels", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.__init__": [[34, 78], ["dict", "dict", "torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "builder.build_loss", "builder.build_loss", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_loss", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_loss"], ["def", "__init__", "(", "self", ",", "\n", "with_avg_pool", "=", "False", ",", "\n", "with_cls", "=", "True", ",", "\n", "with_reg", "=", "True", ",", "\n", "roi_feat_size", "=", "7", ",", "\n", "in_channels", "=", "256", ",", "\n", "num_classes", "=", "81", ",", "\n", "target_means", "=", "[", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "target_stds", "=", "[", "0.1", ",", "0.1", ",", "0.2", ",", "0.2", "]", ",", "\n", "reg_class_agnostic", "=", "False", ",", "\n", "loss_cls", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "\n", "use_sigmoid", "=", "False", ",", "\n", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_bbox", "=", "dict", "(", "\n", "type", "=", "'SmoothL1Loss'", ",", "beta", "=", "1.0", ",", "loss_weight", "=", "1.0", ")", ")", ":", "\n", "        ", "super", "(", "BBoxHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "with_cls", "or", "with_reg", "\n", "self", ".", "with_avg_pool", "=", "with_avg_pool", "\n", "self", ".", "with_cls", "=", "with_cls", "\n", "self", ".", "with_reg", "=", "with_reg", "\n", "self", ".", "roi_feat_size", "=", "_pair", "(", "roi_feat_size", ")", "\n", "self", ".", "roi_feat_area", "=", "self", ".", "roi_feat_size", "[", "0", "]", "*", "self", ".", "roi_feat_size", "[", "1", "]", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "target_means", "=", "target_means", "\n", "self", ".", "target_stds", "=", "target_stds", "\n", "self", ".", "reg_class_agnostic", "=", "reg_class_agnostic", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n", "self", ".", "loss_cls", "=", "build_loss", "(", "loss_cls", ")", "\n", "self", ".", "loss_bbox", "=", "build_loss", "(", "loss_bbox", ")", "\n", "\n", "in_channels", "=", "self", ".", "in_channels", "\n", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "self", ".", "roi_feat_size", ")", "\n", "", "else", ":", "\n", "            ", "in_channels", "*=", "self", ".", "roi_feat_area", "\n", "", "if", "self", ".", "with_cls", ":", "\n", "            ", "self", ".", "fc_cls", "=", "nn", ".", "Linear", "(", "in_channels", ",", "num_classes", ")", "\n", "", "if", "self", ".", "with_reg", ":", "\n", "            ", "out_dim_reg", "=", "4", "if", "reg_class_agnostic", "else", "4", "*", "num_classes", "\n", "self", ".", "fc_reg", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_dim_reg", ")", "\n", "", "self", ".", "debug_imgs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.init_weights": [[79, 86], ["torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "with_cls", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "fc_cls", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc_cls", ".", "bias", ",", "0", ")", "\n", "", "if", "self", ".", "with_reg", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "fc_reg", ".", "weight", ",", "0", ",", "0.001", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc_reg", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.forward": [[87, 95], ["mmdet.core.auto_fp16", "bbox_head.BBoxHead.view", "bbox_head.BBoxHead.avg_pool", "bbox_head.BBoxHead.size", "bbox_head.BBoxHead.fc_cls", "bbox_head.BBoxHead.fc_reg"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.auto_fp16"], ["", "", "@", "auto_fp16", "(", ")", "\n", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "cls_score", "=", "self", ".", "fc_cls", "(", "x", ")", "if", "self", ".", "with_cls", "else", "None", "\n", "bbox_pred", "=", "self", ".", "fc_reg", "(", "x", ")", "if", "self", ".", "with_reg", "else", "None", "\n", "return", "cls_score", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_target": [[96, 115], ["mmdet.core.bbox_target"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.bbox_target.bbox_target"], ["", "def", "get_target", "(", "self", ",", "sampling_results", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "rcnn_train_cfg", ")", ":", "\n", "        ", "pos_proposals", "=", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", "\n", "neg_proposals", "=", "[", "res", ".", "neg_bboxes", "for", "res", "in", "sampling_results", "]", "\n", "pos_gt_bboxes", "=", "[", "res", ".", "pos_gt_bboxes", "for", "res", "in", "sampling_results", "]", "\n", "pos_gt_labels", "=", "[", "res", ".", "pos_gt_labels", "for", "res", "in", "sampling_results", "]", "\n", "pos_gt_inds", "=", "[", "res", ".", "pos_assigned_gt_inds", "for", "res", "in", "sampling_results", "]", "\n", "reg_classes", "=", "1", "if", "self", ".", "reg_class_agnostic", "else", "self", ".", "num_classes", "\n", "cls_reg_targets", "=", "bbox_target", "(", "\n", "pos_proposals", ",", "\n", "neg_proposals", ",", "\n", "pos_gt_bboxes", ",", "\n", "pos_gt_labels", ",", "\n", "pos_gt_inds", ",", "\n", "rcnn_train_cfg", ",", "\n", "reg_classes", ",", "\n", "target_means", "=", "self", ".", "target_means", ",", "\n", "target_stds", "=", "self", ".", "target_stds", ")", "\n", "return", "cls_reg_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss": [[116, 149], ["mmdet.core.force_fp32", "dict", "max", "bbox_head.BBoxHead.loss_cls", "dict.accuracy", "bbox_head.BBoxHead.loss_bbox", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float().item", "bbox_pred.view", "bbox_pred.view", "bbox_targets.size", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "bbox_pred.size", "bbox_pred.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.twangnh_SimCal.losses.accuracy.accuracy"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'cls_score'", ",", "'bbox_pred'", ")", ")", "\n", "def", "loss", "(", "self", ",", "\n", "cls_score", ",", "\n", "bbox_pred", ",", "\n", "labels", ",", "\n", "label_weights", ",", "\n", "bbox_targets", ",", "\n", "bbox_weights", ",", "\n", "reduction_override", "=", "None", ")", ":", "\n", "        ", "losses", "=", "dict", "(", ")", "\n", "if", "cls_score", "is", "not", "None", ":", "\n", "            ", "avg_factor", "=", "max", "(", "torch", ".", "sum", "(", "label_weights", ">", "0", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "1.", ")", "\n", "losses", "[", "'loss_cls'", "]", "=", "self", ".", "loss_cls", "(", "\n", "cls_score", ",", "\n", "labels", ",", "\n", "label_weights", ",", "\n", "avg_factor", "=", "avg_factor", ",", "\n", "reduction_override", "=", "reduction_override", ")", "\n", "losses", "[", "'acc'", "]", "=", "accuracy", "(", "cls_score", ",", "labels", ")", "\n", "", "if", "bbox_pred", "is", "not", "None", ":", "\n", "            ", "pos_inds", "=", "labels", ">", "0", "\n", "if", "self", ".", "reg_class_agnostic", ":", "\n", "                ", "pos_bbox_pred", "=", "bbox_pred", ".", "view", "(", "bbox_pred", ".", "size", "(", "0", ")", ",", "4", ")", "[", "pos_inds", "]", "\n", "", "else", ":", "\n", "                ", "pos_bbox_pred", "=", "bbox_pred", ".", "view", "(", "bbox_pred", ".", "size", "(", "0", ")", ",", "-", "1", ",", "\n", "4", ")", "[", "pos_inds", ",", "labels", "[", "pos_inds", "]", "]", "\n", "", "losses", "[", "'loss_bbox'", "]", "=", "self", ".", "loss_bbox", "(", "\n", "pos_bbox_pred", ",", "\n", "bbox_targets", "[", "pos_inds", "]", ",", "\n", "bbox_weights", "[", "pos_inds", "]", ",", "\n", "avg_factor", "=", "bbox_targets", ".", "size", "(", "0", ")", ",", "\n", "reduction_override", "=", "reduction_override", ")", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.get_det_bboxes": [[150, 212], ["mmdet.core.force_fp32", "isinstance", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "mmdet.core.delta2bbox", "rois[].clone", "isinstance", "mmdet.core.multiclass_nms", "sum", "float", "scores.size", "bboxes[].clamp_", "bboxes[].clamp_", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "len", "enumerate", "scores.size", "train_on_val_cls_label_to_info.items", "enumerate", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "train_cls_label_to_info_coco.items"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.delta2bbox", "home.repos.pwc.inspect_result.twangnh_SimCal.post_processing.bbox_nms.multiclass_nms"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'cls_score'", ",", "'bbox_pred'", ")", ")", "\n", "def", "get_det_bboxes", "(", "self", ",", "\n", "rois", ",", "\n", "cls_score", ",", "\n", "cal_cls_score", ",", "\n", "bbox_pred", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "rescale", "=", "False", ",", "\n", "cfg", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "cls_score", ",", "list", ")", ":", "\n", "            ", "cls_score", "=", "sum", "(", "cls_score", ")", "/", "float", "(", "len", "(", "cls_score", ")", ")", "\n", "\n", "", "scores", "=", "F", ".", "softmax", "(", "cls_score", ",", "dim", "=", "1", ")", "if", "cls_score", "is", "not", "None", "else", "None", "\n", "cal_cls_score", "=", "F", ".", "softmax", "(", "cal_cls_score", ",", "dim", "=", "1", ")", "if", "cal_cls_score", "is", "not", "None", "else", "None", "\n", "\n", "\n", "if", "scores", ".", "size", "(", ")", "[", "1", "]", "==", "1231", ":", "\n", "# print('use lvis')", "\n", "\n", "##for ablation of cat position", "\n", "            ", "threshold", "=", "100", "\n", "# print('cat threshold {}'.format(threshold))", "\n", "lessthan_threshold_clsid", "=", "[", "k", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "train_on_val_cls_label_to_info", ".", "items", "(", ")", ")", "if", "v", "<", "threshold", "]", "\n", "scores", "[", ":", ",", "lessthan_threshold_clsid", "]", "=", "cal_cls_score", "[", ":", ",", "lessthan_threshold_clsid", "]", "\n", "\n", "# scores = (scores + cal_cls_score) / 2.", "\n", "# scores = cal_cls_score", "\n", "\n", "", "elif", "scores", ".", "size", "(", ")", "[", "1", "]", "==", "81", ":", "\n", "# print('use coco')", "\n", "            ", "threshold", "=", "400", "\n", "# print('cat threshold {}'.format(threshold))", "\n", "# scores = cal_cls_score", "\n", "lessthan_threshold_clsid", "=", "[", "k", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "train_cls_label_to_info_coco", ".", "items", "(", ")", ")", "if", "v", "<", "threshold", "]", "\n", "scores", "[", ":", ",", "lessthan_threshold_clsid", "]", "=", "cal_cls_score", "[", ":", ",", "lessthan_threshold_clsid", "]", "\n", "\n", "\n", "\n", "", "if", "bbox_pred", "is", "not", "None", ":", "\n", "            ", "bboxes", "=", "delta2bbox", "(", "rois", "[", ":", ",", "1", ":", "]", ",", "bbox_pred", ",", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "img_shape", ")", "\n", "", "else", ":", "\n", "            ", "bboxes", "=", "rois", "[", ":", ",", "1", ":", "]", ".", "clone", "(", ")", "\n", "if", "img_shape", "is", "not", "None", ":", "\n", "                ", "bboxes", "[", ":", ",", "[", "0", ",", "2", "]", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "img_shape", "[", "1", "]", "-", "1", ")", "\n", "bboxes", "[", ":", ",", "[", "1", ",", "3", "]", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "img_shape", "[", "0", "]", "-", "1", ")", "\n", "\n", "", "", "if", "rescale", ":", "\n", "            ", "if", "isinstance", "(", "scale_factor", ",", "float", ")", ":", "\n", "                ", "bboxes", "/=", "scale_factor", "\n", "", "else", ":", "\n", "                ", "bboxes", "/=", "torch", ".", "from_numpy", "(", "scale_factor", ")", ".", "to", "(", "bboxes", ".", "device", ")", "\n", "\n", "", "", "if", "cfg", "is", "None", ":", "\n", "            ", "return", "bboxes", ",", "scores", "\n", "", "else", ":", "\n", "            ", "det_bboxes", ",", "det_labels", "=", "multiclass_nms", "(", "bboxes", ",", "scores", ",", "\n", "cfg", ".", "score_thr", ",", "cfg", ".", "nms", ",", "\n", "cfg", ".", "max_per_img", ")", "\n", "\n", "return", "det_bboxes", ",", "det_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.refine_bboxes": [[213, 253], ["mmdet.core.force_fp32", "rois[].long().unique", "range", "rois[].long().unique.numel", "len", "len", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze.numel", "torch.nonzero().squeeze.numel", "torch.nonzero().squeeze.numel", "bbox_head.BBoxHead.regress_by_class", "pos_is_gts_.new_ones", "bboxes_list.append", "rois[].long", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "len"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.regress_by_class"], ["", "", "@", "force_fp32", "(", "apply_to", "=", "(", "'bbox_preds'", ",", ")", ")", "\n", "def", "refine_bboxes", "(", "self", ",", "rois", ",", "labels", ",", "bbox_preds", ",", "pos_is_gts", ",", "img_metas", ")", ":", "\n", "        ", "\"\"\"Refine bboxes during training.\n\n        Args:\n            rois (Tensor): Shape (n*bs, 5), where n is image number per GPU,\n                and bs is the sampled RoIs per image.\n            labels (Tensor): Shape (n*bs, ).\n            bbox_preds (Tensor): Shape (n*bs, 4) or (n*bs, 4*#class).\n            pos_is_gts (list[Tensor]): Flags indicating if each positive bbox\n                is a gt bbox.\n            img_metas (list[dict]): Meta info of each image.\n\n        Returns:\n            list[Tensor]: Refined bboxes of each image in a mini-batch.\n        \"\"\"", "\n", "img_ids", "=", "rois", "[", ":", ",", "0", "]", ".", "long", "(", ")", ".", "unique", "(", "sorted", "=", "True", ")", "\n", "assert", "img_ids", ".", "numel", "(", ")", "==", "len", "(", "img_metas", ")", "\n", "\n", "bboxes_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "img_metas", ")", ")", ":", "\n", "            ", "inds", "=", "torch", ".", "nonzero", "(", "rois", "[", ":", ",", "0", "]", "==", "i", ")", ".", "squeeze", "(", ")", "\n", "num_rois", "=", "inds", ".", "numel", "(", ")", "\n", "\n", "bboxes_", "=", "rois", "[", "inds", ",", "1", ":", "]", "\n", "label_", "=", "labels", "[", "inds", "]", "\n", "bbox_pred_", "=", "bbox_preds", "[", "inds", "]", "\n", "img_meta_", "=", "img_metas", "[", "i", "]", "\n", "pos_is_gts_", "=", "pos_is_gts", "[", "i", "]", "\n", "\n", "bboxes", "=", "self", ".", "regress_by_class", "(", "bboxes_", ",", "label_", ",", "bbox_pred_", ",", "\n", "img_meta_", ")", "\n", "# filter gt bboxes", "\n", "pos_keep", "=", "1", "-", "pos_is_gts_", "\n", "keep_inds", "=", "pos_is_gts_", ".", "new_ones", "(", "num_rois", ")", "\n", "keep_inds", "[", ":", "len", "(", "pos_is_gts_", ")", "]", "=", "pos_keep", "\n", "\n", "bboxes_list", ".", "append", "(", "bboxes", "[", "keep_inds", "]", ")", "\n", "\n", "", "return", "bboxes_list", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.regress_by_class": [[254, 284], ["mmdet.core.force_fp32", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.size", "torch.gather.size", "torch.gather.size", "rois.size", "mmdet.core.delta2bbox", "mmdet.core.delta2bbox", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rois.size", "rois.size"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.delta2bbox", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.delta2bbox"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'bbox_pred'", ",", ")", ")", "\n", "def", "regress_by_class", "(", "self", ",", "rois", ",", "label", ",", "bbox_pred", ",", "img_meta", ")", ":", "\n", "        ", "\"\"\"Regress the bbox for the predicted class. Used in Cascade R-CNN.\n\n        Args:\n            rois (Tensor): shape (n, 4) or (n, 5)\n            label (Tensor): shape (n, )\n            bbox_pred (Tensor): shape (n, 4*(#class+1)) or (n, 4)\n            img_meta (dict): Image meta info.\n\n        Returns:\n            Tensor: Regressed bboxes, the same shape as input rois.\n        \"\"\"", "\n", "assert", "rois", ".", "size", "(", "1", ")", "==", "4", "or", "rois", ".", "size", "(", "1", ")", "==", "5", "\n", "\n", "if", "not", "self", ".", "reg_class_agnostic", ":", "\n", "            ", "label", "=", "label", "*", "4", "\n", "inds", "=", "torch", ".", "stack", "(", "(", "label", ",", "label", "+", "1", ",", "label", "+", "2", ",", "label", "+", "3", ")", ",", "1", ")", "\n", "bbox_pred", "=", "torch", ".", "gather", "(", "bbox_pred", ",", "1", ",", "inds", ")", "\n", "", "assert", "bbox_pred", ".", "size", "(", "1", ")", "==", "4", "\n", "\n", "if", "rois", ".", "size", "(", "1", ")", "==", "4", ":", "\n", "            ", "new_rois", "=", "delta2bbox", "(", "rois", ",", "bbox_pred", ",", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "img_meta", "[", "'img_shape'", "]", ")", "\n", "", "else", ":", "\n", "            ", "bboxes", "=", "delta2bbox", "(", "rois", "[", ":", ",", "1", ":", "]", ",", "bbox_pred", ",", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "img_meta", "[", "'img_shape'", "]", ")", "\n", "new_rois", "=", "torch", ".", "cat", "(", "(", "rois", "[", ":", ",", "[", "0", "]", "]", ",", "bboxes", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "new_rois", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.double_bbox_head.BasicResBlock.__init__": [[23, 58], ["dict", "torch.Module.__init__", "utils.ConvModule", "utils.ConvModule", "utils.ConvModule", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ")", ":", "\n", "        ", "super", "(", "BasicResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# main path", "\n", "self", ".", "conv1", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ")", "\n", "self", ".", "conv2", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "activation", "=", "None", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ")", "\n", "\n", "# identity path", "\n", "self", ".", "conv_identity", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "activation", "=", "None", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.double_bbox_head.BasicResBlock.forward": [[59, 70], ["double_bbox_head.BasicResBlock.conv1", "double_bbox_head.BasicResBlock.conv2", "double_bbox_head.BasicResBlock.conv_identity", "double_bbox_head.BasicResBlock.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "identity", "=", "self", ".", "conv_identity", "(", "identity", ")", "\n", "out", "=", "x", "+", "identity", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.double_bbox_head.DoubleConvFCBBoxHead.__init__": [[85, 119], ["dict", "kwargs.setdefault", "bbox_head.BBoxHead.__init__", "double_bbox_head.BasicResBlock", "double_bbox_head.DoubleConvFCBBoxHead._add_conv_branch", "double_bbox_head.DoubleConvFCBBoxHead._add_fc_branch", "torch.Linear", "torch.Linear", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.double_bbox_head.DoubleConvFCBBoxHead._add_conv_branch", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.double_bbox_head.DoubleConvFCBBoxHead._add_fc_branch"], ["def", "__init__", "(", "self", ",", "\n", "num_convs", "=", "0", ",", "\n", "num_fcs", "=", "0", ",", "\n", "conv_out_channels", "=", "1024", ",", "\n", "fc_out_channels", "=", "1024", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", ".", "setdefault", "(", "'with_avg_pool'", ",", "True", ")", "\n", "super", "(", "DoubleConvFCBBoxHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "self", ".", "with_avg_pool", "\n", "assert", "num_convs", ">", "0", "\n", "assert", "num_fcs", ">", "0", "\n", "self", ".", "num_convs", "=", "num_convs", "\n", "self", ".", "num_fcs", "=", "num_fcs", "\n", "self", ".", "conv_out_channels", "=", "conv_out_channels", "\n", "self", ".", "fc_out_channels", "=", "fc_out_channels", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "\n", "# increase the channel of input features", "\n", "self", ".", "res_block", "=", "BasicResBlock", "(", "self", ".", "in_channels", ",", "\n", "self", ".", "conv_out_channels", ")", "\n", "\n", "# add conv heads", "\n", "self", ".", "conv_branch", "=", "self", ".", "_add_conv_branch", "(", ")", "\n", "# add fc heads", "\n", "self", ".", "fc_branch", "=", "self", ".", "_add_fc_branch", "(", ")", "\n", "\n", "out_dim_reg", "=", "4", "if", "self", ".", "reg_class_agnostic", "else", "4", "*", "self", ".", "num_classes", "\n", "self", ".", "fc_reg", "=", "nn", ".", "Linear", "(", "self", ".", "conv_out_channels", ",", "out_dim_reg", ")", "\n", "\n", "self", ".", "fc_cls", "=", "nn", ".", "Linear", "(", "self", ".", "fc_out_channels", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.double_bbox_head.DoubleConvFCBBoxHead._add_conv_branch": [[120, 131], ["torch.ModuleList", "range", "torch.ModuleList.append", "backbones.resnet.Bottleneck"], "methods", ["None"], ["", "def", "_add_conv_branch", "(", "self", ")", ":", "\n", "        ", "\"\"\"Add the fc branch which consists of a sequential of conv layers\"\"\"", "\n", "branch_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_convs", ")", ":", "\n", "            ", "branch_convs", ".", "append", "(", "\n", "Bottleneck", "(", "\n", "inplanes", "=", "self", ".", "conv_out_channels", ",", "\n", "planes", "=", "self", ".", "conv_out_channels", "//", "4", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "", "return", "branch_convs", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.double_bbox_head.DoubleConvFCBBoxHead._add_fc_branch": [[132, 141], ["torch.ModuleList", "range", "torch.ModuleList.append", "torch.Linear"], "methods", ["None"], ["", "def", "_add_fc_branch", "(", "self", ")", ":", "\n", "        ", "\"\"\"Add the fc branch which consists of a sequential of fc layers\"\"\"", "\n", "branch_fcs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_fcs", ")", ":", "\n", "            ", "fc_in_channels", "=", "(", "\n", "self", ".", "in_channels", "*", "\n", "self", ".", "roi_feat_area", "if", "i", "==", "0", "else", "self", ".", "fc_out_channels", ")", "\n", "branch_fcs", ".", "append", "(", "nn", ".", "Linear", "(", "fc_in_channels", ",", "self", ".", "fc_out_channels", ")", ")", "\n", "", "return", "branch_fcs", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.double_bbox_head.DoubleConvFCBBoxHead.init_weights": [[142, 149], ["mmcv.cnn.weight_init.normal_init", "mmcv.cnn.weight_init.normal_init", "double_bbox_head.DoubleConvFCBBoxHead.fc_branch.modules", "isinstance", "mmcv.cnn.weight_init.xavier_init"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.weight_init.xavier_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "normal_init", "(", "self", ".", "fc_cls", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "fc_reg", ",", "std", "=", "0.001", ")", "\n", "\n", "for", "m", "in", "self", ".", "fc_branch", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "xavier_init", "(", "m", ",", "distribution", "=", "'uniform'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.double_bbox_head.DoubleConvFCBBoxHead.forward": [[150, 171], ["double_bbox_head.DoubleConvFCBBoxHead.res_block", "double_bbox_head.DoubleConvFCBBoxHead.view", "double_bbox_head.DoubleConvFCBBoxHead.fc_reg", "x_cls.view", "double_bbox_head.DoubleConvFCBBoxHead.fc_cls", "conv", "double_bbox_head.DoubleConvFCBBoxHead.avg_pool", "double_bbox_head.DoubleConvFCBBoxHead.size", "x_cls.size", "double_bbox_head.DoubleConvFCBBoxHead.relu", "fc"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x_cls", ",", "x_reg", ")", ":", "\n", "# conv head", "\n", "        ", "x_conv", "=", "self", ".", "res_block", "(", "x_reg", ")", "\n", "\n", "for", "conv", "in", "self", ".", "conv_branch", ":", "\n", "            ", "x_conv", "=", "conv", "(", "x_conv", ")", "\n", "\n", "", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "x_conv", "=", "self", ".", "avg_pool", "(", "x_conv", ")", "\n", "\n", "", "x_conv", "=", "x_conv", ".", "view", "(", "x_conv", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "bbox_pred", "=", "self", ".", "fc_reg", "(", "x_conv", ")", "\n", "\n", "# fc head", "\n", "x_fc", "=", "x_cls", ".", "view", "(", "x_cls", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "for", "fc", "in", "self", ".", "fc_branch", ":", "\n", "            ", "x_fc", "=", "self", ".", "relu", "(", "fc", "(", "x_fc", ")", ")", "\n", "\n", "", "cls_score", "=", "self", ".", "fc_cls", "(", "x_fc", ")", "\n", "\n", "return", "cls_score", ",", "bbox_pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.roi_extractors.single_level.SingleRoIExtractor.__init__": [[25, 36], ["torch.Module.__init__", "single_level.SingleRoIExtractor.build_roi_layers"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.roi_extractors.single_level.SingleRoIExtractor.build_roi_layers"], ["def", "__init__", "(", "self", ",", "\n", "roi_layer", ",", "\n", "out_channels", ",", "\n", "featmap_strides", ",", "\n", "finest_scale", "=", "56", ")", ":", "\n", "        ", "super", "(", "SingleRoIExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "roi_layers", "=", "self", ".", "build_roi_layers", "(", "roi_layer", ",", "featmap_strides", ")", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "featmap_strides", "=", "featmap_strides", "\n", "self", ".", "finest_scale", "=", "finest_scale", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.roi_extractors.single_level.SingleRoIExtractor.num_inputs": [[37, 41], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_inputs", "(", "self", ")", ":", "\n", "        ", "\"\"\"int: Input feature map levels.\"\"\"", "\n", "return", "len", "(", "self", ".", "featmap_strides", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.roi_extractors.single_level.SingleRoIExtractor.init_weights": [[42, 44], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.roi_extractors.single_level.SingleRoIExtractor.build_roi_layers": [[45, 53], ["layer_cfg.copy", "layer_cfg.copy.pop", "hasattr", "getattr", "torch.ModuleList", "torch.ModuleList", "getattr."], "methods", ["None"], ["", "def", "build_roi_layers", "(", "self", ",", "layer_cfg", ",", "featmap_strides", ")", ":", "\n", "        ", "cfg", "=", "layer_cfg", ".", "copy", "(", ")", "\n", "layer_type", "=", "cfg", ".", "pop", "(", "'type'", ")", "\n", "assert", "hasattr", "(", "ops", ",", "layer_type", ")", "\n", "layer_cls", "=", "getattr", "(", "ops", ",", "layer_type", ")", "\n", "roi_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "layer_cls", "(", "spatial_scale", "=", "1", "/", "s", ",", "**", "cfg", ")", "for", "s", "in", "featmap_strides", "]", ")", "\n", "return", "roi_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.roi_extractors.single_level.SingleRoIExtractor.map_roi_levels": [[54, 74], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "target_lvls.clamp().long.clamp().long.clamp().long", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "target_lvls.clamp().long.clamp().long.clamp"], "methods", ["None"], ["", "def", "map_roi_levels", "(", "self", ",", "rois", ",", "num_levels", ")", ":", "\n", "        ", "\"\"\"Map rois to corresponding feature levels by scales.\n\n        - scale < finest_scale * 2: level 0\n        - finest_scale * 2 <= scale < finest_scale * 4: level 1\n        - finest_scale * 4 <= scale < finest_scale * 8: level 2\n        - scale >= finest_scale * 8: level 3\n\n        Args:\n            rois (Tensor): Input RoIs, shape (k, 5).\n            num_levels (int): Total level number.\n\n        Returns:\n            Tensor: Level index (0-based) of each RoI, shape (k, )\n        \"\"\"", "\n", "scale", "=", "torch", ".", "sqrt", "(", "\n", "(", "rois", "[", ":", ",", "3", "]", "-", "rois", "[", ":", ",", "1", "]", "+", "1", ")", "*", "(", "rois", "[", ":", ",", "4", "]", "-", "rois", "[", ":", ",", "2", "]", "+", "1", ")", ")", "\n", "target_lvls", "=", "torch", ".", "floor", "(", "torch", ".", "log2", "(", "scale", "/", "self", ".", "finest_scale", "+", "1e-6", ")", ")", "\n", "target_lvls", "=", "target_lvls", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "num_levels", "-", "1", ")", ".", "long", "(", ")", "\n", "return", "target_lvls", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.roi_extractors.single_level.SingleRoIExtractor.roi_rescale": [[75, 88], ["torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "roi_rescale", "(", "self", ",", "rois", ",", "scale_factor", ")", ":", "\n", "        ", "cx", "=", "(", "rois", "[", ":", ",", "1", "]", "+", "rois", "[", ":", ",", "3", "]", ")", "*", "0.5", "\n", "cy", "=", "(", "rois", "[", ":", ",", "2", "]", "+", "rois", "[", ":", ",", "4", "]", ")", "*", "0.5", "\n", "w", "=", "rois", "[", ":", ",", "3", "]", "-", "rois", "[", ":", ",", "1", "]", "+", "1", "\n", "h", "=", "rois", "[", ":", ",", "4", "]", "-", "rois", "[", ":", ",", "2", "]", "+", "1", "\n", "new_w", "=", "w", "*", "scale_factor", "\n", "new_h", "=", "h", "*", "scale_factor", "\n", "x1", "=", "cx", "-", "new_w", "*", "0.5", "+", "0.5", "\n", "x2", "=", "cx", "+", "new_w", "*", "0.5", "-", "0.5", "\n", "y1", "=", "cy", "-", "new_h", "*", "0.5", "+", "0.5", "\n", "y2", "=", "cy", "+", "new_h", "*", "0.5", "-", "0.5", "\n", "new_rois", "=", "torch", ".", "stack", "(", "(", "rois", "[", ":", ",", "0", "]", ",", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "new_rois", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.roi_extractors.single_level.SingleRoIExtractor.forward": [[89, 108], ["mmdet.core.force_fp32", "len", "single_level.SingleRoIExtractor.map_roi_levels", "feats[].new_zeros", "range", "len", "single_level.SingleRoIExtractor.size", "single_level.SingleRoIExtractor.roi_rescale", "inds.any"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.twangnh_SimCal.roi_extractors.single_level.SingleRoIExtractor.map_roi_levels", "home.repos.pwc.inspect_result.twangnh_SimCal.roi_extractors.single_level.SingleRoIExtractor.roi_rescale"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'feats'", ",", ")", ",", "out_fp16", "=", "True", ")", "\n", "def", "forward", "(", "self", ",", "feats", ",", "rois", ",", "roi_scale_factor", "=", "None", ")", ":", "\n", "        ", "if", "len", "(", "feats", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "roi_layers", "[", "0", "]", "(", "feats", "[", "0", "]", ",", "rois", ")", "\n", "\n", "", "out_size", "=", "self", ".", "roi_layers", "[", "0", "]", ".", "out_size", "\n", "num_levels", "=", "len", "(", "feats", ")", "\n", "target_lvls", "=", "self", ".", "map_roi_levels", "(", "rois", ",", "num_levels", ")", "\n", "roi_feats", "=", "feats", "[", "0", "]", ".", "new_zeros", "(", "\n", "rois", ".", "size", "(", "0", ")", ",", "self", ".", "out_channels", ",", "*", "out_size", ")", "\n", "if", "roi_scale_factor", "is", "not", "None", ":", "\n", "            ", "rois", "=", "self", ".", "roi_rescale", "(", "rois", ",", "roi_scale_factor", ")", "\n", "", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "inds", "=", "target_lvls", "==", "i", "\n", "if", "inds", ".", "any", "(", ")", ":", "\n", "                ", "rois_", "=", "rois", "[", "inds", ",", ":", "]", "\n", "roi_feats_t", "=", "self", ".", "roi_layers", "[", "i", "]", "(", "feats", "[", "i", "]", ",", "rois_", ")", "\n", "roi_feats", "[", "inds", "]", "=", "roi_feats_t", "\n", "", "", "return", "roi_feats", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.balanced_l1_loss.BalancedL1Loss.__init__": [[36, 48], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["def", "__init__", "(", "self", ",", "\n", "alpha", "=", "0.5", ",", "\n", "gamma", "=", "1.5", ",", "\n", "beta", "=", "1.0", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "BalancedL1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.balanced_l1_loss.BalancedL1Loss.forward": [[49, 70], ["balanced_l1_loss.balanced_l1_loss"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.losses.balanced_l1_loss.balanced_l1_loss"], ["", "def", "forward", "(", "self", ",", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", "=", "None", ",", "\n", "avg_factor", "=", "None", ",", "\n", "reduction_override", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "assert", "reduction_override", "in", "(", "None", ",", "'none'", ",", "'mean'", ",", "'sum'", ")", "\n", "reduction", "=", "(", "\n", "reduction_override", "if", "reduction_override", "else", "self", ".", "reduction", ")", "\n", "loss_bbox", "=", "self", ".", "loss_weight", "*", "balanced_l1_loss", "(", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", ",", "\n", "alpha", "=", "self", ".", "alpha", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "\n", "beta", "=", "self", ".", "beta", ",", "\n", "reduction", "=", "reduction", ",", "\n", "avg_factor", "=", "avg_factor", ",", "\n", "**", "kwargs", ")", "\n", "return", "loss_bbox", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.balanced_l1_loss.balanced_l1_loss": [[9, 27], ["torch.abs", "torch.abs", "torch.where", "torch.where", "pred.size", "target.size", "target.numel", "torch.log", "torch.log"], "function", ["None"], ["@", "weighted_loss", "\n", "def", "balanced_l1_loss", "(", "pred", ",", "\n", "target", ",", "\n", "beta", "=", "1.0", ",", "\n", "alpha", "=", "0.5", ",", "\n", "gamma", "=", "1.5", ",", "\n", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "assert", "beta", ">", "0", "\n", "assert", "pred", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", "and", "target", ".", "numel", "(", ")", ">", "0", "\n", "\n", "diff", "=", "torch", ".", "abs", "(", "pred", "-", "target", ")", "\n", "b", "=", "np", ".", "e", "**", "(", "gamma", "/", "alpha", ")", "-", "1", "\n", "loss", "=", "torch", ".", "where", "(", "\n", "diff", "<", "beta", ",", "alpha", "/", "b", "*", "\n", "(", "b", "*", "diff", "+", "1", ")", "*", "torch", ".", "log", "(", "b", "*", "diff", "/", "beta", "+", "1", ")", "-", "alpha", "*", "diff", ",", "\n", "gamma", "*", "diff", "+", "gamma", "/", "b", "-", "alpha", "*", "beta", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.mse_loss.MSELoss.__init__": [[13, 17], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reduction", "=", "'mean'", ",", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.mse_loss.MSELoss.forward": [[18, 26], ["mse_loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "weight", "=", "None", ",", "avg_factor", "=", "None", ")", ":", "\n", "        ", "loss", "=", "self", ".", "loss_weight", "*", "mse_loss", "(", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", ",", "\n", "reduction", "=", "self", ".", "reduction", ",", "\n", "avg_factor", "=", "avg_factor", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.iou_loss.IoULoss.__init__": [[75, 80], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "eps", "=", "1e-6", ",", "reduction", "=", "'mean'", ",", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "IoULoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.iou_loss.IoULoss.forward": [[81, 102], ["iou_loss.iou_loss", "torch.any", "torch.any", "torch.any", "torch.any"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.losses.iou_loss.iou_loss"], ["", "def", "forward", "(", "self", ",", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", "=", "None", ",", "\n", "avg_factor", "=", "None", ",", "\n", "reduction_override", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "weight", "is", "not", "None", "and", "not", "torch", ".", "any", "(", "weight", ">", "0", ")", ":", "\n", "            ", "return", "(", "pred", "*", "weight", ")", ".", "sum", "(", ")", "# 0", "\n", "", "assert", "reduction_override", "in", "(", "None", ",", "'none'", ",", "'mean'", ",", "'sum'", ")", "\n", "reduction", "=", "(", "\n", "reduction_override", "if", "reduction_override", "else", "self", ".", "reduction", ")", "\n", "loss", "=", "self", ".", "loss_weight", "*", "iou_loss", "(", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", ",", "\n", "eps", "=", "self", ".", "eps", ",", "\n", "reduction", "=", "reduction", ",", "\n", "avg_factor", "=", "avg_factor", ",", "\n", "**", "kwargs", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.iou_loss.BoundedIoULoss.__init__": [[107, 113], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "beta", "=", "0.2", ",", "eps", "=", "1e-3", ",", "reduction", "=", "'mean'", ",", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "BoundedIoULoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.iou_loss.BoundedIoULoss.forward": [[114, 136], ["iou_loss.bounded_iou_loss", "torch.any", "torch.any", "torch.any", "torch.any"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.losses.iou_loss.bounded_iou_loss"], ["", "def", "forward", "(", "self", ",", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", "=", "None", ",", "\n", "avg_factor", "=", "None", ",", "\n", "reduction_override", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "weight", "is", "not", "None", "and", "not", "torch", ".", "any", "(", "weight", ">", "0", ")", ":", "\n", "            ", "return", "(", "pred", "*", "weight", ")", ".", "sum", "(", ")", "# 0", "\n", "", "assert", "reduction_override", "in", "(", "None", ",", "'none'", ",", "'mean'", ",", "'sum'", ")", "\n", "reduction", "=", "(", "\n", "reduction_override", "if", "reduction_override", "else", "self", ".", "reduction", ")", "\n", "loss", "=", "self", ".", "loss_weight", "*", "bounded_iou_loss", "(", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", ",", "\n", "beta", "=", "self", ".", "beta", ",", "\n", "eps", "=", "self", ".", "eps", ",", "\n", "reduction", "=", "reduction", ",", "\n", "avg_factor", "=", "avg_factor", ",", "\n", "**", "kwargs", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.iou_loss.iou_loss": [[9, 28], ["mmdet.core.bbox_overlaps().clamp", "bbox_overlaps().clamp.log", "mmdet.core.bbox_overlaps"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.geometry.bbox_overlaps"], ["@", "weighted_loss", "\n", "def", "iou_loss", "(", "pred", ",", "target", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"IoU loss.\n\n    Computing the IoU loss between a set of predicted bboxes and target bboxes.\n    The loss is calculated as negative log of IoU.\n\n    Args:\n        pred (Tensor): Predicted bboxes of format (x1, y1, x2, y2),\n            shape (n, 4).\n        target (Tensor): Corresponding gt bboxes, shape (n, 4).\n        eps (float): Eps to avoid log(0).\n\n    Return:\n        Tensor: Loss tensor.\n    \"\"\"", "\n", "ious", "=", "bbox_overlaps", "(", "pred", ",", "target", ",", "is_aligned", "=", "True", ")", ".", "clamp", "(", "min", "=", "eps", ")", "\n", "loss", "=", "-", "ious", ".", "log", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.iou_loss.bounded_iou_loss": [[30, 70], ["torch.stack().view", "torch.stack().view", "torch.where", "torch.where", "torch.no_grad", "torch.no_grad", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "loss_dx.size", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.stack", "torch.stack", "dx.abs", "dy.abs", "dx.abs", "dy.abs"], "function", ["None"], ["", "@", "weighted_loss", "\n", "def", "bounded_iou_loss", "(", "pred", ",", "target", ",", "beta", "=", "0.2", ",", "eps", "=", "1e-3", ")", ":", "\n", "    ", "\"\"\"Improving Object Localization with Fitness NMS and Bounded IoU Loss,\n    https://arxiv.org/abs/1711.00164.\n\n    Args:\n        pred (tensor): Predicted bboxes.\n        target (tensor): Target bboxes.\n        beta (float): beta parameter in smoothl1.\n        eps (float): eps to avoid NaN.\n    \"\"\"", "\n", "pred_ctrx", "=", "(", "pred", "[", ":", ",", "0", "]", "+", "pred", "[", ":", ",", "2", "]", ")", "*", "0.5", "\n", "pred_ctry", "=", "(", "pred", "[", ":", ",", "1", "]", "+", "pred", "[", ":", ",", "3", "]", ")", "*", "0.5", "\n", "pred_w", "=", "pred", "[", ":", ",", "2", "]", "-", "pred", "[", ":", ",", "0", "]", "+", "1", "\n", "pred_h", "=", "pred", "[", ":", ",", "3", "]", "-", "pred", "[", ":", ",", "1", "]", "+", "1", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "target_ctrx", "=", "(", "target", "[", ":", ",", "0", "]", "+", "target", "[", ":", ",", "2", "]", ")", "*", "0.5", "\n", "target_ctry", "=", "(", "target", "[", ":", ",", "1", "]", "+", "target", "[", ":", ",", "3", "]", ")", "*", "0.5", "\n", "target_w", "=", "target", "[", ":", ",", "2", "]", "-", "target", "[", ":", ",", "0", "]", "+", "1", "\n", "target_h", "=", "target", "[", ":", ",", "3", "]", "-", "target", "[", ":", ",", "1", "]", "+", "1", "\n", "\n", "", "dx", "=", "target_ctrx", "-", "pred_ctrx", "\n", "dy", "=", "target_ctry", "-", "pred_ctry", "\n", "\n", "loss_dx", "=", "1", "-", "torch", ".", "max", "(", "\n", "(", "target_w", "-", "2", "*", "dx", ".", "abs", "(", ")", ")", "/", "\n", "(", "target_w", "+", "2", "*", "dx", ".", "abs", "(", ")", "+", "eps", ")", ",", "torch", ".", "zeros_like", "(", "dx", ")", ")", "\n", "loss_dy", "=", "1", "-", "torch", ".", "max", "(", "\n", "(", "target_h", "-", "2", "*", "dy", ".", "abs", "(", ")", ")", "/", "\n", "(", "target_h", "+", "2", "*", "dy", ".", "abs", "(", ")", "+", "eps", ")", ",", "torch", ".", "zeros_like", "(", "dy", ")", ")", "\n", "loss_dw", "=", "1", "-", "torch", ".", "min", "(", "target_w", "/", "(", "pred_w", "+", "eps", ")", ",", "pred_w", "/", "\n", "(", "target_w", "+", "eps", ")", ")", "\n", "loss_dh", "=", "1", "-", "torch", ".", "min", "(", "target_h", "/", "(", "pred_h", "+", "eps", ")", ",", "pred_h", "/", "\n", "(", "target_h", "+", "eps", ")", ")", "\n", "loss_comb", "=", "torch", ".", "stack", "(", "[", "loss_dx", ",", "loss_dy", ",", "loss_dw", ",", "loss_dh", "]", ",", "\n", "dim", "=", "-", "1", ")", ".", "view", "(", "loss_dx", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "loss", "=", "torch", ".", "where", "(", "loss_comb", "<", "beta", ",", "0.5", "*", "loss_comb", "*", "loss_comb", "/", "beta", ",", "\n", "loss_comb", "-", "0.5", "*", "beta", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.focal_loss.FocalLoss.__init__": [[48, 61], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "gamma", "=", "2.0", ",", "\n", "alpha", "=", "0.25", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "use_sigmoid", "is", "True", ",", "'Only sigmoid focal loss supported now.'", "\n", "self", ".", "use_sigmoid", "=", "use_sigmoid", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.focal_loss.FocalLoss.forward": [[62, 83], ["mmdet.ops.sigmoid_focal_loss"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.losses.focal_loss.sigmoid_focal_loss"], ["", "def", "forward", "(", "self", ",", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", "=", "None", ",", "\n", "avg_factor", "=", "None", ",", "\n", "reduction_override", "=", "None", ")", ":", "\n", "        ", "assert", "reduction_override", "in", "(", "None", ",", "'none'", ",", "'mean'", ",", "'sum'", ")", "\n", "reduction", "=", "(", "\n", "reduction_override", "if", "reduction_override", "else", "self", ".", "reduction", ")", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "loss_cls", "=", "self", ".", "loss_weight", "*", "sigmoid_focal_loss", "(", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "\n", "alpha", "=", "self", ".", "alpha", ",", "\n", "reduction", "=", "reduction", ",", "\n", "avg_factor", "=", "avg_factor", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "loss_cls", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.focal_loss.py_sigmoid_focal_loss": [[10, 26], ["pred.sigmoid", "target.type_as.type_as", "utils.weight_reduce_loss", "pt.pow", "torch.binary_cross_entropy_with_logits"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.losses.utils.weight_reduce_loss"], ["def", "py_sigmoid_focal_loss", "(", "pred", ",", "\n", "target", ",", "\n", "weight", "=", "None", ",", "\n", "gamma", "=", "2.0", ",", "\n", "alpha", "=", "0.25", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "avg_factor", "=", "None", ")", ":", "\n", "    ", "pred_sigmoid", "=", "pred", ".", "sigmoid", "(", ")", "\n", "target", "=", "target", ".", "type_as", "(", "pred", ")", "\n", "pt", "=", "(", "1", "-", "pred_sigmoid", ")", "*", "target", "+", "pred_sigmoid", "*", "(", "1", "-", "target", ")", "\n", "focal_weight", "=", "(", "alpha", "*", "target", "+", "(", "1", "-", "alpha", ")", "*", "\n", "(", "1", "-", "target", ")", ")", "*", "pt", ".", "pow", "(", "gamma", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "pred", ",", "target", ",", "reduction", "=", "'none'", ")", "*", "focal_weight", "\n", "loss", "=", "weight_reduce_loss", "(", "loss", ",", "weight", ",", "reduction", ",", "avg_factor", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.focal_loss.sigmoid_focal_loss": [[28, 43], ["mmdet.ops.sigmoid_focal_loss", "utils.weight_reduce_loss", "weight.view.view"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.losses.focal_loss.sigmoid_focal_loss", "home.repos.pwc.inspect_result.twangnh_SimCal.losses.utils.weight_reduce_loss"], ["", "def", "sigmoid_focal_loss", "(", "pred", ",", "\n", "target", ",", "\n", "weight", "=", "None", ",", "\n", "gamma", "=", "2.0", ",", "\n", "alpha", "=", "0.25", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "avg_factor", "=", "None", ")", ":", "\n", "# Function.apply does not accept keyword arguments, so the decorator", "\n", "# \"weighted_loss\" is not applicable", "\n", "    ", "loss", "=", "_sigmoid_focal_loss", "(", "pred", ",", "target", ",", "gamma", ",", "alpha", ")", "\n", "# TODO: find a proper way to handle the shape of weight", "\n", "if", "weight", "is", "not", "None", ":", "\n", "        ", "weight", "=", "weight", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "loss", "=", "weight_reduce_loss", "(", "loss", ",", "weight", ",", "reduction", ",", "avg_factor", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.ghm_loss.GHMC.__init__": [[34, 46], ["torch.Module.__init__", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["def", "__init__", "(", "self", ",", "bins", "=", "10", ",", "momentum", "=", "0", ",", "use_sigmoid", "=", "True", ",", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "GHMC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bins", "=", "bins", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "edges", "=", "torch", ".", "arange", "(", "bins", "+", "1", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "/", "bins", "\n", "self", ".", "edges", "[", "-", "1", "]", "+=", "1e-6", "\n", "if", "momentum", ">", "0", ":", "\n", "            ", "self", ".", "acc_sum", "=", "torch", ".", "zeros", "(", "bins", ")", ".", "cuda", "(", ")", "\n", "", "self", ".", "use_sigmoid", "=", "use_sigmoid", "\n", "if", "not", "self", ".", "use_sigmoid", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.ghm_loss.GHMC.forward": [[47, 92], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "max", "range", "pred.dim", "target.dim", "ghm_loss._expand_binary_labels", "target.float", "label_weight.float", "valid.float().sum().item", "inds.sum().item", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "pred.size", "pred.sigmoid().detach", "valid.float().sum", "inds.sum", "pred.sigmoid", "valid.float"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.losses.cross_entropy_loss._expand_binary_labels"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "label_weight", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Calculate the GHM-C loss.\n\n        Args:\n            pred (float tensor of size [batch_num, class_num]):\n                The direct prediction of classification fc layer.\n            target (float tensor of size [batch_num, class_num]):\n                Binary class target for each sample.\n            label_weight (float tensor of size [batch_num, class_num]):\n                the value is 1 if the sample is valid and 0 if ignored.\n        Returns:\n            The gradient harmonized loss.\n        \"\"\"", "\n", "# the target should be binary class label", "\n", "if", "pred", ".", "dim", "(", ")", "!=", "target", ".", "dim", "(", ")", ":", "\n", "            ", "target", ",", "label_weight", "=", "_expand_binary_labels", "(", "\n", "target", ",", "label_weight", ",", "pred", ".", "size", "(", "-", "1", ")", ")", "\n", "", "target", ",", "label_weight", "=", "target", ".", "float", "(", ")", ",", "label_weight", ".", "float", "(", ")", "\n", "edges", "=", "self", ".", "edges", "\n", "mmt", "=", "self", ".", "momentum", "\n", "weights", "=", "torch", ".", "zeros_like", "(", "pred", ")", "\n", "\n", "# gradient length", "\n", "g", "=", "torch", ".", "abs", "(", "pred", ".", "sigmoid", "(", ")", ".", "detach", "(", ")", "-", "target", ")", "\n", "\n", "valid", "=", "label_weight", ">", "0", "\n", "tot", "=", "max", "(", "valid", ".", "float", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "1.0", ")", "\n", "n", "=", "0", "# n valid bins", "\n", "for", "i", "in", "range", "(", "self", ".", "bins", ")", ":", "\n", "            ", "inds", "=", "(", "g", ">=", "edges", "[", "i", "]", ")", "&", "(", "g", "<", "edges", "[", "i", "+", "1", "]", ")", "&", "valid", "\n", "num_in_bin", "=", "inds", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "num_in_bin", ">", "0", ":", "\n", "                ", "if", "mmt", ">", "0", ":", "\n", "                    ", "self", ".", "acc_sum", "[", "i", "]", "=", "mmt", "*", "self", ".", "acc_sum", "[", "i", "]", "+", "(", "1", "-", "mmt", ")", "*", "num_in_bin", "\n", "weights", "[", "inds", "]", "=", "tot", "/", "self", ".", "acc_sum", "[", "i", "]", "\n", "", "else", ":", "\n", "                    ", "weights", "[", "inds", "]", "=", "tot", "/", "num_in_bin", "\n", "", "n", "+=", "1", "\n", "", "", "if", "n", ">", "0", ":", "\n", "            ", "weights", "=", "weights", "/", "n", "\n", "\n", "", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "pred", ",", "target", ",", "weights", ",", "reduction", "=", "'sum'", ")", "/", "tot", "\n", "return", "loss", "*", "self", ".", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.ghm_loss.GHMR.__init__": [[110, 120], ["torch.Module.__init__", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["def", "__init__", "(", "self", ",", "mu", "=", "0.02", ",", "bins", "=", "10", ",", "momentum", "=", "0", ",", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "GHMR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mu", "=", "mu", "\n", "self", ".", "bins", "=", "bins", "\n", "self", ".", "edges", "=", "torch", ".", "arange", "(", "bins", "+", "1", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "/", "bins", "\n", "self", ".", "edges", "[", "-", "1", "]", "=", "1e3", "\n", "self", ".", "momentum", "=", "momentum", "\n", "if", "momentum", ">", "0", ":", "\n", "            ", "self", ".", "acc_sum", "=", "torch", ".", "zeros", "(", "bins", ")", ".", "cuda", "(", ")", "\n", "", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.ghm_loss.GHMR.forward": [[122, 168], ["torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "max", "range", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "label_weight.float().sum().item", "inds.sum().item", "loss.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "label_weight.float().sum", "inds.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "label_weight.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "label_weight", ",", "avg_factor", "=", "None", ")", ":", "\n", "        ", "\"\"\"Calculate the GHM-R loss.\n\n        Args:\n            pred (float tensor of size [batch_num, 4 (* class_num)]):\n                The prediction of box regression layer. Channel number can be 4\n                or 4 * class_num depending on whether it is class-agnostic.\n            target (float tensor of size [batch_num, 4 (* class_num)]):\n                The target regression values with the same size of pred.\n            label_weight (float tensor of size [batch_num, 4 (* class_num)]):\n                The weight of each sample, 0 if ignored.\n        Returns:\n            The gradient harmonized loss.\n        \"\"\"", "\n", "mu", "=", "self", ".", "mu", "\n", "edges", "=", "self", ".", "edges", "\n", "mmt", "=", "self", ".", "momentum", "\n", "\n", "# ASL1 loss", "\n", "diff", "=", "pred", "-", "target", "\n", "loss", "=", "torch", ".", "sqrt", "(", "diff", "*", "diff", "+", "mu", "*", "mu", ")", "-", "mu", "\n", "\n", "# gradient length", "\n", "g", "=", "torch", ".", "abs", "(", "diff", "/", "torch", ".", "sqrt", "(", "mu", "*", "mu", "+", "diff", "*", "diff", ")", ")", ".", "detach", "(", ")", "\n", "weights", "=", "torch", ".", "zeros_like", "(", "g", ")", "\n", "\n", "valid", "=", "label_weight", ">", "0", "\n", "tot", "=", "max", "(", "label_weight", ".", "float", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "1.0", ")", "\n", "n", "=", "0", "# n: valid bins", "\n", "for", "i", "in", "range", "(", "self", ".", "bins", ")", ":", "\n", "            ", "inds", "=", "(", "g", ">=", "edges", "[", "i", "]", ")", "&", "(", "g", "<", "edges", "[", "i", "+", "1", "]", ")", "&", "valid", "\n", "num_in_bin", "=", "inds", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "num_in_bin", ">", "0", ":", "\n", "                ", "n", "+=", "1", "\n", "if", "mmt", ">", "0", ":", "\n", "                    ", "self", ".", "acc_sum", "[", "i", "]", "=", "mmt", "*", "self", ".", "acc_sum", "[", "i", "]", "+", "(", "1", "-", "mmt", ")", "*", "num_in_bin", "\n", "weights", "[", "inds", "]", "=", "tot", "/", "self", ".", "acc_sum", "[", "i", "]", "\n", "", "else", ":", "\n", "                    ", "weights", "[", "inds", "]", "=", "tot", "/", "num_in_bin", "\n", "", "", "", "if", "n", ">", "0", ":", "\n", "            ", "weights", "/=", "n", "\n", "\n", "", "loss", "=", "loss", "*", "weights", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "/", "tot", "\n", "return", "loss", "*", "self", ".", "loss_weight", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.ghm_loss._expand_binary_labels": [[8, 16], ["labels.new_full", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "label_weights.view().expand", "torch.nonzero().squeeze.numel", "label_weights.size", "labels.size", "torch.nonzero", "torch.nonzero", "torch.nonzero", "label_weights.view"], "function", ["None"], ["def", "_expand_binary_labels", "(", "labels", ",", "label_weights", ",", "label_channels", ")", ":", "\n", "    ", "bin_labels", "=", "labels", ".", "new_full", "(", "(", "labels", ".", "size", "(", "0", ")", ",", "label_channels", ")", ",", "0", ")", "\n", "inds", "=", "torch", ".", "nonzero", "(", "labels", ">=", "1", ")", ".", "squeeze", "(", ")", "\n", "if", "inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "        ", "bin_labels", "[", "inds", ",", "labels", "[", "inds", "]", "-", "1", "]", "=", "1", "\n", "", "bin_label_weights", "=", "label_weights", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "\n", "label_weights", ".", "size", "(", "0", ")", ",", "label_channels", ")", "\n", "return", "bin_labels", ",", "bin_label_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.accuracy.Accuracy.__init__": [[26, 29], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "topk", "=", "topk", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.accuracy.Accuracy.forward": [[30, 32], ["accuracy.accuracy"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.losses.accuracy.accuracy"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "return", "accuracy", "(", "pred", ",", "target", ",", "self", ".", "topk", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.accuracy.accuracy": [[4, 22], ["isinstance", "isinstance", "max", "pred.topk", "pred_label.t.t", "pred_label.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "pred.size", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "pred", ",", "target", ",", "topk", "=", "1", ")", ":", "\n", "    ", "assert", "isinstance", "(", "topk", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "topk", ",", "int", ")", ":", "\n", "        ", "topk", "=", "(", "topk", ",", ")", "\n", "return_single", "=", "True", "\n", "", "else", ":", "\n", "        ", "return_single", "=", "False", "\n", "\n", "", "maxk", "=", "max", "(", "topk", ")", "\n", "_", ",", "pred_label", "=", "pred", ".", "topk", "(", "maxk", ",", "dim", "=", "1", ")", "\n", "pred_label", "=", "pred_label", ".", "t", "(", ")", "\n", "correct", "=", "pred_label", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred_label", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "pred", ".", "size", "(", "0", ")", ")", ")", "\n", "", "return", "res", "[", "0", "]", "if", "return_single", "else", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.utils.reduce_loss": [[6, 24], ["torch._Reduction.get_enum", "loss.mean", "loss.sum"], "function", ["None"], ["import", "torch", "\n", "\n", "\n", "def", "to_tensor", "(", "data", ")", ":", "\n", "    ", "\"\"\"Convert objects of various python types to :obj:`torch.Tensor`.\n\n    Supported types are: :class:`numpy.ndarray`, :class:`torch.Tensor`,\n    :class:`Sequence`, :class:`int` and :class:`float`.\n    \"\"\"", "\n", "if", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "Sequence", ")", "and", "not", "mmcv", ".", "is_str", "(", "data", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "int", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "data", "]", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "[", "data", "]", ")", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.utils.weight_reduce_loss": [[26, 53], ["utils.reduce_loss", "reduce_loss.sum", "ValueError"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.losses.utils.reduce_loss"], ["        ", "raise", "TypeError", "(", "'type {} cannot be converted to tensor.'", ".", "format", "(", "\n", "type", "(", "data", ")", ")", ")", "\n", "\n", "\n", "", "", "def", "random_scale", "(", "img_scales", ",", "mode", "=", "'range'", ")", ":", "\n", "    ", "\"\"\"Randomly select a scale from a list of scales or scale ranges.\n\n    Args:\n        img_scales (list[tuple]): Image scale or scale range.\n        mode (str): \"range\" or \"value\".\n\n    Returns:\n        tuple: Sampled image scale.\n    \"\"\"", "\n", "num_scales", "=", "len", "(", "img_scales", ")", "\n", "if", "num_scales", "==", "1", ":", "# fixed scale is specified", "\n", "        ", "img_scale", "=", "img_scales", "[", "0", "]", "\n", "", "elif", "num_scales", "==", "2", ":", "# randomly sample a scale", "\n", "        ", "if", "mode", "==", "'range'", ":", "\n", "            ", "img_scale_long", "=", "[", "max", "(", "s", ")", "for", "s", "in", "img_scales", "]", "\n", "img_scale_short", "=", "[", "min", "(", "s", ")", "for", "s", "in", "img_scales", "]", "\n", "long_edge", "=", "np", ".", "random", ".", "randint", "(", "\n", "min", "(", "img_scale_long", ")", ",", "\n", "max", "(", "img_scale_long", ")", "+", "1", ")", "\n", "short_edge", "=", "np", ".", "random", ".", "randint", "(", "\n", "min", "(", "img_scale_short", ")", ",", "\n", "max", "(", "img_scale_short", ")", "+", "1", ")", "\n", "img_scale", "=", "(", "long_edge", ",", "short_edge", ")", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.utils.weighted_loss": [[55, 98], ["functools.wraps", "loss_func", "utils.weight_reduce_loss"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.losses.utils.weight_reduce_loss"], ["            ", "img_scale", "=", "img_scales", "[", "np", ".", "random", ".", "randint", "(", "num_scales", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "if", "mode", "!=", "'value'", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Only \"value\" mode supports more than 2 image scales'", ")", "\n", "", "img_scale", "=", "img_scales", "[", "np", ".", "random", ".", "randint", "(", "num_scales", ")", "]", "\n", "", "return", "img_scale", "\n", "\n", "\n", "", "def", "show_ann", "(", "coco", ",", "img", ",", "ann_info", ")", ":", "\n", "    ", "plt", ".", "imshow", "(", "mmcv", ".", "bgr2rgb", "(", "img", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "coco", ".", "showAnns", "(", "ann_info", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.cross_entropy_loss.CrossEntropyLoss.__init__": [[67, 85], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "use_sigmoid", "=", "False", ",", "\n", "use_mask", "=", "False", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "use_sigmoid", "is", "False", ")", "or", "(", "use_mask", "is", "False", ")", "\n", "self", ".", "use_sigmoid", "=", "use_sigmoid", "\n", "self", ".", "use_mask", "=", "use_mask", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "self", ".", "cls_criterion", "=", "binary_cross_entropy", "\n", "", "elif", "self", ".", "use_mask", ":", "\n", "            ", "self", ".", "cls_criterion", "=", "mask_cross_entropy", "\n", "", "else", ":", "\n", "            ", "self", ".", "cls_criterion", "=", "cross_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.cross_entropy_loss.CrossEntropyLoss.forward": [[86, 104], ["cross_entropy_loss.CrossEntropyLoss.cls_criterion"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "\n", "cls_score", ",", "\n", "label", ",", "\n", "weight", "=", "None", ",", "\n", "avg_factor", "=", "None", ",", "\n", "reduction_override", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "assert", "reduction_override", "in", "(", "None", ",", "'none'", ",", "'mean'", ",", "'sum'", ")", "\n", "reduction", "=", "(", "\n", "reduction_override", "if", "reduction_override", "else", "self", ".", "reduction", ")", "\n", "loss_cls", "=", "self", ".", "loss_weight", "*", "self", ".", "cls_criterion", "(", "\n", "cls_score", ",", "\n", "label", ",", "\n", "weight", ",", "\n", "reduction", "=", "reduction", ",", "\n", "avg_factor", "=", "avg_factor", ",", "\n", "**", "kwargs", ")", "\n", "return", "loss_cls", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.cross_entropy_loss.cross_entropy": [[9, 20], ["torch.cross_entropy", "utils.weight_reduce_loss", "weight.float.float"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.losses.cross_entropy_loss.cross_entropy", "home.repos.pwc.inspect_result.twangnh_SimCal.losses.utils.weight_reduce_loss"], ["def", "cross_entropy", "(", "pred", ",", "label", ",", "weight", "=", "None", ",", "reduction", "=", "'mean'", ",", "avg_factor", "=", "None", ")", ":", "\n", "# element-wise losses", "\n", "    ", "loss", "=", "F", ".", "cross_entropy", "(", "pred", ",", "label", ",", "reduction", "=", "'none'", ")", "\n", "\n", "# apply weights and do the reduction", "\n", "if", "weight", "is", "not", "None", ":", "\n", "        ", "weight", "=", "weight", ".", "float", "(", ")", "\n", "", "loss", "=", "weight_reduce_loss", "(", "\n", "loss", ",", "weight", "=", "weight", ",", "reduction", "=", "reduction", ",", "avg_factor", "=", "avg_factor", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.cross_entropy_loss._expand_binary_labels": [[22, 33], ["labels.new_full", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze.numel", "label_weights.view().expand", "labels.size", "torch.nonzero", "torch.nonzero", "torch.nonzero", "label_weights.size", "label_weights.view"], "function", ["None"], ["", "def", "_expand_binary_labels", "(", "labels", ",", "label_weights", ",", "label_channels", ")", ":", "\n", "    ", "bin_labels", "=", "labels", ".", "new_full", "(", "(", "labels", ".", "size", "(", "0", ")", ",", "label_channels", ")", ",", "0", ")", "\n", "inds", "=", "torch", ".", "nonzero", "(", "labels", ">=", "1", ")", ".", "squeeze", "(", ")", "\n", "if", "inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "        ", "bin_labels", "[", "inds", ",", "labels", "[", "inds", "]", "-", "1", "]", "=", "1", "\n", "", "if", "label_weights", "is", "None", ":", "\n", "        ", "bin_label_weights", "=", "None", "\n", "", "else", ":", "\n", "        ", "bin_label_weights", "=", "label_weights", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "\n", "label_weights", ".", "size", "(", "0", ")", ",", "label_channels", ")", "\n", "", "return", "bin_labels", ",", "bin_label_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.cross_entropy_loss.binary_cross_entropy": [[35, 52], ["torch.binary_cross_entropy_with_logits", "utils.weight_reduce_loss", "pred.dim", "label.dim", "cross_entropy_loss._expand_binary_labels", "weight.float.float", "label.float", "pred.size"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.losses.utils.weight_reduce_loss", "home.repos.pwc.inspect_result.twangnh_SimCal.losses.cross_entropy_loss._expand_binary_labels"], ["", "def", "binary_cross_entropy", "(", "pred", ",", "\n", "label", ",", "\n", "weight", "=", "None", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "avg_factor", "=", "None", ")", ":", "\n", "    ", "if", "pred", ".", "dim", "(", ")", "!=", "label", ".", "dim", "(", ")", ":", "\n", "        ", "label", ",", "weight", "=", "_expand_binary_labels", "(", "label", ",", "weight", ",", "pred", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "# weighted element-wise losses", "\n", "", "if", "weight", "is", "not", "None", ":", "\n", "        ", "weight", "=", "weight", ".", "float", "(", ")", "\n", "", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "pred", ",", "label", ".", "float", "(", ")", ",", "weight", ",", "reduction", "=", "'none'", ")", "\n", "# do the reduction for the weighted loss", "\n", "loss", "=", "weight_reduce_loss", "(", "loss", ",", "reduction", "=", "reduction", ",", "avg_factor", "=", "avg_factor", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.cross_entropy_loss.mask_cross_entropy": [[54, 62], ["torch.arange", "torch.arange", "torch.arange", "pred[].squeeze", "pred.size", "torch.binary_cross_entropy_with_logits"], "function", ["None"], ["", "def", "mask_cross_entropy", "(", "pred", ",", "target", ",", "label", ",", "reduction", "=", "'mean'", ",", "avg_factor", "=", "None", ")", ":", "\n", "# TODO: handle these two reserved arguments", "\n", "    ", "assert", "reduction", "==", "'mean'", "and", "avg_factor", "is", "None", "\n", "num_rois", "=", "pred", ".", "size", "(", ")", "[", "0", "]", "\n", "inds", "=", "torch", ".", "arange", "(", "0", ",", "num_rois", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "pred", ".", "device", ")", "\n", "pred_slice", "=", "pred", "[", "inds", ",", "label", "]", ".", "squeeze", "(", "1", ")", "\n", "return", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "pred_slice", ",", "target", ",", "reduction", "=", "'mean'", ")", "[", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.smooth_l1_loss.SmoothL1Loss.__init__": [[21, 26], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "beta", "=", "1.0", ",", "reduction", "=", "'mean'", ",", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "SmoothL1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.smooth_l1_loss.SmoothL1Loss.forward": [[27, 46], ["smooth_l1_loss.smooth_l1_loss"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.losses.smooth_l1_loss.smooth_l1_loss"], ["", "def", "forward", "(", "self", ",", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", "=", "None", ",", "\n", "avg_factor", "=", "None", ",", "\n", "reduction_override", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "assert", "reduction_override", "in", "(", "None", ",", "'none'", ",", "'mean'", ",", "'sum'", ")", "\n", "reduction", "=", "(", "\n", "reduction_override", "if", "reduction_override", "else", "self", ".", "reduction", ")", "\n", "loss_bbox", "=", "self", ".", "loss_weight", "*", "smooth_l1_loss", "(", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", ",", "\n", "beta", "=", "self", ".", "beta", ",", "\n", "reduction", "=", "reduction", ",", "\n", "avg_factor", "=", "avg_factor", ",", "\n", "**", "kwargs", ")", "\n", "return", "loss_bbox", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.losses.smooth_l1_loss.smooth_l1_loss": [[8, 16], ["torch.abs", "torch.abs", "torch.where", "torch.where", "pred.size", "target.size", "target.numel"], "function", ["None"], ["@", "weighted_loss", "\n", "def", "smooth_l1_loss", "(", "pred", ",", "target", ",", "beta", "=", "1.0", ")", ":", "\n", "    ", "assert", "beta", ">", "0", "\n", "assert", "pred", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", "and", "target", ".", "numel", "(", ")", ">", "0", "\n", "diff", "=", "torch", ".", "abs", "(", "pred", "-", "target", ")", "\n", "loss", "=", "torch", ".", "where", "(", "diff", "<", "beta", ",", "0.5", "*", "diff", "*", "diff", "/", "beta", ",", "\n", "diff", "-", "0.5", "*", "beta", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.auto_fp16": [[9, 84], ["functools.wraps", "inspect.getfullargspec", "old_func", "isinstance", "TypeError", "old_func", "enumerate", "kwargs.items", "utils.cast_tensor_type", "hasattr", "len", "new_args.append", "new_args.append", "utils.cast_tensor_type", "utils.cast_tensor_type"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.utils.cast_tensor_type"], ["def", "auto_fp16", "(", "apply_to", "=", "None", ",", "out_fp32", "=", "False", ")", ":", "\n", "    ", "\"\"\"Decorator to enable fp16 training automatically.\n\n    This decorator is useful when you write custom modules and want to support\n    mixed precision training. If inputs arguments are fp32 tensors, they will\n    be converted to fp16 automatically. Arguments other than fp32 tensors are\n    ignored.\n\n    Args:\n        apply_to (Iterable, optional): The argument names to be converted.\n            `None` indicates all arguments.\n        out_fp32 (bool): Whether to convert the output back to fp32.\n\n    :Example:\n\n        class MyModule1(nn.Module)\n\n            # Convert x and y to fp16\n            @auto_fp16()\n            def forward(self, x, y):\n                pass\n\n        class MyModule2(nn.Module):\n\n            # convert pred to fp16\n            @auto_fp16(apply_to=('pred', ))\n            def do_something(self, pred, others):\n                pass\n    \"\"\"", "\n", "\n", "def", "auto_fp16_wrapper", "(", "old_func", ")", ":", "\n", "\n", "        ", "@", "functools", ".", "wraps", "(", "old_func", ")", "\n", "def", "new_func", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# check if the module has set the attribute `fp16_enabled`, if not,", "\n", "# just fallback to the original method.", "\n", "            ", "if", "not", "isinstance", "(", "args", "[", "0", "]", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "                ", "raise", "TypeError", "(", "'@auto_fp16 can only be used to decorate the '", "\n", "'method of nn.Module'", ")", "\n", "", "if", "not", "(", "hasattr", "(", "args", "[", "0", "]", ",", "'fp16_enabled'", ")", "and", "args", "[", "0", "]", ".", "fp16_enabled", ")", ":", "\n", "                ", "return", "old_func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# get the arg spec of the decorated method", "\n", "", "args_info", "=", "getfullargspec", "(", "old_func", ")", "\n", "# get the argument names to be casted", "\n", "args_to_cast", "=", "args_info", ".", "args", "if", "apply_to", "is", "None", "else", "apply_to", "\n", "# convert the args that need to be processed", "\n", "new_args", "=", "[", "]", "\n", "# NOTE: default args are not taken into consideration", "\n", "if", "args", ":", "\n", "                ", "arg_names", "=", "args_info", ".", "args", "[", ":", "len", "(", "args", ")", "]", "\n", "for", "i", ",", "arg_name", "in", "enumerate", "(", "arg_names", ")", ":", "\n", "                    ", "if", "arg_name", "in", "args_to_cast", ":", "\n", "                        ", "new_args", ".", "append", "(", "\n", "cast_tensor_type", "(", "args", "[", "i", "]", ",", "torch", ".", "float", ",", "torch", ".", "half", ")", ")", "\n", "", "else", ":", "\n", "                        ", "new_args", ".", "append", "(", "args", "[", "i", "]", ")", "\n", "# convert the kwargs that need to be processed", "\n", "", "", "", "new_kwargs", "=", "{", "}", "\n", "if", "kwargs", ":", "\n", "                ", "for", "arg_name", ",", "arg_value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                    ", "if", "arg_name", "in", "args_to_cast", ":", "\n", "                        ", "new_kwargs", "[", "arg_name", "]", "=", "cast_tensor_type", "(", "\n", "arg_value", ",", "torch", ".", "float", ",", "torch", ".", "half", ")", "\n", "", "else", ":", "\n", "                        ", "new_kwargs", "[", "arg_name", "]", "=", "arg_value", "\n", "# apply converted arguments to the decorated method", "\n", "", "", "", "output", "=", "old_func", "(", "*", "new_args", ",", "**", "new_kwargs", ")", "\n", "# cast the results back to fp32 if necessary", "\n", "if", "out_fp32", ":", "\n", "                ", "output", "=", "cast_tensor_type", "(", "output", ",", "torch", ".", "half", ",", "torch", ".", "float", ")", "\n", "", "return", "output", "\n", "\n", "", "return", "new_func", "\n", "\n", "", "return", "auto_fp16_wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.decorators.force_fp32": [[86, 161], ["functools.wraps", "inspect.getfullargspec", "dict", "old_func", "isinstance", "TypeError", "old_func", "enumerate", "kwargs.items", "utils.cast_tensor_type", "hasattr", "len", "new_args.append", "new_args.append", "utils.cast_tensor_type", "utils.cast_tensor_type"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.utils.cast_tensor_type"], ["", "def", "force_fp32", "(", "apply_to", "=", "None", ",", "out_fp16", "=", "False", ")", ":", "\n", "    ", "\"\"\"Decorator to convert input arguments to fp32 in force.\n\n    This decorator is useful when you write custom modules and want to support\n    mixed precision training. If there are some inputs that must be processed\n    in fp32 mode, then this decorator can handle it. If inputs arguments are\n    fp16 tensors, they will be converted to fp32 automatically. Arguments other\n    than fp16 tensors are ignored.\n\n    Args:\n        apply_to (Iterable, optional): The argument names to be converted.\n            `None` indicates all arguments.\n        out_fp16 (bool): Whether to convert the output back to fp16.\n\n    :Example:\n\n        class MyModule1(nn.Module)\n\n            # Convert x and y to fp32\n            @force_fp32()\n            def loss(self, x, y):\n                pass\n\n        class MyModule2(nn.Module):\n\n            # convert pred to fp32\n            @force_fp32(apply_to=('pred', ))\n            def post_process(self, pred, others):\n                pass\n    \"\"\"", "\n", "\n", "def", "force_fp32_wrapper", "(", "old_func", ")", ":", "\n", "\n", "        ", "@", "functools", ".", "wraps", "(", "old_func", ")", "\n", "def", "new_func", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# check if the module has set the attribute `fp16_enabled`, if not,", "\n", "# just fallback to the original method.", "\n", "            ", "if", "not", "isinstance", "(", "args", "[", "0", "]", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "                ", "raise", "TypeError", "(", "'@force_fp32 can only be used to decorate the '", "\n", "'method of nn.Module'", ")", "\n", "", "if", "not", "(", "hasattr", "(", "args", "[", "0", "]", ",", "'fp16_enabled'", ")", "and", "args", "[", "0", "]", ".", "fp16_enabled", ")", ":", "\n", "                ", "return", "old_func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# get the arg spec of the decorated method", "\n", "", "args_info", "=", "getfullargspec", "(", "old_func", ")", "\n", "# get the argument names to be casted", "\n", "args_to_cast", "=", "args_info", ".", "args", "if", "apply_to", "is", "None", "else", "apply_to", "\n", "# convert the args that need to be processed", "\n", "new_args", "=", "[", "]", "\n", "if", "args", ":", "\n", "                ", "arg_names", "=", "args_info", ".", "args", "[", ":", "len", "(", "args", ")", "]", "\n", "for", "i", ",", "arg_name", "in", "enumerate", "(", "arg_names", ")", ":", "\n", "                    ", "if", "arg_name", "in", "args_to_cast", ":", "\n", "                        ", "new_args", ".", "append", "(", "\n", "cast_tensor_type", "(", "args", "[", "i", "]", ",", "torch", ".", "half", ",", "torch", ".", "float", ")", ")", "\n", "", "else", ":", "\n", "                        ", "new_args", ".", "append", "(", "args", "[", "i", "]", ")", "\n", "# convert the kwargs that need to be processed", "\n", "", "", "", "new_kwargs", "=", "dict", "(", ")", "\n", "if", "kwargs", ":", "\n", "                ", "for", "arg_name", ",", "arg_value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                    ", "if", "arg_name", "in", "args_to_cast", ":", "\n", "                        ", "new_kwargs", "[", "arg_name", "]", "=", "cast_tensor_type", "(", "\n", "arg_value", ",", "torch", ".", "half", ",", "torch", ".", "float", ")", "\n", "", "else", ":", "\n", "                        ", "new_kwargs", "[", "arg_name", "]", "=", "arg_value", "\n", "# apply converted arguments to the decorated method", "\n", "", "", "", "output", "=", "old_func", "(", "*", "new_args", ",", "**", "new_kwargs", ")", "\n", "# cast the results back to fp32 if necessary", "\n", "if", "out_fp16", ":", "\n", "                ", "output", "=", "cast_tensor_type", "(", "output", ",", "torch", ".", "float", ",", "torch", ".", "half", ")", "\n", "", "return", "output", "\n", "\n", "", "return", "new_func", "\n", "\n", "", "return", "force_fp32_wrapper", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.hooks.Fp16OptimizerHook.__init__": [[27, 38], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "grad_clip", "=", "None", ",", "\n", "coalesce", "=", "True", ",", "\n", "bucket_size_mb", "=", "-", "1", ",", "\n", "loss_scale", "=", "512.", ",", "\n", "distributed", "=", "True", ")", ":", "\n", "        ", "self", ".", "grad_clip", "=", "grad_clip", "\n", "self", ".", "coalesce", "=", "coalesce", "\n", "self", ".", "bucket_size_mb", "=", "bucket_size_mb", "\n", "self", ".", "loss_scale", "=", "loss_scale", "\n", "self", ".", "distributed", "=", "distributed", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.hooks.Fp16OptimizerHook.before_run": [[39, 45], ["copy.deepcopy", "hooks.wrap_fp16_model"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.hooks.wrap_fp16_model"], ["", "def", "before_run", "(", "self", ",", "runner", ")", ":", "\n", "# keep a copy of fp32 weights", "\n", "        ", "runner", ".", "optimizer", ".", "param_groups", "=", "copy", ".", "deepcopy", "(", "\n", "runner", ".", "optimizer", ".", "param_groups", ")", "\n", "# convert model to fp16", "\n", "wrap_fp16_model", "(", "runner", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.hooks.Fp16OptimizerHook.copy_grads_to_fp32": [[46, 53], ["zip", "fp16_net.parameters", "fp32_param.grad.copy_", "fp32_param.data.new", "fp32_param.size"], "methods", ["None"], ["", "def", "copy_grads_to_fp32", "(", "self", ",", "fp16_net", ",", "fp32_weights", ")", ":", "\n", "        ", "\"\"\"Copy gradients from fp16 model to fp32 weight copy.\"\"\"", "\n", "for", "fp32_param", ",", "fp16_param", "in", "zip", "(", "fp32_weights", ",", "fp16_net", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "fp16_param", ".", "grad", "is", "not", "None", ":", "\n", "                ", "if", "fp32_param", ".", "grad", "is", "None", ":", "\n", "                    ", "fp32_param", ".", "grad", "=", "fp32_param", ".", "data", ".", "new", "(", "fp32_param", ".", "size", "(", ")", ")", "\n", "", "fp32_param", ".", "grad", ".", "copy_", "(", "fp16_param", ".", "grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.hooks.Fp16OptimizerHook.copy_params_to_fp16": [[54, 58], ["zip", "fp16_net.parameters", "fp16_param.data.copy_"], "methods", ["None"], ["", "", "", "def", "copy_params_to_fp16", "(", "self", ",", "fp16_net", ",", "fp32_weights", ")", ":", "\n", "        ", "\"\"\"Copy updated params from fp32 weight copy to fp16 model.\"\"\"", "\n", "for", "fp16_param", ",", "fp32_param", "in", "zip", "(", "fp16_net", ".", "parameters", "(", ")", ",", "fp32_weights", ")", ":", "\n", "            ", "fp16_param", ".", "data", ".", "copy_", "(", "fp32_param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.hooks.Fp16OptimizerHook.after_train_iter": [[59, 84], ["runner.model.zero_grad", "runner.optimizer.zero_grad", "scaled_loss.backward", "hooks.Fp16OptimizerHook.copy_grads_to_fp32", "runner.optimizer.step", "hooks.Fp16OptimizerHook.copy_params_to_fp16", "utils.dist_utils.allreduce_grads", "hooks.Fp16OptimizerHook.clip_grads", "param.grad.div_"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.roi_align.roi_align.RoIAlignFunction.backward", "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.hooks.Fp16OptimizerHook.copy_grads_to_fp32", "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.hooks.Fp16OptimizerHook.copy_params_to_fp16", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.dist_utils.allreduce_grads"], ["", "", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "# clear grads of last iteration", "\n", "        ", "runner", ".", "model", ".", "zero_grad", "(", ")", "\n", "runner", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "# scale the loss value", "\n", "scaled_loss", "=", "runner", ".", "outputs", "[", "'loss'", "]", "*", "self", ".", "loss_scale", "\n", "scaled_loss", ".", "backward", "(", ")", "\n", "# copy fp16 grads in the model to fp32 params in the optimizer", "\n", "fp32_weights", "=", "[", "]", "\n", "for", "param_group", "in", "runner", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "fp32_weights", "+=", "param_group", "[", "'params'", "]", "\n", "", "self", ".", "copy_grads_to_fp32", "(", "runner", ".", "model", ",", "fp32_weights", ")", "\n", "# allreduce grads", "\n", "if", "self", ".", "distributed", ":", "\n", "            ", "allreduce_grads", "(", "fp32_weights", ",", "self", ".", "coalesce", ",", "self", ".", "bucket_size_mb", ")", "\n", "# scale the gradients back", "\n", "", "for", "param", "in", "fp32_weights", ":", "\n", "            ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "                ", "param", ".", "grad", ".", "div_", "(", "self", ".", "loss_scale", ")", "\n", "", "", "if", "self", ".", "grad_clip", "is", "not", "None", ":", "\n", "            ", "self", ".", "clip_grads", "(", "fp32_weights", ")", "\n", "# update fp32 params", "\n", "", "runner", ".", "optimizer", ".", "step", "(", ")", "\n", "# copy fp32 params to the fp16 model", "\n", "self", ".", "copy_params_to_fp16", "(", "runner", ".", "model", ",", "fp32_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.hooks.wrap_fp16_model": [[86, 95], ["model.half", "hooks.patch_norm_fp32", "model.modules", "hasattr"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.hooks.patch_norm_fp32"], ["", "", "def", "wrap_fp16_model", "(", "model", ")", ":", "\n", "# convert model to fp16", "\n", "    ", "model", ".", "half", "(", ")", "\n", "# patch the normalization layers to make it work in fp32 mode", "\n", "patch_norm_fp32", "(", "model", ")", "\n", "# set `fp16_enabled` flag", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "'fp16_enabled'", ")", ":", "\n", "            ", "m", ".", "fp16_enabled", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.hooks.patch_norm_fp32": [[97, 105], ["isinstance", "module.children", "module.float", "hooks.patch_forward_method", "hooks.patch_norm_fp32"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.hooks.patch_forward_method", "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.hooks.patch_norm_fp32"], ["", "", "", "def", "patch_norm_fp32", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "        ", "module", ".", "float", "(", ")", "\n", "module", ".", "forward", "=", "patch_forward_method", "(", "module", ".", "forward", ",", "torch", ".", "half", ",", "\n", "torch", ".", "float", ")", "\n", "", "for", "child", "in", "module", ".", "children", "(", ")", ":", "\n", "        ", "patch_norm_fp32", "(", "child", ")", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.hooks.patch_forward_method": [[107, 128], ["func", "utils.cast_tensor_type", "utils.cast_tensor_type", "utils.cast_tensor_type", "torch.half", "torch.half", "torch.float", "torch.float"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.utils.cast_tensor_type"], ["", "def", "patch_forward_method", "(", "func", ",", "src_type", ",", "dst_type", ",", "convert_output", "=", "True", ")", ":", "\n", "    ", "\"\"\"Patch the forward method of a module.\n\n    Args:\n        func (callable): The original forward method.\n        src_type (torch.dtype): Type of input arguments to be converted from.\n        dst_type (torch.dtype): Type of input arguments to be converted to.\n        convert_output (bool): Whether to convert the output back to src_type.\n\n    Returns:\n        callable: The patched forward method.\n    \"\"\"", "\n", "\n", "def", "new_forward", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "output", "=", "func", "(", "*", "cast_tensor_type", "(", "args", ",", "src_type", ",", "dst_type", ")", ",", "\n", "**", "cast_tensor_type", "(", "kwargs", ",", "src_type", ",", "dst_type", ")", ")", "\n", "if", "convert_output", ":", "\n", "            ", "output", "=", "cast_tensor_type", "(", "output", ",", "dst_type", ",", "src_type", ")", "\n", "", "return", "output", "\n", "\n", "", "return", "new_forward", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.utils.cast_tensor_type": [[7, 24], ["isinstance", "inputs.to", "isinstance", "isinstance", "isinstance", "isinstance", "type", "utils.cast_tensor_type", "type", "inputs.items", "utils.cast_tensor_type"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.utils.cast_tensor_type"], ["\n", "\n", "def", "to_tensor", "(", "data", ")", ":", "\n", "    ", "\"\"\"Convert objects of various python types to :obj:`torch.Tensor`.\n\n    Supported types are: :class:`numpy.ndarray`, :class:`torch.Tensor`,\n    :class:`Sequence`, :class:`int` and :class:`float`.\n    \"\"\"", "\n", "if", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "Sequence", ")", "and", "not", "mmcv", ".", "is_str", "(", "data", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "int", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "data", "]", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "[", "data", "]", ")", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.post_processing.merge_augs.merge_aug_proposals": [[8, 38], ["zip", "torch.cat", "mmdet.ops.nms", "scores.sort", "min", "proposals.clone", "bbox.bbox_mapping_back", "recovered_proposals.append"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.nms.nms_wrapper.nms", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox_mapping_back"], ["def", "merge_aug_proposals", "(", "aug_proposals", ",", "img_metas", ",", "rpn_test_cfg", ")", ":", "\n", "    ", "\"\"\"Merge augmented proposals (multiscale, flip, etc.)\n\n    Args:\n        aug_proposals (list[Tensor]): proposals from different testing\n            schemes, shape (n, 5). Note that they are not rescaled to the\n            original image size.\n        img_metas (list[dict]): image info including \"shape_scale\" and \"flip\".\n        rpn_test_cfg (dict): rpn test config.\n\n    Returns:\n        Tensor: shape (n, 4), proposals corresponding to original image scale.\n    \"\"\"", "\n", "recovered_proposals", "=", "[", "]", "\n", "for", "proposals", ",", "img_info", "in", "zip", "(", "aug_proposals", ",", "img_metas", ")", ":", "\n", "        ", "img_shape", "=", "img_info", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_info", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_info", "[", "'flip'", "]", "\n", "_proposals", "=", "proposals", ".", "clone", "(", ")", "\n", "_proposals", "[", ":", ",", ":", "4", "]", "=", "bbox_mapping_back", "(", "_proposals", "[", ":", ",", ":", "4", "]", ",", "img_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "recovered_proposals", ".", "append", "(", "_proposals", ")", "\n", "", "aug_proposals", "=", "torch", ".", "cat", "(", "recovered_proposals", ",", "dim", "=", "0", ")", "\n", "merged_proposals", ",", "_", "=", "nms", "(", "aug_proposals", ",", "rpn_test_cfg", ".", "nms_thr", ")", "\n", "scores", "=", "merged_proposals", "[", ":", ",", "4", "]", "\n", "_", ",", "order", "=", "scores", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "num", "=", "min", "(", "rpn_test_cfg", ".", "max_num", ",", "merged_proposals", ".", "shape", "[", "0", "]", ")", "\n", "order", "=", "order", "[", ":", "num", "]", "\n", "merged_proposals", "=", "merged_proposals", "[", "order", ",", ":", "]", "\n", "return", "merged_proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.post_processing.merge_augs.merge_aug_bboxes": [[40, 65], ["zip", "torch.stack().mean", "bbox.bbox_mapping_back", "recovered_bboxes.append", "torch.stack().mean", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox_mapping_back"], ["", "def", "merge_aug_bboxes", "(", "aug_bboxes", ",", "aug_scores", ",", "img_metas", ",", "rcnn_test_cfg", ")", ":", "\n", "    ", "\"\"\"Merge augmented detection bboxes and scores.\n\n    Args:\n        aug_bboxes (list[Tensor]): shape (n, 4*#class)\n        aug_scores (list[Tensor] or None): shape (n, #class)\n        img_shapes (list[Tensor]): shape (3, ).\n        rcnn_test_cfg (dict): rcnn test config.\n\n    Returns:\n        tuple: (bboxes, scores)\n    \"\"\"", "\n", "recovered_bboxes", "=", "[", "]", "\n", "for", "bboxes", ",", "img_info", "in", "zip", "(", "aug_bboxes", ",", "img_metas", ")", ":", "\n", "        ", "img_shape", "=", "img_info", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_info", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_info", "[", "0", "]", "[", "'flip'", "]", "\n", "bboxes", "=", "bbox_mapping_back", "(", "bboxes", ",", "img_shape", ",", "scale_factor", ",", "flip", ")", "\n", "recovered_bboxes", ".", "append", "(", "bboxes", ")", "\n", "", "bboxes", "=", "torch", ".", "stack", "(", "recovered_bboxes", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "if", "aug_scores", "is", "None", ":", "\n", "        ", "return", "bboxes", "\n", "", "else", ":", "\n", "        ", "scores", "=", "torch", ".", "stack", "(", "aug_scores", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "return", "bboxes", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.post_processing.merge_augs.merge_aug_scores": [[67, 73], ["isinstance", "torch.mean", "numpy.mean", "torch.stack"], "function", ["None"], ["", "", "def", "merge_aug_scores", "(", "aug_scores", ")", ":", "\n", "    ", "\"\"\"Merge augmented bbox scores.\"\"\"", "\n", "if", "isinstance", "(", "aug_scores", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "aug_scores", ")", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "mean", "(", "aug_scores", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.post_processing.merge_augs.merge_aug_masks": [[75, 96], ["numpy.mean", "numpy.average", "zip", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "merge_aug_masks", "(", "aug_masks", ",", "img_metas", ",", "rcnn_test_cfg", ",", "weights", "=", "None", ")", ":", "\n", "    ", "\"\"\"Merge augmented mask prediction.\n\n    Args:\n        aug_masks (list[ndarray]): shape (n, #class, h, w)\n        img_shapes (list[ndarray]): shape (3, ).\n        rcnn_test_cfg (dict): rcnn test config.\n\n    Returns:\n        tuple: (bboxes, scores)\n    \"\"\"", "\n", "recovered_masks", "=", "[", "\n", "mask", "if", "not", "img_info", "[", "0", "]", "[", "'flip'", "]", "else", "mask", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "for", "mask", ",", "img_info", "in", "zip", "(", "aug_masks", ",", "img_metas", ")", "\n", "]", "\n", "if", "weights", "is", "None", ":", "\n", "        ", "merged_masks", "=", "np", ".", "mean", "(", "recovered_masks", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "merged_masks", "=", "np", ".", "average", "(", "\n", "np", ".", "array", "(", "recovered_masks", ")", ",", "axis", "=", "0", ",", "weights", "=", "np", ".", "array", "(", "weights", ")", ")", "\n", "", "return", "merged_masks", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.post_processing.bbox_nms.multiclass_nms": [[6, 66], ["nms_cfg.copy", "nms_cfg.copy.pop", "getattr", "range", "torch.cat", "getattr.", "multi_bboxes.new_full", "multi_bboxes.new_zeros.append", "multi_bboxes.new_zeros.append", "torch.cat", "torch.cat", "multi_bboxes.new_zeros", "multi_bboxes.new_zeros", "cls_inds.any", "bboxes[].sort"], "function", ["None"], ["def", "multiclass_nms", "(", "multi_bboxes", ",", "\n", "multi_scores", ",", "\n", "score_thr", ",", "\n", "nms_cfg", ",", "\n", "max_num", "=", "-", "1", ",", "\n", "score_factors", "=", "None", ")", ":", "\n", "    ", "\"\"\"NMS for multi-class bboxes.\n\n    Args:\n        multi_bboxes (Tensor): shape (n, #class*4) or (n, 4)\n        multi_scores (Tensor): shape (n, #class)\n        score_thr (float): bbox threshold, bboxes with scores lower than it\n            will not be considered.\n        nms_thr (float): NMS IoU threshold\n        max_num (int): if there are more than max_num bboxes after NMS,\n            only top max_num will be kept.\n        score_factors (Tensor): The factors multiplied to scores before\n            applying NMS\n\n    Returns:\n        tuple: (bboxes, labels), tensors of shape (k, 5) and (k, 1). Labels\n            are 0-based.\n    \"\"\"", "\n", "num_classes", "=", "multi_scores", ".", "shape", "[", "1", "]", "\n", "bboxes", ",", "labels", "=", "[", "]", ",", "[", "]", "\n", "nms_cfg_", "=", "nms_cfg", ".", "copy", "(", ")", "\n", "nms_type", "=", "nms_cfg_", ".", "pop", "(", "'type'", ",", "'nms'", ")", "\n", "nms_op", "=", "getattr", "(", "nms_wrapper", ",", "nms_type", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "num_classes", ")", ":", "\n", "        ", "cls_inds", "=", "multi_scores", "[", ":", ",", "i", "]", ">", "score_thr", "\n", "if", "not", "cls_inds", ".", "any", "(", ")", ":", "\n", "            ", "continue", "\n", "# get bboxes and scores of this class", "\n", "", "if", "multi_bboxes", ".", "shape", "[", "1", "]", "==", "4", ":", "\n", "            ", "_bboxes", "=", "multi_bboxes", "[", "cls_inds", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "_bboxes", "=", "multi_bboxes", "[", "cls_inds", ",", "i", "*", "4", ":", "(", "i", "+", "1", ")", "*", "4", "]", "\n", "", "_scores", "=", "multi_scores", "[", "cls_inds", ",", "i", "]", "\n", "if", "score_factors", "is", "not", "None", ":", "\n", "            ", "_scores", "*=", "score_factors", "[", "cls_inds", "]", "\n", "", "cls_dets", "=", "torch", ".", "cat", "(", "[", "_bboxes", ",", "_scores", "[", ":", ",", "None", "]", "]", ",", "dim", "=", "1", ")", "\n", "cls_dets", ",", "_", "=", "nms_op", "(", "cls_dets", ",", "**", "nms_cfg_", ")", "\n", "cls_labels", "=", "multi_bboxes", ".", "new_full", "(", "(", "cls_dets", ".", "shape", "[", "0", "]", ",", ")", ",", "\n", "i", "-", "1", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "bboxes", ".", "append", "(", "cls_dets", ")", "\n", "labels", ".", "append", "(", "cls_labels", ")", "\n", "", "if", "bboxes", ":", "\n", "        ", "bboxes", "=", "torch", ".", "cat", "(", "bboxes", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ")", "\n", "if", "bboxes", ".", "shape", "[", "0", "]", ">", "max_num", ":", "\n", "            ", "_", ",", "inds", "=", "bboxes", "[", ":", ",", "-", "1", "]", ".", "sort", "(", "descending", "=", "True", ")", "\n", "inds", "=", "inds", "[", ":", "max_num", "]", "\n", "bboxes", "=", "bboxes", "[", "inds", "]", "\n", "labels", "=", "labels", "[", "inds", "]", "\n", "", "", "else", ":", "\n", "        ", "bboxes", "=", "multi_bboxes", ".", "new_zeros", "(", "(", "0", ",", "5", ")", ")", "\n", "labels", "=", "multi_bboxes", ".", "new_zeros", "(", "(", "0", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "", "return", "bboxes", ",", "labels", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask.mask_target.mask_target": [[7, 14], ["map", "torch.cat", "list", "range", "len"], "function", ["None"], ["def", "mask_target", "(", "pos_proposals_list", ",", "pos_assigned_gt_inds_list", ",", "gt_masks_list", ",", "\n", "cfg", ")", ":", "\n", "    ", "cfg_list", "=", "[", "cfg", "for", "_", "in", "range", "(", "len", "(", "pos_proposals_list", ")", ")", "]", "\n", "mask_targets", "=", "map", "(", "mask_target_single", ",", "pos_proposals_list", ",", "\n", "pos_assigned_gt_inds_list", ",", "gt_masks_list", ",", "cfg_list", ")", "\n", "mask_targets", "=", "torch", ".", "cat", "(", "list", "(", "mask_targets", ")", ")", "\n", "return", "mask_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask.mask_target.mask_target_single": [[16, 39], ["torch.nn.modules.utils._pair", "pos_proposals.size", "pos_proposals.cpu().numpy", "pos_assigned_gt_inds.cpu().numpy.cpu().numpy", "range", "torch.from_numpy().float().to", "pos_proposals.new_zeros", "proposals_np[].astype", "numpy.maximum", "numpy.maximum", "mmcv.imresize", "pos_proposals.new_zeros.append", "pos_proposals.cpu", "pos_assigned_gt_inds.cpu().numpy.cpu", "torch.from_numpy().float", "torch.from_numpy", "numpy.stack"], "function", ["None"], ["", "def", "mask_target_single", "(", "pos_proposals", ",", "pos_assigned_gt_inds", ",", "gt_masks", ",", "cfg", ")", ":", "\n", "    ", "mask_size", "=", "_pair", "(", "cfg", ".", "mask_size", ")", "\n", "num_pos", "=", "pos_proposals", ".", "size", "(", "0", ")", "\n", "mask_targets", "=", "[", "]", "\n", "if", "num_pos", ">", "0", ":", "\n", "        ", "proposals_np", "=", "pos_proposals", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pos_assigned_gt_inds", "=", "pos_assigned_gt_inds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "num_pos", ")", ":", "\n", "            ", "gt_mask", "=", "gt_masks", "[", "pos_assigned_gt_inds", "[", "i", "]", "]", "\n", "bbox", "=", "proposals_np", "[", "i", ",", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bbox", "\n", "w", "=", "np", ".", "maximum", "(", "x2", "-", "x1", "+", "1", ",", "1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "y2", "-", "y1", "+", "1", ",", "1", ")", "\n", "# mask is uint8 both before and after resizing", "\n", "# mask_size (h, w) to (w, h)", "\n", "target", "=", "mmcv", ".", "imresize", "(", "gt_mask", "[", "y1", ":", "y1", "+", "h", ",", "x1", ":", "x1", "+", "w", "]", ",", "\n", "mask_size", "[", ":", ":", "-", "1", "]", ")", "\n", "mask_targets", ".", "append", "(", "target", ")", "\n", "", "mask_targets", "=", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "mask_targets", ")", ")", ".", "float", "(", ")", ".", "to", "(", "\n", "pos_proposals", ".", "device", ")", "\n", "", "else", ":", "\n", "        ", "mask_targets", "=", "pos_proposals", ".", "new_zeros", "(", "(", "0", ",", ")", "+", "mask_size", ")", "\n", "", "return", "mask_targets", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.mask.utils.split_combined_polys": [[4, 31], ["range", "len", "poly_lens[].tolist", "polys_per_mask[].tolist", "mmcv.slice_list", "mmcv.slice_list", "mask_polys_list.append"], "function", ["None"], ["import", "mmcv", "\n", "import", "numpy", "as", "np", "\n", "import", "torch", "\n", "\n", "\n", "def", "to_tensor", "(", "data", ")", ":", "\n", "    ", "\"\"\"Convert objects of various python types to :obj:`torch.Tensor`.\n\n    Supported types are: :class:`numpy.ndarray`, :class:`torch.Tensor`,\n    :class:`Sequence`, :class:`int` and :class:`float`.\n    \"\"\"", "\n", "if", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "Sequence", ")", "and", "not", "mmcv", ".", "is_str", "(", "data", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "int", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "data", "]", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "[", "data", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'type {} cannot be converted to tensor.'", ".", "format", "(", "\n", "type", "(", "data", ")", ")", ")", "\n", "\n", "\n", "", "", "def", "random_scale", "(", "img_scales", ",", "mode", "=", "'range'", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_generator.AnchorGenerator.__init__": [[6, 13], ["torch.Tensor", "torch.Tensor", "anchor_generator.AnchorGenerator.gen_base_anchors"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_generator.AnchorGenerator.gen_base_anchors"], ["    ", "def", "__init__", "(", "self", ",", "base_size", ",", "scales", ",", "ratios", ",", "scale_major", "=", "True", ",", "ctr", "=", "None", ")", ":", "\n", "        ", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "scales", "=", "torch", ".", "Tensor", "(", "scales", ")", "\n", "self", ".", "ratios", "=", "torch", ".", "Tensor", "(", "ratios", ")", "\n", "self", ".", "scale_major", "=", "scale_major", "\n", "self", ".", "ctr", "=", "ctr", "\n", "self", ".", "base_anchors", "=", "self", ".", "gen_base_anchors", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_generator.AnchorGenerator.num_base_anchors": [[14, 17], ["anchor_generator.AnchorGenerator.base_anchors.size"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_base_anchors", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base_anchors", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_generator.AnchorGenerator.gen_base_anchors": [[18, 46], ["torch.sqrt", "torch.stack().round", "torch.stack"], "methods", ["None"], ["", "def", "gen_base_anchors", "(", "self", ")", ":", "\n", "        ", "w", "=", "self", ".", "base_size", "\n", "h", "=", "self", ".", "base_size", "\n", "if", "self", ".", "ctr", "is", "None", ":", "\n", "            ", "x_ctr", "=", "0.5", "*", "(", "w", "-", "1", ")", "\n", "y_ctr", "=", "0.5", "*", "(", "h", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x_ctr", ",", "y_ctr", "=", "self", ".", "ctr", "\n", "\n", "", "h_ratios", "=", "torch", ".", "sqrt", "(", "self", ".", "ratios", ")", "\n", "w_ratios", "=", "1", "/", "h_ratios", "\n", "if", "self", ".", "scale_major", ":", "\n", "            ", "ws", "=", "(", "w", "*", "w_ratios", "[", ":", ",", "None", "]", "*", "self", ".", "scales", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "hs", "=", "(", "h", "*", "h_ratios", "[", ":", ",", "None", "]", "*", "self", ".", "scales", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "ws", "=", "(", "w", "*", "self", ".", "scales", "[", ":", ",", "None", "]", "*", "w_ratios", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "hs", "=", "(", "h", "*", "self", ".", "scales", "[", ":", ",", "None", "]", "*", "h_ratios", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "# yapf: disable", "\n", "", "base_anchors", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "x_ctr", "-", "0.5", "*", "(", "ws", "-", "1", ")", ",", "y_ctr", "-", "0.5", "*", "(", "hs", "-", "1", ")", ",", "\n", "x_ctr", "+", "0.5", "*", "(", "ws", "-", "1", ")", ",", "y_ctr", "+", "0.5", "*", "(", "hs", "-", "1", ")", "\n", "]", ",", "\n", "dim", "=", "-", "1", ")", ".", "round", "(", ")", "\n", "# yapf: enable", "\n", "\n", "return", "base_anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_generator.AnchorGenerator._meshgrid": [[47, 54], ["x.repeat", "y.view().repeat().view", "len", "y.view().repeat", "len", "y.view"], "methods", ["None"], ["", "def", "_meshgrid", "(", "self", ",", "x", ",", "y", ",", "row_major", "=", "True", ")", ":", "\n", "        ", "xx", "=", "x", ".", "repeat", "(", "len", "(", "y", ")", ")", "\n", "yy", "=", "y", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "len", "(", "x", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "row_major", ":", "\n", "            ", "return", "xx", ",", "yy", "\n", "", "else", ":", "\n", "            ", "return", "yy", ",", "xx", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_generator.AnchorGenerator.grid_anchors": [[55, 73], ["anchor_generator.AnchorGenerator.base_anchors.to", "anchor_generator.AnchorGenerator._meshgrid", "torch.stack", "shifts.type_as.type_as.type_as", "all_anchors.view.view.view", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_generator.AnchorGenerator._meshgrid"], ["", "", "def", "grid_anchors", "(", "self", ",", "featmap_size", ",", "stride", "=", "16", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "base_anchors", "=", "self", ".", "base_anchors", ".", "to", "(", "device", ")", "\n", "\n", "feat_h", ",", "feat_w", "=", "featmap_size", "\n", "shift_x", "=", "torch", ".", "arange", "(", "0", ",", "feat_w", ",", "device", "=", "device", ")", "*", "stride", "\n", "shift_y", "=", "torch", ".", "arange", "(", "0", ",", "feat_h", ",", "device", "=", "device", ")", "*", "stride", "\n", "shift_xx", ",", "shift_yy", "=", "self", ".", "_meshgrid", "(", "shift_x", ",", "shift_y", ")", "\n", "shifts", "=", "torch", ".", "stack", "(", "[", "shift_xx", ",", "shift_yy", ",", "shift_xx", ",", "shift_yy", "]", ",", "dim", "=", "-", "1", ")", "\n", "shifts", "=", "shifts", ".", "type_as", "(", "base_anchors", ")", "\n", "# first feat_w elements correspond to the first row of shifts", "\n", "# add A anchors (1, A, 4) to K shifts (K, 1, 4) to get", "\n", "# shifted anchors (K, A, 4), reshape to (K*A, 4)", "\n", "\n", "all_anchors", "=", "base_anchors", "[", "None", ",", ":", ",", ":", "]", "+", "shifts", "[", ":", ",", "None", ",", ":", "]", "\n", "all_anchors", "=", "all_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "# first A rows correspond to A anchors of (0, 0) in feature map,", "\n", "# then (0, 1), (0, 2), ...", "\n", "return", "all_anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_generator.AnchorGenerator.valid_flags": [[74, 87], ["torch.zeros", "torch.zeros", "anchor_generator.AnchorGenerator._meshgrid", "valid[].expand().contiguous().view", "valid[].expand().contiguous", "valid[].expand", "valid[].expand().contiguous().view.size"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_generator.AnchorGenerator._meshgrid"], ["", "def", "valid_flags", "(", "self", ",", "featmap_size", ",", "valid_size", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "feat_h", ",", "feat_w", "=", "featmap_size", "\n", "valid_h", ",", "valid_w", "=", "valid_size", "\n", "assert", "valid_h", "<=", "feat_h", "and", "valid_w", "<=", "feat_w", "\n", "valid_x", "=", "torch", ".", "zeros", "(", "feat_w", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "device", ")", "\n", "valid_y", "=", "torch", ".", "zeros", "(", "feat_h", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "device", ")", "\n", "valid_x", "[", ":", "valid_w", "]", "=", "1", "\n", "valid_y", "[", ":", "valid_h", "]", "=", "1", "\n", "valid_xx", ",", "valid_yy", "=", "self", ".", "_meshgrid", "(", "valid_x", ",", "valid_y", ")", "\n", "valid", "=", "valid_xx", "&", "valid_yy", "\n", "valid", "=", "valid", "[", ":", ",", "None", "]", ".", "expand", "(", "\n", "valid", ".", "size", "(", "0", ")", ",", "self", ".", "num_base_anchors", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "return", "valid", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_target.anchor_target": [[7, 77], ["len", "range", "utils.multi_apply", "any", "sum", "sum", "anchor_target.images_to_levels", "anchor_target.images_to_levels", "anchor_target.images_to_levels", "anchor_target.images_to_levels", "len", "len", "anchors.size", "torch.cat", "torch.cat", "len", "len", "max", "max", "range", "range", "inds.numel", "inds.numel"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.misc.multi_apply", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.guided_anchor_target.images_to_levels", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.guided_anchor_target.images_to_levels", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.guided_anchor_target.images_to_levels", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.guided_anchor_target.images_to_levels"], ["def", "anchor_target", "(", "anchor_list", ",", "\n", "valid_flag_list", ",", "\n", "gt_bboxes_list", ",", "\n", "img_metas", ",", "\n", "target_means", ",", "\n", "target_stds", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore_list", "=", "None", ",", "\n", "gt_labels_list", "=", "None", ",", "\n", "label_channels", "=", "1", ",", "\n", "sampling", "=", "True", ",", "\n", "unmap_outputs", "=", "True", ")", ":", "\n", "    ", "\"\"\"Compute regression and classification targets for anchors.\n\n    Args:\n        anchor_list (list[list]): Multi level anchors of each image.\n        valid_flag_list (list[list]): Multi level valid flags of each image.\n        gt_bboxes_list (list[Tensor]): Ground truth bboxes of each image.\n        img_metas (list[dict]): Meta info of each image.\n        target_means (Iterable): Mean value of regression targets.\n        target_stds (Iterable): Std value of regression targets.\n        cfg (dict): RPN train configs.\n\n    Returns:\n        tuple\n    \"\"\"", "\n", "num_imgs", "=", "len", "(", "img_metas", ")", "\n", "assert", "len", "(", "anchor_list", ")", "==", "len", "(", "valid_flag_list", ")", "==", "num_imgs", "\n", "\n", "# anchor number of multi levels", "\n", "num_level_anchors", "=", "[", "anchors", ".", "size", "(", "0", ")", "for", "anchors", "in", "anchor_list", "[", "0", "]", "]", "\n", "# concat all level anchors and flags to a single tensor", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "        ", "assert", "len", "(", "anchor_list", "[", "i", "]", ")", "==", "len", "(", "valid_flag_list", "[", "i", "]", ")", "\n", "anchor_list", "[", "i", "]", "=", "torch", ".", "cat", "(", "anchor_list", "[", "i", "]", ")", "\n", "valid_flag_list", "[", "i", "]", "=", "torch", ".", "cat", "(", "valid_flag_list", "[", "i", "]", ")", "\n", "\n", "# compute targets for each image", "\n", "", "if", "gt_bboxes_ignore_list", "is", "None", ":", "\n", "        ", "gt_bboxes_ignore_list", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "", "if", "gt_labels_list", "is", "None", ":", "\n", "        ", "gt_labels_list", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "", "(", "all_labels", ",", "all_label_weights", ",", "all_bbox_targets", ",", "all_bbox_weights", ",", "\n", "pos_inds_list", ",", "neg_inds_list", ")", "=", "multi_apply", "(", "\n", "anchor_target_single", ",", "\n", "anchor_list", ",", "\n", "valid_flag_list", ",", "\n", "gt_bboxes_list", ",", "\n", "gt_bboxes_ignore_list", ",", "\n", "gt_labels_list", ",", "\n", "img_metas", ",", "\n", "target_means", "=", "target_means", ",", "\n", "target_stds", "=", "target_stds", ",", "\n", "cfg", "=", "cfg", ",", "\n", "label_channels", "=", "label_channels", ",", "\n", "sampling", "=", "sampling", ",", "\n", "unmap_outputs", "=", "unmap_outputs", ")", "\n", "# no valid anchors", "\n", "if", "any", "(", "[", "labels", "is", "None", "for", "labels", "in", "all_labels", "]", ")", ":", "\n", "        ", "return", "None", "\n", "# sampled anchors of all images", "\n", "", "num_total_pos", "=", "sum", "(", "[", "max", "(", "inds", ".", "numel", "(", ")", ",", "1", ")", "for", "inds", "in", "pos_inds_list", "]", ")", "\n", "num_total_neg", "=", "sum", "(", "[", "max", "(", "inds", ".", "numel", "(", ")", ",", "1", ")", "for", "inds", "in", "neg_inds_list", "]", ")", "\n", "# split targets to a list w.r.t. multiple levels", "\n", "labels_list", "=", "images_to_levels", "(", "all_labels", ",", "num_level_anchors", ")", "\n", "label_weights_list", "=", "images_to_levels", "(", "all_label_weights", ",", "num_level_anchors", ")", "\n", "bbox_targets_list", "=", "images_to_levels", "(", "all_bbox_targets", ",", "num_level_anchors", ")", "\n", "bbox_weights_list", "=", "images_to_levels", "(", "all_bbox_weights", ",", "num_level_anchors", ")", "\n", "return", "(", "labels_list", ",", "label_weights_list", ",", "bbox_targets_list", ",", "\n", "bbox_weights_list", ",", "num_total_pos", ",", "num_total_neg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_target.images_to_levels": [[79, 92], ["torch.stack", "level_targets.append", "target[].squeeze"], "function", ["None"], ["", "def", "images_to_levels", "(", "target", ",", "num_level_anchors", ")", ":", "\n", "    ", "\"\"\"Convert targets by image to targets by feature level.\n\n    [target_img0, target_img1] -> [target_level0, target_level1, ...]\n    \"\"\"", "\n", "target", "=", "torch", ".", "stack", "(", "target", ",", "0", ")", "\n", "level_targets", "=", "[", "]", "\n", "start", "=", "0", "\n", "for", "n", "in", "num_level_anchors", ":", "\n", "        ", "end", "=", "start", "+", "n", "\n", "level_targets", ".", "append", "(", "target", "[", ":", ",", "start", ":", "end", "]", ".", "squeeze", "(", "0", ")", ")", "\n", "start", "=", "end", "\n", "", "return", "level_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_target.anchor_target_single": [[94, 160], ["anchor_target.anchor_inside_flags", "torch.zeros_like", "torch.zeros_like", "anchors.new_zeros", "anchors.new_zeros", "anchor_inside_flags.any", "bbox.assign_and_sample", "bbox.build_assigner", "bbox.build_assigner.assign", "bbox.PseudoSampler", "bbox.PseudoSampler.sample", "len", "bbox.bbox2delta", "len", "flat_anchors.size", "anchor_target.unmap", "anchor_target.unmap", "anchor_target.unmap", "anchor_target.unmap"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_target.anchor_inside_flags", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.assign_and_sample", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.max_iou_assigner.MaxIoUAssigner.assign", "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.pseudo_sampler.PseudoSampler.sample", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2delta", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_target.unmap", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_target.unmap", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_target.unmap", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_target.unmap"], ["", "def", "anchor_target_single", "(", "flat_anchors", ",", "\n", "valid_flags", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", ",", "\n", "gt_labels", ",", "\n", "img_meta", ",", "\n", "target_means", ",", "\n", "target_stds", ",", "\n", "cfg", ",", "\n", "label_channels", "=", "1", ",", "\n", "sampling", "=", "True", ",", "\n", "unmap_outputs", "=", "True", ")", ":", "\n", "    ", "inside_flags", "=", "anchor_inside_flags", "(", "flat_anchors", ",", "valid_flags", ",", "\n", "img_meta", "[", "'img_shape'", "]", "[", ":", "2", "]", ",", "\n", "cfg", ".", "allowed_border", ")", "\n", "if", "not", "inside_flags", ".", "any", "(", ")", ":", "\n", "        ", "return", "(", "None", ",", ")", "*", "6", "\n", "# assign gt and sample anchors", "\n", "", "anchors", "=", "flat_anchors", "[", "inside_flags", ",", ":", "]", "\n", "\n", "if", "sampling", ":", "\n", "        ", "assign_result", ",", "sampling_result", "=", "assign_and_sample", "(", "\n", "anchors", ",", "gt_bboxes", ",", "gt_bboxes_ignore", ",", "None", ",", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "bbox_assigner", "=", "build_assigner", "(", "cfg", ".", "assigner", ")", "\n", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "anchors", ",", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", ",", "gt_labels", ")", "\n", "bbox_sampler", "=", "PseudoSampler", "(", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "assign_result", ",", "anchors", ",", "\n", "gt_bboxes", ")", "\n", "\n", "", "num_valid_anchors", "=", "anchors", ".", "shape", "[", "0", "]", "\n", "bbox_targets", "=", "torch", ".", "zeros_like", "(", "anchors", ")", "\n", "bbox_weights", "=", "torch", ".", "zeros_like", "(", "anchors", ")", "\n", "labels", "=", "anchors", ".", "new_zeros", "(", "num_valid_anchors", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "label_weights", "=", "anchors", ".", "new_zeros", "(", "num_valid_anchors", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "pos_inds", "=", "sampling_result", ".", "pos_inds", "\n", "neg_inds", "=", "sampling_result", ".", "neg_inds", "\n", "if", "len", "(", "pos_inds", ")", ">", "0", ":", "\n", "        ", "pos_bbox_targets", "=", "bbox2delta", "(", "sampling_result", ".", "pos_bboxes", ",", "\n", "sampling_result", ".", "pos_gt_bboxes", ",", "\n", "target_means", ",", "target_stds", ")", "\n", "bbox_targets", "[", "pos_inds", ",", ":", "]", "=", "pos_bbox_targets", "\n", "bbox_weights", "[", "pos_inds", ",", ":", "]", "=", "1.0", "\n", "if", "gt_labels", "is", "None", ":", "\n", "            ", "labels", "[", "pos_inds", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "labels", "[", "pos_inds", "]", "=", "gt_labels", "[", "sampling_result", ".", "pos_assigned_gt_inds", "]", "\n", "", "if", "cfg", ".", "pos_weight", "<=", "0", ":", "\n", "            ", "label_weights", "[", "pos_inds", "]", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "label_weights", "[", "pos_inds", "]", "=", "cfg", ".", "pos_weight", "\n", "", "", "if", "len", "(", "neg_inds", ")", ">", "0", ":", "\n", "        ", "label_weights", "[", "neg_inds", "]", "=", "1.0", "\n", "\n", "# map up to original set of anchors", "\n", "", "if", "unmap_outputs", ":", "\n", "        ", "num_total_anchors", "=", "flat_anchors", ".", "size", "(", "0", ")", "\n", "labels", "=", "unmap", "(", "labels", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "label_weights", "=", "unmap", "(", "label_weights", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "bbox_targets", "=", "unmap", "(", "bbox_targets", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "bbox_weights", "=", "unmap", "(", "bbox_weights", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "\n", "", "return", "(", "labels", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", ",", "pos_inds", ",", "\n", "neg_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_target.anchor_inside_flags": [[162, 174], ["None"], "function", ["None"], ["", "def", "anchor_inside_flags", "(", "flat_anchors", ",", "valid_flags", ",", "img_shape", ",", "\n", "allowed_border", "=", "0", ")", ":", "\n", "    ", "img_h", ",", "img_w", "=", "img_shape", "[", ":", "2", "]", "\n", "if", "allowed_border", ">=", "0", ":", "\n", "        ", "inside_flags", "=", "valid_flags", "&", "(", "flat_anchors", "[", ":", ",", "0", "]", ">=", "-", "allowed_border", ")", ".", "type", "(", "torch", ".", "uint8", ")", "&", "(", "flat_anchors", "[", ":", ",", "1", "]", ">=", "-", "allowed_border", ")", ".", "type", "(", "torch", ".", "uint8", ")", "&", "(", "flat_anchors", "[", ":", ",", "2", "]", "<", "img_w", "+", "allowed_border", ")", ".", "type", "(", "torch", ".", "uint8", ")", "&", "(", "flat_anchors", "[", ":", ",", "3", "]", "<", "img_h", "+", "allowed_border", ")", ".", "type", "(", "torch", ".", "uint8", ")", "\n", "", "else", ":", "\n", "        ", "inside_flags", "=", "valid_flags", "\n", "", "return", "inside_flags", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_target.unmap": [[176, 187], ["data.dim", "data.new_full", "data.new_full", "data.size"], "function", ["None"], ["", "def", "unmap", "(", "data", ",", "count", ",", "inds", ",", "fill", "=", "0", ")", ":", "\n", "    ", "\"\"\" Unmap a subset of item (data) back to the original set of items (of\n    size count) \"\"\"", "\n", "if", "data", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "ret", "=", "data", ".", "new_full", "(", "(", "count", ",", ")", ",", "fill", ")", "\n", "ret", "[", "inds", "]", "=", "data", "\n", "", "else", ":", "\n", "        ", "new_size", "=", "(", "count", ",", ")", "+", "data", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "ret", "=", "data", ".", "new_full", "(", "new_size", ",", "fill", ")", "\n", "ret", "[", "inds", ",", ":", "]", "=", "data", "\n", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.guided_anchor_target.calc_region": [[7, 30], ["torch.round().long", "torch.round().long", "torch.round().long", "torch.round().long", "x1.clamp.clamp", "y1.clamp.clamp", "x2.clamp.clamp", "y2.clamp.clamp", "torch.round", "torch.round", "torch.round", "torch.round"], "function", ["None"], ["def", "calc_region", "(", "bbox", ",", "ratio", ",", "featmap_size", "=", "None", ")", ":", "\n", "    ", "\"\"\"Calculate a proportional bbox region.\n\n    The bbox center are fixed and the new h' and w' is h * ratio and w * ratio.\n\n    Args:\n        bbox (Tensor): Bboxes to calculate regions, shape (n, 4)\n        ratio (float): Ratio of the output region.\n        featmap_size (tuple): Feature map size used for clipping the boundary.\n\n    Returns:\n        tuple: x1, y1, x2, y2\n    \"\"\"", "\n", "x1", "=", "torch", ".", "round", "(", "(", "1", "-", "ratio", ")", "*", "bbox", "[", "0", "]", "+", "ratio", "*", "bbox", "[", "2", "]", ")", ".", "long", "(", ")", "\n", "y1", "=", "torch", ".", "round", "(", "(", "1", "-", "ratio", ")", "*", "bbox", "[", "1", "]", "+", "ratio", "*", "bbox", "[", "3", "]", ")", ".", "long", "(", ")", "\n", "x2", "=", "torch", ".", "round", "(", "ratio", "*", "bbox", "[", "0", "]", "+", "(", "1", "-", "ratio", ")", "*", "bbox", "[", "2", "]", ")", ".", "long", "(", ")", "\n", "y2", "=", "torch", ".", "round", "(", "ratio", "*", "bbox", "[", "1", "]", "+", "(", "1", "-", "ratio", ")", "*", "bbox", "[", "3", "]", ")", ".", "long", "(", ")", "\n", "if", "featmap_size", "is", "not", "None", ":", "\n", "        ", "x1", "=", "x1", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "featmap_size", "[", "1", "]", "-", "1", ")", "\n", "y1", "=", "y1", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "featmap_size", "[", "0", "]", "-", "1", ")", "\n", "x2", "=", "x2", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "featmap_size", "[", "1", "]", "-", "1", ")", "\n", "y2", "=", "y2", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "featmap_size", "[", "0", "]", "-", "1", ")", "\n", "", "return", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.guided_anchor_target.ga_loc_target": [[32, 131], ["len", "len", "range", "range", "range", "torch.zeros", "torch.full_like", "torch.zeros_like", "all_loc_targets.append", "all_loc_weights.append", "all_ignore_map.append", "torch.sqrt", "torch.sqrt.new_full", "torch.floor", "target_lvls.clamp().long.clamp().long", "range", "sum", "float", "gt_bboxes.size", "target_lvls[].item", "guided_anchor_target.calc_region", "guided_anchor_target.calc_region", "target_lvls.clamp().long.clamp", "guided_anchor_target.calc_region", "guided_anchor_target.calc_region", "torch.log2", "torch.log2", "t.size", "t.size", "t.size"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.anchor.guided_anchor_target.calc_region", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.guided_anchor_target.calc_region", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.guided_anchor_target.calc_region", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.guided_anchor_target.calc_region"], ["", "def", "ga_loc_target", "(", "gt_bboxes_list", ",", "\n", "featmap_sizes", ",", "\n", "anchor_scale", ",", "\n", "anchor_strides", ",", "\n", "center_ratio", "=", "0.2", ",", "\n", "ignore_ratio", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"Compute location targets for guided anchoring.\n\n    Each feature map is divided into positive, negative and ignore regions.\n    - positive regions: target 1, weight 1\n    - ignore regions: target 0, weight 0\n    - negative regions: target 0, weight 0.1\n\n    Args:\n        gt_bboxes_list (list[Tensor]): Gt bboxes of each image.\n        featmap_sizes (list[tuple]): Multi level sizes of each feature maps.\n        anchor_scale (int): Anchor scale.\n        anchor_strides ([list[int]]): Multi level anchor strides.\n        center_ratio (float): Ratio of center region.\n        ignore_ratio (float): Ratio of ignore region.\n\n    Returns:\n        tuple\n    \"\"\"", "\n", "img_per_gpu", "=", "len", "(", "gt_bboxes_list", ")", "\n", "num_lvls", "=", "len", "(", "featmap_sizes", ")", "\n", "r1", "=", "(", "1", "-", "center_ratio", ")", "/", "2", "\n", "r2", "=", "(", "1", "-", "ignore_ratio", ")", "/", "2", "\n", "all_loc_targets", "=", "[", "]", "\n", "all_loc_weights", "=", "[", "]", "\n", "all_ignore_map", "=", "[", "]", "\n", "for", "lvl_id", "in", "range", "(", "num_lvls", ")", ":", "\n", "        ", "h", ",", "w", "=", "featmap_sizes", "[", "lvl_id", "]", "\n", "loc_targets", "=", "torch", ".", "zeros", "(", "\n", "img_per_gpu", ",", "\n", "1", ",", "\n", "h", ",", "\n", "w", ",", "\n", "device", "=", "gt_bboxes_list", "[", "0", "]", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", "\n", "loc_weights", "=", "torch", ".", "full_like", "(", "loc_targets", ",", "-", "1", ")", "\n", "ignore_map", "=", "torch", ".", "zeros_like", "(", "loc_targets", ")", "\n", "all_loc_targets", ".", "append", "(", "loc_targets", ")", "\n", "all_loc_weights", ".", "append", "(", "loc_weights", ")", "\n", "all_ignore_map", ".", "append", "(", "ignore_map", ")", "\n", "", "for", "img_id", "in", "range", "(", "img_per_gpu", ")", ":", "\n", "        ", "gt_bboxes", "=", "gt_bboxes_list", "[", "img_id", "]", "\n", "scale", "=", "torch", ".", "sqrt", "(", "(", "gt_bboxes", "[", ":", ",", "2", "]", "-", "gt_bboxes", "[", ":", ",", "0", "]", "+", "1", ")", "*", "\n", "(", "gt_bboxes", "[", ":", ",", "3", "]", "-", "gt_bboxes", "[", ":", ",", "1", "]", "+", "1", ")", ")", "\n", "min_anchor_size", "=", "scale", ".", "new_full", "(", "\n", "(", "1", ",", ")", ",", "float", "(", "anchor_scale", "*", "anchor_strides", "[", "0", "]", ")", ")", "\n", "# assign gt bboxes to different feature levels w.r.t. their scales", "\n", "target_lvls", "=", "torch", ".", "floor", "(", "\n", "torch", ".", "log2", "(", "scale", ")", "-", "torch", ".", "log2", "(", "min_anchor_size", ")", "+", "0.5", ")", "\n", "target_lvls", "=", "target_lvls", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "num_lvls", "-", "1", ")", ".", "long", "(", ")", "\n", "for", "gt_id", "in", "range", "(", "gt_bboxes", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "lvl", "=", "target_lvls", "[", "gt_id", "]", ".", "item", "(", ")", "\n", "# rescaled to corresponding feature map", "\n", "gt_", "=", "gt_bboxes", "[", "gt_id", ",", ":", "4", "]", "/", "anchor_strides", "[", "lvl", "]", "\n", "# calculate ignore regions", "\n", "ignore_x1", ",", "ignore_y1", ",", "ignore_x2", ",", "ignore_y2", "=", "calc_region", "(", "\n", "gt_", ",", "r2", ",", "featmap_sizes", "[", "lvl", "]", ")", "\n", "# calculate positive (center) regions", "\n", "ctr_x1", ",", "ctr_y1", ",", "ctr_x2", ",", "ctr_y2", "=", "calc_region", "(", "\n", "gt_", ",", "r1", ",", "featmap_sizes", "[", "lvl", "]", ")", "\n", "all_loc_targets", "[", "lvl", "]", "[", "img_id", ",", "0", ",", "ctr_y1", ":", "ctr_y2", "+", "1", ",", "ctr_x1", ":", "ctr_x2", "+", "\n", "1", "]", "=", "1", "\n", "all_loc_weights", "[", "lvl", "]", "[", "img_id", ",", "0", ",", "ignore_y1", ":", "ignore_y2", "+", "\n", "1", ",", "ignore_x1", ":", "ignore_x2", "+", "1", "]", "=", "0", "\n", "all_loc_weights", "[", "lvl", "]", "[", "img_id", ",", "0", ",", "ctr_y1", ":", "ctr_y2", "+", "1", ",", "ctr_x1", ":", "ctr_x2", "+", "\n", "1", "]", "=", "1", "\n", "# calculate ignore map on nearby low level feature", "\n", "if", "lvl", ">", "0", ":", "\n", "                ", "d_lvl", "=", "lvl", "-", "1", "\n", "# rescaled to corresponding feature map", "\n", "gt_", "=", "gt_bboxes", "[", "gt_id", ",", ":", "4", "]", "/", "anchor_strides", "[", "d_lvl", "]", "\n", "ignore_x1", ",", "ignore_y1", ",", "ignore_x2", ",", "ignore_y2", "=", "calc_region", "(", "\n", "gt_", ",", "r2", ",", "featmap_sizes", "[", "d_lvl", "]", ")", "\n", "all_ignore_map", "[", "d_lvl", "]", "[", "img_id", ",", "0", ",", "ignore_y1", ":", "ignore_y2", "+", "\n", "1", ",", "ignore_x1", ":", "ignore_x2", "+", "1", "]", "=", "1", "\n", "# calculate ignore map on nearby high level feature", "\n", "", "if", "lvl", "<", "num_lvls", "-", "1", ":", "\n", "                ", "u_lvl", "=", "lvl", "+", "1", "\n", "# rescaled to corresponding feature map", "\n", "gt_", "=", "gt_bboxes", "[", "gt_id", ",", ":", "4", "]", "/", "anchor_strides", "[", "u_lvl", "]", "\n", "ignore_x1", ",", "ignore_y1", ",", "ignore_x2", ",", "ignore_y2", "=", "calc_region", "(", "\n", "gt_", ",", "r2", ",", "featmap_sizes", "[", "u_lvl", "]", ")", "\n", "all_ignore_map", "[", "u_lvl", "]", "[", "img_id", ",", "0", ",", "ignore_y1", ":", "ignore_y2", "+", "\n", "1", ",", "ignore_x1", ":", "ignore_x2", "+", "1", "]", "=", "1", "\n", "", "", "", "for", "lvl_id", "in", "range", "(", "num_lvls", ")", ":", "\n", "# ignore negative regions w.r.t. ignore map", "\n", "        ", "all_loc_weights", "[", "lvl_id", "]", "[", "(", "all_loc_weights", "[", "lvl_id", "]", "<", "0", ")", "\n", "&", "(", "all_ignore_map", "[", "lvl_id", "]", ">", "0", ")", "]", "=", "0", "\n", "# set negative regions with weight 0.1", "\n", "all_loc_weights", "[", "lvl_id", "]", "[", "all_loc_weights", "[", "lvl_id", "]", "<", "0", "]", "=", "0.1", "\n", "# loc average factor to balance loss", "\n", "", "loc_avg_factor", "=", "sum", "(", "\n", "[", "t", ".", "size", "(", "0", ")", "*", "t", ".", "size", "(", "-", "1", ")", "*", "t", ".", "size", "(", "-", "2", ")", "for", "t", "in", "all_loc_targets", "]", ")", "/", "200", "\n", "return", "all_loc_targets", ",", "all_loc_weights", ",", "loc_avg_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.guided_anchor_target.ga_shape_target": [[133, 203], ["len", "range", "utils.multi_apply", "any", "sum", "sum", "guided_anchor_target.images_to_levels", "guided_anchor_target.images_to_levels", "guided_anchor_target.images_to_levels", "len", "len", "len", "squares.size", "inside_flag_flat_list.append", "approx_flat_list.append", "square_flat_list.append", "len", "len", "torch.cat", "torch.cat", "torch.cat", "max", "max", "range", "inds.numel", "inds.numel"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.misc.multi_apply", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.guided_anchor_target.images_to_levels", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.guided_anchor_target.images_to_levels", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.guided_anchor_target.images_to_levels"], ["", "def", "ga_shape_target", "(", "approx_list", ",", "\n", "inside_flag_list", ",", "\n", "square_list", ",", "\n", "gt_bboxes_list", ",", "\n", "img_metas", ",", "\n", "approxs_per_octave", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore_list", "=", "None", ",", "\n", "sampling", "=", "True", ",", "\n", "unmap_outputs", "=", "True", ")", ":", "\n", "    ", "\"\"\"Compute guided anchoring targets.\n\n    Args:\n        approx_list (list[list]): Multi level approxs of each image.\n        inside_flag_list (list[list]): Multi level inside flags of each image.\n        square_list (list[list]): Multi level squares of each image.\n        gt_bboxes_list (list[Tensor]): Ground truth bboxes of each image.\n        img_metas (list[dict]): Meta info of each image.\n        approxs_per_octave (int): number of approxs per octave\n        cfg (dict): RPN train configs.\n        gt_bboxes_ignore_list (list[Tensor]): ignore list of gt bboxes.\n        sampling (bool): sampling or not.\n        unmap_outputs (bool): unmap outputs or not.\n\n    Returns:\n        tuple\n    \"\"\"", "\n", "num_imgs", "=", "len", "(", "img_metas", ")", "\n", "assert", "len", "(", "approx_list", ")", "==", "len", "(", "inside_flag_list", ")", "==", "len", "(", "\n", "square_list", ")", "==", "num_imgs", "\n", "# anchor number of multi levels", "\n", "num_level_squares", "=", "[", "squares", ".", "size", "(", "0", ")", "for", "squares", "in", "square_list", "[", "0", "]", "]", "\n", "# concat all level anchors and flags to a single tensor", "\n", "inside_flag_flat_list", "=", "[", "]", "\n", "approx_flat_list", "=", "[", "]", "\n", "square_flat_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "        ", "assert", "len", "(", "square_list", "[", "i", "]", ")", "==", "len", "(", "inside_flag_list", "[", "i", "]", ")", "\n", "inside_flag_flat_list", ".", "append", "(", "torch", ".", "cat", "(", "inside_flag_list", "[", "i", "]", ")", ")", "\n", "approx_flat_list", ".", "append", "(", "torch", ".", "cat", "(", "approx_list", "[", "i", "]", ")", ")", "\n", "square_flat_list", ".", "append", "(", "torch", ".", "cat", "(", "square_list", "[", "i", "]", ")", ")", "\n", "\n", "# compute targets for each image", "\n", "", "if", "gt_bboxes_ignore_list", "is", "None", ":", "\n", "        ", "gt_bboxes_ignore_list", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "", "(", "all_bbox_anchors", ",", "all_bbox_gts", ",", "all_bbox_weights", ",", "pos_inds_list", ",", "\n", "neg_inds_list", ")", "=", "multi_apply", "(", "\n", "ga_shape_target_single", ",", "\n", "approx_flat_list", ",", "\n", "inside_flag_flat_list", ",", "\n", "square_flat_list", ",", "\n", "gt_bboxes_list", ",", "\n", "gt_bboxes_ignore_list", ",", "\n", "img_metas", ",", "\n", "approxs_per_octave", "=", "approxs_per_octave", ",", "\n", "cfg", "=", "cfg", ",", "\n", "sampling", "=", "sampling", ",", "\n", "unmap_outputs", "=", "unmap_outputs", ")", "\n", "# no valid anchors", "\n", "if", "any", "(", "[", "bbox_anchors", "is", "None", "for", "bbox_anchors", "in", "all_bbox_anchors", "]", ")", ":", "\n", "        ", "return", "None", "\n", "# sampled anchors of all images", "\n", "", "num_total_pos", "=", "sum", "(", "[", "max", "(", "inds", ".", "numel", "(", ")", ",", "1", ")", "for", "inds", "in", "pos_inds_list", "]", ")", "\n", "num_total_neg", "=", "sum", "(", "[", "max", "(", "inds", ".", "numel", "(", ")", ",", "1", ")", "for", "inds", "in", "neg_inds_list", "]", ")", "\n", "# split targets to a list w.r.t. multiple levels", "\n", "bbox_anchors_list", "=", "images_to_levels", "(", "all_bbox_anchors", ",", "num_level_squares", ")", "\n", "bbox_gts_list", "=", "images_to_levels", "(", "all_bbox_gts", ",", "num_level_squares", ")", "\n", "bbox_weights_list", "=", "images_to_levels", "(", "all_bbox_weights", ",", "num_level_squares", ")", "\n", "return", "(", "bbox_anchors_list", ",", "bbox_gts_list", ",", "bbox_weights_list", ",", "num_total_pos", ",", "\n", "num_total_neg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.guided_anchor_target.images_to_levels": [[205, 218], ["torch.stack", "level_targets.append", "target[].squeeze"], "function", ["None"], ["", "def", "images_to_levels", "(", "target", ",", "num_level_anchors", ")", ":", "\n", "    ", "\"\"\"Convert targets by image to targets by feature level.\n\n    [target_img0, target_img1] -> [target_level0, target_level1, ...]\n    \"\"\"", "\n", "target", "=", "torch", ".", "stack", "(", "target", ",", "0", ")", "\n", "level_targets", "=", "[", "]", "\n", "start", "=", "0", "\n", "for", "n", "in", "num_level_anchors", ":", "\n", "        ", "end", "=", "start", "+", "n", "\n", "level_targets", ".", "append", "(", "target", "[", ":", ",", "start", ":", "end", "]", ".", "squeeze", "(", "0", ")", ")", "\n", "start", "=", "end", "\n", "", "return", "level_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.guided_anchor_target.ga_shape_target_single": [[220, 288], ["inside_flags[].expand().reshape", "bbox.build_assigner", "bbox.build_assigner.assign", "bbox.PseudoSampler.sample", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "inside_flags.any", "bbox.build_sampler", "bbox.PseudoSampler", "len", "flat_squares.size", "utils.unmap", "utils.unmap", "utils.unmap", "inside_flags[].expand"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.max_iou_assigner.MaxIoUAssigner.assign", "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.pseudo_sampler.PseudoSampler.sample", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_sampler", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_target.unmap", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_target.unmap", "home.repos.pwc.inspect_result.twangnh_SimCal.anchor.anchor_target.unmap"], ["", "def", "ga_shape_target_single", "(", "flat_approxs", ",", "\n", "inside_flags", ",", "\n", "flat_squares", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", ",", "\n", "img_meta", ",", "\n", "approxs_per_octave", ",", "\n", "cfg", ",", "\n", "sampling", "=", "True", ",", "\n", "unmap_outputs", "=", "True", ")", ":", "\n", "    ", "\"\"\"Compute guided anchoring targets.\n\n    This function returns sampled anchors and gt bboxes directly\n    rather than calculates regression targets.\n\n    Args:\n        flat_approxs (Tensor): flat approxs of a single image,\n            shape (n, 4)\n        inside_flags (Tensor): inside flags of a single image,\n            shape (n, ).\n        flat_squares (Tensor): flat squares of a single image,\n            shape (approxs_per_octave * n, 4)\n        gt_bboxes (Tensor): Ground truth bboxes of a single image.\n        img_meta (dict): Meta info of a single image.\n        approxs_per_octave (int): number of approxs per octave\n        cfg (dict): RPN train configs.\n        sampling (bool): sampling or not.\n        unmap_outputs (bool): unmap outputs or not.\n\n    Returns:\n        tuple\n    \"\"\"", "\n", "if", "not", "inside_flags", ".", "any", "(", ")", ":", "\n", "        ", "return", "(", "None", ",", ")", "*", "6", "\n", "# assign gt and sample anchors", "\n", "", "expand_inside_flags", "=", "inside_flags", "[", ":", ",", "None", "]", ".", "expand", "(", "\n", "-", "1", ",", "approxs_per_octave", ")", ".", "reshape", "(", "-", "1", ")", "\n", "approxs", "=", "flat_approxs", "[", "expand_inside_flags", ",", ":", "]", "\n", "squares", "=", "flat_squares", "[", "inside_flags", ",", ":", "]", "\n", "\n", "bbox_assigner", "=", "build_assigner", "(", "cfg", ".", "ga_assigner", ")", "\n", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "approxs", ",", "squares", ",", "approxs_per_octave", ",", "\n", "gt_bboxes", ",", "gt_bboxes_ignore", ")", "\n", "if", "sampling", ":", "\n", "        ", "bbox_sampler", "=", "build_sampler", "(", "cfg", ".", "ga_sampler", ")", "\n", "", "else", ":", "\n", "        ", "bbox_sampler", "=", "PseudoSampler", "(", ")", "\n", "", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "assign_result", ",", "squares", ",", "gt_bboxes", ")", "\n", "\n", "bbox_anchors", "=", "torch", ".", "zeros_like", "(", "squares", ")", "\n", "bbox_gts", "=", "torch", ".", "zeros_like", "(", "squares", ")", "\n", "bbox_weights", "=", "torch", ".", "zeros_like", "(", "squares", ")", "\n", "\n", "pos_inds", "=", "sampling_result", ".", "pos_inds", "\n", "neg_inds", "=", "sampling_result", ".", "neg_inds", "\n", "if", "len", "(", "pos_inds", ")", ">", "0", ":", "\n", "        ", "bbox_anchors", "[", "pos_inds", ",", ":", "]", "=", "sampling_result", ".", "pos_bboxes", "\n", "bbox_gts", "[", "pos_inds", ",", ":", "]", "=", "sampling_result", ".", "pos_gt_bboxes", "\n", "bbox_weights", "[", "pos_inds", ",", ":", "]", "=", "1.0", "\n", "\n", "# map up to original set of anchors", "\n", "", "if", "unmap_outputs", ":", "\n", "        ", "num_total_anchors", "=", "flat_squares", ".", "size", "(", "0", ")", "\n", "bbox_anchors", "=", "unmap", "(", "bbox_anchors", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "bbox_gts", "=", "unmap", "(", "bbox_gts", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "bbox_weights", "=", "unmap", "(", "bbox_weights", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "\n", "", "return", "(", "bbox_anchors", ",", "bbox_gts", ",", "bbox_weights", ",", "pos_inds", ",", "neg_inds", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.mean_ap.average_precision": [[9, 54], ["numpy.zeros", "numpy.zeros", "numpy.ones", "numpy.hstack", "numpy.hstack", "range", "range", "numpy.maximum", "numpy.sum", "range", "ValueError", "numpy.where", "numpy.arange", "precs.max"], "function", ["None"], ["def", "average_precision", "(", "recalls", ",", "precisions", ",", "mode", "=", "'area'", ")", ":", "\n", "    ", "\"\"\"Calculate average precision (for single or multiple scales).\n\n    Args:\n        recalls (ndarray): shape (num_scales, num_dets) or (num_dets, )\n        precisions (ndarray): shape (num_scales, num_dets) or (num_dets, )\n        mode (str): 'area' or '11points', 'area' means calculating the area\n            under precision-recall curve, '11points' means calculating\n            the average precision of recalls at [0, 0.1, ..., 1]\n\n    Returns:\n        float or ndarray: calculated average precision\n    \"\"\"", "\n", "no_scale", "=", "False", "\n", "if", "recalls", ".", "ndim", "==", "1", ":", "\n", "        ", "no_scale", "=", "True", "\n", "recalls", "=", "recalls", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "precisions", "=", "precisions", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "", "assert", "recalls", ".", "shape", "==", "precisions", ".", "shape", "and", "recalls", ".", "ndim", "==", "2", "\n", "num_scales", "=", "recalls", ".", "shape", "[", "0", "]", "\n", "ap", "=", "np", ".", "zeros", "(", "num_scales", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "mode", "==", "'area'", ":", "\n", "        ", "zeros", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "1", ")", ",", "dtype", "=", "recalls", ".", "dtype", ")", "\n", "ones", "=", "np", ".", "ones", "(", "(", "num_scales", ",", "1", ")", ",", "dtype", "=", "recalls", ".", "dtype", ")", "\n", "mrec", "=", "np", ".", "hstack", "(", "(", "zeros", ",", "recalls", ",", "ones", ")", ")", "\n", "mpre", "=", "np", ".", "hstack", "(", "(", "zeros", ",", "precisions", ",", "zeros", ")", ")", "\n", "for", "i", "in", "range", "(", "mpre", ".", "shape", "[", "1", "]", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", ":", ",", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", ":", ",", "i", "-", "1", "]", ",", "mpre", "[", ":", ",", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "num_scales", ")", ":", "\n", "            ", "ind", "=", "np", ".", "where", "(", "mrec", "[", "i", ",", "1", ":", "]", "!=", "mrec", "[", "i", ",", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "ap", "[", "i", "]", "=", "np", ".", "sum", "(", "\n", "(", "mrec", "[", "i", ",", "ind", "+", "1", "]", "-", "mrec", "[", "i", ",", "ind", "]", ")", "*", "mpre", "[", "i", ",", "ind", "+", "1", "]", ")", "\n", "", "", "elif", "mode", "==", "'11points'", ":", "\n", "        ", "for", "i", "in", "range", "(", "num_scales", ")", ":", "\n", "            ", "for", "thr", "in", "np", ".", "arange", "(", "0", ",", "1", "+", "1e-3", ",", "0.1", ")", ":", "\n", "                ", "precs", "=", "precisions", "[", "i", ",", "recalls", "[", "i", ",", ":", "]", ">=", "thr", "]", "\n", "prec", "=", "precs", ".", "max", "(", ")", "if", "precs", ".", "size", ">", "0", "else", "0", "\n", "ap", "[", "i", "]", "+=", "prec", "\n", "", "ap", "/=", "11", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'Unrecognized mode, only \"area\" and \"11points\" are supported'", ")", "\n", "", "if", "no_scale", ":", "\n", "        ", "ap", "=", "ap", "[", "0", "]", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.mean_ap.tpfp_imagenet": [[56, 135], ["len", "numpy.zeros", "numpy.zeros", "bbox_overlaps.bbox_overlaps", "numpy.minimum", "numpy.argsort", "enumerate", "numpy.zeros", "enumerate", "numpy.zeros_like", "range"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.geometry.bbox_overlaps"], ["", "def", "tpfp_imagenet", "(", "det_bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_ignore", ",", "\n", "default_iou_thr", ",", "\n", "area_ranges", "=", "None", ")", ":", "\n", "    ", "\"\"\"Check if detected bboxes are true positive or false positive.\n\n    Args:\n        det_bbox (ndarray): the detected bbox\n        gt_bboxes (ndarray): ground truth bboxes of this image\n        gt_ignore (ndarray): indicate if gts are ignored for evaluation or not\n        default_iou_thr (float): the iou thresholds for medium and large bboxes\n        area_ranges (list or None): gt bbox area ranges\n\n    Returns:\n        tuple: two arrays (tp, fp) whose elements are 0 and 1\n    \"\"\"", "\n", "num_dets", "=", "det_bboxes", ".", "shape", "[", "0", "]", "\n", "num_gts", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "if", "area_ranges", "is", "None", ":", "\n", "        ", "area_ranges", "=", "[", "(", "None", ",", "None", ")", "]", "\n", "", "num_scales", "=", "len", "(", "area_ranges", ")", "\n", "# tp and fp are of shape (num_scales, num_gts), each row is tp or fp", "\n", "# of a certain scale.", "\n", "tp", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_dets", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_dets", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "gt_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "if", "area_ranges", "==", "[", "(", "None", ",", "None", ")", "]", ":", "\n", "            ", "fp", "[", "...", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "det_areas", "=", "(", "det_bboxes", "[", ":", ",", "2", "]", "-", "det_bboxes", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "det_bboxes", "[", ":", ",", "3", "]", "-", "det_bboxes", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "for", "i", ",", "(", "min_area", ",", "max_area", ")", "in", "enumerate", "(", "area_ranges", ")", ":", "\n", "                ", "fp", "[", "i", ",", "(", "det_areas", ">=", "min_area", ")", "&", "(", "det_areas", "<", "max_area", ")", "]", "=", "1", "\n", "", "", "return", "tp", ",", "fp", "\n", "", "ious", "=", "bbox_overlaps", "(", "det_bboxes", ",", "gt_bboxes", "-", "1", ")", "\n", "gt_w", "=", "gt_bboxes", "[", ":", ",", "2", "]", "-", "gt_bboxes", "[", ":", ",", "0", "]", "+", "1", "\n", "gt_h", "=", "gt_bboxes", "[", ":", ",", "3", "]", "-", "gt_bboxes", "[", ":", ",", "1", "]", "+", "1", "\n", "iou_thrs", "=", "np", ".", "minimum", "(", "(", "gt_w", "*", "gt_h", ")", "/", "(", "(", "gt_w", "+", "10.0", ")", "*", "(", "gt_h", "+", "10.0", ")", ")", ",", "\n", "default_iou_thr", ")", "\n", "# sort all detections by scores in descending order", "\n", "sort_inds", "=", "np", ".", "argsort", "(", "-", "det_bboxes", "[", ":", ",", "-", "1", "]", ")", "\n", "for", "k", ",", "(", "min_area", ",", "max_area", ")", "in", "enumerate", "(", "area_ranges", ")", ":", "\n", "        ", "gt_covered", "=", "np", ".", "zeros", "(", "num_gts", ",", "dtype", "=", "bool", ")", "\n", "# if no area range is specified, gt_area_ignore is all False", "\n", "if", "min_area", "is", "None", ":", "\n", "            ", "gt_area_ignore", "=", "np", ".", "zeros_like", "(", "gt_ignore", ",", "dtype", "=", "bool", ")", "\n", "", "else", ":", "\n", "            ", "gt_areas", "=", "gt_w", "*", "gt_h", "\n", "gt_area_ignore", "=", "(", "gt_areas", "<", "min_area", ")", "|", "(", "gt_areas", ">=", "max_area", ")", "\n", "", "for", "i", "in", "sort_inds", ":", "\n", "            ", "max_iou", "=", "-", "1", "\n", "matched_gt", "=", "-", "1", "\n", "# find best overlapped available gt", "\n", "for", "j", "in", "range", "(", "num_gts", ")", ":", "\n", "# different from PASCAL VOC: allow finding other gts if the", "\n", "# best overlaped ones are already matched by other det bboxes", "\n", "                ", "if", "gt_covered", "[", "j", "]", ":", "\n", "                    ", "continue", "\n", "", "elif", "ious", "[", "i", ",", "j", "]", ">=", "iou_thrs", "[", "j", "]", "and", "ious", "[", "i", ",", "j", "]", ">", "max_iou", ":", "\n", "                    ", "max_iou", "=", "ious", "[", "i", ",", "j", "]", "\n", "matched_gt", "=", "j", "\n", "# there are 4 cases for a det bbox:", "\n", "# 1. it matches a gt, tp = 1, fp = 0", "\n", "# 2. it matches an ignored gt, tp = 0, fp = 0", "\n", "# 3. it matches no gt and within area range, tp = 0, fp = 1", "\n", "# 4. it matches no gt but is beyond area range, tp = 0, fp = 0", "\n", "", "", "if", "matched_gt", ">=", "0", ":", "\n", "                ", "gt_covered", "[", "matched_gt", "]", "=", "1", "\n", "if", "not", "(", "gt_ignore", "[", "matched_gt", "]", "or", "gt_area_ignore", "[", "matched_gt", "]", ")", ":", "\n", "                    ", "tp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "", "elif", "min_area", "is", "None", ":", "\n", "                ", "fp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "bbox", "=", "det_bboxes", "[", "i", ",", ":", "4", "]", "\n", "area", "=", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "+", "1", ")", "*", "(", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "+", "1", ")", "\n", "if", "area", ">=", "min_area", "and", "area", "<", "max_area", ":", "\n", "                    ", "fp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "", "", "", "return", "tp", ",", "fp", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.mean_ap.tpfp_default": [[137, 200], ["len", "numpy.zeros", "numpy.zeros", "bbox_overlaps.bbox_overlaps", "bbox_overlaps.bbox_overlaps.max", "bbox_overlaps.bbox_overlaps.argmax", "numpy.argsort", "enumerate", "numpy.zeros", "enumerate", "numpy.zeros_like"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.geometry.bbox_overlaps"], ["", "def", "tpfp_default", "(", "det_bboxes", ",", "gt_bboxes", ",", "gt_ignore", ",", "iou_thr", ",", "area_ranges", "=", "None", ")", ":", "\n", "    ", "\"\"\"Check if detected bboxes are true positive or false positive.\n\n    Args:\n        det_bbox (ndarray): the detected bbox\n        gt_bboxes (ndarray): ground truth bboxes of this image\n        gt_ignore (ndarray): indicate if gts are ignored for evaluation or not\n        iou_thr (float): the iou thresholds\n\n    Returns:\n        tuple: (tp, fp), two arrays whose elements are 0 and 1\n    \"\"\"", "\n", "num_dets", "=", "det_bboxes", ".", "shape", "[", "0", "]", "\n", "num_gts", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "if", "area_ranges", "is", "None", ":", "\n", "        ", "area_ranges", "=", "[", "(", "None", ",", "None", ")", "]", "\n", "", "num_scales", "=", "len", "(", "area_ranges", ")", "\n", "# tp and fp are of shape (num_scales, num_gts), each row is tp or fp of", "\n", "# a certain scale", "\n", "tp", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_dets", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_dets", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# if there is no gt bboxes in this image, then all det bboxes", "\n", "# within area range are false positives", "\n", "if", "gt_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "if", "area_ranges", "==", "[", "(", "None", ",", "None", ")", "]", ":", "\n", "            ", "fp", "[", "...", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "det_areas", "=", "(", "det_bboxes", "[", ":", ",", "2", "]", "-", "det_bboxes", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "det_bboxes", "[", ":", ",", "3", "]", "-", "det_bboxes", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "for", "i", ",", "(", "min_area", ",", "max_area", ")", "in", "enumerate", "(", "area_ranges", ")", ":", "\n", "                ", "fp", "[", "i", ",", "(", "det_areas", ">=", "min_area", ")", "&", "(", "det_areas", "<", "max_area", ")", "]", "=", "1", "\n", "", "", "return", "tp", ",", "fp", "\n", "", "ious", "=", "bbox_overlaps", "(", "det_bboxes", ",", "gt_bboxes", ")", "\n", "ious_max", "=", "ious", ".", "max", "(", "axis", "=", "1", ")", "\n", "ious_argmax", "=", "ious", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "sort_inds", "=", "np", ".", "argsort", "(", "-", "det_bboxes", "[", ":", ",", "-", "1", "]", ")", "\n", "for", "k", ",", "(", "min_area", ",", "max_area", ")", "in", "enumerate", "(", "area_ranges", ")", ":", "\n", "        ", "gt_covered", "=", "np", ".", "zeros", "(", "num_gts", ",", "dtype", "=", "bool", ")", "\n", "# if no area range is specified, gt_area_ignore is all False", "\n", "if", "min_area", "is", "None", ":", "\n", "            ", "gt_area_ignore", "=", "np", ".", "zeros_like", "(", "gt_ignore", ",", "dtype", "=", "bool", ")", "\n", "", "else", ":", "\n", "            ", "gt_areas", "=", "(", "gt_bboxes", "[", ":", ",", "2", "]", "-", "gt_bboxes", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "gt_bboxes", "[", ":", ",", "3", "]", "-", "gt_bboxes", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "gt_area_ignore", "=", "(", "gt_areas", "<", "min_area", ")", "|", "(", "gt_areas", ">=", "max_area", ")", "\n", "", "for", "i", "in", "sort_inds", ":", "\n", "            ", "if", "ious_max", "[", "i", "]", ">=", "iou_thr", ":", "\n", "                ", "matched_gt", "=", "ious_argmax", "[", "i", "]", "\n", "if", "not", "(", "gt_ignore", "[", "matched_gt", "]", "or", "gt_area_ignore", "[", "matched_gt", "]", ")", ":", "\n", "                    ", "if", "not", "gt_covered", "[", "matched_gt", "]", ":", "\n", "                        ", "gt_covered", "[", "matched_gt", "]", "=", "True", "\n", "tp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "else", ":", "\n", "                        ", "fp", "[", "k", ",", "i", "]", "=", "1", "\n", "# otherwise ignore this detected bbox, tp = 0, fp = 0", "\n", "", "", "", "elif", "min_area", "is", "None", ":", "\n", "                ", "fp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "bbox", "=", "det_bboxes", "[", "i", ",", ":", "4", "]", "\n", "area", "=", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "+", "1", ")", "*", "(", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "+", "1", ")", "\n", "if", "area", ">=", "min_area", "and", "area", "<", "max_area", ":", "\n", "                    ", "fp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "", "", "", "return", "tp", ",", "fp", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.mean_ap.get_cls_results": [[202, 218], ["range", "len", "cls_gts.append", "cls_gt_ignore.append", "cls_gt_ignore.append", "numpy.zeros"], "function", ["None"], ["", "def", "get_cls_results", "(", "det_results", ",", "gt_bboxes", ",", "gt_labels", ",", "gt_ignore", ",", "class_id", ")", ":", "\n", "    ", "\"\"\"Get det results and gt information of a certain class.\"\"\"", "\n", "cls_dets", "=", "[", "det", "[", "class_id", "]", "\n", "for", "det", "in", "det_results", "]", "# det bboxes of this class", "\n", "cls_gts", "=", "[", "]", "# gt bboxes of this class", "\n", "cls_gt_ignore", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "gt_bboxes", ")", ")", ":", "\n", "        ", "gt_bbox", "=", "gt_bboxes", "[", "j", "]", "\n", "cls_inds", "=", "(", "gt_labels", "[", "j", "]", "==", "class_id", "+", "1", ")", "\n", "cls_gt", "=", "gt_bbox", "[", "cls_inds", ",", ":", "]", "if", "gt_bbox", ".", "shape", "[", "0", "]", ">", "0", "else", "gt_bbox", "\n", "cls_gts", ".", "append", "(", "cls_gt", ")", "\n", "if", "gt_ignore", "is", "None", ":", "\n", "            ", "cls_gt_ignore", ".", "append", "(", "np", ".", "zeros", "(", "cls_gt", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "", "else", ":", "\n", "            ", "cls_gt_ignore", ".", "append", "(", "gt_ignore", "[", "j", "]", "[", "cls_inds", "]", ")", "\n", "", "", "return", "cls_dets", ",", "cls_gts", ",", "cls_gt_ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.mean_ap.eval_map": [[220, 331], ["len", "range", "len", "len", "len", "range", "len", "mean_ap.get_cls_results", "tuple", "numpy.zeros", "enumerate", "numpy.vstack", "numpy.argsort", "numpy.cumsum", "numpy.cumsum", "mean_ap.average_precision", "eval_results.append", "numpy.vstack", "numpy.vstack", "range", "mean_ap.print_map_summary", "len", "len", "len", "tpfp_func", "zip", "numpy.hstack", "numpy.hstack", "numpy.finfo", "numpy.maximum", "numpy.maximum", "num_gts.item.item", "numpy.any", "numpy.array().mean().item", "len", "len", "range", "numpy.sum", "enumerate", "mean_ap.append", "mean_ap.append", "aps.append", "len", "numpy.logical_not", "numpy.sum", "all_ap[].mean", "numpy.array().mean", "numpy.array", "numpy.logical_not"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.mean_ap.get_cls_results", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.mean_ap.average_precision", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.mean_ap.print_map_summary"], ["", "def", "eval_map", "(", "det_results", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_ignore", "=", "None", ",", "\n", "scale_ranges", "=", "None", ",", "\n", "iou_thr", "=", "0.5", ",", "\n", "dataset", "=", "None", ",", "\n", "print_summary", "=", "True", ")", ":", "\n", "    ", "\"\"\"Evaluate mAP of a dataset.\n\n    Args:\n        det_results (list): a list of list, [[cls1_det, cls2_det, ...], ...]\n        gt_bboxes (list): ground truth bboxes of each image, a list of K*4\n            array.\n        gt_labels (list): ground truth labels of each image, a list of K array\n        gt_ignore (list): gt ignore indicators of each image, a list of K array\n        scale_ranges (list, optional): [(min1, max1), (min2, max2), ...]\n        iou_thr (float): IoU threshold\n        dataset (None or str or list): dataset name or dataset classes, there\n            are minor differences in metrics for different datsets, e.g.\n            \"voc07\", \"imagenet_det\", etc.\n        print_summary (bool): whether to print the mAP summary\n\n    Returns:\n        tuple: (mAP, [dict, dict, ...])\n    \"\"\"", "\n", "assert", "len", "(", "det_results", ")", "==", "len", "(", "gt_bboxes", ")", "==", "len", "(", "gt_labels", ")", "\n", "if", "gt_ignore", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "gt_ignore", ")", "==", "len", "(", "gt_labels", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_ignore", ")", ")", ":", "\n", "            ", "assert", "len", "(", "gt_labels", "[", "i", "]", ")", "==", "len", "(", "gt_ignore", "[", "i", "]", ")", "\n", "", "", "area_ranges", "=", "(", "[", "(", "rg", "[", "0", "]", "**", "2", ",", "rg", "[", "1", "]", "**", "2", ")", "for", "rg", "in", "scale_ranges", "]", "\n", "if", "scale_ranges", "is", "not", "None", "else", "None", ")", "\n", "num_scales", "=", "len", "(", "scale_ranges", ")", "if", "scale_ranges", "is", "not", "None", "else", "1", "\n", "eval_results", "=", "[", "]", "\n", "num_classes", "=", "len", "(", "det_results", "[", "0", "]", ")", "# positive class num", "\n", "gt_labels", "=", "[", "\n", "label", "if", "label", ".", "ndim", "==", "1", "else", "label", "[", ":", ",", "0", "]", "for", "label", "in", "gt_labels", "\n", "]", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "# get gt and det bboxes of this class", "\n", "        ", "cls_dets", ",", "cls_gts", ",", "cls_gt_ignore", "=", "get_cls_results", "(", "\n", "det_results", ",", "gt_bboxes", ",", "gt_labels", ",", "gt_ignore", ",", "i", ")", "\n", "# calculate tp and fp for each image", "\n", "tpfp_func", "=", "(", "\n", "tpfp_imagenet", "if", "dataset", "in", "[", "'det'", ",", "'vid'", "]", "else", "tpfp_default", ")", "\n", "tpfp", "=", "[", "\n", "tpfp_func", "(", "cls_dets", "[", "j", "]", ",", "cls_gts", "[", "j", "]", ",", "cls_gt_ignore", "[", "j", "]", ",", "iou_thr", ",", "\n", "area_ranges", ")", "for", "j", "in", "range", "(", "len", "(", "cls_dets", ")", ")", "\n", "]", "\n", "tp", ",", "fp", "=", "tuple", "(", "zip", "(", "*", "tpfp", ")", ")", "\n", "# calculate gt number of each scale, gts ignored or beyond scale", "\n", "# are not counted", "\n", "num_gts", "=", "np", ".", "zeros", "(", "num_scales", ",", "dtype", "=", "int", ")", "\n", "for", "j", ",", "bbox", "in", "enumerate", "(", "cls_gts", ")", ":", "\n", "            ", "if", "area_ranges", "is", "None", ":", "\n", "                ", "num_gts", "[", "0", "]", "+=", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "cls_gt_ignore", "[", "j", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "gt_areas", "=", "(", "bbox", "[", ":", ",", "2", "]", "-", "bbox", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "bbox", "[", ":", ",", "3", "]", "-", "bbox", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "for", "k", ",", "(", "min_area", ",", "max_area", ")", "in", "enumerate", "(", "area_ranges", ")", ":", "\n", "                    ", "num_gts", "[", "k", "]", "+=", "np", ".", "sum", "(", "\n", "np", ".", "logical_not", "(", "cls_gt_ignore", "[", "j", "]", ")", "\n", "&", "(", "gt_areas", ">=", "min_area", ")", "&", "(", "gt_areas", "<", "max_area", ")", ")", "\n", "# sort all det bboxes by score, also sort tp and fp", "\n", "", "", "", "cls_dets", "=", "np", ".", "vstack", "(", "cls_dets", ")", "\n", "num_dets", "=", "cls_dets", ".", "shape", "[", "0", "]", "\n", "sort_inds", "=", "np", ".", "argsort", "(", "-", "cls_dets", "[", ":", ",", "-", "1", "]", ")", "\n", "tp", "=", "np", ".", "hstack", "(", "tp", ")", "[", ":", ",", "sort_inds", "]", "\n", "fp", "=", "np", ".", "hstack", "(", "fp", ")", "[", ":", ",", "sort_inds", "]", "\n", "# calculate recall and precision with tp and fp", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ",", "axis", "=", "1", ")", "\n", "fp", "=", "np", ".", "cumsum", "(", "fp", ",", "axis", "=", "1", ")", "\n", "eps", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", "\n", "recalls", "=", "tp", "/", "np", ".", "maximum", "(", "num_gts", "[", ":", ",", "np", ".", "newaxis", "]", ",", "eps", ")", "\n", "precisions", "=", "tp", "/", "np", ".", "maximum", "(", "(", "tp", "+", "fp", ")", ",", "eps", ")", "\n", "# calculate AP", "\n", "if", "scale_ranges", "is", "None", ":", "\n", "            ", "recalls", "=", "recalls", "[", "0", ",", ":", "]", "\n", "precisions", "=", "precisions", "[", "0", ",", ":", "]", "\n", "num_gts", "=", "num_gts", ".", "item", "(", ")", "\n", "", "mode", "=", "'area'", "if", "dataset", "!=", "'voc07'", "else", "'11points'", "\n", "ap", "=", "average_precision", "(", "recalls", ",", "precisions", ",", "mode", ")", "\n", "eval_results", ".", "append", "(", "{", "\n", "'num_gts'", ":", "num_gts", ",", "\n", "'num_dets'", ":", "num_dets", ",", "\n", "'recall'", ":", "recalls", ",", "\n", "'precision'", ":", "precisions", ",", "\n", "'ap'", ":", "ap", "\n", "}", ")", "\n", "", "if", "scale_ranges", "is", "not", "None", ":", "\n", "# shape (num_classes, num_scales)", "\n", "        ", "all_ap", "=", "np", ".", "vstack", "(", "[", "cls_result", "[", "'ap'", "]", "for", "cls_result", "in", "eval_results", "]", ")", "\n", "all_num_gts", "=", "np", ".", "vstack", "(", "\n", "[", "cls_result", "[", "'num_gts'", "]", "for", "cls_result", "in", "eval_results", "]", ")", "\n", "mean_ap", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_scales", ")", ":", "\n", "            ", "if", "np", ".", "any", "(", "all_num_gts", "[", ":", ",", "i", "]", ">", "0", ")", ":", "\n", "                ", "mean_ap", ".", "append", "(", "all_ap", "[", "all_num_gts", "[", ":", ",", "i", "]", ">", "0", ",", "i", "]", ".", "mean", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "mean_ap", ".", "append", "(", "0.0", ")", "\n", "", "", "", "else", ":", "\n", "        ", "aps", "=", "[", "]", "\n", "for", "cls_result", "in", "eval_results", ":", "\n", "            ", "if", "cls_result", "[", "'num_gts'", "]", ">", "0", ":", "\n", "                ", "aps", ".", "append", "(", "cls_result", "[", "'ap'", "]", ")", "\n", "", "", "mean_ap", "=", "np", ".", "array", "(", "aps", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "if", "aps", "else", "0.0", "\n", "", "if", "print_summary", ":", "\n", "        ", "print_map_summary", "(", "mean_ap", ",", "eval_results", ",", "dataset", ")", "\n", "\n", "", "return", "mean_ap", ",", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.mean_ap.print_map_summary": [[333, 380], ["len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "range", "isinstance", "len", "mmcv.is_str", "isinstance", "range", "table_data.append", "terminaltables.AsciiTable", "print", "str", "class_names.get_classes", "table_data.append", "numpy.array", "numpy.array", "range"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.class_names.get_classes"], ["", "def", "print_map_summary", "(", "mean_ap", ",", "results", ",", "dataset", "=", "None", ")", ":", "\n", "    ", "\"\"\"Print mAP and results of each class.\n\n    Args:\n        mean_ap(float): calculated from `eval_map`\n        results(list): calculated from `eval_map`\n        dataset(None or str or list): dataset name or dataset classes.\n    \"\"\"", "\n", "num_scales", "=", "len", "(", "results", "[", "0", "]", "[", "'ap'", "]", ")", "if", "isinstance", "(", "results", "[", "0", "]", "[", "'ap'", "]", ",", "\n", "np", ".", "ndarray", ")", "else", "1", "\n", "num_classes", "=", "len", "(", "results", ")", "\n", "\n", "recalls", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "precisions", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "aps", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "num_gts", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_classes", ")", ",", "dtype", "=", "int", ")", "\n", "for", "i", ",", "cls_result", "in", "enumerate", "(", "results", ")", ":", "\n", "        ", "if", "cls_result", "[", "'recall'", "]", ".", "size", ">", "0", ":", "\n", "            ", "recalls", "[", ":", ",", "i", "]", "=", "np", ".", "array", "(", "cls_result", "[", "'recall'", "]", ",", "ndmin", "=", "2", ")", "[", ":", ",", "-", "1", "]", "\n", "precisions", "[", ":", ",", "i", "]", "=", "np", ".", "array", "(", "\n", "cls_result", "[", "'precision'", "]", ",", "ndmin", "=", "2", ")", "[", ":", ",", "-", "1", "]", "\n", "", "aps", "[", ":", ",", "i", "]", "=", "cls_result", "[", "'ap'", "]", "\n", "num_gts", "[", ":", ",", "i", "]", "=", "cls_result", "[", "'num_gts'", "]", "\n", "\n", "", "if", "dataset", "is", "None", ":", "\n", "        ", "label_names", "=", "[", "str", "(", "i", ")", "for", "i", "in", "range", "(", "1", ",", "num_classes", "+", "1", ")", "]", "\n", "", "elif", "mmcv", ".", "is_str", "(", "dataset", ")", ":", "\n", "        ", "label_names", "=", "get_classes", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "label_names", "=", "dataset", "\n", "\n", "", "if", "not", "isinstance", "(", "mean_ap", ",", "list", ")", ":", "\n", "        ", "mean_ap", "=", "[", "mean_ap", "]", "\n", "", "header", "=", "[", "'class'", ",", "'gts'", ",", "'dets'", ",", "'recall'", ",", "'precision'", ",", "'ap'", "]", "\n", "for", "i", "in", "range", "(", "num_scales", ")", ":", "\n", "        ", "table_data", "=", "[", "header", "]", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "row_data", "=", "[", "\n", "label_names", "[", "j", "]", ",", "num_gts", "[", "i", ",", "j", "]", ",", "results", "[", "j", "]", "[", "'num_dets'", "]", ",", "\n", "'{:.3f}'", ".", "format", "(", "recalls", "[", "i", ",", "j", "]", ")", ",", "\n", "'{:.3f}'", ".", "format", "(", "precisions", "[", "i", ",", "j", "]", ")", ",", "'{:.3f}'", ".", "format", "(", "aps", "[", "i", ",", "j", "]", ")", "\n", "]", "\n", "table_data", ".", "append", "(", "row_data", ")", "\n", "", "table_data", ".", "append", "(", "[", "'mAP'", ",", "''", ",", "''", ",", "''", ",", "''", ",", "'{:.3f}'", ".", "format", "(", "mean_ap", "[", "i", "]", ")", "]", ")", "\n", "table", "=", "AsciiTable", "(", "table_data", ")", "\n", "table", ".", "inner_footing_row_border", "=", "True", "\n", "print", "(", "table", ".", "table", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.recall._recalls": [[7, 38], ["sum", "numpy.zeros", "enumerate", "numpy.fliplr", "numpy.zeros", "enumerate", "numpy.zeros", "range", "numpy.sort", "[].copy", "numpy.zeros", "range", "numpy.hstack", "float", "numpy.hstack", "[].copy.argmax", "max_ious.argmax", "numpy.arange"], "function", ["None"], ["def", "_recalls", "(", "all_ious", ",", "proposal_nums", ",", "thrs", ")", ":", "\n", "\n", "    ", "img_num", "=", "all_ious", ".", "shape", "[", "0", "]", "\n", "total_gt_num", "=", "sum", "(", "[", "ious", ".", "shape", "[", "0", "]", "for", "ious", "in", "all_ious", "]", ")", "\n", "\n", "_ious", "=", "np", ".", "zeros", "(", "(", "proposal_nums", ".", "size", ",", "total_gt_num", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "proposal_num", "in", "enumerate", "(", "proposal_nums", ")", ":", "\n", "        ", "tmp_ious", "=", "np", ".", "zeros", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "img_num", ")", ":", "\n", "            ", "ious", "=", "all_ious", "[", "i", "]", "[", ":", ",", ":", "proposal_num", "]", ".", "copy", "(", ")", "\n", "gt_ious", "=", "np", ".", "zeros", "(", "(", "ious", ".", "shape", "[", "0", "]", ")", ")", "\n", "if", "ious", ".", "size", "==", "0", ":", "\n", "                ", "tmp_ious", "=", "np", ".", "hstack", "(", "(", "tmp_ious", ",", "gt_ious", ")", ")", "\n", "continue", "\n", "", "for", "j", "in", "range", "(", "ious", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "gt_max_overlaps", "=", "ious", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "max_ious", "=", "ious", "[", "np", ".", "arange", "(", "0", ",", "ious", ".", "shape", "[", "0", "]", ")", ",", "gt_max_overlaps", "]", "\n", "gt_idx", "=", "max_ious", ".", "argmax", "(", ")", "\n", "gt_ious", "[", "j", "]", "=", "max_ious", "[", "gt_idx", "]", "\n", "box_idx", "=", "gt_max_overlaps", "[", "gt_idx", "]", "\n", "ious", "[", "gt_idx", ",", ":", "]", "=", "-", "1", "\n", "ious", "[", ":", ",", "box_idx", "]", "=", "-", "1", "\n", "", "tmp_ious", "=", "np", ".", "hstack", "(", "(", "tmp_ious", ",", "gt_ious", ")", ")", "\n", "", "_ious", "[", "k", ",", ":", "]", "=", "tmp_ious", "\n", "\n", "", "_ious", "=", "np", ".", "fliplr", "(", "np", ".", "sort", "(", "_ious", ",", "axis", "=", "1", ")", ")", "\n", "recalls", "=", "np", ".", "zeros", "(", "(", "proposal_nums", ".", "size", ",", "thrs", ".", "size", ")", ")", "\n", "for", "i", ",", "thr", "in", "enumerate", "(", "thrs", ")", ":", "\n", "        ", "recalls", "[", ":", ",", "i", "]", "=", "(", "_ious", ">=", "thr", ")", ".", "sum", "(", "axis", "=", "1", ")", "/", "float", "(", "total_gt_num", ")", "\n", "\n", "", "return", "recalls", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.recall.set_recall_param": [[40, 60], ["isinstance", "numpy.array", "isinstance", "numpy.array", "isinstance", "numpy.array", "numpy.array", "isinstance", "numpy.array"], "function", ["None"], ["", "def", "set_recall_param", "(", "proposal_nums", ",", "iou_thrs", ")", ":", "\n", "    ", "\"\"\"Check proposal_nums and iou_thrs and set correct format.\n    \"\"\"", "\n", "if", "isinstance", "(", "proposal_nums", ",", "list", ")", ":", "\n", "        ", "_proposal_nums", "=", "np", ".", "array", "(", "proposal_nums", ")", "\n", "", "elif", "isinstance", "(", "proposal_nums", ",", "int", ")", ":", "\n", "        ", "_proposal_nums", "=", "np", ".", "array", "(", "[", "proposal_nums", "]", ")", "\n", "", "else", ":", "\n", "        ", "_proposal_nums", "=", "proposal_nums", "\n", "\n", "", "if", "iou_thrs", "is", "None", ":", "\n", "        ", "_iou_thrs", "=", "np", ".", "array", "(", "[", "0.5", "]", ")", "\n", "", "elif", "isinstance", "(", "iou_thrs", ",", "list", ")", ":", "\n", "        ", "_iou_thrs", "=", "np", ".", "array", "(", "iou_thrs", ")", "\n", "", "elif", "isinstance", "(", "iou_thrs", ",", "float", ")", ":", "\n", "        ", "_iou_thrs", "=", "np", ".", "array", "(", "[", "iou_thrs", "]", ")", "\n", "", "else", ":", "\n", "        ", "_iou_thrs", "=", "iou_thrs", "\n", "\n", "", "return", "_proposal_nums", ",", "_iou_thrs", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.recall.eval_recalls": [[62, 103], ["len", "recall.set_recall_param", "range", "numpy.array", "recall._recalls", "len", "min", "np.array.append", "recall.print_recall_summary", "numpy.zeros", "bbox_overlaps.bbox_overlaps", "numpy.argsort"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.recall.set_recall_param", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.recall._recalls", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.recall.print_recall_summary", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.geometry.bbox_overlaps"], ["", "def", "eval_recalls", "(", "gts", ",", "\n", "proposals", ",", "\n", "proposal_nums", "=", "None", ",", "\n", "iou_thrs", "=", "None", ",", "\n", "print_summary", "=", "True", ")", ":", "\n", "    ", "\"\"\"Calculate recalls.\n\n    Args:\n        gts(list or ndarray): a list of arrays of shape (n, 4)\n        proposals(list or ndarray): a list of arrays of shape (k, 4) or (k, 5)\n        proposal_nums(int or list of int or ndarray): top N proposals\n        thrs(float or list or ndarray): iou thresholds\n\n    Returns:\n        ndarray: recalls of different ious and proposal nums\n    \"\"\"", "\n", "\n", "img_num", "=", "len", "(", "gts", ")", "\n", "assert", "img_num", "==", "len", "(", "proposals", ")", "\n", "\n", "proposal_nums", ",", "iou_thrs", "=", "set_recall_param", "(", "proposal_nums", ",", "iou_thrs", ")", "\n", "\n", "all_ious", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "img_num", ")", ":", "\n", "        ", "if", "proposals", "[", "i", "]", ".", "ndim", "==", "2", "and", "proposals", "[", "i", "]", ".", "shape", "[", "1", "]", "==", "5", ":", "\n", "            ", "scores", "=", "proposals", "[", "i", "]", "[", ":", ",", "4", "]", "\n", "sort_idx", "=", "np", ".", "argsort", "(", "scores", ")", "[", ":", ":", "-", "1", "]", "\n", "img_proposal", "=", "proposals", "[", "i", "]", "[", "sort_idx", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "img_proposal", "=", "proposals", "[", "i", "]", "\n", "", "prop_num", "=", "min", "(", "img_proposal", ".", "shape", "[", "0", "]", ",", "proposal_nums", "[", "-", "1", "]", ")", "\n", "if", "gts", "[", "i", "]", "is", "None", "or", "gts", "[", "i", "]", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "ious", "=", "np", ".", "zeros", "(", "(", "0", ",", "img_proposal", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "ious", "=", "bbox_overlaps", "(", "gts", "[", "i", "]", ",", "img_proposal", "[", ":", "prop_num", ",", ":", "4", "]", ")", "\n", "", "all_ious", ".", "append", "(", "ious", ")", "\n", "", "all_ious", "=", "np", ".", "array", "(", "all_ious", ")", "\n", "recalls", "=", "_recalls", "(", "all_ious", ",", "proposal_nums", ",", "iou_thrs", ")", "\n", "if", "print_summary", ":", "\n", "        ", "print_recall_summary", "(", "recalls", ",", "proposal_nums", ",", "iou_thrs", ")", "\n", "", "return", "recalls", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.recall.print_recall_summary": [[105, 136], ["numpy.array", "numpy.array", "enumerate", "terminaltables.AsciiTable", "print", "numpy.arange", "numpy.arange", "iou_thrs[].tolist", "row.insert", "table_data.append", "recalls[].tolist"], "function", ["None"], ["", "def", "print_recall_summary", "(", "recalls", ",", "\n", "proposal_nums", ",", "\n", "iou_thrs", ",", "\n", "row_idxs", "=", "None", ",", "\n", "col_idxs", "=", "None", ")", ":", "\n", "    ", "\"\"\"Print recalls in a table.\n\n    Args:\n        recalls(ndarray): calculated from `bbox_recalls`\n        proposal_nums(ndarray or list): top N proposals\n        iou_thrs(ndarray or list): iou thresholds\n        row_idxs(ndarray): which rows(proposal nums) to print\n        col_idxs(ndarray): which cols(iou thresholds) to print\n    \"\"\"", "\n", "proposal_nums", "=", "np", ".", "array", "(", "proposal_nums", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "iou_thrs", "=", "np", ".", "array", "(", "iou_thrs", ")", "\n", "if", "row_idxs", "is", "None", ":", "\n", "        ", "row_idxs", "=", "np", ".", "arange", "(", "proposal_nums", ".", "size", ")", "\n", "", "if", "col_idxs", "is", "None", ":", "\n", "        ", "col_idxs", "=", "np", ".", "arange", "(", "iou_thrs", ".", "size", ")", "\n", "", "row_header", "=", "[", "''", "]", "+", "iou_thrs", "[", "col_idxs", "]", ".", "tolist", "(", ")", "\n", "table_data", "=", "[", "row_header", "]", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "proposal_nums", "[", "row_idxs", "]", ")", ":", "\n", "        ", "row", "=", "[", "\n", "'{:.3f}'", ".", "format", "(", "val", ")", "\n", "for", "val", "in", "recalls", "[", "row_idxs", "[", "i", "]", ",", "col_idxs", "]", ".", "tolist", "(", ")", "\n", "]", "\n", "row", ".", "insert", "(", "0", ",", "num", ")", "\n", "table_data", ".", "append", "(", "row", ")", "\n", "", "table", "=", "AsciiTable", "(", "table_data", ")", "\n", "print", "(", "table", ".", "table", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.recall.plot_num_recall": [[138, 161], ["isinstance", "isinstance", "plt.figure", "plt.plot", "plt.xlabel", "plt.ylabel", "plt.axis", "plt.figure.show", "proposal_nums.tolist", "recalls.tolist", "proposal_nums.max"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.demo.lvis_show_ann.LvisGtAnnVis.show"], ["", "def", "plot_num_recall", "(", "recalls", ",", "proposal_nums", ")", ":", "\n", "    ", "\"\"\"Plot Proposal_num-Recalls curve.\n\n    Args:\n        recalls(ndarray or list): shape (k,)\n        proposal_nums(ndarray or list): same shape as `recalls`\n    \"\"\"", "\n", "if", "isinstance", "(", "proposal_nums", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_proposal_nums", "=", "proposal_nums", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "_proposal_nums", "=", "proposal_nums", "\n", "", "if", "isinstance", "(", "recalls", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_recalls", "=", "recalls", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "_recalls", "=", "recalls", "\n", "\n", "", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "[", "0", "]", "+", "_proposal_nums", ",", "[", "0", "]", "+", "_recalls", ")", "\n", "plt", ".", "xlabel", "(", "'Proposal num'", ")", "\n", "plt", ".", "ylabel", "(", "'Recall'", ")", "\n", "plt", ".", "axis", "(", "[", "0", ",", "proposal_nums", ".", "max", "(", ")", ",", "0", ",", "1", "]", ")", "\n", "f", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.recall.plot_iou_recall": [[163, 186], ["isinstance", "isinstance", "plt.figure", "plt.plot", "plt.xlabel", "plt.ylabel", "plt.axis", "plt.figure.show", "iou_thrs.tolist", "recalls.tolist", "iou_thrs.min"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.demo.lvis_show_ann.LvisGtAnnVis.show"], ["", "def", "plot_iou_recall", "(", "recalls", ",", "iou_thrs", ")", ":", "\n", "    ", "\"\"\"Plot IoU-Recalls curve.\n\n    Args:\n        recalls(ndarray or list): shape (k,)\n        iou_thrs(ndarray or list): same shape as `recalls`\n    \"\"\"", "\n", "if", "isinstance", "(", "iou_thrs", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_iou_thrs", "=", "iou_thrs", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "_iou_thrs", "=", "iou_thrs", "\n", "", "if", "isinstance", "(", "recalls", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_recalls", "=", "recalls", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "_recalls", "=", "recalls", "\n", "\n", "", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "_iou_thrs", "+", "[", "1.0", "]", ",", "_recalls", "+", "[", "0.", "]", ")", "\n", "plt", ".", "xlabel", "(", "'IoU'", ")", "\n", "plt", ".", "ylabel", "(", "'Recall'", ")", "\n", "plt", ".", "axis", "(", "[", "iou_thrs", ".", "min", "(", ")", ",", "1", ",", "0", ",", "1", "]", ")", "\n", "f", ".", "show", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.coco_utils.coco_eval": [[9, 40], ["mmcv.is_str", "isinstance", "cocoapi.PythonAPI.pycocotools.coco.COCO", "coco_utils.fast_eval_recall", "enumerate", "cocoapi.PythonAPI.pycocotools.coco.COCO.loadRes", "cocoapi.PythonAPI.pycocotools.coco.COCO.getImgIds", "cocoapi.PythonAPI.pycocotools.cocoeval.COCOeval", "cocoapi.PythonAPI.pycocotools.cocoeval.COCOeval.evaluate", "cocoapi.PythonAPI.pycocotools.cocoeval.COCOeval.accumulate", "cocoapi.PythonAPI.pycocotools.cocoeval.COCOeval.summarize", "numpy.array", "print", "list"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.coco_utils.fast_eval_recall", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.evaluate", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.accumulate", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.summarize"], ["def", "coco_eval", "(", "result_files", ",", "result_types", ",", "coco", ",", "max_dets", "=", "(", "100", ",", "300", ",", "1000", ")", ")", ":", "\n", "    ", "for", "res_type", "in", "result_types", ":", "\n", "        ", "assert", "res_type", "in", "[", "\n", "'proposal'", ",", "'proposal_fast'", ",", "'bbox'", ",", "'segm'", ",", "'keypoints'", "\n", "]", "\n", "\n", "", "if", "mmcv", ".", "is_str", "(", "coco", ")", ":", "\n", "        ", "coco", "=", "COCO", "(", "coco", ")", "\n", "", "assert", "isinstance", "(", "coco", ",", "COCO", ")", "\n", "\n", "if", "result_types", "==", "[", "'proposal_fast'", "]", ":", "\n", "        ", "ar", "=", "fast_eval_recall", "(", "result_files", ",", "coco", ",", "np", ".", "array", "(", "max_dets", ")", ")", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "max_dets", ")", ":", "\n", "            ", "print", "(", "'AR@{}\\t= {:.4f}'", ".", "format", "(", "num", ",", "ar", "[", "i", "]", ")", ")", "\n", "", "return", "\n", "\n", "", "for", "res_type", "in", "result_types", ":", "\n", "        ", "result_file", "=", "result_files", "[", "res_type", "]", "\n", "# assert result_file.endswith('.json')", "\n", "\n", "coco_dets", "=", "coco", ".", "loadRes", "(", "result_file", ")", "\n", "img_ids", "=", "coco", ".", "getImgIds", "(", ")", "\n", "iou_type", "=", "'bbox'", "if", "res_type", "==", "'proposal'", "else", "res_type", "\n", "cocoEval", "=", "COCOeval", "(", "coco", ",", "coco_dets", ",", "iou_type", ")", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "img_ids", "\n", "if", "res_type", "==", "'proposal'", ":", "\n", "            ", "cocoEval", ".", "params", ".", "useCats", "=", "0", "\n", "cocoEval", ".", "params", ".", "maxDets", "=", "list", "(", "max_dets", ")", "\n", "", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "cocoEval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.coco_utils.fast_eval_recall": [[42, 77], ["numpy.arange", "mmcv.is_str", "coco.getImgIds", "range", "recall.eval_recalls", "recall.eval_recalls.mean", "mmcv.load.endswith", "mmcv.load", "len", "coco.getAnnIds", "coco.loadAnns", "numpy.array", "gt_bboxes.append", "isinstance", "TypeError", "len", "gt_bboxes.append", "np.zeros.append", "numpy.zeros", "numpy.zeros", "ann.get", "type"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.recall.eval_recalls", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get"], ["", "", "def", "fast_eval_recall", "(", "results", ",", "\n", "coco", ",", "\n", "max_dets", ",", "\n", "iou_thrs", "=", "np", ".", "arange", "(", "0.5", ",", "0.96", ",", "0.05", ")", ")", ":", "\n", "    ", "if", "mmcv", ".", "is_str", "(", "results", ")", ":", "\n", "        ", "assert", "results", ".", "endswith", "(", "'.pkl'", ")", "\n", "results", "=", "mmcv", ".", "load", "(", "results", ")", "\n", "", "elif", "not", "isinstance", "(", "results", ",", "list", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'results must be a list of numpy arrays or a filename, not {}'", ".", "\n", "format", "(", "type", "(", "results", ")", ")", ")", "\n", "\n", "", "gt_bboxes", "=", "[", "]", "\n", "img_ids", "=", "coco", ".", "getImgIds", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "img_ids", ")", ")", ":", "\n", "        ", "ann_ids", "=", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_ids", "[", "i", "]", ")", "\n", "ann_info", "=", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "if", "len", "(", "ann_info", ")", "==", "0", ":", "\n", "            ", "gt_bboxes", ".", "append", "(", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", ")", "\n", "continue", "\n", "", "bboxes", "=", "[", "]", "\n", "for", "ann", "in", "ann_info", ":", "\n", "            ", "if", "ann", ".", "get", "(", "'ignore'", ",", "False", ")", "or", "ann", "[", "'iscrowd'", "]", ":", "\n", "                ", "continue", "\n", "", "x1", ",", "y1", ",", "w", ",", "h", "=", "ann", "[", "'bbox'", "]", "\n", "bboxes", ".", "append", "(", "[", "x1", ",", "y1", ",", "x1", "+", "w", "-", "1", ",", "y1", "+", "h", "-", "1", "]", ")", "\n", "", "bboxes", "=", "np", ".", "array", "(", "bboxes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "", "gt_bboxes", ".", "append", "(", "bboxes", ")", "\n", "\n", "", "recalls", "=", "eval_recalls", "(", "\n", "gt_bboxes", ",", "results", ",", "max_dets", ",", "iou_thrs", ",", "print_summary", "=", "False", ")", "\n", "ar", "=", "recalls", ".", "mean", "(", "axis", "=", "1", ")", "\n", "return", "ar", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.coco_utils.xyxy2xywh": [[79, 86], ["bbox.tolist"], "function", ["None"], ["", "def", "xyxy2xywh", "(", "bbox", ")", ":", "\n", "    ", "_bbox", "=", "bbox", ".", "tolist", "(", ")", "\n", "return", "[", "\n", "_bbox", "[", "0", "]", ",", "\n", "_bbox", "[", "1", "]", ",", "\n", "_bbox", "[", "2", "]", "-", "_bbox", "[", "0", "]", "+", "1", ",", "\n", "_bbox", "[", "3", "]", "-", "_bbox", "[", "1", "]", "+", "1", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.coco_utils.proposal2json": [[89, 102], ["range", "len", "range", "dict", "coco_utils.xyxy2xywh", "float", "json_results.append"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.xyxy2xywh"], ["", "def", "proposal2json", "(", "dataset", ",", "results", ")", ":", "\n", "    ", "json_results", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "img_id", "=", "dataset", ".", "img_ids", "[", "idx", "]", "\n", "bboxes", "=", "results", "[", "idx", "]", "\n", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'image_id'", "]", "=", "img_id", "\n", "data", "[", "'bbox'", "]", "=", "xyxy2xywh", "(", "bboxes", "[", "i", "]", ")", "\n", "data", "[", "'score'", "]", "=", "float", "(", "bboxes", "[", "i", "]", "[", "4", "]", ")", "\n", "data", "[", "'category_id'", "]", "=", "1", "\n", "json_results", ".", "append", "(", "data", ")", "\n", "", "", "return", "json_results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.coco_utils.det2json": [[104, 119], ["range", "len", "range", "len", "range", "dict", "coco_utils.xyxy2xywh", "float", "json_results.append"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.xyxy2xywh"], ["", "def", "det2json", "(", "dataset", ",", "results", ")", ":", "\n", "    ", "json_results", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "img_id", "=", "dataset", ".", "img_ids", "[", "idx", "]", "\n", "result", "=", "results", "[", "idx", "]", "\n", "for", "label", "in", "range", "(", "len", "(", "result", ")", ")", ":", "\n", "            ", "bboxes", "=", "result", "[", "label", "]", "\n", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'image_id'", "]", "=", "img_id", "\n", "data", "[", "'bbox'", "]", "=", "xyxy2xywh", "(", "bboxes", "[", "i", "]", ")", "\n", "data", "[", "'score'", "]", "=", "float", "(", "bboxes", "[", "i", "]", "[", "4", "]", ")", "\n", "data", "[", "'category_id'", "]", "=", "dataset", ".", "cat_ids", "[", "label", "]", "\n", "json_results", ".", "append", "(", "data", ")", "\n", "", "", "", "return", "json_results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.coco_utils.segm2json": [[121, 162], ["range", "len", "range", "len", "len", "range", "range", "len", "dict", "coco_utils.xyxy2xywh", "float", "bbox_json_results.append", "len", "dict", "float", "segm_json_results.append", "[].decode", "print"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.xyxy2xywh"], ["", "def", "segm2json", "(", "dataset", ",", "results", ")", ":", "\n", "    ", "bbox_json_results", "=", "[", "]", "\n", "segm_json_results", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "img_id", "=", "dataset", ".", "img_ids", "[", "idx", "]", "\n", "if", "len", "(", "results", "[", "idx", "]", ")", "==", "2", ":", "\n", "            ", "det", ",", "seg", "=", "results", "[", "idx", "]", "\n", "", "elif", "len", "(", "results", "[", "idx", "]", ")", "==", "3", ":", "\n", "            ", "det", ",", "seg", ",", "_", "=", "results", "[", "idx", "]", "\n", "", "for", "label", "in", "range", "(", "len", "(", "det", ")", ")", ":", "\n", "# bbox results", "\n", "            ", "bboxes", "=", "det", "[", "label", "]", "\n", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'image_id'", "]", "=", "img_id", "\n", "data", "[", "'bbox'", "]", "=", "xyxy2xywh", "(", "bboxes", "[", "i", "]", ")", "\n", "data", "[", "'score'", "]", "=", "float", "(", "bboxes", "[", "i", "]", "[", "4", "]", ")", "\n", "data", "[", "'category_id'", "]", "=", "dataset", ".", "cat_ids", "[", "label", "]", "\n", "bbox_json_results", ".", "append", "(", "data", ")", "\n", "\n", "# segm results", "\n", "# some detectors use different score for det and segm", "\n", "", "if", "len", "(", "seg", ")", "==", "2", ":", "\n", "                ", "segms", "=", "seg", "[", "0", "]", "[", "label", "]", "\n", "mask_score", "=", "seg", "[", "1", "]", "[", "label", "]", "\n", "", "else", ":", "\n", "                ", "segms", "=", "seg", "[", "label", "]", "\n", "mask_score", "=", "[", "bbox", "[", "4", "]", "for", "bbox", "in", "bboxes", "]", "\n", "", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'image_id'", "]", "=", "img_id", "\n", "data", "[", "'score'", "]", "=", "float", "(", "mask_score", "[", "i", "]", ")", "\n", "data", "[", "'category_id'", "]", "=", "dataset", ".", "cat_ids", "[", "label", "]", "\n", "try", ":", "\n", "                    ", "segms", "[", "i", "]", "[", "'counts'", "]", "=", "segms", "[", "i", "]", "[", "'counts'", "]", ".", "decode", "(", ")", "\n", "", "except", ":", "\n", "                    ", "print", "(", "'no need to decode'", ")", "\n", "continue", "\n", "", "data", "[", "'segmentation'", "]", "=", "segms", "[", "i", "]", "\n", "segm_json_results", ".", "append", "(", "data", ")", "\n", "", "", "", "return", "bbox_json_results", ",", "segm_json_results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.coco_utils.results2json": [[164, 198], ["dict", "isinstance", "coco_utils.det2json", "mmcv.dump", "isinstance", "coco_utils.segm2json", "coco_utils.proposal2json", "mmcv.dump", "print", "isinstance", "mmcv.dump", "print", "mmcv.dump", "print", "numpy.stack", "coco_utils.proposal2json", "mmcv.dump", "TypeError"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.det2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.segm2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.proposal2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.proposal2json"], ["", "def", "results2json", "(", "dataset", ",", "results", ",", "out_file", ",", "dump", "=", "True", ")", ":", "\n", "    ", "result_files", "=", "dict", "(", ")", "\n", "if", "isinstance", "(", "results", "[", "0", "]", ",", "list", ")", ":", "\n", "        ", "json_results", "=", "det2json", "(", "dataset", ",", "results", ")", "\n", "result_files", "[", "'bbox'", "]", "=", "'{}.{}.json'", ".", "format", "(", "out_file", ",", "'bbox'", ")", "\n", "result_files", "[", "'proposal'", "]", "=", "'{}.{}.json'", ".", "format", "(", "out_file", ",", "'bbox'", ")", "\n", "mmcv", ".", "dump", "(", "json_results", ",", "result_files", "[", "'bbox'", "]", ")", "\n", "", "elif", "isinstance", "(", "results", "[", "0", "]", ",", "tuple", ")", ":", "\n", "        ", "json_results", "=", "segm2json", "(", "dataset", ",", "results", ")", "\n", "result_files", "[", "'bbox'", "]", "=", "'{}.{}.json'", ".", "format", "(", "out_file", ",", "'bbox'", ")", "\n", "result_files", "[", "'proposal'", "]", "=", "'{}.{}.json'", ".", "format", "(", "out_file", ",", "'bbox'", ")", "\n", "result_files", "[", "'segm'", "]", "=", "'{}.{}.json'", ".", "format", "(", "out_file", ",", "'segm'", ")", "\n", "if", "dump", ":", "\n", "            ", "mmcv", ".", "dump", "(", "json_results", "[", "0", "]", ",", "result_files", "[", "'bbox'", "]", ")", "\n", "print", "(", "'\\nresults wrote to {}'", ".", "format", "(", "result_files", "[", "'bbox'", "]", ")", ")", "\n", "mmcv", ".", "dump", "(", "json_results", "[", "1", "]", ",", "result_files", "[", "'segm'", "]", ")", "\n", "print", "(", "'\\nresults wrote to {}'", ".", "format", "(", "result_files", "[", "'segm'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "result_files", "[", "'bbox'", "]", "=", "json_results", "[", "0", "]", "\n", "result_files", "[", "'segm'", "]", "=", "json_results", "[", "1", "]", "\n", "return", "result_files", "\n", "##add dumping proposal results", "\n", "", "json_results", "=", "proposal2json", "(", "dataset", ",", "np", ".", "stack", "(", "[", "item", "[", "2", "]", "for", "item", "in", "results", "]", ")", ")", "\n", "result_files", "[", "'proposal'", "]", "=", "'{}.{}.json'", ".", "format", "(", "out_file", ",", "'proposal'", ")", "\n", "mmcv", ".", "dump", "(", "json_results", ",", "result_files", "[", "'proposal'", "]", ")", "\n", "print", "(", "'\\nresults wrote to {}'", ".", "format", "(", "result_files", "[", "'proposal'", "]", ")", ")", "\n", "\n", "", "elif", "isinstance", "(", "results", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "json_results", "=", "proposal2json", "(", "dataset", ",", "results", ")", "\n", "result_files", "[", "'proposal'", "]", "=", "'{}.{}.json'", ".", "format", "(", "out_file", ",", "'proposal'", ")", "\n", "mmcv", ".", "dump", "(", "json_results", ",", "result_files", "[", "'proposal'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'invalid type of results'", ")", "\n", "", "return", "result_files", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.bbox_overlaps.bbox_overlaps": [[4, 50], ["bboxes1.astype.astype", "bboxes2.astype.astype", "numpy.zeros", "range", "numpy.zeros", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["def", "bbox_overlaps", "(", "bboxes1", ",", "bboxes2", ",", "mode", "=", "'iou'", ")", ":", "\n", "    ", "\"\"\"Calculate the ious between each bbox of bboxes1 and bboxes2.\n\n    Args:\n        bboxes1(ndarray): shape (n, 4)\n        bboxes2(ndarray): shape (k, 4)\n        mode(str): iou (intersection over union) or iof (intersection\n            over foreground)\n\n    Returns:\n        ious(ndarray): shape (n, k)\n    \"\"\"", "\n", "\n", "assert", "mode", "in", "[", "'iou'", ",", "'iof'", "]", "\n", "\n", "bboxes1", "=", "bboxes1", ".", "astype", "(", "np", ".", "float32", ")", "\n", "bboxes2", "=", "bboxes2", ".", "astype", "(", "np", ".", "float32", ")", "\n", "rows", "=", "bboxes1", ".", "shape", "[", "0", "]", "\n", "cols", "=", "bboxes2", ".", "shape", "[", "0", "]", "\n", "ious", "=", "np", ".", "zeros", "(", "(", "rows", ",", "cols", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "rows", "*", "cols", "==", "0", ":", "\n", "        ", "return", "ious", "\n", "", "exchange", "=", "False", "\n", "if", "bboxes1", ".", "shape", "[", "0", "]", ">", "bboxes2", ".", "shape", "[", "0", "]", ":", "\n", "        ", "bboxes1", ",", "bboxes2", "=", "bboxes2", ",", "bboxes1", "\n", "ious", "=", "np", ".", "zeros", "(", "(", "cols", ",", "rows", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "exchange", "=", "True", "\n", "", "area1", "=", "(", "bboxes1", "[", ":", ",", "2", "]", "-", "bboxes1", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "bboxes1", "[", ":", ",", "3", "]", "-", "bboxes1", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "area2", "=", "(", "bboxes2", "[", ":", ",", "2", "]", "-", "bboxes2", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "bboxes2", "[", ":", ",", "3", "]", "-", "bboxes2", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "for", "i", "in", "range", "(", "bboxes1", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "x_start", "=", "np", ".", "maximum", "(", "bboxes1", "[", "i", ",", "0", "]", ",", "bboxes2", "[", ":", ",", "0", "]", ")", "\n", "y_start", "=", "np", ".", "maximum", "(", "bboxes1", "[", "i", ",", "1", "]", ",", "bboxes2", "[", ":", ",", "1", "]", ")", "\n", "x_end", "=", "np", ".", "minimum", "(", "bboxes1", "[", "i", ",", "2", "]", ",", "bboxes2", "[", ":", ",", "2", "]", ")", "\n", "y_end", "=", "np", ".", "minimum", "(", "bboxes1", "[", "i", ",", "3", "]", ",", "bboxes2", "[", ":", ",", "3", "]", ")", "\n", "overlap", "=", "np", ".", "maximum", "(", "x_end", "-", "x_start", "+", "1", ",", "0", ")", "*", "np", ".", "maximum", "(", "\n", "y_end", "-", "y_start", "+", "1", ",", "0", ")", "\n", "if", "mode", "==", "'iou'", ":", "\n", "            ", "union", "=", "area1", "[", "i", "]", "+", "area2", "-", "overlap", "\n", "", "else", ":", "\n", "            ", "union", "=", "area1", "[", "i", "]", "if", "not", "exchange", "else", "area2", "\n", "", "ious", "[", "i", ",", ":", "]", "=", "overlap", "/", "union", "\n", "", "if", "exchange", ":", "\n", "        ", "ious", "=", "ious", ".", "T", "\n", "", "return", "ious", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.class_names.wider_face_classes": [[4, 6], ["None"], "function", ["None"], ["def", "wider_face_classes", "(", ")", ":", "\n", "    ", "return", "[", "'face'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.class_names.voc_classes": [[8, 13], ["None"], "function", ["None"], ["", "def", "voc_classes", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "\n", "'chair'", ",", "'cow'", ",", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "'motorbike'", ",", "'person'", ",", "\n", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "'tvmonitor'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.class_names.imagenet_det_classes": [[16, 54], ["None"], "function", ["None"], ["", "def", "imagenet_det_classes", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'accordion'", ",", "'airplane'", ",", "'ant'", ",", "'antelope'", ",", "'apple'", ",", "'armadillo'", ",", "\n", "'artichoke'", ",", "'axe'", ",", "'baby_bed'", ",", "'backpack'", ",", "'bagel'", ",", "'balance_beam'", ",", "\n", "'banana'", ",", "'band_aid'", ",", "'banjo'", ",", "'baseball'", ",", "'basketball'", ",", "'bathing_cap'", ",", "\n", "'beaker'", ",", "'bear'", ",", "'bee'", ",", "'bell_pepper'", ",", "'bench'", ",", "'bicycle'", ",", "'binder'", ",", "\n", "'bird'", ",", "'bookshelf'", ",", "'bow_tie'", ",", "'bow'", ",", "'bowl'", ",", "'brassiere'", ",", "'burrito'", ",", "\n", "'bus'", ",", "'butterfly'", ",", "'camel'", ",", "'can_opener'", ",", "'car'", ",", "'cart'", ",", "'cattle'", ",", "\n", "'cello'", ",", "'centipede'", ",", "'chain_saw'", ",", "'chair'", ",", "'chime'", ",", "'cocktail_shaker'", ",", "\n", "'coffee_maker'", ",", "'computer_keyboard'", ",", "'computer_mouse'", ",", "'corkscrew'", ",", "\n", "'cream'", ",", "'croquet_ball'", ",", "'crutch'", ",", "'cucumber'", ",", "'cup_or_mug'", ",", "'diaper'", ",", "\n", "'digital_clock'", ",", "'dishwasher'", ",", "'dog'", ",", "'domestic_cat'", ",", "'dragonfly'", ",", "\n", "'drum'", ",", "'dumbbell'", ",", "'electric_fan'", ",", "'elephant'", ",", "'face_powder'", ",", "'fig'", ",", "\n", "'filing_cabinet'", ",", "'flower_pot'", ",", "'flute'", ",", "'fox'", ",", "'french_horn'", ",", "'frog'", ",", "\n", "'frying_pan'", ",", "'giant_panda'", ",", "'goldfish'", ",", "'golf_ball'", ",", "'golfcart'", ",", "\n", "'guacamole'", ",", "'guitar'", ",", "'hair_dryer'", ",", "'hair_spray'", ",", "'hamburger'", ",", "\n", "'hammer'", ",", "'hamster'", ",", "'harmonica'", ",", "'harp'", ",", "'hat_with_a_wide_brim'", ",", "\n", "'head_cabbage'", ",", "'helmet'", ",", "'hippopotamus'", ",", "'horizontal_bar'", ",", "'horse'", ",", "\n", "'hotdog'", ",", "'iPod'", ",", "'isopod'", ",", "'jellyfish'", ",", "'koala_bear'", ",", "'ladle'", ",", "\n", "'ladybug'", ",", "'lamp'", ",", "'laptop'", ",", "'lemon'", ",", "'lion'", ",", "'lipstick'", ",", "'lizard'", ",", "\n", "'lobster'", ",", "'maillot'", ",", "'maraca'", ",", "'microphone'", ",", "'microwave'", ",", "'milk_can'", ",", "\n", "'miniskirt'", ",", "'monkey'", ",", "'motorcycle'", ",", "'mushroom'", ",", "'nail'", ",", "'neck_brace'", ",", "\n", "'oboe'", ",", "'orange'", ",", "'otter'", ",", "'pencil_box'", ",", "'pencil_sharpener'", ",", "'perfume'", ",", "\n", "'person'", ",", "'piano'", ",", "'pineapple'", ",", "'ping-pong_ball'", ",", "'pitcher'", ",", "'pizza'", ",", "\n", "'plastic_bag'", ",", "'plate_rack'", ",", "'pomegranate'", ",", "'popsicle'", ",", "'porcupine'", ",", "\n", "'power_drill'", ",", "'pretzel'", ",", "'printer'", ",", "'puck'", ",", "'punching_bag'", ",", "'purse'", ",", "\n", "'rabbit'", ",", "'racket'", ",", "'ray'", ",", "'red_panda'", ",", "'refrigerator'", ",", "\n", "'remote_control'", ",", "'rubber_eraser'", ",", "'rugby_ball'", ",", "'ruler'", ",", "\n", "'salt_or_pepper_shaker'", ",", "'saxophone'", ",", "'scorpion'", ",", "'screwdriver'", ",", "\n", "'seal'", ",", "'sheep'", ",", "'ski'", ",", "'skunk'", ",", "'snail'", ",", "'snake'", ",", "'snowmobile'", ",", "\n", "'snowplow'", ",", "'soap_dispenser'", ",", "'soccer_ball'", ",", "'sofa'", ",", "'spatula'", ",", "\n", "'squirrel'", ",", "'starfish'", ",", "'stethoscope'", ",", "'stove'", ",", "'strainer'", ",", "\n", "'strawberry'", ",", "'stretcher'", ",", "'sunglasses'", ",", "'swimming_trunks'", ",", "'swine'", ",", "\n", "'syringe'", ",", "'table'", ",", "'tape_player'", ",", "'tennis_ball'", ",", "'tick'", ",", "'tie'", ",", "\n", "'tiger'", ",", "'toaster'", ",", "'traffic_light'", ",", "'train'", ",", "'trombone'", ",", "'trumpet'", ",", "\n", "'turtle'", ",", "'tv_or_monitor'", ",", "'unicycle'", ",", "'vacuum'", ",", "'violin'", ",", "\n", "'volleyball'", ",", "'waffle_iron'", ",", "'washer'", ",", "'water_bottle'", ",", "'watercraft'", ",", "\n", "'whale'", ",", "'wine_bottle'", ",", "'zebra'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.class_names.imagenet_vid_classes": [[57, 64], ["None"], "function", ["None"], ["", "def", "imagenet_vid_classes", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'airplane'", ",", "'antelope'", ",", "'bear'", ",", "'bicycle'", ",", "'bird'", ",", "'bus'", ",", "'car'", ",", "\n", "'cattle'", ",", "'dog'", ",", "'domestic_cat'", ",", "'elephant'", ",", "'fox'", ",", "'giant_panda'", ",", "\n", "'hamster'", ",", "'horse'", ",", "'lion'", ",", "'lizard'", ",", "'monkey'", ",", "'motorcycle'", ",", "'rabbit'", ",", "\n", "'red_panda'", ",", "'sheep'", ",", "'snake'", ",", "'squirrel'", ",", "'tiger'", ",", "'train'", ",", "'turtle'", ",", "\n", "'watercraft'", ",", "'whale'", ",", "'zebra'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.class_names.coco_classes": [[67, 82], ["None"], "function", ["None"], ["", "def", "coco_classes", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'person'", ",", "'bicycle'", ",", "'car'", ",", "'motorcycle'", ",", "'airplane'", ",", "'bus'", ",", "'train'", ",", "\n", "'truck'", ",", "'boat'", ",", "'traffic_light'", ",", "'fire_hydrant'", ",", "'stop_sign'", ",", "\n", "'parking_meter'", ",", "'bench'", ",", "'bird'", ",", "'cat'", ",", "'dog'", ",", "'horse'", ",", "'sheep'", ",", "\n", "'cow'", ",", "'elephant'", ",", "'bear'", ",", "'zebra'", ",", "'giraffe'", ",", "'backpack'", ",", "'umbrella'", ",", "\n", "'handbag'", ",", "'tie'", ",", "'suitcase'", ",", "'frisbee'", ",", "'skis'", ",", "'snowboard'", ",", "\n", "'sports_ball'", ",", "'kite'", ",", "'baseball_bat'", ",", "'baseball_glove'", ",", "'skateboard'", ",", "\n", "'surfboard'", ",", "'tennis_racket'", ",", "'bottle'", ",", "'wine_glass'", ",", "'cup'", ",", "'fork'", ",", "\n", "'knife'", ",", "'spoon'", ",", "'bowl'", ",", "'banana'", ",", "'apple'", ",", "'sandwich'", ",", "'orange'", ",", "\n", "'broccoli'", ",", "'carrot'", ",", "'hot_dog'", ",", "'pizza'", ",", "'donut'", ",", "'cake'", ",", "'chair'", ",", "\n", "'couch'", ",", "'potted_plant'", ",", "'bed'", ",", "'dining_table'", ",", "'toilet'", ",", "'tv'", ",", "\n", "'laptop'", ",", "'mouse'", ",", "'remote'", ",", "'keyboard'", ",", "'cell_phone'", ",", "'microwave'", ",", "\n", "'oven'", ",", "'toaster'", ",", "'sink'", ",", "'refrigerator'", ",", "'book'", ",", "'clock'", ",", "'vase'", ",", "\n", "'scissors'", ",", "'teddy_bear'", ",", "'hair_drier'", ",", "'toothbrush'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.class_names.cityscapes_classes": [[85, 89], ["None"], "function", ["None"], ["", "def", "cityscapes_classes", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'person'", ",", "'rider'", ",", "'car'", ",", "'truck'", ",", "'bus'", ",", "'train'", ",", "'motorcycle'", ",", "\n", "'bicycle'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.class_names.get_classes": [[102, 117], ["dataset_aliases.items", "mmcv.is_str", "TypeError", "eval", "ValueError", "type"], "function", ["None"], ["def", "get_classes", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Get class names of a dataset.\"\"\"", "\n", "alias2name", "=", "{", "}", "\n", "for", "name", ",", "aliases", "in", "dataset_aliases", ".", "items", "(", ")", ":", "\n", "        ", "for", "alias", "in", "aliases", ":", "\n", "            ", "alias2name", "[", "alias", "]", "=", "name", "\n", "\n", "", "", "if", "mmcv", ".", "is_str", "(", "dataset", ")", ":", "\n", "        ", "if", "dataset", "in", "alias2name", ":", "\n", "            ", "labels", "=", "eval", "(", "alias2name", "[", "dataset", "]", "+", "'_classes()'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unrecognized dataset: {}'", ".", "format", "(", "dataset", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'dataset must a str, but got {}'", ".", "format", "(", "type", "(", "dataset", ")", ")", ")", "\n", "", "return", "labels", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.eval_hooks.DistEvalHook.__init__": [[20, 30], ["isinstance", "isinstance", "mmdet.datasets.build_dataset", "TypeError", "type"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.datasets.builder.build_dataset"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "interval", "=", "1", ")", ":", "\n", "        ", "if", "isinstance", "(", "dataset", ",", "Dataset", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "dataset", "\n", "", "elif", "isinstance", "(", "dataset", ",", "dict", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "datasets", ".", "build_dataset", "(", "dataset", ",", "{", "'test_mode'", ":", "True", "}", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'dataset must be a Dataset object or a dict, not {}'", ".", "format", "(", "\n", "type", "(", "dataset", ")", ")", ")", "\n", "", "self", ".", "interval", "=", "interval", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.eval_hooks.DistEvalHook.after_train_epoch": [[31, 71], ["runner.model.eval", "range", "torch.barrier", "torch.barrier", "eval_hooks.DistEvalHook.every_n_epochs", "mmcv.ProgressBar", "len", "print", "torch.barrier", "torch.barrier", "range", "eval_hooks.DistEvalHook.evaluate", "os.join", "os.join", "mmcv.dump", "torch.barrier", "torch.barrier", "range", "len", "mmcv.parallel.scatter", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "runner.model", "range", "os.join", "os.join", "mmcv.load", "range", "os.remove", "os.remove", "os.remove", "os.remove", "len", "mmcv.parallel.collate", "mmcv.ProgressBar.update", "len", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.evaluate"], ["", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "not", "self", ".", "every_n_epochs", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "", "runner", ".", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", "]", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "self", ".", "dataset", ")", ")", "\n", "", "for", "idx", "in", "range", "(", "runner", ".", "rank", ",", "len", "(", "self", ".", "dataset", ")", ",", "runner", ".", "world_size", ")", ":", "\n", "            ", "data", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "data_gpu", "=", "scatter", "(", "\n", "collate", "(", "[", "data", "]", ",", "samples_per_gpu", "=", "1", ")", ",", "\n", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ")", "[", "0", "]", "\n", "\n", "# compute output", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "result", "=", "runner", ".", "model", "(", "\n", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data_gpu", ")", "\n", "", "results", "[", "idx", "]", "=", "result", "\n", "\n", "batch_size", "=", "runner", ".", "world_size", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "                ", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "", "", "", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "'\\n'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "runner", ".", "world_size", ")", ":", "\n", "                ", "tmp_file", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'temp_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "tmp_results", "=", "mmcv", ".", "load", "(", "tmp_file", ")", "\n", "for", "idx", "in", "range", "(", "i", ",", "len", "(", "results", ")", ",", "runner", ".", "world_size", ")", ":", "\n", "                    ", "results", "[", "idx", "]", "=", "tmp_results", "[", "idx", "]", "\n", "", "os", ".", "remove", "(", "tmp_file", ")", "\n", "", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "", "else", ":", "\n", "            ", "tmp_file", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "\n", "'temp_{}.pkl'", ".", "format", "(", "runner", ".", "rank", ")", ")", "\n", "mmcv", ".", "dump", "(", "results", ",", "tmp_file", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.eval_hooks.DistEvalHook.evaluate": [[72, 74], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.eval_hooks.DistEvalmAPHook.evaluate": [[78, 112], ["range", "mean_ap.eval_map", "len", "eval_hooks.DistEvalmAPHook.dataset.get_ann_info", "gt_bboxes.append", "gt_labels.append", "hasattr", "numpy.concatenate", "gt_ignore.append", "numpy.vstack", "numpy.concatenate", "numpy.zeros", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.mean_ap.eval_map", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.lvis.LvisDataset.get_ann_info"], ["    ", "def", "evaluate", "(", "self", ",", "runner", ",", "results", ")", ":", "\n", "        ", "gt_bboxes", "=", "[", "]", "\n", "gt_labels", "=", "[", "]", "\n", "gt_ignore", "=", "[", "]", "if", "self", ".", "dataset", ".", "with_crowd", "else", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", ":", "\n", "            ", "ann", "=", "self", ".", "dataset", ".", "get_ann_info", "(", "i", ")", "\n", "bboxes", "=", "ann", "[", "'bboxes'", "]", "\n", "labels", "=", "ann", "[", "'labels'", "]", "\n", "if", "gt_ignore", "is", "not", "None", ":", "\n", "                ", "ignore", "=", "np", ".", "concatenate", "(", "[", "\n", "np", ".", "zeros", "(", "bboxes", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", ",", "\n", "np", ".", "ones", "(", "ann", "[", "'bboxes_ignore'", "]", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "]", ")", "\n", "gt_ignore", ".", "append", "(", "ignore", ")", "\n", "bboxes", "=", "np", ".", "vstack", "(", "[", "bboxes", ",", "ann", "[", "'bboxes_ignore'", "]", "]", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "[", "labels", ",", "ann", "[", "'labels_ignore'", "]", "]", ")", "\n", "", "gt_bboxes", ".", "append", "(", "bboxes", ")", "\n", "gt_labels", ".", "append", "(", "labels", ")", "\n", "# If the dataset is VOC2007, then use 11 points mAP evaluation.", "\n", "", "if", "hasattr", "(", "self", ".", "dataset", ",", "'year'", ")", "and", "self", ".", "dataset", ".", "year", "==", "2007", ":", "\n", "            ", "ds_name", "=", "'voc07'", "\n", "", "else", ":", "\n", "            ", "ds_name", "=", "self", ".", "dataset", ".", "CLASSES", "\n", "", "mean_ap", ",", "eval_results", "=", "eval_map", "(", "\n", "results", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_ignore", "=", "gt_ignore", ",", "\n", "scale_ranges", "=", "None", ",", "\n", "iou_thr", "=", "0.5", ",", "\n", "dataset", "=", "ds_name", ",", "\n", "print_summary", "=", "True", ")", "\n", "runner", ".", "log_buffer", ".", "output", "[", "'mAP'", "]", "=", "mean_ap", "\n", "runner", ".", "log_buffer", ".", "ready", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.eval_hooks.CocoDistEvalRecallHook.__init__": [[116, 125], ["numpy.arange", "eval_hooks.DistEvalHook.__init__", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "interval", "=", "1", ",", "\n", "proposal_nums", "=", "(", "100", ",", "300", ",", "1000", ")", ",", "\n", "iou_thrs", "=", "np", ".", "arange", "(", "0.5", ",", "0.96", ",", "0.05", ")", ")", ":", "\n", "        ", "super", "(", "CocoDistEvalRecallHook", ",", "self", ")", ".", "__init__", "(", "\n", "dataset", ",", "interval", "=", "interval", ")", "\n", "self", ".", "proposal_nums", "=", "np", ".", "array", "(", "proposal_nums", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "iou_thrs", "=", "np", ".", "array", "(", "iou_thrs", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.eval_hooks.CocoDistEvalRecallHook.evaluate": [[126, 134], ["coco_utils.fast_eval_recall", "enumerate"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.coco_utils.fast_eval_recall"], ["", "def", "evaluate", "(", "self", ",", "runner", ",", "results", ")", ":", "\n", "# the official coco evaluation is too slow, here we use our own", "\n", "# implementation instead, which may get slightly different results", "\n", "        ", "ar", "=", "fast_eval_recall", "(", "results", ",", "self", ".", "dataset", ".", "coco", ",", "self", ".", "proposal_nums", ",", "\n", "self", ".", "iou_thrs", ")", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "self", ".", "proposal_nums", ")", ":", "\n", "            ", "runner", ".", "log_buffer", ".", "output", "[", "'AR@{}'", ".", "format", "(", "num", ")", "]", "=", "ar", "[", "i", "]", "\n", "", "runner", ".", "log_buffer", ".", "ready", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.eval_hooks.CocoDistEvalmAPHook.evaluate": [[138, 169], ["os.join", "os.join", "coco_utils.results2json", "cocoGt.getImgIds", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "pycocotools.cocoeval.COCOeval.summarize", "range", "os.remove", "os.remove", "os.remove", "os.remove", "cocoGt.loadRes", "len", "float", "print"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.results2json", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.evaluate", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.accumulate", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.summarize"], ["    ", "def", "evaluate", "(", "self", ",", "runner", ",", "results", ")", ":", "\n", "        ", "tmp_file", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'temp_0'", ")", "\n", "result_files", "=", "results2json", "(", "self", ".", "dataset", ",", "results", ",", "tmp_file", ")", "\n", "\n", "res_types", "=", "[", "'bbox'", ",", "'segm'", "\n", "]", "if", "runner", ".", "model", ".", "module", ".", "with_mask", "else", "[", "'bbox'", "]", "\n", "cocoGt", "=", "self", ".", "dataset", ".", "coco", "\n", "imgIds", "=", "cocoGt", ".", "getImgIds", "(", ")", "\n", "for", "res_type", "in", "res_types", ":", "\n", "            ", "try", ":", "\n", "                ", "cocoDt", "=", "cocoGt", ".", "loadRes", "(", "result_files", "[", "res_type", "]", ")", "\n", "", "except", "IndexError", ":", "\n", "                ", "print", "(", "'No prediction found.'", ")", "\n", "break", "\n", "", "iou_type", "=", "res_type", "\n", "cocoEval", "=", "COCOeval", "(", "cocoGt", ",", "cocoDt", ",", "iou_type", ")", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "imgIds", "\n", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "cocoEval", ".", "summarize", "(", ")", "\n", "metrics", "=", "[", "'mAP'", ",", "'mAP_50'", ",", "'mAP_75'", ",", "'mAP_s'", ",", "'mAP_m'", ",", "'mAP_l'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "metrics", ")", ")", ":", "\n", "                ", "key", "=", "'{}_{}'", ".", "format", "(", "res_type", ",", "metrics", "[", "i", "]", ")", "\n", "val", "=", "float", "(", "'{:.3f}'", ".", "format", "(", "cocoEval", ".", "stats", "[", "i", "]", ")", ")", "\n", "runner", ".", "log_buffer", ".", "output", "[", "key", "]", "=", "val", "\n", "", "runner", ".", "log_buffer", ".", "output", "[", "'{}_mAP_copypaste'", ".", "format", "(", "res_type", ")", "]", "=", "(", "\n", "'{ap[0]:.3f} {ap[1]:.3f} {ap[2]:.3f} {ap[3]:.3f} '", "\n", "'{ap[4]:.3f} {ap[5]:.3f}'", ")", ".", "format", "(", "ap", "=", "cocoEval", ".", "stats", "[", ":", "6", "]", ")", "\n", "", "runner", ".", "log_buffer", ".", "ready", "=", "True", "\n", "for", "res_type", "in", "res_types", ":", "\n", "            ", "os", ".", "remove", "(", "result_files", "[", "res_type", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.lvis_eval": [[17, 60], ["mmcv.is_str", "lvis_api.lvis.lvis.LVIS", "lvis_utils.lvis_fast_eval_recall", "enumerate", "lvis_api.lvis.LVISEval", "lvis_api.lvis.LVISEval.run", "lvis_api.lvis.LVISEval.print_results", "numpy.array", "print", "range", "pickle.dump", "list", "lvis_utils.lvis_fast_eval_recall", "enumerate", "open", "numpy.array", "per_cat_recall.update", "print"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.lvis_fast_eval_recall", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.run", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.print_results", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.lvis_fast_eval_recall"], ["def", "lvis_eval", "(", "result_files", ",", "result_types", ",", "lvis", ",", "max_dets", "=", "(", "100", ",", "300", ",", "1000", ")", ",", "existing_json", "=", "None", ")", ":", "\n", "    ", "for", "res_type", "in", "result_types", ":", "\n", "        ", "assert", "res_type", "in", "[", "\n", "'proposal'", ",", "'proposal_fast'", ",", "'proposal_fast_percat'", ",", "'bbox'", ",", "'segm'", ",", "'keypoints'", "\n", "]", "\n", "\n", "", "if", "mmcv", ".", "is_str", "(", "lvis", ")", ":", "\n", "        ", "lvis", "=", "LVIS", "(", "lvis", ")", "\n", "# assert isinstance(lvis, LVIS)", "\n", "\n", "", "if", "result_types", "==", "[", "'proposal_fast'", "]", ":", "\n", "        ", "ar", "=", "lvis_fast_eval_recall", "(", "result_files", ",", "lvis", ",", "np", ".", "array", "(", "max_dets", ")", ")", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "max_dets", ")", ":", "\n", "            ", "print", "(", "'AR@{}\\t= {:.4f}'", ".", "format", "(", "num", ",", "ar", "[", "i", "]", ")", ")", "\n", "", "return", "\n", "\n", "", "elif", "result_types", "==", "[", "'proposal_fast_percat'", "]", ":", "\n", "        ", "assert", "existing_json", "is", "not", "None", "\n", "per_cat_recall", "=", "{", "}", "\n", "for", "cat_id", "in", "range", "(", "1", ",", "1231", ")", ":", "\n", "            ", "ar", "=", "lvis_fast_eval_recall", "(", "result_files", ",", "lvis", ",", "np", ".", "array", "(", "max_dets", ")", ",", "category_id", "=", "cat_id", ")", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "max_dets", ")", ":", "\n", "                ", "per_cat_recall", ".", "update", "(", "{", "cat_id", ":", "ar", "}", ")", "\n", "print", "(", "'cat{} AR@{}\\t= {:.4f}'", ".", "format", "(", "cat_id", ",", "num", ",", "ar", "[", "i", "]", ")", ")", "\n", "", "", "pickle", ".", "dump", "(", "per_cat_recall", ",", "open", "(", "'./{}_per_cat_recall.pt'", ".", "format", "(", "existing_json", ")", ",", "'wb'", ")", ")", "\n", "return", "\n", "", "for", "res_type", "in", "result_types", ":", "\n", "        ", "result_file", "=", "result_files", "[", "res_type", "]", "\n", "# assert result_file.endswith('.json')", "\n", "\n", "# coco_dets = lvis.loadRes(result_file)", "\n", "# img_ids = lvis.get_img_ids()", "\n", "iou_type", "=", "'bbox'", "if", "res_type", "==", "'proposal'", "else", "res_type", "\n", "lvisEval", "=", "LVISEval", "(", "ANNOTATION_PATH", ",", "result_file", ",", "iou_type", ")", "\n", "# lvisEval.params.imgIds = img_ids", "\n", "if", "res_type", "==", "'proposal'", ":", "\n", "            ", "lvisEval", ".", "params", ".", "use_cats", "=", "0", "\n", "lvisEval", ".", "params", ".", "max_dets", "=", "list", "(", "max_dets", ")", "\n", "# cocoEval.evaluate()", "\n", "# cocoEval.accumulate()", "\n", "# cocoEval.summarize()", "\n", "", "lvisEval", ".", "run", "(", ")", "\n", "lvisEval", ".", "print_results", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.lvis_fast_eval_recall": [[62, 101], ["numpy.arange", "mmcv.is_str", "lvis.get_img_ids", "range", "recall.eval_recalls", "recall.eval_recalls.mean", "mmcv.load.endswith", "mmcv.load", "len", "lvis.get_ann_ids", "lvis.load_anns", "numpy.array", "gt_bboxes.append", "isinstance", "TypeError", "len", "gt_bboxes.append", "np.zeros.append", "numpy.zeros", "numpy.zeros", "type", "ann.get"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_img_ids", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.recall.eval_recalls", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_ann_ids", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.load_anns", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get"], ["", "", "def", "lvis_fast_eval_recall", "(", "results", ",", "\n", "lvis", ",", "\n", "max_dets", ",", "\n", "category_id", "=", "None", ",", "\n", "iou_thrs", "=", "np", ".", "arange", "(", "0.5", ",", "0.96", ",", "0.05", ")", ")", ":", "\n", "    ", "if", "mmcv", ".", "is_str", "(", "results", ")", ":", "\n", "        ", "assert", "results", ".", "endswith", "(", "'.pkl'", ")", "\n", "results", "=", "mmcv", ".", "load", "(", "results", ")", "\n", "", "elif", "not", "isinstance", "(", "results", ",", "list", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'results must be a list of numpy arrays or a filename, not {}'", ".", "\n", "format", "(", "type", "(", "results", ")", ")", ")", "\n", "\n", "", "gt_bboxes", "=", "[", "]", "\n", "img_ids", "=", "lvis", ".", "get_img_ids", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "img_ids", ")", ")", ":", "\n", "        ", "ann_ids", "=", "lvis", ".", "get_ann_ids", "(", "img_ids", "=", "[", "img_ids", "[", "i", "]", "]", ")", "\n", "ann_info", "=", "lvis", ".", "load_anns", "(", "ann_ids", ")", "\n", "if", "len", "(", "ann_info", ")", "==", "0", ":", "\n", "            ", "gt_bboxes", ".", "append", "(", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", ")", "\n", "continue", "\n", "", "bboxes", "=", "[", "]", "\n", "for", "ann", "in", "ann_info", ":", "\n", "# if ann.get('ignore', False) or ann['iscrowd']:", "\n", "#     continue", "\n", "            ", "if", "category_id", ":", "\n", "                ", "if", "ann", ".", "get", "(", "'category_id'", ")", "!=", "category_id", ":", "\n", "                    ", "continue", "\n", "", "", "x1", ",", "y1", ",", "w", ",", "h", "=", "ann", "[", "'bbox'", "]", "\n", "bboxes", ".", "append", "(", "[", "x1", ",", "y1", ",", "x1", "+", "w", "-", "1", ",", "y1", "+", "h", "-", "1", "]", ")", "\n", "", "bboxes", "=", "np", ".", "array", "(", "bboxes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "", "gt_bboxes", ".", "append", "(", "bboxes", ")", "\n", "\n", "", "recalls", "=", "eval_recalls", "(", "\n", "gt_bboxes", ",", "results", ",", "max_dets", ",", "iou_thrs", ",", "print_summary", "=", "False", ")", "\n", "ar", "=", "recalls", ".", "mean", "(", "axis", "=", "1", ")", "\n", "return", "ar", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.xyxy2xywh": [[103, 110], ["bbox.tolist"], "function", ["None"], ["", "def", "xyxy2xywh", "(", "bbox", ")", ":", "\n", "    ", "_bbox", "=", "bbox", ".", "tolist", "(", ")", "\n", "return", "[", "\n", "_bbox", "[", "0", "]", ",", "\n", "_bbox", "[", "1", "]", ",", "\n", "_bbox", "[", "2", "]", "-", "_bbox", "[", "0", "]", "+", "1", ",", "\n", "_bbox", "[", "3", "]", "-", "_bbox", "[", "1", "]", "+", "1", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.proposal2json": [[113, 126], ["range", "len", "range", "dict", "lvis_utils.xyxy2xywh", "float", "json_results.append"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.xyxy2xywh"], ["", "def", "proposal2json", "(", "dataset", ",", "results", ")", ":", "\n", "    ", "json_results", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "img_id", "=", "dataset", ".", "img_ids", "[", "idx", "]", "\n", "bboxes", "=", "results", "[", "idx", "]", "\n", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'image_id'", "]", "=", "img_id", "\n", "data", "[", "'bbox'", "]", "=", "xyxy2xywh", "(", "bboxes", "[", "i", "]", ")", "\n", "data", "[", "'score'", "]", "=", "float", "(", "bboxes", "[", "i", "]", "[", "4", "]", ")", "\n", "data", "[", "'category_id'", "]", "=", "1", "\n", "json_results", ".", "append", "(", "data", ")", "\n", "", "", "return", "json_results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.det2json": [[128, 143], ["range", "len", "range", "len", "range", "dict", "lvis_utils.xyxy2xywh", "float", "json_results.append"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.xyxy2xywh"], ["", "def", "det2json", "(", "dataset", ",", "results", ")", ":", "\n", "    ", "json_results", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "img_id", "=", "dataset", ".", "img_ids", "[", "idx", "]", "\n", "result", "=", "results", "[", "idx", "]", "\n", "for", "label", "in", "range", "(", "len", "(", "result", ")", ")", ":", "\n", "            ", "bboxes", "=", "result", "[", "label", "]", "\n", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'image_id'", "]", "=", "img_id", "\n", "data", "[", "'bbox'", "]", "=", "xyxy2xywh", "(", "bboxes", "[", "i", "]", ")", "\n", "data", "[", "'score'", "]", "=", "float", "(", "bboxes", "[", "i", "]", "[", "4", "]", ")", "\n", "data", "[", "'category_id'", "]", "=", "dataset", ".", "cat_ids", "[", "label", "]", "\n", "json_results", ".", "append", "(", "data", ")", "\n", "", "", "", "return", "json_results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.segm2json": [[145, 179], ["range", "len", "range", "len", "range", "range", "dict", "lvis_utils.xyxy2xywh", "float", "bbox_json_results.append", "len", "dict", "float", "[].decode", "segm_json_results.append"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.xyxy2xywh"], ["", "def", "segm2json", "(", "dataset", ",", "results", ")", ":", "\n", "    ", "bbox_json_results", "=", "[", "]", "\n", "segm_json_results", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "img_id", "=", "dataset", ".", "img_ids", "[", "idx", "]", "\n", "det", ",", "seg", ",", "_", "=", "results", "[", "idx", "]", "\n", "for", "label", "in", "range", "(", "len", "(", "det", ")", ")", ":", "\n", "# bbox results", "\n", "            ", "bboxes", "=", "det", "[", "label", "]", "\n", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'image_id'", "]", "=", "img_id", "\n", "data", "[", "'bbox'", "]", "=", "xyxy2xywh", "(", "bboxes", "[", "i", "]", ")", "\n", "data", "[", "'score'", "]", "=", "float", "(", "bboxes", "[", "i", "]", "[", "4", "]", ")", "\n", "data", "[", "'category_id'", "]", "=", "dataset", ".", "cat_ids", "[", "label", "]", "\n", "bbox_json_results", ".", "append", "(", "data", ")", "\n", "\n", "# segm results", "\n", "# some detectors use different score for det and segm", "\n", "", "if", "len", "(", "seg", ")", "==", "2", ":", "\n", "                ", "segms", "=", "seg", "[", "0", "]", "[", "label", "]", "\n", "mask_score", "=", "seg", "[", "1", "]", "[", "label", "]", "\n", "", "else", ":", "\n", "                ", "segms", "=", "seg", "[", "label", "]", "\n", "mask_score", "=", "[", "bbox", "[", "4", "]", "for", "bbox", "in", "bboxes", "]", "\n", "", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'image_id'", "]", "=", "img_id", "\n", "data", "[", "'score'", "]", "=", "float", "(", "mask_score", "[", "i", "]", ")", "\n", "data", "[", "'category_id'", "]", "=", "dataset", ".", "cat_ids", "[", "label", "]", "\n", "segms", "[", "i", "]", "[", "'counts'", "]", "=", "segms", "[", "i", "]", "[", "'counts'", "]", ".", "decode", "(", ")", "\n", "data", "[", "'segmentation'", "]", "=", "segms", "[", "i", "]", "\n", "segm_json_results", ".", "append", "(", "data", ")", "\n", "", "", "", "return", "bbox_json_results", ",", "segm_json_results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.results2json": [[181, 207], ["dict", "isinstance", "lvis_utils.det2json", "mmcv.dump", "isinstance", "lvis_utils.segm2json", "mmcv.dump", "mmcv.dump", "lvis_utils.proposal2json", "mmcv.dump", "print", "isinstance", "numpy.stack", "lvis_utils.proposal2json", "mmcv.dump", "TypeError"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.det2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.segm2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.proposal2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.proposal2json"], ["", "def", "results2json", "(", "dataset", ",", "results", ",", "out_file", ")", ":", "\n", "    ", "result_files", "=", "dict", "(", ")", "\n", "if", "isinstance", "(", "results", "[", "0", "]", ",", "list", ")", ":", "\n", "        ", "json_results", "=", "det2json", "(", "dataset", ",", "results", ")", "\n", "result_files", "[", "'bbox'", "]", "=", "'{}.{}.json'", ".", "format", "(", "out_file", ",", "'bbox'", ")", "\n", "result_files", "[", "'proposal'", "]", "=", "'{}.{}.json'", ".", "format", "(", "out_file", ",", "'bbox'", ")", "\n", "mmcv", ".", "dump", "(", "json_results", ",", "result_files", "[", "'bbox'", "]", ")", "\n", "", "elif", "isinstance", "(", "results", "[", "0", "]", ",", "tuple", ")", ":", "\n", "        ", "json_results", "=", "segm2json", "(", "dataset", ",", "results", ")", "\n", "result_files", "[", "'bbox'", "]", "=", "'{}.{}.json'", ".", "format", "(", "out_file", ",", "'bbox'", ")", "\n", "result_files", "[", "'proposal'", "]", "=", "'{}.{}.json'", ".", "format", "(", "out_file", ",", "'bbox'", ")", "\n", "result_files", "[", "'segm'", "]", "=", "'{}.{}.json'", ".", "format", "(", "out_file", ",", "'segm'", ")", "\n", "mmcv", ".", "dump", "(", "json_results", "[", "0", "]", ",", "result_files", "[", "'bbox'", "]", ")", "\n", "mmcv", ".", "dump", "(", "json_results", "[", "1", "]", ",", "result_files", "[", "'segm'", "]", ")", "\n", "##add dumping proposal results", "\n", "json_results", "=", "proposal2json", "(", "dataset", ",", "np", ".", "stack", "(", "[", "item", "[", "2", "]", "for", "item", "in", "results", "]", ")", ")", "\n", "result_files", "[", "'proposal'", "]", "=", "'{}.{}.json'", ".", "format", "(", "out_file", ",", "'proposal'", ")", "\n", "mmcv", ".", "dump", "(", "json_results", ",", "result_files", "[", "'proposal'", "]", ")", "\n", "print", "(", "'proposals dumped'", ")", "\n", "", "elif", "isinstance", "(", "results", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "json_results", "=", "proposal2json", "(", "dataset", ",", "results", ")", "\n", "result_files", "[", "'proposal'", "]", "=", "'{}.{}.json'", ".", "format", "(", "out_file", ",", "'proposal'", ")", "\n", "mmcv", ".", "dump", "(", "json_results", ",", "result_files", "[", "'proposal'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'invalid type of results'", ")", "\n", "", "return", "result_files", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2delta": [[6, 32], ["proposals.float.float", "gt.float.float", "torch.log", "torch.log", "torch.stack", "deltas.sub_().div_.new_tensor().unsqueeze", "deltas.sub_().div_.new_tensor().unsqueeze", "deltas.sub_().div_.sub_().div_", "proposals.float.size", "gt.float.size", "deltas.sub_().div_.new_tensor", "deltas.sub_().div_.new_tensor", "deltas.sub_().div_.sub_"], "function", ["None"], ["'ImageTransform'", ",", "'BboxTransform'", ",", "'MaskTransform'", ",", "'SegMapTransform'", ",", "\n", "'Numpy2Tensor'", "\n", "]", "\n", "\n", "\n", "class", "ImageTransform", "(", "object", ")", ":", "\n", "    ", "\"\"\"Preprocess an image.\n\n    1. rescale the image to expected size\n    2. normalize the image\n    3. flip the image (if needed)\n    4. pad the image (if needed)\n    5. transpose to (c, h, w)\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "\n", "mean", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "std", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "to_rgb", "=", "True", ",", "\n", "size_divisor", "=", "None", ")", ":", "\n", "        ", "self", ".", "mean", "=", "np", ".", "array", "(", "mean", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "std", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "to_rgb", "=", "to_rgb", "\n", "self", ".", "size_divisor", "=", "size_divisor", "\n", "\n", "", "def", "__call__", "(", "self", ",", "img", ",", "scale", ",", "flip", "=", "False", ",", "keep_ratio", "=", "True", ")", ":", "\n", "        ", "if", "keep_ratio", ":", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.delta2bbox": [[34, 69], ["deltas.new_tensor().repeat", "deltas.new_tensor().repeat", "numpy.abs", "dw.clamp.clamp", "dh.clamp.clamp", "torch.addcmul", "torch.addcmul", "torch.stack().view_as", "numpy.log", "dw.clamp.exp", "dh.clamp.exp", "x1.clamp.clamp", "y1.clamp.clamp", "x2.clamp.clamp", "y2.clamp.clamp", "deltas.new_tensor", "deltas.size", "deltas.new_tensor", "deltas.size", "torch.stack"], "function", ["None"], ["", "else", ":", "\n", "            ", "img", ",", "w_scale", ",", "h_scale", "=", "mmcv", ".", "imresize", "(", "\n", "img", ",", "scale", ",", "return_scale", "=", "True", ")", "\n", "scale_factor", "=", "np", ".", "array", "(", "\n", "[", "w_scale", ",", "h_scale", ",", "w_scale", ",", "h_scale", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "img_shape", "=", "img", ".", "shape", "\n", "img", "=", "mmcv", ".", "imnormalize", "(", "img", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "to_rgb", ")", "\n", "if", "flip", ":", "\n", "            ", "img", "=", "mmcv", ".", "imflip", "(", "img", ")", "\n", "", "if", "self", ".", "size_divisor", "is", "not", "None", ":", "\n", "            ", "img", "=", "mmcv", ".", "impad_to_multiple", "(", "img", ",", "self", ".", "size_divisor", ")", "\n", "pad_shape", "=", "img", ".", "shape", "\n", "", "else", ":", "\n", "            ", "pad_shape", "=", "img_shape", "\n", "", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "return", "img", ",", "img_shape", ",", "pad_shape", ",", "scale_factor", "\n", "\n", "\n", "", "", "def", "bbox_flip", "(", "bboxes", ",", "img_shape", ")", ":", "\n", "    ", "\"\"\"Flip bboxes horizontally.\n\n    Args:\n        bboxes(ndarray): shape (..., 4*k)\n        img_shape(tuple): (height, width)\n    \"\"\"", "\n", "assert", "bboxes", ".", "shape", "[", "-", "1", "]", "%", "4", "==", "0", "\n", "w", "=", "img_shape", "[", "1", "]", "\n", "flipped", "=", "bboxes", ".", "copy", "(", ")", "\n", "flipped", "[", "...", ",", "0", ":", ":", "4", "]", "=", "w", "-", "bboxes", "[", "...", ",", "2", ":", ":", "4", "]", "-", "1", "\n", "flipped", "[", "...", ",", "2", ":", ":", "4", "]", "=", "w", "-", "bboxes", "[", "...", ",", "0", ":", ":", "4", "]", "-", "1", "\n", "return", "flipped", "\n", "\n", "\n", "", "class", "BboxTransform", "(", "object", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox_flip": [[71, 89], ["isinstance", "bboxes.clone", "isinstance", "mmcv.bbox_flip"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox_flip"], ["\n", "\n", "def", "__init__", "(", "self", ",", "max_num_gts", "=", "None", ")", ":", "\n", "        ", "self", ".", "max_num_gts", "=", "max_num_gts", "\n", "\n", "", "def", "__call__", "(", "self", ",", "bboxes", ",", "img_shape", ",", "scale_factor", ",", "flip", "=", "False", ")", ":", "\n", "        ", "gt_bboxes", "=", "bboxes", "*", "scale_factor", "\n", "if", "flip", ":", "\n", "            ", "gt_bboxes", "=", "bbox_flip", "(", "gt_bboxes", ",", "img_shape", ")", "\n", "", "gt_bboxes", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "gt_bboxes", "[", ":", ",", "0", ":", ":", "2", "]", ",", "0", ",", "img_shape", "[", "1", "]", "-", "1", ")", "\n", "gt_bboxes", "[", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "gt_bboxes", "[", ":", ",", "1", ":", ":", "2", "]", ",", "0", ",", "img_shape", "[", "0", "]", "-", "1", ")", "\n", "if", "self", ".", "max_num_gts", "is", "None", ":", "\n", "            ", "return", "gt_bboxes", "\n", "", "else", ":", "\n", "            ", "num_gts", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "padded_bboxes", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_num_gts", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "padded_bboxes", "[", ":", "num_gts", ",", ":", "]", "=", "gt_bboxes", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox_mapping": [[91, 97], ["transforms.bbox_flip"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox_flip"], ["\n", "\n", "", "", "", "class", "MaskTransform", "(", "object", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox_mapping_back": [[99, 104], ["transforms.bbox_flip"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox_flip"], ["\n", "\n", "def", "__call__", "(", "self", ",", "masks", ",", "pad_shape", ",", "scale_factor", ",", "flip", "=", "False", ")", ":", "\n", "        ", "masks", "=", "[", "\n", "mmcv", ".", "imrescale", "(", "mask", ",", "scale_factor", ",", "interpolation", "=", "'nearest'", ")", "\n", "for", "mask", "in", "masks", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi": [[106, 126], ["enumerate", "torch.cat", "rois_list.append", "bboxes.size", "bboxes.new_full", "torch.cat", "bboxes.new_zeros", "bboxes.size"], "function", ["None"], ["if", "flip", ":", "\n", "            ", "masks", "=", "[", "mask", "[", ":", ",", ":", ":", "-", "1", "]", "for", "mask", "in", "masks", "]", "\n", "", "padded_masks", "=", "[", "\n", "mmcv", ".", "impad", "(", "mask", ",", "pad_shape", "[", ":", "2", "]", ",", "pad_val", "=", "0", ")", "for", "mask", "in", "masks", "\n", "]", "\n", "padded_masks", "=", "np", ".", "stack", "(", "padded_masks", ",", "axis", "=", "0", ")", "\n", "return", "padded_masks", "\n", "\n", "\n", "", "", "class", "SegMapTransform", "(", "object", ")", ":", "\n", "    ", "\"\"\"Preprocess semantic segmentation maps.\n\n    1. rescale the segmentation map to expected size\n    3. flip the image (if needed)\n    4. pad the image (if needed)\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "size_divisor", "=", "None", ")", ":", "\n", "        ", "self", ".", "size_divisor", "=", "size_divisor", "\n", "\n", "", "def", "__call__", "(", "self", ",", "img", ",", "scale", ",", "flip", "=", "False", ",", "keep_ratio", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.roi2bbox": [[128, 136], ["torch.unique", "rois[].cpu", "bbox_list.append", "img_id.item"], "function", ["None"], ["            ", "img", "=", "mmcv", ".", "imrescale", "(", "img", ",", "scale", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "mmcv", ".", "imresize", "(", "img", ",", "scale", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "if", "flip", ":", "\n", "            ", "img", "=", "mmcv", ".", "imflip", "(", "img", ")", "\n", "", "if", "self", ".", "size_divisor", "is", "not", "None", ":", "\n", "            ", "img", "=", "mmcv", ".", "impad_to_multiple", "(", "img", ",", "self", ".", "size_divisor", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2result": [[138, 157], ["bboxes.cpu().numpy.cpu().numpy", "labels.cpu().numpy.cpu().numpy", "numpy.zeros", "range", "bboxes.cpu().numpy.cpu", "labels.cpu().numpy.cpu", "range"], "function", ["None"], ["", "", "class", "Numpy2Tensor", "(", "object", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "__call__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "args", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "[", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "array", ")", ")", "for", "array", "in", "args", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.distance2bbox": [[159, 181], ["torch.stack", "x1.clamp.clamp", "y1.clamp.clamp", "x2.clamp.clamp", "y2.clamp.clamp"], "function", ["None"], []], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_assigner": [[6, 14], ["isinstance", "isinstance", "mmcv.runner.obj_from_dict", "TypeError", "type"], "function", ["None"], ["def", "build_assigner", "(", "cfg", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "isinstance", "(", "cfg", ",", "assigners", ".", "BaseAssigner", ")", ":", "\n", "        ", "return", "cfg", "\n", "", "elif", "isinstance", "(", "cfg", ",", "dict", ")", ":", "\n", "        ", "return", "mmcv", ".", "runner", ".", "obj_from_dict", "(", "cfg", ",", "assigners", ",", "default_args", "=", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'Invalid type {} for building a sampler'", ".", "format", "(", "\n", "type", "(", "cfg", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_sampler": [[16, 24], ["isinstance", "isinstance", "mmcv.runner.obj_from_dict", "TypeError", "type"], "function", ["None"], ["", "", "def", "build_sampler", "(", "cfg", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "isinstance", "(", "cfg", ",", "samplers", ".", "BaseSampler", ")", ":", "\n", "        ", "return", "cfg", "\n", "", "elif", "isinstance", "(", "cfg", ",", "dict", ")", ":", "\n", "        ", "return", "mmcv", ".", "runner", ".", "obj_from_dict", "(", "cfg", ",", "samplers", ",", "default_args", "=", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'Invalid type {} for building a sampler'", ".", "format", "(", "\n", "type", "(", "cfg", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.assign_and_sample": [[26, 34], ["assign_sampling.build_assigner", "assign_sampling.build_sampler", "build_assigner.assign", "build_sampler.sample"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_sampler", "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.max_iou_assigner.MaxIoUAssigner.assign", "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.pseudo_sampler.PseudoSampler.sample"], ["", "", "def", "assign_and_sample", "(", "bboxes", ",", "gt_bboxes", ",", "gt_bboxes_ignore", ",", "gt_labels", ",", "cfg", ")", ":", "\n", "    ", "bbox_assigner", "=", "build_assigner", "(", "cfg", ".", "assigner", ")", "\n", "bbox_sampler", "=", "build_sampler", "(", "cfg", ".", "sampler", ")", "\n", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "bboxes", ",", "gt_bboxes", ",", "gt_bboxes_ignore", ",", "\n", "gt_labels", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "\n", "gt_labels", ")", "\n", "return", "assign_result", ",", "sampling_result", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.geometry.bbox_overlaps": [[4, 64], ["bboxes1.size", "bboxes2.size", "torch.max", "torch.min", "torch.max", "torch.min", "bboxes1.new", "bboxes1.new"], "function", ["None"], ["def", "bbox_overlaps", "(", "bboxes1", ",", "bboxes2", ",", "mode", "=", "'iou'", ",", "is_aligned", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculate overlap between two set of bboxes.\n\n    If ``is_aligned`` is ``False``, then calculate the ious between each bbox\n    of bboxes1 and bboxes2, otherwise the ious between each aligned pair of\n    bboxes1 and bboxes2.\n\n    Args:\n        bboxes1 (Tensor): shape (m, 4)\n        bboxes2 (Tensor): shape (n, 4), if is_aligned is ``True``, then m and n\n            must be equal.\n        mode (str): \"iou\" (intersection over union) or iof (intersection over\n            foreground).\n\n    Returns:\n        ious(Tensor): shape (m, n) if is_aligned == False else shape (m, 1)\n    \"\"\"", "\n", "\n", "assert", "mode", "in", "[", "'iou'", ",", "'iof'", "]", "\n", "\n", "rows", "=", "bboxes1", ".", "size", "(", "0", ")", "\n", "cols", "=", "bboxes2", ".", "size", "(", "0", ")", "\n", "if", "is_aligned", ":", "\n", "        ", "assert", "rows", "==", "cols", "\n", "\n", "", "if", "rows", "*", "cols", "==", "0", ":", "\n", "        ", "return", "bboxes1", ".", "new", "(", "rows", ",", "1", ")", "if", "is_aligned", "else", "bboxes1", ".", "new", "(", "rows", ",", "cols", ")", "\n", "\n", "", "if", "is_aligned", ":", "\n", "        ", "lt", "=", "torch", ".", "max", "(", "bboxes1", "[", ":", ",", ":", "2", "]", ",", "bboxes2", "[", ":", ",", ":", "2", "]", ")", "# [rows, 2]", "\n", "rb", "=", "torch", ".", "min", "(", "bboxes1", "[", ":", ",", "2", ":", "]", ",", "bboxes2", "[", ":", ",", "2", ":", "]", ")", "# [rows, 2]", "\n", "\n", "wh", "=", "(", "rb", "-", "lt", "+", "1", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [rows, 2]", "\n", "overlap", "=", "wh", "[", ":", ",", "0", "]", "*", "wh", "[", ":", ",", "1", "]", "\n", "area1", "=", "(", "bboxes1", "[", ":", ",", "2", "]", "-", "bboxes1", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "bboxes1", "[", ":", ",", "3", "]", "-", "bboxes1", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "\n", "if", "mode", "==", "'iou'", ":", "\n", "            ", "area2", "=", "(", "bboxes2", "[", ":", ",", "2", "]", "-", "bboxes2", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "bboxes2", "[", ":", ",", "3", "]", "-", "bboxes2", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "ious", "=", "overlap", "/", "(", "area1", "+", "area2", "-", "overlap", ")", "\n", "", "else", ":", "\n", "            ", "ious", "=", "overlap", "/", "area1", "\n", "", "", "else", ":", "\n", "        ", "lt", "=", "torch", ".", "max", "(", "bboxes1", "[", ":", ",", "None", ",", ":", "2", "]", ",", "bboxes2", "[", ":", ",", ":", "2", "]", ")", "# [rows, cols, 2]", "\n", "rb", "=", "torch", ".", "min", "(", "bboxes1", "[", ":", ",", "None", ",", "2", ":", "]", ",", "bboxes2", "[", ":", ",", "2", ":", "]", ")", "# [rows, cols, 2]", "\n", "\n", "wh", "=", "(", "rb", "-", "lt", "+", "1", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [rows, cols, 2]", "\n", "overlap", "=", "wh", "[", ":", ",", ":", ",", "0", "]", "*", "wh", "[", ":", ",", ":", ",", "1", "]", "\n", "area1", "=", "(", "bboxes1", "[", ":", ",", "2", "]", "-", "bboxes1", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "bboxes1", "[", ":", ",", "3", "]", "-", "bboxes1", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "\n", "if", "mode", "==", "'iou'", ":", "\n", "            ", "area2", "=", "(", "bboxes2", "[", ":", ",", "2", "]", "-", "bboxes2", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "bboxes2", "[", ":", ",", "3", "]", "-", "bboxes2", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "ious", "=", "overlap", "/", "(", "area1", "[", ":", ",", "None", "]", "+", "area2", "-", "overlap", ")", "\n", "", "else", ":", "\n", "            ", "ious", "=", "overlap", "/", "(", "area1", "[", ":", ",", "None", "]", ")", "\n", "\n", "", "", "return", "ious", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.bbox_target.bbox_target": [[7, 37], ["utils.multi_apply", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.misc.multi_apply"], ["def", "bbox_target", "(", "pos_bboxes_list", ",", "\n", "neg_bboxes_list", ",", "\n", "pos_gt_bboxes_list", ",", "\n", "pos_gt_labels_list", ",", "\n", "pos_gt_inds", ",", "\n", "cfg", ",", "\n", "reg_classes", "=", "1", ",", "\n", "target_means", "=", "[", ".0", ",", ".0", ",", ".0", ",", ".0", "]", ",", "\n", "target_stds", "=", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", ",", "\n", "concat", "=", "True", ")", ":", "\n", "    ", "labels", ",", "gt_inds", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", "=", "multi_apply", "(", "\n", "bbox_target_single", ",", "\n", "pos_bboxes_list", ",", "\n", "neg_bboxes_list", ",", "\n", "pos_gt_bboxes_list", ",", "\n", "pos_gt_labels_list", ",", "\n", "pos_gt_inds", ",", "\n", "cfg", "=", "cfg", ",", "\n", "reg_classes", "=", "reg_classes", ",", "\n", "target_means", "=", "target_means", ",", "\n", "target_stds", "=", "target_stds", ")", "\n", "\n", "if", "concat", ":", "\n", "        ", "gt_num", "=", "torch", ".", "stack", "(", "[", "(", "label", ">", "0", ")", ".", "sum", "(", ")", ".", "to", "(", "label", ".", "device", ")", "for", "label", "in", "labels", "]", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "0", ")", "\n", "label_weights", "=", "torch", ".", "cat", "(", "label_weights", ",", "0", ")", "\n", "bbox_targets", "=", "torch", ".", "cat", "(", "bbox_targets", ",", "0", ")", "\n", "bbox_weights", "=", "torch", ".", "cat", "(", "bbox_weights", ",", "0", ")", "\n", "gt_inds", "=", "torch", ".", "cat", "(", "gt_inds", ",", "0", ")", "\n", "", "return", "labels", ",", "gt_inds", ",", "gt_num", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.bbox_target.bbox_target_single": [[39, 69], ["pos_bboxes.size", "neg_bboxes.size", "pos_bboxes.new_zeros", "pos_bboxes.new_zeros().fill_", "pos_bboxes.new_zeros", "pos_bboxes.new_zeros", "pos_bboxes.new_zeros", "transforms.bbox2delta", "pos_bboxes.new_zeros"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2delta"], ["", "def", "bbox_target_single", "(", "pos_bboxes", ",", "\n", "neg_bboxes", ",", "\n", "pos_gt_bboxes", ",", "\n", "pos_gt_labels", ",", "\n", "pos_gt_inds", ",", "\n", "cfg", ",", "\n", "reg_classes", "=", "1", ",", "\n", "target_means", "=", "[", ".0", ",", ".0", ",", ".0", ",", ".0", "]", ",", "\n", "target_stds", "=", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", ")", ":", "\n", "    ", "num_pos", "=", "pos_bboxes", ".", "size", "(", "0", ")", "\n", "num_neg", "=", "neg_bboxes", ".", "size", "(", "0", ")", "\n", "num_samples", "=", "num_pos", "+", "num_neg", "\n", "labels", "=", "pos_bboxes", ".", "new_zeros", "(", "num_samples", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "gt_inds", "=", "pos_bboxes", ".", "new_zeros", "(", "num_samples", ",", "dtype", "=", "torch", ".", "int", ")", ".", "fill_", "(", "-", "1", ")", "\n", "label_weights", "=", "pos_bboxes", ".", "new_zeros", "(", "num_samples", ")", "\n", "bbox_targets", "=", "pos_bboxes", ".", "new_zeros", "(", "num_samples", ",", "4", ")", "\n", "bbox_weights", "=", "pos_bboxes", ".", "new_zeros", "(", "num_samples", ",", "4", ")", "\n", "if", "num_pos", ">", "0", ":", "\n", "        ", "labels", "[", ":", "num_pos", "]", "=", "pos_gt_labels", "\n", "gt_inds", "[", ":", "num_pos", "]", "=", "pos_gt_inds", "\n", "pos_weight", "=", "1.0", "if", "cfg", ".", "pos_weight", "<=", "0", "else", "cfg", ".", "pos_weight", "\n", "label_weights", "[", ":", "num_pos", "]", "=", "pos_weight", "\n", "pos_bbox_targets", "=", "bbox2delta", "(", "pos_bboxes", ",", "pos_gt_bboxes", ",", "target_means", ",", "\n", "target_stds", ")", "\n", "bbox_targets", "[", ":", "num_pos", ",", ":", "]", "=", "pos_bbox_targets", "\n", "bbox_weights", "[", ":", "num_pos", ",", ":", "]", "=", "1", "\n", "", "if", "num_neg", ">", "0", ":", "\n", "        ", "label_weights", "[", "-", "num_neg", ":", "]", "=", "1.0", "\n", "\n", "", "return", "labels", ",", "gt_inds", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.bbox_target.expand_target": [[71, 81], ["bbox_targets.new_zeros", "bbox_weights.new_zeros", "torch.nonzero().squeeze", "bbox_targets.size", "bbox_weights.size", "torch.nonzero"], "function", ["None"], ["", "def", "expand_target", "(", "bbox_targets", ",", "bbox_weights", ",", "labels", ",", "num_classes", ")", ":", "\n", "    ", "bbox_targets_expand", "=", "bbox_targets", ".", "new_zeros", "(", "\n", "(", "bbox_targets", ".", "size", "(", "0", ")", ",", "4", "*", "num_classes", ")", ")", "\n", "bbox_weights_expand", "=", "bbox_weights", ".", "new_zeros", "(", "\n", "(", "bbox_weights", ".", "size", "(", "0", ")", ",", "4", "*", "num_classes", ")", ")", "\n", "for", "i", "in", "torch", ".", "nonzero", "(", "labels", ">", "0", ")", ".", "squeeze", "(", "-", "1", ")", ":", "\n", "        ", "start", ",", "end", "=", "labels", "[", "i", "]", "*", "4", ",", "(", "labels", "[", "i", "]", "+", "1", ")", "*", "4", "\n", "bbox_targets_expand", "[", "i", ",", "start", ":", "end", "]", "=", "bbox_targets", "[", "i", ",", ":", "]", "\n", "bbox_weights_expand", "[", "i", ",", "start", ":", "end", "]", "=", "bbox_weights", "[", "i", ",", ":", "]", "\n", "", "return", "bbox_targets_expand", ",", "bbox_weights_expand", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.base_sampler.BaseSampler.__init__": [[10, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num", ",", "\n", "pos_fraction", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "num", "=", "num", "\n", "self", ".", "pos_fraction", "=", "pos_fraction", "\n", "self", ".", "neg_pos_ub", "=", "neg_pos_ub", "\n", "self", ".", "add_gt_as_proposals", "=", "add_gt_as_proposals", "\n", "self", ".", "pos_sampler", "=", "self", "\n", "self", ".", "neg_sampler", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.base_sampler.BaseSampler._sample_pos": [[23, 26], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_sample_pos", "(", "self", ",", "assign_result", ",", "num_expected", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.base_sampler.BaseSampler._sample_neg": [[27, 30], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_sample_neg", "(", "self", ",", "assign_result", ",", "num_expected", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.base_sampler.BaseSampler._sample_neg_lowthr": [[31, 34], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_sample_neg_lowthr", "(", "self", ",", "assign_result", ",", "num_expected", ",", "lowthr", "=", "0.1", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.base_sampler.BaseSampler.sample": [[35, 83], ["torch.cat.new_zeros", "int", "base_sampler.BaseSampler.pos_sampler._sample_pos", "pos_inds.unique.unique.unique", "pos_inds.unique.unique.numel", "base_sampler.BaseSampler.neg_sampler._sample_neg_lowthr", "neg_inds.unique.unique.unique", "sampling_result.SamplingResult", "torch.cat", "assign_result.add_gt_", "torch.cat.new_ones", "torch.cat", "max", "int"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.samplers.pseudo_sampler.PseudoSampler._sample_pos", "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.random_sampler.RandomSampler._sample_neg_lowthr", "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.assign_result.AssignResult.add_gt_"], ["", "def", "sample", "(", "self", ",", "\n", "assign_result", ",", "\n", "bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Sample positive and negative bboxes.\n\n        This is a simple implementation of bbox sampling given candidates,\n        assigning results and ground truth bboxes.\n\n        Args:\n            assign_result (:obj:`AssignResult`): Bbox assigning results.\n            bboxes (Tensor): Boxes to be sampled from.\n            gt_bboxes (Tensor): Ground truth bboxes.\n            gt_labels (Tensor, optional): Class labels of ground truth bboxes.\n\n        Returns:\n            :obj:`SamplingResult`: Sampling result.\n        \"\"\"", "\n", "bboxes", "=", "bboxes", "[", ":", ",", ":", "4", "]", "\n", "\n", "gt_flags", "=", "bboxes", ".", "new_zeros", "(", "(", "bboxes", ".", "shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "if", "self", ".", "add_gt_as_proposals", ":", "\n", "            ", "bboxes", "=", "torch", ".", "cat", "(", "[", "gt_bboxes", ",", "bboxes", "]", ",", "dim", "=", "0", ")", "\n", "assign_result", ".", "add_gt_", "(", "gt_labels", ")", "\n", "gt_ones", "=", "bboxes", ".", "new_ones", "(", "gt_bboxes", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "gt_flags", "=", "torch", ".", "cat", "(", "[", "gt_ones", ",", "gt_flags", "]", ")", "\n", "\n", "", "num_expected_pos", "=", "int", "(", "self", ".", "num", "*", "self", ".", "pos_fraction", ")", "\n", "pos_inds", "=", "self", ".", "pos_sampler", ".", "_sample_pos", "(", "\n", "assign_result", ",", "num_expected_pos", ",", "bboxes", "=", "bboxes", ",", "**", "kwargs", ")", "\n", "# We found that sampled indices have duplicated items occasionally.", "\n", "# (may be a bug of PyTorch)", "\n", "pos_inds", "=", "pos_inds", ".", "unique", "(", ")", "\n", "num_sampled_pos", "=", "pos_inds", ".", "numel", "(", ")", "\n", "num_expected_neg", "=", "self", ".", "num", "-", "num_sampled_pos", "\n", "if", "self", ".", "neg_pos_ub", ">=", "0", ":", "\n", "            ", "_pos", "=", "max", "(", "1", ",", "num_sampled_pos", ")", "\n", "neg_upper_bound", "=", "int", "(", "self", ".", "neg_pos_ub", "*", "_pos", ")", "\n", "if", "num_expected_neg", ">", "neg_upper_bound", ":", "\n", "                ", "num_expected_neg", "=", "neg_upper_bound", "\n", "", "", "neg_inds", "=", "self", ".", "neg_sampler", ".", "_sample_neg_lowthr", "(", "\n", "assign_result", ",", "num_expected_neg", ",", "bboxes", "=", "bboxes", ",", "**", "kwargs", ")", "\n", "neg_inds", "=", "neg_inds", ".", "unique", "(", ")", "\n", "\n", "return", "SamplingResult", "(", "pos_inds", ",", "neg_inds", ",", "bboxes", ",", "gt_bboxes", ",", "\n", "assign_result", ",", "gt_flags", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.random_sampler.RandomSampler.__init__": [[9, 17], ["base_sampler.BaseSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num", ",", "\n", "pos_fraction", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RandomSampler", ",", "self", ")", ".", "__init__", "(", "num", ",", "pos_fraction", ",", "neg_pos_ub", ",", "\n", "add_gt_as_proposals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.random_sampler.RandomSampler.random_choice": [[18, 34], ["isinstance", "numpy.arange", "numpy.random.shuffle", "len", "numpy.array", "len", "isinstance", "torch.from_numpy().long().to", "torch.from_numpy().long", "torch.from_numpy"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "random_choice", "(", "gallery", ",", "num", ")", ":", "\n", "        ", "\"\"\"Random select some elements from the gallery.\n\n        It seems that Pytorch's implementation is slower than numpy so we use\n        numpy to randperm the indices.\n        \"\"\"", "\n", "assert", "len", "(", "gallery", ")", ">=", "num", "\n", "if", "isinstance", "(", "gallery", ",", "list", ")", ":", "\n", "            ", "gallery", "=", "np", ".", "array", "(", "gallery", ")", "\n", "", "cands", "=", "np", ".", "arange", "(", "len", "(", "gallery", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "cands", ")", "\n", "rand_inds", "=", "cands", "[", ":", "num", "]", "\n", "if", "not", "isinstance", "(", "gallery", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "rand_inds", "=", "torch", ".", "from_numpy", "(", "rand_inds", ")", ".", "long", "(", ")", ".", "to", "(", "gallery", ".", "device", ")", "\n", "", "return", "gallery", "[", "rand_inds", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.random_sampler.RandomSampler._sample_pos": [[35, 44], ["torch.nonzero", "pos_inds.squeeze.squeeze.numel", "pos_inds.squeeze.squeeze.squeeze", "pos_inds.squeeze.squeeze.numel", "random_sampler.RandomSampler.random_choice"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.samplers.random_sampler.RandomSampler.random_choice"], ["", "def", "_sample_pos", "(", "self", ",", "assign_result", ",", "num_expected", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Randomly sample some positive samples.\"\"\"", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", ">", "0", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "pos_inds", "=", "pos_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "pos_inds", ".", "numel", "(", ")", "<=", "num_expected", ":", "\n", "            ", "return", "pos_inds", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "random_choice", "(", "pos_inds", ",", "num_expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.random_sampler.RandomSampler._sample_neg": [[45, 54], ["torch.nonzero", "neg_inds.squeeze.squeeze.numel", "neg_inds.squeeze.squeeze.squeeze", "len", "random_sampler.RandomSampler.random_choice"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.samplers.random_sampler.RandomSampler.random_choice"], ["", "", "def", "_sample_neg", "(", "self", ",", "assign_result", ",", "num_expected", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Randomly sample some negative samples.\"\"\"", "\n", "neg_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", "==", "0", ")", "\n", "if", "neg_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "neg_inds", "=", "neg_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "len", "(", "neg_inds", ")", "<=", "num_expected", ":", "\n", "            ", "return", "neg_inds", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "random_choice", "(", "neg_inds", ",", "num_expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.random_sampler.RandomSampler._sample_neg_lowthr": [[55, 63], ["torch.nonzero", "neg_inds.squeeze.squeeze.numel", "neg_inds.squeeze.squeeze.squeeze", "len", "random_sampler.RandomSampler.random_choice"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.samplers.random_sampler.RandomSampler.random_choice"], ["", "", "def", "_sample_neg_lowthr", "(", "self", ",", "assign_result", ",", "num_expected", ",", "lowthr", "=", "0.1", ",", "**", "kwargs", ")", ":", "\n", "        ", "neg_inds", "=", "torch", ".", "nonzero", "(", "(", "assign_result", ".", "max_overlaps", ">=", "0.1", ")", "*", "(", "assign_result", ".", "gt_inds", "==", "0", ")", ")", "\n", "if", "neg_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "neg_inds", "=", "neg_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "len", "(", "neg_inds", ")", "<=", "num_expected", ":", "\n", "            ", "return", "neg_inds", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "random_choice", "(", "neg_inds", ",", "num_expected", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.ohem_sampler.OHEMSampler.__init__": [[9, 25], ["base_sampler.BaseSampler.__init__", "hasattr"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num", ",", "\n", "pos_fraction", ",", "\n", "context", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "OHEMSampler", ",", "self", ")", ".", "__init__", "(", "num", ",", "pos_fraction", ",", "neg_pos_ub", ",", "\n", "add_gt_as_proposals", ")", "\n", "if", "not", "hasattr", "(", "context", ",", "'num_stages'", ")", ":", "\n", "            ", "self", ".", "bbox_roi_extractor", "=", "context", ".", "bbox_roi_extractor", "\n", "self", ".", "bbox_head", "=", "context", ".", "bbox_head", "\n", "", "else", ":", "\n", "            ", "self", ".", "bbox_roi_extractor", "=", "context", ".", "bbox_roi_extractor", "[", "\n", "context", ".", "current_stage", "]", "\n", "self", ".", "bbox_head", "=", "context", ".", "bbox_head", "[", "context", ".", "current_stage", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.ohem_sampler.OHEMSampler.hard_mining": [[26, 42], ["torch.no_grad", "transforms.bbox2roi", "ohem_sampler.OHEMSampler.bbox_roi_extractor", "ohem_sampler.OHEMSampler.bbox_head", "loss.topk", "ohem_sampler.OHEMSampler.bbox_head.loss", "cls_score.new_ones", "cls_score.size"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox_heads.bbox_head.BBoxHead.loss"], ["", "", "def", "hard_mining", "(", "self", ",", "inds", ",", "num_expected", ",", "bboxes", ",", "labels", ",", "feats", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rois", "=", "bbox2roi", "(", "[", "bboxes", "]", ")", "\n", "bbox_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "feats", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "rois", ")", "\n", "cls_score", ",", "_", "=", "self", ".", "bbox_head", "(", "bbox_feats", ")", "\n", "loss", "=", "self", ".", "bbox_head", ".", "loss", "(", "\n", "cls_score", "=", "cls_score", ",", "\n", "bbox_pred", "=", "None", ",", "\n", "labels", "=", "labels", ",", "\n", "label_weights", "=", "cls_score", ".", "new_ones", "(", "cls_score", ".", "size", "(", "0", ")", ")", ",", "\n", "bbox_targets", "=", "None", ",", "\n", "bbox_weights", "=", "None", ",", "\n", "reduction_override", "=", "'none'", ")", "[", "'loss_cls'", "]", "\n", "_", ",", "topk_loss_inds", "=", "loss", ".", "topk", "(", "num_expected", ")", "\n", "", "return", "inds", "[", "topk_loss_inds", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.ohem_sampler.OHEMSampler._sample_pos": [[43, 58], ["torch.nonzero", "pos_inds.squeeze.squeeze.numel", "pos_inds.squeeze.squeeze.squeeze", "pos_inds.squeeze.squeeze.numel", "ohem_sampler.OHEMSampler.hard_mining"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.samplers.ohem_sampler.OHEMSampler.hard_mining"], ["", "def", "_sample_pos", "(", "self", ",", "\n", "assign_result", ",", "\n", "num_expected", ",", "\n", "bboxes", "=", "None", ",", "\n", "feats", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "# Sample some hard positive samples", "\n", "        ", "pos_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", ">", "0", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "pos_inds", "=", "pos_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "pos_inds", ".", "numel", "(", ")", "<=", "num_expected", ":", "\n", "            ", "return", "pos_inds", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "hard_mining", "(", "pos_inds", ",", "num_expected", ",", "bboxes", "[", "pos_inds", "]", ",", "\n", "assign_result", ".", "labels", "[", "pos_inds", "]", ",", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.ohem_sampler.OHEMSampler._sample_neg": [[59, 74], ["torch.nonzero", "neg_inds.squeeze.squeeze.numel", "neg_inds.squeeze.squeeze.squeeze", "len", "ohem_sampler.OHEMSampler.hard_mining"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.samplers.ohem_sampler.OHEMSampler.hard_mining"], ["", "", "def", "_sample_neg", "(", "self", ",", "\n", "assign_result", ",", "\n", "num_expected", ",", "\n", "bboxes", "=", "None", ",", "\n", "feats", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "# Sample some hard negative samples", "\n", "        ", "neg_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", "==", "0", ")", "\n", "if", "neg_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "neg_inds", "=", "neg_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "len", "(", "neg_inds", ")", "<=", "num_expected", ":", "\n", "            ", "return", "neg_inds", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "hard_mining", "(", "neg_inds", ",", "num_expected", ",", "bboxes", "[", "neg_inds", "]", ",", "\n", "assign_result", ".", "labels", "[", "neg_inds", "]", ",", "feats", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.instance_balanced_pos_sampler.InstanceBalancedPosSampler._sample_pos": [[9, 42], ["torch.nonzero", "pos_inds.squeeze.squeeze.numel", "pos_inds.squeeze.squeeze.squeeze", "pos_inds.squeeze.squeeze.numel", "assign_result.gt_inds[].unique", "len", "int", "torch.cat", "torch.nonzero", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.append", "len", "numpy.array", "torch.from_numpy().to().long", "torch.cat", "round", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.numel", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.squeeze", "len", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.random_choice", "len", "list", "len", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.random_choice", "len", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.random_choice", "i.item", "torch.from_numpy().to", "float", "set", "set", "pos_inds.squeeze.squeeze.cpu", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.cpu", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.samplers.random_sampler.RandomSampler.random_choice", "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.random_sampler.RandomSampler.random_choice", "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.random_sampler.RandomSampler.random_choice"], ["    ", "def", "_sample_pos", "(", "self", ",", "assign_result", ",", "num_expected", ",", "**", "kwargs", ")", ":", "\n", "        ", "pos_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", ">", "0", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "pos_inds", "=", "pos_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "pos_inds", ".", "numel", "(", ")", "<=", "num_expected", ":", "\n", "            ", "return", "pos_inds", "\n", "", "else", ":", "\n", "            ", "unique_gt_inds", "=", "assign_result", ".", "gt_inds", "[", "pos_inds", "]", ".", "unique", "(", ")", "\n", "num_gts", "=", "len", "(", "unique_gt_inds", ")", "\n", "num_per_gt", "=", "int", "(", "round", "(", "num_expected", "/", "float", "(", "num_gts", ")", ")", "+", "1", ")", "\n", "sampled_inds", "=", "[", "]", "\n", "for", "i", "in", "unique_gt_inds", ":", "\n", "                ", "inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", "==", "i", ".", "item", "(", ")", ")", "\n", "if", "inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "                    ", "inds", "=", "inds", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "inds", ")", ">", "num_per_gt", ":", "\n", "                    ", "inds", "=", "self", ".", "random_choice", "(", "inds", ",", "num_per_gt", ")", "\n", "", "sampled_inds", ".", "append", "(", "inds", ")", "\n", "", "sampled_inds", "=", "torch", ".", "cat", "(", "sampled_inds", ")", "\n", "if", "len", "(", "sampled_inds", ")", "<", "num_expected", ":", "\n", "                ", "num_extra", "=", "num_expected", "-", "len", "(", "sampled_inds", ")", "\n", "extra_inds", "=", "np", ".", "array", "(", "\n", "list", "(", "set", "(", "pos_inds", ".", "cpu", "(", ")", ")", "-", "set", "(", "sampled_inds", ".", "cpu", "(", ")", ")", ")", ")", "\n", "if", "len", "(", "extra_inds", ")", ">", "num_extra", ":", "\n", "                    ", "extra_inds", "=", "self", ".", "random_choice", "(", "extra_inds", ",", "num_extra", ")", "\n", "", "extra_inds", "=", "torch", ".", "from_numpy", "(", "extra_inds", ")", ".", "to", "(", "\n", "assign_result", ".", "gt_inds", ".", "device", ")", ".", "long", "(", ")", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_inds", ",", "extra_inds", "]", ")", "\n", "", "elif", "len", "(", "sampled_inds", ")", ">", "num_expected", ":", "\n", "                ", "sampled_inds", "=", "self", ".", "random_choice", "(", "sampled_inds", ",", "num_expected", ")", "\n", "", "return", "sampled_inds", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.iou_balanced_neg_sampler.IoUBalancedNegSampler.__init__": [[27, 43], ["random_sampler.RandomSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num", ",", "\n", "pos_fraction", ",", "\n", "floor_thr", "=", "-", "1", ",", "\n", "floor_fraction", "=", "0", ",", "\n", "num_bins", "=", "3", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "IoUBalancedNegSampler", ",", "self", ")", ".", "__init__", "(", "num", ",", "pos_fraction", ",", "\n", "**", "kwargs", ")", "\n", "assert", "floor_thr", ">=", "0", "or", "floor_thr", "==", "-", "1", "\n", "assert", "0", "<=", "floor_fraction", "<=", "1", "\n", "assert", "num_bins", ">=", "1", "\n", "\n", "self", ".", "floor_thr", "=", "floor_thr", "\n", "self", ".", "floor_fraction", "=", "floor_fraction", "\n", "self", ".", "num_bins", "=", "num_bins", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.iou_balanced_neg_sampler.IoUBalancedNegSampler.sample_via_interval": [[44, 74], ["max_overlaps.max", "int", "range", "numpy.concatenate", "set", "list", "numpy.concatenate.append", "len", "numpy.array", "numpy.concatenate", "len", "iou_balanced_neg_sampler.IoUBalancedNegSampler.random_choice", "numpy.array", "len", "list", "len", "iou_balanced_neg_sampler.IoUBalancedNegSampler.random_choice", "numpy.where", "numpy.logical_and", "set"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.samplers.random_sampler.RandomSampler.random_choice", "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.random_sampler.RandomSampler.random_choice"], ["", "def", "sample_via_interval", "(", "self", ",", "max_overlaps", ",", "full_set", ",", "num_expected", ")", ":", "\n", "        ", "max_iou", "=", "max_overlaps", ".", "max", "(", ")", "\n", "iou_interval", "=", "(", "max_iou", "-", "self", ".", "floor_thr", ")", "/", "self", ".", "num_bins", "\n", "per_num_expected", "=", "int", "(", "num_expected", "/", "self", ".", "num_bins", ")", "\n", "\n", "sampled_inds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_bins", ")", ":", "\n", "            ", "start_iou", "=", "self", ".", "floor_thr", "+", "i", "*", "iou_interval", "\n", "end_iou", "=", "self", ".", "floor_thr", "+", "(", "i", "+", "1", ")", "*", "iou_interval", "\n", "tmp_set", "=", "set", "(", "\n", "np", ".", "where", "(", "\n", "np", ".", "logical_and", "(", "max_overlaps", ">=", "start_iou", ",", "\n", "max_overlaps", "<", "end_iou", ")", ")", "[", "0", "]", ")", "\n", "tmp_inds", "=", "list", "(", "tmp_set", "&", "full_set", ")", "\n", "if", "len", "(", "tmp_inds", ")", ">", "per_num_expected", ":", "\n", "                ", "tmp_sampled_set", "=", "self", ".", "random_choice", "(", "tmp_inds", ",", "\n", "per_num_expected", ")", "\n", "", "else", ":", "\n", "                ", "tmp_sampled_set", "=", "np", ".", "array", "(", "tmp_inds", ",", "dtype", "=", "np", ".", "int", ")", "\n", "", "sampled_inds", ".", "append", "(", "tmp_sampled_set", ")", "\n", "\n", "", "sampled_inds", "=", "np", ".", "concatenate", "(", "sampled_inds", ")", "\n", "if", "len", "(", "sampled_inds", ")", "<", "num_expected", ":", "\n", "            ", "num_extra", "=", "num_expected", "-", "len", "(", "sampled_inds", ")", "\n", "extra_inds", "=", "np", ".", "array", "(", "list", "(", "full_set", "-", "set", "(", "sampled_inds", ")", ")", ")", "\n", "if", "len", "(", "extra_inds", ")", ">", "num_extra", ":", "\n", "                ", "extra_inds", "=", "self", ".", "random_choice", "(", "extra_inds", ",", "num_extra", ")", "\n", "", "sampled_inds", "=", "np", ".", "concatenate", "(", "[", "sampled_inds", ",", "extra_inds", "]", ")", "\n", "\n", "", "return", "sampled_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.iou_balanced_neg_sampler.IoUBalancedNegSampler._sample_neg": [[75, 134], ["torch.nonzero", "neg_inds.squeeze.squeeze.numel", "neg_inds.squeeze.squeeze.squeeze", "len", "assign_result.max_overlaps.cpu().numpy", "set", "list", "list", "int", "numpy.concatenate", "torch.from_numpy().long().to", "neg_inds.squeeze.squeeze.cpu().numpy", "set", "set", "len", "numpy.array", "len", "len", "iou_balanced_neg_sampler.IoUBalancedNegSampler.random_choice", "numpy.array", "len", "numpy.array", "numpy.concatenate", "assign_result.max_overlaps.cpu", "set", "set", "set", "set", "iou_balanced_neg_sampler.IoUBalancedNegSampler.sample_via_interval", "iou_balanced_neg_sampler.IoUBalancedNegSampler.random_choice", "len", "list", "len", "iou_balanced_neg_sampler.IoUBalancedNegSampler.random_choice", "torch.from_numpy().long", "neg_inds.squeeze.squeeze.cpu", "numpy.where", "numpy.where", "set", "numpy.logical_and", "numpy.where", "numpy.where", "numpy.where", "set", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.samplers.random_sampler.RandomSampler.random_choice", "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.iou_balanced_neg_sampler.IoUBalancedNegSampler.sample_via_interval", "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.random_sampler.RandomSampler.random_choice", "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.random_sampler.RandomSampler.random_choice"], ["", "def", "_sample_neg", "(", "self", ",", "assign_result", ",", "num_expected", ",", "**", "kwargs", ")", ":", "\n", "        ", "neg_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", "==", "0", ")", "\n", "if", "neg_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "neg_inds", "=", "neg_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "len", "(", "neg_inds", ")", "<=", "num_expected", ":", "\n", "            ", "return", "neg_inds", "\n", "", "else", ":", "\n", "            ", "max_overlaps", "=", "assign_result", ".", "max_overlaps", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# balance sampling for negative samples", "\n", "neg_set", "=", "set", "(", "neg_inds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "if", "self", ".", "floor_thr", ">", "0", ":", "\n", "                ", "floor_set", "=", "set", "(", "\n", "np", ".", "where", "(", "\n", "np", ".", "logical_and", "(", "max_overlaps", ">=", "0", ",", "\n", "max_overlaps", "<", "self", ".", "floor_thr", ")", ")", "[", "0", "]", ")", "\n", "iou_sampling_set", "=", "set", "(", "\n", "np", ".", "where", "(", "max_overlaps", ">=", "self", ".", "floor_thr", ")", "[", "0", "]", ")", "\n", "", "elif", "self", ".", "floor_thr", "==", "0", ":", "\n", "                ", "floor_set", "=", "set", "(", "np", ".", "where", "(", "max_overlaps", "==", "0", ")", "[", "0", "]", ")", "\n", "iou_sampling_set", "=", "set", "(", "\n", "np", ".", "where", "(", "max_overlaps", ">", "self", ".", "floor_thr", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "floor_set", "=", "set", "(", ")", "\n", "iou_sampling_set", "=", "set", "(", "\n", "np", ".", "where", "(", "max_overlaps", ">", "self", ".", "floor_thr", ")", "[", "0", "]", ")", "\n", "\n", "", "floor_neg_inds", "=", "list", "(", "floor_set", "&", "neg_set", ")", "\n", "iou_sampling_neg_inds", "=", "list", "(", "iou_sampling_set", "&", "neg_set", ")", "\n", "num_expected_iou_sampling", "=", "int", "(", "num_expected", "*", "\n", "(", "1", "-", "self", ".", "floor_fraction", ")", ")", "\n", "if", "len", "(", "iou_sampling_neg_inds", ")", ">", "num_expected_iou_sampling", ":", "\n", "                ", "if", "self", ".", "num_bins", ">=", "2", ":", "\n", "                    ", "iou_sampled_inds", "=", "self", ".", "sample_via_interval", "(", "\n", "max_overlaps", ",", "set", "(", "iou_sampling_neg_inds", ")", ",", "\n", "num_expected_iou_sampling", ")", "\n", "", "else", ":", "\n", "                    ", "iou_sampled_inds", "=", "self", ".", "random_choice", "(", "\n", "iou_sampling_neg_inds", ",", "num_expected_iou_sampling", ")", "\n", "", "", "else", ":", "\n", "                ", "iou_sampled_inds", "=", "np", ".", "array", "(", "\n", "iou_sampling_neg_inds", ",", "dtype", "=", "np", ".", "int", ")", "\n", "", "num_expected_floor", "=", "num_expected", "-", "len", "(", "iou_sampled_inds", ")", "\n", "if", "len", "(", "floor_neg_inds", ")", ">", "num_expected_floor", ":", "\n", "                ", "sampled_floor_inds", "=", "self", ".", "random_choice", "(", "\n", "floor_neg_inds", ",", "num_expected_floor", ")", "\n", "", "else", ":", "\n", "                ", "sampled_floor_inds", "=", "np", ".", "array", "(", "floor_neg_inds", ",", "dtype", "=", "np", ".", "int", ")", "\n", "", "sampled_inds", "=", "np", ".", "concatenate", "(", "\n", "(", "sampled_floor_inds", ",", "iou_sampled_inds", ")", ")", "\n", "if", "len", "(", "sampled_inds", ")", "<", "num_expected", ":", "\n", "                ", "num_extra", "=", "num_expected", "-", "len", "(", "sampled_inds", ")", "\n", "extra_inds", "=", "np", ".", "array", "(", "list", "(", "neg_set", "-", "set", "(", "sampled_inds", ")", ")", ")", "\n", "if", "len", "(", "extra_inds", ")", ">", "num_extra", ":", "\n", "                    ", "extra_inds", "=", "self", ".", "random_choice", "(", "extra_inds", ",", "num_extra", ")", "\n", "", "sampled_inds", "=", "np", ".", "concatenate", "(", "(", "sampled_inds", ",", "extra_inds", ")", ")", "\n", "", "sampled_inds", "=", "torch", ".", "from_numpy", "(", "sampled_inds", ")", ".", "long", "(", ")", ".", "to", "(", "\n", "assign_result", ".", "gt_inds", ".", "device", ")", "\n", "return", "sampled_inds", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.combined_sampler.CombinedSampler.__init__": [[7, 11], ["base_sampler.BaseSampler.__init__", "assign_sampling.build_sampler", "assign_sampling.build_sampler"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_sampler", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.assign_sampling.build_sampler"], ["    ", "def", "__init__", "(", "self", ",", "pos_sampler", ",", "neg_sampler", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CombinedSampler", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "pos_sampler", "=", "build_sampler", "(", "pos_sampler", ",", "**", "kwargs", ")", "\n", "self", ".", "neg_sampler", "=", "build_sampler", "(", "neg_sampler", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.combined_sampler.CombinedSampler._sample_pos": [[12, 14], ["None"], "methods", ["None"], ["", "def", "_sample_pos", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.combined_sampler.CombinedSampler._sample_neg": [[15, 17], ["None"], "methods", ["None"], ["", "def", "_sample_neg", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.sampling_result.SamplingResult.__init__": [[6, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pos_inds", ",", "neg_inds", ",", "bboxes", ",", "gt_bboxes", ",", "assign_result", ",", "\n", "gt_flags", ")", ":", "\n", "        ", "self", ".", "pos_inds", "=", "pos_inds", "\n", "self", ".", "neg_inds", "=", "neg_inds", "\n", "self", ".", "pos_bboxes", "=", "bboxes", "[", "pos_inds", "]", "\n", "self", ".", "neg_bboxes", "=", "bboxes", "[", "neg_inds", "]", "\n", "self", ".", "pos_is_gt", "=", "gt_flags", "[", "pos_inds", "]", "\n", "\n", "self", ".", "num_gts", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "self", ".", "pos_assigned_gt_inds", "=", "assign_result", ".", "gt_inds", "[", "pos_inds", "]", "-", "1", "\n", "self", ".", "pos_gt_bboxes", "=", "gt_bboxes", "[", "self", ".", "pos_assigned_gt_inds", ",", ":", "]", "\n", "if", "assign_result", ".", "labels", "is", "not", "None", ":", "\n", "            ", "self", ".", "pos_gt_labels", "=", "assign_result", ".", "labels", "[", "pos_inds", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "pos_gt_labels", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.sampling_result.SamplingResult.bboxes": [[22, 25], ["torch.cat"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "bboxes", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "self", ".", "pos_bboxes", ",", "self", ".", "neg_bboxes", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.pseudo_sampler.PseudoSampler.__init__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.pseudo_sampler.PseudoSampler._sample_pos": [[12, 14], ["None"], "methods", ["None"], ["", "def", "_sample_pos", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.pseudo_sampler.PseudoSampler._sample_neg": [[15, 17], ["None"], "methods", ["None"], ["", "def", "_sample_neg", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.samplers.pseudo_sampler.PseudoSampler.sample": [[18, 27], ["torch.nonzero().squeeze().unique", "torch.nonzero().squeeze().unique", "bboxes.new_zeros", "sampling_result.SamplingResult.SamplingResult", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero", "torch.nonzero"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "**", "kwargs", ")", ":", "\n", "        ", "pos_inds", "=", "torch", ".", "nonzero", "(", "\n", "assign_result", ".", "gt_inds", ">", "0", ")", ".", "squeeze", "(", "-", "1", ")", ".", "unique", "(", ")", "\n", "neg_inds", "=", "torch", ".", "nonzero", "(", "\n", "assign_result", ".", "gt_inds", "==", "0", ")", ".", "squeeze", "(", "-", "1", ")", ".", "unique", "(", ")", "\n", "gt_flags", "=", "bboxes", ".", "new_zeros", "(", "bboxes", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "sampling_result", "=", "SamplingResult", "(", "pos_inds", ",", "neg_inds", ",", "bboxes", ",", "gt_bboxes", ",", "\n", "assign_result", ",", "gt_flags", ")", "\n", "return", "sampling_result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.approx_max_iou_assigner.ApproxMaxIoUAssigner.__init__": [[32, 45], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "pos_iou_thr", ",", "\n", "neg_iou_thr", ",", "\n", "min_pos_iou", "=", ".0", ",", "\n", "gt_max_assign_all", "=", "True", ",", "\n", "ignore_iof_thr", "=", "-", "1", ",", "\n", "ignore_wrt_candidates", "=", "True", ")", ":", "\n", "        ", "self", ".", "pos_iou_thr", "=", "pos_iou_thr", "\n", "self", ".", "neg_iou_thr", "=", "neg_iou_thr", "\n", "self", ".", "min_pos_iou", "=", "min_pos_iou", "\n", "self", ".", "gt_max_assign_all", "=", "gt_max_assign_all", "\n", "self", ".", "ignore_iof_thr", "=", "ignore_iof_thr", "\n", "self", ".", "ignore_wrt_candidates", "=", "ignore_wrt_candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.approx_max_iou_assigner.ApproxMaxIoUAssigner.assign": [[46, 115], ["squares.size", "gt_bboxes.size", "torch.transpose().contiguous().view", "geometry.bbox_overlaps", "geometry.bbox_overlaps.view().max", "torch.transpose", "approx_max_iou_assigner.ApproxMaxIoUAssigner.assign_wrt_overlaps", "ValueError", "torch.transpose().contiguous", "geometry.bbox_overlaps.view", "gt_bboxes_ignore.numel", "geometry.bbox_overlaps", "geometry.bbox_overlaps.max", "geometry.bbox_overlaps", "geometry.bbox_overlaps.max", "torch.transpose", "torch.transpose().contiguous().view.view"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.geometry.bbox_overlaps", "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.max_iou_assigner.MaxIoUAssigner.assign_wrt_overlaps", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.geometry.bbox_overlaps", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.geometry.bbox_overlaps"], ["", "def", "assign", "(", "self", ",", "\n", "approxs", ",", "\n", "squares", ",", "\n", "approxs_per_octave", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "gt_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"Assign gt to approxs.\n\n        This method assign a gt bbox to each group of approxs (bboxes),\n        each group of approxs is represent by a base approx (bbox) and\n        will be assigned with -1, 0, or a positive number.\n        -1 means don't care, 0 means negative sample,\n        positive number is the index (1-based) of assigned gt.\n        The assignment is done in following steps, the order matters.\n\n        1. assign every bbox to -1\n        2. use the max IoU of each group of approxs to assign\n        2. assign proposals whose iou with all gts < neg_iou_thr to 0\n        3. for each bbox, if the iou with its nearest gt >= pos_iou_thr,\n           assign it to that bbox\n        4. for each gt bbox, assign its nearest proposals (may be more than\n           one) to itself\n\n        Args:\n            approxs (Tensor): Bounding boxes to be assigned,\n        shape(approxs_per_octave*n, 4).\n            squares (Tensor): Base Bounding boxes to be assigned,\n        shape(n, 4).\n            approxs_per_octave (int): number of approxs per octave\n            gt_bboxes (Tensor): Groundtruth boxes, shape (k, 4).\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\n                labelled as `ignored`, e.g., crowd boxes in COCO.\n            gt_labels (Tensor, optional): Label of gt_bboxes, shape (k, ).\n\n        Returns:\n            :obj:`AssignResult`: The assign result.\n        \"\"\"", "\n", "\n", "if", "squares", ".", "shape", "[", "0", "]", "==", "0", "or", "gt_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'No gt or approxs'", ")", "\n", "", "num_squares", "=", "squares", ".", "size", "(", "0", ")", "\n", "num_gts", "=", "gt_bboxes", ".", "size", "(", "0", ")", "\n", "# re-organize anchors by approxs_per_octave x num_squares", "\n", "approxs", "=", "torch", ".", "transpose", "(", "\n", "approxs", ".", "view", "(", "num_squares", ",", "approxs_per_octave", ",", "4", ")", ",", "0", ",", "\n", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "all_overlaps", "=", "bbox_overlaps", "(", "approxs", ",", "gt_bboxes", ")", "\n", "\n", "overlaps", ",", "_", "=", "all_overlaps", ".", "view", "(", "approxs_per_octave", ",", "num_squares", ",", "\n", "num_gts", ")", ".", "max", "(", "dim", "=", "0", ")", "\n", "overlaps", "=", "torch", ".", "transpose", "(", "overlaps", ",", "0", ",", "1", ")", "\n", "\n", "bboxes", "=", "squares", "[", ":", ",", ":", "4", "]", "\n", "\n", "if", "(", "self", ".", "ignore_iof_thr", ">", "0", ")", "and", "(", "gt_bboxes_ignore", "is", "not", "None", ")", "and", "(", "\n", "gt_bboxes_ignore", ".", "numel", "(", ")", ">", "0", ")", ":", "\n", "            ", "if", "self", ".", "ignore_wrt_candidates", ":", "\n", "                ", "ignore_overlaps", "=", "bbox_overlaps", "(", "\n", "bboxes", ",", "gt_bboxes_ignore", ",", "mode", "=", "'iof'", ")", "\n", "ignore_max_overlaps", ",", "_", "=", "ignore_overlaps", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "ignore_overlaps", "=", "bbox_overlaps", "(", "\n", "gt_bboxes_ignore", ",", "bboxes", ",", "mode", "=", "'iof'", ")", "\n", "ignore_max_overlaps", ",", "_", "=", "ignore_overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "", "overlaps", "[", ":", ",", "ignore_max_overlaps", ">", "self", ".", "ignore_iof_thr", "]", "=", "-", "1", "\n", "\n", "", "assign_result", "=", "self", ".", "assign_wrt_overlaps", "(", "overlaps", ",", "gt_labels", ")", "\n", "return", "assign_result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.base_assigner.BaseAssigner.assign": [[6, 9], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "assign", "(", "self", ",", "bboxes", ",", "gt_bboxes", ",", "gt_bboxes_ignore", "=", "None", ",", "gt_labels", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.max_iou_assigner.MaxIoUAssigner.__init__": [[33, 46], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "pos_iou_thr", ",", "\n", "neg_iou_thr", ",", "\n", "min_pos_iou", "=", ".0", ",", "\n", "gt_max_assign_all", "=", "True", ",", "\n", "ignore_iof_thr", "=", "-", "1", ",", "\n", "ignore_wrt_candidates", "=", "True", ")", ":", "\n", "        ", "self", ".", "pos_iou_thr", "=", "pos_iou_thr", "\n", "self", ".", "neg_iou_thr", "=", "neg_iou_thr", "\n", "self", ".", "min_pos_iou", "=", "min_pos_iou", "\n", "self", ".", "gt_max_assign_all", "=", "gt_max_assign_all", "\n", "self", ".", "ignore_iof_thr", "=", "ignore_iof_thr", "\n", "self", ".", "ignore_wrt_candidates", "=", "ignore_wrt_candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.max_iou_assigner.MaxIoUAssigner.assign": [[47, 94], ["geometry.bbox_overlaps", "max_iou_assigner.MaxIoUAssigner.assign_wrt_overlaps", "ValueError", "gt_bboxes_ignore.numel", "geometry.bbox_overlaps", "geometry.bbox_overlaps.max", "geometry.bbox_overlaps", "geometry.bbox_overlaps.max"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.bbox.geometry.bbox_overlaps", "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.max_iou_assigner.MaxIoUAssigner.assign_wrt_overlaps", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.geometry.bbox_overlaps", "home.repos.pwc.inspect_result.twangnh_SimCal.bbox.geometry.bbox_overlaps"], ["", "def", "assign", "(", "self", ",", "bboxes", ",", "gt_bboxes", ",", "gt_bboxes_ignore", "=", "None", ",", "gt_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"Assign gt to bboxes.\n\n        This method assign a gt bbox to every bbox (proposal/anchor), each bbox\n        will be assigned with -1, 0, or a positive number. -1 means don't care,\n        0 means negative sample, positive number is the index (1-based) of\n        assigned gt.\n        The assignment is done in following steps, the order matters.\n\n        1. assign every bbox to -1\n        2. assign proposals whose iou with all gts < neg_iou_thr to 0\n        3. for each bbox, if the iou with its nearest gt >= pos_iou_thr,\n           assign it to that bbox\n        4. for each gt bbox, assign its nearest proposals (may be more than\n           one) to itself\n\n        Args:\n            bboxes (Tensor): Bounding boxes to be assigned, shape(n, 4).\n            gt_bboxes (Tensor): Groundtruth boxes, shape (k, 4).\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\n                labelled as `ignored`, e.g., crowd boxes in COCO.\n            gt_labels (Tensor, optional): Label of gt_bboxes, shape (k, ).\n\n        Returns:\n            :obj:`AssignResult`: The assign result.\n        \"\"\"", "\n", "if", "bboxes", ".", "shape", "[", "0", "]", "==", "0", "or", "gt_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'No gt or bboxes'", ")", "\n", "\n", "", "bboxes", "=", "bboxes", "[", ":", ",", ":", "4", "]", "\n", "overlaps", "=", "bbox_overlaps", "(", "gt_bboxes", ",", "bboxes", ")", "\n", "\n", "if", "(", "self", ".", "ignore_iof_thr", ">", "0", ")", "and", "(", "gt_bboxes_ignore", "is", "not", "None", ")", "and", "(", "\n", "gt_bboxes_ignore", ".", "numel", "(", ")", ">", "0", ")", ":", "\n", "            ", "if", "self", ".", "ignore_wrt_candidates", ":", "\n", "                ", "ignore_overlaps", "=", "bbox_overlaps", "(", "\n", "bboxes", ",", "gt_bboxes_ignore", ",", "mode", "=", "'iof'", ")", "\n", "ignore_max_overlaps", ",", "_", "=", "ignore_overlaps", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "ignore_overlaps", "=", "bbox_overlaps", "(", "\n", "gt_bboxes_ignore", ",", "bboxes", ",", "mode", "=", "'iof'", ")", "\n", "ignore_max_overlaps", ",", "_", "=", "ignore_overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "", "overlaps", "[", ":", ",", "ignore_max_overlaps", ">", "self", ".", "ignore_iof_thr", "]", "=", "-", "1", "\n", "\n", "", "assign_result", "=", "self", ".", "assign_wrt_overlaps", "(", "overlaps", ",", "gt_labels", ")", "\n", "\n", "return", "assign_result", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.max_iou_assigner.MaxIoUAssigner.assign_wrt_overlaps": [[95, 156], ["overlaps.new_full", "overlaps.max", "overlaps.max", "isinstance", "range", "assign_result.AssignResult", "overlaps.numel", "ValueError", "overlaps.size", "overlaps.size", "isinstance", "overlaps.new_full.new_zeros", "torch.nonzero().squeeze", "torch.nonzero().squeeze.numel", "len", "torch.nonzero"], "methods", ["None"], ["", "def", "assign_wrt_overlaps", "(", "self", ",", "overlaps", ",", "gt_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"Assign w.r.t. the overlaps of bboxes with gts.\n\n        Args:\n            overlaps (Tensor): Overlaps between k gt_bboxes and n bboxes,\n                shape(k, n).\n            gt_labels (Tensor, optional): Labels of k gt_bboxes, shape (k, ).\n\n        Returns:\n            :obj:`AssignResult`: The assign result.\n        \"\"\"", "\n", "if", "overlaps", ".", "numel", "(", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'No gt or proposals'", ")", "\n", "\n", "", "num_gts", ",", "num_bboxes", "=", "overlaps", ".", "size", "(", "0", ")", ",", "overlaps", ".", "size", "(", "1", ")", "\n", "\n", "# 1. assign -1 by default", "\n", "assigned_gt_inds", "=", "overlaps", ".", "new_full", "(", "(", "num_bboxes", ",", ")", ",", "\n", "-", "1", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "# for each anchor, which gt best overlaps with it", "\n", "# for each anchor, the max iou of all gts", "\n", "max_overlaps", ",", "argmax_overlaps", "=", "overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "# for each gt, which anchor best overlaps with it", "\n", "# for each gt, the max iou of all proposals", "\n", "gt_max_overlaps", ",", "gt_argmax_overlaps", "=", "overlaps", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "# 2. assign negative: below", "\n", "if", "isinstance", "(", "self", ".", "neg_iou_thr", ",", "float", ")", ":", "\n", "            ", "assigned_gt_inds", "[", "(", "max_overlaps", ">=", "0", ")", "\n", "&", "(", "max_overlaps", "<", "self", ".", "neg_iou_thr", ")", "]", "=", "0", "\n", "", "elif", "isinstance", "(", "self", ".", "neg_iou_thr", ",", "tuple", ")", ":", "\n", "            ", "assert", "len", "(", "self", ".", "neg_iou_thr", ")", "==", "2", "\n", "assigned_gt_inds", "[", "(", "max_overlaps", ">=", "self", ".", "neg_iou_thr", "[", "0", "]", ")", "\n", "&", "(", "max_overlaps", "<", "self", ".", "neg_iou_thr", "[", "1", "]", ")", "]", "=", "0", "\n", "\n", "# 3. assign positive: above positive IoU threshold", "\n", "", "pos_inds", "=", "max_overlaps", ">=", "self", ".", "pos_iou_thr", "\n", "assigned_gt_inds", "[", "pos_inds", "]", "=", "argmax_overlaps", "[", "pos_inds", "]", "+", "1", "\n", "\n", "# 4. assign fg: for each gt, proposals with highest IoU", "\n", "for", "i", "in", "range", "(", "num_gts", ")", ":", "\n", "            ", "if", "gt_max_overlaps", "[", "i", "]", ">=", "self", ".", "min_pos_iou", ":", "\n", "                ", "if", "self", ".", "gt_max_assign_all", ":", "\n", "                    ", "max_iou_inds", "=", "overlaps", "[", "i", ",", ":", "]", "==", "gt_max_overlaps", "[", "i", "]", "\n", "assigned_gt_inds", "[", "max_iou_inds", "]", "=", "i", "+", "1", "\n", "", "else", ":", "\n", "                    ", "assigned_gt_inds", "[", "gt_argmax_overlaps", "[", "i", "]", "]", "=", "i", "+", "1", "\n", "\n", "", "", "", "if", "gt_labels", "is", "not", "None", ":", "\n", "            ", "assigned_labels", "=", "assigned_gt_inds", ".", "new_zeros", "(", "(", "num_bboxes", ",", ")", ")", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "assigned_gt_inds", ">", "0", ")", ".", "squeeze", "(", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "assigned_labels", "[", "pos_inds", "]", "=", "gt_labels", "[", "\n", "assigned_gt_inds", "[", "pos_inds", "]", "-", "1", "]", "\n", "", "", "else", ":", "\n", "            ", "assigned_labels", "=", "None", "\n", "\n", "", "return", "AssignResult", "(", "\n", "num_gts", ",", "assigned_gt_inds", ",", "max_overlaps", ",", "labels", "=", "assigned_labels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.assign_result.AssignResult.__init__": [[6, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_gts", ",", "gt_inds", ",", "max_overlaps", ",", "labels", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_gts", "=", "num_gts", "\n", "self", ".", "gt_inds", "=", "gt_inds", "\n", "self", ".", "max_overlaps", "=", "max_overlaps", "\n", "self", ".", "labels", "=", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.assigners.assign_result.AssignResult.add_gt_": [[12, 20], ["torch.arange", "torch.cat", "torch.cat", "torch.cat", "len", "assign_result.AssignResult.max_overlaps.new_ones"], "methods", ["None"], ["", "def", "add_gt_", "(", "self", ",", "gt_labels", ")", ":", "\n", "        ", "self_inds", "=", "torch", ".", "arange", "(", "\n", "1", ",", "len", "(", "gt_labels", ")", "+", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "gt_labels", ".", "device", ")", "\n", "self", ".", "gt_inds", "=", "torch", ".", "cat", "(", "[", "self_inds", ",", "self", ".", "gt_inds", "]", ")", "\n", "self", ".", "max_overlaps", "=", "torch", ".", "cat", "(", "\n", "[", "self", ".", "max_overlaps", ".", "new_ones", "(", "self", ".", "num_gts", ")", ",", "self", ".", "max_overlaps", "]", ")", "\n", "if", "self", ".", "labels", "is", "not", "None", ":", "\n", "            ", "self", ".", "labels", "=", "torch", ".", "cat", "(", "[", "gt_labels", ",", "self", ".", "labels", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pointByHeatmap._get_mask_center_background": [[36, 71], ["help_functions.__get_coco_masks", "numpy.ones", "cv2.dilate", "cv2.inpaint", "help_functions.__get_coco_masks", "single_mask_list.append", "numpy.zeros", "mask_list.append", "center_list.append", "cv2.dilate.astype", "numpy.uint8"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.__get_coco_masks", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.__get_coco_masks"], ["def", "_get_mask_center_background", "(", "ann_list", ":", "list", ",", "img", ":", "np", ".", "ndarray", ",", "grouplist", ":", "list", ",", "bndlist", ":", "list", ")", ":", "\n", "    ", "'''\n    input: ann_list(list): a list of coco style annotations\n           img(nd.array): image related to annotations\n           grouplist(list): list of lists, one innner list [i,j,k] shows instances is crowd\n           bndlist(list): list of bound boxes for grouped instances\n\n    output: background(nd.array): an rgb background\n            mask_list(list): a list of single_mask, single_mask is an nd.array of an instance, \n            center_list(list): a list of group_center, group_center is a list indicates the center of grouped instance\n    '''", "\n", "single_mask_list", "=", "[", "]", "\n", "center_list", "=", "[", "]", "\n", "mask_list", "=", "[", "]", "\n", "\n", "for", "ann", "in", "ann_list", ":", "\n", "        ", "single_mask", ",", "_", "=", "__get_coco_masks", "(", "[", "ann", "]", ",", "img", ")", "\n", "single_mask_list", ".", "append", "(", "single_mask", ")", "\n", "\n", "", "for", "group", "in", "grouplist", ":", "\n", "        ", "group_mask", "=", "np", ".", "zeros", "(", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "idx", "in", "group", ":", "\n", "            ", "group_mask", "[", "single_mask_list", "[", "idx", "]", ">", "0", "]", "=", "255", "\n", "", "mask_list", ".", "append", "(", "group_mask", ")", "\n", "\n", "", "for", "bbox", "in", "bndlist", ":", "\n", "        ", "group_center", "=", "[", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ")", "/", "2", ",", "(", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "/", "2", "]", "\n", "center_list", ".", "append", "(", "group_center", ")", "\n", "\n", "", "img_mask", ",", "_", "=", "__get_coco_masks", "(", "ann_list", ",", "img", ")", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "5", ",", "5", ")", ",", "np", ".", "uint8", ")", "\n", "img_mask", "=", "cv2", ".", "dilate", "(", "img_mask", ".", "astype", "(", "np", ".", "float64", ")", ",", "kernel", ",", "iterations", "=", "2", ")", "\n", "background", "=", "cv2", ".", "inpaint", "(", "img", ",", "np", ".", "uint8", "(", "img_mask", ")", ",", "5", ",", "cv2", ".", "INPAINT_NS", ")", "\n", "\n", "return", "background", ",", "mask_list", ",", "center_list", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pointByHeatmap._get_trimap": [[73, 92], ["numpy.ones", "numpy.zeros", "range", "range", "mask_list.append", "cv2.dilate", "single_mask.astype"], "function", ["None"], ["", "def", "_get_trimap", "(", "single_mask", ":", "np", ".", "ndarray", ",", "kernel_size", ":", "int", "=", "5", ")", ":", "\n", "    ", "'''\n    input: single_mask(np.ndarray): a mask of an instance\n           kernel_size(int): dilation kernel size\n\n    output: trimap(np.ndarray): one grey numpy masks with five different depth\n                                out -> in: 0, 1, 2, 3, 0\n    '''", "\n", "mask_list", "=", "[", "single_mask", "]", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "kernel_size", ",", "kernel_size", ")", ",", "np", ".", "uint8", ")", "\n", "trimap", "=", "np", ".", "zeros", "(", "(", "single_mask", ".", "shape", "[", "0", "]", ",", "single_mask", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "        ", "mask_list", ".", "append", "(", "cv2", ".", "dilate", "(", "single_mask", ".", "astype", "(", "np", ".", "float64", ")", ",", "kernel", ",", "iterations", "=", "i", "*", "2", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "3", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "trimap", "[", "mask_list", "[", "i", "]", ">", "200", "]", "=", "4", "-", "i", "# out -> in: 0, 1, 2, 3, 0", "\n", "\n", "", "return", "trimap", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pointByHeatmap._get_paste_pos": [[93, 135], ["cv2.resize", "cv2.resize", "cv2.resize", "numpy.zeros", "help_functions.getTrimap", "help_functions.getRings", "range", "help_functions.normalize", "cv2.resize", "numpy.stack", "numpy.random.choice", "int", "int", "cv2.resize.astype", "int", "int", "range", "numpy.where", "numpy.stack", "len", "numpy.array", "range", "help_functions.getHeatpoint", "res.append", "random.random", "len", "numpy.where", "len"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.getTrimap", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.getRings", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.normalize", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.getHeatpoint"], ["", "def", "_get_paste_pos", "(", "image", ":", "np", ".", "ndarray", ",", "background", ":", "np", ".", "ndarray", ",", "trimap", ":", "np", ".", "ndarray", ",", "center", ":", "list", ",", "shrink", ":", "int", "=", "10", ",", "ratio", ":", "float", "=", "0.4", ")", ":", "\n", "    ", "'''\n    input: image(np.ndarray): original rgb image\n           background(np.ndarray): clear all instances background\n           trimap(np.ndarray): out -> in: 0, 1, 2, 3, 0\n           center(list): center pos\n           shrink(int): shrink scale\n           ratio(float): ratio to choose larger than 200\n    \n    output: pos(tuple): (int, int) position to paste on the background\n    '''", "\n", "orishape", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "desshape", "=", "(", "int", "(", "image", ".", "shape", "[", "0", "]", "/", "shrink", ")", ",", "int", "(", "image", ".", "shape", "[", "1", "]", "/", "shrink", ")", ")", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "desshape", "[", "1", "]", ",", "desshape", "[", "0", "]", ")", ")", "\n", "background", "=", "cv2", ".", "resize", "(", "background", ",", "(", "desshape", "[", "1", "]", ",", "desshape", "[", "0", "]", ")", ")", "\n", "trimap", "=", "cv2", ".", "resize", "(", "trimap", ".", "astype", "(", "np", ".", "uint8", ")", ",", "(", "desshape", "[", "1", "]", ",", "desshape", "[", "0", "]", ")", ")", "\n", "oripos", "=", "[", "int", "(", "center", "[", "1", "]", "/", "shrink", ")", ",", "int", "(", "center", "[", "0", "]", "/", "shrink", ")", "]", "\n", "\n", "heatmap", "=", "np", ".", "zeros", "(", "(", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "oriTrimap", "=", "getTrimap", "(", "trimap", ")", "\n", "oriRings", "=", "getRings", "(", "image", ",", "oriTrimap", ")", "\n", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "background", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "background", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "heatPoint", "=", "getHeatpoint", "(", "oriTrimap", ",", "oriRings", ",", "background", ",", "oripos", ",", "[", "i", ",", "j", "]", ",", "config", "=", "[", "0.25", ",", "0.35", ",", "0.4", "]", ")", "\n", "res", ".", "append", "(", "[", "i", ",", "j", ",", "heatPoint", "]", ")", "\n", "", "", "for", "point", "in", "res", ":", "\n", "        ", "heatmap", "[", "point", "[", "0", "]", "]", "[", "point", "[", "1", "]", "]", "=", "point", "[", "2", "]", "\n", "", "heatmap", "=", "normalize", "(", "heatmap", ")", "\n", "heatmap", "=", "cv2", ".", "resize", "(", "heatmap", ",", "(", "orishape", "[", "1", "]", ",", "orishape", "[", "0", "]", ")", ")", "\n", "\n", "poses", "=", "np", ".", "stack", "(", "np", ".", "where", "(", "heatmap", ">", "200", ")", ",", "axis", "=", "1", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "ratio", "or", "len", "(", "poses", ")", "==", "0", ":", "\n", "        ", "poses", "=", "np", ".", "stack", "(", "np", ".", "where", "(", "heatmap", ">", "150", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "if", "len", "(", "poses", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "\n", "", "choice", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "poses", ")", ")", ")", "\n", "pos", "=", "poses", "[", "choice", "]", "\n", "\n", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pointByHeatmap.paste_position": [[136, 146], ["pointByHeatmap._get_mask_center_background", "range", "len", "pointByHeatmap._get_trimap", "pointByHeatmap._get_paste_pos", "heatmap_guided_pos_list.append"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pointByHeatmap._get_mask_center_background", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pointByHeatmap._get_trimap", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pointByHeatmap._get_paste_pos"], ["", "def", "paste_position", "(", "anns", ",", "img", ",", "grouplist", ",", "bndlist", ")", ":", "\n", "    ", "heatmap_guided_pos_list", "=", "[", "]", "\n", "\n", "background", ",", "mask_list", ",", "center_list", "=", "_get_mask_center_background", "(", "anns", ",", "img", ",", "grouplist", ",", "bndlist", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "mask_list", ")", ")", ":", "\n", "        ", "trimap", "=", "_get_trimap", "(", "mask_list", "[", "i", "]", ")", "\n", "pos", "=", "_get_paste_pos", "(", "img", ",", "background", ",", "trimap", ",", "center_list", "[", "i", "]", ",", "10", ")", "\n", "heatmap_guided_pos_list", ".", "append", "(", "pos", ")", "\n", "\n", "", "return", "heatmap_guided_pos_list", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.single_image_process.get_transform": [[9, 41], ["numpy.random.choice", "single_image_process.__identity_transform", "numpy.delete", "numpy.delete", "numpy.sum", "len", "len", "single_image_process.__random_transform", "numpy.where", "numpy.sum", "single_image_process.__random_transform", "single_image_process.__random_transform", "ValueError"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.single_image_process.__identity_transform", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.single_image_process.__random_transform", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.single_image_process.__random_transform", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.single_image_process.__random_transform"], ["def", "get_transform", "(", "src", ":", "np", ".", "ndarray", ",", "restricts", ":", "dict", ",", "config", ":", "InstaBoostConfig", ")", ":", "\n", "    ", "action_candidate", "=", "config", ".", "action_candidate", "\n", "action_prob", "=", "config", ".", "action_prob", "\n", "\n", "if", "'noflip'", "in", "restricts", "and", "restricts", "[", "'noflip'", "]", "==", "1", ":", "\n", "        ", "if", "'horizontal'", "in", "action_candidate", "or", "'vertical'", "in", "action_candidate", ":", "\n", "            ", "flip_idx", "=", "np", ".", "where", "(", "(", "action_candidate", "==", "'horizontal'", ")", "+", "(", "action_candidate", "==", "'vertical'", ")", ")", "[", "0", "]", "\n", "action_candidate", "=", "np", ".", "delete", "(", "action_candidate", ",", "flip_idx", ")", "\n", "action_prob", "=", "np", ".", "delete", "(", "action_prob", ",", "flip_idx", ")", "\n", "action_prob", "=", "action_prob", "/", "np", ".", "sum", "(", "action_prob", ")", "\n", "", "assert", "'horizontal'", "not", "in", "action_candidate", "and", "'vertical'", "not", "in", "action_candidate", "\n", "assert", "np", ".", "sum", "(", "action_prob", ")", "==", "1", "\n", "assert", "len", "(", "action_candidate", ")", "==", "len", "(", "action_prob", ")", "\n", "\n", "", "action_what", "=", "np", ".", "random", ".", "choice", "(", "action_candidate", ",", "p", "=", "action_prob", ")", "\n", "\n", "if", "action_what", "==", "'skip'", ":", "\n", "        ", "t", "=", "__identity_transform", "(", ")", "\n", "", "elif", "action_what", "==", "'horizontal'", ":", "\n", "        ", "src", "=", "src", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "# horizontal flip", "\n", "t", "=", "__random_transform", "(", "restricts", ",", "config", ")", "\n", "t", "[", "'flip'", "]", "=", "'horizontal'", "\n", "", "elif", "action_what", "==", "'vertical'", ":", "\n", "        ", "src", "=", "src", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "# vertical flip", "\n", "t", "=", "__random_transform", "(", "restricts", ",", "config", ")", "\n", "t", "[", "'flip'", "]", "=", "'vertical'", "\n", "", "elif", "action_what", "==", "'normal'", ":", "\n", "        ", "t", "=", "__random_transform", "(", "restricts", ",", "config", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown action {}'", ".", "format", "(", "action_what", ")", ")", "\n", "\n", "", "return", "src", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.single_image_process.__random_transform": [[43, 70], ["dict", "random.uniform", "random.randint", "random.randint", "math.radians", "random.randint", "max", "min", "max", "max", "max", "min", "max", "max"], "function", ["None"], ["", "def", "__random_transform", "(", "restricts", ":", "dict", ",", "config", ":", "InstaBoostConfig", ")", ":", "\n", "    ", "t", "=", "dict", "(", ")", "\n", "t", "[", "'s'", "]", "=", "random", ".", "uniform", "(", "*", "config", ".", "scale", ")", "\n", "max_x", "=", "restricts", "[", "'bbox_w'", "]", "//", "config", ".", "dx", "\n", "t", "[", "'tx'", "]", "=", "random", ".", "randint", "(", "-", "max_x", ",", "max_x", ")", "\n", "max_y", "=", "restricts", "[", "'bbox_h'", "]", "//", "config", ".", "dy", "\n", "t", "[", "'ty'", "]", "=", "random", ".", "randint", "(", "-", "max_y", ",", "max_y", ")", "\n", "t", "[", "'theta'", "]", "=", "math", ".", "radians", "(", "random", ".", "randint", "(", "*", "config", ".", "theta", ")", ")", "\n", "\n", "if", "'restrict_left'", "in", "restricts", "and", "restricts", "[", "'restrict_left'", "]", "==", "1", ":", "\n", "        ", "t", "[", "'s'", "]", "=", "max", "(", "t", "[", "'s'", "]", ",", "1", ")", "\n", "t", "[", "'tx'", "]", "=", "min", "(", "t", "[", "'tx'", "]", ",", "0", ")", "\n", "t", "[", "'theta'", "]", "=", "0", "\n", "", "if", "'restrict_right'", "in", "restricts", "and", "restricts", "[", "'restrict_right'", "]", "==", "1", ":", "\n", "        ", "t", "[", "'s'", "]", "=", "max", "(", "t", "[", "'s'", "]", ",", "1", ")", "\n", "t", "[", "'tx'", "]", "=", "max", "(", "t", "[", "'tx'", "]", ",", "0", ")", "\n", "t", "[", "'theta'", "]", "=", "0", "\n", "", "if", "'restrict_up'", "in", "restricts", "and", "restricts", "[", "'restrict_up'", "]", "==", "1", ":", "\n", "        ", "t", "[", "'s'", "]", "=", "max", "(", "t", "[", "'s'", "]", ",", "1", ")", "\n", "t", "[", "'ty'", "]", "=", "min", "(", "t", "[", "'ty'", "]", ",", "0", ")", "\n", "t", "[", "'theta'", "]", "=", "0", "\n", "", "if", "'restrict_down'", "in", "restricts", "and", "restricts", "[", "'restrict_down'", "]", "==", "1", ":", "\n", "        ", "t", "[", "'s'", "]", "=", "max", "(", "t", "[", "'s'", "]", ",", "1", ")", "\n", "t", "[", "'ty'", "]", "=", "max", "(", "t", "[", "'ty'", "]", ",", "0", ")", "\n", "t", "[", "'theta'", "]", "=", "0", "\n", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.single_image_process.__identity_transform": [[72, 79], ["dict"], "function", ["None"], ["", "def", "__identity_transform", "(", ")", ":", "\n", "    ", "t", "=", "dict", "(", ")", "\n", "t", "[", "'s'", "]", "=", "1", "\n", "t", "[", "'tx'", "]", "=", "0", "\n", "t", "[", "'ty'", "]", "=", "0", "\n", "t", "[", "'theta'", "]", "=", "0", "\n", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.single_image_process.get_restriction": [[81, 106], ["dict"], "function", ["None"], ["", "def", "get_restriction", "(", "bndbox", ",", "width", ",", "height", ")", ":", "\n", "    ", "\"\"\"\n    Restrict transform parameters.\n    :param bndbox: bounding box of original object in [xmin, ymin, xmax, ymax]\n    :param width: image width\n    :param height: image height\n    :return: a dictionary containing restrictions\n    \"\"\"", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "bndbox", "\n", "restricts", "=", "dict", "(", ")", "\n", "restricts", "[", "'bbox_w'", "]", "=", "xmax", "-", "xmin", "\n", "restricts", "[", "'bbox_h'", "]", "=", "ymax", "-", "ymin", "\n", "if", "xmin", "<", "10", ":", "\n", "        ", "restricts", "[", "'restrict_left'", "]", "=", "1", "\n", "restricts", "[", "'noflip'", "]", "=", "1", "\n", "", "if", "xmax", ">", "width", "-", "10", ":", "\n", "        ", "restricts", "[", "'restrict_right'", "]", "=", "1", "\n", "restricts", "[", "'noflip'", "]", "=", "1", "\n", "", "if", "ymin", "<", "10", ":", "\n", "        ", "restricts", "[", "'restrict_up'", "]", "=", "1", "\n", "restricts", "[", "'noflip'", "]", "=", "1", "\n", "", "if", "ymax", ">", "height", "-", "10", ":", "\n", "        ", "restricts", "[", "'restrict_down'", "]", "=", "1", "\n", "restricts", "[", "'noflip'", "]", "=", "1", "\n", "", "return", "restricts", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.config.InstaBoostConfig.__init__": [[5, 31], ["numpy.array", "numpy.array", "len", "len", "numpy.sum", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "action_candidate", ":", "tuple", "=", "(", "'normal'", ",", "'horizontal'", ",", "'skip'", ")", ",", "\n", "action_prob", ":", "tuple", "=", "(", "1", ",", "0", ",", "0", ")", ",", "scale", ":", "tuple", "=", "(", "0.8", ",", "1.2", ")", ",", "dx", ":", "float", "=", "15", ",", "dy", ":", "float", "=", "15", ",", "\n", "theta", "=", "(", "-", "1", ",", "1", ")", ",", "color_prob", "=", "0.5", ",", "heatmap_flag", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param action_candidate: tuple of action candidates. 'normal', 'horizontal', 'vertical', 'skip' are supported\n        :param action_prob: tuple of corresponding action probabilities. Should be the same length as action_candidate\n        :param scale: tuple of (min scale, max scale)\n        :param dx: the maximum x-axis shift will be  (instance width) / dx\n        :param dy: the maximum y-axis shift will be  (instance height) / dy\n        :param theta: tuple of (min rotation degree, max rotation degree)\n        :param color_prob: the probability of images for color augmentation\n        :param heatmap_flag: whether to use heatmap guided\n        \"\"\"", "\n", "assert", "len", "(", "action_candidate", ")", "==", "len", "(", "action_prob", ")", ",", "'Candidate & probability length mismatch'", "\n", "assert", "np", ".", "sum", "(", "action_prob", ")", "==", "1", ",", "'Probability must sum to 1'", "\n", "assert", "len", "(", "scale", ")", "==", "2", ",", "'scale should have 2 items (min scale, max scale)'", "\n", "assert", "len", "(", "theta", ")", "==", "2", ",", "'theta should have 2 items (min theta, max theta)'", "\n", "\n", "self", ".", "action_candidate", "=", "np", ".", "array", "(", "action_candidate", ")", "\n", "self", ".", "action_prob", "=", "np", ".", "array", "(", "action_prob", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "dx", "=", "dx", "\n", "self", ".", "dy", "=", "dy", "\n", "self", ".", "theta", "=", "theta", "\n", "self", ".", "color_prob", "=", "color_prob", "\n", "self", ".", "heatmap_flag", "=", "heatmap_flag", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.InstaBoost.get_new_data": [[12, 62], ["copy.deepcopy", "copy.deepcopy", "numpy.random.choice", "cv2.merge", "config.InstaBoostConfig", "affine_transform.transform_image", "affine_transform.transform_annotation", "PIL.Image.fromarray", "InstaBoost.randomColor", "cv2.cvtColor", "len", "get_instance_group.extract", "get_instance_group.extract", "pointByHeatmap.paste_position", "range", "cv2.cvtColor", "numpy.asarray", "len"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.affine_transform.transform_image", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.affine_transform.transform_annotation", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.InstaBoost.randomColor", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.get_instance_group.extract", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.get_instance_group.extract", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pointByHeatmap.paste_position"], ["def", "get_new_data", "(", "ori_anns", ":", "list", ",", "ori_img", ":", "np", ".", "ndarray", ",", "config", ":", "InstaBoostConfig", "=", "None", ",", "background", ":", "np", ".", "ndarray", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Get a new image with new annotations from original image and annotations\n    :param ori_anns: list of coco-style annotation dicts\n    :param ori_img: numpy array\n    :param config: a InstaBoostConfig instance. If None, the default parameters will be used.\n    :param background: if not None, this background image will be used for augmentation\n    :return: new_ann, new_img\n    \"\"\"", "\n", "ori_anns_bak", "=", "deepcopy", "(", "ori_anns", ")", "\n", "ori_anns", "=", "deepcopy", "(", "ori_anns", ")", "\n", "\n", "if", "len", "(", "ori_img", ".", "shape", ")", "==", "2", "or", "ori_img", ".", "shape", "[", "2", "]", "==", "1", ":", "# gray scale", "\n", "        ", "ori_img", "=", "cv2", ".", "merge", "(", "[", "ori_img", "]", "*", "3", ")", "\n", "\n", "", "if", "config", "is", "None", ":", "\n", "        ", "config", "=", "InstaBoostConfig", "(", ")", "\n", "\n", "", "try", ":", "\n", "        ", "if", "background", "is", "None", ":", "\n", "            ", "background", ",", "instances_list", ",", "transforms_list", ",", "groupbnds_list", ",", "groupidx_list", "=", "extract", "(", "ori_anns", ",", "ori_img", ",", "config", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "instances_list", ",", "transforms_list", ",", "groupbnds_list", ",", "groupidx_list", "=", "extract", "(", "ori_anns", ",", "ori_img", ",", "config", ")", "\n", "", "assert", "background", ".", "shape", "==", "ori_img", ".", "shape", ",", "'Background and original image shape mismatch'", "\n", "\n", "if", "config", ".", "heatmap_flag", ":", "\n", "            ", "heatmap_guided_pos_list", "=", "paste_position", "(", "ori_anns", ",", "ori_img", ",", "groupidx_list", ",", "groupbnds_list", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "heatmap_guided_pos_list", ")", ")", ":", "\n", "                ", "heatmap_guided_pos", "=", "heatmap_guided_pos_list", "[", "i", "]", "\n", "\n", "if", "heatmap_guided_pos", "[", "0", "]", "!=", "-", "1", ":", "\n", "                    ", "transforms_list", "[", "i", "]", "[", "'tx'", "]", "=", "heatmap_guided_pos", "[", "1", "]", "\n", "transforms_list", "[", "i", "]", "[", "'ty'", "]", "=", "heatmap_guided_pos", "[", "0", "]", "\n", "\n", "", "", "", "new_img", "=", "transform_image", "(", "background", ",", "instances_list", ",", "transforms_list", ")", "\n", "new_ann", "=", "transform_annotation", "(", "ori_anns", ",", "transforms_list", ",", "groupbnds_list", ",", "groupidx_list", ",", "\n", "background", ".", "shape", "[", "1", "]", ",", "background", ".", "shape", "[", "0", "]", ")", "\n", "", "except", "(", "AnnError", ",", "TrimapError", ")", ":", "\n", "        ", "new_ann", "=", "ori_anns_bak", "\n", "new_img", "=", "ori_img", "\n", "\n", "", "color_flag", "=", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", "]", ",", "p", "=", "[", "1", "-", "config", ".", "color_prob", ",", "config", ".", "color_prob", "]", ")", "\n", "if", "color_flag", ":", "\n", "        ", "PIL_img", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "new_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "PIL_img", "=", "randomColor", "(", "PIL_img", ")", "\n", "new_img", "=", "cv2", ".", "cvtColor", "(", "np", ".", "asarray", "(", "PIL_img", ")", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "\n", "", "return", "new_ann", ",", "new_img", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.InstaBoost.randomColor": [[63, 77], ["PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Sharpness().enhance", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Sharpness"], "function", ["None"], ["", "def", "randomColor", "(", "image", ")", ":", "\n", "        ", "\"\"\"\n        \u5bf9\u56fe\u50cf\u8fdb\u884c\u989c\u8272\u6296\u52a8\n        :param image: PIL\u7684\u56fe\u50cfimage\n        :return: \u6709\u989c\u8272\u8272\u5dee\u7684\u56fe\u50cfimage\n        \"\"\"", "\n", "random_factor", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "31", ")", "/", "10.", "# \u968f\u673a\u56e0\u5b50", "\n", "color_image", "=", "ImageEnhance", ".", "Color", "(", "image", ")", ".", "enhance", "(", "random_factor", ")", "# \u8c03\u6574\u56fe\u50cf\u7684\u9971\u548c\u5ea6", "\n", "random_factor", "=", "np", ".", "random", ".", "randint", "(", "10", ",", "21", ")", "/", "10.", "# \u968f\u673a\u56e0\u5b50", "\n", "brightness_image", "=", "ImageEnhance", ".", "Brightness", "(", "color_image", ")", ".", "enhance", "(", "random_factor", ")", "# \u8c03\u6574\u56fe\u50cf\u7684\u4eae\u5ea6", "\n", "random_factor", "=", "np", ".", "random", ".", "randint", "(", "10", ",", "21", ")", "/", "10.", "# \u968f\u673a\u56e0\u5b50", "\n", "contrast_image", "=", "ImageEnhance", ".", "Contrast", "(", "brightness_image", ")", ".", "enhance", "(", "random_factor", ")", "# \u8c03\u6574\u56fe\u50cf\u5bf9\u6bd4\u5ea6", "\n", "random_factor", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "31", ")", "/", "10.", "# \u968f\u673a\u56e0\u5b50", "\n", "return", "ImageEnhance", ".", "Sharpness", "(", "contrast_image", ")", ".", "enhance", "(", "random_factor", ")", "# \u8c03\u6574\u56fe\u50cf\u9510\u5ea6", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.exceptions.TrimapError.__init__": [[5, 7], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["def", "__init__", "(", "self", ",", "err", ")", ":", "\n", "        ", "super", "(", "TrimapError", ",", "self", ")", ".", "__init__", "(", "err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.exceptions.AnnError.__init__": [[13, 15], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["def", "__init__", "(", "self", ",", "err", ")", ":", "\n", "        ", "super", "(", "AnnError", ",", "self", ")", ".", "__init__", "(", "err", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pycococreater.resize_binary_mask": [[17, 21], ["PIL.Image.fromarray", "image.resize.resize", "numpy.asarray().astype", "array.astype", "numpy.asarray", "numpy.np.uint8"], "function", ["None"], ["def", "resize_binary_mask", "(", "array", ",", "new_size", ")", ":", "\n", "    ", "image", "=", "Image", ".", "fromarray", "(", "array", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", ")", "\n", "image", "=", "image", ".", "resize", "(", "new_size", ")", "\n", "return", "np", ".", "asarray", "(", "image", ")", ".", "astype", "(", "np", ".", "bool_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pycococreater.close_contour": [[22, 26], ["numpy.array_equal", "numpy.vstack"], "function", ["None"], ["", "def", "close_contour", "(", "contour", ")", ":", "\n", "    ", "if", "not", "np", ".", "array_equal", "(", "contour", "[", "0", "]", ",", "contour", "[", "-", "1", "]", ")", ":", "\n", "        ", "contour", "=", "np", ".", "vstack", "(", "(", "contour", ",", "contour", "[", "0", "]", ")", ")", "\n", "", "return", "contour", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pycococreater.binary_mask_to_rle": [[27, 36], ["rle.get", "enumerate", "list", "itertools.groupby", "rle.get.append", "binary_mask.ravel", "rle.get.append", "len", "list"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get"], ["", "def", "binary_mask_to_rle", "(", "binary_mask", ")", ":", "\n", "    ", "rle", "=", "{", "'counts'", ":", "[", "]", ",", "'size'", ":", "list", "(", "binary_mask", ".", "shape", ")", "}", "\n", "counts", "=", "rle", ".", "get", "(", "'counts'", ")", "\n", "for", "i", ",", "(", "value", ",", "elements", ")", "in", "enumerate", "(", "groupby", "(", "binary_mask", ".", "ravel", "(", "order", "=", "'F'", ")", ")", ")", ":", "\n", "        ", "if", "i", "==", "0", "and", "value", "==", "1", ":", "\n", "                ", "counts", ".", "append", "(", "0", ")", "\n", "", "counts", ".", "append", "(", "len", "(", "list", "(", "elements", ")", ")", ")", "\n", "\n", "", "return", "rle", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pycococreater.binary_mask_to_polygon": [[37, 61], ["numpy.pad", "skimage.measure.find_contours", "numpy.subtract", "pycococreater.close_contour", "skimage.measure.approximate_polygon", "numpy.flip", "np.flip.ravel().tolist", "polygons.append", "len", "np.flip.ravel"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pycococreater.close_contour"], ["", "def", "binary_mask_to_polygon", "(", "binary_mask", ",", "tolerance", "=", "0", ")", ":", "\n", "    ", "\"\"\"Converts a binary mask to COCO polygon representation\n    Args:\n        binary_mask: a 2D binary numpy array where '1's represent the object\n        tolerance: Maximum distance from original points of polygon to approximated\n            polygonal chain. If tolerance is 0, the original coordinate array is returned.\n    \"\"\"", "\n", "polygons", "=", "[", "]", "\n", "# pad mask to close contours of shapes which start and end at an edge", "\n", "padded_binary_mask", "=", "np", ".", "pad", "(", "binary_mask", ",", "pad_width", "=", "1", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "contours", "=", "measure", ".", "find_contours", "(", "padded_binary_mask", ",", "0.5", ")", "\n", "contours", "=", "np", ".", "subtract", "(", "contours", ",", "1", ")", "\n", "for", "contour", "in", "contours", ":", "\n", "        ", "contour", "=", "close_contour", "(", "contour", ")", "\n", "contour", "=", "measure", ".", "approximate_polygon", "(", "contour", ",", "tolerance", ")", "\n", "if", "len", "(", "contour", ")", "<", "3", ":", "\n", "            ", "continue", "\n", "", "contour", "=", "np", ".", "flip", "(", "contour", ",", "axis", "=", "1", ")", "\n", "segmentation", "=", "contour", ".", "ravel", "(", ")", ".", "tolist", "(", ")", "\n", "# after padding and subtracting 1 we may get -0.5 points in our segmentation", "\n", "segmentation", "=", "[", "0", "if", "i", "<", "0", "else", "i", "for", "i", "in", "segmentation", "]", "\n", "polygons", ".", "append", "(", "segmentation", ")", "\n", "\n", "", "return", "polygons", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pycococreater.create_image_info": [[62, 78], ["datetime.datetime.utcnow().isoformat", "datetime.datetime.utcnow"], "function", ["None"], ["", "def", "create_image_info", "(", "image_id", ",", "file_name", ",", "image_size", ",", "\n", "date_captured", "=", "datetime", ".", "datetime", ".", "utcnow", "(", ")", ".", "isoformat", "(", "' '", ")", ",", "\n", "license_id", "=", "1", ",", "coco_url", "=", "\"\"", ",", "flickr_url", "=", "\"\"", ")", ":", "\n", "\n", "    ", "image_info", "=", "{", "\n", "\"id\"", ":", "image_id", ",", "\n", "\"file_name\"", ":", "file_name", ",", "\n", "\"width\"", ":", "image_size", "[", "0", "]", ",", "\n", "\"height\"", ":", "image_size", "[", "1", "]", ",", "\n", "\"date_captured\"", ":", "date_captured", ",", "\n", "\"license\"", ":", "license_id", ",", "\n", "\"coco_url\"", ":", "coco_url", ",", "\n", "\"flickr_url\"", ":", "flickr_url", "\n", "}", "\n", "\n", "return", "image_info", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pycococreater.create_annotation_info": [[79, 116], ["pycocotools.mask.encode", "pycocotools.mask.area", "pycococreater.resize_binary_mask", "numpy.asfortranarray", "pycocotools.mask.toBbox", "pycococreater.binary_mask_to_rle", "pycococreater.binary_mask_to_polygon", "mask.area.tolist", "mask.toBbox.tolist", "resize_binary_mask.astype"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pycococreater.resize_binary_mask", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pycococreater.binary_mask_to_rle", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pycococreater.binary_mask_to_polygon"], ["", "def", "create_annotation_info", "(", "annotation_id", ",", "image_id", ",", "category_info", ",", "binary_mask", ",", "\n", "image_size", "=", "None", ",", "tolerance", "=", "2", ",", "bounding_box", "=", "None", ")", ":", "\n", "\n", "    ", "if", "image_size", "is", "not", "None", ":", "\n", "        ", "binary_mask", "=", "resize_binary_mask", "(", "binary_mask", ",", "image_size", ")", "\n", "\n", "", "binary_mask_encoded", "=", "mask", ".", "encode", "(", "np", ".", "asfortranarray", "(", "binary_mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ")", "\n", "\n", "area", "=", "mask", ".", "area", "(", "binary_mask_encoded", ")", "\n", "if", "area", "<", "1", ":", "\n", "        ", "return", "None", "\n", "\n", "", "if", "bounding_box", "is", "None", ":", "\n", "        ", "bounding_box", "=", "mask", ".", "toBbox", "(", "binary_mask_encoded", ")", "\n", "\n", "", "if", "category_info", "[", "\"is_crowd\"", "]", ":", "\n", "        ", "is_crowd", "=", "1", "\n", "segmentation", "=", "binary_mask_to_rle", "(", "binary_mask", ")", "\n", "", "else", ":", "\n", "        ", "is_crowd", "=", "0", "\n", "segmentation", "=", "binary_mask_to_polygon", "(", "binary_mask", ",", "tolerance", ")", "\n", "if", "not", "segmentation", ":", "\n", "            ", "return", "None", "\n", "\n", "", "", "annotation_info", "=", "{", "\n", "\"id\"", ":", "annotation_id", ",", "\n", "\"image_id\"", ":", "image_id", ",", "\n", "\"category_id\"", ":", "category_info", "[", "\"id\"", "]", ",", "\n", "\"iscrowd\"", ":", "is_crowd", ",", "\n", "\"area\"", ":", "area", ".", "tolist", "(", ")", ",", "\n", "\"bbox\"", ":", "bounding_box", ".", "tolist", "(", ")", ",", "\n", "\"segmentation\"", ":", "segmentation", ",", "\n", "\"width\"", ":", "binary_mask", ".", "shape", "[", "1", "]", ",", "\n", "\"height\"", ":", "binary_mask", ".", "shape", "[", "0", "]", ",", "\n", "}", "\n", "\n", "return", "annotation_info", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.get_instance_group.cocoseg_to_binary": [[14, 34], ["type", "pycocotools.frPyObjects", "pycocotools.merge", "pycocotools.decode", "type", "pycocotools.frPyObjects", "pycocotools.decode", "pycocotools.merge", "pycocotools.decode", "numpy.np.int32"], "function", ["None"], ["def", "cocoseg_to_binary", "(", "seg", ",", "height", ",", "width", ")", ":", "\n", "    ", "\"\"\"\n    COCO style segmentation to binary mask\n    :param seg: coco-style segmentation\n    :param height: image height\n    :param width: image width\n    :return: binary mask\n    \"\"\"", "\n", "if", "type", "(", "seg", ")", "==", "list", ":", "\n", "        ", "rle", "=", "cocomask", ".", "frPyObjects", "(", "seg", ",", "height", ",", "width", ")", "\n", "rle", "=", "cocomask", ".", "merge", "(", "rle", ")", "\n", "mask", "=", "cocomask", ".", "decode", "(", "[", "rle", "]", ")", "\n", "", "elif", "type", "(", "seg", "[", "'counts'", "]", ")", "==", "list", ":", "\n", "        ", "rle", "=", "cocomask", ".", "frPyObjects", "(", "seg", ",", "height", ",", "width", ")", "\n", "mask", "=", "cocomask", ".", "decode", "(", "[", "rle", "]", ")", "\n", "", "else", ":", "\n", "        ", "rle", "=", "cocomask", ".", "merge", "(", "seg", ")", "\n", "mask", "=", "cocomask", ".", "decode", "(", "[", "rle", "]", ")", "\n", "", "assert", "mask", ".", "shape", "[", "2", "]", "==", "1", "\n", "return", "mask", "[", ":", ",", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.get_instance_group.__get_coco_masks": [[36, 61], ["numpy.zeros", "enumerate", "numpy.asarray", "len", "exceptions.AnnError", "np.asarray.append", "get_instance_group.cocoseg_to_binary", "cocoseg_to_binary.astype"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.cocoseg_to_binary"], ["", "def", "__get_coco_masks", "(", "anns", ":", "list", ",", "height", ":", "int", ",", "width", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n    Get coco masks from annotations.\n    :param anns: list of coco-style annotation\n    :param height: image height\n    :param width: image width\n    :return: masks, hxw numpy array\n             classes, nx1\n    \"\"\"", "\n", "if", "len", "(", "anns", ")", "==", "0", ":", "\n", "        ", "raise", "AnnError", "(", "'Empty annotation detected.'", ")", "\n", "\n", "", "classes", "=", "[", "]", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "for", "inst_idx", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "        ", "cat_id", "=", "ann", "[", "'category_id'", "]", "\n", "classes", ".", "append", "(", "cat_id", ")", "\n", "\n", "m", "=", "cocoseg_to_binary", "(", "ann", "[", "'segmentation'", "]", ",", "height", ",", "width", ")", "# zero one mask", "\n", "m", "=", "m", ".", "astype", "(", "np", ".", "int32", ")", "*", "(", "inst_idx", "+", "1", ")", "\n", "mask", "[", "m", ">", "0", "]", "=", "m", "[", "m", ">", "0", "]", "\n", "\n", "", "classes", "=", "np", ".", "asarray", "(", "classes", ")", "\n", "return", "mask", ",", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.get_instance_group.overlap": [[63, 70], ["None"], "function", ["None"], ["", "def", "overlap", "(", "bbox1", ",", "bbox2", ")", ":", "\n", "    ", "\"\"\"\n    Given two bboxes, return whether the two bboxes overlap\n    \"\"\"", "\n", "x1", ",", "y1", ",", "w1", ",", "h1", "=", "bbox1", "\n", "x2", ",", "y2", ",", "w2", ",", "h2", "=", "bbox2", "\n", "return", "(", "x1", "<", "x2", "+", "w2", ")", "and", "(", "y1", "<", "y2", "+", "h2", ")", "and", "(", "x2", "<", "x1", "+", "w1", ")", "and", "(", "y2", "<", "y1", "+", "h1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.get_instance_group.dfs": [[72, 88], ["len", "range", "get_instance_group.overlap", "cur_group.append", "get_instance_group.dfs"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.get_instance_group.overlap", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.get_instance_group.dfs"], ["", "def", "dfs", "(", "bboxs", ",", "belonging", ",", "cur_group", ",", "group_idx", ",", "i", ")", ":", "\n", "    ", "\"\"\"\n    Depth first search (dfs) finding overlapped instance groups.\n    :param bboxs: list of bounding boxes\n    :param belonging: list of instance belongings\n    :param cur_group: current group list\n    :param group_idx: current group index\n    :param i: current instance index\n    \"\"\"", "\n", "numinst", "=", "len", "(", "bboxs", ")", "\n", "for", "j", "in", "range", "(", "numinst", ")", ":", "\n", "        ", "if", "belonging", "[", "j", "]", "==", "0", "and", "j", "!=", "i", ":", "\n", "            ", "if", "overlap", "(", "bboxs", "[", "i", "]", ",", "bboxs", "[", "j", "]", ")", ":", "\n", "                ", "belonging", "[", "j", "]", "=", "group_idx", "\n", "cur_group", ".", "append", "(", "j", ")", "\n", "dfs", "(", "bboxs", ",", "belonging", ",", "cur_group", ",", "group_idx", ",", "j", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.get_instance_group.gettrimap": [[90, 107], ["numpy.ones", "scipy.ndimage.convolve", "ndimage.convolve.astype", "exceptions.TrimapError", "ndimage.convolve.max", "ndimage.convolve.min"], "function", ["None"], ["", "", "", "", "def", "gettrimap", "(", "mask", ",", "k", ")", ":", "\n", "    ", "\"\"\"\n    Compute matting trimap from given mask.\n    :param mask: binary ground truth mask\n    :param k: number of extended pixels\n    :return: matting trimap. 255 for groundtruth foreground, 127 for uncertain area, 0 for ground truth background\n    \"\"\"", "\n", "#np.set_printoptions(threshold=np.nan)", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "2", "*", "k", "+", "1", ",", "2", "*", "k", "+", "1", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "trimap", "=", "ndimage", ".", "convolve", "(", "mask", ",", "kernel", ",", "mode", "=", "'constant'", ")", "\n", "\n", "trimap", "=", "(", "trimap", ">", "0", ")", "*", "127", "\n", "trimap", "[", "mask", ">", "0", "]", "=", "255", "\n", "\n", "if", "trimap", ".", "max", "(", ")", "!=", "255", "or", "trimap", ".", "min", "(", ")", "!=", "0", ":", "\n", "        ", "raise", "TrimapError", "(", "'matting trimap failed.'", ")", "\n", "", "return", "trimap", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.get_instance_group.get_masks": [[109, 117], ["numpy.zeros_like"], "function", ["None"], ["", "def", "get_masks", "(", "mat", ",", "klist", ")", ":", "\n", "    ", "\"\"\"\n    Merge the mask of multiple objects in klist.\n    \"\"\"", "\n", "retMat", "=", "np", ".", "zeros_like", "(", "mat", ")", "\n", "for", "k", "in", "klist", ":", "\n", "        ", "retMat", "+=", "(", "mat", "-", "1", "==", "k", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "return", "retMat", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.get_instance_group.extract": [[119, 190], ["get_instance_group.__get_coco_masks", "cv2.inpaint", "len", "range", "range", "numpy.uint8", "len", "realbboxs.append", "range", "get_instance_group.get_masks", "get_instance_group.gettrimap", "opencv_mat.global_matting", "opencv_mat.guided_filter", "numpy.dstack", "single_image_process.get_restriction", "single_image_process.get_transform", "instances_list.append", "transforms_list.append", "groupbnd_list.append", "group.append", "get_instance_group.dfs", "len", "min", "min", "max", "max", "int", "round", "len"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.__get_coco_masks", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.get_instance_group.get_masks", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.get_instance_group.gettrimap", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.single_image_process.get_restriction", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.single_image_process.get_transform", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.get_instance_group.dfs"], ["", "def", "extract", "(", "anns", ":", "list", ",", "img", ":", "np", ".", "ndarray", ",", "config", ":", "InstaBoostConfig", ")", ":", "\n", "    ", "\"\"\"\n    Inpaint background, extract list of instances (in overlapping groups), get transformations and other useful\n    information from input image and annotations.\n    :param anns: list of input annotations\n    :param img: input original image\n    :param config: an InstaBoostConfig instance containing transform parameters\n    :return: [background: inpainted background image\n              instances_list: list of instance rgba images\n              transforms_list: list of transformation dicts\n              groupbnd_list: list of bounding boxes\n              group: list of instence indices in groups]\n    \"\"\"", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", "\n", "\n", "mask", ",", "labels", "=", "__get_coco_masks", "(", "anns", ",", "height", ",", "width", ")", "\n", "\n", "# inpainting", "\n", "#inpaint_mask = np.uint8(mask > 0)", "\n", "#inpaint_mask = ndimage.binary_dilation(inpaint_mask, structure=ndimage.generate_binary_structure(2, 2), iterations=2)", "\n", "background", "=", "cv2", ".", "inpaint", "(", "img", ",", "np", ".", "uint8", "(", "mask", ")", ",", "5", ",", "cv2", ".", "INPAINT_NS", ")", "\n", "\n", "numinst", "=", "len", "(", "anns", ")", "\n", "bboxs", "=", "[", "ann", "[", "'bbox'", "]", "for", "ann", "in", "anns", "]", "\n", "\n", "inst_group_belonging", "=", "[", "0", "]", "*", "numinst", "\n", "group", "=", "[", "]", "\n", "group_idx", "=", "1", "\n", "for", "i", "in", "range", "(", "numinst", ")", ":", "\n", "        ", "if", "inst_group_belonging", "[", "i", "]", "==", "0", ":", "\n", "            ", "group", ".", "append", "(", "[", "i", "]", ")", "\n", "inst_group_belonging", "[", "i", "]", "=", "group_idx", "\n", "dfs", "(", "bboxs", ",", "inst_group_belonging", ",", "group", "[", "len", "(", "group", ")", "-", "1", "]", ",", "group_idx", ",", "i", ")", "\n", "group_idx", "+=", "1", "\n", "", "", "realbboxs", "=", "[", "]", "\n", "\n", "instances_list", "=", "[", "]", "\n", "transforms_list", "=", "[", "]", "\n", "groupbnd_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "group", ")", ")", ":", "\n", "        ", "x", ",", "y", ",", "w", ",", "h", "=", "bboxs", "[", "group", "[", "i", "]", "[", "0", "]", "]", "\n", "realbboxs", ".", "append", "(", "[", "x", ",", "y", ",", "x", "+", "w", ",", "y", "+", "h", "]", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "group", "[", "i", "]", ")", ")", ":", "\n", "            ", "x", ",", "y", ",", "w", ",", "h", "=", "bboxs", "[", "group", "[", "i", "]", "[", "j", "]", "]", "\n", "realbboxs", "[", "i", "]", "[", "0", "]", "=", "min", "(", "realbboxs", "[", "i", "]", "[", "0", "]", ",", "x", ")", "\n", "realbboxs", "[", "i", "]", "[", "1", "]", "=", "min", "(", "realbboxs", "[", "i", "]", "[", "1", "]", ",", "y", ")", "\n", "realbboxs", "[", "i", "]", "[", "2", "]", "=", "max", "(", "realbboxs", "[", "i", "]", "[", "2", "]", ",", "x", "+", "w", ")", "\n", "realbboxs", "[", "i", "]", "[", "3", "]", "=", "max", "(", "realbboxs", "[", "i", "]", "[", "3", "]", ",", "y", "+", "h", ")", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "realbboxs", "[", "i", "]", "\n", "\n", "", "maskgroupi", "=", "get_masks", "(", "mask", ",", "group", "[", "i", "]", ")", "\n", "trimapi", "=", "gettrimap", "(", "maskgroupi", ",", "5", ")", "\n", "\n", "alphamapi", "=", "global_matting", "(", "img", ",", "trimapi", ")", "\n", "alphamapi", "=", "guided_filter", "(", "img", ",", "trimapi", ",", "alphamapi", ",", "10", ",", "1e-5", ")", "\n", "\n", "ymin", ",", "ymax", ",", "xmin", ",", "xmax", "=", "[", "int", "(", "round", "(", "x", ")", ")", "for", "x", "in", "(", "ymin", ",", "ymax", ",", "xmin", ",", "xmax", ")", "]", "\n", "resulti", "=", "np", ".", "dstack", "(", "(", "img", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", ",", "alphamapi", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", ")", ")", "\n", "\n", "restricts", "=", "get_restriction", "(", "[", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "]", ",", "width", ",", "height", ")", "\n", "resulti", ",", "transformi", "=", "get_transform", "(", "resulti", ",", "restricts", ",", "config", ")", "# resulti may be flipped", "\n", "\n", "transformi", "[", "'tx'", "]", "+=", "(", "xmin", "+", "xmax", ")", "/", "2", "\n", "transformi", "[", "'ty'", "]", "+=", "(", "ymin", "+", "ymax", ")", "/", "2", "\n", "\n", "instances_list", ".", "append", "(", "resulti", ")", "\n", "transforms_list", ".", "append", "(", "transformi", ")", "\n", "groupbnd_list", ".", "append", "(", "[", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "]", ")", "\n", "\n", "", "return", "background", ",", "instances_list", ",", "transforms_list", ",", "groupbnd_list", ",", "group", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.AnnError.__init__": [[9, 11], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["def", "__init__", "(", "self", ",", "err", ")", ":", "\n", "        ", "super", "(", "AnnError", ",", "self", ")", ".", "__init__", "(", "err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.cocoseg_to_binary": [[12, 32], ["type", "pycocotools.frPyObjects", "pycocotools.merge", "pycocotools.decode", "type", "pycocotools.frPyObjects", "pycocotools.decode", "pycocotools.merge", "pycocotools.decode", "numpy.np.int32"], "function", ["None"], ["", "", "def", "cocoseg_to_binary", "(", "seg", ",", "height", ",", "width", ")", ":", "\n", "    ", "\"\"\"\n    COCO style segmentation to binary mask\n    :param seg: coco-style segmentation\n    :param height: image height\n    :param width: image width\n    :return: binary mask\n    \"\"\"", "\n", "if", "type", "(", "seg", ")", "==", "list", ":", "\n", "        ", "rle", "=", "cocomask", ".", "frPyObjects", "(", "seg", ",", "height", ",", "width", ")", "\n", "rle", "=", "cocomask", ".", "merge", "(", "rle", ")", "\n", "mask", "=", "cocomask", ".", "decode", "(", "[", "rle", "]", ")", "\n", "", "elif", "type", "(", "seg", "[", "'counts'", "]", ")", "==", "list", ":", "\n", "        ", "rle", "=", "cocomask", ".", "frPyObjects", "(", "seg", ",", "height", ",", "width", ")", "\n", "mask", "=", "cocomask", ".", "decode", "(", "[", "rle", "]", ")", "\n", "", "else", ":", "\n", "        ", "rle", "=", "cocomask", ".", "merge", "(", "seg", ")", "\n", "mask", "=", "cocomask", ".", "decode", "(", "[", "rle", "]", ")", "\n", "", "assert", "mask", ".", "shape", "[", "2", "]", "==", "1", "\n", "return", "mask", "[", ":", ",", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.__get_coco_masks": [[33, 61], ["numpy.zeros", "enumerate", "numpy.asarray", "len", "help_functions.AnnError", "np.asarray.append", "help_functions.cocoseg_to_binary", "cocoseg_to_binary.astype"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.cocoseg_to_binary"], ["", "def", "__get_coco_masks", "(", "anns", ":", "list", ",", "img", ")", ":", "\n", "    ", "\"\"\"\n    Get coco masks from annotations.\n    :param anns: list of coco-style annotation\n    :param height: image height\n    :param width: image width\n    :return: masks, hxw numpy array\n             classes, nx1\n    \"\"\"", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", "\n", "\n", "if", "len", "(", "anns", ")", "==", "0", ":", "\n", "        ", "raise", "AnnError", "(", "'Empty annotation detected.'", ")", "\n", "\n", "", "classes", "=", "[", "]", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "for", "inst_idx", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "        ", "cat_id", "=", "ann", "[", "'category_id'", "]", "\n", "classes", ".", "append", "(", "cat_id", ")", "\n", "\n", "m", "=", "cocoseg_to_binary", "(", "ann", "[", "'segmentation'", "]", ",", "height", ",", "width", ")", "# zero one mask", "\n", "m", "=", "m", ".", "astype", "(", "np", ".", "int32", ")", "*", "(", "inst_idx", "+", "1", ")", "\n", "mask", "[", "m", ">", "0", "]", "=", "255", "\n", "\n", "", "classes", "=", "np", ".", "asarray", "(", "classes", ")", "\n", "return", "mask", ",", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.getTrimap": [[62, 68], ["range", "trimap.append", "numpy.stack", "numpy.where"], "function", ["None"], ["", "def", "getTrimap", "(", "outline", ")", ":", "\n", "# out -> in: 0, 1, 2, 3, 0", "\n", "    ", "trimap", "=", "[", "]", "#\u4ece\u5de6\u5230\u53f3\u662f\u4ece\u5916\u5230\u5185", "\n", "for", "i", "in", "range", "(", "1", ",", "4", ",", "1", ")", ":", "\n", "        ", "trimap", ".", "append", "(", "np", ".", "stack", "(", "np", ".", "where", "(", "outline", "==", "i", ")", ",", "axis", "=", "1", ")", ")", "\n", "", "return", "trimap", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.translateTrimap": [[70, 76], ["copy.deepcopy", "numpy.array", "range"], "function", ["None"], ["", "def", "translateTrimap", "(", "trimap", ",", "oripos", ",", "augpos", ")", ":", "\n", "    ", "augTrimap", "=", "deepcopy", "(", "trimap", ")", "\n", "oripos", "=", "np", ".", "array", "(", "oripos", ")", "\n", "for", "k", "in", "range", "(", "3", ")", ":", "\n", "        ", "augTrimap", "[", "k", "]", "=", "trimap", "[", "k", "]", "-", "oripos", "+", "augpos", "\n", "", "return", "augTrimap", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.getRings": [[78, 91], ["range", "posflag.all", "rings.append"], "function", ["None"], ["", "def", "getRings", "(", "img", ",", "trimap", ")", ":", "\n", "    ", "width", "=", "img", ".", "shape", "[", "0", "]", "\n", "height", "=", "img", ".", "shape", "[", "1", "]", "\n", "\n", "rings", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "x", ",", "y", "=", "trimap", "[", "i", "]", "[", ":", ",", "0", "]", ",", "trimap", "[", "i", "]", "[", ":", ",", "1", "]", "\n", "posflag", "=", "(", "x", "<", "width", ")", "*", "(", "x", ">=", "0", ")", "*", "(", "y", "<", "height", ")", "*", "(", "y", ">=", "0", ")", "\n", "if", "posflag", ".", "all", "(", ")", ":", "\n", "            ", "rings", ".", "append", "(", "img", "[", "x", ",", "y", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "", "", "return", "rings", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.cosine_similarity": [[93, 95], ["numpy.dot", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.ConvModule.norm", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.conv_module.ConvModule.norm"], ["", "def", "cosine_similarity", "(", "vector1", ",", "vector2", ")", ":", "\n", "    ", "return", "np", ".", "dot", "(", "vector1", ",", "vector2", ")", "/", "(", "np", ".", "linalg", ".", "norm", "(", "vector1", ")", "*", "(", "np", ".", "linalg", ".", "norm", "(", "vector2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.Euclidean_Distance": [[97, 99], ["numpy.sum", "numpy.sqrt", "numpy.sum", "numpy.square"], "function", ["None"], ["", "def", "Euclidean_Distance", "(", "vector1", ",", "vector2", ")", ":", "\n", "    ", "return", "np", ".", "sum", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "vector1", "-", "vector2", ")", ",", "axis", "=", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.getHeatpoint": [[101, 114], ["help_functions.translateTrimap", "help_functions.getRings", "range", "oriRings[].astype", "augRings[].astype", "help_functions.Euclidean_Distance"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.translateTrimap", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.getRings", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.Euclidean_Distance"], ["", "def", "getHeatpoint", "(", "oriTrimap", ",", "oriRings", ",", "background", ",", "oripos", ",", "augpos", ",", "config", "=", "[", "0.25", ",", "0.35", ",", "0.4", "]", ")", ":", "\n", "    ", "augTrimap", "=", "translateTrimap", "(", "oriTrimap", ",", "oripos", ",", "augpos", ")", "\n", "augRings", "=", "getRings", "(", "background", ",", "augTrimap", ")", "\n", "if", "not", "augRings", ":", "\n", "        ", "return", "-", "1", "\n", "\n", "", "heatPoint", "=", "0", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "matori", "=", "oriRings", "[", "i", "]", ".", "astype", "(", "int", ")", "\n", "mataug", "=", "augRings", "[", "i", "]", ".", "astype", "(", "int", ")", "\n", "ed", "=", "Euclidean_Distance", "(", "matori", ",", "mataug", ")", "/", "255", "\n", "heatPoint", "+=", "config", "[", "i", "]", "*", "ed", "\n", "", "return", "heatPoint", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.normalize": [[115, 124], ["numpy.max", "numpy.max"], "function", ["None"], ["", "def", "normalize", "(", "heatmap", ")", ":", "\n", "    ", "mm", "=", "np", ".", "max", "(", "heatmap", "[", "heatmap", ">=", "0", "]", ")", "\n", "heatmap", "[", "heatmap", "<", "0", "]", "=", "mm", "\n", "#heatmap[heatmap<400] = (heatmap[heatmap<400]/20)**2", "\n", "#heatmap = -np.log(heatmap/mm)", "\n", "heatmap", "=", "(", "1", "-", "heatmap", "/", "mm", ")", "**", "3", "\n", "mm", "=", "np", ".", "max", "(", "heatmap", ")", "\n", "heatmap", "=", "heatmap", "/", "mm", "*", "255", "\n", "return", "heatmap", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.affine_transform.__bbox_from_bboxes": [[9, 36], ["iter", "next", "min", "min", "max", "max", "next"], "function", ["None"], ["def", "__bbox_from_bboxes", "(", "bboxes", ":", "list", ")", ":", "\n", "    ", "\"\"\"\n    Compute the overall bbox of multiple bboxes\n    :param bboxes: list of bounding boxes. (should be list of list)\n    :return: overall bbox\n    \"\"\"", "\n", "bbox_iter", "=", "iter", "(", "bboxes", ")", "\n", "bbox", "=", "next", "(", "bbox_iter", ")", "\n", "xmin", "=", "bbox", "[", "0", "]", "\n", "xmax", "=", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", "\n", "ymin", "=", "bbox", "[", "1", "]", "\n", "ymax", "=", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "bbox_part", "=", "next", "(", "bbox_iter", ")", "\n", "_xmin", "=", "bbox_part", "[", "0", "]", "\n", "_xmax", "=", "bbox_part", "[", "0", "]", "+", "bbox_part", "[", "2", "]", "\n", "_ymin", "=", "bbox_part", "[", "1", "]", "\n", "_ymax", "=", "bbox_part", "[", "1", "]", "+", "bbox_part", "[", "3", "]", "\n", "", "except", "StopIteration", ":", "\n", "            ", "break", "\n", "", "xmin", "=", "min", "(", "xmin", ",", "_xmin", ")", "\n", "ymin", "=", "min", "(", "ymin", ",", "_ymin", ")", "\n", "xmax", "=", "max", "(", "xmax", ",", "_xmax", ")", "\n", "ymax", "=", "max", "(", "ymax", ",", "_ymax", ")", "\n", "", "bbox", "=", "[", "xmin", ",", "ymin", ",", "(", "xmax", "-", "xmin", ")", ",", "(", "ymax", "-", "ymin", ")", "]", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.affine_transform.__transform_img": [[38, 74], ["numpy.zeros", "numpy.array", "numpy.asfortranarray", "len", "len", "numpy.dsplit", "numpy.stack", "canvas.transpose.transpose", "len", "ValueError", "canvas.transpose.transpose", "scipy.ndimage.affine_transform", "len", "scipy.ndimage.affine_transform", "canvas.transpose.transpose", "ValueError", "print", "canvas.transpose.transpose", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos"], "function", ["None"], ["", "def", "__transform_img", "(", "img", ",", "trans_param", ",", "new_shape", ",", "order", "=", "3", ")", ":", "\n", "    ", "canvas", "=", "np", ".", "zeros", "(", "new_shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "3", ":", "\n", "        ", "try", ":", "\n", "            ", "canvas", "[", "0", ":", "img", ".", "shape", "[", "0", "]", ",", "0", ":", "img", ".", "shape", "[", "1", "]", ",", "0", ":", "img", ".", "shape", "[", "2", "]", "]", "=", "img", "\n", "", "except", ":", "\n", "            ", "print", "(", "'instance larger than img'", ")", "\n", "", "", "elif", "len", "(", "img", ".", "shape", ")", "==", "2", ":", "\n", "        ", "canvas", "[", "0", ":", "img", ".", "shape", "[", "0", "]", ",", "0", ":", "img", ".", "shape", "[", "1", "]", "]", "=", "img", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'image shape not understood {}'", ".", "format", "(", "img", ".", "shape", ")", ")", "\n", "\n", "", "s", "=", "trans_param", "[", "'s'", "]", "\n", "theta", "=", "trans_param", "[", "'theta'", "]", "\n", "tx", "=", "trans_param", "[", "'tx'", "]", "\n", "ty", "=", "trans_param", "[", "'ty'", "]", "\n", "\n", "# here t is the inverse of widely-known similarity transform matrix,", "\n", "# since ndimage.affine_transform is from new image to source", "\n", "t", "=", "np", ".", "array", "(", "[", "[", "1", "/", "s", "*", "np", ".", "cos", "(", "theta", ")", ",", "1", "/", "s", "*", "np", ".", "sin", "(", "theta", ")", "]", ",", "\n", "[", "-", "1", "/", "s", "*", "np", ".", "sin", "(", "theta", ")", ",", "1", "/", "s", "*", "np", ".", "cos", "(", "theta", ")", "]", "]", ")", "\n", "o", "=", "[", "-", "tx", "/", "s", "*", "np", ".", "cos", "(", "theta", ")", "-", "ty", "/", "s", "*", "np", ".", "sin", "(", "theta", ")", "+", "img", ".", "shape", "[", "1", "]", "/", "2", ",", "\n", "tx", "/", "s", "*", "np", ".", "sin", "(", "theta", ")", "-", "ty", "/", "s", "*", "np", ".", "cos", "(", "theta", ")", "+", "img", ".", "shape", "[", "0", "]", "/", "2", "]", "\n", "\n", "if", "len", "(", "canvas", ".", "shape", ")", "==", "3", ":", "# colored image", "\n", "        ", "chnls", "=", "np", ".", "dsplit", "(", "canvas", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", ",", "canvas", ".", "shape", "[", "2", "]", ")", "\n", "canvas", "=", "[", "ndimage", ".", "affine_transform", "(", "x", "[", ":", ",", ":", ",", "0", "]", ",", "t", ",", "o", ",", "order", "=", "order", ")", "for", "x", "in", "chnls", "]", "\n", "canvas", "=", "np", ".", "stack", "(", "canvas", ",", "axis", "=", "2", ")", "\n", "canvas", "=", "canvas", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "", "elif", "len", "(", "canvas", ".", "shape", ")", "==", "2", ":", "# single channel image", "\n", "        ", "canvas", "=", "ndimage", ".", "affine_transform", "(", "canvas", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", ",", "t", ",", "o", ",", "order", "=", "order", ")", "\n", "canvas", "=", "canvas", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'canvas shape not understood {}'", ".", "format", "(", "canvas", ".", "shape", ")", ")", "\n", "\n", "", "return", "np", ".", "asfortranarray", "(", "canvas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.affine_transform.__transform_kp": [[76, 110], ["numpy.array", "numpy.array().reshape", "numpy.zeros_like", "range", "new_kps.reshape().tolist.reshape().tolist", "numpy.array", "new_kps.reshape().tolist.reshape", "numpy.dot", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos"], "function", ["None"], ["", "def", "__transform_kp", "(", "keypoints", ",", "trans_param", ",", "group_bnd", ",", "new_shape", ")", ":", "\n", "    ", "height", ",", "width", "=", "new_shape", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "group_bnd", "\n", "\n", "s", "=", "trans_param", "[", "'s'", "]", "\n", "theta", "=", "trans_param", "[", "'theta'", "]", "\n", "tx", "=", "trans_param", "[", "'tx'", "]", "-", "(", "xmin", "+", "xmax", ")", "/", "2", "\n", "ty", "=", "trans_param", "[", "'ty'", "]", "-", "(", "ymin", "+", "ymax", ")", "/", "2", "\n", "\n", "H", "=", "np", ".", "array", "(", "[", "[", "s", "*", "np", ".", "cos", "(", "theta", ")", ",", "-", "s", "*", "np", ".", "sin", "(", "theta", ")", ",", "tx", "]", ",", "\n", "[", "s", "*", "np", ".", "sin", "(", "theta", ")", ",", "s", "*", "np", ".", "cos", "(", "theta", ")", ",", "ty", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "offset", "=", "[", "(", "xmin", "+", "xmax", ")", "/", "2", ",", "(", "ymin", "+", "ymax", ")", "/", "2", ",", "0", "]", "\n", "\n", "numpy_kps", "=", "np", ".", "array", "(", "keypoints", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "new_kps", "=", "np", ".", "zeros_like", "(", "numpy_kps", ")", "\n", "\n", "if", "'flip'", "in", "trans_param", ":", "\n", "        ", "if", "trans_param", "[", "'flip'", "]", "==", "'horizontal'", ":", "\n", "            ", "new_kps", "[", ":", ",", "0", "]", "=", "width", "-", "new_kps", "[", ":", ",", "0", "]", "-", "1", "\n", "", "elif", "trans_param", "[", "'flip'", "]", "==", "'vertical'", ":", "\n", "            ", "new_kps", "[", ":", ",", "1", "]", "=", "height", "-", "new_kps", "[", ":", ",", "1", "]", "-", "1", "\n", "\n", "", "", "for", "i", "in", "range", "(", "numpy_kps", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "kp", "=", "numpy_kps", "[", "i", "]", "\n", "vis_flag", "=", "kp", "[", "2", "]", "\n", "if", "vis_flag", ">", "0", ":", "\n", "            ", "kp", "[", "2", "]", "=", "1", "\n", "new_kps", "[", "i", "]", "=", "np", ".", "dot", "(", "H", ",", "kp", "-", "offset", ")", "+", "offset", "\n", "new_kps", "[", "i", ",", "2", "]", "=", "vis_flag", "\n", "\n", "", "", "new_kps", "=", "new_kps", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "return", "new_kps", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.affine_transform.transform_image": [[112, 127], ["zip", "affine_transform.__transform_img", "numpy.stack", "bkg_img.astype.astype", "zip", "numpy.dsplit", "numpy.dsplit"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.affine_transform.__transform_img"], ["", "def", "transform_image", "(", "bkg_img", ":", "np", ".", "ndarray", ",", "inst_imgs", ":", "list", ",", "trans_params", ":", "list", ")", ":", "\n", "    ", "canvas_h", ",", "canvas_w", "=", "bkg_img", ".", "shape", "[", "0", ":", "2", "]", "\n", "for", "inst_img", ",", "trans_param", "in", "zip", "(", "inst_imgs", ",", "trans_params", ")", ":", "\n", "        ", "canvas_d", "=", "inst_img", ".", "shape", "[", "2", "]", "\n", "\n", "canvas", "=", "__transform_img", "(", "inst_img", ",", "trans_param", ",", "(", "canvas_h", ",", "canvas_w", ",", "canvas_d", ")", ")", "\n", "\n", "# alpha-composite image", "\n", "bkg_img", "=", "[", "x", "[", ":", ",", ":", ",", "0", "]", "*", "(", "1", "-", "canvas", "[", ":", ",", ":", ",", "3", "]", "/", "255", ")", "+", "y", "[", ":", ",", ":", ",", "0", "]", "*", "(", "canvas", "[", ":", ",", ":", ",", "3", "]", "/", "255", ")", "\n", "for", "x", ",", "y", "in", "zip", "(", "np", ".", "dsplit", "(", "bkg_img", ",", "3", ")", ",", "np", ".", "dsplit", "(", "canvas", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "3", ")", ")", "]", "\n", "\n", "bkg_img", "=", "np", ".", "stack", "(", "bkg_img", ",", "axis", "=", "2", ")", "\n", "bkg_img", "=", "bkg_img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "return", "bkg_img", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.affine_transform.transform_rgba_instance": [[128, 170], ["affine_transform.__transform_img", "pycococreater.binary_mask_to_polygon", "pycocotools.frPyObjects", "pycocotools.merge", "pycocotools.toBbox().tolist", "len", "pycocotools.toBbox", "ValueError"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.affine_transform.__transform_img", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pycococreater.binary_mask_to_polygon"], ["", "def", "transform_rgba_instance", "(", "rgba_ins_anns", ":", "list", ",", "trans_param", ":", "list", ",", "width", ":", "int", ",", "height", ":", "int", ")", ":", "\n", "    ", "ann", "=", "{", "}", "\n", "trans_param", "=", "trans_param", "[", "0", "]", "\n", "## directy infer mask from rgba cause too much segments", "\n", "rgba_ins_ann", "=", "rgba_ins_anns", "[", "0", "]", "\n", "# trans_param = trans_param[0]", "\n", "# inst_mask = rgba_ins[:,:,3].copy()", "\n", "# inst_mask[inst_mask>0]=1", "\n", "\n", "## use cuted mask insted", "\n", "# xmin, ymin, w, h = rgba_ins_ann['bbox']", "\n", "# xmax, ymax = xmin+w, ymin+h", "\n", "# xmin, ymin, xmax, ymax = int(xmin), int(ymin), int(xmax), int(ymax)", "\n", "# inst_mask = cocoseg_to_binary(rgba_ins_ann['segmentation'], height, width)", "\n", "# inst_mask = inst_mask[ymin:ymax, xmin:xmax]", "\n", "\n", "inst_mask", "=", "rgba_ins_ann", "\n", "\n", "if", "'flip'", "in", "trans_param", ":", "\n", "        ", "if", "trans_param", "[", "'flip'", "]", "==", "'horizontal'", ":", "\n", "            ", "inst_mask", "=", "inst_mask", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "", "elif", "trans_param", "[", "'flip'", "]", "==", "'vertical'", ":", "\n", "            ", "inst_mask", "=", "inst_mask", "[", ":", ":", "-", "1", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown flip parameter {}'", ".", "format", "(", "trans_param", "[", "'flip'", "]", ")", ")", "\n", "# nearest interpolation", "\n", "", "", "new_inst_mask", "=", "__transform_img", "(", "inst_mask", ",", "trans_param", ",", "(", "height", ",", "width", ")", ",", "order", "=", "0", ")", "\n", "new_segm", "=", "binary_mask_to_polygon", "(", "new_inst_mask", ")", "\n", "\n", "if", "len", "(", "new_segm", ")", "==", "0", ":", "# transformed mask out of image", "\n", "        ", "raise", "ValueError", "\n", "\n", "", "rle", "=", "cocomask", ".", "frPyObjects", "(", "new_segm", ",", "height", ",", "width", ")", "\n", "rle", "=", "cocomask", ".", "merge", "(", "rle", ")", "\n", "bbox", "=", "cocomask", ".", "toBbox", "(", "rle", ")", ".", "tolist", "(", ")", "\n", "\n", "\n", "ann", "[", "'segmentation'", "]", "=", "new_segm", "\n", "# ann['keypoints'] = new_keypoints", "\n", "ann", "[", "'bbox'", "]", "=", "bbox", "\n", "\n", "return", "ann", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.affine_transform.transform_annotation": [[171, 223], ["zip", "ret_anns.append", "type", "get_instance_group.cocoseg_to_binary", "affine_transform.__transform_img", "pycococreater.binary_mask_to_polygon", "pycocotools.frPyObjects", "pycocotools.merge", "pycocotools.toBbox().tolist", "len", "type", "pycocotools.frPyObjects", "pycocotools.decode", "affine_transform.__transform_img", "pycocotools.encode", "pycococreater.binary_mask_to_rle", "pycocotools.toBbox().tolist", "ValueError", "pycocotools.toBbox", "ValueError", "pycocotools.toBbox"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.help_functions.cocoseg_to_binary", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.affine_transform.__transform_img", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pycococreater.binary_mask_to_polygon", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.affine_transform.__transform_img", "home.repos.pwc.inspect_result.twangnh_SimCal.instaboost.pycococreater.binary_mask_to_rle"], ["", "def", "transform_annotation", "(", "anns", ":", "list", ",", "trans_params", ":", "list", ",", "group_bnds", ":", "list", ",", "group_indices", ":", "list", ",", "width", ":", "int", ",", "height", ":", "int", ")", ":", "\n", "    ", "ret_anns", "=", "[", "]", "\n", "for", "indices", ",", "trans_param", ",", "group_bnd", "in", "zip", "(", "group_indices", ",", "trans_params", ",", "group_bnds", ")", ":", "\n", "        ", "for", "idx", "in", "indices", ":", "\n", "            ", "ann", "=", "anns", "[", "idx", "]", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "group_bnd", "\n", "segm", "=", "ann", "[", "'segmentation'", "]", "\n", "# keypoints = ann['keypoints']", "\n", "# new_keypoints = __transform_kp(", "\n", "#     keypoints, trans_param, group_bnd, (height, width))", "\n", "if", "type", "(", "segm", ")", "==", "list", ":", "\n", "# polygon", "\n", "                ", "inst_mask", "=", "cocoseg_to_binary", "(", "segm", ",", "height", ",", "width", ")", "\n", "inst_mask", "=", "inst_mask", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "\n", "if", "'flip'", "in", "trans_param", ":", "\n", "                    ", "if", "trans_param", "[", "'flip'", "]", "==", "'horizontal'", ":", "\n", "                        ", "inst_mask", "=", "inst_mask", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "", "elif", "trans_param", "[", "'flip'", "]", "==", "'vertical'", ":", "\n", "                        ", "inst_mask", "=", "inst_mask", "[", ":", ":", "-", "1", ",", ":", "]", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "'Unknown flip parameter {}'", ".", "format", "(", "trans_param", "[", "'flip'", "]", ")", ")", "\n", "# nearest interpolation", "\n", "", "", "new_inst_mask", "=", "__transform_img", "(", "inst_mask", ",", "trans_param", ",", "(", "height", ",", "width", ")", ",", "order", "=", "0", ")", "\n", "new_segm", "=", "binary_mask_to_polygon", "(", "new_inst_mask", ")", "\n", "\n", "if", "len", "(", "new_segm", ")", "==", "0", ":", "# transformed mask out of image", "\n", "                    ", "continue", "\n", "\n", "", "rle", "=", "cocomask", ".", "frPyObjects", "(", "new_segm", ",", "height", ",", "width", ")", "\n", "rle", "=", "cocomask", ".", "merge", "(", "rle", ")", "\n", "bbox", "=", "cocomask", ".", "toBbox", "(", "rle", ")", ".", "tolist", "(", ")", "\n", "", "elif", "type", "(", "segm", "[", "'counts'", "]", ")", "==", "list", ":", "\n", "# uncompressed RLE", "\n", "                ", "rle", "=", "cocomask", ".", "frPyObjects", "(", "segm", ",", "height", ",", "width", ")", "\n", "inst_mask", "=", "cocomask", ".", "decode", "(", "rle", ")", "\n", "inst_mask", "=", "inst_mask", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "\n", "# nearest interpolation", "\n", "new_inst_mask", "=", "__transform_img", "(", "inst_mask", ",", "trans_param", ",", "(", "height", ",", "width", ")", ",", "order", "=", "0", ")", "\n", "\n", "rle", "=", "cocomask", ".", "encode", "(", "new_inst_mask", ")", "\n", "new_segm", "=", "binary_mask_to_rle", "(", "new_inst_mask", ")", "\n", "bbox", "=", "cocomask", ".", "toBbox", "(", "rle", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "# coco-style RLE -- error", "\n", "                ", "raise", "ValueError", "(", "'You should not input json containing RLE annotations!'", ")", "\n", "\n", "", "ann", "[", "'segmentation'", "]", "=", "new_segm", "\n", "# ann['keypoints'] = new_keypoints", "\n", "ann", "[", "'bbox'", "]", "=", "bbox", "\n", "ret_anns", ".", "append", "(", "ann", ")", "\n", "\n", "", "", "return", "ret_anns", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.demo.get_class_images_lvis.LvisGtAnnVis.__init__": [[10, 43], ["lvis.lvis.LVIS", "get_class_images_lvis.LvisGtAnnVis.lvis.get_cat_ids", "get_class_images_lvis.LvisGtAnnVis.lvis.get_img_ids", "get_class_images_lvis.LvisGtAnnVis._filter_imgs", "img_infos.append", "get_class_images_lvis.LvisGtAnnVis.lvis.load_imgs"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_cat_ids", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_img_ids", "home.repos.pwc.inspect_result.twangnh_SimCal.demo.get_class_images_lvis.LvisGtAnnVis._filter_imgs", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.load_imgs"], ["    ", "def", "__init__", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "self", ".", "lvis", "=", "LVIS", "(", "ann_file", ")", "\n", "CLASSES", "=", "(", "'person'", ",", "'bicycle'", ",", "'car'", ",", "'motorcycle'", ",", "'airplane'", ",", "'bus'", ",", "\n", "'train'", ",", "'truck'", ",", "'boat'", ",", "'traffic_light'", ",", "'fire_hydrant'", ",", "\n", "'stop_sign'", ",", "'parking_meter'", ",", "'bench'", ",", "'bird'", ",", "'cat'", ",", "'dog'", ",", "\n", "'horse'", ",", "'sheep'", ",", "'cow'", ",", "'elephant'", ",", "'bear'", ",", "'zebra'", ",", "'giraffe'", ",", "\n", "'backpack'", ",", "'umbrella'", ",", "'handbag'", ",", "'tie'", ",", "'suitcase'", ",", "'frisbee'", ",", "\n", "'skis'", ",", "'snowboard'", ",", "'sports_ball'", ",", "'kite'", ",", "'baseball_bat'", ",", "\n", "'baseball_glove'", ",", "'skateboard'", ",", "'surfboard'", ",", "'tennis_racket'", ",", "\n", "'bottle'", ",", "'wine_glass'", ",", "'cup'", ",", "'fork'", ",", "'knife'", ",", "'spoon'", ",", "'bowl'", ",", "\n", "'banana'", ",", "'apple'", ",", "'sandwich'", ",", "'orange'", ",", "'broccoli'", ",", "'carrot'", ",", "\n", "'hot_dog'", ",", "'pizza'", ",", "'donut'", ",", "'cake'", ",", "'chair'", ",", "'couch'", ",", "\n", "'potted_plant'", ",", "'bed'", ",", "'dining_table'", ",", "'toilet'", ",", "'tv'", ",", "'laptop'", ",", "\n", "'mouse'", ",", "'remote'", ",", "'keyboard'", ",", "'cell_phone'", ",", "'microwave'", ",", "\n", "'oven'", ",", "'toaster'", ",", "'sink'", ",", "'refrigerator'", ",", "'book'", ",", "'clock'", ",", "\n", "'vase'", ",", "'scissors'", ",", "'teddy_bear'", ",", "'hair_drier'", ",", "'toothbrush'", ")", "##use CLASSES[self.cat2label[35]] to find the class name", "\n", "self", ".", "cat_ids", "=", "self", ".", "lvis", ".", "get_cat_ids", "(", ")", "\n", "# self.cat2label = {", "\n", "#     cat_id: i + 1", "\n", "#     for i, cat_id in enumerate(self.cat_ids)", "\n", "# }", "\n", "self", ".", "img_ids", "=", "self", ".", "lvis", ".", "get_img_ids", "(", ")", "\n", "img_infos", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "img_ids", ":", "\n", "            ", "info", "=", "self", ".", "lvis", ".", "load_imgs", "(", "[", "i", "]", ")", "[", "0", "]", "\n", "info", "[", "'filename'", "]", "=", "info", "[", "'file_name'", "]", "\n", "img_infos", ".", "append", "(", "info", ")", "\n", "", "self", ".", "img_infos", "=", "img_infos", "\n", "# self.img_prefix = './data/lvis/val2017'", "\n", "self", ".", "img_prefix", "=", "'./data/lvis/train2017'", "\n", "\n", "valid_inds", "=", "self", ".", "_filter_imgs", "(", ")", "\n", "self", ".", "img_infos", "=", "[", "self", ".", "img_infos", "[", "i", "]", "for", "i", "in", "valid_inds", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.demo.get_class_images_lvis.LvisGtAnnVis._filter_imgs": [[44, 54], ["set", "enumerate", "min", "valid_inds.append", "get_class_images_lvis.LvisGtAnnVis.lvis.anns.values"], "methods", ["None"], ["", "def", "_filter_imgs", "(", "self", ",", "min_size", "=", "32", ")", ":", "\n", "        ", "\"\"\"Filter images too small or without ground truths.\"\"\"", "\n", "valid_inds", "=", "[", "]", "\n", "ids_with_ann", "=", "set", "(", "_", "[", "'image_id'", "]", "for", "_", "in", "self", ".", "lvis", ".", "anns", ".", "values", "(", ")", ")", "\n", "for", "i", ",", "img_info", "in", "enumerate", "(", "self", ".", "img_infos", ")", ":", "\n", "            ", "if", "self", ".", "img_ids", "[", "i", "]", "not", "in", "ids_with_ann", ":", "\n", "                ", "continue", "\n", "", "if", "min", "(", "img_info", "[", "'width'", "]", ",", "img_info", "[", "'height'", "]", ")", ">=", "min_size", ":", "\n", "                ", "valid_inds", ".", "append", "(", "i", ")", "\n", "", "", "return", "valid_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.demo.get_class_images_lvis.LvisGtAnnVis.show": [[55, 72], ["get_class_images_lvis.LvisGtAnnVis.lvis.get_ann_ids", "get_class_images_lvis.LvisGtAnnVis.lvis.load_anns", "[].startswith", "cv2.cvtColor", "matplotlib.pyplot.imshow", "matplotlib.pyplot.axis", "get_class_images_lvis.LvisGtAnnVis.lvis.showanns", "matplotlib.pyplot.show", "cv2.imread", "cv2.imread", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_ann_ids", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.load_anns", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.showanns", "home.repos.pwc.inspect_result.twangnh_SimCal.demo.lvis_show_ann.LvisGtAnnVis.show"], ["", "def", "show", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "img_infos", "[", "idx", "]", "[", "'id'", "]", "\n", "ann_ids", "=", "self", ".", "lvis", ".", "get_ann_ids", "(", "img_ids", "=", "[", "img_id", "]", ")", "\n", "ann_info", "=", "self", ".", "lvis", ".", "load_anns", "(", "ann_ids", ")", "\n", "# for ann in ann_info:", "\n", "#     if ann['iscrowd'] == 1:", "\n", "#         is_crowd_id_val.append(idx)", "\n", "if", "self", ".", "img_infos", "[", "idx", "]", "[", "'filename'", "]", ".", "startswith", "(", "'COCO'", ")", ":", "##for val set", "\n", "            ", "imdata", "=", "cv2", ".", "imread", "(", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "self", ".", "img_infos", "[", "idx", "]", "[", "'filename'", "]", "[", "13", ":", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "imdata", "=", "cv2", ".", "imread", "(", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "self", ".", "img_infos", "[", "idx", "]", "[", "'filename'", "]", ")", ")", "\n", "", "imdata", "=", "cv2", ".", "cvtColor", "(", "imdata", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "plt", ".", "imshow", "(", "imdata", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "self", ".", "lvis", ".", "showanns", "(", "ann_info", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.demo.webcam_demo.parse_args": [[9, 20], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MMDetection webcam demo'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'CUDA device id'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--camera-id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'camera device id'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--score-thr'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'bbox score threshold'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.demo.webcam_demo.main": [[22, 41], ["webcam_demo.parse_args", "mmdet.apis.init_detector", "cv2.VideoCapture", "print", "cv2.VideoCapture.read", "mmdet.apis.inference_detector", "cv2.waitKey", "mmdet.apis.show_result", "torch.device", "ord", "ord"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.inference.init_detector", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.inference.inference_detector", "home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.show_result"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "model", "=", "init_detector", "(", "\n", "args", ".", "config", ",", "args", ".", "checkpoint", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ",", "args", ".", "device", ")", ")", "\n", "\n", "camera", "=", "cv2", ".", "VideoCapture", "(", "args", ".", "camera_id", ")", "\n", "\n", "print", "(", "'Press \"Esc\", \"q\" or \"Q\" to exit.'", ")", "\n", "while", "True", ":", "\n", "        ", "ret_val", ",", "img", "=", "camera", ".", "read", "(", ")", "\n", "result", "=", "inference_detector", "(", "model", ",", "img", ")", "\n", "\n", "ch", "=", "cv2", ".", "waitKey", "(", "1", ")", "\n", "if", "ch", "==", "27", "or", "ch", "==", "ord", "(", "'q'", ")", "or", "ch", "==", "ord", "(", "'Q'", ")", ":", "\n", "            ", "break", "\n", "\n", "", "show_result", "(", "\n", "img", ",", "result", ",", "model", ".", "CLASSES", ",", "score_thr", "=", "args", ".", "score_thr", ",", "wait_time", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.demo.coco_show_ann.CocoGtAnnVis.__init__": [[10, 39], ["pycocotools.coco.COCO", "coco_show_ann.CocoGtAnnVis.coco.getCatIds", "coco_show_ann.CocoGtAnnVis.coco.getImgIds", "img_infos.append", "enumerate", "coco_show_ann.CocoGtAnnVis.coco.loadImgs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "self", ".", "coco", "=", "COCO", "(", "ann_file", ")", "\n", "CLASSES", "=", "(", "'person'", ",", "'bicycle'", ",", "'car'", ",", "'motorcycle'", ",", "'airplane'", ",", "'bus'", ",", "\n", "'train'", ",", "'truck'", ",", "'boat'", ",", "'traffic_light'", ",", "'fire_hydrant'", ",", "\n", "'stop_sign'", ",", "'parking_meter'", ",", "'bench'", ",", "'bird'", ",", "'cat'", ",", "'dog'", ",", "\n", "'horse'", ",", "'sheep'", ",", "'cow'", ",", "'elephant'", ",", "'bear'", ",", "'zebra'", ",", "'giraffe'", ",", "\n", "'backpack'", ",", "'umbrella'", ",", "'handbag'", ",", "'tie'", ",", "'suitcase'", ",", "'frisbee'", ",", "\n", "'skis'", ",", "'snowboard'", ",", "'sports_ball'", ",", "'kite'", ",", "'baseball_bat'", ",", "\n", "'baseball_glove'", ",", "'skateboard'", ",", "'surfboard'", ",", "'tennis_racket'", ",", "\n", "'bottle'", ",", "'wine_glass'", ",", "'cup'", ",", "'fork'", ",", "'knife'", ",", "'spoon'", ",", "'bowl'", ",", "\n", "'banana'", ",", "'apple'", ",", "'sandwich'", ",", "'orange'", ",", "'broccoli'", ",", "'carrot'", ",", "\n", "'hot_dog'", ",", "'pizza'", ",", "'donut'", ",", "'cake'", ",", "'chair'", ",", "'couch'", ",", "\n", "'potted_plant'", ",", "'bed'", ",", "'dining_table'", ",", "'toilet'", ",", "'tv'", ",", "'laptop'", ",", "\n", "'mouse'", ",", "'remote'", ",", "'keyboard'", ",", "'cell_phone'", ",", "'microwave'", ",", "\n", "'oven'", ",", "'toaster'", ",", "'sink'", ",", "'refrigerator'", ",", "'book'", ",", "'clock'", ",", "\n", "'vase'", ",", "'scissors'", ",", "'teddy_bear'", ",", "'hair_drier'", ",", "'toothbrush'", ")", "##use CLASSES[self.cat2label[35]] to find the class name", "\n", "self", ".", "cat_ids", "=", "self", ".", "coco", ".", "getCatIds", "(", ")", "\n", "self", ".", "cat2label", "=", "{", "\n", "cat_id", ":", "i", "+", "1", "\n", "for", "i", ",", "cat_id", "in", "enumerate", "(", "self", ".", "cat_ids", ")", "\n", "}", "\n", "self", ".", "img_ids", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "img_infos", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "img_ids", ":", "\n", "            ", "info", "=", "self", ".", "coco", ".", "loadImgs", "(", "[", "i", "]", ")", "[", "0", "]", "\n", "info", "[", "'filename'", "]", "=", "info", "[", "'file_name'", "]", "\n", "img_infos", ".", "append", "(", "info", ")", "\n", "", "self", ".", "img_infos", "=", "img_infos", "\n", "self", ".", "img_prefix", "=", "'./data/coco/train2017'", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.demo.coco_show_ann.CocoGtAnnVis.show": [[40, 54], ["coco_show_ann.CocoGtAnnVis.coco.getAnnIds", "coco_show_ann.CocoGtAnnVis.coco.loadAnns", "cv2.imread", "cv2.cvtColor", "matplotlib.pyplot.imshow", "matplotlib.pyplot.axis", "coco_show_ann.CocoGtAnnVis.coco.showAnns", "matplotlib.pyplot.show", "os.join"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.demo.lvis_show_ann.LvisGtAnnVis.show"], ["", "def", "show", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "img_infos", "[", "idx", "]", "[", "'id'", "]", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "ann_info", "=", "self", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "# for ann in ann_info:", "\n", "#     if ann['iscrowd'] == 1:", "\n", "#         is_crowd_id_val.append(idx)", "\n", "imdata", "=", "cv2", ".", "imread", "(", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "self", ".", "img_infos", "[", "idx", "]", "[", "'filename'", "]", ")", ")", "\n", "imdata", "=", "cv2", ".", "cvtColor", "(", "imdata", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "plt", ".", "imshow", "(", "imdata", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "self", ".", "coco", ".", "showAnns", "(", "ann_info", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.demo.lvis_show_ann.LvisGtAnnVis.__init__": [[10, 42], ["lvis.lvis.LVIS", "lvis_show_ann.LvisGtAnnVis.lvis.get_cat_ids", "lvis_show_ann.LvisGtAnnVis.lvis.get_img_ids", "lvis_show_ann.LvisGtAnnVis.filter_to_keep_finetune_classes", "img_infos.append", "lvis_show_ann.LvisGtAnnVis.lvis.load_imgs"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_cat_ids", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_img_ids", "home.repos.pwc.inspect_result.twangnh_SimCal.demo.lvis_show_ann.LvisGtAnnVis.filter_to_keep_finetune_classes", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.load_imgs"], ["    ", "def", "__init__", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "self", ".", "lvis", "=", "LVIS", "(", "ann_file", ")", "\n", "CLASSES", "=", "(", "'person'", ",", "'bicycle'", ",", "'car'", ",", "'motorcycle'", ",", "'airplane'", ",", "'bus'", ",", "\n", "'train'", ",", "'truck'", ",", "'boat'", ",", "'traffic_light'", ",", "'fire_hydrant'", ",", "\n", "'stop_sign'", ",", "'parking_meter'", ",", "'bench'", ",", "'bird'", ",", "'cat'", ",", "'dog'", ",", "\n", "'horse'", ",", "'sheep'", ",", "'cow'", ",", "'elephant'", ",", "'bear'", ",", "'zebra'", ",", "'giraffe'", ",", "\n", "'backpack'", ",", "'umbrella'", ",", "'handbag'", ",", "'tie'", ",", "'suitcase'", ",", "'frisbee'", ",", "\n", "'skis'", ",", "'snowboard'", ",", "'sports_ball'", ",", "'kite'", ",", "'baseball_bat'", ",", "\n", "'baseball_glove'", ",", "'skateboard'", ",", "'surfboard'", ",", "'tennis_racket'", ",", "\n", "'bottle'", ",", "'wine_glass'", ",", "'cup'", ",", "'fork'", ",", "'knife'", ",", "'spoon'", ",", "'bowl'", ",", "\n", "'banana'", ",", "'apple'", ",", "'sandwich'", ",", "'orange'", ",", "'broccoli'", ",", "'carrot'", ",", "\n", "'hot_dog'", ",", "'pizza'", ",", "'donut'", ",", "'cake'", ",", "'chair'", ",", "'couch'", ",", "\n", "'potted_plant'", ",", "'bed'", ",", "'dining_table'", ",", "'toilet'", ",", "'tv'", ",", "'laptop'", ",", "\n", "'mouse'", ",", "'remote'", ",", "'keyboard'", ",", "'cell_phone'", ",", "'microwave'", ",", "\n", "'oven'", ",", "'toaster'", ",", "'sink'", ",", "'refrigerator'", ",", "'book'", ",", "'clock'", ",", "\n", "'vase'", ",", "'scissors'", ",", "'teddy_bear'", ",", "'hair_drier'", ",", "'toothbrush'", ")", "##use CLASSES[self.cat2label[35]] to find the class name", "\n", "self", ".", "cat_ids", "=", "self", ".", "lvis", ".", "get_cat_ids", "(", ")", "\n", "# self.cat2label = {", "\n", "#     cat_id: i + 1", "\n", "#     for i, cat_id in enumerate(self.cat_ids)", "\n", "# }", "\n", "self", ".", "img_ids", "=", "self", ".", "lvis", ".", "get_img_ids", "(", ")", "\n", "img_infos", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "img_ids", ":", "\n", "            ", "info", "=", "self", ".", "lvis", ".", "load_imgs", "(", "[", "i", "]", ")", "[", "0", "]", "\n", "info", "[", "'filename'", "]", "=", "info", "[", "'file_name'", "]", "\n", "img_infos", ".", "append", "(", "info", ")", "\n", "", "self", ".", "img_infos", "=", "img_infos", "\n", "# self.img_prefix = './data/lvis/val2017'", "\n", "self", ".", "img_prefix", "=", "'./data/lvis/train2017'", "\n", "\n", "self", ".", "filter_to_keep_finetune_classes", "(", ")", "\n", "###filter to keep only the finetune classes with zero_ap but not with fewshot training instances", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.demo.lvis_show_ann.LvisGtAnnVis.filter_to_keep_finetune_classes": [[43, 54], ["lvis_show_ann.LvisGtAnnVis.lvis._filter_anns_finetune_classes", "range", "len", "lvis_show_ann.LvisGtAnnVis.lvis.get_ann_ids", "lvis_show_ann.LvisGtAnnVis.lvis.anns.keys", "keep_img_info_ids.append"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_ann_ids"], ["", "def", "filter_to_keep_finetune_classes", "(", "self", ")", ":", "\n", "        ", "self", ".", "lvis", ".", "_filter_anns_finetune_classes", "(", ")", "## first filter anns", "\n", "keep_img_info_ids", "=", "[", "]", "## then filter imgs", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "img_infos", ")", ")", ":", "\n", "            ", "img_id", "=", "self", ".", "img_infos", "[", "idx", "]", "[", "'id'", "]", "\n", "ann_ids", "=", "self", ".", "lvis", ".", "get_ann_ids", "(", "img_ids", "=", "[", "img_id", "]", ")", "\n", "for", "ann_id", "in", "ann_ids", ":", "\n", "                ", "if", "ann_id", "in", "self", ".", "lvis", ".", "anns", ".", "keys", "(", ")", ":", "\n", "                    ", "if", "idx", "not", "in", "keep_img_info_ids", ":", "\n", "                        ", "keep_img_info_ids", ".", "append", "(", "idx", ")", "\n", "", "", "", "", "self", ".", "img_infos", "=", "[", "self", ".", "img_infos", "[", "i", "]", "for", "i", "in", "keep_img_info_ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.demo.lvis_show_ann.LvisGtAnnVis.show": [[55, 72], ["lvis_show_ann.LvisGtAnnVis.lvis.get_ann_ids", "lvis_show_ann.LvisGtAnnVis.lvis.load_anns", "[].startswith", "cv2.cvtColor", "matplotlib.pyplot.imshow", "matplotlib.pyplot.axis", "lvis_show_ann.LvisGtAnnVis.lvis.showanns", "matplotlib.pyplot.show", "cv2.imread", "cv2.imread", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_ann_ids", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.load_anns", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.showanns", "home.repos.pwc.inspect_result.twangnh_SimCal.demo.lvis_show_ann.LvisGtAnnVis.show"], ["", "def", "show", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "img_infos", "[", "idx", "]", "[", "'id'", "]", "\n", "ann_ids", "=", "self", ".", "lvis", ".", "get_ann_ids", "(", "img_ids", "=", "[", "img_id", "]", ")", "\n", "ann_info", "=", "self", ".", "lvis", ".", "load_anns", "(", "ann_ids", ")", "\n", "# for ann in ann_info:", "\n", "#     if ann['iscrowd'] == 1:", "\n", "#         is_crowd_id_val.append(idx)", "\n", "if", "self", ".", "img_infos", "[", "idx", "]", "[", "'filename'", "]", ".", "startswith", "(", "'COCO'", ")", ":", "##for val set", "\n", "            ", "imdata", "=", "cv2", ".", "imread", "(", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "self", ".", "img_infos", "[", "idx", "]", "[", "'filename'", "]", "[", "13", ":", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "imdata", "=", "cv2", ".", "imread", "(", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "self", ".", "img_infos", "[", "idx", "]", "[", "'filename'", "]", ")", ")", "\n", "", "imdata", "=", "cv2", ".", "cvtColor", "(", "imdata", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "plt", ".", "imshow", "(", "imdata", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "self", ".", "lvis", ".", "showanns", "(", "ann_info", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.coco_eval.main": [[6, 25], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "mmdet.core.coco_eval"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.coco_utils.coco_eval"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "'COCO Evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "'result'", ",", "help", "=", "'result file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--ann'", ",", "help", "=", "'annotation file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--types'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'proposal_fast'", ",", "'proposal'", ",", "'bbox'", ",", "'segm'", ",", "'keypoint'", "]", ",", "\n", "default", "=", "[", "'bbox'", "]", ",", "\n", "help", "=", "'result types'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--max-dets'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "100", ",", "300", ",", "1000", "]", ",", "\n", "help", "=", "'proposal numbers, only used for recall evaluation'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "coco_eval", "(", "args", ".", "result", ",", "args", ".", "types", ",", "args", ".", "ann", ",", "args", ".", "max_dets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.draw_pr_recall_bar_lviscoco.autolabel": [[29, 38], ["rect.get_height", "ax.annotate", "rect.get_x", "rect.get_width"], "function", ["None"], ["def", "autolabel", "(", "rects", ")", ":", "\n", "    ", "\"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"", "\n", "for", "rect", "in", "rects", ":", "\n", "        ", "height", "=", "rect", ".", "get_height", "(", ")", "\n", "ax", ".", "annotate", "(", "'{}'", ".", "format", "(", "height", ")", ",", "\n", "xy", "=", "(", "rect", ".", "get_x", "(", ")", "+", "rect", ".", "get_width", "(", ")", "/", "2", ",", "height", ")", ",", "\n", "xytext", "=", "(", "0", ",", "3", ")", ",", "# 3 points vertical offset", "\n", "textcoords", "=", "\"offset points\"", ",", "\n", "ha", "=", "'center'", ",", "va", "=", "'bottom'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_combine_results.single_gpu_test": [[21, 38], ["model.eval", "mmcv.ProgressBar", "enumerate", "len", "results.append", "[].size", "range", "torch.no_grad", "torch.no_grad", "model", "model.module.show_result", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.show_result"], ["def", "single_gpu_test", "(", "model", ",", "data_loader", ",", "show", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "not", "show", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "show", ":", "\n", "            ", "model", ".", "module", ".", "show_result", "(", "data", ",", "result", ",", "dataset", ".", "img_norm_cfg", ")", "\n", "\n", "", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_combine_results.multi_gpu_test": [[40, 61], ["model.eval", "mmcv.runner.get_dist_info", "enumerate", "test_lvis_combine_results.collect_results", "mmcv.ProgressBar", "collect_results.append", "len", "len", "torch.no_grad", "torch.no_grad", "model", "[].size", "range", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.collect_results"], ["", "def", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", "*", "world_size", ")", ":", "\n", "                ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "# collect results from all ranks", "\n", "", "", "", "results", "=", "collect_results", "(", "results", ",", "len", "(", "dataset", ")", ",", "tmpdir", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_combine_results.collect_results": [[63, 103], ["mmcv.runner.get_dist_info", "mmcv.dump", "torch.barrier", "torch.full", "torch.full", "torch.broadcast", "torch.full.cpu().numpy().tobytes().decode().rstrip", "mmcv.mkdir_or_exist", "os.join", "range", "zip", "shutil.rmtree", "tempfile.mkdtemp", "torch.tensor", "torch.tensor", "os.join", "part_list.append", "ordered_results.extend", "bytearray", "torch.full.cpu().numpy().tobytes().decode", "mmcv.load", "list", "torch.tensor.encode", "len", "torch.full.cpu().numpy().tobytes", "torch.full.cpu().numpy", "torch.full.cpu"], "function", ["None"], ["", "def", "collect_results", "(", "result_part", ",", "size", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# create a tmp dir if it is not specified", "\n", "if", "tmpdir", "is", "None", ":", "\n", "        ", "MAX_LEN", "=", "512", "\n", "# 32 is whitespace", "\n", "dir_tensor", "=", "torch", ".", "full", "(", "(", "MAX_LEN", ",", ")", ",", "\n", "32", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "'cuda'", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "tmpdir", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "tmpdir", ".", "encode", "(", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "dir_tensor", "[", ":", "len", "(", "tmpdir", ")", "]", "=", "tmpdir", "\n", "", "dist", ".", "broadcast", "(", "dir_tensor", ",", "0", ")", "\n", "tmpdir", "=", "dir_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "", "else", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "tmpdir", ")", "\n", "# dump the part result to the dir", "\n", "", "mmcv", ".", "dump", "(", "result_part", ",", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "rank", ")", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "# collect all parts", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "# load results of all parts from tmp dir", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "            ", "part_file", "=", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "part_list", ".", "append", "(", "mmcv", ".", "load", "(", "part_file", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "# remove tmp dir", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "return", "ordered_results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_combine_results.parse_args": [[105, 133], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MMDet test detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--json_out'", ",", "\n", "help", "=", "'output result file name without extension'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'proposal'", ",", "'proposal_fast'", ",", "'proposal_fast_percat'", ",", "'bbox'", ",", "'segm'", ",", "'keypoints'", "]", ",", "\n", "help", "=", "'eval types'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "'--existing_json'", ",", "type", "=", "str", ",", "help", "=", "'existing_json'", ")", "\n", "parser", ".", "add_argument", "(", "'--tmpdir'", ",", "help", "=", "'tmp dir for writing some results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_combine_results.main": [[135, 310], ["test_lvis_combine_results.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "mmdet.models.build_detector", "mmcv.Config.fromfile.get", "os.path.isdir", "os.path.isdir", "ValueError", "parse_args.json_out.endswith", "mmdet.apis.init_dist", "mmdet.core.wrap_fp16_model", "exit", "glob.glob", "glob.glob.sort", "print", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "parse_args.out.endswith", "mmcv.load", "mmdet.core.lvis_eval", "print", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "mmcv.parallel.MMDataParallel", "test_lvis_combine_results.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "test_lvis_combine_results.multi_gpu_test", "print", "mmcv.dump", "mmdet.core.lvis_eval", "mmdet.core.lvis_eval", "mmcv.parallel.MMDataParallel", "test_lvis_combine_results.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "test_lvis_combine_results.multi_gpu_test", "print", "mmcv.dump", "mmcv.parallel.MMDistributedDataParallel.cuda", "print", "isinstance", "mmdet.core.results2json", "mmcv.parallel.MMDistributedDataParallel.cuda", "print", "isinstance", "mmdet.core.results2json", "mmdet.core.lvis_eval", "mmdet.core.results2json", "mmdet.core.lvis_eval", "mmdet.core.results2json", "isinstance", "mmdet.core.results2json", "mmdet.core.lvis_eval", "isinstance", "mmdet.core.results2json", "mmdet.core.lvis_eval", "print", "mmdet.core.results2json", "mmdet.core.lvis_eval", "print", "mmdet.core.results2json", "mmdet.core.lvis_eval"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.twangnh_SimCal.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_detector", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.env.init_dist", "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.hooks.wrap_fp16_model", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.lvis_eval", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.single_gpu_test", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.multi_gpu_test", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.lvis_eval", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.lvis_eval", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.single_gpu_test", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.multi_gpu_test", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.results2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.results2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.lvis_eval", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.results2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.lvis_eval", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.results2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.results2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.lvis_eval", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.results2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.lvis_eval", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.results2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.lvis_eval", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.results2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.lvis_eval"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "out", "or", "args", ".", "show", "or", "args", ".", "json_out", ",", "(", "'Please specify at least one operation (save or show the results) '", "\n", "'with the argument \"--out\" or \"--show\" or \"--json_out\"'", ")", "\n", "\n", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "if", "args", ".", "json_out", "is", "not", "None", "and", "args", ".", "json_out", ".", "endswith", "(", "'.json'", ")", ":", "\n", "        ", "args", ".", "json_out", "=", "args", ".", "json_out", "[", ":", "-", "5", "]", "\n", "\n", "", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# build the dataloader", "\n", "# TODO: support multiple images per gpu (only minor changes are needed)", "\n", "", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "## uncomment to only eval on first 100 imgs", "\n", "# dataset.img_infos = dataset.img_infos[:100]", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "imgs_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "model", "=", "build_detector", "(", "cfg", ".", "model", ",", "train_cfg", "=", "None", ",", "test_cfg", "=", "cfg", ".", "test_cfg", ")", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "wrap_fp16_model", "(", "model", ")", "\n", "# checkpoint = load_checkpoint(model, args.checkpoint, map_location='cpu')", "\n", "# # old versions did not save class info in checkpoints, this walkaround is", "\n", "# # for backward compatibility", "\n", "# if 'CLASSES' in checkpoint['meta']:", "\n", "#     model.CLASSES = checkpoint['meta']['CLASSES']", "\n", "# else:", "\n", "#     model.CLASSES = dataset.CLASSES", "\n", "\n", "", "if", "args", ".", "existing_out", ":", "\n", "        ", "result_files", "=", "{", "'bbox'", ":", "'./{}.bbox.json'", ".", "format", "(", "args", ".", "existing_json", ")", ",", "'segm'", ":", "'./{}.segm.json'", ".", "format", "(", "args", ".", "existing_json", ")", ",", "\n", "'proposal'", ":", "'./{}.proposal.json'", ".", "format", "(", "args", ".", "existing_json", ")", ",", "'full'", ":", "'./{}'", ".", "format", "(", "args", ".", "existing_json", ")", "}", "\n", "eval_types", "=", "args", ".", "eval", "\n", "if", "eval_types", "==", "[", "'proposal_fast'", "]", "or", "eval_types", "==", "[", "'proposal_fast_percat'", "]", ":", "\n", "            ", "result_files", "=", "mmcv", ".", "load", "(", "result_files", "[", "'full'", "]", ")", "\n", "result_files", "=", "[", "item", "[", "2", "]", "for", "item", "in", "result_files", "]", "\n", "if", "eval_types", "==", "[", "'proposal_fast_percat'", "]", ":", "\n", "                ", "lvis_eval", "(", "result_files", ",", "eval_types", ",", "dataset", ".", "lvis", ",", "existing_json", "=", "args", ".", "existing_json", ")", "\n", "", "else", ":", "\n", "                ", "lvis_eval", "(", "result_files", ",", "eval_types", ",", "dataset", ".", "lvis", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "lvis_eval", "(", "result_files", ",", "eval_types", ",", "dataset", ".", "lvis", ")", "\n", "", "exit", "(", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "isdir", "(", "args", ".", "checkpoint", ")", ":", "\n", "\n", "        ", "ckpts", "=", "glob", ".", "glob", "(", "\n", "'/home/wangtao/prj/mmdetection/work_dirs/mask_rcnn_r50_fpn_1x_lr0.01_class_ag_boxmask_finetune/epoch*'", ")", "\n", "ckpts", ".", "sort", "(", "key", "=", "os", ".", "path", ".", "getmtime", ")", "\n", "for", "ckpt", "in", "ckpts", ":", "\n", "            ", "print", "(", "'eval {}'", ".", "format", "(", "ckpt", ")", ")", "\n", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "ckpt", ",", "map_location", "=", "'cpu'", ")", "\n", "# old versions did not save class info in checkpoints, this walkaround is", "\n", "# for backward compatibility", "\n", "if", "'CLASSES'", "in", "checkpoint", "[", "'meta'", "]", ":", "\n", "                ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "                ", "model", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "                ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "show", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "MMDistributedDataParallel", "(", "model", ".", "cuda", "(", ")", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "tmpdir", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "args", ".", "out", "and", "rank", "==", "0", ":", "\n", "                ", "print", "(", "'\\nwriting results to {}'", ".", "format", "(", "args", ".", "out", ")", ")", "\n", "mmcv", ".", "dump", "(", "outputs", ",", "args", ".", "out", ")", "\n", "eval_types", "=", "args", ".", "eval", "\n", "if", "eval_types", ":", "\n", "                    ", "print", "(", "'Starting evaluate {}'", ".", "format", "(", "' and '", ".", "join", "(", "eval_types", ")", ")", ")", "\n", "if", "eval_types", "==", "[", "'proposal_fast'", "]", ":", "\n", "                        ", "result_file", "=", "args", ".", "out", "\n", "lvis_eval", "(", "result_file", ",", "eval_types", ",", "dataset", ".", "coco", ")", "\n", "", "else", ":", "\n", "                        ", "if", "not", "isinstance", "(", "outputs", "[", "0", "]", ",", "dict", ")", ":", "\n", "                            ", "result_files", "=", "results2json", "(", "dataset", ",", "outputs", ",", "args", ".", "out", ")", "\n", "lvis_eval", "(", "result_files", ",", "eval_types", ",", "dataset", ".", "lvis", ")", "\n", "", "else", ":", "\n", "                            ", "for", "name", "in", "outputs", "[", "0", "]", ":", "\n", "                                ", "print", "(", "'\\nEvaluating {}'", ".", "format", "(", "name", ")", ")", "\n", "outputs_", "=", "[", "out", "[", "name", "]", "for", "out", "in", "outputs", "]", "\n", "result_file", "=", "args", ".", "out", "+", "'.{}'", ".", "format", "(", "name", ")", "\n", "result_files", "=", "results2json", "(", "dataset", ",", "outputs_", ",", "\n", "result_file", ")", "\n", "lvis_eval", "(", "result_files", ",", "eval_types", ",", "dataset", ".", "coco", ")", "\n", "\n", "# Save predictions in the COCO json format", "\n", "", "", "", "", "", "if", "args", ".", "json_out", "and", "rank", "==", "0", ":", "\n", "                ", "if", "not", "isinstance", "(", "outputs", "[", "0", "]", ",", "dict", ")", ":", "\n", "                    ", "results2json", "(", "dataset", ",", "outputs", ",", "args", ".", "json_out", ")", "\n", "", "else", ":", "\n", "                    ", "for", "name", "in", "outputs", "[", "0", "]", ":", "\n", "                        ", "outputs_", "=", "[", "out", "[", "name", "]", "for", "out", "in", "outputs", "]", "\n", "result_file", "=", "args", ".", "json_out", "+", "'.{}'", ".", "format", "(", "name", ")", "\n", "results2json", "(", "dataset", ",", "outputs_", ",", "result_file", ")", "\n", "\n", "", "", "", "", "", "else", ":", "\n", "        ", "print", "(", "'eval {}'", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "# old versions did not save class info in checkpoints, this walkaround is", "\n", "# for backward compatibility", "\n", "if", "'CLASSES'", "in", "checkpoint", "[", "'meta'", "]", ":", "\n", "            ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "            ", "model", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "            ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "show", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "MMDistributedDataParallel", "(", "model", ".", "cuda", "(", ")", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "tmpdir", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "args", ".", "out", "and", "rank", "==", "0", ":", "\n", "            ", "print", "(", "'\\nwriting results to {}'", ".", "format", "(", "args", ".", "out", ")", ")", "\n", "mmcv", ".", "dump", "(", "outputs", ",", "args", ".", "out", ")", "\n", "## combine results:", "\n", "# load_outputs = mmcv.load('lvis_maskrcnn_r50fpn_clsag_boxmask.pkl')", "\n", "\n", "eval_types", "=", "args", ".", "eval", "\n", "if", "eval_types", ":", "\n", "                ", "print", "(", "'Starting evaluate {}'", ".", "format", "(", "' and '", ".", "join", "(", "eval_types", ")", ")", ")", "\n", "if", "eval_types", "==", "[", "'proposal_fast'", "]", ":", "\n", "                    ", "result_file", "=", "args", ".", "out", "\n", "lvis_eval", "(", "result_file", ",", "eval_types", ",", "dataset", ".", "coco", ")", "\n", "", "else", ":", "\n", "                    ", "if", "not", "isinstance", "(", "outputs", "[", "0", "]", ",", "dict", ")", ":", "\n", "                        ", "result_files", "=", "results2json", "(", "dataset", ",", "outputs", ",", "args", ".", "out", ")", "\n", "lvis_eval", "(", "result_files", ",", "eval_types", ",", "dataset", ".", "lvis", ")", "\n", "", "else", ":", "\n", "                        ", "for", "name", "in", "outputs", "[", "0", "]", ":", "\n", "                            ", "print", "(", "'\\nEvaluating {}'", ".", "format", "(", "name", ")", ")", "\n", "outputs_", "=", "[", "out", "[", "name", "]", "for", "out", "in", "outputs", "]", "\n", "result_file", "=", "args", ".", "out", "+", "'.{}'", ".", "format", "(", "name", ")", "\n", "result_files", "=", "results2json", "(", "dataset", ",", "outputs_", ",", "\n", "result_file", ")", "\n", "lvis_eval", "(", "result_files", ",", "eval_types", ",", "dataset", ".", "coco", ")", "\n", "\n", "# Save predictions in the COCO json format", "\n", "", "", "", "", "", "if", "args", ".", "json_out", "and", "rank", "==", "0", ":", "\n", "            ", "if", "not", "isinstance", "(", "outputs", "[", "0", "]", ",", "dict", ")", ":", "\n", "                ", "results2json", "(", "dataset", ",", "outputs", ",", "args", ".", "json_out", ")", "\n", "", "else", ":", "\n", "                ", "for", "name", "in", "outputs", "[", "0", "]", ":", "\n", "                    ", "outputs_", "=", "[", "out", "[", "name", "]", "for", "out", "in", "outputs", "]", "\n", "result_file", "=", "args", ".", "json_out", "+", "'.{}'", ".", "format", "(", "name", ")", "\n", "results2json", "(", "dataset", ",", "outputs_", ",", "result_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.voc_eval.voc_eval": [[10, 44], ["mmcv.load", "range", "mmdet.core.eval_map", "len", "dataset.get_ann_info", "gt_bboxes.append", "gt_labels.append", "hasattr", "numpy.concatenate", "gt_ignore.append", "numpy.vstack", "numpy.concatenate", "numpy.zeros", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.mean_ap.eval_map", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.lvis.LvisDataset.get_ann_info"], ["def", "voc_eval", "(", "result_file", ",", "dataset", ",", "iou_thr", "=", "0.5", ")", ":", "\n", "    ", "det_results", "=", "mmcv", ".", "load", "(", "result_file", ")", "\n", "gt_bboxes", "=", "[", "]", "\n", "gt_labels", "=", "[", "]", "\n", "gt_ignore", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "ann", "=", "dataset", ".", "get_ann_info", "(", "i", ")", "\n", "bboxes", "=", "ann", "[", "'bboxes'", "]", "\n", "labels", "=", "ann", "[", "'labels'", "]", "\n", "if", "'bboxes_ignore'", "in", "ann", ":", "\n", "            ", "ignore", "=", "np", ".", "concatenate", "(", "[", "\n", "np", ".", "zeros", "(", "bboxes", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", ",", "\n", "np", ".", "ones", "(", "ann", "[", "'bboxes_ignore'", "]", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "]", ")", "\n", "gt_ignore", ".", "append", "(", "ignore", ")", "\n", "bboxes", "=", "np", ".", "vstack", "(", "[", "bboxes", ",", "ann", "[", "'bboxes_ignore'", "]", "]", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "[", "labels", ",", "ann", "[", "'labels_ignore'", "]", "]", ")", "\n", "", "gt_bboxes", ".", "append", "(", "bboxes", ")", "\n", "gt_labels", ".", "append", "(", "labels", ")", "\n", "", "if", "not", "gt_ignore", ":", "\n", "        ", "gt_ignore", "=", "gt_ignore", "\n", "", "if", "hasattr", "(", "dataset", ",", "'year'", ")", "and", "dataset", ".", "year", "==", "2007", ":", "\n", "        ", "dataset_name", "=", "'voc07'", "\n", "", "else", ":", "\n", "        ", "dataset_name", "=", "dataset", ".", "CLASSES", "\n", "", "eval_map", "(", "\n", "det_results", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_ignore", "=", "gt_ignore", ",", "\n", "scale_ranges", "=", "None", ",", "\n", "iou_thr", "=", "iou_thr", ",", "\n", "dataset", "=", "dataset_name", ",", "\n", "print_summary", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.voc_eval.main": [[46, 59], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "mmcv.Config.fromfile", "mmcv.runner.obj_from_dict", "voc_eval.voc_eval"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.voc_eval.voc_eval"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "'VOC Evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "'result'", ",", "help", "=", "'result file path'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--iou-thr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.5", ",", "\n", "help", "=", "'IoU threshold for evaluation'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "test_dataset", "=", "mmcv", ".", "runner", ".", "obj_from_dict", "(", "cfg", ".", "data", ".", "test", ",", "datasets", ")", "\n", "voc_eval", "(", "args", ".", "result", ",", "test_dataset", ",", "args", ".", "iou_thr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.publish_model.parse_args": [[7, 14], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Process a checkpoint to be published'", ")", "\n", "parser", ".", "add_argument", "(", "'in_file'", ",", "help", "=", "'input checkpoint filename'", ")", "\n", "parser", ".", "add_argument", "(", "'out_file'", ",", "help", "=", "'output checkpoint filename'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.publish_model.process_checkpoint": [[16, 27], ["torch.load", "torch.save", "subprocess.check_output().decode", "subprocess.Popen", "out_file.rstrip", "subprocess.check_output"], "function", ["None"], ["", "def", "process_checkpoint", "(", "in_file", ",", "out_file", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "in_file", ",", "map_location", "=", "'cpu'", ")", "\n", "# remove optimizer for smaller file size", "\n", "if", "'optimizer'", "in", "checkpoint", ":", "\n", "        ", "del", "checkpoint", "[", "'optimizer'", "]", "\n", "# if it is necessary to remove some sensitive data in checkpoint['meta'],", "\n", "# add the code here.", "\n", "", "torch", ".", "save", "(", "checkpoint", ",", "out_file", ")", "\n", "sha", "=", "subprocess", ".", "check_output", "(", "[", "'sha256sum'", ",", "out_file", "]", ")", ".", "decode", "(", ")", "\n", "final_file", "=", "out_file", ".", "rstrip", "(", "'.pth'", ")", "+", "'-{}.pth'", ".", "format", "(", "sha", "[", ":", "8", "]", ")", "\n", "subprocess", ".", "Popen", "(", "[", "'mv'", ",", "out_file", ",", "final_file", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.publish_model.main": [[29, 32], ["publish_model.parse_args", "publish_model.process_checkpoint"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.publish_model.process_checkpoint"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "process_checkpoint", "(", "args", ".", "in_file", ",", "args", ".", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.analyze_logs.cal_train_time": [[10, 32], ["enumerate", "print", "log_dict.keys", "numpy.array", "np.array.mean", "all_times.mean.argmax", "all_times.mean.argmin", "all_times.mean.std", "print", "print", "print", "print", "print", "np.array.append", "np.array.append", "numpy.mean"], "function", ["None"], ["def", "cal_train_time", "(", "log_dicts", ",", "args", ")", ":", "\n", "    ", "for", "i", ",", "log_dict", "in", "enumerate", "(", "log_dicts", ")", ":", "\n", "        ", "print", "(", "'{}Analyze train time of {}{}'", ".", "format", "(", "'-'", "*", "5", ",", "args", ".", "json_logs", "[", "i", "]", ",", "\n", "'-'", "*", "5", ")", ")", "\n", "all_times", "=", "[", "]", "\n", "for", "epoch", "in", "log_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "args", ".", "include_outliers", ":", "\n", "                ", "all_times", ".", "append", "(", "log_dict", "[", "epoch", "]", "[", "'time'", "]", ")", "\n", "", "else", ":", "\n", "                ", "all_times", ".", "append", "(", "log_dict", "[", "epoch", "]", "[", "'time'", "]", "[", "1", ":", "]", ")", "\n", "", "", "all_times", "=", "np", ".", "array", "(", "all_times", ")", "\n", "epoch_ave_time", "=", "all_times", ".", "mean", "(", "-", "1", ")", "\n", "slowest_epoch", "=", "epoch_ave_time", ".", "argmax", "(", ")", "\n", "fastest_epoch", "=", "epoch_ave_time", ".", "argmin", "(", ")", "\n", "std_over_epoch", "=", "epoch_ave_time", ".", "std", "(", ")", "\n", "print", "(", "'slowest epoch {}, average time is {:.4f}'", ".", "format", "(", "\n", "slowest_epoch", "+", "1", ",", "epoch_ave_time", "[", "slowest_epoch", "]", ")", ")", "\n", "print", "(", "'fastest epoch {}, average time is {:.4f}'", ".", "format", "(", "\n", "fastest_epoch", "+", "1", ",", "epoch_ave_time", "[", "fastest_epoch", "]", ")", ")", "\n", "print", "(", "'time std over epochs is {:.4f}'", ".", "format", "(", "std_over_epoch", ")", ")", "\n", "print", "(", "'average iter time: {:.4f} s/iter'", ".", "format", "(", "np", ".", "mean", "(", "all_times", ")", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.analyze_logs.plot_curve": [[34, 92], ["seaborn.set_style", "len", "enumerate", "matplotlib.switch_backend", "len", "list", "enumerate", "matplotlib.show", "print", "matplotlib.savefig", "matplotlib.cla", "len", "len", "log_dict.keys", "print", "matplotlib.legend", "matplotlib.title", "legend.append", "KeyError", "numpy.arange", "matplotlib.gca", "plt.gca.set_xticks", "matplotlib.xlabel", "matplotlib.plot", "numpy.concatenate", "numpy.concatenate", "matplotlib.xlabel", "matplotlib.plot", "np.concatenate.append", "np.concatenate.append", "max", "numpy.array", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.demo.lvis_show_ann.LvisGtAnnVis.show"], ["", "", "def", "plot_curve", "(", "log_dicts", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "backend", "is", "not", "None", ":", "\n", "        ", "plt", ".", "switch_backend", "(", "args", ".", "backend", ")", "\n", "", "sns", ".", "set_style", "(", "args", ".", "style", ")", "\n", "# if legend is None, use {filename}_{key} as legend", "\n", "legend", "=", "args", ".", "legend", "\n", "if", "legend", "is", "None", ":", "\n", "        ", "legend", "=", "[", "]", "\n", "for", "json_log", "in", "args", ".", "json_logs", ":", "\n", "            ", "for", "metric", "in", "args", ".", "keys", ":", "\n", "                ", "legend", ".", "append", "(", "'{}_{}'", ".", "format", "(", "json_log", ",", "metric", ")", ")", "\n", "", "", "", "assert", "len", "(", "legend", ")", "==", "(", "len", "(", "args", ".", "json_logs", ")", "*", "len", "(", "args", ".", "keys", ")", ")", "\n", "metrics", "=", "args", ".", "keys", "\n", "\n", "num_metrics", "=", "len", "(", "metrics", ")", "\n", "for", "i", ",", "log_dict", "in", "enumerate", "(", "log_dicts", ")", ":", "\n", "        ", "epochs", "=", "list", "(", "log_dict", ".", "keys", "(", ")", ")", "\n", "for", "j", ",", "metric", "in", "enumerate", "(", "metrics", ")", ":", "\n", "            ", "print", "(", "'plot curve of {}, metric is {}'", ".", "format", "(", "\n", "args", ".", "json_logs", "[", "i", "]", ",", "metric", ")", ")", "\n", "if", "metric", "not", "in", "log_dict", "[", "epochs", "[", "0", "]", "]", ":", "\n", "                ", "raise", "KeyError", "(", "'{} does not contain metric {}'", ".", "format", "(", "\n", "args", ".", "json_logs", "[", "i", "]", ",", "metric", ")", ")", "\n", "\n", "", "if", "'mAP'", "in", "metric", ":", "\n", "                ", "xs", "=", "np", ".", "arange", "(", "1", ",", "max", "(", "epochs", ")", "+", "1", ")", "\n", "ys", "=", "[", "]", "\n", "for", "epoch", "in", "epochs", ":", "\n", "                    ", "ys", "+=", "log_dict", "[", "epoch", "]", "[", "metric", "]", "\n", "", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "set_xticks", "(", "xs", ")", "\n", "plt", ".", "xlabel", "(", "'epoch'", ")", "\n", "plt", ".", "plot", "(", "xs", ",", "ys", ",", "label", "=", "legend", "[", "i", "*", "num_metrics", "+", "j", "]", ",", "marker", "=", "'o'", ")", "\n", "", "else", ":", "\n", "                ", "xs", "=", "[", "]", "\n", "ys", "=", "[", "]", "\n", "num_iters_per_epoch", "=", "log_dict", "[", "epochs", "[", "0", "]", "]", "[", "'iter'", "]", "[", "-", "1", "]", "\n", "for", "epoch", "in", "epochs", ":", "\n", "                    ", "iters", "=", "log_dict", "[", "epoch", "]", "[", "'iter'", "]", "\n", "if", "log_dict", "[", "epoch", "]", "[", "'mode'", "]", "[", "-", "1", "]", "==", "'val'", ":", "\n", "                        ", "iters", "=", "iters", "[", ":", "-", "1", "]", "\n", "", "xs", ".", "append", "(", "\n", "np", ".", "array", "(", "iters", ")", "+", "(", "epoch", "-", "1", ")", "*", "num_iters_per_epoch", ")", "\n", "ys", ".", "append", "(", "np", ".", "array", "(", "log_dict", "[", "epoch", "]", "[", "metric", "]", "[", ":", "len", "(", "iters", ")", "]", ")", ")", "\n", "", "xs", "=", "np", ".", "concatenate", "(", "xs", ")", "\n", "ys", "=", "np", ".", "concatenate", "(", "ys", ")", "\n", "plt", ".", "xlabel", "(", "'iter'", ")", "\n", "plt", ".", "plot", "(", "\n", "xs", ",", "ys", ",", "label", "=", "legend", "[", "i", "*", "num_metrics", "+", "j", "]", ",", "linewidth", "=", "0.5", ")", "\n", "", "plt", ".", "legend", "(", ")", "\n", "", "if", "args", ".", "title", "is", "not", "None", ":", "\n", "            ", "plt", ".", "title", "(", "args", ".", "title", ")", "\n", "", "", "if", "args", ".", "out", "is", "None", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'save curve to: {}'", ".", "format", "(", "args", ".", "out", ")", ")", "\n", "plt", ".", "savefig", "(", "args", ".", "out", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.analyze_logs.add_plot_parser": [[94, 120], ["subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument"], "function", ["None"], ["", "", "def", "add_plot_parser", "(", "subparsers", ")", ":", "\n", "    ", "parser_plt", "=", "subparsers", ".", "add_parser", "(", "\n", "'plot_curve'", ",", "help", "=", "'parser for plotting curves'", ")", "\n", "parser_plt", ".", "add_argument", "(", "\n", "'json_logs'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'path of train log in json format'", ")", "\n", "parser_plt", ".", "add_argument", "(", "\n", "'--keys'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "'bbox_mAP'", "]", ",", "\n", "help", "=", "'the metric that you want to plot'", ")", "\n", "parser_plt", ".", "add_argument", "(", "'--title'", ",", "type", "=", "str", ",", "help", "=", "'title of figure'", ")", "\n", "parser_plt", ".", "add_argument", "(", "\n", "'--legend'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'legend of each plot'", ")", "\n", "parser_plt", ".", "add_argument", "(", "\n", "'--backend'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'backend of plt'", ")", "\n", "parser_plt", ".", "add_argument", "(", "\n", "'--style'", ",", "type", "=", "str", ",", "default", "=", "'dark'", ",", "help", "=", "'style of plt'", ")", "\n", "parser_plt", ".", "add_argument", "(", "'--out'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.analyze_logs.add_time_parser": [[122, 135], ["subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument"], "function", ["None"], ["", "def", "add_time_parser", "(", "subparsers", ")", ":", "\n", "    ", "parser_time", "=", "subparsers", ".", "add_parser", "(", "\n", "'cal_train_time'", ",", "\n", "help", "=", "'parser for computing the average time per training iteration'", ")", "\n", "parser_time", ".", "add_argument", "(", "\n", "'json_logs'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'path of train log in json format'", ")", "\n", "parser_time", ".", "add_argument", "(", "\n", "'--include-outliers'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'include the first value of every epoch when computing '", "\n", "'the average time'", ")", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.analyze_logs.parse_args": [[138, 146], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_subparsers", "analyze_logs.add_plot_parser", "analyze_logs.add_time_parser", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.tools.analyze_logs.add_plot_parser", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.analyze_logs.add_time_parser", "home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Analyze Json Log'", ")", "\n", "# currently only support plot curve and calculate average train time", "\n", "subparsers", "=", "parser", ".", "add_subparsers", "(", "dest", "=", "'task'", ",", "help", "=", "'task parser'", ")", "\n", "add_plot_parser", "(", "subparsers", ")", "\n", "add_time_parser", "(", "subparsers", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.analyze_logs.load_json_logs": [[148, 163], ["zip", "dict", "open", "json.loads", "json.loads.pop", "json.loads.items", "l.strip", "collections.defaultdict", "[].append"], "function", ["None"], ["", "def", "load_json_logs", "(", "json_logs", ")", ":", "\n", "# load and convert json_logs to log_dict, key is epoch, value is a sub dict", "\n", "# keys of sub dict is different metrics, e.g. memory, bbox_mAP", "\n", "# value of sub dict is a list of corresponding values of all iterations", "\n", "    ", "log_dicts", "=", "[", "dict", "(", ")", "for", "_", "in", "json_logs", "]", "\n", "for", "json_log", ",", "log_dict", "in", "zip", "(", "json_logs", ",", "log_dicts", ")", ":", "\n", "        ", "with", "open", "(", "json_log", ",", "'r'", ")", "as", "log_file", ":", "\n", "            ", "for", "l", "in", "log_file", ":", "\n", "                ", "log", "=", "json", ".", "loads", "(", "l", ".", "strip", "(", ")", ")", "\n", "epoch", "=", "log", ".", "pop", "(", "'epoch'", ")", "\n", "if", "epoch", "not", "in", "log_dict", ":", "\n", "                    ", "log_dict", "[", "epoch", "]", "=", "defaultdict", "(", "list", ")", "\n", "", "for", "k", ",", "v", "in", "log", ".", "items", "(", ")", ":", "\n", "                    ", "log_dict", "[", "epoch", "]", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "", "", "", "return", "log_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.analyze_logs.main": [[165, 175], ["analyze_logs.parse_args", "analyze_logs.load_json_logs", "json_log.endswith", "eval"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.analyze_logs.load_json_logs"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "json_logs", "=", "args", ".", "json_logs", "\n", "for", "json_log", "in", "json_logs", ":", "\n", "        ", "assert", "json_log", ".", "endswith", "(", "'.json'", ")", "\n", "\n", "", "log_dicts", "=", "load_json_logs", "(", "json_logs", ")", "\n", "\n", "eval", "(", "args", ".", "task", ")", "(", "log_dicts", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.robustness_eval.print_coco_results": [[8, 33], ["numpy.zeros", "robustness_eval.print_coco_results._print"], "function", ["None"], ["def", "print_coco_results", "(", "results", ")", ":", "\n", "\n", "    ", "def", "_print", "(", "result", ",", "ap", "=", "1", ",", "iouThr", "=", "None", ",", "areaRng", "=", "'all'", ",", "maxDets", "=", "100", ")", ":", "\n", "        ", "iStr", "=", "' {:<18} {} @[ IoU={:<9} | \\\n        area={:>6s} | maxDets={:>3d} ] = {:0.3f}'", "\n", "\n", "titleStr", "=", "'Average Precision'", "if", "ap", "==", "1", "else", "'Average Recall'", "\n", "typeStr", "=", "'(AP)'", "if", "ap", "==", "1", "else", "'(AR)'", "\n", "iouStr", "=", "'{:0.2f}:{:0.2f}'", ".", "format", "(", ".5", ",", ".95", ")", "if", "iouThr", "is", "None", "else", "'{:0.2f}'", ".", "format", "(", "iouThr", ")", "\n", "print", "(", "iStr", ".", "format", "(", "titleStr", ",", "typeStr", ",", "iouStr", ",", "areaRng", ",", "maxDets", ",", "result", ")", ")", "\n", "\n", "", "stats", "=", "np", ".", "zeros", "(", "(", "12", ",", ")", ")", "\n", "stats", "[", "0", "]", "=", "_print", "(", "results", "[", "0", "]", ",", "1", ")", "\n", "stats", "[", "1", "]", "=", "_print", "(", "results", "[", "1", "]", ",", "1", ",", "iouThr", "=", ".5", ")", "\n", "stats", "[", "2", "]", "=", "_print", "(", "results", "[", "2", "]", ",", "1", ",", "iouThr", "=", ".75", ")", "\n", "stats", "[", "3", "]", "=", "_print", "(", "results", "[", "3", "]", ",", "1", ",", "areaRng", "=", "'small'", ")", "\n", "stats", "[", "4", "]", "=", "_print", "(", "results", "[", "4", "]", ",", "1", ",", "areaRng", "=", "'medium'", ")", "\n", "stats", "[", "5", "]", "=", "_print", "(", "results", "[", "5", "]", ",", "1", ",", "areaRng", "=", "'large'", ")", "\n", "stats", "[", "6", "]", "=", "_print", "(", "results", "[", "6", "]", ",", "0", ",", "maxDets", "=", "1", ")", "\n", "stats", "[", "7", "]", "=", "_print", "(", "results", "[", "7", "]", ",", "0", ",", "maxDets", "=", "10", ")", "\n", "stats", "[", "8", "]", "=", "_print", "(", "results", "[", "8", "]", ",", "0", ")", "\n", "stats", "[", "9", "]", "=", "_print", "(", "results", "[", "9", "]", ",", "0", ",", "areaRng", "=", "'small'", ")", "\n", "stats", "[", "10", "]", "=", "_print", "(", "results", "[", "10", "]", ",", "0", ",", "areaRng", "=", "'medium'", ")", "\n", "stats", "[", "11", "]", "=", "_print", "(", "results", "[", "11", "]", ",", "0", ",", "areaRng", "=", "'large'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.robustness_eval.get_coco_style_results": [[35, 113], ["mmcv.load", "len", "numpy.zeros", "enumerate", "print", "isinstance", "isinstance", "list", "numpy.mean", "numpy.mean", "mmcv.load.keys", "len", "enumerate", "os.basename", "print", "robustness_eval.print_coco_results", "print", "robustness_eval.print_coco_results", "print", "robustness_eval.print_coco_results", "print", "enumerate", "print", "enumerate", "print", "enumerate", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.tools.robustness_eval.print_coco_results", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.robustness_eval.print_coco_results", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.robustness_eval.print_coco_results"], ["", "def", "get_coco_style_results", "(", "filename", ",", "\n", "task", "=", "'bbox'", ",", "\n", "metric", "=", "None", ",", "\n", "prints", "=", "'mPC'", ",", "\n", "aggregate", "=", "'benchmark'", ")", ":", "\n", "\n", "    ", "assert", "aggregate", "in", "[", "'benchmark'", ",", "'all'", "]", "\n", "\n", "if", "prints", "==", "'all'", ":", "\n", "        ", "prints", "=", "[", "'P'", ",", "'mPC'", ",", "'rPC'", "]", "\n", "", "elif", "isinstance", "(", "prints", ",", "str", ")", ":", "\n", "        ", "prints", "=", "[", "prints", "]", "\n", "", "for", "p", "in", "prints", ":", "\n", "        ", "assert", "p", "in", "[", "'P'", ",", "'mPC'", ",", "'rPC'", "]", "\n", "\n", "", "if", "metric", "is", "None", ":", "\n", "        ", "metrics", "=", "[", "\n", "'AP'", ",", "'AP50'", ",", "'AP75'", ",", "'APs'", ",", "'APm'", ",", "'APl'", ",", "'AR1'", ",", "'AR10'", ",", "'AR100'", ",", "\n", "'ARs'", ",", "'ARm'", ",", "'ARl'", "\n", "]", "\n", "", "elif", "isinstance", "(", "metric", ",", "list", ")", ":", "\n", "        ", "metrics", "=", "metric", "\n", "", "else", ":", "\n", "        ", "metrics", "=", "[", "metric", "]", "\n", "\n", "", "for", "metric_name", "in", "metrics", ":", "\n", "        ", "assert", "metric_name", "in", "[", "\n", "'AP'", ",", "'AP50'", ",", "'AP75'", ",", "'APs'", ",", "'APm'", ",", "'APl'", ",", "'AR1'", ",", "'AR10'", ",", "'AR100'", ",", "\n", "'ARs'", ",", "'ARm'", ",", "'ARl'", "\n", "]", "\n", "\n", "", "eval_output", "=", "mmcv", ".", "load", "(", "filename", ")", "\n", "\n", "num_distortions", "=", "len", "(", "list", "(", "eval_output", ".", "keys", "(", ")", ")", ")", "\n", "results", "=", "np", ".", "zeros", "(", "(", "num_distortions", ",", "6", ",", "len", "(", "metrics", ")", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "for", "corr_i", ",", "distortion", "in", "enumerate", "(", "eval_output", ")", ":", "\n", "        ", "for", "severity", "in", "eval_output", "[", "distortion", "]", ":", "\n", "            ", "for", "metric_j", ",", "metric_name", "in", "enumerate", "(", "metrics", ")", ":", "\n", "                ", "mAP", "=", "eval_output", "[", "distortion", "]", "[", "severity", "]", "[", "task", "]", "[", "metric_name", "]", "\n", "results", "[", "corr_i", ",", "severity", ",", "metric_j", "]", "=", "mAP", "\n", "\n", "", "", "", "P", "=", "results", "[", "0", ",", "0", ",", ":", "]", "\n", "if", "aggregate", "==", "'benchmark'", ":", "\n", "        ", "mPC", "=", "np", ".", "mean", "(", "results", "[", ":", "15", ",", "1", ":", ",", ":", "]", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "mPC", "=", "np", ".", "mean", "(", "results", "[", ":", ",", "1", ":", ",", ":", "]", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "", "rPC", "=", "mPC", "/", "P", "\n", "\n", "print", "(", "'\\nmodel: {}'", ".", "format", "(", "osp", ".", "basename", "(", "filename", ")", ")", ")", "\n", "if", "metric", "is", "None", ":", "\n", "        ", "if", "'P'", "in", "prints", ":", "\n", "            ", "print", "(", "'Performance on Clean Data [P] ({})'", ".", "format", "(", "task", ")", ")", "\n", "print_coco_results", "(", "P", ")", "\n", "", "if", "'mPC'", "in", "prints", ":", "\n", "            ", "print", "(", "'Mean Performance under Corruption [mPC] ({})'", ".", "format", "(", "task", ")", ")", "\n", "print_coco_results", "(", "mPC", ")", "\n", "", "if", "'rPC'", "in", "prints", ":", "\n", "            ", "print", "(", "'Realtive Performance under Corruption [rPC] ({})'", ".", "format", "(", "\n", "task", ")", ")", "\n", "print_coco_results", "(", "rPC", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "'P'", "in", "prints", ":", "\n", "            ", "print", "(", "'Performance on Clean Data [P] ({})'", ".", "format", "(", "task", ")", ")", "\n", "for", "metric_i", ",", "metric_name", "in", "enumerate", "(", "metrics", ")", ":", "\n", "                ", "print", "(", "'{:5} =  {:0.3f}'", ".", "format", "(", "metric_name", ",", "P", "[", "metric_i", "]", ")", ")", "\n", "", "", "if", "'mPC'", "in", "prints", ":", "\n", "            ", "print", "(", "'Mean Performance under Corruption [mPC] ({})'", ".", "format", "(", "task", ")", ")", "\n", "for", "metric_i", ",", "metric_name", "in", "enumerate", "(", "metrics", ")", ":", "\n", "                ", "print", "(", "'{:5} =  {:0.3f}'", ".", "format", "(", "metric_name", ",", "mPC", "[", "metric_i", "]", ")", ")", "\n", "", "", "if", "'rPC'", "in", "prints", ":", "\n", "            ", "print", "(", "'Relative Performance under Corruption [rPC] ({})'", ".", "format", "(", "\n", "task", ")", ")", "\n", "for", "metric_i", ",", "metric_name", "in", "enumerate", "(", "metrics", ")", ":", "\n", "                ", "print", "(", "'{:5} => {:0.1f} %'", ".", "format", "(", "metric_name", ",", "\n", "rPC", "[", "metric_i", "]", "*", "100", ")", ")", "\n", "\n", "", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.robustness_eval.get_voc_style_results": [[115, 159], ["mmcv.load", "len", "numpy.zeros", "enumerate", "print", "numpy.mean", "isinstance", "list", "numpy.mean", "numpy.mean", "print", "print", "print", "mmcv.load.keys", "os.basename", "numpy.mean", "numpy.mean", "range", "numpy.mean", "len"], "function", ["None"], ["", "def", "get_voc_style_results", "(", "filename", ",", "prints", "=", "'mPC'", ",", "aggregate", "=", "'benchmark'", ")", ":", "\n", "\n", "    ", "assert", "aggregate", "in", "[", "'benchmark'", ",", "'all'", "]", "\n", "\n", "if", "prints", "==", "'all'", ":", "\n", "        ", "prints", "=", "[", "'P'", ",", "'mPC'", ",", "'rPC'", "]", "\n", "", "elif", "isinstance", "(", "prints", ",", "str", ")", ":", "\n", "        ", "prints", "=", "[", "prints", "]", "\n", "", "for", "p", "in", "prints", ":", "\n", "        ", "assert", "p", "in", "[", "'P'", ",", "'mPC'", ",", "'rPC'", "]", "\n", "\n", "", "eval_output", "=", "mmcv", ".", "load", "(", "filename", ")", "\n", "\n", "num_distortions", "=", "len", "(", "list", "(", "eval_output", ".", "keys", "(", ")", ")", ")", "\n", "results", "=", "np", ".", "zeros", "(", "(", "num_distortions", ",", "6", ",", "20", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "for", "i", ",", "distortion", "in", "enumerate", "(", "eval_output", ")", ":", "\n", "        ", "for", "severity", "in", "eval_output", "[", "distortion", "]", ":", "\n", "            ", "mAP", "=", "[", "\n", "eval_output", "[", "distortion", "]", "[", "severity", "]", "[", "j", "]", "[", "'ap'", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "eval_output", "[", "distortion", "]", "[", "severity", "]", ")", ")", "\n", "]", "\n", "results", "[", "i", ",", "severity", ",", ":", "]", "=", "mAP", "\n", "\n", "", "", "P", "=", "results", "[", "0", ",", "0", ",", ":", "]", "\n", "if", "aggregate", "==", "'benchmark'", ":", "\n", "        ", "mPC", "=", "np", ".", "mean", "(", "results", "[", ":", "15", ",", "1", ":", ",", ":", "]", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "mPC", "=", "np", ".", "mean", "(", "results", "[", ":", ",", "1", ":", ",", ":", "]", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "", "rPC", "=", "mPC", "/", "P", "\n", "\n", "print", "(", "'\\nmodel: {}'", ".", "format", "(", "osp", ".", "basename", "(", "filename", ")", ")", ")", "\n", "if", "'P'", "in", "prints", ":", "\n", "        ", "print", "(", "'{:48} = {:0.3f}'", ".", "format", "(", "'Performance on Clean Data [P] in AP50'", ",", "\n", "np", ".", "mean", "(", "P", ")", ")", ")", "\n", "", "if", "'mPC'", "in", "prints", ":", "\n", "        ", "print", "(", "'{:48} = {:0.3f}'", ".", "format", "(", "\n", "'Mean Performance under Corruption [mPC] in AP50'", ",", "np", ".", "mean", "(", "mPC", ")", ")", ")", "\n", "", "if", "'rPC'", "in", "prints", ":", "\n", "        ", "print", "(", "'{:48} = {:0.1f}'", ".", "format", "(", "\n", "'Realtive Performance under Corruption [rPC] in %'", ",", "\n", "np", ".", "mean", "(", "rPC", ")", "*", "100", ")", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "results", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.robustness_eval.get_results": [[161, 187], ["robustness_eval.get_coco_style_results", "robustness_eval.get_voc_style_results", "print", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.tools.robustness_eval.get_coco_style_results", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.robustness_eval.get_voc_style_results"], ["", "def", "get_results", "(", "filename", ",", "\n", "dataset", "=", "'coco'", ",", "\n", "task", "=", "'bbox'", ",", "\n", "metric", "=", "None", ",", "\n", "prints", "=", "'mPC'", ",", "\n", "aggregate", "=", "'benchmark'", ")", ":", "\n", "    ", "assert", "dataset", "in", "[", "'coco'", ",", "'voc'", ",", "'cityscapes'", "]", "\n", "\n", "if", "dataset", "in", "[", "'coco'", ",", "'cityscapes'", "]", ":", "\n", "        ", "results", "=", "get_coco_style_results", "(", "\n", "filename", ",", "\n", "task", "=", "task", ",", "\n", "metric", "=", "metric", ",", "\n", "prints", "=", "prints", ",", "\n", "aggregate", "=", "aggregate", ")", "\n", "", "elif", "dataset", "==", "'voc'", ":", "\n", "        ", "if", "task", "!=", "'bbox'", ":", "\n", "            ", "print", "(", "'Only bbox analysis is supported for Pascal VOC'", ")", "\n", "print", "(", "'Will report bbox results\\n'", ")", "\n", "", "if", "metric", "not", "in", "[", "None", ",", "[", "'AP'", "]", ",", "[", "'AP50'", "]", "]", ":", "\n", "            ", "print", "(", "'Only the AP50 metric is supported for Pascal VOC'", ")", "\n", "print", "(", "'Will report AP50 metric\\n'", ")", "\n", "", "results", "=", "get_voc_style_results", "(", "\n", "filename", ",", "prints", "=", "prints", ",", "aggregate", "=", "aggregate", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.robustness_eval.get_distortions_from_file": [[189, 194], ["mmcv.load", "robustness_eval.get_distortions_from_results"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.tools.robustness_eval.get_distortions_from_results"], ["", "def", "get_distortions_from_file", "(", "filename", ")", ":", "\n", "\n", "    ", "eval_output", "=", "mmcv", ".", "load", "(", "filename", ")", "\n", "\n", "return", "get_distortions_from_results", "(", "eval_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.robustness_eval.get_distortions_from_results": [[196, 201], ["enumerate", "distortions.append", "distortion.replace"], "function", ["None"], ["", "def", "get_distortions_from_results", "(", "eval_output", ")", ":", "\n", "    ", "distortions", "=", "[", "]", "\n", "for", "i", ",", "distortion", "in", "enumerate", "(", "eval_output", ")", ":", "\n", "        ", "distortions", ".", "append", "(", "distortion", ".", "replace", "(", "\"_\"", ",", "\" \"", ")", ")", "\n", "", "return", "distortions", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.robustness_eval.main": [[203, 253], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "robustness_eval.get_results"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.get_results"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "'Corruption Result Analysis'", ")", "\n", "parser", ".", "add_argument", "(", "'filename'", ",", "help", "=", "'result file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "'coco'", ",", "'voc'", ",", "'cityscapes'", "]", ",", "\n", "default", "=", "'coco'", ",", "\n", "help", "=", "'dataset type'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--task'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'bbox'", ",", "'segm'", "]", ",", "\n", "default", "=", "[", "'bbox'", "]", ",", "\n", "help", "=", "'task to report'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--metric'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "\n", "None", ",", "'AP'", ",", "'AP50'", ",", "'AP75'", ",", "'APs'", ",", "'APm'", ",", "'APl'", ",", "'AR1'", ",", "'AR10'", ",", "\n", "'AR100'", ",", "'ARs'", ",", "'ARm'", ",", "'ARl'", "\n", "]", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'metric to report'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--prints'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'P'", ",", "'mPC'", ",", "'rPC'", "]", ",", "\n", "default", "=", "'mPC'", ",", "\n", "help", "=", "'corruption benchmark metric to print'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--aggregate'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "'all'", ",", "'benchmark'", "]", ",", "\n", "default", "=", "'benchmark'", ",", "\n", "help", "=", "'aggregate all results or only those \\\n        for benchmark corruptions'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "for", "task", "in", "args", ".", "task", ":", "\n", "        ", "get_results", "(", "\n", "args", ".", "filename", ",", "\n", "dataset", "=", "args", ".", "dataset", ",", "\n", "task", "=", "task", ",", "\n", "metric", "=", "args", ".", "metric", ",", "\n", "prints", "=", "args", ".", "prints", ",", "\n", "aggregate", "=", "args", ".", "aggregate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_combine_and_eval.single_gpu_test": [[20, 38], ["model.eval", "mmcv.ProgressBar", "enumerate", "len", "results.append", "[].data.size", "range", "torch.no_grad", "torch.no_grad", "model", "model.module.show_result", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.show_result"], ["def", "single_gpu_test", "(", "model", ",", "data_loader", ",", "olongtail_model", ",", "dataset_for_support", ",", "show", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "not", "show", ",", "dataset_for_support", "=", "dataset_for_support", ",", "\n", "dataset_val", "=", "data_loader", ".", "dataset", ",", "olongtail_model", "=", "olongtail_model", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "show", ":", "\n", "            ", "model", ".", "module", ".", "show_result", "(", "data", ",", "result", ",", "dataset", ".", "img_norm_cfg", ")", "\n", "\n", "", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "data", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_combine_and_eval.multi_gpu_test": [[40, 61], ["model.eval", "mmcv.runner.get_dist_info", "enumerate", "test_lvis_combine_and_eval.collect_results", "mmcv.ProgressBar", "collect_results.append", "len", "len", "torch.no_grad", "torch.no_grad", "model", "[].size", "range", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.collect_results"], ["", "def", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", "*", "world_size", ")", ":", "\n", "                ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "# collect results from all ranks", "\n", "", "", "", "results", "=", "collect_results", "(", "results", ",", "len", "(", "dataset", ")", ",", "tmpdir", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_combine_and_eval.collect_results": [[63, 103], ["mmcv.runner.get_dist_info", "mmcv.dump", "torch.barrier", "torch.full", "torch.full", "torch.broadcast", "torch.full.cpu().numpy().tobytes().decode().rstrip", "mmcv.mkdir_or_exist", "os.join", "range", "zip", "shutil.rmtree", "tempfile.mkdtemp", "torch.tensor", "torch.tensor", "os.join", "part_list.append", "ordered_results.extend", "bytearray", "torch.full.cpu().numpy().tobytes().decode", "mmcv.load", "list", "torch.tensor.encode", "len", "torch.full.cpu().numpy().tobytes", "torch.full.cpu().numpy", "torch.full.cpu"], "function", ["None"], ["", "def", "collect_results", "(", "result_part", ",", "size", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# create a tmp dir if it is not specified", "\n", "if", "tmpdir", "is", "None", ":", "\n", "        ", "MAX_LEN", "=", "512", "\n", "# 32 is whitespace", "\n", "dir_tensor", "=", "torch", ".", "full", "(", "(", "MAX_LEN", ",", ")", ",", "\n", "32", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "'cuda'", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "tmpdir", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "tmpdir", ".", "encode", "(", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "dir_tensor", "[", ":", "len", "(", "tmpdir", ")", "]", "=", "tmpdir", "\n", "", "dist", ".", "broadcast", "(", "dir_tensor", ",", "0", ")", "\n", "tmpdir", "=", "dir_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "", "else", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "tmpdir", ")", "\n", "# dump the part result to the dir", "\n", "", "mmcv", ".", "dump", "(", "result_part", ",", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "rank", ")", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "# collect all parts", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "# load results of all parts from tmp dir", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "            ", "part_file", "=", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "part_list", ".", "append", "(", "mmcv", ".", "load", "(", "part_file", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "# remove tmp dir", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "return", "ordered_results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_combine_and_eval.parse_args": [[105, 138], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MMDet test detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--json_out'", ",", "\n", "help", "=", "'output result file name without extension'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'proposal'", ",", "'proposal_fast'", ",", "'proposal_fast_percat'", ",", "'bbox'", ",", "'segm'", ",", "'keypoints'", "]", ",", "\n", "help", "=", "'eval types'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "'--existing_json'", ",", "type", "=", "str", ",", "help", "=", "'existing_json'", ")", "\n", "parser", ".", "add_argument", "(", "'--tmpdir'", ",", "help", "=", "'tmp dir for writing some results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output_prefix'", ",", "\n", "help", "=", "'the output_prefix of parallel test'", ",", "\n", "type", "=", "str", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_combine_and_eval.main": [[140, 209], ["test_lvis_combine_and_eval.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "mmdet.models.build_detector", "mmcv.Config.fromfile.get", "print", "mmcv.load", "mmcv.load", "mmcv.load", "mmcv.load", "mmcv.load", "mmcv.load", "mmcv.load", "mmcv.load", "print", "hasattr", "ValueError", "parse_args.json_out.endswith", "mmdet.apis.init_dist", "mmdet.core.wrap_fp16_model", "mmdet.core.results2json", "mmdet.core.coco_eval", "hasattr", "parse_args.out.endswith", "mmdet.core.results2json", "mmdet.core.lvis_eval"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.twangnh_SimCal.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_detector", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.env.init_dist", "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.hooks.wrap_fp16_model", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.results2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.coco_utils.coco_eval", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.results2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.lvis_eval"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "out", "or", "args", ".", "show", "or", "args", ".", "json_out", ",", "(", "'Please specify at least one operation (save or show the results) '", "\n", "'with the argument \"--out\" or \"--show\" or \"--json_out\"'", ")", "\n", "\n", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "if", "args", ".", "json_out", "is", "not", "None", "and", "args", ".", "json_out", ".", "endswith", "(", "'.json'", ")", ":", "\n", "        ", "args", ".", "json_out", "=", "args", ".", "json_out", "[", ":", "-", "5", "]", "\n", "\n", "", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "# cfg.data.test.test_mode = False", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# build the dataloader", "\n", "# TODO: support multiple images per gpu (only minor changes are needed)", "\n", "", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "## uncomment to only eval on first 100 imgs", "\n", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "imgs_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "model", "=", "build_detector", "(", "cfg", ".", "model", ",", "train_cfg", "=", "cfg", ".", "train_cfg", ",", "test_cfg", "=", "cfg", ".", "test_cfg", ")", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "wrap_fp16_model", "(", "model", ")", "\n", "\n", "", "prefix", "=", "'./mrcnn_r50_dual'", "\n", "# prefix = './mrcnn_r50_ag_cocolt'", "\n", "\n", "print", "(", "prefix", ")", "\n", "\n", "set0", "=", "mmcv", ".", "load", "(", "'./{}_set0.pkl'", ".", "format", "(", "prefix", ")", ")", "\n", "set1", "=", "mmcv", ".", "load", "(", "'./{}_set1.pkl'", ".", "format", "(", "prefix", ")", ")", "\n", "set2", "=", "mmcv", ".", "load", "(", "'./{}_set2.pkl'", ".", "format", "(", "prefix", ")", ")", "\n", "set3", "=", "mmcv", ".", "load", "(", "'./{}_set3.pkl'", ".", "format", "(", "prefix", ")", ")", "\n", "set4", "=", "mmcv", ".", "load", "(", "'./{}_set4.pkl'", ".", "format", "(", "prefix", ")", ")", "\n", "set5", "=", "mmcv", ".", "load", "(", "'./{}_set5.pkl'", ".", "format", "(", "prefix", ")", ")", "\n", "set6", "=", "mmcv", ".", "load", "(", "'./{}_set6.pkl'", ".", "format", "(", "prefix", ")", ")", "\n", "set7", "=", "mmcv", ".", "load", "(", "'./{}_set7.pkl'", ".", "format", "(", "prefix", ")", ")", "\n", "\n", "set_combine", "=", "set0", "+", "set1", "+", "set2", "+", "set3", "+", "set4", "+", "set5", "+", "set6", "+", "set7", "\n", "\n", "print", "(", "'start eval'", ")", "\n", "if", "hasattr", "(", "dataset", ",", "'coco'", ")", ":", "\n", "        ", "result_files", "=", "results2json", "(", "dataset", ",", "set_combine", ",", "args", ".", "out", ",", "dump", "=", "False", ")", "\n", "coco_eval", "(", "result_files", ",", "args", ".", "eval", ",", "dataset", ".", "coco", ")", "\n", "\n", "", "elif", "hasattr", "(", "dataset", ",", "'lvis'", ")", ":", "\n", "        ", "result_files", "=", "results2json", "(", "dataset", ",", "set_combine", ",", "args", ".", "out", ",", "dump", "=", "False", ")", "\n", "lvis_eval", "(", "result_files", ",", "args", ".", "eval", ",", "dataset", ".", "lvis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.train.parse_args": [[15, 49], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--work_dir'", ",", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resume_from'", ",", "help", "=", "'the checkpoint file to resume from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--validate'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to evaluate the checkpoint during training'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'number of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--autoscale-lr'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'automatically scale lr with the number of gpus'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_model'", ",", "help", "=", "'use model'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_prefix'", ",", "help", "=", "'exp prefix'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.train.main": [[51, 144], ["train.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "mmdet.apis.get_root_logger", "mmdet.apis.get_root_logger.info", "mmdet.models.build_detector", "mmdet.apis.init_dist", "mmdet.apis.get_root_logger.info", "mmdet.apis.set_random_seed", "mmdet.datasets.build_dataset", "dict", "mmdet.apis.train_detector_normal", "mmdet.apis.train_detector_calibration"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.env.get_root_logger", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_detector", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.env.init_dist", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.env.set_random_seed", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.builder.build_dataset"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "# update configs according to CLI args", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "resume_from", "=", "args", ".", "resume_from", "\n", "", "cfg", ".", "gpus", "=", "args", ".", "gpus", "\n", "\n", "if", "args", ".", "autoscale_lr", ":", "\n", "# apply the linear scaling rule (https://arxiv.org/abs/1706.02677)", "\n", "        ", "cfg", ".", "optimizer", "[", "'lr'", "]", "=", "cfg", ".", "optimizer", "[", "'lr'", "]", "*", "cfg", ".", "gpus", "/", "8", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# init logger before other steps", "\n", "", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "logger", ".", "info", "(", "'Distributed training: {}'", ".", "format", "(", "distributed", ")", ")", "\n", "\n", "cfg", ".", "use_model", "=", "args", ".", "use_model", "\n", "cfg", ".", "exp_prefix", "=", "args", ".", "exp_prefix", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "'Set random seed to {}'", ".", "format", "(", "args", ".", "seed", ")", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "model", "=", "build_detector", "(", "\n", "cfg", ".", "model", ",", "train_cfg", "=", "cfg", ".", "train_cfg", ",", "test_cfg", "=", "cfg", ".", "test_cfg", ")", "\n", "\n", "datasets", "=", "[", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "]", "\n", "\n", "##coco train cls2imgsins statistics", "\n", "# class_to_image={}", "\n", "# for i in range(1,81):", "\n", "#     class_to_image[i]={}", "\n", "#     class_to_image[i]['img_id'] = []", "\n", "#     class_to_image[i]['isntance_count'] = 0", "\n", "#     class_to_image[i]['image_info_id'] = []", "\n", "#     class_to_image[i]['category_id'] = i", "\n", "# for idx in range(len(datasets[0].img_infos)):", "\n", "#     if idx%1000==0:", "\n", "#         print(idx)", "\n", "#     img_id = datasets[0].img_infos[idx]['id']", "\n", "#     ann_ids = datasets[0].coco.getAnnIds(imgIds=[img_id])", "\n", "#     ann_info = datasets[0].coco.loadAnns(ann_ids)", "\n", "#     for item in ann_info:", "\n", "#         label_id = datasets[0].cat2label[item['category_id']]", "\n", "#         if item['image_id'] not in class_to_image[label_id]['img_id']:", "\n", "#             class_to_image[label_id]['img_id'].append(item['image_id'])", "\n", "#             class_to_image[label_id]['image_info_id'].append(idx)", "\n", "#         class_to_image[label_id]['isntance_count']+=1", "\n", "# instancount = [class_to_image[i]['isntance_count'] for i in range(1, 81)]", "\n", "# import pickle", "\n", "# pickle.dump(class_to_image, open('./class_to_imageid_and_inscount_coco_sampled.pt', 'wb'))", "\n", "\n", "# if len(cfg.workflow) == 2:", "\n", "# datasets.append(build_dataset(cfg.data.train))#plain train", "\n", "# datasets.append(build_dataset(cfg.data.val))#val", "\n", "if", "cfg", ".", "checkpoint_config", "is", "not", "None", ":", "\n", "# save mmdet version, config file content and class names in", "\n", "# checkpoints as meta data", "\n", "        ", "cfg", ".", "checkpoint_config", ".", "meta", "=", "dict", "(", "\n", "mmdet_version", "=", "__version__", ",", "\n", "config", "=", "cfg", ".", "text", ",", "\n", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", ")", "\n", "# add an attribute for visualization convenience", "\n", "", "model", ".", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", "\n", "if", "'normal_training'", "in", "args", ".", "config", ":", "\n", "        ", "train_detector_normal", "(", "\n", "model", ",", "\n", "datasets", ",", "\n", "cfg", ",", "\n", "distributed", "=", "distributed", ",", "\n", "validate", "=", "args", ".", "validate", ",", "\n", "logger", "=", "logger", ")", "\n", "", "else", ":", "\n", "        ", "train_detector_calibration", "(", "\n", "model", ",", "\n", "datasets", ",", "\n", "cfg", ",", "\n", "distributed", "=", "distributed", ",", "\n", "validate", "=", "args", ".", "validate", ",", "\n", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.detectron2pytorch.convert_bn": [[10, 21], ["torch.from_numpy", "torch.from_numpy", "state_dict[].size", "torch.zeros", "torch.ones", "converted_names.add", "converted_names.add"], "function", ["None"], ["def", "convert_bn", "(", "blobs", ",", "state_dict", ",", "caffe_name", ",", "torch_name", ",", "converted_names", ")", ":", "\n", "# detectron replace bn with affine channel layer", "\n", "    ", "state_dict", "[", "torch_name", "+", "'.bias'", "]", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "caffe_name", "+", "\n", "'_b'", "]", ")", "\n", "state_dict", "[", "torch_name", "+", "'.weight'", "]", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "caffe_name", "+", "\n", "'_s'", "]", ")", "\n", "bn_size", "=", "state_dict", "[", "torch_name", "+", "'.weight'", "]", ".", "size", "(", ")", "\n", "state_dict", "[", "torch_name", "+", "'.running_mean'", "]", "=", "torch", ".", "zeros", "(", "bn_size", ")", "\n", "state_dict", "[", "torch_name", "+", "'.running_var'", "]", "=", "torch", ".", "ones", "(", "bn_size", ")", "\n", "converted_names", ".", "add", "(", "caffe_name", "+", "'_b'", ")", "\n", "converted_names", ".", "add", "(", "caffe_name", "+", "'_s'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.detectron2pytorch.convert_conv_fc": [[23, 32], ["torch.from_numpy", "converted_names.add", "torch.from_numpy", "converted_names.add"], "function", ["None"], ["", "def", "convert_conv_fc", "(", "blobs", ",", "state_dict", ",", "caffe_name", ",", "torch_name", ",", "\n", "converted_names", ")", ":", "\n", "    ", "state_dict", "[", "torch_name", "+", "'.weight'", "]", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "caffe_name", "+", "\n", "'_w'", "]", ")", "\n", "converted_names", ".", "add", "(", "caffe_name", "+", "'_w'", ")", "\n", "if", "caffe_name", "+", "'_b'", "in", "blobs", ":", "\n", "        ", "state_dict", "[", "torch_name", "+", "'.bias'", "]", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "caffe_name", "+", "\n", "'_b'", "]", ")", "\n", "converted_names", ".", "add", "(", "caffe_name", "+", "'_b'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.detectron2pytorch.convert": [[34, 76], ["mmcv.load", "collections.OrderedDict", "set", "detectron2pytorch.convert_conv_fc", "detectron2pytorch.convert_bn", "range", "dict", "torch.save", "ValueError", "range", "len", "enumerate", "print", "detectron2pytorch.convert_conv_fc", "detectron2pytorch.convert_bn", "detectron2pytorch.convert_conv_fc", "detectron2pytorch.convert_bn"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.tools.detectron2pytorch.convert_conv_fc", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.detectron2pytorch.convert_bn", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.detectron2pytorch.convert_conv_fc", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.detectron2pytorch.convert_bn", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.detectron2pytorch.convert_conv_fc", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.detectron2pytorch.convert_bn"], ["", "", "def", "convert", "(", "src", ",", "dst", ",", "depth", ")", ":", "\n", "    ", "\"\"\"Convert keys in detectron pretrained ResNet models to pytorch style.\"\"\"", "\n", "# load arch_settings", "\n", "if", "depth", "not", "in", "arch_settings", ":", "\n", "        ", "raise", "ValueError", "(", "'Only support ResNet-50 and ResNet-101 currently'", ")", "\n", "", "block_nums", "=", "arch_settings", "[", "depth", "]", "\n", "# load caffe model", "\n", "caffe_model", "=", "mmcv", ".", "load", "(", "src", ",", "encoding", "=", "'latin1'", ")", "\n", "blobs", "=", "caffe_model", "[", "'blobs'", "]", "if", "'blobs'", "in", "caffe_model", "else", "caffe_model", "\n", "# convert to pytorch style", "\n", "state_dict", "=", "OrderedDict", "(", ")", "\n", "converted_names", "=", "set", "(", ")", "\n", "convert_conv_fc", "(", "blobs", ",", "state_dict", ",", "'conv1'", ",", "'conv1'", ",", "converted_names", ")", "\n", "convert_bn", "(", "blobs", ",", "state_dict", ",", "'res_conv1_bn'", ",", "'bn1'", ",", "converted_names", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "block_nums", ")", "+", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "block_nums", "[", "i", "-", "1", "]", ")", ":", "\n", "            ", "if", "j", "==", "0", ":", "\n", "                ", "convert_conv_fc", "(", "blobs", ",", "state_dict", ",", "\n", "'res{}_{}_branch1'", ".", "format", "(", "i", "+", "1", ",", "j", ")", ",", "\n", "'layer{}.{}.downsample.0'", ".", "format", "(", "i", ",", "j", ")", ",", "\n", "converted_names", ")", "\n", "convert_bn", "(", "blobs", ",", "state_dict", ",", "\n", "'res{}_{}_branch1_bn'", ".", "format", "(", "i", "+", "1", ",", "j", ")", ",", "\n", "'layer{}.{}.downsample.1'", ".", "format", "(", "i", ",", "j", ")", ",", "\n", "converted_names", ")", "\n", "", "for", "k", ",", "letter", "in", "enumerate", "(", "[", "'a'", ",", "'b'", ",", "'c'", "]", ")", ":", "\n", "                ", "convert_conv_fc", "(", "blobs", ",", "state_dict", ",", "\n", "'res{}_{}_branch2{}'", ".", "format", "(", "i", "+", "1", ",", "j", ",", "letter", ")", ",", "\n", "'layer{}.{}.conv{}'", ".", "format", "(", "i", ",", "j", ",", "k", "+", "1", ")", ",", "\n", "converted_names", ")", "\n", "convert_bn", "(", "blobs", ",", "state_dict", ",", "\n", "'res{}_{}_branch2{}_bn'", ".", "format", "(", "i", "+", "1", ",", "j", ",", "letter", ")", ",", "\n", "'layer{}.{}.bn{}'", ".", "format", "(", "i", ",", "j", ",", "\n", "k", "+", "1", ")", ",", "converted_names", ")", "\n", "# check if all layers are converted", "\n", "", "", "", "for", "key", "in", "blobs", ":", "\n", "        ", "if", "key", "not", "in", "converted_names", ":", "\n", "            ", "print", "(", "'Not Convert: {}'", ".", "format", "(", "key", ")", ")", "\n", "# save checkpoint", "\n", "", "", "checkpoint", "=", "dict", "(", ")", "\n", "checkpoint", "[", "'state_dict'", "]", "=", "state_dict", "\n", "torch", ".", "save", "(", "checkpoint", ",", "dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.detectron2pytorch.main": [[78, 85], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "detectron2pytorch.convert"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.upgrade_model_version.convert"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Convert model keys'", ")", "\n", "parser", ".", "add_argument", "(", "'src'", ",", "help", "=", "'src detectron model path'", ")", "\n", "parser", ".", "add_argument", "(", "'dst'", ",", "help", "=", "'save path'", ")", "\n", "parser", ".", "add_argument", "(", "'depth'", ",", "type", "=", "int", ",", "help", "=", "'ResNet model depth'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "convert", "(", "args", ".", "src", ",", "args", ".", "dst", ",", "args", ".", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_htc.single_gpu_test": [[83, 100], ["model.eval", "mmcv.ProgressBar", "enumerate", "len", "results.append", "[].size", "range", "torch.no_grad", "torch.no_grad", "model", "model.module.show_result", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.show_result"], ["def", "single_gpu_test", "(", "model", ",", "data_loader", ",", "olongtailmodel", ",", "show", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "not", "show", ",", "olongtailmodel", "=", "olongtailmodel", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "show", ":", "\n", "            ", "model", ".", "module", ".", "show_result", "(", "data", ",", "result", ")", "\n", "\n", "", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_htc.multi_gpu_test": [[102, 123], ["model.eval", "mmcv.runner.get_dist_info", "enumerate", "test_lvis_htc.collect_results", "mmcv.ProgressBar", "collect_results.append", "len", "len", "torch.no_grad", "torch.no_grad", "model", "data[].data.size", "range", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.collect_results"], ["", "def", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "olongtailmodel", ",", "show", "=", "False", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "not", "show", ",", "olongtailmodel", "=", "olongtailmodel", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "batch_size", "=", "data", "[", "'img'", "]", ".", "data", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", "*", "world_size", ")", ":", "\n", "                ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "# collect results from all ranks", "\n", "", "", "", "results", "=", "collect_results", "(", "results", ",", "len", "(", "dataset", ")", ",", "tmpdir", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_htc.collect_results": [[125, 165], ["mmcv.runner.get_dist_info", "mmcv.dump", "torch.barrier", "torch.full", "torch.full", "torch.broadcast", "torch.full.cpu().numpy().tobytes().decode().rstrip", "mmcv.mkdir_or_exist", "os.join", "range", "zip", "shutil.rmtree", "tempfile.mkdtemp", "torch.tensor", "torch.tensor", "os.join", "part_list.append", "ordered_results.extend", "bytearray", "torch.full.cpu().numpy().tobytes().decode", "mmcv.load", "list", "torch.tensor.encode", "len", "torch.full.cpu().numpy().tobytes", "torch.full.cpu().numpy", "torch.full.cpu"], "function", ["None"], ["", "def", "collect_results", "(", "result_part", ",", "size", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# create a tmp dir if it is not specified", "\n", "if", "tmpdir", "is", "None", ":", "\n", "        ", "MAX_LEN", "=", "512", "\n", "# 32 is whitespace", "\n", "dir_tensor", "=", "torch", ".", "full", "(", "(", "MAX_LEN", ",", ")", ",", "\n", "32", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "'cuda'", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "tmpdir", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "tmpdir", ".", "encode", "(", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "dir_tensor", "[", ":", "len", "(", "tmpdir", ")", "]", "=", "tmpdir", "\n", "", "dist", ".", "broadcast", "(", "dir_tensor", ",", "0", ")", "\n", "tmpdir", "=", "dir_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "", "else", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "tmpdir", ")", "\n", "# dump the part result to the dir", "\n", "", "mmcv", ".", "dump", "(", "result_part", ",", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "rank", ")", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "# collect all parts", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "# load results of all parts from tmp dir", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "            ", "part_file", "=", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "part_list", ".", "append", "(", "mmcv", ".", "load", "(", "part_file", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "# remove tmp dir", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "return", "ordered_results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_htc.parse_args": [[167, 196], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MMDet test detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "# parser.add_argument('checkpoint', help='checkpoint file')", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--json_out'", ",", "\n", "help", "=", "'output result file name without extension'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'proposal'", ",", "'proposal_fast'", ",", "'bbox'", ",", "'segm'", ",", "'keypoints'", "]", ",", "\n", "help", "=", "'eval types'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "'--tmpdir'", ",", "help", "=", "'tmp dir for writing some results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--set'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--total_set_num'", ",", "type", "=", "int", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_htc.main": [[198, 401], ["test_lvis_htc.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "mmdet.models.build_detector", "mmcv.Config.fromfile.get", "print", "mmcv.runner.load_checkpoint", "cls_head_models.simple3fc.simple3fc().cuda", "test_lvis_htc.main.load_stage0_ckpt"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.twangnh_SimCal.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_detector", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "out", "or", "args", ".", "show", "or", "args", ".", "json_out", ",", "(", "'Please specify at least one operation (save or show the results) '", "\n", "'with the argument \"--out\" or \"--show\" or \"--json_out\"'", ")", "\n", "\n", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "if", "args", ".", "json_out", "is", "not", "None", "and", "args", ".", "json_out", ".", "endswith", "(", "'.json'", ")", ":", "\n", "        ", "args", ".", "json_out", "=", "args", ".", "json_out", "[", ":", "-", "5", "]", "\n", "\n", "", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# build the dataloader", "\n", "# TODO: support multiple images per gpu (only minor changes are needed)", "\n", "", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "# per_set_img_num = int(len(dataset.img_infos)/args.total_set_num)", "\n", "# this_set_start = per_set_img_num*args.set", "\n", "# if args.set < args.total_set_num-1:", "\n", "#     dataset.img_infos = dataset.img_infos[this_set_start: this_set_start+per_set_img_num]", "\n", "# else:", "\n", "#     dataset.img_infos = dataset.img_infos[this_set_start:]", "\n", "# dataset.img_infos = dataset.img_infos[:100]", "\n", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "imgs_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "model", "=", "build_detector", "(", "cfg", ".", "model", ",", "train_cfg", "=", "None", ",", "test_cfg", "=", "cfg", ".", "test_cfg", ")", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "wrap_fp16_model", "(", "model", ")", "\n", "# print('load from {}'.format(args.checkpoint))", "\n", "# checkpoint = load_checkpoint(model, args.checkpoint, map_location='cpu')", "\n", "", "print", "(", "'load model from {}'", ".", "format", "(", "cfg", ".", "load_from", ")", ")", "\n", "# checkpoint = load_checkpoint(model, args.checkpoint, map_location='cpu')", "\n", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "cfg", ".", "load_from", ",", "map_location", "=", "'cpu'", ")", "\n", "# old versions did not save class info in checkpoints, this walkaround is", "\n", "# for backward compatibility", "\n", "if", "'CLASSES'", "in", "checkpoint", "[", "'meta'", "]", ":", "\n", "        ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "        ", "model", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "\n", "\n", "## load longtail classifier", "\n", "\n", "# def load_ncm_ckpt(ncm_model):", "\n", "#     if not os.path.exists('./simple3fc.pth'):", "\n", "#         print('start training from 0 epoch')", "\n", "#         return 0", "\n", "#     else:", "\n", "#         epoch = torch.load('./simple3fc_epoch.pth')", "\n", "#         load_checkpoint(ncm_model, './simple3fc.pth')", "\n", "#         return epoch", "\n", "\n", "# def load_ncm_ckpt(ncm_model):", "\n", "#     if not os.path.exists('./simple3fc.pth'):", "\n", "#         print('start training from 0 epoch')", "\n", "#         return 0", "\n", "#     else:", "\n", "#         epoch = torch.load('./finetune_simple3fc_epoch.pth')", "\n", "#         load_checkpoint(ncm_model, './finetune_simple3fc.pth')", "\n", "#         return epoch", "\n", "\n", "", "def", "load_ncm_ckpt", "(", "ncm_model", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "'./exp_randominit_negpossame_finetune_simple3fc_stage2_epoch.pth'", ")", ":", "\n", "            ", "print", "(", "'start training from 0 epoch'", ")", "\n", "return", "0", "\n", "", "else", ":", "\n", "            ", "epoch", "=", "torch", ".", "load", "(", "'./exp_randominit_negpossame_finetune_simple3fc_stage2_epoch.pth'", ")", "\n", "load_checkpoint", "(", "ncm_model", ",", "'exp_randominit_negpossame_finetune_simple3fc_stage2.pth'", ")", "\n", "return", "epoch", "\n", "\n", "# def load_simple2fc_stage0_ckpt(ncm_model):", "\n", "#", "\n", "#     epoch = torch.load('./finetune2fc_10epoch/exp_randominit_finetune_simple2fc_stage0_epoch.pth')", "\n", "#     load_checkpoint(ncm_model, './finetune2fc_10epoch/exp_randominit_finetune_simple2fc_stage0.pth')", "\n", "#     return epoch", "\n", "#", "\n", "# def load_simple2fc_stage1_ckpt(ncm_model):", "\n", "#", "\n", "#     epoch = torch.load('./finetune2fc_10epoch/exp_randominit_finetune_simple2fc_stage1_epoch.pth')", "\n", "#     load_checkpoint(ncm_model, './finetune2fc_10epoch/exp_randominit_finetune_simple2fc_stage1.pth')", "\n", "#     return epoch", "\n", "#", "\n", "# def load_simple2fc_stage2_ckpt(ncm_model):", "\n", "#", "\n", "#     epoch = torch.load('./finetune2fc_10epoch/exp_randominit_finetune_simple2fc_stage2_epoch.pth')", "\n", "#     load_checkpoint(ncm_model, './finetune2fc_10epoch/exp_randominit_finetune_simple2fc_stage2.pth')", "\n", "#     return epoch", "\n", "#", "\n", "#", "\n", "# olongtail_model_stage0 = simple2fc().cuda()", "\n", "# epoch = load_simple2fc_stage0_ckpt(olongtail_model_stage0)", "\n", "# print('load model epoch {}'.format(epoch))", "\n", "# olongtail_model_stage0.eval()", "\n", "#", "\n", "# olongtail_model_stage1 = simple2fc().cuda()", "\n", "# epoch = load_simple2fc_stage1_ckpt(olongtail_model_stage1)", "\n", "# olongtail_model_stage1.eval()", "\n", "#", "\n", "# olongtail_model_stage2 = simple2fc().cuda()", "\n", "# epoch = load_simple2fc_stage2_ckpt(olongtail_model_stage2)", "\n", "# olongtail_model_stage2.eval()", "\n", "#", "\n", "# olongtail_model_all_stage = [olongtail_model_stage0, olongtail_model_stage1, olongtail_model_stage2]", "\n", "\n", "", "", "prefix", "=", "'3fc_ft'", "\n", "def", "load_stage0_ckpt", "(", "ncm_model", ")", ":", "\n", "\n", "# epoch = torch.load('./work_dirs/htc/{}_stage0_epoch.pth'.format(prefix))", "\n", "        ", "load_checkpoint", "(", "ncm_model", ",", "'./work_dirs/htc/{}_stage0.pth'", ".", "format", "(", "prefix", ")", ")", "\n", "# return epoch", "\n", "\n", "", "def", "load_stage1_ckpt", "(", "ncm_model", ")", ":", "\n", "\n", "# epoch = torch.load('./work_dirs/htc/{}_stage1_epoch.pth'.format(prefix))", "\n", "        ", "load_checkpoint", "(", "ncm_model", ",", "'./work_dirs/htc/{}_stage1.pth'", ".", "format", "(", "prefix", ")", ")", "\n", "# return epoch", "\n", "\n", "", "def", "load_stage2_ckpt", "(", "ncm_model", ")", ":", "\n", "\n", "# epoch = torch.load('./work_dirs/htc/{}_stage2_epoch.pth'.format(prefix))", "\n", "        ", "load_checkpoint", "(", "ncm_model", ",", "'./work_dirs/htc/{}_stage2.pth'", ".", "format", "(", "prefix", ")", ")", "\n", "# return epoch", "\n", "\n", "\n", "", "olongtail_model_stage0", "=", "simple3fc", "(", ")", ".", "cuda", "(", ")", "\n", "epoch", "=", "load_stage0_ckpt", "(", "olongtail_model_stage0", ")", "\n", "# print('load model epoch {}'.format(epoch))", "\n", "olongtail_model_stage0", ".", "eval", "(", ")", "\n", "\n", "olongtail_model_stage1", "=", "simple3fc", "(", ")", ".", "cuda", "(", ")", "\n", "epoch", "=", "load_stage1_ckpt", "(", "olongtail_model_stage1", ")", "\n", "olongtail_model_stage1", ".", "eval", "(", ")", "\n", "\n", "olongtail_model_stage2", "=", "simple3fc", "(", ")", ".", "cuda", "(", ")", "\n", "epoch", "=", "load_stage2_ckpt", "(", "olongtail_model_stage2", ")", "\n", "olongtail_model_stage2", ".", "eval", "(", ")", "\n", "\n", "olongtail_model_all_stage", "=", "[", "olongtail_model_stage0", ",", "olongtail_model_stage1", ",", "olongtail_model_stage2", "]", "\n", "\n", "\n", "if", "not", "distributed", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ",", "olongtail_model_all_stage", ",", "args", ".", "show", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDistributedDataParallel", "(", "model", ".", "cuda", "(", ")", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "olongtail_model_all_stage", ",", "args", ".", "show", ",", "args", ".", "tmpdir", ")", "\n", "\n", "# mmcv.dump(outputs, args.out)", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "args", ".", "out", "and", "rank", "==", "0", ":", "\n", "        ", "print", "(", "'\\nwriting results to {}'", ".", "format", "(", "args", ".", "out", ")", ")", "\n", "# mmcv.dump(outputs, args.out)", "\n", "eval_types", "=", "args", ".", "eval", "\n", "if", "eval_types", ":", "\n", "\n", "            ", "if", "eval_types", "==", "[", "'proposal_fast'", "]", ":", "\n", "                ", "result_file", "=", "args", ".", "out", "\n", "lvis_eval", "(", "result_file", ",", "eval_types", ",", "dataset", ".", "coco", ")", "\n", "", "else", ":", "\n", "                ", "if", "not", "isinstance", "(", "outputs", "[", "0", "]", ",", "dict", ")", ":", "\n", "                    ", "result_files", "=", "results2json", "(", "dataset", ",", "outputs", ",", "args", ".", "out", ",", "dump", "=", "False", ")", "\n", "print", "(", "'Starting evaluate {}'", ".", "format", "(", "' and '", ".", "join", "(", "eval_types", ")", ")", ")", "\n", "lvis_eval", "(", "result_files", ",", "eval_types", ",", "dataset", ".", "lvis", ")", "\n", "", "else", ":", "\n", "                    ", "for", "name", "in", "outputs", "[", "0", "]", ":", "\n", "                        ", "print", "(", "'\\nEvaluating {}'", ".", "format", "(", "name", ")", ")", "\n", "outputs_", "=", "[", "out", "[", "name", "]", "for", "out", "in", "outputs", "]", "\n", "result_file", "=", "args", ".", "out", "+", "'.{}'", ".", "format", "(", "name", ")", "\n", "result_files", "=", "results2json", "(", "dataset", ",", "outputs_", ",", "\n", "result_file", ")", "\n", "lvis_eval", "(", "result_files", ",", "eval_types", ",", "dataset", ".", "coco", ")", "\n", "\n", "# Save predictions in the COCO json format", "\n", "", "", "", "", "", "if", "args", ".", "json_out", "and", "rank", "==", "0", ":", "\n", "        ", "if", "not", "isinstance", "(", "outputs", "[", "0", "]", ",", "dict", ")", ":", "\n", "            ", "results2json", "(", "dataset", ",", "outputs", ",", "args", ".", "json_out", ")", "\n", "", "else", ":", "\n", "            ", "for", "name", "in", "outputs", "[", "0", "]", ":", "\n", "                ", "outputs_", "=", "[", "out", "[", "name", "]", "for", "out", "in", "outputs", "]", "\n", "result_file", "=", "args", ".", "json_out", "+", "'.{}'", ".", "format", "(", "name", ")", "\n", "results2json", "(", "dataset", ",", "outputs_", ",", "result_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test.single_gpu_test": [[19, 36], ["model.eval", "mmcv.ProgressBar", "enumerate", "len", "results.append", "[].size", "range", "torch.no_grad", "torch.no_grad", "model", "model.module.show_result", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.show_result"], ["def", "single_gpu_test", "(", "model", ",", "data_loader", ",", "show", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "not", "show", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "show", ":", "\n", "            ", "model", ".", "module", ".", "show_result", "(", "data", ",", "result", ",", "dataset", ".", "img_norm_cfg", ")", "\n", "\n", "", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test.multi_gpu_test": [[38, 59], ["model.eval", "mmcv.runner.get_dist_info", "enumerate", "test.collect_results", "mmcv.ProgressBar", "collect_results.append", "len", "len", "torch.no_grad", "torch.no_grad", "model", "[].size", "range", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.collect_results"], ["", "def", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", "*", "world_size", ")", ":", "\n", "                ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "# collect results from all ranks", "\n", "", "", "", "results", "=", "collect_results", "(", "results", ",", "len", "(", "dataset", ")", ",", "tmpdir", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test.collect_results": [[61, 101], ["mmcv.runner.get_dist_info", "mmcv.dump", "torch.barrier", "torch.full", "torch.full", "torch.broadcast", "torch.full.cpu().numpy().tobytes().decode().rstrip", "mmcv.mkdir_or_exist", "os.join", "range", "zip", "shutil.rmtree", "tempfile.mkdtemp", "torch.tensor", "torch.tensor", "os.join", "part_list.append", "ordered_results.extend", "bytearray", "torch.full.cpu().numpy().tobytes().decode", "mmcv.load", "list", "torch.tensor.encode", "len", "torch.full.cpu().numpy().tobytes", "torch.full.cpu().numpy", "torch.full.cpu"], "function", ["None"], ["", "def", "collect_results", "(", "result_part", ",", "size", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# create a tmp dir if it is not specified", "\n", "if", "tmpdir", "is", "None", ":", "\n", "        ", "MAX_LEN", "=", "512", "\n", "# 32 is whitespace", "\n", "dir_tensor", "=", "torch", ".", "full", "(", "(", "MAX_LEN", ",", ")", ",", "\n", "32", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "'cuda'", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "tmpdir", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "tmpdir", ".", "encode", "(", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "dir_tensor", "[", ":", "len", "(", "tmpdir", ")", "]", "=", "tmpdir", "\n", "", "dist", ".", "broadcast", "(", "dir_tensor", ",", "0", ")", "\n", "tmpdir", "=", "dir_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "", "else", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "tmpdir", ")", "\n", "# dump the part result to the dir", "\n", "", "mmcv", ".", "dump", "(", "result_part", ",", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "rank", ")", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "# collect all parts", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "# load results of all parts from tmp dir", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "            ", "part_file", "=", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "part_list", ".", "append", "(", "mmcv", ".", "load", "(", "part_file", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "# remove tmp dir", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "return", "ordered_results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test.parse_args": [[103, 131], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MMDet test detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--json_out'", ",", "\n", "help", "=", "'output result file name without extension'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'proposal'", ",", "'proposal_fast'", ",", "'bbox'", ",", "'segm'", ",", "'keypoints'", "]", ",", "\n", "help", "=", "'eval types'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "'--existing_json'", ",", "action", "=", "'store_true'", ",", "help", "=", "'existing_json'", ")", "\n", "parser", ".", "add_argument", "(", "'--tmpdir'", ",", "help", "=", "'tmp dir for writing some results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test.main": [[133, 233], ["test.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "mmdet.models.build_detector", "mmcv.Config.fromfile.get", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "ValueError", "parse_args.json_out.endswith", "mmdet.apis.init_dist", "mmdet.core.wrap_fp16_model", "mmcv.load", "mmdet.core.coco_eval", "exit", "mmcv.parallel.MMDataParallel", "test.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "test.multi_gpu_test", "print", "mmcv.dump", "parse_args.out.endswith", "mmcv.parallel.MMDistributedDataParallel.cuda", "print", "isinstance", "mmdet.core.results2json", "mmdet.core.coco_eval", "mmdet.core.results2json", "isinstance", "mmdet.core.results2json", "mmdet.core.coco_eval", "print", "mmdet.core.results2json", "mmdet.core.coco_eval"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.twangnh_SimCal.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_detector", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.env.init_dist", "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.hooks.wrap_fp16_model", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.coco_utils.coco_eval", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.single_gpu_test", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.multi_gpu_test", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.results2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.coco_utils.coco_eval", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.results2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.results2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.coco_utils.coco_eval", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.results2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.coco_utils.coco_eval"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "out", "or", "args", ".", "show", "or", "args", ".", "json_out", ",", "(", "'Please specify at least one operation (save or show the results) '", "\n", "'with the argument \"--out\" or \"--show\" or \"--json_out\"'", ")", "\n", "\n", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "if", "args", ".", "json_out", "is", "not", "None", "and", "args", ".", "json_out", ".", "endswith", "(", "'.json'", ")", ":", "\n", "        ", "args", ".", "json_out", "=", "args", ".", "json_out", "[", ":", "-", "5", "]", "\n", "\n", "", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# build the dataloader", "\n", "# TODO: support multiple images per gpu (only minor changes are needed)", "\n", "", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "## uncomment to only eval on first 100 imgs", "\n", "# dataset.img_infos = dataset.img_infos[:100]", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "imgs_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "model", "=", "build_detector", "(", "cfg", ".", "model", ",", "train_cfg", "=", "None", ",", "test_cfg", "=", "cfg", ".", "test_cfg", ")", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "wrap_fp16_model", "(", "model", ")", "\n", "", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "# old versions did not save class info in checkpoints, this walkaround is", "\n", "# for backward compatibility", "\n", "if", "'CLASSES'", "in", "checkpoint", "[", "'meta'", "]", ":", "\n", "        ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "        ", "model", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "\n", "", "if", "args", ".", "existing_json", ":", "\n", "        ", "result_files", "=", "{", "'bbox'", ":", "'./coco_maskrcnn_r50fpn.pkl.bbox.json'", ",", "'segm'", ":", "'./coco_maskrcnn_r50fpn.pkl.segm.json'", ",", "\n", "'proposal'", ":", "'./coco_maskrcnn_r50fpn.pkl.proposal.json'", "}", "\n", "eval_types", "=", "[", "'proposal_fast'", "]", "\n", "result_files", "=", "mmcv", ".", "load", "(", "'./debug_coco_maskrcnn_r50fpn.pkl'", ")", "\n", "result_files", "=", "[", "item", "[", "2", "]", "for", "item", "in", "result_files", "]", "\n", "coco_eval", "(", "result_files", ",", "eval_types", ",", "dataset", ".", "coco", ")", "\n", "exit", "(", ")", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "show", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDistributedDataParallel", "(", "model", ".", "cuda", "(", ")", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "tmpdir", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "args", ".", "out", "and", "rank", "==", "0", ":", "\n", "        ", "print", "(", "'\\nwriting results to {}'", ".", "format", "(", "args", ".", "out", ")", ")", "\n", "mmcv", ".", "dump", "(", "outputs", ",", "args", ".", "out", ")", "\n", "eval_types", "=", "args", ".", "eval", "\n", "if", "eval_types", ":", "\n", "            ", "print", "(", "'Starting evaluate {}'", ".", "format", "(", "' and '", ".", "join", "(", "eval_types", ")", ")", ")", "\n", "if", "eval_types", "==", "[", "'proposal_fast'", "]", ":", "\n", "                ", "result_file", "=", "args", ".", "out", "\n", "coco_eval", "(", "result_file", ",", "eval_types", ",", "dataset", ".", "coco", ")", "\n", "", "else", ":", "\n", "                ", "if", "not", "isinstance", "(", "outputs", "[", "0", "]", ",", "dict", ")", ":", "\n", "                    ", "result_files", "=", "results2json", "(", "dataset", ",", "outputs", ",", "args", ".", "out", ")", "\n", "coco_eval", "(", "result_files", ",", "eval_types", ",", "dataset", ".", "coco", ")", "\n", "", "else", ":", "\n", "                    ", "for", "name", "in", "outputs", "[", "0", "]", ":", "\n", "                        ", "print", "(", "'\\nEvaluating {}'", ".", "format", "(", "name", ")", ")", "\n", "outputs_", "=", "[", "out", "[", "name", "]", "for", "out", "in", "outputs", "]", "\n", "result_file", "=", "args", ".", "out", "+", "'.{}'", ".", "format", "(", "name", ")", "\n", "result_files", "=", "results2json", "(", "dataset", ",", "outputs_", ",", "\n", "result_file", ")", "\n", "coco_eval", "(", "result_files", ",", "eval_types", ",", "dataset", ".", "coco", ")", "\n", "\n", "# Save predictions in the COCO json format", "\n", "", "", "", "", "", "if", "args", ".", "json_out", "and", "rank", "==", "0", ":", "\n", "        ", "if", "not", "isinstance", "(", "outputs", "[", "0", "]", ",", "dict", ")", ":", "\n", "            ", "results2json", "(", "dataset", ",", "outputs", ",", "args", ".", "json_out", ")", "\n", "", "else", ":", "\n", "            ", "for", "name", "in", "outputs", "[", "0", "]", ":", "\n", "                ", "outputs_", "=", "[", "out", "[", "name", "]", "for", "out", "in", "outputs", "]", "\n", "result_file", "=", "args", ".", "json_out", "+", "'.{}'", ".", "format", "(", "name", ")", "\n", "results2json", "(", "dataset", ",", "outputs_", ",", "result_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_combine_and_eval_coco.single_gpu_test": [[23, 41], ["model.eval", "mmcv.ProgressBar", "enumerate", "len", "results.append", "[].data.size", "range", "torch.no_grad", "torch.no_grad", "model", "model.module.show_result", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.show_result"], ["def", "single_gpu_test", "(", "model", ",", "data_loader", ",", "olongtail_model", ",", "dataset_for_support", ",", "show", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "not", "show", ",", "dataset_for_support", "=", "dataset_for_support", ",", "\n", "dataset_val", "=", "data_loader", ".", "dataset", ",", "olongtail_model", "=", "olongtail_model", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "show", ":", "\n", "            ", "model", ".", "module", ".", "show_result", "(", "data", ",", "result", ",", "dataset", ".", "img_norm_cfg", ")", "\n", "\n", "", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "data", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_combine_and_eval_coco.multi_gpu_test": [[43, 64], ["model.eval", "mmcv.runner.get_dist_info", "enumerate", "test_lvis_combine_and_eval_coco.collect_results", "mmcv.ProgressBar", "collect_results.append", "len", "len", "torch.no_grad", "torch.no_grad", "model", "[].size", "range", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.collect_results"], ["", "def", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", "*", "world_size", ")", ":", "\n", "                ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "# collect results from all ranks", "\n", "", "", "", "results", "=", "collect_results", "(", "results", ",", "len", "(", "dataset", ")", ",", "tmpdir", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_combine_and_eval_coco.collect_results": [[66, 106], ["mmcv.runner.get_dist_info", "mmcv.dump", "torch.barrier", "torch.full", "torch.full", "torch.broadcast", "torch.full.cpu().numpy().tobytes().decode().rstrip", "mmcv.mkdir_or_exist", "os.join", "range", "zip", "shutil.rmtree", "tempfile.mkdtemp", "torch.tensor", "torch.tensor", "os.join", "part_list.append", "ordered_results.extend", "bytearray", "torch.full.cpu().numpy().tobytes().decode", "mmcv.load", "list", "torch.tensor.encode", "len", "torch.full.cpu().numpy().tobytes", "torch.full.cpu().numpy", "torch.full.cpu"], "function", ["None"], ["", "def", "collect_results", "(", "result_part", ",", "size", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# create a tmp dir if it is not specified", "\n", "if", "tmpdir", "is", "None", ":", "\n", "        ", "MAX_LEN", "=", "512", "\n", "# 32 is whitespace", "\n", "dir_tensor", "=", "torch", ".", "full", "(", "(", "MAX_LEN", ",", ")", ",", "\n", "32", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "'cuda'", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "tmpdir", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "tmpdir", ".", "encode", "(", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "dir_tensor", "[", ":", "len", "(", "tmpdir", ")", "]", "=", "tmpdir", "\n", "", "dist", ".", "broadcast", "(", "dir_tensor", ",", "0", ")", "\n", "tmpdir", "=", "dir_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "", "else", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "tmpdir", ")", "\n", "# dump the part result to the dir", "\n", "", "mmcv", ".", "dump", "(", "result_part", ",", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "rank", ")", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "# collect all parts", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "# load results of all parts from tmp dir", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "            ", "part_file", "=", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "part_list", ".", "append", "(", "mmcv", ".", "load", "(", "part_file", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "# remove tmp dir", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "return", "ordered_results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_combine_and_eval_coco.parse_args": [[108, 136], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MMDet test detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--json_out'", ",", "\n", "help", "=", "'output result file name without extension'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'proposal'", ",", "'proposal_fast'", ",", "'proposal_fast_percat'", ",", "'bbox'", ",", "'segm'", ",", "'keypoints'", "]", ",", "\n", "help", "=", "'eval types'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "'--existing_json'", ",", "type", "=", "str", ",", "help", "=", "'existing_json'", ")", "\n", "parser", ".", "add_argument", "(", "'--tmpdir'", ",", "help", "=", "'tmp dir for writing some results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_combine_and_eval_coco.main": [[138, 255], ["test_lvis_combine_and_eval_coco.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "mmdet.models.build_detector", "mmcv.Config.fromfile.get", "print", "mmcv.runner.load_checkpoint", "print", "mmcv.load", "mmcv.load", "mmcv.load", "mmcv.load", "mmcv.load", "mmcv.load", "mmcv.load", "mmcv.load", "print", "mmdet.core.results2json", "mmdet.core.coco_eval", "ValueError", "parse_args.json_out.endswith", "mmdet.apis.init_dist", "mmdet.core.wrap_fp16_model", "parse_args.out.endswith"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.twangnh_SimCal.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_detector", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.results2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.coco_utils.coco_eval", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.env.init_dist", "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.hooks.wrap_fp16_model"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "out", "or", "args", ".", "show", "or", "args", ".", "json_out", ",", "(", "'Please specify at least one operation (save or show the results) '", "\n", "'with the argument \"--out\" or \"--show\" or \"--json_out\"'", ")", "\n", "\n", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "if", "args", ".", "json_out", "is", "not", "None", "and", "args", ".", "json_out", ".", "endswith", "(", "'.json'", ")", ":", "\n", "        ", "args", ".", "json_out", "=", "args", ".", "json_out", "[", ":", "-", "5", "]", "\n", "\n", "", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "# cfg.data.test.test_mode = False", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# build the dataloader", "\n", "# TODO: support multiple images per gpu (only minor changes are needed)", "\n", "", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "## uncomment to only eval on first 100 imgs", "\n", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "imgs_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "model", "=", "build_detector", "(", "cfg", ".", "model", ",", "train_cfg", "=", "cfg", ".", "train_cfg", ",", "test_cfg", "=", "cfg", ".", "test_cfg", ")", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "wrap_fp16_model", "(", "model", ")", "\n", "\n", "", "print", "(", "'load model from {}'", ".", "format", "(", "cfg", ".", "load_from", ")", ")", "\n", "# checkpoint = load_checkpoint(model, args.checkpoint, map_location='cpu')", "\n", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "cfg", ".", "load_from", ",", "map_location", "=", "'cpu'", ")", "\n", "# old versions did not save class info in checkpoints, this walkaround is", "\n", "# for backward compatibility", "\n", "if", "'CLASSES'", "in", "checkpoint", "[", "'meta'", "]", ":", "\n", "        ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "        ", "model", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "\n", "# set0 = mmcv.load('../liyu_mmdet/set0.pkl')", "\n", "# set1 = mmcv.load('../liyu_mmdet/set1.pkl')", "\n", "# set2 = mmcv.load('../liyu_mmdet/set2.pkl')", "\n", "# set3 = mmcv.load('../liyu_mmdet/set3.pkl')", "\n", "# set4 = mmcv.load('../liyu_mmdet/set4.pkl')", "\n", "# set5 = mmcv.load('../liyu_mmdet/set5.pkl')", "\n", "# set6 = mmcv.load('../liyu_mmdet/set6.pkl')", "\n", "# set7 = mmcv.load('../liyu_mmdet/set7.pkl')", "\n", "# set0 = mmcv.load('./set0.pkl')", "\n", "# set1 = mmcv.load('./set1.pkl')", "\n", "# set2 = mmcv.load('./set2.pkl')", "\n", "# set3 = mmcv.load('./set3.pkl')", "\n", "# set4 = mmcv.load('./set4.pkl')", "\n", "# set5 = mmcv.load('./set5.pkl')", "\n", "# set6 = mmcv.load('./set6.pkl')", "\n", "# set7 = mmcv.load('./set7.pkl')", "\n", "# set_combine = set0+set1+set2+set3+set4+set5+set6+set7", "\n", "# prefix = 'mrcnnr50_14.3_clshead'", "\n", "# set0 = mmcv.load('./{}_set0.pkl'.format(prefix))", "\n", "# set1 = mmcv.load('./{}_set1.pkl'.format(prefix))", "\n", "# set2 = mmcv.load('./{}_set2.pkl'.format(prefix))", "\n", "# set3 = mmcv.load('./{}_set3.pkl'.format(prefix))", "\n", "# set_combine = set0+set1+set2+set3", "\n", "\n", "# prefix = '/mrcnnr50_ag_coco_clshead'", "\n", "", "prefix", "=", "'mrcnnr50_ag_3fc_ft_cocolongtail_cat400_epoch_2'", "\n", "prefix", "=", "'mrcnn_r50_ag_cocolt'", "\n", "print", "(", "prefix", ")", "\n", "\n", "set0", "=", "mmcv", ".", "load", "(", "'./{}_set0.pkl'", ".", "format", "(", "prefix", ")", ")", "\n", "set1", "=", "mmcv", ".", "load", "(", "'./{}_set1.pkl'", ".", "format", "(", "prefix", ")", ")", "\n", "set2", "=", "mmcv", ".", "load", "(", "'./{}_set2.pkl'", ".", "format", "(", "prefix", ")", ")", "\n", "set3", "=", "mmcv", ".", "load", "(", "'./{}_set3.pkl'", ".", "format", "(", "prefix", ")", ")", "\n", "set4", "=", "mmcv", ".", "load", "(", "'./{}_set4.pkl'", ".", "format", "(", "prefix", ")", ")", "\n", "set5", "=", "mmcv", ".", "load", "(", "'./{}_set5.pkl'", ".", "format", "(", "prefix", ")", ")", "\n", "set6", "=", "mmcv", ".", "load", "(", "'./{}_set6.pkl'", ".", "format", "(", "prefix", ")", ")", "\n", "set7", "=", "mmcv", ".", "load", "(", "'./{}_set7.pkl'", ".", "format", "(", "prefix", ")", ")", "\n", "\n", "# set0 = mmcv.load('./set0.pkl')", "\n", "# set1 = mmcv.load('./set1.pkl')", "\n", "# set2 = mmcv.load('./set2.pkl')", "\n", "# set3 = mmcv.load('./set3.pkl')", "\n", "# set4 = mmcv.load('./set4.pkl')", "\n", "# set5 = mmcv.load('./set5.pkl')", "\n", "# set6 = mmcv.load('./set6.pkl')", "\n", "# set7 = mmcv.load('./set7.pkl')", "\n", "set_combine", "=", "set0", "+", "set1", "+", "set2", "+", "set3", "+", "set4", "+", "set5", "+", "set6", "+", "set7", "\n", "\n", "# set_liyu = mmcv.load('../mmdet_ensemble/results319.pkl')", "\n", "\n", "# mmcv.dump(set_combine, args.out)", "\n", "# result_files = results2json(dataset, set_combine,", "\n", "#                             args.out)", "\n", "print", "(", "'pkl result dumped, start eval'", ")", "\n", "# result_files = results2json(dataset, set_combine,", "\n", "#                             args.out, dump=False)", "\n", "#", "\n", "# lvis_eval(result_files, args.eval, dataset.lvis)", "\n", "\n", "\n", "result_files", "=", "results2json", "(", "dataset", ",", "set_combine", ",", "args", ".", "out", ",", "dump", "=", "False", ")", "\n", "coco_eval", "(", "result_files", ",", "args", ".", "eval", ",", "dataset", ".", "coco", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis.single_gpu_test": [[25, 42], ["model.eval", "mmcv.ProgressBar", "enumerate", "len", "results.append", "data[].data.size", "range", "torch.no_grad", "torch.no_grad", "model", "model.module.show_result", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.show_result"], ["def", "single_gpu_test", "(", "model", ",", "data_loader", ",", "cal_head", ",", "show", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "not", "show", ",", "cal_head", "=", "cal_head", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "show", ":", "\n", "            ", "model", ".", "module", ".", "show_result", "(", "data", ",", "result", ",", "dataset", ".", "img_norm_cfg", ")", "\n", "\n", "", "batch_size", "=", "data", "[", "'img'", "]", ".", "data", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis.multi_gpu_test": [[44, 65], ["model.eval", "mmcv.runner.get_dist_info", "enumerate", "test_lvis.collect_results", "mmcv.ProgressBar", "collect_results.append", "len", "len", "torch.no_grad", "torch.no_grad", "model", "data[].data.size", "range", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.collect_results"], ["", "def", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "cal_head", ",", "show", "=", "False", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "not", "show", ",", "cal_head", "=", "cal_head", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "batch_size", "=", "data", "[", "'img'", "]", ".", "data", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", "*", "world_size", ")", ":", "\n", "                ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "# collect results from all ranks", "\n", "", "", "", "results", "=", "collect_results", "(", "results", ",", "len", "(", "dataset", ")", ",", "tmpdir", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis.collect_results": [[67, 107], ["mmcv.runner.get_dist_info", "mmcv.dump", "torch.barrier", "torch.full", "torch.full", "torch.broadcast", "torch.full.cpu().numpy().tobytes().decode().rstrip", "mmcv.mkdir_or_exist", "os.join", "range", "zip", "shutil.rmtree", "tempfile.mkdtemp", "torch.tensor", "torch.tensor", "os.join", "part_list.append", "ordered_results.extend", "bytearray", "torch.full.cpu().numpy().tobytes().decode", "mmcv.load", "list", "torch.tensor.encode", "len", "torch.full.cpu().numpy().tobytes", "torch.full.cpu().numpy", "torch.full.cpu"], "function", ["None"], ["", "def", "collect_results", "(", "result_part", ",", "size", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# create a tmp dir if it is not specified", "\n", "if", "tmpdir", "is", "None", ":", "\n", "        ", "MAX_LEN", "=", "512", "\n", "# 32 is whitespace", "\n", "dir_tensor", "=", "torch", ".", "full", "(", "(", "MAX_LEN", ",", ")", ",", "\n", "32", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "'cuda'", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "tmpdir", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "tmpdir", ".", "encode", "(", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "dir_tensor", "[", ":", "len", "(", "tmpdir", ")", "]", "=", "tmpdir", "\n", "", "dist", ".", "broadcast", "(", "dir_tensor", ",", "0", ")", "\n", "tmpdir", "=", "dir_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "", "else", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "tmpdir", ")", "\n", "# dump the part result to the dir", "\n", "", "mmcv", ".", "dump", "(", "result_part", ",", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "rank", ")", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "# collect all parts", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "# load results of all parts from tmp dir", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "            ", "part_file", "=", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "part_list", ".", "append", "(", "mmcv", ".", "load", "(", "part_file", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "# remove tmp dir", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "return", "ordered_results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis.parse_args": [[109, 150], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MMDet test detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "# parser.add_argument('checkpoint', help='checkpoint file')", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--json_out'", ",", "\n", "help", "=", "'output result file name without extension'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'proposal'", ",", "'proposal_fast'", ",", "'proposal_fast_percat'", ",", "'bbox'", ",", "'segm'", ",", "'keypoints'", "]", ",", "\n", "help", "=", "'eval types'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "'--existing_json'", ",", "type", "=", "str", ",", "help", "=", "'existing_json'", ")", "\n", "parser", ".", "add_argument", "(", "'--tmpdir'", ",", "help", "=", "'tmp dir for writing some results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--cal_head'", ",", "\n", "default", "=", "'3fc_ft'", ",", "\n", "help", "=", "'calibrated head for evaluation'", ",", "\n", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--head_ckpt'", ",", "\n", "default", "=", "'3fc_ft'", ",", "\n", "help", "=", "'checkpoint name of calibrated head'", ",", "\n", "type", "=", "str", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis.main": [[152, 275], ["test_lvis.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "mmdet.models.build_detector", "mmcv.Config.fromfile.get", "print", "mmcv.runner.load_checkpoint", "print", "test_lvis.main.load_ckpt"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.twangnh_SimCal.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_detector", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "out", "or", "args", ".", "show", "or", "args", ".", "json_out", ",", "(", "'Please specify at least one operation (save or show the results) '", "\n", "'with the argument \"--out\" or \"--show\" or \"--json_out\"'", ")", "\n", "\n", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "if", "args", ".", "json_out", "is", "not", "None", "and", "args", ".", "json_out", ".", "endswith", "(", "'.json'", ")", ":", "\n", "        ", "args", ".", "json_out", "=", "args", ".", "json_out", "[", ":", "-", "5", "]", "\n", "\n", "", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "# cfg.data.test.test_mode = False", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# build the dataloader", "\n", "# TODO: support multiple images per gpu (only minor changes are needed)", "\n", "", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "## uncomment to only eval on first 100 imgs", "\n", "dataset", ".", "img_infos", "=", "dataset", ".", "img_infos", "[", ":", "20", "]", "\n", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "imgs_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "model", "=", "build_detector", "(", "cfg", ".", "model", ",", "train_cfg", "=", "cfg", ".", "train_cfg", ",", "test_cfg", "=", "cfg", ".", "test_cfg", ")", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "wrap_fp16_model", "(", "model", ")", "\n", "", "print", "(", "'load model from {}'", ".", "format", "(", "cfg", ".", "load_from", ")", ")", "\n", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "cfg", ".", "load_from", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "# old versions did not save class info in checkpoints, this walkaround is", "\n", "# for backward compatibility", "\n", "if", "'CLASSES'", "in", "checkpoint", "[", "'meta'", "]", ":", "\n", "        ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "        ", "model", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "\n", "\n", "", "def", "load_ckpt", "(", "ncm_model", ",", "cal_head", ")", ":", "\n", "        ", "print", "(", "'load cls head {}'", ".", "format", "(", "'{}/{}.pth'", ".", "format", "(", "cfg", ".", "work_dir", ",", "cal_head", ")", ")", ")", "\n", "# epoch = torch.load('{}/{}_epoch.pth'.format(cfg.work_dir, cal_head))", "\n", "load_checkpoint", "(", "ncm_model", ",", "'{}/{}.pth'", ".", "format", "(", "cfg", ".", "work_dir", ",", "cal_head", ")", ")", "\n", "# return epoch", "\n", "\n", "", "print", "(", "'use {}'", ".", "format", "(", "args", ".", "cal_head", ")", ")", "\n", "if", "len", "(", "dataset", ".", "CLASSES", ")", "==", "1230", ":", "##lvis", "\n", "        ", "if", "'2fc_rand'", "in", "args", ".", "cal_head", ":", "\n", "            ", "calibrated_head", "=", "simple2fc", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "'3fc_rand'", "in", "args", ".", "cal_head", "or", "'3fc_ft'", "in", "args", ".", "cal_head", ":", "\n", "            ", "calibrated_head", "=", "simple3fc", "(", ")", ".", "cuda", "(", ")", "\n", "", "", "elif", "len", "(", "dataset", ".", "CLASSES", ")", "==", "80", ":", "## coco", "\n", "        ", "if", "'2fc_rand'", "in", "args", ".", "cal_head", ":", "\n", "            ", "calibrated_head", "=", "simple2fc", "(", "num_classes", "=", "81", ")", ".", "cuda", "(", ")", "\n", "", "elif", "'3fc_rand'", "in", "args", ".", "cal_head", "or", "'3fc_ft'", "in", "args", ".", "cal_head", ":", "\n", "            ", "calibrated_head", "=", "simple3fc", "(", "num_classes", "=", "81", ")", ".", "cuda", "(", ")", "\n", "# epoch = load_ckpt(calibrated_head, args.head_ckpt)", "\n", "", "", "load_ckpt", "(", "calibrated_head", ",", "args", ".", "head_ckpt", ")", "\n", "calibrated_head", ".", "eval", "(", ")", "\n", "\n", "\n", "if", "not", "distributed", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ",", "calibrated_head", ",", "args", ".", "show", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDistributedDataParallel", "(", "model", ".", "cuda", "(", ")", ")", "\n", "calibrated_head", "=", "MMDistributedDataParallel", "(", "calibrated_head", ".", "cuda", "(", ")", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "calibrated_head", ",", "args", ".", "show", ",", "args", ".", "tmpdir", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "args", ".", "out", "and", "rank", "==", "0", ":", "\n", "        ", "print", "(", "'\\nwriting results to {}'", ".", "format", "(", "args", ".", "out", ")", ")", "\n", "# mmcv.dump(outputs, args.out)", "\n", "eval_types", "=", "args", ".", "eval", "\n", "if", "len", "(", "dataset", ".", "CLASSES", ")", "==", "1230", ":", "\n", "            ", "if", "eval_types", ":", "\n", "\n", "                ", "if", "eval_types", "==", "[", "'proposal_fast'", "]", ":", "\n", "                    ", "result_file", "=", "args", ".", "out", "\n", "lvis_eval", "(", "result_file", ",", "eval_types", ",", "dataset", ".", "coco", ")", "\n", "", "else", ":", "\n", "                    ", "if", "not", "isinstance", "(", "outputs", "[", "0", "]", ",", "dict", ")", ":", "\n", "                        ", "result_files", "=", "results2json", "(", "dataset", ",", "outputs", ",", "args", ".", "out", ",", "dump", "=", "False", ")", "\n", "print", "(", "'Starting evaluate {}'", ".", "format", "(", "' and '", ".", "join", "(", "eval_types", ")", ")", ")", "\n", "lvis_eval", "(", "result_files", ",", "eval_types", ",", "dataset", ".", "lvis", ")", "\n", "", "else", ":", "\n", "                        ", "for", "name", "in", "outputs", "[", "0", "]", ":", "\n", "                            ", "print", "(", "'\\nEvaluating {}'", ".", "format", "(", "name", ")", ")", "\n", "outputs_", "=", "[", "out", "[", "name", "]", "for", "out", "in", "outputs", "]", "\n", "result_file", "=", "args", ".", "out", "+", "'.{}'", ".", "format", "(", "name", ")", "\n", "result_files", "=", "results2json", "(", "dataset", ",", "outputs_", ",", "\n", "result_file", ")", "\n", "lvis_eval", "(", "result_files", ",", "eval_types", ",", "dataset", ".", "coco", ")", "\n", "", "", "", "", "", "elif", "len", "(", "dataset", ".", "CLASSES", ")", "==", "80", ":", "\n", "            ", "result_files", "=", "results2json", "(", "dataset", ",", "outputs", ",", "args", ".", "out", ",", "dump", "=", "False", ")", "\n", "coco_eval", "(", "result_files", ",", "args", ".", "eval", ",", "dataset", ".", "coco", ")", "\n", "\n", "# Save predictions in the COCO json format", "\n", "", "", "if", "args", ".", "json_out", "and", "rank", "==", "0", ":", "\n", "        ", "if", "not", "isinstance", "(", "outputs", "[", "0", "]", ",", "dict", ")", ":", "\n", "            ", "results2json", "(", "dataset", ",", "outputs", ",", "args", ".", "json_out", ")", "\n", "", "else", ":", "\n", "            ", "for", "name", "in", "outputs", "[", "0", "]", ":", "\n", "                ", "outputs_", "=", "[", "out", "[", "name", "]", "for", "out", "in", "outputs", "]", "\n", "result_file", "=", "args", ".", "json_out", "+", "'.{}'", ".", "format", "(", "name", ")", "\n", "results2json", "(", "dataset", ",", "outputs_", ",", "result_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.upgrade_model_version.convert": [[8, 31], ["torch.load", "torch.load.pop", "collections.OrderedDict", "checkpoint.pop.items", "torch.save", "re.search", "key.replace", "re.search.groups"], "function", ["None"], ["def", "convert", "(", "in_file", ",", "out_file", ")", ":", "\n", "    ", "\"\"\"Convert keys in checkpoints.\n\n    There can be some breaking changes during the development of mmdetection,\n    and this tool is used for upgrading checkpoints trained with old versions\n    to the latest one.\n    \"\"\"", "\n", "checkpoint", "=", "torch", ".", "load", "(", "in_file", ")", "\n", "in_state_dict", "=", "checkpoint", ".", "pop", "(", "'state_dict'", ")", "\n", "out_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "val", "in", "in_state_dict", ".", "items", "(", ")", ":", "\n", "# Use ConvModule instead of nn.Conv2d in RetinaNet", "\n", "# cls_convs.0.weight -> cls_convs.0.conv.weight", "\n", "        ", "m", "=", "re", ".", "search", "(", "r'(cls_convs|reg_convs).\\d.(weight|bias)'", ",", "key", ")", "\n", "if", "m", "is", "not", "None", ":", "\n", "            ", "param", "=", "m", ".", "groups", "(", ")", "[", "1", "]", "\n", "new_key", "=", "key", ".", "replace", "(", "param", ",", "'conv.{}'", ".", "format", "(", "param", ")", ")", "\n", "out_state_dict", "[", "new_key", "]", "=", "val", "\n", "continue", "\n", "\n", "", "out_state_dict", "[", "key", "]", "=", "val", "\n", "", "checkpoint", "[", "'state_dict'", "]", "=", "out_state_dict", "\n", "torch", ".", "save", "(", "checkpoint", ",", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.upgrade_model_version.main": [[33, 39], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "upgrade_model_version.convert"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.upgrade_model_version.convert"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Upgrade model version'", ")", "\n", "parser", ".", "add_argument", "(", "'in_file'", ",", "help", "=", "'input checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "'out_file'", ",", "help", "=", "'output checkpoint file'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "convert", "(", "args", ".", "in_file", ",", "args", ".", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_robustness.coco_eval_with_return": [[25, 73], ["mmcv.is_str", "isinstance", "pycocotools.coco.COCO", "mmdet.core.fast_eval_recall", "enumerate", "result_file.endswith", "pycocotools.coco.COCO.loadRes", "pycocotools.coco.COCO.getImgIds", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "pycocotools.cocoeval.COCOeval.summarize", "numpy.array", "print", "list", "range", "len"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.coco_utils.fast_eval_recall", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.evaluate", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.accumulate", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.summarize"], ["def", "coco_eval_with_return", "(", "result_files", ",", "\n", "result_types", ",", "\n", "coco", ",", "\n", "max_dets", "=", "(", "100", ",", "300", ",", "1000", ")", ")", ":", "\n", "    ", "for", "res_type", "in", "result_types", ":", "\n", "        ", "assert", "res_type", "in", "[", "\n", "'proposal'", ",", "'proposal_fast'", ",", "'bbox'", ",", "'segm'", ",", "'keypoints'", "\n", "]", "\n", "\n", "", "if", "mmcv", ".", "is_str", "(", "coco", ")", ":", "\n", "        ", "coco", "=", "COCO", "(", "coco", ")", "\n", "", "assert", "isinstance", "(", "coco", ",", "COCO", ")", "\n", "\n", "if", "result_types", "==", "[", "'proposal_fast'", "]", ":", "\n", "        ", "ar", "=", "fast_eval_recall", "(", "result_files", ",", "coco", ",", "np", ".", "array", "(", "max_dets", ")", ")", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "max_dets", ")", ":", "\n", "            ", "print", "(", "'AR@{}\\t= {:.4f}'", ".", "format", "(", "num", ",", "ar", "[", "i", "]", ")", ")", "\n", "", "return", "\n", "\n", "", "eval_results", "=", "{", "}", "\n", "for", "res_type", "in", "result_types", ":", "\n", "        ", "result_file", "=", "result_files", "[", "res_type", "]", "\n", "assert", "result_file", ".", "endswith", "(", "'.json'", ")", "\n", "\n", "coco_dets", "=", "coco", ".", "loadRes", "(", "result_file", ")", "\n", "img_ids", "=", "coco", ".", "getImgIds", "(", ")", "\n", "iou_type", "=", "'bbox'", "if", "res_type", "==", "'proposal'", "else", "res_type", "\n", "cocoEval", "=", "COCOeval", "(", "coco", ",", "coco_dets", ",", "iou_type", ")", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "img_ids", "\n", "if", "res_type", "==", "'proposal'", ":", "\n", "            ", "cocoEval", ".", "params", ".", "useCats", "=", "0", "\n", "cocoEval", ".", "params", ".", "maxDets", "=", "list", "(", "max_dets", ")", "\n", "", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "cocoEval", ".", "summarize", "(", ")", "\n", "if", "res_type", "==", "'segm'", "or", "res_type", "==", "'bbox'", ":", "\n", "            ", "metric_names", "=", "[", "\n", "'AP'", ",", "'AP50'", ",", "'AP75'", ",", "'APs'", ",", "'APm'", ",", "'APl'", ",", "'AR1'", ",", "'AR10'", ",", "\n", "'AR100'", ",", "'ARs'", ",", "'ARm'", ",", "'ARl'", "\n", "]", "\n", "eval_results", "[", "res_type", "]", "=", "{", "\n", "metric_names", "[", "i", "]", ":", "cocoEval", ".", "stats", "[", "i", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "metric_names", ")", ")", "\n", "}", "\n", "", "else", ":", "\n", "            ", "eval_results", "[", "res_type", "]", "=", "cocoEval", ".", "stats", "\n", "\n", "", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_robustness.voc_eval_with_return": [[75, 120], ["mmcv.load", "range", "mmdet.core.eval_map", "len", "dataset.get_ann_info", "gt_bboxes.append", "gt_labels.append", "hasattr", "numpy.concatenate", "gt_ignore.append", "numpy.vstack", "numpy.concatenate", "range", "numpy.zeros", "numpy.ones", "len"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.mean_ap.eval_map", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.lvis.LvisDataset.get_ann_info"], ["", "def", "voc_eval_with_return", "(", "result_file", ",", "\n", "dataset", ",", "\n", "iou_thr", "=", "0.5", ",", "\n", "print_summary", "=", "True", ",", "\n", "only_ap", "=", "True", ")", ":", "\n", "    ", "det_results", "=", "mmcv", ".", "load", "(", "result_file", ")", "\n", "gt_bboxes", "=", "[", "]", "\n", "gt_labels", "=", "[", "]", "\n", "gt_ignore", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "ann", "=", "dataset", ".", "get_ann_info", "(", "i", ")", "\n", "bboxes", "=", "ann", "[", "'bboxes'", "]", "\n", "labels", "=", "ann", "[", "'labels'", "]", "\n", "if", "'bboxes_ignore'", "in", "ann", ":", "\n", "            ", "ignore", "=", "np", ".", "concatenate", "(", "[", "\n", "np", ".", "zeros", "(", "bboxes", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", ",", "\n", "np", ".", "ones", "(", "ann", "[", "'bboxes_ignore'", "]", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "]", ")", "\n", "gt_ignore", ".", "append", "(", "ignore", ")", "\n", "bboxes", "=", "np", ".", "vstack", "(", "[", "bboxes", ",", "ann", "[", "'bboxes_ignore'", "]", "]", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "[", "labels", ",", "ann", "[", "'labels_ignore'", "]", "]", ")", "\n", "", "gt_bboxes", ".", "append", "(", "bboxes", ")", "\n", "gt_labels", ".", "append", "(", "labels", ")", "\n", "", "if", "not", "gt_ignore", ":", "\n", "        ", "gt_ignore", "=", "gt_ignore", "\n", "", "if", "hasattr", "(", "dataset", ",", "'year'", ")", "and", "dataset", ".", "year", "==", "2007", ":", "\n", "        ", "dataset_name", "=", "'voc07'", "\n", "", "else", ":", "\n", "        ", "dataset_name", "=", "dataset", ".", "CLASSES", "\n", "", "mean_ap", ",", "eval_results", "=", "eval_map", "(", "\n", "det_results", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_ignore", "=", "gt_ignore", ",", "\n", "scale_ranges", "=", "None", ",", "\n", "iou_thr", "=", "iou_thr", ",", "\n", "dataset", "=", "dataset_name", ",", "\n", "print_summary", "=", "print_summary", ")", "\n", "\n", "if", "only_ap", ":", "\n", "        ", "eval_results", "=", "[", "{", "\n", "'ap'", ":", "eval_results", "[", "i", "]", "[", "'ap'", "]", "\n", "}", "for", "i", "in", "range", "(", "len", "(", "eval_results", ")", ")", "]", "\n", "\n", "", "return", "mean_ap", ",", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_robustness.single_gpu_test": [[122, 139], ["model.eval", "mmcv.ProgressBar", "enumerate", "len", "results.append", "[].size", "range", "torch.no_grad", "torch.no_grad", "model", "model.module.show_result", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.show_result"], ["", "def", "single_gpu_test", "(", "model", ",", "data_loader", ",", "show", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "not", "show", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "show", ":", "\n", "            ", "model", ".", "module", ".", "show_result", "(", "data", ",", "result", ",", "dataset", ".", "img_norm_cfg", ")", "\n", "\n", "", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_robustness.multi_gpu_test": [[141, 162], ["model.eval", "mmcv.runner.get_dist_info", "enumerate", "test_robustness.collect_results", "mmcv.ProgressBar", "collect_results.append", "len", "len", "torch.no_grad", "torch.no_grad", "model", "[].size", "range", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.collect_results"], ["", "def", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", "*", "world_size", ")", ":", "\n", "                ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "# collect results from all ranks", "\n", "", "", "", "results", "=", "collect_results", "(", "results", ",", "len", "(", "dataset", ")", ",", "tmpdir", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_robustness.collect_results": [[164, 204], ["mmcv.runner.get_dist_info", "mmcv.dump", "torch.barrier", "torch.full", "torch.full", "torch.broadcast", "torch.full.cpu().numpy().tobytes().decode().rstrip", "mmcv.mkdir_or_exist", "os.join", "range", "zip", "shutil.rmtree", "tempfile.mkdtemp", "torch.tensor", "torch.tensor", "os.join", "part_list.append", "ordered_results.extend", "bytearray", "torch.full.cpu().numpy().tobytes().decode", "mmcv.load", "list", "torch.tensor.encode", "len", "torch.full.cpu().numpy().tobytes", "torch.full.cpu().numpy", "torch.full.cpu"], "function", ["None"], ["", "def", "collect_results", "(", "result_part", ",", "size", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# create a tmp dir if it is not specified", "\n", "if", "tmpdir", "is", "None", ":", "\n", "        ", "MAX_LEN", "=", "512", "\n", "# 32 is whitespace", "\n", "dir_tensor", "=", "torch", ".", "full", "(", "(", "MAX_LEN", ",", ")", ",", "\n", "32", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "'cuda'", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "tmpdir", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "tmpdir", ".", "encode", "(", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "dir_tensor", "[", ":", "len", "(", "tmpdir", ")", "]", "=", "tmpdir", "\n", "", "dist", ".", "broadcast", "(", "dir_tensor", ",", "0", ")", "\n", "tmpdir", "=", "dir_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "", "else", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "tmpdir", ")", "\n", "# dump the part result to the dir", "\n", "", "mmcv", ".", "dump", "(", "result_part", ",", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "rank", ")", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "# collect all parts", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "# load results of all parts from tmp dir", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "            ", "part_file", "=", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "part_list", ".", "append", "(", "mmcv", ".", "load", "(", "part_file", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "# remove tmp dir", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "return", "ordered_results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_robustness.parse_args": [[206, 275], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MMDet test detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--corruptions'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "'benchmark'", ",", "\n", "choices", "=", "[", "\n", "'all'", ",", "'benchmark'", ",", "'noise'", ",", "'blur'", ",", "'weather'", ",", "'digital'", ",", "\n", "'holdout'", ",", "'None'", ",", "'gaussian_noise'", ",", "'shot_noise'", ",", "'impulse_noise'", ",", "\n", "'defocus_blur'", ",", "'glass_blur'", ",", "'motion_blur'", ",", "'zoom_blur'", ",", "'snow'", ",", "\n", "'frost'", ",", "'fog'", ",", "'brightness'", ",", "'contrast'", ",", "'elastic_transform'", ",", "\n", "'pixelate'", ",", "'jpeg_compression'", ",", "'speckle_noise'", ",", "'gaussian_blur'", ",", "\n", "'spatter'", ",", "'saturate'", "\n", "]", ",", "\n", "help", "=", "'corruptions'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--severities'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ",", "\n", "help", "=", "'corruption severity levels'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'proposal'", ",", "'proposal_fast'", ",", "'bbox'", ",", "'segm'", ",", "'keypoints'", "]", ",", "\n", "help", "=", "'eval types'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--iou-thr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.5", ",", "\n", "help", "=", "'IoU threshold for pascal voc evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--summaries'", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'Print summaries for every corruption and severity'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'workers per gpu'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "'--tmpdir'", ",", "help", "=", "'tmp dir for writing some results'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--final-prints'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'P'", ",", "'mPC'", ",", "'rPC'", "]", ",", "\n", "default", "=", "'mPC'", ",", "\n", "help", "=", "'corruption benchmark metric to print at the end'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--final-prints-aggregate'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "'all'", ",", "'benchmark'", "]", ",", "\n", "default", "=", "'benchmark'", ",", "\n", "help", "=", "'aggregate all results or only those for benchmark corruptions'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_robustness.main": [[277, 466], ["test_robustness.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "enumerate", "print", "ValueError", "mmdet.apis.init_dist", "mmdet.apis.set_random_seed", "enumerate", "robustness_eval.get_results", "robustness_eval.get_results", "parse_args.out.endswith", "print", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "mmdet.models.build_detector", "mmcv.Config.fromfile.get", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "mmcv.dump", "mmdet.core.wrap_fp16_model", "mmcv.parallel.MMDataParallel", "test_robustness.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "test_robustness.multi_gpu_test", "mmcv.dump", "mmcv.parallel.MMDistributedDataParallel.cuda", "os.splitext", "print", "test_robustness.coco_eval_with_return", "print", "os.splitext", "mmcv.runner.obj_from_dict", "test_robustness.voc_eval_with_return", "print", "isinstance", "mmdet.core.results2json", "print", "mmdet.core.results2json"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.env.init_dist", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.env.set_random_seed", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.get_results", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.get_results", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.twangnh_SimCal.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_detector", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.fp16.hooks.wrap_fp16_model", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.single_gpu_test", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.multi_gpu_test", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_robustness.coco_eval_with_return", "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_robustness.voc_eval_with_return", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.results2json", "home.repos.pwc.inspect_result.twangnh_SimCal.evaluation.lvis_utils.results2json"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "out", "or", "args", ".", "show", ",", "(", "'Please specify at least one operation (save or show the results) '", "\n", "'with the argument \"--out\" or \"--show\"'", ")", "\n", "\n", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "if", "args", ".", "workers", "==", "0", ":", "\n", "        ", "args", ".", "workers", "=", "cfg", ".", "data", ".", "workers_per_gpu", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# set random seeds", "\n", "", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "if", "'all'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "\n", "'gaussian_noise'", ",", "'shot_noise'", ",", "'impulse_noise'", ",", "'defocus_blur'", ",", "\n", "'glass_blur'", ",", "'motion_blur'", ",", "'zoom_blur'", ",", "'snow'", ",", "'frost'", ",", "'fog'", ",", "\n", "'brightness'", ",", "'contrast'", ",", "'elastic_transform'", ",", "'pixelate'", ",", "\n", "'jpeg_compression'", ",", "'speckle_noise'", ",", "'gaussian_blur'", ",", "'spatter'", ",", "\n", "'saturate'", "\n", "]", "\n", "", "elif", "'benchmark'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "\n", "'gaussian_noise'", ",", "'shot_noise'", ",", "'impulse_noise'", ",", "'defocus_blur'", ",", "\n", "'glass_blur'", ",", "'motion_blur'", ",", "'zoom_blur'", ",", "'snow'", ",", "'frost'", ",", "'fog'", ",", "\n", "'brightness'", ",", "'contrast'", ",", "'elastic_transform'", ",", "'pixelate'", ",", "\n", "'jpeg_compression'", "\n", "]", "\n", "", "elif", "'noise'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "'gaussian_noise'", ",", "'shot_noise'", ",", "'impulse_noise'", "]", "\n", "", "elif", "'blur'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "\n", "'defocus_blur'", ",", "'glass_blur'", ",", "'motion_blur'", ",", "'zoom_blur'", "\n", "]", "\n", "", "elif", "'weather'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "'snow'", ",", "'frost'", ",", "'fog'", ",", "'brightness'", "]", "\n", "", "elif", "'digital'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "\n", "'contrast'", ",", "'elastic_transform'", ",", "'pixelate'", ",", "'jpeg_compression'", "\n", "]", "\n", "", "elif", "'holdout'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "'speckle_noise'", ",", "'gaussian_blur'", ",", "'spatter'", ",", "'saturate'", "]", "\n", "", "elif", "'None'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "'None'", "]", "\n", "args", ".", "severities", "=", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "corruptions", "=", "args", ".", "corruptions", "\n", "\n", "", "aggregated_results", "=", "{", "}", "\n", "for", "corr_i", ",", "corruption", "in", "enumerate", "(", "corruptions", ")", ":", "\n", "        ", "aggregated_results", "[", "corruption", "]", "=", "{", "}", "\n", "for", "sev_i", ",", "corruption_severity", "in", "enumerate", "(", "args", ".", "severities", ")", ":", "\n", "# evaluate severity 0 (= no corruption) only once", "\n", "            ", "if", "corr_i", ">", "0", "and", "corruption_severity", "==", "0", ":", "\n", "                ", "aggregated_results", "[", "corruption", "]", "[", "0", "]", "=", "aggregated_results", "[", "corruptions", "[", "0", "]", "]", "[", "0", "]", "\n", "continue", "\n", "\n", "# assign corruption and severity", "\n", "", "if", "corruption_severity", "==", "0", ":", "\n", "# evaluate without corruptions for severity = 0", "\n", "                ", "cfg", ".", "data", ".", "test", "[", "'corruption'", "]", "=", "None", "\n", "cfg", ".", "data", ".", "test", "[", "'corruption_severity'", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "cfg", ".", "data", ".", "test", "[", "'corruption'", "]", "=", "corruption", "\n", "cfg", ".", "data", ".", "test", "[", "'corruption_severity'", "]", "=", "corruption_severity", "\n", "\n", "# print info", "\n", "", "print", "(", "'\\nTesting {} at severity {}'", ".", "format", "(", "corruption", ",", "\n", "corruption_severity", ")", ")", "\n", "\n", "# build the dataloader", "\n", "# TODO: support multiple images per gpu", "\n", "#       (only minor changes are needed)", "\n", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "imgs_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "args", ".", "workers", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "model", "=", "build_detector", "(", "\n", "cfg", ".", "model", ",", "train_cfg", "=", "None", ",", "test_cfg", "=", "cfg", ".", "test_cfg", ")", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "                ", "wrap_fp16_model", "(", "model", ")", "\n", "", "checkpoint", "=", "load_checkpoint", "(", "\n", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "# old versions did not save class info in checkpoints,", "\n", "# this walkaround is for backward compatibility", "\n", "if", "'CLASSES'", "in", "checkpoint", "[", "'meta'", "]", ":", "\n", "                ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "                ", "model", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "                ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "show", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "MMDistributedDataParallel", "(", "model", ".", "cuda", "(", ")", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "tmpdir", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "args", ".", "out", "and", "rank", "==", "0", ":", "\n", "                ", "eval_results_filename", "=", "(", "\n", "osp", ".", "splitext", "(", "args", ".", "out", ")", "[", "0", "]", "+", "'_results'", "+", "\n", "osp", ".", "splitext", "(", "args", ".", "out", ")", "[", "1", "]", ")", "\n", "mmcv", ".", "dump", "(", "outputs", ",", "args", ".", "out", ")", "\n", "eval_types", "=", "args", ".", "eval", "\n", "if", "cfg", ".", "dataset_type", "==", "'VOCDataset'", ":", "\n", "                    ", "if", "eval_types", ":", "\n", "                        ", "for", "eval_type", "in", "eval_types", ":", "\n", "                            ", "if", "eval_type", "==", "'bbox'", ":", "\n", "                                ", "test_dataset", "=", "mmcv", ".", "runner", ".", "obj_from_dict", "(", "\n", "cfg", ".", "data", ".", "test", ",", "datasets", ")", "\n", "mean_ap", ",", "eval_results", "=", "voc_eval_with_return", "(", "\n", "args", ".", "out", ",", "test_dataset", ",", "\n", "args", ".", "iou_thr", ",", "args", ".", "summaries", ")", "\n", "aggregated_results", "[", "corruption", "]", "[", "\n", "corruption_severity", "]", "=", "eval_results", "\n", "", "else", ":", "\n", "                                ", "print", "(", "'\\nOnly \"bbox\" evaluation \\\n                                is supported for pascal voc'", ")", "\n", "", "", "", "", "else", ":", "\n", "                    ", "if", "eval_types", ":", "\n", "                        ", "print", "(", "'Starting evaluate {}'", ".", "format", "(", "\n", "' and '", ".", "join", "(", "eval_types", ")", ")", ")", "\n", "if", "eval_types", "==", "[", "'proposal_fast'", "]", ":", "\n", "                            ", "result_file", "=", "args", ".", "out", "\n", "", "else", ":", "\n", "                            ", "if", "not", "isinstance", "(", "outputs", "[", "0", "]", ",", "dict", ")", ":", "\n", "                                ", "result_files", "=", "results2json", "(", "\n", "dataset", ",", "outputs", ",", "args", ".", "out", ")", "\n", "", "else", ":", "\n", "                                ", "for", "name", "in", "outputs", "[", "0", "]", ":", "\n", "                                    ", "print", "(", "'\\nEvaluating {}'", ".", "format", "(", "name", ")", ")", "\n", "outputs_", "=", "[", "out", "[", "name", "]", "for", "out", "in", "outputs", "]", "\n", "result_file", "=", "args", ".", "out", "\n", "+", "'.{}'", ".", "format", "(", "name", ")", "\n", "result_files", "=", "results2json", "(", "\n", "dataset", ",", "outputs_", ",", "result_file", ")", "\n", "", "", "", "eval_results", "=", "coco_eval_with_return", "(", "\n", "result_files", ",", "eval_types", ",", "dataset", ".", "coco", ")", "\n", "aggregated_results", "[", "corruption", "]", "[", "\n", "corruption_severity", "]", "=", "eval_results", "\n", "", "else", ":", "\n", "                        ", "print", "(", "'\\nNo task was selected for evaluation;'", "\n", "'\\nUse --eval to select a task'", ")", "\n", "\n", "# save results after each evaluation", "\n", "", "", "", "mmcv", ".", "dump", "(", "aggregated_results", ",", "eval_results_filename", ")", "\n", "\n", "# print filan results", "\n", "", "", "print", "(", "'\\nAggregated results:'", ")", "\n", "prints", "=", "args", ".", "final_prints", "\n", "aggregate", "=", "args", ".", "final_prints_aggregate", "\n", "\n", "if", "cfg", ".", "dataset_type", "==", "'VOCDataset'", ":", "\n", "        ", "get_results", "(", "\n", "eval_results_filename", ",", "\n", "dataset", "=", "'voc'", ",", "\n", "prints", "=", "prints", ",", "\n", "aggregate", "=", "aggregate", ")", "\n", "", "else", ":", "\n", "        ", "get_results", "(", "\n", "eval_results_filename", ",", "\n", "dataset", "=", "'coco'", ",", "\n", "prints", "=", "prints", ",", "\n", "aggregate", "=", "aggregate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.train_orig.parse_args": [[15, 47], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args"], ["\n", "\n", "def", "parse_losses", "(", "losses", ")", ":", "\n", "    ", "log_vars", "=", "OrderedDict", "(", ")", "\n", "for", "loss_name", ",", "loss_value", "in", "losses", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "loss_value", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "log_vars", "[", "loss_name", "]", "=", "loss_value", ".", "mean", "(", ")", "\n", "", "elif", "isinstance", "(", "loss_value", ",", "list", ")", ":", "\n", "            ", "log_vars", "[", "loss_name", "]", "=", "sum", "(", "_loss", ".", "mean", "(", ")", "for", "_loss", "in", "loss_value", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'{} is not a tensor or list of tensors'", ".", "format", "(", "loss_name", ")", ")", "\n", "\n", "", "", "loss", "=", "sum", "(", "_value", "for", "_key", ",", "_value", "in", "log_vars", ".", "items", "(", ")", "if", "'loss'", "in", "_key", ")", "\n", "\n", "log_vars", "[", "'loss'", "]", "=", "loss", "\n", "for", "name", "in", "log_vars", ":", "\n", "        ", "log_vars", "[", "name", "]", "=", "log_vars", "[", "name", "]", ".", "item", "(", ")", "\n", "\n", "", "return", "loss", ",", "log_vars", "\n", "\n", "\n", "", "def", "batch_processor", "(", "model", ",", "data", ",", "train_mode", ")", ":", "\n", "    ", "losses", "=", "model", "(", "**", "data", ")", "\n", "loss", ",", "log_vars", "=", "parse_losses", "(", "losses", ")", "\n", "\n", "outputs", "=", "dict", "(", "\n", "loss", "=", "loss", ",", "log_vars", "=", "log_vars", ",", "num_samples", "=", "len", "(", "data", "[", "'img'", "]", ".", "data", ")", ")", "\n", "\n", "return", "outputs", "\n", "\n", "\n", "", "def", "train_detector", "(", "model", ",", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.train_orig.main": [[49, 107], ["train_orig.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "mmdet.apis.get_root_logger", "mmdet.apis.get_root_logger.info", "mmdet.models.build_detector", "mmdet.apis.train_detector", "mmdet.apis.init_dist", "mmdet.apis.get_root_logger.info", "mmdet.apis.set_random_seed", "mmdet.datasets.build_dataset", "dict"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.env.get_root_logger", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_detector", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.train_orig.train_detector", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.env.init_dist", "home.repos.pwc.inspect_result.twangnh_SimCal.apis.env.set_random_seed", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.builder.build_dataset"], ["cfg", ",", "\n", "distributed", "=", "False", ",", "\n", "validate", "=", "False", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "if", "logger", "is", "None", ":", "\n", "        ", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "\n", "# start training", "\n", "", "if", "distributed", ":", "\n", "        ", "_dist_train", "(", "model", ",", "dataset", ",", "cfg", ",", "validate", "=", "validate", ")", "\n", "", "else", ":", "\n", "        ", "_non_dist_train", "(", "model", ",", "dataset", ",", "cfg", ",", "validate", "=", "validate", ")", "\n", "\n", "\n", "", "", "def", "build_optimizer", "(", "model", ",", "optimizer_cfg", ")", ":", "\n", "    ", "\"\"\"Build optimizer from configs.\n\n    Args:\n        model (:obj:`nn.Module`): The model with parameters to be optimized.\n        optimizer_cfg (dict): The config dict of the optimizer.\n            Positional fields are:\n                - type: class name of the optimizer.\n                - lr: base learning rate.\n            Optional fields are:\n                - any arguments of the corresponding optimizer type, e.g.,\n                  weight_decay, momentum, etc.\n                - paramwise_options: a dict with 3 accepted fileds\n                  (bias_lr_mult, bias_decay_mult, norm_decay_mult).\n                  `bias_lr_mult` and `bias_decay_mult` will be multiplied to\n                  the lr and weight decay respectively for all bias parameters\n                  (except for the normalization layers), and\n                  `norm_decay_mult` will be multiplied to the weight decay\n                  for all weight and bias parameters of normalization layers.\n\n    Returns:\n        torch.optim.Optimizer: The initialized optimizer.\n    \"\"\"", "\n", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "optimizer_cfg", "=", "optimizer_cfg", ".", "copy", "(", ")", "\n", "paramwise_options", "=", "optimizer_cfg", ".", "pop", "(", "'paramwise_options'", ",", "None", ")", "\n", "# if no paramwise option is specified, just use the global setting", "\n", "if", "paramwise_options", "is", "None", ":", "\n", "        ", "return", "obj_from_dict", "(", "optimizer_cfg", ",", "torch", ".", "optim", ",", "\n", "dict", "(", "params", "=", "model", ".", "parameters", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "paramwise_options", ",", "dict", ")", "\n", "# get base lr and weight decay", "\n", "base_lr", "=", "optimizer_cfg", "[", "'lr'", "]", "\n", "base_wd", "=", "optimizer_cfg", ".", "get", "(", "'weight_decay'", ",", "None", ")", "\n", "# weight_decay must be explicitly specified if mult is specified", "\n", "if", "(", "'bias_decay_mult'", "in", "paramwise_options", "\n", "or", "'norm_decay_mult'", "in", "paramwise_options", ")", ":", "\n", "            ", "assert", "base_wd", "is", "not", "None", "\n", "# get param-wise options", "\n", "", "bias_lr_mult", "=", "paramwise_options", ".", "get", "(", "'bias_lr_mult'", ",", "1.", ")", "\n", "bias_decay_mult", "=", "paramwise_options", ".", "get", "(", "'bias_decay_mult'", ",", "1.", ")", "\n", "norm_decay_mult", "=", "paramwise_options", ".", "get", "(", "'norm_decay_mult'", ",", "1.", ")", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.single_gpu_test": [[23, 42], ["model.eval", "mmcv.ProgressBar", "enumerate", "len", "results.append", "[].size", "range", "torch.no_grad", "torch.no_grad", "model", "model.module.show_result", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.detectors.cascade_rcnn.CascadeRCNN.show_result"], ["def", "single_gpu_test", "(", "model", ",", "data_loader", ",", "cal_head", ",", "dataset_for_support", ",", "show", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "not", "show", ",", "dataset_for_support", "=", "dataset_for_support", ",", "\n", "dataset_val", "=", "data_loader", ".", "dataset", ",", "cal_head", "=", "cal_head", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "show", ":", "\n", "            ", "model", ".", "module", ".", "show_result", "(", "data", ",", "result", ",", "dataset", ".", "img_norm_cfg", ")", "\n", "\n", "# batch_size = data['img'].data[0].size(0)", "\n", "", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.multi_gpu_test": [[44, 65], ["model.eval", "mmcv.runner.get_dist_info", "enumerate", "test_lvis_split_parallel.collect_results", "mmcv.ProgressBar", "collect_results.append", "len", "len", "torch.no_grad", "torch.no_grad", "model", "[].size", "range", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.collect_results"], ["", "def", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", "*", "world_size", ")", ":", "\n", "                ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "# collect results from all ranks", "\n", "", "", "", "results", "=", "collect_results", "(", "results", ",", "len", "(", "dataset", ")", ",", "tmpdir", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.collect_results": [[67, 107], ["mmcv.runner.get_dist_info", "mmcv.dump", "torch.barrier", "torch.full", "torch.full", "torch.broadcast", "torch.full.cpu().numpy().tobytes().decode().rstrip", "mmcv.mkdir_or_exist", "os.join", "range", "zip", "shutil.rmtree", "tempfile.mkdtemp", "torch.tensor", "torch.tensor", "os.join", "part_list.append", "ordered_results.extend", "bytearray", "torch.full.cpu().numpy().tobytes().decode", "mmcv.load", "list", "torch.tensor.encode", "len", "torch.full.cpu().numpy().tobytes", "torch.full.cpu().numpy", "torch.full.cpu"], "function", ["None"], ["", "def", "collect_results", "(", "result_part", ",", "size", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# create a tmp dir if it is not specified", "\n", "if", "tmpdir", "is", "None", ":", "\n", "        ", "MAX_LEN", "=", "512", "\n", "# 32 is whitespace", "\n", "dir_tensor", "=", "torch", ".", "full", "(", "(", "MAX_LEN", ",", ")", ",", "\n", "32", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "'cuda'", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "tmpdir", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "tmpdir", ".", "encode", "(", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "dir_tensor", "[", ":", "len", "(", "tmpdir", ")", "]", "=", "tmpdir", "\n", "", "dist", ".", "broadcast", "(", "dir_tensor", ",", "0", ")", "\n", "tmpdir", "=", "dir_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "", "else", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "tmpdir", ")", "\n", "# dump the part result to the dir", "\n", "", "mmcv", ".", "dump", "(", "result_part", ",", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "rank", ")", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "# collect all parts", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "# load results of all parts from tmp dir", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "            ", "part_file", "=", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "part_list", ".", "append", "(", "mmcv", ".", "load", "(", "part_file", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "# remove tmp dir", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "return", "ordered_results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.parse_args": [[109, 152], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MMDet test detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--json_out'", ",", "\n", "help", "=", "'output result file name without extension'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'proposal'", ",", "'proposal_fast'", ",", "'proposal_fast_percat'", ",", "'bbox'", ",", "'segm'", ",", "'keypoints'", "]", ",", "\n", "help", "=", "'eval types'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "'--existing_json'", ",", "type", "=", "str", ",", "help", "=", "'existing_json'", ")", "\n", "parser", ".", "add_argument", "(", "'--tmpdir'", ",", "help", "=", "'tmp dir for writing some results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--set'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--total_set_num'", ",", "type", "=", "int", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--cal_head'", ",", "\n", "default", "=", "'3fc_ft'", ",", "\n", "help", "=", "'calibrated head for evaluation'", ",", "\n", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--head_ckpt'", ",", "\n", "help", "=", "'checkpoint name of calibrated head'", ",", "\n", "type", "=", "str", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.test_lvis_split_parallel.main": [[154, 246], ["test_lvis_split_parallel.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "mmdet.datasets.build_dataset", "int", "mmdet.datasets.build_dataloader", "mmdet.models.build_detector", "mmcv.Config.fromfile.get", "print", "mmcv.runner.load_checkpoint", "hasattr", "test_lvis_split_parallel.main.load_ckpt"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get", "home.repos.pwc.inspect_result.twangnh_SimCal.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.twangnh_SimCal.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.twangnh_SimCal.models.builder.build_detector", "home.repos.pwc.inspect_result.twangnh_SimCal.utils.registry.Registry.get"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "out", "or", "args", ".", "show", "or", "args", ".", "json_out", ",", "(", "'Please specify at least one operation (save or show the results) '", "\n", "'with the argument \"--out\" or \"--show\" or \"--json_out\"'", ")", "\n", "\n", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "if", "args", ".", "json_out", "is", "not", "None", "and", "args", ".", "json_out", ".", "endswith", "(", "'.json'", ")", ":", "\n", "        ", "args", ".", "json_out", "=", "args", ".", "json_out", "[", ":", "-", "5", "]", "\n", "\n", "", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "# cfg.data.test.test_mode = False", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# build the dataloader", "\n", "# TODO: support multiple images per gpu (only minor changes are needed)", "\n", "", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "## uncomment to only eval on first 100 imgs", "\n", "per_set_img_num", "=", "int", "(", "len", "(", "dataset", ".", "img_infos", ")", "/", "args", ".", "total_set_num", ")", "\n", "this_set_start", "=", "per_set_img_num", "*", "args", ".", "set", "\n", "## comment to perform normal test", "\n", "# dataset.img_infos = dataset.img_infos[:100]", "\n", "dataset", ".", "img_infos", "=", "dataset", ".", "img_infos", "[", "this_set_start", ":", "this_set_start", "+", "per_set_img_num", "]", "\n", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "imgs_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "model", "=", "build_detector", "(", "cfg", ".", "model", ",", "train_cfg", "=", "cfg", ".", "train_cfg", ",", "test_cfg", "=", "cfg", ".", "test_cfg", ")", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "wrap_fp16_model", "(", "model", ")", "\n", "", "print", "(", "'load model from {}'", ".", "format", "(", "cfg", ".", "load_from", ")", ")", "\n", "# checkpoint = load_checkpoint(model, args.checkpoint, map_location='cpu')", "\n", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "cfg", ".", "load_from", ",", "map_location", "=", "'cpu'", ")", "\n", "# old versions did not save class info in checkpoints, this walkaround is", "\n", "# for backward compatibility", "\n", "if", "'CLASSES'", "in", "checkpoint", "[", "'meta'", "]", ":", "\n", "        ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "        ", "model", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "\n", "\n", "## use retrained cls head", "\n", "\n", "", "if", "hasattr", "(", "dataset", ",", "'coco'", ")", ":", "\n", "        ", "if", "'2fc_rand'", "in", "args", ".", "cal_head", ":", "\n", "            ", "calibrated_head", "=", "simple2fc", "(", "num_classes", "=", "81", ")", ".", "cuda", "(", ")", "\n", "", "elif", "'3fc_rand'", "in", "args", ".", "cal_head", "or", "'3fc_ft'", "in", "args", ".", "cal_head", ":", "\n", "            ", "calibrated_head", "=", "simple3fc", "(", "num_classes", "=", "81", ")", ".", "cuda", "(", ")", "\n", "\n", "", "", "elif", "hasattr", "(", "dataset", ",", "'lvis'", ")", ":", "\n", "        ", "if", "'2fc_rand'", "in", "args", ".", "cal_head", ":", "\n", "            ", "calibrated_head", "=", "simple2fc", "(", "num_classes", "=", "1231", ")", ".", "cuda", "(", ")", "\n", "", "elif", "'3fc_rand'", "in", "args", ".", "cal_head", "or", "'3fc_ft'", "in", "args", ".", "cal_head", ":", "\n", "            ", "calibrated_head", "=", "simple3fc", "(", "num_classes", "=", "1231", ")", ".", "cuda", "(", ")", "\n", "\n", "", "", "def", "load_ckpt", "(", "ncm_model", ",", "cal_head", ")", ":", "\n", "        ", "print", "(", "'load cls head {}'", ".", "format", "(", "'{}/{}.pth'", ".", "format", "(", "cfg", ".", "work_dir", ",", "cal_head", ")", ")", ")", "\n", "epoch", "=", "torch", ".", "load", "(", "'{}/{}_epoch.pth'", ".", "format", "(", "cfg", ".", "work_dir", ",", "cal_head", ")", ")", "\n", "load_checkpoint", "(", "ncm_model", ",", "'{}/{}.pth'", ".", "format", "(", "cfg", ".", "work_dir", ",", "cal_head", ")", ")", "\n", "return", "epoch", "\n", "\n", "", "epoch", "=", "load_ckpt", "(", "calibrated_head", ",", "args", ".", "head_ckpt", ")", "\n", "calibrated_head", ".", "eval", "(", ")", "\n", "\n", "\n", "if", "not", "distributed", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ",", "calibrated_head", ",", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", ",", "args", ".", "show", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDistributedDataParallel", "(", "model", ".", "cuda", "(", ")", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "tmpdir", ")", "\n", "\n", "", "mmcv", ".", "dump", "(", "outputs", ",", "args", ".", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.tools.draw_comparison_head_design_choices.autolabel": [[46, 55], ["rect.get_height", "ax.annotate", "rect.get_x", "rect.get_width"], "function", ["None"], ["def", "autolabel", "(", "rects", ")", ":", "\n", "    ", "\"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"", "\n", "for", "rect", "in", "rects", ":", "\n", "        ", "height", "=", "rect", ".", "get_height", "(", ")", "\n", "ax", ".", "annotate", "(", "'{}'", ".", "format", "(", "height", ")", ",", "\n", "xy", "=", "(", "rect", ".", "get_x", "(", ")", "+", "rect", ".", "get_width", "(", ")", "/", "2", ",", "height", ")", ",", "\n", "xytext", "=", "(", "0", ",", "3", ")", ",", "# 3 points vertical offset", "\n", "textcoords", "=", "\"offset points\"", ",", "\n", "ha", "=", "'center'", ",", "va", "=", "'bottom'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_xml": [[13, 65], ["xml.parse", "ET.parse.getroot", "tree.getroot.find", "int", "int", "tree.getroot.findall", "int", "obj.find", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.array", "root.find.find", "root.find.find", "obj.find", "int", "int", "int", "int", "np.zeros.append", "np.array.append", "np.zeros.append", "np.array.append", "numpy.array", "numpy.array", "np.zeros.astype", "np.array.astype", "np.zeros.astype", "np.array.astype", "obj.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find"], "function", ["None"], ["def", "parse_xml", "(", "args", ")", ":", "\n", "    ", "xml_path", ",", "img_path", "=", "args", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_path", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "size", "=", "root", ".", "find", "(", "'size'", ")", "\n", "w", "=", "int", "(", "size", ".", "find", "(", "'width'", ")", ".", "text", ")", "\n", "h", "=", "int", "(", "size", ".", "find", "(", "'height'", ")", ".", "text", ")", "\n", "bboxes", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "bboxes_ignore", "=", "[", "]", "\n", "labels_ignore", "=", "[", "]", "\n", "for", "obj", "in", "root", ".", "findall", "(", "'object'", ")", ":", "\n", "        ", "name", "=", "obj", ".", "find", "(", "'name'", ")", ".", "text", "\n", "label", "=", "label_ids", "[", "name", "]", "\n", "difficult", "=", "int", "(", "obj", ".", "find", "(", "'difficult'", ")", ".", "text", ")", "\n", "bnd_box", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "bbox", "=", "[", "\n", "int", "(", "bnd_box", ".", "find", "(", "'xmin'", ")", ".", "text", ")", ",", "\n", "int", "(", "bnd_box", ".", "find", "(", "'ymin'", ")", ".", "text", ")", ",", "\n", "int", "(", "bnd_box", ".", "find", "(", "'xmax'", ")", ".", "text", ")", ",", "\n", "int", "(", "bnd_box", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "\n", "]", "\n", "if", "difficult", ":", "\n", "            ", "bboxes_ignore", ".", "append", "(", "bbox", ")", "\n", "labels_ignore", ".", "append", "(", "label", ")", "\n", "", "else", ":", "\n", "            ", "bboxes", ".", "append", "(", "bbox", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "", "", "if", "not", "bboxes", ":", "\n", "        ", "bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "0", ",", ")", ")", "\n", "", "else", ":", "\n", "        ", "bboxes", "=", "np", ".", "array", "(", "bboxes", ",", "ndmin", "=", "2", ")", "-", "1", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "", "if", "not", "bboxes_ignore", ":", "\n", "        ", "bboxes_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "labels_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", ")", ")", "\n", "", "else", ":", "\n", "        ", "bboxes_ignore", "=", "np", ".", "array", "(", "bboxes_ignore", ",", "ndmin", "=", "2", ")", "-", "1", "\n", "labels_ignore", "=", "np", ".", "array", "(", "labels_ignore", ")", "\n", "", "annotation", "=", "{", "\n", "'filename'", ":", "img_path", ",", "\n", "'width'", ":", "w", ",", "\n", "'height'", ":", "h", ",", "\n", "'ann'", ":", "{", "\n", "'bboxes'", ":", "bboxes", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'labels'", ":", "labels", ".", "astype", "(", "np", ".", "int64", ")", ",", "\n", "'bboxes_ignore'", ":", "bboxes_ignore", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'labels_ignore'", ":", "labels_ignore", ".", "astype", "(", "np", ".", "int64", ")", "\n", "}", "\n", "}", "\n", "return", "annotation", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.cvt_annotations": [[67, 93], ["mmcv.dump", "isinstance", "os.join", "mmcv.list_from_file", "mmcv.track_progress", "annotations.extend", "os.isfile", "print", "os.join", "list", "zip"], "function", ["None"], ["", "def", "cvt_annotations", "(", "devkit_path", ",", "years", ",", "split", ",", "out_file", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "years", ",", "list", ")", ":", "\n", "        ", "years", "=", "[", "years", "]", "\n", "", "annotations", "=", "[", "]", "\n", "for", "year", "in", "years", ":", "\n", "        ", "filelist", "=", "osp", ".", "join", "(", "devkit_path", ",", "\n", "'VOC{}/ImageSets/Main/{}.txt'", ".", "format", "(", "year", ",", "split", ")", ")", "\n", "if", "not", "osp", ".", "isfile", "(", "filelist", ")", ":", "\n", "            ", "print", "(", "'filelist does not exist: {}, skip voc{} {}'", ".", "format", "(", "\n", "filelist", ",", "year", ",", "split", ")", ")", "\n", "return", "\n", "", "img_names", "=", "mmcv", ".", "list_from_file", "(", "filelist", ")", "\n", "xml_paths", "=", "[", "\n", "osp", ".", "join", "(", "devkit_path", ",", "\n", "'VOC{}/Annotations/{}.xml'", ".", "format", "(", "year", ",", "img_name", ")", ")", "\n", "for", "img_name", "in", "img_names", "\n", "]", "\n", "img_paths", "=", "[", "\n", "'VOC{}/JPEGImages/{}.jpg'", ".", "format", "(", "year", ",", "img_name", ")", "\n", "for", "img_name", "in", "img_names", "\n", "]", "\n", "part_annotations", "=", "mmcv", ".", "track_progress", "(", "parse_xml", ",", "\n", "list", "(", "zip", "(", "xml_paths", ",", "img_paths", ")", ")", ")", "\n", "annotations", ".", "extend", "(", "part_annotations", ")", "\n", "", "mmcv", ".", "dump", "(", "annotations", ",", "out_file", ")", "\n", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args": [[95, 102], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Convert PASCAL VOC annotations to mmdetection format'", ")", "\n", "parser", ".", "add_argument", "(", "'devkit_path'", ",", "help", "=", "'pascal voc devkit path'", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--out-dir'", ",", "help", "=", "'output path'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.main": [[104, 138], ["pascal_voc.parse_args", "mmcv.mkdir_or_exist", "os.isdir", "os.isdir", "print", "os.join", "years.append", "os.join", "years.append", "years.append", "IOError", "print", "pascal_voc.cvt_annotations", "isinstance", "print", "pascal_voc.cvt_annotations", "os.join", "os.join"], "function", ["home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.cvt_annotations", "home.repos.pwc.inspect_result.twangnh_SimCal.convert_datasets.pascal_voc.cvt_annotations"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "devkit_path", "=", "args", ".", "devkit_path", "\n", "out_dir", "=", "args", ".", "out_dir", "if", "args", ".", "out_dir", "else", "devkit_path", "\n", "mmcv", ".", "mkdir_or_exist", "(", "out_dir", ")", "\n", "\n", "years", "=", "[", "]", "\n", "if", "osp", ".", "isdir", "(", "osp", ".", "join", "(", "devkit_path", ",", "'VOC2007'", ")", ")", ":", "\n", "        ", "years", ".", "append", "(", "'2007'", ")", "\n", "", "if", "osp", ".", "isdir", "(", "osp", ".", "join", "(", "devkit_path", ",", "'VOC2012'", ")", ")", ":", "\n", "        ", "years", ".", "append", "(", "'2012'", ")", "\n", "", "if", "'2007'", "in", "years", "and", "'2012'", "in", "years", ":", "\n", "        ", "years", ".", "append", "(", "[", "'2007'", ",", "'2012'", "]", ")", "\n", "", "if", "not", "years", ":", "\n", "        ", "raise", "IOError", "(", "'The devkit path {} contains neither \"VOC2007\" nor '", "\n", "'\"VOC2012\" subfolder'", ".", "format", "(", "devkit_path", ")", ")", "\n", "", "for", "year", "in", "years", ":", "\n", "        ", "if", "year", "==", "'2007'", ":", "\n", "            ", "prefix", "=", "'voc07'", "\n", "", "elif", "year", "==", "'2012'", ":", "\n", "            ", "prefix", "=", "'voc12'", "\n", "", "elif", "year", "==", "[", "'2007'", ",", "'2012'", "]", ":", "\n", "            ", "prefix", "=", "'voc0712'", "\n", "", "for", "split", "in", "[", "'train'", ",", "'val'", ",", "'trainval'", "]", ":", "\n", "            ", "dataset_name", "=", "prefix", "+", "'_'", "+", "split", "\n", "print", "(", "'processing {} ...'", ".", "format", "(", "dataset_name", ")", ")", "\n", "cvt_annotations", "(", "devkit_path", ",", "year", ",", "split", ",", "\n", "osp", ".", "join", "(", "out_dir", ",", "dataset_name", "+", "'.pkl'", ")", ")", "\n", "", "if", "not", "isinstance", "(", "year", ",", "list", ")", ":", "\n", "            ", "dataset_name", "=", "prefix", "+", "'_test'", "\n", "print", "(", "'processing {} ...'", ".", "format", "(", "dataset_name", ")", ")", "\n", "cvt_annotations", "(", "devkit_path", ",", "year", ",", "'test'", ",", "\n", "osp", ".", "join", "(", "out_dir", ",", "dataset_name", "+", "'.pkl'", ")", ")", "\n", "", "", "print", "(", "'Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.colormap.colormap": [[5, 251], ["numpy.array().astype", "np.array().astype.reshape", "numpy.array"], "function", ["None"], ["def", "colormap", "(", "rgb", "=", "False", ")", ":", "\n", "    ", "color_list", "=", "np", ".", "array", "(", "\n", "[", "\n", "0.000", ",", "\n", "0.447", ",", "\n", "0.741", ",", "\n", "0.850", ",", "\n", "0.325", ",", "\n", "0.098", ",", "\n", "0.929", ",", "\n", "0.694", ",", "\n", "0.125", ",", "\n", "0.494", ",", "\n", "0.184", ",", "\n", "0.556", ",", "\n", "0.466", ",", "\n", "0.674", ",", "\n", "0.188", ",", "\n", "0.301", ",", "\n", "0.745", ",", "\n", "0.933", ",", "\n", "0.635", ",", "\n", "0.078", ",", "\n", "0.184", ",", "\n", "0.300", ",", "\n", "0.300", ",", "\n", "0.300", ",", "\n", "0.600", ",", "\n", "0.600", ",", "\n", "0.600", ",", "\n", "1.000", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "1.000", ",", "\n", "0.500", ",", "\n", "0.000", ",", "\n", "0.749", ",", "\n", "0.749", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "1.000", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "1.000", ",", "\n", "0.667", ",", "\n", "0.000", ",", "\n", "1.000", ",", "\n", "0.333", ",", "\n", "0.333", ",", "\n", "0.000", ",", "\n", "0.333", ",", "\n", "0.667", ",", "\n", "0.000", ",", "\n", "0.333", ",", "\n", "1.000", ",", "\n", "0.000", ",", "\n", "0.667", ",", "\n", "0.333", ",", "\n", "0.000", ",", "\n", "0.667", ",", "\n", "0.667", ",", "\n", "0.000", ",", "\n", "0.667", ",", "\n", "1.000", ",", "\n", "0.000", ",", "\n", "1.000", ",", "\n", "0.333", ",", "\n", "0.000", ",", "\n", "1.000", ",", "\n", "0.667", ",", "\n", "0.000", ",", "\n", "1.000", ",", "\n", "1.000", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "0.333", ",", "\n", "0.500", ",", "\n", "0.000", ",", "\n", "0.667", ",", "\n", "0.500", ",", "\n", "0.000", ",", "\n", "1.000", ",", "\n", "0.500", ",", "\n", "0.333", ",", "\n", "0.000", ",", "\n", "0.500", ",", "\n", "0.333", ",", "\n", "0.333", ",", "\n", "0.500", ",", "\n", "0.333", ",", "\n", "0.667", ",", "\n", "0.500", ",", "\n", "0.333", ",", "\n", "1.000", ",", "\n", "0.500", ",", "\n", "0.667", ",", "\n", "0.000", ",", "\n", "0.500", ",", "\n", "0.667", ",", "\n", "0.333", ",", "\n", "0.500", ",", "\n", "0.667", ",", "\n", "0.667", ",", "\n", "0.500", ",", "\n", "0.667", ",", "\n", "1.000", ",", "\n", "0.500", ",", "\n", "1.000", ",", "\n", "0.000", ",", "\n", "0.500", ",", "\n", "1.000", ",", "\n", "0.333", ",", "\n", "0.500", ",", "\n", "1.000", ",", "\n", "0.667", ",", "\n", "0.500", ",", "\n", "1.000", ",", "\n", "1.000", ",", "\n", "0.500", ",", "\n", "0.000", ",", "\n", "0.333", ",", "\n", "1.000", ",", "\n", "0.000", ",", "\n", "0.667", ",", "\n", "1.000", ",", "\n", "0.000", ",", "\n", "1.000", ",", "\n", "1.000", ",", "\n", "0.333", ",", "\n", "0.000", ",", "\n", "1.000", ",", "\n", "0.333", ",", "\n", "0.333", ",", "\n", "1.000", ",", "\n", "0.333", ",", "\n", "0.667", ",", "\n", "1.000", ",", "\n", "0.333", ",", "\n", "1.000", ",", "\n", "1.000", ",", "\n", "0.667", ",", "\n", "0.000", ",", "\n", "1.000", ",", "\n", "0.667", ",", "\n", "0.333", ",", "\n", "1.000", ",", "\n", "0.667", ",", "\n", "0.667", ",", "\n", "1.000", ",", "\n", "0.667", ",", "\n", "1.000", ",", "\n", "1.000", ",", "\n", "1.000", ",", "\n", "0.000", ",", "\n", "1.000", ",", "\n", "1.000", ",", "\n", "0.333", ",", "\n", "1.000", ",", "\n", "1.000", ",", "\n", "0.667", ",", "\n", "1.000", ",", "\n", "0.167", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "0.333", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "0.500", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "0.667", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "0.833", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "1.000", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "0.167", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "0.333", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "0.500", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "0.667", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "0.833", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "1.000", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "0.167", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "0.333", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "0.500", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "0.667", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "0.833", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "1.000", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "0.000", ",", "\n", "0.143", ",", "\n", "0.143", ",", "\n", "0.143", ",", "\n", "0.286", ",", "\n", "0.286", ",", "\n", "0.286", ",", "\n", "0.429", ",", "\n", "0.429", ",", "\n", "0.429", ",", "\n", "0.571", ",", "\n", "0.571", ",", "\n", "0.571", ",", "\n", "0.714", ",", "\n", "0.714", ",", "\n", "0.714", ",", "\n", "0.857", ",", "\n", "0.857", ",", "\n", "0.857", ",", "\n", "1.000", ",", "\n", "1.000", ",", "\n", "1.000", ",", "\n", "]", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "color_list", "=", "color_list", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "*", "255", "\n", "if", "not", "rgb", ":", "\n", "        ", "color_list", "=", "color_list", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "", "return", "color_list", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.__init__": [[17, 55], ["logging.getLogger", "isinstance", "isinstance", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "eval.Params", "collections.OrderedDict", "sorted", "sorted", "ValueError", "isinstance", "isinstance", "eval.LVISEval.lvis_gt.get_img_ids", "eval.LVISEval.lvis_gt.get_cat_ids", "lvis.LVIS", "TypeError", "results.LVISResults", "TypeError"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_img_ids", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_cat_ids"], ["    ", "def", "__init__", "(", "self", ",", "lvis_gt", ",", "lvis_dt", ",", "iou_type", "=", "\"segm\"", ")", ":", "\n", "        ", "\"\"\"Constructor for LVISEval.\n        Args:\n            lvis_gt (LVIS class instance, or str containing path of annotation file)\n            lvis_dt (LVISResult class instance, or str containing path of result file,\n            or list of dict)\n            iou_type (str): segm or bbox evaluation\n        \"\"\"", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "if", "iou_type", "not", "in", "[", "\"bbox\"", ",", "\"segm\"", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"iou_type: {} is not supported.\"", ".", "format", "(", "iou_type", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "lvis_gt", ",", "LVIS", ")", ":", "\n", "            ", "self", ".", "lvis_gt", "=", "lvis_gt", "\n", "", "elif", "isinstance", "(", "lvis_gt", ",", "str", ")", ":", "\n", "            ", "self", ".", "lvis_gt", "=", "LVIS", "(", "lvis_gt", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"Unsupported type {} of lvis_gt.\"", ".", "format", "(", "lvis_gt", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "lvis_dt", ",", "LVISResults", ")", ":", "\n", "            ", "self", ".", "lvis_dt", "=", "lvis_dt", "\n", "", "elif", "isinstance", "(", "lvis_dt", ",", "(", "str", ",", "list", ")", ")", ":", "\n", "            ", "self", ".", "lvis_dt", "=", "LVISResults", "(", "self", ".", "lvis_gt", ",", "lvis_dt", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"Unsupported type {} of lvis_dt.\"", ".", "format", "(", "lvis_dt", ")", ")", "\n", "\n", "# per-image per-category evaluation results", "\n", "", "self", ".", "eval_imgs", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "eval", "=", "{", "}", "# accumulated evaluation results", "\n", "self", ".", "_gts", "=", "defaultdict", "(", "list", ")", "# gt for evaluation", "\n", "self", ".", "_dts", "=", "defaultdict", "(", "list", ")", "# dt for evaluation", "\n", "self", ".", "params", "=", "Params", "(", "iou_type", "=", "iou_type", ")", "# parameters", "\n", "self", ".", "results", "=", "OrderedDict", "(", ")", "\n", "self", ".", "ious", "=", "{", "}", "# ious between all gts and dts", "\n", "\n", "self", ".", "params", ".", "img_ids", "=", "sorted", "(", "self", ".", "lvis_gt", ".", "get_img_ids", "(", ")", ")", "\n", "self", ".", "params", ".", "cat_ids", "=", "sorted", "(", "self", ".", "lvis_gt", ".", "get_cat_ids", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._to_mask": [[56, 60], ["lvis.ann_to_rle"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.ann_to_rle"], ["", "def", "_to_mask", "(", "self", ",", "anns", ",", "lvis", ")", ":", "\n", "        ", "for", "ann", "in", "anns", ":", "\n", "            ", "rle", "=", "lvis", ".", "ann_to_rle", "(", "ann", ")", "\n", "ann", "[", "\"segmentation\"", "]", "=", "rle", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._prepare": [[61, 109], ["eval.LVISEval.lvis_gt.load_anns", "eval.LVISEval.lvis_dt.load_anns", "eval.LVISEval.lvis_gt.load_imgs", "collections.defaultdict", "eval.LVISEval._prepare_freq_group", "eval.LVISEval.lvis_gt.get_ann_ids", "eval.LVISEval.lvis_dt.get_ann_ids", "eval.LVISEval._to_mask", "eval.LVISEval._to_mask", "eval.LVISEval._gts[].append", "img_pl[].add", "eval.LVISEval._dts[].append"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.load_anns", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.load_anns", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.load_imgs", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._prepare_freq_group", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_ann_ids", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_ann_ids", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._to_mask", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._to_mask"], ["", "", "def", "_prepare", "(", "self", ")", ":", "\n", "        ", "\"\"\"Prepare self._gts and self._dts for evaluation based on params.\"\"\"", "\n", "\n", "cat_ids", "=", "self", ".", "params", ".", "cat_ids", "if", "self", ".", "params", ".", "cat_ids", "else", "None", "\n", "\n", "gts", "=", "self", ".", "lvis_gt", ".", "load_anns", "(", "\n", "self", ".", "lvis_gt", ".", "get_ann_ids", "(", "img_ids", "=", "self", ".", "params", ".", "img_ids", ",", "cat_ids", "=", "cat_ids", ")", "\n", ")", "\n", "dts", "=", "self", ".", "lvis_dt", ".", "load_anns", "(", "\n", "self", ".", "lvis_dt", ".", "get_ann_ids", "(", "img_ids", "=", "self", ".", "params", ".", "img_ids", ",", "cat_ids", "=", "cat_ids", ")", "\n", ")", "\n", "# convert ground truth to mask if iou_type == 'segm'", "\n", "if", "self", ".", "params", ".", "iou_type", "==", "\"segm\"", ":", "\n", "            ", "self", ".", "_to_mask", "(", "gts", ",", "self", ".", "lvis_gt", ")", "\n", "self", ".", "_to_mask", "(", "dts", ",", "self", ".", "lvis_dt", ")", "\n", "\n", "# set ignore flag", "\n", "", "for", "gt", "in", "gts", ":", "\n", "            ", "if", "\"ignore\"", "not", "in", "gt", ":", "\n", "                ", "gt", "[", "\"ignore\"", "]", "=", "0", "\n", "\n", "", "", "for", "gt", "in", "gts", ":", "\n", "            ", "self", ".", "_gts", "[", "gt", "[", "\"image_id\"", "]", ",", "gt", "[", "\"category_id\"", "]", "]", ".", "append", "(", "gt", ")", "\n", "\n", "# For federated dataset evaluation we will filter out all dt for an", "\n", "# image which belong to categories not present in gt and not present in", "\n", "# the negative list for an image. In other words detector is not penalized", "\n", "# for categories about which we don't have gt information about their", "\n", "# presence or absence in an image.", "\n", "", "img_data", "=", "self", ".", "lvis_gt", ".", "load_imgs", "(", "ids", "=", "self", ".", "params", ".", "img_ids", ")", "\n", "# per image map of categories not present in image", "\n", "# img_nl = {d[\"id\"]: d[\"not_exhaustive_category_ids\"] for d in img_data}", "\n", "img_nl", "=", "{", "d", "[", "\"id\"", "]", ":", "d", "[", "\"neg_category_ids\"", "]", "for", "d", "in", "img_data", "}", "\n", "# per image list of categories present in image", "\n", "img_pl", "=", "defaultdict", "(", "set", ")", "\n", "for", "ann", "in", "gts", ":", "\n", "            ", "img_pl", "[", "ann", "[", "\"image_id\"", "]", "]", ".", "add", "(", "ann", "[", "\"category_id\"", "]", ")", "\n", "# per image map of categoires which have missing gt. For these", "\n", "# categories we don't penalize the detector for flase positives.", "\n", "", "self", ".", "img_nel", "=", "{", "d", "[", "\"id\"", "]", ":", "d", "[", "\"not_exhaustive_category_ids\"", "]", "for", "d", "in", "img_data", "}", "\n", "\n", "for", "dt", "in", "dts", ":", "\n", "            ", "img_id", ",", "cat_id", "=", "dt", "[", "\"image_id\"", "]", ",", "dt", "[", "\"category_id\"", "]", "\n", "if", "cat_id", "not", "in", "img_nl", "[", "img_id", "]", "and", "cat_id", "not", "in", "img_pl", "[", "img_id", "]", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_dts", "[", "img_id", ",", "cat_id", "]", ".", "append", "(", "dt", ")", "\n", "\n", "", "self", ".", "freq_groups", "=", "self", ".", "_prepare_freq_group", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._prepare_freq_group": [[110, 117], ["eval.LVISEval.lvis_gt.load_cats", "enumerate", "freq_groups[].append", "eval.LVISEval.params.img_count_lbl.index"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.load_cats"], ["", "def", "_prepare_freq_group", "(", "self", ")", ":", "\n", "        ", "freq_groups", "=", "[", "[", "]", "for", "_", "in", "self", ".", "params", ".", "img_count_lbl", "]", "\n", "cat_data", "=", "self", ".", "lvis_gt", ".", "load_cats", "(", "self", ".", "params", ".", "cat_ids", ")", "\n", "for", "idx", ",", "_cat_data", "in", "enumerate", "(", "cat_data", ")", ":", "\n", "            ", "frequency", "=", "_cat_data", "[", "\"frequency\"", "]", "\n", "freq_groups", "[", "self", ".", "params", ".", "img_count_lbl", ".", "index", "(", "frequency", ")", "]", ".", "append", "(", "idx", ")", "\n", "", "return", "freq_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.evaluate": [[118, 155], ["eval.LVISEval.logger.info", "eval.LVISEval.logger.info", "list", "eval.LVISEval._prepare", "numpy.unique", "eval.LVISEval.compute_iou", "print", "eval.LVISEval.eval_imgs.append", "eval.LVISEval.evaluate_img"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._prepare", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.compute_iou", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.evaluate_img"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Run per image evaluation on given images and store results\n        (a list of dict) in self.eval_imgs.\n        \"\"\"", "\n", "self", ".", "logger", ".", "info", "(", "\"Running per image evaluation.\"", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Evaluate annotation type *{}*\"", ".", "format", "(", "self", ".", "params", ".", "iou_type", ")", ")", "\n", "\n", "self", ".", "params", ".", "img_ids", "=", "list", "(", "np", ".", "unique", "(", "self", ".", "params", ".", "img_ids", ")", ")", "\n", "\n", "if", "self", ".", "params", ".", "use_cats", ":", "\n", "            ", "cat_ids", "=", "self", ".", "params", ".", "cat_ids", "\n", "", "else", ":", "\n", "            ", "cat_ids", "=", "[", "-", "1", "]", "\n", "\n", "", "self", ".", "_prepare", "(", ")", "\n", "\n", "self", ".", "ious", "=", "{", "\n", "(", "img_id", ",", "cat_id", ")", ":", "self", ".", "compute_iou", "(", "img_id", ",", "cat_id", ")", "\n", "for", "img_id", "in", "self", ".", "params", ".", "img_ids", "\n", "for", "cat_id", "in", "cat_ids", "\n", "}", "\n", "\n", "# loop through images, area range, max detection number", "\n", "# self.eval_imgs = [", "\n", "#     self.evaluate_img(img_id, cat_id, area_rng)", "\n", "#     for cat_id in cat_ids", "\n", "#     for area_rng in self.params.area_rng", "\n", "#     for img_id in self.params.img_ids", "\n", "# ]", "\n", "self", ".", "eval_imgs", "=", "[", "]", "\n", "for", "cat_id", "in", "cat_ids", ":", "\n", "            ", "if", "cat_id", "%", "50", "==", "0", ":", "\n", "                ", "print", "(", "cat_id", ")", "\n", "", "for", "area_rng", "in", "self", ".", "params", ".", "area_rng", ":", "\n", "                ", "for", "img_id", "in", "self", ".", "params", ".", "img_ids", ":", "\n", "                    ", "self", ".", "eval_imgs", ".", "append", "(", "self", ".", "evaluate_img", "(", "img_id", ",", "cat_id", ",", "area_rng", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._get_gt_dt": [[158, 178], ["None"], "methods", ["None"], ["", "", "", "", "def", "_get_gt_dt", "(", "self", ",", "img_id", ",", "cat_id", ")", ":", "\n", "        ", "\"\"\"Create gt, dt which are list of anns/dets. If use_cats is true\n        only anns/dets corresponding to tuple (img_id, cat_id) will be\n        used. Else, all anns/dets in image are used and cat_id is not used.\n        \"\"\"", "\n", "if", "self", ".", "params", ".", "use_cats", ":", "\n", "            ", "gt", "=", "self", ".", "_gts", "[", "img_id", ",", "cat_id", "]", "\n", "dt", "=", "self", ".", "_dts", "[", "img_id", ",", "cat_id", "]", "\n", "", "else", ":", "\n", "            ", "gt", "=", "[", "\n", "_ann", "\n", "for", "_cat_id", "in", "self", ".", "params", ".", "cat_ids", "\n", "for", "_ann", "in", "self", ".", "_gts", "[", "img_id", ",", "cat_id", "]", "\n", "]", "\n", "dt", "=", "[", "\n", "_ann", "\n", "for", "_cat_id", "in", "self", ".", "params", ".", "cat_ids", "\n", "for", "_ann", "in", "self", ".", "_dts", "[", "img_id", ",", "cat_id", "]", "\n", "]", "\n", "", "return", "gt", ",", "dt", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.compute_iou": [[179, 204], ["eval.LVISEval._get_gt_dt", "numpy.argsort", "pycocotools.iou", "len", "len", "len", "int", "ValueError"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._get_gt_dt"], ["", "def", "compute_iou", "(", "self", ",", "img_id", ",", "cat_id", ")", ":", "\n", "        ", "gt", ",", "dt", "=", "self", ".", "_get_gt_dt", "(", "img_id", ",", "cat_id", ")", "\n", "\n", "if", "len", "(", "gt", ")", "==", "0", "and", "len", "(", "dt", ")", "==", "0", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "# Sort detections in decreasing order of score.", "\n", "", "idx", "=", "np", ".", "argsort", "(", "[", "-", "d", "[", "\"score\"", "]", "for", "d", "in", "dt", "]", ",", "kind", "=", "\"mergesort\"", ")", "\n", "dt", "=", "[", "dt", "[", "i", "]", "for", "i", "in", "idx", "]", "\n", "\n", "iscrowd", "=", "[", "int", "(", "False", ")", "]", "*", "len", "(", "gt", ")", "\n", "\n", "if", "self", ".", "params", ".", "iou_type", "==", "\"segm\"", ":", "\n", "            ", "ann_type", "=", "\"segmentation\"", "\n", "", "elif", "self", ".", "params", ".", "iou_type", "==", "\"bbox\"", ":", "\n", "            ", "ann_type", "=", "\"bbox\"", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown iou_type for iou computation.\"", ")", "\n", "", "gt", "=", "[", "g", "[", "ann_type", "]", "for", "g", "in", "gt", "]", "\n", "dt", "=", "[", "d", "[", "ann_type", "]", "for", "d", "in", "dt", "]", "\n", "\n", "# compute iou between each dt and gt region", "\n", "# will return array of shape len(dt), len(gt)", "\n", "ious", "=", "mask_utils", ".", "iou", "(", "dt", ",", "gt", ",", "iscrowd", ")", "\n", "return", "ious", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.evaluate_img": [[205, 303], ["eval.LVISEval._get_gt_dt", "numpy.argsort", "numpy.argsort", "len", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.zeros", "enumerate", "numpy.array().reshape", "numpy.repeat", "numpy.logical_or", "enumerate", "numpy.logical_and", "len", "len", "len", "len", "min", "enumerate", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._get_gt_dt"], ["", "def", "evaluate_img", "(", "self", ",", "img_id", ",", "cat_id", ",", "area_rng", ")", ":", "\n", "        ", "\"\"\"Perform evaluation for single category and image.\"\"\"", "\n", "gt", ",", "dt", "=", "self", ".", "_get_gt_dt", "(", "img_id", ",", "cat_id", ")", "\n", "\n", "if", "len", "(", "gt", ")", "==", "0", "and", "len", "(", "dt", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "# Add another filed _ignore to only consider anns based on area range.", "\n", "", "for", "g", "in", "gt", ":", "\n", "            ", "if", "g", "[", "\"ignore\"", "]", "or", "(", "g", "[", "\"area\"", "]", "<", "area_rng", "[", "0", "]", "or", "g", "[", "\"area\"", "]", ">", "area_rng", "[", "1", "]", ")", ":", "\n", "                ", "g", "[", "\"_ignore\"", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "g", "[", "\"_ignore\"", "]", "=", "0", "\n", "\n", "# Sort gt ignore last", "\n", "", "", "gt_idx", "=", "np", ".", "argsort", "(", "[", "g", "[", "\"_ignore\"", "]", "for", "g", "in", "gt", "]", ",", "kind", "=", "\"mergesort\"", ")", "\n", "gt", "=", "[", "gt", "[", "i", "]", "for", "i", "in", "gt_idx", "]", "\n", "\n", "# Sort dt highest score first", "\n", "dt_idx", "=", "np", ".", "argsort", "(", "[", "-", "d", "[", "\"score\"", "]", "for", "d", "in", "dt", "]", ",", "kind", "=", "\"mergesort\"", ")", "\n", "dt", "=", "[", "dt", "[", "i", "]", "for", "i", "in", "dt_idx", "]", "\n", "\n", "# load computed ious", "\n", "ious", "=", "(", "\n", "self", ".", "ious", "[", "img_id", ",", "cat_id", "]", "[", ":", ",", "gt_idx", "]", "\n", "if", "len", "(", "self", ".", "ious", "[", "img_id", ",", "cat_id", "]", ")", ">", "0", "\n", "else", "self", ".", "ious", "[", "img_id", ",", "cat_id", "]", "\n", ")", "\n", "\n", "num_thrs", "=", "len", "(", "self", ".", "params", ".", "iou_thrs", ")", "\n", "num_gt", "=", "len", "(", "gt", ")", "\n", "num_dt", "=", "len", "(", "dt", ")", "\n", "\n", "# Array to store the \"id\" of the matched dt/gt", "\n", "gt_m", "=", "np", ".", "zeros", "(", "(", "num_thrs", ",", "num_gt", ")", ")", "\n", "dt_m", "=", "np", ".", "zeros", "(", "(", "num_thrs", ",", "num_dt", ")", ")", "\n", "\n", "gt_ig", "=", "np", ".", "array", "(", "[", "g", "[", "\"_ignore\"", "]", "for", "g", "in", "gt", "]", ")", "\n", "dt_ig", "=", "np", ".", "zeros", "(", "(", "num_thrs", ",", "num_dt", ")", ")", "\n", "\n", "for", "iou_thr_idx", ",", "iou_thr", "in", "enumerate", "(", "self", ".", "params", ".", "iou_thrs", ")", ":", "\n", "            ", "if", "len", "(", "ious", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "", "for", "dt_idx", ",", "_dt", "in", "enumerate", "(", "dt", ")", ":", "\n", "                ", "iou", "=", "min", "(", "[", "iou_thr", ",", "1", "-", "1e-10", "]", ")", "\n", "# information about best match so far (m=-1 -> unmatched)", "\n", "# store the gt_idx which matched for _dt", "\n", "m", "=", "-", "1", "\n", "for", "gt_idx", ",", "_", "in", "enumerate", "(", "gt", ")", ":", "\n", "# if this gt already matched continue", "\n", "                    ", "if", "gt_m", "[", "iou_thr_idx", ",", "gt_idx", "]", ">", "0", ":", "\n", "                        ", "continue", "\n", "# if _dt matched to reg gt, and on ignore gt, stop", "\n", "", "if", "m", ">", "-", "1", "and", "gt_ig", "[", "m", "]", "==", "0", "and", "gt_ig", "[", "gt_idx", "]", "==", "1", ":", "\n", "                        ", "break", "\n", "# continue to next gt unless better match made", "\n", "", "if", "ious", "[", "dt_idx", ",", "gt_idx", "]", "<", "iou", ":", "\n", "                        ", "continue", "\n", "# if match successful and best so far, store appropriately", "\n", "", "iou", "=", "ious", "[", "dt_idx", ",", "gt_idx", "]", "\n", "m", "=", "gt_idx", "\n", "\n", "# No match found for _dt, go to next _dt", "\n", "", "if", "m", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "\n", "# if gt to ignore for some reason update dt_ig.", "\n", "# Should not be used in evaluation.", "\n", "", "dt_ig", "[", "iou_thr_idx", ",", "dt_idx", "]", "=", "gt_ig", "[", "m", "]", "\n", "# _dt match found, update gt_m, and dt_m with \"id\"", "\n", "dt_m", "[", "iou_thr_idx", ",", "dt_idx", "]", "=", "gt", "[", "m", "]", "[", "\"id\"", "]", "\n", "gt_m", "[", "iou_thr_idx", ",", "m", "]", "=", "_dt", "[", "\"id\"", "]", "\n", "\n", "# For LVIS we will ignore any unmatched detection if that category was", "\n", "# not exhaustively annotated in gt.", "\n", "", "", "dt_ig_mask", "=", "[", "\n", "d", "[", "\"area\"", "]", "<", "area_rng", "[", "0", "]", "\n", "or", "d", "[", "\"area\"", "]", ">", "area_rng", "[", "1", "]", "\n", "or", "d", "[", "\"category_id\"", "]", "in", "self", ".", "img_nel", "[", "d", "[", "\"image_id\"", "]", "]", "\n", "for", "d", "in", "dt", "\n", "]", "\n", "dt_ig_mask", "=", "np", ".", "array", "(", "dt_ig_mask", ")", ".", "reshape", "(", "(", "1", ",", "num_dt", ")", ")", "# 1 X num_dt", "\n", "dt_ig_mask", "=", "np", ".", "repeat", "(", "dt_ig_mask", ",", "num_thrs", ",", "0", ")", "# num_thrs X num_dt", "\n", "# Based on dt_ig_mask ignore any unmatched detection by updating dt_ig", "\n", "dt_ig", "=", "np", ".", "logical_or", "(", "dt_ig", ",", "np", ".", "logical_and", "(", "dt_m", "==", "0", ",", "dt_ig_mask", ")", ")", "\n", "# store results for given image and category", "\n", "return", "{", "\n", "\"image_id\"", ":", "img_id", ",", "\n", "\"category_id\"", ":", "cat_id", ",", "\n", "\"area_rng\"", ":", "area_rng", ",", "\n", "\"dt_ids\"", ":", "[", "d", "[", "\"id\"", "]", "for", "d", "in", "dt", "]", ",", "\n", "\"gt_ids\"", ":", "[", "g", "[", "\"id\"", "]", "for", "g", "in", "gt", "]", ",", "\n", "\"dt_matches\"", ":", "dt_m", ",", "\n", "\"gt_matches\"", ":", "gt_m", ",", "\n", "\"dt_scores\"", ":", "[", "d", "[", "\"score\"", "]", "for", "d", "in", "dt", "]", ",", "\n", "\"gt_ignore\"", ":", "gt_ig", ",", "\n", "\"dt_ignore\"", ":", "dt_ig", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.accumulate": [[305, 428], ["eval.LVISEval.logger.info", "len", "len", "len", "len", "len", "range", "range", "eval.LVISEval.logger.warn", "numpy.ones", "numpy.ones", "range", "range", "datetime.datetime.now().strftime", "numpy.concatenate", "numpy.concatenate", "numpy.argsort", "numpy.concatenate", "numpy.count_nonzero", "numpy.logical_and", "numpy.logical_and", "numpy.cumsum().astype", "numpy.cumsum().astype", "enumerate", "len", "numpy.concatenate", "numpy.concatenate", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "zip", "numpy.array", "numpy.array", "len", "pr.tolist.tolist.tolist", "range", "numpy.searchsorted", "numpy.array", "datetime.datetime.now", "range", "numpy.cumsum", "numpy.cumsum", "enumerate", "numpy.spacing"], "methods", ["None"], ["", "def", "accumulate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Accumulate per image evaluation results and store the result in\n        self.eval.\n        \"\"\"", "\n", "self", ".", "logger", ".", "info", "(", "\"Accumulating evaluation results.\"", ")", "\n", "\n", "if", "not", "self", ".", "eval_imgs", ":", "\n", "            ", "self", ".", "logger", ".", "warn", "(", "\"Please run evaluate first.\"", ")", "\n", "\n", "", "if", "self", ".", "params", ".", "use_cats", ":", "\n", "            ", "cat_ids", "=", "self", ".", "params", ".", "cat_ids", "\n", "", "else", ":", "\n", "            ", "cat_ids", "=", "[", "-", "1", "]", "\n", "\n", "", "num_thrs", "=", "len", "(", "self", ".", "params", ".", "iou_thrs", ")", "\n", "num_recalls", "=", "len", "(", "self", ".", "params", ".", "rec_thrs", ")", "\n", "num_cats", "=", "len", "(", "cat_ids", ")", "\n", "num_area_rngs", "=", "len", "(", "self", ".", "params", ".", "area_rng", ")", "\n", "num_imgs", "=", "len", "(", "self", ".", "params", ".", "img_ids", ")", "\n", "\n", "# -1 for absent categories", "\n", "precision", "=", "-", "np", ".", "ones", "(", "\n", "(", "num_thrs", ",", "num_recalls", ",", "num_cats", ",", "num_area_rngs", ")", "\n", ")", "\n", "recall", "=", "-", "np", ".", "ones", "(", "(", "num_thrs", ",", "num_cats", ",", "num_area_rngs", ")", ")", "\n", "\n", "# Initialize dt_pointers", "\n", "dt_pointers", "=", "{", "}", "\n", "for", "cat_idx", "in", "range", "(", "num_cats", ")", ":", "\n", "            ", "dt_pointers", "[", "cat_idx", "]", "=", "{", "}", "\n", "for", "area_idx", "in", "range", "(", "num_area_rngs", ")", ":", "\n", "                ", "dt_pointers", "[", "cat_idx", "]", "[", "area_idx", "]", "=", "{", "}", "\n", "\n", "# Per category evaluation", "\n", "", "", "for", "cat_idx", "in", "range", "(", "num_cats", ")", ":", "\n", "# if cat_idx ==3:", "\n", "#     print('df')", "\n", "            ", "Nk", "=", "cat_idx", "*", "num_area_rngs", "*", "num_imgs", "\n", "for", "area_idx", "in", "range", "(", "num_area_rngs", ")", ":", "\n", "                ", "Na", "=", "area_idx", "*", "num_imgs", "\n", "E", "=", "[", "\n", "self", ".", "eval_imgs", "[", "Nk", "+", "Na", "+", "img_idx", "]", "\n", "for", "img_idx", "in", "range", "(", "num_imgs", ")", "\n", "]", "\n", "# Remove elements which are None", "\n", "E", "=", "[", "e", "for", "e", "in", "E", "if", "not", "e", "is", "None", "]", "\n", "if", "len", "(", "E", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "# Append all scores: shape (N,)", "\n", "", "dt_scores", "=", "np", ".", "concatenate", "(", "[", "e", "[", "\"dt_scores\"", "]", "for", "e", "in", "E", "]", ",", "axis", "=", "0", ")", "\n", "dt_ids", "=", "np", ".", "concatenate", "(", "[", "e", "[", "\"dt_ids\"", "]", "for", "e", "in", "E", "]", ",", "axis", "=", "0", ")", "\n", "\n", "dt_idx", "=", "np", ".", "argsort", "(", "-", "dt_scores", ",", "kind", "=", "\"mergesort\"", ")", "\n", "dt_scores", "=", "dt_scores", "[", "dt_idx", "]", "\n", "dt_ids", "=", "dt_ids", "[", "dt_idx", "]", "\n", "\n", "dt_m", "=", "np", ".", "concatenate", "(", "[", "e", "[", "\"dt_matches\"", "]", "for", "e", "in", "E", "]", ",", "axis", "=", "1", ")", "[", ":", ",", "dt_idx", "]", "\n", "dt_ig", "=", "np", ".", "concatenate", "(", "[", "e", "[", "\"dt_ignore\"", "]", "for", "e", "in", "E", "]", ",", "axis", "=", "1", ")", "[", ":", ",", "dt_idx", "]", "\n", "\n", "gt_ig", "=", "np", ".", "concatenate", "(", "[", "e", "[", "\"gt_ignore\"", "]", "for", "e", "in", "E", "]", ")", "\n", "# num gt anns to consider", "\n", "num_gt", "=", "np", ".", "count_nonzero", "(", "gt_ig", "==", "0", ")", "\n", "\n", "if", "num_gt", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "tps", "=", "np", ".", "logical_and", "(", "dt_m", ",", "np", ".", "logical_not", "(", "dt_ig", ")", ")", "\n", "fps", "=", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "dt_m", ")", ",", "np", ".", "logical_not", "(", "dt_ig", ")", ")", "\n", "\n", "tp_sum", "=", "np", ".", "cumsum", "(", "tps", ",", "axis", "=", "1", ")", ".", "astype", "(", "dtype", "=", "np", ".", "float", ")", "\n", "fp_sum", "=", "np", ".", "cumsum", "(", "fps", ",", "axis", "=", "1", ")", ".", "astype", "(", "dtype", "=", "np", ".", "float", ")", "\n", "\n", "dt_pointers", "[", "cat_idx", "]", "[", "area_idx", "]", "=", "{", "\n", "\"dt_ids\"", ":", "dt_ids", ",", "\n", "\"tps\"", ":", "tps", ",", "\n", "\"fps\"", ":", "fps", ",", "\n", "}", "\n", "\n", "for", "iou_thr_idx", ",", "(", "tp", ",", "fp", ")", "in", "enumerate", "(", "zip", "(", "tp_sum", ",", "fp_sum", ")", ")", ":", "\n", "                    ", "tp", "=", "np", ".", "array", "(", "tp", ")", "\n", "fp", "=", "np", ".", "array", "(", "fp", ")", "\n", "num_tp", "=", "len", "(", "tp", ")", "\n", "rc", "=", "tp", "/", "num_gt", "\n", "if", "num_tp", ":", "\n", "                        ", "recall", "[", "iou_thr_idx", ",", "cat_idx", ",", "area_idx", "]", "=", "rc", "[", "\n", "-", "1", "\n", "]", "\n", "", "else", ":", "\n", "                        ", "recall", "[", "iou_thr_idx", ",", "cat_idx", ",", "area_idx", "]", "=", "0", "\n", "\n", "# np.spacing(1) ~= eps", "\n", "", "pr", "=", "tp", "/", "(", "fp", "+", "tp", "+", "np", ".", "spacing", "(", "1", ")", ")", "\n", "pr", "=", "pr", ".", "tolist", "(", ")", "\n", "\n", "# Replace each precision value with the maximum precision", "\n", "# value to the right of that recall level. This ensures", "\n", "# that the  calculated AP value will be less suspectable", "\n", "# to small variations in the ranking.", "\n", "for", "i", "in", "range", "(", "num_tp", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "                        ", "if", "pr", "[", "i", "]", ">", "pr", "[", "i", "-", "1", "]", ":", "\n", "                            ", "pr", "[", "i", "-", "1", "]", "=", "pr", "[", "i", "]", "\n", "\n", "", "", "rec_thrs_insert_idx", "=", "np", ".", "searchsorted", "(", "\n", "rc", ",", "self", ".", "params", ".", "rec_thrs", ",", "side", "=", "\"left\"", "\n", ")", "\n", "\n", "pr_at_recall", "=", "[", "0.0", "]", "*", "num_recalls", "\n", "\n", "try", ":", "\n", "                        ", "for", "_idx", ",", "pr_idx", "in", "enumerate", "(", "rec_thrs_insert_idx", ")", ":", "\n", "                            ", "pr_at_recall", "[", "_idx", "]", "=", "pr", "[", "pr_idx", "]", "\n", "", "", "except", ":", "\n", "                        ", "pass", "\n", "", "precision", "[", "iou_thr_idx", ",", ":", ",", "cat_idx", ",", "area_idx", "]", "=", "np", ".", "array", "(", "pr_at_recall", ")", "\n", "\n", "", "", "", "self", ".", "eval", "=", "{", "\n", "\"params\"", ":", "self", ".", "params", ",", "\n", "\"counts\"", ":", "[", "num_thrs", ",", "num_recalls", ",", "num_cats", ",", "num_area_rngs", "]", ",", "\n", "\"date\"", ":", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ")", ",", "\n", "\"precision\"", ":", "precision", ",", "\n", "\"recall\"", ":", "recall", ",", "\n", "\"dt_pointers\"", ":", "dt_pointers", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._summarize": [[430, 460], ["len", "numpy.mean", "enumerate", "numpy.where", "numpy.where"], "methods", ["None"], ["", "def", "_summarize", "(", "\n", "self", ",", "summary_type", ",", "iou_thr", "=", "None", ",", "area_rng", "=", "\"all\"", ",", "freq_group_idx", "=", "None", "\n", ")", ":", "\n", "        ", "aidx", "=", "[", "\n", "idx", "\n", "for", "idx", ",", "_area_rng", "in", "enumerate", "(", "self", ".", "params", ".", "area_rng_lbl", ")", "\n", "if", "_area_rng", "==", "area_rng", "\n", "]", "\n", "\n", "if", "summary_type", "==", "'ap'", ":", "\n", "            ", "s", "=", "self", ".", "eval", "[", "\"precision\"", "]", "\n", "if", "iou_thr", "is", "not", "None", ":", "\n", "                ", "tidx", "=", "np", ".", "where", "(", "iou_thr", "==", "self", ".", "params", ".", "iou_thrs", ")", "[", "0", "]", "\n", "s", "=", "s", "[", "tidx", "]", "\n", "", "if", "freq_group_idx", "is", "not", "None", ":", "\n", "                ", "s", "=", "s", "[", ":", ",", ":", ",", "self", ".", "freq_groups", "[", "freq_group_idx", "]", ",", "aidx", "]", "\n", "", "else", ":", "\n", "                ", "s", "=", "s", "[", ":", ",", ":", ",", ":", ",", "aidx", "]", "\n", "", "", "else", ":", "\n", "            ", "s", "=", "self", ".", "eval", "[", "\"recall\"", "]", "\n", "if", "iou_thr", "is", "not", "None", ":", "\n", "                ", "tidx", "=", "np", ".", "where", "(", "iou_thr", "==", "self", ".", "params", ".", "iou_thrs", ")", "[", "0", "]", "\n", "s", "=", "s", "[", "tidx", "]", "\n", "", "s", "=", "s", "[", ":", ",", ":", ",", "aidx", "]", "\n", "\n", "", "if", "len", "(", "s", "[", "s", ">", "-", "1", "]", ")", "==", "0", ":", "\n", "            ", "mean_s", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "mean_s", "=", "np", ".", "mean", "(", "s", "[", "s", ">", "-", "1", "]", ")", "\n", "", "return", "mean_s", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._summarize_per_cate": [[461, 487], ["list", "map", "enumerate", "numpy.split", "numpy.where", "numpy.where", "numpy.mean"], "methods", ["None"], ["", "def", "_summarize_per_cate", "(", "\n", "self", ",", "summary_type", ",", "iou_thr", "=", "None", ",", "area_rng", "=", "\"all\"", ",", "freq_group_idx", "=", "None", "\n", ")", ":", "\n", "        ", "aidx", "=", "[", "\n", "idx", "\n", "for", "idx", ",", "_area_rng", "in", "enumerate", "(", "self", ".", "params", ".", "area_rng_lbl", ")", "\n", "if", "_area_rng", "==", "area_rng", "\n", "]", "\n", "\n", "if", "summary_type", "==", "'ap'", ":", "\n", "            ", "s", "=", "self", ".", "eval", "[", "\"precision\"", "]", "\n", "if", "iou_thr", "is", "not", "None", ":", "\n", "                ", "tidx", "=", "np", ".", "where", "(", "iou_thr", "==", "self", ".", "params", ".", "iou_thrs", ")", "[", "0", "]", "\n", "s", "=", "s", "[", "tidx", "]", "\n", "", "if", "freq_group_idx", "is", "not", "None", ":", "\n", "                ", "s", "=", "s", "[", ":", ",", ":", ",", "self", ".", "freq_groups", "[", "freq_group_idx", "]", ",", "aidx", "]", "\n", "", "else", ":", "\n", "                ", "s", "=", "s", "[", ":", ",", ":", ",", ":", ",", "aidx", "]", "\n", "", "", "else", ":", "\n", "            ", "s", "=", "self", ".", "eval", "[", "\"recall\"", "]", "\n", "if", "iou_thr", "is", "not", "None", ":", "\n", "                ", "tidx", "=", "np", ".", "where", "(", "iou_thr", "==", "self", ".", "params", ".", "iou_thrs", ")", "[", "0", "]", "\n", "s", "=", "s", "[", "tidx", "]", "\n", "", "s", "=", "s", "[", ":", ",", ":", ",", "aidx", "]", "\n", "\n", "", "return", "list", "(", "map", "(", "lambda", "s", ":", "np", ".", "mean", "(", "s", "[", "s", ">", "-", "1", "]", ")", ",", "np", ".", "split", "(", "s", ",", "1230", ",", "axis", "=", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.summarize": [[489, 514], ["eval.LVISEval._summarize_per_cate", "eval.LVISEval._summarize", "eval.LVISEval._summarize", "eval.LVISEval._summarize", "eval.LVISEval._summarize", "eval.LVISEval._summarize", "eval.LVISEval._summarize", "eval.LVISEval._summarize", "eval.LVISEval._summarize", "eval.LVISEval._summarize", "eval.LVISEval._summarize", "RuntimeError", "eval.LVISEval._summarize"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._summarize_per_cate", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._summarize", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._summarize", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._summarize", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._summarize", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._summarize", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._summarize", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._summarize", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._summarize", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._summarize", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._summarize", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval._summarize"], ["", "def", "summarize", "(", "self", ")", ":", "\n", "        ", "\"\"\"Compute and display summary metrics for evaluation results.\"\"\"", "\n", "if", "not", "self", ".", "eval", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Please run accumulate() first.\"", ")", "\n", "\n", "", "max_dets", "=", "self", ".", "params", ".", "max_dets", "\n", "\n", "self", ".", "results", "[", "\"AP_per_cate\"", "]", "=", "self", ".", "_summarize_per_cate", "(", "'ap'", ")", "\n", "self", ".", "results", "[", "\"AP\"", "]", "=", "self", ".", "_summarize", "(", "'ap'", ")", "\n", "self", ".", "results", "[", "\"AP50\"", "]", "=", "self", ".", "_summarize", "(", "'ap'", ",", "iou_thr", "=", "0.50", ")", "\n", "self", ".", "results", "[", "\"AP75\"", "]", "=", "self", ".", "_summarize", "(", "'ap'", ",", "iou_thr", "=", "0.75", ")", "\n", "self", ".", "results", "[", "\"APs\"", "]", "=", "self", ".", "_summarize", "(", "'ap'", ",", "area_rng", "=", "\"small\"", ")", "\n", "self", ".", "results", "[", "\"APm\"", "]", "=", "self", ".", "_summarize", "(", "'ap'", ",", "area_rng", "=", "\"medium\"", ")", "\n", "self", ".", "results", "[", "\"APl\"", "]", "=", "self", ".", "_summarize", "(", "'ap'", ",", "area_rng", "=", "\"large\"", ")", "\n", "self", ".", "results", "[", "\"APr\"", "]", "=", "self", ".", "_summarize", "(", "'ap'", ",", "freq_group_idx", "=", "0", ")", "\n", "self", ".", "results", "[", "\"APc\"", "]", "=", "self", ".", "_summarize", "(", "'ap'", ",", "freq_group_idx", "=", "1", ")", "\n", "self", ".", "results", "[", "\"APf\"", "]", "=", "self", ".", "_summarize", "(", "'ap'", ",", "freq_group_idx", "=", "2", ")", "\n", "\n", "\n", "key", "=", "\"AR@{}\"", ".", "format", "(", "max_dets", ")", "\n", "self", ".", "results", "[", "key", "]", "=", "self", ".", "_summarize", "(", "'ar'", ")", "\n", "\n", "for", "area_rng", "in", "[", "\"small\"", ",", "\"medium\"", ",", "\"large\"", "]", ":", "\n", "            ", "key", "=", "\"AR{}@{}\"", ".", "format", "(", "area_rng", "[", "0", "]", ",", "max_dets", ")", "\n", "self", ".", "results", "[", "key", "]", "=", "self", ".", "_summarize", "(", "'ar'", ",", "area_rng", "=", "area_rng", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.run": [[515, 520], ["eval.LVISEval.evaluate", "eval.LVISEval.accumulate", "eval.LVISEval.summarize"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.evaluate", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.accumulate", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.summarize"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Wrapper function which calculates the results.\"\"\"", "\n", "self", ".", "evaluate", "(", ")", "\n", "self", ".", "accumulate", "(", ")", "\n", "self", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.print_results": [[522, 631], ["eval.LVISEval.results.items", "pickle.load", "open", "key[].isdigit", "print", "numpy.array", "numpy.argsort", "eval.LVISEval.print_results.bAP"], "methods", ["None"], ["", "def", "print_results", "(", "self", ",", "f", "=", "10", ",", "m", "=", "3", ")", ":", "\n", "        ", "template", "=", "\" {:<18} {} @[ IoU={:<9} | area={:>6s} | maxDets={:>3d} catIds={:>3s}] = {:0.3f}\"", "\n", "\n", "for", "key", ",", "value", "in", "self", ".", "results", ".", "items", "(", ")", ":", "##drawing ap and per class training/val ins statistics for all classes", "\n", "            ", "max_dets", "=", "self", ".", "params", ".", "max_dets", "\n", "cate_info_train", "=", "pickle", ".", "load", "(", "open", "(", "'./lvis_train_cate_info.pt'", ",", "'rb'", ")", ")", "\n", "\n", "if", "\"AP\"", "in", "key", ":", "\n", "                ", "title", "=", "\"Average Precision\"", "\n", "_type", "=", "\"(AP)\"", "\n", "", "else", ":", "\n", "                ", "title", "=", "\"Average Recall\"", "\n", "_type", "=", "\"(AR)\"", "\n", "\n", "", "if", "len", "(", "key", ")", ">", "2", "and", "key", "[", "2", "]", ".", "isdigit", "(", ")", ":", "\n", "                ", "iou_thr", "=", "(", "float", "(", "key", "[", "2", ":", "]", ")", "/", "100", ")", "\n", "iou", "=", "\"{:0.2f}\"", ".", "format", "(", "iou_thr", ")", "\n", "", "else", ":", "\n", "                ", "iou", "=", "\"{:0.2f}:{:0.2f}\"", ".", "format", "(", "\n", "self", ".", "params", ".", "iou_thrs", "[", "0", "]", ",", "self", ".", "params", ".", "iou_thrs", "[", "-", "1", "]", "\n", ")", "\n", "\n", "", "if", "len", "(", "key", ")", ">", "2", "and", "key", "[", "2", "]", "in", "[", "\"r\"", ",", "\"c\"", ",", "\"f\"", "]", ":", "\n", "                ", "cat_group_name", "=", "key", "[", "2", "]", "\n", "", "else", ":", "\n", "                ", "cat_group_name", "=", "\"all\"", "\n", "\n", "", "if", "len", "(", "key", ")", ">", "2", "and", "key", "[", "2", "]", "in", "[", "\"s\"", ",", "\"m\"", ",", "\"l\"", "]", ":", "\n", "                ", "area_rng", "=", "key", "[", "2", "]", "\n", "", "else", ":", "\n", "                ", "area_rng", "=", "\"all\"", "\n", "\n", "", "if", "key", "!=", "'AP_per_cate'", ":", "\n", "                ", "print", "(", "template", ".", "format", "(", "title", ",", "_type", ",", "iou", ",", "area_rng", ",", "max_dets", ",", "cat_group_name", ",", "value", ")", ")", "\n", "\n", "", "else", ":", "\n", "# ar_per_cate_array = pickle.load(open('./lvis_maskrcnn_r50fpn.pkl_per_cat_recall.pt', 'rb'))", "\n", "\n", "                ", "ap_per_cate_array", "=", "np", ".", "array", "(", "self", ".", "results", "[", "'AP_per_cate'", "]", ")", "\n", "\n", "val_categories_val_info", "=", "[", "item_val", "for", "idx", ",", "(", "item_val", ",", "item_train", ")", "in", "\n", "enumerate", "(", "zip", "(", "self", ".", "lvis_gt", ".", "dataset", "[", "'categories'", "]", ",", "cate_info_train", ")", ")", "\n", "if", "item_val", "[", "'instance_count'", "]", ">", "0", "]", "\n", "val_categories_train_info", "=", "[", "item_train", "for", "idx", ",", "(", "item_val", ",", "item_train", ")", "in", "\n", "enumerate", "(", "zip", "(", "self", ".", "lvis_gt", ".", "dataset", "[", "'categories'", "]", ",", "cate_info_train", ")", ")", "\n", "if", "item_val", "[", "'instance_count'", "]", ">", "0", "]", "\n", "\n", "[", "item", ".", "update", "(", "{", "'ap'", ":", "ap_per_cate_array", "[", "item", "[", "'id'", "]", "-", "1", "]", "}", ")", "for", "i", ",", "item", "in", "enumerate", "(", "val_categories_val_info", ")", "]", "\n", "# [item.update({'ar': ar_per_cate_array[item['id']]}) for i,item in enumerate(exist_categories_in_val)]", "\n", "\n", "#use the index returned from argsort to sort both val and train cats as sorted function would have different index", "\n", "# exist_categories_in_val_sorted_on_inscount = sorted(exist_categories_in_val, key=lambda x: x['instance_count'])", "\n", "\n", "sorting_index", "=", "np", ".", "argsort", "(", "[", "item", "[", "'instance_count'", "]", "for", "item", "in", "val_categories_val_info", "]", ")", "\n", "exist_categories_in_val_sorted_on_inscount", "=", "[", "val_categories_val_info", "[", "sorting_index", "[", "i", "]", "]", "for", "i", "in", "\n", "range", "(", "len", "(", "sorting_index", ")", ")", "]", "\n", "exist_categories_in_val_sorted_on_inscount_in_train", "=", "[", "val_categories_train_info", "[", "sorting_index", "[", "i", "]", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "sorting_index", ")", ")", "]", "\n", "\n", "exist_categories_in_val_ap_sorted", "=", "[", "item", "[", "'ap'", "]", "for", "item", "in", "exist_categories_in_val_sorted_on_inscount", "]", "\n", "# exist_categories_in_val_ar_sorted = [item['ar'] for item in exist_categories_in_val_sorted_on_inscount]", "\n", "\n", "exist_categories_in_val_ins_count", "=", "[", "item", "[", "'instance_count'", "]", "for", "item", "in", "exist_categories_in_val_sorted_on_inscount", "]", "\n", "exist_categories_in_val_in_train_ins_count", "=", "[", "item", "[", "'instance_count'", "]", "for", "item", "in", "exist_categories_in_val_sorted_on_inscount_in_train", "]", "\n", "\n", "\n", "##", "\n", "\n", "def", "bAP", "(", "ap_per_cat_sorted_on_train_insnum", ",", "ins_num_sorted", ",", "f", ",", "m", ")", ":", "\n", "                    ", "bin_aps", "=", "[", "]", "\n", "bin_ins_nums", "=", "[", "]", "\n", "for", "bin_id", "in", "range", "(", "m", "+", "1", ")", ":", "\n", "                        ", "if", "bin_id", "==", "0", ":", "\n", "                            ", "inds", "=", "np", ".", "array", "(", "ins_num_sorted", ")", "<", "f", "\n", "bin_ins_nums", ".", "append", "(", "np", ".", "array", "(", "ap_per_cat_sorted_on_train_insnum", ")", "[", "inds", "]", ".", "size", ")", "\n", "bin_aps", ".", "append", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "ap_per_cat_sorted_on_train_insnum", ")", "[", "inds", "]", ")", ")", "\n", "", "elif", "bin_id", "==", "m", ":", "\n", "                            ", "inds", "=", "np", ".", "logical_and", "(", "np", ".", "array", "(", "ins_num_sorted", ")", ">=", "f", "**", "m", ",", "\n", "np", ".", "array", "(", "ins_num_sorted", ")", "<=", "ins_num_sorted", "[", "-", "1", "]", ")", "\n", "bin_ins_nums", ".", "append", "(", "np", ".", "array", "(", "ap_per_cat_sorted_on_train_insnum", ")", "[", "inds", "]", ".", "size", ")", "\n", "bin_aps", ".", "append", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "ap_per_cat_sorted_on_train_insnum", ")", "[", "inds", "]", ")", ")", "\n", "", "else", ":", "\n", "                            ", "inds", "=", "np", ".", "logical_and", "(", "np", ".", "array", "(", "ins_num_sorted", ")", ">=", "f", "**", "bin_id", ",", "\n", "np", ".", "array", "(", "ins_num_sorted", ")", "<", "f", "**", "(", "bin_id", "+", "1", ")", ")", "\n", "bin_ins_nums", ".", "append", "(", "np", ".", "array", "(", "ap_per_cat_sorted_on_train_insnum", ")", "[", "inds", "]", ".", "size", ")", "\n", "bin_aps", ".", "append", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "ap_per_cat_sorted_on_train_insnum", ")", "[", "inds", "]", ")", ")", "\n", "", "", "eap", "=", "np", ".", "mean", "(", "bin_aps", ")", "\n", "return", "bin_aps", ",", "bin_ins_nums", ",", "eap", "\n", "\n", "## bAP sensitivity analysis", "\n", "# bins = []", "\n", "# for i in [8, 9, 10, 11, 12, 13, 14, 15]:", "\n", "#     bin_aps, bin_ins_nums, eap = bAP(exist_categories_in_val_ap_sorted,", "\n", "#                                      exist_categories_in_val_in_train_ins_count, i, 3)", "\n", "#     bins.append(eap)", "\n", "\n", "## calculate bAP", "\n", "", "bin_aps", ",", "bin_ins_nums", ",", "eap", "=", "bAP", "(", "exist_categories_in_val_ap_sorted", ",", "\n", "exist_categories_in_val_in_train_ins_count", ",", "f", ",", "m", ")", "\n", "\n", "for", "i", ",", "bin_ap", "in", "enumerate", "(", "bin_aps", ")", ":", "\n", "                    ", "if", "i", "==", "0", ":", "\n", "                        ", "print", "(", "'bin {}_{} AP: {}'", ".", "format", "(", "0", ",", "f", "**", "(", "i", "+", "1", ")", ",", "bin_ap", ")", ")", "\n", "", "elif", "i", "==", "len", "(", "bin_aps", ")", "-", "1", ":", "\n", "                        ", "print", "(", "'bin {}_* AP: {}'", ".", "format", "(", "f", "**", "i", ",", "bin_ap", ")", ")", "\n", "", "else", ":", "\n", "                        ", "print", "(", "'bin {}_{} AP: {}'", ".", "format", "(", "f", "**", "i", ",", "f", "**", "(", "i", "+", "1", ")", ",", "bin_ap", ")", ")", "\n", "\n", "", "", "print", "(", "'bAP {}'", ".", "format", "(", "eap", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.LVISEval.get_results": [[633, 637], ["eval.LVISEval.logger.warn"], "methods", ["None"], ["", "", "", "def", "get_results", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "results", ":", "\n", "            ", "self", ".", "logger", ".", "warn", "(", "\"results is empty. Call run().\"", ")", "\n", "", "return", "self", ".", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.eval.Params.__init__": [[640, 668], ["numpy.linspace", "numpy.linspace", "numpy.round", "numpy.round"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "iou_type", ")", ":", "\n", "        ", "\"\"\"Params for LVIS evaluation API.\"\"\"", "\n", "self", ".", "img_ids", "=", "[", "]", "\n", "self", ".", "cat_ids", "=", "[", "]", "\n", "# np.arange causes trouble.  the data point on arange is slightly", "\n", "# larger than the true value", "\n", "self", ".", "iou_thrs", "=", "np", ".", "linspace", "(", "\n", "0.5", ",", "0.95", ",", "np", ".", "round", "(", "(", "0.95", "-", "0.5", ")", "/", "0.05", ")", "+", "1", ",", "endpoint", "=", "True", "\n", ")", "\n", "self", ".", "rec_thrs", "=", "np", ".", "linspace", "(", "\n", "0.0", ",", "1.00", ",", "np", ".", "round", "(", "(", "1.00", "-", "0.0", ")", "/", "0.01", ")", "+", "1", ",", "endpoint", "=", "True", "\n", ")", "\n", "self", ".", "max_dets", "=", "300", "\n", "self", ".", "area_rng", "=", "[", "\n", "[", "0", "**", "2", ",", "1e5", "**", "2", "]", ",", "\n", "[", "0", "**", "2", ",", "32", "**", "2", "]", ",", "\n", "[", "32", "**", "2", ",", "96", "**", "2", "]", ",", "\n", "[", "96", "**", "2", ",", "1e5", "**", "2", "]", ",", "\n", "]", "\n", "self", ".", "area_rng_lbl", "=", "[", "\"all\"", ",", "\"small\"", ",", "\"medium\"", ",", "\"large\"", "]", "\n", "self", ".", "use_cats", "=", "1", "\n", "# We bin categories in three bins based how many images of the training", "\n", "# set the category is present in.", "\n", "# r: Rare    :  < 10", "\n", "# c: Common  : >= 10 and < 100", "\n", "# f: Frequent: >= 100", "\n", "self", ".", "img_count_lbl", "=", "[", "\"r\"", ",", "\"c\"", ",", "\"f\"", "]", "\n", "self", ".", "iou_type", "=", "iou_type", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.results.LVISResults.__init__": [[10, 72], ["isinstance", "logging.getLogger", "results.LVISResults.logger.info", "isinstance", "isinstance", "results.LVISResults._create_index", "copy.deepcopy", "isinstance", "results.LVISResults._load_json", "results.LVISResults.logger.warn", "results.LVISResults.limit_dets_per_image", "enumerate", "set", "results.LVISResults._load_json", "TypeError", "enumerate", "set", "set", "pycocotools.area", "results.LVISResults.get_img_ids", "pycocotools.toBbox"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS._create_index", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS._load_json", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.results.LVISResults.limit_dets_per_image", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS._load_json", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_img_ids"], ["    ", "def", "__init__", "(", "self", ",", "lvis_gt", ",", "results", ",", "max_dets", "=", "300", ")", ":", "\n", "        ", "\"\"\"Constructor for LVIS results.\n        Args:\n            lvis_gt (LVIS class instance, or str containing path of\n            annotation file)\n            results (str containing path of result file or a list of dicts)\n            max_dets (int):  max number of detections per image. The official\n            value of max_dets for LVIS is 300.\n        \"\"\"", "\n", "if", "isinstance", "(", "lvis_gt", ",", "LVIS", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "deepcopy", "(", "lvis_gt", ".", "dataset", ")", "\n", "", "elif", "isinstance", "(", "lvis_gt", ",", "str", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "self", ".", "_load_json", "(", "lvis_gt", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"Unsupported type {} of lvis_gt.\"", ".", "format", "(", "lvis_gt", ")", ")", "\n", "\n", "", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Loading and preparing results.\"", ")", "\n", "\n", "if", "isinstance", "(", "results", ",", "str", ")", ":", "\n", "            ", "result_anns", "=", "self", ".", "_load_json", "(", "results", ")", "\n", "", "else", ":", "\n", "# this path way is provided to avoid saving and loading result", "\n", "# during training.", "\n", "            ", "self", ".", "logger", ".", "warn", "(", "\"Assuming user provided the results in correct format.\"", ")", "\n", "result_anns", "=", "results", "\n", "\n", "", "assert", "isinstance", "(", "result_anns", ",", "list", ")", ",", "\"results is not a list.\"", "\n", "\n", "if", "max_dets", ">=", "0", ":", "\n", "            ", "result_anns", "=", "self", ".", "limit_dets_per_image", "(", "result_anns", ",", "max_dets", ")", "\n", "\n", "", "if", "\"bbox\"", "in", "result_anns", "[", "0", "]", ":", "\n", "            ", "for", "id", ",", "ann", "in", "enumerate", "(", "result_anns", ")", ":", "\n", "                ", "x1", ",", "y1", ",", "w", ",", "h", "=", "ann", "[", "\"bbox\"", "]", "\n", "x2", "=", "x1", "+", "w", "\n", "y2", "=", "y1", "+", "h", "\n", "\n", "if", "\"segmentation\"", "not", "in", "ann", ":", "\n", "                    ", "ann", "[", "\"segmentation\"", "]", "=", "[", "[", "x1", ",", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "y2", ",", "x2", ",", "y1", "]", "]", "\n", "\n", "", "ann", "[", "\"area\"", "]", "=", "w", "*", "h", "\n", "ann", "[", "\"id\"", "]", "=", "id", "+", "1", "\n", "\n", "", "", "elif", "\"segmentation\"", "in", "result_anns", "[", "0", "]", ":", "\n", "            ", "for", "id", ",", "ann", "in", "enumerate", "(", "result_anns", ")", ":", "\n", "# Only support compressed RLE format as segmentation results", "\n", "                ", "ann", "[", "\"area\"", "]", "=", "mask_utils", ".", "area", "(", "ann", "[", "\"segmentation\"", "]", ")", "\n", "\n", "if", "\"bbox\"", "not", "in", "ann", ":", "\n", "                    ", "ann", "[", "\"bbox\"", "]", "=", "mask_utils", ".", "toBbox", "(", "ann", "[", "\"segmentation\"", "]", ")", "\n", "\n", "", "ann", "[", "\"id\"", "]", "=", "id", "+", "1", "\n", "\n", "", "", "self", ".", "dataset", "[", "\"annotations\"", "]", "=", "result_anns", "\n", "self", ".", "_create_index", "(", ")", "\n", "\n", "img_ids_in_result", "=", "[", "ann", "[", "\"image_id\"", "]", "for", "ann", "in", "result_anns", "]", "\n", "\n", "assert", "set", "(", "img_ids_in_result", ")", "==", "(", "\n", "set", "(", "img_ids_in_result", ")", "&", "set", "(", "self", ".", "get_img_ids", "(", ")", ")", "\n", ")", ",", "\"Results do not correspond to current LVIS set.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.results.LVISResults.limit_dets_per_image": [[73, 85], ["collections.defaultdict", "collections.defaultdict.items", "img_ann[].append", "sorted", "len", "collections.defaultdict.values"], "methods", ["None"], ["", "def", "limit_dets_per_image", "(", "self", ",", "anns", ",", "max_dets", ")", ":", "\n", "        ", "img_ann", "=", "defaultdict", "(", "list", ")", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "img_ann", "[", "ann", "[", "\"image_id\"", "]", "]", ".", "append", "(", "ann", ")", "\n", "\n", "", "for", "img_id", ",", "_anns", "in", "img_ann", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "_anns", ")", "<=", "max_dets", ":", "\n", "                ", "continue", "\n", "", "_anns", "=", "sorted", "(", "_anns", ",", "key", "=", "lambda", "ann", ":", "ann", "[", "\"score\"", "]", ",", "reverse", "=", "True", ")", "\n", "img_ann", "[", "img_id", "]", "=", "_anns", "[", ":", "max_dets", "]", "\n", "\n", "", "return", "[", "ann", "for", "anns", "in", "img_ann", ".", "values", "(", ")", "for", "ann", "in", "anns", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.results.LVISResults.get_top_results": [[86, 90], ["results.LVISResults.get_ann_ids", "results.LVISResults.load_anns", "list", "filter"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_ann_ids", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.load_anns"], ["", "def", "get_top_results", "(", "self", ",", "img_id", ",", "score_thrs", ")", ":", "\n", "        ", "ann_ids", "=", "self", ".", "get_ann_ids", "(", "img_ids", "=", "[", "img_id", "]", ")", "\n", "anns", "=", "self", ".", "load_anns", "(", "ann_ids", ")", "\n", "return", "list", "(", "filter", "(", "lambda", "ann", ":", "ann", "[", "\"score\"", "]", ">", "score_thrs", ",", "anns", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.__init__": [[23, 37], ["logging.getLogger", "lvis.LVIS.logger.info", "lvis.LVIS._load_json", "lvis.LVIS._create_index", "type", "type"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS._load_json", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS._create_index"], ["info", "[", "'filename'", "]", "=", "info", "[", "'file_name'", "]", "\n", "img_infos", ".", "append", "(", "info", ")", "\n", "", "return", "img_infos", "\n", "\n", "", "def", "get_ann_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "img_infos", "[", "idx", "]", "[", "'id'", "]", "\n", "ann_ids", "=", "self", ".", "lvis", ".", "get_ann_ids", "(", "img_ids", "=", "[", "img_id", "]", ")", "\n", "ann_info", "=", "self", ".", "lvis", ".", "load_anns", "(", "ann_ids", ")", "\n", "return", "self", ".", "_parse_ann_info", "(", "ann_info", ",", "self", ".", "with_mask", ")", "\n", "\n", "\n", "", "def", "_filter_imgs", "(", "self", ",", "min_size", "=", "32", ")", ":", "\n", "        ", "\"\"\"Filter images too small or without ground truths.\"\"\"", "\n", "valid_inds", "=", "[", "]", "\n", "ids_with_ann", "=", "set", "(", "_", "[", "'image_id'", "]", "for", "_", "in", "self", ".", "lvis", ".", "anns", ".", "values", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS._load_json": [[38, 41], ["open", "json.load"], "methods", ["None"], ["for", "i", ",", "img_info", "in", "enumerate", "(", "self", ".", "img_infos", ")", ":", "\n", "            ", "if", "self", ".", "img_ids", "[", "i", "]", "not", "in", "ids_with_ann", ":", "\n", "                ", "continue", "\n", "", "if", "min", "(", "img_info", "[", "'width'", "]", ",", "img_info", "[", "'height'", "]", ")", ">=", "min_size", ":", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS._create_index": [[162, 186], ["lvis.LVIS.logger.info", "collections.defaultdict", "collections.defaultdict", "lvis.LVIS.logger.info", "lvis.LVIS.img_ann_map[].append", "lvis.LVIS.cat_img_map[].append"], "methods", ["None"], []], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_ann_ids": [[187, 222], ["set", "anns.extend", "float"], "methods", ["None"], []], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_cat_ids": [[223, 230], ["list", "lvis.LVIS.cats.keys"], "methods", ["None"], []], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_img_ids": [[231, 238], ["list", "sorted", "lvis.LVIS.imgs.keys"], "methods", ["None"], []], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS._load_helper": [[240, 245], ["list", "_dict.values"], "methods", ["None"], []], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.load_anns": [[246, 256], ["lvis.LVIS._load_helper"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS._load_helper"], []], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.load_cats": [[257, 268], ["lvis.LVIS._load_helper"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS._load_helper"], []], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.load_imgs": [[269, 279], ["lvis.LVIS._load_helper"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS._load_helper"], []], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.download": [[280, 295], ["lvis.LVIS.load_imgs", "os.path.exists", "os.makedirs", "os.path.join", "os.path.exists", "urllib.request.urlretrieve"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.load_imgs"], []], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.ann_to_rle": [[296, 319], ["isinstance", "pycocotools.frPyObjects", "pycocotools.merge", "isinstance", "pycocotools.frPyObjects"], "methods", ["None"], []], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.ann_to_mask": [[320, 331], ["lvis.LVIS.ann_to_rle", "pycocotools.decode"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.ann_to_rle"], []], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.showanns": [[332, 369], ["len", "matplotlib.gca", "matplotlib.gca.set_autoscale_on", "matplotlib.collections.PatchCollection", "matplotlib.gca.add_collection", "matplotlib.collections.PatchCollection", "matplotlib.gca.add_collection", "Exception", "type", "numpy.array().reshape", "polygons.append", "color.append", "matplotlib.patches.Polygon", "numpy.random.random", "numpy.array", "int", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.__init__": [[16, 48], ["logging.getLogger", "isinstance", "isinstance", "isinstance", "vis.LVISVis.logger.warn", "lvis.LVIS", "TypeError", "isinstance", "results.LVISResults", "TypeError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lvis_gt", ",", "lvis_dt", "=", "None", ",", "img_dir", "=", "None", ",", "dpi", "=", "75", ")", ":", "\n", "        ", "\"\"\"Constructor for LVISVis.\n        Args:\n            lvis_gt (LVIS class instance, or str containing path of annotation file)\n            lvis_dt (LVISResult class instance, or str containing path of result file,\n            or list of dict)\n            img_dir (str): path of folder containing all images. If None, the image\n            to be displayed will be downloaded to the current working dir.\n            dpi (int): dpi for figure size setup\n        \"\"\"", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "if", "isinstance", "(", "lvis_gt", ",", "LVIS", ")", ":", "\n", "            ", "self", ".", "lvis_gt", "=", "lvis_gt", "\n", "", "elif", "isinstance", "(", "lvis_gt", ",", "str", ")", ":", "\n", "            ", "self", ".", "lvis_gt", "=", "LVIS", "(", "lvis_gt", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"Unsupported type {} of lvis_gt.\"", ".", "format", "(", "lvis_gt", ")", ")", "\n", "\n", "", "if", "lvis_dt", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "lvis_dt", ",", "LVISResults", ")", ":", "\n", "                ", "self", ".", "lvis_dt", "=", "lvis_dt", "\n", "", "elif", "isinstance", "(", "lvis_dt", ",", "(", "str", ",", "list", ")", ")", ":", "\n", "                ", "self", ".", "lvis_dt", "=", "LVISResults", "(", "self", ".", "lvis_gt", ",", "lvis_dt", ")", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "\"Unsupported type {} of lvis_dt.\"", ".", "format", "(", "lvis_dt", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "lvis_dt", "=", "None", "\n", "", "self", ".", "dpi", "=", "dpi", "\n", "self", ".", "img_dir", "=", "img_dir", "if", "img_dir", "else", "'.'", "\n", "if", "self", ".", "img_dir", "==", "'.'", ":", "\n", "            ", "self", ".", "logger", ".", "warn", "(", "\"img_dir not specified. Images will be downloaded.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.coco_segm_to_poly": [[49, 54], ["numpy.asarray", "numpy.transpose"], "methods", ["None"], ["", "", "def", "coco_segm_to_poly", "(", "self", ",", "_list", ")", ":", "\n", "        ", "x", "=", "_list", "[", "0", ":", ":", "2", "]", "\n", "y", "=", "_list", "[", "1", ":", ":", "2", "]", "\n", "points", "=", "np", ".", "asarray", "(", "[", "x", ",", "y", "]", ")", "\n", "return", "np", ".", "transpose", "(", "points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.get_synset": [[55, 60], ["synset.split", "int", "vis.LVISVis.lvis_gt.load_cats"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.load_cats"], ["", "def", "get_synset", "(", "self", ",", "idx", ")", ":", "\n", "        ", "synset", "=", "self", ".", "lvis_gt", ".", "load_cats", "(", "ids", "=", "[", "idx", "]", ")", "[", "0", "]", "[", "\"synset\"", "]", "\n", "text", "=", "synset", ".", "split", "(", "\".\"", ")", "\n", "text", "=", "\"{}.{}\"", ".", "format", "(", "text", "[", "0", "]", ",", "int", "(", "text", "[", "-", "1", "]", ")", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.setup_figure": [[61, 70], ["matplotlib.figure", "matplotlib.figure.set_size_inches", "matplotlib.Axes", "matplotlib.Axes.set_title", "matplotlib.Axes.axis", "matplotlib.figure.add_axes", "matplotlib.Axes.imshow"], "methods", ["None"], ["", "def", "setup_figure", "(", "self", ",", "img", ",", "title", "=", "\"\"", ",", "dpi", "=", "75", ")", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", "frameon", "=", "False", ")", "\n", "fig", ".", "set_size_inches", "(", "img", ".", "shape", "[", "1", "]", "/", "dpi", ",", "img", ".", "shape", "[", "0", "]", "/", "dpi", ")", "\n", "ax", "=", "plt", ".", "Axes", "(", "fig", ",", "[", "0.0", ",", "0.0", ",", "1.0", ",", "1.0", "]", ")", "\n", "ax", ".", "set_title", "(", "title", ")", "\n", "ax", ".", "axis", "(", "\"off\"", ")", "\n", "fig", ".", "add_axes", "(", "ax", ")", "\n", "ax", ".", "imshow", "(", "img", ")", "\n", "return", "fig", ",", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.vis_bbox": [[71, 83], ["ax.add_patch", "matplotlib.Rectangle"], "methods", ["None"], ["", "def", "vis_bbox", "(", "self", ",", "ax", ",", "bbox", ",", "box_alpha", "=", "0.5", ",", "edgecolor", "=", "\"g\"", ",", "linestyle", "=", "\"--\"", ")", ":", "\n", "# bbox should be of the form x, y, w, h", "\n", "        ", "ax", ".", "add_patch", "(", "\n", "plt", ".", "Rectangle", "(", "\n", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ")", ",", "\n", "bbox", "[", "2", "]", ",", "\n", "bbox", "[", "3", "]", ",", "\n", "fill", "=", "False", ",", "\n", "edgecolor", "=", "edgecolor", ",", "\n", "linewidth", "=", "2.5", ",", "\n", "alpha", "=", "box_alpha", ",", "\n", "linestyle", "=", "linestyle", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.vis_text": [[86, 96], ["ax.text", "dict"], "methods", ["None"], ["", "def", "vis_text", "(", "self", ",", "ax", ",", "bbox", ",", "text", ",", "color", "=", "\"w\"", ")", ":", "\n", "        ", "ax", ".", "text", "(", "\n", "bbox", "[", "0", "]", ",", "\n", "bbox", "[", "1", "]", "-", "2", ",", "\n", "text", ",", "\n", "fontsize", "=", "15", ",", "\n", "family", "=", "\"serif\"", ",", "\n", "bbox", "=", "dict", "(", "facecolor", "=", "\"none\"", ",", "alpha", "=", "0.4", ",", "pad", "=", "0", ",", "edgecolor", "=", "\"none\"", ")", ",", "\n", "color", "=", "color", ",", "\n", "zorder", "=", "10", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.vis_mask": [[98, 104], ["matplotlib.patches.Polygon", "ax.add_patch"], "methods", ["None"], ["", "def", "vis_mask", "(", "self", ",", "ax", ",", "segm", ",", "color", ")", ":", "\n", "# segm is numpy array of shape Nx2", "\n", "        ", "polygon", "=", "Polygon", "(", "\n", "segm", ",", "fill", "=", "True", ",", "facecolor", "=", "color", ",", "edgecolor", "=", "color", ",", "linewidth", "=", "3", ",", "alpha", "=", "0.5", "\n", ")", "\n", "ax", ".", "add_patch", "(", "polygon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.get_color": [[105, 108], ["colormap.colormap.colormap", "len"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.colormap.colormap"], ["", "def", "get_color", "(", "self", ",", "idx", ")", ":", "\n", "        ", "color_list", "=", "colormap", "(", "rgb", "=", "True", ")", "/", "255", "\n", "return", "color_list", "[", "idx", "%", "len", "(", "color_list", ")", ",", "0", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.load_img": [[109, 117], ["os.path.join", "cv2.imread", "cv2.split", "cv2.merge", "vis.LVISVis.lvis_gt.load_imgs", "os.path.exists", "vis.LVISVis.lvis_gt.download"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.load_imgs", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.download"], ["", "def", "load_img", "(", "self", ",", "img_id", ")", ":", "\n", "        ", "img", "=", "self", ".", "lvis_gt", ".", "load_imgs", "(", "[", "img_id", "]", ")", "[", "0", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "img", "[", "\"file_name\"", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "img_path", ")", ":", "\n", "            ", "self", ".", "lvis_gt", ".", "download", "(", "self", ".", "img_dir", ",", "img_ids", "=", "[", "img_id", "]", ")", "\n", "", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "b", ",", "g", ",", "r", "=", "cv2", ".", "split", "(", "img", ")", "\n", "return", "cv2", ".", "merge", "(", "[", "r", ",", "g", ",", "b", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.vis_img": [[118, 152], ["vis.LVISVis.lvis_gt.get_ann_ids", "vis.LVISVis.lvis_gt.load_anns", "numpy.asarray", "numpy.argsort", "vis.LVISVis.setup_figure", "numpy.asarray.append", "segms.append", "classes.append", "len", "vis.LVISVis.logger.warn", "vis.LVISVis.load_img", "vis.LVISVis.get_color", "vis.LVISVis.vis_bbox", "vis.LVISVis.get_synset", "vis.LVISVis.vis_text", "vis.LVISVis.vis_mask", "vis.LVISVis.coco_segm_to_poly"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.get_ann_ids", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.lvis.LVIS.load_anns", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.setup_figure", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.load_img", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.get_color", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.vis_bbox", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.get_synset", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.vis_text", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.vis_mask", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.coco_segm_to_poly"], ["", "def", "vis_img", "(", "\n", "self", ",", "img_id", ",", "show_boxes", "=", "False", ",", "show_segms", "=", "True", ",", "show_classes", "=", "False", ",", "\n", "cat_ids_to_show", "=", "None", "\n", ")", ":", "\n", "        ", "ann_ids", "=", "self", ".", "lvis_gt", ".", "get_ann_ids", "(", "img_ids", "=", "[", "img_id", "]", ")", "\n", "anns", "=", "self", ".", "lvis_gt", ".", "load_anns", "(", "ids", "=", "ann_ids", ")", "\n", "boxes", ",", "segms", ",", "classes", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "boxes", ".", "append", "(", "ann", "[", "\"bbox\"", "]", ")", "\n", "segms", ".", "append", "(", "ann", "[", "\"segmentation\"", "]", ")", "\n", "classes", ".", "append", "(", "ann", "[", "\"category_id\"", "]", ")", "\n", "\n", "", "if", "len", "(", "boxes", ")", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "warn", "(", "\"No gt anno found for img_id: {}\"", ".", "format", "(", "img_id", ")", ")", "\n", "return", "\n", "\n", "", "boxes", "=", "np", ".", "asarray", "(", "boxes", ")", "\n", "areas", "=", "boxes", "[", ":", ",", "2", "]", "*", "boxes", "[", ":", ",", "3", "]", "\n", "sorted_inds", "=", "np", ".", "argsort", "(", "-", "areas", ")", "\n", "\n", "fig", ",", "ax", "=", "self", ".", "setup_figure", "(", "self", ".", "load_img", "(", "img_id", ")", ")", "\n", "\n", "for", "idx", "in", "sorted_inds", ":", "\n", "            ", "if", "cat_ids_to_show", "is", "not", "None", "and", "classes", "[", "idx", "]", "not", "in", "cat_ids_to_show", ":", "\n", "                ", "continue", "\n", "", "color", "=", "self", ".", "get_color", "(", "idx", ")", "\n", "if", "show_boxes", ":", "\n", "                ", "self", ".", "vis_bbox", "(", "ax", ",", "boxes", "[", "idx", "]", ",", "edgecolor", "=", "color", ")", "\n", "", "if", "show_classes", ":", "\n", "                ", "text", "=", "self", ".", "get_synset", "(", "classes", "[", "idx", "]", ")", "\n", "self", ".", "vis_text", "(", "ax", ",", "boxes", "[", "idx", "]", ",", "text", ")", "\n", "", "if", "show_segms", ":", "\n", "                ", "for", "segm", "in", "segms", "[", "idx", "]", ":", "\n", "                    ", "self", ".", "vis_mask", "(", "ax", ",", "self", ".", "coco_segm_to_poly", "(", "segm", ")", ",", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.vis_result": [[153, 190], ["vis.LVISVis.lvis_dt.get_top_results", "numpy.asarray", "numpy.argsort", "vis.LVISVis.setup_figure", "numpy.asarray.append", "segms.append", "classes.append", "scores.append", "len", "vis.LVISVis.logger.warn", "vis.LVISVis.load_img", "vis.LVISVis.get_color", "vis.LVISVis.vis_bbox", "vis.LVISVis.get_synset", "vis.LVISVis.vis_text", "vis.LVISVis.vis_mask", "vis.LVISVis.coco_segm_to_poly"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.lvis.results.LVISResults.get_top_results", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.setup_figure", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.load_img", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.get_color", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.vis_bbox", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.get_synset", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.vis_text", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.vis_mask", "home.repos.pwc.inspect_result.twangnh_SimCal.lvis.vis.LVISVis.coco_segm_to_poly"], ["", "", "", "", "def", "vis_result", "(", "\n", "self", ",", "img_id", ",", "show_boxes", "=", "False", ",", "show_segms", "=", "True", ",", "show_classes", "=", "False", ",", "\n", "cat_ids_to_show", "=", "None", ",", "score_thrs", "=", "0.0", ",", "show_scores", "=", "True", "\n", ")", ":", "\n", "        ", "assert", "self", ".", "lvis_dt", "is", "not", "None", ",", "\"lvis_dt was not specified.\"", "\n", "anns", "=", "self", ".", "lvis_dt", ".", "get_top_results", "(", "img_id", ",", "score_thrs", ")", "\n", "boxes", ",", "segms", ",", "classes", ",", "scores", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "boxes", ".", "append", "(", "ann", "[", "\"bbox\"", "]", ")", "\n", "segms", ".", "append", "(", "ann", "[", "\"segmentation\"", "]", ")", "\n", "classes", ".", "append", "(", "ann", "[", "\"category_id\"", "]", ")", "\n", "scores", ".", "append", "(", "ann", "[", "\"score\"", "]", ")", "\n", "\n", "", "if", "len", "(", "boxes", ")", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "warn", "(", "\"No gt anno found for img_id: {}\"", ".", "format", "(", "img_id", ")", ")", "\n", "return", "\n", "\n", "", "boxes", "=", "np", ".", "asarray", "(", "boxes", ")", "\n", "areas", "=", "boxes", "[", ":", ",", "2", "]", "*", "boxes", "[", ":", ",", "3", "]", "\n", "sorted_inds", "=", "np", ".", "argsort", "(", "-", "areas", ")", "\n", "\n", "fig", ",", "ax", "=", "self", ".", "setup_figure", "(", "self", ".", "load_img", "(", "img_id", ")", ")", "\n", "\n", "for", "idx", "in", "sorted_inds", ":", "\n", "            ", "if", "cat_ids_to_show", "is", "not", "None", "and", "classes", "[", "idx", "]", "not", "in", "cat_ids_to_show", ":", "\n", "                ", "continue", "\n", "", "color", "=", "self", ".", "get_color", "(", "idx", ")", "\n", "if", "show_boxes", ":", "\n", "                ", "self", ".", "vis_bbox", "(", "ax", ",", "boxes", "[", "idx", "]", ",", "edgecolor", "=", "color", ")", "\n", "", "if", "show_classes", ":", "\n", "                ", "text", "=", "self", ".", "get_synset", "(", "classes", "[", "idx", "]", ")", "\n", "if", "show_scores", ":", "\n", "                    ", "text", "=", "\"{}: {:.2f}\"", ".", "format", "(", "text", ",", "scores", "[", "idx", "]", ")", "\n", "", "self", ".", "vis_text", "(", "ax", ",", "boxes", "[", "idx", "]", ",", "text", ")", "\n", "", "if", "show_segms", ":", "\n", "                ", "for", "segm", "in", "segms", "[", "idx", "]", ":", "\n", "                    ", "self", ".", "vis_mask", "(", "ax", ",", "self", ".", "coco_segm_to_poly", "(", "segm", ")", ",", "color", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.simple3fc.feat_classifier.__init__": [[7, 15], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "input_shape", "=", "[", "256", ",", "7", ",", "7", "]", ",", "hidden_dim", "=", "1024", ",", "cls_fc_bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "feat_classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cls_last_dim", "=", "input_shape", "[", "0", "]", "*", "input_shape", "[", "1", "]", "*", "input_shape", "[", "2", "]", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "cls_last_dim", ",", "hidden_dim", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "fc_classifier", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "num_classes", ",", "bias", "=", "cls_fc_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.simple3fc.feat_classifier.forward": [[16, 25], ["simple3fc.feat_classifier.view", "simple3fc.feat_classifier.fc1", "torch.relu", "torch.relu", "torch.relu", "simple3fc.feat_classifier.fc2", "torch.relu", "torch.relu", "torch.relu", "simple3fc.feat_classifier.fc_classifier", "simple3fc.feat_classifier.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc_classifier", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.simple3fc.simple3fc.__init__": [[28, 32], ["super().__init__", "feat_classifier().cuda", "simple3fc.feat_classifier"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1231", ",", "cls_fc_bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "simple3fc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "feat_classifier", "=", "feat_classifier", "(", "num_classes", "=", "num_classes", ",", "hidden_dim", "=", "1024", ",", "cls_fc_bias", "=", "cls_fc_bias", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.simple3fc.simple3fc.forward": [[33, 36], ["simple3fc.simple3fc.feat_classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "logits", "=", "self", ".", "feat_classifier", "(", "input", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.simple2fc.feat_extractor.__init__": [[10, 17], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", "=", "[", "256", ",", "7", ",", "7", "]", ",", "hidden_dim", "=", "512", ",", "num_classes", "=", "1231", ")", ":", "\n", "        ", "super", "(", "feat_extractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cls_last_dim", "=", "input_shape", "[", "0", "]", "*", "input_shape", "[", "1", "]", "*", "input_shape", "[", "2", "]", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "cls_last_dim", ",", "hidden_dim", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.simple2fc.feat_extractor.forward": [[18, 25], ["simple2fc.feat_extractor.view", "simple2fc.feat_extractor.fc1", "torch.relu", "torch.relu", "torch.relu", "simple2fc.feat_extractor.fc2", "simple2fc.feat_extractor.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.simple2fc.simple2fc.__init__": [[28, 32], ["super().__init__", "feat_extractor().cuda", "simple2fc.feat_extractor"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1231", ")", ":", "\n", "        ", "super", "(", "simple2fc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "feat_extractor", "=", "feat_extractor", "(", "hidden_dim", "=", "1024", ",", "num_classes", "=", "num_classes", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.simple2fc.simple2fc.forward": [[33, 36], ["simple2fc.simple2fc.feat_extractor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "logits", "=", "self", ".", "feat_extractor", "(", "input", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.feat_extractor.__init__": [[10, 17], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", "=", "[", "256", ",", "7", ",", "7", "]", ",", "hidden_dim", "=", "512", ")", ":", "\n", "        ", "super", "(", "feat_extractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cls_last_dim", "=", "input_shape", "[", "0", "]", "*", "input_shape", "[", "1", "]", "*", "input_shape", "[", "2", "]", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "cls_last_dim", ",", "hidden_dim", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.feat_extractor.forward": [[18, 25], ["2fc.feat_extractor.view", "2fc.feat_extractor.fc1", "torch.relu", "torch.relu", "torch.relu", "2fc.feat_extractor.fc2", "2fc.feat_extractor.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__": [[28, 32], ["super().__init__", "feat_extractor().cuda", "2fc.feat_extractor"], "methods", ["home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1231", ")", ":", "\n", "        ", "super", "(", "simple2fc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "feat_extractor", "=", "feat_extractor", "(", "hidden_dim", "=", "num_classes", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.2fc.simple2fc.forward": [[33, 36], ["2fc.simple2fc.feat_extractor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "logits", "=", "self", ".", "feat_extractor", "(", "input", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.source_import": [[9, 15], ["importlib.util.spec_from_file_location", "importlib.util.module_from_spec", "importlib.util.spec_from_file_location.loader.exec_module"], "function", ["None"], ["def", "to_tensor", "(", "data", ")", ":", "\n", "    ", "\"\"\"Convert objects of various python types to :obj:`torch.Tensor`.\n\n    Supported types are: :class:`numpy.ndarray`, :class:`torch.Tensor`,\n    :class:`Sequence`, :class:`int` and :class:`float`.\n    \"\"\"", "\n", "if", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", ":", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.batch_show": [[16, 27], ["np.clip.numpy().transpose", "numpy.array", "numpy.array", "numpy.clip", "matplotlib.figure", "matplotlib.imshow", "matplotlib.title", "np.clip.numpy"], "function", ["None"], ["        ", "return", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "Sequence", ")", "and", "not", "mmcv", ".", "is_str", "(", "data", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "int", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "data", "]", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "[", "data", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'type {} cannot be converted to tensor.'", ".", "format", "(", "\n", "type", "(", "data", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.print_write": [[28, 32], ["print", "open", "print"], "function", ["None"], ["\n", "\n", "", "", "def", "random_scale", "(", "img_scales", ",", "mode", "=", "'range'", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.init_weights": [[33, 52], ["print", "torch.load", "model.load_state_dict", "model.state_dict", "model.state_dict", "model.state_dict", "model.state_dict", "model.state_dict", "model.state_dict"], "function", ["None"], ["\n", "num_scales", "=", "len", "(", "img_scales", ")", "\n", "if", "num_scales", "==", "1", ":", "# fixed scale is specified", "\n", "        ", "img_scale", "=", "img_scales", "[", "0", "]", "\n", "", "elif", "num_scales", "==", "2", ":", "# randomly sample a scale", "\n", "        ", "if", "mode", "==", "'range'", ":", "\n", "            ", "img_scale_long", "=", "[", "max", "(", "s", ")", "for", "s", "in", "img_scales", "]", "\n", "img_scale_short", "=", "[", "min", "(", "s", ")", "for", "s", "in", "img_scales", "]", "\n", "long_edge", "=", "np", ".", "random", ".", "randint", "(", "\n", "min", "(", "img_scale_long", ")", ",", "\n", "max", "(", "img_scale_long", ")", "+", "1", ")", "\n", "short_edge", "=", "np", ".", "random", ".", "randint", "(", "\n", "min", "(", "img_scale_short", ")", ",", "\n", "max", "(", "img_scale_short", ")", "+", "1", ")", "\n"]], "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.shot_acc": [[53, 107], ["pickle.load", "pickle.load", "preds.detach().cpu().numpy.detach().cpu().numpy", "labels.detach().cpu().numpy.detach().cpu().numpy", "numpy.unique", "range", "open", "open", "train_class_count.append", "test_class_count.append", "class_correct.append", "class_preds.append", "len", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "enumerate", "preds.detach().cpu().numpy.detach().cpu", "labels.detach().cpu().numpy.detach().cpu", "len", "many_shot1.append", "many_shot1_precision.append", "zip", "many_shot2.append", "many_shot2_precision.append", "preds.detach().cpu().numpy.detach", "labels.detach().cpu().numpy.detach", "median_shot.append", "median_shot_precision.append", "low_shot.append", "low_shot_precision.append"], "function", ["None"], ["img_scale", "=", "(", "long_edge", ",", "short_edge", ")", "\n", "", "elif", "mode", "==", "'value'", ":", "\n", "            ", "img_scale", "=", "img_scales", "[", "np", ".", "random", ".", "randint", "(", "num_scales", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "if", "mode", "!=", "'value'", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Only \"value\" mode supports more than 2 image scales'", ")", "\n", "", "img_scale", "=", "img_scales", "[", "np", ".", "random", ".", "randint", "(", "num_scales", ")", "]", "\n", "", "return", "img_scale", "\n", "\n", "\n", "", "def", "show_ann", "(", "coco", ",", "img", ",", "ann_info", ")", ":", "\n", "    ", "plt", ".", "imshow", "(", "mmcv", ".", "bgr2rgb", "(", "img", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "coco", ".", "showAnns", "(", "ann_info", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.F_measure": [[107, 127], ["range", "f1_score", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.mic_acc_cal": [[128, 133], ["[].mean", "len", "torch.eq().float", "torch.eq"], "function", ["None"], []], "home.repos.pwc.inspect_result.twangnh_SimCal.cls_head_models.utils.class_count": [[134, 140], ["numpy.array", "numpy.unique", "class_data_num.append", "len"], "function", ["None"], []]}