{"home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.initializations.weight_variable_glorot": [[9, 17], ["numpy.sqrt", "tensorflow.random_uniform", "tensorflow.Variable"], "function", ["None"], ["def", "weight_variable_glorot", "(", "input_dim", ",", "output_dim", ",", "name", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"\n    Create a weight variable with Glorot&Bengio (AISTATS 2010) initialization\n    \"\"\"", "\n", "init_range", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "input_dim", "+", "output_dim", ")", ")", "\n", "initial", "=", "tf", ".", "random_uniform", "(", "[", "input_dim", ",", "output_dim", "]", ",", "minval", "=", "-", "init_range", ",", "\n", "maxval", "=", "init_range", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "", "", ""]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.kcore.compute_kcore": [[8, 29], ["networkx.from_scipy_sparse_matrix", "nx.from_scipy_sparse_matrix.remove_edges_from", "networkx.core_number", "networkx.k_core", "networkx.adjacency_matrix", "networkx.selfloop_edges"], "function", ["None"], ["def", "compute_kcore", "(", "adj", ",", "nb_core", ")", ":", "\n", "    ", "\"\"\" Computes the k-core version of a graph - See IJCAI 2019 paper\n    for theoretical details on k-core decomposition\n    :param adj: sparse adjacency matrix of the graph\n    :param nb_core: a core number, from 0 to the \"degeneracy\"\n                    (i.e. max core value) of the graph\n    :return: sparse adjacency matrix of the nb_core-core subgraph, together\n             with the list of nodes from this core\n    \"\"\"", "\n", "# Preprocessing on graph", "\n", "G", "=", "nx", ".", "from_scipy_sparse_matrix", "(", "adj", ")", "\n", "G", ".", "remove_edges_from", "(", "nx", ".", "selfloop_edges", "(", "G", ")", ")", "\n", "# K-core decomposition", "\n", "core_number", "=", "nx", ".", "core_number", "(", "G", ")", "\n", "# nb_core subgraph", "\n", "kcore", "=", "nx", ".", "k_core", "(", "G", ",", "nb_core", ",", "core_number", ")", "\n", "# Get list of nodes from this subgraph", "\n", "nodes_kcore", "=", "kcore", ".", "nodes", "\n", "# Adjacency matrix of this subgraph", "\n", "adj_kcore", "=", "nx", ".", "adjacency_matrix", "(", "kcore", ")", "\n", "return", "adj_kcore", ",", "nodes_kcore", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.kcore.expand_embedding": [[30, 77], ["scipy.csr_matrix", "adj.tocsr.tocsr", "numpy.array", "numpy.mean", "sp.csr_matrix.toarray", "len", "numpy.hstack", "numpy.setdiff1d", "numpy.union1d", "numpy.array", "scipy.diags", "sp.diags.dot", "sp.diags.dot", "numpy.random.random_sample", "range", "numpy.where", "adj_1_2.sum", "numpy.power().flatten", "len", "degree_mat.dot.dot", "degree_mat.dot.dot", "sp.csr_matrix.getnnz", "adj[].sum", "numpy.power"], "function", ["None"], ["", "def", "expand_embedding", "(", "adj", ",", "emb_kcore", ",", "nodes_kcore", ",", "nb_iterations", ")", ":", "\n", "    ", "\"\"\" Algorithm 2 'Propagation of latent representation' from IJCAI 2019 paper\n    Propagates embeddings vectors computed on k-core to the remaining nodes\n    of the graph (i.e. the nodes outside of the k-core)\n    :param adj: sparse adjacency matrix of the graph\n    :param emb_kcore: n*d embedding matrix computed from Graph AE/VAE\n                      for nodes in k-core\n    :param nodes_kcore: list of nodes in k-core\n    :param nb_iterations: number of iterations \"t\" for fix-point iteration\n                          strategy of Algorithm 2\n    :return: n*d matrix of d-dim embeddings for all nodes of the graph\n    \"\"\"", "\n", "# Initialization", "\n", "num_nodes", "=", "adj", ".", "shape", "[", "0", "]", "\n", "emb", "=", "sp", ".", "csr_matrix", "(", "(", "num_nodes", ",", "emb_kcore", ".", "shape", "[", "1", "]", ")", ")", "\n", "emb", "[", "nodes_kcore", ",", ":", "]", "=", "emb_kcore", "\n", "adj", "=", "adj", ".", "tocsr", "(", ")", "\n", "embedded_nodes", "=", "[", "]", "\n", "new_embedded_nodes", "=", "np", ".", "array", "(", "nodes_kcore", ")", "\n", "\n", "# Assign latent space representation to nodes that were not in k-core", "\n", "while", "len", "(", "new_embedded_nodes", ")", ">", "0", ":", "\n", "        ", "embedded_nodes", "=", "np", ".", "hstack", "(", "(", "embedded_nodes", ",", "new_embedded_nodes", ")", ")", "\n", "# Get nodes from V2 set", "\n", "reached_nodes", "=", "np", ".", "setdiff1d", "(", "np", ".", "where", "(", "(", "adj", "[", "new_embedded_nodes", ",", ":", "]", ".", "sum", "(", "0", ")", "!=", "0", ")", ")", ",", "embedded_nodes", ")", "\n", "# Nodes from V1 (newly embedded) and V2", "\n", "new_embedded_nodes_union_reached", "=", "np", ".", "union1d", "(", "new_embedded_nodes", ",", "reached_nodes", ")", "\n", "# Adjacency matrices normalization by total degree in (A1,A2)", "\n", "adj_1_2", "=", "adj", "[", "reached_nodes", ",", ":", "]", "[", ":", ",", "new_embedded_nodes_union_reached", "]", "\n", "degrees", "=", "np", ".", "array", "(", "adj_1_2", ".", "sum", "(", "1", ")", ")", "\n", "degree_mat", "=", "sp", ".", "diags", "(", "np", ".", "power", "(", "degrees", ",", "-", "1.0", ")", ".", "flatten", "(", ")", ")", "\n", "adj_1", "=", "degree_mat", ".", "dot", "(", "adj", "[", "reached_nodes", ",", ":", "]", "[", ":", ",", "new_embedded_nodes", "]", ")", "\n", "adj_2", "=", "degree_mat", ".", "dot", "(", "adj", "[", "reached_nodes", ",", ":", "]", "[", ":", ",", "reached_nodes", "]", ")", "\n", "\n", "# Iterations", "\n", "z_1", "=", "emb", "[", "new_embedded_nodes", ",", ":", "]", "\n", "z_2", "=", "np", ".", "random", ".", "random_sample", "(", "(", "len", "(", "reached_nodes", ")", ",", "emb", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "j", "in", "range", "(", "nb_iterations", ")", ":", "\n", "            ", "z_2", "=", "adj_1", ".", "dot", "(", "z_1", ")", "+", "adj_2", ".", "dot", "(", "z_2", ")", "\n", "", "emb", "[", "reached_nodes", ",", ":", "]", "+=", "z_2", "\n", "# Update new_embedded_nodes", "\n", "new_embedded_nodes", "=", "reached_nodes", "\n", "\n", "# Handle isolated nodes", "\n", "", "emb", "[", "emb", ".", "getnnz", "(", "1", ")", "==", "0", "]", "=", "np", ".", "mean", "(", "emb_kcore", ",", "axis", "=", "0", ")", "\n", "# Return embedding", "\n", "return", "emb", ".", "toarray", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.layers.Layer.__init__": [[44, 57], ["kwargs.keys", "kwargs.get", "kwargs.get", "layers.Layer.__class__.__name__.lower", "str", "layers.get_layer_uid"], "methods", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.layers.get_layer_uid"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "allowed_kwargs", "=", "{", "'name'", ",", "'logging'", "}", "\n", "for", "kwarg", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "kwarg", "in", "allowed_kwargs", ",", "'Invalid keyword argument: '", "+", "kwarg", "\n", "", "name", "=", "kwargs", ".", "get", "(", "'name'", ")", "\n", "if", "not", "name", ":", "\n", "            ", "layer", "=", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", "\n", "name", "=", "layer", "+", "'_'", "+", "str", "(", "get_layer_uid", "(", "layer", ")", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "self", ".", "vars", "=", "{", "}", "\n", "logging", "=", "kwargs", ".", "get", "(", "'logging'", ",", "False", ")", "\n", "self", ".", "logging", "=", "logging", "\n", "self", ".", "issparse", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.layers.Layer._call": [[58, 60], ["None"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.layers.Layer.__call__": [[61, 65], ["tensorflow.name_scope", "layers.Layer._call"], "methods", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.layers.InnerProductDecoder._call"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "outputs", "=", "self", ".", "_call", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.layers.GraphConvolution.__init__": [[69, 76], ["layers.Layer.__init__", "tensorflow.variable_scope", "linear_gae.initializations.weight_variable_glorot"], "methods", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.optimizer.OptimizerVAE.__init__", "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.initializations.weight_variable_glorot"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "adj", ",", "dropout", "=", "0.", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'weights'", "]", "=", "weight_variable_glorot", "(", "input_dim", ",", "output_dim", ",", "name", "=", "\"weights\"", ")", "\n", "", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "adj", "=", "adj", "\n", "self", ".", "act", "=", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.layers.GraphConvolution._call": [[77, 84], ["tensorflow.nn.dropout", "tensorflow.matmul", "tensorflow.sparse_tensor_dense_matmul", "layers.GraphConvolution.act"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "1", "-", "self", ".", "dropout", ")", "\n", "x", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "x", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "self", ".", "adj", ",", "x", ")", "\n", "outputs", "=", "self", ".", "act", "(", "x", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.layers.GraphConvolutionSparse.__init__": [[88, 97], ["layers.Layer.__init__", "tensorflow.variable_scope", "linear_gae.initializations.weight_variable_glorot"], "methods", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.optimizer.OptimizerVAE.__init__", "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.initializations.weight_variable_glorot"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "adj", ",", "features_nonzero", ",", "dropout", "=", "0.", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GraphConvolutionSparse", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'weights'", "]", "=", "weight_variable_glorot", "(", "input_dim", ",", "output_dim", ",", "name", "=", "\"weights\"", ")", "\n", "", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "adj", "=", "adj", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "issparse", "=", "True", "\n", "self", ".", "features_nonzero", "=", "features_nonzero", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.layers.GraphConvolutionSparse._call": [[98, 105], ["layers.dropout_sparse", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.sparse_tensor_dense_matmul", "layers.GraphConvolutionSparse.act"], "methods", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.layers.dropout_sparse"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "x", "=", "dropout_sparse", "(", "x", ",", "1", "-", "self", ".", "dropout", ",", "self", ".", "features_nonzero", ")", "\n", "x", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "x", ",", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "x", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "self", ".", "adj", ",", "x", ")", "\n", "outputs", "=", "self", ".", "act", "(", "x", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.layers.InnerProductDecoder.__init__": [[109, 113], ["layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.optimizer.OptimizerVAE.__init__"], ["def", "__init__", "(", "self", ",", "dropout", "=", "0.", ",", "act", "=", "tf", ".", "nn", ".", "sigmoid", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "InnerProductDecoder", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "act", "=", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.layers.InnerProductDecoder._call": [[114, 121], ["tensorflow.nn.dropout", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.reshape", "layers.InnerProductDecoder.act"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "inputs", "=", "tf", ".", "nn", ".", "dropout", "(", "inputs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "x", "=", "tf", ".", "transpose", "(", "inputs", ")", "\n", "x", "=", "tf", ".", "matmul", "(", "inputs", ",", "x", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", ")", "\n", "outputs", "=", "self", ".", "act", "(", "x", ")", "\n", "return", "outputs", "", "", "", ""]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.layers.get_layer_uid": [[14, 22], ["None"], "function", ["None"], ["def", "get_layer_uid", "(", "layer_name", "=", "''", ")", ":", "\n", "    ", "\"\"\"Helper function, assigns unique layer IDs \"\"\"", "\n", "if", "layer_name", "not", "in", "_LAYER_UIDS", ":", "\n", "        ", "_LAYER_UIDS", "[", "layer_name", "]", "=", "1", "\n", "return", "1", "\n", "", "else", ":", "\n", "        ", "_LAYER_UIDS", "[", "layer_name", "]", "+=", "1", "\n", "return", "_LAYER_UIDS", "[", "layer_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.layers.dropout_sparse": [[23, 31], ["tensorflow.random_uniform", "tensorflow.cast", "tensorflow.sparse_retain", "tensorflow.floor"], "function", ["None"], ["", "", "def", "dropout_sparse", "(", "x", ",", "keep_prob", ",", "num_nonzero_elems", ")", ":", "\n", "    ", "\"\"\"Dropout for sparse tensors \"\"\"", "\n", "noise_shape", "=", "[", "num_nonzero_elems", "]", "\n", "random_tensor", "=", "keep_prob", "\n", "random_tensor", "+=", "tf", ".", "random_uniform", "(", "noise_shape", ")", "\n", "dropout_mask", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "random_tensor", ")", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "pre_out", "=", "tf", ".", "sparse_retain", "(", "x", ",", "dropout_mask", ")", "\n", "return", "pre_out", "*", "(", "1.", "/", "keep_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.input_data.parse_index_file": [[12, 17], ["open", "index.append", "int", "line.strip"], "function", ["None"], ["def", "parse_index_file", "(", "filename", ")", ":", "\n", "    ", "index", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "        ", "index", ".", "append", "(", "int", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.input_data.load_data": [[18, 49], ["range", "tuple", "input_data.parse_index_file", "numpy.sort", "scipy.vstack().tolil", "networkx.from_dict_of_lists", "networkx.adjacency_matrix", "len", "range", "scipy.lil_matrix", "open", "min", "scipy.vstack", "objects.append", "objects.append", "max", "len", "pickle.load", "pickle.load", "min"], "function", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.input_data.parse_index_file"], ["", "def", "load_data", "(", "dataset", ")", ":", "\n", "    ", "\"\"\" Load datasets from tkipf/gae input files\n    :param dataset: 'cora', 'citeseer' or 'pubmed' graph dataset.\n    :return: n*n sparse adjacency matrix and n*f node features matrix\n    \"\"\"", "\n", "# Load the data: x, tx, allx, graph", "\n", "names", "=", "[", "'x'", ",", "'tx'", ",", "'allx'", ",", "'graph'", "]", "\n", "objects", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "        ", "with", "open", "(", "\"../data/ind.{}.{}\"", ".", "format", "(", "dataset", ",", "names", "[", "i", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "if", "sys", ".", "version_info", ">", "(", "3", ",", "0", ")", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", ")", "\n", "", "else", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ")", ")", "\n", "", "", "", "x", ",", "tx", ",", "allx", ",", "graph", "=", "tuple", "(", "objects", ")", "\n", "test_idx_reorder", "=", "parse_index_file", "(", "\"../data/ind.{}.test.index\"", ".", "format", "(", "dataset", ")", ")", "\n", "test_idx_range", "=", "np", ".", "sort", "(", "test_idx_reorder", ")", "\n", "\n", "if", "dataset", "==", "'citeseer'", ":", "\n", "# Fix citeseer dataset (there are some isolated nodes in the graph)", "\n", "# Find isolated nodes, add them as zero-vecs into the right position", "\n", "        ", "test_idx_range_full", "=", "range", "(", "min", "(", "test_idx_reorder", ")", ",", "max", "(", "test_idx_reorder", ")", "+", "1", ")", "\n", "tx_extended", "=", "sp", ".", "lil_matrix", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "x", ".", "shape", "[", "1", "]", ")", ")", "\n", "tx_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "tx", "\n", "tx", "=", "tx_extended", "\n", "\n", "", "features", "=", "sp", ".", "vstack", "(", "(", "allx", ",", "tx", ")", ")", ".", "tolil", "(", ")", "\n", "features", "[", "test_idx_reorder", ",", ":", "]", "=", "features", "[", "test_idx_range", ",", ":", "]", "\n", "graph", "=", "nx", ".", "from_dict_of_lists", "(", "graph", ")", "\n", "adj", "=", "nx", ".", "adjacency_matrix", "(", "graph", ")", "\n", "return", "adj", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.input_data.load_label": [[50, 80], ["range", "tuple", "input_data.parse_index_file", "numpy.sort", "scipy.vstack().tolil", "numpy.argmax", "len", "range", "numpy.zeros", "np.argmax.toarray", "open", "min", "scipy.vstack", "objects.append", "objects.append", "max", "len", "pickle.load", "pickle.load", "min"], "function", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.input_data.parse_index_file"], ["", "def", "load_label", "(", "dataset", ")", ":", "\n", "    ", "\"\"\" Load node-level labels from tkipf/gae input files\n    :param dataset: 'cora', 'citeseer' or 'pubmed' graph dataset.\n    :return: n-dim array of node labels (used for clustering)\n    \"\"\"", "\n", "names", "=", "[", "'ty'", ",", "'ally'", "]", "\n", "objects", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "        ", "with", "open", "(", "\"../data/ind.{}.{}\"", ".", "format", "(", "dataset", ",", "names", "[", "i", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "if", "sys", ".", "version_info", ">", "(", "3", ",", "0", ")", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", ")", "\n", "", "else", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ")", ")", "\n", "", "", "", "ty", ",", "ally", "=", "tuple", "(", "objects", ")", "\n", "test_idx_reorder", "=", "parse_index_file", "(", "\"../data/ind.{}.test.index\"", ".", "format", "(", "dataset", ")", ")", "\n", "test_idx_range", "=", "np", ".", "sort", "(", "test_idx_reorder", ")", "\n", "\n", "if", "dataset", "==", "'citeseer'", ":", "\n", "# Fix citeseer dataset (there are some isolated nodes in the graph)", "\n", "# Find isolated nodes, add them as zero-vecs into the right position", "\n", "        ", "test_idx_range_full", "=", "range", "(", "min", "(", "test_idx_reorder", ")", ",", "max", "(", "test_idx_reorder", ")", "+", "1", ")", "\n", "ty_extended", "=", "np", ".", "zeros", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "ty", ".", "shape", "[", "1", "]", ")", ")", "\n", "ty_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "ty", "\n", "ty", "=", "ty_extended", "\n", "\n", "", "label", "=", "sp", ".", "vstack", "(", "(", "ally", ",", "ty", ")", ")", ".", "tolil", "(", ")", "\n", "label", "[", "test_idx_reorder", ",", ":", "]", "=", "label", "[", "test_idx_range", ",", ":", "]", "\n", "# One-hot to integers", "\n", "label", "=", "np", ".", "argmax", "(", "label", ".", "toarray", "(", ")", ",", "axis", "=", "1", ")", "\n", "return", "label", "", "", ""]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.preprocessing.sparse_to_tuple": [[15, 22], ["numpy.vstack().transpose", "scipy.isspmatrix_coo", "sparse_mx.tocoo.tocoo", "numpy.vstack"], "function", ["None"], ["def", "sparse_to_tuple", "(", "sparse_mx", ")", ":", "\n", "    ", "if", "not", "sp", ".", "isspmatrix_coo", "(", "sparse_mx", ")", ":", "\n", "        ", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", "\n", "", "coords", "=", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "transpose", "(", ")", "\n", "values", "=", "sparse_mx", ".", "data", "\n", "shape", "=", "sparse_mx", ".", "shape", "\n", "return", "coords", ",", "values", ",", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.preprocessing.preprocess_graph": [[23, 29], ["scipy.coo_matrix", "scipy.diags", "adj_.dot().transpose().dot", "preprocessing.sparse_to_tuple", "scipy.eye", "numpy.power().flatten", "adj_.dot().transpose", "numpy.power", "numpy.array", "adj_.dot", "adj_.sum"], "function", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.preprocessing.sparse_to_tuple"], ["", "def", "preprocess_graph", "(", "adj", ")", ":", "\n", "    ", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "adj_", "=", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "degree_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "np", ".", "power", "(", "np", ".", "array", "(", "adj_", ".", "sum", "(", "1", ")", ")", ",", "-", "0.5", ")", ".", "flatten", "(", ")", ")", "\n", "adj_normalized", "=", "adj_", ".", "dot", "(", "degree_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "degree_mat_inv_sqrt", ")", "\n", "return", "sparse_to_tuple", "(", "adj_normalized", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.preprocessing.construct_feed_dict": [[30, 37], ["dict", "dict.update", "dict.update", "dict.update"], "function", ["None"], ["", "def", "construct_feed_dict", "(", "adj_normalized", ",", "adj", ",", "features", ",", "placeholders", ")", ":", "\n", "# Construct feed dictionary", "\n", "    ", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'features'", "]", ":", "features", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'adj'", "]", ":", "adj_normalized", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'adj_orig'", "]", ":", "adj", "}", ")", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.preprocessing.mask_test_edges": [[38, 153], ["adj.eliminate_zeros", "preprocessing.sparse_to_tuple", "int", "int", "numpy.arange", "numpy.random.shuffle", "numpy.delete", "preprocessing.sparse_to_tuple", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.ones", "scipy.csr_matrix", "scipy.dia_matrix", "adj.diagonal().sum", "numpy.floor", "numpy.floor", "numpy.hstack", "len", "len", "numpy.random.choice", "numpy.vstack().transpose", "numpy.unique", "numpy.random.shuffle", "numpy.append", "numpy.append", "len", "len", "numpy.random.choice", "numpy.vstack().transpose", "numpy.unique", "numpy.random.shuffle", "numpy.append", "numpy.append", "numpy.any", "numpy.any", "numpy.any", "numpy.any", "numpy.any", "numpy.in1d", "numpy.in1d", "numpy.in1d", "numpy.in1d", "numpy.in1d", "adj.diagonal", "numpy.vstack", "min", "min", "numpy.vstack", "min", "min", "adj.diagonal", "len", "numpy.in1d", "numpy.in1d", "len", "len", "len", "numpy.in1d", "numpy.in1d", "numpy.in1d", "len", "len"], "function", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.preprocessing.sparse_to_tuple", "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.preprocessing.sparse_to_tuple"], ["", "def", "mask_test_edges", "(", "adj", ",", "test_percent", "=", "10.", ",", "val_percent", "=", "5.", ")", ":", "\n", "    ", "\"\"\" Randomly removes some edges from original graph to create\n    test and validation sets for link prediction task\n    :param adj: complete sparse adjacency matrix of the graph\n    :param test_percent: percentage of edges in test set\n    :param val_percent: percentage of edges in validation set\n    :return: train incomplete adjacency matrix, validation and test sets\n    \"\"\"", "\n", "# Remove diagonal elements", "\n", "adj", "=", "adj", "-", "sp", ".", "dia_matrix", "(", "(", "adj", ".", "diagonal", "(", ")", "[", "None", ",", ":", "]", ",", "[", "0", "]", ")", ",", "shape", "=", "adj", ".", "shape", ")", "\n", "adj", ".", "eliminate_zeros", "(", ")", "\n", "# Check that diag is zero:", "\n", "assert", "adj", ".", "diagonal", "(", ")", ".", "sum", "(", ")", "==", "0", "\n", "\n", "edges_positive", ",", "_", ",", "_", "=", "sparse_to_tuple", "(", "adj", ")", "\n", "# Filtering out edges from lower triangle of adjacency matrix", "\n", "edges_positive", "=", "edges_positive", "[", "edges_positive", "[", ":", ",", "1", "]", ">", "edges_positive", "[", ":", ",", "0", "]", ",", ":", "]", "\n", "# val_edges, val_edges_false, test_edges, test_edges_false = None, None, None, None", "\n", "\n", "# number of positive (and negative) edges in test and val sets:", "\n", "num_test", "=", "int", "(", "np", ".", "floor", "(", "edges_positive", ".", "shape", "[", "0", "]", "/", "(", "100.", "/", "test_percent", ")", ")", ")", "\n", "num_val", "=", "int", "(", "np", ".", "floor", "(", "edges_positive", ".", "shape", "[", "0", "]", "/", "(", "100.", "/", "val_percent", ")", ")", ")", "\n", "\n", "# sample positive edges for test and val sets:", "\n", "edges_positive_idx", "=", "np", ".", "arange", "(", "edges_positive", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "edges_positive_idx", ")", "\n", "val_edge_idx", "=", "edges_positive_idx", "[", ":", "num_val", "]", "\n", "test_edge_idx", "=", "edges_positive_idx", "[", "num_val", ":", "(", "num_val", "+", "num_test", ")", "]", "\n", "test_edges", "=", "edges_positive", "[", "test_edge_idx", "]", "# positive test edges", "\n", "val_edges", "=", "edges_positive", "[", "val_edge_idx", "]", "# positive val edges", "\n", "train_edges", "=", "np", ".", "delete", "(", "edges_positive", ",", "np", ".", "hstack", "(", "[", "test_edge_idx", ",", "val_edge_idx", "]", ")", ",", "axis", "=", "0", ")", "# positive train edges", "\n", "\n", "# the above strategy for sampling without replacement will not work for", "\n", "# sampling negative edges on large graphs, because the pool of negative", "\n", "# edges is much much larger due to sparsity, therefore we'll use", "\n", "# the following strategy:", "\n", "# 1. sample random linear indices from adjacency matrix WITH REPLACEMENT", "\n", "# (without replacement is super slow). sample more than we need so we'll", "\n", "# probably have enough after all the filtering steps.", "\n", "# 2. remove any edges that have already been added to the other edge lists", "\n", "# 3. convert to (i,j) coordinates", "\n", "# 4. swap i and j where i > j, to ensure they're upper triangle elements", "\n", "# 5. remove any duplicate elements if there are any", "\n", "# 6. remove any diagonal elements", "\n", "# 7. if we don't have enough edges, repeat this process until we get enough", "\n", "positive_idx", ",", "_", ",", "_", "=", "sparse_to_tuple", "(", "adj", ")", "# [i,j] coord pairs for all true edges", "\n", "positive_idx", "=", "positive_idx", "[", ":", ",", "0", "]", "*", "adj", ".", "shape", "[", "0", "]", "+", "positive_idx", "[", ":", ",", "1", "]", "# linear indices", "\n", "test_edges_false", "=", "np", ".", "empty", "(", "(", "0", ",", "2", ")", ",", "dtype", "=", "'int64'", ")", "\n", "idx_test_edges_false", "=", "np", ".", "empty", "(", "(", "0", ",", ")", ",", "dtype", "=", "'int64'", ")", "\n", "\n", "while", "len", "(", "test_edges_false", ")", "<", "len", "(", "test_edges", ")", ":", "\n", "# step 1:", "\n", "        ", "idx", "=", "np", ".", "random", ".", "choice", "(", "adj", ".", "shape", "[", "0", "]", "**", "2", ",", "2", "*", "(", "num_test", "-", "len", "(", "test_edges_false", ")", ")", ",", "replace", "=", "True", ")", "\n", "# step 2:", "\n", "idx", "=", "idx", "[", "~", "np", ".", "in1d", "(", "idx", ",", "positive_idx", ",", "assume_unique", "=", "True", ")", "]", "\n", "idx", "=", "idx", "[", "~", "np", ".", "in1d", "(", "idx", ",", "idx_test_edges_false", ",", "assume_unique", "=", "True", ")", "]", "\n", "# step 3:", "\n", "rowidx", "=", "idx", "//", "adj", ".", "shape", "[", "0", "]", "\n", "colidx", "=", "idx", "%", "adj", ".", "shape", "[", "0", "]", "\n", "coords", "=", "np", ".", "vstack", "(", "(", "rowidx", ",", "colidx", ")", ")", ".", "transpose", "(", ")", "\n", "# step 4:", "\n", "lowertrimask", "=", "coords", "[", ":", ",", "0", "]", ">", "coords", "[", ":", ",", "1", "]", "\n", "coords", "[", "lowertrimask", "]", "=", "coords", "[", "lowertrimask", "]", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "# step 5:", "\n", "coords", "=", "np", ".", "unique", "(", "coords", ",", "axis", "=", "0", ")", "# note: coords are now sorted lexicographically", "\n", "np", ".", "random", ".", "shuffle", "(", "coords", ")", "# not anymore", "\n", "# step 6:", "\n", "coords", "=", "coords", "[", "coords", "[", ":", ",", "0", "]", "!=", "coords", "[", ":", ",", "1", "]", "]", "\n", "# step 7:", "\n", "coords", "=", "coords", "[", ":", "min", "(", "num_test", ",", "len", "(", "idx", ")", ")", "]", "\n", "test_edges_false", "=", "np", ".", "append", "(", "test_edges_false", ",", "coords", ",", "axis", "=", "0", ")", "\n", "idx", "=", "idx", "[", ":", "min", "(", "num_test", ",", "len", "(", "idx", ")", ")", "]", "\n", "idx_test_edges_false", "=", "np", ".", "append", "(", "idx_test_edges_false", ",", "idx", ")", "\n", "\n", "", "val_edges_false", "=", "np", ".", "empty", "(", "(", "0", ",", "2", ")", ",", "dtype", "=", "'int64'", ")", "\n", "idx_val_edges_false", "=", "np", ".", "empty", "(", "(", "0", ",", ")", ",", "dtype", "=", "'int64'", ")", "\n", "while", "len", "(", "val_edges_false", ")", "<", "len", "(", "val_edges", ")", ":", "\n", "# step 1:", "\n", "        ", "idx", "=", "np", ".", "random", ".", "choice", "(", "adj", ".", "shape", "[", "0", "]", "**", "2", ",", "2", "*", "(", "num_val", "-", "len", "(", "val_edges_false", ")", ")", ",", "replace", "=", "True", ")", "\n", "# step 2:", "\n", "idx", "=", "idx", "[", "~", "np", ".", "in1d", "(", "idx", ",", "positive_idx", ",", "assume_unique", "=", "True", ")", "]", "\n", "idx", "=", "idx", "[", "~", "np", ".", "in1d", "(", "idx", ",", "idx_test_edges_false", ",", "assume_unique", "=", "True", ")", "]", "\n", "idx", "=", "idx", "[", "~", "np", ".", "in1d", "(", "idx", ",", "idx_val_edges_false", ",", "assume_unique", "=", "True", ")", "]", "\n", "# step 3:", "\n", "rowidx", "=", "idx", "//", "adj", ".", "shape", "[", "0", "]", "\n", "colidx", "=", "idx", "%", "adj", ".", "shape", "[", "0", "]", "\n", "coords", "=", "np", ".", "vstack", "(", "(", "rowidx", ",", "colidx", ")", ")", ".", "transpose", "(", ")", "\n", "# step 4:", "\n", "lowertrimask", "=", "coords", "[", ":", ",", "0", "]", ">", "coords", "[", ":", ",", "1", "]", "\n", "coords", "[", "lowertrimask", "]", "=", "coords", "[", "lowertrimask", "]", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "# step 5:", "\n", "coords", "=", "np", ".", "unique", "(", "coords", ",", "axis", "=", "0", ")", "# note: coords are now sorted lexicographically", "\n", "np", ".", "random", ".", "shuffle", "(", "coords", ")", "# not any more", "\n", "# step 6:", "\n", "coords", "=", "coords", "[", "coords", "[", ":", ",", "0", "]", "!=", "coords", "[", ":", ",", "1", "]", "]", "\n", "# step 7:", "\n", "coords", "=", "coords", "[", ":", "min", "(", "num_val", ",", "len", "(", "idx", ")", ")", "]", "\n", "val_edges_false", "=", "np", ".", "append", "(", "val_edges_false", ",", "coords", ",", "axis", "=", "0", ")", "\n", "idx", "=", "idx", "[", ":", "min", "(", "num_val", ",", "len", "(", "idx", ")", ")", "]", "\n", "idx_val_edges_false", "=", "np", ".", "append", "(", "idx_val_edges_false", ",", "idx", ")", "\n", "\n", "# sanity checks:", "\n", "", "train_edges_linear", "=", "train_edges", "[", ":", ",", "0", "]", "*", "adj", ".", "shape", "[", "0", "]", "+", "train_edges", "[", ":", ",", "1", "]", "\n", "test_edges_linear", "=", "test_edges", "[", ":", ",", "0", "]", "*", "adj", ".", "shape", "[", "0", "]", "+", "test_edges", "[", ":", ",", "1", "]", "\n", "assert", "not", "np", ".", "any", "(", "np", ".", "in1d", "(", "idx_test_edges_false", ",", "positive_idx", ")", ")", "\n", "assert", "not", "np", ".", "any", "(", "np", ".", "in1d", "(", "idx_val_edges_false", ",", "positive_idx", ")", ")", "\n", "assert", "not", "np", ".", "any", "(", "np", ".", "in1d", "(", "val_edges", "[", ":", ",", "0", "]", "*", "adj", ".", "shape", "[", "0", "]", "+", "val_edges", "[", ":", ",", "1", "]", ",", "train_edges_linear", ")", ")", "\n", "assert", "not", "np", ".", "any", "(", "np", ".", "in1d", "(", "test_edges_linear", ",", "train_edges_linear", ")", ")", "\n", "assert", "not", "np", ".", "any", "(", "np", ".", "in1d", "(", "val_edges", "[", ":", ",", "0", "]", "*", "adj", ".", "shape", "[", "0", "]", "+", "val_edges", "[", ":", ",", "1", "]", ",", "test_edges_linear", ")", ")", "\n", "\n", "# Re-build adj matrix", "\n", "data", "=", "np", ".", "ones", "(", "train_edges", ".", "shape", "[", "0", "]", ")", "\n", "adj_train", "=", "sp", ".", "csr_matrix", "(", "(", "data", ",", "(", "train_edges", "[", ":", ",", "0", "]", ",", "train_edges", "[", ":", ",", "1", "]", ")", ")", ",", "shape", "=", "adj", ".", "shape", ")", "\n", "adj_train", "=", "adj_train", "+", "adj_train", ".", "T", "\n", "return", "adj_train", ",", "val_edges", ",", "val_edges_false", ",", "test_edges", ",", "test_edges_false", "", "", ""]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.Model.__init__": [[16, 32], ["kwargs.keys", "kwargs.keys", "kwargs.get", "kwargs.get", "model.Model.__class__.__name__.lower"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "allowed_kwargs", "=", "{", "'name'", ",", "'logging'", "}", "\n", "for", "kwarg", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "kwarg", "in", "allowed_kwargs", ",", "'Invalid keyword argument: '", "+", "kwarg", "\n", "\n", "", "for", "kwarg", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "kwarg", "in", "allowed_kwargs", ",", "'Invalid keyword argument: '", "+", "kwarg", "\n", "", "name", "=", "kwargs", ".", "get", "(", "'name'", ")", "\n", "if", "not", "name", ":", "\n", "            ", "name", "=", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "\n", "logging", "=", "kwargs", ".", "get", "(", "'logging'", ",", "False", ")", "\n", "self", ".", "logging", "=", "logging", "\n", "\n", "self", ".", "vars", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.Model._build": [[33, 35], ["None"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.Model.build": [[36, 42], ["tensorflow.get_collection", "tensorflow.variable_scope", "model.Model._build"], "methods", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.DeepGCNModelVAE._build"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "\"\"\" Wrapper for _build() \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "_build", "(", ")", "\n", "", "variables", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "name", ")", "\n", "self", ".", "vars", "=", "{", "var", ".", "name", ":", "var", "for", "var", "in", "variables", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.Model.fit": [[43, 45], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.Model.predict": [[46, 48], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.GCNModelAE.__init__": [[55, 63], ["model.Model.__init__", "model.GCNModelAE.build"], "methods", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.optimizer.OptimizerVAE.__init__", "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.Model.build"], ["def", "__init__", "(", "self", ",", "placeholders", ",", "num_features", ",", "features_nonzero", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GCNModelAE", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "inputs", "=", "placeholders", "[", "'features'", "]", "\n", "self", ".", "input_dim", "=", "num_features", "\n", "self", ".", "features_nonzero", "=", "features_nonzero", "\n", "self", ".", "adj", "=", "placeholders", "[", "'adj'", "]", "\n", "self", ".", "dropout", "=", "placeholders", "[", "'dropout'", "]", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.GCNModelAE._build": [[64, 82], ["GraphConvolutionSparse", "GraphConvolution", "InnerProductDecoder"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "hidden", "=", "GraphConvolutionSparse", "(", "input_dim", "=", "self", ".", "input_dim", ",", "\n", "output_dim", "=", "FLAGS", ".", "hidden", ",", "\n", "adj", "=", "self", ".", "adj", ",", "\n", "features_nonzero", "=", "self", ".", "features_nonzero", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "inputs", ")", "\n", "\n", "self", ".", "z_mean", "=", "GraphConvolution", "(", "input_dim", "=", "FLAGS", ".", "hidden", ",", "\n", "output_dim", "=", "FLAGS", ".", "dimension", ",", "\n", "adj", "=", "self", ".", "adj", ",", "\n", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "hidden", ")", "\n", "\n", "self", ".", "reconstructions", "=", "InnerProductDecoder", "(", "act", "=", "lambda", "x", ":", "x", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "z_mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.GCNModelVAE.__init__": [[89, 99], ["model.Model.__init__", "model.GCNModelVAE.build"], "methods", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.optimizer.OptimizerVAE.__init__", "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.Model.build"], ["def", "__init__", "(", "self", ",", "placeholders", ",", "num_features", ",", "num_nodes", ",", "features_nonzero", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GCNModelVAE", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "inputs", "=", "placeholders", "[", "'features'", "]", "\n", "self", ".", "input_dim", "=", "num_features", "\n", "self", ".", "features_nonzero", "=", "features_nonzero", "\n", "self", ".", "n_samples", "=", "num_nodes", "\n", "self", ".", "adj", "=", "placeholders", "[", "'adj'", "]", "\n", "self", ".", "dropout", "=", "placeholders", "[", "'dropout'", "]", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.GCNModelVAE._build": [[100, 127], ["GraphConvolutionSparse", "GraphConvolution", "GraphConvolution", "InnerProductDecoder", "tensorflow.random_normal", "tensorflow.exp"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "hidden", "=", "GraphConvolutionSparse", "(", "input_dim", "=", "self", ".", "input_dim", ",", "\n", "output_dim", "=", "FLAGS", ".", "hidden", ",", "\n", "adj", "=", "self", ".", "adj", ",", "\n", "features_nonzero", "=", "self", ".", "features_nonzero", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "inputs", ")", "\n", "\n", "self", ".", "z_mean", "=", "GraphConvolution", "(", "input_dim", "=", "FLAGS", ".", "hidden", ",", "\n", "output_dim", "=", "FLAGS", ".", "dimension", ",", "\n", "adj", "=", "self", ".", "adj", ",", "\n", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "hidden", ")", "\n", "\n", "self", ".", "z_log_std", "=", "GraphConvolution", "(", "input_dim", "=", "FLAGS", ".", "hidden", ",", "\n", "output_dim", "=", "FLAGS", ".", "dimension", ",", "\n", "adj", "=", "self", ".", "adj", ",", "\n", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "hidden", ")", "\n", "\n", "self", ".", "z", "=", "self", ".", "z_mean", "+", "tf", ".", "random_normal", "(", "[", "self", ".", "n_samples", ",", "FLAGS", ".", "dimension", "]", ")", "*", "tf", ".", "exp", "(", "self", ".", "z_log_std", ")", "\n", "\n", "self", ".", "reconstructions", "=", "InnerProductDecoder", "(", "act", "=", "lambda", "x", ":", "x", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.LinearModelAE.__init__": [[134, 143], ["model.Model.__init__", "model.LinearModelAE.build"], "methods", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.optimizer.OptimizerVAE.__init__", "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.Model.build"], ["def", "__init__", "(", "self", ",", "placeholders", ",", "num_features", ",", "features_nonzero", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LinearModelAE", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "inputs", "=", "placeholders", "[", "'features'", "]", "\n", "self", ".", "input_dim", "=", "num_features", "\n", "self", ".", "features_nonzero", "=", "features_nonzero", "\n", "self", ".", "adj", "=", "placeholders", "[", "'adj'", "]", "\n", "self", ".", "dropout", "=", "placeholders", "[", "'dropout'", "]", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.LinearModelAE._build": [[144, 155], ["GraphConvolutionSparse", "InnerProductDecoder"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "z_mean", "=", "GraphConvolutionSparse", "(", "input_dim", "=", "self", ".", "input_dim", ",", "\n", "output_dim", "=", "FLAGS", ".", "dimension", ",", "\n", "adj", "=", "self", ".", "adj", ",", "\n", "features_nonzero", "=", "self", ".", "features_nonzero", ",", "\n", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "inputs", ")", "\n", "\n", "self", ".", "reconstructions", "=", "InnerProductDecoder", "(", "act", "=", "lambda", "x", ":", "x", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "z_mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.LinearModelVAE.__init__": [[163, 173], ["model.Model.__init__", "model.LinearModelVAE.build"], "methods", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.optimizer.OptimizerVAE.__init__", "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.Model.build"], ["def", "__init__", "(", "self", ",", "placeholders", ",", "num_features", ",", "num_nodes", ",", "features_nonzero", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LinearModelVAE", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "inputs", "=", "placeholders", "[", "'features'", "]", "\n", "self", ".", "input_dim", "=", "num_features", "\n", "self", ".", "features_nonzero", "=", "features_nonzero", "\n", "self", ".", "n_samples", "=", "num_nodes", "\n", "self", ".", "adj", "=", "placeholders", "[", "'adj'", "]", "\n", "self", ".", "dropout", "=", "placeholders", "[", "'dropout'", "]", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.LinearModelVAE._build": [[174, 196], ["GraphConvolutionSparse", "GraphConvolutionSparse", "InnerProductDecoder", "tensorflow.random_normal", "tensorflow.exp"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "z_mean", "=", "GraphConvolutionSparse", "(", "input_dim", "=", "self", ".", "input_dim", ",", "\n", "output_dim", "=", "FLAGS", ".", "dimension", ",", "\n", "adj", "=", "self", ".", "adj", ",", "\n", "features_nonzero", "=", "self", ".", "features_nonzero", ",", "\n", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "inputs", ")", "\n", "\n", "self", ".", "z_log_std", "=", "GraphConvolutionSparse", "(", "input_dim", "=", "self", ".", "input_dim", ",", "\n", "output_dim", "=", "FLAGS", ".", "dimension", ",", "\n", "adj", "=", "self", ".", "adj", ",", "\n", "features_nonzero", "=", "self", ".", "features_nonzero", ",", "\n", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "inputs", ")", "\n", "\n", "self", ".", "z", "=", "self", ".", "z_mean", "+", "tf", ".", "random_normal", "(", "[", "self", ".", "n_samples", ",", "FLAGS", ".", "dimension", "]", ")", "*", "tf", ".", "exp", "(", "self", ".", "z_log_std", ")", "\n", "\n", "self", ".", "reconstructions", "=", "InnerProductDecoder", "(", "act", "=", "lambda", "x", ":", "x", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.DeepGCNModelAE.__init__": [[203, 212], ["model.Model.__init__", "model.DeepGCNModelAE.build"], "methods", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.optimizer.OptimizerVAE.__init__", "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.Model.build"], ["def", "__init__", "(", "self", ",", "placeholders", ",", "num_features", ",", "features_nonzero", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DeepGCNModelAE", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "inputs", "=", "placeholders", "[", "'features'", "]", "\n", "self", ".", "input_dim", "=", "num_features", "\n", "self", ".", "features_nonzero", "=", "features_nonzero", "\n", "self", ".", "adj", "=", "placeholders", "[", "'adj'", "]", "\n", "self", ".", "dropout", "=", "placeholders", "[", "'dropout'", "]", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.DeepGCNModelAE._build": [[213, 238], ["GraphConvolutionSparse", "GraphConvolution", "GraphConvolution", "InnerProductDecoder"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "hidden1", "=", "GraphConvolutionSparse", "(", "input_dim", "=", "self", ".", "input_dim", ",", "\n", "output_dim", "=", "FLAGS", ".", "hidden", ",", "\n", "adj", "=", "self", ".", "adj", ",", "\n", "features_nonzero", "=", "self", ".", "features_nonzero", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "inputs", ")", "\n", "\n", "self", ".", "hidden2", "=", "GraphConvolution", "(", "input_dim", "=", "FLAGS", ".", "hidden", ",", "\n", "output_dim", "=", "FLAGS", ".", "hidden", ",", "\n", "adj", "=", "self", ".", "adj", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "hidden1", ")", "\n", "\n", "self", ".", "z_mean", "=", "GraphConvolution", "(", "input_dim", "=", "FLAGS", ".", "hidden", ",", "\n", "output_dim", "=", "FLAGS", ".", "dimension", ",", "\n", "adj", "=", "self", ".", "adj", ",", "\n", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "hidden2", ")", "\n", "\n", "self", ".", "reconstructions", "=", "InnerProductDecoder", "(", "act", "=", "lambda", "x", ":", "x", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "z_mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.DeepGCNModelVAE.__init__": [[246, 256], ["model.Model.__init__", "model.DeepGCNModelVAE.build"], "methods", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.optimizer.OptimizerVAE.__init__", "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.Model.build"], ["def", "__init__", "(", "self", ",", "placeholders", ",", "num_features", ",", "num_nodes", ",", "features_nonzero", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DeepGCNModelVAE", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "inputs", "=", "placeholders", "[", "'features'", "]", "\n", "self", ".", "input_dim", "=", "num_features", "\n", "self", ".", "features_nonzero", "=", "features_nonzero", "\n", "self", ".", "n_samples", "=", "num_nodes", "\n", "self", ".", "adj", "=", "placeholders", "[", "'adj'", "]", "\n", "self", ".", "dropout", "=", "placeholders", "[", "'dropout'", "]", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.DeepGCNModelVAE._build": [[257, 291], ["GraphConvolutionSparse", "GraphConvolution", "GraphConvolution", "GraphConvolution", "InnerProductDecoder", "tensorflow.random_normal", "tensorflow.exp"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "hidden1", "=", "GraphConvolutionSparse", "(", "input_dim", "=", "self", ".", "input_dim", ",", "\n", "output_dim", "=", "FLAGS", ".", "hidden", ",", "\n", "adj", "=", "self", ".", "adj", ",", "\n", "features_nonzero", "=", "self", ".", "features_nonzero", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "inputs", ")", "\n", "\n", "self", ".", "hidden2", "=", "GraphConvolution", "(", "input_dim", "=", "FLAGS", ".", "hidden", ",", "\n", "output_dim", "=", "FLAGS", ".", "hidden", ",", "\n", "adj", "=", "self", ".", "adj", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "hidden1", ")", "\n", "\n", "self", ".", "z_mean", "=", "GraphConvolution", "(", "input_dim", "=", "FLAGS", ".", "hidden", ",", "\n", "output_dim", "=", "FLAGS", ".", "dimension", ",", "\n", "adj", "=", "self", ".", "adj", ",", "\n", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "hidden2", ")", "\n", "\n", "self", ".", "z_log_std", "=", "GraphConvolution", "(", "input_dim", "=", "FLAGS", ".", "hidden", ",", "\n", "output_dim", "=", "FLAGS", ".", "dimension", ",", "\n", "adj", "=", "self", ".", "adj", ",", "\n", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "hidden2", ")", "\n", "\n", "self", ".", "z", "=", "self", ".", "z_mean", "+", "tf", ".", "random_normal", "(", "[", "self", ".", "n_samples", ",", "FLAGS", ".", "dimension", "]", ")", "*", "tf", ".", "exp", "(", "self", ".", "z_log_std", ")", "\n", "\n", "self", ".", "reconstructions", "=", "InnerProductDecoder", "(", "act", "=", "lambda", "x", ":", "x", ",", "\n", "logging", "=", "self", ".", "logging", ")", "(", "self", ".", "z", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.optimizer.OptimizerAE.__init__": [[14, 29], ["tensorflow.train.AdamOptimizer", "optimizer.OptimizerAE.optimizer.minimize", "optimizer.OptimizerAE.optimizer.compute_gradients", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.nn.weighted_cross_entropy_with_logits", "tensorflow.greater_equal", "tensorflow.sigmoid"], "methods", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.evaluation.sigmoid"], ["def", "__init__", "(", "self", ",", "preds", ",", "labels", ",", "pos_weight", ",", "norm", ")", ":", "\n", "        ", "preds_sub", "=", "preds", "\n", "labels_sub", "=", "labels", "\n", "self", ".", "cost", "=", "norm", "*", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "nn", ".", "weighted_cross_entropy_with_logits", "(", "logits", "=", "preds_sub", ",", "\n", "targets", "=", "labels_sub", ",", "\n", "pos_weight", "=", "pos_weight", ")", ")", "\n", "# Adam Optimizer", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "FLAGS", ".", "learning_rate", ")", "\n", "self", ".", "opt_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "cost", ")", "\n", "self", ".", "grads_vars", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "self", ".", "cost", ")", "\n", "self", ".", "correct_prediction", "=", "tf", ".", "equal", "(", "tf", ".", "cast", "(", "tf", ".", "greater_equal", "(", "tf", ".", "sigmoid", "(", "preds_sub", ")", ",", "0.5", ")", ",", "tf", ".", "int32", ")", ",", "\n", "tf", ".", "cast", "(", "labels_sub", ",", "tf", ".", "int32", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "self", ".", "correct_prediction", ",", "tf", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.optimizer.OptimizerVAE.__init__": [[33, 56], ["tensorflow.train.AdamOptimizer", "optimizer.OptimizerVAE.optimizer.minimize", "optimizer.OptimizerVAE.optimizer.compute_gradients", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.nn.weighted_cross_entropy_with_logits", "tensorflow.reduce_sum", "tensorflow.greater_equal", "tensorflow.sigmoid", "tensorflow.square", "tensorflow.square", "tensorflow.exp"], "methods", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.evaluation.sigmoid"], ["def", "__init__", "(", "self", ",", "preds", ",", "labels", ",", "model", ",", "num_nodes", ",", "pos_weight", ",", "norm", ")", ":", "\n", "        ", "preds_sub", "=", "preds", "\n", "labels_sub", "=", "labels", "\n", "self", ".", "cost", "=", "norm", "*", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "nn", ".", "weighted_cross_entropy_with_logits", "(", "logits", "=", "preds_sub", ",", "\n", "targets", "=", "labels_sub", ",", "\n", "pos_weight", "=", "pos_weight", ")", ")", "\n", "# Adam Optimizer", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "FLAGS", ".", "learning_rate", ")", "\n", "# Latent loss", "\n", "self", ".", "log_lik", "=", "self", ".", "cost", "\n", "self", ".", "kl", "=", "(", "0.5", "/", "num_nodes", ")", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "1", "+", "2", "*", "model", ".", "z_log_std", "-", "tf", ".", "square", "(", "model", ".", "z_mean", ")", "-", "tf", ".", "square", "(", "tf", ".", "exp", "(", "model", ".", "z_log_std", ")", ")", ",", "1", ")", ")", "\n", "self", ".", "cost", "-=", "self", ".", "kl", "\n", "self", ".", "opt_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "cost", ")", "\n", "self", ".", "grads_vars", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "self", ".", "cost", ")", "\n", "self", ".", "correct_prediction", "=", "tf", ".", "equal", "(", "tf", ".", "cast", "(", "tf", ".", "greater_equal", "(", "tf", ".", "sigmoid", "(", "preds_sub", ")", ",", "0.5", ")", ",", "tf", ".", "int32", ")", ",", "\n", "tf", ".", "cast", "(", "labels_sub", ",", "tf", ".", "int32", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "self", ".", "correct_prediction", ",", "tf", ".", "float32", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.evaluation.sigmoid": [[10, 16], ["numpy.exp"], "function", ["None"], ["def", "sigmoid", "(", "x", ")", ":", "\n", "    ", "\"\"\" Sigmoid activation function\n    :param x: scalar value\n    :return: sigmoid activation\n    \"\"\"", "\n", "return", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.evaluation.get_roc_score": [[17, 42], ["numpy.hstack", "numpy.hstack", "sklearn.metrics.roc_auc_score", "sklearn.metrics.average_precision_score", "preds.append", "preds_neg.append", "evaluation.sigmoid", "evaluation.sigmoid", "numpy.ones", "numpy.zeros", "emb[].dot", "emb[].dot", "len", "len"], "function", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.evaluation.sigmoid", "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.evaluation.sigmoid"], ["", "def", "get_roc_score", "(", "edges_pos", ",", "edges_neg", ",", "emb", ")", ":", "\n", "    ", "\"\"\" Link Prediction: computes AUC ROC and AP scores from embeddings vectors,\n    and from ground-truth lists of positive and negative node pairs\n    :param edges_pos: list of positive node pairs\n    :param edges_neg: list of negative node pairs\n    :param emb: n*d matrix of embedding vectors for all graph nodes\n    :return: Area Under ROC Curve (AUC ROC) and Average Precision (AP) scores\n    \"\"\"", "\n", "preds", "=", "[", "]", "\n", "preds_neg", "=", "[", "]", "\n", "for", "e", "in", "edges_pos", ":", "\n", "# Link Prediction on positive pairs", "\n", "        ", "preds", ".", "append", "(", "sigmoid", "(", "emb", "[", "e", "[", "0", "]", ",", ":", "]", ".", "dot", "(", "emb", "[", "e", "[", "1", "]", ",", ":", "]", ".", "T", ")", ")", ")", "\n", "", "for", "e", "in", "edges_neg", ":", "\n", "# Link Prediction on negative pairs", "\n", "        ", "preds_neg", ".", "append", "(", "sigmoid", "(", "emb", "[", "e", "[", "0", "]", ",", ":", "]", ".", "dot", "(", "emb", "[", "e", "[", "1", "]", ",", ":", "]", ".", "T", ")", ")", ")", "\n", "\n", "# Stack all predictions and labels", "\n", "", "preds_all", "=", "np", ".", "hstack", "(", "[", "preds", ",", "preds_neg", "]", ")", "\n", "labels_all", "=", "np", ".", "hstack", "(", "[", "np", ".", "ones", "(", "len", "(", "preds", ")", ")", ",", "np", ".", "zeros", "(", "len", "(", "preds_neg", ")", ")", "]", ")", "\n", "\n", "# Computes metrics", "\n", "roc_score", "=", "roc_auc_score", "(", "labels_all", ",", "preds_all", ")", "\n", "ap_score", "=", "average_precision_score", "(", "labels_all", ",", "preds_all", ")", "\n", "return", "roc_score", ",", "ap_score", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.evaluation.clustering_latent_space": [[43, 57], ["sklearn.metrics.adjusted_mutual_info_score", "len", "sklearn.cluster.KMeans().fit", "numpy.unique", "sklearn.cluster.KMeans"], "function", ["home.repos.pwc.inspect_result.deezer_linear_graph_autoencoders.linear_gae.model.Model.fit"], ["", "def", "clustering_latent_space", "(", "emb", ",", "label", ",", "nb_clusters", "=", "None", ")", ":", "\n", "    ", "\"\"\" Node Clustering: computes Adjusted Mutual Information score from a\n    K-Means clustering of nodes in latent embedding space\n    :param emb: n*d matrix of embedding vectors for all graph nodes\n    :param label: ground-truth node labels\n    :param nb_clusters: int number of ground-truth communities in graph\n    :return: Adjusted Mutual Information (AMI) score\n    \"\"\"", "\n", "if", "nb_clusters", "is", "None", ":", "\n", "        ", "nb_clusters", "=", "len", "(", "np", ".", "unique", "(", "label", ")", ")", "\n", "# K-Means Clustering", "\n", "", "clustering_pred", "=", "KMeans", "(", "n_clusters", "=", "nb_clusters", ",", "init", "=", "'k-means++'", ")", ".", "fit", "(", "emb", ")", ".", "labels_", "\n", "# Compute metrics", "\n", "return", "adjusted_mutual_info_score", "(", "label", ",", "clustering_pred", ")", "", "", ""]]}