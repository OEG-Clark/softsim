{"home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_engine.Flatten.__init__": [[16, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_engine.Flatten.forward": [[19, 21], ["x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_engine.EngineTestCase.setUp": [[24, 38], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "test_engine.Flatten", "torch.Linear", "torch.Linear"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "16", ",", "3", ")", "\n", ")", "\n", "\n", "self", ".", "asset_path", "=", "'test/assets/test.yaml'", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_engine.EngineTestCase.test_step_length": [[39, 43], ["bnn.engine.BinaryChef", "test_engine.EngineTestCase.assertEqual", "len"], "methods", ["None"], ["", "def", "test_step_length", "(", "self", ")", ":", "\n", "        ", "chef", "=", "BinaryChef", "(", "self", ".", "asset_path", ")", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "chef", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_engine.EngineTestCase.test_engine_function": [[44, 67], ["copy.copy", "bnn.engine.BinaryChef", "bnn.engine.BinaryChef.next", "test_engine.EngineTestCase.assertTrue", "test_engine.EngineTestCase.assertIsInstance", "bnn.engine.BinaryChef.next", "test_engine.EngineTestCase.assertTrue", "test_engine.EngineTestCase.assertIsInstance", "bnn.engine.BinaryChef.next", "test_engine.EngineTestCase.assertTrue", "test_engine.EngineTestCase.assertIsInstance", "test_engine.EngineTestCase.assertTrue", "hasattr", "hasattr", "hasattr", "torch.equal", "torch.equal", "torch.equal", "torch.equal"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.engine.BinaryChef.next", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.engine.BinaryChef.next", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.engine.BinaryChef.next"], ["", "def", "test_engine_function", "(", "self", ")", ":", "\n", "        ", "model", "=", "copy", ".", "copy", "(", "self", ".", "net", ")", "\n", "chef", "=", "BinaryChef", "(", "self", ".", "asset_path", ")", "\n", "\n", "# Step1", "\n", "model", "=", "chef", ".", "next", "(", "model", ")", "\n", "# self.assertFalse(hasattr(model[0], 'bconfig'))", "\n", "self", ".", "assertTrue", "(", "hasattr", "(", "model", "[", "3", "]", ",", "'bconfig'", ")", ")", "\n", "self", ".", "assertIsInstance", "(", "model", "[", "3", "]", ".", "weight_pre_process", ",", "nn", ".", "Identity", ")", "\n", "\n", "# Step2", "\n", "model", "=", "chef", ".", "next", "(", "model", ")", "\n", "# self.assertFalse(hasattr(model[0], 'bconfig'))", "\n", "self", ".", "assertTrue", "(", "hasattr", "(", "model", "[", "3", "]", ",", "'bconfig'", ")", ")", "\n", "self", ".", "assertIsInstance", "(", "model", "[", "3", "]", ".", "weight_pre_process", ",", "XNORWeightBinarizer", ")", "\n", "w_alpha", "=", "model", "[", "3", "]", ".", "activation_post_process", ".", "alpha", "\n", "\n", "# Step3", "\n", "model", "=", "chef", ".", "next", "(", "model", ")", "\n", "# self.assertTrue(hasattr(model[0], 'bconfig'))", "\n", "self", ".", "assertTrue", "(", "hasattr", "(", "model", "[", "3", "]", ",", "'bconfig'", ")", ")", "\n", "self", ".", "assertIsInstance", "(", "model", "[", "3", "]", ".", "weight_pre_process", ",", "XNORWeightBinarizer", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "equal", "(", "w_alpha", ",", "model", "[", "3", "]", ".", "activation_post_process", ".", "alpha", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_binarize.Flatten.__init__": [[17, 19], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_binarize.Flatten.forward": [[20, 22], ["x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_binarize.BinarizerTestCase.setUp": [[25, 47], ["torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "bnn.BConfig", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "test_binarize.Flatten", "torch.Linear", "torch.Linear"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "linear_layer", "=", "nn", ".", "Linear", "(", "10", ",", "3", ")", "\n", "self", ".", "conv_layer", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "1", ",", "1", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "16", ",", "3", ")", "\n", ")", "\n", "\n", "self", ".", "input1", "=", "torch", ".", "rand", "(", "1", ",", "10", ")", "\n", "self", ".", "input2", "=", "torch", ".", "rand", "(", "1", ",", "3", ",", "8", ",", "8", ")", "\n", "\n", "self", ".", "random_bconfig", "=", "BConfig", "(", "\n", "activation_pre_process", "=", "BasicInputBinarizer", ",", "\n", "activation_post_process", "=", "BasicScaleBinarizer", ",", "\n", "weight_pre_process", "=", "XNORWeightBinarizer", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_binarize.BinarizerTestCase.tearDown": [[49, 51], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_binarize.BinarizerTestCase.weight_reset": [[52, 55], ["isinstance", "isinstance", "m.reset_parameters"], "methods", ["None"], ["", "def", "weight_reset", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "m", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_binarize.BinarizerTestCase.test_single_linear_layer": [[56, 61], ["copy.copy", "bnn.prepare_binary_model", "test_binarize.BinarizerTestCase.assertEqual", "type"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize.prepare_binary_model"], ["", "", "def", "test_single_linear_layer", "(", "self", ")", ":", "\n", "        ", "model", "=", "copy", ".", "copy", "(", "self", ".", "linear_layer", ")", "\n", "model", "=", "prepare_binary_model", "(", "model", ",", "bconfig", "=", "self", ".", "random_bconfig", ")", "\n", "\n", "self", ".", "assertEqual", "(", "type", "(", "model", ")", ",", "Linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_binarize.BinarizerTestCase.test_single_conv2d_layer": [[62, 67], ["copy.copy", "bnn.prepare_binary_model", "test_binarize.BinarizerTestCase.assertEqual", "type"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize.prepare_binary_model"], ["", "def", "test_single_conv2d_layer", "(", "self", ")", ":", "\n", "        ", "model", "=", "copy", ".", "copy", "(", "self", ".", "conv_layer", ")", "\n", "model", "=", "prepare_binary_model", "(", "model", ",", "bconfig", "=", "self", ".", "random_bconfig", ")", "\n", "\n", "self", ".", "assertEqual", "(", "type", "(", "model", ")", ",", "Conv2d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_binarize.BinarizerTestCase.test_many_layers": [[68, 73], ["copy.copy", "bnn.prepare_binary_model", "test_binarize.BinarizerTestCase.assertEqual", "type"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize.prepare_binary_model"], ["", "def", "test_many_layers", "(", "self", ")", ":", "\n", "        ", "model", "=", "copy", ".", "copy", "(", "self", ".", "linear_layer", ")", "\n", "model", "=", "prepare_binary_model", "(", "model", ",", "bconfig", "=", "self", ".", "random_bconfig", ")", "\n", "\n", "self", ".", "assertEqual", "(", "type", "(", "model", ")", ",", "Linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_binarize.BinarizerTestCase.test_skip_binarization": [[74, 94], ["copy.copy", "bnn.BConfig", "bnn.prepare_binary_model", "bnn.prepare_binary_model.modules", "test_binarize.BinarizerTestCase.assertEqual", "test_binarize.BinarizerTestCase.assertEqual", "isinstance", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize.prepare_binary_model"], ["", "def", "test_skip_binarization", "(", "self", ")", ":", "\n", "        ", "model", "=", "copy", ".", "copy", "(", "self", ".", "net", ")", "\n", "\n", "fp32_config", "=", "BConfig", "(", "\n", "activation_pre_process", "=", "nn", ".", "Identity", ",", "\n", "activation_post_process", "=", "nn", ".", "Identity", ",", "\n", "weight_pre_process", "=", "nn", ".", "Identity", "\n", ")", "\n", "model", "=", "prepare_binary_model", "(", "model", ",", "bconfig", "=", "self", ".", "random_bconfig", ",", "custom_config_layers_name", "=", "{", "'8'", ":", "fp32_config", "}", ")", "\n", "\n", "cnt_conv", ",", "cnt_linear", "=", "0", ",", "0", "\n", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "Conv2d", ")", ":", "\n", "                ", "cnt_conv", "+=", "1", "\n", "", "elif", "isinstance", "(", "module", ",", "Linear", ")", ":", "\n", "                ", "if", "isinstance", "(", "module", ".", "activation_pre_process", ",", "nn", ".", "Identity", ")", ":", "\n", "                    ", "cnt_linear", "+=", "1", "\n", "\n", "", "", "", "self", ".", "assertEqual", "(", "cnt_conv", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "cnt_linear", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_binarize.BinarizerTestCase.test_save_load_state_dict": [[95, 111], ["copy.deepcopy", "test_binarize.BinarizerTestCase.input2.clone", "bnn.prepare_binary_model", "bnn.prepare_binary_model.", "bnn.prepare_binary_model.state_dict", "copy.deepcopy", "bnn.prepare_binary_model.apply", "bnn.prepare_binary_model", "bnn.prepare_binary_model.load_state_dict", "bnn.prepare_binary_model.", "test_binarize.BinarizerTestCase.assertTrue", "torch.equal", "torch.equal", "torch.equal", "torch.equal"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize.prepare_binary_model", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize.prepare_binary_model"], ["", "def", "test_save_load_state_dict", "(", "self", ")", ":", "\n", "        ", "model", "=", "copy", ".", "deepcopy", "(", "self", ".", "net", ")", "\n", "x", "=", "self", ".", "input2", ".", "clone", "(", ")", "\n", "\n", "model", "=", "prepare_binary_model", "(", "model", ",", "bconfig", "=", "self", ".", "random_bconfig", ")", "\n", "out1", "=", "model", "(", "x", ")", "\n", "\n", "binary_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "model", "=", "copy", ".", "deepcopy", "(", "self", ".", "net", ")", "\n", "model", ".", "apply", "(", "self", ".", "weight_reset", ")", "\n", "model", "=", "prepare_binary_model", "(", "model", ",", "bconfig", "=", "self", ".", "random_bconfig", ")", "\n", "model", ".", "load_state_dict", "(", "binary_state_dict", ")", "\n", "out2", "=", "model", "(", "x", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "equal", "(", "out1", ",", "out2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_binarize.OpsTestCase.setUp": [[114, 117], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "input", "=", "torch", ".", "tensor", "(", "[", "0.3", ",", "0.1", ",", "-", "2", ",", "-", "0.001", ",", "0.01", "]", ")", "\n", "self", ".", "conv_layer", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_binarize.OpsTestCase.test_basic_input_binarizer": [[118, 121], ["bnn.ops.BasicInputBinarizer", "test_binarize.OpsTestCase.assertTrue", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "bnn.ops.BasicInputBinarizer.", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "test_binarize.OpsTestCase.input.clone", "test_binarize.OpsTestCase.input.clone"], "methods", ["None"], ["", "def", "test_basic_input_binarizer", "(", "self", ")", ":", "\n", "        ", "funct", "=", "BasicInputBinarizer", "(", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "equal", "(", "funct", "(", "self", ".", "input", ".", "clone", "(", ")", ")", ",", "torch", ".", "sign", "(", "self", ".", "input", ".", "clone", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_binarize.OpsTestCase.test_BasicScaleBinarizer": [[122, 124], ["bnn.ops.BasicScaleBinarizer", "copy.copy"], "methods", ["None"], ["", "def", "test_BasicScaleBinarizer", "(", "self", ")", ":", "\n", "        ", "funct", "=", "BasicScaleBinarizer", "(", "copy", ".", "copy", "(", "self", ".", "conv_layer", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_binarize.OpsTestCase.test_XNORWeightBinarizer": [[125, 127], ["bnn.ops.XNORWeightBinarizer"], "methods", ["None"], ["", "def", "test_XNORWeightBinarizer", "(", "self", ")", ":", "\n", "        ", "funct", "=", "XNORWeightBinarizer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_layers.BinaryLayersTestCase.setUp": [[16, 26], ["bnn.BConfig", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "test_bconfig", "=", "BConfig", "(", "\n", "activation_pre_process", "=", "BasicInputBinarizer", ",", "\n", "activation_post_process", "=", "BasicScaleBinarizer", ",", "\n", "weight_pre_process", "=", "XNORWeightBinarizer", "\n", ")", "\n", "self", ".", "data", "=", "torch", ".", "tensor", "(", "[", "-", "0.05263", ",", "-", "0.05068", ",", "-", "0.03849", ",", "0.03104", ",", "0.0772", ",", "0.03038", ",", "-", "0.06640", ",", "0.05894", ",", "\n", "0.13059", ",", "0.03433", ",", "-", "0.25811", ",", "0.13785", "]", ")", ".", "view", "(", "1", ",", "3", ",", "2", ",", "2", ")", "\n", "self", ".", "weights", "=", "torch", ".", "tensor", "(", "[", "-", "0.0252", ",", "0.0084", ",", "-", "0.0676", ",", "0.0891", ",", "-", "0.0010", ",", "0.0518", ",", "0.0380", ",", "0.2866", ",", "\n", "-", "0.0050", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_layers.BinaryLayersTestCase.tearDown": [[27, 29], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_layers.BinaryLayersTestCase.test_linear_layer": [[30, 39], ["torch.Linear", "torch.Linear", "bnn.prepare_binary_model.weight.data.copy_", "test_layers.BinaryLayersTestCase.data[].view", "bnn.prepare_binary_model", "bnn.prepare_binary_model.", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "test_layers.BinaryLayersTestCase.assertTrue", "test_layers.BinaryLayersTestCase.weights.view", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize.prepare_binary_model"], ["", "def", "test_linear_layer", "(", "self", ")", ":", "\n", "        ", "layer", "=", "nn", ".", "Linear", "(", "3", ",", "3", ",", "bias", "=", "False", ")", "\n", "layer", ".", "weight", ".", "data", ".", "copy_", "(", "self", ".", "weights", ".", "view", "(", "3", ",", "3", ")", ")", "\n", "x", "=", "self", ".", "data", "[", ":", ",", ":", ",", "0", ",", "0", "]", ".", "view", "(", "1", ",", "3", ")", "\n", "layer", "=", "prepare_binary_model", "(", "layer", ",", "bconfig", "=", "self", ".", "test_bconfig", ")", "\n", "\n", "output", "=", "layer", "(", "x", ")", "\n", "expected", "=", "torch", ".", "tensor", "(", "[", "[", "0.0337", ",", "-", "0.0473", ",", "-", "0.1099", "]", "]", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "allclose", "(", "expected", ",", "output", ",", "atol", "=", "1e-4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_layers.BinaryLayersTestCase.test_conv1d_layer": [[40, 51], ["torch.Conv1d", "torch.Conv1d", "bnn.prepare_binary_model.weight.data.copy_", "test_layers.BinaryLayersTestCase.data[].view", "bnn.prepare_binary_model", "bnn.prepare_binary_model.", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "test_layers.BinaryLayersTestCase.assertTrue", "test_layers.BinaryLayersTestCase.weights.view", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize.prepare_binary_model"], ["", "def", "test_conv1d_layer", "(", "self", ")", ":", "\n", "        ", "layer", "=", "nn", ".", "Conv1d", "(", "3", ",", "3", ",", "1", ",", "bias", "=", "False", ")", "\n", "layer", ".", "weight", ".", "data", ".", "copy_", "(", "self", ".", "weights", ".", "view", "(", "3", ",", "3", ",", "1", ")", ")", "\n", "x", "=", "self", ".", "data", "[", ":", ",", ":", ",", ":", ",", "0", "]", ".", "view", "(", "1", ",", "3", ",", "2", ")", "\n", "layer", "=", "prepare_binary_model", "(", "layer", ",", "bconfig", "=", "self", ".", "test_bconfig", ")", "\n", "\n", "output", "=", "layer", "(", "x", ")", "\n", "expected", "=", "torch", ".", "tensor", "(", "[", "[", "[", "0.0337", ",", "0.0337", "]", ",", "\n", "[", "-", "0.0473", ",", "-", "0.0473", "]", ",", "\n", "[", "-", "0.1099", ",", "-", "0.1099", "]", "]", "]", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "allclose", "(", "expected", ",", "output", ",", "atol", "=", "1e-4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.test.test_layers.BinaryLayersTestCase.test_conv2d_layer": [[52, 68], ["torch.Conv2d", "torch.Conv2d", "bnn.prepare_binary_model.weight.data.copy_", "bnn.prepare_binary_model", "bnn.prepare_binary_model.", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "test_layers.BinaryLayersTestCase.assertTrue", "test_layers.BinaryLayersTestCase.weights.view", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize.prepare_binary_model"], ["", "def", "test_conv2d_layer", "(", "self", ")", ":", "\n", "        ", "layer", "=", "nn", ".", "Conv2d", "(", "3", ",", "3", ",", "1", ",", "bias", "=", "False", ")", "\n", "layer", ".", "weight", ".", "data", ".", "copy_", "(", "self", ".", "weights", ".", "view", "(", "3", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "x", "=", "self", ".", "data", "\n", "layer", "=", "prepare_binary_model", "(", "layer", ",", "bconfig", "=", "self", ".", "test_bconfig", ")", "\n", "\n", "output", "=", "layer", "(", "x", ")", "\n", "expected", "=", "torch", ".", "tensor", "(", "[", "[", "[", "[", "0.0337", ",", "0.0337", "]", ",", "\n", "[", "0.0337", ",", "-", "0.0337", "]", "]", ",", "\n", "\n", "[", "[", "-", "0.0473", ",", "-", "0.0473", "]", ",", "\n", "[", "-", "0.0473", ",", "0.0473", "]", "]", ",", "\n", "\n", "[", "[", "-", "0.1099", ",", "-", "0.1099", "]", ",", "\n", "[", "-", "0.1099", ",", "0.1099", "]", "]", "]", "]", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "allclose", "(", "expected", ",", "output", ",", "atol", "=", "1e-4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.engine.BinaryChef.__init__": [[35, 44], ["open", "yaml.load", "easydict.EasyDict", "globals", "yaml.load.keys"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config", ":", "str", ",", "user_modules", ":", "List", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "[", "]", ")", "->", "None", ":", "\n", "        ", "with", "open", "(", "config", ")", "as", "file", ":", "\n", "            ", "config", "=", "yaml", ".", "load", "(", "file", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "config", "=", "[", "edict", "(", "config", "[", "k", "]", ")", "for", "k", "in", "config", ".", "keys", "(", ")", "]", "\n", "", "self", ".", "config", "=", "config", "\n", "self", ".", "current_step", "=", "0", "\n", "# inject the received functions into the namespace", "\n", "for", "user_module", "in", "user_modules", ":", "\n", "            ", "globals", "(", ")", "[", "user_module", ".", "__name__", "]", "=", "user_module", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.engine.BinaryChef.__len__": [[45, 47], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.engine.BinaryChef.get_num_steps": [[48, 50], ["len"], "methods", ["None"], ["", "def", "get_num_steps", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.engine.BinaryChef.run_step": [[51, 76], ["print", "BConfig", "prepare_binary_model", "len", "type", "eval", "eval", "eval", "engine._option_builder_helper", "engine._option_builder_helper", "engine._option_builder_helper"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize.prepare_binary_model", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.engine._option_builder_helper", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.engine._option_builder_helper", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.engine._option_builder_helper"], ["", "def", "run_step", "(", "self", ",", "model", ":", "nn", ".", "Module", ",", "step", ":", "int", ")", "->", "nn", ".", "Module", ":", "\n", "        ", "assert", "len", "(", "self", ")", ">", "step", "\n", "step_config", "=", "self", ".", "config", "[", "step", "]", "\n", "\n", "# Ignore certain white listed layers", "\n", "print", "(", "step_config", ",", "type", "(", "step_config", ")", ")", "\n", "ignore_layer_names", "=", "step_config", ".", "ignore_layer_names", "if", "'ignore_layer_names'", "in", "step_config", "else", "[", "]", "\n", "\n", "# prepare model", "\n", "bconfig", "=", "BConfig", "(", "\n", "activation_pre_process", "=", "eval", "(", "\n", "step_config", ".", "pre_activation", ".", "name", "\n", "+", "_option_builder_helper", "(", "\n", "step_config", ".", "pre_activation", ")", ")", ",", "\n", "activation_post_process", "=", "eval", "(", "\n", "step_config", ".", "post_activation", ".", "name", "\n", "+", "_option_builder_helper", "(", "\n", "step_config", ".", "post_activation", ")", ")", ",", "\n", "weight_pre_process", "=", "eval", "(", "\n", "step_config", ".", "weight", ".", "name", "\n", "+", "_option_builder_helper", "(", "\n", "step_config", ".", "weight", ")", ")", ")", "\n", "bmodel", "=", "prepare_binary_model", "(", "model", ",", "bconfig", "=", "bconfig", ",", "ignore_layers_name", "=", "ignore_layer_names", ")", "\n", "\n", "return", "bmodel", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.engine.BinaryChef.next": [[77, 80], ["engine.BinaryChef.run_step"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.engine.BinaryChef.run_step"], ["", "def", "next", "(", "self", ",", "model", ":", "nn", ".", "Module", ")", "->", "nn", ".", "Module", ":", "\n", "        ", "self", ".", "current_step", "+=", "1", "\n", "return", "self", ".", "run_step", "(", "model", ",", "self", ".", "current_step", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.engine._option_builder_helper": [[10, 21], ["partial_config.args.items"], "function", ["None"], ["def", "_option_builder_helper", "(", "partial_config", ":", "Dict", "[", "str", ",", "str", "]", ")", "->", "str", ":", "\n", "    ", "if", "'args'", "in", "partial_config", ":", "\n", "        ", "start_string", "=", "'.with_args('", "\n", "end_string", "=", "')'", "\n", "content", "=", "''", "\n", "for", "k", ",", "v", "in", "partial_config", ".", "args", ".", "items", "(", ")", ":", "\n", "            ", "content", "+=", "'{}={},'", ".", "format", "(", "k", ",", "v", ")", "\n", "", "final_string", "=", "start_string", "+", "content", "+", "end_string", "\n", "\n", "return", "final_string", "\n", "", "return", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.BinarizerBase.__init__": [[41, 43], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", "BinarizerBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.BinarizerBase.forward": [[44, 47], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.SignActivation.forward": [[63, 67], ["ctx.save_for_backward", "input.sign"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "input", ")", "\n", "return", "input", ".", "sign", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.SignActivation.backward": [[68, 74], ["grad_output.clone", "grad_output.clone.masked_fill_", "input.ge", "input.le"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "input", ",", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", "=", "grad_output", ".", "clone", "(", ")", "\n", "grad_input", ".", "masked_fill_", "(", "input", ".", "ge", "(", "1", ")", "|", "input", ".", "le", "(", "-", "1", ")", ",", "0", ")", "\n", "return", "grad_input", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.SignActivationStochastic.forward": [[88, 93], ["ctx.save_for_backward", "torch.rand_like().sub_", "torch.rand_like().sub_", "torch.rand_like().sub_", "torch.rand_like().sub_", "torch.rand_like().sub_", "torch.rand_like().sub_", "torch.rand_like().sub_", "torch.rand_like().sub_", "torch.rand_like().sub_", "input.add_().div_().add_().clamp_().round_().mul_().sub_", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "input.add_().div_().add_().clamp_().round_().mul_", "input.add_().div_().add_().clamp_().round_", "input.add_().div_().add_().clamp_", "input.add_().div_().add_", "input.add_().div_", "input.add_"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "input", ")", "\n", "noise", "=", "torch", ".", "rand_like", "(", "input", ")", ".", "sub_", "(", "0.5", ")", "\n", "return", "input", ".", "add_", "(", "1", ")", ".", "div_", "(", "2", ")", ".", "add_", "(", "noise", ")", ".", "clamp_", "(", "0", ",", "1", ")", ".", "round_", "(", ")", ".", "mul_", "(", "2", ")", ".", "sub_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.XNORWeightBinarizer.__init__": [[111, 115], ["ops.BinarizerBase.__init__"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["def", "__init__", "(", "self", ",", "compute_alpha", ":", "bool", "=", "True", ",", "center_weights", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "super", "(", "XNORWeightBinarizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "compute_alpha", "=", "compute_alpha", "\n", "self", ".", "center_weights", "=", "center_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.XNORWeightBinarizer._compute_alpha": [[116, 128], ["x[].nelement", "x.dim", "x.norm().sum().div_", "x.dim", "x.norm().sum().div_", "x.norm().sum", "x.dim", "x.norm().div_", "ValueError", "x.norm().sum", "x.norm", "x.norm", "x.norm", "x.dim"], "methods", ["None"], ["", "def", "_compute_alpha", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "n", "=", "x", "[", "0", "]", ".", "nelement", "(", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "alpha", "=", "x", ".", "norm", "(", "1", ",", "3", ",", "keepdim", "=", "True", ")", ".", "sum", "(", "[", "2", ",", "1", "]", ",", "keepdim", "=", "True", ")", ".", "div_", "(", "n", ")", "\n", "", "elif", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "alpha", "=", "x", ".", "norm", "(", "1", ",", "2", ",", "keepdim", "=", "True", ")", ".", "sum", "(", "[", "1", "]", ",", "keepdim", "=", "True", ")", ".", "div_", "(", "n", ")", "\n", "", "elif", "x", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "alpha", "=", "x", ".", "norm", "(", "1", ",", "1", ",", "keepdim", "=", "True", ")", ".", "div_", "(", "n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Expected ndims equal with 2 or 4, but found {x.dim()}\"", ")", "\n", "\n", "", "return", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.XNORWeightBinarizer.forward": [[129, 141], ["SignActivation.apply.mean().expand_as", "SignActivation.apply.sub", "ops.XNORWeightBinarizer._compute_alpha", "SignActivation.apply().mul_", "SignActivation.apply", "ops.XNORWeightBinarizer.expand_as", "SignActivation.apply.mean", "SignActivation.apply"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.XNORWeightBinarizer._compute_alpha"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "self", ".", "center_weights", ":", "\n", "            ", "mean", "=", "x", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "x", ")", "\n", "x", "=", "x", ".", "sub", "(", "mean", ")", "\n", "\n", "", "if", "self", ".", "compute_alpha", ":", "\n", "            ", "alpha", "=", "self", ".", "_compute_alpha", "(", "x", ")", "\n", "x", "=", "SignActivation", ".", "apply", "(", "x", ")", ".", "mul_", "(", "alpha", ".", "expand_as", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "SignActivation", ".", "apply", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.BasicInputBinarizer.__init__": [[148, 150], ["ops.BinarizerBase.__init__"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BasicInputBinarizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.BasicInputBinarizer.forward": [[151, 153], ["SignActivation.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "None", ":", "\n", "        ", "return", "SignActivation", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.StochasticInputBinarizer.__init__": [[160, 162], ["ops.BinarizerBase.__init__"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "StochasticInputBinarizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.StochasticInputBinarizer.forward": [[163, 165], ["SignActivationStochastic.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "SignActivationStochastic", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.AdvancedInputBinarizer.__init__": [[168, 172], ["ops.BinarizerBase.__init__"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "derivative_funct", "=", "torch", ".", "tanh", ",", "t", ":", "int", "=", "5", ")", ":", "\n", "        ", "super", "(", "AdvancedInputBinarizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "derivative_funct", "=", "derivative_funct", "\n", "self", ".", "t", "=", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.AdvancedInputBinarizer.forward": [[173, 178], ["ops.AdvancedInputBinarizer.derivative_funct", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", "=", "self", ".", "derivative_funct", "(", "x", "*", "self", ".", "t", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x", "=", "torch", ".", "sign", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.BasicScaleBinarizer.__init__": [[181, 199], ["ops.BinarizerBase.__init__", "isinstance", "torch.Parameter", "torch.Parameter", "torch.Parameter", "isinstance", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "hasattr", "Exception", "module.weight.dim", "type"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "module", ":", "nn", ".", "Module", ",", "shape", ":", "List", "[", "int", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicScaleBinarizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "num_channels", "=", "module", ".", "out_features", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "num_channels", "=", "module", ".", "out_channels", "\n", "", "else", ":", "\n", "            ", "if", "hasattr", "(", "module", ",", "'out_channels'", ")", ":", "\n", "                ", "num_channels", "=", "module", ".", "out_channels", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'Unknown layer of type {} missing out_channels'", ".", "format", "(", "type", "(", "module", ")", ")", ")", "\n", "\n", "", "", "if", "shape", "is", "None", ":", "\n", "            ", "alpha_shape", "=", "[", "1", ",", "num_channels", "]", "+", "[", "1", "]", "*", "(", "module", ".", "weight", ".", "dim", "(", ")", "-", "2", ")", "\n", "", "else", ":", "\n", "            ", "alpha_shape", "=", "shape", "\n", "", "self", ".", "alpha", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "*", "alpha_shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.BasicScaleBinarizer.forward": [[200, 203], ["x.mul_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "layer_out", ":", "torch", ".", "Tensor", ",", "layer_in", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", "=", "layer_out", "\n", "return", "x", ".", "mul_", "(", "self", ".", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.BasicScaleBinarizer.extra_repr": [[204, 206], ["list", "ops.BasicScaleBinarizer.alpha.size"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "'{}'", ".", "format", "(", "list", "(", "self", ".", "alpha", ".", "size", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.XNORScaleBinarizer.__init__": [[209, 215], ["ops.BinarizerBase.__init__", "ops.XNORScaleBinarizer.register_buffer", "torch.ones().div_", "torch.ones().div_", "torch.ones().div_", "torch.ones().div_", "torch.ones().div_", "torch.ones().div_", "torch.ones().div_", "torch.ones().div_", "torch.ones().div_", "math.prod", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "module", ":", "nn", ".", "Module", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicScaleBinarizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "kernel_size", "=", "module", ".", "kernel_size", "\n", "self", ".", "stride", "=", "module", ".", "stride", "\n", "self", ".", "padding", "=", "module", ".", "padding", "\n", "self", ".", "register_buffer", "(", "'fixed_weight'", ",", "torch", ".", "ones", "(", "*", "kernel_size", ")", ".", "div_", "(", "math", ".", "prod", "(", "kernel_size", ")", ")", ",", "persistent", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.XNORScaleBinarizer.forward": [[216, 222], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.conv2d", "torch.conv2d", "torch.conv2d", "x.mul_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "layer_out", ":", "torch", ".", "Tensor", ",", "layer_in", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", "=", "layer_out", "\n", "scale", "=", "torch", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "scale", "=", "F", ".", "conv2d", "(", "scale", ",", "self", ".", "fixed_weight", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ")", "\n", "\n", "return", "x", ".", "mul_", "(", "scale", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops._with_args": [[10, 36], ["_PartialWrapper", "functools.partial", "ops..p", "ops..p.__repr__"], "function", ["None"], ["def", "_with_args", "(", "cls_or_self", ":", "Any", ",", "**", "kwargs", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "Any", ":", "\n", "    ", "r\"\"\"Wrapper that allows creation of class factories.\n    This can be useful when there is a need to create classes with the same\n    constructor arguments, but different instances.\n    Source: https://github.com/pytorch/pytorch/blob/b02c932fb67717cb26d6258908541b670faa4e72/torch/quantization/observer.py\n    Example::\n        >>> Foo.with_args = classmethod(_with_args)\n        >>> foo_builder = Foo.with_args(a=3, b=4).with_args(answer=42)\n        >>> foo_instance1 = foo_builder()\n        >>> foo_instance2 = foo_builder()\n        >>> id(foo_instance1) == id(foo_instance2)\n        False\n    \"\"\"", "\n", "class", "_PartialWrapper", "(", "object", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "            ", "self", ".", "p", "=", "p", "\n", "\n", "", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "keywords", ")", ":", "\n", "            ", "return", "self", ".", "p", "(", "*", "args", ",", "**", "keywords", ")", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "            ", "return", "self", ".", "p", ".", "__repr__", "(", ")", "\n", "\n", "", "with_args", "=", "_with_args", "\n", "", "r", "=", "_PartialWrapper", "(", "partial", "(", "cls_or_self", ",", "**", "kwargs", ")", ")", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize._get_first_layer": [[21, 26], ["model.named_modules", "type"], "function", ["None"], ["", "def", "_get_first_layer", "(", "model", ":", "nn", ".", "Module", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "type", "(", "module", ")", "in", "DEFAULT_MODULE_MAPPING", ":", "\n", "            ", "return", "[", "name", "]", "\n", "", "", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize._get_last_layer": [[28, 33], ["reversed", "list", "model.named_modules", "type"], "function", ["None"], ["", "def", "_get_last_layer", "(", "model", ":", "nn", ".", "Module", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "for", "name", ",", "module", "in", "reversed", "(", "list", "(", "model", ".", "named_modules", "(", ")", ")", ")", ":", "\n", "        ", "if", "type", "(", "module", ")", "in", "DEFAULT_MODULE_MAPPING", ":", "\n", "            ", "return", "[", "name", "]", "\n", "", "", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize._regex_match": [[35, 46], ["re.compile", "model.named_modules", "type", "re.compile.search", "matched_names.append"], "function", ["None"], ["", "def", "_regex_match", "(", "model", ":", "nn", ".", "Module", ",", "pattern", ":", "str", ",", "modules_mapping", ":", "Dict", "[", "nn", ".", "Module", ",", "nn", ".", "Module", "]", ")", "->", "List", "[", "str", "]", ":", "\n", "# Strip first and last character (expected to be $ and $)", "\n", "    ", "pattern", "=", "pattern", "[", "1", ":", "-", "1", "]", "\n", "\n", "matched_names", "=", "[", "]", "\n", "pattern", "=", "re", ".", "compile", "(", "pattern", ")", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "type", "(", "module", ")", "in", "modules_mapping", ":", "\n", "            ", "if", "pattern", ".", "search", "(", "name", ")", "is", "not", "None", ":", "\n", "                ", "matched_names", ".", "append", "(", "name", ")", "\n", "", "", "", "return", "matched_names", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize.get_unique_devices_": [[53, 56], ["module.parameters", "module.buffers"], "function", ["None"], ["def", "get_unique_devices_", "(", "module", ":", "nn", ".", "Module", ")", "->", "List", "[", "torch", ".", "device", "]", ":", "\n", "    ", "return", "{", "p", ".", "device", "for", "p", "in", "module", ".", "parameters", "(", ")", "}", "|", "{", "p", ".", "device", "for", "p", "in", "module", ".", "buffers", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize.get_modules_to_binarize": [[58, 104], ["model.named_modules", "_KNOWN_SPECIAL_WORDS.keys", "type", "copy.copy", "binarize.get_unique_devices_", "modules_mapping[].from_module", "binarize._regex_match", "processed_ignore_layer_names.append", "dataclasses.asdict().items", "len", "next", "modules_to_replace[].to", "logging.warning", "setattr", "len", "iter", "dataclasses.asdict", "type"], "function", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize.get_unique_devices_", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.linear.Linear.from_module", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize._regex_match", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.engine.BinaryChef.next"], ["", "def", "get_modules_to_binarize", "(", "model", ":", "nn", ".", "Module", ",", "bconfig", ":", "BConfig", ",", "\n", "modules_mapping", ":", "Dict", "[", "nn", ".", "Module", ",", "nn", ".", "Module", "]", "=", "None", ",", "\n", "custom_config_layers_name", ":", "Dict", "[", "str", ",", "BConfig", "]", "=", "{", "}", ",", "\n", "ignore_layers_name", ":", "List", "[", "str", "]", "=", "[", "]", ")", "->", "Dict", "[", "str", ",", "nn", ".", "Module", "]", ":", "\n", "    ", "if", "modules_mapping", "is", "None", ":", "\n", "        ", "modules_mapping", "=", "DEFAULT_MODULE_MAPPING", "\n", "\n", "# Parse special cases", "\n", "", "processed_ignore_layer_names", "=", "[", "]", "\n", "for", "name", "in", "ignore_layers_name", ":", "\n", "        ", "if", "name", "in", "_KNOWN_SPECIAL_WORDS", ".", "keys", "(", ")", ":", "\n", "            ", "processed_ignore_layer_names", "+=", "_KNOWN_SPECIAL_WORDS", "[", "name", "]", "(", "model", ")", "\n", "", "elif", "name", "[", "0", "]", "==", "'$'", "and", "name", "[", "-", "1", "]", "==", "'$'", ":", "\n", "            ", "processed_ignore_layer_names", "+=", "_regex_match", "(", "model", ",", "name", ",", "modules_mapping", ")", "\n", "", "else", ":", "\n", "            ", "processed_ignore_layer_names", ".", "append", "(", "name", ")", "\n", "\n", "", "", "modules_to_replace", "=", "{", "}", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "type", "(", "module", ")", "in", "modules_mapping", ":", "\n", "            ", "if", "name", "in", "processed_ignore_layer_names", ":", "\n", "                ", "continue", "\n", "\n", "", "layer_config", "=", "copy", ".", "copy", "(", "bconfig", ")", "\n", "# Use layer specific customization", "\n", "if", "name", "in", "custom_config_layers_name", ":", "\n", "                ", "for", "k", ",", "v", "in", "asdict", "(", "custom_config_layers_name", "[", "name", "]", ")", ".", "items", "(", ")", ":", "\n", "                    ", "setattr", "(", "layer_config", ",", "k", ",", "v", ")", "\n", "\n", "# respect device affinity when swapping modules", "\n", "", "", "devices", "=", "get_unique_devices_", "(", "module", ")", "\n", "assert", "len", "(", "devices", ")", "<=", "1", ",", "(", "\n", "\"swap_module only works with cpu or single-device CUDA modules, \"", "\n", "\"but got devices {}\"", ".", "format", "(", "devices", ")", "\n", ")", "\n", "device", "=", "next", "(", "iter", "(", "devices", ")", ")", "if", "len", "(", "devices", ")", ">", "0", "else", "None", "\n", "\n", "modules_to_replace", "[", "name", "]", "=", "modules_mapping", "[", "type", "(", "module", ")", "]", ".", "from_module", "(", "\n", "module", ",", "\n", "layer_config", "\n", ")", "\n", "if", "device", ":", "\n", "                ", "modules_to_replace", "[", "name", "]", ".", "to", "(", "device", ")", "\n", "", "", "elif", "name", "in", "custom_config_layers_name", ":", "\n", "            ", "logging", ".", "warning", "(", "'Module named {} defined in the configuration was not found.'", ".", "format", "(", "name", ")", ")", "\n", "", "", "return", "modules_to_replace", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize.swap_modules_by_name": [[106, 127], ["module.named_children", "len", "binarize.swap_modules_by_name._swap_module"], "function", ["None"], ["", "def", "swap_modules_by_name", "(", "model", ":", "nn", ".", "Module", ",", "modules_to_replace", ":", "Dict", "[", "str", ",", "nn", ".", "Module", "]", ",", "\n", "modules_mapping", ":", "Dict", "[", "nn", ".", "Module", ",", "nn", ".", "Module", "]", "=", "None", ")", "->", "nn", ".", "Module", ":", "\n", "    ", "if", "modules_mapping", "is", "None", ":", "\n", "        ", "modules_mapping", "=", "DEFAULT_MODULE_MAPPING", "\n", "\n", "", "def", "_swap_module", "(", "module", ":", "nn", ".", "Module", ")", ":", "\n", "        ", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "            ", "if", "type", "(", "child", ")", "in", "modules_mapping", ":", "\n", "                ", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "child", "is", "m", ":", "\n", "                        ", "if", "n", "in", "modules_to_replace", ":", "\n", "                            ", "setattr", "(", "module", ",", "name", ",", "modules_to_replace", ".", "pop", "(", "n", ")", ")", "\n", "", "break", "\n", "", "", "", "else", ":", "\n", "                ", "_swap_module", "(", "child", ")", "\n", "", "", "", "if", "len", "(", "list", "(", "model", ".", "named_children", "(", ")", ")", ")", "==", "0", ":", "\n", "        ", "if", "type", "(", "model", ")", "in", "modules_mapping", "and", "len", "(", "modules_to_replace", ".", "keys", "(", ")", ")", "==", "1", ":", "\n", "            ", "model", "=", "modules_to_replace", "[", "list", "(", "modules_to_replace", ".", "keys", "(", ")", ")", "[", "0", "]", "]", "\n", "", "", "else", ":", "\n", "        ", "_swap_module", "(", "model", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize.prepare_binary_model": [[129, 142], ["binarize.get_modules_to_binarize", "binarize.swap_modules_by_name"], "function", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize.get_modules_to_binarize", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.binarize.swap_modules_by_name"], ["", "def", "prepare_binary_model", "(", "model", ":", "nn", ".", "Module", ",", "bconfig", ":", "BConfig", ",", "\n", "modules_mapping", ":", "Dict", "[", "nn", ".", "Module", ",", "nn", ".", "Module", "]", "=", "None", ",", "\n", "custom_config_layers_name", ":", "Dict", "[", "str", ",", "BConfig", "]", "=", "{", "}", ",", "\n", "ignore_layers_name", ":", "List", "[", "str", "]", "=", "[", "]", ")", "->", "nn", ".", "Module", ":", "\n", "    ", "modules_to_replace", "=", "get_modules_to_binarize", "(", "\n", "model", ",", "\n", "bconfig", ",", "\n", "modules_mapping", ",", "\n", "custom_config_layers_name", ",", "\n", "ignore_layers_name", ")", "\n", "model", "=", "swap_modules_by_name", "(", "model", ",", "modules_to_replace", ",", "modules_mapping", ")", "\n", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.bconfig.Identity.forward": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "layer_out", ":", "torch", ".", "Tensor", ",", "layer_in", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "layer_out", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.bconfig.BConfig.__post_init__": [[17, 26], ["isinstance", "isinstance", "isinstance", "ValueError"], "methods", ["None"], ["def", "__post_init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "isinstance", "(", "\n", "self", ".", "activation_pre_process", ",", "\n", "nn", ".", "Module", ")", "or", "isinstance", "(", "\n", "self", ".", "activation_post_process", ",", "\n", "nn", ".", "Module", ")", "or", "isinstance", "(", "\n", "self", ".", "weight_pre_process", ",", "\n", "nn", ".", "Module", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"BConfig received an instance, please pass the class instead.\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.conv.Conv1d.__init__": [[13, 34], ["torch.Conv1d.__init__", "bconfig.activation_pre_process", "bconfig.activation_post_process", "bconfig.weight_pre_process"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "kernel_size", ":", "_size_1_t", ",", "\n", "stride", ":", "_size_1_t", "=", "1", ",", "\n", "padding", ":", "Union", "[", "str", ",", "_size_1_t", "]", "=", "0", ",", "\n", "dilation", ":", "_size_1_t", "=", "1", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", "padding_mode", ":", "str", "=", "'zeros'", ",", "\n", "bconfig", ":", "BConfig", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Conv1d", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "bias", "=", "bias", ",", "padding_mode", "=", "padding_mode", ")", "\n", "assert", "bconfig", ",", "'bconfig is required for a binarized module'", "\n", "self", ".", "bconfig", "=", "bconfig", "\n", "self", ".", "activation_pre_process", "=", "bconfig", ".", "activation_pre_process", "(", ")", "\n", "self", ".", "activation_post_process", "=", "bconfig", ".", "activation_post_process", "(", "self", ")", "\n", "self", ".", "weight_pre_process", "=", "bconfig", ".", "weight_pre_process", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.conv.Conv1d.forward": [[35, 42], ["conv.Conv1d.activation_pre_process", "conv.Conv1d._conv_forward", "conv.Conv1d.activation_post_process", "conv.Conv1d.weight_pre_process"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "input_proc", "=", "self", ".", "activation_pre_process", "(", "input", ")", "\n", "input_proc", "=", "self", ".", "_conv_forward", "(", "input_proc", ",", "self", ".", "weight_pre_process", "(", "self", ".", "weight", ")", ",", "bias", "=", "self", ".", "bias", ")", "\n", "\n", "return", "self", ".", "activation_post_process", "(", "\n", "input_proc", ",", "\n", "input", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.conv.Conv1d.from_module": [[44, 63], ["cls", "hasattr", "helpers.copy_paramters", "type", "type"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.helpers.copy_paramters"], ["", "@", "classmethod", "\n", "def", "from_module", "(", "cls", ",", "mod", ":", "nn", ".", "Module", ",", "bconfig", ":", "BConfig", "=", "None", ",", "update", ":", "bool", "=", "False", ")", ":", "\n", "        ", "assert", "type", "(", "mod", ")", "==", "cls", ".", "_FLOAT_MODULE", "or", "type", "(", "mod", ")", "==", "cls", ",", "'bnn.'", "+", "cls", ".", "__name__", "+", "'.from_float only works for '", "+", "cls", ".", "_FLOAT_MODULE", ".", "__name__", "\n", "if", "not", "bconfig", ":", "\n", "            ", "assert", "hasattr", "(", "mod", ",", "'bconfig'", ")", ",", "'The input modele requires a predifined bconfig'", "\n", "assert", "mod", ".", "bconfig", ",", "'The input modele bconfig is invalid'", "\n", "bconfig", "=", "mod", ".", "bconfig", "\n", "", "bnn_conv", "=", "cls", "(", "mod", ".", "in_channels", ",", "mod", ".", "out_channels", ",", "mod", ".", "kernel_size", ",", "\n", "stride", "=", "mod", ".", "stride", ",", "padding", "=", "mod", ".", "padding", ",", "dilation", "=", "mod", ".", "dilation", ",", "\n", "groups", "=", "mod", ".", "groups", ",", "bias", "=", "mod", ".", "bias", "is", "not", "None", ",", "\n", "padding_mode", "=", "mod", ".", "padding_mode", ",", "bconfig", "=", "bconfig", ")", "\n", "bnn_conv", ".", "weight", "=", "mod", ".", "weight", "\n", "bnn_conv", ".", "bias", "=", "mod", ".", "bias", "\n", "\n", "if", "update", ":", "\n", "            ", "copy_paramters", "(", "mod", ",", "bnn_conv", ",", "bconfig", ")", "\n", "\n", "", "return", "bnn_conv", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.conv.Conv2d.__init__": [[68, 89], ["torch.Conv2d.__init__", "bconfig.activation_pre_process", "bconfig.activation_post_process", "bconfig.weight_pre_process"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "kernel_size", ":", "_size_2_t", ",", "\n", "stride", ":", "_size_2_t", "=", "1", ",", "\n", "padding", ":", "Union", "[", "str", ",", "_size_2_t", "]", "=", "0", ",", "\n", "dilation", ":", "_size_2_t", "=", "1", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", "padding_mode", ":", "str", "=", "'zeros'", ",", "\n", "bconfig", ":", "BConfig", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Conv2d", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "bias", "=", "bias", ",", "padding_mode", "=", "padding_mode", ")", "\n", "assert", "bconfig", ",", "'bconfig is required for a binarized module'", "\n", "self", ".", "bconfig", "=", "bconfig", "\n", "self", ".", "activation_pre_process", "=", "bconfig", ".", "activation_pre_process", "(", ")", "\n", "self", ".", "activation_post_process", "=", "bconfig", ".", "activation_post_process", "(", "self", ")", "\n", "self", ".", "weight_pre_process", "=", "bconfig", ".", "weight_pre_process", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.conv.Conv2d.forward": [[90, 97], ["conv.Conv2d.activation_pre_process", "conv.Conv2d._conv_forward", "conv.Conv2d.activation_post_process", "conv.Conv2d.weight_pre_process"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "input_proc", "=", "self", ".", "activation_pre_process", "(", "input", ")", "\n", "input_proc", "=", "self", ".", "_conv_forward", "(", "input_proc", ",", "self", ".", "weight_pre_process", "(", "self", ".", "weight", ")", ",", "bias", "=", "self", ".", "bias", ")", "\n", "\n", "return", "self", ".", "activation_post_process", "(", "\n", "input_proc", ",", "\n", "input", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.conv.Conv2d.from_module": [[99, 118], ["cls", "hasattr", "helpers.copy_paramters", "type", "type"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.helpers.copy_paramters"], ["", "@", "classmethod", "\n", "def", "from_module", "(", "cls", ",", "mod", ":", "nn", ".", "Module", ",", "bconfig", ":", "BConfig", "=", "None", ",", "update", ":", "bool", "=", "False", ")", ":", "\n", "        ", "assert", "type", "(", "mod", ")", "==", "cls", ".", "_FLOAT_MODULE", "or", "type", "(", "mod", ")", "==", "cls", ",", "'bnn.'", "+", "cls", ".", "__name__", "+", "'.from_float only works for '", "+", "cls", ".", "_FLOAT_MODULE", ".", "__name__", "\n", "if", "not", "bconfig", ":", "\n", "            ", "assert", "hasattr", "(", "mod", ",", "'bconfig'", ")", ",", "'The input modele requires a predifined bconfig'", "\n", "assert", "mod", ".", "bconfig", ",", "'The input modele bconfig is invalid'", "\n", "bconfig", "=", "mod", ".", "bconfig", "\n", "", "bnn_conv", "=", "cls", "(", "mod", ".", "in_channels", ",", "mod", ".", "out_channels", ",", "mod", ".", "kernel_size", ",", "\n", "stride", "=", "mod", ".", "stride", ",", "padding", "=", "mod", ".", "padding", ",", "dilation", "=", "mod", ".", "dilation", ",", "\n", "groups", "=", "mod", ".", "groups", ",", "bias", "=", "mod", ".", "bias", "is", "not", "None", ",", "\n", "padding_mode", "=", "mod", ".", "padding_mode", ",", "bconfig", "=", "bconfig", ")", "\n", "bnn_conv", ".", "weight", "=", "mod", ".", "weight", "\n", "bnn_conv", ".", "bias", "=", "mod", ".", "bias", "\n", "\n", "if", "update", ":", "\n", "            ", "copy_paramters", "(", "mod", ",", "bnn_conv", ",", "bconfig", ")", "\n", "\n", "", "return", "bnn_conv", "\n", "", "", ""]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.helpers.copy_paramters": [[7, 18], ["getattr", "getattr", "getattr.named_parameters", "dataclasses.fields", "getattr", "torch.equal", "torch.tensor", "torch.tensor", "getattr.data.copy_", "getattr.size", "source_param.size"], "function", ["None"], ["def", "copy_paramters", "(", "source_mod", ":", "torch", ".", "nn", ".", "Module", ",", "target_mod", ":", "torch", ".", "nn", ".", "Module", ",", "bconfig", ":", "BConfig", ")", "->", "None", ":", "\n", "    ", "attributes", "=", "[", "field", ".", "name", "for", "field", "in", "fields", "(", "bconfig", ")", "]", "\n", "for", "attribute", "in", "attributes", ":", "\n", "        ", "attr_obj_source", "=", "getattr", "(", "source_mod", ",", "attribute", ",", "None", ")", "\n", "attr_obj_target", "=", "getattr", "(", "target_mod", ",", "attribute", ",", "None", ")", "\n", "for", "name", ",", "source_param", "in", "attr_obj_source", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "source_param", "is", "not", "None", "and", "attr_obj_target", "is", "not", "None", ":", "\n", "                ", "target_param", "=", "getattr", "(", "attr_obj_target", ",", "name", ",", "None", ")", "\n", "if", "target_param", "is", "not", "None", ":", "\n", "                    ", "if", "torch", ".", "equal", "(", "torch", ".", "tensor", "(", "target_param", ".", "size", "(", ")", ")", ",", "torch", ".", "tensor", "(", "source_param", ".", "size", "(", ")", ")", ")", ":", "\n", "                        ", "target_param", ".", "data", ".", "copy_", "(", "source_param", ".", "data", ")", "\n", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.linear.Linear.__init__": [[12, 21], ["torch.Linear.__init__", "bconfig.activation_pre_process", "bconfig.activation_post_process", "bconfig.weight_pre_process"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ":", "int", ",", "out_features", ":", "int", ",", "bias", ":", "bool", "=", "True", ",", "\n", "bconfig", ":", "BConfig", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Linear", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "assert", "bconfig", ",", "'bconfig is required for a binarized module'", "\n", "self", ".", "bconfig", "=", "bconfig", "\n", "self", ".", "activation_pre_process", "=", "bconfig", ".", "activation_pre_process", "(", ")", "\n", "self", ".", "activation_post_process", "=", "bconfig", ".", "activation_post_process", "(", "self", ")", "\n", "self", ".", "weight_pre_process", "=", "bconfig", ".", "weight_pre_process", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.linear.Linear.forward": [[22, 27], ["linear.Linear.activation_pre_process", "linear.Linear.activation_post_process", "torch.linear", "torch.linear", "torch.linear", "linear.Linear.weight_pre_process"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "input_proc", "=", "self", ".", "activation_pre_process", "(", "input", ")", "\n", "return", "self", ".", "activation_post_process", "(", "\n", "F", ".", "linear", "(", "input_proc", ",", "self", ".", "weight_pre_process", "(", "self", ".", "weight", ")", ",", "self", ".", "bias", ")", ",", "\n", "input", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.linear.Linear.from_module": [[29, 45], ["cls", "hasattr", "helpers.copy_paramters", "type", "type"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.helpers.copy_paramters"], ["", "@", "classmethod", "\n", "def", "from_module", "(", "cls", ",", "mod", ":", "nn", ".", "Module", ",", "bconfig", ":", "BConfig", "=", "None", ",", "update", ":", "bool", "=", "False", ")", "->", "nn", ".", "Module", ":", "\n", "        ", "assert", "type", "(", "mod", ")", "==", "cls", ".", "_FLOAT_MODULE", "or", "type", "(", "mod", ")", "==", "cls", ",", "'bnn.'", "+", "cls", ".", "__name__", "+", "'.from_float only works for '", "+", "cls", ".", "_FLOAT_MODULE", ".", "__name__", "\n", "if", "not", "bconfig", ":", "\n", "            ", "assert", "hasattr", "(", "mod", ",", "'bconfig'", ")", ",", "'The input modele requires a predifined bconfig'", "\n", "assert", "mod", ".", "bconfig", ",", "'The input modele bconfig is invalid'", "\n", "bconfig", "=", "mod", ".", "bconfig", "\n", "", "bnn_linear", "=", "cls", "(", "mod", ".", "in_features", ",", "mod", ".", "out_features", ",", "bias", "=", "mod", ".", "bias", "is", "not", "None", ",", "\n", "bconfig", "=", "bconfig", ")", "\n", "bnn_linear", ".", "weight", "=", "mod", ".", "weight", "\n", "bnn_linear", ".", "bias", "=", "mod", ".", "bias", "\n", "\n", "if", "update", ":", "\n", "            ", "copy_paramters", "(", "mod", ",", "bnn_linear", ",", "bconfig", ")", "\n", "", "return", "bnn_linear", "\n", "", "", ""]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.common.conv3x3": [[4, 9], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", "\n", ")", "->", "nn", ".", "Module", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.common.conv1x1": [[11, 15], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", "\n", ")", "->", "nn", ".", "Module", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.hierarchical_block.HBlock.__init__": [[9, 37], ["torch.Module.__init__", "norm_layer", "common.conv3x3", "norm_layer", "common.conv3x3", "norm_layer", "common.conv3x3", "NotImplementedError", "NotImplementedError", "int", "int", "int", "int", "int", "int", "int", "activation", "activation", "activation", "activation", "activation", "activation", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.common.conv3x3", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.common.conv3x3", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.common.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", ",", "\n", "activation", "=", "nn", ".", "ReLU", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "HBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in HBlock\"", ")", "\n", "", "if", "stride", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Stride > 1 not supported in HBlock\"", ")", "\n", "", "self", ".", "bn1", "=", "norm_layer", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "int", "(", "planes", "/", "2", ")", ",", "groups", "=", "groups", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "int", "(", "planes", "/", "2", ")", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "int", "(", "planes", "/", "2", ")", ",", "int", "(", "planes", "/", "4", ")", ",", "groups", "=", "groups", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "int", "(", "planes", "/", "4", ")", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "int", "(", "planes", "/", "4", ")", ",", "int", "(", "planes", "/", "4", ")", ",", "groups", "=", "groups", ")", "\n", "\n", "self", ".", "act1", "=", "activation", "(", "inplace", "=", "True", ")", "if", "activation", "==", "nn", ".", "ReLU", "else", "activation", "(", "num_parameters", "=", "int", "(", "planes", "/", "2", ")", ")", "\n", "self", ".", "act2", "=", "activation", "(", "inplace", "=", "True", ")", "if", "activation", "==", "nn", ".", "ReLU", "else", "activation", "(", "num_parameters", "=", "int", "(", "planes", "/", "2", ")", ")", "\n", "self", ".", "act3", "=", "activation", "(", "inplace", "=", "True", ")", "if", "activation", "==", "nn", ".", "ReLU", "else", "activation", "(", "num_parameters", "=", "int", "(", "planes", "/", "4", ")", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.hierarchical_block.HBlock.forward": [[38, 61], ["hierarchical_block.HBlock.bn1", "hierarchical_block.HBlock.act1", "hierarchical_block.HBlock.conv1", "hierarchical_block.HBlock.bn2", "hierarchical_block.HBlock.act2", "hierarchical_block.HBlock.conv2", "hierarchical_block.HBlock.bn3", "hierarchical_block.HBlock.act3", "hierarchical_block.HBlock.conv3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hierarchical_block.HBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out1", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out1", "=", "self", ".", "act1", "(", "out1", ")", "\n", "out1", "=", "self", ".", "conv1", "(", "out1", ")", "\n", "\n", "out2", "=", "self", ".", "bn2", "(", "out1", ")", "\n", "out2", "=", "self", ".", "act2", "(", "out2", ")", "\n", "out2", "=", "self", ".", "conv2", "(", "out2", ")", "\n", "\n", "out3", "=", "self", ".", "bn3", "(", "out2", ")", "\n", "out3", "=", "self", ".", "act3", "(", "out3", ")", "\n", "out3", "=", "self", ".", "conv3", "(", "out3", ")", "\n", "\n", "out3", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ",", "out3", ")", ",", "1", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "residual", ")", "\n", "\n", "", "out3", "+=", "residual", "\n", "\n", "return", "out3", "\n", "", "", ""]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.FactorizedConv.__init__": [[56, 69], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ":", "int", ",", "kernel_size", ":", "int", ",", "stride", ":", "int", ",", "affine", ":", "bool", "=", "True", ",", "skip", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "super", "(", "FactorizedConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "skip", "=", "skip", "or", "True", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "(", "1", ",", "kernel_size", ")", ",", "stride", "=", "(", "1", ",", "stride", ")", ",", "padding", "=", "(", "0", ",", "kernel_size", "//", "2", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "PReLU", "(", "num_parameters", "=", "C", ")", ",", "\n", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "affine", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "(", "kernel_size", ",", "1", ")", ",", "stride", "=", "(", "stride", ",", "1", ")", ",", "padding", "=", "(", "kernel_size", "//", "2", ",", "0", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "PReLU", "(", "num_parameters", "=", "C", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.FactorizedConv.forward": [[71, 76], ["bats_ops.channel_shuffle", "bats_ops.channel_shuffle", "bats_ops.FactorizedConv.op", "bats_ops.FactorizedConv.op"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.channel_shuffle", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.channel_shuffle"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "self", ".", "skip", "and", "self", ".", "stride", "==", "1", ":", "\n", "            ", "return", "x", "+", "channel_shuffle", "(", "self", ".", "op", "(", "x", ")", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "return", "channel_shuffle", "(", "self", ".", "op", "(", "x", ")", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.ReLUConvBN.__init__": [[80, 99], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "C_in", ":", "int", ",", "\n", "C_out", ":", "int", ",", "\n", "kernel_size", ":", "int", ",", "\n", "stride", ":", "int", ",", "\n", "padding", ":", "int", ",", "\n", "affine", ":", "bool", "=", "True", ",", "\n", "skip", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "skip", "=", "skip", "or", "True", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "PReLU", "(", "num_parameters", "=", "C_out", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.ReLUConvBN.forward": [[101, 106], ["bats_ops.ReLUConvBN.op", "bats_ops.ReLUConvBN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "self", ".", "skip", "and", "self", ".", "stride", "==", "1", "and", "self", ".", "C_in", "==", "self", ".", "C_out", ":", "\n", "            ", "return", "x", "+", "self", ".", "op", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.DilConv.__init__": [[110, 139], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "C_in", ":", "int", ",", "\n", "C_out", ":", "int", ",", "\n", "kernel_size", ":", "int", ",", "\n", "stride", ":", "int", ",", "\n", "padding", ":", "int", ",", "\n", "dilation", ":", "int", ",", "\n", "affine", ":", "bool", "=", "True", ",", "\n", "skip", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "12", ")", "->", "None", ":", "\n", "        ", "super", "(", "DilConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "skip", "=", "skip", "or", "True", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "\n", "C_in", ",", "\n", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "C_in", ",", "\n", "C_in", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "PReLU", "(", "\n", "num_parameters", "=", "C_in", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.DilConv.forward": [[141, 146], ["bats_ops.channel_shuffle", "bats_ops.channel_shuffle", "bats_ops.DilConv.op", "bats_ops.DilConv.op"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.channel_shuffle", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.channel_shuffle"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "self", ".", "skip", "and", "self", ".", "stride", "==", "1", ":", "\n", "            ", "return", "x", "+", "channel_shuffle", "(", "self", ".", "op", "(", "x", ")", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "return", "channel_shuffle", "(", "self", ".", "op", "(", "x", ")", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.SepConv.__init__": [[150, 167], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "C_in", ":", "int", ",", "\n", "C_out", ":", "int", ",", "\n", "kernel_size", ":", "int", ",", "\n", "stride", ":", "int", ",", "\n", "padding", ":", "int", ",", "\n", "affine", ":", "bool", "=", "True", ",", "\n", "skip", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "12", ")", "->", "None", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "skip", "=", "skip", "or", "True", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "PReLU", "(", "num_parameters", "=", "C_in", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.SepConv.forward": [[169, 174], ["bats_ops.channel_shuffle", "bats_ops.channel_shuffle", "bats_ops.SepConv.op", "bats_ops.SepConv.op"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.channel_shuffle", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.channel_shuffle"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "self", ".", "skip", "and", "self", ".", "stride", "==", "1", ":", "\n", "            ", "return", "x", "+", "channel_shuffle", "(", "self", ".", "op", "(", "x", ")", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "return", "channel_shuffle", "(", "self", ".", "op", "(", "x", ")", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.Zero.__init__": [[178, 181], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stride", ":", "int", ")", "->", "None", ":", "\n", "        ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.Zero.forward": [[182, 188], ["x.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "h", "//=", "self", ".", "stride", "\n", "w", "//=", "self", ".", "stride", "\n", "padding", "=", "torch", ".", "zeros", "(", "n", ",", "c", ",", "h", ",", "w", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "x", ".", "device", ")", "\n", "return", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.FactorizedReduce.__init__": [[192, 203], ["torch.Module.__init__", "torch.PReLU", "torch.PReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ":", "int", ",", "C_out", ":", "int", ",", "affine", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "C_out", "%", "2", "==", "0", "\n", "self", ".", "activation", "=", "nn", ".", "PReLU", "(", "num_parameters", "=", "C_out", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.FactorizedReduce.forward": [[204, 210], ["bats_ops.FactorizedReduce.bn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "bats_ops.FactorizedReduce.activation", "bats_ops.FactorizedReduce.conv_1", "bats_ops.FactorizedReduce.conv_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_1", "(", "x", ")", ",", "self", ".", "conv_2", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "activation", "(", "out", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.channel_shuffle": [[20, 31], ["x.view.data.size", "x.view.view", "torch.transpose().contiguous", "torch.transpose().contiguous", "x.view.view", "torch.transpose", "torch.transpose"], "function", ["None"], ["def", "channel_shuffle", "(", "x", ":", "torch", ".", "Tensor", ",", "groups", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "batchsize", ",", "num_channels", ",", "height", ",", "width", "=", "x", ".", "data", ".", "size", "(", ")", "\n", "\n", "channels_per_group", "=", "num_channels", "//", "groups", "\n", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "groups", ",", "channels_per_group", ",", "height", ",", "width", ")", "\n", "x", "=", "torch", ".", "transpose", "(", "x", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "-", "1", ",", "height", ",", "width", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.drop_path": [[33, 40], ["torch.tensor().bernoulli_", "torch.tensor().bernoulli_", "x.div_", "x.mul_", "torch.tensor", "torch.tensor", "x.size"], "function", ["None"], ["", "def", "drop_path", "(", "x", ":", "torch", ".", "Tensor", ",", "drop_prob", ":", "float", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "if", "drop_prob", ">", "0.", ":", "\n", "        ", "keep_prob", "=", "1.", "-", "drop_prob", "\n", "mask", "=", "torch", ".", "tensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ",", "device", "=", "x", ".", "device", ")", ".", "bernoulli_", "(", "keep_prob", ")", "\n", "x", ".", "div_", "(", "keep_prob", ")", "\n", "x", ".", "mul_", "(", "mask", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.res_block.BasicBlock.__init__": [[11, 39], ["torch.Module.__init__", "common.conv3x3", "norm_layer", "common.conv3x3", "norm_layer", "ValueError", "NotImplementedError", "activation", "activation", "activation", "activation"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.common.conv3x3", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.common.conv3x3"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", ",", "\n", "activation", "=", "nn", ".", "ReLU", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "act1", "=", "activation", "(", "inplace", "=", "True", ")", "if", "activation", "==", "nn", ".", "ReLU", "else", "activation", "(", "num_parameters", "=", "planes", ")", "\n", "self", ".", "act2", "=", "activation", "(", "inplace", "=", "True", ")", "if", "activation", "==", "nn", ".", "ReLU", "else", "activation", "(", "num_parameters", "=", "planes", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.res_block.BasicBlock.forward": [[40, 57], ["res_block.BasicBlock.conv1", "res_block.BasicBlock.bn1", "res_block.BasicBlock.act1", "res_block.BasicBlock.conv2", "res_block.BasicBlock.bn2", "res_block.BasicBlock.act2", "res_block.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "act1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "act2", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.res_block.Bottleneck.__init__": [[68, 97], ["torch.Module.__init__", "common.conv1x1", "norm_layer", "common.conv3x3", "norm_layer", "common.conv1x1", "norm_layer", "int", "activation", "activation", "activation", "activation", "activation", "activation"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.common.conv1x1", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.common.conv3x3", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.common.conv1x1"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", ",", "\n", "activation", "=", "nn", ".", "ReLU", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "act1", "=", "activation", "(", "inplace", "=", "True", ")", "if", "activation", "==", "nn", ".", "ReLU", "else", "activation", "(", "num_parameters", "=", "width", ")", "\n", "self", ".", "act2", "=", "activation", "(", "inplace", "=", "True", ")", "if", "activation", "==", "nn", ".", "ReLU", "else", "activation", "(", "num_parameters", "=", "width", ")", "\n", "self", ".", "act3", "=", "activation", "(", "\n", "inplace", "=", "True", ")", "if", "activation", "==", "nn", ".", "ReLU", "else", "activation", "(", "\n", "num_parameters", "=", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.res_block.Bottleneck.forward": [[98, 119], ["res_block.Bottleneck.conv1", "res_block.Bottleneck.bn1", "res_block.Bottleneck.act1", "res_block.Bottleneck.conv2", "res_block.Bottleneck.bn2", "res_block.Bottleneck.act2", "res_block.Bottleneck.conv3", "res_block.Bottleneck.bn3", "res_block.Bottleneck.act3", "res_block.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "act1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "act2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "act3", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.res_block.PreBasicBlock.__init__": [[124, 151], ["torch.Module.__init__", "common.conv3x3", "norm_layer", "common.conv3x3", "norm_layer", "ValueError", "NotImplementedError", "activation", "activation", "activation", "activation"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.common.conv3x3", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.common.conv3x3"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", ",", "\n", "activation", "=", "nn", ".", "ReLU", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "PreBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "inplanes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "act1", "=", "activation", "(", "inplace", "=", "True", ")", "if", "activation", "==", "nn", ".", "ReLU", "else", "activation", "(", "num_parameters", "=", "planes", ")", "\n", "self", ".", "act2", "=", "activation", "(", "inplace", "=", "True", ")", "if", "activation", "==", "nn", ".", "ReLU", "else", "activation", "(", "num_parameters", "=", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.res_block.PreBasicBlock.forward": [[152, 168], ["res_block.PreBasicBlock.bn1", "res_block.PreBasicBlock.conv1", "res_block.PreBasicBlock.act1", "res_block.PreBasicBlock.bn2", "res_block.PreBasicBlock.conv2", "res_block.PreBasicBlock.act2", "res_block.PreBasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "act1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "act2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.res_block.PreBottleneck.__init__": [[179, 208], ["torch.Module.__init__", "common.conv1x1", "norm_layer", "common.conv3x3", "norm_layer", "common.conv1x1", "norm_layer", "int", "activation", "activation", "activation", "activation", "activation", "activation"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.common.conv1x1", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.common.conv3x3", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.common.conv1x1"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", ",", "\n", "activation", "=", "nn", ".", "ReLU", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "PreBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "inplanes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "act1", "=", "activation", "(", "inplace", "=", "True", ")", "if", "activation", "==", "nn", ".", "ReLU", "else", "activation", "(", "num_parameters", "=", "width", ")", "\n", "self", ".", "act2", "=", "activation", "(", "inplace", "=", "True", ")", "if", "activation", "==", "nn", ".", "ReLU", "else", "activation", "(", "num_parameters", "=", "width", ")", "\n", "self", ".", "act3", "=", "activation", "(", "\n", "inplace", "=", "True", ")", "if", "activation", "==", "nn", ".", "ReLU", "else", "activation", "(", "\n", "num_parameters", "=", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.res_block.PreBottleneck.forward": [[209, 230], ["res_block.PreBottleneck.bn1", "res_block.PreBottleneck.conv1", "res_block.PreBottleneck.act1", "res_block.PreBottleneck.bn2", "res_block.PreBottleneck.conv2", "res_block.PreBottleneck.act2", "res_block.PreBottleneck.bn3", "res_block.PreBottleneck.conv3", "res_block.PreBottleneck.act3", "res_block.PreBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "act1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "act2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "act3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.bats.Cell.__init__": [[11, 35], ["torch.Module.__init__", "layers.bats_ops.ReLUConvBN", "bats.Cell._compile", "layers.bats_ops.FactorizedReduce", "layers.bats_ops.ReLUConvBN", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.bats.Cell._compile"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "genotype", ":", "Genotype", ",", "\n", "C_prev_prev", ":", "int", ",", "\n", "C_prev", ":", "int", ",", "\n", "C", ":", "int", ",", "\n", "reduction", ":", "bool", ",", "\n", "reduction_prev", ":", "bool", ",", "\n", "groups", ":", "int", "=", "12", ",", "\n", "use_shake_shake", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_shake_shake", "=", "use_shake_shake", "\n", "if", "reduction_prev", ":", "\n", "            ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "if", "reduction", ":", "\n", "            ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "reduce", ")", "\n", "concat", "=", "genotype", ".", "reduce_concat", "\n", "", "else", ":", "\n", "            ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "normal", ")", "\n", "concat", "=", "genotype", ".", "normal_concat", "\n", "", "self", ".", "_compile", "(", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ",", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.bats.Cell._compile": [[36, 55], ["len", "torch.ModuleList", "torch.ModuleList", "zip", "len", "len", "len"], "methods", ["None"], ["", "def", "_compile", "(", "\n", "self", ",", "\n", "C", ":", "int", ",", "\n", "op_names", ":", "List", "[", "str", "]", ",", "\n", "indices", ":", "List", "[", "int", "]", ",", "\n", "concat", ":", "List", "[", "int", "]", ",", "\n", "reduction", ":", "bool", ",", "\n", "groups", ":", "int", ")", "->", "None", ":", "\n", "        ", "assert", "len", "(", "op_names", ")", "==", "len", "(", "indices", ")", "\n", "self", ".", "_steps", "=", "len", "(", "op_names", ")", "//", "2", "\n", "self", ".", "_concat", "=", "concat", "\n", "self", ".", "multiplier", "=", "len", "(", "concat", ")", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "            ", "stride", "=", "2", "if", "reduction", "and", "index", "<", "2", "else", "1", "\n", "op", "=", "OPS", "[", "name", "]", "(", "C", ",", "stride", ",", "True", ",", "True", ",", "groups", ")", "\n", "self", ".", "_ops", "+=", "[", "op", "]", "\n", "", "self", ".", "_indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.bats.Cell.forward": [[56, 84], ["bats.Cell.preprocess0", "bats.Cell.preprocess1", "range", "op1", "op2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "isinstance", "layers.bats_ops.drop_path", "isinstance", "layers.bats_ops.drop_path", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "shake[].item", "enumerate", "len", "len"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.drop_path", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.bats_ops.drop_path"], ["", "def", "forward", "(", "self", ",", "s0", ":", "torch", ".", "Tensor", ",", "s1", ":", "torch", ".", "Tensor", ",", "drop_prob", ":", "float", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "            ", "h1", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "]", "]", "\n", "h2", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "+", "1", "]", "]", "\n", "op1", "=", "self", ".", "_ops", "[", "2", "*", "i", "]", "\n", "op2", "=", "self", ".", "_ops", "[", "2", "*", "i", "+", "1", "]", "\n", "h1", "=", "op1", "(", "h1", ")", "\n", "h2", "=", "op2", "(", "h2", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.", ":", "\n", "                ", "if", "not", "isinstance", "(", "op1", ",", "nn", ".", "Identity", ")", ":", "\n", "                    ", "h1", "=", "drop_path", "(", "h1", ",", "drop_prob", ")", "\n", "", "if", "not", "isinstance", "(", "op2", ",", "nn", ".", "Identity", ")", ":", "\n", "                    ", "h2", "=", "drop_path", "(", "h2", ",", "drop_prob", ")", "\n", "", "", "s", "=", "h1", "+", "h2", "\n", "states", "+=", "[", "s", "]", "\n", "\n", "", "if", "self", ".", "use_shake_shake", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "shake", "=", "torch", ".", "softmax", "(", "torch", ".", "zeros", "(", "len", "(", "self", ".", "_concat", ")", ")", ".", "uniform_", "(", ")", ",", "dim", "=", "0", ")", "\n", "return", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "*", "shake", "[", "j", "]", ".", "item", "(", ")", "for", "j", ",", "i", "in", "enumerate", "(", "self", ".", "_concat", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "return", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "*", "(", "1", "/", "len", "(", "self", ".", "_concat", ")", ")", "for", "i", "in", "self", ".", "_concat", "]", ",", "dim", "=", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "_concat", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.bats.AuxiliaryHead.__init__": [[88, 101], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.AvgPool2d", "torch.AvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ":", "int", ",", "num_classes", ":", "int", ",", "stride", ":", "int", ")", "->", "None", ":", "\n", "        ", "super", "(", "AuxiliaryHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "PReLU", "(", "num_parameters", "=", "128", ")", ",", "\n", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "PReLU", "(", "num_parameters", "=", "768", ")", ",", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.bats.AuxiliaryHead.forward": [[102, 106], ["bats.AuxiliaryHead.features", "bats.AuxiliaryHead.classifier", "bats.AuxiliaryHead.view", "bats.AuxiliaryHead.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.bats.BATSNetworkCIFAR.__init__": [[110, 140], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "bats.Cell", "bats.AuxiliaryHead"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ":", "int", ",", "num_classes", ":", "int", ",", "layers", ":", "int", ",", "auxiliary", ":", "bool", ",", "genotype", ",", "groups", ":", "int", ")", "->", "None", ":", "\n", "        ", "super", "(", "BATSNetworkCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "stem_multiplier", "=", "3", "\n", "C_curr", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "                ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "groups", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "                ", "C_to_auxiliary", "=", "C_prev", "\n", "", "", "if", "auxiliary", ":", "\n", "            ", "self", ".", "auxiliary_head", "=", "AuxiliaryHead", "(", "C_to_auxiliary", ",", "num_classes", ",", "3", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.bats.BATSNetworkCIFAR.forward": [[141, 152], ["bats.BATSNetworkCIFAR.stem", "enumerate", "bats.BATSNetworkCIFAR.global_pooling", "bats.BATSNetworkCIFAR.classifier", "bats.BATSNetworkCIFAR.view", "cell", "bats.BATSNetworkCIFAR.size", "bats.BATSNetworkCIFAR.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "logits_aux", "=", "None", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "input", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "                ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "                    ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.bats.BATSNetworkImageNet.__init__": [[156, 194], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "bats.Cell", "bats.AuxiliaryHead"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ":", "int", ",", "num_classes", ":", "int", ",", "layers", ":", "int", ",", "auxiliary", ":", "bool", ",", "genotype", ",", "groups", ":", "int", ")", "->", "None", ":", "\n", "        ", "super", "(", "BATSNetworkImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "\n", "self", ".", "stem0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", "//", "2", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "groups", "=", "C", "//", "20", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "self", ".", "stem1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "groups", "=", "C", "//", "20", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C", ",", "C", ",", "C", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "True", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "                ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "groups", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "                ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "            ", "self", ".", "auxiliary_head", "=", "AuxiliaryHead", "(", "C_to_auxiliary", ",", "num_classes", ",", "2", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.bats.BATSNetworkImageNet.forward": [[195, 207], ["bats.BATSNetworkImageNet.stem0", "bats.BATSNetworkImageNet.stem1", "enumerate", "bats.BATSNetworkImageNet.global_pooling", "bats.BATSNetworkImageNet.classifier", "bats.BATSNetworkImageNet.view", "cell", "bats.BATSNetworkImageNet.size", "bats.BATSNetworkImageNet.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "logits_aux", "=", "None", "\n", "s0", "=", "self", ".", "stem0", "(", "input", ")", "\n", "s1", "=", "self", ".", "stem1", "(", "s0", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "                ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "                    ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "", "", ""]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.resnet.DaBNNStem.__init__": [[11, 36], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "activation", "torch.Conv2d", "torch.Conv2d", "norm_layer", "activation", "torch.Conv2d", "torch.Conv2d", "norm_layer", "activation", "torch.Conv2d", "torch.Conv2d", "norm_layer", "activation"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "planes", ":", "int", ",", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", ",", "\n", "activation", "=", "nn", ".", "ReLU", ")", ":", "\n", "        ", "super", "(", "DaBNNStem", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "planes", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "planes", "//", "2", ")", ",", "\n", "activation", "(", ")", "\n", ")", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "planes", "//", "2", ",", "planes", "//", "4", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "planes", "//", "4", ")", ",", "\n", "activation", "(", ")", "\n", ")", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "planes", "//", "4", ",", "planes", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "planes", "//", "2", ")", ",", "\n", "activation", "(", ")", "\n", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "planes", ")", ",", "\n", "activation", "(", ")", "\n", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.resnet.DaBNNStem.forward": [[37, 48], ["resnet.DaBNNStem.conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "resnet.DaBNNStem.conv3", "resnet.DaBNNStem.conv2_2", "resnet.DaBNNStem.maxpool", "resnet.DaBNNStem.conv2_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "self", ".", "conv2_2", "(", "self", ".", "conv2_1", "(", "x", ")", ")", ",", "\n", "self", ".", "maxpool", "(", "x", ")", "\n", "]", ",", "\n", "dim", "=", "1", "\n", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.resnet.ResNet.__init__": [[52, 119], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "len", "ValueError", "torch.Conv2d", "torch.Conv2d", "norm_layer", "isinstance", "resnet.ResNet.modules", "resnet.DaBNNStem", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", ",", "HBlock", ",", "PreBasicBlock", ",", "PreBottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "zero_init_residual", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "replace_stride_with_dilation", ":", "Optional", "[", "List", "[", "bool", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", ",", "\n", "activation", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", ",", "\n", "stem_type", ":", "str", "=", "'basic'", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "activation", "is", "None", ":", "\n", "            ", "activation", "=", "nn", ".", "ReLU", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "self", ".", "_activation", "=", "activation", "\n", "\n", "self", ".", "stem_type", "=", "stem_type", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "if", "stem_type", "==", "'basic'", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "", "elif", "stem_type", "==", "'dabnn'", ":", "\n", "            ", "self", ".", "conv1", "=", "DaBNNStem", "(", "self", ".", "inplanes", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "outplanes", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.resnet.ResNet._make_layer": [[120, 146], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.AvgPool2d", "torch.AvgPool2d", "layers.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.layers.common.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "planes", ":", "int", ",", "blocks", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "dilate", ":", "bool", "=", "False", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "stride", ",", "stride", "=", "stride", ",", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", ",", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", "=", "1", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ",", "activation", "=", "self", ".", "_activation", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ",", "activation", "=", "self", ".", "_activation", ")", ")", "\n", "", "self", ".", "outplanes", "=", "planes", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.resnet.ResNet._forward_impl": [[147, 165], ["resnet.ResNet.conv1", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.ResNet.fc", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "stem_type", "==", "'basic'", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.resnet.ResNet.forward": [[166, 168], ["resnet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.resnet._resnet": [[170, 178], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "_resnet", "(", "\n", "arch", ":", "str", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", ",", "HBlock", ",", "PreBottleneck", ",", "PreBasicBlock", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "ResNet", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.resnet.resnet18": [[180, 190], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.resnet._resnet"], ["", "def", "resnet18", "(", "block_type", ":", "Optional", "[", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", ",", "HBlock", ",", "\n", "PreBottleneck", ",", "PreBasicBlock", "]", "]", "]", "=", "None", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", "if", "block_type", "is", "None", "else", "block_type", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.resnet.resnet34": [[192, 202], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.resnet._resnet"], ["", "def", "resnet34", "(", "block_type", ":", "Optional", "[", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", ",", "HBlock", ",", "\n", "PreBottleneck", ",", "PreBasicBlock", "]", "]", "]", "=", "None", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", "if", "block_type", "is", "None", "else", "block_type", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.resnet.resnet50": [[204, 214], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.models.resnet._resnet"], ["", "def", "resnet50", "(", "block_type", ":", "Optional", "[", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", ",", "HBlock", ",", "\n", "PreBottleneck", ",", "PreBasicBlock", "]", "]", "]", "=", "None", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", "if", "block_type", "is", "None", "else", "block_type", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.imagenet.main": [[92, 130], ["parser.parse_args", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "vars", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "os.path.isdir", "os.makedirs", "int", "torch.spawn", "imagenet.main_worker"], "function", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.imagenet.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "print", "(", "vars", "(", "args", ")", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_dir", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.imagenet.main_worker": [[132, 336], ["print", "bnn.engine.BinaryChef", "bnn.engine.BinaryChef.run_step", "print", "print", "torch.CrossEntropyLoss().cuda", "torch.nn.DataParallel().cuda.parameters", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.Compose", "torchvision.Compose", "torchvision.ImageFolder", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "print", "torch.init_process_group", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "print", "warmup_scheduler.GradualWarmupScheduler", "os.path.isfile", "print", "range", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "imagenet.validate", "imagenet.train", "imagenet.validate", "max", "print", "int", "utils.count_parameters", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "torch.CrossEntropyLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "ValueError", "print", "print", "print", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torch.utils.data.distributed.DistributedSampler.set_epoch", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "print", "utils.save_checkpoint", "args.arch.startswith", "args.arch.startswith", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "ValueError", "float", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "print", "print", "torch.nn.DataParallel().cuda.load_state_dict", "torch.optim.lr_scheduler.CosineAnnealingLR.get_last_lr", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.engine.BinaryChef.run_step", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.imagenet.validate", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.cifar10.train", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.imagenet.validate", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.count_parameters", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.save_checkpoint"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "global", "best_acc1", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "\n", "", "num_classes", "=", "1000", "\n", "\n", "# create model", "\n", "print", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "stem_type", "=", "args", ".", "stem_type", ",", "num_classes", "=", "num_classes", ",", "block_type", "=", "models", ".", "PreBasicBlock", ",", "activation", "=", "nn", ".", "PReLU", ")", "\n", "bchef", "=", "BinaryChef", "(", "'recepies/imagenet-baseline.yaml'", ")", "\n", "model", "=", "bchef", ".", "run_step", "(", "model", ",", "args", ".", "step", ")", "\n", "print", "(", "model", ")", "\n", "\n", "print", "(", "'Num paramters: {}'", ".", "format", "(", "count_parameters", "(", "model", ")", ")", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "(", "args", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "# DataParallel will divide and allocate batch_size to all available GPUs", "\n", "        ", "if", "args", ".", "arch", ".", "startswith", "(", "'alexnet'", ")", "or", "args", ".", "arch", ".", "startswith", "(", "'vgg'", ")", ":", "\n", "            ", "model", ".", "features", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ".", "features", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "parameters", "=", "model", ".", "parameters", "(", ")", "\n", "if", "args", ".", "optimizer", "==", "'adamw'", ":", "\n", "        ", "wd", "=", "args", ".", "weight_decay", "if", "args", ".", "step", "==", "0", "else", "0", "\n", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "parameters", ",", "args", ".", "lr", ",", "weight_decay", "=", "wd", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "parameters", ",", "args", ".", "lr", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "'sgd'", ":", "\n", "        ", "wd", "=", "0", "if", "args", ".", "step", ">", "0", "else", "args", ".", "weight_decay", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "parameters", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "wd", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown optimizer selected: {}'", ".", "format", "(", "args", ".", "optimizer", ")", ")", "\n", "\n", "", "if", "args", ".", "scheduler", "==", "'multistep'", ":", "\n", "        ", "milestone", "=", "[", "40", ",", "70", ",", "80", ",", "100", ",", "110", "]", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "[", "x", "-", "args", ".", "warmup", "for", "x", "in", "milestone", "]", ",", "gamma", "=", "0.1", ")", "# ", "\n", "", "elif", "args", ".", "scheduler", "==", "'cosine'", ":", "\n", "        ", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "float", "(", "args", ".", "epochs", "-", "args", ".", "warmup", ")", ",", "eta_min", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown schduler selected: {}'", ".", "format", "(", "args", ".", "scheduler", ")", ")", "\n", "\n", "", "if", "args", ".", "warmup", ">", "0", ":", "\n", "        ", "print", "(", "'=> Applying warmup ({} epochs)'", ".", "format", "(", "args", ".", "warmup", ")", ")", "\n", "lr_scheduler", "=", "GradualWarmupScheduler", "(", "optimizer", ",", "multiplier", "=", "1", ",", "total_epoch", "=", "args", ".", "warmup", ",", "after_scheduler", "=", "lr_scheduler", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "if", "args", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "loc", ")", "\n", "", "if", "args", ".", "resume_epoch", ":", "\n", "                ", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_acc1", "=", "checkpoint", "[", "'best_acc1'", "]", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "pass", "\n", "# best_acc1 may be from a checkpoint from a different GPU", "\n", "#best_acc1 = best_acc1.to(args.gpu)", "\n", "", "try", ":", "\n", "                ", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "if", "not", "(", "'adam'", "in", "args", ".", "optimizer", "and", "'sgd'", "in", "args", ".", "resume", ")", ":", "\n", "                    ", "print", "(", "'=> Loading optimizer...'", ")", "\n", "#optimizer.load_state_dict(checkpoint['optimizer'])", "\n", "", "", "except", ":", "\n", "                ", "print", "(", "'=> Warning: dict model mismatch, loading with strict = False'", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "# Reset learning rate", "\n", "", "for", "g", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "g", "[", "'lr'", "]", "=", "args", ".", "lr", "\n", "\n", "\n", "", "", "if", "args", ".", "start_epoch", ">", "0", ":", "\n", "        ", "print", "(", "'Advancing the scheduler to epoch {}'", ".", "format", "(", "args", ".", "start_epoch", ")", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "start_epoch", ")", ":", "\n", "            ", "lr_scheduler", ".", "step", "(", ")", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'valid'", ")", "\n", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "transforms_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "transforms_val", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms_train", ")", "\n", "val_dataset", "=", "datasets", ".", "ImageFolder", "(", "valdir", ",", "transforms_val", ")", "\n", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "return", "\n", "\n", "", "show_logs", "=", "(", "not", "args", ".", "multiprocessing_distributed", ")", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "if", "args", ".", "scheduler", "==", "'cosine'", ":", "\n", "            ", "lr_scheduler", ".", "step", "(", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "lr_scheduler", ".", "step", "(", ")", "\n", "", "if", "show_logs", ":", "\n", "            ", "print", "(", "'New lr: {}'", ".", "format", "(", "lr_scheduler", ".", "get_last_lr", "(", ")", ")", ")", "\n", "\n", "# train for one epoch", "\n", "", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "show_logs", ")", "\n", "\n", "# evaluate on validation set", "\n", "acc1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ",", "show_logs", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "is_best", "=", "acc1", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "\n", "print", "(", "'Current best: {}'", ".", "format", "(", "best_acc1", ")", ")", "\n", "\n", "if", "show_logs", ":", "\n", "            ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ",", "args", ".", "output_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.imagenet.train": [[337, 385], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.ProgressMeter", "model.train", "time.time", "enumerate", "len", "utils.AverageMeter.update", "target.cuda.cuda", "model", "criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "utils.AverageMeter.update", "time.time", "images.cuda.cuda", "criterion.item", "images.cuda.size", "images.cuda.size", "images.cuda.size", "utils.ProgressMeter.display", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.cifar10.train", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.update", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.accuracy", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.update", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.update", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.update", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.SignActivation.backward", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.update", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.display"], ["", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "show_logs", "=", "True", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "\n", "all_meters", "=", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", "\n", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "all_meters", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "images", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", "and", "show_logs", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.imagenet.validate": [[387, 429], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.ProgressMeter", "model.eval", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "target.cuda.cuda", "model", "criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "print", "images.cuda.cuda", "criterion.item", "images.cuda.size", "images.cuda.size", "images.cuda.size", "utils.ProgressMeter.display", "time.time"], "function", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.accuracy", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.update", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.update", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.update", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.update", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.display"], ["", "", "", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ",", "show_logs", "=", "True", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "val_loader", ")", ",", "\n", "[", "batch_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "'Test: '", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", "and", "show_logs", ":", "\n", "                ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "# TODO: this should also be done with the ProgressMeter", "\n", "", "", "if", "show_logs", ":", "\n", "            ", "print", "(", "' * Acc@1 {top1.avg:.3f} Acc@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.cifar10.train": [[92, 124], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.ProgressMeter", "print", "net.train", "time.time", "enumerate", "len", "utils.AverageMeter.update", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "optimizer.step", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "inputs.to", "targets.to", "acc1.item", "inputs.size", "criterion.item", "inputs.size", "utils.ProgressMeter.display", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.cifar10.train", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.update", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.bnn.ops.SignActivation.backward", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.accuracy", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.update", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.update", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.update", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.display"], ["def", "train", "(", "epoch", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "trainloader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "print", "(", "'\\nTrain Epoch: %d'", "%", "epoch", ")", "\n", "net", ".", "train", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "acc1", ",", "=", "accuracy", "(", "outputs", ",", "targets", ")", "\n", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "batch_idx", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "batch_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.cifar10.test": [[126, 168], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.ProgressMeter", "net.eval", "time.time", "print", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "print", "torch.save", "torch.save", "torch.save", "torch.save", "utils.AverageMeter.update", "net", "criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "net.state_dict", "os.path.isdir", "os.mkdir", "inputs.to", "targets.to", "acc1.item", "inputs.size", "criterion.item", "inputs.size", "utils.ProgressMeter.display", "time.time"], "function", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.update", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.accuracy", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.update", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.update", "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.display"], ["", "", "", "def", "test", "(", "epoch", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "testloader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", "]", ",", "\n", "prefix", "=", "\"Test Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "global", "best_acc", "\n", "net", ".", "eval", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "acc1", ",", "=", "accuracy", "(", "outputs", ",", "targets", ")", "\n", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "batch_idx", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "batch_idx", ")", "\n", "\n", "# Save checkpoint.", "\n", "", "", "", "acc", "=", "top1", ".", "avg", "\n", "if", "acc", ">", "best_acc", ":", "\n", "        ", "print", "(", "'Saving...'", ")", "\n", "state", "=", "{", "\n", "'net'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'acc'", ":", "acc", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "'checkpoint'", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "'./checkpoint/ckpt.pth'", ")", "\n", "best_acc", "=", "acc", "\n", "", "print", "(", "'Current acc: {}, best acc: {}'", ".", "format", "(", "acc", ",", "best_acc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.__init__": [[8, 12], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ":", "str", ",", "fmt", ":", "str", "=", "':f'", ")", "->", "None", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.reset": [[13, 18], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.update": [[19, 24], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ":", "float", ",", "n", ":", "int", "=", "1", ")", "->", "None", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.AverageMeter.__str__": [[25, 28], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", "->", "str", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.__init__": [[31, 35], ["utils.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ":", "int", ",", "meters", ":", "AverageMeter", ",", "prefix", ":", "str", "=", "\"\"", ")", "->", "None", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter.display": [[36, 40], ["print", "str", "utils.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ":", "int", ")", "->", "None", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.ProgressMeter._get_batch_fmtstr": [[41, 45], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ":", "int", ")", "->", "str", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.accuracy": [[46, 61], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.view", "correct[].reshape().float", "correct[].reshape"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "tensor", ",", "topk", ":", "Tuple", "[", "int", "]", "=", "(", "1", ",", ")", ")", "->", "List", "[", "float", "]", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.save_checkpoint": [[62, 69], ["torch.save", "os.path.join", "shutil.copyfile", "print", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "output_dir", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", ")", ")", "\n", "if", "is_best", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", ")", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'model_best.pth.tar'", ")", ")", "\n", "", "", "except", ":", "\n", "        ", "print", "(", "'Unable to save checkpoint to {} at this time...'", ".", "format", "(", "output_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.1adrianb_binary-networks-pytorch.examples.utils.count_parameters": [[70, 72], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "", "", ""]]}