{"home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.utils.data_parser.clean_str_month": [[25, 31], ["isinstance", "month2num.items", "str", "o.replace.replace"], "function", ["None"], ["def", "clean_str_month", "(", "o", ")", ":", "\n", "    ", "if", "isinstance", "(", "o", ",", "int", ")", ":", "\n", "        ", "o", "=", "str", "(", "o", ")", "\n", "", "for", "month", ",", "n", "in", "month2num", ".", "items", "(", ")", ":", "\n", "        ", "o", "=", "o", ".", "replace", "(", "month", ",", "n", ")", "\n", "", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.utils.data_parser.date_parser": [[32, 51], ["data_parser.clean_str_month", "datetime.datetime.strptime"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.utils.data_parser.clean_str_month"], ["", "def", "date_parser", "(", "o", ")", ":", "\n", "    ", "default_result", "=", "{", "\n", "'value'", ":", "None", ",", "\n", "'template'", ":", "'N/A'", "\n", "}", "\n", "if", "o", "is", "None", ":", "\n", "        ", "return", "default_result", "\n", "\n", "", "o", "=", "clean_str_month", "(", "o", ")", "\n", "for", "t", "in", "templates", ":", "\n", "        ", "try", ":", "\n", "            ", "d", "=", "datetime", ".", "datetime", ".", "strptime", "(", "o", ",", "t", ")", "\n", "return", "{", "\n", "'value'", ":", "d", ",", "\n", "'template'", ":", "t", "\n", "}", "\n", "", "except", "ValueError", ":", "\n", "            ", "pass", "\n", "", "", "return", "default_result", "\n", "", ""]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbpath.get_db_path": [[8, 12], ["os.path.join"], "function", ["None"], ["def", "get_db_path", "(", "db_name", ":", "str", ",", "testcase_name", ":", "Union", "[", "str", ",", "None", "]", "=", "None", ")", "->", "str", ":", "\n", "    ", "sqlite_path", "=", "os", ".", "path", ".", "join", "(", "DB_DIR", ",", "db_name", ",", "\n", "(", "db_name", "if", "testcase_name", "is", "None", "else", "testcase_name", ")", "+", "'.sqlite'", ")", "\n", "return", "sqlite_path", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbpath.get_all_dbnames": [[14, 16], ["set", "os.listdir"], "function", ["None"], ["", "def", "get_all_dbnames", "(", ")", "->", "Set", "[", "str", "]", ":", "\n", "    ", "return", "set", "(", "[", "db_name", "for", "db_name", "in", "os", ".", "listdir", "(", "DB_DIR", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbpath.get_value_path": [[18, 20], ["os.path.join"], "function", ["None"], ["", "def", "get_value_path", "(", "db_name", ":", "str", ")", "->", "str", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "DB_DIR", ",", "db_name", ",", "'values.pkl'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbpath.get_skipped_dbnames": [[22, 24], ["None"], "function", ["None"], ["", "def", "get_skipped_dbnames", "(", ")", "->", "Set", "[", "str", "]", ":", "\n", "    ", "return", "{", "'baseball_1'", ",", "'imdb'", ",", "'restaurants'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbpath.orig2test": [[26, 28], ["orig_db_path.replace"], "function", ["None"], ["", "def", "orig2test", "(", "orig_db_path", ":", "str", ",", "testcase_name", ":", "str", ")", "->", "str", ":", "\n", "    ", "return", "orig_db_path", ".", "replace", "(", "'.sqlite'", ",", "''", ")", "+", "testcase_name", "+", "'.sqlite'", "\n", "", ""]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.eq.permute_tuple": [[7, 10], ["tuple", "len", "len"], "function", ["None"], ["def", "permute_tuple", "(", "element", ":", "Tuple", ",", "perm", ":", "Tuple", ")", "->", "Tuple", ":", "\n", "    ", "assert", "len", "(", "element", ")", "==", "len", "(", "perm", ")", "\n", "return", "tuple", "(", "[", "element", "[", "i", "]", "for", "i", "in", "perm", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.eq.unorder_row": [[12, 14], ["tuple", "sorted", "str", "str", "type"], "function", ["None"], ["", "def", "unorder_row", "(", "row", ":", "Tuple", ")", "->", "Tuple", ":", "\n", "    ", "return", "tuple", "(", "sorted", "(", "row", ",", "key", "=", "lambda", "x", ":", "str", "(", "x", ")", "+", "str", "(", "type", "(", "x", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.eq.quick_rej": [[20, 27], ["eq.unorder_row", "eq.unorder_row", "set", "set"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.unorder_row", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.unorder_row"], ["", "def", "quick_rej", "(", "result1", ":", "List", "[", "Tuple", "]", ",", "result2", ":", "List", "[", "Tuple", "]", ",", "order_matters", ":", "bool", ")", "->", "bool", ":", "\n", "    ", "s1", "=", "[", "unorder_row", "(", "row", ")", "for", "row", "in", "result1", "]", "\n", "s2", "=", "[", "unorder_row", "(", "row", ")", "for", "row", "in", "result2", "]", "\n", "if", "order_matters", ":", "\n", "        ", "return", "s1", "==", "s2", "\n", "", "else", ":", "\n", "        ", "return", "set", "(", "s1", ")", "==", "set", "(", "s2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.eq.multiset_eq": [[30, 41], ["collections.defaultdict", "len", "len"], "function", ["None"], ["", "", "def", "multiset_eq", "(", "l1", ":", "List", ",", "l2", ":", "List", ")", "->", "bool", ":", "\n", "    ", "if", "len", "(", "l1", ")", "!=", "len", "(", "l2", ")", ":", "\n", "        ", "return", "False", "\n", "", "d", "=", "defaultdict", "(", "int", ")", "\n", "for", "e", "in", "l1", ":", "\n", "        ", "d", "[", "e", "]", "=", "d", "[", "e", "]", "+", "1", "\n", "", "for", "e", "in", "l2", ":", "\n", "        ", "d", "[", "e", "]", "=", "d", "[", "e", "]", "-", "1", "\n", "if", "d", "[", "e", "]", "<", "0", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.eq.get_constraint_permutation": [[43, 58], ["len", "range", "itertools.product", "itertools.product", "random.choice", "range", "range", "set", "range", "perm_constraints[].remove"], "function", ["None"], ["", "def", "get_constraint_permutation", "(", "tab1_sets_by_columns", ":", "List", "[", "Set", "]", ",", "result2", ":", "List", "[", "Tuple", "]", ")", ":", "\n", "    ", "num_cols", "=", "len", "(", "result2", "[", "0", "]", ")", "\n", "perm_constraints", "=", "[", "{", "i", "for", "i", "in", "range", "(", "num_cols", ")", "}", "for", "_", "in", "range", "(", "num_cols", ")", "]", "\n", "if", "num_cols", "<=", "3", ":", "\n", "        ", "return", "product", "(", "*", "perm_constraints", ")", "\n", "\n", "# we sample 20 rows and constrain the space of permutations", "\n", "", "for", "_", "in", "range", "(", "20", ")", ":", "\n", "        ", "random_tab2_row", "=", "random", ".", "choice", "(", "result2", ")", "\n", "\n", "for", "tab1_col", "in", "range", "(", "num_cols", ")", ":", "\n", "            ", "for", "tab2_col", "in", "set", "(", "perm_constraints", "[", "tab1_col", "]", ")", ":", "\n", "                ", "if", "random_tab2_row", "[", "tab2_col", "]", "not", "in", "tab1_sets_by_columns", "[", "tab1_col", "]", ":", "\n", "                    ", "perm_constraints", "[", "tab1_col", "]", ".", "remove", "(", "tab2_col", ")", "\n", "", "", "", "", "return", "product", "(", "*", "perm_constraints", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.eq.result_eq": [[61, 107], ["len", "eq.get_constraint_permutation", "len", "len", "len", "eq.quick_rej", "len", "len", "range", "len", "len", "set", "eq.permute_tuple", "eq.multiset_eq", "set", "set"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.get_constraint_permutation", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.quick_rej", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.permute_tuple", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.multiset_eq"], ["", "def", "result_eq", "(", "result1", ":", "List", "[", "Tuple", "]", ",", "result2", ":", "List", "[", "Tuple", "]", ",", "order_matters", ":", "bool", ")", "->", "bool", ":", "\n", "    ", "if", "len", "(", "result1", ")", "==", "0", "and", "len", "(", "result2", ")", "==", "0", ":", "\n", "        ", "return", "True", "\n", "\n", "# if length is not the same, then they are definitely different bag of rows", "\n", "", "if", "len", "(", "result1", ")", "!=", "len", "(", "result2", ")", ":", "\n", "        ", "return", "False", "\n", "\n", "", "num_cols", "=", "len", "(", "result1", "[", "0", "]", ")", "\n", "\n", "# if the results do not have the same number of columns, they are different", "\n", "if", "len", "(", "result2", "[", "0", "]", ")", "!=", "num_cols", ":", "\n", "        ", "return", "False", "\n", "\n", "# unorder each row and compare whether the denotation is the same", "\n", "# this can already find most pair of denotations that are different", "\n", "", "if", "not", "quick_rej", "(", "result1", ",", "result2", ",", "order_matters", ")", ":", "\n", "        ", "return", "False", "\n", "\n", "# the rest of the problem is in fact more complicated than one might think", "\n", "# we want to find a permutation of column order and a permutation of row order,", "\n", "# s.t. result_1 is the same as result_2", "\n", "# we return true if we can find such column & row permutations", "\n", "# and false if we cannot", "\n", "", "tab1_sets_by_columns", "=", "[", "{", "row", "[", "i", "]", "for", "row", "in", "result1", "}", "for", "i", "in", "range", "(", "num_cols", ")", "]", "\n", "\n", "# on a high level, we enumerate all possible column permutations that might make result_1 == result_2", "\n", "# we decrease the size of the column permutation space by the function get_constraint_permutation", "\n", "# if one of the permutation make result_1, result_2 equivalent, then they are equivalent", "\n", "for", "perm", "in", "get_constraint_permutation", "(", "tab1_sets_by_columns", ",", "result2", ")", ":", "\n", "        ", "if", "len", "(", "perm", ")", "!=", "len", "(", "set", "(", "perm", ")", ")", ":", "\n", "            ", "continue", "\n", "", "if", "num_cols", "==", "1", ":", "\n", "            ", "result2_perm", "=", "result2", "\n", "", "else", ":", "\n", "            ", "result2_perm", "=", "[", "permute_tuple", "(", "element", ",", "perm", ")", "for", "element", "in", "result2", "]", "\n", "", "if", "order_matters", ":", "\n", "            ", "if", "result1", "==", "result2_perm", ":", "\n", "                ", "return", "True", "\n", "", "", "else", ":", "\n", "# in fact the first condition must hold if the second condition holds", "\n", "# but the first is way more efficient implementation-wise", "\n", "# and we use it to quickly reject impossible candidates", "\n", "            ", "if", "set", "(", "result1", ")", "==", "set", "(", "result2_perm", ")", "and", "multiset_eq", "(", "result1", ",", "result2_perm", ")", ":", "\n", "                ", "return", "True", "\n", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.writedb.insert_row": [[11, 24], ["len", "len", "cursor.execute", "len", "print", "print", "print"], "function", ["None"], ["def", "insert_row", "(", "cursor", ",", "table_name", ":", "str", ",", "column_names", ":", "List", "[", "str", "]", ",", "row", ":", "Tuple", ")", "->", "str", ":", "\n", "    ", "assert", "len", "(", "row", ")", "==", "len", "(", "column_names", ")", ",", "\"number of elements per row needs to be the same as number of columns\"", "\n", "dummy_args", "=", "\" ,\"", ".", "join", "(", "[", "\"?\"", "]", "*", "len", "(", "column_names", ")", ")", "\n", "q", "=", "\"INSERT INTO {table_name} VALUES ({dummy_args})\"", ".", "format", "(", "table_name", "=", "table_name", ",", "dummy_args", "=", "dummy_args", ")", "\n", "try", ":", "\n", "        ", "cursor", ".", "execute", "(", "q", ",", "row", ")", "\n", "return", "'success'", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "'unable to insert the following'", ")", "\n", "print", "(", "q", ")", "\n", "print", "(", "row", ")", "\n", "return", "\"fails\"", "\n", "# raise e", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.writedb.insert_table": [[27, 39], ["list", "len", "range", "column2elements.keys", "tuple", "writedb.insert_row", "print"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.writedb.insert_row"], ["", "", "def", "insert_table", "(", "cursor", ",", "table_name", ":", "str", ",", "column2elements", ":", "Dict", "[", "str", ",", "List", "]", ")", "->", "None", ":", "\n", "    ", "column_names", "=", "list", "(", "column2elements", ".", "keys", "(", ")", ")", "\n", "num_rows", "=", "len", "(", "column2elements", "[", "column_names", "[", "0", "]", "]", ")", "\n", "\n", "one_success", "=", "False", "\n", "for", "row_id", "in", "range", "(", "num_rows", ")", ":", "\n", "        ", "row", "=", "tuple", "(", "[", "column2elements", "[", "column_name", "]", "[", "row_id", "]", "for", "column_name", "in", "column_names", "]", ")", "\n", "insertion_result", "=", "insert_row", "(", "cursor", ",", "table_name", ",", "column_names", ",", "row", ")", "\n", "if", "insertion_result", "==", "'success'", ":", "\n", "            ", "one_success", "=", "True", "\n", "", "", "if", "not", "one_success", ":", "\n", "        ", "print", "(", "'no successful insertion for table %s'", "%", "table_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.writedb.write_db_path": [[44, 63], ["writedb.init_empty_db_from_orig_", "shutil.copyfile", "os.unlink", "sql_util.run.get_cursor_path", "sql_util.dbinfo.extract_table_column_properties_path", "table2column2elements.items", "sql_util.run.get_cursor_path.connection.commit", "sql_util.run.get_cursor_path.connection.close", "os.path.exists", "print", "list", "list", "writedb.insert_table", "column2elements.keys", "table_name2column_properties[].keys"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.writedb.init_empty_db_from_orig_", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.run.get_cursor_path", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.extract_table_column_properties_path", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.writedb.insert_table"], ["", "", "def", "write_db_path", "(", "orig_path", ":", "str", ",", "new_db_path", ":", "str", ",", "table2column2elements", ":", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "List", "]", "]", ",", "\n", "overwrite", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "new_db_path", ")", "and", "not", "overwrite", ":", "\n", "        ", "print", "(", "'new database already exists.'", ")", "\n", "return", "\n", "", "empty_db_path", "=", "init_empty_db_from_orig_", "(", "orig_path", ")", "\n", "copyfile", "(", "empty_db_path", ",", "new_db_path", ")", "\n", "os", ".", "unlink", "(", "empty_db_path", ")", "\n", "cursor", "=", "get_cursor_path", "(", "new_db_path", ")", "\n", "table_name2column_properties", ",", "_", "=", "extract_table_column_properties_path", "(", "orig_path", ")", "\n", "\n", "for", "table_name", ",", "column2elements", "in", "table2column2elements", ".", "items", "(", ")", ":", "\n", "# the order of the column should stay the same", "\n", "        ", "columns", "=", "list", "(", "column2elements", ".", "keys", "(", ")", ")", "\n", "orig_columns", "=", "list", "(", "table_name2column_properties", "[", "table_name", "]", ".", "keys", "(", ")", ")", "\n", "assert", "columns", "==", "orig_columns", ",", "(", "columns", ",", "orig_columns", ")", "\n", "insert_table", "(", "cursor", ",", "table_name", ",", "column2elements", ")", "\n", "", "cursor", ".", "connection", ".", "commit", "(", ")", "\n", "cursor", ".", "connection", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.writedb.init_empty_db_from_orig_": [[69, 89], ["shutil.copyfile", "sql_util.run.get_cursor_path", "sql_util.dbinfo.get_table_names_path", "sql_util.run.get_cursor_path.connection.commit", "sql_util.run.get_cursor_path.connection.close", "str", "sql_util.run.get_cursor_path.execute", "sql_util.run.get_cursor_path.execute", "sql_util.run.get_cursor_path.fetchall", "print", "print", "random.randint"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.run.get_cursor_path", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_table_names_path"], ["def", "init_empty_db_from_orig_", "(", "sqlite_path", ":", "str", ",", "verbose", ":", "bool", "=", "False", ")", "->", "str", ":", "\n", "    ", "empty_db_path", "=", "sqlite_path", "+", "EMPTY", "+", "str", "(", "random", ".", "randint", "(", "0", ",", "10000000000", ")", ")", "\n", "\n", "assert", "empty_db_path", "!=", "sqlite_path", "\n", "\n", "# copy the old database", "\n", "# initialize a new one and get the cursor", "\n", "copyfile", "(", "sqlite_path", ",", "empty_db_path", ")", "\n", "cursor", "=", "get_cursor_path", "(", "empty_db_path", ")", "\n", "table_names", "=", "get_table_names_path", "(", "sqlite_path", ")", "\n", "for", "table_name", "in", "table_names", ":", "\n", "        ", "cursor", ".", "execute", "(", "remove_query", "%", "table_name", ")", "\n", "", "if", "verbose", ":", "\n", "        ", "cursor", ".", "execute", "(", "table_name_query", ")", "\n", "result", "=", "cursor", ".", "fetchall", "(", ")", "\n", "print", "(", "'Tables created: '", ")", "\n", "print", "(", "result", ")", "\n", "", "cursor", ".", "connection", ".", "commit", "(", ")", "\n", "cursor", ".", "connection", ".", "close", "(", ")", "\n", "return", "empty_db_path", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.writedb.subsample_db": [[91, 104], ["shutil.copyfile", "sql_util.run.get_cursor_path", "sql_util.dbinfo.get_all_db_info_path", "sql_util.dbinfo.get_process_order", "sql_util.run.get_cursor_path.connection.commit", "sql_util.run.get_cursor_path.connection.close", "os.path.exists", "Exception", "sql_util.run.get_cursor_path.execute", "int"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.run.get_cursor_path", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_all_db_info_path", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_process_order"], ["", "def", "subsample_db", "(", "orig_path", ":", "str", ",", "target_path", ":", "str", ",", "\n", "delete_fraction", ":", "float", "=", "0.5", ",", "overwrite", ":", "bool", "=", "False", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "target_path", ")", "and", "not", "overwrite", ":", "\n", "        ", "raise", "Exception", "(", "'Path %s exists, do not overwrite.'", "%", "target_path", ")", "\n", "", "copyfile", "(", "orig_path", ",", "target_path", ")", "\n", "cursor", "=", "get_cursor_path", "(", "target_path", ")", "\n", "\n", "table_column_properties", ",", "child2parent", ",", "_", "=", "get_all_db_info_path", "(", "target_path", ")", "\n", "_", ",", "table_order", "=", "get_process_order", "(", "child2parent", ",", "table_column_properties", ")", "\n", "for", "table", "in", "table_order", ":", "\n", "        ", "cursor", ".", "execute", "(", "'DELETE TOP (%d) PERCENT FROM %s;'", "%", "(", "int", "(", "delete_fraction", "*", "100", ")", ",", "table", ")", ")", "\n", "", "cursor", ".", "connection", ".", "commit", "(", ")", "\n", "cursor", ".", "connection", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.writedb.delete_entry_from_db": [[107, 120], ["entry.items", "deletion_query.replace.replace", "sql_util.run.get_cursor_path", "sql_util.run.get_cursor_path.execute", "sql_util.run.get_cursor_path.connection.commit", "sql_util.run.get_cursor_path.connection.close", "os.system"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.run.get_cursor_path"], ["", "def", "delete_entry_from_db", "(", "orig_path", ":", "str", ",", "target_path", ":", "str", ",", "table_name", ":", "str", ",", "entry", ":", "Dict", "[", "str", ",", "Any", "]", ")", ":", "\n", "    ", "if", "orig_path", "!=", "target_path", ":", "\n", "        ", "os", ".", "system", "(", "'cp {orig_path} {target_path}'", ".", "format", "(", "orig_path", "=", "orig_path", ",", "target_path", "=", "target_path", ")", ")", "\n", "", "deletion_query", "=", "'delete from \"{table_name}\" where '", ".", "format", "(", "table_name", "=", "table_name", ")", "\n", "for", "column_name", ",", "val", "in", "entry", ".", "items", "(", ")", ":", "\n", "        ", "deletion_query", "+=", "'\"{column_name}\" = \"{val}\" AND '", ".", "format", "(", "column_name", "=", "column_name", ",", "val", "=", "val", ")", "\n", "", "deletion_query", "+=", "';'", "\n", "deletion_query", "=", "deletion_query", ".", "replace", "(", "'AND ;'", ",", "';'", ")", "\n", "\n", "cursor", "=", "get_cursor_path", "(", "target_path", ")", "\n", "cursor", ".", "execute", "(", "deletion_query", ")", "\n", "cursor", ".", "connection", ".", "commit", "(", ")", "\n", "cursor", ".", "connection", ".", "close", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.load.load_sql_file": [[4, 9], ["open", "list", "in_file.readlines", "l.strip().split", "len", "l.strip", "l.strip"], "function", ["None"], ["def", "load_sql_file", "(", "f_path", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "with", "open", "(", "f_path", ",", "'r'", ")", "as", "in_file", ":", "\n", "        ", "lines", "=", "list", "(", "in_file", ".", "readlines", "(", ")", ")", "\n", "", "lines", "=", "[", "l", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "[", "0", "]", "for", "l", "in", "lines", "if", "len", "(", "l", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "return", "lines", "\n", "", ""]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.value_typing.is_num": [[5, 11], ["float"], "function", ["None"], ["def", "is_num", "(", "s", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "float", "(", "s", ")", "\n", "return", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.value_typing.is_int": [[13, 19], ["int"], "function", ["None"], ["", "", "def", "is_int", "(", "s", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "int", "(", "s", ")", "\n", "return", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.value_typing.contain_is_num": [[21, 23], ["value_typing.is_num"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.value_typing.is_num"], ["", "", "def", "contain_is_num", "(", "column_elements", ")", ":", "\n", "    ", "return", "{", "is_num", "(", "e", ")", "for", "e", "in", "column_elements", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.value_typing.tab_col_ancestor": [[25, 30], ["None"], "function", ["None"], ["", "def", "tab_col_ancestor", "(", "tab_col", ",", "dep", ")", ":", "\n", "    ", "ancestor", "=", "tab_col", "\n", "while", "ancestor", "in", "dep", ":", "\n", "        ", "ancestor", "=", "dep", "[", "ancestor", "]", "\n", "", "return", "ancestor", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.value_typing.type_values_w_db": [[32, 76], ["sql_util.dbinfo.get_all_db_info_path", "collections.defaultdict", "value_typing.is_num", "value_typing.tab_col_ancestor", "len", "set", "new_values[].append", "table_col2column_elements.keys", "len", "len", "all_possible_ancestors.remove", "set", "len", "value_typing.contain_is_num", "any", "set.add", "set", "set"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_all_db_info_path", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.value_typing.is_num", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.value_typing.tab_col_ancestor", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.value_typing.contain_is_num"], ["", "def", "type_values_w_db", "(", "orig_path", ":", "str", ",", "typed_values", ":", "List", "[", "Tuple", "[", "Tuple", "[", "str", ",", "str", "]", ",", "str", "]", "]", ",", "loose", ":", "bool", ")", "->", "Dict", "[", "Tuple", "[", "str", ",", "str", "]", ",", "List", "[", "str", "]", "]", ":", "\n", "    ", "t2cproperties", ",", "dep", ",", "table_col2column_elements", "=", "get_all_db_info_path", "(", "orig_path", ")", "\n", "new_values", "=", "defaultdict", "(", "list", ")", "\n", "for", "(", "lhs_table", ",", "lhs_col", ")", ",", "value", "in", "typed_values", ":", "\n", "# find the anchor (table, column) that match the table and column name", "\n", "        ", "anchors", "=", "[", "(", "table", ",", "col", ")", "for", "table", ",", "col", "in", "table_col2column_elements", ".", "keys", "(", ")", "\n", "if", "(", "lhs_table", "is", "None", "or", "lhs_table", "==", "table", ")", "and", "lhs_col", "==", "col", "]", "\n", "\n", "# find all the ancestors of the anchors", "\n", "all_possible_ancestors", "=", "{", "tab_col_ancestor", "(", "tab_col", ",", "dep", ")", "for", "tab_col", "in", "anchors", "}", "\n", "value_is_num", "=", "is_num", "(", "value", ")", "\n", "\n", "# filter by string/numerical type,", "\n", "# if the ancestor column is ambiguous", "\n", "if", "len", "(", "all_possible_ancestors", ")", ">", "1", ":", "\n", "            ", "for", "tab_col", "in", "set", "(", "all_possible_ancestors", ")", ":", "\n", "                ", "column_elements", "=", "table_col2column_elements", "[", "tab_col", "]", "\n", "if", "len", "(", "column_elements", ")", ">", "0", "and", "value_is_num", "not", "in", "contain_is_num", "(", "column_elements", ")", ":", "\n", "                    ", "all_possible_ancestors", ".", "remove", "(", "tab_col", ")", "\n", "\n", "# if string, try filtering the ancestor columns", "\n", "# by checking whether the string is contained in the column", "\n", "", "", "", "if", "len", "(", "all_possible_ancestors", ")", ">", "1", "and", "not", "value_is_num", ":", "\n", "            ", "ancestors_w_vals", "=", "{", "a", "for", "a", "in", "all_possible_ancestors", "if", "value", "in", "table_col2column_elements", "[", "a", "]", "}", "\n", "# if no column contains the string, do not filter", "\n", "if", "len", "(", "ancestors_w_vals", ")", "==", "0", ":", "\n", "                ", "pass", "\n", "# if loose, we consider all ancestor that either contains the value, or intersects with columns that has the value", "\n", "", "elif", "loose", ":", "\n", "                ", "extended_ancestors", "=", "set", "(", "ancestors_w_vals", ")", "\n", "for", "a", "in", "all_possible_ancestors", ":", "\n", "                    ", "if", "a", "not", "in", "ancestors_w_vals", "and", "any", "(", "\n", "set", "(", "table_col2column_elements", "[", "a", "]", ")", "&", "set", "(", "table_col2column_elements", "[", "w", "]", ")", "for", "w", "in", "\n", "ancestors_w_vals", ")", ":", "\n", "                        ", "extended_ancestors", ".", "add", "(", "a", ")", "\n", "", "", "all_possible_ancestors", "=", "extended_ancestors", "\n", "\n", "# if not a loose version, only consider columns that contain the value, as long as there is such ancestor column", "\n", "", "else", ":", "\n", "                ", "all_possible_ancestors", "=", "ancestors_w_vals", "\n", "", "", "for", "t_c", "in", "all_possible_ancestors", ":", "\n", "            ", "new_values", "[", "t_c", "]", ".", "append", "(", "value", ")", "\n", "", "", "return", "new_values", "\n", "", ""]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.tokenize": [[16, 19], ["list", "Token", "[].flatten", "sqlparse.parse"], "function", ["None"], ["def", "tokenize", "(", "query", ":", "str", ")", "->", "List", "[", "Token", "]", ":", "\n", "    ", "tokens", "=", "list", "(", "[", "Token", "(", "t", ".", "ttype", ",", "t", ".", "value", ")", "for", "t", "in", "sqlparse", ".", "parse", "(", "query", ")", "[", "0", "]", ".", "flatten", "(", ")", "]", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.join_tokens": [[21, 23], ["None"], "function", ["None"], ["", "def", "join_tokens", "(", "tokens", ":", "List", "[", "Token", "]", ")", "->", "str", ":", "\n", "    ", "return", "''", ".", "join", "(", "[", "x", ".", "value", "for", "x", "in", "tokens", "]", ")", ".", "strip", "(", ")", ".", "replace", "(", "'  '", ",", "' '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.round_trip_test": [[25, 29], ["parse.tokenize"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.tokenize"], ["", "def", "round_trip_test", "(", "query", ":", "str", ")", "->", "None", ":", "\n", "    ", "tokens", "=", "tokenize", "(", "query", ")", "\n", "reconstructed", "=", "''", ".", "join", "(", "[", "token", ".", "value", "for", "token", "in", "tokens", "]", ")", "\n", "assert", "query", "==", "reconstructed", ",", "\"Round trip test fails for string %s\"", "%", "query", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.postprocess": [[31, 34], ["query.replace().replace().replace.replace().replace().replace", "query.replace().replace().replace.replace().replace", "query.replace().replace().replace.replace"], "function", ["None"], ["", "def", "postprocess", "(", "query", ":", "str", ")", "->", "str", ":", "\n", "    ", "query", "=", "query", ".", "replace", "(", "'> ='", ",", "'>='", ")", ".", "replace", "(", "'< ='", ",", "'<='", ")", ".", "replace", "(", "'! ='", ",", "'!='", ")", "\n", "return", "query", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.strip_query": [[38, 83], ["[].flatten", "query.replace.split", "re.findall", "re.findall", "all_values.append", "query.replace.replace", "i.strip", "val.strip", "re.findall", "re.findall", "re.findall", "re.findall", "sqlparse.parse", "len", "tok.replace().split", "query_keywords.extend", "query_keywords.append", "len", "query_keywords.append", "t.lower", "tok.lower", "tok.lower", "tok.replace", "len"], "function", ["None"], ["", "def", "strip_query", "(", "query", ":", "str", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "str", "]", "]", ":", "\n", "    ", "query_keywords", ",", "all_values", "=", "[", "]", ",", "[", "]", "\n", "\n", "# then replace all stuff enclosed by \"\" with a numerical value to get it marked as {VALUE}", "\n", "\n", "# Tao's implementation is commented out here.", "\n", "\"\"\"\n    str_1 = re.findall(\"\\\"[^\\\"]*\\\"\", query)\n    str_2 = re.findall(\"\\'[^\\']*\\'\", query)\n    values = str_1 + str_2\n        \"\"\"", "\n", "\n", "toks", "=", "sqlparse", ".", "parse", "(", "query", ")", "[", "0", "]", ".", "flatten", "(", ")", "\n", "values", "=", "[", "t", ".", "value", "for", "t", "in", "toks", "if", "t", ".", "ttype", "==", "sqlparse", ".", "tokens", ".", "Literal", ".", "String", ".", "Single", "or", "t", ".", "ttype", "==", "sqlparse", ".", "tokens", ".", "Literal", ".", "String", ".", "Symbol", "]", "\n", "\n", "\n", "for", "val", "in", "values", ":", "\n", "        ", "all_values", ".", "append", "(", "val", ")", "\n", "query", "=", "query", ".", "replace", "(", "val", ".", "strip", "(", ")", ",", "VALUE_NUM_SYMBOL", ")", "\n", "\n", "", "query_tokenized", "=", "query", ".", "split", "(", ")", "\n", "float_nums", "=", "re", ".", "findall", "(", "\"[-+]?\\d*\\.\\d+\"", ",", "query", ")", "\n", "all_values", "+=", "[", "qt", "for", "qt", "in", "query_tokenized", "if", "qt", "in", "float_nums", "]", "\n", "query_tokenized", "=", "[", "VALUE_NUM_SYMBOL", "if", "qt", "in", "float_nums", "else", "qt", "for", "qt", "in", "query_tokenized", "]", "\n", "\n", "query", "=", "\" \"", ".", "join", "(", "query_tokenized", ")", "\n", "int_nums", "=", "[", "i", ".", "strip", "(", ")", "for", "i", "in", "re", ".", "findall", "(", "\"[^tT]\\d+\"", ",", "query", ")", "]", "\n", "\n", "all_values", "+=", "[", "qt", "for", "qt", "in", "query_tokenized", "if", "qt", "in", "int_nums", "]", "\n", "query_tokenized", "=", "[", "VALUE_NUM_SYMBOL", "if", "qt", "in", "int_nums", "else", "qt", "for", "qt", "in", "query_tokenized", "]", "\n", "# print int_nums, query, query_tokenized", "\n", "\n", "for", "tok", "in", "query_tokenized", ":", "\n", "        ", "if", "\".\"", "in", "tok", ":", "\n", "            ", "table", "=", "re", ".", "findall", "(", "\"[Tt]\\d+\\.\"", ",", "tok", ")", "\n", "if", "len", "(", "table", ")", ">", "0", ":", "\n", "                ", "to", "=", "tok", ".", "replace", "(", "\".\"", ",", "\" . \"", ")", ".", "split", "(", ")", "\n", "to", "=", "[", "t", ".", "lower", "(", ")", "for", "t", "in", "to", "if", "len", "(", "t", ")", ">", "0", "]", "\n", "query_keywords", ".", "extend", "(", "to", ")", "\n", "", "else", ":", "\n", "                ", "query_keywords", ".", "append", "(", "tok", ".", "lower", "(", ")", ")", "\n", "\n", "", "", "elif", "len", "(", "tok", ")", ">", "0", ":", "\n", "            ", "query_keywords", ".", "append", "(", "tok", ".", "lower", "(", ")", ")", "\n", "", "", "return", "query_keywords", ",", "all_values", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.reformat_query": [[85, 92], ["query.replace.strip().replace().replace", "query.replace.replace", "query.replace.strip().replace", "parse.tokenize", "query.replace.strip"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.tokenize"], ["", "def", "reformat_query", "(", "query", ":", "str", ")", "->", "str", ":", "\n", "    ", "query", "=", "query", ".", "strip", "(", ")", ".", "replace", "(", "\";\"", ",", "\"\"", ")", ".", "replace", "(", "\"\\t\"", ",", "\"\"", ")", "\n", "query", "=", "' '", ".", "join", "(", "[", "t", ".", "value", "for", "t", "in", "tokenize", "(", "query", ")", "if", "t", ".", "ttype", "!=", "sqlparse", ".", "tokens", ".", "Whitespace", "]", ")", "\n", "t_stars", "=", "[", "\"t1.*\"", ",", "\"t2.*\"", ",", "\"t3.*\"", ",", "\"T1.*\"", ",", "\"T2.*\"", ",", "\"T3.*\"", "]", "\n", "for", "ts", "in", "t_stars", ":", "\n", "        ", "query", "=", "query", ".", "replace", "(", "ts", ",", "\"*\"", ")", "\n", "", "return", "query", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.replace_values": [[94, 100], ["sqlparse.format", "re.sub", "re.sub", "parse.strip_query", "set"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.strip_query"], ["", "def", "replace_values", "(", "sql", ":", "str", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "Set", "[", "str", "]", "]", ":", "\n", "    ", "sql", "=", "sqlparse", ".", "format", "(", "sql", ",", "reindent", "=", "False", ",", "keyword_case", "=", "'upper'", ")", "\n", "# sql = re.sub(r\"(<=|>=|!=|=|<|>|,)\", r\" \\1 \", sql)", "\n", "sql", "=", "re", ".", "sub", "(", "r\"(T\\d+\\.)\\s\"", ",", "r\"\\1\"", ",", "sql", ")", "\n", "query_toks_no_value", ",", "values", "=", "strip_query", "(", "sql", ")", "\n", "return", "query_toks_no_value", ",", "set", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.extract_query_values": [[104, 108], ["parse.reformat_query", "parse.replace_values"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.reformat_query", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.replace_values"], ["", "def", "extract_query_values", "(", "sql", ":", "str", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "Set", "[", "str", "]", "]", ":", "\n", "    ", "reformated", "=", "reformat_query", "(", "query", "=", "sql", ")", "\n", "query_value_replaced", ",", "values", "=", "replace_values", "(", "reformated", ")", "\n", "return", "query_value_replaced", ",", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.plugin": [[111, 120], ["len", "zip", "len", "len", "range", "VALUE_NUM_SYMBOL.lower"], "function", ["None"], ["", "def", "plugin", "(", "query_value_replaced", ":", "List", "[", "str", "]", ",", "values_in_order", ":", "List", "[", "str", "]", ")", "->", "str", ":", "\n", "    ", "q_length", "=", "len", "(", "query_value_replaced", ")", "\n", "query_w_values", "=", "query_value_replaced", "[", ":", "]", "\n", "value_idx", "=", "[", "idx", "for", "idx", "in", "range", "(", "q_length", ")", "if", "query_value_replaced", "[", "idx", "]", "==", "VALUE_NUM_SYMBOL", ".", "lower", "(", ")", "]", "\n", "assert", "len", "(", "value_idx", ")", "==", "len", "(", "values_in_order", ")", "\n", "\n", "for", "idx", ",", "value", "in", "zip", "(", "value_idx", ",", "values_in_order", ")", ":", "\n", "        ", "query_w_values", "[", "idx", "]", "=", "value", "\n", "", "return", "' '", ".", "join", "(", "query_w_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.plugin_all_permutations": [[124, 128], ["len", "itertools.product", "parse.plugin", "list", "list", "VALUE_NUM_SYMBOL.lower", "range"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.plugin"], ["", "def", "plugin_all_permutations", "(", "query_value_replaced", ":", "List", "[", "str", "]", ",", "values", ":", "Set", "[", "str", "]", ")", "->", "Iterator", "[", "str", "]", ":", "\n", "    ", "num_slots", "=", "len", "(", "[", "v", "for", "v", "in", "query_value_replaced", "if", "v", "==", "VALUE_NUM_SYMBOL", ".", "lower", "(", ")", "]", ")", "\n", "for", "values", "in", "itertools", ".", "product", "(", "*", "[", "list", "(", "values", ")", "for", "_", "in", "range", "(", "num_slots", ")", "]", ")", ":", "\n", "        ", "yield", "plugin", "(", "query_value_replaced", ",", "list", "(", "values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.get_all_preds_for_execution": [[133, 139], ["parse.extract_query_values", "parse.extract_query_values", "len", "len", "parse.plugin_all_permutations", "VALUE_NUM_SYMBOL.lower"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_query_values", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_query_values", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.plugin_all_permutations"], ["", "", "def", "get_all_preds_for_execution", "(", "gold", ":", "str", ",", "pred", ":", "str", ")", "->", "Tuple", "[", "int", ",", "Iterator", "[", "str", "]", "]", ":", "\n", "    ", "_", ",", "gold_values", "=", "extract_query_values", "(", "gold", ")", "\n", "pred_query_value_replaced", ",", "_", "=", "extract_query_values", "(", "pred", ")", "\n", "num_slots", "=", "len", "(", "[", "v", "for", "v", "in", "pred_query_value_replaced", "if", "v", "==", "VALUE_NUM_SYMBOL", ".", "lower", "(", ")", "]", ")", "\n", "num_alternatives", "=", "len", "(", "gold_values", ")", "**", "num_slots", "\n", "return", "num_alternatives", ",", "plugin_all_permutations", "(", "pred_query_value_replaced", ",", "gold_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.remove_distinct": [[141, 144], ["list", "[].flatten", "t.lower", "sqlparse.parse"], "function", ["None"], ["", "def", "remove_distinct", "(", "s", ")", ":", "\n", "    ", "toks", "=", "[", "t", ".", "value", "for", "t", "in", "list", "(", "sqlparse", ".", "parse", "(", "s", ")", "[", "0", "]", ".", "flatten", "(", ")", ")", "]", "\n", "return", "''", ".", "join", "(", "[", "t", "for", "t", "in", "toks", "if", "t", ".", "lower", "(", ")", "!=", "'distinct'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.extract_all_comparison_from_node": [[146, 154], ["hasattr", "type", "comparison_list.append", "comparison_list.extend", "parse.extract_all_comparison_from_node"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_all_comparison_from_node"], ["", "def", "extract_all_comparison_from_node", "(", "node", ":", "Token", ")", "->", "List", "[", "Comparison", "]", ":", "\n", "    ", "comparison_list", "=", "[", "]", "\n", "if", "hasattr", "(", "node", ",", "'tokens'", ")", ":", "\n", "        ", "for", "t", "in", "node", ".", "tokens", ":", "\n", "            ", "comparison_list", ".", "extend", "(", "extract_all_comparison_from_node", "(", "t", ")", ")", "\n", "", "", "if", "type", "(", "node", ")", "==", "Comparison", ":", "\n", "        ", "comparison_list", ".", "append", "(", "node", ")", "\n", "", "return", "comparison_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.extract_all_comparison": [[156, 160], ["parse.extract_all_comparison_from_node", "sqlparse.parse"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_all_comparison_from_node"], ["", "def", "extract_all_comparison", "(", "query", ":", "str", ")", "->", "List", "[", "Comparison", "]", ":", "\n", "    ", "tree", "=", "sqlparse", ".", "parse", "(", "query", ")", "[", "0", "]", "\n", "comparison_list", "=", "extract_all_comparison_from_node", "(", "tree", ")", "\n", "return", "comparison_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.extract_toks_from_comparison": [[162, 165], ["None"], "function", ["None"], ["", "def", "extract_toks_from_comparison", "(", "comparison_node", ":", "Comparison", ")", "->", "List", "[", "Token", "]", ":", "\n", "    ", "tokens", "=", "[", "t", "for", "t", "in", "comparison_node", ".", "tokens", "if", "t", ".", "ttype", "!=", "Whitespace", "]", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.extract_info_from_comparison": [[167, 198], ["parse.extract_toks_from_comparison", "type", "left.tokens[].value.lower", "type", "parse.rm_placeholder", "len", "re.match", "re.match", "type", "parse.rm_placeholder", "parse.rm_placeholder", "parse.process_str_value", "len", "type", "col.upper"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_toks_from_comparison", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.rm_placeholder", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.rm_placeholder", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.rm_placeholder", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.process_str_value"], ["", "def", "extract_info_from_comparison", "(", "comparison_node", ":", "Comparison", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "    ", "tokens", "=", "extract_toks_from_comparison", "(", "comparison_node", ")", "\n", "left", ",", "op", ",", "right", "=", "tokens", "\n", "\n", "returned_dict", "=", "{", "\n", "'left'", ":", "left", ",", "\n", "'op'", ":", "op", ".", "value", ",", "\n", "'right'", ":", "right", "\n", "}", "\n", "\n", "if", "type", "(", "left", ")", "!=", "Identifier", ":", "\n", "        ", "return", "returned_dict", "\n", "\n", "", "table", "=", "None", "\n", "if", "len", "(", "left", ".", "tokens", ")", "==", "3", "and", "re", ".", "match", "(", "'^[tT][0-9]$'", ",", "left", ".", "tokens", "[", "0", "]", ".", "value", ")", "is", "None", ":", "\n", "        ", "table", "=", "left", ".", "tokens", "[", "0", "]", ".", "value", ".", "lower", "(", ")", "\n", "", "col", "=", "left", ".", "tokens", "[", "-", "1", "]", ".", "value", "\n", "\n", "if", "type", "(", "right", ")", "==", "Identifier", ":", "\n", "        ", "if", "len", "(", "right", ".", "tokens", ")", "==", "1", "and", "type", "(", "right", ".", "tokens", "[", "0", "]", ")", "==", "sqlparse", ".", "sql", ".", "Token", ":", "\n", "            ", "right_val", "=", "right", ".", "tokens", "[", "0", "]", ".", "value", "\n", "", "else", ":", "\n", "            ", "return", "returned_dict", "\n", "", "", "elif", "type", "(", "right", ")", "==", "sqlparse", ".", "sql", ".", "Token", ":", "\n", "        ", "right_val", "=", "right", ".", "value", "\n", "", "else", ":", "\n", "        ", "return", "returned_dict", "\n", "\n", "", "returned_dict", "[", "'table_col'", "]", ",", "returned_dict", "[", "'val'", "]", "=", "(", "rm_placeholder", "(", "table", ")", ",", "rm_placeholder", "(", "col", ".", "upper", "(", ")", ")", ")", ",", "rm_placeholder", "(", "process_str_value", "(", "right_val", ")", ")", "\n", "\n", "return", "returned_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.extract_all_comparison_from_query": [[200, 203], ["parse.extract_all_comparison", "parse.extract_info_from_comparison"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_all_comparison", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_info_from_comparison"], ["", "def", "extract_all_comparison_from_query", "(", "query", ":", "str", ")", "->", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "    ", "comparison_list", "=", "extract_all_comparison", "(", "query", ")", "\n", "return", "[", "extract_info_from_comparison", "(", "c", ")", "for", "c", "in", "comparison_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.rm_placeholder": [[205, 209], ["re.sub", "re.sub"], "function", ["None"], ["", "def", "rm_placeholder", "(", "s", ":", "Union", "[", "str", ",", "None", "]", ")", "->", "Union", "[", "str", ",", "None", "]", ":", "\n", "    ", "if", "s", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "return", "re", ".", "sub", "(", "'placeholderrare'", ",", "''", ",", "s", ",", "flags", "=", "re", ".", "IGNORECASE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.typed_values_in_tuples": [[212, 223], ["in_tuple_pattern.findall", "group[].upper", "parse.rm_placeholder", "x.strip().replace", "typed_values.append", "group[].upper", "group[].split", "x.strip"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.rm_placeholder"], ["def", "typed_values_in_tuples", "(", "query", ")", ":", "\n", "    ", "groups", "=", "in_tuple_pattern", ".", "findall", "(", "query", ")", "\n", "typed_values", "=", "[", "]", "\n", "for", "group", "in", "groups", ":", "\n", "        ", "if", "'SELECT'", "in", "group", "[", "1", "]", ".", "upper", "(", ")", ":", "\n", "            ", "continue", "\n", "", "tab_col", "=", "(", "None", ",", "rm_placeholder", "(", "group", "[", "0", "]", ".", "upper", "(", ")", ")", ")", "\n", "vals", "=", "[", "x", ".", "strip", "(", ")", ".", "replace", "(", "'\"'", ",", "''", ")", "for", "x", "in", "group", "[", "1", "]", ".", "split", "(", "','", ")", "]", "\n", "for", "val", "in", "vals", ":", "\n", "            ", "typed_values", ".", "append", "(", "(", "tab_col", ",", "val", ")", ")", "\n", "", "", "return", "typed_values", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.extract_typed_value_in_comparison_from_query": [[225, 244], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "parse.extract_all_comparison_from_query", "typed_values.extend", "re.findall", "re.findall", "parse.typed_values_in_tuples", "col.upper.upper", "table.lower.lower", "typed_values.append", "re.match", "re.match"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_all_comparison_from_query", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.typed_values_in_tuples"], ["", "def", "extract_typed_value_in_comparison_from_query", "(", "query", ":", "str", ")", "->", "List", "[", "Tuple", "[", "Tuple", "[", "Union", "[", "str", ",", "None", "]", ",", "str", "]", ",", "str", "]", "]", ":", "\n", "    ", "query", "=", "re", ".", "sub", "(", "r'\\byear\\b'", ",", "'yearplaceholderrare'", ",", "query", ",", "flags", "=", "re", ".", "IGNORECASE", ")", "\n", "query", "=", "re", ".", "sub", "(", "r'\\bnumber\\b'", ",", "'numberplaceholderrare'", ",", "query", ",", "flags", "=", "re", ".", "IGNORECASE", ")", "\n", "query", "=", "re", ".", "sub", "(", "r'\\blength\\b'", ",", "'lengthplaceholderrare'", ",", "query", ",", "flags", "=", "re", ".", "IGNORECASE", ")", "\n", "\n", "cmps", "=", "extract_all_comparison_from_query", "(", "query", ")", "\n", "typed_values", "=", "[", "(", "cmp", "[", "'table_col'", "]", ",", "cmp", "[", "'val'", "]", ")", "for", "cmp", "in", "cmps", "if", "'table_col'", "in", "cmp", "]", "\n", "typed_values", ".", "extend", "(", "typed_values_in_tuples", "(", "query", ")", ")", "\n", "for", "table", ",", "col", ",", "val1", ",", "val2", "in", "re", ".", "findall", "(", "'(?:([^\\.\\s]*)\\.)?([^\\.\\s]+) (?:not )between ([^\\s;]+) and ([^\\s;]+)'", ",", "query", ",", "re", ".", "IGNORECASE", ")", ":", "\n", "        ", "if", "table", "==", "''", ":", "\n", "            ", "table", "=", "None", "\n", "", "else", ":", "\n", "            ", "table", "=", "table", ".", "lower", "(", ")", "\n", "", "col", "=", "col", ".", "upper", "(", ")", "\n", "for", "v", "in", "[", "val1", ",", "val2", "]", ":", "\n", "            ", "typed_values", ".", "append", "(", "(", "(", "table", ",", "col", ")", ",", "v", ")", ")", "\n", "\n", "", "", "typed_values", "=", "[", "(", "(", "t", "if", "t", "is", "None", "or", "not", "re", ".", "match", "(", "r'^T\\d+$'", ",", "t", ",", "flags", "=", "re", ".", "IGNORECASE", ")", "else", "None", ",", "c", ")", ",", "v", ")", "for", "(", "(", "t", ",", "c", ")", ",", "v", ")", "in", "typed_values", "]", "\n", "return", "typed_values", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.parse.process_str_value": [[246, 254], ["v.replace.replace", "len", "len"], "function", ["None"], ["", "def", "process_str_value", "(", "v", ":", "str", ")", "->", "str", ":", "\n", "    ", "if", "len", "(", "v", ")", ">", "0", "and", "v", "[", "0", "]", "in", "QUOTE_CHARS", ":", "\n", "        ", "v", "=", "v", "[", "1", ":", "]", "\n", "", "if", "len", "(", "v", ")", ">", "0", "and", "v", "[", "-", "1", "]", "in", "QUOTE_CHARS", ":", "\n", "        ", "v", "=", "v", "[", ":", "-", "1", "]", "\n", "", "for", "c", "in", "QUOTE_CHARS", ":", "\n", "        ", "v", "=", "v", ".", "replace", "(", "c", "+", "c", ",", "c", ")", "\n", "", "return", "v", "\n", "", ""]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.Schema.__init__": [[68, 76], ["process_sql.Schema._map"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.Schema._map"], ["def", "__init__", "(", "self", ",", "schema", ")", ":", "\n", "# schema = {'stadium': ['stadium_id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'],", "\n", "# 'singer': ['singer_id', 'name', 'country', 'song_name', 'song_release_year', 'age', 'is_male'],", "\n", "# 'concert': ['concert_id', 'concert_name', 'theme', 'stadium_id', 'year'],", "\n", "# 'singer_in_concert': ['concert_id', 'singer_id']}", "\n", "        ", "self", ".", "_schema", "=", "schema", "\n", "# _idMap = {'*': '__all__', 'stadium.stadium_id': '__stadium.stadium_id__',", "\n", "self", ".", "_idMap", "=", "self", ".", "_map", "(", "self", ".", "_schema", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.Schema.schema": [[77, 80], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "schema", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_schema", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.Schema.idMap": [[81, 84], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "idMap", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_idMap", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.Schema._map": [[85, 98], ["schema.items", "key.lower", "key.lower", "val.lower", "val.lower", "key.lower", "key.lower"], "methods", ["None"], ["", "def", "_map", "(", "self", ",", "schema", ")", ":", "\n", "        ", "idMap", "=", "{", "'*'", ":", "\"__all__\"", "}", "\n", "id", "=", "1", "\n", "for", "key", ",", "vals", "in", "schema", ".", "items", "(", ")", ":", "\n", "            ", "for", "val", "in", "vals", ":", "\n", "                ", "idMap", "[", "key", ".", "lower", "(", ")", "+", "\".\"", "+", "val", ".", "lower", "(", ")", "]", "=", "\"__\"", "+", "key", ".", "lower", "(", ")", "+", "\".\"", "+", "val", ".", "lower", "(", ")", "+", "\"__\"", "\n", "id", "+=", "1", "\n", "\n", "", "", "for", "key", "in", "schema", ":", "\n", "            ", "idMap", "[", "key", ".", "lower", "(", ")", "]", "=", "\"__\"", "+", "key", ".", "lower", "(", ")", "+", "\"__\"", "\n", "id", "+=", "1", "\n", "\n", "", "return", "idMap", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.parse_type_in_schema": [[51, 62], ["schema_type.index", "schema_type[].strip", "schema_type.index", "schema_type.strip().lower", "int", "parameter_str.split", "schema_type.strip"], "function", ["None"], ["def", "parse_type_in_schema", "(", "schema_type", ":", "str", ")", ":", "\n", "    ", "if", "'('", "in", "schema_type", ":", "\n", "        ", "paren_idx", "=", "schema_type", ".", "index", "(", "'('", ")", "\n", "body", "=", "schema_type", "[", ":", "paren_idx", "]", ".", "strip", "(", ")", "\n", "close_paren_idx", "=", "schema_type", ".", "index", "(", "')'", ")", "\n", "parameter_str", "=", "schema_type", "[", "paren_idx", "+", "1", ":", "close_paren_idx", "]", "\n", "arguments", "=", "[", "int", "(", "x", ")", "for", "x", "in", "parameter_str", ".", "split", "(", "','", ")", "]", "\n", "", "else", ":", "\n", "        ", "body", "=", "schema_type", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "arguments", "=", "[", "]", "\n", "", "return", "body", ",", "arguments", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.get_schema": [[100, 121], ["sqlite3.connect", "sqlite3.connect.cursor", "conn.cursor.execute", "str", "conn.cursor.execute", "table[].lower", "conn.cursor.fetchall", "str", "col[].lower", "conn.cursor.fetchall"], "function", ["None"], ["", "", "def", "get_schema", "(", "db", ")", ":", "\n", "    ", "\"\"\"\n    Get database's schema, which is a dict with table name as key\n    and list of column names as value\n    :param db: database path\n    :return: schema dict\n    \"\"\"", "\n", "\n", "schema", "=", "{", "}", "\n", "conn", "=", "sqlite3", ".", "connect", "(", "db", ")", "\n", "cursor", "=", "conn", ".", "cursor", "(", ")", "\n", "\n", "# fetch table names", "\n", "cursor", ".", "execute", "(", "\"SELECT name FROM sqlite_master WHERE type='table';\"", ")", "\n", "tables", "=", "[", "str", "(", "table", "[", "0", "]", ".", "lower", "(", ")", ")", "for", "table", "in", "cursor", ".", "fetchall", "(", ")", "]", "\n", "\n", "# fetch table info", "\n", "for", "table", "in", "tables", ":", "\n", "        ", "cursor", ".", "execute", "(", "\"PRAGMA table_info({})\"", ".", "format", "(", "table", ")", ")", "\n", "schema", "[", "table", "]", "=", "[", "str", "(", "col", "[", "1", "]", ".", "lower", "(", ")", ")", "for", "col", "in", "cursor", ".", "fetchall", "(", ")", "]", "\n", "", "return", "schema", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.get_schema_from_json": [[123, 134], ["open", "json.load", "str", "entry[].lower", "str", "col[].lower"], "function", ["None"], ["", "def", "get_schema_from_json", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "schema", "=", "{", "}", "\n", "for", "entry", "in", "data", ":", "\n", "        ", "table", "=", "str", "(", "entry", "[", "'table'", "]", ".", "lower", "(", ")", ")", "\n", "cols", "=", "[", "str", "(", "col", "[", "'column_name'", "]", ".", "lower", "(", ")", ")", "for", "col", "in", "entry", "[", "'col_data'", "]", "]", "\n", "schema", "[", "table", "]", "=", "cols", "\n", "\n", "", "return", "schema", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.tokenize": [[136, 168], ["str", "string.replace.replace", "range", "range", "eq_idxs.reverse", "word.lower", "len", "enumerate", "len", "len", "nltk.word_tokenize", "enumerate"], "function", ["None"], ["", "def", "tokenize", "(", "string", ")", ":", "\n", "    ", "string", "=", "str", "(", "string", ")", "\n", "string", "=", "string", ".", "replace", "(", "\"\\'\"", ",", "\"\\\"\"", ")", "# ensures all string values wrapped by \"\" problem??", "\n", "quote_idxs", "=", "[", "idx", "for", "idx", ",", "char", "in", "enumerate", "(", "string", ")", "if", "char", "==", "'\"'", "]", "\n", "assert", "len", "(", "quote_idxs", ")", "%", "2", "==", "0", ",", "\"Unexpected quote\"", "\n", "\n", "# keep string value as token", "\n", "vals", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "quote_idxs", ")", "-", "1", ",", "-", "1", ",", "-", "2", ")", ":", "\n", "        ", "qidx1", "=", "quote_idxs", "[", "i", "-", "1", "]", "\n", "qidx2", "=", "quote_idxs", "[", "i", "]", "\n", "val", "=", "string", "[", "qidx1", ":", "qidx2", "+", "1", "]", "\n", "key", "=", "\"__val_{}_{}__\"", ".", "format", "(", "qidx1", ",", "qidx2", ")", "\n", "string", "=", "string", "[", ":", "qidx1", "]", "+", "key", "+", "string", "[", "qidx2", "+", "1", ":", "]", "\n", "vals", "[", "key", "]", "=", "val", "\n", "\n", "", "toks", "=", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "word_tokenize", "(", "string", ")", "]", "\n", "# replace with string value token", "\n", "for", "i", "in", "range", "(", "len", "(", "toks", ")", ")", ":", "\n", "        ", "if", "toks", "[", "i", "]", "in", "vals", ":", "\n", "            ", "toks", "[", "i", "]", "=", "vals", "[", "toks", "[", "i", "]", "]", "\n", "\n", "# find if there exists !=, >=, <=", "\n", "", "", "eq_idxs", "=", "[", "idx", "for", "idx", ",", "tok", "in", "enumerate", "(", "toks", ")", "if", "tok", "==", "\"=\"", "]", "\n", "eq_idxs", ".", "reverse", "(", ")", "\n", "prefix", "=", "(", "'!'", ",", "'>'", ",", "'<'", ")", "\n", "for", "eq_idx", "in", "eq_idxs", ":", "\n", "        ", "pre_tok", "=", "toks", "[", "eq_idx", "-", "1", "]", "\n", "if", "pre_tok", "in", "prefix", ":", "\n", "            ", "toks", "=", "toks", "[", ":", "eq_idx", "-", "1", "]", "+", "[", "pre_tok", "+", "\"=\"", "]", "+", "toks", "[", "eq_idx", "+", "1", ":", "]", "\n", "\n", "", "", "return", "toks", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.scan_alias": [[170, 178], ["enumerate"], "function", ["None"], ["", "def", "scan_alias", "(", "toks", ")", ":", "\n", "    ", "\"\"\"Scan the index of 'as' and build the map for all alias\"\"\"", "\n", "as_idxs", "=", "[", "idx", "for", "idx", ",", "tok", "in", "enumerate", "(", "toks", ")", "if", "tok", "==", "'as'", "]", "\n", "alias", "=", "{", "}", "\n", "for", "idx", "in", "as_idxs", ":", "\n", "        ", "alias", "[", "toks", "[", "idx", "+", "1", "]", "]", "=", "toks", "[", "idx", "-", "1", "]", "\n", "# alas, dict = {'t1': 'concert', 't2': 'stadium'}", "\n", "", "return", "alias", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.get_tables_with_alias": [[180, 186], ["process_sql.scan_alias"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.scan_alias"], ["", "def", "get_tables_with_alias", "(", "schema", ",", "toks", ")", ":", "\n", "    ", "tables", "=", "scan_alias", "(", "toks", ")", "\n", "for", "key", "in", "schema", ":", "\n", "        ", "assert", "key", "not", "in", "tables", ",", "\"Alias {} has the same name in table\"", ".", "format", "(", "key", ")", "\n", "tables", "[", "key", "]", "=", "key", "\n", "", "return", "tables", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.parse_col": [[190, 212], ["tok.split", "len"], "function", ["None"], ["", "def", "parse_col", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n        :returns next idx, column id\n    \"\"\"", "\n", "tok", "=", "toks", "[", "start_idx", "]", "\n", "if", "tok", "==", "\"*\"", ":", "\n", "        ", "return", "start_idx", "+", "1", ",", "schema", ".", "idMap", "[", "tok", "]", "\n", "\n", "", "if", "'.'", "in", "tok", ":", "# if token is a composite", "\n", "        ", "alias", ",", "col", "=", "tok", ".", "split", "(", "'.'", ")", "\n", "key", "=", "tables_with_alias", "[", "alias", "]", "+", "\".\"", "+", "col", "\n", "return", "start_idx", "+", "1", ",", "schema", ".", "idMap", "[", "key", "]", "\n", "\n", "", "assert", "default_tables", "is", "not", "None", "and", "len", "(", "default_tables", ")", ">", "0", ",", "\"Default tables should not be None or empty\"", "\n", "\n", "for", "alias", "in", "default_tables", ":", "\n", "        ", "table", "=", "tables_with_alias", "[", "alias", "]", "\n", "if", "tok", "in", "schema", ".", "schema", "[", "table", "]", ":", "\n", "            ", "key", "=", "table", "+", "\".\"", "+", "tok", "\n", "return", "start_idx", "+", "1", ",", "schema", ".", "idMap", "[", "key", "]", "\n", "\n", "", "", "assert", "False", ",", "\"Error col: {}\"", ".", "format", "(", "tok", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.parse_col_unit": [[214, 250], ["len", "AGG_OPS.index", "process_sql.parse_col", "AGG_OPS.index", "process_sql.parse_col"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_col", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_col"], ["", "def", "parse_col_unit", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n        :returns next idx, (agg_op id, col_id)\n    \"\"\"", "\n", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "isBlock", "=", "False", "\n", "isDistinct", "=", "False", "\n", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "        ", "isBlock", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "", "if", "toks", "[", "idx", "]", "in", "AGG_OPS", ":", "\n", "        ", "agg_id", "=", "AGG_OPS", ".", "index", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "\n", "assert", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "'('", "\n", "idx", "+=", "1", "\n", "if", "toks", "[", "idx", "]", "==", "\"distinct\"", ":", "\n", "            ", "idx", "+=", "1", "\n", "isDistinct", "=", "True", "\n", "", "idx", ",", "col_id", "=", "parse_col", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "assert", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "')'", "\n", "idx", "+=", "1", "\n", "return", "idx", ",", "(", "agg_id", ",", "col_id", ",", "isDistinct", ")", "\n", "\n", "", "if", "toks", "[", "idx", "]", "==", "\"distinct\"", ":", "\n", "        ", "idx", "+=", "1", "\n", "isDistinct", "=", "True", "\n", "", "agg_id", "=", "AGG_OPS", ".", "index", "(", "\"none\"", ")", "\n", "idx", ",", "col_id", "=", "parse_col", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "\n", "if", "isBlock", ":", "\n", "        ", "assert", "toks", "[", "idx", "]", "==", "')'", "\n", "idx", "+=", "1", "# skip ')'", "\n", "# e.g. (False, [(0, (0, (0, '__singer.name__', False), None))])", "\n", "", "return", "idx", ",", "(", "agg_id", ",", "col_id", ",", "isDistinct", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.parse_val_unit": [[252, 275], ["len", "UNIT_OPS.index", "process_sql.parse_col_unit", "UNIT_OPS.index", "process_sql.parse_col_unit"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_col_unit", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_col_unit"], ["", "def", "parse_val_unit", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "isBlock", "=", "False", "\n", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "        ", "isBlock", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "", "col_unit1", "=", "None", "\n", "col_unit2", "=", "None", "\n", "unit_op", "=", "UNIT_OPS", ".", "index", "(", "'none'", ")", "\n", "\n", "idx", ",", "col_unit1", "=", "parse_col_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "in", "UNIT_OPS", ":", "\n", "        ", "unit_op", "=", "UNIT_OPS", ".", "index", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "\n", "idx", ",", "col_unit2", "=", "parse_col_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "\n", "", "if", "isBlock", ":", "\n", "        ", "assert", "toks", "[", "idx", "]", "==", "')'", "\n", "idx", "+=", "1", "# skip ')'", "\n", "\n", "", "return", "idx", ",", "(", "unit_op", ",", "col_unit1", ",", "col_unit2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.parse_table_unit": [[277, 291], ["len"], "function", ["None"], ["", "def", "parse_table_unit", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ")", ":", "\n", "    ", "\"\"\"\n        :returns next idx, table id, table name\n    \"\"\"", "\n", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "key", "=", "tables_with_alias", "[", "toks", "[", "idx", "]", "]", "\n", "\n", "if", "idx", "+", "1", "<", "len_", "and", "toks", "[", "idx", "+", "1", "]", "==", "\"as\"", ":", "\n", "        ", "idx", "+=", "3", "\n", "", "else", ":", "\n", "        ", "idx", "+=", "1", "\n", "\n", "", "return", "idx", ",", "schema", ".", "idMap", "[", "key", "]", ",", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.parse_value": [[293, 325], ["len", "process_sql.parse_sql", "float", "process_sql.parse_col_unit"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_sql", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_col_unit"], ["", "def", "parse_value", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "\n", "isBlock", "=", "False", "\n", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "        ", "isBlock", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "", "if", "toks", "[", "idx", "]", "==", "'select'", ":", "\n", "        ", "idx", ",", "val", "=", "parse_sql", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ")", "\n", "", "elif", "\"\\\"\"", "in", "toks", "[", "idx", "]", ":", "# token is a string value", "\n", "        ", "val", "=", "toks", "[", "idx", "]", "\n", "idx", "+=", "1", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "val", "=", "float", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "\n", "", "except", ":", "\n", "            ", "end_idx", "=", "idx", "\n", "while", "end_idx", "<", "len_", "and", "toks", "[", "end_idx", "]", "!=", "','", "and", "toks", "[", "end_idx", "]", "!=", "')'", "and", "toks", "[", "end_idx", "]", "!=", "'and'", "and", "toks", "[", "end_idx", "]", "not", "in", "CLAUSE_KEYWORDS", "and", "toks", "[", "end_idx", "]", "not", "in", "JOIN_KEYWORDS", ":", "\n", "                    ", "end_idx", "+=", "1", "\n", "\n", "", "idx", ",", "val", "=", "parse_col_unit", "(", "toks", "[", "start_idx", ":", "end_idx", "]", ",", "0", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "idx", "=", "end_idx", "\n", "\n", "", "", "if", "isBlock", ":", "\n", "        ", "assert", "toks", "[", "idx", "]", "==", "')'", "\n", "idx", "+=", "1", "\n", "\n", "", "return", "idx", ",", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.parse_condition": [[327, 362], ["len", "process_sql.parse_val_unit", "WHERE_OPS.index", "conds.append", "WHERE_OPS.index", "process_sql.parse_value", "process_sql.parse_value", "process_sql.parse_value", "conds.append"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_val_unit", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_value", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_value", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_value"], ["", "def", "parse_condition", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "conds", "=", "[", "]", "\n", "\n", "while", "idx", "<", "len_", ":", "\n", "        ", "idx", ",", "val_unit", "=", "parse_val_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "not_op", "=", "False", "\n", "if", "toks", "[", "idx", "]", "==", "'not'", ":", "\n", "            ", "not_op", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "", "assert", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "in", "WHERE_OPS", ",", "\"Error condition: idx: {}, tok: {}\"", ".", "format", "(", "idx", ",", "toks", "[", "idx", "]", ")", "\n", "op_id", "=", "WHERE_OPS", ".", "index", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "\n", "val1", "=", "val2", "=", "None", "\n", "if", "op_id", "==", "WHERE_OPS", ".", "index", "(", "'between'", ")", ":", "# between..and... special case: dual values", "\n", "            ", "idx", ",", "val1", "=", "parse_value", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "assert", "toks", "[", "idx", "]", "==", "'and'", "\n", "idx", "+=", "1", "\n", "idx", ",", "val2", "=", "parse_value", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "", "else", ":", "# normal case: single value", "\n", "            ", "idx", ",", "val1", "=", "parse_value", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "val2", "=", "None", "\n", "\n", "", "conds", ".", "append", "(", "(", "not_op", ",", "op_id", ",", "val_unit", ",", "val1", ",", "val2", ")", ")", "\n", "\n", "if", "idx", "<", "len_", "and", "(", "toks", "[", "idx", "]", "in", "CLAUSE_KEYWORDS", "or", "toks", "[", "idx", "]", "in", "(", "\")\"", ",", "\";\"", ")", "or", "toks", "[", "idx", "]", "in", "JOIN_KEYWORDS", ")", ":", "\n", "            ", "break", "\n", "\n", "", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "in", "COND_OPS", ":", "\n", "            ", "conds", ".", "append", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "# skip and/or", "\n", "\n", "", "", "return", "idx", ",", "conds", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.parse_select": [[364, 387], ["len", "AGG_OPS.index", "process_sql.parse_val_unit", "val_units.append", "AGG_OPS.index"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_val_unit"], ["", "def", "parse_select", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "\n", "assert", "toks", "[", "idx", "]", "==", "'select'", ",", "\"'select' not found\"", "\n", "idx", "+=", "1", "\n", "isDistinct", "=", "False", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "'distinct'", ":", "\n", "        ", "idx", "+=", "1", "\n", "isDistinct", "=", "True", "\n", "", "val_units", "=", "[", "]", "\n", "\n", "while", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "not", "in", "CLAUSE_KEYWORDS", ":", "\n", "        ", "agg_id", "=", "AGG_OPS", ".", "index", "(", "\"none\"", ")", "\n", "if", "toks", "[", "idx", "]", "in", "AGG_OPS", ":", "\n", "            ", "agg_id", "=", "AGG_OPS", ".", "index", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "\n", "", "idx", ",", "val_unit", "=", "parse_val_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "val_units", ".", "append", "(", "(", "agg_id", ",", "val_unit", ")", ")", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "','", ":", "\n", "            ", "idx", "+=", "1", "# skip ','", "\n", "\n", "", "", "return", "idx", ",", "(", "isDistinct", ",", "val_units", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.parse_from": [[389, 430], ["len", "toks.index", "process_sql.parse_sql", "table_units.append", "process_sql.parse_table_unit", "table_units.append", "default_tables.append", "process_sql.parse_condition", "conds.extend", "len", "conds.append"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_sql", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_table_unit", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_condition"], ["", "def", "parse_from", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ")", ":", "\n", "    ", "\"\"\"\n    Assume in the from clause, all table units are combined with join\n    \"\"\"", "\n", "assert", "'from'", "in", "toks", "[", "start_idx", ":", "]", ",", "\"'from' not found\"", "\n", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "idx", "=", "toks", ".", "index", "(", "'from'", ",", "start_idx", ")", "+", "1", "\n", "default_tables", "=", "[", "]", "\n", "table_units", "=", "[", "]", "\n", "conds", "=", "[", "]", "\n", "\n", "while", "idx", "<", "len_", ":", "\n", "        ", "isBlock", "=", "False", "\n", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "            ", "isBlock", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "", "if", "toks", "[", "idx", "]", "==", "'select'", ":", "\n", "            ", "idx", ",", "sql", "=", "parse_sql", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ")", "\n", "table_units", ".", "append", "(", "(", "TABLE_TYPE", "[", "'sql'", "]", ",", "sql", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "'join'", ":", "\n", "                ", "idx", "+=", "1", "# skip join", "\n", "", "idx", ",", "table_unit", ",", "table_name", "=", "parse_table_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ")", "\n", "table_units", ".", "append", "(", "(", "TABLE_TYPE", "[", "'table_unit'", "]", ",", "table_unit", ")", ")", "\n", "default_tables", ".", "append", "(", "table_name", ")", "\n", "", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "\"on\"", ":", "\n", "            ", "idx", "+=", "1", "# skip on", "\n", "idx", ",", "this_conds", "=", "parse_condition", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "if", "len", "(", "conds", ")", ">", "0", ":", "\n", "                ", "conds", ".", "append", "(", "'and'", ")", "\n", "", "conds", ".", "extend", "(", "this_conds", ")", "\n", "\n", "", "if", "isBlock", ":", "\n", "            ", "assert", "toks", "[", "idx", "]", "==", "')'", "\n", "idx", "+=", "1", "\n", "", "if", "idx", "<", "len_", "and", "(", "toks", "[", "idx", "]", "in", "CLAUSE_KEYWORDS", "or", "toks", "[", "idx", "]", "in", "(", "\")\"", ",", "\";\"", ")", ")", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "idx", ",", "table_units", ",", "conds", ",", "default_tables", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.parse_where": [[432, 442], ["len", "process_sql.parse_condition"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_condition"], ["", "def", "parse_where", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "\n", "if", "idx", ">=", "len_", "or", "toks", "[", "idx", "]", "!=", "'where'", ":", "\n", "        ", "return", "idx", ",", "[", "]", "\n", "\n", "", "idx", "+=", "1", "\n", "idx", ",", "conds", "=", "parse_condition", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "return", "idx", ",", "conds", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.parse_group_by": [[444, 465], ["len", "process_sql.parse_col_unit", "col_units.append"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_col_unit"], ["", "def", "parse_group_by", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "col_units", "=", "[", "]", "\n", "\n", "if", "idx", ">=", "len_", "or", "toks", "[", "idx", "]", "!=", "'group'", ":", "\n", "        ", "return", "idx", ",", "col_units", "\n", "\n", "", "idx", "+=", "1", "\n", "assert", "toks", "[", "idx", "]", "==", "'by'", "\n", "idx", "+=", "1", "\n", "\n", "while", "idx", "<", "len_", "and", "not", "(", "toks", "[", "idx", "]", "in", "CLAUSE_KEYWORDS", "or", "toks", "[", "idx", "]", "in", "(", "\")\"", ",", "\";\"", ")", ")", ":", "\n", "        ", "idx", ",", "col_unit", "=", "parse_col_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "col_units", ".", "append", "(", "col_unit", ")", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "','", ":", "\n", "            ", "idx", "+=", "1", "# skip ','", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "idx", ",", "col_units", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.parse_order_by": [[467, 492], ["len", "process_sql.parse_val_unit", "val_units.append"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_val_unit"], ["", "def", "parse_order_by", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "val_units", "=", "[", "]", "\n", "order_type", "=", "'asc'", "# default type is 'asc'", "\n", "\n", "if", "idx", ">=", "len_", "or", "toks", "[", "idx", "]", "!=", "'order'", ":", "\n", "        ", "return", "idx", ",", "val_units", "\n", "\n", "", "idx", "+=", "1", "\n", "assert", "toks", "[", "idx", "]", "==", "'by'", "\n", "idx", "+=", "1", "\n", "\n", "while", "idx", "<", "len_", "and", "not", "(", "toks", "[", "idx", "]", "in", "CLAUSE_KEYWORDS", "or", "toks", "[", "idx", "]", "in", "(", "\")\"", ",", "\";\"", ")", ")", ":", "\n", "        ", "idx", ",", "val_unit", "=", "parse_val_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "val_units", ".", "append", "(", "val_unit", ")", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "in", "ORDER_OPS", ":", "\n", "            ", "order_type", "=", "toks", "[", "idx", "]", "\n", "idx", "+=", "1", "\n", "", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "','", ":", "\n", "            ", "idx", "+=", "1", "# skip ','", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "idx", ",", "(", "order_type", ",", "val_units", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.parse_having": [[494, 504], ["len", "process_sql.parse_condition"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_condition"], ["", "def", "parse_having", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "\n", "if", "idx", ">=", "len_", "or", "toks", "[", "idx", "]", "!=", "'having'", ":", "\n", "        ", "return", "idx", ",", "[", "]", "\n", "\n", "", "idx", "+=", "1", "\n", "idx", ",", "conds", "=", "parse_condition", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "return", "idx", ",", "conds", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.parse_limit": [[506, 515], ["len", "int"], "function", ["None"], ["", "def", "parse_limit", "(", "toks", ",", "start_idx", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "'limit'", ":", "\n", "        ", "idx", "+=", "2", "\n", "return", "idx", ",", "int", "(", "toks", "[", "idx", "-", "1", "]", ")", "\n", "\n", "", "return", "idx", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.parse_sql": [[517, 565], ["len", "process_sql.parse_from", "process_sql.parse_select", "process_sql.parse_where", "process_sql.parse_group_by", "process_sql.parse_having", "process_sql.parse_order_by", "process_sql.parse_limit", "process_sql.skip_semicolon", "process_sql.skip_semicolon", "process_sql.parse_sql"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_from", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_select", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_where", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_group_by", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_having", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_order_by", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_limit", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.skip_semicolon", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.skip_semicolon", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_sql"], ["", "def", "parse_sql", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ")", ":", "\n", "    ", "isBlock", "=", "False", "# indicate whether this is a block of sql/sub-sql", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "idx", "=", "start_idx", "\n", "\n", "sql", "=", "{", "}", "\n", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "        ", "isBlock", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "# parse from clause in order to get default tables", "\n", "", "from_end_idx", ",", "table_units", ",", "conds", ",", "default_tables", "=", "parse_from", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ")", "\n", "sql", "[", "'from'", "]", "=", "{", "'table_units'", ":", "table_units", ",", "'conds'", ":", "conds", "}", "\n", "# select clause", "\n", "_", ",", "select_col_units", "=", "parse_select", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "idx", "=", "from_end_idx", "\n", "sql", "[", "'select'", "]", "=", "select_col_units", "\n", "# where clause", "\n", "idx", ",", "where_conds", "=", "parse_where", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "sql", "[", "'where'", "]", "=", "where_conds", "\n", "# group by clause", "\n", "idx", ",", "group_col_units", "=", "parse_group_by", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "sql", "[", "'groupBy'", "]", "=", "group_col_units", "\n", "# having clause", "\n", "idx", ",", "having_conds", "=", "parse_having", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "sql", "[", "'having'", "]", "=", "having_conds", "\n", "# order by clause", "\n", "idx", ",", "order_col_units", "=", "parse_order_by", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "sql", "[", "'orderBy'", "]", "=", "order_col_units", "\n", "# limit clause", "\n", "idx", ",", "limit_val", "=", "parse_limit", "(", "toks", ",", "idx", ")", "\n", "sql", "[", "'limit'", "]", "=", "limit_val", "\n", "\n", "idx", "=", "skip_semicolon", "(", "toks", ",", "idx", ")", "\n", "if", "isBlock", ":", "\n", "        ", "assert", "toks", "[", "idx", "]", "==", "')'", "\n", "idx", "+=", "1", "# skip ')'", "\n", "", "idx", "=", "skip_semicolon", "(", "toks", ",", "idx", ")", "\n", "\n", "# intersect/union/except clause", "\n", "for", "op", "in", "SQL_OPS", ":", "# initialize IUE", "\n", "        ", "sql", "[", "op", "]", "=", "None", "\n", "", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "in", "SQL_OPS", ":", "\n", "        ", "sql_op", "=", "toks", "[", "idx", "]", "\n", "idx", "+=", "1", "\n", "idx", ",", "IUE_sql", "=", "parse_sql", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ")", "\n", "sql", "[", "sql_op", "]", "=", "IUE_sql", "\n", "", "return", "idx", ",", "sql", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.load_data": [[567, 571], ["open", "json.load"], "function", ["None"], ["", "def", "load_data", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.get_sql": [[573, 579], ["process_sql.tokenize", "process_sql.get_tables_with_alias", "process_sql.parse_sql"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.tokenize", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.get_tables_with_alias", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_sql"], ["", "def", "get_sql", "(", "schema", ",", "query", ")", ":", "\n", "    ", "toks", "=", "tokenize", "(", "query", ")", "\n", "tables_with_alias", "=", "get_tables_with_alias", "(", "schema", ".", "schema", ",", "toks", ")", "\n", "_", ",", "sql", "=", "parse_sql", "(", "toks", ",", "0", ",", "tables_with_alias", ",", "schema", ")", "\n", "\n", "return", "sql", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.process_sql.skip_semicolon": [[581, 586], ["len"], "function", ["None"], ["", "def", "skip_semicolon", "(", "toks", ",", "start_idx", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "while", "idx", "<", "len", "(", "toks", ")", "and", "toks", "[", "idx", "]", "==", "\";\"", ":", "\n", "        ", "idx", "+=", "1", "\n", "", "return", "idx", "\n", "", ""]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.run.get_cursor_path": [[19, 30], ["sqlite3.connect.cursor", "sqlite3.connect", "b.decode", "os.path.exists", "print", "print"], "function", ["None"], ["def", "get_cursor_path", "(", "sqlite_path", ":", "str", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "sqlite_path", ")", ":", "\n", "            ", "print", "(", "'Openning a new connection %s'", "%", "sqlite_path", ")", "\n", "", "connection", "=", "sqlite3", ".", "connect", "(", "sqlite_path", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "sqlite_path", ")", "\n", "raise", "e", "\n", "", "connection", ".", "text_factory", "=", "lambda", "b", ":", "b", ".", "decode", "(", "errors", "=", "'ignore'", ")", "\n", "cursor", "=", "connection", ".", "cursor", "(", ")", "\n", "return", "cursor", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.run.can_execute_path": [[32, 35], ["run.exec_db_path_"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.run.exec_db_path_"], ["", "def", "can_execute_path", "(", "sqlite_path", ":", "str", ",", "q", ":", "str", ")", "->", "bool", ":", "\n", "    ", "flag", ",", "result", "=", "exec_db_path_", "(", "sqlite_path", ",", "q", ")", "\n", "return", "flag", "==", "'result'", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.run.clean_tmp_f": [[37, 43], ["os.path.exists", "os.unlink"], "function", ["None"], ["", "def", "clean_tmp_f", "(", "f_prefix", ":", "str", ")", ":", "\n", "    ", "with", "threadLock", ":", "\n", "        ", "for", "suffix", "in", "(", "'.in'", ",", "'.out'", ")", ":", "\n", "            ", "f_path", "=", "f_prefix", "+", "suffix", "\n", "if", "os", ".", "path", ".", "exists", "(", "f_path", ")", ":", "\n", "                ", "os", ".", "unlink", "(", "f_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.run.exec_db_path": [[46, 68], ["run.clean_tmp_f", "pickle.dump", "subprocess.call", "os.path.exists", "os.path.exists", "str", "str", "os.path.join", "open", "run.clean_tmp_f", "pickle.load", "time.time", "random.randint", "open", "open"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.clean_tmp_f", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.clean_tmp_f"], ["", "", "", "", "def", "exec_db_path", "(", "sqlite_path", ":", "str", ",", "query", ":", "str", ",", "process_id", ":", "str", "=", "''", ",", "timeout", ":", "int", "=", "TIMEOUT", ")", "->", "Tuple", "[", "str", ",", "Any", "]", ":", "\n", "    ", "f_prefix", "=", "None", "\n", "with", "threadLock", ":", "\n", "        ", "while", "f_prefix", "is", "None", "or", "os", ".", "path", ".", "exists", "(", "f_prefix", "+", "'.in'", ")", ":", "\n", "            ", "process_id", "+=", "str", "(", "time", ".", "time", "(", ")", ")", "\n", "process_id", "+=", "str", "(", "random", ".", "randint", "(", "0", ",", "10000000000", ")", ")", "\n", "f_prefix", "=", "os", ".", "path", ".", "join", "(", "EXEC_TMP_DIR", ",", "process_id", ")", "\n", "", "pkl", ".", "dump", "(", "(", "sqlite_path", ",", "query", ")", ",", "open", "(", "f_prefix", "+", "'.in'", ",", "'wb'", ")", ")", "\n", "", "try", ":", "\n", "        ", "subprocess", ".", "call", "(", "[", "'python3'", ",", "'sql_util/exec_subprocess.py'", ",", "f_prefix", "]", ",", "timeout", "=", "timeout", ",", "stderr", "=", "open", "(", "'runerr.log'", ",", "'a'", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "clean_tmp_f", "(", "f_prefix", ")", "\n", "return", "'exception'", ",", "e", "\n", "", "result_path", "=", "f_prefix", "+", "'.out'", "\n", "returned_val", "=", "(", "'exception'", ",", "TimeoutError", ")", "\n", "try", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "result_path", ")", ":", "\n", "            ", "returned_val", "=", "pkl", ".", "load", "(", "open", "(", "result_path", ",", "'rb'", ")", ")", "\n", "", "", "except", ":", "\n", "        ", "pass", "\n", "", "clean_tmp_f", "(", "f_prefix", ")", "\n", "return", "returned_val", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.run.replace_cur_year": [[70, 72], ["re.sub"], "function", ["None"], ["", "def", "replace_cur_year", "(", "query", ":", "str", ")", "->", "str", ":", "\n", "    ", "return", "re", ".", "sub", "(", "'YEAR\\s*\\(\\s*CURDATE\\s*\\(\\s*\\)\\s*\\)\\s*'", ",", "'2020'", ",", "query", ",", "flags", "=", "re", ".", "IGNORECASE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.run.exec_db_path_": [[74, 87], ["run.replace_cur_year", "run.get_cursor_path", "get_cursor_path.execute", "get_cursor_path.fetchall", "get_cursor_path.close", "get_cursor_path.connection.close", "get_cursor_path.close", "get_cursor_path.connection.close"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_subprocess.replace_cur_year", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.run.get_cursor_path"], ["", "def", "exec_db_path_", "(", "sqlite_path", ":", "str", ",", "query", ":", "str", ")", "->", "Tuple", "[", "str", ",", "Any", "]", ":", "\n", "    ", "query", "=", "replace_cur_year", "(", "query", ")", "\n", "cursor", "=", "get_cursor_path", "(", "sqlite_path", ")", "\n", "try", ":", "\n", "        ", "cursor", ".", "execute", "(", "query", ")", "\n", "result", "=", "cursor", ".", "fetchall", "(", ")", "\n", "cursor", ".", "close", "(", ")", "\n", "cursor", ".", "connection", ".", "close", "(", ")", "\n", "return", "'result'", ",", "result", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "cursor", ".", "close", "(", ")", "\n", "cursor", ".", "connection", ".", "close", "(", ")", "\n", "return", "'exception'", ",", "e", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_values": [[17, 20], ["pickle.load", "open", "sql_util.dbpath.get_value_path"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbpath.get_value_path"], ["def", "get_values", "(", "db_name", ":", "str", ")", "->", "Set", "[", "str", "]", ":", "\n", "    ", "values", "=", "pkl", ".", "load", "(", "open", "(", "get_value_path", "(", "db_name", ")", ",", "'rb'", ")", ")", "\n", "return", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_schema_path": [[22, 26], ["sql_util.run.exec_db_path_"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.run.exec_db_path_"], ["", "def", "get_schema_path", "(", "sqlite_path", ":", "str", ",", "table_name", ":", "str", ")", "->", "str", ":", "\n", "    ", "_", ",", "schema", "=", "exec_db_path_", "(", "sqlite_path", ",", "table_schema_query", "%", "table_name", ")", "\n", "schema", "=", "schema", "[", "0", "]", "[", "0", "]", "\n", "return", "schema", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_unique_keys": [[28, 35], ["schema.split", "set", "r.lower", "set.add", "[].upper().replace().replace", "[].upper().replace", "[].upper", "r.strip().split", "r.strip"], "function", ["None"], ["", "def", "get_unique_keys", "(", "schema", ":", "str", ")", "->", "Set", "[", "str", "]", ":", "\n", "    ", "schema_by_list", "=", "schema", ".", "split", "(", "'\\n'", ")", "\n", "unique_keys", "=", "set", "(", ")", "\n", "for", "r", "in", "schema_by_list", ":", "\n", "        ", "if", "'unique'", "in", "r", ".", "lower", "(", ")", ":", "\n", "            ", "unique_keys", ".", "add", "(", "r", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "0", "]", ".", "upper", "(", ")", ".", "replace", "(", "\"\\\"\"", ",", "''", ")", ".", "replace", "(", "'`'", ",", "''", ")", ")", "\n", "", "", "return", "unique_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_checked_keys": [[37, 44], ["schema.split", "set", "set.add", "[].upper().replace().replace", "[].upper().replace", "[].upper", "r.strip().split", "r.strip"], "function", ["None"], ["", "def", "get_checked_keys", "(", "schema", ":", "str", ")", "->", "Set", "[", "str", "]", ":", "\n", "    ", "schema_by_list", "=", "schema", ".", "split", "(", "'\\n'", ")", "\n", "checked_keys", "=", "set", "(", ")", "\n", "for", "r", "in", "schema_by_list", ":", "\n", "        ", "if", "'check ('", "in", "r", "or", "'check('", "in", "r", ":", "\n", "            ", "checked_keys", ".", "add", "(", "r", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "0", "]", ".", "upper", "(", ")", ".", "replace", "(", "\"\\\"\"", ",", "''", ")", ".", "replace", "(", "'`'", ",", "''", ")", ")", "\n", "", "", "return", "checked_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_table_names_path": [[46, 49], ["sql_util.run.exec_db_path_"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.run.exec_db_path_"], ["", "def", "get_table_names_path", "(", "sqlite_path", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "table_names", "=", "[", "x", "[", "0", "]", "for", "x", "in", "exec_db_path_", "(", "sqlite_path", ",", "table_name_query", ")", "[", "1", "]", "]", "\n", "return", "table_names", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.extract_table_column_properties_path": [[51, 110], ["dbinfo.get_table_names_path", "collections.OrderedDict", "collections.OrderedDict", "dbinfo.get_schema_path", "table_name.lower.lower", "collections.OrderedDict", "sql_util.run.exec_db_path_", "sql_util.run.exec_db_path_", "set", "set", "dbinfo.get_unique_keys", "dbinfo.get_checked_keys", "column_name.upper.upper", "collections.OrderedDict.keys", "collections.OrderedDict.values", "table_name.lower.lower", "column_name.upper.upper", "table_name.lower.lower", "table_name.lower.lower", "other_tab_name.lower", "this_column_name.upper", "other_column_name.upper"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_table_names_path", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_schema_path", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.run.exec_db_path_", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.run.exec_db_path_", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_unique_keys", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_checked_keys"], ["", "def", "extract_table_column_properties_path", "(", "sqlite_path", ":", "str", ")", "->", "Tuple", "[", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "Any", "]", "]", ",", "Dict", "[", "Tuple", "[", "str", ",", "str", "]", ",", "Tuple", "[", "str", ",", "str", "]", "]", "]", ":", "\n", "    ", "table_names", "=", "get_table_names_path", "(", "sqlite_path", ")", "\n", "table_name2column_properties", "=", "OrderedDict", "(", ")", "\n", "child2parent", "=", "OrderedDict", "(", ")", "\n", "for", "table_name", "in", "table_names", ":", "\n", "        ", "schema", "=", "get_schema_path", "(", "sqlite_path", ",", "table_name", ")", "\n", "unique_keys", ",", "checked_keys", "=", "get_unique_keys", "(", "schema", ")", ",", "get_checked_keys", "(", "schema", ")", "\n", "table_name", "=", "table_name", ".", "lower", "(", ")", "\n", "column_properties", "=", "OrderedDict", "(", ")", "\n", "result_type", ",", "result", "=", "exec_db_path_", "(", "sqlite_path", ",", "column_type_query", "%", "table_name", ")", "\n", "for", "(", "\n", "columnID", ",", "column_name", ",", "columnType", ",", "\n", "columnNotNull", ",", "columnDefault", ",", "columnPK", ",", "\n", ")", "in", "result", ":", "\n", "            ", "column_name", "=", "column_name", ".", "upper", "(", ")", "\n", "column_properties", "[", "column_name", "]", "=", "{", "\n", "'ID'", ":", "columnID", ",", "\n", "'name'", ":", "column_name", ",", "\n", "'type'", ":", "columnType", ",", "\n", "'notnull'", ":", "columnNotNull", ",", "\n", "'default'", ":", "columnDefault", ",", "\n", "'PK'", ":", "columnPK", ",", "\n", "'unique'", ":", "column_name", "in", "unique_keys", ",", "\n", "'checked'", ":", "column_name", "in", "checked_keys", "\n", "}", "\n", "", "table_name2column_properties", "[", "table_name", ".", "lower", "(", ")", "]", "=", "column_properties", "\n", "\n", "# extract foreign keys and population child2parent", "\n", "result_type", ",", "result", "=", "exec_db_path_", "(", "sqlite_path", ",", "foreign_key_query", "%", "table_name", ")", "\n", "for", "(", "\n", "keyid", ",", "column_seq_id", ",", "other_tab_name", ",", "this_column_name", ",", "other_column_name", ",", "\n", "on_update", ",", "on_delete", ",", "match", "\n", ")", "in", "result", ":", "\n", "# these lines handle a foreign key exception in the test set", "\n", "# due to implicit reference", "\n", "            ", "if", "other_column_name", "is", "None", ":", "\n", "                ", "other_column_name", "=", "this_column_name", "\n", "\n", "", "table_name", ",", "other_tab_name", "=", "table_name", ".", "lower", "(", ")", ",", "other_tab_name", ".", "lower", "(", ")", "\n", "this_column_name", ",", "other_column_name", "=", "this_column_name", ".", "upper", "(", ")", ",", "other_column_name", ".", "upper", "(", ")", "\n", "\n", "# these lines handle a foreign key exception in the test set", "\n", "# due to typo in the column name", "\n", "if", "other_tab_name", "==", "'author'", "and", "other_column_name", "==", "'IDAUTHORA'", ":", "\n", "                ", "other_column_name", "=", "'IDAUTHOR'", "\n", "\n", "", "child2parent", "[", "(", "table_name", ",", "this_column_name", ")", "]", "=", "(", "other_tab_name", ",", "other_column_name", ")", "\n", "\n", "# make sure that every table, column in the dependency are in the table.", "\n", "", "", "dep_table_columns", "=", "set", "(", "child2parent", ".", "keys", "(", ")", ")", "|", "set", "(", "child2parent", ".", "values", "(", ")", ")", "\n", "for", "table_name", ",", "column_name", "in", "dep_table_columns", ":", "\n", "        ", "assert", "table_name", ".", "lower", "(", ")", "==", "table_name", ",", "\"table name should be lower case\"", "\n", "assert", "column_name", ".", "upper", "(", ")", "==", "column_name", ",", "\"column name should be upper case\"", "\n", "assert", "table_name", "in", "table_name2column_properties", ",", "\"table name %s missing.\"", "%", "table_name", "\n", "assert", "column_name", "in", "table_name2column_properties", "[", "table_name", "]", ",", "\"column name %s should be present in table %s\"", "%", "(", "column_name", ",", "table_name", ")", "\n", "\n", "", "return", "table_name2column_properties", ",", "child2parent", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.collapse_key": [[114, 120], ["collections.OrderedDict", "d.items", "v1.items"], "function", ["None"], ["def", "collapse_key", "(", "d", ":", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "T", "]", "]", ")", "->", "Dict", "[", "Tuple", "[", "str", ",", "str", "]", ",", "T", "]", ":", "\n", "    ", "result", "=", "OrderedDict", "(", ")", "\n", "for", "k1", ",", "v1", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "for", "k2", ",", "v2", "in", "v1", ".", "items", "(", ")", ":", "\n", "            ", "result", "[", "(", "k1", ",", "k2", ")", "]", "=", "v2", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.process_order_helper": [[123, 140], ["set", "dep.values", "list", "set", "dep.keys", "set", "len", "dbinfo.my_top_sort", "len", "list.append", "set", "len", "len", "set", "order[].add", "dep.items"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.my_top_sort"], ["def", "process_order_helper", "(", "dep", ":", "Dict", "[", "E", ",", "Set", "[", "E", "]", "]", ",", "all", ":", "Set", "[", "E", "]", ")", "->", "List", "[", "Set", "[", "E", "]", "]", ":", "\n", "    ", "dep_ks", "=", "set", "(", "dep", ".", "keys", "(", ")", ")", "\n", "for", "k", "in", "dep", ".", "values", "(", ")", ":", "\n", "        ", "dep_ks", "|=", "set", "(", "k", ")", "\n", "# assert that all the elements in the dependency relations are in the universe set", "\n", "", "assert", "len", "(", "dep_ks", "-", "all", ")", "==", "0", ",", "dep_ks", "-", "all", "\n", "order", "=", "list", "(", "my_top_sort", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "dep", ".", "items", "(", ")", "}", ")", ")", "\n", "if", "len", "(", "order", ")", "==", "0", ":", "\n", "        ", "order", ".", "append", "(", "set", "(", ")", ")", "\n", "", "for", "k", "in", "all", ":", "\n", "        ", "if", "k", "not", "in", "dep_ks", ":", "\n", "            ", "order", "[", "0", "]", ".", "add", "(", "k", ")", "\n", "", "", "s", "=", "set", "(", ")", "\n", "for", "o", "in", "order", ":", "\n", "        ", "s", "|=", "set", "(", "o", ")", "\n", "", "assert", "len", "(", "s", ")", "==", "len", "(", "all", ")", ",", "(", "s", "-", "all", ",", "all", "-", "s", ")", "\n", "return", "order", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.my_top_sort": [[142, 161], ["set", "dep.items", "set.add", "len", "set", "order.append", "set.remove", "dep.keys", "set.add", "all", "set.add"], "function", ["None"], ["", "def", "my_top_sort", "(", "dep", ":", "Dict", "[", "E", ",", "Set", "[", "E", "]", "]", ")", "->", "List", "[", "Set", "[", "E", "]", "]", ":", "\n", "    ", "order", "=", "[", "]", "\n", "elements_left", "=", "set", "(", ")", "\n", "for", "child", ",", "parents", "in", "dep", ".", "items", "(", ")", ":", "\n", "        ", "elements_left", ".", "add", "(", "child", ")", "\n", "elements_left", "|=", "parents", "\n", "\n", "", "while", "len", "(", "elements_left", ")", "!=", "0", ":", "\n", "        ", "level_set", "=", "set", "(", ")", "\n", "for", "e", "in", "elements_left", ":", "\n", "            ", "if", "e", "not", "in", "dep", ".", "keys", "(", ")", ":", "\n", "                ", "level_set", ".", "add", "(", "e", ")", "\n", "", "else", ":", "\n", "                ", "if", "all", "(", "parent", "not", "in", "elements_left", "for", "parent", "in", "dep", "[", "e", "]", ")", ":", "\n", "                    ", "level_set", ".", "add", "(", "e", ")", "\n", "", "", "", "for", "e", "in", "level_set", ":", "\n", "            ", "elements_left", ".", "remove", "(", "e", ")", "\n", "", "order", ".", "append", "(", "level_set", ")", "\n", "", "return", "order", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_process_order": [[164, 177], ["set", "dbinfo.process_order_helper", "set", "collections.defaultdict", "child2parent.items", "dbinfo.process_order_helper", "table_column_properties.keys", "table_child2parent[].add", "child2parent.items"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.process_order_helper", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.process_order_helper"], ["", "def", "get_process_order", "(", "child2parent", ":", "Dict", "[", "Tuple", "[", "str", ",", "str", "]", ",", "Tuple", "[", "str", ",", "str", "]", "]", ",", "\n", "table_column_properties", ":", "Dict", "[", "Tuple", "[", "str", ",", "str", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ")", "->", "Tuple", "[", "List", "[", "Set", "[", "Tuple", "[", "str", ",", "str", "]", "]", "]", ",", "List", "[", "Set", "[", "str", "]", "]", "]", ":", "\n", "    ", "all_table_column", "=", "set", "(", "table_column_properties", ".", "keys", "(", ")", ")", "\n", "dep_child2parent", "=", "{", "c", ":", "{", "p", "}", "for", "c", ",", "p", "in", "child2parent", ".", "items", "(", ")", "}", "\n", "table_column_order", "=", "process_order_helper", "(", "dep_child2parent", ",", "all_table_column", ")", "\n", "\n", "all_table", "=", "set", "(", "[", "k", "[", "0", "]", "for", "k", "in", "all_table_column", "]", ")", "\n", "table_child2parent", "=", "defaultdict", "(", "set", ")", "\n", "for", "k1", ",", "k2", "in", "child2parent", ".", "items", "(", ")", ":", "\n", "        ", "table_child2parent", "[", "k1", "[", "0", "]", "]", ".", "add", "(", "k2", "[", "0", "]", ")", "\n", "", "table_order", "=", "process_order_helper", "(", "table_child2parent", ",", "all_table", ")", "\n", "return", "table_column_order", ",", "table_order", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_all_db_info_path": [[185, 215], ["dbinfo.extract_table_column_properties_path", "collections.OrderedDict", "collections.OrderedDict", "sql_util.run.exec_db_path_", "collections.OrderedDict", "dbinfo.collapse_key", "dbinfo.collapse_key", "len", "zip", "len", "len", "[].append"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.extract_table_column_properties_path", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.run.exec_db_path_", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.collapse_key", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.collapse_key"], ["", "def", "get_all_db_info_path", "(", "sqlite_path", ":", "str", ")", "->", "Tuple", "[", "\n", "Dict", "[", "Tuple", "[", "str", ",", "str", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ",", "\n", "Dict", "[", "Tuple", "[", "str", ",", "str", "]", ",", "Tuple", "[", "str", ",", "str", "]", "]", ",", "\n", "Dict", "[", "Tuple", "[", "str", ",", "str", "]", ",", "List", "]", ",", "\n", "]", ":", "\n", "    ", "table_name2column_properties", ",", "child2parent", "=", "extract_table_column_properties_path", "(", "sqlite_path", ")", "\n", "\n", "table_name2content", "=", "OrderedDict", "(", ")", "\n", "for", "table_name", "in", "table_name2column_properties", ":", "\n", "        ", "result_type", ",", "result", "=", "exec_db_path_", "(", "sqlite_path", ",", "select_all_query", "%", "table_name", ")", "\n", "# ensure that table retrieval succeeds", "\n", "if", "result_type", "==", "'exception'", ":", "\n", "            ", "raise", "result", "\n", "", "table_name2content", "[", "table_name", "]", "=", "result", "\n", "\n", "", "table_name2column_name2elements", "=", "OrderedDict", "(", ")", "\n", "for", "table_name", "in", "table_name2column_properties", ":", "\n", "        ", "column_properties", ",", "content", "=", "table_name2column_properties", "[", "table_name", "]", ",", "table_name2content", "[", "table_name", "]", "\n", "# initialize the map from column name to list of elements", "\n", "table_name2column_name2elements", "[", "table_name", "]", "=", "OrderedDict", "(", "(", "column_name", ",", "[", "]", ")", "for", "column_name", "in", "column_properties", ")", "\n", "# ensure that the number of columns per row", "\n", "# is the number of columns", "\n", "if", "len", "(", "content", ")", ">", "0", ":", "\n", "            ", "assert", "len", "(", "content", "[", "0", "]", ")", "==", "len", "(", "column_properties", ")", "\n", "", "for", "row", "in", "content", ":", "\n", "            ", "for", "column_name", ",", "element", "in", "zip", "(", "column_properties", ",", "row", ")", ":", "\n", "                ", "table_name2column_name2elements", "[", "table_name", "]", "[", "column_name", "]", ".", "append", "(", "element", ")", "\n", "\n", "", "", "", "return", "collapse_key", "(", "table_name2column_properties", ")", ",", "child2parent", ",", "collapse_key", "(", "table_name2column_name2elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_table_size": [[217, 224], ["collections.OrderedDict", "table_column_elements.items", "len"], "function", ["None"], ["", "def", "get_table_size", "(", "table_column_elements", ":", "Dict", "[", "Tuple", "[", "str", ",", "str", "]", ",", "List", "]", ")", "->", "Dict", "[", "str", ",", "int", "]", ":", "\n", "    ", "table_name2size", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "elements", "in", "table_column_elements", ".", "items", "(", ")", ":", "\n", "        ", "table_name", "=", "k", "[", "0", "]", "\n", "if", "table_name", "not", "in", "table_name2size", ":", "\n", "            ", "table_name2size", "[", "table_name", "]", "=", "len", "(", "elements", ")", "\n", "", "", "return", "table_name2size", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_primary_keys": [[226, 234], ["collections.OrderedDict", "table_column_properties.items", "table_name2primary_keys[].append"], "function", ["None"], ["", "def", "get_primary_keys", "(", "table_column_properties", ":", "Dict", "[", "Tuple", "[", "str", ",", "str", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ")", "->", "Dict", "[", "str", ",", "List", "[", "str", "]", "]", ":", "\n", "    ", "table_name2primary_keys", "=", "OrderedDict", "(", ")", "\n", "for", "(", "table_name", ",", "column_name", ")", ",", "property", "in", "table_column_properties", ".", "items", "(", ")", ":", "\n", "        ", "if", "table_name", "not", "in", "table_name2primary_keys", ":", "\n", "            ", "table_name2primary_keys", "[", "table_name", "]", "=", "[", "]", "\n", "", "if", "property", "[", "'PK'", "]", "!=", "0", ":", "\n", "            ", "table_name2primary_keys", "[", "table_name", "]", ".", "append", "(", "column_name", ")", "\n", "", "", "return", "table_name2primary_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_indexing_from_db": [[236, 249], ["dbinfo.get_all_db_info_path", "sql_util.run.exec_db_path_", "random.shuffle", "zip"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_all_db_info_path", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.run.exec_db_path_"], ["", "def", "get_indexing_from_db", "(", "db_path", ":", "str", ",", "shuffle", "=", "True", ")", "->", "Dict", "[", "str", ",", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", "]", ":", "\n", "    ", "table_column_properties", ",", "_", ",", "_", "=", "get_all_db_info_path", "(", "db_path", ")", "\n", "all_tables_names", "=", "{", "t_c", "[", "0", "]", "for", "t_c", "in", "table_column_properties", "}", "\n", "\n", "table_name2indexes", "=", "{", "}", "\n", "for", "table_name", "in", "all_tables_names", ":", "\n", "        ", "column_names", "=", "[", "t_c", "[", "1", "]", "for", "t_c", "in", "table_column_properties", "if", "t_c", "[", "0", "]", "==", "table_name", "]", "\n", "selection_query", "=", "'select '", "+", "', '", ".", "join", "(", "[", "'\"%s\"'", "%", "c", "for", "c", "in", "column_names", "]", ")", "+", "' from \"'", "+", "table_name", "+", "'\";'", "\n", "retrieved_results", "=", "exec_db_path_", "(", "db_path", ",", "selection_query", ")", "[", "1", "]", "\n", "table_name2indexes", "[", "table_name", "]", "=", "[", "{", "name", ":", "e", "for", "name", ",", "e", "in", "zip", "(", "column_names", ",", "row", ")", "}", "for", "row", "in", "retrieved_results", "]", "\n", "if", "shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "table_name2indexes", "[", "table_name", "]", ")", "\n", "", "", "return", "table_name2indexes", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.print_table": [[251, 258], ["print", "len", "print", "template.format", "print", "template.format", "str"], "function", ["None"], ["", "def", "print_table", "(", "table_name", ",", "column_names", ",", "rows", ")", ":", "\n", "    ", "print", "(", "'table:'", ",", "table_name", ")", "\n", "num_cols", "=", "len", "(", "column_names", ")", "\n", "template", "=", "\" \"", ".", "join", "(", "[", "'{:20}'", "]", "*", "num_cols", ")", "\n", "print", "(", "template", ".", "format", "(", "*", "column_names", ")", ")", "\n", "for", "row", "in", "rows", ":", "\n", "        ", "print", "(", "template", ".", "format", "(", "*", "[", "str", "(", "r", ")", "for", "r", "in", "row", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.database_pprint": [[260, 272], ["dbinfo.get_all_db_info_path", "dbinfo.print_table", "tc2_.keys", "sql_util.run.exec_db_path_", "elements_by_column.append", "zip"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_all_db_info_path", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.print_table", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.run.exec_db_path_"], ["", "", "def", "database_pprint", "(", "path", ")", ":", "\n", "    ", "tc2_", ",", "_", ",", "_", "=", "get_all_db_info_path", "(", "path", ")", "\n", "table_column_names", "=", "[", "tc", "for", "tc", "in", "tc2_", ".", "keys", "(", ")", "]", "\n", "table_names", "=", "{", "t_c", "[", "0", "]", "for", "t_c", "in", "table_column_names", "}", "\n", "for", "table_name", "in", "table_names", ":", "\n", "        ", "column_names", "=", "[", "c", "for", "t", ",", "c", "in", "table_column_names", "if", "t", "==", "table_name", "]", "\n", "elements_by_column", "=", "[", "]", "\n", "for", "column_name", "in", "column_names", ":", "\n", "            ", "_", ",", "elements", "=", "exec_db_path_", "(", "path", ",", "'select {column_name} from {table_name}'", ".", "format", "(", "column_name", "=", "column_name", ",", "table_name", "=", "table_name", ")", ")", "\n", "elements_by_column", ".", "append", "(", "[", "e", "[", "0", "]", "for", "e", "in", "elements", "]", ")", "\n", "", "rows", "=", "[", "row", "for", "row", "in", "zip", "(", "*", "elements_by_column", ")", "]", "\n", "print_table", "(", "table_name", ",", "column_names", ",", "rows", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_total_size_from_indexes": [[275, 277], ["sum", "len", "table_name2indexes.items"], "function", ["None"], ["", "", "def", "get_total_size_from_indexes", "(", "table_name2indexes", ":", "Dict", "[", "str", ",", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", "]", ")", "->", "int", ":", "\n", "    ", "return", "sum", "(", "[", "len", "(", "v", ")", "for", "_", ",", "v", "in", "table_name2indexes", ".", "items", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_total_size_from_path": [[279, 282], ["dbinfo.get_all_db_info_path", "sum", "get_table_size().items", "dbinfo.get_table_size"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_all_db_info_path", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_table_size"], ["", "def", "get_total_size_from_path", "(", "path", ")", ":", "\n", "    ", "_", ",", "_", ",", "table_column2elements", "=", "get_all_db_info_path", "(", "path", ")", "\n", "return", "sum", "(", "[", "v", "for", "_", ",", "v", "in", "get_table_size", "(", "table_column2elements", ")", ".", "items", "(", ")", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.base.BaseFuzzer.__init__": [[6, 12], ["float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "elements", ":", "List", ",", "p", ":", "float", ",", "max_l0", ":", "float", "=", "float", "(", "'inf'", ")", ")", ":", "\n", "        ", "self", ".", "elements", "=", "[", "e", "for", "e", "in", "elements", "if", "e", "is", "not", "None", "]", "\n", "self", ".", "p", "=", "p", "if", "len", "(", "self", ".", "elements", ")", "!=", "0", "else", "1", "\n", "\n", "self", ".", "max_l0", "=", "max_l0", "\n", "self", ".", "rand_elements", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.base.BaseFuzzer.one_sample": [[13, 15], ["None"], "methods", ["None"], ["", "def", "one_sample", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.base.BaseFuzzer.n_examples": [[16, 18], ["base.BaseFuzzer.one_sample", "range"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.date.DateFuzzer.one_sample"], ["", "def", "n_examples", "(", "self", ",", "num_samples", ":", "int", ")", "->", "List", ":", "\n", "        ", "return", "[", "self", ".", "one_sample", "(", ")", "for", "_", "in", "range", "(", "num_samples", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.special.SemesterFuzzer.__init__": [[11, 14], ["fuzz.base.BaseFuzzer.__init__"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "elements", ",", "p", ")", ":", "\n", "        ", "super", "(", "SemesterFuzzer", ",", "self", ")", ".", "__init__", "(", "elements", ",", "p", ")", "\n", "self", ".", "semesters", "=", "[", "'Fall'", ",", "'Winter'", ",", "'Spring'", ",", "'Summer'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.special.SemesterFuzzer.one_sample": [[15, 17], ["random.choice"], "methods", ["None"], ["", "def", "one_sample", "(", "self", ")", ":", "\n", "        ", "return", "random", ".", "choice", "(", "self", ".", "semesters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.special.AdvisingTimeFuzzer.rand_time_in_day": [[21, 25], ["randtime.strftime", "random.random", "datetime.datetime.timedelta"], "methods", ["None"], ["    ", "def", "rand_time_in_day", "(", "self", ")", ":", "\n", "        ", "randtime", "=", "start", "+", "random", ".", "random", "(", ")", "*", "timedelta", "(", "days", "=", "1", ")", "\n", "s", "=", "randtime", ".", "strftime", "(", "'%H-%M-%S'", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.special.AdvisingTimeFuzzer.__init__": [[26, 28], ["fuzz.base.BaseFuzzer.__init__"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.Evaluator.__init__"], ["", "def", "__init__", "(", "self", ",", "elements", ",", "p", ")", ":", "\n", "        ", "super", "(", "AdvisingTimeFuzzer", ",", "self", ")", ".", "__init__", "(", "elements", ",", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.special.AdvisingTimeFuzzer.one_sample": [[29, 34], ["random.random", "random.choice", "special.AdvisingTimeFuzzer.rand_time_in_day"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.special.AdvisingTimeFuzzer.rand_time_in_day"], ["", "def", "one_sample", "(", "self", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "self", ".", "p", ":", "\n", "            ", "return", "random", ".", "choice", "(", "self", ".", "elements", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "rand_time_in_day", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.neighbor.count_table_occurences": [[25, 31], ["t.lower"], "function", ["None"], ["def", "count_table_occurences", "(", "query_toks", ":", "List", "[", "str", "]", ",", "table_names", ":", "List", "[", "str", "]", ")", "->", "int", ":", "\n", "    ", "counter", "=", "0", "\n", "for", "t", "in", "query_toks", ":", "\n", "        ", "if", "t", ".", "lower", "(", ")", "in", "table_names", ":", "\n", "            ", "counter", "+=", "1", "\n", "", "", "return", "counter", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.neighbor._other_toks_same_family": [[33, 42], ["v.lower", "v.upper", "result.append", "v.lower", "v.upper", "sql_util.parse.Token"], "function", ["None"], ["", "def", "_other_toks_same_family", "(", "tok", ":", "Token", ",", "family", ":", "Set", "[", "str", "]", ")", "->", "List", "[", "Token", "]", ":", "\n", "    ", "t", ",", "v", "=", "tok", ".", "ttype", ",", "tok", ".", "value", "\n", "result", "=", "[", "]", "\n", "if", "v", ".", "lower", "(", ")", "in", "family", "or", "v", ".", "upper", "(", ")", "in", "family", ":", "\n", "        ", "for", "s", "in", "family", ":", "\n", "            ", "if", "v", ".", "lower", "(", ")", "!=", "s", "and", "v", ".", "upper", "(", ")", "!=", "s", ":", "\n", "                ", "result", ".", "append", "(", "Token", "(", "t", ",", "s", ")", ")", "\n", "", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.neighbor._get_int_replacement": [[44, 55], ["int", "numpy.random.randint", "result.append", "result.append", "sql_util.parse.Token", "str", "set", "numpy.abs", "result.append", "numpy.abs"], "function", ["None"], ["", "def", "_get_int_replacement", "(", "tok", ":", "Token", ")", "->", "List", "[", "Token", "]", ":", "\n", "    ", "result", "=", "[", "]", "\n", "if", "tok", ".", "ttype", "==", "tokens", ".", "Token", ".", "Literal", ".", "Number", ".", "Integer", ":", "\n", "        ", "v", "=", "int", "(", "tok", ".", "value", ")", "\n", "random_ints", "=", "np", ".", "random", ".", "randint", "(", "-", "np", ".", "abs", "(", "v", ")", "-", "1", ",", "np", ".", "abs", "(", "v", ")", "+", "1", ",", "NUM_ALTERNATIVES", ")", "\n", "for", "r", "in", "random_ints", ":", "\n", "            ", "if", "r", "!=", "v", ":", "\n", "                ", "result", ".", "append", "(", "r", ")", "\n", "", "", "result", ".", "append", "(", "v", "+", "1", ")", "\n", "result", ".", "append", "(", "v", "-", "1", ")", "\n", "", "return", "[", "Token", "(", "tok", ".", "ttype", ",", "str", "(", "r", ")", ")", "for", "r", "in", "set", "(", "result", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.neighbor._get_float_replacement": [[57, 68], ["float", "result.append", "result.append", "sql_util.parse.Token", "str", "set", "range", "result.append", "numpy.random.random"], "function", ["None"], ["", "def", "_get_float_replacement", "(", "tok", ":", "Token", ")", "->", "List", "[", "Token", "]", ":", "\n", "    ", "result", "=", "[", "]", "\n", "if", "tok", ".", "ttype", "==", "tokens", ".", "Token", ".", "Literal", ".", "Number", ".", "Float", ":", "\n", "        ", "v", "=", "float", "(", "tok", ".", "value", ")", "\n", "random_vals", "=", "[", "np", ".", "random", ".", "random", "(", ")", "*", "2", "*", "v", "-", "v", "for", "_", "in", "range", "(", "NUM_ALTERNATIVES", ")", "]", "\n", "for", "r", "in", "random_vals", ":", "\n", "            ", "if", "r", "!=", "v", ":", "\n", "                ", "result", ".", "append", "(", "r", ")", "\n", "", "", "result", ".", "append", "(", "v", "+", "epsilon", ")", "\n", "result", ".", "append", "(", "v", "-", "epsilon", ")", "\n", "", "return", "[", "Token", "(", "tok", ".", "ttype", ",", "str", "(", "r", ")", ")", "for", "r", "in", "set", "(", "result", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.neighbor._get_string_replacement": [[70, 89], ["result.append", "range", "v.replace.replace", "range", "sql_util.parse.Token", "len", "result.append", "result.append", "result.append", "set"], "function", ["None"], ["", "def", "_get_string_replacement", "(", "tok", ":", "Token", ")", "->", "List", "[", "Token", "]", ":", "\n", "    ", "result", "=", "[", "]", "\n", "if", "tok", ".", "ttype", "==", "tokens", ".", "Token", ".", "Literal", ".", "String", ".", "Symbol", "or", "tok", ".", "ttype", "==", "tokens", ".", "Token", ".", "Literal", ".", "String", ".", "Single", ":", "\n", "        ", "v", "=", "tok", ".", "value", "\n", "result", ".", "append", "(", "v", "[", "0", "]", "+", "v", "[", "-", "1", "]", ")", "\n", "start", ",", "end", "=", "1", ",", "len", "(", "v", ")", "-", "1", "\n", "for", "span_start", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "            ", "for", "span_end", "in", "range", "(", "span_start", "+", "1", ",", "end", ")", ":", "\n", "                ", "v_new", "=", "v", "[", "0", "]", "+", "v", "[", "span_start", ":", "span_end", "]", "+", "v", "[", "-", "1", "]", "\n", "result", ".", "append", "(", "v_new", ")", "\n", "v_new", "=", "v", "[", ":", "span_start", "]", "+", "v", "[", "span_end", ":", "]", "\n", "result", ".", "append", "(", "v_new", ")", "\n", "\n", "", "", "v", "=", "v", ".", "replace", "(", "'%'", ",", "''", ")", "\n", "for", "add_percent_last", "in", "(", "'%'", ",", "''", ")", ":", "\n", "            ", "for", "add_percent_first", "in", "(", "'%'", ",", "''", ")", ":", "\n", "                ", "result", ".", "append", "(", "v", "[", "0", "]", "+", "add_percent_first", "+", "v", "[", "1", ":", "-", "1", "]", "+", "add_percent_last", "+", "v", "[", "-", "1", "]", ")", "\n", "", "", "result", "=", "[", "Token", "(", "tok", ".", "ttype", ",", "v_new", ")", "for", "v_new", "in", "set", "(", "result", ")", "if", "v_new", "!=", "v", "]", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.neighbor.get_possible_replacement": [[91, 104], ["neighbor._other_toks_same_family", "get_family_function"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.neighbor._other_toks_same_family"], ["", "def", "get_possible_replacement", "(", "tok", ":", "Token", ",", "column_names", ":", "Set", "[", "str", "]", ")", "->", "List", "[", "Token", "]", ":", "\n", "    ", "possible_replacement", "=", "[", "]", "\n", "for", "family", "in", "[", "AGG_OP", ",", "CMP_OP", ",", "ORDER", ",", "NUM_OP", ",", "LOGICAL_OP", ",", "LIKE_OP", ",", "IN_OP", ",", "column_names", "]", ":", "\n", "# [VAR_NAMES, AGG_OP, CMP_OP, ORDER, NUM_OP, LOGICAL_OP, LIKE_OP, IN_OP, table_names, column_names]:", "\n", "# in many cases using table name is semantically equivalenet", "\n", "# so we do not replace those", "\n", "        ", "possible_replacement", "+=", "_other_toks_same_family", "(", "tok", ",", "family", ")", "\n", "\n", "", "for", "get_family_function", "in", "[", "_get_int_replacement", ",", "_get_float_replacement", ",", "_get_string_replacement", "]", ":", "\n", "        ", "possible_replacement", "+=", "get_family_function", "(", "tok", ")", "\n", "\n", "", "return", "possible_replacement", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.neighbor.span_droppable": [[110, 130], ["len", "len", "len", "span[].value.lower", "span[].value.lower", "span[].value.lower", "span[].value.lower"], "function", ["None"], ["", "def", "span_droppable", "(", "span", ":", "List", "[", "Token", "]", ")", "->", "bool", ":", "\n", "# filter out white space", "\n", "    ", "span", "=", "[", "tok", "for", "tok", "in", "span", "if", "tok", ".", "ttype", "!=", "Whitespace", "]", "\n", "if", "len", "(", "span", ")", "==", "0", ":", "\n", "        ", "return", "False", "\n", "", "if", "len", "(", "span", ")", "==", "1", ":", "\n", "        ", "if", "span", "[", "0", "]", ".", "ttype", "==", "Keyword", ".", "Order", "and", "span", "[", "0", "]", ".", "value", ".", "lower", "(", ")", "==", "'asc'", ":", "\n", "            ", "return", "False", "\n", "", "if", "span", "[", "0", "]", ".", "ttype", "==", "Wildcard", ":", "\n", "            ", "return", "False", "\n", "", "if", "span", "[", "0", "]", ".", "ttype", "==", "Keyword", "and", "span", "[", "0", "]", ".", "value", ".", "lower", "(", ")", "==", "'as'", ":", "\n", "            ", "return", "False", "\n", "", "if", "span", "[", "0", "]", ".", "ttype", "==", "Punctuation", "and", "span", "[", "0", "]", ".", "value", "==", "';'", ":", "\n", "            ", "return", "False", "\n", "", "", "if", "len", "(", "span", ")", "==", "2", ":", "\n", "        ", "if", "span", "[", "0", "]", ".", "ttype", "==", "Name", "and", "span", "[", "1", "]", ".", "ttype", "==", "Punctuation", "and", "span", "[", "1", "]", ".", "value", "==", "'.'", ":", "\n", "            ", "return", "False", "\n", "", "if", "span", "[", "0", "]", ".", "value", ".", "lower", "(", ")", "==", "'as'", "and", "span", "[", "1", "]", ".", "value", ".", "lower", "(", ")", "==", "'result'", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.neighbor.drop_any_span": [[132, 143], ["len", "set", "range", "range", "neighbor.span_droppable", "sql_util.parse.join_tokens", "set.add"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.neighbor.span_droppable", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.join_tokens"], ["", "def", "drop_any_span", "(", "toks", ":", "List", "[", "Token", "]", ")", "->", "Set", "[", "str", "]", ":", "\n", "    ", "num_toks", "=", "len", "(", "toks", ")", "\n", "all_s", "=", "set", "(", ")", "\n", "for", "span_start", "in", "range", "(", "num_toks", ")", ":", "\n", "        ", "for", "span_end", "in", "range", "(", "span_start", "+", "1", ",", "num_toks", "+", "1", ")", ":", "\n", "            ", "removed_tok", "=", "toks", "[", "span_start", ":", "span_end", "]", "\n", "if", "span_droppable", "(", "removed_tok", ")", ":", "\n", "                ", "toks_left", "=", "toks", "[", ":", "span_start", "]", "+", "toks", "[", "span_end", ":", "]", "\n", "q", "=", "join_tokens", "(", "toks_left", ")", "\n", "all_s", ".", "add", "(", "q", ")", "\n", "", "", "", "return", "all_s", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.neighbor.rm_count_in_column": [[145, 147], ["re.sub"], "function", ["None"], ["", "def", "rm_count_in_column", "(", "s", ")", ":", "\n", "    ", "return", "re", ".", "sub", "(", "'COUNT\\s?\\((.*?)\\)'", ",", "'COUNT()'", ",", "s", ",", "flags", "=", "re", ".", "IGNORECASE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.neighbor.equivalent_count": [[149, 151], ["neighbor.rm_count_in_column", "neighbor.rm_count_in_column", "s1.strip", "s2.strip"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.neighbor.rm_count_in_column", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.neighbor.rm_count_in_column"], ["", "def", "equivalent_count", "(", "s1", ",", "s2", ")", ":", "\n", "    ", "return", "rm_count_in_column", "(", "s1", ".", "strip", "(", ")", ")", "==", "rm_count_in_column", "(", "s2", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.neighbor.generate_neighbor_queries_path": [[153, 178], ["sql_util.dbinfo.extract_table_column_properties_path", "set", "sql_util.parse.tokenize", "neighbor.drop_any_span", "set", "enumerate", "sql_util.writedb.init_empty_db_from_orig_", "os.unlink", "results.append", "neighbor.get_possible_replacement", "sql_util.run.can_execute_path", "neighbor.equivalent_count", "sql_util.parse.join_tokens", "set.add"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.extract_table_column_properties_path", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.tokenize", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.neighbor.drop_any_span", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.writedb.init_empty_db_from_orig_", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.neighbor.get_possible_replacement", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.run.can_execute_path", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.neighbor.equivalent_count", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.join_tokens"], ["", "def", "generate_neighbor_queries_path", "(", "sqlite_path", ":", "str", ",", "query", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "table2column2properties", ",", "_", "=", "extract_table_column_properties_path", "(", "sqlite_path", ")", "\n", "column_names", "=", "set", "(", "[", "column_name", "for", "table_name", "in", "table2column2properties", "\n", "for", "column_name", "in", "table2column2properties", "[", "table_name", "]", "]", ")", "\n", "sql_toks", "=", "tokenize", "(", "query", ")", "\n", "spans_dropped", "=", "drop_any_span", "(", "sql_toks", ")", "\n", "\n", "tok_replaced", "=", "set", "(", ")", "\n", "for", "idx", ",", "tok", "in", "enumerate", "(", "sql_toks", ")", ":", "\n", "        ", "if", "tok", ".", "ttype", "!=", "tokens", ".", "Whitespace", ":", "\n", "            ", "replacement_toks", "=", "get_possible_replacement", "(", "tok", ",", "column_names", ")", "\n", "for", "corrupted_tok", "in", "replacement_toks", ":", "\n", "                ", "perturbed_q", "=", "join_tokens", "(", "sql_toks", "[", ":", "idx", "]", "+", "[", "corrupted_tok", "]", "+", "sql_toks", "[", "idx", "+", "1", ":", "]", ")", "\n", "tok_replaced", ".", "add", "(", "perturbed_q", ")", "\n", "\n", "", "", "", "empty_path", "=", "init_empty_db_from_orig_", "(", "sqlite_path", ")", "\n", "all_neighbor_queries", "=", "spans_dropped", "|", "tok_replaced", "\n", "all_neighbor_queries", "=", "[", "q", "for", "q", "in", "all_neighbor_queries", "if", "can_execute_path", "(", "empty_path", ",", "q", ")", "]", "\n", "results", "=", "[", "]", "\n", "os", ".", "unlink", "(", "empty_path", ")", "\n", "for", "neighbor_query", "in", "all_neighbor_queries", ":", "\n", "        ", "if", "neighbor_query", "==", "query", "or", "equivalent_count", "(", "neighbor_query", ",", "query", ")", ":", "\n", "            ", "continue", "\n", "", "results", ".", "append", "(", "neighbor_query", ")", "\n", "", "return", "results", "\n", "", ""]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.fuzz.DBFuzzer.__init__": [[126, 136], ["sql_util.dbinfo.get_all_db_info_path", "sql_util.dbinfo.get_table_size", "sql_util.dbinfo.get_process_order", "sql_util.dbinfo.get_primary_keys", "collections.OrderedDict", "fuzz.DBFuzzer.initialize_fuzzer"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_all_db_info_path", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_table_size", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_process_order", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.dbinfo.get_primary_keys", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.fuzz.DBFuzzer.initialize_fuzzer"], ["    ", "def", "__init__", "(", "self", ",", "sqlite_path", ":", "str", ",", "tab_col2values", ":", "Dict", "[", "Tuple", "[", "str", ",", "str", "]", ",", "List", "[", "str", "]", "]", ",", "p", ":", "float", "=", "0.2", ")", ":", "\n", "        ", "self", ".", "sqlite_path", "=", "sqlite_path", "\n", "self", ".", "values", "=", "tab_col2values", "\n", "self", ".", "table_column_properties", ",", "self", ".", "child2parent", ",", "self", ".", "table_column2elements", "=", "get_all_db_info_path", "(", "sqlite_path", ")", "\n", "self", ".", "orig_table_name2table_size", "=", "get_table_size", "(", "self", ".", "table_column2elements", ")", "\n", "self", ".", "table_column_order", ",", "self", ".", "table_order", "=", "get_process_order", "(", "self", ".", "child2parent", ",", "self", ".", "table_column_properties", ")", "\n", "self", ".", "table_primary_keys", "=", "get_primary_keys", "(", "self", ".", "table_column_properties", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "fuzzers", "=", "OrderedDict", "(", ")", "\n", "self", ".", "initialize_fuzzer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.fuzz.DBFuzzer.get_fuzz": [[137, 197], ["random.random", "set", "int", "fuzz.rand_lin", "min", "f", "fuzz.DBFuzzer.orig_table_name2table_size.items", "random.random", "orig_order_column_names.append", "fuzz.random_choices", "random.random", "fuzz_order_column_names.append", "table2column2elements.keys", "column_fuzzer.one_sample", "range"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.fuzz.rand_lin", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.fuzz.random_choices", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.date.DateFuzzer.one_sample"], ["", "def", "get_fuzz", "(", "self", ",", "table_name2table_size", "=", "None", ")", "->", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "List", "]", "]", ":", "\n", "        ", "if", "table_name2table_size", "is", "None", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "table_name2table_size", "=", "{", "table_name", ":", "rand_lin", "(", "v", ",", "MIN_C", "*", "random", ".", "random", "(", ")", ")", "for", "table_name", ",", "v", "in", "self", ".", "orig_table_name2table_size", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "                ", "table_name2table_size", "=", "{", "}", "\n", "cur_level_size", "=", "1", "+", "MIN_C", "*", "random", ".", "random", "(", ")", "\n", "for", "tables", "in", "self", ".", "table_order", ":", "\n", "                    ", "for", "table_name", "in", "tables", ":", "\n", "                        ", "table_name2table_size", "[", "table_name", "]", "=", "cur_level_size", "\n", "", "cur_level_size", "*=", "4", "\n", "cur_level_size", "=", "min", "(", "cur_level_size", ",", "2500", ")", "\n", "\n", "", "", "", "table2column2elements", "=", "{", "}", "\n", "for", "table_names", "in", "self", ".", "table_order", ":", "\n", "            ", "for", "table_name", "in", "table_names", ":", "\n", "                ", "column2elements", "=", "{", "}", "\n", "table2column2elements", "[", "table_name", "]", "=", "column2elements", "\n", "primary_keys", "=", "self", ".", "table_primary_keys", "[", "table_name", "]", "\n", "\n", "# the column names in order", "\n", "# sometimes a column might refer to (foreign key) another column in the same table", "\n", "fuzz_order_column_names", "=", "[", "]", "\n", "for", "table_columns", "in", "self", ".", "table_column_order", ":", "\n", "                    ", "for", "table_column", "in", "table_columns", ":", "\n", "                        ", "if", "table_column", "[", "0", "]", "==", "table_name", ":", "\n", "                            ", "fuzz_order_column_names", ".", "append", "(", "table_column", "[", "1", "]", ")", "\n", "\n", "", "", "", "orig_order_column_names", "=", "[", "]", "\n", "for", "t", ",", "column_name", "in", "self", ".", "table_column_properties", ":", "\n", "                    ", "if", "t", "==", "table_name", ":", "\n", "                        ", "orig_order_column_names", ".", "append", "(", "column_name", ")", "\n", "\n", "", "", "unique_keys", "=", "set", "(", "[", "k", "for", "k", "in", "orig_order_column_names", "\n", "if", "self", ".", "table_column_properties", "[", "(", "table_name", ",", "k", ")", "]", "[", "'unique'", "]", "]", ")", "\n", "\n", "# table_size = 1 + int(random.random() * table_name2table_size[table_name])", "\n", "table_size", "=", "int", "(", "table_name2table_size", "[", "table_name", "]", ")", "\n", "for", "column_name", "in", "fuzz_order_column_names", ":", "\n", "                    ", "table_column", "=", "(", "table_name", ",", "column_name", ")", "\n", "if", "table_column", "in", "self", ".", "child2parent", ":", "\n", "                        ", "parent_table", ",", "parent_column", "=", "self", ".", "child2parent", "[", "table_column", "]", "\n", "assert", "parent_table", "in", "table2column2elements", ".", "keys", "(", ")", ",", "\"table %s should have been fuzzed\"", "%", "parent_table", "\n", "parent_elements", "=", "table2column2elements", "[", "parent_table", "]", "[", "parent_column", "]", "\n", "column2elements", "[", "column_name", "]", "=", "random_choices", "(", "parent_elements", ",", "k", "=", "table_size", ")", "\n", "", "else", ":", "\n", "                        ", "column_fuzzer", "=", "self", ".", "fuzzers", "[", "table_column", "]", "\n", "column2elements", "[", "column_name", "]", "=", "[", "column_fuzzer", ".", "one_sample", "(", ")", "for", "_", "in", "range", "(", "table_size", ")", "]", "\n", "# filter by unique primary key constraint", "\n", "# and restore the original column order", "\n", "# and filter unique columns to avoid repitition", "\n", "", "", "transformations", "=", "[", "\n", "(", "filter_by_primary", ",", "primary_keys", ")", ",", "\n", "(", "restore_order", ",", "orig_order_column_names", ")", ",", "\n", "(", "filter_by_unique_keys", ",", "unique_keys", ")", "\n", "]", "\n", "for", "f", ",", "arg", "in", "transformations", ":", "\n", "                    ", "column2elements", "=", "f", "(", "column2elements", ",", "arg", ")", "\n", "", "table2column2elements", "[", "table_name", "]", "=", "column2elements", "\n", "", "", "return", "table2column2elements", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.fuzz.DBFuzzer.initialize_fuzzer": [[198, 225], ["random.random", "random.choices", "list", "set", "random.random", "fuzz.get_fuzzer_from_type_str", "fuzz.get_fuzzer_from_type_str", "min", "random.random", "len", "len", "float", "len"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.fuzz.get_fuzzer_from_type_str", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.fuzz.get_fuzzer_from_type_str"], ["", "def", "initialize_fuzzer", "(", "self", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "            ", "self", ".", "p", "=", "0", "\n", "", "for", "k", "in", "self", ".", "table_column_order", "[", "0", "]", ":", "\n", "            ", "dtype_str", ",", "elements", "=", "self", ".", "table_column_properties", "[", "k", "]", "[", "'type'", "]", ",", "self", ".", "table_column2elements", "[", "k", "]", "\n", "elements", "=", "random", ".", "choices", "(", "elements", ",", "k", "=", "min", "(", "5", ",", "len", "(", "elements", ")", ")", ")", "+", "list", "(", "set", "(", "self", ".", "values", "[", "k", "]", ")", ")", "\n", "checked", "=", "self", ".", "table_column_properties", "[", "k", "]", "[", "'checked'", "]", "\n", "p", "=", "0", "if", "checked", "else", "self", ".", "p", "\n", "special_key", "=", "(", "self", ".", "sqlite_path", ",", "k", "[", "0", "]", ",", "k", "[", "1", "]", ")", "\n", "if", "special_key", "in", "special_cases", ":", "\n", "                ", "self", ".", "fuzzers", "[", "k", "]", "=", "special_cases", "[", "special_key", "]", "(", "elements", ",", "p", ")", "\n", "", "else", ":", "\n", "                ", "if", "special_key", "in", "corrected_keys", ":", "\n", "                    ", "dtype_str", "=", "corrected_keys", "[", "special_key", "]", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                    ", "table_name", ",", "column_name", "=", "k", "\n", "primary_keys", "=", "self", ".", "table_primary_keys", "[", "table_name", "]", "\n", "max_l0", "=", "random", ".", "random", "(", ")", "*", "30", "\n", "\n", "if", "column_name", "in", "primary_keys", ":", "\n", "                        ", "if", "len", "(", "primary_keys", ")", "==", "1", ":", "\n", "                            ", "max_l0", "=", "float", "(", "'inf'", ")", "\n", "", "if", "len", "(", "primary_keys", ")", ">", "1", ":", "\n", "                            ", "max_l0", "=", "30", "\n", "", "", "self", ".", "fuzzers", "[", "k", "]", "=", "get_fuzzer_from_type_str", "(", "dtype_str", ",", "elements", ",", "p", ",", "max_l0", "=", "max_l0", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "fuzzers", "[", "k", "]", "=", "get_fuzzer_from_type_str", "(", "dtype_str", ",", "elements", ",", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.fuzz.random_choices": [[31, 36], ["len", "random.randint", "range", "range", "len"], "function", ["None"], ["def", "random_choices", "(", "l", ":", "List", "[", "E", "]", ",", "k", ":", "int", ")", "->", "List", "[", "E", "]", ":", "\n", "    ", "if", "len", "(", "l", ")", "==", "0", ":", "\n", "        ", "return", "[", "None", "for", "_", "in", "range", "(", "k", ")", "]", "\n", "", "idxes", "=", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "l", ")", "-", "1", ")", "for", "_", "in", "range", "(", "k", ")", "]", "\n", "return", "[", "l", "[", "idx", "]", "for", "idx", "in", "idxes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.fuzz.get_fuzzer_from_type_str": [[40, 81], ["float", "dtype_str.lower.lower", "fuzz.time.TimeFuzzer", "fuzz.string.StringFuzzer", "fuzz.date.DateFuzzer", "fuzz.bool.BoolFuzzer", "fuzz.bool.BitFuzzer", "fuzz.number.NumberFuzzer", "fuzz.number.isint", "fuzz.number.NumberFuzzer", "int", "fuzz.number.NumberFuzzer", "fuzz.string.StringFuzzer", "random.random", "len", "dtype_str[].split", "len", "len", "len", "dtype_str.lower.index", "dtype_str.lower.index"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.number.isint"], ["", "def", "get_fuzzer_from_type_str", "(", "dtype_str", ":", "str", ",", "elements", ":", "List", ",", "p", "=", "0.5", ",", "max_l0", "=", "float", "(", "'inf'", ")", ")", "->", "BaseFuzzer", ":", "\n", "    ", "elements", "=", "[", "e", "for", "e", "in", "elements", "if", "random", ".", "random", "(", ")", ">", "ELEMENT_DROPOUT", "]", "\n", "dtype_str", "=", "dtype_str", ".", "lower", "(", ")", "\n", "if", "dtype_str", "==", "'time'", ":", "\n", "        ", "return", "TimeFuzzer", "(", "elements", ",", "p", "=", "p", ",", "max_l0", "=", "max_l0", ")", "\n", "", "if", "dtype_str", "==", "''", "or", "dtype_str", "==", "'blob'", ":", "\n", "        ", "return", "StringFuzzer", "(", "elements", ",", "p", "=", "p", ",", "max_l0", "=", "max_l0", ")", "\n", "", "if", "'date'", "in", "dtype_str", "or", "'timestamp'", "in", "dtype_str", ":", "\n", "        ", "if", "len", "(", "elements", ")", ">", "0", "and", "isint", "(", "elements", "[", "0", "]", ")", ":", "\n", "            ", "return", "NumberFuzzer", "(", "elements", ",", "p", "=", "p", ",", "max_l0", "=", "max_l0", ",", "scale", "=", "4", ")", "\n", "", "return", "DateFuzzer", "(", "elements", ",", "p", "=", "p", ",", "max_l0", "=", "max_l0", ")", "\n", "", "if", "'bool'", "in", "dtype_str", ":", "\n", "        ", "return", "BoolFuzzer", "(", "elements", ",", "p", "=", "p", ")", "\n", "", "if", "'bit'", "in", "dtype_str", ":", "\n", "        ", "return", "BitFuzzer", "(", "elements", ",", "p", "=", "p", ")", "\n", "", "if", "'year'", "in", "dtype_str", ":", "\n", "        ", "return", "NumberFuzzer", "(", "elements", ",", "p", "=", "p", ",", "scale", "=", "4", ",", "max_l0", "=", "max_l0", ")", "\n", "", "unsigned", "=", "False", "\n", "if", "'unsigned'", "in", "dtype_str", ":", "\n", "        ", "unsigned", "=", "True", "\n", "", "args", "=", "[", "]", "\n", "if", "'('", "in", "dtype_str", ":", "\n", "        ", "args", "=", "[", "int", "(", "x", ")", "for", "x", "in", "dtype_str", "[", "dtype_str", ".", "index", "(", "'('", ")", "+", "1", ":", "dtype_str", ".", "index", "(", "')'", ")", "]", ".", "split", "(", "','", ")", "]", "\n", "\n", "", "for", "s", "in", "number_dtype_str", ":", "\n", "        ", "if", "s", "in", "dtype_str", ":", "\n", "            ", "scale", ",", "precision", "=", "10", ",", "0", "\n", "if", "len", "(", "args", ")", "!=", "0", ":", "\n", "                ", "scale", "=", "args", "[", "0", "]", "\n", "if", "len", "(", "args", ")", ">", "1", ":", "\n", "                    ", "scale", "-=", "args", "[", "1", "]", "\n", "precision", "=", "args", "[", "1", "]", "\n", "", "", "is_int", "=", "'int'", "in", "dtype_str", "\n", "return", "NumberFuzzer", "(", "elements", ",", "p", ",", "max_l0", "=", "max_l0", ",", "scale", "=", "scale", ",", "unsigned", "=", "unsigned", ",", "is_int", "=", "is_int", ",", "precision", "=", "precision", ")", "\n", "\n", "", "", "for", "s", "in", "char_dtype_str", ":", "\n", "        ", "if", "s", "in", "dtype_str", ":", "\n", "            ", "length", "=", "20", "\n", "if", "len", "(", "args", ")", "!=", "0", ":", "\n", "                ", "length", "=", "args", "[", "0", "]", "\n", "", "return", "StringFuzzer", "(", "elements", ",", "p", ",", "max_l0", "=", "max_l0", ",", "length", "=", "length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.fuzz.filter_by_primary": [[87, 104], ["len", "range", "collections.OrderedDict", "column2elements.items", "len", "set", "set", "tuple", "existing_keys.add", "filtered_idx.add", "range"], "function", ["None"], ["", "", "", "def", "filter_by_primary", "(", "column2elements", ":", "Dict", "[", "str", ",", "List", "]", ",", "primary_keys", ":", "List", "[", "str", "]", ")", "->", "Dict", "[", "str", ",", "List", "]", ":", "\n", "    ", "if", "len", "(", "primary_keys", ")", "==", "0", ":", "\n", "        ", "return", "column2elements", "\n", "", "num_elements", "=", "len", "(", "column2elements", "[", "primary_keys", "[", "0", "]", "]", ")", "\n", "filtered_idx", ",", "existing_keys", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "for", "idx", "in", "range", "(", "num_elements", ")", ":", "\n", "        ", "key", "=", "tuple", "(", "[", "column2elements", "[", "k", "]", "[", "idx", "]", "for", "k", "in", "primary_keys", "]", ")", "\n", "if", "key", "in", "existing_keys", ":", "\n", "            ", "filtered_idx", ".", "add", "(", "idx", ")", "\n", "continue", "\n", "", "existing_keys", ".", "add", "(", "key", ")", "\n", "\n", "", "filtered_column2elements", "=", "OrderedDict", "(", ")", "\n", "for", "column_name", ",", "elements", "in", "column2elements", ".", "items", "(", ")", ":", "\n", "        ", "filtered_column2elements", "[", "column_name", "]", "=", "[", "elements", "[", "idx", "]", "for", "idx", "in", "range", "(", "num_elements", ")", "if", "idx", "not", "in", "filtered_idx", "]", "\n", "", "return", "filtered_column2elements", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.fuzz.filter_by_unique_keys": [[106, 111], ["fuzz.filter_by_primary"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.fuzz.filter_by_primary"], ["", "def", "filter_by_unique_keys", "(", "column2elements", ":", "Dict", "[", "str", ",", "List", "]", ",", "unique_keys", ":", "Set", "[", "str", "]", ")", "->", "Dict", "[", "str", ",", "List", "]", ":", "\n", "    ", "for", "k", "in", "unique_keys", ":", "\n", "        ", "column2elements", "=", "filter_by_primary", "(", "column2elements", ",", "[", "k", "]", ")", "\n", "", "return", "column2elements", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.fuzz.restore_order": [[113, 118], ["collections.OrderedDict"], "function", ["None"], ["", "def", "restore_order", "(", "column2elements", ":", "Dict", "[", "str", ",", "List", "]", ",", "column_order", ":", "List", "[", "str", "]", ")", "->", "Dict", "[", "str", ",", "List", "]", ":", "\n", "    ", "result", "=", "OrderedDict", "(", ")", "\n", "for", "column", "in", "column_order", ":", "\n", "        ", "result", "[", "column", "]", "=", "column2elements", "[", "column", "]", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.fuzz.rand_lin": [[120, 122], ["int", "random.random", "random.random"], "function", ["None"], ["", "def", "rand_lin", "(", "x", ":", "int", ",", "min_c", ":", "int", "=", "MIN_C", ")", "->", "int", ":", "\n", "    ", "return", "min_c", "+", "int", "(", "random", ".", "random", "(", ")", "*", "ADDITIVE_C", "+", "x", "*", "(", "random", ".", "random", "(", ")", "*", "MULTIPLICATIVE_C", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.fuzz.fuzz_db_wrapper": [[227, 234], ["print", "fuzz.DBFuzzer", "DBFuzzer.get_fuzz", "sql_util.writedb.write_db_path", "os.path.exists"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.fuzz.DBFuzzer.get_fuzz", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.writedb.write_db_path"], ["", "", "", "", "", "def", "fuzz_db_wrapper", "(", "args", ":", "Tuple", "[", "str", ",", "str", ",", "Dict", "[", "Tuple", "[", "str", ",", "str", "]", ",", "List", "[", "str", "]", "]", "]", ")", ":", "\n", "    ", "orig_path", ",", "target_path", ",", "tab_col2values", "=", "args", "\n", "print", "(", "'now fuzzing based on database %s, target path %s.'", "%", "(", "orig_path", ",", "target_path", ")", ")", "\n", "dbfuzzer", "=", "DBFuzzer", "(", "orig_path", ",", "tab_col2values", ")", "\n", "tables", "=", "dbfuzzer", ".", "get_fuzz", "(", ")", "\n", "write_db_path", "(", "orig_path", ",", "target_path", ",", "tables", ",", "overwrite", "=", "True", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "target_path", ")", ",", "'path %s does not exists.'", "%", "target_path", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.fuzz.generate_random_db_with_queries_wrapper": [[236, 241], ["list", "sql_util.value_typing.type_values_w_db", "fuzz.fuzz_db_wrapper", "itertools.chain", "sql_util.parse.extract_typed_value_in_comparison_from_query"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.sql_util.value_typing.type_values_w_db", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.fuzz.fuzz_db_wrapper", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_typed_value_in_comparison_from_query"], ["", "def", "generate_random_db_with_queries_wrapper", "(", "args", ":", "Tuple", "[", "str", ",", "str", ",", "List", "[", "str", "]", ",", "Dict", "[", "str", ",", "str", "]", "]", ")", ":", "\n", "    ", "orig_path", ",", "target_path", ",", "queries", ",", "_", "=", "args", "\n", "typed_values", "=", "list", "(", "chain", "(", "*", "[", "extract_typed_value_in_comparison_from_query", "(", "query", ")", "for", "query", "in", "queries", "]", ")", ")", "\n", "tab_col2values", "=", "type_values_w_db", "(", "orig_path", ",", "typed_values", ",", "loose", "=", "True", ")", "\n", "fuzz_db_wrapper", "(", "(", "orig_path", ",", "target_path", ",", "tab_col2values", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.number.NumberFuzzer.__init__": [[50, 71], ["float", "fuzz.base.BaseFuzzer.__init__", "max", "min", "max", "min", "len", "min", "number.tofloat", "max"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.number.tofloat"], ["    ", "def", "__init__", "(", "self", ",", "elements", ",", "p", "=", "0.5", ",", "max_l0", "=", "float", "(", "'inf'", ")", ",", "scale", "=", "10", ",", "unsigned", "=", "False", ",", "is_int", "=", "False", ",", "precision", "=", "0", ")", ":", "\n", "        ", "super", "(", "NumberFuzzer", ",", "self", ")", ".", "__init__", "(", "elements", ",", "p", ",", "max_l0", ")", "\n", "self", ".", "elements", "=", "[", "x", "for", "x", "in", "[", "tofloat", "(", "x", ")", "for", "x", "in", "self", ".", "elements", "]", "if", "x", "is", "not", "None", "]", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "min", ",", "self", ".", "max", "=", "-", "10", "**", "scale", "+", "epsilon", ",", "10", "**", "scale", "-", "epsilon", "\n", "if", "unsigned", ":", "\n", "            ", "self", ".", "min", "=", "0", "\n", "self", ".", "max", "*=", "2", "\n", "\n", "", "if", "len", "(", "self", ".", "elements", ")", "!=", "0", ":", "\n", "            ", "self", ".", "list_min", ",", "self", ".", "list_max", "=", "min", "(", "self", ".", "elements", ")", ",", "max", "(", "self", ".", "elements", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "list_min", ",", "self", ".", "list_max", "=", "self", ".", "min", ",", "self", ".", "max", "\n", "", "self", ".", "valid_sample_from_elements", "=", "self", ".", "list_min", ">", "-", "MAX", "and", "self", ".", "list_max", "<", "MAX", "\n", "self", ".", "min", "=", "max", "(", "self", ".", "min", ",", "-", "MAX", ")", "\n", "self", ".", "max", "=", "min", "(", "self", ".", "max", ",", "MAX", ")", "\n", "self", ".", "list_min", "=", "max", "(", "self", ".", "list_min", ",", "-", "MAX", ")", "\n", "self", ".", "list_max", "=", "min", "(", "self", ".", "max", ",", "MAX", ")", "\n", "\n", "self", ".", "is_int", "=", "is_int", "\n", "self", ".", "precision", "=", "precision", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.number.NumberFuzzer.one_sample": [[72, 91], ["random.choice", "number.perturb", "number.perturb_float", "len", "random.random", "len", "number.NumberFuzzer.rand_elements.append", "random.choice", "int", "random.random", "len", "random.random"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.time.perturb", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.number.perturb_float"], ["", "def", "one_sample", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "elements", ")", "==", "0", "or", "random", ".", "random", "(", ")", "<", "self", ".", "p", "or", "not", "self", ".", "valid_sample_from_elements", ":", "\n", "            ", "start", ",", "end", "=", "(", "self", ".", "min", ",", "self", ".", "max", ")", "if", "(", "random", ".", "random", "(", ")", "<", "self", ".", "p", "or", "len", "(", "self", ".", "elements", ")", "<=", "1", ")", "else", "(", "self", ".", "list_min", ",", "self", ".", "list_max", ")", "\n", "\n", "if", "len", "(", "self", ".", "rand_elements", ")", "<=", "self", ".", "max_l0", ":", "\n", "                ", "result", "=", "random", ".", "random", "(", ")", "*", "(", "end", "-", "start", ")", "+", "start", "\n", "self", ".", "rand_elements", ".", "append", "(", "result", ")", "\n", "", "else", ":", "\n", "                ", "result", "=", "random", ".", "choice", "(", "self", ".", "rand_elements", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "result", "=", "random", ".", "choice", "(", "self", ".", "elements", ")", "\n", "\n", "", "if", "self", ".", "is_int", ":", "\n", "            ", "return", "perturb", "(", "int", "(", "result", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "perturb_float", "(", "result", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.number.isint": [[8, 14], ["int"], "function", ["None"], ["def", "isint", "(", "x", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "int", "(", "x", ")", "\n", "return", "True", "\n", "", "except", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.number.tofloat": [[16, 21], ["float"], "function", ["None"], ["", "", "def", "tofloat", "(", "x", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "return", "float", "(", "x", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.number.perturb": [[23, 33], ["random.random", "random.random", "random.random", "random.random"], "function", ["None"], ["", "", "def", "perturb", "(", "x", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", "<", "1.", "/", "6", ":", "\n", "        ", "return", "x", "+", "1", "\n", "", "elif", "random", ".", "random", "(", ")", "<", "1.", "/", "5", ":", "\n", "        ", "return", "x", "-", "1", "\n", "", "elif", "random", ".", "random", "(", ")", "<", "1.", "/", "4", ":", "\n", "        ", "return", "x", "+", "2", "\n", "", "elif", "random", ".", "random", "(", ")", "<", "1.", "/", "3", ":", "\n", "        ", "return", "x", "-", "2", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.number.perturb_float": [[35, 45], ["random.random", "random.random", "random.random", "random.random"], "function", ["None"], ["", "def", "perturb_float", "(", "x", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", "<", "1.", "/", "6", ":", "\n", "        ", "return", "x", "+", "0.01", "\n", "", "elif", "random", ".", "random", "(", ")", "<", "1.", "/", "5", ":", "\n", "        ", "return", "x", "-", "0.01", "\n", "", "elif", "random", ".", "random", "(", ")", "<", "1.", "/", "4", ":", "\n", "        ", "return", "x", "+", "0.02", "\n", "", "elif", "random", ".", "random", "(", ")", "<", "1.", "/", "3", ":", "\n", "        ", "return", "x", "-", "0.02", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.bool.BoolFuzzer.__init__": [[7, 9], ["fuzz.base.BaseFuzzer.__init__"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "elements", ",", "p", ")", ":", "\n", "        ", "super", "(", "BoolFuzzer", ",", "self", ")", ".", "__init__", "(", "elements", ",", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.bool.BoolFuzzer.one_sample": [[10, 15], ["random.choice", "random.random", "len", "random.random"], "methods", ["None"], ["", "def", "one_sample", "(", "self", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", "or", "len", "(", "self", ".", "elements", ")", "==", "0", ":", "\n", "            ", "return", "random", ".", "random", "(", ")", "<", "0.5", "\n", "", "else", ":", "\n", "            ", "return", "random", ".", "choice", "(", "self", ".", "elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.bool.BitFuzzer.__init__": [[19, 21], ["fuzz.base.BaseFuzzer.__init__"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "elements", ",", "p", ")", ":", "\n", "        ", "super", "(", "BitFuzzer", ",", "self", ")", ".", "__init__", "(", "elements", ",", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.bool.BitFuzzer.one_sample": [[22, 27], ["random.choice", "random.random", "len", "random.random"], "methods", ["None"], ["", "def", "one_sample", "(", "self", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", "or", "len", "(", "self", ".", "elements", ")", "==", "0", ":", "\n", "            ", "return", "1", "if", "random", ".", "random", "(", ")", "<", "0.5", "else", "0", "\n", "", "else", ":", "\n", "            ", "return", "random", ".", "choice", "(", "self", ".", "elements", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.time.TimeFuzzer.__init__": [[26, 29], ["float", "fuzz.base.BaseFuzzer.__init__"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "elements", ",", "p", "=", "0.5", ",", "max_l0", "=", "float", "(", "'inf'", ")", ")", ":", "\n", "        ", "super", "(", "TimeFuzzer", ",", "self", ")", ".", "__init__", "(", "elements", ",", "p", ",", "max_l0", ")", "\n", "self", ".", "elements", "=", "elements", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.time.TimeFuzzer.one_sample": [[30, 39], ["random.choice", "time.random_time", "random.random", "len", "random.random", "time.perturb"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.time.random_time", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.time.perturb"], ["", "def", "one_sample", "(", "self", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "self", ".", "p", "and", "len", "(", "self", ".", "elements", ")", "!=", "0", ":", "\n", "            ", "t", "=", "random", ".", "choice", "(", "self", ".", "elements", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "                ", "return", "perturb", "(", "t", ")", "\n", "", "else", ":", "\n", "                ", "return", "t", "\n", "", "", "else", ":", "\n", "            ", "return", "random_time", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.time.random_time": [[12, 14], ["random.choice"], "function", ["None"], ["def", "random_time", "(", ")", ":", "\n", "    ", "return", "':'", ".", "join", "(", "[", "random", ".", "choice", "(", "l", ")", "for", "l", "in", "space", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.time.perturb": [[16, 21], ["random.randint", "int", "t.split", "range"], "function", ["None"], ["", "def", "perturb", "(", "t", ")", ":", "\n", "    ", "nums", "=", "[", "int", "(", "x", ")", "for", "x", "in", "t", ".", "split", "(", "':'", ")", "]", "\n", "change_digit", "=", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "nums", "[", "change_digit", "]", "=", "nums", "[", "change_digit", "]", "-", "1", "\n", "return", "':'", ".", "join", "(", "[", "space", "[", "i", "]", "[", "nums", "[", "i", "]", "]", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.string.StringFuzzer.__init__": [[34, 53], ["fuzz.base.BaseFuzzer.__init__", "set", "random.random", "str", "string.represents_int", "len", "len", "string.StringFuzzer.elements.append", "int", "string.StringFuzzer.elements.append", "string.StringFuzzer.elements.append", "min", "e.replace", "str", "str", "max"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.string.represents_int"], ["    ", "def", "__init__", "(", "self", ",", "elements", ",", "p", ",", "max_l0", ",", "length", "=", "20", ")", ":", "\n", "        ", "super", "(", "StringFuzzer", ",", "self", ")", ".", "__init__", "(", "elements", ",", "p", ",", "max_l0", ")", "\n", "self", ".", "allow_none", "=", "random", ".", "random", "(", ")", "<", "0.1", "\n", "self", ".", "length", "=", "length", "\n", "self", ".", "elements", "=", "[", "str", "(", "e", ")", "for", "e", "in", "self", ".", "elements", "]", "\n", "for", "e", "in", "self", ".", "elements", ":", "\n", "            ", "if", "'%'", "in", "e", ":", "\n", "                ", "self", ".", "elements", ".", "append", "(", "e", ".", "replace", "(", "'%'", ",", "''", ")", ")", "\n", "\n", "", "", "for", "s", "in", "set", "(", "self", ".", "elements", ")", ":", "\n", "            ", "if", "represents_int", "(", "s", ")", ":", "\n", "                ", "i", "=", "int", "(", "s", ")", "\n", "self", ".", "elements", ".", "append", "(", "str", "(", "i", "+", "1", ")", ")", "\n", "self", ".", "elements", ".", "append", "(", "str", "(", "i", "-", "1", ")", ")", "\n", "", "", "all_lengths", "=", "[", "len", "(", "e", ")", "for", "e", "in", "self", ".", "elements", "]", "\n", "if", "len", "(", "all_lengths", ")", "!=", "0", ":", "\n", "            ", "self", ".", "min_length", ",", "self", ".", "max_length", "=", "min", "(", "all_lengths", ")", ",", "max", "(", "all_lengths", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "min_length", ",", "self", ".", "max_length", "=", "0", ",", "20", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.string.StringFuzzer.one_sample": [[55, 70], ["random.random", "random.choice", "random.random", "string.contaminate", "len", "random.randint", "string.rand_string", "string.StringFuzzer.rand_elements.append", "random.choice"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.string.contaminate", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.string.rand_string"], ["", "", "def", "one_sample", "(", "self", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "if", "len", "(", "self", ".", "rand_elements", ")", "<=", "self", ".", "max_l0", ":", "\n", "                ", "length", "=", "random", ".", "randint", "(", "self", ".", "min_length", ",", "self", ".", "max_length", ")", "\n", "r", "=", "rand_string", "(", "length", ")", "\n", "self", ".", "rand_elements", ".", "append", "(", "r", ")", "\n", "result", "=", "r", "\n", "", "else", ":", "\n", "                ", "result", "=", "random", ".", "choice", "(", "self", ".", "rand_elements", ")", "\n", "", "", "else", ":", "\n", "            ", "result", "=", "random", ".", "choice", "(", "self", ".", "elements", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "return", "contaminate", "(", "result", ")", "\n", "", "else", ":", "\n", "            ", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.string.represents_int": [[7, 13], ["int"], "function", ["None"], ["def", "represents_int", "(", "s", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "int", "(", "s", ")", "\n", "return", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.string.rand_string": [[15, 17], ["random.choice", "range"], "function", ["None"], ["", "", "def", "rand_string", "(", "length", ":", "int", ")", "->", "str", ":", "\n", "    ", "return", "''", ".", "join", "(", "[", "random", ".", "choice", "(", "CHARSET", ")", "for", "_", "in", "range", "(", "length", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.string.contaminate": [[19, 30], ["random.random", "string.rand_string", "string.rand_string", "string.rand_string", "string.rand_string"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.string.rand_string", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.string.rand_string", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.string.rand_string", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.string.rand_string"], ["", "def", "contaminate", "(", "s", ":", "str", ")", "->", "str", ":", "\n", "    ", "p", "=", "random", ".", "random", "(", ")", "\n", "if", "p", "<", "0.2", ":", "\n", "        ", "return", "s", "+", "rand_string", "(", "5", ")", "\n", "", "if", "p", "<", "0.4", ":", "\n", "        ", "return", "rand_string", "(", "5", ")", "+", "s", "\n", "", "if", "p", "<", "0.6", ":", "\n", "        ", "return", "rand_string", "(", "3", ")", "+", "s", "+", "rand_string", "(", "3", ")", "\n", "", "if", "p", "<", "0.8", ":", "\n", "        ", "return", "s", "[", ":", "-", "1", "]", "\n", "", "return", "s", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.date.DateFuzzer.__init__": [[20, 45], ["float", "fuzz.base.BaseFuzzer.__init__", "utils.data_parser.date_parser", "len", "type", "element_dates.append", "min", "max"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.utils.data_parser.date_parser"], ["    ", "def", "__init__", "(", "self", ",", "elements", ",", "p", "=", "0.5", ",", "max_l0", "=", "float", "(", "'inf'", ")", ")", ":", "\n", "        ", "super", "(", "DateFuzzer", ",", "self", ")", ".", "__init__", "(", "elements", ",", "p", ",", "max_l0", ")", "\n", "\n", "self", ".", "template", "=", "'%Y-%m-%d %H:%M:%S'", "\n", "template_found", "=", "False", "\n", "self", ".", "orig_type", "=", "str", "\n", "\n", "element_dates", "=", "[", "]", "\n", "for", "element", "in", "elements", ":", "\n", "            ", "if", "type", "(", "element", ")", "==", "int", ":", "\n", "                ", "self", ".", "orig_type", "=", "int", "\n", "", "parse_result", "=", "date_parser", "(", "element", ")", "\n", "if", "parse_result", "[", "'value'", "]", "is", "not", "None", "and", "not", "template_found", ":", "\n", "                ", "self", ".", "template", "=", "parse_result", "[", "'template'", "]", "\n", "template_found", "=", "True", "\n", "", "if", "parse_result", "[", "'value'", "]", "is", "not", "None", ":", "\n", "                ", "element_dates", ".", "append", "(", "parse_result", "[", "'value'", "]", ")", "\n", "", "", "self", ".", "element_dates", "=", "element_dates", "\n", "\n", "if", "len", "(", "self", ".", "element_dates", ")", "!=", "0", ":", "\n", "            ", "self", ".", "min_date", ",", "self", ".", "max_date", "=", "min", "(", "self", ".", "element_dates", ")", ",", "max", "(", "self", ".", "element_dates", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "min_date", ",", "self", ".", "max_date", "=", "START", ",", "END", "\n", "", "if", "self", ".", "min_date", "==", "self", ".", "max_date", ":", "\n", "            ", "self", ".", "min_date", ",", "self", ".", "max_date", "=", "START", ",", "END", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.date.DateFuzzer.one_sample": [[46, 75], ["date.random_date", "random_date.strftime", "date.DateFuzzer.orig_type", "date.DateFuzzer.rand_elements.append", "random.choice", "len", "random.choice", "utils.data_parser.num2month.items", "random.random", "len", "s.replace.replace.replace", "s.replace.replace.replace", "random.random", "len"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.date.random_date"], ["", "", "def", "one_sample", "(", "self", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", "and", "len", "(", "self", ".", "elements", ")", "!=", "0", ":", "\n", "            ", "return", "random", ".", "choice", "(", "self", ".", "elements", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "rand_elements", ")", ">=", "self", ".", "max_l0", ":", "\n", "            ", "return", "random", ".", "choice", "(", "self", ".", "rand_elements", ")", "\n", "\n", "", "start", ",", "end", "=", "(", "START", ",", "END", ")", "if", "(", "random", ".", "random", "(", ")", "<", "self", ".", "p", "or", "len", "(", "self", ".", "element_dates", ")", "<=", "1", ")", "else", "(", "self", ".", "min_date", ",", "self", ".", "max_date", ")", "\n", "r", "=", "random_date", "(", "start", ",", "end", ")", "\n", "s", "=", "r", ".", "strftime", "(", "self", ".", "template", ")", "\n", "if", "self", ".", "template", "==", "'%d-%m-%Y'", ":", "\n", "            ", "for", "num", ",", "month", "in", "num2month", ".", "items", "(", ")", ":", "\n", "                ", "s", "=", "s", ".", "replace", "(", "'-'", "+", "num", "+", "'-'", ",", "'-'", "+", "month", "+", "'-'", ")", "\n", "\n", "", "", "if", "self", ".", "orig_type", "==", "str", ":", "\n", "            ", "start_w0", "=", "False", "\n", "for", "e", "in", "self", ".", "elements", ":", "\n", "                ", "if", "'-0'", "in", "e", "or", "e", "[", "0", "]", "==", "'0'", ":", "\n", "                    ", "start_w0", "=", "True", "\n", "break", "\n", "", "", "if", "not", "start_w0", ":", "\n", "                ", "s", "=", "s", ".", "replace", "(", "'-0'", ",", "'-'", ")", "\n", "if", "s", "[", "0", "]", "==", "'0'", ":", "\n", "                    ", "s", "=", "s", "[", "1", ":", "]", "\n", "", "", "", "result", "=", "self", ".", "orig_type", "(", "s", ")", "\n", "self", ".", "rand_elements", ".", "append", "(", "result", ")", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.fuzz.date.random_date": [[7, 12], ["random.randrange", "datetime.timedelta"], "function", ["None"], ["def", "random_date", "(", "start", ",", "end", ")", ":", "\n", "    ", "delta", "=", "end", "-", "start", "\n", "int_delta", "=", "(", "delta", ".", "days", "*", "24", "*", "60", "*", "60", ")", "+", "delta", ".", "seconds", "\n", "random_second", "=", "random", ".", "randrange", "(", "int_delta", ")", "\n", "return", "start", "+", "timedelta", "(", "seconds", "=", "random_second", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.permute_tuple": [[20, 23], ["tuple", "len", "len"], "function", ["None"], ["def", "permute_tuple", "(", "element", ":", "Tuple", ",", "perm", ":", "Tuple", ")", "->", "Tuple", ":", "\n", "    ", "assert", "len", "(", "element", ")", "==", "len", "(", "perm", ")", "\n", "return", "tuple", "(", "[", "element", "[", "i", "]", "for", "i", "in", "perm", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.unorder_row": [[25, 27], ["tuple", "sorted", "str", "str", "type"], "function", ["None"], ["", "def", "unorder_row", "(", "row", ":", "Tuple", ")", "->", "Tuple", ":", "\n", "    ", "return", "tuple", "(", "sorted", "(", "row", ",", "key", "=", "lambda", "x", ":", "str", "(", "x", ")", "+", "str", "(", "type", "(", "x", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.quick_rej": [[33, 40], ["exec_eval.unorder_row", "exec_eval.unorder_row", "set", "set"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.unorder_row", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.unorder_row"], ["", "def", "quick_rej", "(", "result1", ":", "List", "[", "Tuple", "]", ",", "result2", ":", "List", "[", "Tuple", "]", ",", "order_matters", ":", "bool", ")", "->", "bool", ":", "\n", "    ", "s1", "=", "[", "unorder_row", "(", "row", ")", "for", "row", "in", "result1", "]", "\n", "s2", "=", "[", "unorder_row", "(", "row", ")", "for", "row", "in", "result2", "]", "\n", "if", "order_matters", ":", "\n", "        ", "return", "s1", "==", "s2", "\n", "", "else", ":", "\n", "        ", "return", "set", "(", "s1", ")", "==", "set", "(", "s2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.multiset_eq": [[43, 54], ["collections.defaultdict", "len", "len"], "function", ["None"], ["", "", "def", "multiset_eq", "(", "l1", ":", "List", ",", "l2", ":", "List", ")", "->", "bool", ":", "\n", "    ", "if", "len", "(", "l1", ")", "!=", "len", "(", "l2", ")", ":", "\n", "        ", "return", "False", "\n", "", "d", "=", "defaultdict", "(", "int", ")", "\n", "for", "e", "in", "l1", ":", "\n", "        ", "d", "[", "e", "]", "=", "d", "[", "e", "]", "+", "1", "\n", "", "for", "e", "in", "l2", ":", "\n", "        ", "d", "[", "e", "]", "=", "d", "[", "e", "]", "-", "1", "\n", "if", "d", "[", "e", "]", "<", "0", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.get_constraint_permutation": [[56, 71], ["len", "range", "itertools.product", "itertools.product", "random.choice", "range", "range", "set", "range", "perm_constraints[].remove"], "function", ["None"], ["", "def", "get_constraint_permutation", "(", "tab1_sets_by_columns", ":", "List", "[", "Set", "]", ",", "result2", ":", "List", "[", "Tuple", "]", ")", ":", "\n", "    ", "num_cols", "=", "len", "(", "result2", "[", "0", "]", ")", "\n", "perm_constraints", "=", "[", "{", "i", "for", "i", "in", "range", "(", "num_cols", ")", "}", "for", "_", "in", "range", "(", "num_cols", ")", "]", "\n", "if", "num_cols", "<=", "3", ":", "\n", "        ", "return", "product", "(", "*", "perm_constraints", ")", "\n", "\n", "# we sample 20 rows and constrain the space of permutations", "\n", "", "for", "_", "in", "range", "(", "20", ")", ":", "\n", "        ", "random_tab2_row", "=", "random", ".", "choice", "(", "result2", ")", "\n", "\n", "for", "tab1_col", "in", "range", "(", "num_cols", ")", ":", "\n", "            ", "for", "tab2_col", "in", "set", "(", "perm_constraints", "[", "tab1_col", "]", ")", ":", "\n", "                ", "if", "random_tab2_row", "[", "tab2_col", "]", "not", "in", "tab1_sets_by_columns", "[", "tab1_col", "]", ":", "\n", "                    ", "perm_constraints", "[", "tab1_col", "]", ".", "remove", "(", "tab2_col", ")", "\n", "", "", "", "", "return", "product", "(", "*", "perm_constraints", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.result_eq": [[74, 120], ["len", "exec_eval.get_constraint_permutation", "len", "len", "len", "exec_eval.quick_rej", "len", "len", "range", "len", "len", "set", "exec_eval.permute_tuple", "exec_eval.multiset_eq", "set", "set"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.get_constraint_permutation", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.quick_rej", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.permute_tuple", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.multiset_eq"], ["", "def", "result_eq", "(", "result1", ":", "List", "[", "Tuple", "]", ",", "result2", ":", "List", "[", "Tuple", "]", ",", "order_matters", ":", "bool", ")", "->", "bool", ":", "\n", "    ", "if", "len", "(", "result1", ")", "==", "0", "and", "len", "(", "result2", ")", "==", "0", ":", "\n", "        ", "return", "True", "\n", "\n", "# if length is not the same, then they are definitely different bag of rows", "\n", "", "if", "len", "(", "result1", ")", "!=", "len", "(", "result2", ")", ":", "\n", "        ", "return", "False", "\n", "\n", "", "num_cols", "=", "len", "(", "result1", "[", "0", "]", ")", "\n", "\n", "# if the results do not have the same number of columns, they are different", "\n", "if", "len", "(", "result2", "[", "0", "]", ")", "!=", "num_cols", ":", "\n", "        ", "return", "False", "\n", "\n", "# unorder each row and compare whether the denotation is the same", "\n", "# this can already find most pair of denotations that are different", "\n", "", "if", "not", "quick_rej", "(", "result1", ",", "result2", ",", "order_matters", ")", ":", "\n", "        ", "return", "False", "\n", "\n", "# the rest of the problem is in fact more complicated than one might think", "\n", "# we want to find a permutation of column order and a permutation of row order,", "\n", "# s.t. result_1 is the same as result_2", "\n", "# we return true if we can find such column & row permutations", "\n", "# and false if we cannot", "\n", "", "tab1_sets_by_columns", "=", "[", "{", "row", "[", "i", "]", "for", "row", "in", "result1", "}", "for", "i", "in", "range", "(", "num_cols", ")", "]", "\n", "\n", "# on a high level, we enumerate all possible column permutations that might make result_1 == result_2", "\n", "# we decrease the size of the column permutation space by the function get_constraint_permutation", "\n", "# if one of the permutation make result_1, result_2 equivalent, then they are equivalent", "\n", "for", "perm", "in", "get_constraint_permutation", "(", "tab1_sets_by_columns", ",", "result2", ")", ":", "\n", "        ", "if", "len", "(", "perm", ")", "!=", "len", "(", "set", "(", "perm", ")", ")", ":", "\n", "            ", "continue", "\n", "", "if", "num_cols", "==", "1", ":", "\n", "            ", "result2_perm", "=", "result2", "\n", "", "else", ":", "\n", "            ", "result2_perm", "=", "[", "permute_tuple", "(", "element", ",", "perm", ")", "for", "element", "in", "result2", "]", "\n", "", "if", "order_matters", ":", "\n", "            ", "if", "result1", "==", "result2_perm", ":", "\n", "                ", "return", "True", "\n", "", "", "else", ":", "\n", "# in fact the first condition must hold if the second condition holds", "\n", "# but the first is way more efficient implementation-wise", "\n", "# and we use it to quickly reject impossible candidates", "\n", "            ", "if", "set", "(", "result1", ")", "==", "set", "(", "result2_perm", ")", "and", "multiset_eq", "(", "result1", ",", "result2_perm", ")", ":", "\n", "                ", "return", "True", "\n", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.clean_tmp_f": [[122, 128], ["os.path.exists", "os.unlink"], "function", ["None"], ["", "def", "clean_tmp_f", "(", "f_prefix", ":", "str", ")", ":", "\n", "    ", "with", "threadLock", ":", "\n", "        ", "for", "suffix", "in", "(", "'.in'", ",", "'.out'", ")", ":", "\n", "            ", "f_path", "=", "f_prefix", "+", "suffix", "\n", "if", "os", ".", "path", ".", "exists", "(", "f_path", ")", ":", "\n", "                ", "os", ".", "unlink", "(", "f_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.exec_on_db": [[131, 154], ["exec_eval.clean_tmp_f", "pickle.dump", "subprocess.call", "os.path.exists", "os.path.exists", "str", "str", "os.path.join", "open", "print", "exec_eval.clean_tmp_f", "pickle.load", "time.time", "random.randint", "open", "open"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.clean_tmp_f", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.clean_tmp_f"], ["", "", "", "", "def", "exec_on_db", "(", "sqlite_path", ":", "str", ",", "query", ":", "str", ",", "process_id", ":", "str", "=", "''", ",", "timeout", ":", "int", "=", "TIMEOUT", ")", "->", "Tuple", "[", "str", ",", "Any", "]", ":", "\n", "    ", "f_prefix", "=", "None", "\n", "with", "threadLock", ":", "\n", "        ", "while", "f_prefix", "is", "None", "or", "os", ".", "path", ".", "exists", "(", "f_prefix", "+", "'.in'", ")", ":", "\n", "            ", "process_id", "+=", "str", "(", "time", ".", "time", "(", ")", ")", "\n", "process_id", "+=", "str", "(", "random", ".", "randint", "(", "0", ",", "10000000000", ")", ")", "\n", "f_prefix", "=", "os", ".", "path", ".", "join", "(", "EXEC_TMP_DIR", ",", "process_id", ")", "\n", "", "pkl", ".", "dump", "(", "(", "sqlite_path", ",", "query", ")", ",", "open", "(", "f_prefix", "+", "'.in'", ",", "'wb'", ")", ")", "\n", "", "try", ":", "\n", "        ", "subprocess", ".", "call", "(", "[", "'python3'", ",", "'exec_subprocess.py'", ",", "f_prefix", "]", ",", "timeout", "=", "timeout", ",", "stderr", "=", "open", "(", "'runerr.log'", ",", "'a'", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "clean_tmp_f", "(", "f_prefix", ")", "\n", "return", "'exception'", ",", "e", "\n", "", "result_path", "=", "f_prefix", "+", "'.out'", "\n", "returned_val", "=", "(", "'exception'", ",", "TimeoutError", ")", "\n", "try", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "result_path", ")", ":", "\n", "            ", "returned_val", "=", "pkl", ".", "load", "(", "open", "(", "result_path", ",", "'rb'", ")", ")", "\n", "", "", "except", ":", "\n", "        ", "pass", "\n", "", "clean_tmp_f", "(", "f_prefix", ")", "\n", "return", "returned_val", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.postprocess": [[159, 162], ["query.replace().replace().replace.replace().replace().replace", "query.replace().replace().replace.replace().replace", "query.replace().replace().replace.replace"], "function", ["None"], ["", "def", "postprocess", "(", "query", ":", "str", ")", "->", "str", ":", "\n", "    ", "query", "=", "query", ".", "replace", "(", "'> ='", ",", "'>='", ")", ".", "replace", "(", "'< ='", ",", "'<='", ")", ".", "replace", "(", "'! ='", ",", "'!='", ")", "\n", "return", "query", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.eval_exec_match": [[171, 233], ["os.path.dirname", "exec_eval.postprocess", "exec_eval.postprocess", "parse.remove_distinct", "parse.remove_distinct", "parse.remove_distinct.lower", "os.path.join", "parse.get_all_preds_for_execution", "itertools.chain", "os.listdir", "tqdm.tqdm", "exec_eval.exec_on_db", "exec_eval.exec_on_db", "exec_eval.result_eq"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.postprocess", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.postprocess", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.remove_distinct", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.remove_distinct", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.get_all_preds_for_execution", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.exec_on_db", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.exec_on_db", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.result_eq"], ["", "def", "eval_exec_match", "(", "db", ":", "str", ",", "p_str", ":", "str", ",", "g_str", ":", "str", ",", "plug_value", ":", "bool", ",", "keep_distinct", ":", "bool", ",", "progress_bar_for_each_datapoint", ":", "bool", ")", "->", "int", ":", "\n", "# post-process the prediction.", "\n", "# e.g. removing spaces between \">\" and \"=\"", "\n", "    ", "p_str", ",", "g_str", "=", "postprocess", "(", "p_str", ")", ",", "postprocess", "(", "g_str", ")", "\n", "if", "not", "keep_distinct", ":", "\n", "        ", "p_str", "=", "remove_distinct", "(", "p_str", ")", "\n", "g_str", "=", "remove_distinct", "(", "g_str", ")", "\n", "\n", "# we decide whether two denotations are equivalent based on \"bag semantics\"", "\n", "# https://courses.cs.washington.edu/courses/cse444/10sp/lectures/lecture16.pdf", "\n", "# if there is order by in query, then we assume order of the rows matter", "\n", "# order by might also be used to find the max/min instead of sorting,", "\n", "# but in that case the result mostly only contains one row and hence order_matters does not make a difference", "\n", "", "order_matters", "=", "'order by'", "in", "g_str", ".", "lower", "(", ")", "\n", "\n", "# find all databases in the same directory", "\n", "db_dir", "=", "os", ".", "path", ".", "dirname", "(", "db", ")", "\n", "db_paths", "=", "[", "os", ".", "path", ".", "join", "(", "db_dir", ",", "basename", ")", "for", "basename", "in", "os", ".", "listdir", "(", "db_dir", ")", "if", "'.sqlite'", "in", "basename", "]", "\n", "\n", "preds", "=", "[", "p_str", "]", "\n", "# if plug in value (i.e. we do not consider value prediction correctness)", "\n", "# enumerate all ways to plug in values in the gold query to the model predictions", "\n", "# otherwise, we only evaluate the predicted query with its own value prediction", "\n", "if", "plug_value", ":", "\n", "        ", "_", ",", "preds", "=", "get_all_preds_for_execution", "(", "g_str", ",", "p_str", ")", "\n", "# we did not add this line in our EMNLP work", "\n", "# this reduces \"false negatives\" when value is substituted", "\n", "preds", "=", "chain", "(", "[", "p_str", "]", ",", "preds", ")", "\n", "\n", "", "for", "pred", "in", "preds", ":", "\n", "\n", "        ", "pred_passes", "=", "1", "\n", "# compare the gold and predicted denotations on each database in the directory", "\n", "# wrap with progress bar if required", "\n", "if", "progress_bar_for_each_datapoint", ":", "\n", "            ", "ranger", "=", "tqdm", ".", "tqdm", "(", "db_paths", ")", "\n", "", "else", ":", "\n", "            ", "ranger", "=", "db_paths", "\n", "\n", "", "for", "db_path", "in", "ranger", ":", "\n", "            ", "g_flag", ",", "g_denotation", "=", "exec_on_db", "(", "db_path", ",", "g_str", ")", "\n", "p_flag", ",", "p_denotation", "=", "exec_on_db", "(", "db_path", ",", "pred", ")", "\n", "\n", "# we should expect the gold to be succesfully executed on the database", "\n", "assert", "g_flag", "!=", "'exception'", ",", "'gold query %s has error on database file %s'", "%", "(", "g_str", ",", "db_path", ")", "\n", "\n", "# wrong if execution fails", "\n", "if", "p_flag", "==", "'exception'", ":", "\n", "                ", "pred_passes", "=", "0", "\n", "\n", "# if denotations are not equivalent, the prediction must be wrong", "\n", "", "elif", "not", "result_eq", "(", "g_denotation", ",", "p_denotation", ",", "order_matters", "=", "order_matters", ")", ":", "\n", "                ", "pred_passes", "=", "0", "\n", "", "if", "pred_passes", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "# the model prediction has the same denotation as the gold for all databases", "\n", "", "", "if", "pred_passes", "==", "1", ":", "\n", "            ", "return", "1", "\n", "\n", "# none of the predictions passed", "\n", "", "", "return", "0", "\n", "", ""]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_subprocess.replace_cur_year": [[10, 12], ["re.sub"], "function", ["None"], ["pkl", ".", "dump", "(", "result", ",", "open", "(", "f_prefix", "+", "'.out'", ",", "'wb'", ")", ")", "\n", ""]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_subprocess.get_cursor_from_path": [[15, 26], ["sqlite3.connect.cursor", "sqlite3.connect", "b.decode", "os.path.exists", "print", "print"], "function", ["None"], []], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_subprocess.exec_on_db_": [[28, 41], ["exec_subprocess.replace_cur_year", "exec_subprocess.get_cursor_from_path", "get_cursor_from_path.execute", "get_cursor_from_path.fetchall", "get_cursor_from_path.close", "get_cursor_from_path.connection.close", "get_cursor_from_path.close", "get_cursor_from_path.connection.close"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_subprocess.replace_cur_year", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_subprocess.get_cursor_from_path"], []], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.tokenize": [[14, 17], ["list", "Token", "[].flatten", "sqlparse.parse"], "function", ["None"], ["\n", "\n", "def", "tokenize", "(", "query", ":", "str", ")", "->", "List", "[", "Token", "]", ":", "\n", "    ", "tokens", "=", "list", "(", "[", "Token", "(", "t", ".", "ttype", ",", "t", ".", "value", ")", "for", "t", "in", "sqlparse", ".", "parse", "(", "query", ")", "[", "0", "]", ".", "flatten", "(", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.join_tokens": [[19, 21], ["None"], "function", ["None"], ["\n", "\n", "", "def", "join_tokens", "(", "tokens", ":", "List", "[", "Token", "]", ")", "->", "str", ":", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.round_trip_test": [[23, 27], ["parse.tokenize"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.tokenize"], ["\n", "\n", "", "def", "round_trip_test", "(", "query", ":", "str", ")", "->", "None", ":", "\n", "    ", "tokens", "=", "tokenize", "(", "query", ")", "\n", "reconstructed", "=", "''", ".", "join", "(", "[", "token", ".", "value", "for", "token", "in", "tokens", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.postprocess": [[29, 32], ["query.replace().replace().replace.replace().replace().replace", "query.replace().replace().replace.replace().replace", "query.replace().replace().replace.replace"], "function", ["None"], ["\n", "\n", "", "def", "postprocess", "(", "query", ":", "str", ")", "->", "str", ":", "\n", "    ", "query", "=", "query", ".", "replace", "(", "'> ='", ",", "'>='", ")", ".", "replace", "(", "'< ='", ",", "'<='", ")", ".", "replace", "(", "'! ='", ",", "'!='", ")", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.strip_query": [[36, 81], ["[].flatten", "query.replace.split", "re.findall", "all_values.append", "query.replace.replace", "i.strip", "val.strip", "re.findall", "re.findall", "sqlparse.parse", "len", "tok.replace().split", "query_keywords.extend", "query_keywords.append", "len", "query_keywords.append", "t.lower", "tok.lower", "tok.lower", "tok.replace", "len"], "function", ["None"], ["# strip_query, reformat_query and replace values", "\n", "# were implemented by Yu Tao for processing CoSQL", "\n", "", "def", "strip_query", "(", "query", ":", "str", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "str", "]", "]", ":", "\n", "    ", "query_keywords", ",", "all_values", "=", "[", "]", ",", "[", "]", "\n", "\n", "# then replace all stuff enclosed by \"\" with a numerical value to get it marked as {VALUE}", "\n", "\n", "# Tao's implementation is commented out here.", "\n", "\"\"\"\n    str_1 = re.findall(\"\\\"[^\\\"]*\\\"\", query)\n    str_2 = re.findall(\"\\'[^\\']*\\'\", query)\n    values = str_1 + str_2\n        \"\"\"", "\n", "\n", "toks", "=", "sqlparse", ".", "parse", "(", "query", ")", "[", "0", "]", ".", "flatten", "(", ")", "\n", "values", "=", "[", "t", ".", "value", "for", "t", "in", "toks", "if", "t", ".", "ttype", "==", "sqlparse", ".", "tokens", ".", "Literal", ".", "String", ".", "Single", "or", "t", ".", "ttype", "==", "sqlparse", ".", "tokens", ".", "Literal", ".", "String", ".", "Symbol", "]", "\n", "\n", "\n", "for", "val", "in", "values", ":", "\n", "        ", "all_values", ".", "append", "(", "val", ")", "\n", "query", "=", "query", ".", "replace", "(", "val", ".", "strip", "(", ")", ",", "VALUE_NUM_SYMBOL", ")", "\n", "\n", "", "query_tokenized", "=", "query", ".", "split", "(", ")", "\n", "float_nums", "=", "re", ".", "findall", "(", "\"[-+]?\\d*\\.\\d+\"", ",", "query", ")", "\n", "all_values", "+=", "[", "qt", "for", "qt", "in", "query_tokenized", "if", "qt", "in", "float_nums", "]", "\n", "query_tokenized", "=", "[", "VALUE_NUM_SYMBOL", "if", "qt", "in", "float_nums", "else", "qt", "for", "qt", "in", "query_tokenized", "]", "\n", "\n", "query", "=", "\" \"", ".", "join", "(", "query_tokenized", ")", "\n", "int_nums", "=", "[", "i", ".", "strip", "(", ")", "for", "i", "in", "re", ".", "findall", "(", "\"[^tT]\\d+\"", ",", "query", ")", "]", "\n", "\n", "all_values", "+=", "[", "qt", "for", "qt", "in", "query_tokenized", "if", "qt", "in", "int_nums", "]", "\n", "query_tokenized", "=", "[", "VALUE_NUM_SYMBOL", "if", "qt", "in", "int_nums", "else", "qt", "for", "qt", "in", "query_tokenized", "]", "\n", "# print int_nums, query, query_tokenized", "\n", "\n", "for", "tok", "in", "query_tokenized", ":", "\n", "        ", "if", "\".\"", "in", "tok", ":", "\n", "            ", "table", "=", "re", ".", "findall", "(", "\"[Tt]\\d+\\.\"", ",", "tok", ")", "\n", "if", "len", "(", "table", ")", ">", "0", ":", "\n", "                ", "to", "=", "tok", ".", "replace", "(", "\".\"", ",", "\" . \"", ")", ".", "split", "(", ")", "\n", "to", "=", "[", "t", ".", "lower", "(", ")", "for", "t", "in", "to", "if", "len", "(", "t", ")", ">", "0", "]", "\n", "query_keywords", ".", "extend", "(", "to", ")", "\n", "", "else", ":", "\n", "                ", "query_keywords", ".", "append", "(", "tok", ".", "lower", "(", ")", ")", "\n", "\n", "", "", "elif", "len", "(", "tok", ")", ">", "0", ":", "\n", "            ", "query_keywords", ".", "append", "(", "tok", ".", "lower", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.reformat_query": [[83, 90], ["query.replace.strip().replace().replace", "query.replace.replace", "query.replace.strip().replace", "parse.tokenize", "query.replace.strip"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.tokenize"], ["\n", "\n", "", "def", "reformat_query", "(", "query", ":", "str", ")", "->", "str", ":", "\n", "    ", "query", "=", "query", ".", "strip", "(", ")", ".", "replace", "(", "\";\"", ",", "\"\"", ")", ".", "replace", "(", "\"\\t\"", ",", "\"\"", ")", "\n", "query", "=", "' '", ".", "join", "(", "[", "t", ".", "value", "for", "t", "in", "tokenize", "(", "query", ")", "if", "t", ".", "ttype", "!=", "sqlparse", ".", "tokens", ".", "Whitespace", "]", ")", "\n", "t_stars", "=", "[", "\"t1.*\"", ",", "\"t2.*\"", ",", "\"t3.*\"", ",", "\"T1.*\"", ",", "\"T2.*\"", ",", "\"T3.*\"", "]", "\n", "for", "ts", "in", "t_stars", ":", "\n", "        ", "query", "=", "query", ".", "replace", "(", "ts", ",", "\"*\"", ")", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.replace_values": [[92, 98], ["sqlparse.format", "re.sub", "parse.strip_query", "set"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.strip_query"], ["\n", "\n", "", "def", "replace_values", "(", "sql", ":", "str", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "Set", "[", "str", "]", "]", ":", "\n", "    ", "sql", "=", "sqlparse", ".", "format", "(", "sql", ",", "reindent", "=", "False", ",", "keyword_case", "=", "'upper'", ")", "\n", "# sql = re.sub(r\"(<=|>=|!=|=|<|>|,)\", r\" \\1 \", sql)", "\n", "sql", "=", "re", ".", "sub", "(", "r\"(T\\d+\\.)\\s\"", ",", "r\"\\1\"", ",", "sql", ")", "\n", "query_toks_no_value", ",", "values", "=", "strip_query", "(", "sql", ")", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_query_values": [[102, 106], ["parse.reformat_query", "parse.replace_values"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.reformat_query", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.replace_values"], ["# extract the non-value tokens and the set of values", "\n", "# from a sql query", "\n", "", "def", "extract_query_values", "(", "sql", ":", "str", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "Set", "[", "str", "]", "]", ":", "\n", "    ", "reformated", "=", "reformat_query", "(", "query", "=", "sql", ")", "\n", "query_value_replaced", ",", "values", "=", "replace_values", "(", "reformated", ")", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.plugin": [[109, 118], ["len", "zip", "len", "len", "range", "VALUE_NUM_SYMBOL.lower"], "function", ["None"], ["\n", "# plug in the values into query with value slots", "\n", "", "def", "plugin", "(", "query_value_replaced", ":", "List", "[", "str", "]", ",", "values_in_order", ":", "List", "[", "str", "]", ")", "->", "str", ":", "\n", "    ", "q_length", "=", "len", "(", "query_value_replaced", ")", "\n", "query_w_values", "=", "query_value_replaced", "[", ":", "]", "\n", "value_idx", "=", "[", "idx", "for", "idx", "in", "range", "(", "q_length", ")", "if", "query_value_replaced", "[", "idx", "]", "==", "VALUE_NUM_SYMBOL", ".", "lower", "(", ")", "]", "\n", "assert", "len", "(", "value_idx", ")", "==", "len", "(", "values_in_order", ")", "\n", "\n", "for", "idx", ",", "value", "in", "zip", "(", "value_idx", ",", "values_in_order", ")", ":", "\n", "        ", "query_w_values", "[", "idx", "]", "=", "value", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.plugin_all_permutations": [[122, 126], ["len", "itertools.product", "parse.plugin", "list", "list", "VALUE_NUM_SYMBOL.lower", "range"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.plugin"], ["# a generator generating all possible ways of", "\n", "# filling values into predicted query", "\n", "", "def", "plugin_all_permutations", "(", "query_value_replaced", ":", "List", "[", "str", "]", ",", "values", ":", "Set", "[", "str", "]", ")", "->", "Iterator", "[", "str", "]", ":", "\n", "    ", "num_slots", "=", "len", "(", "[", "v", "for", "v", "in", "query_value_replaced", "if", "v", "==", "VALUE_NUM_SYMBOL", ".", "lower", "(", ")", "]", ")", "\n", "for", "values", "in", "itertools", ".", "product", "(", "*", "[", "list", "(", "values", ")", "for", "_", "in", "range", "(", "num_slots", ")", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.get_all_preds_for_execution": [[131, 137], ["parse.extract_query_values", "parse.extract_query_values", "len", "len", "parse.plugin_all_permutations", "VALUE_NUM_SYMBOL.lower"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_query_values", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_query_values", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.plugin_all_permutations"], ["# extract values from the gold, extract predicted sql with value slots", "\n", "# return 1) number of possible ways to plug in gold values and 2) an iterator of predictions with value plugged in", "\n", "", "", "def", "get_all_preds_for_execution", "(", "gold", ":", "str", ",", "pred", ":", "str", ")", "->", "Tuple", "[", "int", ",", "Iterator", "[", "str", "]", "]", ":", "\n", "    ", "_", ",", "gold_values", "=", "extract_query_values", "(", "gold", ")", "\n", "pred_query_value_replaced", ",", "_", "=", "extract_query_values", "(", "pred", ")", "\n", "num_slots", "=", "len", "(", "[", "v", "for", "v", "in", "pred_query_value_replaced", "if", "v", "==", "VALUE_NUM_SYMBOL", ".", "lower", "(", ")", "]", ")", "\n", "num_alternatives", "=", "len", "(", "gold_values", ")", "**", "num_slots", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.remove_distinct": [[139, 142], ["list", "[].flatten", "t.lower", "sqlparse.parse"], "function", ["None"], ["\n", "\n", "", "def", "remove_distinct", "(", "s", ")", ":", "\n", "    ", "toks", "=", "[", "t", ".", "value", "for", "t", "in", "list", "(", "sqlparse", ".", "parse", "(", "s", ")", "[", "0", "]", ".", "flatten", "(", ")", ")", "]", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_all_comparison_from_node": [[144, 152], ["hasattr", "type", "comparison_list.append", "comparison_list.extend", "parse.extract_all_comparison_from_node"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_all_comparison_from_node"], ["\n", "\n", "", "def", "extract_all_comparison_from_node", "(", "node", ":", "Token", ")", "->", "List", "[", "Comparison", "]", ":", "\n", "    ", "comparison_list", "=", "[", "]", "\n", "if", "hasattr", "(", "node", ",", "'tokens'", ")", ":", "\n", "        ", "for", "t", "in", "node", ".", "tokens", ":", "\n", "            ", "comparison_list", ".", "extend", "(", "extract_all_comparison_from_node", "(", "t", ")", ")", "\n", "", "", "if", "type", "(", "node", ")", "==", "Comparison", ":", "\n", "        ", "comparison_list", ".", "append", "(", "node", ")", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_all_comparison": [[154, 158], ["parse.extract_all_comparison_from_node", "sqlparse.parse"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_all_comparison_from_node"], ["\n", "\n", "", "def", "extract_all_comparison", "(", "query", ":", "str", ")", "->", "List", "[", "Comparison", "]", ":", "\n", "    ", "tree", "=", "sqlparse", ".", "parse", "(", "query", ")", "[", "0", "]", "\n", "comparison_list", "=", "extract_all_comparison_from_node", "(", "tree", ")", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_toks_from_comparison": [[160, 163], ["None"], "function", ["None"], ["\n", "\n", "", "def", "extract_toks_from_comparison", "(", "comparison_node", ":", "Comparison", ")", "->", "List", "[", "Token", "]", ":", "\n", "    ", "tokens", "=", "[", "t", "for", "t", "in", "comparison_node", ".", "tokens", "if", "t", ".", "ttype", "!=", "Whitespace", "]", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_info_from_comparison": [[165, 196], ["parse.extract_toks_from_comparison", "type", "left.tokens[].value.lower", "type", "parse.process_str_value", "len", "re.match", "type", "col.upper", "len", "type"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_toks_from_comparison", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.process_str_value"], ["\n", "\n", "", "def", "extract_info_from_comparison", "(", "comparison_node", ":", "Comparison", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "    ", "tokens", "=", "extract_toks_from_comparison", "(", "comparison_node", ")", "\n", "left", ",", "op", ",", "right", "=", "tokens", "\n", "\n", "returned_dict", "=", "{", "\n", "'left'", ":", "left", ",", "\n", "'op'", ":", "op", ".", "value", ",", "\n", "'right'", ":", "right", "\n", "}", "\n", "\n", "if", "type", "(", "left", ")", "!=", "Identifier", ":", "\n", "        ", "return", "returned_dict", "\n", "\n", "", "table", "=", "None", "\n", "if", "len", "(", "left", ".", "tokens", ")", "==", "3", "and", "re", ".", "match", "(", "'^[tT][0-9]$'", ",", "left", ".", "tokens", "[", "0", "]", ".", "value", ")", "is", "None", ":", "\n", "        ", "table", "=", "left", ".", "tokens", "[", "0", "]", ".", "value", ".", "lower", "(", ")", "\n", "", "col", "=", "left", ".", "tokens", "[", "-", "1", "]", ".", "value", "\n", "\n", "if", "type", "(", "right", ")", "==", "Identifier", ":", "\n", "        ", "if", "len", "(", "right", ".", "tokens", ")", "==", "1", "and", "type", "(", "right", ".", "tokens", "[", "0", "]", ")", "==", "sqlparse", ".", "sql", ".", "Token", ":", "\n", "            ", "right_val", "=", "right", ".", "tokens", "[", "0", "]", ".", "value", "\n", "", "else", ":", "\n", "            ", "return", "returned_dict", "\n", "", "", "elif", "type", "(", "right", ")", "==", "sqlparse", ".", "sql", ".", "Token", ":", "\n", "        ", "right_val", "=", "right", ".", "value", "\n", "", "else", ":", "\n", "        ", "return", "returned_dict", "\n", "\n", "", "returned_dict", "[", "'table_col'", "]", ",", "returned_dict", "[", "'val'", "]", "=", "(", "rm_placeholder", "(", "table", ")", ",", "rm_placeholder", "(", "col", ".", "upper", "(", ")", ")", ")", ",", "rm_placeholder", "(", "process_str_value", "(", "right_val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_all_comparison_from_query": [[198, 201], ["parse.extract_all_comparison", "parse.extract_info_from_comparison"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_all_comparison", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_info_from_comparison"], ["\n", "\n", "", "def", "extract_all_comparison_from_query", "(", "query", ":", "str", ")", "->", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "    ", "comparison_list", "=", "extract_all_comparison", "(", "query", ")", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_typed_value_in_comparison_from_query": [[203, 215], ["parse.extract_all_comparison_from_query", "re.findall", "col.upper.upper", "table.lower.lower", "typed_values.append"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.extract_all_comparison_from_query"], ["\n", "\n", "", "def", "rm_placeholder", "(", "s", ":", "Union", "[", "str", ",", "None", "]", ")", "->", "Union", "[", "str", ",", "None", "]", ":", "\n", "    ", "if", "s", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "return", "re", ".", "sub", "(", "'placeholderrare'", ",", "''", ",", "s", ",", "flags", "=", "re", ".", "IGNORECASE", ")", "\n", "\n", "\n", "", "in_tuple_pattern", "=", "re", ".", "compile", "(", "'(?:WHERE|OR|AND) (?:\\w*\\.)?([\\w]*) IN \\((.*?)\\)'", ")", "\n", "def", "typed_values_in_tuples", "(", "query", ")", ":", "\n", "    ", "groups", "=", "in_tuple_pattern", ".", "findall", "(", "query", ")", "\n", "typed_values", "=", "[", "]", "\n", "for", "group", "in", "groups", ":", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.parse.process_str_value": [[217, 225], ["v.replace.replace", "len", "len"], "function", ["None"], ["            ", "continue", "\n", "", "tab_col", "=", "(", "None", ",", "rm_placeholder", "(", "group", "[", "0", "]", ".", "upper", "(", ")", ")", ")", "\n", "vals", "=", "[", "x", ".", "strip", "(", ")", ".", "replace", "(", "'\"'", ",", "''", ")", "for", "x", "in", "group", "[", "1", "]", ".", "split", "(", "','", ")", "]", "\n", "for", "val", "in", "vals", ":", "\n", "            ", "typed_values", ".", "append", "(", "(", "tab_col", ",", "val", ")", ")", "\n", "", "", "return", "typed_values", "\n", "\n", "\n", "", "def", "extract_typed_value_in_comparison_from_query", "(", "query", ":", "str", ")", "->", "List", "[", "Tuple", "[", "Tuple", "[", "Union", "[", "str", ",", "None", "]", ",", "str", "]", ",", "str", "]", "]", ":", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.Schema.__init__": [[52, 55], ["process_sql.Schema._map"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.Schema._map"], ["    ", "if", "'('", "in", "schema_type", ":", "\n", "        ", "paren_idx", "=", "schema_type", ".", "index", "(", "'('", ")", "\n", "body", "=", "schema_type", "[", ":", "paren_idx", "]", ".", "strip", "(", ")", "\n", "close_paren_idx", "=", "schema_type", ".", "index", "(", "')'", ")", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.Schema.schema": [[56, 59], ["None"], "methods", ["None"], ["parameter_str", "=", "schema_type", "[", "paren_idx", "+", "1", ":", "close_paren_idx", "]", "\n", "arguments", "=", "[", "int", "(", "x", ")", "for", "x", "in", "parameter_str", ".", "split", "(", "','", ")", "]", "\n", "", "else", ":", "\n", "        ", "body", "=", "schema_type", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.Schema.idMap": [[60, 63], ["None"], "methods", ["None"], ["arguments", "=", "[", "]", "\n", "", "return", "body", ",", "arguments", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.Schema._map": [[64, 77], ["schema.items", "key.lower", "key.lower", "val.lower", "val.lower", "key.lower", "key.lower"], "methods", ["None"], ["", "class", "Schema", ":", "\n", "    ", "\"\"\"\n    Simple schema which maps table&column to a unique identifier\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "schema", ")", ":", "\n", "# schema = {'stadium': ['stadium_id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'],", "\n", "# 'singer': ['singer_id', 'name', 'country', 'song_name', 'song_release_year', 'age', 'is_male'],", "\n", "# 'concert': ['concert_id', 'concert_name', 'theme', 'stadium_id', 'year'],", "\n", "# 'singer_in_concert': ['concert_id', 'singer_id']}", "\n", "        ", "self", ".", "_schema", "=", "schema", "\n", "# _idMap = {'*': '__all__', 'stadium.stadium_id': '__stadium.stadium_id__',", "\n", "self", ".", "_idMap", "=", "self", ".", "_map", "(", "self", ".", "_schema", ")", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.get_schema": [[79, 101], ["sqlite3.connect", "sqlite3.connect.cursor", "conn.cursor.execute", "str", "conn.cursor.execute", "table[].lower", "conn.cursor.fetchall", "str", "col[].lower", "conn.cursor.fetchall"], "function", ["None"], ["        ", "return", "self", ".", "_schema", "\n", "\n", "", "@", "property", "\n", "def", "idMap", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_idMap", "\n", "\n", "", "def", "_map", "(", "self", ",", "schema", ")", ":", "\n", "        ", "idMap", "=", "{", "'*'", ":", "\"__all__\"", "}", "\n", "id", "=", "1", "\n", "for", "key", ",", "vals", "in", "schema", ".", "items", "(", ")", ":", "\n", "            ", "for", "val", "in", "vals", ":", "\n", "                ", "idMap", "[", "key", ".", "lower", "(", ")", "+", "\".\"", "+", "val", ".", "lower", "(", ")", "]", "=", "\"__\"", "+", "key", ".", "lower", "(", ")", "+", "\".\"", "+", "val", ".", "lower", "(", ")", "+", "\"__\"", "\n", "id", "+=", "1", "\n", "\n", "", "", "for", "key", "in", "schema", ":", "\n", "            ", "idMap", "[", "key", ".", "lower", "(", ")", "]", "=", "\"__\"", "+", "key", ".", "lower", "(", ")", "+", "\"__\"", "\n", "id", "+=", "1", "\n", "\n", "", "return", "idMap", "\n", "\n", "\n", "", "", "def", "get_schema", "(", "db", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.get_schema_from_json": [[103, 114], ["open", "json.load", "str", "entry[].lower", "str", "col[].lower"], "function", ["None"], ["\n", "\n", "schema", "=", "{", "}", "\n", "conn", "=", "sqlite3", ".", "connect", "(", "db", ")", "\n", "cursor", "=", "conn", ".", "cursor", "(", ")", "\n", "\n", "# fetch table names", "\n", "cursor", ".", "execute", "(", "\"SELECT name FROM sqlite_master WHERE type='table';\"", ")", "\n", "tables", "=", "[", "str", "(", "table", "[", "0", "]", ".", "lower", "(", ")", ")", "for", "table", "in", "cursor", ".", "fetchall", "(", ")", "]", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.tokenize": [[116, 148], ["str", "string.replace.replace", "range", "range", "eq_idxs.reverse", "word.lower", "len", "enumerate", "len", "len", "nltk.word_tokenize", "enumerate"], "function", ["None"], ["# fetch table info", "\n", "for", "table", "in", "tables", ":", "\n", "        ", "cursor", ".", "execute", "(", "\"PRAGMA table_info({})\"", ".", "format", "(", "table", ")", ")", "\n", "schema", "[", "table", "]", "=", "[", "str", "(", "col", "[", "1", "]", ".", "lower", "(", ")", ")", "for", "col", "in", "cursor", ".", "fetchall", "(", ")", "]", "\n", "", "return", "schema", "\n", "\n", "\n", "", "def", "get_schema_from_json", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "schema", "=", "{", "}", "\n", "for", "entry", "in", "data", ":", "\n", "        ", "table", "=", "str", "(", "entry", "[", "'table'", "]", ".", "lower", "(", ")", ")", "\n", "cols", "=", "[", "str", "(", "col", "[", "'column_name'", "]", ".", "lower", "(", ")", ")", "for", "col", "in", "entry", "[", "'col_data'", "]", "]", "\n", "schema", "[", "table", "]", "=", "cols", "\n", "\n", "", "return", "schema", "\n", "\n", "\n", "", "def", "tokenize", "(", "string", ")", ":", "\n", "    ", "string", "=", "str", "(", "string", ")", "\n", "string", "=", "string", ".", "replace", "(", "\"\\'\"", ",", "\"\\\"\"", ")", "# ensures all string values wrapped by \"\" problem??", "\n", "quote_idxs", "=", "[", "idx", "for", "idx", ",", "char", "in", "enumerate", "(", "string", ")", "if", "char", "==", "'\"'", "]", "\n", "assert", "len", "(", "quote_idxs", ")", "%", "2", "==", "0", ",", "\"Unexpected quote\"", "\n", "\n", "# keep string value as token", "\n", "vals", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "quote_idxs", ")", "-", "1", ",", "-", "1", ",", "-", "2", ")", ":", "\n", "        ", "qidx1", "=", "quote_idxs", "[", "i", "-", "1", "]", "\n", "qidx2", "=", "quote_idxs", "[", "i", "]", "\n", "val", "=", "string", "[", "qidx1", ":", "qidx2", "+", "1", "]", "\n", "key", "=", "\"__val_{}_{}__\"", ".", "format", "(", "qidx1", ",", "qidx2", ")", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.scan_alias": [[150, 157], ["enumerate"], "function", ["None"], ["vals", "[", "key", "]", "=", "val", "\n", "\n", "", "toks", "=", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "word_tokenize", "(", "string", ")", "]", "\n", "# replace with string value token", "\n", "for", "i", "in", "range", "(", "len", "(", "toks", ")", ")", ":", "\n", "        ", "if", "toks", "[", "i", "]", "in", "vals", ":", "\n", "            ", "toks", "[", "i", "]", "=", "vals", "[", "toks", "[", "i", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.get_tables_with_alias": [[159, 165], ["process_sql.scan_alias"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.scan_alias"], ["", "", "eq_idxs", "=", "[", "idx", "for", "idx", ",", "tok", "in", "enumerate", "(", "toks", ")", "if", "tok", "==", "\"=\"", "]", "\n", "eq_idxs", ".", "reverse", "(", ")", "\n", "prefix", "=", "(", "'!'", ",", "'>'", ",", "'<'", ")", "\n", "for", "eq_idx", "in", "eq_idxs", ":", "\n", "        ", "pre_tok", "=", "toks", "[", "eq_idx", "-", "1", "]", "\n", "if", "pre_tok", "in", "prefix", ":", "\n", "            ", "toks", "=", "toks", "[", ":", "eq_idx", "-", "1", "]", "+", "[", "pre_tok", "+", "\"=\"", "]", "+", "toks", "[", "eq_idx", "+", "1", ":", "]", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_col": [[167, 189], ["tok.split", "len"], "function", ["None"], ["", "", "return", "toks", "\n", "\n", "\n", "", "def", "scan_alias", "(", "toks", ")", ":", "\n", "    ", "\"\"\"Scan the index of 'as' and build the map for all alias\"\"\"", "\n", "as_idxs", "=", "[", "idx", "for", "idx", ",", "tok", "in", "enumerate", "(", "toks", ")", "if", "tok", "==", "'as'", "]", "\n", "alias", "=", "{", "}", "\n", "for", "idx", "in", "as_idxs", ":", "\n", "        ", "alias", "[", "toks", "[", "idx", "+", "1", "]", "]", "=", "toks", "[", "idx", "-", "1", "]", "\n", "# alas, dict = {'t1': 'concert', 't2': 'stadium'}", "\n", "", "return", "alias", "\n", "\n", "\n", "", "def", "get_tables_with_alias", "(", "schema", ",", "toks", ")", ":", "\n", "    ", "tables", "=", "scan_alias", "(", "toks", ")", "\n", "for", "key", "in", "schema", ":", "\n", "        ", "assert", "key", "not", "in", "tables", ",", "\"Alias {} has the same name in table\"", ".", "format", "(", "key", ")", "\n", "tables", "[", "key", "]", "=", "key", "\n", "", "return", "tables", "\n", "\n", "\n", "# this function seems to be parsing the column name of a table", "\n", "# and convert it to the format: table_name.column_name", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_col_unit": [[191, 227], ["len", "AGG_OPS.index", "process_sql.parse_col", "AGG_OPS.index", "process_sql.parse_col"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_col", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_col"], ["    ", "\"\"\"\n        :returns next idx, column id\n    \"\"\"", "\n", "tok", "=", "toks", "[", "start_idx", "]", "\n", "if", "tok", "==", "\"*\"", ":", "\n", "        ", "return", "start_idx", "+", "1", ",", "schema", ".", "idMap", "[", "tok", "]", "\n", "\n", "", "if", "'.'", "in", "tok", ":", "# if token is a composite", "\n", "        ", "alias", ",", "col", "=", "tok", ".", "split", "(", "'.'", ")", "\n", "key", "=", "tables_with_alias", "[", "alias", "]", "+", "\".\"", "+", "col", "\n", "return", "start_idx", "+", "1", ",", "schema", ".", "idMap", "[", "key", "]", "\n", "\n", "", "assert", "default_tables", "is", "not", "None", "and", "len", "(", "default_tables", ")", ">", "0", ",", "\"Default tables should not be None or empty\"", "\n", "\n", "for", "alias", "in", "default_tables", ":", "\n", "        ", "table", "=", "tables_with_alias", "[", "alias", "]", "\n", "if", "tok", "in", "schema", ".", "schema", "[", "table", "]", ":", "\n", "            ", "key", "=", "table", "+", "\".\"", "+", "tok", "\n", "return", "start_idx", "+", "1", ",", "schema", ".", "idMap", "[", "key", "]", "\n", "\n", "", "", "assert", "False", ",", "\"Error col: {}\"", ".", "format", "(", "tok", ")", "\n", "\n", "\n", "", "def", "parse_col_unit", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n        :returns next idx, (agg_op id, col_id)\n    \"\"\"", "\n", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "isBlock", "=", "False", "\n", "isDistinct", "=", "False", "\n", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "        ", "isBlock", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "", "if", "toks", "[", "idx", "]", "in", "AGG_OPS", ":", "\n", "        ", "agg_id", "=", "AGG_OPS", ".", "index", "(", "toks", "[", "idx", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_val_unit": [[229, 252], ["len", "UNIT_OPS.index", "process_sql.parse_col_unit", "UNIT_OPS.index", "process_sql.parse_col_unit"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_col_unit", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_col_unit"], ["assert", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "'('", "\n", "idx", "+=", "1", "\n", "if", "toks", "[", "idx", "]", "==", "\"distinct\"", ":", "\n", "            ", "idx", "+=", "1", "\n", "isDistinct", "=", "True", "\n", "", "idx", ",", "col_id", "=", "parse_col", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "assert", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "')'", "\n", "idx", "+=", "1", "\n", "return", "idx", ",", "(", "agg_id", ",", "col_id", ",", "isDistinct", ")", "\n", "\n", "", "if", "toks", "[", "idx", "]", "==", "\"distinct\"", ":", "\n", "        ", "idx", "+=", "1", "\n", "isDistinct", "=", "True", "\n", "", "agg_id", "=", "AGG_OPS", ".", "index", "(", "\"none\"", ")", "\n", "idx", ",", "col_id", "=", "parse_col", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "\n", "if", "isBlock", ":", "\n", "        ", "assert", "toks", "[", "idx", "]", "==", "')'", "\n", "idx", "+=", "1", "# skip ')'", "\n", "# e.g. (False, [(0, (0, (0, '__singer.name__', False), None))])", "\n", "", "return", "idx", ",", "(", "agg_id", ",", "col_id", ",", "isDistinct", ")", "\n", "\n", "\n", "", "def", "parse_val_unit", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_table_unit": [[254, 268], ["len"], "function", ["None"], ["len_", "=", "len", "(", "toks", ")", "\n", "isBlock", "=", "False", "\n", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "        ", "isBlock", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "", "col_unit1", "=", "None", "\n", "col_unit2", "=", "None", "\n", "unit_op", "=", "UNIT_OPS", ".", "index", "(", "'none'", ")", "\n", "\n", "idx", ",", "col_unit1", "=", "parse_col_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "in", "UNIT_OPS", ":", "\n", "        ", "unit_op", "=", "UNIT_OPS", ".", "index", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "\n", "idx", ",", "col_unit2", "=", "parse_col_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_value": [[270, 302], ["len", "process_sql.parse_sql", "float", "process_sql.parse_col_unit"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_sql", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_col_unit"], ["", "if", "isBlock", ":", "\n", "        ", "assert", "toks", "[", "idx", "]", "==", "')'", "\n", "idx", "+=", "1", "# skip ')'", "\n", "\n", "", "return", "idx", ",", "(", "unit_op", ",", "col_unit1", ",", "col_unit2", ")", "\n", "\n", "\n", "", "def", "parse_table_unit", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ")", ":", "\n", "    ", "\"\"\"\n        :returns next idx, table id, table name\n    \"\"\"", "\n", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "key", "=", "tables_with_alias", "[", "toks", "[", "idx", "]", "]", "\n", "\n", "if", "idx", "+", "1", "<", "len_", "and", "toks", "[", "idx", "+", "1", "]", "==", "\"as\"", ":", "\n", "        ", "idx", "+=", "3", "\n", "", "else", ":", "\n", "        ", "idx", "+=", "1", "\n", "\n", "", "return", "idx", ",", "schema", ".", "idMap", "[", "key", "]", ",", "key", "\n", "\n", "\n", "", "def", "parse_value", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "\n", "isBlock", "=", "False", "\n", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "        ", "isBlock", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "", "if", "toks", "[", "idx", "]", "==", "'select'", ":", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_condition": [[304, 339], ["len", "process_sql.parse_val_unit", "WHERE_OPS.index", "conds.append", "WHERE_OPS.index", "process_sql.parse_value", "process_sql.parse_value", "process_sql.parse_value", "conds.append"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_val_unit", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_value", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_value", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_value"], ["", "elif", "\"\\\"\"", "in", "toks", "[", "idx", "]", ":", "# token is a string value", "\n", "        ", "val", "=", "toks", "[", "idx", "]", "\n", "idx", "+=", "1", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "val", "=", "float", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "\n", "", "except", ":", "\n", "            ", "end_idx", "=", "idx", "\n", "while", "end_idx", "<", "len_", "and", "toks", "[", "end_idx", "]", "!=", "','", "and", "toks", "[", "end_idx", "]", "!=", "')'", "and", "toks", "[", "end_idx", "]", "!=", "'and'", "and", "toks", "[", "end_idx", "]", "not", "in", "CLAUSE_KEYWORDS", "and", "toks", "[", "end_idx", "]", "not", "in", "JOIN_KEYWORDS", ":", "\n", "                    ", "end_idx", "+=", "1", "\n", "\n", "", "idx", ",", "val", "=", "parse_col_unit", "(", "toks", "[", "start_idx", ":", "end_idx", "]", ",", "0", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "idx", "=", "end_idx", "\n", "\n", "", "", "if", "isBlock", ":", "\n", "        ", "assert", "toks", "[", "idx", "]", "==", "')'", "\n", "idx", "+=", "1", "\n", "\n", "", "return", "idx", ",", "val", "\n", "\n", "\n", "", "def", "parse_condition", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "conds", "=", "[", "]", "\n", "\n", "while", "idx", "<", "len_", ":", "\n", "        ", "idx", ",", "val_unit", "=", "parse_val_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "not_op", "=", "False", "\n", "if", "toks", "[", "idx", "]", "==", "'not'", ":", "\n", "            ", "not_op", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "", "assert", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "in", "WHERE_OPS", ",", "\"Error condition: idx: {}, tok: {}\"", ".", "format", "(", "idx", ",", "toks", "[", "idx", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_select": [[341, 364], ["len", "AGG_OPS.index", "process_sql.parse_val_unit", "val_units.append", "AGG_OPS.index"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_val_unit"], ["idx", "+=", "1", "\n", "val1", "=", "val2", "=", "None", "\n", "if", "op_id", "==", "WHERE_OPS", ".", "index", "(", "'between'", ")", ":", "# between..and... special case: dual values", "\n", "            ", "idx", ",", "val1", "=", "parse_value", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "assert", "toks", "[", "idx", "]", "==", "'and'", "\n", "idx", "+=", "1", "\n", "idx", ",", "val2", "=", "parse_value", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "", "else", ":", "# normal case: single value", "\n", "            ", "idx", ",", "val1", "=", "parse_value", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "val2", "=", "None", "\n", "\n", "", "conds", ".", "append", "(", "(", "not_op", ",", "op_id", ",", "val_unit", ",", "val1", ",", "val2", ")", ")", "\n", "\n", "if", "idx", "<", "len_", "and", "(", "toks", "[", "idx", "]", "in", "CLAUSE_KEYWORDS", "or", "toks", "[", "idx", "]", "in", "(", "\")\"", ",", "\";\"", ")", "or", "toks", "[", "idx", "]", "in", "JOIN_KEYWORDS", ")", ":", "\n", "            ", "break", "\n", "\n", "", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "in", "COND_OPS", ":", "\n", "            ", "conds", ".", "append", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "# skip and/or", "\n", "\n", "", "", "return", "idx", ",", "conds", "\n", "\n", "\n", "", "def", "parse_select", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_from": [[366, 407], ["len", "toks.index", "process_sql.parse_sql", "table_units.append", "process_sql.parse_table_unit", "table_units.append", "default_tables.append", "process_sql.parse_condition", "conds.extend", "len", "conds.append"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_sql", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_table_unit", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_condition"], ["len_", "=", "len", "(", "toks", ")", "\n", "\n", "assert", "toks", "[", "idx", "]", "==", "'select'", ",", "\"'select' not found\"", "\n", "idx", "+=", "1", "\n", "isDistinct", "=", "False", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "'distinct'", ":", "\n", "        ", "idx", "+=", "1", "\n", "isDistinct", "=", "True", "\n", "", "val_units", "=", "[", "]", "\n", "\n", "while", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "not", "in", "CLAUSE_KEYWORDS", ":", "\n", "        ", "agg_id", "=", "AGG_OPS", ".", "index", "(", "\"none\"", ")", "\n", "if", "toks", "[", "idx", "]", "in", "AGG_OPS", ":", "\n", "            ", "agg_id", "=", "AGG_OPS", ".", "index", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "\n", "", "idx", ",", "val_unit", "=", "parse_val_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "val_units", ".", "append", "(", "(", "agg_id", ",", "val_unit", ")", ")", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "','", ":", "\n", "            ", "idx", "+=", "1", "# skip ','", "\n", "\n", "", "", "return", "idx", ",", "(", "isDistinct", ",", "val_units", ")", "\n", "\n", "\n", "", "def", "parse_from", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ")", ":", "\n", "    ", "\"\"\"\n    Assume in the from clause, all table units are combined with join\n    \"\"\"", "\n", "assert", "'from'", "in", "toks", "[", "start_idx", ":", "]", ",", "\"'from' not found\"", "\n", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "idx", "=", "toks", ".", "index", "(", "'from'", ",", "start_idx", ")", "+", "1", "\n", "default_tables", "=", "[", "]", "\n", "table_units", "=", "[", "]", "\n", "conds", "=", "[", "]", "\n", "\n", "while", "idx", "<", "len_", ":", "\n", "        ", "isBlock", "=", "False", "\n", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "            ", "isBlock", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "", "if", "toks", "[", "idx", "]", "==", "'select'", ":", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_where": [[409, 419], ["len", "process_sql.parse_condition"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_condition"], ["table_units", ".", "append", "(", "(", "TABLE_TYPE", "[", "'sql'", "]", ",", "sql", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "'join'", ":", "\n", "                ", "idx", "+=", "1", "# skip join", "\n", "", "idx", ",", "table_unit", ",", "table_name", "=", "parse_table_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ")", "\n", "table_units", ".", "append", "(", "(", "TABLE_TYPE", "[", "'table_unit'", "]", ",", "table_unit", ")", ")", "\n", "default_tables", ".", "append", "(", "table_name", ")", "\n", "", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "\"on\"", ":", "\n", "            ", "idx", "+=", "1", "# skip on", "\n", "idx", ",", "this_conds", "=", "parse_condition", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "if", "len", "(", "conds", ")", ">", "0", ":", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_group_by": [[421, 442], ["len", "process_sql.parse_col_unit", "col_units.append"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_col_unit"], ["", "conds", ".", "extend", "(", "this_conds", ")", "\n", "\n", "", "if", "isBlock", ":", "\n", "            ", "assert", "toks", "[", "idx", "]", "==", "')'", "\n", "idx", "+=", "1", "\n", "", "if", "idx", "<", "len_", "and", "(", "toks", "[", "idx", "]", "in", "CLAUSE_KEYWORDS", "or", "toks", "[", "idx", "]", "in", "(", "\")\"", ",", "\";\"", ")", ")", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "idx", ",", "table_units", ",", "conds", ",", "default_tables", "\n", "\n", "\n", "", "def", "parse_where", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "\n", "if", "idx", ">=", "len_", "or", "toks", "[", "idx", "]", "!=", "'where'", ":", "\n", "        ", "return", "idx", ",", "[", "]", "\n", "\n", "", "idx", "+=", "1", "\n", "idx", ",", "conds", "=", "parse_condition", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "return", "idx", ",", "conds", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_order_by": [[444, 469], ["len", "process_sql.parse_val_unit", "val_units.append"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_val_unit"], ["", "def", "parse_group_by", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "col_units", "=", "[", "]", "\n", "\n", "if", "idx", ">=", "len_", "or", "toks", "[", "idx", "]", "!=", "'group'", ":", "\n", "        ", "return", "idx", ",", "col_units", "\n", "\n", "", "idx", "+=", "1", "\n", "assert", "toks", "[", "idx", "]", "==", "'by'", "\n", "idx", "+=", "1", "\n", "\n", "while", "idx", "<", "len_", "and", "not", "(", "toks", "[", "idx", "]", "in", "CLAUSE_KEYWORDS", "or", "toks", "[", "idx", "]", "in", "(", "\")\"", ",", "\";\"", ")", ")", ":", "\n", "        ", "idx", ",", "col_unit", "=", "parse_col_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "col_units", ".", "append", "(", "col_unit", ")", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "','", ":", "\n", "            ", "idx", "+=", "1", "# skip ','", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "idx", ",", "col_units", "\n", "\n", "\n", "", "def", "parse_order_by", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_having": [[471, 481], ["len", "process_sql.parse_condition"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_condition"], ["order_type", "=", "'asc'", "# default type is 'asc'", "\n", "\n", "if", "idx", ">=", "len_", "or", "toks", "[", "idx", "]", "!=", "'order'", ":", "\n", "        ", "return", "idx", ",", "val_units", "\n", "\n", "", "idx", "+=", "1", "\n", "assert", "toks", "[", "idx", "]", "==", "'by'", "\n", "idx", "+=", "1", "\n", "\n", "while", "idx", "<", "len_", "and", "not", "(", "toks", "[", "idx", "]", "in", "CLAUSE_KEYWORDS", "or", "toks", "[", "idx", "]", "in", "(", "\")\"", ",", "\";\"", ")", ")", ":", "\n", "        ", "idx", ",", "val_unit", "=", "parse_val_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_limit": [[483, 496], ["len", "type", "int"], "function", ["None"], ["if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "in", "ORDER_OPS", ":", "\n", "            ", "order_type", "=", "toks", "[", "idx", "]", "\n", "idx", "+=", "1", "\n", "", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "','", ":", "\n", "            ", "idx", "+=", "1", "# skip ','", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "idx", ",", "(", "order_type", ",", "val_units", ")", "\n", "\n", "\n", "", "def", "parse_having", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_sql": [[498, 546], ["len", "process_sql.parse_from", "process_sql.parse_select", "process_sql.parse_where", "process_sql.parse_group_by", "process_sql.parse_having", "process_sql.parse_order_by", "process_sql.parse_limit", "process_sql.skip_semicolon", "process_sql.skip_semicolon", "process_sql.parse_sql"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_from", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_select", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_where", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_group_by", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_having", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_order_by", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_limit", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.skip_semicolon", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.skip_semicolon", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_sql"], ["if", "idx", ">=", "len_", "or", "toks", "[", "idx", "]", "!=", "'having'", ":", "\n", "        ", "return", "idx", ",", "[", "]", "\n", "\n", "", "idx", "+=", "1", "\n", "idx", ",", "conds", "=", "parse_condition", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "return", "idx", ",", "conds", "\n", "\n", "\n", "", "def", "parse_limit", "(", "toks", ",", "start_idx", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "'limit'", ":", "\n", "        ", "idx", "+=", "2", "\n", "return", "idx", ",", "int", "(", "toks", "[", "idx", "-", "1", "]", ")", "\n", "\n", "", "return", "idx", ",", "None", "\n", "\n", "\n", "", "def", "parse_sql", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ")", ":", "\n", "    ", "isBlock", "=", "False", "# indicate whether this is a block of sql/sub-sql", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "idx", "=", "start_idx", "\n", "\n", "sql", "=", "{", "}", "\n", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "        ", "isBlock", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "# parse from clause in order to get default tables", "\n", "", "from_end_idx", ",", "table_units", ",", "conds", ",", "default_tables", "=", "parse_from", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ")", "\n", "sql", "[", "'from'", "]", "=", "{", "'table_units'", ":", "table_units", ",", "'conds'", ":", "conds", "}", "\n", "# select clause", "\n", "_", ",", "select_col_units", "=", "parse_select", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "idx", "=", "from_end_idx", "\n", "sql", "[", "'select'", "]", "=", "select_col_units", "\n", "# where clause", "\n", "idx", ",", "where_conds", "=", "parse_where", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "sql", "[", "'where'", "]", "=", "where_conds", "\n", "# group by clause", "\n", "idx", ",", "group_col_units", "=", "parse_group_by", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "sql", "[", "'groupBy'", "]", "=", "group_col_units", "\n", "# having clause", "\n", "idx", ",", "having_conds", "=", "parse_having", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "sql", "[", "'having'", "]", "=", "having_conds", "\n", "# order by clause", "\n", "idx", ",", "order_col_units", "=", "parse_order_by", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "sql", "[", "'orderBy'", "]", "=", "order_col_units", "\n", "# limit clause", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.load_data": [[548, 552], ["open", "json.load"], "function", ["None"], ["sql", "[", "'limit'", "]", "=", "limit_val", "\n", "\n", "idx", "=", "skip_semicolon", "(", "toks", ",", "idx", ")", "\n", "if", "isBlock", ":", "\n", "        ", "assert", "toks", "[", "idx", "]", "==", "')'", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.get_sql": [[554, 560], ["process_sql.tokenize", "process_sql.get_tables_with_alias", "process_sql.parse_sql"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.tokenize", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.get_tables_with_alias", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.parse_sql"], ["", "idx", "=", "skip_semicolon", "(", "toks", ",", "idx", ")", "\n", "\n", "# intersect/union/except clause", "\n", "for", "op", "in", "SQL_OPS", ":", "# initialize IUE", "\n", "        ", "sql", "[", "op", "]", "=", "None", "\n", "", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "in", "SQL_OPS", ":", "\n", "        ", "sql_op", "=", "toks", "[", "idx", "]", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.skip_semicolon": [[562, 567], ["len"], "function", ["None"], ["idx", ",", "IUE_sql", "=", "parse_sql", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ")", "\n", "sql", "[", "sql_op", "]", "=", "IUE_sql", "\n", "", "return", "idx", ",", "sql", "\n", "\n", "\n", "", "def", "load_data", "(", "fpath", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluate_classical.load_predictions": [[19, 25], ["open", "preds.append", "l.strip"], "function", ["None"], ["def", "load_predictions", "(", "f_path", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "preds", "=", "[", "]", "\n", "with", "open", "(", "f_path", ",", "'r'", ")", "as", "in_file", ":", "\n", "        ", "for", "l", "in", "in_file", ":", "\n", "            ", "preds", ".", "append", "(", "l", ".", "strip", "(", ")", ")", "\n", "", "", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluate_classical.acc": [[27, 35], ["float", "len", "range", "len"], "function", ["None"], ["", "def", "acc", "(", "l", ",", "idxes", "=", "None", ")", ":", "\n", "    ", "if", "idxes", "is", "None", ":", "\n", "        ", "idxes", "=", "[", "_", "for", "_", "in", "range", "(", "len", "(", "l", ")", ")", "]", "\n", "", "c", "=", "0", "\n", "for", "idx", "in", "idxes", ":", "\n", "        ", "if", "l", "[", "idx", "]", ":", "\n", "            ", "c", "+=", "1", "\n", "", "", "return", "float", "(", "c", ")", "/", "len", "(", "idxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluate_classical.judge": [[39, 65], ["gold_query.lower", "time.time", "exec_eval.exec_on_db", "exec_eval.exec_on_db", "time.time", "print", "exec_eval.result_eq", "int"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.exec_on_db", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.exec_on_db", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.result_eq"], ["", "def", "judge", "(", "args", ":", "Tuple", "[", "Dict", "[", "str", ",", "Any", "]", ",", "str", "]", ")", "->", "bool", ":", "\n", "    ", "gold_dict", ",", "pred", "=", "args", "\n", "\n", "testsuite_paths", "=", "gold_dict", "[", "'testsuite'", "]", "\n", "gold_query", "=", "gold_dict", "[", "'query'", "]", "\n", "order_matters", "=", "'order by'", "in", "gold_query", ".", "lower", "(", ")", "\n", "\n", "pass_all_testcase", "=", "True", "\n", "for", "testcase_path", "in", "testsuite_paths", ":", "\n", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "flg", ",", "gold_result", "=", "exec_on_db", "(", "testcase_path", ",", "gold_query", ",", "timeout", "=", "GOLD_TIMEOUT", ")", "\n", "duration", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "timeout", "=", "ADDITIVE_OVERHEAD", "+", "MULTIPLICATIVE_OVERHEAD", "*", "duration", "\n", "\n", "if", "flg", "!=", "'result'", ":", "\n", "            ", "print", "(", "'Warning: executing gold query results in an exception'", ")", "\n", "continue", "\n", "", "flg", ",", "pred_result", "=", "exec_on_db", "(", "testcase_path", ",", "pred", ",", "timeout", "=", "int", "(", "timeout", ")", ")", "\n", "if", "flg", "!=", "'result'", ":", "\n", "            ", "pass_all_testcase", "=", "False", "\n", "break", "\n", "", "if", "not", "result_eq", "(", "gold_result", ",", "pred_result", ",", "order_matters", ")", ":", "\n", "            ", "pass_all_testcase", "=", "False", "\n", "break", "\n", "", "", "return", "pass_all_testcase", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluate_classical.main": [[67, 83], ["pickle.load", "collections.defaultdict", "enumerate", "open", "len", "len", "group_name2idxes[].append", "multiprocessing.Pool", "list", "print", "collections.defaultdict.items", "tqdm.tqdm", "evaluate_classical.acc", "print", "pool.imap", "evaluate_classical.acc", "zip", "len"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluate_classical.acc", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluate_classical.acc"], ["", "def", "main", "(", "preds", ":", "List", "[", "str", "]", ",", "verbose", ":", "bool", "=", "True", ",", "num_processes", ":", "int", "=", "NUM_PROCESSES", ")", "->", "List", "[", "bool", "]", ":", "\n", "    ", "gold_dicts", "=", "pkl", ".", "load", "(", "open", "(", "'classical_test.pkl'", ",", "'rb'", ")", ")", "\n", "assert", "len", "(", "gold_dicts", ")", "==", "len", "(", "preds", ")", ",", "'number of gold and prediction should be equal'", "\n", "group_name2idxes", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "idx", ",", "gold_dict", "in", "enumerate", "(", "gold_dicts", ")", ":", "\n", "        ", "group_name2idxes", "[", "gold_dict", "[", "'db_id'", "]", "]", ".", "append", "(", "idx", ")", "\n", "\n", "", "with", "Pool", "(", "num_processes", ")", "as", "pool", ":", "\n", "        ", "result", "=", "list", "(", "tqdm", ".", "tqdm", "(", "pool", ".", "imap", "(", "judge", ",", "zip", "(", "gold_dicts", ",", "preds", ")", ")", ",", "total", "=", "len", "(", "gold_dicts", ")", ")", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "'overall accuracy: '", ",", "acc", "(", "result", ")", ")", "\n", "for", "group", ",", "idxes", "in", "group_name2idxes", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'accuracy for '", ",", "group", ",", "acc", "(", "result", ",", "idxes", ")", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.Evaluator.__init__": [[358, 360], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "partial_scores", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.Evaluator.eval_hardness": [[361, 377], ["evaluation.count_component1", "evaluation.count_component2", "evaluation.count_others"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.count_component1", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.count_component2", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.count_others"], ["", "def", "eval_hardness", "(", "self", ",", "sql", ")", ":", "\n", "        ", "count_comp1_", "=", "count_component1", "(", "sql", ")", "\n", "count_comp2_", "=", "count_component2", "(", "sql", ")", "\n", "count_others_", "=", "count_others", "(", "sql", ")", "\n", "\n", "if", "count_comp1_", "<=", "1", "and", "count_others_", "==", "0", "and", "count_comp2_", "==", "0", ":", "\n", "            ", "return", "\"easy\"", "\n", "", "elif", "(", "count_others_", "<=", "2", "and", "count_comp1_", "<=", "1", "and", "count_comp2_", "==", "0", ")", "or", "(", "count_comp1_", "<=", "2", "and", "count_others_", "<", "2", "and", "count_comp2_", "==", "0", ")", ":", "\n", "            ", "return", "\"medium\"", "\n", "", "elif", "(", "count_others_", ">", "2", "and", "count_comp1_", "<=", "2", "and", "count_comp2_", "==", "0", ")", "or", "(", "2", "<", "count_comp1_", "<=", "3", "and", "count_others_", "<=", "2", "and", "count_comp2_", "==", "0", ")", "or", "(", "count_comp1_", "<=", "1", "and", "count_others_", "==", "0", "and", "count_comp2_", "<=", "1", ")", ":", "\n", "            ", "return", "\"hard\"", "\n", "", "else", ":", "\n", "            ", "return", "\"extra\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.Evaluator.eval_exact_match": [[378, 391], ["evaluation.Evaluator.eval_partial_match", "evaluation.Evaluator.items", "len", "sorted", "sorted"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.Evaluator.eval_partial_match"], ["", "", "def", "eval_exact_match", "(", "self", ",", "pred", ",", "label", ")", ":", "\n", "        ", "partial_scores", "=", "self", ".", "eval_partial_match", "(", "pred", ",", "label", ")", "\n", "self", ".", "partial_scores", "=", "partial_scores", "\n", "\n", "for", "key", ",", "score", "in", "partial_scores", ".", "items", "(", ")", ":", "\n", "            ", "if", "score", "[", "'f1'", "]", "!=", "1", ":", "\n", "                ", "return", "0", "\n", "\n", "", "", "if", "len", "(", "label", "[", "'from'", "]", "[", "'table_units'", "]", ")", ">", "0", ":", "\n", "            ", "label_tables", "=", "sorted", "(", "label", "[", "'from'", "]", "[", "'table_units'", "]", ")", "\n", "pred_tables", "=", "sorted", "(", "pred", "[", "'from'", "]", "[", "'table_units'", "]", ")", "\n", "return", "label_tables", "==", "pred_tables", "\n", "", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.Evaluator.eval_partial_match": [[392, 432], ["evaluation.eval_sel", "evaluation.get_scores", "evaluation.get_scores", "evaluation.eval_where", "evaluation.get_scores", "evaluation.get_scores", "evaluation.eval_group", "evaluation.get_scores", "evaluation.eval_having", "evaluation.get_scores", "evaluation.eval_order", "evaluation.get_scores", "evaluation.eval_and_or", "evaluation.get_scores", "evaluation.eval_IUEN", "evaluation.get_scores", "evaluation.eval_keywords", "evaluation.get_scores"], "methods", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.eval_sel", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.get_scores", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.get_scores", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.eval_where", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.get_scores", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.get_scores", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.eval_group", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.get_scores", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.eval_having", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.get_scores", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.eval_order", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.get_scores", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.eval_and_or", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.get_scores", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.eval_IUEN", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.get_scores", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.eval_keywords", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.get_scores"], ["", "def", "eval_partial_match", "(", "self", ",", "pred", ",", "label", ")", ":", "\n", "        ", "res", "=", "{", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", ",", "cnt_wo_agg", "=", "eval_sel", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'select'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt_wo_agg", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'select(no AGG)'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", ",", "cnt_wo_agg", "=", "eval_where", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'where'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt_wo_agg", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'where(no OP)'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_group", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'group(no Having)'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_having", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'group'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_order", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'order'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_and_or", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'and/or'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_IUEN", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'IUEN'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_keywords", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'keywords'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.condition_has_or": [[58, 60], ["None"], "function", ["None"], ["def", "condition_has_or", "(", "conds", ")", ":", "\n", "    ", "return", "'or'", "in", "conds", "[", "1", ":", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.condition_has_like": [[62, 64], ["WHERE_OPS.index"], "function", ["None"], ["", "def", "condition_has_like", "(", "conds", ")", ":", "\n", "    ", "return", "WHERE_OPS", ".", "index", "(", "'like'", ")", "in", "[", "cond_unit", "[", "1", "]", "for", "cond_unit", "in", "conds", "[", ":", ":", "2", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.condition_has_sql": [[66, 74], ["type", "type"], "function", ["None"], ["", "def", "condition_has_sql", "(", "conds", ")", ":", "\n", "    ", "for", "cond_unit", "in", "conds", "[", ":", ":", "2", "]", ":", "\n", "        ", "val1", ",", "val2", "=", "cond_unit", "[", "3", "]", ",", "cond_unit", "[", "4", "]", "\n", "if", "val1", "is", "not", "None", "and", "type", "(", "val1", ")", "is", "dict", ":", "\n", "            ", "return", "True", "\n", "", "if", "val2", "is", "not", "None", "and", "type", "(", "val2", ")", "is", "dict", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.val_has_op": [[76, 78], ["UNIT_OPS.index"], "function", ["None"], ["", "def", "val_has_op", "(", "val_unit", ")", ":", "\n", "    ", "return", "val_unit", "[", "0", "]", "!=", "UNIT_OPS", ".", "index", "(", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.has_agg": [[80, 82], ["AGG_OPS.index"], "function", ["None"], ["", "def", "has_agg", "(", "unit", ")", ":", "\n", "    ", "return", "unit", "[", "0", "]", "!=", "AGG_OPS", ".", "index", "(", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.accuracy": [[84, 88], ["None"], "function", ["None"], ["", "def", "accuracy", "(", "count", ",", "total", ")", ":", "\n", "    ", "if", "count", "==", "total", ":", "\n", "        ", "return", "1", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.recall": [[90, 94], ["None"], "function", ["None"], ["", "def", "recall", "(", "count", ",", "total", ")", ":", "\n", "    ", "if", "count", "==", "total", ":", "\n", "        ", "return", "1", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.F1": [[96, 100], ["None"], "function", ["None"], ["", "def", "F1", "(", "acc", ",", "rec", ")", ":", "\n", "    ", "if", "(", "acc", "+", "rec", ")", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "return", "(", "2.", "*", "acc", "*", "rec", ")", "/", "(", "acc", "+", "rec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.get_scores": [[102, 108], ["None"], "function", ["None"], ["", "def", "get_scores", "(", "count", ",", "pred_total", ",", "label_total", ")", ":", "\n", "    ", "if", "pred_total", "!=", "label_total", ":", "\n", "        ", "return", "0", ",", "0", ",", "0", "\n", "", "elif", "count", "==", "pred_total", ":", "\n", "        ", "return", "1", ",", "1", ",", "1", "\n", "", "return", "0", ",", "0", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.eval_sel": [[110, 128], ["len", "len", "label_sel.remove", "label_wo_agg.remove"], "function", ["None"], ["", "def", "eval_sel", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_sel", "=", "pred", "[", "'select'", "]", "[", "1", "]", "\n", "label_sel", "=", "label", "[", "'select'", "]", "[", "1", "]", "\n", "label_wo_agg", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "label_sel", "]", "\n", "pred_total", "=", "len", "(", "pred_sel", ")", "\n", "label_total", "=", "len", "(", "label_sel", ")", "\n", "cnt", "=", "0", "\n", "cnt_wo_agg", "=", "0", "\n", "\n", "for", "unit", "in", "pred_sel", ":", "\n", "        ", "if", "unit", "in", "label_sel", ":", "\n", "            ", "cnt", "+=", "1", "\n", "label_sel", ".", "remove", "(", "unit", ")", "\n", "", "if", "unit", "[", "1", "]", "in", "label_wo_agg", ":", "\n", "            ", "cnt_wo_agg", "+=", "1", "\n", "label_wo_agg", ".", "remove", "(", "unit", "[", "1", "]", ")", "\n", "\n", "", "", "return", "label_total", ",", "pred_total", ",", "cnt", ",", "cnt_wo_agg", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.eval_where": [[130, 148], ["len", "len", "label_conds.remove", "label_wo_agg.remove"], "function", ["None"], ["", "def", "eval_where", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_conds", "=", "[", "unit", "for", "unit", "in", "pred", "[", "'where'", "]", "[", ":", ":", "2", "]", "]", "\n", "label_conds", "=", "[", "unit", "for", "unit", "in", "label", "[", "'where'", "]", "[", ":", ":", "2", "]", "]", "\n", "label_wo_agg", "=", "[", "unit", "[", "2", "]", "for", "unit", "in", "label_conds", "]", "\n", "pred_total", "=", "len", "(", "pred_conds", ")", "\n", "label_total", "=", "len", "(", "label_conds", ")", "\n", "cnt", "=", "0", "\n", "cnt_wo_agg", "=", "0", "\n", "\n", "for", "unit", "in", "pred_conds", ":", "\n", "        ", "if", "unit", "in", "label_conds", ":", "\n", "            ", "cnt", "+=", "1", "\n", "label_conds", ".", "remove", "(", "unit", ")", "\n", "", "if", "unit", "[", "2", "]", "in", "label_wo_agg", ":", "\n", "            ", "cnt_wo_agg", "+=", "1", "\n", "label_wo_agg", ".", "remove", "(", "unit", "[", "2", "]", ")", "\n", "\n", "", "", "return", "label_total", ",", "pred_total", ",", "cnt", ",", "cnt_wo_agg", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.eval_group": [[150, 163], ["len", "len", "label_cols.remove", "pred.split", "label.split"], "function", ["None"], ["", "def", "eval_group", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_cols", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "pred", "[", "'groupBy'", "]", "]", "\n", "label_cols", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "label", "[", "'groupBy'", "]", "]", "\n", "pred_total", "=", "len", "(", "pred_cols", ")", "\n", "label_total", "=", "len", "(", "label_cols", ")", "\n", "cnt", "=", "0", "\n", "pred_cols", "=", "[", "pred", ".", "split", "(", "\".\"", ")", "[", "1", "]", "if", "\".\"", "in", "pred", "else", "pred", "for", "pred", "in", "pred_cols", "]", "\n", "label_cols", "=", "[", "label", ".", "split", "(", "\".\"", ")", "[", "1", "]", "if", "\".\"", "in", "label", "else", "label", "for", "label", "in", "label_cols", "]", "\n", "for", "col", "in", "pred_cols", ":", "\n", "        ", "if", "col", "in", "label_cols", ":", "\n", "            ", "cnt", "+=", "1", "\n", "label_cols", ".", "remove", "(", "col", ")", "\n", "", "", "return", "label_total", ",", "pred_total", ",", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.eval_having": [[165, 180], ["len", "len"], "function", ["None"], ["", "def", "eval_having", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_total", "=", "label_total", "=", "cnt", "=", "0", "\n", "if", "len", "(", "pred", "[", "'groupBy'", "]", ")", ">", "0", ":", "\n", "        ", "pred_total", "=", "1", "\n", "", "if", "len", "(", "label", "[", "'groupBy'", "]", ")", ">", "0", ":", "\n", "        ", "label_total", "=", "1", "\n", "\n", "", "pred_cols", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "pred", "[", "'groupBy'", "]", "]", "\n", "label_cols", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "label", "[", "'groupBy'", "]", "]", "\n", "if", "pred_total", "==", "label_total", "==", "1", "and", "pred_cols", "==", "label_cols", "and", "pred", "[", "'having'", "]", "==", "label", "[", "'having'", "]", ":", "\n", "        ", "cnt", "=", "1", "\n", "\n", "", "return", "label_total", ",", "pred_total", ",", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.eval_order": [[182, 192], ["len", "len", "len"], "function", ["None"], ["", "def", "eval_order", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_total", "=", "label_total", "=", "cnt", "=", "0", "\n", "if", "len", "(", "pred", "[", "'orderBy'", "]", ")", ">", "0", ":", "\n", "        ", "pred_total", "=", "1", "\n", "", "if", "len", "(", "label", "[", "'orderBy'", "]", ")", ">", "0", ":", "\n", "        ", "label_total", "=", "1", "\n", "", "if", "len", "(", "label", "[", "'orderBy'", "]", ")", ">", "0", "and", "pred", "[", "'orderBy'", "]", "==", "label", "[", "'orderBy'", "]", "and", "(", "(", "pred", "[", "'limit'", "]", "is", "None", "and", "label", "[", "'limit'", "]", "is", "None", ")", "or", "(", "pred", "[", "'limit'", "]", "is", "not", "None", "and", "label", "[", "'limit'", "]", "is", "not", "None", ")", ")", ":", "\n", "        ", "cnt", "=", "1", "\n", "", "return", "label_total", ",", "pred_total", ",", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.eval_and_or": [[194, 203], ["set", "set", "len", "len"], "function", ["None"], ["", "def", "eval_and_or", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_ao", "=", "pred", "[", "'where'", "]", "[", "1", ":", ":", "2", "]", "\n", "label_ao", "=", "label", "[", "'where'", "]", "[", "1", ":", ":", "2", "]", "\n", "pred_ao", "=", "set", "(", "pred_ao", ")", "\n", "label_ao", "=", "set", "(", "label_ao", ")", "\n", "\n", "if", "pred_ao", "==", "label_ao", ":", "\n", "        ", "return", "1", ",", "1", ",", "1", "\n", "", "return", "len", "(", "pred_ao", ")", ",", "len", "(", "label_ao", ")", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.get_nestedSQL": [[205, 219], ["nested.append", "nested.append", "nested.append", "type", "nested.append", "type", "nested.append"], "function", ["None"], ["", "def", "get_nestedSQL", "(", "sql", ")", ":", "\n", "    ", "nested", "=", "[", "]", "\n", "for", "cond_unit", "in", "sql", "[", "'from'", "]", "[", "'conds'", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "'where'", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "'having'", "]", "[", ":", ":", "2", "]", ":", "\n", "        ", "if", "type", "(", "cond_unit", "[", "3", "]", ")", "is", "dict", ":", "\n", "            ", "nested", ".", "append", "(", "cond_unit", "[", "3", "]", ")", "\n", "", "if", "type", "(", "cond_unit", "[", "4", "]", ")", "is", "dict", ":", "\n", "            ", "nested", ".", "append", "(", "cond_unit", "[", "4", "]", ")", "\n", "", "", "if", "sql", "[", "'intersect'", "]", "is", "not", "None", ":", "\n", "        ", "nested", ".", "append", "(", "sql", "[", "'intersect'", "]", ")", "\n", "", "if", "sql", "[", "'except'", "]", "is", "not", "None", ":", "\n", "        ", "nested", ".", "append", "(", "sql", "[", "'except'", "]", ")", "\n", "", "if", "sql", "[", "'union'", "]", "is", "not", "None", ":", "\n", "        ", "nested", ".", "append", "(", "sql", "[", "'union'", "]", ")", "\n", "", "return", "nested", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.eval_nested": [[221, 232], ["evaluation.Evaluator.eval_exact_match", "evaluation.Evaluator"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.Evaluator.eval_exact_match"], ["", "def", "eval_nested", "(", "pred", ",", "label", ")", ":", "\n", "    ", "label_total", "=", "0", "\n", "pred_total", "=", "0", "\n", "cnt", "=", "0", "\n", "if", "pred", "is", "not", "None", ":", "\n", "        ", "pred_total", "+=", "1", "\n", "", "if", "label", "is", "not", "None", ":", "\n", "        ", "label_total", "+=", "1", "\n", "", "if", "pred", "is", "not", "None", "and", "label", "is", "not", "None", ":", "\n", "        ", "cnt", "+=", "Evaluator", "(", ")", ".", "eval_exact_match", "(", "pred", ",", "label", ")", "\n", "", "return", "label_total", ",", "pred_total", ",", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.eval_IUEN": [[234, 242], ["evaluation.eval_nested", "evaluation.eval_nested", "evaluation.eval_nested"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.eval_nested", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.eval_nested", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.eval_nested"], ["", "def", "eval_IUEN", "(", "pred", ",", "label", ")", ":", "\n", "    ", "lt1", ",", "pt1", ",", "cnt1", "=", "eval_nested", "(", "pred", "[", "'intersect'", "]", ",", "label", "[", "'intersect'", "]", ")", "\n", "lt2", ",", "pt2", ",", "cnt2", "=", "eval_nested", "(", "pred", "[", "'except'", "]", ",", "label", "[", "'except'", "]", ")", "\n", "lt3", ",", "pt3", ",", "cnt3", "=", "eval_nested", "(", "pred", "[", "'union'", "]", ",", "label", "[", "'union'", "]", ")", "\n", "label_total", "=", "lt1", "+", "lt2", "+", "lt3", "\n", "pred_total", "=", "pt1", "+", "pt2", "+", "pt3", "\n", "cnt", "=", "cnt1", "+", "cnt2", "+", "cnt3", "\n", "return", "label_total", ",", "pred_total", ",", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.get_keywords": [[244, 283], ["set", "len", "set.add", "len", "set.add", "len", "set.add", "len", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "len", "set.add", "len", "set.add", "len", "set.add", "len", "set.add", "WHERE_OPS.index", "WHERE_OPS.index"], "function", ["None"], ["", "def", "get_keywords", "(", "sql", ")", ":", "\n", "    ", "res", "=", "set", "(", ")", "\n", "if", "len", "(", "sql", "[", "'where'", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'where'", ")", "\n", "", "if", "len", "(", "sql", "[", "'groupBy'", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'group'", ")", "\n", "", "if", "len", "(", "sql", "[", "'having'", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'having'", ")", "\n", "", "if", "len", "(", "sql", "[", "'orderBy'", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "sql", "[", "'orderBy'", "]", "[", "0", "]", ")", "\n", "res", ".", "add", "(", "'order'", ")", "\n", "", "if", "sql", "[", "'limit'", "]", "is", "not", "None", ":", "\n", "        ", "res", ".", "add", "(", "'limit'", ")", "\n", "", "if", "sql", "[", "'except'", "]", "is", "not", "None", ":", "\n", "        ", "res", ".", "add", "(", "'except'", ")", "\n", "", "if", "sql", "[", "'union'", "]", "is", "not", "None", ":", "\n", "        ", "res", ".", "add", "(", "'union'", ")", "\n", "", "if", "sql", "[", "'intersect'", "]", "is", "not", "None", ":", "\n", "        ", "res", ".", "add", "(", "'intersect'", ")", "\n", "\n", "# or keyword", "\n", "", "ao", "=", "sql", "[", "'from'", "]", "[", "'conds'", "]", "[", "1", ":", ":", "2", "]", "+", "sql", "[", "'where'", "]", "[", "1", ":", ":", "2", "]", "+", "sql", "[", "'having'", "]", "[", "1", ":", ":", "2", "]", "\n", "if", "len", "(", "[", "token", "for", "token", "in", "ao", "if", "token", "==", "'or'", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'or'", ")", "\n", "\n", "", "cond_units", "=", "sql", "[", "'from'", "]", "[", "'conds'", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "'where'", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "'having'", "]", "[", ":", ":", "2", "]", "\n", "# not keyword", "\n", "if", "len", "(", "[", "cond_unit", "for", "cond_unit", "in", "cond_units", "if", "cond_unit", "[", "0", "]", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'not'", ")", "\n", "\n", "# in keyword", "\n", "", "if", "len", "(", "[", "cond_unit", "for", "cond_unit", "in", "cond_units", "if", "cond_unit", "[", "1", "]", "==", "WHERE_OPS", ".", "index", "(", "'in'", ")", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'in'", ")", "\n", "\n", "# like keyword", "\n", "", "if", "len", "(", "[", "cond_unit", "for", "cond_unit", "in", "cond_units", "if", "cond_unit", "[", "1", "]", "==", "WHERE_OPS", ".", "index", "(", "'like'", ")", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'like'", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.eval_keywords": [[285, 296], ["evaluation.get_keywords", "evaluation.get_keywords", "len", "len"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.get_keywords", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.get_keywords"], ["", "def", "eval_keywords", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_keywords", "=", "get_keywords", "(", "pred", ")", "\n", "label_keywords", "=", "get_keywords", "(", "label", ")", "\n", "pred_total", "=", "len", "(", "pred_keywords", ")", "\n", "label_total", "=", "len", "(", "label_keywords", ")", "\n", "cnt", "=", "0", "\n", "\n", "for", "k", "in", "pred_keywords", ":", "\n", "        ", "if", "k", "in", "label_keywords", ":", "\n", "            ", "cnt", "+=", "1", "\n", "", "", "return", "label_total", ",", "pred_total", ",", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.count_agg": [[298, 300], ["len", "evaluation.has_agg"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.has_agg"], ["", "def", "count_agg", "(", "units", ")", ":", "\n", "    ", "return", "len", "(", "[", "unit", "for", "unit", "in", "units", "if", "has_agg", "(", "unit", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.count_component1": [[302, 321], ["len", "len", "len", "len", "len", "len", "len", "WHERE_OPS.index"], "function", ["None"], ["", "def", "count_component1", "(", "sql", ")", ":", "\n", "    ", "count", "=", "0", "\n", "if", "len", "(", "sql", "[", "'where'", "]", ")", ">", "0", ":", "\n", "        ", "count", "+=", "1", "\n", "", "if", "len", "(", "sql", "[", "'groupBy'", "]", ")", ">", "0", ":", "\n", "        ", "count", "+=", "1", "\n", "", "if", "len", "(", "sql", "[", "'orderBy'", "]", ")", ">", "0", ":", "\n", "        ", "count", "+=", "1", "\n", "", "if", "sql", "[", "'limit'", "]", "is", "not", "None", ":", "\n", "        ", "count", "+=", "1", "\n", "", "if", "len", "(", "sql", "[", "'from'", "]", "[", "'table_units'", "]", ")", ">", "0", ":", "# JOIN", "\n", "        ", "count", "+=", "len", "(", "sql", "[", "'from'", "]", "[", "'table_units'", "]", ")", "-", "1", "\n", "\n", "", "ao", "=", "sql", "[", "'from'", "]", "[", "'conds'", "]", "[", "1", ":", ":", "2", "]", "+", "sql", "[", "'where'", "]", "[", "1", ":", ":", "2", "]", "+", "sql", "[", "'having'", "]", "[", "1", ":", ":", "2", "]", "\n", "count", "+=", "len", "(", "[", "token", "for", "token", "in", "ao", "if", "token", "==", "'or'", "]", ")", "\n", "cond_units", "=", "sql", "[", "'from'", "]", "[", "'conds'", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "'where'", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "'having'", "]", "[", ":", ":", "2", "]", "\n", "count", "+=", "len", "(", "[", "cond_unit", "for", "cond_unit", "in", "cond_units", "if", "cond_unit", "[", "1", "]", "==", "WHERE_OPS", ".", "index", "(", "'like'", ")", "]", ")", "\n", "\n", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.count_component2": [[323, 326], ["evaluation.get_nestedSQL", "len"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.get_nestedSQL"], ["", "def", "count_component2", "(", "sql", ")", ":", "\n", "    ", "nested", "=", "get_nestedSQL", "(", "sql", ")", "\n", "return", "len", "(", "nested", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.count_others": [[328, 354], ["evaluation.count_agg", "evaluation.count_agg", "evaluation.count_agg", "evaluation.count_agg", "len", "evaluation.count_agg", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.count_agg", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.count_agg", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.count_agg", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.count_agg", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.count_agg"], ["", "def", "count_others", "(", "sql", ")", ":", "\n", "    ", "count", "=", "0", "\n", "# number of aggregation", "\n", "agg_count", "=", "count_agg", "(", "sql", "[", "'select'", "]", "[", "1", "]", ")", "\n", "agg_count", "+=", "count_agg", "(", "sql", "[", "'where'", "]", "[", ":", ":", "2", "]", ")", "\n", "agg_count", "+=", "count_agg", "(", "sql", "[", "'groupBy'", "]", ")", "\n", "if", "len", "(", "sql", "[", "'orderBy'", "]", ")", ">", "0", ":", "\n", "        ", "agg_count", "+=", "count_agg", "(", "[", "unit", "[", "1", "]", "for", "unit", "in", "sql", "[", "'orderBy'", "]", "[", "1", "]", "if", "unit", "[", "1", "]", "]", "+", "\n", "[", "unit", "[", "2", "]", "for", "unit", "in", "sql", "[", "'orderBy'", "]", "[", "1", "]", "if", "unit", "[", "2", "]", "]", ")", "\n", "", "agg_count", "+=", "count_agg", "(", "sql", "[", "'having'", "]", ")", "\n", "if", "agg_count", ">", "1", ":", "\n", "        ", "count", "+=", "1", "\n", "\n", "# number of select columns", "\n", "", "if", "len", "(", "sql", "[", "'select'", "]", "[", "1", "]", ")", ">", "1", ":", "\n", "        ", "count", "+=", "1", "\n", "\n", "# number of where conditions", "\n", "", "if", "len", "(", "sql", "[", "'where'", "]", ")", ">", "1", ":", "\n", "        ", "count", "+=", "1", "\n", "\n", "# number of group by clauses", "\n", "", "if", "len", "(", "sql", "[", "'groupBy'", "]", ")", ">", "1", ":", "\n", "        ", "count", "+=", "1", "\n", "\n", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.isValidSQL": [[434, 442], ["sqlite3.connect", "sqlite3.connect.cursor", "conn.cursor.execute"], "function", ["None"], ["", "", "def", "isValidSQL", "(", "sql", ",", "db", ")", ":", "\n", "    ", "conn", "=", "sqlite3", ".", "connect", "(", "db", ")", "\n", "cursor", "=", "conn", ".", "cursor", "(", ")", "\n", "try", ":", "\n", "        ", "cursor", ".", "execute", "(", "sql", ")", "\n", "", "except", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.print_formated_s": [[445, 448], ["print", "template.format", "len"], "function", ["None"], ["", "def", "print_formated_s", "(", "row_name", ",", "l", ",", "element_format", ")", ":", "\n", "    ", "template", "=", "\"{:20} \"", "+", "' '", ".", "join", "(", "[", "element_format", "]", "*", "len", "(", "l", ")", ")", "\n", "print", "(", "template", ".", "format", "(", "row_name", ",", "*", "l", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.print_scores": [[450, 502], ["evaluation.print_formated_s", "evaluation.print_formated_s", "levels.append", "print", "evaluation.print_formated_s", "print", "evaluation.print_formated_s", "print", "print", "print", "print", "print", "evaluation.print_formated_s", "evaluation.print_formated_s", "evaluation.print_formated_s", "evaluation.print_formated_s", "evaluation.print_formated_s", "print", "evaluation.print_formated_s", "print", "evaluation.print_formated_s"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.print_formated_s", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.print_formated_s", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.print_formated_s", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.print_formated_s", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.print_formated_s", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.print_formated_s", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.print_formated_s", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.print_formated_s", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.print_formated_s", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.print_formated_s", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.print_formated_s"], ["", "def", "print_scores", "(", "scores", ",", "etype", ",", "include_turn_acc", "=", "True", ")", ":", "\n", "    ", "turns", "=", "[", "'turn 1'", ",", "'turn 2'", ",", "'turn 3'", ",", "'turn 4'", ",", "'turn > 4'", "]", "\n", "levels", "=", "[", "'easy'", ",", "'medium'", ",", "'hard'", ",", "'extra'", ",", "'all'", "]", "\n", "if", "include_turn_acc", ":", "\n", "        ", "levels", ".", "append", "(", "'joint_all'", ")", "\n", "", "partial_types", "=", "[", "'select'", ",", "'select(no AGG)'", ",", "'where'", ",", "'where(no OP)'", ",", "'group(no Having)'", ",", "\n", "'group'", ",", "'order'", ",", "'and/or'", ",", "'IUEN'", ",", "'keywords'", "]", "\n", "\n", "print_formated_s", "(", "\"\"", ",", "levels", ",", "'{:20}'", ")", "\n", "counts", "=", "[", "scores", "[", "level", "]", "[", "'count'", "]", "for", "level", "in", "levels", "]", "\n", "print_formated_s", "(", "\"count\"", ",", "counts", ",", "'{:<20d}'", ")", "\n", "\n", "if", "etype", "in", "[", "\"all\"", ",", "\"exec\"", "]", ":", "\n", "        ", "print", "(", "'=====================   EXECUTION ACCURACY     ====================='", ")", "\n", "exec_scores", "=", "[", "scores", "[", "level", "]", "[", "'exec'", "]", "for", "level", "in", "levels", "]", "\n", "print_formated_s", "(", "\"execution\"", ",", "exec_scores", ",", "'{:<20.3f}'", ")", "\n", "\n", "", "if", "etype", "in", "[", "\"all\"", ",", "\"match\"", "]", ":", "\n", "        ", "print", "(", "'\\n====================== EXACT MATCHING ACCURACY ====================='", ")", "\n", "exact_scores", "=", "[", "scores", "[", "level", "]", "[", "'exact'", "]", "for", "level", "in", "levels", "]", "\n", "print_formated_s", "(", "\"exact match\"", ",", "exact_scores", ",", "'{:<20.3f}'", ")", "\n", "print", "(", "'\\n---------------------PARTIAL MATCHING ACCURACY----------------------'", ")", "\n", "for", "type_", "in", "partial_types", ":", "\n", "            ", "this_scores", "=", "[", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "for", "level", "in", "levels", "]", "\n", "print_formated_s", "(", "type_", ",", "this_scores", ",", "'{:<20.3f}'", ")", "\n", "\n", "", "print", "(", "'---------------------- PARTIAL MATCHING RECALL ----------------------'", ")", "\n", "for", "type_", "in", "partial_types", ":", "\n", "            ", "this_scores", "=", "[", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "for", "level", "in", "levels", "]", "\n", "print_formated_s", "(", "type_", ",", "this_scores", ",", "'{:<20.3f}'", ")", "\n", "\n", "", "print", "(", "'---------------------- PARTIAL MATCHING F1 --------------------------'", ")", "\n", "for", "type_", "in", "partial_types", ":", "\n", "            ", "this_scores", "=", "[", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'f1'", "]", "for", "level", "in", "levels", "]", "\n", "print_formated_s", "(", "type_", ",", "this_scores", ",", "'{:<20.3f}'", ")", "\n", "\n", "", "", "if", "include_turn_acc", ":", "\n", "        ", "print", "(", ")", "\n", "print", "(", ")", "\n", "print_formated_s", "(", "\"\"", ",", "turns", ",", "'{:20}'", ")", "\n", "counts", "=", "[", "scores", "[", "turn", "]", "[", "'count'", "]", "for", "turn", "in", "turns", "]", "\n", "print_formated_s", "(", "\"count\"", ",", "counts", ",", "\"{:<20d}\"", ")", "\n", "\n", "if", "etype", "in", "[", "\"all\"", ",", "\"exec\"", "]", ":", "\n", "            ", "print", "(", "'=====================   TURN EXECUTION ACCURACY     ====================='", ")", "\n", "exec_scores", "=", "[", "scores", "[", "turn", "]", "[", "'exec'", "]", "for", "turn", "in", "turns", "]", "\n", "print_formated_s", "(", "\"execution\"", ",", "exec_scores", ",", "'{:<20.3f}'", ")", "\n", "\n", "", "if", "etype", "in", "[", "\"all\"", ",", "\"match\"", "]", ":", "\n", "            ", "print", "(", "'\\n====================== TURN EXACT MATCHING ACCURACY ====================='", ")", "\n", "exact_scores", "=", "[", "scores", "[", "turn", "]", "[", "'exact'", "]", "for", "turn", "in", "turns", "]", "\n", "print_formated_s", "(", "\"exact match\"", ",", "exact_scores", ",", "'{:<20.3f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.evaluate": [[504, 706], ["evaluation.Evaluator", "enumerate", "evaluation.print_scores", "open", "f.readlines", "len", "open", "f.readlines", "len", "len", "zip", "enumerate", "all", "all", "len", "glist.append", "len", "plist.append", "print", "zip", "p_str.replace.replace", "os.path.join", "process_sql.Schema", "process_sql.get_sql", "evaluation.Evaluator.eval_hardness", "len", "glist.append", "l.strip().split", "gseq_one.append", "len", "plist.append", "pseq_one.append", "process_sql.get_schema", "str", "process_sql.get_sql", "exec_eval.eval_exec_match", "evaluation.build_valid_col_units", "evaluation.rebuild_sql_val", "evaluation.rebuild_sql_col", "evaluation.build_valid_col_units", "evaluation.rebuild_sql_val", "evaluation.rebuild_sql_col", "evaluation.Evaluator.eval_exact_match", "entries.append", "l.strip", "l.strip", "l.strip().split", "turn_scores[].append", "turn_scores[].append", "turn_scores[].append", "print", "print", "print", "turn_scores[].append", "l.strip", "l.strip"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.print_scores", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.get_sql", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.Evaluator.eval_hardness", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.get_schema", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.process_sql.get_sql", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.exec_eval.eval_exec_match", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.build_valid_col_units", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_sql_val", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_sql_col", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.build_valid_col_units", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_sql_val", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_sql_col", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.Evaluator.eval_exact_match"], ["", "", "", "def", "evaluate", "(", "gold", ",", "predict", ",", "db_dir", ",", "etype", ",", "kmaps", ",", "plug_value", ",", "keep_distinct", ",", "progress_bar_for_each_datapoint", ")", ":", "\n", "\n", "    ", "with", "open", "(", "gold", ")", "as", "f", ":", "\n", "        ", "glist", "=", "[", "]", "\n", "gseq_one", "=", "[", "]", "\n", "for", "l", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "if", "len", "(", "l", ".", "strip", "(", ")", ")", "==", "0", ":", "\n", "                ", "glist", ".", "append", "(", "gseq_one", ")", "\n", "gseq_one", "=", "[", "]", "\n", "", "else", ":", "\n", "                ", "lstrip", "=", "l", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "gseq_one", ".", "append", "(", "lstrip", ")", "\n", "\n", "# include the last session", "\n", "# this was previously ignored in the SParC evaluation script", "\n", "# which might lead to slight differences in scores", "\n", "", "", "if", "len", "(", "gseq_one", ")", "!=", "0", ":", "\n", "            ", "glist", ".", "append", "(", "gseq_one", ")", "\n", "\n", "# spider formatting indicates that there is only one \"single turn\"", "\n", "# do not report \"turn accuracy\" for SPIDER", "\n", "", "", "include_turn_acc", "=", "len", "(", "glist", ")", ">", "1", "\n", "\n", "with", "open", "(", "predict", ")", "as", "f", ":", "\n", "        ", "plist", "=", "[", "]", "\n", "pseq_one", "=", "[", "]", "\n", "for", "l", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "if", "len", "(", "l", ".", "strip", "(", ")", ")", "==", "0", ":", "\n", "                ", "plist", ".", "append", "(", "pseq_one", ")", "\n", "pseq_one", "=", "[", "]", "\n", "", "else", ":", "\n", "                ", "pseq_one", ".", "append", "(", "l", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", ")", "\n", "\n", "", "", "if", "len", "(", "pseq_one", ")", "!=", "0", ":", "\n", "            ", "plist", ".", "append", "(", "pseq_one", ")", "\n", "\n", "", "", "assert", "len", "(", "plist", ")", "==", "len", "(", "glist", ")", ",", "\"number of sessions must equal\"", "\n", "\n", "evaluator", "=", "Evaluator", "(", ")", "\n", "turns", "=", "[", "'turn 1'", ",", "'turn 2'", ",", "'turn 3'", ",", "'turn 4'", ",", "'turn > 4'", "]", "\n", "levels", "=", "[", "'easy'", ",", "'medium'", ",", "'hard'", ",", "'extra'", ",", "'all'", ",", "'joint_all'", "]", "\n", "\n", "partial_types", "=", "[", "'select'", ",", "'select(no AGG)'", ",", "'where'", ",", "'where(no OP)'", ",", "'group(no Having)'", ",", "\n", "'group'", ",", "'order'", ",", "'and/or'", ",", "'IUEN'", ",", "'keywords'", "]", "\n", "entries", "=", "[", "]", "\n", "scores", "=", "{", "}", "\n", "\n", "for", "turn", "in", "turns", ":", "\n", "        ", "scores", "[", "turn", "]", "=", "{", "'count'", ":", "0", ",", "'exact'", ":", "0.", "}", "\n", "scores", "[", "turn", "]", "[", "'exec'", "]", "=", "0", "\n", "\n", "", "for", "level", "in", "levels", ":", "\n", "        ", "scores", "[", "level", "]", "=", "{", "'count'", ":", "0", ",", "'partial'", ":", "{", "}", ",", "'exact'", ":", "0.", "}", "\n", "scores", "[", "level", "]", "[", "'exec'", "]", "=", "0", "\n", "for", "type_", "in", "partial_types", ":", "\n", "            ", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "=", "{", "'acc'", ":", "0.", ",", "'rec'", ":", "0.", ",", "'f1'", ":", "0.", ",", "'acc_count'", ":", "0", ",", "'rec_count'", ":", "0", "}", "\n", "\n", "", "", "for", "i", ",", "(", "p", ",", "g", ")", "in", "enumerate", "(", "zip", "(", "plist", ",", "glist", ")", ")", ":", "\n", "        ", "if", "(", "i", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'Evaluating %dth prediction'", "%", "(", "i", "+", "1", ")", ")", "\n", "", "scores", "[", "'joint_all'", "]", "[", "'count'", "]", "+=", "1", "\n", "turn_scores", "=", "{", "\"exec\"", ":", "[", "]", ",", "\"exact\"", ":", "[", "]", "}", "\n", "for", "idx", ",", "pg", "in", "enumerate", "(", "zip", "(", "p", ",", "g", ")", ")", ":", "\n", "            ", "p", ",", "g", "=", "pg", "\n", "p_str", "=", "p", "[", "0", "]", "\n", "p_str", "=", "p_str", ".", "replace", "(", "\"value\"", ",", "\"1\"", ")", "\n", "g_str", ",", "db", "=", "g", "\n", "db_name", "=", "db", "\n", "db", "=", "os", ".", "path", ".", "join", "(", "db_dir", ",", "db", ",", "db", "+", "\".sqlite\"", ")", "\n", "schema", "=", "Schema", "(", "get_schema", "(", "db", ")", ")", "\n", "g_sql", "=", "get_sql", "(", "schema", ",", "g_str", ")", "\n", "hardness", "=", "evaluator", ".", "eval_hardness", "(", "g_sql", ")", "\n", "if", "idx", ">", "3", ":", "\n", "                ", "idx", "=", "\"> 4\"", "\n", "", "else", ":", "\n", "                ", "idx", "+=", "1", "\n", "", "turn_id", "=", "\"turn \"", "+", "str", "(", "idx", ")", "\n", "scores", "[", "turn_id", "]", "[", "'count'", "]", "+=", "1", "\n", "scores", "[", "hardness", "]", "[", "'count'", "]", "+=", "1", "\n", "scores", "[", "'all'", "]", "[", "'count'", "]", "+=", "1", "\n", "\n", "try", ":", "\n", "                ", "p_sql", "=", "get_sql", "(", "schema", ",", "p_str", ")", "\n", "", "except", ":", "\n", "# If p_sql is not valid, then we will use an empty sql to evaluate with the correct sql", "\n", "                ", "p_sql", "=", "{", "\n", "\"except\"", ":", "None", ",", "\n", "\"from\"", ":", "{", "\n", "\"conds\"", ":", "[", "]", ",", "\n", "\"table_units\"", ":", "[", "]", "\n", "}", ",", "\n", "\"groupBy\"", ":", "[", "]", ",", "\n", "\"having\"", ":", "[", "]", ",", "\n", "\"intersect\"", ":", "None", ",", "\n", "\"limit\"", ":", "None", ",", "\n", "\"orderBy\"", ":", "[", "]", ",", "\n", "\"select\"", ":", "[", "\n", "False", ",", "\n", "[", "]", "\n", "]", ",", "\n", "\"union\"", ":", "None", ",", "\n", "\"where\"", ":", "[", "]", "\n", "}", "\n", "\n", "", "if", "etype", "in", "[", "\"all\"", ",", "\"exec\"", "]", ":", "\n", "                ", "exec_score", "=", "eval_exec_match", "(", "db", "=", "db", ",", "p_str", "=", "p_str", ",", "g_str", "=", "g_str", ",", "plug_value", "=", "plug_value", ",", "\n", "keep_distinct", "=", "keep_distinct", ",", "progress_bar_for_each_datapoint", "=", "progress_bar_for_each_datapoint", ")", "\n", "if", "exec_score", ":", "\n", "                    ", "scores", "[", "hardness", "]", "[", "'exec'", "]", "+=", "1", "\n", "scores", "[", "turn_id", "]", "[", "'exec'", "]", "+=", "1", "\n", "scores", "[", "'all'", "]", "[", "'exec'", "]", "+=", "1", "\n", "turn_scores", "[", "'exec'", "]", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "turn_scores", "[", "'exec'", "]", ".", "append", "(", "0", ")", "\n", "\n", "", "", "if", "etype", "in", "[", "\"all\"", ",", "\"match\"", "]", ":", "\n", "# rebuild sql for value evaluation", "\n", "                ", "kmap", "=", "kmaps", "[", "db_name", "]", "\n", "g_valid_col_units", "=", "build_valid_col_units", "(", "g_sql", "[", "'from'", "]", "[", "'table_units'", "]", ",", "schema", ")", "\n", "g_sql", "=", "rebuild_sql_val", "(", "g_sql", ")", "\n", "g_sql", "=", "rebuild_sql_col", "(", "g_valid_col_units", ",", "g_sql", ",", "kmap", ")", "\n", "p_valid_col_units", "=", "build_valid_col_units", "(", "p_sql", "[", "'from'", "]", "[", "'table_units'", "]", ",", "schema", ")", "\n", "p_sql", "=", "rebuild_sql_val", "(", "p_sql", ")", "\n", "p_sql", "=", "rebuild_sql_col", "(", "p_valid_col_units", ",", "p_sql", ",", "kmap", ")", "\n", "exact_score", "=", "evaluator", ".", "eval_exact_match", "(", "p_sql", ",", "g_sql", ")", "\n", "partial_scores", "=", "evaluator", ".", "partial_scores", "\n", "if", "exact_score", "==", "0", ":", "\n", "                    ", "turn_scores", "[", "'exact'", "]", ".", "append", "(", "0", ")", "\n", "print", "(", "\"{} pred: {}\"", ".", "format", "(", "hardness", ",", "p_str", ")", ")", "\n", "print", "(", "\"{} gold: {}\"", ".", "format", "(", "hardness", ",", "g_str", ")", ")", "\n", "print", "(", "\"\"", ")", "\n", "", "else", ":", "\n", "                    ", "turn_scores", "[", "'exact'", "]", ".", "append", "(", "1", ")", "\n", "", "scores", "[", "turn_id", "]", "[", "'exact'", "]", "+=", "exact_score", "\n", "scores", "[", "hardness", "]", "[", "'exact'", "]", "+=", "exact_score", "\n", "scores", "[", "'all'", "]", "[", "'exact'", "]", "+=", "exact_score", "\n", "for", "type_", "in", "partial_types", ":", "\n", "                    ", "if", "partial_scores", "[", "type_", "]", "[", "'pred_total'", "]", ">", "0", ":", "\n", "                        ", "scores", "[", "hardness", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "+=", "partial_scores", "[", "type_", "]", "[", "'acc'", "]", "\n", "scores", "[", "hardness", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc_count'", "]", "+=", "1", "\n", "", "if", "partial_scores", "[", "type_", "]", "[", "'label_total'", "]", ">", "0", ":", "\n", "                        ", "scores", "[", "hardness", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "+=", "partial_scores", "[", "type_", "]", "[", "'rec'", "]", "\n", "scores", "[", "hardness", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec_count'", "]", "+=", "1", "\n", "", "scores", "[", "hardness", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'f1'", "]", "+=", "partial_scores", "[", "type_", "]", "[", "'f1'", "]", "\n", "if", "partial_scores", "[", "type_", "]", "[", "'pred_total'", "]", ">", "0", ":", "\n", "                        ", "scores", "[", "'all'", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "+=", "partial_scores", "[", "type_", "]", "[", "'acc'", "]", "\n", "scores", "[", "'all'", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc_count'", "]", "+=", "1", "\n", "", "if", "partial_scores", "[", "type_", "]", "[", "'label_total'", "]", ">", "0", ":", "\n", "                        ", "scores", "[", "'all'", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "+=", "partial_scores", "[", "type_", "]", "[", "'rec'", "]", "\n", "scores", "[", "'all'", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec_count'", "]", "+=", "1", "\n", "", "scores", "[", "'all'", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'f1'", "]", "+=", "partial_scores", "[", "type_", "]", "[", "'f1'", "]", "\n", "\n", "", "entries", ".", "append", "(", "{", "\n", "'predictSQL'", ":", "p_str", ",", "\n", "'goldSQL'", ":", "g_str", ",", "\n", "'hardness'", ":", "hardness", ",", "\n", "'exact'", ":", "exact_score", ",", "\n", "'partial'", ":", "partial_scores", "\n", "}", ")", "\n", "\n", "", "", "if", "all", "(", "v", "==", "1", "for", "v", "in", "turn_scores", "[", "\"exec\"", "]", ")", ":", "\n", "            ", "scores", "[", "'joint_all'", "]", "[", "'exec'", "]", "+=", "1", "\n", "\n", "", "if", "all", "(", "v", "==", "1", "for", "v", "in", "turn_scores", "[", "\"exact\"", "]", ")", ":", "\n", "            ", "scores", "[", "'joint_all'", "]", "[", "'exact'", "]", "+=", "1", "\n", "\n", "", "", "for", "turn", "in", "turns", ":", "\n", "        ", "if", "scores", "[", "turn", "]", "[", "'count'", "]", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "etype", "in", "[", "\"all\"", ",", "\"exec\"", "]", ":", "\n", "            ", "scores", "[", "turn", "]", "[", "'exec'", "]", "/=", "scores", "[", "turn", "]", "[", "'count'", "]", "\n", "\n", "", "if", "etype", "in", "[", "\"all\"", ",", "\"match\"", "]", ":", "\n", "            ", "scores", "[", "turn", "]", "[", "'exact'", "]", "/=", "scores", "[", "turn", "]", "[", "'count'", "]", "\n", "\n", "", "", "for", "level", "in", "levels", ":", "\n", "        ", "if", "scores", "[", "level", "]", "[", "'count'", "]", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "etype", "in", "[", "\"all\"", ",", "\"exec\"", "]", ":", "\n", "            ", "scores", "[", "level", "]", "[", "'exec'", "]", "/=", "scores", "[", "level", "]", "[", "'count'", "]", "\n", "\n", "", "if", "etype", "in", "[", "\"all\"", ",", "\"match\"", "]", ":", "\n", "            ", "scores", "[", "level", "]", "[", "'exact'", "]", "/=", "scores", "[", "level", "]", "[", "'count'", "]", "\n", "for", "type_", "in", "partial_types", ":", "\n", "                ", "if", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc_count'", "]", "==", "0", ":", "\n", "                    ", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "=", "0", "\n", "", "else", ":", "\n", "                    ", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "=", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "/", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc_count'", "]", "*", "1.0", "\n", "", "if", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec_count'", "]", "==", "0", ":", "\n", "                    ", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "=", "0", "\n", "", "else", ":", "\n", "                    ", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "=", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "/", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec_count'", "]", "*", "1.0", "\n", "", "if", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "==", "0", "and", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "==", "0", ":", "\n", "                    ", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'f1'", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'f1'", "]", "=", "2.0", "*", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "*", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "/", "(", "\n", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "+", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", ")", "\n", "\n", "", "", "", "", "print_scores", "(", "scores", ",", "etype", ",", "include_turn_acc", "=", "include_turn_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_cond_unit_val": [[709, 723], ["type", "evaluation.rebuild_sql_val", "type", "evaluation.rebuild_sql_val"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_sql_val", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_sql_val"], ["", "def", "rebuild_cond_unit_val", "(", "cond_unit", ")", ":", "\n", "    ", "if", "cond_unit", "is", "None", "or", "not", "DISABLE_VALUE", ":", "\n", "        ", "return", "cond_unit", "\n", "\n", "", "not_op", ",", "op_id", ",", "val_unit", ",", "val1", ",", "val2", "=", "cond_unit", "\n", "if", "type", "(", "val1", ")", "is", "not", "dict", ":", "\n", "        ", "val1", "=", "None", "\n", "", "else", ":", "\n", "        ", "val1", "=", "rebuild_sql_val", "(", "val1", ")", "\n", "", "if", "type", "(", "val2", ")", "is", "not", "dict", ":", "\n", "        ", "val2", "=", "None", "\n", "", "else", ":", "\n", "        ", "val2", "=", "rebuild_sql_val", "(", "val2", ")", "\n", "", "return", "not_op", ",", "op_id", ",", "val_unit", ",", "val1", ",", "val2", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_condition_val": [[725, 736], ["enumerate", "res.append", "res.append", "evaluation.rebuild_cond_unit_val"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_cond_unit_val"], ["", "def", "rebuild_condition_val", "(", "condition", ")", ":", "\n", "    ", "if", "condition", "is", "None", "or", "not", "DISABLE_VALUE", ":", "\n", "        ", "return", "condition", "\n", "\n", "", "res", "=", "[", "]", "\n", "for", "idx", ",", "it", "in", "enumerate", "(", "condition", ")", ":", "\n", "        ", "if", "idx", "%", "2", "==", "0", ":", "\n", "            ", "res", ".", "append", "(", "rebuild_cond_unit_val", "(", "it", ")", ")", "\n", "", "else", ":", "\n", "            ", "res", ".", "append", "(", "it", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_sql_val": [[738, 750], ["evaluation.rebuild_condition_val", "evaluation.rebuild_condition_val", "evaluation.rebuild_condition_val", "evaluation.rebuild_sql_val", "evaluation.rebuild_sql_val", "evaluation.rebuild_sql_val"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_condition_val", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_condition_val", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_condition_val", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_sql_val", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_sql_val", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_sql_val"], ["", "def", "rebuild_sql_val", "(", "sql", ")", ":", "\n", "    ", "if", "sql", "is", "None", "or", "not", "DISABLE_VALUE", ":", "\n", "        ", "return", "sql", "\n", "\n", "", "sql", "[", "'from'", "]", "[", "'conds'", "]", "=", "rebuild_condition_val", "(", "sql", "[", "'from'", "]", "[", "'conds'", "]", ")", "\n", "sql", "[", "'having'", "]", "=", "rebuild_condition_val", "(", "sql", "[", "'having'", "]", ")", "\n", "sql", "[", "'where'", "]", "=", "rebuild_condition_val", "(", "sql", "[", "'where'", "]", ")", "\n", "sql", "[", "'intersect'", "]", "=", "rebuild_sql_val", "(", "sql", "[", "'intersect'", "]", ")", "\n", "sql", "[", "'except'", "]", "=", "rebuild_sql_val", "(", "sql", "[", "'except'", "]", ")", "\n", "sql", "[", "'union'", "]", "=", "rebuild_sql_val", "(", "sql", "[", "'union'", "]", ")", "\n", "\n", "return", "sql", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.build_valid_col_units": [[753, 761], ["schema.idMap.values", "valid_col_units.append", "value.index"], "function", ["None"], ["", "def", "build_valid_col_units", "(", "table_units", ",", "schema", ")", ":", "\n", "    ", "col_ids", "=", "[", "table_unit", "[", "1", "]", "for", "table_unit", "in", "table_units", "if", "table_unit", "[", "0", "]", "==", "TABLE_TYPE", "[", "'table_unit'", "]", "]", "\n", "prefixs", "=", "[", "col_id", "[", ":", "-", "2", "]", "for", "col_id", "in", "col_ids", "]", "\n", "valid_col_units", "=", "[", "]", "\n", "for", "value", "in", "schema", ".", "idMap", ".", "values", "(", ")", ":", "\n", "        ", "if", "'.'", "in", "value", "and", "value", "[", ":", "value", ".", "index", "(", "'.'", ")", "]", "in", "prefixs", ":", "\n", "            ", "valid_col_units", ".", "append", "(", "value", ")", "\n", "", "", "return", "valid_col_units", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_col_unit_col": [[763, 773], ["None"], "function", ["None"], ["", "def", "rebuild_col_unit_col", "(", "valid_col_units", ",", "col_unit", ",", "kmap", ")", ":", "\n", "    ", "if", "col_unit", "is", "None", ":", "\n", "        ", "return", "col_unit", "\n", "\n", "", "agg_id", ",", "col_id", ",", "distinct", "=", "col_unit", "\n", "if", "col_id", "in", "kmap", "and", "col_id", "in", "valid_col_units", ":", "\n", "        ", "col_id", "=", "kmap", "[", "col_id", "]", "\n", "", "if", "DISABLE_DISTINCT", ":", "\n", "        ", "distinct", "=", "None", "\n", "", "return", "agg_id", ",", "col_id", ",", "distinct", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_val_unit_col": [[775, 783], ["evaluation.rebuild_col_unit_col", "evaluation.rebuild_col_unit_col"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_col_unit_col", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_col_unit_col"], ["", "def", "rebuild_val_unit_col", "(", "valid_col_units", ",", "val_unit", ",", "kmap", ")", ":", "\n", "    ", "if", "val_unit", "is", "None", ":", "\n", "        ", "return", "val_unit", "\n", "\n", "", "unit_op", ",", "col_unit1", ",", "col_unit2", "=", "val_unit", "\n", "col_unit1", "=", "rebuild_col_unit_col", "(", "valid_col_units", ",", "col_unit1", ",", "kmap", ")", "\n", "col_unit2", "=", "rebuild_col_unit_col", "(", "valid_col_units", ",", "col_unit2", ",", "kmap", ")", "\n", "return", "unit_op", ",", "col_unit1", ",", "col_unit2", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_table_unit_col": [[785, 793], ["isinstance", "evaluation.rebuild_col_unit_col"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_col_unit_col"], ["", "def", "rebuild_table_unit_col", "(", "valid_col_units", ",", "table_unit", ",", "kmap", ")", ":", "\n", "    ", "if", "table_unit", "is", "None", ":", "\n", "        ", "return", "table_unit", "\n", "\n", "", "table_type", ",", "col_unit_or_sql", "=", "table_unit", "\n", "if", "isinstance", "(", "col_unit_or_sql", ",", "tuple", ")", ":", "\n", "        ", "col_unit_or_sql", "=", "rebuild_col_unit_col", "(", "valid_col_units", ",", "col_unit_or_sql", ",", "kmap", ")", "\n", "", "return", "table_type", ",", "col_unit_or_sql", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_cond_unit_col": [[795, 802], ["evaluation.rebuild_val_unit_col"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_val_unit_col"], ["", "def", "rebuild_cond_unit_col", "(", "valid_col_units", ",", "cond_unit", ",", "kmap", ")", ":", "\n", "    ", "if", "cond_unit", "is", "None", ":", "\n", "        ", "return", "cond_unit", "\n", "\n", "", "not_op", ",", "op_id", ",", "val_unit", ",", "val1", ",", "val2", "=", "cond_unit", "\n", "val_unit", "=", "rebuild_val_unit_col", "(", "valid_col_units", ",", "val_unit", ",", "kmap", ")", "\n", "return", "not_op", ",", "op_id", ",", "val_unit", ",", "val1", ",", "val2", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_condition_col": [[804, 809], ["range", "len", "evaluation.rebuild_cond_unit_col"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_cond_unit_col"], ["", "def", "rebuild_condition_col", "(", "valid_col_units", ",", "condition", ",", "kmap", ")", ":", "\n", "    ", "for", "idx", "in", "range", "(", "len", "(", "condition", ")", ")", ":", "\n", "        ", "if", "idx", "%", "2", "==", "0", ":", "\n", "            ", "condition", "[", "idx", "]", "=", "rebuild_cond_unit_col", "(", "valid_col_units", ",", "condition", "[", "idx", "]", ",", "kmap", ")", "\n", "", "", "return", "condition", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_select_col": [[811, 822], ["new_list.append", "evaluation.rebuild_val_unit_col"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_val_unit_col"], ["", "def", "rebuild_select_col", "(", "valid_col_units", ",", "sel", ",", "kmap", ")", ":", "\n", "    ", "if", "sel", "is", "None", ":", "\n", "        ", "return", "sel", "\n", "", "distinct", ",", "_list", "=", "sel", "\n", "new_list", "=", "[", "]", "\n", "for", "it", "in", "_list", ":", "\n", "        ", "agg_id", ",", "val_unit", "=", "it", "\n", "new_list", ".", "append", "(", "(", "agg_id", ",", "rebuild_val_unit_col", "(", "valid_col_units", ",", "val_unit", ",", "kmap", ")", ")", ")", "\n", "", "if", "DISABLE_DISTINCT", ":", "\n", "        ", "distinct", "=", "None", "\n", "", "return", "distinct", ",", "new_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_from_col": [[824, 831], ["evaluation.rebuild_condition_col", "evaluation.rebuild_table_unit_col"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_condition_col", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_table_unit_col"], ["", "def", "rebuild_from_col", "(", "valid_col_units", ",", "from_", ",", "kmap", ")", ":", "\n", "    ", "if", "from_", "is", "None", ":", "\n", "        ", "return", "from_", "\n", "\n", "", "from_", "[", "'table_units'", "]", "=", "[", "rebuild_table_unit_col", "(", "valid_col_units", ",", "table_unit", ",", "kmap", ")", "for", "table_unit", "in", "from_", "[", "'table_units'", "]", "]", "\n", "from_", "[", "'conds'", "]", "=", "rebuild_condition_col", "(", "valid_col_units", ",", "from_", "[", "'conds'", "]", ",", "kmap", ")", "\n", "return", "from_", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_group_by_col": [[833, 838], ["evaluation.rebuild_col_unit_col"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_col_unit_col"], ["", "def", "rebuild_group_by_col", "(", "valid_col_units", ",", "group_by", ",", "kmap", ")", ":", "\n", "    ", "if", "group_by", "is", "None", ":", "\n", "        ", "return", "group_by", "\n", "\n", "", "return", "[", "rebuild_col_unit_col", "(", "valid_col_units", ",", "col_unit", ",", "kmap", ")", "for", "col_unit", "in", "group_by", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_order_by_col": [[840, 847], ["evaluation.rebuild_val_unit_col", "len"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_val_unit_col"], ["", "def", "rebuild_order_by_col", "(", "valid_col_units", ",", "order_by", ",", "kmap", ")", ":", "\n", "    ", "if", "order_by", "is", "None", "or", "len", "(", "order_by", ")", "==", "0", ":", "\n", "        ", "return", "order_by", "\n", "\n", "", "direction", ",", "val_units", "=", "order_by", "\n", "new_val_units", "=", "[", "rebuild_val_unit_col", "(", "valid_col_units", ",", "val_unit", ",", "kmap", ")", "for", "val_unit", "in", "val_units", "]", "\n", "return", "direction", ",", "new_val_units", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_sql_col": [[849, 864], ["evaluation.rebuild_select_col", "evaluation.rebuild_from_col", "evaluation.rebuild_condition_col", "evaluation.rebuild_group_by_col", "evaluation.rebuild_order_by_col", "evaluation.rebuild_condition_col", "evaluation.rebuild_sql_col", "evaluation.rebuild_sql_col", "evaluation.rebuild_sql_col"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_select_col", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_from_col", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_condition_col", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_group_by_col", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_order_by_col", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_condition_col", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_sql_col", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_sql_col", "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.rebuild_sql_col"], ["", "def", "rebuild_sql_col", "(", "valid_col_units", ",", "sql", ",", "kmap", ")", ":", "\n", "    ", "if", "sql", "is", "None", ":", "\n", "        ", "return", "sql", "\n", "\n", "", "sql", "[", "'select'", "]", "=", "rebuild_select_col", "(", "valid_col_units", ",", "sql", "[", "'select'", "]", ",", "kmap", ")", "\n", "sql", "[", "'from'", "]", "=", "rebuild_from_col", "(", "valid_col_units", ",", "sql", "[", "'from'", "]", ",", "kmap", ")", "\n", "sql", "[", "'where'", "]", "=", "rebuild_condition_col", "(", "valid_col_units", ",", "sql", "[", "'where'", "]", ",", "kmap", ")", "\n", "sql", "[", "'groupBy'", "]", "=", "rebuild_group_by_col", "(", "valid_col_units", ",", "sql", "[", "'groupBy'", "]", ",", "kmap", ")", "\n", "sql", "[", "'orderBy'", "]", "=", "rebuild_order_by_col", "(", "valid_col_units", ",", "sql", "[", "'orderBy'", "]", ",", "kmap", ")", "\n", "sql", "[", "'having'", "]", "=", "rebuild_condition_col", "(", "valid_col_units", ",", "sql", "[", "'having'", "]", ",", "kmap", ")", "\n", "sql", "[", "'intersect'", "]", "=", "rebuild_sql_col", "(", "valid_col_units", ",", "sql", "[", "'intersect'", "]", ",", "kmap", ")", "\n", "sql", "[", "'except'", "]", "=", "rebuild_sql_col", "(", "valid_col_units", ",", "sql", "[", "'except'", "]", ",", "kmap", ")", "\n", "sql", "[", "'union'", "]", "=", "rebuild_sql_col", "(", "valid_col_units", ",", "sql", "[", "'union'", "]", ",", "kmap", ")", "\n", "\n", "return", "sql", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.build_foreign_key_map": [[866, 904], ["set", "k_list.append", "evaluation.build_foreign_key_map.keyset_in_list"], "function", ["None"], ["", "def", "build_foreign_key_map", "(", "entry", ")", ":", "\n", "    ", "cols_orig", "=", "entry", "[", "\"column_names_original\"", "]", "\n", "tables_orig", "=", "entry", "[", "\"table_names_original\"", "]", "\n", "\n", "# rebuild cols corresponding to idmap in Schema", "\n", "cols", "=", "[", "]", "\n", "for", "col_orig", "in", "cols_orig", ":", "\n", "        ", "if", "col_orig", "[", "0", "]", ">=", "0", ":", "\n", "            ", "t", "=", "tables_orig", "[", "col_orig", "[", "0", "]", "]", "\n", "c", "=", "col_orig", "[", "1", "]", "\n", "cols", ".", "append", "(", "\"__\"", "+", "t", ".", "lower", "(", ")", "+", "\".\"", "+", "c", ".", "lower", "(", ")", "+", "\"__\"", ")", "\n", "", "else", ":", "\n", "            ", "cols", ".", "append", "(", "\"__all__\"", ")", "\n", "\n", "", "", "def", "keyset_in_list", "(", "k1", ",", "k2", ",", "k_list", ")", ":", "\n", "        ", "for", "k_set", "in", "k_list", ":", "\n", "            ", "if", "k1", "in", "k_set", "or", "k2", "in", "k_set", ":", "\n", "                ", "return", "k_set", "\n", "", "", "new_k_set", "=", "set", "(", ")", "\n", "k_list", ".", "append", "(", "new_k_set", ")", "\n", "return", "new_k_set", "\n", "\n", "", "foreign_key_list", "=", "[", "]", "\n", "foreign_keys", "=", "entry", "[", "\"foreign_keys\"", "]", "\n", "for", "fkey", "in", "foreign_keys", ":", "\n", "        ", "key1", ",", "key2", "=", "fkey", "\n", "key_set", "=", "keyset_in_list", "(", "key1", ",", "key2", ",", "foreign_key_list", ")", "\n", "key_set", ".", "add", "(", "key1", ")", "\n", "key_set", ".", "add", "(", "key2", ")", "\n", "\n", "", "foreign_key_map", "=", "{", "}", "\n", "for", "key_set", "in", "foreign_key_list", ":", "\n", "        ", "sorted_list", "=", "sorted", "(", "list", "(", "key_set", ")", ")", "\n", "midx", "=", "sorted_list", "[", "0", "]", "\n", "for", "idx", "in", "sorted_list", ":", "\n", "            ", "foreign_key_map", "[", "cols", "[", "idx", "]", "]", "=", "cols", "[", "midx", "]", "\n", "\n", "", "", "return", "foreign_key_map", "\n", "\n"]], "home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.build_foreign_key_map_from_json": [[906, 913], ["open", "json.load", "evaluation.build_foreign_key_map"], "function", ["home.repos.pwc.inspect_result.ruiqi-zhong_TestSuiteEval.unofficial.evaluation.build_foreign_key_map"], ["", "def", "build_foreign_key_map_from_json", "(", "table", ")", ":", "\n", "    ", "with", "open", "(", "table", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "tables", "=", "{", "}", "\n", "for", "entry", "in", "data", ":", "\n", "        ", "tables", "[", "entry", "[", "'db_id'", "]", "]", "=", "build_foreign_key_map", "(", "entry", ")", "\n", "", "return", "tables", "\n", "\n"]]}