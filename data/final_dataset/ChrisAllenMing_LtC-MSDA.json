{"home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.__init__": [[16, 63], ["datasets.dataset_read.dataset_read", "print", "model.build_gen.Generator", "gcn.models.GCN", "solver.Solver.G.cuda", "solver.Solver.GCN.cuda", "print", "solver.Solver.set_optimizer", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "solver.Solver.G.load_state_dict", "solver.Solver.GCN.load_state_dict", "print", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "print", "solver.Solver.state[].cuda", "solver.Solver.state[].cuda", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.dataset_read.dataset_read", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.build_gen.Generator", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.set_optimizer", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "batch_size", "=", "128", ",", "\n", "target", "=", "'mnistm'", ",", "learning_rate", "=", "0.0002", ",", "interval", "=", "10", ",", "optimizer", "=", "'adam'", ",", "\n", "checkpoint_dir", "=", "None", ",", "save_epoch", "=", "10", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "checkpoint_dir", "=", "checkpoint_dir", "\n", "self", ".", "save_epoch", "=", "save_epoch", "\n", "self", ".", "interval", "=", "interval", "\n", "self", ".", "lr", "=", "learning_rate", "\n", "self", ".", "best_correct", "=", "0", "\n", "self", ".", "args", "=", "args", "\n", "if", "self", ".", "args", ".", "use_target", ":", "\n", "            ", "self", ".", "ndomain", "=", "self", ".", "args", ".", "ndomain", "\n", "", "else", ":", "\n", "            ", "self", ".", "ndomain", "=", "self", ".", "args", ".", "ndomain", "-", "1", "\n", "\n", "# load source and target domains", "\n", "", "self", ".", "datasets", ",", "self", ".", "dataset_test", ",", "self", ".", "dataset_size", "=", "dataset_read", "(", "target", ",", "self", ".", "batch_size", ")", "\n", "self", ".", "niter", "=", "self", ".", "dataset_size", "/", "self", ".", "batch_size", "\n", "print", "(", "'Dataset loaded!'", ")", "\n", "\n", "# define the feature extractor and GCN-based classifier", "\n", "self", ".", "G", "=", "Generator", "(", "self", ".", "args", ".", "net", ")", "\n", "self", ".", "GCN", "=", "GCN", "(", "nfeat", "=", "args", ".", "nfeat", ",", "nclasses", "=", "args", ".", "nclasses", ")", "\n", "self", ".", "G", ".", "cuda", "(", ")", "\n", "self", ".", "GCN", ".", "cuda", "(", ")", "\n", "print", "(", "'Model initialized!'", ")", "\n", "\n", "if", "self", ".", "args", ".", "load_checkpoint", "is", "not", "None", ":", "\n", "            ", "self", ".", "state", "=", "torch", ".", "load", "(", "self", ".", "args", ".", "load_checkpoint", ")", "\n", "self", ".", "G", ".", "load_state_dict", "(", "self", ".", "state", "[", "'G'", "]", ")", "\n", "self", ".", "GCN", ".", "load_state_dict", "(", "self", ".", "state", "[", "'GCN'", "]", ")", "\n", "print", "(", "'Model load from: '", ",", "self", ".", "args", ".", "load_checkpoint", ")", "\n", "\n", "# initialize statistics (prototypes and adjacency matrix)", "\n", "", "if", "self", ".", "args", ".", "load_checkpoint", "is", "None", ":", "\n", "            ", "self", ".", "mean", "=", "torch", ".", "zeros", "(", "args", ".", "nclasses", "*", "self", ".", "ndomain", ",", "args", ".", "nfeat", ")", ".", "cuda", "(", ")", "\n", "self", ".", "adj", "=", "torch", ".", "zeros", "(", "args", ".", "nclasses", "*", "self", ".", "ndomain", ",", "args", ".", "nclasses", "*", "self", ".", "ndomain", ")", ".", "cuda", "(", ")", "\n", "print", "(", "'Statistics initialized!'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mean", "=", "self", ".", "state", "[", "'mean'", "]", ".", "cuda", "(", ")", "\n", "self", ".", "adj", "=", "self", ".", "state", "[", "'adj'", "]", ".", "cuda", "(", ")", "\n", "print", "(", "'Statistics loaded!'", ")", "\n", "\n", "# define the optimizer", "\n", "", "self", ".", "set_optimizer", "(", "which_opt", "=", "optimizer", ",", "lr", "=", "self", ".", "lr", ")", "\n", "print", "(", "'Optimizer defined!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.set_optimizer": [[65, 78], ["torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "solver.Solver.G.parameters", "solver.Solver.GCN.parameters", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "solver.Solver.G.parameters", "solver.Solver.GCN.parameters"], "methods", ["None"], ["", "def", "set_optimizer", "(", "self", ",", "which_opt", "=", "'sgd'", ",", "lr", "=", "0.001", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "if", "which_opt", "==", "'sgd'", ":", "\n", "            ", "self", ".", "opt_g", "=", "optim", ".", "SGD", "(", "self", ".", "G", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "lr", ",", "weight_decay", "=", "0.0005", ",", "\n", "momentum", "=", "momentum", ")", "\n", "self", ".", "opt_gcn", "=", "optim", ".", "SGD", "(", "self", ".", "GCN", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "lr", ",", "weight_decay", "=", "0.0005", ",", "\n", "momentum", "=", "momentum", ")", "\n", "", "elif", "which_opt", "==", "'adam'", ":", "\n", "            ", "self", ".", "opt_g", "=", "optim", ".", "Adam", "(", "self", ".", "G", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "lr", ",", "weight_decay", "=", "0.0005", ")", "\n", "self", ".", "opt_gcn", "=", "optim", ".", "Adam", "(", "self", ".", "GCN", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "lr", ",", "weight_decay", "=", "0.0005", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.reset_grad": [[80, 83], ["solver.Solver.opt_g.zero_grad", "solver.Solver.opt_gcn.zero_grad"], "methods", ["None"], ["", "", "def", "reset_grad", "(", "self", ")", ":", "\n", "        ", "self", ".", "opt_g", ".", "zero_grad", "(", ")", "\n", "self", ".", "opt_gcn", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.discrepancy": [[85, 87], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "discrepancy", "(", "self", ",", "out1", ",", "out2", ")", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "F", ".", "softmax", "(", "out1", ")", "-", "F", ".", "softmax", "(", "out2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.euclid_dist": [[89, 98], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "x.size", "y.size", "x.size", "y.t"], "methods", ["None"], ["", "def", "euclid_dist", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_sq", "=", "(", "x", "**", "2", ")", ".", "mean", "(", "-", "1", ")", "\n", "x_sq_", "=", "torch", ".", "stack", "(", "[", "x_sq", "]", "*", "y", ".", "size", "(", "0", ")", ",", "dim", "=", "1", ")", "\n", "y_sq", "=", "(", "y", "**", "2", ")", ".", "mean", "(", "-", "1", ")", "\n", "y_sq_", "=", "torch", ".", "stack", "(", "[", "y_sq", "]", "*", "x", ".", "size", "(", "0", ")", ",", "dim", "=", "0", ")", "\n", "xy", "=", "torch", ".", "mm", "(", "x", ",", "y", ".", "t", "(", ")", ")", "/", "x", ".", "size", "(", "-", "1", ")", "\n", "dist", "=", "x_sq_", "+", "y_sq_", "-", "2", "*", "xy", "\n", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.construct_adj": [[100, 110], ["solver.Solver.euclid_dist", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.eye().float().cuda", "torch.eye().float().cuda", "torch.eye().float().cuda", "torch.eye().float().cuda", "torch.eye().float().cuda", "torch.eye().float().cuda", "torch.eye().float().cuda", "torch.eye().float().cuda", "torch.eye().float().cuda", "torch.eye().float().cuda", "torch.eye().float().cuda", "torch.eye().float().cuda", "torch.eye().float().cuda", "torch.eye().float().cuda", "torch.eye().float().cuda", "torch.eye().float().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.exp.t", "torch.exp.t", "torch.exp.t", "torch.exp.t", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.euclid_dist"], ["", "def", "construct_adj", "(", "self", ",", "feats", ")", ":", "\n", "        ", "dist", "=", "self", ".", "euclid_dist", "(", "self", ".", "mean", ",", "feats", ")", "\n", "sim", "=", "torch", ".", "exp", "(", "-", "dist", "/", "(", "2", "*", "self", ".", "args", ".", "sigma", "**", "2", ")", ")", "\n", "E", "=", "torch", ".", "eye", "(", "feats", ".", "shape", "[", "0", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "A", "=", "torch", ".", "cat", "(", "[", "self", ".", "adj", ",", "sim", "]", ",", "dim", "=", "1", ")", "\n", "B", "=", "torch", ".", "cat", "(", "[", "sim", ".", "t", "(", ")", ",", "E", "]", ",", "dim", "=", "1", ")", "\n", "gcn_adj", "=", "torch", ".", "cat", "(", "[", "A", ",", "B", "]", ",", "dim", "=", "0", ")", "\n", "\n", "return", "gcn_adj", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.pseudo_label": [[112, 123], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "pseudo_label", "(", "self", ",", "logit", ",", "feat", ")", ":", "\n", "        ", "pred", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "entropy", "=", "(", "-", "pred", "*", "torch", ".", "log", "(", "pred", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "label", "=", "torch", ".", "argmax", "(", "logit", ",", "dim", "=", "-", "1", ")", ".", "long", "(", ")", "\n", "\n", "mask", "=", "(", "entropy", "<", "self", ".", "args", ".", "entropy_thr", ")", ".", "float", "(", ")", "\n", "index", "=", "torch", ".", "nonzero", "(", "mask", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "feat_", "=", "torch", ".", "index_select", "(", "feat", ",", "0", ",", "index", ")", "\n", "label_", "=", "torch", ".", "index_select", "(", "label", ",", "0", ",", "index", ")", "\n", "\n", "return", "feat_", ",", "label_", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.update_statistics": [[125, 155], ["list", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "solver.Solver.euclid_dist", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.zeros().scatter_().float().cuda", "torch.zeros().scatter_().float().cuda", "torch.zeros().scatter_().float().cuda", "torch.zeros().scatter_().float().cuda", "torch.zeros().scatter_().float().cuda", "torch.zeros().scatter_().float().cuda", "torch.zeros().scatter_().float().cuda", "torch.zeros().scatter_().float().cuda", "torch.zeros().scatter_().float().cuda", "torch.zeros().scatter_().float().cuda", "torch.zeros().scatter_().float().cuda", "torch.zeros().scatter_().float().cuda", "torch.zeros().scatter_().float().cuda", "torch.zeros().scatter_().float().cuda", "torch.zeros().scatter_().float().cuda", "torch.zeros().scatter_().float().cuda", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "solver.Solver.mean.detach", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "tmp_feat.unsqueeze", "torch.zeros().scatter_().float().cuda.unsqueeze", "torch.zeros().scatter_().float().cuda.unsqueeze", "torch.zeros().scatter_().float().cuda.unsqueeze", "torch.zeros().scatter_().float().cuda.unsqueeze", "domain_feature.sum", "torch.zeros().scatter_().float", "torch.zeros().scatter_().float", "torch.zeros().scatter_().float", "torch.zeros().scatter_().float", "torch.zeros().scatter_().float", "torch.zeros().scatter_().float", "torch.zeros().scatter_().float", "torch.zeros().scatter_().float", "torch.zeros().scatter_().float", "torch.zeros().scatter_().float", "torch.zeros().scatter_().float", "torch.zeros().scatter_().float", "torch.zeros().scatter_().float", "torch.zeros().scatter_().float", "torch.zeros().scatter_().float", "torch.zeros().scatter_().float", "torch.zeros().scatter_().float().cuda.unsqueeze().sum", "torch.zeros().scatter_().float().cuda.unsqueeze().sum", "torch.zeros().scatter_().float().cuda.unsqueeze().sum", "torch.zeros().scatter_().float().cuda.unsqueeze().sum", "solver.Solver.mean.detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_().float().cuda.unsqueeze", "torch.zeros().scatter_().float().cuda.unsqueeze", "torch.zeros().scatter_().float().cuda.unsqueeze", "torch.zeros().scatter_().float().cuda.unsqueeze", "tmp_label.unsqueeze().cpu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "tmp_label.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.euclid_dist"], ["", "def", "update_statistics", "(", "self", ",", "feats", ",", "labels", ",", "epsilon", "=", "1e-5", ")", ":", "\n", "        ", "curr_mean", "=", "list", "(", ")", "\n", "num_labels", "=", "0", "\n", "\n", "for", "domain_idx", "in", "range", "(", "self", ".", "ndomain", ")", ":", "\n", "            ", "tmp_feat", "=", "feats", "[", "domain_idx", "]", "\n", "tmp_label", "=", "labels", "[", "domain_idx", "]", "\n", "num_labels", "+=", "tmp_label", ".", "shape", "[", "0", "]", "\n", "\n", "if", "tmp_label", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "curr_mean", ".", "append", "(", "torch", ".", "zeros", "(", "(", "self", ".", "args", ".", "nclasses", ",", "self", ".", "args", ".", "nfeat", ")", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "onehot_label", "=", "torch", ".", "zeros", "(", "(", "tmp_label", ".", "shape", "[", "0", "]", ",", "self", ".", "args", ".", "nclasses", ")", ")", ".", "scatter_", "(", "1", ",", "tmp_label", ".", "unsqueeze", "(", "\n", "-", "1", ")", ".", "cpu", "(", ")", ",", "1", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "domain_feature", "=", "tmp_feat", ".", "unsqueeze", "(", "1", ")", "*", "onehot_label", ".", "unsqueeze", "(", "-", "1", ")", "\n", "tmp_mean", "=", "domain_feature", ".", "sum", "(", "0", ")", "/", "(", "onehot_label", ".", "unsqueeze", "(", "-", "1", ")", ".", "sum", "(", "0", ")", "+", "epsilon", ")", "\n", "\n", "curr_mean", ".", "append", "(", "tmp_mean", ")", "\n", "\n", "", "", "curr_mean", "=", "torch", ".", "cat", "(", "curr_mean", ",", "dim", "=", "0", ")", "\n", "curr_mask", "=", "(", "curr_mean", ".", "sum", "(", "-", "1", ")", "!=", "0", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "self", ".", "mean", "=", "self", ".", "mean", ".", "detach", "(", ")", "*", "(", "1", "-", "curr_mask", ")", "+", "(", "\n", "self", ".", "mean", ".", "detach", "(", ")", "*", "self", ".", "args", ".", "beta", "+", "curr_mean", "*", "(", "1", "-", "self", ".", "args", ".", "beta", ")", ")", "*", "curr_mask", "\n", "curr_dist", "=", "self", ".", "euclid_dist", "(", "self", ".", "mean", ",", "self", ".", "mean", ")", "\n", "self", ".", "adj", "=", "torch", ".", "exp", "(", "-", "curr_dist", "/", "(", "2", "*", "self", ".", "args", ".", "sigma", "**", "2", ")", ")", "\n", "\n", "# compute local relation alignment loss", "\n", "loss_local", "=", "(", "(", "(", "(", "curr_mean", "-", "self", ".", "mean", ")", "*", "curr_mask", ")", "**", "2", ")", ".", "mean", "(", "-", "1", ")", ")", ".", "sum", "(", ")", "/", "num_labels", "\n", "\n", "return", "loss_local", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.adj_loss": [[157, 176], ["range", "range"], "methods", ["None"], ["", "def", "adj_loss", "(", "self", ")", ":", "\n", "        ", "adj_loss", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "ndomain", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "ndomain", ")", ":", "\n", "                ", "adj_ii", "=", "self", ".", "adj", "[", "i", "*", "self", ".", "args", ".", "nclasses", ":", "(", "i", "+", "1", ")", "*", "self", ".", "args", ".", "nclasses", ",", "\n", "i", "*", "self", ".", "args", ".", "nclasses", ":", "(", "i", "+", "1", ")", "*", "self", ".", "args", ".", "nclasses", "]", "\n", "adj_jj", "=", "self", ".", "adj", "[", "j", "*", "self", ".", "args", ".", "nclasses", ":", "(", "j", "+", "1", ")", "*", "self", ".", "args", ".", "nclasses", ",", "\n", "j", "*", "self", ".", "args", ".", "nclasses", ":", "(", "j", "+", "1", ")", "*", "self", ".", "args", ".", "nclasses", "]", "\n", "adj_ij", "=", "self", ".", "adj", "[", "i", "*", "self", ".", "args", ".", "nclasses", ":", "(", "i", "+", "1", ")", "*", "self", ".", "args", ".", "nclasses", ",", "\n", "j", "*", "self", ".", "args", ".", "nclasses", ":", "(", "j", "+", "1", ")", "*", "self", ".", "args", ".", "nclasses", "]", "\n", "\n", "adj_loss", "+=", "(", "(", "adj_ii", "-", "adj_jj", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "adj_loss", "+=", "(", "(", "adj_ij", "-", "adj_ii", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "adj_loss", "+=", "(", "(", "adj_ij", "-", "adj_jj", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n", "", "", "adj_loss", "/=", "(", "self", ".", "ndomain", "*", "(", "self", ".", "ndomain", "-", "1", ")", "/", "2", "*", "3", ")", "\n", "\n", "return", "adj_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.train_gcn_baseline": [[178, 266], ["torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "solver.Solver.G.train", "solver.Solver.GCN.train", "enumerate", "list", "list", "range", "solver.Solver.reset_grad", "list", "range", "solver.Solver.update_statistics", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "solver.Solver.construct_adj", "solver.Solver.GCN", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "domain_label.long().cuda.long().cuda.long().cuda", "torch.CrossEntropyLoss().cuda.", "torch.CrossEntropyLoss().cuda.", "loss.backward", "solver.Solver.opt_gcn.step", "solver.Solver.opt_g.step", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "data[].cuda", "data[].long().cuda", "list.append", "list.append", "solver.Solver.G", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "solver.Solver.adj_loss", "open", "open.write", "open.close", "print", "domain_label.long().cuda.long().cuda.long", "str", "open", "open.write", "open.close", "data[].long", "data[].cuda.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "nn.CrossEntropyLoss().cuda.item", "nn.CrossEntropyLoss().cuda.item", "loss_global.item", "solver.Solver.item", "nn.CrossEntropyLoss().cuda.item", "nn.CrossEntropyLoss().cuda.item", "loss_global.item", "solver.Solver.item", "str", "str"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.reset_grad", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.update_statistics", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.construct_adj", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.grad_reverse.GradReverse.backward", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.adj_loss"], ["", "def", "train_gcn_baseline", "(", "self", ",", "epoch", ",", "record_file", "=", "None", ")", ":", "\n", "        ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "G", ".", "train", "(", ")", "\n", "self", ".", "GCN", ".", "train", "(", ")", "\n", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "self", ".", "datasets", ")", ":", "\n", "# get the source batches", "\n", "            ", "img_s", "=", "list", "(", ")", "\n", "label_s", "=", "list", "(", ")", "\n", "stop_iter", "=", "False", "\n", "for", "domain_idx", "in", "range", "(", "self", ".", "ndomain", ")", ":", "\n", "                ", "tmp_img", "=", "data", "[", "'S'", "+", "str", "(", "domain_idx", "+", "1", ")", "]", ".", "cuda", "(", ")", "\n", "tmp_label", "=", "data", "[", "'S'", "+", "str", "(", "domain_idx", "+", "1", ")", "+", "'_label'", "]", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "img_s", ".", "append", "(", "tmp_img", ")", "\n", "label_s", ".", "append", "(", "tmp_label", ")", "\n", "\n", "if", "tmp_img", ".", "size", "(", ")", "[", "0", "]", "<", "self", ".", "batch_size", ":", "\n", "                    ", "stop_iter", "=", "True", "\n", "\n", "", "", "if", "stop_iter", ":", "\n", "                ", "break", "\n", "\n", "", "self", ".", "reset_grad", "(", ")", "\n", "\n", "# get feature embeddings", "\n", "feats", "=", "list", "(", ")", "\n", "for", "domain_idx", "in", "range", "(", "self", ".", "ndomain", ")", ":", "\n", "                ", "tmp_img", "=", "img_s", "[", "domain_idx", "]", "\n", "tmp_feat", "=", "self", ".", "G", "(", "tmp_img", ")", "\n", "feats", ".", "append", "(", "tmp_feat", ")", "\n", "\n", "# Update the global mean and adjacency matrix", "\n", "", "loss_local", "=", "self", ".", "update_statistics", "(", "feats", ",", "label_s", ")", "\n", "feats", "=", "torch", ".", "cat", "(", "feats", ",", "dim", "=", "0", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "label_s", ",", "dim", "=", "0", ")", "\n", "\n", "# add query samples to the domain graph", "\n", "gcn_feats", "=", "torch", ".", "cat", "(", "[", "self", ".", "mean", ",", "feats", "]", ",", "dim", "=", "0", ")", "\n", "gcn_adj", "=", "self", ".", "construct_adj", "(", "feats", ")", "\n", "\n", "# output classification logit with GCN", "\n", "gcn_logit", "=", "self", ".", "GCN", "(", "gcn_feats", ",", "gcn_adj", ")", "\n", "\n", "# define GCN classification losses", "\n", "domain_logit", "=", "gcn_logit", "[", ":", "self", ".", "mean", ".", "shape", "[", "0", "]", ",", ":", "]", "\n", "domain_label", "=", "torch", ".", "cat", "(", "[", "torch", ".", "arange", "(", "self", ".", "args", ".", "nclasses", ")", "]", "*", "self", ".", "ndomain", ",", "dim", "=", "0", ")", "\n", "domain_label", "=", "domain_label", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "loss_cls_dom", "=", "criterion", "(", "domain_logit", ",", "domain_label", ")", "\n", "\n", "query_logit", "=", "gcn_logit", "[", "self", ".", "mean", ".", "shape", "[", "0", "]", ":", ",", ":", "]", "\n", "loss_cls_src", "=", "criterion", "(", "query_logit", ",", "labels", ")", "\n", "\n", "loss_cls", "=", "loss_cls_src", "+", "loss_cls_dom", "\n", "\n", "# define relation alignment losses", "\n", "loss_global", "=", "self", ".", "adj_loss", "(", ")", "*", "self", ".", "args", ".", "Lambda_global", "\n", "loss_local", "=", "loss_local", "*", "self", ".", "args", ".", "Lambda_local", "\n", "loss_relation", "=", "loss_local", "+", "loss_global", "\n", "\n", "loss", "=", "loss_cls", "+", "loss_relation", "\n", "\n", "# back-propagation", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "opt_gcn", ".", "step", "(", ")", "\n", "self", ".", "opt_g", ".", "step", "(", ")", "\n", "\n", "# record training information", "\n", "if", "epoch", "==", "0", "and", "batch_idx", "==", "0", ":", "\n", "                ", "record", "=", "open", "(", "record_file", ",", "'a'", ")", "\n", "record", ".", "write", "(", "str", "(", "self", ".", "args", ")", ")", "\n", "record", ".", "close", "(", ")", "\n", "\n", "", "if", "batch_idx", "%", "self", ".", "interval", "==", "0", ":", "\n", "                ", "print", "(", "\n", "'Train Epoch: {:>3} [{:>3}/{} ({:.2f}%)]\\tLoss_cls_domain: {:.5f}\\tLoss_cls_source: {:.5f}'", "\n", "'\\tLoss_global: {:.5f}\\tLoss_local: {:.5f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "+", "1", ",", "self", ".", "niter", ",", "(", "batch_idx", "+", "1.", ")", "/", "self", ".", "niter", ",", "\n", "loss_cls_dom", ".", "item", "(", ")", ",", "loss_cls_src", ".", "item", "(", ")", ",", "loss_global", ".", "item", "(", ")", ",", "loss_local", ".", "item", "(", ")", ")", ")", "\n", "if", "record_file", ":", "\n", "                    ", "record", "=", "open", "(", "record_file", ",", "'a'", ")", "\n", "record", ".", "write", "(", "\n", "'\\nTrain Epoch: {:>3} [{:>3}/{} ({:.2f}%)]\\tLoss_cls_domain: {:.5f}\\tLoss_cls_source: {:.5f}'", "\n", "'\\tLoss_global: {:.5f}\\tLoss_local: {:.5f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "+", "1", ",", "self", ".", "niter", ",", "(", "batch_idx", "+", "1.", ")", "/", "self", ".", "niter", ",", "\n", "loss_cls_dom", ".", "item", "(", ")", ",", "loss_cls_src", ".", "item", "(", ")", ",", "loss_global", ".", "item", "(", ")", ",", "loss_local", ".", "item", "(", ")", ")", ")", "\n", "record", ".", "close", "(", ")", "\n", "\n", "", "", "", "return", "batch_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.train_gcn_adapt": [[268, 376], ["torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "solver.Solver.G.train", "solver.Solver.GCN.train", "enumerate", "list", "list", "range", "data[].cuda", "solver.Solver.reset_grad", "list", "range", "solver.Solver.G", "list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "solver.Solver.construct_adj", "solver.Solver.GCN", "solver.Solver.pseudo_label", "list.pop", "list.append", "list.append", "solver.Solver.update_statistics", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "domain_label.long().cuda.long().cuda.long().cuda", "torch.CrossEntropyLoss().cuda.", "torch.CrossEntropyLoss().cuda.", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "loss.backward", "solver.Solver.opt_gcn.step", "solver.Solver.opt_g.step", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "data[].cuda", "data[].long().cuda", "list.append", "list.append", "solver.Solver.G", "list.append", "solver.Solver.adj_loss", "open", "open.write", "open.close", "print", "data[].cuda.size", "domain_label.long().cuda.long().cuda.long", "open", "open.write", "open.close", "data[].long", "data[].cuda.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "str", "nn.CrossEntropyLoss().cuda.item", "nn.CrossEntropyLoss().cuda.item", "loss_cls_tgt.item", "loss_global.item", "solver.Solver.item", "nn.CrossEntropyLoss().cuda.item", "nn.CrossEntropyLoss().cuda.item", "loss_cls_tgt.item", "loss_global.item", "solver.Solver.item", "str", "str"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.reset_grad", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.construct_adj", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.pseudo_label", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.update_statistics", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.grad_reverse.GradReverse.backward", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.adj_loss"], ["", "def", "train_gcn_adapt", "(", "self", ",", "epoch", ",", "record_file", "=", "None", ")", ":", "\n", "        ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "G", ".", "train", "(", ")", "\n", "self", ".", "GCN", ".", "train", "(", ")", "\n", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "self", ".", "datasets", ")", ":", "\n", "# get the source batches", "\n", "            ", "img_s", "=", "list", "(", ")", "\n", "label_s", "=", "list", "(", ")", "\n", "stop_iter", "=", "False", "\n", "for", "domain_idx", "in", "range", "(", "self", ".", "ndomain", "-", "1", ")", ":", "\n", "                ", "tmp_img", "=", "data", "[", "'S'", "+", "str", "(", "domain_idx", "+", "1", ")", "]", ".", "cuda", "(", ")", "\n", "tmp_label", "=", "data", "[", "'S'", "+", "str", "(", "domain_idx", "+", "1", ")", "+", "'_label'", "]", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "img_s", ".", "append", "(", "tmp_img", ")", "\n", "label_s", ".", "append", "(", "tmp_label", ")", "\n", "\n", "if", "tmp_img", ".", "size", "(", ")", "[", "0", "]", "<", "self", ".", "batch_size", ":", "\n", "                    ", "stop_iter", "=", "True", "\n", "\n", "", "", "if", "stop_iter", ":", "\n", "                ", "break", "\n", "\n", "# get the target batch", "\n", "", "img_t", "=", "data", "[", "'T'", "]", ".", "cuda", "(", ")", "\n", "if", "img_t", ".", "size", "(", ")", "[", "0", "]", "<", "self", ".", "batch_size", ":", "\n", "                ", "break", "\n", "\n", "", "self", ".", "reset_grad", "(", ")", "\n", "\n", "# get feature embeddings", "\n", "feat_list", "=", "list", "(", ")", "\n", "for", "domain_idx", "in", "range", "(", "self", ".", "ndomain", "-", "1", ")", ":", "\n", "                ", "tmp_img", "=", "img_s", "[", "domain_idx", "]", "\n", "tmp_feat", "=", "self", ".", "G", "(", "tmp_img", ")", "\n", "feat_list", ".", "append", "(", "tmp_feat", ")", "\n", "\n", "", "feat_t", "=", "self", ".", "G", "(", "img_t", ")", "\n", "feat_list", ".", "append", "(", "feat_t", ")", "\n", "feats", "=", "torch", ".", "cat", "(", "feat_list", ",", "dim", "=", "0", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "label_s", ",", "dim", "=", "0", ")", "\n", "\n", "# add query samples to the domain graph", "\n", "gcn_feats", "=", "torch", ".", "cat", "(", "[", "self", ".", "mean", ",", "feats", "]", ",", "dim", "=", "0", ")", "\n", "gcn_adj", "=", "self", ".", "construct_adj", "(", "feats", ")", "\n", "\n", "# output classification logit with GCN", "\n", "gcn_logit", "=", "self", ".", "GCN", "(", "gcn_feats", ",", "gcn_adj", ")", "\n", "\n", "# predict the psuedo labels for target domain", "\n", "feat_t_", ",", "label_t_", "=", "self", ".", "pseudo_label", "(", "gcn_logit", "[", "-", "feat_t", ".", "shape", "[", "0", "]", ":", ",", ":", "]", ",", "feat_t", ")", "\n", "feat_list", ".", "pop", "(", ")", "\n", "feat_list", ".", "append", "(", "feat_t_", ")", "\n", "label_s", ".", "append", "(", "label_t_", ")", "\n", "\n", "# update the statistics for source and target domains", "\n", "loss_local", "=", "self", ".", "update_statistics", "(", "feat_list", ",", "label_s", ")", "\n", "\n", "# define GCN classification losses", "\n", "domain_logit", "=", "gcn_logit", "[", ":", "self", ".", "mean", ".", "shape", "[", "0", "]", ",", ":", "]", "\n", "domain_label", "=", "torch", ".", "cat", "(", "[", "torch", ".", "arange", "(", "self", ".", "args", ".", "nclasses", ")", "]", "*", "self", ".", "ndomain", ",", "dim", "=", "0", ")", "\n", "domain_label", "=", "domain_label", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "loss_cls_dom", "=", "criterion", "(", "domain_logit", ",", "domain_label", ")", "\n", "\n", "query_logit", "=", "gcn_logit", "[", "self", ".", "mean", ".", "shape", "[", "0", "]", ":", ",", ":", "]", "\n", "loss_cls_src", "=", "criterion", "(", "query_logit", "[", ":", "-", "feat_t", ".", "shape", "[", "0", "]", "]", ",", "labels", ")", "\n", "\n", "target_logit", "=", "query_logit", "[", "-", "feat_t", ".", "shape", "[", "0", "]", ":", "]", "\n", "target_prob", "=", "F", ".", "softmax", "(", "target_logit", ",", "dim", "=", "1", ")", "\n", "loss_cls_tgt", "=", "(", "-", "target_prob", "*", "torch", ".", "log", "(", "target_prob", "+", "1e-8", ")", ")", ".", "mean", "(", ")", "\n", "\n", "loss_cls", "=", "loss_cls_dom", "+", "loss_cls_src", "+", "loss_cls_tgt", "\n", "\n", "# define relation alignment losses", "\n", "loss_global", "=", "self", ".", "adj_loss", "(", ")", "*", "self", ".", "args", ".", "Lambda_global", "\n", "loss_local", "=", "loss_local", "*", "self", ".", "args", ".", "Lambda_local", "\n", "loss_relation", "=", "loss_local", "+", "loss_global", "\n", "\n", "loss", "=", "loss_cls", "+", "loss_relation", "\n", "\n", "# back-propagation", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "opt_gcn", ".", "step", "(", ")", "\n", "self", ".", "opt_g", ".", "step", "(", ")", "\n", "\n", "# record training information", "\n", "if", "epoch", "==", "0", "and", "batch_idx", "==", "0", ":", "\n", "                ", "record", "=", "open", "(", "record_file", ",", "'a'", ")", "\n", "record", ".", "write", "(", "str", "(", "self", ".", "args", ")", "+", "'\\n'", ")", "\n", "record", ".", "close", "(", ")", "\n", "\n", "", "if", "batch_idx", "%", "self", ".", "interval", "==", "0", ":", "\n", "                ", "print", "(", "\n", "'Train Epoch: {:>3} [{:>3}/{} ({:.2f}%)]\\tLoss_cls_domain: {:.5f}\\tLoss_cls_source: {:.5f}'", "\n", "'\\tLoss_cls_target: {:.5f}\\tLoss_global: {:.5f}\\tLoss_local: {:.5f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "+", "1", ",", "self", ".", "niter", ",", "(", "batch_idx", "+", "1.", ")", "/", "self", ".", "niter", ",", "\n", "loss_cls_dom", ".", "item", "(", ")", ",", "loss_cls_src", ".", "item", "(", ")", ",", "loss_cls_tgt", ".", "item", "(", ")", ",", "\n", "loss_global", ".", "item", "(", ")", ",", "loss_local", ".", "item", "(", ")", ")", ")", "\n", "if", "record_file", ":", "\n", "                    ", "record", "=", "open", "(", "record_file", ",", "'a'", ")", "\n", "record", ".", "write", "(", "\n", "'\\nTrain Epoch: {:>3} [{:>3}/{} ({:.2f}%)]\\tLoss_cls_domain: {:.5f}\\tLoss_cls_source: {:.5f}'", "\n", "'\\tLoss_cls_target: {:.5f}\\tLoss_global: {:.5f}\\tLoss_local: {:.5f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "+", "1", ",", "self", ".", "niter", ",", "(", "batch_idx", "+", "1.", ")", "/", "self", ".", "niter", ",", "\n", "loss_cls_dom", ".", "item", "(", ")", ",", "loss_cls_src", ".", "item", "(", ")", ",", "loss_cls_tgt", ".", "item", "(", ")", ",", "\n", "loss_global", ".", "item", "(", ")", ",", "loss_local", ".", "item", "(", ")", ")", ")", "\n", "record", ".", "close", "(", ")", "\n", "\n", "", "", "", "return", "batch_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.test": [[378, 437], ["solver.Solver.G.eval", "solver.Solver.GCN.eval", "enumerate", "print", "solver.Solver.G", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "solver.Solver.construct_adj", "solver.Solver.GCN", "pred.eq().cpu().sum", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "open", "print", "open.write", "open.close", "img.cuda", "label.long().cuda", "torch.nll_loss().item", "torch.nll_loss().item", "torch.nll_loss().item", "torch.nll_loss().item", "output.max", "label.size", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "solver.Solver.G.state_dict", "solver.Solver.GCN.state_dict", "solver.Solver.mean.cpu", "solver.Solver.adj.cpu", "os.path.join", "open", "open.write", "open.close", "pred.eq().cpu", "solver.Solver.G.state_dict", "solver.Solver.GCN.state_dict", "solver.Solver.mean.cpu", "solver.Solver.adj.cpu", "os.path.join", "str", "label.long", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "float", "float", "pred.eq", "str", "float", "float"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.construct_adj"], ["", "def", "test", "(", "self", ",", "epoch", ",", "record_file", "=", "None", ",", "save_model", "=", "False", ")", ":", "\n", "        ", "self", ".", "G", ".", "eval", "(", ")", "\n", "self", ".", "GCN", ".", "eval", "(", ")", "\n", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "size", "=", "0", "\n", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "self", ".", "dataset_test", ")", ":", "\n", "            ", "img", "=", "data", "[", "'T'", "]", "\n", "label", "=", "data", "[", "'T_label'", "]", "\n", "img", ",", "label", "=", "img", ".", "cuda", "(", ")", ",", "label", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "feat", "=", "self", ".", "G", "(", "img", ")", "\n", "\n", "gcn_feats", "=", "torch", ".", "cat", "(", "[", "self", ".", "mean", ",", "feat", "]", ",", "dim", "=", "0", ")", "\n", "gcn_adj", "=", "self", ".", "construct_adj", "(", "feat", ")", "\n", "gcn_logit", "=", "self", ".", "GCN", "(", "gcn_feats", ",", "gcn_adj", ")", "\n", "output", "=", "gcn_logit", "[", "self", ".", "mean", ".", "shape", "[", "0", "]", ":", ",", ":", "]", "\n", "\n", "test_loss", "+=", "-", "F", ".", "nll_loss", "(", "output", ",", "label", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "k", "=", "label", ".", "size", "(", ")", "[", "0", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "label", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "size", "+=", "k", "\n", "\n", "", "test_loss", "=", "test_loss", "/", "size", "\n", "\n", "if", "correct", ">", "self", ".", "best_correct", ":", "\n", "            ", "self", ".", "best_correct", "=", "correct", "\n", "if", "save_model", ":", "\n", "                ", "best_state", "=", "{", "'G'", ":", "self", ".", "G", ".", "state_dict", "(", ")", ",", "'GCN'", ":", "self", ".", "GCN", ".", "state_dict", "(", ")", ",", "'mean'", ":", "self", ".", "mean", ".", "cpu", "(", ")", ",", "\n", "'adj'", ":", "self", ".", "adj", ".", "cpu", "(", ")", ",", "'epoch'", ":", "epoch", "}", "\n", "torch", ".", "save", "(", "best_state", ",", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "'best_model.pth'", ")", ")", "\n", "\n", "# save checkpoint", "\n", "", "", "if", "save_model", "and", "epoch", "%", "self", ".", "save_epoch", "==", "0", ":", "\n", "            ", "state", "=", "{", "'G'", ":", "self", ".", "G", ".", "state_dict", "(", ")", ",", "'GCN'", ":", "self", ".", "GCN", ".", "state_dict", "(", ")", ",", "'mean'", ":", "self", ".", "mean", ".", "cpu", "(", ")", ",", "\n", "'adj'", ":", "self", ".", "adj", ".", "cpu", "(", ")", "}", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "'epoch_'", "+", "str", "(", "epoch", ")", "+", "'.pth'", ")", ")", "\n", "\n", "# record test information", "\n", "", "print", "(", "\n", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.4f}%), Best Accuracy: {}/{} ({:.4f}%)  \\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "size", ",", "100.", "*", "float", "(", "correct", ")", "/", "size", ",", "self", ".", "best_correct", ",", "size", ",", "\n", "100.", "*", "float", "(", "self", ".", "best_correct", ")", "/", "size", ")", ")", "\n", "\n", "if", "record_file", ":", "\n", "            ", "if", "epoch", "==", "0", ":", "\n", "                ", "record", "=", "open", "(", "record_file", ",", "'a'", ")", "\n", "record", ".", "write", "(", "str", "(", "self", ".", "args", ")", ")", "\n", "record", ".", "close", "(", ")", "\n", "\n", "", "record", "=", "open", "(", "record_file", ",", "'a'", ")", "\n", "print", "(", "'recording %s'", ",", "record_file", ")", "\n", "record", ".", "write", "(", "\n", "'\\nEpoch {:>3} Average loss: {:.5f}, Accuracy: {:.5f}, Best Accuracy: {:.5f}'", ".", "format", "(", "\n", "epoch", ",", "test_loss", ",", "100.", "*", "float", "(", "correct", ")", "/", "size", ",", "100.", "*", "float", "(", "self", ".", "best_correct", ")", "/", "size", ")", ")", "\n", "record", ".", "close", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.train.main": [[76, 112], ["solver.Solver", "os.path.exists", "range", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "print", "solver.Solver.test", "solver.Solver.train_gcn_adapt", "solver.Solver.train_gcn_baseline"], "function", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.test", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.train_gcn_adapt", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.train_gcn_baseline"], ["", "def", "main", "(", ")", ":", "\n", "# define the training solver", "\n", "    ", "solver", "=", "Solver", "(", "args", ",", "target", "=", "args", ".", "target", ",", "learning_rate", "=", "args", ".", "lr", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "optimizer", "=", "args", ".", "optimizer", ",", "checkpoint_dir", "=", "args", ".", "checkpoint_dir", ",", "save_epoch", "=", "args", ".", "save_epoch", ")", "\n", "\n", "# define recording files", "\n", "record_num", "=", "0", "\n", "record_train", "=", "'%s/%s_%s.txt'", "%", "(", "\n", "args", ".", "record_folder", ",", "args", ".", "target", ",", "record_num", ")", "\n", "record_test", "=", "'%s/%s_%s_test.txt'", "%", "(", "\n", "args", ".", "record_folder", ",", "args", ".", "target", ",", "record_num", ")", "\n", "while", "os", ".", "path", ".", "exists", "(", "record_train", ")", ":", "\n", "        ", "record_num", "+=", "1", "\n", "record_train", "=", "'%s/%s_%s.txt'", "%", "(", "\n", "args", ".", "record_folder", ",", "args", ".", "target", ",", "record_num", ")", "\n", "record_test", "=", "'%s/%s_%s_test.txt'", "%", "(", "\n", "args", ".", "record_folder", ",", "args", ".", "target", ",", "record_num", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "checkpoint_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "args", ".", "checkpoint_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "record_folder", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "args", ".", "record_folder", ")", "\n", "\n", "# train the model", "\n", "", "for", "t", "in", "range", "(", "args", ".", "max_epoch", ")", ":", "\n", "        ", "print", "(", "'Epoch: '", ",", "t", ")", "\n", "\n", "# setting: Multi-Source Domain Adaptation", "\n", "if", "args", ".", "use_target", ":", "\n", "            ", "num", "=", "solver", ".", "train_gcn_adapt", "(", "t", ",", "record_file", "=", "record_train", ")", "\n", "# setting: Domain Generalization", "\n", "", "else", ":", "\n", "            ", "num", "=", "solver", ".", "train_gcn_baseline", "(", "t", ",", "record_file", "=", "record_train", ")", "\n", "\n", "# test on target domain", "\n", "", "solver", ".", "test", "(", "t", ",", "record_file", "=", "record_test", ",", "save_model", "=", "args", ".", "save_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.test.main": [[49, 55], ["solver.Solver", "solver.Solver.test"], "function", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.solver.Solver.test"], ["", "def", "main", "(", ")", ":", "\n", "# define the test solver", "\n", "    ", "solver", "=", "Solver", "(", "args", ",", "target", "=", "args", ".", "target", ")", "\n", "\n", "# test on target domain", "\n", "solver", ".", "test", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.utils.utils.weights_init": [[4, 12], ["classname.find", "m.weight.data.normal_", "m.bias.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "normal_", "(", "0.0", ",", "0.01", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.utils.utils.dense_to_one_hot": [[13, 24], ["numpy.zeros", "list", "enumerate", "len"], "function", ["None"], ["", "", "def", "dense_to_one_hot", "(", "labels_dense", ")", ":", "\n", "    ", "\"\"\"Convert class labels from scalars to one-hot vectors.\"\"\"", "\n", "labels_one_hot", "=", "np", ".", "zeros", "(", "(", "len", "(", "labels_dense", ")", ",", ")", ")", "\n", "labels_dense", "=", "list", "(", "labels_dense", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "labels_dense", ")", ":", "\n", "        ", "if", "t", "==", "10", ":", "\n", "            ", "t", "=", "0", "\n", "labels_one_hot", "[", "i", "]", "=", "t", "\n", "", "else", ":", "\n", "            ", "labels_one_hot", "[", "i", "]", "=", "t", "\n", "", "", "return", "labels_one_hot", "\n", "", ""]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.synth_number.load_syn": [[9, 36], ["scipy.io.loadmat", "syn_train.transpose().astype.transpose().astype", "syn_test.transpose().astype.transpose().astype", "numpy.random.permutation", "utils.utils.dense_to_one_hot", "utils.utils.dense_to_one_hot", "print", "print", "print", "print", "syn_train.transpose().astype.transpose", "syn_test.transpose().astype.transpose"], "function", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.utils.utils.dense_to_one_hot", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.utils.utils.dense_to_one_hot"], ["def", "load_syn", "(", "scale", "=", "True", ",", "usps", "=", "False", ",", "all_use", "=", "False", ")", ":", "\n", "    ", "syn_data", "=", "loadmat", "(", "base_dir", "+", "'/syn_number.mat'", ")", "\n", "syn_train", "=", "syn_data", "[", "'train_data'", "]", "\n", "syn_test", "=", "syn_data", "[", "'test_data'", "]", "\n", "syn_train", "=", "syn_train", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "syn_test", "=", "syn_test", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "syn_labels_train", "=", "syn_data", "[", "'train_label'", "]", "\n", "syn_labels_test", "=", "syn_data", "[", "'test_label'", "]", "\n", "\n", "train_label", "=", "syn_labels_train", "\n", "inds", "=", "np", ".", "random", ".", "permutation", "(", "syn_train", ".", "shape", "[", "0", "]", ")", "\n", "syn_train", "=", "syn_train", "[", "inds", "]", "\n", "train_label", "=", "train_label", "[", "inds", "]", "\n", "test_label", "=", "syn_labels_test", "\n", "\n", "# syn_train = syn_train[:25000]", "\n", "# train_label = train_label[:25000]", "\n", "# syn_test = syn_test[:9000]", "\n", "# test_label = test_label[:9000]", "\n", "train_label", "=", "dense_to_one_hot", "(", "train_label", ")", "\n", "test_label", "=", "dense_to_one_hot", "(", "test_label", ")", "\n", "\n", "print", "(", "'syn number train X shape->'", ",", "syn_train", ".", "shape", ")", "\n", "print", "(", "'syn number train y shape->'", ",", "train_label", ".", "shape", ")", "\n", "print", "(", "'syn number test X shape->'", ",", "syn_test", ".", "shape", ")", "\n", "print", "(", "'syn number test y shape->'", ",", "test_label", ".", "shape", ")", "\n", "return", "syn_train", ",", "train_label", ",", "syn_test", ",", "test_label", "\n", "", ""]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.datasets_.Dataset.__init__": [[16, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data", ",", "label", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "labels", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.datasets_.Dataset.__getitem__": [[23, 51], ["PIL.Image.fromarray", "datasets_.Dataset.target_transform", "datasets_.Dataset.transform", "numpy.uint8", "numpy.uint8", "numpy.vstack().transpose", "PIL.Image.fromarray", "numpy.asarray", "numpy.asarray", "PIL.Image.fromarray.transpose", "numpy.vstack"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n         Args:\n             index (int): Index\n         Returns:\n             tuple: (image, target) where target is index of the target class.\n         \"\"\"", "\n", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "# print(img.shape)", "\n", "if", "img", ".", "shape", "[", "0", "]", "!=", "1", ":", "\n", "#print(img)", "\n", "            ", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "np", ".", "asarray", "(", "img", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ")", ")", ")", "\n", "\n", "", "elif", "img", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "im", "=", "np", ".", "uint8", "(", "np", ".", "asarray", "(", "img", ")", ")", "\n", "#print(np.vstack([im,im,im]).shape)", "\n", "im", "=", "np", ".", "vstack", "(", "[", "im", ",", "im", ",", "im", "]", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "im", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "# return img, target", "\n", "", "return", "img", ",", "target", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.datasets_.Dataset.__len__": [[51, 53], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.mnist_m.load_mnistm": [[5, 29], ["scipy.io.loadmat", "mnistm_train.transpose().astype.transpose().astype", "mnistm_test.transpose().astype.transpose().astype", "numpy.argmax", "numpy.random.permutation", "numpy.argmax", "print", "print", "print", "print", "mnistm_train.transpose().astype.transpose", "mnistm_test.transpose().astype.transpose"], "function", ["None"], ["def", "load_mnistm", "(", "scale", "=", "True", ",", "usps", "=", "False", ",", "all_use", "=", "False", ")", ":", "\n", "    ", "mnistm_data", "=", "loadmat", "(", "base_dir", "+", "'/mnistm_with_label.mat'", ")", "\n", "mnistm_train", "=", "mnistm_data", "[", "'train'", "]", "\n", "mnistm_test", "=", "mnistm_data", "[", "'test'", "]", "\n", "mnistm_train", "=", "mnistm_train", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mnistm_test", "=", "mnistm_test", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mnistm_labels_train", "=", "mnistm_data", "[", "'label_train'", "]", "\n", "mnistm_labels_test", "=", "mnistm_data", "[", "'label_test'", "]", "\n", "\n", "train_label", "=", "np", ".", "argmax", "(", "mnistm_labels_train", ",", "axis", "=", "1", ")", "\n", "inds", "=", "np", ".", "random", ".", "permutation", "(", "mnistm_train", ".", "shape", "[", "0", "]", ")", "\n", "mnistm_train", "=", "mnistm_train", "[", "inds", "]", "\n", "train_label", "=", "train_label", "[", "inds", "]", "\n", "test_label", "=", "np", ".", "argmax", "(", "mnistm_labels_test", ",", "axis", "=", "1", ")", "\n", "\n", "mnistm_train", "=", "mnistm_train", "[", ":", "25000", "]", "\n", "train_label", "=", "train_label", "[", ":", "25000", "]", "\n", "mnistm_test", "=", "mnistm_test", "[", ":", "9000", "]", "\n", "test_label", "=", "test_label", "[", ":", "9000", "]", "\n", "print", "(", "'mnist_m train X shape->'", ",", "mnistm_train", ".", "shape", ")", "\n", "print", "(", "'mnist_m train y shape->'", ",", "train_label", ".", "shape", ")", "\n", "print", "(", "'mnist_m test X shape->'", ",", "mnistm_test", ".", "shape", ")", "\n", "print", "(", "'mnist_m test y shape->'", ",", "test_label", ".", "shape", ")", "\n", "return", "mnistm_train", ",", "train_label", ",", "mnistm_test", ",", "test_label", "\n", "", ""]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.mnist.load_mnist": [[5, 41], ["scipy.io.loadmat", "numpy.argmax", "numpy.random.permutation", "numpy.argmax", "print", "print", "print", "print", "numpy.reshape", "numpy.reshape", "numpy.concatenate", "numpy.concatenate", "mnist_train.transpose.transpose().astype", "mnist_test.transpose.transpose().astype", "mnist_train.transpose.astype", "mnist_test.transpose.astype", "mnist_train.transpose.transpose", "mnist_test.transpose.transpose", "mnist_train.transpose.transpose", "mnist_test.transpose.transpose"], "function", ["None"], ["def", "load_mnist", "(", "scale", "=", "True", ",", "usps", "=", "False", ",", "all_use", "=", "False", ")", ":", "\n", "    ", "mnist_data", "=", "loadmat", "(", "base_dir", "+", "'/mnist_data.mat'", ")", "\n", "if", "scale", ":", "\n", "        ", "mnist_train", "=", "np", ".", "reshape", "(", "mnist_data", "[", "'train_32'", "]", ",", "(", "55000", ",", "32", ",", "32", ",", "1", ")", ")", "\n", "mnist_test", "=", "np", ".", "reshape", "(", "mnist_data", "[", "'test_32'", "]", ",", "(", "10000", ",", "32", ",", "32", ",", "1", ")", ")", "\n", "mnist_train", "=", "np", ".", "concatenate", "(", "[", "mnist_train", ",", "mnist_train", ",", "mnist_train", "]", ",", "3", ")", "\n", "mnist_test", "=", "np", ".", "concatenate", "(", "[", "mnist_test", ",", "mnist_test", ",", "mnist_test", "]", ",", "3", ")", "\n", "mnist_train", "=", "mnist_train", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mnist_test", "=", "mnist_test", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mnist_labels_train", "=", "mnist_data", "[", "'label_train'", "]", "\n", "mnist_labels_test", "=", "mnist_data", "[", "'label_test'", "]", "\n", "", "else", ":", "\n", "        ", "mnist_train", "=", "mnist_data", "[", "'train_28'", "]", "\n", "mnist_test", "=", "mnist_data", "[", "'test_28'", "]", "\n", "mnist_labels_train", "=", "mnist_data", "[", "'label_train'", "]", "\n", "mnist_labels_test", "=", "mnist_data", "[", "'label_test'", "]", "\n", "mnist_train", "=", "mnist_train", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mnist_test", "=", "mnist_test", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mnist_train", "=", "mnist_train", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "mnist_test", "=", "mnist_test", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "", "train_label", "=", "np", ".", "argmax", "(", "mnist_labels_train", ",", "axis", "=", "1", ")", "\n", "inds", "=", "np", ".", "random", ".", "permutation", "(", "mnist_train", ".", "shape", "[", "0", "]", ")", "\n", "mnist_train", "=", "mnist_train", "[", "inds", "]", "\n", "train_label", "=", "train_label", "[", "inds", "]", "\n", "test_label", "=", "np", ".", "argmax", "(", "mnist_labels_test", ",", "axis", "=", "1", ")", "\n", "\n", "mnist_train", "=", "mnist_train", "[", ":", "25000", "]", "\n", "train_label", "=", "train_label", "[", ":", "25000", "]", "\n", "mnist_test", "=", "mnist_test", "[", ":", "25000", "]", "\n", "test_label", "=", "test_label", "[", ":", "25000", "]", "\n", "print", "(", "'mnist train X shape->'", ",", "mnist_train", ".", "shape", ")", "\n", "print", "(", "'mnist train y shape->'", ",", "train_label", ".", "shape", ")", "\n", "print", "(", "'mnist test X shape->'", ",", "mnist_test", ".", "shape", ")", "\n", "print", "(", "'mnist test y shape->'", ",", "test_label", ".", "shape", ")", "\n", "\n", "return", "mnist_train", ",", "train_label", ",", "mnist_test", ",", "test_label", "\n", "", ""]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.synth_traffic.load_syntraffic": [[4, 14], ["pickle.load", "numpy.random.permutation", "data_s_im.transpose().astype.transpose().astype", "data_s_im_test.transpose().astype.transpose().astype", "open", "len", "data_s_im.transpose().astype.transpose", "data_s_im_test.transpose().astype.transpose", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load"], ["def", "load_syntraffic", "(", ")", ":", "\n", "    ", "data_source", "=", "pkl", ".", "load", "(", "open", "(", "'../data/data_synthetic'", ")", ")", "\n", "source_train", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "data_source", "[", "'image'", "]", ")", ")", "\n", "data_s_im", "=", "data_source", "[", "'image'", "]", "[", "source_train", "[", ":", "len", "(", "data_source", "[", "'image'", "]", ")", "]", ",", ":", ",", ":", ",", ":", "]", "\n", "data_s_im_test", "=", "data_source", "[", "'image'", "]", "[", "source_train", "[", "len", "(", "data_source", "[", "'image'", "]", ")", "-", "2000", ":", "]", ",", ":", ",", ":", ",", ":", "]", "\n", "data_s_label", "=", "data_source", "[", "'label'", "]", "[", "source_train", "[", ":", "len", "(", "data_source", "[", "'image'", "]", ")", "]", "]", "\n", "data_s_label_test", "=", "data_source", "[", "'label'", "]", "[", "source_train", "[", "len", "(", "data_source", "[", "'image'", "]", ")", "-", "2000", ":", "]", "]", "\n", "data_s_im", "=", "data_s_im", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "data_s_im_test", "=", "data_s_im_test", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "data_s_im", ",", "data_s_label", ",", "data_s_im_test", ",", "data_s_label_test", "", "", ""]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.gtsrb.load_gtsrb": [[4, 14], ["pickle.load", "numpy.random.permutation", "data_t_im.transpose().astype.transpose().astype", "data_t_im_test.transpose().astype.transpose().astype", "open", "len", "data_t_im.transpose().astype.transpose", "data_t_im_test.transpose().astype.transpose"], "function", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load"], ["def", "load_gtsrb", "(", ")", ":", "\n", "    ", "data_target", "=", "pkl", ".", "load", "(", "open", "(", "'../data/data_gtsrb'", ")", ")", "\n", "target_train", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "data_target", "[", "'image'", "]", ")", ")", "\n", "data_t_im", "=", "data_target", "[", "'image'", "]", "[", "target_train", "[", ":", "31367", "]", ",", ":", ",", ":", ",", ":", "]", "\n", "data_t_im_test", "=", "data_target", "[", "'image'", "]", "[", "target_train", "[", "31367", ":", "]", ",", ":", ",", ":", ",", ":", "]", "\n", "data_t_label", "=", "data_target", "[", "'label'", "]", "[", "target_train", "[", ":", "31367", "]", "]", "+", "1", "\n", "data_t_label_test", "=", "data_target", "[", "'label'", "]", "[", "target_train", "[", "31367", ":", "]", "]", "+", "1", "\n", "data_t_im", "=", "data_t_im", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "data_t_im_test", "=", "data_t_im_test", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "data_t_im", ",", "data_t_label", ",", "data_t_im_test", ",", "data_t_label_test", "\n", "", ""]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.unaligned_data_loader.PairedData.__init__": [[9, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_loader_A", ",", "data_loader_B", ",", "data_loader_C", ",", "data_loader_D", ",", "data_loader_t", ",", "max_dataset_size", ")", ":", "\n", "        ", "self", ".", "data_loader_A", "=", "data_loader_A", "\n", "self", ".", "data_loader_B", "=", "data_loader_B", "\n", "self", ".", "data_loader_C", "=", "data_loader_C", "\n", "self", ".", "data_loader_D", "=", "data_loader_D", "\n", "self", ".", "data_loader_t", "=", "data_loader_t", "\n", "\n", "self", ".", "stop_A", "=", "False", "\n", "self", ".", "stop_B", "=", "False", "\n", "self", ".", "stop_C", "=", "False", "\n", "self", ".", "stop_D", "=", "False", "\n", "self", ".", "stop_t", "=", "False", "\n", "self", ".", "max_dataset_size", "=", "max_dataset_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.unaligned_data_loader.PairedData.__iter__": [[23, 37], ["iter", "iter", "iter", "iter", "iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "stop_A", "=", "False", "\n", "self", ".", "stop_B", "=", "False", "\n", "self", ".", "stop_C", "=", "False", "\n", "self", ".", "stop_D", "=", "False", "\n", "self", ".", "stop_t", "=", "False", "\n", "\n", "self", ".", "data_loader_A_iter", "=", "iter", "(", "self", ".", "data_loader_A", ")", "\n", "self", ".", "data_loader_B_iter", "=", "iter", "(", "self", ".", "data_loader_B", ")", "\n", "self", ".", "data_loader_C_iter", "=", "iter", "(", "self", ".", "data_loader_C", ")", "\n", "self", ".", "data_loader_D_iter", "=", "iter", "(", "self", ".", "data_loader_D", ")", "\n", "self", ".", "data_loader_t_iter", "=", "iter", "(", "self", ".", "data_loader_t", ")", "\n", "self", ".", "iter", "=", "0", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.unaligned_data_loader.PairedData.__next__": [[38, 96], ["next", "next", "next", "next", "next", "StopIteration", "iter", "next", "iter", "next", "iter", "next", "iter", "next", "iter", "next"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "A", ",", "A_paths", "=", "None", ",", "None", "\n", "B", ",", "B_paths", "=", "None", ",", "None", "\n", "C", ",", "C_paths", "=", "None", ",", "None", "\n", "D", ",", "D_paths", "=", "None", ",", "None", "\n", "t", ",", "t_paths", "=", "None", ",", "None", "\n", "try", ":", "\n", "            ", "A", ",", "A_paths", "=", "next", "(", "self", ".", "data_loader_A_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "if", "A", "is", "None", "or", "A_paths", "is", "None", ":", "\n", "                ", "self", ".", "stop_A", "=", "True", "\n", "self", ".", "data_loader_A_iter", "=", "iter", "(", "self", ".", "data_loader_A", ")", "\n", "A", ",", "A_paths", "=", "next", "(", "self", ".", "data_loader_A_iter", ")", "\n", "\n", "", "", "try", ":", "\n", "            ", "B", ",", "B_paths", "=", "next", "(", "self", ".", "data_loader_B_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "if", "B", "is", "None", "or", "B_paths", "is", "None", ":", "\n", "                ", "self", ".", "stop_B", "=", "True", "\n", "self", ".", "data_loader_B_iter", "=", "iter", "(", "self", ".", "data_loader_B", ")", "\n", "B", ",", "B_paths", "=", "next", "(", "self", ".", "data_loader_B_iter", ")", "\n", "", "", "try", ":", "\n", "            ", "C", ",", "C_paths", "=", "next", "(", "self", ".", "data_loader_C_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "if", "C", "is", "None", "or", "C_paths", "is", "None", ":", "\n", "                ", "self", ".", "stop_C", "=", "True", "\n", "self", ".", "data_loader_C_iter", "=", "iter", "(", "self", ".", "data_loader_C", ")", "\n", "C", ",", "C_paths", "=", "next", "(", "self", ".", "data_loader_C_iter", ")", "\n", "", "", "try", ":", "\n", "            ", "D", ",", "D_paths", "=", "next", "(", "self", ".", "data_loader_D_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "if", "D", "is", "None", "or", "D_paths", "is", "None", ":", "\n", "                ", "self", ".", "stop_D", "=", "True", "\n", "self", ".", "data_loader_D_iter", "=", "iter", "(", "self", ".", "data_loader_D", ")", "\n", "D", ",", "D_paths", "=", "next", "(", "self", ".", "data_loader_D_iter", ")", "\n", "\n", "", "", "try", ":", "\n", "            ", "t", ",", "t_paths", "=", "next", "(", "self", ".", "data_loader_t_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "if", "t", "is", "None", "or", "t_paths", "is", "None", ":", "\n", "                ", "self", ".", "stop_t", "=", "True", "\n", "self", ".", "data_loader_t_iter", "=", "iter", "(", "self", ".", "data_loader_t", ")", "\n", "t", ",", "t_paths", "=", "next", "(", "self", ".", "data_loader_t_iter", ")", "\n", "\n", "", "", "if", "(", "self", ".", "stop_A", "and", "self", ".", "stop_B", "and", "self", ".", "stop_C", "and", "self", ".", "stop_D", "and", "self", ".", "stop_t", ")", "or", "self", ".", "iter", ">", "self", ".", "max_dataset_size", ":", "\n", "            ", "self", ".", "stop_A", "=", "False", "\n", "self", ".", "stop_B", "=", "False", "\n", "self", ".", "stop_C", "=", "False", "\n", "self", ".", "stop_D", "=", "False", "\n", "self", ".", "stop_t", "=", "False", "\n", "raise", "StopIteration", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "iter", "+=", "1", "\n", "return", "{", "'S1'", ":", "A", ",", "'S1_label'", ":", "A_paths", ",", "\n", "'S2'", ":", "B", ",", "'S2_label'", ":", "B_paths", ",", "\n", "'S3'", ":", "C", ",", "'S3_label'", ":", "C_paths", ",", "\n", "'S4'", ":", "D", ",", "'S4_label'", ":", "D_paths", ",", "\n", "'T'", ":", "t", ",", "'T_label'", ":", "t_paths", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.unaligned_data_loader.UnalignedDataLoader.initialize": [[99, 131], ["torchvision.Compose", "datasets_.Dataset", "torch.utils.data.DataLoader", "datasets_.Dataset", "torch.utils.data.DataLoader", "datasets_.Dataset", "torch.utils.data.DataLoader", "datasets_.Dataset", "torch.utils.data.DataLoader", "datasets_.Dataset", "torch.utils.data.DataLoader", "unaligned_data_loader.PairedData", "float", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["    ", "def", "initialize", "(", "self", ",", "source", ",", "target", ",", "batch_size1", ",", "batch_size2", ",", "scale", "=", "32", ")", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "scale", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", "\n", "#dataset_source1 = Dataset(source[1]['imgs'], source['labels'], transform=transform)", "\n", "dataset_source1", "=", "Dataset", "(", "source", "[", "0", "]", "[", "'imgs'", "]", ",", "source", "[", "0", "]", "[", "'labels'", "]", ",", "transform", "=", "transform", ")", "\n", "data_loader_s1", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset_source1", ",", "batch_size", "=", "batch_size1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "self", ".", "dataset_s1", "=", "dataset_source1", "\n", "\n", "dataset_source2", "=", "Dataset", "(", "source", "[", "1", "]", "[", "'imgs'", "]", ",", "source", "[", "1", "]", "[", "'labels'", "]", ",", "transform", "=", "transform", ")", "\n", "data_loader_s2", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset_source2", ",", "batch_size", "=", "batch_size1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "self", ".", "dataset_s2", "=", "dataset_source2", "\n", "\n", "dataset_source3", "=", "Dataset", "(", "source", "[", "2", "]", "[", "'imgs'", "]", ",", "source", "[", "2", "]", "[", "'labels'", "]", ",", "transform", "=", "transform", ")", "\n", "data_loader_s3", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset_source3", ",", "batch_size", "=", "batch_size1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "self", ".", "dataset_s3", "=", "dataset_source3", "\n", "\n", "dataset_source4", "=", "Dataset", "(", "source", "[", "3", "]", "[", "'imgs'", "]", ",", "source", "[", "3", "]", "[", "'labels'", "]", ",", "transform", "=", "transform", ")", "\n", "data_loader_s4", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset_source4", ",", "batch_size", "=", "batch_size1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "self", ".", "dataset_s4", "=", "dataset_source4", "\n", "\n", "#for i in range(len(source)):", "\n", "#    dataset_source[i] = Dataset(source[i]['imgs'], source[i]['labels'], transform=transform)", "\n", "dataset_target", "=", "Dataset", "(", "target", "[", "'imgs'", "]", ",", "target", "[", "'labels'", "]", ",", "transform", "=", "transform", ")", "\n", "data_loader_t", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset_target", ",", "batch_size", "=", "batch_size2", ",", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "\n", "\n", "self", ".", "dataset_t", "=", "dataset_target", "\n", "self", ".", "paired_data", "=", "PairedData", "(", "data_loader_s1", ",", "data_loader_s2", ",", "data_loader_s3", ",", "data_loader_s4", ",", "data_loader_t", ",", "\n", "float", "(", "\"inf\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.unaligned_data_loader.UnalignedDataLoader.name": [[133, 135], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'UnalignedDataLoader'", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.unaligned_data_loader.UnalignedDataLoader.load_data": [[136, 138], ["None"], "methods", ["None"], ["", "def", "load_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "paired_data", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.unaligned_data_loader.UnalignedDataLoader.__len__": [[139, 141], ["min", "max", "float", "len", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "min", "(", "max", "(", "len", "(", "self", ".", "dataset_s1", ")", ",", "len", "(", "self", ".", "dataset_s2", ")", ",", "len", "(", "self", ".", "dataset_s3", ")", ",", "len", "(", "self", ".", "dataset_s4", ")", ",", "len", "(", "self", ".", "dataset_t", ")", ")", ",", "float", "(", "\"inf\"", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.dataset_read.return_dataset": [[14, 40], ["svhn.load_svhn", "mnist.load_mnist", "mnist_m.load_mnistm", "usps_.load_usps", "synth_traffic.load_syntraffic", "gtsrb.load_gtsrb", "synth_number.load_syn"], "function", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.svhn.load_svhn", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.mnist.load_mnist", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.mnist_m.load_mnistm", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.usps_.load_usps", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.synth_traffic.load_syntraffic", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.gtsrb.load_gtsrb", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.synth_number.load_syn"], ["def", "return_dataset", "(", "data", ",", "scale", "=", "False", ",", "usps", "=", "False", ",", "all_use", "=", "'no'", ")", ":", "\n", "    ", "if", "data", "==", "'svhn'", ":", "\n", "        ", "train_image", ",", "train_label", ",", "test_image", ",", "test_label", "=", "load_svhn", "(", ")", "\n", "", "if", "data", "==", "'mnist'", ":", "\n", "        ", "train_image", ",", "train_label", ",", "test_image", ",", "test_label", "=", "load_mnist", "(", ")", "\n", "#print(train_image.shape)", "\n", "", "if", "data", "==", "'mnistm'", ":", "\n", "        ", "train_image", ",", "train_label", ",", "test_image", ",", "test_label", "=", "load_mnistm", "(", ")", "\n", "#print(train_image.shape)", "\n", "", "if", "data", "==", "'usps'", ":", "\n", "        ", "train_image", ",", "train_label", ",", "test_image", ",", "test_label", "=", "load_usps", "(", ")", "\n", "", "if", "data", "==", "'synth'", ":", "\n", "        ", "train_image", ",", "train_label", ",", "test_image", ",", "test_label", "=", "load_syntraffic", "(", ")", "\n", "", "if", "data", "==", "'gtsrb'", ":", "\n", "        ", "train_image", ",", "train_label", ",", "test_image", ",", "test_label", "=", "load_gtsrb", "(", ")", "\n", "", "if", "data", "==", "'syn'", ":", "\n", "        ", "train_image", ",", "train_label", ",", "test_image", ",", "test_label", "=", "load_syn", "(", ")", "\n", "\n", "", "return", "train_image", ",", "train_label", ",", "test_image", ",", "test_label", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.dataset_read.dataset_read": [[42, 98], ["domain_all.remove", "list", "dataset_read.return_dataset", "list.append", "range", "unaligned_data_loader.UnalignedDataLoader", "unaligned_data_loader.UnalignedDataLoader.initialize", "unaligned_data_loader.UnalignedDataLoader.load_data", "unaligned_data_loader.UnalignedDataLoader", "unaligned_data_loader.UnalignedDataLoader.initialize", "unaligned_data_loader.UnalignedDataLoader.load_data", "len", "dataset_read.return_dataset", "list.append", "min"], "function", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.dataset_read.return_dataset", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.base_data_loader.BaseDataLoader.initialize", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.base_data_loader.BaseDataLoader.load_data", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.base_data_loader.BaseDataLoader.initialize", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.base_data_loader.BaseDataLoader.load_data", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.dataset_read.return_dataset"], ["", "def", "dataset_read", "(", "target", ",", "batch_size", ")", ":", "\n", "    ", "S1", "=", "{", "}", "\n", "S1_test", "=", "{", "}", "\n", "S2", "=", "{", "}", "\n", "S2_test", "=", "{", "}", "\n", "S3", "=", "{", "}", "\n", "S3_test", "=", "{", "}", "\n", "S4", "=", "{", "}", "\n", "S4_test", "=", "{", "}", "\n", "\n", "S", "=", "[", "S1", ",", "S2", ",", "S3", ",", "S4", "]", "\n", "S_test", "=", "[", "S1_test", ",", "S2_test", ",", "S3_test", ",", "S4_test", "]", "\n", "\n", "T", "=", "{", "}", "\n", "T_test", "=", "{", "}", "\n", "domain_all", "=", "[", "'mnistm'", ",", "'mnist'", ",", "'usps'", ",", "'svhn'", ",", "'syn'", "]", "\n", "domain_all", ".", "remove", "(", "target", ")", "\n", "dataset_size", "=", "list", "(", ")", "\n", "\n", "target_train", ",", "target_train_label", ",", "target_test", ",", "target_test_label", "=", "return_dataset", "(", "target", ")", "\n", "dataset_size", ".", "append", "(", "target_train", ".", "shape", "[", "0", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "domain_all", ")", ")", ":", "\n", "        ", "source_train", ",", "source_train_label", ",", "source_test", ",", "source_test_label", "=", "return_dataset", "(", "domain_all", "[", "i", "]", ")", "\n", "S", "[", "i", "]", "[", "'imgs'", "]", "=", "source_train", "\n", "S", "[", "i", "]", "[", "'labels'", "]", "=", "source_train_label", "\n", "#input target sample when test, source performance is not important", "\n", "S_test", "[", "i", "]", "[", "'imgs'", "]", "=", "source_test", "\n", "S_test", "[", "i", "]", "[", "'labels'", "]", "=", "source_test_label", "\n", "dataset_size", ".", "append", "(", "source_train", ".", "shape", "[", "0", "]", ")", "\n", "\n", "#S['imgs'] = train_source", "\n", "#S['labels'] = s_label_train", "\n", "", "T", "[", "'imgs'", "]", "=", "target_train", "\n", "T", "[", "'labels'", "]", "=", "target_train_label", "\n", "\n", "# input target samples for both ", "\n", "#S_test['imgs'] = test_target", "\n", "#S_test['labels'] = t_label_test", "\n", "T_test", "[", "'imgs'", "]", "=", "target_test", "\n", "T_test", "[", "'labels'", "]", "=", "target_test_label", "\n", "\n", "scale", "=", "32", "\n", "\n", "train_loader", "=", "UnalignedDataLoader", "(", ")", "\n", "train_loader", ".", "initialize", "(", "S", ",", "T", ",", "batch_size", ",", "batch_size", ",", "scale", "=", "scale", ")", "\n", "dataset", "=", "train_loader", ".", "load_data", "(", ")", "\n", "\n", "\n", "test_loader", "=", "UnalignedDataLoader", "(", ")", "\n", "test_loader", ".", "initialize", "(", "S_test", ",", "T_test", ",", "batch_size", ",", "batch_size", ",", "scale", "=", "scale", ")", "\n", "\n", "dataset_test", "=", "test_loader", ".", "load_data", "(", ")", "\n", "\n", "# return dataset, dataset_test, min(dataset_size), max(dataset_size)", "\n", "return", "dataset", ",", "dataset_test", ",", "min", "(", "dataset_size", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.usps_.load_usps": [[10, 43], ["scipy.io.loadmat", "numpy.random.permutation", "np.concatenate.reshape", "img_test.reshape.reshape", "utils.utils.dense_to_one_hot", "utils.utils.dense_to_one_hot", "numpy.concatenate", "numpy.concatenate", "print", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.utils.utils.dense_to_one_hot", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.utils.utils.dense_to_one_hot"], ["def", "load_usps", "(", "all_use", "=", "False", ")", ":", "\n", "#f = gzip.open('data/usps_28x28.pkl', 'rb')", "\n", "#data_set = pickle.load(f)", "\n", "#f.close()", "\n", "    ", "dataset", "=", "loadmat", "(", "base_dir", "+", "'/usps_28x28.mat'", ")", "\n", "data_set", "=", "dataset", "[", "'dataset'", "]", "\n", "img_train", "=", "data_set", "[", "0", "]", "[", "0", "]", "\n", "label_train", "=", "data_set", "[", "0", "]", "[", "1", "]", "\n", "img_test", "=", "data_set", "[", "1", "]", "[", "0", "]", "\n", "label_test", "=", "data_set", "[", "1", "]", "[", "1", "]", "\n", "inds", "=", "np", ".", "random", ".", "permutation", "(", "img_train", ".", "shape", "[", "0", "]", ")", "\n", "img_train", "=", "img_train", "[", "inds", "]", "\n", "label_train", "=", "label_train", "[", "inds", "]", "\n", "\n", "img_train", "=", "img_train", "*", "255", "\n", "img_test", "=", "img_test", "*", "255", "\n", "img_train", "=", "img_train", ".", "reshape", "(", "(", "img_train", ".", "shape", "[", "0", "]", ",", "1", ",", "28", ",", "28", ")", ")", "\n", "img_test", "=", "img_test", ".", "reshape", "(", "(", "img_test", ".", "shape", "[", "0", "]", ",", "1", ",", "28", ",", "28", ")", ")", "\n", "\n", "#img_test = dense_to_one_hot(img_test)", "\n", "label_train", "=", "dense_to_one_hot", "(", "label_train", ")", "\n", "label_test", "=", "dense_to_one_hot", "(", "label_test", ")", "\n", "\n", "img_train", "=", "np", ".", "concatenate", "(", "[", "img_train", ",", "img_train", ",", "img_train", ",", "img_train", "]", ",", "0", ")", "\n", "label_train", "=", "np", ".", "concatenate", "(", "[", "label_train", ",", "label_train", ",", "label_train", ",", "label_train", "]", ",", "0", ")", "\n", "\n", "print", "(", "'usps train X shape->'", ",", "img_train", ".", "shape", ")", "\n", "print", "(", "'usps train y shape->'", ",", "label_train", ".", "shape", ")", "\n", "print", "(", "'usps test X shape->'", ",", "img_test", ".", "shape", ")", "\n", "print", "(", "'usps test y shape->'", ",", "label_test", ".", "shape", ")", "\n", "\n", "\n", "return", "img_train", ",", "label_train", ",", "img_test", ",", "label_test", "\n", "", ""]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.base_data_loader.BaseDataLoader.__init__": [[3, 5], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.base_data_loader.BaseDataLoader.initialize": [[6, 12], ["float"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "serial_batches", "=", "0", "\n", "self", ".", "nThreads", "=", "2", "\n", "self", ".", "max_dataset_size", "=", "float", "(", "\"inf\"", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.base_data_loader.BaseDataLoader.load_data": [[13, 15], ["None"], "methods", ["None"], ["", "def", "load_data", "(", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.datasets.svhn.load_svhn": [[8, 30], ["scipy.io.loadmat", "scipy.io.loadmat", "svhn_train_im.transpose().astype.transpose().astype", "print", "utils.utils.dense_to_one_hot", "print", "svhn_test_im.transpose().astype.transpose().astype", "utils.utils.dense_to_one_hot", "print", "print", "print", "print", "svhn_train_im.transpose().astype.transpose", "svhn_test_im.transpose().astype.transpose"], "function", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.utils.utils.dense_to_one_hot", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.utils.utils.dense_to_one_hot"], ["def", "load_svhn", "(", ")", ":", "\n", "    ", "svhn_train", "=", "loadmat", "(", "base_dir", "+", "'/svhn_train_32x32.mat'", ")", "\n", "svhn_test", "=", "loadmat", "(", "base_dir", "+", "'/svhn_test_32x32.mat'", ")", "\n", "svhn_train_im", "=", "svhn_train", "[", "'X'", "]", "\n", "svhn_train_im", "=", "svhn_train_im", ".", "transpose", "(", "3", ",", "2", ",", "0", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "print", "(", "'svhn train y shape before dense_to_one_hot->'", ",", "svhn_train", "[", "'y'", "]", ".", "shape", ")", "\n", "svhn_label", "=", "dense_to_one_hot", "(", "svhn_train", "[", "'y'", "]", ")", "\n", "print", "(", "'svhn train y shape after dense_to_one_hot->'", ",", "svhn_label", ".", "shape", ")", "\n", "svhn_test_im", "=", "svhn_test", "[", "'X'", "]", "\n", "svhn_test_im", "=", "svhn_test_im", ".", "transpose", "(", "3", ",", "2", ",", "0", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "svhn_label_test", "=", "dense_to_one_hot", "(", "svhn_test", "[", "'y'", "]", ")", "\n", "svhn_train_im", "=", "svhn_train_im", "[", ":", "25000", "]", "\n", "svhn_label", "=", "svhn_label", "[", ":", "25000", "]", "\n", "svhn_test_im", "=", "svhn_test_im", "[", ":", "9000", "]", "\n", "svhn_label_test", "=", "svhn_label_test", "[", ":", "9000", "]", "\n", "print", "(", "'svhn train X shape->'", ",", "svhn_train_im", ".", "shape", ")", "\n", "print", "(", "'svhn train y shape->'", ",", "svhn_label", ".", "shape", ")", "\n", "print", "(", "'svhn test X shape->'", ",", "svhn_test_im", ".", "shape", ")", "\n", "print", "(", "'svhn test y shape->'", ",", "svhn_label_test", ".", "shape", ")", "\n", "\n", "return", "svhn_train_im", ",", "svhn_label", ",", "svhn_test_im", ",", "svhn_label_test", "\n", "", ""]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.usps.Feature.__init__": [[8, 14], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Feature", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "48", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "48", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.usps.Feature.forward": [[15, 22], ["torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "x.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "x.view.view.size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "x.view.view.size", "x.view.view.size", "x.view.view.size", "usps.Feature.bn1", "usps.Feature.bn2", "usps.Feature.conv1", "usps.Feature.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "torch", ".", "mean", "(", "x", ",", "1", ")", ".", "view", "(", "x", ".", "size", "(", ")", "[", "0", "]", ",", "1", ",", "x", ".", "size", "(", ")", "[", "2", "]", ",", "x", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ",", "stride", "=", "2", ",", "kernel_size", "=", "2", ",", "dilation", "=", "(", "1", ",", "1", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ",", "stride", "=", "2", ",", "kernel_size", "=", "2", ",", "dilation", "=", "(", "1", ",", "1", ")", ")", "\n", "#print(x.size())", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "48", "*", "4", "*", "4", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.usps.Predictor.__init__": [[25, 34], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "48", "*", "4", "*", "4", ",", "100", ")", "\n", "self", ".", "bn1_fc", "=", "nn", ".", "BatchNorm1d", "(", "100", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "100", ",", "100", ")", "\n", "self", ".", "bn2_fc", "=", "nn", ".", "BatchNorm1d", "(", "100", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "100", ",", "10", ")", "\n", "self", ".", "bn_fc3", "=", "nn", ".", "BatchNorm1d", "(", "10", ")", "\n", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.usps.Predictor.set_lambda": [[35, 37], ["None"], "methods", ["None"], ["", "def", "set_lambda", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "self", ".", "lambd", "=", "lambd", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.usps.Predictor.forward": [[37, 47], ["torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "usps.Predictor.fc3", "grad_reverse.grad_reverse.grad_reverse", "usps.Predictor.bn1_fc", "usps.Predictor.bn2_fc", "usps.Predictor.fc1", "usps.Predictor.fc2"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.grad_reverse.grad_reverse"], ["", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "if", "reverse", ":", "\n", "            ", "x", "=", "grad_reverse", "(", "x", ",", "self", ".", "lambd", ")", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ",", "p", "=", "self", ".", "prob", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1_fc", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ",", "p", "=", "self", ".", "prob", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2_fc", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ",", "p", "=", "self", ".", "prob", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.lenet.Feature.__init__": [[7, 19], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Feature", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "8192", ",", "3072", ")", "\n", "self", ".", "bn1_fc", "=", "nn", ".", "BatchNorm1d", "(", "3072", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "3072", ",", "2048", ")", "\n", "self", ".", "bn2_fc", "=", "nn", ".", "BatchNorm1d", "(", "2048", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.lenet.Feature.forward": [[20, 31], ["torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "grad_reverse.grad_reverse.grad_reverse.view", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lenet.Feature.bn3", "grad_reverse.grad_reverse.grad_reverse.size", "lenet.Feature.bn1_fc", "grad_reverse.grad_reverse.grad_reverse", "lenet.Feature.bn2_fc", "lenet.Feature.bn1", "lenet.Feature.bn2", "lenet.Feature.conv3", "lenet.Feature.fc1", "lenet.Feature.fc2", "lenet.Feature.conv1", "lenet.Feature.conv2"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.grad_reverse.grad_reverse"], ["", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "x", "=", "F", ".", "max_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ",", "stride", "=", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ",", "stride", "=", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "8192", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1_fc", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "if", "reverse", ":", "\n", "            ", "x", "=", "grad_reverse", "(", "x", ",", "self", ".", "lambd", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2_fc", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.lenet.Predictor.__init__": [[34, 39], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "2048", ",", "345", ")", "\n", "self", ".", "bn_fc3", "=", "nn", ".", "BatchNorm1d", "(", "345", ")", "\n", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.lenet.Predictor.set_lambda": [[40, 42], ["None"], "methods", ["None"], ["", "def", "set_lambda", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.lenet.Predictor.forward": [[43, 46], ["lenet.Predictor.fc3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.syn2gtrsb.Feature.__init__": [[7, 15], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Feature", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "96", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "96", ",", "144", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "144", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "144", ",", "256", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.syn2gtrsb.Feature.forward": [[16, 22], ["torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "x.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "x.view.view.size", "syn2gtrsb.Feature.bn1", "syn2gtrsb.Feature.bn2", "syn2gtrsb.Feature.bn3", "syn2gtrsb.Feature.conv1", "syn2gtrsb.Feature.conv2", "syn2gtrsb.Feature.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "max_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ",", "stride", "=", "2", ",", "kernel_size", "=", "2", ",", "padding", "=", "0", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ",", "stride", "=", "2", ",", "kernel_size", "=", "2", ",", "padding", "=", "0", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", ",", "stride", "=", "2", ",", "kernel_size", "=", "2", ",", "padding", "=", "0", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "6400", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.syn2gtrsb.Predictor.__init__": [[25, 31], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6400", ",", "512", ")", "\n", "self", ".", "bn2_fc", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "512", ",", "43", ")", "\n", "self", ".", "bn_fc3", "=", "nn", ".", "BatchNorm1d", "(", "43", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.syn2gtrsb.Predictor.set_lambda": [[32, 34], ["None"], "methods", ["None"], ["", "def", "set_lambda", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.syn2gtrsb.Predictor.forward": [[35, 42], ["torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "syn2gtrsb.Predictor.fc3", "grad_reverse.grad_reverse.grad_reverse", "syn2gtrsb.Predictor.bn2_fc", "syn2gtrsb.Predictor.fc2"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.grad_reverse.grad_reverse"], ["", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "if", "reverse", ":", "\n", "            ", "x", "=", "grad_reverse", "(", "x", ",", "self", ".", "lambd", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2_fc", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.grad_reverse.GradReverse.__init__": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.grad_reverse.GradReverse.forward": [[8, 10], ["x.view_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.grad_reverse.GradReverse.backward": [[11, 13], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "return", "(", "grad_output", "*", "-", "self", ".", "lambd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.grad_reverse.grad_reverse": [[15, 17], ["grad_reverse.GradReverse"], "function", ["None"], ["", "", "def", "grad_reverse", "(", "x", ",", "lambd", "=", "1.0", ")", ":", "\n", "    ", "return", "GradReverse", "(", "lambd", ")", "(", "x", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.build_gen_bac.Generator": [[6, 11], ["svhn2mnist.Feature"], "function", ["None"], ["def", "Generator", "(", ")", ":", "\n", "# #if source == 'usps' or target == 'usps':", "\n", "#     return usps.Feature()", "\n", "# elif source == 'svhn':", "\n", "    ", "return", "svhn2mnist", ".", "Feature", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.build_gen_bac.Classifier": [[13, 18], ["svhn2mnist.Predictor"], "function", ["None"], ["", "def", "Classifier", "(", ")", ":", "\n", "# if source == 'usps' or target == 'usps':", "\n", "#     return usps.Predictor()", "\n", "# if source == 'svhn':", "\n", "    ", "return", "svhn2mnist", ".", "Predictor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.build_gen.Generator": [[10, 22], ["lenet.Feature", "resnet.resnet18", "resnet.resnet50", "resnet.resnet101", "alexnet.alexnet"], "function", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.resnet18", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.resnet50", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.resnet101", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet.alexnet"], ["def", "Generator", "(", "net", ")", ":", "\n", "\n", "    ", "if", "net", "==", "'lenet'", ":", "\n", "        ", "return", "lenet", ".", "Feature", "(", ")", "\n", "", "if", "net", "==", "'resnet18'", ":", "\n", "        ", "return", "resnet", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "", "if", "net", "==", "'resnet50'", ":", "\n", "        ", "return", "resnet", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "", "if", "net", "==", "'resnet101'", ":", "\n", "        ", "return", "resnet", ".", "resnet101", "(", "pretrained", "=", "True", ")", "\n", "", "if", "net", "==", "'alexnet'", ":", "\n", "        ", "return", "alexnet", ".", "alexnet", "(", "pretrained", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.build_gen.Classifier": [[25, 33], ["lenet.Predictor", "resnet.Predictor", "alexnet._netC_alexnet"], "function", ["None"], ["", "", "def", "Classifier", "(", "net", ",", "feat", ",", "nclass", ")", ":", "\n", "\n", "    ", "if", "net", "==", "'lenet'", ":", "\n", "        ", "return", "lenet", ".", "Predictor", "(", ")", "\n", "", "if", "net", "==", "'resnet18'", "or", "net", "==", "'resnet50'", "or", "net", "==", "'resnet101'", ":", "\n", "        ", "return", "resnet", ".", "Predictor", "(", "feat", ",", "nclass", ")", "\n", "", "if", "net", "==", "'alexnet'", ":", "\n", "        ", "return", "alexnet", ".", "_netC_alexnet", "(", "nclasses", "=", "nclass", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.BasicBlock.__init__": [[39, 56], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.conv3x3", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.BasicBlock.forward": [[57, 74], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.Bottleneck.__init__": [[80, 96], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.conv1x1", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.conv3x3", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.Bottleneck.forward": [[97, 118], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.ResNet.__init__": [[122, 172], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "resnet.ResNet.modules", "len", "ValueError", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet._make_layer", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet._make_layer", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet._make_layer", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.ResNet._make_layer": [[173, 196], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.ResNet._forward_impl": [[197, 214], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "x.view.view.view", "x.view.view.size"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# x = self.fc(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.ResNet.forward": [[215, 217], ["resnet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.ADDneck.__init__": [[381, 392], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "ADDneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.ADDneck.forward": [[393, 408], ["resnet.ADDneck.conv1", "resnet.ADDneck.bn1", "resnet.ADDneck.relu", "resnet.ADDneck.conv2", "resnet.ADDneck.bn2", "resnet.ADDneck.relu", "resnet.ADDneck.conv3", "resnet.ADDneck.bn3", "resnet.ADDneck.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.Predictor.__init__": [[411, 419], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["  ", "def", "__init__", "(", "self", ",", "feat", "=", "2048", ",", "classes", "=", "10", ")", ":", "\n", "    ", "super", "(", "Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.sonnet = ADDneck(feat, 256)", "\n", "# self.cls_fc_son = nn.Linear(256, classes)", "\n", "# self.avgpool = nn.AvgPool2d(7, stride=1)", "\n", "\n", "self", ".", "emb", "=", "nn", ".", "Linear", "(", "feat", ",", "feat", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "feat", ",", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.Predictor.forward": [[422, 433], ["resnet.Predictor.emb", "resnet.Predictor.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# fea_son = self.sonnet(x)", "\n", "# fea_son = self.avgpool(fea_son)", "\n", "# # fea_son = fea_son.view(fea_son.size(0), -1)", "\n", "# logit = self.cls_fc_son(fea_son)", "\n", "# return logit", "\n", "\n", "# x = self.emb(x)", "\n", "    ", "emb", "=", "self", ".", "emb", "(", "x", ")", "\n", "logit", "=", "self", ".", "fc", "(", "emb", ")", "\n", "return", "logit", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.conv3x3": [[24, 28], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.conv1x1": [[30, 33], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet._resnet": [[219, 225], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "# if pretrained:", "\n", "#     state_dict = model_zoo.load_url(model_urls[arch], progress=progress)", "\n", "#     model.load_state_dict(state_dict)", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.resnet18": [[270, 282], ["resnet._resnet", "print", "print", "torch.load", "torch.load", "torch.load", "_resnet.load_state_dict", "torch.load.items", "_resnet.state_dict"], "function", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet._resnet", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "  ", "model", "=", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "print", "(", "\"backbone:ResNet18\"", ")", "\n", "# if pretrained:", "\n", "#   model.load_state_dict(model_zoo.load_url(model_urls['resnet50']))", "\n", "if", "pretrained", "==", "True", ":", "\n", "    ", "model_path", "=", "'data/pretrained_model/resnet18.pth'", "\n", "print", "(", "\"Loading pretrained weights from %s\"", "%", "(", "model_path", ")", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "model", ".", "load_state_dict", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "if", "k", "in", "model", ".", "state_dict", "(", ")", "}", ")", "\n", "# model.fc = torch.nn.Linear(2048, 1024)", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.resnet34": [[238, 247], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.resnet50": [[283, 295], ["resnet._resnet", "print", "print", "torch.load", "torch.load", "torch.load", "_resnet.load_state_dict", "torch.load.items", "_resnet.state_dict"], "function", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet._resnet", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "  ", "model", "=", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "print", "(", "\"backbone:ResNet50\"", ")", "\n", "# if pretrained:", "\n", "#   model.load_state_dict(model_zoo.load_url(model_urls['resnet50']))", "\n", "if", "pretrained", "==", "True", ":", "\n", "    ", "model_path", "=", "'data/pretrained_model/resnet50_caffe.pth'", "\n", "print", "(", "\"Loading pretrained weights from %s\"", "%", "(", "model_path", ")", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "model", ".", "load_state_dict", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "if", "k", "in", "model", ".", "state_dict", "(", ")", "}", ")", "\n", "# model.fc = torch.nn.Linear(2048, 1024)", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.resnet101": [[297, 308], ["resnet._resnet", "print", "print", "torch.load", "torch.load", "torch.load", "_resnet.load_state_dict", "torch.load.items", "_resnet.state_dict"], "function", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet._resnet", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "  ", "model", "=", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "print", "(", "\"backbone:ResNet101\"", ")", "\n", "# if pretrained:", "\n", "#   model.load_state_dict(model_zoo.load_url(model_urls['resnet101']))", "\n", "if", "pretrained", "==", "True", ":", "\n", "    ", "model_path", "=", "'data/pretrained_model/resnet101_caffe.pth'", "\n", "print", "(", "\"Loading pretrained weights from %s\"", "%", "(", "model_path", ")", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "model", ".", "load_state_dict", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "if", "k", "in", "model", ".", "state_dict", "(", ")", "}", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.resnet152": [[310, 319], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.resnext50_32x4d": [[321, 332], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.resnext101_32x8d": [[334, 345], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.wide_resnet50_2": [[347, 361], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet._resnet"], ["", "def", "wide_resnet50_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet50_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet.wide_resnet101_2": [[363, 377], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.resnet._resnet"], ["", "def", "wide_resnet101_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet101_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.svhn2mnist.Feature.__init__": [[7, 19], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Feature", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "8192", ",", "3072", ")", "\n", "self", ".", "bn1_fc", "=", "nn", ".", "BatchNorm1d", "(", "3072", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "3072", ",", "2048", ")", "\n", "self", ".", "bn2_fc", "=", "nn", ".", "BatchNorm1d", "(", "2048", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.svhn2mnist.Feature.forward": [[20, 31], ["torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "grad_reverse.grad_reverse.grad_reverse.view", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "svhn2mnist.Feature.bn3", "grad_reverse.grad_reverse.grad_reverse.size", "svhn2mnist.Feature.bn1_fc", "grad_reverse.grad_reverse.grad_reverse", "svhn2mnist.Feature.bn2_fc", "svhn2mnist.Feature.bn1", "svhn2mnist.Feature.bn2", "svhn2mnist.Feature.conv3", "svhn2mnist.Feature.fc1", "svhn2mnist.Feature.fc2", "svhn2mnist.Feature.conv1", "svhn2mnist.Feature.conv2"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.grad_reverse.grad_reverse"], ["", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "x", "=", "F", ".", "max_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ",", "stride", "=", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ",", "stride", "=", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "8192", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1_fc", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "if", "reverse", ":", "\n", "            ", "x", "=", "grad_reverse", "(", "x", ",", "self", ".", "lambd", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2_fc", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.svhn2mnist.Predictor.__init__": [[34, 43], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.fc1 = nn.Linear(8192, 3072)", "\n", "# self.bn1_fc = nn.BatchNorm1d(3072)", "\n", "# self.fc2 = nn.Linear(3072, 2048)", "\n", "# self.bn2_fc = nn.BatchNorm1d(2048)", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "2048", ",", "10", ")", "\n", "self", ".", "bn_fc3", "=", "nn", ".", "BatchNorm1d", "(", "10", ")", "\n", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.svhn2mnist.Predictor.set_lambda": [[44, 46], ["None"], "methods", ["None"], ["", "def", "set_lambda", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.svhn2mnist.Predictor.forward": [[47, 53], ["svhn2mnist.Predictor.fc3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ")", ":", "\n", "# if reverse:", "\n", "#     x = grad_reverse(x, self.lambd)", "\n", "# x = F.relu(self.bn2_fc(self.fc2(x)))", "\n", "        ", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet.LRN.__init__": [[8, 21], ["torch.Module.__init__", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool2d", "torch.AvgPool2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "local_size", "=", "1", ",", "alpha", "=", "1.0", ",", "beta", "=", "0.75", ",", "ACROSS_CHANNELS", "=", "True", ")", ":", "\n", "        ", "super", "(", "LRN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ACROSS_CHANNELS", "=", "ACROSS_CHANNELS", "\n", "if", "ACROSS_CHANNELS", ":", "\n", "            ", "self", ".", "average", "=", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "(", "local_size", ",", "1", ",", "1", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "int", "(", "(", "local_size", "-", "1.0", ")", "/", "2", ")", ",", "0", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "average", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "local_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "int", "(", "(", "local_size", "-", "1.0", ")", "/", "2", ")", ")", "\n", "", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netG.__init__": [[26, 54], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "nclasses", ")", ":", "\n", "        ", "super", "(", "_netG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ndim", "=", "opt", ".", "ndf", "*", "4", "\n", "self", ".", "ngf", "=", "opt", ".", "ngf", "\n", "self", ".", "nz", "=", "opt", ".", "nz", "\n", "self", ".", "gpu", "=", "opt", ".", "gpu", "\n", "self", ".", "nclasses", "=", "nclasses", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "self", ".", "ndim", "+", "self", ".", "nz", "+", "nclasses", "+", "1", ",", "self", ".", "ngf", "*", "8", ",", "2", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ngf", "*", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "self", ".", "ngf", "*", "8", ",", "self", ".", "ngf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ngf", "*", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "self", ".", "ngf", "*", "4", ",", "self", ".", "ngf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ngf", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "self", ".", "ngf", "*", "2", ",", "self", ".", "ngf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "self", ".", "ngf", ",", "3", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netG.forward": [[56, 66], ["input.view.view.view", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.autograd.Variable", "torch.autograd.Variable", "alexnet._netG.main", "input.view.view.size", "noise.cuda.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.test.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "batchSize", "=", "input", ".", "size", "(", ")", "[", "0", "]", "\n", "input", "=", "input", ".", "view", "(", "-", "1", ",", "self", ".", "ndim", "+", "self", ".", "nclasses", "+", "1", ",", "1", ",", "1", ")", "\n", "noise", "=", "torch", ".", "FloatTensor", "(", "batchSize", ",", "self", ".", "nz", ",", "1", ",", "1", ")", ".", "normal_", "(", "0", ",", "1", ")", "\n", "if", "self", ".", "gpu", ">=", "0", ":", "\n", "            ", "noise", "=", "noise", ".", "cuda", "(", ")", "\n", "", "noisev", "=", "Variable", "(", "noise", ")", "\n", "output", "=", "self", ".", "main", "(", "torch", ".", "cat", "(", "(", "input", ",", "noisev", ")", ",", "1", ")", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netD.__init__": [[71, 102], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "nclasses", ")", ":", "\n", "        ", "super", "(", "_netD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ndf", "=", "opt", ".", "ndf", "\n", "self", ".", "feature", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "ndf", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ndf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "self", ".", "ndf", ",", "self", ".", "ndf", "*", "2", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "self", ".", "ndf", "*", "2", ",", "self", ".", "ndf", "*", "4", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "self", ".", "ndf", "*", "4", ",", "self", ".", "ndf", "*", "2", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "4", ",", "4", ")", "\n", ")", "\n", "\n", "self", ".", "classifier_c", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "ndf", "*", "2", ",", "nclasses", ")", ")", "\n", "self", ".", "classifier_s", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "ndf", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "classifier_t", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "ndf", "*", "2", ",", "self", ".", "ndf", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netD.forward": [[103, 110], ["alexnet._netD.feature", "alexnet._netD.classifier_c", "alexnet._netD.classifier_t", "alexnet._netD.classifier_s", "output_s.view.view.view", "alexnet._netD.view", "alexnet._netD.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "feature", "(", "input", ")", "\n", "output_c", "=", "self", ".", "classifier_c", "(", "output", ".", "view", "(", "-", "1", ",", "self", ".", "ndf", "*", "2", ")", ")", "\n", "output_t", "=", "self", ".", "classifier_t", "(", "output", ".", "view", "(", "-", "1", ",", "self", ".", "ndf", "*", "2", ")", ")", "\n", "output_s", "=", "self", ".", "classifier_s", "(", "output_t", ")", "\n", "output_s", "=", "output_s", ".", "view", "(", "-", "1", ")", "\n", "return", "output_s", ",", "output_c", ",", "output_t", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF.__init__": [[115, 138], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "_netF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "self", ".", "ndf", "=", "opt", ".", "ndf", "\n", "self", ".", "nz", "=", "opt", ".", "nz", "\n", "self", ".", "gpu", "=", "opt", ".", "gpu", "\n", "\n", "self", ".", "feature", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "ndf", ",", "5", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "self", ".", "ndf", ",", "self", ".", "ndf", ",", "5", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "self", ".", "ndf", ",", "self", ".", "ndf", "*", "2", ",", "5", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "mean", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "ndf", "*", "2", ",", "self", ".", "ndf", "*", "2", ")", ")", "\n", "self", ".", "std", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "ndf", "*", "2", ",", "self", ".", "ndf", "*", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF.forward": [[139, 150], ["alexnet._netF.feature", "alexnet._netF.mean", "alexnet._netF.std", "input.size", "alexnet._netF.view", "alexnet._netF.view", "mean_vector.cuda.cuda.cuda", "std_vector.cuda.cuda.cuda", "alexnet._netF.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "batchSize", "=", "input", ".", "size", "(", ")", "[", "0", "]", "\n", "output", "=", "self", ".", "feature", "(", "input", ")", "\n", "\n", "mean_vector", "=", "self", ".", "mean", "(", "output", ".", "view", "(", "-", "1", ",", "2", "*", "self", ".", "ndf", ")", ")", "\n", "std_vector", "=", "self", ".", "std", "(", "output", ".", "view", "(", "-", "1", ",", "2", "*", "self", ".", "ndf", ")", ")", "\n", "if", "self", ".", "gpu", ">=", "0", ":", "\n", "            ", "mean_vector", "=", "mean_vector", ".", "cuda", "(", ")", "\n", "std_vector", "=", "std_vector", ".", "cuda", "(", ")", "\n", "\n", "", "return", "output", ".", "view", "(", "-", "1", ",", "2", "*", "self", ".", "ndf", ")", ",", "mean_vector", ",", "std_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netC.__init__": [[155, 164], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "nclasses", ")", ":", "\n", "        ", "super", "(", "_netC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ndf", "=", "opt", ".", "ndf", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "4", "*", "self", ".", "ndf", ",", "2", "*", "self", ".", "ndf", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "2", "*", "self", ".", "ndf", ",", "nclasses", ")", ",", "\n", ")", "\n", "self", ".", "soft", "=", "nn", ".", "Sequential", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netC.forward": [[165, 169], ["alexnet._netC.main", "alexnet._netC.soft"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.test.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output_logit", "=", "self", ".", "main", "(", "input", ")", "\n", "output", "=", "self", ".", "soft", "(", "output_logit", ")", "\n", "return", "output_logit", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_alexnet.__init__": [[174, 217], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "alexnet._netF_alexnet.conv.add_module", "alexnet._netF_alexnet.conv.add_module", "alexnet._netF_alexnet.conv.add_module", "alexnet._netF_alexnet.conv.add_module", "alexnet._netF_alexnet.conv.add_module", "alexnet._netF_alexnet.conv.add_module", "alexnet._netF_alexnet.conv.add_module", "alexnet._netF_alexnet.conv.add_module", "alexnet._netF_alexnet.conv.add_module", "alexnet._netF_alexnet.conv.add_module", "alexnet._netF_alexnet.conv.add_module", "alexnet._netF_alexnet.conv.add_module", "alexnet._netF_alexnet.conv.add_module", "torch.Sequential", "torch.Sequential", "alexnet._netF_alexnet.fc6.add_module", "alexnet._netF_alexnet.fc6.add_module", "alexnet._netF_alexnet.fc6.add_module", "torch.Sequential", "torch.Sequential", "alexnet._netF_alexnet.fc7.add_module", "alexnet._netF_alexnet.fc7.add_module", "alexnet._netF_alexnet.fc7.add_module", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups_", "=", "1", ")", ":", "\n", "        ", "super", "(", "_netF_alexnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# self.ndf = opt.ndf", "\n", "# self.gpu = opt.gpu", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "conv", ".", "add_module", "(", "'conv1'", ",", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "11", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ")", "\n", "self", ".", "conv", ".", "add_module", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "#self.conv.add_module('bn1_s1',nn.BatchNorm2d(96))", "\n", "# self.conv.add_module('lrn1_s1', LRN(local_size=5, alpha=0.0001, beta=0.75))", "\n", "self", ".", "conv", ".", "add_module", "(", "'pool1'", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ")", "\n", "\n", "\n", "self", ".", "conv", ".", "add_module", "(", "'conv2'", ",", "nn", ".", "Conv2d", "(", "64", ",", "192", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ",", "groups", "=", "groups_", ")", ")", "\n", "self", ".", "conv", ".", "add_module", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "#self.conv.add_module('bn2_s1',nn.BatchNorm2d(256))", "\n", "# self.conv.add_module('lrn2_s1', LRN(local_size=5, alpha=0.0001, beta=0.75))", "\n", "self", ".", "conv", ".", "add_module", "(", "'pool2'", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ")", "\n", "\n", "\n", "self", ".", "conv", ".", "add_module", "(", "'conv3'", ",", "nn", ".", "Conv2d", "(", "192", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "conv", ".", "add_module", "(", "'relu3'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "# self.conv.add_module('bn3_s1',nn.BatchNorm2d(384))", "\n", "\n", "self", ".", "conv", ".", "add_module", "(", "'conv4'", ",", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "groups", "=", "groups_", ")", ")", "\n", "# self.conv.add_module('bn4_s1',nn.BatchNorm2d(384))", "\n", "self", ".", "conv", ".", "add_module", "(", "'relu4'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv", ".", "add_module", "(", "'conv5'", ",", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "groups", "=", "groups_", ")", ")", "\n", "# self.conv.add_module('bn5_s1',nn.BatchNorm2d(256))", "\n", "self", ".", "conv", ".", "add_module", "(", "'relu5'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv", ".", "add_module", "(", "'pool5'", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ")", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "fc6", ".", "add_module", "(", "'fc6'", ",", "nn", ".", "Linear", "(", "256", "*", "6", "*", "6", ",", "4096", ")", ")", "\n", "self", ".", "fc6", ".", "add_module", "(", "'relu6'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "fc6", ".", "add_module", "(", "'drop6'", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "\n", "self", ".", "fc7", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "fc7", ".", "add_module", "(", "'fc7'", ",", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ")", "\n", "self", ".", "fc7", ".", "add_module", "(", "'relu7'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "fc7", ".", "add_module", "(", "'drop7'", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_alexnet.load": [[224, 252], ["alexnet._netF_alexnet.state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "range", "alexnet._netF_alexnet.update", "alexnet._netF_alexnet.load_state_dict", "len", "print", "param_list.append", "key_list.append"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load"], ["", "def", "load", "(", "self", ",", "checkpoint", ")", ":", "\n", "        ", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "checkpoint", ")", "\n", "\n", "tmp_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "(", "k", "==", "\"state_dict\"", ")", ":", "\n", "                ", "tmp_dict", "=", "v", "\n", "\n", "# get pretrained parameters", "\n", "", "", "param_list", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "(", "'features'", "in", "k", "or", "'1'", "in", "k", "or", "'4'", "in", "k", ")", ":", "\n", "                ", "param_list", ".", "append", "(", "v", ")", "\n", "\n", "", "", "key_list", "=", "[", "]", "\n", "for", "k", "in", "model_dict", ":", "\n", "            ", "if", "(", "'conv'", "in", "k", "or", "'fc6'", "in", "k", "or", "'fc7'", "in", "k", ")", ":", "\n", "                ", "key_list", ".", "append", "(", "k", ")", "\n", "\n", "# get parameter dict", "\n", "", "", "param_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "key_list", ")", ")", ":", "\n", "            ", "print", "(", "key_list", "[", "i", "]", ")", "\n", "param_dict", "[", "key_list", "[", "i", "]", "]", "=", "param_list", "[", "i", "]", "\n", "\n", "", "model_dict", ".", "update", "(", "param_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_alexnet.forward": [[253, 270], ["alexnet._netF_alexnet.conv", "alexnet._netF_alexnet.view", "alexnet._netF_alexnet.fc6", "alexnet._netF_alexnet.fc7", "alexnet._netF_alexnet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "output", "=", "self", ".", "conv", "(", "inputs", ")", "\n", "embedding", "=", "output", ".", "view", "(", "output", ".", "size", "(", "0", ")", ",", "6", "*", "6", "*", "256", ")", "\n", "\n", "output", "=", "self", ".", "fc6", "(", "embedding", ")", "\n", "output", "=", "self", ".", "fc7", "(", "output", ")", "\n", "\n", "# mean_vector = self.mean(output)", "\n", "# std_vector = self.std(output)", "\n", "# if self.gpu>=0:", "\n", "#     mean_vector = mean_vector.cuda()", "\n", "#     std_vector = std_vector.cuda()", "\n", "\n", "# return output, mean_vector, std_vector", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netC_alexnet.__init__": [[275, 282], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "alexnet._netC_alexnet.classifier.add_module", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nclasses", ")", ":", "\n", "        ", "super", "(", "_netC_alexnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "classifier", ".", "add_module", "(", "'fc8'", ",", "nn", ".", "Linear", "(", "4096", ",", "nclasses", ")", ")", "\n", "\n", "self", ".", "soft", "=", "nn", ".", "Sequential", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netC_alexnet.forward": [[283, 287], ["alexnet._netC_alexnet.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "embedding", ")", ":", "\n", "        ", "output_logit", "=", "self", ".", "classifier", "(", "embedding", ")", "\n", "# output = self.soft(output_logit)", "\n", "return", "output_logit", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netG_alexnet.__init__": [[292, 325], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "nclasses", ")", ":", "\n", "        ", "super", "(", "_netG_alexnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# self.ndim = opt.ndf*4", "\n", "self", ".", "ndim", "=", "4096", "\n", "self", ".", "ngf", "=", "opt", ".", "ngf", "\n", "self", ".", "nz", "=", "opt", ".", "nz", "\n", "self", ".", "gpu", "=", "opt", ".", "gpu", "\n", "self", ".", "nclasses", "=", "nclasses", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "self", ".", "ndim", "+", "self", ".", "nz", "+", "nclasses", "+", "1", ",", "self", ".", "ngf", "*", "8", ",", "2", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ngf", "*", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "self", ".", "ngf", "*", "8", ",", "self", ".", "ngf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ngf", "*", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "self", ".", "ngf", "*", "4", ",", "self", ".", "ngf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ngf", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "self", ".", "ngf", "*", "2", ",", "self", ".", "ngf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ngf", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "self", ".", "ngf", "*", "2", ",", "self", ".", "ngf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "self", ".", "ngf", ",", "3", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netG_alexnet.forward": [[327, 337], ["input.view.view.view", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.autograd.Variable", "torch.autograd.Variable", "alexnet._netG_alexnet.main", "input.view.view.size", "noise.cuda.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.None.test.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "batchSize", "=", "input", ".", "size", "(", ")", "[", "0", "]", "\n", "input", "=", "input", ".", "view", "(", "-", "1", ",", "self", ".", "ndim", "+", "self", ".", "nclasses", "+", "1", ",", "1", ",", "1", ")", "\n", "noise", "=", "torch", ".", "FloatTensor", "(", "batchSize", ",", "self", ".", "nz", ",", "1", ",", "1", ")", ".", "normal_", "(", "0", ",", "1", ")", "\n", "if", "self", ".", "gpu", ">=", "0", ":", "\n", "            ", "noise", "=", "noise", ".", "cuda", "(", ")", "\n", "", "noisev", "=", "Variable", "(", "noise", ")", "\n", "output", "=", "self", ".", "main", "(", "torch", ".", "cat", "(", "(", "input", ",", "noisev", ")", ",", "1", ")", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netD_alexnet.__init__": [[342, 383], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "nclasses", ")", ":", "\n", "        ", "super", "(", "_netD_alexnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ndf", "=", "opt", ".", "ndf", "\n", "\n", "self", ".", "feature", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "ndf", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ndf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "self", ".", "ndf", ",", "self", ".", "ndf", "*", "2", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "self", ".", "ndf", "*", "2", ",", "self", ".", "ndf", "*", "2", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "self", ".", "ndf", "*", "2", ",", "self", ".", "ndf", "*", "4", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "self", ".", "ndf", "*", "4", ",", "self", ".", "ndf", "*", "2", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "4", ",", "4", ")", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "ndf", "*", "2", ",", "500", ")", ",", "\n", "nn", ".", "Linear", "(", "500", ",", "500", ")", "\n", ")", "\n", "\n", "self", ".", "classifier_c", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "500", ",", "nclasses", ")", ")", "\n", "self", ".", "classifier_s", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "500", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netD_alexnet.forward": [[384, 391], ["alexnet._netD_alexnet.feature", "alexnet._netD_alexnet.fc", "alexnet._netD_alexnet.classifier_s", "output_s.view.view.view", "alexnet._netD_alexnet.classifier_c", "alexnet._netD_alexnet.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "conv_output", "=", "self", ".", "feature", "(", "input", ")", "\n", "fc_output", "=", "self", ".", "fc", "(", "conv_output", ".", "view", "(", "-", "1", ",", "self", ".", "ndf", "*", "2", ")", ")", "\n", "output_s", "=", "self", ".", "classifier_s", "(", "fc_output", ")", "\n", "output_s", "=", "output_s", ".", "view", "(", "-", "1", ")", "\n", "output_c", "=", "self", ".", "classifier_c", "(", "fc_output", ")", "\n", "return", "output_s", ",", "output_c", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netD_alexnet_v2.__init__": [[396, 430], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "nclasses", ")", ":", "\n", "        ", "super", "(", "_netD_alexnet_v2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ndf", "=", "opt", ".", "ndf", "\n", "\n", "self", ".", "feature", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "ndf", "*", "2", ",", "5", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "self", ".", "ndf", "*", "2", ",", "self", ".", "ndf", "*", "2", ",", "5", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "self", ".", "ndf", "*", "2", ",", "self", ".", "ndf", "*", "2", ",", "5", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "self", ".", "ndf", "*", "2", ",", "self", ".", "ndf", "*", "2", ",", "5", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "ndf", "*", "2", ",", "500", ")", ",", "\n", "nn", ".", "Linear", "(", "500", ",", "500", ")", "\n", ")", "\n", "\n", "self", ".", "classifier_c", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "500", ",", "nclasses", ")", ")", "\n", "self", ".", "classifier_s", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "500", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netD_alexnet_v2.forward": [[431, 438], ["alexnet._netD_alexnet_v2.feature", "alexnet._netD_alexnet_v2.fc", "alexnet._netD_alexnet_v2.classifier_s", "output_s.view.view.view", "alexnet._netD_alexnet_v2.classifier_c", "alexnet._netD_alexnet_v2.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "conv_output", "=", "self", ".", "feature", "(", "input", ")", "\n", "fc_output", "=", "self", ".", "fc", "(", "conv_output", ".", "view", "(", "-", "1", ",", "self", ".", "ndf", "*", "2", ")", ")", "\n", "output_s", "=", "self", ".", "classifier_s", "(", "fc_output", ")", "\n", "output_s", "=", "output_s", ".", "view", "(", "-", "1", ")", "\n", "output_c", "=", "self", ".", "classifier_c", "(", "fc_output", ")", "\n", "return", "output_s", ",", "output_c", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netG_wgan.__init__": [[444, 467], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "nclasses", ")", ":", "\n", "        ", "super", "(", "_netG_wgan", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ndim", "=", "opt", ".", "ndf", "*", "4", "\n", "self", ".", "imageSize", "=", "opt", ".", "imageSize", "\n", "self", ".", "nz", "=", "opt", ".", "nz", "\n", "self", ".", "gpu", "=", "opt", ".", "gpu", "\n", "self", ".", "nclasses", "=", "nclasses", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "ndim", "+", "self", ".", "nz", "+", "self", ".", "nclasses", "+", "1", ",", "1024", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1024", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "128", "*", "(", "self", ".", "imageSize", "//", "4", ")", "*", "(", "self", ".", "imageSize", "//", "4", ")", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", "*", "(", "self", ".", "imageSize", "//", "4", ")", "*", "(", "self", ".", "imageSize", "//", "4", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "deconv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "64", ",", "3", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netG_wgan.forward": [[469, 483], ["inputs.view.view.view", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "alexnet._netG_wgan.fc", "alexnet._netG_wgan.view", "alexnet._netG_wgan.deconv", "inputs.view.view.size", "noise.cuda.cuda.cuda", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "batchSize", "=", "inputs", ".", "size", "(", ")", "[", "0", "]", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ",", "self", ".", "ndim", "+", "self", ".", "nclasses", "+", "1", ")", "\n", "noise", "=", "torch", ".", "FloatTensor", "(", "batchSize", ",", "self", ".", "nz", ")", ".", "normal_", "(", "0", ",", "1", ")", "\n", "if", "self", ".", "gpu", ">=", "0", ":", "\n", "            ", "noise", "=", "noise", ".", "cuda", "(", ")", "\n", "", "noisev", "=", "Variable", "(", "noise", ")", "\n", "inputs_cat", "=", "torch", ".", "cat", "(", "(", "inputs", ",", "noisev", ")", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "fc", "(", "inputs_cat", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "128", ",", "(", "self", ".", "imageSize", "//", "4", ")", ",", "(", "self", ".", "imageSize", "//", "4", ")", ")", "\n", "x", "=", "self", ".", "deconv", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netD_wgan.__init__": [[489, 511], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "nclasses", ")", ":", "\n", "        ", "super", "(", "_netD_wgan", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_dim", "=", "3", "\n", "self", ".", "imageSize", "=", "opt", ".", "imageSize", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "input_dim", ",", "64", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "128", "*", "(", "self", ".", "imageSize", "//", "4", ")", "*", "(", "self", ".", "imageSize", "//", "4", ")", ",", "1024", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1024", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", ")", "\n", "\n", "self", ".", "classifier_c", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1024", ",", "nclasses", ")", ")", "\n", "self", ".", "classifier_s", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1024", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netD_wgan.forward": [[512, 521], ["alexnet._netD_wgan.conv", "alexnet._netD_wgan.view", "alexnet._netD_wgan.fc", "alexnet._netD_wgan.classifier_c", "alexnet._netD_wgan.classifier_s"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "inputs", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "128", "*", "(", "self", ".", "imageSize", "//", "4", ")", "*", "(", "self", ".", "imageSize", "//", "4", ")", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "output_c", "=", "self", ".", "classifier_c", "(", "x", ")", "\n", "output_s", "=", "self", ".", "classifier_s", "(", "x", ")", "\n", "\n", "return", "output_s", ",", "output_c", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netG_wgan_alexnet.__init__": [[527, 553], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "nclasses", ")", ":", "\n", "        ", "super", "(", "_netG_wgan_alexnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ndim", "=", "4096", "\n", "self", ".", "imageSize", "=", "opt", ".", "dSize", "\n", "self", ".", "nz", "=", "opt", ".", "nz", "\n", "self", ".", "gpu", "=", "opt", ".", "gpu", "\n", "self", ".", "nclasses", "=", "nclasses", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "ndim", "+", "self", ".", "nz", "+", "self", ".", "nclasses", "+", "1", ",", "1024", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1024", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "128", "*", "(", "self", ".", "imageSize", "//", "8", ")", "*", "(", "self", ".", "imageSize", "//", "8", ")", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", "*", "(", "self", ".", "imageSize", "//", "8", ")", "*", "(", "self", ".", "imageSize", "//", "8", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "deconv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "128", ",", "128", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "64", ",", "3", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netG_wgan_alexnet.forward": [[555, 569], ["inputs.view.view.view", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "alexnet._netG_wgan_alexnet.fc", "alexnet._netG_wgan_alexnet.view", "alexnet._netG_wgan_alexnet.deconv", "inputs.view.view.size", "noise.cuda.cuda.cuda", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "batchSize", "=", "inputs", ".", "size", "(", ")", "[", "0", "]", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ",", "self", ".", "ndim", "+", "self", ".", "nclasses", "+", "1", ")", "\n", "noise", "=", "torch", ".", "FloatTensor", "(", "batchSize", ",", "self", ".", "nz", ")", ".", "normal_", "(", "0", ",", "1", ")", "\n", "if", "self", ".", "gpu", ">=", "0", ":", "\n", "            ", "noise", "=", "noise", ".", "cuda", "(", ")", "\n", "", "noisev", "=", "Variable", "(", "noise", ")", "\n", "inputs_cat", "=", "torch", ".", "cat", "(", "(", "inputs", ",", "noisev", ")", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "fc", "(", "inputs_cat", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "128", ",", "(", "self", ".", "imageSize", "//", "8", ")", ",", "(", "self", ".", "imageSize", "//", "8", ")", ")", "\n", "x", "=", "self", ".", "deconv", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netD_wgan_alexnet.__init__": [[575, 599], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "nclasses", ")", ":", "\n", "        ", "super", "(", "_netD_wgan_alexnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_dim", "=", "3", "\n", "self", ".", "imageSize", "=", "opt", ".", "dSize", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "input_dim", ",", "64", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "256", "*", "(", "self", ".", "imageSize", "//", "8", ")", "*", "(", "self", ".", "imageSize", "//", "8", ")", ",", "1024", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1024", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", ")", "\n", "\n", "self", ".", "classifier_c", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1024", ",", "nclasses", ")", ")", "\n", "self", ".", "classifier_s", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1024", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netD_wgan_alexnet.forward": [[600, 609], ["alexnet._netD_wgan_alexnet.conv", "alexnet._netD_wgan_alexnet.view", "alexnet._netD_wgan_alexnet.fc", "alexnet._netD_wgan_alexnet.classifier_c", "alexnet._netD_wgan_alexnet.classifier_s"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "inputs", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "256", "*", "(", "self", ".", "imageSize", "//", "8", ")", "*", "(", "self", ".", "imageSize", "//", "8", ")", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "output_c", "=", "self", ".", "classifier_c", "(", "x", ")", "\n", "output_s", "=", "self", ".", "classifier_s", "(", "x", ")", "\n", "\n", "return", "output_s", ",", "output_c", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_vggnet.__init__": [[614, 685], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "alexnet._netF_vggnet.mean.add_module", "torch.Sequential", "torch.Sequential", "alexnet._netF_vggnet.std.add_module", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "_netF_vggnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ndf", "=", "opt", ".", "ndf", "\n", "self", ".", "gpu", "=", "opt", ".", "gpu", "\n", "\n", "self", ".", "feature", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "7", "*", "7", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "mean", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "mean", ".", "add_module", "(", "'fc_mean'", ",", "nn", ".", "Linear", "(", "4096", ",", "self", ".", "ndf", "*", "2", ")", ")", "\n", "\n", "self", ".", "std", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "std", ".", "add_module", "(", "'fc_std'", ",", "nn", ".", "Linear", "(", "4096", ",", "self", ".", "ndf", "*", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_vggnet.load": [[686, 714], ["alexnet._netF_vggnet.state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "range", "alexnet._netF_vggnet.update", "alexnet._netF_vggnet.load_state_dict", "len", "print", "param_list.append", "key_list.append"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load"], ["", "def", "load", "(", "self", ",", "checkpoint", ")", ":", "\n", "        ", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "checkpoint", ")", "\n", "\n", "tmp_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "(", "k", "==", "\"state_dict\"", ")", ":", "\n", "                ", "tmp_dict", "=", "v", "\n", "\n", "# get pretrained parameters", "\n", "", "", "param_list", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "(", "'classifier.6'", "in", "k", ")", ":", "\n", "                ", "param_list", ".", "append", "(", "v", ")", "\n", "\n", "", "", "key_list", "=", "[", "]", "\n", "for", "k", "in", "model_dict", ":", "\n", "            ", "if", "(", "'feature'", "in", "k", "or", "'classifier'", "in", "k", ")", ":", "\n", "                ", "key_list", ".", "append", "(", "k", ")", "\n", "\n", "# get parameter dict", "\n", "", "", "param_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "key_list", ")", ")", ":", "\n", "            ", "print", "(", "key_list", "[", "i", "]", ")", "\n", "param_dict", "[", "key_list", "[", "i", "]", "]", "=", "param_list", "[", "i", "]", "\n", "\n", "", "model_dict", ".", "update", "(", "param_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_vggnet.forward": [[715, 729], ["inputs.size", "alexnet._netF_vggnet.feature", "alexnet._netF_vggnet.view", "alexnet._netF_vggnet.classifier", "alexnet._netF_vggnet.mean", "alexnet._netF_vggnet.std", "mean_vector.cuda.cuda.cuda", "std_vector.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "inputs", ".", "size", "(", ")", "\n", "output", "=", "self", ".", "feature", "(", "inputs", ")", "\n", "embedding", "=", "output", ".", "view", "(", "B", ",", "7", "*", "7", "*", "512", ")", "\n", "\n", "output", "=", "self", ".", "classifier", "(", "embedding", ")", "\n", "\n", "mean_vector", "=", "self", ".", "mean", "(", "output", ")", "\n", "std_vector", "=", "self", ".", "std", "(", "output", ")", "\n", "if", "self", ".", "gpu", ">=", "0", ":", "\n", "            ", "mean_vector", "=", "mean_vector", ".", "cuda", "(", ")", "\n", "std_vector", "=", "std_vector", ".", "cuda", "(", ")", "\n", "\n", "", "return", "output", ",", "mean_vector", ",", "std_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netC_vggnet.__init__": [[734, 740], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "nclasses", ")", ":", "\n", "        ", "super", "(", "_netC_vggnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "4096", ",", "nclasses", ")", ")", "\n", "\n", "self", ".", "soft", "=", "nn", ".", "Sequential", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netC_vggnet.forward": [[741, 745], ["alexnet._netC_vggnet.classifier", "alexnet._netC_vggnet.soft"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "embedding", ")", ":", "\n", "        ", "output_logit", "=", "self", ".", "classifier", "(", "embedding", ")", "\n", "output", "=", "self", ".", "soft", "(", "output_logit", ")", "\n", "return", "output_logit", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet.Bottleneck.__init__": [[752, 764], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet.Bottleneck.forward": [[765, 786], ["alexnet.Bottleneck.conv1", "alexnet.Bottleneck.bn1", "alexnet.Bottleneck.relu", "alexnet.Bottleneck.conv2", "alexnet.Bottleneck.bn2", "alexnet.Bottleneck.relu", "alexnet.Bottleneck.conv3", "alexnet.Bottleneck.bn3", "alexnet.Bottleneck.relu", "alexnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.__init__": [[791, 812], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "alexnet._netF_resnet._make_layer", "alexnet._netF_resnet._make_layer", "alexnet._netF_resnet._make_layer", "alexnet._netF_resnet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "alexnet._netF_resnet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet._make_layer", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet._make_layer", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet._make_layer", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "_netF_resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet._make_layer": [[813, 829], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load": [[830, 858], ["alexnet._netF_resnet.state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "range", "alexnet._netF_resnet.update", "alexnet._netF_resnet.load_state_dict", "len", "print", "param_list.append", "key_list.append"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load"], ["", "def", "load", "(", "self", ",", "checkpoint", ")", ":", "\n", "        ", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "checkpoint", ")", "\n", "\n", "tmp_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "(", "k", "==", "\"state_dict\"", ")", ":", "\n", "                ", "tmp_dict", "=", "v", "\n", "\n", "# get pretrained parameters", "\n", "", "", "param_list", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "(", "'fc'", "in", "k", ")", ":", "\n", "                ", "param_list", ".", "append", "(", "v", ")", "\n", "\n", "", "", "key_list", "=", "[", "]", "\n", "for", "k", "in", "model_dict", ":", "\n", "            ", "if", "(", "'layer'", "in", "k", "or", "'bn'", "in", "k", "or", "'conv'", "in", "k", ")", ":", "\n", "                ", "key_list", ".", "append", "(", "k", ")", "\n", "\n", "# get parameter dict", "\n", "", "", "param_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "key_list", ")", ")", ":", "\n", "            ", "print", "(", "key_list", "[", "i", "]", ")", "\n", "param_dict", "[", "key_list", "[", "i", "]", "]", "=", "param_list", "[", "i", "]", "\n", "\n", "", "model_dict", ".", "update", "(", "param_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.forward": [[859, 874], ["alexnet._netF_resnet.conv1", "alexnet._netF_resnet.bn1", "alexnet._netF_resnet.relu", "alexnet._netF_resnet.maxpool", "alexnet._netF_resnet.layer1", "alexnet._netF_resnet.layer2", "alexnet._netF_resnet.layer3", "alexnet._netF_resnet.layer4", "alexnet._netF_resnet.avgpool", "alexnet._netF_resnet.view", "alexnet._netF_resnet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "embedding", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netC_resnet.__init__": [[879, 885], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "nclasses", ")", ":", "\n", "        ", "super", "(", "_netC_resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "2048", ",", "nclasses", ")", ")", "\n", "\n", "self", ".", "soft", "=", "nn", ".", "Sequential", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netC_resnet.forward": [[886, 891], ["alexnet._netC_resnet.classifier", "alexnet._netC_resnet.soft"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "embedding", ")", ":", "\n", "        ", "output_logit", "=", "self", ".", "classifier", "(", "embedding", ")", "\n", "output", "=", "self", ".", "soft", "(", "output_logit", ")", "\n", "\n", "return", "output_logit", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet.alexnet": [[892, 903], ["alexnet._netF_alexnet", "print", "print", "_netF_alexnet.load"], "function", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.model.alexnet._netF_resnet.load"], ["", "", "def", "alexnet", "(", "pretrained", "=", "False", ")", ":", "\n", "  ", "model", "=", "_netF_alexnet", "(", ")", "\n", "print", "(", "\"backbone:alexnet\"", ")", "\n", "# if pretrained:", "\n", "#   model.load_state_dict(model_zoo.load_url(model_urls['resnet50']))", "\n", "if", "pretrained", "==", "True", ":", "\n", "    ", "model_path", "=", "'data/pretrained_model/alexnet_pretrain.pth'", "\n", "print", "(", "\"Loading pretrained weights from %s\"", "%", "(", "model_path", ")", ")", "\n", "model", ".", "load", "(", "model_path", ")", "\n", "# model.fc = torch.nn.Linear(2048, 1024)", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.models.GCN.__init__": [[8, 14], ["torch.Module.__init__", "layers.GraphConvolution", "layers.GraphConvolution"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nclasses", ",", "dropout", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "conv_1", "=", "GraphConvolution", "(", "nfeat", ",", "nfeat", ")", "\n", "self", ".", "classifier", "=", "GraphConvolution", "(", "nfeat", ",", "nclasses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.models.GCN.forward": [[15, 21], ["torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "models.GCN.classifier", "models.GCN.conv_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "feat_1", "=", "F", ".", "relu", "(", "self", ".", "conv_1", "(", "x", ",", "adj", ")", ")", "\n", "feat_1", "=", "F", ".", "dropout", "(", "feat_1", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "logit", "=", "self", ".", "classifier", "(", "feat_1", ",", "adj", ")", "\n", "\n", "return", "logit", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__": [[9, 19], ["torch.nn.modules.module.Module.__init__", "torch.nn.parameter.Parameter", "layers.GraphConvolution.reset_parameters", "torch.FloatTensor().cuda", "torch.nn.parameter.Parameter", "layers.GraphConvolution.register_parameter", "torch.FloatTensor().cuda", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__init__", "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ".", "cuda", "(", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.reset_parameters": [[20, 25], ["layers.GraphConvolution.weight.data.uniform_", "math.sqrt", "layers.GraphConvolution.bias.data.uniform_", "layers.GraphConvolution.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.forward": [[26, 33], ["torch.mm", "torch.mm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "        ", "support", "=", "torch", ".", "mm", "(", "input", ",", "self", ".", "weight", ")", "\n", "output", "=", "torch", ".", "mm", "(", "adj", ",", "support", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ChrisAllenMing_LtC-MSDA.gcn.layers.GraphConvolution.__repr__": [[34, 38], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "", "", ""]]}