{"home.repos.pwc.inspect_result.arminmasoumian_gcndepth.None.train.parse_args": [[16, 44], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.None.train.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a detector'", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "\n", "default", "=", "'/home/user/Documents/code/fm_depth/config/cfg_kitti_fm_joint.py'", ",", "\n", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--work_dir'", ",", "\n", "default", "=", "'/media/user/harddisk/weight/fmdepth'", ",", "\n", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume_from'", ",", "\n", "help", "=", "'the checkpoint file to resume from'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpus'", ",", "\n", "default", "=", "'0'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'number of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1024", ",", "\n", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'pytorch'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.None.train.main": [[46, 100], ["train.parse_args", "print", "mmcv.Config.fromfile", "Config.fromfile.get", "print", "mono.apis.get_root_logger", "mono.apis.get_root_logger.info", "mono.datasets.get_dataset.get_dataset", "mono.apis.train_mono", "int", "mono.apis.init_dist", "mono.apis.get_root_logger.info", "mono.apis.set_random_seed", "mmcv.runner.load_checkpoint", "mono.datasets.get_dataset.get_dataset", "parse_args.gpus.split", "print", "torch.load", "model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.None.train.parse_args", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.env.get_root_logger", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.get_dataset.get_dataset", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.trainer.train_mono", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.env.init_dist", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.env.set_random_seed", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.get_dataset.get_dataset"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "print", "(", "args", ".", "config", ")", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "resume_from", "=", "args", ".", "resume_from", "\n", "", "cfg", ".", "gpus", "=", "[", "int", "(", "_", ")", "for", "_", "in", "args", ".", "gpus", ".", "split", "(", "','", ")", "]", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "", "print", "(", "'cfg is '", ",", "cfg", ")", "\n", "# init logger before other steps", "\n", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "logger", ".", "info", "(", "'Distributed training: {}'", ".", "format", "(", "distributed", ")", ")", "\n", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "'Set random seed to {}'", ".", "format", "(", "args", ".", "seed", ")", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "model_name", "=", "cfg", ".", "model", "[", "'name'", "]", "\n", "model", "=", "MONO", ".", "module_dict", "[", "model_name", "]", "(", "cfg", ".", "model", ")", "\n", "\n", "if", "cfg", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "load_checkpoint", "(", "model", ",", "cfg", ".", "resume_from", ",", "map_location", "=", "'cpu'", ")", "\n", "", "elif", "cfg", ".", "finetune", "is", "not", "None", ":", "\n", "        ", "print", "(", "'loading from'", ",", "cfg", ".", "finetune", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "cfg", ".", "finetune", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "\n", "", "train_dataset", "=", "get_dataset", "(", "cfg", ".", "data", ",", "training", "=", "True", ")", "\n", "if", "cfg", ".", "validate", ":", "\n", "        ", "val_dataset", "=", "get_dataset", "(", "cfg", ".", "data", ",", "training", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "val_dataset", "=", "None", "\n", "\n", "", "train_mono", "(", "model", ",", "\n", "train_dataset", ",", "\n", "val_dataset", ",", "\n", "cfg", ",", "\n", "distributed", "=", "distributed", ",", "\n", "validate", "=", "cfg", ".", "validate", ",", "\n", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.mono_dataset.MonoDataset.__init__": [[32, 75], ["torch.Dataset.__init__", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "numpy.zeros", "int", "mono_dataset.MonoDataset.__len__", "numpy.load", "torch.__version__.split", "torch.__version__.split", "torch.__version__.split", "torch.__version__.split"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.loader.sampler.DistributedGroupSampler.__len__"], ["def", "__init__", "(", "self", ",", "\n", "data_path", ",", "\n", "filenames", ",", "\n", "height", ",", "\n", "width", ",", "\n", "frame_idxs", ",", "\n", "is_train", "=", "False", ",", "\n", "img_ext", "=", "'.jpg'", ",", "\n", "gt_depth_path", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", "MonoDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "interp", "=", "Image", ".", "ANTIALIAS", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "filenames", "=", "filenames", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "frame_idxs", "=", "frame_idxs", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "img_ext", "=", "img_ext", "\n", "self", ".", "loader", "=", "pil_loader", "\n", "self", ".", "gt_depth_path", "=", "gt_depth_path", "\n", "self", ".", "to_tensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n", "# Need to specify augmentations differently in pytorch 1.0 compared with 0.4", "\n", "if", "int", "(", "torch", ".", "__version__", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ">", "0", ":", "\n", "            ", "self", ".", "brightness", "=", "(", "0.8", ",", "1.2", ")", "\n", "self", ".", "contrast", "=", "(", "0.8", ",", "1.2", ")", "\n", "self", ".", "saturation", "=", "(", "0.8", ",", "1.2", ")", "\n", "self", ".", "hue", "=", "(", "-", "0.1", ",", "0.1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "brightness", "=", "0.2", "\n", "self", ".", "contrast", "=", "0.2", "\n", "self", ".", "saturation", "=", "0.2", "\n", "self", ".", "hue", "=", "0.1", "\n", "\n", "", "self", ".", "resize", "=", "transforms", ".", "Resize", "(", "(", "self", ".", "height", ",", "self", ".", "width", ")", ",", "interpolation", "=", "self", ".", "interp", ")", "\n", "\n", "self", ".", "flag", "=", "np", ".", "zeros", "(", "self", ".", "__len__", "(", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "if", "not", "is_train", "and", "self", ".", "gt_depth_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "gt_depths", "=", "np", ".", "load", "(", "gt_depth_path", ",", "\n", "allow_pickle", "=", "True", ",", "\n", "fix_imports", "=", "True", ",", "encoding", "=", "'latin1'", ")", "[", "\"data\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.mono_dataset.MonoDataset.preprocess": [[76, 97], ["list", "list", "mono_dataset.MonoDataset.resize", "mono_dataset.MonoDataset.to_tensor", "mono_dataset.MonoDataset.to_tensor", "color_aug"], "methods", ["None"], ["", "", "def", "preprocess", "(", "self", ",", "inputs", ",", "color_aug", ")", ":", "\n", "        ", "\"\"\"Resize colour images to the required scales and augment if required\n\n        We create the color_aug object in advance and apply the same augmentation to all\n        images in this item. This ensures that all images input to the pose network receive the\n        same augmentation.\n        \"\"\"", "\n", "for", "k", "in", "list", "(", "inputs", ")", ":", "\n", "            ", "if", "\"color\"", "in", "k", ":", "\n", "                ", "n", ",", "im", ",", "i", "=", "k", "\n", "inputs", "[", "(", "n", ",", "im", ",", "0", ")", "]", "=", "self", ".", "resize", "(", "inputs", "[", "(", "n", ",", "im", ",", "-", "1", ")", "]", ")", "\n", "\n", "\n", "\n", "", "", "for", "k", "in", "list", "(", "inputs", ")", ":", "\n", "            ", "if", "\"color\"", "in", "k", ":", "\n", "                ", "f", "=", "inputs", "[", "k", "]", "\n", "n", ",", "im", ",", "i", "=", "k", "\n", "inputs", "[", "(", "n", ",", "im", ",", "i", ")", "]", "=", "self", ".", "to_tensor", "(", "f", ")", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "inputs", "[", "(", "n", "+", "\"_aug\"", ",", "im", ",", "i", ")", "]", "=", "self", ".", "to_tensor", "(", "color_aug", "(", "f", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.mono_dataset.MonoDataset.__len__": [[98, 100], ["len"], "methods", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.mono_dataset.MonoDataset.__getitem__": [[101, 184], ["mono_dataset.MonoDataset.filenames[].split", "mono_dataset.MonoDataset.K.copy", "numpy.linalg.pinv", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "mono_dataset.MonoDataset.preprocess", "len", "int", "len", "torchvision.transforms.ColorJitter.get_params", "numpy.eye", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "random.random", "random.random", "mono_dataset.MonoDataset.get_color", "mono_dataset.MonoDataset.get_color", "mono_dataset.MonoDataset.get_color"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.mono_dataset.MonoDataset.preprocess", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_dataset.KITTIDataset.get_color", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_dataset.KITTIDataset.get_color", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_dataset.KITTIDataset.get_color"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Returns a single training item from the dataset as a dictionary.\n\n        Values correspond to torch tensors.\n        Keys in the dictionary are either strings or tuples:\n\n            (\"color\", <frame_id>, <scale>)          for raw colour images,\n            (\"color_aug\", <frame_id>, <scale>)      for augmented colour images,\n            (\"K\", scale) or (\"inv_K\", scale)        for camera intrinsics,\n            \"stereo_T\"                              for camera extrinsics, and\n            \"depth_gt\"                              for ground truth depth maps.\n\n        <frame_id> is either:\n            an integer (e.g. 0, -1, or 1) representing the temporal step relative to 'index',\n        or\n            \"s\" for the opposite image in the stereo pair.\n\n        <scale> is an integer representing the scale of the image relative to the fullsize image:\n            -1      images at native resolution as loaded from disk\n            0       images resized to (self.width,      self.height     )\n            1       images resized to (self.width // 2, self.height // 2)\n            2       images resized to (self.width // 4, self.height // 4)\n            3       images resized to (self.width // 8, self.height // 8)\n        \"\"\"", "\n", "inputs", "=", "{", "}", "\n", "\n", "do_color_aug", "=", "self", ".", "is_train", "and", "random", ".", "random", "(", ")", ">", "0.5", "\n", "do_flip", "=", "self", ".", "is_train", "and", "random", ".", "random", "(", ")", ">", "0.5", "\n", "\n", "line", "=", "self", ".", "filenames", "[", "index", "]", ".", "split", "(", ")", "\n", "if", "not", "self", ".", "is_train", "and", "self", ".", "gt_depth_path", "is", "not", "None", ":", "\n", "            ", "gt_depth", "=", "self", ".", "gt_depths", "[", "index", "]", "\n", "inputs", "[", "'gt_depth'", "]", "=", "gt_depth", "\n", "\n", "", "folder", "=", "line", "[", "0", "]", "\n", "\n", "if", "len", "(", "line", ")", "==", "3", ":", "\n", "            ", "frame_index", "=", "int", "(", "line", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "frame_index", "=", "0", "\n", "\n", "", "if", "len", "(", "line", ")", "==", "3", ":", "\n", "            ", "side", "=", "line", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "side", "=", "None", "\n", "\n", "", "for", "i", "in", "self", ".", "frame_idxs", ":", "\n", "            ", "if", "i", "==", "\"s\"", ":", "\n", "                ", "other_side", "=", "{", "\"r\"", ":", "\"l\"", ",", "\"l\"", ":", "\"r\"", "}", "[", "side", "]", "\n", "inputs", "[", "(", "\"color\"", ",", "i", ",", "-", "1", ")", "]", "=", "self", ".", "get_color", "(", "folder", ",", "frame_index", ",", "other_side", ",", "do_flip", ")", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "inputs", "[", "(", "\"color\"", ",", "i", ",", "-", "1", ")", "]", "=", "self", ".", "get_color", "(", "folder", ",", "frame_index", "+", "i", ",", "side", ",", "do_flip", ")", "\n", "", "except", ":", "\n", "                    ", "inputs", "[", "(", "\"color\"", ",", "i", ",", "-", "1", ")", "]", "=", "self", ".", "get_color", "(", "folder", ",", "frame_index", ",", "side", ",", "do_flip", ")", "\n", "\n", "# adjusting intrinsics to match each scale in the pyramid", "\n", "", "", "", "K", "=", "self", ".", "K", ".", "copy", "(", ")", "\n", "K", "[", "0", ",", ":", "]", "*=", "self", ".", "width", "\n", "K", "[", "1", ",", ":", "]", "*=", "self", ".", "height", "\n", "inv_K", "=", "np", ".", "linalg", ".", "pinv", "(", "K", ")", "\n", "\n", "inputs", "[", "(", "\"K\"", ")", "]", "=", "torch", ".", "from_numpy", "(", "K", ")", "\n", "inputs", "[", "(", "\"inv_K\"", ")", "]", "=", "torch", ".", "from_numpy", "(", "inv_K", ")", "\n", "\n", "if", "do_color_aug", ":", "\n", "            ", "color_aug", "=", "transforms", ".", "ColorJitter", ".", "get_params", "(", "self", ".", "brightness", ",", "self", ".", "contrast", ",", "self", ".", "saturation", ",", "self", ".", "hue", ")", "\n", "", "else", ":", "\n", "            ", "color_aug", "=", "(", "lambda", "x", ":", "x", ")", "\n", "\n", "", "self", ".", "preprocess", "(", "inputs", ",", "color_aug", ")", "\n", "\n", "for", "i", "in", "self", ".", "frame_idxs", ":", "\n", "            ", "del", "inputs", "[", "(", "\"color\"", ",", "i", ",", "-", "1", ")", "]", "\n", "\n", "", "if", "\"s\"", "in", "self", ".", "frame_idxs", ":", "\n", "            ", "stereo_T", "=", "np", ".", "eye", "(", "4", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "baseline_sign", "=", "-", "1", "if", "do_flip", "else", "1", "\n", "side_sign", "=", "-", "1", "if", "side", "==", "\"l\"", "else", "1", "\n", "stereo_T", "[", "0", ",", "3", "]", "=", "side_sign", "*", "baseline_sign", "*", "0.015", "\n", "inputs", "[", "\"stereo_T\"", "]", "=", "torch", ".", "from_numpy", "(", "stereo_T", ")", "\n", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.mono_dataset.MonoDataset.get_color": [[185, 187], ["None"], "methods", ["None"], ["", "def", "get_color", "(", "self", ",", "folder", ",", "frame_index", ",", "side", ",", "do_flip", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.mono_dataset.MonoDataset.check_depth": [[188, 190], ["None"], "methods", ["None"], ["", "def", "check_depth", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.mono_dataset.MonoDataset.get_depth": [[191, 193], ["None"], "methods", ["None"], ["", "def", "get_depth", "(", "self", ",", "folder", ",", "frame_index", ",", "side", ",", "do_flip", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.mono_dataset.MonoDataset.get_pose": [[194, 196], ["None"], "methods", ["None"], ["", "def", "get_pose", "(", "self", ",", "folder", ",", "frame_index", ",", "offset", ")", ":", "\n", "        ", "return", "", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.mono_dataset.pil_loader": [[11, 17], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning", "\n", "# (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.load_velodyne_points": [[12, 19], ["numpy.fromfile().reshape", "numpy.fromfile"], "function", ["None"], ["def", "load_velodyne_points", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Load 3D point cloud from KITTI file format\n    (adapted from https://github.com/hunse/kitti)\n    \"\"\"", "\n", "points", "=", "np", ".", "fromfile", "(", "filename", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "points", "[", ":", ",", "3", "]", "=", "1.0", "# homogeneous", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.read_calib_file": [[21, 41], ["set", "open", "f.readlines", "line.split", "value.strip.strip", "set.issuperset", "numpy.array", "list", "map", "value.strip.split"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.readlines"], ["", "def", "read_calib_file", "(", "path", ")", ":", "\n", "    ", "\"\"\"Read KITTI calibration file\n    (from https://github.com/hunse/kitti)\n    \"\"\"", "\n", "float_chars", "=", "set", "(", "\"0123456789.e+- \"", ")", "\n", "data", "=", "{", "}", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "key", ",", "value", "=", "line", ".", "split", "(", "':'", ",", "1", ")", "\n", "value", "=", "value", ".", "strip", "(", ")", "\n", "data", "[", "key", "]", "=", "value", "\n", "if", "float_chars", ".", "issuperset", "(", "value", ")", ":", "\n", "# try to cast to float array", "\n", "                ", "try", ":", "\n", "                    ", "data", "[", "key", "]", "=", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "value", ".", "split", "(", "' '", ")", ")", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "# casting error: data[key] already eq. value, so pass", "\n", "                    ", "pass", "\n", "\n", "", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.sub2ind": [[43, 48], ["None"], "function", ["None"], ["", "def", "sub2ind", "(", "matrixSize", ",", "rowSub", ",", "colSub", ")", ":", "\n", "    ", "\"\"\"Convert row, col matrix subscripts to linear indices\n    \"\"\"", "\n", "m", ",", "n", "=", "matrixSize", "\n", "return", "rowSub", "*", "(", "n", "-", "1", ")", "+", "colSub", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.generate_depth_map": [[50, 103], ["kitti_utils.read_calib_file", "kitti_utils.read_calib_file", "numpy.hstack", "numpy.vstack", "[].astype", "numpy.eye", "cam2cam[].reshape", "cam2cam[].reshape", "numpy.dot", "kitti_utils.load_velodyne_points", "numpy.zeros", "kitti_utils.sub2ind", "os.path.join", "os.path.join", "numpy.dot", "numpy.dot", "numpy.round", "numpy.round", "int", "int", "velo_pts_im[].min", "velo2cam[].reshape", "numpy.array", "collections.Counter().items", "numpy.where", "velo_pts_im[].astype", "velo_pts_im[].astype", "collections.Counter", "str"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.read_calib_file", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.read_calib_file", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.load_velodyne_points", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.sub2ind"], ["", "def", "generate_depth_map", "(", "calib_dir", ",", "velo_filename", ",", "cam", "=", "2", ",", "vel_depth", "=", "False", ")", ":", "\n", "    ", "\"\"\"Generate a depth map from velodyne data\n    \"\"\"", "\n", "# load calibration files", "\n", "cam2cam", "=", "read_calib_file", "(", "os", ".", "path", ".", "join", "(", "calib_dir", ",", "'calib_cam_to_cam.txt'", ")", ")", "\n", "velo2cam", "=", "read_calib_file", "(", "os", ".", "path", ".", "join", "(", "calib_dir", ",", "'calib_velo_to_cam.txt'", ")", ")", "\n", "velo2cam", "=", "np", ".", "hstack", "(", "(", "velo2cam", "[", "'R'", "]", ".", "reshape", "(", "3", ",", "3", ")", ",", "velo2cam", "[", "'T'", "]", "[", "...", ",", "np", ".", "newaxis", "]", ")", ")", "\n", "velo2cam", "=", "np", ".", "vstack", "(", "(", "velo2cam", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1.0", "]", ")", ")", ")", "\n", "\n", "# get image shape", "\n", "im_shape", "=", "cam2cam", "[", "\"S_rect_02\"", "]", "[", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# compute projection matrix velodyne->image plane", "\n", "R_cam2rect", "=", "np", ".", "eye", "(", "4", ")", "\n", "R_cam2rect", "[", ":", "3", ",", ":", "3", "]", "=", "cam2cam", "[", "'R_rect_00'", "]", ".", "reshape", "(", "3", ",", "3", ")", "\n", "P_rect", "=", "cam2cam", "[", "'P_rect_0'", "+", "str", "(", "cam", ")", "]", ".", "reshape", "(", "3", ",", "4", ")", "\n", "P_velo2im", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "P_rect", ",", "R_cam2rect", ")", ",", "velo2cam", ")", "\n", "\n", "# load velodyne points and remove all behind image plane (approximation)", "\n", "# each row of the velodyne data is forward, left, up, reflectance", "\n", "velo", "=", "load_velodyne_points", "(", "velo_filename", ")", "\n", "velo", "=", "velo", "[", "velo", "[", ":", ",", "0", "]", ">=", "0", ",", ":", "]", "\n", "\n", "# project the points to the camera", "\n", "velo_pts_im", "=", "np", ".", "dot", "(", "P_velo2im", ",", "velo", ".", "T", ")", ".", "T", "\n", "velo_pts_im", "[", ":", ",", ":", "2", "]", "=", "velo_pts_im", "[", ":", ",", ":", "2", "]", "/", "velo_pts_im", "[", ":", ",", "2", "]", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "\n", "if", "vel_depth", ":", "\n", "        ", "velo_pts_im", "[", ":", ",", "2", "]", "=", "velo", "[", ":", ",", "0", "]", "\n", "\n", "# check if in bounds", "\n", "# use minus 1 to get the exact same value as KITTI matlab code", "\n", "", "velo_pts_im", "[", ":", ",", "0", "]", "=", "np", ".", "round", "(", "velo_pts_im", "[", ":", ",", "0", "]", ")", "-", "1", "\n", "velo_pts_im", "[", ":", ",", "1", "]", "=", "np", ".", "round", "(", "velo_pts_im", "[", ":", ",", "1", "]", ")", "-", "1", "\n", "val_inds", "=", "(", "velo_pts_im", "[", ":", ",", "0", "]", ">=", "0", ")", "&", "(", "velo_pts_im", "[", ":", ",", "1", "]", ">=", "0", ")", "\n", "val_inds", "=", "val_inds", "&", "(", "velo_pts_im", "[", ":", ",", "0", "]", "<", "im_shape", "[", "1", "]", ")", "&", "(", "velo_pts_im", "[", ":", ",", "1", "]", "<", "im_shape", "[", "0", "]", ")", "\n", "velo_pts_im", "=", "velo_pts_im", "[", "val_inds", ",", ":", "]", "\n", "\n", "# project to image", "\n", "depth", "=", "np", ".", "zeros", "(", "(", "im_shape", "[", ":", "2", "]", ")", ")", "\n", "depth", "[", "velo_pts_im", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", ",", "velo_pts_im", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "]", "=", "velo_pts_im", "[", ":", ",", "2", "]", "\n", "\n", "# find the duplicate points and choose the closest depth", "\n", "inds", "=", "sub2ind", "(", "depth", ".", "shape", ",", "velo_pts_im", "[", ":", ",", "1", "]", ",", "velo_pts_im", "[", ":", ",", "0", "]", ")", "\n", "dupe_inds", "=", "[", "item", "for", "item", ",", "count", "in", "Counter", "(", "inds", ")", ".", "items", "(", ")", "if", "count", ">", "1", "]", "\n", "for", "dd", "in", "dupe_inds", ":", "\n", "        ", "pts", "=", "np", ".", "where", "(", "inds", "==", "dd", ")", "[", "0", "]", "\n", "x_loc", "=", "int", "(", "velo_pts_im", "[", "pts", "[", "0", "]", ",", "0", "]", ")", "\n", "y_loc", "=", "int", "(", "velo_pts_im", "[", "pts", "[", "0", "]", ",", "1", "]", ")", "\n", "depth", "[", "y_loc", ",", "x_loc", "]", "=", "velo_pts_im", "[", "pts", ",", "2", "]", ".", "min", "(", ")", "\n", "", "depth", "[", "depth", "<", "0", "]", "=", "0", "\n", "\n", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.rotx": [[105, 112], ["numpy.cos", "numpy.sin", "numpy.array"], "function", ["None"], ["", "def", "rotx", "(", "t", ")", ":", "\n", "    ", "\"\"\"Rotation about the x-axis.\"\"\"", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "c", ",", "-", "s", "]", ",", "\n", "[", "0", ",", "s", ",", "c", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.roty": [[114, 121], ["numpy.cos", "numpy.sin", "numpy.array"], "function", ["None"], ["", "def", "roty", "(", "t", ")", ":", "\n", "    ", "\"\"\"Rotation about the y-axis.\"\"\"", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "c", ",", "0", ",", "s", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "s", ",", "0", ",", "c", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.rotz": [[123, 130], ["numpy.cos", "numpy.sin", "numpy.array"], "function", ["None"], ["", "def", "rotz", "(", "t", ")", ":", "\n", "    ", "\"\"\"Rotation about the z-axis.\"\"\"", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "c", ",", "-", "s", ",", "0", "]", ",", "\n", "[", "s", ",", "c", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.pose_from_oxts_packet": [[132, 154], ["numpy.array().reshape", "kitti_utils.rotx", "kitti_utils.roty", "kitti_utils.rotz", "rotz.dot", "kitti_utils.transform_from_rot_trans", "numpy.log", "roty.dot", "numpy.tan", "numpy.array"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.rotx", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.roty", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.rotz", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.transform_from_rot_trans"], ["", "def", "pose_from_oxts_packet", "(", "metadata", ",", "scale", ")", ":", "\n", "\n", "    ", "lat", ",", "lon", ",", "alt", ",", "roll", ",", "pitch", ",", "yaw", "=", "metadata", "\n", "\"\"\"Helper method to compute a SE(3) pose matrix from an OXTS packet.\n    Taken from https://github.com/utiasSTARS/pykitti\n    \"\"\"", "\n", "\n", "er", "=", "6378137.", "# earth radius (approx.) in meters", "\n", "# Use a Mercator projection to get the translation vector", "\n", "\n", "tx", "=", "scale", "*", "lon", "*", "np", ".", "pi", "*", "er", "/", "180.", "\n", "ty", "=", "scale", "*", "er", "*", "np", ".", "log", "(", "np", ".", "tan", "(", "(", "90.", "+", "lat", ")", "*", "np", ".", "pi", "/", "360.", ")", ")", "\n", "tz", "=", "alt", "\n", "t", "=", "np", ".", "array", "(", "[", "tx", ",", "ty", ",", "tz", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "# Use the Euler angles to get the rotation matrix", "\n", "Rx", "=", "rotx", "(", "roll", ")", "\n", "Ry", "=", "roty", "(", "pitch", ")", "\n", "Rz", "=", "rotz", "(", "yaw", ")", "\n", "R", "=", "Rz", ".", "dot", "(", "Ry", ".", "dot", "(", "Rx", ")", ")", "\n", "return", "transform_from_rot_trans", "(", "R", ",", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.transform_from_rot_trans": [[156, 161], ["R.reshape.reshape", "t.reshape.reshape", "numpy.vstack", "numpy.hstack"], "function", ["None"], ["", "def", "transform_from_rot_trans", "(", "R", ",", "t", ")", ":", "\n", "    ", "\"\"\"Transforation matrix from rotation matrix and translation vector.\"\"\"", "\n", "R", "=", "R", ".", "reshape", "(", "3", ",", "3", ")", "\n", "t", "=", "t", ".", "reshape", "(", "3", ",", "1", ")", "\n", "return", "np", ".", "vstack", "(", "(", "np", ".", "hstack", "(", "[", "R", ",", "t", "]", ")", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_dataset.KITTIDataset.__init__": [[16, 26], ["mono_dataset.MonoDataset.__init__", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "KITTIDataset", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "K", "=", "np", ".", "array", "(", "[", "[", "0.58", ",", "0", ",", "0.5", ",", "0", "]", ",", "\n", "[", "0", ",", "1.92", ",", "0.5", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "full_res_shape", "=", "(", "1242", ",", "375", ")", "\n", "self", ".", "side_map", "=", "{", "\"2\"", ":", "2", ",", "\"3\"", ":", "3", ",", "\"l\"", ":", "2", ",", "\"r\"", ":", "3", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_dataset.KITTIDataset.check_depth": [[27, 38], ["kitti_dataset.KITTIDataset.filenames[].split", "int", "os.path.join", "os.path.isfile", "int"], "methods", ["None"], ["", "def", "check_depth", "(", "self", ")", ":", "\n", "        ", "line", "=", "self", ".", "filenames", "[", "0", "]", ".", "split", "(", ")", "\n", "scene_name", "=", "line", "[", "0", "]", "\n", "frame_index", "=", "int", "(", "line", "[", "1", "]", ")", "\n", "\n", "velo_filename", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "data_path", ",", "\n", "scene_name", ",", "\n", "\"velodyne_points/data/{:010d}.bin\"", ".", "format", "(", "int", "(", "frame_index", ")", ")", ")", "\n", "\n", "return", "os", ".", "path", ".", "isfile", "(", "velo_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_dataset.KITTIDataset.get_color": [[39, 46], ["kitti_dataset.KITTIDataset.loader", "kitti_dataset.KITTIDataset.get_image_path", "color.transpose.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_dataset.KITTIDepthDataset.get_image_path"], ["", "def", "get_color", "(", "self", ",", "folder", ",", "frame_index", ",", "side", ",", "do_flip", ")", ":", "\n", "        ", "color", "=", "self", ".", "loader", "(", "self", ".", "get_image_path", "(", "folder", ",", "frame_index", ",", "side", ")", ")", "\n", "\n", "if", "do_flip", ":", "\n", "            ", "color", "=", "color", ".", "transpose", "(", "pil", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "", "return", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_dataset.KITTIRAWDataset.__init__": [[51, 53], ["kitti_dataset.KITTIDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "KITTIRAWDataset", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_dataset.KITTIRAWDataset.get_image_path": [[54, 59], ["os.path.join"], "methods", ["None"], ["", "def", "get_image_path", "(", "self", ",", "folder", ",", "frame_index", ",", "side", ")", ":", "\n", "        ", "f_str", "=", "\"{:010d}{}\"", ".", "format", "(", "frame_index", ",", "self", ".", "img_ext", ")", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "data_path", ",", "folder", ",", "\"image_0{}/data\"", ".", "format", "(", "self", ".", "side_map", "[", "side", "]", ")", ",", "f_str", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_dataset.KITTIRAWDataset.get_depth": [[60, 75], ["os.path.join", "os.path.join", "kitti_utils.generate_depth_map", "scipy.misc.imresize", "numpy.fliplr", "folder.split", "int"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.generate_depth_map"], ["", "def", "get_depth", "(", "self", ",", "folder", ",", "frame_index", ",", "side", ",", "do_flip", ")", ":", "\n", "        ", "calib_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "folder", ".", "split", "(", "\"/\"", ")", "[", "0", "]", ")", "\n", "\n", "velo_filename", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "data_path", ",", "\n", "folder", ",", "\n", "\"velodyne_points/data/{:010d}.bin\"", ".", "format", "(", "int", "(", "frame_index", ")", ")", ")", "\n", "\n", "depth_gt", "=", "generate_depth_map", "(", "calib_path", ",", "velo_filename", ",", "self", ".", "side_map", "[", "side", "]", ")", "\n", "depth_gt", "=", "scipy", ".", "misc", ".", "imresize", "(", "depth_gt", ",", "self", ".", "full_res_shape", "[", ":", ":", "-", "1", "]", ",", "\"nearest\"", ")", "\n", "\n", "if", "do_flip", ":", "\n", "            ", "depth_gt", "=", "np", ".", "fliplr", "(", "depth_gt", ")", "\n", "\n", "", "return", "depth_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_dataset.KITTIRAWDataset.get_pose": [[76, 103], ["os.path.join", "kitti_utils.read_calib_file", "kitti_utils.read_calib_file", "kitti_utils.read_calib_file", "kitti_utils.transform_from_rot_trans", "kitti_utils.transform_from_rot_trans", "kitti_utils.transform_from_rot_trans", "open", "numpy.array", "numpy.genfromtxt", "os.path.join", "os.path.join", "os.path.join", "numpy.zeros", "os.path.join", "os.path.join", "os.path.dirname", "os.path.dirname", "os.path.dirname", "datetime.datetime.strptime().timestamp", "f.read().splitlines", "datetime.datetime.strptime", "f.read"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.read_calib_file", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.read_calib_file", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.read_calib_file", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.transform_from_rot_trans", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.transform_from_rot_trans", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_utils.transform_from_rot_trans"], ["", "def", "get_pose", "(", "self", ",", "folder", ",", "frame_index", ",", "offset", ")", ":", "\n", "        ", "oxts_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "folder", ",", "'oxts'", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "oxts_root", ",", "'timestamps.txt'", ")", ")", "as", "f", ":", "\n", "            ", "timestamps", "=", "np", ".", "array", "(", "[", "datetime", ".", "datetime", ".", "strptime", "(", "ts", "[", ":", "-", "3", "]", ",", "\"%Y-%m-%d %H:%M:%S.%f\"", ")", ".", "timestamp", "(", ")", "\n", "for", "ts", "in", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "]", ")", "\n", "\n", "", "speed0", "=", "np", ".", "genfromtxt", "(", "os", ".", "path", ".", "join", "(", "oxts_root", ",", "'data'", ",", "'{:010d}.txt'", ".", "format", "(", "frame_index", ")", ")", ")", "[", "[", "8", ",", "9", ",", "10", "]", "]", "\n", "# speed1 = np.genfromtxt(os.path.join(oxts_root, 'data', '{:010d}.txt'.format(frame_index+offset)))[[8, 9, 10]]", "\n", "\n", "timestamp0", "=", "timestamps", "[", "frame_index", "]", "\n", "timestamp1", "=", "timestamps", "[", "frame_index", "+", "offset", "]", "\n", "# displacement = 0.5 * (speed0 + speed1) * (timestamp1 - timestamp0)", "\n", "displacement", "=", "speed0", "*", "(", "timestamp1", "-", "timestamp0", ")", "\n", "\n", "imu2velo", "=", "read_calib_file", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "os", ".", "path", ".", "dirname", "(", "folder", ")", ",", "'calib_imu_to_velo.txt'", ")", ")", "\n", "velo2cam", "=", "read_calib_file", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "os", ".", "path", ".", "dirname", "(", "folder", ")", ",", "'calib_velo_to_cam.txt'", ")", ")", "\n", "cam2cam", "=", "read_calib_file", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "os", ".", "path", ".", "dirname", "(", "folder", ")", ",", "'calib_cam_to_cam.txt'", ")", ")", "\n", "\n", "velo2cam_mat", "=", "transform_from_rot_trans", "(", "velo2cam", "[", "'R'", "]", ",", "velo2cam", "[", "'T'", "]", ")", "\n", "imu2velo_mat", "=", "transform_from_rot_trans", "(", "imu2velo", "[", "'R'", "]", ",", "imu2velo", "[", "'T'", "]", ")", "\n", "cam_2rect_mat", "=", "transform_from_rot_trans", "(", "cam2cam", "[", "'R_rect_00'", "]", ",", "np", ".", "zeros", "(", "3", ")", ")", "\n", "\n", "imu2cam", "=", "cam_2rect_mat", "@", "velo2cam_mat", "@", "imu2velo_mat", "\n", "\n", "odo_pose", "=", "imu2cam", "[", ":", "3", ",", ":", "3", "]", "@", "displacement", "+", "imu2cam", "[", ":", "3", ",", "3", "]", "\n", "\n", "return", "odo_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_dataset.KITTIOdomDataset.__init__": [[108, 110], ["kitti_dataset.KITTIDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "KITTIOdomDataset", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_dataset.KITTIOdomDataset.get_image_path": [[111, 120], ["os.path.join", "int"], "methods", ["None"], ["", "def", "get_image_path", "(", "self", ",", "folder", ",", "frame_index", ",", "side", ")", ":", "\n", "        ", "f_str", "=", "\"{:06d}{}\"", ".", "format", "(", "frame_index", ",", "self", ".", "img_ext", ")", "\n", "side_map", "=", "{", "\"l\"", ":", "0", ",", "\"r\"", ":", "1", "}", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "data_path", ",", "\n", "\"sequences/{:02d}\"", ".", "format", "(", "int", "(", "folder", ")", ")", ",", "\n", "\"image_{}\"", ".", "format", "(", "side_map", "[", "side", "]", ")", ",", "\n", "f_str", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_dataset.KITTIDepthDataset.__init__": [[125, 127], ["kitti_dataset.KITTIDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "KITTIDepthDataset", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_dataset.KITTIDepthDataset.get_image_path": [[128, 136], ["os.path.join"], "methods", ["None"], ["", "def", "get_image_path", "(", "self", ",", "folder", ",", "frame_index", ",", "side", ")", ":", "\n", "        ", "f_str", "=", "\"{:010d}{}\"", ".", "format", "(", "frame_index", ",", "self", ".", "img_ext", ")", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "data_path", ",", "\n", "folder", ",", "\n", "\"image_0{}/data\"", ".", "format", "(", "self", ".", "side_map", "[", "side", "]", ")", ",", "\n", "f_str", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.kitti_dataset.KITTIDepthDataset.get_depth": [[137, 153], ["os.path.join", "PIL.open", "numpy.fliplr.resize", "numpy.array().astype", "numpy.fliplr", "numpy.array"], "methods", ["None"], ["", "def", "get_depth", "(", "self", ",", "folder", ",", "frame_index", ",", "side", ",", "do_flip", ")", ":", "\n", "        ", "f_str", "=", "\"{:010d}.png\"", ".", "format", "(", "frame_index", ")", "\n", "depth_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "data_path", ",", "\n", "folder", ",", "\n", "\"proj_depth/groundtruth/image_0{}\"", ".", "format", "(", "self", ".", "side_map", "[", "side", "]", ")", ",", "\n", "f_str", ")", "\n", "\n", "depth_gt", "=", "pil", ".", "open", "(", "depth_path", ")", "\n", "depth_gt", "=", "depth_gt", ".", "resize", "(", "self", ".", "full_res_shape", ",", "pil", ".", "NEAREST", ")", "\n", "depth_gt", "=", "np", ".", "array", "(", "depth_gt", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "256", "\n", "\n", "if", "do_flip", ":", "\n", "            ", "depth_gt", "=", "np", ".", "fliplr", "(", "depth_gt", ")", "\n", "\n", "", "return", "depth_gt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.readlines": [[11, 17], ["open", "f.read().splitlines", "f.read"], "function", ["None"], ["def", "readlines", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Read all the lines in a text file and return as a list\n    \"\"\"", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.normalize_image": [[19, 26], ["float", "float", "x.max().cpu", "x.min().cpu", "x.max", "x.min"], "function", ["None"], ["", "def", "normalize_image", "(", "x", ")", ":", "\n", "    ", "\"\"\"Rescale image pixels to span range [0, 1]\n    \"\"\"", "\n", "ma", "=", "float", "(", "x", ".", "max", "(", ")", ".", "cpu", "(", ")", ".", "data", ")", "\n", "mi", "=", "float", "(", "x", ".", "min", "(", ")", ".", "cpu", "(", ")", ".", "data", ")", "\n", "d", "=", "ma", "-", "mi", "if", "ma", "!=", "mi", "else", "1e5", "\n", "return", "(", "x", "-", "mi", ")", "/", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.sec_to_hm": [[28, 38], ["int"], "function", ["None"], ["", "def", "sec_to_hm", "(", "t", ")", ":", "\n", "    ", "\"\"\"Convert time in seconds to time in hours, minutes and seconds\n    e.g. 10239 -> (2, 50, 39)\n    \"\"\"", "\n", "t", "=", "int", "(", "t", ")", "\n", "s", "=", "t", "%", "60", "\n", "t", "//=", "60", "\n", "m", "=", "t", "%", "60", "\n", "t", "//=", "60", "\n", "return", "t", ",", "m", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.sec_to_hm_str": [[40, 46], ["utils.sec_to_hm"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.sec_to_hm"], ["", "def", "sec_to_hm_str", "(", "t", ")", ":", "\n", "    ", "\"\"\"Convert time in seconds to a nice string\n    e.g. 10239 -> '02h50m39s'\n    \"\"\"", "\n", "h", ",", "m", ",", "s", "=", "sec_to_hm", "(", "t", ")", "\n", "return", "\"{:02d}h{:02d}m{:02d}s\"", ".", "format", "(", "h", ",", "m", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.transformation_from_parameters": [[48, 60], ["utils.rot_from_axisangle", "translation.clone", "utils.get_translation_matrix", "R.transpose.transpose", "torch.matmul", "torch.matmul"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.rot_from_axisangle", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.get_translation_matrix"], ["", "def", "transformation_from_parameters", "(", "axisangle", ",", "translation", ",", "invert", "=", "False", ")", ":", "\n", "    ", "R", "=", "rot_from_axisangle", "(", "axisangle", ")", "\n", "t", "=", "translation", ".", "clone", "(", ")", "\n", "if", "invert", ":", "\n", "        ", "R", "=", "R", ".", "transpose", "(", "1", ",", "2", ")", "\n", "t", "*=", "-", "1", "\n", "", "T", "=", "get_translation_matrix", "(", "t", ")", "\n", "if", "invert", ":", "\n", "        ", "M", "=", "torch", ".", "matmul", "(", "R", ",", "T", ")", "\n", "", "else", ":", "\n", "        ", "M", "=", "torch", ".", "matmul", "(", "T", ",", "R", ")", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.get_translation_matrix": [[62, 71], ["torch.zeros().cuda", "translation_vector.contiguous().view", "torch.zeros", "translation_vector.contiguous"], "function", ["None"], ["", "def", "get_translation_matrix", "(", "translation_vector", ")", ":", "\n", "    ", "T", "=", "torch", ".", "zeros", "(", "translation_vector", ".", "shape", "[", "0", "]", ",", "4", ",", "4", ")", ".", "cuda", "(", ")", "\n", "t", "=", "translation_vector", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "3", ",", "1", ")", "\n", "T", "[", ":", ",", "0", ",", "0", "]", "=", "1", "\n", "T", "[", ":", ",", "1", ",", "1", "]", "=", "1", "\n", "T", "[", ":", ",", "2", ",", "2", "]", "=", "1", "\n", "T", "[", ":", ",", "3", ",", "3", "]", "=", "1", "\n", "T", "[", ":", ",", ":", "3", ",", "3", ",", "None", "]", "=", "t", "\n", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.rot_from_axisangle": [[73, 103], ["torch.norm", "torch.cos", "torch.sin", "axis[].unsqueeze", "axis[].unsqueeze", "axis[].unsqueeze", "torch.zeros().cuda", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.zeros"], "function", ["None"], ["", "def", "rot_from_axisangle", "(", "vec", ")", ":", "\n", "    ", "angle", "=", "torch", ".", "norm", "(", "vec", ",", "2", ",", "2", ",", "True", ")", "\n", "axis", "=", "vec", "/", "(", "angle", "+", "1e-7", ")", "\n", "ca", "=", "torch", ".", "cos", "(", "angle", ")", "\n", "sa", "=", "torch", ".", "sin", "(", "angle", ")", "\n", "C", "=", "1", "-", "ca", "\n", "x", "=", "axis", "[", "...", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "y", "=", "axis", "[", "...", ",", "1", "]", ".", "unsqueeze", "(", "1", ")", "\n", "z", "=", "axis", "[", "...", ",", "2", "]", ".", "unsqueeze", "(", "1", ")", "\n", "xs", "=", "x", "*", "sa", "\n", "ys", "=", "y", "*", "sa", "\n", "zs", "=", "z", "*", "sa", "\n", "xC", "=", "x", "*", "C", "\n", "yC", "=", "y", "*", "C", "\n", "zC", "=", "z", "*", "C", "\n", "xyC", "=", "x", "*", "yC", "\n", "yzC", "=", "y", "*", "zC", "\n", "zxC", "=", "z", "*", "xC", "\n", "rot", "=", "torch", ".", "zeros", "(", "(", "vec", ".", "shape", "[", "0", "]", ",", "4", ",", "4", ")", ")", ".", "cuda", "(", ")", "\n", "rot", "[", ":", ",", "0", ",", "0", "]", "=", "torch", ".", "squeeze", "(", "x", "*", "xC", "+", "ca", ")", "\n", "rot", "[", ":", ",", "0", ",", "1", "]", "=", "torch", ".", "squeeze", "(", "xyC", "-", "zs", ")", "\n", "rot", "[", ":", ",", "0", ",", "2", "]", "=", "torch", ".", "squeeze", "(", "zxC", "+", "ys", ")", "\n", "rot", "[", ":", ",", "1", ",", "0", "]", "=", "torch", ".", "squeeze", "(", "xyC", "+", "zs", ")", "\n", "rot", "[", ":", ",", "1", ",", "1", "]", "=", "torch", ".", "squeeze", "(", "y", "*", "yC", "+", "ca", ")", "\n", "rot", "[", ":", ",", "1", ",", "2", "]", "=", "torch", ".", "squeeze", "(", "yzC", "-", "xs", ")", "\n", "rot", "[", ":", ",", "2", ",", "0", "]", "=", "torch", ".", "squeeze", "(", "zxC", "-", "ys", ")", "\n", "rot", "[", ":", ",", "2", ",", "1", "]", "=", "torch", ".", "squeeze", "(", "yzC", "+", "xs", ")", "\n", "rot", "[", ":", ",", "2", ",", "2", "]", "=", "torch", ".", "squeeze", "(", "z", "*", "zC", "+", "ca", ")", "\n", "rot", "[", ":", ",", "3", ",", "3", "]", "=", "1", "\n", "return", "rot", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.dump_xyz": [[105, 113], ["numpy.eye", "xyzs.append", "numpy.dot", "xyzs.append"], "function", ["None"], ["", "def", "dump_xyz", "(", "source_to_target_transformations", ")", ":", "\n", "    ", "xyzs", "=", "[", "]", "\n", "cam_to_world", "=", "np", ".", "eye", "(", "4", ")", "\n", "xyzs", ".", "append", "(", "cam_to_world", "[", ":", "3", ",", "3", "]", ")", "\n", "for", "source_to_target_transformation", "in", "source_to_target_transformations", ":", "\n", "        ", "cam_to_world", "=", "np", ".", "dot", "(", "cam_to_world", ",", "source_to_target_transformation", ")", "\n", "xyzs", ".", "append", "(", "cam_to_world", "[", ":", "3", ",", "3", "]", ")", "\n", "", "return", "xyzs", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.compute_ate": [[115, 123], ["numpy.sum", "numpy.sum", "numpy.sqrt", "numpy.sum"], "function", ["None"], ["", "def", "compute_ate", "(", "gtruth_xyz", ",", "pred_xyz_o", ")", ":", "\n", "    ", "offset", "=", "gtruth_xyz", "[", "0", "]", "-", "pred_xyz_o", "[", "0", "]", "\n", "pred_xyz", "=", "pred_xyz_o", "+", "offset", "[", "None", ",", ":", "]", "\n", "\n", "scale", "=", "np", ".", "sum", "(", "gtruth_xyz", "*", "pred_xyz", ")", "/", "np", ".", "sum", "(", "pred_xyz", "**", "2", ")", "\n", "alignment_error", "=", "pred_xyz", "*", "scale", "-", "gtruth_xyz", "\n", "rmse", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "alignment_error", "**", "2", ")", ")", "/", "gtruth_xyz", ".", "shape", "[", "0", "]", "\n", "return", "rmse", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.extract_match": [[125, 141], ["cv2.ORB_create", "cv2.ORB_create.detectAndCompute", "cv2.ORB_create.detectAndCompute", "cv2.BFMatcher", "cv2.BFMatcher.match", "sorted", "range", "query_position.append", "train_position.append"], "function", ["None"], ["", "def", "extract_match", "(", "queryImage", ",", "trainImage", ",", "num", ")", ":", "\n", "    ", "orb", "=", "cv2", ".", "ORB_create", "(", ")", "\n", "kp_query", ",", "des_query", "=", "orb", ".", "detectAndCompute", "(", "queryImage", ",", "None", ")", "\n", "kp_train", ",", "des_train", "=", "orb", ".", "detectAndCompute", "(", "trainImage", ",", "None", ")", "\n", "bf", "=", "cv2", ".", "BFMatcher", "(", "cv2", ".", "NORM_HAMMING", ",", "crossCheck", "=", "True", ")", "\n", "matches", "=", "bf", ".", "match", "(", "des_query", ",", "des_train", ")", "\n", "matches", "=", "sorted", "(", "matches", ",", "key", "=", "lambda", "x", ":", "x", ".", "distance", ")", "\n", "query_position", "=", "[", "]", "\n", "train_position", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "match", "=", "matches", "[", "i", "]", "\n", "queryIdx", "=", "match", ".", "queryIdx", "\n", "trainIdx", "=", "match", ".", "trainIdx", "\n", "query_position", ".", "append", "(", "kp_query", "[", "queryIdx", "]", ".", "pt", ")", "\n", "train_position", ".", "append", "(", "kp_train", "[", "trainIdx", "]", ".", "pt", ")", "\n", "", "return", "query_position", ",", "train_position", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.compute_errors": [[143, 162], ["numpy.maximum", "numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.mean", "np.sqrt.mean", "np.sqrt.mean", "numpy.log", "numpy.log", "numpy.abs"], "function", ["None"], ["", "def", "compute_errors", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\"Computation of error metrics between predicted and ground truth depths\n    \"\"\"", "\n", "thresh", "=", "np", ".", "maximum", "(", "(", "gt", "/", "pred", ")", ",", "(", "pred", "/", "gt", ")", ")", "\n", "a1", "=", "(", "thresh", "<", "1.25", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "thresh", "<", "1.25", "**", "2", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "thresh", "<", "1.25", "**", "3", ")", ".", "mean", "(", ")", "\n", "\n", "rmse", "=", "(", "gt", "-", "pred", ")", "**", "2", "\n", "rmse", "=", "np", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "\n", "rmse_log", "=", "(", "np", ".", "log", "(", "gt", ")", "-", "np", ".", "log", "(", "pred", ")", ")", "**", "2", "\n", "rmse_log", "=", "np", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "\n", "abs_rel", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "gt", "-", "pred", ")", "/", "gt", ")", "\n", "\n", "sq_rel", "=", "np", ".", "mean", "(", "(", "(", "gt", "-", "pred", ")", "**", "2", ")", "/", "gt", ")", "\n", "\n", "return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", ",", "a1", ",", "a2", ",", "a3", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.batch_post_process_disparity": [[164, 173], ["numpy.meshgrid", "numpy.linspace", "numpy.linspace", "numpy.clip"], "function", ["None"], ["", "def", "batch_post_process_disparity", "(", "l_disp", ",", "r_disp", ")", ":", "\n", "    ", "\"\"\"Apply the disparity post-processing method as introduced in Monodepthv1\n    \"\"\"", "\n", "_", ",", "h", ",", "w", "=", "l_disp", ".", "shape", "\n", "m_disp", "=", "0.5", "*", "(", "l_disp", "+", "r_disp", ")", "\n", "l", ",", "_", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "w", ")", ",", "np", ".", "linspace", "(", "0", ",", "1", ",", "h", ")", ")", "\n", "l_mask", "=", "(", "1.0", "-", "np", ".", "clip", "(", "20", "*", "(", "l", "-", "0.05", ")", ",", "0", ",", "1", ")", ")", "[", "None", ",", "...", "]", "\n", "r_mask", "=", "l_mask", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "return", "r_mask", "*", "l_disp", "+", "l_mask", "*", "r_disp", "+", "(", "1.0", "-", "l_mask", "-", "r_mask", ")", "*", "m_disp", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.get_dataset.get_dataset": [[6, 34], ["os.path.join", "dataset.", "os.path.dirname", "utils.readlines", "utils.readlines", "os.path.join.format", "os.path.join.format"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.readlines", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.readlines"], ["def", "get_dataset", "(", "cfg", ",", "training", "=", "True", ")", ":", "\n", "    ", "dataset_name", "=", "cfg", "[", "'name'", "]", "\n", "if", "dataset_name", "==", "'kitti'", ":", "\n", "        ", "from", ".", "kitti_dataset", "import", "KITTIRAWDataset", "as", "dataset", "\n", "", "elif", "dataset_name", "==", "'kitti_odom'", ":", "\n", "        ", "from", ".", "kitti_dataset", "import", "KITTIOdomDataset", "as", "dataset", "\n", "", "elif", "dataset_name", "==", "'cityscape'", ":", "\n", "        ", "from", ".", "cityscape_dataset", "import", "CityscapeDataset", "as", "dataset", "\n", "", "elif", "dataset_name", "==", "'folder'", ":", "\n", "        ", "from", ".", "folder_dataset", "import", "FolderDataset", "as", "dataset", "\n", "", "elif", "dataset_name", "==", "'eth3d'", ":", "\n", "        ", "from", ".", "eth3d_dataset", "import", "FolderDataset", "as", "dataset", "\n", "", "elif", "dataset_name", "==", "'euroc'", ":", "\n", "        ", "from", ".", "euroc_dataset", "import", "FolderDataset", "as", "dataset", "\n", "\n", "", "fpath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"splits\"", ",", "cfg", ".", "split", ",", "\"{}_files.txt\"", ")", "\n", "filenames", "=", "readlines", "(", "fpath", ".", "format", "(", "\"train\"", ")", ")", "if", "training", "else", "readlines", "(", "fpath", ".", "format", "(", "'val'", ")", ")", "\n", "img_ext", "=", "'.png'", "if", "cfg", ".", "png", "==", "True", "else", "'.jpg'", "\n", "\n", "dataset", "=", "dataset", "(", "cfg", ".", "in_path", ",", "\n", "filenames", ",", "\n", "cfg", ".", "height", ",", "\n", "cfg", ".", "width", ",", "\n", "cfg", ".", "frame_ids", "if", "training", "else", "[", "0", "]", ",", "\n", "is_train", "=", "training", ",", "\n", "img_ext", "=", "img_ext", ",", "\n", "gt_depth_path", "=", "cfg", ".", "gt_depth_path", ")", "\n", "return", "dataset", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.cityscape.gen_cityscape_split.main": [[4, 28], ["zipfile.ZipFile", "sorted", "os.path.exists", "zipfile.ZipFile.namelist", "os.path.join", "print", "os.makedirs", "open", "os.path.join", "os.path.join", "open", "os.path.join", "open", "range", "os.path.join", "len", "trainfile.write", "trainfile.write", "valfile.write", "valfile.write", "testfile.write", "testfile.write"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "    ", "file", "=", "'/ssd/Cityscapes/leftImg8bit_sequence_trainvaltest.zip'", "\n", "archive", "=", "zipfile", ".", "ZipFile", "(", "file", ",", "'r'", ")", "\n", "namelist", "=", "sorted", "(", "archive", ".", "namelist", "(", ")", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "'..'", ",", "'splits'", ",", "'cityscape'", ")", ")", ":", "\n", "        ", "print", "(", "'path exists'", ")", "\n", "", "else", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "'..'", ",", "'splits'", ",", "'cityscape'", ")", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'..'", ",", "'splits'", ",", "'cityscape'", ",", "'train.txt'", ")", ",", "'w'", ")", "as", "trainfile", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'..'", ",", "'splits'", ",", "'cityscape'", ",", "'val.txt'", ")", ",", "'w'", ")", "as", "valfile", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'..'", ",", "'splits'", ",", "'cityscape'", ",", "'test.txt'", ")", ",", "'w'", ")", "as", "testfile", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "namelist", ")", ")", ":", "\n", "                    ", "str", "=", "namelist", "[", "i", "]", "\n", "if", "'png'", "in", "str", ":", "\n", "                        ", "if", "'train'", "in", "str", ":", "\n", "                            ", "trainfile", ".", "write", "(", "str", ")", "\n", "trainfile", ".", "write", "(", "'\\n'", ")", "\n", "", "elif", "'val'", "in", "str", ":", "\n", "                            ", "valfile", ".", "write", "(", "str", ")", "\n", "valfile", ".", "write", "(", "'\\n'", ")", "\n", "", "elif", "'test'", "in", "str", ":", "\n", "                            ", "testfile", ".", "write", "(", "str", ")", "\n", "testfile", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.loader.sampler.DistributedSampler.__init__": [[18, 21], ["torch.utils.data.DistributedSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ",", "num_replicas", "=", "num_replicas", ",", "rank", "=", "rank", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.loader.sampler.DistributedSampler.__iter__": [[22, 40], ["iter", "torch.Generator", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "indices", "=", "indices", "[", "self", ".", "rank", ":", "self", ".", "total_size", ":", "self", ".", "num_replicas", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.loader.sampler.GroupSampler.__init__": [[44, 54], ["hasattr", "dataset.flag.astype", "numpy.bincount", "enumerate", "int", "numpy.ceil"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "samples_per_gpu", "=", "1", ")", ":", "\n", "        ", "assert", "hasattr", "(", "dataset", ",", "'flag'", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "samples_per_gpu", "=", "samples_per_gpu", "\n", "self", ".", "flag", "=", "dataset", ".", "flag", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "self", ".", "num_samples", "=", "0", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "self", ".", "num_samples", "+=", "int", "(", "np", ".", "ceil", "(", "\n", "size", "/", "self", ".", "samples_per_gpu", ")", ")", "*", "self", ".", "samples_per_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.loader.sampler.GroupSampler.__iter__": [[55, 77], ["enumerate", "numpy.concatenate", "numpy.concatenate", "torch.from_numpy().long", "iter", "numpy.random.shuffle", "numpy.concatenate", "torch.from_numpy().long.append", "len", "numpy.where", "len", "len", "numpy.random.permutation", "torch.from_numpy", "int", "range", "numpy.ceil", "len"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "[", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "if", "size", "==", "0", ":", "\n", "                ", "continue", "\n", "", "indice", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "i", ")", "[", "0", "]", "\n", "assert", "len", "(", "indice", ")", "==", "size", "\n", "np", ".", "random", ".", "shuffle", "(", "indice", ")", "\n", "num_extra", "=", "int", "(", "np", ".", "ceil", "(", "size", "/", "self", ".", "samples_per_gpu", ")", "\n", ")", "*", "self", ".", "samples_per_gpu", "-", "len", "(", "indice", ")", "\n", "indice", "=", "np", ".", "concatenate", "(", "[", "indice", ",", "indice", "[", ":", "num_extra", "]", "]", ")", "\n", "indices", ".", "append", "(", "indice", ")", "\n", "", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "[", "\n", "indices", "[", "i", "*", "self", ".", "samples_per_gpu", ":", "(", "i", "+", "1", ")", "*", "self", ".", "samples_per_gpu", "]", "\n", "for", "i", "in", "np", ".", "random", ".", "permutation", "(", "\n", "range", "(", "len", "(", "indices", ")", "//", "self", ".", "samples_per_gpu", ")", ")", "\n", "]", "\n", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "indices", ")", ".", "long", "(", ")", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.loader.sampler.GroupSampler.__len__": [[78, 80], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.loader.sampler.DistributedGroupSampler.__init__": [[97, 122], ["hasattr", "numpy.bincount", "enumerate", "torch.distributed.get_world_size", "torch.distributed.get_rank", "int", "math.ceil"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "num_replicas", "=", "None", ",", "\n", "rank", "=", "None", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "num_replicas", "=", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "rank", "=", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "samples_per_gpu", "=", "samples_per_gpu", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "\n", "assert", "hasattr", "(", "self", ".", "dataset", ",", "'flag'", ")", "\n", "self", ".", "flag", "=", "self", ".", "dataset", ".", "flag", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "\n", "self", ".", "num_samples", "=", "0", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "self", ".", "num_samples", "+=", "int", "(", "\n", "math", ".", "ceil", "(", "self", ".", "group_sizes", "[", "i", "]", "*", "1.0", "/", "self", ".", "samples_per_gpu", "/", "\n", "self", ".", "num_replicas", ")", ")", "*", "self", ".", "samples_per_gpu", "\n", "", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.loader.sampler.DistributedGroupSampler.__iter__": [[123, 158], ["torch.Generator", "torch.Generator.manual_seed", "enumerate", "iter", "len", "len", "indice[].tolist", "list", "range", "numpy.where", "len", "len", "torch.randperm", "int", "len", "list", "math.ceil", "torch.randperm", "int"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "\n", "indices", "=", "[", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "if", "size", ">", "0", ":", "\n", "                ", "indice", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "i", ")", "[", "0", "]", "\n", "assert", "len", "(", "indice", ")", "==", "size", "\n", "indice", "=", "indice", "[", "list", "(", "torch", ".", "randperm", "(", "int", "(", "size", ")", ",", "\n", "generator", "=", "g", ")", ")", "]", ".", "tolist", "(", ")", "\n", "extra", "=", "int", "(", "\n", "math", ".", "ceil", "(", "\n", "size", "*", "1.0", "/", "self", ".", "samples_per_gpu", "/", "self", ".", "num_replicas", ")", "\n", ")", "*", "self", ".", "samples_per_gpu", "*", "self", ".", "num_replicas", "-", "len", "(", "indice", ")", "\n", "indice", "+=", "indice", "[", ":", "extra", "]", "\n", "indices", "+=", "indice", "\n", "\n", "", "", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "indices", "=", "[", "\n", "indices", "[", "j", "]", "for", "i", "in", "list", "(", "\n", "torch", ".", "randperm", "(", "len", "(", "indices", ")", "//", "self", ".", "samples_per_gpu", ",", "\n", "generator", "=", "g", ")", ")", "\n", "for", "j", "in", "range", "(", "i", "*", "self", ".", "samples_per_gpu", ",", "(", "i", "+", "1", ")", "*", "\n", "self", ".", "samples_per_gpu", ")", "\n", "]", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.loader.sampler.DistributedGroupSampler.__len__": [[159, 161], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.loader.sampler.DistributedGroupSampler.set_epoch": [[162, 164], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.loader.build_loader.build_dataloader": [[18, 55], ["kwargs.get", "torch.utils.data.DataLoader", "mmcv.runner.get_dist_info", "sampler.DistributedGroupSampler", "sampler.DistributedSampler", "sampler.GroupSampler", "functools.partial"], "function", ["None"], ["def", "build_dataloader", "(", "dataset", ",", "\n", "imgs_per_gpu", ",", "\n", "workers_per_gpu", ",", "\n", "num_gpus", "=", "1", ",", "\n", "dist", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "shuffle", "=", "kwargs", ".", "get", "(", "'shuffle'", ",", "True", ")", "\n", "if", "dist", ":", "\n", "        ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "shuffle", ":", "\n", "            ", "sampler", "=", "DistributedGroupSampler", "(", "dataset", ",", "\n", "imgs_per_gpu", ",", "\n", "world_size", ",", "\n", "rank", ")", "\n", "", "else", ":", "\n", "            ", "sampler", "=", "DistributedSampler", "(", "dataset", ",", "\n", "world_size", ",", "\n", "rank", ",", "\n", "shuffle", "=", "False", ")", "\n", "", "batch_size", "=", "imgs_per_gpu", "\n", "num_workers", "=", "workers_per_gpu", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "GroupSampler", "(", "dataset", ",", "imgs_per_gpu", ")", "if", "shuffle", "else", "None", "\n", "batch_size", "=", "num_gpus", "*", "imgs_per_gpu", "\n", "num_workers", "=", "num_gpus", "*", "workers_per_gpu", "\n", "\n", "", "data_loader", "=", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "partial", "(", "collate", ",", "samples_per_gpu", "=", "imgs_per_gpu", ")", ",", "\n", "pin_memory", "=", "False", ",", "\n", "**", "kwargs", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "\n", "return", "data_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.trainer.change_input_variable": [[20, 25], ["data.items", "torch.as_tensor().float().cuda", "torch.as_tensor().float", "torch.as_tensor"], "function", ["None"], ["def", "change_input_variable", "(", "data", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", ":", "\n", "        ", "if", "'kp'", "not", "in", "k", ":", "\n", "            ", "data", "[", "k", "]", "=", "torch", ".", "as_tensor", "(", "v", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.trainer.batch_processor": [[27, 54], ["trainer.change_input_variable", "model", "collections.OrderedDict", "losses.items", "sum", "collections.OrderedDict", "dict", "isinstance", "log_vars[].item", "loss_value.mean", "isinstance", "len", "sum", "TypeError", "collections.OrderedDict.items", "str", "_loss.mean"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.eval_hooks.change_input_variable"], ["", "def", "batch_processor", "(", "model", ",", "data", ",", "train_mode", ")", ":", "\n", "    ", "data", "=", "change_input_variable", "(", "data", ")", "\n", "model_out", ",", "losses", "=", "model", "(", "data", ")", "\n", "log_vars", "=", "OrderedDict", "(", ")", "\n", "\n", "for", "loss_name", ",", "loss_value", "in", "losses", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "loss_value", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "log_vars", "[", "loss_name", "]", "=", "loss_value", ".", "mean", "(", ")", "\n", "", "elif", "isinstance", "(", "loss_value", ",", "list", ")", ":", "\n", "            ", "log_vars", "[", "loss_name", "]", "=", "sum", "(", "_loss", ".", "mean", "(", ")", "for", "_loss", "in", "loss_value", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'{} is not a tensor or list of tensors'", ".", "format", "(", "loss_name", ")", ")", "\n", "\n", "", "", "loss", "=", "sum", "(", "_value", "for", "_key", ",", "_value", "in", "log_vars", ".", "items", "(", ")", ")", "\n", "\n", "log_vars", "[", "'loss'", "]", "=", "loss", "\n", "# print(log_vars)", "\n", "new_log_vars", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "log_vars", ":", "\n", "        ", "new_log_vars", "[", "str", "(", "name", ")", "]", "=", "log_vars", "[", "name", "]", ".", "item", "(", ")", "\n", "\n", "", "outputs", "=", "dict", "(", "loss", "=", "loss", ",", "\n", "log_vars", "=", "new_log_vars", ",", "\n", "num_samples", "=", "len", "(", "data", "[", "(", "'color'", ",", "0", ",", "0", ")", "]", ".", "data", ")", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.trainer.train_mono": [[56, 71], ["env.get_root_logger", "trainer._dist_train", "trainer._non_dist_train"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.env.get_root_logger", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.trainer._dist_train", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.trainer._non_dist_train"], ["", "def", "train_mono", "(", "model", ",", "\n", "dataset_train", ",", "\n", "dataset_val", ",", "\n", "cfg", ",", "\n", "distributed", "=", "False", ",", "\n", "validate", "=", "False", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "if", "logger", "is", "None", ":", "\n", "        ", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "\n", "# start training", "\n", "", "if", "distributed", ":", "\n", "        ", "_dist_train", "(", "model", ",", "dataset_train", ",", "dataset_val", ",", "cfg", ",", "validate", "=", "validate", ")", "\n", "", "else", ":", "\n", "        ", "_non_dist_train", "(", "model", ",", "dataset_train", ",", "dataset_val", ",", "cfg", ",", "validate", "=", "validate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.trainer.build_optimizer": [[73, 141], ["hasattr", "optimizer_cfg.copy.copy", "optimizer_cfg.copy.pop", "mmcv.runner.obj_from_dict", "isinstance", "optimizer_cfg.copy.get", "optimizer_cfg.pop.get", "optimizer_cfg.pop.get", "optimizer_cfg.pop.get", "model.named_parameters", "getattr", "getattr.", "dict", "re.search", "params.append", "optimizer_cfg.copy.pop", "name.endswith", "model.parameters"], "function", ["None"], ["", "", "def", "build_optimizer", "(", "model", ",", "optimizer_cfg", ")", ":", "\n", "    ", "\"\"\"Build optimizer from configs.\n\n    Args:\n        model (:obj:`nn.Module`): The model with parameters to be optimized.\n        optimizer_cfg (dict): The config dict of the optimizer.\n            Positional fields are:\n                - type: class name of the optimizer.\n                - lr: base learning rate.\n            Optional fields are:\n                - any arguments of the corresponding optimizer type, e.g.,\n                  weight_decay, momentum, etc.\n                - paramwise_options: a dict with 3 accepted fileds\n                  (bias_lr_mult, bias_decay_mult, norm_decay_mult).\n                  `bias_lr_mult` and `bias_decay_mult` will be multiplied to\n                  the lr and weight decay respectively for all bias parameters\n                  (except for the normalization layers), and\n                  `norm_decay_mult` will be multiplied to the weight decay\n                  for all weight and bias parameters of normalization layers.\n\n    Returns:\n        torch.optim.Optimizer: The initialized optimizer.\n    \"\"\"", "\n", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "optimizer_cfg", "=", "optimizer_cfg", ".", "copy", "(", ")", "\n", "paramwise_options", "=", "optimizer_cfg", ".", "pop", "(", "'paramwise_options'", ",", "None", ")", "\n", "# if no paramwise option is specified, just use the global setting", "\n", "if", "paramwise_options", "is", "None", ":", "\n", "        ", "return", "obj_from_dict", "(", "optimizer_cfg", ",", "torch", ".", "optim", ",", "\n", "dict", "(", "params", "=", "model", ".", "parameters", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "paramwise_options", ",", "dict", ")", "\n", "# get base lr and weight decay", "\n", "base_lr", "=", "optimizer_cfg", "[", "'lr'", "]", "\n", "base_wd", "=", "optimizer_cfg", ".", "get", "(", "'weight_decay'", ",", "None", ")", "\n", "# weight_decay must be explicitly specified if mult is specified", "\n", "if", "(", "'bias_decay_mult'", "in", "paramwise_options", "\n", "or", "'norm_decay_mult'", "in", "paramwise_options", ")", ":", "\n", "            ", "assert", "base_wd", "is", "not", "None", "\n", "# get param-wise options", "\n", "", "bias_lr_mult", "=", "paramwise_options", ".", "get", "(", "'bias_lr_mult'", ",", "1.", ")", "\n", "bias_decay_mult", "=", "paramwise_options", ".", "get", "(", "'bias_decay_mult'", ",", "1.", ")", "\n", "norm_decay_mult", "=", "paramwise_options", ".", "get", "(", "'norm_decay_mult'", ",", "1.", ")", "\n", "# set param-wise lr and weight decay", "\n", "params", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "not", "param", ".", "requires_grad", ":", "\n", "                ", "continue", "\n", "\n", "", "param_group", "=", "{", "'params'", ":", "[", "param", "]", "}", "\n", "# for norm layers, overwrite the weight decay of weight and bias", "\n", "# TODO: obtain the norm layer prefixes dynamically", "\n", "if", "re", ".", "search", "(", "r'(bn|gn)(\\d+)?.(weight|bias)'", ",", "name", ")", ":", "\n", "                ", "if", "base_wd", "is", "not", "None", ":", "\n", "                    ", "param_group", "[", "'weight_decay'", "]", "=", "base_wd", "*", "norm_decay_mult", "\n", "# for other layers, overwrite both lr and weight decay of bias", "\n", "", "", "elif", "name", ".", "endswith", "(", "'.bias'", ")", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "base_lr", "*", "bias_lr_mult", "\n", "if", "base_wd", "is", "not", "None", ":", "\n", "                    ", "param_group", "[", "'weight_decay'", "]", "=", "base_wd", "*", "bias_decay_mult", "\n", "# otherwise use the global settings", "\n", "\n", "", "", "params", ".", "append", "(", "param_group", ")", "\n", "\n", "", "optimizer_cls", "=", "getattr", "(", "torch", ".", "optim", ",", "optimizer_cfg", ".", "pop", "(", "'type'", ")", ")", "\n", "return", "optimizer_cls", "(", "params", ",", "**", "optimizer_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.trainer._dist_train": [[143, 178], ["mmcv.parallel.MMDistributedDataParallel", "trainer.build_optimizer", "print", "mmcv.runner.Runner", "mono.core.DistOptimizerHook", "mmcv.runner.Runner.register_training_hooks", "mmcv.runner.Runner.register_hook", "mmcv.runner.Runner.run", "mono.datasets.build_dataloader", "mmcv.parallel.MMDistributedDataParallel.cuda", "mmcv.runner.DistSamplerSeedHook", "print", "cfg.get", "mmcv.runner.Runner.register_hook", "mmcv.runner.Runner.resume", "mono.core.DistEvalMonoHook", "mmcv.runner.Runner.load_checkpoint"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.trainer.build_optimizer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.loader.build_loader.build_dataloader"], ["", "", "def", "_dist_train", "(", "model", ",", "dataset_train", ",", "dataset_val", ",", "cfg", ",", "validate", "=", "False", ")", ":", "\n", "# prepare data loaders", "\n", "    ", "data_loaders", "=", "[", "build_dataloader", "(", "dataset_train", ",", "\n", "cfg", ".", "imgs_per_gpu", ",", "\n", "cfg", ".", "workers_per_gpu", ",", "\n", "dist", "=", "True", ")", "\n", "]", "\n", "# put model on gpus", "\n", "model", "=", "MMDistributedDataParallel", "(", "model", ".", "cuda", "(", ")", ",", "find_unused_parameters", "=", "True", ")", "\n", "# build runner", "\n", "optimizer", "=", "build_optimizer", "(", "model", ",", "cfg", ".", "optimizer", ")", "\n", "print", "(", "'cfg work dir is '", ",", "cfg", ".", "work_dir", ")", "\n", "runner", "=", "Runner", "(", "model", ",", "\n", "batch_processor", ",", "\n", "optimizer", ",", "\n", "cfg", ".", "work_dir", ",", "\n", "cfg", ".", "log_level", ")", "\n", "# register hooks", "\n", "optimizer_config", "=", "DistOptimizerHook", "(", "**", "cfg", ".", "optimizer_config", ")", "\n", "runner", ".", "register_training_hooks", "(", "cfg", ".", "lr_config", ",", "\n", "optimizer_config", ",", "\n", "cfg", ".", "checkpoint_config", ",", "\n", "cfg", ".", "log_config", ")", "\n", "runner", ".", "register_hook", "(", "DistSamplerSeedHook", "(", ")", ")", "\n", "# register eval hooks", "\n", "if", "validate", ":", "\n", "        ", "print", "(", "'validate........................'", ")", "\n", "interval", "=", "cfg", ".", "get", "(", "'validate_interval'", ",", "1", ")", "\n", "runner", ".", "register_hook", "(", "DistEvalMonoHook", "(", "dataset_val", ",", "interval", ",", "cfg", ")", ")", "\n", "\n", "", "if", "cfg", ".", "resume_from", ":", "\n", "        ", "runner", ".", "resume", "(", "cfg", ".", "resume_from", ")", "\n", "", "elif", "cfg", ".", "load_from", ":", "\n", "        ", "runner", ".", "load_checkpoint", "(", "cfg", ".", "load_from", ")", "\n", "", "runner", ".", "run", "(", "data_loaders", ",", "cfg", ".", "workflow", ",", "cfg", ".", "total_epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.trainer._non_dist_train": [[180, 212], ["mmcv.parallel.MMDataParallel().cuda", "trainer.build_optimizer", "mmcv.runner.Runner", "mmcv.runner.Runner.register_training_hooks", "mmcv.runner.Runner.run", "mono.datasets.build_dataloader", "print", "mmcv.runner.Runner.register_hook", "mmcv.runner.Runner.resume", "cfg.gpus.__len__", "mmcv.parallel.MMDataParallel", "mono.core.NonDistEvalHook", "mmcv.runner.Runner.load_checkpoint"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.trainer.build_optimizer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.loader.sampler.DistributedGroupSampler.__len__"], ["", "def", "_non_dist_train", "(", "model", ",", "dataset_train", ",", "dataset_val", ",", "cfg", ",", "validate", "=", "False", ")", ":", "\n", "# prepare data loaders", "\n", "    ", "data_loaders", "=", "[", "\n", "build_dataloader", "(", "dataset_train", ",", "\n", "cfg", ".", "imgs_per_gpu", ",", "\n", "cfg", ".", "workers_per_gpu", ",", "\n", "cfg", ".", "gpus", ".", "__len__", "(", ")", ",", "\n", "dist", "=", "False", ")", "\n", "]", "\n", "# put model on gpus", "\n", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "cfg", ".", "gpus", ")", ".", "cuda", "(", ")", "\n", "# build runner", "\n", "optimizer", "=", "build_optimizer", "(", "model", ",", "\n", "cfg", ".", "optimizer", ")", "\n", "runner", "=", "Runner", "(", "model", ",", "batch_processor", ",", "\n", "optimizer", ",", "\n", "cfg", ".", "work_dir", ",", "\n", "cfg", ".", "log_level", ")", "\n", "runner", ".", "register_training_hooks", "(", "cfg", ".", "lr_config", ",", "\n", "cfg", ".", "optimizer_config", ",", "\n", "cfg", ".", "checkpoint_config", ",", "\n", "cfg", ".", "log_config", ")", "\n", "\n", "if", "validate", ":", "\n", "        ", "print", "(", "'validate........................'", ")", "\n", "runner", ".", "register_hook", "(", "NonDistEvalHook", "(", "dataset_val", ",", "cfg", ")", ")", "\n", "\n", "", "if", "cfg", ".", "resume_from", ":", "\n", "        ", "runner", ".", "resume", "(", "cfg", ".", "resume_from", ")", "\n", "", "elif", "cfg", ".", "load_from", ":", "\n", "        ", "runner", ".", "load_checkpoint", "(", "cfg", ".", "load_from", ")", "\n", "", "runner", ".", "run", "(", "data_loaders", ",", "cfg", ".", "workflow", ",", "cfg", ".", "total_epochs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.env.init_dist": [[17, 28], ["torch.get_start_method", "torch.set_start_method", "env._init_dist_pytorch", "env._init_dist_mpi", "env._init_dist_slurm", "ValueError"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.env._init_dist_pytorch", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.env._init_dist_mpi", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.env._init_dist_slurm"], ["def", "init_dist", "(", "launcher", ",", "backend", "=", "'nccl'", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "mp", ".", "get_start_method", "(", "allow_none", "=", "True", ")", "is", "None", ":", "\n", "        ", "mp", ".", "set_start_method", "(", "'spawn'", ")", "\n", "", "if", "launcher", "==", "'pytorch'", ":", "\n", "        ", "_init_dist_pytorch", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "elif", "launcher", "==", "'mpi'", ":", "\n", "        ", "_init_dist_mpi", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "elif", "launcher", "==", "'slurm'", ":", "\n", "        ", "_init_dist_slurm", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid launcher type: {}'", ".", "format", "(", "launcher", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.env._init_dist_pytorch": [[30, 36], ["int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group"], "function", ["None"], ["", "", "def", "_init_dist_pytorch", "(", "backend", ",", "**", "kwargs", ")", ":", "\n", "# TODO: use local_rank instead of rank % num_gpus", "\n", "    ", "rank", "=", "int", "(", "os", ".", "environ", "[", "'RANK'", "]", ")", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "rank", "%", "num_gpus", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.env._init_dist_mpi": [[38, 40], ["None"], "function", ["None"], ["", "def", "_init_dist_mpi", "(", "backend", ",", "**", "kwargs", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.env._init_dist_slurm": [[42, 55], ["int", "int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "subprocess.getoutput", "str", "str", "str", "torch.init_process_group"], "function", ["None"], ["", "def", "_init_dist_slurm", "(", "backend", ",", "port", "=", "29500", ",", "**", "kwargs", ")", ":", "\n", "    ", "proc_id", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "ntasks", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_NTASKS'", "]", ")", "\n", "node_list", "=", "os", ".", "environ", "[", "'SLURM_NODELIST'", "]", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "proc_id", "%", "num_gpus", ")", "\n", "addr", "=", "subprocess", ".", "getoutput", "(", "\n", "'scontrol show hostname {} | head -n1'", ".", "format", "(", "node_list", ")", ")", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "str", "(", "port", ")", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "addr", "\n", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", "=", "str", "(", "ntasks", ")", "\n", "os", ".", "environ", "[", "'RANK'", "]", "=", "str", "(", "proc_id", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.env.set_random_seed": [[57, 62], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.apis.env.get_root_logger": [[64, 74], ["logging.getLogger", "mmcv.runner.get_dist_info", "logging.getLogger.hasHandlers", "logging.basicConfig", "logging.getLogger.setLevel"], "function", ["None"], ["", "def", "get_root_logger", "(", "log_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "if", "not", "logger", ".", "hasHandlers", "(", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "\n", "format", "=", "'%(asctime)s - %(levelname)s - %(message)s'", ",", "\n", "level", "=", "log_level", ")", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "logger", ".", "setLevel", "(", "'ERROR'", ")", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.__init__": [[17, 47], ["os.path.exists", "glob.glob", "len", "os.path.exists", "glob.glob", "config.eva_seqs.split", "os.path.split", "os.path.splitext", "os.path.exists", "print", "exit", "os.remove", "os.path.split", "kitti_evaluation_toolkit.kittiOdomEval.eval_seqs.append", "str", "os.path.splitext", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "config", ".", "gt_dir", ")", ",", "\"Error of ground_truth pose path!\"", "\n", "gt_files", "=", "glob", ".", "glob", "(", "config", ".", "gt_dir", "+", "'/*.txt'", ")", "\n", "gt_files", "=", "[", "os", ".", "path", ".", "split", "(", "f", ")", "[", "1", "]", "for", "f", "in", "gt_files", "]", "\n", "self", ".", "seqs_with_gt", "=", "[", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", "for", "f", "in", "gt_files", "]", "\n", "\n", "self", ".", "lengths", "=", "[", "100", ",", "200", ",", "300", ",", "400", ",", "500", ",", "600", ",", "700", ",", "800", "]", "\n", "self", ".", "num_lengths", "=", "len", "(", "self", ".", "lengths", ")", "\n", "self", ".", "gt_dir", "=", "config", ".", "gt_dir", "\n", "self", ".", "result_dir", "=", "config", ".", "result_dir", "\n", "self", ".", "eval_seqs", "=", "[", "]", "\n", "\n", "# evalute all files in the folder", "\n", "if", "config", ".", "eva_seqs", "==", "'*'", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "result_dir", ")", ":", "\n", "                ", "print", "(", "'File path error!'", ")", "\n", "exit", "(", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "result_dir", "+", "'/all_stats.txt'", ")", ":", "\n", "                ", "os", ".", "remove", "(", "self", ".", "result_dir", "+", "'/all_stats.txt'", ")", "\n", "", "files", "=", "glob", ".", "glob", "(", "self", ".", "result_dir", "+", "'/*.txt'", ")", "\n", "assert", "files", ",", "\"There is not trajectory files in: {}\"", ".", "format", "(", "self", ".", "result_dir", ")", "\n", "for", "f", "in", "files", ":", "\n", "                ", "dirname", ",", "basename", "=", "os", ".", "path", ".", "split", "(", "f", ")", "\n", "file_name", "=", "os", ".", "path", ".", "splitext", "(", "basename", ")", "[", "0", "]", "\n", "self", ".", "eval_seqs", ".", "append", "(", "str", "(", "file_name", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "seqs", "=", "config", ".", "eva_seqs", ".", "split", "(", "','", ")", "\n", "self", ".", "eval_seqs", "=", "[", "str", "(", "s", ")", "for", "s", "in", "seqs", "]", "\n", "\n", "", "self", ".", "eval_seqs", "=", "[", "s", "[", ":", "-", "5", "]", "for", "s", "in", "self", ".", "eval_seqs", "]", "# xxxx_pred => xxxx", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.toCameraCoord": [[56, 68], ["numpy.array", "numpy.linalg.inv", "numpy.dot", "numpy.dot"], "methods", ["None"], ["", "def", "toCameraCoord", "(", "self", ",", "pose_mat", ")", ":", "\n", "        ", "'''\n            Convert the pose of lidar coordinate to camera coordinate\n        '''", "\n", "R_C2L", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "inv_R_C2L", "=", "np", ".", "linalg", ".", "inv", "(", "R_C2L", ")", "\n", "R", "=", "np", ".", "dot", "(", "inv_R_C2L", ",", "pose_mat", ")", "\n", "rot", "=", "np", ".", "dot", "(", "R", ",", "R_C2L", ")", "\n", "return", "rot", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.loadPoses": [[69, 98], ["open", "open.readlines", "open.close", "len", "enumerate", "numpy.eye", "int", "range", "float", "range", "kitti_evaluation_toolkit.kittiOdomEval.toCameraCoord", "line.split", "len"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.readlines", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.toCameraCoord"], ["", "def", "loadPoses", "(", "self", ",", "file_name", ",", "toCameraCoord", ")", ":", "\n", "        ", "'''\n            Each line in the file should follow one of the following structures\n            (1) idx pose(3x4 matrix in terms of 12 numbers)\n            (2) pose(3x4 matrix in terms of 12 numbers)\n        '''", "\n", "f", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "s", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "file_len", "=", "len", "(", "s", ")", "\n", "poses", "=", "{", "}", "\n", "frame_idx", "=", "0", "\n", "for", "cnt", ",", "line", "in", "enumerate", "(", "s", ")", ":", "\n", "            ", "P", "=", "np", ".", "eye", "(", "4", ")", "\n", "line_split", "=", "[", "float", "(", "i", ")", "for", "i", "in", "line", ".", "split", "(", ")", "]", "\n", "withIdx", "=", "int", "(", "len", "(", "line_split", ")", "==", "13", ")", "\n", "for", "row", "in", "range", "(", "3", ")", ":", "\n", "                ", "for", "col", "in", "range", "(", "4", ")", ":", "\n", "                    ", "P", "[", "row", ",", "col", "]", "=", "line_split", "[", "row", "*", "4", "+", "col", "+", "withIdx", "]", "\n", "", "", "if", "withIdx", ":", "\n", "                ", "frame_idx", "=", "line_split", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "frame_idx", "=", "cnt", "\n", "", "if", "toCameraCoord", ":", "\n", "                ", "poses", "[", "frame_idx", "]", "=", "self", ".", "toCameraCoord", "(", "P", ")", "\n", "", "else", ":", "\n", "                ", "poses", "[", "frame_idx", "]", "=", "P", "\n", "\n", "", "", "return", "poses", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.loadPoseSe3": [[99, 108], ["enumerate"], "methods", ["None"], ["", "def", "loadPoseSe3", "(", "self", ",", "tra", ")", ":", "\n", "\n", "        ", "poses", "=", "{", "}", "\n", "\n", "for", "cnt", ",", "p", "in", "enumerate", "(", "tra", ".", "poses_se3", ")", ":", "\n", "\n", "            ", "poses", "[", "cnt", "]", "=", "p", "\n", "\n", "", "return", "poses", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.trajectoryDistances": [[109, 127], ["sorted", "range", "poses.keys", "dist.append", "len", "numpy.sqrt"], "methods", ["None"], ["", "def", "trajectoryDistances", "(", "self", ",", "poses", ")", ":", "\n", "        ", "'''\n            Compute the length of the trajectory\n            poses dictionary: [frame_idx: pose]\n        '''", "\n", "dist", "=", "[", "0", "]", "\n", "sort_frame_idx", "=", "sorted", "(", "poses", ".", "keys", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "sort_frame_idx", ")", "-", "1", ")", ":", "\n", "            ", "cur_frame_idx", "=", "sort_frame_idx", "[", "i", "]", "\n", "next_frame_idx", "=", "sort_frame_idx", "[", "i", "+", "1", "]", "\n", "P1", "=", "poses", "[", "cur_frame_idx", "]", "\n", "P2", "=", "poses", "[", "next_frame_idx", "]", "\n", "dx", "=", "P1", "[", "0", ",", "3", "]", "-", "P2", "[", "0", ",", "3", "]", "\n", "dy", "=", "P1", "[", "1", ",", "3", "]", "-", "P2", "[", "1", ",", "3", "]", "\n", "dz", "=", "P1", "[", "2", ",", "3", "]", "-", "P2", "[", "2", ",", "3", "]", "\n", "dist", ".", "append", "(", "dist", "[", "i", "]", "+", "np", ".", "sqrt", "(", "dx", "**", "2", "+", "dy", "**", "2", "+", "dz", "**", "2", ")", ")", "\n", "", "self", ".", "distance", "=", "dist", "[", "-", "1", "]", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.rotationError": [[128, 134], ["numpy.arccos", "max", "min"], "methods", ["None"], ["", "def", "rotationError", "(", "self", ",", "pose_error", ")", ":", "\n", "        ", "a", "=", "pose_error", "[", "0", ",", "0", "]", "\n", "b", "=", "pose_error", "[", "1", ",", "1", "]", "\n", "c", "=", "pose_error", "[", "2", ",", "2", "]", "\n", "d", "=", "0.5", "*", "(", "a", "+", "b", "+", "c", "-", "1.0", ")", "\n", "return", "np", ".", "arccos", "(", "max", "(", "min", "(", "d", ",", "1.0", ")", ",", "-", "1.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.translationError": [[135, 140], ["numpy.sqrt"], "methods", ["None"], ["", "def", "translationError", "(", "self", ",", "pose_error", ")", ":", "\n", "        ", "dx", "=", "pose_error", "[", "0", ",", "3", "]", "\n", "dy", "=", "pose_error", "[", "1", ",", "3", "]", "\n", "dz", "=", "pose_error", "[", "2", ",", "3", "]", "\n", "return", "np", ".", "sqrt", "(", "dx", "**", "2", "+", "dy", "**", "2", "+", "dz", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.lastFrameFromSegmentLength": [[141, 146], ["range", "len"], "methods", ["None"], ["", "def", "lastFrameFromSegmentLength", "(", "self", ",", "dist", ",", "first_frame", ",", "len_", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "first_frame", ",", "len", "(", "dist", ")", ",", "1", ")", ":", "\n", "            ", "if", "dist", "[", "i", "]", ">", "(", "dist", "[", "first_frame", "]", "+", "len_", ")", ":", "\n", "                ", "return", "i", "\n", "", "", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.calcSequenceErrors": [[147, 183], ["kitti_evaluation_toolkit.kittiOdomEval.trajectoryDistances", "range", "len", "range", "kitti_evaluation_toolkit.kittiOdomEval.lastFrameFromSegmentLength", "numpy.dot", "numpy.dot", "numpy.dot", "kitti_evaluation_toolkit.kittiOdomEval.rotationError", "kitti_evaluation_toolkit.kittiOdomEval.translationError", "err.append", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.linalg.inv", "poses_result.keys", "poses_result.keys"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.trajectoryDistances", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.lastFrameFromSegmentLength", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.rotationError", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.translationError"], ["", "def", "calcSequenceErrors", "(", "self", ",", "poses_gt", ",", "poses_result", ")", ":", "\n", "        ", "err", "=", "[", "]", "\n", "self", ".", "max_speed", "=", "0", "\n", "# pre-compute distances (from ground truth as reference)", "\n", "dist", "=", "self", ".", "trajectoryDistances", "(", "poses_gt", ")", "\n", "# every second, kitti data 10Hz", "\n", "self", ".", "step_size", "=", "10", "\n", "# for all start positions do", "\n", "# for first_frame in range(9, len(poses_gt), self.step_size):", "\n", "for", "first_frame", "in", "range", "(", "0", ",", "len", "(", "poses_gt", ")", ",", "self", ".", "step_size", ")", ":", "\n", "# for all segment lengths do", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_lengths", ")", ":", "\n", "# current length", "\n", "                ", "len_", "=", "self", ".", "lengths", "[", "i", "]", "\n", "# compute last frame of the segment", "\n", "last_frame", "=", "self", ".", "lastFrameFromSegmentLength", "(", "dist", ",", "first_frame", ",", "len_", ")", "\n", "\n", "# Continue if sequence not long enough", "\n", "if", "last_frame", "==", "-", "1", "or", "not", "(", "last_frame", "in", "poses_result", ".", "keys", "(", ")", ")", "or", "not", "(", "first_frame", "in", "poses_result", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "continue", "\n", "\n", "# compute rotational and translational errors, relative pose error (RPE)", "\n", "", "pose_delta_gt", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "poses_gt", "[", "first_frame", "]", ")", ",", "poses_gt", "[", "last_frame", "]", ")", "\n", "pose_delta_result", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "poses_result", "[", "first_frame", "]", ")", ",", "poses_result", "[", "last_frame", "]", ")", "\n", "pose_error", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "pose_delta_result", ")", ",", "pose_delta_gt", ")", "\n", "\n", "r_err", "=", "self", ".", "rotationError", "(", "pose_error", ")", "\n", "t_err", "=", "self", ".", "translationError", "(", "pose_error", ")", "\n", "\n", "# compute speed ", "\n", "num_frames", "=", "last_frame", "-", "first_frame", "+", "1.0", "\n", "speed", "=", "len_", "/", "(", "0.1", "*", "num_frames", ")", "# 10Hz", "\n", "if", "speed", ">", "self", ".", "max_speed", ":", "\n", "                    ", "self", ".", "max_speed", "=", "speed", "\n", "", "err", ".", "append", "(", "[", "first_frame", ",", "r_err", "/", "len_", ",", "t_err", "/", "len_", ",", "len_", ",", "speed", "]", ")", "\n", "", "", "return", "err", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.saveSequenceErrors": [[184, 190], ["open", "open.close", "open.writelines", "str"], "methods", ["None"], ["", "def", "saveSequenceErrors", "(", "self", ",", "err", ",", "file_name", ")", ":", "\n", "        ", "fp", "=", "open", "(", "file_name", ",", "'w'", ")", "\n", "for", "i", "in", "err", ":", "\n", "            ", "line_to_write", "=", "\" \"", ".", "join", "(", "[", "str", "(", "j", ")", "for", "j", "in", "i", "]", ")", "\n", "fp", ".", "writelines", "(", "line_to_write", "+", "\"\\n\"", ")", "\n", "", "fp", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.computeOverallErr": [[191, 202], ["len"], "methods", ["None"], ["", "def", "computeOverallErr", "(", "self", ",", "seq_err", ")", ":", "\n", "        ", "t_err", "=", "0", "\n", "r_err", "=", "0", "\n", "seq_len", "=", "len", "(", "seq_err", ")", "\n", "\n", "for", "item", "in", "seq_err", ":", "\n", "            ", "r_err", "+=", "item", "[", "1", "]", "\n", "t_err", "+=", "item", "[", "2", "]", "\n", "", "ave_t_err", "=", "t_err", "/", "seq_len", "\n", "ave_r_err", "=", "r_err", "/", "seq_len", "\n", "return", "ave_t_err", ",", "ave_r_err", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.plot_xyz": [[203, 242], ["matplotlib.subplots", "matplotlib.subplots", "numpy.array", "kitti_evaluation_toolkit.kittiOdomEval.plot_xyz.traj_xyz"], "methods", ["None"], ["", "def", "plot_xyz", "(", "self", ",", "seq", ",", "poses_ref", ",", "poses_pred", ",", "plot_path_dir", ")", ":", "\n", "\n", "        ", "def", "traj_xyz", "(", "axarr", ",", "positions_xyz", ",", "style", "=", "'-'", ",", "color", "=", "'black'", ",", "title", "=", "\"\"", ",", "label", "=", "\"\"", ",", "alpha", "=", "1.0", ")", ":", "\n", "            ", "\"\"\"\n                plot a path/trajectory based on xyz coordinates into an axis\n                :param axarr: an axis array (for x, y & z) e.g. from 'fig, axarr = plt.subplots(3)'\n                :param traj: trajectory\n                :param style: matplotlib line style\n                :param color: matplotlib color\n                :param label: label (for legend)\n                :param alpha: alpha value for transparency\n            \"\"\"", "\n", "x", "=", "range", "(", "0", ",", "len", "(", "positions_xyz", ")", ")", "\n", "xlabel", "=", "\"index\"", "\n", "ylabels", "=", "[", "\"$x$ (m)\"", ",", "\"$y$ (m)\"", ",", "\"$z$ (m)\"", "]", "\n", "# plt.title('PRY')", "\n", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "                ", "axarr", "[", "i", "]", ".", "plot", "(", "x", ",", "positions_xyz", "[", ":", ",", "i", "]", ",", "style", ",", "color", "=", "color", ",", "label", "=", "label", ",", "alpha", "=", "alpha", ")", "\n", "axarr", "[", "i", "]", ".", "set_ylabel", "(", "ylabels", "[", "i", "]", ")", "\n", "axarr", "[", "i", "]", ".", "legend", "(", "loc", "=", "\"upper right\"", ",", "frameon", "=", "True", ")", "\n", "", "axarr", "[", "2", "]", ".", "set_xlabel", "(", "xlabel", ")", "\n", "if", "title", ":", "\n", "                ", "axarr", "[", "0", "]", ".", "set_title", "(", "'XYZ'", ")", "\n", "\n", "", "", "fig", ",", "axarr", "=", "plt", ".", "subplots", "(", "3", ",", "sharex", "=", "\"col\"", ",", "figsize", "=", "tuple", "(", "[", "20", ",", "10", "]", ")", ")", "\n", "\n", "pred_xyz", "=", "np", ".", "array", "(", "[", "p", "[", ":", "3", ",", "3", "]", "for", "_", ",", "p", "in", "poses_pred", ".", "items", "(", ")", "]", ")", "\n", "traj_xyz", "(", "axarr", ",", "pred_xyz", ",", "'-'", ",", "'b'", ",", "title", "=", "'XYZ'", ",", "label", "=", "'Ours'", ",", "alpha", "=", "1.0", ")", "\n", "if", "poses_ref", ":", "\n", "            ", "ref_xyz", "=", "np", ".", "array", "(", "[", "p", "[", ":", "3", ",", "3", "]", "for", "_", ",", "p", "in", "poses_ref", ".", "items", "(", ")", "]", ")", "\n", "traj_xyz", "(", "axarr", ",", "ref_xyz", ",", "'-'", ",", "'r'", ",", "label", "=", "'GT'", ",", "alpha", "=", "1.0", ")", "\n", "\n", "", "name", "=", "\"{}_xyz\"", ".", "format", "(", "seq", ")", "\n", "plt", ".", "savefig", "(", "plot_path_dir", "+", "\"/\"", "+", "name", "+", "\".png\"", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0.1", ")", "\n", "pdf", "=", "matplotlib", ".", "backends", ".", "backend_pdf", ".", "PdfPages", "(", "plot_path_dir", "+", "\"/\"", "+", "name", "+", "\".pdf\"", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "pdf", ".", "savefig", "(", "fig", ")", "\n", "# plt.show()", "\n", "pdf", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.plot_rpy": [[243, 283], ["matplotlib.subplots", "matplotlib.subplots", "numpy.array", "kitti_evaluation_toolkit.kittiOdomEval.plot_rpy.traj_rpy"], "methods", ["None"], ["", "def", "plot_rpy", "(", "self", ",", "seq", ",", "poses_ref", ",", "poses_pred", ",", "plot_path_dir", ",", "axes", "=", "'szxy'", ")", ":", "\n", "\n", "        ", "def", "traj_rpy", "(", "axarr", ",", "orientations_euler", ",", "style", "=", "'-'", ",", "color", "=", "'black'", ",", "title", "=", "\"\"", ",", "label", "=", "\"\"", ",", "alpha", "=", "1.0", ")", ":", "\n", "            ", "\"\"\"\n            plot a path/trajectory's Euler RPY angles into an axis\n            :param axarr: an axis array (for R, P & Y) e.g. from 'fig, axarr = plt.subplots(3)'\n            :param traj: trajectory\n            :param style: matplotlib line style\n            :param color: matplotlib color\n            :param label: label (for legend)\n            :param alpha: alpha value for transparency\n            \"\"\"", "\n", "x", "=", "range", "(", "0", ",", "len", "(", "orientations_euler", ")", ")", "\n", "xlabel", "=", "\"index\"", "\n", "ylabels", "=", "[", "\"$roll$ (deg)\"", ",", "\"$pitch$ (deg)\"", ",", "\"$yaw$ (deg)\"", "]", "\n", "# plt.title('PRY')", "\n", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "                ", "axarr", "[", "i", "]", ".", "plot", "(", "x", ",", "np", ".", "rad2deg", "(", "orientations_euler", "[", ":", ",", "i", "]", ")", ",", "style", ",", "\n", "color", "=", "color", ",", "label", "=", "label", ",", "alpha", "=", "alpha", ")", "\n", "axarr", "[", "i", "]", ".", "set_ylabel", "(", "ylabels", "[", "i", "]", ")", "\n", "axarr", "[", "i", "]", ".", "legend", "(", "loc", "=", "\"upper right\"", ",", "frameon", "=", "True", ")", "\n", "", "axarr", "[", "2", "]", ".", "set_xlabel", "(", "xlabel", ")", "\n", "if", "title", ":", "\n", "                ", "axarr", "[", "0", "]", ".", "set_title", "(", "'PRY'", ")", "\n", "\n", "", "", "fig_rpy", ",", "axarr_rpy", "=", "plt", ".", "subplots", "(", "3", ",", "sharex", "=", "\"col\"", ",", "figsize", "=", "tuple", "(", "[", "20", ",", "10", "]", ")", ")", "\n", "\n", "pred_rpy", "=", "np", ".", "array", "(", "[", "tr", ".", "euler_from_matrix", "(", "p", ",", "axes", "=", "axes", ")", "for", "_", ",", "p", "in", "poses_pred", ".", "items", "(", ")", "]", ")", "\n", "traj_rpy", "(", "axarr_rpy", ",", "pred_rpy", ",", "'-'", ",", "'b'", ",", "title", "=", "'RPY'", ",", "label", "=", "'Ours'", ",", "alpha", "=", "1.0", ")", "\n", "if", "poses_ref", ":", "\n", "            ", "ref_rpy", "=", "np", ".", "array", "(", "[", "tr", ".", "euler_from_matrix", "(", "p", ",", "axes", "=", "axes", ")", "for", "_", ",", "p", "in", "poses_ref", ".", "items", "(", ")", "]", ")", "\n", "traj_rpy", "(", "axarr_rpy", ",", "ref_rpy", ",", "'-'", ",", "'r'", ",", "label", "=", "'GT'", ",", "alpha", "=", "1.0", ")", "\n", "\n", "", "name", "=", "\"{}_rpy\"", ".", "format", "(", "seq", ")", "\n", "plt", ".", "savefig", "(", "plot_path_dir", "+", "\"/\"", "+", "name", "+", "\".png\"", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0.1", ")", "\n", "pdf", "=", "matplotlib", ".", "backends", ".", "backend_pdf", ".", "PdfPages", "(", "plot_path_dir", "+", "\"/\"", "+", "name", "+", "\".pdf\"", ")", "\n", "fig_rpy", ".", "tight_layout", "(", ")", "\n", "pdf", ".", "savefig", "(", "fig_rpy", ")", "\n", "# plt.show()", "\n", "pdf", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.plotPath_2D_3": [[284, 365], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "matplotlib.figure", "matplotlib.figure", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.gca", "matplotlib.gca", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.gca.get_xlim", "matplotlib.gca.get_ylim", "numpy.mean", "numpy.mean", "max", "matplotlib.gca.set_xlim", "matplotlib.gca.set_ylim", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.gca", "matplotlib.gca", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.gca.get_xlim", "matplotlib.gca.get_ylim", "numpy.mean", "numpy.mean", "matplotlib.gca.set_xlim", "matplotlib.gca.set_ylim", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.gca", "matplotlib.gca", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.gca.get_xlim", "matplotlib.gca.get_ylim", "numpy.mean", "numpy.mean", "matplotlib.gca.set_xlim", "matplotlib.gca.set_ylim", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.backends.backend_pdf.PdfPages", "matplotlib.backends.backend_pdf.PdfPages", "matplotlib.backends.backend_pdf.PdfPages", "matplotlib.backends.backend_pdf.PdfPages", "matplotlib.figure.tight_layout", "matplotlib.backends.backend_pdf.PdfPages.savefig", "matplotlib.backends.backend_pdf.PdfPages.savefig", "matplotlib.close", "matplotlib.close", "numpy.asarray", "numpy.asarray", "numpy.asarray", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "sorted", "abs", "sorted", "poses_result.keys", "poses_gt.keys"], "methods", ["None"], ["", "def", "plotPath_2D_3", "(", "self", ",", "seq", ",", "poses_gt", ",", "poses_result", ",", "plot_path_dir", ")", ":", "\n", "        ", "'''\n            plot path in XY, XZ and YZ plane\n        '''", "\n", "fontsize_", "=", "10", "\n", "plot_keys", "=", "[", "\"Ground Truth\"", ",", "\"Ours\"", "]", "\n", "start_point", "=", "[", "0", ",", "0", "]", "\n", "style_pred", "=", "'b-'", "\n", "style_gt", "=", "'r-'", "\n", "style_O", "=", "'ko'", "\n", "\n", "### get the value", "\n", "if", "poses_gt", ":", "\n", "            ", "poses_gt", "=", "[", "(", "k", ",", "poses_gt", "[", "k", "]", ")", "for", "k", "in", "sorted", "(", "poses_gt", ".", "keys", "(", ")", ")", "]", "\n", "x_gt", "=", "np", ".", "asarray", "(", "[", "pose", "[", "0", ",", "3", "]", "for", "_", ",", "pose", "in", "poses_gt", "]", ")", "\n", "y_gt", "=", "np", ".", "asarray", "(", "[", "pose", "[", "1", ",", "3", "]", "for", "_", ",", "pose", "in", "poses_gt", "]", ")", "\n", "z_gt", "=", "np", ".", "asarray", "(", "[", "pose", "[", "2", ",", "3", "]", "for", "_", ",", "pose", "in", "poses_gt", "]", ")", "\n", "", "poses_result", "=", "[", "(", "k", ",", "poses_result", "[", "k", "]", ")", "for", "k", "in", "sorted", "(", "poses_result", ".", "keys", "(", ")", ")", "]", "\n", "x_pred", "=", "np", ".", "asarray", "(", "[", "pose", "[", "0", ",", "3", "]", "for", "_", ",", "pose", "in", "poses_result", "]", ")", "\n", "y_pred", "=", "np", ".", "asarray", "(", "[", "pose", "[", "1", ",", "3", "]", "for", "_", ",", "pose", "in", "poses_result", "]", ")", "\n", "z_pred", "=", "np", ".", "asarray", "(", "[", "pose", "[", "2", ",", "3", "]", "for", "_", ",", "pose", "in", "poses_result", "]", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "6", ")", ",", "dpi", "=", "100", ")", "\n", "### plot the figure", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "1", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "if", "poses_gt", ":", "plt", ".", "plot", "(", "x_gt", ",", "z_gt", ",", "style_gt", ",", "label", "=", "plot_keys", "[", "0", "]", ")", "\n", "plt", ".", "plot", "(", "x_pred", ",", "z_pred", ",", "style_pred", ",", "label", "=", "plot_keys", "[", "1", "]", ")", "\n", "plt", ".", "plot", "(", "start_point", "[", "0", "]", ",", "start_point", "[", "1", "]", ",", "style_O", ",", "label", "=", "'Start Point'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"upper right\"", ",", "prop", "=", "{", "'size'", ":", "fontsize_", "}", ")", "\n", "plt", ".", "xlabel", "(", "'x (m)'", ",", "fontsize", "=", "fontsize_", ")", "\n", "plt", ".", "ylabel", "(", "'z (m)'", ",", "fontsize", "=", "fontsize_", ")", "\n", "### set the range of x and y", "\n", "xlim", "=", "ax", ".", "get_xlim", "(", ")", "\n", "ylim", "=", "ax", ".", "get_ylim", "(", ")", "\n", "xmean", "=", "np", ".", "mean", "(", "xlim", ")", "\n", "ymean", "=", "np", ".", "mean", "(", "ylim", ")", "\n", "plot_radius", "=", "max", "(", "[", "abs", "(", "lim", "-", "mean_", ")", "\n", "for", "lims", ",", "mean_", "in", "(", "(", "xlim", ",", "xmean", ")", ",", "\n", "(", "ylim", ",", "ymean", ")", ")", "\n", "for", "lim", "in", "lims", "]", ")", "\n", "ax", ".", "set_xlim", "(", "[", "xmean", "-", "plot_radius", ",", "xmean", "+", "plot_radius", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "ymean", "-", "plot_radius", ",", "ymean", "+", "plot_radius", "]", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "2", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "if", "poses_gt", ":", "plt", ".", "plot", "(", "x_gt", ",", "y_gt", ",", "style_gt", ",", "label", "=", "plot_keys", "[", "0", "]", ")", "\n", "plt", ".", "plot", "(", "x_pred", ",", "y_pred", ",", "style_pred", ",", "label", "=", "plot_keys", "[", "1", "]", ")", "\n", "plt", ".", "plot", "(", "start_point", "[", "0", "]", ",", "start_point", "[", "1", "]", ",", "style_O", ",", "label", "=", "'Start Point'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"upper right\"", ",", "prop", "=", "{", "'size'", ":", "fontsize_", "}", ")", "\n", "plt", ".", "xlabel", "(", "'x (m)'", ",", "fontsize", "=", "fontsize_", ")", "\n", "plt", ".", "ylabel", "(", "'y (m)'", ",", "fontsize", "=", "fontsize_", ")", "\n", "xlim", "=", "ax", ".", "get_xlim", "(", ")", "\n", "ylim", "=", "ax", ".", "get_ylim", "(", ")", "\n", "xmean", "=", "np", ".", "mean", "(", "xlim", ")", "\n", "ymean", "=", "np", ".", "mean", "(", "ylim", ")", "\n", "ax", ".", "set_xlim", "(", "[", "xmean", "-", "plot_radius", ",", "xmean", "+", "plot_radius", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "ymean", "-", "plot_radius", ",", "ymean", "+", "plot_radius", "]", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "3", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "if", "poses_gt", ":", "plt", ".", "plot", "(", "y_gt", ",", "z_gt", ",", "style_gt", ",", "label", "=", "plot_keys", "[", "0", "]", ")", "\n", "plt", ".", "plot", "(", "y_pred", ",", "z_pred", ",", "style_pred", ",", "label", "=", "plot_keys", "[", "1", "]", ")", "\n", "plt", ".", "plot", "(", "start_point", "[", "0", "]", ",", "start_point", "[", "1", "]", ",", "style_O", ",", "label", "=", "'Start Point'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"upper right\"", ",", "prop", "=", "{", "'size'", ":", "fontsize_", "}", ")", "\n", "plt", ".", "xlabel", "(", "'y (m)'", ",", "fontsize", "=", "fontsize_", ")", "\n", "plt", ".", "ylabel", "(", "'z (m)'", ",", "fontsize", "=", "fontsize_", ")", "\n", "xlim", "=", "ax", ".", "get_xlim", "(", ")", "\n", "ylim", "=", "ax", ".", "get_ylim", "(", ")", "\n", "xmean", "=", "np", ".", "mean", "(", "xlim", ")", "\n", "ymean", "=", "np", ".", "mean", "(", "ylim", ")", "\n", "ax", ".", "set_xlim", "(", "[", "xmean", "-", "plot_radius", ",", "xmean", "+", "plot_radius", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "ymean", "-", "plot_radius", ",", "ymean", "+", "plot_radius", "]", ")", "\n", "\n", "png_title", "=", "\"{}_path\"", ".", "format", "(", "seq", ")", "\n", "plt", ".", "savefig", "(", "plot_path_dir", "+", "\"/\"", "+", "png_title", "+", "\".png\"", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0.1", ")", "\n", "pdf", "=", "matplotlib", ".", "backends", ".", "backend_pdf", ".", "PdfPages", "(", "plot_path_dir", "+", "\"/\"", "+", "png_title", "+", "\".pdf\"", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "pdf", ".", "savefig", "(", "fig", ")", "\n", "# plt.show()", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.plotPath_3D": [[366, 425], ["matplotlib.figure", "matplotlib.figure", "matplotlib.figure.gca", "poses_dict.items", "matplotlib.plot", "matplotlib.plot", "plt.figure.gca.get_xlim3d", "plt.figure.gca.get_ylim3d", "plt.figure.gca.get_zlim3d", "numpy.mean", "numpy.mean", "numpy.mean", "max", "plt.figure.gca.set_xlim3d", "plt.figure.gca.set_ylim3d", "plt.figure.gca.set_zlim3d", "plt.figure.gca.legend", "plt.figure.gca.set_xlabel", "plt.figure.gca.set_ylabel", "plt.figure.gca.set_zlabel", "plt.figure.gca.view_init", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.backends.backend_pdf.PdfPages", "matplotlib.backends.backend_pdf.PdfPages", "matplotlib.backends.backend_pdf.PdfPages", "matplotlib.backends.backend_pdf.PdfPages", "matplotlib.figure.tight_layout", "matplotlib.backends.backend_pdf.PdfPages.savefig", "matplotlib.backends.backend_pdf.PdfPages.savefig", "matplotlib.close", "matplotlib.close", "sorted", "numpy.asarray", "matplotlib.plot", "matplotlib.plot", "poses_dict[].keys", "numpy.asarray.append", "abs"], "methods", ["None"], ["", "def", "plotPath_3D", "(", "self", ",", "seq", ",", "poses_gt", ",", "poses_result", ",", "plot_path_dir", ")", ":", "\n", "        ", "\"\"\"\n            plot the path in 3D space\n        \"\"\"", "\n", "from", "mpl_toolkits", ".", "mplot3d", "import", "Axes3D", "\n", "\n", "start_point", "=", "[", "[", "0", "]", ",", "[", "0", "]", ",", "[", "0", "]", "]", "\n", "fontsize_", "=", "8", "\n", "style_pred", "=", "'b-'", "\n", "style_gt", "=", "'r-'", "\n", "style_O", "=", "'ko'", "\n", "\n", "poses_dict", "=", "{", "}", "\n", "poses_dict", "[", "\"Ours\"", "]", "=", "poses_result", "\n", "if", "poses_gt", ":", "\n", "            ", "poses_dict", "[", "\"Ground Truth\"", "]", "=", "poses_gt", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "8", ")", ",", "dpi", "=", "110", ")", "\n", "ax", "=", "fig", ".", "gca", "(", "projection", "=", "'3d'", ")", "\n", "\n", "for", "key", ",", "_", "in", "poses_dict", ".", "items", "(", ")", ":", "\n", "            ", "plane_point", "=", "[", "]", "\n", "for", "frame_idx", "in", "sorted", "(", "poses_dict", "[", "key", "]", ".", "keys", "(", ")", ")", ":", "\n", "                ", "pose", "=", "poses_dict", "[", "key", "]", "[", "frame_idx", "]", "\n", "plane_point", ".", "append", "(", "[", "pose", "[", "0", ",", "3", "]", ",", "pose", "[", "2", ",", "3", "]", ",", "pose", "[", "1", ",", "3", "]", "]", ")", "\n", "", "plane_point", "=", "np", ".", "asarray", "(", "plane_point", ")", "\n", "style", "=", "style_pred", "if", "key", "==", "'Ours'", "else", "style_gt", "\n", "plt", ".", "plot", "(", "plane_point", "[", ":", ",", "0", "]", ",", "plane_point", "[", ":", ",", "1", "]", ",", "plane_point", "[", ":", ",", "2", "]", ",", "style", ",", "label", "=", "key", ")", "\n", "", "plt", ".", "plot", "(", "start_point", "[", "0", "]", ",", "start_point", "[", "1", "]", ",", "start_point", "[", "2", "]", ",", "style_O", ",", "label", "=", "'Start Point'", ")", "\n", "\n", "xlim", "=", "ax", ".", "get_xlim3d", "(", ")", "\n", "ylim", "=", "ax", ".", "get_ylim3d", "(", ")", "\n", "zlim", "=", "ax", ".", "get_zlim3d", "(", ")", "\n", "xmean", "=", "np", ".", "mean", "(", "xlim", ")", "\n", "ymean", "=", "np", ".", "mean", "(", "ylim", ")", "\n", "zmean", "=", "np", ".", "mean", "(", "zlim", ")", "\n", "plot_radius", "=", "max", "(", "[", "abs", "(", "lim", "-", "mean_", ")", "\n", "for", "lims", ",", "mean_", "in", "(", "(", "xlim", ",", "xmean", ")", ",", "\n", "(", "ylim", ",", "ymean", ")", ",", "\n", "(", "zlim", ",", "zmean", ")", ")", "\n", "for", "lim", "in", "lims", "]", ")", "\n", "ax", ".", "set_xlim3d", "(", "[", "xmean", "-", "plot_radius", ",", "xmean", "+", "plot_radius", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "ymean", "-", "plot_radius", ",", "ymean", "+", "plot_radius", "]", ")", "\n", "ax", ".", "set_zlim3d", "(", "[", "zmean", "-", "plot_radius", ",", "zmean", "+", "plot_radius", "]", ")", "\n", "\n", "ax", ".", "legend", "(", ")", "\n", "# plt.legend(loc=\"upper right\", prop={'size':fontsize_}) ", "\n", "ax", ".", "set_xlabel", "(", "'x (m)'", ",", "fontsize", "=", "fontsize_", ")", "\n", "ax", ".", "set_ylabel", "(", "'z (m)'", ",", "fontsize", "=", "fontsize_", ")", "\n", "ax", ".", "set_zlabel", "(", "'y (m)'", ",", "fontsize", "=", "fontsize_", ")", "\n", "ax", ".", "view_init", "(", "elev", "=", "20.", ",", "azim", "=", "-", "35", ")", "\n", "\n", "png_title", "=", "\"{}_path_3D\"", ".", "format", "(", "seq", ")", "\n", "plt", ".", "savefig", "(", "plot_path_dir", "+", "\"/\"", "+", "png_title", "+", "\".png\"", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0.1", ")", "\n", "pdf", "=", "matplotlib", ".", "backends", ".", "backend_pdf", ".", "PdfPages", "(", "plot_path_dir", "+", "\"/\"", "+", "png_title", "+", "\".pdf\"", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "pdf", ".", "savefig", "(", "fig", ")", "\n", "# plt.show()", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.plotError_segment": [[426, 455], ["avg_segment_errs.items", "matplotlib.figure", "matplotlib.figure", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.plot", "matplotlib.plot", "matplotlib.axis", "matplotlib.axis", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.plot", "matplotlib.plot", "matplotlib.axis", "matplotlib.axis", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.savefig", "matplotlib.savefig", "plot_x.append", "plot_y_t.append", "plot_y_r.append", "numpy.max", "numpy.max", "numpy.max", "numpy.max"], "methods", ["None"], ["", "def", "plotError_segment", "(", "self", ",", "seq", ",", "avg_segment_errs", ",", "plot_error_dir", ")", ":", "\n", "        ", "'''\n            avg_segment_errs: dict [100: err, 200: err...]\n        '''", "\n", "fontsize_", "=", "15", "\n", "plot_y_t", "=", "[", "]", "\n", "plot_y_r", "=", "[", "]", "\n", "plot_x", "=", "[", "]", "\n", "for", "idx", ",", "value", "in", "avg_segment_errs", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "==", "[", "]", ":", "\n", "                ", "continue", "\n", "", "plot_x", ".", "append", "(", "idx", ")", "\n", "plot_y_t", ".", "append", "(", "value", "[", "0", "]", "*", "100", ")", "\n", "plot_y_r", ".", "append", "(", "value", "[", "1", "]", "/", "np", ".", "pi", "*", "180", ")", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "15", ",", "6", ")", ",", "dpi", "=", "100", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plt", ".", "plot", "(", "plot_x", ",", "plot_y_t", ",", "'ks-'", ")", "\n", "plt", ".", "axis", "(", "[", "100", ",", "np", ".", "max", "(", "plot_x", ")", ",", "0", ",", "np", ".", "max", "(", "plot_y_t", ")", "*", "(", "1", "+", "0.1", ")", "]", ")", "\n", "plt", ".", "xlabel", "(", "'Path Length (m)'", ",", "fontsize", "=", "fontsize_", ")", "\n", "plt", ".", "ylabel", "(", "'Translation Error (%)'", ",", "fontsize", "=", "fontsize_", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plt", ".", "plot", "(", "plot_x", ",", "plot_y_r", ",", "'ks-'", ")", "\n", "plt", ".", "axis", "(", "[", "100", ",", "np", ".", "max", "(", "plot_x", ")", ",", "0", ",", "np", ".", "max", "(", "plot_y_r", ")", "*", "(", "1", "+", "0.1", ")", "]", ")", "\n", "plt", ".", "xlabel", "(", "'Path Length (m)'", ",", "fontsize", "=", "fontsize_", ")", "\n", "plt", ".", "ylabel", "(", "'Rotation Error (deg/m)'", ",", "fontsize", "=", "fontsize_", ")", "\n", "png_title", "=", "\"{}_error_seg\"", ".", "format", "(", "seq", ")", "\n", "plt", ".", "savefig", "(", "plot_error_dir", "+", "\"/\"", "+", "png_title", "+", "\".png\"", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0.1", ")", "\n", "# plt.show()", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.plotError_speed": [[457, 486], ["avg_speed_errs.items", "matplotlib.figure", "matplotlib.figure", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.plot", "matplotlib.plot", "matplotlib.axis", "matplotlib.axis", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.plot", "matplotlib.plot", "matplotlib.axis", "matplotlib.axis", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.savefig", "matplotlib.savefig", "plot_x.append", "plot_y_t.append", "plot_y_r.append", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.max", "numpy.max"], "methods", ["None"], ["", "def", "plotError_speed", "(", "self", ",", "seq", ",", "avg_speed_errs", ",", "plot_error_dir", ")", ":", "\n", "        ", "'''\n            avg_speed_errs: dict [s1: err, s2: err...]\n        '''", "\n", "fontsize_", "=", "15", "\n", "plot_y_t", "=", "[", "]", "\n", "plot_y_r", "=", "[", "]", "\n", "plot_x", "=", "[", "]", "\n", "for", "idx", ",", "value", "in", "avg_speed_errs", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "==", "[", "]", ":", "\n", "                ", "continue", "\n", "", "plot_x", ".", "append", "(", "idx", "*", "3.6", ")", "\n", "plot_y_t", ".", "append", "(", "value", "[", "0", "]", "*", "100", ")", "\n", "plot_y_r", ".", "append", "(", "value", "[", "1", "]", "/", "np", ".", "pi", "*", "180", ")", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "15", ",", "6", ")", ",", "dpi", "=", "100", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plt", ".", "plot", "(", "plot_x", ",", "plot_y_t", ",", "'ks-'", ")", "\n", "plt", ".", "axis", "(", "[", "np", ".", "min", "(", "plot_x", ")", ",", "np", ".", "max", "(", "plot_x", ")", ",", "0", ",", "np", ".", "max", "(", "plot_y_t", ")", "*", "(", "1", "+", "0.1", ")", "]", ")", "\n", "plt", ".", "xlabel", "(", "'Speed (km/h)'", ",", "fontsize", "=", "fontsize_", ")", "\n", "plt", ".", "ylabel", "(", "'Translation Error (%)'", ",", "fontsize", "=", "fontsize_", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plt", ".", "plot", "(", "plot_x", ",", "plot_y_r", ",", "'ks-'", ")", "\n", "plt", ".", "axis", "(", "[", "np", ".", "min", "(", "plot_x", ")", ",", "np", ".", "max", "(", "plot_x", ")", ",", "0", ",", "np", ".", "max", "(", "plot_y_r", ")", "*", "(", "1", "+", "0.1", ")", "]", ")", "\n", "plt", ".", "xlabel", "(", "'Speed (km/h)'", ",", "fontsize", "=", "fontsize_", ")", "\n", "plt", ".", "ylabel", "(", "'Rotation Error (deg/m)'", ",", "fontsize", "=", "fontsize_", ")", "\n", "png_title", "=", "\"{}_error_speed\"", ".", "format", "(", "seq", ")", "\n", "plt", ".", "savefig", "(", "plot_error_dir", "+", "\"/\"", "+", "png_title", "+", "\".png\"", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0.1", ")", "\n", "# plt.show()", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.computeSegmentErr": [[488, 513], ["segment_errs[].append", "numpy.mean", "numpy.mean", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "computeSegmentErr", "(", "self", ",", "seq_errs", ")", ":", "\n", "        ", "'''\n            This function calculates average errors for different segment.\n        '''", "\n", "segment_errs", "=", "{", "}", "\n", "avg_segment_errs", "=", "{", "}", "\n", "for", "len_", "in", "self", ".", "lengths", ":", "\n", "            ", "segment_errs", "[", "len_", "]", "=", "[", "]", "\n", "\n", "# Get errors", "\n", "", "for", "err", "in", "seq_errs", ":", "\n", "            ", "len_", "=", "err", "[", "3", "]", "\n", "t_err", "=", "err", "[", "2", "]", "\n", "r_err", "=", "err", "[", "1", "]", "\n", "segment_errs", "[", "len_", "]", ".", "append", "(", "[", "t_err", ",", "r_err", "]", ")", "\n", "\n", "# Compute average", "\n", "", "for", "len_", "in", "self", ".", "lengths", ":", "\n", "            ", "if", "segment_errs", "[", "len_", "]", "!=", "[", "]", ":", "\n", "                ", "avg_t_err", "=", "np", ".", "mean", "(", "np", ".", "asarray", "(", "segment_errs", "[", "len_", "]", ")", "[", ":", ",", "0", "]", ")", "\n", "avg_r_err", "=", "np", ".", "mean", "(", "np", ".", "asarray", "(", "segment_errs", "[", "len_", "]", ")", "[", ":", ",", "1", "]", ")", "\n", "avg_segment_errs", "[", "len_", "]", "=", "[", "avg_t_err", ",", "avg_r_err", "]", "\n", "", "else", ":", "\n", "                ", "avg_segment_errs", "[", "len_", "]", "=", "[", "]", "\n", "", "", "return", "avg_segment_errs", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.computeSpeedErr": [[514, 541], ["range", "segment_errs.keys", "segment_errs.keys", "numpy.mean", "numpy.mean", "numpy.abs", "segment_errs[].append", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "computeSpeedErr", "(", "self", ",", "seq_errs", ")", ":", "\n", "        ", "'''\n            This function calculates average errors for different speed.\n        '''", "\n", "segment_errs", "=", "{", "}", "\n", "avg_segment_errs", "=", "{", "}", "\n", "for", "s", "in", "range", "(", "2", ",", "25", ",", "2", ")", ":", "\n", "            ", "segment_errs", "[", "s", "]", "=", "[", "]", "\n", "\n", "# Get errors", "\n", "", "for", "err", "in", "seq_errs", ":", "\n", "            ", "speed", "=", "err", "[", "4", "]", "\n", "t_err", "=", "err", "[", "2", "]", "\n", "r_err", "=", "err", "[", "1", "]", "\n", "for", "key", "in", "segment_errs", ".", "keys", "(", ")", ":", "\n", "                ", "if", "np", ".", "abs", "(", "speed", "-", "key", ")", "<", "2.0", ":", "\n", "                    ", "segment_errs", "[", "key", "]", ".", "append", "(", "[", "t_err", ",", "r_err", "]", ")", "\n", "\n", "# Compute average", "\n", "", "", "", "for", "key", "in", "segment_errs", ".", "keys", "(", ")", ":", "\n", "            ", "if", "segment_errs", "[", "key", "]", "!=", "[", "]", ":", "\n", "                ", "avg_t_err", "=", "np", ".", "mean", "(", "np", ".", "asarray", "(", "segment_errs", "[", "key", "]", ")", "[", ":", ",", "0", "]", ")", "\n", "avg_r_err", "=", "np", ".", "mean", "(", "np", ".", "asarray", "(", "segment_errs", "[", "key", "]", ")", "[", ":", ",", "1", "]", ")", "\n", "avg_segment_errs", "[", "key", "]", "=", "[", "avg_t_err", ",", "avg_r_err", "]", "\n", "", "else", ":", "\n", "                ", "avg_segment_errs", "[", "key", "]", "=", "[", "]", "\n", "", "", "return", "avg_segment_errs", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.call_evo_traj": [[542, 553], ["os.path.exists", "os.system", "os.remove"], "methods", ["None"], ["", "def", "call_evo_traj", "(", "self", ",", "pred_file", ",", "save_file", ",", "gt_file", "=", "None", ",", "plot_plane", "=", "'xy'", ")", ":", "\n", "        ", "command", "=", "''", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_file", ")", ":", "os", ".", "remove", "(", "save_file", ")", "\n", "\n", "if", "gt_file", "!=", "None", ":", "\n", "            ", "command", "=", "(", "\"evo_traj kitti %s --ref=%s --plot_mode=%s --save_plot=%s\"", ")", "%", "(", "pred_file", ",", "gt_file", ",", "plot_plane", ",", "save_file", ")", "\n", "", "else", ":", "\n", "            ", "command", "=", "(", "\"evo_traj kitti %s --plot_mode=%s --save_plot=%s\"", ")", "%", "(", "pred_file", ",", "plot_plane", ",", "save_file", ")", "\n", "", "os", ".", "system", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.eval": [[554, 642], ["os.path.exists", "os.makedirs", "os.path.join", "os.path.exists", "read_kitti_poses_file", "read_kitti_poses_file", "mono.tools.trajectory.align_trajectory", "kitti_evaluation_toolkit.kittiOdomEval.loadPoseSe3", "kitti_evaluation_toolkit.kittiOdomEval.loadPoseSe3", "kitti_evaluation_toolkit.kittiOdomEval.loadPoses", "kitti_evaluation_toolkit.kittiOdomEval.loadPoses", "kitti_evaluation_toolkit.kittiOdomEval.calcSequenceErrors", "kitti_evaluation_toolkit.kittiOdomEval.saveSequenceErrors", "kitti_evaluation_toolkit.kittiOdomEval.computeSegmentErr", "kitti_evaluation_toolkit.kittiOdomEval.computeSpeedErr", "kitti_evaluation_toolkit.kittiOdomEval.computeOverallErr", "print", "print", "print", "print", "print", "kitti_evaluation_toolkit.kittiOdomEval.plot_rpy", "kitti_evaluation_toolkit.kittiOdomEval.plot_xyz", "kitti_evaluation_toolkit.kittiOdomEval.plotPath_3D", "kitti_evaluation_toolkit.kittiOdomEval.plotPath_2D_3", "kitti_evaluation_toolkit.kittiOdomEval.plotError_segment", "kitti_evaluation_toolkit.kittiOdomEval.plotError_speed", "matplotlib.close", "matplotlib.close", "os.path.exists", "os.makedirs", "kitti_evaluation_toolkit.kittiOdomEval.calcSequenceErrors", "print", "print", "print", "kitti_evaluation_toolkit.kittiOdomEval.plot_rpy", "kitti_evaluation_toolkit.kittiOdomEval.plot_xyz", "kitti_evaluation_toolkit.kittiOdomEval.plotPath_3D", "kitti_evaluation_toolkit.kittiOdomEval.plotPath_2D_3", "open", "f.writelines", "f.writelines", "str", "str"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.read_kitti_poses_file", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.read_kitti_poses_file", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.align_trajectory", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.loadPoseSe3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.loadPoseSe3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.loadPoses", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.loadPoses", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.calcSequenceErrors", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.saveSequenceErrors", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.computeSegmentErr", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.computeSpeedErr", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.computeOverallErr", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.plot_rpy", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.plot_xyz", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.plotPath_3D", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.plotPath_2D_3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.plotError_segment", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.plotError_speed", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.calcSequenceErrors", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.plot_rpy", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.plot_xyz", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.plotPath_3D", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.plotPath_2D_3"], ["", "def", "eval", "(", "self", ",", "toCameraCoord", ")", ":", "\n", "        ", "'''\n            to_camera_coord: whether the predicted pose needs to be convert to camera coordinate\n        '''", "\n", "eval_dir", "=", "self", ".", "result_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "eval_dir", ")", ":", "os", ".", "makedirs", "(", "eval_dir", ")", "\n", "\n", "total_err", "=", "[", "]", "\n", "ave_errs", "=", "{", "}", "\n", "for", "seq", "in", "self", ".", "eval_seqs", ":", "\n", "            ", "eva_seq_dir", "=", "os", ".", "path", ".", "join", "(", "eval_dir", ",", "'{}_eval'", ".", "format", "(", "seq", ")", ")", "\n", "pred_file_name", "=", "self", ".", "result_dir", "+", "'/{}_pred.txt'", ".", "format", "(", "seq", ")", "\n", "# pred_file_name = self.result_dir + '/{}.txt'.format(seq)", "\n", "gt_file_name", "=", "self", ".", "gt_dir", "+", "'/{}.txt'", ".", "format", "(", "seq", ")", "\n", "save_file_name", "=", "eva_seq_dir", "+", "'/{}.pdf'", ".", "format", "(", "seq", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "pred_file_name", ")", ",", "\"File path error: {}\"", ".", "format", "(", "pred_file_name", ")", "\n", "\n", "tra_pred", "=", "read_kitti_poses_file", "(", "pred_file_name", ")", "\n", "tra_gt", "=", "read_kitti_poses_file", "(", "gt_file_name", ")", "\n", "\n", "tra_corrected", "=", "align_trajectory", "(", "tra_pred", ",", "tra_gt", ",", "correct_only_scale", "=", "True", ")", "\n", "\n", "\n", "poses_result", "=", "self", ".", "loadPoseSe3", "(", "tra_corrected", ")", "\n", "\n", "poses_gt", "=", "self", ".", "loadPoseSe3", "(", "tra_gt", ")", "\n", "\n", "\n", "# ----------------------------------------------------------------------", "\n", "# load pose", "\n", "# if seq in self.seqs_with_gt:", "\n", "#     self.call_evo_traj(pred_file_name, save_file_name, gt_file=gt_file_name)", "\n", "# else:", "\n", "#     self.call_evo_traj(pred_file_name, save_file_name, gt_file=None)", "\n", "#     continue", "\n", "\n", "poses_result_back", "=", "self", ".", "loadPoses", "(", "pred_file_name", ",", "toCameraCoord", "=", "toCameraCoord", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "eva_seq_dir", ")", ":", "os", ".", "makedirs", "(", "eva_seq_dir", ")", "\n", "\n", "if", "seq", "not", "in", "self", ".", "seqs_with_gt", ":", "\n", "                ", "self", ".", "calcSequenceErrors", "(", "poses_result", ",", "poses_result", ")", "\n", "print", "(", "\"\\nSequence: \"", "+", "str", "(", "seq", ")", ")", "\n", "print", "(", "'Distance (m): %d'", "%", "self", ".", "distance", ")", "\n", "print", "(", "'Max speed (km/h): %d'", "%", "(", "self", ".", "max_speed", "*", "3.6", ")", ")", "\n", "self", ".", "plot_rpy", "(", "seq", ",", "None", ",", "poses_result", ",", "eva_seq_dir", ")", "\n", "self", ".", "plot_xyz", "(", "seq", ",", "None", ",", "poses_result", ",", "eva_seq_dir", ")", "\n", "self", ".", "plotPath_3D", "(", "seq", ",", "None", ",", "poses_result", ",", "eva_seq_dir", ")", "\n", "self", ".", "plotPath_2D_3", "(", "seq", ",", "None", ",", "poses_result", ",", "eva_seq_dir", ")", "\n", "continue", "\n", "\n", "", "poses_gt_back", "=", "self", ".", "loadPoses", "(", "gt_file_name", ",", "toCameraCoord", "=", "False", ")", "\n", "\n", "# ----------------------------------------------------------------------", "\n", "# compute sequence errors", "\n", "seq_err", "=", "self", ".", "calcSequenceErrors", "(", "poses_gt", ",", "poses_result", ")", "\n", "self", ".", "saveSequenceErrors", "(", "seq_err", ",", "eva_seq_dir", "+", "'/{}_error.txt'", ".", "format", "(", "seq", ")", ")", "\n", "\n", "total_err", "+=", "seq_err", "\n", "\n", "# ----------------------------------------------------------------------", "\n", "# Compute segment errors", "\n", "avg_segment_errs", "=", "self", ".", "computeSegmentErr", "(", "seq_err", ")", "\n", "avg_speed_errs", "=", "self", ".", "computeSpeedErr", "(", "seq_err", ")", "\n", "\n", "# ----------------------------------------------------------------------", "\n", "# compute overall error", "\n", "ave_t_err", ",", "ave_r_err", "=", "self", ".", "computeOverallErr", "(", "seq_err", ")", "\n", "print", "(", "\"\\nSequence: \"", "+", "str", "(", "seq", ")", ")", "\n", "print", "(", "'Distance (m): %d'", "%", "self", ".", "distance", ")", "\n", "print", "(", "'Max speed (km/h): %d'", "%", "(", "self", ".", "max_speed", "*", "3.6", ")", ")", "\n", "print", "(", "\"Average sequence translational RMSE (%):   {0:.4f}\"", ".", "format", "(", "ave_t_err", "*", "100", ")", ")", "\n", "print", "(", "\"Average sequence rotational error (deg/m): {0:.4f}\\n\"", ".", "format", "(", "ave_r_err", "/", "np", ".", "pi", "*", "180", ")", ")", "\n", "with", "open", "(", "eva_seq_dir", "+", "'/%s_stats.txt'", "%", "seq", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "writelines", "(", "'Average sequence translation RMSE (%):    {0:.4f}\\n'", ".", "format", "(", "ave_t_err", "*", "100", ")", ")", "\n", "f", ".", "writelines", "(", "'Average sequence rotation error (deg/m):  {0:.4f}'", ".", "format", "(", "ave_r_err", "/", "np", ".", "pi", "*", "180", ")", ")", "\n", "", "ave_errs", "[", "seq", "]", "=", "[", "ave_t_err", ",", "ave_r_err", "]", "\n", "\n", "# ----------------------------------------------------------------------", "\n", "# Ploting", "\n", "self", ".", "plot_rpy", "(", "seq", ",", "poses_gt", ",", "poses_result", ",", "eva_seq_dir", ")", "\n", "self", ".", "plot_xyz", "(", "seq", ",", "poses_gt", ",", "poses_result", ",", "eva_seq_dir", ")", "\n", "self", ".", "plotPath_3D", "(", "seq", ",", "poses_gt", ",", "poses_result", ",", "eva_seq_dir", ")", "\n", "self", ".", "plotPath_2D_3", "(", "seq", ",", "poses_gt", ",", "poses_result", ",", "eva_seq_dir", ")", "\n", "self", ".", "plotError_segment", "(", "seq", ",", "avg_segment_errs", ",", "eva_seq_dir", ")", "\n", "self", ".", "plotError_speed", "(", "seq", ",", "avg_speed_errs", ",", "eva_seq_dir", ")", "\n", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PosePath3D.__init__": [[36, 55], ["print", "numpy.array", "numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "positions_xyz", "=", "None", ",", "orientations_quat_wxyz", "=", "None", ",", "\n", "poses_se3", "=", "None", ",", "meta", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param positions_xyz: nx3 list of x,y,z positions\n        :param orientations_quat_wxyz: nx4 list of quaternions (w,x,y,z format)\n        :param poses_se3: list of SE(3) poses\n        :param meta: optional metadata\n        \"\"\"", "\n", "if", "(", "positions_xyz", "is", "None", "\n", "or", "orientations_quat_wxyz", "is", "None", ")", "and", "poses_se3", "is", "None", ":", "\n", "            ", "print", "(", "\"must provide at least positions_xyz \"", "\n", "\"& orientations_quat_wxyz or poses_se3\"", ")", "\n", "", "if", "positions_xyz", "is", "not", "None", ":", "\n", "            ", "self", ".", "_positions_xyz", "=", "np", ".", "array", "(", "positions_xyz", ")", "\n", "", "if", "orientations_quat_wxyz", "is", "not", "None", ":", "\n", "            ", "self", ".", "_orientations_quat_wxyz", "=", "np", ".", "array", "(", "orientations_quat_wxyz", ")", "\n", "", "if", "poses_se3", "is", "not", "None", ":", "\n", "            ", "self", ".", "_poses_se3", "=", "poses_se3", "\n", "", "self", ".", "meta", "=", "{", "}", "if", "meta", "is", "None", "else", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PosePath3D.__str__": [[56, 59], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"{} poses, {:.3f}m path length\"", ".", "format", "(", "self", ".", "num_poses", ",", "\n", "self", ".", "path_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PosePath3D.__eq__": [[60, 74], ["all", "numpy.allclose", "numpy.allclose", "type", "type", "numpy.allclose", "zip"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "type", "(", "other", ")", "!=", "type", "(", "self", ")", ":", "\n", "            ", "return", "False", "\n", "", "if", "not", "self", ".", "num_poses", "==", "other", ".", "num_poses", ":", "\n", "            ", "return", "False", "\n", "", "equal", "=", "True", "\n", "equal", "&=", "all", "(", "[", "\n", "np", ".", "allclose", "(", "p1", ",", "p2", ")", "\n", "for", "p1", ",", "p2", "in", "zip", "(", "self", ".", "poses_se3", ",", "other", ".", "poses_se3", ")", "\n", "]", ")", "\n", "equal", "&=", "np", ".", "allclose", "(", "self", ".", "orientations_quat_wxyz", ",", "\n", "other", ".", "orientations_quat_wxyz", ")", "\n", "equal", "&=", "np", ".", "allclose", "(", "self", ".", "positions_xyz", ",", "other", ".", "positions_xyz", ")", "\n", "return", "equal", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PosePath3D.__ne__": [[75, 77], ["None"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "not", "self", "==", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PosePath3D.positions_xyz": [[78, 84], ["hasattr", "hasattr", "numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "positions_xyz", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"_positions_xyz\"", ")", ":", "\n", "            ", "assert", "hasattr", "(", "self", ",", "\"_poses_se3\"", ")", "\n", "self", ".", "_positions_xyz", "=", "np", ".", "array", "(", "[", "p", "[", ":", "3", ",", "3", "]", "for", "p", "in", "self", ".", "_poses_se3", "]", ")", "\n", "", "return", "self", ".", "_positions_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PosePath3D.distances": [[85, 88], ["mono.accumulated_distances", "mono.accumulated_distances", "mono.accumulated_distances"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.geometry.accumulated_distances", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.geometry.accumulated_distances", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.geometry.accumulated_distances"], ["", "@", "property", "\n", "def", "distances", "(", "self", ")", ":", "\n", "        ", "return", "geometry", ".", "accumulated_distances", "(", "self", ".", "positions_xyz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PosePath3D.orientations_quat_wxyz": [[89, 98], ["hasattr", "hasattr", "numpy.array", "mono.quaternion_from_matrix", "mono.quaternion_from_matrix", "mono.quaternion_from_matrix"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_from_matrix", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_from_matrix", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_from_matrix"], ["", "@", "property", "\n", "def", "orientations_quat_wxyz", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"_orientations_quat_wxyz\"", ")", ":", "\n", "            ", "assert", "hasattr", "(", "self", ",", "\"_poses_se3\"", ")", "\n", "self", ".", "_orientations_quat_wxyz", "=", "np", ".", "array", "(", "\n", "[", "tr", ".", "quaternion_from_matrix", "(", "p", ")", "\n", "for", "p", "in", "self", ".", "_poses_se3", "]", ")", "\n", "", "return", "self", ".", "_orientations_quat_wxyz", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PosePath3D.get_orientations_euler": [[99, 107], ["hasattr", "numpy.array", "hasattr", "numpy.array", "mono.euler_from_matrix", "mono.euler_from_matrix", "mono.euler_from_matrix", "mono.euler_from_quaternion", "mono.euler_from_quaternion", "mono.euler_from_quaternion"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.euler_from_matrix", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.euler_from_matrix", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.euler_from_matrix", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.euler_from_quaternion", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.euler_from_quaternion", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.euler_from_quaternion"], ["", "def", "get_orientations_euler", "(", "self", ",", "axes", "=", "\"sxyz\"", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"_poses_se3\"", ")", ":", "\n", "            ", "return", "np", ".", "array", "(", "\n", "[", "tr", ".", "euler_from_matrix", "(", "p", ",", "axes", "=", "axes", ")", "for", "p", "in", "self", ".", "_poses_se3", "]", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "\"_orientations_quat_wxyz\"", ")", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "\n", "tr", ".", "euler_from_quaternion", "(", "q", ",", "axes", "=", "axes", ")", "\n", "for", "q", "in", "self", ".", "_orientations_quat_wxyz", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PosePath3D.poses_se3": [[109, 118], ["hasattr", "hasattr", "hasattr", "trajectory.xyz_quat_wxyz_to_se3_poses"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.xyz_quat_wxyz_to_se3_poses"], ["", "", "@", "property", "\n", "def", "poses_se3", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"_poses_se3\"", ")", ":", "\n", "            ", "assert", "hasattr", "(", "self", ",", "\"_positions_xyz\"", ")", "\n", "assert", "hasattr", "(", "self", ",", "\"_orientations_quat_wxyz\"", ")", "\n", "self", ".", "_poses_se3", "=", "xyz_quat_wxyz_to_se3_poses", "(", "self", ".", "positions_xyz", ",", "\n", "self", ".", "orientations_quat_wxyz", ")", "\n", "", "return", "self", ".", "_poses_se3", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PosePath3D.num_poses": [[119, 125], ["hasattr", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_poses", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"_poses_se3\"", ")", ":", "\n", "            ", "return", "len", "(", "self", ".", "_poses_se3", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "positions_xyz", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PosePath3D.path_length": [[126, 133], ["float", "mono.arc_len", "mono.arc_len", "mono.arc_len"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.geometry.arc_len", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.geometry.arc_len", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.geometry.arc_len"], ["", "", "@", "property", "\n", "def", "path_length", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        calculates the path length (arc-length)\n        :return: path length in meters\n        \"\"\"", "\n", "return", "float", "(", "geometry", ".", "arc_len", "(", "self", ".", "positions_xyz", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PosePath3D.transform": [[134, 161], ["trajectory.se3_poses_to_xyz_quat_wxyz", "mono.is_se3", "mono.is_se3", "mono.is_se3", "print", "numpy.dot", "numpy.arange", "zip", "mono.relative_se3().dot", "mono.relative_se3().dot", "mono.relative_se3().dot", "trajectory.PosePath3D._poses_se3.append", "numpy.dot", "zip", "trajectory.PosePath3D._poses_se3[].dot", "mono.relative_se3", "mono.relative_se3", "mono.relative_se3"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.se3_poses_to_xyz_quat_wxyz", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.is_se3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.is_se3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.is_se3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.relative_se3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.relative_se3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.relative_se3"], ["", "def", "transform", "(", "self", ",", "t", ",", "right_mul", "=", "False", ",", "propagate", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        apply a left or right multiplicative SE(3) transformation to the whole path\n        :param t: a valid SE(3) matrix\n        :param right_mul: whether to apply it right-multiplicative or not\n        :param propagate: whether to propagate drift with RHS transformations\n        \"\"\"", "\n", "if", "not", "lie", ".", "is_se3", "(", "t", ")", ":", "\n", "            ", "print", "(", "\"transformation is not a valid SE(3) matrix\"", ")", "\n", "\n", "", "if", "right_mul", "and", "not", "propagate", ":", "\n", "# Transform each pose individually.", "\n", "            ", "self", ".", "_poses_se3", "=", "[", "np", ".", "dot", "(", "p", ",", "t", ")", "for", "p", "in", "self", ".", "poses_se3", "]", "\n", "", "elif", "right_mul", "and", "propagate", ":", "\n", "# Transform each pose and propagate resulting drift to the next.", "\n", "            ", "ids", "=", "np", ".", "arange", "(", "0", ",", "self", ".", "num_poses", ",", "1", ")", "\n", "rel_poses", "=", "[", "\n", "lie", ".", "relative_se3", "(", "self", ".", "poses_se3", "[", "i", "]", ",", "self", ".", "poses_se3", "[", "j", "]", ")", ".", "dot", "(", "t", ")", "\n", "for", "i", ",", "j", "in", "zip", "(", "ids", ",", "ids", "[", "1", ":", "]", ")", "\n", "]", "\n", "self", ".", "_poses_se3", "=", "[", "self", ".", "poses_se3", "[", "0", "]", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "ids", "[", ":", "-", "1", "]", ",", "ids", ")", ":", "\n", "                ", "self", ".", "_poses_se3", ".", "append", "(", "self", ".", "_poses_se3", "[", "j", "]", ".", "dot", "(", "rel_poses", "[", "i", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_poses_se3", "=", "[", "np", ".", "dot", "(", "t", ",", "p", ")", "for", "p", "in", "self", ".", "poses_se3", "]", "\n", "", "self", ".", "_positions_xyz", ",", "self", ".", "_orientations_quat_wxyz", "=", "se3_poses_to_xyz_quat_wxyz", "(", "self", ".", "poses_se3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PosePath3D.scale": [[162, 173], ["hasattr", "hasattr", "mono.se3", "mono.se3", "mono.se3"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.se3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.se3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.se3"], ["", "def", "scale", "(", "self", ",", "s", ")", ":", "\n", "        ", "\"\"\"\n        apply a scaling to the whole path\n        :param s: scale factor\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "\"_poses_se3\"", ")", ":", "\n", "            ", "self", ".", "_poses_se3", "=", "[", "\n", "lie", ".", "se3", "(", "p", "[", ":", "3", ",", ":", "3", "]", ",", "s", "*", "p", "[", ":", "3", ",", "3", "]", ")", "for", "p", "in", "self", ".", "_poses_se3", "\n", "]", "\n", "", "if", "hasattr", "(", "self", ",", "\"_positions_xyz\"", ")", ":", "\n", "            ", "self", ".", "_positions_xyz", "=", "s", "*", "self", ".", "_positions_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PosePath3D.reduce_to_ids": [[174, 185], ["hasattr", "hasattr", "hasattr"], "methods", ["None"], ["", "", "def", "reduce_to_ids", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"\n        reduce the elements to the ones specified in ids\n        :param ids: list of integer indices\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "\"_positions_xyz\"", ")", ":", "\n", "            ", "self", ".", "_positions_xyz", "=", "self", ".", "_positions_xyz", "[", "ids", "]", "\n", "", "if", "hasattr", "(", "self", ",", "\"_orientations_quat_wxyz\"", ")", ":", "\n", "            ", "self", ".", "_orientations_quat_wxyz", "=", "self", ".", "_orientations_quat_wxyz", "[", "ids", "]", "\n", "", "if", "hasattr", "(", "self", ",", "\"_poses_se3\"", ")", ":", "\n", "            ", "self", ".", "_poses_se3", "=", "[", "self", ".", "_poses_se3", "[", "idx", "]", "for", "idx", "in", "ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PosePath3D.check": [[186, 207], ["all", "numpy.linalg.norm", "numpy.allclose", "len", "numpy.ones", "mono.is_se3", "mono.is_se3", "mono.is_se3"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.is_se3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.is_se3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.is_se3"], ["", "", "def", "check", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        checks if the data is valid\n        :return: True/False, dictionary with some detailed infos\n        \"\"\"", "\n", "same_len", "=", "self", ".", "positions_xyz", ".", "shape", "[", "0", "]", "==", "self", ".", "orientations_quat_wxyz", ".", "shape", "[", "0", "]", "==", "len", "(", "self", ".", "poses_se3", ")", "\n", "se3_valid", "=", "all", "(", "[", "lie", ".", "is_se3", "(", "p", ")", "for", "p", "in", "self", ".", "poses_se3", "]", ")", "\n", "norms", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "orientations_quat_wxyz", ",", "axis", "=", "1", ")", "\n", "quat_normed", "=", "np", ".", "allclose", "(", "norms", ",", "np", ".", "ones", "(", "norms", ".", "shape", ")", ")", "\n", "valid", "=", "same_len", "and", "se3_valid", "and", "quat_normed", "\n", "details", "=", "{", "\n", "\"array shapes\"", ":", "\"ok\"", "\n", "if", "same_len", "else", "\"invalid (lists must have same length)\"", ",", "\n", "\"SE(3) conform\"", ":", "\"yes\"", "\n", "if", "se3_valid", "else", "\"no (poses are not valid SE(3) matrices)\"", ",", "\n", "\"quaternions\"", ":", "\"ok\"", "\n", "if", "quat_normed", "else", "\"invalid (must be unit quaternions)\"", "\n", "}", "\n", "return", "valid", ",", "details", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PosePath3D.get_infos": [[208, 217], ["None"], "methods", ["None"], ["", "def", "get_infos", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: dictionary with some infos about the path\n        \"\"\"", "\n", "return", "{", "\n", "\"nr. of poses\"", ":", "self", ".", "num_poses", ",", "\n", "\"path length (m)\"", ":", "self", ".", "path_length", ",", "\n", "\"pos_start (m)\"", ":", "self", ".", "positions_xyz", "[", "0", "]", ",", "\n", "\"pos_end (m)\"", ":", "self", ".", "positions_xyz", "[", "-", "1", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PosePath3D.get_statistics": [[219, 221], ["None"], "methods", ["None"], ["", "def", "get_statistics", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "# no idea yet", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PoseTrajectory3D.__init__": [[228, 239], ["trajectory.PosePath3D.__init__", "numpy.array", "print"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "positions_xyz", "=", "None", ",", "orientations_quat_wxyz", "=", "None", ",", "\n", "timestamps", "=", "None", ",", "poses_se3", "=", "None", ",", "meta", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param timestamps: optional nx1 list of timestamps\n        \"\"\"", "\n", "super", "(", "PoseTrajectory3D", ",", "self", ")", ".", "__init__", "(", "\n", "positions_xyz", ",", "orientations_quat_wxyz", ",", "poses_se3", ",", "meta", ")", "\n", "# this is a bit ugly...", "\n", "if", "timestamps", "is", "None", ":", "\n", "            ", "print", "(", "\"no timestamps provided\"", ")", "\n", "", "self", ".", "timestamps", "=", "np", ".", "array", "(", "timestamps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PoseTrajectory3D.__str__": [[240, 244], ["trajectory.PosePath3D.__str__"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PoseTrajectory3D.__str__"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "super", "(", "PoseTrajectory3D", ",", "self", ")", ".", "__str__", "(", ")", "\n", "return", "s", "+", "\", {:.3f}s duration\"", ".", "format", "(", "self", ".", "timestamps", "[", "-", "1", "]", "-", "\n", "self", ".", "timestamps", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PoseTrajectory3D.__eq__": [[245, 253], ["trajectory.PosePath3D.__eq__", "numpy.allclose", "type", "type"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PoseTrajectory3D.__eq__"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "type", "(", "other", ")", "!=", "type", "(", "self", ")", ":", "\n", "            ", "return", "False", "\n", "", "if", "not", "self", ".", "num_poses", "==", "other", ".", "num_poses", ":", "\n", "            ", "return", "False", "\n", "", "equal", "=", "super", "(", "PoseTrajectory3D", ",", "self", ")", ".", "__eq__", "(", "other", ")", "\n", "equal", "&=", "np", ".", "allclose", "(", "self", ".", "timestamps", ",", "other", ".", "timestamps", ")", "\n", "return", "equal", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PoseTrajectory3D.__ne__": [[254, 256], ["None"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "not", "self", "==", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PoseTrajectory3D.reduce_to_ids": [[257, 260], ["trajectory.PosePath3D.reduce_to_ids"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PoseTrajectory3D.reduce_to_ids"], ["", "def", "reduce_to_ids", "(", "self", ",", "ids", ")", ":", "\n", "        ", "super", "(", "PoseTrajectory3D", ",", "self", ")", ".", "reduce_to_ids", "(", "ids", ")", "\n", "self", ".", "timestamps", "=", "self", ".", "timestamps", "[", "ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PoseTrajectory3D.check": [[261, 276], ["trajectory.PosePath3D.check", "numpy.alltrue", "len", "len", "len", "numpy.sort", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PoseTrajectory3D.check"], ["", "def", "check", "(", "self", ")", ":", "\n", "        ", "valid", ",", "details", "=", "super", "(", "PoseTrajectory3D", ",", "self", ")", ".", "check", "(", ")", "\n", "len_stamps_valid", "=", "(", "len", "(", "self", ".", "timestamps", ")", "==", "len", "(", "self", ".", "positions_xyz", ")", ")", "\n", "valid", "&=", "len_stamps_valid", "\n", "details", "[", "\"nr. of stamps\"", "]", "=", "\"ok\"", "if", "len_stamps_valid", "else", "\"wrong\"", "\n", "stamps_ascending", "=", "np", ".", "alltrue", "(", "\n", "np", ".", "sort", "(", "self", ".", "timestamps", ")", "==", "self", ".", "timestamps", ")", "\n", "stamps_ascending", "&=", "np", ".", "unique", "(", "self", ".", "timestamps", ")", ".", "size", "==", "len", "(", "\n", "self", ".", "timestamps", ")", "\n", "valid", "&=", "stamps_ascending", "\n", "if", "stamps_ascending", ":", "\n", "            ", "details", "[", "\"timestamps\"", "]", "=", "\"ok\"", "\n", "", "else", ":", "\n", "            ", "details", "[", "\"timestamps\"", "]", "=", "\"wrong, not ascending or duplicates\"", "\n", "", "return", "valid", ",", "details", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PoseTrajectory3D.get_infos": [[277, 288], ["trajectory.PosePath3D.get_infos"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PoseTrajectory3D.get_infos"], ["", "def", "get_infos", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: dictionary with some infos about the trajectory\n        \"\"\"", "\n", "\n", "infos", "=", "super", "(", "PoseTrajectory3D", ",", "self", ")", ".", "get_infos", "(", ")", "\n", "infos", "[", "\"duration (s)\"", "]", "=", "self", ".", "timestamps", "[", "-", "1", "]", "-", "self", ".", "timestamps", "[", "0", "]", "\n", "infos", "[", "\"t_start (s)\"", "]", "=", "self", ".", "timestamps", "[", "0", "]", "\n", "infos", "[", "\"t_end (s)\"", "]", "=", "self", ".", "timestamps", "[", "-", "1", "]", "\n", "\n", "return", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PoseTrajectory3D.get_statistics": [[289, 311], ["trajectory.PosePath3D.get_statistics", "max", "min", "numpy.mean", "super().get_statistics.update", "trajectory.calc_speed", "range", "len"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PoseTrajectory3D.get_statistics", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.calc_speed"], ["", "def", "get_statistics", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: dictionary with some statistics of the trajectory\n        \"\"\"", "\n", "stats", "=", "super", "(", "PoseTrajectory3D", ",", "self", ")", ".", "get_statistics", "(", ")", "\n", "speeds", "=", "[", "\n", "calc_speed", "(", "self", ".", "positions_xyz", "[", "i", "]", ",", "self", ".", "positions_xyz", "[", "i", "+", "1", "]", ",", "\n", "self", ".", "timestamps", "[", "i", "]", ",", "self", ".", "timestamps", "[", "i", "+", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "positions_xyz", ")", "-", "1", ")", "\n", "]", "\n", "vmax", "=", "max", "(", "speeds", ")", "\n", "vmin", "=", "min", "(", "speeds", ")", "\n", "vmean", "=", "np", ".", "mean", "(", "speeds", ")", "\n", "stats", ".", "update", "(", "{", "\n", "\"v_max (m/s)\"", ":", "vmax", ",", "\n", "\"v_min (m/s)\"", ":", "vmin", ",", "\n", "\"v_avg (m/s)\"", ":", "vmean", ",", "\n", "\"v_max (km/h)\"", ":", "vmax", "*", "3.6", ",", "\n", "\"v_min (km/h)\"", ":", "vmin", "*", "3.6", ",", "\n", "\"v_avg (km/h)\"", ":", "vmean", "*", "3.6", "\n", "}", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.calc_speed": [[317, 329], ["print", "numpy.linalg.norm", "str", "str"], "function", ["None"], ["", "def", "calc_speed", "(", "xyz_1", ",", "xyz_2", ",", "t_1", ",", "t_2", ")", ":", "\n", "    ", "\"\"\"\n    :param xyz_1: position at timestamp 1\n    :param xyz_2: position at timestamp 2\n    :param t_1: timestamp 1\n    :param t_2: timestamp 2\n    :return: speed in m/s\n    \"\"\"", "\n", "if", "(", "t_2", "-", "t_1", ")", "<=", "0", ":", "\n", "        ", "print", "(", "\"bad timestamps: \"", "+", "str", "(", "t_1", ")", "+", "\" & \"", "+", "\n", "str", "(", "t_2", ")", ")", "\n", "", "return", "np", ".", "linalg", ".", "norm", "(", "xyz_2", "-", "xyz_1", ")", "/", "(", "t_2", "-", "t_1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.calc_angular_speed": [[331, 351], ["print", "mono.so3_log", "mono.so3_log", "str", "mono.so3_log", "mono.so3_log", "str"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.so3_log", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.so3_log", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.so3_log", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.so3_log"], ["", "def", "calc_angular_speed", "(", "p_1", ",", "p_2", ",", "t_1", ",", "t_2", ",", "degrees", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :param p_1: pose at timestamp 1\n    :param p_2: pose at timestamp 2\n    :param t_1: timestamp 1\n    :param t_2: timestamp 2\n    :param degrees: set to True to return deg/s\n    :return: speed in rad/s\n    \"\"\"", "\n", "if", "(", "t_2", "-", "t_1", ")", "<=", "0", ":", "\n", "        ", "print", "(", "\"bad timestamps: \"", "+", "str", "(", "t_1", ")", "+", "\" & \"", "+", "\n", "str", "(", "t_2", ")", ")", "\n", "", "if", "degrees", ":", "\n", "        ", "angle_1", "=", "lie", ".", "so3_log", "(", "p_1", "[", ":", "3", ",", ":", "3", "]", ")", "*", "180", "/", "np", ".", "pi", "\n", "angle_2", "=", "lie", ".", "so3_log", "(", "p_2", "[", ":", "3", ",", ":", "3", "]", ")", "*", "180", "/", "np", ".", "pi", "\n", "", "else", ":", "\n", "        ", "angle_1", "=", "lie", ".", "so3_log", "(", "p_1", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "angle_2", "=", "lie", ".", "so3_log", "(", "p_2", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "\n", "", "return", "(", "angle_2", "-", "angle_1", ")", "/", "(", "t_2", "-", "t_1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.xyz_quat_wxyz_to_se3_poses": [[353, 359], ["mono.se3", "mono.so3_from_se3", "zip", "mono.quaternion_matrix"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.se3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.so3_from_se3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_matrix"], ["", "def", "xyz_quat_wxyz_to_se3_poses", "(", "xyz", ",", "quat", ")", ":", "\n", "    ", "poses", "=", "[", "\n", "lie", ".", "se3", "(", "lie", ".", "so3_from_se3", "(", "tr", ".", "quaternion_matrix", "(", "quat", ")", ")", ",", "xyz", ")", "\n", "for", "quat", ",", "xyz", "in", "zip", "(", "quat", ",", "xyz", ")", "\n", "]", "\n", "return", "poses", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.se3_poses_to_xyz_quat_wxyz": [[361, 365], ["numpy.array", "numpy.array", "mono.quaternion_from_matrix"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_from_matrix"], ["", "def", "se3_poses_to_xyz_quat_wxyz", "(", "poses", ")", ":", "\n", "    ", "xyz", "=", "np", ".", "array", "(", "[", "pose", "[", ":", "3", ",", "3", "]", "for", "pose", "in", "poses", "]", ")", "\n", "quat_wxyz", "=", "np", ".", "array", "(", "[", "tr", ".", "quaternion_from_matrix", "(", "pose", ")", "for", "pose", "in", "poses", "]", ")", "\n", "return", "xyz", ",", "quat_wxyz", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.align_trajectory": [[367, 413], ["copy.deepcopy", "logger.debug", "logger.debug", "logger.debug", "mono.umeyama_alignment", "mono.umeyama_alignment", "logger.debug", "copy.deepcopy.scale", "copy.deepcopy.scale", "copy.deepcopy.transform", "copy.deepcopy.transform", "mono.se3", "mono.se3"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.geometry.umeyama_alignment", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.geometry.umeyama_alignment", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PosePath3D.scale", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.PosePath3D.scale", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.scripts.infer.transform", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.scripts.infer.transform", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.se3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.se3"], ["", "def", "align_trajectory", "(", "traj", ",", "traj_ref", ",", "correct_scale", "=", "False", ",", "\n", "correct_only_scale", "=", "False", ",", "n", "=", "-", "1", ",", "return_parameters", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    align a trajectory to a reference using Umeyama alignment\n    :param traj: the trajectory to align\n    :param traj_ref: reference trajectory\n    :param correct_scale: set to True to adjust also the scale\n    :param correct_only_scale: set to True to correct the scale, but not the pose\n    :param n: the number of poses to use, counted from the start (default: all)\n    :param return_parameters: also return result parameters of Umeyama's method\n    :return: the aligned trajectory\n    If return_parameters is set, the rotation matrix, translation vector and\n    scaling parameter of Umeyama's method are also returned.\n    \"\"\"", "\n", "# otherwise np arrays will be references and mess up stuff", "\n", "traj_aligned", "=", "copy", ".", "deepcopy", "(", "traj", ")", "\n", "with_scale", "=", "correct_scale", "or", "correct_only_scale", "\n", "if", "correct_only_scale", ":", "\n", "        ", "logger", ".", "debug", "(", "\"Correcting scale...\"", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "debug", "(", "\"Aligning using Umeyama's method...\"", "+", "\n", "(", "\" (with scale correction)\"", "if", "with_scale", "else", "\"\"", ")", ")", "\n", "", "if", "n", "==", "-", "1", ":", "\n", "        ", "r_a", ",", "t_a", ",", "s", "=", "geometry", ".", "umeyama_alignment", "(", "\n", "traj_aligned", ".", "positions_xyz", ".", "T", ",", "traj_ref", ".", "positions_xyz", ".", "T", ",", "with_scale", ")", "\n", "", "else", ":", "\n", "        ", "r_a", ",", "t_a", ",", "s", "=", "geometry", ".", "umeyama_alignment", "(", "\n", "traj_aligned", ".", "positions_xyz", "[", ":", "n", ",", ":", "]", ".", "T", ",", "\n", "traj_ref", ".", "positions_xyz", "[", ":", "n", ",", ":", "]", ".", "T", ",", "with_scale", ")", "\n", "", "if", "not", "correct_only_scale", ":", "\n", "        ", "logger", ".", "debug", "(", "\"Rotation of alignment:\\n{}\"", "\n", "\"\\nTranslation of alignment:\\n{}\"", ".", "format", "(", "r_a", ",", "t_a", ")", ")", "\n", "", "logger", ".", "debug", "(", "\"Scale correction: {}\"", ".", "format", "(", "s", ")", ")", "\n", "\n", "if", "correct_only_scale", ":", "\n", "        ", "traj_aligned", ".", "scale", "(", "s", ")", "\n", "", "elif", "correct_scale", ":", "\n", "        ", "traj_aligned", ".", "scale", "(", "s", ")", "\n", "traj_aligned", ".", "transform", "(", "lie", ".", "se3", "(", "r_a", ",", "t_a", ")", ")", "\n", "", "else", ":", "\n", "        ", "traj_aligned", ".", "transform", "(", "lie", ".", "se3", "(", "r_a", ",", "t_a", ")", ")", "\n", "\n", "", "if", "return_parameters", ":", "\n", "        ", "return", "traj_aligned", ",", "r_a", ",", "t_a", ",", "s", "\n", "", "else", ":", "\n", "        ", "return", "traj_aligned", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.align_trajectory_origin": [[415, 433], ["copy.deepcopy", "traj_ref_origin.dot", "logger.debug", "copy.deepcopy.transform", "print", "mono.se3_inverse"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.scripts.infer.transform", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.se3_inverse"], ["", "", "def", "align_trajectory_origin", "(", "traj", ",", "traj_ref", ")", ":", "\n", "    ", "\"\"\"\n    align a trajectory's origin to the origin of a reference trajectory\n    :param traj: the trajectory to align\n    :param traj_ref: reference trajectory\n    :return: the aligned trajectory\n    \"\"\"", "\n", "\n", "if", "traj", ".", "num_poses", "==", "0", "or", "traj_ref", ".", "num_poses", "==", "0", ":", "\n", "        ", "print", "(", "\"can't align an empty trajectory...\"", ")", "\n", "", "traj_aligned", "=", "copy", ".", "deepcopy", "(", "traj", ")", "\n", "traj_origin", "=", "traj", ".", "poses_se3", "[", "0", "]", "\n", "traj_ref_origin", "=", "traj_ref", ".", "poses_se3", "[", "0", "]", "\n", "to_ref_origin", "=", "traj_ref_origin", ".", "dot", "(", "lie", ".", "se3_inverse", "(", "traj_origin", ")", ")", "\n", "logger", ".", "debug", "(", "\"Origin alignment transformation:\\n{}\"", ".", "format", "(", "to_ref_origin", ")", ")", "\n", "traj_aligned", ".", "transform", "(", "to_ref_origin", ")", "\n", "\n", "return", "traj_aligned", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.trajectory.merge": [[435, 451], ["numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "np.concatenate.argsort", "trajectory.PoseTrajectory3D"], "function", ["None"], ["", "def", "merge", "(", "trajectories", ")", ":", "\n", "    ", "\"\"\"\n    Merges multiple trajectories into a single, timestamp-sorted one.\n    :param trajectories: list of PoseTrajectory3D objects\n    :return: merged PoseTrajectory3D\n    \"\"\"", "\n", "merged_stamps", "=", "np", ".", "concatenate", "(", "[", "t", ".", "timestamps", "for", "t", "in", "trajectories", "]", ")", "\n", "merged_xyz", "=", "np", ".", "concatenate", "(", "[", "t", ".", "positions_xyz", "for", "t", "in", "trajectories", "]", ")", "\n", "merged_quat", "=", "np", ".", "concatenate", "(", "\n", "[", "t", ".", "orientations_quat_wxyz", "for", "t", "in", "trajectories", "]", ")", "\n", "order", "=", "merged_stamps", ".", "argsort", "(", ")", "\n", "merged_stamps", "=", "merged_stamps", "[", "order", "]", "\n", "merged_xyz", "=", "merged_xyz", "[", "order", "]", "\n", "merged_quat", "=", "merged_quat", "[", "order", "]", "\n", "\n", "return", "PoseTrajectory3D", "(", "merged_xyz", ",", "merged_quat", ",", "merged_stamps", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.Arcball.__init__": [[1537, 1561], ["numpy.array", "numpy.array", "numpy.array", "transformations.quaternion_from_matrix", "transformations.vector_norm", "ValueError"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_from_matrix", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.vector_norm"], ["def", "__init__", "(", "self", ",", "initial", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize virtual trackball control.\n\n        initial : quaternion or rotation matrix\n\n        \"\"\"", "\n", "self", ".", "_axis", "=", "None", "\n", "self", ".", "_axes", "=", "None", "\n", "self", ".", "_radius", "=", "1.0", "\n", "self", ".", "_center", "=", "[", "0.0", ",", "0.0", "]", "\n", "self", ".", "_vdown", "=", "numpy", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "1.0", "]", ")", "\n", "self", ".", "_constrain", "=", "False", "\n", "if", "initial", "is", "None", ":", "\n", "            ", "self", ".", "_qdown", "=", "numpy", ".", "array", "(", "[", "1.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", ")", "\n", "", "else", ":", "\n", "            ", "initial", "=", "numpy", ".", "array", "(", "initial", ",", "dtype", "=", "numpy", ".", "float64", ")", "\n", "if", "initial", ".", "shape", "==", "(", "4", ",", "4", ")", ":", "\n", "                ", "self", ".", "_qdown", "=", "quaternion_from_matrix", "(", "initial", ")", "\n", "", "elif", "initial", ".", "shape", "==", "(", "4", ",", ")", ":", "\n", "                ", "initial", "/=", "vector_norm", "(", "initial", ")", "\n", "self", ".", "_qdown", "=", "initial", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"initial not a quaternion or matrix\"", ")", "\n", "", "", "self", ".", "_qnow", "=", "self", ".", "_qpre", "=", "self", ".", "_qdown", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.Arcball.place": [[1562, 1574], ["float"], "methods", ["None"], ["", "def", "place", "(", "self", ",", "center", ",", "radius", ")", ":", "\n", "        ", "\"\"\"Place Arcball, e.g. when window size changes.\n\n        center : sequence[2]\n            Window coordinates of trackball center.\n        radius : float\n            Radius of trackball in window coordinates.\n\n        \"\"\"", "\n", "self", ".", "_radius", "=", "float", "(", "radius", ")", "\n", "self", ".", "_center", "[", "0", "]", "=", "center", "[", "0", "]", "\n", "self", ".", "_center", "[", "1", "]", "=", "center", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.Arcball.setaxes": [[1575, 1581], ["transformations.unit_vector"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.unit_vector"], ["", "def", "setaxes", "(", "self", ",", "*", "axes", ")", ":", "\n", "        ", "\"\"\"Set axes to constrain rotations.\"\"\"", "\n", "if", "axes", "is", "None", ":", "\n", "            ", "self", ".", "_axes", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "_axes", "=", "[", "unit_vector", "(", "axis", ")", "for", "axis", "in", "axes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.Arcball.constrain": [[1587, 1591], ["bool"], "methods", ["None"], ["", "@", "constrain", ".", "setter", "\n", "def", "constrain", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"Set state of constrain to axis mode.\"\"\"", "\n", "self", ".", "_constrain", "=", "bool", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.Arcball.down": [[1592, 1601], ["transformations.arcball_map_to_sphere", "transformations.arcball_nearest_axis", "transformations.arcball_constrain_to_axis"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.arcball_map_to_sphere", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.arcball_nearest_axis", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.arcball_constrain_to_axis"], ["", "def", "down", "(", "self", ",", "point", ")", ":", "\n", "        ", "\"\"\"Set initial cursor window coordinates and pick constrain-axis.\"\"\"", "\n", "self", ".", "_vdown", "=", "arcball_map_to_sphere", "(", "point", ",", "self", ".", "_center", ",", "self", ".", "_radius", ")", "\n", "self", ".", "_qdown", "=", "self", ".", "_qpre", "=", "self", ".", "_qnow", "\n", "if", "self", ".", "_constrain", "and", "self", ".", "_axes", "is", "not", "None", ":", "\n", "            ", "self", ".", "_axis", "=", "arcball_nearest_axis", "(", "self", ".", "_vdown", ",", "self", ".", "_axes", ")", "\n", "self", ".", "_vdown", "=", "arcball_constrain_to_axis", "(", "self", ".", "_vdown", ",", "self", ".", "_axis", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_axis", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.Arcball.drag": [[1602, 1614], ["transformations.arcball_map_to_sphere", "numpy.cross", "transformations.arcball_constrain_to_axis", "numpy.dot", "transformations.quaternion_multiply", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.arcball_map_to_sphere", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.arcball_constrain_to_axis", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_multiply"], ["", "", "def", "drag", "(", "self", ",", "point", ")", ":", "\n", "        ", "\"\"\"Update current cursor window coordinates.\"\"\"", "\n", "vnow", "=", "arcball_map_to_sphere", "(", "point", ",", "self", ".", "_center", ",", "self", ".", "_radius", ")", "\n", "if", "self", ".", "_axis", "is", "not", "None", ":", "\n", "            ", "vnow", "=", "arcball_constrain_to_axis", "(", "vnow", ",", "self", ".", "_axis", ")", "\n", "", "self", ".", "_qpre", "=", "self", ".", "_qnow", "\n", "t", "=", "numpy", ".", "cross", "(", "self", ".", "_vdown", ",", "vnow", ")", "\n", "if", "numpy", ".", "dot", "(", "t", ",", "t", ")", "<", "_EPS", ":", "\n", "            ", "self", ".", "_qnow", "=", "self", ".", "_qdown", "\n", "", "else", ":", "\n", "            ", "q", "=", "[", "numpy", ".", "dot", "(", "self", ".", "_vdown", ",", "vnow", ")", ",", "t", "[", "0", "]", ",", "t", "[", "1", "]", ",", "t", "[", "2", "]", "]", "\n", "self", ".", "_qnow", "=", "quaternion_multiply", "(", "q", ",", "self", ".", "_qdown", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.Arcball.next": [[1615, 1619], ["transformations.quaternion_slerp"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_slerp"], ["", "", "def", "next", "(", "self", ",", "acceleration", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"Continue rotation in direction of last drag.\"\"\"", "\n", "q", "=", "quaternion_slerp", "(", "self", ".", "_qpre", ",", "self", ".", "_qnow", ",", "2.0", "+", "acceleration", ",", "False", ")", "\n", "self", ".", "_qpre", ",", "self", ".", "_qnow", "=", "self", ".", "_qnow", ",", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.Arcball.matrix": [[1620, 1623], ["transformations.quaternion_matrix"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_matrix"], ["", "def", "matrix", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return homogeneous rotation matrix.\"\"\"", "\n", "return", "quaternion_matrix", "(", "self", ".", "_qnow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.identity_matrix": [[211, 224], ["numpy.identity"], "function", ["None"], ["def", "identity_matrix", "(", ")", ":", "\n", "    ", "\"\"\"Return 4x4 identity/unit matrix.\n\n    >>> I = identity_matrix()\n    >>> numpy.allclose(I, numpy.dot(I, I))\n    True\n    >>> numpy.sum(I), numpy.trace(I)\n    (4.0, 4.0)\n    >>> numpy.allclose(I, numpy.identity(4))\n    True\n\n    \"\"\"", "\n", "return", "numpy", ".", "identity", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.translation_matrix": [[226, 237], ["numpy.identity"], "function", ["None"], ["", "def", "translation_matrix", "(", "direction", ")", ":", "\n", "    ", "\"\"\"Return matrix to translate by direction vector.\n\n    >>> v = numpy.random.random(3) - 0.5\n    >>> numpy.allclose(v, translation_matrix(v)[:3, 3])\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "direction", "[", ":", "3", "]", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.translation_from_matrix": [[239, 249], ["[].copy", "numpy.array"], "function", ["None"], ["", "def", "translation_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return translation vector from translation matrix.\n\n    >>> v0 = numpy.random.random(3) - 0.5\n    >>> v1 = translation_from_matrix(translation_matrix(v0))\n    >>> numpy.allclose(v0, v1)\n    True\n\n    \"\"\"", "\n", "return", "numpy", ".", "array", "(", "matrix", ",", "copy", "=", "False", ")", "[", ":", "3", ",", "3", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.reflection_matrix": [[251, 275], ["transformations.unit_vector", "numpy.identity", "numpy.outer", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.unit_vector"], ["", "def", "reflection_matrix", "(", "point", ",", "normal", ")", ":", "\n", "    ", "\"\"\"Return matrix to mirror at plane defined by point and normal vector.\n\n    >>> v0 = numpy.random.random(4) - 0.5\n    >>> v0[3] = 1.\n    >>> v1 = numpy.random.random(3) - 0.5\n    >>> R = reflection_matrix(v0, v1)\n    >>> numpy.allclose(2, numpy.trace(R))\n    True\n    >>> numpy.allclose(v0, numpy.dot(R, v0))\n    True\n    >>> v2 = v0.copy()\n    >>> v2[:3] += v1\n    >>> v3 = v0.copy()\n    >>> v2[:3] -= v1\n    >>> numpy.allclose(v2, numpy.dot(R, v3))\n    True\n\n    \"\"\"", "\n", "normal", "=", "unit_vector", "(", "normal", "[", ":", "3", "]", ")", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "2.0", "*", "numpy", ".", "outer", "(", "normal", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "(", "2.0", "*", "numpy", ".", "dot", "(", "point", "[", ":", "3", "]", ",", "normal", ")", ")", "*", "normal", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.reflection_from_matrix": [[277, 304], ["numpy.array", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.where", "len", "ValueError", "numpy.where", "len", "ValueError", "numpy.real", "numpy.real", "abs", "abs", "numpy.real", "numpy.real"], "function", ["None"], ["", "def", "reflection_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return mirror plane point and normal vector from reflection matrix.\n\n    >>> v0 = numpy.random.random(3) - 0.5\n    >>> v1 = numpy.random.random(3) - 0.5\n    >>> M0 = reflection_matrix(v0, v1)\n    >>> point, normal = reflection_from_matrix(M0)\n    >>> M1 = reflection_matrix(point, normal)\n    >>> is_same_transform(M0, M1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "# normal: unit eigenvector corresponding to eigenvalue -1", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "+", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"no unit eigenvector corresponding to eigenvalue -1\"", ")", "\n", "", "normal", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "0", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "# point: any unit eigenvector corresponding to eigenvalue 1", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"no unit eigenvector corresponding to eigenvalue 1\"", ")", "\n", "", "point", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "return", "point", ",", "normal", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.rotation_matrix": [[306, 348], ["math.sin", "math.cos", "transformations.unit_vector", "numpy.diag", "numpy.array", "numpy.identity", "numpy.outer", "numpy.array", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.unit_vector"], ["", "def", "rotation_matrix", "(", "angle", ",", "direction", ",", "point", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return matrix to rotate about axis defined by point and direction.\n\n    >>> R = rotation_matrix(math.pi/2, [0, 0, 1], [1, 0, 0])\n    >>> numpy.allclose(numpy.dot(R, [0, 0, 0, 1]), [1, -1, 0, 1])\n    True\n    >>> angle = (random.random() - 0.5) * (2*math.pi)\n    >>> direc = numpy.random.random(3) - 0.5\n    >>> point = numpy.random.random(3) - 0.5\n    >>> R0 = rotation_matrix(angle, direc, point)\n    >>> R1 = rotation_matrix(angle-2*math.pi, direc, point)\n    >>> is_same_transform(R0, R1)\n    True\n    >>> R0 = rotation_matrix(angle, direc, point)\n    >>> R1 = rotation_matrix(-angle, -direc, point)\n    >>> is_same_transform(R0, R1)\n    True\n    >>> I = numpy.identity(4, numpy.float64)\n    >>> numpy.allclose(I, rotation_matrix(math.pi*2, direc))\n    True\n    >>> numpy.allclose(2, numpy.trace(rotation_matrix(math.pi/2,\n    ...                                               direc, point)))\n    True\n\n    \"\"\"", "\n", "sina", "=", "math", ".", "sin", "(", "angle", ")", "\n", "cosa", "=", "math", ".", "cos", "(", "angle", ")", "\n", "direction", "=", "unit_vector", "(", "direction", "[", ":", "3", "]", ")", "\n", "# rotation matrix around unit vector", "\n", "R", "=", "numpy", ".", "diag", "(", "[", "cosa", ",", "cosa", ",", "cosa", "]", ")", "\n", "R", "+=", "numpy", ".", "outer", "(", "direction", ",", "direction", ")", "*", "(", "1.0", "-", "cosa", ")", "\n", "direction", "*=", "sina", "\n", "R", "+=", "numpy", ".", "array", "(", "[", "[", "0.0", ",", "-", "direction", "[", "2", "]", ",", "direction", "[", "1", "]", "]", ",", "\n", "[", "direction", "[", "2", "]", ",", "0.0", ",", "-", "direction", "[", "0", "]", "]", ",", "\n", "[", "-", "direction", "[", "1", "]", ",", "direction", "[", "0", "]", ",", "0.0", "]", "]", ")", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "=", "R", "\n", "if", "point", "is", "not", "None", ":", "\n", "# rotation not around origin", "\n", "        ", "point", "=", "numpy", ".", "array", "(", "point", "[", ":", "3", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "point", "-", "numpy", ".", "dot", "(", "R", ",", "point", ")", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.rotation_from_matrix": [[350, 388], ["numpy.array", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.linalg.eig", "numpy.real().squeeze", "math.atan2", "numpy.where", "len", "ValueError", "numpy.where", "len", "ValueError", "abs", "numpy.real", "numpy.real", "numpy.trace", "abs", "abs", "abs", "numpy.real", "numpy.real"], "function", ["None"], ["", "def", "rotation_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return rotation angle and axis from rotation matrix.\n\n    >>> angle = (random.random() - 0.5) * (2*math.pi)\n    >>> direc = numpy.random.random(3) - 0.5\n    >>> point = numpy.random.random(3) - 0.5\n    >>> R0 = rotation_matrix(angle, direc, point)\n    >>> angle, direc, point = rotation_from_matrix(R0)\n    >>> R1 = rotation_matrix(angle, direc, point)\n    >>> is_same_transform(R0, R1)\n    True\n\n    \"\"\"", "\n", "R", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "R33", "=", "R", "[", ":", "3", ",", ":", "3", "]", "\n", "# direction: unit eigenvector of R33 corresponding to eigenvalue of 1", "\n", "w", ",", "W", "=", "numpy", ".", "linalg", ".", "eig", "(", "R33", ".", "T", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"no unit eigenvector corresponding to eigenvalue 1\"", ")", "\n", "", "direction", "=", "numpy", ".", "real", "(", "W", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "# point: unit eigenvector of R33 corresponding to eigenvalue of 1", "\n", "w", ",", "Q", "=", "numpy", ".", "linalg", ".", "eig", "(", "R", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"no unit eigenvector corresponding to eigenvalue 1\"", ")", "\n", "", "point", "=", "numpy", ".", "real", "(", "Q", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "# rotation angle depending on direction", "\n", "cosa", "=", "(", "numpy", ".", "trace", "(", "R33", ")", "-", "1.0", ")", "/", "2.0", "\n", "if", "abs", "(", "direction", "[", "2", "]", ")", ">", "1e-8", ":", "\n", "        ", "sina", "=", "(", "R", "[", "1", ",", "0", "]", "+", "(", "cosa", "-", "1.0", ")", "*", "direction", "[", "0", "]", "*", "direction", "[", "1", "]", ")", "/", "direction", "[", "2", "]", "\n", "", "elif", "abs", "(", "direction", "[", "1", "]", ")", ">", "1e-8", ":", "\n", "        ", "sina", "=", "(", "R", "[", "0", ",", "2", "]", "+", "(", "cosa", "-", "1.0", ")", "*", "direction", "[", "0", "]", "*", "direction", "[", "2", "]", ")", "/", "direction", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "sina", "=", "(", "R", "[", "2", ",", "1", "]", "+", "(", "cosa", "-", "1.0", ")", "*", "direction", "[", "1", "]", "*", "direction", "[", "2", "]", ")", "/", "direction", "[", "0", "]", "\n", "", "angle", "=", "math", ".", "atan2", "(", "sina", ",", "cosa", ")", "\n", "return", "angle", ",", "direction", ",", "point", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.scale_matrix": [[390, 422], ["numpy.diag", "transformations.unit_vector", "numpy.identity", "numpy.outer", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.unit_vector"], ["", "def", "scale_matrix", "(", "factor", ",", "origin", "=", "None", ",", "direction", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return matrix to scale by factor around origin in direction.\n\n    Use factor -1 for point symmetry.\n\n    >>> v = (numpy.random.rand(4, 5) - 0.5) * 20\n    >>> v[3] = 1\n    >>> S = scale_matrix(-1.234)\n    >>> numpy.allclose(numpy.dot(S, v)[:3], -1.234*v[:3])\n    True\n    >>> factor = random.random() * 10 - 5\n    >>> origin = numpy.random.random(3) - 0.5\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> S = scale_matrix(factor, origin)\n    >>> S = scale_matrix(factor, origin, direct)\n\n    \"\"\"", "\n", "if", "direction", "is", "None", ":", "\n", "# uniform scaling", "\n", "        ", "M", "=", "numpy", ".", "diag", "(", "[", "factor", ",", "factor", ",", "factor", ",", "1.0", "]", ")", "\n", "if", "origin", "is", "not", "None", ":", "\n", "            ", "M", "[", ":", "3", ",", "3", "]", "=", "origin", "[", ":", "3", "]", "\n", "M", "[", ":", "3", ",", "3", "]", "*=", "1.0", "-", "factor", "\n", "", "", "else", ":", "\n", "# nonuniform scaling", "\n", "        ", "direction", "=", "unit_vector", "(", "direction", "[", ":", "3", "]", ")", "\n", "factor", "=", "1.0", "-", "factor", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "factor", "*", "numpy", ".", "outer", "(", "direction", ",", "direction", ")", "\n", "if", "origin", "is", "not", "None", ":", "\n", "            ", "M", "[", ":", "3", ",", "3", "]", "=", "(", "factor", "*", "numpy", ".", "dot", "(", "origin", "[", ":", "3", "]", ",", "direction", ")", ")", "*", "direction", "\n", "", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.scale_from_matrix": [[424, 463], ["numpy.array", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.trace", "numpy.linalg.eig", "numpy.real().squeeze", "transformations.vector_norm", "numpy.where", "len", "ValueError", "numpy.real", "numpy.where", "numpy.real", "abs", "abs", "numpy.real", "numpy.real"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.vector_norm"], ["", "def", "scale_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return scaling factor, origin and direction from scaling matrix.\n\n    >>> factor = random.random() * 10 - 5\n    >>> origin = numpy.random.random(3) - 0.5\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> S0 = scale_matrix(factor, origin)\n    >>> factor, origin, direction = scale_from_matrix(S0)\n    >>> S1 = scale_matrix(factor, origin, direction)\n    >>> is_same_transform(S0, S1)\n    True\n    >>> S0 = scale_matrix(factor, origin, direct)\n    >>> factor, origin, direction = scale_from_matrix(S0)\n    >>> S1 = scale_matrix(factor, origin, direction)\n    >>> is_same_transform(S0, S1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M33", "=", "M", "[", ":", "3", ",", ":", "3", "]", "\n", "factor", "=", "numpy", ".", "trace", "(", "M33", ")", "-", "2.0", "\n", "try", ":", "\n", "# direction: unit eigenvector corresponding to eigenvalue factor", "\n", "        ", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M33", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "factor", ")", "<", "1e-8", ")", "[", "0", "]", "[", "0", "]", "\n", "direction", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "]", ")", ".", "squeeze", "(", ")", "\n", "direction", "/=", "vector_norm", "(", "direction", ")", "\n", "", "except", "IndexError", ":", "\n", "# uniform scaling", "\n", "        ", "factor", "=", "(", "factor", "+", "2.0", ")", "/", "3.0", "\n", "direction", "=", "None", "\n", "# origin: any eigenvector corresponding to eigenvalue 1", "\n", "", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"no eigenvector corresponding to eigenvalue 1\"", ")", "\n", "", "origin", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "origin", "/=", "origin", "[", "3", "]", "\n", "return", "factor", ",", "origin", ",", "direction", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.projection_matrix": [[465, 525], ["numpy.identity", "numpy.array", "transformations.unit_vector", "numpy.array", "numpy.dot", "numpy.outer", "numpy.dot", "numpy.outer", "numpy.array", "numpy.dot", "numpy.outer", "numpy.dot", "numpy.dot", "numpy.outer", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.unit_vector"], ["", "def", "projection_matrix", "(", "point", ",", "normal", ",", "direction", "=", "None", ",", "\n", "perspective", "=", "None", ",", "pseudo", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return matrix to project onto plane defined by point and normal.\n\n    Using either perspective point, projection direction, or none of both.\n\n    If pseudo is True, perspective projections will preserve relative depth\n    such that Perspective = dot(Orthogonal, PseudoPerspective).\n\n    >>> P = projection_matrix([0, 0, 0], [1, 0, 0])\n    >>> numpy.allclose(P[1:, 1:], numpy.identity(4)[1:, 1:])\n    True\n    >>> point = numpy.random.random(3) - 0.5\n    >>> normal = numpy.random.random(3) - 0.5\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> persp = numpy.random.random(3) - 0.5\n    >>> P0 = projection_matrix(point, normal)\n    >>> P1 = projection_matrix(point, normal, direction=direct)\n    >>> P2 = projection_matrix(point, normal, perspective=persp)\n    >>> P3 = projection_matrix(point, normal, perspective=persp, pseudo=True)\n    >>> is_same_transform(P2, numpy.dot(P0, P3))\n    True\n    >>> P = projection_matrix([3, 0, 0], [1, 1, 0], [1, 0, 0])\n    >>> v0 = (numpy.random.rand(4, 5) - 0.5) * 20\n    >>> v0[3] = 1\n    >>> v1 = numpy.dot(P, v0)\n    >>> numpy.allclose(v1[1], v0[1])\n    True\n    >>> numpy.allclose(v1[0], 3-v1[1])\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "point", "=", "numpy", ".", "array", "(", "point", "[", ":", "3", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "normal", "=", "unit_vector", "(", "normal", "[", ":", "3", "]", ")", "\n", "if", "perspective", "is", "not", "None", ":", "\n", "# perspective projection", "\n", "        ", "perspective", "=", "numpy", ".", "array", "(", "perspective", "[", ":", "3", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "\n", "copy", "=", "False", ")", "\n", "M", "[", "0", ",", "0", "]", "=", "M", "[", "1", ",", "1", "]", "=", "M", "[", "2", ",", "2", "]", "=", "numpy", ".", "dot", "(", "perspective", "-", "point", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "numpy", ".", "outer", "(", "perspective", ",", "normal", ")", "\n", "if", "pseudo", ":", "\n", "# preserve relative depth", "\n", "            ", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "numpy", ".", "outer", "(", "normal", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "numpy", ".", "dot", "(", "point", ",", "normal", ")", "*", "(", "perspective", "+", "normal", ")", "\n", "", "else", ":", "\n", "            ", "M", "[", ":", "3", ",", "3", "]", "=", "numpy", ".", "dot", "(", "point", ",", "normal", ")", "*", "perspective", "\n", "", "M", "[", "3", ",", ":", "3", "]", "=", "-", "normal", "\n", "M", "[", "3", ",", "3", "]", "=", "numpy", ".", "dot", "(", "perspective", ",", "normal", ")", "\n", "", "elif", "direction", "is", "not", "None", ":", "\n", "# parallel projection", "\n", "        ", "direction", "=", "numpy", ".", "array", "(", "direction", "[", ":", "3", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "scale", "=", "numpy", ".", "dot", "(", "direction", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "numpy", ".", "outer", "(", "direction", ",", "normal", ")", "/", "scale", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "direction", "*", "(", "numpy", ".", "dot", "(", "point", ",", "normal", ")", "/", "scale", ")", "\n", "", "else", ":", "\n", "# orthogonal projection", "\n", "        ", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "numpy", ".", "outer", "(", "normal", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "numpy", ".", "dot", "(", "point", ",", "normal", ")", "*", "normal", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.projection_from_matrix": [[527, 598], ["numpy.array", "numpy.linalg.eig", "numpy.where", "len", "numpy.real().squeeze", "numpy.linalg.eig", "numpy.real().squeeze", "transformations.vector_norm", "numpy.linalg.eig", "len", "numpy.real().squeeze", "numpy.where", "len", "ValueError", "numpy.where", "numpy.real().squeeze", "transformations.vector_norm", "numpy.where", "len", "ValueError", "numpy.dot", "abs", "numpy.real", "numpy.real", "numpy.real", "abs", "abs", "numpy.real", "abs", "numpy.real", "numpy.real", "numpy.real", "numpy.real"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.vector_norm", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.vector_norm"], ["", "def", "projection_from_matrix", "(", "matrix", ",", "pseudo", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return projection plane and perspective point from projection matrix.\n\n    Return values are same as arguments for projection_matrix function:\n    point, normal, direction, perspective, and pseudo.\n\n    >>> point = numpy.random.random(3) - 0.5\n    >>> normal = numpy.random.random(3) - 0.5\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> persp = numpy.random.random(3) - 0.5\n    >>> P0 = projection_matrix(point, normal)\n    >>> result = projection_from_matrix(P0)\n    >>> P1 = projection_matrix(*result)\n    >>> is_same_transform(P0, P1)\n    True\n    >>> P0 = projection_matrix(point, normal, direct)\n    >>> result = projection_from_matrix(P0)\n    >>> P1 = projection_matrix(*result)\n    >>> is_same_transform(P0, P1)\n    True\n    >>> P0 = projection_matrix(point, normal, perspective=persp, pseudo=False)\n    >>> result = projection_from_matrix(P0, pseudo=False)\n    >>> P1 = projection_matrix(*result)\n    >>> is_same_transform(P0, P1)\n    True\n    >>> P0 = projection_matrix(point, normal, perspective=persp, pseudo=True)\n    >>> result = projection_from_matrix(P0, pseudo=True)\n    >>> P1 = projection_matrix(*result)\n    >>> is_same_transform(P0, P1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M33", "=", "M", "[", ":", "3", ",", ":", "3", "]", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "pseudo", "and", "len", "(", "i", ")", ":", "\n", "# point: any eigenvector corresponding to eigenvalue 1", "\n", "        ", "point", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "# direction: unit eigenvector corresponding to eigenvalue 0", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M33", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"no eigenvector corresponding to eigenvalue 0\"", ")", "\n", "", "direction", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "0", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "direction", "/=", "vector_norm", "(", "direction", ")", "\n", "# normal: unit eigenvector of M33.T corresponding to eigenvalue 0", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M33", ".", "T", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "len", "(", "i", ")", ":", "\n", "# parallel projection", "\n", "            ", "normal", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "0", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "normal", "/=", "vector_norm", "(", "normal", ")", "\n", "return", "point", ",", "normal", ",", "direction", ",", "None", ",", "False", "\n", "", "else", ":", "\n", "# orthogonal projection, where normal equals direction vector", "\n", "            ", "return", "point", ",", "direction", ",", "None", ",", "None", ",", "False", "\n", "", "", "else", ":", "\n", "# perspective projection", "\n", "        ", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", ")", ">", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"no eigenvector not corresponding to eigenvalue 0\"", ")", "\n", "", "point", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "normal", "=", "-", "M", "[", "3", ",", ":", "3", "]", "\n", "perspective", "=", "M", "[", ":", "3", ",", "3", "]", "/", "numpy", ".", "dot", "(", "point", "[", ":", "3", "]", ",", "normal", ")", "\n", "if", "pseudo", ":", "\n", "            ", "perspective", "-=", "normal", "\n", "", "return", "point", ",", "normal", ",", "None", ",", "perspective", ",", "pseudo", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.clip_matrix": [[600, 650], ["numpy.array", "ValueError", "ValueError"], "function", ["None"], ["", "", "def", "clip_matrix", "(", "left", ",", "right", ",", "bottom", ",", "top", ",", "near", ",", "far", ",", "perspective", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return matrix to obtain normalized device coordinates from frustum.\n\n    The frustum bounds are axis-aligned along x (left, right),\n    y (bottom, top) and z (near, far).\n\n    Normalized device coordinates are in range [-1, 1] if coordinates are\n    inside the frustum.\n\n    If perspective is True the frustum is a truncated pyramid with the\n    perspective point at origin and direction along z axis, otherwise an\n    orthographic canonical view volume (a box).\n\n    Homogeneous coordinates transformed by the perspective clip matrix\n    need to be dehomogenized (divided by w coordinate).\n\n    >>> frustum = numpy.random.rand(6)\n    >>> frustum[1] += frustum[0]\n    >>> frustum[3] += frustum[2]\n    >>> frustum[5] += frustum[4]\n    >>> M = clip_matrix(perspective=False, *frustum)\n    >>> numpy.dot(M, [frustum[0], frustum[2], frustum[4], 1])\n    array([-1., -1., -1.,  1.])\n    >>> numpy.dot(M, [frustum[1], frustum[3], frustum[5], 1])\n    array([ 1.,  1.,  1.,  1.])\n    >>> M = clip_matrix(perspective=True, *frustum)\n    >>> v = numpy.dot(M, [frustum[0], frustum[2], frustum[4], 1])\n    >>> v / v[3]\n    array([-1., -1., -1.,  1.])\n    >>> v = numpy.dot(M, [frustum[1], frustum[3], frustum[4], 1])\n    >>> v / v[3]\n    array([ 1.,  1., -1.,  1.])\n\n    \"\"\"", "\n", "if", "left", ">=", "right", "or", "bottom", ">=", "top", "or", "near", ">=", "far", ":", "\n", "        ", "raise", "ValueError", "(", "\"invalid frustum\"", ")", "\n", "", "if", "perspective", ":", "\n", "        ", "if", "near", "<=", "_EPS", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid frustum: near <= 0\"", ")", "\n", "", "t", "=", "2.0", "*", "near", "\n", "M", "=", "[", "[", "t", "/", "(", "left", "-", "right", ")", ",", "0.0", ",", "(", "right", "+", "left", ")", "/", "(", "right", "-", "left", ")", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "t", "/", "(", "bottom", "-", "top", ")", ",", "(", "top", "+", "bottom", ")", "/", "(", "top", "-", "bottom", ")", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "(", "far", "+", "near", ")", "/", "(", "near", "-", "far", ")", ",", "t", "*", "far", "/", "(", "far", "-", "near", ")", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "-", "1.0", ",", "0.0", "]", "]", "\n", "", "else", ":", "\n", "        ", "M", "=", "[", "[", "2.0", "/", "(", "right", "-", "left", ")", ",", "0.0", ",", "0.0", ",", "(", "right", "+", "left", ")", "/", "(", "left", "-", "right", ")", "]", ",", "\n", "[", "0.0", ",", "2.0", "/", "(", "top", "-", "bottom", ")", ",", "0.0", ",", "(", "top", "+", "bottom", ")", "/", "(", "bottom", "-", "top", ")", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "2.0", "/", "(", "far", "-", "near", ")", ",", "(", "far", "+", "near", ")", "/", "(", "near", "-", "far", ")", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", "\n", "", "return", "numpy", ".", "array", "(", "M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.shear_matrix": [[652, 681], ["transformations.unit_vector", "transformations.unit_vector", "math.tan", "numpy.identity", "abs", "ValueError", "numpy.outer", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.unit_vector", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.unit_vector"], ["", "def", "shear_matrix", "(", "angle", ",", "direction", ",", "point", ",", "normal", ")", ":", "\n", "    ", "\"\"\"Return matrix to shear by angle along direction vector on shear plane.\n\n    The shear plane is defined by a point and normal vector. The direction\n    vector must be orthogonal to the plane's normal vector.\n\n    A point P is transformed by the shear matrix into P\" such that\n    the vector P-P\" is parallel to the direction vector and its extent is\n    given by the angle of P-P'-P\", where P' is the orthogonal projection\n    of P onto the shear plane.\n\n    >>> angle = (random.random() - 0.5) * 4*math.pi\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> point = numpy.random.random(3) - 0.5\n    >>> normal = numpy.cross(direct, numpy.random.random(3))\n    >>> S = shear_matrix(angle, direct, point, normal)\n    >>> numpy.allclose(1, numpy.linalg.det(S))\n    True\n\n    \"\"\"", "\n", "normal", "=", "unit_vector", "(", "normal", "[", ":", "3", "]", ")", "\n", "direction", "=", "unit_vector", "(", "direction", "[", ":", "3", "]", ")", "\n", "if", "abs", "(", "numpy", ".", "dot", "(", "normal", ",", "direction", ")", ")", ">", "1e-6", ":", "\n", "        ", "raise", "ValueError", "(", "\"direction and normal vectors are not orthogonal\"", ")", "\n", "", "angle", "=", "math", ".", "tan", "(", "angle", ")", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "+=", "angle", "*", "numpy", ".", "outer", "(", "direction", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "-", "angle", "*", "numpy", ".", "dot", "(", "point", "[", ":", "3", "]", ",", "normal", ")", "*", "direction", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.shear_from_matrix": [[683, 726], ["numpy.array", "numpy.linalg.eig", "numpy.dot", "transformations.vector_norm", "math.atan", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.where", "len", "ValueError", "numpy.real().squeeze", "numpy.cross", "transformations.vector_norm", "numpy.where", "len", "ValueError", "numpy.identity", "numpy.real", "abs", "numpy.real", "abs", "numpy.real", "numpy.real"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.vector_norm", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.vector_norm"], ["", "def", "shear_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return shear angle, direction and plane from shear matrix.\n\n    >>> angle = (random.random() - 0.5) * 4*math.pi\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> point = numpy.random.random(3) - 0.5\n    >>> normal = numpy.cross(direct, numpy.random.random(3))\n    >>> S0 = shear_matrix(angle, direct, point, normal)\n    >>> angle, direct, point, normal = shear_from_matrix(S0)\n    >>> S1 = shear_matrix(angle, direct, point, normal)\n    >>> is_same_transform(S0, S1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M33", "=", "M", "[", ":", "3", ",", ":", "3", "]", "\n", "# normal: cross independent eigenvectors corresponding to the eigenvalue 1", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M33", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-4", ")", "[", "0", "]", "\n", "if", "len", "(", "i", ")", "<", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"no two linear independent eigenvectors found %s\"", "%", "w", ")", "\n", "", "V", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "]", ")", ".", "squeeze", "(", ")", ".", "T", "\n", "lenorm", "=", "-", "1.0", "\n", "for", "i0", ",", "i1", "in", "(", "(", "0", ",", "1", ")", ",", "(", "0", ",", "2", ")", ",", "(", "1", ",", "2", ")", ")", ":", "\n", "        ", "n", "=", "numpy", ".", "cross", "(", "V", "[", "i0", "]", ",", "V", "[", "i1", "]", ")", "\n", "w", "=", "vector_norm", "(", "n", ")", "\n", "if", "w", ">", "lenorm", ":", "\n", "            ", "lenorm", "=", "w", "\n", "normal", "=", "n", "\n", "", "", "normal", "/=", "lenorm", "\n", "# direction and angle", "\n", "direction", "=", "numpy", ".", "dot", "(", "M33", "-", "numpy", ".", "identity", "(", "3", ")", ",", "normal", ")", "\n", "angle", "=", "vector_norm", "(", "direction", ")", "\n", "direction", "/=", "angle", "\n", "angle", "=", "math", ".", "atan", "(", "angle", ")", "\n", "# point: eigenvector corresponding to eigenvalue 1", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"no eigenvector corresponding to eigenvalue 1\"", ")", "\n", "", "point", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "return", "angle", ",", "direction", ",", "point", ",", "normal", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.decompose_matrix": [[728, 811], ["M.copy", "numpy.zeros", "any", "M[].copy", "M[].copy", "transformations.vector_norm", "numpy.dot", "transformations.vector_norm", "numpy.dot", "numpy.dot", "transformations.vector_norm", "math.asin", "math.cos", "numpy.array", "abs", "ValueError", "numpy.linalg.det", "ValueError", "numpy.dot", "numpy.array", "numpy.dot", "numpy.negative", "numpy.negative", "math.atan2", "math.atan2", "math.atan2", "abs", "numpy.linalg.inv", "numpy.cross"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.vector_norm", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.vector_norm", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.vector_norm"], ["", "def", "decompose_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return sequence of transformations from transformation matrix.\n\n    matrix : array_like\n        Non-degenerative homogeneous transformation matrix\n\n    Return tuple of:\n        scale : vector of 3 scaling factors\n        shear : list of shear factors for x-y, x-z, y-z axes\n        angles : list of Euler angles about static x, y, z axes\n        translate : translation vector along x, y, z axes\n        perspective : perspective partition of matrix\n\n    Raise ValueError if matrix is of wrong type or degenerative.\n\n    >>> T0 = translation_matrix([1, 2, 3])\n    >>> scale, shear, angles, trans, persp = decompose_matrix(T0)\n    >>> T1 = translation_matrix(trans)\n    >>> numpy.allclose(T0, T1)\n    True\n    >>> S = scale_matrix(0.123)\n    >>> scale, shear, angles, trans, persp = decompose_matrix(S)\n    >>> scale[0]\n    0.123\n    >>> R0 = euler_matrix(1, 2, 3)\n    >>> scale, shear, angles, trans, persp = decompose_matrix(R0)\n    >>> R1 = euler_matrix(*angles)\n    >>> numpy.allclose(R0, R1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", ".", "T", "\n", "if", "abs", "(", "M", "[", "3", ",", "3", "]", ")", "<", "_EPS", ":", "\n", "        ", "raise", "ValueError", "(", "\"M[3, 3] is zero\"", ")", "\n", "", "M", "/=", "M", "[", "3", ",", "3", "]", "\n", "P", "=", "M", ".", "copy", "(", ")", "\n", "P", "[", ":", ",", "3", "]", "=", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "\n", "if", "not", "numpy", ".", "linalg", ".", "det", "(", "P", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"matrix is singular\"", ")", "\n", "\n", "", "scale", "=", "numpy", ".", "zeros", "(", "(", "3", ",", ")", ")", "\n", "shear", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "angles", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "\n", "if", "any", "(", "abs", "(", "M", "[", ":", "3", ",", "3", "]", ")", ">", "_EPS", ")", ":", "\n", "        ", "perspective", "=", "numpy", ".", "dot", "(", "M", "[", ":", ",", "3", "]", ",", "numpy", ".", "linalg", ".", "inv", "(", "P", ".", "T", ")", ")", "\n", "M", "[", ":", ",", "3", "]", "=", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "\n", "", "else", ":", "\n", "        ", "perspective", "=", "numpy", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ")", "\n", "\n", "", "translate", "=", "M", "[", "3", ",", ":", "3", "]", ".", "copy", "(", ")", "\n", "M", "[", "3", ",", ":", "3", "]", "=", "0.0", "\n", "\n", "row", "=", "M", "[", ":", "3", ",", ":", "3", "]", ".", "copy", "(", ")", "\n", "scale", "[", "0", "]", "=", "vector_norm", "(", "row", "[", "0", "]", ")", "\n", "row", "[", "0", "]", "/=", "scale", "[", "0", "]", "\n", "shear", "[", "0", "]", "=", "numpy", ".", "dot", "(", "row", "[", "0", "]", ",", "row", "[", "1", "]", ")", "\n", "row", "[", "1", "]", "-=", "row", "[", "0", "]", "*", "shear", "[", "0", "]", "\n", "scale", "[", "1", "]", "=", "vector_norm", "(", "row", "[", "1", "]", ")", "\n", "row", "[", "1", "]", "/=", "scale", "[", "1", "]", "\n", "shear", "[", "0", "]", "/=", "scale", "[", "1", "]", "\n", "shear", "[", "1", "]", "=", "numpy", ".", "dot", "(", "row", "[", "0", "]", ",", "row", "[", "2", "]", ")", "\n", "row", "[", "2", "]", "-=", "row", "[", "0", "]", "*", "shear", "[", "1", "]", "\n", "shear", "[", "2", "]", "=", "numpy", ".", "dot", "(", "row", "[", "1", "]", ",", "row", "[", "2", "]", ")", "\n", "row", "[", "2", "]", "-=", "row", "[", "1", "]", "*", "shear", "[", "2", "]", "\n", "scale", "[", "2", "]", "=", "vector_norm", "(", "row", "[", "2", "]", ")", "\n", "row", "[", "2", "]", "/=", "scale", "[", "2", "]", "\n", "shear", "[", "1", ":", "]", "/=", "scale", "[", "2", "]", "\n", "\n", "if", "numpy", ".", "dot", "(", "row", "[", "0", "]", ",", "numpy", ".", "cross", "(", "row", "[", "1", "]", ",", "row", "[", "2", "]", ")", ")", "<", "0", ":", "\n", "        ", "numpy", ".", "negative", "(", "scale", ",", "scale", ")", "\n", "numpy", ".", "negative", "(", "row", ",", "row", ")", "\n", "\n", "", "angles", "[", "1", "]", "=", "math", ".", "asin", "(", "-", "row", "[", "0", ",", "2", "]", ")", "\n", "if", "math", ".", "cos", "(", "angles", "[", "1", "]", ")", ":", "\n", "        ", "angles", "[", "0", "]", "=", "math", ".", "atan2", "(", "row", "[", "1", ",", "2", "]", ",", "row", "[", "2", ",", "2", "]", ")", "\n", "angles", "[", "2", "]", "=", "math", ".", "atan2", "(", "row", "[", "0", ",", "1", "]", ",", "row", "[", "0", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "#angles[0] = math.atan2(row[1, 0], row[1, 1])", "\n", "        ", "angles", "[", "0", "]", "=", "math", ".", "atan2", "(", "-", "row", "[", "2", ",", "1", "]", ",", "row", "[", "1", ",", "1", "]", ")", "\n", "angles", "[", "2", "]", "=", "0.0", "\n", "\n", "", "return", "scale", ",", "shear", ",", "angles", ",", "translate", ",", "perspective", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.compose_matrix": [[813, 864], ["numpy.identity", "numpy.identity", "numpy.dot", "numpy.identity", "numpy.dot", "transformations.euler_matrix", "numpy.dot", "numpy.identity", "numpy.dot", "numpy.identity", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.euler_matrix"], ["", "def", "compose_matrix", "(", "scale", "=", "None", ",", "shear", "=", "None", ",", "angles", "=", "None", ",", "translate", "=", "None", ",", "\n", "perspective", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return transformation matrix from sequence of transformations.\n\n    This is the inverse of the decompose_matrix function.\n\n    Sequence of transformations:\n        scale : vector of 3 scaling factors\n        shear : list of shear factors for x-y, x-z, y-z axes\n        angles : list of Euler angles about static x, y, z axes\n        translate : translation vector along x, y, z axes\n        perspective : perspective partition of matrix\n\n    >>> scale = numpy.random.random(3) - 0.5\n    >>> shear = numpy.random.random(3) - 0.5\n    >>> angles = (numpy.random.random(3) - 0.5) * (2*math.pi)\n    >>> trans = numpy.random.random(3) - 0.5\n    >>> persp = numpy.random.random(4) - 0.5\n    >>> M0 = compose_matrix(scale, shear, angles, trans, persp)\n    >>> result = decompose_matrix(M0)\n    >>> M1 = compose_matrix(*result)\n    >>> is_same_transform(M0, M1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "if", "perspective", "is", "not", "None", ":", "\n", "        ", "P", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "P", "[", "3", ",", ":", "]", "=", "perspective", "[", ":", "4", "]", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "P", ")", "\n", "", "if", "translate", "is", "not", "None", ":", "\n", "        ", "T", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "T", "[", ":", "3", ",", "3", "]", "=", "translate", "[", ":", "3", "]", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "T", ")", "\n", "", "if", "angles", "is", "not", "None", ":", "\n", "        ", "R", "=", "euler_matrix", "(", "angles", "[", "0", "]", ",", "angles", "[", "1", "]", ",", "angles", "[", "2", "]", ",", "'sxyz'", ")", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "R", ")", "\n", "", "if", "shear", "is", "not", "None", ":", "\n", "        ", "Z", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "Z", "[", "1", ",", "2", "]", "=", "shear", "[", "2", "]", "\n", "Z", "[", "0", ",", "2", "]", "=", "shear", "[", "1", "]", "\n", "Z", "[", "0", ",", "1", "]", "=", "shear", "[", "0", "]", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "Z", ")", "\n", "", "if", "scale", "is", "not", "None", ":", "\n", "        ", "S", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "S", "[", "0", ",", "0", "]", "=", "scale", "[", "0", "]", "\n", "S", "[", "1", ",", "1", "]", "=", "scale", "[", "1", "]", "\n", "S", "[", "2", ",", "2", "]", "=", "scale", "[", "2", "]", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "S", ")", "\n", "", "M", "/=", "M", "[", "3", ",", "3", "]", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.orthogonalization_matrix": [[866, 891], ["numpy.radians", "numpy.sin", "numpy.cos", "numpy.array", "math.sqrt"], "function", ["None"], ["", "def", "orthogonalization_matrix", "(", "lengths", ",", "angles", ")", ":", "\n", "    ", "\"\"\"Return orthogonalization matrix for crystallographic cell coordinates.\n\n    Angles are expected in degrees.\n\n    The de-orthogonalization matrix is the inverse.\n\n    >>> O = orthogonalization_matrix([10, 10, 10], [90, 90, 90])\n    >>> numpy.allclose(O[:3, :3], numpy.identity(3, float) * 10)\n    True\n    >>> O = orthogonalization_matrix([9.8, 12.0, 15.5], [87.2, 80.7, 69.7])\n    >>> numpy.allclose(numpy.sum(O), 43.063229)\n    True\n\n    \"\"\"", "\n", "a", ",", "b", ",", "c", "=", "lengths", "\n", "angles", "=", "numpy", ".", "radians", "(", "angles", ")", "\n", "sina", ",", "sinb", ",", "_", "=", "numpy", ".", "sin", "(", "angles", ")", "\n", "cosa", ",", "cosb", ",", "cosg", "=", "numpy", ".", "cos", "(", "angles", ")", "\n", "co", "=", "(", "cosa", "*", "cosb", "-", "cosg", ")", "/", "(", "sina", "*", "sinb", ")", "\n", "return", "numpy", ".", "array", "(", "[", "\n", "[", "a", "*", "sinb", "*", "math", ".", "sqrt", "(", "1.0", "-", "co", "*", "co", ")", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "-", "a", "*", "sinb", "*", "co", ",", "b", "*", "sina", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "a", "*", "cosb", ",", "b", "*", "cosa", ",", "c", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.affine_matrix_from_points": [[893, 1000], ["numpy.array", "numpy.array", "numpy.identity", "t0.reshape", "numpy.identity", "t1.reshape", "numpy.dot", "ValueError", "numpy.mean", "numpy.mean", "numpy.concatenate", "numpy.linalg.svd", "numpy.dot", "numpy.concatenate", "numpy.vstack", "math.sqrt", "numpy.linalg.inv", "numpy.dot", "numpy.linalg.pinv", "numpy.linalg.svd", "numpy.dot", "numpy.identity", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.linalg.eigh", "transformations.vector_norm", "transformations.quaternion_matrix", "numpy.zeros", "numpy.dot", "numpy.linalg.det", "numpy.outer", "numpy.sum", "numpy.sum", "numpy.roll", "numpy.roll", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.vector_norm", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_matrix"], ["", "def", "affine_matrix_from_points", "(", "v0", ",", "v1", ",", "shear", "=", "True", ",", "scale", "=", "True", ",", "usesvd", "=", "True", ")", ":", "\n", "    ", "\"\"\"Return affine transform matrix to register two point sets.\n\n    v0 and v1 are shape (ndims, \\*) arrays of at least ndims non-homogeneous\n    coordinates, where ndims is the dimensionality of the coordinate space.\n\n    If shear is False, a similarity transformation matrix is returned.\n    If also scale is False, a rigid/Euclidean transformation matrix\n    is returned.\n\n    By default the algorithm by Hartley and Zissermann [15] is used.\n    If usesvd is True, similarity and Euclidean transformation matrices\n    are calculated by minimizing the weighted sum of squared deviations\n    (RMSD) according to the algorithm by Kabsch [8].\n    Otherwise, and if ndims is 3, the quaternion based algorithm by Horn [9]\n    is used, which is slower when using this Python implementation.\n\n    The returned matrix performs rotation, translation and uniform scaling\n    (if specified).\n\n    >>> v0 = [[0, 1031, 1031, 0], [0, 0, 1600, 1600]]\n    >>> v1 = [[675, 826, 826, 677], [55, 52, 281, 277]]\n    >>> affine_matrix_from_points(v0, v1)\n    array([[   0.14549,    0.00062,  675.50008],\n           [   0.00048,    0.14094,   53.24971],\n           [   0.     ,    0.     ,    1.     ]])\n    >>> T = translation_matrix(numpy.random.random(3)-0.5)\n    >>> R = random_rotation_matrix(numpy.random.random(3))\n    >>> S = scale_matrix(random.random())\n    >>> M = concatenate_matrices(T, R, S)\n    >>> v0 = (numpy.random.rand(4, 100) - 0.5) * 20\n    >>> v0[3] = 1\n    >>> v1 = numpy.dot(M, v0)\n    >>> v0[:3] += numpy.random.normal(0, 1e-8, 300).reshape(3, -1)\n    >>> M = affine_matrix_from_points(v0[:3], v1[:3])\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n\n    More examples in superimposition_matrix()\n\n    \"\"\"", "\n", "v0", "=", "numpy", ".", "array", "(", "v0", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "v1", "=", "numpy", ".", "array", "(", "v1", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "\n", "ndims", "=", "v0", ".", "shape", "[", "0", "]", "\n", "if", "ndims", "<", "2", "or", "v0", ".", "shape", "[", "1", "]", "<", "ndims", "or", "v0", ".", "shape", "!=", "v1", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "\"input arrays are of wrong shape or type\"", ")", "\n", "\n", "# move centroids to origin", "\n", "", "t0", "=", "-", "numpy", ".", "mean", "(", "v0", ",", "axis", "=", "1", ")", "\n", "M0", "=", "numpy", ".", "identity", "(", "ndims", "+", "1", ")", "\n", "M0", "[", ":", "ndims", ",", "ndims", "]", "=", "t0", "\n", "v0", "+=", "t0", ".", "reshape", "(", "ndims", ",", "1", ")", "\n", "t1", "=", "-", "numpy", ".", "mean", "(", "v1", ",", "axis", "=", "1", ")", "\n", "M1", "=", "numpy", ".", "identity", "(", "ndims", "+", "1", ")", "\n", "M1", "[", ":", "ndims", ",", "ndims", "]", "=", "t1", "\n", "v1", "+=", "t1", ".", "reshape", "(", "ndims", ",", "1", ")", "\n", "\n", "if", "shear", ":", "\n", "# Affine transformation", "\n", "        ", "A", "=", "numpy", ".", "concatenate", "(", "(", "v0", ",", "v1", ")", ",", "axis", "=", "0", ")", "\n", "u", ",", "s", ",", "vh", "=", "numpy", ".", "linalg", ".", "svd", "(", "A", ".", "T", ")", "\n", "vh", "=", "vh", "[", ":", "ndims", "]", ".", "T", "\n", "B", "=", "vh", "[", ":", "ndims", "]", "\n", "C", "=", "vh", "[", "ndims", ":", "2", "*", "ndims", "]", "\n", "t", "=", "numpy", ".", "dot", "(", "C", ",", "numpy", ".", "linalg", ".", "pinv", "(", "B", ")", ")", "\n", "t", "=", "numpy", ".", "concatenate", "(", "(", "t", ",", "numpy", ".", "zeros", "(", "(", "ndims", ",", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "M", "=", "numpy", ".", "vstack", "(", "(", "t", ",", "(", "(", "0.0", ",", ")", "*", "ndims", ")", "+", "(", "1.0", ",", ")", ")", ")", "\n", "", "elif", "usesvd", "or", "ndims", "!=", "3", ":", "\n", "# Rigid transformation via SVD of covariance matrix", "\n", "        ", "u", ",", "s", ",", "vh", "=", "numpy", ".", "linalg", ".", "svd", "(", "numpy", ".", "dot", "(", "v1", ",", "v0", ".", "T", ")", ")", "\n", "# rotation matrix from SVD orthonormal bases", "\n", "R", "=", "numpy", ".", "dot", "(", "u", ",", "vh", ")", "\n", "if", "numpy", ".", "linalg", ".", "det", "(", "R", ")", "<", "0.0", ":", "\n", "# R does not constitute right handed system", "\n", "            ", "R", "-=", "numpy", ".", "outer", "(", "u", "[", ":", ",", "ndims", "-", "1", "]", ",", "vh", "[", "ndims", "-", "1", ",", ":", "]", "*", "2.0", ")", "\n", "s", "[", "-", "1", "]", "*=", "-", "1.0", "\n", "# homogeneous transformation matrix", "\n", "", "M", "=", "numpy", ".", "identity", "(", "ndims", "+", "1", ")", "\n", "M", "[", ":", "ndims", ",", ":", "ndims", "]", "=", "R", "\n", "", "else", ":", "\n", "# Rigid transformation matrix via quaternion", "\n", "# compute symmetric matrix N", "\n", "        ", "xx", ",", "yy", ",", "zz", "=", "numpy", ".", "sum", "(", "v0", "*", "v1", ",", "axis", "=", "1", ")", "\n", "xy", ",", "yz", ",", "zx", "=", "numpy", ".", "sum", "(", "v0", "*", "numpy", ".", "roll", "(", "v1", ",", "-", "1", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "xz", ",", "yx", ",", "zy", "=", "numpy", ".", "sum", "(", "v0", "*", "numpy", ".", "roll", "(", "v1", ",", "-", "2", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "N", "=", "[", "[", "xx", "+", "yy", "+", "zz", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "yz", "-", "zy", ",", "xx", "-", "yy", "-", "zz", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "zx", "-", "xz", ",", "xy", "+", "yx", ",", "yy", "-", "xx", "-", "zz", ",", "0.0", "]", ",", "\n", "[", "xy", "-", "yx", ",", "zx", "+", "xz", ",", "yz", "+", "zy", ",", "zz", "-", "xx", "-", "yy", "]", "]", "\n", "# quaternion: eigenvector corresponding to most positive eigenvalue", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eigh", "(", "N", ")", "\n", "q", "=", "V", "[", ":", ",", "numpy", ".", "argmax", "(", "w", ")", "]", "\n", "q", "/=", "vector_norm", "(", "q", ")", "# unit quaternion", "\n", "# homogeneous transformation matrix", "\n", "M", "=", "quaternion_matrix", "(", "q", ")", "\n", "\n", "", "if", "scale", "and", "not", "shear", ":", "\n", "# Affine transformation; scale is ratio of RMS deviations from centroid", "\n", "        ", "v0", "*=", "v0", "\n", "v1", "*=", "v1", "\n", "M", "[", ":", "ndims", ",", ":", "ndims", "]", "*=", "math", ".", "sqrt", "(", "numpy", ".", "sum", "(", "v1", ")", "/", "numpy", ".", "sum", "(", "v0", ")", ")", "\n", "\n", "# move centroids back", "\n", "", "M", "=", "numpy", ".", "dot", "(", "numpy", ".", "linalg", ".", "inv", "(", "M1", ")", ",", "numpy", ".", "dot", "(", "M", ",", "M0", ")", ")", "\n", "M", "/=", "M", "[", "ndims", ",", "ndims", "]", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.superimposition_matrix": [[1002, 1051], ["transformations.affine_matrix_from_points", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.affine_matrix_from_points"], ["", "def", "superimposition_matrix", "(", "v0", ",", "v1", ",", "scale", "=", "False", ",", "usesvd", "=", "True", ")", ":", "\n", "    ", "\"\"\"Return matrix to transform given 3D point set into second point set.\n\n    v0 and v1 are shape (3, \\*) or (4, \\*) arrays of at least 3 points.\n\n    The parameters scale and usesvd are explained in the more general\n    affine_matrix_from_points function.\n\n    The returned matrix is a similarity or Euclidean transformation matrix.\n    This function has a fast C implementation in transformations.c.\n\n    >>> v0 = numpy.random.rand(3, 10)\n    >>> M = superimposition_matrix(v0, v0)\n    >>> numpy.allclose(M, numpy.identity(4))\n    True\n    >>> R = random_rotation_matrix(numpy.random.random(3))\n    >>> v0 = [[1,0,0], [0,1,0], [0,0,1], [1,1,1]]\n    >>> v1 = numpy.dot(R, v0)\n    >>> M = superimposition_matrix(v0, v1)\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n    >>> v0 = (numpy.random.rand(4, 100) - 0.5) * 20\n    >>> v0[3] = 1\n    >>> v1 = numpy.dot(R, v0)\n    >>> M = superimposition_matrix(v0, v1)\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n    >>> S = scale_matrix(random.random())\n    >>> T = translation_matrix(numpy.random.random(3)-0.5)\n    >>> M = concatenate_matrices(T, R, S)\n    >>> v1 = numpy.dot(M, v0)\n    >>> v0[:3] += numpy.random.normal(0, 1e-9, 300).reshape(3, -1)\n    >>> M = superimposition_matrix(v0, v1, scale=True)\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n    >>> M = superimposition_matrix(v0, v1, scale=True, usesvd=False)\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n    >>> v = numpy.empty((4, 100, 3))\n    >>> v[:, :, 0] = v0\n    >>> M = superimposition_matrix(v0, v1, scale=True, usesvd=False)\n    >>> numpy.allclose(v1, numpy.dot(M, v[:, :, 0]))\n    True\n\n    \"\"\"", "\n", "v0", "=", "numpy", ".", "array", "(", "v0", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "3", "]", "\n", "v1", "=", "numpy", ".", "array", "(", "v1", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "3", "]", "\n", "return", "affine_matrix_from_points", "(", "v0", ",", "v1", ",", "shear", "=", "False", ",", "\n", "scale", "=", "scale", ",", "usesvd", "=", "usesvd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.euler_matrix": [[1053, 1114], ["numpy.identity", "math.sin", "math.sin", "math.sin", "math.cos", "math.cos", "math.cos"], "function", ["None"], ["", "def", "euler_matrix", "(", "ai", ",", "aj", ",", "ak", ",", "axes", "=", "'sxyz'", ")", ":", "\n", "    ", "\"\"\"Return homogeneous rotation matrix from Euler angles and axis sequence.\n\n    ai, aj, ak : Euler's roll, pitch and yaw angles\n    axes : One of 24 axis sequences as string or encoded tuple\n\n    >>> R = euler_matrix(1, 2, 3, 'syxz')\n    >>> numpy.allclose(numpy.sum(R[0]), -1.34786452)\n    True\n    >>> R = euler_matrix(1, 2, 3, (0, 1, 0, 1))\n    >>> numpy.allclose(numpy.sum(R[0]), -0.383436184)\n    True\n    >>> ai, aj, ak = (4*math.pi) * (numpy.random.random(3) - 0.5)\n    >>> for axes in _AXES2TUPLE.keys():\n    ...    R = euler_matrix(ai, aj, ak, axes)\n    >>> for axes in _TUPLE2AXES.keys():\n    ...    R = euler_matrix(ai, aj, ak, axes)\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "_AXES2TUPLE", "[", "axes", "]", "\n", "", "except", "(", "AttributeError", ",", "KeyError", ")", ":", "\n", "        ", "_TUPLE2AXES", "[", "axes", "]", "# validation", "\n", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "axes", "\n", "\n", "", "i", "=", "firstaxis", "\n", "j", "=", "_NEXT_AXIS", "[", "i", "+", "parity", "]", "\n", "k", "=", "_NEXT_AXIS", "[", "i", "-", "parity", "+", "1", "]", "\n", "\n", "if", "frame", ":", "\n", "        ", "ai", ",", "ak", "=", "ak", ",", "ai", "\n", "", "if", "parity", ":", "\n", "        ", "ai", ",", "aj", ",", "ak", "=", "-", "ai", ",", "-", "aj", ",", "-", "ak", "\n", "\n", "", "si", ",", "sj", ",", "sk", "=", "math", ".", "sin", "(", "ai", ")", ",", "math", ".", "sin", "(", "aj", ")", ",", "math", ".", "sin", "(", "ak", ")", "\n", "ci", ",", "cj", ",", "ck", "=", "math", ".", "cos", "(", "ai", ")", ",", "math", ".", "cos", "(", "aj", ")", ",", "math", ".", "cos", "(", "ak", ")", "\n", "cc", ",", "cs", "=", "ci", "*", "ck", ",", "ci", "*", "sk", "\n", "sc", ",", "ss", "=", "si", "*", "ck", ",", "si", "*", "sk", "\n", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "if", "repetition", ":", "\n", "        ", "M", "[", "i", ",", "i", "]", "=", "cj", "\n", "M", "[", "i", ",", "j", "]", "=", "sj", "*", "si", "\n", "M", "[", "i", ",", "k", "]", "=", "sj", "*", "ci", "\n", "M", "[", "j", ",", "i", "]", "=", "sj", "*", "sk", "\n", "M", "[", "j", ",", "j", "]", "=", "-", "cj", "*", "ss", "+", "cc", "\n", "M", "[", "j", ",", "k", "]", "=", "-", "cj", "*", "cs", "-", "sc", "\n", "M", "[", "k", ",", "i", "]", "=", "-", "sj", "*", "ck", "\n", "M", "[", "k", ",", "j", "]", "=", "cj", "*", "sc", "+", "cs", "\n", "M", "[", "k", ",", "k", "]", "=", "cj", "*", "cc", "-", "ss", "\n", "", "else", ":", "\n", "        ", "M", "[", "i", ",", "i", "]", "=", "cj", "*", "ck", "\n", "M", "[", "i", ",", "j", "]", "=", "sj", "*", "sc", "-", "cs", "\n", "M", "[", "i", ",", "k", "]", "=", "sj", "*", "cc", "+", "ss", "\n", "M", "[", "j", ",", "i", "]", "=", "cj", "*", "sk", "\n", "M", "[", "j", ",", "j", "]", "=", "sj", "*", "ss", "+", "cc", "\n", "M", "[", "j", ",", "k", "]", "=", "sj", "*", "cs", "-", "sc", "\n", "M", "[", "k", ",", "i", "]", "=", "-", "sj", "\n", "M", "[", "k", ",", "j", "]", "=", "cj", "*", "si", "\n", "M", "[", "k", ",", "k", "]", "=", "cj", "*", "ci", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.euler_from_matrix": [[1116, 1172], ["numpy.array", "math.sqrt", "math.sqrt", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "axes.lower"], "function", ["None"], ["", "def", "euler_from_matrix", "(", "matrix", ",", "axes", "=", "'sxyz'", ")", ":", "\n", "    ", "\"\"\"Return Euler angles from rotation matrix for specified axis sequence.\n\n    axes : One of 24 axis sequences as string or encoded tuple\n\n    Note that many Euler angle triplets can describe one matrix.\n\n    >>> R0 = euler_matrix(1, 2, 3, 'syxz')\n    >>> al, be, ga = euler_from_matrix(R0, 'syxz')\n    >>> R1 = euler_matrix(al, be, ga, 'syxz')\n    >>> numpy.allclose(R0, R1)\n    True\n    >>> angles = (4*math.pi) * (numpy.random.random(3) - 0.5)\n    >>> for axes in _AXES2TUPLE.keys():\n    ...    R0 = euler_matrix(axes=axes, *angles)\n    ...    R1 = euler_matrix(axes=axes, *euler_from_matrix(R0, axes))\n    ...    if not numpy.allclose(R0, R1): print(axes, \"failed\")\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "_AXES2TUPLE", "[", "axes", ".", "lower", "(", ")", "]", "\n", "", "except", "(", "AttributeError", ",", "KeyError", ")", ":", "\n", "        ", "_TUPLE2AXES", "[", "axes", "]", "# validation", "\n", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "axes", "\n", "\n", "", "i", "=", "firstaxis", "\n", "j", "=", "_NEXT_AXIS", "[", "i", "+", "parity", "]", "\n", "k", "=", "_NEXT_AXIS", "[", "i", "-", "parity", "+", "1", "]", "\n", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "if", "repetition", ":", "\n", "        ", "sy", "=", "math", ".", "sqrt", "(", "M", "[", "i", ",", "j", "]", "*", "M", "[", "i", ",", "j", "]", "+", "M", "[", "i", ",", "k", "]", "*", "M", "[", "i", ",", "k", "]", ")", "\n", "if", "sy", ">", "_EPS", ":", "\n", "            ", "ax", "=", "math", ".", "atan2", "(", "M", "[", "i", ",", "j", "]", ",", "M", "[", "i", ",", "k", "]", ")", "\n", "ay", "=", "math", ".", "atan2", "(", "sy", ",", "M", "[", "i", ",", "i", "]", ")", "\n", "az", "=", "math", ".", "atan2", "(", "M", "[", "j", ",", "i", "]", ",", "-", "M", "[", "k", ",", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "ax", "=", "math", ".", "atan2", "(", "-", "M", "[", "j", ",", "k", "]", ",", "M", "[", "j", ",", "j", "]", ")", "\n", "ay", "=", "math", ".", "atan2", "(", "sy", ",", "M", "[", "i", ",", "i", "]", ")", "\n", "az", "=", "0.0", "\n", "", "", "else", ":", "\n", "        ", "cy", "=", "math", ".", "sqrt", "(", "M", "[", "i", ",", "i", "]", "*", "M", "[", "i", ",", "i", "]", "+", "M", "[", "j", ",", "i", "]", "*", "M", "[", "j", ",", "i", "]", ")", "\n", "if", "cy", ">", "_EPS", ":", "\n", "            ", "ax", "=", "math", ".", "atan2", "(", "M", "[", "k", ",", "j", "]", ",", "M", "[", "k", ",", "k", "]", ")", "\n", "ay", "=", "math", ".", "atan2", "(", "-", "M", "[", "k", ",", "i", "]", ",", "cy", ")", "\n", "az", "=", "math", ".", "atan2", "(", "M", "[", "j", ",", "i", "]", ",", "M", "[", "i", ",", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "ax", "=", "math", ".", "atan2", "(", "-", "M", "[", "j", ",", "k", "]", ",", "M", "[", "j", ",", "j", "]", ")", "\n", "ay", "=", "math", ".", "atan2", "(", "-", "M", "[", "k", ",", "i", "]", ",", "cy", ")", "\n", "az", "=", "0.0", "\n", "\n", "", "", "if", "parity", ":", "\n", "        ", "ax", ",", "ay", ",", "az", "=", "-", "ax", ",", "-", "ay", ",", "-", "az", "\n", "", "if", "frame", ":", "\n", "        ", "ax", ",", "az", "=", "az", ",", "ax", "\n", "", "return", "ax", ",", "ay", ",", "az", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.euler_from_quaternion": [[1174, 1183], ["transformations.euler_from_matrix", "transformations.quaternion_matrix"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.euler_from_matrix", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_matrix"], ["", "def", "euler_from_quaternion", "(", "quaternion", ",", "axes", "=", "'sxyz'", ")", ":", "\n", "    ", "\"\"\"Return Euler angles from quaternion for specified axis sequence.\n\n    >>> angles = euler_from_quaternion([0.99810947, 0.06146124, 0, 0])\n    >>> numpy.allclose(angles, [0.123, 0, 0])\n    True\n\n    \"\"\"", "\n", "return", "euler_from_matrix", "(", "quaternion_matrix", "(", "quaternion", ")", ",", "axes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_from_euler": [[1185, 1240], ["math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "numpy.empty", "axes.lower"], "function", ["None"], ["", "def", "quaternion_from_euler", "(", "ai", ",", "aj", ",", "ak", ",", "axes", "=", "'sxyz'", ")", ":", "\n", "    ", "\"\"\"Return quaternion from Euler angles and axis sequence.\n\n    ai, aj, ak : Euler's roll, pitch and yaw angles\n    axes : One of 24 axis sequences as string or encoded tuple\n\n    >>> q = quaternion_from_euler(1, 2, 3, 'ryxz')\n    >>> numpy.allclose(q, [0.435953, 0.310622, -0.718287, 0.444435])\n    True\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "_AXES2TUPLE", "[", "axes", ".", "lower", "(", ")", "]", "\n", "", "except", "(", "AttributeError", ",", "KeyError", ")", ":", "\n", "        ", "_TUPLE2AXES", "[", "axes", "]", "# validation", "\n", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "axes", "\n", "\n", "", "i", "=", "firstaxis", "+", "1", "\n", "j", "=", "_NEXT_AXIS", "[", "i", "+", "parity", "-", "1", "]", "+", "1", "\n", "k", "=", "_NEXT_AXIS", "[", "i", "-", "parity", "]", "+", "1", "\n", "\n", "if", "frame", ":", "\n", "        ", "ai", ",", "ak", "=", "ak", ",", "ai", "\n", "", "if", "parity", ":", "\n", "        ", "aj", "=", "-", "aj", "\n", "\n", "", "ai", "/=", "2.0", "\n", "aj", "/=", "2.0", "\n", "ak", "/=", "2.0", "\n", "ci", "=", "math", ".", "cos", "(", "ai", ")", "\n", "si", "=", "math", ".", "sin", "(", "ai", ")", "\n", "cj", "=", "math", ".", "cos", "(", "aj", ")", "\n", "sj", "=", "math", ".", "sin", "(", "aj", ")", "\n", "ck", "=", "math", ".", "cos", "(", "ak", ")", "\n", "sk", "=", "math", ".", "sin", "(", "ak", ")", "\n", "cc", "=", "ci", "*", "ck", "\n", "cs", "=", "ci", "*", "sk", "\n", "sc", "=", "si", "*", "ck", "\n", "ss", "=", "si", "*", "sk", "\n", "\n", "q", "=", "numpy", ".", "empty", "(", "(", "4", ",", ")", ")", "\n", "if", "repetition", ":", "\n", "        ", "q", "[", "0", "]", "=", "cj", "*", "(", "cc", "-", "ss", ")", "\n", "q", "[", "i", "]", "=", "cj", "*", "(", "cs", "+", "sc", ")", "\n", "q", "[", "j", "]", "=", "sj", "*", "(", "cc", "+", "ss", ")", "\n", "q", "[", "k", "]", "=", "sj", "*", "(", "cs", "-", "sc", ")", "\n", "", "else", ":", "\n", "        ", "q", "[", "0", "]", "=", "cj", "*", "cc", "+", "sj", "*", "ss", "\n", "q", "[", "i", "]", "=", "cj", "*", "sc", "-", "sj", "*", "cs", "\n", "q", "[", "j", "]", "=", "cj", "*", "ss", "+", "sj", "*", "cc", "\n", "q", "[", "k", "]", "=", "cj", "*", "cs", "-", "sj", "*", "sc", "\n", "", "if", "parity", ":", "\n", "        ", "q", "[", "j", "]", "*=", "-", "1.0", "\n", "\n", "", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_about_axis": [[1242, 1256], ["numpy.array", "transformations.vector_norm", "math.cos", "math.sin"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.vector_norm"], ["", "def", "quaternion_about_axis", "(", "angle", ",", "axis", ")", ":", "\n", "    ", "\"\"\"Return quaternion for rotation about axis.\n\n    >>> q = quaternion_about_axis(0.123, [1, 0, 0])\n    >>> numpy.allclose(q, [0.99810947, 0.06146124, 0, 0])\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "[", "0.0", ",", "axis", "[", "0", "]", ",", "axis", "[", "1", "]", ",", "axis", "[", "2", "]", "]", ")", "\n", "qlen", "=", "vector_norm", "(", "q", ")", "\n", "if", "qlen", ">", "_EPS", ":", "\n", "        ", "q", "*=", "math", ".", "sin", "(", "angle", "/", "2.0", ")", "/", "qlen", "\n", "", "q", "[", "0", "]", "=", "math", ".", "cos", "(", "angle", "/", "2.0", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_matrix": [[1258, 1283], ["numpy.array", "numpy.dot", "math.sqrt", "numpy.outer", "numpy.array", "numpy.identity"], "function", ["None"], ["", "def", "quaternion_matrix", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return homogeneous rotation matrix from quaternion.\n\n    >>> M = quaternion_matrix([0.99810947, 0.06146124, 0, 0])\n    >>> numpy.allclose(M, rotation_matrix(0.123, [1, 0, 0]))\n    True\n    >>> M = quaternion_matrix([1, 0, 0, 0])\n    >>> numpy.allclose(M, numpy.identity(4))\n    True\n    >>> M = quaternion_matrix([0, 1, 0, 0])\n    >>> numpy.allclose(M, numpy.diag([1, -1, -1, 1]))\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "quaternion", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "n", "=", "numpy", ".", "dot", "(", "q", ",", "q", ")", "\n", "if", "n", "<", "_EPS", ":", "\n", "        ", "return", "numpy", ".", "identity", "(", "4", ")", "\n", "", "q", "*=", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", "\n", "q", "=", "numpy", ".", "outer", "(", "q", ",", "q", ")", "\n", "return", "numpy", ".", "array", "(", "[", "\n", "[", "1.0", "-", "q", "[", "2", ",", "2", "]", "-", "q", "[", "3", ",", "3", "]", ",", "q", "[", "1", ",", "2", "]", "-", "q", "[", "3", ",", "0", "]", ",", "q", "[", "1", ",", "3", "]", "+", "q", "[", "2", ",", "0", "]", ",", "0.0", "]", ",", "\n", "[", "q", "[", "1", ",", "2", "]", "+", "q", "[", "3", ",", "0", "]", ",", "1.0", "-", "q", "[", "1", ",", "1", "]", "-", "q", "[", "3", ",", "3", "]", ",", "q", "[", "2", ",", "3", "]", "-", "q", "[", "1", ",", "0", "]", ",", "0.0", "]", ",", "\n", "[", "q", "[", "1", ",", "3", "]", "-", "q", "[", "2", ",", "0", "]", ",", "q", "[", "2", ",", "3", "]", "+", "q", "[", "1", ",", "0", "]", ",", "1.0", "-", "q", "[", "1", ",", "1", "]", "-", "q", "[", "2", ",", "2", "]", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_from_matrix": [[1285, 1364], ["numpy.array", "numpy.empty", "numpy.trace", "numpy.array", "numpy.linalg.eigh", "numpy.negative", "math.sqrt", "numpy.argmax"], "function", ["None"], ["", "def", "quaternion_from_matrix", "(", "matrix", ",", "isprecise", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return quaternion from rotation matrix.\n\n    If isprecise is True, the input matrix is assumed to be a precise rotation\n    matrix and a faster algorithm is used.\n\n    >>> q = quaternion_from_matrix(numpy.identity(4), True)\n    >>> numpy.allclose(q, [1, 0, 0, 0])\n    True\n    >>> q = quaternion_from_matrix(numpy.diag([1, -1, -1, 1]))\n    >>> numpy.allclose(q, [0, 1, 0, 0]) or numpy.allclose(q, [0, -1, 0, 0])\n    True\n    >>> R = rotation_matrix(0.123, (1, 2, 3))\n    >>> q = quaternion_from_matrix(R, True)\n    >>> numpy.allclose(q, [0.9981095, 0.0164262, 0.0328524, 0.0492786])\n    True\n    >>> R = [[-0.545, 0.797, 0.260, 0], [0.733, 0.603, -0.313, 0],\n    ...      [-0.407, 0.021, -0.913, 0], [0, 0, 0, 1]]\n    >>> q = quaternion_from_matrix(R)\n    >>> numpy.allclose(q, [0.19069, 0.43736, 0.87485, -0.083611])\n    True\n    >>> R = [[0.395, 0.362, 0.843, 0], [-0.626, 0.796, -0.056, 0],\n    ...      [-0.677, -0.498, 0.529, 0], [0, 0, 0, 1]]\n    >>> q = quaternion_from_matrix(R)\n    >>> numpy.allclose(q, [0.82336615, -0.13610694, 0.46344705, -0.29792603])\n    True\n    >>> R = random_rotation_matrix()\n    >>> q = quaternion_from_matrix(R)\n    >>> is_same_transform(R, quaternion_matrix(q))\n    True\n    >>> R = euler_matrix(0.0, 0.0, numpy.pi/2.0)\n    >>> numpy.allclose(quaternion_from_matrix(R, isprecise=False),\n    ...                quaternion_from_matrix(R, isprecise=True))\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "4", ",", ":", "4", "]", "\n", "if", "isprecise", ":", "\n", "        ", "q", "=", "numpy", ".", "empty", "(", "(", "4", ",", ")", ")", "\n", "t", "=", "numpy", ".", "trace", "(", "M", ")", "\n", "if", "t", ">", "M", "[", "3", ",", "3", "]", ":", "\n", "            ", "q", "[", "0", "]", "=", "t", "\n", "q", "[", "3", "]", "=", "M", "[", "1", ",", "0", "]", "-", "M", "[", "0", ",", "1", "]", "\n", "q", "[", "2", "]", "=", "M", "[", "0", ",", "2", "]", "-", "M", "[", "2", ",", "0", "]", "\n", "q", "[", "1", "]", "=", "M", "[", "2", ",", "1", "]", "-", "M", "[", "1", ",", "2", "]", "\n", "", "else", ":", "\n", "            ", "i", ",", "j", ",", "k", "=", "1", ",", "2", ",", "3", "\n", "if", "M", "[", "1", ",", "1", "]", ">", "M", "[", "0", ",", "0", "]", ":", "\n", "                ", "i", ",", "j", ",", "k", "=", "2", ",", "3", ",", "1", "\n", "", "if", "M", "[", "2", ",", "2", "]", ">", "M", "[", "i", ",", "i", "]", ":", "\n", "                ", "i", ",", "j", ",", "k", "=", "3", ",", "1", ",", "2", "\n", "", "t", "=", "M", "[", "i", ",", "i", "]", "-", "(", "M", "[", "j", ",", "j", "]", "+", "M", "[", "k", ",", "k", "]", ")", "+", "M", "[", "3", ",", "3", "]", "\n", "q", "[", "i", "]", "=", "t", "\n", "q", "[", "j", "]", "=", "M", "[", "i", ",", "j", "]", "+", "M", "[", "j", ",", "i", "]", "\n", "q", "[", "k", "]", "=", "M", "[", "k", ",", "i", "]", "+", "M", "[", "i", ",", "k", "]", "\n", "q", "[", "3", "]", "=", "M", "[", "k", ",", "j", "]", "-", "M", "[", "j", ",", "k", "]", "\n", "", "q", "*=", "0.5", "/", "math", ".", "sqrt", "(", "t", "*", "M", "[", "3", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "        ", "m00", "=", "M", "[", "0", ",", "0", "]", "\n", "m01", "=", "M", "[", "0", ",", "1", "]", "\n", "m02", "=", "M", "[", "0", ",", "2", "]", "\n", "m10", "=", "M", "[", "1", ",", "0", "]", "\n", "m11", "=", "M", "[", "1", ",", "1", "]", "\n", "m12", "=", "M", "[", "1", ",", "2", "]", "\n", "m20", "=", "M", "[", "2", ",", "0", "]", "\n", "m21", "=", "M", "[", "2", ",", "1", "]", "\n", "m22", "=", "M", "[", "2", ",", "2", "]", "\n", "# symmetric matrix K", "\n", "K", "=", "numpy", ".", "array", "(", "[", "[", "m00", "-", "m11", "-", "m22", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "m01", "+", "m10", ",", "m11", "-", "m00", "-", "m22", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "m02", "+", "m20", ",", "m12", "+", "m21", ",", "m22", "-", "m00", "-", "m11", ",", "0.0", "]", ",", "\n", "[", "m21", "-", "m12", ",", "m02", "-", "m20", ",", "m10", "-", "m01", ",", "m00", "+", "m11", "+", "m22", "]", "]", ")", "\n", "K", "/=", "3.0", "\n", "# quaternion is eigenvector of K that corresponds to largest eigenvalue", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eigh", "(", "K", ")", "\n", "q", "=", "V", "[", "[", "3", ",", "0", ",", "1", ",", "2", "]", ",", "numpy", ".", "argmax", "(", "w", ")", "]", "\n", "", "if", "q", "[", "0", "]", "<", "0.0", ":", "\n", "        ", "numpy", ".", "negative", "(", "q", ",", "q", ")", "\n", "", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_multiply": [[1366, 1380], ["numpy.array"], "function", ["None"], ["", "def", "quaternion_multiply", "(", "quaternion1", ",", "quaternion0", ")", ":", "\n", "    ", "\"\"\"Return multiplication of two quaternions.\n\n    >>> q = quaternion_multiply([4, 1, -2, 3], [8, -5, 6, 7])\n    >>> numpy.allclose(q, [28, -44, -14, 48])\n    True\n\n    \"\"\"", "\n", "w0", ",", "x0", ",", "y0", ",", "z0", "=", "quaternion0", "\n", "w1", ",", "x1", ",", "y1", ",", "z1", "=", "quaternion1", "\n", "return", "numpy", ".", "array", "(", "[", "-", "x1", "*", "x0", "-", "y1", "*", "y0", "-", "z1", "*", "z0", "+", "w1", "*", "w0", ",", "\n", "x1", "*", "w0", "+", "y1", "*", "z0", "-", "z1", "*", "y0", "+", "w1", "*", "x0", ",", "\n", "-", "x1", "*", "z0", "+", "y1", "*", "w0", "+", "z1", "*", "x0", "+", "w1", "*", "y0", ",", "\n", "x1", "*", "y0", "-", "y1", "*", "x0", "+", "z1", "*", "w0", "+", "w1", "*", "z0", "]", ",", "dtype", "=", "numpy", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_conjugate": [[1382, 1394], ["numpy.array", "numpy.negative"], "function", ["None"], ["", "def", "quaternion_conjugate", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return conjugate of quaternion.\n\n    >>> q0 = random_quaternion()\n    >>> q1 = quaternion_conjugate(q0)\n    >>> q1[0] == q0[0] and all(q1[1:] == -q0[1:])\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "quaternion", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "numpy", ".", "negative", "(", "q", "[", "1", ":", "]", ",", "q", "[", "1", ":", "]", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_inverse": [[1396, 1408], ["numpy.array", "numpy.negative", "numpy.dot"], "function", ["None"], ["", "def", "quaternion_inverse", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return inverse of quaternion.\n\n    >>> q0 = random_quaternion()\n    >>> q1 = quaternion_inverse(q0)\n    >>> numpy.allclose(quaternion_multiply(q0, q1), [1, 0, 0, 0])\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "quaternion", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "numpy", ".", "negative", "(", "q", "[", "1", ":", "]", ",", "q", "[", "1", ":", "]", ")", "\n", "return", "q", "/", "numpy", ".", "dot", "(", "q", ",", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_real": [[1410, 1418], ["float"], "function", ["None"], ["", "def", "quaternion_real", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return real part of quaternion.\n\n    >>> quaternion_real([3, 0, 1, 2])\n    3.0\n\n    \"\"\"", "\n", "return", "float", "(", "quaternion", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_imag": [[1420, 1428], ["numpy.array"], "function", ["None"], ["", "def", "quaternion_imag", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return imaginary part of quaternion.\n\n    >>> quaternion_imag([3, 0, 1, 2])\n    array([ 0.,  1.,  2.])\n\n    \"\"\"", "\n", "return", "numpy", ".", "array", "(", "quaternion", "[", "1", ":", "4", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_slerp": [[1430, 1469], ["transformations.unit_vector", "transformations.unit_vector", "numpy.dot", "abs", "numpy.negative", "math.acos", "abs", "math.sin", "math.sin", "math.sin", "abs"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.unit_vector", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.unit_vector"], ["", "def", "quaternion_slerp", "(", "quat0", ",", "quat1", ",", "fraction", ",", "spin", "=", "0", ",", "shortestpath", "=", "True", ")", ":", "\n", "    ", "\"\"\"Return spherical linear interpolation between two quaternions.\n\n    >>> q0 = random_quaternion()\n    >>> q1 = random_quaternion()\n    >>> q = quaternion_slerp(q0, q1, 0)\n    >>> numpy.allclose(q, q0)\n    True\n    >>> q = quaternion_slerp(q0, q1, 1, 1)\n    >>> numpy.allclose(q, q1)\n    True\n    >>> q = quaternion_slerp(q0, q1, 0.5)\n    >>> angle = math.acos(numpy.dot(q0, q))\n    >>> numpy.allclose(2, math.acos(numpy.dot(q0, q1)) / angle) or \\\n        numpy.allclose(2, math.acos(-numpy.dot(q0, q1)) / angle)\n    True\n\n    \"\"\"", "\n", "q0", "=", "unit_vector", "(", "quat0", "[", ":", "4", "]", ")", "\n", "q1", "=", "unit_vector", "(", "quat1", "[", ":", "4", "]", ")", "\n", "if", "fraction", "==", "0.0", ":", "\n", "        ", "return", "q0", "\n", "", "elif", "fraction", "==", "1.0", ":", "\n", "        ", "return", "q1", "\n", "", "d", "=", "numpy", ".", "dot", "(", "q0", ",", "q1", ")", "\n", "if", "abs", "(", "abs", "(", "d", ")", "-", "1.0", ")", "<", "_EPS", ":", "\n", "        ", "return", "q0", "\n", "", "if", "shortestpath", "and", "d", "<", "0.0", ":", "\n", "# invert rotation", "\n", "        ", "d", "=", "-", "d", "\n", "numpy", ".", "negative", "(", "q1", ",", "q1", ")", "\n", "", "angle", "=", "math", ".", "acos", "(", "d", ")", "+", "spin", "*", "math", ".", "pi", "\n", "if", "abs", "(", "angle", ")", "<", "_EPS", ":", "\n", "        ", "return", "q0", "\n", "", "isin", "=", "1.0", "/", "math", ".", "sin", "(", "angle", ")", "\n", "q0", "*=", "math", ".", "sin", "(", "(", "1.0", "-", "fraction", ")", "*", "angle", ")", "*", "isin", "\n", "q1", "*=", "math", ".", "sin", "(", "fraction", "*", "angle", ")", "*", "isin", "\n", "q0", "+=", "q1", "\n", "return", "q0", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.random_quaternion": [[1471, 1497], ["numpy.sqrt", "numpy.sqrt", "numpy.array", "numpy.random.rand", "len", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "random_quaternion", "(", "rand", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return uniform random unit quaternion.\n\n    rand: array like or None\n        Three independent random variables that are uniformly distributed\n        between 0 and 1.\n\n    >>> q = random_quaternion()\n    >>> numpy.allclose(1, vector_norm(q))\n    True\n    >>> q = random_quaternion(numpy.random.random(3))\n    >>> len(q.shape), q.shape[0]==4\n    (1, True)\n\n    \"\"\"", "\n", "if", "rand", "is", "None", ":", "\n", "        ", "rand", "=", "numpy", ".", "random", ".", "rand", "(", "3", ")", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "rand", ")", "==", "3", "\n", "", "r1", "=", "numpy", ".", "sqrt", "(", "1.0", "-", "rand", "[", "0", "]", ")", "\n", "r2", "=", "numpy", ".", "sqrt", "(", "rand", "[", "0", "]", ")", "\n", "pi2", "=", "math", ".", "pi", "*", "2.0", "\n", "t1", "=", "pi2", "*", "rand", "[", "1", "]", "\n", "t2", "=", "pi2", "*", "rand", "[", "2", "]", "\n", "return", "numpy", ".", "array", "(", "[", "numpy", ".", "cos", "(", "t2", ")", "*", "r2", ",", "numpy", ".", "sin", "(", "t1", ")", "*", "r1", ",", "\n", "numpy", ".", "cos", "(", "t1", ")", "*", "r1", ",", "numpy", ".", "sin", "(", "t2", ")", "*", "r2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.random_rotation_matrix": [[1499, 1512], ["transformations.quaternion_matrix", "transformations.random_quaternion"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_matrix", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.random_quaternion"], ["", "def", "random_rotation_matrix", "(", "rand", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return uniform random rotation matrix.\n\n    rand: array like\n        Three independent random variables that are uniformly distributed\n        between 0 and 1 for each returned quaternion.\n\n    >>> R = random_rotation_matrix()\n    >>> numpy.allclose(numpy.dot(R.T, R), numpy.identity(4))\n    True\n\n    \"\"\"", "\n", "return", "quaternion_matrix", "(", "random_quaternion", "(", "rand", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.arcball_map_to_sphere": [[1625, 1636], ["math.sqrt", "numpy.array", "numpy.array", "math.sqrt"], "function", ["None"], ["", "", "def", "arcball_map_to_sphere", "(", "point", ",", "center", ",", "radius", ")", ":", "\n", "    ", "\"\"\"Return unit sphere coordinates from window coordinates.\"\"\"", "\n", "v0", "=", "(", "point", "[", "0", "]", "-", "center", "[", "0", "]", ")", "/", "radius", "\n", "v1", "=", "(", "center", "[", "1", "]", "-", "point", "[", "1", "]", ")", "/", "radius", "\n", "n", "=", "v0", "*", "v0", "+", "v1", "*", "v1", "\n", "if", "n", ">", "1.0", ":", "\n", "# position outside of sphere", "\n", "        ", "n", "=", "math", ".", "sqrt", "(", "n", ")", "\n", "return", "numpy", ".", "array", "(", "[", "v0", "/", "n", ",", "v1", "/", "n", ",", "0.0", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "numpy", ".", "array", "(", "[", "v0", ",", "v1", ",", "math", ".", "sqrt", "(", "1.0", "-", "n", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.arcball_constrain_to_axis": [[1638, 1652], ["numpy.array", "numpy.array", "transformations.vector_norm", "transformations.unit_vector", "numpy.dot", "numpy.array", "numpy.negative"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.vector_norm", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.unit_vector"], ["", "", "def", "arcball_constrain_to_axis", "(", "point", ",", "axis", ")", ":", "\n", "    ", "\"\"\"Return sphere point perpendicular to axis.\"\"\"", "\n", "v", "=", "numpy", ".", "array", "(", "point", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "a", "=", "numpy", ".", "array", "(", "axis", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "v", "-=", "a", "*", "numpy", ".", "dot", "(", "a", ",", "v", ")", "# on plane", "\n", "n", "=", "vector_norm", "(", "v", ")", "\n", "if", "n", ">", "_EPS", ":", "\n", "        ", "if", "v", "[", "2", "]", "<", "0.0", ":", "\n", "            ", "numpy", ".", "negative", "(", "v", ",", "v", ")", "\n", "", "v", "/=", "n", "\n", "return", "v", "\n", "", "if", "a", "[", "2", "]", "==", "1.0", ":", "\n", "        ", "return", "numpy", ".", "array", "(", "[", "1.0", ",", "0.0", ",", "0.0", "]", ")", "\n", "", "return", "unit_vector", "(", "[", "-", "a", "[", "1", "]", ",", "a", "[", "0", "]", ",", "0.0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.arcball_nearest_axis": [[1654, 1665], ["numpy.array", "numpy.dot", "transformations.arcball_constrain_to_axis"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.arcball_constrain_to_axis"], ["", "def", "arcball_nearest_axis", "(", "point", ",", "axes", ")", ":", "\n", "    ", "\"\"\"Return axis, which arc is nearest to point.\"\"\"", "\n", "point", "=", "numpy", ".", "array", "(", "point", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "nearest", "=", "None", "\n", "mx", "=", "-", "1.0", "\n", "for", "axis", "in", "axes", ":", "\n", "        ", "t", "=", "numpy", ".", "dot", "(", "arcball_constrain_to_axis", "(", "point", ",", "axis", ")", ",", "point", ")", "\n", "if", "t", ">", "mx", ":", "\n", "            ", "nearest", "=", "axis", "\n", "mx", "=", "t", "\n", "", "", "return", "nearest", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.vector_norm": [[1687, 1724], ["numpy.array", "numpy.atleast_1d", "numpy.sqrt", "numpy.sum", "numpy.sqrt", "math.sqrt", "numpy.sum", "numpy.dot"], "function", ["None"], ["def", "vector_norm", "(", "data", ",", "axis", "=", "None", ",", "out", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return length, i.e. Euclidean norm, of ndarray along axis.\n\n    >>> v = numpy.random.random(3)\n    >>> n = vector_norm(v)\n    >>> numpy.allclose(n, numpy.linalg.norm(v))\n    True\n    >>> v = numpy.random.rand(6, 5, 3)\n    >>> n = vector_norm(v, axis=-1)\n    >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=2)))\n    True\n    >>> n = vector_norm(v, axis=1)\n    >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=1)))\n    True\n    >>> v = numpy.random.rand(5, 4, 3)\n    >>> n = numpy.empty((5, 3))\n    >>> vector_norm(v, axis=1, out=n)\n    >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=1)))\n    True\n    >>> vector_norm([])\n    0.0\n    >>> vector_norm([1])\n    1.0\n\n    \"\"\"", "\n", "data", "=", "numpy", ".", "array", "(", "data", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "if", "out", "is", "None", ":", "\n", "        ", "if", "data", ".", "ndim", "==", "1", ":", "\n", "            ", "return", "math", ".", "sqrt", "(", "numpy", ".", "dot", "(", "data", ",", "data", ")", ")", "\n", "", "data", "*=", "data", "\n", "out", "=", "numpy", ".", "atleast_1d", "(", "numpy", ".", "sum", "(", "data", ",", "axis", "=", "axis", ")", ")", "\n", "numpy", ".", "sqrt", "(", "out", ",", "out", ")", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "data", "*=", "data", "\n", "numpy", ".", "sum", "(", "data", ",", "axis", "=", "axis", ",", "out", "=", "out", ")", "\n", "numpy", ".", "sqrt", "(", "out", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.unit_vector": [[1726, 1768], ["numpy.atleast_1d", "numpy.sqrt", "numpy.array", "numpy.sum", "numpy.expand_dims", "math.sqrt", "numpy.array", "numpy.dot"], "function", ["None"], ["", "", "def", "unit_vector", "(", "data", ",", "axis", "=", "None", ",", "out", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return ndarray normalized by length, i.e. Euclidean norm, along axis.\n\n    >>> v0 = numpy.random.random(3)\n    >>> v1 = unit_vector(v0)\n    >>> numpy.allclose(v1, v0 / numpy.linalg.norm(v0))\n    True\n    >>> v0 = numpy.random.rand(5, 4, 3)\n    >>> v1 = unit_vector(v0, axis=-1)\n    >>> v2 = v0 / numpy.expand_dims(numpy.sqrt(numpy.sum(v0*v0, axis=2)), 2)\n    >>> numpy.allclose(v1, v2)\n    True\n    >>> v1 = unit_vector(v0, axis=1)\n    >>> v2 = v0 / numpy.expand_dims(numpy.sqrt(numpy.sum(v0*v0, axis=1)), 1)\n    >>> numpy.allclose(v1, v2)\n    True\n    >>> v1 = numpy.empty((5, 4, 3))\n    >>> unit_vector(v0, axis=1, out=v1)\n    >>> numpy.allclose(v1, v2)\n    True\n    >>> list(unit_vector([]))\n    []\n    >>> list(unit_vector([1]))\n    [1.0]\n\n    \"\"\"", "\n", "if", "out", "is", "None", ":", "\n", "        ", "data", "=", "numpy", ".", "array", "(", "data", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "if", "data", ".", "ndim", "==", "1", ":", "\n", "            ", "data", "/=", "math", ".", "sqrt", "(", "numpy", ".", "dot", "(", "data", ",", "data", ")", ")", "\n", "return", "data", "\n", "", "", "else", ":", "\n", "        ", "if", "out", "is", "not", "data", ":", "\n", "            ", "out", "[", ":", "]", "=", "numpy", ".", "array", "(", "data", ",", "copy", "=", "False", ")", "\n", "", "data", "=", "out", "\n", "", "length", "=", "numpy", ".", "atleast_1d", "(", "numpy", ".", "sum", "(", "data", "*", "data", ",", "axis", ")", ")", "\n", "numpy", ".", "sqrt", "(", "length", ",", "length", ")", "\n", "if", "axis", "is", "not", "None", ":", "\n", "        ", "length", "=", "numpy", ".", "expand_dims", "(", "length", ",", "axis", ")", "\n", "", "data", "/=", "length", "\n", "if", "out", "is", "None", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.random_vector": [[1770, 1783], ["numpy.random.random"], "function", ["None"], ["", "", "def", "random_vector", "(", "size", ")", ":", "\n", "    ", "\"\"\"Return array of random doubles in the half-open interval [0.0, 1.0).\n\n    >>> v = random_vector(10000)\n    >>> numpy.all(v >= 0) and numpy.all(v < 1)\n    True\n    >>> v0 = random_vector(10)\n    >>> v1 = random_vector(10)\n    >>> numpy.any(v0 == v1)\n    False\n\n    \"\"\"", "\n", "return", "numpy", ".", "random", ".", "random", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.vector_product": [[1785, 1804], ["numpy.cross"], "function", ["None"], ["", "def", "vector_product", "(", "v0", ",", "v1", ",", "axis", "=", "0", ")", ":", "\n", "    ", "\"\"\"Return vector perpendicular to vectors.\n\n    >>> v = vector_product([2, 0, 0], [0, 3, 0])\n    >>> numpy.allclose(v, [0, 0, 6])\n    True\n    >>> v0 = [[2, 0, 0, 2], [0, 2, 0, 2], [0, 0, 2, 2]]\n    >>> v1 = [[3], [0], [0]]\n    >>> v = vector_product(v0, v1)\n    >>> numpy.allclose(v, [[0, 0, 0, 0], [0, 0, 6, 6], [0, -6, 0, -6]])\n    True\n    >>> v0 = [[2, 0, 0], [2, 0, 0], [0, 2, 0], [2, 0, 0]]\n    >>> v1 = [[0, 3, 0], [0, 0, 3], [0, 0, 3], [3, 3, 3]]\n    >>> v = vector_product(v0, v1, axis=1)\n    >>> numpy.allclose(v, [[0, 0, 6], [0, -6, 0], [6, 0, 0], [0, -6, 6]])\n    True\n\n    \"\"\"", "\n", "return", "numpy", ".", "cross", "(", "v0", ",", "v1", ",", "axis", "=", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.angle_between_vectors": [[1806, 1835], ["numpy.array", "numpy.array", "numpy.sum", "numpy.arccos", "transformations.vector_norm", "transformations.vector_norm", "numpy.fabs"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.vector_norm", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.vector_norm"], ["", "def", "angle_between_vectors", "(", "v0", ",", "v1", ",", "directed", "=", "True", ",", "axis", "=", "0", ")", ":", "\n", "    ", "\"\"\"Return angle between vectors.\n\n    If directed is False, the input vectors are interpreted as undirected axes,\n    i.e. the maximum angle is pi/2.\n\n    >>> a = angle_between_vectors([1, -2, 3], [-1, 2, -3])\n    >>> numpy.allclose(a, math.pi)\n    True\n    >>> a = angle_between_vectors([1, -2, 3], [-1, 2, -3], directed=False)\n    >>> numpy.allclose(a, 0)\n    True\n    >>> v0 = [[2, 0, 0, 2], [0, 2, 0, 2], [0, 0, 2, 2]]\n    >>> v1 = [[3], [0], [0]]\n    >>> a = angle_between_vectors(v0, v1)\n    >>> numpy.allclose(a, [0, 1.5708, 1.5708, 0.95532])\n    True\n    >>> v0 = [[2, 0, 0], [2, 0, 0], [0, 2, 0], [2, 0, 0]]\n    >>> v1 = [[0, 3, 0], [0, 0, 3], [0, 0, 3], [3, 3, 3]]\n    >>> a = angle_between_vectors(v0, v1, axis=1)\n    >>> numpy.allclose(a, [1.5708, 1.5708, 1.5708, 0.95532])\n    True\n\n    \"\"\"", "\n", "v0", "=", "numpy", ".", "array", "(", "v0", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "v1", "=", "numpy", ".", "array", "(", "v1", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "dot", "=", "numpy", ".", "sum", "(", "v0", "*", "v1", ",", "axis", "=", "axis", ")", "\n", "dot", "/=", "vector_norm", "(", "v0", ",", "axis", "=", "axis", ")", "*", "vector_norm", "(", "v1", ",", "axis", "=", "axis", ")", "\n", "return", "numpy", ".", "arccos", "(", "dot", "if", "directed", "else", "numpy", ".", "fabs", "(", "dot", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.inverse_matrix": [[1837, 1851], ["numpy.linalg.inv"], "function", ["None"], ["", "def", "inverse_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return inverse of square transformation matrix.\n\n    >>> M0 = random_rotation_matrix()\n    >>> M1 = inverse_matrix(M0.T)\n    >>> numpy.allclose(M1, numpy.linalg.inv(M0.T))\n    True\n    >>> for size in range(1, 7):\n    ...     M0 = numpy.random.rand(size, size)\n    ...     M1 = inverse_matrix(M0)\n    ...     if not numpy.allclose(M1, numpy.linalg.inv(M0)): print(size)\n\n    \"\"\"", "\n", "return", "numpy", ".", "linalg", ".", "inv", "(", "matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.concatenate_matrices": [[1853, 1867], ["numpy.identity", "numpy.dot"], "function", ["None"], ["", "def", "concatenate_matrices", "(", "*", "matrices", ")", ":", "\n", "    ", "\"\"\"Return concatenation of series of transformation matrices.\n\n    >>> M = numpy.random.rand(16).reshape((4, 4)) - 0.5\n    >>> numpy.allclose(M, concatenate_matrices(M))\n    True\n    >>> numpy.allclose(numpy.dot(M, M.T), concatenate_matrices(M, M.T))\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "for", "i", "in", "matrices", ":", "\n", "        ", "M", "=", "numpy", ".", "dot", "(", "M", ",", "i", ")", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.is_same_transform": [[1869, 1883], ["numpy.array", "numpy.array", "numpy.allclose"], "function", ["None"], ["", "def", "is_same_transform", "(", "matrix0", ",", "matrix1", ")", ":", "\n", "    ", "\"\"\"Return True if two matrices perform same transformation.\n\n    >>> is_same_transform(numpy.identity(4), numpy.identity(4))\n    True\n    >>> is_same_transform(numpy.identity(4), random_rotation_matrix())\n    False\n\n    \"\"\"", "\n", "matrix0", "=", "numpy", ".", "array", "(", "matrix0", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "matrix0", "/=", "matrix0", "[", "3", ",", "3", "]", "\n", "matrix1", "=", "numpy", ".", "array", "(", "matrix1", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "matrix1", "/=", "matrix1", "[", "3", ",", "3", "]", "\n", "return", "numpy", ".", "allclose", "(", "matrix0", ",", "matrix1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations._import_module": [[1885, 1915], ["dir", "import_module", "import_module", "getattr", "warnings.warn", "attr.startswith", "globals", "globals", "globals", "globals", "warnings.warn"], "function", ["None"], ["", "def", "_import_module", "(", "name", ",", "package", "=", "None", ",", "warn", "=", "True", ",", "prefix", "=", "'_py_'", ",", "ignore", "=", "'_'", ")", ":", "\n", "    ", "\"\"\"Try import all public attributes from module into global namespace.\n\n    Existing attributes with name clashes are renamed with prefix.\n    Attributes starting with underscore are ignored by default.\n\n    Return True on successful import.\n\n    \"\"\"", "\n", "import", "warnings", "\n", "from", "importlib", "import", "import_module", "\n", "try", ":", "\n", "        ", "if", "not", "package", ":", "\n", "            ", "module", "=", "import_module", "(", "name", ")", "\n", "", "else", ":", "\n", "            ", "module", "=", "import_module", "(", "'.'", "+", "name", ",", "package", "=", "package", ")", "\n", "", "", "except", "ImportError", ":", "\n", "        ", "if", "warn", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"failed to import module %s\"", "%", "name", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "attr", "in", "dir", "(", "module", ")", ":", "\n", "            ", "if", "ignore", "and", "attr", ".", "startswith", "(", "ignore", ")", ":", "\n", "                ", "continue", "\n", "", "if", "prefix", ":", "\n", "                ", "if", "attr", "in", "globals", "(", ")", ":", "\n", "                    ", "globals", "(", ")", "[", "prefix", "+", "attr", "]", "=", "globals", "(", ")", "[", "attr", "]", "\n", "", "elif", "warn", ":", "\n", "                    ", "warnings", ".", "warn", "(", "\"no Python implementation of \"", "+", "attr", ")", "\n", "", "", "globals", "(", ")", "[", "attr", "]", "=", "getattr", "(", "module", ",", "attr", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.file_interface.has_utf8_bom": [[35, 45], ["os.path.getsize", "open", "int", "binascii.hexlify", "f.read"], "function", ["None"], ["", "def", "has_utf8_bom", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"\n    Checks if the given file starts with a UTF8 BOM\n    wikipedia.org/wiki/Byte_order_mark\n    \"\"\"", "\n", "size_bytes", "=", "os", ".", "path", ".", "getsize", "(", "file_path", ")", "\n", "if", "size_bytes", "<", "3", ":", "\n", "        ", "return", "False", "\n", "", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "not", "int", "(", "binascii", ".", "hexlify", "(", "f", ".", "read", "(", "3", ")", ")", ",", "16", ")", "^", "0xEFBBBF", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.file_interface.csv_read_matrix": [[47, 73], ["hasattr", "csv.reader", "file_interface.has_utf8_bom", "os.path.isfile", "file_interface.FileInterfaceException", "open", "csv.reader", "f.seek", "line.startswith", "str", "line.startswith"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.has_utf8_bom"], ["", "", "def", "csv_read_matrix", "(", "file_path", ",", "delim", "=", "','", ",", "comment_str", "=", "\"#\"", ")", ":", "\n", "    ", "\"\"\"\n    directly parse a csv-like file into a matrix\n    :param file_path: path of csv file (or file handle)\n    :param delim: delimiter character\n    :param comment_str: string indicating a comment line to ignore\n    :return: 2D list with raw data (string)\n    \"\"\"", "\n", "if", "hasattr", "(", "file_path", ",", "'read'", ")", ":", "# if file handle", "\n", "        ", "generator", "=", "(", "line", "for", "line", "in", "file_path", "\n", "if", "not", "line", ".", "startswith", "(", "comment_str", ")", ")", "\n", "reader", "=", "csv", ".", "reader", "(", "generator", ",", "delimiter", "=", "delim", ")", "\n", "mat", "=", "[", "row", "for", "row", "in", "reader", "]", "\n", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "file_path", ")", ":", "\n", "            ", "raise", "FileInterfaceException", "(", "\"csv file \"", "+", "str", "(", "file_path", ")", "+", "\n", "\" does not exist\"", ")", "\n", "", "skip_3_bytes", "=", "has_utf8_bom", "(", "file_path", ")", "\n", "with", "open", "(", "file_path", ")", "as", "f", ":", "\n", "            ", "if", "skip_3_bytes", ":", "\n", "                ", "f", ".", "seek", "(", "3", ")", "\n", "", "generator", "=", "(", "line", "for", "line", "in", "f", "\n", "if", "not", "line", ".", "startswith", "(", "comment_str", ")", ")", "\n", "reader", "=", "csv", ".", "reader", "(", "generator", ",", "delimiter", "=", "delim", ")", "\n", "mat", "=", "[", "row", "for", "row", "in", "reader", "]", "\n", "", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.file_interface.read_tum_trajectory_file": [[75, 98], ["file_interface.csv_read_matrix", "numpy.roll", "evo.core.trajectory.PoseTrajectory3D", "file_interface.FileInterfaceException", "numpy.array().astype", "hasattr", "logger.debug", "len", "len", "file_interface.FileInterfaceException", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.csv_read_matrix"], ["", "def", "read_tum_trajectory_file", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"\n    parses trajectory file in TUM format (timestamp tx ty tz qx qy qz qw)\n    :param file_path: the trajectory file path (or file handle)\n    :return: trajectory.PoseTrajectory3D object\n    \"\"\"", "\n", "raw_mat", "=", "csv_read_matrix", "(", "file_path", ",", "delim", "=", "\" \"", ",", "comment_str", "=", "\"#\"", ")", "\n", "error_msg", "=", "(", "\"TUM trajectory files must have 8 entries per row \"", "\n", "\"and no trailing delimiter at the end of the rows (space)\"", ")", "\n", "if", "len", "(", "raw_mat", ")", ">", "0", "and", "len", "(", "raw_mat", "[", "0", "]", ")", "!=", "8", ":", "\n", "        ", "raise", "FileInterfaceException", "(", "error_msg", ")", "\n", "", "try", ":", "\n", "        ", "mat", "=", "np", ".", "array", "(", "raw_mat", ")", ".", "astype", "(", "float", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "raise", "FileInterfaceException", "(", "error_msg", ")", "\n", "", "stamps", "=", "mat", "[", ":", ",", "0", "]", "# n x 1", "\n", "xyz", "=", "mat", "[", ":", ",", "1", ":", "4", "]", "# n x 3", "\n", "quat", "=", "mat", "[", ":", ",", "4", ":", "]", "# n x 4", "\n", "quat", "=", "np", ".", "roll", "(", "quat", ",", "1", ",", "axis", "=", "1", ")", "# shift 1 column -> w in front column", "\n", "if", "not", "hasattr", "(", "file_path", ",", "'read'", ")", ":", "# if not file handle", "\n", "        ", "logger", ".", "debug", "(", "\"Loaded {} stamps and poses from: {}\"", ".", "format", "(", "\n", "len", "(", "stamps", ")", ",", "file_path", ")", ")", "\n", "", "return", "PoseTrajectory3D", "(", "xyz", ",", "quat", ",", "stamps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.file_interface.write_tum_trajectory_file": [[100, 121], ["numpy.roll", "numpy.column_stack", "numpy.savetxt", "isinstance", "isinstance", "isinstance", "file_interface.FileInterfaceException", "logger.info", "evo.tools.user.check_and_confirm_overwrite"], "function", ["None"], ["", "def", "write_tum_trajectory_file", "(", "file_path", ",", "traj", ",", "confirm_overwrite", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :param file_path: desired text file for trajectory (string or handle)\n    :param traj: trajectory.PoseTrajectory3D\n    :param confirm_overwrite: whether to require user interaction\n           to overwrite existing files\n    \"\"\"", "\n", "if", "isinstance", "(", "file_path", ",", "str", ")", "and", "confirm_overwrite", ":", "\n", "        ", "if", "not", "user", ".", "check_and_confirm_overwrite", "(", "file_path", ")", ":", "\n", "            ", "return", "\n", "", "", "if", "not", "isinstance", "(", "traj", ",", "PoseTrajectory3D", ")", ":", "\n", "        ", "raise", "FileInterfaceException", "(", "\n", "\"trajectory must be a PoseTrajectory3D object\"", ")", "\n", "", "stamps", "=", "traj", ".", "timestamps", "\n", "xyz", "=", "traj", ".", "positions_xyz", "\n", "# shift -1 column -> w in back column", "\n", "quat", "=", "np", ".", "roll", "(", "traj", ".", "orientations_quat_wxyz", ",", "-", "1", ",", "axis", "=", "1", ")", "\n", "mat", "=", "np", ".", "column_stack", "(", "(", "stamps", ",", "xyz", ",", "quat", ")", ")", "\n", "np", ".", "savetxt", "(", "file_path", ",", "mat", ",", "delimiter", "=", "\" \"", ")", "\n", "if", "isinstance", "(", "file_path", ",", "str", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Trajectory saved to: \"", "+", "file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.file_interface.read_kitti_poses_file": [[123, 147], ["file_interface.csv_read_matrix", "evo.core.trajectory.PosePath3D", "file_interface.FileInterfaceException", "numpy.array().astype", "numpy.array", "hasattr", "logger.debug", "len", "len", "file_interface.FileInterfaceException", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.csv_read_matrix"], ["", "", "def", "read_kitti_poses_file", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"\n    parses pose file in KITTI format (first 3 rows of SE(3) matrix per line)\n    :param file_path: the trajectory file path (or file handle)\n    :return: trajectory.PosePath3D\n    \"\"\"", "\n", "raw_mat", "=", "csv_read_matrix", "(", "file_path", ",", "delim", "=", "\" \"", ",", "comment_str", "=", "\"#\"", ")", "\n", "error_msg", "=", "(", "\"KITTI pose files must have 12 entries per row \"", "\n", "\"and no trailing delimiter at the end of the rows (space)\"", ")", "\n", "if", "len", "(", "raw_mat", ")", ">", "0", "and", "len", "(", "raw_mat", "[", "0", "]", ")", "!=", "12", ":", "\n", "        ", "raise", "FileInterfaceException", "(", "error_msg", ")", "\n", "", "try", ":", "\n", "        ", "mat", "=", "np", ".", "array", "(", "raw_mat", ")", ".", "astype", "(", "float", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "raise", "FileInterfaceException", "(", "error_msg", ")", "\n", "# yapf: disable", "\n", "", "poses", "=", "[", "np", ".", "array", "(", "[", "[", "r", "[", "0", "]", ",", "r", "[", "1", "]", ",", "r", "[", "2", "]", ",", "r", "[", "3", "]", "]", ",", "\n", "[", "r", "[", "4", "]", ",", "r", "[", "5", "]", ",", "r", "[", "6", "]", ",", "r", "[", "7", "]", "]", ",", "\n", "[", "r", "[", "8", "]", ",", "r", "[", "9", "]", ",", "r", "[", "10", "]", ",", "r", "[", "11", "]", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "for", "r", "in", "mat", "]", "\n", "# yapf: enable", "\n", "if", "not", "hasattr", "(", "file_path", ",", "'read'", ")", ":", "# if not file handle", "\n", "        ", "logger", ".", "debug", "(", "\"Loaded {} poses from: {}\"", ".", "format", "(", "len", "(", "poses", ")", ",", "file_path", ")", ")", "\n", "", "return", "PosePath3D", "(", "poses_se3", "=", "poses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.file_interface.write_kitti_poses_file": [[149, 164], ["numpy.savetxt", "isinstance", "isinstance", "logger.info", "evo.tools.user.check_and_confirm_overwrite", "p.flatten"], "function", ["None"], ["", "def", "write_kitti_poses_file", "(", "file_path", ",", "traj", ",", "confirm_overwrite", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :param file_path: desired text file for trajectory (string or handle)\n    :param traj: trajectory.PosePath3D or trajectory.PoseTrajectory3D\n    :param confirm_overwrite: whether to require user interaction\n           to overwrite existing files\n    \"\"\"", "\n", "if", "isinstance", "(", "file_path", ",", "str", ")", "and", "confirm_overwrite", ":", "\n", "        ", "if", "not", "user", ".", "check_and_confirm_overwrite", "(", "file_path", ")", ":", "\n", "            ", "return", "\n", "# first 3 rows  of SE(3) matrix flattened", "\n", "", "", "poses_flat", "=", "[", "p", ".", "flatten", "(", ")", "[", ":", "-", "4", "]", "for", "p", "in", "traj", ".", "poses_se3", "]", "\n", "np", ".", "savetxt", "(", "file_path", ",", "poses_flat", ",", "delimiter", "=", "' '", ")", "\n", "if", "isinstance", "(", "file_path", ",", "str", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Poses saved to: \"", "+", "file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.file_interface.read_euroc_csv_trajectory": [[166, 187], ["file_interface.csv_read_matrix", "numpy.divide", "logger.debug", "evo.core.trajectory.PoseTrajectory3D", "file_interface.FileInterfaceException", "numpy.array().astype", "len", "len", "file_interface.FileInterfaceException", "len", "numpy.array"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.csv_read_matrix"], ["", "", "def", "read_euroc_csv_trajectory", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"\n    parses ground truth trajectory from EuRoC MAV state estimate .csv\n    :param file_path: <sequence>/mav0/state_groundtruth_estimate0/data.csv\n    :return: trajectory.PoseTrajectory3D object\n    \"\"\"", "\n", "raw_mat", "=", "csv_read_matrix", "(", "file_path", ",", "delim", "=", "\",\"", ",", "comment_str", "=", "\"#\"", ")", "\n", "error_msg", "=", "(", "\"EuRoC MAV state ground truth must have 17 entries per row \"", "\n", "\"and no trailing delimiter at the end of the rows (comma)\"", ")", "\n", "if", "len", "(", "raw_mat", ")", ">", "0", "and", "len", "(", "raw_mat", "[", "0", "]", ")", "!=", "17", ":", "\n", "        ", "raise", "FileInterfaceException", "(", "error_msg", ")", "\n", "", "try", ":", "\n", "        ", "mat", "=", "np", ".", "array", "(", "raw_mat", ")", ".", "astype", "(", "float", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "raise", "FileInterfaceException", "(", "error_msg", ")", "\n", "", "stamps", "=", "np", ".", "divide", "(", "mat", "[", ":", ",", "0", "]", ",", "1e9", ")", "# n x 1  -  nanoseconds to seconds", "\n", "xyz", "=", "mat", "[", ":", ",", "1", ":", "4", "]", "# n x 3", "\n", "quat", "=", "mat", "[", ":", ",", "4", ":", "8", "]", "# n x 4", "\n", "logger", ".", "debug", "(", "\"Loaded {} stamps and poses from: {}\"", ".", "format", "(", "\n", "len", "(", "stamps", ")", ",", "file_path", ")", ")", "\n", "return", "PoseTrajectory3D", "(", "xyz", ",", "quat", ",", "stamps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.file_interface._get_xyz_quat_from_transform_stamped": [[189, 199], ["None"], "function", ["None"], ["", "def", "_get_xyz_quat_from_transform_stamped", "(", "msg", ")", ":", "\n", "    ", "xyz", "=", "[", "\n", "msg", ".", "transform", ".", "translation", ".", "x", ",", "msg", ".", "transform", ".", "translation", ".", "y", ",", "\n", "msg", ".", "transform", ".", "translation", ".", "z", "\n", "]", "\n", "quat", "=", "[", "\n", "msg", ".", "transform", ".", "rotation", ".", "w", ",", "msg", ".", "transform", ".", "rotation", ".", "x", ",", "\n", "msg", ".", "transform", ".", "rotation", ".", "y", ",", "msg", ".", "transform", ".", "rotation", ".", "z", "\n", "]", "\n", "return", "xyz", ",", "quat", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.file_interface._get_xyz_quat_from_pose_or_odometry_msg": [[201, 212], ["hasattr", "hasattr"], "function", ["None"], ["", "def", "_get_xyz_quat_from_pose_or_odometry_msg", "(", "msg", ")", ":", "\n", "# Make nav_msgs/Odometry behave like geometry_msgs/PoseStamped.", "\n", "    ", "while", "not", "hasattr", "(", "msg", ".", "pose", ",", "'position'", ")", "and", "not", "hasattr", "(", "\n", "msg", ".", "pose", ",", "'orientation'", ")", ":", "\n", "        ", "msg", "=", "msg", ".", "pose", "\n", "", "xyz", "=", "[", "msg", ".", "pose", ".", "position", ".", "x", ",", "msg", ".", "pose", ".", "position", ".", "y", ",", "msg", ".", "pose", ".", "position", ".", "z", "]", "\n", "quat", "=", "[", "\n", "msg", ".", "pose", ".", "orientation", ".", "w", ",", "msg", ".", "pose", ".", "orientation", ".", "x", ",", "msg", ".", "pose", ".", "orientation", ".", "y", ",", "\n", "msg", ".", "pose", ".", "orientation", ".", "z", "\n", "]", "\n", "return", "xyz", ",", "quat", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.file_interface.get_supported_topics": [[214, 223], ["bag_handle.get_type_and_topic_info", "sorted", "topic_info[].keys"], "function", ["None"], ["", "def", "get_supported_topics", "(", "bag_handle", ")", ":", "\n", "    ", "\"\"\"\n    :param bag_handle: opened bag handle, from rosbag.Bag(...)\n    :return: list of ROS topics that are supported by this module\n    \"\"\"", "\n", "topic_info", "=", "bag_handle", ".", "get_type_and_topic_info", "(", ")", "\n", "return", "sorted", "(", "[", "\n", "t", "for", "t", "in", "topic_info", "[", "1", "]", ".", "keys", "(", ")", "\n", "if", "topic_info", "[", "1", "]", "[", "t", "]", "[", "0", "]", "in", "SUPPORTED_ROS_MSGS", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.file_interface.read_bag_trajectory": [[226, 260], ["bag_handle.read_messages", "logger.debug", "bag_handle.read_messages", "next", "evo.core.trajectory.PoseTrajectory3D", "file_interface.FileInterfaceException", "file_interface.FileInterfaceException", "stamps.append", "get_xyz_quat", "xyz.append", "quat.append", "bag_handle.get_message_count", "len", "bag_handle.get_type_and_topic_info"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.Arcball.next"], ["", "def", "read_bag_trajectory", "(", "bag_handle", ",", "topic", ")", ":", "\n", "    ", "\"\"\"\n    :param bag_handle: opened bag handle, from rosbag.Bag(...)\n    :param topic: trajectory topic of supported message type\n    :return: trajectory.PoseTrajectory3D\n    \"\"\"", "\n", "if", "not", "bag_handle", ".", "get_message_count", "(", "topic", ")", ">", "0", ":", "\n", "        ", "raise", "FileInterfaceException", "(", "\"no messages for topic '\"", "+", "topic", "+", "\n", "\"' in bag\"", ")", "\n", "", "msg_type", "=", "bag_handle", ".", "get_type_and_topic_info", "(", ")", ".", "topics", "[", "topic", "]", ".", "msg_type", "\n", "if", "msg_type", "not", "in", "SUPPORTED_ROS_MSGS", ":", "\n", "        ", "raise", "FileInterfaceException", "(", "\n", "\"unsupported message type: {}\"", ".", "format", "(", "msg_type", ")", ")", "\n", "\n", "# Choose appropriate message conversion.", "\n", "", "if", "msg_type", "==", "\"geometry_msgs/TransformStamped\"", ":", "\n", "        ", "get_xyz_quat", "=", "_get_xyz_quat_from_transform_stamped", "\n", "", "else", ":", "\n", "        ", "get_xyz_quat", "=", "_get_xyz_quat_from_pose_or_odometry_msg", "\n", "\n", "", "stamps", ",", "xyz", ",", "quat", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "topic", ",", "msg", ",", "_", "in", "bag_handle", ".", "read_messages", "(", "topic", ")", ":", "\n", "# Use the header timestamps (converted to seconds).", "\n", "        ", "t", "=", "msg", ".", "header", ".", "stamp", "\n", "stamps", ".", "append", "(", "t", ".", "secs", "+", "(", "t", ".", "nsecs", "*", "1e-9", ")", ")", "\n", "xyz_t", ",", "quat_t", "=", "get_xyz_quat", "(", "msg", ")", "\n", "xyz", ".", "append", "(", "xyz_t", ")", "\n", "quat", ".", "append", "(", "quat_t", ")", "\n", "", "logger", ".", "debug", "(", "\"Loaded {} {} messages of topic: {}\"", ".", "format", "(", "\n", "len", "(", "stamps", ")", ",", "msg_type", ",", "topic", ")", ")", "\n", "generator", "=", "bag_handle", ".", "read_messages", "(", "topic", ")", "\n", "_", ",", "first_msg", ",", "_", "=", "next", "(", "generator", ")", "\n", "frame_id", "=", "first_msg", ".", "header", ".", "frame_id", "\n", "return", "PoseTrajectory3D", "(", "xyz", ",", "quat", ",", "stamps", ",", "meta", "=", "{", "\"frame_id\"", ":", "frame_id", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.file_interface.write_bag_trajectory": [[262, 288], ["zip", "logger.info", "isinstance", "file_interface.FileInterfaceException", "PoseStamped", "rospy.Time.from_sec", "bag_handle.write"], "function", ["None"], ["", "def", "write_bag_trajectory", "(", "bag_handle", ",", "traj", ",", "topic_name", ",", "frame_id", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"\n    :param bag_handle: opened bag handle, from rosbag.Bag(...)\n    :param traj: trajectory.PoseTrajectory3D\n    :param topic_name: the desired topic name for the trajectory\n    :param frame_id: optional ROS frame_id\n    \"\"\"", "\n", "import", "rospy", "\n", "from", "geometry_msgs", ".", "msg", "import", "PoseStamped", "\n", "if", "not", "isinstance", "(", "traj", ",", "PoseTrajectory3D", ")", ":", "\n", "        ", "raise", "FileInterfaceException", "(", "\n", "\"trajectory must be a PoseTrajectory3D object\"", ")", "\n", "", "for", "stamp", ",", "xyz", ",", "quat", "in", "zip", "(", "traj", ".", "timestamps", ",", "traj", ".", "positions_xyz", ",", "\n", "traj", ".", "orientations_quat_wxyz", ")", ":", "\n", "        ", "p", "=", "PoseStamped", "(", ")", "\n", "p", ".", "header", ".", "stamp", "=", "rospy", ".", "Time", ".", "from_sec", "(", "stamp", ")", "\n", "p", ".", "header", ".", "frame_id", "=", "frame_id", "\n", "p", ".", "pose", ".", "position", ".", "x", "=", "xyz", "[", "0", "]", "\n", "p", ".", "pose", ".", "position", ".", "y", "=", "xyz", "[", "1", "]", "\n", "p", ".", "pose", ".", "position", ".", "z", "=", "xyz", "[", "2", "]", "\n", "p", ".", "pose", ".", "orientation", ".", "w", "=", "quat", "[", "0", "]", "\n", "p", ".", "pose", ".", "orientation", ".", "x", "=", "quat", "[", "1", "]", "\n", "p", ".", "pose", ".", "orientation", ".", "y", "=", "quat", "[", "2", "]", "\n", "p", ".", "pose", ".", "orientation", ".", "z", "=", "quat", "[", "3", "]", "\n", "bag_handle", ".", "write", "(", "topic_name", ",", "p", ",", "t", "=", "p", ".", "header", ".", "stamp", ")", "\n", "", "logger", ".", "info", "(", "\"Saved geometry_msgs/PoseStamped topic: \"", "+", "topic_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.file_interface.save_res_file": [[290, 325], ["logger.debug", "zipfile.ZipFile", "archive.writestr", "archive.writestr", "result_obj.np_arrays.items", "result_obj.trajectories.items", "evo.tools.user.check_and_confirm_overwrite", "json.dumps", "json.dumps", "TemporaryFile", "numpy.save", "TemporaryFile.seek", "archive.writestr", "TemporaryFile.close", "TemporaryFile", "TemporaryFile.seek", "archive.writestr", "TemporaryFile.close", "TemporaryFile.read", "type", "file_interface.write_kitti_poses_file", "TemporaryFile.read", "type", "file_interface.write_tum_trajectory_file", "file_interface.FileInterfaceException"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.file_interface.write_kitti_poses_file", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.file_interface.write_tum_trajectory_file"], ["", "def", "save_res_file", "(", "zip_path", ",", "result_obj", ",", "confirm_overwrite", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    save results of a pose error metric (pe_metric) to a zip file\n    :param zip_path: path to zip file\n    :param result_obj: evo.core.result.Result instance\n    :param confirm_overwrite: whether to require user interaction\n           to overwrite existing files\n    \"\"\"", "\n", "from", "tempfile", "import", "TemporaryFile", "\n", "logger", ".", "debug", "(", "\"Saving results to \"", "+", "zip_path", "+", "\"...\"", ")", "\n", "if", "confirm_overwrite", "and", "not", "user", ".", "check_and_confirm_overwrite", "(", "zip_path", ")", ":", "\n", "        ", "return", "\n", "", "with", "zipfile", ".", "ZipFile", "(", "zip_path", ",", "'w'", ")", "as", "archive", ":", "\n", "        ", "archive", ".", "writestr", "(", "\"info.json\"", ",", "json", ".", "dumps", "(", "result_obj", ".", "info", ")", ")", "\n", "archive", ".", "writestr", "(", "\"stats.json\"", ",", "json", ".", "dumps", "(", "result_obj", ".", "stats", ")", ")", "\n", "for", "name", ",", "array", "in", "result_obj", ".", "np_arrays", ".", "items", "(", ")", ":", "\n", "            ", "tmp_file", "=", "TemporaryFile", "(", ")", "\n", "np", ".", "save", "(", "tmp_file", ",", "array", ")", "\n", "tmp_file", ".", "seek", "(", "0", ")", "\n", "archive", ".", "writestr", "(", "\"{}.npz\"", ".", "format", "(", "name", ")", ",", "tmp_file", ".", "read", "(", ")", ")", "\n", "tmp_file", ".", "close", "(", ")", "\n", "", "for", "name", ",", "traj", "in", "result_obj", ".", "trajectories", ".", "items", "(", ")", ":", "\n", "            ", "tmp_file", "=", "TemporaryFile", "(", ")", "\n", "if", "type", "(", "traj", ")", "is", "PosePath3D", ":", "\n", "                ", "fmt_suffix", "=", "\".kitti\"", "\n", "write_kitti_poses_file", "(", "tmp_file", ",", "traj", ")", "\n", "", "elif", "type", "(", "traj", ")", "is", "PoseTrajectory3D", ":", "\n", "                ", "fmt_suffix", "=", "\".tum\"", "\n", "write_tum_trajectory_file", "(", "tmp_file", ",", "traj", ")", "\n", "", "else", ":", "\n", "                ", "raise", "FileInterfaceException", "(", "\n", "\"unknown format of trajectory {}\"", ".", "format", "(", "name", ")", ")", "\n", "", "tmp_file", ".", "seek", "(", "0", ")", "\n", "archive", ".", "writestr", "(", "\"{}{}\"", ".", "format", "(", "name", ",", "fmt_suffix", ")", ",", "tmp_file", ".", "read", "(", ")", ")", "\n", "tmp_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.file_interface.load_res_file": [[327, 366], ["logger.debug", "evo.core.result.Result", "zipfile.ZipFile", "archive.namelist", "json.loads", "json.loads", "logger.warning", "archive.read().decode", "archive.read().decode", "set", "archive.namelist", "n.endswith", "io.BytesIO", "numpy.load", "result.Result.add_np_array", "archive.read", "os.path.splitext", "archive.namelist", "n.endswith", "io.TextIOWrapper", "file_interface.read_tum_trajectory_file", "result.Result.add_trajectory", "archive.namelist", "n.endswith", "io.TextIOWrapper", "file_interface.read_kitti_poses_file", "result.Result.add_trajectory", "archive.read", "archive.read", "os.path.basename", "archive.open", "os.path.splitext", "archive.open", "os.path.splitext", "os.path.basename", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.file_interface.read_tum_trajectory_file", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.read_kitti_poses_file"], ["", "", "", "def", "load_res_file", "(", "zip_path", ",", "load_trajectories", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    load contents of a result .zip file saved with save_res_file(...)\n    :param zip_path: path to zip file\n    :param load_trajectories: set to True to load also the (backup) trajectories\n    :return: evo.core.result.Result instance\n    \"\"\"", "\n", "logger", ".", "debug", "(", "\"Loading result from {} ...\"", ".", "format", "(", "zip_path", ")", ")", "\n", "result_obj", "=", "result", ".", "Result", "(", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "zip_path", ",", "mode", "=", "'r'", ")", "as", "archive", ":", "\n", "        ", "file_list", "=", "archive", ".", "namelist", "(", ")", "\n", "if", "not", "{", "\"error_array.npz\"", ",", "\"info.json\"", ",", "\"stats.json\"", "\n", "}", "<=", "set", "(", "file_list", ")", ":", "\n", "            ", "logger", ".", "warning", "(", "\"{} not suitable for evo_res\"", ".", "format", "(", "zip_path", ")", ")", "\n", "", "npz_files", "=", "[", "n", "for", "n", "in", "archive", ".", "namelist", "(", ")", "if", "n", ".", "endswith", "(", "\".npz\"", ")", "]", "\n", "for", "filename", "in", "npz_files", ":", "\n", "            ", "with", "io", ".", "BytesIO", "(", "archive", ".", "read", "(", "filename", ")", ")", "as", "f", ":", "\n", "                ", "array", "=", "np", ".", "load", "(", "f", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "filename", ")", ")", "[", "0", "]", "\n", "result_obj", ".", "add_np_array", "(", "name", ",", "array", ")", "\n", "", "", "if", "load_trajectories", ":", "\n", "            ", "tum_files", "=", "[", "n", "for", "n", "in", "archive", ".", "namelist", "(", ")", "if", "n", ".", "endswith", "(", "\".tum\"", ")", "]", "\n", "for", "filename", "in", "tum_files", ":", "\n", "                ", "with", "io", ".", "TextIOWrapper", "(", "archive", ".", "open", "(", "filename", ",", "mode", "=", "'r'", ")", ")", "as", "f", ":", "\n", "                    ", "traj", "=", "read_tum_trajectory_file", "(", "f", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "filename", ")", ")", "[", "0", "]", "\n", "result_obj", ".", "add_trajectory", "(", "name", ",", "traj", ")", "\n", "", "", "kitti_files", "=", "[", "\n", "n", "for", "n", "in", "archive", ".", "namelist", "(", ")", "if", "n", ".", "endswith", "(", "\".kitti\"", ")", "\n", "]", "\n", "for", "filename", "in", "kitti_files", ":", "\n", "                ", "with", "io", ".", "TextIOWrapper", "(", "archive", ".", "open", "(", "filename", ",", "mode", "=", "'r'", ")", ")", "as", "f", ":", "\n", "                    ", "traj", "=", "read_kitti_poses_file", "(", "f", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "filename", ")", ")", "[", "0", "]", "\n", "result_obj", ".", "add_trajectory", "(", "name", ",", "traj", ")", "\n", "", "", "", "result_obj", ".", "info", "=", "json", ".", "loads", "(", "archive", ".", "read", "(", "\"info.json\"", ")", ".", "decode", "(", "\"utf-8\"", ")", ")", "\n", "result_obj", ".", "stats", "=", "json", ".", "loads", "(", "\n", "archive", ".", "read", "(", "\"stats.json\"", ")", ".", "decode", "(", "\"utf-8\"", ")", ")", "\n", "", "return", "result_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.file_interface.load_transform_json": [[368, 384], ["open", "json.load", "numpy.array", "numpy.array", "evo.se3", "all", "file_interface.FileInterfaceException", "evo.so3_from_se3", "evo.quaternion_matrix", "str"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.se3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.so3_from_se3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.quaternion_matrix"], ["", "def", "load_transform_json", "(", "json_path", ")", ":", "\n", "    ", "\"\"\"\n    load a transformation stored in xyz + quaternion format in a .json file\n    :param json_path: path to the .json file\n    :return: t (SE(3) matrix)\n    \"\"\"", "\n", "with", "open", "(", "json_path", ",", "'r'", ")", "as", "tf_file", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "tf_file", ")", "\n", "keys", "=", "(", "\"x\"", ",", "\"y\"", ",", "\"z\"", ",", "\"qx\"", ",", "\"qy\"", ",", "\"qz\"", ",", "\"qw\"", ")", "\n", "if", "not", "all", "(", "key", "in", "data", "for", "key", "in", "keys", ")", ":", "\n", "            ", "raise", "FileInterfaceException", "(", "\n", "\"invalid transform file - expected keys \"", "+", "str", "(", "keys", ")", ")", "\n", "", "xyz", "=", "np", ".", "array", "(", "[", "data", "[", "\"x\"", "]", ",", "data", "[", "\"y\"", "]", ",", "data", "[", "\"z\"", "]", "]", ")", "\n", "quat", "=", "np", ".", "array", "(", "[", "data", "[", "\"qw\"", "]", ",", "data", "[", "\"qx\"", "]", ",", "data", "[", "\"qy\"", "]", ",", "data", "[", "\"qz\"", "]", "]", ")", "\n", "t", "=", "lie", ".", "se3", "(", "lie", ".", "so3_from_se3", "(", "tr", ".", "quaternion_matrix", "(", "quat", ")", ")", ",", "xyz", ")", "\n", "return", "t", "", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.hat": [[24, 33], ["numpy.array"], "function", ["None"], ["def", "hat", "(", "v", ")", ":", "\n", "    ", "\"\"\"\n    :param v: 3x1 vector\n    :return: 3x3 skew symmetric matrix\n    \"\"\"", "\n", "# yapf: disable", "\n", "return", "np", ".", "array", "(", "[", "[", "0.0", ",", "-", "v", "[", "2", "]", ",", "v", "[", "1", "]", "]", ",", "\n", "[", "v", "[", "2", "]", ",", "0.0", ",", "-", "v", "[", "0", "]", "]", ",", "\n", "[", "-", "v", "[", "1", "]", ",", "v", "[", "0", "]", ",", "0.0", "]", "]", ")", "\n", "# yapf: enable", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.vee": [[36, 42], ["numpy.array"], "function", ["None"], ["", "def", "vee", "(", "m", ")", ":", "\n", "    ", "\"\"\"\n    :param m: 3x3 skew symmetric matrix\n    :return: 3x1 vector\n    \"\"\"", "\n", "return", "np", ".", "array", "(", "[", "-", "m", "[", "1", ",", "2", "]", ",", "m", "[", "0", ",", "2", "]", ",", "-", "m", "[", "0", ",", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.so3_exp": [[44, 53], ["scipy.expm", "numpy.cross", "numpy.eye", "numpy.linalg.norm"], "function", ["None"], ["", "def", "so3_exp", "(", "axis", ",", "angle", ")", ":", "\n", "    ", "\"\"\"\n    Computes an SO(3) matrix from an axis/angle representation.\n    Code source: http://stackoverflow.com/a/25709323\n    :param axis: 3x1 rotation axis (unit vector!)\n    :param angle: radians\n    :return: SO(3) rotation matrix (matrix exponential of so(3))\n    \"\"\"", "\n", "return", "sl", ".", "expm", "(", "np", ".", "cross", "(", "np", ".", "eye", "(", "3", ")", ",", "axis", "/", "np", ".", "linalg", ".", "norm", "(", "axis", ")", "*", "angle", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.so3_log": [[55, 73], ["mono.rotation_from_matrix", "lie_algebra.is_so3", "print", "numpy.arccos", "lie_algebra.se3", "lie_algebra.hat", "min", "max", "numpy.trace"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.rotation_from_matrix", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.is_so3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.se3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.hat"], ["", "def", "so3_log", "(", "r", ",", "return_angle_only", "=", "True", ",", "return_skew", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :param r: SO(3) rotation matrix\n    :param return_angle_only: return only the angle (default)\n    :param return_skew: return skew symmetric Lie algebra element\n    :return: axis/angle\n        or if skew:\n             3x3 skew symmetric logarithmic map in so(3) (Ma, Soatto eq. 2.8)\n    \"\"\"", "\n", "if", "not", "is_so3", "(", "r", ")", ":", "\n", "        ", "print", "(", "\"matrix is not a valid SO(3) group element\"", ")", "\n", "", "if", "return_angle_only", "and", "not", "return_skew", ":", "\n", "        ", "return", "np", ".", "arccos", "(", "min", "(", "1", ",", "max", "(", "-", "1", ",", "(", "np", ".", "trace", "(", "r", ")", "-", "1", ")", "/", "2", ")", ")", ")", "\n", "", "angle", ",", "axis", ",", "_", "=", "tr", ".", "rotation_from_matrix", "(", "se3", "(", "r", ",", "[", "0", ",", "0", ",", "0", "]", ")", ")", "\n", "if", "return_skew", ":", "\n", "        ", "return", "hat", "(", "axis", "*", "angle", ")", "\n", "", "else", ":", "\n", "        ", "return", "axis", ",", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.se3": [[75, 85], ["numpy.eye", "numpy.array", "numpy.eye"], "function", ["None"], ["", "", "def", "se3", "(", "r", "=", "np", ".", "eye", "(", "3", ")", ",", "t", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", ")", ":", "\n", "    ", "\"\"\"\n    :param r: SO(3) rotation matrix\n    :param t: 3x1 translation vector\n    :return: SE(3) transformation matrix\n    \"\"\"", "\n", "se3", "=", "np", ".", "eye", "(", "4", ")", "\n", "se3", "[", ":", "3", ",", ":", "3", "]", "=", "r", "\n", "se3", "[", ":", "3", ",", "3", "]", "=", "t", "\n", "return", "se3", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.sim3": [[87, 98], ["numpy.eye"], "function", ["None"], ["", "def", "sim3", "(", "r", ",", "t", ",", "s", ")", ":", "\n", "    ", "\"\"\"\n    :param r: SO(3) rotation matrix\n    :param t: 3x1 translation vector\n    :param s: positive, non-zero scale factor\n    :return: Sim(3) similarity transformation matrix\n    \"\"\"", "\n", "sim3", "=", "np", ".", "eye", "(", "4", ")", "\n", "sim3", "[", ":", "3", ",", ":", "3", "]", "=", "s", "*", "r", "\n", "sim3", "[", ":", "3", ",", "3", "]", "=", "t", "\n", "return", "sim3", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.so3_from_se3": [[100, 106], ["None"], "function", ["None"], ["", "def", "so3_from_se3", "(", "p", ")", ":", "\n", "    ", "\"\"\"\n    :param p: absolute SE(3) pose\n    :return: the SO(3) rotation matrix in p\n    \"\"\"", "\n", "return", "p", "[", ":", "3", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.se3_inverse": [[108, 116], ["p[].transpose", "lie_algebra.se3", "p[].transpose.dot"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.se3"], ["", "def", "se3_inverse", "(", "p", ")", ":", "\n", "    ", "\"\"\"\n    :param p: absolute SE(3) pose\n    :return: the inverted pose\n    \"\"\"", "\n", "r_inv", "=", "p", "[", ":", "3", ",", ":", "3", "]", ".", "transpose", "(", ")", "\n", "t_inv", "=", "-", "r_inv", ".", "dot", "(", "p", "[", ":", "3", ",", "3", "]", ")", "\n", "return", "se3", "(", "r_inv", ",", "t_inv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.is_so3": [[118, 128], ["numpy.isclose", "numpy.allclose", "numpy.linalg.det", "r.transpose().dot", "numpy.eye", "r.transpose"], "function", ["None"], ["", "def", "is_so3", "(", "r", ")", ":", "\n", "    ", "\"\"\"\n    :param r: a 3x3 matrix\n    :return: True if r is in the SO(3) group\n    \"\"\"", "\n", "# Check the determinant.", "\n", "det_valid", "=", "np", ".", "isclose", "(", "np", ".", "linalg", ".", "det", "(", "r", ")", ",", "[", "1.0", "]", ",", "atol", "=", "1e-6", ")", "\n", "# Check if the transpose is the inverse.", "\n", "inv_valid", "=", "np", ".", "allclose", "(", "r", ".", "transpose", "(", ")", ".", "dot", "(", "r", ")", ",", "np", ".", "eye", "(", "3", ")", ",", "atol", "=", "1e-6", ")", "\n", "return", "det_valid", "and", "inv_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.is_se3": [[130, 138], ["lie_algebra.is_so3", "numpy.equal().all", "numpy.equal", "numpy.array"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.is_so3"], ["", "def", "is_se3", "(", "p", ")", ":", "\n", "    ", "\"\"\"\n    :param p: a 4x4 matrix\n    :return: True if p is in the SE(3) group\n    \"\"\"", "\n", "rot_valid", "=", "is_so3", "(", "p", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "lower_valid", "=", "np", ".", "equal", "(", "p", "[", "3", ",", ":", "]", ",", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ")", ")", ".", "all", "(", ")", "\n", "return", "rot_valid", "and", "lower_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.is_sim3": [[140, 151], ["numpy.multiply", "lie_algebra.is_so3", "numpy.equal().all", "numpy.equal", "numpy.array"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.is_so3"], ["", "def", "is_sim3", "(", "p", ",", "s", ")", ":", "\n", "    ", "\"\"\"\n    :param p: a 4x4 matrix\n    :param s: expected scale factor\n    :return: True if p is in the Sim(3) group with scale s\n    \"\"\"", "\n", "rot", "=", "p", "[", ":", "3", ",", ":", "3", "]", "\n", "rot_unscaled", "=", "np", ".", "multiply", "(", "rot", ",", "1.0", "/", "s", ")", "\n", "rot_valid", "=", "is_so3", "(", "rot_unscaled", ")", "\n", "lower_valid", "=", "np", ".", "equal", "(", "p", "[", "3", ",", ":", "]", ",", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ")", ")", ".", "all", "(", ")", "\n", "return", "rot_valid", "and", "lower_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.relative_so3": [[153, 159], ["numpy.dot", "r1.transpose"], "function", ["None"], ["", "def", "relative_so3", "(", "r1", ",", "r2", ")", ":", "\n", "    ", "\"\"\"\n    :param r1, r2: SO(3) matrices\n    :return: the relative rotation r1^{\u207b1} * r2\n    \"\"\"", "\n", "return", "np", ".", "dot", "(", "r1", ".", "transpose", "(", ")", ",", "r2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.relative_se3": [[161, 167], ["numpy.dot", "lie_algebra.se3_inverse"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.se3_inverse"], ["", "def", "relative_se3", "(", "p1", ",", "p2", ")", ":", "\n", "    ", "\"\"\"\n    :param p1, p2: SE(3) matrices\n    :return: the relative transformation p1^{\u207b1} * p2\n    \"\"\"", "\n", "return", "np", ".", "dot", "(", "se3_inverse", "(", "p1", ")", ",", "p2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.random_so3": [[169, 174], ["mono.random_rotation_matrix"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.random_rotation_matrix"], ["", "def", "random_so3", "(", ")", ":", "\n", "    ", "\"\"\"\n    :return: a random SO(3) matrix (for debugging)\n    \"\"\"", "\n", "return", "tr", ".", "random_rotation_matrix", "(", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.random_se3": [[176, 183], ["lie_algebra.random_so3", "mono.random_vector", "lie_algebra.se3"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.random_so3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.transformations.random_vector", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.lie_algebra.se3"], ["", "def", "random_se3", "(", ")", ":", "\n", "    ", "\"\"\"\n    :return: a random SE(3) matrix (for debugging)\n    \"\"\"", "\n", "r", "=", "random_so3", "(", ")", "\n", "t", "=", "tr", ".", "random_vector", "(", "3", ")", "\n", "return", "se3", "(", "r", ",", "t", ")", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.geometry.umeyama_alignment": [[20, 68], ["x.mean", "y.mean", "numpy.zeros", "range", "numpy.multiply", "numpy.linalg.svd", "numpy.eye", "u.dot().dot", "print", "numpy.outer", "numpy.multiply", "numpy.linalg.norm", "numpy.linalg.det", "numpy.linalg.det", "u.dot", "numpy.trace", "u.dot().dot.dot", "numpy.diag().dot", "numpy.diag"], "function", ["None"], ["def", "umeyama_alignment", "(", "x", ",", "y", ",", "with_scale", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Computes the least squares solution parameters of an Sim(m) matrix\n    that minimizes the distance between a set of registered points.\n    Umeyama, Shinji: Least-squares estimation of transformation parameters\n                     between two point patterns. IEEE PAMI, 1991\n    :param x: mxn matrix of points, m = dimension, n = nr. of data points\n    :param y: mxn matrix of points, m = dimension, n = nr. of data points\n    :param with_scale: set to True to align also the scale (default: 1.0 scale)\n    :return: r, t, c - rotation matrix, translation vector and scale factor\n    \"\"\"", "\n", "if", "x", ".", "shape", "!=", "y", ".", "shape", ":", "\n", "        ", "print", "(", "\"data matrices must have the same shape\"", ")", "\n", "\n", "# m = dimension, n = nr. of data points", "\n", "", "m", ",", "n", "=", "x", ".", "shape", "\n", "\n", "# means, eq. 34 and 35", "\n", "mean_x", "=", "x", ".", "mean", "(", "axis", "=", "1", ")", "\n", "mean_y", "=", "y", ".", "mean", "(", "axis", "=", "1", ")", "\n", "\n", "# variance, eq. 36", "\n", "# \"transpose\" for column subtraction", "\n", "sigma_x", "=", "1.0", "/", "n", "*", "(", "np", ".", "linalg", ".", "norm", "(", "x", "-", "mean_x", "[", ":", ",", "np", ".", "newaxis", "]", ")", "**", "2", ")", "\n", "\n", "# covariance matrix, eq. 38", "\n", "outer_sum", "=", "np", ".", "zeros", "(", "(", "m", ",", "m", ")", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "outer_sum", "+=", "np", ".", "outer", "(", "(", "y", "[", ":", ",", "i", "]", "-", "mean_y", ")", ",", "(", "x", "[", ":", ",", "i", "]", "-", "mean_x", ")", ")", "\n", "", "cov_xy", "=", "np", ".", "multiply", "(", "1.0", "/", "n", ",", "outer_sum", ")", "\n", "\n", "# SVD (text betw. eq. 38 and 39)", "\n", "u", ",", "d", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "cov_xy", ")", "\n", "\n", "# S matrix, eq. 43", "\n", "s", "=", "np", ".", "eye", "(", "m", ")", "\n", "if", "np", ".", "linalg", ".", "det", "(", "u", ")", "*", "np", ".", "linalg", ".", "det", "(", "v", ")", "<", "0.0", ":", "\n", "# Ensure a RHS coordinate system (Kabsch algorithm).", "\n", "        ", "s", "[", "m", "-", "1", ",", "m", "-", "1", "]", "=", "-", "1", "\n", "\n", "# rotation, eq. 40", "\n", "", "r", "=", "u", ".", "dot", "(", "s", ")", ".", "dot", "(", "v", ")", "\n", "\n", "# scale & translation, eq. 42 and 41", "\n", "c", "=", "1", "/", "sigma_x", "*", "np", ".", "trace", "(", "np", ".", "diag", "(", "d", ")", ".", "dot", "(", "s", ")", ")", "if", "with_scale", "else", "1.0", "\n", "t", "=", "mean_y", "-", "np", ".", "multiply", "(", "c", ",", "r", ".", "dot", "(", "mean_x", ")", ")", "\n", "\n", "return", "r", ",", "t", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.geometry.arc_len": [[70, 76], ["numpy.sum", "numpy.linalg.norm"], "function", ["None"], ["", "def", "arc_len", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    :param x: nxm array of points, m=dimension\n    :return: the (discrete approximated) arc-length of the point sequence\n    \"\"\"", "\n", "return", "np", ".", "sum", "(", "np", ".", "linalg", ".", "norm", "(", "x", "[", ":", "-", "1", "]", "-", "x", "[", "1", ":", "]", ",", "axis", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.geometry.accumulated_distances": [[78, 85], ["numpy.concatenate", "numpy.array", "numpy.cumsum", "numpy.linalg.norm"], "function", ["None"], ["", "def", "accumulated_distances", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    :param x: nxm array of points, m=dimension\n    :return: the accumulated distances along the point sequence\n    \"\"\"", "\n", "return", "np", ".", "concatenate", "(", "(", "np", ".", "array", "(", "[", "0", "]", ")", ",", "\n", "np", ".", "cumsum", "(", "np", ".", "linalg", ".", "norm", "(", "x", "[", ":", "-", "1", "]", "-", "x", "[", "1", ":", "]", ",", "axis", "=", "1", ")", ")", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.compute_ate": [[10, 31], ["pose_evaluation_utils.read_file_list", "pose_evaluation_utils.read_file_list", "pose_evaluation_utils.associate", "numpy.array", "numpy.array", "len", "numpy.sum", "numpy.sum", "numpy.sqrt", "len", "numpy.sum", "float", "float"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.read_file_list", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.read_file_list", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.associate"], ["def", "compute_ate", "(", "gtruth_file", ",", "pred_file", ")", ":", "\n", "    ", "gtruth_list", "=", "read_file_list", "(", "gtruth_file", ")", "\n", "pred_list", "=", "read_file_list", "(", "pred_file", ")", "\n", "matches", "=", "associate", "(", "gtruth_list", ",", "pred_list", ",", "0", ",", "0.01", ")", "\n", "if", "len", "(", "matches", ")", "<", "2", ":", "\n", "        ", "return", "False", "\n", "\n", "", "gtruth_xyz", "=", "np", ".", "array", "(", "[", "[", "float", "(", "value", ")", "for", "value", "in", "gtruth_list", "[", "a", "]", "[", "0", ":", "3", "]", "]", "for", "a", ",", "b", "in", "matches", "]", ")", "\n", "pred_xyz", "=", "np", ".", "array", "(", "[", "[", "float", "(", "value", ")", "for", "value", "in", "pred_list", "[", "b", "]", "[", "0", ":", "3", "]", "]", "for", "a", ",", "b", "in", "matches", "]", ")", "\n", "\n", "# Make sure that the first matched frames align (no need for rotational alignment as", "\n", "# all the predicted/ground-truth snippets have been converted to use the same coordinate", "\n", "# system with the first frame of the snippet being the origin).", "\n", "offset", "=", "gtruth_xyz", "[", "0", "]", "-", "pred_xyz", "[", "0", "]", "\n", "pred_xyz", "+=", "offset", "[", "None", ",", ":", "]", "\n", "\n", "# Optimize the scaling factor", "\n", "scale", "=", "np", ".", "sum", "(", "gtruth_xyz", "*", "pred_xyz", ")", "/", "np", ".", "sum", "(", "pred_xyz", "**", "2", ")", "\n", "alignment_error", "=", "pred_xyz", "*", "scale", "-", "gtruth_xyz", "\n", "rmse", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "alignment_error", "**", "2", ")", ")", "/", "len", "(", "matches", ")", "\n", "return", "rmse", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.read_file_list": [[33, 54], ["open", "open.read", "file.read.replace().replace().split", "dict", "file.read.replace().replace", "v.strip", "float", "line.split", "len", "file.read.replace", "v.strip", "len"], "function", ["None"], ["", "def", "read_file_list", "(", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Reads a trajectory from a text file. \n    \n    File format:\n    The file format is \"stamp d1 d2 d3 ...\", where stamp denotes the time stamp (to be matched)\n    and \"d1 d2 d3..\" is arbitary data (e.g., a 3D position and 3D orientation) associated to this timestamp. \n    \n    Input:\n    filename -- File name\n    \n    Output:\n    dict -- dictionary of (stamp,data) tuples\n    \n    \"\"\"", "\n", "file", "=", "open", "(", "filename", ")", "\n", "data", "=", "file", ".", "read", "(", ")", "\n", "lines", "=", "data", ".", "replace", "(", "\",\"", ",", "\" \"", ")", ".", "replace", "(", "\"\\t\"", ",", "\" \"", ")", ".", "split", "(", "\"\\n\"", ")", "\n", "list", "=", "[", "[", "v", ".", "strip", "(", ")", "for", "v", "in", "line", ".", "split", "(", "\" \"", ")", "if", "v", ".", "strip", "(", ")", "!=", "\"\"", "]", "for", "line", "in", "lines", "if", "len", "(", "line", ")", ">", "0", "and", "line", "[", "0", "]", "!=", "\"#\"", "]", "\n", "list", "=", "[", "(", "float", "(", "l", "[", "0", "]", ")", ",", "l", "[", "1", ":", "]", ")", "for", "l", "in", "list", "if", "len", "(", "l", ")", ">", "1", "]", "\n", "return", "dict", "(", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.associate": [[56, 87], ["list", "list", "potential_matches.sort", "matches.sort", "first_list.keys", "second_list.keys", "abs", "list.remove", "list.remove", "matches.append", "abs"], "function", ["None"], ["", "def", "associate", "(", "first_list", ",", "second_list", ",", "offset", ",", "max_difference", ")", ":", "\n", "    ", "\"\"\"\n    Associate two dictionaries of (stamp,data). As the time stamps never match exactly, we aim \n    to find the closest match for every input tuple.\n    \n    Input:\n    first_list -- first dictionary of (stamp,data) tuples\n    second_list -- second dictionary of (stamp,data) tuples\n    offset -- time offset between both dictionaries (e.g., to model the delay between the sensors)\n    max_difference -- search radius for candidate generation\n\n    Output:\n    matches -- list of matched tuples ((stamp1,data1),(stamp2,data2))\n    \n    \"\"\"", "\n", "first_keys", "=", "list", "(", "first_list", ".", "keys", "(", ")", ")", "\n", "second_keys", "=", "list", "(", "second_list", ".", "keys", "(", ")", ")", "\n", "potential_matches", "=", "[", "(", "abs", "(", "a", "-", "(", "b", "+", "offset", ")", ")", ",", "a", ",", "b", ")", "\n", "for", "a", "in", "first_keys", "\n", "for", "b", "in", "second_keys", "\n", "if", "abs", "(", "a", "-", "(", "b", "+", "offset", ")", ")", "<", "max_difference", "]", "\n", "potential_matches", ".", "sort", "(", ")", "\n", "matches", "=", "[", "]", "\n", "for", "diff", ",", "a", ",", "b", "in", "potential_matches", ":", "\n", "        ", "if", "a", "in", "first_keys", "and", "b", "in", "second_keys", ":", "\n", "            ", "first_keys", ".", "remove", "(", "a", ")", "\n", "second_keys", ".", "remove", "(", "b", ")", "\n", "matches", ".", "append", "(", "(", "a", ",", "b", ")", ")", "\n", "\n", "", "", "matches", ".", "sort", "(", ")", "\n", "return", "matches", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.rot2quat": [[89, 94], ["pose_evaluation_utils.mat2euler", "pose_evaluation_utils.euler2quat"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.mat2euler", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.euler2quat"], ["", "def", "rot2quat", "(", "R", ")", ":", "\n", "    ", "''' Calculate quaternion corresponding to rotation matrix'''", "\n", "rz", ",", "ry", ",", "rx", "=", "mat2euler", "(", "R", ")", "\n", "qw", ",", "qx", ",", "qy", ",", "qz", "=", "euler2quat", "(", "rz", ",", "ry", ",", "rx", ")", "\n", "return", "qw", ",", "qx", ",", "qy", ",", "qz", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.quat2mat": [[95, 143], ["numpy.array", "numpy.eye"], "function", ["None"], ["", "def", "quat2mat", "(", "q", ")", ":", "\n", "    ", "''' Calculate rotation matrix corresponding to quaternion\n    https://afni.nimh.nih.gov/pub/dist/src/pkundu/meica.libs/nibabel/quaternions.py\n    Parameters\n    ----------\n    q : 4 element array-like\n\n    Returns\n    -------\n    M : (3,3) array\n      Rotation matrix corresponding to input quaternion *q*\n\n    Notes\n    -----\n    Rotation matrix applies to column vectors, and is applied to the\n    left of coordinate vectors.  The algorithm here allows non-unit\n    quaternions.\n\n    References\n    ----------\n    Algorithm from\n    http://en.wikipedia.org/wiki/Rotation_matrix#Quaternion\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> M = quat2mat([1, 0, 0, 0]) # Identity quaternion\n    >>> np.allclose(M, np.eye(3))\n    True\n    >>> M = quat2mat([0, 1, 0, 0]) # 180 degree rotn around axis 0\n    >>> np.allclose(M, np.diag([1, -1, -1]))\n    True\n    '''", "\n", "w", ",", "x", ",", "y", ",", "z", "=", "q", "\n", "Nq", "=", "w", "*", "w", "+", "x", "*", "x", "+", "y", "*", "y", "+", "z", "*", "z", "\n", "if", "Nq", "<", "1e-8", ":", "\n", "        ", "return", "np", ".", "eye", "(", "3", ")", "\n", "", "s", "=", "2.0", "/", "Nq", "\n", "X", "=", "x", "*", "s", "\n", "Y", "=", "y", "*", "s", "\n", "Z", "=", "z", "*", "s", "\n", "wX", "=", "w", "*", "X", ";", "wY", "=", "w", "*", "Y", ";", "wZ", "=", "w", "*", "Z", "\n", "xX", "=", "x", "*", "X", ";", "xY", "=", "x", "*", "Y", ";", "xZ", "=", "x", "*", "Z", "\n", "yY", "=", "y", "*", "Y", ";", "yZ", "=", "y", "*", "Z", ";", "zZ", "=", "z", "*", "Z", "\n", "return", "np", ".", "array", "(", "\n", "[", "[", "1.0", "-", "(", "yY", "+", "zZ", ")", ",", "xY", "-", "wZ", ",", "xZ", "+", "wY", "]", ",", "\n", "[", "xY", "+", "wZ", ",", "1.0", "-", "(", "xX", "+", "zZ", ")", ",", "yZ", "-", "wX", "]", ",", "\n", "[", "xZ", "-", "wY", ",", "yZ", "+", "wX", ",", "1.0", "-", "(", "xX", "+", "yY", ")", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.has_utf8_bom": [[145, 155], ["os.path.getsize", "open", "int", "binascii.hexlify", "f.read"], "function", ["None"], ["", "def", "has_utf8_bom", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"\n    Checks if the given file starts with a UTF8 BOM\n    wikipedia.org/wiki/Byte_order_mark\n    \"\"\"", "\n", "size_bytes", "=", "os", ".", "path", ".", "getsize", "(", "file_path", ")", "\n", "if", "size_bytes", "<", "3", ":", "\n", "        ", "return", "False", "\n", "", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "not", "int", "(", "binascii", ".", "hexlify", "(", "f", ".", "read", "(", "3", ")", ")", ",", "16", ")", "^", "0xEFBBBF", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.csv_read_matrix": [[157, 183], ["hasattr", "csv.reader", "pose_evaluation_utils.has_utf8_bom", "os.path.isfile", "print", "open", "csv.reader", "f.seek", "line.startswith", "str", "line.startswith"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.has_utf8_bom"], ["", "", "def", "csv_read_matrix", "(", "file_path", ",", "delim", "=", "','", ",", "comment_str", "=", "\"#\"", ")", ":", "\n", "    ", "\"\"\"\n    directly parse a csv-like file into a matrix\n    :param file_path: path of csv file (or file handle)\n    :param delim: delimiter character\n    :param comment_str: string indicating a comment line to ignore\n    :return: 2D list with raw data (string)\n    \"\"\"", "\n", "if", "hasattr", "(", "file_path", ",", "'read'", ")", ":", "# if file handle", "\n", "        ", "generator", "=", "(", "line", "for", "line", "in", "file_path", "\n", "if", "not", "line", ".", "startswith", "(", "comment_str", ")", ")", "\n", "reader", "=", "csv", ".", "reader", "(", "generator", ",", "delimiter", "=", "delim", ")", "\n", "mat", "=", "[", "row", "for", "row", "in", "reader", "]", "\n", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "file_path", ")", ":", "\n", "            ", "print", "(", "\"csv file \"", "+", "str", "(", "file_path", ")", "+", "\n", "\" does not exist\"", ")", "\n", "", "skip_3_bytes", "=", "has_utf8_bom", "(", "file_path", ")", "\n", "with", "open", "(", "file_path", ")", "as", "f", ":", "\n", "            ", "if", "skip_3_bytes", ":", "\n", "                ", "f", ".", "seek", "(", "3", ")", "\n", "", "generator", "=", "(", "line", "for", "line", "in", "f", "\n", "if", "not", "line", ".", "startswith", "(", "comment_str", ")", ")", "\n", "reader", "=", "csv", ".", "reader", "(", "generator", ",", "delimiter", "=", "delim", ")", "\n", "mat", "=", "[", "row", "for", "row", "in", "reader", "]", "\n", "", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.read_kitti_poses_file": [[185, 207], ["pose_evaluation_utils.csv_read_matrix", "mono.tools.trajectory.PosePath3D", "print", "numpy.array().astype", "numpy.array", "len", "len", "print", "numpy.array"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.csv_read_matrix"], ["", "def", "read_kitti_poses_file", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"\n    parses pose file in KITTI format (first 3 rows of SE(3) matrix per line)\n    :param file_path: the trajectory file path (or file handle)\n    :return: trajectory.PosePath3D\n    \"\"\"", "\n", "raw_mat", "=", "csv_read_matrix", "(", "file_path", ",", "delim", "=", "\" \"", ",", "comment_str", "=", "\"#\"", ")", "\n", "error_msg", "=", "(", "\"KITTI pose files must have 12 entries per row \"", "\n", "\"and no trailing delimiter at the end of the rows (space)\"", ")", "\n", "if", "len", "(", "raw_mat", ")", ">", "0", "and", "len", "(", "raw_mat", "[", "0", "]", ")", "!=", "12", ":", "\n", "        ", "print", "(", "error_msg", ")", "\n", "", "try", ":", "\n", "        ", "mat", "=", "np", ".", "array", "(", "raw_mat", ")", ".", "astype", "(", "float", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "print", "(", "error_msg", ")", "\n", "# yapf: disable", "\n", "", "poses", "=", "[", "np", ".", "array", "(", "[", "[", "r", "[", "0", "]", ",", "r", "[", "1", "]", ",", "r", "[", "2", "]", ",", "r", "[", "3", "]", "]", ",", "\n", "[", "r", "[", "4", "]", ",", "r", "[", "5", "]", ",", "r", "[", "6", "]", ",", "r", "[", "7", "]", "]", ",", "\n", "[", "r", "[", "8", "]", ",", "r", "[", "9", "]", ",", "r", "[", "10", "]", ",", "r", "[", "11", "]", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "for", "r", "in", "mat", "]", "\n", "\n", "return", "PosePath3D", "(", "poses_se3", "=", "poses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.mat2euler": [[209, 288], ["numpy.asarray", "math.sqrt", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "Exception", "math.atan2", "math.atan2", "math.atan2", "numpy.finfo", "atan2"], "function", ["None"], ["", "def", "mat2euler", "(", "M", ",", "cy_thresh", "=", "None", ",", "seq", "=", "'zyx'", ")", ":", "\n", "    ", "'''\n    Taken From: http://afni.nimh.nih.gov/pub/dist/src/pkundu/meica.libs/nibabel/eulerangles.py\n    Discover Euler angle vector from 3x3 matrix\n    Uses the conventions above.\n    Parameters\n    ----------\n    M : array-like, shape (3,3)\n    cy_thresh : None or scalar, optional\n     threshold below which to give up on straightforward arctan for\n     estimating x rotation.  If None (default), estimate from\n     precision of input.\n    Returns\n    -------\n    z : scalar\n    y : scalar\n    x : scalar\n     Rotations in radians around z, y, x axes, respectively\n    Notes\n    -----\n    If there was no numerical error, the routine could be derived using\n    Sympy expression for z then y then x rotation matrix, which is::\n    [                       cos(y)*cos(z),                       -cos(y)*sin(z),         sin(y)],\n    [cos(x)*sin(z) + cos(z)*sin(x)*sin(y), cos(x)*cos(z) - sin(x)*sin(y)*sin(z), -cos(y)*sin(x)],\n    [sin(x)*sin(z) - cos(x)*cos(z)*sin(y), cos(z)*sin(x) + cos(x)*sin(y)*sin(z),  cos(x)*cos(y)]\n    with the obvious derivations for z, y, and x\n     z = atan2(-r12, r11)\n     y = asin(r13)\n     x = atan2(-r23, r33)\n    for x,y,z order\n    y = asin(-r31)\n    x = atan2(r32, r33)\n    z = atan2(r21, r11)\n    Problems arise when cos(y) is close to zero, because both of::\n     z = atan2(cos(y)*sin(z), cos(y)*cos(z))\n     x = atan2(cos(y)*sin(x), cos(x)*cos(y))\n    will be close to atan2(0, 0), and highly unstable.\n    The ``cy`` fix for numerical instability below is from: *Graphics\n    Gems IV*, Paul Heckbert (editor), Academic Press, 1994, ISBN:\n    0123361559.  Specifically it comes from EulerAngles.c by Ken\n    Shoemake, and deals with the case where cos(y) is close to zero:\n    See: http://www.graphicsgems.org/\n    The code appears to be licensed (from the website) as \"can be used\n    without restrictions\".\n    '''", "\n", "M", "=", "np", ".", "asarray", "(", "M", ")", "\n", "if", "cy_thresh", "is", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "cy_thresh", "=", "np", ".", "finfo", "(", "M", ".", "dtype", ")", ".", "eps", "*", "4", "\n", "", "except", "ValueError", ":", "\n", "            ", "cy_thresh", "=", "_FLOAT_EPS_4", "\n", "", "", "r11", ",", "r12", ",", "r13", ",", "r21", ",", "r22", ",", "r23", ",", "r31", ",", "r32", ",", "r33", "=", "M", ".", "flat", "\n", "# cy: sqrt((cos(y)*cos(z))**2 + (cos(x)*cos(y))**2)", "\n", "cy", "=", "math", ".", "sqrt", "(", "r33", "*", "r33", "+", "r23", "*", "r23", ")", "\n", "if", "seq", "==", "'zyx'", ":", "\n", "        ", "if", "cy", ">", "cy_thresh", ":", "# cos(y) not close to zero, standard form", "\n", "            ", "z", "=", "math", ".", "atan2", "(", "-", "r12", ",", "r11", ")", "# atan2(cos(y)*sin(z), cos(y)*cos(z))", "\n", "y", "=", "math", ".", "atan2", "(", "r13", ",", "cy", ")", "# atan2(sin(y), cy)", "\n", "x", "=", "math", ".", "atan2", "(", "-", "r23", ",", "r33", ")", "# atan2(cos(y)*sin(x), cos(x)*cos(y))", "\n", "", "else", ":", "# cos(y) (close to) zero, so x -> 0.0 (see above)", "\n", "# so r21 -> sin(z), r22 -> cos(z) and", "\n", "            ", "z", "=", "math", ".", "atan2", "(", "r21", ",", "r22", ")", "\n", "y", "=", "math", ".", "atan2", "(", "r13", ",", "cy", ")", "# atan2(sin(y), cy)", "\n", "x", "=", "0.0", "\n", "", "", "elif", "seq", "==", "'xyz'", ":", "\n", "        ", "if", "cy", ">", "cy_thresh", ":", "\n", "            ", "y", "=", "math", ".", "atan2", "(", "-", "r31", ",", "cy", ")", "\n", "x", "=", "math", ".", "atan2", "(", "r32", ",", "r33", ")", "\n", "z", "=", "math", ".", "atan2", "(", "r21", ",", "r11", ")", "\n", "", "else", ":", "\n", "            ", "z", "=", "0.0", "\n", "if", "r31", "<", "0", ":", "\n", "                ", "y", "=", "np", ".", "pi", "/", "2", "\n", "x", "=", "atan2", "(", "r12", ",", "r13", ")", "\n", "", "else", ":", "\n", "                ", "y", "=", "-", "np", ".", "pi", "/", "2", "\n", "", "", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Sequence not recognized'", ")", "\n", "", "return", "z", ",", "y", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.euler2mat": [[291, 385], ["numpy.eye", "math.cos", "math.sin", "Ms.append", "math.cos", "math.sin", "Ms.append", "math.cos", "math.sin", "Ms.append", "functools.reduce", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["def", "euler2mat", "(", "z", "=", "0", ",", "y", "=", "0", ",", "x", "=", "0", ",", "isRadian", "=", "True", ")", ":", "\n", "    ", "''' Return matrix for rotations around z, y and x axes\n    Uses the z, then y, then x convention above\n    Parameters\n    ----------\n    z : scalar\n         Rotation angle in radians around z-axis (performed first)\n    y : scalar\n         Rotation angle in radians around y-axis\n    x : scalar\n         Rotation angle in radians around x-axis (performed last)\n    Returns\n    -------\n    M : array shape (3,3)\n         Rotation matrix giving same rotation as for given angles\n    Examples\n    --------\n    >>> zrot = 1.3 # radians\n    >>> yrot = -0.1\n    >>> xrot = 0.2\n    >>> M = euler2mat(zrot, yrot, xrot)\n    >>> M.shape == (3, 3)\n    True\n    The output rotation matrix is equal to the composition of the\n    individual rotations\n    >>> M1 = euler2mat(zrot)\n    >>> M2 = euler2mat(0, yrot)\n    >>> M3 = euler2mat(0, 0, xrot)\n    >>> composed_M = np.dot(M3, np.dot(M2, M1))\n    >>> np.allclose(M, composed_M)\n    True\n    You can specify rotations by named arguments\n    >>> np.all(M3 == euler2mat(x=xrot))\n    True\n    When applying M to a vector, the vector should column vector to the\n    right of M.  If the right hand side is a 2D array rather than a\n    vector, then each column of the 2D array represents a vector.\n    >>> vec = np.array([1, 0, 0]).reshape((3,1))\n    >>> v2 = np.dot(M, vec)\n    >>> vecs = np.array([[1, 0, 0],[0, 1, 0]]).T # giving 3x2 array\n    >>> vecs2 = np.dot(M, vecs)\n    Rotations are counter-clockwise.\n    >>> zred = np.dot(euler2mat(z=np.pi/2), np.eye(3))\n    >>> np.allclose(zred, [[0, -1, 0],[1, 0, 0], [0, 0, 1]])\n    True\n    >>> yred = np.dot(euler2mat(y=np.pi/2), np.eye(3))\n    >>> np.allclose(yred, [[0, 0, 1],[0, 1, 0], [-1, 0, 0]])\n    True\n    >>> xred = np.dot(euler2mat(x=np.pi/2), np.eye(3))\n    >>> np.allclose(xred, [[1, 0, 0],[0, 0, -1], [0, 1, 0]])\n    True\n    Notes\n    -----\n    The direction of rotation is given by the right-hand rule (orient\n    the thumb of the right hand along the axis around which the rotation\n    occurs, with the end of the thumb at the positive end of the axis;\n    curl your fingers; the direction your fingers curl is the direction\n    of rotation).  Therefore, the rotations are counterclockwise if\n    looking along the axis of rotation from positive to negative.\n    '''", "\n", "\n", "if", "not", "isRadian", ":", "\n", "        ", "z", "=", "(", "(", "np", ".", "pi", ")", "/", "180.", ")", "*", "z", "\n", "y", "=", "(", "(", "np", ".", "pi", ")", "/", "180.", ")", "*", "y", "\n", "x", "=", "(", "(", "np", ".", "pi", ")", "/", "180.", ")", "*", "x", "\n", "", "assert", "z", ">=", "(", "-", "np", ".", "pi", ")", "and", "z", "<", "np", ".", "pi", ",", "'Inapprorpriate z: %f'", "%", "z", "\n", "assert", "y", ">=", "(", "-", "np", ".", "pi", ")", "and", "y", "<", "np", ".", "pi", ",", "'Inapprorpriate y: %f'", "%", "y", "\n", "assert", "x", ">=", "(", "-", "np", ".", "pi", ")", "and", "x", "<", "np", ".", "pi", ",", "'Inapprorpriate x: %f'", "%", "x", "\n", "\n", "Ms", "=", "[", "]", "\n", "if", "z", ":", "\n", "            ", "cosz", "=", "math", ".", "cos", "(", "z", ")", "\n", "sinz", "=", "math", ".", "sin", "(", "z", ")", "\n", "Ms", ".", "append", "(", "np", ".", "array", "(", "\n", "[", "[", "cosz", ",", "-", "sinz", ",", "0", "]", ",", "\n", "[", "sinz", ",", "cosz", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", ")", "\n", "", "if", "y", ":", "\n", "            ", "cosy", "=", "math", ".", "cos", "(", "y", ")", "\n", "siny", "=", "math", ".", "sin", "(", "y", ")", "\n", "Ms", ".", "append", "(", "np", ".", "array", "(", "\n", "[", "[", "cosy", ",", "0", ",", "siny", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "siny", ",", "0", ",", "cosy", "]", "]", ")", ")", "\n", "", "if", "x", ":", "\n", "            ", "cosx", "=", "math", ".", "cos", "(", "x", ")", "\n", "sinx", "=", "math", ".", "sin", "(", "x", ")", "\n", "Ms", ".", "append", "(", "np", ".", "array", "(", "\n", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "cosx", ",", "-", "sinx", "]", ",", "\n", "[", "0", ",", "sinx", ",", "cosx", "]", "]", ")", ")", "\n", "", "if", "Ms", ":", "\n", "            ", "return", "functools", ".", "reduce", "(", "np", ".", "dot", ",", "Ms", "[", ":", ":", "-", "1", "]", ")", "\n", "", "return", "np", ".", "eye", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.euler2quat": [[387, 433], ["math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "numpy.array"], "function", ["None"], ["", "def", "euler2quat", "(", "z", "=", "0", ",", "y", "=", "0", ",", "x", "=", "0", ",", "isRadian", "=", "True", ")", ":", "\n", "    ", "''' Return quaternion corresponding to these Euler angles\n    Uses the z, then y, then x convention above\n    Parameters\n    ----------\n    z : scalar\n         Rotation angle in radians around z-axis (performed first)\n    y : scalar\n         Rotation angle in radians around y-axis\n    x : scalar\n         Rotation angle in radians around x-axis (performed last)\n    Returns\n    -------\n    quat : array shape (4,)\n         Quaternion in w, x, y z (real, then vector) format\n    Notes\n    -----\n    We can derive this formula in Sympy using:\n    1. Formula giving quaternion corresponding to rotation of theta radians\n         about arbitrary axis:\n         http://mathworld.wolfram.com/EulerParameters.html\n    2. Generated formulae from 1.) for quaternions corresponding to\n         theta radians rotations about ``x, y, z`` axes\n    3. Apply quaternion multiplication formula -\n         http://en.wikipedia.org/wiki/Quaternions#Hamilton_product - to\n         formulae from 2.) to give formula for combined rotations.\n    '''", "\n", "\n", "if", "not", "isRadian", ":", "\n", "        ", "z", "=", "(", "(", "np", ".", "pi", ")", "/", "180.", ")", "*", "z", "\n", "y", "=", "(", "(", "np", ".", "pi", ")", "/", "180.", ")", "*", "y", "\n", "x", "=", "(", "(", "np", ".", "pi", ")", "/", "180.", ")", "*", "x", "\n", "", "z", "=", "z", "/", "2.0", "\n", "y", "=", "y", "/", "2.0", "\n", "x", "=", "x", "/", "2.0", "\n", "cz", "=", "math", ".", "cos", "(", "z", ")", "\n", "sz", "=", "math", ".", "sin", "(", "z", ")", "\n", "cy", "=", "math", ".", "cos", "(", "y", ")", "\n", "sy", "=", "math", ".", "sin", "(", "y", ")", "\n", "cx", "=", "math", ".", "cos", "(", "x", ")", "\n", "sx", "=", "math", ".", "sin", "(", "x", ")", "\n", "return", "np", ".", "array", "(", "[", "\n", "cx", "*", "cy", "*", "cz", "-", "sx", "*", "sy", "*", "sz", ",", "\n", "cx", "*", "sy", "*", "sz", "+", "cy", "*", "cz", "*", "sx", ",", "\n", "cx", "*", "cz", "*", "sy", "-", "sx", "*", "cy", "*", "sz", ",", "\n", "cx", "*", "cy", "*", "sz", "+", "sx", "*", "cz", "*", "sy", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.pose_vec_to_mat": [[435, 446], ["numpy.array().reshape", "pose_evaluation_utils.euler2mat", "numpy.concatenate", "numpy.array().reshape", "numpy.concatenate", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.euler2mat"], ["", "def", "pose_vec_to_mat", "(", "vec", ")", ":", "\n", "    ", "''' Calculate transformation matrix corresponding to euler pose vector'''", "\n", "tx", "=", "vec", "[", "0", "]", "\n", "ty", "=", "vec", "[", "1", "]", "\n", "tz", "=", "vec", "[", "2", "]", "\n", "trans", "=", "np", ".", "array", "(", "[", "tx", ",", "ty", ",", "tz", "]", ")", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "rot", "=", "euler2mat", "(", "vec", "[", "5", "]", ",", "vec", "[", "4", "]", ",", "vec", "[", "3", "]", ")", "# order: z, y, x", "\n", "Tmat", "=", "np", ".", "concatenate", "(", "(", "rot", ",", "trans", ")", ",", "axis", "=", "1", ")", "\n", "hfiller", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", ".", "reshape", "(", "(", "1", ",", "4", ")", ")", "\n", "Tmat", "=", "np", ".", "concatenate", "(", "(", "Tmat", ",", "hfiller", ")", ",", "axis", "=", "0", ")", "\n", "return", "Tmat", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.quat_pose_to_mat": [[448, 459], ["numpy.array().reshape", "pose_evaluation_utils.quat2mat", "numpy.concatenate", "numpy.array().reshape", "numpy.concatenate", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.quat2mat"], ["", "def", "quat_pose_to_mat", "(", "vec", ")", ":", "\n", "    ", "''' Calculate transformation matrix corresponding to quaternion pose vector'''", "\n", "tx", "=", "vec", "[", "0", "]", "\n", "ty", "=", "vec", "[", "1", "]", "\n", "tz", "=", "vec", "[", "2", "]", "\n", "trans", "=", "np", ".", "array", "(", "[", "tx", ",", "ty", ",", "tz", "]", ")", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "rot", "=", "quat2mat", "(", "[", "vec", "[", "6", "]", ",", "vec", "[", "3", "]", ",", "vec", "[", "4", "]", ",", "vec", "[", "5", "]", "]", ")", "# order: w, x, y, z", "\n", "Tmat", "=", "np", ".", "concatenate", "(", "(", "rot", ",", "trans", ")", ",", "axis", "=", "1", ")", "\n", "hfiller", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", ".", "reshape", "(", "(", "1", ",", "4", ")", ")", "\n", "Tmat", "=", "np", ".", "concatenate", "(", "(", "Tmat", ",", "hfiller", ")", ",", "axis", "=", "0", ")", "\n", "return", "Tmat", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.dump_pose_seq_TUM": [[461, 475], ["pose_evaluation_utils.pose_vec_to_mat", "open", "range", "len", "pose_evaluation_utils.pose_vec_to_mat", "numpy.dot", "pose_evaluation_utils.rot2quat", "f.write", "numpy.linalg.inv"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.pose_vec_to_mat", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.pose_vec_to_mat", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.rot2quat"], ["", "def", "dump_pose_seq_TUM", "(", "out_file", ",", "poses", ",", "times", ")", ":", "\n", "# First frame as the origin", "\n", "    ", "first_pose", "=", "pose_vec_to_mat", "(", "poses", "[", "0", "]", ")", "\n", "with", "open", "(", "out_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "p", "in", "range", "(", "len", "(", "times", ")", ")", ":", "\n", "            ", "this_pose", "=", "pose_vec_to_mat", "(", "poses", "[", "p", "]", ")", "\n", "# this_pose = np.dot(this_pose, np.linalg.inv(first_pose))", "\n", "this_pose", "=", "np", ".", "dot", "(", "first_pose", ",", "np", ".", "linalg", ".", "inv", "(", "this_pose", ")", ")", "\n", "tx", "=", "this_pose", "[", "0", ",", "3", "]", "\n", "ty", "=", "this_pose", "[", "1", ",", "3", "]", "\n", "tz", "=", "this_pose", "[", "2", ",", "3", "]", "\n", "rot", "=", "this_pose", "[", ":", "3", ",", ":", "3", "]", "\n", "qw", ",", "qx", ",", "qy", ",", "qz", "=", "rot2quat", "(", "rot", ")", "\n", "f", ".", "write", "(", "'%f %f %f %f %f %f %f %f\\n'", "%", "(", "times", "[", "p", "]", ",", "tx", ",", "ty", ",", "tz", ",", "qx", ",", "qy", ",", "qz", ",", "qw", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.model.registry.Registry.__init__": [[9, 12], ["dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_module_dict", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.model.registry.Registry.name": [[13, 16], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.model.registry.Registry.module_dict": [[17, 20], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "module_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_module_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.model.registry.Registry._register_module": [[21, 36], ["issubclass", "TypeError", "KeyError"], "methods", ["None"], ["", "def", "_register_module", "(", "self", ",", "module_class", ")", ":", "\n", "        ", "\"\"\"Register a module.\n\n        Args:\n            module (:obj:`nn.Module`): Module to be registered.\n        \"\"\"", "\n", "if", "not", "issubclass", "(", "module_class", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'module must be a child of nn.Module, but got {}'", ".", "format", "(", "\n", "module_class", ")", ")", "\n", "", "module_name", "=", "module_class", ".", "__name__", "\n", "if", "module_name", "in", "self", ".", "_module_dict", ":", "\n", "            ", "raise", "KeyError", "(", "'{} is already registered in {}'", ".", "format", "(", "\n", "module_name", ",", "self", ".", "name", ")", ")", "\n", "", "self", ".", "_module_dict", "[", "module_name", "]", "=", "module_class", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.model.registry.Registry.register_module": [[37, 40], ["registry.Registry._register_module"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.model.registry.Registry._register_module"], ["", "def", "register_module", "(", "self", ",", "cls", ")", ":", "\n", "        ", "self", ".", "_register_module", "(", "cls", ")", "\n", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.encoder.Encoder.__init__": [[9, 30], ["torch.Module.__init__", "numpy.array", "ValueError", "torch.load", "torch.load", "torch.load", "torch.load", "encoder.Encoder.encoder.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "pretrained_path", "=", "None", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_ch_enc", "=", "np", ".", "array", "(", "[", "64", ",", "64", ",", "128", ",", "256", ",", "512", "]", ")", "\n", "\n", "resnets", "=", "{", "18", ":", "resnet18", ",", "\n", "34", ":", "resnet34", ",", "\n", "50", ":", "resnet50", ",", "\n", "101", ":", "resnet101", ",", "}", "\n", "\n", "if", "num_layers", "not", "in", "resnets", ":", "\n", "            ", "raise", "ValueError", "(", "\"{} is not a valid number of resnet layers\"", ".", "format", "(", "num_layers", ")", ")", "\n", "\n", "\n", "", "self", ".", "encoder", "=", "resnets", "[", "num_layers", "]", "(", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "pretrained_path", ")", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "", "if", "num_layers", ">", "34", ":", "\n", "            ", "self", ".", "num_ch_enc", "[", "1", ":", "]", "*=", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.encoder.Encoder.forward": [[35, 44], ["encoder.Encoder.features.append", "encoder.Encoder.features.append", "encoder.Encoder.features.append", "encoder.Encoder.features.append", "encoder.Encoder.features.append", "encoder.Encoder.encoder.relu", "encoder.Encoder.encoder.layer1", "encoder.Encoder.encoder.layer2", "encoder.Encoder.encoder.layer3", "encoder.Encoder.encoder.layer4", "encoder.Encoder.encoder.bn1", "encoder.Encoder.encoder.maxpool", "encoder.Encoder.encoder.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_image", ")", ":", "\n", "        ", "self", ".", "features", "=", "[", "]", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "relu", "(", "self", ".", "encoder", ".", "bn1", "(", "self", ".", "encoder", ".", "conv1", "(", "input_image", ")", ")", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer1", "(", "self", ".", "encoder", ".", "maxpool", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer2", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer3", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer4", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "\n", "return", "self", ".", "features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.depth_decoder.DepthDecoder.__init__": [[8, 40], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "layers.Conv1x1", "layers.Conv1x1", "layers.Conv1x1", "layers.Conv1x1", "layers.Conv3x3", "layers.Conv3x3", "layers.Conv3x3", "layers.Conv3x3", "depth_decoder.DepthDecoder._make_crp", "depth_decoder.DepthDecoder._make_crp", "depth_decoder.DepthDecoder._make_crp", "depth_decoder.DepthDecoder._make_crp", "layers.Conv3x3", "layers.Conv3x3", "layers.Conv3x3", "layers.Conv3x3", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.Conv3x3", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "layers.Conv3x3", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "layers.Conv3x3", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "layers.Conv3x3", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.depth_decoder.DepthDecoder._make_crp", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.depth_decoder.DepthDecoder._make_crp", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.depth_decoder.DepthDecoder._make_crp", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.depth_decoder.DepthDecoder._make_crp"], ["    ", "def", "__init__", "(", "self", ",", "num_ch_enc", ")", ":", "\n", "        ", "super", "(", "DepthDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "bottleneck", "=", "256", "\n", "stage", "=", "4", "\n", "self", ".", "do", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "self", ".", "reduce4", "=", "Conv1x1", "(", "num_ch_enc", "[", "4", "]", ",", "512", ",", "bias", "=", "False", ")", "\n", "self", ".", "reduce3", "=", "Conv1x1", "(", "num_ch_enc", "[", "3", "]", ",", "bottleneck", ",", "bias", "=", "False", ")", "\n", "self", ".", "reduce2", "=", "Conv1x1", "(", "num_ch_enc", "[", "2", "]", ",", "bottleneck", ",", "bias", "=", "False", ")", "\n", "self", ".", "reduce1", "=", "Conv1x1", "(", "num_ch_enc", "[", "1", "]", ",", "bottleneck", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "iconv4", "=", "Conv3x3", "(", "512", ",", "bottleneck", ")", "\n", "self", ".", "iconv3", "=", "Conv3x3", "(", "bottleneck", "*", "2", "+", "1", ",", "bottleneck", ")", "\n", "self", ".", "iconv2", "=", "Conv3x3", "(", "bottleneck", "*", "2", "+", "1", ",", "bottleneck", ")", "\n", "self", ".", "iconv1", "=", "Conv3x3", "(", "bottleneck", "*", "2", "+", "1", ",", "bottleneck", ")", "\n", "\n", "self", ".", "crp4", "=", "self", ".", "_make_crp", "(", "bottleneck", ",", "bottleneck", ",", "stage", ")", "\n", "self", ".", "crp3", "=", "self", ".", "_make_crp", "(", "bottleneck", ",", "bottleneck", ",", "stage", ")", "\n", "self", ".", "crp2", "=", "self", ".", "_make_crp", "(", "bottleneck", ",", "bottleneck", ",", "stage", ")", "\n", "self", ".", "crp1", "=", "self", ".", "_make_crp", "(", "bottleneck", ",", "bottleneck", ",", "stage", ")", "\n", "\n", "self", ".", "merge4", "=", "Conv3x3", "(", "bottleneck", ",", "bottleneck", ")", "\n", "self", ".", "merge3", "=", "Conv3x3", "(", "bottleneck", ",", "bottleneck", ")", "\n", "self", ".", "merge2", "=", "Conv3x3", "(", "bottleneck", ",", "bottleneck", ")", "\n", "self", ".", "merge1", "=", "Conv3x3", "(", "bottleneck", ",", "bottleneck", ")", "\n", "\n", "# disp", "\n", "self", ".", "disp4", "=", "nn", ".", "Sequential", "(", "Conv3x3", "(", "bottleneck", ",", "1", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "disp3", "=", "nn", ".", "Sequential", "(", "Conv3x3", "(", "bottleneck", ",", "1", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "disp2", "=", "nn", ".", "Sequential", "(", "Conv3x3", "(", "bottleneck", ",", "1", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "disp1", "=", "nn", ".", "Sequential", "(", "Conv3x3", "(", "bottleneck", ",", "1", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.depth_decoder.DepthDecoder._make_crp": [[41, 44], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.CRPBlock"], "methods", ["None"], ["", "def", "_make_crp", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stages", ")", ":", "\n", "        ", "layers", "=", "[", "CRPBlock", "(", "in_planes", ",", "out_planes", ",", "stages", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.depth_decoder.DepthDecoder.forward": [[45, 99], ["depth_decoder.DepthDecoder.do", "depth_decoder.DepthDecoder.do", "depth_decoder.DepthDecoder.reduce4", "depth_decoder.DepthDecoder.iconv4", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "depth_decoder.DepthDecoder.crp4", "depth_decoder.DepthDecoder.merge4", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "layers.upsample", "depth_decoder.DepthDecoder.disp4", "depth_decoder.DepthDecoder.reduce3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "depth_decoder.DepthDecoder.iconv3", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "depth_decoder.DepthDecoder.crp3", "depth_decoder.DepthDecoder.merge3", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "layers.upsample", "depth_decoder.DepthDecoder.disp3", "depth_decoder.DepthDecoder.reduce2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "depth_decoder.DepthDecoder.iconv2", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "depth_decoder.DepthDecoder.crp2", "depth_decoder.DepthDecoder.merge2", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "layers.upsample", "depth_decoder.DepthDecoder.disp2", "depth_decoder.DepthDecoder.reduce1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "depth_decoder.DepthDecoder.iconv1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "depth_decoder.DepthDecoder.crp1", "depth_decoder.DepthDecoder.merge1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "layers.upsample", "depth_decoder.DepthDecoder.disp1"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample"], ["", "def", "forward", "(", "self", ",", "input_features", ",", "frame_id", "=", "0", ")", ":", "\n", "        ", "self", ".", "outputs", "=", "{", "}", "\n", "l0", ",", "l1", ",", "l2", ",", "l3", ",", "l4", "=", "input_features", "\n", "\n", "l4", "=", "self", ".", "do", "(", "l4", ")", "\n", "l3", "=", "self", ".", "do", "(", "l3", ")", "\n", "\n", "x4", "=", "self", ".", "reduce4", "(", "l4", ")", "\n", "x4", "=", "self", ".", "iconv4", "(", "x4", ")", "\n", "x4", "=", "F", ".", "leaky_relu", "(", "x4", ")", "\n", "x4", "=", "self", ".", "crp4", "(", "x4", ")", "\n", "x4", "=", "self", ".", "merge4", "(", "x4", ")", "\n", "x4", "=", "F", ".", "leaky_relu", "(", "x4", ")", "\n", "x4", "=", "upsample", "(", "x4", ")", "\n", "disp4", "=", "self", ".", "disp4", "(", "x4", ")", "\n", "\n", "\n", "x3", "=", "self", ".", "reduce3", "(", "l3", ")", "\n", "x3", "=", "torch", ".", "cat", "(", "(", "x3", ",", "x4", ",", "disp4", ")", ",", "1", ")", "\n", "x3", "=", "self", ".", "iconv3", "(", "x3", ")", "\n", "x3", "=", "F", ".", "leaky_relu", "(", "x3", ")", "\n", "x3", "=", "self", ".", "crp3", "(", "x3", ")", "\n", "x3", "=", "self", ".", "merge3", "(", "x3", ")", "\n", "x3", "=", "F", ".", "leaky_relu", "(", "x3", ")", "\n", "x3", "=", "upsample", "(", "x3", ")", "\n", "disp3", "=", "self", ".", "disp3", "(", "x3", ")", "\n", "\n", "\n", "x2", "=", "self", ".", "reduce2", "(", "l2", ")", "\n", "x2", "=", "torch", ".", "cat", "(", "(", "x2", ",", "x3", ",", "disp3", ")", ",", "1", ")", "\n", "x2", "=", "self", ".", "iconv2", "(", "x2", ")", "\n", "x2", "=", "F", ".", "leaky_relu", "(", "x2", ")", "\n", "x2", "=", "self", ".", "crp2", "(", "x2", ")", "\n", "x2", "=", "self", ".", "merge2", "(", "x2", ")", "\n", "x2", "=", "F", ".", "leaky_relu", "(", "x2", ")", "\n", "x2", "=", "upsample", "(", "x2", ")", "\n", "disp2", "=", "self", ".", "disp2", "(", "x2", ")", "\n", "\n", "x1", "=", "self", ".", "reduce1", "(", "l1", ")", "\n", "x1", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ",", "disp2", ")", ",", "1", ")", "\n", "x1", "=", "self", ".", "iconv1", "(", "x1", ")", "\n", "x1", "=", "F", ".", "leaky_relu", "(", "x1", ")", "\n", "x1", "=", "self", ".", "crp1", "(", "x1", ")", "\n", "x1", "=", "self", ".", "merge1", "(", "x1", ")", "\n", "x1", "=", "F", ".", "leaky_relu", "(", "x1", ")", "\n", "x1", "=", "upsample", "(", "x1", ")", "\n", "disp1", "=", "self", ".", "disp1", "(", "x1", ")", "\n", "\n", "self", ".", "outputs", "[", "(", "\"disp\"", ",", "frame_id", ",", "3", ")", "]", "=", "disp4", "\n", "self", ".", "outputs", "[", "(", "\"disp\"", ",", "frame_id", ",", "2", ")", "]", "=", "disp3", "\n", "self", ".", "outputs", "[", "(", "\"disp\"", ",", "frame_id", ",", "1", ")", "]", "=", "disp2", "\n", "self", ".", "outputs", "[", "(", "\"disp\"", ",", "frame_id", ",", "0", ")", "]", "=", "disp1", "\n", "\n", "return", "self", ".", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.depth_encoder.DepthEncoder.__init__": [[9, 30], ["torch.Module.__init__", "numpy.array", "ValueError", "torch.load", "torch.load", "torch.load", "torch.load", "depth_encoder.DepthEncoder.encoder.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "pretrained_path", "=", "None", ")", ":", "\n", "        ", "super", "(", "DepthEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_ch_enc", "=", "np", ".", "array", "(", "[", "64", ",", "64", ",", "128", ",", "256", ",", "512", "]", ")", "\n", "\n", "resnets", "=", "{", "18", ":", "resnet18", ",", "\n", "34", ":", "resnet34", ",", "\n", "50", ":", "resnet50", ",", "\n", "101", ":", "resnet101", ",", "}", "\n", "\n", "if", "num_layers", "not", "in", "resnets", ":", "\n", "            ", "raise", "ValueError", "(", "\"{} is not a valid number of resnet layers\"", ".", "format", "(", "num_layers", ")", ")", "\n", "\n", "\n", "", "self", ".", "encoder", "=", "resnets", "[", "num_layers", "]", "(", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "pretrained_path", ")", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "", "if", "num_layers", ">", "34", ":", "\n", "            ", "self", ".", "num_ch_enc", "[", "1", ":", "]", "*=", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.depth_encoder.DepthEncoder.forward": [[35, 45], ["depth_encoder.DepthEncoder.features.append", "depth_encoder.DepthEncoder.features.append", "depth_encoder.DepthEncoder.features.append", "depth_encoder.DepthEncoder.features.append", "depth_encoder.DepthEncoder.features.append", "depth_encoder.DepthEncoder.encoder.relu", "depth_encoder.DepthEncoder.encoder.layer1", "depth_encoder.DepthEncoder.encoder.layer2", "depth_encoder.DepthEncoder.encoder.layer3", "depth_encoder.DepthEncoder.encoder.layer4", "depth_encoder.DepthEncoder.encoder.bn1", "depth_encoder.DepthEncoder.encoder.maxpool", "depth_encoder.DepthEncoder.encoder.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_image", ")", ":", "\n", "        ", "self", ".", "features", "=", "[", "]", "\n", "x", "=", "(", "input_image", "-", "0.45", ")", "/", "0.225", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "relu", "(", "self", ".", "encoder", ".", "bn1", "(", "self", ".", "encoder", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer1", "(", "self", ".", "encoder", ".", "maxpool", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer2", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer3", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer4", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "\n", "return", "self", ".", "features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.net.mono_fm_joint.__init__": [[18, 32], ["torch.Module.__init__", "depth_encoder.DepthEncoder", "depth_decoder.DepthDecoder", "pose_encoder.PoseEncoder", "pose_decoder.PoseDecoder", "encoder.Encoder", "decoder.Decoder", "layers.SSIM", "layers.Backproject", "layers.Project"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "options", ")", ":", "\n", "        ", "super", "(", "mono_fm_joint", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "options", "\n", "self", ".", "DepthEncoder", "=", "DepthEncoder", "(", "self", ".", "opt", ".", "depth_num_layers", ",", "\n", "self", ".", "opt", ".", "depth_pretrained_path", ")", "\n", "self", ".", "DepthDecoder", "=", "DepthDecoder", "(", "self", ".", "DepthEncoder", ".", "num_ch_enc", ")", "\n", "self", ".", "PoseEncoder", "=", "PoseEncoder", "(", "self", ".", "opt", ".", "pose_num_layers", ",", "\n", "self", ".", "opt", ".", "pose_pretrained_path", ")", "\n", "self", ".", "PoseDecoder", "=", "PoseDecoder", "(", "self", ".", "PoseEncoder", ".", "num_ch_enc", ")", "\n", "self", ".", "Encoder", "=", "Encoder", "(", "self", ".", "opt", ".", "depth_num_layers", ",", "self", ".", "opt", ".", "depth_pretrained_path", ")", "\n", "self", ".", "Decoder", "=", "Decoder", "(", "self", ".", "Encoder", ".", "num_ch_enc", ")", "\n", "self", ".", "ssim", "=", "SSIM", "(", ")", "\n", "self", ".", "backproject", "=", "Backproject", "(", "self", ".", "opt", ".", "imgs_per_gpu", ",", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ")", "\n", "self", ".", "project", "=", "Project", "(", "self", ".", "opt", ".", "imgs_per_gpu", ",", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.net.mono_fm_joint.forward": [[33, 42], ["net.mono_fm_joint.DepthDecoder", "net.mono_fm_joint.DepthEncoder", "net.mono_fm_joint.update", "net.mono_fm_joint.Encoder", "net.mono_fm_joint.update", "net.mono_fm_joint.compute_losses", "net.mono_fm_joint.predict_poses", "net.mono_fm_joint.Decoder"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.compute_losses", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.predict_poses"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "DepthDecoder", "(", "self", ".", "DepthEncoder", "(", "inputs", "[", "\"color_aug\"", ",", "0", ",", "0", "]", ")", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "outputs", ".", "update", "(", "self", ".", "predict_poses", "(", "inputs", ")", ")", "\n", "features", "=", "self", ".", "Encoder", "(", "inputs", "[", "(", "\"color\"", ",", "0", ",", "0", ")", "]", ")", "\n", "outputs", ".", "update", "(", "self", ".", "Decoder", "(", "features", ",", "0", ")", ")", "\n", "loss_dict", "=", "self", ".", "compute_losses", "(", "inputs", ",", "outputs", ",", "features", ")", "\n", "return", "outputs", ",", "loss_dict", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.net.mono_fm_joint.robust_l1": [[43, 46], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "robust_l1", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "eps", "=", "1e-3", "\n", "return", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "target", "-", "pred", ",", "2", ")", "+", "eps", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.net.mono_fm_joint.compute_perceptional_loss": [[47, 50], ["net.mono_fm_joint.robust_l1().mean", "net.mono_fm_joint.robust_l1"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.robust_l1"], ["", "def", "compute_perceptional_loss", "(", "self", ",", "tgt_f", ",", "src_f", ")", ":", "\n", "        ", "loss", "=", "self", ".", "robust_l1", "(", "tgt_f", ",", "src_f", ")", ".", "mean", "(", "1", ",", "True", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.net.mono_fm_joint.compute_reprojection_loss": [[51, 56], ["net.mono_fm_joint.robust_l1().mean", "net.mono_fm_joint.ssim().mean", "net.mono_fm_joint.robust_l1", "net.mono_fm_joint.ssim"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.robust_l1"], ["", "def", "compute_reprojection_loss", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "photometric_loss", "=", "self", ".", "robust_l1", "(", "pred", ",", "target", ")", ".", "mean", "(", "1", ",", "True", ")", "\n", "ssim_loss", "=", "self", ".", "ssim", "(", "pred", ",", "target", ")", ".", "mean", "(", "1", ",", "True", ")", "\n", "reprojection_loss", "=", "(", "0.85", "*", "ssim_loss", "+", "0.15", "*", "photometric_loss", ")", "\n", "return", "reprojection_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.net.mono_fm_joint.compute_losses": [[57, 137], ["range", "net.mono_fm_joint.get_feature_regularization_loss", "res_img.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "net.mono_fm_joint.compute_reprojection_loss", "net.mono_fm_joint.generate_images_pred", "net.mono_fm_joint.generate_features_pred", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "net.mono_fm_joint.get_smooth_loss", "net.mono_fm_joint.mean", "len", "reprojection_losses.append", "min_reconstruct_loss.mean", "len", "perceptional_losses.append", "len", "disp.mean().mean", "len", "net.mono_fm_joint.compute_reprojection_loss", "reprojection_losses.append", "net.mono_fm_joint.compute_reprojection_loss", "net.mono_fm_joint.Encoder", "net.mono_fm_joint.compute_perceptional_loss", "min_perceptional_loss.mean", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "disp.mean", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.net.mono_fm_joint.get_feature_regularization_loss", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.compute_reprojection_loss", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.generate_images_pred", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.generate_features_pred", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.get_smooth_loss", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.compute_reprojection_loss", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.compute_reprojection_loss", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.compute_perceptional_loss"], ["", "def", "compute_losses", "(", "self", ",", "inputs", ",", "outputs", ",", "features", ")", ":", "\n", "        ", "loss_dict", "=", "{", "}", "\n", "target", "=", "inputs", "[", "(", "\"color\"", ",", "0", ",", "0", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "f", "=", "features", "[", "i", "]", "\n", "regularization_loss", "=", "self", ".", "get_feature_regularization_loss", "(", "f", ",", "target", ")", "\n", "loss_dict", "[", "(", "'feature_regularization_loss'", ",", "i", ")", "]", "=", "regularization_loss", "/", "(", "2", "**", "i", ")", "/", "5", "\n", "\n", "", "for", "scale", "in", "self", ".", "opt", ".", "scales", ":", "\n", "            ", "\"\"\"\n            initialization\n            \"\"\"", "\n", "disp", "=", "outputs", "[", "(", "\"disp\"", ",", "0", ",", "scale", ")", "]", "\n", "\n", "reprojection_losses", "=", "[", "]", "\n", "perceptional_losses", "=", "[", "]", "\n", "\n", "\"\"\"\n            autoencoder\n            \"\"\"", "\n", "res_img", "=", "outputs", "[", "(", "\"res_img\"", ",", "0", ",", "scale", ")", "]", "\n", "_", ",", "_", ",", "h", ",", "w", "=", "res_img", ".", "size", "(", ")", "\n", "target_resize", "=", "F", ".", "interpolate", "(", "target", ",", "[", "h", ",", "w", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "img_reconstruct_loss", "=", "self", ".", "compute_reprojection_loss", "(", "res_img", ",", "target_resize", ")", "\n", "loss_dict", "[", "(", "'img_reconstruct_loss'", ",", "scale", ")", "]", "=", "img_reconstruct_loss", ".", "mean", "(", ")", "/", "len", "(", "self", ".", "opt", ".", "scales", ")", "\n", "\n", "\"\"\"\n            reconstruction\n            \"\"\"", "\n", "outputs", "=", "self", ".", "generate_images_pred", "(", "inputs", ",", "outputs", ",", "scale", ")", "\n", "outputs", "=", "self", ".", "generate_features_pred", "(", "inputs", ",", "outputs", ")", "\n", "\n", "\"\"\"\n            automask\n            \"\"\"", "\n", "if", "self", ".", "opt", ".", "automask", ":", "\n", "                ", "for", "frame_id", "in", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ":", "\n", "                    ", "pred", "=", "inputs", "[", "(", "\"color\"", ",", "frame_id", ",", "0", ")", "]", "\n", "identity_reprojection_loss", "=", "self", ".", "compute_reprojection_loss", "(", "pred", ",", "target", ")", "\n", "identity_reprojection_loss", "+=", "torch", ".", "randn", "(", "identity_reprojection_loss", ".", "shape", ")", ".", "cuda", "(", ")", "*", "1e-5", "\n", "reprojection_losses", ".", "append", "(", "identity_reprojection_loss", ")", "\n", "\n", "", "", "\"\"\"\n            minimum reconstruction loss\n            \"\"\"", "\n", "for", "frame_id", "in", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ":", "\n", "                ", "pred", "=", "outputs", "[", "(", "\"color\"", ",", "frame_id", ",", "scale", ")", "]", "\n", "reprojection_losses", ".", "append", "(", "self", ".", "compute_reprojection_loss", "(", "pred", ",", "target", ")", ")", "\n", "", "reprojection_loss", "=", "torch", ".", "cat", "(", "reprojection_losses", ",", "1", ")", "\n", "\n", "min_reconstruct_loss", ",", "outputs", "[", "(", "\"min_index\"", ",", "scale", ")", "]", "=", "torch", ".", "min", "(", "reprojection_loss", ",", "dim", "=", "1", ")", "\n", "loss_dict", "[", "(", "'min_reconstruct_loss'", ",", "scale", ")", "]", "=", "min_reconstruct_loss", ".", "mean", "(", ")", "/", "len", "(", "self", ".", "opt", ".", "scales", ")", "\n", "\n", "\"\"\"\n            minimum perceptional loss\n            \"\"\"", "\n", "for", "frame_id", "in", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ":", "\n", "                ", "src_f", "=", "outputs", "[", "(", "\"feature\"", ",", "frame_id", ",", "0", ")", "]", "\n", "tgt_f", "=", "self", ".", "Encoder", "(", "inputs", "[", "(", "\"color\"", ",", "0", ",", "0", ")", "]", ")", "[", "0", "]", "\n", "perceptional_losses", ".", "append", "(", "self", ".", "compute_perceptional_loss", "(", "tgt_f", ",", "src_f", ")", ")", "\n", "", "perceptional_loss", "=", "torch", ".", "cat", "(", "perceptional_losses", ",", "1", ")", "\n", "\n", "min_perceptional_loss", ",", "outputs", "[", "(", "\"min_index\"", ",", "scale", ")", "]", "=", "torch", ".", "min", "(", "perceptional_loss", ",", "dim", "=", "1", ")", "\n", "loss_dict", "[", "(", "'min_perceptional_loss'", ",", "scale", ")", "]", "=", "self", ".", "opt", ".", "perception_weight", "*", "min_perceptional_loss", ".", "mean", "(", ")", "/", "len", "(", "self", ".", "opt", ".", "scales", ")", "\n", "\n", "\"\"\"\n            disp mean normalization\n            \"\"\"", "\n", "if", "self", ".", "opt", ".", "disp_norm", ":", "\n", "                ", "mean_disp", "=", "disp", ".", "mean", "(", "2", ",", "True", ")", ".", "mean", "(", "3", ",", "True", ")", "\n", "disp", "=", "disp", "/", "(", "mean_disp", "+", "1e-7", ")", "\n", "\n", "", "\"\"\"\n            smooth loss\n            \"\"\"", "\n", "smooth_loss", "=", "self", ".", "get_smooth_loss", "(", "disp", ",", "target", ")", "\n", "loss_dict", "[", "(", "'smooth_loss'", ",", "scale", ")", "]", "=", "self", ".", "opt", ".", "smoothness_weight", "*", "smooth_loss", "/", "(", "2", "**", "scale", ")", "/", "len", "(", "self", ".", "opt", ".", "scales", ")", "\n", "\n", "", "return", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.net.mono_fm_joint.disp_to_depth": [[138, 144], ["None"], "methods", ["None"], ["", "def", "disp_to_depth", "(", "self", ",", "disp", ",", "min_depth", ",", "max_depth", ")", ":", "\n", "        ", "min_disp", "=", "1", "/", "max_depth", "# 0.01", "\n", "max_disp", "=", "1", "/", "min_depth", "# 10", "\n", "scaled_disp", "=", "min_disp", "+", "(", "max_disp", "-", "min_disp", ")", "*", "disp", "# (10-0.01)*disp+0.01", "\n", "depth", "=", "1", "/", "scaled_disp", "\n", "return", "scaled_disp", ",", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.net.mono_fm_joint.predict_poses": [[145, 159], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "net.mono_fm_joint.PoseEncoder", "net.mono_fm_joint.PoseDecoder", "net.mono_fm_joint.transformation_from_parameters", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.transformation_from_parameters"], ["", "def", "predict_poses", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "{", "}", "\n", "#[192,640] for kitti", "\n", "pose_feats", "=", "{", "f_i", ":", "F", ".", "interpolate", "(", "inputs", "[", "\"color_aug\"", ",", "f_i", ",", "0", "]", ",", "[", "192", ",", "640", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "for", "f_i", "in", "self", ".", "opt", ".", "frame_ids", "}", "\n", "for", "f_i", "in", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ":", "\n", "            ", "if", "not", "f_i", "==", "\"s\"", ":", "\n", "                ", "if", "f_i", "<", "0", ":", "\n", "                    ", "pose_inputs", "=", "[", "pose_feats", "[", "f_i", "]", ",", "pose_feats", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                    ", "pose_inputs", "=", "[", "pose_feats", "[", "0", "]", ",", "pose_feats", "[", "f_i", "]", "]", "\n", "", "pose_inputs", "=", "self", ".", "PoseEncoder", "(", "torch", ".", "cat", "(", "pose_inputs", ",", "1", ")", ")", "\n", "axisangle", ",", "translation", "=", "self", ".", "PoseDecoder", "(", "pose_inputs", ")", "\n", "outputs", "[", "(", "\"cam_T_cam\"", ",", "0", ",", "f_i", ")", "]", "=", "self", ".", "transformation_from_parameters", "(", "axisangle", "[", ":", ",", "0", "]", ",", "translation", "[", ":", ",", "0", "]", ",", "invert", "=", "(", "f_i", "<", "0", ")", ")", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.net.mono_fm_joint.generate_images_pred": [[160, 174], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "net.mono_fm_joint.disp_to_depth", "enumerate", "net.mono_fm_joint.backproject", "net.mono_fm_joint.project", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.disp_to_depth"], ["", "def", "generate_images_pred", "(", "self", ",", "inputs", ",", "outputs", ",", "scale", ")", ":", "\n", "        ", "disp", "=", "outputs", "[", "(", "\"disp\"", ",", "0", ",", "scale", ")", "]", "\n", "disp", "=", "F", ".", "interpolate", "(", "disp", ",", "[", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "_", ",", "depth", "=", "self", ".", "disp_to_depth", "(", "disp", ",", "self", ".", "opt", ".", "min_depth", ",", "self", ".", "opt", ".", "max_depth", ")", "\n", "for", "i", ",", "frame_id", "in", "enumerate", "(", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ")", ":", "\n", "            ", "if", "frame_id", "==", "\"s\"", ":", "\n", "                ", "T", "=", "inputs", "[", "\"stereo_T\"", "]", "\n", "", "else", ":", "\n", "                ", "T", "=", "outputs", "[", "(", "\"cam_T_cam\"", ",", "0", ",", "frame_id", ")", "]", "\n", "", "cam_points", "=", "self", ".", "backproject", "(", "depth", ",", "inputs", "[", "(", "\"inv_K\"", ")", "]", ")", "\n", "pix_coords", "=", "self", ".", "project", "(", "cam_points", ",", "inputs", "[", "(", "\"K\"", ")", "]", ",", "T", ")", "#[b,h,w,2]", "\n", "img", "=", "inputs", "[", "(", "\"color\"", ",", "frame_id", ",", "0", ")", "]", "\n", "outputs", "[", "(", "\"color\"", ",", "frame_id", ",", "scale", ")", "]", "=", "F", ".", "grid_sample", "(", "img", ",", "pix_coords", ",", "padding_mode", "=", "\"border\"", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.net.mono_fm_joint.generate_features_pred": [[175, 194], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "net.mono_fm_joint.disp_to_depth", "enumerate", "layers.Backproject", "layers.Project", "layers.Backproject.", "layers.Project.", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "int", "int", "int", "int", "int", "int", "net.mono_fm_joint.Encoder"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.disp_to_depth"], ["", "def", "generate_features_pred", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "disp", "=", "outputs", "[", "(", "\"disp\"", ",", "0", ",", "0", ")", "]", "\n", "disp", "=", "F", ".", "interpolate", "(", "disp", ",", "[", "int", "(", "self", ".", "opt", ".", "height", "/", "2", ")", ",", "int", "(", "self", ".", "opt", ".", "width", "/", "2", ")", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "_", ",", "depth", "=", "self", ".", "disp_to_depth", "(", "disp", ",", "self", ".", "opt", ".", "min_depth", ",", "self", ".", "opt", ".", "max_depth", ")", "\n", "for", "i", ",", "frame_id", "in", "enumerate", "(", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ")", ":", "\n", "            ", "if", "frame_id", "==", "\"s\"", ":", "\n", "                ", "T", "=", "inputs", "[", "\"stereo_T\"", "]", "\n", "", "else", ":", "\n", "                ", "T", "=", "outputs", "[", "(", "\"cam_T_cam\"", ",", "0", ",", "frame_id", ")", "]", "\n", "\n", "", "backproject", "=", "Backproject", "(", "self", ".", "opt", ".", "imgs_per_gpu", ",", "int", "(", "self", ".", "opt", ".", "height", "/", "2", ")", ",", "int", "(", "self", ".", "opt", ".", "width", "/", "2", ")", ")", "\n", "project", "=", "Project", "(", "self", ".", "opt", ".", "imgs_per_gpu", ",", "int", "(", "self", ".", "opt", ".", "height", "/", "2", ")", ",", "int", "(", "self", ".", "opt", ".", "width", "/", "2", ")", ")", "\n", "\n", "cam_points", "=", "backproject", "(", "depth", ",", "inputs", "[", "(", "\"inv_K\"", ")", "]", ")", "\n", "pix_coords", "=", "project", "(", "cam_points", ",", "inputs", "[", "(", "\"K\"", ")", "]", ",", "T", ")", "#[b,h,w,2]", "\n", "img", "=", "inputs", "[", "(", "\"color\"", ",", "frame_id", ",", "0", ")", "]", "\n", "src_f", "=", "self", ".", "Encoder", "(", "img", ")", "[", "0", "]", "\n", "outputs", "[", "(", "\"feature\"", ",", "frame_id", ",", "0", ")", "]", "=", "F", ".", "grid_sample", "(", "src_f", ",", "pix_coords", ",", "padding_mode", "=", "\"border\"", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.net.mono_fm_joint.transformation_from_parameters": [[195, 207], ["net.mono_fm_joint.rot_from_axisangle", "translation.clone", "net.mono_fm_joint.get_translation_matrix", "R.transpose.transpose.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.rot_from_axisangle", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.get_translation_matrix"], ["", "def", "transformation_from_parameters", "(", "self", ",", "axisangle", ",", "translation", ",", "invert", "=", "False", ")", ":", "\n", "        ", "R", "=", "self", ".", "rot_from_axisangle", "(", "axisangle", ")", "\n", "t", "=", "translation", ".", "clone", "(", ")", "\n", "if", "invert", ":", "\n", "            ", "R", "=", "R", ".", "transpose", "(", "1", ",", "2", ")", "\n", "t", "*=", "-", "1", "\n", "", "T", "=", "self", ".", "get_translation_matrix", "(", "t", ")", "\n", "if", "invert", ":", "\n", "            ", "M", "=", "torch", ".", "matmul", "(", "R", ",", "T", ")", "\n", "", "else", ":", "\n", "            ", "M", "=", "torch", ".", "matmul", "(", "T", ",", "R", ")", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.net.mono_fm_joint.get_translation_matrix": [[208, 217], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "translation_vector.contiguous().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "translation_vector.contiguous"], "methods", ["None"], ["", "def", "get_translation_matrix", "(", "self", ",", "translation_vector", ")", ":", "\n", "        ", "T", "=", "torch", ".", "zeros", "(", "translation_vector", ".", "shape", "[", "0", "]", ",", "4", ",", "4", ")", ".", "cuda", "(", ")", "\n", "t", "=", "translation_vector", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "3", ",", "1", ")", "\n", "T", "[", ":", ",", "0", ",", "0", "]", "=", "1", "\n", "T", "[", ":", ",", "1", ",", "1", "]", "=", "1", "\n", "T", "[", ":", ",", "2", ",", "2", "]", "=", "1", "\n", "T", "[", ":", ",", "3", ",", "3", "]", "=", "1", "\n", "T", "[", ":", ",", ":", "3", ",", "3", ",", "None", "]", "=", "t", "\n", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.net.mono_fm_joint.rot_from_axisangle": [[218, 248], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "axis[].unsqueeze", "axis[].unsqueeze", "axis[].unsqueeze", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "rot_from_axisangle", "(", "self", ",", "vec", ")", ":", "\n", "        ", "angle", "=", "torch", ".", "norm", "(", "vec", ",", "2", ",", "2", ",", "True", ")", "\n", "axis", "=", "vec", "/", "(", "angle", "+", "1e-7", ")", "\n", "ca", "=", "torch", ".", "cos", "(", "angle", ")", "\n", "sa", "=", "torch", ".", "sin", "(", "angle", ")", "\n", "C", "=", "1", "-", "ca", "\n", "x", "=", "axis", "[", "...", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "y", "=", "axis", "[", "...", ",", "1", "]", ".", "unsqueeze", "(", "1", ")", "\n", "z", "=", "axis", "[", "...", ",", "2", "]", ".", "unsqueeze", "(", "1", ")", "\n", "xs", "=", "x", "*", "sa", "\n", "ys", "=", "y", "*", "sa", "\n", "zs", "=", "z", "*", "sa", "\n", "xC", "=", "x", "*", "C", "\n", "yC", "=", "y", "*", "C", "\n", "zC", "=", "z", "*", "C", "\n", "xyC", "=", "x", "*", "yC", "\n", "yzC", "=", "y", "*", "zC", "\n", "zxC", "=", "z", "*", "xC", "\n", "rot", "=", "torch", ".", "zeros", "(", "(", "vec", ".", "shape", "[", "0", "]", ",", "4", ",", "4", ")", ")", ".", "cuda", "(", ")", "\n", "rot", "[", ":", ",", "0", ",", "0", "]", "=", "torch", ".", "squeeze", "(", "x", "*", "xC", "+", "ca", ")", "\n", "rot", "[", ":", ",", "0", ",", "1", "]", "=", "torch", ".", "squeeze", "(", "xyC", "-", "zs", ")", "\n", "rot", "[", ":", ",", "0", ",", "2", "]", "=", "torch", ".", "squeeze", "(", "zxC", "+", "ys", ")", "\n", "rot", "[", ":", ",", "1", ",", "0", "]", "=", "torch", ".", "squeeze", "(", "xyC", "+", "zs", ")", "\n", "rot", "[", ":", ",", "1", ",", "1", "]", "=", "torch", ".", "squeeze", "(", "y", "*", "yC", "+", "ca", ")", "\n", "rot", "[", ":", ",", "1", ",", "2", "]", "=", "torch", ".", "squeeze", "(", "yzC", "-", "xs", ")", "\n", "rot", "[", ":", ",", "2", ",", "0", "]", "=", "torch", ".", "squeeze", "(", "zxC", "-", "ys", ")", "\n", "rot", "[", ":", ",", "2", ",", "1", "]", "=", "torch", ".", "squeeze", "(", "yzC", "+", "xs", ")", "\n", "rot", "[", ":", ",", "2", ",", "2", "]", "=", "torch", ".", "squeeze", "(", "z", "*", "zC", "+", "ca", ")", "\n", "rot", "[", ":", ",", "3", ",", "3", "]", "=", "1", "\n", "return", "rot", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.net.mono_fm_joint.get_smooth_loss": [[249, 273], ["disp.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "net.mono_fm_joint.gradient", "net.mono_fm_joint.gradient", "net.mono_fm_joint.gradient", "net.mono_fm_joint.gradient", "net.mono_fm_joint.gradient", "net.mono_fm_joint.gradient", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "disp_dx.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "disp_dy.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "disp_dyy.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "disp_dyx.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "img_dx.abs().mean", "img_dy.abs().mean", "disp_dxx.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "disp_dxy.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "img_dyy.abs().mean", "img_dyx.abs().mean", "img_dx.abs", "img_dy.abs", "img_dxx.abs().mean", "img_dxy.abs().mean", "img_dyy.abs", "img_dyx.abs", "img_dxx.abs", "img_dxy.abs"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient"], ["", "def", "get_smooth_loss", "(", "self", ",", "disp", ",", "img", ")", ":", "\n", "        ", "b", ",", "_", ",", "h", ",", "w", "=", "disp", ".", "size", "(", ")", "\n", "a1", "=", "0.5", "\n", "a2", "=", "0.5", "\n", "img", "=", "F", ".", "interpolate", "(", "img", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'area'", ")", "\n", "\n", "disp_dx", ",", "disp_dy", "=", "self", ".", "gradient", "(", "disp", ")", "\n", "img_dx", ",", "img_dy", "=", "self", ".", "gradient", "(", "img", ")", "\n", "\n", "disp_dxx", ",", "disp_dxy", "=", "self", ".", "gradient", "(", "disp_dx", ")", "\n", "disp_dyx", ",", "disp_dyy", "=", "self", ".", "gradient", "(", "disp_dy", ")", "\n", "\n", "img_dxx", ",", "img_dxy", "=", "self", ".", "gradient", "(", "img_dx", ")", "\n", "img_dyx", ",", "img_dyy", "=", "self", ".", "gradient", "(", "img_dy", ")", "\n", "\n", "smooth1", "=", "torch", ".", "mean", "(", "disp_dx", ".", "abs", "(", ")", "*", "torch", ".", "exp", "(", "-", "a1", "*", "img_dx", ".", "abs", "(", ")", ".", "mean", "(", "1", ",", "True", ")", ")", ")", "+", "torch", ".", "mean", "(", "disp_dy", ".", "abs", "(", ")", "*", "torch", ".", "exp", "(", "-", "a1", "*", "img_dy", ".", "abs", "(", ")", ".", "mean", "(", "1", ",", "True", ")", ")", ")", "\n", "\n", "smooth2", "=", "torch", ".", "mean", "(", "disp_dxx", ".", "abs", "(", ")", "*", "torch", ".", "exp", "(", "-", "a2", "*", "img_dxx", ".", "abs", "(", ")", ".", "mean", "(", "1", ",", "True", ")", ")", ")", "+", "torch", ".", "mean", "(", "disp_dxy", ".", "abs", "(", ")", "*", "torch", ".", "exp", "(", "-", "a2", "*", "img_dxy", ".", "abs", "(", ")", ".", "mean", "(", "1", ",", "True", ")", ")", ")", "+", "torch", ".", "mean", "(", "disp_dyx", ".", "abs", "(", ")", "*", "torch", ".", "exp", "(", "-", "a2", "*", "img_dyx", ".", "abs", "(", ")", ".", "mean", "(", "1", ",", "True", ")", ")", ")", "+", "torch", ".", "mean", "(", "disp_dyy", ".", "abs", "(", ")", "*", "torch", ".", "exp", "(", "-", "a2", "*", "img_dyy", ".", "abs", "(", ")", ".", "mean", "(", "1", ",", "True", ")", ")", ")", "\n", "\n", "return", "smooth1", "+", "smooth2", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.net.mono_fm_joint.gradient": [[274, 278], ["None"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "D", ")", ":", "\n", "        ", "D_dy", "=", "D", "[", ":", ",", ":", ",", "1", ":", "]", "-", "D", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "D_dx", "=", "D", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "D", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "return", "D_dx", ",", "D_dy", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.net.mono_fm_joint.get_feature_regularization_loss": [[279, 301], ["feature.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "net.mono_fm_joint.gradient", "net.mono_fm_joint.gradient", "net.mono_fm_joint.gradient", "net.mono_fm_joint.gradient", "net.mono_fm_joint.gradient", "net.mono_fm_joint.gradient", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "feature_dx.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "feature_dy.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "feature_dyy.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "feature_dyx.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "img_dx.abs().mean", "img_dy.abs().mean", "feature_dxx.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "feature_dxy.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "img_dyy.abs().mean", "img_dyx.abs().mean", "img_dx.abs", "img_dy.abs", "img_dxx.abs().mean", "img_dxy.abs().mean", "img_dyy.abs", "img_dyx.abs", "img_dxx.abs", "img_dxy.abs"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient"], ["", "def", "get_feature_regularization_loss", "(", "self", ",", "feature", ",", "img", ")", ":", "\n", "        ", "b", ",", "_", ",", "h", ",", "w", "=", "feature", ".", "size", "(", ")", "\n", "img", "=", "F", ".", "interpolate", "(", "img", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'area'", ")", "\n", "\n", "feature_dx", ",", "feature_dy", "=", "self", ".", "gradient", "(", "feature", ")", "\n", "img_dx", ",", "img_dy", "=", "self", ".", "gradient", "(", "img", ")", "\n", "\n", "feature_dxx", ",", "feature_dxy", "=", "self", ".", "gradient", "(", "feature_dx", ")", "\n", "feature_dyx", ",", "feature_dyy", "=", "self", ".", "gradient", "(", "feature_dy", ")", "\n", "\n", "img_dxx", ",", "img_dxy", "=", "self", ".", "gradient", "(", "img_dx", ")", "\n", "img_dyx", ",", "img_dyy", "=", "self", ".", "gradient", "(", "img_dy", ")", "\n", "\n", "smooth1", "=", "torch", ".", "mean", "(", "feature_dx", ".", "abs", "(", ")", "*", "torch", ".", "exp", "(", "-", "img_dx", ".", "abs", "(", ")", ".", "mean", "(", "1", ",", "True", ")", ")", ")", "+", "torch", ".", "mean", "(", "feature_dy", ".", "abs", "(", ")", "*", "torch", ".", "exp", "(", "-", "img_dy", ".", "abs", "(", ")", ".", "mean", "(", "1", ",", "True", ")", ")", ")", "\n", "\n", "smooth2", "=", "torch", ".", "mean", "(", "feature_dxx", ".", "abs", "(", ")", "*", "torch", ".", "exp", "(", "-", "img_dxx", ".", "abs", "(", ")", ".", "mean", "(", "1", ",", "True", ")", ")", ")", "+", "torch", ".", "mean", "(", "feature_dxy", ".", "abs", "(", ")", "*", "torch", ".", "exp", "(", "-", "img_dxy", ".", "abs", "(", ")", ".", "mean", "(", "1", ",", "True", ")", ")", ")", "+", "torch", ".", "mean", "(", "feature_dyx", ".", "abs", "(", ")", "*", "torch", ".", "exp", "(", "-", "img_dyx", ".", "abs", "(", ")", ".", "mean", "(", "1", ",", "True", ")", ")", ")", "+", "torch", ".", "mean", "(", "feature_dyy", ".", "abs", "(", ")", "*", "torch", ".", "exp", "(", "-", "img_dyy", ".", "abs", "(", ")", ".", "mean", "(", "1", ",", "True", ")", ")", ")", "\n", "\n", "return", "-", "self", ".", "opt", ".", "dis", "*", "smooth1", "+", "self", ".", "opt", ".", "cvt", "*", "smooth2", "", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.decoder.Decoder.__init__": [[7, 33], ["torch.Module.__init__", "layers.ConvBlock", "layers.ConvBlock", "layers.ConvBlock", "layers.ConvBlock", "layers.ConvBlock", "layers.ConvBlock", "layers.ConvBlock", "layers.ConvBlock", "layers.ConvBlock", "layers.ConvBlock", "layers.Conv3x3", "layers.Conv3x3", "layers.Conv3x3", "layers.Conv3x3", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_ch_enc", ",", "num_output_channels", "=", "3", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "num_ch_dec", "=", "[", "16", ",", "32", ",", "64", ",", "128", ",", "256", "]", "\n", "\n", "# upconv", "\n", "self", ".", "upconv5", "=", "ConvBlock", "(", "num_ch_enc", "[", "4", "]", ",", "num_ch_dec", "[", "4", "]", ")", "\n", "self", ".", "upconv4", "=", "ConvBlock", "(", "num_ch_dec", "[", "4", "]", ",", "num_ch_dec", "[", "3", "]", ")", "\n", "self", ".", "upconv3", "=", "ConvBlock", "(", "num_ch_dec", "[", "3", "]", ",", "num_ch_dec", "[", "2", "]", ")", "\n", "self", ".", "upconv2", "=", "ConvBlock", "(", "num_ch_dec", "[", "2", "]", ",", "num_ch_dec", "[", "1", "]", ")", "\n", "self", ".", "upconv1", "=", "ConvBlock", "(", "num_ch_dec", "[", "1", "]", ",", "num_ch_dec", "[", "0", "]", ")", "\n", "\n", "# iconv", "\n", "self", ".", "iconv5", "=", "ConvBlock", "(", "num_ch_dec", "[", "4", "]", ",", "num_ch_dec", "[", "4", "]", ")", "\n", "self", ".", "iconv4", "=", "ConvBlock", "(", "num_ch_dec", "[", "3", "]", ",", "num_ch_dec", "[", "3", "]", ")", "\n", "self", ".", "iconv3", "=", "ConvBlock", "(", "num_ch_dec", "[", "2", "]", ",", "num_ch_dec", "[", "2", "]", ")", "\n", "self", ".", "iconv2", "=", "ConvBlock", "(", "num_ch_dec", "[", "1", "]", ",", "num_ch_dec", "[", "1", "]", ")", "\n", "self", ".", "iconv1", "=", "ConvBlock", "(", "num_ch_dec", "[", "0", "]", ",", "num_ch_dec", "[", "0", "]", ")", "\n", "\n", "# disp", "\n", "self", ".", "disp4", "=", "Conv3x3", "(", "num_ch_dec", "[", "3", "]", ",", "num_output_channels", ")", "\n", "self", ".", "disp3", "=", "Conv3x3", "(", "num_ch_dec", "[", "2", "]", ",", "num_output_channels", ")", "\n", "self", ".", "disp2", "=", "Conv3x3", "(", "num_ch_dec", "[", "1", "]", ",", "num_output_channels", ")", "\n", "self", ".", "disp1", "=", "Conv3x3", "(", "num_ch_dec", "[", "0", "]", ",", "num_output_channels", ")", "\n", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.decoder.Decoder.forward": [[35, 60], ["layers.upsample", "decoder.Decoder.iconv5", "layers.upsample", "decoder.Decoder.iconv4", "layers.upsample", "decoder.Decoder.iconv3", "layers.upsample", "decoder.Decoder.iconv2", "layers.upsample", "decoder.Decoder.iconv1", "decoder.Decoder.sigmoid", "decoder.Decoder.sigmoid", "decoder.Decoder.sigmoid", "decoder.Decoder.sigmoid", "decoder.Decoder.upconv5", "decoder.Decoder.upconv4", "decoder.Decoder.upconv3", "decoder.Decoder.upconv2", "decoder.Decoder.upconv1", "decoder.Decoder.disp4", "decoder.Decoder.disp3", "decoder.Decoder.disp2", "decoder.Decoder.disp1"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample"], ["", "def", "forward", "(", "self", ",", "input_features", ",", "frame_id", "=", "0", ")", ":", "\n", "        ", "self", ".", "outputs", "=", "{", "}", "\n", "_", ",", "_", ",", "_", ",", "_", ",", "econv5", "=", "input_features", "\n", "# (64,64,128,256,512)*4", "\n", "\n", "upconv5", "=", "upsample", "(", "self", ".", "upconv5", "(", "econv5", ")", ")", "\n", "iconv5", "=", "self", ".", "iconv5", "(", "upconv5", ")", "\n", "\n", "upconv4", "=", "upsample", "(", "self", ".", "upconv4", "(", "iconv5", ")", ")", "\n", "iconv4", "=", "self", ".", "iconv4", "(", "upconv4", ")", "\n", "\n", "upconv3", "=", "upsample", "(", "self", ".", "upconv3", "(", "iconv4", ")", ")", "\n", "iconv3", "=", "self", ".", "iconv3", "(", "upconv3", ")", "\n", "\n", "upconv2", "=", "upsample", "(", "self", ".", "upconv2", "(", "iconv3", ")", ")", "\n", "iconv2", "=", "self", ".", "iconv2", "(", "upconv2", ")", "\n", "\n", "upconv1", "=", "upsample", "(", "self", ".", "upconv1", "(", "iconv2", ")", ")", "\n", "iconv1", "=", "self", ".", "iconv1", "(", "upconv1", ")", "\n", "\n", "self", ".", "outputs", "[", "(", "\"res_img\"", ",", "frame_id", ",", "3", ")", "]", "=", "self", ".", "sigmoid", "(", "self", ".", "disp4", "(", "iconv4", ")", ")", "\n", "self", ".", "outputs", "[", "(", "\"res_img\"", ",", "frame_id", ",", "2", ")", "]", "=", "self", ".", "sigmoid", "(", "self", ".", "disp3", "(", "iconv3", ")", ")", "\n", "self", ".", "outputs", "[", "(", "\"res_img\"", ",", "frame_id", ",", "1", ")", "]", "=", "self", ".", "sigmoid", "(", "self", ".", "disp2", "(", "iconv2", ")", ")", "\n", "self", ".", "outputs", "[", "(", "\"res_img\"", ",", "frame_id", ",", "0", ")", "]", "=", "self", ".", "sigmoid", "(", "self", ".", "disp1", "(", "iconv1", ")", ")", "\n", "return", "self", ".", "outputs", "", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.PyramidPooling.__init__": [[11, 23], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "norm_layer", ")", ":", "\n", "        ", "super", "(", "PyramidPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "2", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "3", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "6", ")", "\n", "\n", "out_channels", "=", "int", "(", "in_channels", "/", "4", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "norm_layer", "(", "out_channels", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "norm_layer", "(", "out_channels", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "norm_layer", "(", "out_channels", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "norm_layer", "(", "out_channels", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.PyramidPooling.forward": [[24, 31], ["x.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers.PyramidPooling.conv1", "layers.PyramidPooling.conv2", "layers.PyramidPooling.conv3", "layers.PyramidPooling.conv4", "layers.PyramidPooling.pool1", "layers.PyramidPooling.pool2", "layers.PyramidPooling.pool3", "layers.PyramidPooling.pool4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "feat1", "=", "F", ".", "interpolate", "(", "self", ".", "conv1", "(", "self", ".", "pool1", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat2", "=", "F", ".", "interpolate", "(", "self", ".", "conv2", "(", "self", ".", "pool2", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat3", "=", "F", ".", "interpolate", "(", "self", ".", "conv3", "(", "self", ".", "pool3", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat4", "=", "F", ".", "interpolate", "(", "self", ".", "conv4", "(", "self", ".", "pool4", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "return", "torch", ".", "cat", "(", "(", "x", ",", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.Backproject.__init__": [[42, 56], ["torch.Module.__init__", "numpy.meshgrid", "numpy.stack().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "layers.Backproject.pix_coords.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "numpy.stack", "layers.Backproject.id_coords[].view", "layers.Backproject.id_coords[].view"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "height", ",", "width", ")", ":", "\n", "        ", "super", "(", "Backproject", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "\n", "meshgrid", "=", "np", ".", "meshgrid", "(", "range", "(", "self", ".", "width", ")", ",", "range", "(", "self", ".", "height", ")", ",", "indexing", "=", "'xy'", ")", "\n", "self", ".", "id_coords", "=", "np", ".", "stack", "(", "meshgrid", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "id_coords", "=", "torch", ".", "from_numpy", "(", "self", ".", "id_coords", ")", "\n", "self", ".", "ones", "=", "torch", ".", "ones", "(", "self", ".", "batch_size", ",", "1", ",", "self", ".", "height", "*", "self", ".", "width", ")", "\n", "self", ".", "pix_coords", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "stack", "(", "[", "self", ".", "id_coords", "[", "0", "]", ".", "view", "(", "-", "1", ")", ",", "self", ".", "id_coords", "[", "1", "]", ".", "view", "(", "-", "1", ")", "]", ",", "0", ")", ",", "0", ")", "\n", "self", ".", "pix_coords", "=", "self", ".", "pix_coords", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "self", ".", "pix_coords", "=", "torch", ".", "cat", "(", "[", "self", ".", "pix_coords", ",", "self", ".", "ones", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.Backproject.forward": [[57, 62], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers.Backproject.pix_coords.cuda", "depth.view", "layers.Backproject.ones.cuda"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "depth", ",", "inv_K", ")", ":", "\n", "        ", "cam_points", "=", "torch", ".", "matmul", "(", "inv_K", "[", ":", ",", ":", "3", ",", ":", "3", "]", ",", "self", ".", "pix_coords", ".", "cuda", "(", ")", ")", "\n", "cam_points", "=", "depth", ".", "view", "(", "self", ".", "batch_size", ",", "1", ",", "-", "1", ")", "*", "cam_points", "\n", "cam_points", "=", "torch", ".", "cat", "(", "[", "cam_points", ",", "self", ".", "ones", ".", "cuda", "(", ")", "]", ",", "1", ")", "\n", "return", "cam_points", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.Project.__init__": [[65, 72], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "height", ",", "width", ",", "eps", "=", "1e-7", ")", ":", "\n", "        ", "super", "(", "Project", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.Project.forward": [[73, 83], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "pix_coords.permute.permute.view", "pix_coords.permute.permute.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "cam_points[].unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "points", ",", "K", ",", "T", ")", ":", "\n", "        ", "P", "=", "torch", ".", "matmul", "(", "K", ",", "T", ")", "[", ":", ",", ":", "3", ",", ":", "]", "\n", "cam_points", "=", "torch", ".", "matmul", "(", "P", ",", "points", ")", "\n", "pix_coords", "=", "cam_points", "[", ":", ",", ":", "2", ",", ":", "]", "/", "(", "cam_points", "[", ":", ",", "2", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "eps", ")", "\n", "pix_coords", "=", "pix_coords", ".", "view", "(", "self", ".", "batch_size", ",", "2", ",", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "pix_coords", "=", "pix_coords", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "pix_coords", "[", "...", ",", "0", "]", "/=", "self", ".", "width", "-", "1", "\n", "pix_coords", "[", "...", ",", "1", "]", "/=", "self", ".", "height", "-", "1", "\n", "pix_coords", "=", "(", "pix_coords", "-", "0.5", ")", "*", "2", "\n", "return", "pix_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.SSIM.__init__": [[86, 96], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mu_x_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "mu_y_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_x_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_y_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_xy_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "refl", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "C1", "=", "0.01", "**", "2", "\n", "self", ".", "C2", "=", "0.03", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.SSIM.forward": [[97, 108], ["layers.SSIM.refl", "layers.SSIM.refl", "layers.SSIM.mu_x_pool", "layers.SSIM.mu_y_pool", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "layers.SSIM.sig_x_pool", "layers.SSIM.sig_y_pool", "layers.SSIM.sig_xy_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x", "=", "self", ".", "refl", "(", "x", ")", "\n", "y", "=", "self", ".", "refl", "(", "y", ")", "\n", "mu_x", "=", "self", ".", "mu_x_pool", "(", "x", ")", "\n", "mu_y", "=", "self", ".", "mu_y_pool", "(", "y", ")", "\n", "sigma_x", "=", "self", ".", "sig_x_pool", "(", "x", "**", "2", ")", "-", "mu_x", "**", "2", "\n", "sigma_y", "=", "self", ".", "sig_y_pool", "(", "y", "**", "2", ")", "-", "mu_y", "**", "2", "\n", "sigma_xy", "=", "self", ".", "sig_xy_pool", "(", "x", "*", "y", ")", "-", "mu_x", "*", "mu_y", "\n", "SSIM_n", "=", "(", "2", "*", "mu_x", "*", "mu_y", "+", "self", ".", "C1", ")", "*", "(", "2", "*", "sigma_xy", "+", "self", ".", "C2", ")", "\n", "SSIM_d", "=", "(", "mu_x", "**", "2", "+", "mu_y", "**", "2", "+", "self", ".", "C1", ")", "*", "(", "sigma_x", "+", "sigma_y", "+", "self", ".", "C2", ")", "\n", "return", "torch", ".", "clamp", "(", "(", "1", "-", "SSIM_n", "/", "SSIM_d", ")", "/", "2", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.DeconvBlock.__init__": [[124, 129], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ELU", "torch.ELU", "torch.ELU"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "DeconvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", "\n", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "(", "0", ",", "1", ",", "0", ",", "1", ")", ")", "\n", "self", ".", "nonlin", "=", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.DeconvBlock.forward": [[129, 134], ["layers.DeconvBlock.conv", "layers.DeconvBlock.pad", "layers.DeconvBlock.nonlin"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "self", ".", "pad", "(", "out", ")", "\n", "out", "=", "self", ".", "nonlin", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.ConvBlock.__init__": [[137, 141], ["torch.Module.__init__", "layers.Conv3x3", "torch.ELU", "torch.ELU", "torch.ELU"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "Conv3x3", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "nonlin", "=", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.ConvBlock.forward": [[141, 145], ["layers.ConvBlock.conv", "layers.ConvBlock.nonlin"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "self", ".", "nonlin", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.Conv1x1.__init__": [[148, 151], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "Conv1x1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "int", "(", "in_channels", ")", ",", "int", "(", "out_channels", ")", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "bias", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.Conv1x1.forward": [[151, 154], ["layers.Conv1x1.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.Conv3x3.__init__": [[157, 164], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "use_refl", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv3x3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "use_refl", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "1", ")", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "int", "(", "in_channels", ")", ",", "int", "(", "out_channels", ")", ",", "3", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.Conv3x3.forward": [[164, 168], ["layers.Conv3x3.pad", "layers.Conv3x3.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pad", "(", "x", ")", "\n", "out", "=", "self", ".", "conv", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.Conv5x5.__init__": [[171, 178], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "use_refl", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv5x5", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "use_refl", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "2", ")", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "int", "(", "in_channels", ")", ",", "int", "(", "out_channels", ")", ",", "5", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.Conv5x5.forward": [[178, 182], ["layers.Conv5x5.pad", "layers.Conv5x5.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pad", "(", "x", ")", "\n", "out", "=", "self", ".", "conv", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.CRPBlock.__init__": [[185, 192], ["torch.Module.__init__", "range", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "setattr", "layers.Conv1x1"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "n_stages", ")", ":", "\n", "        ", "super", "(", "CRPBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "n_stages", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "'{}_{}'", ".", "format", "(", "i", "+", "1", ",", "'pointwise'", ")", ",", "Conv1x1", "(", "in_planes", "if", "(", "i", "==", "0", ")", "else", "out_planes", ",", "out_planes", ",", "False", ")", ")", "\n", "", "self", ".", "stride", "=", "1", "\n", "self", ".", "n_stages", "=", "n_stages", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.CRPBlock.forward": [[193, 200], ["range", "layers.CRPBlock.maxpool", "getattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "top", "=", "x", "\n", "for", "i", "in", "range", "(", "self", ".", "n_stages", ")", ":", "\n", "            ", "top", "=", "self", ".", "maxpool", "(", "top", ")", "\n", "top", "=", "getattr", "(", "self", ",", "'{}_{}'", ".", "format", "(", "i", "+", "1", ",", "'pointwise'", ")", ")", "(", "top", ")", "\n", "x", "=", "top", "+", "x", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.disp_to_depth": [[33, 39], ["None"], "function", ["None"], ["", "", "def", "disp_to_depth", "(", "disp", ",", "min_depth", ",", "max_depth", ")", ":", "\n", "    ", "min_disp", "=", "1", "/", "max_depth", "#0.01", "\n", "max_disp", "=", "1", "/", "min_depth", "#10", "\n", "scaled_disp", "=", "min_disp", "+", "(", "max_disp", "-", "min_disp", ")", "*", "disp", "#(10-0.01)*disp+0.01", "\n", "depth", "=", "1", "/", "scaled_disp", "\n", "return", "scaled_disp", ",", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.upsample": [[110, 112], ["torch.interpolate"], "function", ["None"], ["", "", "def", "upsample", "(", "x", ")", ":", "\n", "    ", "return", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.upshuffle": [[114, 120], ["torch.Sequential", "torch.ReflectionPad2d", "torch.Conv2d", "torch.PixelShuffle", "torch.ELU"], "function", ["None"], ["", "def", "upshuffle", "(", "in_planes", ",", "upscale_factor", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", "*", "upscale_factor", "**", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "PixelShuffle", "(", "upscale_factor", ")", ",", "\n", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.layers.compute_depth_errors": [[202, 214], ["torch.max", "torch.max", "torch.max", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt.mean", "torch.sqrt.mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "", "def", "compute_depth_errors", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "thresh", "=", "torch", ".", "max", "(", "(", "gt", "/", "pred", ")", ",", "(", "pred", "/", "gt", ")", ")", "\n", "a1", "=", "(", "thresh", "<", "1.25", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "thresh", "<", "1.25", "**", "2", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "thresh", "<", "1.25", "**", "3", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "rmse", "=", "(", "gt", "-", "pred", ")", "**", "2", "\n", "rmse", "=", "torch", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "rmse_log", "=", "(", "torch", ".", "log", "(", "gt", ")", "-", "torch", ".", "log", "(", "pred", ")", ")", "**", "2", "\n", "rmse_log", "=", "torch", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "abs_rel", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "gt", "-", "pred", ")", "/", "gt", ")", "\n", "sq_rel", "=", "torch", ".", "mean", "(", "(", "gt", "-", "pred", ")", "**", "2", "/", "gt", ")", "\n", "return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", ",", "a1", ",", "a2", ",", "a3", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.resnet.BasicBlock.__init__": [[19, 28], ["torch.Module.__init__", "resnet.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv3x3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "bn", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "bn", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.resnet.BasicBlock.forward": [[29, 46], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.resnet.Bottleneck.__init__": [[51, 62], ["torch.Module.__init__", "resnet.conv1x1", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "resnet.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "resnet.conv1x1", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv1x1", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv3x3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "bn", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "bn", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "bn", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.resnet.Bottleneck.forward": [[63, 84], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.resnet.ResNet.__init__": [[88, 108], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "bn", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "bn", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.resnet.ResNet._make_layer": [[109, 124], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "bn", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.resnet.ResNet.forward": [[125, 137], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.resnet.conv3x3": [[6, 9], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.resnet.conv1x1": [[11, 14], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.resnet.resnet18": [[139, 149], ["resnet.ResNet", "ResNet.load_state_dict", "print", "torch.load", "torch.load"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pretrained_path", ")", ")", "\n", "print", "(", "'Loaded pre-trained weights'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.resnet.resnet34": [[151, 161], ["resnet.ResNet", "ResNet.load_state_dict", "print", "torch.load", "torch.load", "os.join"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained_path", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "osp", ".", "join", "(", "pretrained_path", ",", "'resnet34.pth'", ")", ")", ")", "\n", "print", "(", "'Loaded pre-trained weights'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.resnet.resnet50": [[163, 173], ["resnet.ResNet", "ResNet.load_state_dict", "print", "torch.load", "torch.load", "os.join"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained_path", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "osp", ".", "join", "(", "pretrained_path", ",", "'resnet50.pth'", ")", ")", ")", "\n", "print", "(", "'Loaded pre-trained weights'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.resnet.resnet101": [[175, 185], ["resnet.ResNet", "ResNet.load_state_dict", "print", "torch.load", "torch.load", "os.join"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained_path", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "osp", ".", "join", "(", "pretrained_path", ",", "'resnet101.pth'", ")", ")", ")", "\n", "print", "(", "'Loaded pre-trained weights'", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.pose_decoder.PoseDecoder.__init__": [[6, 15], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_ch_enc", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PoseDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "reduce", "=", "nn", ".", "Conv2d", "(", "num_ch_enc", "[", "-", "1", "]", ",", "256", ",", "1", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "stride", ",", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "stride", ",", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "256", ",", "6", ",", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.pose_decoder.PoseDecoder.forward": [[16, 27], ["pose_decoder.PoseDecoder.relu", "pose_decoder.PoseDecoder.relu", "pose_decoder.PoseDecoder.relu", "pose_decoder.PoseDecoder.conv3", "out.mean().mean.mean().mean.mean().mean", "pose_decoder.PoseDecoder.reduce", "pose_decoder.PoseDecoder.conv1", "pose_decoder.PoseDecoder.conv2", "out.mean().mean.mean().mean.view", "out.mean().mean.mean().mean.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_features", ")", ":", "\n", "        ", "f", "=", "input_features", "[", "-", "1", "]", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "reduce", "(", "f", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "out", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "out", "=", "0.01", "*", "out", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "6", ")", "\n", "axisangle", "=", "out", "[", "...", ",", ":", "3", "]", "\n", "translation", "=", "out", "[", "...", ",", "3", ":", "]", "\n", "return", "axisangle", ",", "translation", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.pose_encoder.ResNetMultiImageInput.__init__": [[12, 30], ["resnet.ResNet.__init__", "torch.Conv2d", "torch.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "pose_encoder.ResNetMultiImageInput._make_layer", "pose_encoder.ResNetMultiImageInput._make_layer", "pose_encoder.ResNetMultiImageInput._make_layer", "pose_encoder.ResNetMultiImageInput._make_layer", "pose_encoder.ResNetMultiImageInput.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "num_input_images", "=", "2", ")", ":", "\n", "        ", "super", "(", "ResNetMultiImageInput", ",", "self", ")", ".", "__init__", "(", "block", ",", "layers", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_input_images", "*", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "bn", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.pose_encoder.PoseEncoder.__init__": [[53, 76], ["torch.Module.__init__", "numpy.array", "ValueError", "pose_encoder.resnet_multiimage_input", "torch.load", "torch.load", "torch.load", "torch.load", "pose_encoder.PoseEncoder.encoder.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.pose_encoder.resnet_multiimage_input"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "pretrained_path", "=", "None", ",", "num_input_images", "=", "2", ")", ":", "\n", "        ", "super", "(", "PoseEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_ch_enc", "=", "np", ".", "array", "(", "[", "64", ",", "64", ",", "128", ",", "256", ",", "512", "]", ")", "\n", "\n", "resnets", "=", "{", "18", ":", "resnet18", ",", "\n", "34", ":", "resnet34", ",", "\n", "50", ":", "resnet50", ",", "\n", "101", ":", "resnet101", ",", "}", "\n", "\n", "if", "num_layers", "not", "in", "resnets", ":", "\n", "            ", "raise", "ValueError", "(", "\"{} is not a valid number of resnet layers\"", ".", "format", "(", "num_layers", ")", ")", "\n", "\n", "", "if", "num_input_images", ">", "1", ":", "\n", "            ", "self", ".", "encoder", "=", "resnet_multiimage_input", "(", "num_layers", ",", "num_input_images", ",", "pretrained_path", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "encoder", "=", "resnets", "[", "num_layers", "]", "(", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "pretrained_path", ")", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "", "", "if", "num_layers", ">", "34", ":", "\n", "            ", "self", ".", "num_ch_enc", "[", "1", ":", "]", "*=", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.pose_encoder.PoseEncoder.forward": [[81, 93], ["pose_encoder.PoseEncoder.encoder.conv1", "pose_encoder.PoseEncoder.encoder.bn1", "pose_encoder.PoseEncoder.features.append", "pose_encoder.PoseEncoder.features.append", "pose_encoder.PoseEncoder.features.append", "pose_encoder.PoseEncoder.features.append", "pose_encoder.PoseEncoder.features.append", "pose_encoder.PoseEncoder.encoder.relu", "pose_encoder.PoseEncoder.encoder.layer1", "pose_encoder.PoseEncoder.encoder.layer2", "pose_encoder.PoseEncoder.encoder.layer3", "pose_encoder.PoseEncoder.encoder.layer4", "pose_encoder.PoseEncoder.encoder.maxpool"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_image", ")", ":", "\n", "        ", "self", ".", "features", "=", "[", "]", "\n", "x", "=", "(", "input_image", "-", "0.45", ")", "/", "0.225", "\n", "x", "=", "self", ".", "encoder", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "encoder", ".", "bn1", "(", "x", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "relu", "(", "x", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer1", "(", "self", ".", "encoder", ".", "maxpool", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer2", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer3", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer4", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "\n", "return", "self", ".", "features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm_joint.pose_encoder.resnet_multiimage_input": [[32, 50], ["pose_encoder.ResNetMultiImageInput", "torch.load", "torch.load", "ResNetMultiImageInput.load_state_dict", "pose_encoder.ResNetMultiImageInput", "torch.cat", "torch.cat"], "function", ["None"], ["", "", "", "", "def", "resnet_multiimage_input", "(", "num_layers", ",", "num_input_images", "=", "2", ",", "pretrained_path", "=", "None", ")", ":", "\n", "    ", "assert", "num_layers", "in", "[", "18", ",", "34", ",", "50", ",", "101", "]", ",", "\"Can only run with 18, 34, 50, 101 layers resnet\"", "\n", "blocks", "=", "{", "18", ":", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "34", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "50", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "101", ":", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "}", "[", "num_layers", "]", "\n", "\n", "if", "num_layers", "<", "40", ":", "\n", "        ", "model", "=", "ResNetMultiImageInput", "(", "BasicBlock", ",", "blocks", ",", "num_input_images", "=", "num_input_images", ")", "\n", "", "elif", "num_layers", ">", "40", ":", "\n", "        ", "model", "=", "ResNetMultiImageInput", "(", "Bottleneck", ",", "blocks", ",", "num_input_images", "=", "num_input_images", ")", "\n", "\n", "", "if", "pretrained_path", "is", "not", "None", ":", "\n", "        ", "loaded", "=", "torch", ".", "load", "(", "pretrained_path", ")", "\n", "loaded", "[", "'conv1.weight'", "]", "=", "torch", ".", "cat", "(", "[", "loaded", "[", "'conv1.weight'", "]", "]", "*", "num_input_images", ",", "1", ")", "/", "num_input_images", "\n", "model", ".", "load_state_dict", "(", "loaded", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.encoder.Encoder.__init__": [[9, 30], ["torch.Module.__init__", "numpy.array", "ValueError", "torch.load", "torch.load", "torch.load", "torch.load", "encoder.Encoder.encoder.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "pretrained_path", "=", "None", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_ch_enc", "=", "np", ".", "array", "(", "[", "64", ",", "64", ",", "128", ",", "256", ",", "512", "]", ")", "\n", "\n", "resnets", "=", "{", "18", ":", "resnet18", ",", "\n", "34", ":", "resnet34", ",", "\n", "50", ":", "resnet50", ",", "\n", "101", ":", "resnet101", ",", "}", "\n", "\n", "if", "num_layers", "not", "in", "resnets", ":", "\n", "            ", "raise", "ValueError", "(", "\"{} is not a valid number of resnet layers\"", ".", "format", "(", "num_layers", ")", ")", "\n", "\n", "\n", "", "self", ".", "encoder", "=", "resnets", "[", "num_layers", "]", "(", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "pretrained_path", ")", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "", "if", "num_layers", ">", "34", ":", "\n", "            ", "self", ".", "num_ch_enc", "[", "1", ":", "]", "*=", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.encoder.Encoder.forward": [[35, 44], ["encoder.Encoder.features.append", "encoder.Encoder.features.append", "encoder.Encoder.features.append", "encoder.Encoder.features.append", "encoder.Encoder.features.append", "encoder.Encoder.encoder.relu", "encoder.Encoder.encoder.layer1", "encoder.Encoder.encoder.layer2", "encoder.Encoder.encoder.layer3", "encoder.Encoder.encoder.layer4", "encoder.Encoder.encoder.bn1", "encoder.Encoder.encoder.maxpool", "encoder.Encoder.encoder.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_image", ")", ":", "\n", "        ", "self", ".", "features", "=", "[", "]", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "relu", "(", "self", ".", "encoder", ".", "bn1", "(", "self", ".", "encoder", ".", "conv1", "(", "input_image", ")", ")", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer1", "(", "self", ".", "encoder", ".", "maxpool", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer2", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer3", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer4", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "\n", "return", "self", ".", "features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.net.autoencoder.__init__": [[17, 26], ["torch.Module.__init__", "encoder.Encoder", "decoder.Decoder", "layers.SSIM"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["class", "mono_fm_joint", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "options", ")", ":", "\n", "        ", "super", "(", "mono_fm_joint", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "options", "\n", "self", ".", "DepthEncoder", "=", "DepthEncoder", "(", "self", ".", "opt", ".", "depth_num_layers", ",", "\n", "self", ".", "opt", ".", "depth_pretrained_path", ")", "\n", "self", ".", "DepthDecoder", "=", "DepthDecoder", "(", "self", ".", "DepthEncoder", ".", "num_ch_enc", ")", "\n", "self", ".", "PoseEncoder", "=", "PoseEncoder", "(", "self", ".", "opt", ".", "pose_num_layers", ",", "\n", "self", ".", "opt", ".", "pose_pretrained_path", ")", "\n", "self", ".", "PoseDecoder", "=", "PoseDecoder", "(", "self", ".", "PoseEncoder", ".", "num_ch_enc", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.net.autoencoder.forward": [[27, 34], ["net.autoencoder.Encoder", "net.autoencoder.Decoder", "net.autoencoder.compute_losses"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.compute_losses"], ["self", ".", "Encoder", "=", "Encoder", "(", "self", ".", "opt", ".", "depth_num_layers", ",", "self", ".", "opt", ".", "depth_pretrained_path", ")", "\n", "self", ".", "Decoder", "=", "Decoder", "(", "self", ".", "Encoder", ".", "num_ch_enc", ")", "\n", "self", ".", "ssim", "=", "SSIM", "(", ")", "\n", "self", ".", "backproject", "=", "Backproject", "(", "self", ".", "opt", ".", "imgs_per_gpu", ",", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ")", "\n", "self", ".", "project", "=", "Project", "(", "self", ".", "opt", ".", "imgs_per_gpu", ",", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "DepthDecoder", "(", "self", ".", "DepthEncoder", "(", "inputs", "[", "\"color_aug\"", ",", "0", ",", "0", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.net.autoencoder.robust_l1": [[35, 38], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["if", "self", ".", "training", ":", "\n", "            ", "outputs", ".", "update", "(", "self", ".", "predict_poses", "(", "inputs", ")", ")", "\n", "features", "=", "self", ".", "Encoder", "(", "inputs", "[", "(", "\"color\"", ",", "0", ",", "0", ")", "]", ")", "\n", "outputs", ".", "update", "(", "self", ".", "Decoder", "(", "features", ",", "0", ")", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.net.autoencoder.compute_reprojection_loss": [[39, 44], ["net.autoencoder.robust_l1().mean", "net.autoencoder.ssim().mean", "net.autoencoder.robust_l1", "net.autoencoder.ssim"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.robust_l1"], ["loss_dict", "=", "self", ".", "compute_losses", "(", "inputs", ",", "outputs", ",", "features", ")", "\n", "return", "outputs", ",", "loss_dict", "\n", "", "return", "outputs", "\n", "\n", "", "def", "robust_l1", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "eps", "=", "1e-3", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.net.autoencoder.compute_losses": [[45, 73], ["range", "net.autoencoder.get_smooth_loss", "pred.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "net.autoencoder.compute_reprojection_loss", "net.autoencoder.mean", "len", "os.path.join", "matplotlib.imsave", "os.path.join", "matplotlib.imsave", "pred[].transpose().transpose().data.cpu().numpy", "target[].transpose().transpose().data.cpu().numpy", "pred[].transpose().transpose().data.cpu", "target[].transpose().transpose().data.cpu", "pred[].transpose().transpose", "target[].transpose().transpose", "pred[].transpose", "target[].transpose"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.get_smooth_loss", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.compute_reprojection_loss"], ["return", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "target", "-", "pred", ",", "2", ")", "+", "eps", "**", "2", ")", "\n", "\n", "", "def", "compute_perceptional_loss", "(", "self", ",", "tgt_f", ",", "src_f", ")", ":", "\n", "        ", "loss", "=", "self", ".", "robust_l1", "(", "tgt_f", ",", "src_f", ")", ".", "mean", "(", "1", ",", "True", ")", "\n", "return", "loss", "\n", "\n", "", "def", "compute_reprojection_loss", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "photometric_loss", "=", "self", ".", "robust_l1", "(", "pred", ",", "target", ")", ".", "mean", "(", "1", ",", "True", ")", "\n", "ssim_loss", "=", "self", ".", "ssim", "(", "pred", ",", "target", ")", ".", "mean", "(", "1", ",", "True", ")", "\n", "reprojection_loss", "=", "(", "0.85", "*", "ssim_loss", "+", "0.15", "*", "photometric_loss", ")", "\n", "return", "reprojection_loss", "\n", "\n", "", "def", "compute_losses", "(", "self", ",", "inputs", ",", "outputs", ",", "features", ")", ":", "\n", "        ", "loss_dict", "=", "{", "}", "\n", "target", "=", "inputs", "[", "(", "\"color\"", ",", "0", ",", "0", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "f", "=", "features", "[", "i", "]", "\n", "regularization_loss", "=", "self", ".", "get_feature_regularization_loss", "(", "f", ",", "target", ")", "\n", "loss_dict", "[", "(", "'feature_regularization_loss'", ",", "i", ")", "]", "=", "regularization_loss", "/", "(", "2", "**", "i", ")", "/", "5", "\n", "\n", "", "for", "scale", "in", "self", ".", "opt", ".", "scales", ":", "\n", "            ", "\"\"\"\n            initialization\n            \"\"\"", "\n", "disp", "=", "outputs", "[", "(", "\"disp\"", ",", "0", ",", "scale", ")", "]", "\n", "\n", "reprojection_losses", "=", "[", "]", "\n", "perceptional_losses", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.net.autoencoder.get_smooth_loss": [[74, 96], ["disp.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "net.autoencoder.gradient", "net.autoencoder.gradient", "net.autoencoder.gradient", "net.autoencoder.gradient", "net.autoencoder.gradient", "net.autoencoder.gradient", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "disp_dx.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "disp_dy.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "disp_dyy.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "disp_dyx.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "img_dx.abs().mean", "img_dy.abs().mean", "disp_dxx.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "disp_dxy.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "img_dyy.abs().mean", "img_dyx.abs().mean", "img_dx.abs", "img_dy.abs", "img_dxx.abs().mean", "img_dxy.abs().mean", "img_dyy.abs", "img_dyx.abs", "img_dxx.abs", "img_dxy.abs"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient"], ["\n", "\"\"\"\n            autoencoder\n            \"\"\"", "\n", "res_img", "=", "outputs", "[", "(", "\"res_img\"", ",", "0", ",", "scale", ")", "]", "\n", "_", ",", "_", ",", "h", ",", "w", "=", "res_img", ".", "size", "(", ")", "\n", "target_resize", "=", "F", ".", "interpolate", "(", "target", ",", "[", "h", ",", "w", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "img_reconstruct_loss", "=", "self", ".", "compute_reprojection_loss", "(", "res_img", ",", "target_resize", ")", "\n", "loss_dict", "[", "(", "'img_reconstruct_loss'", ",", "scale", ")", "]", "=", "img_reconstruct_loss", ".", "mean", "(", ")", "/", "len", "(", "self", ".", "opt", ".", "scales", ")", "\n", "\n", "\"\"\"\n            reconstruction\n            \"\"\"", "\n", "outputs", "=", "self", ".", "generate_images_pred", "(", "inputs", ",", "outputs", ",", "scale", ")", "\n", "outputs", "=", "self", ".", "generate_features_pred", "(", "inputs", ",", "outputs", ")", "\n", "\n", "\"\"\"\n            automask\n            \"\"\"", "\n", "if", "self", ".", "opt", ".", "automask", ":", "\n", "                ", "for", "frame_id", "in", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ":", "\n", "                    ", "pred", "=", "inputs", "[", "(", "\"color\"", ",", "frame_id", ",", "0", ")", "]", "\n", "identity_reprojection_loss", "=", "self", ".", "compute_reprojection_loss", "(", "pred", ",", "target", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.net.autoencoder.gradient": [[97, 101], ["None"], "methods", ["None"], ["identity_reprojection_loss", "+=", "torch", ".", "randn", "(", "identity_reprojection_loss", ".", "shape", ")", ".", "cuda", "(", ")", "*", "1e-5", "\n", "reprojection_losses", ".", "append", "(", "identity_reprojection_loss", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.decoder.Decoder.__init__": [[103, 129], ["torch.Module.__init__", "layers.ConvBlock", "layers.ConvBlock", "layers.ConvBlock", "layers.ConvBlock", "layers.ConvBlock", "layers.ConvBlock", "layers.ConvBlock", "layers.ConvBlock", "layers.ConvBlock", "layers.ConvBlock", "layers.Conv3x3", "layers.Conv3x3", "layers.Conv3x3", "layers.Conv3x3", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], []], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.decoder.Decoder.forward": [[131, 156], ["layers.upsample", "decoder.Decoder.iconv5", "layers.upsample", "decoder.Decoder.iconv4", "layers.upsample", "decoder.Decoder.iconv3", "layers.upsample", "decoder.Decoder.iconv2", "layers.upsample", "decoder.Decoder.iconv1", "decoder.Decoder.sigmoid", "decoder.Decoder.sigmoid", "decoder.Decoder.sigmoid", "decoder.Decoder.sigmoid", "decoder.Decoder.upconv5", "decoder.Decoder.upconv4", "decoder.Decoder.upconv3", "decoder.Decoder.upconv2", "decoder.Decoder.upconv1", "decoder.Decoder.disp4", "decoder.Decoder.disp3", "decoder.Decoder.disp2", "decoder.Decoder.disp1"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample"], []], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.layers.SSIM.__init__": [[9, 19], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["\n", "class", "PyramidPooling", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "norm_layer", ")", ":", "\n", "        ", "super", "(", "PyramidPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "2", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "3", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "6", ")", "\n", "\n", "out_channels", "=", "int", "(", "in_channels", "/", "4", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "norm_layer", "(", "out_channels", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.layers.SSIM.forward": [[20, 31], ["layers.SSIM.refl", "layers.SSIM.refl", "layers.SSIM.mu_x_pool", "layers.SSIM.mu_y_pool", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "layers.SSIM.sig_x_pool", "layers.SSIM.sig_y_pool", "layers.SSIM.sig_xy_pool"], "methods", ["None"], ["self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "norm_layer", "(", "out_channels", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "norm_layer", "(", "out_channels", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "norm_layer", "(", "out_channels", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "feat1", "=", "F", ".", "interpolate", "(", "self", ".", "conv1", "(", "self", ".", "pool1", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat2", "=", "F", ".", "interpolate", "(", "self", ".", "conv2", "(", "self", ".", "pool2", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat3", "=", "F", ".", "interpolate", "(", "self", ".", "conv3", "(", "self", ".", "pool3", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat4", "=", "F", ".", "interpolate", "(", "self", ".", "conv4", "(", "self", ".", "pool4", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "return", "torch", ".", "cat", "(", "(", "x", ",", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.layers.ConvBlock.__init__": [[38, 42], ["torch.Module.__init__", "layers.Conv3x3", "torch.ELU", "torch.ELU", "torch.ELU"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["return", "scaled_disp", ",", "depth", "\n", "\n", "\n", "", "class", "Backproject", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "height", ",", "width", ")", ":", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.layers.ConvBlock.forward": [[42, 46], ["layers.ConvBlock.conv", "layers.ConvBlock.nonlin"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "height", ",", "width", ")", ":", "\n", "        ", "super", "(", "Backproject", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "height", "=", "height", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.layers.Conv1x1.__init__": [[49, 52], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["meshgrid", "=", "np", ".", "meshgrid", "(", "range", "(", "self", ".", "width", ")", ",", "range", "(", "self", ".", "height", ")", ",", "indexing", "=", "'xy'", ")", "\n", "self", ".", "id_coords", "=", "np", ".", "stack", "(", "meshgrid", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "id_coords", "=", "torch", ".", "from_numpy", "(", "self", ".", "id_coords", ")", "\n", "self", ".", "ones", "=", "torch", ".", "ones", "(", "self", ".", "batch_size", ",", "1", ",", "self", ".", "height", "*", "self", ".", "width", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.layers.Conv1x1.forward": [[52, 55], ["layers.Conv1x1.conv"], "methods", ["None"], ["self", ".", "ones", "=", "torch", ".", "ones", "(", "self", ".", "batch_size", ",", "1", ",", "self", ".", "height", "*", "self", ".", "width", ")", "\n", "self", ".", "pix_coords", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "stack", "(", "[", "self", ".", "id_coords", "[", "0", "]", ".", "view", "(", "-", "1", ")", ",", "self", ".", "id_coords", "[", "1", "]", ".", "view", "(", "-", "1", ")", "]", ",", "0", ")", ",", "0", ")", "\n", "self", ".", "pix_coords", "=", "self", ".", "pix_coords", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "self", ".", "pix_coords", "=", "torch", ".", "cat", "(", "[", "self", ".", "pix_coords", ",", "self", ".", "ones", "]", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.layers.Conv3x3.__init__": [[58, 65], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["        ", "cam_points", "=", "torch", ".", "matmul", "(", "inv_K", "[", ":", ",", ":", "3", ",", ":", "3", "]", ",", "self", ".", "pix_coords", ".", "cuda", "(", ")", ")", "\n", "cam_points", "=", "depth", ".", "view", "(", "self", ".", "batch_size", ",", "1", ",", "-", "1", ")", "*", "cam_points", "\n", "cam_points", "=", "torch", ".", "cat", "(", "[", "cam_points", ",", "self", ".", "ones", ".", "cuda", "(", ")", "]", ",", "1", ")", "\n", "return", "cam_points", "\n", "\n", "\n", "", "", "class", "Project", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "height", ",", "width", ",", "eps", "=", "1e-7", ")", ":", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.layers.Conv3x3.forward": [[65, 69], ["layers.Conv3x3.pad", "layers.Conv3x3.conv"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "height", ",", "width", ",", "eps", "=", "1e-7", ")", ":", "\n", "        ", "super", "(", "Project", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "height", "=", "height", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.layers.Conv5x5.__init__": [[72, 79], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["\n", "", "def", "forward", "(", "self", ",", "points", ",", "K", ",", "T", ")", ":", "\n", "        ", "P", "=", "torch", ".", "matmul", "(", "K", ",", "T", ")", "[", ":", ",", ":", "3", ",", ":", "]", "\n", "cam_points", "=", "torch", ".", "matmul", "(", "P", ",", "points", ")", "\n", "pix_coords", "=", "cam_points", "[", ":", ",", ":", "2", ",", ":", "]", "/", "(", "cam_points", "[", ":", ",", "2", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "eps", ")", "\n", "pix_coords", "=", "pix_coords", ".", "view", "(", "self", ".", "batch_size", ",", "2", ",", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "pix_coords", "=", "pix_coords", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "pix_coords", "[", "...", ",", "0", "]", "/=", "self", ".", "width", "-", "1", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.layers.Conv5x5.forward": [[79, 83], ["layers.Conv5x5.pad", "layers.Conv5x5.conv"], "methods", ["None"], ["pix_coords", "[", "...", ",", "0", "]", "/=", "self", ".", "width", "-", "1", "\n", "pix_coords", "[", "...", ",", "1", "]", "/=", "self", ".", "height", "-", "1", "\n", "pix_coords", "=", "(", "pix_coords", "-", "0.5", ")", "*", "2", "\n", "return", "pix_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.layers.CRPBlock.__init__": [[86, 93], ["torch.Module.__init__", "range", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "setattr", "layers.Conv1x1"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mu_x_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "mu_y_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_x_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_y_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_xy_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "refl", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.layers.CRPBlock.forward": [[94, 101], ["range", "layers.CRPBlock.maxpool", "getattr"], "methods", ["None"], ["self", ".", "C1", "=", "0.01", "**", "2", "\n", "self", ".", "C2", "=", "0.03", "**", "2", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x", "=", "self", ".", "refl", "(", "x", ")", "\n", "y", "=", "self", ".", "refl", "(", "y", ")", "\n", "mu_x", "=", "self", ".", "mu_x_pool", "(", "x", ")", "\n", "mu_y", "=", "self", ".", "mu_y_pool", "(", "y", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.layers.upsample": [[33, 35], ["torch.interpolate"], "function", ["None"], ["", "", "def", "disp_to_depth", "(", "disp", ",", "min_depth", ",", "max_depth", ")", ":", "\n", "    ", "min_disp", "=", "1", "/", "max_depth", "#0.01", "\n", "max_disp", "=", "1", "/", "min_depth", "#10", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.layers.compute_depth_errors": [[103, 115], ["torch.max", "torch.max", "torch.max", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt.mean", "torch.sqrt.mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["sigma_y", "=", "self", ".", "sig_y_pool", "(", "y", "**", "2", ")", "-", "mu_y", "**", "2", "\n", "sigma_xy", "=", "self", ".", "sig_xy_pool", "(", "x", "*", "y", ")", "-", "mu_x", "*", "mu_y", "\n", "SSIM_n", "=", "(", "2", "*", "mu_x", "*", "mu_y", "+", "self", ".", "C1", ")", "*", "(", "2", "*", "sigma_xy", "+", "self", ".", "C2", ")", "\n", "SSIM_d", "=", "(", "mu_x", "**", "2", "+", "mu_y", "**", "2", "+", "self", ".", "C1", ")", "*", "(", "sigma_x", "+", "sigma_y", "+", "self", ".", "C2", ")", "\n", "return", "torch", ".", "clamp", "(", "(", "1", "-", "SSIM_n", "/", "SSIM_d", ")", "/", "2", ",", "0", ",", "1", ")", "\n", "\n", "\n", "", "", "def", "upsample", "(", "x", ")", ":", "\n", "    ", "return", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "\n", "\n", "", "def", "upshuffle", "(", "in_planes", ",", "upscale_factor", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.resnet.BasicBlock.__init__": [[19, 28], ["torch.Module.__init__", "resnet.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv3x3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "bn", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "bn", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.resnet.BasicBlock.forward": [[29, 46], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.resnet.Bottleneck.__init__": [[51, 62], ["torch.Module.__init__", "resnet.conv1x1", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "resnet.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "resnet.conv1x1", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv1x1", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv3x3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "bn", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "bn", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "bn", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.resnet.Bottleneck.forward": [[63, 84], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.resnet.ResNet.__init__": [[88, 108], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "bn", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "bn", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.resnet.ResNet._make_layer": [[109, 124], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "bn", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.resnet.ResNet.forward": [[125, 137], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.resnet.conv3x3": [[6, 9], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.resnet.conv1x1": [[11, 14], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.resnet.resnet18": [[139, 149], ["resnet.ResNet", "ResNet.load_state_dict", "print", "torch.load", "torch.load"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pretrained_path", ")", ")", "\n", "print", "(", "'Loaded pre-trained weights'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.resnet.resnet34": [[151, 161], ["resnet.ResNet", "ResNet.load_state_dict", "print", "torch.load", "torch.load", "os.join"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained_path", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "osp", ".", "join", "(", "pretrained_path", ",", "'resnet34.pth'", ")", ")", ")", "\n", "print", "(", "'Loaded pre-trained weights'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.resnet.resnet50": [[163, 173], ["resnet.ResNet", "ResNet.load_state_dict", "print", "torch.load", "torch.load", "os.join"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained_path", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "osp", ".", "join", "(", "pretrained_path", ",", "'resnet50.pth'", ")", ")", ")", "\n", "print", "(", "'Loaded pre-trained weights'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_autoencoder.resnet.resnet101": [[175, 185], ["resnet.ResNet", "ResNet.load_state_dict", "print", "torch.load", "torch.load", "os.join"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained_path", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "osp", ".", "join", "(", "pretrained_path", ",", "'resnet101.pth'", ")", ")", ")", "\n", "print", "(", "'Loaded pre-trained weights'", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.depth_decoder.DepthDecoder.__init__": [[8, 40], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "layers.Conv1x1", "layers.Conv1x1", "layers.Conv1x1", "layers.Conv1x1", "layers.Conv3x3", "layers.Conv3x3", "layers.Conv3x3", "layers.Conv3x3", "depth_decoder.DepthDecoder._make_crp", "depth_decoder.DepthDecoder._make_crp", "depth_decoder.DepthDecoder._make_crp", "depth_decoder.DepthDecoder._make_crp", "layers.Conv3x3", "layers.Conv3x3", "layers.Conv3x3", "layers.Conv3x3", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.Conv3x3", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "layers.Conv3x3", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "layers.Conv3x3", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "layers.Conv3x3", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.depth_decoder.DepthDecoder._make_crp", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.depth_decoder.DepthDecoder._make_crp", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.depth_decoder.DepthDecoder._make_crp", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.depth_decoder.DepthDecoder._make_crp"], ["    ", "def", "__init__", "(", "self", ",", "num_ch_enc", ")", ":", "\n", "        ", "super", "(", "DepthDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "bottleneck", "=", "256", "\n", "stage", "=", "4", "\n", "self", ".", "do", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "self", ".", "reduce4", "=", "Conv1x1", "(", "num_ch_enc", "[", "4", "]", ",", "512", ",", "bias", "=", "False", ")", "\n", "self", ".", "reduce3", "=", "Conv1x1", "(", "num_ch_enc", "[", "3", "]", ",", "bottleneck", ",", "bias", "=", "False", ")", "\n", "self", ".", "reduce2", "=", "Conv1x1", "(", "num_ch_enc", "[", "2", "]", ",", "bottleneck", ",", "bias", "=", "False", ")", "\n", "self", ".", "reduce1", "=", "Conv1x1", "(", "num_ch_enc", "[", "1", "]", ",", "bottleneck", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "iconv4", "=", "Conv3x3", "(", "512", ",", "bottleneck", ")", "\n", "self", ".", "iconv3", "=", "Conv3x3", "(", "bottleneck", "*", "2", "+", "1", ",", "bottleneck", ")", "\n", "self", ".", "iconv2", "=", "Conv3x3", "(", "bottleneck", "*", "2", "+", "1", ",", "bottleneck", ")", "\n", "self", ".", "iconv1", "=", "Conv3x3", "(", "bottleneck", "*", "2", "+", "1", ",", "bottleneck", ")", "\n", "\n", "self", ".", "crp4", "=", "self", ".", "_make_crp", "(", "bottleneck", ",", "bottleneck", ",", "stage", ")", "\n", "self", ".", "crp3", "=", "self", ".", "_make_crp", "(", "bottleneck", ",", "bottleneck", ",", "stage", ")", "\n", "self", ".", "crp2", "=", "self", ".", "_make_crp", "(", "bottleneck", ",", "bottleneck", ",", "stage", ")", "\n", "self", ".", "crp1", "=", "self", ".", "_make_crp", "(", "bottleneck", ",", "bottleneck", ",", "stage", ")", "\n", "\n", "self", ".", "merge4", "=", "Conv3x3", "(", "bottleneck", ",", "bottleneck", ")", "\n", "self", ".", "merge3", "=", "Conv3x3", "(", "bottleneck", ",", "bottleneck", ")", "\n", "self", ".", "merge2", "=", "Conv3x3", "(", "bottleneck", ",", "bottleneck", ")", "\n", "self", ".", "merge1", "=", "Conv3x3", "(", "bottleneck", ",", "bottleneck", ")", "\n", "\n", "# disp", "\n", "self", ".", "disp4", "=", "nn", ".", "Sequential", "(", "Conv3x3", "(", "bottleneck", ",", "1", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "disp3", "=", "nn", ".", "Sequential", "(", "Conv3x3", "(", "bottleneck", ",", "1", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "disp2", "=", "nn", ".", "Sequential", "(", "Conv3x3", "(", "bottleneck", ",", "1", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "disp1", "=", "nn", ".", "Sequential", "(", "Conv3x3", "(", "bottleneck", ",", "1", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.depth_decoder.DepthDecoder._make_crp": [[41, 44], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.CRPBlock"], "methods", ["None"], ["", "def", "_make_crp", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stages", ")", ":", "\n", "        ", "layers", "=", "[", "CRPBlock", "(", "in_planes", ",", "out_planes", ",", "stages", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.depth_decoder.DepthDecoder.forward": [[45, 99], ["depth_decoder.DepthDecoder.do", "depth_decoder.DepthDecoder.do", "depth_decoder.DepthDecoder.reduce4", "depth_decoder.DepthDecoder.iconv4", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "depth_decoder.DepthDecoder.crp4", "depth_decoder.DepthDecoder.merge4", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "layers.upsample", "depth_decoder.DepthDecoder.disp4", "depth_decoder.DepthDecoder.reduce3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "depth_decoder.DepthDecoder.iconv3", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "depth_decoder.DepthDecoder.crp3", "depth_decoder.DepthDecoder.merge3", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "layers.upsample", "depth_decoder.DepthDecoder.disp3", "depth_decoder.DepthDecoder.reduce2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "depth_decoder.DepthDecoder.iconv2", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "depth_decoder.DepthDecoder.crp2", "depth_decoder.DepthDecoder.merge2", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "layers.upsample", "depth_decoder.DepthDecoder.disp2", "depth_decoder.DepthDecoder.reduce1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "depth_decoder.DepthDecoder.iconv1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "depth_decoder.DepthDecoder.crp1", "depth_decoder.DepthDecoder.merge1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "layers.upsample", "depth_decoder.DepthDecoder.disp1"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample"], ["", "def", "forward", "(", "self", ",", "input_features", ",", "frame_id", "=", "0", ")", ":", "\n", "        ", "self", ".", "outputs", "=", "{", "}", "\n", "l0", ",", "l1", ",", "l2", ",", "l3", ",", "l4", "=", "input_features", "\n", "\n", "l4", "=", "self", ".", "do", "(", "l4", ")", "\n", "l3", "=", "self", ".", "do", "(", "l3", ")", "\n", "\n", "x4", "=", "self", ".", "reduce4", "(", "l4", ")", "\n", "x4", "=", "self", ".", "iconv4", "(", "x4", ")", "\n", "x4", "=", "F", ".", "leaky_relu", "(", "x4", ")", "\n", "x4", "=", "self", ".", "crp4", "(", "x4", ")", "\n", "x4", "=", "self", ".", "merge4", "(", "x4", ")", "\n", "x4", "=", "F", ".", "leaky_relu", "(", "x4", ")", "\n", "x4", "=", "upsample", "(", "x4", ")", "\n", "disp4", "=", "self", ".", "disp4", "(", "x4", ")", "\n", "\n", "\n", "x3", "=", "self", ".", "reduce3", "(", "l3", ")", "\n", "x3", "=", "torch", ".", "cat", "(", "(", "x3", ",", "x4", ",", "disp4", ")", ",", "1", ")", "\n", "x3", "=", "self", ".", "iconv3", "(", "x3", ")", "\n", "x3", "=", "F", ".", "leaky_relu", "(", "x3", ")", "\n", "x3", "=", "self", ".", "crp3", "(", "x3", ")", "\n", "x3", "=", "self", ".", "merge3", "(", "x3", ")", "\n", "x3", "=", "F", ".", "leaky_relu", "(", "x3", ")", "\n", "x3", "=", "upsample", "(", "x3", ")", "\n", "disp3", "=", "self", ".", "disp3", "(", "x3", ")", "\n", "\n", "\n", "x2", "=", "self", ".", "reduce2", "(", "l2", ")", "\n", "x2", "=", "torch", ".", "cat", "(", "(", "x2", ",", "x3", ",", "disp3", ")", ",", "1", ")", "\n", "x2", "=", "self", ".", "iconv2", "(", "x2", ")", "\n", "x2", "=", "F", ".", "leaky_relu", "(", "x2", ")", "\n", "x2", "=", "self", ".", "crp2", "(", "x2", ")", "\n", "x2", "=", "self", ".", "merge2", "(", "x2", ")", "\n", "x2", "=", "F", ".", "leaky_relu", "(", "x2", ")", "\n", "x2", "=", "upsample", "(", "x2", ")", "\n", "disp2", "=", "self", ".", "disp2", "(", "x2", ")", "\n", "\n", "x1", "=", "self", ".", "reduce1", "(", "l1", ")", "\n", "x1", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ",", "disp2", ")", ",", "1", ")", "\n", "x1", "=", "self", ".", "iconv1", "(", "x1", ")", "\n", "x1", "=", "F", ".", "leaky_relu", "(", "x1", ")", "\n", "x1", "=", "self", ".", "crp1", "(", "x1", ")", "\n", "x1", "=", "self", ".", "merge1", "(", "x1", ")", "\n", "x1", "=", "F", ".", "leaky_relu", "(", "x1", ")", "\n", "x1", "=", "upsample", "(", "x1", ")", "\n", "disp1", "=", "self", ".", "disp1", "(", "x1", ")", "\n", "\n", "self", ".", "outputs", "[", "(", "\"disp\"", ",", "frame_id", ",", "3", ")", "]", "=", "disp4", "\n", "self", ".", "outputs", "[", "(", "\"disp\"", ",", "frame_id", ",", "2", ")", "]", "=", "disp3", "\n", "self", ".", "outputs", "[", "(", "\"disp\"", ",", "frame_id", ",", "1", ")", "]", "=", "disp2", "\n", "self", ".", "outputs", "[", "(", "\"disp\"", ",", "frame_id", ",", "0", ")", "]", "=", "disp1", "\n", "\n", "return", "self", ".", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.depth_encoder.DepthEncoder.__init__": [[9, 30], ["torch.Module.__init__", "numpy.array", "ValueError", "torch.load", "torch.load", "torch.load", "torch.load", "depth_encoder.DepthEncoder.encoder.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "pretrained_path", "=", "None", ")", ":", "\n", "        ", "super", "(", "DepthEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_ch_enc", "=", "np", ".", "array", "(", "[", "64", ",", "64", ",", "128", ",", "256", ",", "512", "]", ")", "\n", "\n", "resnets", "=", "{", "18", ":", "resnet18", ",", "\n", "34", ":", "resnet34", ",", "\n", "50", ":", "resnet50", ",", "\n", "101", ":", "resnet101", ",", "}", "\n", "\n", "if", "num_layers", "not", "in", "resnets", ":", "\n", "            ", "raise", "ValueError", "(", "\"{} is not a valid number of resnet layers\"", ".", "format", "(", "num_layers", ")", ")", "\n", "\n", "\n", "", "self", ".", "encoder", "=", "resnets", "[", "num_layers", "]", "(", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "pretrained_path", ")", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "", "if", "num_layers", ">", "34", ":", "\n", "            ", "self", ".", "num_ch_enc", "[", "1", ":", "]", "*=", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.depth_encoder.DepthEncoder.forward": [[35, 45], ["depth_encoder.DepthEncoder.features.append", "depth_encoder.DepthEncoder.features.append", "depth_encoder.DepthEncoder.features.append", "depth_encoder.DepthEncoder.features.append", "depth_encoder.DepthEncoder.features.append", "depth_encoder.DepthEncoder.encoder.relu", "depth_encoder.DepthEncoder.encoder.layer1", "depth_encoder.DepthEncoder.encoder.layer2", "depth_encoder.DepthEncoder.encoder.layer3", "depth_encoder.DepthEncoder.encoder.layer4", "depth_encoder.DepthEncoder.encoder.bn1", "depth_encoder.DepthEncoder.encoder.maxpool", "depth_encoder.DepthEncoder.encoder.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_image", ")", ":", "\n", "        ", "self", ".", "features", "=", "[", "]", "\n", "x", "=", "(", "input_image", "-", "0.45", ")", "/", "0.225", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "relu", "(", "self", ".", "encoder", ".", "bn1", "(", "self", ".", "encoder", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer1", "(", "self", ".", "encoder", ".", "maxpool", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer2", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer3", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer4", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "\n", "return", "self", ".", "features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.net.Baseline.__init__": [[16, 31], ["torch.Module.__init__", "len", "depth_encoder.DepthEncoder", "depth_decoder.DepthDecoder", "pose_encoder.PoseEncoder", "pose_decoder.PoseDecoder", "layers.SSIM", "layers.Backproject", "layers.Project"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["@", "MONO", ".", "register_module", "\n", "class", "mono_fm_joint", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "options", ")", ":", "\n", "        ", "super", "(", "mono_fm_joint", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "options", "\n", "self", ".", "DepthEncoder", "=", "DepthEncoder", "(", "self", ".", "opt", ".", "depth_num_layers", ",", "\n", "self", ".", "opt", ".", "depth_pretrained_path", ")", "\n", "self", ".", "DepthDecoder", "=", "DepthDecoder", "(", "self", ".", "DepthEncoder", ".", "num_ch_enc", ")", "\n", "self", ".", "PoseEncoder", "=", "PoseEncoder", "(", "self", ".", "opt", ".", "pose_num_layers", ",", "\n", "self", ".", "opt", ".", "pose_pretrained_path", ")", "\n", "self", ".", "PoseDecoder", "=", "PoseDecoder", "(", "self", ".", "PoseEncoder", ".", "num_ch_enc", ")", "\n", "self", ".", "Encoder", "=", "Encoder", "(", "self", ".", "opt", ".", "depth_num_layers", ",", "self", ".", "opt", ".", "depth_pretrained_path", ")", "\n", "self", ".", "Decoder", "=", "Decoder", "(", "self", ".", "Encoder", ".", "num_ch_enc", ")", "\n", "self", ".", "ssim", "=", "SSIM", "(", ")", "\n", "self", ".", "backproject", "=", "Backproject", "(", "self", ".", "opt", ".", "imgs_per_gpu", ",", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ")", "\n", "self", ".", "project", "=", "Project", "(", "self", ".", "opt", ".", "imgs_per_gpu", ",", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.net.Baseline.forward": [[32, 40], ["net.Baseline.DepthDecoder", "net.Baseline.DepthEncoder", "net.Baseline.update", "net.Baseline.compute_losses", "net.Baseline.predict_poses"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.compute_losses", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.predict_poses"], ["\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "DepthDecoder", "(", "self", ".", "DepthEncoder", "(", "inputs", "[", "\"color_aug\"", ",", "0", ",", "0", "]", ")", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "outputs", ".", "update", "(", "self", ".", "predict_poses", "(", "inputs", ")", ")", "\n", "features", "=", "self", ".", "Encoder", "(", "inputs", "[", "(", "\"color\"", ",", "0", ",", "0", ")", "]", ")", "\n", "outputs", ".", "update", "(", "self", ".", "Decoder", "(", "features", ",", "0", ")", ")", "\n", "loss_dict", "=", "self", ".", "compute_losses", "(", "inputs", ",", "outputs", ",", "features", ")", "\n", "return", "outputs", ",", "loss_dict", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.net.Baseline.robust_l1": [[41, 44], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "return", "outputs", "\n", "\n", "", "def", "robust_l1", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "eps", "=", "1e-3", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.net.Baseline.compute_reprojection_loss": [[45, 50], ["net.Baseline.robust_l1().mean", "net.Baseline.ssim().mean", "net.Baseline.robust_l1", "net.Baseline.ssim"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.robust_l1"], ["return", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "target", "-", "pred", ",", "2", ")", "+", "eps", "**", "2", ")", "\n", "\n", "", "def", "compute_perceptional_loss", "(", "self", ",", "tgt_f", ",", "src_f", ")", ":", "\n", "        ", "loss", "=", "self", ".", "robust_l1", "(", "tgt_f", ",", "src_f", ")", ".", "mean", "(", "1", ",", "True", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.net.Baseline.compute_losses": [[51, 101], ["net.Baseline.generate_images_pred", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "net.Baseline.get_smooth_loss", "reprojection_losses.append", "min_reconstruct_loss.mean", "len", "disp.mean().mean", "len", "net.Baseline.compute_reprojection_loss", "reprojection_losses.append", "net.Baseline.compute_reprojection_loss", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "disp.mean", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.generate_images_pred", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.get_smooth_loss", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.compute_reprojection_loss", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.compute_reprojection_loss"], ["", "def", "compute_reprojection_loss", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "photometric_loss", "=", "self", ".", "robust_l1", "(", "pred", ",", "target", ")", ".", "mean", "(", "1", ",", "True", ")", "\n", "ssim_loss", "=", "self", ".", "ssim", "(", "pred", ",", "target", ")", ".", "mean", "(", "1", ",", "True", ")", "\n", "reprojection_loss", "=", "(", "0.85", "*", "ssim_loss", "+", "0.15", "*", "photometric_loss", ")", "\n", "return", "reprojection_loss", "\n", "\n", "", "def", "compute_losses", "(", "self", ",", "inputs", ",", "outputs", ",", "features", ")", ":", "\n", "        ", "loss_dict", "=", "{", "}", "\n", "target", "=", "inputs", "[", "(", "\"color\"", ",", "0", ",", "0", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "f", "=", "features", "[", "i", "]", "\n", "regularization_loss", "=", "self", ".", "get_feature_regularization_loss", "(", "f", ",", "target", ")", "\n", "loss_dict", "[", "(", "'feature_regularization_loss'", ",", "i", ")", "]", "=", "regularization_loss", "/", "(", "2", "**", "i", ")", "/", "5", "\n", "\n", "", "for", "scale", "in", "self", ".", "opt", ".", "scales", ":", "\n", "            ", "\"\"\"\n            initialization\n            \"\"\"", "\n", "disp", "=", "outputs", "[", "(", "\"disp\"", ",", "0", ",", "scale", ")", "]", "\n", "\n", "reprojection_losses", "=", "[", "]", "\n", "perceptional_losses", "=", "[", "]", "\n", "\n", "\"\"\"\n            autoencoder\n            \"\"\"", "\n", "res_img", "=", "outputs", "[", "(", "\"res_img\"", ",", "0", ",", "scale", ")", "]", "\n", "_", ",", "_", ",", "h", ",", "w", "=", "res_img", ".", "size", "(", ")", "\n", "target_resize", "=", "F", ".", "interpolate", "(", "target", ",", "[", "h", ",", "w", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "img_reconstruct_loss", "=", "self", ".", "compute_reprojection_loss", "(", "res_img", ",", "target_resize", ")", "\n", "loss_dict", "[", "(", "'img_reconstruct_loss'", ",", "scale", ")", "]", "=", "img_reconstruct_loss", ".", "mean", "(", ")", "/", "len", "(", "self", ".", "opt", ".", "scales", ")", "\n", "\n", "\"\"\"\n            reconstruction\n            \"\"\"", "\n", "outputs", "=", "self", ".", "generate_images_pred", "(", "inputs", ",", "outputs", ",", "scale", ")", "\n", "outputs", "=", "self", ".", "generate_features_pred", "(", "inputs", ",", "outputs", ")", "\n", "\n", "\"\"\"\n            automask\n            \"\"\"", "\n", "if", "self", ".", "opt", ".", "automask", ":", "\n", "                ", "for", "frame_id", "in", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ":", "\n", "                    ", "pred", "=", "inputs", "[", "(", "\"color\"", ",", "frame_id", ",", "0", ")", "]", "\n", "identity_reprojection_loss", "=", "self", ".", "compute_reprojection_loss", "(", "pred", ",", "target", ")", "\n", "identity_reprojection_loss", "+=", "torch", ".", "randn", "(", "identity_reprojection_loss", ".", "shape", ")", ".", "cuda", "(", ")", "*", "1e-5", "\n", "reprojection_losses", ".", "append", "(", "identity_reprojection_loss", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.net.Baseline.disp_to_depth": [[102, 108], ["None"], "methods", ["None"], ["\n", "for", "frame_id", "in", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ":", "\n", "                ", "pred", "=", "outputs", "[", "(", "\"color\"", ",", "frame_id", ",", "scale", ")", "]", "\n", "reprojection_losses", ".", "append", "(", "self", ".", "compute_reprojection_loss", "(", "pred", ",", "target", ")", ")", "\n", "", "reprojection_loss", "=", "torch", ".", "cat", "(", "reprojection_losses", ",", "1", ")", "\n", "\n", "min_reconstruct_loss", ",", "outputs", "[", "(", "\"min_index\"", ",", "scale", ")", "]", "=", "torch", ".", "min", "(", "reprojection_loss", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.net.Baseline.predict_poses": [[109, 122], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "net.Baseline.PoseEncoder", "net.Baseline.PoseDecoder", "net.Baseline.transformation_from_parameters", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.transformation_from_parameters"], ["loss_dict", "[", "(", "'min_reconstruct_loss'", ",", "scale", ")", "]", "=", "min_reconstruct_loss", ".", "mean", "(", ")", "/", "len", "(", "self", ".", "opt", ".", "scales", ")", "\n", "\n", "\"\"\"\n            minimum perceptional loss\n            \"\"\"", "\n", "for", "frame_id", "in", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ":", "\n", "                ", "src_f", "=", "outputs", "[", "(", "\"feature\"", ",", "frame_id", ",", "0", ")", "]", "\n", "tgt_f", "=", "self", ".", "Encoder", "(", "inputs", "[", "(", "\"color\"", ",", "0", ",", "0", ")", "]", ")", "[", "0", "]", "\n", "perceptional_losses", ".", "append", "(", "self", ".", "compute_perceptional_loss", "(", "tgt_f", ",", "src_f", ")", ")", "\n", "", "perceptional_loss", "=", "torch", ".", "cat", "(", "perceptional_losses", ",", "1", ")", "\n", "\n", "min_perceptional_loss", ",", "outputs", "[", "(", "\"min_index\"", ",", "scale", ")", "]", "=", "torch", ".", "min", "(", "perceptional_loss", ",", "dim", "=", "1", ")", "\n", "loss_dict", "[", "(", "'min_perceptional_loss'", ",", "scale", ")", "]", "=", "self", ".", "opt", ".", "perception_weight", "*", "min_perceptional_loss", ".", "mean", "(", ")", "/", "len", "(", "self", ".", "opt", ".", "scales", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.net.Baseline.generate_images_pred": [[123, 136], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "net.Baseline.disp_to_depth", "enumerate", "net.Baseline.backproject", "net.Baseline.project_3d", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.disp_to_depth"], ["\"\"\"\n            disp mean normalization\n            \"\"\"", "\n", "if", "self", ".", "opt", ".", "disp_norm", ":", "\n", "                ", "mean_disp", "=", "disp", ".", "mean", "(", "2", ",", "True", ")", ".", "mean", "(", "3", ",", "True", ")", "\n", "disp", "=", "disp", "/", "(", "mean_disp", "+", "1e-7", ")", "\n", "\n", "", "\"\"\"\n            smooth loss\n            \"\"\"", "\n", "smooth_loss", "=", "self", ".", "get_smooth_loss", "(", "disp", ",", "target", ")", "\n", "loss_dict", "[", "(", "'smooth_loss'", ",", "scale", ")", "]", "=", "self", ".", "opt", ".", "smoothness_weight", "*", "smooth_loss", "/", "(", "2", "**", "scale", ")", "/", "len", "(", "self", ".", "opt", ".", "scales", ")", "\n", "\n", "", "return", "loss_dict", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.net.Baseline.transformation_from_parameters": [[137, 149], ["net.Baseline.rot_from_axisangle", "translation.clone", "net.Baseline.get_translation_matrix", "R.transpose.transpose.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.rot_from_axisangle", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.get_translation_matrix"], ["\n", "", "def", "disp_to_depth", "(", "self", ",", "disp", ",", "min_depth", ",", "max_depth", ")", ":", "\n", "        ", "min_disp", "=", "1", "/", "max_depth", "# 0.01", "\n", "max_disp", "=", "1", "/", "min_depth", "# 10", "\n", "scaled_disp", "=", "min_disp", "+", "(", "max_disp", "-", "min_disp", ")", "*", "disp", "# (10-0.01)*disp+0.01", "\n", "depth", "=", "1", "/", "scaled_disp", "\n", "return", "scaled_disp", ",", "depth", "\n", "\n", "", "def", "predict_poses", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "{", "}", "\n", "#[192,640] for kitti", "\n", "pose_feats", "=", "{", "f_i", ":", "F", ".", "interpolate", "(", "inputs", "[", "\"color_aug\"", ",", "f_i", ",", "0", "]", ",", "[", "192", ",", "640", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "for", "f_i", "in", "self", ".", "opt", ".", "frame_ids", "}", "\n", "for", "f_i", "in", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ":", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.net.Baseline.get_translation_matrix": [[150, 159], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "translation_vector.contiguous().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "translation_vector.contiguous"], "methods", ["None"], ["            ", "if", "not", "f_i", "==", "\"s\"", ":", "\n", "                ", "if", "f_i", "<", "0", ":", "\n", "                    ", "pose_inputs", "=", "[", "pose_feats", "[", "f_i", "]", ",", "pose_feats", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                    ", "pose_inputs", "=", "[", "pose_feats", "[", "0", "]", ",", "pose_feats", "[", "f_i", "]", "]", "\n", "", "pose_inputs", "=", "self", ".", "PoseEncoder", "(", "torch", ".", "cat", "(", "pose_inputs", ",", "1", ")", ")", "\n", "axisangle", ",", "translation", "=", "self", ".", "PoseDecoder", "(", "pose_inputs", ")", "\n", "outputs", "[", "(", "\"cam_T_cam\"", ",", "0", ",", "f_i", ")", "]", "=", "self", ".", "transformation_from_parameters", "(", "axisangle", "[", ":", ",", "0", "]", ",", "translation", "[", ":", ",", "0", "]", ",", "invert", "=", "(", "f_i", "<", "0", ")", ")", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.net.Baseline.rot_from_axisangle": [[160, 190], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "axis[].unsqueeze", "axis[].unsqueeze", "axis[].unsqueeze", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "generate_images_pred", "(", "self", ",", "inputs", ",", "outputs", ",", "scale", ")", ":", "\n", "        ", "disp", "=", "outputs", "[", "(", "\"disp\"", ",", "0", ",", "scale", ")", "]", "\n", "disp", "=", "F", ".", "interpolate", "(", "disp", ",", "[", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "_", ",", "depth", "=", "self", ".", "disp_to_depth", "(", "disp", ",", "self", ".", "opt", ".", "min_depth", ",", "self", ".", "opt", ".", "max_depth", ")", "\n", "for", "i", ",", "frame_id", "in", "enumerate", "(", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ")", ":", "\n", "            ", "if", "frame_id", "==", "\"s\"", ":", "\n", "                ", "T", "=", "inputs", "[", "\"stereo_T\"", "]", "\n", "", "else", ":", "\n", "                ", "T", "=", "outputs", "[", "(", "\"cam_T_cam\"", ",", "0", ",", "frame_id", ")", "]", "\n", "", "cam_points", "=", "self", ".", "backproject", "(", "depth", ",", "inputs", "[", "(", "\"inv_K\"", ")", "]", ")", "\n", "pix_coords", "=", "self", ".", "project", "(", "cam_points", ",", "inputs", "[", "(", "\"K\"", ")", "]", ",", "T", ")", "#[b,h,w,2]", "\n", "img", "=", "inputs", "[", "(", "\"color\"", ",", "frame_id", ",", "0", ")", "]", "\n", "outputs", "[", "(", "\"color\"", ",", "frame_id", ",", "scale", ")", "]", "=", "F", ".", "grid_sample", "(", "img", ",", "pix_coords", ",", "padding_mode", "=", "\"border\"", ")", "\n", "", "return", "outputs", "\n", "\n", "", "def", "generate_features_pred", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "disp", "=", "outputs", "[", "(", "\"disp\"", ",", "0", ",", "0", ")", "]", "\n", "disp", "=", "F", ".", "interpolate", "(", "disp", ",", "[", "int", "(", "self", ".", "opt", ".", "height", "/", "2", ")", ",", "int", "(", "self", ".", "opt", ".", "width", "/", "2", ")", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "_", ",", "depth", "=", "self", ".", "disp_to_depth", "(", "disp", ",", "self", ".", "opt", ".", "min_depth", ",", "self", ".", "opt", ".", "max_depth", ")", "\n", "for", "i", ",", "frame_id", "in", "enumerate", "(", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ")", ":", "\n", "            ", "if", "frame_id", "==", "\"s\"", ":", "\n", "                ", "T", "=", "inputs", "[", "\"stereo_T\"", "]", "\n", "", "else", ":", "\n", "                ", "T", "=", "outputs", "[", "(", "\"cam_T_cam\"", ",", "0", ",", "frame_id", ")", "]", "\n", "\n", "", "backproject", "=", "Backproject", "(", "self", ".", "opt", ".", "imgs_per_gpu", ",", "int", "(", "self", ".", "opt", ".", "height", "/", "2", ")", ",", "int", "(", "self", ".", "opt", ".", "width", "/", "2", ")", ")", "\n", "project", "=", "Project", "(", "self", ".", "opt", ".", "imgs_per_gpu", ",", "int", "(", "self", ".", "opt", ".", "height", "/", "2", ")", ",", "int", "(", "self", ".", "opt", ".", "width", "/", "2", ")", ")", "\n", "\n", "cam_points", "=", "backproject", "(", "depth", ",", "inputs", "[", "(", "\"inv_K\"", ")", "]", ")", "\n", "pix_coords", "=", "project", "(", "cam_points", ",", "inputs", "[", "(", "\"K\"", ")", "]", ",", "T", ")", "#[b,h,w,2]", "\n", "img", "=", "inputs", "[", "(", "\"color\"", ",", "frame_id", ",", "0", ")", "]", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.net.Baseline.get_smooth_loss": [[191, 215], ["disp.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "net.Baseline.gradient", "net.Baseline.gradient", "net.Baseline.gradient", "net.Baseline.gradient", "net.Baseline.gradient", "net.Baseline.gradient", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "disp_dx.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "disp_dy.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "disp_dyy.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "disp_dyx.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "img_dx.abs().mean", "img_dy.abs().mean", "disp_dxx.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "disp_dxy.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "img_dyy.abs().mean", "img_dyx.abs().mean", "img_dx.abs", "img_dy.abs", "img_dxx.abs().mean", "img_dxy.abs().mean", "img_dyy.abs", "img_dyx.abs", "img_dxx.abs", "img_dxy.abs"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient"], ["src_f", "=", "self", ".", "Encoder", "(", "img", ")", "[", "0", "]", "\n", "outputs", "[", "(", "\"feature\"", ",", "frame_id", ",", "0", ")", "]", "=", "F", ".", "grid_sample", "(", "src_f", ",", "pix_coords", ",", "padding_mode", "=", "\"border\"", ")", "\n", "", "return", "outputs", "\n", "\n", "", "def", "transformation_from_parameters", "(", "self", ",", "axisangle", ",", "translation", ",", "invert", "=", "False", ")", ":", "\n", "        ", "R", "=", "self", ".", "rot_from_axisangle", "(", "axisangle", ")", "\n", "t", "=", "translation", ".", "clone", "(", ")", "\n", "if", "invert", ":", "\n", "            ", "R", "=", "R", ".", "transpose", "(", "1", ",", "2", ")", "\n", "t", "*=", "-", "1", "\n", "", "T", "=", "self", ".", "get_translation_matrix", "(", "t", ")", "\n", "if", "invert", ":", "\n", "            ", "M", "=", "torch", ".", "matmul", "(", "R", ",", "T", ")", "\n", "", "else", ":", "\n", "            ", "M", "=", "torch", ".", "matmul", "(", "T", ",", "R", ")", "\n", "", "return", "M", "\n", "\n", "", "def", "get_translation_matrix", "(", "self", ",", "translation_vector", ")", ":", "\n", "        ", "T", "=", "torch", ".", "zeros", "(", "translation_vector", ".", "shape", "[", "0", "]", ",", "4", ",", "4", ")", ".", "cuda", "(", ")", "\n", "t", "=", "translation_vector", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "3", ",", "1", ")", "\n", "T", "[", ":", ",", "0", ",", "0", "]", "=", "1", "\n", "T", "[", ":", ",", "1", ",", "1", "]", "=", "1", "\n", "T", "[", ":", ",", "2", ",", "2", "]", "=", "1", "\n", "T", "[", ":", ",", "3", ",", "3", "]", "=", "1", "\n", "T", "[", ":", ",", ":", "3", ",", "3", ",", "None", "]", "=", "t", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.net.Baseline.gradient": [[216, 220], ["None"], "methods", ["None"], ["return", "T", "\n", "\n", "", "def", "rot_from_axisangle", "(", "self", ",", "vec", ")", ":", "\n", "        ", "angle", "=", "torch", ".", "norm", "(", "vec", ",", "2", ",", "2", ",", "True", ")", "\n", "axis", "=", "vec", "/", "(", "angle", "+", "1e-7", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.PyramidPooling.__init__": [[11, 23], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "norm_layer", ")", ":", "\n", "        ", "super", "(", "PyramidPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "2", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "3", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "6", ")", "\n", "\n", "out_channels", "=", "int", "(", "in_channels", "/", "4", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "norm_layer", "(", "out_channels", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "norm_layer", "(", "out_channels", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "norm_layer", "(", "out_channels", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "norm_layer", "(", "out_channels", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.PyramidPooling.forward": [[24, 31], ["x.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers.PyramidPooling.conv1", "layers.PyramidPooling.conv2", "layers.PyramidPooling.conv3", "layers.PyramidPooling.conv4", "layers.PyramidPooling.pool1", "layers.PyramidPooling.pool2", "layers.PyramidPooling.pool3", "layers.PyramidPooling.pool4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "feat1", "=", "F", ".", "interpolate", "(", "self", ".", "conv1", "(", "self", ".", "pool1", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat2", "=", "F", ".", "interpolate", "(", "self", ".", "conv2", "(", "self", ".", "pool2", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat3", "=", "F", ".", "interpolate", "(", "self", ".", "conv3", "(", "self", ".", "pool3", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat4", "=", "F", ".", "interpolate", "(", "self", ".", "conv4", "(", "self", ".", "pool4", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "return", "torch", ".", "cat", "(", "(", "x", ",", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.Backproject.__init__": [[42, 56], ["torch.Module.__init__", "numpy.meshgrid", "numpy.stack().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "layers.Backproject.pix_coords.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "numpy.stack", "layers.Backproject.id_coords[].view", "layers.Backproject.id_coords[].view"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "height", ",", "width", ")", ":", "\n", "        ", "super", "(", "Backproject", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "\n", "meshgrid", "=", "np", ".", "meshgrid", "(", "range", "(", "self", ".", "width", ")", ",", "range", "(", "self", ".", "height", ")", ",", "indexing", "=", "'xy'", ")", "\n", "self", ".", "id_coords", "=", "np", ".", "stack", "(", "meshgrid", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "id_coords", "=", "torch", ".", "from_numpy", "(", "self", ".", "id_coords", ")", "\n", "self", ".", "ones", "=", "torch", ".", "ones", "(", "self", ".", "batch_size", ",", "1", ",", "self", ".", "height", "*", "self", ".", "width", ")", "\n", "self", ".", "pix_coords", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "stack", "(", "[", "self", ".", "id_coords", "[", "0", "]", ".", "view", "(", "-", "1", ")", ",", "self", ".", "id_coords", "[", "1", "]", ".", "view", "(", "-", "1", ")", "]", ",", "0", ")", ",", "0", ")", "\n", "self", ".", "pix_coords", "=", "self", ".", "pix_coords", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "self", ".", "pix_coords", "=", "torch", ".", "cat", "(", "[", "self", ".", "pix_coords", ",", "self", ".", "ones", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.Backproject.forward": [[57, 62], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers.Backproject.pix_coords.cuda", "depth.view", "layers.Backproject.ones.cuda"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "depth", ",", "inv_K", ")", ":", "\n", "        ", "cam_points", "=", "torch", ".", "matmul", "(", "inv_K", "[", ":", ",", ":", "3", ",", ":", "3", "]", ",", "self", ".", "pix_coords", ".", "cuda", "(", ")", ")", "\n", "cam_points", "=", "depth", ".", "view", "(", "self", ".", "batch_size", ",", "1", ",", "-", "1", ")", "*", "cam_points", "\n", "cam_points", "=", "torch", ".", "cat", "(", "[", "cam_points", ",", "self", ".", "ones", ".", "cuda", "(", ")", "]", ",", "1", ")", "\n", "return", "cam_points", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.Project.__init__": [[65, 72], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "height", ",", "width", ",", "eps", "=", "1e-7", ")", ":", "\n", "        ", "super", "(", "Project", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.Project.forward": [[73, 83], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "pix_coords.permute.permute.view", "pix_coords.permute.permute.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "cam_points[].unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "points", ",", "K", ",", "T", ")", ":", "\n", "        ", "P", "=", "torch", ".", "matmul", "(", "K", ",", "T", ")", "[", ":", ",", ":", "3", ",", ":", "]", "\n", "cam_points", "=", "torch", ".", "matmul", "(", "P", ",", "points", ")", "\n", "pix_coords", "=", "cam_points", "[", ":", ",", ":", "2", ",", ":", "]", "/", "(", "cam_points", "[", ":", ",", "2", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "eps", ")", "\n", "pix_coords", "=", "pix_coords", ".", "view", "(", "self", ".", "batch_size", ",", "2", ",", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "pix_coords", "=", "pix_coords", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "pix_coords", "[", "...", ",", "0", "]", "/=", "self", ".", "width", "-", "1", "\n", "pix_coords", "[", "...", ",", "1", "]", "/=", "self", ".", "height", "-", "1", "\n", "pix_coords", "=", "(", "pix_coords", "-", "0.5", ")", "*", "2", "\n", "return", "pix_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.SSIM.__init__": [[86, 96], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mu_x_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "mu_y_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_x_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_y_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_xy_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "refl", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "C1", "=", "0.01", "**", "2", "\n", "self", ".", "C2", "=", "0.03", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.SSIM.forward": [[97, 108], ["layers.SSIM.refl", "layers.SSIM.refl", "layers.SSIM.mu_x_pool", "layers.SSIM.mu_y_pool", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "layers.SSIM.sig_x_pool", "layers.SSIM.sig_y_pool", "layers.SSIM.sig_xy_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x", "=", "self", ".", "refl", "(", "x", ")", "\n", "y", "=", "self", ".", "refl", "(", "y", ")", "\n", "mu_x", "=", "self", ".", "mu_x_pool", "(", "x", ")", "\n", "mu_y", "=", "self", ".", "mu_y_pool", "(", "y", ")", "\n", "sigma_x", "=", "self", ".", "sig_x_pool", "(", "x", "**", "2", ")", "-", "mu_x", "**", "2", "\n", "sigma_y", "=", "self", ".", "sig_y_pool", "(", "y", "**", "2", ")", "-", "mu_y", "**", "2", "\n", "sigma_xy", "=", "self", ".", "sig_xy_pool", "(", "x", "*", "y", ")", "-", "mu_x", "*", "mu_y", "\n", "SSIM_n", "=", "(", "2", "*", "mu_x", "*", "mu_y", "+", "self", ".", "C1", ")", "*", "(", "2", "*", "sigma_xy", "+", "self", ".", "C2", ")", "\n", "SSIM_d", "=", "(", "mu_x", "**", "2", "+", "mu_y", "**", "2", "+", "self", ".", "C1", ")", "*", "(", "sigma_x", "+", "sigma_y", "+", "self", ".", "C2", ")", "\n", "return", "torch", ".", "clamp", "(", "(", "1", "-", "SSIM_n", "/", "SSIM_d", ")", "/", "2", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.DeconvBlock.__init__": [[124, 129], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ELU", "torch.ELU", "torch.ELU"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "DeconvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", "\n", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "(", "0", ",", "1", ",", "0", ",", "1", ")", ")", "\n", "self", ".", "nonlin", "=", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.DeconvBlock.forward": [[129, 134], ["layers.DeconvBlock.conv", "layers.DeconvBlock.pad", "layers.DeconvBlock.nonlin"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "self", ".", "pad", "(", "out", ")", "\n", "out", "=", "self", ".", "nonlin", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.ConvBlock.__init__": [[137, 141], ["torch.Module.__init__", "layers.Conv3x3", "torch.ELU", "torch.ELU", "torch.ELU"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "Conv3x3", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "nonlin", "=", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.ConvBlock.forward": [[141, 145], ["layers.ConvBlock.conv", "layers.ConvBlock.nonlin"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "self", ".", "nonlin", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.Conv1x1.__init__": [[148, 151], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "Conv1x1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "int", "(", "in_channels", ")", ",", "int", "(", "out_channels", ")", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "bias", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.Conv1x1.forward": [[151, 154], ["layers.Conv1x1.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.Conv3x3.__init__": [[157, 164], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "use_refl", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv3x3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "use_refl", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "1", ")", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "int", "(", "in_channels", ")", ",", "int", "(", "out_channels", ")", ",", "3", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.Conv3x3.forward": [[164, 168], ["layers.Conv3x3.pad", "layers.Conv3x3.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pad", "(", "x", ")", "\n", "out", "=", "self", ".", "conv", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.Conv5x5.__init__": [[171, 178], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "use_refl", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv5x5", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "use_refl", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "2", ")", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "int", "(", "in_channels", ")", ",", "int", "(", "out_channels", ")", ",", "5", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.Conv5x5.forward": [[178, 182], ["layers.Conv5x5.pad", "layers.Conv5x5.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pad", "(", "x", ")", "\n", "out", "=", "self", ".", "conv", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.CRPBlock.__init__": [[185, 192], ["torch.Module.__init__", "range", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "setattr", "layers.Conv1x1"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "n_stages", ")", ":", "\n", "        ", "super", "(", "CRPBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "n_stages", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "'{}_{}'", ".", "format", "(", "i", "+", "1", ",", "'pointwise'", ")", ",", "Conv1x1", "(", "in_planes", "if", "(", "i", "==", "0", ")", "else", "out_planes", ",", "out_planes", ",", "False", ")", ")", "\n", "", "self", ".", "stride", "=", "1", "\n", "self", ".", "n_stages", "=", "n_stages", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.CRPBlock.forward": [[193, 200], ["range", "layers.CRPBlock.maxpool", "getattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "top", "=", "x", "\n", "for", "i", "in", "range", "(", "self", ".", "n_stages", ")", ":", "\n", "            ", "top", "=", "self", ".", "maxpool", "(", "top", ")", "\n", "top", "=", "getattr", "(", "self", ",", "'{}_{}'", ".", "format", "(", "i", "+", "1", ",", "'pointwise'", ")", ")", "(", "top", ")", "\n", "x", "=", "top", "+", "x", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.disp_to_depth": [[33, 39], ["None"], "function", ["None"], ["", "", "def", "disp_to_depth", "(", "disp", ",", "min_depth", ",", "max_depth", ")", ":", "\n", "    ", "min_disp", "=", "1", "/", "max_depth", "#0.01", "\n", "max_disp", "=", "1", "/", "min_depth", "#10", "\n", "scaled_disp", "=", "min_disp", "+", "(", "max_disp", "-", "min_disp", ")", "*", "disp", "#(10-0.01)*disp+0.01", "\n", "depth", "=", "1", "/", "scaled_disp", "\n", "return", "scaled_disp", ",", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.upsample": [[110, 112], ["torch.interpolate"], "function", ["None"], ["", "", "def", "upsample", "(", "x", ")", ":", "\n", "    ", "return", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.upshuffle": [[114, 120], ["torch.Sequential", "torch.ReflectionPad2d", "torch.Conv2d", "torch.PixelShuffle", "torch.ELU"], "function", ["None"], ["", "def", "upshuffle", "(", "in_planes", ",", "upscale_factor", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", "*", "upscale_factor", "**", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "PixelShuffle", "(", "upscale_factor", ")", ",", "\n", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.layers.compute_depth_errors": [[202, 214], ["torch.max", "torch.max", "torch.max", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt.mean", "torch.sqrt.mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "", "def", "compute_depth_errors", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "thresh", "=", "torch", ".", "max", "(", "(", "gt", "/", "pred", ")", ",", "(", "pred", "/", "gt", ")", ")", "\n", "a1", "=", "(", "thresh", "<", "1.25", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "thresh", "<", "1.25", "**", "2", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "thresh", "<", "1.25", "**", "3", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "rmse", "=", "(", "gt", "-", "pred", ")", "**", "2", "\n", "rmse", "=", "torch", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "rmse_log", "=", "(", "torch", ".", "log", "(", "gt", ")", "-", "torch", ".", "log", "(", "pred", ")", ")", "**", "2", "\n", "rmse_log", "=", "torch", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "abs_rel", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "gt", "-", "pred", ")", "/", "gt", ")", "\n", "sq_rel", "=", "torch", ".", "mean", "(", "(", "gt", "-", "pred", ")", "**", "2", "/", "gt", ")", "\n", "return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", ",", "a1", ",", "a2", ",", "a3", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.resnet.BasicBlock.__init__": [[19, 28], ["torch.Module.__init__", "resnet.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv3x3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "bn", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "bn", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.resnet.BasicBlock.forward": [[29, 46], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.resnet.Bottleneck.__init__": [[51, 62], ["torch.Module.__init__", "resnet.conv1x1", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "resnet.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "resnet.conv1x1", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv1x1", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv3x3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "bn", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "bn", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "bn", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.resnet.Bottleneck.forward": [[63, 84], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.resnet.ResNet.__init__": [[88, 108], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "bn", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "bn", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.resnet.ResNet._make_layer": [[109, 124], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "bn", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.resnet.ResNet.forward": [[125, 137], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.resnet.conv3x3": [[6, 9], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.resnet.conv1x1": [[11, 14], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.resnet.resnet18": [[139, 149], ["resnet.ResNet", "ResNet.load_state_dict", "print", "torch.load", "torch.load"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pretrained_path", ")", ")", "\n", "print", "(", "'Loaded pre-trained weights'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.resnet.resnet34": [[151, 161], ["resnet.ResNet", "ResNet.load_state_dict", "print", "torch.load", "torch.load", "os.join"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained_path", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "osp", ".", "join", "(", "pretrained_path", ",", "'resnet34.pth'", ")", ")", ")", "\n", "print", "(", "'Loaded pre-trained weights'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.resnet.resnet50": [[163, 173], ["resnet.ResNet", "ResNet.load_state_dict", "print", "torch.load", "torch.load", "os.join"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained_path", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "osp", ".", "join", "(", "pretrained_path", ",", "'resnet50.pth'", ")", ")", ")", "\n", "print", "(", "'Loaded pre-trained weights'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.resnet.resnet101": [[175, 185], ["resnet.ResNet", "ResNet.load_state_dict", "print", "torch.load", "torch.load", "os.join"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained_path", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "osp", ".", "join", "(", "pretrained_path", ",", "'resnet101.pth'", ")", ")", ")", "\n", "print", "(", "'Loaded pre-trained weights'", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.pose_decoder.PoseDecoder.__init__": [[6, 15], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_ch_enc", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PoseDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "reduce", "=", "nn", ".", "Conv2d", "(", "num_ch_enc", "[", "-", "1", "]", ",", "256", ",", "1", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "stride", ",", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "stride", ",", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "256", ",", "6", ",", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.pose_decoder.PoseDecoder.forward": [[16, 27], ["pose_decoder.PoseDecoder.relu", "pose_decoder.PoseDecoder.relu", "pose_decoder.PoseDecoder.relu", "pose_decoder.PoseDecoder.conv3", "out.mean().mean.mean().mean.mean().mean", "pose_decoder.PoseDecoder.reduce", "pose_decoder.PoseDecoder.conv1", "pose_decoder.PoseDecoder.conv2", "out.mean().mean.mean().mean.view", "out.mean().mean.mean().mean.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_features", ")", ":", "\n", "        ", "f", "=", "input_features", "[", "-", "1", "]", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "reduce", "(", "f", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "out", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "out", "=", "0.01", "*", "out", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "6", ")", "\n", "axisangle", "=", "out", "[", "...", ",", ":", "3", "]", "\n", "translation", "=", "out", "[", "...", ",", "3", ":", "]", "\n", "return", "axisangle", ",", "translation", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.pose_encoder.ResNetMultiImageInput.__init__": [[12, 30], ["resnet.ResNet.__init__", "torch.Conv2d", "torch.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "pose_encoder.ResNetMultiImageInput._make_layer", "pose_encoder.ResNetMultiImageInput._make_layer", "pose_encoder.ResNetMultiImageInput._make_layer", "pose_encoder.ResNetMultiImageInput._make_layer", "pose_encoder.ResNetMultiImageInput.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "num_input_images", "=", "2", ")", ":", "\n", "        ", "super", "(", "ResNetMultiImageInput", ",", "self", ")", ".", "__init__", "(", "block", ",", "layers", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_input_images", "*", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "bn", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.pose_encoder.PoseEncoder.__init__": [[53, 76], ["torch.Module.__init__", "numpy.array", "ValueError", "pose_encoder.resnet_multiimage_input", "torch.load", "torch.load", "torch.load", "torch.load", "pose_encoder.PoseEncoder.encoder.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.pose_encoder.resnet_multiimage_input"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "pretrained_path", "=", "None", ",", "num_input_images", "=", "2", ")", ":", "\n", "        ", "super", "(", "PoseEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_ch_enc", "=", "np", ".", "array", "(", "[", "64", ",", "64", ",", "128", ",", "256", ",", "512", "]", ")", "\n", "\n", "resnets", "=", "{", "18", ":", "resnet18", ",", "\n", "34", ":", "resnet34", ",", "\n", "50", ":", "resnet50", ",", "\n", "101", ":", "resnet101", ",", "}", "\n", "\n", "if", "num_layers", "not", "in", "resnets", ":", "\n", "            ", "raise", "ValueError", "(", "\"{} is not a valid number of resnet layers\"", ".", "format", "(", "num_layers", ")", ")", "\n", "\n", "", "if", "num_input_images", ">", "1", ":", "\n", "            ", "self", ".", "encoder", "=", "resnet_multiimage_input", "(", "num_layers", ",", "num_input_images", ",", "pretrained_path", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "encoder", "=", "resnets", "[", "num_layers", "]", "(", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "pretrained_path", ")", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "", "", "if", "num_layers", ">", "34", ":", "\n", "            ", "self", ".", "num_ch_enc", "[", "1", ":", "]", "*=", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.pose_encoder.PoseEncoder.forward": [[81, 93], ["pose_encoder.PoseEncoder.encoder.conv1", "pose_encoder.PoseEncoder.encoder.bn1", "pose_encoder.PoseEncoder.features.append", "pose_encoder.PoseEncoder.features.append", "pose_encoder.PoseEncoder.features.append", "pose_encoder.PoseEncoder.features.append", "pose_encoder.PoseEncoder.features.append", "pose_encoder.PoseEncoder.encoder.relu", "pose_encoder.PoseEncoder.encoder.layer1", "pose_encoder.PoseEncoder.encoder.layer2", "pose_encoder.PoseEncoder.encoder.layer3", "pose_encoder.PoseEncoder.encoder.layer4", "pose_encoder.PoseEncoder.encoder.maxpool"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_image", ")", ":", "\n", "        ", "self", ".", "features", "=", "[", "]", "\n", "x", "=", "(", "input_image", "-", "0.45", ")", "/", "0.225", "\n", "x", "=", "self", ".", "encoder", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "encoder", ".", "bn1", "(", "x", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "relu", "(", "x", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer1", "(", "self", ".", "encoder", ".", "maxpool", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer2", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer3", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer4", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "\n", "return", "self", ".", "features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_baseline.pose_encoder.resnet_multiimage_input": [[32, 50], ["pose_encoder.ResNetMultiImageInput", "torch.load", "torch.load", "ResNetMultiImageInput.load_state_dict", "pose_encoder.ResNetMultiImageInput", "torch.cat", "torch.cat"], "function", ["None"], ["", "", "", "", "def", "resnet_multiimage_input", "(", "num_layers", ",", "num_input_images", "=", "2", ",", "pretrained_path", "=", "None", ")", ":", "\n", "    ", "assert", "num_layers", "in", "[", "18", ",", "34", ",", "50", ",", "101", "]", ",", "\"Can only run with 18, 34, 50, 101 layers resnet\"", "\n", "blocks", "=", "{", "18", ":", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "34", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "50", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "101", ":", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "}", "[", "num_layers", "]", "\n", "\n", "if", "num_layers", "<", "40", ":", "\n", "        ", "model", "=", "ResNetMultiImageInput", "(", "BasicBlock", ",", "blocks", ",", "num_input_images", "=", "num_input_images", ")", "\n", "", "elif", "num_layers", ">", "40", ":", "\n", "        ", "model", "=", "ResNetMultiImageInput", "(", "Bottleneck", ",", "blocks", ",", "num_input_images", "=", "num_input_images", ")", "\n", "\n", "", "if", "pretrained_path", "is", "not", "None", ":", "\n", "        ", "loaded", "=", "torch", ".", "load", "(", "pretrained_path", ")", "\n", "loaded", "[", "'conv1.weight'", "]", "=", "torch", ".", "cat", "(", "[", "loaded", "[", "'conv1.weight'", "]", "]", "*", "num_input_images", ",", "1", ")", "/", "num_input_images", "\n", "model", ".", "load_state_dict", "(", "loaded", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.depth_decoder.DepthDecoder.__init__": [[41, 79], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "layers.Conv1x1", "layers.Conv1x1", "layers.Conv1x1", "layers.Conv1x1", "layers.Conv3x3", "layers.Conv3x3", "layers.Conv3x3", "layers.Conv3x3", "depth_decoder.DepthDecoder._make_crp", "depth_decoder.DepthDecoder._make_crp", "depth_decoder.DepthDecoder._make_crp", "depth_decoder.DepthDecoder._make_crp", "layers.Conv3x3", "layers.Conv3x3", "layers.Conv3x3", "layers.Conv3x3", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.GraphConvolution", "layers.GraphConvolution", "layers.GraphConvolution", "layers.GraphConvolution", "layers.Conv3x3", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "layers.Conv3x3", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "layers.Conv3x3", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "layers.Conv3x3", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.depth_decoder.DepthDecoder._make_crp", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.depth_decoder.DepthDecoder._make_crp", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.depth_decoder.DepthDecoder._make_crp", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.depth_decoder.DepthDecoder._make_crp"], ["", "def", "_make_crp", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stages", ")", ":", "\n", "        ", "layers", "=", "[", "CRPBlock", "(", "in_planes", ",", "out_planes", ",", "stages", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input_features", ",", "frame_id", "=", "0", ")", ":", "\n", "        ", "self", ".", "outputs", "=", "{", "}", "\n", "l0", ",", "l1", ",", "l2", ",", "l3", ",", "l4", "=", "input_features", "\n", "\n", "l4", "=", "self", ".", "do", "(", "l4", ")", "\n", "l3", "=", "self", ".", "do", "(", "l3", ")", "\n", "\n", "x4", "=", "self", ".", "reduce4", "(", "l4", ")", "\n", "x4", "=", "self", ".", "iconv4", "(", "x4", ")", "\n", "x4", "=", "F", ".", "leaky_relu", "(", "x4", ")", "\n", "x4", "=", "self", ".", "crp4", "(", "x4", ")", "\n", "x4", "=", "self", ".", "merge4", "(", "x4", ")", "\n", "x4", "=", "F", ".", "leaky_relu", "(", "x4", ")", "\n", "x4", "=", "upsample", "(", "x4", ")", "\n", "disp4", "=", "self", ".", "disp4", "(", "x4", ")", "\n", "\n", "\n", "x3", "=", "self", ".", "reduce3", "(", "l3", ")", "\n", "x3", "=", "torch", ".", "cat", "(", "(", "x3", ",", "x4", ",", "disp4", ")", ",", "1", ")", "\n", "x3", "=", "self", ".", "iconv3", "(", "x3", ")", "\n", "x3", "=", "F", ".", "leaky_relu", "(", "x3", ")", "\n", "x3", "=", "self", ".", "crp3", "(", "x3", ")", "\n", "x3", "=", "self", ".", "merge3", "(", "x3", ")", "\n", "x3", "=", "F", ".", "leaky_relu", "(", "x3", ")", "\n", "x3", "=", "upsample", "(", "x3", ")", "\n", "disp3", "=", "self", ".", "disp3", "(", "x3", ")", "\n", "\n", "\n", "x2", "=", "self", ".", "reduce2", "(", "l2", ")", "\n", "x2", "=", "torch", ".", "cat", "(", "(", "x2", ",", "x3", ",", "disp3", ")", ",", "1", ")", "\n", "x2", "=", "self", ".", "iconv2", "(", "x2", ")", "\n", "x2", "=", "F", ".", "leaky_relu", "(", "x2", ")", "\n", "x2", "=", "self", ".", "crp2", "(", "x2", ")", "\n", "x2", "=", "self", ".", "merge2", "(", "x2", ")", "\n", "x2", "=", "F", ".", "leaky_relu", "(", "x2", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.depth_decoder.DepthDecoder._make_crp": [[81, 84], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.CRPBlock"], "methods", ["None"], ["disp2", "=", "self", ".", "disp2", "(", "x2", ")", "\n", "\n", "x1", "=", "self", ".", "reduce1", "(", "l1", ")", "\n", "x1", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ",", "disp2", ")", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.depth_decoder.DepthDecoder.forward": [[85, 158], ["depth_decoder.DepthDecoder.do", "depth_decoder.DepthDecoder.do", "depth_decoder.DepthDecoder.reduce4", "depth_decoder.DepthDecoder.iconv4", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "depth_decoder.DepthDecoder.crp4", "depth_decoder.DepthDecoder.merge4", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "layers.upsample.view", "depth_decoder.DepthDecoder.gc1", "depth_decoder.DepthDecoder.gc2", "depth_decoder.DepthDecoder.view", "depth_decoder.DepthDecoder.do", "layers.upsample", "layers.upsample", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "yy.view.view.cpu", "yy.view.view.detach().numpy", "depth_decoder.normalize", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "yy.view.view.view", "torch.interpolate", "torch.interpolate", "torch.interpolate", "yy.view.view.view", "depth_decoder.DepthDecoder.reduce3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "depth_decoder.DepthDecoder.iconv3", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "depth_decoder.DepthDecoder.crp3", "depth_decoder.DepthDecoder.merge3", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "layers.upsample.view", "depth_decoder.DepthDecoder.gc3", "depth_decoder.DepthDecoder.gc4", "depth_decoder.DepthDecoder.view", "depth_decoder.DepthDecoder.do", "layers.upsample", "layers.upsample", "depth_decoder.DepthDecoder.reduce2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "depth_decoder.DepthDecoder.iconv2", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "depth_decoder.DepthDecoder.crp2", "depth_decoder.DepthDecoder.merge2", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "layers.upsample", "depth_decoder.DepthDecoder.disp2", "depth_decoder.DepthDecoder.reduce1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "depth_decoder.DepthDecoder.iconv1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "depth_decoder.DepthDecoder.crp1", "depth_decoder.DepthDecoder.merge1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "layers.upsample", "depth_decoder.DepthDecoder.disp1", "yy.view.view.detach", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.depth_decoder.normalize", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample"], ["x1", "=", "self", ".", "iconv1", "(", "x1", ")", "\n", "x1", "=", "F", ".", "leaky_relu", "(", "x1", ")", "\n", "x1", "=", "self", ".", "crp1", "(", "x1", ")", "\n", "x1", "=", "self", ".", "merge1", "(", "x1", ")", "\n", "x1", "=", "F", ".", "leaky_relu", "(", "x1", ")", "\n", "x1", "=", "upsample", "(", "x1", ")", "\n", "disp1", "=", "self", ".", "disp1", "(", "x1", ")", "\n", "\n", "self", ".", "outputs", "[", "(", "\"disp\"", ",", "frame_id", ",", "3", ")", "]", "=", "disp4", "\n", "self", ".", "outputs", "[", "(", "\"disp\"", ",", "frame_id", ",", "2", ")", "]", "=", "disp3", "\n", "self", ".", "outputs", "[", "(", "\"disp\"", ",", "frame_id", ",", "1", ")", "]", "=", "disp2", "\n", "self", ".", "outputs", "[", "(", "\"disp\"", ",", "frame_id", ",", "0", ")", "]", "=", "disp1", "\n", "\n", "return", "self", ".", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.depth_decoder.normalize": [[19, 26], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["\n", "self", ".", "iconv4", "=", "Conv3x3", "(", "512", ",", "bottleneck", ")", "\n", "self", ".", "iconv3", "=", "Conv3x3", "(", "bottleneck", "*", "2", "+", "1", ",", "bottleneck", ")", "\n", "self", ".", "iconv2", "=", "Conv3x3", "(", "bottleneck", "*", "2", "+", "1", ",", "bottleneck", ")", "\n", "self", ".", "iconv1", "=", "Conv3x3", "(", "bottleneck", "*", "2", "+", "1", ",", "bottleneck", ")", "\n", "\n", "self", ".", "crp4", "=", "self", ".", "_make_crp", "(", "bottleneck", ",", "bottleneck", ",", "stage", ")", "\n", "self", ".", "crp3", "=", "self", ".", "_make_crp", "(", "bottleneck", ",", "bottleneck", ",", "stage", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.depth_encoder.DepthEncoder.__init__": [[9, 30], ["torch.Module.__init__", "numpy.array", "ValueError", "torch.load", "torch.load", "torch.load", "torch.load", "depth_encoder.DepthEncoder.encoder.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "pretrained_path", "=", "None", ")", ":", "\n", "        ", "super", "(", "DepthEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_ch_enc", "=", "np", ".", "array", "(", "[", "64", ",", "64", ",", "128", ",", "256", ",", "512", "]", ")", "\n", "\n", "resnets", "=", "{", "18", ":", "resnet18", ",", "\n", "34", ":", "resnet34", ",", "\n", "50", ":", "resnet50", ",", "\n", "101", ":", "resnet101", ",", "}", "\n", "\n", "if", "num_layers", "not", "in", "resnets", ":", "\n", "            ", "raise", "ValueError", "(", "\"{} is not a valid number of resnet layers\"", ".", "format", "(", "num_layers", ")", ")", "\n", "\n", "\n", "", "self", ".", "encoder", "=", "resnets", "[", "num_layers", "]", "(", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "pretrained_path", ")", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "", "if", "num_layers", ">", "34", ":", "\n", "            ", "self", ".", "num_ch_enc", "[", "1", ":", "]", "*=", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.depth_encoder.DepthEncoder.forward": [[35, 45], ["depth_encoder.DepthEncoder.features.append", "depth_encoder.DepthEncoder.features.append", "depth_encoder.DepthEncoder.features.append", "depth_encoder.DepthEncoder.features.append", "depth_encoder.DepthEncoder.features.append", "depth_encoder.DepthEncoder.encoder.relu", "depth_encoder.DepthEncoder.encoder.layer1", "depth_encoder.DepthEncoder.encoder.layer2", "depth_encoder.DepthEncoder.encoder.layer3", "depth_encoder.DepthEncoder.encoder.layer4", "depth_encoder.DepthEncoder.encoder.bn1", "depth_encoder.DepthEncoder.encoder.maxpool", "depth_encoder.DepthEncoder.encoder.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_image", ")", ":", "\n", "        ", "self", ".", "features", "=", "[", "]", "\n", "x", "=", "(", "input_image", "-", "0.45", ")", "/", "0.225", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "relu", "(", "self", ".", "encoder", ".", "bn1", "(", "self", ".", "encoder", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer1", "(", "self", ".", "encoder", ".", "maxpool", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer2", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer3", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer4", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "\n", "return", "self", ".", "features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.__init__": [[28, 42], ["torch.Module.__init__", "depth_encoder.DepthEncoder", "depth_decoder.DepthDecoder", "pose_encoder.PoseEncoder", "pose_decoder.PoseDecoder", "net.build_extractor", "layers.SSIM", "layers.Backproject", "layers.Project"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.build_extractor"], ["self", ".", "Decoder", "=", "Decoder", "(", "self", ".", "Encoder", ".", "num_ch_enc", ")", "\n", "self", ".", "ssim", "=", "SSIM", "(", ")", "\n", "self", ".", "backproject", "=", "Backproject", "(", "self", ".", "opt", ".", "imgs_per_gpu", ",", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ")", "\n", "self", ".", "project", "=", "Project", "(", "self", ".", "opt", ".", "imgs_per_gpu", ",", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "DepthDecoder", "(", "self", ".", "DepthEncoder", "(", "inputs", "[", "\"color_aug\"", ",", "0", ",", "0", "]", ")", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "outputs", ".", "update", "(", "self", ".", "predict_poses", "(", "inputs", ")", ")", "\n", "features", "=", "self", ".", "Encoder", "(", "inputs", "[", "(", "\"color\"", ",", "0", ",", "0", ")", "]", ")", "\n", "outputs", ".", "update", "(", "self", ".", "Decoder", "(", "features", ",", "0", ")", ")", "\n", "loss_dict", "=", "self", ".", "compute_losses", "(", "inputs", ",", "outputs", ",", "features", ")", "\n", "return", "outputs", ",", "loss_dict", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.forward": [[43, 50], ["net.mono_fm.DepthDecoder", "net.mono_fm.DepthEncoder", "net.mono_fm.update", "net.mono_fm.compute_losses", "net.mono_fm.predict_poses"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.compute_losses", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.predict_poses"], ["", "def", "robust_l1", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "eps", "=", "1e-3", "\n", "return", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "target", "-", "pred", ",", "2", ")", "+", "eps", "**", "2", ")", "\n", "\n", "", "def", "compute_perceptional_loss", "(", "self", ",", "tgt_f", ",", "src_f", ")", ":", "\n", "        ", "loss", "=", "self", ".", "robust_l1", "(", "tgt_f", ",", "src_f", ")", ".", "mean", "(", "1", ",", "True", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.robust_l1": [[51, 54], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "compute_reprojection_loss", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "photometric_loss", "=", "self", ".", "robust_l1", "(", "pred", ",", "target", ")", ".", "mean", "(", "1", ",", "True", ")", "\n", "ssim_loss", "=", "self", ".", "ssim", "(", "pred", ",", "target", ")", ".", "mean", "(", "1", ",", "True", ")", "\n", "reprojection_loss", "=", "(", "0.85", "*", "ssim_loss", "+", "0.15", "*", "photometric_loss", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.compute_perceptional_loss": [[55, 58], ["net.mono_fm.robust_l1().mean", "net.mono_fm.robust_l1"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.robust_l1"], ["return", "reprojection_loss", "\n", "\n", "", "def", "compute_losses", "(", "self", ",", "inputs", ",", "outputs", ",", "features", ")", ":", "\n", "        ", "loss_dict", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.compute_reprojection_loss": [[59, 64], ["net.mono_fm.robust_l1().mean", "net.mono_fm.ssim().mean", "net.mono_fm.robust_l1", "net.mono_fm.ssim"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.robust_l1"], ["target", "=", "inputs", "[", "(", "\"color\"", ",", "0", ",", "0", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "f", "=", "features", "[", "i", "]", "\n", "regularization_loss", "=", "self", ".", "get_feature_regularization_loss", "(", "f", ",", "target", ")", "\n", "loss_dict", "[", "(", "'feature_regularization_loss'", ",", "i", ")", "]", "=", "regularization_loss", "/", "(", "2", "**", "i", ")", "/", "5", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.compute_losses": [[65, 132], ["net.mono_fm.generate_images_pred", "net.mono_fm.generate_features_pred", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "net.mono_fm.get_smooth_loss", "reprojection_losses.append", "min_reconstruct_loss.mean", "len", "perceptional_losses.append", "len", "disp.mean().mean", "len", "net.mono_fm.compute_reprojection_loss", "reprojection_losses.append", "net.mono_fm.compute_reprojection_loss", "net.mono_fm.extractor", "net.mono_fm.compute_perceptional_loss", "min_perceptional_loss.mean", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "disp.mean", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.generate_images_pred", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.generate_features_pred", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.get_smooth_loss", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.compute_reprojection_loss", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.compute_reprojection_loss", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.compute_perceptional_loss"], ["\n", "", "for", "scale", "in", "self", ".", "opt", ".", "scales", ":", "\n", "            ", "\"\"\"\n            initialization\n            \"\"\"", "\n", "disp", "=", "outputs", "[", "(", "\"disp\"", ",", "0", ",", "scale", ")", "]", "\n", "\n", "reprojection_losses", "=", "[", "]", "\n", "perceptional_losses", "=", "[", "]", "\n", "\n", "\"\"\"\n            autoencoder\n            \"\"\"", "\n", "res_img", "=", "outputs", "[", "(", "\"res_img\"", ",", "0", ",", "scale", ")", "]", "\n", "_", ",", "_", ",", "h", ",", "w", "=", "res_img", ".", "size", "(", ")", "\n", "target_resize", "=", "F", ".", "interpolate", "(", "target", ",", "[", "h", ",", "w", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "img_reconstruct_loss", "=", "self", ".", "compute_reprojection_loss", "(", "res_img", ",", "target_resize", ")", "\n", "loss_dict", "[", "(", "'img_reconstruct_loss'", ",", "scale", ")", "]", "=", "img_reconstruct_loss", ".", "mean", "(", ")", "/", "len", "(", "self", ".", "opt", ".", "scales", ")", "\n", "\n", "\"\"\"\n            reconstruction\n            \"\"\"", "\n", "outputs", "=", "self", ".", "generate_images_pred", "(", "inputs", ",", "outputs", ",", "scale", ")", "\n", "outputs", "=", "self", ".", "generate_features_pred", "(", "inputs", ",", "outputs", ")", "\n", "\n", "\"\"\"\n            automask\n            \"\"\"", "\n", "if", "self", ".", "opt", ".", "automask", ":", "\n", "                ", "for", "frame_id", "in", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ":", "\n", "                    ", "pred", "=", "inputs", "[", "(", "\"color\"", ",", "frame_id", ",", "0", ")", "]", "\n", "identity_reprojection_loss", "=", "self", ".", "compute_reprojection_loss", "(", "pred", ",", "target", ")", "\n", "identity_reprojection_loss", "+=", "torch", ".", "randn", "(", "identity_reprojection_loss", ".", "shape", ")", ".", "cuda", "(", ")", "*", "1e-5", "\n", "reprojection_losses", ".", "append", "(", "identity_reprojection_loss", ")", "\n", "\n", "", "", "\"\"\"\n            minimum reconstruction loss\n            \"\"\"", "\n", "for", "frame_id", "in", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ":", "\n", "                ", "pred", "=", "outputs", "[", "(", "\"color\"", ",", "frame_id", ",", "scale", ")", "]", "\n", "reprojection_losses", ".", "append", "(", "self", ".", "compute_reprojection_loss", "(", "pred", ",", "target", ")", ")", "\n", "", "reprojection_loss", "=", "torch", ".", "cat", "(", "reprojection_losses", ",", "1", ")", "\n", "\n", "min_reconstruct_loss", ",", "outputs", "[", "(", "\"min_index\"", ",", "scale", ")", "]", "=", "torch", ".", "min", "(", "reprojection_loss", ",", "dim", "=", "1", ")", "\n", "loss_dict", "[", "(", "'min_reconstruct_loss'", ",", "scale", ")", "]", "=", "min_reconstruct_loss", ".", "mean", "(", ")", "/", "len", "(", "self", ".", "opt", ".", "scales", ")", "\n", "\n", "\"\"\"\n            minimum perceptional loss\n            \"\"\"", "\n", "for", "frame_id", "in", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ":", "\n", "                ", "src_f", "=", "outputs", "[", "(", "\"feature\"", ",", "frame_id", ",", "0", ")", "]", "\n", "tgt_f", "=", "self", ".", "Encoder", "(", "inputs", "[", "(", "\"color\"", ",", "0", ",", "0", ")", "]", ")", "[", "0", "]", "\n", "perceptional_losses", ".", "append", "(", "self", ".", "compute_perceptional_loss", "(", "tgt_f", ",", "src_f", ")", ")", "\n", "", "perceptional_loss", "=", "torch", ".", "cat", "(", "perceptional_losses", ",", "1", ")", "\n", "\n", "min_perceptional_loss", ",", "outputs", "[", "(", "\"min_index\"", ",", "scale", ")", "]", "=", "torch", ".", "min", "(", "perceptional_loss", ",", "dim", "=", "1", ")", "\n", "loss_dict", "[", "(", "'min_perceptional_loss'", ",", "scale", ")", "]", "=", "self", ".", "opt", ".", "perception_weight", "*", "min_perceptional_loss", ".", "mean", "(", ")", "/", "len", "(", "self", ".", "opt", ".", "scales", ")", "\n", "\n", "\"\"\"\n            disp mean normalization\n            \"\"\"", "\n", "if", "self", ".", "opt", ".", "disp_norm", ":", "\n", "                ", "mean_disp", "=", "disp", ".", "mean", "(", "2", ",", "True", ")", ".", "mean", "(", "3", ",", "True", ")", "\n", "disp", "=", "disp", "/", "(", "mean_disp", "+", "1e-7", ")", "\n", "\n", "", "\"\"\"\n            smooth loss\n            \"\"\"", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.disp_to_depth": [[133, 139], ["None"], "methods", ["None"], ["smooth_loss", "=", "self", ".", "get_smooth_loss", "(", "disp", ",", "target", ")", "\n", "loss_dict", "[", "(", "'smooth_loss'", ",", "scale", ")", "]", "=", "self", ".", "opt", ".", "smoothness_weight", "*", "smooth_loss", "/", "(", "2", "**", "scale", ")", "/", "len", "(", "self", ".", "opt", ".", "scales", ")", "\n", "\n", "", "return", "loss_dict", "\n", "\n", "", "def", "disp_to_depth", "(", "self", ",", "disp", ",", "min_depth", ",", "max_depth", ")", ":", "\n", "        ", "min_disp", "=", "1", "/", "max_depth", "# 0.01", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.predict_poses": [[140, 154], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "net.mono_fm.PoseEncoder", "net.mono_fm.PoseDecoder", "net.mono_fm.transformation_from_parameters", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.transformation_from_parameters"], ["max_disp", "=", "1", "/", "min_depth", "# 10", "\n", "scaled_disp", "=", "min_disp", "+", "(", "max_disp", "-", "min_disp", ")", "*", "disp", "# (10-0.01)*disp+0.01", "\n", "depth", "=", "1", "/", "scaled_disp", "\n", "return", "scaled_disp", ",", "depth", "\n", "\n", "", "def", "predict_poses", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "{", "}", "\n", "#[192,640] for kitti", "\n", "pose_feats", "=", "{", "f_i", ":", "F", ".", "interpolate", "(", "inputs", "[", "\"color_aug\"", ",", "f_i", ",", "0", "]", ",", "[", "192", ",", "640", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "for", "f_i", "in", "self", ".", "opt", ".", "frame_ids", "}", "\n", "for", "f_i", "in", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ":", "\n", "            ", "if", "not", "f_i", "==", "\"s\"", ":", "\n", "                ", "if", "f_i", "<", "0", ":", "\n", "                    ", "pose_inputs", "=", "[", "pose_feats", "[", "f_i", "]", ",", "pose_feats", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                    ", "pose_inputs", "=", "[", "pose_feats", "[", "0", "]", ",", "pose_feats", "[", "f_i", "]", "]", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.generate_images_pred": [[155, 169], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "net.mono_fm.disp_to_depth", "enumerate", "net.mono_fm.backproject", "net.mono_fm.project", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.disp_to_depth"], ["", "pose_inputs", "=", "self", ".", "PoseEncoder", "(", "torch", ".", "cat", "(", "pose_inputs", ",", "1", ")", ")", "\n", "axisangle", ",", "translation", "=", "self", ".", "PoseDecoder", "(", "pose_inputs", ")", "\n", "outputs", "[", "(", "\"cam_T_cam\"", ",", "0", ",", "f_i", ")", "]", "=", "self", ".", "transformation_from_parameters", "(", "axisangle", "[", ":", ",", "0", "]", ",", "translation", "[", ":", ",", "0", "]", ",", "invert", "=", "(", "f_i", "<", "0", ")", ")", "\n", "", "", "return", "outputs", "\n", "\n", "", "def", "generate_images_pred", "(", "self", ",", "inputs", ",", "outputs", ",", "scale", ")", ":", "\n", "        ", "disp", "=", "outputs", "[", "(", "\"disp\"", ",", "0", ",", "scale", ")", "]", "\n", "disp", "=", "F", ".", "interpolate", "(", "disp", ",", "[", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "_", ",", "depth", "=", "self", ".", "disp_to_depth", "(", "disp", ",", "self", ".", "opt", ".", "min_depth", ",", "self", ".", "opt", ".", "max_depth", ")", "\n", "for", "i", ",", "frame_id", "in", "enumerate", "(", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ")", ":", "\n", "            ", "if", "frame_id", "==", "\"s\"", ":", "\n", "                ", "T", "=", "inputs", "[", "\"stereo_T\"", "]", "\n", "", "else", ":", "\n", "                ", "T", "=", "outputs", "[", "(", "\"cam_T_cam\"", ",", "0", ",", "frame_id", ")", "]", "\n", "", "cam_points", "=", "self", ".", "backproject", "(", "depth", ",", "inputs", "[", "(", "\"inv_K\"", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.generate_features_pred": [[170, 189], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "net.mono_fm.disp_to_depth", "enumerate", "layers.Backproject", "layers.Project", "layers.Backproject.", "layers.Project.", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "int", "int", "int", "int", "int", "int", "net.mono_fm.extractor"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.disp_to_depth"], ["pix_coords", "=", "self", ".", "project", "(", "cam_points", ",", "inputs", "[", "(", "\"K\"", ")", "]", ",", "T", ")", "#[b,h,w,2]", "\n", "img", "=", "inputs", "[", "(", "\"color\"", ",", "frame_id", ",", "0", ")", "]", "\n", "outputs", "[", "(", "\"color\"", ",", "frame_id", ",", "scale", ")", "]", "=", "F", ".", "grid_sample", "(", "img", ",", "pix_coords", ",", "padding_mode", "=", "\"border\"", ")", "\n", "", "return", "outputs", "\n", "\n", "", "def", "generate_features_pred", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "disp", "=", "outputs", "[", "(", "\"disp\"", ",", "0", ",", "0", ")", "]", "\n", "disp", "=", "F", ".", "interpolate", "(", "disp", ",", "[", "int", "(", "self", ".", "opt", ".", "height", "/", "2", ")", ",", "int", "(", "self", ".", "opt", ".", "width", "/", "2", ")", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "_", ",", "depth", "=", "self", ".", "disp_to_depth", "(", "disp", ",", "self", ".", "opt", ".", "min_depth", ",", "self", ".", "opt", ".", "max_depth", ")", "\n", "for", "i", ",", "frame_id", "in", "enumerate", "(", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ")", ":", "\n", "            ", "if", "frame_id", "==", "\"s\"", ":", "\n", "                ", "T", "=", "inputs", "[", "\"stereo_T\"", "]", "\n", "", "else", ":", "\n", "                ", "T", "=", "outputs", "[", "(", "\"cam_T_cam\"", ",", "0", ",", "frame_id", ")", "]", "\n", "\n", "", "backproject", "=", "Backproject", "(", "self", ".", "opt", ".", "imgs_per_gpu", ",", "int", "(", "self", ".", "opt", ".", "height", "/", "2", ")", ",", "int", "(", "self", ".", "opt", ".", "width", "/", "2", ")", ")", "\n", "project", "=", "Project", "(", "self", ".", "opt", ".", "imgs_per_gpu", ",", "int", "(", "self", ".", "opt", ".", "height", "/", "2", ")", ",", "int", "(", "self", ".", "opt", ".", "width", "/", "2", ")", ")", "\n", "\n", "cam_points", "=", "backproject", "(", "depth", ",", "inputs", "[", "(", "\"inv_K\"", ")", "]", ")", "\n", "pix_coords", "=", "project", "(", "cam_points", ",", "inputs", "[", "(", "\"K\"", ")", "]", ",", "T", ")", "#[b,h,w,2]", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.transformation_from_parameters": [[190, 202], ["net.mono_fm.rot_from_axisangle", "translation.clone", "net.mono_fm.get_translation_matrix", "R.transpose.transpose.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.rot_from_axisangle", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.get_translation_matrix"], ["img", "=", "inputs", "[", "(", "\"color\"", ",", "frame_id", ",", "0", ")", "]", "\n", "src_f", "=", "self", ".", "Encoder", "(", "img", ")", "[", "0", "]", "\n", "outputs", "[", "(", "\"feature\"", ",", "frame_id", ",", "0", ")", "]", "=", "F", ".", "grid_sample", "(", "src_f", ",", "pix_coords", ",", "padding_mode", "=", "\"border\"", ")", "\n", "", "return", "outputs", "\n", "\n", "", "def", "transformation_from_parameters", "(", "self", ",", "axisangle", ",", "translation", ",", "invert", "=", "False", ")", ":", "\n", "        ", "R", "=", "self", ".", "rot_from_axisangle", "(", "axisangle", ")", "\n", "t", "=", "translation", ".", "clone", "(", ")", "\n", "if", "invert", ":", "\n", "            ", "R", "=", "R", ".", "transpose", "(", "1", ",", "2", ")", "\n", "t", "*=", "-", "1", "\n", "", "T", "=", "self", ".", "get_translation_matrix", "(", "t", ")", "\n", "if", "invert", ":", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.get_translation_matrix": [[203, 212], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "translation_vector.contiguous().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "translation_vector.contiguous"], "methods", ["None"], ["            ", "M", "=", "torch", ".", "matmul", "(", "R", ",", "T", ")", "\n", "", "else", ":", "\n", "            ", "M", "=", "torch", ".", "matmul", "(", "T", ",", "R", ")", "\n", "", "return", "M", "\n", "\n", "", "def", "get_translation_matrix", "(", "self", ",", "translation_vector", ")", ":", "\n", "        ", "T", "=", "torch", ".", "zeros", "(", "translation_vector", ".", "shape", "[", "0", "]", ",", "4", ",", "4", ")", ".", "cuda", "(", ")", "\n", "t", "=", "translation_vector", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "3", ",", "1", ")", "\n", "T", "[", ":", ",", "0", ",", "0", "]", "=", "1", "\n", "T", "[", ":", ",", "1", ",", "1", "]", "=", "1", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.rot_from_axisangle": [[213, 243], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "axis[].unsqueeze", "axis[].unsqueeze", "axis[].unsqueeze", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["T", "[", ":", ",", "2", ",", "2", "]", "=", "1", "\n", "T", "[", ":", ",", "3", ",", "3", "]", "=", "1", "\n", "T", "[", ":", ",", ":", "3", ",", "3", ",", "None", "]", "=", "t", "\n", "return", "T", "\n", "\n", "", "def", "rot_from_axisangle", "(", "self", ",", "vec", ")", ":", "\n", "        ", "angle", "=", "torch", ".", "norm", "(", "vec", ",", "2", ",", "2", ",", "True", ")", "\n", "axis", "=", "vec", "/", "(", "angle", "+", "1e-7", ")", "\n", "ca", "=", "torch", ".", "cos", "(", "angle", ")", "\n", "sa", "=", "torch", ".", "sin", "(", "angle", ")", "\n", "C", "=", "1", "-", "ca", "\n", "x", "=", "axis", "[", "...", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "y", "=", "axis", "[", "...", ",", "1", "]", ".", "unsqueeze", "(", "1", ")", "\n", "z", "=", "axis", "[", "...", ",", "2", "]", ".", "unsqueeze", "(", "1", ")", "\n", "xs", "=", "x", "*", "sa", "\n", "ys", "=", "y", "*", "sa", "\n", "zs", "=", "z", "*", "sa", "\n", "xC", "=", "x", "*", "C", "\n", "yC", "=", "y", "*", "C", "\n", "zC", "=", "z", "*", "C", "\n", "xyC", "=", "x", "*", "yC", "\n", "yzC", "=", "y", "*", "zC", "\n", "zxC", "=", "z", "*", "xC", "\n", "rot", "=", "torch", ".", "zeros", "(", "(", "vec", ".", "shape", "[", "0", "]", ",", "4", ",", "4", ")", ")", ".", "cuda", "(", ")", "\n", "rot", "[", ":", ",", "0", ",", "0", "]", "=", "torch", ".", "squeeze", "(", "x", "*", "xC", "+", "ca", ")", "\n", "rot", "[", ":", ",", "0", ",", "1", "]", "=", "torch", ".", "squeeze", "(", "xyC", "-", "zs", ")", "\n", "rot", "[", ":", ",", "0", ",", "2", "]", "=", "torch", ".", "squeeze", "(", "zxC", "+", "ys", ")", "\n", "rot", "[", ":", ",", "1", ",", "0", "]", "=", "torch", ".", "squeeze", "(", "xyC", "+", "zs", ")", "\n", "rot", "[", ":", ",", "1", ",", "1", "]", "=", "torch", ".", "squeeze", "(", "y", "*", "yC", "+", "ca", ")", "\n", "rot", "[", ":", ",", "1", ",", "2", "]", "=", "torch", ".", "squeeze", "(", "yzC", "-", "xs", ")", "\n", "rot", "[", ":", ",", "2", ",", "0", "]", "=", "torch", ".", "squeeze", "(", "zxC", "-", "ys", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.get_smooth_loss": [[244, 268], ["disp.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "net.mono_fm.gradient", "net.mono_fm.gradient", "net.mono_fm.gradient", "net.mono_fm.gradient", "net.mono_fm.gradient", "net.mono_fm.gradient", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "disp_dx.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "disp_dy.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "disp_dyy.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "disp_dyx.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "img_dx.abs().mean", "img_dy.abs().mean", "disp_dxx.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "disp_dxy.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "img_dyy.abs().mean", "img_dyx.abs().mean", "img_dx.abs", "img_dy.abs", "img_dxx.abs().mean", "img_dxy.abs().mean", "img_dyy.abs", "img_dyx.abs", "img_dxx.abs", "img_dxy.abs"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient"], ["rot", "[", ":", ",", "2", ",", "1", "]", "=", "torch", ".", "squeeze", "(", "yzC", "+", "xs", ")", "\n", "rot", "[", ":", ",", "2", ",", "2", "]", "=", "torch", ".", "squeeze", "(", "z", "*", "zC", "+", "ca", ")", "\n", "rot", "[", ":", ",", "3", ",", "3", "]", "=", "1", "\n", "return", "rot", "\n", "\n", "", "def", "get_smooth_loss", "(", "self", ",", "disp", ",", "img", ")", ":", "\n", "        ", "b", ",", "_", ",", "h", ",", "w", "=", "disp", ".", "size", "(", ")", "\n", "a1", "=", "0.5", "\n", "a2", "=", "0.5", "\n", "img", "=", "F", ".", "interpolate", "(", "img", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'area'", ")", "\n", "\n", "disp_dx", ",", "disp_dy", "=", "self", ".", "gradient", "(", "disp", ")", "\n", "img_dx", ",", "img_dy", "=", "self", ".", "gradient", "(", "img", ")", "\n", "\n", "disp_dxx", ",", "disp_dxy", "=", "self", ".", "gradient", "(", "disp_dx", ")", "\n", "disp_dyx", ",", "disp_dyy", "=", "self", ".", "gradient", "(", "disp_dy", ")", "\n", "\n", "img_dxx", ",", "img_dxy", "=", "self", ".", "gradient", "(", "img_dx", ")", "\n", "img_dyx", ",", "img_dyy", "=", "self", ".", "gradient", "(", "img_dy", ")", "\n", "\n", "smooth1", "=", "torch", ".", "mean", "(", "disp_dx", ".", "abs", "(", ")", "*", "torch", ".", "exp", "(", "-", "a1", "*", "img_dx", ".", "abs", "(", ")", ".", "mean", "(", "1", ",", "True", ")", ")", ")", "+", "torch", ".", "mean", "(", "disp_dy", ".", "abs", "(", ")", "*", "torch", ".", "exp", "(", "-", "a1", "*", "img_dy", ".", "abs", "(", ")", ".", "mean", "(", "1", ",", "True", ")", ")", ")", "\n", "\n", "smooth2", "=", "torch", ".", "mean", "(", "disp_dxx", ".", "abs", "(", ")", "*", "torch", ".", "exp", "(", "-", "a2", "*", "img_dxx", ".", "abs", "(", ")", ".", "mean", "(", "1", ",", "True", ")", ")", ")", "+", "torch", ".", "mean", "(", "disp_dxy", ".", "abs", "(", ")", "*", "torch", ".", "exp", "(", "-", "a2", "*", "img_dxy", ".", "abs", "(", ")", ".", "mean", "(", "1", ",", "True", ")", ")", ")", "+"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.gradient": [[269, 273], ["None"], "methods", ["None"], ["torch", ".", "mean", "(", "disp_dyx", ".", "abs", "(", ")", "*", "torch", ".", "exp", "(", "-", "a2", "*", "img_dyx", ".", "abs", "(", ")", ".", "mean", "(", "1", ",", "True", ")", ")", ")", "+", "torch", ".", "mean", "(", "disp_dyy", ".", "abs", "(", ")", "*", "torch", ".", "exp", "(", "-", "a2", "*", "img_dyy", ".", "abs", "(", ")", ".", "mean", "(", "1", ",", "True", ")", ")", ")", "\n", "\n", "return", "smooth1", "+", "smooth2", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.build_extractor": [[15, 24], ["mono_autoencoder.encoder.Encoder", "torch.load", "torch.load", "torch.load", "mono_autoencoder.encoder.Encoder.state_dict().items", "mono_autoencoder.encoder.Encoder.parameters", "[].copy_", "mono_autoencoder.encoder.Encoder.state_dict", "mono_autoencoder.encoder.Encoder.state_dict"], "function", ["None"], ["\n", "@", "MONO", ".", "register_module", "\n", "class", "mono_fm_joint", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "options", ")", ":", "\n", "        ", "super", "(", "mono_fm_joint", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "options", "\n", "self", ".", "DepthEncoder", "=", "DepthEncoder", "(", "self", ".", "opt", ".", "depth_num_layers", ",", "\n", "self", ".", "opt", ".", "depth_pretrained_path", ")", "\n", "self", ".", "DepthDecoder", "=", "DepthDecoder", "(", "self", ".", "DepthEncoder", ".", "num_ch_enc", ")", "\n", "self", ".", "PoseEncoder", "=", "PoseEncoder", "(", "self", ".", "opt", ".", "pose_num_layers", ",", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.Conv.__init__": [[24, 29], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "layers.autopad", "torch.SiLU", "torch.SiLU", "torch.SiLU", "isinstance", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.autopad"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "feat1", "=", "F", ".", "interpolate", "(", "self", ".", "conv1", "(", "self", ".", "pool1", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat2", "=", "F", ".", "interpolate", "(", "self", ".", "conv2", "(", "self", ".", "pool2", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat3", "=", "F", ".", "interpolate", "(", "self", ".", "conv3", "(", "self", ".", "pool3", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat4", "=", "F", ".", "interpolate", "(", "self", ".", "conv4", "(", "self", ".", "pool4", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.Conv.forward": [[30, 32], ["layers.Conv.act", "layers.Conv.bn", "layers.Conv.conv"], "methods", ["None"], ["return", "torch", ".", "cat", "(", "(", "x", ",", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", ")", ",", "1", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.Conv.fuseforward": [[33, 35], ["layers.Conv.act", "layers.Conv.conv"], "methods", ["None"], ["", "", "def", "disp_to_depth", "(", "disp", ",", "min_depth", ",", "max_depth", ")", ":", "\n", "    ", "min_disp", "=", "1", "/", "max_depth", "#0.01", "\n", "max_disp", "=", "1", "/", "min_depth", "#10", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.Focus.__init__": [[40, 43], ["torch.Module.__init__", "layers.Conv"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["\n", "", "class", "Backproject", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "height", ",", "width", ")", ":", "\n", "        ", "super", "(", "Backproject", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.Focus.forward": [[45, 47], ["layers.Focus.conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.GraphConvolution.__init__": [[55, 65], ["torch.nn.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "layers.GraphConvolution.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "layers.GraphConvolution.register_parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.GraphConvolution.reset_parameters"], ["self", ".", "pix_coords", "=", "torch", ".", "cat", "(", "[", "self", ".", "pix_coords", ",", "self", ".", "ones", "]", ",", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "depth", ",", "inv_K", ")", ":", "\n", "        ", "cam_points", "=", "torch", ".", "matmul", "(", "inv_K", "[", ":", ",", ":", "3", ",", ":", "3", "]", ",", "self", ".", "pix_coords", ".", "cuda", "(", ")", ")", "\n", "cam_points", "=", "depth", ".", "view", "(", "self", ".", "batch_size", ",", "1", ",", "-", "1", ")", "*", "cam_points", "\n", "cam_points", "=", "torch", ".", "cat", "(", "[", "cam_points", ",", "self", ".", "ones", ".", "cuda", "(", ")", "]", ",", "1", ")", "\n", "return", "cam_points", "\n", "\n", "\n", "", "", "class", "Project", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "height", ",", "width", ",", "eps", "=", "1e-7", ")", ":", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.GraphConvolution.reset_parameters": [[66, 71], ["layers.GraphConvolution.weight.data.uniform_", "math.sqrt", "layers.GraphConvolution.bias.data.uniform_", "layers.GraphConvolution.weight.size"], "methods", ["None"], ["        ", "super", "(", "Project", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "eps", "=", "eps", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.GraphConvolution.forward": [[72, 79], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "points", ",", "K", ",", "T", ")", ":", "\n", "        ", "P", "=", "torch", ".", "matmul", "(", "K", ",", "T", ")", "[", ":", ",", ":", "3", ",", ":", "]", "\n", "cam_points", "=", "torch", ".", "matmul", "(", "P", ",", "points", ")", "\n", "pix_coords", "=", "cam_points", "[", ":", ",", ":", "2", ",", ":", "]", "/", "(", "cam_points", "[", ":", ",", "2", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "eps", ")", "\n", "pix_coords", "=", "pix_coords", ".", "view", "(", "self", ".", "batch_size", ",", "2", ",", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "pix_coords", "=", "pix_coords", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "pix_coords", "[", "...", ",", "0", "]", "/=", "self", ".", "width", "-", "1", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.GCN.__init__": [[81, 87], ["torch.Module.__init__", "layers.GraphConvolution", "layers.GraphConvolution"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["pix_coords", "=", "(", "pix_coords", "-", "0.5", ")", "*", "2", "\n", "return", "pix_coords", "\n", "\n", "\n", "", "", "class", "SSIM", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.GCN.forward": [[88, 94], ["print", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "layers.GCN.gc2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "type", "layers.GCN.gc1"], "methods", ["None"], ["self", ".", "mu_x_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "mu_y_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_x_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_y_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_xy_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "refl", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "C1", "=", "0.01", "**", "2", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.PyramidPooling.__init__": [[97, 109], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x", "=", "self", ".", "refl", "(", "x", ")", "\n", "y", "=", "self", ".", "refl", "(", "y", ")", "\n", "mu_x", "=", "self", ".", "mu_x_pool", "(", "x", ")", "\n", "mu_y", "=", "self", ".", "mu_y_pool", "(", "y", ")", "\n", "sigma_x", "=", "self", ".", "sig_x_pool", "(", "x", "**", "2", ")", "-", "mu_x", "**", "2", "\n", "sigma_y", "=", "self", ".", "sig_y_pool", "(", "y", "**", "2", ")", "-", "mu_y", "**", "2", "\n", "sigma_xy", "=", "self", ".", "sig_xy_pool", "(", "x", "*", "y", ")", "-", "mu_x", "*", "mu_y", "\n", "SSIM_n", "=", "(", "2", "*", "mu_x", "*", "mu_y", "+", "self", ".", "C1", ")", "*", "(", "2", "*", "sigma_xy", "+", "self", ".", "C2", ")", "\n", "SSIM_d", "=", "(", "mu_x", "**", "2", "+", "mu_y", "**", "2", "+", "self", ".", "C1", ")", "*", "(", "sigma_x", "+", "sigma_y", "+", "self", ".", "C2", ")", "\n", "return", "torch", ".", "clamp", "(", "(", "1", "-", "SSIM_n", "/", "SSIM_d", ")", "/", "2", ",", "0", ",", "1", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.PyramidPooling.forward": [[110, 117], ["x.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers.PyramidPooling.conv1", "layers.PyramidPooling.conv2", "layers.PyramidPooling.conv3", "layers.PyramidPooling.conv4", "layers.PyramidPooling.pool1", "layers.PyramidPooling.pool2", "layers.PyramidPooling.pool3", "layers.PyramidPooling.pool4"], "methods", ["None"], ["", "", "def", "upsample", "(", "x", ")", ":", "\n", "    ", "return", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "\n", "\n", "", "def", "upshuffle", "(", "in_planes", ",", "upscale_factor", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", "*", "upscale_factor", "**", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.Backproject.__init__": [[128, 142], ["torch.Module.__init__", "numpy.meshgrid", "numpy.stack().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "layers.Backproject.pix_coords.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "numpy.stack", "layers.Backproject.id_coords[].view", "layers.Backproject.id_coords[].view"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["self", ".", "nonlin", "=", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "self", ".", "pad", "(", "out", ")", "\n", "out", "=", "self", ".", "nonlin", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "ConvBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "Conv3x3", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "nonlin", "=", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.Backproject.forward": [[143, 148], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers.Backproject.pix_coords.cuda", "depth.view", "layers.Backproject.ones.cuda"], "methods", ["None"], ["out", "=", "self", ".", "nonlin", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Conv1x1", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bias", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.Project.__init__": [[151, 158], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Conv3x3", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "use_refl", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv3x3", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.Project.forward": [[159, 169], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "pix_coords.permute.permute.view", "pix_coords.permute.permute.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "cam_points[].unsqueeze"], "methods", ["None"], ["if", "use_refl", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "1", ")", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "int", "(", "in_channels", ")", ",", "int", "(", "out_channels", ")", ",", "3", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pad", "(", "x", ")", "\n", "out", "=", "self", ".", "conv", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.SSIM.__init__": [[172, 182], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["        ", "super", "(", "Conv5x5", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "use_refl", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "2", ")", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "int", "(", "in_channels", ")", ",", "int", "(", "out_channels", ")", ",", "5", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pad", "(", "x", ")", "\n", "out", "=", "self", ".", "conv", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.SSIM.forward": [[183, 194], ["layers.SSIM.refl", "layers.SSIM.refl", "layers.SSIM.mu_x_pool", "layers.SSIM.mu_y_pool", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "layers.SSIM.sig_x_pool", "layers.SSIM.sig_y_pool", "layers.SSIM.sig_xy_pool"], "methods", ["None"], ["\n", "", "", "class", "CRPBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "n_stages", ")", ":", "\n", "        ", "super", "(", "CRPBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "n_stages", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "'{}_{}'", ".", "format", "(", "i", "+", "1", ",", "'pointwise'", ")", ",", "Conv1x1", "(", "in_planes", "if", "(", "i", "==", "0", ")", "else", "out_planes", ",", "out_planes", ",", "False", ")", ")", "\n", "", "self", ".", "stride", "=", "1", "\n", "self", ".", "n_stages", "=", "n_stages", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "top", "=", "x", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.DeconvBlock.__init__": [[210, 215], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ELU", "torch.ELU", "torch.ELU"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["rmse_log", "=", "torch", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "abs_rel", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "gt", "-", "pred", ")", "/", "gt", ")", "\n", "sq_rel", "=", "torch", ".", "mean", "(", "(", "gt", "-", "pred", ")", "**", "2", "/", "gt", ")", "\n", "return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", ",", "a1", ",", "a2", ",", "a3", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.DeconvBlock.forward": [[215, 220], ["layers.DeconvBlock.conv", "layers.DeconvBlock.pad", "layers.DeconvBlock.nonlin"], "methods", ["None"], []], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.ConvBlock.__init__": [[223, 227], ["torch.Module.__init__", "layers.Conv3x3", "torch.ELU", "torch.ELU", "torch.ELU"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], []], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.ConvBlock.forward": [[227, 231], ["layers.ConvBlock.conv", "layers.ConvBlock.nonlin"], "methods", ["None"], []], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.Conv1x1.__init__": [[234, 237], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], []], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.Conv1x1.forward": [[237, 240], ["layers.Conv1x1.conv"], "methods", ["None"], []], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.Conv3x3.__init__": [[243, 250], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], []], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.Conv3x3.forward": [[250, 254], ["layers.Conv3x3.pad", "layers.Conv3x3.conv"], "methods", ["None"], []], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.Conv5x5.__init__": [[257, 264], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], []], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.Conv5x5.forward": [[264, 268], ["layers.Conv5x5.pad", "layers.Conv5x5.conv"], "methods", ["None"], []], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.CRPBlock.__init__": [[271, 278], ["torch.Module.__init__", "range", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "setattr", "layers.Conv1x1"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], []], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.CRPBlock.forward": [[279, 286], ["range", "layers.CRPBlock.maxpool", "getattr"], "methods", ["None"], []], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.autopad": [[15, 20], ["isinstance"], "function", ["None"], ["self", ".", "pool3", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "3", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "6", ")", "\n", "\n", "out_channels", "=", "int", "(", "in_channels", "/", "4", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "norm_layer", "(", "out_channels", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "norm_layer", "(", "out_channels", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.disp_to_depth": [[119, 125], ["None"], "function", ["None"], ["nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "\n", "", "class", "DeconvBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "DeconvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upsample": [[196, 198], ["torch.interpolate"], "function", ["None"], ["            ", "top", "=", "self", ".", "maxpool", "(", "top", ")", "\n", "top", "=", "getattr", "(", "self", ",", "'{}_{}'", ".", "format", "(", "i", "+", "1", ",", "'pointwise'", ")", ")", "(", "top", ")", "\n", "x", "=", "top", "+", "x", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.upshuffle": [[200, 206], ["torch.Sequential", "torch.ReflectionPad2d", "torch.Conv2d", "torch.PixelShuffle", "torch.ELU"], "function", ["None"], ["\n", "\n", "", "", "def", "compute_depth_errors", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "thresh", "=", "torch", ".", "max", "(", "(", "gt", "/", "pred", ")", ",", "(", "pred", "/", "gt", ")", ")", "\n", "a1", "=", "(", "thresh", "<", "1.25", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "thresh", "<", "1.25", "**", "2", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "thresh", "<", "1.25", "**", "3", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.layers.compute_depth_errors": [[288, 300], ["torch.max", "torch.max", "torch.max", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt.mean", "torch.sqrt.mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], []], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.BasicBlock.__init__": [[19, 28], ["torch.Module.__init__", "resnet.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv3x3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "bn", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "bn", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.BasicBlock.forward": [[29, 46], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.Bottleneck.__init__": [[51, 62], ["torch.Module.__init__", "resnet.conv1x1", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "resnet.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "resnet.conv1x1", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv1x1", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv3x3", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "bn", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "bn", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "bn", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.Bottleneck.forward": [[63, 84], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet.__init__": [[88, 108], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "bn", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "bn", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer": [[109, 124], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "bn", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet.forward": [[125, 137], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv3x3": [[6, 9], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.conv1x1": [[11, 14], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.resnet18": [[139, 149], ["resnet.ResNet", "ResNet.load_state_dict", "print", "torch.load", "torch.load"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pretrained_path", ")", ")", "\n", "print", "(", "'Loaded pre-trained weights'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.resnet34": [[151, 161], ["resnet.ResNet", "ResNet.load_state_dict", "print", "torch.load", "torch.load", "os.join"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained_path", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "osp", ".", "join", "(", "pretrained_path", ",", "'resnet34.pth'", ")", ")", ")", "\n", "print", "(", "'Loaded pre-trained weights'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.resnet50": [[163, 173], ["resnet.ResNet", "ResNet.load_state_dict", "print", "torch.load", "torch.load", "os.join"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained_path", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "osp", ".", "join", "(", "pretrained_path", ",", "'resnet50.pth'", ")", ")", ")", "\n", "print", "(", "'Loaded pre-trained weights'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.resnet101": [[175, 185], ["resnet.ResNet", "ResNet.load_state_dict", "print", "torch.load", "torch.load", "os.join"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained_path", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "osp", ".", "join", "(", "pretrained_path", ",", "'resnet101.pth'", ")", ")", ")", "\n", "print", "(", "'Loaded pre-trained weights'", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.pose_decoder.PoseDecoder.__init__": [[6, 15], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_ch_enc", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PoseDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "reduce", "=", "nn", ".", "Conv2d", "(", "num_ch_enc", "[", "-", "1", "]", ",", "256", ",", "1", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "stride", ",", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "stride", ",", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "256", ",", "6", ",", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.pose_decoder.PoseDecoder.forward": [[16, 27], ["pose_decoder.PoseDecoder.relu", "pose_decoder.PoseDecoder.relu", "pose_decoder.PoseDecoder.relu", "pose_decoder.PoseDecoder.conv3", "out.mean().mean.mean().mean.mean().mean", "pose_decoder.PoseDecoder.reduce", "pose_decoder.PoseDecoder.conv1", "pose_decoder.PoseDecoder.conv2", "out.mean().mean.mean().mean.view", "out.mean().mean.mean().mean.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_features", ")", ":", "\n", "        ", "f", "=", "input_features", "[", "-", "1", "]", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "reduce", "(", "f", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "out", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "out", "=", "0.01", "*", "out", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "6", ")", "\n", "axisangle", "=", "out", "[", "...", ",", ":", "3", "]", "\n", "translation", "=", "out", "[", "...", ",", "3", ":", "]", "\n", "return", "axisangle", ",", "translation", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.pose_encoder.ResNetMultiImageInput.__init__": [[12, 30], ["resnet.ResNet.__init__", "torch.Conv2d", "torch.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "pose_encoder.ResNetMultiImageInput._make_layer", "pose_encoder.ResNetMultiImageInput._make_layer", "pose_encoder.ResNetMultiImageInput._make_layer", "pose_encoder.ResNetMultiImageInput._make_layer", "pose_encoder.ResNetMultiImageInput.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "num_input_images", "=", "2", ")", ":", "\n", "        ", "super", "(", "ResNetMultiImageInput", ",", "self", ")", ".", "__init__", "(", "block", ",", "layers", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_input_images", "*", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "bn", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.pose_encoder.PoseEncoder.__init__": [[53, 76], ["torch.Module.__init__", "numpy.array", "ValueError", "pose_encoder.resnet_multiimage_input", "torch.load", "torch.load", "torch.load", "torch.load", "pose_encoder.PoseEncoder.encoder.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.pose_encoder.resnet_multiimage_input"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "pretrained_path", "=", "None", ",", "num_input_images", "=", "2", ")", ":", "\n", "        ", "super", "(", "PoseEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_ch_enc", "=", "np", ".", "array", "(", "[", "64", ",", "64", ",", "128", ",", "256", ",", "512", "]", ")", "\n", "\n", "resnets", "=", "{", "18", ":", "resnet18", ",", "\n", "34", ":", "resnet34", ",", "\n", "50", ":", "resnet50", ",", "\n", "101", ":", "resnet101", ",", "}", "\n", "\n", "if", "num_layers", "not", "in", "resnets", ":", "\n", "            ", "raise", "ValueError", "(", "\"{} is not a valid number of resnet layers\"", ".", "format", "(", "num_layers", ")", ")", "\n", "\n", "", "if", "num_input_images", ">", "1", ":", "\n", "            ", "self", ".", "encoder", "=", "resnet_multiimage_input", "(", "num_layers", ",", "num_input_images", ",", "pretrained_path", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "encoder", "=", "resnets", "[", "num_layers", "]", "(", ")", "\n", "if", "pretrained_path", "is", "not", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "pretrained_path", ")", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "", "", "if", "num_layers", ">", "34", ":", "\n", "            ", "self", ".", "num_ch_enc", "[", "1", ":", "]", "*=", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.pose_encoder.PoseEncoder.forward": [[81, 93], ["pose_encoder.PoseEncoder.encoder.conv1", "pose_encoder.PoseEncoder.encoder.bn1", "pose_encoder.PoseEncoder.features.append", "pose_encoder.PoseEncoder.features.append", "pose_encoder.PoseEncoder.features.append", "pose_encoder.PoseEncoder.features.append", "pose_encoder.PoseEncoder.features.append", "pose_encoder.PoseEncoder.encoder.relu", "pose_encoder.PoseEncoder.encoder.layer1", "pose_encoder.PoseEncoder.encoder.layer2", "pose_encoder.PoseEncoder.encoder.layer3", "pose_encoder.PoseEncoder.encoder.layer4", "pose_encoder.PoseEncoder.encoder.maxpool"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_image", ")", ":", "\n", "        ", "self", ".", "features", "=", "[", "]", "\n", "x", "=", "(", "input_image", "-", "0.45", ")", "/", "0.225", "\n", "x", "=", "self", ".", "encoder", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "encoder", ".", "bn1", "(", "x", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "relu", "(", "x", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer1", "(", "self", ".", "encoder", ".", "maxpool", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer2", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer3", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer4", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "\n", "return", "self", ".", "features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.pose_encoder.resnet_multiimage_input": [[32, 50], ["pose_encoder.ResNetMultiImageInput", "torch.load", "torch.load", "ResNetMultiImageInput.load_state_dict", "pose_encoder.ResNetMultiImageInput", "torch.cat", "torch.cat"], "function", ["None"], ["", "", "", "", "def", "resnet_multiimage_input", "(", "num_layers", ",", "num_input_images", "=", "2", ",", "pretrained_path", "=", "None", ")", ":", "\n", "    ", "assert", "num_layers", "in", "[", "18", ",", "34", ",", "50", ",", "101", "]", ",", "\"Can only run with 18, 34, 50, 101 layers resnet\"", "\n", "blocks", "=", "{", "18", ":", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "34", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "50", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "101", ":", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "}", "[", "num_layers", "]", "\n", "\n", "if", "num_layers", "<", "40", ":", "\n", "        ", "model", "=", "ResNetMultiImageInput", "(", "BasicBlock", ",", "blocks", ",", "num_input_images", "=", "num_input_images", ")", "\n", "", "elif", "num_layers", ">", "40", ":", "\n", "        ", "model", "=", "ResNetMultiImageInput", "(", "Bottleneck", ",", "blocks", ",", "num_input_images", "=", "num_input_images", ")", "\n", "\n", "", "if", "pretrained_path", "is", "not", "None", ":", "\n", "        ", "loaded", "=", "torch", ".", "load", "(", "pretrained_path", ")", "\n", "loaded", "[", "'conv1.weight'", "]", "=", "torch", ".", "cat", "(", "[", "loaded", "[", "'conv1.weight'", "]", "]", "*", "num_input_images", ",", "1", ")", "/", "num_input_images", "\n", "model", ".", "load_state_dict", "(", "loaded", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.utils.dist_utils.DistOptimizerHook.__init__": [[49, 53], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "grad_clip", "=", "None", ",", "coalesce", "=", "True", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "grad_clip", "=", "grad_clip", "\n", "self", ".", "coalesce", "=", "coalesce", "\n", "self", ".", "bucket_size_mb", "=", "bucket_size_mb", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.utils.dist_utils.DistOptimizerHook.after_train_iter": [[54, 61], ["runner.optimizer.zero_grad", "runner.outputs[].backward", "dist_utils.allreduce_grads", "runner.optimizer.step", "dist_utils.DistOptimizerHook.clip_grads", "runner.model.parameters"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.utils.dist_utils.allreduce_grads"], ["", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "runner", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "runner", ".", "outputs", "[", "'loss'", "]", ".", "backward", "(", ")", "\n", "allreduce_grads", "(", "runner", ".", "model", ",", "self", ".", "coalesce", ",", "self", ".", "bucket_size_mb", ")", "\n", "if", "self", ".", "grad_clip", "is", "not", "None", ":", "\n", "            ", "self", ".", "clip_grads", "(", "runner", ".", "model", ".", "parameters", "(", ")", ")", "\n", "", "runner", ".", "optimizer", ".", "step", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.utils.dist_utils._allreduce_coalesced": [[12, 32], ["torch._utils._take_tensors", "collections.OrderedDict", "buckets.values.values", "torch._utils._flatten_dense_tensors", "torch.all_reduce", "torch._utils._flatten_dense_tensors.div_", "zip", "tensor.type", "buckets[].append", "torch._utils._unflatten_dense_tensors", "tensor.copy_"], "function", ["None"], ["def", "_allreduce_coalesced", "(", "tensors", ",", "world_size", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "    ", "if", "bucket_size_mb", ">", "0", ":", "\n", "        ", "bucket_size_bytes", "=", "bucket_size_mb", "*", "1024", "*", "1024", "\n", "buckets", "=", "_take_tensors", "(", "tensors", ",", "bucket_size_bytes", ")", "\n", "", "else", ":", "\n", "        ", "buckets", "=", "OrderedDict", "(", ")", "\n", "for", "tensor", "in", "tensors", ":", "\n", "            ", "tp", "=", "tensor", ".", "type", "(", ")", "\n", "if", "tp", "not", "in", "buckets", ":", "\n", "                ", "buckets", "[", "tp", "]", "=", "[", "]", "\n", "", "buckets", "[", "tp", "]", ".", "append", "(", "tensor", ")", "\n", "", "buckets", "=", "buckets", ".", "values", "(", ")", "\n", "\n", "", "for", "bucket", "in", "buckets", ":", "\n", "        ", "flat_tensors", "=", "_flatten_dense_tensors", "(", "bucket", ")", "\n", "dist", ".", "all_reduce", "(", "flat_tensors", ")", "\n", "flat_tensors", ".", "div_", "(", "world_size", ")", "\n", "for", "tensor", ",", "synced", "in", "zip", "(", "\n", "bucket", ",", "_unflatten_dense_tensors", "(", "flat_tensors", ",", "bucket", ")", ")", ":", "\n", "            ", "tensor", ".", "copy_", "(", "synced", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.utils.dist_utils.allreduce_grads": [[34, 45], ["torch.get_world_size", "dist_utils._allreduce_coalesced", "model.parameters", "torch.all_reduce", "tensor.div_"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.utils.dist_utils._allreduce_coalesced"], ["", "", "", "def", "allreduce_grads", "(", "model", ",", "coalesce", "=", "True", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "    ", "grads", "=", "[", "\n", "param", ".", "grad", ".", "data", "for", "param", "in", "model", ".", "parameters", "(", ")", "\n", "if", "param", ".", "requires_grad", "and", "param", ".", "grad", "is", "not", "None", "\n", "]", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "coalesce", ":", "\n", "        ", "_allreduce_coalesced", "(", "grads", ",", "world_size", ",", "bucket_size_mb", ")", "\n", "", "else", ":", "\n", "        ", "for", "tensor", "in", "grads", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "tensor", ".", "div_", "(", "world_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.utils.misc.tensor2imgs": [[12, 23], ["tensor.size", "numpy.array", "numpy.array", "range", "tensor[].cpu().numpy().transpose", "mmcv.imdenormalize().astype", "imgs.append", "numpy.ascontiguousarray", "tensor[].cpu().numpy", "mmcv.imdenormalize", "tensor[].cpu"], "function", ["None"], ["def", "tensor2imgs", "(", "tensor", ",", "mean", "=", "(", "0", ",", "0", ",", "0", ")", ",", "std", "=", "(", "1", ",", "1", ",", "1", ")", ",", "to_rgb", "=", "True", ")", ":", "\n", "    ", "num_imgs", "=", "tensor", ".", "size", "(", "0", ")", "\n", "mean", "=", "np", ".", "array", "(", "mean", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "std", "=", "np", ".", "array", "(", "std", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "imgs", "=", "[", "]", "\n", "for", "img_id", "in", "range", "(", "num_imgs", ")", ":", "\n", "        ", "img", "=", "tensor", "[", "img_id", ",", "...", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "img", "=", "mmcv", ".", "imdenormalize", "(", "\n", "img", ",", "mean", ",", "std", ",", "to_bgr", "=", "to_rgb", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imgs", ".", "append", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", "\n", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.utils.misc.multi_apply": [[25, 29], ["six.moves.map", "tuple", "functools.partial", "six.moves.map", "six.moves.zip"], "function", ["None"], ["", "def", "multi_apply", "(", "func", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "pfunc", "=", "partial", "(", "func", ",", "**", "kwargs", ")", "if", "kwargs", "else", "func", "\n", "map_results", "=", "map", "(", "pfunc", ",", "*", "args", ")", "\n", "return", "tuple", "(", "map", "(", "list", ",", "zip", "(", "*", "map_results", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.utils.misc.unmap": [[31, 42], ["data.dim", "data.new_full", "data.new_full", "data.size"], "function", ["None"], ["", "def", "unmap", "(", "data", ",", "count", ",", "inds", ",", "fill", "=", "0", ")", ":", "\n", "    ", "\"\"\" Unmap a subset of item (data) back to the original set of items (of\n    size count) \"\"\"", "\n", "if", "data", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "ret", "=", "data", ".", "new_full", "(", "(", "count", ",", ")", ",", "fill", ")", "\n", "ret", "[", "inds", "]", "=", "data", "\n", "", "else", ":", "\n", "        ", "new_size", "=", "(", "count", ",", ")", "+", "data", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "ret", "=", "data", ".", "new_full", "(", "new_size", ",", "fill", ")", "\n", "ret", "[", "inds", ",", ":", "]", "=", "data", "\n", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.eval_hooks.NonDistEvalHook.__init__": [[28, 34], ["isinstance", "cfg.get", "cfg.get"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "cfg", ")", ":", "\n", "        ", "assert", "isinstance", "(", "dataset", ",", "Dataset", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "interval", "=", "cfg", ".", "get", "(", "'interval'", ",", "1", ")", "\n", "self", ".", "out_path", "=", "cfg", ".", "get", "(", "'work_dir'", ",", "'./'", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.eval_hooks.NonDistEvalHook.after_train_epoch": [[35, 95], ["print", "pixel_error.AverageMeter", "pixel_error.AverageMeter", "pixel_error.AverageMeter", "pixel_error.AverageMeter", "pixel_error.AverageMeter", "pixel_error.AverageMeter", "pixel_error.AverageMeter", "runner.model.eval", "range", "print", "eval_hooks.NonDistEvalHook.every_n_epochs", "eval_hooks.NonDistEvalHook.dataset.__len__", "eval_hooks.change_input_variable", "eval_hooks.unsqueeze_input_variable", "pixel_error.disp_to_depth", "[].numpy", "[].numpy", "cv2.resize", "np.logical_and", "np.array().astype", "np.zeros", "np.logical_and", "pixel_error.compute_errors", "pixel_error.AverageMeter.update", "pixel_error.AverageMeter.update", "pixel_error.AverageMeter.update", "pixel_error.AverageMeter.update", "pixel_error.AverageMeter.update", "pixel_error.AverageMeter.update", "pixel_error.AverageMeter.update", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "runner.model", "np.median", "np.median", "np.array", "cv2.resize.cpu", "data[].cpu"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.eval", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.loader.sampler.DistributedGroupSampler.__len__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.eval_hooks.change_input_variable", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.eval_hooks.unsqueeze_input_variable", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.disp_to_depth", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.compute_errors", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update"], ["", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "print", "(", "'evaluation..............................................'", ")", "\n", "\n", "abs_rel", "=", "AverageMeter", "(", ")", "\n", "sq_rel", "=", "AverageMeter", "(", ")", "\n", "rmse", "=", "AverageMeter", "(", ")", "\n", "rmse_log", "=", "AverageMeter", "(", ")", "\n", "a1", "=", "AverageMeter", "(", ")", "\n", "a2", "=", "AverageMeter", "(", ")", "\n", "a3", "=", "AverageMeter", "(", ")", "\n", "\n", "if", "not", "self", ".", "every_n_epochs", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "", "runner", ".", "model", ".", "eval", "(", ")", "\n", "\n", "for", "idx", "in", "range", "(", "self", ".", "dataset", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "data", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "data", "=", "change_input_variable", "(", "data", ")", "\n", "data", "=", "unsqueeze_input_variable", "(", "data", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "result", "=", "runner", ".", "model", "(", "data", ")", "\n", "\n", "", "disp", "=", "result", "[", "(", "\"disp\"", ",", "0", ",", "0", ")", "]", "\n", "pred_disp", ",", "_", "=", "disp_to_depth", "(", "disp", ")", "\n", "pred_disp", "=", "pred_disp", ".", "cpu", "(", ")", "[", "0", ",", "0", "]", ".", "numpy", "(", ")", "\n", "\n", "gt_depth", "=", "data", "[", "'gt_depth'", "]", ".", "cpu", "(", ")", "[", "0", "]", ".", "numpy", "(", ")", "\n", "gt_height", ",", "gt_width", "=", "gt_depth", ".", "shape", "[", ":", "2", "]", "\n", "\n", "pred_disp", "=", "cv2", ".", "resize", "(", "pred_disp", ",", "(", "gt_width", ",", "gt_height", ")", ")", "\n", "pred_depth", "=", "1", "/", "pred_disp", "\n", "\n", "mask", "=", "np", ".", "logical_and", "(", "gt_depth", ">", "MIN_DEPTH", ",", "gt_depth", "<", "MAX_DEPTH", ")", "\n", "crop", "=", "np", ".", "array", "(", "[", "0.40810811", "*", "gt_height", ",", "0.99189189", "*", "gt_height", ",", "\n", "0.03594771", "*", "gt_width", ",", "0.96405229", "*", "gt_width", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "crop_mask", "=", "np", ".", "zeros", "(", "mask", ".", "shape", ")", "\n", "crop_mask", "[", "crop", "[", "0", "]", ":", "crop", "[", "1", "]", ",", "crop", "[", "2", "]", ":", "crop", "[", "3", "]", "]", "=", "1", "\n", "mask", "=", "np", ".", "logical_and", "(", "mask", ",", "crop_mask", ")", "\n", "\n", "pred_depth", "=", "pred_depth", "[", "mask", "]", "\n", "gt_depth", "=", "gt_depth", "[", "mask", "]", "\n", "\n", "ratio", "=", "np", ".", "median", "(", "gt_depth", ")", "/", "np", ".", "median", "(", "pred_depth", ")", "\n", "pred_depth", "*=", "ratio", "\n", "\n", "pred_depth", "[", "pred_depth", "<", "MIN_DEPTH", "]", "=", "MIN_DEPTH", "\n", "pred_depth", "[", "pred_depth", ">", "MAX_DEPTH", "]", "=", "MAX_DEPTH", "\n", "\n", "abs_rel_", ",", "sq_rel_", ",", "rmse_", ",", "rmse_log_", ",", "a1_", ",", "a2_", ",", "a3_", "=", "compute_errors", "(", "gt_depth", ",", "pred_depth", ")", "\n", "\n", "abs_rel", ".", "update", "(", "abs_rel_", ")", "\n", "sq_rel", ".", "update", "(", "sq_rel_", ")", "\n", "rmse", ".", "update", "(", "rmse_", ")", "\n", "rmse_log", ".", "update", "(", "rmse_log_", ")", "\n", "a1", ".", "update", "(", "a1_", ")", "\n", "a2", ".", "update", "(", "a2_", ")", "\n", "a3", ".", "update", "(", "a3_", ")", "\n", "print", "(", "'a1_ is '", ",", "a1_", ")", "\n", "\n", "", "print", "(", "'a1 is '", ",", "a1", ".", "avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.eval_hooks.DistEvalHook.__init__": [[98, 103], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "interval", "=", "1", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "assert", "isinstance", "(", "dataset", ",", "Dataset", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "interval", "=", "interval", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.eval_hooks.DistEvalHook.after_train_epoch": [[104, 201], ["print", "runner.model.eval", "range", "torch.barrier", "torch.barrier", "eval_hooks.DistEvalHook.every_n_epochs", "mmcv.ProgressBar", "len", "eval_hooks.change_input_variable", "pixel_error.disp_to_depth", "[].numpy", "data[].cpu().numpy", "cv2.resize", "np.logical_and", "np.array().astype", "np.zeros", "np.logical_and", "pixel_error.compute_errors", "print", "print", "print", "torch.barrier", "torch.barrier", "range", "eval_hooks.DistEvalHook.evaluate", "os.join", "os.join", "mmcv.dump", "torch.barrier", "torch.barrier", "range", "len", "mmcv.parallel.scatter", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "cv2.getTickCount", "runner.model", "cv2.getTickCount", "np.median", "np.median", "range", "os.join", "os.join", "mmcv.load", "range", "os.remove", "os.remove", "os.remove", "os.remove", "len", "mmcv.parallel.collate", "cv2.getTickFrequency", "data[].cpu", "np.array", "mmcv.ProgressBar.update", "len", "len", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "cv2.resize.cpu"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.eval", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.eval_hooks.change_input_variable", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.disp_to_depth", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.compute_errors", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.scripts.eval_depth.evaluate", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update"], ["", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "print", "(", "'evaluation..............................................'", ")", "\n", "\n", "if", "not", "self", ".", "every_n_epochs", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "", "runner", ".", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", "]", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "self", ".", "dataset", ")", ")", "\n", "\n", "", "t", "=", "0", "\n", "for", "idx", "in", "range", "(", "runner", ".", "rank", ",", "len", "(", "self", ".", "dataset", ")", ",", "runner", ".", "world_size", ")", ":", "\n", "            ", "data", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "data", "=", "change_input_variable", "(", "data", ")", "\n", "\n", "data_gpu", "=", "scatter", "(", "collate", "(", "[", "data", "]", ",", "samples_per_gpu", "=", "1", ")", ",", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ")", "[", "0", "]", "\n", "\n", "# compute output", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "t1", "=", "cv2", ".", "getTickCount", "(", ")", "\n", "result", "=", "runner", ".", "model", "(", "data_gpu", ")", "\n", "t2", "=", "cv2", ".", "getTickCount", "(", ")", "\n", "t", "+=", "cv2", ".", "getTickFrequency", "(", ")", "/", "(", "t2", "-", "t1", ")", "\n", "\n", "", "disp", "=", "result", "[", "(", "\"disp\"", ",", "0", ",", "0", ")", "]", "\n", "\n", "pred_disp", ",", "_", "=", "disp_to_depth", "(", "disp", ")", "\n", "pred_disp", "=", "pred_disp", ".", "cpu", "(", ")", "[", "0", ",", "0", "]", ".", "numpy", "(", ")", "\n", "\n", "gt_depth", "=", "data", "[", "'gt_depth'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gt_height", ",", "gt_width", "=", "gt_depth", ".", "shape", "[", ":", "2", "]", "\n", "\n", "pred_disp", "=", "cv2", ".", "resize", "(", "pred_disp", ",", "(", "gt_width", ",", "gt_height", ")", ")", "\n", "pred_depth", "=", "1", "/", "pred_disp", "\n", "\n", "mask", "=", "np", ".", "logical_and", "(", "gt_depth", ">", "MIN_DEPTH", ",", "gt_depth", "<", "MAX_DEPTH", ")", "\n", "crop", "=", "np", ".", "array", "(", "[", "0.40810811", "*", "gt_height", ",", "0.99189189", "*", "gt_height", ",", "\n", "0.03594771", "*", "gt_width", ",", "0.96405229", "*", "gt_width", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "crop_mask", "=", "np", ".", "zeros", "(", "mask", ".", "shape", ")", "\n", "crop_mask", "[", "crop", "[", "0", "]", ":", "crop", "[", "1", "]", ",", "crop", "[", "2", "]", ":", "crop", "[", "3", "]", "]", "=", "1", "\n", "mask", "=", "np", ".", "logical_and", "(", "mask", ",", "crop_mask", ")", "\n", "\n", "pred_depth", "=", "pred_depth", "[", "mask", "]", "\n", "gt_depth", "=", "gt_depth", "[", "mask", "]", "\n", "\n", "ratio", "=", "np", ".", "median", "(", "gt_depth", ")", "/", "np", ".", "median", "(", "pred_depth", ")", "\n", "if", "self", ".", "cfg", ".", "data", "[", "'stereo_scale'", "]", ":", "\n", "                ", "pred_depth", "*=", "36", "\n", "", "else", ":", "\n", "                ", "pred_depth", "*=", "ratio", "\n", "\n", "", "pred_depth", "[", "pred_depth", "<", "MIN_DEPTH", "]", "=", "MIN_DEPTH", "\n", "pred_depth", "[", "pred_depth", ">", "MAX_DEPTH", "]", "=", "MAX_DEPTH", "\n", "\n", "abs_rel_", ",", "sq_rel_", ",", "rmse_", ",", "rmse_log_", ",", "a1_", ",", "a2_", ",", "a3_", "=", "compute_errors", "(", "gt_depth", ",", "pred_depth", ")", "\n", "# if runner.rank == 0:", "\n", "#     if idx % 5 == 0:", "\n", "#         img_path = os.path.join(self.cfg.work_dir, 'visual_{:0>4d}.png'.format(idx))", "\n", "#         vmax = np.percentile(pred_disp, 95)", "\n", "#         plt.imsave(img_path, pred_disp, cmap='magma', vmax=vmax)", "\n", "\n", "result", "=", "{", "}", "\n", "result", "[", "'abs_rel'", "]", "=", "abs_rel_", "\n", "result", "[", "'sq_rel'", "]", "=", "sq_rel_", "\n", "result", "[", "'rmse'", "]", "=", "rmse_", "\n", "result", "[", "'rmse_log'", "]", "=", "rmse_log_", "\n", "result", "[", "'a1'", "]", "=", "a1_", "\n", "result", "[", "'a2'", "]", "=", "a2_", "\n", "result", "[", "'a3'", "]", "=", "a3_", "\n", "result", "[", "'scale'", "]", "=", "ratio", "\n", "results", "[", "idx", "]", "=", "result", "\n", "\n", "batch_size", "=", "runner", ".", "world_size", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "                ", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "\n", "", "", "", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "'\\n'", ")", "\n", "print", "(", "'FPS:'", ",", "t", "/", "len", "(", "self", ".", "dataset", ")", ")", "\n", "\n", "print", "(", "'\\n'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "runner", ".", "world_size", ")", ":", "\n", "                ", "tmp_file", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'temp_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "tmp_results", "=", "mmcv", ".", "load", "(", "tmp_file", ")", "\n", "for", "idx", "in", "range", "(", "i", ",", "len", "(", "results", ")", ",", "runner", ".", "world_size", ")", ":", "\n", "                    ", "results", "[", "idx", "]", "=", "tmp_results", "[", "idx", "]", "\n", "", "os", ".", "remove", "(", "tmp_file", ")", "\n", "", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "", "else", ":", "\n", "            ", "tmp_file", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "\n", "'temp_{}.pkl'", ".", "format", "(", "runner", ".", "rank", ")", ")", "\n", "mmcv", ".", "dump", "(", "results", ",", "tmp_file", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.eval_hooks.DistEvalHook.evaluate": [[202, 204], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "runner", ",", "results", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.eval_hooks.DistEvalMonoHook.evaluate": [[207, 246], ["mmcv.is_str", "pixel_error.AverageMeter", "pixel_error.AverageMeter", "pixel_error.AverageMeter", "pixel_error.AverageMeter", "pixel_error.AverageMeter", "pixel_error.AverageMeter", "pixel_error.AverageMeter", "pixel_error.AverageMeter", "print", "np.std", "mmcv.load.endswith", "mmcv.load", "mmcv.load.__len__", "pixel_error.AverageMeter.update", "pixel_error.AverageMeter.update", "pixel_error.AverageMeter.update", "pixel_error.AverageMeter.update", "pixel_error.AverageMeter.update", "pixel_error.AverageMeter.update", "pixel_error.AverageMeter.update", "pixel_error.AverageMeter.update", "ratio.append", "isinstance", "TypeError", "type"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.loader.sampler.DistributedGroupSampler.__len__", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update"], ["    ", "def", "evaluate", "(", "self", ",", "runner", ",", "results", ")", ":", "\n", "        ", "if", "mmcv", ".", "is_str", "(", "results", ")", ":", "\n", "            ", "assert", "results", ".", "endswith", "(", "'.pkl'", ")", "\n", "results", "=", "mmcv", ".", "load", "(", "results", ")", "\n", "", "elif", "not", "isinstance", "(", "results", ",", "list", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'results must be a list of numpy arrays or a filename, not {}'", ".", "format", "(", "type", "(", "results", ")", ")", ")", "\n", "\n", "", "abs_rel", "=", "AverageMeter", "(", ")", "\n", "sq_rel", "=", "AverageMeter", "(", ")", "\n", "rmse", "=", "AverageMeter", "(", ")", "\n", "rmse_log", "=", "AverageMeter", "(", ")", "\n", "a1", "=", "AverageMeter", "(", ")", "\n", "a2", "=", "AverageMeter", "(", ")", "\n", "a3", "=", "AverageMeter", "(", ")", "\n", "scale", "=", "AverageMeter", "(", ")", "\n", "\n", "print", "(", "'results len is '", ",", "results", ".", "__len__", "(", ")", ")", "\n", "ratio", "=", "[", "]", "\n", "for", "result", "in", "results", ":", "\n", "            ", "abs_rel", ".", "update", "(", "result", "[", "'abs_rel'", "]", ")", "\n", "sq_rel", ".", "update", "(", "result", "[", "'sq_rel'", "]", ")", "\n", "rmse", ".", "update", "(", "result", "[", "'rmse'", "]", ")", "\n", "rmse_log", ".", "update", "(", "result", "[", "'rmse_log'", "]", ")", "\n", "a1", ".", "update", "(", "result", "[", "'a1'", "]", ")", "\n", "a2", ".", "update", "(", "result", "[", "'a2'", "]", ")", "\n", "a3", ".", "update", "(", "result", "[", "'a3'", "]", ")", "\n", "scale", ".", "update", "(", "result", "[", "'scale'", "]", ")", "\n", "ratio", ".", "append", "(", "result", "[", "'scale'", "]", ")", "\n", "\n", "", "runner", ".", "log_buffer", ".", "output", "[", "'abs_rel'", "]", "=", "abs_rel", ".", "avg", "\n", "runner", ".", "log_buffer", ".", "output", "[", "'sq_rel'", "]", "=", "sq_rel", ".", "avg", "\n", "runner", ".", "log_buffer", ".", "output", "[", "'rmse'", "]", "=", "rmse", ".", "avg", "\n", "runner", ".", "log_buffer", ".", "output", "[", "'rmse_log'", "]", "=", "rmse_log", ".", "avg", "\n", "runner", ".", "log_buffer", ".", "output", "[", "'a1'", "]", "=", "a1", ".", "avg", "\n", "runner", ".", "log_buffer", ".", "output", "[", "'a2'", "]", "=", "a2", ".", "avg", "\n", "runner", ".", "log_buffer", ".", "output", "[", "'a3'", "]", "=", "a3", ".", "avg", "\n", "runner", ".", "log_buffer", ".", "output", "[", "'scale mean'", "]", "=", "scale", ".", "avg", "\n", "runner", ".", "log_buffer", ".", "output", "[", "'scale std'", "]", "=", "np", ".", "std", "(", "ratio", ")", "\n", "runner", ".", "log_buffer", ".", "ready", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.eval_hooks.change_input_variable": [[17, 21], ["data.items", "torch.as_tensor().float", "torch.as_tensor().float", "torch.as_tensor", "torch.as_tensor"], "function", ["None"], ["def", "change_input_variable", "(", "data", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", ":", "\n", "        ", "data", "[", "k", "]", "=", "torch", ".", "as_tensor", "(", "v", ")", ".", "float", "(", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.eval_hooks.unsqueeze_input_variable": [[22, 26], ["data.items", "torch.unsqueeze", "torch.unsqueeze"], "function", ["None"], ["", "def", "unsqueeze_input_variable", "(", "data", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", ":", "\n", "        ", "data", "[", "k", "]", "=", "torch", ".", "unsqueeze", "(", "v", ",", "dim", "=", "0", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.__init__": [[11, 13], ["pixel_error.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.reset": [[14, 19], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.AverageMeter.update": [[20, 25], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.compute_errors": [[27, 41], ["numpy.maximum", "numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.mean", "np.sqrt.mean", "np.sqrt.mean", "numpy.log", "numpy.log", "numpy.abs"], "function", ["None"], ["", "", "def", "compute_errors", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\"Computation of error metrics between predicted and ground truth depths\n    \"\"\"", "\n", "thresh", "=", "np", ".", "maximum", "(", "(", "gt", "/", "pred", ")", ",", "(", "pred", "/", "gt", ")", ")", "\n", "a1", "=", "(", "thresh", "<", "1.25", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "thresh", "<", "1.25", "**", "2", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "thresh", "<", "1.25", "**", "3", ")", ".", "mean", "(", ")", "\n", "rmse", "=", "(", "gt", "-", "pred", ")", "**", "2", "\n", "rmse", "=", "np", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "rmse_log", "=", "(", "np", ".", "log", "(", "gt", ")", "-", "np", ".", "log", "(", "pred", ")", ")", "**", "2", "\n", "rmse_log", "=", "np", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "abs_rel", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "gt", "-", "pred", ")", "/", "gt", ")", "\n", "sq_rel", "=", "np", ".", "mean", "(", "(", "(", "gt", "-", "pred", ")", "**", "2", ")", "/", "gt", ")", "\n", "return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", ",", "a1", ",", "a2", ",", "a3", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.disp_to_depth": [[43, 49], ["None"], "function", ["None"], ["", "def", "disp_to_depth", "(", "disp", ",", "min_depth", "=", "0.1", ",", "max_depth", "=", "100", ")", ":", "\n", "    ", "min_disp", "=", "1", "/", "max_depth", "#0.01", "\n", "max_disp", "=", "1", "/", "min_depth", "#10", "\n", "scaled_disp", "=", "min_disp", "+", "(", "max_disp", "-", "min_disp", ")", "*", "disp", "#(10-0.01)*disp+0.01", "\n", "depth", "=", "1", "/", "scaled_disp", "\n", "return", "scaled_disp", ",", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.scripts.draw_odometry.odo": [[20, 88], ["torch.utils.data.DataLoader", "mono.model.mono_baseline.pose_encoder.PoseEncoder", "mono.model.mono_baseline.pose_decoder.PoseDecoder", "torch.load", "mono.model.mono_baseline.pose_encoder.PoseEncoder.state_dict().items", "mono.model.mono_baseline.pose_decoder.PoseDecoder.state_dict().items", "mono.model.mono_baseline.pose_encoder.PoseEncoder.cuda", "mono.model.mono_baseline.pose_encoder.PoseEncoder.eval", "mono.model.mono_baseline.pose_decoder.PoseDecoder.cuda", "mono.model.mono_baseline.pose_decoder.PoseDecoder.eval", "numpy.identity", "numpy.concatenate", "numpy.savetxt", "print", "mono.datasets.utils.readlines", "mono.datasets.kitti_dataset.KITTIOdomDataset", "mono.datasets.euroc_dataset.FolderDataset", "[].copy_", "[].copy_", "global_pose[].reshape", "torch.no_grad", "enumerate", "os.path.join", "os.path.join", "mono.tools.kitti_evaluation_toolkit.kittiOdomEval", "mono.tools.kitti_evaluation_toolkit.kittiOdomEval.eval", "mono.model.mono_baseline.pose_encoder.PoseEncoder.state_dict", "mono.model.mono_baseline.pose_decoder.PoseDecoder.state_dict", "inputs.items", "torch.cat", "mono.model.mono_baseline.pose_decoder.PoseDecoder.", "mono.datasets.utils.transformation_from_parameters", "mono.datasets.utils.transformation_from_parameters.squeeze().cpu().numpy", "np.concatenate.append", "ipt.cuda", "mono.model.mono_baseline.pose_encoder.PoseEncoder.", "numpy.linalg.inv", "global_pose[].reshape", "mono.model.mono_baseline.pose_encoder.PoseEncoder.state_dict", "mono.model.mono_baseline.pose_decoder.PoseDecoder.state_dict", "mono.datasets.utils.transformation_from_parameters.squeeze().cpu", "mono.datasets.utils.transformation_from_parameters.squeeze"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.eval", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.eval", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.readlines", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.eval", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.transformation_from_parameters"], ["def", "odo", "(", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "kitti", ":", "\n", "        ", "filenames", "=", "readlines", "(", "\"../mono/datasets/splits/odom/test_files_{:02d}.txt\"", ".", "format", "(", "opt", ".", "sequence_id", ")", ")", "\n", "\n", "dataset", "=", "KITTIOdomDataset", "(", "opt", ".", "data_path", ",", "\n", "filenames", ",", "\n", "opt", ".", "height", ",", "\n", "opt", ".", "width", ",", "\n", "[", "0", ",", "1", "]", ",", "\n", "is_train", "=", "False", ",", "\n", "img_ext", "=", "'.png'", ",", "\n", "gt_depth_path", "=", "None", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "FolderDataset", "(", "opt", ".", "data_path", ",", "\n", "None", ",", "\n", "opt", ".", "height", ",", "\n", "opt", ".", "width", ",", "\n", "[", "0", ",", "1", "]", ",", "\n", "is_train", "=", "False", ",", "\n", "img_ext", "=", "'.png'", ",", "\n", "gt_depth_path", "=", "None", ")", "\n", "\n", "", "dataloader", "=", "DataLoader", "(", "dataset", ",", "\n", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "pose_encoder", "=", "PoseEncoder", "(", "18", ",", "None", ",", "2", ")", "\n", "pose_decoder", "=", "PoseDecoder", "(", "pose_encoder", ".", "num_ch_enc", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "opt", ".", "model_path", ")", "\n", "for", "name", ",", "param", "in", "pose_encoder", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "pose_encoder", ".", "state_dict", "(", ")", "[", "name", "]", ".", "copy_", "(", "checkpoint", "[", "'state_dict'", "]", "[", "'PoseEncoder.'", "+", "name", "]", ")", "\n", "", "for", "name", ",", "param", "in", "pose_decoder", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "pose_decoder", ".", "state_dict", "(", ")", "[", "name", "]", ".", "copy_", "(", "checkpoint", "[", "'state_dict'", "]", "[", "'PoseDecoder.'", "+", "name", "]", ")", "\n", "", "pose_encoder", ".", "cuda", "(", ")", "\n", "pose_encoder", ".", "eval", "(", ")", "\n", "pose_decoder", ".", "cuda", "(", ")", "\n", "pose_decoder", ".", "eval", "(", ")", "\n", "\n", "global_pose", "=", "np", ".", "identity", "(", "4", ")", "\n", "poses", "=", "[", "global_pose", "[", "0", ":", "3", ",", ":", "]", ".", "reshape", "(", "1", ",", "12", ")", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "inputs", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "            ", "for", "key", ",", "ipt", "in", "inputs", ".", "items", "(", ")", ":", "\n", "                ", "inputs", "[", "key", "]", "=", "ipt", ".", "cuda", "(", ")", "\n", "", "all_color_aug", "=", "torch", ".", "cat", "(", "[", "inputs", "[", "(", "\"color_aug\"", ",", "i", ",", "0", ")", "]", "for", "i", "in", "[", "0", ",", "1", "]", "]", ",", "1", ")", "\n", "axisangle", ",", "translation", "=", "pose_decoder", "(", "pose_encoder", "(", "all_color_aug", ")", ")", "\n", "g", "=", "transformation_from_parameters", "(", "axisangle", "[", ":", ",", "0", "]", ",", "translation", "[", ":", ",", "0", "]", ")", "\n", "backward_transform", "=", "g", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "#the transformation from frame +1 to frame 0", "\n", "global_pose", "=", "global_pose", "@", "np", ".", "linalg", ".", "inv", "(", "backward_transform", ")", "\n", "poses", ".", "append", "(", "global_pose", "[", "0", ":", "3", ",", ":", "]", ".", "reshape", "(", "1", ",", "12", ")", ")", "\n", "", "", "poses", "=", "np", ".", "concatenate", "(", "poses", ",", "axis", "=", "0", ")", "\n", "\n", "if", "opt", ".", "kitti", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "result_dir", ",", "\"{:02d}_pred.txt\"", ".", "format", "(", "opt", ".", "sequence_id", ")", ")", "\n", "", "else", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "result_dir", ",", "\"fm_ms_euroc_mh04_diff_3.txt\"", ")", "\n", "\n", "", "np", ".", "savetxt", "(", "filename", ",", "poses", ",", "delimiter", "=", "' '", ",", "fmt", "=", "'%1.8e'", ")", "\n", "if", "opt", ".", "kitti", ":", "\n", "        ", "opt", ".", "eva_seqs", "=", "'{:02d}_pred'", ".", "format", "(", "opt", ".", "sequence_id", ")", "\n", "pose_eval", "=", "kittiOdomEval", "(", "opt", ")", "\n", "pose_eval", ".", "eval", "(", "toCameraCoord", "=", "False", ")", "# set the value according to the predicted results", "\n", "", "print", "(", "'saving into '", ",", "opt", ".", "result_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.scripts.infer_singleimage.evaluate": [[22, 67], ["mono.datasets.utils.readlines", "mmcv.Config.fromfile", "mono.datasets.kitti_dataset.KITTIRAWDataset", "torch.utils.data.DataLoader", "torch.load", "model.load_state_dict", "model.cuda", "model.eval", "print", "torch.no_grad", "enumerate", "inputs.items", "model", "os.path.join", "matplotlib.imsave", "mono.model.mono_baseline.layers.disp_to_depth", "pred_disp[].cpu().numpy", "cv2.resize", "os.path.join", "numpy.percentile", "matplotlib.imsave", "ipt.cuda", "[].squeeze().transpose().transpose().cpu().numpy", "pred_disp[].cpu", "[].squeeze().transpose().transpose().cpu", "[].squeeze().transpose().transpose", "[].squeeze().transpose", "[].squeeze"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.readlines", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.eval", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.disp_to_depth"], ["def", "evaluate", "(", "cfg_path", ",", "model_path", ",", "gt_path", ",", "output_path", ")", ":", "\n", "    ", "filenames", "=", "readlines", "(", "\"../mono/datasets/splits/exp/val_files.txt\"", ")", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "cfg_path", ")", "\n", "\n", "dataset", "=", "KITTIRAWDataset", "(", "cfg", ".", "data", "[", "'in_path'", "]", ",", "\n", "filenames", ",", "\n", "cfg", ".", "data", "[", "'height'", "]", ",", "\n", "cfg", ".", "data", "[", "'width'", "]", ",", "\n", "[", "0", "]", ",", "\n", "is_train", "=", "False", ",", "\n", "gt_depth_path", "=", "gt_path", ")", "\n", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "\n", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "cfg", ".", "model", "[", "'imgs_per_gpu'", "]", "=", "1", "\n", "model", "=", "MONO", ".", "module_dict", "[", "cfg", ".", "model", "[", "'name'", "]", "]", "(", "cfg", ".", "model", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "inputs", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "            ", "for", "key", ",", "ipt", "in", "inputs", ".", "items", "(", ")", ":", "\n", "                ", "inputs", "[", "key", "]", "=", "ipt", ".", "cuda", "(", ")", "\n", "", "outputs", "=", "model", "(", "inputs", ")", "\n", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "'img_{:0>4d}.jpg'", ".", "format", "(", "batch_idx", ")", ")", "\n", "plt", ".", "imsave", "(", "img_path", ",", "inputs", "[", "(", "\"color\"", ",", "0", ",", "0", ")", "]", "[", "0", "]", ".", "squeeze", "(", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "disp", "=", "outputs", "[", "(", "\"disp\"", ",", "0", ",", "0", ")", "]", "\n", "pred_disp", ",", "_", "=", "disp_to_depth", "(", "disp", ",", "0.1", ",", "100", ")", "\n", "pred_disp", "=", "pred_disp", "[", "0", ",", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_disp", "=", "cv2", ".", "resize", "(", "pred_disp", ",", "(", "cfg", ".", "data", "[", "'width'", "]", ",", "cfg", ".", "data", "[", "'height'", "]", ")", ")", "\n", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "'disp_{:0>4d}.jpg'", ".", "format", "(", "batch_idx", ")", ")", "\n", "vmax", "=", "np", ".", "percentile", "(", "pred_disp", ",", "95", ")", "\n", "plt", ".", "imsave", "(", "img_path", ",", "pred_disp", ",", "cmap", "=", "'magma'", ",", "vmax", "=", "vmax", ")", "\n", "\n", "", "", "print", "(", "\"\\n-> Done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.scripts.eval_depth_pp.batch_post_process_disparity": [[22, 29], ["numpy.meshgrid", "numpy.linspace", "numpy.linspace", "numpy.clip"], "function", ["None"], ["def", "batch_post_process_disparity", "(", "l_disp", ",", "r_disp", ")", ":", "\n", "    ", "_", ",", "h", ",", "w", "=", "l_disp", ".", "shape", "\n", "m_disp", "=", "0.5", "*", "(", "l_disp", "+", "r_disp", ")", "\n", "l", ",", "_", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "w", ")", ",", "np", ".", "linspace", "(", "0", ",", "1", ",", "h", ")", ")", "\n", "l_mask", "=", "(", "1.0", "-", "np", ".", "clip", "(", "20", "*", "(", "l", "-", "0.05", ")", ",", "0", ",", "1", ")", ")", "[", "None", ",", "...", "]", "\n", "r_mask", "=", "l_mask", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "return", "r_mask", "*", "l_disp", "+", "l_mask", "*", "r_disp", "+", "(", "1.0", "-", "l_mask", "-", "r_mask", ")", "*", "m_disp", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.scripts.eval_depth_pp.evaluate": [[30, 120], ["mono.datasets.utils.readlines", "mmcv.Config.fromfile", "mono.datasets.kitti_dataset.KITTIRAWDataset", "torch.utils.data.DataLoader", "torch.load", "model.load_state_dict", "model.cuda", "model.eval", "numpy.concatenate", "print", "range", "numpy.array", "numpy.median", "numpy.array().mean", "print", "print", "print", "print", "torch.no_grad", "enumerate", "numpy.load", "print", "print", "cv2.resize", "numpy.logical_and", "numpy.array().astype", "numpy.zeros", "numpy.logical_and", "np.array.append", "errors.append", "print", "inputs.items", "model", "mono.model.mono_baseline.layers.disp_to_depth", "[].numpy", "np.concatenate.append", "numpy.median", "numpy.median", "mono.datasets.utils.compute_errors", "numpy.array", "numpy.std", "ipt.cuda", "numpy.array", "np.array().mean.tolist", "[].numpy.cpu"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.readlines", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.eval", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.disp_to_depth", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.compute_errors"], ["", "def", "evaluate", "(", "MODEL_PATH", ",", "CFG_PATH", ",", "GT_PATH", ")", ":", "\n", "    ", "filenames", "=", "readlines", "(", "\"../mono/datasets/splits/exp/val_files.txt\"", ")", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "CFG_PATH", ")", "\n", "\n", "dataset", "=", "KITTIRAWDataset", "(", "cfg", ".", "data", "[", "'in_path'", "]", ",", "\n", "filenames", ",", "\n", "cfg", ".", "data", "[", "'height'", "]", ",", "\n", "cfg", ".", "data", "[", "'width'", "]", ",", "\n", "[", "0", "]", ",", "\n", "is_train", "=", "False", ",", "\n", "gt_depth_path", "=", "None", ")", "\n", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "\n", "2", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "1", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "cfg", ".", "model", "[", "'imgs_per_gpu'", "]", "=", "2", "\n", "model", "=", "MONO", ".", "module_dict", "[", "cfg", ".", "model", "[", "'name'", "]", "]", "(", "cfg", ".", "model", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "MODEL_PATH", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "strict", "=", "True", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "pred_disps", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "inputs", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "            ", "print", "(", "batch_idx", ")", "\n", "for", "key", ",", "ipt", "in", "inputs", ".", "items", "(", ")", ":", "\n", "                ", "inputs", "[", "key", "]", "=", "ipt", ".", "cuda", "(", ")", "\n", "\n", "", "outputs", "=", "model", "(", "inputs", ")", "\n", "\n", "disp", "=", "outputs", "[", "(", "\"disp\"", ",", "0", ",", "0", ")", "]", "\n", "# N = pred_disp.shape[0] // 2", "\n", "# pred_disp = batch_post_process_disparity(pred_disp[:N], pred_disp[N:, :, ::-1])", "\n", "pred_disp", ",", "_", "=", "disp_to_depth", "(", "disp", ",", "0.1", ",", "100", ")", "\n", "pred_disp", "=", "pred_disp", ".", "cpu", "(", ")", "[", ":", ",", "0", "]", ".", "numpy", "(", ")", "\n", "pred_disps", ".", "append", "(", "pred_disp", ")", "\n", "", "", "pred_disps", "=", "np", ".", "concatenate", "(", "pred_disps", ")", "\n", "\n", "gt_depths", "=", "np", ".", "load", "(", "GT_PATH", ",", "allow_pickle", "=", "True", ",", "fix_imports", "=", "True", ",", "encoding", "=", "'latin1'", ")", "[", "\"data\"", "]", "\n", "\n", "print", "(", "\"-> Evaluating\"", ")", "\n", "if", "cfg", ".", "data", "[", "'stereo_scale'", "]", ":", "\n", "        ", "print", "(", "'using baseline'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'using mean scaling'", ")", "\n", "\n", "", "errors", "=", "[", "]", "\n", "ratios", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "pred_disps", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "gt_depth", "=", "gt_depths", "[", "i", "]", "\n", "gt_height", ",", "gt_width", "=", "gt_depth", ".", "shape", "[", ":", "2", "]", "\n", "\n", "pred_disp", "=", "pred_disps", "[", "i", "]", "\n", "pred_disp", "=", "cv2", ".", "resize", "(", "pred_disp", ",", "(", "gt_width", ",", "gt_height", ")", ")", "\n", "\n", "pred_depth", "=", "1", "/", "pred_disp", "\n", "\n", "mask", "=", "np", ".", "logical_and", "(", "gt_depth", ">", "MIN_DEPTH", ",", "gt_depth", "<", "MAX_DEPTH", ")", "\n", "crop", "=", "np", ".", "array", "(", "[", "0.40810811", "*", "gt_height", ",", "0.99189189", "*", "gt_height", ",", "\n", "0.03594771", "*", "gt_width", ",", "0.96405229", "*", "gt_width", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "crop_mask", "=", "np", ".", "zeros", "(", "mask", ".", "shape", ")", "\n", "crop_mask", "[", "crop", "[", "0", "]", ":", "crop", "[", "1", "]", ",", "crop", "[", "2", "]", ":", "crop", "[", "3", "]", "]", "=", "1", "\n", "mask", "=", "np", ".", "logical_and", "(", "mask", ",", "crop_mask", ")", "\n", "\n", "pred_depth", "=", "pred_depth", "[", "mask", "]", "\n", "gt_depth", "=", "gt_depth", "[", "mask", "]", "\n", "\n", "ratio", "=", "np", ".", "median", "(", "gt_depth", ")", "/", "np", ".", "median", "(", "pred_depth", ")", "\n", "ratios", ".", "append", "(", "ratio", ")", "\n", "\n", "if", "cfg", ".", "data", "[", "'stereo_scale'", "]", ":", "\n", "            ", "ratio", "=", "STEREO_SCALE_FACTOR", "\n", "\n", "", "pred_depth", "*=", "ratio", "\n", "pred_depth", "[", "pred_depth", "<", "MIN_DEPTH", "]", "=", "MIN_DEPTH", "\n", "pred_depth", "[", "pred_depth", ">", "MAX_DEPTH", "]", "=", "MAX_DEPTH", "\n", "errors", ".", "append", "(", "compute_errors", "(", "gt_depth", ",", "pred_depth", ")", ")", "\n", "\n", "", "ratios", "=", "np", ".", "array", "(", "ratios", ")", "\n", "med", "=", "np", ".", "median", "(", "ratios", ")", "\n", "mean_errors", "=", "np", ".", "array", "(", "errors", ")", ".", "mean", "(", "0", ")", "\n", "print", "(", "\"Scaling ratios | med: {:0.3f} | std: {:0.3f}\"", ".", "format", "(", "med", ",", "np", ".", "std", "(", "ratios", "/", "med", ")", ")", ")", "\n", "print", "(", "\"\\n\"", "+", "(", "\"{:>}| \"", "*", "7", ")", ".", "format", "(", "\"abs_rel\"", ",", "\"sq_rel\"", ",", "\"rmse\"", ",", "\"rmse_log\"", ",", "\"a1\"", ",", "\"a2\"", ",", "\"a3\"", ")", ")", "\n", "print", "(", "(", "\"&{:.3f} \"", "*", "7", ")", ".", "format", "(", "*", "mean_errors", ".", "tolist", "(", ")", ")", "+", "\"\\\\\\\\\"", ")", "\n", "print", "(", "\"\\n-> Done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.scripts.eval_pose.evaluate": [[19, 83], ["mono.datasets.utils.readlines", "mono.datasets.kitti_dataset.KITTIOdomDataset", "torch.utils.data.DataLoader", "mono.model.mono_fm.pose_encoder.PoseEncoder", "mono.model.mono_fm.pose_decoder.PoseDecoder", "torch.load", "mono.model.mono_fm.pose_encoder.PoseEncoder.state_dict().items", "mono.model.mono_fm.pose_decoder.PoseDecoder.state_dict().items", "mono.model.mono_fm.pose_encoder.PoseEncoder.cuda", "mono.model.mono_fm.pose_encoder.PoseEncoder.eval", "mono.model.mono_fm.pose_decoder.PoseDecoder.cuda", "mono.model.mono_fm.pose_decoder.PoseDecoder.eval", "print", "numpy.concatenate", "os.path.join", "numpy.loadtxt().reshape", "numpy.concatenate", "range", "range", "print", "[].copy_", "[].copy_", "torch.no_grad", "len", "gt_local_poses.append", "numpy.array", "numpy.array", "ates.append", "mono.model.mono_fm.pose_encoder.PoseEncoder.state_dict", "mono.model.mono_fm.pose_decoder.PoseDecoder.state_dict", "inputs.items", "torch.cat", "mono.model.mono_fm.pose_encoder.PoseEncoder.", "mono.model.mono_fm.pose_decoder.PoseDecoder.", "np.concatenate.append", "numpy.loadtxt", "numpy.zeros", "numpy.linalg.inv", "mono.datasets.utils.dump_xyz", "mono.datasets.utils.dump_xyz", "mono.datasets.utils.compute_ate", "numpy.mean", "numpy.std", "ipt.cuda", "mono.datasets.utils.transformation_from_parameters().cpu().numpy", "numpy.dot", "mono.model.mono_fm.pose_encoder.PoseEncoder.state_dict", "mono.model.mono_fm.pose_decoder.PoseDecoder.state_dict", "numpy.linalg.inv", "mono.datasets.utils.transformation_from_parameters().cpu", "mono.datasets.utils.transformation_from_parameters"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.readlines", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.eval", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.eval", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.dump_xyz", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.dump_xyz", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.pose_evaluation_utils.compute_ate", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.mono_fm.net.mono_fm.transformation_from_parameters"], ["def", "evaluate", "(", "data_path", ",", "model_path", ",", "sequence_id", ",", "height", ",", "width", ")", ":", "\n", "    ", "filenames", "=", "readlines", "(", "\"../mono/datasets/splits/odom/test_files_{:02d}.txt\"", ".", "format", "(", "sequence_id", ")", ")", "\n", "\n", "dataset", "=", "KITTIOdomDataset", "(", "data_path", ",", "\n", "filenames", ",", "\n", "height", ",", "\n", "width", ",", "\n", "[", "0", ",", "1", "]", ",", "\n", "is_train", "=", "False", ",", "\n", "img_ext", "=", "'.png'", ",", "\n", "gt_depth_path", "=", "None", ")", "\n", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "\n", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "\n", "pose_encoder", "=", "PoseEncoder", "(", "18", ",", "None", ",", "2", ")", "\n", "pose_decoder", "=", "PoseDecoder", "(", "pose_encoder", ".", "num_ch_enc", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "for", "name", ",", "param", "in", "pose_encoder", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "pose_encoder", ".", "state_dict", "(", ")", "[", "name", "]", ".", "copy_", "(", "checkpoint", "[", "'state_dict'", "]", "[", "'PoseEncoder.'", "+", "name", "]", ")", "\n", "", "for", "name", ",", "param", "in", "pose_decoder", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "pose_decoder", ".", "state_dict", "(", ")", "[", "name", "]", ".", "copy_", "(", "checkpoint", "[", "'state_dict'", "]", "[", "'PoseDecoder.'", "+", "name", "]", ")", "\n", "", "pose_encoder", ".", "cuda", "(", ")", "\n", "pose_encoder", ".", "eval", "(", ")", "\n", "pose_decoder", ".", "cuda", "(", ")", "\n", "pose_decoder", ".", "eval", "(", ")", "\n", "\n", "pred_poses", "=", "[", "]", "\n", "\n", "print", "(", "\"-> Computing pose predictions\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "inputs", "in", "dataloader", ":", "\n", "            ", "for", "key", ",", "ipt", "in", "inputs", ".", "items", "(", ")", ":", "\n", "                ", "inputs", "[", "key", "]", "=", "ipt", ".", "cuda", "(", ")", "\n", "", "all_color_aug", "=", "torch", ".", "cat", "(", "[", "inputs", "[", "(", "\"color_aug\"", ",", "i", ",", "0", ")", "]", "for", "i", "in", "[", "0", ",", "1", "]", "]", ",", "1", ")", "\n", "features", "=", "pose_encoder", "(", "all_color_aug", ")", "\n", "axisangle", ",", "translation", "=", "pose_decoder", "(", "features", ")", "\n", "pred_poses", ".", "append", "(", "transformation_from_parameters", "(", "axisangle", "[", ":", ",", "0", "]", ",", "translation", "[", ":", ",", "0", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "pred_poses", "=", "np", ".", "concatenate", "(", "pred_poses", ")", "\n", "\n", "gt_poses_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"poses\"", ",", "\"{:02d}.txt\"", ".", "format", "(", "sequence_id", ")", ")", "\n", "gt_global_poses", "=", "np", ".", "loadtxt", "(", "gt_poses_path", ")", ".", "reshape", "(", "-", "1", ",", "3", ",", "4", ")", "\n", "gt_global_poses", "=", "np", ".", "concatenate", "(", "(", "gt_global_poses", ",", "np", ".", "zeros", "(", "(", "gt_global_poses", ".", "shape", "[", "0", "]", ",", "1", ",", "4", ")", ")", ")", ",", "1", ")", "\n", "gt_global_poses", "[", ":", ",", "3", ",", "3", "]", "=", "1", "\n", "gt_xyzs", "=", "gt_global_poses", "[", ":", ",", ":", "3", ",", "3", "]", "\n", "gt_local_poses", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "gt_global_poses", ")", ")", ":", "\n", "        ", "gt_local_poses", ".", "append", "(", "np", ".", "linalg", ".", "inv", "(", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "gt_global_poses", "[", "i", "-", "1", "]", ")", ",", "gt_global_poses", "[", "i", "]", ")", ")", ")", "\n", "\n", "", "ates", "=", "[", "]", "\n", "num_frames", "=", "gt_xyzs", ".", "shape", "[", "0", "]", "\n", "track_length", "=", "5", "\n", "for", "i", "in", "range", "(", "0", ",", "num_frames", "-", "1", ")", ":", "\n", "        ", "local_xyzs", "=", "np", ".", "array", "(", "dump_xyz", "(", "pred_poses", "[", "i", ":", "i", "+", "track_length", "-", "1", "]", ")", ")", "\n", "gt_local_xyzs", "=", "np", ".", "array", "(", "dump_xyz", "(", "gt_local_poses", "[", "i", ":", "i", "+", "track_length", "-", "1", "]", ")", ")", "\n", "ates", ".", "append", "(", "compute_ate", "(", "gt_local_xyzs", ",", "local_xyzs", ")", ")", "\n", "\n", "", "print", "(", "\"\\n  odom_{} Trajectory error: {:0.3f}, std: {:0.3f}\\n\"", ".", "format", "(", "sequence_id", ",", "np", ".", "mean", "(", "ates", ")", ",", "np", ".", "std", "(", "ates", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.scripts.infer.transform": [[25, 31], ["torch.from_numpy().cuda().unsqueeze", "torch.nn.functional.interpolate.permute().contiguous", "torch.nn.functional.interpolate", "torch.from_numpy().cuda", "torch.nn.functional.interpolate.permute", "torch.from_numpy", "cv2_img.astype"], "function", ["None"], ["def", "transform", "(", "cv2_img", ",", "height", "=", "320", ",", "width", "=", "1024", ")", ":", "\n", "    ", "im_tensor", "=", "torch", ".", "from_numpy", "(", "cv2_img", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "im_tensor", "=", "im_tensor", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "im_tensor", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "im_tensor", ",", "[", "height", ",", "width", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "im_tensor", "/=", "255", "\n", "return", "im_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.scripts.infer.predict": [[32, 47], ["infer.transform", "torch.nn.functional.interpolate", "torch.no_grad", "model", "torch.nn.functional.interpolate.squeeze().cpu().numpy", "torch.nn.functional.interpolate.squeeze().cpu", "torch.nn.functional.interpolate.squeeze().cpu().numpy", "torch.nn.functional.interpolate.squeeze", "torch.nn.functional.interpolate.squeeze().cpu", "torch.nn.functional.interpolate.squeeze"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.scripts.infer.transform"], ["", "def", "predict", "(", "cv2_img", ",", "model", ")", ":", "\n", "    ", "original_height", ",", "original_width", "=", "cv2_img", ".", "shape", "[", ":", "2", "]", "\n", "im_tensor", "=", "transform", "(", "cv2_img", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "input", "=", "{", "}", "\n", "input", "[", "'color_aug'", ",", "0", ",", "0", "]", "=", "im_tensor", "\n", "outputs", "=", "model", "(", "input", ")", "\n", "\n", "", "disp", "=", "outputs", "[", "(", "\"disp\"", ",", "0", ",", "0", ")", "]", "\n", "disp_resized", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "disp", ",", "(", "original_height", ",", "original_width", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "min_disp", "=", "1", "/", "MAX_DEPTH", "\n", "max_disp", "=", "1", "/", "MIN_DEPTH", "\n", "depth", "=", "1", "/", "(", "disp_resized", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "max_disp", "+", "min_disp", ")", "*", "SCALE", "\n", "return", "depth", ",", "disp_resized", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.scripts.infer.evaluate": [[48, 69], ["mmcv.Config.fromfile", "torch.load", "model.load_state_dict", "model.cuda", "model.eval", "print", "torch.no_grad", "cv2.imread", "cv2.cvtColor", "infer.predict", "numpy.percentile", "matplotlib.imsave"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.eval", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.scripts.infer.predict"], ["", "def", "evaluate", "(", "cfg_path", ",", "model_path", ",", "img_path", ",", "output_path", ")", ":", "\n", "    ", "cfg", "=", "Config", ".", "fromfile", "(", "cfg_path", ")", "\n", "cfg", "[", "'model'", "]", "[", "'depth_pretrained_path'", "]", "=", "None", "\n", "cfg", "[", "'model'", "]", "[", "'pose_pretrained_path'", "]", "=", "None", "\n", "cfg", "[", "'model'", "]", "[", "'extractor_pretrained_path'", "]", "=", "None", "\n", "model", "=", "MONO", ".", "module_dict", "[", "cfg", ".", "model", "[", "'name'", "]", "]", "(", "cfg", ".", "model", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "strict", "=", "True", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "cv2_img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "cv2_img", "=", "cv2", ".", "cvtColor", "(", "cv2_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "depth", ",", "disp_resized", "=", "predict", "(", "cv2_img", ",", "model", ")", "\n", "\n", "vmax", "=", "np", ".", "percentile", "(", "disp_resized", ",", "95", ")", "\n", "plt", ".", "imsave", "(", "output_path", ",", "disp_resized", ",", "cmap", "=", "'magma'", ",", "vmax", "=", "vmax", ")", "\n", "\n", "", "print", "(", "\"\\n-> Done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.scripts.eval_depth.evaluate": [[22, 109], ["mono.datasets.utils.readlines", "mmcv.Config.fromfile", "mono.datasets.kitti_dataset.KITTIRAWDataset", "torch.utils.data.DataLoader", "torch.load", "model.load_state_dict", "model.cuda", "model.eval", "numpy.concatenate", "print", "range", "numpy.array", "numpy.median", "numpy.array().mean", "print", "print", "print", "print", "torch.no_grad", "enumerate", "numpy.load", "print", "print", "cv2.resize", "numpy.logical_and", "numpy.array().astype", "numpy.zeros", "numpy.logical_and", "np.array.append", "errors.append", "inputs.items", "model", "mono.model.mono_baseline.layers.disp_to_depth", "[].numpy", "np.concatenate.append", "numpy.median", "numpy.median", "mono.datasets.utils.compute_errors", "numpy.array", "numpy.std", "ipt.cuda", "numpy.array", "np.array().mean.tolist", "[].numpy.cpu"], "function", ["home.repos.pwc.inspect_result.arminmasoumian_gcndepth.datasets.utils.readlines", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.tools.kitti_evaluation_toolkit.kittiOdomEval.eval", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.disp_to_depth", "home.repos.pwc.inspect_result.arminmasoumian_gcndepth.evaluation.pixel_error.compute_errors"], ["def", "evaluate", "(", "MODEL_PATH", ",", "CFG_PATH", ",", "GT_PATH", ")", ":", "\n", "    ", "filenames", "=", "readlines", "(", "\"../mono/datasets/splits/exp/val_files.txt\"", ")", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "CFG_PATH", ")", "\n", "\n", "dataset", "=", "KITTIRAWDataset", "(", "cfg", ".", "data", "[", "'in_path'", "]", ",", "\n", "filenames", ",", "\n", "cfg", ".", "data", "[", "'height'", "]", ",", "\n", "cfg", ".", "data", "[", "'width'", "]", ",", "\n", "[", "0", "]", ",", "\n", "is_train", "=", "False", ",", "\n", "gt_depth_path", "=", "GT_PATH", ")", "\n", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "\n", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "cfg", ".", "model", "[", "'imgs_per_gpu'", "]", "=", "1", "\n", "model", "=", "MONO", ".", "module_dict", "[", "cfg", ".", "model", "[", "'name'", "]", "]", "(", "cfg", ".", "model", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "MODEL_PATH", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "strict", "=", "True", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "pred_disps", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "inputs", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "            ", "for", "key", ",", "ipt", "in", "inputs", ".", "items", "(", ")", ":", "\n", "                ", "inputs", "[", "key", "]", "=", "ipt", ".", "cuda", "(", ")", "\n", "", "outputs", "=", "model", "(", "inputs", ")", "\n", "\n", "disp", "=", "outputs", "[", "(", "\"disp\"", ",", "0", ",", "0", ")", "]", "\n", "\n", "pred_disp", ",", "_", "=", "disp_to_depth", "(", "disp", ",", "0.1", ",", "100", ")", "\n", "pred_disp", "=", "pred_disp", ".", "cpu", "(", ")", "[", ":", ",", "0", "]", ".", "numpy", "(", ")", "\n", "pred_disps", ".", "append", "(", "pred_disp", ")", "\n", "", "", "pred_disps", "=", "np", ".", "concatenate", "(", "pred_disps", ")", "\n", "\n", "gt_depths", "=", "np", ".", "load", "(", "GT_PATH", ",", "allow_pickle", "=", "True", ",", "fix_imports", "=", "True", ",", "encoding", "=", "'latin1'", ")", "[", "\"data\"", "]", "\n", "\n", "print", "(", "\"-> Evaluating\"", ")", "\n", "if", "cfg", ".", "data", "[", "'stereo_scale'", "]", ":", "\n", "        ", "print", "(", "'using baseline'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'using mean scaling'", ")", "\n", "\n", "", "errors", "=", "[", "]", "\n", "ratios", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "pred_disps", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "gt_depth", "=", "gt_depths", "[", "i", "]", "\n", "gt_height", ",", "gt_width", "=", "gt_depth", ".", "shape", "[", ":", "2", "]", "\n", "\n", "pred_disp", "=", "pred_disps", "[", "i", "]", "\n", "pred_disp", "=", "cv2", ".", "resize", "(", "pred_disp", ",", "(", "gt_width", ",", "gt_height", ")", ")", "\n", "\n", "pred_depth", "=", "1", "/", "pred_disp", "\n", "\n", "mask", "=", "np", ".", "logical_and", "(", "gt_depth", ">", "MIN_DEPTH", ",", "gt_depth", "<", "MAX_DEPTH", ")", "\n", "crop", "=", "np", ".", "array", "(", "[", "0.40810811", "*", "gt_height", ",", "0.99189189", "*", "gt_height", ",", "\n", "0.03594771", "*", "gt_width", ",", "0.96405229", "*", "gt_width", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "crop_mask", "=", "np", ".", "zeros", "(", "mask", ".", "shape", ")", "\n", "crop_mask", "[", "crop", "[", "0", "]", ":", "crop", "[", "1", "]", ",", "crop", "[", "2", "]", ":", "crop", "[", "3", "]", "]", "=", "1", "\n", "mask", "=", "np", ".", "logical_and", "(", "mask", ",", "crop_mask", ")", "\n", "\n", "pred_depth", "=", "pred_depth", "[", "mask", "]", "\n", "gt_depth", "=", "gt_depth", "[", "mask", "]", "\n", "\n", "ratio", "=", "np", ".", "median", "(", "gt_depth", ")", "/", "np", ".", "median", "(", "pred_depth", ")", "\n", "ratios", ".", "append", "(", "ratio", ")", "\n", "\n", "if", "cfg", ".", "data", "[", "'stereo_scale'", "]", ":", "\n", "            ", "ratio", "=", "STEREO_SCALE_FACTOR", "\n", "\n", "", "pred_depth", "*=", "ratio", "\n", "pred_depth", "[", "pred_depth", "<", "MIN_DEPTH", "]", "=", "MIN_DEPTH", "\n", "pred_depth", "[", "pred_depth", ">", "MAX_DEPTH", "]", "=", "MAX_DEPTH", "\n", "errors", ".", "append", "(", "compute_errors", "(", "gt_depth", ",", "pred_depth", ")", ")", "\n", "\n", "", "ratios", "=", "np", ".", "array", "(", "ratios", ")", "\n", "med", "=", "np", ".", "median", "(", "ratios", ")", "\n", "mean_errors", "=", "np", ".", "array", "(", "errors", ")", ".", "mean", "(", "0", ")", "\n", "print", "(", "\"Scaling ratios | med: {:0.3f} | std: {:0.3f}\"", ".", "format", "(", "med", ",", "np", ".", "std", "(", "ratios", "/", "med", ")", ")", ")", "\n", "print", "(", "\"\\n\"", "+", "(", "\"{:>}| \"", "*", "7", ")", ".", "format", "(", "\"abs_rel\"", ",", "\"sq_rel\"", ",", "\"rmse\"", ",", "\"rmse_log\"", ",", "\"a1\"", ",", "\"a2\"", ",", "\"a3\"", ")", ")", "\n", "print", "(", "(", "\"&{:.3f} \"", "*", "7", ")", ".", "format", "(", "*", "mean_errors", ".", "tolist", "(", ")", ")", "+", "\"\\\\\\\\\"", ")", "\n", "print", "(", "\"\\n-> Done!\"", ")", "\n", "\n"]]}