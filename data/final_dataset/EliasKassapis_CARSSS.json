{"home.repos.pwc.inspect_result.EliasKassapis_CARSSS.None.main.load_data": [[22, 53], ["utils.data_utils.get_transforms_list", "torchvision.Compose", "print", "data.Cityscapes19.Cityscapes19", "torch.utils.data.DataLoader", "Exception", "data.LIDC.LIDC", "ValueError", "len"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.get_transforms_list"], ["def", "load_data", "(", "dataset_name", ",", "mode", ",", "batch_size", ",", "args", ")", ":", "\n", "\n", "    ", "data", "=", "None", "\n", "\n", "if", "args", ".", "class_flip", ":", "\n", "        ", "assert", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", "and", "LABELS_CHANNELS", "==", "25", ",", "\"To run on the modified Cityscapes dataset set LABELS_CHANNELS = 25\"", "\n", "", "if", "LABELS_CHANNELS", "==", "25", ":", "\n", "        ", "assert", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", "and", "args", ".", "class_flip", ",", "\"N_channels = 25 if CITYSCAPES19 with class flip is active\"", "\n", "\n", "# compose transform object", "\n", "", "transforms_list", "=", "get_transforms_list", "(", "mode", ",", "args", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transforms_list", ")", "\n", "\n", "# initialize dataset", "\n", "if", "dataset_name", "==", "\"CITYSCAPES19\"", ":", "\n", "        ", "dataset", "=", "Cityscapes19", "(", "mode", ",", "transform", "=", "transform", ")", "# initialize dataset", "\n", "", "elif", "dataset_name", "==", "\"LIDC\"", ":", "\n", "        ", "dataset", "=", "LIDC", "(", "mode", ",", "transform", "=", "transform", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unexpected dataset name.\"", ")", "\n", "\n", "", "shuffle", "=", "mode", "==", "\"train\"", "\n", "\n", "if", "mode", "==", "\"train\"", "or", "mode", "==", "\"val\"", "or", "mode", "==", "\"test\"", ":", "\n", "        ", "data", "=", "DataLoader", "(", "dataset", ",", "shuffle", "=", "shuffle", ",", "batch_size", "=", "batch_size", ",", "drop_last", "=", "True", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "f\"{mode} is not a valid dataset\"", ")", "\n", "\n", "", "print", "(", "f\"finished loading {len(data)} batches for {mode} dataset\"", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.None.main.main": [[54, 169], ["utils.model_utils.find_model().to", "utils.model_utils.find_model().to", "utils.model_utils.find_model().to", "utils.general_utils.assert_type", "utils.general_utils.assert_type", "utils.general_utils.assert_type", "wandb.init", "main.load_data", "main.load_data", "main.load_data", "utils.model_utils.load_models_and_state", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "utils.general_utils.get_loss_weights", "utils.model_utils.find_model", "utils.model_utils.find_model", "utils.general_utils.assert_type", "utils.general_utils.assert_type", "training.train.TrainingProcess", "training.train.TrainingProcess.train", "utils.model_utils.find_model", "utils.model_utils.find_model", "utils.model_utils.find_model", "print", "utils.model_utils.load_models_and_state", "testing.test.evaluation", "Exception", "find_model().to.parameters", "find_model().to.parameters", "find_model().to.parameters"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_type", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_type", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_type", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.None.main.load_data", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.None.main.load_data", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.None.main.load_data", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.model_utils.load_models_and_state", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.get_loss_weights", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.model_utils.find_model", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.model_utils.find_model", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_type", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_type", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.train", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.model_utils.find_model", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.model_utils.find_model", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.model_utils.find_model", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.model_utils.load_models_and_state", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.testing.test.evaluation", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.EmptyCalNet.EmptyCalNet.parameters", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.EmptyCalNet.EmptyCalNet.parameters", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.EmptyCalNet.EmptyCalNet.parameters"], ["", "def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "if", "not", "args", ".", "debug", ":", "\n", "# initialize logger", "\n", "        ", "wandb", ".", "init", "(", "config", "=", "args", ")", "\n", "\n", "", "if", "args", ".", "mode", "==", "\"test\"", ":", "\n", "\n", "        ", "dataloader_test", "=", "load_data", "(", "args", ".", "dataset", ",", "\"val\"", "if", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", "else", "\"test\"", ",", "args", ".", "batch_size_plotting", ",", "args", ")", "# CS results are reported on the val set", "\n", "\n", "", "else", ":", "\n", "        ", "dataloader_train", "=", "load_data", "(", "args", ".", "dataset", ",", "\"train\"", ",", "args", ".", "batch_size", ",", "args", ")", "\n", "dataloader_validate", "=", "load_data", "(", "args", ".", "dataset", ",", "\"test\"", "if", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", "else", "\"val\"", ",", "args", ".", "batch_size_plotting", ",", "args", ")", "\n", "# we move the cities of  Darmstadt, M\u00f6nchengladbach and Ulm from the training set to the test set to be used as a validation (as done in the Probabilisti UNet paper)", "\n", "\n", "", "calibration_net", "=", "find_model", "(", "GEN_DIR", ",", "args", ".", "calibration_net", ",", "\n", "device", "=", "DEVICE", ",", "\n", "imsize", "=", "args", ".", "imsize", ",", "\n", "n_channels_in", "=", "INPUT_CHANNELS", "if", "args", ".", "dataset", "!=", "\"CITYSCAPES19\"", "else", "INPUT_CHANNELS", "+", "LABELS_CHANNELS", ",", "\n", "n_channels_out", "=", "LABELS_CHANNELS", ",", "\n", "use_dropout", "=", "args", ".", "dropout", ",", "\n", "n_hidden", "=", "args", ".", "n_hidden_cal", ",", "\n", "temperature", "=", "args", ".", "temperature", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "generator", "=", "find_model", "(", "GEN_DIR", ",", "args", ".", "generator", ",", "\n", "device", "=", "DEVICE", ",", "\n", "imsize", "=", "args", ".", "imsize", ",", "\n", "n_channels_in", "=", "INPUT_CHANNELS", "if", "args", ".", "calibration_net", "==", "\"EmptyCalNet\"", "else", "INPUT_CHANNELS", "+", "LABELS_CHANNELS", ",", "\n", "n_channels_out", "=", "LABELS_CHANNELS", ",", "\n", "z_dim", "=", "args", ".", "z_dim", ",", "\n", "use_dropout", "=", "args", ".", "dropout", ",", "\n", "n_hidden", "=", "args", ".", "n_hidden_gen", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "discriminator", "=", "find_model", "(", "DIS_DIR", ",", "args", ".", "discriminator", ",", "\n", "device", "=", "DEVICE", ",", "\n", "imsize", "=", "args", ".", "imsize", ",", "\n", "n_channels_in", "=", "LABELS_CHANNELS", "if", "args", ".", "discriminator", "==", "\"AEDiscriminator\"", "else", "INPUT_CHANNELS", "+", "LABELS_CHANNELS", ",", "\n", "use_dropout", "=", "args", ".", "dropout", ",", "\n", "n_hidden", "=", "args", ".", "n_hidden_dis", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "# get models", "\n", "if", "args", ".", "pretrained", ":", "\n", "# load in state dicts", "\n", "        ", "load_models_and_state", "(", "discriminator", ",", "\n", "generator", ",", "\n", "calibration_net", ",", "\n", "args", ".", "models_to_load", ",", "\n", "args", ".", "pretrained_model_suffix", ",", "\n", "args", ".", "pretrained_model_date", ")", "\n", "\n", "# assertions", "\n", "", "assert_type", "(", "GeneralGenerator", ",", "generator", ")", "\n", "assert_type", "(", "GeneralDiscriminator", ",", "discriminator", ")", "\n", "assert_type", "(", "GeneralGenerator", ",", "calibration_net", ")", "\n", "\n", "# train or test", "\n", "if", "(", "args", ".", "mode", "==", "\"train\"", ")", ":", "\n", "\n", "# init optimizers", "\n", "        ", "gen_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "generator", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate_gen", ",", "betas", "=", "args", ".", "opt_betas", ",", "weight_decay", "=", "args", ".", "opt_weight_decay", ")", "\n", "dis_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "discriminator", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate_dis", ",", "betas", "=", "args", ".", "opt_betas", ",", "weight_decay", "=", "args", ".", "opt_weight_decay", ")", "\n", "cal_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "calibration_net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate_cal", ",", "betas", "=", "args", ".", "opt_betas", ",", "weight_decay", "=", "args", ".", "opt_weight_decay", ")", "\n", "\n", "# init lr schedulers", "\n", "gen_lr_scheduler", "=", "MultiStepLR", "(", "gen_optimizer", ",", "milestones", "=", "args", ".", "lr_step_gen", "[", "0", "]", ",", "gamma", "=", "args", ".", "lr_step_gen", "[", "1", "]", ")", "\n", "dis_lr_scheduler", "=", "MultiStepLR", "(", "dis_optimizer", ",", "milestones", "=", "args", ".", "lr_step_dis", "[", "0", "]", ",", "gamma", "=", "args", ".", "lr_step_dis", "[", "1", "]", ")", "\n", "cal_lr_scheduler", "=", "MultiStepLR", "(", "cal_optimizer", ",", "milestones", "=", "args", ".", "lr_step_cal", "[", "0", "]", ",", "gamma", "=", "args", ".", "lr_step_cal", "[", "1", "]", ")", "\n", "\n", "\n", "# define loss functions", "\n", "if", "(", "not", "args", ".", "loss_gen", "==", "TOTAL_G_LOSS", ")", ":", "\n", "            ", "print", "(", "f\"{PRINTCOLOR_RED} WARNING: running with one generator-loss only: {args.loss_gen} {PRINTCOLOR_END}\"", ")", "\n", "\n", "", "weights_loss_functions", "=", "get_loss_weights", "(", "args", ")", "\n", "loss_gen", "=", "find_model", "(", "LOSS_DIR", ",", "TOTAL_G_LOSS", ",", "**", "weights_loss_functions", ")", "\n", "loss_dis", "=", "find_model", "(", "LOSS_DIR", ",", "TOTAL_D_LOSS", ",", "**", "weights_loss_functions", ")", "\n", "\n", "# assertions", "\n", "assert_type", "(", "GeneralLoss", ",", "loss_dis", ")", "\n", "assert_type", "(", "GeneralLoss", ",", "loss_gen", ")", "\n", "\n", "# define process", "\n", "train_progress", "=", "TrainingProcess", "(", "generator", ",", "\n", "discriminator", ",", "\n", "calibration_net", ",", "\n", "dataloader_train", ",", "\n", "dataloader_validate", ",", "\n", "gen_optimizer", ",", "\n", "dis_optimizer", ",", "\n", "cal_optimizer", ",", "\n", "gen_lr_scheduler", ",", "\n", "dis_lr_scheduler", ",", "\n", "cal_lr_scheduler", ",", "\n", "loss_gen", ",", "\n", "loss_dis", ",", "\n", "args", ")", "\n", "\n", "# train", "\n", "trained_succesfully", "=", "train_progress", ".", "train", "(", ")", "\n", "\n", "", "elif", "(", "args", ".", "mode", "==", "\"test\"", ")", ":", "\n", "\n", "# load in state dicts", "\n", "        ", "load_models_and_state", "(", "discriminator", ",", "\n", "generator", ",", "\n", "calibration_net", ",", "\n", "args", ".", "test_models_to_load", ",", "\n", "args", ".", "test_model_suffix", ",", "\n", "args", ".", "test_model_date", ")", "\n", "\n", "# run test", "\n", "evaluation", "(", "dataloader_test", ",", "generator", ",", "calibration_net", ",", "discriminator", ",", "args", ",", "number_of_batches", "=", "20000", ",", "visualize", "=", "False", ",", "save", "=", "False", ",", "load", "=", "False", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "f\"Unrecognized train/test mode?: {args.mode}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.None.main.parse": [[171, 268], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "torch.ones", "argparse.ArgumentParser.get_default", "argparse.ArgumentParser.get_default", "argparse.ArgumentParser.get_default", "eval", "argparse.ArgumentParser.get_default"], "function", ["None"], ["", "", "def", "parse", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# Run mode ----------------------------------------------------------------------------------------------------------------", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "default", "=", "\"test\"", ",", "type", "=", "str", ",", "help", "=", "\"'train' or 'test'\"", ")", "\n", "\n", "# debug", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "default", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"If false, does not save directories\"", ")", "\n", "parser", ".", "add_argument", "(", "'--timing'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'are we measuring efficiency?'", ")", "\n", "\n", "\n", "# Pre-training arguments --------------------------------------------------------------------------------------------------", "\n", "parser", ".", "add_argument", "(", "'--pretrained'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'Determines if we load a trained model or not'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'Determines if we resume training on the pre-trained model or not'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained_model_date'", ",", "type", "=", "str", ",", "default", "=", "\"LIDC\"", ",", "help", "=", "'date_stamp string for which model to load'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained_model_suffix'", ",", "type", "=", "str", ",", "default", "=", "\"Best_Model\"", ",", "help", "=", "'filename string for which model to load'", ")", "\n", "parser", ".", "add_argument", "(", "'--models_to_load'", ",", "type", "=", "list", ",", "default", "=", "[", "\"calibration_net\"", "]", ",", "help", "=", "'list containing the name of models to load ([\"calibration_net\", \"generator\", \"discriminator\"])'", ")", "\n", "\n", "\n", "# Training arguments ------------------------------------------------------------------------------------------------------", "\n", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "1000000", ",", "type", "=", "int", ",", "help", "=", "'max number of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_training_minutes'", ",", "type", "=", "int", ",", "default", "=", "7197", ",", "help", "=", "'After which process is killed automatically'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'Frequency (batch-wise) of evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "'--plot_freq'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "help", "=", "'Frequency (batch-wise) of plotting pictures'", ")", "\n", "parser", ".", "add_argument", "(", "'--saving_freq'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'Frequency (epoch-wise) of saving models'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "\"cuda\"", ",", "type", "=", "str", ",", "help", "=", "'device'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--learning_rate_cal'", ",", "type", "=", "float", ",", "default", "=", "2e-4", ",", "help", "=", "'Learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate_gen'", ",", "type", "=", "float", ",", "default", "=", "2e-4", ",", "help", "=", "'Learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate_dis'", ",", "type", "=", "float", ",", "default", "=", "1e-5", ",", "help", "=", "'Learning rate'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr_step_cal'", ",", "type", "=", "float", ",", "default", "=", "(", "[", "250", ",", "500", "]", ",", "0.5", ")", ",", "help", "=", "'Tuple enclosing list of epoch number where learning rate is changed and change factor'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_step_gen'", ",", "type", "=", "float", ",", "default", "=", "(", "[", "100", ",", "300", ",", "500", "]", ",", "0.5", ")", ",", "help", "=", "'Tuple enclosing list of epoch number where learning rate is changed and change factor'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_step_dis'", ",", "type", "=", "float", ",", "default", "=", "(", "[", "30", ",", "300", ",", "500", "]", ",", "0.5", ")", ",", "help", "=", "'Tuple enclosing list of epoch number where learning rate is changed and change factor'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--opt_betas'", ",", "type", "=", "tuple", ",", "default", "=", "(", "0.5", ",", "0.99", ")", ",", "help", "=", "'beta1 and beta2 for ADAM optimization'", ")", "\n", "parser", ".", "add_argument", "(", "'--opt_weight_decay'", ",", "type", "=", "int", ",", "default", "=", "5e-4", ",", "help", "=", "'weight decay for ADAM optimization'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--schedule'", ",", "type", "=", "tuple", ",", "default", "=", "(", "50", ",", "200", ")", ",", "help", "=", "'Alternate discriminator training for specified intervals - (update, freeze)'", ")", "\n", "parser", ".", "add_argument", "(", "'--DiscDAccCap'", ",", "default", "=", "0.85", ",", "type", "=", "float", ",", "help", "=", "\"cap the discriminator accuracy at input value\"", ")", "\n", "\n", "\n", "# Test arguments ----------------------------------------------------------------------------------------------------------------", "\n", "parser", ".", "add_argument", "(", "'--test_model_date'", ",", "default", "=", "\"LIDC\"", ",", "type", "=", "str", ",", "help", "=", "'date_stamp string for which model to load'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_model_suffix'", ",", "default", "=", "\"LIDC_CAR_Model\"", ",", "type", "=", "str", ",", "help", "=", "'filename string for which model to load'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_models_to_load'", ",", "type", "=", "list", ",", "default", "=", "[", "\"calibration_net\"", ",", "\"generator\"", "]", ")", "\n", "\n", "# Model arguments ---------------------------------------------------------------------------------------------------------------", "\n", "parser", ".", "add_argument", "(", "'--calibration_net'", ",", "default", "=", "\"SegNetCalNet\"", ",", "type", "=", "str", ",", "help", "=", "\"name of objectclass\"", ")", "\n", "parser", ".", "add_argument", "(", "'--generator'", ",", "default", "=", "\"UNetGenerator\"", ",", "type", "=", "str", ",", "help", "=", "\"name of objectclass\"", ")", "\n", "parser", ".", "add_argument", "(", "'--discriminator'", ",", "default", "=", "\"PixelDiscriminator\"", ",", "type", "=", "str", ",", "help", "=", "\"name of objectclass\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--n_generator_samples_test'", ",", "default", "=", "16", ",", "type", "=", "int", ",", "help", "=", "\"no. of samples to be used in plots and stats\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--z_dim'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "help", "=", "'dimensionality of latent code space'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_hidden_cal'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'features in the first hidden layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_hidden_gen'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'features in the first hidden layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_hidden_dis'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'features in the first hidden layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--temperature'", ",", "type", "=", "torch", ".", "Tensor", ",", "default", "=", "torch", ".", "ones", "(", "LABELS_CHANNELS", ")", ",", "help", "=", "'specifies the magnitute of temperature scaling for the calibration net during test-time'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'specifies whether to use dropout'", ")", "\n", "\n", "# Loss arguments ----------------------------------------------------------------------------------------------------------------", "\n", "parser", ".", "add_argument", "(", "'--loss_gen'", ",", "default", "=", "TOTAL_G_LOSS", ",", "type", "=", "str", ",", "help", "=", "\"Overwrites hyperparams generatorloss if not total\"", ")", "\n", "parser", ".", "add_argument", "(", "'--loss_dis'", ",", "default", "=", "TOTAL_D_LOSS", ",", "type", "=", "str", ",", "help", "=", "\"name of objectclass\"", ")", "\n", "\n", "# hyperparams for Calibration net loss", "\n", "parser", ".", "add_argument", "(", "'--CalNetLoss_weight'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "help", "=", "\"weight hyperparameter for calibration net loss\"", ")", "\n", "\n", "# hyperparams for Refinement net loss", "\n", "parser", ".", "add_argument", "(", "'--NonSaturatingGLoss_weight'", ",", "default", "=", "10", ",", "type", "=", "float", ",", "help", "=", "\"weight hyperparameter for specific generatorloss\"", ")", "\n", "parser", ".", "add_argument", "(", "'--PixelLoss_weight'", ",", "default", "=", "0", ",", "type", "=", "float", ",", "help", "=", "\"weight hyperparameter for specific generatorloss\"", ")", "\n", "parser", ".", "add_argument", "(", "'--CalLoss_weight'", ",", "default", "=", "5", ",", "type", "=", "float", ",", "help", "=", "\"weight hyperparameter for specific generatorloss\"", ")", "\n", "parser", ".", "add_argument", "(", "'--ComplexityLoss_weight'", ",", "default", "=", "0", ",", "type", "=", "float", ",", "help", "=", "\"weight hyperparameter for specific generatorloss\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--n_cal_samples'", ",", "default", "=", "5", ",", "type", "=", "float", ",", "help", "=", "\"Number of samples to use for prediction average in cal loss\"", ")", "\n", "\n", "# hyperparams for Discriminator loss", "\n", "parser", ".", "add_argument", "(", "'--DefaultDLoss_weight'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "help", "=", "\"weight hyperparameter for specific discriminatorloss\"", ")", "\n", "parser", ".", "add_argument", "(", "'--label_smoothing'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "help", "=", "\"specifies whether to use label smoothing or not\"", ")", "\n", "\n", "# Data arguments -------------------------------------------------------------------------------------------------------------------", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'Size of batches loaded by the data loader.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size-plotting'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'Size of validation batch'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'LIDC'", ",", "help", "=", "'LIDC, CITYSCAPES19 or CITYSCAPES35'", ")", "\n", "parser", ".", "add_argument", "(", "'--class_flip'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "\"Specifies whether to randomly flip classes in CITYSCAPES\"", ")", "\n", "parser", ".", "add_argument", "(", "'--flip_experiment'", ",", "type", "=", "str", ",", "default", "=", "'DEEP'", ",", "help", "=", "\"ROAD or DEEP\"", ")", "# flip only road or the 5 classes flipped in the ProbabilistcUNet paper", "\n", "parser", ".", "add_argument", "(", "'--crop'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'Specifies whether to randomly crop dataset image or not'", ")", "\n", "parser", ".", "add_argument", "(", "'--resize'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'Specifies whether to resize dataset image size or not'", ")", "\n", "parser", ".", "add_argument", "(", "'--noise'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'Specifies whether to add random noise to labels'", ")", "\n", "parser", ".", "add_argument", "(", "'--imsize'", ",", "type", "=", "tuple", ",", "default", "=", "(", "IMSIZE", "[", "0", "]", ",", "IMSIZE", "[", "1", "]", ")", "if", "parser", ".", "get_default", "(", "'resize'", ")", "else", "eval", "(", "f\"{parser.get_default('dataset')}_IMSIZE\"", ")", ",", "\n", "help", "=", "'Returns tuple of selected dataset image dimentions (specified in constants'", ")", "\n", "\n", "assert", "len", "(", "parser", ".", "get_default", "(", "'imsize'", ")", ")", "==", "2", ",", "f\"Invalid IMSIZE values: {parser.get_default('imsize')}\"", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.l2_regularisation": [[8, 17], ["m.parameters", "W.norm", "W.norm"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.EmptyCalNet.EmptyCalNet.parameters"], ["def", "l2_regularisation", "(", "m", ")", ":", "\n", "    ", "l2_reg", "=", "None", "\n", "\n", "for", "W", "in", "m", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "l2_reg", "is", "None", ":", "\n", "            ", "l2_reg", "=", "W", ".", "norm", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "l2_reg", "=", "l2_reg", "+", "W", ".", "norm", "(", "2", ")", "\n", "", "", "return", "l2_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.save_example_images": [[18, 26], ["torchvision.utils.save_image", "images.max", "images.min"], "function", ["None"], ["", "def", "save_example_images", "(", "images", ",", "batches_done", ",", "suffix", ",", "filesort", ")", ":", "\n", "    ", "\"\"\"\n    save some plots in PIC_DIR\n    \"\"\"", "\n", "normalize", "=", "True", "if", "images", ".", "max", "(", ")", ">", "1", "and", "images", ".", "min", "(", ")", ">=", "0", "else", "False", "\n", "\n", "save_image", "(", "images", ",", "f'./{PREFIX_OUTPUT}/{DATA_MANAGER.stamp}/{PIC_DIR}/{batches_done}_{suffix}.{filesort}'", ",", "\n", "nrow", "=", "4", ",", "normalize", "=", "normalize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.scheduler": [[27, 37], ["None"], "function", ["None"], ["", "def", "scheduler", "(", "i", ",", "D_number", ",", "G_number", ")", ":", "\n", "\n", "    ", "if", "D_number", "==", "G_number", "==", "1", ":", "\n", "        ", "return", "\"DG\"", "\n", "", "else", ":", "\n", "        ", "total", "=", "D_number", "+", "G_number", "\n", "if", "i", "%", "total", "<", "D_number", ":", "\n", "            ", "return", "\"D\"", "\n", "", "else", ":", "\n", "            ", "return", "\"G\"", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.compute_accuracy": [[38, 51], ["torch.mean", "actual_predictions.detach", "true_positives.detach", "torch.mean.item"], "function", ["None"], ["", "", "", "def", "compute_accuracy", "(", "predictions", ",", "targets", ")", ":", "\n", "    ", "\"\"\"\n    Gets the accuracy for discriminator\n\n    \"\"\"", "\n", "actual_predictions", "=", "predictions", ">", "0.5", "\n", "true_positives", "=", "(", "actual_predictions", "==", "(", "targets", ">", "0.5", ")", ")", ".", "type", "(", "torch", ".", "DoubleTensor", ")", "\n", "accuracy", "=", "(", "torch", ".", "mean", "(", "true_positives", ")", ")", "\n", "\n", "actual_predictions", ".", "detach", "(", ")", "\n", "true_positives", ".", "detach", "(", ")", "\n", "\n", "return", "accuracy", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.unpack_batch": [[53, 58], ["len", "batch[].to().float", "batch[].to().float", "batch.keys", "len", "len", "batch[].to().float", "batch[].to().float", "batch[].to().float", "batch.keys", "batch[].to", "batch[].to", "batch.keys", "batch[].to", "batch[].to", "batch[].to"], "function", ["None"], ["", "def", "unpack_batch", "(", "batch", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "if", "len", "(", "batch", ".", "keys", "(", ")", ")", "==", "2", "or", "(", "len", "(", "batch", ".", "keys", "(", ")", ")", "==", "3", "and", "LABELS_CHANNELS", "==", "25", ")", ":", "\n", "        ", "return", "batch", "[", "\"image\"", "]", ".", "to", "(", "DEVICE", ")", ".", "float", "(", ")", ",", "batch", "[", "\"label\"", "]", ".", "to", "(", "DEVICE", ")", ".", "float", "(", ")", "\n", "", "elif", "len", "(", "batch", ".", "keys", "(", ")", ")", "==", "3", "and", "LABELS_CHANNELS", "==", "2", ":", "\n", "        ", "return", "batch", "[", "\"image\"", "]", ".", "to", "(", "DEVICE", ")", ".", "float", "(", ")", ",", "batch", "[", "\"label\"", "]", ".", "to", "(", "DEVICE", ")", ".", "float", "(", ")", ",", "batch", "[", "\"dist\"", "]", ".", "to", "(", "DEVICE", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.instance_checker": [[60, 63], ["isinstance", "isinstance"], "function", ["None"], ["", "", "def", "instance_checker", "(", "model", ",", "model_type", ")", ":", "\n", "    ", "m", "=", "model", ".", "module", "if", "isinstance", "(", "model", ",", "DataParallel", ")", "else", "model", "\n", "return", "isinstance", "(", "m", ",", "model_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.renormalize": [[65, 78], ["torch.tensor().reshape().to", "torch.tensor().reshape().to", "str", "torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "renormalize", "(", "input_batch", ",", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ":", "\n", "    ", "assert", "input_batch", ".", "shape", "[", "1", "]", "==", "3", ",", "f\"Channel dimension C = {str(input_batch.shape[1])}. Expected C = 3\"", "\n", "\n", "denorm_input", "=", "(", "input_batch", "+", "1", ")", "/", "2", "\n", "\n", "shape", "=", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "mean", "=", "torch", ".", "tensor", "(", "mean", ")", ".", "reshape", "(", "shape", ")", ".", "to", "(", "DEVICE", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "std", ")", ".", "reshape", "(", "shape", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "renorm_output", "=", "(", "denorm_input", "-", "mean", ")", "/", "std", "\n", "\n", "return", "renorm_output", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.refactor_batch": [[80, 86], ["training_helpers.renormalize", "len", "torch.nn.functional.upsample_bilinear().to", "torch.nn.functional.upsample_bilinear"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.renormalize"], ["", "def", "refactor_batch", "(", "input_batch", ",", "size", "=", "224", ",", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", "device", "=", "DEVICE", ")", ":", "\n", "    ", "assert", "len", "(", "input_batch", ".", "shape", ")", "==", "4", "\n", "\n", "output_batch", "=", "renormalize", "(", "torch", ".", "nn", ".", "functional", ".", "upsample_bilinear", "(", "input_batch", ",", "(", "size", ",", "size", ")", ")", ".", "to", "(", "device", ")", ",", "mean", ",", "std", ")", "\n", "\n", "return", "output_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.torch_comp_along_dim": [[88, 102], ["type", "len", "str", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "funct", "funct", "range", "range", "range", "range", "len", "len", "len", "len", "torch.cat"], "function", ["None"], ["", "def", "torch_comp_along_dim", "(", "funct", ",", "input", ":", "Optional", ",", "*", "args", ",", "multiple_idxs", "=", "False", ",", "dim", "=", "0", ")", ":", "\n", "\n", "    ", "if", "type", "(", "input", ")", "==", "tuple", ":", "\n", "        ", "assert", "len", "(", "input", ")", "==", "2", ",", "\"Expected tuple of size: 2, received tuple of size: \"", "+", "str", "(", "len", "(", "input", ")", ")", "\n", "\n", "if", "multiple_idxs", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "[", "funct", "(", "(", "input", "[", "0", "]", "[", "i", "]", ",", "input", "[", "1", "]", "[", "i", "]", ")", ",", "*", "args", ")", "for", "i", "in", "range", "(", "len", "(", "input", "[", "1", "]", ")", ")", "]", ",", "dim", "=", "dim", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "[", "funct", "(", "(", "input", "[", "0", "]", ",", "input", "[", "1", "]", "[", "i", "]", ")", ",", "*", "args", ")", "for", "i", "in", "range", "(", "len", "(", "input", "[", "1", "]", ")", ")", "]", ",", "dim", "=", "dim", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "multiple_idxs", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "[", "funct", "(", "input", "[", "i", "]", ",", "args", "[", "0", "]", "[", "i", "]", ",", "*", "args", "[", "1", ":", "]", ")", "for", "i", "in", "range", "(", "len", "(", "input", ")", ")", "]", ",", "dim", "=", "dim", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "[", "funct", "(", "input", "[", "i", "]", ",", "*", "args", ")", "for", "i", "in", "range", "(", "len", "(", "input", ")", ")", "]", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.comp_along_dim": [[104, 115], ["type", "len", "str", "funct", "len", "funct", "funct", "range", "range", "range", "len", "len", "len"], "function", ["None"], ["", "", "", "def", "comp_along_dim", "(", "funct", ",", "input", ":", "Optional", ",", "*", "args", ",", "multiple_idxs", "=", "False", ",", "dim", "=", "0", ")", ":", "\n", "\n", "    ", "if", "type", "(", "input", ")", "==", "tuple", ":", "\n", "        ", "assert", "len", "(", "input", ")", "==", "2", ",", "\"Expected tuple of size: 2, received tuple of size: \"", "+", "str", "(", "len", "(", "input", ")", ")", "\n", "\n", "if", "multiple_idxs", ":", "\n", "            ", "return", "[", "funct", "(", "(", "input", "[", "0", "]", "[", "i", "]", ",", "input", "[", "1", "]", "[", "i", "]", ")", ",", "*", "args", ")", "for", "i", "in", "range", "(", "len", "(", "input", "[", "1", "]", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "funct", "(", "(", "input", "[", "0", "]", ",", "input", "[", "1", "]", "[", "i", "]", ")", ",", "*", "args", ")", "for", "i", "in", "range", "(", "len", "(", "input", "[", "1", "]", ")", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "return", "[", "funct", "(", "input", "[", "i", "]", ",", "*", "args", ")", "for", "i", "in", "range", "(", "len", "(", "input", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.get_ce": [[116, 119], ["out.sum", "torch.log", "pred.clamp"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log"], ["", "", "def", "get_ce", "(", "pred", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ",", "dim", ":", "int", "=", "CHANNEL_DIM", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "out", "=", "-", "target", "*", "torch", ".", "log", "(", "pred", ".", "clamp", "(", "min", "=", "1e-11", ")", ")", "# clamp to prevent gradient explosion", "\n", "return", "out", ".", "sum", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.get_entropy": [[121, 131], ["type", "out.sum", "p.clamp().log", "numpy.log", "p.clip", "p.clamp"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log"], ["", "def", "get_entropy", "(", "p", ":", "torch", ".", "Tensor", ",", "dim", ":", "int", "=", "CHANNEL_DIM", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "if", "type", "(", "p", ")", "!=", "np", ".", "ndarray", ":", "\n", "        ", "out", "=", "-", "p", "*", "p", ".", "clamp", "(", "min", "=", "1e-7", ")", ".", "log", "(", ")", "\n", "", "else", ":", "\n", "        ", "out", "=", "-", "p", "*", "np", ".", "log", "(", "p", ".", "clip", "(", "min", "=", "1e-7", ")", ")", "\n", "\n", "", "if", "dim", "==", "None", ":", "\n", "        ", "return", "out", "\n", "", "else", ":", "\n", "        ", "return", "out", ".", "sum", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.tile": [[133, 147], ["a.repeat.size", "a.repeat.repeat", "torch.LongTensor().to", "torch.index_select", "a.repeat.dim", "torch.LongTensor", "numpy.concatenate", "range", "numpy.arange"], "function", ["None"], ["", "", "def", "tile", "(", "a", ",", "dim", ",", "n_tile", ")", ":", "\n", "    ", "\"\"\"\n    This function is taken form PyTorch forum and mimics the behavior of tf.tile.\n    Source: https://discuss.pytorch.org/t/how-to-tile-a-tensor/13853/3\n    \"\"\"", "\n", "\n", "init_dim", "=", "a", ".", "size", "(", "dim", ")", "\n", "repeat_idx", "=", "[", "1", "]", "*", "a", ".", "dim", "(", ")", "\n", "repeat_idx", "[", "dim", "]", "=", "n_tile", "\n", "a", "=", "a", ".", "repeat", "(", "*", "(", "repeat_idx", ")", ")", "\n", "order_index", "=", "torch", ".", "LongTensor", "(", "np", ".", "concatenate", "(", "[", "init_dim", "*", "np", ".", "arange", "(", "n_tile", ")", "+", "i", "for", "i", "in", "range", "(", "init_dim", ")", "]", ")", ")", ".", "to", "(", "DEVICE", ")", "\n", "out", "=", "torch", ".", "index_select", "(", "a", ",", "dim", ",", "order_index", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.calibration_net_forward_pass": [[148, 174], ["calibration_net", "torch.softmax", "torch.cat", "torch.cat", "torch.ones", "torch.zeros", "torch.isnan().any", "torch.isinf().any", "args.temperature.reshape().to", "torch.zeros.to", "F.softmax.detach", "torch.ones.to", "torch.isnan", "torch.isinf", "args.temperature.reshape"], "function", ["None"], ["", "def", "calibration_net_forward_pass", "(", "calibration_net", ",", "images", ",", "bb_preds", ",", "ign_idxs", ",", "args", ")", ":", "\n", "\n", "    ", "if", "bb_preds", "is", "not", "None", ":", "\n", "        ", "p_input", "=", "torch", ".", "cat", "(", "(", "images", ",", "bb_preds", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "p_input", "=", "images", "\n", "\n", "", "calnet_preds_logits", "=", "calibration_net", "(", "p_input", ",", "return_logits", "=", "True", ")", "\n", "calnet_preds", "=", "F", ".", "softmax", "(", "calnet_preds_logits", "/", "args", ".", "temperature", ".", "reshape", "(", "1", ",", "LABELS_CHANNELS", ",", "1", ",", "1", ")", ".", "to", "(", "DEVICE", ")", ",", "dim", "=", "1", ")", "# perform temperature scaling", "\n", "\n", "if", "ign_idxs", "is", "not", "None", ":", "\n", "# set unlabelled pixels to class unlabelled", "\n", "        ", "w", "=", "torch", ".", "ones", "(", "calnet_preds", ".", "shape", ")", "\n", "w", "[", "ign_idxs", "[", "0", "]", ",", ":", ",", "ign_idxs", "[", "1", "]", ",", "ign_idxs", "[", "2", "]", "]", "=", "0.", "\n", "\n", "r", "=", "torch", ".", "zeros", "(", "calnet_preds", ".", "shape", ")", "\n", "r", "[", "ign_idxs", "[", "0", "]", ",", "24", ",", "ign_idxs", "[", "1", "]", ",", "ign_idxs", "[", "2", "]", "]", "=", "1.", "\n", "\n", "calnet_preds", "=", "calnet_preds", "*", "w", ".", "to", "(", "DEVICE", ")", "+", "r", ".", "to", "(", "DEVICE", ")", "\n", "\n", "", "calnet_labelled_images", "=", "torch", ".", "cat", "(", "(", "images", ",", "calnet_preds", ".", "detach", "(", ")", ")", ",", "dim", "=", "CHANNEL_DIM", ")", "# condition final prediction on input images and calibration net preds", "\n", "\n", "assert", "not", "torch", ".", "isnan", "(", "calnet_preds", ")", ".", "any", "(", ")", ",", "\"Calibration net output is NaN\"", "\n", "assert", "not", "torch", ".", "isinf", "(", "calnet_preds", ")", ".", "any", "(", ")", ",", "\"Calibration net output is Inf\"", "\n", "\n", "return", "calnet_preds_logits", ",", "calnet_preds", ",", "calnet_labelled_images", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.generator_forward_pass": [[176, 191], ["generator.sample", "training_helpers.torch_comp_along_dim", "calnet_labelled_images.detach", "torch.isnan().any", "torch.isinf().any", "torch.isnan", "torch.isinf"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.sample", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.torch_comp_along_dim"], ["", "def", "generator_forward_pass", "(", "generator", ",", "images", ",", "calnet_labelled_images", ",", "ign_idxs", ",", "args", ")", ":", "\n", "\n", "    ", "g_input", "=", "images", "if", "args", ".", "calibration_net", "==", "\"EmptyCalNet\"", "else", "calnet_labelled_images", ".", "detach", "(", ")", "\n", "\n", "pred_dist", ",", "_", ",", "_", "=", "generator", ".", "sample", "(", "g_input", ",", "ign_idxs", "=", "ign_idxs", ",", "n_samples", "=", "args", ".", "n_cal_samples", ")", "\n", "pred_dist_labelled", "=", "torch_comp_along_dim", "(", "torch", ".", "cat", ",", "(", "images", ",", "pred_dist", ")", ",", "CHANNEL_DIM", ",", "dim", "=", "0", ")", "\n", "\n", "assert", "not", "torch", ".", "isnan", "(", "pred_dist", ")", ".", "any", "(", ")", ",", "\"Generator output is NaN\"", "\n", "assert", "not", "torch", ".", "isinf", "(", "pred_dist", ")", ".", "any", "(", ")", ",", "\"Generator output is Inf\"", "\n", "\n", "preds", "=", "pred_dist", "[", "0", "]", "\n", "pred_labelled", "=", "pred_dist_labelled", "[", "0", "]", "\n", "\n", "\n", "return", "preds", ",", "pred_labelled", ",", "pred_dist", ",", "pred_dist_labelled", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.discriminator_forward_pass": [[193, 216], ["torch.cat", "discriminator", "torch.cat", "training_helpers.compute_accuracy", "torch.isnan().any", "torch.isinf().any", "pred_labelled.detach", "true_labelled.detach", "torch.zeros().to", "torch.ones().to", "torch.isnan", "torch.isinf", "torch.zeros", "torch.ones"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.compute_accuracy"], ["", "def", "discriminator_forward_pass", "(", "discriminator", ",", "true_labelled", ",", "pred_labelled", ",", "args", ")", ":", "\n", "\n", "    ", "assert", "not", "args", ".", "generator", "==", "\"EmptyGenerator\"", ",", "\"Need to have an active generator to use a discriminator\"", "\n", "\n", "# concat true and fake", "\n", "combined_input", "=", "torch", ".", "cat", "(", "(", "pred_labelled", ".", "detach", "(", ")", ",", "true_labelled", ".", "detach", "(", ")", ")", ",", "dim", "=", "0", ")", "# todo should this be shuffled?", "\n", "\n", "# discriminator forward pass", "\n", "scores", "=", "discriminator", "(", "combined_input", ")", "\n", "\n", "assert", "not", "torch", ".", "isnan", "(", "scores", ")", ".", "any", "(", ")", ",", "\"Discriminator output is NaN\"", "\n", "assert", "not", "torch", ".", "isinf", "(", "scores", ")", ".", "any", "(", ")", ",", "\"Discriminator output is Inf\"", "\n", "\n", "\n", "shape", "=", "scores", ".", "shape", "\n", "shape", "=", "(", "shape", "[", "0", "]", "//", "2", ",", "*", "shape", "[", "1", ":", "]", ")", "\n", "\n", "gt_labels", "=", "torch", ".", "cat", "(", "(", "torch", ".", "zeros", "(", "shape", ")", ".", "to", "(", "DEVICE", ")", ",", "torch", ".", "ones", "(", "shape", ")", ".", "to", "(", "DEVICE", ")", ")", ",", "dim", "=", "0", ")", "\n", "\n", "# compute discriminator accuracy", "\n", "accuracy_discriminator", "=", "compute_accuracy", "(", "scores", ",", "gt_labels", ")", "\n", "\n", "return", "combined_input", ",", "scores", ",", "gt_labels", ",", "accuracy_discriminator", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.model_utils._read_all_classnames": [[17, 35], ["os.listdir", "os.path.isdir", "os.listdir", "importlib.import_module", "getattr", "name.split", "importlib.import_module", "getattr", "name2.split"], "function", ["None"], ["def", "_read_all_classnames", "(", ")", ":", "\n", "    ", "for", "typ", "in", "types", ":", "\n", "        ", "for", "name", "in", "os", ".", "listdir", "(", "f\"./models/{typ}\"", ")", ":", "\n", "            ", "if", "(", "not", "\"__\"", "in", "name", ")", ":", "\n", "                ", "if", "os", ".", "path", ".", "isdir", "(", "f\"./models/{typ}/{name}\"", ")", ":", "\n", "                    ", "for", "name2", "in", "os", ".", "listdir", "(", "f\"./models/{typ}/{name}\"", ")", ":", "\n", "                        ", "if", "(", "not", "\"__\"", "in", "name2", ")", ":", "\n", "                            ", "current_directory", "=", "f\"models.{typ}.{name}\"", "\n", "short_name", "=", "name2", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "module", "=", "importlib", ".", "import_module", "(", "f\"{current_directory}.{short_name}\"", ")", "\n", "class_reference", "=", "getattr", "(", "module", ",", "short_name", ")", "\n", "models", "[", "typ", "]", "[", "short_name", "]", "=", "class_reference", "\n", "", "", "", "else", ":", "\n", "                        ", "current_directory", "=", "f\"models.{typ}\"", "\n", "short_name", "=", "name", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "module", "=", "importlib", ".", "import_module", "(", "f\"{current_directory}.{short_name}\"", ")", "\n", "class_reference", "=", "getattr", "(", "module", ",", "short_name", ")", "\n", "models", "[", "typ", "]", "[", "short_name", "]", "=", "class_reference", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.model_utils.find_model": [[36, 42], ["None"], "function", ["None"], ["", "", "", "", "", "def", "find_model", "(", "type", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    returns model with arguments given a string name-tag\n    \"\"\"", "\n", "\n", "return", "models", "[", "type", "]", "[", "name", "]", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.model_utils.save_models": [[44, 51], ["DATA_MANAGER.save_python_obj", "discriminator.state_dict", "generator.state_dict", "calibration_net.state_dict"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.data_management.DataManager.save_python_obj", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.EmptyCalNet.EmptyCalNet.state_dict", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.EmptyCalNet.EmptyCalNet.state_dict", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.EmptyCalNet.EmptyCalNet.state_dict"], ["", "def", "save_models", "(", "discriminator", ",", "generator", ",", "calibration_net", ",", "suffix", ")", ":", "\n", "    ", "\"\"\"\n    Saves current state of models\n    \"\"\"", "\n", "save_dict", "=", "{", "\"discriminator\"", ":", "discriminator", ".", "state_dict", "(", ")", ",", "\"generator\"", ":", "generator", ".", "state_dict", "(", ")", ",", "\"calibration_net\"", ":", "calibration_net", ".", "state_dict", "(", ")", "}", "\n", "\n", "DATA_MANAGER", ".", "save_python_obj", "(", "save_dict", ",", "f\"{DATA_MANAGER.stamp}/{MODELS_DIR}/{suffix}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.model_utils.load_models_and_state": [[53, 72], ["pathlib.Path().exists", "DATA_MANAGER.load_python_obj", "calibration_net.load_state_dict", "calibration_net.to", "generator.load_state_dict", "generator.to", "discriminator.load_state_dict", "discriminator.to", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.data_management.DataManager.load_python_obj", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.EmptyCalNet.EmptyCalNet.load_state_dict", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.EmptyCalNet.EmptyCalNet.load_state_dict", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.EmptyCalNet.EmptyCalNet.load_state_dict"], ["", "def", "load_models_and_state", "(", "discriminator", ",", "generator", ",", "calibration_net", ",", "models_to_load", ",", "suffix", ",", "stamp", ")", ":", "\n", "    ", "\"\"\"\n    Loads saved models given a suffix and then also loads in state dicts already\n    \"\"\"", "\n", "assert", "Path", "(", "f\"./results/output/{stamp}/{MODELS_DIR}\"", ")", ".", "exists", "(", ")", ",", "f\"{stamp}/{MODELS_DIR} does not exist\"", "\n", "\n", "models", "=", "DATA_MANAGER", ".", "load_python_obj", "(", "f\"{stamp}/{MODELS_DIR}/{suffix}\"", ")", "\n", "\n", "if", "\"calibration_net\"", "in", "models_to_load", ":", "\n", "        ", "calibration_net", ".", "load_state_dict", "(", "models", "[", "\"prior\"", "]", ")", "\n", "calibration_net", ".", "to", "(", "DEVICE", ")", "\n", "\n", "", "if", "\"generator\"", "in", "models_to_load", ":", "\n", "        ", "generator", ".", "load_state_dict", "(", "models", "[", "\"generator\"", "]", ")", "\n", "generator", ".", "to", "(", "DEVICE", ")", "\n", "\n", "", "if", "\"discriminator\"", "in", "models_to_load", ":", "\n", "        ", "discriminator", ".", "load_state_dict", "(", "models", "[", "\"discriminator\"", "]", ")", "\n", "discriminator", ".", "to", "(", "DEVICE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.denormalize_picture": [[5, 13], ["None"], "function", ["None"], ["def", "denormalize_picture", "(", "image", ",", "binarised", "=", "False", ")", ":", "\n", "    ", "image", "=", "(", "(", "image", "+", "1", ")", "/", "2", ")", "*", "255", "\n", "image", "[", "image", ">", "255", "]", "=", "255", "\n", "\n", "if", "(", "binarised", ")", ":", "\n", "        ", "image", "[", "image", "==", "127", "]", "=", "255", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.de_torch": [[15, 17], ["img.detach().cpu().numpy", "img.detach().cpu", "img.detach"], "function", ["None"], ["", "def", "de_torch", "(", "img", ")", ":", "\n", "    ", "return", "img", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.move_color_channel": [[19, 26], ["np.moveaxis", "print"], "function", ["None"], ["", "def", "move_color_channel", "(", "image", ")", ":", "\n", "\n", "    ", "try", ":", "\n", "        ", "out", "=", "np", ".", "moveaxis", "(", "image", ",", "0", ",", "-", "1", ")", "\n", "return", "out", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "f\"Got {e}, input image shape = {image.shape}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.BGR2RGB_numpy": [[28, 34], ["np.empty_like"], "function", ["None"], ["", "", "def", "BGR2RGB_numpy", "(", "image", ")", ":", "\n", "    ", "temp", "=", "np", ".", "empty_like", "(", "image", ")", "\n", "temp", "[", ":", ",", ":", ",", "0", "]", "=", "image", "[", ":", ",", ":", ",", "2", "]", "\n", "temp", "[", ":", ",", ":", ",", "1", "]", "=", "image", "[", ":", ",", ":", ",", "1", "]", "\n", "temp", "[", ":", ",", ":", ",", "2", "]", "=", "image", "[", ":", ",", ":", ",", "0", "]", "\n", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.BGR2RGB_pytorch": [[36, 42], ["torch.empty_like"], "function", ["None"], ["", "def", "BGR2RGB_pytorch", "(", "images", ")", ":", "\n", "    ", "temp", "=", "torch", ".", "empty_like", "(", "images", ")", "\n", "temp", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "images", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "temp", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "images", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "temp", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "images", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._recolour_label": [[44, 61], ["label.cpu.max", "eval", "np.take", "torch.from_numpy", "type", "label.cpu.cpu"], "function", ["None"], ["", "def", "_recolour_label", "(", "label", ",", "dataset", ",", "axis", "=", "0", ")", ":", "\n", "\n", "    ", "if", "dataset", "==", "\"LIDC\"", ":", "\n", "        ", "return", "label", "\n", "\n", "", "elif", "label", ".", "max", "(", ")", ">", "1", ":", "\n", "\n", "        ", "if", "type", "(", "label", ")", "!=", "np", ".", "ndarray", ":", "\n", "            ", "label", "=", "label", ".", "cpu", "(", ")", "\n", "\n", "", "colour_palette", "=", "eval", "(", "f\"constants.{dataset}_NEW_COLOURS\"", ")", "\n", "\n", "label", "=", "np", ".", "take", "(", "colour_palette", ",", "label", ",", "axis", "=", "axis", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "label", ")", "\n", "", "else", ":", "\n", "        ", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._1hot_2_2d": [[63, 83], ["label.index_select().squeeze", "torch.distributions.one_hot_categorical.OneHotCategorical", "torch.distributions.one_hot_categorical.OneHotCategorical.sample().argmax", "label.argmax", "label.index_select", "torch.tensor().to", "label.permute", "torch.distributions.one_hot_categorical.OneHotCategorical.sample", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.sample"], ["", "", "def", "_1hot_2_2d", "(", "label", ",", "sample", "=", "False", ",", "dim", "=", "0", ")", ":", "\n", "\n", "    ", "if", "label", ".", "shape", "[", "2", "]", "==", "3", ":", "#if the label is an rgb image normalize instead of discretizing", "\n", "        ", "return", "(", "label", "+", "1", ")", "/", "2", "\n", "", "else", ":", "\n", "\n", "        ", "assert", "label", ".", "shape", "[", "2", "]", "!=", "3", "or", "label", ".", "shape", "[", "\n", "3", "]", "!=", "2", ",", "\"Unexpected input to convert to 2d format. Expected one-hot vector segmentation map\"", "\n", "\n", "if", "constants", ".", "LABELS_CHANNELS", "==", "2", ":", "\n", "\n", "            ", "dense", "=", "label", ".", "index_select", "(", "dim", ",", "torch", ".", "tensor", "(", "1", ")", ".", "to", "(", "DEVICE", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "sample", ":", "\n", "                ", "categorical", "=", "torch", ".", "distributions", ".", "one_hot_categorical", ".", "OneHotCategorical", "(", "probs", "=", "label", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ")", "# move channel dim to last dim", "\n", "dense", "=", "categorical", ".", "sample", "(", ")", ".", "argmax", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "dense", "=", "label", ".", "argmax", "(", "dim", ")", "# channel dimension = 0", "\n", "", "", "return", "dense", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.get_transforms_list": [[84, 122], ["eval", "data.transformations.RescaleValues", "data.transformations.ChangeChannels", "data.transformations.ClassFlip", "data.transformations._2d_to_1hot", "data.transformations.Crop", "data.transformations.RandomHorizontalFlip", "data.transformations.RCrop", "data.transformations.RandomScaleCrop", "data.transformations.Resize", "data.transformations.Crop", "data.transformations.RandomScaleCrop", "data.transformations.Resize", "data.transformations.RandomScaleCrop", "data.transformations.RandomRescale", "np.linspace", "np.linspace"], "function", ["None"], ["", "", "def", "get_transforms_list", "(", "mode", ",", "args", ")", ":", "\n", "# add desired transformations to list", "\n", "    ", "transforms_list", "=", "[", "]", "\n", "\n", "if", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", ":", "\n", "# crop 256x512 images to 128x128", "\n", "        ", "if", "mode", "==", "\"train\"", ":", "\n", "            ", "if", "args", ".", "imsize", "!=", "(", "256", ",", "512", ")", ":", "\n", "                ", "if", "args", ".", "imsize", "==", "(", "128", ",", "128", ")", ":", "\n", "                    ", "transforms_list", "+=", "[", "\n", "transformations", ".", "RandomScaleCrop", "(", "imsize", "=", "IMSIZE", ",", "probability", "=", "1", ",", "scales", "=", "[", "0.85", "]", ")", "]", "\n", "transforms_list", "+=", "[", "transformations", ".", "RandomRescale", "(", "scales", "=", "np", ".", "linspace", "(", ".6", ",", "1", ",", "4", ")", ")", "]", "\n", "", "transforms_list", "+=", "[", "transformations", ".", "RCrop", "(", "imsize", "=", "IMSIZE", ")", "]", "\n", "", "else", ":", "\n", "                ", "transforms_list", "+=", "[", "transformations", ".", "RandomScaleCrop", "(", "imsize", "=", "IMSIZE", ",", "scales", "=", "np", ".", "linspace", "(", ".6", ",", ".99", ",", "4", ")", ")", "]", "\n", "transforms_list", "+=", "[", "transformations", ".", "Resize", "(", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "args", ".", "imsize", "!=", "(", "256", ",", "512", ")", ":", "\n", "                ", "transforms_list", "+=", "[", "transformations", ".", "Crop", "(", "imsize", "=", "IMSIZE", ")", "]", "# takes a central crop", "\n", "", "", "", "elif", "args", ".", "dataset", "==", "\"LIDC\"", ":", "\n", "        ", "transforms_list", "+=", "[", "transformations", ".", "Crop", "(", "imsize", "=", "IMSIZE", ")", "]", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "crop", "and", "mode", "==", "\"train\"", ":", "transforms_list", "+=", "[", "\n", "transformations", ".", "RandomScaleCrop", "(", "probability", "=", "1", ",", "scales", "=", "[", "0.6", ",", "0.7", ",", "0.8", "]", ")", "]", "\n", "if", "args", ".", "resize", ":", "transforms_list", "+=", "[", "transformations", ".", "Resize", "(", ")", "]", "\n", "\n", "", "if", "not", "(", "args", ".", "dataset", "==", "\"LIDC\"", "and", "mode", "!=", "\"train\"", ")", ":", "\n", "        ", "if", "mode", "==", "\"train\"", ":", "transforms_list", "+=", "[", "transformations", ".", "RandomHorizontalFlip", "(", ")", "]", "\n", "\n", "", "if", "(", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", "and", "args", ".", "class_flip", "and", "mode", "==", "\"train\"", ")", ":", "\n", "        ", "flip_args", "=", "eval", "(", "f\"CITYSCAPES19_{args.flip_experiment}FLIP\"", ")", "\n", "transforms_list", "+=", "[", "transformations", ".", "ClassFlip", "(", "*", "flip_args", ")", "]", "# only flip in train mode!", "\n", "", "if", "not", "(", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", "and", "args", ".", "class_flip", "and", "mode", "!=", "\"train\"", ")", ":", "# dont transform on CS val or test dataset", "\n", "        ", "transforms_list", "+=", "[", "transformations", ".", "_2d_to_1hot", "(", ")", "]", "\n", "\n", "", "transforms_list", "+=", "[", "transformations", ".", "RescaleValues", "(", ")", ",", "transformations", ".", "ChangeChannels", "(", ")", "]", "\n", "\n", "return", "transforms_list", "\n", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.pretrained_utils.deeplabv3_segmentation": [[7, 12], ["torchvision.models.segmentation.deeplabv3_resnet101", "torchvision.models.segmentation.deeplabv3_resnet101", "model.to.to"], "function", ["None"], ["def", "deeplabv3_segmentation", "(", "n_classes", ")", ":", "\n", "    ", "model", "=", "torchvision", ".", "models", ".", "segmentation", ".", "deeplabv3_resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "num_classes", "=", "n_classes", ",", "aux_loss", "=", "None", ")", "\n", "model", "=", "model", ".", "to", "(", "DEVICE", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.pretrained_utils.resnet50_segmentation": [[13, 18], ["torchvision.models.segmentation.fcn_resnet50", "torchvision.models.segmentation.fcn_resnet50", "model.to.to"], "function", ["None"], ["", "def", "resnet50_segmentation", "(", "n_classes", ")", ":", "\n", "    ", "model", "=", "torchvision", ".", "models", ".", "segmentation", ".", "fcn_resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "num_classes", "=", "n_classes", ",", "aux_loss", "=", "None", ")", "\n", "model", "=", "model", ".", "to", "(", "DEVICE", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.pretrained_utils.resnet101_segmentation": [[19, 24], ["torchvision.models.segmentation.fcn_resnet101", "torchvision.models.segmentation.fcn_resnet101", "model.to.to"], "function", ["None"], ["", "def", "resnet101_segmentation", "(", "n_classes", ",", "pretrained", "=", "False", ")", ":", "\n", "    ", "model", "=", "torchvision", ".", "models", ".", "segmentation", ".", "fcn_resnet101", "(", "pretrained", "=", "pretrained", ",", "progress", "=", "True", ",", "num_classes", "=", "n_classes", ",", "aux_loss", "=", "None", ")", "\n", "model", "=", "model", ".", "to", "(", "DEVICE", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.pretrained_utils.resnet50": [[25, 30], ["torchvision.models.resnet50", "torchvision.models.resnet50", "model.to.to"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.pretrained_utils.resnet50", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.pretrained_utils.resnet50"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "model", "=", "torchvision", ".", "models", ".", "resnet50", "(", "pretrained", "=", "pretrained", ",", "progress", "=", "True", ")", "\n", "model", "=", "model", ".", "to", "(", "DEVICE", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.pretrained_utils.googlenet": [[31, 36], ["torchvision.models.googlenet", "torchvision.models.googlenet", "model.to.to"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.pretrained_utils.googlenet", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.pretrained_utils.googlenet"], ["", "def", "googlenet", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "model", "=", "torchvision", ".", "models", ".", "googlenet", "(", "pretrained", "=", "pretrained", ",", "progress", "=", "True", ")", "\n", "model", "=", "model", ".", "to", "(", "DEVICE", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.pretrained_utils.VGG_19": [[37, 42], ["torchvision.vgg19", "VGG.to.to", "VGG.to.eval"], "function", ["None"], ["", "def", "VGG_19", "(", ")", ":", "\n", "    ", "VGG", "=", "vgg", ".", "vgg19", "(", "pretrained", "=", "True", ")", "\n", "VGG", "=", "VGG", ".", "to", "(", "DEVICE", ")", "\n", "\n", "return", "VGG", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.pretrained_utils.inceptionv3": [[43, 48], ["torchvision.models.inception_v3", "torchvision.models.inception_v3", "model.to.to"], "function", ["None"], ["", "def", "inceptionv3", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "model", "=", "torchvision", ".", "models", ".", "inception_v3", "(", "pretrained", "=", "pretrained", ",", "progress", "=", "True", ")", "\n", "model", "=", "model", ".", "to", "(", "DEVICE", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.architecture_utils.Flatten.forward": [[43, 45], ["input.view", "input.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.architecture_utils.UnFlatten.__init__": [[49, 53], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "im_size", ")", ":", "\n", "        ", "self", ".", "n_channels", "=", "n_channels", "\n", "self", ".", "im_size", "=", "im_size", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.architecture_utils.UnFlatten.forward": [[54, 57], ["input.view", "input.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "n_channels", ",", "self", ".", "im_size", "[", "0", "]", ",", "self", ".", "im_size", "[", "1", "]", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.architecture_utils.Noise_injector.__init__": [[59, 77], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Conv2d", "architecture_utils.Noise_injector.residual.apply", "architecture_utils.Noise_injector.scale.apply", "architecture_utils.Noise_injector.last_layer.apply"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_hidden", ",", "z_dim", ",", "num_channels", ",", "n_channels_out", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "\n", "        ", "super", "(", "Noise_injector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "self", ".", "n_channels_out", "=", "n_channels_out", "\n", "self", ".", "n_hidden", "=", "n_hidden", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "residual", "=", "nn", ".", "Linear", "(", "self", ".", "z_dim", ",", "self", ".", "n_hidden", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Linear", "(", "self", ".", "z_dim", ",", "self", ".", "n_hidden", ")", "\n", "\n", "self", ".", "last_layer", "=", "nn", ".", "Conv2d", "(", "self", ".", "n_hidden", ",", "self", ".", "n_channels_out", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "residual", ".", "apply", "(", "weights_init", ")", "\n", "self", ".", "scale", ".", "apply", "(", "weights_init", ")", "\n", "self", ".", "last_layer", ".", "apply", "(", "init_weights_orthogonal_normal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.architecture_utils.Noise_injector.forward": [[78, 86], ["architecture_utils.Noise_injector.residual().view", "architecture_utils.Noise_injector.scale().view", "architecture_utils.Noise_injector.last_layer", "architecture_utils.Noise_injector.residual", "architecture_utils.Noise_injector.scale"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feature_map", ",", "z", ")", ":", "\n", "\n", "        ", "residual", "=", "self", ".", "residual", "(", "z", ")", ".", "view", "(", "z", ".", "shape", "[", "0", "]", ",", "self", ".", "n_hidden", ",", "1", ",", "1", ")", "\n", "scale", "=", "self", ".", "scale", "(", "z", ")", ".", "view", "(", "z", ".", "shape", "[", "0", "]", ",", "self", ".", "n_hidden", ",", "1", ",", "1", ")", "\n", "\n", "feature_map", "=", "(", "feature_map", "+", "residual", ")", "*", "(", "scale", "+", "1e-5", ")", "\n", "\n", "return", "self", ".", "last_layer", "(", "feature_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.architecture_utils.initialize_weights": [[3, 13], ["model.modules", "isinstance", "isinstance", "torch.init.kaiming_normal", "isinstance", "module.bias.data.zero_", "module.weight.data.fill_", "module.bias.data.zero_"], "function", ["None"], ["def", "initialize_weights", "(", "*", "models", ")", ":", "\n", "    ", "for", "model", "in", "models", ":", "\n", "        ", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.architecture_utils.truncated_normal_": [[14, 21], ["tensor.new_empty().normal_", "tensor.data.copy_", "tensor.data.mul_().add_", "valid.max", "tensor.new_empty().normal_.gather().squeeze", "tensor.new_empty", "tensor.data.mul_", "tensor.new_empty().normal_.gather"], "function", ["None"], ["", "", "", "", "def", "truncated_normal_", "(", "tensor", ",", "mean", "=", "0", ",", "std", "=", "1", ")", ":", "\n", "    ", "size", "=", "tensor", ".", "shape", "\n", "tmp", "=", "tensor", ".", "new_empty", "(", "size", "+", "(", "4", ",", ")", ")", ".", "normal_", "(", ")", "\n", "valid", "=", "(", "tmp", "<", "2", ")", "&", "(", "tmp", ">", "-", "2", ")", "\n", "ind", "=", "valid", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "tensor", ".", "data", ".", "copy_", "(", "tmp", ".", "gather", "(", "-", "1", ",", "ind", ")", ".", "squeeze", "(", "-", "1", ")", ")", "\n", "tensor", ".", "data", ".", "mul_", "(", "std", ")", ".", "add_", "(", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.architecture_utils.init_weights_unet": [[22, 26], ["torch.init.kaiming_normal_", "architecture_utils.truncated_normal_", "type", "type"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.architecture_utils.truncated_normal_"], ["", "def", "init_weights_unet", "(", "m", ")", ":", "\n", "    ", "if", "type", "(", "m", ")", "==", "nn", ".", "Conv2d", "or", "type", "(", "m", ")", "==", "nn", ".", "ConvTranspose2d", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "truncated_normal_", "(", "m", ".", "bias", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.architecture_utils.init_weights_orthogonal_normal": [[27, 31], ["torch.init.orthogonal_", "architecture_utils.truncated_normal_", "type", "type"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.architecture_utils.truncated_normal_"], ["", "", "def", "init_weights_orthogonal_normal", "(", "m", ")", ":", "\n", "    ", "if", "type", "(", "m", ")", "==", "nn", ".", "Conv2d", "or", "type", "(", "m", ")", "==", "nn", ".", "ConvTranspose2d", ":", "\n", "        ", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ")", "\n", "truncated_normal_", "(", "m", ".", "bias", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.architecture_utils.weights_init": [[33, 40], ["m.weight.data.normal_", "classname.find", "torch.init.xavier_uniform_", "m.bias.data.fill_", "type", "type"], "function", ["None"], ["", "", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "type", "(", "m", ")", "==", "nn", ".", "Conv2d", "or", "type", "(", "m", ")", "==", "nn", ".", "ConvTranspose2d", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.setup_directories": [[9, 14], ["DATA_MANAGER.create_dir"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.data_management.DataManager.create_dir"], ["def", "setup_directories", "(", ")", ":", "\n", "    ", "stamp", "=", "DATA_MANAGER", ".", "stamp", "\n", "dirs", "=", "OUTPUT_DIRS", "\n", "for", "dir_to_be", "in", "dirs", ":", "\n", "        ", "DATA_MANAGER", ".", "create_dir", "(", "f\"{stamp}/{dir_to_be}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_type": [[15, 18], ["utils.training_helpers.instance_checker"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.instance_checker"], ["", "", "def", "assert_type", "(", "expectedType", ",", "content", ")", ":", "\n", "    ", "\"\"\" makes sure type is respected\"\"\"", "\n", "assert", "instance_checker", "(", "content", ",", "expectedType", ")", ",", "f\"{content} is not {expectedType}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_non_empty": [[19, 26], ["inspect.stack", "type", "type", "len", "type"], "function", ["None"], ["", "def", "assert_non_empty", "(", "content", ")", ":", "\n", "    ", "\"\"\" makes sure not None or len()==0 \"\"\"", "\n", "\n", "func", "=", "inspect", ".", "stack", "(", ")", "[", "1", "]", "[", "3", "]", "\n", "assert", "not", "content", "==", "None", ",", "\"Content is null in {}\"", ".", "format", "(", "func", ")", "\n", "if", "(", "type", "(", "content", ")", "is", "list", "or", "type", "(", "content", ")", "==", "str", ")", ":", "\n", "        ", "assert", "len", "(", "content", ")", ">", "0", ",", "\"Empty {} in {}\"", ".", "format", "(", "type", "(", "content", ")", ",", "func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.get_loss_weights": [[28, 40], ["print", "arguments.__dict__.items"], "function", ["None"], ["", "", "def", "get_loss_weights", "(", "arguments", ")", ":", "\n", "    ", "\"\"\" returns a dictionary with the right loss weights given parsed arguments \"\"\"", "\n", "\n", "default_returnvalue", "=", "{", "key", ":", "value", "for", "key", ",", "value", "in", "arguments", ".", "__dict__", ".", "items", "(", ")", "if", "\n", "(", "(", "\"weight\"", "in", "key", ")", "and", "(", "not", "value", "==", "-", "1", ")", ")", "}", "\n", "if", "(", "not", "arguments", ".", "loss_gen", "==", "TOTAL_G_LOSS", ")", ":", "\n", "        ", "for", "key", "in", "default_returnvalue", ":", "\n", "            ", "if", "(", "not", "arguments", ".", "loss_gen", "in", "key", ")", ":", "\n", "                ", "default_returnvalue", "[", "key", "]", "=", "0.0", "\n", "\n", "", "", "", "print", "(", "default_returnvalue", ")", "\n", "return", "default_returnvalue", "\n", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.nanmean": [[19, 26], ["torch.isnan", "v.clone.clone", "v.clone.sum"], "function", ["None"], ["def", "nanmean", "(", "v", ",", "*", "args", ",", "inplace", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "not", "inplace", ":", "\n", "        ", "v", "=", "v", ".", "clone", "(", ")", "\n", "", "is_nan", "=", "torch", ".", "isnan", "(", "v", ")", "\n", "v", "[", "is_nan", "]", "=", "0", "\n", "\n", "return", "v", ".", "sum", "(", "*", "args", ",", "**", "kwargs", ")", "/", "(", "~", "is_nan", ")", ".", "float", "(", ")", ".", "sum", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_foreground_IoU": [[28, 41], ["preds.argmax().flatten().cpu().numpy.argmax().flatten().cpu().numpy", "labels.argmax().flatten().cpu().numpy.argmax().flatten().cpu().numpy", "preds.argmax().flatten().cpu().numpy.argmax().flatten().cpu", "labels.argmax().flatten().cpu().numpy.argmax().flatten().cpu", "preds.argmax().flatten().cpu().numpy.sum", "labels.argmax().flatten().cpu().numpy.sum", "sklearn.jaccard_score", "preds.argmax().flatten().cpu().numpy.argmax().flatten", "labels.argmax().flatten().cpu().numpy.argmax().flatten", "labels.argmax().flatten().cpu().numpy.sum", "preds.argmax().flatten().cpu().numpy.sum", "preds.argmax().flatten().cpu().numpy.sum", "labels.argmax().flatten().cpu().numpy.sum", "preds.argmax().flatten().cpu().numpy.argmax", "labels.argmax().flatten().cpu().numpy.argmax"], "function", ["None"], ["", "def", "get_foreground_IoU", "(", "preds", ",", "labels", ")", ":", "\n", "\n", "# convert labels and predictions to discrete format", "\n", "    ", "preds", "=", "preds", ".", "argmax", "(", "0", ")", ".", "flatten", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "labels", "=", "labels", ".", "argmax", "(", "0", ")", ".", "flatten", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "preds", ".", "sum", "(", ")", "+", "labels", ".", "sum", "(", ")", "==", "0", ":", "\n", "        ", "return", "1.0", "\n", "", "elif", "labels", ".", "sum", "(", ")", ">", "0", "and", "preds", ".", "sum", "(", ")", "==", "0", "or", "preds", ".", "sum", "(", ")", "==", "0", "and", "labels", ".", "sum", "(", ")", ">", "0", ":", "\n", "        ", "return", "0.", "\n", "", "else", ":", "\n", "        ", "return", "metrics", ".", "jaccard_score", "(", "preds", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_confusion_matrix": [[43, 81], ["torch.zeros().to", "preds.argmax().to.argmax().to", "labels.argmax().to.argmax().to", "enumerate", "torch.arange().to", "len", "torch.tensor", "torch.zeros", "int", "int", "int", "int", "AssertionError", "torch.zeros", "preds.argmax().to.argmax", "labels.argmax().to.argmax", "torch.arange"], "function", ["None"], ["", "", "def", "get_confusion_matrix", "(", "preds", ",", "labels", ",", "class_idxs", "=", "None", ",", "ignore", "=", "24", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "assert", "labels", ".", "shape", "==", "preds", ".", "shape", "\n", "", "except", ":", "\n", "        ", "raise", "AssertionError", "(", "f'shape mismatch {labels.shape} vs. {preds.shape}'", ")", "\n", "\n", "", "if", "class_idxs", "is", "None", ":", "\n", "        ", "n_labels", "=", "LABELS_CHANNELS", "\n", "classes", "=", "torch", ".", "arange", "(", "n_labels", ")", ".", "to", "(", "DEVICE", ")", "\n", "", "else", ":", "\n", "        ", "n_labels", "=", "len", "(", "class_idxs", ")", "\n", "classes", "=", "torch", ".", "tensor", "(", "class_idxs", ")", "\n", "\n", "# initialize confusion matrix", "\n", "", "c_matrix", "=", "torch", ".", "zeros", "(", "(", "n_labels", ",", "4", ")", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "# convert labels and predictions to discrete format", "\n", "preds", "=", "preds", ".", "argmax", "(", "0", ")", ".", "to", "(", "DEVICE", ")", "\n", "labels", "=", "labels", ".", "argmax", "(", "0", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "# ignore mask", "\n", "if", "ignore", "is", "None", ":", "\n", "        ", "shape", "=", "labels", ".", "shape", "\n", "ignore_mask", "=", "torch", ".", "zeros", "(", "(", "shape", "[", "0", "]", ",", "1", ",", "shape", "[", "2", "]", ",", "shape", "[", "3", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "ignore_mask", "=", "(", "labels", "==", "24", ")", "\n", "\n", "", "for", "i", ",", "c", "in", "enumerate", "(", "classes", ")", ":", "\n", "\n", "        ", "b_preds", "=", "(", "preds", "==", "c", ")", "# binarize predictions", "\n", "b_labels_", "=", "(", "labels", "==", "c", ")", "# binarize labels", "\n", "\n", "c_matrix", "[", "i", ",", "0", "]", "=", "int", "(", "(", "(", "b_preds", "!=", "0", ")", "*", "(", "b_labels_", "!=", "0", ")", "*", "(", "ignore_mask", "!=", "1", ")", ")", ".", "sum", "(", ")", ")", "# TP", "\n", "c_matrix", "[", "i", ",", "1", "]", "=", "int", "(", "(", "(", "b_preds", "!=", "0", ")", "*", "(", "b_labels_", "==", "0", ")", "*", "(", "ignore_mask", "!=", "1", ")", ")", ".", "sum", "(", ")", ")", "# FP", "\n", "c_matrix", "[", "i", ",", "2", "]", "=", "int", "(", "(", "(", "b_preds", "==", "0", ")", "*", "(", "b_labels_", "==", "0", ")", "*", "(", "ignore_mask", "!=", "1", ")", ")", ".", "sum", "(", ")", ")", "# TN", "\n", "c_matrix", "[", "i", ",", "3", "]", "=", "int", "(", "(", "(", "b_preds", "==", "0", ")", "*", "(", "b_labels_", "!=", "0", ")", "*", "(", "ignore_mask", "!=", "1", ")", ")", ".", "sum", "(", ")", ")", "# FN", "\n", "\n", "", "return", "c_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_IoU": [[82, 99], ["torch.zeros().to", "torch.arange", "torch.zeros"], "function", ["None"], ["", "def", "get_IoU", "(", "c_matrix", ")", ":", "\n", "    ", "tp", "=", "c_matrix", "[", ":", ",", "0", "]", "\n", "fp", "=", "c_matrix", "[", ":", ",", "1", "]", "\n", "fn", "=", "c_matrix", "[", ":", ",", "3", "]", "\n", "\n", "iou", "=", "torch", ".", "zeros", "(", "tp", ".", "shape", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "classes", "=", "torch", ".", "arange", "(", "tp", ".", "shape", "[", "0", "]", ")", "\n", "\n", "for", "c", "in", "classes", ":", "\n", "# unless both the prediction and the ground-truth is empty, calculate a finite IoU", "\n", "        ", "if", "tp", "[", "c", "]", "+", "fp", "[", "c", "]", "+", "fn", "[", "c", "]", "!=", "0", ":", "\n", "            ", "iou", "[", "c", "]", "=", "tp", "[", "c", "]", "/", "(", "tp", "[", "c", "]", "+", "fp", "[", "c", "]", "+", "fn", "[", "c", "]", ")", "\n", "", "else", ":", "\n", "            ", "iou", "[", "c", "]", "=", "np", ".", "nan", "\n", "\n", "", "", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_mode_statistics": [[100, 122], ["np.zeros", "range", "torch.zeros().float().to", "range", "enumerate", "torch.tensor", "torch.sum", "torch.zeros().float", "torch.zeros"], "function", ["None"], ["", "def", "get_mode_statistics", "(", "probabilities", ",", "n_flipped_modes", "=", "5", ")", ":", "\n", "\n", "    ", "num_modes", "=", "2", "**", "n_flipped_modes", "\n", "\n", "# assemble a binary matrix of flips decisions", "\n", "flips", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_modes", ",", "5", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "n_flipped_modes", ")", ":", "\n", "        ", "flips", "[", ":", ",", "i", "]", "=", "2", "**", "i", "*", "(", "2", "**", "(", "n_flipped_modes", "-", "1", "-", "i", ")", "*", "[", "0", "]", "+", "2", "**", "(", "n_flipped_modes", "-", "1", "-", "i", ")", "*", "[", "1", "]", ")", "# gets all mode permutations", "\n", "\n", "# calculate the probability for each individual mode", "\n", "", "mode_probs", "=", "torch", ".", "zeros", "(", "(", "num_modes", ",", ")", ")", ".", "float", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "for", "mode", "in", "range", "(", "num_modes", ")", ":", "\n", "        ", "prob", "=", "1.", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "probabilities", ")", ":", "\n", "            ", "if", "flips", "[", "mode", ",", "i", "]", ":", "\n", "                ", "prob", "*=", "p", "\n", "", "else", ":", "\n", "                ", "prob", "*=", "1.", "-", "p", "\n", "", "", "mode_probs", "[", "mode", "]", "=", "torch", ".", "tensor", "(", "prob", ")", "\n", "", "assert", "torch", ".", "sum", "(", "mode_probs", ")", "==", "1.", "\n", "\n", "return", "{", "'flips'", ":", "flips", ",", "'probs'", ":", "mode_probs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_cs_ignore_mask": [[124, 137], ["torch.arange", "torch.tensor", "bb_preds.argmax", "labels.argmax"], "function", ["None"], ["", "def", "get_cs_ignore_mask", "(", "bb_preds", ",", "labels", ")", ":", "\n", "\n", "    ", "assert", "bb_preds", ".", "shape", "==", "labels", ".", "shape", ",", "f\"bb_preds shape = {bb_preds.shape}, labels shape = {labels.shape}\"", "\n", "\n", "orig_classes", "=", "torch", ".", "arange", "(", "25", ")", "\n", "orig_classes", "[", "19", ":", "24", "]", "=", "torch", ".", "tensor", "(", "[", "1", ",", "11", ",", "13", ",", "8", ",", "0", "]", ")", "\n", "\n", "# convert all flipped classes to original classes", "\n", "pres", "=", "orig_classes", "[", "bb_preds", ".", "argmax", "(", "1", ")", "]", "\n", "lbs", "=", "orig_classes", "[", "labels", ".", "argmax", "(", "1", ")", "]", "\n", "mask", "=", "pres", "==", "lbs", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_energy_distance_components": [[139, 191], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "range", "len", "range", "range", "torch.zeros", "torch.zeros", "torch.zeros", "range", "evaluation_utils.get_confusion_matrix", "evaluation_utils.get_IoU", "evaluation_utils.get_foreground_IoU", "evaluation_utils.get_confusion_matrix", "evaluation_utils.get_IoU", "evaluation_utils.get_foreground_IoU", "evaluation_utils.get_confusion_matrix", "evaluation_utils.get_IoU", "evaluation_utils.get_foreground_IoU"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_confusion_matrix", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_IoU", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_foreground_IoU", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_confusion_matrix", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_IoU", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_foreground_IoU", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_confusion_matrix", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_IoU", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_foreground_IoU"], ["", "def", "get_energy_distance_components", "(", "labels", ",", "preds", ",", "class_idxs", "=", "None", ",", "n_labels", "=", "None", ",", "args", "=", "None", ")", ":", "\n", "\n", "    ", "if", "class_idxs", "is", "None", ":", "\n", "        ", "n_classes", "=", "LABELS_CHANNELS", "\n", "", "else", ":", "\n", "        ", "n_classes", "=", "len", "(", "class_idxs", ")", "\n", "\n", "", "if", "n_labels", "is", "None", ":", "\n", "        ", "n_labels", "=", "labels", ".", "shape", "[", "0", "]", "\n", "\n", "", "n_present_labels", "=", "labels", ".", "shape", "[", "0", "]", "\n", "n_preds", "=", "preds", ".", "shape", "[", "0", "]", "\n", "\n", "d_matrix_YS", "=", "torch", ".", "zeros", "(", "(", "n_present_labels", ",", "n_preds", ",", "n_classes", ")", ")", ".", "to", "(", "DEVICE", ")", "\n", "d_matrix_YY", "=", "torch", ".", "zeros", "(", "(", "n_labels", ",", "n_labels", ",", "n_classes", ")", ")", ".", "to", "(", "DEVICE", ")", "\n", "d_matrix_SS", "=", "torch", ".", "zeros", "(", "(", "n_preds", ",", "n_preds", ",", "n_classes", ")", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "for", "j", "in", "range", "(", "n_present_labels", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "n_preds", ")", ":", "\n", "\n", "            ", "if", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", ":", "\n", "                ", "c_matrix", "=", "get_confusion_matrix", "(", "labels", "[", "j", "]", ",", "preds", "[", "i", "]", ",", "class_idxs", "=", "class_idxs", ")", "\n", "iou", "=", "get_IoU", "(", "c_matrix", ")", "\n", "", "else", ":", "\n", "                ", "iou", "=", "get_foreground_IoU", "(", "labels", "[", "j", "]", ",", "preds", "[", "i", "]", ")", "\n", "\n", "", "d_matrix_YS", "[", "j", ",", "i", "]", "=", "1.", "-", "iou", "\n", "\n", "", "if", "j", "<=", "n_labels", ":", "\n", "            ", "for", "not_j", "in", "range", "(", "j", ",", "n_labels", ")", ":", "\n", "                ", "if", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", ":", "\n", "                    ", "c_matrix", "=", "get_confusion_matrix", "(", "labels", "[", "j", "]", ",", "labels", "[", "not_j", "]", ",", "class_idxs", "=", "class_idxs", ")", "\n", "iou", "=", "get_IoU", "(", "c_matrix", ")", "\n", "", "else", ":", "\n", "                    ", "iou", "=", "get_foreground_IoU", "(", "labels", "[", "j", "]", ",", "labels", "[", "not_j", "]", ")", "\n", "\n", "", "d_matrix_YY", "[", "j", ",", "not_j", "]", "=", "1.", "-", "iou", "\n", "d_matrix_YY", "[", "not_j", ",", "j", "]", "=", "1.", "-", "iou", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "n_preds", ")", ":", "\n", "# iterate all samples S'", "\n", "        ", "for", "j", "in", "range", "(", "i", ",", "n_preds", ")", ":", "\n", "            ", "if", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", ":", "\n", "                ", "c_matrix", "=", "get_confusion_matrix", "(", "preds", "[", "i", "]", ",", "preds", "[", "j", "]", ",", "class_idxs", "=", "class_idxs", ")", "\n", "iou", "=", "get_IoU", "(", "c_matrix", ")", "\n", "", "else", ":", "\n", "                ", "iou", "=", "get_foreground_IoU", "(", "preds", "[", "i", "]", ",", "preds", "[", "j", "]", ")", "\n", "\n", "", "d_matrix_SS", "[", "i", ",", "j", "]", "=", "1.", "-", "iou", "\n", "d_matrix_SS", "[", "j", ",", "i", "]", "=", "1.", "-", "iou", "\n", "\n", "", "", "return", "{", "'YS'", ":", "d_matrix_YS", ",", "'SS'", ":", "d_matrix_SS", ",", "'YY'", ":", "d_matrix_YY", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.calc_energy_distances": [[193, 234], ["d_matrices.copy.copy", "evaluation_utils.get_mode_statistics", "evaluation_utils.nanmean", "torch.mean", "torch.sum", "evaluation_utils.nanmean", "torch.mean", "evaluation_utils.nanmean", "torch.sum", "evaluation_utils.nanmean", "nanmean.mean", "evaluation_utils.nanmean", "nanmean.mean", "evaluation_utils.nanmean", "nanmean.mean", "len"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_mode_statistics", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.nanmean", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.nanmean", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.nanmean", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.nanmean", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.nanmean", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.nanmean"], ["", "def", "calc_energy_distances", "(", "d_matrices", ",", "num_samples", "=", "None", ",", "flip_probs", "=", "None", ")", ":", "\n", "\n", "    ", "d_matrices", "=", "d_matrices", ".", "copy", "(", ")", "\n", "\n", "if", "num_samples", "is", "None", ":", "\n", "        ", "num_samples", "=", "d_matrices", "[", "'SS'", "]", ".", "shape", "[", "1", "]", "\n", "\n", "", "d_matrices", "[", "'YS'", "]", "=", "d_matrices", "[", "'YS'", "]", "[", ":", ",", ":", ",", ":", "num_samples", "]", "\n", "d_matrices", "[", "'SS'", "]", "=", "d_matrices", "[", "'SS'", "]", "[", ":", ",", ":", "num_samples", ",", ":", "num_samples", "]", "\n", "\n", "if", "flip_probs", "is", "not", "None", ":", "\n", "        ", "mode_stats", "=", "get_mode_statistics", "(", "probabilities", "=", "flip_probs", ",", "n_flipped_modes", "=", "len", "(", "flip_probs", ")", ")", "\n", "mode_probs", "=", "mode_stats", "[", "'probs'", "]", "\n", "\n", "mean_d_YS", "=", "nanmean", "(", "d_matrices", "[", "'YS'", "]", ",", "dim", "=", "-", "1", ")", "\n", "mean_d_YS", "=", "torch", ".", "mean", "(", "mean_d_YS", ",", "dim", "=", "2", ")", "\n", "mean_d_YS", "=", "mean_d_YS", "*", "mode_probs", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "d_YS", "=", "torch", ".", "sum", "(", "mean_d_YS", ",", "dim", "=", "1", ")", "\n", "\n", "mean_d_SS", "=", "nanmean", "(", "d_matrices", "[", "'SS'", "]", ",", "dim", "=", "-", "1", ")", "\n", "d_SS", "=", "torch", ".", "mean", "(", "mean_d_SS", ",", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "\n", "mean_d_YY", "=", "nanmean", "(", "d_matrices", "[", "'YY'", "]", ",", "dim", "=", "-", "1", ")", "\n", "mean_d_YY", "=", "mean_d_YY", "*", "mode_probs", "[", "np", ".", "newaxis", ",", ":", ",", "np", ".", "newaxis", "]", "*", "mode_probs", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "d_YY", "=", "torch", ".", "sum", "(", "mean_d_YY", ",", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "mean_d_YS", "=", "nanmean", "(", "d_matrices", "[", "'YS'", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "d_YS", "=", "mean_d_YS", ".", "mean", "(", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "\n", "mean_d_SS", "=", "nanmean", "(", "d_matrices", "[", "'SS'", "]", ",", "dim", "=", "-", "1", ")", "\n", "d_SS", "=", "mean_d_SS", ".", "mean", "(", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "\n", "mean_d_YY", "=", "nanmean", "(", "d_matrices", "[", "'YY'", "]", ",", "dim", "=", "-", "1", ")", "\n", "d_YY", "=", "mean_d_YY", ".", "mean", "(", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "\n", "", "GED", "=", "2", "*", "d_YS", "-", "d_SS", "-", "d_YY", "\n", "\n", "return", "GED", ",", "d_YS", ",", "d_SS", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.compute_iou": [[235, 244], ["evaluation_utils.get_confusion_matrix", "evaluation_utils.get_IoU", "evaluation_utils.get_foreground_IoU"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_confusion_matrix", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_IoU", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_foreground_IoU"], ["", "def", "compute_iou", "(", "fake_labels", ",", "labels", ",", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", ":", "\n", "        ", "c_matrix", "=", "get_confusion_matrix", "(", "fake_labels", ",", "labels", ")", "\n", "iou", "=", "get_IoU", "(", "c_matrix", ")", "\n", "", "else", ":", "\n", "        ", "iou", "=", "get_foreground_IoU", "(", "labels", ",", "fake_labels", ")", "\n", "\n", "", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.compute_ged": [[246, 302], ["range", "d_matrices.keys", "evaluation_utils.calc_energy_distances", "[].permute().to", "evaluation_utils.get_energy_distance_components", "d_matrices.keys", "torch.stack", "len", "[].permute.repeat", "[].permute", "evaluation_utils.nanmean", "[].mean", "hungarian_scores.append", "d_matrices[].append", "torch.tensor", "[].permute", "len", "len", "len", "eval", "len", "[].mean.item", "len", "eval", "eval", "len", "torch.eye", "torch.eye", "gt_dist.long", "scipy.optimize.linear_sum_assignment", "gt_dist.long", "nanmean.cpu().numpy", "nanmean.cpu"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.calc_energy_distances", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_energy_distance_components", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.nanmean"], ["", "def", "compute_ged", "(", "pred_dist", ",", "gt_dist", ",", "calnet_preds", ",", "args", ",", "g_input", "=", "None", ",", "n_samples", "=", "20", ",", "return_hungarian", "=", "False", ")", ":", "\n", "\n", "    ", "orig_n_labels", "=", "None", "\n", "\n", "if", "args", ".", "dataset", "==", "\"LIDC\"", ":", "\n", "        ", "eval_class_idxs", "=", "None", "\n", "probs", "=", "None", "\n", "\n", "# convert labels from discrete to 1-hot format and move channel dimension", "\n", "lab_dist", "=", "torch", ".", "eye", "(", "LABELS_CHANNELS", ")", "[", "(", "gt_dist", ")", ".", "long", "(", ")", "]", ".", "permute", "(", "1", ",", "0", ",", "4", ",", "2", ",", "3", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "# todo if eval hungarian", "\n", "# duplicate gt labels as many times as it is needed so that the number of elements in", "\n", "# the predictive distribution and gt distribution are equal", "\n", "if", "return_hungarian", "and", "len", "(", "lab_dist", ")", "!=", "args", ".", "n_generator_samples_test", ":", "\n", "            ", "orig_n_labels", "=", "len", "(", "lab_dist", ")", "\n", "n_repeats", "=", "args", ".", "n_generator_samples_test", "//", "len", "(", "lab_dist", ")", "\n", "lab_dist", "=", "lab_dist", ".", "repeat", "(", "n_repeats", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "assert", "len", "(", "lab_dist", ")", "==", "args", ".", "n_generator_samples_test", ",", "f\"Lab dist ({len(lab_dist)}) and pred samples ({args.n_generator_samples_test}) need to be the same number to compute the hungarian-matched iou. \"", "\n", "\n", "", "", "elif", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", ":", "\n", "\n", "        ", "lab_dist", "=", "torch", ".", "eye", "(", "LABELS_CHANNELS", ")", "[", "(", "gt_dist", ")", ".", "long", "(", ")", "]", ".", "permute", "(", "1", ",", "0", ",", "4", ",", "2", ",", "3", ")", "\n", "\n", "# get the idxs of switchable classes and the probability of each flip", "\n", "eval_class_idxs", "=", "eval", "(", "f\"CITYSCAPES19_{args.flip_experiment}FLIP\"", ")", "[", "0", "]", "+", "eval", "(", "f\"CITYSCAPES19_{args.flip_experiment}FLIP\"", ")", "[", "1", "]", "\n", "probs", "=", "eval", "(", "f\"CITYSCAPES19_{args.flip_experiment}FLIP\"", ")", "[", "2", "]", "\n", "\n", "", "d_matrices", "=", "{", "'YS'", ":", "[", "]", ",", "'SS'", ":", "[", "]", ",", "'YY'", ":", "[", "]", "}", "\n", "if", "return_hungarian", ":", "hungarian_scores", "=", "[", "]", "# initialize variable", "\n", "\n", "# aggregate results", "\n", "for", "i", "in", "range", "(", "lab_dist", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "d_matrix", "=", "get_energy_distance_components", "(", "lab_dist", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", ",", "pred_dist", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", ",", "class_idxs", "=", "eval_class_idxs", ",", "n_labels", "=", "orig_n_labels", ",", "args", "=", "args", ")", "\n", "\n", "if", "return_hungarian", ":", "\n", "            ", "assert", "len", "(", "lab_dist", ")", "==", "args", ".", "n_generator_samples_test", ",", "f\"Lab dist ({len(lab_dist)}) and pred samples ({args.n_generator_samples_test}) need to be the same number to compute the hungarian-matched iou. \"", "\n", "\n", "# compute Hungarian-matched IoU", "\n", "cost_matrix", "=", "nanmean", "(", "d_matrix", "[", "'YS'", "]", ",", "dim", "=", "-", "1", ")", "\n", "h_score", "=", "(", "1", "-", "cost_matrix", ")", "[", "scipy", ".", "optimize", ".", "linear_sum_assignment", "(", "cost_matrix", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "]", ".", "mean", "(", ")", "\n", "hungarian_scores", ".", "append", "(", "h_score", ".", "item", "(", ")", ")", "\n", "d_matrix", "[", "'YS'", "]", "=", "d_matrix", "[", "'YS'", "]", "[", ":", "orig_n_labels", "]", "# remove duplicates for GED computation", "\n", "\n", "", "for", "key", "in", "d_matrices", ".", "keys", "(", ")", ":", "\n", "            ", "d_matrices", "[", "key", "]", ".", "append", "(", "d_matrix", "[", "key", "]", ")", "\n", "\n", "", "", "for", "key", "in", "d_matrices", ".", "keys", "(", ")", ":", "\n", "        ", "d_matrices", "[", "key", "]", "=", "torch", ".", "stack", "(", "d_matrices", "[", "key", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "ged", ",", "d_YS", ",", "d_SS", "=", "calc_energy_distances", "(", "d_matrices", ",", "flip_probs", "=", "probs", ")", "\n", "\n", "if", "return_hungarian", ":", "\n", "        ", "return", "ged", ",", "d_matrices", ",", "d_YS", ",", "d_SS", ",", "torch", ".", "tensor", "(", "hungarian_scores", ")", "\n", "", "else", ":", "\n", "        ", "return", "ged", ",", "d_matrices", ",", "d_YS", ",", "d_SS", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.compute_stats": [[304, 405], ["torch.no_grad", "range", "range", "eval", "utils.training_helpers.instance_checker", "len", "calnet_iou.append", "evaluation_utils.nanmean", "evaluation_utils.nanmean", "wandb.log", "len", "gen_iou.append", "evaluation_utils.nanmean", "evaluation_utils.nanmean", "wandb.log", "evaluation_utils.compute_ged", "ged.mean.mean", "d_YS.mean.mean", "d_SS.mean.mean", "evaluation_utils.nanmean", "evaluation_utils.compute_pred_class_probs", "evaluation_utils.compute_gt_class_probs", "evaluation_utils.compute_pred_class_probs", "evaluation_utils.compute_gt_class_probs", "evaluation_utils.get_all_modes", "evaluation_utils.compute_ged", "ged.mean.mean", "d_YS.mean.mean", "d_SS.mean.mean", "evaluation_utils.compute_iou", "torch.tensor", "torch.stack", "evaluation_utils.compute_iou", "torch.tensor", "torch.stack", "wandb.log", "wandb.log", "wandb.log", "torch.no_grad", "torch.abs().sum", "torch.abs().sum", "pred_dist.mean", "torch.no_grad", "torch.abs().sum", "torch.abs().sum", "wandb.log", "wandb.log", "wandb.log", "wandb.log", "wandb.log", "wandb.log", "wandb.log", "nanmean.cpu", "nanmean.cpu", "wandb.log", "len", "ged.mean.cpu", "d_YS.mean.cpu", "d_SS.mean.cpu", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs().sum.cpu", "torch.abs().sum.cpu", "torch.abs().sum.cpu", "torch.abs().sum.cpu", "ged.mean.cpu", "d_YS.mean.cpu", "d_SS.mean.cpu", "np.take", "np.take", "np.take", "np.take"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.instance_checker", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.nanmean", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.nanmean", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.nanmean", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.nanmean", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.compute_ged", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.nanmean", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.compute_pred_class_probs", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.compute_gt_class_probs", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.compute_pred_class_probs", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.compute_gt_class_probs", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_all_modes", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.compute_ged", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.compute_iou", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.compute_iou", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "compute_stats", "(", "args", ",", "generator", ",", "images", ",", "calnet_preds", ",", "calnet_labelled_imgs", ",", "fake_labels", ",", "pred_dist", ",", "gan_al_maps", ",", "labels", ",", "gt_dist", ",", "gt_labels", ",", "ignore_mask", ",", "b_index", "=", "0", ")", ":", "#todo log in tensorboardx", "\n", "\n", "    ", "ged", "=", "None", "\n", "\n", "if", "not", "args", ".", "calibration_net", "==", "\"EmptyCalNet\"", ":", "\n", "\n", "        ", "calnet_iou", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "calnet_preds", ")", ")", ":", "\n", "            ", "calnet_iou", ".", "append", "(", "compute_iou", "(", "calnet_preds", "[", "i", "]", ",", "labels", "[", "i", "]", ",", "args", ")", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "\"LIDC\"", ":", "\n", "            ", "mean_calnet_iou", "=", "nanmean", "(", "torch", ".", "tensor", "(", "calnet_iou", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean_calnet_iou", "=", "nanmean", "(", "torch", ".", "stack", "(", "calnet_iou", ",", "dim", "=", "0", ")", ")", "\n", "\n", "", "if", "not", "args", ".", "debug", "and", "args", ".", "mode", "==", "\"train\"", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "\"Calibration net predictions Mean IoU\"", ":", "mean_calnet_iou", ".", "cpu", "(", ")", "}", ")", "\n", "", "", "if", "not", "args", ".", "generator", "==", "\"EmptyGenerator\"", ":", "\n", "        ", "gen_iou", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "fake_labels", ")", ")", ":", "\n", "            ", "gen_iou", ".", "append", "(", "compute_iou", "(", "fake_labels", "[", "i", "]", ",", "labels", "[", "i", "]", ",", "args", ")", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "\"LIDC\"", ":", "\n", "            ", "mean_gen_iou", "=", "nanmean", "(", "torch", ".", "tensor", "(", "gen_iou", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean_gen_iou", "=", "nanmean", "(", "torch", ".", "stack", "(", "gen_iou", ",", "dim", "=", "0", ")", ")", "\n", "\n", "\n", "", "if", "not", "args", ".", "debug", "and", "args", ".", "mode", "==", "\"train\"", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "\"Final predictions Mean IoU\"", ":", "mean_gen_iou", ".", "cpu", "(", ")", "}", ")", "\n", "\n", "\n", "", "", "if", "args", ".", "dataset", "==", "\"LIDC\"", ":", "\n", "        ", "if", "not", "args", ".", "generator", "==", "\"EmptyGenerator\"", ":", "\n", "            ", "ged", ",", "_", ",", "d_YS", ",", "d_SS", ",", "h_scores", "=", "compute_ged", "(", "pred_dist", ",", "gt_dist", ",", "calnet_preds", ",", "args", "=", "args", ",", "n_samples", "=", "args", ".", "n_generator_samples_test", ",", "return_hungarian", "=", "True", ")", "\n", "\n", "ged", "=", "ged", ".", "mean", "(", ")", "\n", "d_YS", "=", "d_YS", ".", "mean", "(", ")", "\n", "d_SS", "=", "d_SS", ".", "mean", "(", ")", "\n", "h_scores", "=", "nanmean", "(", "h_scores", ")", "\n", "\n", "if", "not", "args", ".", "debug", "and", "args", ".", "mode", "==", "\"train\"", ":", "\n", "                ", "wandb", ".", "log", "(", "{", "\"meanGED\"", ":", "ged", ".", "cpu", "(", ")", "}", ")", "# todo make sure GED is correct!", "\n", "wandb", ".", "log", "(", "{", "\"meanYS\"", ":", "d_YS", ".", "cpu", "(", ")", "}", ")", "\n", "wandb", ".", "log", "(", "{", "\"meanSS\"", ":", "d_SS", ".", "cpu", "(", ")", "}", ")", "\n", "if", "args", ".", "dataset", "==", "\"LIDC\"", ":", "wandb", ".", "log", "(", "{", "\"hungarian\"", ":", "h_scores", "}", ")", "\n", "\n", "", "", "", "if", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", ":", "\n", "\n", "# get classes, corresponding flip classes and probabilities", "\n", "        ", "flip_args", "=", "eval", "(", "f\"CITYSCAPES19_{args.flip_experiment}FLIP\"", ")", "\n", "class_1", "=", "flip_args", "[", "0", "]", "\n", "class_2", "=", "flip_args", "[", "1", "]", "\n", "flip_probs", "=", "flip_args", "[", "2", "]", "\n", "\n", "if", "args", ".", "generator", "==", "\"EmptyGenerator\"", ":", "\n", "            ", "calnet_class_probs", "=", "compute_pred_class_probs", "(", "labels", ",", "calnet_preds", ",", "ignore_mask", ",", "args", ")", "\n", "gt_class_probs", "=", "compute_gt_class_probs", "(", "labels", ",", "args", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "calnet_precision", "=", "torch", ".", "abs", "(", "calnet_class_probs", "-", "gt_class_probs", ")", ".", "sum", "(", ")", "\n", "\n", "f_classes", "=", "class_1", "+", "class_2", "\n", "calnet_flip_precision", "=", "torch", ".", "abs", "(", "np", ".", "take", "(", "calnet_class_probs", ",", "f_classes", ")", "-", "np", ".", "take", "(", "gt_class_probs", ",", "f_classes", ")", ")", ".", "sum", "(", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "pred_class_probs", "=", "compute_pred_class_probs", "(", "labels", ",", "pred_dist", ".", "mean", "(", "0", ")", ",", "ignore_mask", ",", "args", ")", "\n", "gt_class_probs", "=", "compute_gt_class_probs", "(", "labels", ",", "args", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "gen_precision", "=", "torch", ".", "abs", "(", "pred_class_probs", "-", "gt_class_probs", ")", ".", "sum", "(", ")", "\n", "\n", "f_classes", "=", "class_1", "+", "class_2", "\n", "gen_flip_precision", "=", "torch", ".", "abs", "(", "np", ".", "take", "(", "pred_class_probs", ",", "f_classes", ")", "-", "np", ".", "take", "(", "gt_class_probs", ",", "f_classes", ")", ")", ".", "sum", "(", ")", "\n", "\n", "\n", "", "", "if", "not", "args", ".", "debug", "and", "args", ".", "mode", "==", "\"train\"", ":", "\n", "            ", "if", "args", ".", "generator", "==", "\"EmptyGenerator\"", ":", "\n", "                ", "wandb", ".", "log", "(", "{", "\"calnet_precision\"", ":", "calnet_precision", ".", "cpu", "(", ")", "}", ")", "# todo make sure GED is correct!", "\n", "wandb", ".", "log", "(", "{", "\"calnet_flip_precision\"", ":", "calnet_flip_precision", ".", "cpu", "(", ")", "}", ")", "\n", "", "else", ":", "\n", "                ", "wandb", ".", "log", "(", "{", "\"gen_precision\"", ":", "gen_precision", ".", "cpu", "(", ")", "}", ")", "# todo make sure GED is correct!", "\n", "wandb", ".", "log", "(", "{", "\"gen_flip_precision\"", ":", "gen_flip_precision", ".", "cpu", "(", ")", "}", ")", "\n", "\n", "", "", "if", "instance_checker", "(", "generator", ",", "GeneralVAE", ")", ":", "\n", "\n", "            ", "label", "=", "gt_labels", "[", ":", ",", "1", ",", ":", ",", ":", "]", "# rgb channels are identical so we extract only one of them", "\n", "\n", "gt_dist", "=", "get_all_modes", "(", "label", ",", "input_classes", "=", "class_1", ",", "target_classes", "=", "class_2", ",", "flip_probs", "=", "flip_probs", ",", "n_flipped_modes", "=", "len", "(", "flip_probs", ")", ")", "\n", "\n", "ged", ",", "_", ",", "d_YS", ",", "d_SS", "=", "compute_ged", "(", "pred_dist", ",", "gt_dist", ",", "calnet_preds", ",", "args", "=", "args", ",", "n_samples", "=", "args", ".", "n_generator_samples_test", ")", "\n", "\n", "ged", "=", "ged", ".", "mean", "(", ")", "\n", "d_YS", "=", "d_YS", ".", "mean", "(", ")", "\n", "d_SS", "=", "d_SS", ".", "mean", "(", ")", "\n", "\n", "if", "not", "args", ".", "debug", "and", "args", ".", "mode", "==", "\"train\"", ":", "\n", "                ", "wandb", ".", "log", "(", "{", "\"meanGED\"", ":", "ged", ".", "cpu", "(", ")", "}", ")", "# todo make sure GED is correct!", "\n", "wandb", ".", "log", "(", "{", "\"meanYS\"", ":", "d_YS", ".", "cpu", "(", ")", "}", ")", "\n", "wandb", ".", "log", "(", "{", "\"meanSS\"", ":", "d_SS", ".", "cpu", "(", ")", "}", ")", "\n", "\n", "", "", "", "return", "ged", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_all_modes": [[407, 421], ["evaluation_utils.get_mode_statistics", "torch.zeros", "range", "len", "len", "range"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_mode_statistics"], ["", "def", "get_all_modes", "(", "label", ",", "input_classes", ",", "target_classes", ",", "flip_probs", ",", "n_flipped_modes", ")", ":", "\n", "    ", "mode_stats", "=", "get_mode_statistics", "(", "probabilities", "=", "flip_probs", ",", "n_flipped_modes", "=", "n_flipped_modes", ")", "\n", "flips", "=", "mode_stats", "[", "\"flips\"", "]", "\n", "\n", "# get all modes", "\n", "gt_dist", "=", "torch", ".", "zeros", "(", "label", ".", "shape", "[", "0", "]", ",", "len", "(", "flips", ")", ",", "label", ".", "shape", "[", "1", "]", ",", "label", ".", "shape", "[", "2", "]", ")", "\n", "\n", "for", "m", "in", "range", "(", "len", "(", "flips", ")", ")", ":", "\n", "        ", "gt_dist", "[", ":", ",", "m", "]", "=", "label", "\n", "for", "c", "in", "range", "(", "flips", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "flips", "[", "m", "]", "[", "c", "]", ":", "\n", "                ", "gt_dist", "[", ":", ",", "m", "]", "[", "label", "==", "input_classes", "[", "c", "]", "]", "=", "target_classes", "[", "c", "]", "\n", "\n", "", "", "", "return", "gt_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.count_pixel_modes": [[422, 450], ["labels.argmax.argmax", "pred_dist.argmax.argmax", "torch.zeros", "enumerate", "len", "len", "enumerate", "torch.where", "range", "torch.sum", "len", "len", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "count_pixel_modes", "(", "labels", ",", "pred_dist", ",", "input_classes", ",", "target_classes", ")", ":", "\n", "\n", "# convert from 1-hot to discrete", "\n", "    ", "labels", "=", "labels", ".", "argmax", "(", "1", ")", "\n", "pred_dist", "=", "pred_dist", ".", "argmax", "(", "2", ")", "\n", "\n", "pixel_mode_counts", "=", "torch", ".", "zeros", "(", "len", "(", "labels", ")", ",", "len", "(", "input_classes", ")", ",", "3", ")", "\n", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "        ", "for", "j", ",", "c", "in", "enumerate", "(", "input_classes", ")", ":", "\n", "# find indexes of pixels in that class in the gt label", "\n", "            ", "c_idxs", "=", "torch", ".", "where", "(", "label", "==", "c", ")", "\n", "\n", "total_c_pixels", "=", "torch", ".", "sum", "(", "label", "==", "c", ")", "*", "len", "(", "pred_dist", ")", "\n", "pixel_mode_counts", "[", "i", ",", "j", ",", "0", "]", "=", "total_c_pixels", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "pred_dist", ")", ")", ":", "\n", "\n", "                ", "pred", "=", "pred_dist", "[", "k", ",", "i", "]", "\n", "\n", "# count how many pixels in the class mask belong to the original class or to the flipped class", "\n", "pred_class1_counts", "=", "torch", ".", "sum", "(", "pred", "[", "c_idxs", "]", "==", "input_classes", "[", "j", "]", ")", "\n", "pred_class2_counts", "=", "torch", ".", "sum", "(", "pred", "[", "c_idxs", "]", "==", "target_classes", "[", "j", "]", ")", "\n", "\n", "pixel_mode_counts", "[", "i", ",", "j", ",", "1", "]", "+=", "pred_class1_counts", "\n", "pixel_mode_counts", "[", "i", ",", "j", ",", "2", "]", "+=", "pred_class2_counts", "\n", "\n", "", "", "", "return", "pixel_mode_counts", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.compute_gt_class_probs": [[451, 477], ["eval", "eval", "eval", "enumerate", "torch.tensor", "labels.argmax", "gt_class_probs.append", "gt_class_probs.append", "f_classes.index", "gt_class_probs.append", "gt_class_probs.append"], "function", ["None"], ["", "def", "compute_gt_class_probs", "(", "labels", ",", "args", ")", ":", "\n", "    ", "gt_class_probs", "=", "[", "]", "\n", "\n", "# get idxs of all classes and of only switchable classes", "\n", "classes", "=", "eval", "(", "f\"CITYSCAPES19_COLOUR_ENCODING\"", ")", "\n", "var_classes", "=", "eval", "(", "f\"CITYSCAPES19_FLIP_CLASSES\"", ")", "\n", "\n", "flip_details", "=", "eval", "(", "f\"CITYSCAPES19_{args.flip_experiment}FLIP\"", ")", "\n", "f_classes", "=", "flip_details", "[", "1", "]", "\n", "\n", "for", "c_ind", ",", "c", "in", "enumerate", "(", "classes", ")", ":", "\n", "        ", "if", "c_ind", "in", "f_classes", ":", "\n", "            ", "c_idx", "=", "flip_details", "[", "0", "]", "[", "f_classes", ".", "index", "(", "c_ind", ")", "]", "\n", "", "else", ":", "\n", "            ", "c_idx", "=", "c_ind", "\n", "", "if", "c_idx", "in", "labels", ".", "argmax", "(", "1", ")", ":", "\n", "            ", "if", "c", "in", "var_classes", ":", "\n", "                ", "gt_class_probs", ".", "append", "(", "1", "-", "var_classes", "[", "c", "]", "[", "1", "]", ")", "\n", "", "elif", "c", "[", ":", "-", "1", "]", "in", "var_classes", ":", "\n", "                ", "gt_class_probs", ".", "append", "(", "var_classes", "[", "c", "[", ":", "-", "1", "]", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "gt_class_probs", ".", "append", "(", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "gt_class_probs", ".", "append", "(", "0", ")", "\n", "\n", "", "", "return", "torch", ".", "tensor", "(", "gt_class_probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.compute_pred_class_probs": [[478, 507], ["eval", "eval", "enumerate", "torch.tensor", "torch.ones", "torch.where", "pn_class_probs.append", "torch.mean", "torch.isnan", "labels.argmax", "f_classes.index", "labels.argmax"], "function", ["None"], ["", "def", "compute_pred_class_probs", "(", "labels", ",", "preds", ",", "ignore_idxs", ",", "args", ")", ":", "\n", "\n", "    ", "if", "ignore_idxs", "is", "None", ":", "\n", "        ", "ignore_idxs", "=", "torch", ".", "ones", "(", "labels", ".", "argmax", "(", "1", ")", ".", "shape", ")", "\n", "\n", "", "pn_class_probs", "=", "[", "]", "\n", "classes", "=", "eval", "(", "f\"CITYSCAPES19_COLOUR_ENCODING\"", ")", "\n", "\n", "flip_details", "=", "eval", "(", "f\"CITYSCAPES19_{args.flip_experiment}FLIP\"", ")", "\n", "\n", "f_classes", "=", "flip_details", "[", "1", "]", "\n", "\n", "for", "c_ind", ",", "c", "in", "enumerate", "(", "classes", ")", ":", "\n", "        ", "if", "c_ind", "in", "f_classes", ":", "\n", "            ", "c_idx", "=", "flip_details", "[", "0", "]", "[", "f_classes", ".", "index", "(", "c_ind", ")", "]", "\n", "", "else", ":", "\n", "            ", "c_idx", "=", "c_ind", "\n", "\n", "# c_idxs = torch.where(labels.argmax(1) == c_idx) #todo add ign idxs here?", "\n", "\n", "", "c_idxs", "=", "torch", ".", "where", "(", "(", "labels", ".", "argmax", "(", "1", ")", "==", "c_idx", ")", "*", "(", "ignore_idxs", ")", ")", "\n", "\n", "pn_class_probs", ".", "append", "(", "torch", ".", "mean", "(", "preds", "[", "c_idxs", "[", "0", "]", ",", "c_ind", ",", "c_idxs", "[", "1", "]", ",", "c_idxs", "[", "2", "]", "]", ")", ")", "\n", "\n", "", "ps", "=", "torch", ".", "tensor", "(", "pn_class_probs", ")", "\n", "\n", "ps", "[", "torch", ".", "isnan", "(", "ps", ")", "]", "=", "0", "\n", "\n", "return", "ps", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.save_numpy_arrays": [[509, 531], ["images.cpu().numpy", "labels.cpu().numpy", "calnet_preds.cpu().numpy", "pred_dist.detach().cpu().numpy", "pathlib.Path", "pathlib.Path.mkdir", "np.savez", "images.cpu", "labels.cpu", "calnet_preds.cpu", "pred_dist.detach().cpu", "str", "pred_dist.detach"], "function", ["None"], ["", "def", "save_numpy_arrays", "(", "images", ",", "labels", ",", "calnet_preds", ",", "pred_dist", ",", "batch_id", ",", "args", ")", ":", "\n", "\n", "    ", "saving_images", "=", "images", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "saving_labels", "=", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "saving_calnet_preds", "=", "calnet_preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "saving_pred_dist", "=", "pred_dist", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "data", "=", "{", "\"images\"", ":", "saving_images", ",", "\"labels\"", ":", "saving_labels", ",", "\"calnet_preds\"", ":", "saving_calnet_preds", ",", "\n", "\"pred_dist\"", ":", "saving_pred_dist", "}", "\n", "\n", "if", "args", ".", "mode", "==", "\"train\"", ":", "\n", "        ", "stamp", "=", "DATA_MANAGER", ".", "stamp", "\n", "", "elif", "args", ".", "mode", "==", "\"test\"", ":", "\n", "        ", "stamp", "=", "args", ".", "test_model_date", "\n", "\n", "", "saving_path", "=", "Path", "(", "f'./{PREFIX_OUTPUT}/{stamp}/{NUMPY_DIR}/{args.mode}/'", ")", "\n", "\n", "\n", "# if directory does not exist, make it", "\n", "saving_path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "np", ".", "savez", "(", "str", "(", "saving_path", ")", "+", "f'/batch_{batch_id}.npz'", ",", "**", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.load_numpy_arrays": [[533, 560], ["pathlib.Path", "pathlib.Path.exists", "np.load", "torch.from_numpy().float().to", "torch.from_numpy().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "str", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "load_numpy_arrays", "(", "batch_id", ",", "args", ",", "to_tensor", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Load saved numpy arrays of images (B x C x H x W), labels (B x C x H x W),\n    calibration net predictions (B x C x H x W) and predictive distribution (N x B x C x H x W)\n    \"\"\"", "\n", "\n", "if", "args", ".", "mode", "==", "\"train\"", ":", "\n", "        ", "stamp", "=", "DATA_MANAGER", ".", "stamp", "\n", "", "elif", "args", ".", "mode", "==", "\"test\"", ":", "\n", "        ", "stamp", "=", "args", ".", "test_model_date", "\n", "\n", "", "loading_path", "=", "Path", "(", "f'./{PREFIX_OUTPUT}/{stamp}/{NUMPY_DIR}/'", ")", "# todo: replace this with your path", "\n", "\n", "# if directory does not exist, make it", "\n", "assert", "loading_path", ".", "exists", "(", ")", "\n", "\n", "data", "=", "np", ".", "load", "(", "str", "(", "loading_path", ")", "+", "f\"/{args.mode}/batch_{batch_id}.npz\"", ")", "\n", "\n", "images", ",", "labels", ",", "calnet_preds", ",", "pred_dist", "=", "data", "[", "\"images\"", "]", ",", "data", "[", "\"labels\"", "]", ",", "data", "[", "\"calnet_preds\"", "]", ",", "data", "[", "\"pred_dist\"", "]", "\n", "\n", "if", "to_tensor", ":", "\n", "        ", "images", "=", "torch", ".", "from_numpy", "(", "images", ")", ".", "float", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "labels", "=", "torch", ".", "from_numpy", "(", "labels", ")", ".", "to", "(", "DEVICE", ")", "\n", "calnet_preds", "=", "torch", ".", "from_numpy", "(", "calnet_preds", ")", ".", "float", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "pred_dist", "=", "torch", ".", "from_numpy", "(", "pred_dist", ")", ".", "float", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "", "return", "images", ",", "labels", ",", "calnet_preds", ",", "pred_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.save_results": [[561, 598], ["evaluation_utils.plot_calibration", "torch.from_numpy().float", "gt_mode_probs.cpu().numpy.cpu().numpy", "np.array", "calnet_class_probs.cpu().numpy.cpu().numpy", "pred_class_probs.cpu().numpy.cpu().numpy", "mGED.cpu().numpy.cpu().numpy", "mYS.cpu().numpy.cpu().numpy", "mSS.cpu().numpy.cpu().numpy", "pathlib.Path", "pathlib.Path.mkdir", "np.savez", "pathlib.Path", "pathlib.Path.mkdir", "torchvision.utils.save_image", "torch.from_numpy", "gt_mode_probs.cpu().numpy.cpu", "calnet_class_probs.cpu().numpy.cpu", "pred_class_probs.cpu().numpy.cpu", "mGED.cpu().numpy.cpu", "mYS.cpu().numpy.cpu", "mSS.cpu().numpy.cpu", "str", "np.moveaxis", "torch.from_numpy().float.max", "torch.from_numpy().float.min", "str"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.plot_calibration"], ["", "def", "save_results", "(", "gt_mode_probs", ",", "flip_probs", ",", "calnet_class_probs", ",", "pred_class_probs", ",", "mGED", ",", "mYS", ",", "mSS", ",", "args", ")", ":", "\n", "\n", "# plot figures", "\n", "    ", "flip_cal_plot", "=", "plot_calibration", "(", "flip_probs", ",", "calnet_class_probs", ",", "pred_class_probs", ")", "\n", "flip_cal_plot", "=", "torch", ".", "from_numpy", "(", "np", ".", "moveaxis", "(", "flip_cal_plot", ",", "-", "1", ",", "0", ")", ")", ".", "float", "(", ")", "\n", "\n", "\n", "gt_mode_probs", "=", "gt_mode_probs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flip_probs", "=", "np", ".", "array", "(", "flip_probs", ")", "\n", "calnet_class_probs", "=", "calnet_class_probs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_class_probs", "=", "pred_class_probs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mGED", "=", "mGED", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mYS", "=", "mYS", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mSS", "=", "mSS", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "data", "=", "{", "\"gt_mode_probs\"", ":", "gt_mode_probs", ",", "\"flip_probs\"", ":", "flip_probs", ",", "\"calnet_class_probs\"", ":", "calnet_class_probs", ",", "\"pred_class_probs\"", ":", "pred_class_probs", ",", "\"mGED\"", ":", "mGED", ",", "\"mYS\"", ":", "mYS", ",", "\"mSS\"", ":", "mSS", "}", "\n", "\n", "if", "args", ".", "mode", "==", "\"train\"", ":", "\n", "        ", "stamp", "=", "DATA_MANAGER", ".", "stamp", "\n", "", "elif", "args", ".", "mode", "==", "\"test\"", ":", "\n", "        ", "stamp", "=", "args", ".", "test_model_date", "\n", "\n", "", "saving_path", "=", "Path", "(", "f'./{PREFIX_OUTPUT}/{stamp}/{NUMPY_DIR}/{args.mode}/results/'", ")", "\n", "\n", "# if directory does not exist, make it", "\n", "saving_path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "np", ".", "savez", "(", "str", "(", "saving_path", ")", "+", "f'/results.npz'", ",", "**", "data", ")", "\n", "\n", "# save plots", "\n", "plot_saving_path", "=", "Path", "(", "f'./{PREFIX_OUTPUT}/{stamp}/{NUMPY_DIR}/{args.mode}/results/plots/'", ")", "\n", "\n", "# if directory does not exist, make it", "\n", "plot_saving_path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "normalize", "=", "True", "if", "flip_cal_plot", ".", "max", "(", ")", ">", "1", "and", "flip_cal_plot", ".", "min", "(", ")", ">=", "0", "else", "False", "\n", "save_image", "(", "flip_cal_plot", ",", "f'{str(plot_saving_path)}/flip_cal_plot.png'", ",", "nrow", "=", "4", ",", "normalize", "=", "normalize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.load_results": [[599, 626], ["pathlib.Path", "pathlib.Path.exists", "np.load", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "list", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "str", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "load_results", "(", "args", ",", "to_tensor", "=", "False", ")", ":", "#TODO ADD RUN NAME HERE", "\n", "\n", "    ", "if", "args", ".", "mode", "==", "\"train\"", ":", "\n", "        ", "stamp", "=", "DATA_MANAGER", ".", "stamp", "\n", "", "elif", "args", ".", "mode", "==", "\"test\"", ":", "\n", "        ", "stamp", "=", "args", ".", "test_model_date", "\n", "\n", "", "loading_path", "=", "Path", "(", "f'./{PREFIX_OUTPUT}/{stamp}/{NUMPY_DIR}/test/results'", ")", "# todo: replace this with your path", "\n", "\n", "# if directory does not exist, make it", "\n", "assert", "loading_path", ".", "exists", "(", ")", "\n", "\n", "data", "=", "np", ".", "load", "(", "str", "(", "loading_path", ")", "+", "f\"/results.npz\"", ")", "\n", "\n", "gt_mode_probs", ",", "mean_mode_counts", ",", "flip_probs", ",", "calnet_class_probs", ",", "pred_class_probs", ",", "mGED", ",", "mYS", ",", "mSS", "=", "data", "[", "\"gt_mode_probs\"", "]", ",", "data", "[", "\"mean_mode_counts\"", "]", ",", "data", "[", "\"flip_probs\"", "]", ",", "data", "[", "\"calnet_class_probs\"", "]", ",", "data", "[", "\"pred_class_probs\"", "]", ",", "data", "[", "\"mGED\"", "]", ",", "data", "[", "\"mYS\"", "]", ",", "data", "[", "\"mSS\"", "]", "\n", "\n", "if", "to_tensor", ":", "\n", "        ", "gt_mode_probs", "=", "torch", ".", "from_numpy", "(", "gt_mode_probs", ")", ".", "float", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "mean_mode_counts", "=", "torch", ".", "from_numpy", "(", "mean_mode_counts", ")", ".", "float", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "flip_probs", "=", "list", "(", "flip_probs", ")", "\n", "calnet_class_probs", "=", "torch", ".", "from_numpy", "(", "calnet_class_probs", ")", ".", "float", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "pred_class_probs", "=", "torch", ".", "from_numpy", "(", "pred_class_probs", ")", ".", "float", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "mGED", "=", "torch", ".", "from_numpy", "(", "mGED", ")", ".", "float", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "mYS", "=", "torch", ".", "from_numpy", "(", "mYS", ")", ".", "float", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "mSS", "=", "torch", ".", "from_numpy", "(", "mSS", ")", ".", "float", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "", "return", "gt_mode_probs", ",", "mean_mode_counts", ",", "flip_probs", ",", "calnet_class_probs", ",", "pred_class_probs", ",", "mGED", ",", "mYS", ",", "mSS", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.plot_comparison_figure": [[627, 771], ["matplotlib.figure", "matplotlib.backends.backend_agg.FigureCanvasAgg", "range", "matplotlib.backends.backend_agg.FigureCanvasAgg.draw", "matplotlib.backends.backend_agg.FigureCanvasAgg.print_to_buffer", "matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb", "matplotlib.close", "np.fromstring().reshape", "utils.training_helpers.unpack_batch", "matplotlib.colors.Normalize", "matplotlib.colors.Normalize", "utils.training_helpers.unpack_batch", "[].permute.clone", "[].permute", "batch[].to().float", "[].permute().to", "utils.data_utils.move_color_channel", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.xticks", "matplotlib.yticks", "utils.data_utils.de_torch", "plottable_images.squeeze.squeeze", "np.concatenate", "np.concatenate", "np.concatenate", "utils.data_utils._recolour_label", "utils.data_utils._recolour_label", "utils.data_utils._recolour_label", "utils.data_utils.de_torch", "utils.data_utils._recolour_label", "utils.data_utils.de_torch", "matplotlib.title", "matplotlib.title", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.subplot", "matplotlib.colors.Normalize", "matplotlib.colors.Normalize", "matplotlib.imshow", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.subplot", "matplotlib.colors.Normalize", "matplotlib.colors.Normalize", "matplotlib.imshow", "matplotlib.xticks", "matplotlib.yticks", "np.fromstring", "batch[].to", "[].permute", "np.pad", "utils.data_utils.de_torch", "utils.data_utils.de_torch", "utils.data_utils.de_torch", "utils.data_utils.de_torch", "matplotlib.title", "matplotlib.title", "matplotlib.title", "al_maps.max", "str", "matplotlib.title", "matplotlib.title", "torch.eye", "x.cpu().numpy", "pad", "pad", "pad", "pad", "utils.data_utils._1hot_2_2d", "utils.data_utils._1hot_2_2d", "utils.data_utils._1hot_2_2d", "utils.data_utils._1hot_2_2d", "al_maps.max().item", "labels[].long", "str", "torch.eye", "x.cpu", "al_maps.min().item", "al_maps.max", "bb_preds[].long", "str", "al_maps.min"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.unpack_batch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.unpack_batch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.move_color_channel", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.de_torch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._recolour_label", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._recolour_label", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._recolour_label", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.de_torch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._recolour_label", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.de_torch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.de_torch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.de_torch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.de_torch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.de_torch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._1hot_2_2d", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._1hot_2_2d", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._1hot_2_2d", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._1hot_2_2d"], ["", "def", "plot_comparison_figure", "(", "batch", ",", "calnet_preds", ",", "fake_labels", ",", "al_maps", ",", "gan_al_maps", ",", "generator", ",", "calibration_net", ",", "discriminator", ",", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "dataset", "==", "\"LIDC\"", ":", "\n", "        ", "images", ",", "labels", ",", "gt_dist", "=", "unpack_batch", "(", "batch", ")", "\n", "gt_labels", "=", "None", "\n", "lidc_norm", "=", "matplotlib", ".", "colors", ".", "Normalize", "(", "vmin", "=", "0", ",", "vmax", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "images", ",", "labels", "=", "unpack_batch", "(", "batch", ")", "\n", "gt_dist", "=", "None", "\n", "gt_labels", "=", "None", "\n", "lidc_norm", "=", "None", "\n", "\n", "", "if", "(", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", "and", "args", ".", "class_flip", ")", ":", "\n", "        ", "gt_labels", "=", "labels", ".", "clone", "(", ")", "\n", "labels", "=", "torch", ".", "eye", "(", "LABELS_CHANNELS", ")", "[", "labels", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "long", "(", ")", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "bb_preds", "=", "batch", "[", "\"bb_preds\"", "]", ".", "to", "(", "DEVICE", ")", ".", "float", "(", ")", "\n", "bb_preds", "=", "torch", ".", "eye", "(", "LABELS_CHANNELS", ")", "[", "bb_preds", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "long", "(", ")", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "to", "(", "DEVICE", ")", "\n", "", "else", ":", "\n", "        ", "bb_preds", "=", "None", "\n", "\n", "\n", "# check used model types", "\n", "", "use_calnet", "=", "args", ".", "calibration_net", "!=", "\"EmptyCalNet\"", "\n", "use_generator", "=", "args", ".", "generator", "!=", "\"EmptyGenerator\"", "\n", "\n", "# free up some space", "\n", "del", "(", "calibration_net", ",", "generator", ",", "discriminator", ")", "\n", "\n", "# initialize figure size arguments", "\n", "n_pics", "=", "5", "\n", "n_plots", "=", "4", "if", "not", "use_calnet", "else", "6", "\n", "n_plots", "=", "n_plots", "+", "1", "if", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", "else", "n_plots", "\n", "\n", "# initialize figure", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "n_plots", "*", "2", "+", "2", ",", "n_pics", "*", "2", ")", ")", "\n", "canvas", "=", "FigureCanvasAgg", "(", "fig", ")", "\n", "\n", "for", "idx", "in", "range", "(", "n_pics", ")", ":", "\n", "\n", "        ", "extra", "=", "0", "\n", "\n", "# convert to plottable format", "\n", "plottable_images", "=", "move_color_channel", "(", "de_torch", "(", "(", "images", "[", "idx", "]", "+", "1", ")", "/", "2", ")", ")", "# +1/2 to normalize between 0 and 1", "\n", "if", "plottable_images", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "plottable_images", "=", "plottable_images", ".", "squeeze", "(", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "\"LIDC\"", ":", "\n", "            ", "pad", "=", "lambda", "x", ":", "np", ".", "pad", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "pad_width", "=", "2", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "1", ")", "\n", "glued_top", "=", "np", ".", "concatenate", "(", "(", "pad", "(", "gt_dist", "[", "idx", ",", "0", "]", ")", ",", "pad", "(", "gt_dist", "[", "idx", ",", "1", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "glued_bottom", "=", "np", ".", "concatenate", "(", "(", "pad", "(", "gt_dist", "[", "idx", ",", "2", "]", ")", ",", "pad", "(", "gt_dist", "[", "idx", ",", "3", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "plottable_t_labels", "=", "np", ".", "concatenate", "(", "[", "glued_top", ",", "glued_bottom", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "plottable_t_labels", "=", "_recolour_label", "(", "de_torch", "(", "_1hot_2_2d", "(", "labels", "[", "idx", "]", ",", "sample", "=", "True", ")", ")", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", ":", "\n", "            ", "plottable_bb_preds", "=", "_recolour_label", "(", "de_torch", "(", "_1hot_2_2d", "(", "bb_preds", "[", "idx", "]", ",", "sample", "=", "True", ")", ")", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "\n", "", "if", "use_generator", ":", "\n", "            ", "plottable_f_labels", "=", "_recolour_label", "(", "de_torch", "(", "_1hot_2_2d", "(", "fake_labels", "[", "idx", "]", ",", "sample", "=", "True", ")", ")", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "\n", "", "if", "use_calnet", ":", "\n", "            ", "plottable_al_maps", "=", "de_torch", "(", "al_maps", "[", "idx", "]", ")", "\n", "plottable_calnet_preds", "=", "_recolour_label", "(", "de_torch", "(", "_1hot_2_2d", "(", "calnet_preds", "[", "idx", "]", ",", "sample", "=", "True", ")", ")", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "\n", "", "if", "use_generator", ":", "\n", "            ", "plottable_gan_al_maps", "=", "de_torch", "(", "gan_al_maps", "[", "idx", "]", ")", "\n", "\n", "# plot figure", "\n", "\n", "# input image", "\n", "", "plt", ".", "subplot", "(", "n_pics", ",", "n_plots", ",", "idx", "*", "n_plots", "+", "1", ")", "\n", "plt", ".", "imshow", "(", "plottable_images", ",", "interpolation", "=", "\"none\"", ")", "\n", "if", "idx", "==", "0", ":", "plt", ".", "title", "(", "\"Input Image\"", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "\n", "# true label", "\n", "plt", ".", "subplot", "(", "n_pics", ",", "n_plots", ",", "idx", "*", "n_plots", "+", "2", ")", "\n", "plt", ".", "imshow", "(", "plottable_t_labels", ",", "norm", "=", "lidc_norm", ",", "interpolation", "=", "\"none\"", ")", "\n", "if", "idx", "==", "0", ":", "plt", ".", "title", "(", "\"Label\"", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", ":", "\n", "# black-box net prediction", "\n", "            ", "extra", "+=", "1", "\n", "plt", ".", "subplot", "(", "n_pics", ",", "n_plots", ",", "idx", "*", "n_plots", "+", "2", "+", "extra", ")", "\n", "plt", ".", "imshow", "(", "plottable_bb_preds", ",", "interpolation", "=", "\"none\"", ")", "\n", "if", "idx", "==", "0", ":", "plt", ".", "title", "(", "\"BB Pred\"", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "\n", "\n", "", "if", "use_calnet", ":", "\n", "# calibration net prediction", "\n", "            ", "plt", ".", "subplot", "(", "n_pics", ",", "n_plots", ",", "idx", "*", "n_plots", "+", "3", "+", "extra", ")", "\n", "plt", ".", "imshow", "(", "plottable_calnet_preds", ",", "norm", "=", "lidc_norm", ",", "interpolation", "=", "\"none\"", ")", "\n", "if", "idx", "==", "0", ":", "plt", ".", "title", "(", "\"CalNet Pred\"", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "\n", "extra", "+=", "1", "\n", "\n", "", "if", "use_generator", ":", "\n", "# final prediction", "\n", "            ", "plt", ".", "subplot", "(", "n_pics", ",", "n_plots", ",", "idx", "*", "n_plots", "+", "3", "+", "extra", ")", "\n", "plt", ".", "imshow", "(", "plottable_f_labels", ",", "norm", "=", "lidc_norm", ",", "interpolation", "=", "\"none\"", ")", "\n", "if", "idx", "==", "0", ":", "plt", ".", "title", "(", "\"RefNet Pred\"", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "\n", "extra", "+=", "1", "\n", "\n", "", "if", "use_calnet", ":", "\n", "# calibration pred aleatoric uncertainty", "\n", "            ", "plt", ".", "subplot", "(", "n_pics", ",", "n_plots", ",", "idx", "*", "n_plots", "+", "3", "+", "extra", ")", "\n", "\n", "al_norm", "=", "matplotlib", ".", "colors", ".", "Normalize", "(", "vmin", "=", "0", ",", "vmax", "=", "MAX_ALEATORIC", ")", "# set range into which we normalize the aleatoric unc maps", "\n", "\n", "# make sure the aleatoric uncertainty is within range", "\n", "assert", "al_maps", ".", "max", "(", ")", "<=", "MAX_ALEATORIC_GT", ",", "\"Predicted aleatoric uncertainty not within range: True = 0 < \"", "+", "str", "(", "\n", "MAX_ALEATORIC", ")", "+", "\", Plottable = \"", "+", "str", "(", "al_maps", ".", "min", "(", ")", ".", "item", "(", ")", ")", "+", "\" < \"", "+", "str", "(", "al_maps", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "plt", ".", "imshow", "(", "plottable_al_maps", ",", "cmap", "=", "'hot'", ",", "norm", "=", "al_norm", ",", "interpolation", "=", "\"none\"", ")", "\n", "if", "idx", "==", "0", ":", "plt", ".", "title", "(", "\"CalNet Aleatoric\"", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "extra", "+=", "1", "\n", "\n", "", "if", "use_generator", ":", "\n", "# generator aleatoric uncertinty", "\n", "            ", "plt", ".", "subplot", "(", "n_pics", ",", "n_plots", ",", "idx", "*", "n_plots", "+", "3", "+", "extra", ")", "\n", "al_norm", "=", "matplotlib", ".", "colors", ".", "Normalize", "(", "vmin", "=", "0", ",", "vmax", "=", "MAX_ALEATORIC", ")", "# set range into which we normalize the aleatoric unc maps", "\n", "plt", ".", "imshow", "(", "plottable_gan_al_maps", ",", "cmap", "=", "'hot'", ",", "norm", "=", "al_norm", ",", "interpolation", "=", "\"none\"", ")", "\n", "if", "idx", "==", "0", ":", "plt", ".", "title", "(", "\"RefNet Aleatoric\"", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "extra", "+=", "1", "\n", "\n", "", "", "canvas", ".", "draw", "(", ")", "\n", "_", ",", "(", "width", ",", "height", ")", "=", "canvas", ".", "print_to_buffer", "(", ")", "\n", "s", "=", "canvas", ".", "tostring_rgb", "(", ")", "\n", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "return", "np", ".", "fromstring", "(", "s", ",", "dtype", "=", "'uint8'", ")", ".", "reshape", "(", "(", "height", ",", "width", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.plot_calibration_figure": [[773, 810], ["torch.LongTensor", "matplotlib.subplots", "matplotlib.backends.backend_agg.FigureCanvasAgg", "np.arange", "ax.bar", "ax.bar", "ax.set_ylabel", "ax.set_title", "ax.set_xticks", "ax.set_xticklabels", "ax.legend", "matplotlib.backends.backend_agg.FigureCanvasAgg.draw", "matplotlib.backends.backend_agg.FigureCanvasAgg.print_to_buffer", "matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb", "matplotlib.close", "np.fromstring().reshape", "evaluation_utils.compute_pred_class_probs", "evaluation_utils.compute_gt_class_probs", "len", "ax.bar", "eval", "evaluation_utils.compute_pred_class_probs", "np.fromstring", "pred_dist.mean"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.compute_pred_class_probs", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.compute_gt_class_probs", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.compute_pred_class_probs"], ["", "def", "plot_calibration_figure", "(", "labels", ",", "calnet_preds", ",", "pred_dist", ",", "ignore_idxs", ",", "args", ")", ":", "#TODO DEVELOPING", "\n", "\n", "    ", "f_classes_idxs", "=", "torch", ".", "LongTensor", "(", "eval", "(", "f\"CITYSCAPES19_{args.flip_experiment}FLIP\"", ")", "[", "1", "]", ")", "\n", "calnet_class_probs", "=", "compute_pred_class_probs", "(", "labels", ",", "calnet_preds", ",", "ignore_idxs", ",", "args", ")", "[", "f_classes_idxs", "]", "\n", "gt_class_probs", "=", "compute_gt_class_probs", "(", "labels", ",", "args", ")", "[", "f_classes_idxs", "]", "\n", "\n", "if", "pred_dist", "is", "not", "None", ":", "\n", "        ", "preds_class_probs", "=", "compute_pred_class_probs", "(", "labels", ",", "pred_dist", ".", "mean", "(", "0", ")", ",", "ignore_idxs", ",", "args", ")", "[", "f_classes_idxs", "]", "\n", "\n", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "# plt.figure(figsize=(5,5))", "\n", "canvas", "=", "FigureCanvasAgg", "(", "fig", ")", "\n", "\n", "labels", "=", "[", "'sidewalk'", ",", "'person'", ",", "'car'", ",", "'vegetation'", ",", "'road'", "]", "\n", "\n", "x", "=", "np", ".", "arange", "(", "len", "(", "labels", ")", ")", "# the label locations", "\n", "width", "=", "0.2", "# the width of the bars", "\n", "\n", "rects1", "=", "ax", ".", "bar", "(", "x", "-", "width", ",", "gt_class_probs", ",", "width", ",", "label", "=", "'gt'", ")", "\n", "rects2", "=", "ax", ".", "bar", "(", "x", ",", "calnet_class_probs", ",", "width", ",", "label", "=", "'calnet'", ")", "\n", "if", "pred_dist", "is", "not", "None", ":", "\n", "        ", "rects3", "=", "ax", ".", "bar", "(", "x", "+", "width", ",", "preds_class_probs", ",", "width", ",", "label", "=", "'final'", ")", "\n", "\n", "# Add some text for labels, title and custom x-axis tick labels, etc.", "\n", "", "ax", ".", "set_ylabel", "(", "'Flip Probability'", ")", "\n", "ax", ".", "set_title", "(", "'Sample frequency vs. gt flip probability'", ")", "\n", "ax", ".", "set_xticks", "(", "x", ")", "\n", "ax", ".", "set_xticklabels", "(", "labels", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "\n", "# plt.show()", "\n", "# error", "\n", "\n", "canvas", ".", "draw", "(", ")", "\n", "_", ",", "(", "width", ",", "height", ")", "=", "canvas", ".", "print_to_buffer", "(", ")", "\n", "s", "=", "canvas", ".", "tostring_rgb", "(", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "return", "np", ".", "fromstring", "(", "s", ",", "dtype", "=", "'uint8'", ")", ".", "reshape", "(", "(", "height", ",", "width", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.plot_sample_preds": [[811, 883], ["matplotlib.figure", "matplotlib.backends.backend_agg.FigureCanvasAgg", "range", "plt.figure.suptitle", "matplotlib.backends.backend_agg.FigureCanvasAgg.draw", "matplotlib.backends.backend_agg.FigureCanvasAgg.print_to_buffer", "matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb", "matplotlib.close", "np.fromstring().reshape", "matplotlib.subplot", "utils.data_utils.move_color_channel", "matplotlib.imshow", "matplotlib.xticks", "matplotlib.yticks", "range", "matplotlib.subplot", "utils.data_utils._recolour_label", "matplotlib.imshow", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.subplot", "utils.data_utils._recolour_label", "matplotlib.imshow", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.subplot", "utils.data_utils._recolour_label", "matplotlib.imshow", "matplotlib.xticks", "matplotlib.yticks", "utils.data_utils.de_torch", "plottable_images.squeeze.squeeze", "matplotlib.title", "utils.data_utils._recolour_label", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.xticks", "matplotlib.yticks", "utils.data_utils.de_torch", "matplotlib.title", "utils.data_utils.de_torch", "matplotlib.title", "utils.data_utils.de_torch", "matplotlib.title", "np.fromstring", "utils.data_utils.de_torch", "matplotlib.title", "utils.data_utils._1hot_2_2d", "utils.data_utils._1hot_2_2d", "[].permute", "utils.data_utils._1hot_2_2d", "utils.data_utils._1hot_2_2d", "pred_dist[].mean", "torch.eye", "labels[].long"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.move_color_channel", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._recolour_label", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._recolour_label", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._recolour_label", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.de_torch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._recolour_label", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.de_torch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.de_torch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.de_torch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.de_torch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._1hot_2_2d", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._1hot_2_2d", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._1hot_2_2d", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._1hot_2_2d"], ["", "def", "plot_sample_preds", "(", "images", ",", "labels", ",", "calnet_preds", ",", "pred_dist", ",", "dataset", ")", ":", "\n", "\n", "    ", "n_plotted_preds", "=", "5", "\n", "\n", "n_cols", "=", "n_plotted_preds", "+", "4", "\n", "n_rows", "=", "pred_dist", ".", "shape", "[", "1", "]", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "n_cols", "+", "2", ",", "n_rows", "+", "2", ")", ")", "\n", "canvas", "=", "FigureCanvasAgg", "(", "fig", ")", "\n", "\n", "# plot sample predictions", "\n", "for", "i", "in", "range", "(", "n_rows", ")", ":", "\n", "\n", "# plot input", "\n", "        ", "plt", ".", "subplot", "(", "n_rows", ",", "n_cols", ",", "i", "*", "n_cols", "+", "1", ")", "\n", "plottable_images", "=", "move_color_channel", "(", "de_torch", "(", "(", "images", "[", "i", "]", "+", "1", ")", "/", "2", ")", ")", "\n", "if", "plottable_images", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "plottable_images", "=", "plottable_images", ".", "squeeze", "(", ")", "\n", "plt", ".", "imshow", "(", "plottable_images", ",", "interpolation", "=", "\"none\"", ")", "\n", "if", "i", "==", "0", ":", "plt", ".", "title", "(", "\"Input\"", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "\n", "for", "j", "in", "range", "(", "n_cols", "-", "4", ")", ":", "\n", "            ", "plottable_pred", "=", "_recolour_label", "(", "de_torch", "(", "_1hot_2_2d", "(", "pred_dist", "[", "j", ",", "i", ",", ":", ",", ":", "]", ",", "sample", "=", "True", ")", ")", ",", "dataset", "=", "dataset", ")", "\n", "plt", ".", "subplot", "(", "n_rows", ",", "n_cols", ",", "i", "*", "n_cols", "+", "j", "+", "2", ")", "\n", "plt", ".", "imshow", "(", "plottable_pred", ",", "interpolation", "=", "\"none\"", ")", "\n", "if", "i", "==", "0", ":", "plt", ".", "title", "(", "f\"Pred {j + 1}\"", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "\n", "# plot average predictions", "\n", "", "plt", ".", "subplot", "(", "n_rows", ",", "n_cols", ",", "i", "*", "n_cols", "+", "n_cols", "-", "2", ")", "\n", "plottable_avg_pred", "=", "_recolour_label", "(", "de_torch", "(", "_1hot_2_2d", "(", "pred_dist", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "mean", "(", "0", ")", ",", "sample", "=", "True", ")", ")", ",", "\n", "dataset", "=", "dataset", ")", "\n", "plt", ".", "imshow", "(", "plottable_avg_pred", ",", "interpolation", "=", "\"none\"", ")", "\n", "if", "i", "==", "0", ":", "plt", ".", "title", "(", "f\"Avg Pred\\nN = {pred_dist.shape[0]}\"", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "\n", "# plot calibration net predictions", "\n", "plt", ".", "subplot", "(", "n_rows", ",", "n_cols", ",", "i", "*", "n_cols", "+", "n_cols", "-", "1", ")", "\n", "plottable_calnet_pred", "=", "_recolour_label", "(", "de_torch", "(", "_1hot_2_2d", "(", "calnet_preds", "[", "i", "]", ",", "sample", "=", "True", ")", ")", ",", "dataset", "=", "dataset", ")", "\n", "plt", ".", "imshow", "(", "plottable_calnet_pred", ",", "interpolation", "=", "\"none\"", ")", "\n", "if", "i", "==", "0", ":", "plt", ".", "title", "(", "\"Cal Pred\"", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "\n", "# plot actual predictions", "\n", "plt", ".", "subplot", "(", "n_rows", ",", "n_cols", ",", "i", "*", "n_cols", "+", "n_cols", ")", "\n", "\n", "if", "labels", ".", "shape", "[", "1", "]", "!=", "LABELS_CHANNELS", ":", "\n", "            ", "label", "=", "torch", ".", "eye", "(", "LABELS_CHANNELS", ")", "[", "labels", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "long", "(", ")", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "[", "\n", "i", "]", "# convert rgb label to one-hot", "\n", "", "else", ":", "\n", "            ", "label", "=", "labels", "[", "i", "]", "\n", "\n", "", "plottable_label", "=", "_recolour_label", "(", "de_torch", "(", "_1hot_2_2d", "(", "label", ",", "sample", "=", "True", ")", ")", ",", "dataset", "=", "dataset", ")", "\n", "plt", ".", "imshow", "(", "plottable_label", ",", "interpolation", "=", "\"none\"", ")", "\n", "if", "i", "==", "0", ":", "plt", ".", "title", "(", "\"Label 0\"", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "\n", "", "fig", ".", "suptitle", "(", "'Sample predictions'", ")", "\n", "\n", "# convert figure to array", "\n", "canvas", ".", "draw", "(", ")", "\n", "_", ",", "(", "width", ",", "height", ")", "=", "canvas", ".", "print_to_buffer", "(", ")", "\n", "s", "=", "canvas", ".", "tostring_rgb", "(", ")", "\n", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "return", "np", ".", "fromstring", "(", "s", ",", "dtype", "=", "'uint8'", ")", ".", "reshape", "(", "(", "height", ",", "width", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.plot_calibration": [[884, 913], ["list", "list", "matplotlib.subplots", "matplotlib.backends.backend_agg.FigureCanvasAgg", "np.arange", "ax.bar", "ax.bar", "ax.bar", "ax.set_ylabel", "ax.set_title", "ax.set_xticks", "ax.set_xticklabels", "ax.legend", "matplotlib.backends.backend_agg.FigureCanvasAgg.draw", "matplotlib.backends.backend_agg.FigureCanvasAgg.print_to_buffer", "matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb", "matplotlib.close", "np.fromstring().reshape", "calnet_cprobs[].cpu().numpy", "pred_cprobs[].cpu().numpy", "len", "np.fromstring", "calnet_cprobs[].cpu", "pred_cprobs[].cpu"], "function", ["None"], ["", "def", "plot_calibration", "(", "gt_class_probs", ",", "calnet_cprobs", ",", "pred_cprobs", ")", ":", "\n", "    ", "calnet_cprobs", "=", "list", "(", "calnet_cprobs", "[", ":", ",", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "pred_cprobs", "=", "list", "(", "pred_cprobs", "[", ":", ",", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "# plt.figure(figsize=(5,5))", "\n", "canvas", "=", "FigureCanvasAgg", "(", "fig", ")", "\n", "\n", "labels", "=", "[", "'sidewalk'", ",", "'person'", ",", "'car'", ",", "'vegetation'", ",", "'road'", "]", "\n", "\n", "x", "=", "np", ".", "arange", "(", "len", "(", "labels", ")", ")", "# the label locations", "\n", "width", "=", "0.2", "# the width of the bars", "\n", "\n", "rects1", "=", "ax", ".", "bar", "(", "x", "-", "width", ",", "gt_class_probs", ",", "width", ",", "label", "=", "'gt'", ")", "\n", "rects2", "=", "ax", ".", "bar", "(", "x", ",", "calnet_cprobs", ",", "width", ",", "label", "=", "'calnet'", ")", "\n", "rects3", "=", "ax", ".", "bar", "(", "x", "+", "width", ",", "pred_cprobs", ",", "width", ",", "label", "=", "'final'", ")", "\n", "\n", "# Add some text for labels, title and custom x-axis tick labels, etc.", "\n", "ax", ".", "set_ylabel", "(", "'Flip Probability'", ")", "\n", "ax", ".", "set_title", "(", "'Sample frequency vs. gt flip probability'", ")", "\n", "ax", ".", "set_xticks", "(", "x", ")", "\n", "ax", ".", "set_xticklabels", "(", "labels", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "\n", "canvas", ".", "draw", "(", ")", "\n", "_", ",", "(", "width", ",", "height", ")", "=", "canvas", ".", "print_to_buffer", "(", ")", "\n", "s", "=", "canvas", ".", "tostring_rgb", "(", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "return", "np", ".", "fromstring", "(", "s", ",", "dtype", "=", "'uint8'", ")", ".", "reshape", "(", "(", "height", ",", "width", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.testing.test.evaluation": [[15, 162], ["test.visualize_results", "tqdm.tqdm", "nanmean", "torch.stack().mean", "torch.stack().mean", "nanmean", "nanmean", "enumerate", "torch.stack", "numpy.mean", "torch.stack", "save_results", "wandb.log", "wandb.log", "wandb.log", "print", "print", "print", "print", "len", "torch.stack", "torch.stack", "torch.stack().mean", "total_pixel_mode_counts[].unsqueeze().expand", "get_mode_statistics", "wandb.log", "print", "print", "print", "print", "print", "print", "unpack_batch", "unpack_batch", "[].permute.clone", "[].permute", "batch[].to().float", "[].permute().to", "get_cs_ignore_mask", "torch.where", "load_numpy_arrays", "[].permute.argmax", "calibration_net.eval", "generator.eval", "save_numpy_arrays", "utils.training_helpers.instance_checker", "torch.LongTensor", "torch.LongTensor", "nanmean.cpu", "nanmean.cpu", "nanmean.cpu", "torch.no_grad", "calibration_net_forward_pass", "generator.sample", "compute_ged", "avg_GED.append", "torch.stack().mean.append", "torch.stack().mean.append", "avgHungarian.append", "print", "eval", "compute_pred_class_probs", "avg_calnet_class_probs.append", "get_all_modes", "compute_ged", "avg_GED.append", "print", "torch.stack().mean.append", "torch.stack().mean.append", "count_pixel_modes", "count_pixel_modes.sum", "torch.stack", "total_pixel_mode_counts[].unsqueeze", "len", "batch[].to", "[].permute", "[].permute.argmax", "ged.mean", "nanmean", "ged.mean", "ged.mean().item", "torch.eye", "len", "labels[].long", "ged.mean().item", "nanmean", "ged.mean", "torch.eye", "bb_preds[].long", "ged.mean"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.testing.test.visualize_results", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.nanmean", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.nanmean", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.nanmean", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.save_results", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_mode_statistics", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.unpack_batch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.unpack_batch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_cs_ignore_mask", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.load_numpy_arrays", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.save_numpy_arrays", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.instance_checker", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.calibration_net_forward_pass", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.sample", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.compute_ged", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.compute_pred_class_probs", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_all_modes", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.compute_ged", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.count_pixel_modes", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.nanmean", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.nanmean"], ["def", "evaluation", "(", "dataloader_test", ",", "generator", ",", "calibration_net", ",", "discriminator", ",", "args", ",", "number_of_batches", "=", "1", ",", "b_index", "=", "0", ",", "visualize", "=", "True", ",", "save", "=", "False", ",", "load", "=", "False", ",", "print_stats", "=", "True", ")", ":", "\n", "\n", "    ", "if", "visualize", ":", "\n", "        ", "visualize_results", "(", "dataloader_test", ",", "generator", ",", "calibration_net", ",", "discriminator", ",", "args", ",", "number_of_batches", "=", "number_of_batches", ")", "\n", "", "else", ":", "\n", "        ", "avg_GED", "=", "[", "]", "\n", "avgYS", "=", "[", "]", "\n", "avgSS", "=", "[", "]", "\n", "total_pixel_mode_counts", "=", "0", "\n", "avg_calnet_class_probs", "=", "[", "]", "\n", "if", "args", ".", "dataset", "==", "\"LIDC\"", ":", "avgHungarian", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "batch", ")", "in", "tqdm", "(", "enumerate", "(", "dataloader_test", ")", ",", "total", "=", "len", "(", "dataloader_test", ")", ")", ":", "\n", "            ", "if", "i", ">=", "number_of_batches", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "\n", "                ", "if", "args", ".", "dataset", "==", "\"LIDC\"", ":", "\n", "                    ", "images", ",", "labels", ",", "gt_dist", "=", "unpack_batch", "(", "batch", ")", "\n", "gt_labels", "=", "None", "\n", "", "else", ":", "\n", "                    ", "images", ",", "labels", "=", "unpack_batch", "(", "batch", ")", "\n", "gt_dist", "=", "None", "\n", "gt_labels", "=", "None", "\n", "\n", "", "if", "(", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", "and", "args", ".", "class_flip", ")", ":", "\n", "                    ", "gt_labels", "=", "labels", ".", "clone", "(", ")", "\n", "labels", "=", "torch", ".", "eye", "(", "LABELS_CHANNELS", ")", "[", "labels", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "long", "(", ")", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "bb_preds", "=", "batch", "[", "\"bb_preds\"", "]", ".", "to", "(", "DEVICE", ")", ".", "float", "(", ")", "\n", "bb_preds", "=", "torch", ".", "eye", "(", "LABELS_CHANNELS", ")", "[", "bb_preds", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "long", "(", ")", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "overlapped_mask", "=", "get_cs_ignore_mask", "(", "bb_preds", ",", "labels", ")", "# get indexes of correct bb preds", "\n", "\n", "unlabelled_idxs", "=", "torch", ".", "where", "(", "labels", ".", "argmax", "(", "1", ")", "==", "24", ")", "# get indexes of unlabelled pixels", "\n", "", "else", ":", "\n", "                    ", "bb_preds", "=", "None", "\n", "overlapped_mask", "=", "None", "\n", "unlabelled_idxs", "=", "None", "\n", "\n", "", "if", "args", ".", "mode", "==", "\"test\"", "and", "load", ":", "\n", "                    ", "images", ",", "labels", ",", "calnet_preds", ",", "pred_dist", "=", "load_numpy_arrays", "(", "i", ",", "args", ",", "to_tensor", "=", "True", ")", "\n", "gt_labels", "=", "labels", ".", "argmax", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "calibration_net", ".", "eval", "(", ")", "\n", "generator", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "# forward pass", "\n", "                        ", "_", ",", "calnet_preds", ",", "calnet_labelled_imgs", "=", "calibration_net_forward_pass", "(", "calibration_net", ",", "images", ",", "bb_preds", ",", "unlabelled_idxs", ",", "args", ")", "\n", "\n", "g_input", "=", "images", "if", "args", ".", "calibration_net", "==", "\"EmptyCalNet\"", "else", "calnet_labelled_imgs", "\n", "pred_dist", ",", "_", ",", "_", "=", "generator", ".", "sample", "(", "g_input", ",", "ign_idxs", "=", "unlabelled_idxs", ",", "n_samples", "=", "args", ".", "n_generator_samples_test", ")", "\n", "\n", "", "", "if", "save", "and", "not", "load", ":", "\n", "                    ", "if", "args", ".", "dataset", "==", "\"LIDC\"", ":", "\n", "                        ", "s_labels", "=", "gt_dist", "\n", "", "else", ":", "\n", "                        ", "s_labels", "=", "labels", "\n", "", "save_numpy_arrays", "(", "images", ",", "s_labels", ",", "calnet_preds", ",", "pred_dist", ",", "batch_id", "=", "i", ",", "args", "=", "args", ")", "\n", "\n", "\n", "", "if", "args", ".", "dataset", "==", "\"LIDC\"", ":", "\n", "                    ", "if", "not", "args", ".", "generator", "==", "\"EmptyGenerator\"", ":", "\n", "                        ", "ged", ",", "_", ",", "d_YS", ",", "d_SS", ",", "h_scores", "=", "compute_ged", "(", "pred_dist", ",", "gt_dist", ",", "calnet_preds", ",", "args", "=", "args", ",", "g_input", "=", "images", ",", "n_samples", "=", "args", ".", "n_generator_samples_test", ",", "return_hungarian", "=", "True", ")", "\n", "avg_GED", ".", "append", "(", "ged", ".", "mean", "(", ")", ")", "\n", "avgYS", ".", "append", "(", "d_YS", ")", "\n", "avgSS", ".", "append", "(", "d_SS", ")", "\n", "avgHungarian", ".", "append", "(", "nanmean", "(", "h_scores", ")", ")", "\n", "\n", "print", "(", "f\"\\nGED_batch_{i} = {ged.mean().item()}, Hungarian = {nanmean(h_scores)}\"", ")", "\n", "\n", "", "", "if", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", "and", "args", ".", "class_flip", ":", "\n", "                    ", "if", "instance_checker", "(", "generator", ",", "GeneralVAE", ")", ":", "\n", "# get classes, corresponding flip classes and probabilities", "\n", "                        ", "flip_args", "=", "eval", "(", "f\"{args.dataset}_{args.flip_experiment}FLIP\"", ")", "\n", "class_1", "=", "flip_args", "[", "0", "]", "\n", "class_2", "=", "flip_args", "[", "1", "]", "\n", "flip_probs", "=", "flip_args", "[", "2", "]", "\n", "\n", "label", "=", "gt_labels", "[", ":", ",", "0", ",", ":", ",", ":", "]", "# rgb channels are identical so we extract only one of them", "\n", "\n", "calnet_class_probs", "=", "compute_pred_class_probs", "(", "labels", ",", "calnet_preds", ",", "overlapped_mask", ",", "args", ")", "\n", "avg_calnet_class_probs", ".", "append", "(", "calnet_class_probs", ")", "\n", "\n", "# get all modes", "\n", "gt_dist", "=", "get_all_modes", "(", "label", ",", "input_classes", "=", "class_1", ",", "target_classes", "=", "class_2", ",", "flip_probs", "=", "flip_probs", ",", "n_flipped_modes", "=", "len", "(", "flip_probs", ")", ")", "\n", "\n", "ged", ",", "d_matrices", ",", "d_YS", ",", "d_SS", "=", "compute_ged", "(", "pred_dist", ",", "gt_dist", ",", "calnet_preds", ",", "args", "=", "args", ",", "n_samples", "=", "args", ".", "n_generator_samples_test", ")", "\n", "avg_GED", ".", "append", "(", "ged", ".", "mean", "(", ")", ")", "\n", "\n", "print", "(", "f\"\\nGED_batch_{i} = \"", ",", "ged", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "avgYS", ".", "append", "(", "d_YS", ")", "\n", "avgSS", ".", "append", "(", "d_SS", ")", "\n", "\n", "pixel_mode_counts", "=", "count_pixel_modes", "(", "labels", ",", "pred_dist", ",", "input_classes", "=", "class_1", ",", "target_classes", "=", "class_2", ")", "\n", "total_pixel_mode_counts", "+=", "pixel_mode_counts", ".", "sum", "(", "0", ")", "#mean over the batch dim", "\n", "\n", "# mGED = torch.stack(avg_GED, dim=0).mean(0)", "\n", "", "", "", "", "mGED", "=", "nanmean", "(", "torch", ".", "stack", "(", "avg_GED", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "avgYS", "=", "torch", ".", "stack", "(", "avgYS", ",", "dim", "=", "0", ")", ".", "mean", "(", "0", ")", "\n", "avgSS", "=", "torch", ".", "stack", "(", "avgSS", ",", "dim", "=", "0", ")", ".", "mean", "(", "0", ")", "\n", "mYS", "=", "nanmean", "(", "avgYS", ")", "\n", "mSS", "=", "nanmean", "(", "avgSS", ")", "\n", "if", "args", ".", "dataset", "==", "\"LIDC\"", ":", "mHungarian", "=", "np", ".", "mean", "(", "avgHungarian", ")", "\n", "\n", "if", "(", "args", ".", "dataset", "==", "\"CAMVID\"", "or", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", ")", "and", "args", ".", "class_flip", ":", "\n", "\n", "            ", "f_classes_idxs", "=", "torch", ".", "stack", "(", "(", "torch", ".", "LongTensor", "(", "class_1", ")", ",", "torch", ".", "LongTensor", "(", "class_2", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "calnet_class_probs", "=", "torch", ".", "stack", "(", "avg_calnet_class_probs", ",", "dim", "=", "0", ")", ".", "mean", "(", "0", ")", "[", "f_classes_idxs", "]", "\n", "\n", "normalized_pixel_mode_counts", "=", "total_pixel_mode_counts", "/", "total_pixel_mode_counts", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "total_pixel_mode_counts", ".", "shape", ")", "\n", "pred_class_probs", "=", "normalized_pixel_mode_counts", "[", ":", ",", "1", ":", "]", "# 0 dim = total", "\n", "\n", "gt_mode_probs", "=", "get_mode_statistics", "(", "probabilities", "=", "flip_probs", ",", "n_flipped_modes", "=", "len", "(", "flip_probs", ")", ")", "[", "\"probs\"", "]", "\n", "\n", "# if save:", "\n", "save_results", "(", "gt_mode_probs", ",", "flip_probs", ",", "calnet_class_probs", ",", "pred_class_probs", ",", "mGED", ",", "mYS", ",", "mSS", ",", "args", ")", "\n", "\n", "# log stats", "\n", "", "if", "not", "args", ".", "debug", "and", "args", ".", "mode", "==", "\"train\"", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "\"meanGED\"", ":", "mGED", ".", "cpu", "(", ")", "}", ")", "\n", "\n", "wandb", ".", "log", "(", "{", "\"meanYS\"", ":", "mYS", ".", "cpu", "(", ")", "}", ")", "\n", "\n", "wandb", ".", "log", "(", "{", "\"meanSS\"", ":", "mSS", ".", "cpu", "(", ")", "}", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "\"LIDC\"", ":", "\n", "                ", "wandb", ".", "log", "(", "{", "\"hungarian\"", ":", "mHungarian", "}", ")", "\n", "\n", "", "", "if", "print_stats", ":", "\n", "            ", "print", "(", "\"\\n---------------------------------------------\"", ")", "\n", "print", "(", "\"\\nmGED = \"", ",", "mGED", ")", "\n", "print", "(", "\"\\nmYS = \"", ",", "mYS", ")", "\n", "print", "(", "\"\\nmSS = \"", ",", "mSS", ")", "\n", "if", "args", ".", "dataset", "==", "\"LIDC\"", ":", "print", "(", "\"\\nmHungarian = \"", ",", "mHungarian", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", "and", "args", ".", "class_flip", ":", "\n", "\n", "                ", "print", "(", "\"\\n---------------------------------------------\"", ")", "\n", "print", "(", "\"\\nGt class probs = \"", ",", "flip_probs", ")", "\n", "print", "(", "\"\\nCalibration Net class probs = \"", ",", "calnet_class_probs", ")", "\n", "\n", "print", "(", "\"\\nRefinement Net class probs = \"", ",", "pred_class_probs", ")", "\n", "\n", "print", "(", "\"\\n---------------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.testing.test.visualize_results": [[164, 216], ["generator.eval", "isinstance", "tqdm.tqdm", "enumerate", "test.test_forward_pass", "plot_comparison_figure", "matplotlib.figure", "matplotlib.gca", "plt.gca.axis", "matplotlib.imshow", "matplotlib.show", "matplotlib.close", "utils.training_helpers.instance_checker", "generator.plot_manifold", "matplotlib.imshow", "matplotlib.show", "matplotlib.close", "len", "unpack_batch", "unpack_batch", "[].permute.clone", "[].permute", "batch[].to().float", "[].permute().to", "generator.plot_sample_preds", "matplotlib.figure", "matplotlib.gca", "plt.gca.axis", "matplotlib.imshow", "matplotlib.show", "matplotlib.close", "batch[].to", "[].permute", "torch.eye", "labels[].long", "torch.eye", "bb_preds[].long"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.testing.test.test_forward_pass", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.plot_comparison_figure", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.instance_checker", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.unpack_batch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.unpack_batch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.GeneralVAE.GeneralVAE.plot_sample_preds"], ["", "", "", "", "def", "visualize_results", "(", "dataloader", ",", "generator", ",", "calinration_net", ",", "discriminator", ",", "args", ",", "number_of_batches", "=", "1", ")", ":", "\n", "\n", "    ", "generator", ".", "eval", "(", ")", "\n", "\n", "if", "isinstance", "(", "generator", ",", "GeneralVAE", ")", ":", "\n", "        ", "if", "args", ".", "z_dim", "==", "2", ":", "\n", "            ", "image", "=", "generator", ".", "plot_manifold", "(", "20", ",", "x1", "=", "0.1", ",", "x2", "=", "0.9", ")", "\n", "plt", ".", "imshow", "(", "image", ",", "interpolation", "=", "\"none\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "", "for", "i", ",", "(", "batch", ")", "in", "tqdm", "(", "enumerate", "(", "dataloader", ")", ",", "total", "=", "len", "(", "dataloader", ")", ")", ":", "\n", "        ", "if", "i", ">=", "number_of_batches", ":", "\n", "            ", "break", "\n", "\n", "", "if", "args", ".", "dataset", "==", "\"LIDC\"", ":", "\n", "            ", "images", ",", "labels", ",", "gt_dist", "=", "unpack_batch", "(", "batch", ")", "\n", "gt_labels", "=", "None", "\n", "", "else", ":", "\n", "            ", "images", ",", "labels", "=", "unpack_batch", "(", "batch", ")", "\n", "gt_dist", "=", "None", "\n", "gt_labels", "=", "None", "\n", "\n", "", "if", "(", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", "and", "args", ".", "class_flip", ")", ":", "\n", "            ", "gt_labels", "=", "labels", ".", "clone", "(", ")", "\n", "labels", "=", "torch", ".", "eye", "(", "LABELS_CHANNELS", ")", "[", "labels", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "long", "(", ")", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "bb_preds", "=", "batch", "[", "\"bb_preds\"", "]", ".", "to", "(", "DEVICE", ")", ".", "float", "(", ")", "\n", "bb_preds", "=", "torch", ".", "eye", "(", "LABELS_CHANNELS", ")", "[", "bb_preds", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "long", "(", ")", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "to", "(", "DEVICE", ")", "\n", "", "else", ":", "\n", "            ", "bb_preds", "=", "None", "\n", "\n", "", "calnet_preds", ",", "calnet_labelled_imgs", ",", "fake_labels", ",", "pred_dist", ",", "al_maps", ",", "gan_al_maps", "=", "test_forward_pass", "(", "images", ",", "labels", ",", "bb_preds", ",", "generator", ",", "calinration_net", ",", "discriminator", ",", "args", ")", "\n", "\n", "comparison_figure", "=", "plot_comparison_figure", "(", "batch", ",", "calnet_preds", ",", "fake_labels", ",", "al_maps", ",", "gan_al_maps", ",", "generator", ",", "calinration_net", ",", "discriminator", ",", "args", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "1", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "imshow", "(", "comparison_figure", ",", "interpolation", "=", "\"none\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "if", "instance_checker", "(", "generator", ",", "GeneralVAE", ")", ":", "\n", "\n", "            ", "plotted_samples", "=", "generator", ".", "plot_sample_preds", "(", "images", ",", "labels", ",", "calnet_preds", ",", "pred_dist", ",", "gt_dist", ",", "n_preds", "=", "args", ".", "n_generator_samples_test", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "3", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "imshow", "(", "plotted_samples", ",", "interpolation", "=", "\"none\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.testing.test.validation": [[217, 227], ["test.validation_plots", "test.evaluation", "list", "next", "iter", "iter"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.testing.test.validation_plots", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.testing.test.evaluation"], ["", "", "", "def", "validation", "(", "validation_data", ",", "generator", ",", "calibration_net", ",", "discriminator", ",", "args", ",", "batch_idx", ")", ":", "\n", "\n", "    ", "if", "args", ".", "dataset", "==", "\"LIDC\"", ":", "\n", "       ", "plotting_batches", "=", "list", "(", "iter", "(", "validation_data", ")", ")", "[", "2", "]", "# nice tumours", "\n", "", "else", ":", "\n", "       ", "plotting_batches", "=", "next", "(", "iter", "(", "validation_data", ")", ")", "[", "4", "]", "\n", "\n", "", "validation_plots", "(", "plotting_batches", ",", "generator", ",", "calibration_net", ",", "discriminator", ",", "args", ",", "batch_idx", "=", "batch_idx", ")", "\n", "\n", "evaluation", "(", "validation_data", ",", "generator", ",", "calibration_net", ",", "discriminator", ",", "args", ",", "b_index", "=", "batch_idx", ",", "number_of_batches", "=", "1", ",", "visualize", "=", "False", ",", "save", "=", "False", ",", "print_stats", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.testing.test.validation_plots": [[228, 321], ["torch.no_grad", "utils.training_helpers.instance_checker", "utils.training_helpers.instance_checker", "utils.training_helpers.instance_checker", "test.test_forward_pass", "compute_stats", "plot_comparison_figure", "utils.training_helpers.instance_checker", "unpack_batch", "unpack_batch", "batch[].to().float", "[].permute().to", "[].permute().to", "get_cs_ignore_mask", "[].permute.clone", "[].permute", "[].permute().to().mean", "kl().mean", "print", "utils.model_utils.save_models", "plot_calibration_figure", "generator.plot_sample_preds", "torch.from_numpy().float", "save_example_images", "wandb.log", "utils.training_helpers.instance_checker", "wandb.log", "print", "utils.model_utils.save_models", "torch.from_numpy().float", "wandb.log", "torch.from_numpy().float", "wandb.log", "batch[].to", "[].permute", "[].permute", "[].permute().to", "kl", "torch.from_numpy", "wandb.Image", "torch.eye", "calnet_preds.detach", "numpy.moveaxis", "torchvision.make_grid", "torch.from_numpy", "wandb.Image", "torch.from_numpy", "wandb.Image", "labels[].long", "[].permute", "numpy.moveaxis", "torchvision.make_grid", "numpy.moveaxis", "torchvision.make_grid", "torch.eye", "torch.eye", "torch.log", "p.clamp", "torch.log", "bb_preds[].long", "labels[].long", "p.clamp", "q.clamp", "p.clamp", "torch.eye", "gt_dist.long"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.instance_checker", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.instance_checker", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.instance_checker", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.testing.test.test_forward_pass", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.compute_stats", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.plot_comparison_figure", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.instance_checker", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.unpack_batch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.unpack_batch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.get_cs_ignore_mask", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.model_utils.save_models", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.evaluation_utils.plot_calibration_figure", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.GeneralVAE.GeneralVAE.plot_sample_preds", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.save_example_images", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.instance_checker", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.model_utils.save_models", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validation_plots", "(", "batch", ",", "\n", "generator", ",", "\n", "calibration_net", ",", "\n", "discriminator", ",", "\n", "args", ",", "\n", "batch_idx", "=", "0", "\n", ")", ":", "\n", "\n", "    ", "assert", "instance_checker", "(", "generator", ",", "GeneralGenerator", ")", "\n", "assert", "instance_checker", "(", "calibration_net", ",", "GeneralGenerator", ")", "\n", "assert", "instance_checker", "(", "discriminator", ",", "GeneralDiscriminator", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "\"LIDC\"", ":", "\n", "        ", "images", ",", "labels", ",", "gt_dist", "=", "unpack_batch", "(", "batch", ")", "\n", "gt_labels", "=", "None", "\n", "", "else", ":", "\n", "        ", "images", ",", "labels", "=", "unpack_batch", "(", "batch", ")", "\n", "\n", "gt_dist", "=", "None", "\n", "gt_labels", "=", "None", "\n", "\n", "", "if", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", ":", "\n", "        ", "bb_preds", "=", "batch", "[", "\"bb_preds\"", "]", ".", "to", "(", "DEVICE", ")", ".", "float", "(", ")", "\n", "bb_preds", "=", "torch", ".", "eye", "(", "LABELS_CHANNELS", ")", "[", "bb_preds", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "long", "(", ")", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "one_hot_labels", "=", "torch", ".", "eye", "(", "LABELS_CHANNELS", ")", "[", "labels", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "long", "(", ")", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "to", "(", "DEVICE", ")", "\n", "overlapped_mask", "=", "get_cs_ignore_mask", "(", "bb_preds", ",", "one_hot_labels", ")", "\n", "", "else", ":", "\n", "        ", "bb_preds", "=", "None", "\n", "overlapped_mask", "=", "None", "\n", "\n", "", "if", "(", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", "and", "args", ".", "class_flip", ")", ":", "\n", "        ", "gt_labels", "=", "labels", ".", "clone", "(", ")", "\n", "labels", "=", "torch", ".", "eye", "(", "LABELS_CHANNELS", ")", "[", "labels", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "long", "(", ")", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "", "calnet_preds", ",", "calnet_labelled_imgs", ",", "fake_labels", ",", "pred_dist", ",", "al_maps", ",", "gan_al_maps", "=", "test_forward_pass", "(", "images", ",", "labels", ",", "bb_preds", ",", "generator", ",", "calibration_net", ",", "discriminator", ",", "args", ")", "\n", "\n", "\n", "# save best calibration net", "\n", "if", "args", ".", "dataset", "==", "\"LIDC\"", ":", "\n", "        ", "lab_dist", "=", "torch", ".", "eye", "(", "LABELS_CHANNELS", ")", "[", "(", "gt_dist", ")", ".", "long", "(", ")", "]", ".", "permute", "(", "1", ",", "0", ",", "4", ",", "2", ",", "3", ")", ".", "to", "(", "DEVICE", ")", ".", "mean", "(", "0", ")", "\n", "eps", "=", "1e-7", "\n", "\n", "kl", "=", "lambda", "p", ",", "q", ":", "(", "-", "p", ".", "clamp", "(", "min", "=", "eps", ",", "max", "=", "1", "-", "eps", ")", "*", "torch", ".", "log", "(", "q", ".", "clamp", "(", "min", "=", "eps", ",", "max", "=", "1", "-", "eps", ")", ")", "\n", "+", "p", ".", "clamp", "(", "min", "=", "eps", ",", "max", "=", "1", "-", "eps", ")", "*", "torch", ".", "log", "(", "p", ".", "clamp", "(", "min", "=", "eps", ",", "max", "=", "1", "-", "eps", ")", ")", ")", ".", "sum", "(", "1", ")", "\n", "\n", "calnet_score", "=", "kl", "(", "calnet_preds", ".", "detach", "(", ")", ",", "lab_dist", ")", ".", "mean", "(", ")", "\n", "\n", "if", "args", ".", "generator", "==", "\"EmptyGenerator\"", "and", "(", "not", "args", ".", "debug", ")", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "\"Calnet score\"", ":", "calnet_score", "}", ")", "\n", "\n", "", "global", "BEST_CALNET_SCORE", "\n", "\n", "if", "args", ".", "mode", "==", "\"train\"", "and", "args", ".", "generator", "==", "\"EmptyGenerator\"", "and", "(", "not", "args", ".", "debug", ")", "and", "calnet_score", "is", "not", "None", "and", "calnet_score", "<", "BEST_CALNET_SCORE", ":", "\n", "            ", "BEST_CALNET_SCORE", "=", "calnet_score", "\n", "print", "(", "f\"{PRINTCOLOR_GREEN} Saved New Best Calibration Net! {PRINTCOLOR_END}\"", ")", "\n", "save_models", "(", "discriminator", ",", "generator", ",", "calibration_net", ",", "f\"Best_Model\"", ")", "\n", "\n", "# # log stats", "\n", "", "", "ged", "=", "compute_stats", "(", "args", ",", "generator", ",", "images", ",", "calnet_preds", ",", "calnet_labelled_imgs", ",", "fake_labels", ",", "pred_dist", ",", "gan_al_maps", ",", "labels", ",", "gt_dist", ",", "gt_labels", ",", "overlapped_mask", ",", "b_index", "=", "batch_idx", ")", "\n", "\n", "global", "BEST_GED", "\n", "\n", "if", "args", ".", "mode", "==", "\"train\"", "and", "(", "not", "args", ".", "debug", ")", "and", "ged", "is", "not", "None", "and", "ged", "<", "BEST_GED", ":", "\n", "        ", "BEST_GED", "=", "ged", "\n", "print", "(", "f\"{PRINTCOLOR_GREEN} Saved New Best Model! {PRINTCOLOR_END}\"", ")", "\n", "save_models", "(", "discriminator", ",", "generator", ",", "calibration_net", ",", "f\"Best_Model\"", ")", "\n", "\n", "# Plots", "\n", "", "comparison_figure", "=", "plot_comparison_figure", "(", "batch", ",", "calnet_preds", ",", "fake_labels", ",", "al_maps", ",", "gan_al_maps", ",", "generator", ",", "calibration_net", ",", "discriminator", ",", "args", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "\"CAMVID\"", "or", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", ":", "\n", "        ", "calibration_figure", "=", "plot_calibration_figure", "(", "labels", ",", "calnet_preds", ",", "pred_dist", ",", "overlapped_mask", ",", "args", ")", "\n", "\n", "", "if", "instance_checker", "(", "generator", ",", "GeneralVAE", ")", ":", "\n", "        ", "plotted_samples", "=", "generator", ".", "plot_sample_preds", "(", "images", ",", "labels", ",", "calnet_preds", ",", "pred_dist", ",", "gt_dist", ",", "n_preds", "=", "args", ".", "n_generator_samples_test", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "\n", "", "if", "not", "args", ".", "debug", ":", "\n", "# save and log", "\n", "\n", "        ", "comparison_figure", "=", "torch", ".", "from_numpy", "(", "np", ".", "moveaxis", "(", "comparison_figure", ",", "-", "1", ",", "0", ")", ")", ".", "float", "(", ")", "\n", "save_example_images", "(", "comparison_figure", ",", "batch_idx", ",", "\"comparison\"", ",", "\"png\"", ")", "\n", "wandb", ".", "log", "(", "{", "\"Results\"", ":", "wandb", ".", "Image", "(", "vutils", ".", "make_grid", "(", "comparison_figure", ",", "normalize", "=", "True", ")", ")", "}", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", ":", "\n", "            ", "calibration_figure", "=", "torch", ".", "from_numpy", "(", "np", ".", "moveaxis", "(", "calibration_figure", ",", "-", "1", ",", "0", ")", ")", ".", "float", "(", ")", "\n", "wandb", ".", "log", "(", "{", "\"Calibration\"", ":", "wandb", ".", "Image", "(", "vutils", ".", "make_grid", "(", "calibration_figure", ",", "normalize", "=", "True", ")", ")", "}", ")", "\n", "\n", "", "if", "instance_checker", "(", "generator", ",", "GeneralVAE", ")", ":", "\n", "\n", "            ", "plotted_samples", "=", "torch", ".", "from_numpy", "(", "np", ".", "moveaxis", "(", "plotted_samples", ",", "-", "1", ",", "0", ")", ")", ".", "float", "(", ")", "\n", "wandb", ".", "log", "(", "{", "\"Plotted samples\"", ":", "wandb", ".", "Image", "(", "vutils", ".", "make_grid", "(", "plotted_samples", ",", "normalize", "=", "True", ")", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.testing.test.test_forward_pass": [[323, 377], ["torch.no_grad", "discriminator.eval", "torch.where", "calibration_net.eval", "calibration_net_forward_pass", "get_entropy", "generator.eval", "generator.sample", "get_entropy", "labels.argmax"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.calibration_net_forward_pass", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.get_entropy", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.sample", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.get_entropy"], ["", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_forward_pass", "(", "images", ",", "\n", "labels", ",", "\n", "bb_preds", ",", "\n", "generator", ",", "\n", "calibration_net", ",", "\n", "discriminator", ",", "\n", "args", ",", "\n", ")", ":", "\n", "\n", "    ", "if", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", ":", "\n", "        ", "unlabelled_idxs", "=", "torch", ".", "where", "(", "labels", ".", "argmax", "(", "1", ")", "==", "24", ")", "# get indexes of unlabelled pixels", "\n", "", "else", ":", "\n", "        ", "unlabelled_idxs", "=", "None", "\n", "\n", "# check if we use a calibration net", "\n", "", "use_calibration_net", "=", "args", ".", "calibration_net", "!=", "\"EmptyCalNet\"", "\n", "use_generator", "=", "args", ".", "generator", "!=", "\"EmptyGenerator\"", "\n", "\n", "# ensure all models are in eval mode", "\n", "discriminator", ".", "eval", "(", ")", "\n", "\n", "if", "use_calibration_net", ":", "\n", "        ", "calibration_net", ".", "eval", "(", ")", "\n", "\n", "# forward pass calibration net", "\n", "_", ",", "calnet_preds", ",", "calnet_labelled_imgs", "=", "calibration_net_forward_pass", "(", "calibration_net", ",", "images", ",", "bb_preds", ",", "unlabelled_idxs", ",", "args", ")", "\n", "\n", "# get calibration pred aleatoric uncertainty maps", "\n", "al_maps", "=", "get_entropy", "(", "calnet_preds", ",", "CHANNEL_DIM", ")", "\n", "\n", "", "else", ":", "\n", "        ", "calnet_preds", "=", "None", "\n", "calnet_labelled_imgs", "=", "None", "\n", "al_maps", "=", "None", "\n", "\n", "", "if", "use_generator", ":", "\n", "        ", "generator", ".", "eval", "(", ")", "\n", "\n", "# # forward pass generator", "\n", "g_input", "=", "images", "if", "args", ".", "calibration_net", "==", "\"EmptyCalNet\"", "else", "calnet_labelled_imgs", "\n", "pred_dist", ",", "_", ",", "_", "=", "generator", ".", "sample", "(", "g_input", ",", "ign_idxs", "=", "unlabelled_idxs", ",", "n_samples", "=", "args", ".", "n_generator_samples_test", ")", "\n", "\n", "fake_labels", "=", "pred_dist", "[", "0", "]", "\n", "\n", "# get generator aleatoric uncertainty maps", "\n", "gan_al_maps", "=", "get_entropy", "(", "fake_labels", ",", "CHANNEL_DIM", ")", "\n", "\n", "", "else", ":", "\n", "        ", "fake_labels", "=", "None", "\n", "pred_dist", "=", "None", "\n", "gan_al_maps", "=", "None", "\n", "\n", "", "return", "calnet_preds", ",", "calnet_labelled_imgs", ",", "fake_labels", ",", "pred_dist", ",", "al_maps", ",", "gan_al_maps", "\n", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.__init__": [[24, 101], ["DATA_MANAGER.set_date_stamp", "models.losses.CalNetLoss.CalNetLoss", "models.general.trainer.Trainer", "models.general.trainer.Trainer", "models.general.trainer.Trainer", "assert_type", "assert_type", "assert_type", "assert_type", "assert_type", "assert_type", "assert_non_empty", "assert_non_empty", "assert_non_empty", "assert_non_empty", "assert_non_empty", "list", "list", "iter", "iter"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.data_management.DataManager.set_date_stamp", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_type", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_type", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_type", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_type", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_type", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_type", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_non_empty", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_non_empty", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_non_empty", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_non_empty", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_non_empty"], ["    ", "def", "__init__", "(", "self", ",", "\n", "generator", ",", "\n", "discriminator", ",", "\n", "calibration_net", ",", "\n", "dataloader_train", ",", "\n", "dataloader_validation", ",", "\n", "optimizer_gen", ",", "\n", "optimizer_dis", ",", "\n", "optimizer_calnet", ",", "\n", "gen_lr_sched", ",", "\n", "dis_lr_sched", ",", "\n", "calnet_lr_sched", ",", "\n", "loss_gen", ",", "\n", "loss_dis", ",", "\n", "arguments", ")", ":", "\n", "\n", "        ", "DATA_MANAGER", ".", "set_date_stamp", "(", ")", "\n", "\n", "# models", "\n", "self", ".", "generator", "=", "generator", "\n", "self", ".", "discriminator", "=", "discriminator", "\n", "self", ".", "calibration_net", "=", "calibration_net", "\n", "\n", "# data", "\n", "self", ".", "dataloader_train", "=", "dataloader_train", "\n", "self", ".", "dataloader_validation", "=", "dataloader_validation", "\n", "\n", "# optimizers", "\n", "self", ".", "optimizer_gen", "=", "optimizer_gen", "\n", "self", ".", "optimizer_dis", "=", "optimizer_dis", "\n", "self", ".", "optimizer_calnet", "=", "optimizer_calnet", "\n", "\n", "# lr schedulers", "\n", "self", ".", "gen_lr_sched", "=", "gen_lr_sched", "\n", "self", ".", "dis_lr_sched", "=", "dis_lr_sched", "\n", "self", ".", "calnet_lr_sched", "=", "calnet_lr_sched", "\n", "\n", "# loss functions", "\n", "self", ".", "loss_gen", "=", "loss_gen", "\n", "self", ".", "loss_dis", "=", "loss_dis", "\n", "self", ".", "loss_calnet", "=", "CalNetLoss", "(", "arguments", ".", "CalNetLoss_weight", ")", "\n", "\n", "# save configuration", "\n", "self", ".", "args", "=", "arguments", "\n", "\n", "# trainers", "\n", "self", ".", "trainer_calnet", "=", "Trainer", "(", "[", "calibration_net", "]", ",", "[", "optimizer_calnet", "]", ")", "\n", "self", ".", "trainer_gen", "=", "Trainer", "(", "[", "generator", "]", ",", "[", "optimizer_gen", "]", ")", "\n", "self", ".", "trainer_dis", "=", "Trainer", "(", "[", "discriminator", "]", ",", "[", "optimizer_dis", "]", ")", "\n", "\n", "# arguments", "\n", "self", ".", "args", "=", "arguments", "\n", "\n", "if", "self", ".", "args", ".", "dataset", "==", "\"LIDC\"", ":", "\n", "            ", "self", ".", "plotting_batches", "=", "list", "(", "iter", "(", "self", ".", "dataloader_validation", ")", ")", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "plotting_batches", "=", "list", "(", "iter", "(", "self", ".", "dataloader_validation", ")", ")", "[", "8", "]", "\n", "\n", "# assert type", "\n", "", "assert_type", "(", "GeneralCalNet", ",", "calibration_net", ")", "\n", "assert_type", "(", "GeneralGenerator", ",", "generator", ")", "\n", "assert_type", "(", "GeneralGenerator", ",", "generator", ")", "\n", "assert_type", "(", "GeneralDiscriminator", ",", "discriminator", ")", "\n", "assert_type", "(", "GeneralLoss", ",", "loss_dis", ")", "\n", "assert_type", "(", "GeneralLoss", ",", "loss_gen", ")", "\n", "\n", "# assert nonzero", "\n", "assert_non_empty", "(", "arguments", ")", "\n", "assert_non_empty", "(", "optimizer_dis", ")", "\n", "assert_non_empty", "(", "optimizer_gen", ")", "\n", "assert_non_empty", "(", "dataloader_train", ")", "\n", "assert_non_empty", "(", "dataloader_validation", ")", "\n", "\n", "if", "arguments", ".", "dataset", "==", "\"LIDC\"", ":", "\n", "            ", "assert", "LABELS_CHANNELS", "==", "2", ",", "\"Need to change LABELS_CHANNELS variable to: 2\"", "\n", "", "elif", "arguments", ".", "dataset", "==", "\"CITYSCAPES19\"", ":", "\n", "            ", "assert", "LABELS_CHANNELS", "==", "25", ",", "\"Need to change LABELS_CHANNELS variable to: 25\"", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.batch_iteration": [[102, 281], ["unpack_batch", "torch.cat", "sys.stdout.flush", "torch.where", "train.TrainingProcess.trainer_calnet.prepare_training", "train.TrainingProcess.trainer_gen.prepare_training", "train.TrainingProcess.trainer_dis.prepare_training", "train.TrainingProcess.trainer_calnet.prepare_evaluation", "train.TrainingProcess.trainer_gen.prepare_evaluation", "train.TrainingProcess.trainer_dis.prepare_evaluation", "generator_forward_pass", "train.TrainingProcess.loss_gen", "batch[].to().float", "calibration_net_forward_pass", "train.TrainingProcess.loss_calnet", "train.TrainingProcess.trainer_calnet.do_backward", "len", "train.TrainingProcess.trainer_gen.do_backward", "scheduler", "torch.nn.BCELoss", "torch.cat.requires_grad_", "train.TrainingProcess.discriminator", "torch.ones().to", "torch.nn.BCELoss.", "pred_labelled.detach.detach.detach", "train.TrainingProcess.discriminator", "torch.zeros().to", "torch.nn.BCELoss.", "compute_accuracy", "labels.argmax", "torch.no_grad", "get_entropy", "torch.no_grad", "calibration_net_forward_pass", "get_entropy", "train.TrainingProcess.loss_calnet", "train.TrainingProcess.optimizer_dis.zero_grad", "torch.sum", "total_dis_loss.backward", "train.TrainingProcess.optimizer_dis.step", "torch.cat", "torch.cat", "torch.no_grad", "discriminator_forward_pass", "train.TrainingProcess.loss_dis", "batch[].to", "torch.ones", "torch.autograd.grad", "real_grad.pow", "torch.zeros", "torch.sum.mean().item", "train.TrainingProcess.sum", "torch.sum.mean"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.unpack_batch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.trainer.Trainer.prepare_training", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.trainer.Trainer.prepare_training", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.trainer.Trainer.prepare_training", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.trainer.Trainer.prepare_evaluation", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.trainer.Trainer.prepare_evaluation", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.trainer.Trainer.prepare_evaluation", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.generator_forward_pass", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.calibration_net_forward_pass", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.trainer.Trainer.do_backward", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.trainer.Trainer.do_backward", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.scheduler", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.compute_accuracy", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.get_entropy", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.calibration_net_forward_pass", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.get_entropy", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.discriminator_forward_pass"], ["", "", "def", "batch_iteration", "(", "self", ",", "\n", "batch", ",", "\n", "b_index", ",", "\n", "total_b_index", ",", "\n", "train", "=", "True", ",", "\n", "accuracy_discriminator", "=", "0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n         inner loop of epoch iteration\n\n        \"\"\"", "\n", "# unpack batch", "\n", "images", ",", "labels", "=", "unpack_batch", "(", "batch", ")", "\n", "\n", "if", "self", ".", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", ":", "\n", "            ", "unlabelled_idxs", "=", "torch", ".", "where", "(", "labels", ".", "argmax", "(", "1", ")", "==", "24", ")", "# get indices of unlabelled pixels", "\n", "", "else", ":", "\n", "            ", "unlabelled_idxs", "=", "None", "\n", "\n", "# combine x and y", "\n", "", "gt_labelled_imgs", "=", "torch", ".", "cat", "(", "(", "images", ",", "labels", ")", ",", "dim", "=", "CHANNEL_DIM", ")", "\n", "\n", "if", "train", ":", "\n", "# set all models to evaluation mode", "\n", "            ", "self", ".", "trainer_calnet", ".", "prepare_training", "(", ")", "\n", "self", ".", "trainer_gen", ".", "prepare_training", "(", ")", "\n", "self", ".", "trainer_dis", ".", "prepare_training", "(", ")", "\n", "", "else", ":", "\n", "# set all models to evaluation mode", "\n", "            ", "self", ".", "trainer_calnet", ".", "prepare_evaluation", "(", ")", "\n", "self", ".", "trainer_gen", ".", "prepare_evaluation", "(", ")", "\n", "self", ".", "trainer_dis", ".", "prepare_evaluation", "(", ")", "\n", "\n", "# if we are using a calibration net", "\n", "", "if", "self", ".", "args", ".", "calibration_net", "!=", "\"EmptyCalNet\"", ":", "\n", "\n", "            ", "if", "self", ".", "args", ".", "dataset", "==", "\"CITYSCAPES19\"", ":", "\n", "                ", "bb_preds", "=", "batch", "[", "\"bb_preds\"", "]", ".", "to", "(", "DEVICE", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "                ", "bb_preds", "=", "None", "\n", "\n", "# forward pass calibration net", "\n", "", "if", "not", "(", "self", ".", "args", ".", "pretrained", "and", "\"calibration_net\"", "in", "self", ".", "args", ".", "models_to_load", ")", ":", "# dont cache", "\n", "                ", "calnet_preds_logits", ",", "calnet_preds", ",", "calnet_labelled_imgs", "=", "calibration_net_forward_pass", "(", "self", ".", "calibration_net", ",", "images", ",", "bb_preds", ",", "unlabelled_idxs", ",", "self", ".", "args", ")", "\n", "\n", "# evaluate aletoric uncertainty", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "aleatoric_maps", "=", "get_entropy", "(", "calnet_preds", ",", "dim", "=", "CHANNEL_DIM", ")", "\n", "\n", "# make sure that the weight for the calibration net loss is not zero!", "\n", "", "assert", "self", ".", "loss_calnet", ".", "active", ",", "\"Calibration net loss is not active! (weight = 0)\"", "\n", "\n", "# compute calibration net loss", "\n", "loss_calnet", ",", "loss_calnet_saving", "=", "self", ".", "loss_calnet", "(", "calnet_preds_logits", ",", "labels", ",", "self", ".", "args", ")", "\n", "\n", "# backward pass calibration net", "\n", "self", ".", "trainer_calnet", ".", "do_backward", "(", "loss_calnet", ")", "\n", "\n", "", "else", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "calnet_preds_logits", ",", "calnet_preds", ",", "calnet_labelled_imgs", "=", "calibration_net_forward_pass", "(", "self", ".", "calibration_net", ",", "images", ",", "bb_preds", ",", "unlabelled_idxs", ",", "self", ".", "args", ")", "\n", "\n", "# evaluate aletoric uncertainty", "\n", "aleatoric_maps", "=", "get_entropy", "(", "calnet_preds", ",", "dim", "=", "CHANNEL_DIM", ")", "\n", "\n", "# compute calibration net loss", "\n", "loss_calnet", ",", "loss_calnet_saving", "=", "self", ".", "loss_calnet", "(", "calnet_preds_logits", ",", "labels", ",", "self", ".", "args", ")", "# todo add accountant weighting?", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "calnet_preds_logits", "=", "None", "\n", "calnet_preds", "=", "None", "\n", "calnet_labelled_imgs", "=", "None", "\n", "aleatoric_maps", "=", "None", "\n", "loss_calnet", "=", "None", "\n", "loss_calnet_saving", "=", "{", "}", "\n", "\n", "# if we are using a generator", "\n", "", "if", "self", ".", "args", ".", "generator", "!=", "\"EmptyGenerator\"", ":", "\n", "\n", "# initialize variables", "\n", "            ", "preds", "=", "None", "\n", "pred_labelled", "=", "None", "\n", "loss_gen", "=", "None", "\n", "loss_gen_saving", "=", "{", "}", "\n", "\n", "\n", "# forward pass generator", "\n", "preds", ",", "pred_labelled", ",", "pred_dist", ",", "pred_dist_labelled", "=", "generator_forward_pass", "(", "self", ".", "generator", ",", "images", ",", "calnet_labelled_imgs", ",", "unlabelled_idxs", ",", "self", ".", "args", ")", "\n", "\n", "# compute generator lossmultinomial(p,1)", "\n", "loss_gen", ",", "loss_gen_saving", "=", "self", ".", "loss_gen", "(", "images", ",", "\n", "labels", ",", "\n", "gt_labelled_imgs", ",", "\n", "calnet_preds", ",", "\n", "calnet_labelled_imgs", ",", "\n", "preds", ",", "\n", "pred_labelled", ",", "\n", "pred_dist", ",", "\n", "pred_dist_labelled", ",", "\n", "self", ".", "generator", ",", "\n", "self", ".", "discriminator", ",", "\n", "self", ".", "args", ",", "\n", "b_index", ",", "\n", "len", "(", "self", ".", "dataloader_train", ")", "# dataset size needed for scheduling of linear annealing", "\n", ")", "\n", "\n", "\n", "if", "not", "(", "self", ".", "args", ".", "pretrained", "and", "\"generator\"", "in", "self", ".", "args", ".", "models_to_load", ")", "or", "self", ".", "args", ".", "resume", ":", "#todo add resume training argument?", "\n", "# backward pass generator", "\n", "                ", "self", ".", "trainer_gen", ".", "do_backward", "(", "loss_gen", ")", "\n", "", "", "else", ":", "\n", "            ", "preds", "=", "None", "\n", "pred_labelled", "=", "None", "\n", "loss_gen", "=", "None", "\n", "loss_gen_saving", "=", "{", "}", "\n", "\n", "# if we are using a discriminator", "\n", "", "if", "self", ".", "args", ".", "discriminator", "!=", "\"EmptyDiscriminator\"", ":", "\n", "\n", "# initialize variables", "\n", "# accuracy_discriminator = None", "\n", "            ", "loss_dis", "=", "None", "\n", "loss_dis_saving", "=", "{", "}", "\n", "\n", "if", "\"D\"", "in", "scheduler", "(", "total_b_index", ",", "*", "self", ".", "args", ".", "schedule", ")", ":", "# todo check if this works", "\n", "\n", "                ", "if", "accuracy_discriminator", "<", "self", ".", "args", ".", "DiscDAccCap", ":", "\n", "                    ", "self", ".", "optimizer_dis", ".", "zero_grad", "(", ")", "\n", "\n", "# discriminator loss", "\n", "\n", "# real loss", "\n", "", "get_loss", "=", "torch", ".", "nn", ".", "BCELoss", "(", ")", "\n", "\n", "gt_labelled_imgs", ".", "requires_grad_", "(", ")", "\n", "real_scores", "=", "self", ".", "discriminator", "(", "gt_labelled_imgs", ")", "\n", "real_labels", "=", "torch", ".", "ones", "(", "real_scores", ".", "shape", ")", ".", "to", "(", "DEVICE", ")", "\n", "real_loss", "=", "get_loss", "(", "real_scores", ",", "real_labels", ")", "\n", "\n", "if", "accuracy_discriminator", "<", "self", ".", "args", ".", "DiscDAccCap", ":", "\n", "                    ", "real_grad", "=", "autograd", ".", "grad", "(", "outputs", "=", "real_scores", ".", "sum", "(", ")", ",", "inputs", "=", "gt_labelled_imgs", ",", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ")", "[", "0", "]", "\n", "r1", "=", "torch", ".", "sum", "(", "real_grad", ".", "pow", "(", "2.0", ")", ",", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "\n", "# fake loss", "\n", "", "pred_labelled", "=", "pred_labelled", ".", "detach", "(", ")", "\n", "fake_scores", "=", "self", ".", "discriminator", "(", "pred_labelled", ")", "\n", "fake_labels", "=", "torch", ".", "zeros", "(", "fake_scores", ".", "shape", ")", ".", "to", "(", "DEVICE", ")", "\n", "fake_loss", "=", "get_loss", "(", "fake_scores", ",", "fake_labels", ")", "\n", "\n", "if", "accuracy_discriminator", "<", "self", ".", "args", ".", "DiscDAccCap", ":", "\n", "                    ", "total_dis_loss", "=", "(", "real_loss", "+", "fake_loss", "+", "10", "*", "r1", ")", ".", "mean", "(", ")", "\n", "total_dis_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_dis", ".", "step", "(", ")", "\n", "\n", "", "loss_dis_saving", "=", "{", "\"DefaultDLoss\"", ":", "(", "real_loss", "+", "fake_loss", ")", ".", "item", "(", ")", "}", "\n", "\n", "if", "accuracy_discriminator", "<", "self", ".", "args", ".", "DiscDAccCap", ":", "\n", "\n", "                    ", "loss_dis_saving", "=", "{", "**", "loss_dis_saving", ",", "\"Regularized Loss\"", ":", "r1", ".", "mean", "(", ")", ".", "item", "(", ")", "}", "\n", "\n", "", "accuracy_discriminator", "=", "compute_accuracy", "(", "torch", ".", "cat", "(", "(", "real_scores", ",", "fake_scores", ")", ",", "0", ")", ",", "torch", ".", "cat", "(", "(", "real_labels", ",", "fake_labels", ")", ",", "0", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "# do not cache", "\n", "# forward pass discriminator", "\n", "                    ", "combined_input", ",", "scores", ",", "gt_labels", ",", "accuracy_discriminator", "=", "discriminator_forward_pass", "(", "self", ".", "discriminator", ",", "gt_labelled_imgs", ",", "pred_labelled", ",", "self", ".", "args", ")", "\n", "\n", "# compute dicsriminator loss", "\n", "loss_dis", ",", "loss_dis_saving", "=", "self", ".", "loss_dis", "(", "self", ".", "discriminator", ",", "combined_input", ",", "scores", ",", "gt_labels", ",", "self", ".", "args", ")", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "accuracy_discriminator", "=", "None", "\n", "loss_dis", "=", "None", "\n", "loss_dis_saving", "=", "{", "}", "\n", "\n", "# print flush", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "return", "loss_calnet_saving", ",", "loss_gen_saving", ",", "loss_dis_saving", ",", "preds", ",", "aleatoric_maps", ",", "accuracy_discriminator", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.epoch_iteration": [[282, 343], ["enumerate", "train.TrainingProcess.batch_iteration", "assert_type", "assert_type", "torch.cuda.empty_cache", "time.process_time", "sum", "sum", "train.TrainingProcess.log", "assert_type", "progress.append", "testing.test.validation_plots", "time_per_batch.append", "len", "loss_gen.values", "loss_dis.values", "sum", "datetime.datetime.datetime.now", "KeyboardInterrupt", "time.process_time", "loss_calnet.values", "time_passed.total_seconds", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.batch_iteration", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_type", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_type", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.assert_type", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.testing.test.validation_plots"], ["", "def", "epoch_iteration", "(", "self", ",", "epoch_num", ")", ":", "\n", "\n", "        ", "progress", "=", "[", "]", "\n", "\n", "time_per_batch", "=", "[", "]", "\n", "\n", "accuracy_discriminator", "=", "0", "\n", "\n", "for", "i", ",", "(", "batch", ")", "in", "enumerate", "(", "self", ".", "dataloader_train", ")", ":", "\n", "\n", "            ", "if", "self", ".", "args", ".", "timing", ":", "\n", "                ", "batch_start", "=", "time", ".", "process_time", "(", ")", "\n", "\n", "# calculate amount of passed batch", "\n", "", "batches_passed", "=", "i", "+", "(", "epoch_num", "*", "len", "(", "self", ".", "dataloader_train", ")", ")", "\n", "\n", "# run batch iteration", "\n", "loss_calnet", ",", "loss_gen", ",", "loss_dis", ",", "_", ",", "_", ",", "accuracy_discriminator", "=", "self", ".", "batch_iteration", "(", "batch", ",", "b_index", "=", "i", ",", "total_b_index", "=", "batches_passed", ",", "accuracy_discriminator", "=", "accuracy_discriminator", ")", "\n", "\n", "# assertions", "\n", "assert_type", "(", "dict", ",", "loss_gen", ")", "\n", "assert_type", "(", "dict", ",", "loss_dis", ")", "\n", "\n", "# print progress to terminal", "\n", "if", "(", "batches_passed", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ")", ":", "\n", "# convert dicts to ints", "\n", "                ", "loss_gen_actual", "=", "sum", "(", "loss_gen", ".", "values", "(", ")", ")", "\n", "loss_dis_actual", "=", "sum", "(", "loss_dis", ".", "values", "(", ")", ")", "\n", "loss_calnet_actual", "=", "sum", "(", "loss_calnet", ".", "values", "(", ")", ")", "if", "loss_calnet", "!=", "None", "else", "loss_calnet", "\n", "\n", "# log to terminal and retrieve a statistics object", "\n", "statistic", "=", "self", ".", "log", "(", "loss_calnet_actual", ",", "loss_gen_actual", ",", "loss_dis_actual", ",", "loss_calnet", ",", "loss_gen", ",", "\n", "loss_dis", ",", "batches_passed", ",", "\n", "accuracy_discriminator", ")", "\n", "\n", "# assert type", "\n", "assert_type", "(", "Statistic", ",", "statistic", ")", "\n", "\n", "# append statistic to list", "\n", "progress", ".", "append", "(", "statistic", ")", "\n", "\n", "time_passed", "=", "datetime", ".", "now", "(", ")", "-", "DATA_MANAGER", ".", "actual_date", "\n", "\n", "if", "(", "\n", "(", "time_passed", ".", "total_seconds", "(", ")", ">", "(", "\n", "self", ".", "args", ".", "max_training_minutes", "*", "60", ")", ")", "and", "self", ".", "args", ".", "max_training_minutes", ">", "0", ")", ":", "\n", "                    ", "raise", "KeyboardInterrupt", "(", "\n", "f\"Process killed because {self.args.max_training_minutes} minutes passed since {DATA_MANAGER.actual_date}. Time now is {datetime.now()}\"", ")", "\n", "\n", "# save progress images and stats", "\n", "", "", "if", "(", "batches_passed", "%", "self", ".", "args", ".", "plot_freq", "==", "0", ")", ":", "\n", "                ", "validation_plots", "(", "self", ".", "plotting_batches", ",", "self", ".", "generator", ",", "self", ".", "calibration_net", ",", "self", ".", "discriminator", ",", "self", ".", "args", ",", "batch_idx", "=", "batches_passed", ")", "\n", "\n", "# empty cache", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "timing", ":", "\n", "                ", "batch_end", "=", "time", ".", "process_time", "(", ")", "-", "batch_start", "\n", "time_per_batch", ".", "append", "(", "batch_end", ")", "\n", "\n", "", "", "return", "progress", ",", "time_per_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log": [[344, 389], ["train.TrainingProcess.trainer_dis.prepare_evaluation", "train.TrainingProcess.trainer_gen.prepare_evaluation", "train.TrainingProcess.trainer_calnet.prepare_evaluation", "models.general.statistic.Statistic", "print", "list", "list", "wandb.log", "loss_gen_dict.keys", "wandb.log", "loss_dis_dict.keys", "wandb.log", "wandb.log", "wandb.log", "list", "loss_calnet_dict.keys", "wandb.log", "len"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.trainer.Trainer.prepare_evaluation", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.trainer.Trainer.prepare_evaluation", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.trainer.Trainer.prepare_evaluation", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log"], ["", "def", "log", "(", "self", ",", "loss_calnet", ",", "loss_gen", ",", "loss_dis", ",", "loss_calnet_dict", ",", "loss_gen_dict", ",", "loss_dis_dict", ",", "batches_passed", ",", "disc_accuracy", ")", ":", "\n", "\n", "# put models in evaluation mode", "\n", "        ", "self", ".", "trainer_dis", ".", "prepare_evaluation", "(", ")", "\n", "self", ".", "trainer_gen", ".", "prepare_evaluation", "(", ")", "\n", "self", ".", "trainer_calnet", ".", "prepare_evaluation", "(", ")", "\n", "\n", "# pass stats to wandb", "\n", "if", "self", ".", "args", ".", "debug", "==", "False", ":", "\n", "            ", "for", "e", "in", "list", "(", "loss_gen_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "wandb", ".", "log", "(", "{", "f'loss/gen/{e}'", ":", "loss_gen_dict", "[", "e", "]", "}", ")", "\n", "", "for", "e", "in", "list", "(", "loss_dis_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "wandb", ".", "log", "(", "{", "f'loss/dis/{e}'", ":", "loss_dis_dict", "[", "e", "]", "}", ")", "\n", "\n", "", "wandb", ".", "log", "(", "{", "\"loss/gen/total\"", ":", "loss_gen", "}", ")", "\n", "if", "not", "self", ".", "args", ".", "discriminator", "==", "\"EmptyDiscriminator\"", ":", "\n", "                ", "wandb", ".", "log", "(", "{", "\"loss/dis/total\"", ":", "loss_dis", "}", ")", "\n", "wandb", ".", "log", "(", "{", "\"accuracy/dis\"", ":", "disc_accuracy", "}", ")", "\n", "\n", "", "if", "loss_calnet", "!=", "None", ":", "\n", "                ", "for", "e", "in", "list", "(", "loss_calnet_dict", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "wandb", ".", "log", "(", "{", "f'loss/calnet/{e}'", ":", "loss_calnet_dict", "[", "e", "]", "}", ")", "\n", "\n", "# validate on validationset", "\n", "", "", "", "loss_gen_validate", ",", "loss_dis_validate", ",", "loss_calnet_validate", "=", "0", ",", "0", ",", "0", "\n", "\n", "stat", "=", "Statistic", "(", "loss_calnet_train", "=", "loss_calnet", ",", "\n", "loss_gen_train", "=", "loss_gen", ",", "\n", "loss_dis_train", "=", "loss_dis", ",", "\n", "loss_calnet_val", "=", "loss_calnet_validate", ",", "\n", "loss_gen_val", "=", "loss_gen_validate", ",", "\n", "loss_dis_val", "=", "loss_dis_validate", ",", "\n", "loss_calnet_train_dict", "=", "loss_calnet_dict", ",", "\n", "loss_gen_train_dict", "=", "loss_gen_dict", ",", "\n", "loss_dis_train_dict", "=", "loss_dis_dict", ",", "\n", "dis_acc", "=", "disc_accuracy", ")", "\n", "\n", "# print", "\n", "print", "(", "\n", "f\"\"", ",", "\n", "f\"batch: {batches_passed}/{len(self.dataloader_train)}\"", ",", "\n", "f\"|\\t {stat}\"", ",", "\n", "f\"details: Gen = {loss_gen_dict}, Dis = {loss_dis_dict}\"", ")", "\n", "\n", "return", "stat", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.train": [[390, 458], ["sys.stdout.flush", "print", "setup_directories", "print", "range", "utils.model_utils.save_models", "print", "train.TrainingProcess.epoch_iteration", "train.TrainingProcess.gen_lr_sched.step", "train.TrainingProcess.dis_lr_sched.step", "train.TrainingProcess.calnet_lr_sched.step", "sys.stdout.flush", "print", "print", "time.process_time", "time_per_epoch.append", "avg_time_per_batch.append", "utils.model_utils.save_models", "utils.model_utils.save_models", "utils.model_utils.save_models", "time.process_time", "numpy.mean", "str", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.general_utils.setup_directories", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.model_utils.save_models", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.epoch_iteration", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.model_utils.save_models", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.model_utils.save_models", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.model_utils.save_models"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "# setup data output directories:", "\n", "        ", "if", "self", ".", "args", ".", "debug", ":", "\n", "            ", "print", "(", "\"\\n \\033[1;32m Note: DEBUG mode active!!!! \\033[0m \\n\"", ")", "\n", "", "else", ":", "\n", "            ", "setup_directories", "(", ")", "\n", "\n", "# data gathering", "\n", "", "progress", "=", "[", "]", "\n", "\n", "try", ":", "\n", "\n", "            ", "print", "(", "f\"{PRINTCOLOR_BOLD}Started training with the following config:{PRINTCOLOR_END}\\n{self.args}\"", ")", "\n", "\n", "time_per_epoch", "=", "[", "]", "\n", "avg_time_per_batch", "=", "[", "]", "\n", "\n", "# run", "\n", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "epochs", ")", ":", "\n", "\n", "                ", "if", "self", ".", "args", ".", "timing", ":", "\n", "                    ", "epoch_start", "=", "time", ".", "process_time", "(", ")", "\n", "\n", "", "print", "(", "\n", "f\"\\n\\n{PRINTCOLOR_BOLD}Starting epoch{PRINTCOLOR_END} {epoch}/{self.args.epochs} at {str(datetime.now())}\"", ")", "\n", "\n", "# do epoch", "\n", "epoch_progress", ",", "time_per_batch", "=", "self", ".", "epoch_iteration", "(", "epoch", ")", "\n", "\n", "# update learning rate", "\n", "self", ".", "gen_lr_sched", ".", "step", "(", ")", "\n", "self", ".", "dis_lr_sched", ".", "step", "(", ")", "\n", "self", ".", "calnet_lr_sched", ".", "step", "(", ")", "\n", "\n", "# add progress", "\n", "progress", "+=", "epoch_progress", "\n", "\n", "if", "self", ".", "args", ".", "debug", "==", "False", ":", "\n", "# write models if needed (don't save the first one", "\n", "                    ", "if", "(", "(", "(", "epoch", "+", "1", ")", "%", "self", ".", "args", ".", "saving_freq", ")", "==", "0", ")", ":", "\n", "                        ", "save_models", "(", "self", ".", "discriminator", ",", "self", ".", "generator", ",", "self", ".", "calibration_net", ",", "\n", "f\"Models_at_epoch_{epoch}\"", ")", "\n", "\n", "# flush prints", "\n", "", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "timing", ":", "\n", "                    ", "epoch_end", "=", "time", ".", "process_time", "(", ")", "-", "epoch_start", "\n", "time_per_epoch", ".", "append", "(", "epoch_end", ")", "\n", "avg_time_per_batch", ".", "append", "(", "np", ".", "mean", "(", "time_per_batch", ")", ")", "\n", "\n", "", "", "", "except", "KeyboardInterrupt", "as", "e", ":", "\n", "            ", "print", "(", "f\"Killed by user: {e}\"", ")", "\n", "if", "self", ".", "args", ".", "debug", "==", "False", ":", "save_models", "(", "self", ".", "discriminator", ",", "self", ".", "generator", ",", "self", ".", "calibration_net", ",", "f\"KILLED_at_epoch_{epoch}\"", ")", "\n", "return", "False", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "if", "self", ".", "args", ".", "debug", "==", "False", ":", "save_models", "(", "self", ".", "discriminator", ",", "self", ".", "generator", ",", "self", ".", "calibration_net", ",", "f\"CRASH_at_epoch_{epoch}\"", ")", "\n", "raise", "e", "\n", "\n", "# flush prints", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "debug", "==", "False", ":", "\n", "            ", "save_models", "(", "self", ".", "discriminator", ",", "self", ".", "generator", ",", "self", ".", "calibration_net", ",", "\"finished\"", ")", "\n", "\n", "", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.models.GeneralModel.GeneralModel.__init__": [[6, 14], ["torch.Module.__init__", "len", "print"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_input", ",", "device", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "n_input", "=", "n_input", "\n", "self", ".", "device", "=", "device", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "(", "len", "(", "kwargs", ")", ">", "0", ")", ":", "\n", "            ", "print", "(", "f\"Ignored arguments in {self.__class__.__name__}: {kwargs}\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.discriminators.PixelDiscriminator.PixelDiscriminator.__init__": [[10, 72], ["models.discriminators.GeneralDiscriminator.GeneralDiscriminator.__init__", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Dropout", "torch.Dropout", "min", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Dropout", "torch.Dropout", "utils.architecture_utils.Flatten", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Sigmoid", "torch.Sigmoid", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Dropout", "torch.Dropout", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["    ", "def", "__init__", "(", "self", ",", "imsize", ",", "n_channels_in", "=", "3", ",", "n_hidden", "=", "64", ",", "n_layers", "=", "3", ",", "use_dropout", ":", "bool", "=", "False", ",", "\n", "device", ":", "str", "=", "\"cpu\"", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "PixelDiscriminator", ",", "self", ")", ".", "__init__", "(", "n_channels_in", ",", "device", ",", "**", "kwargs", ")", "\n", "\n", "# If normalizing layer is batch normalization, don't add bias because nn.BatchNorm2d has affine params", "\n", "use_bias", "=", "False", "\n", "layers", "=", "[", "]", "\n", "out", "=", "[", "]", "\n", "\n", "# Add input block auditor", "\n", "layers", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "n_channels_in", ",", "n_hidden", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "# Add hidden blocks auditor", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "n_hidden", ",", "n_hidden", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "", "layers", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "n_hidden", ",", "n_hidden", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "Dropout", "(", "0.1", "*", "int", "(", "use_dropout", ")", ")", "]", "\n", "\n", "# Set factor of change for input and output channels for hidden layers", "\n", "mult_in", "=", "1", "\n", "mult_out", "=", "1", "\n", "\n", "# Add hidden layers", "\n", "for", "i", "in", "range", "(", "1", ",", "n_layers", "+", "1", ")", ":", "\n", "\n", "            ", "mult_in", "=", "mult_out", "\n", "mult_out", "=", "min", "(", "2", "**", "i", ",", "8", ")", "\n", "\n", "if", "i", "==", "n_layers", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "n_hidden", "*", "mult_in", ",", "n_hidden", "*", "mult_out", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "use_bias", ")", "]", "# stride = 1", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "n_hidden", "*", "mult_in", ",", "n_hidden", "*", "mult_out", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "use_bias", ")", "]", "# stride = 2", "\n", "\n", "", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "Dropout", "(", "0.1", "*", "int", "(", "use_dropout", ")", ")", "]", "\n", "\n", "#  output layer (1 channel prediction map)", "\n", "", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "n_hidden", "*", "mult_out", ",", "n_hidden", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "Dropout", "(", "0.1", "*", "int", "(", "use_dropout", ")", ")", "]", "\n", "\n", "\n", "out", "+=", "[", "Flatten", "(", ")", "]", "\n", "out", "+=", "[", "nn", ".", "Linear", "(", "n_hidden", "*", "(", "(", "imsize", "[", "0", "]", "//", "2", "**", "n_layers", ")", "-", "2", ")", "*", "(", "(", "imsize", "[", "1", "]", "//", "2", "**", "n_layers", ")", "-", "2", ")", ",", "1", ")", "]", "\n", "\n", "out", "+=", "[", "nn", ".", "Dropout", "(", "0.1", "*", "int", "(", "use_dropout", ")", ")", "]", "\n", "out", "+=", "[", "nn", ".", "Sigmoid", "(", ")", "]", "\n", "\n", "# Save model", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "*", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.discriminators.PixelDiscriminator.PixelDiscriminator.forward": [[73, 86], ["PixelDiscriminator.PixelDiscriminator.model", "PixelDiscriminator.PixelDiscriminator.out().clamp", "PixelDiscriminator.PixelDiscriminator.squeeze", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "PixelDiscriminator.PixelDiscriminator.out", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "assert", "not", "torch", ".", "isnan", "(", "x", ")", ".", "any", "(", ")", ",", "\"Discriminator input is NaN\"", "\n", "assert", "not", "torch", ".", "isinf", "(", "x", ")", ".", "any", "(", ")", ",", "\"Discriminator input is inf\"", "\n", "\n", "feats", "=", "self", ".", "model", "(", "x", ")", "\n", "\n", "y", "=", "self", ".", "out", "(", "feats", ")", ".", "clamp", "(", "min", "=", "1e-7", ")", "\n", "\n", "assert", "not", "torch", ".", "isnan", "(", "y", ")", ".", "any", "(", ")", ",", "\"Discriminator output is NaN\"", "\n", "assert", "not", "torch", ".", "isinf", "(", "y", ")", ".", "any", "(", ")", ",", "\"Discriminator output is inf\"", "\n", "\n", "return", "y", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.discriminators.GeneralDiscriminator.GeneralDiscriminator.__init__": [[6, 8], ["models.GeneralModel.GeneralModel.__init__"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels_in", ":", "int", ",", "device", ":", "str", "=", "\"cpu\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GeneralDiscriminator", ",", "self", ")", ".", "__init__", "(", "n_channels_in", ",", "device", ",", "**", "kwargs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.discriminators.EmptyDiscriminator.EmptyDiscriminator.__init__": [[8, 11], ["models.discriminators.GeneralDiscriminator.GeneralDiscriminator.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "print", "(", "\"Note: Running without a discriminator\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.discriminators.EmptyDiscriminator.EmptyDiscriminator.forward": [[13, 16], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "forward", "(", "_", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.discriminators.EmptyDiscriminator.EmptyDiscriminator.parameters": [[17, 20], ["torch.LongTensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "parameters", "(", "*", "args", ")", ":", "\n", "        ", "return", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.discriminators.EmptyDiscriminator.EmptyDiscriminator.state_dict": [[21, 24], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "state_dict", "(", "**", "kwargs", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.discriminators.EmptyDiscriminator.EmptyDiscriminator.load_state_dict": [[25, 28], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_state_dict", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "", "", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.trainer.Trainer.__init__": [[6, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "models", ",", "optimizers", ")", ":", "\n", "        ", "self", ".", "models", "=", "models", "\n", "self", ".", "optimizers", "=", "optimizers", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.trainer.Trainer.prepare_training": [[10, 13], ["model.train"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.train"], ["", "def", "prepare_training", "(", "self", ")", ":", "\n", "        ", "for", "model", "in", "self", ".", "models", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.trainer.Trainer.do_backward": [[14, 25], ["opt.zero_grad", "loss.backward", "loss.backward", "opt.step"], "methods", ["None"], ["", "", "def", "do_backward", "(", "self", ",", "loss", ",", "G", "=", "False", ")", ":", "\n", "        ", "for", "opt", "in", "self", ".", "optimizers", ":", "\n", "            ", "opt", ".", "zero_grad", "(", ")", "\n", "\n", "", "if", "G", ":", "\n", "            ", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "\n", "", "for", "opt", "in", "self", ".", "optimizers", ":", "\n", "            ", "opt", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.trainer.Trainer.grad_flow_check": [[26, 53], ["[].weight.sum().item", "[].weight.sum().item", "opt.zero_grad", "loss.backward", "loss.backward", "opt.step", "print", "print", "[].weight.sum", "[].weight.sum", "enumerate", "utils.training_helpers.instance_checker", "utils.training_helpers.instance_checker", "model.modules", "list", "list", "model.modules", "model.modules"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.instance_checker", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.instance_checker"], ["", "", "def", "grad_flow_check", "(", "self", ",", "model", ",", "loss", ",", "G", "=", "False", ")", ":", "\n", "\n", "        ", "for", "opt", "in", "self", ".", "optimizers", ":", "\n", "            ", "opt", ".", "zero_grad", "(", ")", "\n", "\n", "", "param_idx", "=", "[", "i", "for", "i", ",", "a", "in", "enumerate", "(", "[", "*", "model", ".", "modules", "(", ")", "]", ")", "if", "instance_checker", "(", "a", ",", "nn", ".", "Conv2d", ")", "or", "instance_checker", "(", "a", ",", "nn", ".", "ConvTranspose2d", ")", "]", "[", "0", "]", "\n", "\n", "# store current param value", "\n", "sum_1", "=", "list", "(", "model", ".", "modules", "(", ")", ")", "[", "param_idx", "]", ".", "weight", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "# perform backprop", "\n", "if", "G", ":", "\n", "            ", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "\n", "", "for", "opt", "in", "self", ".", "optimizers", ":", "\n", "            ", "opt", ".", "step", "(", ")", "\n", "\n", "", "sum_2", "=", "list", "(", "model", ".", "modules", "(", ")", ")", "[", "param_idx", "]", ".", "weight", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "if", "(", "model", ".", "training", ")", ":", "\n", "            ", "working", "=", "\"working\"", "if", "sum_1", "!=", "sum_2", "else", "\"\\033[1;32m not working \\033[0m\"", "\n", "print", "(", "\"\\n\"", ",", "model", ".", "__class__", ".", "__name__", "+", "f\" is in training mode, BACKPROP is {working} \\n\"", ")", "\n", "", "else", ":", "\n", "            ", "working", "=", "\"blocked\"", "if", "sum_1", "==", "sum_2", "else", "\"\\033[1;32m not blocked \\033[0m\"", "\n", "print", "(", "\"\\n\"", ",", "model", ".", "__class__", ".", "__name__", "+", "f\" is in eval mode, BACKPROP is {working} \\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.trainer.Trainer.prepare_evaluation": [[54, 58], ["model.eval"], "methods", ["None"], ["", "", "def", "prepare_evaluation", "(", "self", ")", ":", "\n", "        ", "\"\"\" sets models in evaluation mode \"\"\"", "\n", "for", "model", "in", "self", ".", "models", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.data_management.DataManager.__init__": [[13, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "directory", ")", ":", "\n", "\n", "# determines relative disk directory for saving/loading", "\n", "        ", "self", ".", "directory", "=", "directory", "\n", "self", ".", "stamp", "=", "\"\"", "\n", "self", ".", "actual_date", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.data_management.DataManager.save_python_obj": [[20, 32], ["open", "_pickle.dump", "print", "print", "print"], "methods", ["None"], ["", "def", "save_python_obj", "(", "self", ",", "obj", ",", "name", ",", "print_success", "=", "True", ")", ":", "\n", "        ", "\"\"\" Saves python object to disk in pickle \"\"\"", "\n", "\n", "try", ":", "\n", "            ", "with", "open", "(", "self", ".", "directory", "+", "name", "+", "\".pickle\"", ",", "'wb'", ")", "as", "handle", ":", "\n", "                ", "pickle", ".", "dump", "(", "obj", ",", "handle", ",", "protocol", "=", "-", "1", ")", "\n", "\n", "if", "(", "print_success", ")", ":", "\n", "                    ", "print", "(", "\"Saved {}\"", ".", "format", "(", "name", ")", ")", "\n", "", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "print", "(", "\"Failed saving {}, continue anyway\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.data_management.DataManager.load_python_obj": [[33, 45], ["print", "open", "_pickle.load", "print"], "methods", ["None"], ["", "", "def", "load_python_obj", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\" Loads python object from disk if pickle \"\"\"", "\n", "\n", "obj", "=", "None", "\n", "try", ":", "\n", "            ", "with", "(", "open", "(", "self", ".", "directory", "+", "name", "+", "\".pickle\"", ",", "\"rb\"", ")", ")", "as", "openfile", ":", "\n", "                ", "obj", "=", "pickle", ".", "load", "(", "openfile", ")", "\n", "", "", "except", "FileNotFoundError", ":", "\n", "            ", "print", "(", "\"{} not loaded because file is missing\"", ".", "format", "(", "name", ")", ")", "\n", "return", "\n", "", "print", "(", "\"Loaded {}\"", ".", "format", "(", "name", ")", ")", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.data_management.DataManager.personal_deepcopy": [[46, 50], ["_pickle.loads", "_pickle.dumps"], "methods", ["None"], ["", "def", "personal_deepcopy", "(", "self", ",", "obj", ")", ":", "\n", "        ", "\"\"\" Deep copies any object faster than builtin \"\"\"", "\n", "\n", "return", "pickle", ".", "loads", "(", "pickle", ".", "dumps", "(", "obj", ",", "protocol", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.data_management.DataManager.duplicate_list": [[51, 55], ["None"], "methods", ["None"], ["", "def", "duplicate_list", "(", "self", ",", "lst", ":", "list", ")", "->", "list", ":", "\n", "        ", "\"\"\" shallow copies list \"\"\"", "\n", "\n", "return", "[", "x", "for", "x", "in", "lst", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.data_management.DataManager.duplicate_set": [[56, 60], ["None"], "methods", ["None"], ["", "def", "duplicate_set", "(", "self", ",", "st", ":", "set", ")", "->", "set", ":", "\n", "        ", "\"\"\" shallow copies set \"\"\"", "\n", "\n", "return", "{", "x", "for", "x", "in", "st", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.data_management.DataManager.duplicate_dict": [[61, 64], ["None"], "methods", ["None"], ["", "def", "duplicate_dict", "(", "self", ",", "dc", ")", "->", "dict", ":", "\n", "        ", "\"\"\" shallow copies dictionary \"\"\"", "\n", "return", "{", "key", ":", "dc", "[", "key", "]", "for", "key", "in", "dc", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.data_management.DataManager.duplicate_default_dict": [[65, 72], ["collections.defaultdict", "type_func"], "methods", ["None"], ["", "def", "duplicate_default_dict", "(", "self", ",", "dfdc", ",", "type_func", ",", "typ", ")", "->", "defaultdict", ":", "\n", "        ", "\"\"\" shallow copies a defualtdictionary but gives tha chance to also shallow copy its members \"\"\"", "\n", "\n", "output", "=", "defaultdict", "(", "typ", ")", "\n", "for", "key", "in", "dfdc", ":", "\n", "            ", "output", "[", "key", "]", "=", "type_func", "(", "dfdc", "[", "key", "]", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.data_management.DataManager.dump_only": [[73, 75], ["_pickle.dumps"], "methods", ["None"], ["", "def", "dump_only", "(", "self", ",", "obj", ")", ":", "\n", "        ", "return", "pickle", ".", "dumps", "(", "obj", ",", "protocol", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.data_management.DataManager.load_only": [[76, 78], ["_pickle.loads"], "methods", ["None"], ["", "def", "load_only", "(", "self", ",", "obj", ")", ":", "\n", "        ", "return", "pickle", ".", "loads", "(", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.data_management.DataManager.save_figure": [[79, 83], ["matplotlib.savefig", "matplotlib.axis"], "methods", ["None"], ["", "def", "save_figure", "(", "self", ",", "name", ",", "no_axis", "=", "True", ")", ":", "\n", "        ", "if", "(", "no_axis", ")", ":", "\n", "            ", "plt", ".", "axis", "(", "'off'", ")", "\n", "", "plt", ".", "savefig", "(", "self", ".", "directory", "+", "name", "+", "\".png\"", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.data_management.DataManager.set_date_stamp": [[84, 94], ["datetime.datetime.datetime.now", "[].replace", "print", "len", "Exception", "str().split", "str"], "methods", ["None"], ["", "def", "set_date_stamp", "(", "self", ")", ":", "\n", "        ", "\"\"\" generates printable date stamp\"\"\"", "\n", "\n", "if", "(", "len", "(", "self", ".", "stamp", ")", ">", "2", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"Attempting to reset datestamp, but it was already set\"", ")", "\n", "\n", "", "self", ".", "actual_date", "=", "datetime", ".", "now", "(", ")", "\n", "self", ".", "stamp", "=", "str", "(", "self", ".", "actual_date", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "print", "(", "f\"Made datestamp: {self.stamp}\"", ")", "\n", "return", "self", ".", "stamp", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.data_management.DataManager.create_dir": [[95, 97], ["os.makedirs"], "methods", ["None"], ["", "def", "create_dir", "(", "self", ",", "name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "self", ".", "directory", "+", "name", ",", "exist_ok", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.statistic.Statistic.__init__": [[7, 37], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "loss_calnet_train", "=", "None", ",", "\n", "loss_gen_train", "=", "None", ",", "\n", "loss_dis_train", "=", "None", ",", "\n", "loss_calnet_val", "=", "None", ",", "\n", "loss_gen_val", "=", "None", ",", "\n", "loss_dis_val", "=", "None", ",", "\n", "loss_calnet_train_dict", "=", "None", ",", "\n", "loss_gen_train_dict", "=", "None", ",", "\n", "loss_dis_train_dict", "=", "None", ",", "\n", "loss_calnet_val_dict", "=", "None", ",", "\n", "loss_gen_val_dict", "=", "None", ",", "\n", "loss_dis_val_dict", "=", "None", ",", "\n", "dis_acc", "=", "None", ")", ":", "\n", "# floats", "\n", "        ", "self", ".", "loss_calnet_train", "=", "loss_calnet_train", "\n", "self", ".", "loss_gen_train", "=", "loss_gen_train", "\n", "self", ".", "loss_dis_train", "=", "loss_dis_train", "\n", "self", ".", "loss_calnet_val", "=", "loss_calnet_val", "\n", "self", ".", "loss_gen_val", "=", "loss_gen_val", "\n", "self", ".", "loss_dis_val", "=", "loss_dis_val", "\n", "self", ".", "dis_acc", "=", "dis_acc", "\n", "\n", "# dictionaries", "\n", "self", ".", "loss_calnet_train_dict", "=", "loss_calnet_val_dict", "\n", "self", ".", "loss_gen_train_dict", "=", "loss_gen_train_dict", "\n", "self", ".", "loss_dis_train_dict", "=", "loss_dis_train_dict", "\n", "\n", "self", ".", "loss_calnet_val_dict", "=", "loss_calnet_val_dict", "\n", "self", ".", "loss_gen_val_dict", "=", "loss_gen_val_dict", "# not implemented", "\n", "self", ".", "loss_dis_val_dict", "=", "loss_dis_val_dict", "# not implemented", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.statistic.Statistic.__repr__": [[38, 52], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "loss_calnet_train", "==", "None", ":", "\n", "\n", "            ", "return", "f\"loss-generator-train: {self.loss_gen_train :0.3f}, \"", "+", "f\"loss-discriminator-train: {self.loss_dis_train:0.3f}, \"", "+", "f\"accuracy-discriminator: {self.dis_acc} \"", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "return", "f\"loss-calnet-train: {self.loss_calnet_train :0.3f}, \"", "+", "f\"loss-generator-train: {self.loss_gen_train :0.3f}, \"", "+", "f\"loss-discriminator-train: {self.loss_dis_train:0.3f}, \"", "+", "f\"accuracy-discriminator: {self.dis_acc} \"", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.statistic.Statistic.__str__": [[54, 56], ["statistic.Statistic.__repr__"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.general.statistic.Statistic.__repr__"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__repr__", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.EmptyGenerator.EmptyGenerator.__init__": [[10, 13], ["models.generators.GeneralGenerator.GeneralGenerator.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "print", "(", "\"Note: Running without generator\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.EmptyGenerator.EmptyGenerator.forward": [[15, 18], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "forward", "(", "_", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.EmptyGenerator.EmptyGenerator.parameters": [[19, 22], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "parameters", "(", "*", "args", ")", ":", "\n", "        ", "return", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.EmptyGenerator.EmptyGenerator.state_dict": [[23, 26], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "state_dict", "(", "**", "kwargs", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.EmptyGenerator.EmptyGenerator.load_state_dict": [[27, 30], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_state_dict", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "", "", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.GeneralGenerator.GeneralGenerator.__init__": [[6, 11], ["models.GeneralModel.GeneralModel.__init__"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels_in", "=", "(", "1", ")", ",", "n_hidden", "=", "(", "1", ")", ",", "n_channels_out", "=", "(", "1", ")", ",", "device", "=", "\"cpu\"", ",", "**", "kwargs", ")", ":", "# CHECK DEFAULT VALUES!!!!!!!!", "\n", "        ", "super", "(", "GeneralGenerator", ",", "self", ")", ".", "__init__", "(", "n_channels_in", ",", "device", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "n_channels_out", "=", "n_channels_out", "\n", "self", ".", "n_hidden", "=", "n_hidden", "", "", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetGenerator.UNetGenerator.__init__": [[11, 34], ["models.generators.GeneralVAE.GeneralVAE.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "utils.architecture_utils.Noise_injector().to", "utils.architecture_utils.Noise_injector().to", "utils.architecture_utils.Noise_injector().to", "utils.architecture_utils.initialize_weights", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "utils.architecture_utils.Noise_injector", "utils.architecture_utils.Noise_injector", "utils.architecture_utils.Noise_injector"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.architecture_utils.initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "imsize", ",", "n_channels_in", ",", "n_channels_out", ",", "n_hidden", ",", "z_dim", ",", "device", "=", "\"cpu\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "UNetGenerator", ",", "self", ")", ".", "__init__", "(", "n_channels_in", ",", "n_channels_out", ",", "device", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "\n", "hidden_dims", "=", "[", "n_hidden", ",", "n_hidden", "*", "2", ",", "n_hidden", "*", "4", ",", "n_hidden", "*", "8", "]", "\n", "\n", "# embedder", "\n", "self", ".", "enc1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "n_channels_in", ",", "hidden_dims", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "hidden_dims", "[", "0", "]", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "nn", ".", "Dropout", "(", "0.1", ")", ")", "\n", "self", ".", "enc2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "hidden_dims", "[", "0", "]", ",", "hidden_dims", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "hidden_dims", "[", "1", "]", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "nn", ".", "Dropout", "(", "0.1", ")", ")", "\n", "self", ".", "enc3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "hidden_dims", "[", "1", "]", ",", "hidden_dims", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "hidden_dims", "[", "2", "]", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "nn", ".", "Dropout", "(", "0.1", ")", ")", "\n", "self", ".", "enc4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "hidden_dims", "[", "2", "]", ",", "hidden_dims", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "hidden_dims", "[", "3", "]", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "nn", ".", "Dropout", "(", "0.1", ")", ")", "\n", "\n", "self", ".", "dec0", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "hidden_dims", "[", "3", "]", ",", "hidden_dims", "[", "2", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "nn", ".", "BatchNorm2d", "(", "hidden_dims", "[", "2", "]", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "nn", ".", "Dropout", "(", "0.1", ")", ")", "\n", "self", ".", "dec1", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "hidden_dims", "[", "3", "]", ",", "hidden_dims", "[", "1", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "nn", ".", "BatchNorm2d", "(", "hidden_dims", "[", "1", "]", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "nn", ".", "Dropout", "(", "0.1", ")", ")", "\n", "self", ".", "dec2", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "hidden_dims", "[", "2", "]", ",", "hidden_dims", "[", "0", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "nn", ".", "BatchNorm2d", "(", "hidden_dims", "[", "0", "]", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "nn", ".", "Dropout", "(", "0.1", ")", ")", "\n", "self", ".", "dec3", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "hidden_dims", "[", "1", "]", ",", "hidden_dims", "[", "0", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "nn", ".", "BatchNorm2d", "(", "hidden_dims", "[", "0", "]", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "nn", ".", "Dropout", "(", "0.1", ")", ")", "\n", "\n", "self", ".", "zres1", "=", "Noise_injector", "(", "hidden_dims", "[", "1", "]", ",", "z_dim", ",", "n_channels_in", ",", "hidden_dims", "[", "1", "]", ",", "device", "=", "device", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "zres2", "=", "Noise_injector", "(", "hidden_dims", "[", "0", "]", ",", "z_dim", ",", "n_channels_in", ",", "hidden_dims", "[", "0", "]", ",", "device", "=", "device", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "out", "=", "Noise_injector", "(", "hidden_dims", "[", "0", "]", ",", "z_dim", ",", "n_channels_in", ",", "n_channels_out", ",", "device", "=", "device", ")", ".", "to", "(", "device", ")", "\n", "\n", "initialize_weights", "(", "self", ".", "dec3", ",", "self", ".", "dec2", ",", "self", ".", "dec1", ",", "self", ".", "dec0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetGenerator.UNetGenerator.forward": [[35, 44], ["UNetGenerator.UNetGenerator.encode", "UNetGenerator.UNetGenerator.get_gauss", "UNetGenerator.UNetGenerator.gauss.sample", "UNetGenerator.UNetGenerator.decode"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.encode", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetGenerator.UNetGenerator.get_gauss", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.sample", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "self", ".", "encode", "(", "x", ")", "\n", "\n", "self", ".", "get_gauss", "(", "x", ")", "\n", "\n", "z", "=", "self", ".", "gauss", ".", "sample", "(", ")", "\n", "\n", "return", "self", ".", "decode", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetGenerator.UNetGenerator.encode": [[46, 51], ["UNetGenerator.UNetGenerator.enc1", "UNetGenerator.UNetGenerator.enc2", "UNetGenerator.UNetGenerator.enc3", "UNetGenerator.UNetGenerator.enc4"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "down1", "=", "self", ".", "enc1", "(", "x", ")", "\n", "self", ".", "down2", "=", "self", ".", "enc2", "(", "self", ".", "down1", ")", "\n", "self", ".", "down3", "=", "self", ".", "enc3", "(", "self", ".", "down2", ")", "\n", "self", ".", "down4", "=", "self", ".", "enc4", "(", "self", ".", "down3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetGenerator.UNetGenerator.decode": [[52, 82], ["UNetGenerator.UNetGenerator.dec0", "UNetGenerator.UNetGenerator.dec1", "torch.nn.functional.leaky_relu", "torch.nn.functional.leaky_relu", "UNetGenerator.UNetGenerator.dec2", "torch.nn.functional.leaky_relu", "torch.nn.functional.leaky_relu", "UNetGenerator.UNetGenerator.dec3", "UNetGenerator.UNetGenerator.out", "torch.softmax", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "UNetGenerator.UNetGenerator.zres1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "UNetGenerator.UNetGenerator.zres2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.to", "torch.zeros.to", "torch.ones.to", "torch.ones.to"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ",", "ign_idxs", "=", "None", ")", ":", "\n", "        ", "up1", "=", "self", ".", "dec0", "(", "self", ".", "down4", ")", "\n", "up2", "=", "self", ".", "dec1", "(", "torch", ".", "cat", "(", "(", "up1", ",", "self", ".", "down3", ")", ",", "dim", "=", "1", ")", ")", "# skip connection", "\n", "\n", "up2b", "=", "nn", ".", "functional", ".", "leaky_relu", "(", "self", ".", "zres1", "(", "up2", ",", "z", ")", ")", "# noise injection", "\n", "\n", "up3", "=", "self", ".", "dec2", "(", "torch", ".", "cat", "(", "(", "up2b", ",", "self", ".", "down2", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "up3b", "=", "nn", ".", "functional", ".", "leaky_relu", "(", "self", ".", "zres2", "(", "up3", ",", "z", ")", ")", "\n", "\n", "up4", "=", "self", ".", "dec3", "(", "torch", ".", "cat", "(", "(", "up3b", ",", "self", ".", "down1", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "logits", "=", "self", ".", "out", "(", "up4", ",", "z", ")", "\n", "\n", "out", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "\n", "if", "ign_idxs", "is", "None", ":", "\n", "            ", "return", "out", "\n", "", "else", ":", "\n", "# set unlabelled pixels to class unlabelled for Cityscapes", "\n", "# masks the adv loss by preventing gradients from being formed in unlabelled pixels", "\n", "            ", "w", "=", "torch", ".", "ones", "(", "out", ".", "shape", ")", "\n", "w", "[", "ign_idxs", "[", "0", "]", ",", ":", ",", "ign_idxs", "[", "1", "]", ",", "ign_idxs", "[", "2", "]", "]", "=", "0.", "\n", "\n", "r", "=", "torch", ".", "zeros", "(", "out", ".", "shape", ")", "\n", "r", "[", "ign_idxs", "[", "0", "]", ",", "24", ",", "ign_idxs", "[", "1", "]", ",", "ign_idxs", "[", "2", "]", "]", "=", "1.", "\n", "\n", "out", "=", "out", "*", "w", ".", "to", "(", "DEVICE", ")", "+", "r", ".", "to", "(", "DEVICE", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetGenerator.UNetGenerator.get_gauss": [[83, 87], ["len", "torch.distributions.Independent", "torch.distributions.Independent", "torch.distributions.Normal", "torch.distributions.Normal", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.ones().float().to", "torch.ones().float().to", "torch.ones().float().to", "torch.ones().float().to", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "", "def", "get_gauss", "(", "self", ",", "x", ")", ":", "\n", "        ", "b_size", "=", "len", "(", "x", ")", "\n", "self", ".", "gauss", "=", "Independent", "(", "Normal", "(", "loc", "=", "torch", ".", "zeros", "(", "(", "b_size", ",", "self", ".", "z_dim", ")", ")", ".", "float", "(", ")", ".", "to", "(", "DEVICE", ")", ",", "\n", "scale", "=", "torch", ".", "ones", "(", "(", "b_size", ",", "self", ".", "z_dim", ")", ")", ".", "float", "(", ")", ".", "to", "(", "DEVICE", ")", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetGenerator.UNetGenerator.sample": [[88, 108], ["UNetGenerator.UNetGenerator.get_gauss", "UNetGenerator.UNetGenerator.gauss.sample", "UNetGenerator.UNetGenerator.encode", "utils.training_helpers.torch_comp_along_dim.mean", "utils.training_helpers.torch_comp_along_dim", "utils.training_helpers.torch_comp_along_dim"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetGenerator.UNetGenerator.get_gauss", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.sample", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.encode", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.torch_comp_along_dim", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.torch_comp_along_dim"], ["", "def", "sample", "(", "self", ",", "x", ",", "ign_idxs", "=", "None", ",", "n_samples", "=", "1", ")", ":", "\n", "\n", "        ", "self", ".", "get_gauss", "(", "x", ")", "\n", "\n", "# sample z", "\n", "z", "=", "self", ".", "gauss", ".", "sample", "(", "(", "n_samples", ",", ")", ")", "\n", "\n", "# encode z", "\n", "self", ".", "encode", "(", "x", ")", "\n", "\n", "# serial decoding", "\n", "if", "ign_idxs", "is", "None", ":", "\n", "            ", "pred_dist", "=", "torch_comp_along_dim", "(", "self", ".", "decode", ",", "z", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "pred_dist", "=", "torch_comp_along_dim", "(", "self", ".", "decode", ",", "z", ",", "ign_idxs", ",", "dim", "=", "0", ")", "\n", "\n", "# compute the average prediction", "\n", "", "avg_pred", "=", "pred_dist", ".", "mean", "(", "0", ")", "\n", "\n", "return", "pred_dist", ",", "None", ",", "avg_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.__init__": [[12, 51], ["models.generators.GeneralVAE.GeneralVAE.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "utils.architecture_utils.Noise_injector().to", "utils.architecture_utils.Noise_injector().to", "utils.architecture_utils.Noise_injector().to", "utils.architecture_utils.initialize_weights", "UNetVAEGenerator.UNetVAEGenerator.mu.apply", "UNetVAEGenerator.UNetVAEGenerator.logvar.apply", "UNetVAEGenerator.UNetVAEGenerator.project_z.apply", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "utils.architecture_utils.Flatten", "torch.nn.Linear", "torch.nn.Linear", "utils.architecture_utils.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "utils.architecture_utils.UnFlatten", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "utils.architecture_utils.Noise_injector", "utils.architecture_utils.Noise_injector", "utils.architecture_utils.Noise_injector"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.architecture_utils.initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "imsize", ",", "n_channels_in", ",", "n_channels_out", ",", "n_hidden", ",", "z_dim", ",", "device", "=", "\"cpu\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "UNetVAEGenerator", ",", "self", ")", ".", "__init__", "(", "n_channels_in", ",", "n_channels_out", ",", "device", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "\n", "hidden_dims", "=", "[", "n_hidden", ",", "n_hidden", "*", "2", ",", "n_hidden", "*", "4", ",", "n_hidden", "*", "8", "]", "\n", "\n", "# embedder", "\n", "self", ".", "enc1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "n_channels_in", ",", "hidden_dims", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "hidden_dims", "[", "0", "]", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "nn", ".", "Dropout", "(", "0.1", ")", ")", "\n", "self", ".", "enc2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "hidden_dims", "[", "0", "]", ",", "hidden_dims", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "hidden_dims", "[", "1", "]", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "nn", ".", "Dropout", "(", "0.1", ")", ")", "\n", "self", ".", "enc3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "hidden_dims", "[", "1", "]", ",", "hidden_dims", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "hidden_dims", "[", "2", "]", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "nn", ".", "Dropout", "(", "0.1", ")", ")", "\n", "self", ".", "enc4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "hidden_dims", "[", "2", "]", ",", "hidden_dims", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "hidden_dims", "[", "3", "]", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "nn", ".", "Dropout", "(", "0.1", ")", ")", "\n", "\n", "enc_imsize", "=", "(", "1", "+", "(", "imsize", "[", "0", "]", "-", "1", ")", "//", "(", "2", "**", "4", ")", ",", "1", "+", "(", "imsize", "[", "1", "]", "-", "1", ")", "//", "(", "2", "**", "4", ")", ")", "\n", "\n", "self", ".", "mu", "=", "nn", ".", "Sequential", "(", "Flatten", "(", ")", ",", "nn", ".", "Linear", "(", "hidden_dims", "[", "3", "]", "*", "enc_imsize", "[", "0", "]", "*", "enc_imsize", "[", "1", "]", ",", "z_dim", ")", ")", "# n_channels depends on img resolution", "\n", "self", ".", "logvar", "=", "nn", ".", "Sequential", "(", "Flatten", "(", ")", ",", "nn", ".", "Linear", "(", "hidden_dims", "[", "3", "]", "*", "enc_imsize", "[", "0", "]", "*", "enc_imsize", "[", "1", "]", ",", "z_dim", ")", ")", "\n", "\n", "self", ".", "project_z", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "z_dim", ",", "hidden_dims", "[", "3", "]", "*", "enc_imsize", "[", "0", "]", "*", "enc_imsize", "[", "1", "]", ")", ",", "\n", "UnFlatten", "(", "n_channels", "=", "hidden_dims", "[", "3", "]", ",", "im_size", "=", "enc_imsize", ")", ",", "\n", "nn", ".", "Conv2d", "(", "hidden_dims", "[", "3", "]", ",", "hidden_dims", "[", "3", "]", ",", "kernel_size", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dims", "[", "3", "]", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", ")", "\n", "\n", "self", ".", "dec0", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "hidden_dims", "[", "3", "]", ",", "hidden_dims", "[", "2", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "nn", ".", "BatchNorm2d", "(", "hidden_dims", "[", "2", "]", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "nn", ".", "Dropout", "(", "0.1", ")", ")", "\n", "self", ".", "dec1", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "hidden_dims", "[", "3", "]", ",", "hidden_dims", "[", "1", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "nn", ".", "BatchNorm2d", "(", "hidden_dims", "[", "1", "]", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "nn", ".", "Dropout", "(", "0.1", ")", ")", "\n", "self", ".", "dec2", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "hidden_dims", "[", "2", "]", ",", "hidden_dims", "[", "0", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "nn", ".", "BatchNorm2d", "(", "hidden_dims", "[", "0", "]", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "nn", ".", "Dropout", "(", "0.1", ")", ")", "\n", "self", ".", "dec3", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "hidden_dims", "[", "1", "]", ",", "hidden_dims", "[", "0", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "nn", ".", "BatchNorm2d", "(", "hidden_dims", "[", "0", "]", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "nn", ".", "Dropout", "(", "0.1", ")", ")", "\n", "\n", "self", ".", "zres1", "=", "Noise_injector", "(", "hidden_dims", "[", "1", "]", ",", "z_dim", ",", "n_channels_in", ",", "hidden_dims", "[", "1", "]", ",", "device", "=", "device", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "zres2", "=", "Noise_injector", "(", "hidden_dims", "[", "0", "]", ",", "z_dim", ",", "n_channels_in", ",", "hidden_dims", "[", "0", "]", ",", "device", "=", "device", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "out", "=", "Noise_injector", "(", "hidden_dims", "[", "0", "]", ",", "z_dim", ",", "n_channels_in", ",", "n_channels_out", ",", "device", "=", "device", ")", ".", "to", "(", "device", ")", "\n", "\n", "initialize_weights", "(", "self", ".", "dec3", ",", "self", ".", "dec2", ",", "self", ".", "dec1", ",", "self", ".", "dec0", ")", "\n", "self", ".", "mu", ".", "apply", "(", "weights_init", ")", "\n", "self", ".", "logvar", ".", "apply", "(", "weights_init", ")", "\n", "self", ".", "project_z", ".", "apply", "(", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.forward": [[52, 61], ["UNetVAEGenerator.UNetVAEGenerator.encode", "UNetVAEGenerator.UNetVAEGenerator.latent_dist.sample", "UNetVAEGenerator.UNetVAEGenerator.decode"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.encode", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.sample", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.decode"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_mu_logvar", "=", "False", ")", ":", "\n", "\n", "        ", "mu", ",", "logvar", "=", "self", ".", "encode", "(", "x", ")", "\n", "\n", "if", "return_mu_logvar", ":", "\n", "            ", "return", "mu", ",", "logvar", "\n", "", "else", ":", "\n", "            ", "z", "=", "self", ".", "latent_dist", ".", "sample", "(", ")", "\n", "return", "self", ".", "decode", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.encode": [[63, 77], ["UNetVAEGenerator.UNetVAEGenerator.enc1", "UNetVAEGenerator.UNetVAEGenerator.enc2", "UNetVAEGenerator.UNetVAEGenerator.enc3", "UNetVAEGenerator.UNetVAEGenerator.enc4", "UNetVAEGenerator.UNetVAEGenerator.mu", "UNetVAEGenerator.UNetVAEGenerator.logvar().clamp", "UNetVAEGenerator.UNetVAEGenerator.mul().exp_", "torch.distributions.Independent", "torch.distributions.Independent", "torch.distributions.Normal", "torch.distributions.Normal", "UNetVAEGenerator.UNetVAEGenerator.logvar", "numpy.log", "UNetVAEGenerator.UNetVAEGenerator.mul"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log"], ["", "", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "down1", "=", "self", ".", "enc1", "(", "x", ")", "\n", "self", ".", "down2", "=", "self", ".", "enc2", "(", "self", ".", "down1", ")", "\n", "self", ".", "down3", "=", "self", ".", "enc3", "(", "self", ".", "down2", ")", "\n", "self", ".", "down4", "=", "self", ".", "enc4", "(", "self", ".", "down3", ")", "\n", "\n", "mu", "=", "self", ".", "mu", "(", "self", ".", "down4", ")", "\n", "logvar", "=", "self", ".", "logvar", "(", "self", ".", "down4", ")", ".", "clamp", "(", "min", "=", "np", ".", "log", "(", "1e-7", ")", ")", "\n", "\n", "std", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "\n", "self", ".", "latent_dist", "=", "Independent", "(", "Normal", "(", "loc", "=", "mu", ",", "scale", "=", "std", ")", ",", "1", ")", "\n", "\n", "return", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.decode": [[78, 108], ["UNetVAEGenerator.UNetVAEGenerator.dec0", "UNetVAEGenerator.UNetVAEGenerator.dec1", "torch.nn.functional.leaky_relu", "torch.nn.functional.leaky_relu", "UNetVAEGenerator.UNetVAEGenerator.dec2", "torch.nn.functional.leaky_relu", "torch.nn.functional.leaky_relu", "UNetVAEGenerator.UNetVAEGenerator.dec3", "UNetVAEGenerator.UNetVAEGenerator.out", "torch.softmax", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "UNetVAEGenerator.UNetVAEGenerator.zres1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "UNetVAEGenerator.UNetVAEGenerator.zres2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.to", "torch.zeros.to", "torch.ones.to", "torch.ones.to"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ",", "ign_idxs", "=", "None", ")", ":", "\n", "        ", "up1", "=", "self", ".", "dec0", "(", "self", ".", "down4", ")", "\n", "up2", "=", "self", ".", "dec1", "(", "torch", ".", "cat", "(", "(", "up1", ",", "self", ".", "down3", ")", ",", "dim", "=", "1", ")", ")", "#skip connection", "\n", "\n", "up2b", "=", "nn", ".", "functional", ".", "leaky_relu", "(", "self", ".", "zres1", "(", "up2", ",", "z", ")", ")", "# noise injection", "\n", "\n", "up3", "=", "self", ".", "dec2", "(", "torch", ".", "cat", "(", "(", "up2b", ",", "self", ".", "down2", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "up3b", "=", "nn", ".", "functional", ".", "leaky_relu", "(", "self", ".", "zres2", "(", "up3", ",", "z", ")", ")", "\n", "\n", "up4", "=", "self", ".", "dec3", "(", "torch", ".", "cat", "(", "(", "up3b", ",", "self", ".", "down1", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "logits", "=", "self", ".", "out", "(", "up4", ",", "z", ")", "\n", "\n", "out", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "\n", "if", "ign_idxs", "is", "None", ":", "\n", "            ", "return", "out", "\n", "", "else", ":", "\n", "# set unlabelled pixels to class unlabelled for Cityscapes", "\n", "# masks the adv loss by preventing gradients from being formed in unlabelled pixs", "\n", "            ", "w", "=", "torch", ".", "ones", "(", "out", ".", "shape", ")", "\n", "w", "[", "ign_idxs", "[", "0", "]", ",", ":", ",", "ign_idxs", "[", "1", "]", ",", "ign_idxs", "[", "2", "]", "]", "=", "0.", "\n", "\n", "r", "=", "torch", ".", "zeros", "(", "out", ".", "shape", ")", "\n", "r", "[", "ign_idxs", "[", "0", "]", ",", "24", ",", "ign_idxs", "[", "1", "]", ",", "ign_idxs", "[", "2", "]", "]", "=", "1.", "\n", "\n", "out", "=", "out", "*", "w", ".", "to", "(", "DEVICE", ")", "+", "r", ".", "to", "(", "DEVICE", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.sample": [[109, 125], ["UNetVAEGenerator.UNetVAEGenerator.encode", "UNetVAEGenerator.UNetVAEGenerator.latent_dist.sample", "utils.training_helpers.torch_comp_along_dim.mean", "utils.training_helpers.torch_comp_along_dim", "utils.training_helpers.torch_comp_along_dim"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.encode", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.sample", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.torch_comp_along_dim", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.torch_comp_along_dim"], ["", "", "def", "sample", "(", "self", ",", "x", ",", "n_samples", "=", "1", ",", "ign_idxs", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "encode", "(", "x", ")", "\n", "\n", "# sample z", "\n", "z", "=", "self", ".", "latent_dist", ".", "sample", "(", "(", "n_samples", ",", ")", ")", "\n", "\n", "# serial decoding", "\n", "if", "ign_idxs", "is", "None", ":", "\n", "            ", "pred_dist", "=", "torch_comp_along_dim", "(", "self", ".", "decode", ",", "z", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "pred_dist", "=", "torch_comp_along_dim", "(", "self", ".", "decode", ",", "z", ",", "ign_idxs", ",", "dim", "=", "0", ")", "\n", "\n", "", "avg_pred", "=", "pred_dist", ".", "mean", "(", "0", ")", "\n", "\n", "return", "pred_dist", ",", "None", ",", "avg_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.GeneralVAE.GeneralVAE.__init__": [[12, 17], ["models.generators.GeneralGenerator.GeneralGenerator.__init__"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels_in", "=", "(", "1", ")", ",", "n_hidden", "=", "(", "1", ")", ",", "n_channels_out", "=", "(", "1", ")", ",", "device", "=", "\"cpu\"", ",", "**", "kwargs", ")", ":", "# CHECK DEFAULT VALUES!!!!!!!!", "\n", "        ", "super", "(", "GeneralVAE", ",", "self", ")", ".", "__init__", "(", "n_channels_in", ",", "device", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "n_channels_out", "=", "n_channels_out", "\n", "self", ".", "n_hidden", "=", "n_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.GeneralVAE.GeneralVAE.plot_sample_preds": [[18, 112], ["matplotlib.figure", "matplotlib.figure", "matplotlib.backends.backend_agg.FigureCanvasAgg", "matplotlib.backends.backend_agg.FigureCanvasAgg", "range", "matplotlib.figure.suptitle", "matplotlib.backends.backend_agg.FigureCanvasAgg.draw", "matplotlib.backends.backend_agg.FigureCanvasAgg.draw", "matplotlib.backends.backend_agg.FigureCanvasAgg.print_to_buffer", "matplotlib.backends.backend_agg.FigureCanvasAgg.print_to_buffer", "matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb", "matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb", "matplotlib.close", "matplotlib.close", "numpy.fromstring().reshape", "matplotlib.colors.Normalize", "matplotlib.colors.Normalize", "matplotlib.colors.Normalize", "matplotlib.colors.Normalize", "matplotlib.subplot", "matplotlib.subplot", "utils.data_utils.move_color_channel", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.xticks", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.yticks", "range", "matplotlib.subplot", "matplotlib.subplot", "utils.data_utils._recolour_label", "matplotlib.xticks", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.yticks", "matplotlib.subplot", "matplotlib.subplot", "utils.data_utils._recolour_label", "matplotlib.xticks", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.yticks", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.xticks", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.yticks", "utils.data_utils.de_torch", "plottable_images.squeeze.squeeze.squeeze", "matplotlib.title", "matplotlib.title", "utils.data_utils._recolour_label", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.xticks", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.yticks", "utils.data_utils.de_torch", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.title", "matplotlib.title", "utils.data_utils.de_torch", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.title", "matplotlib.title", "utils.data_utils._recolour_label", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.title", "matplotlib.title", "numpy.fromstring", "utils.data_utils.de_torch", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.title", "matplotlib.title", "utils.data_utils._1hot_2_2d", "utils.data_utils._1hot_2_2d", "utils.data_utils.de_torch", "numpy.pad", "utils.data_utils._1hot_2_2d", "pred_dist[].mean", "[].permute", "utils.data_utils._1hot_2_2d", "x.cpu().numpy", "pad", "pad", "pad", "pad", "x.cpu", "torch.eye", "labels[].long"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.move_color_channel", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._recolour_label", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._recolour_label", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.de_torch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._recolour_label", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.de_torch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.de_torch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._recolour_label", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.de_torch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._1hot_2_2d", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._1hot_2_2d", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils.de_torch", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._1hot_2_2d", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.data_utils._1hot_2_2d"], ["", "def", "plot_sample_preds", "(", "self", ",", "images", ",", "labels", ",", "calnet_preds", ",", "pred_dist", ",", "gt_dist", ",", "n_preds", ",", "dataset", ")", ":", "\n", "\n", "        ", "n_plotted_preds", "=", "5", "if", "n_preds", ">", "5", "else", "n_preds", "\n", "\n", "n_cols", "=", "n_plotted_preds", "+", "4", "\n", "n_rows", "=", "pred_dist", ".", "shape", "[", "1", "]", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "n_cols", "+", "2", ",", "n_rows", "+", "2", ")", ")", "\n", "canvas", "=", "FigureCanvasAgg", "(", "fig", ")", "\n", "\n", "if", "dataset", "==", "\"LIDC\"", ":", "\n", "            ", "lidc_norm", "=", "matplotlib", ".", "colors", ".", "Normalize", "(", "vmin", "=", "0", ",", "vmax", "=", "1", ")", "\n", "\n", "# plot sample predictions", "\n", "", "for", "i", "in", "range", "(", "n_rows", ")", ":", "\n", "\n", "# plot input", "\n", "            ", "plt", ".", "subplot", "(", "n_rows", ",", "n_cols", ",", "i", "*", "n_cols", "+", "1", ")", "\n", "plottable_images", "=", "move_color_channel", "(", "de_torch", "(", "(", "images", "[", "i", "]", "+", "1", ")", "/", "2", ")", ")", "\n", "if", "plottable_images", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "plottable_images", "=", "plottable_images", ".", "squeeze", "(", ")", "\n", "plt", ".", "imshow", "(", "plottable_images", ",", "interpolation", "=", "\"none\"", ")", "\n", "if", "i", "==", "0", ":", "plt", ".", "title", "(", "\"Input\"", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "\n", "for", "j", "in", "range", "(", "n_cols", "-", "4", ")", ":", "\n", "                ", "plottable_pred", "=", "_recolour_label", "(", "de_torch", "(", "_1hot_2_2d", "(", "pred_dist", "[", "j", ",", "i", ",", ":", ",", ":", "]", ",", "sample", "=", "True", ")", ")", ",", "dataset", "=", "dataset", ")", "\n", "\n", "plt", ".", "subplot", "(", "n_rows", ",", "n_cols", ",", "i", "*", "n_cols", "+", "j", "+", "2", ")", "\n", "if", "dataset", "==", "\"LIDC\"", ":", "\n", "                    ", "plt", ".", "imshow", "(", "plottable_pred", ",", "norm", "=", "lidc_norm", ",", "interpolation", "=", "\"none\"", ")", "\n", "", "else", ":", "\n", "                    ", "plt", ".", "imshow", "(", "plottable_pred", ",", "interpolation", "=", "\"none\"", ")", "\n", "", "if", "i", "==", "0", ":", "plt", ".", "title", "(", "f\"Pred {j + 1}\"", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "\n", "# plot average predictions", "\n", "", "plt", ".", "subplot", "(", "n_rows", ",", "n_cols", ",", "i", "*", "n_cols", "+", "n_cols", "-", "2", ")", "\n", "plottable_avg_pred", "=", "_recolour_label", "(", "de_torch", "(", "_1hot_2_2d", "(", "pred_dist", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "mean", "(", "0", ")", ",", "sample", "=", "True", ")", ")", ",", "dataset", "=", "dataset", ")", "\n", "if", "dataset", "==", "\"LIDC\"", ":", "\n", "                ", "plt", ".", "imshow", "(", "plottable_avg_pred", ",", "norm", "=", "lidc_norm", ",", "interpolation", "=", "\"none\"", ")", "\n", "", "else", ":", "\n", "                ", "plt", ".", "imshow", "(", "plottable_avg_pred", ",", "interpolation", "=", "\"none\"", ")", "\n", "", "if", "i", "==", "0", ":", "plt", ".", "title", "(", "f\"Avg Pred\\nN = {pred_dist.shape[0]}\"", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "\n", "# plot calibration net predictions", "\n", "plt", ".", "subplot", "(", "n_rows", ",", "n_cols", ",", "i", "*", "n_cols", "+", "n_cols", "-", "1", ")", "\n", "plottable_calnet_pred", "=", "_recolour_label", "(", "de_torch", "(", "_1hot_2_2d", "(", "calnet_preds", "[", "i", "]", ",", "sample", "=", "True", ")", ")", ",", "dataset", "=", "dataset", ")", "\n", "\n", "if", "dataset", "==", "\"LIDC\"", ":", "\n", "                ", "plt", ".", "imshow", "(", "plottable_calnet_pred", ",", "norm", "=", "lidc_norm", ",", "interpolation", "=", "\"none\"", ")", "\n", "", "else", ":", "\n", "                ", "plt", ".", "imshow", "(", "plottable_calnet_pred", ",", "interpolation", "=", "\"none\"", ")", "\n", "", "if", "i", "==", "0", ":", "plt", ".", "title", "(", "\"CalNet Pred\"", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "\n", "# plot actual predictions", "\n", "plt", ".", "subplot", "(", "n_rows", ",", "n_cols", ",", "i", "*", "n_cols", "+", "n_cols", ")", "\n", "\n", "if", "gt_dist", "is", "None", ":", "\n", "                ", "if", "labels", ".", "shape", "[", "1", "]", "!=", "LABELS_CHANNELS", ":", "\n", "                    ", "label", "=", "torch", ".", "eye", "(", "LABELS_CHANNELS", ")", "[", "labels", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "long", "(", ")", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "[", "i", "]", "# convert rgb label to one-hot", "\n", "", "else", ":", "\n", "                    ", "label", "=", "labels", "[", "i", "]", "\n", "", "plottable_label", "=", "_recolour_label", "(", "de_torch", "(", "_1hot_2_2d", "(", "label", ",", "sample", "=", "True", ")", ")", ",", "dataset", "=", "dataset", ")", "\n", "", "else", ":", "\n", "                ", "pad", "=", "lambda", "x", ":", "np", ".", "pad", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "pad_width", "=", "2", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "1", ")", "\n", "glued_top", "=", "np", ".", "concatenate", "(", "(", "pad", "(", "gt_dist", "[", "i", ",", "0", "]", ")", ",", "pad", "(", "gt_dist", "[", "i", ",", "1", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "glued_bottom", "=", "np", ".", "concatenate", "(", "(", "pad", "(", "gt_dist", "[", "i", ",", "2", "]", ")", ",", "pad", "(", "gt_dist", "[", "i", ",", "3", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "plottable_label", "=", "np", ".", "concatenate", "(", "[", "glued_top", ",", "glued_bottom", "]", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "", "if", "dataset", "==", "\"LIDC\"", ":", "\n", "                ", "plt", ".", "imshow", "(", "plottable_label", ",", "norm", "=", "lidc_norm", ",", "interpolation", "=", "\"none\"", ")", "\n", "", "else", ":", "\n", "                ", "plt", ".", "imshow", "(", "plottable_label", ",", "interpolation", "=", "\"none\"", ")", "\n", "", "if", "i", "==", "0", ":", "plt", ".", "title", "(", "\"Label 0\"", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "\n", "", "fig", ".", "suptitle", "(", "'Sample predictions'", ")", "\n", "\n", "# convert figure to array", "\n", "canvas", ".", "draw", "(", ")", "\n", "_", ",", "(", "width", ",", "height", ")", "=", "canvas", ".", "print_to_buffer", "(", ")", "\n", "s", "=", "canvas", ".", "tostring_rgb", "(", ")", "\n", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "return", "np", ".", "fromstring", "(", "s", ",", "dtype", "=", "'uint8'", ")", ".", "reshape", "(", "(", "height", ",", "width", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.GeneralVAE.GeneralVAE.plot_sample_figure": [[113, 125], ["torch.no_grad", "GeneralVAE.GeneralVAE.sample", "GeneralVAE.GeneralVAE.plot_sample_preds"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.sample", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.GeneralVAE.GeneralVAE.plot_sample_preds"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "plot_sample_figure", "(", "self", ",", "input_images", ",", "labels", ",", "calnet_preds", ",", "vae_input", ",", "n_samples", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Plot a grid of size n_samples * n_samples with sampled images\n        \"\"\"", "\n", "dataset", "=", "args", ".", "dataset", "\n", "\n", "pred_dist", ",", "log_p_score", ",", "avg_preds", "=", "self", ".", "sample", "(", "vae_input", ",", "n_samples", ")", "\n", "\n", "plotted_sample_preds", "=", "self", ".", "plot_sample_preds", "(", "input_images", ",", "labels", ",", "calnet_preds", ",", "pred_dist", ",", "n_preds", "=", "n_samples", ",", "dataset", "=", "dataset", ")", "\n", "\n", "return", "plotted_sample_preds", "\n", "", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.SegNetCalNet._DecoderBlock.__init__": [[13, 37], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "num_conv_layers", ")", ":", "\n", "        ", "super", "(", "_DecoderBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "middle_channels", "=", "in_channels", "//", "2", "\n", "\n", "layers", "=", "[", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "middle_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "middle_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.1", ")", "\n", "]", "\n", "layers", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "middle_channels", ",", "middle_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "middle_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.1", ")", ",", "\n", "]", "*", "(", "num_conv_layers", "-", "2", ")", "\n", "layers", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "middle_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.1", ")", "\n", "]", "\n", "self", ".", "decode", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.SegNetCalNet._DecoderBlock.forward": [[38, 40], ["SegNetCalNet._DecoderBlock.decode"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.generators.UNetVAEGenerator.UNetVAEGenerator.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "decode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.SegNetCalNet.SegNetCalNet.__init__": [[43, 82], ["models.generators.calibration_nets.GeneralCalNet.GeneralCalNet.__init__", "torchvision.models.vgg19_bn", "list", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "SegNetCalNet._DecoderBlock", "SegNetCalNet._DecoderBlock", "SegNetCalNet._DecoderBlock", "SegNetCalNet._DecoderBlock", "torch.nn.Sequential", "torch.nn.Sequential", "utils.architecture_utils.initialize_weights", "torchvision.models.vgg19_bn.features.children", "torch.nn.Conv2d().to", "torch.nn.Conv2d().to", "features.append", "isinstance", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "features.append", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.architecture_utils.initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "n_channels_in", ",", "n_channels_out", ",", "n_hidden", ",", "temperature", "=", "1", ",", "device", "=", "\"cpu\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SegNetCalNet", ",", "self", ")", ".", "__init__", "(", "n_channels_in", ",", "n_channels_out", ",", "device", ",", "**", "kwargs", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n", "\n", "vgg", "=", "models", ".", "vgg19_bn", "(", "pretrained", "=", "True", ")", "\n", "\n", "vgg_features", "=", "list", "(", "vgg", ".", "features", ".", "children", "(", ")", ")", "\n", "\n", "if", "n_channels_in", "!=", "3", ":", "\n", "            ", "vgg_features", "[", "0", "]", "=", "nn", ".", "Conv2d", "(", "n_channels_in", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "features", "=", "[", "]", "\n", "for", "module", "in", "vgg_features", ":", "\n", "            ", "features", ".", "append", "(", "module", ")", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "ReLU", ")", ":", "\n", "                ", "features", ".", "append", "(", "nn", ".", "Dropout", "(", "0.1", ")", ")", "\n", "\n", "", "", "self", ".", "enc1", "=", "nn", ".", "Sequential", "(", "*", "features", "[", "0", ":", "9", "]", ")", "\n", "self", ".", "enc2", "=", "nn", ".", "Sequential", "(", "*", "features", "[", "9", ":", "18", "]", ")", "\n", "self", ".", "enc3", "=", "nn", ".", "Sequential", "(", "*", "features", "[", "18", ":", "35", "]", ")", "\n", "self", ".", "enc4", "=", "nn", ".", "Sequential", "(", "*", "features", "[", "35", ":", "52", "]", ")", "\n", "self", ".", "enc5", "=", "nn", ".", "Sequential", "(", "*", "features", "[", "52", ":", "]", ")", "\n", "\n", "self", ".", "dec5", "=", "nn", ".", "Sequential", "(", "\n", "*", "(", "[", "nn", ".", "ConvTranspose2d", "(", "512", ",", "512", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "+", "\n", "[", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.1", ")", "]", "*", "4", ")", "\n", ")", "\n", "self", ".", "dec4", "=", "_DecoderBlock", "(", "1024", ",", "256", ",", "4", ")", "\n", "self", ".", "dec3", "=", "_DecoderBlock", "(", "512", ",", "128", ",", "4", ")", "\n", "self", ".", "dec2", "=", "_DecoderBlock", "(", "256", ",", "64", ",", "2", ")", "\n", "self", ".", "dec1", "=", "_DecoderBlock", "(", "128", ",", "n_channels_out", ",", "2", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "nn", ".", "Conv2d", "(", "n_channels_out", ",", "n_channels_out", ",", "3", ",", "1", ")", ")", "\n", "\n", "initialize_weights", "(", "self", ".", "dec5", ",", "self", ".", "dec4", ",", "self", ".", "dec3", ",", "self", ".", "dec2", ",", "self", ".", "dec1", ",", "self", ".", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.SegNetCalNet.SegNetCalNet.forward": [[83, 102], ["SegNetCalNet.SegNetCalNet.enc1", "SegNetCalNet.SegNetCalNet.enc2", "SegNetCalNet.SegNetCalNet.enc3", "SegNetCalNet.SegNetCalNet.enc4", "SegNetCalNet.SegNetCalNet.enc5", "SegNetCalNet.SegNetCalNet.dec5", "SegNetCalNet.SegNetCalNet.dec4", "SegNetCalNet.SegNetCalNet.dec3", "SegNetCalNet.SegNetCalNet.dec2", "SegNetCalNet.SegNetCalNet.dec1", "SegNetCalNet.SegNetCalNet.out", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_logits", "=", "False", ")", ":", "\n", "        ", "enc1", "=", "self", ".", "enc1", "(", "x", ")", "\n", "enc2", "=", "self", ".", "enc2", "(", "enc1", ")", "\n", "enc3", "=", "self", ".", "enc3", "(", "enc2", ")", "\n", "enc4", "=", "self", ".", "enc4", "(", "enc3", ")", "\n", "enc5", "=", "self", ".", "enc5", "(", "enc4", ")", "\n", "\n", "dec5", "=", "self", ".", "dec5", "(", "enc5", ")", "\n", "dec4", "=", "self", ".", "dec4", "(", "torch", ".", "cat", "(", "[", "enc4", ",", "dec5", "]", ",", "1", ")", ")", "#skip connections", "\n", "dec3", "=", "self", ".", "dec3", "(", "torch", ".", "cat", "(", "[", "enc3", ",", "dec4", "]", ",", "1", ")", ")", "\n", "dec2", "=", "self", ".", "dec2", "(", "torch", ".", "cat", "(", "[", "enc2", ",", "dec3", "]", ",", "1", ")", ")", "\n", "dec1", "=", "self", ".", "dec1", "(", "torch", ".", "cat", "(", "[", "enc1", ",", "dec2", "]", ",", "1", ")", ")", "\n", "\n", "logits", "=", "self", ".", "out", "(", "dec1", ")", "\n", "\n", "if", "return_logits", ":", "\n", "            ", "return", "logits", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "softmax", "(", "logits", "/", "self", ".", "temperature", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.EmptyCalNet.EmptyCalNet.__init__": [[10, 13], ["models.generators.calibration_nets.GeneralCalNet.GeneralCalNet.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "print", "(", "\"Note: Running without prior network\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.EmptyCalNet.EmptyCalNet.forward": [[15, 18], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "forward", "(", "_", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.EmptyCalNet.EmptyCalNet.parameters": [[19, 22], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "parameters", "(", "*", "args", ")", ":", "\n", "        ", "return", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.EmptyCalNet.EmptyCalNet.state_dict": [[23, 26], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "state_dict", "(", "**", "kwargs", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.EmptyCalNet.EmptyCalNet.load_state_dict": [[27, 30], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_state_dict", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.DeepLabV3CalNet.DeepLabV3CalNet.__init__": [[13, 27], ["models.generators.calibration_nets.GeneralCalNet.GeneralCalNet.__init__", "utils.pretrained_utils.deeplabv3_segmentation", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "utils.training_helpers.renormalize"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.pretrained_utils.deeplabv3_segmentation", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.renormalize"], ["    ", "def", "__init__", "(", "self", ",", "n_channels_in", ":", "int", "=", "3", ",", "n_channels_out", ":", "int", "=", "3", ",", "n_hidden", ":", "int", "=", "64", ",", "\n", "norm_layer", ":", "nn", ".", "Module", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", ":", "bool", "=", "True", ",", "\n", "n_hidden_layers", ":", "int", "=", "3", ",", "padding_type", ":", "str", "=", "'reflect'", ",", "temperature", ":", "float", "=", "1", ",", "\n", "device", ":", "str", "=", "\"cpu\"", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "DeepLabV3CalNet", ",", "self", ")", ".", "__init__", "(", "n_channels_in", ",", "n_channels_out", ",", "device", ",", "**", "kwargs", ")", "\n", "\n", "# save for use in forward pass", "\n", "self", ".", "n_channels_in", "=", "n_channels_in", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "renormalize", "=", "lambda", "x", ":", "renormalize", "(", "x", ",", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "self", ".", "model", "=", "deeplabv3_segmentation", "(", "n_classes", "=", "n_channels_out", ")", "\n", "self", ".", "model", ".", "backbone", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "n_channels_in", ",", "64", ",", "kernel_size", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "3", ",", "3", ")", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.DeepLabV3CalNet.DeepLabV3CalNet.forward": [[29, 40], ["DeepLabV3CalNet.DeepLabV3CalNet.renormalize", "DeepLabV3CalNet.DeepLabV3CalNet.model", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.renormalize"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_logits", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "if", "self", ".", "n_channels_in", "==", "3", ":", "\n", "            ", "x", "=", "self", ".", "renormalize", "(", "x", ")", "# renormalize to normalization suggested by torchvision", "\n", "\n", "", "logits", "=", "self", ".", "model", "(", "x", ")", "[", "'out'", "]", "\n", "\n", "if", "return_logits", ":", "\n", "            ", "return", "logits", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "softmax", "(", "logits", "/", "self", ".", "temperature", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.GeneralCalNet.GeneralCalNet.__init__": [[6, 11], ["models.generators.GeneralGenerator.GeneralGenerator.__init__"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels_in", "=", "(", "1", ")", ",", "n_hidden", "=", "(", "1", ")", ",", "n_channels_out", "=", "(", "1", ")", ",", "device", "=", "\"cpu\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GeneralCalNet", ",", "self", ")", ".", "__init__", "(", "n_channels_in", ",", "device", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "n_channels_out", "=", "n_channels_out", "\n", "self", ".", "n_hidden", "=", "n_hidden", "", "", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.ToyCalNet.ToyCalNet.__init__": [[11, 71], ["models.generators.calibration_nets.GeneralCalNet.GeneralCalNet.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["def", "__init__", "(", "self", ",", "n_channels_in", ":", "int", "=", "3", ",", "n_channels_out", ":", "int", "=", "3", ",", "n_hidden", ":", "int", "=", "64", ",", "\n", "norm_layer", ":", "nn", ".", "Module", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", ":", "bool", "=", "True", ",", "\n", "n_hidden_layers", ":", "int", "=", "3", ",", "padding_type", ":", "str", "=", "'reflect'", ",", "temperature", ":", "float", "=", "1", ",", "\n", "device", ":", "str", "=", "\"cpu\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        n_channels_in (int)      - no. of channels in input images\n        n_channels_out (int)     - no. number of channels in output images\n        n_hidden (int)     - no. of filters in the last hidden layer\n        norm_layer         - normalization layer\n        use_dropout (bool) - use dropout layers or not\n        n_hidden_layers (int) - no of hidden layers\n        padding_type (str) - type of padding: zero, replicate, or reflect\n        temperature - magnitude of temperature scaling\n        \"\"\"", "\n", "super", "(", "ToyCalNet", ",", "self", ")", ".", "__init__", "(", "n_channels_in", ",", "n_channels_out", ",", "device", ",", "**", "kwargs", ")", "\n", "\n", "# save for use in forward pass", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n", "# If normalizing layer is instance normalization, add bias", "\n", "# use_bias = norm_layer == nn.InstanceNorm2d", "\n", "use_bias", "=", "True", "\n", "use_dropout", "=", "True", "\n", "\n", "\n", "# Initialize model input block", "\n", "layers", "=", "[", "]", "\n", "\n", "# Add input block layers", "\n", "layers", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "n_channels_in", ",", "n_hidden", ",", "kernel_size", "=", "3", ",", "bias", "=", "use_bias", ")", "]", "\n", "\n", "# layers += [nn.Linear(n_channels_in, n_hidden)]", "\n", "\n", "layers", "+=", "[", "nn", ".", "Dropout", "(", "int", "(", "use_dropout", ")", "*", "0.2", ")", "]", "\n", "layers", "+=", "[", "norm_layer", "(", "n_hidden", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "# Add hidden block layers", "\n", "for", "i", "in", "range", "(", "n_hidden_layers", ")", ":", "\n", "# Add input block layers", "\n", "            ", "layers", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "n_hidden", ",", "n_hidden", ",", "kernel_size", "=", "3", ",", "bias", "=", "use_bias", ")", "]", "\n", "\n", "# layers += [nn.Linear(n_hidden, n_hidden)]", "\n", "\n", "layers", "+=", "[", "nn", ".", "Dropout", "(", "int", "(", "use_dropout", ")", "*", "0.2", ")", "]", "\n", "layers", "+=", "[", "norm_layer", "(", "n_hidden", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "", "layers", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "n_hidden", ",", "n_channels_out", ",", "kernel_size", "=", "3", ")", "]", "\n", "\n", "# layers += [nn.Linear(n_hidden, n_channels_out)]", "\n", "\n", "layers", "+=", "[", "nn", ".", "Dropout", "(", "int", "(", "use_dropout", ")", "*", "0.2", ")", "]", "\n", "# layers += [nn.Softmax(dim=1)]", "\n", "\n", "# Save model", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.calibration_nets.ToyCalNet.ToyCalNet.forward": [[72, 78], ["ToyCalNet.ToyCalNet.model", "torch.softmax", "torch.softmax", "torch.softmax", "ToyCalNet.ToyCalNet.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_logits", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "if", "return_logits", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "softmax", "(", "self", ".", "model", "(", "x", ")", "/", "self", ".", "temperature", ",", "dim", "=", "1", ")", "# todo pass args.temperature from prior initialization in main", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.PixelLoss.PixelLoss.__init__": [[7, 9], ["models.losses.GeneralLoss.GeneralLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PixelLoss", ",", "self", ")", ".", "__init__", "(", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.PixelLoss.PixelLoss.custom_forward": [[10, 18], ["utils.training_helpers.get_ce", "utils.training_helpers.get_ce.mean"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.utils.training_helpers.get_ce"], ["", "def", "custom_forward", "(", "self", ",", "pred", ",", "target", ",", "reduction", "=", "True", ")", ":", "\n", "\n", "        ", "loss", "=", "get_ce", "(", "pred", ",", "target", ",", "dim", "=", "1", ")", "\n", "\n", "if", "reduction", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "loss", "", "", "", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.CalNetLoss.CalNetLoss.__init__": [[9, 13], ["models.losses.GeneralLoss.GeneralLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["    ", "def", "__init__", "(", "self", ",", "CalNetLoss_weight", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CalNetLoss", ",", "self", ")", ".", "__init__", "(", "CalNetLoss_weight", ")", "\n", "\n", "self", ".", "weight", "=", "CalNetLoss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.CalNetLoss.CalNetLoss.custom_forward": [[15, 28], ["torch.softmax", "torch.softmax", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "labels.argmax", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "labels.argmax", "torch.log", "torch.log", "torch.log", "torch.log", "torch.softmax.clamp"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log"], ["", "def", "custom_forward", "(", "self", ",", "calnet_preds_logits", ",", "labels", ",", "args", ")", ":", "\n", "\n", "        ", "calnet_preds_train", "=", "F", ".", "softmax", "(", "calnet_preds_logits", ",", "dim", "=", "1", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "\"LIDC\"", ":", "\n", "            ", "train_mask", "=", "torch", ".", "ones", "(", "labels", ".", "argmax", "(", "1", ")", ".", "shape", ")", ".", "to", "(", "DEVICE", ")", "\n", "", "else", ":", "\n", "            ", "train_mask", "=", "(", "labels", ".", "argmax", "(", "1", ")", "!=", "24", ")", "\n", "\n", "", "loss", "=", "-", "(", "(", "1", "*", "train_mask", ")", "*", "torch", ".", "sum", "(", "labels", "*", "torch", ".", "log", "(", "calnet_preds_train", ".", "clamp", "(", "min", "=", "1e-7", ")", ")", ",", "dim", "=", "1", ")", ")", ".", "mean", "(", ")", "\n", "\n", "\n", "return", "self", ".", "weight", "*", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.NonSaturatingGLoss.NonSaturatingGLoss.__init__": [[9, 11], ["models.losses.GeneralLoss.GeneralLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "NonSaturatingGLoss", ",", "self", ")", ".", "__init__", "(", "weight", "=", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.NonSaturatingGLoss.NonSaturatingGLoss.custom_forward": [[12, 19], ["torch.BCELoss", "torch.BCELoss", "torch.BCELoss.", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "custom_forward", "(", "self", ",", "score", ":", "torch", ".", "Tensor", ")", ":", "\n", "\n", "        ", "get_loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n", "loss", "=", "get_loss", "(", "score", ",", "torch", ".", "ones", "(", "score", ".", "shape", ")", ".", "to", "(", "DEVICE", ")", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.ComplexityLoss.ComplexityLoss.__init__": [[6, 8], ["models.losses.GeneralLoss.GeneralLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", ":", "float", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ComplexityLoss", ",", "self", ")", ".", "__init__", "(", "weight", "=", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.ComplexityLoss.ComplexityLoss.custom_forward": [[9, 19], ["ComplexityLoss.ComplexityLoss.linear_annealing", "torch.sum", "logvar.exp", "mu.pow"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.ComplexityLoss.ComplexityLoss.linear_annealing"], ["", "def", "custom_forward", "(", "self", ",", "mu", ",", "logvar", ",", "b_index", ",", "dataset_size", ")", ":", "\n", "\n", "# compute closed-form KL divergence", "\n", "        ", "out", "=", "-", "0.5", "*", "torch", ".", "sum", "(", "1", "+", "logvar", "-", "mu", ".", "pow", "(", "2", ")", "-", "logvar", ".", "exp", "(", ")", ")", "\n", "\n", "a", "=", "self", ".", "linear_annealing", "(", "0", ",", "1", ",", "b_index", ",", "dataset_size", ")", "\n", "\n", "out", "=", "a", "*", "out", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.ComplexityLoss.ComplexityLoss.linear_annealing": [[21, 31], ["min"], "methods", ["None"], ["", "def", "linear_annealing", "(", "self", ",", "start_weight", ",", "end_weight", ",", "b_index", ",", "annealing_steps", ")", ":", "\n", "\n", "        ", "if", "annealing_steps", "==", "0", ":", "\n", "            ", "return", "end_weight", "\n", "\n", "", "assert", "end_weight", ">", "start_weight", "\n", "current_weight", "=", "end_weight", "-", "start_weight", "\n", "annealed", "=", "min", "(", "start_weight", "+", "current_weight", "*", "b_index", "/", "annealing_steps", ",", "end_weight", ")", "\n", "\n", "return", "annealed", "", "", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.TotalDiscriminatorLoss.TotalDiscriminatorLoss.__init__": [[13, 18], ["models.losses.GeneralLoss.GeneralLoss.__init__", "models.losses.DefaultDLoss.DefaultDLoss"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["    ", "def", "__init__", "(", "self", ",", "DefaultDLoss_weight", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "default", "=", "DefaultDLoss", "(", "DefaultDLoss_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.TotalDiscriminatorLoss.TotalDiscriminatorLoss.forward": [[20, 48], ["TotalDiscriminatorLoss.TotalDiscriminatorLoss.default"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "discriminator", ",", "\n", "combined_input", ",", "\n", "scores", ",", "\n", "gt_labels", ",", "\n", "args", ",", "\n", ")", ":", "\n", "        ", "\"\"\" combined loss function for the discriminator \"\"\"", "\n", "\n", "# initialize total discriminator loss", "\n", "total_disc_loss", "=", "0", "\n", "merged", "=", "{", "}", "\n", "\n", "split_idx", "=", "combined_input", ".", "shape", "[", "0", "]", "//", "2", "\n", "\n", "predictions", "=", "combined_input", "[", ":", "split_idx", "]", "\n", "fake_scores", "=", "scores", "[", ":", "split_idx", "]", "\n", "\n", "labels", "=", "combined_input", "[", "split_idx", ":", "]", "\n", "real_scores", "=", "scores", "[", "split_idx", ":", "]", "\n", "\n", "\n", "if", "self", ".", "default", ".", "active", ":", "\n", "            ", "loss_default", ",", "save_default", "=", "self", ".", "default", "(", "fake_scores", ",", "real_scores", ",", "smoothing", "=", "args", ".", "label_smoothing", ")", "\n", "total_disc_loss", "+=", "loss_default", "\n", "merged", "=", "{", "**", "merged", ",", "**", "save_default", "}", "\n", "\n", "", "return", "(", "total_disc_loss", ",", "merged", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.GeneralLoss.GeneralLoss.__init__": [[6, 12], ["torch.Module.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "GeneralLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "active", "=", "(", "weight", ">", "0", ")", "\n", "if", "(", "not", "self", ".", "active", ")", ":", "\n", "            ", "print", "(", "f\"{self.__class__.__name__} deactivated due to weight = {weight}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.GeneralLoss.GeneralLoss.forward": [[13, 30], ["GeneralLoss.GeneralLoss.custom_forward", "output.item"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.DefaultDLoss.DefaultDLoss.custom_forward"], ["", "", "def", "forward", "(", "self", ",", "*", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        wrapper forward for other child class forward-methods so that weight can be applied\n\n        :param input: any number of params\n        :return:\n        \"\"\"", "\n", "\n", "# don't bother calculating if the loss is deactivated", "\n", "if", "(", "not", "self", ".", "active", ")", ":", "\n", "            ", "return", "0", ",", "{", "}", "\n", "\n", "", "loss", "=", "self", ".", "custom_forward", "(", "*", "input", ",", "**", "kwargs", ")", "\n", "\n", "output", "=", "self", ".", "weight", "*", "loss", "\n", "\n", "return", "output", ",", "{", "self", ".", "__class__", ".", "__name__", ":", "output", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.GeneralLoss.GeneralLoss.custom_forward": [[31, 40], ["Exception"], "methods", ["None"], ["", "def", "custom_forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "\"\"\"\n        Method place-holder to be overridden in child-class\n\n\n        :param input: any number of params\n        :return:\n        \"\"\"", "\n", "raise", "Exception", "(", "\"PLEASE IMPLEMENT custom_forward METHOD IN CHILD-CLASS\"", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.CalLoss.CalLoss.__init__": [[6, 8], ["models.losses.GeneralLoss.GeneralLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", ":", "float", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CalLoss", ",", "self", ")", ".", "__init__", "(", "weight", "=", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.CalLoss.CalLoss.custom_forward": [[9, 25], ["torch.ones().to", "labels.argmax", "torch.ones", "kl", "labels.argmax", "torch.log", "p.clamp", "torch.log", "p.clamp", "q.clamp", "p.clamp"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.training.train.TrainingProcess.log"], ["", "def", "custom_forward", "(", "self", ",", "avg_preds", ",", "calnet_preds", ",", "labels", ",", "args", ")", ":", "\n", "\n", "        ", "eps", "=", "1e-3", "\n", "\n", "# mask loss to train only on labelled idxs", "\n", "if", "args", ".", "dataset", "==", "\"LIDC\"", ":", "\n", "            ", "train_mask", "=", "torch", ".", "ones", "(", "labels", ".", "argmax", "(", "1", ")", ".", "shape", ")", ".", "to", "(", "DEVICE", ")", "\n", "", "else", ":", "\n", "            ", "train_mask", "=", "(", "labels", ".", "argmax", "(", "1", ")", "!=", "24", ")", "\n", "\n", "", "kl", "=", "lambda", "p", ",", "q", ":", "(", "-", "p", ".", "clamp", "(", "min", "=", "eps", ",", "max", "=", "1", "-", "eps", ")", "*", "torch", ".", "log", "(", "q", ".", "clamp", "(", "min", "=", "eps", ",", "max", "=", "1", "-", "eps", ")", ")", "\n", "+", "p", ".", "clamp", "(", "min", "=", "eps", ",", "max", "=", "1", "-", "eps", ")", "*", "torch", ".", "log", "(", "p", ".", "clamp", "(", "min", "=", "eps", ",", "max", "=", "1", "-", "eps", ")", ")", ")", ".", "sum", "(", "1", ")", "\n", "\n", "loss", "=", "(", "(", "1", "*", "train_mask", ")", "*", "kl", "(", "avg_preds", ",", "calnet_preds", ")", ")", ".", "mean", "(", ")", "# rKL where avg preds is used as target p", "\n", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.DefaultDLoss.DefaultDLoss.__init__": [[8, 10], ["models.losses.GeneralLoss.GeneralLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DefaultDLoss", ",", "self", ")", ".", "__init__", "(", "weight", "=", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.DefaultDLoss.DefaultDLoss.custom_forward": [[12, 28], ["torch.BCELoss", "torch.BCELoss", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.BCELoss.mean", "torch.BCELoss.mean", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.BCELoss.", "torch.BCELoss.", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "custom_forward", "(", "self", ",", "fake_scores", ",", "real_scores", ",", "smoothing", "=", "False", ")", ":", "\n", "\n", "        ", "get_loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n", "fake_labels", "=", "torch", ".", "zeros", "(", "fake_scores", ".", "shape", ")", ".", "to", "(", "DEVICE", ")", "\n", "real_labels", "=", "torch", ".", "ones", "(", "real_scores", ".", "shape", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "# label smoothing", "\n", "if", "smoothing", ":", "\n", "            ", "fake_labels", "=", "torch", ".", "FloatTensor", "(", "fake_labels", ".", "shape", ")", ".", "uniform_", "(", "0", ",", "0.3", ")", ".", "to", "(", "DEVICE", ")", "\n", "real_labels", "=", "torch", ".", "FloatTensor", "(", "real_labels", ".", "shape", ")", ".", "uniform_", "(", "0.7", ",", "1", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "\n", "", "loss", "=", "get_loss", "(", "fake_scores", ",", "fake_labels", ")", ".", "mean", "(", ")", "+", "get_loss", "(", "real_scores", ",", "real_labels", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.TotalGeneratorLoss.TotalGeneratorLoss.__init__": [[19, 27], ["models.losses.GeneralLoss.GeneralLoss.__init__", "models.losses.NonSaturatingGLoss.NonSaturatingGLoss", "models.losses.PixelLoss.PixelLoss", "models.losses.CalLoss.CalLoss", "models.losses.ComplexityLoss.ComplexityLoss"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["    ", "def", "__init__", "(", "self", ",", "NonSaturatingGLoss_weight", "=", "1", ",", "PixelLoss_weight", "=", "10", ",", "CalLoss_weight", "=", "10", ",", "ComplexityLoss_weight", ":", "float", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "adv", "=", "NonSaturatingGLoss", "(", "NonSaturatingGLoss_weight", ")", "\n", "self", ".", "pix", "=", "PixelLoss", "(", "PixelLoss_weight", ")", "\n", "self", ".", "cal", "=", "CalLoss", "(", "CalLoss_weight", ")", "\n", "self", ".", "kl", "=", "ComplexityLoss", "(", "ComplexityLoss_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.losses.TotalGeneratorLoss.TotalGeneratorLoss.forward": [[29, 104], ["pred_dist_labelled.view.view.view", "discriminator", "TotalGeneratorLoss.TotalGeneratorLoss.adv", "pred_labelled.detach", "TotalGeneratorLoss.TotalGeneratorLoss.pix", "isinstance", "TotalGeneratorLoss.TotalGeneratorLoss.kl", "isinstance", "pred_dist.mean", "TotalGeneratorLoss.TotalGeneratorLoss.cal", "generator", "generator", "calnet_preds.detach", "calnet_labelled_imgs.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "images", ",", "\n", "labels", ",", "\n", "true_labelled", ",", "\n", "calnet_preds", ",", "\n", "calnet_labelled_imgs", ",", "\n", "preds", ",", "\n", "pred_labelled", ",", "\n", "pred_dist", ",", "\n", "pred_dist_labelled", ",", "\n", "generator", ":", "GeneralGenerator", ",", "\n", "discriminator", ":", "GeneralDiscriminator", ",", "\n", "args", ",", "\n", "b_index", ",", "\n", "dataset_size", "\n", ")", "->", "Tuple", "[", "\n", "Any", ",", "Dict", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "\n", "]", ":", "\n", "        ", "\"\"\" combined loss function for the generator \"\"\"", "\n", "\n", "# check if we use a calibration net", "\n", "use_calibration_net", "=", "not", "args", ".", "calibration_net", "==", "\"EmptyCalNet\"", "\n", "\n", "# check that at least one loss function for the generator is active", "\n", "assert", "self", ".", "adv", ".", "active", "or", "self", ".", "pix", ".", "active", "or", "self", ".", "fm", ".", "active", "or", "self", ".", "cal", ".", "active", "or", "self", ".", "kl", ".", "active", "or", "self", ".", "pp", ".", "active", "or", "self", ".", "vq", ".", "active", ",", "\"No generator loss function is active!\"", "\n", "\n", "# compute total generator loss", "\n", "total_gen_loss", "=", "0", "\n", "merged", "=", "{", "}", "\n", "\n", "# adverserial loss", "\n", "if", "self", ".", "adv", ".", "active", ":", "\n", "\n", "# merge batch and sample dimensions", "\n", "            ", "pd_shape", "=", "pred_dist_labelled", ".", "shape", "\n", "new_pd_shape", "=", "(", "-", "1", ",", "pd_shape", "[", "2", "]", ",", "pd_shape", "[", "3", "]", ",", "pd_shape", "[", "4", "]", ")", "\n", "pred_dist_labelled", "=", "pred_dist_labelled", ".", "view", "(", "new_pd_shape", ")", "\n", "\n", "pred_score", "=", "discriminator", "(", "pred_dist_labelled", ")", "\n", "loss_adv", ",", "save_adv", "=", "self", ".", "adv", "(", "pred_score", ")", "\n", "\n", "merged", "=", "{", "**", "merged", ",", "**", "save_adv", "}", "\n", "total_gen_loss", "+=", "loss_adv", "\n", "pred_labelled", ".", "detach", "(", ")", "\n", "\n", "# pixel loss", "\n", "", "if", "self", ".", "pix", ".", "active", ":", "\n", "\n", "            ", "loss_pix", ",", "save_pix", "=", "self", ".", "pix", "(", "preds", ",", "labels", ")", "\n", "\n", "total_gen_loss", "+=", "loss_pix", "\n", "merged", "=", "{", "**", "merged", ",", "**", "save_pix", "}", "\n", "\n", "", "if", "self", ".", "kl", ".", "active", ":", "\n", "            ", "assert", "isinstance", "(", "generator", ",", "GeneralVAE", ")", "\n", "\n", "mu", ",", "log_var", "=", "generator", "(", "images", ",", "return_mu_logvar", "=", "True", ")", "if", "not", "use_calibration_net", "else", "generator", "(", "calnet_labelled_imgs", ".", "detach", "(", ")", ",", "return_mu_logvar", "=", "True", ")", "\n", "loss_kl", ",", "save_kl", "=", "self", ".", "kl", "(", "mu", ",", "log_var", ",", "b_index", ",", "dataset_size", ")", "\n", "total_gen_loss", "+=", "loss_kl", "\n", "merged", "=", "{", "**", "merged", ",", "**", "save_kl", "}", "\n", "\n", "\n", "", "if", "self", ".", "cal", ".", "active", ":", "\n", "            ", "assert", "isinstance", "(", "generator", ",", "GeneralVAE", ")", ",", "\"Cal loss is only used when we have a vae generator/refinement net\"", "\n", "assert", "use_calibration_net", ",", "\"Cal loss is only used when we have a calibration net\"", "\n", "\n", "avg_preds", "=", "pred_dist", ".", "mean", "(", "0", ")", "\n", "\n", "loss_cal", ",", "save_cal", "=", "self", ".", "cal", "(", "avg_preds", ",", "calnet_preds", ".", "detach", "(", ")", ",", "labels", ",", "args", ")", "\n", "total_gen_loss", "+=", "loss_cal", "\n", "merged", "=", "{", "**", "merged", ",", "**", "save_cal", "}", "\n", "\n", "\n", "", "return", "total_gen_loss", ",", "merged", "\n", "", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.RandomHorizontalFlip.__init__": [[28, 30], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probability", ":", "float", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "_probability", "=", "probability", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.RandomHorizontalFlip.__call__": [[31, 36], ["numpy.random.random", "transformations._apply_to_all"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations._apply_to_all"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "_probability", ":", "\n", "            ", "return", "_apply_to_all", "(", "sample", ",", "_process_all", ",", "self", ".", "_fn", ")", "\n", "", "else", ":", "\n", "            ", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.RandomHorizontalFlip._fn": [[37, 40], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_fn", "(", "value", ":", "np", ".", "ndarray", ",", "*", "args", ")", ":", "\n", "            ", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.ClassFlip.__init__": [[44, 51], ["len", "len", "len", "len", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "c1", "=", "[", "3", ",", "9", ",", "8", ",", "5", ",", "4", "]", ",", "c2", "=", "[", "13", ",", "12", ",", "14", ",", "15", ",", "16", "]", ",", "p", "=", "[", "8", "/", "17", ",", "7", "/", "17", ",", "6", "/", "17", ",", "5", "/", "17", ",", "4", "/", "17", "]", ")", ":", "\n", "\n", "        ", "assert", "len", "(", "c1", ")", "==", "len", "(", "c2", ")", "==", "len", "(", "p", ")", ",", "f\"Missmatch between number of labels to be switched and probs. l1 = {len(c1)}, l2 = {len(c2)} and p = {len(p)}\"", "\n", "\n", "self", ".", "labels1", "=", "c1", "\n", "self", ".", "labels2", "=", "c2", "\n", "self", ".", "probabilities", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.ClassFlip.__call__": [[52, 54], ["transformations._apply_to_all"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations._apply_to_all"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "_apply_to_all", "(", "sample", ",", "self", ".", "pass_args", ",", "self", ".", "_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.ClassFlip.pass_args": [[55, 62], ["None"], "methods", ["None"], ["", "def", "pass_args", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "return", "(", "\n", "True", ",", "\n", "self", ".", "labels1", ",", "\n", "self", ".", "labels2", ",", "\n", "self", ".", "probabilities", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.ClassFlip._fn": [[64, 91], ["value.max", "len", "np.random.rand", "range", "np.random.rand", "range", "len", "len", "len", "len", "len", "range", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_fn", "(", "value", ",", "*", "args", ")", ":", "\n", "\n", "        ", "labels1", ",", "labels2", ",", "probability", "=", "args", "\n", "\n", "if", "value", ".", "max", "(", ")", "<=", "len", "(", "CITYSCAPES19_N_LABELS", ")", ":", "# perform only on labels", "\n", "\n", "            ", "if", "value", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "\n", "\n", "                ", "roll", "=", "np", ".", "random", ".", "rand", "(", "len", "(", "probability", ")", ")", "\n", "flip_idxs", "=", "roll", "<", "probability", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "probability", ")", ")", ":", "\n", "                    ", "if", "flip_idxs", "[", "i", "]", ":", "\n", "                        ", "value", "[", "value", "==", "labels1", "[", "i", "]", "]", "=", "labels2", "[", "i", "]", "\n", "\n", "", "", "", "else", ":", "# if 1st dim is batch dim", "\n", "\n", "                ", "roll", "=", "np", ".", "random", ".", "rand", "(", "len", "(", "value", ")", ",", "len", "(", "probability", ")", ")", "\n", "flip_idxs", "=", "roll", "<", "probability", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "value", ")", ")", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "probability", ")", ")", ":", "\n", "                        ", "if", "flip_idxs", "[", "j", "]", "[", "i", "]", ":", "\n", "                            ", "value", "[", "j", "]", "[", "value", "[", "j", "]", "==", "labels1", "[", "i", "]", "]", "=", "labels2", "[", "i", "]", "\n", "\n", "", "", "", "", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.RandomRescale.__init__": [[94, 99], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "probability", ":", "float", "=", "1", "/", "3", ",", "scales", "=", "None", ")", ":", "\n", "        ", "self", ".", "_probability", "=", "probability", "\n", "if", "scales", "is", "None", ":", "\n", "            ", "scales", "=", "[", "1.1", ",", "1.2", "]", "\n", "", "self", ".", "_scales", "=", "scales", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.RandomRescale.__call__": [[100, 102], ["transformations._apply_to_all"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations._apply_to_all"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "_apply_to_all", "(", "sample", ",", "self", ".", "_process_s", ",", "self", ".", "_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.RandomRescale._process_s": [[103, 105], ["numpy.random.choice", "numpy.random.random"], "methods", ["None"], ["", "def", "_process_s", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "random", ".", "random", "(", ")", "<", "self", ".", "_probability", ",", "random", ".", "choice", "(", "self", ".", "_scales", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.RandomRescale._fn": [[106, 112], ["cv2.resize"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_fn", "(", "value", ",", "*", "args", ")", ":", "\n", "        ", "scale", "=", "args", "[", "0", "]", "\n", "\n", "return", "cv2", ".", "resize", "(", "\n", "value", ",", "None", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ",", "interpolation", "=", "constants", ".", "INTERPOLATION", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.RandomScaleCrop.__init__": [[116, 125], ["np.concatenate", "np.linspace", "np.linspace"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "imsize", ",", "probability", "=", "1", "/", "2", ",", "scales", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "_probability", "=", "probability", "\n", "if", "scales", "is", "None", ":", "\n", "            ", "scales", "=", "[", "0.8", ",", "0.9", ",", "0.95", "]", "\n", "", "self", ".", "_scales", "=", "scales", "\n", "self", ".", "imsize", "=", "imsize", "\n", "self", ".", "shear_factor", "=", "np", ".", "concatenate", "(", "(", "np", ".", "linspace", "(", "0.05", ",", "0.1", ",", "4", ")", ",", "np", ".", "linspace", "(", "-", "0.1", ",", "-", "0.05", ",", "4", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.RandomScaleCrop.__call__": [[126, 128], ["transformations._apply_to_all"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations._apply_to_all"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "_apply_to_all", "(", "sample", ",", "self", ".", "_process_s", ",", "self", ".", "_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.RandomScaleCrop._process_s": [[129, 155], ["numpy.random.choice", "np.random.randint", "np.random.randint", "numpy.random.choice", "numpy.random.random", "int", "int", "int", "int", "numpy.random.random"], "methods", ["None"], ["", "def", "_process_s", "(", "self", ",", "s", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ")", "->", "Tuple", "[", "bool", ",", "float", ",", "float", "]", ":", "\n", "        ", "scale", "=", "random", ".", "choice", "(", "self", ".", "_scales", ")", "\n", "\n", "shear_f", "=", "random", ".", "choice", "(", "self", ".", "shear_factor", ")", "if", "random", ".", "random", "(", ")", "<", "self", ".", "_probability", "else", "0", "\n", "\n", "input_height", ",", "input_width", ",", "_", "=", "s", "[", "'image'", "]", ".", "shape", "\n", "\n", "if", "self", ".", "imsize", "[", "0", "]", "==", "self", ".", "imsize", "[", "1", "]", ":", "\n", "            ", "t_size", "=", "int", "(", "input_height", "*", "scale", ")", "if", "input_height", "<", "input_width", "else", "int", "(", "input_width", "*", "(", "scale", "+", "shear_f", ")", ")", "\n", "t_size", "=", "(", "t_size", ",", "t_size", ")", "\n", "", "else", ":", "\n", "            ", "t_size", "=", "(", "int", "(", "input_height", "*", "scale", ")", ",", "int", "(", "input_width", "*", "scale", ")", ")", "\n", "\n", "\n", "", "target_height", ",", "target_width", "=", "(", "\n", "t_size", "[", "0", "]", ",", "\n", "t_size", "[", "1", "]", ",", "\n", ")", "\n", "top", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "input_height", "-", "target_height", ")", "\n", "left", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "input_width", "-", "target_width", ")", "\n", "return", "(", "\n", "random", ".", "random", "(", ")", "<", "self", ".", "_probability", ",", "\n", "target_height", ",", "\n", "target_width", ",", "\n", "top", ",", "\n", "left", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.RandomScaleCrop._fn": [[157, 163], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_fn", "(", "value", ",", "*", "args", ")", ":", "\n", "        ", "target_height", ",", "target_width", ",", "top", ",", "left", "=", "args", "\n", "out", "=", "value", "[", "top", ":", "top", "+", "target_height", ",", "left", ":", "left", "+", "target_width", "]", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.RCrop.__init__": [[165, 171], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "probability", "=", "1", "/", "3", ",", "imsize", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "_probability", "=", "probability", "\n", "\n", "self", ".", "_imsize", "=", "imsize", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.RCrop.__call__": [[172, 174], ["transformations._apply_to_all"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations._apply_to_all"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "_apply_to_all", "(", "sample", ",", "self", ".", "_process_s", ",", "self", ".", "_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.RCrop._process_s": [[175, 193], ["np.random.randint", "np.random.randint", "numpy.random.random"], "methods", ["None"], ["", "def", "_process_s", "(", "self", ",", "sample", ")", ":", "\n", "        ", "input_height", ",", "input_width", ",", "_", "=", "sample", "[", "'image'", "]", ".", "shape", "\n", "\n", "t_size", "=", "self", ".", "_imsize", "\n", "\n", "target_height", ",", "target_width", "=", "(", "\n", "t_size", "[", "0", "]", ",", "\n", "t_size", "[", "1", "]", ",", "\n", ")", "\n", "\n", "top", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "input_height", "-", "target_height", ")", "if", "input_height", "!=", "target_height", "else", "0", "\n", "left", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "input_width", "-", "target_width", ")", "if", "input_width", "!=", "target_width", "else", "0", "\n", "return", "(", "\n", "random", ".", "random", "(", ")", "<", "self", ".", "_probability", ",", "\n", "target_height", ",", "\n", "target_width", ",", "\n", "top", ",", "\n", "left", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.RCrop._fn": [[195, 199], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_fn", "(", "value", ":", "np", ".", "ndarray", ",", "*", "args", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "target_height", ",", "target_width", ",", "top", ",", "left", "=", "args", "\n", "return", "value", "[", "top", ":", "top", "+", "target_height", ",", "left", ":", "left", "+", "target_width", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.Crop.__init__": [[201, 203], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imsize", "=", "None", ")", ":", "\n", "        ", "self", ".", "_imsize", "=", "imsize", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.Crop.__call__": [[204, 206], ["transformations._apply_to_all"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations._apply_to_all"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "_apply_to_all", "(", "sample", ",", "self", ".", "_process_s", ",", "self", ".", "_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.Crop._process_s": [[207, 226], ["None"], "methods", ["None"], ["", "def", "_process_s", "(", "self", ",", "sample", ")", ":", "\n", "        ", "input_height", ",", "input_width", ",", "_", "=", "sample", "[", "'image'", "]", ".", "shape", "\n", "t_size", "=", "self", ".", "_imsize", "\n", "\n", "target_height", ",", "target_width", "=", "(", "\n", "t_size", "[", "0", "]", ",", "\n", "t_size", "[", "1", "]", ",", "\n", ")", "\n", "\n", "# get a center cropping", "\n", "top", "=", "(", "input_height", "-", "target_height", ")", "//", "2", "\n", "left", "=", "(", "input_width", "-", "target_width", ")", "//", "2", "\n", "\n", "return", "(", "\n", "True", ",", "\n", "target_height", ",", "\n", "target_width", ",", "\n", "top", ",", "\n", "left", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.Crop._fn": [[228, 237], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_fn", "(", "value", ",", "*", "args", ")", ":", "\n", "        ", "target_height", ",", "target_width", ",", "top", ",", "left", "=", "args", "\n", "if", "value", ".", "shape", "[", "0", "]", "==", "4", ":", "\n", "            ", "out", "=", "value", "[", ":", ",", "top", ":", "top", "+", "target_height", ",", "left", ":", "left", "+", "target_width", "]", "\n", "", "else", ":", "\n", "            ", "out", "=", "value", "[", "top", ":", "top", "+", "target_height", ",", "left", ":", "left", "+", "target_width", "]", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.Resize.__call__": [[240, 242], ["transformations._apply_to_all"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations._apply_to_all"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "_apply_to_all", "(", "sample", ",", "_process_all", ",", "self", ".", "_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.Resize._fn": [[243, 279], ["np.moveaxis", "cv2.resize", "cv2.split", "cv2.merge", "cv2.resize", "channel_list.append", "np.moveaxis"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_fn", "(", "value", ",", "*", "args", ")", ":", "\n", "        ", "reshaped", "=", "False", "\n", "\n", "try", ":", "\n", "            ", "if", "value", ".", "shape", "==", "(", "4", ",", "180", ",", "180", ")", ":", "\n", "                ", "reshaped", "=", "True", "\n", "value", "=", "np", ".", "moveaxis", "(", "value", ",", "0", ",", "-", "1", ")", "\n", "", "width", ",", "height", ",", "n_channels", "=", "value", ".", "shape", "\n", "", "except", "Exception", ":", "\n", "            ", "width", ",", "height", "=", "value", ".", "shape", "\n", "n_channels", "=", "0", "\n", "\n", "", "if", "width", "==", "constants", ".", "IMSIZE", "[", "0", "]", "and", "height", "==", "constants", ".", "IMSIZE", "[", "1", "]", ":", "\n", "            ", "return", "value", "\n", "", "elif", "n_channels", "<=", "3", ":", "\n", "\n", "            ", "return", "cv2", ".", "resize", "(", "\n", "value", ",", "\n", "(", "constants", ".", "IMSIZE", "[", "1", "]", ",", "constants", ".", "IMSIZE", "[", "0", "]", ")", ",", "\n", "interpolation", "=", "constants", ".", "INTERPOLATION", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "channel_list", "=", "[", "]", "\n", "channels", "=", "cv2", ".", "split", "(", "value", ")", "\n", "for", "channel", "in", "channels", ":", "\n", "                ", "new_channel", "=", "cv2", ".", "resize", "(", "\n", "channel", ",", "\n", "(", "constants", ".", "IMSIZE", "[", "1", "]", ",", "constants", ".", "IMSIZE", "[", "0", "]", ")", ",", "\n", "interpolation", "=", "constants", ".", "INTERPOLATION", ",", "\n", ")", "\n", "channel_list", ".", "append", "(", "new_channel", ")", "\n", "", "out", "=", "cv2", ".", "merge", "(", "channel_list", ")", "\n", "if", "reshaped", ":", "\n", "                ", "out", "=", "np", ".", "moveaxis", "(", "out", ",", "-", "1", ",", "0", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.RescaleValues.__call__": [[282, 284], ["transformations._apply_to_all"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations._apply_to_all"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "_apply_to_all", "(", "sample", ",", "_process_all", ",", "self", ".", "_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.RescaleValues._fn": [[285, 299], ["value.astype.astype.astype", "value.astype.astype.astype", "value.astype.astype.max", "len", "value.astype.astype.min", "value.astype.astype.max"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_fn", "(", "value", ",", "*", "args", ")", ":", "\n", "\n", "        ", "if", "value", ".", "max", "(", ")", ">", "LABELS_CHANNELS", "and", "len", "(", "value", ".", "shape", ")", "==", "3", ":", "# if input is an RGB image", "\n", "\n", "            ", "value", "=", "value", ".", "astype", "(", "float", ")", "\n", "value", "=", "(", "value", "/", "255", ")", "*", "2", "-", "1", "\n", "\n", "assert", "-", "1", "<=", "value", ".", "min", "(", ")", "<=", "value", ".", "max", "(", ")", "<=", "1", "\n", "\n", "", "else", ":", "\n", "            ", "return", "value", ".", "astype", "(", "float", ")", "# do not rescale labels", "\n", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations._2d_to_1hot.__call__": [[301, 303], ["transformations._apply_to_all"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations._apply_to_all"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "_apply_to_all", "(", "sample", ",", "_process_all", ",", "self", ".", "_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations._2d_to_1hot._fn": [[304, 324], ["print", "np.eye", "value.max", "len", "labels.astype.astype.astype", "print", "value.min", "value.max"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_fn", "(", "value", ",", "*", "args", ")", ":", "\n", "# if input is an rgb image or unc map", "\n", "        ", "if", "(", "value", ".", "max", "(", ")", ">", "LABELS_CHANNELS", "and", "len", "(", "value", ".", "shape", ")", "==", "3", ")", "or", "value", ".", "dtype", "!=", "np", ".", "uint8", "or", "value", ".", "shape", "==", "(", "4", ",", "128", ",", "128", ")", ":", "\n", "            ", "return", "value", "\n", "", "else", ":", "\n", "            ", "assert", "value", ".", "shape", "[", "2", "]", "==", "3", "or", "value", ".", "shape", "[", "2", "]", "==", "2", ",", "f\"Unexpected input to convert to 1-hot format. Expected RGB or grayscale image, got input of shape = {value.shape}\"", "\n", "\n", "labels", "=", "value", "[", ":", ",", ":", ",", "1", "]", "\n", "\n", "if", "labels", ".", "dtype", "!=", "np", ".", "uint8", ":", "\n", "                ", "print", "(", "f\"Label not uint8! Shape = {labels.shape}, value shape = {value.shape}, minmax = {value.min()} < {value.max()}\"", ")", "\n", "try", ":", "\n", "                    ", "labels", "=", "labels", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "print", "(", "e", ",", "f\" labels dtype = {labels.dtype}\"", ")", "\n", "\n", "", "", "one_hot", "=", "np", ".", "eye", "(", "LABELS_CHANNELS", ")", "[", "labels", "]", "#todo check if -1 is correct here!!!!", "\n", "\n", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.ChangeChannels.__call__": [[326, 328], ["transformations._apply_to_all"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations._apply_to_all"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "_apply_to_all", "(", "sample", ",", "_process_all", ",", "self", ".", "_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations.ChangeChannels._fn": [[329, 334], ["np.moveaxis"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_fn", "(", "value", ",", "*", "args", ")", ":", "\n", "        ", "if", "value", ".", "shape", "!=", "(", "4", ",", "128", ",", "128", ")", ":", "#do not move channel of TOY gt dristribution!", "\n", "            ", "value", "=", "np", ".", "moveaxis", "(", "value", ",", "-", "1", ",", "0", ")", "\n", "", "return", "value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations._apply_to_all": [[10, 18], ["sample.items", "fn", "transformations._process_all", "transformations._process_all", "transformations._process_all", "transformations._process_all", "transformations._process_all"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations._process_all", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations._process_all", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations._process_all", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations._process_all", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations._process_all"], ["def", "_apply_to_all", "(", "sample", ",", "sample_setup", ",", "fn", ")", ":", "\n", "\n", "    ", "process_sample", ",", "*", "args", "=", "sample_setup", "(", "sample", ")", "\n", "\n", "for", "key", ",", "value", "in", "sample", ".", "items", "(", ")", ":", "\n", "        ", "sample", "[", "key", "]", "=", "fn", "(", "value", ",", "*", "args", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.transformations._process_all": [[20, 22], ["None"], "function", ["None"], ["", "def", "_process_all", "(", "sample", ")", ":", "\n", "    ", "return", "True", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.LIDC.LIDC.__init__": [[21, 41], ["LIDC.LIDC.all_file_paths", "LIDC.LIDC.all_file_paths", "len", "print", "mode.lower", "mode.lower", "mode.lower", "mode.lower"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.all_file_paths", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.all_file_paths"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "mode", ",", "\n", "transform", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "\n", "data_path", "=", "personal_constants", ".", "LIDC_PATH", "/", "f\"lidc_crops_{mode.lower()}\"", "/", "mode", ".", "lower", "(", ")", "/", "f'images'", "\n", "labels_path", "=", "personal_constants", ".", "LIDC_PATH", "/", "f\"lidc_crops_{mode.lower()}\"", "/", "mode", ".", "lower", "(", ")", "/", "f'gt'", "\n", "\n", "assert", "mode", "in", "[", "\"train\"", ",", "\"test\"", ",", "\"val\"", "]", ",", "'Incorrect dataset mode. Accepted modes include: \"train\", \"test\" or \"val\"'", "\n", "\n", "self", ".", "_all_imgs", "=", "self", ".", "all_file_paths", "(", "data_path", ")", "\n", "self", ".", "_all_labels", "=", "self", ".", "all_file_paths", "(", "labels_path", ")", "\n", "\n", "self", ".", "_n_images", "=", "len", "(", "self", ".", "_all_imgs", ")", "\n", "print", "(", "f'n images in {mode} dataset: {self._n_images}'", ")", "\n", "\n", "self", ".", "_transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.LIDC.LIDC._sum": [[42, 47], ["len", "list", "video_path.iterdir"], "methods", ["None"], ["", "def", "_sum", "(", "self", ",", "video_path", ")", ":", "\n", "\n", "        ", "sum_imgs", "=", "len", "(", "list", "(", "(", "video_path", ".", "iterdir", "(", ")", ")", ")", ")", "\n", "\n", "return", "sum_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.LIDC.LIDC.__len__": [[48, 50], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_n_images", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.LIDC.LIDC.__getitem__": [[51, 89], ["LIDC.LIDC._load_image", "get_label_idx", "list", "numpy.stack", "numpy.random.choice", "range", "len", "LIDC.LIDC._transform", "LIDC.LIDC._all_labels[].stem.split", "LIDC.LIDC._all_imgs[].stem.split", "set", "LIDC.LIDC._load_image", "LIDC.LIDC._all_labels[].stem.split", "LIDC.LIDC._all_imgs[].stem.split", "LIDC.LIDC._all_labels[].stem.split"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes35.Cityscapes35._load_image", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes35.Cityscapes35._load_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "# get image", "\n", "        ", "image", "=", "self", ".", "_load_image", "(", "self", ".", "_all_imgs", "[", "index", "]", ")", "\n", "\n", "# get index of first label out of four", "\n", "get_label_idx", "=", "lambda", "x", ":", "(", "x", "+", "1", ")", "*", "4", "-", "4", "\n", "label0_idx", "=", "get_label_idx", "(", "index", ")", "\n", "\n", "# get all possible labels for source image", "\n", "label_idxs", "=", "list", "(", "range", "(", "label0_idx", ",", "label0_idx", "+", "4", ")", ")", "\n", "\n", "assert", "self", ".", "_all_labels", "[", "label0_idx", "]", ".", "stem", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "==", "self", ".", "_all_imgs", "[", "index", "]", ".", "stem", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ",", "f\"Label is for patient {self._all_labels[label0_idx].stem.split('_')[0]} whereas Image is for patient {self._all_imgs[index].stem.split('_')[0]}\"", "\n", "assert", "len", "(", "set", "(", "[", "self", ".", "_all_labels", "[", "i", "]", ".", "stem", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "for", "i", "in", "label_idxs", "]", ")", ")", "==", "1", "\n", "\n", "labels", "=", "np", ".", "stack", "(", "[", "self", ".", "_load_image", "(", "self", ".", "_all_labels", "[", "idx", "]", ")", "for", "idx", "in", "label_idxs", "]", ",", "axis", "=", "0", ")", "\n", "labels", "[", "labels", "==", "255", "]", "=", "1", "# values are 0 and 255 in loaded labels", "\n", "\n", "# sample random label", "\n", "label_index", "=", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "\n", "label", "=", "labels", "[", "label_index", "]", "\n", "\n", "if", "self", ".", "mode", "==", "\"train\"", ":", "\n", "            ", "sample", "=", "{", "\n", "'image'", ":", "image", ",", "\n", "'label'", ":", "label", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "sample", "=", "{", "\n", "'image'", ":", "image", ",", "\n", "'label'", ":", "label", ",", "\n", "'dist'", ":", "labels", "[", ":", ",", ":", ",", ":", ",", "0", "]", "# extract channel 0 because channel dims are identical", "\n", "}", "\n", "\n", "", "if", "self", ".", "_transform", ":", "\n", "            ", "sample", "=", "self", ".", "_transform", "(", "sample", ")", "\n", "\n", "", "return", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.LIDC.LIDC.all_file_paths": [[90, 99], ["path.iterdir", "sorted", "patient.iterdir", "sorted.append"], "methods", ["None"], ["", "def", "all_file_paths", "(", "self", ",", "path", ")", ":", "\n", "        ", "all_files", "=", "[", "]", "\n", "for", "patient", "in", "path", ".", "iterdir", "(", ")", ":", "\n", "            ", "for", "p", "in", "patient", ".", "iterdir", "(", ")", ":", "\n", "                ", "all_files", ".", "append", "(", "p", ")", "\n", "\n", "", "", "all_files", "=", "sorted", "(", "all_files", ")", "\n", "\n", "return", "all_files", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.LIDC.LIDC._load_image": [[101, 109], ["cv2.imread", "frame_input_path.exists", "Exception", "str"], "methods", ["None"], ["", "def", "_load_image", "(", "self", ",", "frame_input_path", ")", ":", "\n", "\n", "        ", "if", "not", "frame_input_path", ".", "exists", "(", ")", ":", "\n", "            ", "raise", "Exception", "(", "f'Image does not exist: {frame_input_path}'", ")", "\n", "\n", "", "image", "=", "cv2", ".", "imread", "(", "str", "(", "frame_input_path", ")", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes35.Cityscapes35.__init__": [[16, 23], ["torchvision.datasets.Cityscapes.__init__", "mode.lower"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "mode", ",", "\n", "transform", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "Cityscapes35", ",", "self", ")", ".", "__init__", "(", "target_type", "=", "\"semantic\"", ",", "mode", "=", "\"fine\"", ",", "split", "=", "mode", ".", "lower", "(", ")", ",", "transform", "=", "transform", ",", "target_transform", "=", "transform", ",", "root", "=", "personal_constants", ".", "CITYSCAPES_PATH", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes35.Cityscapes35.__getitem__": [[24, 57], ["Cityscapes35.Cityscapes35._load_image", "enumerate", "targets.append", "tuple", "Cityscapes35.Cityscapes35.transform", "Cityscapes35.Cityscapes35._load_json", "Cityscapes35.Cityscapes35._load_image", "len"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes35.Cityscapes35._load_image", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes35.Cityscapes35._load_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is a tuple of all target types if target_type is a list with more\n            than one item. Otherwise target is a json object if target_type=\"polygon\", else the image segmentation.\n        \"\"\"", "\n", "\n", "image", "=", "self", ".", "_load_image", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "\n", "targets", "=", "[", "]", "\n", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "self", ".", "target_type", ")", ":", "\n", "            ", "if", "t", "==", "'polygon'", ":", "\n", "                ", "raise", "Exception", "\n", "target", "=", "self", ".", "_load_json", "(", "self", ".", "targets", "[", "index", "]", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "target", "=", "self", ".", "_load_image", "(", "self", ".", "targets", "[", "index", "]", "[", "i", "]", ")", "\n", "\n", "", "targets", ".", "append", "(", "target", ")", "\n", "\n", "", "target", "=", "tuple", "(", "targets", ")", "if", "len", "(", "targets", ")", ">", "1", "else", "targets", "[", "0", "]", "\n", "\n", "sample", "=", "{", "\n", "'image'", ":", "image", ",", "\n", "'label'", ":", "target", "\n", "}", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes35.Cityscapes35._load_image": [[59, 64], ["cv2.imread"], "methods", ["None"], ["", "def", "_load_image", "(", "self", ",", "frame_input_path", ":", "Path", ")", "->", "np", ".", "ndarray", ":", "\n", "\n", "        ", "image", "=", "cv2", ".", "imread", "(", "frame_input_path", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.__init__.all_file_paths": [[1, 3], ["sorted", "path.iterdir", "p.is_dir"], "function", ["None"], [""]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__init__": [[14, 35], ["Cityscapes19.Cityscapes19.all_file_paths", "Cityscapes19.Cityscapes19.all_file_paths", "Cityscapes19.Cityscapes19.all_file_paths", "len", "print", "mode.lower"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.all_file_paths", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.all_file_paths", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.all_file_paths"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "mode", ",", "\n", "transform", "=", "None", ",", "\n", ")", ":", "\n", "\n", "            ", "self", ".", "mode", "=", "mode", "\n", "\n", "data_path", "=", "personal_constants", ".", "CITYSCAPES_PATH", "/", "\"processed\"", "/", "mode", ".", "lower", "(", ")", "\n", "\n", "assert", "mode", "in", "[", "\"train\"", ",", "\"test\"", ",", "\n", "\"val\"", "]", ",", "'Incorrect dataset mode. Accepted modes include: \"train\", \"test\" or \"val\"'", "\n", "\n", "self", ".", "_all_imgs", "=", "self", ".", "all_file_paths", "(", "data_path", ",", "type", "=", "\"image\"", ")", "\n", "self", ".", "_all_labels", "=", "self", ".", "all_file_paths", "(", "data_path", ",", "type", "=", "\"label\"", ")", "\n", "self", ".", "_all_bb_preds", "=", "self", ".", "all_file_paths", "(", "data_path", ",", "type", "=", "\"bb_pred\"", ")", "\n", "\n", "self", ".", "_n_images", "=", "len", "(", "self", ".", "_all_imgs", ")", "\n", "print", "(", "f'n images in {mode} dataset: {self._n_images}'", ")", "\n", "\n", "self", ".", "_transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19._sum": [[36, 41], ["len", "list", "video_path.iterdir"], "methods", ["None"], ["", "def", "_sum", "(", "self", ",", "video_path", ")", ":", "\n", "\n", "        ", "sum_imgs", "=", "len", "(", "list", "(", "(", "video_path", ".", "iterdir", "(", ")", ")", ")", ")", "\n", "\n", "return", "sum_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__len__": [[42, 44], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_n_images", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.__getitem__": [[45, 77], ["numpy.moveaxis", "Cityscapes19.Cityscapes19._load_array", "numpy.repeat", "numpy.where", "Cityscapes19.Cityscapes19._load_array", "numpy.repeat", "Cityscapes19.Cityscapes19.encode_bb_pred", "Cityscapes19.Cityscapes19._load_array", "Cityscapes19.Cityscapes19._transform", "str().split", "str().split", "str", "str"], "methods", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19._load_array", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19._load_array", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.encode_bb_pred", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19._load_array"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "assert", "str", "(", "self", ".", "_all_imgs", "[", "index", "]", ")", ".", "split", "(", "\"_leftImg8bit\"", ")", "[", "0", "]", "==", "str", "(", "self", ".", "_all_labels", "[", "index", "]", ")", ".", "split", "(", "\"_gtFine_trainIds\"", ")", "[", "0", "]", ",", "\"Images and Labels are not aligned\"", "\n", "\n", "image", "=", "np", ".", "moveaxis", "(", "self", ".", "_load_array", "(", "self", ".", "_all_imgs", "[", "index", "]", ")", ",", "0", ",", "-", "1", ")", "\n", "\n", "label", "=", "self", ".", "_load_array", "(", "self", ".", "_all_labels", "[", "index", "]", ")", "\n", "label", "[", "label", "==", "255", "]", "=", "24", "\n", "label", "=", "np", ".", "repeat", "(", "a", "=", "label", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "repeats", "=", "[", "3", "]", ",", "axis", "=", "2", ")", "\n", "unlabelled_idxs", "=", "np", ".", "where", "(", "label", "==", "24", ")", "\n", "\n", "bb_pred", "=", "self", ".", "_load_array", "(", "self", ".", "_all_bb_preds", "[", "index", "]", ")", "\n", "bb_pred", "=", "np", ".", "repeat", "(", "a", "=", "bb_pred", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "repeats", "=", "[", "3", "]", ",", "axis", "=", "2", ")", "\n", "masked_bb_pred", "=", "self", ".", "encode_bb_pred", "(", "bb_pred", ")", "\n", "masked_bb_pred", "[", "unlabelled_idxs", "]", "=", "24", "# classify unlabelled pixels as such", "\n", "\n", "sample", "=", "{", "\n", "'image'", ":", "image", ",", "\n", "'label'", ":", "label", ",", "\n", "'bb_preds'", ":", "masked_bb_pred", "\n", "}", "\n", "\n", "if", "self", ".", "_transform", ":", "\n", "            ", "sample", "=", "self", ".", "_transform", "(", "sample", ")", "\n", "\n", "\n", "", "assert", "sample", "[", "'image'", "]", ".", "shape", "[", "0", "]", "==", "3", ",", "f\"\\nImage shape post transform = {sample['image'].shape}. Image shape pre-transform = {image.shape}. Image path = {self._all_imgs[index]} \\nLabel shape post transform = {sample['label'].shape}. Label shape pre-transform = {label.shape}. Label path = {self._all_labels[index]}\"", "\n", "if", "self", ".", "mode", "==", "\"train\"", ":", "\n", "            ", "assert", "sample", "[", "'label'", "]", ".", "shape", "[", "0", "]", "==", "25", ",", "f\"\\nLabel shape post transform = {sample['label'].shape}. Label shape pre-transform = {label.shape}. Label path = {self._all_labels[index]} \\nImage shape post transform = {sample['image'].shape}. Image shape pre-transform = {image.shape}. Image path = {self._all_imgs[index]}\"", "\n", "\n", "\n", "", "return", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.all_file_paths": [[79, 98], ["path.iterdir", "sorted", "city.iterdir", "str", "sorted.append"], "methods", ["None"], ["", "def", "all_file_paths", "(", "self", ",", "path", ",", "type", ")", ":", "\n", "        ", "all_files", "=", "[", "]", "\n", "if", "type", "==", "\"image\"", ":", "\n", "            ", "s", "=", "\"leftImg8bit\"", "\n", "", "elif", "type", "==", "\"label\"", ":", "\n", "            ", "s", "=", "\"gtFine_trainIds\"", "\n", "", "elif", "type", "==", "\"bb_pred\"", ":", "\n", "            ", "s", "=", "\"prior_preds_trainIds\"", "\n", "\n", "", "for", "city", "in", "path", ".", "iterdir", "(", ")", ":", "\n", "            ", "if", "type", "==", "\"bb_pred\"", ":", "\n", "                ", "city", "=", "city", "/", "\"bb_preds\"", "\n", "", "for", "p", "in", "city", ".", "iterdir", "(", ")", ":", "\n", "                ", "if", "s", "in", "str", "(", "p", ".", "stem", ")", ":", "\n", "                    ", "all_files", ".", "append", "(", "p", ")", "\n", "\n", "", "", "", "all_files", "=", "sorted", "(", "all_files", ")", "\n", "\n", "return", "all_files", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19._load_array": [[100, 108], ["numpy.load", "frame_input_path.exists", "Exception", "str"], "methods", ["None"], ["", "def", "_load_array", "(", "self", ",", "frame_input_path", ")", ":", "\n", "\n", "        ", "if", "not", "frame_input_path", ".", "exists", "(", ")", ":", "\n", "            ", "raise", "Exception", "(", "f'Image does not exist: {frame_input_path}'", ")", "\n", "\n", "", "array", "=", "np", ".", "load", "(", "str", "(", "frame_input_path", ")", ")", "\n", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.data.Cityscapes19.Cityscapes19.encode_bb_pred": [[109, 119], ["numpy.arange", "numpy.array", "numpy.empty", "numpy.arange.max"], "methods", ["None"], ["", "def", "encode_bb_pred", "(", "self", ",", "bb_pred", ")", ":", "\n", "\n", "        ", "orig_labels", "=", "np", ".", "arange", "(", "-", "1", ",", "34", ")", "\n", "train_labels", "=", "np", ".", "array", "(", "[", "24", ",", "24", ",", "24", ",", "24", ",", "24", ",", "24", ",", "24", ",", "24", ",", "0", ",", "1", ",", "24", ",", "24", ",", "2", ",", "3", ",", "4", ",", "24", ",", "24", ",", "24", ",", "5", ",", "24", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "24", ",", "24", ",", "16", ",", "17", ",", "18", "]", ")", "\n", "\n", "arr", "=", "np", ".", "empty", "(", "orig_labels", ".", "max", "(", ")", "+", "1", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "arr", "[", "orig_labels", "]", "=", "train_labels", "\n", "bb_pred", "=", "arr", "[", "bb_pred", "]", "\n", "\n", "return", "bb_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.cityscapes.preprocessing.resample": [[25, 39], ["int", "int", "img.resize", "float", "float"], "function", ["None"], ["def", "resample", "(", "img", ",", "scale_factor", "=", "1.0", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "\t", "\"\"\"\n\tResample PIL.Image objects.\n\t:param img: PIL.Image object\n\t:param scale_factor: float\n\t:param interpolation: PIL.Image interpoaltion method\n\t:return: PIL.Image object\n\t\"\"\"", "\n", "width", ",", "height", "=", "img", ".", "size", "\n", "basewidth", "=", "width", "*", "scale_factor", "\n", "basewidth", "=", "int", "(", "basewidth", ")", "\n", "wpercent", "=", "(", "basewidth", "/", "float", "(", "width", ")", ")", "\n", "hsize", "=", "int", "(", "(", "float", "(", "height", ")", "*", "wpercent", ")", ")", "\n", "return", "img", ".", "resize", "(", "(", "basewidth", ",", "hsize", ")", ",", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.cityscapes.preprocessing.recursive_mkdir": [[40, 52], ["os.path.join", "os.path.isdir", "os.mkdir"], "function", ["None"], ["", "def", "recursive_mkdir", "(", "nested_dir_list", ")", ":", "\n", "\t", "\"\"\"\n\tMake the full nested path of directories provided. Order in list implies nesting depth.\n\t:param nested_dir_list: list of strings\n\t:return:\n\t\"\"\"", "\n", "nested_dir", "=", "''", "\n", "for", "dir", "in", "nested_dir_list", ":", "\n", "\t\t", "nested_dir", "=", "os", ".", "path", ".", "join", "(", "nested_dir", ",", "dir", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "nested_dir", ")", ":", "\n", "\t\t\t", "os", ".", "mkdir", "(", "nested_dir", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.cityscapes.preprocessing.preprocess": [[53, 100], ["list", "cf.settings.keys", "print", "os.path.join", "os.listdir", "print", "os.path.join", "os.listdir", "tqdm.tqdm", "preprocessing.recursive_mkdir", "os.path.join", "PIL.Image.open", "os.path.join", "numpy.array().astype", "numpy.save", "resample.split", "preprocessing.resample", "numpy.transpose", "os.path.join", "numpy.array", "os.path.join", "PIL.Image.open", "os.path.join", "numpy.save", "preprocessing.resample", "numpy.array().astype", "numpy.array"], "function", ["home.repos.pwc.inspect_result.EliasKassapis_CARSSS.cityscapes.preprocessing.recursive_mkdir", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.cityscapes.preprocessing.resample", "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.cityscapes.preprocessing.resample"], ["", "def", "preprocess", "(", "cf", ")", ":", "\n", "\n", "\t", "for", "set", "in", "list", "(", "cf", ".", "settings", ".", "keys", "(", ")", ")", ":", "\n", "\t\t", "print", "(", "'Processing {} set.'", ".", "format", "(", "set", ")", ")", "\n", "\n", "# image dir", "\n", "image_dir", "=", "os", ".", "path", ".", "join", "(", "cf", ".", "raw_data_dir", ",", "'leftImg8bit'", ",", "set", ")", "\n", "city_names", "=", "os", ".", "listdir", "(", "image_dir", ")", "\n", "\n", "for", "city", "in", "city_names", ":", "\n", "\t\t\t", "print", "(", "'Processing {}'", ".", "format", "(", "city", ")", ")", "\n", "city_dir", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "city", ")", "\n", "image_names", "=", "os", ".", "listdir", "(", "city_dir", ")", "\n", "image_specifiers", "=", "[", "'_'", ".", "join", "(", "img", ".", "split", "(", "'_'", ")", "[", ":", "3", "]", ")", "for", "img", "in", "image_names", "]", "\n", "\n", "for", "img_spec", "in", "tqdm", "(", "image_specifiers", ")", ":", "\n", "\t\t\t\t", "for", "scale", "in", "cf", ".", "settings", "[", "set", "]", "[", "'resolutions'", "]", ":", "\n", "# recursive_mkdir([cf.out_dir, resolution_map[scale], set, city])", "\n", "\t\t\t\t\t", "recursive_mkdir", "(", "[", "cf", ".", "out_dir", ",", "'processed'", ",", "set", ",", "city", "]", ")", "\n", "\n", "\n", "# image", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "city_dir", ",", "img_spec", "+", "'_leftImg8bit.png'", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "if", "scale", "!=", "1.0", ":", "\n", "\t\t\t\t\t\t", "img", "=", "resample", "(", "img", ",", "scale_factor", "=", "scale", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", "\n", "# img_out_path = os.path.join(cf.out_dir, resolution_map[scale], set, city, img_spec + '_leftImg8bit.npy')", "\n", "", "img_out_path", "=", "os", ".", "path", ".", "join", "(", "cf", ".", "out_dir", ",", "'processed'", ",", "set", ",", "city", ",", "img_spec", "+", "'_leftImg8bit.npy'", ")", "\n", "img_arr", "=", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "channel_axis", "=", "0", "if", "img_arr", ".", "shape", "[", "0", "]", "==", "3", "else", "2", "\n", "if", "cf", ".", "data_format", "==", "'NCHW'", "and", "channel_axis", "!=", "0", ":", "\n", "\t\t\t\t\t\t", "img_arr", "=", "np", ".", "transpose", "(", "img_arr", ",", "axes", "=", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "", "np", ".", "save", "(", "img_out_path", ",", "img_arr", ")", "\n", "\n", "# labels", "\n", "for", "label_density", "in", "cf", ".", "settings", "[", "set", "]", "[", "'label_densities'", "]", ":", "\n", "\t\t\t\t\t\t", "label_dir", "=", "os", ".", "path", ".", "join", "(", "cf", ".", "raw_data_dir", ",", "label_density", ",", "set", ",", "city", ")", "\n", "for", "mod", "in", "cf", ".", "settings", "[", "set", "]", "[", "'label_modalities'", "]", ":", "\n", "\t\t\t\t\t\t\t", "label_spec", "=", "img_spec", "+", "'_{}_{}'", ".", "format", "(", "label_density", ",", "mod", ")", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "label_dir", ",", "label_spec", "+", "'.png'", ")", "\n", "label", "=", "Image", ".", "open", "(", "label_path", ")", "\n", "if", "scale", "!=", "1.0", ":", "\n", "\t\t\t\t\t\t\t\t", "label", "=", "resample", "(", "label", ",", "scale_factor", "=", "scale", ",", "interpolation", "=", "Image", ".", "NEAREST", ")", "\n", "# label_out_path = os.path.join(cf.out_dir, resolution_map[scale], set, city, label_spec + '.npy')", "\n", "", "label_out_path", "=", "os", ".", "path", ".", "join", "(", "cf", ".", "out_dir", ",", "'processed'", ",", "set", ",", "city", ",", "label_spec", "+", "'.npy'", ")", "\n", "np", ".", "save", "(", "label_out_path", ",", "np", ".", "array", "(", "label", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.cityscapes.move_bb_preds.move_bb_preds": [[5, 12], ["source_path.iterdir", "shutil.rmtree", "set.iterdir", "shutil.move", "str", "str"], "function", ["None"], ["def", "move_bb_preds", "(", "source_path", ",", "target_path", ")", ":", "\n", "    ", "for", "set", "in", "source_path", ".", "iterdir", "(", ")", ":", "\n", "        ", "for", "city", "in", "set", ".", "iterdir", "(", ")", ":", "\n", "            ", "t_dir", "=", "target_path", "/", "set", ".", "stem", "/", "city", ".", "stem", "\n", "shutil", ".", "move", "(", "str", "(", "city", "/", "\"bb_preds\"", ")", ",", "str", "(", "t_dir", "/", "\"bb_preds\"", ")", ")", "\n", "\n", "", "", "shutil", ".", "rmtree", "(", "source_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EliasKassapis_CARSSS.cityscapes.move_bb_preds.get_test_set": [[13, 22], ["train_path.iterdir", "shutil.move", "str", "str"], "function", ["None"], ["", "def", "get_test_set", "(", "data_path", ")", ":", "\n", "    ", "train_path", "=", "data_path", "/", "\"train\"", "\n", "\n", "for", "city", "in", "train_path", ".", "iterdir", "(", ")", ":", "\n", "# print(city)", "\n", "        ", "if", "city", ".", "stem", "in", "[", "\"monchengladbach\"", ",", "\"ulm\"", ",", "\"darmstadt\"", "]", ":", "\n", "            ", "t_dir", "=", "data_path", "/", "\"test\"", "/", "city", ".", "stem", "\n", "# t_dir.mkdir(parents=True, exist_ok=True)", "\n", "shutil", ".", "move", "(", "str", "(", "city", ")", ",", "str", "(", "t_dir", ")", ")", "\n", "\n"]]}