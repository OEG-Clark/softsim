{"home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.info.Info.__init__": [[7, 44], ["os.getcwd", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "info.Info.load_DocRED"], "methods", ["home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.info.Info.load_DocRED"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "self", ".", "DEVICE_CPU", "=", "'cpu'", "\n", "self", ".", "DEVICE_GPU", "=", "'cuda:0'", "\n", "\n", "self", ".", "MARKER_ENTITY", "=", "'*'", "\n", "self", ".", "EXTREME_SMALL_POSI", "=", "1e-10", "\n", "self", ".", "EXTREME_SMALL_NEGA", "=", "-", "1e10", "\n", "\n", "self", ".", "TASK_RE", "=", "'RE'", "\n", "self", ".", "TASK_CR", "=", "'CR'", "\n", "self", ".", "TASK_ET", "=", "'ET'", "\n", "self", ".", "TASK_PER", "=", "'PER'", "\n", "self", ".", "TASK_FER", "=", "'FER'", "\n", "\n", "self", ".", "STAGE_PREPARE", "=", "'Prepare'", "\n", "self", ".", "STAGE_MAIN", "=", "'Main'", "\n", "\n", "self", ".", "INFER_ROUND_FIRST", "=", "'First'", "\n", "self", ".", "INFER_ROUND_FER", "=", "'FER'", "\n", "self", ".", "INFER_ROUND_MASK", "=", "'Mask'", "\n", "self", ".", "INFER_ROUND_DOC", "=", "'Doc'", "\n", "self", ".", "INFER_ROUND_BLEND", "=", "'Blend'", "\n", "\n", "self", ".", "DATASET", "=", "args", ".", "dataset", "\n", "self", ".", "DIR_CURR", "=", "os", ".", "getcwd", "(", ")", "\n", "self", ".", "DIR_DATA", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_CURR", ",", "'../Data'", ")", "\n", "self", ".", "DIR_DATASET", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATA", ",", "self", ".", "DATASET", ")", "\n", "self", ".", "DIR_DATASET_ORI", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET", ",", "'Original'", ")", "\n", "self", ".", "DIR_DATASET_PRO", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET", ",", "'Processed'", ")", "\n", "self", ".", "DIR_DATASET_STD", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET", ",", "'Stdout'", ")", "\n", "\n", "self", ".", "FILE_STDOUT", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET_STD", ",", "f'stdout_{args.stage}.txt'", ")", "\n", "self", ".", "FILE_MODEL", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET_PRO", ",", "f'model.pt'", ")", "\n", "\n", "if", "self", ".", "DATASET", "==", "'DocRED'", ":", "\n", "            ", "self", ".", "load_DocRED", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.info.Info.load_DocRED": [[46, 87], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "json.load", "json.load", "json.load", "os.path.join", "os.path.join", "len", "len", "open", "open", "open", "os.path.join", "os.path.join", "info.Info.DATA_NER2ID.items", "info.Info.DATA_REL2ID.items", "os.path.join"], "methods", ["None"], ["", "", "def", "load_DocRED", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "MODE_TRAIN", "=", "'train_annotated'", "\n", "self", ".", "MODE_DEV", "=", "'dev'", "\n", "self", ".", "MODE_TEST", "=", "'test'", "\n", "\n", "self", ".", "FILE_CORPUS_TRAIN", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET_ORI", ",", "f'{self.MODE_TRAIN}.json'", ")", "\n", "self", ".", "FILE_CORPUS_DEV", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET_ORI", ",", "f'{self.MODE_DEV}.json'", ")", "\n", "self", ".", "FILE_CORPUS_TEST", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET_ORI", ",", "f'{self.MODE_TEST}.json'", ")", "\n", "self", ".", "FILE_CORPUSES", "=", "{", "self", ".", "MODE_TRAIN", ":", "self", ".", "FILE_CORPUS_TRAIN", ",", "self", ".", "MODE_DEV", ":", "self", ".", "FILE_CORPUS_DEV", ",", "self", ".", "MODE_TEST", ":", "self", ".", "FILE_CORPUS_TEST", "}", "\n", "\n", "self", ".", "FILE_INPUT_TRAIN", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET_PRO", ",", "f'{self.MODE_TRAIN}_inputs.pkl'", ")", "\n", "self", ".", "FILE_INPUT_DEV", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET_PRO", ",", "f'{self.MODE_DEV}_inputs.pkl'", ")", "\n", "self", ".", "FILE_INPUT_TEST", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET_PRO", ",", "f'{self.MODE_TEST}_inputs.pkl'", ")", "\n", "self", ".", "FILE_INPUTS", "=", "{", "self", ".", "MODE_TRAIN", ":", "self", ".", "FILE_INPUT_TRAIN", ",", "self", ".", "MODE_DEV", ":", "self", ".", "FILE_INPUT_DEV", ",", "self", ".", "MODE_TEST", ":", "self", ".", "FILE_INPUT_TEST", "}", "\n", "\n", "self", ".", "FILE_RESULT_TRAIN", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET_PRO", ",", "f'{self.MODE_TRAIN}_results'", ")", "\n", "self", ".", "FILE_RESULT_DEV", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET_PRO", ",", "f'{self.MODE_DEV}_results'", ")", "\n", "self", ".", "FILE_RESULT_TEST", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET_PRO", ",", "f'{self.MODE_TEST}_results'", ")", "\n", "self", ".", "FILE_RESULTS", "=", "{", "self", ".", "MODE_TRAIN", ":", "self", ".", "FILE_RESULT_TRAIN", ",", "self", ".", "MODE_DEV", ":", "self", ".", "FILE_RESULT_DEV", ",", "self", ".", "MODE_TEST", ":", "self", ".", "FILE_RESULT_TEST", "}", "\n", "\n", "self", ".", "FILE_TRUTH_TRAIN", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET_PRO", ",", "f'{self.MODE_TRAIN}_truth.pkl'", ")", "\n", "self", ".", "FILE_TRUTH_DEV", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET_PRO", ",", "f'{self.MODE_DEV}_truth.pkl'", ")", "\n", "self", ".", "FILE_TRUTHS", "=", "{", "self", ".", "MODE_TRAIN", ":", "self", ".", "FILE_TRUTH_TRAIN", ",", "self", ".", "MODE_DEV", ":", "self", ".", "FILE_TRUTH_DEV", "}", "\n", "\n", "self", ".", "FILE_DEV_IN_TRAIN", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET_PRO", ",", "'dev_in_train.pkl'", ")", "\n", "self", ".", "FILE_DEV_INS", "=", "{", "self", ".", "MODE_TRAIN", ":", "self", ".", "FILE_DEV_IN_TRAIN", "}", "\n", "\n", "self", ".", "DATA_NER2ID", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET_ORI", ",", "'ner2id.json'", ")", ",", "'r'", ")", ")", "\n", "self", ".", "DATA_REL2ID", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET_ORI", ",", "'rel2id.json'", ")", ",", "'r'", ")", ")", "\n", "self", ".", "DATA_ID2NER", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "DATA_NER2ID", ".", "items", "(", ")", "}", "\n", "self", ".", "DATA_ID2REL", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "DATA_REL2ID", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "DATA_NER2WORD", "=", "{", "'BLANK'", ":", "'blank'", ",", "'ORG'", ":", "'organization'", ",", "'LOC'", ":", "'location'", ",", "'TIME'", ":", "'time'", ",", "'PER'", ":", "'person'", ",", "'MISC'", ":", "'miscellanea'", ",", "'NUM'", ":", "'number'", "}", "\n", "self", ".", "DATA_REL2WORD", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET_ORI", ",", "'rel_info.json'", ")", ",", "'r'", ")", ")", "\n", "self", ".", "DATA_NER2VEC", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET_PRO", ",", "'ner2vec.npy'", ")", "\n", "self", ".", "DATA_REL2VEC", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DIR_DATASET_PRO", ",", "'rel2vec.npy'", ")", "\n", "\n", "self", ".", "ID_REL_THRE", "=", "self", ".", "DATA_REL2ID", "[", "'Na'", "]", "\n", "self", ".", "NUM_NER", "=", "len", "(", "self", ".", "DATA_NER2ID", ")", "\n", "self", ".", "NUM_REL", "=", "len", "(", "self", ".", "DATA_REL2ID", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.main.parse_args": [[20, 54], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.prepare.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--stage'", ",", "type", "=", "str", ",", "default", "=", "'Main'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'DocRED'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "66", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--transformer'", ",", "type", "=", "str", ",", "default", "=", "'bert-base-cased'", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_size'", ",", "type", "=", "int", ",", "default", "=", "768", ")", "\n", "parser", ".", "add_argument", "(", "'--bilinear_block_size'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--RE_max'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "'--CR_focal_gamma'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--PER_focal_gamma'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--FER_threshold'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--loss_weight_CR'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--loss_weight_ET'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--loss_weight_PER'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--loss_weight_FER'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num_epoch'", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "'--update_freq'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--new_lr'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained_lr'", ",", "type", "=", "float", ",", "default", "=", "5e-5", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_ratio'", ",", "type", "=", "float", ",", "default", "=", "0.06", ")", "\n", "parser", ".", "add_argument", "(", "'--max_grad_norm'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.main.train": [[56, 82], ["util.myprint", "util.myprint", "model.train", "optimizer.zero_grad", "set", "math.ceil", "enumerate", "util.myprint", "util.prepare_batch_train", "model", "len", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "optimizer.zero_grad", "scheduler.step", "util.myprint", "model.parameters", "batch_loss.item"], "function", ["home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.main.train", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.prepare_batch_train", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint"], ["", "def", "train", "(", "args", ",", "info", ",", "idx_epoch", ",", "inputs_train", ",", "model", ",", "optimizer", ",", "scheduler", ")", ":", "\n", "\n", "    ", "myprint", "(", "f'Start Training Epoch {idx_epoch}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "'-'", "*", "20", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "batch_tasks", "=", "set", "(", "[", "info", ".", "TASK_RE", ",", "info", ".", "TASK_CR", ",", "info", ".", "TASK_ET", ",", "info", ".", "TASK_PER", ",", "info", ".", "TASK_FER", "]", ")", "\n", "\n", "num_batch", "=", "math", ".", "ceil", "(", "len", "(", "inputs_train", ")", "/", "args", ".", "batch_size", ")", "\n", "report_batch", "=", "num_batch", "//", "5", "\n", "for", "idx_batch", ",", "batch_inputs", "in", "enumerate", "(", "prepare_batch_train", "(", "info", ",", "inputs_train", ",", "args", ".", "batch_size", ")", ")", ":", "\n", "\n", "        ", "batch_loss", ",", "_", ",", "=", "model", "(", "batch_tasks", ",", "batch_inputs", ",", "to_evaluate", "=", "True", ",", "to_predict", "=", "False", ")", "\n", "(", "batch_loss", "/", "args", ".", "update_freq", ")", ".", "backward", "(", ")", "\n", "\n", "if", "(", "idx_batch", "+", "1", ")", "%", "args", ".", "update_freq", "==", "0", "or", "idx_batch", "+", "1", "==", "num_batch", ":", "\n", "            ", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "max_grad_norm", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "if", "idx_batch", "%", "report_batch", "==", "0", ":", "\n", "            ", "myprint", "(", "f'Finish Training Epoch {idx_epoch} | Report Batch {idx_batch//report_batch} | Loss {batch_loss.item():.4f}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "", "", "myprint", "(", "'-'", "*", "20", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.main.test": [[84, 299], ["util.myprint", "util.myprint", "util.myprint", "model.eval", "util.myprint", "all_first_predictions[].flatten", "all_first_predictions[].flatten.abs().argsort", "all_logits[].abs().item", "all_first_predictions.abs().lt", "collections.defaultdict", "zip", "util.myprint", "model.eval", "collections.defaultdict", "zip", "util.myprint", "model.eval", "json.load", "util.myprint", "collections.defaultdict.items", "util.myprint", "model.eval", "util.myprint", "all_first_predictions.expand().clone", "enumerate", "blend", "set", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.cat().bool", "torch.cat().bool", "torch.cat().bool", "torch.cat().bool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "util.cal_f1", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "mask.nonzero().flatten().tolist", "set", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "FER_prediction.gt().nonzero().flatten().tolist", "set", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "open", "set", "enumerate", "enumerate", "torch.Tensor().int", "torch.Tensor().int", "torch.Tensor().int", "torch.Tensor().int", "collections.defaultdict", "eids2rids.items", "set", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "zip", "mask.nonzero().flatten().tolist", "torch.binary_cross_entropy_with_logits", "optim.LBFGS.zero_grad", "F.binary_cross_entropy_with_logits.backward", "all_relations.bool.float().to", "all_first_predictions.expand().clone.to", "all_first_predictions.abs().lt.to", "torch.Parameter", "torch.LBFGS", "optim.LBFGS.step", "all_shifts.detach.detach", "all_relations.bool.bool", "util.myprint", "util.cal_f1", "util.cal_f1", "util.cal_f1", "util.cal_f1", "util.myprint", "util.myprint", "util.myprint", "util.myprint", "util.cal_f1", "util.cal_f1", "util.cal_f1", "util.myprint", "util.myprint", "util.myprint", "util.myprint", "model.loss_module.pred_RE_results", "collections.defaultdict", "zip", "util.myprint", "model.eval", "util.myprint", "util.evaluate", "util.prepare_batch_test", "model", "util.feed_batch", "all_relations.bool.append", "all_first_predictions.append", "model.loss_module.pred_RE_results", "util.myprint", "all_first_predictions[].flatten.abs", "all_relations[].flatten", "all_first_predictions[].flatten.gt", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "all_logits[].abs", "all_first_predictions.abs", "rej_lowest_confs[].unsqueeze", "all_first_predictions.abs().le", "collections.defaultdict", "util.prepare_batch_test", "model", "util.feed_batch", "collections.defaultdict", "len", "[].append", "util.prepare_batch_test", "model", "util.feed_batch", "enumerate", "set", "collections.defaultdict", "set", "set", "enumerate", "collections.defaultdict", "enumerate", "tokenizer.convert_tokens_to_ids", "tokenizer.build_inputs_with_special_tokens", "torch.Tensor().int.extend", "len", "prepare.DocInput", "util.prepare_batch_test", "model", "util.feed_batch", "enumerate", "enumerate", "all_first_predictions.expand", "blend", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "[].gt", "[].gt", "[].gt", "[].gt", "model.loss_module.pred_RE_results", "model.loss_module.pred_RE_results", "model.loss_module.pred_RE_results", "pred.nonzero().flatten().tolist", "set", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "all_results.sum", "all_results[].cumsum", "x.max", "all_first_predictions.abs", "mask.nonzero().flatten", "FER_prediction.gt().nonzero().flatten", "wid2eids[].add", "start_wids.add", "end_wids.add", "tokenizer.tokenize", "tokenizer.build_inputs_with_special_tokens.extend", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "mask.nonzero().flatten", "all_relations.bool.float", "collections.defaultdict", "util.prepare_batch_test", "model", "util.feed_batch", "x.min", "minmax_normalize().square", "minmax_normalize().square", "all_first_predictions.abs", "len", "len", "shifts.expand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "pred.nonzero().flatten", "mask.nonzero", "FER_prediction.gt().nonzero", "mask.nonzero", "minmax_normalize", "minmax_normalize", "eid2tids[].add", "pred.nonzero", "FER_prediction.gt", "int", "len", "len"], "function", ["home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.cal_f1", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.cal_f1", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.cal_f1", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.cal_f1", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.cal_f1", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.cal_f1", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.cal_f1", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.cal_f1", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.pred_RE_results", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.evaluate", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.prepare_batch_test", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.feed_batch", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.pred_RE_results", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.prepare_batch_test", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.feed_batch", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.prepare_batch_test", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.feed_batch", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.prepare_batch_test", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.feed_batch", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.pred_RE_results", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.pred_RE_results", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.pred_RE_results", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.prepare_batch_test", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.feed_batch"], ["", "def", "test", "(", "args", ",", "info", ",", "mode", ",", "inputs", ",", "tokenizer", ",", "model", ",", "if_final", "=", "False", ",", "rej_rate", "=", "0", ",", "all_shifts", "=", "None", ")", ":", "\n", "\n", "    ", "myprint", "(", "f'Start Testing {mode}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "'-'", "*", "20", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "batch_tasks", ",", "batch_size", ",", "infer_round", "=", "set", "(", "[", "info", ".", "TASK_RE", "]", ")", ",", "args", ".", "batch_size", ",", "info", ".", "INFER_ROUND_FIRST", "\n", "myprint", "(", "f'Start {infer_round} Round of Inference'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "all_triplets", ",", "all_relations", ",", "all_first_predictions", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "idx_batch", ",", "batch_inputs", "in", "enumerate", "(", "prepare_batch_test", "(", "info", ",", "inputs", ",", "batch_size", ",", "infer_round", ")", ")", ":", "\n", "\n", "            ", "_", ",", "batch_preds", "=", "model", "(", "batch_tasks", ",", "batch_inputs", ",", "to_evaluate", "=", "False", ",", "to_predict", "=", "True", ")", "\n", "batch_triplets", ",", "batch_relations", ",", "batch_first_predictions", "=", "feed_batch", "(", "info", ",", "batch_inputs", ",", "batch_preds", ",", "infer_round", ")", "\n", "all_triplets", "+=", "batch_triplets", ";", "all_relations", ".", "append", "(", "batch_relations", ")", ";", "all_first_predictions", ".", "append", "(", "batch_first_predictions", ")", "\n", "\n", "", "", "all_relations", ",", "all_first_predictions", "=", "torch", ".", "cat", "(", "all_relations", ")", ".", "bool", "(", ")", ",", "torch", ".", "cat", "(", "all_first_predictions", ")", "\n", "\n", "if", "not", "if_final", ":", "\n", "        ", "all_first_P", ",", "all_first_R", ",", "all_first_F1", "=", "cal_f1", "(", "all_relations", ",", "model", ".", "loss_module", ".", "pred_RE_results", "(", "all_first_predictions", ")", ")", "\n", "\n", "all_first_F1_threshold", "=", "0.62", "\n", "if", "all_first_F1", "<=", "all_first_F1_threshold", ":", "\n", "            ", "myprint", "(", "f'All {info.INFER_ROUND_FIRST} Precision: {all_first_P:.4f} | Recall: {all_first_R:.4f} | F1: {all_first_F1:.4f}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "return", "all_first_F1", "\n", "\n", "", "", "myprint", "(", "f'Identify Rejection Triplets'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "all_logits", "=", "all_first_predictions", "[", ":", ",", "info", ".", "ID_REL_THRE", "+", "1", ":", "]", ".", "flatten", "(", ")", "\n", "all_sorted_indices", "=", "all_logits", ".", "abs", "(", ")", ".", "argsort", "(", ")", "\n", "all_size", "=", "all_sorted_indices", ".", "shape", "[", "0", "]", "\n", "\n", "if", "mode", "==", "info", ".", "MODE_DEV", ":", "\n", "        ", "all_results", "=", "all_relations", "[", ":", ",", "info", ".", "ID_REL_THRE", "+", "1", ":", "]", ".", "flatten", "(", ")", "!=", "all_logits", ".", "gt", "(", "0", ")", "\n", "all_risks", "=", "(", "all_results", ".", "sum", "(", ")", "-", "all_results", "[", "all_sorted_indices", "]", ".", "cumsum", "(", "0", ")", ")", "/", "all_size", "\n", "all_rejects", "=", "torch", ".", "arange", "(", "all_size", ")", "/", "all_size", "\n", "minmax_normalize", "=", "lambda", "x", ":", "(", "x", "-", "x", ".", "min", "(", ")", ")", "/", "x", ".", "max", "(", ")", "\n", "rej_index", "=", "(", "minmax_normalize", "(", "all_risks", ")", ".", "square", "(", ")", "+", "minmax_normalize", "(", "all_rejects", ")", ".", "square", "(", ")", ")", ".", "argmin", "(", ")", "\n", "rej_rate", "=", "rej_index", "/", "all_size", "\n", "\n", "", "rej_threshold", "=", "all_logits", "[", "all_sorted_indices", "[", "int", "(", "rej_rate", "*", "all_size", ")", "]", "]", ".", "abs", "(", ")", ".", "item", "(", ")", "\n", "rej_triplet_masks", "=", "all_first_predictions", ".", "abs", "(", ")", ".", "lt", "(", "rej_threshold", ")", "\n", "rej_triplet_masks", "[", ":", ",", "info", ".", "ID_REL_THRE", "]", "=", "False", "\n", "\n", "rej_max", "=", "10", "\n", "if", "rej_max", ">", "0", ":", "\n", "        ", "rej_lowest_confs", ",", "_", "=", "torch", ".", "topk", "(", "-", "all_first_predictions", ".", "abs", "(", ")", ",", "rej_max", "+", "1", ",", "dim", "=", "1", ")", "\n", "rej_lowest_confs", "=", "-", "rej_lowest_confs", "[", ":", ",", "-", "1", "]", ".", "unsqueeze", "(", "1", ")", "\n", "rej_triplet_masks", "=", "rej_triplet_masks", "&", "all_first_predictions", ".", "abs", "(", ")", ".", "le", "(", "rej_lowest_confs", ")", "\n", "\n", "", "rej_triplets_eids2rid2sids", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "dict", ")", ")", "\n", "for", "(", "doc_title", ",", "eid_i", ",", "eid_j", ")", ",", "mask", "in", "zip", "(", "all_triplets", ",", "rej_triplet_masks", ")", ":", "\n", "        ", "for", "rid", "in", "mask", ".", "nonzero", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", ":", "\n", "            ", "rej_triplets_eids2rid2sids", "[", "doc_title", "]", "[", "(", "eid_i", ",", "eid_j", ")", "]", "[", "rid", "]", "=", "[", "]", "\n", "\n", "", "", "batch_tasks", ",", "batch_size", ",", "infer_round", "=", "set", "(", "[", "info", ".", "TASK_FER", "]", ")", ",", "args", ".", "batch_size", ",", "info", ".", "INFER_ROUND_FER", "\n", "myprint", "(", "f'Start {infer_round} Round of Inference'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "rej_FER_triplets", ",", "rej_FER_predictions", "=", "[", "]", ",", "[", "]", "\n", "for", "idx_batch", ",", "batch_inputs", "in", "enumerate", "(", "prepare_batch_test", "(", "info", ",", "inputs", ",", "batch_size", ",", "infer_round", ",", "preds", "=", "rej_triplets_eids2rid2sids", ")", ")", ":", "\n", "\n", "            ", "_", ",", "batch_preds", "=", "model", "(", "batch_tasks", ",", "batch_inputs", ",", "to_evaluate", "=", "False", ",", "to_predict", "=", "True", ")", "\n", "batch_FER_triplets", ",", "batch_FER_predictions", "=", "feed_batch", "(", "info", ",", "batch_inputs", ",", "batch_preds", ",", "infer_round", ")", "\n", "rej_FER_triplets", "+=", "batch_FER_triplets", ";", "rej_FER_predictions", "+=", "batch_FER_predictions", "\n", "\n", "", "", "rej_triplets_FER2eids2rids", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "list", ")", ")", "\n", "for", "(", "doc_title", ",", "eid_i", ",", "eid_j", ",", "rid", ")", ",", "FER_prediction", "in", "zip", "(", "rej_FER_triplets", ",", "rej_FER_predictions", ")", ":", "\n", "        ", "rej_triplets_eids2rid2sids", "[", "doc_title", "]", "[", "(", "eid_i", ",", "eid_j", ")", "]", "[", "rid", "]", "=", "FER_prediction", "\n", "FER_doc", "=", "FER_prediction", ".", "gt", "(", "args", ".", "FER_threshold", ")", ".", "nonzero", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "if", "len", "(", "FER_doc", ")", ">", "0", ":", "\n", "            ", "rej_triplets_FER2eids2rids", "[", "(", "doc_title", ",", "*", "FER_doc", ")", "]", "[", "(", "eid_i", ",", "eid_j", ")", "]", ".", "append", "(", "rid", ")", "\n", "\n", "", "", "batch_tasks", ",", "batch_size", ",", "infer_round", "=", "set", "(", "[", "info", ".", "TASK_RE", "]", ")", ",", "2", ",", "info", ".", "INFER_ROUND_MASK", "\n", "myprint", "(", "f'Start {infer_round} Round of Inference'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "rej_mask_triplets", ",", "rej_mask_predictions", "=", "[", "]", ",", "[", "]", "\n", "for", "idx_batch", ",", "batch_inputs", "in", "enumerate", "(", "prepare_batch_test", "(", "info", ",", "inputs", ",", "batch_size", ",", "infer_round", ",", "preds", "=", "rej_triplets_eids2rid2sids", ")", ")", ":", "\n", "\n", "            ", "_", ",", "batch_preds", "=", "model", "(", "batch_tasks", ",", "batch_inputs", ",", "to_evaluate", "=", "False", ",", "to_predict", "=", "True", ")", "\n", "batch_mask_triplets", ",", "batch_mask_predictions", "=", "feed_batch", "(", "info", ",", "batch_inputs", ",", "batch_preds", ",", "infer_round", ")", "\n", "rej_mask_triplets", "+=", "batch_mask_triplets", ";", "rej_mask_predictions", "+=", "batch_mask_predictions", "\n", "\n", "", "", "corpus", "=", "json", ".", "load", "(", "open", "(", "info", ".", "FILE_CORPUSES", "[", "mode", "]", ",", "'r'", ")", ")", "\n", "corpus_title2idx", "=", "{", "doc", "[", "'title'", "]", ":", "did", "for", "did", ",", "doc", "in", "enumerate", "(", "corpus", ")", "}", "\n", "myprint", "(", "f'Construct FER Docs for Rejection Triplets'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "rej_triplets_FER_docs", "=", "{", "}", "\n", "for", "FER_title", ",", "eids2rids", "in", "rej_triplets_FER2eids2rids", ".", "items", "(", ")", ":", "\n", "\n", "        ", "doc_title", ",", "FER", "=", "FER_title", "[", "0", "]", ",", "set", "(", "FER_title", "[", "1", ":", "]", ")", "\n", "eids", "=", "set", "(", "[", "eid", "for", "epair", "in", "eids2rids", "for", "eid", "in", "epair", "]", ")", "\n", "doc", "=", "corpus", "[", "corpus_title2idx", "[", "doc_title", "]", "]", "\n", "\n", "wid2eids", ",", "start_wids", ",", "end_wids", "=", "defaultdict", "(", "set", ")", ",", "set", "(", ")", ",", "set", "(", ")", "\n", "for", "eid", ",", "entity", "in", "enumerate", "(", "doc", "[", "'vertexSet'", "]", ")", ":", "\n", "            ", "for", "mid", ",", "mention", "in", "enumerate", "(", "entity", ")", ":", "\n", "                ", "wid2eids", "[", "(", "mention", "[", "'sent_id'", "]", ",", "mention", "[", "'pos'", "]", "[", "0", "]", ")", "]", ".", "add", "(", "eid", ")", "\n", "start_wids", ".", "add", "(", "(", "mention", "[", "'sent_id'", "]", ",", "mention", "[", "'pos'", "]", "[", "0", "]", ")", ")", "\n", "end_wids", ".", "add", "(", "(", "mention", "[", "'sent_id'", "]", ",", "mention", "[", "'pos'", "]", "[", "1", "]", "-", "1", ")", ")", "\n", "\n", "", "", "sid2tids", ",", "eid2tids", ",", "doc_tokens", ",", "sid_", "=", "{", "}", ",", "defaultdict", "(", "set", ")", ",", "[", "]", ",", "0", "\n", "for", "sid", ",", "sent", "in", "enumerate", "(", "doc", "[", "'sents'", "]", ")", ":", "\n", "            ", "if", "sid", "not", "in", "FER", ":", "continue", "\n", "sent_tokens", "=", "[", "]", "\n", "for", "wid", ",", "word", "in", "enumerate", "(", "sent", ")", ":", "\n", "                ", "tokens", "=", "tokenizer", ".", "tokenize", "(", "word", ")", "\n", "if", "(", "sid", ",", "wid", ")", "in", "start_wids", ":", "\n", "                    ", "tokens", "=", "[", "info", ".", "MARKER_ENTITY", "]", "+", "tokens", "\n", "for", "eid", "in", "wid2eids", "[", "(", "sid", ",", "wid", ")", "]", ":", "\n", "                        ", "if", "eid", "in", "eids", ":", "eid2tids", "[", "eid", "]", ".", "add", "(", "len", "(", "doc_tokens", ")", "+", "len", "(", "sent_tokens", ")", "+", "1", ")", "\n", "", "", "if", "(", "sid", ",", "wid", ")", "in", "end_wids", ":", "\n", "                    ", "tokens", "=", "tokens", "+", "[", "info", ".", "MARKER_ENTITY", "]", "\n", "", "sent_tokens", ".", "extend", "(", "tokens", ")", "\n", "", "sent_tokens", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "sent_tokens", ")", "\n", "sent_tokens", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "sent_tokens", ")", "\n", "sid2tids", "[", "sid_", "]", "=", "(", "len", "(", "doc_tokens", ")", ",", "len", "(", "doc_tokens", ")", "+", "len", "(", "sent_tokens", ")", ")", ";", "sid_", "+=", "1", "\n", "doc_tokens", ".", "extend", "(", "sent_tokens", ")", "\n", "", "doc_tokens", "=", "torch", ".", "Tensor", "(", "doc_tokens", ")", ".", "int", "(", ")", "\n", "\n", "eids2rid2sids", "=", "defaultdict", "(", "dict", ")", "\n", "for", "epair", ",", "rids", "in", "eids2rids", ".", "items", "(", ")", ":", "\n", "            ", "if", "epair", "[", "0", "]", "in", "eid2tids", "and", "epair", "[", "1", "]", "in", "eid2tids", ":", "\n", "                ", "for", "rid", "in", "rids", ":", "\n", "                    ", "eids2rid2sids", "[", "epair", "]", "[", "rid", "]", "=", "[", "]", "\n", "\n", "", "", "", "if", "len", "(", "eids2rid2sids", ")", "!=", "0", ":", "\n", "            ", "rej_triplets_FER_docs", "[", "FER_title", "]", "=", "DocInput", "(", "FER_title", ",", "doc_tokens", ",", "sid2tids", ",", "eid2tids", ",", "None", ",", "eids2rid2sids", ")", "\n", "\n", "", "", "batch_tasks", ",", "batch_size", ",", "infer_round", "=", "set", "(", "[", "info", ".", "TASK_RE", "]", ")", ",", "16", ",", "info", ".", "INFER_ROUND_DOC", "\n", "myprint", "(", "f'Start {infer_round} Round of Inference'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "rej_doc_triplets", ",", "rej_doc_predictions", "=", "[", "]", ",", "[", "]", "\n", "for", "idx_batch", ",", "batch_inputs", "in", "enumerate", "(", "prepare_batch_test", "(", "info", ",", "rej_triplets_FER_docs", ",", "batch_size", ",", "infer_round", ")", ")", ":", "\n", "\n", "            ", "_", ",", "batch_preds", "=", "model", "(", "batch_tasks", ",", "batch_inputs", ",", "to_evaluate", "=", "False", ",", "to_predict", "=", "True", ")", "\n", "batch_doc_triplets", ",", "batch_doc_predictions", "=", "feed_batch", "(", "info", ",", "batch_inputs", ",", "batch_preds", ",", "infer_round", ")", "\n", "rej_doc_triplets", "+=", "batch_doc_triplets", ";", "rej_doc_predictions", "+=", "batch_doc_predictions", "\n", "\n", "", "", "myprint", "(", "f'Blend All Rounds of Inference'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "rej_mask_triplet2idx", "=", "{", "triplet", ":", "idx", "for", "idx", ",", "triplet", "in", "enumerate", "(", "rej_mask_triplets", ")", "}", "\n", "rej_doc_triplet2idx", "=", "{", "triplet", ":", "idx", "for", "idx", ",", "triplet", "in", "enumerate", "(", "rej_doc_triplets", ")", "}", "\n", "all_predictions", "=", "all_first_predictions", ".", "expand", "(", "4", ",", "-", "1", ",", "-", "1", ")", ".", "clone", "(", ")", "\n", "for", "idx", ",", "(", "(", "doc_title", ",", "eid_i", ",", "eid_j", ")", ",", "mask", ")", "in", "enumerate", "(", "zip", "(", "all_triplets", ",", "rej_triplet_masks", ")", ")", ":", "\n", "        ", "for", "rid", "in", "mask", ".", "nonzero", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", ":", "\n", "            ", "triplet", "=", "(", "doc_title", ",", "eid_i", ",", "eid_j", ",", "rid", ")", "\n", "all_predictions", "[", "1", ",", "idx", ",", "rid", "]", "=", "rej_mask_predictions", "[", "rej_mask_triplet2idx", "[", "triplet", "]", "]", "\n", "all_predictions", "[", "2", ",", "idx", ",", "rid", "]", "=", "rej_doc_predictions", "[", "rej_doc_triplet2idx", "[", "triplet", "]", "]", "if", "triplet", "in", "rej_doc_triplet2idx", "else", "0", "\n", "\n", "", "", "blend", "=", "lambda", "shifts", ",", "preds", ",", "masks", ":", "(", "(", "preds", "*", "masks", ")", ".", "sum", "(", "0", ")", "-", "shifts", ".", "expand", "(", "preds", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "*", "masks", ")", "[", "masks", "]", "\n", "def", "eval", "(", ")", ":", "\n", "        ", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "blend", "(", "all_shifts", ",", "all_predictions", ",", "rej_triplet_masks", ")", ",", "all_relations", "[", "rej_triplet_masks", "]", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "return", "loss", "\n", "\n", "", "all_relations", ",", "all_predictions", ",", "rej_triplet_masks", "=", "all_relations", ".", "float", "(", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", ",", "all_predictions", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", ",", "rej_triplet_masks", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "if", "all_shifts", "is", "None", ":", "\n", "        ", "all_shifts", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "info", ".", "NUM_REL", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", ")", "\n", "optimizer", "=", "optim", ".", "LBFGS", "(", "[", "all_shifts", "]", ",", "lr", "=", "0.001", ",", "max_iter", "=", "100", ")", "\n", "optimizer", ".", "step", "(", "eval", ")", "\n", "all_shifts", "=", "all_shifts", ".", "detach", "(", ")", "\n", "", "all_predictions", "[", "3", "]", "[", "rej_triplet_masks", "]", "=", "blend", "(", "all_shifts", ",", "all_predictions", ",", "rej_triplet_masks", ")", "\n", "\n", "if", "not", "if_final", ":", "\n", "\n", "        ", "all_relations", "=", "all_relations", ".", "bool", "(", ")", "\n", "myprint", "(", "'-'", "*", "20", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "rej_first_P", ",", "rej_first_R", ",", "rej_first_F1", "=", "cal_f1", "(", "all_relations", "[", "rej_triplet_masks", "]", ",", "all_predictions", "[", "0", "]", "[", "rej_triplet_masks", "]", ".", "gt", "(", "0", ")", ")", "\n", "rej_mask_P", ",", "rej_mask_R", ",", "rej_mask_F1", "=", "cal_f1", "(", "all_relations", "[", "rej_triplet_masks", "]", ",", "all_predictions", "[", "1", "]", "[", "rej_triplet_masks", "]", ".", "gt", "(", "0", ")", ")", "\n", "rej_doc_P", ",", "rej_doc_R", ",", "rej_doc_F1", "=", "cal_f1", "(", "all_relations", "[", "rej_triplet_masks", "]", ",", "all_predictions", "[", "2", "]", "[", "rej_triplet_masks", "]", ".", "gt", "(", "0", ")", ")", "\n", "rej_blend_P", ",", "rej_blend_R", ",", "rej_blend_F1", "=", "cal_f1", "(", "all_relations", "[", "rej_triplet_masks", "]", ",", "all_predictions", "[", "3", "]", "[", "rej_triplet_masks", "]", ".", "gt", "(", "0", ")", ")", "\n", "myprint", "(", "f'Rej {info.INFER_ROUND_FIRST} Precision: {rej_first_P:.4f} | Recall: {rej_first_R:.4f} | F1: {rej_first_F1:.4f}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'Rej {info.INFER_ROUND_MASK} Precision: {rej_mask_P:.4f} | Recall: {rej_mask_R:.4f} | F1: {rej_mask_F1:.4f}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'Rej {info.INFER_ROUND_DOC} Precision: {rej_doc_P:.4f} | Recall: {rej_doc_R:.4f} | F1: {rej_doc_F1:.4f}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'Rej {info.INFER_ROUND_BLEND} Precision: {rej_blend_P:.4f} | Recall: {rej_blend_R:.4f} | F1: {rej_blend_F1:.4f}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "all_mask_P", ",", "all_mask_R", ",", "all_mask_F1", "=", "cal_f1", "(", "all_relations", ",", "model", ".", "loss_module", ".", "pred_RE_results", "(", "all_predictions", "[", "1", "]", ")", ")", "\n", "all_doc_P", ",", "all_doc_R", ",", "all_doc_F1", "=", "cal_f1", "(", "all_relations", ",", "model", ".", "loss_module", ".", "pred_RE_results", "(", "all_predictions", "[", "2", "]", ")", ")", "\n", "all_blend_P", ",", "all_blend_R", ",", "all_blend_F1", "=", "cal_f1", "(", "all_relations", ",", "model", ".", "loss_module", ".", "pred_RE_results", "(", "all_predictions", "[", "3", "]", ")", ")", "\n", "myprint", "(", "f'All {info.INFER_ROUND_FIRST} Precision: {all_first_P:.4f} | Recall: {all_first_R:.4f} | F1: {all_first_F1:.4f}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'All {info.INFER_ROUND_MASK} Precision: {all_mask_P:.4f} | Recall: {all_mask_R:.4f} | F1: {all_mask_F1:.4f}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'All {info.INFER_ROUND_DOC} Precision: {all_doc_P:.4f} | Recall: {all_doc_R:.4f} | F1: {all_doc_F1:.4f}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'All {info.INFER_ROUND_BLEND} Precision: {all_blend_P:.4f} | Recall: {all_blend_R:.4f} | F1: {all_blend_F1:.4f}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "return", "all_blend_F1", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "all_blend_predictions", "=", "model", ".", "loss_module", ".", "pred_RE_results", "(", "all_predictions", "[", "3", "]", ")", "\n", "all_triplets_eids2rid2sids", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "dict", ")", ")", "\n", "for", "(", "doc_title", ",", "eid_i", ",", "eid_j", ")", ",", "pred", "in", "zip", "(", "all_triplets", ",", "all_blend_predictions", ")", ":", "\n", "            ", "for", "rid", "in", "pred", ".", "nonzero", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", ":", "\n", "                ", "all_triplets_eids2rid2sids", "[", "doc_title", "]", "[", "(", "eid_i", ",", "eid_j", ")", "]", "[", "rid", "]", "=", "[", "]", "\n", "\n", "", "", "batch_tasks", ",", "batch_size", ",", "infer_round", "=", "set", "(", "[", "info", ".", "TASK_FER", "]", ")", ",", "args", ".", "batch_size", ",", "info", ".", "INFER_ROUND_FER", "\n", "myprint", "(", "f'Start {infer_round} Round of Inference'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "all_FER_triplets", ",", "all_FER_predictions", "=", "[", "]", ",", "[", "]", "\n", "for", "idx_batch", ",", "batch_inputs", "in", "enumerate", "(", "prepare_batch_test", "(", "info", ",", "inputs", ",", "batch_size", ",", "infer_round", ",", "preds", "=", "all_triplets_eids2rid2sids", ")", ")", ":", "\n", "\n", "                ", "_", ",", "batch_preds", "=", "model", "(", "batch_tasks", ",", "batch_inputs", ",", "to_evaluate", "=", "False", ",", "to_predict", "=", "True", ")", "\n", "batch_FER_triplets", ",", "batch_FER_predictions", "=", "feed_batch", "(", "info", ",", "batch_inputs", ",", "batch_preds", ",", "infer_round", ")", "\n", "all_FER_triplets", "+=", "batch_FER_triplets", ";", "all_FER_predictions", "+=", "batch_FER_predictions", "\n", "\n", "", "", "myprint", "(", "'-'", "*", "20", ",", "info", ".", "FILE_STDOUT", ")", "\n", "evaluate", "(", "args", ",", "info", ",", "mode", ",", "all_FER_triplets", ",", "all_FER_predictions", ")", "\n", "if", "mode", "==", "info", ".", "MODE_DEV", ":", "return", "rej_rate", ",", "all_shifts", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.main.main": [[301, 347], ["main.parse_args", "info.Info", "util.myprint", "util.myprint", "util.myprint", "util.register_hyperparameters_main", "util.myprint", "util.myprint", "util.myprint", "util.set_seed", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "map", "util.prepare_autos", "model.Model().to", "util.prepare_optimizer_scheduler", "range", "Model().to.load_state_dict", "util.myprint", "util.myprint", "main.test", "main.test", "util.myprint", "util.myprint", "len", "main.train", "main.test", "util.myprint", "torch.load", "torch.load", "torch.load", "torch.load", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "dill.load", "model.Model", "torch.save", "torch.save", "torch.save", "torch.save", "util.myprint", "util.myprint", "numpy.load", "open", "Model().to.state_dict"], "function", ["home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.prepare.parse_args", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.register_hyperparameters_main", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.set_seed", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.prepare_autos", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.prepare_optimizer_scheduler", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.main.test", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.main.test", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.main.train", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.main.test", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "info", "=", "Info", "(", "args", ")", "\n", "\n", "myprint", "(", "'='", "*", "20", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'Start {args.stage} {args.dataset}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "'-'", "*", "20", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "register_hyperparameters_main", "(", "args", ",", "info", ")", "\n", "\n", "myprint", "(", "'-'", "*", "20", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "'Initialize Relevant Objects'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "'-'", "*", "20", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "set_seed", "(", "args", ".", "seed", ")", "\n", "rtype_embeddings", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "info", ".", "DATA_REL2VEC", ")", ")", ".", "float", "(", ")", "\n", "inputs_train", ",", "inputs_dev", ",", "inputs_test", "=", "map", "(", "lambda", "x", ":", "pk", ".", "load", "(", "open", "(", "info", ".", "FILE_INPUTS", "[", "x", "]", ",", "'rb'", ")", ")", ",", "[", "info", ".", "MODE_TRAIN", ",", "info", ".", "MODE_DEV", ",", "info", ".", "MODE_TEST", "]", ")", "\n", "\n", "_", ",", "tokenizer", ",", "transformer", "=", "prepare_autos", "(", "args", ",", "info", ")", "\n", "model", "=", "Model", "(", "args", ",", "info", ",", "transformer", ",", "rtype_embeddings", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "optimizer", ",", "scheduler", "=", "prepare_optimizer_scheduler", "(", "args", ",", "len", "(", "inputs_train", ")", ",", "model", ")", "\n", "\n", "best_f1", ",", "best_epoch", "=", "0", ",", "0", "\n", "for", "idx_epoch", "in", "range", "(", "args", ".", "num_epoch", ")", ":", "\n", "\n", "        ", "train", "(", "args", ",", "info", ",", "idx_epoch", ",", "inputs_train", ",", "model", ",", "optimizer", ",", "scheduler", ")", "\n", "epoch_f1", "=", "test", "(", "args", ",", "info", ",", "info", ".", "MODE_DEV", ",", "inputs_dev", ",", "tokenizer", ",", "model", ",", "if_final", "=", "False", ",", "rej_rate", "=", "0", ",", "all_shifts", "=", "None", ")", "\n", "\n", "if", "epoch_f1", ">=", "best_f1", ":", "\n", "            ", "best_f1", ",", "best_epoch", "=", "epoch_f1", ",", "idx_epoch", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "f'{info.FILE_MODEL}'", ")", "\n", "myprint", "(", "f'This is the Best Performing Epoch by far - Epoch {idx_epoch} F1 {epoch_f1:.4f}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "", "else", ":", "\n", "            ", "myprint", "(", "f'Not the Best Performing Epoch by far - Epoch {idx_epoch} F1 {epoch_f1:.4f} vs Best F1 {best_f1:.4f}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "", "myprint", "(", "'-'", "*", "20", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "f'{info.FILE_MODEL}'", ",", "map_location", "=", "info", ".", "DEVICE_GPU", ")", ")", "\n", "myprint", "(", "f'Load the Model from Epoch {best_epoch} with {info.MODE_DEV} F1 {best_f1:.4f}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "'-'", "*", "20", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "rej_rate", ",", "all_shifts", "=", "test", "(", "args", ",", "info", ",", "info", ".", "MODE_DEV", ",", "inputs_dev", ",", "tokenizer", ",", "model", ",", "if_final", "=", "True", ",", "rej_rate", "=", "0", ",", "all_shifts", "=", "None", ")", "\n", "test", "(", "args", ",", "info", ",", "info", ".", "MODE_TEST", ",", "inputs_test", ",", "tokenizer", ",", "model", ",", "if_final", "=", "True", ",", "rej_rate", "=", "rej_rate", ",", "all_shifts", "=", "all_shifts", ")", "\n", "\n", "myprint", "(", "f'Finish {args.stage} {args.dataset}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "'='", "*", "20", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.prepare.DocInput.__init__": [[16, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "title", ",", "doc_tokens", ",", "sid2tids", ",", "eid2tids", ",", "eid2etype", ",", "eids2rid2sids", ")", ":", "\n", "\n", "        ", "self", ".", "title", "=", "title", "\n", "self", ".", "doc_tokens", "=", "doc_tokens", "\n", "self", ".", "sid2tids", "=", "sid2tids", "\n", "\n", "self", ".", "eid2tids", "=", "eid2tids", "\n", "self", ".", "eid2etype", "=", "eid2etype", "\n", "self", ".", "eids2rid2sids", "=", "eids2rid2sids", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.prepare.parse_args": [[27, 37], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.prepare.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--stage'", ",", "type", "=", "str", ",", "default", "=", "'Prepare'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'DocRED'", ")", "\n", "parser", ".", "add_argument", "(", "'--transformer'", ",", "type", "=", "str", ",", "default", "=", "'bert-base-cased'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_seq_length'", ",", "type", "=", "int", ",", "default", "=", "1024", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.prepare.type2vec": [[39, 61], ["range", "torch.pad_sequence().long", "torch.pad_sequence().float", "[].detach", "torch.logsumexp().numpy", "torch.logsumexp().numpy", "len", "type2word.get", "tokenizer.tokenize", "tokenizer.convert_tokens_to_ids", "rnn.pad_sequence().long.append", "rnn.pad_sequence().float.append", "torch.Tensor", "torch.Tensor", "torch.ones", "torch.ones", "torch.pad_sequence", "torch.pad_sequence", "torch.logsumexp", "torch.logsumexp", "len", "transformer", "rnn.pad_sequence().float.bool"], "function", ["None"], ["", "def", "type2vec", "(", "info", ",", "transformer", ",", "tokenizer", ",", "if_etype", "=", "False", ",", "if_rtype", "=", "False", ")", ":", "\n", "\n", "    ", "if", "if_etype", ":", "\n", "        ", "id2type", ",", "type2word", "=", "info", ".", "DATA_ID2NER", ",", "info", ".", "DATA_NER2WORD", "\n", "", "elif", "if_rtype", ":", "\n", "        ", "id2type", ",", "type2word", "=", "info", ".", "DATA_ID2REL", ",", "info", ".", "DATA_REL2WORD", "\n", "\n", "", "type_token_seqs", ",", "type_token_masks", "=", "[", "]", ",", "[", "]", "\n", "for", "type_id", "in", "range", "(", "len", "(", "id2type", ")", ")", ":", "\n", "        ", "words", "=", "type2word", ".", "get", "(", "id2type", "[", "type_id", "]", ",", "'not applicable'", ")", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "words", ")", "\n", "tokens", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "type_token_seqs", ".", "append", "(", "torch", ".", "Tensor", "(", "tokens", ")", ")", "\n", "type_token_masks", ".", "append", "(", "torch", ".", "ones", "(", "len", "(", "tokens", ")", ")", ")", "\n", "\n", "", "type_token_seqs", "=", "rnn", ".", "pad_sequence", "(", "type_token_seqs", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", ".", "long", "(", ")", "\n", "type_token_masks", "=", "rnn", ".", "pad_sequence", "(", "type_token_masks", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", ".", "float", "(", ")", "\n", "type_embeddings", "=", "transformer", "(", "input_ids", "=", "type_token_seqs", ",", "attention_mask", "=", "type_token_masks", ")", "[", "0", "]", ".", "detach", "(", ")", "\n", "type_embeddings", "[", "~", "type_token_masks", ".", "bool", "(", ")", "]", "=", "info", ".", "EXTREME_SMALL_NEGA", "\n", "type_embeddings", "=", "torch", ".", "logsumexp", "(", "type_embeddings", ",", "dim", "=", "1", ")", ".", "numpy", "(", ")", "\n", "\n", "return", "type_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.prepare.prepare_doc_input": [[63, 99], ["enumerate", "enumerate", "torch.Tensor().int", "torch.Tensor().int", "collections.defaultdict", "prepare.DocInput", "collections.defaultdict", "set", "set", "enumerate", "collections.defaultdict", "enumerate", "tokenizer.convert_tokens_to_ids", "tokenizer.build_inputs_with_special_tokens", "torch.Tensor().int.extend", "wid2eids[].add", "start_wids.add", "end_wids.add", "tokenizer.tokenize", "tokenizer.build_inputs_with_special_tokens.extend", "len", "torch.Tensor", "torch.Tensor", "len", "len", "eid2tids[].add", "len", "len"], "function", ["None"], ["", "def", "prepare_doc_input", "(", "args", ",", "info", ",", "tokenizer", ",", "doc", ")", ":", "\n", "\n", "    ", "wid2eids", ",", "start_wids", ",", "end_wids", ",", "eid2etype", "=", "defaultdict", "(", "set", ")", ",", "set", "(", ")", ",", "set", "(", ")", ",", "{", "}", "\n", "for", "eid", ",", "entity", "in", "enumerate", "(", "doc", "[", "'vertexSet'", "]", ")", ":", "\n", "        ", "eid2etype", "[", "eid", "]", "=", "info", ".", "DATA_NER2ID", "[", "entity", "[", "0", "]", "[", "'type'", "]", "]", "\n", "for", "mid", ",", "mention", "in", "enumerate", "(", "entity", ")", ":", "\n", "            ", "wid2eids", "[", "(", "mention", "[", "'sent_id'", "]", ",", "mention", "[", "'pos'", "]", "[", "0", "]", ")", "]", ".", "add", "(", "eid", ")", "\n", "start_wids", ".", "add", "(", "(", "mention", "[", "'sent_id'", "]", ",", "mention", "[", "'pos'", "]", "[", "0", "]", ")", ")", "\n", "end_wids", ".", "add", "(", "(", "mention", "[", "'sent_id'", "]", ",", "mention", "[", "'pos'", "]", "[", "1", "]", "-", "1", ")", ")", "\n", "\n", "", "", "sid2tids", ",", "eid2tids", ",", "doc_tokens", "=", "{", "}", ",", "defaultdict", "(", "set", ")", ",", "[", "]", "\n", "for", "sid", ",", "sent", "in", "enumerate", "(", "doc", "[", "'sents'", "]", ")", ":", "\n", "        ", "sent_tokens", "=", "[", "]", "\n", "for", "wid", ",", "word", "in", "enumerate", "(", "sent", ")", ":", "\n", "            ", "tokens", "=", "tokenizer", ".", "tokenize", "(", "word", ")", "\n", "if", "(", "sid", ",", "wid", ")", "in", "start_wids", ":", "\n", "                ", "tokens", "=", "[", "info", ".", "MARKER_ENTITY", "]", "+", "tokens", "\n", "for", "eid", "in", "wid2eids", "[", "(", "sid", ",", "wid", ")", "]", ":", "\n", "                    ", "eid2tids", "[", "eid", "]", ".", "add", "(", "len", "(", "doc_tokens", ")", "+", "len", "(", "sent_tokens", ")", "+", "1", ")", "\n", "", "", "if", "(", "sid", ",", "wid", ")", "in", "end_wids", ":", "\n", "                ", "tokens", "=", "tokens", "+", "[", "info", ".", "MARKER_ENTITY", "]", "\n", "", "sent_tokens", ".", "extend", "(", "tokens", ")", "\n", "", "sent_tokens", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "sent_tokens", ")", "\n", "sent_tokens", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "sent_tokens", ")", "\n", "sid2tids", "[", "sid", "]", "=", "(", "len", "(", "doc_tokens", ")", ",", "len", "(", "doc_tokens", ")", "+", "len", "(", "sent_tokens", ")", ")", "\n", "doc_tokens", ".", "extend", "(", "sent_tokens", ")", "\n", "", "doc_tokens", "=", "torch", ".", "Tensor", "(", "doc_tokens", ")", ".", "int", "(", ")", "\n", "\n", "eids2rid2sids", "=", "defaultdict", "(", "dict", ")", "\n", "if", "'labels'", "in", "doc", ":", "\n", "        ", "for", "rela", "in", "doc", "[", "'labels'", "]", ":", "\n", "            ", "eids2rid2sids", "[", "(", "rela", "[", "'h'", "]", ",", "rela", "[", "'t'", "]", ")", "]", "[", "info", ".", "DATA_REL2ID", "[", "rela", "[", "'r'", "]", "]", "]", "=", "rela", "[", "'evidence'", "]", "\n", "\n", "", "", "doc_input", "=", "DocInput", "(", "doc", "[", "'title'", "]", ",", "doc_tokens", ",", "sid2tids", ",", "eid2tids", ",", "eid2etype", ",", "eids2rid2sids", ")", "\n", "\n", "return", "doc_input", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.prepare.main": [[101, 159], ["prepare.parse_args", "info.Info", "util.myprint", "util.myprint", "util.myprint", "util.register_hyperparameters_prepare", "util.myprint", "util.prepare_autos", "util.myprint", "util.myprint", "info.Info.FILE_CORPUSES.items", "info.Info.FILE_DEV_INS.items", "util.myprint", "prepare.type2vec", "prepare.type2vec", "numpy.save", "numpy.save", "util.myprint", "util.myprint", "util.myprint", "util.myprint", "collections.defaultdict", "collections.defaultdict", "json.load", "util.myprint", "enumerate", "dill.dump", "util.myprint", "util.myprint", "dill.dump", "open", "prepare.prepare_doc_input", "open", "dill.dump", "open", "util.myprint", "open", "set", "mention_hrts[].add", "dev_ins[].add"], "function", ["home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.prepare.parse_args", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.register_hyperparameters_prepare", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.prepare_autos", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.prepare.type2vec", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.prepare.type2vec", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.prepare.prepare_doc_input", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "info", "=", "Info", "(", "args", ")", "\n", "\n", "myprint", "(", "'='", "*", "20", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'Start {args.stage} {args.dataset}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "'-'", "*", "20", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "register_hyperparameters_prepare", "(", "args", ",", "info", ")", "\n", "myprint", "(", "'-'", "*", "20", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "config", ",", "tokenizer", ",", "transformer", "=", "prepare_autos", "(", "args", ",", "info", ")", "\n", "\n", "myprint", "(", "'Start Preprocessing the Dataset'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "'-'", "*", "20", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "mention_hrts", ",", "dev_ins", "=", "defaultdict", "(", "set", ")", ",", "defaultdict", "(", "set", ")", "\n", "for", "mode", ",", "corpus", "in", "info", ".", "FILE_CORPUSES", ".", "items", "(", ")", ":", "\n", "        ", "corpus", "=", "json", ".", "load", "(", "open", "(", "corpus", ",", "'r'", ")", ")", "\n", "\n", "myprint", "(", "f'Start Constructing Doc Inputs for {mode} Files'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "doc_inputs", ",", "truthes", "=", "{", "}", ",", "{", "}", "\n", "for", "did", ",", "doc", "in", "enumerate", "(", "corpus", ")", ":", "\n", "            ", "doc_inputs", "[", "doc", "[", "'title'", "]", "]", "=", "prepare_doc_input", "(", "args", ",", "info", ",", "tokenizer", ",", "doc", ")", "\n", "\n", "if", "mode", "!=", "info", ".", "MODE_TEST", ":", "\n", "                ", "for", "label", "in", "doc", "[", "'labels'", "]", ":", "\n", "                    ", "truthes", "[", "(", "doc", "[", "'title'", "]", ",", "label", "[", "'h'", "]", ",", "label", "[", "'t'", "]", ",", "label", "[", "'r'", "]", ")", "]", "=", "set", "(", "label", "[", "'evidence'", "]", ")", "\n", "if", "mode", "==", "info", ".", "MODE_TRAIN", ":", "\n", "                        ", "for", "mention_i", "in", "doc", "[", "'vertexSet'", "]", "[", "label", "[", "'h'", "]", "]", ":", "\n", "                            ", "for", "mention_j", "in", "doc", "[", "'vertexSet'", "]", "[", "label", "[", "'t'", "]", "]", ":", "\n", "                                ", "mention_hrts", "[", "mode", "]", ".", "add", "(", "(", "mention_i", "[", "'name'", "]", ",", "mention_j", "[", "'name'", "]", ",", "label", "[", "'r'", "]", ")", ")", "\n", "", "", "", "elif", "mode", "==", "info", ".", "MODE_DEV", ":", "\n", "                        ", "for", "mention_i", "in", "doc", "[", "'vertexSet'", "]", "[", "label", "[", "'h'", "]", "]", ":", "\n", "                            ", "for", "mention_j", "in", "doc", "[", "'vertexSet'", "]", "[", "label", "[", "'t'", "]", "]", ":", "\n", "                                ", "if", "(", "mention_i", "[", "'name'", "]", ",", "mention_j", "[", "'name'", "]", ",", "label", "[", "'r'", "]", ")", "in", "mention_hrts", "[", "info", ".", "MODE_TRAIN", "]", ":", "\n", "                                    ", "dev_ins", "[", "info", ".", "MODE_TRAIN", "]", ".", "add", "(", "(", "doc", "[", "'title'", "]", ",", "label", "[", "'h'", "]", ",", "label", "[", "'t'", "]", ",", "label", "[", "'r'", "]", ")", ")", "\n", "\n", "", "", "", "", "", "", "if", "did", "%", "200", "==", "0", ":", "myprint", "(", "f'Finish Constructing {did} Doc Inputs for {mode} Files'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "", "pk", ".", "dump", "(", "doc_inputs", ",", "open", "(", "info", ".", "FILE_INPUTS", "[", "mode", "]", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "if", "mode", "!=", "info", ".", "MODE_TEST", ":", "pk", ".", "dump", "(", "truthes", ",", "open", "(", "info", ".", "FILE_TRUTHS", "[", "mode", "]", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "myprint", "(", "f'Finish Constructing Doc Inputs for {mode} Files'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "'-'", "*", "20", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "", "for", "mode", ",", "dev_in", "in", "info", ".", "FILE_DEV_INS", ".", "items", "(", ")", ":", "\n", "        ", "pk", ".", "dump", "(", "dev_ins", "[", "mode", "]", ",", "open", "(", "dev_in", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "", "myprint", "(", "f'Finish Preparing dev_ins'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "etype_embeddings", "=", "type2vec", "(", "info", ",", "transformer", ",", "tokenizer", ",", "if_etype", "=", "True", ")", "\n", "rtype_embeddings", "=", "type2vec", "(", "info", ",", "transformer", ",", "tokenizer", ",", "if_rtype", "=", "True", ")", "\n", "np", ".", "save", "(", "info", ".", "DATA_NER2VEC", ",", "etype_embeddings", ")", "\n", "np", ".", "save", "(", "info", ".", "DATA_REL2VEC", ",", "rtype_embeddings", ")", "\n", "myprint", "(", "'Finish Preparing Entity & Relation Type Embeddings'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "'-'", "*", "20", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "myprint", "(", "f'Finish {args.stage} {args.dataset}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "'='", "*", "20", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Transformer.__init__": [[11, 21], ["torch.Module.__init__", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "info", ",", "transformer", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "info", "=", "info", "\n", "self", ".", "transformer", "=", "transformer", "\n", "self", ".", "max_num_tokens", "=", "512", "\n", "\n", "self", ".", "start_token_len", ",", "self", ".", "end_token_len", "=", "1", ",", "1", "\n", "self", ".", "start_token_ids", "=", "torch", ".", "Tensor", "(", "[", "transformer", ".", "config", ".", "cls_token_id", "]", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "self", ".", "end_token_ids", "=", "torch", ".", "Tensor", "(", "[", "transformer", ".", "config", ".", "sep_token_id", "]", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Transformer.forward": [[23, 90], ["batch_token_seqs.size", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "model.Transformer.transformer", "batch_token_masks.sum().int().tolist", "enumerate", "model.Transformer.transformer", "zip", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack().long", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "batch_token_masks.sum().int", "new_token_seqs.append", "new_token_masks.append", "new_token_types.append", "new_token_segs.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "new_token_seqs.extend", "new_token_masks.extend", "new_token_types.extend", "new_token_segs.append", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "new_token_embs.append", "new_token_atts.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "new_token_embs.append", "new_token_atts.append", "batch_token_masks.sum", "batch_token_types[].repeat", "batch_token_types[].repeat", "new_token_mask.unsqueeze", "torch.pad.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_token_seqs", ",", "batch_token_masks", ",", "batch_token_types", ")", ":", "\n", "\n", "        ", "if", "'roberta'", "in", "self", ".", "transformer", ".", "config", ".", "_name_or_path", ":", "batch_token_types", "=", "torch", ".", "zeros_like", "(", "batch_token_types", ")", "\n", "\n", "batch_size", ",", "batch_num_tokens", "=", "batch_token_seqs", ".", "size", "(", ")", "\n", "\n", "if", "batch_num_tokens", "<=", "self", ".", "max_num_tokens", ":", "\n", "            ", "batch_output", "=", "self", ".", "transformer", "(", "input_ids", "=", "batch_token_seqs", ",", "attention_mask", "=", "batch_token_masks", ",", "token_type_ids", "=", "batch_token_types", ",", "output_attentions", "=", "True", ")", "\n", "batch_token_embs", ",", "batch_token_atts", "=", "batch_output", "[", "0", "]", ",", "batch_output", "[", "-", "1", "]", "[", "-", "1", "]", "\n", "\n", "", "else", ":", "\n", "            ", "new_token_seqs", ",", "new_token_masks", ",", "new_token_types", ",", "new_token_segs", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "real_num_tokens", "=", "batch_token_masks", ".", "sum", "(", "1", ")", ".", "int", "(", ")", ".", "tolist", "(", ")", "\n", "for", "doc_id", ",", "real_num_token", "in", "enumerate", "(", "real_num_tokens", ")", ":", "\n", "                ", "if", "real_num_token", "<=", "self", ".", "max_num_tokens", ":", "\n", "                    ", "new_token_seqs", ".", "append", "(", "batch_token_seqs", "[", "doc_id", ",", ":", "self", ".", "max_num_tokens", "]", ")", "\n", "new_token_masks", ".", "append", "(", "batch_token_masks", "[", "doc_id", ",", ":", "self", ".", "max_num_tokens", "]", ")", "\n", "new_token_types", ".", "append", "(", "batch_token_types", "[", "doc_id", ",", ":", "self", ".", "max_num_tokens", "]", ")", "\n", "new_token_segs", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "new_token_seq1", "=", "torch", ".", "cat", "(", "[", "batch_token_seqs", "[", "doc_id", ",", ":", "self", ".", "max_num_tokens", "-", "self", ".", "end_token_len", "]", ",", "self", ".", "end_token_ids", "]", ",", "dim", "=", "-", "1", ")", "\n", "new_token_mask1", "=", "batch_token_masks", "[", "doc_id", ",", ":", "self", ".", "max_num_tokens", "]", "\n", "new_token_type1", "=", "torch", ".", "cat", "(", "[", "batch_token_types", "[", "doc_id", ",", ":", "self", ".", "max_num_tokens", "-", "self", ".", "end_token_len", "]", ",", "batch_token_types", "[", "doc_id", ",", "self", ".", "max_num_tokens", "-", "self", ".", "end_token_len", "-", "1", "]", ".", "repeat", "(", "self", ".", "end_token_len", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "new_token_seq2", "=", "torch", ".", "cat", "(", "[", "self", ".", "start_token_ids", ",", "batch_token_seqs", "[", "doc_id", ",", "real_num_token", "-", "self", ".", "max_num_tokens", "+", "self", ".", "start_token_len", ":", "real_num_token", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "new_token_mask2", "=", "batch_token_masks", "[", "doc_id", ",", "real_num_token", "-", "self", ".", "max_num_tokens", ":", "real_num_token", "]", "\n", "new_token_type2", "=", "torch", ".", "cat", "(", "[", "batch_token_types", "[", "doc_id", ",", "real_num_token", "-", "self", ".", "max_num_tokens", "+", "self", ".", "start_token_len", "]", ".", "repeat", "(", "self", ".", "start_token_len", ")", ",", "batch_token_types", "[", "doc_id", ",", "real_num_token", "-", "self", ".", "max_num_tokens", "+", "self", ".", "start_token_len", ":", "real_num_token", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "new_token_seqs", ".", "extend", "(", "[", "new_token_seq1", ",", "new_token_seq2", "]", ")", "\n", "new_token_masks", ".", "extend", "(", "[", "new_token_mask1", ",", "new_token_mask2", "]", ")", "\n", "new_token_types", ".", "extend", "(", "[", "new_token_type1", ",", "new_token_type2", "]", ")", "\n", "new_token_segs", ".", "append", "(", "2", ")", "\n", "\n", "", "", "batch_token_seqs", ",", "batch_token_masks", ",", "batch_token_types", "=", "torch", ".", "stack", "(", "new_token_seqs", ",", "dim", "=", "0", ")", ".", "long", "(", ")", ",", "torch", ".", "stack", "(", "new_token_masks", ",", "dim", "=", "0", ")", ".", "float", "(", ")", ",", "torch", ".", "stack", "(", "new_token_types", ",", "dim", "=", "0", ")", ".", "long", "(", ")", "\n", "batch_output", "=", "self", ".", "transformer", "(", "input_ids", "=", "batch_token_seqs", ",", "attention_mask", "=", "batch_token_masks", ",", "token_type_ids", "=", "batch_token_types", ",", "output_attentions", "=", "True", ")", "\n", "batch_token_embs", ",", "batch_token_atts", "=", "batch_output", "[", "0", "]", ",", "batch_output", "[", "-", "1", "]", "[", "-", "1", "]", "\n", "\n", "seg_id", ",", "new_token_embs", ",", "new_token_atts", "=", "0", ",", "[", "]", ",", "[", "]", "\n", "for", "(", "new_token_seq", ",", "real_num_token", ")", "in", "zip", "(", "new_token_segs", ",", "real_num_tokens", ")", ":", "\n", "                ", "if", "new_token_seq", "==", "1", ":", "\n", "                    ", "new_token_emb", "=", "F", ".", "pad", "(", "batch_token_embs", "[", "seg_id", "]", ",", "(", "0", ",", "0", ",", "0", ",", "batch_num_tokens", "-", "self", ".", "max_num_tokens", ")", ")", "\n", "new_token_att", "=", "F", ".", "pad", "(", "batch_token_atts", "[", "seg_id", "]", ",", "(", "0", ",", "batch_num_tokens", "-", "self", ".", "max_num_tokens", ",", "0", ",", "batch_num_tokens", "-", "self", ".", "max_num_tokens", ")", ")", "\n", "new_token_embs", ".", "append", "(", "new_token_emb", ")", "\n", "new_token_atts", ".", "append", "(", "new_token_att", ")", "\n", "\n", "", "elif", "new_token_seq", "==", "2", ":", "\n", "                    ", "valid_num_token1", "=", "self", ".", "max_num_tokens", "-", "self", ".", "end_token_len", "\n", "new_token_emb1", "=", "F", ".", "pad", "(", "batch_token_embs", "[", "seg_id", "]", "[", ":", "valid_num_token1", "]", ",", "(", "0", ",", "0", ",", "0", ",", "batch_num_tokens", "-", "valid_num_token1", ")", ")", "\n", "new_token_mask1", "=", "F", ".", "pad", "(", "batch_token_masks", "[", "seg_id", "]", "[", ":", "valid_num_token1", "]", ",", "(", "0", ",", "batch_num_tokens", "-", "valid_num_token1", ")", ")", "\n", "new_token_att1", "=", "F", ".", "pad", "(", "batch_token_atts", "[", "seg_id", "]", "[", ":", ",", ":", "valid_num_token1", ",", ":", "valid_num_token1", "]", ",", "(", "0", ",", "batch_num_tokens", "-", "valid_num_token1", ",", "0", ",", "batch_num_tokens", "-", "valid_num_token1", ")", ")", "\n", "\n", "valid_num_token2", "=", "real_num_token", "-", "self", ".", "max_num_tokens", "\n", "new_token_emb2", "=", "F", ".", "pad", "(", "batch_token_embs", "[", "seg_id", "+", "1", "]", "[", "self", ".", "start_token_len", ":", "]", ",", "(", "0", ",", "0", ",", "valid_num_token2", "+", "self", ".", "start_token_len", ",", "batch_num_tokens", "-", "real_num_token", ")", ")", "\n", "new_token_mask2", "=", "F", ".", "pad", "(", "batch_token_masks", "[", "seg_id", "+", "1", "]", "[", "self", ".", "start_token_len", ":", "]", ",", "(", "valid_num_token2", "+", "self", ".", "start_token_len", ",", "batch_num_tokens", "-", "real_num_token", ")", ")", "\n", "new_token_att2", "=", "F", ".", "pad", "(", "batch_token_atts", "[", "seg_id", "+", "1", "]", "[", ":", ",", "self", ".", "start_token_len", ":", ",", "self", ".", "start_token_len", ":", "]", ",", "(", "valid_num_token2", "+", "self", ".", "start_token_len", ",", "batch_num_tokens", "-", "real_num_token", ",", "valid_num_token2", "+", "self", ".", "start_token_len", ",", "batch_num_tokens", "-", "real_num_token", ")", ")", "\n", "\n", "new_token_mask", "=", "new_token_mask1", "+", "new_token_mask2", "+", "self", ".", "info", ".", "EXTREME_SMALL_POSI", "\n", "new_token_emb", "=", "(", "new_token_emb1", "+", "new_token_emb2", ")", "/", "new_token_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "new_token_att", "=", "(", "new_token_att1", "+", "new_token_att2", ")", "\n", "new_token_att", "/=", "(", "new_token_att", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "+", "self", ".", "info", ".", "EXTREME_SMALL_POSI", ")", "\n", "new_token_embs", ".", "append", "(", "new_token_emb", ")", "\n", "new_token_atts", ".", "append", "(", "new_token_att", ")", "\n", "\n", "", "seg_id", "+=", "new_token_seq", "\n", "", "batch_token_embs", ",", "batch_token_atts", "=", "torch", ".", "stack", "(", "new_token_embs", ",", "dim", "=", "0", ")", ",", "torch", ".", "stack", "(", "new_token_atts", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "batch_token_embs", ",", "batch_token_atts", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.__init__": [[94, 98], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "info", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "info", "=", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.cal_RE_loss": [[100, 117], ["torch.zeros_like().float().to", "torch.zeros_like().float().to", "torch.zeros_like().float().to", "torch.zeros_like().float().to", "torch.zeros_like().float().to", "torch.zeros_like().float().to", "torch.zeros_like().float().to", "torch.zeros_like().float().to", "torch.zeros_like().float().to", "torch.zeros_like().float().to", "torch.zeros_like().float().to", "torch.zeros_like().float().to", "torch.zeros_like().float().to", "torch.zeros_like().float().to", "torch.zeros_like().float().to", "torch.zeros_like().float().to", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "cal_RE_loss", "(", "self", ",", "batch_RE_reps", ",", "batch_epair_relations", ")", ":", "\n", "\n", "        ", "batch_epair_thresholds", "=", "torch", ".", "zeros_like", "(", "batch_epair_relations", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "info", ".", "DEVICE_GPU", ")", "\n", "batch_epair_thresholds", "[", ":", ",", "self", ".", "info", ".", "ID_REL_THRE", "]", "=", "1", "\n", "batch_epair_relations", "[", ":", ",", "self", ".", "info", ".", "ID_REL_THRE", "]", "=", "0", "\n", "\n", "batch_posi_masks", "=", "batch_epair_relations", "+", "batch_epair_thresholds", "\n", "batch_posi_reps", "=", "batch_RE_reps", "+", "(", "1", "-", "batch_posi_masks", ")", "*", "self", ".", "info", ".", "EXTREME_SMALL_NEGA", "\n", "batch_posi_loss", "=", "-", "(", "F", ".", "log_softmax", "(", "batch_posi_reps", ",", "dim", "=", "-", "1", ")", "*", "batch_epair_relations", ")", ".", "sum", "(", "1", ")", "\n", "\n", "batch_nega_masks", "=", "1", "-", "batch_epair_relations", "\n", "batch_nega_reps", "=", "batch_RE_reps", "+", "(", "1", "-", "batch_nega_masks", ")", "*", "self", ".", "info", ".", "EXTREME_SMALL_NEGA", "\n", "batch_nega_loss", "=", "-", "(", "F", ".", "log_softmax", "(", "batch_nega_reps", ",", "dim", "=", "-", "1", ")", "*", "batch_epair_thresholds", ")", ".", "sum", "(", "1", ")", "\n", "\n", "batch_RE_loss", "=", "(", "batch_posi_loss", "+", "batch_nega_loss", ")", ".", "mean", "(", ")", "\n", "\n", "return", "batch_RE_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.cal_CR_loss": [[119, 130], ["batch_mention_coreferences.long().bincount", "batch_weights.gather.gather.gather", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "batch_weights.gather.gather.sum", "batch_mention_coreferences.long", "batch_mention_coreferences.long", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "cal_CR_loss", "(", "self", ",", "batch_CR_reps", ",", "batch_mention_coreferences", ")", ":", "\n", "\n", "        ", "batch_weights", "=", "batch_mention_coreferences", ".", "long", "(", ")", ".", "bincount", "(", ")", "\n", "batch_weights", "=", "batch_weights", ".", "sum", "(", ")", "/", "(", "2", "*", "batch_weights", ")", "\n", "batch_weights", "=", "batch_weights", ".", "gather", "(", "0", ",", "batch_mention_coreferences", ".", "long", "(", ")", ")", "\n", "\n", "batch_CR_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "batch_CR_reps", ",", "batch_mention_coreferences", ",", "reduction", "=", "'none'", ")", "\n", "batch_CR_focal", "=", "(", "1", "-", "torch", ".", "exp", "(", "-", "batch_CR_loss", ")", ")", "**", "self", ".", "args", ".", "CR_focal_gamma", "\n", "batch_CR_loss", "=", "(", "batch_weights", "*", "batch_CR_focal", "*", "batch_CR_loss", ")", ".", "mean", "(", ")", "\n", "\n", "return", "batch_CR_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.cal_ET_loss": [[132, 138], ["batch_epair_types.T.flatten.T.flatten.T.flatten", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["None"], ["", "def", "cal_ET_loss", "(", "self", ",", "batch_ET_reps", ",", "batch_epair_types", ")", ":", "\n", "\n", "        ", "batch_epair_types", "=", "batch_epair_types", ".", "T", ".", "flatten", "(", ")", "\n", "batch_ET_loss", "=", "F", ".", "cross_entropy", "(", "batch_ET_reps", ",", "batch_epair_types", ")", "\n", "\n", "return", "batch_ET_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.cal_PER_loss": [[140, 154], ["torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "batch_epair_pooled_evidences.sum", "batch_weights.gather.gather.gather", "batch_epair_pooled_evidences.clamp", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "batch_weights.gather.gather.sum", "batch_epair_pooled_evidences.clamp().long", "batch_epair_pooled_evidences.clamp", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "batch_epair_pooled_evidences.clamp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "cal_PER_loss", "(", "self", ",", "batch_PER_reps", ",", "batch_epair_pooled_evidences", ")", ":", "\n", "\n", "        ", "batch_weights", "=", "torch", ".", "zeros", "(", "2", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "info", ".", "DEVICE_GPU", ")", "\n", "batch_weights", "[", "0", "]", "=", "(", "batch_epair_pooled_evidences", "==", "0", ")", ".", "sum", "(", ")", "\n", "batch_weights", "[", "1", "]", "=", "batch_epair_pooled_evidences", ".", "sum", "(", ")", "\n", "batch_weights", "=", "batch_weights", ".", "sum", "(", ")", "/", "(", "2", "*", "batch_weights", ")", "\n", "batch_weights", "=", "batch_weights", ".", "gather", "(", "0", ",", "batch_epair_pooled_evidences", ".", "clamp", "(", "max", "=", "1", ")", ".", "long", "(", ")", ")", "\n", "batch_weights", "*=", "batch_epair_pooled_evidences", ".", "clamp", "(", "min", "=", "1", ")", "\n", "\n", "batch_PER_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "batch_PER_reps", ",", "batch_epair_pooled_evidences", ".", "clamp", "(", "max", "=", "1", ")", ",", "reduction", "=", "'none'", ")", "\n", "batch_PER_focal", "=", "(", "1", "-", "torch", ".", "exp", "(", "-", "batch_PER_loss", ")", ")", "**", "self", ".", "args", ".", "PER_focal_gamma", "\n", "batch_PER_loss", "=", "(", "batch_weights", "*", "batch_PER_focal", "*", "batch_PER_loss", ")", ".", "mean", "(", ")", "\n", "\n", "return", "batch_PER_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.cal_FER_loss": [[156, 162], ["torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "cal_FER_loss", "(", "self", ",", "batch_FER_reps", ",", "batch_epair_finegrained_evidences", ")", ":", "\n", "\n", "        ", "if", "batch_epair_finegrained_evidences", "is", "None", ":", "batch_FER_loss", "=", "0", "\n", "else", ":", "batch_FER_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "batch_FER_reps", ",", "batch_epair_finegrained_evidences", ")", "\n", "\n", "return", "batch_FER_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.cal_RE_results": [[164, 169], ["batch_RE_reps[].unsqueeze"], "methods", ["None"], ["", "def", "cal_RE_results", "(", "self", ",", "batch_RE_reps", ")", ":", "\n", "\n", "        ", "batch_pred_relations", "=", "batch_RE_reps", "-", "batch_RE_reps", "[", ":", ",", "self", ".", "info", ".", "ID_REL_THRE", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "return", "batch_pred_relations", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.cal_FER_results": [[171, 176], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "cal_FER_results", "(", "self", ",", "batch_FER_reps", ")", ":", "\n", "\n", "        ", "batch_pred_evidences", "=", "torch", ".", "sigmoid", "(", "batch_FER_reps", ")", "\n", "\n", "return", "batch_pred_evidences", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.pred_RE_results": [[178, 188], ["batch_RE_reps.gt", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "batch_top_labels[].unsqueeze", "batch_RE_reps.ge"], "methods", ["None"], ["", "def", "pred_RE_results", "(", "self", ",", "batch_RE_reps", ")", ":", "\n", "\n", "        ", "batch_pred_relations", "=", "batch_RE_reps", ".", "gt", "(", "0", ")", "\n", "\n", "if", "self", ".", "args", ".", "RE_max", ">", "0", ":", "\n", "            ", "batch_top_labels", ",", "_", "=", "torch", ".", "topk", "(", "batch_RE_reps", ",", "self", ".", "args", ".", "RE_max", ",", "dim", "=", "1", ")", "\n", "batch_top_labels", "=", "batch_top_labels", "[", ":", ",", "-", "1", "]", ".", "unsqueeze", "(", "1", ")", "\n", "batch_pred_relations", "=", "batch_pred_relations", "&", "batch_RE_reps", ".", "ge", "(", "batch_top_labels", ")", "\n", "\n", "", "return", "batch_pred_relations", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.pred_FER_results": [[190, 195], ["batch_pred_evidences.gt.gt.gt"], "methods", ["None"], ["", "def", "pred_FER_results", "(", "self", ",", "batch_FER_reps", ")", ":", "\n", "\n", "        ", "batch_pred_evidences", "=", "batch_pred_evidences", ".", "gt", "(", "self", ".", "args", ".", "FER_threshold", ")", "\n", "\n", "return", "batch_pred_evidences", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Model.__init__": [[200, 221], ["torch.Module.__init__", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "model.Transformer", "model.Loss", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "info", ",", "transformer", ",", "rtype_embeddings", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "info", "=", "info", "\n", "\n", "self", ".", "rtype_emb_module", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "rtype_embeddings", ",", "freeze", "=", "False", ")", "\n", "self", ".", "transformer_module", "=", "Transformer", "(", "info", ",", "transformer", ")", "\n", "self", ".", "loss_module", "=", "Loss", "(", "args", ",", "info", ")", "\n", "\n", "self", ".", "head_extractor_module", "=", "nn", ".", "Linear", "(", "transformer", ".", "config", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "tail_extractor_module", "=", "nn", ".", "Linear", "(", "transformer", ".", "config", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "head_context_extractor_module", "=", "nn", ".", "Linear", "(", "transformer", ".", "config", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "tail_context_extractor_module", "=", "nn", ".", "Linear", "(", "transformer", ".", "config", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "triplet_extractor_module", "=", "nn", ".", "Linear", "(", "4", "*", "transformer", ".", "config", ".", "hidden_size", ",", "transformer", ".", "config", ".", "hidden_size", ")", "\n", "\n", "self", ".", "RE_predictor_module", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", "*", "args", ".", "bilinear_block_size", ",", "info", ".", "NUM_REL", ")", "\n", "self", ".", "CR_predictor_module", "=", "nn", ".", "Linear", "(", "transformer", ".", "config", ".", "hidden_size", "*", "args", ".", "bilinear_block_size", ",", "1", ")", "\n", "self", ".", "ET_predictor_module", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "info", ".", "NUM_NER", ")", "\n", "self", ".", "PER_predictor_module", "=", "nn", ".", "Linear", "(", "transformer", ".", "config", ".", "hidden_size", "*", "args", ".", "bilinear_block_size", ",", "1", ")", "\n", "self", ".", "FER_predictor_module", "=", "nn", ".", "Linear", "(", "transformer", ".", "config", ".", "hidden_size", "*", "args", ".", "bilinear_block_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Model.get_epair_infos": [[223, 239], ["torch.arange().repeat_interleave().unsqueeze().unsqueeze", "torch.arange().repeat_interleave().unsqueeze().unsqueeze", "torch.arange().repeat_interleave().unsqueeze().unsqueeze", "torch.arange().repeat_interleave().unsqueeze().unsqueeze", "torch.arange().repeat_interleave().unsqueeze().unsqueeze", "torch.arange().repeat_interleave().unsqueeze().unsqueeze", "torch.arange().repeat_interleave().unsqueeze().unsqueeze", "torch.arange().repeat_interleave().unsqueeze().unsqueeze", "torch.arange().repeat_interleave().unsqueeze().unsqueeze", "torch.arange().repeat_interleave().unsqueeze().unsqueeze", "torch.arange().repeat_interleave().unsqueeze().unsqueeze", "torch.arange().repeat_interleave().unsqueeze().unsqueeze", "torch.arange().repeat_interleave().unsqueeze().unsqueeze", "torch.arange().repeat_interleave().unsqueeze().unsqueeze", "torch.arange().repeat_interleave().unsqueeze().unsqueeze", "torch.arange().repeat_interleave().unsqueeze().unsqueeze", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "batch_token_embs[].logsumexp", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "batch_token_atts[].sum", "torch.split.sum().clamp", "torch.split.sum().clamp", "torch.split.sum().clamp", "torch.split.sum().clamp", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Model.head_extractor_module", "model.Model.tail_extractor_module", "torch.pad.mean", "torch.split.prod", "torch.split.prod", "torch.split.prod", "torch.split.prod", "batch_num_epairs_per_doc.tolist", "torch.arange().repeat_interleave().unsqueeze", "torch.arange().repeat_interleave().unsqueeze", "torch.arange().repeat_interleave().unsqueeze", "torch.arange().repeat_interleave().unsqueeze", "torch.arange().repeat_interleave().unsqueeze", "torch.arange().repeat_interleave().unsqueeze", "torch.arange().repeat_interleave().unsqueeze", "torch.arange().repeat_interleave().unsqueeze", "torch.arange().repeat_interleave().unsqueeze", "torch.arange().repeat_interleave().unsqueeze", "torch.arange().repeat_interleave().unsqueeze", "torch.arange().repeat_interleave().unsqueeze", "torch.arange().repeat_interleave().unsqueeze", "torch.arange().repeat_interleave().unsqueeze", "torch.arange().repeat_interleave().unsqueeze", "torch.arange().repeat_interleave().unsqueeze", "torch.split.sum", "torch.split.sum", "torch.split.sum", "torch.split.sum", "enumerate", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "get_epair_infos", "(", "self", ",", "batch_token_embs", ",", "batch_token_atts", ",", "batch_epair_tids", ",", "batch_epair_masks", ",", "batch_num_epairs_per_doc", ")", ":", "\n", "\n", "        ", "batch_epair_dids", "=", "torch", ".", "arange", "(", "batch_num_epairs_per_doc", ".", "shape", "[", "0", "]", ")", ".", "repeat_interleave", "(", "batch_num_epairs_per_doc", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "batch_token_embs", "=", "F", ".", "pad", "(", "batch_token_embs", ",", "(", "0", ",", "0", ",", "0", ",", "1", ")", ",", "value", "=", "self", ".", "info", ".", "EXTREME_SMALL_NEGA", ")", "\n", "batch_epair_embs", "=", "batch_token_embs", "[", "batch_epair_dids", ",", "batch_epair_tids", "]", ".", "logsumexp", "(", "-", "2", ")", "\n", "batch_epair_reps", "=", "[", "self", ".", "head_extractor_module", "(", "batch_epair_embs", "[", ":", ",", "0", ",", ":", "]", ")", ",", "self", ".", "tail_extractor_module", "(", "batch_epair_embs", "[", ":", ",", "1", ",", ":", "]", ")", "]", "\n", "\n", "batch_token_atts", "=", "F", ".", "pad", "(", "batch_token_atts", ".", "mean", "(", "1", ")", ",", "(", "0", ",", "0", ",", "0", ",", "1", ")", ")", "\n", "batch_epair_atts", "=", "batch_token_atts", "[", "batch_epair_dids", ",", "batch_epair_tids", "]", ".", "sum", "(", "-", "2", ")", "\n", "batch_epair_atts", "/=", "(", "batch_epair_tids", "!=", "-", "1", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", ".", "clamp", "(", "min", "=", "1", ")", ".", "to", "(", "self", ".", "info", ".", "DEVICE_GPU", ")", "\n", "batch_epair_atts", "=", "batch_epair_atts", ".", "prod", "(", "-", "2", ")", "*", "batch_epair_masks", "\n", "batch_epair_atts", "/=", "batch_epair_atts", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", ".", "clamp", "(", "min", "=", "self", ".", "info", ".", "EXTREME_SMALL_POSI", ")", "\n", "batch_epair_atts", "=", "torch", ".", "split", "(", "batch_epair_atts", ",", "batch_num_epairs_per_doc", ".", "tolist", "(", ")", ",", "dim", "=", "0", ")", "\n", "batch_epair_contexts", "=", "torch", ".", "cat", "(", "[", "doc_epair_atts", "@", "batch_token_embs", "[", "did", ",", ":", "-", "1", ",", ":", "]", "for", "did", ",", "doc_epair_atts", "in", "enumerate", "(", "batch_epair_atts", ")", "]", ")", "\n", "\n", "return", "batch_epair_embs", ",", "batch_epair_reps", ",", "batch_epair_contexts", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Model.get_sent_infos": [[241, 249], ["torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.split.view", "torch.split.view", "torch.split.view", "torch.split.view", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "batch_num_sents_per_doc.tolist", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "get_sent_infos", "(", "self", ",", "batch_token_embs", ",", "batch_sent_tids", ",", "batch_num_sents_per_doc", ")", ":", "\n", "\n", "        ", "batch_sent_dids", "=", "torch", ".", "arange", "(", "batch_num_sents_per_doc", ".", "shape", "[", "0", "]", ")", ".", "repeat_interleave", "(", "batch_num_sents_per_doc", ")", "\n", "batch_sent_embs", "=", "batch_token_embs", "[", "batch_sent_dids", ",", "batch_sent_tids", "]", "\n", "batch_sent_embs", "=", "batch_sent_embs", ".", "view", "(", "-", "1", ",", "batch_sent_embs", ".", "shape", "[", "-", "1", "]", "//", "self", ".", "args", ".", "bilinear_block_size", ",", "self", ".", "args", ".", "bilinear_block_size", ")", "\n", "batch_sent_embs", "=", "torch", ".", "split", "(", "batch_sent_embs", ",", "batch_num_sents_per_doc", ".", "tolist", "(", ")", ",", "dim", "=", "0", ")", "# doc: num_sent * num_block * size_block", "\n", "\n", "return", "batch_sent_embs", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Model.get_RE_reps": [[251, 261], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "batch_head_reps.view.view.view", "batch_tail_reps.view.view.view", "model.Model.RE_predictor_module", "model.Model.head_context_extractor_module", "model.Model.tail_context_extractor_module", "batch_head_reps.view.view.unsqueeze", "batch_tail_reps.view.view.unsqueeze"], "methods", ["None"], ["", "def", "get_RE_reps", "(", "self", ",", "batch_epair_reps", ",", "batch_epair_contexts", ")", ":", "\n", "\n", "        ", "batch_head_reps", "=", "torch", ".", "tanh", "(", "batch_epair_reps", "[", "0", "]", "+", "self", ".", "head_context_extractor_module", "(", "batch_epair_contexts", ")", ")", "\n", "batch_tail_reps", "=", "torch", ".", "tanh", "(", "batch_epair_reps", "[", "1", "]", "+", "self", ".", "tail_context_extractor_module", "(", "batch_epair_contexts", ")", ")", "\n", "batch_head_reps", "=", "batch_head_reps", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", "//", "self", ".", "args", ".", "bilinear_block_size", ",", "self", ".", "args", ".", "bilinear_block_size", ")", "\n", "batch_tail_reps", "=", "batch_tail_reps", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", "//", "self", ".", "args", ".", "bilinear_block_size", ",", "self", ".", "args", ".", "bilinear_block_size", ")", "\n", "batch_RE_reps", "=", "(", "batch_head_reps", ".", "unsqueeze", "(", "3", ")", "*", "batch_tail_reps", ".", "unsqueeze", "(", "2", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", "*", "self", ".", "args", ".", "bilinear_block_size", ")", "\n", "batch_RE_reps", "=", "self", ".", "RE_predictor_module", "(", "batch_RE_reps", ")", "\n", "\n", "return", "batch_RE_reps", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Model.get_CR_reps": [[263, 279], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Model.CR_predictor_module().flatten", "doc_mention_embs.view.view.view", "opt_einsum.contract().flatten().flatten", "model.Model.append", "model.Model.CR_predictor_module", "opt_einsum.contract().flatten", "opt_einsum.contract"], "methods", ["None"], ["", "def", "get_CR_reps", "(", "self", ",", "batch_token_embs", ",", "batch_mention_tids", ",", "batch_num_mentions_per_doc", ")", ":", "\n", "\n", "        ", "batch_mention_tids", "=", "torch", ".", "split", "(", "batch_mention_tids", ",", "batch_num_mentions_per_doc", ",", "dim", "=", "0", ")", "\n", "\n", "batch_CR_reps", "=", "[", "]", "\n", "for", "doc_token_embs", ",", "doc_mention_tids", "in", "zip", "(", "batch_token_embs", ",", "batch_mention_tids", ")", ":", "\n", "\n", "            ", "doc_mention_embs", "=", "doc_token_embs", "[", "doc_mention_tids", "]", "\n", "doc_mention_embs", "=", "doc_mention_embs", ".", "view", "(", "-", "1", ",", "doc_mention_embs", ".", "shape", "[", "-", "1", "]", "//", "self", ".", "args", ".", "bilinear_block_size", ",", "self", ".", "args", ".", "bilinear_block_size", ")", "# num_mention * num_block * size_block", "\n", "doc_mention_reps", "=", "contract", "(", "'mbi,nbj->mnbij'", ",", "doc_mention_embs", ",", "doc_mention_embs", ")", ".", "flatten", "(", "2", ",", "4", ")", ".", "flatten", "(", "0", ",", "1", ")", "# num_mention * num_mention * num_block * size_block * size_block", "\n", "batch_CR_reps", ".", "append", "(", "doc_mention_reps", ")", "\n", "\n", "", "batch_CR_reps", "=", "torch", ".", "cat", "(", "batch_CR_reps", ")", "\n", "batch_CR_reps", "=", "self", ".", "CR_predictor_module", "(", "batch_CR_reps", ")", ".", "flatten", "(", ")", "\n", "\n", "return", "batch_CR_reps", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Model.get_ET_reps": [[281, 287], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "model.Model.ET_predictor_module", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "get_ET_reps", "(", "self", ",", "batch_epair_reps", ")", ":", "\n", "\n", "        ", "batch_ET_reps", "=", "torch", ".", "tanh", "(", "torch", ".", "cat", "(", "batch_epair_reps", ",", "dim", "=", "0", ")", ")", "\n", "batch_ET_reps", "=", "self", ".", "ET_predictor_module", "(", "batch_ET_reps", ")", "\n", "\n", "return", "batch_ET_reps", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Model.get_PER_reps": [[289, 298], ["torch.split.view", "torch.split.view", "torch.split.view", "torch.split.view", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Model.PER_predictor_module().flatten", "batch_num_epairs_per_doc.tolist", "opt_einsum.contract", "zip", "doc_PER_reps.flatten().flatten", "model.Model.PER_predictor_module", "doc_PER_reps.flatten"], "methods", ["None"], ["", "def", "get_PER_reps", "(", "self", ",", "batch_epair_contexts", ",", "batch_num_epairs_per_doc", ",", "batch_sent_embs", ")", ":", "\n", "\n", "        ", "batch_epair_contexts", "=", "batch_epair_contexts", ".", "view", "(", "-", "1", ",", "batch_epair_contexts", ".", "shape", "[", "-", "1", "]", "//", "self", ".", "args", ".", "bilinear_block_size", ",", "self", ".", "args", ".", "bilinear_block_size", ")", "\n", "batch_epair_contexts", "=", "torch", ".", "split", "(", "batch_epair_contexts", ",", "batch_num_epairs_per_doc", ".", "tolist", "(", ")", ",", "dim", "=", "0", ")", "# doc: num_epair * num_block * size_block", "\n", "batch_PER_reps", "=", "[", "contract", "(", "'ebi,sbj->esbij'", ",", "doc_epair_contexts", ",", "doc_sent_embs", ")", "for", "doc_epair_contexts", ",", "doc_sent_embs", "in", "zip", "(", "batch_epair_contexts", ",", "batch_sent_embs", ")", "]", "# doc: num_epair * num_sent * num_block * size_block * size_block", "\n", "batch_PER_reps", "=", "torch", ".", "cat", "(", "[", "doc_PER_reps", ".", "flatten", "(", "2", ",", "4", ")", ".", "flatten", "(", "0", ",", "1", ")", "for", "doc_PER_reps", "in", "batch_PER_reps", "]", ")", "\n", "batch_PER_reps", "=", "self", ".", "PER_predictor_module", "(", "batch_PER_reps", ")", ".", "flatten", "(", ")", "\n", "\n", "return", "batch_PER_reps", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Model.get_FER_reps": [[300, 335], ["map", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Model.FER_predictor_module().flatten", "doc_epair_relations.sum", "torch.nonzero().flatten", "torch.nonzero().flatten", "torch.nonzero().flatten", "torch.nonzero().flatten", "torch.nonzero().flatten", "torch.nonzero().flatten", "torch.nonzero().flatten", "torch.nonzero().flatten", "torch.nonzero().flatten", "torch.nonzero().flatten", "torch.nonzero().flatten", "torch.nonzero().flatten", "torch.nonzero().flatten", "torch.nonzero().flatten", "torch.nonzero().flatten", "torch.nonzero().flatten", "doc_epair_num_relations[].long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.split.append", "torch.split.append", "torch.split.append", "torch.split.append", "batch_num_triplet_per_doc.append", "model.Model.triplet_extractor_module", "doc_triplet_reps.view.view.view", "opt_einsum.contract().flatten().flatten", "model.Model.append", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.repeat", "torch.cat.repeat", "torch.cat.repeat", "torch.cat.repeat", "model.Model.FER_predictor_module", "batch_num_epairs_per_doc.tolist", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "doc_epair_num_relations[].long.sum", "model.Model.rtype_emb_module", "opt_einsum.contract().flatten", "epair_reps.expand", "zip", "opt_einsum.contract"], "methods", ["None"], ["", "def", "get_FER_reps", "(", "self", ",", "batch_epair_embs", ",", "batch_epair_contexts", ",", "batch_epair_relations", ",", "batch_num_epairs_per_doc", ",", "batch_sent_embs", ")", ":", "\n", "\n", "        ", "batch_epair_embs", ",", "batch_epair_contexts", ",", "batch_epair_relations", "=", "map", "(", "lambda", "x", ":", "torch", ".", "split", "(", "x", ",", "batch_num_epairs_per_doc", ".", "tolist", "(", ")", ",", "dim", "=", "0", ")", ",", "[", "batch_epair_embs", ",", "batch_epair_contexts", ",", "batch_epair_relations", "]", ")", "\n", "\n", "batch_triplet_reps", ",", "batch_num_triplet_per_doc", "=", "[", "]", ",", "[", "]", "\n", "for", "doc_epair_embs", ",", "doc_epair_contexts", ",", "doc_epair_relations", "in", "zip", "(", "batch_epair_embs", ",", "batch_epair_contexts", ",", "batch_epair_relations", ")", ":", "\n", "\n", "            ", "doc_epair_num_relations", "=", "doc_epair_relations", ".", "sum", "(", "1", ")", "\n", "doc_epair_with_relations", "=", "torch", ".", "nonzero", "(", "doc_epair_num_relations", ")", ".", "flatten", "(", ")", "\n", "doc_epair_real_relations", "=", "torch", ".", "nonzero", "(", "doc_epair_relations", "[", "doc_epair_with_relations", "]", ")", "[", ":", ",", "1", "]", "\n", "doc_epair_num_relations", "=", "doc_epair_num_relations", "[", "doc_epair_with_relations", "]", ".", "long", "(", ")", "\n", "\n", "doc_epair_embs", "=", "doc_epair_embs", "[", "doc_epair_with_relations", "]", "\n", "doc_epair_reps", "=", "torch", ".", "cat", "(", "[", "doc_epair_embs", "[", ":", ",", "0", ",", ":", "]", ",", "doc_epair_embs", "[", ":", ",", "1", ",", ":", "]", ",", "doc_epair_contexts", "[", "doc_epair_with_relations", "]", "]", ",", "dim", "=", "1", ")", "\n", "doc_epair_reps", "=", "torch", ".", "cat", "(", "[", "epair_reps", ".", "expand", "(", "epair_num_relations", ",", "-", "1", ")", "for", "epair_reps", ",", "epair_num_relations", "in", "zip", "(", "doc_epair_reps", ",", "doc_epair_num_relations", ")", "]", ")", "if", "doc_epair_num_relations", ".", "sum", "(", ")", ">", "0", "else", "doc_epair_reps", ".", "repeat", "(", "0", ",", "1", ")", "\n", "\n", "doc_triplet_reps", "=", "torch", ".", "cat", "(", "[", "doc_epair_reps", ",", "self", ".", "rtype_emb_module", "(", "doc_epair_real_relations", ")", "]", ",", "dim", "=", "1", ")", "\n", "batch_triplet_reps", ".", "append", "(", "doc_triplet_reps", ")", "\n", "batch_num_triplet_per_doc", ".", "append", "(", "doc_triplet_reps", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "batch_triplet_reps", "=", "torch", ".", "cat", "(", "batch_triplet_reps", ")", "\n", "batch_triplet_reps", "=", "torch", ".", "tanh", "(", "self", ".", "triplet_extractor_module", "(", "batch_triplet_reps", ")", ")", "\n", "batch_triplet_reps", "=", "torch", ".", "split", "(", "batch_triplet_reps", ",", "batch_num_triplet_per_doc", ",", "dim", "=", "0", ")", "\n", "\n", "batch_FER_reps", "=", "[", "]", "\n", "for", "doc_triplet_reps", ",", "doc_sent_embs", "in", "zip", "(", "batch_triplet_reps", ",", "batch_sent_embs", ")", ":", "\n", "\n", "            ", "doc_triplet_reps", "=", "doc_triplet_reps", ".", "view", "(", "-", "1", ",", "doc_triplet_reps", ".", "shape", "[", "-", "1", "]", "//", "self", ".", "args", ".", "bilinear_block_size", ",", "self", ".", "args", ".", "bilinear_block_size", ")", "\n", "doc_FER_reps", "=", "contract", "(", "'tbi,sbj->tsbij'", ",", "doc_triplet_reps", ",", "doc_sent_embs", ")", ".", "flatten", "(", "2", ",", "4", ")", ".", "flatten", "(", "0", ",", "1", ")", "\n", "batch_FER_reps", ".", "append", "(", "doc_FER_reps", ")", "\n", "\n", "", "batch_FER_reps", "=", "torch", ".", "cat", "(", "batch_FER_reps", ")", "\n", "batch_FER_reps", "=", "self", ".", "FER_predictor_module", "(", "batch_FER_reps", ")", ".", "flatten", "(", ")", "\n", "\n", "return", "batch_FER_reps", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Model.forward": [[337, 379], ["model.Model.transformer_module", "model.Model.get_epair_infos", "model.Model.get_sent_infos", "model.Model.get_RE_reps", "model.Model.get_CR_reps", "model.Model.get_ET_reps", "model.Model.get_PER_reps", "model.Model.get_FER_reps", "model.Model.loss_module.cal_RE_loss", "model.Model.loss_module.cal_RE_results", "model.Model.loss_module.cal_FER_results", "model.Model.loss_module.cal_CR_loss", "model.Model.loss_module.cal_ET_loss", "model.Model.loss_module.cal_PER_loss", "model.Model.loss_module.cal_FER_loss"], "methods", ["home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Model.get_epair_infos", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Model.get_sent_infos", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Model.get_RE_reps", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Model.get_CR_reps", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Model.get_ET_reps", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Model.get_PER_reps", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Model.get_FER_reps", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.cal_RE_loss", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.cal_RE_results", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.cal_FER_results", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.cal_CR_loss", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.cal_ET_loss", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.cal_PER_loss", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.model.Loss.cal_FER_loss"], ["", "def", "forward", "(", "self", ",", "batch_tasks", ",", "batch_inputs", ",", "to_evaluate", "=", "False", ",", "to_predict", "=", "False", ")", ":", "\n", "\n", "        ", "batch_token_seqs", ",", "batch_token_masks", ",", "batch_token_types", "=", "batch_inputs", "[", "'batch_token_seqs'", "]", ",", "batch_inputs", "[", "'batch_token_masks'", "]", ",", "batch_inputs", "[", "'batch_token_types'", "]", "\n", "batch_token_embs", ",", "batch_token_atts", "=", "self", ".", "transformer_module", "(", "batch_token_seqs", ",", "batch_token_masks", ",", "batch_token_types", ")", "\n", "\n", "batch_epair_tids", ",", "batch_epair_masks", ",", "batch_num_epairs_per_doc", "=", "batch_inputs", "[", "'batch_epair_tids'", "]", ",", "batch_inputs", "[", "'batch_epair_masks'", "]", ",", "batch_inputs", "[", "'batch_num_epairs_per_doc'", "]", "\n", "batch_epair_embs", ",", "batch_epair_reps", ",", "batch_epair_contexts", "=", "self", ".", "get_epair_infos", "(", "batch_token_embs", ",", "batch_token_atts", ",", "batch_epair_tids", ",", "batch_epair_masks", ",", "batch_num_epairs_per_doc", ")", "\n", "\n", "if", "self", ".", "info", ".", "TASK_PER", "in", "batch_tasks", "or", "self", ".", "info", ".", "TASK_FER", "in", "batch_tasks", ":", "\n", "            ", "batch_sent_tids", ",", "batch_num_sents_per_doc", "=", "batch_inputs", "[", "'batch_sent_tids'", "]", ",", "batch_inputs", "[", "'batch_num_sents_per_doc'", "]", "\n", "batch_sent_embs", "=", "self", ".", "get_sent_infos", "(", "batch_token_embs", ",", "batch_sent_tids", ",", "batch_num_sents_per_doc", ")", "\n", "\n", "", "batch_loss", ",", "batch_preds", "=", "0", ",", "None", "\n", "\n", "if", "self", ".", "info", ".", "TASK_RE", "in", "batch_tasks", ":", "\n", "            ", "batch_epair_relations", "=", "batch_inputs", "[", "'batch_epair_relations'", "]", "\n", "batch_RE_reps", "=", "self", ".", "get_RE_reps", "(", "batch_epair_reps", ",", "batch_epair_contexts", ")", "\n", "if", "to_evaluate", ":", "batch_loss", "+=", "self", ".", "loss_module", ".", "cal_RE_loss", "(", "batch_RE_reps", ",", "batch_epair_relations", ")", "\n", "if", "to_predict", ":", "batch_preds", "=", "self", ".", "loss_module", ".", "cal_RE_results", "(", "batch_RE_reps", ")", "\n", "\n", "", "if", "self", ".", "info", ".", "TASK_CR", "in", "batch_tasks", ":", "\n", "            ", "batch_mention_tids", ",", "batch_mention_coreferences", ",", "batch_num_mentions_per_doc", "=", "batch_inputs", "[", "'batch_mention_tids'", "]", ",", "batch_inputs", "[", "'batch_mention_coreferences'", "]", ",", "batch_inputs", "[", "'batch_num_mentions_per_doc'", "]", "\n", "batch_CR_reps", "=", "self", ".", "get_CR_reps", "(", "batch_token_embs", ",", "batch_mention_tids", ",", "batch_num_mentions_per_doc", ")", "\n", "if", "to_evaluate", ":", "batch_loss", "+=", "self", ".", "args", ".", "loss_weight_CR", "*", "self", ".", "loss_module", ".", "cal_CR_loss", "(", "batch_CR_reps", ",", "batch_mention_coreferences", ")", "\n", "\n", "", "if", "self", ".", "info", ".", "TASK_ET", "in", "batch_tasks", ":", "\n", "            ", "batch_epair_types", "=", "batch_inputs", "[", "'batch_epair_types'", "]", "\n", "batch_ET_reps", "=", "self", ".", "get_ET_reps", "(", "batch_epair_reps", ")", "\n", "if", "to_evaluate", ":", "batch_loss", "+=", "self", ".", "args", ".", "loss_weight_ET", "*", "self", ".", "loss_module", ".", "cal_ET_loss", "(", "batch_ET_reps", ",", "batch_epair_types", ")", "\n", "\n", "", "if", "self", ".", "info", ".", "TASK_PER", "in", "batch_tasks", ":", "\n", "            ", "batch_epair_pooled_evidences", "=", "batch_inputs", "[", "'batch_epair_pooled_evidences'", "]", "\n", "batch_PER_reps", "=", "self", ".", "get_PER_reps", "(", "batch_epair_contexts", ",", "batch_num_epairs_per_doc", ",", "batch_sent_embs", ")", "\n", "if", "to_evaluate", ":", "batch_loss", "+=", "self", ".", "args", ".", "loss_weight_PER", "*", "self", ".", "loss_module", ".", "cal_PER_loss", "(", "batch_PER_reps", ",", "batch_epair_pooled_evidences", ")", "\n", "\n", "", "if", "self", ".", "info", ".", "TASK_FER", "in", "batch_tasks", ":", "\n", "            ", "batch_epair_relations", ",", "batch_epair_finegrained_evidences", "=", "batch_inputs", "[", "'batch_epair_relations'", "]", ",", "batch_inputs", "[", "'batch_epair_finegrained_evidences'", "]", "\n", "batch_FER_reps", "=", "self", ".", "get_FER_reps", "(", "batch_epair_embs", ",", "batch_epair_contexts", ",", "batch_epair_relations", ",", "batch_num_epairs_per_doc", ",", "batch_sent_embs", ")", "\n", "if", "to_evaluate", ":", "batch_loss", "+=", "self", ".", "args", ".", "loss_weight_FER", "*", "self", ".", "loss_module", ".", "cal_FER_loss", "(", "batch_FER_reps", ",", "batch_epair_finegrained_evidences", ")", "\n", "if", "to_predict", ":", "batch_preds", "=", "self", ".", "loss_module", ".", "cal_FER_results", "(", "batch_FER_reps", ")", "\n", "\n", "", "return", "batch_loss", ",", "batch_preds", "", "", "", ""]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.set_seed": [[18, 29], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "set_seed", "(", "seed", ")", ":", "\n", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint": [[31, 36], ["open", "print", "open.close", "time.strftime", "time.localtime"], "function", ["None"], ["", "def", "myprint", "(", "text", ",", "file", ")", ":", "\n", "\n", "    ", "file", "=", "open", "(", "file", ",", "'a'", ")", "\n", "print", "(", "time", ".", "strftime", "(", "\"%Y %b %d %a, %H:%M:%S: \"", ",", "time", ".", "localtime", "(", ")", ")", "+", "text", ",", "file", "=", "file", ",", "flush", "=", "True", ")", "\n", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.prepare_autos": [[38, 48], ["transformers.AutoConfig.from_pretrained", "transformers.AutoTokenizer.from_pretrained", "transformers.AutoModel.from_pretrained"], "function", ["None"], ["", "def", "prepare_autos", "(", "args", ",", "info", ")", ":", "\n", "\n", "    ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "args", ".", "transformer", ",", "num_labels", "=", "info", ".", "NUM_REL", ")", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "args", ".", "transformer", ")", "\n", "transformer", "=", "AutoModel", ".", "from_pretrained", "(", "args", ".", "transformer", ",", "config", "=", "config", ")", "\n", "\n", "config", ".", "cls_token_id", "=", "tokenizer", ".", "cls_token_id", "\n", "config", ".", "sep_token_id", "=", "tokenizer", ".", "sep_token_id", "\n", "\n", "return", "config", ",", "tokenizer", ",", "transformer", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.prepare_optimizer_scheduler": [[50, 64], ["collections.defaultdict", "model.named_parameters", "transformers.optimization.AdamW", "int", "transformers.optimization.get_linear_schedule_with_warmup", "math.ceil", "grouped_parameters[].append", "grouped_parameters[].append", "zip", "math.ceil"], "function", ["None"], ["", "def", "prepare_optimizer_scheduler", "(", "args", ",", "num_train_docs", ",", "model", ")", ":", "\n", "\n", "    ", "grouped_parameters", "=", "defaultdict", "(", "list", ")", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "'transformer_module'", "in", "name", ":", "grouped_parameters", "[", "'pretrained_lr'", "]", ".", "append", "(", "param", ")", "\n", "else", ":", "grouped_parameters", "[", "'new_lr'", "]", ".", "append", "(", "param", ")", "\n", "", "grouped_lrs", "=", "[", "{", "'params'", ":", "grouped_parameters", "[", "group", "]", ",", "'lr'", ":", "lr", "}", "for", "group", ",", "lr", "in", "zip", "(", "[", "'pretrained_lr'", ",", "'new_lr'", "]", ",", "[", "args", ".", "pretrained_lr", ",", "args", ".", "new_lr", "]", ")", "]", "\n", "optimizer", "=", "AdamW", "(", "grouped_lrs", ")", "\n", "\n", "num_updates", "=", "math", ".", "ceil", "(", "math", ".", "ceil", "(", "num_train_docs", "/", "args", ".", "batch_size", ")", "/", "args", ".", "update_freq", ")", "*", "args", ".", "num_epoch", "\n", "num_warmups", "=", "int", "(", "num_updates", "*", "args", ".", "warmup_ratio", ")", "\n", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", "=", "num_warmups", ",", "num_training_steps", "=", "num_updates", ")", "\n", "\n", "return", "optimizer", ",", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.cal_f1": [[66, 77], ["predictions.sum().item", "relations.sum().item", "predictions.sum", "relations.sum"], "function", ["None"], ["", "def", "cal_f1", "(", "relations", ",", "predictions", ")", ":", "\n", "\n", "    ", "TP", "=", "(", "(", "relations", "==", "predictions", ")", "&", "predictions", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "P", "=", "predictions", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "T", "=", "relations", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "precision", "=", "TP", "/", "P", "\n", "recall", "=", "TP", "/", "T", "\n", "f1", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "\n", "return", "precision", ",", "recall", ",", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.evaluate": [[79, 128], ["util.myprint", "zip", "json.dump", "util.myprint", "outputs.append", "open", "dill.load", "dill.load", "util.myprint", "util.myprint", "util.myprint", "open", "open", "len", "len", "sum", "sid.gt().nonzero().flatten().tolist", "len", "len", "len", "len", "sid.gt().nonzero().flatten", "set", "pk.load.values", "sid.gt().nonzero", "sid.gt"], "function", ["home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint"], ["", "def", "evaluate", "(", "args", ",", "info", ",", "mode", ",", "triplets", ",", "sids", ")", ":", "\n", "\n", "    ", "myprint", "(", "f'Start Evaluating {mode} Result'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "triplet", ",", "sid", "in", "zip", "(", "triplets", ",", "sids", ")", ":", "\n", "        ", "outputs", ".", "append", "(", "{", "'title'", ":", "triplet", "[", "0", "]", ",", "'h_idx'", ":", "triplet", "[", "1", "]", ",", "'t_idx'", ":", "triplet", "[", "2", "]", ",", "'r'", ":", "info", ".", "DATA_ID2REL", "[", "triplet", "[", "3", "]", "]", ",", "'evidence'", ":", "sid", ".", "gt", "(", "args", ".", "FER_threshold", ")", ".", "nonzero", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "}", ")", "\n", "\n", "", "json", ".", "dump", "(", "outputs", ",", "open", "(", "f'{info.FILE_RESULTS[mode]}_{info.index}.json'", ",", "'w'", ")", ")", "\n", "\n", "if", "mode", "==", "info", ".", "MODE_DEV", ":", "\n", "\n", "        ", "truths", "=", "pk", ".", "load", "(", "open", "(", "info", ".", "FILE_TRUTHS", "[", "mode", "]", ",", "'rb'", ")", ")", "\n", "dev_in_train", "=", "pk", ".", "load", "(", "open", "(", "info", ".", "FILE_DEV_IN_TRAIN", ",", "'rb'", ")", ")", "\n", "\n", "Pred", ",", "Pred_sent", "=", "0", ",", "0", "\n", "Correct", ",", "Correct_sent", "=", "0", ",", "0", "\n", "Correct_ign_train", ",", "Incorrect_ign_train", "=", "0", ",", "0", "\n", "\n", "for", "output", "in", "outputs", ":", "\n", "\n", "            ", "Pred", "+=", "1", "\n", "Pred_sent", "+=", "len", "(", "output", "[", "'evidence'", "]", ")", "\n", "\n", "output_key", "=", "(", "output", "[", "'title'", "]", ",", "output", "[", "'h_idx'", "]", ",", "output", "[", "'t_idx'", "]", ",", "output", "[", "'r'", "]", ")", "\n", "if", "output_key", "in", "truths", ":", "\n", "                ", "Correct", "+=", "1", "\n", "Correct_sent", "+=", "len", "(", "set", "(", "output", "[", "'evidence'", "]", ")", "&", "truths", "[", "output_key", "]", ")", "\n", "\n", "", "if", "output_key", "not", "in", "dev_in_train", ":", "\n", "                ", "if", "output_key", "in", "truths", ":", "Correct_ign_train", "+=", "1", "\n", "else", ":", "Incorrect_ign_train", "+=", "1", "\n", "\n", "", "", "Precision", "=", "Correct", "/", "Pred", "if", "Pred", "!=", "0", "else", "0", "\n", "Recall", "=", "Correct", "/", "len", "(", "truths", ")", "\n", "F1", "=", "2", "*", "Precision", "*", "Recall", "/", "(", "Precision", "+", "Recall", ")", "if", "Precision", "+", "Recall", "!=", "0", "else", "0", "\n", "myprint", "(", "f'{mode} Set - Base Precision: {Precision:.4f} | Recall: {Recall:.4f} | F1: {F1:.4f}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "Precision_ign_train", "=", "Correct_ign_train", "/", "(", "Correct_ign_train", "+", "Incorrect_ign_train", ")", "if", "Correct_ign_train", "+", "Incorrect_ign_train", "!=", "0", "else", "0", "\n", "Recall_ign_train", "=", "Correct_ign_train", "/", "(", "len", "(", "truths", ")", "-", "len", "(", "dev_in_train", ")", ")", "\n", "F1_ign_train", "=", "2", "*", "Precision_ign_train", "*", "Recall_ign_train", "/", "(", "Precision_ign_train", "+", "Recall_ign_train", ")", "if", "Precision_ign_train", "+", "Recall_ign_train", "!=", "0", "else", "0", "\n", "myprint", "(", "f'{mode} Set - Ignore Train Precision: {Precision_ign_train:.4f} | Recall: {Recall_ign_train:.4f} | F1: {F1_ign_train:.4f}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "Precision_sent", "=", "Correct_sent", "/", "Pred_sent", "if", "Pred_sent", "!=", "0", "else", "0", "\n", "Recall_sent", "=", "Correct_sent", "/", "sum", "(", "[", "len", "(", "evidence", ")", "for", "evidence", "in", "truths", ".", "values", "(", ")", "]", ")", "\n", "F1_sent", "=", "2", "*", "Precision_sent", "*", "Recall_sent", "/", "(", "Precision_sent", "+", "Recall_sent", ")", "if", "Precision_sent", "+", "Recall_sent", "!=", "0", "else", "0", "\n", "myprint", "(", "f'{mode} Set - Evidence Precision: {Precision_sent:.4f} | Recall: {Recall_sent:.4f} | F1: {F1_sent:.4f}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "", "myprint", "(", "'-'", "*", "20", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.register_hyperparameters_prepare": [[130, 134], ["util.myprint", "util.myprint"], "function", ["home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint"], ["", "def", "register_hyperparameters_prepare", "(", "args", ",", "info", ")", ":", "\n", "\n", "    ", "myprint", "(", "f'Transformer = {args.transformer}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'Max Sequence Length = {args.max_seq_length}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.register_hyperparameters_main": [[136, 161], ["util.myprint", "util.myprint", "util.myprint", "util.myprint", "util.myprint", "util.myprint", "util.myprint", "util.myprint", "util.myprint", "util.myprint", "util.myprint", "util.myprint", "util.myprint", "util.myprint", "util.myprint", "util.myprint", "util.myprint", "util.myprint", "util.myprint"], "function", ["home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint", "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.myprint"], ["", "def", "register_hyperparameters_main", "(", "args", ",", "info", ")", ":", "\n", "\n", "    ", "myprint", "(", "f'Seed = {args.seed}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'Transformer = {args.transformer}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'Hidden Dim = {args.hidden_size}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'Bilinear Block Size = {args.bilinear_block_size}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "myprint", "(", "f'RE Max Relations = {args.RE_max}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'CR Focal Gamma = {args.CR_focal_gamma}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'PER Focal Gamma = {args.PER_focal_gamma}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'FER Threshold = {args.FER_threshold}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "myprint", "(", "f'CR Loss Weight = {args.loss_weight_CR}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'ET Loss Weight = {args.loss_weight_ET}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'PER Loss Weight = {args.loss_weight_PER}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'FER Loss Weight = {args.loss_weight_FER}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "myprint", "(", "f'Num of Epoch = {args.num_epoch}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'Batch Size = {args.batch_size}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'Updating Frequency = {args.update_freq}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n", "myprint", "(", "f'New Learning Rate = {args.new_lr}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'Pretrained Learning Rate = {args.pretrained_lr}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'Warmup Ratio = {args.warmup_ratio}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "myprint", "(", "f'Max Gradient Norm = {args.max_grad_norm}'", ",", "info", ".", "FILE_STDOUT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.prepare_batch_train": [[163, 275], ["list", "numpy.random.shuffle", "math.ceil", "range", "inputs.keys", "torch.pad_sequence().long().to", "torch.pad_sequence().float().to", "torch.pad_sequence().long().to", "torch.Tensor().long().to", "torch.Tensor().long().to", "torch.Tensor().long().to", "torch.Tensor().long().to", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long().to", "torch.Tensor().long().to", "torch.Tensor().long().to", "torch.Tensor().long().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "max", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "len", "rnn.pad_sequence().long().to.append", "rnn.pad_sequence().float().to.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "rnn.pad_sequence().long().to.append", "torch.Tensor().long.append", "doc_input.eid2tids.values", "batch_num_mentions_per_doc.append", "numpy.cumsum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.cat().float().to.append", "max", "itertools.permutations", "torch.cat().long().to.append", "torch.cat().long().to.append", "torch.cat().float().to.append", "torch.cat().float().to.append", "torch.cat().float().to.append", "torch.Tensor().long.append", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "torch.Tensor().long().to.append", "len", "list", "doc_num_mentions_per_doc.append", "sum", "torch.zeros.flatten", "doc_epair_types.append", "torch.full", "torch.full", "torch.full", "torch.full", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "doc_epair_tids.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "doc_epair_masks.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "sorted", "doc_epair_relations.append", "doc_epair_pooled_evidences.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "batch_epair_finegrained_evidences.append", "torch.pad_sequence().long", "torch.pad_sequence().float", "torch.pad_sequence().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "len", "len", "len", "doc_input.eids2rid2sids[].items", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "doc_epair_finegrained_evidences.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "doc_input.eid2tids.values", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "torch.pad_sequence", "torch.pad_sequence", "torch.pad_sequence", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "list", "len", "list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.pad", "torch.pad"], "function", ["None"], ["", "def", "prepare_batch_train", "(", "info", ",", "inputs", ",", "batch_size", ")", ":", "\n", "\n", "    ", "doc_titles", "=", "list", "(", "inputs", ".", "keys", "(", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "doc_titles", ")", "\n", "num_batch", "=", "math", ".", "ceil", "(", "len", "(", "doc_titles", ")", "/", "batch_size", ")", "\n", "\n", "for", "idx_batch", "in", "range", "(", "num_batch", ")", ":", "\n", "\n", "        ", "batch_titles", "=", "doc_titles", "[", "idx_batch", "*", "batch_size", ":", "(", "idx_batch", "+", "1", ")", "*", "batch_size", "]", "\n", "batch_inputs", "=", "[", "inputs", "[", "doc_title", "]", "for", "doc_title", "in", "batch_titles", "]", "\n", "\n", "batch_token_seqs", ",", "batch_token_masks", ",", "batch_token_types", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "batch_sent_tids", ",", "batch_num_sents_per_doc", "=", "[", "]", ",", "[", "]", "\n", "batch_mention_tids", ",", "batch_mention_coreferences", ",", "batch_num_mentions_per_doc", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "batch_epair_tids", ",", "batch_epair_types", ",", "batch_epair_masks", ",", "batch_epair_relations", ",", "batch_epair_pooled_evidences", ",", "batch_epair_finegrained_evidences", ",", "batch_num_epairs_per_doc", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "doc_input", "in", "batch_inputs", ":", "\n", "\n", "            ", "batch_token_seqs", ".", "append", "(", "doc_input", ".", "doc_tokens", ")", "\n", "batch_token_masks", ".", "append", "(", "torch", ".", "ones", "(", "doc_input", ".", "doc_tokens", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "doc_token_types", "=", "torch", ".", "zeros", "(", "doc_input", ".", "doc_tokens", ".", "shape", "[", "0", "]", ")", "\n", "for", "sid", "in", "range", "(", "len", "(", "doc_input", ".", "sid2tids", ")", ")", ":", "\n", "                ", "batch_sent_tids", ".", "append", "(", "doc_input", ".", "sid2tids", "[", "sid", "]", "[", "0", "]", ")", "\n", "doc_token_types", "[", "doc_input", ".", "sid2tids", "[", "sid", "]", "[", "0", "]", ":", "doc_input", ".", "sid2tids", "[", "sid", "]", "[", "1", "]", "]", "=", "sid", "%", "2", "\n", "", "batch_token_types", ".", "append", "(", "doc_token_types", ")", "\n", "batch_num_sents_per_doc", ".", "append", "(", "len", "(", "doc_input", ".", "sid2tids", ")", ")", "\n", "\n", "doc_mention_tids", ",", "doc_num_mentions_per_doc", "=", "[", "]", ",", "[", "]", "\n", "for", "tids", "in", "doc_input", ".", "eid2tids", ".", "values", "(", ")", ":", "\n", "                ", "doc_mention_tids", "+=", "list", "(", "tids", ")", "\n", "doc_num_mentions_per_doc", ".", "append", "(", "len", "(", "tids", ")", ")", "\n", "", "batch_mention_tids", "+=", "doc_mention_tids", "\n", "batch_num_mentions_per_doc", ".", "append", "(", "sum", "(", "doc_num_mentions_per_doc", ")", ")", "\n", "\n", "doc_mention_tids", "=", "np", ".", "cumsum", "(", "[", "0", "]", "+", "doc_mention_tids", ")", "\n", "doc_mention_coreferences", "=", "torch", ".", "zeros", "(", "(", "batch_num_mentions_per_doc", "[", "-", "1", "]", ",", "batch_num_mentions_per_doc", "[", "-", "1", "]", ")", ")", "\n", "for", "mid", "in", "range", "(", "len", "(", "doc_mention_tids", ")", "-", "1", ")", ":", "\n", "                ", "doc_mention_coreferences", "[", "doc_mention_tids", "[", "mid", "]", ":", "doc_mention_tids", "[", "mid", "+", "1", "]", ",", "doc_mention_tids", "[", "mid", "]", ":", "doc_mention_tids", "[", "mid", "+", "1", "]", "]", "=", "1", "\n", "", "batch_mention_coreferences", ".", "append", "(", "doc_mention_coreferences", ".", "flatten", "(", ")", ")", "\n", "\n", "max_epair_tids", "=", "max", "(", "[", "len", "(", "tids", ")", "for", "tids", "in", "doc_input", ".", "eid2tids", ".", "values", "(", ")", "]", ")", "\n", "doc_epair_tids", ",", "doc_epair_types", ",", "doc_epair_masks", ",", "doc_epair_relations", ",", "doc_epair_pooled_evidences", ",", "doc_epair_finegrained_evidences", ",", "doc_num_epairs_per_doc", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "0", "\n", "for", "eid_i", ",", "eid_j", "in", "permutations", "(", "doc_input", ".", "eid2etype", ",", "2", ")", ":", "\n", "\n", "                ", "doc_num_epairs_per_doc", "+=", "1", "\n", "doc_epair_types", ".", "append", "(", "(", "doc_input", ".", "eid2etype", "[", "eid_i", "]", ",", "doc_input", ".", "eid2etype", "[", "eid_j", "]", ")", ")", "\n", "\n", "epair_tids", "=", "torch", ".", "full", "(", "(", "2", ",", "max_epair_tids", ")", ",", "-", "1", ")", "\n", "epair_tids", "[", "0", ",", ":", "len", "(", "doc_input", ".", "eid2tids", "[", "eid_i", "]", ")", "]", "=", "torch", ".", "Tensor", "(", "list", "(", "doc_input", ".", "eid2tids", "[", "eid_i", "]", ")", ")", ".", "long", "(", ")", "\n", "epair_tids", "[", "1", ",", ":", "len", "(", "doc_input", ".", "eid2tids", "[", "eid_j", "]", ")", "]", "=", "torch", ".", "Tensor", "(", "list", "(", "doc_input", ".", "eid2tids", "[", "eid_j", "]", ")", ")", ".", "long", "(", ")", "\n", "doc_epair_tids", ".", "append", "(", "epair_tids", ")", "\n", "\n", "epair_masks", "=", "torch", ".", "ones", "(", "doc_input", ".", "doc_tokens", ".", "shape", "[", "0", "]", ")", "\n", "doc_epair_masks", ".", "append", "(", "epair_masks", ")", "\n", "\n", "epair_relations", "=", "torch", ".", "zeros", "(", "info", ".", "NUM_REL", ")", "\n", "epair_pooled_evidences", "=", "torch", ".", "zeros", "(", "len", "(", "doc_input", ".", "sid2tids", ")", ")", "\n", "for", "rid", ",", "sids", "in", "sorted", "(", "doc_input", ".", "eids2rid2sids", "[", "(", "eid_i", ",", "eid_j", ")", "]", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", ":", "\n", "                    ", "epair_relations", "[", "rid", "]", "=", "1", "\n", "epair_finegrained_evidences", "=", "torch", ".", "zeros", "(", "len", "(", "doc_input", ".", "sid2tids", ")", ")", "\n", "for", "sid", "in", "sids", ":", "\n", "                        ", "epair_pooled_evidences", "[", "sid", "]", "+=", "1", "\n", "epair_finegrained_evidences", "[", "sid", "]", "=", "1", "\n", "", "doc_epair_finegrained_evidences", ".", "append", "(", "epair_finegrained_evidences", ")", "\n", "", "doc_epair_relations", ".", "append", "(", "epair_relations", ")", "\n", "doc_epair_pooled_evidences", ".", "append", "(", "epair_pooled_evidences", ")", "\n", "\n", "", "batch_epair_tids", ".", "append", "(", "torch", ".", "stack", "(", "doc_epair_tids", ")", ")", "\n", "batch_epair_types", ".", "append", "(", "torch", ".", "Tensor", "(", "doc_epair_types", ")", ")", "\n", "batch_epair_masks", ".", "append", "(", "torch", ".", "stack", "(", "doc_epair_masks", ")", ")", "\n", "batch_epair_relations", ".", "append", "(", "torch", ".", "stack", "(", "doc_epair_relations", ")", ")", "\n", "batch_epair_pooled_evidences", ".", "append", "(", "torch", ".", "cat", "(", "doc_epair_pooled_evidences", ")", ")", "\n", "if", "len", "(", "doc_epair_finegrained_evidences", ")", "!=", "0", ":", "batch_epair_finegrained_evidences", ".", "append", "(", "torch", ".", "cat", "(", "doc_epair_finegrained_evidences", ")", ")", "\n", "batch_num_epairs_per_doc", ".", "append", "(", "doc_num_epairs_per_doc", ")", "\n", "\n", "", "batch_token_seqs", "=", "rnn", ".", "pad_sequence", "(", "batch_token_seqs", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", ".", "long", "(", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "batch_token_masks", "=", "rnn", ".", "pad_sequence", "(", "batch_token_masks", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", ".", "float", "(", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "batch_token_types", "=", "rnn", ".", "pad_sequence", "(", "batch_token_types", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", ".", "long", "(", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "\n", "batch_sent_tids", "=", "torch", ".", "Tensor", "(", "batch_sent_tids", ")", ".", "long", "(", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "batch_num_sents_per_doc", "=", "torch", ".", "Tensor", "(", "batch_num_sents_per_doc", ")", ".", "long", "(", ")", "\n", "\n", "batch_mention_tids", "=", "torch", ".", "Tensor", "(", "batch_mention_tids", ")", ".", "long", "(", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "batch_mention_coreferences", "=", "torch", ".", "cat", "(", "batch_mention_coreferences", ")", ".", "float", "(", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "\n", "max_epair_tids", "=", "max", "(", "[", "doc_epair_tids", ".", "shape", "[", "-", "1", "]", "for", "doc_epair_tids", "in", "batch_epair_tids", "]", ")", "\n", "batch_epair_tids", "=", "torch", ".", "cat", "(", "[", "F", ".", "pad", "(", "doc_epair_tids", ",", "(", "0", ",", "max_epair_tids", "-", "doc_epair_tids", ".", "shape", "[", "-", "1", "]", ")", ",", "value", "=", "-", "1", ")", "for", "doc_epair_tids", "in", "batch_epair_tids", "]", ")", ".", "long", "(", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "batch_epair_types", "=", "torch", ".", "cat", "(", "batch_epair_types", ")", ".", "long", "(", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "batch_epair_masks", "=", "torch", ".", "cat", "(", "[", "F", ".", "pad", "(", "doc_epair_masks", ",", "(", "0", ",", "batch_token_seqs", ".", "shape", "[", "-", "1", "]", "-", "doc_epair_masks", ".", "shape", "[", "-", "1", "]", ")", ",", "value", "=", "0", ")", "for", "doc_epair_masks", "in", "batch_epair_masks", "]", ")", ".", "float", "(", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "batch_epair_relations", "=", "torch", ".", "cat", "(", "batch_epair_relations", ")", ".", "float", "(", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "batch_epair_pooled_evidences", "=", "torch", ".", "cat", "(", "batch_epair_pooled_evidences", ")", ".", "float", "(", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "batch_epair_finegrained_evidences", "=", "torch", ".", "cat", "(", "batch_epair_finegrained_evidences", ")", ".", "float", "(", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "if", "len", "(", "batch_epair_finegrained_evidences", ")", "!=", "0", "else", "None", "\n", "batch_num_epairs_per_doc", "=", "torch", ".", "Tensor", "(", "batch_num_epairs_per_doc", ")", ".", "long", "(", ")", "\n", "\n", "batch_inputs", "=", "{", "'batch_token_seqs'", ":", "batch_token_seqs", ",", "\n", "'batch_token_masks'", ":", "batch_token_masks", ",", "\n", "'batch_token_types'", ":", "batch_token_types", ",", "\n", "'batch_sent_tids'", ":", "batch_sent_tids", ",", "\n", "'batch_num_sents_per_doc'", ":", "batch_num_sents_per_doc", ",", "\n", "'batch_mention_tids'", ":", "batch_mention_tids", ",", "\n", "'batch_mention_coreferences'", ":", "batch_mention_coreferences", ",", "\n", "'batch_num_mentions_per_doc'", ":", "batch_num_mentions_per_doc", ",", "\n", "'batch_epair_tids'", ":", "batch_epair_tids", ",", "\n", "'batch_epair_types'", ":", "batch_epair_types", ",", "\n", "'batch_epair_masks'", ":", "batch_epair_masks", ",", "\n", "'batch_epair_relations'", ":", "batch_epair_relations", ",", "\n", "'batch_epair_pooled_evidences'", ":", "batch_epair_pooled_evidences", ",", "\n", "'batch_epair_finegrained_evidences'", ":", "batch_epair_finegrained_evidences", ",", "\n", "'batch_num_epairs_per_doc'", ":", "batch_num_epairs_per_doc", "}", "\n", "\n", "yield", "batch_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.prepare_batch_test": [[277, 373], ["math.ceil", "range", "list", "list", "zip", "torch.pad_sequence().long().to", "torch.pad_sequence().float().to", "torch.pad_sequence().long().to", "max", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "inputs.keys", "preds.keys", "len", "rnn.pad_sequence().long().to.append", "rnn.pad_sequence().float().to.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "rnn.pad_sequence().long().to.append", "max", "batch_epair_ids.append", "torch.cat().long().to.append", "torch.cat().float().to.append", "torch.cat().float().to.append", "torch.Tensor().long.append", "torch.Tensor().long().to", "torch.Tensor().long().to", "torch.Tensor().long().to", "torch.Tensor().long().to", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "torch.Tensor().long.append", "doc_epair_ids.append", "torch.full", "torch.full", "torch.full", "torch.full", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "doc_epair_tids.append", "doc_epair_masks.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "doc_epair_relations.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "torch.pad_sequence().long", "torch.pad_sequence().float", "torch.pad_sequence().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor().long().to.append", "len", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "doc_input.sid2tids.items", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "list", "itertools.permutations", "doc_input.eid2tids.values", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.pad_sequence", "torch.pad_sequence", "torch.pad_sequence", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "doc_input.eids2rid2sids[].keys", "list", "preds[].items", "len", "list", "len", "list", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "rids.keys", "preds[].items", "torch.pad", "torch.pad", "list", "doc_input.eids2rid2sids.items", "rids.keys"], "function", ["None"], ["", "", "def", "prepare_batch_test", "(", "info", ",", "inputs", ",", "batch_size", ",", "infer_round", ",", "preds", "=", "None", ")", ":", "\n", "\n", "    ", "doc_titles", "=", "list", "(", "inputs", ".", "keys", "(", ")", ")", "if", "preds", "is", "None", "else", "list", "(", "preds", ".", "keys", "(", ")", ")", "\n", "num_batch", "=", "math", ".", "ceil", "(", "len", "(", "doc_titles", ")", "/", "batch_size", ")", "\n", "\n", "for", "idx_batch", "in", "range", "(", "num_batch", ")", ":", "\n", "\n", "        ", "batch_titles", "=", "doc_titles", "[", "idx_batch", "*", "batch_size", ":", "(", "idx_batch", "+", "1", ")", "*", "batch_size", "]", "\n", "batch_inputs", "=", "[", "inputs", "[", "doc_title", "]", "for", "doc_title", "in", "batch_titles", "]", "\n", "\n", "batch_token_seqs", ",", "batch_token_masks", ",", "batch_token_types", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "batch_sent_tids", ",", "batch_num_sents_per_doc", "=", "[", "]", ",", "[", "]", "\n", "batch_epair_ids", ",", "batch_epair_tids", ",", "batch_epair_masks", ",", "batch_epair_relations", ",", "batch_num_epairs_per_doc", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "doc_title", ",", "doc_input", "in", "zip", "(", "batch_titles", ",", "batch_inputs", ")", ":", "\n", "\n", "            ", "batch_token_seqs", ".", "append", "(", "doc_input", ".", "doc_tokens", ")", "\n", "batch_token_masks", ".", "append", "(", "torch", ".", "ones", "(", "doc_input", ".", "doc_tokens", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "doc_token_types", "=", "torch", ".", "zeros", "(", "doc_input", ".", "doc_tokens", ".", "shape", "[", "0", "]", ")", "\n", "for", "sid", "in", "range", "(", "len", "(", "doc_input", ".", "sid2tids", ")", ")", ":", "\n", "                ", "if", "infer_round", "==", "info", ".", "INFER_ROUND_FER", ":", "batch_sent_tids", ".", "append", "(", "doc_input", ".", "sid2tids", "[", "sid", "]", "[", "0", "]", ")", "\n", "doc_token_types", "[", "doc_input", ".", "sid2tids", "[", "sid", "]", "[", "0", "]", ":", "doc_input", ".", "sid2tids", "[", "sid", "]", "[", "1", "]", "]", "=", "sid", "%", "2", "\n", "", "batch_token_types", ".", "append", "(", "doc_token_types", ")", "\n", "if", "infer_round", "==", "info", ".", "INFER_ROUND_FER", ":", "batch_num_sents_per_doc", ".", "append", "(", "len", "(", "doc_input", ".", "sid2tids", ")", ")", "\n", "\n", "if", "infer_round", "==", "info", ".", "INFER_ROUND_FIRST", ":", "\n", "                ", "epair2rids", "=", "[", "[", "epair", ",", "list", "(", "doc_input", ".", "eids2rid2sids", "[", "epair", "]", ".", "keys", "(", ")", ")", "]", "for", "epair", "in", "permutations", "(", "doc_input", ".", "eid2etype", ",", "2", ")", "]", "\n", "", "elif", "infer_round", "==", "info", ".", "INFER_ROUND_FER", ":", "\n", "                ", "epair2rids", "=", "[", "[", "epair", ",", "list", "(", "rids", ".", "keys", "(", ")", ")", "]", "for", "epair", ",", "rids", "in", "preds", "[", "doc_title", "]", ".", "items", "(", ")", "]", "\n", "", "elif", "infer_round", "==", "info", ".", "INFER_ROUND_MASK", ":", "\n", "                ", "epair2rids", "=", "[", "[", "epair", ",", "[", "rid", "]", "]", "for", "epair", ",", "rids", "in", "preds", "[", "doc_title", "]", ".", "items", "(", ")", "for", "rid", "in", "rids", "]", "\n", "", "elif", "infer_round", "==", "info", ".", "INFER_ROUND_DOC", ":", "\n", "                ", "epair2rids", "=", "[", "[", "epair", ",", "list", "(", "rids", ".", "keys", "(", ")", ")", "]", "for", "epair", ",", "rids", "in", "doc_input", ".", "eids2rid2sids", ".", "items", "(", ")", "]", "\n", "\n", "", "max_epair_tids", "=", "max", "(", "[", "len", "(", "tids", ")", "for", "tids", "in", "doc_input", ".", "eid2tids", ".", "values", "(", ")", "]", ")", "\n", "doc_epair_ids", ",", "doc_epair_tids", ",", "doc_epair_masks", ",", "doc_epair_relations", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "epair", ",", "rids", "in", "epair2rids", ":", "\n", "\n", "                ", "doc_epair_ids", ".", "append", "(", "epair", ")", "\n", "\n", "epair_tids", "=", "torch", ".", "full", "(", "(", "2", ",", "max_epair_tids", ")", ",", "-", "1", ")", "\n", "epair_tids", "[", "0", ",", ":", "len", "(", "doc_input", ".", "eid2tids", "[", "epair", "[", "0", "]", "]", ")", "]", "=", "torch", ".", "Tensor", "(", "list", "(", "doc_input", ".", "eid2tids", "[", "epair", "[", "0", "]", "]", ")", ")", ".", "long", "(", ")", "\n", "epair_tids", "[", "1", ",", ":", "len", "(", "doc_input", ".", "eid2tids", "[", "epair", "[", "1", "]", "]", ")", "]", "=", "torch", ".", "Tensor", "(", "list", "(", "doc_input", ".", "eid2tids", "[", "epair", "[", "1", "]", "]", ")", ")", ".", "long", "(", ")", "\n", "doc_epair_tids", ".", "append", "(", "epair_tids", ")", "\n", "\n", "if", "infer_round", "==", "info", ".", "INFER_ROUND_MASK", ":", "\n", "                    ", "epair_masks", "=", "torch", ".", "zeros", "(", "doc_input", ".", "doc_tokens", ".", "shape", "[", "0", "]", ")", "\n", "for", "sid", ",", "tids", "in", "doc_input", ".", "sid2tids", ".", "items", "(", ")", ":", "\n", "                        ", "epair_masks", "[", "tids", "[", "0", "]", ":", "tids", "[", "1", "]", "]", "=", "preds", "[", "doc_title", "]", "[", "epair", "]", "[", "rids", "[", "0", "]", "]", "[", "sid", "]", "\n", "", "", "else", ":", "\n", "                    ", "epair_masks", "=", "torch", ".", "ones", "(", "doc_input", ".", "doc_tokens", ".", "shape", "[", "0", "]", ")", "\n", "", "doc_epair_masks", ".", "append", "(", "epair_masks", ")", "\n", "\n", "epair_relations", "=", "torch", ".", "zeros", "(", "info", ".", "NUM_REL", ")", "\n", "for", "rid", "in", "rids", ":", "\n", "                    ", "epair_relations", "[", "rid", "]", "=", "1", "\n", "", "doc_epair_relations", ".", "append", "(", "epair_relations", ")", "\n", "\n", "", "batch_epair_ids", ".", "append", "(", "doc_epair_ids", ")", "\n", "batch_epair_tids", ".", "append", "(", "torch", ".", "stack", "(", "doc_epair_tids", ")", ")", "\n", "batch_epair_masks", ".", "append", "(", "torch", ".", "stack", "(", "doc_epair_masks", ")", ")", "\n", "batch_epair_relations", ".", "append", "(", "torch", ".", "stack", "(", "doc_epair_relations", ")", ")", "\n", "batch_num_epairs_per_doc", ".", "append", "(", "len", "(", "epair2rids", ")", ")", "\n", "\n", "", "if", "infer_round", "==", "info", ".", "INFER_ROUND_DOC", ":", "\n", "            ", "batch_titles", "=", "[", "doc_title", "[", "0", "]", "for", "doc_title", "in", "batch_titles", "]", "\n", "\n", "", "batch_token_seqs", "=", "rnn", ".", "pad_sequence", "(", "batch_token_seqs", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", ".", "long", "(", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "batch_token_masks", "=", "rnn", ".", "pad_sequence", "(", "batch_token_masks", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", ".", "float", "(", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "batch_token_types", "=", "rnn", ".", "pad_sequence", "(", "batch_token_types", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", ".", "long", "(", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "\n", "if", "infer_round", "==", "info", ".", "INFER_ROUND_FER", ":", "\n", "            ", "batch_sent_tids", "=", "torch", ".", "Tensor", "(", "batch_sent_tids", ")", ".", "long", "(", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "batch_num_sents_per_doc", "=", "torch", ".", "Tensor", "(", "batch_num_sents_per_doc", ")", ".", "long", "(", ")", "\n", "\n", "", "max_epair_tids", "=", "max", "(", "[", "doc_epair_tids", ".", "shape", "[", "-", "1", "]", "for", "doc_epair_tids", "in", "batch_epair_tids", "]", ")", "\n", "batch_epair_tids", "=", "torch", ".", "cat", "(", "[", "F", ".", "pad", "(", "doc_epair_tids", ",", "(", "0", ",", "max_epair_tids", "-", "doc_epair_tids", ".", "shape", "[", "-", "1", "]", ")", ",", "value", "=", "-", "1", ")", "for", "doc_epair_tids", "in", "batch_epair_tids", "]", ")", ".", "long", "(", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "batch_epair_masks", "=", "torch", ".", "cat", "(", "[", "F", ".", "pad", "(", "doc_epair_masks", ",", "(", "0", ",", "batch_token_seqs", ".", "shape", "[", "-", "1", "]", "-", "doc_epair_masks", ".", "shape", "[", "-", "1", "]", ")", ",", "value", "=", "0", ")", "for", "doc_epair_masks", "in", "batch_epair_masks", "]", ")", ".", "float", "(", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "batch_epair_relations", "=", "torch", ".", "cat", "(", "batch_epair_relations", ")", ".", "float", "(", ")", ".", "to", "(", "info", ".", "DEVICE_GPU", ")", "\n", "batch_num_epairs_per_doc", "=", "torch", ".", "Tensor", "(", "batch_num_epairs_per_doc", ")", ".", "long", "(", ")", "\n", "\n", "batch_inputs", "=", "{", "'batch_titles'", ":", "batch_titles", ",", "\n", "'batch_token_seqs'", ":", "batch_token_seqs", ",", "\n", "'batch_token_masks'", ":", "batch_token_masks", ",", "\n", "'batch_token_types'", ":", "batch_token_types", ",", "\n", "'batch_sent_tids'", ":", "batch_sent_tids", ",", "\n", "'batch_num_sents_per_doc'", ":", "batch_num_sents_per_doc", ",", "\n", "'batch_epair_ids'", ":", "batch_epair_ids", ",", "\n", "'batch_epair_tids'", ":", "batch_epair_tids", ",", "\n", "'batch_epair_masks'", ":", "batch_epair_masks", ",", "\n", "'batch_epair_relations'", ":", "batch_epair_relations", ",", "\n", "'batch_epair_finegrained_evidences'", ":", "None", ",", "\n", "'batch_num_epairs_per_doc'", ":", "batch_num_epairs_per_doc", "}", "\n", "\n", "yield", "batch_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaoyuxin1002_sais.Code.util.feed_batch": [[375, 406], ["enumerate", "batch_inputs[].tolist", "batch_inputs[].to", "torch.split.to", "torch.split", "torch.split", "torch.split", "torch.split", "zip", "enumerate", "torch.split", "torch.split", "torch.split", "torch.split", "batch_triplets.append", "[].nonzero().flatten().tolist", "batch_triplets.append", "[].nonzero().flatten", "batch_predictions.append", "batch_predictions.append", "epair_preds[].item", "[].nonzero"], "function", ["None"], ["", "", "def", "feed_batch", "(", "info", ",", "batch_inputs", ",", "batch_preds", ",", "infer_round", ")", ":", "\n", "\n", "    ", "batch_titles", ",", "batch_epair_ids", "=", "batch_inputs", "[", "'batch_titles'", "]", ",", "batch_inputs", "[", "'batch_epair_ids'", "]", "\n", "batch_num_epairs_per_doc", ",", "batch_num_sents_per_doc", "=", "batch_inputs", "[", "'batch_num_epairs_per_doc'", "]", ".", "tolist", "(", ")", ",", "batch_inputs", "[", "'batch_num_sents_per_doc'", "]", "\n", "batch_epair_relations", ",", "batch_preds", "=", "batch_inputs", "[", "'batch_epair_relations'", "]", ".", "to", "(", "info", ".", "DEVICE_CPU", ")", ",", "batch_preds", ".", "to", "(", "info", ".", "DEVICE_CPU", ")", "\n", "\n", "if", "infer_round", "!=", "info", ".", "INFER_ROUND_FIRST", ":", "\n", "        ", "batch_epair_relations", "=", "torch", ".", "split", "(", "batch_epair_relations", ",", "batch_num_epairs_per_doc", ",", "dim", "=", "0", ")", "\n", "if", "infer_round", "==", "info", ".", "INFER_ROUND_FER", ":", "cum_num_sents", "=", "0", "\n", "else", ":", "batch_preds", "=", "torch", ".", "split", "(", "batch_preds", ",", "batch_num_epairs_per_doc", ",", "dim", "=", "0", ")", "\n", "\n", "", "batch_triplets", ",", "batch_predictions", "=", "[", "]", ",", "[", "]", "\n", "for", "doc_idx", ",", "(", "doc_title", ",", "doc_epair_ids", ")", "in", "enumerate", "(", "zip", "(", "batch_titles", ",", "batch_epair_ids", ")", ")", ":", "\n", "        ", "for", "epair_idx", ",", "epair_ids", "in", "enumerate", "(", "doc_epair_ids", ")", ":", "\n", "            ", "if", "infer_round", "==", "info", ".", "INFER_ROUND_FIRST", ":", "\n", "                ", "batch_triplets", ".", "append", "(", "(", "doc_title", ",", "*", "epair_ids", ")", ")", "\n", "", "else", ":", "\n", "                ", "for", "rid", "in", "batch_epair_relations", "[", "doc_idx", "]", "[", "epair_idx", "]", ".", "nonzero", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", ":", "\n", "                    ", "batch_triplets", ".", "append", "(", "(", "doc_title", ",", "*", "epair_ids", ",", "rid", ")", ")", "\n", "if", "infer_round", "==", "info", ".", "INFER_ROUND_FER", ":", "\n", "                        ", "doc_num_sents", "=", "batch_num_sents_per_doc", "[", "doc_idx", "]", "\n", "batch_predictions", ".", "append", "(", "batch_preds", "[", "cum_num_sents", ":", "cum_num_sents", "+", "doc_num_sents", "]", ")", "\n", "cum_num_sents", "+=", "doc_num_sents", "\n", "", "else", ":", "\n", "                        ", "epair_preds", "=", "batch_preds", "[", "doc_idx", "]", "[", "epair_idx", "]", "\n", "batch_predictions", ".", "append", "(", "epair_preds", "[", "rid", "]", ".", "item", "(", ")", ")", "\n", "\n", "", "", "", "", "", "if", "infer_round", "==", "info", ".", "INFER_ROUND_FIRST", ":", "\n", "        ", "return", "batch_triplets", ",", "batch_epair_relations", ",", "batch_preds", "\n", "\n", "", "return", "batch_triplets", ",", "batch_predictions", "", "", ""]]}