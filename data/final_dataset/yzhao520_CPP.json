{"home.repos.pwc.inspect_result.yzhao520_CPP.utils.cpp_encoding.get_extrinsic_channel": [[4, 62], ["cpp_encoding._get_intrinsic_matrix", "torch.bmm", "torch.zeros", "torch.tensor().reshape", "torch.transpose", "normal.unsqueeze().expand.unsqueeze().expand", "normal_t.unsqueeze().expand.unsqueeze().expand", "torch.stack().unsqueeze().expand", "torch.bmm", "torch.tensor().reshape", "torch.transpose", "k_vec_t.unsqueeze().expand.unsqueeze().expand", "z_f.reshape", "torch.bmm", "z_c.reshape", "torch.zeros", "cpp_encoding.Rotx", "cpp_encoding.Rotz", "torch.tensor", "torch.tensor", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.atan", "torch.zeros_like", "torch.flip", "torch.tensor", "normal.unsqueeze().expand.unsqueeze", "normal_t.unsqueeze().expand.unsqueeze", "torch.stack().unsqueeze", "torch.bmm", "torch.bmm", "torch.inverse", "scale_f.expand_as", "torch.tensor", "k_vec_t.unsqueeze().expand.unsqueeze", "torch.bmm", "torch.bmm", "torch.inverse", "scale_c.expand_as", "torch.atan.dim", "torch.bmm", "torch.inverse", "torch.bmm", "torch.inverse", "torch.stack", "grid_x.reshape", "grid_y.reshape", "torch.ones_like", "grid_x.reshape"], "function", ["home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug._get_intrinsic_matrix", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.Rotx", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.Rotz"], ["def", "get_extrinsic_channel", "(", "imageTensor", ",", "focal_length", ",", "p_pt", ",", "extrinsic_para", ",", "CEILING_HEIGHT", ",", "inverse_tangent", "=", "True", ",", "augmentation", "=", "None", ")", ":", "\n", "\t", "B", ",", "H", ",", "W", "=", "imageTensor", ".", "shape", "[", "0", "]", ",", "imageTensor", ".", "shape", "[", "2", "]", ",", "imageTensor", ".", "shape", "[", "3", "]", "\n", "K", "=", "_get_intrinsic_matrix", "(", "focal_length", ",", "p_pt", ",", "B", ")", "\n", "\n", "# make sure to adapt to your coordinate system ", "\n", "cam_height", ",", "roll", "=", "extrinsic_para", "[", ":", ",", "2", "]", ",", "extrinsic_para", "[", ":", ",", "4", "]", "# all with size: [B]", "\n", "pitch", "=", "extrinsic_para", "[", ":", ",", "3", "]", "-", "np", ".", "pi", "/", "2", "\n", "R", "=", "torch", ".", "bmm", "(", "Rotx", "(", "pitch", ")", ",", "Rotz", "(", "roll", ")", ")", "# B x 3 x 3", "\n", "\n", "translation_v", "=", "torch", ".", "zeros", "(", "(", "B", ",", "3", ",", "1", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "translation_v", "[", ":", ",", "1", ",", "0", "]", "=", "-", "cam_height", "\n", "\n", "normal", "=", "torch", ".", "tensor", "(", "(", "0", ",", "-", "1", ",", "0", ")", ",", "dtype", "=", "torch", ".", "float", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "normal_t", "=", "torch", ".", "transpose", "(", "normal", ",", "0", ",", "1", ")", "\n", "\n", "# convert normal and normal_t(transpose) to batches", "\n", "normal", "=", "normal", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "B", ",", "-", "1", ",", "1", ")", "\n", "normal_t", "=", "normal_t", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "B", ",", "1", ",", "-", "1", ")", "\n", "\n", "grid_y", ",", "grid_x", "=", "np", ".", "mgrid", "[", "0", ":", "H", ",", "0", ":", "W", "]", "\n", "grid_y", ",", "grid_x", "=", "torch", ".", "tensor", "(", "grid_y", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "torch", ".", "tensor", "(", "grid_x", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "q", "=", "torch", ".", "stack", "(", "(", "grid_x", ".", "reshape", "(", "-", "1", ")", ",", "grid_y", ".", "reshape", "(", "-", "1", ")", ",", "torch", ".", "ones_like", "(", "grid_x", ".", "reshape", "(", "-", "1", ")", ")", ")", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "B", ",", "3", ",", "H", "*", "W", ")", "\n", "\n", "# computing points intersecting ground plane", "\n", "scale_f", "=", "-", "torch", ".", "bmm", "(", "normal_t", ",", "translation_v", ")", "/", "torch", ".", "bmm", "(", "torch", ".", "bmm", "(", "torch", ".", "bmm", "(", "normal_t", ",", "R", ")", ",", "torch", ".", "inverse", "(", "K", ")", ")", ",", "q", ")", "\n", "p_f", "=", "torch", ".", "bmm", "(", "torch", ".", "bmm", "(", "R", ",", "torch", ".", "inverse", "(", "K", ")", ")", ",", "q", ")", "\n", "p_f", "=", "p_f", "*", "scale_f", ".", "expand_as", "(", "p_f", ")", "+", "translation_v", "\n", "k_vec", "=", "torch", ".", "tensor", "(", "(", "0", ",", "0", ",", "1", ")", ",", "dtype", "=", "torch", ".", "float", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "k_vec_t", "=", "torch", ".", "transpose", "(", "k_vec", ",", "0", ",", "1", ")", "\n", "k_vec_t", "=", "k_vec_t", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "B", ",", "1", ",", "-", "1", ")", "\n", "z_f", "=", "scale_f", "*", "torch", ".", "bmm", "(", "k_vec_t", ",", "q", ")", "\n", "\n", "z_f_channel", "=", "z_f", ".", "reshape", "(", "B", ",", "1", ",", "H", ",", "W", ")", "\n", "\n", "# computing points intersecting celing plane", "\n", "scale_c", "=", "(", "CEILING_HEIGHT", "-", "torch", ".", "bmm", "(", "normal_t", ",", "translation_v", ")", ")", "/", "torch", ".", "bmm", "(", "torch", ".", "bmm", "(", "torch", ".", "bmm", "(", "normal_t", ",", "R", ")", ",", "torch", ".", "inverse", "(", "K", ")", ")", ",", "q", ")", "\n", "p_c", "=", "torch", ".", "bmm", "(", "torch", ".", "bmm", "(", "R", ",", "torch", ".", "inverse", "(", "K", ")", ")", ",", "q", ")", "\n", "p_c", "=", "p_c", "*", "scale_c", ".", "expand_as", "(", "p_c", ")", "+", "translation_v", "\n", "z_c", "=", "scale_c", "*", "torch", ".", "bmm", "(", "k_vec_t", ",", "q", ")", "\n", "\n", "z_c_channel", "=", "z_c", ".", "reshape", "(", "B", ",", "1", ",", "H", ",", "W", ")", "\n", "\n", "extrinsic_channel", "=", "torch", ".", "zeros", "(", "B", ",", "1", ",", "H", ",", "W", ")", "\n", "extrinsic_channel", "[", "z_f_channel", ">", "0.", "]", "=", "z_f_channel", "[", "z_f_channel", ">", "0.", "]", "\n", "extrinsic_channel", "[", "z_c_channel", ">", "0.", "]", "=", "z_c_channel", "[", "z_c_channel", ">", "0.", "]", "\n", "\n", "if", "inverse_tangent", ":", "\n", "\t\t", "extrinsic_channel", "=", "torch", ".", "atan", "(", "extrinsic_channel", ")", "\n", "\n", "", "if", "augmentation", "is", "not", "None", ":", "\n", "# augmentation is a bool tensor with size B, 1 means lrflip aug and 0 means original", "\n", "\t\t", "assert", "extrinsic_channel", ".", "dim", "(", ")", "==", "4", "\n", "extrinsic_channel_aug", "=", "torch", ".", "zeros_like", "(", "extrinsic_channel", ")", "\n", "extrinsic_channel_aug", "[", "augmentation", "]", "=", "torch", ".", "flip", "(", "extrinsic_channel", "[", "augmentation", "]", ",", "[", "1", ",", "3", "]", ")", "\n", "extrinsic_channel_aug", "[", "~", "augmentation", "]", "=", "extrinsic_channel", "[", "~", "augmentation", "]", "\n", "extrinsic_channel", "=", "extrinsic_channel_aug", "\n", "\n", "", "return", "extrinsic_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.cpp_encoding._get_intrinsic_matrix": [[63, 98], ["torch.zeros", "isinstance", "isinstance", "torch.zeros.reshape", "isinstance", "torch.is_tensor", "torch.is_tensor", "ValueError", "ValueError", "p_pt.dim", "focal_length.dim", "focal_length.dim", "ValueError"], "function", ["None"], ["", "def", "_get_intrinsic_matrix", "(", "focal_length", ",", "p_pt", ",", "batch_size", ")", ":", "\n", "\t", "K", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "9", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "K", "[", ":", ",", "-", "1", "]", "=", "1.", "\n", "if", "isinstance", "(", "focal_length", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "# suggest fx = fy for all samples", "\n", "\t\t", "K", "[", ":", ",", "0", "]", "=", "focal_length", "\n", "K", "[", ":", ",", "4", "]", "=", "focal_length", "\n", "", "elif", "isinstance", "(", "focal_length", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "# suggest fx, fy for all samples", "\n", "\t\t", "K", "[", ":", ",", "0", "]", "=", "focal_length", "[", "0", "]", "\n", "K", "[", ":", ",", "4", "]", "=", "focal_length", "[", "1", "]", "\n", "", "elif", "torch", ".", "is_tensor", "(", "focal_length", ")", ":", "\n", "\t\t", "if", "focal_length", ".", "dim", "(", ")", "==", "1", ":", "\n", "# suggest fx = fy for indivdual sample", "\n", "\t\t\t", "K", "[", ":", ",", "0", "]", "=", "focal_length", "\n", "K", "[", ":", ",", "4", "]", "=", "focal_length", "\n", "", "elif", "focal_length", ".", "dim", "(", ")", "==", "2", ":", "\n", "# suggest fx, fy for indivdual sample", "\n", "\t\t\t", "K", "[", ":", ",", "0", "]", "=", "focal_length", "[", ":", ",", "0", "]", "\n", "K", "[", ":", ",", "4", "]", "=", "focal_length", "[", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "'focal length tensor has to have shape of [B, ] or [B, 2]'", ")", "\n", "", "", "else", ":", "\n", "\t\t", "raise", "ValueError", "(", "'focal length variable should be either int/float, list/tuple or tensor of size [B, ]/[B, 2]'", ")", "\n", "\n", "", "if", "isinstance", "(", "p_pt", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "\t\t", "K", "[", ":", ",", "2", "]", "=", "p_pt", "[", "1", "]", "\n", "K", "[", ":", ",", "5", "]", "=", "p_pt", "[", "0", "]", "\n", "", "elif", "torch", ".", "is_tensor", "(", "p_pt", ")", ":", "\n", "\t\t", "assert", "p_pt", ".", "dim", "(", ")", "==", "2", "\n", "K", "[", ":", ",", "2", "]", "=", "p_pt", "[", ":", ",", "1", "]", "\n", "K", "[", ":", ",", "5", "]", "=", "p_pt", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "\t\t", "raise", "ValueError", "(", "'principle point variable should be either list/tuple or tensor of size [B, 2]'", ")", "\n", "", "return", "K", ".", "reshape", "(", "batch_size", ",", "3", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.cpp_encoding.Rotx": [[100, 127], ["torch.zeros", "torch.cos", "torch.sin", "torch.ones", "Rx.reshape.reshape"], "function", ["None"], ["", "def", "Rotx", "(", "t", ")", ":", "\n", "\t", "\"\"\"\n\t\tRotation about the x-axis.\n\t\tnp.array([[1,  0,  0], [0,  c, -s], [0,  s,  c]])\n\n\t\t-- input t shape B x 1\n\t\t-- return B x 3 x 3\n\t\"\"\"", "\n", "B", "=", "t", ".", "shape", "[", "0", "]", "\n", "Rx", "=", "torch", ".", "zeros", "(", "(", "B", ",", "9", ",", "1", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "c", "=", "torch", ".", "cos", "(", "t", ")", "\n", "s", "=", "torch", ".", "sin", "(", "t", ")", "\n", "ones", "=", "torch", ".", "ones", "(", "B", ")", "\n", "# print(t)", "\n", "# print(c.shape, c)", "\n", "# print(ones.shape, ones)", "\n", "\n", "Rx", "[", ":", ",", "0", ",", "0", "]", "=", "ones", "\n", "Rx", "[", ":", ",", "4", ",", "0", "]", "=", "c", "\n", "Rx", "[", ":", ",", "5", ",", "0", "]", "=", "-", "s", "\n", "Rx", "[", ":", ",", "7", ",", "0", "]", "=", "s", "\n", "Rx", "[", ":", ",", "8", ",", "0", "]", "=", "c", "\n", "\n", "Rx", "=", "Rx", ".", "reshape", "(", "B", ",", "3", ",", "3", ")", "\n", "\n", "return", "Rx", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.cpp_encoding.Roty": [[129, 153], ["torch.zeros", "torch.cos", "torch.sin", "torch.ones", "Ry.reshape.reshape"], "function", ["None"], ["", "def", "Roty", "(", "t", ")", ":", "\n", "\t", "\"\"\"\n\t\tRotation about the x-axis.\n\t\tnp.array([[c,  0,  s], [0,  1,  0], [-s, 0,  c]])\n\n\t\t-- input t shape B x 1\n\t\t-- return B x 3 x 3\n\t\"\"\"", "\n", "B", "=", "t", ".", "shape", "[", "0", "]", "\n", "Ry", "=", "torch", ".", "zeros", "(", "(", "B", ",", "9", ",", "1", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "c", "=", "torch", ".", "cos", "(", "t", ")", "\n", "s", "=", "torch", ".", "sin", "(", "t", ")", "\n", "ones", "=", "torch", ".", "ones", "(", "B", ")", "\n", "\n", "Ry", "[", ":", ",", "0", ",", "0", "]", "=", "c", "\n", "Ry", "[", ":", ",", "2", ",", "0", "]", "=", "s", "\n", "Ry", "[", ":", ",", "4", ",", "0", "]", "=", "ones", "\n", "Ry", "[", ":", ",", "6", ",", "0", "]", "=", "-", "s", "\n", "Ry", "[", ":", ",", "8", ",", "0", "]", "=", "c", "\n", "\n", "Ry", "=", "Ry", ".", "reshape", "(", "B", ",", "3", ",", "3", ")", "\n", "\n", "return", "Ry", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.cpp_encoding.Rotz": [[154, 178], ["torch.zeros", "torch.cos", "torch.sin", "torch.ones", "Rz.reshape.reshape"], "function", ["None"], ["", "def", "Rotz", "(", "t", ")", ":", "\n", "\t", "\"\"\"\n\t\tRotation about the z-axis.\n\t\tnp.array([[c, -s,  0], [s,  c,  0], [0,  0,  1]])\n\n\t\t-- input t shape B x 1\n\t\t-- return B x 3 x 3\n\t\"\"\"", "\n", "B", "=", "t", ".", "shape", "[", "0", "]", "\n", "Rz", "=", "torch", ".", "zeros", "(", "(", "B", ",", "9", ",", "1", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "c", "=", "torch", ".", "cos", "(", "t", ")", "\n", "s", "=", "torch", ".", "sin", "(", "t", ")", "\n", "ones", "=", "torch", ".", "ones", "(", "B", ")", "\n", "\n", "Rz", "[", ":", ",", "0", ",", "0", "]", "=", "c", "\n", "Rz", "[", ":", ",", "1", ",", "0", "]", "=", "-", "s", "\n", "Rz", "[", ":", ",", "3", ",", "0", "]", "=", "s", "\n", "Rz", "[", ":", ",", "4", ",", "0", "]", "=", "c", "\n", "Rz", "[", ":", ",", "8", ",", "0", "]", "=", "ones", "\n", "\n", "Rz", "=", "Rz", ".", "reshape", "(", "B", ",", "3", ",", "3", ")", "\n", "\n", "return", "Rz", "", "", ""]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.Result.__init__": [[12, 20], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "mask_min", ",", "mask_max", ")", ":", "\n", "\t\t", "self", ".", "irmse", ",", "self", ".", "imae", "=", "0", ",", "0", "\n", "self", ".", "mse", ",", "self", ".", "rmse", ",", "self", ".", "mae", "=", "0", ",", "0", ",", "0", "\n", "self", ".", "absrel", ",", "self", ".", "lg10", "=", "0", ",", "0", "\n", "self", ".", "delta1", ",", "self", ".", "delta2", ",", "self", ".", "delta3", "=", "0", ",", "0", ",", "0", "\n", "self", ".", "data_time", ",", "self", ".", "gpu_time", "=", "0", ",", "0", "\n", "self", ".", "mask_min", "=", "mask_min", "\n", "self", ".", "mask_max", "=", "mask_max", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.Result.set_to_worst": [[21, 27], ["None"], "methods", ["None"], ["", "def", "set_to_worst", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "irmse", ",", "self", ".", "imae", "=", "np", ".", "inf", ",", "np", ".", "inf", "\n", "self", ".", "mse", ",", "self", ".", "rmse", ",", "self", ".", "mae", "=", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "\n", "self", ".", "absrel", ",", "self", ".", "lg10", "=", "np", ".", "inf", ",", "np", ".", "inf", "\n", "self", ".", "delta1", ",", "self", ".", "delta2", ",", "self", ".", "delta3", "=", "0", ",", "0", ",", "0", "\n", "self", ".", "data_time", ",", "self", ".", "gpu_time", "=", "0", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.Result.update": [[28, 34], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "irmse", ",", "imae", ",", "mse", ",", "rmse", ",", "mae", ",", "absrel", ",", "lg10", ",", "delta1", ",", "delta2", ",", "delta3", ",", "gpu_time", ",", "data_time", ")", ":", "\n", "\t\t", "self", ".", "irmse", ",", "self", ".", "imae", "=", "irmse", ",", "imae", "\n", "self", ".", "mse", ",", "self", ".", "rmse", ",", "self", ".", "mae", "=", "mse", ",", "rmse", ",", "mae", "\n", "self", ".", "absrel", ",", "self", ".", "lg10", "=", "absrel", ",", "lg10", "\n", "self", ".", "delta1", ",", "self", ".", "delta2", ",", "self", ".", "delta3", "=", "delta1", ",", "delta2", ",", "delta3", "\n", "self", ".", "data_time", ",", "self", ".", "gpu_time", "=", "data_time", ",", "gpu_time", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.Result.evaluate": [[35, 70], ["numpy.logical_and", "float", "math.sqrt", "math.sqrt", "float", "float", "float", "float", "torch.max", "float", "float", "float", "math.sqrt", "float", "torch.pow().mean", "float", "abs_diff.mean", "torch.pow().mean", "abs_inv_diff.mean", "torch.pow", "torch.pow", "torch.log", "torch.log", "metrics.log10", "metrics.log10"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.log10", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.log10"], ["", "def", "evaluate", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "\n", "# not quite sure whether this is useful", "\n", "# target[target < self.mask_min] = self.mask_min", "\n", "# target[target > self.mask_max] = self.mask_max", "\n", "\n", "# valid_mask = np.logical_and(target > self.mask_min, target < self.mask_max)", "\n", "\t\t", "valid_mask", "=", "np", ".", "logical_and", "(", "target", ">=", "self", ".", "mask_min", ",", "target", "<=", "self", ".", "mask_max", ")", "\n", "output", "=", "output", "[", "valid_mask", "]", "\n", "target", "=", "target", "[", "valid_mask", "]", "\n", "\n", "abs_diff", "=", "(", "output", "-", "target", ")", ".", "abs", "(", ")", "\n", "diff", "=", "(", "output", "-", "target", ")", "\n", "\n", "self", ".", "mse", "=", "float", "(", "(", "torch", ".", "pow", "(", "abs_diff", ",", "2", ")", ")", ".", "mean", "(", ")", ")", "\n", "self", ".", "rmse", "=", "math", ".", "sqrt", "(", "self", ".", "mse", ")", "\n", "self", ".", "rmselog", "=", "math", ".", "sqrt", "(", "float", "(", "(", "(", "torch", ".", "log", "(", "target", ")", "-", "torch", ".", "log", "(", "output", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ")", ")", "\n", "\n", "self", ".", "mae", "=", "float", "(", "abs_diff", ".", "mean", "(", ")", ")", "\n", "self", ".", "lg10", "=", "float", "(", "(", "log10", "(", "output", ")", "-", "log10", "(", "target", ")", ")", ".", "abs", "(", ")", ".", "mean", "(", ")", ")", "\n", "self", ".", "absrel", "=", "float", "(", "(", "abs_diff", "/", "target", ")", ".", "mean", "(", ")", ")", "\n", "self", ".", "sqrel", "=", "float", "(", "(", "(", "diff", "**", "2", ")", "/", "target", ")", ".", "mean", "(", ")", ")", "\n", "\n", "maxRatio", "=", "torch", ".", "max", "(", "output", "/", "target", ",", "target", "/", "output", ")", "\n", "self", ".", "delta1", "=", "float", "(", "(", "maxRatio", "<", "1.25", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ")", "\n", "self", ".", "delta2", "=", "float", "(", "(", "maxRatio", "<", "1.25", "**", "2", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ")", "\n", "self", ".", "delta3", "=", "float", "(", "(", "maxRatio", "<", "1.25", "**", "3", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ")", "\n", "self", ".", "data_time", "=", "0", "\n", "self", ".", "gpu_time", "=", "0", "\n", "\n", "inv_output", "=", "1", "/", "output", "\n", "inv_target", "=", "1", "/", "target", "\n", "abs_inv_diff", "=", "(", "inv_output", "-", "inv_target", ")", ".", "abs", "(", ")", "\n", "self", ".", "irmse", "=", "math", ".", "sqrt", "(", "(", "torch", ".", "pow", "(", "abs_inv_diff", ",", "2", ")", ")", ".", "mean", "(", ")", ")", "\n", "self", ".", "imae", "=", "float", "(", "abs_inv_diff", ".", "mean", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.Result.individual_results": [[71, 116], ["torch.zeros", "range", "numpy.logical_and", "float", "math.sqrt", "math.sqrt", "float", "float", "float", "torch.max", "float", "float", "float", "torch.pow().mean", "float", "abs_diff.mean", "torch.pow", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "individual_results", "(", "self", ",", "output_all", ",", "target_all", ")", ":", "\n", "\t\t", "B", "=", "target_all", ".", "shape", "[", "0", "]", "\n", "individual_results_t", "=", "torch", ".", "zeros", "(", "(", "B", ",", "7", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "B", ")", ":", "\n", "\t\t\t", "target", "=", "target_all", "[", "i", "]", "\n", "output", "=", "output_all", "[", "i", "]", "\n", "valid_mask", "=", "np", ".", "logical_and", "(", "target", ">=", "self", ".", "mask_min", ",", "target", "<=", "self", ".", "mask_max", ")", "\n", "output", "=", "output", "[", "valid_mask", "]", "\n", "target", "=", "target", "[", "valid_mask", "]", "\n", "\n", "abs_diff", "=", "(", "output", "-", "target", ")", ".", "abs", "(", ")", "\n", "diff", "=", "(", "output", "-", "target", ")", "\n", "\n", "mse", "=", "float", "(", "(", "torch", ".", "pow", "(", "abs_diff", ",", "2", ")", ")", ".", "mean", "(", ")", ")", "\n", "rmse", "=", "math", ".", "sqrt", "(", "mse", ")", "\n", "rmselog", "=", "math", ".", "sqrt", "(", "float", "(", "(", "(", "torch", ".", "log", "(", "target", ")", "-", "torch", ".", "log", "(", "output", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ")", ")", "\n", "\n", "mae", "=", "float", "(", "abs_diff", ".", "mean", "(", ")", ")", "\n", "# lg10 = float((log10(output) - log10(target)).abs().mean())", "\n", "absrel", "=", "float", "(", "(", "abs_diff", "/", "target", ")", ".", "mean", "(", ")", ")", "\n", "sqrel", "=", "float", "(", "(", "(", "diff", "**", "2", ")", "/", "target", ")", ".", "mean", "(", ")", ")", "\n", "\n", "maxRatio", "=", "torch", ".", "max", "(", "output", "/", "target", ",", "target", "/", "output", ")", "\n", "delta1", "=", "float", "(", "(", "maxRatio", "<", "1.25", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ")", "\n", "delta2", "=", "float", "(", "(", "maxRatio", "<", "1.25", "**", "2", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ")", "\n", "delta3", "=", "float", "(", "(", "maxRatio", "<", "1.25", "**", "3", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ")", "\n", "# self.data_time = 0", "\n", "# self.gpu_time = 0", "\n", "\n", "# inv_output = 1 / output", "\n", "# inv_target = 1 / target", "\n", "# abs_inv_diff = (inv_output - inv_target).abs()", "\n", "# self.irmse = math.sqrt((torch.pow(abs_inv_diff, 2)).mean())", "\n", "# self.imae = float(abs_inv_diff.mean())", "\n", "\n", "individual_results_t", "[", "i", ",", "0", "]", "=", "absrel", "\n", "individual_results_t", "[", "i", ",", "1", "]", "=", "sqrel", "\n", "individual_results_t", "[", "i", ",", "2", "]", "=", "rmse", "\n", "individual_results_t", "[", "i", ",", "3", "]", "=", "rmselog", "\n", "\n", "individual_results_t", "[", "i", ",", "4", "]", "=", "delta1", "\n", "individual_results_t", "[", "i", ",", "5", "]", "=", "delta2", "\n", "individual_results_t", "[", "i", ",", "6", "]", "=", "delta3", "\n", "\n", "", "return", "individual_results_t", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.Result_withIdx.__init__": [[120, 128], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "mask_min", ",", "mask_max", ")", ":", "\n", "\t\t", "self", ".", "irmse", ",", "self", ".", "imae", "=", "0", ",", "0", "\n", "self", ".", "mse", ",", "self", ".", "rmse", ",", "self", ".", "mae", "=", "0", ",", "0", ",", "0", "\n", "self", ".", "absrel", ",", "self", ".", "lg10", "=", "0", ",", "0", "\n", "self", ".", "delta1", ",", "self", ".", "delta2", ",", "self", ".", "delta3", "=", "0", ",", "0", ",", "0", "\n", "self", ".", "data_time", ",", "self", ".", "gpu_time", "=", "0", ",", "0", "\n", "self", ".", "mask_min", "=", "mask_min", "\n", "self", ".", "mask_max", "=", "mask_max", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.Result_withIdx.set_to_worst": [[129, 135], ["None"], "methods", ["None"], ["", "def", "set_to_worst", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "irmse", ",", "self", ".", "imae", "=", "np", ".", "inf", ",", "np", ".", "inf", "\n", "self", ".", "mse", ",", "self", ".", "rmse", ",", "self", ".", "mae", "=", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "\n", "self", ".", "absrel", ",", "self", ".", "lg10", "=", "np", ".", "inf", ",", "np", ".", "inf", "\n", "self", ".", "delta1", ",", "self", ".", "delta2", ",", "self", ".", "delta3", "=", "0", ",", "0", ",", "0", "\n", "self", ".", "data_time", ",", "self", ".", "gpu_time", "=", "0", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.Result_withIdx.update": [[136, 142], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "irmse", ",", "imae", ",", "mse", ",", "rmse", ",", "mae", ",", "absrel", ",", "lg10", ",", "delta1", ",", "delta2", ",", "delta3", ",", "gpu_time", ",", "data_time", ")", ":", "\n", "\t\t", "self", ".", "irmse", ",", "self", ".", "imae", "=", "irmse", ",", "imae", "\n", "self", ".", "mse", ",", "self", ".", "rmse", ",", "self", ".", "mae", "=", "mse", ",", "rmse", ",", "mae", "\n", "self", ".", "absrel", ",", "self", ".", "lg10", "=", "absrel", ",", "lg10", "\n", "self", ".", "delta1", ",", "self", ".", "delta2", ",", "self", ".", "delta3", "=", "delta1", ",", "delta2", ",", "delta3", "\n", "self", ".", "data_time", ",", "self", ".", "gpu_time", "=", "data_time", ",", "gpu_time", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.Result_withIdx.evaluate": [[143, 179], ["numpy.logical_and", "float", "math.sqrt", "math.sqrt", "float", "float", "float", "float", "torch.max", "float", "float", "float", "math.sqrt", "float", "torch.pow().mean", "float", "abs_diff.mean", "torch.pow().mean", "abs_inv_diff.mean", "torch.pow", "torch.pow", "torch.log", "torch.log", "metrics.log10", "metrics.log10"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.log10", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.log10"], ["", "def", "evaluate", "(", "self", ",", "output", ",", "target", ",", "idx_tensor", ")", ":", "\n", "# idx_tensor should have the same size as output and target", "\n", "\n", "\t\t", "valid_mask", "=", "np", ".", "logical_and", "(", "target", ">", "self", ".", "mask_min", ",", "target", "<", "self", ".", "mask_max", ")", "\n", "# print(valid_mask.shape, type(valid_mask))", "\n", "# print(valid_mask)", "\n", "# print(valid_mask.shape, idx_tensor.shape)", "\n", "final_mask", "=", "valid_mask", "&", "idx_tensor", "\n", "# print(final_mask.shape)", "\n", "output", "=", "output", "[", "final_mask", "]", "\n", "target", "=", "target", "[", "final_mask", "]", "\n", "\n", "abs_diff", "=", "(", "output", "-", "target", ")", ".", "abs", "(", ")", "\n", "diff", "=", "(", "output", "-", "target", ")", "\n", "\n", "self", ".", "mse", "=", "float", "(", "(", "torch", ".", "pow", "(", "abs_diff", ",", "2", ")", ")", ".", "mean", "(", ")", ")", "\n", "self", ".", "rmse", "=", "math", ".", "sqrt", "(", "self", ".", "mse", ")", "\n", "self", ".", "rmselog", "=", "math", ".", "sqrt", "(", "float", "(", "(", "(", "torch", ".", "log", "(", "target", ")", "-", "torch", ".", "log", "(", "output", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ")", ")", "\n", "\n", "self", ".", "mae", "=", "float", "(", "abs_diff", ".", "mean", "(", ")", ")", "\n", "self", ".", "lg10", "=", "float", "(", "(", "log10", "(", "output", ")", "-", "log10", "(", "target", ")", ")", ".", "abs", "(", ")", ".", "mean", "(", ")", ")", "\n", "self", ".", "absrel", "=", "float", "(", "(", "abs_diff", "/", "target", ")", ".", "mean", "(", ")", ")", "\n", "self", ".", "sqrel", "=", "float", "(", "(", "(", "diff", "**", "2", ")", "/", "target", ")", ".", "mean", "(", ")", ")", "\n", "\n", "maxRatio", "=", "torch", ".", "max", "(", "output", "/", "target", ",", "target", "/", "output", ")", "\n", "self", ".", "delta1", "=", "float", "(", "(", "maxRatio", "<", "1.25", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ")", "\n", "self", ".", "delta2", "=", "float", "(", "(", "maxRatio", "<", "1.25", "**", "2", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ")", "\n", "self", ".", "delta3", "=", "float", "(", "(", "maxRatio", "<", "1.25", "**", "3", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ")", "\n", "self", ".", "data_time", "=", "0", "\n", "self", ".", "gpu_time", "=", "0", "\n", "\n", "inv_output", "=", "1", "/", "output", "\n", "inv_target", "=", "1", "/", "target", "\n", "abs_inv_diff", "=", "(", "inv_output", "-", "inv_target", ")", ".", "abs", "(", ")", "\n", "self", ".", "irmse", "=", "math", ".", "sqrt", "(", "(", "torch", ".", "pow", "(", "abs_inv_diff", ",", "2", ")", ")", ".", "mean", "(", ")", ")", "\n", "self", ".", "imae", "=", "float", "(", "abs_inv_diff", ".", "mean", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.log10": [[7, 10], ["torch.log", "math.log"], "function", ["None"], ["def", "log10", "(", "x", ")", ":", "\n", "\t", "\"\"\"Convert a new tensor with the base-10 logarithm of the elements of x. \"\"\"", "\n", "return", "torch", ".", "log", "(", "x", ")", "/", "math", ".", "log", "(", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.miou": [[181, 195], ["pred.view.view", "target.view.view", "range", "numpy.array", "pred_inds[].long().sum().data.cpu", "ious.append", "ious.append", "float", "pred_inds.long().sum().data.cpu", "target_inds.long().sum().data.cpu", "float", "float", "pred_inds[].long().sum", "max", "pred_inds[].long", "pred_inds.long().sum", "target_inds.long().sum", "pred_inds.long", "target_inds.long"], "function", ["None"], ["", "", "def", "miou", "(", "pred", ",", "target", ",", "n_classes", "=", "12", ")", ":", "\n", "\t", "ious", "=", "[", "]", "\n", "pred", "=", "pred", ".", "view", "(", "-", "1", ")", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "\n", "# Ignore IoU for background class (\"0\")", "\n", "for", "cls", "in", "range", "(", "0", ",", "n_classes", ")", ":", "# This goes from 1:n_classes-1 -> class \"0\" is ignored", "\n", "\t\t", "pred_inds", "=", "pred", "==", "cls", "\n", "target_inds", "=", "target", "==", "cls", "\n", "intersection", "=", "(", "pred_inds", "[", "target_inds", "]", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "data", ".", "cpu", "(", ")", "[", "0", "]", "# Cast to long to prevent overflows", "\n", "union", "=", "pred_inds", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "data", ".", "cpu", "(", ")", "[", "0", "]", "+", "target_inds", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "data", ".", "cpu", "(", ")", "[", "0", "]", "-", "intersection", "\n", "if", "union", "==", "0", ":", "ious", ".", "append", "(", "float", "(", "'nan'", ")", ")", "# If there is no ground truth, do not include in evaluation", "\n", "else", ":", "ious", ".", "append", "(", "float", "(", "intersection", ")", "/", "float", "(", "max", "(", "union", ",", "1", ")", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ious", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.im2col_sliding_broadcasting": [[197, 211], ["numpy.take", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "start_idx.ravel", "offset_idx.ravel"], "function", ["None"], ["", "def", "im2col_sliding_broadcasting", "(", "A", ",", "BSZ", ",", "stepsize", "=", "1", ")", ":", "\n", "# Parameters", "\n", "\t", "M", ",", "N", "=", "A", ".", "shape", "[", "0", "]", ",", "A", ".", "shape", "[", "1", "]", "\n", "col_extent", "=", "N", "-", "BSZ", "[", "1", "]", "+", "1", "\n", "row_extent", "=", "M", "-", "BSZ", "[", "0", "]", "+", "1", "\n", "\n", "# Get Starting block indices", "\n", "start_idx", "=", "np", ".", "arange", "(", "BSZ", "[", "0", "]", ")", "[", ":", ",", "None", "]", "*", "N", "+", "np", ".", "arange", "(", "BSZ", "[", "1", "]", ")", "\n", "\n", "# Get offsetted indices across the height and width of input array", "\n", "offset_idx", "=", "np", ".", "arange", "(", "row_extent", ")", "[", ":", ",", "None", "]", "*", "N", "+", "np", ".", "arange", "(", "col_extent", ")", "\n", "\n", "# Get all actual indices & index into input array for final output", "\n", "return", "np", ".", "take", "(", "A", ",", "start_idx", ".", "ravel", "(", ")", "[", ":", ",", "None", "]", "+", "offset_idx", ".", "ravel", "(", ")", "[", ":", ":", "stepsize", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.rgb2ycbcr": [[213, 225], ["numpy.empty_like"], "function", ["None"], ["", "def", "rgb2ycbcr", "(", "im", ")", ":", "\n", "\t", "cbcr", "=", "np", ".", "empty_like", "(", "im", ")", "\n", "r", "=", "im", "[", ":", ",", ":", ",", "0", "]", "\n", "g", "=", "im", "[", ":", ",", ":", ",", "1", "]", "\n", "b", "=", "im", "[", ":", ",", ":", ",", "2", "]", "\n", "# Y", "\n", "cbcr", "[", ":", ",", ":", ",", "0", "]", "=", ".299", "*", "r", "+", ".587", "*", "g", "+", ".114", "*", "b", "\n", "# Cb", "\n", "cbcr", "[", ":", ",", ":", ",", "1", "]", "=", "128", "-", ".169", "*", "r", "-", ".331", "*", "g", "+", ".5", "*", "b", "\n", "# Cr", "\n", "cbcr", "[", ":", ",", ":", ",", "2", "]", "=", "128", "+", ".5", "*", "r", "-", ".419", "*", "g", "-", ".081", "*", "b", "\n", "return", "cbcr", "# np.uint8(cbcr)", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.ycbcr2rgb": [[226, 238], ["numpy.empty_like"], "function", ["None"], ["", "def", "ycbcr2rgb", "(", "im", ")", ":", "\n", "\t", "rgb", "=", "np", ".", "empty_like", "(", "im", ")", "\n", "y", "=", "im", "[", ":", ",", ":", ",", "0", "]", "\n", "cb", "=", "im", "[", ":", ",", ":", ",", "1", "]", "-", "128", "\n", "cr", "=", "im", "[", ":", ",", ":", ",", "2", "]", "-", "128", "\n", "# R", "\n", "rgb", "[", ":", ",", ":", ",", "0", "]", "=", "y", "+", "1.402", "*", "cr", "\n", "# G", "\n", "rgb", "[", ":", ",", ":", ",", "1", "]", "=", "y", "-", ".34414", "*", "cb", "-", ".71414", "*", "cr", "\n", "# B", "\n", "rgb", "[", ":", ",", ":", ",", "2", "]", "=", "y", "+", "1.772", "*", "cb", "\n", "return", "rgb", "# np.uint8(rgb)", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.img_greyscale": [[240, 242], ["None"], "function", ["None"], ["", "def", "img_greyscale", "(", "img", ")", ":", "\n", "\t", "return", "0.299", "*", "img", "[", ":", ",", ":", ",", "0", "]", "+", "0.587", "*", "img", "[", ":", ",", ":", ",", "1", "]", "+", "0.114", "*", "img", "[", ":", ",", ":", ",", "2", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug._get_intrinsic_matrix": [[5, 40], ["torch.zeros", "torch.zeros", "isinstance", "isinstance", "torch.zeros.reshape", "isinstance", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "ValueError", "ValueError", "p_pt.dim", "focal_length.dim", "focal_length.dim", "ValueError"], "function", ["None"], ["def", "_get_intrinsic_matrix", "(", "focal_length", ",", "p_pt", ",", "batch_size", ")", ":", "\n", "\t", "K", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "9", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "K", "[", ":", ",", "-", "1", "]", "=", "1.", "\n", "if", "isinstance", "(", "focal_length", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "# suggest fx = fy for all samples", "\n", "\t\t", "K", "[", ":", ",", "0", "]", "=", "focal_length", "\n", "K", "[", ":", ",", "4", "]", "=", "focal_length", "\n", "", "elif", "isinstance", "(", "focal_length", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "# suggest fx, fy for all samples", "\n", "\t\t", "K", "[", ":", ",", "0", "]", "=", "focal_length", "[", "0", "]", "\n", "K", "[", ":", ",", "4", "]", "=", "focal_length", "[", "1", "]", "\n", "", "elif", "torch", ".", "is_tensor", "(", "focal_length", ")", ":", "\n", "\t\t", "if", "focal_length", ".", "dim", "(", ")", "==", "1", ":", "\n", "# suggest fx = fy for indivdual sample", "\n", "\t\t\t", "K", "[", ":", ",", "0", "]", "=", "focal_length", "\n", "K", "[", ":", ",", "4", "]", "=", "focal_length", "\n", "", "elif", "focal_length", ".", "dim", "(", ")", "==", "2", ":", "\n", "# suggest fx, fy for indivdual sample", "\n", "\t\t\t", "K", "[", ":", ",", "0", "]", "=", "focal_length", "[", ":", ",", "0", "]", "\n", "K", "[", ":", ",", "4", "]", "=", "focal_length", "[", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "'focal length tensor has to have shape of [B, ] or [B, 2]'", ")", "\n", "", "", "else", ":", "\n", "\t\t", "raise", "ValueError", "(", "'focal length variable should be either int/float, list/tuple or tensor of size [B, ]/[B, 2]'", ")", "\n", "\n", "", "if", "isinstance", "(", "p_pt", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "\t\t", "K", "[", ":", ",", "2", "]", "=", "p_pt", "[", "1", "]", "\n", "K", "[", ":", ",", "5", "]", "=", "p_pt", "[", "0", "]", "\n", "", "elif", "torch", ".", "is_tensor", "(", "p_pt", ")", ":", "\n", "\t\t", "assert", "p_pt", ".", "dim", "(", ")", "==", "2", "\n", "K", "[", ":", ",", "2", "]", "=", "p_pt", "[", ":", ",", "1", "]", "\n", "K", "[", ":", ",", "5", "]", "=", "p_pt", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "\t\t", "raise", "ValueError", "(", "'principle point variable should be either list/tuple or tensor of size [B, 2]'", ")", "\n", "", "return", "K", ".", "reshape", "(", "batch_size", ",", "3", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug._get_inverse_intrinsic_matrix": [[41, 52], ["torch.zeros_like", "torch.zeros_like"], "function", ["None"], ["", "def", "_get_inverse_intrinsic_matrix", "(", "K", ")", ":", "\n", "\t", "'''\n\t\tK is a tensor with shape [B, 3, 3]\n\t'''", "\n", "K_inv", "=", "torch", ".", "zeros_like", "(", "K", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "K_inv", "[", ":", ",", "0", ",", "0", "]", "=", "1.", "/", "K", "[", ":", ",", "0", ",", "0", "]", "\n", "K_inv", "[", ":", ",", "1", ",", "1", "]", "=", "1.", "/", "K", "[", ":", ",", "1", ",", "1", "]", "\n", "K_inv", "[", ":", ",", "0", ",", "2", "]", "=", "-", "K", "[", ":", ",", "0", ",", "2", "]", "/", "K", "[", ":", ",", "0", ",", "0", "]", "\n", "K_inv", "[", ":", ",", "1", ",", "2", "]", "=", "-", "K", "[", ":", ",", "1", ",", "2", "]", "/", "K", "[", ":", ",", "1", ",", "1", "]", "\n", "K_inv", "[", ":", ",", "-", "1", ",", "-", "1", "]", "=", "1.", "\n", "return", "K_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug._convert_depth_for_projection": [[53, 79], ["RuntimeError", "RuntimeError"], "function", ["None"], ["", "def", "_convert_depth_for_projection", "(", "depthGT", ",", "dataset", ",", "method", ",", "is_train", "=", "True", ",", "MAX_DEPTH_CLIP_GIVEN", "=", "None", ",", "MIN_DEPTH_CLIP_GIVEN", "=", "None", ")", ":", "\n", "\t", "'''\n\t\tdefault setting: dataset: interiorNet, method: vanilla\n\t'''", "\n", "# setting MAX_DEPTH_CLIP, MIN_DEPTH_CLIP", "\n", "if", "dataset", "==", "'interiorNet'", ":", "\n", "\t\t", "MAX_DEPTH_CLIP", "=", "10.0", "\n", "MIN_DEPTH_CLIP", "=", "1.0", "\n", "", "elif", "dataset", "==", "'ScanNet'", ":", "\n", "\t\t", "MAX_DEPTH_CLIP", "=", "10.0", "\n", "MIN_DEPTH_CLIP", "=", "1.0", "\n", "", "else", ":", "\n", "\t\t", "raise", "RuntimeError", "(", "'Current only support interiorNet | ScanNet!'", ")", "\n", "\n", "# overwrite if MAX_DEPTH_CLIP or MIN_DEPTH_CLIP is given", "\n", "", "if", "MAX_DEPTH_CLIP_GIVEN", "is", "not", "None", ":", "\n", "\t\t", "MAX_DEPTH_CLIP", "=", "MAX_DEPTH_CLIP_GIVEN", "\n", "", "if", "MIN_DEPTH_CLIP_GIVEN", "is", "not", "None", ":", "\n", "\t\t", "MIN_DEPTH_CLIP", "=", "MIN_DEPTH_CLIP_GIVEN", "\n", "\n", "", "if", "method", "==", "'vanilla'", ":", "\n", "\t\t", "depthGT", "=", "(", "(", "depthGT", "*", "0.5", ")", "+", "0.5", ")", "*", "(", "MAX_DEPTH_CLIP", "-", "MIN_DEPTH_CLIP", ")", "+", "MIN_DEPTH_CLIP", "\n", "", "else", ":", "\n", "\t\t", "raise", "RuntimeError", "(", "'Current only support vanilla'", ")", "\n", "\n", "", "return", "depthGT", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug._rescale_depth_for_training": [[80, 103], ["RuntimeError", "RuntimeError"], "function", ["None"], ["", "def", "_rescale_depth_for_training", "(", "depthGT", ",", "dataset", ",", "method", ",", "is_train", "=", "True", ",", "MAX_DEPTH_CLIP_GIVEN", "=", "None", ",", "MIN_DEPTH_CLIP_GIVEN", "=", "None", ")", ":", "\n", "# setting MAX_DEPTH_CLIP, MIN_DEPTH_CLIP", "\n", "\t", "if", "dataset", "==", "'interiorNet'", ":", "\n", "\t\t", "MAX_DEPTH_CLIP", "=", "10.0", "\n", "MIN_DEPTH_CLIP", "=", "1.0", "\n", "", "elif", "dataset", "==", "'ScanNet'", ":", "\n", "\t\t", "MAX_DEPTH_CLIP", "=", "10.0", "\n", "MIN_DEPTH_CLIP", "=", "1.0", "\n", "", "else", ":", "\n", "\t\t", "raise", "RuntimeError", "(", "'Current only support interiorNet | ScanNet!'", ")", "\n", "\n", "# overwrite if MAX_DEPTH_CLIP or MIN_DEPTH_CLIP is given", "\n", "", "if", "MAX_DEPTH_CLIP_GIVEN", "is", "not", "None", ":", "\n", "\t\t", "MAX_DEPTH_CLIP", "=", "MAX_DEPTH_CLIP_GIVEN", "\n", "", "if", "MIN_DEPTH_CLIP_GIVEN", "is", "not", "None", ":", "\n", "\t\t", "MIN_DEPTH_CLIP", "=", "MIN_DEPTH_CLIP_GIVEN", "\n", "\n", "", "if", "method", "==", "'vanilla'", ":", "\n", "\t\t", "depthGT", "=", "(", "(", "(", "depthGT", "-", "MIN_DEPTH_CLIP", ")", "/", "(", "MAX_DEPTH_CLIP", "-", "MIN_DEPTH_CLIP", ")", ")", "-", "0.5", ")", "*", "2.0", "\n", "", "else", ":", "\n", "\t\t", "raise", "RuntimeError", "(", "'Current only support vanilla!'", ")", "\n", "\n", "", "return", "depthGT", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug._compute_distance_map": [[104, 107], ["torch.sqrt().reshape", "torch.sqrt().reshape", "torch.sqrt", "torch.sqrt"], "function", ["None"], ["", "def", "_compute_distance_map", "(", "pc", ",", "H", ",", "W", ")", ":", "\n", "\t", "B", "=", "pc", ".", "shape", "[", "0", "]", "\n", "return", "torch", ".", "sqrt", "(", "pc", "[", ":", ",", "0", "]", "**", "2", "+", "pc", "[", ":", ",", "1", "]", "**", "2", "+", "pc", "[", ":", ",", "2", "]", "**", "2", ")", ".", "reshape", "(", "B", ",", "1", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug._distance_2_depth": [[108, 122], ["torch.stack().unsqueeze().expand", "torch.stack().unsqueeze().expand", "torch.bmm", "torch.bmm", "torch.sqrt", "torch.sqrt", "depth_map.reshape.reshape", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "distance_map.reshape", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack", "torch.stack", "grid_x.reshape", "grid_y.reshape", "torch.ones_like", "torch.ones_like", "grid_x.reshape"], "function", ["None"], ["", "def", "_distance_2_depth", "(", "distance_map", ",", "K_inv", ")", ":", "\n", "\t", "B", ",", "H", ",", "W", "=", "distance_map", ".", "shape", "[", "0", "]", ",", "distance_map", ".", "shape", "[", "2", "]", ",", "distance_map", ".", "shape", "[", "3", "]", "\n", "\n", "grid_y", ",", "grid_x", "=", "np", ".", "mgrid", "[", "0", ":", "H", ",", "0", ":", "W", "]", "\n", "grid_y", ",", "grid_x", "=", "torch", ".", "tensor", "(", "grid_y", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "torch", ".", "tensor", "(", "grid_x", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "q", "=", "torch", ".", "stack", "(", "(", "grid_x", ".", "reshape", "(", "-", "1", ")", ",", "grid_y", ".", "reshape", "(", "-", "1", ")", ",", "torch", ".", "ones_like", "(", "grid_x", ".", "reshape", "(", "-", "1", ")", ")", ")", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "B", ",", "3", ",", "H", "*", "W", ")", "\n", "\n", "pc", "=", "torch", ".", "bmm", "(", "K_inv", ",", "q", ")", "\n", "\n", "denom", "=", "torch", ".", "sqrt", "(", "pc", "[", ":", ",", "0", "]", "**", "2", "+", "pc", "[", ":", ",", "1", "]", "**", "2", "+", "1", ")", "# [B, N]", "\n", "depth_map", "=", "distance_map", ".", "reshape", "(", "B", ",", "-", "1", ")", "/", "denom", "\n", "depth_map", "=", "depth_map", ".", "reshape", "(", "B", ",", "1", ",", "H", ",", "W", ")", "\n", "\n", "return", "depth_map", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.warp_image_depth_with_pose_augmentation": [[123, 184], ["pda_aug._convert_depth_for_projection", "pda_aug._get_intrinsic_matrix", "pda_aug._get_inverse_intrinsic_matrix", "pda_aug.sample_pose_perturbance", "pda_aug.image_to_pointcloud", "pda_aug._compute_distance_map", "pda_aug._transform_pc_with_poses", "pda_aug.pointcloud_to_pixel_coords", "torch.grid_sample", "pda_aug.pointcloud_to_depth_maps", "pda_aug._rescale_depth_for_training", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "training_dataset_name.split", "pose.clone", "translation_sampler.squeeze", "euler_sampler.squeeze", "torch.grid_sample", "pda_aug._distance_2_depth", "pda_aug._rescale_depth_for_training", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip"], "function", ["home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug._convert_depth_for_projection", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug._get_intrinsic_matrix", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug._get_inverse_intrinsic_matrix", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.sample_pose_perturbance", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.image_to_pointcloud", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug._compute_distance_map", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug._transform_pc_with_poses", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.pointcloud_to_pixel_coords", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.pointcloud_to_depth_maps", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug._rescale_depth_for_training", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug._distance_2_depth", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug._rescale_depth_for_training"], ["", "def", "warp_image_depth_with_pose_augmentation", "(", "image", ",", "depthGT", ",", "pose", ",", "focal_length", ",", "p_pt", ",", "training_dataset_name", ",", "\n", "pose_perturbed", "=", "None", ",", "MAX_DEPTH_CLIP", "=", "10.0", ",", "MIN_DEPTH_CLIP", "=", "1.0", ",", "method", "=", "'vanilla'", ",", "\n", "is_train", "=", "True", ",", "include_depth_warp", "=", "True", ",", "augmentation", "=", "None", ",", "pose_sample_mode", "=", "'uniform'", ")", ":", "\n", "\t", "'''\n\t\tdepthGT is the depth tensor with shape [B, 1, H, W] -- need real depth !\n\t'''", "\n", "return_dict", "=", "{", "}", "\n", "# first flip back augmented sample since the pose is still for the original sample", "\n", "if", "augmentation", "is", "not", "None", ":", "\n", "\t\t", "image", "[", "augmentation", "]", "=", "torch", ".", "flip", "(", "image", "[", "augmentation", "]", ",", "[", "1", ",", "3", "]", ")", "\n", "depthGT", "[", "augmentation", "]", "=", "torch", ".", "flip", "(", "depthGT", "[", "augmentation", "]", ",", "[", "1", ",", "3", "]", ")", "\n", "\n", "", "dataset", "=", "training_dataset_name", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "# depth is preprocess in the range [-1., 1.], we need abs scale depth for reprojection", "\n", "depthGT", "=", "_convert_depth_for_projection", "(", "depthGT", ",", "dataset", ",", "method", ",", "is_train", ")", "\n", "depthGT", "[", "depthGT", "<", "1e-6", "]", "=", "1e6", "# to filter close to 0 depth", "\n", "\n", "B", ",", "H", ",", "W", "=", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "2", "]", ",", "image", ".", "shape", "[", "3", "]", "\n", "K", "=", "_get_intrinsic_matrix", "(", "focal_length", ",", "p_pt", ",", "B", ")", "\n", "K_inv", "=", "_get_inverse_intrinsic_matrix", "(", "K", ")", "\n", "\n", "translation_sampler", ",", "euler_sampler", "=", "sample_pose_perturbance", "(", "pose", ",", "dataset", ",", "mode", "=", "pose_sample_mode", ")", "\n", "pc", "=", "image_to_pointcloud", "(", "depthGT", ",", "K_inv", ",", "homogeneous_coord", "=", "True", ")", "\n", "dist_map", "=", "_compute_distance_map", "(", "pc", ",", "H", ",", "W", ")", "\n", "\n", "if", "pose_perturbed", "is", "None", ":", "\n", "# random perturb pose if the new pose is not given ", "\n", "\t\t", "pose_perturbed", "=", "pose", ".", "clone", "(", ")", "\n", "pose_perturbed", "[", ":", ",", ":", "3", "]", "+=", "translation_sampler", ".", "squeeze", "(", "1", ")", "\n", "pose_perturbed", "[", ":", ",", "3", ":", "]", "+=", "euler_sampler", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "pc_perturbed_depth", ",", "pc_perturbed_image", "=", "_transform_pc_with_poses", "(", "pc", ",", "pose", ",", "pose_perturbed", ")", "\n", "pixel_coords_perturbed", "=", "pointcloud_to_pixel_coords", "(", "pc_perturbed_image", ",", "K", ",", "image", ")", "\n", "image_warped", "=", "F", ".", "grid_sample", "(", "image", ",", "pixel_coords_perturbed", ",", "padding_mode", "=", "\"border\"", ")", "\n", "return_dict", "[", "'image_warped'", "]", "=", "image_warped", "\n", "if", "include_depth_warp", ":", "\n", "# depth_warped is the augmented depth we used in all training", "\n", "\t\t", "dist_warped", "=", "F", ".", "grid_sample", "(", "dist_map", ",", "pixel_coords_perturbed", ")", "\n", "depth_warped", "=", "_distance_2_depth", "(", "dist_warped", ",", "K_inv", ")", "# no translation in our case, convert depth to distance to get rid of grid artifacts", "\n", "depth_warped", "[", "depth_warped", ">", "1e3", "]", "=", "0.", "\n", "\n", "", "depth_reproject", "=", "pointcloud_to_depth_maps", "(", "pc_perturbed_depth", ",", "K", ",", "image", ")", "\n", "depth_reproject", "[", "depth_reproject", ">", "1e3", "]", "=", "0.", "\n", "\n", "# now convert the reproject depth back to [-1., 1.] to continue training", "\n", "depth_reproject", "=", "_rescale_depth_for_training", "(", "depth_reproject", ",", "dataset", ",", "method", ",", "is_train", ")", "\n", "if", "include_depth_warp", ":", "\n", "\t\t", "depth_warped", "=", "_rescale_depth_for_training", "(", "depth_warped", ",", "dataset", ",", "method", ",", "is_train", ")", "\n", "return_dict", "[", "'depth_warped'", "]", "=", "depth_warped", "\n", "\n", "", "return_dict", "[", "'depth_reproject'", "]", "=", "depth_reproject", "\n", "return_dict", "[", "'pose_perturbed'", "]", "=", "pose_perturbed", "\n", "\n", "# make lrflip for augmented samples", "\n", "if", "augmentation", "is", "not", "None", ":", "\n", "\t\t", "return_dict", "[", "'image_warped'", "]", "[", "augmentation", "]", "=", "torch", ".", "flip", "(", "return_dict", "[", "'image_warped'", "]", "[", "augmentation", "]", ",", "[", "1", ",", "3", "]", ")", "\n", "return_dict", "[", "'depth_reproject'", "]", "[", "augmentation", "]", "=", "torch", ".", "flip", "(", "return_dict", "[", "'depth_reproject'", "]", "[", "augmentation", "]", ",", "[", "1", ",", "3", "]", ")", "\n", "if", "include_depth_warp", ":", "\n", "\t\t\t", "return_dict", "[", "'depth_warped'", "]", "[", "augmentation", "]", "=", "torch", ".", "flip", "(", "return_dict", "[", "'depth_warped'", "]", "[", "augmentation", "]", ",", "[", "1", ",", "3", "]", ")", "\n", "\n", "", "", "return", "return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.sample_pose_perturbance": [[185, 196], ["torch.zeros().uniform_", "torch.zeros().uniform_", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "sample_pose_perturbance", "(", "pose", ",", "dataset", ",", "upper", "=", "0.1", ",", "lower", "=", "-", "0.1", ",", "mode", "=", "'uniform'", ")", ":", "\n", "\t", "'''\n\t\tinput pose: tensor with shape [B, 6]\n\t\treturn pose_perturbed: pose with shape [B, 6]\n\t'''", "\n", "B", "=", "pose", ".", "shape", "[", "0", "]", "\n", "if", "mode", "==", "'uniform'", ":", "\n", "\t\t", "translation_sampler", "=", "torch", ".", "rand", "(", "(", "B", ",", "1", ",", "3", ")", ")", "*", "0.", "\n", "euler_sampler", "=", "torch", ".", "zeros", "(", "(", "B", ",", "1", ",", "3", ")", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "uniform_", "(", "lower", ",", "upper", ")", "\n", "# add more sampling mode as you like~", "\n", "", "return", "translation_sampler", ",", "euler_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.image_to_pointcloud": [[197, 212], ["depth.reshape", "torch.stack().unsqueeze().expand", "torch.stack().unsqueeze().expand", "depth.dim", "depth.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.bmm", "torch.bmm", "torch.cat", "torch.cat", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.ones", "torch.ones", "torch.stack", "torch.stack", "grid_x.reshape", "grid_y.reshape", "torch.ones_like", "torch.ones_like", "grid_x.reshape"], "function", ["None"], ["", "def", "image_to_pointcloud", "(", "depth", ",", "K_inv", ",", "homogeneous_coord", "=", "False", ")", ":", "\n", "\t", "assert", "depth", ".", "dim", "(", ")", "==", "4", "\n", "assert", "depth", ".", "size", "(", "1", ")", "==", "1", "\n", "\n", "B", ",", "H", ",", "W", "=", "depth", ".", "shape", "[", "0", "]", ",", "depth", ".", "shape", "[", "2", "]", ",", "depth", ".", "shape", "[", "3", "]", "\n", "depth_v", "=", "depth", ".", "reshape", "(", "B", ",", "1", ",", "-", "1", ")", "\n", "\n", "grid_y", ",", "grid_x", "=", "np", ".", "mgrid", "[", "0", ":", "H", ",", "0", ":", "W", "]", "\n", "grid_y", ",", "grid_x", "=", "torch", ".", "tensor", "(", "grid_y", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "torch", ".", "tensor", "(", "grid_x", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "q", "=", "torch", ".", "stack", "(", "(", "grid_x", ".", "reshape", "(", "-", "1", ")", ",", "grid_y", ".", "reshape", "(", "-", "1", ")", ",", "torch", ".", "ones_like", "(", "grid_x", ".", "reshape", "(", "-", "1", ")", ")", ")", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "B", ",", "3", ",", "H", "*", "W", ")", "\n", "\n", "pc", "=", "torch", ".", "bmm", "(", "K_inv", ",", "q", ")", "*", "depth_v", "\n", "if", "homogeneous_coord", ":", "\n", "\t\t", "pc", "=", "torch", ".", "cat", "(", "(", "pc", ",", "torch", ".", "ones", "(", "(", "B", ",", "1", ",", "depth_v", ".", "shape", "[", "-", "1", "]", ")", ",", "dtype", "=", "pc", ".", "dtype", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.pointcloud_to_pixel_coords": [[213, 233], ["torch.bmm", "torch.bmm", "torch.zeros_like", "torch.zeros_like", "p_coords_n.reshape().permute.reshape().permute", "pc[].unsqueeze", "p_coords_n.reshape().permute.reshape"], "function", ["None"], ["", "def", "pointcloud_to_pixel_coords", "(", "pc", ",", "K", ",", "image", ",", "normalization", "=", "True", ",", "eps", "=", "1e-8", ")", ":", "\n", "\t", "B", ",", "H", ",", "W", "=", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "2", "]", ",", "image", ".", "shape", "[", "3", "]", "\n", "pc", "=", "pc", "[", ":", ",", ":", "3", ",", ":", "]", "\n", "pc", "=", "pc", "/", "(", "pc", "[", ":", ",", "-", "1", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", "+", "eps", ")", "\n", "p_coords", "=", "torch", ".", "bmm", "(", "K", ",", "pc", ")", "\n", "p_coords", "=", "p_coords", "[", ":", ",", ":", "2", ",", ":", "]", "\n", "if", "normalization", ":", "\n", "\t\t", "p_coords_n", "=", "torch", ".", "zeros_like", "(", "p_coords", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "p_coords_n", "[", ":", ",", "0", ",", ":", "]", "=", "p_coords", "[", ":", ",", "0", ",", ":", "]", "/", "(", "W", "-", "1.", ")", "\n", "p_coords_n", "[", ":", ",", "1", ",", ":", "]", "=", "p_coords", "[", ":", ",", "1", ",", ":", "]", "/", "(", "H", "-", "1.", ")", "\n", "p_coords_n", "=", "(", "p_coords_n", "-", "0.5", ")", "*", "2.", "\n", "u_proj_mask", "=", "(", "(", "p_coords_n", "[", ":", ",", "0", ",", ":", "]", ">", "1", ")", "+", "(", "p_coords_n", "[", ":", ",", "0", ",", ":", "]", "<", "-", "1", ")", ")", "\n", "p_coords_n", "[", ":", ",", "0", ",", ":", "]", "[", "u_proj_mask", "]", "=", "2", "\n", "v_proj_mask", "=", "(", "(", "p_coords_n", "[", ":", ",", "1", ",", ":", "]", ">", "1", ")", "+", "(", "p_coords_n", "[", ":", ",", "1", ",", ":", "]", "<", "-", "1", ")", ")", "\n", "p_coords_n", "[", ":", ",", "1", ",", ":", "]", "[", "v_proj_mask", "]", "=", "2", "\n", "\n", "p_coords_n", "=", "p_coords_n", ".", "reshape", "(", "B", ",", "2", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "return", "p_coords_n", "\n", "", "else", ":", "\n", "\t\t", "return", "p_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.pointcloud_to_depth_maps": [[234, 246], ["torch.bmm", "torch.bmm", "torch.zeros", "torch.zeros", "torch.zeros.unsqueeze", "p_coords[].type", "p_coords[].type", "pc[].unsqueeze"], "function", ["None"], ["", "", "def", "pointcloud_to_depth_maps", "(", "pc", ",", "K", ",", "image", ",", "eps", "=", "1e-7", ")", ":", "\n", "\t", "B", ",", "H", ",", "W", "=", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "2", "]", ",", "image", ".", "shape", "[", "3", "]", "\n", "pc", "=", "pc", "[", ":", ",", ":", "3", ",", ":", "]", "\n", "zt", "=", "pc", "[", ":", ",", "2", ",", ":", "]", "\n", "pc", "=", "pc", "/", "(", "pc", "[", ":", ",", "-", "1", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", "+", "eps", ")", "\n", "p_coords", "=", "torch", ".", "bmm", "(", "K", ",", "pc", ")", "\n", "p_coords", "=", "p_coords", "[", ":", ",", ":", "2", ",", ":", "]", "\n", "xt", ",", "yt", "=", "p_coords", "[", ":", ",", "0", ",", ":", "]", ".", "type", "(", "torch", ".", "long", ")", ",", "p_coords", "[", ":", ",", "1", ",", ":", "]", ".", "type", "(", "torch", ".", "long", ")", "\n", "keep", "=", "(", "yt", "<", "H", ")", "&", "(", "yt", ">=", "0", ")", "&", "(", "xt", "<", "W", ")", "&", "(", "xt", ">=", "0", ")", "\n", "depth_map", "=", "torch", ".", "zeros", "(", "(", "B", ",", "H", ",", "W", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "depth_map", "[", ":", ",", "yt", "[", "keep", "]", ",", "xt", "[", "keep", "]", "]", "=", "zt", "[", "keep", "]", "\n", "return", "depth_map", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug._transform_pc_with_poses": [[247, 268], ["torch.bmm", "torch.bmm", "pose1[].reshape", "torch.bmm", "torch.bmm", "pose2[].reshape", "torch.eye().unsqueeze().expand", "torch.eye().unsqueeze().expand", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "pda_aug.Rotz", "torch.bmm", "torch.bmm", "pda_aug.Rotz", "torch.bmm", "torch.bmm", "pda_aug.Roty", "pda_aug.Rotx", "pda_aug.Roty", "pda_aug.Rotx", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.bmm.transpose", "torch.bmm.transpose", "torch.bmm.transpose", "torch.bmm.transpose", "torch.eye", "torch.eye"], "function", ["home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.Rotz", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.Rotz", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.Roty", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.Rotx", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.Roty", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.Rotx"], ["", "def", "_transform_pc_with_poses", "(", "pc", ",", "pose1", ",", "pose2", ")", ":", "\n", "\t", "B", "=", "pose1", ".", "shape", "[", "0", "]", "\n", "\n", "R_1", "=", "torch", ".", "bmm", "(", "Rotz", "(", "pose1", "[", ":", ",", "5", "]", ")", ",", "torch", ".", "bmm", "(", "Roty", "(", "pose1", "[", ":", ",", "4", "]", ")", ",", "Rotx", "(", "pose1", "[", ":", ",", "3", "]", ")", ")", ")", "\n", "t_1", "=", "pose1", "[", ":", ",", ":", "3", "]", ".", "reshape", "(", "-", "1", ",", "3", ",", "1", ")", "\n", "\n", "\n", "R_2", "=", "torch", ".", "bmm", "(", "Rotz", "(", "pose2", "[", ":", ",", "5", "]", ")", ",", "torch", ".", "bmm", "(", "Roty", "(", "pose2", "[", ":", ",", "4", "]", ")", ",", "Rotx", "(", "pose2", "[", ":", ",", "3", "]", ")", ")", ")", "\n", "t_2", "=", "pose2", "[", ":", ",", ":", "3", "]", ".", "reshape", "(", "-", "1", ",", "3", ",", "1", ")", "\n", "\n", "R0", "=", "torch", ".", "eye", "(", "3", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "B", ",", "3", ",", "3", ")", "\n", "R0", "[", ":", ",", "0", ",", "0", "]", "=", "-", "1", "# handedness is different than our camera model ", "\n", "R_1", "=", "torch", ".", "bmm", "(", "R_1", ",", "R0", ")", "\n", "R_2", "=", "torch", ".", "bmm", "(", "R_2", ",", "R0", ")", "\n", "\n", "cam_coord", "=", "pc", "[", ":", ",", ":", "3", ",", ":", "]", "\n", "\n", "cam_coord_depth", "=", "R_2", ".", "transpose", "(", "1", ",", "2", ")", "@", "R_1", "@", "cam_coord", "+", "R_2", ".", "transpose", "(", "1", ",", "2", ")", "@", "(", "t_2", "-", "t_1", ")", "\n", "cam_coord_rgb", "=", "R_1", ".", "transpose", "(", "1", ",", "2", ")", "@", "R_2", "@", "cam_coord", "+", "R_1", ".", "transpose", "(", "1", ",", "2", ")", "@", "(", "t_1", "-", "t_2", ")", "\n", "\n", "return", "cam_coord_depth", ",", "cam_coord_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.Rotx": [[269, 293], ["torch.zeros", "torch.zeros", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.ones", "torch.ones", "Rx.reshape.reshape"], "function", ["None"], ["", "def", "Rotx", "(", "t", ")", ":", "\n", "\t", "\"\"\"\n\t\tRotation about the x-axis.\n\t\tnp.array([[1,  0,  0], [0,  c, -s], [0,  s,  c]])\n\n\t\t-- input t shape B x 1\n\t\t-- return B x 3 x 3\n\t\"\"\"", "\n", "B", "=", "t", ".", "shape", "[", "0", "]", "\n", "Rx", "=", "torch", ".", "zeros", "(", "(", "B", ",", "9", ",", "1", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "c", "=", "torch", ".", "cos", "(", "t", ")", "\n", "s", "=", "torch", ".", "sin", "(", "t", ")", "\n", "ones", "=", "torch", ".", "ones", "(", "B", ")", "\n", "\n", "Rx", "[", ":", ",", "0", ",", "0", "]", "=", "ones", "\n", "Rx", "[", ":", ",", "4", ",", "0", "]", "=", "c", "\n", "Rx", "[", ":", ",", "5", ",", "0", "]", "=", "-", "s", "\n", "Rx", "[", ":", ",", "7", ",", "0", "]", "=", "s", "\n", "Rx", "[", ":", ",", "8", ",", "0", "]", "=", "c", "\n", "\n", "Rx", "=", "Rx", ".", "reshape", "(", "B", ",", "3", ",", "3", ")", "\n", "\n", "return", "Rx", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.Roty": [[295, 319], ["torch.zeros", "torch.zeros", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.ones", "torch.ones", "Ry.reshape.reshape"], "function", ["None"], ["", "def", "Roty", "(", "t", ")", ":", "\n", "\t", "\"\"\"\n\t\tRotation about the x-axis.\n\t\tnp.array([[c,  0,  s], [0,  1,  0], [-s, 0,  c]])\n\n\t\t-- input t shape B x 1\n\t\t-- return B x 3 x 3\n\t\"\"\"", "\n", "B", "=", "t", ".", "shape", "[", "0", "]", "\n", "Ry", "=", "torch", ".", "zeros", "(", "(", "B", ",", "9", ",", "1", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "c", "=", "torch", ".", "cos", "(", "t", ")", "\n", "s", "=", "torch", ".", "sin", "(", "t", ")", "\n", "ones", "=", "torch", ".", "ones", "(", "B", ")", "\n", "\n", "Ry", "[", ":", ",", "0", ",", "0", "]", "=", "c", "\n", "Ry", "[", ":", ",", "2", ",", "0", "]", "=", "s", "\n", "Ry", "[", ":", ",", "4", ",", "0", "]", "=", "ones", "\n", "Ry", "[", ":", ",", "6", ",", "0", "]", "=", "-", "s", "\n", "Ry", "[", ":", ",", "8", ",", "0", "]", "=", "c", "\n", "\n", "Ry", "=", "Ry", ".", "reshape", "(", "B", ",", "3", ",", "3", ")", "\n", "\n", "return", "Ry", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.Rotz": [[320, 344], ["torch.zeros", "torch.zeros", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.ones", "torch.ones", "Rz.reshape.reshape"], "function", ["None"], ["", "def", "Rotz", "(", "t", ")", ":", "\n", "\t", "\"\"\"\n\t\tRotation about the z-axis.\n\t\tnp.array([[c, -s,  0], [s,  c,  0], [0,  0,  1]])\n\n\t\t-- input t shape B x 1\n\t\t-- return B x 3 x 3\n\t\"\"\"", "\n", "B", "=", "t", ".", "shape", "[", "0", "]", "\n", "Rz", "=", "torch", ".", "zeros", "(", "(", "B", ",", "9", ",", "1", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "c", "=", "torch", ".", "cos", "(", "t", ")", "\n", "s", "=", "torch", ".", "sin", "(", "t", ")", "\n", "ones", "=", "torch", ".", "ones", "(", "B", ")", "\n", "\n", "Rz", "[", ":", ",", "0", ",", "0", "]", "=", "c", "\n", "Rz", "[", ":", ",", "1", ",", "0", "]", "=", "-", "s", "\n", "Rz", "[", ":", ",", "3", ",", "0", "]", "=", "s", "\n", "Rz", "[", ":", ",", "4", ",", "0", "]", "=", "c", "\n", "Rz", "[", ":", ",", "8", ",", "0", "]", "=", "ones", "\n", "\n", "Rz", "=", "Rz", ".", "reshape", "(", "B", ",", "3", ",", "3", ")", "\n", "\n", "return", "Rz", "", "", ""]], "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.__init__": [[34, 92], ["os.listdir", "len", "os.path.join", "torchvision.transforms.ToTensor", "torchvision.transforms.ToPILImage", "torchvision.transforms.Normalize", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.return_keys.append", "os.path.join", "CAM_ScanNet_depth_dataLoader.is_image_file", "open", "os.path.join", "CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.path2rgbFiles.append", "l.rstrip().split", "extrinsic.split", "intrinsic.split", "numpy.array", "numpy.array", "int", "int", "l.rstrip", "float", "float", "float", "float", "numpy.array", "RuntimeError", "float", "float", "float", "float", "float", "float", "float", "float", "float", "numpy.deg2rad", "numpy.deg2rad", "numpy.deg2rad", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_interiorNet_depth_dataLoader.is_image_file"], ["\t", "def", "__init__", "(", "self", ",", "root_dir", ",", "set_name", ",", "size", "=", "[", "240", ",", "320", "]", ",", "downsampleDepthFactor", "=", "1", ",", "surface_normal", "=", "False", ",", "augmentation", "=", "True", ")", ":", "\n", "\t\t", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "MIN_DEPTH_CLIP", "=", "1.0", "\n", "self", ".", "MAX_DEPTH_CLIP", "=", "10.0", "\n", "\n", "self", ".", "set_name", "=", "set_name", "# e.g., ScanNet_all_uniform_1080/", "\n", "self", ".", "include_surface_normal", "=", "surface_normal", "\n", "self", ".", "set_len", "=", "0", "\n", "self", ".", "path2rgbFiles", "=", "[", "]", "\n", "self", ".", "downsampleDepthFactor", "=", "downsampleDepthFactor", "\n", "self", ".", "augmentation", "=", "augmentation", "# whether to augment each batch data", "\n", "self", ".", "extrinsic_angle", "=", "'radian'", "# radian or degree", "\n", "\n", "self", ".", "return_keys", "=", "[", "'rgb'", ",", "'depth'", ",", "'intrinsic'", ",", "'extrinsic'", ",", "'augmentation'", "]", "\n", "if", "self", ".", "include_surface_normal", ":", "\n", "\t\t\t", "self", ".", "return_keys", ".", "append", "(", "'surface_normal'", ")", "\n", "", "self", ".", "return_values", "=", "[", "]", "\n", "\n", "self", ".", "color_original_size", "=", "(", "968", ",", "1296", ")", "\n", "\n", "rgbFileNameList", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "set_name", ",", "'rgb'", ")", ")", "\n", "for", "fName", "in", "rgbFileNameList", ":", "\n", "\t\t\t", "if", "is_image_file", "(", "fName", ")", ":", "\n", "\t\t\t\t", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "set_name", ",", "'rgb'", ",", "fName", ")", "\n", "self", ".", "path2rgbFiles", ".", "append", "(", "path", ")", "\n", "\n", "", "", "self", ".", "set_len", "=", "len", "(", "self", ".", "path2rgbFiles", ")", "\n", "\n", "# read cam parameter file", "\n", "camFileName", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "set_name", ",", "'cam_parameter.txt'", ")", "\n", "self", ".", "extrinsicParaDict", "=", "{", "}", "\n", "self", ".", "intrinsicParaDict", "=", "{", "}", "\n", "with", "open", "(", "camFileName", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "for", "l", "in", "f", ":", "\n", "\t\t\t\t", "fileName", ",", "intrinsic", ",", "extrinsic", "=", "l", ".", "rstrip", "(", "'\\n'", ")", ".", "split", "(", "'|'", ")", "\n", "p_x", ",", "p_y", ",", "p_z", ",", "roll", ",", "pitch", ",", "yaw", "=", "extrinsic", ".", "split", "(", "' '", ")", "\n", "intrinsic_list", "=", "intrinsic", ".", "split", "(", "' '", ")", "\n", "f_x", ",", "p_ptx", ",", "f_y", ",", "p_pty", "=", "intrinsic_list", "[", "0", "]", ",", "intrinsic_list", "[", "2", "]", ",", "intrinsic_list", "[", "5", "]", ",", "intrinsic_list", "[", "6", "]", "\n", "\n", "self", ".", "intrinsicParaDict", "[", "fileName", "]", "=", "np", ".", "array", "(", "(", "float", "(", "f_x", ")", ",", "float", "(", "f_y", ")", ",", "float", "(", "p_ptx", ")", ",", "float", "(", "p_pty", ")", ")", ")", "\n", "\n", "# being consistent with interiorNet dataLoader", "\n", "if", "self", ".", "extrinsic_angle", "==", "'degree'", ":", "\n", "\t\t\t\t\t", "self", ".", "extrinsicParaDict", "[", "fileName", "]", "=", "np", ".", "array", "(", "(", "float", "(", "p_x", ")", ",", "float", "(", "p_y", ")", ",", "float", "(", "p_z", ")", ",", "float", "(", "pitch", ")", ",", "float", "(", "roll", ")", ",", "float", "(", "yaw", ")", ")", ")", "\n", "", "elif", "self", ".", "extrinsic_angle", "==", "'radian'", ":", "\n", "\t\t\t\t\t", "self", ".", "extrinsicParaDict", "[", "fileName", "]", "=", "np", ".", "array", "(", "(", "float", "(", "p_x", ")", ",", "float", "(", "p_y", ")", ",", "float", "(", "p_z", ")", ",", "np", ".", "deg2rad", "(", "float", "(", "pitch", ")", ")", ",", "np", ".", "deg2rad", "(", "float", "(", "roll", ")", ")", ",", "\n", "np", ".", "deg2rad", "(", "float", "(", "yaw", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "raise", "RuntimeError", "(", "'choose angle representation between radian or degree'", ")", "\n", "\n", "", "", "", "self", ".", "TF2tensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "TF2PIL", "=", "transforms", ".", "ToPILImage", "(", ")", "\n", "self", ".", "TFNormalize", "=", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "self", ".", "funcResizeTensor", "=", "nn", ".", "Upsample", "(", "size", "=", "self", ".", "size", ",", "mode", "=", "'nearest'", ",", "align_corners", "=", "None", ")", "\n", "self", ".", "funcResizeDepth", "=", "nn", ".", "Upsample", "(", "size", "=", "[", "int", "(", "self", ".", "size", "[", "0", "]", "*", "self", ".", "downsampleDepthFactor", ")", ",", "\n", "int", "(", "self", ".", "size", "[", "1", "]", "*", "self", ".", "downsampleDepthFactor", ")", "]", ",", "\n", "mode", "=", "'nearest'", ",", "align_corners", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.__len__": [[93, 95], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "set_len", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.__getitem__": [[96, 104], ["CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.fromkeys", "CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.fetch_img_and_corresponding_labels", "CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.fetch_corresponding_cam_parameters"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.fetch_img_and_corresponding_labels", "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.fetch_corresponding_cam_parameters"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "rgbFileName", "=", "self", ".", "path2rgbFiles", "[", "idx", "]", "\n", "return_dict", "=", "{", "}", "\n", "return_dict", ".", "fromkeys", "(", "self", ".", "return_keys", ")", "\n", "return_dict", "=", "self", ".", "fetch_img_and_corresponding_labels", "(", "rgbFileName", ",", "return_dict", ")", "\n", "return_dict", "=", "self", ".", "fetch_corresponding_cam_parameters", "(", "rgbFileName", ",", "return_dict", ")", "\n", "\n", "return", "return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.get_dataset_name": [[105, 107], ["None"], "methods", ["None"], ["", "def", "get_dataset_name", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "set_name", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.distance_2_depth": [[108, 120], ["depth_map.reshape.reshape.reshape", "y_grid.astype().reshape", "x_grid.astype().reshape", "distance_map.flatten", "numpy.sqrt", "y_grid.astype", "x_grid.astype"], "methods", ["None"], ["", "def", "distance_2_depth", "(", "self", ",", "distance_map", ")", ":", "\n", "\t\t", "H", ",", "W", "=", "distance_map", ".", "shape", "[", "0", "]", ",", "distance_map", ".", "shape", "[", "1", "]", "\n", "y_grid", ",", "x_grid", "=", "np", ".", "mgrid", "[", "0", ":", "H", ",", "0", ":", "W", "]", "\n", "y_vector", ",", "x_vector", "=", "y_grid", ".", "astype", "(", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "H", "*", "W", ")", ",", "x_grid", ".", "astype", "(", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "H", "*", "W", ")", "\n", "\n", "y", "=", "(", "y_vector", "-", "self", ".", "original_p_pt", "[", "0", "]", ")", "/", "self", ".", "original_focal_length", "\n", "x", "=", "(", "x_vector", "-", "self", ".", "original_p_pt", "[", "1", "]", ")", "/", "self", ".", "original_focal_length", "\n", "\n", "depth_map", "=", "distance_map", ".", "flatten", "(", ")", "/", "np", ".", "sqrt", "(", "x", "**", "2", "+", "y", "**", "2", "+", "1", ")", "\n", "depth_map", "=", "depth_map", ".", "reshape", "(", "H", ",", "W", ")", "\n", "\n", "return", "depth_map", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.fetch_img_and_corresponding_labels": [[121, 172], ["PIL.Image.open().convert", "CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.TF2tensor", "CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.unsqueeze", "CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.funcResizeTensor", "CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.squeeze", "os.path.join", "numpy.expand_dims", "CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.TF2tensor", "CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.preprocess_depth", "depthT.squeeze.squeeze.unsqueeze", "CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.funcResizeTensor", "depthT.squeeze.squeeze.squeeze", "numpy.array", "numpy.fliplr().copy", "CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.TFNormalize", "[].split", "cv2.imread().astype", "numpy.fliplr().copy", "os.path.join", "PIL.Image.open", "numpy.array", "CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.TF2tensor", "numpy.random.random", "PIL.Image.open", "print", "print", "numpy.fliplr().copy", "numpy.fliplr", "cv2.imread", "numpy.fliplr", "rgbFileName.split", "numpy.fliplr"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.preprocess_depth"], ["", "def", "fetch_img_and_corresponding_labels", "(", "self", ",", "rgbFileName", ",", "return_dict", ")", ":", "\n", "\t\t", "if", "'training'", "in", "self", ".", "set_name", "and", "self", ".", "augmentation", ":", "\n", "\t\t\t", "if", "np", ".", "random", ".", "random", "(", "1", ")", ">", "0.5", ":", "\n", "\t\t\t\t", "augmentation", "=", "True", "\n", "", "else", ":", "\n", "\t\t\t\t", "augmentation", "=", "False", "\n", "", "", "else", ":", "\n", "\t\t\t", "augmentation", "=", "False", "\n", "", "return_dict", "[", "'augmentation'", "]", "=", "augmentation", "\n", "\n", "image", "=", "PIL", ".", "Image", ".", "open", "(", "rgbFileName", ")", ".", "convert", "(", "'RGB'", ")", "\n", "image", "=", "np", ".", "array", "(", "image", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.", "\n", "\n", "if", "augmentation", ":", "\n", "\t\t\t", "image", "=", "np", ".", "fliplr", "(", "image", ")", ".", "copy", "(", ")", "\n", "", "imageT", "=", "self", ".", "TF2tensor", "(", "image", ")", "\n", "try", ":", "\n", "\t\t\t", "imageT", "=", "self", ".", "TFNormalize", "(", "imageT", ")", "\n", "", "except", "RuntimeError", ":", "\n", "\t\t\t", "print", "(", "'image shape missmatch error'", ")", "\n", "print", "(", "rgbFileName", ")", "\n", "", "imageT", "=", "imageT", ".", "unsqueeze", "(", "0", ")", "# need 4D data to resize tensor", "\n", "imageT", "=", "self", ".", "funcResizeTensor", "(", "imageT", ")", "\n", "imageT", "=", "imageT", ".", "squeeze", "(", "0", ")", "\n", "\n", "return_dict", "[", "'rgb'", "]", "=", "imageT", "\n", "\n", "fileName", "=", "rgbFileName", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "depthFileName", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "set_name", ",", "'depth'", ",", "fileName", "+", "'.pgm'", ")", "\n", "depth", "=", "cv2", ".", "imread", "(", "depthFileName", ",", "cv2", ".", "IMREAD_ANYCOLOR", "|", "cv2", ".", "IMREAD_ANYDEPTH", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "1000.", "\n", "depth", "=", "np", ".", "expand_dims", "(", "depth", ",", "2", ")", "\n", "if", "augmentation", ":", "\n", "\t\t\t", "depth", "=", "np", ".", "fliplr", "(", "depth", ")", ".", "copy", "(", ")", "\n", "", "depthT", "=", "self", ".", "TF2tensor", "(", "depth", ")", "\n", "depthT", "=", "self", ".", "preprocess_depth", "(", "depthT", ",", "mode", "=", "'tanh'", ")", "\n", "depthT", "=", "depthT", ".", "unsqueeze", "(", "0", ")", "# need 4D data to resize tensor", "\n", "depthT", "=", "self", ".", "funcResizeTensor", "(", "depthT", ")", "\n", "depthT", "=", "depthT", ".", "squeeze", "(", "0", ")", "\n", "\n", "return_dict", "[", "'depth'", "]", "=", "depthT", "\n", "\n", "if", "self", ".", "include_surface_normal", ":", "\n", "\t\t\t", "normalFileName", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "set_name", ",", "'surface_normal'", ",", "fileName", ")", "\n", "normal", "=", "PIL", ".", "Image", ".", "open", "(", "normalFileName", ")", "\n", "normal", "=", "np", ".", "array", "(", "normal", ",", "dtype", "=", "np", ".", "float32", ")", "# shape (H, W, 3), [0, 255]", "\n", "if", "augmentation", ":", "\n", "\t\t\t\t", "normal", "=", "np", ".", "fliplr", "(", "normal", ")", ".", "copy", "(", ")", "\n", "", "normalT", "=", "self", ".", "TF2tensor", "(", "normal", ")", "\n", "return_dict", "[", "'surface_normal'", "]", "=", "normalT", "\n", "\n", "", "return", "return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.fetch_corresponding_cam_parameters": [[173, 183], ["CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.updated_intrinsic_parameters", "[].split", "rgbFileName.split"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.updated_intrinsic_parameters"], ["", "def", "fetch_corresponding_cam_parameters", "(", "self", ",", "rgbFileName", ",", "return_dict", ")", ":", "\n", "\t\t", "fileName", "=", "rgbFileName", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "return_dict", "[", "'extrinsic'", "]", "=", "self", ".", "extrinsicParaDict", "[", "fileName", "]", "\n", "original_intrinsics", "=", "self", ".", "intrinsicParaDict", "[", "fileName", "]", "\n", "\n", "updated_intrinsic", "=", "self", ".", "updated_intrinsic_parameters", "(", "original_intrinsics", ")", "\n", "return_dict", "[", "'intrinsic'", "]", "=", "updated_intrinsic", "\n", "\n", "return", "return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.updated_intrinsic_parameters": [[184, 195], ["int", "int", "numpy.array"], "methods", ["None"], ["", "def", "updated_intrinsic_parameters", "(", "self", ",", "original_intrinsics", ")", ":", "\n", "\t\t", "x_scale", "=", "self", ".", "color_original_size", "[", "1", "]", "/", "self", ".", "size", "[", "1", "]", "\n", "y_scale", "=", "self", ".", "color_original_size", "[", "0", "]", "/", "self", ".", "size", "[", "0", "]", "\n", "\n", "updated_f_x", "=", "original_intrinsics", "[", "0", "]", "/", "x_scale", "\n", "updated_f_y", "=", "original_intrinsics", "[", "1", "]", "/", "y_scale", "\n", "\n", "p_ptx", "=", "int", "(", "original_intrinsics", "[", "2", "]", "/", "x_scale", ")", "\n", "p_pty", "=", "int", "(", "original_intrinsics", "[", "3", "]", "/", "y_scale", ")", "\n", "\n", "return", "np", ".", "array", "(", "(", "updated_f_x", ",", "updated_f_y", ",", "p_ptx", ",", "p_pty", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_ScanNet_depth_dataLoader.CAM_ScanNet_depth_dataLoader.preprocess_depth": [[196, 208], ["None"], "methods", ["None"], ["", "def", "preprocess_depth", "(", "self", ",", "depthT", ",", "mode", "=", "'tanh'", ")", ":", "\n", "\t\t", "'''\n\t\t\tpreprocess depth tensor before feed into the network\n\t\t\tmode: choose from depth [0, max_depth], disparity [0, 1], tanh [-1.0, 1.0] \n\t\t'''", "\n", "if", "'training'", "in", "self", ".", "set_name", ":", "\n", "\t\t\t", "if", "mode", "==", "'tanh'", ":", "\n", "\t\t\t\t", "return", "(", "(", "(", "depthT", "-", "self", ".", "MIN_DEPTH_CLIP", ")", "/", "(", "self", ".", "MAX_DEPTH_CLIP", "-", "self", ".", "MIN_DEPTH_CLIP", ")", ")", "-", "0.5", ")", "*", "2.0", "# mask out depth over ", "\n", "", "elif", "mode", "==", "'depth'", ":", "\n", "\t\t\t\t", "return", "depthT", "\n", "", "", "else", ":", "\n", "\t\t\t", "return", "depthT", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_ScanNet_depth_dataLoader.is_image_file": [[30, 32], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "\t", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.__init__": [[33, 89], ["os.listdir", "len", "os.path.join", "torchvision.transforms.ToTensor", "torchvision.transforms.ToPILImage", "torchvision.transforms.Normalize", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.return_keys.append", "CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.return_keys.append", "os.path.join", "CAM_interiorNet_depth_dataLoader.is_image_file", "open", "os.path.join", "CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.path2rgbFiles.append", "l.rstrip().split", "numpy.array", "int", "int", "l.rstrip", "numpy.array", "RuntimeError", "float", "float", "float", "float", "float", "float", "float", "float", "float", "numpy.deg2rad", "numpy.deg2rad", "numpy.deg2rad", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_interiorNet_depth_dataLoader.is_image_file"], ["\t", "def", "__init__", "(", "self", ",", "root_dir", ",", "set_name", ",", "size", "=", "[", "240", ",", "320", "]", ",", "downsampleDepthFactor", "=", "1", ",", "surface_normal", "=", "True", ")", ":", "\n", "\t\t", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "MIN_DEPTH_CLIP", "=", "1.0", "\n", "self", ".", "MAX_DEPTH_CLIP", "=", "10.0", "\n", "\n", "self", ".", "set_name", "=", "set_name", "# e.g., interiorNet_training_natural_10800", "\n", "self", ".", "include_surface_normal", "=", "surface_normal", "\n", "self", ".", "set_len", "=", "0", "\n", "self", ".", "path2rgbFiles", "=", "[", "]", "\n", "self", ".", "downsampleDepthFactor", "=", "downsampleDepthFactor", "\n", "self", ".", "augmentation", "=", "True", "# whether to augment each batch data", "\n", "self", ".", "extrinsic_angle", "=", "'radian'", "# radian or degree", "\n", "\n", "self", ".", "return_keys", "=", "[", "'rgb'", ",", "'depth'", ",", "'extrinsic'", "]", "\n", "if", "self", ".", "include_surface_normal", ":", "\n", "\t\t\t", "self", ".", "return_keys", ".", "append", "(", "'surface_normal'", ")", "\n", "", "if", "self", ".", "augmentation", ":", "\n", "\t\t\t", "self", ".", "return_keys", ".", "append", "(", "'augmentation'", ")", "\n", "", "self", ".", "return_values", "=", "[", "]", "\n", "\n", "self", ".", "original_focal_length", "=", "600", "\n", "self", ".", "original_p_pt", "=", "[", "240", ",", "320", "]", "\n", "\n", "rgbFileNameList", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "set_name", ",", "'rgb'", ")", ")", "\n", "# for fName in sorted(rgbFileNameList):", "\n", "for", "fName", "in", "rgbFileNameList", ":", "\n", "\t\t\t", "if", "is_image_file", "(", "fName", ")", ":", "\n", "\t\t\t\t", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "set_name", ",", "'rgb'", ",", "fName", ")", "\n", "self", ".", "path2rgbFiles", ".", "append", "(", "path", ")", "\n", "\n", "", "", "self", ".", "set_len", "=", "len", "(", "self", ".", "path2rgbFiles", ")", "\n", "\n", "# read cam parameter file", "\n", "camFileName", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "set_name", ",", "'cam_parameter.txt'", ")", "\n", "self", ".", "camParamerterDict", "=", "{", "}", "\n", "with", "open", "(", "camFileName", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "for", "l", "in", "f", ":", "\n", "# this order is entirely up to you and could be changed when create cam_parameter.txt", "\n", "\t\t\t\t", "fileName", ",", "p_x", ",", "p_y", ",", "p_z", ",", "pitch", ",", "roll", ",", "yaw", "=", "l", ".", "rstrip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "# change to load as roll, pitch, yaw", "\n", "if", "self", ".", "extrinsic_angle", "==", "'degree'", ":", "\n", "\t\t\t\t\t", "self", ".", "camParamerterDict", "[", "fileName", "]", "=", "np", ".", "array", "(", "(", "float", "(", "p_x", ")", ",", "float", "(", "p_y", ")", ",", "float", "(", "p_z", ")", ",", "float", "(", "roll", ")", ",", "float", "(", "pitch", ")", ",", "float", "(", "yaw", ")", ")", ")", "\n", "", "elif", "self", ".", "extrinsic_angle", "==", "'radian'", ":", "\n", "\t\t\t\t\t", "self", ".", "camParamerterDict", "[", "fileName", "]", "=", "np", ".", "array", "(", "(", "float", "(", "p_x", ")", ",", "float", "(", "p_y", ")", ",", "float", "(", "p_z", ")", ",", "np", ".", "deg2rad", "(", "float", "(", "roll", ")", ")", ",", "np", ".", "deg2rad", "(", "float", "(", "pitch", ")", ")", ",", "\n", "np", ".", "deg2rad", "(", "float", "(", "yaw", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "raise", "RuntimeError", "(", "'choose angle representation between radian or degree'", ")", "\n", "\n", "", "", "", "self", ".", "TF2tensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "TF2PIL", "=", "transforms", ".", "ToPILImage", "(", ")", "\n", "self", ".", "TFNormalize", "=", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "self", ".", "funcResizeTensor", "=", "nn", ".", "Upsample", "(", "size", "=", "self", ".", "size", ",", "mode", "=", "'nearest'", ",", "align_corners", "=", "None", ")", "\n", "self", ".", "funcResizeDepth", "=", "nn", ".", "Upsample", "(", "size", "=", "[", "int", "(", "self", ".", "size", "[", "0", "]", "*", "self", ".", "downsampleDepthFactor", ")", ",", "\n", "int", "(", "self", ".", "size", "[", "1", "]", "*", "self", ".", "downsampleDepthFactor", ")", "]", ",", "\n", "mode", "=", "'nearest'", ",", "align_corners", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.__len__": [[90, 92], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "set_len", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.__getitem__": [[93, 101], ["CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.fromkeys", "CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.fetch_img_and_corresponding_labels", "CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.fetch_corresponding_cam_parameters"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.fetch_img_and_corresponding_labels", "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.fetch_corresponding_cam_parameters"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "rgbFileName", "=", "self", ".", "path2rgbFiles", "[", "idx", "]", "\n", "return_dict", "=", "{", "}", "\n", "return_dict", ".", "fromkeys", "(", "self", ".", "return_keys", ")", "\n", "return_dict", "=", "self", ".", "fetch_img_and_corresponding_labels", "(", "rgbFileName", ",", "return_dict", ")", "\n", "return_dict", "=", "self", ".", "fetch_corresponding_cam_parameters", "(", "rgbFileName", ",", "return_dict", ")", "\n", "\n", "return", "return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.get_dataset_name": [[102, 104], ["None"], "methods", ["None"], ["", "def", "get_dataset_name", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "set_name", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.distance_2_depth": [[105, 117], ["depth_map.reshape.reshape.reshape", "y_grid.astype().reshape", "x_grid.astype().reshape", "distance_map.flatten", "numpy.sqrt", "y_grid.astype", "x_grid.astype"], "methods", ["None"], ["", "def", "distance_2_depth", "(", "self", ",", "distance_map", ")", ":", "\n", "\t\t", "H", ",", "W", "=", "distance_map", ".", "shape", "[", "0", "]", ",", "distance_map", ".", "shape", "[", "1", "]", "\n", "y_grid", ",", "x_grid", "=", "np", ".", "mgrid", "[", "0", ":", "H", ",", "0", ":", "W", "]", "\n", "y_vector", ",", "x_vector", "=", "y_grid", ".", "astype", "(", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "H", "*", "W", ")", ",", "x_grid", ".", "astype", "(", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "H", "*", "W", ")", "\n", "\n", "y", "=", "(", "y_vector", "-", "self", ".", "original_p_pt", "[", "0", "]", ")", "/", "self", ".", "original_focal_length", "\n", "x", "=", "(", "x_vector", "-", "self", ".", "original_p_pt", "[", "1", "]", ")", "/", "self", ".", "original_focal_length", "\n", "\n", "depth_map", "=", "distance_map", ".", "flatten", "(", ")", "/", "np", ".", "sqrt", "(", "x", "**", "2", "+", "y", "**", "2", "+", "1", ")", "\n", "depth_map", "=", "depth_map", ".", "reshape", "(", "H", ",", "W", ")", "\n", "\n", "return", "depth_map", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.fetch_img_and_corresponding_labels": [[118, 171], ["PIL.Image.open().convert", "CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.TF2tensor", "CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.unsqueeze", "CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.funcResizeTensor", "CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.squeeze", "os.path.join", "PIL.Image.open", "CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.distance_2_depth", "numpy.expand_dims", "CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.TF2tensor", "CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.preprocess_depth", "depthT.squeeze.squeeze.unsqueeze", "CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.funcResizeTensor", "depthT.squeeze.squeeze.squeeze", "numpy.array", "numpy.fliplr().copy", "CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.TFNormalize", "rgbFileName.split", "numpy.array", "numpy.fliplr().copy", "os.path.join", "PIL.Image.open", "numpy.array", "CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.TF2tensor", "numpy.random.random", "PIL.Image.open", "print", "print", "numpy.fliplr().copy", "numpy.fliplr", "numpy.fliplr", "numpy.fliplr"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.distance_2_depth", "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.preprocess_depth"], ["", "def", "fetch_img_and_corresponding_labels", "(", "self", ",", "rgbFileName", ",", "return_dict", ")", ":", "\n", "\t\t", "if", "'training'", "in", "self", ".", "set_name", "and", "self", ".", "augmentation", ":", "\n", "\t\t\t", "if", "np", ".", "random", ".", "random", "(", "1", ")", ">", "0.5", ":", "\n", "\t\t\t\t", "augmentation", "=", "True", "\n", "", "else", ":", "\n", "\t\t\t\t", "augmentation", "=", "False", "\n", "", "", "else", ":", "\n", "\t\t\t", "augmentation", "=", "False", "\n", "", "return_dict", "[", "'augmentation'", "]", "=", "augmentation", "\n", "\n", "image", "=", "PIL", ".", "Image", ".", "open", "(", "rgbFileName", ")", ".", "convert", "(", "'RGB'", ")", "\n", "image", "=", "np", ".", "array", "(", "image", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.", "\n", "if", "augmentation", ":", "\n", "\t\t\t", "image", "=", "np", ".", "fliplr", "(", "image", ")", ".", "copy", "(", ")", "\n", "", "imageT", "=", "self", ".", "TF2tensor", "(", "image", ")", "\n", "try", ":", "\n", "\t\t\t", "imageT", "=", "self", ".", "TFNormalize", "(", "imageT", ")", "\n", "", "except", "RuntimeError", ":", "\n", "\t\t\t", "print", "(", "'image shape missmatch error'", ")", "\n", "print", "(", "rgbFileName", ")", "\n", "", "imageT", "=", "imageT", ".", "unsqueeze", "(", "0", ")", "# need 4D data to resize tensor", "\n", "imageT", "=", "self", ".", "funcResizeTensor", "(", "imageT", ")", "\n", "imageT", "=", "imageT", ".", "squeeze", "(", "0", ")", "\n", "\n", "return_dict", "[", "'rgb'", "]", "=", "imageT", "\n", "\n", "fileName", "=", "rgbFileName", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "depthFileName", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "set_name", ",", "'depth'", ",", "fileName", ")", "\n", "depth", "=", "PIL", ".", "Image", ".", "open", "(", "depthFileName", ")", "\n", "depth", "=", "np", ".", "array", "(", "depth", ",", "dtype", "=", "np", ".", "float32", ")", "/", "1000.", "# [480, 640]", "\n", "# print(depth.min(), depth.max())", "\n", "depth", "=", "self", ".", "distance_2_depth", "(", "depth", ")", "\n", "depth", "=", "np", ".", "expand_dims", "(", "depth", ",", "2", ")", "\n", "if", "augmentation", ":", "\n", "\t\t\t", "depth", "=", "np", ".", "fliplr", "(", "depth", ")", ".", "copy", "(", ")", "\n", "", "depthT", "=", "self", ".", "TF2tensor", "(", "depth", ")", "\n", "depthT", "=", "self", ".", "preprocess_depth", "(", "depthT", ",", "mode", "=", "'tanh'", ")", "\n", "depthT", "=", "depthT", ".", "unsqueeze", "(", "0", ")", "# need 4D data to resize tensor", "\n", "depthT", "=", "self", ".", "funcResizeTensor", "(", "depthT", ")", "\n", "depthT", "=", "depthT", ".", "squeeze", "(", "0", ")", "\n", "\n", "return_dict", "[", "'depth'", "]", "=", "depthT", "\n", "\n", "if", "self", ".", "include_surface_normal", ":", "\n", "\t\t\t", "normalFileName", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "set_name", ",", "'surface_normal'", ",", "fileName", ")", "\n", "normal", "=", "PIL", ".", "Image", ".", "open", "(", "normalFileName", ")", "\n", "normal", "=", "np", ".", "array", "(", "normal", ",", "dtype", "=", "np", ".", "float32", ")", "# shape (H, W, 3), [0, 255]", "\n", "if", "augmentation", ":", "\n", "\t\t\t\t", "normal", "=", "np", ".", "fliplr", "(", "normal", ")", ".", "copy", "(", ")", "\n", "", "normalT", "=", "self", ".", "TF2tensor", "(", "normal", ")", "\n", "return_dict", "[", "'surface_normal'", "]", "=", "normalT", "\n", "\n", "", "return", "return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.fetch_corresponding_cam_parameters": [[172, 177], ["[].split", "rgbFileName.split"], "methods", ["None"], ["", "def", "fetch_corresponding_cam_parameters", "(", "self", ",", "rgbFileName", ",", "return_dict", ")", ":", "\n", "\t\t", "fileName", "=", "rgbFileName", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "# print(fileName)", "\n", "return_dict", "[", "'extrinsic'", "]", "=", "self", ".", "camParamerterDict", "[", "fileName", "]", "\n", "return", "return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.convert_distance_to_depth": [[179, 181], ["None"], "methods", ["None"], ["", "def", "convert_distance_to_depth", "(", "self", ",", "distance", ",", "cam_paraeter", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_interiorNet_depth_dataLoader.CAM_interiorNet_depth_dataLoader.preprocess_depth": [[182, 195], ["None"], "methods", ["None"], ["", "def", "preprocess_depth", "(", "self", ",", "depthT", ",", "mode", "=", "'tanh'", ")", ":", "\n", "\t\t", "'''\n\t\t\tpreprocess depth tensor before feed into the network\n\t\t\tmode: choose from depth [0, max_depth], disparity [0, 1], tanh [-1.0, 1.0] \n\t\t'''", "\n", "# depthT = np.clip(depthT, self.MIN_DEPTH_CLIP, self.MAX_DEPTH_CLIP) # [0, 25.0]", "\n", "if", "'training'", "in", "self", ".", "set_name", ":", "\n", "\t\t\t", "if", "mode", "==", "'tanh'", ":", "\n", "\t\t\t\t", "return", "(", "(", "(", "depthT", "-", "self", ".", "MIN_DEPTH_CLIP", ")", "/", "(", "self", ".", "MAX_DEPTH_CLIP", "-", "self", ".", "MIN_DEPTH_CLIP", ")", ")", "-", "0.5", ")", "*", "2.0", "# mask out depth over ", "\n", "", "elif", "mode", "==", "'depth'", ":", "\n", "\t\t\t\t", "return", "depthT", "\n", "", "", "else", ":", "\n", "\t\t\t", "return", "depthT", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yzhao520_CPP.dataloader.CAM_interiorNet_depth_dataLoader.is_image_file": [[29, 31], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "\t", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.CPP_PDA_joint_training.CPP_PDA_joint_training_model.__init__": [[28, 63], ["training.base_model.base_model.__init__", "CPP_PDA_joint_training.CPP_PDA_joint_training_model._initialize_training", "torchvision.models.T2Net._UNetGenerator", "float", "CPP_PDA_joint_training.CPP_PDA_joint_training_model._check_parallel", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "CPP_PDA_joint_training.CPP_PDA_joint_training_model._get_scheduler", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "CPP_PDA_joint_training.CPP_PDA_joint_training_model._initialize_networks", "CPP_PDA_joint_training.CPP_PDA_joint_training_model.depthEstModel.parameters", "CPP_PDA_joint_training.CPP_PDA_joint_training_model._init_apex"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._initialize_training", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._check_parallel", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._get_scheduler", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._initialize_networks", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._init_apex"], ["\t", "def", "__init__", "(", "self", ",", "args", ",", "training_dataloader", ",", "testing_dataloader", ")", ":", "\n", "\t\t", "super", "(", "CPP_PDA_joint_training_model", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "_initialize_training", "(", ")", "\n", "\n", "self", ".", "training_dataloader", "=", "training_dataloader", "\n", "self", ".", "testing_dataloader", "=", "testing_dataloader", "\n", "self", ".", "MIN_DEPTH_CLIP", "=", "1.0", "\n", "self", ".", "MAX_DEPTH_CLIP", "=", "10.0", "\n", "\n", "self", ".", "EVAL_DEPTH_MIN", "=", "1.0", "\n", "self", ".", "EVAL_DEPTH_MAX", "=", "10.0", "\n", "\n", "self", ".", "CEILING_HEIGHT", "=", "3.0", "# predfined ceiling height", "\n", "\n", "self", ".", "save_evaluate_steps", "=", "10", "\n", "\n", "self", ".", "depthEstModel", "=", "_UNetGenerator", "(", "input_nc", "=", "4", ",", "output_nc", "=", "1", ")", "\n", "self", ".", "model_name", "=", "[", "'depthEstModel'", "]", "\n", "\n", "if", "self", ".", "is_train", ":", "\n", "\t\t\t", "self", ".", "depth_optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "depthEstModel", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "base_lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "self", ".", "optim_name", "=", "[", "'depth_optimizer'", "]", "\n", "self", ".", "_get_scheduler", "(", ")", "\n", "self", ".", "L1Loss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "_initialize_networks", "(", "[", "'depthEstModel'", "]", ")", "\n", "\n", "# apex can only be applied to CUDA models", "\n", "if", "self", ".", "use_apex", ":", "\n", "\t\t\t\t", "self", ".", "_init_apex", "(", "Num_losses", "=", "2", ")", "\n", "\n", "", "", "self", ".", "EVAL_best_loss", "=", "float", "(", "'inf'", ")", "\n", "self", ".", "EVAL_best_model_epoch", "=", "0", "\n", "self", ".", "EVAL_all_results", "=", "{", "}", "\n", "\n", "self", ".", "_check_parallel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.CPP_PDA_joint_training.CPP_PDA_joint_training_model._get_project_name": [[64, 66], ["None"], "methods", ["None"], ["", "def", "_get_project_name", "(", "self", ")", ":", "\n", "\t\t", "return", "'CPP_PDA_joint_training_model'", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.CPP_PDA_joint_training.CPP_PDA_joint_training_model._initialize_networks": [[67, 71], ["getattr().train().to", "torchvision.models.T2Net.init_weights", "getattr", "getattr().train", "getattr"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.init_weights", "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.train"], ["", "def", "_initialize_networks", "(", "self", ",", "model_name", ")", ":", "\n", "\t\t", "for", "name", "in", "model_name", ":", "\n", "\t\t\t", "getattr", "(", "self", ",", "name", ")", ".", "train", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "init_weights", "(", "getattr", "(", "self", ",", "name", ")", ",", "net_name", "=", "name", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.CPP_PDA_joint_training.CPP_PDA_joint_training_model.compute_depth_loss": [[72, 82], ["CPP_PDA_joint_training.CPP_PDA_joint_training_model.depthEstModel", "CPP_PDA_joint_training.CPP_PDA_joint_training_model.L1Loss", "CPP_PDA_joint_training.CPP_PDA_joint_training_model.L1Loss", "rgb.detach"], "methods", ["None"], ["", "", "def", "compute_depth_loss", "(", "self", ",", "rgb", ",", "gt_depth", ",", "mask", "=", "None", ")", ":", "\n", "\t\t", "predicted_depth", "=", "self", ".", "depthEstModel", "(", "rgb", ".", "detach", "(", ")", ")", "[", "-", "1", "]", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "\t\t\t", "loss", "=", "self", ".", "L1Loss", "(", "predicted_depth", "[", "mask", "]", ",", "gt_depth", "[", "mask", "]", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "loss", "=", "self", ".", "L1Loss", "(", "predicted_depth", ",", "gt_depth", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.CPP_PDA_joint_training.CPP_PDA_joint_training_model.train": [[83, 201], ["time.time", "float", "len", "range", "print", "open", "open.write", "open.close", "print", "print", "open", "open.write", "open.write", "open.close", "print", "print", "open", "open.write", "open.write", "open.close", "CPP_PDA_joint_training.CPP_PDA_joint_training_model._set_models_train", "time.time", "sample_dict[].float", "utils.pda_aug.warp_image_depth_with_pose_augmentation", "utils.cpp_encoding.get_extrinsic_channel", "utils.cpp_encoding.get_extrinsic_channel", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "imageTensor_C.to.to.to", "depthGTTensor.to.to.to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "imageTensorWarped_C.to.to.to", "depthGTTensorWarped.to.to.to", "scheduler.step", "CPP_PDA_joint_training.CPP_PDA_joint_training_model.save_models", "CPP_PDA_joint_training.CPP_PDA_joint_training_model.evaluate", "sample_dict.keys", "sample_dict[].float", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "CPP_PDA_joint_training.CPP_PDA_joint_training_model.depth_optimizer.zero_grad", "CPP_PDA_joint_training.CPP_PDA_joint_training_model.compute_depth_loss", "CPP_PDA_joint_training.CPP_PDA_joint_training_model.compute_depth_loss", "CPP_PDA_joint_training.CPP_PDA_joint_training_model.depth_optimizer.step", "CPP_PDA_joint_training.CPP_PDA_joint_training_model.print_and_write_loss_summary", "print", "open", "open.write", "open.close", "str", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "total_loss.backward", "len", "str", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "amp.scale_loss", "total_loss_scaled.backward", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "getattr"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._set_models_train", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.warp_image_depth_with_pose_augmentation", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.cpp_encoding.get_extrinsic_channel", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.cpp_encoding.get_extrinsic_channel", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model.save_models", "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.evaluate", "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.compute_depth_loss", "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.compute_depth_loss", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model.print_and_write_loss_summary"], ["", "def", "train", "(", "self", ")", ":", "\n", "\t\t", "phase", "=", "'train'", "\n", "since", "=", "time", ".", "time", "(", ")", "\n", "best_loss", "=", "float", "(", "'inf'", ")", "\n", "\n", "self", ".", "train_display_freq", "=", "len", "(", "self", ".", "training_dataloader", ")", "\n", "\n", "tensorboardX_iter_count", "=", "0", "\n", "for", "epoch", "in", "range", "(", "self", ".", "total_epoch_num", ")", ":", "\n", "\t\t\t", "print", "(", "'\\nEpoch {}/{}'", ".", "format", "(", "epoch", "+", "1", ",", "self", ".", "total_epoch_num", ")", ")", "\n", "print", "(", "'-'", "*", "10", ")", "\n", "fn", "=", "open", "(", "self", ".", "train_log", ",", "'a'", ")", "\n", "fn", ".", "write", "(", "'\\nEpoch {}/{}\\n'", ".", "format", "(", "epoch", "+", "1", ",", "self", ".", "total_epoch_num", ")", ")", "\n", "fn", ".", "write", "(", "'--'", "*", "5", "+", "'\\n'", ")", "\n", "fn", ".", "close", "(", ")", "\n", "\n", "self", ".", "_set_models_train", "(", "[", "'depthEstModel'", "]", ")", "\n", "\n", "# Iterate over data.", "\n", "iterCount", "=", "0", "\n", "\n", "for", "sample_dict", "in", "self", ".", "training_dataloader", ":", "\n", "\t\t\t\t", "imageTensor", ",", "depthGTTensor", "=", "sample_dict", "[", "'rgb'", "]", ",", "sample_dict", "[", "'depth'", "]", "\n", "extrinsic_para", "=", "sample_dict", "[", "'extrinsic'", "]", ".", "float", "(", ")", "# otherwise mismatch data type double and float", "\n", "if", "\"intrinsic\"", "in", "sample_dict", ".", "keys", "(", ")", ":", "\n", "# for ScanNet only", "\n", "\t\t\t\t\t", "intrinsic_para", "=", "sample_dict", "[", "'intrinsic'", "]", ".", "float", "(", ")", "# fx, fy, px, py", "\n", "focal_length", "=", "intrinsic_para", "[", ":", ",", ":", "2", "]", "\n", "p_pt", "=", "intrinsic_para", "[", ":", ",", "2", ":", "]", "\n", "", "else", ":", "\n", "# for interiorNet, fixed intrincis for all data", "\n", "\t\t\t\t\t", "focal_length", "=", "300", "\n", "p_pt", "=", "(", "120", ",", "160", ")", "\n", "\n", "", "if", "'restricted'", "in", "self", ".", "training_set_name", ":", "\n", "\t\t\t\t\t", "encoding_pitch_noise_tensor", "=", "torch", ".", "zeros", "(", "extrinsic_para", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "uniform_", "(", "-", "self", ".", "ENCODING_PITCH_NOISE", ",", "self", ".", "ENCODING_PITCH_NOISE", ")", "\n", "encoding_height_noise_tensor", "=", "torch", ".", "zeros", "(", "extrinsic_para", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "uniform_", "(", "-", "self", ".", "ENCODING_HEIGHT_NOISE", ",", "self", ".", "ENCODING_HEIGHT_NOISE", ")", "\n", "extrinsic_para", "[", ":", ",", "2", "]", "+=", "encoding_height_noise_tensor", "\n", "extrinsic_para", "[", ":", ",", "3", "]", "+=", "encoding_pitch_noise_tensor", "\n", "# print('noise injection~')", "\n", "if", "'ScanNet'", "in", "self", ".", "training_set_name", ":", "\n", "\t\t\t\t\t\t", "encoding_roll_noise_tensor", "=", "torch", ".", "zeros", "(", "extrinsic_para", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "uniform_", "(", "-", "self", ".", "ENCODING_ROLL_NOISE", ",", "self", ".", "ENCODING_ROLL_NOISE", ")", "\n", "extrinsic_para", "[", ":", ",", "4", "]", "+=", "encoding_roll_noise_tensor", "\n", "\n", "# PDA step", "\n", "", "", "warp_return_dict", "=", "warp_image_depth_with_pose_augmentation", "(", "imageTensor", ",", "depthGTTensor", ",", "extrinsic_para", ",", "focal_length", ",", "p_pt", ",", "self", ".", "training_set_name", ",", "augmentation", "=", "sample_dict", "[", "'augmentation'", "]", ")", "\n", "imageTensorWarped", ",", "depthGTTensorWarped", ",", "extrinsic_para_W", "=", "warp_return_dict", "[", "'image_warped'", "]", ",", "warp_return_dict", "[", "'depth_warped'", "]", ",", "warp_return_dict", "[", "'pose_perturbed'", "]", "\n", "\n", "# CPP step", "\n", "extrinsic_channel", "=", "get_extrinsic_channel", "(", "imageTensor", ",", "focal_length", ",", "p_pt", ",", "extrinsic_para", ",", "self", ".", "CEILING_HEIGHT", ",", "augmentation", "=", "sample_dict", "[", "'augmentation'", "]", ")", "\n", "extrinsic_channel_W", "=", "get_extrinsic_channel", "(", "imageTensorWarped", ",", "focal_length", ",", "p_pt", ",", "extrinsic_para_W", ",", "self", ".", "CEILING_HEIGHT", ",", "augmentation", "=", "sample_dict", "[", "'augmentation'", "]", ")", "\n", "\n", "imageTensor_C", "=", "torch", ".", "cat", "(", "(", "imageTensor", ",", "extrinsic_channel", ")", ",", "dim", "=", "1", ")", "\n", "imageTensor_C", "=", "imageTensor_C", ".", "to", "(", "self", ".", "device", ")", "\n", "depthGTTensor", "=", "depthGTTensor", ".", "to", "(", "self", ".", "device", ")", "# [B_size, 1, 240, 320]", "\n", "valid_mask", "=", "(", "depthGTTensor", ">=", "-", "1.", ")", "&", "(", "depthGTTensor", "<=", "1.", ")", "\n", "\n", "imageTensorWarped_C", "=", "torch", ".", "cat", "(", "(", "imageTensorWarped", ",", "extrinsic_channel_W", ")", ",", "dim", "=", "1", ")", "\n", "imageTensorWarped_C", "=", "imageTensorWarped_C", ".", "to", "(", "self", ".", "device", ")", "\n", "depthGTTensorWarped", "=", "depthGTTensorWarped", ".", "to", "(", "self", ".", "device", ")", "# [B_size, 1, 240, 320]", "\n", "warped_valid_mask", "=", "(", "depthGTTensorWarped", ">=", "-", "1.", ")", "&", "(", "depthGTTensorWarped", "<=", "1.", ")", "\n", "\n", "with", "torch", ".", "set_grad_enabled", "(", "phase", "==", "'train'", ")", ":", "\n", "\n", "\t\t\t\t\t", "total_loss", "=", "0.", "\n", "#############  train the depthEstimator", "\n", "self", ".", "depth_optimizer", ".", "zero_grad", "(", ")", "\n", "depth_loss", "=", "self", ".", "compute_depth_loss", "(", "imageTensor_C", ",", "depthGTTensor", ",", "valid_mask", ")", "\n", "total_loss", "+=", "depth_loss", "\n", "\n", "warped_depth_loss", "=", "self", ".", "compute_depth_loss", "(", "imageTensorWarped_C", ",", "depthGTTensorWarped", ",", "warped_valid_mask", ")", "\n", "total_loss", "+=", "warped_depth_loss", "\n", "\n", "if", "self", ".", "use_apex", ":", "\n", "\t\t\t\t\t\t", "with", "amp", ".", "scale_loss", "(", "total_loss", ",", "self", ".", "depth_optimizer", ")", "as", "total_loss_scaled", ":", "\n", "\t\t\t\t\t\t\t", "total_loss_scaled", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "\t\t\t\t\t\t", "total_loss", ".", "backward", "(", ")", "\n", "\n", "", "self", ".", "depth_optimizer", ".", "step", "(", ")", "\n", "\n", "", "iterCount", "+=", "1", "\n", "if", "iterCount", "%", "20", "==", "0", ":", "\n", "\t\t\t\t\t", "loss_name", "=", "[", "'total_loss'", ",", "'depth_loss'", ",", "'warped_depth_loss'", "]", "\n", "loss_value", "=", "[", "total_loss", ",", "depth_loss", ",", "warped_depth_loss", "]", "\n", "self", ".", "print_and_write_loss_summary", "(", "iterCount", ",", "len", "(", "self", ".", "training_dataloader", ")", ",", "loss_name", ",", "loss_value", ",", "self", ".", "train_log", ")", "\n", "\n", "# take step in optimizer", "\n", "", "", "for", "scheduler", "in", "self", ".", "scheduler_list", ":", "\n", "\t\t\t\t", "scheduler", ".", "step", "(", ")", "\n", "# print learning rate ", "\n", "for", "optim", "in", "self", ".", "optim_name", ":", "\n", "\t\t\t\t\t", "lr", "=", "getattr", "(", "self", ",", "optim", ")", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "lr_update", "=", "'Epoch {}/{} finished: {} learning rate = {:7f}'", ".", "format", "(", "epoch", "+", "1", ",", "self", ".", "total_epoch_num", ",", "optim", ",", "lr", ")", "\n", "print", "(", "lr_update", ")", "\n", "\n", "fn", "=", "open", "(", "self", ".", "train_log", ",", "'a'", ")", "\n", "fn", ".", "write", "(", "lr_update", "+", "'\\n'", ")", "\n", "fn", ".", "close", "(", ")", "\n", "\n", "", "", "if", "(", "epoch", "+", "1", ")", "%", "self", ".", "save_evaluate_steps", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "save_models", "(", "self", ".", "model_name", ",", "mode", "=", "epoch", "+", "1", ")", "\n", "_", "=", "self", ".", "evaluate", "(", "epoch", "+", "1", ")", "\n", "\n", "", "", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "since", "\n", "print", "(", "'Training complete in {:.0f}m {:.0f}s'", ".", "format", "(", "time_elapsed", "//", "60", ",", "time_elapsed", "%", "60", ")", ")", "\n", "\n", "fn", "=", "open", "(", "self", ".", "train_log", ",", "'a'", ")", "\n", "fn", ".", "write", "(", "'Training complete in {:.0f}m {:.0f}s\\n'", ".", "format", "(", "time_elapsed", "//", "60", ",", "time_elapsed", "%", "60", ")", ")", "\n", "fn", ".", "close", "(", ")", "\n", "\n", "best_model_summary", "=", "'Overall best model is epoch {}'", ".", "format", "(", "self", ".", "EVAL_best_model_epoch", ")", "\n", "print", "(", "best_model_summary", ")", "\n", "print", "(", "self", ".", "EVAL_all_results", "[", "str", "(", "self", ".", "EVAL_best_model_epoch", ")", "]", ")", "\n", "fn", "=", "open", "(", "self", ".", "evaluate_log", ",", "'a'", ")", "\n", "fn", ".", "write", "(", "best_model_summary", "+", "'\\n'", ")", "\n", "fn", ".", "write", "(", "self", ".", "EVAL_all_results", "[", "str", "(", "self", ".", "EVAL_best_model_epoch", ")", "]", "+", "'\\n'", ")", "\n", "fn", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.CPP_PDA_joint_training.CPP_PDA_joint_training_model.evaluate": [[202, 323], ["print", "print", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "isinstance", "CPP_PDA_joint_training.CPP_PDA_joint_training_model._set_models_eval", "open.write", "open.write", "open.close", "CPP_PDA_joint_training.CPP_PDA_joint_training_model._load_models", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Result", "Result.evaluate", "Result.individual_results", "print", "print", "float", "open", "open", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "sample_dict[].float", "utils.cpp_encoding.get_extrinsic_channel", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "np.logical_and", "print", "imageTensor_C.to.to.to", "depthGTTensor.detach().to.detach().to.to", "depthGTTensor.detach().to.detach().to.detach().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "isinstance", "isinstance", "print", "open", "open.write", "open.write", "open.write", "open.close", "sample_dict.keys", "sample_dict[].float", "[].detach().to", "isinstance", "CPP_PDA_joint_training.CPP_PDA_joint_training_model.L1Loss", "CPP_PDA_joint_training.CPP_PDA_joint_training_model.detach().cpu", "validation_loss.item", "validation_loss.item", "CPP_PDA_joint_training.CPP_PDA_joint_training_model.save_models", "validation_loss.item", "str", "amp.disable_casts", "[].detach().to", "depthGTTensor.detach().to.detach().to.detach", "imageTensor.to", "str", "[].detach", "CPP_PDA_joint_training.CPP_PDA_joint_training_model.detach", "[].detach", "CPP_PDA_joint_training.CPP_PDA_joint_training_model.depthEstModel", "CPP_PDA_joint_training.CPP_PDA_joint_training_model.depthEstModel"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._set_models_eval", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._load_models", "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.evaluate", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.Result.individual_results", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.cpp_encoding.get_extrinsic_channel", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model.save_models"], ["", "def", "evaluate", "(", "self", ",", "mode", ")", ":", "\n", "\t\t", "'''\n\t\t\tmode choose from <int> or best\n\t\t\t<int> is the number of epoch, represents the number of epoch, used for in training evaluation\n\t\t\t'best' is used for after training mode\n\t\t'''", "\n", "\n", "set_name", "=", "'test'", "\n", "eval_model_list", "=", "[", "'depthEstModel'", "]", "\n", "\n", "if", "isinstance", "(", "mode", ",", "int", ")", "and", "self", ".", "is_train", ":", "\n", "\t\t\t", "self", ".", "_set_models_eval", "(", "eval_model_list", ")", "\n", "if", "self", ".", "EVAL_best_loss", "==", "float", "(", "'inf'", ")", ":", "\n", "\t\t\t\t", "fn", "=", "open", "(", "self", ".", "evaluate_log", ",", "'w'", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "fn", "=", "open", "(", "self", ".", "evaluate_log", ",", "'a'", ")", "\n", "\n", "", "fn", ".", "write", "(", "'Evaluating with mode: {} | dataset: {} \\n'", ".", "format", "(", "mode", ",", "self", ".", "testing_set_name", ")", ")", "\n", "fn", ".", "write", "(", "'\\tEvaluation range min: {} | max: {} \\n'", ".", "format", "(", "self", ".", "EVAL_DEPTH_MIN", ",", "self", ".", "EVAL_DEPTH_MAX", ")", ")", "\n", "fn", ".", "close", "(", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "_load_models", "(", "eval_model_list", ",", "mode", ")", "\n", "\n", "", "print", "(", "'Evaluating with mode: {} | dataset: {}'", ".", "format", "(", "mode", ",", "self", ".", "testing_set_name", ")", ")", "\n", "print", "(", "'\\tEvaluation range min: {} | max: {}'", ".", "format", "(", "self", ".", "EVAL_DEPTH_MIN", ",", "self", ".", "EVAL_DEPTH_MAX", ")", ")", "\n", "\n", "total_loss", "=", "0.", "\n", "count", "=", "0", "\n", "\n", "predTensor", "=", "torch", ".", "zeros", "(", "(", "1", ",", "1", ",", "self", ".", "H", ",", "self", ".", "W", ")", ")", ".", "to", "(", "'cpu'", ")", "\n", "grndTensor", "=", "torch", ".", "zeros", "(", "(", "1", ",", "1", ",", "self", ".", "H", ",", "self", ".", "W", ")", ")", ".", "to", "(", "'cpu'", ")", "\n", "imgTensor", "=", "torch", ".", "zeros", "(", "(", "1", ",", "3", ",", "self", ".", "H", ",", "self", ".", "W", ")", ")", ".", "to", "(", "'cpu'", ")", "\n", "extTensor", "=", "torch", ".", "zeros", "(", "(", "1", ",", "6", ")", ")", ".", "to", "(", "'cpu'", ")", "\n", "idx", "=", "0", "\n", "\n", "# tensorboardX_iter_count = 0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "for", "sample_dict", "in", "self", ".", "testing_dataloader", ":", "\n", "\t\t\t\t", "imageTensor", ",", "depthGTTensor", "=", "sample_dict", "[", "'rgb'", "]", ",", "sample_dict", "[", "'depth'", "]", "\n", "extrinsic_para", "=", "sample_dict", "[", "'extrinsic'", "]", ".", "float", "(", ")", "# otherwise mismatch data type double and float", "\n", "\n", "if", "\"intrinsic\"", "in", "sample_dict", ".", "keys", "(", ")", ":", "\n", "# for ScanNet only", "\n", "\t\t\t\t\t", "intrinsic_para", "=", "sample_dict", "[", "'intrinsic'", "]", ".", "float", "(", ")", "# fx, fy, px, py", "\n", "focal_length", "=", "intrinsic_para", "[", ":", ",", ":", "2", "]", "\n", "p_pt", "=", "intrinsic_para", "[", ":", ",", "2", ":", "]", "\n", "", "else", ":", "\n", "# for interiorNet", "\n", "\t\t\t\t\t", "focal_length", "=", "300", "\n", "p_pt", "=", "(", "120", ",", "160", ")", "\n", "\n", "", "extrinsic_channel", "=", "get_extrinsic_channel", "(", "imageTensor", ",", "focal_length", ",", "p_pt", ",", "extrinsic_para", ",", "self", ".", "CEILING_HEIGHT", ")", "\n", "imageTensor_C", "=", "torch", ".", "cat", "(", "(", "imageTensor", ",", "extrinsic_channel", ")", ",", "dim", "=", "1", ")", "\n", "valid_mask", "=", "np", ".", "logical_and", "(", "depthGTTensor", ">=", "self", ".", "EVAL_DEPTH_MIN", ",", "depthGTTensor", "<=", "self", ".", "EVAL_DEPTH_MAX", ")", "\n", "\n", "idx", "+=", "imageTensor", ".", "shape", "[", "0", "]", "\n", "print", "(", "'epoch {}: have processed {} number samples in {} set'", ".", "format", "(", "mode", ",", "str", "(", "idx", ")", ",", "set_name", ")", ")", "\n", "imageTensor_C", "=", "imageTensor_C", ".", "to", "(", "self", ".", "device", ")", "\n", "depthGTTensor", "=", "depthGTTensor", ".", "to", "(", "self", ".", "device", ")", "# real depth", "\n", "\n", "if", "self", ".", "is_train", "and", "self", ".", "use_apex", ":", "\n", "\t\t\t\t\t", "with", "amp", ".", "disable_casts", "(", ")", ":", "\n", "\t\t\t\t\t\t", "predDepth", "=", "self", ".", "depthEstModel", "(", "imageTensor_C", ")", "[", "-", "1", "]", ".", "detach", "(", ")", ".", "to", "(", "'cpu'", ")", "\n", "", "", "else", ":", "\n", "\t\t\t\t\t", "predDepth", "=", "self", ".", "depthEstModel", "(", "imageTensor_C", ")", "[", "-", "1", "]", ".", "detach", "(", ")", ".", "to", "(", "'cpu'", ")", "\n", "\n", "# recover real depth", "\n", "", "predDepth", "=", "(", "(", "predDepth", "+", "1.0", ")", "*", "0.5", "*", "(", "self", ".", "MAX_DEPTH_CLIP", "-", "self", ".", "MIN_DEPTH_CLIP", ")", ")", "+", "self", ".", "MIN_DEPTH_CLIP", "\n", "\n", "depthGTTensor", "=", "depthGTTensor", ".", "detach", "(", ")", ".", "to", "(", "'cpu'", ")", "\n", "predTensor", "=", "torch", ".", "cat", "(", "(", "predTensor", ",", "predDepth", ")", ",", "dim", "=", "0", ")", "\n", "grndTensor", "=", "torch", ".", "cat", "(", "(", "grndTensor", ",", "depthGTTensor", ")", ",", "dim", "=", "0", ")", "\n", "imgTensor", "=", "torch", ".", "cat", "(", "(", "imgTensor", ",", "imageTensor", ".", "to", "(", "'cpu'", ")", ")", ",", "dim", "=", "0", ")", "\n", "extTensor", "=", "torch", ".", "cat", "(", "(", "extTensor", ",", "extrinsic_para", ")", ",", "dim", "=", "0", ")", "\n", "\n", "if", "isinstance", "(", "mode", ",", "int", ")", "and", "self", ".", "is_train", ":", "\n", "\t\t\t\t\t", "eval_depth_loss", "=", "self", ".", "L1Loss", "(", "predDepth", "[", "valid_mask", "]", ",", "depthGTTensor", "[", "valid_mask", "]", ")", "\n", "total_loss", "+=", "eval_depth_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "", "count", "+=", "1", "\n", "\n", "", "if", "isinstance", "(", "mode", ",", "int", ")", "and", "self", ".", "is_train", ":", "\n", "\t\t\t\t", "validation_loss", "=", "(", "total_loss", "/", "count", ")", "\n", "\n", "", "results_nyu", "=", "Result", "(", "mask_min", "=", "self", ".", "EVAL_DEPTH_MIN", ",", "mask_max", "=", "self", ".", "EVAL_DEPTH_MAX", ")", "\n", "results_nyu", ".", "evaluate", "(", "predTensor", "[", "1", ":", "]", ",", "grndTensor", "[", "1", ":", "]", ")", "\n", "individual_results", "=", "results_nyu", ".", "individual_results", "(", "predTensor", "[", "1", ":", "]", ",", "grndTensor", "[", "1", ":", "]", ")", "\n", "\n", "result1", "=", "'\\tabs_rel:{:.3f}, sq_rel:{:.3f}, rmse:{:.3f}, rmse_log:{:.3f}, mae:{:.3f} '", ".", "format", "(", "\n", "results_nyu", ".", "absrel", ",", "results_nyu", ".", "sqrel", ",", "results_nyu", ".", "rmse", ",", "results_nyu", ".", "rmselog", ",", "results_nyu", ".", "mae", ")", "\n", "result2", "=", "'\\t[<1.25]:{:.3f}, [<1.25^2]:{:.3f}, [<1.25^3]::{:.3f}'", ".", "format", "(", "results_nyu", ".", "delta1", ",", "results_nyu", ".", "delta2", ",", "results_nyu", ".", "delta3", ")", "\n", "\n", "print", "(", "result1", ")", "\n", "print", "(", "result2", ")", "\n", "\n", "if", "isinstance", "(", "mode", ",", "int", ")", "and", "self", ".", "is_train", ":", "\n", "\t\t\t\t", "self", ".", "EVAL_all_results", "[", "str", "(", "mode", ")", "]", "=", "result1", "+", "'\\t'", "+", "result2", "\n", "\n", "if", "validation_loss", ".", "item", "(", ")", "<", "self", ".", "EVAL_best_loss", ":", "\n", "\t\t\t\t\t", "self", ".", "EVAL_best_loss", "=", "validation_loss", ".", "item", "(", ")", "\n", "self", ".", "EVAL_best_model_epoch", "=", "mode", "\n", "self", ".", "save_models", "(", "self", ".", "model_name", ",", "mode", "=", "'best'", ")", "\n", "\n", "", "best_model_summary", "=", "'\\tCurrent eval loss {:.4f}, current best loss {:.4f}, current best model {}\\n'", ".", "format", "(", "validation_loss", ".", "item", "(", ")", ",", "self", ".", "EVAL_best_loss", ",", "self", ".", "EVAL_best_model_epoch", ")", "\n", "print", "(", "best_model_summary", ")", "\n", "\n", "fn", "=", "open", "(", "self", ".", "evaluate_log", ",", "'a'", ")", "\n", "fn", ".", "write", "(", "result1", "+", "'\\n'", ")", "\n", "fn", ".", "write", "(", "result2", "+", "'\\n'", ")", "\n", "fn", ".", "write", "(", "best_model_summary", "+", "'\\n'", ")", "\n", "fn", ".", "close", "(", ")", "\n", "\n", "", "return_dict", "=", "{", "}", "\n", "return_dict", "[", "'rgb'", "]", "=", "imgTensor", "[", "1", ":", "]", "\n", "return_dict", "[", "'depth_pred'", "]", "=", "predTensor", "[", "1", ":", "]", "\n", "return_dict", "[", "'depth_gt'", "]", "=", "grndTensor", "[", "1", ":", "]", "\n", "return_dict", "[", "'extrinsic'", "]", "=", "extTensor", "[", "1", ":", "]", "\n", "return_dict", "[", "'ind_results'", "]", "=", "individual_results", "\n", "\n", "return", "return_dict", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.CPP_training.CPP_training_model.__init__": [[27, 62], ["training.base_model.base_model.__init__", "CPP_training.CPP_training_model._initialize_training", "torchvision.models.T2Net._UNetGenerator", "float", "CPP_training.CPP_training_model._check_parallel", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "CPP_training.CPP_training_model._get_scheduler", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "CPP_training.CPP_training_model._initialize_networks", "CPP_training.CPP_training_model.depthEstModel.parameters", "CPP_training.CPP_training_model._init_apex"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._initialize_training", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._check_parallel", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._get_scheduler", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._initialize_networks", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._init_apex"], ["\t", "def", "__init__", "(", "self", ",", "args", ",", "training_dataloader", ",", "testing_dataloader", ")", ":", "\n", "\t\t", "super", "(", "CPP_training_model", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "_initialize_training", "(", ")", "\n", "\n", "self", ".", "training_dataloader", "=", "training_dataloader", "\n", "self", ".", "testing_dataloader", "=", "testing_dataloader", "\n", "self", ".", "MIN_DEPTH_CLIP", "=", "1.0", "\n", "self", ".", "MAX_DEPTH_CLIP", "=", "10.0", "\n", "\n", "self", ".", "EVAL_DEPTH_MIN", "=", "1.0", "\n", "self", ".", "EVAL_DEPTH_MAX", "=", "10.0", "\n", "\n", "self", ".", "CEILING_HEIGHT", "=", "3.0", "\n", "\n", "self", ".", "save_evaluate_steps", "=", "10", "\n", "\n", "self", ".", "depthEstModel", "=", "_UNetGenerator", "(", "input_nc", "=", "4", ",", "output_nc", "=", "1", ")", "\n", "self", ".", "model_name", "=", "[", "'depthEstModel'", "]", "\n", "\n", "if", "self", ".", "is_train", ":", "\n", "\t\t\t", "self", ".", "depth_optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "depthEstModel", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "base_lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "self", ".", "optim_name", "=", "[", "'depth_optimizer'", "]", "\n", "self", ".", "_get_scheduler", "(", ")", "\n", "self", ".", "L1Loss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "_initialize_networks", "(", "[", "'depthEstModel'", "]", ")", "\n", "\n", "# apex can only be applied to CUDA models", "\n", "if", "self", ".", "use_apex", ":", "\n", "\t\t\t\t", "self", ".", "_init_apex", "(", "Num_losses", "=", "2", ")", "\n", "\n", "", "", "self", ".", "EVAL_best_loss", "=", "float", "(", "'inf'", ")", "\n", "self", ".", "EVAL_best_model_epoch", "=", "0", "\n", "self", ".", "EVAL_all_results", "=", "{", "}", "\n", "\n", "self", ".", "_check_parallel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.CPP_training.CPP_training_model._get_project_name": [[63, 65], ["None"], "methods", ["None"], ["", "def", "_get_project_name", "(", "self", ")", ":", "\n", "\t\t", "return", "'CPP_training_model'", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.CPP_training.CPP_training_model._initialize_networks": [[66, 70], ["getattr().train().to", "torchvision.models.T2Net.init_weights", "getattr", "getattr().train", "getattr"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.init_weights", "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.train"], ["", "def", "_initialize_networks", "(", "self", ",", "model_name", ")", ":", "\n", "\t\t", "for", "name", "in", "model_name", ":", "\n", "\t\t\t", "getattr", "(", "self", ",", "name", ")", ".", "train", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "init_weights", "(", "getattr", "(", "self", ",", "name", ")", ",", "net_name", "=", "name", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.CPP_training.CPP_training_model.compute_depth_loss": [[71, 81], ["CPP_training.CPP_training_model.depthEstModel", "CPP_training.CPP_training_model.L1Loss", "CPP_training.CPP_training_model.L1Loss", "rgb.detach"], "methods", ["None"], ["", "", "def", "compute_depth_loss", "(", "self", ",", "rgb", ",", "gt_depth", ",", "mask", "=", "None", ")", ":", "\n", "\t\t", "predicted_depth", "=", "self", ".", "depthEstModel", "(", "rgb", ".", "detach", "(", ")", ")", "[", "-", "1", "]", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "\t\t\t", "loss", "=", "self", ".", "L1Loss", "(", "predicted_depth", "[", "mask", "]", ",", "gt_depth", "[", "mask", "]", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "loss", "=", "self", ".", "L1Loss", "(", "predicted_depth", ",", "gt_depth", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.CPP_training.CPP_training_model.train": [[82, 175], ["time.time", "float", "len", "range", "print", "open", "open.write", "open.close", "print", "print", "open", "open.write", "open.write", "open.close", "print", "print", "open", "open.write", "open.write", "open.close", "CPP_training.CPP_training_model._set_models_train", "time.time", "sample_dict[].float", "utils.cpp_encoding.get_extrinsic_channel", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "imageTensor_C.to.to.to", "depthGTTensor.to.to.to", "scheduler.step", "CPP_training.CPP_training_model.save_models", "CPP_training.CPP_training_model.evaluate", "sample_dict.keys", "sample_dict[].float", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "CPP_training.CPP_training_model.depth_optimizer.zero_grad", "CPP_training.CPP_training_model.compute_depth_loss", "CPP_training.CPP_training_model.depth_optimizer.step", "CPP_training.CPP_training_model.print_and_write_loss_summary", "print", "open", "open.write", "open.close", "str", "total_loss.backward", "len", "str", "amp.scale_loss", "total_loss_scaled.backward", "getattr"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._set_models_train", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.cpp_encoding.get_extrinsic_channel", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model.save_models", "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.evaluate", "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.compute_depth_loss", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model.print_and_write_loss_summary"], ["", "def", "train", "(", "self", ")", ":", "\n", "\t\t", "phase", "=", "'train'", "\n", "since", "=", "time", ".", "time", "(", ")", "\n", "best_loss", "=", "float", "(", "'inf'", ")", "\n", "\n", "self", ".", "train_display_freq", "=", "len", "(", "self", ".", "training_dataloader", ")", "\n", "\n", "tensorboardX_iter_count", "=", "0", "\n", "for", "epoch", "in", "range", "(", "self", ".", "total_epoch_num", ")", ":", "\n", "\t\t\t", "print", "(", "'\\nEpoch {}/{}'", ".", "format", "(", "epoch", "+", "1", ",", "self", ".", "total_epoch_num", ")", ")", "\n", "print", "(", "'-'", "*", "10", ")", "\n", "fn", "=", "open", "(", "self", ".", "train_log", ",", "'a'", ")", "\n", "fn", ".", "write", "(", "'\\nEpoch {}/{}\\n'", ".", "format", "(", "epoch", "+", "1", ",", "self", ".", "total_epoch_num", ")", ")", "\n", "fn", ".", "write", "(", "'--'", "*", "5", "+", "'\\n'", ")", "\n", "fn", ".", "close", "(", ")", "\n", "\n", "self", ".", "_set_models_train", "(", "[", "'depthEstModel'", "]", ")", "\n", "\n", "# Iterate over data.", "\n", "iterCount", "=", "0", "\n", "\n", "for", "sample_dict", "in", "self", ".", "training_dataloader", ":", "\n", "\t\t\t\t", "imageTensor", ",", "depthGTTensor", "=", "sample_dict", "[", "'rgb'", "]", ",", "sample_dict", "[", "'depth'", "]", "\n", "extrinsic_para", "=", "sample_dict", "[", "'extrinsic'", "]", ".", "float", "(", ")", "# otherwise mismatch data type double and float", "\n", "if", "\"intrinsic\"", "in", "sample_dict", ".", "keys", "(", ")", ":", "\n", "# for ScanNet only", "\n", "\t\t\t\t\t", "intrinsic_para", "=", "sample_dict", "[", "'intrinsic'", "]", ".", "float", "(", ")", "# fx, fy, px, py", "\n", "focal_length", "=", "intrinsic_para", "[", ":", ",", ":", "2", "]", "\n", "p_pt", "=", "intrinsic_para", "[", ":", ",", "2", ":", "]", "\n", "", "else", ":", "\n", "# for interiorNet", "\n", "\t\t\t\t\t", "focal_length", "=", "300", "\n", "p_pt", "=", "(", "120", ",", "160", ")", "\n", "\n", "", "extrinsic_channel", "=", "get_extrinsic_channel", "(", "imageTensor", ",", "focal_length", ",", "p_pt", ",", "extrinsic_para", ",", "self", ".", "CEILING_HEIGHT", ",", "augmentation", "=", "sample_dict", "[", "'augmentation'", "]", ")", "\n", "\n", "imageTensor_C", "=", "torch", ".", "cat", "(", "(", "imageTensor", ",", "extrinsic_channel", ")", ",", "dim", "=", "1", ")", "\n", "imageTensor_C", "=", "imageTensor_C", ".", "to", "(", "self", ".", "device", ")", "\n", "depthGTTensor", "=", "depthGTTensor", ".", "to", "(", "self", ".", "device", ")", "# [B_size, 1, 240, 320]", "\n", "valid_mask", "=", "(", "depthGTTensor", ">=", "-", "1.", ")", "&", "(", "depthGTTensor", "<=", "1.", ")", "\n", "\n", "with", "torch", ".", "set_grad_enabled", "(", "phase", "==", "'train'", ")", ":", "\n", "\n", "\t\t\t\t\t", "total_loss", "=", "0.", "\n", "#############  train the depthEstimator", "\n", "self", ".", "depth_optimizer", ".", "zero_grad", "(", ")", "\n", "depth_loss", "=", "self", ".", "compute_depth_loss", "(", "imageTensor_C", ",", "depthGTTensor", ",", "valid_mask", ")", "\n", "total_loss", "+=", "depth_loss", "\n", "\n", "if", "self", ".", "use_apex", ":", "\n", "\t\t\t\t\t\t", "with", "amp", ".", "scale_loss", "(", "total_loss", ",", "self", ".", "depth_optimizer", ")", "as", "total_loss_scaled", ":", "\n", "\t\t\t\t\t\t\t", "total_loss_scaled", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "\t\t\t\t\t\t", "total_loss", ".", "backward", "(", ")", "\n", "\n", "", "self", ".", "depth_optimizer", ".", "step", "(", ")", "\n", "\n", "", "iterCount", "+=", "1", "\n", "if", "iterCount", "%", "20", "==", "0", ":", "\n", "\t\t\t\t\t", "loss_name", "=", "[", "'total_loss'", ",", "'depth_loss'", "]", "\n", "loss_value", "=", "[", "total_loss", ",", "depth_loss", "]", "\n", "self", ".", "print_and_write_loss_summary", "(", "iterCount", ",", "len", "(", "self", ".", "training_dataloader", ")", ",", "loss_name", ",", "loss_value", ",", "self", ".", "train_log", ")", "\n", "\n", "# take step in optimizer", "\n", "", "", "for", "scheduler", "in", "self", ".", "scheduler_list", ":", "\n", "\t\t\t\t", "scheduler", ".", "step", "(", ")", "\n", "for", "optim", "in", "self", ".", "optim_name", ":", "\n", "\t\t\t\t\t", "lr", "=", "getattr", "(", "self", ",", "optim", ")", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "lr_update", "=", "'Epoch {}/{} finished: {} learning rate = {:7f}'", ".", "format", "(", "epoch", "+", "1", ",", "self", ".", "total_epoch_num", ",", "optim", ",", "lr", ")", "\n", "print", "(", "lr_update", ")", "\n", "\n", "fn", "=", "open", "(", "self", ".", "train_log", ",", "'a'", ")", "\n", "fn", ".", "write", "(", "lr_update", "+", "'\\n'", ")", "\n", "fn", ".", "close", "(", ")", "\n", "\n", "", "", "if", "(", "epoch", "+", "1", ")", "%", "self", ".", "save_evaluate_steps", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "save_models", "(", "self", ".", "model_name", ",", "mode", "=", "epoch", "+", "1", ")", "\n", "_", "=", "self", ".", "evaluate", "(", "epoch", "+", "1", ")", "\n", "\n", "", "", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "since", "\n", "print", "(", "'Training complete in {:.0f}m {:.0f}s'", ".", "format", "(", "time_elapsed", "//", "60", ",", "time_elapsed", "%", "60", ")", ")", "\n", "\n", "fn", "=", "open", "(", "self", ".", "train_log", ",", "'a'", ")", "\n", "fn", ".", "write", "(", "'Training complete in {:.0f}m {:.0f}s\\n'", ".", "format", "(", "time_elapsed", "//", "60", ",", "time_elapsed", "%", "60", ")", ")", "\n", "fn", ".", "close", "(", ")", "\n", "\n", "best_model_summary", "=", "'Overall best model is epoch {}'", ".", "format", "(", "self", ".", "EVAL_best_model_epoch", ")", "\n", "print", "(", "best_model_summary", ")", "\n", "print", "(", "self", ".", "EVAL_all_results", "[", "str", "(", "self", ".", "EVAL_best_model_epoch", ")", "]", ")", "\n", "fn", "=", "open", "(", "self", ".", "evaluate_log", ",", "'a'", ")", "\n", "fn", ".", "write", "(", "best_model_summary", "+", "'\\n'", ")", "\n", "fn", ".", "write", "(", "self", ".", "EVAL_all_results", "[", "str", "(", "self", ".", "EVAL_best_model_epoch", ")", "]", "+", "'\\n'", ")", "\n", "fn", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.CPP_training.CPP_training_model.evaluate": [[176, 296], ["print", "print", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "isinstance", "CPP_training.CPP_training_model._set_models_eval", "open.write", "open.write", "open.close", "CPP_training.CPP_training_model._load_models", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Result", "Result.evaluate", "Result.individual_results", "print", "print", "float", "open", "open", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "sample_dict[].float", "utils.cpp_encoding.get_extrinsic_channel", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "np.logical_and", "print", "imageTensor_C.to.to.to", "depthGTTensor.detach().to.detach().to.to", "depthGTTensor.detach().to.detach().to.detach().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "isinstance", "isinstance", "print", "open", "open.write", "open.write", "open.write", "open.close", "sample_dict.keys", "sample_dict[].float", "[].detach().to", "isinstance", "CPP_training.CPP_training_model.L1Loss", "CPP_training.CPP_training_model.detach().cpu", "validation_loss.item", "validation_loss.item", "CPP_training.CPP_training_model.save_models", "validation_loss.item", "str", "amp.disable_casts", "[].detach().to", "depthGTTensor.detach().to.detach().to.detach", "imageTensor.to", "str", "[].detach", "CPP_training.CPP_training_model.detach", "[].detach", "CPP_training.CPP_training_model.depthEstModel", "CPP_training.CPP_training_model.depthEstModel"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._set_models_eval", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._load_models", "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.evaluate", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.Result.individual_results", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.cpp_encoding.get_extrinsic_channel", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model.save_models"], ["", "def", "evaluate", "(", "self", ",", "mode", ")", ":", "\n", "\t\t", "'''\n\t\t\tmode choose from <int> or best\n\t\t\t<int> is the number of epoch, represents the number of epoch, used for in training evaluation\n\t\t\t'best' is used for after training mode\n\t\t'''", "\n", "\n", "set_name", "=", "'test'", "\n", "eval_model_list", "=", "[", "'depthEstModel'", "]", "\n", "\n", "if", "isinstance", "(", "mode", ",", "int", ")", "and", "self", ".", "is_train", ":", "\n", "\t\t\t", "self", ".", "_set_models_eval", "(", "eval_model_list", ")", "\n", "if", "self", ".", "EVAL_best_loss", "==", "float", "(", "'inf'", ")", ":", "\n", "\t\t\t\t", "fn", "=", "open", "(", "self", ".", "evaluate_log", ",", "'w'", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "fn", "=", "open", "(", "self", ".", "evaluate_log", ",", "'a'", ")", "\n", "\n", "", "fn", ".", "write", "(", "'Evaluating with mode: {} | dataset: {} \\n'", ".", "format", "(", "mode", ",", "self", ".", "testing_set_name", ")", ")", "\n", "fn", ".", "write", "(", "'\\tEvaluation range min: {} | max: {} \\n'", ".", "format", "(", "self", ".", "EVAL_DEPTH_MIN", ",", "self", ".", "EVAL_DEPTH_MAX", ")", ")", "\n", "fn", ".", "close", "(", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "_load_models", "(", "eval_model_list", ",", "mode", ")", "\n", "\n", "", "print", "(", "'Evaluating with mode: {} | dataset: {}'", ".", "format", "(", "mode", ",", "self", ".", "testing_set_name", ")", ")", "\n", "print", "(", "'\\tEvaluation range min: {} | max: {}'", ".", "format", "(", "self", ".", "EVAL_DEPTH_MIN", ",", "self", ".", "EVAL_DEPTH_MAX", ")", ")", "\n", "\n", "total_loss", "=", "0.", "\n", "count", "=", "0", "\n", "\n", "predTensor", "=", "torch", ".", "zeros", "(", "(", "1", ",", "1", ",", "self", ".", "H", ",", "self", ".", "W", ")", ")", ".", "to", "(", "'cpu'", ")", "\n", "grndTensor", "=", "torch", ".", "zeros", "(", "(", "1", ",", "1", ",", "self", ".", "H", ",", "self", ".", "W", ")", ")", ".", "to", "(", "'cpu'", ")", "\n", "imgTensor", "=", "torch", ".", "zeros", "(", "(", "1", ",", "3", ",", "self", ".", "H", ",", "self", ".", "W", ")", ")", ".", "to", "(", "'cpu'", ")", "\n", "extTensor", "=", "torch", ".", "zeros", "(", "(", "1", ",", "6", ")", ")", ".", "to", "(", "'cpu'", ")", "\n", "idx", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "for", "sample_dict", "in", "self", ".", "testing_dataloader", ":", "\n", "\t\t\t\t", "imageTensor", ",", "depthGTTensor", "=", "sample_dict", "[", "'rgb'", "]", ",", "sample_dict", "[", "'depth'", "]", "\n", "extrinsic_para", "=", "sample_dict", "[", "'extrinsic'", "]", ".", "float", "(", ")", "# otherwise mismatch data type double and float", "\n", "\n", "if", "\"intrinsic\"", "in", "sample_dict", ".", "keys", "(", ")", ":", "\n", "# for ScanNet only", "\n", "\t\t\t\t\t", "intrinsic_para", "=", "sample_dict", "[", "'intrinsic'", "]", ".", "float", "(", ")", "# fx, fy, px, py", "\n", "focal_length", "=", "intrinsic_para", "[", ":", ",", ":", "2", "]", "\n", "p_pt", "=", "intrinsic_para", "[", ":", ",", "2", ":", "]", "\n", "", "else", ":", "\n", "# for interiorNet", "\n", "\t\t\t\t\t", "focal_length", "=", "300", "\n", "p_pt", "=", "(", "120", ",", "160", ")", "\n", "\n", "", "extrinsic_channel", "=", "get_extrinsic_channel", "(", "imageTensor", ",", "focal_length", ",", "p_pt", ",", "extrinsic_para", ",", "self", ".", "CEILING_HEIGHT", ")", "\n", "imageTensor_C", "=", "torch", ".", "cat", "(", "(", "imageTensor", ",", "extrinsic_channel", ")", ",", "dim", "=", "1", ")", "\n", "valid_mask", "=", "np", ".", "logical_and", "(", "depthGTTensor", ">=", "self", ".", "EVAL_DEPTH_MIN", ",", "depthGTTensor", "<=", "self", ".", "EVAL_DEPTH_MAX", ")", "\n", "\n", "idx", "+=", "imageTensor", ".", "shape", "[", "0", "]", "\n", "print", "(", "'epoch {}: have processed {} number samples in {} set'", ".", "format", "(", "mode", ",", "str", "(", "idx", ")", ",", "set_name", ")", ")", "\n", "imageTensor_C", "=", "imageTensor_C", ".", "to", "(", "self", ".", "device", ")", "\n", "depthGTTensor", "=", "depthGTTensor", ".", "to", "(", "self", ".", "device", ")", "# real depth", "\n", "\n", "if", "self", ".", "is_train", "and", "self", ".", "use_apex", ":", "\n", "\t\t\t\t\t", "with", "amp", ".", "disable_casts", "(", ")", ":", "\n", "\t\t\t\t\t\t", "predDepth", "=", "self", ".", "depthEstModel", "(", "imageTensor_C", ")", "[", "-", "1", "]", ".", "detach", "(", ")", ".", "to", "(", "'cpu'", ")", "\n", "", "", "else", ":", "\n", "\t\t\t\t\t", "predDepth", "=", "self", ".", "depthEstModel", "(", "imageTensor_C", ")", "[", "-", "1", "]", ".", "detach", "(", ")", ".", "to", "(", "'cpu'", ")", "\n", "\n", "# recover real depth", "\n", "", "predDepth", "=", "(", "(", "predDepth", "+", "1.0", ")", "*", "0.5", "*", "(", "self", ".", "MAX_DEPTH_CLIP", "-", "self", ".", "MIN_DEPTH_CLIP", ")", ")", "+", "self", ".", "MIN_DEPTH_CLIP", "\n", "\n", "depthGTTensor", "=", "depthGTTensor", ".", "detach", "(", ")", ".", "to", "(", "'cpu'", ")", "\n", "predTensor", "=", "torch", ".", "cat", "(", "(", "predTensor", ",", "predDepth", ")", ",", "dim", "=", "0", ")", "\n", "grndTensor", "=", "torch", ".", "cat", "(", "(", "grndTensor", ",", "depthGTTensor", ")", ",", "dim", "=", "0", ")", "\n", "imgTensor", "=", "torch", ".", "cat", "(", "(", "imgTensor", ",", "imageTensor", ".", "to", "(", "'cpu'", ")", ")", ",", "dim", "=", "0", ")", "\n", "extTensor", "=", "torch", ".", "cat", "(", "(", "extTensor", ",", "extrinsic_para", ")", ",", "dim", "=", "0", ")", "\n", "\n", "if", "isinstance", "(", "mode", ",", "int", ")", "and", "self", ".", "is_train", ":", "\n", "\t\t\t\t\t", "eval_depth_loss", "=", "self", ".", "L1Loss", "(", "predDepth", "[", "valid_mask", "]", ",", "depthGTTensor", "[", "valid_mask", "]", ")", "\n", "total_loss", "+=", "eval_depth_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "", "count", "+=", "1", "\n", "\n", "", "if", "isinstance", "(", "mode", ",", "int", ")", "and", "self", ".", "is_train", ":", "\n", "\t\t\t\t", "validation_loss", "=", "(", "total_loss", "/", "count", ")", "\n", "\n", "", "results_nyu", "=", "Result", "(", "mask_min", "=", "self", ".", "EVAL_DEPTH_MIN", ",", "mask_max", "=", "self", ".", "EVAL_DEPTH_MAX", ")", "\n", "results_nyu", ".", "evaluate", "(", "predTensor", "[", "1", ":", "]", ",", "grndTensor", "[", "1", ":", "]", ")", "\n", "individual_results", "=", "results_nyu", ".", "individual_results", "(", "predTensor", "[", "1", ":", "]", ",", "grndTensor", "[", "1", ":", "]", ")", "\n", "\n", "result1", "=", "'\\tabs_rel:{:.3f}, sq_rel:{:.3f}, rmse:{:.3f}, rmse_log:{:.3f}, mae:{:.3f} '", ".", "format", "(", "\n", "results_nyu", ".", "absrel", ",", "results_nyu", ".", "sqrel", ",", "results_nyu", ".", "rmse", ",", "results_nyu", ".", "rmselog", ",", "results_nyu", ".", "mae", ")", "\n", "result2", "=", "'\\t[<1.25]:{:.3f}, [<1.25^2]:{:.3f}, [<1.25^3]::{:.3f}'", ".", "format", "(", "results_nyu", ".", "delta1", ",", "results_nyu", ".", "delta2", ",", "results_nyu", ".", "delta3", ")", "\n", "\n", "print", "(", "result1", ")", "\n", "print", "(", "result2", ")", "\n", "\n", "if", "isinstance", "(", "mode", ",", "int", ")", "and", "self", ".", "is_train", ":", "\n", "\t\t\t\t", "self", ".", "EVAL_all_results", "[", "str", "(", "mode", ")", "]", "=", "result1", "+", "'\\t'", "+", "result2", "\n", "\n", "if", "validation_loss", ".", "item", "(", ")", "<", "self", ".", "EVAL_best_loss", ":", "\n", "\t\t\t\t\t", "self", ".", "EVAL_best_loss", "=", "validation_loss", ".", "item", "(", ")", "\n", "self", ".", "EVAL_best_model_epoch", "=", "mode", "\n", "self", ".", "save_models", "(", "self", ".", "model_name", ",", "mode", "=", "'best'", ")", "\n", "\n", "", "best_model_summary", "=", "'\\tCurrent eval loss {:.4f}, current best loss {:.4f}, current best model {}\\n'", ".", "format", "(", "validation_loss", ".", "item", "(", ")", ",", "self", ".", "EVAL_best_loss", ",", "self", ".", "EVAL_best_model_epoch", ")", "\n", "print", "(", "best_model_summary", ")", "\n", "\n", "fn", "=", "open", "(", "self", ".", "evaluate_log", ",", "'a'", ")", "\n", "fn", ".", "write", "(", "result1", "+", "'\\n'", ")", "\n", "fn", ".", "write", "(", "result2", "+", "'\\n'", ")", "\n", "fn", ".", "write", "(", "best_model_summary", "+", "'\\n'", ")", "\n", "fn", ".", "close", "(", ")", "\n", "\n", "", "return_dict", "=", "{", "}", "\n", "return_dict", "[", "'rgb'", "]", "=", "imgTensor", "[", "1", ":", "]", "\n", "return_dict", "[", "'depth_pred'", "]", "=", "predTensor", "[", "1", ":", "]", "\n", "return_dict", "[", "'depth_gt'", "]", "=", "grndTensor", "[", "1", ":", "]", "\n", "return_dict", "[", "'extrinsic'", "]", "=", "extTensor", "[", "1", ":", "]", "\n", "return_dict", "[", "'ind_results'", "]", "=", "individual_results", "\n", "\n", "return", "return_dict", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.__init__": [[27, 62], ["training.base_model.base_model.__init__", "PDA_training.PDA_training_model._initialize_training", "torchvision.models.T2Net._UNetGenerator", "float", "PDA_training.PDA_training_model._check_parallel", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "PDA_training.PDA_training_model._get_scheduler", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "PDA_training.PDA_training_model._initialize_networks", "PDA_training.PDA_training_model.depthEstModel.parameters", "PDA_training.PDA_training_model._init_apex"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._initialize_training", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._check_parallel", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._get_scheduler", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._initialize_networks", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._init_apex"], ["\t", "def", "__init__", "(", "self", ",", "args", ",", "training_dataloader", ",", "testing_dataloader", ")", ":", "\n", "\t\t", "super", "(", "PDA_training_model", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "_initialize_training", "(", ")", "\n", "\n", "self", ".", "training_dataloader", "=", "training_dataloader", "\n", "self", ".", "testing_dataloader", "=", "testing_dataloader", "\n", "self", ".", "MIN_DEPTH_CLIP", "=", "1.0", "\n", "self", ".", "MAX_DEPTH_CLIP", "=", "10.0", "\n", "\n", "self", ".", "EVAL_DEPTH_MIN", "=", "1.0", "\n", "self", ".", "EVAL_DEPTH_MAX", "=", "10.0", "\n", "\n", "self", ".", "CEILING_HEIGHT", "=", "3.0", "\n", "\n", "self", ".", "save_evaluate_steps", "=", "10", "\n", "\n", "self", ".", "depthEstModel", "=", "_UNetGenerator", "(", "input_nc", "=", "3", ",", "output_nc", "=", "1", ")", "\n", "self", ".", "model_name", "=", "[", "'depthEstModel'", "]", "\n", "\n", "if", "self", ".", "is_train", ":", "\n", "\t\t\t", "self", ".", "depth_optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "depthEstModel", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "base_lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "self", ".", "optim_name", "=", "[", "'depth_optimizer'", "]", "\n", "self", ".", "_get_scheduler", "(", ")", "\n", "self", ".", "L1Loss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "_initialize_networks", "(", "[", "'depthEstModel'", "]", ")", "\n", "\n", "# apex can only be applied to CUDA models", "\n", "if", "self", ".", "use_apex", ":", "\n", "\t\t\t\t", "self", ".", "_init_apex", "(", "Num_losses", "=", "2", ")", "\n", "\n", "", "", "self", ".", "EVAL_best_loss", "=", "float", "(", "'inf'", ")", "\n", "self", ".", "EVAL_best_model_epoch", "=", "0", "\n", "self", ".", "EVAL_all_results", "=", "{", "}", "\n", "\n", "self", ".", "_check_parallel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model._get_project_name": [[63, 65], ["None"], "methods", ["None"], ["", "def", "_get_project_name", "(", "self", ")", ":", "\n", "\t\t", "return", "'PDA_training_model'", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model._initialize_networks": [[66, 70], ["getattr().train().to", "torchvision.models.T2Net.init_weights", "getattr", "getattr().train", "getattr"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.init_weights", "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.train"], ["", "def", "_initialize_networks", "(", "self", ",", "model_name", ")", ":", "\n", "\t\t", "for", "name", "in", "model_name", ":", "\n", "\t\t\t", "getattr", "(", "self", ",", "name", ")", ".", "train", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "init_weights", "(", "getattr", "(", "self", ",", "name", ")", ",", "net_name", "=", "name", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.compute_depth_loss": [[71, 81], ["PDA_training.PDA_training_model.depthEstModel", "PDA_training.PDA_training_model.L1Loss", "PDA_training.PDA_training_model.L1Loss", "rgb.detach"], "methods", ["None"], ["", "", "def", "compute_depth_loss", "(", "self", ",", "rgb", ",", "gt_depth", ",", "mask", "=", "None", ")", ":", "\n", "\t\t", "predicted_depth", "=", "self", ".", "depthEstModel", "(", "rgb", ".", "detach", "(", ")", ")", "[", "-", "1", "]", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "\t\t\t", "loss", "=", "self", ".", "L1Loss", "(", "predicted_depth", "[", "mask", "]", ",", "gt_depth", "[", "mask", "]", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "loss", "=", "self", ".", "L1Loss", "(", "predicted_depth", ",", "gt_depth", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.train": [[82, 182], ["time.time", "float", "len", "range", "print", "open", "open.write", "open.close", "print", "print", "open", "open.write", "open.write", "open.close", "print", "print", "open", "open.write", "open.write", "open.close", "PDA_training.PDA_training_model._set_models_train", "time.time", "sample_dict[].float", "utils.pda_aug.warp_image_depth_with_pose_augmentation", "imageTensor.to.to.to", "depthGTTensor.to.to.to", "imageTensorWarped.to.to.to", "depthGTTensorWarped.to.to.to", "scheduler.step", "PDA_training.PDA_training_model.save_models", "PDA_training.PDA_training_model.evaluate", "sample_dict.keys", "sample_dict[].float", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "PDA_training.PDA_training_model.depth_optimizer.zero_grad", "PDA_training.PDA_training_model.compute_depth_loss", "PDA_training.PDA_training_model.compute_depth_loss", "PDA_training.PDA_training_model.depth_optimizer.step", "PDA_training.PDA_training_model.print_and_write_loss_summary", "print", "open", "open.write", "open.close", "str", "total_loss.backward", "len", "str", "amp.scale_loss", "total_loss_scaled.backward", "getattr"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._set_models_train", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.pda_aug.warp_image_depth_with_pose_augmentation", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model.save_models", "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.evaluate", "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.compute_depth_loss", "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.compute_depth_loss", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model.print_and_write_loss_summary"], ["", "def", "train", "(", "self", ")", ":", "\n", "\t\t", "phase", "=", "'train'", "\n", "since", "=", "time", ".", "time", "(", ")", "\n", "best_loss", "=", "float", "(", "'inf'", ")", "\n", "\n", "self", ".", "train_display_freq", "=", "len", "(", "self", ".", "training_dataloader", ")", "\n", "\n", "tensorboardX_iter_count", "=", "0", "\n", "for", "epoch", "in", "range", "(", "self", ".", "total_epoch_num", ")", ":", "\n", "\t\t\t", "print", "(", "'\\nEpoch {}/{}'", ".", "format", "(", "epoch", "+", "1", ",", "self", ".", "total_epoch_num", ")", ")", "\n", "print", "(", "'-'", "*", "10", ")", "\n", "fn", "=", "open", "(", "self", ".", "train_log", ",", "'a'", ")", "\n", "fn", ".", "write", "(", "'\\nEpoch {}/{}\\n'", ".", "format", "(", "epoch", "+", "1", ",", "self", ".", "total_epoch_num", ")", ")", "\n", "fn", ".", "write", "(", "'--'", "*", "5", "+", "'\\n'", ")", "\n", "fn", ".", "close", "(", ")", "\n", "\n", "self", ".", "_set_models_train", "(", "[", "'depthEstModel'", "]", ")", "\n", "\n", "# Iterate over data.", "\n", "iterCount", "=", "0", "\n", "\n", "for", "sample_dict", "in", "self", ".", "training_dataloader", ":", "\n", "\t\t\t\t", "imageTensor", ",", "depthGTTensor", "=", "sample_dict", "[", "'rgb'", "]", ",", "sample_dict", "[", "'depth'", "]", "\n", "extrinsic_para", "=", "sample_dict", "[", "'extrinsic'", "]", ".", "float", "(", ")", "# otherwise mismatch data type double and float", "\n", "if", "\"intrinsic\"", "in", "sample_dict", ".", "keys", "(", ")", ":", "\n", "# for ScanNet only", "\n", "\t\t\t\t\t", "intrinsic_para", "=", "sample_dict", "[", "'intrinsic'", "]", ".", "float", "(", ")", "# fx, fy, px, py", "\n", "focal_length", "=", "intrinsic_para", "[", ":", ",", ":", "2", "]", "\n", "p_pt", "=", "intrinsic_para", "[", ":", ",", "2", ":", "]", "\n", "", "else", ":", "\n", "# for interiorNet", "\n", "\t\t\t\t\t", "focal_length", "=", "300", "\n", "p_pt", "=", "(", "120", ",", "160", ")", "\n", "\n", "", "warp_return_dict", "=", "warp_image_depth_with_pose_augmentation", "(", "imageTensor", ",", "depthGTTensor", ",", "extrinsic_para", ",", "focal_length", ",", "p_pt", ",", "self", ".", "training_set_name", ",", "augmentation", "=", "sample_dict", "[", "'augmentation'", "]", ")", "\n", "imageTensorWarped", ",", "depthGTTensorWarped", "=", "warp_return_dict", "[", "'image_warped'", "]", ",", "warp_return_dict", "[", "'depth_warped'", "]", "\n", "\n", "imageTensor", "=", "imageTensor", ".", "to", "(", "self", ".", "device", ")", "\n", "depthGTTensor", "=", "depthGTTensor", ".", "to", "(", "self", ".", "device", ")", "# [B_size, 1, 240, 320]", "\n", "valid_mask", "=", "(", "depthGTTensor", ">=", "-", "1.", ")", "&", "(", "depthGTTensor", "<=", "1.", ")", "\n", "\n", "imageTensorWarped", "=", "imageTensorWarped", ".", "to", "(", "self", ".", "device", ")", "\n", "depthGTTensorWarped", "=", "depthGTTensorWarped", ".", "to", "(", "self", ".", "device", ")", "# [B_size, 1, 240, 320]", "\n", "warped_valid_mask", "=", "(", "depthGTTensorWarped", ">=", "-", "1.", ")", "&", "(", "depthGTTensorWarped", "<=", "1.", ")", "\n", "\n", "with", "torch", ".", "set_grad_enabled", "(", "phase", "==", "'train'", ")", ":", "\n", "\n", "\t\t\t\t\t", "total_loss", "=", "0.", "\n", "#############  train the depthEstimator", "\n", "self", ".", "depth_optimizer", ".", "zero_grad", "(", ")", "\n", "depth_loss", "=", "self", ".", "compute_depth_loss", "(", "imageTensor", ",", "depthGTTensor", ",", "valid_mask", ")", "\n", "total_loss", "+=", "depth_loss", "\n", "\n", "warped_depth_loss", "=", "self", ".", "compute_depth_loss", "(", "imageTensorWarped", ",", "depthGTTensorWarped", ",", "warped_valid_mask", ")", "\n", "total_loss", "+=", "warped_depth_loss", "\n", "\n", "if", "self", ".", "use_apex", ":", "\n", "\t\t\t\t\t\t", "with", "amp", ".", "scale_loss", "(", "total_loss", ",", "self", ".", "depth_optimizer", ")", "as", "total_loss_scaled", ":", "\n", "\t\t\t\t\t\t\t", "total_loss_scaled", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "\t\t\t\t\t\t", "total_loss", ".", "backward", "(", ")", "\n", "\n", "", "self", ".", "depth_optimizer", ".", "step", "(", ")", "\n", "\n", "", "iterCount", "+=", "1", "\n", "if", "iterCount", "%", "20", "==", "0", ":", "\n", "\t\t\t\t\t", "loss_name", "=", "[", "'total_loss'", ",", "'depth_loss'", ",", "'warped_depth_loss'", "]", "\n", "loss_value", "=", "[", "total_loss", ",", "depth_loss", ",", "warped_depth_loss", "]", "\n", "self", ".", "print_and_write_loss_summary", "(", "iterCount", ",", "len", "(", "self", ".", "training_dataloader", ")", ",", "loss_name", ",", "loss_value", ",", "self", ".", "train_log", ")", "\n", "\n", "# take step in optimizer", "\n", "", "", "for", "scheduler", "in", "self", ".", "scheduler_list", ":", "\n", "\t\t\t\t", "scheduler", ".", "step", "(", ")", "\n", "for", "optim", "in", "self", ".", "optim_name", ":", "\n", "\t\t\t\t\t", "lr", "=", "getattr", "(", "self", ",", "optim", ")", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "lr_update", "=", "'Epoch {}/{} finished: {} learning rate = {:7f}'", ".", "format", "(", "epoch", "+", "1", ",", "self", ".", "total_epoch_num", ",", "optim", ",", "lr", ")", "\n", "print", "(", "lr_update", ")", "\n", "\n", "fn", "=", "open", "(", "self", ".", "train_log", ",", "'a'", ")", "\n", "fn", ".", "write", "(", "lr_update", "+", "'\\n'", ")", "\n", "fn", ".", "close", "(", ")", "\n", "\n", "", "", "if", "(", "epoch", "+", "1", ")", "%", "self", ".", "save_evaluate_steps", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "save_models", "(", "self", ".", "model_name", ",", "mode", "=", "epoch", "+", "1", ")", "\n", "_", "=", "self", ".", "evaluate", "(", "epoch", "+", "1", ")", "\n", "\n", "", "", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "since", "\n", "print", "(", "'Training complete in {:.0f}m {:.0f}s'", ".", "format", "(", "time_elapsed", "//", "60", ",", "time_elapsed", "%", "60", ")", ")", "\n", "\n", "fn", "=", "open", "(", "self", ".", "train_log", ",", "'a'", ")", "\n", "fn", ".", "write", "(", "'Training complete in {:.0f}m {:.0f}s\\n'", ".", "format", "(", "time_elapsed", "//", "60", ",", "time_elapsed", "%", "60", ")", ")", "\n", "fn", ".", "close", "(", ")", "\n", "\n", "best_model_summary", "=", "'Overall best model is epoch {}'", ".", "format", "(", "self", ".", "EVAL_best_model_epoch", ")", "\n", "print", "(", "best_model_summary", ")", "\n", "print", "(", "self", ".", "EVAL_all_results", "[", "str", "(", "self", ".", "EVAL_best_model_epoch", ")", "]", ")", "\n", "fn", "=", "open", "(", "self", ".", "evaluate_log", ",", "'a'", ")", "\n", "fn", ".", "write", "(", "best_model_summary", "+", "'\\n'", ")", "\n", "fn", ".", "write", "(", "self", ".", "EVAL_all_results", "[", "str", "(", "self", ".", "EVAL_best_model_epoch", ")", "]", "+", "'\\n'", ")", "\n", "fn", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.evaluate": [[183, 302], ["print", "print", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "isinstance", "PDA_training.PDA_training_model._set_models_eval", "open.write", "open.write", "open.close", "PDA_training.PDA_training_model._load_models", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Result", "Result.evaluate", "Result.individual_results", "print", "print", "float", "open", "open", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "sample_dict[].float", "np.logical_and", "print", "imageTensor.to.to.to", "depthGTTensor.detach().to.detach().to.to", "depthGTTensor.detach().to.detach().to.detach().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "isinstance", "isinstance", "print", "open", "open.write", "open.write", "open.write", "open.close", "sample_dict.keys", "sample_dict[].float", "[].detach().to", "isinstance", "PDA_training.PDA_training_model.L1Loss", "PDA_training.PDA_training_model.detach().cpu", "validation_loss.item", "validation_loss.item", "PDA_training.PDA_training_model.save_models", "validation_loss.item", "str", "amp.disable_casts", "[].detach().to", "depthGTTensor.detach().to.detach().to.detach", "imageTensor.to.to.to", "str", "[].detach", "PDA_training.PDA_training_model.detach", "[].detach", "PDA_training.PDA_training_model.depthEstModel", "PDA_training.PDA_training_model.depthEstModel"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._set_models_eval", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._load_models", "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.evaluate", "home.repos.pwc.inspect_result.yzhao520_CPP.utils.metrics.Result.individual_results", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model.save_models"], ["", "def", "evaluate", "(", "self", ",", "mode", ")", ":", "\n", "\t\t", "'''\n\t\t\tmode choose from <int> or best\n\t\t\t<int> is the number of epoch, represents the number of epoch, used for in training evaluation\n\t\t\t'best' is used for after training mode\n\t\t'''", "\n", "\n", "set_name", "=", "'test'", "\n", "eval_model_list", "=", "[", "'depthEstModel'", "]", "\n", "\n", "if", "isinstance", "(", "mode", ",", "int", ")", "and", "self", ".", "is_train", ":", "\n", "\t\t\t", "self", ".", "_set_models_eval", "(", "eval_model_list", ")", "\n", "if", "self", ".", "EVAL_best_loss", "==", "float", "(", "'inf'", ")", ":", "\n", "\t\t\t\t", "fn", "=", "open", "(", "self", ".", "evaluate_log", ",", "'w'", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "fn", "=", "open", "(", "self", ".", "evaluate_log", ",", "'a'", ")", "\n", "\n", "", "fn", ".", "write", "(", "'Evaluating with mode: {} | dataset: {} \\n'", ".", "format", "(", "mode", ",", "self", ".", "testing_set_name", ")", ")", "\n", "fn", ".", "write", "(", "'\\tEvaluation range min: {} | max: {} \\n'", ".", "format", "(", "self", ".", "EVAL_DEPTH_MIN", ",", "self", ".", "EVAL_DEPTH_MAX", ")", ")", "\n", "fn", ".", "close", "(", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "_load_models", "(", "eval_model_list", ",", "mode", ")", "\n", "\n", "", "print", "(", "'Evaluating with mode: {} | dataset: {}'", ".", "format", "(", "mode", ",", "self", ".", "testing_set_name", ")", ")", "\n", "print", "(", "'\\tEvaluation range min: {} | max: {}'", ".", "format", "(", "self", ".", "EVAL_DEPTH_MIN", ",", "self", ".", "EVAL_DEPTH_MAX", ")", ")", "\n", "\n", "total_loss", "=", "0.", "\n", "count", "=", "0", "\n", "\n", "predTensor", "=", "torch", ".", "zeros", "(", "(", "1", ",", "1", ",", "self", ".", "H", ",", "self", ".", "W", ")", ")", ".", "to", "(", "'cpu'", ")", "\n", "grndTensor", "=", "torch", ".", "zeros", "(", "(", "1", ",", "1", ",", "self", ".", "H", ",", "self", ".", "W", ")", ")", ".", "to", "(", "'cpu'", ")", "\n", "imgTensor", "=", "torch", ".", "zeros", "(", "(", "1", ",", "3", ",", "self", ".", "H", ",", "self", ".", "W", ")", ")", ".", "to", "(", "'cpu'", ")", "\n", "extTensor", "=", "torch", ".", "zeros", "(", "(", "1", ",", "6", ")", ")", ".", "to", "(", "'cpu'", ")", "\n", "idx", "=", "0", "\n", "\n", "# tensorboardX_iter_count = 0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "for", "sample_dict", "in", "self", ".", "testing_dataloader", ":", "\n", "\t\t\t\t", "imageTensor", ",", "depthGTTensor", "=", "sample_dict", "[", "'rgb'", "]", ",", "sample_dict", "[", "'depth'", "]", "\n", "extrinsic_para", "=", "sample_dict", "[", "'extrinsic'", "]", ".", "float", "(", ")", "# otherwise mismatch data type double and float", "\n", "\n", "if", "\"intrinsic\"", "in", "sample_dict", ".", "keys", "(", ")", ":", "\n", "# for ScanNet only", "\n", "\t\t\t\t\t", "intrinsic_para", "=", "sample_dict", "[", "'intrinsic'", "]", ".", "float", "(", ")", "# fx, fy, px, py", "\n", "focal_length", "=", "intrinsic_para", "[", ":", ",", ":", "2", "]", "\n", "p_pt", "=", "intrinsic_para", "[", ":", ",", "2", ":", "]", "\n", "", "else", ":", "\n", "# for interiorNet", "\n", "\t\t\t\t\t", "focal_length", "=", "300", "\n", "p_pt", "=", "(", "120", ",", "160", ")", "\n", "\n", "", "valid_mask", "=", "np", ".", "logical_and", "(", "depthGTTensor", ">=", "self", ".", "EVAL_DEPTH_MIN", ",", "depthGTTensor", "<=", "self", ".", "EVAL_DEPTH_MAX", ")", "\n", "\n", "idx", "+=", "imageTensor", ".", "shape", "[", "0", "]", "\n", "print", "(", "'epoch {}: have processed {} number samples in {} set'", ".", "format", "(", "mode", ",", "str", "(", "idx", ")", ",", "set_name", ")", ")", "\n", "imageTensor", "=", "imageTensor", ".", "to", "(", "self", ".", "device", ")", "\n", "depthGTTensor", "=", "depthGTTensor", ".", "to", "(", "self", ".", "device", ")", "# real depth", "\n", "\n", "if", "self", ".", "is_train", "and", "self", ".", "use_apex", ":", "\n", "\t\t\t\t\t", "with", "amp", ".", "disable_casts", "(", ")", ":", "\n", "\t\t\t\t\t\t", "predDepth", "=", "self", ".", "depthEstModel", "(", "imageTensor", ")", "[", "-", "1", "]", ".", "detach", "(", ")", ".", "to", "(", "'cpu'", ")", "\n", "", "", "else", ":", "\n", "\t\t\t\t\t", "predDepth", "=", "self", ".", "depthEstModel", "(", "imageTensor", ")", "[", "-", "1", "]", ".", "detach", "(", ")", ".", "to", "(", "'cpu'", ")", "\n", "\n", "# recover real depth", "\n", "", "predDepth", "=", "(", "(", "predDepth", "+", "1.0", ")", "*", "0.5", "*", "(", "self", ".", "MAX_DEPTH_CLIP", "-", "self", ".", "MIN_DEPTH_CLIP", ")", ")", "+", "self", ".", "MIN_DEPTH_CLIP", "\n", "\n", "depthGTTensor", "=", "depthGTTensor", ".", "detach", "(", ")", ".", "to", "(", "'cpu'", ")", "\n", "predTensor", "=", "torch", ".", "cat", "(", "(", "predTensor", ",", "predDepth", ")", ",", "dim", "=", "0", ")", "\n", "grndTensor", "=", "torch", ".", "cat", "(", "(", "grndTensor", ",", "depthGTTensor", ")", ",", "dim", "=", "0", ")", "\n", "imgTensor", "=", "torch", ".", "cat", "(", "(", "imgTensor", ",", "imageTensor", ".", "to", "(", "'cpu'", ")", ")", ",", "dim", "=", "0", ")", "\n", "extTensor", "=", "torch", ".", "cat", "(", "(", "extTensor", ",", "extrinsic_para", ")", ",", "dim", "=", "0", ")", "\n", "\n", "if", "isinstance", "(", "mode", ",", "int", ")", "and", "self", ".", "is_train", ":", "\n", "\t\t\t\t\t", "eval_depth_loss", "=", "self", ".", "L1Loss", "(", "predDepth", "[", "valid_mask", "]", ",", "depthGTTensor", "[", "valid_mask", "]", ")", "\n", "total_loss", "+=", "eval_depth_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "", "count", "+=", "1", "\n", "\n", "", "if", "isinstance", "(", "mode", ",", "int", ")", "and", "self", ".", "is_train", ":", "\n", "\t\t\t\t", "validation_loss", "=", "(", "total_loss", "/", "count", ")", "\n", "\n", "", "results_nyu", "=", "Result", "(", "mask_min", "=", "self", ".", "EVAL_DEPTH_MIN", ",", "mask_max", "=", "self", ".", "EVAL_DEPTH_MAX", ")", "\n", "results_nyu", ".", "evaluate", "(", "predTensor", "[", "1", ":", "]", ",", "grndTensor", "[", "1", ":", "]", ")", "\n", "individual_results", "=", "results_nyu", ".", "individual_results", "(", "predTensor", "[", "1", ":", "]", ",", "grndTensor", "[", "1", ":", "]", ")", "\n", "\n", "result1", "=", "'\\tabs_rel:{:.3f}, sq_rel:{:.3f}, rmse:{:.3f}, rmse_log:{:.3f}, mae:{:.3f} '", ".", "format", "(", "\n", "results_nyu", ".", "absrel", ",", "results_nyu", ".", "sqrel", ",", "results_nyu", ".", "rmse", ",", "results_nyu", ".", "rmselog", ",", "results_nyu", ".", "mae", ")", "\n", "result2", "=", "'\\t[<1.25]:{:.3f}, [<1.25^2]:{:.3f}, [<1.25^3]::{:.3f}'", ".", "format", "(", "results_nyu", ".", "delta1", ",", "results_nyu", ".", "delta2", ",", "results_nyu", ".", "delta3", ")", "\n", "\n", "print", "(", "result1", ")", "\n", "print", "(", "result2", ")", "\n", "\n", "if", "isinstance", "(", "mode", ",", "int", ")", "and", "self", ".", "is_train", ":", "\n", "\t\t\t\t", "self", ".", "EVAL_all_results", "[", "str", "(", "mode", ")", "]", "=", "result1", "+", "'\\t'", "+", "result2", "\n", "\n", "if", "validation_loss", ".", "item", "(", ")", "<", "self", ".", "EVAL_best_loss", ":", "\n", "\t\t\t\t\t", "self", ".", "EVAL_best_loss", "=", "validation_loss", ".", "item", "(", ")", "\n", "self", ".", "EVAL_best_model_epoch", "=", "mode", "\n", "self", ".", "save_models", "(", "self", ".", "model_name", ",", "mode", "=", "'best'", ")", "\n", "\n", "", "best_model_summary", "=", "'\\tCurrent eval loss {:.4f}, current best loss {:.4f}, current best model {}\\n'", ".", "format", "(", "validation_loss", ".", "item", "(", ")", ",", "self", ".", "EVAL_best_loss", ",", "self", ".", "EVAL_best_model_epoch", ")", "\n", "print", "(", "best_model_summary", ")", "\n", "\n", "fn", "=", "open", "(", "self", ".", "evaluate_log", ",", "'a'", ")", "\n", "fn", ".", "write", "(", "result1", "+", "'\\n'", ")", "\n", "fn", ".", "write", "(", "result2", "+", "'\\n'", ")", "\n", "fn", ".", "write", "(", "best_model_summary", "+", "'\\n'", ")", "\n", "fn", ".", "close", "(", ")", "\n", "\n", "", "return_dict", "=", "{", "}", "\n", "return_dict", "[", "'rgb'", "]", "=", "imgTensor", "[", "1", ":", "]", "\n", "return_dict", "[", "'depth_pred'", "]", "=", "predTensor", "[", "1", ":", "]", "\n", "return_dict", "[", "'depth_gt'", "]", "=", "grndTensor", "[", "1", ":", "]", "\n", "return_dict", "[", "'extrinsic'", "]", "=", "extTensor", "[", "1", ":", "]", "\n", "return_dict", "[", "'ind_results'", "]", "=", "individual_results", "\n", "\n", "return", "return_dict", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model.__init__": [[57, 74], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__"], ["\t", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\t\t", "super", "(", "base_model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "args", ".", "device", "\n", "self", ".", "is_train", "=", "args", ".", "is_train", "\n", "self", ".", "training_set_name", "=", "args", ".", "training_set_name", "\n", "self", ".", "testing_set_name", "=", "args", ".", "testing_set_name", "\n", "self", ".", "project_name", "=", "args", ".", "project_name", "\n", "self", ".", "exp_dir", "=", "args", ".", "exp_dir", "\n", "\n", "self", ".", "use_tensorboardX", "=", "False", "\n", "self", ".", "use_apex", "=", "True", "\n", "\n", "self", ".", "sampleSize", "=", "args", ".", "sampleSize", "# patch size for training the model. Default: [240, 320]", "\n", "self", ".", "H", ",", "self", ".", "W", "=", "self", ".", "sampleSize", "[", "0", "]", ",", "self", ".", "sampleSize", "[", "1", "]", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "total_epoch_num", "=", "args", ".", "total_epoch_num", "# total number of epoch in training", "\n", "self", ".", "base_lr", "=", "args", ".", "base_lr", "# base learning rate", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._initialize_training": [[77, 115], ["print", "print", "print", "os.path.join", "base_model.base_model._get_project_name", "os.path.join", "os.path.exists", "os.makedirs", "datetime.datetime.today", "os.path.join", "open", "open.write", "open.write", "open.write", "open.close", "os.path.join", "os.path.join", "os.path.join", "SummaryWriter", "os.path.join", "SummaryWriter", "datetime.datetime.today.strftime", "datetime.datetime.today.strftime"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model._get_project_name"], ["", "def", "_initialize_training", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "project_name", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "self", ".", "project_name", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "project_name", "=", "self", ".", "_get_project_name", "(", ")", "\n", "self", ".", "project_name", "=", "self", ".", "project_name", "+", "'_'", "+", "self", ".", "training_set_name", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "self", ".", "project_name", ")", "\n", "\n", "", "project_name_info", "=", "'project name: {}'", ".", "format", "(", "self", ".", "project_name", ")", "\n", "save_dir_info", "=", "'save dir: {}'", ".", "format", "(", "self", ".", "save_dir", ")", "\n", "dataset_info", "=", "'training:  {}\\ntesting: {}'", ".", "format", "(", "self", ".", "training_set_name", ",", "self", ".", "testing_set_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "save_dir", ")", ":", "os", ".", "makedirs", "(", "self", ".", "save_dir", ")", "\n", "\n", "if", "self", ".", "is_train", ":", "\n", "\t\t\t", "today", "=", "datetime", ".", "datetime", ".", "today", "(", ")", "\n", "self", ".", "train_log", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'train_{}.log'", ".", "format", "(", "today", ".", "strftime", "(", "'%m-%d-%Y'", ")", ")", ")", "\n", "\n", "fn", "=", "open", "(", "self", ".", "train_log", ",", "'w'", ")", "\n", "fn", ".", "write", "(", "project_name_info", "+", "'\\n'", ")", "\n", "fn", ".", "write", "(", "save_dir_info", "+", "'\\n'", ")", "\n", "fn", ".", "write", "(", "dataset_info", "+", "'\\n'", ")", "\n", "fn", ".", "close", "(", ")", "\n", "\n", "self", ".", "evaluate_log", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'evaluate_{}.log'", ".", "format", "(", "today", ".", "strftime", "(", "'%m-%d-%Y'", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "evaluate_log", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'evaluate_sep.log'", ")", "\n", "\n", "", "print", "(", "project_name_info", ")", "\n", "print", "(", "save_dir_info", ")", "\n", "print", "(", "dataset_info", ")", "\n", "\n", "if", "self", ".", "use_tensorboardX", ":", "\n", "\t\t\t", "self", ".", "tensorboard_train_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'tensorboardX_train_logs'", ")", "\n", "self", ".", "train_SummaryWriter", "=", "SummaryWriter", "(", "self", ".", "tensorboard_train_dir", ")", "\n", "self", ".", "tensorboard_eval_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'tensorboardX_eval_logs'", ")", "\n", "self", ".", "eval_SummaryWriter", "=", "SummaryWriter", "(", "self", ".", "tensorboard_eval_dir", ")", "\n", "self", ".", "tensorboard_num_display_per_epoch", "=", "5", "\n", "self", ".", "val_display_freq", "=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._initialize_networks": [[116, 121], ["base_model.base_model.model_dict.items", "model.train().to", "init_weights", "model.train"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.init_weights", "home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.train"], ["", "", "def", "_initialize_networks", "(", "self", ")", ":", "\n", "\t\t", "for", "name", ",", "model", "in", "self", ".", "model_dict", ".", "items", "(", ")", ":", "\n", "\t\t\t", "model", ".", "train", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# init_weights(model, net_name=name, init_type='normal', init_gain=0.02)", "\n", "init_weights", "(", "model", ",", "net_name", "=", "name", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._get_scheduler": [[122, 139], ["isinstance", "isinstance", "base_model.base_model.scheduler_list.append", "zip", "RuntimeError", "base_model.apply_scheduler", "base_model.base_model.scheduler_list.append", "getattr", "base_model.apply_scheduler", "getattr"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.apply_scheduler", "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.apply_scheduler"], ["", "", "def", "_get_scheduler", "(", "self", ",", "optim_type", "=", "'linear'", ")", ":", "\n", "\t\t", "'''\n\t\t\tif type is None -> all optim use default scheduler\n\t\t\tif types is str -> all optim use this types of scheduler\n\t\t\tif type is list -> each optim use their own scheduler\n\t\t'''", "\n", "self", ".", "scheduler_list", "=", "[", "]", "\n", "if", "isinstance", "(", "optim_type", ",", "str", ")", ":", "\n", "\t\t\t", "for", "name", "in", "self", ".", "optim_name", ":", "\n", "\t\t\t\t", "self", ".", "scheduler_list", ".", "append", "(", "apply_scheduler", "(", "getattr", "(", "self", ",", "name", ")", ",", "lr_policy", "=", "optim_type", ",", "num_epoch", "=", "0.6", "*", "self", ".", "total_epoch_num", ",", "\n", "total_num_epoch", "=", "self", ".", "total_epoch_num", ")", ")", "\n", "", "", "elif", "isinstance", "(", "optim_type", ",", "list", ")", ":", "\n", "\t\t\t", "for", "name", ",", "optim", "in", "zip", "(", "self", ".", "optim_name", ",", "optim_type", ")", ":", "\n", "\t\t\t\t", "self", ".", "scheduler_list", ".", "append", "(", "apply_scheduler", "(", "getattr", "(", "self", ",", "name", ")", ",", "lr_policy", "=", "optim", ",", "num_epoch", "=", "0.6", "*", "self", ".", "total_epoch_num", ",", "\n", "total_num_epoch", "=", "self", ".", "total_epoch_num", ")", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "raise", "RuntimeError", "(", "\"optim type should be either string or list!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._init_apex": [[140, 151], ["amp.initialize", "model_list.append", "optim_list.append", "getattr", "getattr"], "methods", ["None"], ["", "", "def", "_init_apex", "(", "self", ",", "Num_losses", ")", ":", "\n", "# self.model_list, self.optim_list = amp.initialize(self.model_list, self.optim_list, opt_level=\"O1\", num_losses=Num_losses)", "\n", "\t\t", "model_list", "=", "[", "]", "\n", "optim_list", "=", "[", "]", "\n", "for", "m", "in", "self", ".", "model_name", ":", "\n", "\t\t\t", "model_list", ".", "append", "(", "getattr", "(", "self", ",", "m", ")", ")", "\n", "", "for", "o", "in", "self", ".", "optim_name", ":", "\n", "\t\t\t", "optim_list", ".", "append", "(", "getattr", "(", "self", ",", "o", ")", ")", "\n", "\n", "# model_list, optim_list = amp.initialize(model_list, optim_list, opt_level=\"O1\", keep_batchnorm_fp32=True, num_losses=Num_losses)", "\n", "", "model_list", ",", "optim_list", "=", "amp", ".", "initialize", "(", "model_list", ",", "optim_list", ",", "opt_level", "=", "\"O1\"", ",", "num_losses", "=", "Num_losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._check_parallel": [[152, 156], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "setattr", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "getattr"], "methods", ["None"], ["", "def", "_check_parallel", "(", "self", ")", ":", "\n", "\t\t", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "\t\t\t", "for", "name", "in", "self", ".", "model_name", ":", "\n", "\t\t\t\t", "setattr", "(", "self", ",", "name", ",", "nn", ".", "DataParallel", "(", "getattr", "(", "self", ",", "name", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._check_distribute": [[157, 167], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "setattr", "apex.parallel.DistributedDataParallel", "setattr", "getattr", "torch.DistributedDataParallel", "torch.DistributedDataParallel", "torch.DistributedDataParallel", "torch.DistributedDataParallel", "torch.DistributedDataParallel", "getattr"], "methods", ["None"], ["", "", "", "def", "_check_distribute", "(", "self", ")", ":", "\n", "\t\t", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "# world size is number of process participat in the job", "\n", "# torch.distributed.init_process_group(backend='nccl', world_size=4, init_method='...')", "\n", "# mp.spawn(main_worker, nprocs=ngpus_per_node, args=(ngpus_per_node, args))", "\n", "\t\t\t", "if", "use_apex", ":", "\n", "\t\t\t\t", "setattr", "(", "self", ",", "name", ",", "apex", ".", "parallel", ".", "DistributedDataParallel", "(", "getattr", "(", "self", ",", "name", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "for", "name", "in", "self", ".", "model_name", ":", "\n", "\t\t\t\t\t", "setattr", "(", "self", ",", "name", ",", "nn", ".", "DistributedDataParallel", "(", "getattr", "(", "self", ",", "name", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._set_models_train": [[168, 171], ["getattr().train", "getattr"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.train"], ["", "", "", "", "def", "_set_models_train", "(", "self", ",", "model_name", ")", ":", "\n", "\t\t", "for", "name", "in", "model_name", ":", "\n", "\t\t\t", "getattr", "(", "self", ",", "name", ")", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._set_models_eval": [[172, 175], ["getattr().eval", "getattr"], "methods", ["None"], ["", "", "def", "_set_models_eval", "(", "self", ",", "model_name", ")", ":", "\n", "\t\t", "for", "name", "in", "model_name", ":", "\n", "\t\t\t", "getattr", "(", "self", ",", "name", ")", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._set_models_float": [[176, 180], ["getattr().modules", "layers.float", "getattr"], "methods", ["None"], ["", "", "def", "_set_models_float", "(", "self", ",", "model_name", ")", ":", "\n", "\t\t", "for", "name", "in", "model_name", ":", "\n", "\t\t\t", "for", "layers", "in", "getattr", "(", "self", ",", "name", ")", ".", "modules", "(", ")", ":", "\n", "\t\t\t\t", "layers", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model.save_models": [[181, 201], ["copy.deepcopy", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "getattr().module.state_dict", "os.path.join", "isinstance", "getattr().state_dict", "os.path.join", "getattr", "getattr", "str"], "methods", ["None"], ["", "", "", "def", "save_models", "(", "self", ",", "model_list", ",", "mode", ")", ":", "\n", "\t\t", "'''\n\t\t\tmode include best, latest, or a number (epoch)\n\t\t\tsave as non-dataparallel state_dict\n\t\t'''", "\n", "for", "model_name", "in", "model_list", ":", "\n", "\t\t\t", "if", "mode", "==", "'latest'", ":", "\n", "\t\t\t\t", "path_to_save_paramOnly", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'latest_{}.pth'", ".", "format", "(", "model_name", ")", ")", "\n", "", "elif", "mode", "==", "'best'", ":", "\n", "\t\t\t\t", "path_to_save_paramOnly", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'best_{}.pth'", ".", "format", "(", "model_name", ")", ")", "\n", "", "elif", "isinstance", "(", "mode", ",", "int", ")", ":", "\n", "\t\t\t\t", "path_to_save_paramOnly", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'epoch-{}_{}.pth'", ".", "format", "(", "str", "(", "mode", ")", ",", "model_name", ")", ")", "\n", "\n", "", "try", ":", "\n", "\t\t\t\t", "state_dict", "=", "getattr", "(", "self", ",", "model_name", ")", ".", "module", ".", "state_dict", "(", ")", "\n", "", "except", "AttributeError", ":", "\n", "\t\t\t\t", "state_dict", "=", "getattr", "(", "self", ",", "model_name", ")", ".", "state_dict", "(", ")", "\n", "\n", "", "model_weights", "=", "copy", ".", "deepcopy", "(", "state_dict", ")", "\n", "torch", ".", "save", "(", "model_weights", ",", "path_to_save_paramOnly", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._load_models": [[202, 236], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "os.path.join", "getattr().load_state_dict", "getattr().to().train", "getattr().to().eval", "os.path.join", "isinstance", "print", "collections.OrderedDict", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "getattr().load_state_dict", "os.path.join", "RuntimeError", "getattr", "getattr().to", "getattr().to", "getattr", "str", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.train"], ["", "", "def", "_load_models", "(", "self", ",", "model_list", ",", "mode", ",", "isTrain", "=", "False", ",", "model_path", "=", "None", ")", ":", "\n", "\t\t", "if", "model_path", "is", "None", ":", "\n", "\t\t\t", "model_path", "=", "self", ".", "save_dir", "\n", "\n", "", "for", "model_name", "in", "model_list", ":", "\n", "\t\t\t", "if", "mode", "==", "'latest'", ":", "\n", "\t\t\t\t", "path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "'latest_{}.pth'", ".", "format", "(", "model_name", ")", ")", "\n", "", "elif", "mode", "==", "'best'", ":", "\n", "\t\t\t\t", "path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "'best_{}.pth'", ".", "format", "(", "model_name", ")", ")", "\n", "", "elif", "isinstance", "(", "mode", ",", "int", ")", ":", "\n", "\t\t\t\t", "path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "'epoch-{}_{}.pth'", ".", "format", "(", "str", "(", "mode", ")", ",", "model_name", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "RuntimeError", "(", "\"Mode not implemented\"", ")", "\n", "\n", "", "state_dict", "=", "torch", ".", "load", "(", "path", ")", "\n", "\n", "try", ":", "\n", "\t\t\t\t", "getattr", "(", "self", ",", "model_name", ")", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "\t\t\t\t", "print", "(", "e", ".", "message", ")", "\n", "# in the case of parallel model loading non-parallel state_dict || add module to all keys", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "# print(k)", "\n", "# print('module.' + k)", "\n", "\t\t\t\t\t", "name", "=", "'module.'", "+", "k", "# add `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "\n", "", "getattr", "(", "self", ",", "model_name", ")", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "\n", "", "if", "isTrain", ":", "\n", "\t\t\t\t", "getattr", "(", "self", ",", "model_name", ")", ".", "to", "(", "self", ".", "device", ")", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "getattr", "(", "self", ",", "model_name", ")", ".", "to", "(", "self", ".", "device", ")", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model._load_models_with_different_name": [[237, 270], ["zip", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "os.path.join", "getattr().load_state_dict", "getattr().to().train", "getattr().to().eval", "os.path.join", "isinstance", "collections.OrderedDict", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "getattr().load_state_dict", "os.path.join", "RuntimeError", "getattr", "getattr().to", "getattr().to", "getattr", "str", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.training.PDA_training.PDA_training_model.train"], ["", "", "", "def", "_load_models_with_different_name", "(", "self", ",", "model_list", ",", "name_list", ",", "mode", ",", "isTrain", "=", "False", ",", "model_path", "=", "None", ")", ":", "\n", "\t\t", "if", "model_path", "is", "None", ":", "\n", "\t\t\t", "model_path", "=", "self", ".", "save_dir", "\n", "\n", "", "for", "model_name", ",", "name_here", "in", "zip", "(", "model_list", ",", "name_list", ")", ":", "\n", "\t\t\t", "if", "mode", "==", "'latest'", ":", "\n", "\t\t\t\t", "path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "'latest_{}.pth'", ".", "format", "(", "model_name", ")", ")", "\n", "", "elif", "mode", "==", "'best'", ":", "\n", "\t\t\t\t", "path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "'best_{}.pth'", ".", "format", "(", "model_name", ")", ")", "\n", "", "elif", "isinstance", "(", "mode", ",", "int", ")", ":", "\n", "\t\t\t\t", "path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "'epoch-{}_{}.pth'", ".", "format", "(", "str", "(", "mode", ")", ",", "model_name", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "RuntimeError", "(", "\"Mode not implemented\"", ")", "\n", "\n", "", "state_dict", "=", "torch", ".", "load", "(", "path", ")", "\n", "\n", "try", ":", "\n", "\t\t\t\t", "getattr", "(", "self", ",", "name_here", ")", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "except", "RuntimeError", ":", "\n", "# in the case of parallel model loading non-parallel state_dict || add module to all keys", "\n", "\t\t\t\t", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "# print(k)", "\n", "# print('module.' + k)", "\n", "\t\t\t\t\t", "name", "=", "'module.'", "+", "k", "# add `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "\n", "", "getattr", "(", "self", ",", "name_here", ")", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "\n", "", "if", "isTrain", ":", "\n", "\t\t\t\t", "getattr", "(", "self", ",", "name_here", ")", ".", "to", "(", "self", ".", "device", ")", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "getattr", "(", "self", ",", "name_here", ")", ".", "to", "(", "self", ".", "device", ")", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model.print_and_write_loss_summary": [[271, 285], ["zip", "open", "print", "open.write", "open.close", "len", "len", "min", "len", "len"], "methods", ["None"], ["", "", "", "def", "print_and_write_loss_summary", "(", "self", ",", "iterCount", ",", "totalCount", ",", "name_list", ",", "value_list", ",", "log_file", ")", ":", "\n", "\t\t", "if", "len", "(", "name_list", ")", "!=", "len", "(", "value_list", ")", ":", "\n", "\t\t\t", "min_len", "=", "min", "(", "len", "(", "name_list", ")", ",", "len", "(", "value_list", ")", ")", "\n", "name_list", "=", "name_list", "[", ":", "min_len", "]", "\n", "value_list", "=", "value_list", "[", ":", "min_len", "]", "\n", "\n", "", "loss_summary", "=", "'\\t{}/{}'", ".", "format", "(", "iterCount", ",", "totalCount", ")", "\n", "for", "loss_name", ",", "loss_value", "in", "zip", "(", "name_list", ",", "value_list", ")", ":", "\n", "\t\t\t", "loss_summary", "+=", "' {}: {:.4f}'", ".", "format", "(", "loss_name", ",", "loss_value", ")", "\n", "\n", "", "fn", "=", "open", "(", "log_file", ",", "'a'", ")", "\n", "print", "(", "loss_summary", ")", "\n", "fn", ".", "write", "(", "loss_summary", "+", "'\\n'", ")", "\n", "fn", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.base_model.write_2_tensorboardX": [[303, 319], ["torchvision.utils.make_grid", "writer.add_image", "RuntimeError", "RuntimeError", "isinstance", "isinstance", "zip", "writer.add_scalar", "len", "len", "writer.add_scalar"], "methods", ["None"], ["", "def", "write_2_tensorboardX", "(", "self", ",", "writer", ",", "input_tensor", ",", "name", ",", "mode", ",", "count", ",", "nrow", "=", "None", ",", "normalize", "=", "True", ",", "value_range", "=", "(", "-", "1.0", ",", "1.0", ")", ")", ":", "\n", "# assume dict:{'name': data}", "\n", "\t\t", "if", "mode", "==", "'image'", ":", "\n", "\t\t\t", "if", "not", "nrow", ":", "\n", "\t\t\t\t", "raise", "RuntimeError", "(", "'tensorboardX: must specify number of rows in image mode'", ")", "\n", "", "grid", "=", "make_grid", "(", "input_tensor", ",", "nrow", "=", "nrow", ",", "normalize", "=", "normalize", ",", "range", "=", "value_range", ")", "\n", "writer", ".", "add_image", "(", "name", ",", "grid", ",", "count", ")", "\n", "", "elif", "mode", "==", "'scalar'", ":", "\n", "\t\t\t", "if", "isinstance", "(", "input_tensor", ",", "list", ")", "and", "isinstance", "(", "name", ",", "list", ")", ":", "\n", "\t\t\t\t", "assert", "len", "(", "input_tensor", ")", "==", "len", "(", "name", ")", "\n", "for", "n", ",", "t", "in", "zip", "(", "name", ",", "input_tensor", ")", ":", "\n", "\t\t\t\t\t", "writer", ".", "add_scalar", "(", "n", ",", "t", ",", "count", ")", "\n", "", "", "else", ":", "\n", "\t\t\t\t", "writer", ".", "add_scalar", "(", "name", ",", "input_tensor", ",", "count", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "raise", "RuntimeError", "(", "'tensorboardX: this mode is not yet implemented'", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.set_requires_grad": [[26, 38], ["isinstance", "net.parameters"], "function", ["None"], ["def", "set_requires_grad", "(", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n", "\t", "\"\"\"Set requies_grad=Fasle for all the networks to avoid unnecessary computations\n\tParameters:\n\t\tnets (network list)   -- a list of networks\n\t\trequires_grad (bool)  -- whether the networks require gradients or not\n\t\"\"\"", "\n", "if", "not", "isinstance", "(", "nets", ",", "list", ")", ":", "\n", "\t\t", "nets", "=", "[", "nets", "]", "\n", "", "for", "net", "in", "nets", ":", "\n", "\t\t", "if", "net", "is", "not", "None", ":", "\n", "\t\t\t", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "\t\t\t\t", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.training.base_model.apply_scheduler": [[39, 55], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.ReduceLROnPlateau", "NotImplementedError", "max", "float"], "function", ["None"], ["", "", "", "", "def", "apply_scheduler", "(", "optimizer", ",", "lr_policy", ",", "num_epoch", "=", "None", ",", "total_num_epoch", "=", "None", ")", ":", "\n", "\t", "if", "lr_policy", "==", "'linear'", ":", "\n", "# num_epoch with initial lr", "\n", "# rest of epoch linearly decrease to 0 (the last epoch is not 0)", "\n", "\t\t", "def", "lambda_rule", "(", "epoch", ")", ":", "\n", "# lr_l = 1.0 - max(0, epoch + 1 + epoch_count - niter) / float(niter_decay + 1)", "\n", "\t\t\t", "lr_l", "=", "1.0", "-", "max", "(", "0", ",", "epoch", "+", "1", "-", "num_epoch", ")", "/", "float", "(", "total_num_epoch", "-", "num_epoch", "+", "1", ")", "\n", "return", "lr_l", "\n", "", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_rule", ")", "\n", "", "elif", "lr_policy", "==", "'step'", ":", "\n", "\t\t", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "10", ",", "gamma", "=", "0.5", ")", "\n", "", "elif", "lr_policy", "==", "'plateau'", ":", "\n", "\t\t", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.2", ",", "threshold", "=", "0.01", ",", "patience", "=", "5", ")", "\n", "", "else", ":", "\n", "\t\t", "return", "NotImplementedError", "(", "'learning rate policy [%s] is not implemented'", ",", "lr_policy", ")", "\n", "", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.GaussianNoiseLayer.__init__": [[150, 152], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GaussianNoiseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.GaussianNoiseLayer.forward": [[153, 158], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "x.data.get_device", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "training", "==", "False", ":", "\n", "            ", "return", "x", "\n", "", "noise", "=", "Variable", "(", "(", "torch", ".", "randn", "(", "x", ".", "size", "(", ")", ")", ".", "cuda", "(", "x", ".", "data", ".", "get_device", "(", ")", ")", "-", "0.5", ")", "/", "10.0", ")", "\n", "return", "x", "+", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._InceptionBlock.__init__": [[161, 180], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "range", "norm_layer", "norm_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "setattr", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "str"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "width", "=", "1", ",", "drop_rate", "=", "0", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_InceptionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n", "for", "i", "in", "range", "(", "width", ")", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "i", "*", "2", "+", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "i", "*", "2", "+", "1", ",", "bias", "=", "use_bias", ")", "\n", ")", "\n", "setattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ",", "layer", ")", "\n", "\n", "", "self", ".", "norm1", "=", "norm_layer", "(", "output_nc", "*", "width", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "output_nc", ")", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "self", ".", "branch1x1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "output_nc", "*", "width", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._InceptionBlock.forward": [[182, 194], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "T2Net._InceptionBlock.nonlinearity", "T2Net._InceptionBlock.norm2", "T2Net._InceptionBlock.nonlinearity", "getattr", "result.append", "T2Net._InceptionBlock.norm1", "T2Net._InceptionBlock.branch1x1", "torch.dropout", "torch.dropout", "torch.dropout", "getattr.", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "width", ")", ":", "\n", "            ", "layer", "=", "getattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ")", "\n", "result", ".", "append", "(", "layer", "(", "x", ")", ")", "\n", "", "output", "=", "torch", ".", "cat", "(", "result", ",", "1", ")", "\n", "output", "=", "self", ".", "nonlinearity", "(", "self", ".", "norm1", "(", "output", ")", ")", "\n", "output", "=", "self", ".", "norm2", "(", "self", ".", "branch1x1", "(", "output", ")", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "output", "=", "F", ".", "dropout", "(", "output", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "", "return", "self", ".", "nonlinearity", "(", "output", "+", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._EncoderBlock.__init__": [[197, 210], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "middle_nc", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_EncoderBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "middle_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "middle_nc", ")", ",", "\n", "nonlinearity", ",", "\n", "nn", ".", "Conv2d", "(", "middle_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nonlinearity", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._EncoderBlock.forward": [[211, 213], ["T2Net._EncoderBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._DownBlock.__init__": [[216, 227], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_DownBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nonlinearity", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._DownBlock.forward": [[228, 230], ["T2Net._DownBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._ShuffleUpBlock.__init__": [[233, 246], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PixelShuffle", "torch.PixelShuffle", "torch.PixelShuffle", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "up_scale", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_ShuffleUpBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "input_nc", "*", "up_scale", "**", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "PixelShuffle", "(", "up_scale", ")", ",", "\n", "nonlinearity", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nonlinearity", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._ShuffleUpBlock.forward": [[247, 249], ["T2Net._ShuffleUpBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._DecoderUpBlock.__init__": [[252, 266], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "middle_nc", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_DecoderUpBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "middle_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "middle_nc", ")", ",", "\n", "nonlinearity", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "middle_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nonlinearity", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._DecoderUpBlock.forward": [[267, 269], ["T2Net._DecoderUpBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._DecoderUpBlock_Upsampling.__init__": [[271, 288], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "middle_nc", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_DecoderUpBlock_Upsampling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "middle_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "middle_nc", ")", ",", "\n", "nonlinearity", ",", "\n", "# nn.ConvTranspose2d(middle_nc, output_nc, kernel_size=3, stride=2, padding=1, output_padding=1),", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "middle_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nonlinearity", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._DecoderUpBlock_Upsampling.forward": [[289, 291], ["T2Net._DecoderUpBlock_Upsampling.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._OutputBlock.__init__": [[293, 303], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "int"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_OutputBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "int", "(", "kernel_size", "/", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._OutputBlock.forward": [[304, 306], ["T2Net._OutputBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._ResGenerator.__init__": [[313, 369], ["torch.Module.__init__", "T2Net.get_norm_layer", "T2Net.get_nonlinearity_layer", "range", "min", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "get_norm_layer.", "min", "min", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "T2Net._EncoderBlock", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "T2Net._InceptionBlock", "T2Net.GaussianNoiseLayer", "T2Net._DecoderUpBlock"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_norm_layer", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_nonlinearity_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_blocks", "=", "6", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "drop_rate", "=", "0", ",", "add_noise", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "_ResGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "nonlinearity", "=", "get_nonlinearity_layer", "(", "activation_type", "=", "activation", ")", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "encoder", "=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nonlinearity", "\n", "]", "\n", "\n", "n_downsampling", "=", "2", "\n", "mult", "=", "1", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult_prev", "=", "mult", "\n", "mult", "=", "min", "(", "2", "**", "(", "i", "+", "1", ")", ",", "2", ")", "\n", "encoder", "+=", "[", "\n", "_EncoderBlock", "(", "ngf", "*", "mult_prev", ",", "ngf", "*", "mult", ",", "ngf", "*", "mult", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "]", "\n", "\n", "", "mult", "=", "min", "(", "2", "**", "n_downsampling", ",", "2", ")", "\n", "for", "i", "in", "range", "(", "n_blocks", "-", "n_downsampling", ")", ":", "\n", "            ", "encoder", "+=", "[", "\n", "_InceptionBlock", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", ",", "norm_layer", "=", "norm_layer", ",", "nonlinearity", "=", "nonlinearity", ",", "width", "=", "1", ",", "\n", "drop_rate", "=", "drop_rate", ",", "use_bias", "=", "use_bias", ")", "\n", "]", "\n", "\n", "", "decoder", "=", "[", "]", "\n", "if", "add_noise", ":", "\n", "            ", "decoder", "+=", "[", "GaussianNoiseLayer", "(", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult_prev", "=", "mult", "\n", "mult", "=", "min", "(", "2", "**", "(", "n_downsampling", "-", "i", "-", "1", ")", ",", "2", ")", "\n", "decoder", "+=", "[", "\n", "_DecoderUpBlock", "(", "ngf", "*", "mult_prev", ",", "ngf", "*", "mult_prev", ",", "ngf", "*", "mult", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", ",", "\n", "]", "\n", "\n", "", "decoder", "+=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", "]", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "*", "encoder", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "*", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._ResGenerator.forward": [[370, 376], ["T2Net._ResGenerator.encoder", "T2Net._ResGenerator.decoder", "result.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "feature", "=", "self", ".", "encoder", "(", "input", ")", "\n", "result", "=", "[", "feature", "]", "\n", "output", "=", "self", ".", "decoder", "(", "feature", ")", "\n", "result", ".", "append", "(", "output", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._ResGenerator_Upsample_Conv2d.__init__": [[378, 434], ["torch.Module.__init__", "T2Net.get_norm_layer", "T2Net.get_nonlinearity_layer", "range", "min", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "get_norm_layer.", "min", "min", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "T2Net._EncoderBlock", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "T2Net._InceptionBlock", "T2Net.GaussianNoiseLayer", "T2Net._DecoderUpBlock_Upsampling"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_norm_layer", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_nonlinearity_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_blocks", "=", "6", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "drop_rate", "=", "0", ",", "add_noise", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "_ResGenerator_Upsample_Conv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "nonlinearity", "=", "get_nonlinearity_layer", "(", "activation_type", "=", "activation", ")", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "encoder", "=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nonlinearity", "\n", "]", "\n", "\n", "n_downsampling", "=", "2", "\n", "mult", "=", "1", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult_prev", "=", "mult", "\n", "mult", "=", "min", "(", "2", "**", "(", "i", "+", "1", ")", ",", "2", ")", "\n", "encoder", "+=", "[", "\n", "_EncoderBlock", "(", "ngf", "*", "mult_prev", ",", "ngf", "*", "mult", ",", "ngf", "*", "mult", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "]", "\n", "\n", "", "mult", "=", "min", "(", "2", "**", "n_downsampling", ",", "2", ")", "\n", "for", "i", "in", "range", "(", "n_blocks", "-", "n_downsampling", ")", ":", "\n", "            ", "encoder", "+=", "[", "\n", "_InceptionBlock", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", ",", "norm_layer", "=", "norm_layer", ",", "nonlinearity", "=", "nonlinearity", ",", "width", "=", "1", ",", "\n", "drop_rate", "=", "drop_rate", ",", "use_bias", "=", "use_bias", ")", "\n", "]", "\n", "\n", "", "decoder", "=", "[", "]", "\n", "if", "add_noise", ":", "\n", "            ", "decoder", "+=", "[", "GaussianNoiseLayer", "(", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult_prev", "=", "mult", "\n", "mult", "=", "min", "(", "2", "**", "(", "n_downsampling", "-", "i", "-", "1", ")", ",", "2", ")", "\n", "decoder", "+=", "[", "\n", "_DecoderUpBlock_Upsampling", "(", "ngf", "*", "mult_prev", ",", "ngf", "*", "mult_prev", ",", "ngf", "*", "mult", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", ",", "\n", "]", "\n", "\n", "", "decoder", "+=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "\n", "# nn.Conv2d(ngf, output_nc, kernel_size=1, padding=0)", "\n", "]", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "*", "encoder", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "*", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._ResGenerator_Upsample_Conv2d.forward": [[435, 444], ["T2Net._ResGenerator_Upsample_Conv2d.encoder", "T2Net._ResGenerator_Upsample_Conv2d.decoder", "print", "result.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "feature", "=", "self", ".", "encoder", "(", "input", ")", "\n", "result", "=", "[", "feature", "]", "\n", "output", "=", "self", ".", "decoder", "(", "feature", ")", "\n", "# print('before first sigmoid before final projection:', output)", "\n", "# output = self.final_proj(output_pool)", "\n", "print", "(", "'before first sigmoid after final projection:'", ",", "output", ")", "\n", "result", ".", "append", "(", "output", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._ResGenerator_Upsample_Conv2d_Pool.__init__": [[446, 505], ["torch.Module.__init__", "T2Net.get_norm_layer", "T2Net.get_nonlinearity_layer", "range", "min", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "get_norm_layer.", "min", "min", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "T2Net._EncoderBlock", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "T2Net._InceptionBlock", "T2Net.GaussianNoiseLayer", "T2Net._DecoderUpBlock_Upsampling"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_norm_layer", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_nonlinearity_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "output_size", ",", "ngf", "=", "64", ",", "n_blocks", "=", "6", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "drop_rate", "=", "0", ",", "add_noise", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "_ResGenerator_Upsample_Conv2d_Pool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "output_h", "=", "output_size", "[", "0", "]", "\n", "self", ".", "output_w", "=", "output_size", "[", "1", "]", "\n", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "nonlinearity", "=", "get_nonlinearity_layer", "(", "activation_type", "=", "activation", ")", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "encoder", "=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nonlinearity", "\n", "]", "\n", "\n", "n_downsampling", "=", "2", "\n", "mult", "=", "1", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult_prev", "=", "mult", "\n", "mult", "=", "min", "(", "2", "**", "(", "i", "+", "1", ")", ",", "2", ")", "\n", "encoder", "+=", "[", "\n", "_EncoderBlock", "(", "ngf", "*", "mult_prev", ",", "ngf", "*", "mult", ",", "ngf", "*", "mult", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "]", "\n", "\n", "", "mult", "=", "min", "(", "2", "**", "n_downsampling", ",", "2", ")", "\n", "for", "i", "in", "range", "(", "n_blocks", "-", "n_downsampling", ")", ":", "\n", "            ", "encoder", "+=", "[", "\n", "_InceptionBlock", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", ",", "norm_layer", "=", "norm_layer", ",", "nonlinearity", "=", "nonlinearity", ",", "width", "=", "1", ",", "\n", "drop_rate", "=", "drop_rate", ",", "use_bias", "=", "use_bias", ")", "\n", "]", "\n", "\n", "", "decoder", "=", "[", "]", "\n", "if", "add_noise", ":", "\n", "            ", "decoder", "+=", "[", "GaussianNoiseLayer", "(", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult_prev", "=", "mult", "\n", "mult", "=", "min", "(", "2", "**", "(", "n_downsampling", "-", "i", "-", "1", ")", ",", "2", ")", "\n", "decoder", "+=", "[", "\n", "_DecoderUpBlock_Upsampling", "(", "ngf", "*", "mult_prev", ",", "ngf", "*", "mult_prev", ",", "ngf", "*", "mult", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", ",", "\n", "]", "\n", "\n", "", "final_proj", "=", "[", "\n", "# nn.ReflectionPad2d(3),", "\n", "# nn.Conv2d(ngf, output_nc, kernel_size=7, padding=0)", "\n", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "]", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "*", "encoder", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "*", "decoder", ")", "\n", "self", ".", "final_proj", "=", "nn", ".", "Sequential", "(", "*", "final_proj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._ResGenerator_Upsample_Conv2d_Pool.forward": [[506, 520], ["T2Net._ResGenerator_Upsample_Conv2d_Pool.encoder", "T2Net._ResGenerator_Upsample_Conv2d_Pool.decoder", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "print", "T2Net._ResGenerator_Upsample_Conv2d_Pool.final_proj", "print", "result.append", "T2Net._ResGenerator_Upsample_Conv2d_Pool.size", "T2Net._ResGenerator_Upsample_Conv2d_Pool.size", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "feature", "=", "self", ".", "encoder", "(", "input", ")", "\n", "# print(feature)", "\n", "result", "=", "[", "feature", "]", "\n", "output", "=", "self", ".", "decoder", "(", "feature", ")", "\n", "H", ",", "W", "=", "output", ".", "size", "(", ")", "[", "2", "]", ",", "output", ".", "size", "(", ")", "[", "3", "]", "\n", "output_pool", "=", "F", ".", "max_pool2d", "(", "output", ",", "kernel_size", "=", "(", "int", "(", "H", "/", "self", ".", "output_h", ")", ",", "int", "(", "W", "/", "self", ".", "output_w", ")", ")", ",", "\n", "stride", "=", "(", "int", "(", "H", "/", "self", ".", "output_h", ")", ",", "int", "(", "W", "/", "self", ".", "output_w", ")", ")", ")", "\n", "print", "(", "'before first sigmoid, pooling:'", ",", "output_pool", ")", "\n", "output_pool", "=", "self", ".", "final_proj", "(", "output_pool", ")", "\n", "print", "(", "'before first sigmoid, after projection: '", ",", "output_pool", ")", "\n", "# print(output_pool.size())", "\n", "result", ".", "append", "(", "output_pool", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._ResGenerator_Upsample.__init__": [[522, 578], ["torch.Module.__init__", "T2Net.get_norm_layer", "T2Net.get_nonlinearity_layer", "range", "min", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "get_norm_layer.", "min", "min", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "T2Net._EncoderBlock", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "T2Net._InceptionBlock", "T2Net.GaussianNoiseLayer", "T2Net._DecoderUpBlock_Upsampling"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_norm_layer", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_nonlinearity_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_blocks", "=", "6", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "drop_rate", "=", "0", ",", "add_noise", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "_ResGenerator_Upsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "nonlinearity", "=", "get_nonlinearity_layer", "(", "activation_type", "=", "activation", ")", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "encoder", "=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nonlinearity", "\n", "]", "\n", "\n", "n_downsampling", "=", "2", "\n", "mult", "=", "1", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult_prev", "=", "mult", "\n", "mult", "=", "min", "(", "2", "**", "(", "i", "+", "1", ")", ",", "2", ")", "\n", "encoder", "+=", "[", "\n", "_EncoderBlock", "(", "ngf", "*", "mult_prev", ",", "ngf", "*", "mult", ",", "ngf", "*", "mult", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "]", "\n", "\n", "", "mult", "=", "min", "(", "2", "**", "n_downsampling", ",", "2", ")", "\n", "for", "i", "in", "range", "(", "n_blocks", "-", "n_downsampling", ")", ":", "\n", "            ", "encoder", "+=", "[", "\n", "_InceptionBlock", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", ",", "norm_layer", "=", "norm_layer", ",", "nonlinearity", "=", "nonlinearity", ",", "width", "=", "1", ",", "\n", "drop_rate", "=", "drop_rate", ",", "use_bias", "=", "use_bias", ")", "\n", "]", "\n", "\n", "", "decoder", "=", "[", "]", "\n", "if", "add_noise", ":", "\n", "            ", "decoder", "+=", "[", "GaussianNoiseLayer", "(", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult_prev", "=", "mult", "\n", "mult", "=", "min", "(", "2", "**", "(", "n_downsampling", "-", "i", "-", "1", ")", ",", "2", ")", "\n", "decoder", "+=", "[", "\n", "_DecoderUpBlock_Upsampling", "(", "ngf", "*", "mult_prev", ",", "ngf", "*", "mult_prev", ",", "ngf", "*", "mult", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", ",", "\n", "]", "\n", "\n", "", "decoder", "+=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", "]", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "*", "encoder", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "*", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._ResGenerator_Upsample.forward": [[579, 585], ["T2Net._ResGenerator_Upsample.encoder", "T2Net._ResGenerator_Upsample.decoder", "result.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "feature", "=", "self", ".", "encoder", "(", "input", ")", "\n", "result", "=", "[", "feature", "]", "\n", "output", "=", "self", ".", "decoder", "(", "feature", ")", "\n", "result", ".", "append", "(", "output", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._PreUNet16.__init__": [[587, 638], ["torch.Module.__init__", "T2Net.get_norm_layer", "T2Net.get_nonlinearity_layer", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "range", "range", "T2Net._DecoderUpBlock", "T2Net._DecoderUpBlock", "T2Net._DecoderUpBlock", "T2Net._OutputBlock", "T2Net._OutputBlock", "T2Net._OutputBlock", "T2Net._OutputBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.Upsample", "type", "torchvision.models.vgg16", "T2Net._EncoderBlock", "setattr", "T2Net._DecoderUpBlock", "T2Net._DecoderUpBlock", "setattr", "int", "T2Net._InceptionBlock", "int", "str", "str"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_norm_layer", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_nonlinearity_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "layers", "=", "5", ",", "pretrained", "=", "False", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLu'", ",", "\n", "drop_rate", "=", "0", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "_PreUNet16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "layers", "=", "layers", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "nonlinearity", "=", "get_nonlinearity_layer", "(", "activation_type", "=", "activation", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "encoder", "=", "models", ".", "vgg16", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "encoder", "[", "0", "]", ",", "self", ".", "relu", ",", "encoder", "[", "2", "]", ",", "self", ".", "relu", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "encoder", "[", "5", "]", ",", "self", ".", "relu", ",", "encoder", "[", "7", "]", ",", "self", ".", "relu", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "encoder", "[", "10", "]", ",", "self", ".", "relu", ",", "encoder", "[", "12", "]", ",", "self", ".", "relu", ",", "encoder", "[", "14", "]", ",", "self", ".", "relu", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "encoder", "[", "17", "]", ",", "self", ".", "relu", ",", "encoder", "[", "19", "]", ",", "self", ".", "relu", ",", "encoder", "[", "21", "]", ",", "self", ".", "relu", ")", "\n", "\n", "for", "i", "in", "range", "(", "layers", "-", "4", ")", ":", "\n", "            ", "conv", "=", "_EncoderBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "setattr", "(", "self", ",", "'down'", "+", "str", "(", "i", ")", ",", "conv", ".", "model", ")", "\n", "\n", "", "center", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "7", "-", "layers", ")", ":", "\n", "            ", "center", "+=", "[", "\n", "_InceptionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", ",", "nonlinearity", ",", "7", "-", "layers", ",", "drop_rate", ",", "use_bias", ")", "\n", "]", "\n", "\n", "", "center", "+=", "[", "_DecoderUpBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "ngf", "*", "4", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "layers", "-", "4", ")", ":", "\n", "            ", "upconv", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "8", "+", "4", ")", ",", "ngf", "*", "8", ",", "ngf", "*", "4", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "setattr", "(", "self", ",", "'up'", "+", "str", "(", "i", ")", ",", "upconv", ".", "model", ")", "\n", "\n", "", "self", ".", "deconv4", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "4", "+", "4", ")", ",", "ngf", "*", "8", ",", "ngf", "*", "2", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "deconv3", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "2", "+", "2", ")", "+", "output_nc", ",", "ngf", "*", "4", ",", "ngf", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "deconv2", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "1", "+", "1", ")", "+", "output_nc", ",", "ngf", "*", "2", ",", "int", "(", "ngf", "/", "2", ")", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "\n", "self", ".", "deconv1", "=", "_OutputBlock", "(", "int", "(", "ngf", "/", "2", ")", "+", "output_nc", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "use_bias", "=", "use_bias", ")", "\n", "\n", "self", ".", "output4", "=", "_OutputBlock", "(", "ngf", "*", "(", "4", "+", "4", ")", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "use_bias", "=", "use_bias", ")", "\n", "self", ".", "output3", "=", "_OutputBlock", "(", "ngf", "*", "(", "2", "+", "2", ")", "+", "output_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "use_bias", "=", "use_bias", ")", "\n", "self", ".", "output2", "=", "_OutputBlock", "(", "ngf", "*", "(", "1", "+", "1", ")", "+", "output_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "use_bias", "=", "use_bias", ")", "\n", "\n", "self", ".", "center", "=", "nn", ".", "Sequential", "(", "*", "center", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._PreUNet16.forward": [[639, 673], ["T2Net._PreUNet16.pool", "T2Net._PreUNet16.pool", "T2Net._PreUNet16.pool", "T2Net._PreUNet16.pool", "range", "T2Net._PreUNet16.center", "range", "T2Net._PreUNet16.deconv4.forward", "T2Net._PreUNet16.output4.forward", "result.append", "T2Net._PreUNet16.deconv3.forward", "T2Net._PreUNet16.output3.forward", "result.append", "T2Net._PreUNet16.deconv2.forward", "T2Net._PreUNet16.output2.forward", "result.append", "T2Net._PreUNet16.deconv1.forward", "result.append", "T2Net._PreUNet16.conv1", "T2Net._PreUNet16.conv2", "T2Net._PreUNet16.conv3", "T2Net._PreUNet16.conv4", "getattr", "T2Net._PreUNet16.pool", "middle.append", "getattr", "getattr.", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "getattr.", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "str", "str", "T2Net._PreUNet16.upsample", "T2Net._PreUNet16.upsample", "T2Net._PreUNet16.upsample", "T2Net._PreUNet16.upsample", "T2Net._PreUNet16.upsample"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "pool", "(", "self", ".", "conv1", "(", "input", ")", ")", "\n", "conv2", "=", "self", ".", "pool", "(", "self", ".", "conv2", "(", "conv1", ")", ")", "\n", "conv3", "=", "self", ".", "pool", "(", "self", ".", "conv3", "(", "conv2", ")", ")", "\n", "center_in", "=", "self", ".", "pool", "(", "self", ".", "conv4", "(", "conv3", ")", ")", "\n", "\n", "middle", "=", "[", "center_in", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "layers", "-", "4", ")", ":", "\n", "            ", "model", "=", "getattr", "(", "self", ",", "'down'", "+", "str", "(", "i", ")", ")", "\n", "center_in", "=", "self", ".", "pool", "(", "model", "(", "center_in", ")", ")", "\n", "middle", ".", "append", "(", "center_in", ")", "\n", "\n", "", "result", "=", "[", "center_in", "]", "\n", "\n", "center_out", "=", "self", ".", "center", "(", "center_in", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "layers", "-", "4", ")", ":", "\n", "            ", "model", "=", "getattr", "(", "self", ",", "'up'", "+", "str", "(", "i", ")", ")", "\n", "center_out", "=", "model", "(", "torch", ".", "cat", "(", "[", "center_out", ",", "middle", "[", "self", ".", "layers", "-", "4", "-", "i", "]", "]", ",", "1", ")", ")", "\n", "\n", "", "deconv4", "=", "self", ".", "deconv4", ".", "forward", "(", "torch", ".", "cat", "(", "[", "center_out", ",", "conv3", "*", "0.1", "]", ",", "1", ")", ")", "\n", "output4", "=", "self", ".", "output4", ".", "forward", "(", "torch", ".", "cat", "(", "[", "center_out", ",", "conv3", "*", "0.1", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output4", ")", "\n", "deconv3", "=", "self", ".", "deconv3", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv4", ",", "conv2", "*", "0.05", ",", "self", ".", "upsample", "(", "output4", ")", "]", ",", "1", ")", ")", "\n", "output3", "=", "self", ".", "output3", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv4", ",", "conv2", "*", "0.05", ",", "self", ".", "upsample", "(", "output4", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output3", ")", "\n", "deconv2", "=", "self", ".", "deconv2", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv3", ",", "conv1", "*", "0.01", ",", "self", ".", "upsample", "(", "output3", ")", "]", ",", "1", ")", ")", "\n", "output2", "=", "self", ".", "output2", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv3", ",", "conv1", "*", "0.01", ",", "self", ".", "upsample", "(", "output3", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output2", ")", "\n", "\n", "output1", "=", "self", ".", "deconv1", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv2", ",", "self", ".", "upsample", "(", "output2", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output1", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._UNetGenerator.__init__": [[676, 734], ["torch.Module.__init__", "T2Net.get_norm_layer", "T2Net.get_nonlinearity_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "T2Net._EncoderBlock", "T2Net._EncoderBlock", "T2Net._EncoderBlock", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "T2Net._DecoderUpBlock", "T2Net._DecoderUpBlock", "T2Net._DecoderUpBlock", "T2Net._OutputBlock", "T2Net._OutputBlock", "T2Net._OutputBlock", "T2Net._OutputBlock", "torch.Upsample", "torch.Upsample", "torch.Upsample", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "get_norm_layer.", "T2Net._EncoderBlock", "setattr", "T2Net._DecoderUpBlock", "T2Net._DecoderUpBlock", "setattr", "int", "T2Net._InceptionBlock", "T2Net.GaussianNoiseLayer", "int", "str", "str"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_norm_layer", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_nonlinearity_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "layers", "=", "4", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "drop_rate", "=", "0", ",", "add_noise", "=", "False", ",", "gpu_ids", "=", "[", "]", ",", "\n", "weight", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "_UNetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "weight", "=", "weight", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "nonlinearity", "=", "get_nonlinearity_layer", "(", "activation_type", "=", "activation", ")", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "# encoder part", "\n", "", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nonlinearity", "\n", ")", "\n", "self", ".", "conv2", "=", "_EncoderBlock", "(", "ngf", ",", "ngf", "*", "2", ",", "ngf", "*", "2", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "conv3", "=", "_EncoderBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "ngf", "*", "4", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "conv4", "=", "_EncoderBlock", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "\n", "for", "i", "in", "range", "(", "layers", "-", "4", ")", ":", "\n", "            ", "conv", "=", "_EncoderBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "setattr", "(", "self", ",", "'down'", "+", "str", "(", "i", ")", ",", "conv", ".", "model", ")", "\n", "\n", "", "center", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "7", "-", "layers", ")", ":", "\n", "            ", "center", "+=", "[", "\n", "_InceptionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", ",", "nonlinearity", ",", "7", "-", "layers", ",", "drop_rate", ",", "use_bias", ")", "\n", "]", "\n", "\n", "", "center", "+=", "[", "\n", "_DecoderUpBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "ngf", "*", "4", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "]", "\n", "if", "add_noise", ":", "\n", "            ", "center", "+=", "[", "GaussianNoiseLayer", "(", ")", "]", "\n", "", "self", ".", "center", "=", "nn", ".", "Sequential", "(", "*", "center", ")", "\n", "\n", "for", "i", "in", "range", "(", "layers", "-", "4", ")", ":", "\n", "            ", "upconv", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "8", "+", "4", ")", ",", "ngf", "*", "8", ",", "ngf", "*", "4", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "setattr", "(", "self", ",", "'up'", "+", "str", "(", "i", ")", ",", "upconv", ".", "model", ")", "\n", "\n", "", "self", ".", "deconv4", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "4", "+", "4", ")", ",", "ngf", "*", "8", ",", "ngf", "*", "2", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "deconv3", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "2", "+", "2", ")", "+", "output_nc", ",", "ngf", "*", "4", ",", "ngf", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "deconv2", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "1", "+", "1", ")", "+", "output_nc", ",", "ngf", "*", "2", ",", "int", "(", "ngf", "/", "2", ")", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "\n", "self", ".", "output4", "=", "_OutputBlock", "(", "ngf", "*", "(", "4", "+", "4", ")", ",", "output_nc", ",", "3", ",", "use_bias", ")", "\n", "self", ".", "output3", "=", "_OutputBlock", "(", "ngf", "*", "(", "2", "+", "2", ")", "+", "output_nc", ",", "output_nc", ",", "3", ",", "use_bias", ")", "\n", "self", ".", "output2", "=", "_OutputBlock", "(", "ngf", "*", "(", "1", "+", "1", ")", "+", "output_nc", ",", "output_nc", ",", "3", ",", "use_bias", ")", "\n", "self", ".", "output1", "=", "_OutputBlock", "(", "int", "(", "ngf", "/", "2", ")", "+", "output_nc", ",", "output_nc", ",", "7", ",", "use_bias", ")", "\n", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._UNetGenerator.forward": [[735, 768], ["T2Net._UNetGenerator.pool", "T2Net._UNetGenerator.pool", "T2Net._UNetGenerator.pool", "T2Net._UNetGenerator.pool", "range", "T2Net._UNetGenerator.center.forward", "range", "result.append", "T2Net._UNetGenerator.deconv4.forward", "T2Net._UNetGenerator.output4.forward", "result.append", "T2Net._UNetGenerator.deconv3.forward", "T2Net._UNetGenerator.output3.forward", "result.append", "T2Net._UNetGenerator.deconv2.forward", "T2Net._UNetGenerator.output2.forward", "result.append", "T2Net._UNetGenerator.output1.forward", "result.append", "T2Net._UNetGenerator.conv1", "T2Net._UNetGenerator.conv2.forward", "T2Net._UNetGenerator.conv3.forward", "T2Net._UNetGenerator.conv4.forward", "getattr", "T2Net._UNetGenerator.pool", "middle.append", "getattr", "getattr.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "getattr.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "str", "str", "T2Net._UNetGenerator.upsample", "T2Net._UNetGenerator.upsample", "T2Net._UNetGenerator.upsample", "T2Net._UNetGenerator.upsample", "T2Net._UNetGenerator.upsample"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "pool", "(", "self", ".", "conv1", "(", "input", ")", ")", "\n", "conv2", "=", "self", ".", "pool", "(", "self", ".", "conv2", ".", "forward", "(", "conv1", ")", ")", "\n", "conv3", "=", "self", ".", "pool", "(", "self", ".", "conv3", ".", "forward", "(", "conv2", ")", ")", "\n", "center_in", "=", "self", ".", "pool", "(", "self", ".", "conv4", ".", "forward", "(", "conv3", ")", ")", "\n", "\n", "middle", "=", "[", "center_in", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "layers", "-", "4", ")", ":", "\n", "            ", "model", "=", "getattr", "(", "self", ",", "'down'", "+", "str", "(", "i", ")", ")", "\n", "center_in", "=", "self", ".", "pool", "(", "model", ".", "forward", "(", "center_in", ")", ")", "\n", "middle", ".", "append", "(", "center_in", ")", "\n", "", "center_out", "=", "self", ".", "center", ".", "forward", "(", "center_in", ")", "\n", "result", "=", "[", "center_in", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "layers", "-", "4", ")", ":", "\n", "            ", "model", "=", "getattr", "(", "self", ",", "'up'", "+", "str", "(", "i", ")", ")", "\n", "center_out", "=", "model", ".", "forward", "(", "torch", ".", "cat", "(", "[", "center_out", ",", "middle", "[", "self", ".", "layers", "-", "5", "-", "i", "]", "]", ",", "1", ")", ")", "\n", "\n", "", "result", ".", "append", "(", "center_out", ")", "\n", "\n", "deconv4", "=", "self", ".", "deconv4", ".", "forward", "(", "torch", ".", "cat", "(", "[", "center_out", ",", "conv3", "*", "self", ".", "weight", "]", ",", "1", ")", ")", "\n", "output4", "=", "self", ".", "output4", ".", "forward", "(", "torch", ".", "cat", "(", "[", "center_out", ",", "conv3", "*", "self", ".", "weight", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output4", ")", "\n", "deconv3", "=", "self", ".", "deconv3", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv4", ",", "conv2", "*", "self", ".", "weight", "*", "0.5", ",", "self", ".", "upsample", "(", "output4", ")", "]", ",", "1", ")", ")", "\n", "output3", "=", "self", ".", "output3", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv4", ",", "conv2", "*", "self", ".", "weight", "*", "0.5", ",", "self", ".", "upsample", "(", "output4", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output3", ")", "\n", "deconv2", "=", "self", ".", "deconv2", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv3", ",", "conv1", "*", "self", ".", "weight", "*", "0.1", ",", "self", ".", "upsample", "(", "output3", ")", "]", ",", "1", ")", ")", "\n", "output2", "=", "self", ".", "output2", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv3", ",", "conv1", "*", "self", ".", "weight", "*", "0.1", ",", "self", ".", "upsample", "(", "output3", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output2", ")", "\n", "output1", "=", "self", ".", "output1", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv2", ",", "self", ".", "upsample", "(", "output2", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output1", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._SimplifiedUNetGenerator.__init__": [[771, 829], ["torch.Module.__init__", "T2Net.get_norm_layer", "T2Net.get_nonlinearity_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "T2Net._EncoderBlock", "T2Net._EncoderBlock", "T2Net._EncoderBlock", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "T2Net._DecoderUpBlock", "T2Net._DecoderUpBlock", "T2Net._DecoderUpBlock", "T2Net._OutputBlock", "T2Net._OutputBlock", "T2Net._OutputBlock", "T2Net._OutputBlock", "torch.Upsample", "torch.Upsample", "torch.Upsample", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "get_norm_layer.", "T2Net._EncoderBlock", "setattr", "T2Net._DecoderUpBlock", "T2Net._DecoderUpBlock", "setattr", "int", "T2Net._InceptionBlock", "T2Net.GaussianNoiseLayer", "int", "str", "str"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_norm_layer", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_nonlinearity_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "layers", "=", "4", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "drop_rate", "=", "0", ",", "add_noise", "=", "False", ",", "gpu_ids", "=", "[", "]", ",", "\n", "weight", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "_SimplifiedUNetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "weight", "=", "weight", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "nonlinearity", "=", "get_nonlinearity_layer", "(", "activation_type", "=", "activation", ")", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "# encoder part", "\n", "", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nonlinearity", "\n", ")", "\n", "self", ".", "conv2", "=", "_EncoderBlock", "(", "ngf", ",", "ngf", "*", "2", ",", "ngf", "*", "2", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "conv3", "=", "_EncoderBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "ngf", "*", "4", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "conv4", "=", "_EncoderBlock", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "\n", "for", "i", "in", "range", "(", "layers", "-", "4", ")", ":", "\n", "            ", "conv", "=", "_EncoderBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "setattr", "(", "self", ",", "'down'", "+", "str", "(", "i", ")", ",", "conv", ".", "model", ")", "\n", "\n", "", "center", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "7", "-", "layers", ")", ":", "\n", "            ", "center", "+=", "[", "\n", "_InceptionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", ",", "nonlinearity", ",", "7", "-", "layers", ",", "drop_rate", ",", "use_bias", ")", "\n", "]", "\n", "\n", "", "center", "+=", "[", "\n", "_DecoderUpBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "ngf", "*", "4", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "]", "\n", "if", "add_noise", ":", "\n", "            ", "center", "+=", "[", "GaussianNoiseLayer", "(", ")", "]", "\n", "", "self", ".", "center", "=", "nn", ".", "Sequential", "(", "*", "center", ")", "\n", "\n", "for", "i", "in", "range", "(", "layers", "-", "4", ")", ":", "\n", "            ", "upconv", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "8", "+", "4", ")", ",", "ngf", "*", "8", ",", "ngf", "*", "4", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "setattr", "(", "self", ",", "'up'", "+", "str", "(", "i", ")", ",", "upconv", ".", "model", ")", "\n", "\n", "", "self", ".", "deconv4", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "4", "+", "4", ")", ",", "ngf", "*", "8", ",", "ngf", "*", "2", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "deconv3", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "2", "+", "2", ")", "+", "output_nc", ",", "ngf", "*", "4", ",", "ngf", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "deconv2", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "1", "+", "1", ")", "+", "output_nc", ",", "ngf", "*", "2", ",", "int", "(", "ngf", "/", "2", ")", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "\n", "self", ".", "output4", "=", "_OutputBlock", "(", "ngf", "*", "(", "4", "+", "4", ")", ",", "output_nc", ",", "3", ",", "use_bias", ")", "\n", "self", ".", "output3", "=", "_OutputBlock", "(", "ngf", "*", "(", "2", "+", "2", ")", "+", "output_nc", ",", "output_nc", ",", "3", ",", "use_bias", ")", "\n", "self", ".", "output2", "=", "_OutputBlock", "(", "ngf", "*", "(", "1", "+", "1", ")", "+", "output_nc", ",", "output_nc", ",", "3", ",", "use_bias", ")", "\n", "self", ".", "output1", "=", "_OutputBlock", "(", "int", "(", "ngf", "/", "2", ")", "+", "output_nc", ",", "output_nc", ",", "7", ",", "use_bias", ")", "\n", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._SimplifiedUNetGenerator.forward": [[830, 863], ["T2Net._SimplifiedUNetGenerator.pool", "T2Net._SimplifiedUNetGenerator.pool", "T2Net._SimplifiedUNetGenerator.pool", "T2Net._SimplifiedUNetGenerator.deconv4.forward", "T2Net._SimplifiedUNetGenerator.output4.forward", "result.append", "T2Net._SimplifiedUNetGenerator.deconv3.forward", "T2Net._SimplifiedUNetGenerator.output3.forward", "result.append", "T2Net._SimplifiedUNetGenerator.deconv2.forward", "T2Net._SimplifiedUNetGenerator.output2.forward", "result.append", "T2Net._SimplifiedUNetGenerator.output1.forward", "result.append", "T2Net._SimplifiedUNetGenerator.conv1", "T2Net._SimplifiedUNetGenerator.conv2.forward", "T2Net._SimplifiedUNetGenerator.conv3.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "T2Net._SimplifiedUNetGenerator.upsample", "T2Net._SimplifiedUNetGenerator.upsample", "T2Net._SimplifiedUNetGenerator.upsample", "T2Net._SimplifiedUNetGenerator.upsample", "T2Net._SimplifiedUNetGenerator.upsample"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "pool", "(", "self", ".", "conv1", "(", "input", ")", ")", "\n", "conv2", "=", "self", ".", "pool", "(", "self", ".", "conv2", ".", "forward", "(", "conv1", ")", ")", "\n", "conv3", "=", "self", ".", "pool", "(", "self", ".", "conv3", ".", "forward", "(", "conv2", ")", ")", "\n", "# conv4 = self.pool(self.conv4.forward(conv3))", "\n", "\n", "# middle = [center_in]", "\n", "# for i in range(self.layers-4):", "\n", "#     model = getattr(self, 'down'+str(i))", "\n", "#     center_in = self.pool(model.forward(center_in))", "\n", "#     middle.append(center_in)", "\n", "# center_out = self.center.forward(center_in)", "\n", "# result = [center_in]", "\n", "\n", "# for i in range(self.layers-4):", "\n", "#     model = getattr(self, 'up'+str(i))", "\n", "#     center_out = model.forward(torch.cat([center_out, middle[self.layers-5-i]], 1))", "\n", "\n", "result", "=", "[", "]", "\n", "\n", "deconv4", "=", "self", ".", "deconv4", ".", "forward", "(", "torch", ".", "cat", "(", "[", "conv3", ",", "conv3", "*", "self", ".", "weight", "]", ",", "1", ")", ")", "\n", "output4", "=", "self", ".", "output4", ".", "forward", "(", "torch", ".", "cat", "(", "[", "conv3", ",", "conv3", "*", "self", ".", "weight", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output4", ")", "\n", "deconv3", "=", "self", ".", "deconv3", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv4", ",", "conv2", "*", "self", ".", "weight", "*", "0.5", ",", "self", ".", "upsample", "(", "output4", ")", "]", ",", "1", ")", ")", "\n", "output3", "=", "self", ".", "output3", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv4", ",", "conv2", "*", "self", ".", "weight", "*", "0.5", ",", "self", ".", "upsample", "(", "output4", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output3", ")", "\n", "deconv2", "=", "self", ".", "deconv2", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv3", ",", "conv1", "*", "self", ".", "weight", "*", "0.1", ",", "self", ".", "upsample", "(", "output3", ")", "]", ",", "1", ")", ")", "\n", "output2", "=", "self", ".", "output2", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv3", ",", "conv1", "*", "self", ".", "weight", "*", "0.1", ",", "self", ".", "upsample", "(", "output3", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output2", ")", "\n", "output1", "=", "self", ".", "output1", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv2", ",", "self", ".", "upsample", "(", "output2", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output1", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._MultiscaleDiscriminator.__init__": [[866, 877], ["torch.Module.__init__", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "T2Net._Discriminator", "setattr", "str"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "num_D", "=", "1", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "_MultiscaleDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_D", "=", "num_D", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "netD", "=", "_Discriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm", ",", "activation", ",", "gpu_ids", ")", "\n", "setattr", "(", "self", ",", "'scale'", "+", "str", "(", "i", ")", ",", "netD", ")", "\n", "\n", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._MultiscaleDiscriminator.forward": [[878, 887], ["range", "getattr", "getattr.forward", "result.append", "T2Net._MultiscaleDiscriminator.downsample", "str"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_D", ")", ":", "\n", "            ", "netD", "=", "getattr", "(", "self", ",", "'scale'", "+", "str", "(", "i", ")", ")", "\n", "output", "=", "netD", ".", "forward", "(", "input", ")", "\n", "result", ".", "append", "(", "output", ")", "\n", "if", "i", "!=", "(", "self", ".", "num_D", "-", "1", ")", ":", "\n", "                ", "input", "=", "self", ".", "downsample", "(", "input", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._Discriminator.__init__": [[890, 928], ["torch.Module.__init__", "T2Net.get_norm_layer", "T2Net.get_nonlinearity_layer", "range", "min", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "min", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "get_norm_layer.", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "get_norm_layer."], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_norm_layer", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_nonlinearity_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "_Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "nonlinearity", "=", "get_nonlinearity_layer", "(", "activation_type", "=", "activation", ")", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "model", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "nonlinearity", ",", "\n", "]", "\n", "\n", "nf_mult", "=", "1", "\n", "for", "i", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "i", ",", "8", ")", "\n", "model", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nonlinearity", ",", "\n", "]", "\n", "\n", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n", "model", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "8", ")", ",", "\n", "nonlinearity", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._Discriminator.forward": [[929, 931], ["T2Net._Discriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__": [[934, 961], ["torch.Module.__init__", "T2Net.get_norm_layer", "T2Net.get_nonlinearity_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.__init__", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_norm_layer", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_nonlinearity_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "n_layers", "=", "2", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "_FeatureDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "nonlinearity", "=", "get_nonlinearity_layer", "(", "activation_type", "=", "activation", ")", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "model", "=", "[", "\n", "nn", ".", "Linear", "(", "input_nc", "*", "40", "*", "30", ",", "input_nc", ")", ",", "\n", "nonlinearity", ",", "\n", "]", "\n", "\n", "# for i in range(1, n_layers):", "\n", "#     model +=[", "\n", "#         nn.Linear(input_nc, input_nc),", "\n", "#         nonlinearity", "\n", "#     ]", "\n", "\n", "model", "+=", "[", "nn", ".", "Linear", "(", "input_nc", ",", "1", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._FeatureDiscriminator.forward": [[962, 970], ["input.view.view.view", "T2Net._FeatureDiscriminator.model", "result.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "# print(input.size())", "\n", "# input = input.view(-1, 512 * 40 * 12)", "\n", "input", "=", "input", ".", "view", "(", "-", "1", ",", "512", "*", "30", "*", "40", ")", "\n", "output", "=", "self", ".", "model", "(", "input", ")", "\n", "result", ".", "append", "(", "output", ")", "\n", "return", "result", "", "", "", ""]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_norm_layer": [[14, 24], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["def", "get_norm_layer", "(", "norm_type", "=", "'batch'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "elif", "norm_type", "==", "'none'", ":", "\n", "        ", "norm_layer", "=", "None", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_nonlinearity_layer": [[26, 38], ["torch.ReLU", "torch.SELU", "torch.LeakyReLU", "torch.PReLU", "NotImplementedError"], "function", ["None"], ["", "def", "get_nonlinearity_layer", "(", "activation_type", "=", "'PReLU'", ")", ":", "\n", "    ", "if", "activation_type", "==", "'ReLU'", ":", "\n", "        ", "nonlinearity_layer", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "", "elif", "activation_type", "==", "'SELU'", ":", "\n", "        ", "nonlinearity_layer", "=", "nn", ".", "SELU", "(", "True", ")", "\n", "", "elif", "activation_type", "==", "'LeakyReLU'", ":", "\n", "        ", "nonlinearity_layer", "=", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", "\n", "", "elif", "activation_type", "==", "'PReLU'", ":", "\n", "        ", "nonlinearity_layer", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'activation layer [%s] is not found'", "%", "activation_type", ")", "\n", "", "return", "nonlinearity_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.get_scheduler": [[40, 54], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.ExponentialLR", "NotImplementedError", "max", "float"], "function", ["None"], ["", "def", "get_scheduler", "(", "optimizer", ",", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "lr_policy", "==", "'lambda'", ":", "\n", "        ", "def", "lambda_rule", "(", "epoch", ")", ":", "\n", "            ", "lr_l", "=", "1.0", "-", "max", "(", "0", ",", "epoch", "+", "1", "+", "1", "+", "opt", ".", "epoch_count", "-", "opt", ".", "niter", ")", "/", "float", "(", "opt", ".", "niter_decay", "+", "1", ")", "\n", "return", "lr_l", "\n", "", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_rule", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "opt", ".", "lr_decay_iters", ",", "gamma", "=", "0.1", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'exponent'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "ExponentialLR", "(", "optimizer", ",", "gamma", "=", "0.95", ")", "\n", "# scheduler = lr_scheduler.ExponentialLR(optimizer, gamma=0.9)", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'learning rate policy [%s] is not implemented'", ",", "opt", ".", "lr_policy", ")", "\n", "", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.init_weights": [[56, 78], ["print", "net.apply", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "torch.nn.init.uniform_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["", "def", "init_weights", "(", "net", ",", "net_name", "=", "None", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "    ", "def", "init_func", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "            ", "init", ".", "uniform_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network {} with {}'", ".", "format", "(", "net_name", ",", "init_type", ")", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.print_network": [[80, 86], ["net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net", ")", "\n", "print", "(", "'total number of parameters: %.3f M'", "%", "(", "num_params", "/", "1e6", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.init_net": [[88, 98], ["T2Net.print_network", "T2Net.init_weights", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel.cuda"], "function", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.print_network", "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.init_weights"], ["", "def", "init_net", "(", "net", ",", "init_type", "=", "'normal'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "\n", "    ", "print_network", "(", "net", ")", "\n", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "gpu_ids", ")", "\n", "net", ".", "cuda", "(", ")", "\n", "", "init_weights", "(", "net", ",", "init_type", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._freeze": [[100, 105], ["module.parameters"], "function", ["None"], ["", "def", "_freeze", "(", "*", "args", ")", ":", "\n", "    ", "for", "module", "in", "args", ":", "\n", "        ", "if", "module", ":", "\n", "            ", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net._unfreeze": [[107, 112], ["module.parameters"], "function", ["None"], ["", "", "", "", "def", "_unfreeze", "(", "*", "args", ")", ":", "\n", "    ", "for", "module", "in", "args", ":", "\n", "        ", "if", "module", ":", "\n", "            ", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.define_G": [[115, 127], ["T2Net.init_net", "T2Net._ResGenerator", "T2Net._UNetGenerator", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.init_net"], ["", "", "", "", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "layers", "=", "4", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "model_type", "=", "'UNet'", ",", "\n", "init_type", "=", "'xavier'", ",", "drop_rate", "=", "0", ",", "add_noise", "=", "False", ",", "gpu_ids", "=", "[", "]", ",", "weight", "=", "0.1", ")", ":", "\n", "\n", "    ", "if", "model_type", "==", "'ResNet'", ":", "\n", "        ", "net", "=", "_ResGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "layers", ",", "norm", ",", "activation", ",", "drop_rate", ",", "add_noise", ",", "gpu_ids", ")", "\n", "", "elif", "model_type", "==", "'UNet'", ":", "\n", "        ", "net", "=", "_UNetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "layers", ",", "norm", ",", "activation", ",", "drop_rate", ",", "add_noise", ",", "gpu_ids", ",", "weight", ")", "\n", "# net = _PreUNet16(input_nc, output_nc, ngf, layers, True, norm, activation, drop_rate, gpu_ids)", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'model type [%s] is not implemented'", ",", "model_type", ")", "\n", "\n", "", "return", "init_net", "(", "net", ",", "init_type", ",", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.define_D": [[130, 135], ["T2Net._MultiscaleDiscriminator", "T2Net.init_net"], "function", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.init_net"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "num_D", "=", "1", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "init_type", "=", "'xavier'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "\n", "    ", "net", "=", "_MultiscaleDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "num_D", ",", "norm", ",", "activation", ",", "gpu_ids", ")", "\n", "\n", "return", "init_net", "(", "net", ",", "init_type", ",", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.define_featureD": [[138, 143], ["T2Net._FeatureDiscriminator", "T2Net.init_net"], "function", ["home.repos.pwc.inspect_result.yzhao520_CPP.models.T2Net.init_net"], ["", "def", "define_featureD", "(", "input_nc", ",", "n_layers", "=", "2", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "init_type", "=", "'xavier'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "\n", "    ", "net", "=", "_FeatureDiscriminator", "(", "input_nc", ",", "n_layers", ",", "norm", ",", "activation", ",", "gpu_ids", ")", "\n", "\n", "return", "init_net", "(", "net", ",", "init_type", ",", "gpu_ids", ")", "\n", "\n"]]}